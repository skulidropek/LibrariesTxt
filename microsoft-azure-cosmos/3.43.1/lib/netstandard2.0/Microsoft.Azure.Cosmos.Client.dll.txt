internal class Antlr4.Runtime.AntlrFileStream : AntlrInputStream {
    protected internal string fileName;
    public string SourceName { get; }
    public AntlrFileStream(string fileName);
    public AntlrFileStream(string fileName, Encoding encoding);
    public virtual void Load(string fileName, Encoding encoding);
    public virtual string get_SourceName();
}
internal class Antlr4.Runtime.AntlrInputStream : BaseInputCharStream {
    protected internal Char[] data;
    public AntlrInputStream(string input);
    public AntlrInputStream(Char[] data, int numberOfActualCharsInArray);
    public AntlrInputStream(TextReader r);
    public AntlrInputStream(TextReader r, int initialSize);
    public AntlrInputStream(TextReader r, int initialSize, int readChunkSize);
    public AntlrInputStream(Stream input);
    public AntlrInputStream(Stream input, int initialSize);
    public AntlrInputStream(Stream input, int initialSize, int readChunkSize);
    public virtual void Load(TextReader r, int size, int readChunkSize);
    protected virtual int ValueAt(int i);
    protected virtual string ConvertDataToString(int start, int count);
}
internal abstract class Antlr4.Runtime.Atn.AbstractPredicateTransition : Transition {
    public AbstractPredicateTransition(ATNState target);
}
internal class Antlr4.Runtime.Atn.ActionTransition : Transition {
    public int ruleIndex;
    public int actionIndex;
    public bool isCtxDependent;
    public TransitionType TransitionType { get; }
    public bool IsEpsilon { get; }
    public ActionTransition(ATNState target, int ruleIndex);
    public ActionTransition(ATNState target, int ruleIndex, int actionIndex, bool isCtxDependent);
    public virtual TransitionType get_TransitionType();
    public virtual bool get_IsEpsilon();
    public virtual bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.AmbiguityInfo : DecisionEventInfo {
    public AmbiguityInfo(int decision, SimulatorState state, ITokenStream input, int startIndex, int stopIndex);
}
internal class Antlr4.Runtime.Atn.ArrayPredictionContext : PredictionContext {
    public PredictionContext[] parents;
    public Int32[] returnStates;
    public bool IsEmpty { get; }
    public int Size { get; }
    public ArrayPredictionContext(SingletonPredictionContext a);
    public ArrayPredictionContext(PredictionContext[] parents, Int32[] returnStates);
    public virtual bool get_IsEmpty();
    public virtual int get_Size();
    public virtual PredictionContext GetParent(int index);
    public virtual int GetReturnState(int index);
    public virtual bool Equals(object o);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.ATN : object {
    public static int INVALID_ALT_NUMBER;
    [NotNullAttribute]
public IList`1<ATNState> states;
    [NotNullAttribute]
public IList`1<DecisionState> decisionToState;
    public RuleStartState[] ruleToStartState;
    public RuleStopState[] ruleToStopState;
    [NotNullAttribute]
public IDictionary`2<string, TokensStartState> modeNameToStartState;
    public ATNType grammarType;
    public int maxTokenType;
    public Int32[] ruleToTokenType;
    public ILexerAction[] lexerActions;
    [NotNullAttribute]
public IList`1<TokensStartState> modeToStartState;
    private PredictionContextCache contextCache;
    [NotNullAttribute]
public DFA[] decisionToDFA;
    [NotNullAttribute]
public DFA[] modeToDFA;
    protected internal ConcurrentDictionary`2<int, int> LL1Table;
    public int NumberOfDecisions { get; }
    public ATN(ATNType grammarType, int maxTokenType);
    public virtual PredictionContext GetCachedContext(PredictionContext context);
    public virtual IntervalSet NextTokens(ATNState s, RuleContext ctx);
    public virtual IntervalSet NextTokens(ATNState s);
    public virtual void AddState(ATNState state);
    public virtual void RemoveState(ATNState state);
    public virtual void DefineMode(string name, TokensStartState s);
    public virtual int DefineDecisionState(DecisionState s);
    public virtual DecisionState GetDecisionState(int decision);
    public virtual int get_NumberOfDecisions();
    public virtual IntervalSet GetExpectedTokens(int stateNumber, RuleContext context);
}
internal class Antlr4.Runtime.Atn.ATNConfig : object {
    private static int SUPPRESS_PRECEDENCE_FILTER;
    public ATNState state;
    public int alt;
    public PredictionContext context;
    public int reachesIntoOuterContext;
    public SemanticContext semanticContext;
    public int OuterContextDepth { get; }
    public bool IsPrecedenceFilterSuppressed { get; }
    public ATNConfig(ATNConfig old);
    public ATNConfig(ATNState state, int alt, PredictionContext context);
    public ATNConfig(ATNState state, int alt, PredictionContext context, SemanticContext semanticContext);
    public ATNConfig(ATNConfig c, ATNState state);
    public ATNConfig(ATNConfig c, ATNState state, SemanticContext semanticContext);
    public ATNConfig(ATNConfig c, SemanticContext semanticContext);
    public ATNConfig(ATNConfig c, ATNState state, PredictionContext context);
    public ATNConfig(ATNConfig c, ATNState state, PredictionContext context, SemanticContext semanticContext);
    private static ATNConfig();
    public int get_OuterContextDepth();
    public bool get_IsPrecedenceFilterSuppressed();
    public void SetPrecedenceFilterSuppressed(bool value);
    public virtual bool Equals(object o);
    public virtual bool Equals(ATNConfig other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToString(IRecognizer recog, bool showAlt);
}
internal class Antlr4.Runtime.Atn.ATNConfigSet : object {
    protected bool readOnly;
    public ConfigHashSet configLookup;
    public ArrayList`1<ATNConfig> configs;
    public int uniqueAlt;
    public BitSet conflictingAlts;
    public bool hasSemanticContext;
    public bool dipsIntoOuterContext;
    public bool fullCtx;
    private int cachedHashCode;
    public List`1<ATNConfig> Elements { get; }
    public int Count { get; }
    public bool Empty { get; }
    public bool IsReadOnly { get; public set; }
    public ATNConfigSet(bool fullCtx);
    public ATNConfigSet(ATNConfigSet old);
    public bool Add(ATNConfig config);
    public bool Add(ATNConfig config, MergeCache mergeCache);
    public List`1<ATNConfig> get_Elements();
    public HashSet`1<ATNState> GetStates();
    public BitSet GetAlts();
    public List`1<SemanticContext> GetPredicates();
    public ATNConfig Get(int i);
    public void OptimizeConfigs(ATNSimulator interpreter);
    public bool AddAll(ICollection`1<ATNConfig> coll);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public int get_Count();
    public bool get_Empty();
    public bool Contains(object o);
    public void Clear();
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.ATNDeserializationOptions : object {
    private static ATNDeserializationOptions defaultOptions;
    private bool readOnly;
    private bool verifyATN;
    private bool generateRuleBypassTransitions;
    private bool optimize;
    [NotNullAttribute]
public static ATNDeserializationOptions Default { get; }
    public bool IsReadOnly { get; }
    public bool VerifyAtn { get; public set; }
    public bool GenerateRuleBypassTransitions { get; public set; }
    public bool Optimize { get; public set; }
    private static ATNDeserializationOptions();
    public ATNDeserializationOptions(ATNDeserializationOptions options);
    public static ATNDeserializationOptions get_Default();
    public bool get_IsReadOnly();
    public void MakeReadOnly();
    public bool get_VerifyAtn();
    public void set_VerifyAtn(bool value);
    public bool get_GenerateRuleBypassTransitions();
    public void set_GenerateRuleBypassTransitions(bool value);
    public bool get_Optimize();
    public void set_Optimize(bool value);
    protected internal virtual void ThrowIfReadOnly();
}
internal class Antlr4.Runtime.Atn.ATNDeserializer : object {
    public static int SerializedVersion;
    private static Guid BaseSerializedUuid;
    private static Guid AddedUnicodeSmp;
    private static IList`1<Guid> SupportedUuids;
    public static Guid SerializedUuid;
    [NotNullAttribute]
private ATNDeserializationOptions deserializationOptions;
    private Guid uuid;
    private Char[] data;
    private int p;
    private static ATNDeserializer();
    public ATNDeserializer(ATNDeserializationOptions deserializationOptions);
    protected internal virtual bool IsFeatureSupported(Guid feature, Guid actualUuid);
    public virtual ATN Deserialize(Char[] data);
    protected internal virtual void OptimizeATN(ATN atn);
    protected internal virtual void GenerateRuleBypassTransitions(ATN atn);
    protected internal virtual void ReadLexerActions(ATN atn);
    protected internal virtual void ReadDecisions(ATN atn);
    protected internal virtual void ReadEdges(ATN atn, IList`1<IntervalSet> sets);
    protected internal virtual void ReadSets(ATN atn, IList`1<IntervalSet> sets, Func`1<int> readUnicode);
    protected internal virtual void ReadModes(ATN atn);
    protected internal virtual void ReadRules(ATN atn);
    protected internal virtual void ReadStates(ATN atn);
    protected internal virtual ATN ReadATN();
    protected internal virtual void CheckUUID();
    protected internal virtual void CheckVersion();
    protected internal virtual void Reset(Char[] data);
    protected internal virtual void MarkPrecedenceDecisions(ATN atn);
    protected internal virtual void VerifyATN(ATN atn);
    protected internal virtual void CheckCondition(bool condition);
    protected internal virtual void CheckCondition(bool condition, string message);
    private static int InlineSetRules(ATN atn);
    private static int CombineChainedEpsilons(ATN atn);
    private static int OptimizeSets(ATN atn, bool preserveOrder);
    private static void IdentifyTailCalls(ATN atn);
    private static bool TestTailCall(ATN atn, RuleTransition transition, bool optimizedPath);
    protected internal int ReadInt();
    protected internal int ReadInt32();
    protected internal long ReadLong();
    protected internal Guid ReadUUID();
    protected internal virtual Transition EdgeFactory(ATN atn, TransitionType type, int src, int trg, int arg1, int arg2, int arg3, IList`1<IntervalSet> sets);
    protected internal virtual ATNState StateFactory(StateType type, int ruleIndex);
    protected internal virtual ILexerAction LexerActionFactory(LexerActionType type, int data1, int data2);
}
internal abstract class Antlr4.Runtime.Atn.ATNSimulator : object {
    public static DFAState ERROR;
    public ATN atn;
    protected PredictionContextCache sharedContextCache;
    public ATNSimulator(ATN atn, PredictionContextCache sharedContextCache);
    private static ATNSimulator();
    private static DFAState InitERROR();
    public abstract virtual void Reset();
    public virtual void ClearDFA();
    protected void ConsoleWriteLine(string format, Object[] arg);
    public PredictionContextCache getSharedContextCache();
    public PredictionContext getCachedContext(PredictionContext context);
}
internal abstract class Antlr4.Runtime.Atn.ATNState : object {
    public static int InitialNumTransitions;
    public static ReadOnlyCollection`1<string> serializationNames;
    public static int InvalidStateNumber;
    public ATN atn;
    public int stateNumber;
    public int ruleIndex;
    public bool epsilonOnlyTransitions;
    protected internal List`1<Transition> transitions;
    protected internal List`1<Transition> optimizedTransitions;
    public IntervalSet nextTokenWithinRule;
    public int NonStopStateNumber { get; }
    public bool IsNonGreedyExitState { get; }
    public Transition[] TransitionsArray { get; }
    public int NumberOfTransitions { get; }
    public StateType StateType { get; }
    public bool OnlyHasEpsilonTransitions { get; }
    public bool IsOptimized { get; }
    public int NumberOfOptimizedTransitions { get; }
    private static ATNState();
    public virtual int get_NonStopStateNumber();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public virtual bool get_IsNonGreedyExitState();
    public virtual string ToString();
    public virtual Transition[] get_TransitionsArray();
    public virtual int get_NumberOfTransitions();
    public virtual void AddTransition(Transition e);
    public virtual void AddTransition(int index, Transition e);
    public virtual Transition Transition(int i);
    public virtual void SetTransition(int i, Transition e);
    public virtual void RemoveTransition(int index);
    public abstract virtual StateType get_StateType();
    public bool get_OnlyHasEpsilonTransitions();
    public virtual void SetRuleIndex(int ruleIndex);
    public virtual bool get_IsOptimized();
    public virtual int get_NumberOfOptimizedTransitions();
    public virtual Transition GetOptimizedTransition(int i);
    public virtual void AddOptimizedTransition(Transition e);
    public virtual void SetOptimizedTransition(int i, Transition e);
    public virtual void RemoveOptimizedTransition(int i);
}
internal enum Antlr4.Runtime.Atn.ATNType : Enum {
    public int value__;
    public static ATNType Lexer;
    public static ATNType Parser;
}
internal class Antlr4.Runtime.Atn.AtomTransition : Transition {
    public int token;
    public TransitionType TransitionType { get; }
    public IntervalSet Label { get; }
    public AtomTransition(ATNState target, int token);
    public virtual TransitionType get_TransitionType();
    public virtual IntervalSet get_Label();
    public virtual bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.BasicBlockStartState : BlockStartState {
    public StateType StateType { get; }
    public virtual StateType get_StateType();
}
internal class Antlr4.Runtime.Atn.BasicState : ATNState {
    public StateType StateType { get; }
    public virtual StateType get_StateType();
}
internal class Antlr4.Runtime.Atn.BlockEndState : ATNState {
    public BlockStartState startState;
    public StateType StateType { get; }
    public virtual StateType get_StateType();
}
internal abstract class Antlr4.Runtime.Atn.BlockStartState : DecisionState {
    public BlockEndState endState;
}
internal class Antlr4.Runtime.Atn.ConfigEqualityComparator : object {
    public sealed virtual int GetHashCode(ATNConfig o);
    public sealed virtual bool Equals(ATNConfig a, ATNConfig b);
}
internal class Antlr4.Runtime.Atn.ConfigHashSet : Dictionary`2<ATNConfig, ATNConfig> {
    public ConfigHashSet(IEqualityComparer`1<ATNConfig> comparer);
    public ATNConfig GetOrAdd(ATNConfig config);
}
internal class Antlr4.Runtime.Atn.ConflictInfo : object {
    private BitSet conflictedAlts;
    private bool exact;
    public BitSet ConflictedAlts { get; }
    public bool IsExact { get; }
    public ConflictInfo(BitSet conflictedAlts, bool exact);
    public BitSet get_ConflictedAlts();
    public bool get_IsExact();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Antlr4.Runtime.Atn.ContextSensitivityInfo : DecisionEventInfo {
    public ContextSensitivityInfo(int decision, SimulatorState state, ITokenStream input, int startIndex, int stopIndex);
}
internal class Antlr4.Runtime.Atn.DecisionEventInfo : object {
    public int decision;
    [NullableAttribute]
public SimulatorState state;
    [NotNullAttribute]
public ITokenStream input;
    public int startIndex;
    public int stopIndex;
    public bool fullCtx;
    public DecisionEventInfo(int decision, SimulatorState state, ITokenStream input, int startIndex, int stopIndex, bool fullCtx);
}
internal class Antlr4.Runtime.Atn.DecisionInfo : object {
    public int decision;
    public long invocations;
    public long timeInPrediction;
    public long SLL_TotalLook;
    public long SLL_MinLook;
    public long SLL_MaxLook;
    public LookaheadEventInfo SLL_MaxLookEvent;
    public long LL_TotalLook;
    public long LL_MinLook;
    public long LL_MaxLook;
    public LookaheadEventInfo LL_MaxLookEvent;
    public List`1<ContextSensitivityInfo> contextSensitivities;
    public List`1<ErrorInfo> errors;
    public List`1<AmbiguityInfo> ambiguities;
    public List`1<PredicateEvalInfo> predicateEvals;
    public long SLL_ATNTransitions;
    public long SLL_DFATransitions;
    public long LL_Fallback;
    public long LL_ATNTransitions;
    public long LL_DFATransitions;
    public DecisionInfo(int decision);
    public virtual string ToString();
}
internal abstract class Antlr4.Runtime.Atn.DecisionState : ATNState {
    public int decision;
    public bool nonGreedy;
}
internal class Antlr4.Runtime.Atn.EmptyPredictionContext : SingletonPredictionContext {
    public int Size { get; }
    public bool IsEmpty { get; }
    public virtual PredictionContext GetParent(int index);
    public virtual int GetReturnState(int index);
    public virtual int get_Size();
    public virtual bool get_IsEmpty();
    public virtual bool Equals(object o);
    public virtual string ToString();
    public virtual String[] ToStrings(IRecognizer recognizer, int currentState);
    public virtual String[] ToStrings(IRecognizer recognizer, PredictionContext stop, int currentState);
}
internal class Antlr4.Runtime.Atn.EpsilonTransition : Transition {
    private int outermostPrecedenceReturn;
    public int OutermostPrecedenceReturn { get; }
    public TransitionType TransitionType { get; }
    public bool IsEpsilon { get; }
    public EpsilonTransition(ATNState target);
    public EpsilonTransition(ATNState target, int outermostPrecedenceReturn);
    public int get_OutermostPrecedenceReturn();
    public virtual TransitionType get_TransitionType();
    public virtual bool get_IsEpsilon();
    public virtual bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.ErrorInfo : DecisionEventInfo {
    public ErrorInfo(int decision, SimulatorState state, ITokenStream input, int startIndex, int stopIndex);
}
internal interface Antlr4.Runtime.Atn.ILexerAction {
    [NotNullAttribute]
public LexerActionType ActionType { get; }
    public bool IsPositionDependent { get; }
    public abstract virtual LexerActionType get_ActionType();
    public abstract virtual bool get_IsPositionDependent();
    public abstract virtual void Execute(Lexer lexer);
}
internal class Antlr4.Runtime.Atn.LexerActionExecutor : object {
    [NotNullAttribute]
private ILexerAction[] lexerActions;
    private int hashCode;
    [NotNullAttribute]
public ILexerAction[] LexerActions { get; }
    public LexerActionExecutor(ILexerAction[] lexerActions);
    public static LexerActionExecutor Append(LexerActionExecutor lexerActionExecutor, ILexerAction lexerAction);
    public virtual LexerActionExecutor FixOffsetBeforeMatch(int offset);
    public virtual ILexerAction[] get_LexerActions();
    public virtual void Execute(Lexer lexer, ICharStream input, int startIndex);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal enum Antlr4.Runtime.Atn.LexerActionType : Enum {
    public int value__;
    public static LexerActionType Channel;
    public static LexerActionType Custom;
    public static LexerActionType Mode;
    public static LexerActionType More;
    public static LexerActionType PopMode;
    public static LexerActionType PushMode;
    public static LexerActionType Skip;
    public static LexerActionType Type;
}
internal class Antlr4.Runtime.Atn.LexerATNConfig : ATNConfig {
    private LexerActionExecutor lexerActionExecutor;
    private bool passedThroughNonGreedyDecision;
    public LexerATNConfig(ATNState state, int alt, PredictionContext context);
    public LexerATNConfig(ATNState state, int alt, PredictionContext context, LexerActionExecutor lexerActionExecutor);
    public LexerATNConfig(LexerATNConfig c, ATNState state);
    public LexerATNConfig(LexerATNConfig c, ATNState state, LexerActionExecutor lexerActionExecutor);
    public LexerATNConfig(LexerATNConfig c, ATNState state, PredictionContext context);
    public LexerActionExecutor getLexerActionExecutor();
    public bool hasPassedThroughNonGreedyDecision();
    public virtual int GetHashCode();
    public virtual bool Equals(ATNConfig other);
    private static bool checkNonGreedyDecision(LexerATNConfig source, ATNState target);
}
internal class Antlr4.Runtime.Atn.LexerATNSimulator : ATNSimulator {
    public bool debug;
    public bool dfa_debug;
    public static int MIN_DFA_EDGE;
    public static int MAX_DFA_EDGE;
    protected Lexer recog;
    protected int startIndex;
    protected int thisLine;
    protected int charPositionInLine;
    public DFA[] decisionToDFA;
    protected int mode;
    private SimState prevAccept;
    public static int match_calls;
    public int Line { get; public set; }
    public int Column { get; public set; }
    public LexerATNSimulator(ATN atn, DFA[] decisionToDFA, PredictionContextCache sharedContextCache);
    public LexerATNSimulator(Lexer recog, ATN atn, DFA[] decisionToDFA, PredictionContextCache sharedContextCache);
    private static LexerATNSimulator();
    public void CopyState(LexerATNSimulator simulator);
    public int Match(ICharStream input, int mode);
    public virtual void Reset();
    public virtual void ClearDFA();
    protected int MatchATN(ICharStream input);
    protected int ExecATN(ICharStream input, DFAState ds0);
    protected DFAState GetExistingTargetState(DFAState s, int t);
    protected DFAState ComputeTargetState(ICharStream input, DFAState s, int t);
    protected int FailOrAccept(SimState prevAccept, ICharStream input, ATNConfigSet reach, int t);
    protected void GetReachableConfigSet(ICharStream input, ATNConfigSet closure, ATNConfigSet reach, int t);
    protected void Accept(ICharStream input, LexerActionExecutor lexerActionExecutor, int startIndex, int index, int line, int charPos);
    protected ATNState GetReachableTarget(Transition trans, int t);
    protected ATNConfigSet ComputeStartState(ICharStream input, ATNState p);
    protected bool Closure(ICharStream input, LexerATNConfig config, ATNConfigSet configs, bool currentAltReachedAcceptState, bool speculative, bool treatEofAsEpsilon);
    protected LexerATNConfig GetEpsilonTarget(ICharStream input, LexerATNConfig config, Transition t, ATNConfigSet configs, bool speculative, bool treatEofAsEpsilon);
    protected bool EvaluatePredicate(ICharStream input, int ruleIndex, int predIndex, bool speculative);
    protected void CaptureSimState(SimState settings, ICharStream input, DFAState dfaState);
    protected DFAState AddDFAEdge(DFAState from, int t, ATNConfigSet q);
    protected void AddDFAEdge(DFAState p, int t, DFAState q);
    protected DFAState AddDFAState(ATNConfigSet configSet);
    public DFA GetDFA(int mode);
    public string GetText(ICharStream input);
    public int get_Line();
    public void set_Line(int value);
    public int get_Column();
    public void set_Column(int value);
    public void Consume(ICharStream input);
    public string GetTokenName(int t);
}
internal class Antlr4.Runtime.Atn.LexerChannelAction : object {
    private int channel;
    public int Channel { get; }
    public LexerActionType ActionType { get; }
    public bool IsPositionDependent { get; }
    public LexerChannelAction(int channel);
    public int get_Channel();
    public sealed virtual LexerActionType get_ActionType();
    public sealed virtual bool get_IsPositionDependent();
    public sealed virtual void Execute(Lexer lexer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.LexerCustomAction : object {
    private int ruleIndex;
    private int actionIndex;
    public int RuleIndex { get; }
    public int ActionIndex { get; }
    public LexerActionType ActionType { get; }
    public bool IsPositionDependent { get; }
    public LexerCustomAction(int ruleIndex, int actionIndex);
    public int get_RuleIndex();
    public int get_ActionIndex();
    public sealed virtual LexerActionType get_ActionType();
    public sealed virtual bool get_IsPositionDependent();
    public sealed virtual void Execute(Lexer lexer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class Antlr4.Runtime.Atn.LexerIndexedCustomAction : object {
    private int offset;
    private ILexerAction action;
    public int Offset { get; }
    [NotNullAttribute]
public ILexerAction Action { get; }
    public LexerActionType ActionType { get; }
    public bool IsPositionDependent { get; }
    public LexerIndexedCustomAction(int offset, ILexerAction action);
    public int get_Offset();
    public ILexerAction get_Action();
    public sealed virtual LexerActionType get_ActionType();
    public sealed virtual bool get_IsPositionDependent();
    public sealed virtual void Execute(Lexer lexer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class Antlr4.Runtime.Atn.LexerModeAction : object {
    private int mode;
    public int Mode { get; }
    public LexerActionType ActionType { get; }
    public bool IsPositionDependent { get; }
    public LexerModeAction(int mode);
    public int get_Mode();
    public sealed virtual LexerActionType get_ActionType();
    public sealed virtual bool get_IsPositionDependent();
    public sealed virtual void Execute(Lexer lexer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.LexerMoreAction : object {
    public static LexerMoreAction Instance;
    public LexerActionType ActionType { get; }
    public bool IsPositionDependent { get; }
    private static LexerMoreAction();
    public sealed virtual LexerActionType get_ActionType();
    public sealed virtual bool get_IsPositionDependent();
    public sealed virtual void Execute(Lexer lexer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.LexerPopModeAction : object {
    public static LexerPopModeAction Instance;
    public LexerActionType ActionType { get; }
    public bool IsPositionDependent { get; }
    private static LexerPopModeAction();
    public sealed virtual LexerActionType get_ActionType();
    public sealed virtual bool get_IsPositionDependent();
    public sealed virtual void Execute(Lexer lexer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.LexerPushModeAction : object {
    private int mode;
    public int Mode { get; }
    public LexerActionType ActionType { get; }
    public bool IsPositionDependent { get; }
    public LexerPushModeAction(int mode);
    public int get_Mode();
    public sealed virtual LexerActionType get_ActionType();
    public sealed virtual bool get_IsPositionDependent();
    public sealed virtual void Execute(Lexer lexer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.LexerSkipAction : object {
    public static LexerSkipAction Instance;
    public LexerActionType ActionType { get; }
    public bool IsPositionDependent { get; }
    private static LexerSkipAction();
    public sealed virtual LexerActionType get_ActionType();
    public sealed virtual bool get_IsPositionDependent();
    public sealed virtual void Execute(Lexer lexer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.LexerTypeAction : object {
    private int type;
    public int Type { get; }
    public LexerActionType ActionType { get; }
    public bool IsPositionDependent { get; }
    public LexerTypeAction(int type);
    public virtual int get_Type();
    public virtual LexerActionType get_ActionType();
    public virtual bool get_IsPositionDependent();
    public virtual void Execute(Lexer lexer);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.LL1Analyzer : object {
    public static int HitPred;
    [NotNullAttribute]
public ATN atn;
    public LL1Analyzer(ATN atn);
    public virtual IntervalSet[] GetDecisionLookahead(ATNState s);
    public virtual IntervalSet Look(ATNState s, RuleContext ctx);
    public virtual IntervalSet Look(ATNState s, ATNState stopState, RuleContext ctx);
    protected internal virtual void Look(ATNState s, ATNState stopState, PredictionContext ctx, IntervalSet look, HashSet`1<ATNConfig> lookBusy, BitSet calledRuleStack, bool seeThruPreds, bool addEOF);
}
internal class Antlr4.Runtime.Atn.LookaheadEventInfo : DecisionEventInfo {
    public LookaheadEventInfo(int decision, SimulatorState state, ITokenStream input, int startIndex, int stopIndex, bool fullCtx);
}
internal class Antlr4.Runtime.Atn.LoopEndState : ATNState {
    public ATNState loopBackState;
    public StateType StateType { get; }
    public virtual StateType get_StateType();
}
internal class Antlr4.Runtime.Atn.MergeCache : object {
    private Dictionary`2<PredictionContext, Dictionary`2<PredictionContext, PredictionContext>> data;
    public PredictionContext Get(PredictionContext a, PredictionContext b);
    public void Put(PredictionContext a, PredictionContext b, PredictionContext value);
}
internal class Antlr4.Runtime.Atn.NotSetTransition : SetTransition {
    public TransitionType TransitionType { get; }
    public NotSetTransition(ATNState target, IntervalSet set);
    public virtual TransitionType get_TransitionType();
    public virtual bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.ObjectEqualityComparator : object {
    public sealed virtual int GetHashCode(ATNConfig o);
    public sealed virtual bool Equals(ATNConfig a, ATNConfig b);
}
internal class Antlr4.Runtime.Atn.OrderedATNConfigSet : ATNConfigSet {
}
internal class Antlr4.Runtime.Atn.ParseInfo : object {
    protected ProfilingATNSimulator atnSimulator;
    public ParseInfo(ProfilingATNSimulator atnSimulator);
    public DecisionInfo[] getDecisionInfo();
    public List`1<int> getLLDecisions();
    public long getTotalTimeInPrediction();
    public long getTotalSLLLookaheadOps();
    public long getTotalLLLookaheadOps();
    public long getTotalSLLATNLookaheadOps();
    public long getTotalLLATNLookaheadOps();
    public long getTotalATNLookaheadOps();
    public int getDFASize();
    public int getDFASize(int decision);
}
internal class Antlr4.Runtime.Atn.ParserATNSimulator : ATNSimulator {
    public static bool debug;
    public static bool debug_list_atn_decisions;
    public static bool dfa_debug;
    public static bool retry_debug;
    protected Parser parser;
    public DFA[] decisionToDFA;
    private PredictionMode mode;
    protected MergeCache mergeCache;
    protected ITokenStream input;
    protected int startIndex;
    protected ParserRuleContext context;
    protected DFA thisDfa;
    public PredictionMode PredictionMode { get; public set; }
    public ParserATNSimulator(ATN atn, DFA[] decisionToDFA, PredictionContextCache sharedContextCache);
    public ParserATNSimulator(Parser parser, ATN atn, DFA[] decisionToDFA, PredictionContextCache sharedContextCache);
    public virtual void Reset();
    public virtual void ClearDFA();
    public virtual int AdaptivePredict(ITokenStream input, int decision, ParserRuleContext outerContext);
    protected int ExecATN(DFA dfa, DFAState s0, ITokenStream input, int startIndex, ParserRuleContext outerContext);
    protected virtual DFAState GetExistingTargetState(DFAState previousD, int t);
    protected virtual DFAState ComputeTargetState(DFA dfa, DFAState previousD, int t);
    protected void PredicateDFAState(DFAState dfaState, DecisionState decisionState);
    protected int ExecATNWithFullContext(DFA dfa, DFAState D, ATNConfigSet s0, ITokenStream input, int startIndex, ParserRuleContext outerContext);
    protected virtual ATNConfigSet ComputeReachSet(ATNConfigSet closure, int t, bool fullCtx);
    protected ATNConfigSet RemoveAllConfigsNotInRuleStopState(ATNConfigSet configSet, bool lookToEndOfRule);
    protected ATNConfigSet ComputeStartState(ATNState p, RuleContext ctx, bool fullCtx);
    protected ATNConfigSet ApplyPrecedenceFilter(ATNConfigSet configSet);
    protected ATNState GetReachableTarget(Transition trans, int ttype);
    protected SemanticContext[] GetPredsForAmbigAlts(BitSet ambigAlts, ATNConfigSet configSet, int nalts);
    protected PredPrediction[] GetPredicatePredictions(BitSet ambigAlts, SemanticContext[] altToPred);
    protected int GetSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(ATNConfigSet configs, ParserRuleContext outerContext);
    protected int getAltThatFinishedDecisionEntryRule(ATNConfigSet configSet);
    protected Pair`2<ATNConfigSet, ATNConfigSet> SplitAccordingToSemanticValidity(ATNConfigSet configSet, ParserRuleContext outerContext);
    protected virtual BitSet EvalSemanticContext(PredPrediction[] predPredictions, ParserRuleContext outerContext, bool complete);
    protected virtual bool EvalSemanticContext(SemanticContext pred, ParserRuleContext parserCallStack, int alt, bool fullCtx);
    protected void Closure(ATNConfig config, ATNConfigSet configs, HashSet`1<ATNConfig> closureBusy, bool collectPredicates, bool fullCtx, bool treatEofAsEpsilon);
    protected void ClosureCheckingStopState(ATNConfig config, ATNConfigSet configSet, HashSet`1<ATNConfig> closureBusy, bool collectPredicates, bool fullCtx, int depth, bool treatEofAsEpsilon);
    protected void Closure_(ATNConfig config, ATNConfigSet configs, HashSet`1<ATNConfig> closureBusy, bool collectPredicates, bool fullCtx, int depth, bool treatEofAsEpsilon);
    protected bool CanDropLoopEntryEdgeInLeftRecursiveRule(ATNConfig config);
    public string GetRuleName(int index);
    protected ATNConfig GetEpsilonTarget(ATNConfig config, Transition t, bool collectPredicates, bool inContext, bool fullCtx, bool treatEofAsEpsilon);
    protected ATNConfig ActionTransition(ATNConfig config, ActionTransition t);
    public ATNConfig PrecedenceTransition(ATNConfig config, PrecedencePredicateTransition pt, bool collectPredicates, bool inContext, bool fullCtx);
    protected ATNConfig PredTransition(ATNConfig config, PredicateTransition pt, bool collectPredicates, bool inContext, bool fullCtx);
    protected ATNConfig RuleTransition(ATNConfig config, RuleTransition t);
    protected BitSet GetConflictingAlts(ATNConfigSet configSet);
    protected BitSet GetConflictingAltsOrUniqueAlt(ATNConfigSet configSet);
    public string GetTokenName(int t);
    public string GetLookaheadName(ITokenStream input);
    public void DumpDeadEndConfigs(NoViableAltException nvae);
    protected NoViableAltException NoViableAlt(ITokenStream input, ParserRuleContext outerContext, ATNConfigSet configs, int startIndex);
    protected static int GetUniqueAlt(ATNConfigSet configSet);
    protected DFAState AddDFAEdge(DFA dfa, DFAState from, int t, DFAState to);
    protected DFAState AddDFAState(DFA dfa, DFAState D);
    protected virtual void ReportAttemptingFullContext(DFA dfa, BitSet conflictingAlts, ATNConfigSet configs, int startIndex, int stopIndex);
    protected virtual void ReportContextSensitivity(DFA dfa, int prediction, ATNConfigSet configs, int startIndex, int stopIndex);
    protected virtual void ReportAmbiguity(DFA dfa, DFAState D, int startIndex, int stopIndex, bool exact, BitSet ambigAlts, ATNConfigSet configs);
    public PredictionMode get_PredictionMode();
    public void set_PredictionMode(PredictionMode value);
    public Parser getParser();
}
internal class Antlr4.Runtime.Atn.PlusBlockStartState : BlockStartState {
    public PlusLoopbackState loopBackState;
    public StateType StateType { get; }
    public virtual StateType get_StateType();
}
internal class Antlr4.Runtime.Atn.PlusLoopbackState : DecisionState {
    public StateType StateType { get; }
    public virtual StateType get_StateType();
}
internal class Antlr4.Runtime.Atn.PrecedencePredicateTransition : AbstractPredicateTransition {
    public int precedence;
    public TransitionType TransitionType { get; }
    public bool IsEpsilon { get; }
    public PrecedencePredicate Predicate { get; }
    public PrecedencePredicateTransition(ATNState target, int precedence);
    public virtual TransitionType get_TransitionType();
    public virtual bool get_IsEpsilon();
    public virtual bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol);
    public PrecedencePredicate get_Predicate();
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.PredicateEvalInfo : DecisionEventInfo {
    public SemanticContext semctx;
    public int predictedAlt;
    public bool evalResult;
    public PredicateEvalInfo(SimulatorState state, int decision, ITokenStream input, int startIndex, int stopIndex, SemanticContext semctx, bool evalResult, int predictedAlt);
}
internal class Antlr4.Runtime.Atn.PredicateTransition : AbstractPredicateTransition {
    public int ruleIndex;
    public int predIndex;
    public bool isCtxDependent;
    public TransitionType TransitionType { get; }
    public bool IsEpsilon { get; }
    public Predicate Predicate { get; }
    public PredicateTransition(ATNState target, int ruleIndex, int predIndex, bool isCtxDependent);
    public virtual TransitionType get_TransitionType();
    public virtual bool get_IsEpsilon();
    public virtual bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol);
    public Predicate get_Predicate();
    public virtual string ToString();
}
internal abstract class Antlr4.Runtime.Atn.PredictionContext : object {
    public static int EMPTY_RETURN_STATE;
    public static EmptyPredictionContext EMPTY;
    private static int INITIAL_HASH;
    private int cachedHashCode;
    public int Size { get; }
    public bool IsEmpty { get; }
    public bool HasEmptyPath { get; }
    protected internal PredictionContext(int cachedHashCode);
    private static PredictionContext();
    protected internal static int CalculateEmptyHashCode();
    protected internal static int CalculateHashCode(PredictionContext parent, int returnState);
    protected internal static int CalculateHashCode(PredictionContext[] parents, Int32[] returnStates);
    public static PredictionContext FromRuleContext(ATN atn, RuleContext outerContext);
    public abstract virtual int get_Size();
    public abstract virtual PredictionContext GetParent(int index);
    public abstract virtual int GetReturnState(int index);
    public virtual bool get_IsEmpty();
    public virtual bool get_HasEmptyPath();
    public sealed virtual int GetHashCode();
    internal static PredictionContext Merge(PredictionContext a, PredictionContext b, bool rootIsWildcard, MergeCache mergeCache);
    public static PredictionContext MergeSingletons(SingletonPredictionContext a, SingletonPredictionContext b, bool rootIsWildcard, MergeCache mergeCache);
    public static PredictionContext MergeArrays(ArrayPredictionContext a, ArrayPredictionContext b, bool rootIsWildcard, MergeCache mergeCache);
    protected static void CombineCommonParents(PredictionContext[] parents);
    public static PredictionContext MergeRoot(SingletonPredictionContext a, SingletonPredictionContext b, bool rootIsWildcard);
    public static PredictionContext GetCachedContext(PredictionContext context, PredictionContextCache contextCache, IdentityHashMap visited);
    public virtual PredictionContext GetChild(int returnState);
    public virtual String[] ToStrings(IRecognizer recognizer, int currentState);
    public virtual String[] ToStrings(IRecognizer recognizer, PredictionContext stop, int currentState);
}
internal class Antlr4.Runtime.Atn.PredictionContextCache : object {
    protected Dictionary`2<PredictionContext, PredictionContext> cache;
    public int Count { get; }
    public PredictionContext Add(PredictionContext ctx);
    public PredictionContext Get(PredictionContext ctx);
    public int get_Count();
}
internal class Antlr4.Runtime.Atn.PredictionMode : object {
    public static PredictionMode SLL;
    public static PredictionMode LL;
    public static PredictionMode LL_EXACT_AMBIG_DETECTION;
    private static PredictionMode();
    public static bool HasSLLConflictTerminatingPrediction(PredictionMode mode, ATNConfigSet configSet);
    public static bool HasConfigInRuleStopState(IEnumerable`1<ATNConfig> configs);
    public static bool AllConfigsInRuleStopStates(IEnumerable`1<ATNConfig> configs);
    public static int ResolvesToJustOneViableAlt(IEnumerable`1<BitSet> altsets);
    public static bool AllSubsetsConflict(IEnumerable`1<BitSet> altsets);
    public static bool HasNonConflictingAltSet(IEnumerable`1<BitSet> altsets);
    public static bool HasConflictingAltSet(IEnumerable`1<BitSet> altsets);
    public static bool AllSubsetsEqual(IEnumerable`1<BitSet> altsets);
    public static int GetUniqueAlt(IEnumerable`1<BitSet> altsets);
    public static BitSet GetAlts(IEnumerable`1<BitSet> altsets);
    public static ICollection`1<BitSet> GetConflictingAltSubsets(IEnumerable`1<ATNConfig> configs);
    public static IDictionary`2<ATNState, BitSet> GetStateToAltMap(IEnumerable`1<ATNConfig> configs);
    public static bool HasStateAssociatedWithOneAlt(IEnumerable`1<ATNConfig> configs);
    public static int GetSingleViableAlt(IEnumerable`1<BitSet> altsets);
}
internal class Antlr4.Runtime.Atn.ProfilingATNSimulator : ParserATNSimulator {
    protected DecisionInfo[] decisions;
    protected int numDecisions;
    protected int sllStopIndex;
    protected int llStopIndex;
    protected int currentDecision;
    protected DFAState currentState;
    protected int conflictingAltResolvedBySLL;
    public ProfilingATNSimulator(Parser parser);
    public virtual int AdaptivePredict(ITokenStream input, int decision, ParserRuleContext outerContext);
    protected virtual DFAState GetExistingTargetState(DFAState previousD, int t);
    protected virtual DFAState ComputeTargetState(DFA dfa, DFAState previousD, int t);
    protected virtual ATNConfigSet ComputeReachSet(ATNConfigSet closure, int t, bool fullCtx);
    protected virtual bool EvalSemanticContext(SemanticContext pred, ParserRuleContext parserCallStack, int alt, bool fullCtx);
    protected virtual void ReportAttemptingFullContext(DFA dfa, BitSet conflictingAlts, ATNConfigSet configs, int startIndex, int stopIndex);
    protected virtual void ReportContextSensitivity(DFA dfa, int prediction, ATNConfigSet configs, int startIndex, int stopIndex);
    protected virtual void ReportAmbiguity(DFA dfa, DFAState D, int startIndex, int stopIndex, bool exact, BitSet ambigAlts, ATNConfigSet configSet);
    public DecisionInfo[] getDecisionInfo();
    public DFAState getCurrentState();
}
internal class Antlr4.Runtime.Atn.RangeTransition : Transition {
    public int from;
    public int to;
    public TransitionType TransitionType { get; }
    public IntervalSet Label { get; }
    public RangeTransition(ATNState target, int from, int to);
    public virtual TransitionType get_TransitionType();
    public virtual IntervalSet get_Label();
    public virtual bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.RuleStartState : ATNState {
    public RuleStopState stopState;
    public bool isPrecedenceRule;
    public StateType StateType { get; }
    public virtual StateType get_StateType();
}
internal class Antlr4.Runtime.Atn.RuleStopState : ATNState {
    public int NonStopStateNumber { get; }
    public StateType StateType { get; }
    public virtual int get_NonStopStateNumber();
    public virtual StateType get_StateType();
}
internal class Antlr4.Runtime.Atn.RuleTransition : Transition {
    public int ruleIndex;
    public int precedence;
    [NotNullAttribute]
public ATNState followState;
    public bool tailCall;
    public bool optimizedTailCall;
    public TransitionType TransitionType { get; }
    public bool IsEpsilon { get; }
    [ObsoleteAttribute("UseRuleTransition(RuleStartState, int, int, ATNState) instead.")]
public RuleTransition(RuleStartState ruleStart, int ruleIndex, ATNState followState);
    public RuleTransition(RuleStartState ruleStart, int ruleIndex, int precedence, ATNState followState);
    public virtual TransitionType get_TransitionType();
    public virtual bool get_IsEpsilon();
    public virtual bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol);
}
internal abstract class Antlr4.Runtime.Atn.SemanticContext : object {
    public static SemanticContext NONE;
    private static SemanticContext();
    public abstract virtual bool Eval(Recognizer`2<Symbol, ATNInterpreter> parser, RuleContext parserCallStack);
    public virtual SemanticContext EvalPrecedence(Recognizer`2<Symbol, ATNInterpreter> parser, RuleContext parserCallStack);
    public static SemanticContext AndOp(SemanticContext a, SemanticContext b);
    public static SemanticContext OrOp(SemanticContext a, SemanticContext b);
    private static IList`1<PrecedencePredicate> FilterPrecedencePredicates(HashSet`1<SemanticContext> collection);
}
internal class Antlr4.Runtime.Atn.SetTransition : Transition {
    [NotNullAttribute]
public IntervalSet set;
    public TransitionType TransitionType { get; }
    public IntervalSet Label { get; }
    public SetTransition(ATNState target, IntervalSet set);
    public virtual TransitionType get_TransitionType();
    public virtual IntervalSet get_Label();
    public virtual bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.SimState : object {
    public int index;
    public int line;
    public int charPos;
    public DFAState dfaState;
    public void Reset();
}
internal class Antlr4.Runtime.Atn.SimulatorState : object {
    public ParserRuleContext outerContext;
    public DFAState s0;
    public bool useContext;
    public ParserRuleContext remainingOuterContext;
    public SimulatorState(ParserRuleContext outerContext, DFAState s0, bool useContext, ParserRuleContext remainingOuterContext);
}
internal class Antlr4.Runtime.Atn.SingletonPredictionContext : PredictionContext {
    [NotNullAttribute]
public PredictionContext parent;
    public int returnState;
    public int Size { get; }
    public bool IsEmpty { get; }
    internal SingletonPredictionContext(PredictionContext parent, int returnState);
    public static PredictionContext Create(PredictionContext parent, int returnState);
    public virtual PredictionContext GetParent(int index);
    public virtual int GetReturnState(int index);
    public virtual int get_Size();
    public virtual bool get_IsEmpty();
    public virtual bool Equals(object o);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Atn.StarBlockStartState : BlockStartState {
    public StateType StateType { get; }
    public virtual StateType get_StateType();
}
internal class Antlr4.Runtime.Atn.StarLoopbackState : ATNState {
    public StarLoopEntryState LoopEntryState { get; }
    public StateType StateType { get; }
    public StarLoopEntryState get_LoopEntryState();
    public virtual StateType get_StateType();
}
internal class Antlr4.Runtime.Atn.StarLoopEntryState : DecisionState {
    public StarLoopbackState loopBackState;
    public bool isPrecedenceDecision;
    public StateType StateType { get; }
    public virtual StateType get_StateType();
}
internal enum Antlr4.Runtime.Atn.StateType : Enum {
    public int value__;
    public static StateType InvalidType;
    public static StateType Basic;
    public static StateType RuleStart;
    public static StateType BlockStart;
    public static StateType PlusBlockStart;
    public static StateType StarBlockStart;
    public static StateType TokenStart;
    public static StateType RuleStop;
    public static StateType BlockEnd;
    public static StateType StarLoopBack;
    public static StateType StarLoopEntry;
    public static StateType PlusLoopBack;
    public static StateType LoopEnd;
}
internal class Antlr4.Runtime.Atn.TokensStartState : DecisionState {
    public StateType StateType { get; }
    public virtual StateType get_StateType();
}
internal abstract class Antlr4.Runtime.Atn.Transition : object {
    public static ReadOnlyCollection`1<string> serializationNames;
    [NotNullAttribute]
public ATNState target;
    public TransitionType TransitionType { get; }
    public bool IsEpsilon { get; }
    public IntervalSet Label { get; }
    protected internal Transition(ATNState target);
    private static Transition();
    public abstract virtual TransitionType get_TransitionType();
    public virtual bool get_IsEpsilon();
    public virtual IntervalSet get_Label();
    public abstract virtual bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol);
}
internal enum Antlr4.Runtime.Atn.TransitionType : Enum {
    public int value__;
    public static TransitionType INVALID;
    public static TransitionType EPSILON;
    public static TransitionType RANGE;
    public static TransitionType RULE;
    public static TransitionType PREDICATE;
    public static TransitionType ATOM;
    public static TransitionType ACTION;
    public static TransitionType SET;
    public static TransitionType NOT_SET;
    public static TransitionType WILDCARD;
    public static TransitionType PRECEDENCE;
}
internal class Antlr4.Runtime.Atn.WildcardTransition : Transition {
    public TransitionType TransitionType { get; }
    public WildcardTransition(ATNState target);
    public virtual TransitionType get_TransitionType();
    public virtual bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol);
    public virtual string ToString();
}
internal class Antlr4.Runtime.BailErrorStrategy : DefaultErrorStrategy {
    public virtual void Recover(Parser recognizer, RecognitionException e);
    public virtual IToken RecoverInline(Parser recognizer);
    public virtual void Sync(Parser recognizer);
}
internal class Antlr4.Runtime.BaseErrorListener : object {
    public virtual void SyntaxError(TextWriter output, IRecognizer recognizer, IToken offendingSymbol, int line, int charPositionInLine, string msg, RecognitionException e);
    public virtual void ReportAmbiguity(Parser recognizer, DFA dfa, int startIndex, int stopIndex, bool exact, BitSet ambigAlts, ATNConfigSet configs);
    public virtual void ReportAttemptingFullContext(Parser recognizer, DFA dfa, int startIndex, int stopIndex, BitSet conflictingAlts, SimulatorState conflictState);
    public virtual void ReportContextSensitivity(Parser recognizer, DFA dfa, int startIndex, int stopIndex, int prediction, SimulatorState acceptState);
}
internal abstract class Antlr4.Runtime.BaseInputCharStream : object {
    public static int ReadBufferSize;
    public static int InitialBufferSize;
    protected internal int n;
    protected internal int p;
    public string name;
    public int Index { get; }
    public int Size { get; }
    public string SourceName { get; }
    public virtual void Reset();
    public virtual void Consume();
    public virtual int LA(int i);
    public virtual int Lt(int i);
    public virtual int get_Index();
    public virtual int get_Size();
    public virtual int Mark();
    public virtual void Release(int marker);
    public virtual void Seek(int index);
    public virtual string GetText(Interval interval);
    protected abstract virtual int ValueAt(int i);
    protected abstract virtual string ConvertDataToString(int start, int count);
    public sealed virtual string ToString();
    public virtual string get_SourceName();
}
internal class Antlr4.Runtime.BufferedTokenStream : object {
    [NotNullAttribute]
private ITokenSource _tokenSource;
    protected internal IList`1<IToken> tokens;
    protected internal int p;
    protected internal bool fetchedEOF;
    public ITokenSource TokenSource { get; }
    public int Index { get; }
    public int Size { get; }
    public string SourceName { get; }
    public BufferedTokenStream(ITokenSource tokenSource);
    public virtual ITokenSource get_TokenSource();
    public virtual int get_Index();
    public virtual int Mark();
    public virtual void Release(int marker);
    public virtual void Reset();
    public virtual void Seek(int index);
    public virtual int get_Size();
    public virtual void Consume();
    protected internal virtual bool Sync(int i);
    protected internal virtual int Fetch(int n);
    public virtual IToken Get(int i);
    public virtual IList`1<IToken> Get(int start, int stop);
    public virtual int LA(int i);
    protected internal virtual IToken Lb(int k);
    public virtual IToken LT(int k);
    protected internal virtual int AdjustSeekIndex(int i);
    protected internal void LazyInit();
    protected internal virtual void Setup();
    public virtual void SetTokenSource(ITokenSource tokenSource);
    public virtual IList`1<IToken> GetTokens();
    public virtual IList`1<IToken> GetTokens(int start, int stop);
    public virtual IList`1<IToken> GetTokens(int start, int stop, BitSet types);
    public virtual IList`1<IToken> GetTokens(int start, int stop, int ttype);
    protected internal virtual int NextTokenOnChannel(int i, int channel);
    protected internal virtual int PreviousTokenOnChannel(int i, int channel);
    public virtual IList`1<IToken> GetHiddenTokensToRight(int tokenIndex, int channel);
    public virtual IList`1<IToken> GetHiddenTokensToRight(int tokenIndex);
    public virtual IList`1<IToken> GetHiddenTokensToLeft(int tokenIndex, int channel);
    public virtual IList`1<IToken> GetHiddenTokensToLeft(int tokenIndex);
    protected internal virtual IList`1<IToken> FilterForChannel(int from, int to, int channel);
    public virtual string get_SourceName();
    public virtual string GetText();
    public virtual string GetText(Interval interval);
    public virtual string GetText(RuleContext ctx);
    public virtual string GetText(IToken start, IToken stop);
    public virtual void Fill();
}
internal static class Antlr4.Runtime.CharStreams : object {
    public static ICharStream fromPath(string path);
    public static ICharStream fromPath(string path, Encoding encoding);
    public static ICharStream fromTextReader(TextReader textReader);
    public static ICharStream fromStream(Stream stream);
    public static ICharStream fromStream(Stream stream, Encoding encoding);
    public static ICharStream fromstring(string s);
}
internal class Antlr4.Runtime.CodePointCharStream : BaseInputCharStream {
    private Int32[] data;
    public CodePointCharStream(string input);
    protected virtual int ValueAt(int i);
    protected virtual string ConvertDataToString(int start, int count);
}
internal class Antlr4.Runtime.CommonToken : object {
    private static long serialVersionUID;
    protected internal static Tuple`2<ITokenSource, ICharStream> EmptySource;
    private int _type;
    private int _line;
    protected internal int charPositionInLine;
    private int _channel;
    [NotNullAttribute]
protected internal Tuple`2<ITokenSource, ICharStream> source;
    private string _text;
    protected internal int index;
    protected internal int start;
    protected internal int stop;
    public int Type { get; public set; }
    public int Line { get; public set; }
    public string Text { get; public set; }
    public int Column { get; public set; }
    public int Channel { get; public set; }
    public int StartIndex { get; public set; }
    public int StopIndex { get; public set; }
    public int TokenIndex { get; public set; }
    public ITokenSource TokenSource { get; }
    public ICharStream InputStream { get; }
    public CommonToken(int type);
    public CommonToken(Tuple`2<ITokenSource, ICharStream> source, int type, int channel, int start, int stop);
    public CommonToken(int type, string text);
    public CommonToken(IToken oldToken);
    private static CommonToken();
    public virtual int get_Type();
    public virtual void set_Type(int value);
    public virtual int get_Line();
    public virtual void set_Line(int value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual int get_Column();
    public virtual void set_Column(int value);
    public virtual int get_Channel();
    public virtual void set_Channel(int value);
    public virtual int get_StartIndex();
    public virtual void set_StartIndex(int value);
    public virtual int get_StopIndex();
    public virtual void set_StopIndex(int value);
    public virtual int get_TokenIndex();
    public virtual void set_TokenIndex(int value);
    public virtual ITokenSource get_TokenSource();
    public virtual ICharStream get_InputStream();
    public virtual string ToString();
}
internal class Antlr4.Runtime.CommonTokenFactory : object {
    public static ITokenFactory Default;
    protected internal bool copyText;
    public CommonTokenFactory(bool copyText);
    private static CommonTokenFactory();
    public virtual CommonToken Create(Tuple`2<ITokenSource, ICharStream> source, int type, string text, int channel, int start, int stop, int line, int charPositionInLine);
    private sealed virtual override IToken Antlr4.Runtime.ITokenFactory.Create(Tuple`2<ITokenSource, ICharStream> source, int type, string text, int channel, int start, int stop, int line, int charPositionInLine);
    public virtual CommonToken Create(int type, string text);
    private sealed virtual override IToken Antlr4.Runtime.ITokenFactory.Create(int type, string text);
}
internal class Antlr4.Runtime.CommonTokenStream : BufferedTokenStream {
    protected internal int channel;
    public CommonTokenStream(ITokenSource tokenSource);
    public CommonTokenStream(ITokenSource tokenSource, int channel);
    protected internal virtual int AdjustSeekIndex(int i);
    protected internal virtual IToken Lb(int k);
    public virtual IToken LT(int k);
    public virtual int GetNumberOfOnChannelTokens();
}
internal class Antlr4.Runtime.ConsoleErrorListener`1 : object {
    public static ConsoleErrorListener`1<Symbol> Instance;
    private static ConsoleErrorListener`1();
    public virtual void SyntaxError(TextWriter output, IRecognizer recognizer, Symbol offendingSymbol, int line, int charPositionInLine, string msg, RecognitionException e);
}
internal class Antlr4.Runtime.DefaultErrorStrategy : object {
    protected internal bool errorRecoveryMode;
    protected internal int lastErrorIndex;
    protected internal IntervalSet lastErrorStates;
    public virtual void Reset(Parser recognizer);
    protected internal virtual void BeginErrorCondition(Parser recognizer);
    public virtual bool InErrorRecoveryMode(Parser recognizer);
    protected internal virtual void EndErrorCondition(Parser recognizer);
    public virtual void ReportMatch(Parser recognizer);
    public virtual void ReportError(Parser recognizer, RecognitionException e);
    protected internal virtual void NotifyErrorListeners(Parser recognizer, string message, RecognitionException e);
    public virtual void Recover(Parser recognizer, RecognitionException e);
    public virtual void Sync(Parser recognizer);
    protected internal virtual void ReportNoViableAlternative(Parser recognizer, NoViableAltException e);
    protected internal virtual void ReportInputMismatch(Parser recognizer, InputMismatchException e);
    protected internal virtual void ReportFailedPredicate(Parser recognizer, FailedPredicateException e);
    protected internal virtual void ReportUnwantedToken(Parser recognizer);
    protected internal virtual void ReportMissingToken(Parser recognizer);
    public virtual IToken RecoverInline(Parser recognizer);
    protected internal virtual bool SingleTokenInsertion(Parser recognizer);
    protected internal virtual IToken SingleTokenDeletion(Parser recognizer);
    protected internal virtual IToken GetMissingSymbol(Parser recognizer);
    protected internal virtual IToken ConstructToken(ITokenSource tokenSource, int expectedTokenType, string tokenText, IToken current);
    protected internal virtual IntervalSet GetExpectedTokens(Parser recognizer);
    protected internal virtual string GetTokenErrorDisplay(IToken t);
    protected internal virtual string GetSymbolText(IToken symbol);
    protected internal virtual int GetSymbolType(IToken symbol);
    protected internal virtual string EscapeWSAndQuote(string s);
    protected internal virtual IntervalSet GetErrorRecoverySet(Parser recognizer);
    protected internal virtual void ConsumeUntil(Parser recognizer, IntervalSet set);
}
[FlagsAttribute]
internal enum Antlr4.Runtime.Dependents : Enum {
    public int value__;
    public static Dependents None;
    public static Dependents Self;
    public static Dependents Parents;
    public static Dependents Children;
    public static Dependents Ancestors;
    public static Dependents Descendants;
    public static Dependents Siblings;
    public static Dependents PreceedingSiblings;
    public static Dependents FollowingSiblings;
    public static Dependents Preceeding;
    public static Dependents Following;
}
[DefaultMemberAttribute("Item")]
internal abstract class Antlr4.Runtime.Dfa.AbstractEdgeMap`1 : object {
    protected internal int minIndex;
    protected internal int maxIndex;
    public T Item { get; }
    public bool IsEmpty { get; }
    public int Count { get; }
    protected AbstractEdgeMap`1(int minIndex, int maxIndex);
    public abstract virtual AbstractEdgeMap`1<T> Put(int key, T value);
    private sealed virtual override IEdgeMap`1<T> Antlr4.Runtime.Dfa.IEdgeMap<T>.Put(int key, T value);
    public virtual AbstractEdgeMap`1<T> PutAll(IEdgeMap`1<T> m);
    private sealed virtual override IEdgeMap`1<T> Antlr4.Runtime.Dfa.IEdgeMap<T>.PutAll(IEdgeMap`1<T> m);
    public abstract virtual AbstractEdgeMap`1<T> Clear();
    private sealed virtual override IEdgeMap`1<T> Antlr4.Runtime.Dfa.IEdgeMap<T>.Clear();
    public abstract virtual AbstractEdgeMap`1<T> Remove(int key);
    private sealed virtual override IEdgeMap`1<T> Antlr4.Runtime.Dfa.IEdgeMap<T>.Remove(int key);
    public abstract virtual bool ContainsKey(int arg1);
    public abstract virtual T get_Item(int arg1);
    public abstract virtual bool get_IsEmpty();
    public abstract virtual int get_Count();
    public abstract virtual IDictionary`2<int, T> ToMap();
    public virtual IEnumerator`1<KeyValuePair`2<int, T>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Antlr4.Runtime.Dfa.AcceptStateInfo : object {
    private int prediction;
    private LexerActionExecutor lexerActionExecutor;
    public int Prediction { get; }
    public LexerActionExecutor LexerActionExecutor { get; }
    public AcceptStateInfo(int prediction);
    public AcceptStateInfo(int prediction, LexerActionExecutor lexerActionExecutor);
    public virtual int get_Prediction();
    public virtual LexerActionExecutor get_LexerActionExecutor();
}
[DefaultMemberAttribute("Item")]
internal class Antlr4.Runtime.Dfa.ArrayEdgeMap`1 : AbstractEdgeMap`1<T> {
    private T[] arrayData;
    private int size;
    public int Count { get; }
    public bool IsEmpty { get; }
    public T Item { get; }
    public ArrayEdgeMap`1(int minIndex, int maxIndex);
    public virtual int get_Count();
    public virtual bool get_IsEmpty();
    public virtual bool ContainsKey(int key);
    public virtual T get_Item(int key);
    public virtual AbstractEdgeMap`1<T> Put(int key, T value);
    public virtual AbstractEdgeMap`1<T> Remove(int key);
    public virtual AbstractEdgeMap`1<T> PutAll(IEdgeMap`1<T> m);
    public virtual AbstractEdgeMap`1<T> Clear();
    public virtual IDictionary`2<int, T> ToMap();
}
internal class Antlr4.Runtime.Dfa.DFA : object {
    public Dictionary`2<DFAState, DFAState> states;
    public DFAState s0;
    public int decision;
    public DecisionState atnStartState;
    private bool precedenceDfa;
    public bool IsPrecedenceDfa { get; }
    public DFA(DecisionState atnStartState);
    public DFA(DecisionState atnStartState, int decision);
    public bool get_IsPrecedenceDfa();
    public DFAState GetPrecedenceStartState(int precedence);
    public void SetPrecedenceStartState(int precedence, DFAState startState);
    public List`1<DFAState> GetStates();
    public virtual string ToString();
    public string ToString(IVocabulary vocabulary);
    public string ToLexerString();
}
internal class Antlr4.Runtime.Dfa.DFASerializer : object {
    [NotNullAttribute]
private DFA dfa;
    [NotNullAttribute]
private IVocabulary vocabulary;
    [NullableAttribute]
internal String[] ruleNames;
    [NullableAttribute]
internal ATN atn;
    public DFASerializer(DFA dfa, IVocabulary vocabulary);
    public DFASerializer(DFA dfa, IRecognizer parser);
    public DFASerializer(DFA dfa, IVocabulary vocabulary, String[] ruleNames, ATN atn);
    public virtual string ToString();
    protected internal virtual string GetContextLabel(int i);
    protected internal virtual string GetEdgeLabel(int i);
    internal virtual string GetStateString(DFAState s);
}
internal class Antlr4.Runtime.Dfa.DFAState : object {
    public int stateNumber;
    public ATNConfigSet configSet;
    public DFAState[] edges;
    public bool isAcceptState;
    public int prediction;
    public LexerActionExecutor lexerActionExecutor;
    public bool requiresFullContext;
    public PredPrediction[] predicates;
    public DFAState(int stateNumber);
    public DFAState(ATNConfigSet configs);
    public HashSet`1<int> getAltSet();
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class Antlr4.Runtime.Dfa.EmptyEdgeMap`1 : AbstractEdgeMap`1<T> {
    public int Count { get; }
    public bool IsEmpty { get; }
    public T Item { get; }
    public EmptyEdgeMap`1(int minIndex, int maxIndex);
    public virtual AbstractEdgeMap`1<T> Put(int key, T value);
    public virtual AbstractEdgeMap`1<T> Clear();
    public virtual AbstractEdgeMap`1<T> Remove(int key);
    public virtual int get_Count();
    public virtual bool get_IsEmpty();
    public virtual bool ContainsKey(int key);
    public virtual T get_Item(int key);
    public virtual IDictionary`2<int, T> ToMap();
}
[DefaultMemberAttribute("Item")]
internal interface Antlr4.Runtime.Dfa.IEdgeMap`1 {
    public int Count { get; }
    public bool IsEmpty { get; }
    public T Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool ContainsKey(int key);
    public abstract virtual T get_Item(int key);
    public abstract virtual IEdgeMap`1<T> Put(int key, T value);
    public abstract virtual IEdgeMap`1<T> Remove(int key);
    public abstract virtual IEdgeMap`1<T> PutAll(IEdgeMap`1<T> m);
    public abstract virtual IEdgeMap`1<T> Clear();
    public abstract virtual IDictionary`2<int, T> ToMap();
}
internal class Antlr4.Runtime.Dfa.LexerDFASerializer : DFASerializer {
    public LexerDFASerializer(DFA dfa);
    protected internal virtual string GetEdgeLabel(int i);
}
internal class Antlr4.Runtime.Dfa.PredPrediction : object {
    public SemanticContext pred;
    public int alt;
    public PredPrediction(SemanticContext pred, int alt);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class Antlr4.Runtime.Dfa.SingletonEdgeMap`1 : AbstractEdgeMap`1<T> {
    private int key;
    private T value;
    public int Key { get; }
    public T Value { get; }
    public int Count { get; }
    public bool IsEmpty { get; }
    public T Item { get; }
    public SingletonEdgeMap`1(int minIndex, int maxIndex, int key, T value);
    public int get_Key();
    public T get_Value();
    public virtual int get_Count();
    public virtual bool get_IsEmpty();
    public virtual bool ContainsKey(int key);
    public virtual T get_Item(int key);
    public virtual AbstractEdgeMap`1<T> Put(int key, T value);
    public virtual AbstractEdgeMap`1<T> Remove(int key);
    public virtual AbstractEdgeMap`1<T> Clear();
    public virtual IDictionary`2<int, T> ToMap();
}
[DefaultMemberAttribute("Item")]
internal class Antlr4.Runtime.Dfa.SparseEdgeMap`1 : AbstractEdgeMap`1<T> {
    private static int DefaultMaxSize;
    private Int32[] keys;
    private List`1<T> values;
    public Int32[] Keys { get; }
    public IList`1<T> Values { get; }
    public int MaxSparseSize { get; }
    public int Count { get; }
    public bool IsEmpty { get; }
    public T Item { get; }
    public SparseEdgeMap`1(int minIndex, int maxIndex);
    public SparseEdgeMap`1(int minIndex, int maxIndex, int maxSparseSize);
    private SparseEdgeMap`1(SparseEdgeMap`1<T> map, int maxSparseSize);
    public Int32[] get_Keys();
    public IList`1<T> get_Values();
    public int get_MaxSparseSize();
    public virtual int get_Count();
    public virtual bool get_IsEmpty();
    public virtual bool ContainsKey(int key);
    public virtual T get_Item(int key);
    public virtual AbstractEdgeMap`1<T> Put(int key, T value);
    public virtual AbstractEdgeMap`1<T> Remove(int key);
    public virtual AbstractEdgeMap`1<T> Clear();
    public virtual IDictionary`2<int, T> ToMap();
}
internal class Antlr4.Runtime.DiagnosticErrorListener : BaseErrorListener {
    protected internal bool exactOnly;
    public DiagnosticErrorListener(bool exactOnly);
    public virtual void ReportAmbiguity(Parser recognizer, DFA dfa, int startIndex, int stopIndex, bool exact, BitSet ambigAlts, ATNConfigSet configs);
    public virtual void ReportAttemptingFullContext(Parser recognizer, DFA dfa, int startIndex, int stopIndex, BitSet conflictingAlts, SimulatorState conflictState);
    public virtual void ReportContextSensitivity(Parser recognizer, DFA dfa, int startIndex, int stopIndex, int prediction, SimulatorState acceptState);
    protected internal virtual string GetDecisionDescription(Parser recognizer, DFA dfa);
    protected internal virtual BitSet GetConflictingAlts(BitSet reportedAlts, ATNConfigSet configSet);
}
internal class Antlr4.Runtime.FailedPredicateException : RecognitionException {
    private static long serialVersionUID;
    private int ruleIndex;
    private int predicateIndex;
    private string predicate;
    public int RuleIndex { get; }
    public int PredIndex { get; }
    [NullableAttribute]
public string Predicate { get; }
    public FailedPredicateException(Parser recognizer);
    public FailedPredicateException(Parser recognizer, string predicate);
    public FailedPredicateException(Parser recognizer, string predicate, string message);
    public virtual int get_RuleIndex();
    public virtual int get_PredIndex();
    public virtual string get_Predicate();
    private static string FormatMessage(string predicate, string message);
}
internal interface Antlr4.Runtime.IAntlrErrorListener`1 {
    public abstract virtual void SyntaxError(TextWriter output, IRecognizer recognizer, TSymbol offendingSymbol, int line, int charPositionInLine, string msg, RecognitionException e);
}
internal interface Antlr4.Runtime.IAntlrErrorStrategy {
    public abstract virtual void Reset(Parser recognizer);
    public abstract virtual IToken RecoverInline(Parser recognizer);
    public abstract virtual void Recover(Parser recognizer, RecognitionException e);
    public abstract virtual void Sync(Parser recognizer);
    public abstract virtual bool InErrorRecoveryMode(Parser recognizer);
    public abstract virtual void ReportMatch(Parser recognizer);
    public abstract virtual void ReportError(Parser recognizer, RecognitionException e);
}
internal interface Antlr4.Runtime.ICharStream {
    public abstract virtual string GetText(Interval interval);
}
internal interface Antlr4.Runtime.IIntStream {
    public int Index { get; }
    public int Size { get; }
    public string SourceName { get; }
    public abstract virtual void Consume();
    public abstract virtual int LA(int i);
    public abstract virtual int Mark();
    public abstract virtual void Release(int marker);
    public abstract virtual int get_Index();
    public abstract virtual void Seek(int index);
    public abstract virtual int get_Size();
    public abstract virtual string get_SourceName();
}
internal class Antlr4.Runtime.InputMismatchException : RecognitionException {
    private static long serialVersionUID;
    public InputMismatchException(Parser recognizer);
}
internal class Antlr4.Runtime.InterpreterRuleContext : ParserRuleContext {
    private int ruleIndex;
    public int RuleIndex { get; }
    public InterpreterRuleContext(ParserRuleContext parent, int invokingStateNumber, int ruleIndex);
    public virtual int get_RuleIndex();
}
internal static class Antlr4.Runtime.IntStreamConstants : object {
    public static int EOF;
    public static string UnknownSourceName;
}
internal interface Antlr4.Runtime.IParserErrorListener {
    public abstract virtual void ReportAmbiguity(Parser recognizer, DFA dfa, int startIndex, int stopIndex, bool exact, BitSet ambigAlts, ATNConfigSet configs);
    public abstract virtual void ReportAttemptingFullContext(Parser recognizer, DFA dfa, int startIndex, int stopIndex, BitSet conflictingAlts, SimulatorState conflictState);
    public abstract virtual void ReportContextSensitivity(Parser recognizer, DFA dfa, int startIndex, int stopIndex, int prediction, SimulatorState acceptState);
}
internal interface Antlr4.Runtime.IRecognizer {
    public IVocabulary Vocabulary { get; }
    public String[] RuleNames { get; }
    public string GrammarFileName { get; }
    public ATN Atn { get; }
    public int State { get; }
    public IIntStream InputStream { get; }
    public abstract virtual IVocabulary get_Vocabulary();
    public abstract virtual String[] get_RuleNames();
    public abstract virtual string get_GrammarFileName();
    public abstract virtual ATN get_Atn();
    public abstract virtual int get_State();
    public abstract virtual IIntStream get_InputStream();
}
internal interface Antlr4.Runtime.IToken {
    public string Text { get; }
    public int Type { get; }
    public int Line { get; }
    public int Column { get; }
    public int Channel { get; }
    public int TokenIndex { get; }
    public int StartIndex { get; }
    public int StopIndex { get; }
    public ITokenSource TokenSource { get; }
    public ICharStream InputStream { get; }
    public abstract virtual string get_Text();
    public abstract virtual int get_Type();
    public abstract virtual int get_Line();
    public abstract virtual int get_Column();
    public abstract virtual int get_Channel();
    public abstract virtual int get_TokenIndex();
    public abstract virtual int get_StartIndex();
    public abstract virtual int get_StopIndex();
    public abstract virtual ITokenSource get_TokenSource();
    public abstract virtual ICharStream get_InputStream();
}
internal interface Antlr4.Runtime.ITokenFactory {
    public abstract virtual IToken Create(Tuple`2<ITokenSource, ICharStream> source, int type, string text, int channel, int start, int stop, int line, int charPositionInLine);
    public abstract virtual IToken Create(int type, string text);
}
internal interface Antlr4.Runtime.ITokenSource {
    public int Line { get; }
    public int Column { get; }
    public ICharStream InputStream { get; }
    public string SourceName { get; }
    public ITokenFactory TokenFactory { get; public set; }
    public abstract virtual IToken NextToken();
    public abstract virtual int get_Line();
    public abstract virtual int get_Column();
    public abstract virtual ICharStream get_InputStream();
    public abstract virtual string get_SourceName();
    public abstract virtual ITokenFactory get_TokenFactory();
    public abstract virtual void set_TokenFactory(ITokenFactory value);
}
internal interface Antlr4.Runtime.ITokenStream {
    public ITokenSource TokenSource { get; }
    public abstract virtual IToken LT(int k);
    public abstract virtual IToken Get(int i);
    public abstract virtual ITokenSource get_TokenSource();
    public abstract virtual string GetText(Interval interval);
    public abstract virtual string GetText();
    public abstract virtual string GetText(RuleContext ctx);
    public abstract virtual string GetText(IToken start, IToken stop);
}
internal interface Antlr4.Runtime.IVocabulary {
    public abstract virtual string GetLiteralName(int tokenType);
    public abstract virtual string GetSymbolicName(int tokenType);
    public abstract virtual string GetDisplayName(int tokenType);
}
internal interface Antlr4.Runtime.IWritableToken {
    unknown string Text {public set; }
    unknown int Type {public set; }
    unknown int Line {public set; }
    unknown int Column {public set; }
    unknown int Channel {public set; }
    unknown int TokenIndex {public set; }
    public abstract virtual void set_Text(string value);
    public abstract virtual void set_Type(int value);
    public abstract virtual void set_Line(int value);
    public abstract virtual void set_Column(int value);
    public abstract virtual void set_Channel(int value);
    public abstract virtual void set_TokenIndex(int value);
}
internal abstract class Antlr4.Runtime.Lexer : Recognizer`2<int, LexerATNSimulator> {
    public static int DEFAULT_MODE;
    public static int DefaultTokenChannel;
    public static int Hidden;
    public static int MinCharValue;
    public static int MaxCharValue;
    private ICharStream _input;
    protected TextWriter Output;
    protected TextWriter ErrorOutput;
    private Tuple`2<ITokenSource, ICharStream> _tokenFactorySourcePair;
    private ITokenFactory _factory;
    private IToken _token;
    private int _tokenStartCharIndex;
    private int _tokenStartLine;
    private int _tokenStartColumn;
    private bool _hitEOF;
    private int _channel;
    private int _type;
    private Stack`1<int> _modeStack;
    private int _mode;
    private string _text;
    public ITokenFactory TokenFactory { get; public set; }
    public string SourceName { get; }
    public IIntStream InputStream { get; }
    private ICharStream Antlr4.Runtime.ITokenSource.InputStream { get; }
    public int Line { get; public set; }
    public int Column { get; public set; }
    public int CharIndex { get; }
    public int TokenStartCharIndex { get; }
    public int TokenStartLine { get; }
    public int TokenStartColumn { get; }
    public string Text { get; public set; }
    public IToken Token { get; public set; }
    public int Type { get; public set; }
    public int Channel { get; public set; }
    public Stack`1<int> ModeStack { get; }
    public int CurrentMode { get; public set; }
    public bool HitEOF { get; public set; }
    public String[] ChannelNames { get; }
    public String[] ModeNames { get; }
    public Lexer(ICharStream input);
    public Lexer(ICharStream input, TextWriter output, TextWriter errorOutput);
    public virtual void Reset();
    public virtual IToken NextToken();
    public virtual void Skip();
    public virtual void More();
    public virtual void Mode(int m);
    public virtual void PushMode(int m);
    public virtual int PopMode();
    public virtual ITokenFactory get_TokenFactory();
    public virtual void set_TokenFactory(ITokenFactory value);
    public virtual void SetInputStream(ICharStream input);
    public virtual string get_SourceName();
    public virtual IIntStream get_InputStream();
    private sealed virtual override ICharStream Antlr4.Runtime.ITokenSource.get_InputStream();
    public virtual void Emit(IToken token);
    public virtual IToken Emit();
    public virtual IToken EmitEOF();
    public virtual int get_Line();
    public virtual void set_Line(int value);
    public virtual int get_Column();
    public virtual void set_Column(int value);
    public virtual int get_CharIndex();
    public virtual int get_TokenStartCharIndex();
    public virtual int get_TokenStartLine();
    public virtual int get_TokenStartColumn();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual IToken get_Token();
    public virtual void set_Token(IToken value);
    public virtual int get_Type();
    public virtual void set_Type(int value);
    public virtual int get_Channel();
    public virtual void set_Channel(int value);
    public virtual Stack`1<int> get_ModeStack();
    public virtual int get_CurrentMode();
    public virtual void set_CurrentMode(int value);
    public virtual bool get_HitEOF();
    public virtual void set_HitEOF(bool value);
    public virtual String[] get_ChannelNames();
    public virtual String[] get_ModeNames();
    public virtual IList`1<IToken> GetAllTokens();
    public virtual void Recover(LexerNoViableAltException e);
    public virtual void NotifyListeners(LexerNoViableAltException e);
    public virtual string GetErrorDisplay(string s);
    public virtual string GetErrorDisplay(int c);
    public virtual string GetCharErrorDisplay(int c);
    public virtual void Recover(RecognitionException re);
}
internal class Antlr4.Runtime.LexerInterpreter : Lexer {
    private string grammarFileName;
    private ATN atn;
    private String[] ruleNames;
    private String[] channelNames;
    private String[] modeNames;
    [NotNullAttribute]
private IVocabulary vocabulary;
    protected DFA[] decisionToDFA;
    protected PredictionContextCache sharedContextCache;
    public ATN Atn { get; }
    public string GrammarFileName { get; }
    public String[] RuleNames { get; }
    public String[] ChannelNames { get; }
    public String[] ModeNames { get; }
    public IVocabulary Vocabulary { get; }
    [ObsoleteAttribute("Use constructor with channelNames argument")]
public LexerInterpreter(string grammarFileName, IVocabulary vocabulary, IEnumerable`1<string> ruleNames, IEnumerable`1<string> modeNames, ATN atn, ICharStream input);
    public LexerInterpreter(string grammarFileName, IVocabulary vocabulary, IEnumerable`1<string> ruleNames, IEnumerable`1<string> channelNames, IEnumerable`1<string> modeNames, ATN atn, ICharStream input);
    public virtual ATN get_Atn();
    public virtual string get_GrammarFileName();
    public virtual String[] get_RuleNames();
    public virtual String[] get_ChannelNames();
    public virtual String[] get_ModeNames();
    public virtual IVocabulary get_Vocabulary();
}
internal class Antlr4.Runtime.LexerNoViableAltException : RecognitionException {
    private static long serialVersionUID;
    private int startIndex;
    [NullableAttribute]
private ATNConfigSet deadEndConfigs;
    public int StartIndex { get; }
    [NullableAttribute]
public ATNConfigSet DeadEndConfigs { get; }
    public IIntStream InputStream { get; }
    public LexerNoViableAltException(Lexer lexer, ICharStream input, int startIndex, ATNConfigSet deadEndConfigs);
    public virtual int get_StartIndex();
    public virtual ATNConfigSet get_DeadEndConfigs();
    public virtual IIntStream get_InputStream();
    public virtual string ToString();
}
internal class Antlr4.Runtime.ListTokenSource : object {
    protected internal IList`1<IToken> tokens;
    private string sourceName;
    protected internal int i;
    protected internal IToken eofToken;
    private ITokenFactory _factory;
    public int Column { get; }
    public int Line { get; }
    public ICharStream InputStream { get; }
    public string SourceName { get; }
    public ITokenFactory TokenFactory { get; public set; }
    public ListTokenSource(IList`1<IToken> tokens);
    public ListTokenSource(IList`1<IToken> tokens, string sourceName);
    public virtual int get_Column();
    public virtual IToken NextToken();
    public virtual int get_Line();
    public virtual ICharStream get_InputStream();
    public virtual string get_SourceName();
    public virtual ITokenFactory get_TokenFactory();
    public virtual void set_TokenFactory(ITokenFactory value);
}
internal static class Antlr4.Runtime.Misc.Args : object {
    public static void NotNull(string parameterName, object value);
}
internal class Antlr4.Runtime.Misc.ArrayList`1 : List`1<T> {
    public ArrayList`1(int count);
    public virtual int GetHashCode();
    public virtual bool Equals(object o);
    public bool Equals(List`1<T> o);
}
internal interface Antlr4.Runtime.Misc.IIntSet {
    public int Count { get; }
    public bool IsNil { get; }
    public int SingleElement { get; }
    public abstract virtual void Add(int el);
    public abstract virtual IIntSet AddAll(IIntSet set);
    public abstract virtual IIntSet And(IIntSet a);
    public abstract virtual IIntSet Complement(IIntSet elements);
    public abstract virtual IIntSet Or(IIntSet a);
    public abstract virtual IIntSet Subtract(IIntSet a);
    public abstract virtual int get_Count();
    public abstract virtual bool get_IsNil();
    public abstract virtual bool Equals(object obj);
    public abstract virtual int get_SingleElement();
    public abstract virtual bool Contains(int el);
    public abstract virtual void Remove(int el);
    public abstract virtual IList`1<int> ToList();
    public abstract virtual string ToString();
}
internal class Antlr4.Runtime.Misc.Interval : ValueType {
    public static Interval Invalid;
    public int a;
    public int b;
    public int Length { get; }
    public Interval(int a, int b);
    private static Interval();
    public static Interval Of(int a, int b);
    public int get_Length();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public bool StartsBeforeDisjoint(Interval other);
    public bool StartsBeforeNonDisjoint(Interval other);
    public bool StartsAfter(Interval other);
    public bool StartsAfterDisjoint(Interval other);
    public bool StartsAfterNonDisjoint(Interval other);
    public bool Disjoint(Interval other);
    public bool Adjacent(Interval other);
    public bool ProperlyContains(Interval other);
    public Interval Union(Interval other);
    public Interval Intersection(Interval other);
    public Nullable`1<Interval> DifferenceNotProperlyContained(Interval other);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Misc.IntervalSet : object {
    public static IntervalSet CompleteCharSet;
    public static IntervalSet EmptySet;
    protected internal IList`1<Interval> intervals;
    protected internal bool readonly;
    public bool IsNil { get; }
    public int SingleElement { get; }
    public int MaxElement { get; }
    public int MinElement { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private static IntervalSet();
    public IntervalSet(IList`1<Interval> intervals);
    public IntervalSet(IntervalSet set);
    public IntervalSet(Int32[] els);
    public static IntervalSet Of(int a);
    public static IntervalSet Of(int a, int b);
    public virtual void Clear();
    public virtual void Add(int el);
    public virtual void Add(int a, int b);
    protected internal virtual void Add(Interval addition);
    public static IntervalSet Or(IntervalSet[] sets);
    public virtual IntervalSet AddAll(IIntSet set);
    public virtual IntervalSet Complement(int minElement, int maxElement);
    public virtual IntervalSet Complement(IIntSet vocabulary);
    public virtual IntervalSet Subtract(IIntSet a);
    public static IntervalSet Subtract(IntervalSet left, IntervalSet right);
    public virtual IntervalSet Or(IIntSet a);
    public virtual IntervalSet And(IIntSet other);
    public virtual bool Contains(int el);
    public virtual bool get_IsNil();
    public virtual int get_SingleElement();
    public virtual int get_MaxElement();
    public virtual int get_MinElement();
    public virtual IList`1<Interval> GetIntervals();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual string ToString(bool elemAreChar);
    public virtual string ToString(IVocabulary vocabulary);
    protected internal virtual string ElementName(IVocabulary vocabulary, int a);
    public virtual int get_Count();
    public virtual ArrayList`1<int> ToIntegerList();
    public virtual IList`1<int> ToList();
    public virtual HashSet`1<int> ToSet();
    public virtual Int32[] ToArray();
    public virtual void Remove(int el);
    public virtual bool get_IsReadOnly();
    public virtual void SetReadonly(bool readonly);
    private sealed virtual override IIntSet Antlr4.Runtime.Misc.IIntSet.AddAll(IIntSet set);
    private sealed virtual override IIntSet Antlr4.Runtime.Misc.IIntSet.And(IIntSet a);
    private sealed virtual override IIntSet Antlr4.Runtime.Misc.IIntSet.Complement(IIntSet elements);
    private sealed virtual override IIntSet Antlr4.Runtime.Misc.IIntSet.Or(IIntSet a);
    private sealed virtual override IIntSet Antlr4.Runtime.Misc.IIntSet.Subtract(IIntSet a);
}
internal class Antlr4.Runtime.Misc.MultiMap`2 : Dictionary`2<K, IList`1<V>> {
    private static long serialVersionUID;
    public virtual void Map(K key, V value);
    public virtual IList`1<Tuple`2<K, V>> GetPairs();
}
internal class Antlr4.Runtime.Misc.MurmurHash : object {
    private static int DefaultSeed;
    public static int Initialize();
    public static int Initialize(int seed);
    public static int Update(int hash, int value);
    public static int Update(int hash, object value);
    public static int Finish(int hash, int numberOfWords);
    public static int HashCode(T[] data, int seed);
}
[AttributeUsageAttribute("10624")]
internal class Antlr4.Runtime.Misc.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
internal class Antlr4.Runtime.Misc.NullableAttribute : Attribute {
}
internal class Antlr4.Runtime.Misc.Pair`2 : object {
    public A a;
    public B b;
    public Pair`2(A a, B b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Antlr4.Runtime.Misc.ParseCanceledException : OperationCanceledException {
    public ParseCanceledException(string message);
    public ParseCanceledException(Exception cause);
    public ParseCanceledException(string message, Exception cause);
}
internal class Antlr4.Runtime.Misc.RuleDependencyChecker : object {
    private static BindingFlags AllDeclaredStaticMembers;
    private static BindingFlags AllDeclaredMembers;
    private static HashSet`1<string> checkedAssemblies;
    private static Dependents ImplementedDependents;
    private static RuleDependencyChecker();
    public static void CheckDependencies(Assembly assembly);
    private static IList`1<Type> GetTypesToCheck(Assembly assembly);
    private static bool IsChecked(Assembly assembly);
    private static void MarkChecked(Assembly assembly);
    private static void CheckDependencies(IList`1<Tuple`2<RuleDependencyAttribute, ICustomAttributeProvider>> dependencies, Type recognizerType);
    private static void ReportUnimplementedDependents(StringBuilder errors, Tuple`2<RuleDependencyAttribute, ICustomAttributeProvider> dependency, Dependents dependents);
    private static int CheckDependencyVersion(StringBuilder errors, Tuple`2<RuleDependencyAttribute, ICustomAttributeProvider> dependency, String[] ruleNames, Int32[] ruleVersions, int relatedRule, string relation);
    private static Int32[] GetRuleVersions(Type recognizerClass, String[] ruleNames);
    private static MethodInfo GetRuleMethod(Type recognizerClass, string name);
    private static String[] GetRuleNames(Type recognizerClass);
    public static IList`1<Tuple`2<RuleDependencyAttribute, ICustomAttributeProvider>> GetDependencies(Type clazz);
    private static void GetElementDependencies(ICustomAttributeProvider annotatedElement, IList`1<Tuple`2<RuleDependencyAttribute, ICustomAttributeProvider>> result);
    private static RuleRelations ExtractRuleRelations(Type recognizer);
    private static string GetSerializedATN(Type recognizerClass);
    protected static ICustomAttributeProvider AsCustomAttributeProvider(ICustomAttributeProvider obj);
}
internal class Antlr4.Runtime.Misc.Utils : object {
    public static string Join(string separator, IEnumerable`1<T> items);
    public static int NumNonnull(Object[] data);
    public static void RemoveAllElements(ICollection`1<T> data, T value);
    public static string EscapeWhitespace(string s, bool escapeSpaces);
    public static void RemoveAll(IList`1<T> list, Predicate`1<T> predicate);
    public static IDictionary`2<string, int> ToMap(String[] keys);
}
internal class Antlr4.Runtime.NoViableAltException : RecognitionException {
    private static long serialVersionUID;
    [NullableAttribute]
private ATNConfigSet deadEndConfigs;
    [NotNullAttribute]
private IToken startToken;
    public IToken StartToken { get; }
    [NullableAttribute]
public ATNConfigSet DeadEndConfigs { get; }
    public NoViableAltException(Parser recognizer);
    public NoViableAltException(IRecognizer recognizer, ITokenStream input, IToken startToken, IToken offendingToken, ATNConfigSet deadEndConfigs, ParserRuleContext ctx);
    public virtual IToken get_StartToken();
    public virtual ATNConfigSet get_DeadEndConfigs();
}
internal abstract class Antlr4.Runtime.Parser : Recognizer`2<IToken, ParserATNSimulator> {
    private static IDictionary`2<string, ATN> bypassAltsAtnCache;
    [NotNullAttribute]
private IAntlrErrorStrategy _errHandler;
    private ITokenStream _input;
    private List`1<int> _precedenceStack;
    private ParserRuleContext _ctx;
    private bool _buildParseTrees;
    private TraceListener _tracer;
    [NullableAttribute]
private IList`1<IParseTreeListener> _parseListeners;
    private int _syntaxErrors;
    protected TextWriter Output;
    protected TextWriter ErrorOutput;
    public bool BuildParseTree { get; public set; }
    public bool TrimParseTree { get; public set; }
    public IList`1<IParseTreeListener> ParseListeners { get; }
    public int NumberOfSyntaxErrors { get; }
    public ITokenFactory TokenFactory { get; }
    public IAntlrErrorStrategy ErrorHandler { get; public set; }
    public IIntStream InputStream { get; }
    public ITokenStream TokenStream { get; public set; }
    public IToken CurrentToken { get; }
    public int Precedence { get; }
    public ParserRuleContext Context { get; public set; }
    public IParserErrorListener ErrorListenerDispatch { get; }
    public ParserRuleContext RuleContext { get; }
    public string SourceName { get; }
    public ParseInfo ParseInfo { get; }
    unknown bool Profile {public set; }
    public bool Trace { get; public set; }
    public Parser(ITokenStream input);
    public Parser(ITokenStream input, TextWriter output, TextWriter errorOutput);
    private static Parser();
    public virtual void Reset();
    public virtual IToken Match(int ttype);
    public virtual IToken MatchWildcard();
    public virtual bool get_BuildParseTree();
    public virtual void set_BuildParseTree(bool value);
    public virtual bool get_TrimParseTree();
    public virtual void set_TrimParseTree(bool value);
    public virtual IList`1<IParseTreeListener> get_ParseListeners();
    public virtual void AddParseListener(IParseTreeListener listener);
    public virtual void RemoveParseListener(IParseTreeListener listener);
    public virtual void RemoveParseListeners();
    protected internal virtual void TriggerEnterRuleEvent();
    protected internal virtual void TriggerExitRuleEvent();
    public virtual int get_NumberOfSyntaxErrors();
    public virtual ITokenFactory get_TokenFactory();
    public virtual ATN GetATNWithBypassAlts();
    public virtual ParseTreePattern CompileParseTreePattern(string pattern, int patternRuleIndex);
    public virtual ParseTreePattern CompileParseTreePattern(string pattern, int patternRuleIndex, Lexer lexer);
    public virtual IAntlrErrorStrategy get_ErrorHandler();
    public virtual void set_ErrorHandler(IAntlrErrorStrategy value);
    public virtual IIntStream get_InputStream();
    public ITokenStream get_TokenStream();
    public void set_TokenStream(ITokenStream value);
    public virtual IToken get_CurrentToken();
    public void NotifyErrorListeners(string msg);
    public virtual void NotifyErrorListeners(IToken offendingToken, string msg, RecognitionException e);
    public virtual IToken Consume();
    protected internal virtual void AddContextToParseTree();
    public virtual void EnterRule(ParserRuleContext localctx, int state, int ruleIndex);
    public virtual void EnterLeftFactoredRule(ParserRuleContext localctx, int state, int ruleIndex);
    public virtual void ExitRule();
    public virtual void EnterOuterAlt(ParserRuleContext localctx, int altNum);
    public int get_Precedence();
    [ObsoleteAttribute("UseEnterRecursionRule(ParserRuleContext, int, int, int) instead.")]
public virtual void EnterRecursionRule(ParserRuleContext localctx, int ruleIndex);
    public virtual void EnterRecursionRule(ParserRuleContext localctx, int state, int ruleIndex, int precedence);
    public virtual void PushNewRecursionContext(ParserRuleContext localctx, int state, int ruleIndex);
    public virtual void UnrollRecursionContexts(ParserRuleContext _parentctx);
    public virtual ParserRuleContext GetInvokingContext(int ruleIndex);
    public virtual ParserRuleContext get_Context();
    public virtual void set_Context(ParserRuleContext value);
    public virtual bool Precpred(RuleContext localctx, int precedence);
    public IParserErrorListener get_ErrorListenerDispatch();
    public virtual bool InContext(string context);
    public virtual bool IsExpectedToken(int symbol);
    public virtual IntervalSet GetExpectedTokens();
    public virtual IntervalSet GetExpectedTokensWithinCurrentRule();
    public virtual int GetRuleIndex(string ruleName);
    public virtual ParserRuleContext get_RuleContext();
    public virtual IList`1<string> GetRuleInvocationStack();
    public virtual string GetRuleInvocationStackAsString();
    public virtual IList`1<string> GetRuleInvocationStack(RuleContext p);
    public virtual IList`1<string> GetDFAStrings();
    public virtual void DumpDFA();
    public virtual string get_SourceName();
    public virtual ParseInfo get_ParseInfo();
    public virtual void set_Profile(bool value);
    public virtual bool get_Trace();
    public virtual void set_Trace(bool value);
}
internal class Antlr4.Runtime.ParserInterpreter : Parser {
    private string _grammarFileName;
    private ATN _atn;
    private DFA[] _decisionToDFA;
    protected internal BitSet pushRecursionContextStates;
    private String[] _ruleNames;
    [NotNullAttribute]
private IVocabulary vocabulary;
    private Stack`1<Tuple`2<ParserRuleContext, int>> _parentContextStack;
    public ATN Atn { get; }
    public IVocabulary Vocabulary { get; }
    public String[] RuleNames { get; }
    public string GrammarFileName { get; }
    protected internal ATNState AtnState { get; }
    public ParserInterpreter(string grammarFileName, IVocabulary vocabulary, IEnumerable`1<string> ruleNames, ATN atn, ITokenStream input);
    public virtual ATN get_Atn();
    public virtual IVocabulary get_Vocabulary();
    public virtual String[] get_RuleNames();
    public virtual string get_GrammarFileName();
    public virtual ParserRuleContext Parse(int startRuleIndex);
    public virtual void EnterRecursionRule(ParserRuleContext localctx, int state, int ruleIndex, int precedence);
    protected internal virtual ATNState get_AtnState();
    protected internal virtual void VisitState(ATNState p);
    protected internal virtual void VisitRuleStopState(ATNState p);
}
internal class Antlr4.Runtime.ParserRuleContext : RuleContext {
    public static ParserRuleContext EMPTY;
    public IList`1<IParseTree> children;
    private IToken _start;
    private IToken _stop;
    public RecognitionException exception;
    public static ParserRuleContext EmptyContext { get; }
    public int ChildCount { get; }
    public Interval SourceInterval { get; }
    public IToken Start { get; public set; }
    public IToken Stop { get; public set; }
    public ParserRuleContext(ParserRuleContext parent, int invokingStateNumber);
    private static ParserRuleContext();
    public static ParserRuleContext get_EmptyContext();
    public virtual void CopyFrom(ParserRuleContext ctx);
    public virtual void EnterRule(IParseTreeListener listener);
    public virtual void ExitRule(IParseTreeListener listener);
    public virtual void AddChild(ITerminalNode t);
    public virtual void AddChild(RuleContext ruleInvocation);
    public virtual void RemoveLastChild();
    public virtual ITerminalNode AddChild(IToken matchedToken);
    public virtual IErrorNode AddErrorNode(IToken badToken);
    public virtual IParseTree GetChild(int i);
    public virtual T GetChild(int i);
    public virtual ITerminalNode GetToken(int ttype, int i);
    public virtual ITerminalNode[] GetTokens(int ttype);
    public virtual T GetRuleContext(int i);
    public virtual T[] GetRuleContexts();
    public virtual int get_ChildCount();
    public virtual Interval get_SourceInterval();
    public virtual IToken get_Start();
    public virtual void set_Start(IToken value);
    public virtual IToken get_Stop();
    public virtual void set_Stop(IToken value);
    public virtual string ToInfoString(Parser recognizer);
}
internal class Antlr4.Runtime.ProxyErrorListener`1 : object {
    private IEnumerable`1<IAntlrErrorListener`1<Symbol>> delegates;
    protected internal IEnumerable`1<IAntlrErrorListener`1<Symbol>> Delegates { get; }
    public ProxyErrorListener`1(IEnumerable`1<IAntlrErrorListener`1<Symbol>> delegates);
    protected internal virtual IEnumerable`1<IAntlrErrorListener`1<Symbol>> get_Delegates();
    public virtual void SyntaxError(TextWriter output, IRecognizer recognizer, Symbol offendingSymbol, int line, int charPositionInLine, string msg, RecognitionException e);
}
internal class Antlr4.Runtime.ProxyParserErrorListener : ProxyErrorListener`1<IToken> {
    public ProxyParserErrorListener(ICollection`1<IAntlrErrorListener`1<IToken>> delegates);
    public virtual void ReportAmbiguity(Parser recognizer, DFA dfa, int startIndex, int stopIndex, bool exact, BitSet ambigAlts, ATNConfigSet configs);
    public virtual void ReportAttemptingFullContext(Parser recognizer, DFA dfa, int startIndex, int stopIndex, BitSet conflictingAlts, SimulatorState conflictState);
    public virtual void ReportContextSensitivity(Parser recognizer, DFA dfa, int startIndex, int stopIndex, int prediction, SimulatorState acceptState);
}
internal class Antlr4.Runtime.RecognitionException : Exception {
    private static long serialVersionUID;
    [NullableAttribute]
private IRecognizer recognizer;
    [NullableAttribute]
private RuleContext ctx;
    [NullableAttribute]
private IIntStream input;
    private IToken offendingToken;
    private int offendingState;
    public int OffendingState { get; protected set; }
    public RuleContext Context { get; }
    public IIntStream InputStream { get; }
    public IToken OffendingToken { get; protected set; }
    public IRecognizer Recognizer { get; }
    public RecognitionException(Lexer lexer, ICharStream input);
    public RecognitionException(IRecognizer recognizer, IIntStream input, ParserRuleContext ctx);
    public RecognitionException(string message, IRecognizer recognizer, IIntStream input, ParserRuleContext ctx);
    public int get_OffendingState();
    protected void set_OffendingState(int value);
    public virtual IntervalSet GetExpectedTokens();
    public virtual RuleContext get_Context();
    public virtual IIntStream get_InputStream();
    public IToken get_OffendingToken();
    protected void set_OffendingToken(IToken value);
    public virtual IRecognizer get_Recognizer();
}
internal abstract class Antlr4.Runtime.Recognizer`2 : object {
    public static int Eof;
    [NotNullAttribute]
private IAntlrErrorListener`1[] _listeners;
    private ATNInterpreter _interp;
    private int _stateNumber;
    public String[] RuleNames { get; }
    public IVocabulary Vocabulary { get; }
    [NotNullAttribute]
public IDictionary`2<string, int> TokenTypeMap { get; }
    [NotNullAttribute]
public IDictionary`2<string, int> RuleIndexMap { get; }
    public string SerializedAtn { get; }
    public string GrammarFileName { get; }
    public ATN Atn { get; }
    public ATNInterpreter Interpreter { get; protected set; }
    public ParseInfo ParseInfo { get; }
    [NotNullAttribute]
public IList`1<IAntlrErrorListener`1<Symbol>> ErrorListeners { get; }
    public IAntlrErrorListener`1<Symbol> ErrorListenerDispatch { get; }
    public int State { get; public set; }
    public IIntStream InputStream { get; }
    public abstract virtual String[] get_RuleNames();
    public abstract virtual IVocabulary get_Vocabulary();
    public virtual IDictionary`2<string, int> get_TokenTypeMap();
    protected virtual IDictionary`2<string, int> CreateTokenTypeMap(IVocabulary vocabulary);
    public virtual IDictionary`2<string, int> get_RuleIndexMap();
    public virtual int GetTokenType(string tokenName);
    public virtual string get_SerializedAtn();
    public abstract virtual string get_GrammarFileName();
    public virtual ATN get_Atn();
    public virtual ATNInterpreter get_Interpreter();
    protected virtual void set_Interpreter(ATNInterpreter value);
    public virtual ParseInfo get_ParseInfo();
    public virtual string GetErrorHeader(RecognitionException e);
    [ObsoleteAttribute("This method is not called by the ANTLR 4 Runtime. Specific implementations of IAntlrErrorStrategy may provide a similar feature when necessary. For example, see DefaultErrorStrategy.GetTokenErrorDisplay(IToken).")]
public virtual string GetTokenErrorDisplay(IToken t);
    public virtual void AddErrorListener(IAntlrErrorListener`1<Symbol> listener);
    public virtual void RemoveErrorListener(IAntlrErrorListener`1<Symbol> listener);
    public virtual void RemoveErrorListeners();
    public virtual IList`1<IAntlrErrorListener`1<Symbol>> get_ErrorListeners();
    public virtual IAntlrErrorListener`1<Symbol> get_ErrorListenerDispatch();
    public virtual bool Sempred(RuleContext _localctx, int ruleIndex, int actionIndex);
    public virtual bool Precpred(RuleContext localctx, int precedence);
    public virtual void Action(RuleContext _localctx, int ruleIndex, int actionIndex);
    public sealed virtual int get_State();
    public void set_State(int value);
    public abstract virtual IIntStream get_InputStream();
}
internal class Antlr4.Runtime.RuleContext : object {
    private RuleContext _parent;
    public int invokingState;
    public bool IsEmpty { get; }
    public Interval SourceInterval { get; }
    private RuleContext Antlr4.Runtime.Tree.IRuleNode.RuleContext { get; }
    public RuleContext Parent { get; public set; }
    private IRuleNode Antlr4.Runtime.Tree.IRuleNode.Parent { get; }
    private IParseTree Antlr4.Runtime.Tree.IParseTree.Parent { get; }
    private ITree Antlr4.Runtime.Tree.ITree.Parent { get; }
    public RuleContext Payload { get; }
    private object Antlr4.Runtime.Tree.ITree.Payload { get; }
    public int RuleIndex { get; }
    public int ChildCount { get; }
    public RuleContext(RuleContext parent, int invokingState);
    public static RuleContext GetChildContext(RuleContext parent, int invokingState);
    public virtual int Depth();
    public virtual bool get_IsEmpty();
    public virtual Interval get_SourceInterval();
    private sealed virtual override RuleContext Antlr4.Runtime.Tree.IRuleNode.get_RuleContext();
    public virtual RuleContext get_Parent();
    public virtual void set_Parent(RuleContext value);
    private sealed virtual override IRuleNode Antlr4.Runtime.Tree.IRuleNode.get_Parent();
    private sealed virtual override IParseTree Antlr4.Runtime.Tree.IParseTree.get_Parent();
    private sealed virtual override ITree Antlr4.Runtime.Tree.ITree.get_Parent();
    public virtual RuleContext get_Payload();
    private sealed virtual override object Antlr4.Runtime.Tree.ITree.get_Payload();
    public virtual string GetText();
    public virtual int get_RuleIndex();
    public virtual int getAltNumber();
    public virtual void setAltNumber(int altNumber);
    public virtual IParseTree GetChild(int i);
    private sealed virtual override ITree Antlr4.Runtime.Tree.ITree.GetChild(int i);
    public virtual int get_ChildCount();
    public virtual T Accept(IParseTreeVisitor`1<T> visitor);
    public virtual string ToStringTree(Parser recog);
    public virtual string ToStringTree(IList`1<string> ruleNames);
    public virtual string ToStringTree();
    public virtual string ToString();
    public string ToString(IRecognizer recog);
    public string ToString(IList`1<string> ruleNames);
    public virtual string ToString(IRecognizer recog, RuleContext stop);
    public virtual string ToString(IList`1<string> ruleNames, RuleContext stop);
}
[AttributeUsageAttribute("32767")]
internal class Antlr4.Runtime.RuleDependencyAttribute : Attribute {
    private Type _recognizer;
    private int _rule;
    private int _version;
    private Dependents _dependents;
    public Type Recognizer { get; }
    public int Rule { get; }
    public int Version { get; }
    public Dependents Dependents { get; }
    public RuleDependencyAttribute(Type recognizer, int rule, int version);
    public RuleDependencyAttribute(Type recognizer, int rule, int version, Dependents dependents);
    public Type get_Recognizer();
    public int get_Rule();
    public int get_Version();
    public Dependents get_Dependents();
}
[AttributeUsageAttribute("64")]
internal class Antlr4.Runtime.RuleVersionAttribute : Attribute {
    private int _version;
    public int Version { get; }
    public RuleVersionAttribute(int version);
    public int get_Version();
}
internal static class Antlr4.Runtime.Sharpen.Arrays : object {
    public static T[] CopyOf(T[] array, int newSize);
    public static IList`1<T> AsList(T[] array);
    public static void Fill(T[] array, T value);
    public static int HashCode(T[] array);
    public static bool Equals(T[] left, T[] right);
    public static string ToString(T[] array);
}
internal class Antlr4.Runtime.Sharpen.AtomicReference`1 : object {
    private T modreq(System.Runtime.CompilerServices.IsVolatile) _value;
    public AtomicReference`1(T value);
    public T Get();
    public void Set(T value);
    public bool CompareAndSet(T expect, T update);
    public T GetAndSet(T value);
}
[DefaultMemberAttribute("Item")]
internal class Antlr4.Runtime.Sharpen.BitSet : object {
    private static UInt64[] EmptyBits;
    private static int BitsPerElement;
    private UInt64[] _data;
    private static Int32[] index64;
    public bool Item { get; public set; }
    public BitSet(int nbits);
    private static BitSet();
    private static int GetBitCount(UInt64[] value);
    private static int BitScanForward(ulong value);
    public BitSet Clone();
    public void Clear(int index);
    public bool get_Item(int index);
    public void set_Item(int index, bool value);
    public bool Get(int index);
    public void Set(int index);
    public bool IsEmpty();
    public int Cardinality();
    public int NextSetBit(int fromIndex);
    public void And(BitSet set);
    public void Or(BitSet set);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Antlr4.Runtime.Sharpen.CollectionDebuggerView`1 : object {
    private ICollection`1<T> c;
    [DebuggerBrowsableAttribute("3")]
public T[] Items { get; }
    public CollectionDebuggerView`1(ICollection`1<T> col);
    public T[] get_Items();
}
internal class Antlr4.Runtime.Sharpen.CollectionDebuggerView`2 : object {
    private ICollection`1<KeyValuePair`2<T, U>> c;
    [DebuggerBrowsableAttribute("3")]
public KeyValuePair`2[] Items { get; }
    public CollectionDebuggerView`2(ICollection`1<KeyValuePair`2<T, U>> col);
    public KeyValuePair`2[] get_Items();
}
internal static class Antlr4.Runtime.Sharpen.Collections : object {
    public static T[] EmptyList();
    public static IDictionary`2<TKey, TValue> EmptyMap();
    public static ReadOnlyCollection`1<T> SingletonList(T item);
    public static IDictionary`2<TKey, TValue> SingletonMap(TKey key, TValue value);
}
[ExtensionAttribute]
internal static class Antlr4.Runtime.Sharpen.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue Get(IDictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
public static TValue Put(IDictionary`2<TKey, TValue> dictionary, TKey key, TValue value);
}
internal interface Antlr4.Runtime.Sharpen.IStructuralComparable {
    public abstract virtual int CompareTo(object other, IComparer comparer);
}
internal interface Antlr4.Runtime.Sharpen.IStructuralEquatable {
    public abstract virtual bool Equals(object other, IEqualityComparer comparer);
    public abstract virtual int GetHashCode(IEqualityComparer comparer);
}
[ExtensionAttribute]
internal static class Antlr4.Runtime.Sharpen.ListExtensions : object {
    [ExtensionAttribute]
public static T Set(IList`1<T> list, int index, T value);
}
internal static class Antlr4.Runtime.Sharpen.Runtime : object {
    public static string Substring(string str, int beginOffset, int endOffset);
}
internal class Antlr4.Runtime.Sharpen.SequenceEqualityComparer`1 : EqualityComparer`1<IEnumerable`1<T>> {
    private static SequenceEqualityComparer`1<T> _default;
    private IEqualityComparer`1<T> _elementEqualityComparer;
    public static SequenceEqualityComparer`1<T> Default { get; }
    public SequenceEqualityComparer`1(IEqualityComparer`1<T> elementComparer);
    private static SequenceEqualityComparer`1();
    public static SequenceEqualityComparer`1<T> get_Default();
    public virtual bool Equals(IEnumerable`1<T> x, IEnumerable`1<T> y);
    public virtual int GetHashCode(IEnumerable`1<T> obj);
}
internal class Antlr4.Runtime.Sharpen.SpinWait : ValueType {
    private static int step;
    private static int maxTime;
    private static bool isSingleCpu;
    private int ntime;
    private static SpinWait();
    public void SpinOnce();
}
internal class Antlr4.Runtime.Sharpen.SplitOrderedList`2 : object {
    private static int MaxLoad;
    private static UInt32 BucketSize;
    private Node<TKey, T> head;
    private Node<TKey, T> tail;
    private Node[] buckets;
    private int count;
    private int size;
    private SimpleRwLock<TKey, T> slim;
    private IEqualityComparer`1<TKey> comparer;
    private static Byte[] reverseTable;
    private static Byte[] logTable;
    public int Count { get; }
    public SplitOrderedList`2(IEqualityComparer`1<TKey> comparer);
    private static SplitOrderedList`2();
    public int get_Count();
    public T InsertOrUpdate(UInt32 key, TKey subKey, Func`1<T> addGetter, Func`2<T, T> updateGetter);
    public T InsertOrUpdate(UInt32 key, TKey subKey, T addValue, T updateValue);
    public bool Insert(UInt32 key, TKey subKey, T data);
    public T InsertOrGet(UInt32 key, TKey subKey, T data, Func`1<T> dataCreator);
    private bool InsertInternal(UInt32 key, TKey subKey, T data, Func`1<T> dataCreator, Node& current);
    public bool Find(UInt32 key, TKey subKey, T& data);
    public bool CompareExchange(UInt32 key, TKey subKey, T data, Func`2<T, bool> check);
    public bool Delete(UInt32 key, TKey subKey, T& data);
    [IteratorStateMachineAttribute("Antlr4.Runtime.Sharpen.SplitOrderedList`2/<GetEnumerator>d__21")]
public IEnumerator`1<T> GetEnumerator();
    private Node<TKey, T> InitializeBucket(UInt32 b);
    private static UInt32 GetParent(UInt32 v);
    private static ulong ComputeRegularKey(UInt32 key);
    private static ulong ComputeDummyKey(UInt32 key);
    private Node<TKey, T> GetBucket(UInt32 index);
    private Node<TKey, T> SetBucket(UInt32 index, Node<TKey, T> node);
    private void CheckSegment(UInt32 segment, bool readLockTaken);
    private Node<TKey, T> ListSearch(ulong key, TKey subKey, Node& left, Node<TKey, T> h);
    private bool ListDelete(Node<TKey, T> startPoint, ulong key, TKey subKey, T& data);
    private bool ListInsert(Node<TKey, T> newNode, Node<TKey, T> startPoint, Node& current, Func`1<T> dataCreator);
    private bool ListFind(ulong key, TKey subKey, Node<TKey, T> startPoint, Node& data);
}
internal static class Antlr4.Runtime.TokenConstants : object {
    public static int InvalidType;
    public static int EPSILON;
    public static int MinUserTokenType;
    public static int EOF;
    public static int DefaultChannel;
    public static int HiddenChannel;
    public static int MinUserChannelValue;
}
internal class Antlr4.Runtime.TokenStreamRewriter : object {
    public static string DefaultProgramName;
    public static int ProgramInitSize;
    public static int MinTokenIndex;
    protected internal ITokenStream tokens;
    protected internal IDictionary`2<string, IList`1<RewriteOperation>> programs;
    protected internal IDictionary`2<string, int> lastRewriteTokenIndexes;
    public ITokenStream TokenStream { get; }
    public int LastRewriteTokenIndex { get; }
    public TokenStreamRewriter(ITokenStream tokens);
    public ITokenStream get_TokenStream();
    public virtual void Rollback(int instructionIndex);
    public virtual void Rollback(string programName, int instructionIndex);
    public virtual void DeleteProgram();
    public virtual void DeleteProgram(string programName);
    public virtual void InsertAfter(IToken t, object text);
    public virtual void InsertAfter(int index, object text);
    public virtual void InsertAfter(string programName, IToken t, object text);
    public virtual void InsertAfter(string programName, int index, object text);
    public virtual void InsertBefore(IToken t, object text);
    public virtual void InsertBefore(int index, object text);
    public virtual void InsertBefore(string programName, IToken t, object text);
    public virtual void InsertBefore(string programName, int index, object text);
    public virtual void Replace(int index, object text);
    public virtual void Replace(int from, int to, object text);
    public virtual void Replace(IToken indexT, object text);
    public virtual void Replace(IToken from, IToken to, object text);
    public virtual void Replace(string programName, int from, int to, object text);
    public virtual void Replace(string programName, IToken from, IToken to, object text);
    public virtual void Delete(int index);
    public virtual void Delete(int from, int to);
    public virtual void Delete(IToken indexT);
    public virtual void Delete(IToken from, IToken to);
    public virtual void Delete(string programName, int from, int to);
    public virtual void Delete(string programName, IToken from, IToken to);
    public virtual int get_LastRewriteTokenIndex();
    protected internal virtual int GetLastRewriteTokenIndex(string programName);
    protected internal virtual void SetLastRewriteTokenIndex(string programName, int i);
    protected internal virtual IList`1<RewriteOperation> GetProgram(string name);
    private IList`1<RewriteOperation> InitializeProgram(string name);
    public virtual string GetText();
    public virtual string GetText(Interval interval);
    public virtual string GetText(string programName, Interval interval);
    protected internal virtual IDictionary`2<int, RewriteOperation> ReduceToSingleOperationPerIndex(IList`1<RewriteOperation> rewrites);
    protected internal virtual string CatOpText(object a, object b);
    protected internal virtual IList`1<T> GetKindOfOps(IList`1<RewriteOperation> rewrites, int before);
}
internal static class Antlr4.Runtime.TokenTypes : object {
    public static int More;
    public static int Skip;
}
internal abstract class Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1 : object {
    protected internal Result DefaultResult { get; }
    public virtual Result Visit(IParseTree tree);
    public virtual Result VisitChildren(IRuleNode node);
    public virtual Result VisitTerminal(ITerminalNode node);
    public virtual Result VisitErrorNode(IErrorNode node);
    protected internal virtual Result get_DefaultResult();
    protected internal virtual Result AggregateResult(Result aggregate, Result nextResult);
    protected internal virtual bool ShouldVisitNextChild(IRuleNode node, Result currentResult);
}
internal class Antlr4.Runtime.Tree.ErrorNodeImpl : TerminalNodeImpl {
    public ErrorNodeImpl(IToken token);
    public virtual T Accept(IParseTreeVisitor`1<T> visitor);
}
internal interface Antlr4.Runtime.Tree.IErrorNode {
}
internal interface Antlr4.Runtime.Tree.IParseTree {
    public IParseTree Parent { get; }
    public abstract virtual IParseTree get_Parent();
    public abstract virtual IParseTree GetChild(int i);
    public abstract virtual T Accept(IParseTreeVisitor`1<T> visitor);
    public abstract virtual string GetText();
    public abstract virtual string ToStringTree(Parser parser);
}
internal interface Antlr4.Runtime.Tree.IParseTreeListener {
    public abstract virtual void VisitTerminal(ITerminalNode node);
    public abstract virtual void VisitErrorNode(IErrorNode node);
    public abstract virtual void EnterEveryRule(ParserRuleContext ctx);
    public abstract virtual void ExitEveryRule(ParserRuleContext ctx);
}
internal interface Antlr4.Runtime.Tree.IParseTreeVisitor`1 {
    public abstract virtual Result Visit(IParseTree tree);
    public abstract virtual Result VisitChildren(IRuleNode node);
    public abstract virtual Result VisitTerminal(ITerminalNode node);
    public abstract virtual Result VisitErrorNode(IErrorNode node);
}
internal interface Antlr4.Runtime.Tree.IRuleNode {
    public RuleContext RuleContext { get; }
    public IRuleNode Parent { get; }
    public abstract virtual RuleContext get_RuleContext();
    public abstract virtual IRuleNode get_Parent();
}
internal interface Antlr4.Runtime.Tree.ISyntaxTree {
    public Interval SourceInterval { get; }
    public abstract virtual Interval get_SourceInterval();
}
internal interface Antlr4.Runtime.Tree.ITerminalNode {
    public IToken Symbol { get; }
    public IRuleNode Parent { get; }
    public abstract virtual IToken get_Symbol();
    public abstract virtual IRuleNode get_Parent();
}
internal interface Antlr4.Runtime.Tree.ITree {
    public ITree Parent { get; }
    public object Payload { get; }
    public int ChildCount { get; }
    public abstract virtual ITree get_Parent();
    public abstract virtual object get_Payload();
    public abstract virtual ITree GetChild(int i);
    public abstract virtual int get_ChildCount();
    public abstract virtual string ToStringTree();
}
internal class Antlr4.Runtime.Tree.ParseTreeProperty`1 : object {
    protected internal ConcurrentDictionary`2<IParseTree, V> annotations;
    public virtual V Get(IParseTree node);
    public virtual void Put(IParseTree node, V value);
    public virtual V RemoveFrom(IParseTree node);
}
internal class Antlr4.Runtime.Tree.ParseTreeWalker : object {
    public static ParseTreeWalker Default;
    private static ParseTreeWalker();
    public virtual void Walk(IParseTreeListener listener, IParseTree t);
    protected internal virtual void EnterRule(IParseTreeListener listener, IRuleNode r);
    protected internal virtual void ExitRule(IParseTreeListener listener, IRuleNode r);
}
internal abstract class Antlr4.Runtime.Tree.Pattern.Chunk : object {
}
internal class Antlr4.Runtime.Tree.Pattern.ParseTreeMatch : object {
    private IParseTree tree;
    private ParseTreePattern pattern;
    private MultiMap`2<string, IParseTree> labels;
    private IParseTree mismatchedNode;
    [NotNullAttribute]
public MultiMap`2<string, IParseTree> Labels { get; }
    [NullableAttribute]
public IParseTree MismatchedNode { get; }
    public bool Succeeded { get; }
    [NotNullAttribute]
public ParseTreePattern Pattern { get; }
    [NotNullAttribute]
public IParseTree Tree { get; }
    public ParseTreeMatch(IParseTree tree, ParseTreePattern pattern, MultiMap`2<string, IParseTree> labels, IParseTree mismatchedNode);
    public virtual IParseTree Get(string label);
    public virtual IList`1<IParseTree> GetAll(string label);
    public virtual MultiMap`2<string, IParseTree> get_Labels();
    public virtual IParseTree get_MismatchedNode();
    public virtual bool get_Succeeded();
    public virtual ParseTreePattern get_Pattern();
    public virtual IParseTree get_Tree();
    public virtual string ToString();
}
internal class Antlr4.Runtime.Tree.Pattern.ParseTreePattern : object {
    private int patternRuleIndex;
    [NotNullAttribute]
private string pattern;
    [NotNullAttribute]
private IParseTree patternTree;
    [NotNullAttribute]
private ParseTreePatternMatcher matcher;
    [NotNullAttribute]
public ParseTreePatternMatcher Matcher { get; }
    [NotNullAttribute]
public string Pattern { get; }
    public int PatternRuleIndex { get; }
    [NotNullAttribute]
public IParseTree PatternTree { get; }
    public ParseTreePattern(ParseTreePatternMatcher matcher, string pattern, int patternRuleIndex, IParseTree patternTree);
    public virtual ParseTreeMatch Match(IParseTree tree);
    public virtual bool Matches(IParseTree tree);
    public virtual IList`1<ParseTreeMatch> FindAll(IParseTree tree, string xpath);
    public virtual ParseTreePatternMatcher get_Matcher();
    public virtual string get_Pattern();
    public virtual int get_PatternRuleIndex();
    public virtual IParseTree get_PatternTree();
}
internal class Antlr4.Runtime.Tree.Pattern.ParseTreePatternMatcher : object {
    private Lexer lexer;
    private Parser parser;
    protected internal string start;
    protected internal string stop;
    protected internal string escape;
    [NotNullAttribute]
public Lexer Lexer { get; }
    [NotNullAttribute]
public Parser Parser { get; }
    public ParseTreePatternMatcher(Lexer lexer, Parser parser);
    public virtual void SetDelimiters(string start, string stop, string escapeLeft);
    public virtual bool Matches(IParseTree tree, string pattern, int patternRuleIndex);
    public virtual bool Matches(IParseTree tree, ParseTreePattern pattern);
    public virtual ParseTreeMatch Match(IParseTree tree, string pattern, int patternRuleIndex);
    public virtual ParseTreeMatch Match(IParseTree tree, ParseTreePattern pattern);
    public virtual ParseTreePattern Compile(string pattern, int patternRuleIndex);
    public virtual Lexer get_Lexer();
    public virtual Parser get_Parser();
    protected internal virtual IParseTree MatchImpl(IParseTree tree, IParseTree patternTree, MultiMap`2<string, IParseTree> labels);
    protected internal virtual RuleTagToken GetRuleTagToken(IParseTree t);
    public virtual IList`1<IToken> Tokenize(string pattern);
    internal virtual IList`1<Chunk> Split(string pattern);
}
internal class Antlr4.Runtime.Tree.Pattern.RuleTagToken : object {
    private string ruleName;
    private int bypassTokenType;
    private string label;
    [NotNullAttribute]
public string RuleName { get; }
    [NullableAttribute]
public string Label { get; }
    public int Channel { get; }
    public string Text { get; }
    public int Type { get; }
    public int Line { get; }
    public int Column { get; }
    public int TokenIndex { get; }
    public int StartIndex { get; }
    public int StopIndex { get; }
    public ITokenSource TokenSource { get; }
    public ICharStream InputStream { get; }
    public RuleTagToken(string ruleName, int bypassTokenType);
    public RuleTagToken(string ruleName, int bypassTokenType, string label);
    public string get_RuleName();
    public string get_Label();
    public virtual int get_Channel();
    public virtual string get_Text();
    public virtual int get_Type();
    public virtual int get_Line();
    public virtual int get_Column();
    public virtual int get_TokenIndex();
    public virtual int get_StartIndex();
    public virtual int get_StopIndex();
    public virtual ITokenSource get_TokenSource();
    public virtual ICharStream get_InputStream();
    public virtual string ToString();
}
internal class Antlr4.Runtime.Tree.Pattern.TagChunk : Chunk {
    private string tag;
    private string label;
    [NotNullAttribute]
public string Tag { get; }
    [NullableAttribute]
public string Label { get; }
    public TagChunk(string tag);
    public TagChunk(string label, string tag);
    public string get_Tag();
    public string get_Label();
    public virtual string ToString();
}
internal class Antlr4.Runtime.Tree.Pattern.TextChunk : Chunk {
    [NotNullAttribute]
private string text;
    [NotNullAttribute]
public string Text { get; }
    public TextChunk(string text);
    public string get_Text();
    public virtual string ToString();
}
internal class Antlr4.Runtime.Tree.Pattern.TokenTagToken : CommonToken {
    [NotNullAttribute]
private string tokenName;
    [NullableAttribute]
private string label;
    [NotNullAttribute]
public string TokenName { get; }
    [NullableAttribute]
public string Label { get; }
    public string Text { get; }
    public TokenTagToken(string tokenName, int type);
    public TokenTagToken(string tokenName, int type, string label);
    public string get_TokenName();
    public string get_Label();
    public virtual string get_Text();
    public virtual string ToString();
}
internal class Antlr4.Runtime.Tree.TerminalNodeImpl : object {
    private IToken _symbol;
    private IRuleNode _parent;
    public IToken Symbol { get; }
    public IRuleNode Parent { get; public set; }
    private IParseTree Antlr4.Runtime.Tree.IParseTree.Parent { get; }
    private ITree Antlr4.Runtime.Tree.ITree.Parent { get; }
    public IToken Payload { get; }
    private object Antlr4.Runtime.Tree.ITree.Payload { get; }
    public Interval SourceInterval { get; }
    public int ChildCount { get; }
    public TerminalNodeImpl(IToken symbol);
    public virtual IParseTree GetChild(int i);
    private sealed virtual override ITree Antlr4.Runtime.Tree.ITree.GetChild(int i);
    public virtual IToken get_Symbol();
    public virtual IRuleNode get_Parent();
    public virtual void set_Parent(IRuleNode value);
    private sealed virtual override IParseTree Antlr4.Runtime.Tree.IParseTree.get_Parent();
    private sealed virtual override ITree Antlr4.Runtime.Tree.ITree.get_Parent();
    public virtual IToken get_Payload();
    private sealed virtual override object Antlr4.Runtime.Tree.ITree.get_Payload();
    public virtual Interval get_SourceInterval();
    public virtual int get_ChildCount();
    public virtual T Accept(IParseTreeVisitor`1<T> visitor);
    public virtual string GetText();
    public virtual string ToStringTree(Parser parser);
    public virtual string ToString();
    public virtual string ToStringTree();
}
internal class Antlr4.Runtime.Tree.Trees : object {
    public static string ToStringTree(ITree t);
    public static string ToStringTree(ITree t, Parser recog);
    public static string ToStringTree(ITree t, IList`1<string> ruleNames);
    public static string GetNodeText(ITree t, Parser recog);
    public static string GetNodeText(ITree t, IList`1<string> ruleNames);
    public static IList`1<ITree> GetChildren(ITree t);
    public static IList`1<ITree> GetAncestors(ITree t);
    public static ICollection`1<IParseTree> FindAllTokenNodes(IParseTree t, int ttype);
    public static ICollection`1<IParseTree> FindAllRuleNodes(IParseTree t, int ruleIndex);
    public static IList`1<IParseTree> FindAllNodes(IParseTree t, int index, bool findTokens);
    private static void _findAllNodes(IParseTree t, int index, bool findTokens, IList`1<IParseTree> nodes);
    public static IList`1<IParseTree> Descendants(IParseTree t);
}
internal class Antlr4.Runtime.Tree.Xpath.XPath : object {
    public static string Wildcard;
    public static string Not;
    protected internal string path;
    protected internal XPathElement[] elements;
    protected internal Parser parser;
    public XPath(Parser parser, string path);
    public virtual XPathElement[] Split(string path);
    protected internal virtual XPathElement GetXPathElement(IToken wordToken, bool anywhere);
    public static ICollection`1<IParseTree> FindAll(IParseTree tree, string xpath, Parser parser);
    public virtual ICollection`1<IParseTree> Evaluate(IParseTree t);
}
internal abstract class Antlr4.Runtime.Tree.Xpath.XPathElement : object {
    protected internal string nodeName;
    protected internal bool invert;
    public XPathElement(string nodeName);
    public abstract virtual ICollection`1<IParseTree> Evaluate(IParseTree t);
    public virtual string ToString();
}
internal class Antlr4.Runtime.Tree.Xpath.XPathLexerErrorListener : object {
    public virtual void SyntaxError(TextWriter output, IRecognizer recognizer, int offendingSymbol, int line, int charPositionInLine, string msg, RecognitionException e);
}
internal class Antlr4.Runtime.Tree.Xpath.XPathRuleAnywhereElement : XPathElement {
    protected internal int ruleIndex;
    public XPathRuleAnywhereElement(string ruleName, int ruleIndex);
    public virtual ICollection`1<IParseTree> Evaluate(IParseTree t);
}
internal class Antlr4.Runtime.Tree.Xpath.XPathRuleElement : XPathElement {
    protected internal int ruleIndex;
    public XPathRuleElement(string ruleName, int ruleIndex);
    public virtual ICollection`1<IParseTree> Evaluate(IParseTree t);
}
internal class Antlr4.Runtime.Tree.Xpath.XPathTokenAnywhereElement : XPathElement {
    protected internal int tokenType;
    public XPathTokenAnywhereElement(string tokenName, int tokenType);
    public virtual ICollection`1<IParseTree> Evaluate(IParseTree t);
}
internal class Antlr4.Runtime.Tree.Xpath.XPathTokenElement : XPathElement {
    protected internal int tokenType;
    public XPathTokenElement(string tokenName, int tokenType);
    public virtual ICollection`1<IParseTree> Evaluate(IParseTree t);
}
internal class Antlr4.Runtime.Tree.Xpath.XPathWildcardAnywhereElement : XPathElement {
    public virtual ICollection`1<IParseTree> Evaluate(IParseTree t);
}
internal class Antlr4.Runtime.Tree.Xpath.XPathWildcardElement : XPathElement {
    public virtual ICollection`1<IParseTree> Evaluate(IParseTree t);
}
internal class Antlr4.Runtime.UnbufferedCharStream : object {
    protected internal Int32[] data;
    protected internal int n;
    protected internal int p;
    protected internal int numMarkers;
    protected internal int lastChar;
    protected internal int lastCharBufferStart;
    protected internal int currentCharIndex;
    protected internal TextReader input;
    public string name;
    public int Index { get; }
    public int Size { get; }
    public string SourceName { get; }
    protected internal int BufferStartIndex { get; }
    public UnbufferedCharStream(int bufferSize);
    public UnbufferedCharStream(Stream input);
    public UnbufferedCharStream(TextReader input);
    public UnbufferedCharStream(Stream input, int bufferSize);
    public UnbufferedCharStream(TextReader input, int bufferSize);
    public virtual void Consume();
    protected internal virtual void Sync(int want);
    protected internal virtual int Fill(int n);
    protected internal virtual int NextChar();
    protected internal virtual void Add(int c);
    public virtual int LA(int i);
    public virtual int Mark();
    public virtual void Release(int marker);
    public virtual int get_Index();
    public virtual void Seek(int index);
    public virtual int get_Size();
    public virtual string get_SourceName();
    public virtual string GetText(Interval interval);
    protected internal int get_BufferStartIndex();
}
internal class Antlr4.Runtime.UnbufferedTokenStream : object {
    private ITokenSource _tokenSource;
    protected internal IToken[] tokens;
    protected internal int n;
    protected internal int p;
    protected internal int numMarkers;
    protected internal IToken lastToken;
    protected internal IToken lastTokenBufferStart;
    protected internal int currentTokenIndex;
    public ITokenSource TokenSource { get; public set; }
    public int Index { get; }
    public int Size { get; }
    public string SourceName { get; }
    public UnbufferedTokenStream(ITokenSource tokenSource);
    public UnbufferedTokenStream(ITokenSource tokenSource, int bufferSize);
    public virtual IToken Get(int i);
    public virtual IToken LT(int i);
    public virtual int LA(int i);
    public virtual ITokenSource get_TokenSource();
    public virtual void set_TokenSource(ITokenSource value);
    public virtual string GetText();
    public virtual string GetText(RuleContext ctx);
    public virtual string GetText(IToken start, IToken stop);
    public virtual void Consume();
    protected internal virtual void Sync(int want);
    protected internal virtual int Fill(int n);
    protected internal virtual void Add(IToken t);
    public virtual int Mark();
    public virtual void Release(int marker);
    public virtual int get_Index();
    public virtual void Seek(int index);
    public virtual int get_Size();
    public virtual string get_SourceName();
    public virtual string GetText(Interval interval);
    protected internal int GetBufferStartIndex();
}
internal class Antlr4.Runtime.Vocabulary : object {
    private static String[] EmptyNames;
    [NotNullAttribute]
public static Vocabulary EmptyVocabulary;
    [NotNullAttribute]
private String[] literalNames;
    [NotNullAttribute]
private String[] symbolicNames;
    [NotNullAttribute]
private String[] displayNames;
    private int maxTokenType;
    public Vocabulary(String[] literalNames, String[] symbolicNames);
    public Vocabulary(String[] literalNames, String[] symbolicNames, String[] displayNames);
    private static Vocabulary();
    public virtual int getMaxTokenType();
    public virtual string GetLiteralName(int tokenType);
    public virtual string GetSymbolicName(int tokenType);
    public virtual string GetDisplayName(int tokenType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Azure.Core.Diagnostics.AzureEventSource : EventSource {
    private static string SharedDataKey;
    private static HashSet`1<string> NamesInUse;
    private static String[] MainEventSourceTraits;
    private static AzureEventSource();
    protected AzureEventSource(string eventSourceName);
    private static string DeduplicateName(string eventSourceName);
}
internal class HdrHistogram.Encoding.HistogramEncoderV2 : object {
    public static HistogramEncoderV2 Instance;
    private static HistogramEncoderV2();
    public sealed virtual int Encode(IRecordedData data, ByteBuffer buffer);
    private static int FillBufferFromCountsArray(ByteBuffer buffer, IRecordedData data);
    private static long GetCountAtIndex(int idx, IRecordedData data);
}
internal interface HdrHistogram.Encoding.IEncoder {
    public abstract virtual int Encode(IRecordedData data, ByteBuffer buffer);
}
internal interface HdrHistogram.Encoding.IHeader {
    public int Cookie { get; }
    public int PayloadLengthInBytes { get; }
    public int NormalizingIndexOffset { get; }
    public int NumberOfSignificantValueDigits { get; }
    public long LowestTrackableUnitValue { get; }
    public long HighestTrackableValue { get; }
    public double IntegerToDoubleValueConversionRatio { get; }
    public int CapacityEstimateExcess { get; }
    public abstract virtual int get_Cookie();
    public abstract virtual int get_PayloadLengthInBytes();
    public abstract virtual int get_NormalizingIndexOffset();
    public abstract virtual int get_NumberOfSignificantValueDigits();
    public abstract virtual long get_LowestTrackableUnitValue();
    public abstract virtual long get_HighestTrackableValue();
    public abstract virtual double get_IntegerToDoubleValueConversionRatio();
    public abstract virtual int get_CapacityEstimateExcess();
}
internal interface HdrHistogram.Encoding.IRecordedData {
    public int Cookie { get; }
    public int NormalizingIndexOffset { get; }
    public int NumberOfSignificantValueDigits { get; }
    public long LowestDiscernibleValue { get; }
    public long HighestTrackableValue { get; }
    public double IntegerToDoubleValueConversionRatio { get; }
    public Int64[] Counts { get; }
    public abstract virtual int get_Cookie();
    public abstract virtual int get_NormalizingIndexOffset();
    public abstract virtual int get_NumberOfSignificantValueDigits();
    public abstract virtual long get_LowestDiscernibleValue();
    public abstract virtual long get_HighestTrackableValue();
    public abstract virtual double get_IntegerToDoubleValueConversionRatio();
    public abstract virtual Int64[] get_Counts();
}
internal class HdrHistogram.Encoding.RecordedData : object {
    [CompilerGeneratedAttribute]
private int <Cookie>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NormalizingIndexOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfSignificantValueDigits>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LowestDiscernibleValue>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HighestTrackableValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <IntegerToDoubleValueConversionRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private Int64[] <Counts>k__BackingField;
    public int Cookie { get; }
    public int NormalizingIndexOffset { get; }
    public int NumberOfSignificantValueDigits { get; }
    public long LowestDiscernibleValue { get; }
    public long HighestTrackableValue { get; }
    public double IntegerToDoubleValueConversionRatio { get; }
    public Int64[] Counts { get; }
    public RecordedData(int cookie, int normalizingIndexOffset, int numberOfSignificantValueDigits, long lowestDiscernibleValue, long highestTrackableValue, double integerToDoubleValueConversionRatio, Int64[] counts);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Cookie();
    [CompilerGeneratedAttribute]
public sealed virtual int get_NormalizingIndexOffset();
    [CompilerGeneratedAttribute]
public sealed virtual int get_NumberOfSignificantValueDigits();
    [CompilerGeneratedAttribute]
public sealed virtual long get_LowestDiscernibleValue();
    [CompilerGeneratedAttribute]
public sealed virtual long get_HighestTrackableValue();
    [CompilerGeneratedAttribute]
public sealed virtual double get_IntegerToDoubleValueConversionRatio();
    [CompilerGeneratedAttribute]
public sealed virtual Int64[] get_Counts();
}
internal class HdrHistogram.Encoding.V0Header : object {
    [CompilerGeneratedAttribute]
private int <Cookie>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PayloadLengthInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NormalizingIndexOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfSignificantValueDigits>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LowestTrackableUnitValue>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HighestTrackableValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <IntegerToDoubleValueConversionRatio>k__BackingField;
    public int Cookie { get; }
    public int PayloadLengthInBytes { get; }
    public int NormalizingIndexOffset { get; }
    public int NumberOfSignificantValueDigits { get; }
    public long LowestTrackableUnitValue { get; }
    public long HighestTrackableValue { get; }
    public double IntegerToDoubleValueConversionRatio { get; }
    public int CapacityEstimateExcess { get; }
    public V0Header(int cookie, ByteBuffer buffer);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Cookie();
    [CompilerGeneratedAttribute]
public sealed virtual int get_PayloadLengthInBytes();
    [CompilerGeneratedAttribute]
public sealed virtual int get_NormalizingIndexOffset();
    [CompilerGeneratedAttribute]
public sealed virtual int get_NumberOfSignificantValueDigits();
    [CompilerGeneratedAttribute]
public sealed virtual long get_LowestTrackableUnitValue();
    [CompilerGeneratedAttribute]
public sealed virtual long get_HighestTrackableValue();
    [CompilerGeneratedAttribute]
public sealed virtual double get_IntegerToDoubleValueConversionRatio();
    public sealed virtual int get_CapacityEstimateExcess();
}
internal class HdrHistogram.Encoding.V1Header : object {
    [CompilerGeneratedAttribute]
private int <Cookie>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PayloadLengthInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NormalizingIndexOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfSignificantValueDigits>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LowestTrackableUnitValue>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HighestTrackableValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <IntegerToDoubleValueConversionRatio>k__BackingField;
    public int Cookie { get; }
    public int PayloadLengthInBytes { get; }
    public int NormalizingIndexOffset { get; }
    public int NumberOfSignificantValueDigits { get; }
    public long LowestTrackableUnitValue { get; }
    public long HighestTrackableValue { get; }
    public double IntegerToDoubleValueConversionRatio { get; }
    public int CapacityEstimateExcess { get; }
    public V1Header(int cookie, ByteBuffer buffer);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Cookie();
    [CompilerGeneratedAttribute]
public sealed virtual int get_PayloadLengthInBytes();
    [CompilerGeneratedAttribute]
public sealed virtual int get_NormalizingIndexOffset();
    [CompilerGeneratedAttribute]
public sealed virtual int get_NumberOfSignificantValueDigits();
    [CompilerGeneratedAttribute]
public sealed virtual long get_LowestTrackableUnitValue();
    [CompilerGeneratedAttribute]
public sealed virtual long get_HighestTrackableValue();
    [CompilerGeneratedAttribute]
public sealed virtual double get_IntegerToDoubleValueConversionRatio();
    public sealed virtual int get_CapacityEstimateExcess();
}
internal abstract class HdrHistogram.HistogramBase : object {
    private static Regex TagValidation;
    private static long _instanceIdSequencer;
    private int _subBucketHalfCountMagnitude;
    private int _unitMagnitude;
    private long _subBucketMask;
    private int _bucketIndexOffset;
    private long _maxValue;
    private long _minNonZeroValue;
    private string _tag;
    [CompilerGeneratedAttribute]
private long <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HighestTrackableValue>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LowestTrackableValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfSignificantValueDigits>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartTimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EndTimeStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BucketCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubBucketCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubBucketHalfCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CountsArrayLength>k__BackingField;
    public long InstanceId { get; }
    public long HighestTrackableValue { get; }
    public long LowestTrackableValue { get; }
    public int NumberOfSignificantValueDigits { get; }
    public long StartTimeStamp { get; public set; }
    public long EndTimeStamp { get; public set; }
    public string Tag { get; public set; }
    public long TotalCount { get; protected set; }
    public int BucketCount { get; }
    public int SubBucketCount { get; }
    internal int SubBucketHalfCount { get; }
    internal int CountsArrayLength { get; }
    protected int WordSizeInBytes { get; }
    protected long MaxAllowableCount { get; }
    protected HistogramBase(long lowestTrackableValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    protected HistogramBase(long instanceId, long lowestTrackableValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    private static HistogramBase();
    [CompilerGeneratedAttribute]
public long get_InstanceId();
    [CompilerGeneratedAttribute]
public long get_HighestTrackableValue();
    [CompilerGeneratedAttribute]
public long get_LowestTrackableValue();
    [CompilerGeneratedAttribute]
public int get_NumberOfSignificantValueDigits();
    [CompilerGeneratedAttribute]
public long get_StartTimeStamp();
    [CompilerGeneratedAttribute]
public void set_StartTimeStamp(long value);
    [CompilerGeneratedAttribute]
public long get_EndTimeStamp();
    [CompilerGeneratedAttribute]
public void set_EndTimeStamp(long value);
    public string get_Tag();
    public void set_Tag(string value);
    public abstract virtual long get_TotalCount();
    protected abstract virtual void set_TotalCount(long value);
    [CompilerGeneratedAttribute]
public int get_BucketCount();
    [CompilerGeneratedAttribute]
public int get_SubBucketCount();
    [CompilerGeneratedAttribute]
internal int get_SubBucketHalfCount();
    [CompilerGeneratedAttribute]
internal int get_CountsArrayLength();
    protected abstract virtual int get_WordSizeInBytes();
    protected abstract virtual long get_MaxAllowableCount();
    public abstract virtual HistogramBase Copy();
    public sealed virtual void RecordValue(long value);
    public sealed virtual void RecordValueWithCount(long value, long count);
    public sealed virtual void RecordValueWithExpectedInterval(long value, long expectedIntervalBetweenValueSamples);
    public void Reset();
    public virtual void Add(HistogramBase fromHistogram);
    public long SizeOfEquivalentValueRange(long value);
    public long LowestEquivalentValue(long value);
    public long MedianEquivalentValue(long value);
    public long NextNonEquivalentValue(long value);
    public long GetValueAtPercentile(double percentile);
    public long GetCountAtValue(long value);
    public IEnumerable`1<HistogramIterationValue> RecordedValues();
    public IEnumerable`1<HistogramIterationValue> AllValues();
    public int GetNeededByteBufferCapacity();
    public int Encode(ByteBuffer targetBuffer, IEncoder encoder);
    public bool HasOverflowed();
    public virtual int GetEstimatedFootprintInBytes();
    internal long GetCountAt(int bucketIndex, int subBucketIndex);
    internal long ValueFromIndex(int bucketIndex, int subBucketIndex);
    internal int FillCountsFromBuffer(ByteBuffer buffer, int length, int wordSizeInBytes);
    internal void EstablishInternalTackingValues(int lengthToCover);
    protected abstract virtual long GetCountAtIndex(int index);
    protected abstract virtual void SetCountAtIndex(int index, long value);
    protected abstract virtual void IncrementCountAtIndex(int index);
    protected abstract virtual void AddToCountAtIndex(int index, long addend);
    protected abstract virtual void ClearCounts();
    protected abstract virtual void CopyCountsInto(Int64[] target);
    private void UpdatedMaxValue(long value);
    private void UpdateMinNonZeroValue(long value);
    private void ResetMinNonZeroValue(long minNonZeroValue);
    private void ResetMaxValue(long maxValue);
    private void RecordSingleValue(long value);
    private void RecordValueWithCountAndExpectedInterval(long value, long count, long expectedIntervalBetweenValueSamples);
    private int GetNeededByteBufferCapacity(int relevantLength);
    private int GetBucketsNeededToCoverValue(long value);
    private int GetLengthForNumberOfBuckets(int numberOfBuckets);
    private int CountsArrayIndex(int bucketIndex, int subBucketIndex);
    private int GetBucketIndex(long value);
    private static int GetBucketIndex(long value, long subBucketMask, int bucketIndexOffset);
    private int GetSubBucketIndex(long value, int bucketIndex);
    private long ValueFromIndex(int index);
    private IRecordedData GetData();
    private Int64[] GetRelevantCounts();
    [CompilerGeneratedAttribute]
private void <FillCountsFromBuffer>b__73_0(int idx, long count);
}
[ExtensionAttribute]
internal static class HdrHistogram.HistogramEncoding : object {
    private static int UncompressedDoubleHistogramEncodingCookie;
    private static int CompressedDoubleHistogramEncodingCookie;
    private static int EncodingCookieBaseV2;
    private static int EncodingCookieBaseV1;
    private static int EncodingCookieBaseV0;
    private static int CompressedEncodingCookieBaseV0;
    private static int CompressedEncodingCookieBaseV1;
    private static int CompressedEncodingCookieBaseV2;
    private static int EncodingHeaderSizeV0;
    private static int EncodingHeaderSizeV1;
    private static int EncodingHeaderSizeV2;
    private static int V2MaxWordSizeInBytes;
    private static int Rfc1950HeaderLength;
    private static Type[] HistogramClassConstructorArgsTypes;
    private static HistogramEncoding();
    public static HistogramBase DecodeFromCompressedByteBuffer(ByteBuffer buffer, long minBarForHighestTrackableValue);
    public static HistogramBase DecodeFromByteBuffer(ByteBuffer buffer, long minBarForHighestTrackableValue, DeflateStream decompressor);
    [ExtensionAttribute]
public static int EncodeIntoCompressedByteBuffer(HistogramBase source, ByteBuffer targetBuffer);
    [ExtensionAttribute]
public static int GetEncodingCookie(HistogramBase histogram);
    private static IHeader ReadHeader(ByteBuffer buffer);
    private static HistogramBase Create(Type histogramType, IHeader header, long minBarForHighestTrackableValue);
    private static ByteBuffer PayLoadSourceBuffer(ByteBuffer buffer, DeflateStream decompressor, int expectedCapacity, IHeader header);
    private static int GetHeaderSize(int cookie);
    private static int GetCookieBase(int cookie);
    private static int GetCompressedEncodingCookie();
    private static int GetWordSizeInBytesFromCookie(int cookie);
    private static Type GetBestTypeForWordSize(int wordSizeInBytes);
}
[ExtensionAttribute]
internal static class HdrHistogram.HistogramExtensions : object {
    [ExtensionAttribute]
public static long GetMaxValue(HistogramBase histogram);
    [ExtensionAttribute]
public static double GetMean(HistogramBase histogram);
    [ExtensionAttribute]
public static double GetStdDeviation(HistogramBase histogram);
    [ExtensionAttribute]
public static long HighestEquivalentValue(HistogramBase histogram, long value);
    [ExtensionAttribute]
public static void CopyInto(HistogramBase source, HistogramBase targetHistogram);
    [ExtensionAttribute]
public static IEnumerable`1<HistogramIterationValue> Percentiles(HistogramBase histogram, int percentileTicksPerHalfDistance);
    [ExtensionAttribute]
public static void OutputPercentileDistribution(HistogramBase histogram, TextWriter writer, int percentileTicksPerHalfDistance, double outputValueUnitScalingRatio, bool useCsvFormat);
    [ExtensionAttribute]
public static void Record(IRecorder recorder, Action action);
    [ExtensionAttribute]
public static IDisposable RecordScope(IRecorder recorder);
}
internal abstract class HdrHistogram.HistogramFactory : object {
    [CompilerGeneratedAttribute]
private long <LowestTrackableValue>k__BackingField;
    [CompilerGeneratedAttribute]
private long <HighestTrackableValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfSignificantValueDigits>k__BackingField;
    protected long LowestTrackableValue { get; protected set; }
    protected long HighestTrackableValue { get; protected set; }
    protected int NumberOfSignificantValueDigits { get; protected set; }
    [CompilerGeneratedAttribute]
protected long get_LowestTrackableValue();
    [CompilerGeneratedAttribute]
protected void set_LowestTrackableValue(long value);
    [CompilerGeneratedAttribute]
protected long get_HighestTrackableValue();
    [CompilerGeneratedAttribute]
protected void set_HighestTrackableValue(long value);
    [CompilerGeneratedAttribute]
protected int get_NumberOfSignificantValueDigits();
    [CompilerGeneratedAttribute]
protected void set_NumberOfSignificantValueDigits(int value);
    public abstract virtual HistogramFactory WithThreadSafeWrites();
    public abstract virtual RecorderFactory WithThreadSafeReads();
    public abstract virtual HistogramBase Create(long lowestDiscernibleValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    public abstract virtual HistogramBase Create(long instanceId, long lowestDiscernibleValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    public HistogramFactory WithValuesFrom(long lowestDiscernibleValue);
    public HistogramFactory WithValuesUpTo(long highestTrackableValue);
    public HistogramFactory WithPrecisionOf(int numberOfSignificantValueDigits);
    public HistogramBase Create();
    public static HistogramFactory With64BitBucketSize();
    public static HistogramFactory With32BitBucketSize();
    public static HistogramFactory With16BitBucketSize();
}
internal class HdrHistogram.HistogramFactoryDelegate : MulticastDelegate {
    public HistogramFactoryDelegate(object object, IntPtr method);
    public virtual HistogramBase Invoke(long instanceId, long lowestDiscernibleValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    public virtual IAsyncResult BeginInvoke(long instanceId, long lowestDiscernibleValue, long highestTrackableValue, int numberOfSignificantValueDigits, AsyncCallback callback, object object);
    public virtual HistogramBase EndInvoke(IAsyncResult result);
}
internal class HdrHistogram.HistogramLogReader : object {
    private static Regex StartTimeMatcher;
    private static Regex BaseTimeMatcher;
    private static Regex UntaggedLogLineMatcher;
    private static Regex TaggedLogLineMatcher;
    private TextReader _log;
    private double _startTimeInSeconds;
    public HistogramLogReader(Stream inputStream);
    private static HistogramLogReader();
    public static IEnumerable`1<HistogramBase> Read(Stream inputStream);
    [IteratorStateMachineAttribute("HdrHistogram.HistogramLogReader/<ReadHistograms>d__8")]
public IEnumerable`1<HistogramBase> ReadHistograms();
    [IteratorStateMachineAttribute("HdrHistogram.HistogramLogReader/<HdrHistogram-IHistogramLogV1Reader-ReadHistograms>d__9")]
private sealed virtual override IEnumerable`1<HistogramBase> HdrHistogram.IHistogramLogV1Reader.ReadHistograms();
    public DateTime GetStartTime();
    private static HistogramBase DecodeHistogram(ByteBuffer buffer, long minBarForHighestTrackableValue);
    [IteratorStateMachineAttribute("HdrHistogram.HistogramLogReader/<ReadLines>d__12")]
private IEnumerable`1<string> ReadLines();
    private static bool IsComment(string line);
    private static bool IsStartTime(string line);
    private static bool IsBaseTime(string line);
    private static bool IsLegend(string line);
    private static bool IsV1Legend(string line);
    private static string ParseTag(string value);
    private static double ParseStartTime(string line);
    private static double ParseBaseTime(string line);
    private static double ParseDouble(Match match, string group);
    public sealed virtual void Dispose();
}
internal class HdrHistogram.HistogramLogWriter : object {
    private static string HistogramLogFormatVersion;
    private TextWriter _log;
    private bool _hasHeaderWritten;
    private int _isDisposed;
    public HistogramLogWriter(Stream outputStream);
    public static void Write(Stream outputStream, DateTime startTime, HistogramBase[] histograms);
    public void Write(DateTime startTime, HistogramBase[] histograms);
    public void Append(HistogramBase histogram);
    private void WriteLogFormatVersion();
    private void WriteStartTime(DateTime startTimeWritten);
    private void WriteLegend();
    private void WriteHistogram(HistogramBase histogram);
    public sealed virtual void Dispose();
}
internal interface HdrHistogram.IHistogramLogV1Reader {
    public abstract virtual IEnumerable`1<HistogramBase> ReadHistograms();
}
internal class HdrHistogram.IntConcurrentHistogram : HistogramBase {
    private WriterReaderPhaser _wrp;
    private AtomicIntArray _counts;
    private long _totalCount;
    public long TotalCount { get; protected set; }
    protected int WordSizeInBytes { get; }
    protected long MaxAllowableCount { get; }
    public IntConcurrentHistogram(long lowestTrackableValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    public IntConcurrentHistogram(long instanceId, long lowestTrackableValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    public virtual long get_TotalCount();
    protected virtual void set_TotalCount(long value);
    protected virtual int get_WordSizeInBytes();
    protected virtual long get_MaxAllowableCount();
    public virtual HistogramBase Copy();
    protected virtual long GetCountAtIndex(int index);
    protected virtual void SetCountAtIndex(int index, long value);
    protected virtual void IncrementCountAtIndex(int index);
    protected virtual void AddToCountAtIndex(int index, long addend);
    protected virtual void ClearCounts();
    protected virtual void CopyCountsInto(Int64[] target);
}
internal class HdrHistogram.IntHistogram : HistogramBase {
    private Int32[] _counts;
    private long _totalCount;
    public long TotalCount { get; protected set; }
    protected int WordSizeInBytes { get; }
    protected long MaxAllowableCount { get; }
    public IntHistogram(long highestTrackableValue, int numberOfSignificantValueDigits);
    public IntHistogram(long lowestTrackableValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    public IntHistogram(long instanceId, long lowestTrackableValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    public virtual long get_TotalCount();
    protected virtual void set_TotalCount(long value);
    protected virtual int get_WordSizeInBytes();
    protected virtual long get_MaxAllowableCount();
    public virtual HistogramBase Copy();
    protected virtual long GetCountAtIndex(int index);
    protected virtual void SetCountAtIndex(int index, long value);
    protected virtual void IncrementCountAtIndex(int index);
    protected virtual void AddToCountAtIndex(int index, long addend);
    protected virtual void ClearCounts();
    protected virtual void CopyCountsInto(Int64[] target);
}
internal interface HdrHistogram.IRecorder {
    public abstract virtual void RecordValue(long value);
    public abstract virtual void RecordValueWithCount(long value, long count);
    public abstract virtual void RecordValueWithExpectedInterval(long value, long expectedIntervalBetweenValueSamples);
}
internal abstract class HdrHistogram.Iteration.AbstractHistogramEnumerator : object {
    private long _savedHistogramTotalRawCount;
    private HistogramIterationValue _currentIterationValue;
    private int _nextBucketIndex;
    private int _nextSubBucketIndex;
    private long _prevValueIteratedTo;
    private long _totalCountToPrevIndex;
    private long _totalValueToCurrentIndex;
    private bool _freshSubBucket;
    private long _currentValueAtIndex;
    private long _nextValueAtIndex;
    [CompilerGeneratedAttribute]
private HistogramBase <SourceHistogram>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ArrayTotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentBucketIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentSubBucketIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCountToCurrentIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CountAtThisValue>k__BackingField;
    [CompilerGeneratedAttribute]
private HistogramIterationValue <Current>k__BackingField;
    protected HistogramBase SourceHistogram { get; }
    protected long ArrayTotalCount { get; }
    protected int CurrentBucketIndex { get; private set; }
    protected int CurrentSubBucketIndex { get; private set; }
    protected long TotalCountToCurrentIndex { get; private set; }
    protected long CountAtThisValue { get; private set; }
    public HistogramIterationValue Current { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    protected AbstractHistogramEnumerator(HistogramBase histogram);
    [CompilerGeneratedAttribute]
protected HistogramBase get_SourceHistogram();
    [CompilerGeneratedAttribute]
protected long get_ArrayTotalCount();
    [CompilerGeneratedAttribute]
protected int get_CurrentBucketIndex();
    [CompilerGeneratedAttribute]
private void set_CurrentBucketIndex(int value);
    [CompilerGeneratedAttribute]
protected int get_CurrentSubBucketIndex();
    [CompilerGeneratedAttribute]
private void set_CurrentSubBucketIndex(int value);
    [CompilerGeneratedAttribute]
protected long get_TotalCountToCurrentIndex();
    [CompilerGeneratedAttribute]
private void set_TotalCountToCurrentIndex(long value);
    [CompilerGeneratedAttribute]
protected long get_CountAtThisValue();
    [CompilerGeneratedAttribute]
private void set_CountAtThisValue(long value);
    [CompilerGeneratedAttribute]
public sealed virtual HistogramIterationValue get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(HistogramIterationValue value);
    protected virtual bool HasNext();
    protected abstract virtual void IncrementIterationLevel();
    protected abstract virtual bool ReachedIterationLevel();
    protected virtual double GetPercentileIteratedTo();
    protected virtual long GetValueIteratedTo();
    private HistogramIterationValue Next();
    private bool ExhaustedSubBuckets();
    private void IncrementSubBucket();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class HdrHistogram.Iteration.AllValueEnumerable : object {
    private HistogramBase _histogram;
    public AllValueEnumerable(HistogramBase histogram);
    public sealed virtual IEnumerator`1<HistogramIterationValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class HdrHistogram.Iteration.AllValuesEnumerator : AbstractHistogramEnumerator {
    private int _visitedSubBucketIndex;
    private int _visitedBucketIndex;
    public AllValuesEnumerator(HistogramBase histogram);
    protected virtual void IncrementIterationLevel();
    protected virtual bool ReachedIterationLevel();
}
internal class HdrHistogram.Iteration.HistogramIterationValue : object {
    [CompilerGeneratedAttribute]
private long <ValueIteratedTo>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ValueIteratedFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CountAtValueIteratedTo>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CountAddedInThisIterationStep>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalCountToThisValue>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalValueToThisValue>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Percentile>k__BackingField;
    [CompilerGeneratedAttribute]
private double <PercentileLevelIteratedTo>k__BackingField;
    public long ValueIteratedTo { get; private set; }
    public long ValueIteratedFrom { get; private set; }
    public long CountAtValueIteratedTo { get; private set; }
    public long CountAddedInThisIterationStep { get; private set; }
    public long TotalCountToThisValue { get; private set; }
    public long TotalValueToThisValue { get; private set; }
    public double Percentile { get; private set; }
    public double PercentileLevelIteratedTo { get; private set; }
    [CompilerGeneratedAttribute]
public long get_ValueIteratedTo();
    [CompilerGeneratedAttribute]
private void set_ValueIteratedTo(long value);
    [CompilerGeneratedAttribute]
public long get_ValueIteratedFrom();
    [CompilerGeneratedAttribute]
private void set_ValueIteratedFrom(long value);
    [CompilerGeneratedAttribute]
public long get_CountAtValueIteratedTo();
    [CompilerGeneratedAttribute]
private void set_CountAtValueIteratedTo(long value);
    [CompilerGeneratedAttribute]
public long get_CountAddedInThisIterationStep();
    [CompilerGeneratedAttribute]
private void set_CountAddedInThisIterationStep(long value);
    [CompilerGeneratedAttribute]
public long get_TotalCountToThisValue();
    [CompilerGeneratedAttribute]
private void set_TotalCountToThisValue(long value);
    [CompilerGeneratedAttribute]
public long get_TotalValueToThisValue();
    [CompilerGeneratedAttribute]
private void set_TotalValueToThisValue(long value);
    [CompilerGeneratedAttribute]
public double get_Percentile();
    [CompilerGeneratedAttribute]
private void set_Percentile(double value);
    [CompilerGeneratedAttribute]
public double get_PercentileLevelIteratedTo();
    [CompilerGeneratedAttribute]
private void set_PercentileLevelIteratedTo(double value);
    public bool IsLastValue();
    internal void Set(long valueIteratedTo, long valueIteratedFrom, long countAtValueIteratedTo, long countInThisIterationStep, long totalCountToThisValue, long totalValueToThisValue, double percentile, double percentileLevelIteratedTo);
    public virtual string ToString();
}
internal class HdrHistogram.Iteration.PercentileEnumerable : object {
    private HistogramBase _histogram;
    private int _percentileTicksPerHalfDistance;
    public PercentileEnumerable(HistogramBase histogram, int percentileTicksPerHalfDistance);
    public sealed virtual IEnumerator`1<HistogramIterationValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class HdrHistogram.Iteration.PercentileEnumerator : AbstractHistogramEnumerator {
    private int _percentileTicksPerHalfDistance;
    private double _percentileLevelToIterateTo;
    private bool _reachedLastRecordedValue;
    public PercentileEnumerator(HistogramBase histogram, int percentileTicksPerHalfDistance);
    protected virtual bool HasNext();
    protected virtual void IncrementIterationLevel();
    protected virtual bool ReachedIterationLevel();
    protected virtual double GetPercentileIteratedTo();
}
internal class HdrHistogram.Iteration.RecordedValuesEnumerable : object {
    private HistogramBase _histogram;
    public RecordedValuesEnumerable(HistogramBase histogram);
    public sealed virtual IEnumerator`1<HistogramIterationValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class HdrHistogram.Iteration.RecordedValuesEnumerator : AbstractHistogramEnumerator {
    private int _visitedSubBucketIndex;
    private int _visitedBucketIndex;
    public RecordedValuesEnumerator(HistogramBase histogram);
    protected virtual void IncrementIterationLevel();
    protected virtual bool ReachedIterationLevel();
}
internal class HdrHistogram.LongConcurrentHistogram : HistogramBase {
    private WriterReaderPhaser _wrp;
    private AtomicLongArray _counts;
    private long _totalCount;
    public long TotalCount { get; protected set; }
    protected int WordSizeInBytes { get; }
    protected long MaxAllowableCount { get; }
    public LongConcurrentHistogram(long lowestTrackableValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    public LongConcurrentHistogram(long instanceId, long lowestTrackableValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    public virtual long get_TotalCount();
    protected virtual void set_TotalCount(long value);
    protected virtual int get_WordSizeInBytes();
    protected virtual long get_MaxAllowableCount();
    public virtual HistogramBase Copy();
    protected virtual long GetCountAtIndex(int index);
    protected virtual void SetCountAtIndex(int index, long value);
    protected virtual void IncrementCountAtIndex(int index);
    protected virtual void AddToCountAtIndex(int index, long addend);
    protected virtual void ClearCounts();
    protected virtual void CopyCountsInto(Int64[] target);
}
internal class HdrHistogram.LongHistogram : HistogramBase {
    private Int64[] _counts;
    private long _totalCount;
    public long TotalCount { get; protected set; }
    protected int WordSizeInBytes { get; }
    protected long MaxAllowableCount { get; }
    public LongHistogram(long highestTrackableValue, int numberOfSignificantValueDigits);
    public LongHistogram(long lowestTrackableValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    public LongHistogram(long instanceId, long lowestTrackableValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    public virtual long get_TotalCount();
    protected virtual void set_TotalCount(long value);
    protected virtual int get_WordSizeInBytes();
    protected virtual long get_MaxAllowableCount();
    public virtual HistogramBase Copy();
    protected virtual long GetCountAtIndex(int index);
    protected virtual void SetCountAtIndex(int index, long value);
    protected virtual void IncrementCountAtIndex(int index);
    protected virtual void AddToCountAtIndex(int index, long addend);
    protected virtual void ClearCounts();
    protected virtual void CopyCountsInto(Int64[] target);
}
internal class HdrHistogram.Output.CsvOutputFormatter : object {
    private string _percentileFormatString;
    private string _lastLinePercentileFormatString;
    private TextWriter _textWriter;
    private double _outputValueUnitScalingRatio;
    public CsvOutputFormatter(TextWriter textWriter, int significantDigits, double outputValueUnitScalingRatio);
    public sealed virtual void WriteHeader();
    public sealed virtual void WriteValue(HistogramIterationValue iterationValue);
    public sealed virtual void WriteFooter(HistogramBase histogram);
}
internal class HdrHistogram.Output.HgrmOutputFormatter : object {
    private TextWriter _printStream;
    private double _outputValueUnitScalingRatio;
    private string _percentileFormatString;
    private string _lastLinePercentileFormatString;
    private string _footerLine1FormatString;
    private string _footerLine2FormatString;
    private string _footerLine3FormatString;
    public HgrmOutputFormatter(TextWriter printStream, int significantDigits, double outputValueUnitScalingRatio);
    public sealed virtual void WriteHeader();
    public sealed virtual void WriteValue(HistogramIterationValue iterationValue);
    public sealed virtual void WriteFooter(HistogramBase histogram);
}
internal interface HdrHistogram.Output.IOutputFormatter {
    public abstract virtual void WriteHeader();
    public abstract virtual void WriteValue(HistogramIterationValue value);
    public abstract virtual void WriteFooter(HistogramBase histogram);
}
internal static class HdrHistogram.OutputScalingFactor : object {
    public static double None;
    public static double TimeStampToMicroseconds;
    public static double TimeStampToMilliseconds;
    public static double TimeStampToSeconds;
    private static OutputScalingFactor();
}
internal static class HdrHistogram.Persistence.CountsDecoder : object {
    private static IDictionary`2<int, ICountsDecoder> Decoders;
    private static CountsDecoder();
    public static ICountsDecoder GetDecoderForWordSize(int wordSize);
}
internal interface HdrHistogram.Persistence.ICountsDecoder {
    public int WordSize { get; }
    public abstract virtual int get_WordSize();
    public abstract virtual int ReadCounts(ByteBuffer sourceBuffer, int lengthInBytes, int maxIndex, Action`2<int, long> setCount);
}
internal class HdrHistogram.Persistence.IntCountsDecoder : SimpleCountsDecoder {
    public int WordSize { get; }
    public virtual int get_WordSize();
    protected virtual long ReadValue(ByteBuffer sourceBuffer);
}
internal class HdrHistogram.Persistence.LongCountsDecoder : SimpleCountsDecoder {
    public int WordSize { get; }
    public virtual int get_WordSize();
    protected virtual long ReadValue(ByteBuffer sourceBuffer);
}
internal class HdrHistogram.Persistence.ShortCountsDecoder : SimpleCountsDecoder {
    public int WordSize { get; }
    public virtual int get_WordSize();
    protected virtual long ReadValue(ByteBuffer sourceBuffer);
}
internal abstract class HdrHistogram.Persistence.SimpleCountsDecoder : object {
    public int WordSize { get; }
    public abstract virtual int get_WordSize();
    public sealed virtual int ReadCounts(ByteBuffer sourceBuffer, int lengthInBytes, int maxIndex, Action`2<int, long> setCount);
    protected abstract virtual long ReadValue(ByteBuffer sourceBuffer);
}
internal class HdrHistogram.Persistence.V2MaxWordSizeCountsDecoder : object {
    public int WordSize { get; }
    public sealed virtual int get_WordSize();
    public sealed virtual int ReadCounts(ByteBuffer sourceBuffer, int lengthInBytes, int maxIndex, Action`2<int, long> setCount);
}
internal class HdrHistogram.Recorder : object {
    private static long _instanceIdSequencer;
    private object _gate;
    private long _instanceId;
    private WriterReaderPhaser _recordingPhaser;
    private HistogramFactoryDelegate _histogramFactory;
    private HistogramBase _activeHistogram;
    private HistogramBase _inactiveHistogram;
    public Recorder(long lowestDiscernibleValue, long highestTrackableValue, int numberOfSignificantValueDigits, HistogramFactoryDelegate histogramFactory);
    private static Recorder();
    public sealed virtual void RecordValue(long value);
    public sealed virtual void RecordValueWithCount(long value, long count);
    public sealed virtual void RecordValueWithExpectedInterval(long value, long expectedIntervalBetweenValueSamples);
    public HistogramBase GetIntervalHistogram();
    public HistogramBase GetIntervalHistogram(HistogramBase histogramToRecycle);
    public void GetIntervalHistogramInto(HistogramBase targetHistogram);
    public void Reset();
    private void PerformIntervalSample();
    private void ValidateFitAsReplacementHistogram(HistogramBase replacementHistogram);
}
internal class HdrHistogram.ShortHistogram : HistogramBase {
    private Int16[] _counts;
    private long _totalCount;
    public long TotalCount { get; protected set; }
    protected int WordSizeInBytes { get; }
    protected long MaxAllowableCount { get; }
    public ShortHistogram(long highestTrackableValue, int numberOfSignificantValueDigits);
    public ShortHistogram(long lowestTrackableValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    public ShortHistogram(long instanceId, long lowestTrackableValue, long highestTrackableValue, int numberOfSignificantValueDigits);
    public virtual long get_TotalCount();
    protected virtual void set_TotalCount(long value);
    protected virtual int get_WordSizeInBytes();
    protected virtual long get_MaxAllowableCount();
    public virtual HistogramBase Copy();
    protected virtual long GetCountAtIndex(int index);
    protected virtual void SetCountAtIndex(int index, long value);
    protected virtual void IncrementCountAtIndex(int index);
    protected virtual void AddToCountAtIndex(int index, long addend);
    protected virtual void ClearCounts();
    protected virtual void CopyCountsInto(Int64[] target);
}
internal static class HdrHistogram.TimeStamp : object {
    public static long Seconds(long seconds);
    public static long Minutes(long minutes);
    public static long Hours(int hours);
}
[ExtensionAttribute]
internal static class HdrHistogram.Utilities.ArrayExtensions : object {
    [ExtensionAttribute]
public static bool IsSequenceEqual(T[] source, T[] other);
}
[DefaultMemberAttribute("Item")]
internal class HdrHistogram.Utilities.AtomicIntArray : object {
    private Int32[] _counts;
    public int Length { get; }
    public int Item { get; public set; }
    public AtomicIntArray(int arrayLength);
    public int get_Length();
    public int get_Item(int index);
    public void set_Item(int index, int value);
    public int IncrementAndGet(int index);
    public int AddAndGet(int index, int value);
    private void LazySet(int index, int value);
}
[DefaultMemberAttribute("Item")]
internal class HdrHistogram.Utilities.AtomicLongArray : object {
    private Int64[] _counts;
    public int Length { get; }
    public long Item { get; public set; }
    public AtomicLongArray(int arrayLength);
    public int get_Length();
    public long get_Item(int index);
    public void set_Item(int index, long value);
    public long IncrementAndGet(int index);
    public long AddAndGet(int index, long value);
    private void LazySet(int index, long value);
}
internal static class HdrHistogram.Utilities.Bitwise : object {
    private static Int32[] Lookup;
    private static Bitwise();
    public static int NumberOfLeadingZeros(long value);
    private static int NumberOfLeadingZerosLong(long value);
    private static int Log2(int i);
}
internal class HdrHistogram.Utilities.ByteBuffer : object {
    private Byte[] _internalBuffer;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Position { get; public set; }
    private ByteBuffer(int bufferCapacity);
    public static ByteBuffer Allocate(int bufferCapacity);
    public static ByteBuffer Allocate(Byte[] source);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    public int Capacity();
    public int Remaining();
    public int ReadFrom(Stream source, int length);
    public byte Get();
    public short GetShort();
    public int GetInt();
    public long GetLong();
    public double GetDouble();
    private static double Int64BitsToDouble(long value);
    private static long ToInt64(Byte[] value, int startIndex);
    private static long CheckedFromBytes(Byte[] value, int startIndex, int bytesToConvert);
    private static void CheckByteArgument(Byte[] value, int startIndex, int bytesRequired);
    private static long FromBytes(Byte[] buffer, int startIndex, int bytesToConvert);
    public void Put(byte value);
    public void PutInt(int value);
    public void PutInt(int index, int value);
    public void PutLong(long value);
    public void PutDouble(double value);
    internal Byte[] ToArray();
    internal void BlockCopy(Array src, int srcOffset, int dstOffset, int count);
    internal void BlockGet(Array target, int targetOffset, int sourceOffset, int count);
}
[ExtensionAttribute]
internal static class HdrHistogram.Utilities.ByteBufferExtensions : object {
    [ExtensionAttribute]
public static int CompressedCopy(ByteBuffer target, ByteBuffer source, int targetOffset);
    private static Byte[] Compress(Stream input);
}
internal static class HdrHistogram.Utilities.TypeHelper : object {
    public static ConstructorInfo GetConstructor(Type type, Type[] ctorArgTypes);
    private static bool IsParameterMatch(ConstructorInfo ctor, Type[] expectedParamters);
}
[ExtensionAttribute]
internal static class HdrHistogram.Utilities.UnixTimeExtensions : object {
    private static long EpochInTicks;
    [ExtensionAttribute]
public static double SecondsSinceUnixEpoch(DateTime source);
    [ExtensionAttribute]
public static long MillisecondsSinceUnixEpoch(DateTime source);
    [ExtensionAttribute]
public static DateTime ToDateFromSecondsSinceEpoch(double secondsSinceUnixEpoch);
    [ExtensionAttribute]
public static DateTime ToDateFromMillisecondsSinceEpoch(long millisecondsSinceUnixEpoch);
}
internal class HdrHistogram.Utilities.WriterReaderPhaser : object {
    private object _readerLock;
    private long _startEpoch;
    private long _evenEndEpoch;
    private long _oddEndEpoch;
    private static long GetAndIncrement(Int64& value);
    private static long GetAndSet(Int64& value, long newValue);
    private static void LazySet(Int64& value, long newValue);
    public long WriterCriticalSectionEnter();
    public void WriterCriticalSectionExit(long criticalValueAtEnter);
    public void ReaderLock();
    public void ReaderUnlock();
    public void FlipPhase(TimeSpan yieldPeriod);
    public void FlipPhase();
}
internal static class HdrHistogram.ZigZagEncoding : object {
    public static void PutLong(ByteBuffer buffer, long value);
    public static long GetLong(ByteBuffer buffer);
}
[GeneratedCodeAttribute("ANTLR", "4.7.2")]
internal interface IsqlListener {
    public abstract virtual void EnterProgram(ProgramContext context);
    public abstract virtual void ExitProgram(ProgramContext context);
    public abstract virtual void EnterSql_query(Sql_queryContext context);
    public abstract virtual void ExitSql_query(Sql_queryContext context);
    public abstract virtual void EnterSelect_clause(Select_clauseContext context);
    public abstract virtual void ExitSelect_clause(Select_clauseContext context);
    public abstract virtual void EnterTop_spec(Top_specContext context);
    public abstract virtual void ExitTop_spec(Top_specContext context);
    public abstract virtual void EnterSelection(SelectionContext context);
    public abstract virtual void ExitSelection(SelectionContext context);
    public abstract virtual void EnterSelect_star_spec(Select_star_specContext context);
    public abstract virtual void ExitSelect_star_spec(Select_star_specContext context);
    public abstract virtual void EnterSelect_value_spec(Select_value_specContext context);
    public abstract virtual void ExitSelect_value_spec(Select_value_specContext context);
    public abstract virtual void EnterSelect_list_spec(Select_list_specContext context);
    public abstract virtual void ExitSelect_list_spec(Select_list_specContext context);
    public abstract virtual void EnterSelect_item(Select_itemContext context);
    public abstract virtual void ExitSelect_item(Select_itemContext context);
    public abstract virtual void EnterFrom_clause(From_clauseContext context);
    public abstract virtual void ExitFrom_clause(From_clauseContext context);
    public abstract virtual void EnterJoinCollectionExpression(JoinCollectionExpressionContext context);
    public abstract virtual void ExitJoinCollectionExpression(JoinCollectionExpressionContext context);
    public abstract virtual void EnterAliasedCollectionExpression(AliasedCollectionExpressionContext context);
    public abstract virtual void ExitAliasedCollectionExpression(AliasedCollectionExpressionContext context);
    public abstract virtual void EnterArrayIteratorCollectionExpression(ArrayIteratorCollectionExpressionContext context);
    public abstract virtual void ExitArrayIteratorCollectionExpression(ArrayIteratorCollectionExpressionContext context);
    public abstract virtual void EnterInputPathCollection(InputPathCollectionContext context);
    public abstract virtual void ExitInputPathCollection(InputPathCollectionContext context);
    public abstract virtual void EnterSubqueryCollection(SubqueryCollectionContext context);
    public abstract virtual void ExitSubqueryCollection(SubqueryCollectionContext context);
    public abstract virtual void EnterStringPathExpression(StringPathExpressionContext context);
    public abstract virtual void ExitStringPathExpression(StringPathExpressionContext context);
    public abstract virtual void EnterEpsilonPathExpression(EpsilonPathExpressionContext context);
    public abstract virtual void ExitEpsilonPathExpression(EpsilonPathExpressionContext context);
    public abstract virtual void EnterIdentifierPathExpression(IdentifierPathExpressionContext context);
    public abstract virtual void ExitIdentifierPathExpression(IdentifierPathExpressionContext context);
    public abstract virtual void EnterNumberPathExpression(NumberPathExpressionContext context);
    public abstract virtual void ExitNumberPathExpression(NumberPathExpressionContext context);
    public abstract virtual void EnterWhere_clause(Where_clauseContext context);
    public abstract virtual void ExitWhere_clause(Where_clauseContext context);
    public abstract virtual void EnterGroup_by_clause(Group_by_clauseContext context);
    public abstract virtual void ExitGroup_by_clause(Group_by_clauseContext context);
    public abstract virtual void EnterOrder_by_clause(Order_by_clauseContext context);
    public abstract virtual void ExitOrder_by_clause(Order_by_clauseContext context);
    public abstract virtual void EnterOrder_by_items(Order_by_itemsContext context);
    public abstract virtual void ExitOrder_by_items(Order_by_itemsContext context);
    public abstract virtual void EnterOrder_by_item(Order_by_itemContext context);
    public abstract virtual void ExitOrder_by_item(Order_by_itemContext context);
    public abstract virtual void EnterSort_order(Sort_orderContext context);
    public abstract virtual void ExitSort_order(Sort_orderContext context);
    public abstract virtual void EnterOffset_limit_clause(Offset_limit_clauseContext context);
    public abstract virtual void ExitOffset_limit_clause(Offset_limit_clauseContext context);
    public abstract virtual void EnterOffset_count(Offset_countContext context);
    public abstract virtual void ExitOffset_count(Offset_countContext context);
    public abstract virtual void EnterLimit_count(Limit_countContext context);
    public abstract virtual void ExitLimit_count(Limit_countContext context);
    public abstract virtual void EnterLogicalScalarExpression(LogicalScalarExpressionContext context);
    public abstract virtual void ExitLogicalScalarExpression(LogicalScalarExpressionContext context);
    public abstract virtual void EnterConditionalScalarExpression(ConditionalScalarExpressionContext context);
    public abstract virtual void ExitConditionalScalarExpression(ConditionalScalarExpressionContext context);
    public abstract virtual void EnterCoalesceScalarExpression(CoalesceScalarExpressionContext context);
    public abstract virtual void ExitCoalesceScalarExpression(CoalesceScalarExpressionContext context);
    public abstract virtual void EnterBetweenScalarExpression(BetweenScalarExpressionContext context);
    public abstract virtual void ExitBetweenScalarExpression(BetweenScalarExpressionContext context);
    public abstract virtual void EnterLogical_scalar_expression(Logical_scalar_expressionContext context);
    public abstract virtual void ExitLogical_scalar_expression(Logical_scalar_expressionContext context);
    public abstract virtual void EnterIn_scalar_expression(In_scalar_expressionContext context);
    public abstract virtual void ExitIn_scalar_expression(In_scalar_expressionContext context);
    public abstract virtual void EnterLike_scalar_expression(Like_scalar_expressionContext context);
    public abstract virtual void ExitLike_scalar_expression(Like_scalar_expressionContext context);
    public abstract virtual void EnterEscape_expression(Escape_expressionContext context);
    public abstract virtual void ExitEscape_expression(Escape_expressionContext context);
    public abstract virtual void EnterBinary_scalar_expression(Binary_scalar_expressionContext context);
    public abstract virtual void ExitBinary_scalar_expression(Binary_scalar_expressionContext context);
    public abstract virtual void EnterMultiplicative_operator(Multiplicative_operatorContext context);
    public abstract virtual void ExitMultiplicative_operator(Multiplicative_operatorContext context);
    public abstract virtual void EnterAdditive_operator(Additive_operatorContext context);
    public abstract virtual void ExitAdditive_operator(Additive_operatorContext context);
    public abstract virtual void EnterRelational_operator(Relational_operatorContext context);
    public abstract virtual void ExitRelational_operator(Relational_operatorContext context);
    public abstract virtual void EnterEquality_operator(Equality_operatorContext context);
    public abstract virtual void ExitEquality_operator(Equality_operatorContext context);
    public abstract virtual void EnterBitwise_and_operator(Bitwise_and_operatorContext context);
    public abstract virtual void ExitBitwise_and_operator(Bitwise_and_operatorContext context);
    public abstract virtual void EnterBitwise_exclusive_or_operator(Bitwise_exclusive_or_operatorContext context);
    public abstract virtual void ExitBitwise_exclusive_or_operator(Bitwise_exclusive_or_operatorContext context);
    public abstract virtual void EnterBitwise_inclusive_or_operator(Bitwise_inclusive_or_operatorContext context);
    public abstract virtual void ExitBitwise_inclusive_or_operator(Bitwise_inclusive_or_operatorContext context);
    public abstract virtual void EnterString_concat_operator(String_concat_operatorContext context);
    public abstract virtual void ExitString_concat_operator(String_concat_operatorContext context);
    public abstract virtual void EnterUnary_scalar_expression(Unary_scalar_expressionContext context);
    public abstract virtual void ExitUnary_scalar_expression(Unary_scalar_expressionContext context);
    public abstract virtual void EnterUnary_operator(Unary_operatorContext context);
    public abstract virtual void ExitUnary_operator(Unary_operatorContext context);
    public abstract virtual void EnterAllScalarExpression(AllScalarExpressionContext context);
    public abstract virtual void ExitAllScalarExpression(AllScalarExpressionContext context);
    public abstract virtual void EnterLiteralScalarExpression(LiteralScalarExpressionContext context);
    public abstract virtual void ExitLiteralScalarExpression(LiteralScalarExpressionContext context);
    public abstract virtual void EnterObjectCreateScalarExpression(ObjectCreateScalarExpressionContext context);
    public abstract virtual void ExitObjectCreateScalarExpression(ObjectCreateScalarExpressionContext context);
    public abstract virtual void EnterFirstScalarExpression(FirstScalarExpressionContext context);
    public abstract virtual void ExitFirstScalarExpression(FirstScalarExpressionContext context);
    public abstract virtual void EnterArrayCreateScalarExpression(ArrayCreateScalarExpressionContext context);
    public abstract virtual void ExitArrayCreateScalarExpression(ArrayCreateScalarExpressionContext context);
    public abstract virtual void EnterMemberIndexerScalarExpression(MemberIndexerScalarExpressionContext context);
    public abstract virtual void ExitMemberIndexerScalarExpression(MemberIndexerScalarExpressionContext context);
    public abstract virtual void EnterSubqueryScalarExpression(SubqueryScalarExpressionContext context);
    public abstract virtual void ExitSubqueryScalarExpression(SubqueryScalarExpressionContext context);
    public abstract virtual void EnterPropertyRefScalarExpressionBase(PropertyRefScalarExpressionBaseContext context);
    public abstract virtual void ExitPropertyRefScalarExpressionBase(PropertyRefScalarExpressionBaseContext context);
    public abstract virtual void EnterFunctionCallScalarExpression(FunctionCallScalarExpressionContext context);
    public abstract virtual void ExitFunctionCallScalarExpression(FunctionCallScalarExpressionContext context);
    public abstract virtual void EnterParenthesizedScalarExperession(ParenthesizedScalarExperessionContext context);
    public abstract virtual void ExitParenthesizedScalarExperession(ParenthesizedScalarExperessionContext context);
    public abstract virtual void EnterParameterRefScalarExpression(ParameterRefScalarExpressionContext context);
    public abstract virtual void ExitParameterRefScalarExpression(ParameterRefScalarExpressionContext context);
    public abstract virtual void EnterExistsScalarExpression(ExistsScalarExpressionContext context);
    public abstract virtual void ExitExistsScalarExpression(ExistsScalarExpressionContext context);
    public abstract virtual void EnterArrayScalarExpression(ArrayScalarExpressionContext context);
    public abstract virtual void ExitArrayScalarExpression(ArrayScalarExpressionContext context);
    public abstract virtual void EnterLastScalarExpression(LastScalarExpressionContext context);
    public abstract virtual void ExitLastScalarExpression(LastScalarExpressionContext context);
    public abstract virtual void EnterPropertyRefScalarExpressionRecursive(PropertyRefScalarExpressionRecursiveContext context);
    public abstract virtual void ExitPropertyRefScalarExpressionRecursive(PropertyRefScalarExpressionRecursiveContext context);
    public abstract virtual void EnterFunction_call_scalar_expression(Function_call_scalar_expressionContext context);
    public abstract virtual void ExitFunction_call_scalar_expression(Function_call_scalar_expressionContext context);
    public abstract virtual void EnterScalar_expression_list(Scalar_expression_listContext context);
    public abstract virtual void ExitScalar_expression_list(Scalar_expression_listContext context);
    public abstract virtual void EnterObject_property_list(Object_property_listContext context);
    public abstract virtual void ExitObject_property_list(Object_property_listContext context);
    public abstract virtual void EnterObject_property(Object_propertyContext context);
    public abstract virtual void ExitObject_property(Object_propertyContext context);
    public abstract virtual void EnterIdentifier(IdentifierContext context);
    public abstract virtual void ExitIdentifier(IdentifierContext context);
    public abstract virtual void EnterLiteral(LiteralContext context);
    public abstract virtual void ExitLiteral(LiteralContext context);
}
[GeneratedCodeAttribute("ANTLR", "4.7.2")]
internal interface IsqlVisitor`1 {
    public abstract virtual Result VisitProgram(ProgramContext context);
    public abstract virtual Result VisitSql_query(Sql_queryContext context);
    public abstract virtual Result VisitSelect_clause(Select_clauseContext context);
    public abstract virtual Result VisitTop_spec(Top_specContext context);
    public abstract virtual Result VisitSelection(SelectionContext context);
    public abstract virtual Result VisitSelect_star_spec(Select_star_specContext context);
    public abstract virtual Result VisitSelect_value_spec(Select_value_specContext context);
    public abstract virtual Result VisitSelect_list_spec(Select_list_specContext context);
    public abstract virtual Result VisitSelect_item(Select_itemContext context);
    public abstract virtual Result VisitFrom_clause(From_clauseContext context);
    public abstract virtual Result VisitJoinCollectionExpression(JoinCollectionExpressionContext context);
    public abstract virtual Result VisitAliasedCollectionExpression(AliasedCollectionExpressionContext context);
    public abstract virtual Result VisitArrayIteratorCollectionExpression(ArrayIteratorCollectionExpressionContext context);
    public abstract virtual Result VisitInputPathCollection(InputPathCollectionContext context);
    public abstract virtual Result VisitSubqueryCollection(SubqueryCollectionContext context);
    public abstract virtual Result VisitStringPathExpression(StringPathExpressionContext context);
    public abstract virtual Result VisitEpsilonPathExpression(EpsilonPathExpressionContext context);
    public abstract virtual Result VisitIdentifierPathExpression(IdentifierPathExpressionContext context);
    public abstract virtual Result VisitNumberPathExpression(NumberPathExpressionContext context);
    public abstract virtual Result VisitWhere_clause(Where_clauseContext context);
    public abstract virtual Result VisitGroup_by_clause(Group_by_clauseContext context);
    public abstract virtual Result VisitOrder_by_clause(Order_by_clauseContext context);
    public abstract virtual Result VisitOrder_by_items(Order_by_itemsContext context);
    public abstract virtual Result VisitOrder_by_item(Order_by_itemContext context);
    public abstract virtual Result VisitSort_order(Sort_orderContext context);
    public abstract virtual Result VisitOffset_limit_clause(Offset_limit_clauseContext context);
    public abstract virtual Result VisitOffset_count(Offset_countContext context);
    public abstract virtual Result VisitLimit_count(Limit_countContext context);
    public abstract virtual Result VisitLogicalScalarExpression(LogicalScalarExpressionContext context);
    public abstract virtual Result VisitConditionalScalarExpression(ConditionalScalarExpressionContext context);
    public abstract virtual Result VisitCoalesceScalarExpression(CoalesceScalarExpressionContext context);
    public abstract virtual Result VisitBetweenScalarExpression(BetweenScalarExpressionContext context);
    public abstract virtual Result VisitLogical_scalar_expression(Logical_scalar_expressionContext context);
    public abstract virtual Result VisitIn_scalar_expression(In_scalar_expressionContext context);
    public abstract virtual Result VisitLike_scalar_expression(Like_scalar_expressionContext context);
    public abstract virtual Result VisitEscape_expression(Escape_expressionContext context);
    public abstract virtual Result VisitBinary_scalar_expression(Binary_scalar_expressionContext context);
    public abstract virtual Result VisitMultiplicative_operator(Multiplicative_operatorContext context);
    public abstract virtual Result VisitAdditive_operator(Additive_operatorContext context);
    public abstract virtual Result VisitRelational_operator(Relational_operatorContext context);
    public abstract virtual Result VisitEquality_operator(Equality_operatorContext context);
    public abstract virtual Result VisitBitwise_and_operator(Bitwise_and_operatorContext context);
    public abstract virtual Result VisitBitwise_exclusive_or_operator(Bitwise_exclusive_or_operatorContext context);
    public abstract virtual Result VisitBitwise_inclusive_or_operator(Bitwise_inclusive_or_operatorContext context);
    public abstract virtual Result VisitString_concat_operator(String_concat_operatorContext context);
    public abstract virtual Result VisitUnary_scalar_expression(Unary_scalar_expressionContext context);
    public abstract virtual Result VisitUnary_operator(Unary_operatorContext context);
    public abstract virtual Result VisitAllScalarExpression(AllScalarExpressionContext context);
    public abstract virtual Result VisitLiteralScalarExpression(LiteralScalarExpressionContext context);
    public abstract virtual Result VisitObjectCreateScalarExpression(ObjectCreateScalarExpressionContext context);
    public abstract virtual Result VisitFirstScalarExpression(FirstScalarExpressionContext context);
    public abstract virtual Result VisitArrayCreateScalarExpression(ArrayCreateScalarExpressionContext context);
    public abstract virtual Result VisitMemberIndexerScalarExpression(MemberIndexerScalarExpressionContext context);
    public abstract virtual Result VisitSubqueryScalarExpression(SubqueryScalarExpressionContext context);
    public abstract virtual Result VisitPropertyRefScalarExpressionBase(PropertyRefScalarExpressionBaseContext context);
    public abstract virtual Result VisitFunctionCallScalarExpression(FunctionCallScalarExpressionContext context);
    public abstract virtual Result VisitParenthesizedScalarExperession(ParenthesizedScalarExperessionContext context);
    public abstract virtual Result VisitParameterRefScalarExpression(ParameterRefScalarExpressionContext context);
    public abstract virtual Result VisitExistsScalarExpression(ExistsScalarExpressionContext context);
    public abstract virtual Result VisitArrayScalarExpression(ArrayScalarExpressionContext context);
    public abstract virtual Result VisitLastScalarExpression(LastScalarExpressionContext context);
    public abstract virtual Result VisitPropertyRefScalarExpressionRecursive(PropertyRefScalarExpressionRecursiveContext context);
    public abstract virtual Result VisitFunction_call_scalar_expression(Function_call_scalar_expressionContext context);
    public abstract virtual Result VisitScalar_expression_list(Scalar_expression_listContext context);
    public abstract virtual Result VisitObject_property_list(Object_property_listContext context);
    public abstract virtual Result VisitObject_property(Object_propertyContext context);
    public abstract virtual Result VisitIdentifier(IdentifierContext context);
    public abstract virtual Result VisitLiteral(LiteralContext context);
}
internal class Microsoft.Azure.Cosmos.AccountClientConfiguration : object {
    [CompilerGeneratedAttribute]
private ClientTelemetryConfiguration <ClientTelemetryConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public ClientTelemetryConfiguration ClientTelemetryConfiguration { get; public set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public ClientTelemetryConfiguration get_ClientTelemetryConfiguration();
    [CompilerGeneratedAttribute]
public void set_ClientTelemetryConfiguration(ClientTelemetryConfiguration value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
    internal bool IsClientTelemetryEnabled();
}
public class Microsoft.Azure.Cosmos.AccountConsistency : object {
    private static ConsistencyLevel defaultDefaultConsistencyLevel;
    internal static int DefaultMaxStalenessInterval;
    internal static int DefaultMaxStalenessPrefix;
    internal static int MaxStalenessIntervalInSecondsMinValue;
    internal static int MaxStalenessIntervalInSecondsMaxValue;
    internal static int MaxStalenessPrefixMinValue;
    internal static int MaxStalenessPrefixMaxValue;
    [CompilerGeneratedAttribute]
private ConsistencyLevel <DefaultConsistencyLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxStalenessPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxStalenessIntervalInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
[JsonPropertyAttribute]
public ConsistencyLevel DefaultConsistencyLevel { get; internal set; }
    [JsonPropertyAttribute]
public int MaxStalenessPrefix { get; internal set; }
    [JsonPropertyAttribute]
public int MaxStalenessIntervalInSeconds { get; internal set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public ConsistencyLevel get_DefaultConsistencyLevel();
    [CompilerGeneratedAttribute]
internal void set_DefaultConsistencyLevel(ConsistencyLevel value);
    [CompilerGeneratedAttribute]
public int get_MaxStalenessPrefix();
    [CompilerGeneratedAttribute]
internal void set_MaxStalenessPrefix(int value);
    [CompilerGeneratedAttribute]
public int get_MaxStalenessIntervalInSeconds();
    [CompilerGeneratedAttribute]
internal void set_MaxStalenessIntervalInSeconds(int value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
    internal ConsistencyLevel ToDirectConsistencyLevel();
}
public class Microsoft.Azure.Cosmos.AccountProperties : object {
    private Collection`1<AccountRegion> readRegions;
    private Collection`1<AccountRegion> writeRegions;
    internal Lazy`1<IDictionary`2<string, object>> QueryEngineConfigurationInternal;
    [JsonIgnoreAttribute]
private string id;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaxMediaStorageUsageInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MediaStorageUsageInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ConsumedDocumentStorageInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReservedDocumentStorageInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ProvisionedDocumentStorageInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private AccountConsistency <Consistency>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddressesLink>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicationPolicy <ReplicationPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private ReplicationPolicy <SystemReplicationPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadPolicy <ReadPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryEngineConfigurationString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMultipleWriteLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonIgnoreAttribute]
public IEnumerable`1<AccountRegion> WritableRegions { get; }
    [JsonIgnoreAttribute]
public IEnumerable`1<AccountRegion> ReadableRegions { get; }
    [JsonPropertyAttribute]
public string Id { get; internal set; }
    [JsonPropertyAttribute]
public string ETag { get; internal set; }
    [JsonPropertyAttribute]
internal string ResourceId { get; internal set; }
    [JsonPropertyAttribute]
internal Collection`1<AccountRegion> WriteLocationsInternal { get; internal set; }
    [JsonPropertyAttribute]
internal Collection`1<AccountRegion> ReadLocationsInternal { get; internal set; }
    internal long MaxMediaStorageUsageInMB { get; internal set; }
    internal long MediaStorageUsageInMB { get; internal set; }
    internal long ConsumedDocumentStorageInMB { get; internal set; }
    internal long ReservedDocumentStorageInMB { get; internal set; }
    internal long ProvisionedDocumentStorageInMB { get; internal set; }
    [JsonPropertyAttribute]
public AccountConsistency Consistency { get; internal set; }
    [JsonPropertyAttribute]
internal string AddressesLink { get; internal set; }
    [JsonPropertyAttribute]
internal ReplicationPolicy ReplicationPolicy { get; internal set; }
    [JsonPropertyAttribute]
internal ReplicationPolicy SystemReplicationPolicy { get; internal set; }
    [JsonPropertyAttribute]
internal ReadPolicy ReadPolicy { get; internal set; }
    internal IDictionary`2<string, object> QueryEngineConfiguration { get; }
    [JsonPropertyAttribute]
internal string QueryEngineConfigurationString { get; internal set; }
    [JsonPropertyAttribute]
internal bool EnableMultipleWriteLocations { get; internal set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    public IEnumerable`1<AccountRegion> get_WritableRegions();
    public IEnumerable`1<AccountRegion> get_ReadableRegions();
    public string get_Id();
    internal void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
internal void set_ETag(string value);
    [CompilerGeneratedAttribute]
internal string get_ResourceId();
    [CompilerGeneratedAttribute]
internal void set_ResourceId(string value);
    internal Collection`1<AccountRegion> get_WriteLocationsInternal();
    internal void set_WriteLocationsInternal(Collection`1<AccountRegion> value);
    internal Collection`1<AccountRegion> get_ReadLocationsInternal();
    internal void set_ReadLocationsInternal(Collection`1<AccountRegion> value);
    [CompilerGeneratedAttribute]
internal long get_MaxMediaStorageUsageInMB();
    [CompilerGeneratedAttribute]
internal void set_MaxMediaStorageUsageInMB(long value);
    [CompilerGeneratedAttribute]
internal long get_MediaStorageUsageInMB();
    [CompilerGeneratedAttribute]
internal void set_MediaStorageUsageInMB(long value);
    [CompilerGeneratedAttribute]
internal long get_ConsumedDocumentStorageInMB();
    [CompilerGeneratedAttribute]
internal void set_ConsumedDocumentStorageInMB(long value);
    [CompilerGeneratedAttribute]
internal long get_ReservedDocumentStorageInMB();
    [CompilerGeneratedAttribute]
internal void set_ReservedDocumentStorageInMB(long value);
    [CompilerGeneratedAttribute]
internal long get_ProvisionedDocumentStorageInMB();
    [CompilerGeneratedAttribute]
internal void set_ProvisionedDocumentStorageInMB(long value);
    [CompilerGeneratedAttribute]
public AccountConsistency get_Consistency();
    [CompilerGeneratedAttribute]
internal void set_Consistency(AccountConsistency value);
    [CompilerGeneratedAttribute]
internal string get_AddressesLink();
    [CompilerGeneratedAttribute]
internal void set_AddressesLink(string value);
    [CompilerGeneratedAttribute]
internal ReplicationPolicy get_ReplicationPolicy();
    [CompilerGeneratedAttribute]
internal void set_ReplicationPolicy(ReplicationPolicy value);
    [CompilerGeneratedAttribute]
internal ReplicationPolicy get_SystemReplicationPolicy();
    [CompilerGeneratedAttribute]
internal void set_SystemReplicationPolicy(ReplicationPolicy value);
    [CompilerGeneratedAttribute]
internal ReadPolicy get_ReadPolicy();
    [CompilerGeneratedAttribute]
internal void set_ReadPolicy(ReadPolicy value);
    internal IDictionary`2<string, object> get_QueryEngineConfiguration();
    [CompilerGeneratedAttribute]
internal string get_QueryEngineConfigurationString();
    [CompilerGeneratedAttribute]
internal void set_QueryEngineConfigurationString(string value);
    [CompilerGeneratedAttribute]
internal bool get_EnableMultipleWriteLocations();
    [CompilerGeneratedAttribute]
internal void set_EnableMultipleWriteLocations(bool value);
    private IDictionary`2<string, object> QueryStringToDictConverter();
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <.ctor>b__3_0();
}
public class Microsoft.Azure.Cosmos.AccountRegion : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; internal set; }
    [JsonPropertyAttribute]
public string Endpoint { get; internal set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Endpoint();
    [CompilerGeneratedAttribute]
internal void set_Endpoint(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
internal class Microsoft.Azure.Cosmos.ActivityScope : object {
    private Guid ambientActivityId;
    public ActivityScope(Guid activityId);
    public sealed virtual void Dispose();
    public static ActivityScope CreateIfDefaultActivityId();
}
internal class Microsoft.Azure.Cosmos.AddressResolver : object {
    private IMasterServiceIdentityProvider masterServiceIdentityProvider;
    private IRequestSigner requestSigner;
    private string location;
    private PartitionKeyRangeIdentity masterPartitionKeyRangeIdentity;
    private CollectionCache collectionCache;
    private ICollectionRoutingMapCache collectionRoutingMapCache;
    private IAddressCache addressCache;
    public AddressResolver(IMasterServiceIdentityProvider masterServiceIdentityProvider, IRequestSigner requestSigner, string location);
    public void InitializeCaches(CollectionCache collectionCache, ICollectionRoutingMapCache collectionRoutingMapCache, IAddressCache addressCache);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.AddressResolver/<ResolveAsync>d__9")]
public sealed virtual Task`1<PartitionAddressInformation> ResolveAsync(DocumentServiceRequest request, bool forceRefreshPartitionAddresses, CancellationToken cancellationToken);
    private static bool IsSameCollection(PartitionKeyRange initiallyResolved, PartitionKeyRange newlyResolved);
    private void ThrowIfTargetChanged(DocumentServiceRequest request, PartitionKeyRange targetRange);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.AddressResolver/<ResolveAddressesAndIdentityAsync>d__12")]
private Task`1<ResolutionResult> ResolveAddressesAndIdentityAsync(DocumentServiceRequest request, bool forceRefreshPartitionAddresses, CancellationToken cancellationToken);
    private static void EnsureRoutingMapPresent(DocumentServiceRequest request, CollectionRoutingMap routingMap, ContainerProperties collection);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.AddressResolver/<TryResolveServerPartitionAsync>d__14")]
private Task`1<ResolutionResult> TryResolveServerPartitionAsync(DocumentServiceRequest request, ContainerProperties collection, CollectionRoutingMap routingMap, bool collectionCacheIsUptodate, bool collectionRoutingMapCacheIsUptodate, bool forceRefreshPartitionAddresses, CancellationToken cancellationToken);
    private PartitionKeyRange TryResolveSinglePartitionCollection(DocumentServiceRequest request, ContainerProperties collection, CollectionRoutingMap routingMap, bool collectionCacheIsUptoDate);
    private ResolutionResult HandleRangeAddressResolutionFailure(DocumentServiceRequest request, bool collectionCacheIsUpToDate, bool routingMapCacheIsUpToDate, CollectionRoutingMap routingMap);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.AddressResolver/<TryResolveServerPartitionByPartitionKeyRangeIdAsync>d__17")]
private Task`1<ResolutionResult> TryResolveServerPartitionByPartitionKeyRangeIdAsync(DocumentServiceRequest request, ContainerProperties collection, CollectionRoutingMap routingMap, bool collectionCacheIsUpToDate, bool routingMapCacheIsUpToDate, bool forceRefreshPartitionAddresses, CancellationToken cancellationToken);
    internal static PartitionKeyRange TryResolveServerPartitionByPartitionKey(DocumentServiceRequest request, string partitionKeyString, bool collectionCacheUptoDate, ContainerProperties collection, CollectionRoutingMap routingMap);
    public sealed virtual Task UpdateAsync(ServerKey serverKey, CancellationToken cancellationToken);
    public Task UpdateAsync(IReadOnlyList`1<AddressCacheToken> addressCacheTokens, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.AsyncCacheNonBlocking`2 : object {
    private CancellationTokenSource cancellationTokenSource;
    private ConcurrentDictionary`2<TKey, AsyncLazyWithRefreshTask`1<TKey, TValue, TValue>> values;
    private Func`2<Exception, bool> removeFromCacheOnBackgroundRefreshException;
    private IEqualityComparer`1<TKey> keyEqualityComparer;
    private bool isDisposed;
    public AsyncCacheNonBlocking`2(Func`2<Exception, bool> removeFromCacheOnBackgroundRefreshException, IEqualityComparer`1<TKey> keyEqualityComparer, CancellationToken cancellationToken);
    private static bool RemoveNotFoundFromCacheOnException(Exception e);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.AsyncCacheNonBlocking`2/<GetAsync>d__8")]
public Task`1<TValue> GetAsync(TKey key, Func`2<TValue, Task`1<TValue>> singleValueInitFunc, Func`2<TValue, bool> forceRefresh);
    public void Set(TKey key, TValue value);
    public bool TryRemove(TKey key);
    public void Refresh(TKey key, Func`2<TValue, Task`1<TValue>> singleValueInitFunc);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.AsyncCacheNonBlocking`2/<UpdateCacheAndGetValueFromBackgroundTaskAsync>d__12")]
private Task`1<TValue> UpdateCacheAndGetValueFromBackgroundTaskAsync(TKey key, AsyncLazyWithRefreshTask`1<TKey, TValue, TValue> initialValue, Func`2<TValue, Task`1<TValue>> callbackDelegate, string operationName);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.Cosmos.Authorization.AzureKeyCredentialAuthorizationTokenProvider : AuthorizationTokenProvider {
    private object refreshLock;
    private AzureKeyCredential azureKeyCredential;
    private string currentKeyObject;
    internal AuthorizationTokenProvider authorizationTokenProvider;
    public AzureKeyCredentialAuthorizationTokenProvider(AzureKeyCredential azureKeyCredential);
    public virtual ValueTask AddAuthorizationHeaderAsync(INameValueCollection headersCollection, Uri requestAddress, string verb, AuthorizationTokenType tokenType);
    public virtual void Dispose();
    public virtual ValueTask`1<ValueTuple`2<string, string>> GetUserAuthorizationAsync(string resourceAddress, string resourceType, string requestVerb, INameValueCollection headers, AuthorizationTokenType tokenType);
    public virtual ValueTask`1<string> GetUserAuthorizationTokenAsync(string resourceAddress, string resourceType, string requestVerb, INameValueCollection headers, AuthorizationTokenType tokenType, ITrace trace);
    public virtual void TraceUnauthorized(DocumentClientException dce, string authorizationToken, string payload);
    public virtual TimeSpan GetAge();
    private void CheckAndRefreshTokenProvider();
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.AuthorizationHelper : object {
    public static int MaxAuthorizationHeaderSize;
    public static int DefaultAllowedClockSkewInSeconds;
    public static int DefaultMasterTokenExpiryInSeconds;
    private static int MaxAadAuthorizationHeaderSize;
    private static int MaxResourceTokenAuthorizationHeaderSize;
    private static string AuthorizationFormatPrefixUrlEncoded;
    private static Encoding AuthorizationEncoding;
    private static AuthorizationHelper();
    public static string GenerateGatewayAuthSignatureWithAddressResolution(string verb, Uri uri, INameValueCollection headers, IComputeHash stringHMACSHA256Helper, string clientVersion);
    public static string GenerateKeyAuthorizationSignature(string verb, Uri uri, INameValueCollection headers, IComputeHash stringHMACSHA256Helper, string clientVersion);
    public static string GenerateKeyAuthorizationSignature(string verb, string resourceId, string resourceType, INameValueCollection headers, string key, bool bUseUtcNowForMissingXDate);
    public static string GenerateKeyAuthorizationSignature(string verb, string resourceId, string resourceType, INameValueCollection headers, IComputeHash stringHMACSHA256Helper);
    public static string GenerateKeyAuthorizationSignature(string verb, string resourceId, string resourceType, INameValueCollection headers, IComputeHash stringHMACSHA256Helper, String& payload);
    public static string GenerateKeyAuthorizationSignature(string verb, string resourceId, string resourceType, INameValueCollection headers, IComputeHash stringHMACSHA256Helper, ArrayOwner& payload);
    public static void ParseAuthorizationToken(string authorizationTokenString, ReadOnlyMemory`1& typeOutput, ReadOnlyMemory`1& versionOutput, ReadOnlyMemory`1& tokenOutput);
    public static bool CheckPayloadUsingKey(ReadOnlyMemory`1<char> inputToken, string verb, string resourceId, string resourceType, INameValueCollection headers, string key);
    public static void ValidateInputRequestTime(INameValueCollection requestHeaders, int masterTokenExpiryInSeconds, int allowedClockSkewInSeconds);
    public static void ValidateInputRequestTime(T requestHeaders, Func`3<T, string, string> headerGetter, int masterTokenExpiryInSeconds, int allowedClockSkewInSeconds);
    public static void CheckTimeRangeIsCurrent(int allowedClockSkewInSeconds, DateTime startDateTime, DateTime expiryDateTime);
    internal static void GetResourceTypeAndIdOrFullName(Uri uri, Boolean& isNameBased, String& resourceType, String& resourceId, string clientVersion);
    public static bool IsUserRequest(string resourceType);
    public static AuthorizationTokenType GetSystemOperationType(bool readOnlyRequest, string resourceType);
    public static int SerializeMessagePayload(Span`1<byte> stream, string verb, string resourceId, string resourceType, INameValueCollection headers, bool bUseUtcNowForMissingXDate);
    public static bool IsResourceToken(string token);
    internal static string GetHeaderValue(INameValueCollection headerValues, string key);
    internal static string GetHeaderValue(IDictionary`2<string, string> headerValues, string key);
    internal static string GetAuthorizationResourceIdOrFullName(string resourceType, string resourceIdOrFullName);
    public static Uri GenerateUriFromAddressRequestUri(Uri uri);
    private static void ValidateInputRequestTime(string dateToCompare, int masterTokenExpiryInSeconds, int allowedClockSkewInSeconds);
    internal static string GenerateAuthorizationTokenWithHashCore(string verb, string resourceId, string resourceType, INameValueCollection headers, IComputeHash stringHMACSHA256Helper, ArrayOwner& payload);
    private static string GenerateUrlEncodedAuthorizationTokenWithHashCore(string verb, string resourceId, string resourceType, INameValueCollection headers, IComputeHash stringHMACSHA256Helper, ArrayOwner& payload);
    private static string GenerateAuthorizationTokenWithHashCore(string verb, string resourceId, string resourceType, INameValueCollection headers, IComputeHash stringHMACSHA256Helper, bool urlEncode, ArrayOwner& payload);
    private static string OptimizedConvertToBase64string(Byte[] hashPayLoad, bool urlEncode);
    internal static int ComputeMemoryCapacity(string verbInput, string authResourceId, string resourceTypeInput);
    private static string GenerateKeyAuthorizationCore(string verb, string resourceId, string resourceType, INameValueCollection headers, string key);
    public static string UrlEncodeBase64SpanInPlace(Span`1<byte> base64Bytes, int length);
    [ExtensionAttribute]
private static int Write(Span`1<byte> stream, string contentToWrite);
}
internal abstract class Microsoft.Azure.Cosmos.AuthorizationTokenProvider : object {
    private DateTime creationTime;
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.AuthorizationTokenProvider/<AddSystemAuthorizationHeaderAsync>d__1")]
public sealed virtual Task AddSystemAuthorizationHeaderAsync(DocumentServiceRequest request, string federationId, string verb, string resourceId);
    public abstract virtual ValueTask AddAuthorizationHeaderAsync(INameValueCollection headersCollection, Uri requestAddress, string verb, AuthorizationTokenType tokenType);
    public abstract virtual ValueTask`1<ValueTuple`2<string, string>> GetUserAuthorizationAsync(string resourceAddress, string resourceType, string requestVerb, INameValueCollection headers, AuthorizationTokenType tokenType);
    public abstract virtual ValueTask`1<string> GetUserAuthorizationTokenAsync(string resourceAddress, string resourceType, string requestVerb, INameValueCollection headers, AuthorizationTokenType tokenType, ITrace trace);
    public abstract virtual void TraceUnauthorized(DocumentClientException dce, string authorizationToken, string payload);
    public virtual TimeSpan GetAge();
    public static AuthorizationTokenProvider CreateWithResourceTokenOrAuthKey(string authKeyOrResourceToken);
    public abstract virtual void Dispose();
}
internal class Microsoft.Azure.Cosmos.AuthorizationTokenProviderMasterKey : AuthorizationTokenProvider {
    private static string MacSignatureString;
    private static string EnableAuthFailureTracesConfig;
    private Lazy`1<bool> enableAuthFailureTraces;
    private IComputeHash authKeyHashFunction;
    public AuthorizationTokenProviderMasterKey(IComputeHash computeHash);
    public AuthorizationTokenProviderMasterKey(SecureString authKey);
    public AuthorizationTokenProviderMasterKey(string authKey);
    public virtual ValueTask`1<ValueTuple`2<string, string>> GetUserAuthorizationAsync(string resourceAddress, string resourceType, string requestVerb, INameValueCollection headers, AuthorizationTokenType tokenType);
    public virtual ValueTask`1<string> GetUserAuthorizationTokenAsync(string resourceAddress, string resourceType, string requestVerb, INameValueCollection headers, AuthorizationTokenType tokenType, ITrace trace);
    public virtual ValueTask AddAuthorizationHeaderAsync(INameValueCollection headersCollection, Uri requestAddress, string verb, AuthorizationTokenType tokenType);
    public virtual void TraceUnauthorized(DocumentClientException dce, string authorizationToken, string payload);
    public virtual void Dispose();
    private static string NormalizeAuthorizationPayload(string input);
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Microsoft.Azure.Cosmos.AuthorizationTokenProviderResourceToken : AuthorizationTokenProvider {
    private string urlEncodedAuthKeyResourceToken;
    private ValueTask`1<string> urlEncodedAuthKeyResourceTokenValueTask;
    private ValueTask`1<ValueTuple`2<string, string>> urlEncodedAuthKeyResourceTokenValueTaskWithPayload;
    private ValueTask defaultValueTask;
    public AuthorizationTokenProviderResourceToken(string authKeyResourceToken);
    public virtual ValueTask`1<ValueTuple`2<string, string>> GetUserAuthorizationAsync(string resourceAddress, string resourceType, string requestVerb, INameValueCollection headers, AuthorizationTokenType tokenType);
    public virtual ValueTask`1<string> GetUserAuthorizationTokenAsync(string resourceAddress, string resourceType, string requestVerb, INameValueCollection headers, AuthorizationTokenType tokenType, ITrace trace);
    public virtual ValueTask AddAuthorizationHeaderAsync(INameValueCollection headersCollection, Uri requestAddress, string verb, AuthorizationTokenType tokenType);
    public virtual void TraceUnauthorized(DocumentClientException dce, string authorizationToken, string payload);
    public virtual void Dispose();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Microsoft.Azure.Cosmos.AuthorizationTokenProviderTokenCredential : AuthorizationTokenProvider {
    internal TokenCredentialCache tokenCredentialCache;
    private bool isDisposed;
    public AuthorizationTokenProviderTokenCredential(TokenCredential tokenCredential, Uri accountEndpoint, Nullable`1<TimeSpan> backgroundTokenCredentialRefreshInterval);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.AuthorizationTokenProviderTokenCredential/<GetUserAuthorizationAsync>d__3")]
public virtual ValueTask`1<ValueTuple`2<string, string>> GetUserAuthorizationAsync(string resourceAddress, string resourceType, string requestVerb, INameValueCollection headers, AuthorizationTokenType tokenType);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.AuthorizationTokenProviderTokenCredential/<GetUserAuthorizationTokenAsync>d__4")]
public virtual ValueTask`1<string> GetUserAuthorizationTokenAsync(string resourceAddress, string resourceType, string requestVerb, INameValueCollection headers, AuthorizationTokenType tokenType, ITrace trace);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.AuthorizationTokenProviderTokenCredential/<AddAuthorizationHeaderAsync>d__5")]
public virtual ValueTask AddAuthorizationHeaderAsync(INameValueCollection headersCollection, Uri requestAddress, string verb, AuthorizationTokenType tokenType);
    public virtual void TraceUnauthorized(DocumentClientException dce, string authorizationToken, string payload);
    public static string GenerateAadAuthorizationSignature(string aadToken);
    public virtual void Dispose();
}
internal abstract class Microsoft.Azure.Cosmos.AvailabilityStrategy : object {
    internal static AvailabilityStrategy DisabledStrategy();
    public static AvailabilityStrategy CrossRegionHedgingStrategy(TimeSpan threshold, Nullable`1<TimeSpan> thresholdStep);
}
internal abstract class Microsoft.Azure.Cosmos.AvailabilityStrategyInternal : AvailabilityStrategy {
    internal abstract virtual Task`1<ResponseMessage> ExecuteAvailabilityStrategyAsync(Func`3<RequestMessage, CancellationToken, Task`1<ResponseMessage>> sender, CosmosClient client, RequestMessage requestMessage, CancellationToken cancellationToken);
    internal abstract virtual bool Enabled();
}
internal static class Microsoft.Azure.Cosmos.Base64Helper : object {
    public static void SecureStringToNativeBytes(SecureString secureString, int secureStringLength, IntPtr& bytes, UInt32& bytesLength);
    private static void ParseStringToIntPtr(SecureString secureString, IntPtr bytes, int allocationSize, UInt32& actualLength);
}
internal class Microsoft.Azure.Cosmos.BatchAsyncBatcher : object {
    private CosmosSerializerCore serializerCore;
    private List`1<ItemBatchOperation> batchOperations;
    private BatchAsyncBatcherExecuteDelegate executor;
    private BatchAsyncBatcherRetryDelegate retrier;
    private int maxBatchByteSize;
    private int maxBatchOperationCount;
    private InterlockIncrementCheck interlockIncrementCheck;
    private CosmosClientContext clientContext;
    private long currentSize;
    private bool dispatched;
    private bool isClientEncrypted;
    private string intendedCollectionRidValue;
    public bool IsEmpty { get; }
    public BatchAsyncBatcher(int maxBatchOperationCount, int maxBatchByteSize, CosmosSerializerCore serializerCore, BatchAsyncBatcherExecuteDelegate executor, BatchAsyncBatcherRetryDelegate retrier, CosmosClientContext clientContext);
    public bool get_IsEmpty();
    public virtual bool TryAdd(ItemBatchOperation operation);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchAsyncBatcher/<DispatchAsync>d__16")]
public virtual Task DispatchAsync(BatchPartitionMetric partitionMetric, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchAsyncBatcher/<DispatchHelperAsync>d__17")]
private Task`1<object> DispatchHelperAsync(ITrace trace, BatchPartitionMetric partitionMetric, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchAsyncBatcher/<CreateServerRequestAsync>d__18")]
internal virtual Task`1<Tuple`2<PartitionKeyRangeServerBatchRequest, ArraySegment`1<ItemBatchOperation>>> CreateServerRequestAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.BatchAsyncBatcherExecuteDelegate : MulticastDelegate {
    public BatchAsyncBatcherExecuteDelegate(object object, IntPtr method);
    public virtual Task`1<PartitionKeyRangeBatchExecutionResult> Invoke(PartitionKeyRangeServerBatchRequest request, ITrace trace, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(PartitionKeyRangeServerBatchRequest request, ITrace trace, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task`1<PartitionKeyRangeBatchExecutionResult> EndInvoke(IAsyncResult result);
}
internal class Microsoft.Azure.Cosmos.BatchAsyncBatcherRetryDelegate : MulticastDelegate {
    public BatchAsyncBatcherRetryDelegate(object object, IntPtr method);
    public virtual Task Invoke(ItemBatchOperation operation, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(ItemBatchOperation operation, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
internal class Microsoft.Azure.Cosmos.BatchAsyncContainerExecutor : object {
    private static int TimerWheelBucketCount;
    private static TimeSpan TimerWheelResolution;
    private ContainerInternal cosmosContainer;
    private CosmosClientContext cosmosClientContext;
    private int maxServerRequestBodyLength;
    private int maxServerRequestOperationCount;
    private ConcurrentDictionary`2<string, BatchAsyncStreamer> streamersByPartitionKeyRange;
    private ConcurrentDictionary`2<string, SemaphoreSlim> limitersByPartitionkeyRange;
    private TimerWheel timerWheel;
    private RetryOptions retryOptions;
    private int defaultMaxDegreeOfConcurrency;
    public BatchAsyncContainerExecutor(ContainerInternal cosmosContainer, CosmosClientContext cosmosClientContext, int maxServerRequestOperationCount, int maxServerRequestBodyLength);
    private static BatchAsyncContainerExecutor();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchAsyncContainerExecutor/<AddAsync>d__13")]
public virtual Task`1<TransactionalBatchOperationResult> AddAsync(ItemBatchOperation operation, ITrace trace, ItemRequestOptions itemRequestOptions, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchAsyncContainerExecutor/<ValidateOperationAsync>d__15")]
internal virtual Task ValidateOperationAsync(ItemBatchOperation operation, ItemRequestOptions itemRequestOptions, CancellationToken cancellationToken);
    private static IDocumentClientRetryPolicy GetRetryPolicy(ContainerInternal containerInternal, OperationType operationType, RetryOptions retryOptions);
    private static bool ValidateOperationEPK(ItemBatchOperation operation, ItemRequestOptions itemRequestOptions);
    private static void AddHeadersToRequestMessage(RequestMessage requestMessage, PartitionKeyRangeServerBatchRequest partitionKeyRangeServerBatchRequest);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchAsyncContainerExecutor/<ReBatchAsync>d__19")]
private Task ReBatchAsync(ItemBatchOperation operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchAsyncContainerExecutor/<ResolvePartitionKeyRangeIdAsync>d__20")]
private Task`1<string> ResolvePartitionKeyRangeIdAsync(ItemBatchOperation operation, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchAsyncContainerExecutor/<GetPartitionKeyInternalAsync>d__21")]
private Task`1<PartitionKeyInternal> GetPartitionKeyInternalAsync(ItemBatchOperation operation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchAsyncContainerExecutor/<ExecuteAsync>d__22")]
private Task`1<PartitionKeyRangeBatchExecutionResult> ExecuteAsync(PartitionKeyRangeServerBatchRequest serverRequest, ITrace trace, CancellationToken cancellationToken);
    private BatchAsyncStreamer GetOrAddStreamerForPartitionKeyRange(string partitionKeyRangeId);
    private SemaphoreSlim GetOrAddLimiterForPartitionKeyRange(string partitionKeyRangeId);
}
internal class Microsoft.Azure.Cosmos.BatchAsyncContainerExecutorCache : object {
    internal static int DefaultMaxBulkRequestBodySizeInBytes;
    private ConcurrentDictionary`2<string, BatchAsyncContainerExecutor> executorsPerContainer;
    public BatchAsyncContainerExecutor GetExecutorForContainer(ContainerInternal container, CosmosClientContext cosmosClientContext);
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.Cosmos.BatchAsyncStreamer : object {
    private static TimeSpan congestionControllerDelay;
    private static TimeSpan batchTimeout;
    private object dispatchLimiter;
    private int maxBatchOperationCount;
    private int maxBatchByteSize;
    private BatchAsyncBatcherExecuteDelegate executor;
    private BatchAsyncBatcherRetryDelegate retrier;
    private CosmosSerializerCore serializerCore;
    private CancellationTokenSource cancellationTokenSource;
    private int congestionIncreaseFactor;
    private int congestionDecreaseFactor;
    private int maxDegreeOfConcurrency;
    private TimerWheel timerWheel;
    private SemaphoreSlim limiter;
    private BatchPartitionMetric oldPartitionMetric;
    private BatchPartitionMetric partitionMetric;
    private CosmosClientContext clientContext;
    private BatchAsyncBatcher modreq(System.Runtime.CompilerServices.IsVolatile) currentBatcher;
    private TimerWheelTimer currentTimer;
    private Task timerTask;
    private TimerWheelTimer congestionControlTimer;
    private Task congestionControlTask;
    private int congestionDegreeOfConcurrency;
    private long congestionWaitTimeInMilliseconds;
    public BatchAsyncStreamer(int maxBatchOperationCount, int maxBatchByteSize, TimerWheel timerWheel, SemaphoreSlim limiter, int maxDegreeOfConcurrency, CosmosSerializerCore serializerCore, BatchAsyncBatcherExecuteDelegate executor, BatchAsyncBatcherRetryDelegate retrier, CosmosClientContext clientContext);
    private static BatchAsyncStreamer();
    public void Add(ItemBatchOperation operation);
    public sealed virtual void Dispose();
    private void ResetTimer();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchAsyncStreamer/<GetTimerTaskAsync>d__28")]
private Task GetTimerTaskAsync();
    private void StartCongestionControlTimer();
    private void DispatchTimer();
    private BatchAsyncBatcher GetBatchToDispatchAndCreate();
    private BatchAsyncBatcher CreateBatchAsyncBatcher();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchAsyncStreamer/<RunCongestionControlAsync>d__33")]
private Task RunCongestionControlAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchAsyncStreamer/<<StartCongestionControlTimer>b__29_0>d")]
[CompilerGeneratedAttribute]
private Task <StartCongestionControlTimer>b__29_0(Task task);
}
internal class Microsoft.Azure.Cosmos.BatchCore : TransactionalBatchInternal {
    private PartitionKey partitionKey;
    private ContainerInternal container;
    internal BatchCore(ContainerInternal container, PartitionKey partitionKey);
    public virtual TransactionalBatch CreateItem(T item, TransactionalBatchItemRequestOptions requestOptions);
    public virtual TransactionalBatch CreateItemStream(Stream streamPayload, TransactionalBatchItemRequestOptions requestOptions);
    public virtual TransactionalBatch ReadItem(string id, TransactionalBatchItemRequestOptions requestOptions);
    public virtual TransactionalBatch UpsertItem(T item, TransactionalBatchItemRequestOptions requestOptions);
    public virtual TransactionalBatch UpsertItemStream(Stream streamPayload, TransactionalBatchItemRequestOptions requestOptions);
    public virtual TransactionalBatch ReplaceItem(string id, T item, TransactionalBatchItemRequestOptions requestOptions);
    public virtual TransactionalBatch ReplaceItemStream(string id, Stream streamPayload, TransactionalBatchItemRequestOptions requestOptions);
    public virtual TransactionalBatch DeleteItem(string id, TransactionalBatchItemRequestOptions requestOptions);
    public virtual Task`1<TransactionalBatchResponse> ExecuteAsync(CancellationToken cancellationToken);
    public virtual Task`1<TransactionalBatchResponse> ExecuteAsync(TransactionalBatchRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual TransactionalBatch PatchItemStream(string id, Stream patchStream, TransactionalBatchPatchItemRequestOptions requestOptions);
    public virtual TransactionalBatch PatchItem(string id, IReadOnlyList`1<PatchOperation> patchOperations, TransactionalBatchPatchItemRequestOptions requestOptions);
}
internal static class Microsoft.Azure.Cosmos.BatchExecUtils : object {
    private static int BufferSize;
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchExecUtils/<StreamToMemoryAsync>d__1")]
public static Task`1<Memory`1<byte>> StreamToMemoryAsync(Stream stream, CancellationToken cancellationToken);
    public static void EnsureValid(IReadOnlyList`1<ItemBatchOperation> operations, RequestOptions batchOptions);
    internal static string IsValid(IReadOnlyList`1<ItemBatchOperation> operations, RequestOptions batchOptions);
    public static string GetPartitionKeyRangeId(PartitionKey partitionKey, PartitionKeyDefinition partitionKeyDefinition, CollectionRoutingMap collectionRoutingMap);
}
internal class Microsoft.Azure.Cosmos.BatchExecutor : object {
    private ContainerInternal container;
    private CosmosClientContext clientContext;
    private IReadOnlyList`1<ItemBatchOperation> inputOperations;
    private PartitionKey partitionKey;
    private RequestOptions batchOptions;
    public BatchExecutor(ContainerInternal container, PartitionKey partitionKey, IReadOnlyList`1<ItemBatchOperation> operations, RequestOptions batchOptions);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchExecutor/<ExecuteAsync>d__6")]
public Task`1<TransactionalBatchResponse> ExecuteAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BatchExecutor/<ExecuteServerRequestAsync>d__7")]
private Task`1<TransactionalBatchResponse> ExecuteServerRequestAsync(SinglePartitionKeyServerBatchRequest serverRequest, ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.BatchPartitionMetric : object {
    [CompilerGeneratedAttribute]
private long <NumberOfItemsOperatedOn>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TimeTakenInMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NumberOfThrottles>k__BackingField;
    public long NumberOfItemsOperatedOn { get; private set; }
    public long TimeTakenInMilliseconds { get; private set; }
    public long NumberOfThrottles { get; private set; }
    public BatchPartitionMetric(long numberOfItemsOperatedOn, long timeTakenInMilliseconds, long numberOfThrottles);
    [CompilerGeneratedAttribute]
public long get_NumberOfItemsOperatedOn();
    [CompilerGeneratedAttribute]
private void set_NumberOfItemsOperatedOn(long value);
    [CompilerGeneratedAttribute]
public long get_TimeTakenInMilliseconds();
    [CompilerGeneratedAttribute]
private void set_TimeTakenInMilliseconds(long value);
    [CompilerGeneratedAttribute]
public long get_NumberOfThrottles();
    [CompilerGeneratedAttribute]
private void set_NumberOfThrottles(long value);
    public void Add(long numberOfDocumentsOperatedOn, long timeTakenInMilliseconds, long numberOfThrottles);
}
internal static class Microsoft.Azure.Cosmos.BatchSchemaProvider : object {
    [CompilerGeneratedAttribute]
private static Namespace <BatchSchemaNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private static LayoutResolverNamespace <BatchLayoutResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private static Layout <BatchOperationLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private static Layout <BatchResultLayout>k__BackingField;
    public static Namespace BatchSchemaNamespace { get; private set; }
    public static LayoutResolverNamespace BatchLayoutResolver { get; private set; }
    public static Layout BatchOperationLayout { get; private set; }
    public static Layout BatchResultLayout { get; private set; }
    private static BatchSchemaProvider();
    [CompilerGeneratedAttribute]
public static Namespace get_BatchSchemaNamespace();
    [CompilerGeneratedAttribute]
private static void set_BatchSchemaNamespace(Namespace value);
    [CompilerGeneratedAttribute]
public static LayoutResolverNamespace get_BatchLayoutResolver();
    [CompilerGeneratedAttribute]
private static void set_BatchLayoutResolver(LayoutResolverNamespace value);
    [CompilerGeneratedAttribute]
public static Layout get_BatchOperationLayout();
    [CompilerGeneratedAttribute]
private static void set_BatchOperationLayout(Layout value);
    [CompilerGeneratedAttribute]
public static Layout get_BatchResultLayout();
    [CompilerGeneratedAttribute]
private static void set_BatchResultLayout(Layout value);
    private static string GetEmbeddedResource(string resourceName);
    private static string FormatResourceName(string namespaceName, string resourceName);
}
public class Microsoft.Azure.Cosmos.BoundingBoxProperties : object {
    [CompilerGeneratedAttribute]
private double <Xmin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ymin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Xmax>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ymax>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public double Xmin { get; public set; }
    [JsonPropertyAttribute]
public double Ymin { get; public set; }
    [JsonPropertyAttribute]
public double Xmax { get; public set; }
    [JsonPropertyAttribute]
public double Ymax { get; public set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public double get_Xmin();
    [CompilerGeneratedAttribute]
public void set_Xmin(double value);
    [CompilerGeneratedAttribute]
public double get_Ymin();
    [CompilerGeneratedAttribute]
public void set_Ymin(double value);
    [CompilerGeneratedAttribute]
public double get_Xmax();
    [CompilerGeneratedAttribute]
public void set_Xmax(double value);
    [CompilerGeneratedAttribute]
public double get_Ymax();
    [CompilerGeneratedAttribute]
public void set_Ymax(double value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
internal class Microsoft.Azure.Cosmos.BulkExecutionRetryPolicy : object {
    private static int SubstatusCodeBatchResponseSizeExceeded;
    private static int MaxRetryOn410;
    private IDocumentClientRetryPolicy nextRetryPolicy;
    private OperationType operationType;
    private ContainerInternal container;
    private int retriesOn410;
    public BulkExecutionRetryPolicy(ContainerInternal container, OperationType operationType, IDocumentClientRetryPolicy nextRetryPolicy);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BulkExecutionRetryPolicy/<ShouldRetryAsync>d__7")]
public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(Exception exception, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BulkExecutionRetryPolicy/<ShouldRetryAsync>d__8")]
public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(ResponseMessage cosmosResponseMessage, CancellationToken cancellationToken);
    public sealed virtual void OnBeforeSendRequest(DocumentServiceRequest request);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.BulkExecutionRetryPolicy/<ShouldRetryInternalAsync>d__10")]
private Task`1<ShouldRetryResult> ShouldRetryInternalAsync(Nullable`1<HttpStatusCode> statusCode, Nullable`1<SubStatusCodes> subStatusCode, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.AutoCheckpointer : ChangeFeedObserver {
    private ChangeFeedObserver observer;
    public AutoCheckpointer(ChangeFeedObserver observer);
    public virtual Task OpenAsync(string leaseToken);
    public virtual Task CloseAsync(string leaseToken, ChangeFeedObserverCloseReason reason);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.AutoCheckpointer/<ProcessChangesAsync>d__4")]
public virtual Task ProcessChangesAsync(ChangeFeedObserverContextCore context, Stream stream, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.Bootstrapping.Bootstrapper : object {
    public abstract virtual Task InitializeAsync();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Bootstrapping.BootstrapperCore : Bootstrapper {
    internal static TimeSpan DefaultSleepTime;
    internal static TimeSpan DefaultLockTime;
    private PartitionSynchronizer synchronizer;
    private DocumentServiceLeaseStore leaseStore;
    private TimeSpan lockTime;
    private TimeSpan sleepTime;
    public BootstrapperCore(PartitionSynchronizer synchronizer, DocumentServiceLeaseStore leaseStore, TimeSpan lockTime, TimeSpan sleepTime);
    private static BootstrapperCore();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Bootstrapping.BootstrapperCore/<InitializeAsync>d__7")]
public virtual Task InitializeAsync();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Bootstrapping.PartitionSynchronizerCore : PartitionSynchronizer {
    internal static int DefaultDegreeOfParallelism;
    private ContainerInternal container;
    private DocumentServiceLeaseContainer leaseContainer;
    private DocumentServiceLeaseManager leaseManager;
    private int degreeOfParallelism;
    private PartitionKeyRangeCache partitionKeyRangeCache;
    private string containerRid;
    public PartitionSynchronizerCore(ContainerInternal container, DocumentServiceLeaseContainer leaseContainer, DocumentServiceLeaseManager leaseManager, int degreeOfParallelism, PartitionKeyRangeCache partitionKeyRangeCache, string containerRid);
    private static PartitionSynchronizerCore();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Bootstrapping.PartitionSynchronizerCore/<CreateMissingLeasesAsync>d__8")]
public virtual Task CreateMissingLeasesAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Bootstrapping.PartitionSynchronizerCore/<HandlePartitionGoneAsync>d__9")]
public virtual Task`1<ValueTuple`2<IEnumerable`1<DocumentServiceLease>, bool>> HandlePartitionGoneAsync(DocumentServiceLease lease);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Bootstrapping.PartitionSynchronizerCore/<HandlePartitionGoneAsync>d__10")]
private Task`1<ValueTuple`2<IEnumerable`1<DocumentServiceLease>, bool>> HandlePartitionGoneAsync(string leaseToken, string lastContinuationToken, DocumentServiceLeaseCore partitionBasedLease, IReadOnlyList`1<PartitionKeyRange> overlappingRanges);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Bootstrapping.PartitionSynchronizerCore/<HandlePartitionGoneAsync>d__11")]
private Task`1<ValueTuple`2<IEnumerable`1<DocumentServiceLease>, bool>> HandlePartitionGoneAsync(string leaseToken, string lastContinuationToken, DocumentServiceLeaseCoreEpk feedRangeBasedLease, IReadOnlyList`1<PartitionKeyRange> overlappingRanges);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Bootstrapping.PartitionSynchronizerCore/<CreateLeasesAsync>d__12")]
private Task CreateLeasesAsync(IReadOnlyList`1<PartitionKeyRange> partitionKeyRanges);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Bootstrapping.PartitionSynchronizerCore/<<CreateLeasesAsync>b__12_0>d")]
[CompilerGeneratedAttribute]
private Task <CreateLeasesAsync>b__12_0(PartitionKeyRange addedRange);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedCrossFeedRangeAsyncEnumerable : object {
    private IDocumentContainer documentContainer;
    private ChangeFeedExecutionOptions changeFeedPaginationOptions;
    private ChangeFeedCrossFeedRangeState state;
    private JsonSerializationFormatOptions jsonSerializationFormatOptions;
    public ChangeFeedCrossFeedRangeAsyncEnumerable(IDocumentContainer documentContainer, ChangeFeedCrossFeedRangeState state, ChangeFeedExecutionOptions changeFeedPaginationOptions, JsonSerializationFormatOptions jsonSerializationFormatOptions);
    public sealed virtual IAsyncEnumerator`1<TryCatch`1<ChangeFeedPage>> GetAsyncEnumerator(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedCrossFeedRangeAsyncEnumerator : object {
    private CrossPartitionChangeFeedAsyncEnumerator enumerator;
    private JsonSerializationFormatOptions jsonSerializationFormatOptions;
    [CompilerGeneratedAttribute]
private TryCatch`1<ChangeFeedPage> <Current>k__BackingField;
    public TryCatch`1<ChangeFeedPage> Current { get; private set; }
    public ChangeFeedCrossFeedRangeAsyncEnumerator(CrossPartitionChangeFeedAsyncEnumerator enumerator, JsonSerializationFormatOptions jsonSerializationFormatOptions);
    [CompilerGeneratedAttribute]
public sealed virtual TryCatch`1<ChangeFeedPage> get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(TryCatch`1<ChangeFeedPage> value);
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedCrossFeedRangeAsyncEnumerator/<MoveNextAsync>d__8")]
public sealed virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedCrossFeedRangeState : ValueType {
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<FeedRangeState`1<ChangeFeedState>> <FeedRangeStates>k__BackingField;
    internal ReadOnlyMemory`1<FeedRangeState`1<ChangeFeedState>> FeedRangeStates { get; }
    public ChangeFeedCrossFeedRangeState(IReadOnlyList`1<FeedRangeState`1<ChangeFeedState>> feedRangeStates);
    internal ChangeFeedCrossFeedRangeState(ReadOnlyMemory`1<FeedRangeState`1<ChangeFeedState>> feedRangeStates);
    [CompilerGeneratedAttribute]
internal ReadOnlyMemory`1<FeedRangeState`1<ChangeFeedState>> get_FeedRangeStates();
    public ChangeFeedCrossFeedRangeState Merge(ChangeFeedCrossFeedRangeState first);
    public ChangeFeedCrossFeedRangeState Merge(ChangeFeedCrossFeedRangeState first, ChangeFeedCrossFeedRangeState second);
    public ChangeFeedCrossFeedRangeState Merge(ChangeFeedCrossFeedRangeState[] changeFeedCrossFeedRangeStates);
    public ChangeFeedCrossFeedRangeState Merge(IReadOnlyList`1<ChangeFeedCrossFeedRangeState> changeFeedCrossFeedRangeStates);
    public bool TrySplit(ChangeFeedCrossFeedRangeState& first, ChangeFeedCrossFeedRangeState& second);
    public bool TrySplit(ChangeFeedCrossFeedRangeState& first, ChangeFeedCrossFeedRangeState& second, ChangeFeedCrossFeedRangeState& third);
    public bool TrySplit(int numberOfPartitions, List`1& partitions);
    public CosmosElement ToCosmosElement();
    public virtual string ToString();
    public static ChangeFeedCrossFeedRangeState Parse(string text);
    public static bool TryParse(string text, ChangeFeedCrossFeedRangeState& state);
    public static ChangeFeedCrossFeedRangeState CreateFromBeginning();
    public static ChangeFeedCrossFeedRangeState CreateFromBeginning(FeedRange feedRange);
    public static ChangeFeedCrossFeedRangeState CreateFromNow();
    public static ChangeFeedCrossFeedRangeState CreateFromNow(FeedRange feedRange);
    public static ChangeFeedCrossFeedRangeState CreateFromTime(DateTime dateTimeUtc);
    public static ChangeFeedCrossFeedRangeState CreateFromTime(DateTime dateTimeUtc, FeedRange feedRange);
    public static ChangeFeedCrossFeedRangeState CreateFromContinuation(CosmosElement continuation);
    public static ChangeFeedCrossFeedRangeState CreateFromContinuation(CosmosElement continuation, FeedRange feedRange);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedEstimatorIterator : FeedIterator`1<ChangeFeedProcessorState> {
    private static string EstimatorDefaultHostName;
    private static char PKRangeIdSeparator;
    private static char SegmentSeparator;
    private static string LSNPropertyName;
    private ContainerInternal monitoredContainer;
    private ContainerInternal leaseContainer;
    private string processorName;
    private Func`4<DocumentServiceLease, string, bool, FeedIteratorInternal> monitoredContainerFeedCreator;
    private ChangeFeedEstimatorRequestOptions changeFeedEstimatorRequestOptions;
    private AsyncLazy`1<TryCatch`1<IReadOnlyList`1<DocumentServiceLease>>> lazyLeaseDocuments;
    private DocumentServiceLeaseContainer documentServiceLeaseContainer;
    private int currentPage;
    private int maxPage;
    private int pageSize;
    private bool hasMoreResults;
    public bool HasMoreResults { get; }
    public ChangeFeedEstimatorIterator(string processorName, ContainerInternal monitoredContainer, ContainerInternal leaseContainer, DocumentServiceLeaseContainer documentServiceLeaseContainer, ChangeFeedEstimatorRequestOptions changeFeedEstimatorRequestOptions);
    internal ChangeFeedEstimatorIterator(ContainerInternal monitoredContainer, ContainerInternal leaseContainer, DocumentServiceLeaseContainer documentServiceLeaseContainer, Func`4<DocumentServiceLease, string, bool, FeedIteratorInternal> monitoredContainerFeedCreator, ChangeFeedEstimatorRequestOptions changeFeedEstimatorRequestOptions);
    private ChangeFeedEstimatorIterator(string processorName, ContainerInternal monitoredContainer, ContainerInternal leaseContainer, DocumentServiceLeaseContainer documentServiceLeaseContainer, ChangeFeedEstimatorRequestOptions changeFeedEstimatorRequestOptions, Func`4<DocumentServiceLease, string, bool, FeedIteratorInternal> monitoredContainerFeedCreator);
    public virtual bool get_HasMoreResults();
    public virtual Task`1<FeedResponse`1<ChangeFeedProcessorState>> ReadNextAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedEstimatorIterator/<ReadNextAsync>d__21")]
public Task`1<FeedResponse`1<ChangeFeedProcessorState>> ReadNextAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedEstimatorIterator/<ReadNextInternalAsync>d__22")]
private Task`1<FeedResponse`1<ChangeFeedProcessorState>> ReadNextInternalAsync(ITrace trace, CancellationToken cancellationToken);
    internal static string ExtractLsnFromSessionToken(string sessionToken);
    private static string GetFirstItemLSN(IEnumerable`1<JObject> items);
    private static long TryConvertToNumber(string number);
    private static IEnumerable`1<JObject> GetItemsFromResponse(ResponseMessage response);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedEstimatorIterator/<GetRemainingWorkAsync>d__27")]
private Task`1<ValueTuple`2<ChangeFeedProcessorState, ResponseMessage>> GetRemainingWorkAsync(DocumentServiceLease existingLease, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedEstimatorIterator/<InitializeLeaseStoreAsync>d__28")]
private Task InitializeLeaseStoreAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedEstimatorIterator/<TryInitializeLeaseDocumentsAsync>d__29")]
private Task`1<TryCatch`1<IReadOnlyList`1<DocumentServiceLease>>> TryInitializeLeaseDocumentsAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task`1<TryCatch`1<IReadOnlyList`1<DocumentServiceLease>>> <.ctor>b__17_0(ITrace trace, CancellationToken innerCancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedEstimatorRunner : ChangeFeedProcessor {
    private static string EstimatorDefaultHostName;
    private ChangesEstimationHandler initialEstimateDelegate;
    private Nullable`1<TimeSpan> estimatorPeriod;
    private ChangeFeedProcessorHealthMonitor healthMonitor;
    private CancellationTokenSource shutdownCts;
    private ContainerInternal leaseContainer;
    private ContainerInternal monitoredContainer;
    private FeedEstimatorRunner feedEstimatorRunner;
    private ChangeFeedEstimator remainingWorkEstimator;
    private ChangeFeedLeaseOptions changeFeedLeaseOptions;
    private DocumentServiceLeaseContainer documentServiceLeaseContainer;
    private bool initialized;
    private bool running;
    private Task runAsync;
    public ChangeFeedEstimatorRunner(ChangesEstimationHandler initialEstimateDelegate, Nullable`1<TimeSpan> estimatorPeriod);
    internal ChangeFeedEstimatorRunner(ChangesEstimationHandler initialEstimateDelegate, Nullable`1<TimeSpan> estimatorPeriod, ChangeFeedEstimator remainingWorkEstimator);
    private ChangeFeedEstimatorRunner(Nullable`1<TimeSpan> estimatorPeriod);
    public void ApplyBuildConfiguration(DocumentServiceLeaseStoreManager customDocumentServiceLeaseStoreManager, ContainerInternal leaseContainer, string instanceName, ChangeFeedLeaseOptions changeFeedLeaseOptions, ChangeFeedProcessorOptions changeFeedProcessorOptions, ContainerInternal monitoredContainer);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedEstimatorRunner/<StartAsync>d__18")]
public virtual Task StartAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedEstimatorRunner/<StopAsync>d__19")]
public virtual Task StopAsync();
    private FeedEstimatorRunner BuildFeedEstimatorRunner();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedEstimatorRunner/<InitializeLeaseStoreAsync>d__21")]
private Task InitializeLeaseStoreAsync();
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedException : Exception {
    protected ChangeFeedException(string message);
    protected ChangeFeedException(string message, Exception innerException);
    public abstract virtual TResult Accept(ChangeFeedExceptionVisitor`1<TResult> visitor, ITrace trace);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedExceptionVisitor`1 : object {
    internal abstract virtual TResult Visit(MalformedChangeFeedContinuationTokenException malformedChangeFeedContinuationTokenException, ITrace trace);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedIteratorCore : FeedIteratorInternal {
    private IDocumentContainer documentContainer;
    private ChangeFeedRequestOptions changeFeedRequestOptions;
    private AsyncLazy`1<TryCatch`1<CrossPartitionChangeFeedAsyncEnumerator>> lazyMonadicEnumerator;
    private CosmosClientContext clientContext;
    private ChangeFeedQuerySpec changeFeedQuerySpec;
    private bool hasMoreResults;
    public bool HasMoreResults { get; }
    public ChangeFeedIteratorCore(IDocumentContainer documentContainer, ChangeFeedMode changeFeedMode, ChangeFeedRequestOptions changeFeedRequestOptions, ChangeFeedStartFrom changeFeedStartFrom, CosmosClientContext clientContext, ContainerInternal container, ChangeFeedQuerySpec changeFeedQuerySpec);
    public virtual bool get_HasMoreResults();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedIteratorCore/<ReadNextAsync>d__9")]
public virtual Task`1<ResponseMessage> ReadNextAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedIteratorCore/<ReadNextAsync>d__10")]
public virtual Task`1<ResponseMessage> ReadNextAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedIteratorCore/<ReadNextInternalAsync>d__11")]
private Task`1<ResponseMessage> ReadNextInternalAsync(ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedModeFullFidelity : ChangeFeedMode {
    [CompilerGeneratedAttribute]
private static ChangeFeedMode <Instance>k__BackingField;
    public static ChangeFeedMode Instance { get; }
    private static ChangeFeedModeFullFidelity();
    [CompilerGeneratedAttribute]
public static ChangeFeedMode get_Instance();
    internal virtual void Accept(RequestMessage requestMessage);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedModeIncremental : ChangeFeedMode {
    [CompilerGeneratedAttribute]
private static ChangeFeedMode <Instance>k__BackingField;
    public static ChangeFeedMode Instance { get; }
    private static ChangeFeedModeIncremental();
    [CompilerGeneratedAttribute]
public static ChangeFeedMode get_Instance();
    internal virtual void Accept(RequestMessage requestMessage);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedObserver : object {
    public abstract virtual Task OpenAsync(string leaseToken);
    public abstract virtual Task CloseAsync(string leaseToken, ChangeFeedObserverCloseReason reason);
    public abstract virtual Task ProcessChangesAsync(ChangeFeedObserverContextCore context, Stream stream, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedObserverBase : ChangeFeedObserver {
    private ChangeFeedObserverBaseHandler onChanges;
    public ChangeFeedObserverBase(ChangeFeedObserverBaseHandler onChanges);
    public virtual Task OpenAsync(string leaseToken);
    public virtual Task CloseAsync(string leaseToken, ChangeFeedObserverCloseReason reason);
    public virtual Task ProcessChangesAsync(ChangeFeedObserverContextCore context, Stream stream, CancellationToken cancellationToken);
}
internal enum Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedObserverCloseReason : Enum {
    public int value__;
    public static ChangeFeedObserverCloseReason Unknown;
    public static ChangeFeedObserverCloseReason Shutdown;
    public static ChangeFeedObserverCloseReason ResourceGone;
    public static ChangeFeedObserverCloseReason LeaseLost;
    public static ChangeFeedObserverCloseReason ObserverError;
    public static ChangeFeedObserverCloseReason LeaseGone;
    public static ChangeFeedObserverCloseReason ReadSessionNotAvailable;
    public static ChangeFeedObserverCloseReason CosmosException;
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedObserverContextCore : object {
    private PartitionCheckpointer checkpointer;
    private ResponseMessage responseMessage;
    [CompilerGeneratedAttribute]
private string <LeaseToken>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedRange <FeedRange>k__BackingField;
    public string LeaseToken { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public Headers Headers { get; }
    public FeedRange FeedRange { get; }
    internal ChangeFeedObserverContextCore(string leaseToken, ResponseMessage feedResponse, PartitionCheckpointer checkpointer, FeedRange feedRange);
    [CompilerGeneratedAttribute]
public string get_LeaseToken();
    public CosmosDiagnostics get_Diagnostics();
    public Headers get_Headers();
    [CompilerGeneratedAttribute]
public FeedRange get_FeedRange();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedObserverContextCore/<CheckpointAsync>d__13")]
public Task CheckpointAsync();
    public static ChangeFeedProcessorContext op_Implicit(ChangeFeedObserverContextCore contextCore);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedObserverFactory : object {
    public abstract virtual ChangeFeedObserver CreateObserver();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedObserverFactoryCore : ChangeFeedObserverFactory {
    private ChangeFeedStreamHandler onChanges;
    private ChangeFeedStreamHandlerWithManualCheckpoint onChangesWithManualCheckpoint;
    public ChangeFeedObserverFactoryCore(ChangeFeedStreamHandler onChanges);
    public ChangeFeedObserverFactoryCore(ChangeFeedStreamHandlerWithManualCheckpoint onChanges);
    public virtual ChangeFeedObserver CreateObserver();
    private Task ChangesStreamHandlerAsync(ChangeFeedObserverContextCore context, Stream stream, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedObserverFactoryCore`1 : ChangeFeedObserverFactory {
    private ChangesHandler`1<T> legacyOnChanges;
    private ChangeFeedHandler`1<T> onChanges;
    private ChangeFeedHandlerWithManualCheckpoint`1<T> onChangesWithManualCheckpoint;
    private ChangeFeedHandler`1<ChangeFeedItem`1<T>> onAllVersionsAndDeletesChanges;
    private CosmosSerializerCore serializerCore;
    public ChangeFeedObserverFactoryCore`1(ChangesHandler`1<T> onChanges, CosmosSerializerCore serializerCore);
    public ChangeFeedObserverFactoryCore`1(ChangeFeedHandler`1<T> onChanges, CosmosSerializerCore serializerCore);
    public ChangeFeedObserverFactoryCore`1(ChangeFeedHandler`1<ChangeFeedItem`1<T>> onChanges, CosmosSerializerCore serializerCore);
    public ChangeFeedObserverFactoryCore`1(ChangeFeedHandlerWithManualCheckpoint`1<T> onChanges, CosmosSerializerCore serializerCore);
    private ChangeFeedObserverFactoryCore`1(CosmosSerializerCore serializerCore);
    public virtual ChangeFeedObserver CreateObserver();
    private Task ChangesStreamHandlerAsync(ChangeFeedObserverContextCore context, Stream stream, CancellationToken cancellationToken);
    private Task AllVersionsAndDeletesStreamHandlerAsync(ChangeFeedObserverContextCore context, Stream stream, CancellationToken cancellationToken);
    private IReadOnlyCollection`1<T> AsIReadOnlyCollection(Stream stream, ChangeFeedObserverContextCore context);
    private IReadOnlyCollection`1<ChangeFeedItem`1<T>> AllVersionsAsIReadOnlyCollection(Stream stream, ChangeFeedObserverContextCore context);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedPage : object {
    [CompilerGeneratedAttribute]
private CosmosArray <Documents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NotModified>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RequestCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private ChangeFeedCrossFeedRangeState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <AdditionalHeaders>k__BackingField;
    public CosmosArray Documents { get; }
    public bool NotModified { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public ChangeFeedCrossFeedRangeState State { get; }
    public IReadOnlyDictionary`2<string, string> AdditionalHeaders { get; }
    private ChangeFeedPage(CosmosArray documents, bool notModified, double requestCharge, string activityId, ChangeFeedCrossFeedRangeState state, IReadOnlyDictionary`2<string, string> additionalHeaders);
    [CompilerGeneratedAttribute]
public CosmosArray get_Documents();
    [CompilerGeneratedAttribute]
public bool get_NotModified();
    [CompilerGeneratedAttribute]
public double get_RequestCharge();
    [CompilerGeneratedAttribute]
public string get_ActivityId();
    [CompilerGeneratedAttribute]
public ChangeFeedCrossFeedRangeState get_State();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_AdditionalHeaders();
    public static ChangeFeedPage CreateNotModifiedPage(double requestCharge, string activityId, ChangeFeedCrossFeedRangeState state, IReadOnlyDictionary`2<string, string> additionalHeaders);
    public static ChangeFeedPage CreatePageWithChanges(CosmosArray documents, double requestCharge, string activityId, ChangeFeedCrossFeedRangeState state, IReadOnlyDictionary`2<string, string> additionalHeaders);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedPartitionKeyResultSetIteratorCore : FeedIteratorInternal {
    private CosmosClientContext clientContext;
    private ChangeFeedRequestOptions changeFeedOptions;
    private ChangeFeedMode mode;
    private ChangeFeedStartFrom changeFeedStartFrom;
    private bool hasMoreResultsInternal;
    public bool HasMoreResults { get; }
    private ChangeFeedPartitionKeyResultSetIteratorCore(ContainerInternal container, ChangeFeedMode mode, ChangeFeedStartFrom changeFeedStartFrom, ChangeFeedRequestOptions options);
    public static ChangeFeedPartitionKeyResultSetIteratorCore Create(DocumentServiceLease lease, ChangeFeedMode mode, string continuationToken, Nullable`1<int> maxItemCount, ContainerInternal container, Nullable`1<DateTime> startTime, bool startFromBeginning);
    public virtual bool get_HasMoreResults();
    public virtual Task`1<ResponseMessage> ReadNextAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedPartitionKeyResultSetIteratorCore/<ReadNextAsync>d__10")]
public virtual Task`1<ResponseMessage> ReadNextAsync(ITrace trace, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <ReadNextAsync>b__10_0(RequestMessage requestMessage);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedProcessorContextCore : ChangeFeedProcessorContext {
    private ChangeFeedObserverContextCore changeFeedObserverContextCore;
    public string LeaseToken { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public Headers Headers { get; }
    public FeedRange FeedRange { get; }
    public ChangeFeedProcessorContextCore(ChangeFeedObserverContextCore changeFeedObserverContextCore);
    public virtual string get_LeaseToken();
    public virtual CosmosDiagnostics get_Diagnostics();
    public virtual Headers get_Headers();
    public virtual FeedRange get_FeedRange();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedProcessorCore : ChangeFeedProcessor {
    private ChangeFeedObserverFactory observerFactory;
    private ContainerInternal leaseContainer;
    private string instanceName;
    private ContainerInternal monitoredContainer;
    private PartitionManager partitionManager;
    private ChangeFeedLeaseOptions changeFeedLeaseOptions;
    private ChangeFeedProcessorOptions changeFeedProcessorOptions;
    private DocumentServiceLeaseStoreManager documentServiceLeaseStoreManager;
    private bool initialized;
    public ChangeFeedProcessorCore(ChangeFeedObserverFactory observerFactory);
    public void ApplyBuildConfiguration(DocumentServiceLeaseStoreManager customDocumentServiceLeaseStoreManager, ContainerInternal leaseContainer, string instanceName, ChangeFeedLeaseOptions changeFeedLeaseOptions, ChangeFeedProcessorOptions changeFeedProcessorOptions, ContainerInternal monitoredContainer);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedProcessorCore/<StartAsync>d__11")]
public virtual Task StartAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedProcessorCore/<StopAsync>d__12")]
public virtual Task StopAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedProcessorCore/<InitializeAsync>d__13")]
private Task InitializeAsync();
    private PartitionManager BuildPartitionManager(string containerRid, PartitionKeyRangeCache partitionKeyRangeCache);
}
[DataContractAttribute]
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedQuerySpec : object {
    [CompilerGeneratedAttribute]
private string <QueryText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableQueryOnPreviousImage>k__BackingField;
    [DataMemberAttribute]
private string QueryText { get; private set; }
    [DataMemberAttribute]
private bool EnableQueryOnPreviousImage { get; private set; }
    public ChangeFeedQuerySpec(string queryText, bool enableQueryOnPreviousImage);
    public ChangeFeedQuerySpec(string queryText);
    [CompilerGeneratedAttribute]
private string get_QueryText();
    [CompilerGeneratedAttribute]
private void set_QueryText(string value);
    [CompilerGeneratedAttribute]
private bool get_EnableQueryOnPreviousImage();
    [CompilerGeneratedAttribute]
private void set_EnableQueryOnPreviousImage(bool value);
    internal bool ShouldSerializeQueryText();
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedStartFromAsyncVisitor`2 : object {
    public abstract virtual Task`1<TResult> VisitAsync(ChangeFeedStartFromNow startFromNow, TInput input, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> VisitAsync(ChangeFeedStartFromTime startFromTime, TInput input, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> VisitAsync(ChangeFeedStartFromContinuation startFromContinuation, TInput input, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> VisitAsync(ChangeFeedStartFromBeginning startFromBeginning, TInput input, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> VisitAsync(ChangeFeedStartFromContinuationAndFeedRange startFromContinuationAndFeedRange, TInput input, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedStartFromBeginning : ChangeFeedStartFrom {
    public ChangeFeedStartFromBeginning(FeedRangeInternal feedRange);
    internal virtual void Accept(ChangeFeedStartFromVisitor visitor);
    internal virtual TResult Accept(ChangeFeedStartFromVisitor`1<TResult> visitor);
    internal virtual Task`1<TOutput> AcceptAsync(ChangeFeedStartFromAsyncVisitor`2<TInput, TOutput> visitor, TInput input, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedStartFromContinuation : ChangeFeedStartFrom {
    [CompilerGeneratedAttribute]
private string <Continuation>k__BackingField;
    public string Continuation { get; }
    public ChangeFeedStartFromContinuation(string continuation);
    [CompilerGeneratedAttribute]
public string get_Continuation();
    internal virtual void Accept(ChangeFeedStartFromVisitor visitor);
    internal virtual TResult Accept(ChangeFeedStartFromVisitor`1<TResult> visitor);
    internal virtual Task`1<TOutput> AcceptAsync(ChangeFeedStartFromAsyncVisitor`2<TInput, TOutput> visitor, TInput input, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedStartFromContinuationAndFeedRange : ChangeFeedStartFrom {
    [CompilerGeneratedAttribute]
private string <Etag>k__BackingField;
    public string Etag { get; }
    public ChangeFeedStartFromContinuationAndFeedRange(string etag, FeedRangeInternal feedRange);
    [CompilerGeneratedAttribute]
public string get_Etag();
    internal virtual void Accept(ChangeFeedStartFromVisitor visitor);
    internal virtual TResult Accept(ChangeFeedStartFromVisitor`1<TResult> visitor);
    internal virtual Task`1<TResult> AcceptAsync(ChangeFeedStartFromAsyncVisitor`2<TInput, TResult> visitor, TInput input, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedStartFromNow : ChangeFeedStartFrom {
    public ChangeFeedStartFromNow(FeedRangeInternal feedRange);
    internal virtual void Accept(ChangeFeedStartFromVisitor visitor);
    internal virtual TResult Accept(ChangeFeedStartFromVisitor`1<TResult> visitor);
    internal virtual Task`1<TOutput> AcceptAsync(ChangeFeedStartFromAsyncVisitor`2<TInput, TOutput> visitor, TInput input, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedStartFromRequestOptionPopulator : ChangeFeedStartFromVisitor {
    private static string IfNoneMatchAllHeaderValue;
    private static DateTime StartFromBeginningTime;
    private RequestMessage requestMessage;
    public ChangeFeedStartFromRequestOptionPopulator(RequestMessage requestMessage);
    private static ChangeFeedStartFromRequestOptionPopulator();
    public virtual void Visit(ChangeFeedStartFromNow startFromNow);
    public virtual void Visit(ChangeFeedStartFromTime startFromTime);
    public virtual void Visit(ChangeFeedStartFromContinuation startFromContinuation);
    public virtual void Visit(ChangeFeedStartFromBeginning startFromBeginning);
    public virtual void Visit(ChangeFeedStartFromContinuationAndFeedRange startFromContinuationAndFeedRange);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedStartFromTime : ChangeFeedStartFrom {
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    public DateTime StartTime { get; }
    public ChangeFeedStartFromTime(DateTime time, FeedRangeInternal feedRange);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    internal virtual void Accept(ChangeFeedStartFromVisitor visitor);
    internal virtual TResult Accept(ChangeFeedStartFromVisitor`1<TResult> visitor);
    internal virtual Task`1<TOutput> AcceptAsync(ChangeFeedStartFromAsyncVisitor`2<TInput, TOutput> visitor, TInput input, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedStartFromVisitor : object {
    public abstract virtual void Visit(ChangeFeedStartFromNow startFromNow);
    public abstract virtual void Visit(ChangeFeedStartFromTime startFromTime);
    public abstract virtual void Visit(ChangeFeedStartFromContinuation startFromContinuation);
    public abstract virtual void Visit(ChangeFeedStartFromBeginning startFromBeginning);
    public abstract virtual void Visit(ChangeFeedStartFromContinuationAndFeedRange startFromContinuationAndFeedRange);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.ChangeFeedStartFromVisitor`1 : object {
    public abstract virtual TResult Visit(ChangeFeedStartFromNow startFromNow);
    public abstract virtual TResult Visit(ChangeFeedStartFromTime startFromTime);
    public abstract virtual TResult Visit(ChangeFeedStartFromContinuation startFromContinuation);
    public abstract virtual TResult Visit(ChangeFeedStartFromBeginning startFromBeginning);
    public abstract virtual TResult Visit(ChangeFeedStartFromContinuationAndFeedRange startFromContinuationAndFeedRange);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedLeaseOptions : object {
    internal static TimeSpan DefaultRenewInterval;
    internal static TimeSpan DefaultAcquireInterval;
    internal static TimeSpan DefaultExpirationInterval;
    [CompilerGeneratedAttribute]
private TimeSpan <LeaseRenewInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LeaseAcquireInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LeaseExpirationInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeasePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private ChangeFeedMode <Mode>k__BackingField;
    public TimeSpan LeaseRenewInterval { get; public set; }
    public TimeSpan LeaseAcquireInterval { get; public set; }
    public TimeSpan LeaseExpirationInterval { get; public set; }
    public string LeasePrefix { get; public set; }
    public ChangeFeedMode Mode { get; public set; }
    private static ChangeFeedLeaseOptions();
    [CompilerGeneratedAttribute]
public TimeSpan get_LeaseRenewInterval();
    [CompilerGeneratedAttribute]
public void set_LeaseRenewInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_LeaseAcquireInterval();
    [CompilerGeneratedAttribute]
public void set_LeaseAcquireInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_LeaseExpirationInterval();
    [CompilerGeneratedAttribute]
public void set_LeaseExpirationInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_LeasePrefix();
    [CompilerGeneratedAttribute]
public void set_LeasePrefix(string value);
    [CompilerGeneratedAttribute]
public ChangeFeedMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(ChangeFeedMode value);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Configuration.ChangeFeedProcessorOptions : object {
    private static TimeSpan DefaultFeedPollDelay;
    private Nullable`1<DateTime> startTime;
    [CompilerGeneratedAttribute]
private TimeSpan <FeedPollDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartContinuation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StartFromBeginning>k__BackingField;
    [CompilerGeneratedAttribute]
private ChangeFeedProcessorHealthMonitorCore <HealthMonitor>k__BackingField;
    [CompilerGeneratedAttribute]
private ChangeFeedMode <Mode>k__BackingField;
    public TimeSpan FeedPollDelay { get; public set; }
    public Nullable`1<int> MaxItemCount { get; public set; }
    public string StartContinuation { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    public bool StartFromBeginning { get; public set; }
    public ChangeFeedProcessorHealthMonitorCore HealthMonitor { get; public set; }
    public ChangeFeedMode Mode { get; public set; }
    private static ChangeFeedProcessorOptions();
    [CompilerGeneratedAttribute]
public TimeSpan get_FeedPollDelay();
    [CompilerGeneratedAttribute]
public void set_FeedPollDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxItemCount();
    [CompilerGeneratedAttribute]
public void set_MaxItemCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_StartContinuation();
    [CompilerGeneratedAttribute]
public void set_StartContinuation(string value);
    public Nullable`1<DateTime> get_StartTime();
    public void set_StartTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public bool get_StartFromBeginning();
    [CompilerGeneratedAttribute]
public void set_StartFromBeginning(bool value);
    [CompilerGeneratedAttribute]
public ChangeFeedProcessorHealthMonitorCore get_HealthMonitor();
    [CompilerGeneratedAttribute]
public void set_HealthMonitor(ChangeFeedProcessorHealthMonitorCore value);
    [CompilerGeneratedAttribute]
public ChangeFeedMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(ChangeFeedMode value);
}
internal enum Microsoft.Azure.Cosmos.ChangeFeed.DocDBErrors.DocDbError : Enum {
    public int value__;
    public static DocDbError Undefined;
    public static DocDbError PartitionSplit;
}
internal static class Microsoft.Azure.Cosmos.ChangeFeed.DocDBErrors.ExceptionClassifier : object {
    public static DocDbError ClassifyStatusCodes(HttpStatusCode statusCode, int subStatusCode);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.ChangeFeed.DocDBErrors.SubStatusHelpers : object {
    [ExtensionAttribute]
public static SubStatusCodes GetSubStatusCode(DocumentClientException exception);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.FeedException : Exception {
    [CompilerGeneratedAttribute]
private string <LastContinuation>k__BackingField;
    public string LastContinuation { get; }
    public FeedException(string message, string lastContinuation);
    protected FeedException(string message, string lastContinuation, Exception innerException);
    protected FeedException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_LastContinuation();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.FeedRangeGoneException : FeedException {
    public FeedRangeGoneException(string message, string lastContinuation);
    protected FeedRangeGoneException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Exceptions.LeaseLostException : Exception {
    private static string DefaultMessage;
    [CompilerGeneratedAttribute]
private DocumentServiceLease <Lease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGone>k__BackingField;
    public DocumentServiceLease Lease { get; }
    public bool IsGone { get; }
    public LeaseLostException(DocumentServiceLease lease);
    public LeaseLostException(string message);
    public LeaseLostException(string message, Exception innerException);
    public LeaseLostException(DocumentServiceLease lease, bool isGone);
    public LeaseLostException(DocumentServiceLease lease, Exception innerException, bool isGone);
    protected LeaseLostException(SerializationInfo info, StreamingContext context);
    private static LeaseLostException();
    [CompilerGeneratedAttribute]
public DocumentServiceLease get_Lease();
    [CompilerGeneratedAttribute]
public bool get_IsGone();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.EqualPartitionsBalancingStrategy : LoadBalancingStrategy {
    internal static int DefaultMinLeaseCount;
    internal static int DefaultMaxLeaseCount;
    private string hostName;
    private int minPartitionCount;
    private int maxPartitionCount;
    private TimeSpan leaseExpirationInterval;
    public EqualPartitionsBalancingStrategy(string hostName, int minPartitionCount, int maxPartitionCount, TimeSpan leaseExpirationInterval);
    public virtual IEnumerable`1<DocumentServiceLease> SelectLeasesToTake(IEnumerable`1<DocumentServiceLease> allLeases);
    private static DocumentServiceLease GetLeaseToSteal(Dictionary`2<string, int> workerToPartitionCount, int target, int partitionsNeededForMe, Dictionary`2<string, DocumentServiceLease> allPartitions);
    private static KeyValuePair`2<string, int> FindWorkerWithMostPartitions(Dictionary`2<string, int> workerToPartitionCount);
    private int CalculateTargetPartitionCount(int partitionCount, int workerCount);
    private void CategorizeLeases(IEnumerable`1<DocumentServiceLease> allLeases, Dictionary`2<string, DocumentServiceLease> allPartitions, List`1<DocumentServiceLease> expiredLeases, Dictionary`2<string, int> workerToPartitionCount);
    private bool IsExpired(DocumentServiceLease lease);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.LeaseRenewer : object {
    public abstract virtual Task RunAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.LeaseRenewerCore : LeaseRenewer {
    private DocumentServiceLeaseManager leaseManager;
    private TimeSpan leaseRenewInterval;
    private DocumentServiceLease lease;
    public LeaseRenewerCore(DocumentServiceLease lease, DocumentServiceLeaseManager leaseManager, TimeSpan leaseRenewInterval);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.LeaseRenewerCore/<RunAsync>d__4")]
public virtual Task RunAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.LeaseRenewerCore/<RenewAsync>d__5")]
private Task RenewAsync();
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.LoadBalancingStrategy : object {
    public abstract virtual IEnumerable`1<DocumentServiceLease> SelectLeasesToTake(IEnumerable`1<DocumentServiceLease> allLeases);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionCheckpointer : object {
    public abstract virtual Task CheckpointPartitionAsync(string сontinuationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionCheckpointerCore : PartitionCheckpointer {
    private DocumentServiceLeaseCheckpointer leaseCheckpointer;
    private DocumentServiceLease lease;
    public PartitionCheckpointerCore(DocumentServiceLeaseCheckpointer leaseCheckpointer, DocumentServiceLease lease);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionCheckpointerCore/<CheckpointPartitionAsync>d__3")]
public virtual Task CheckpointPartitionAsync(string сontinuationToken);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionController : object {
    public abstract virtual Task AddOrUpdateLeaseAsync(DocumentServiceLease lease);
    public abstract virtual Task InitializeAsync();
    public abstract virtual Task ShutdownAsync();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionControllerCore : PartitionController {
    private ConcurrentDictionary`2<string, TaskCompletionSource`1<bool>> currentlyOwnedPartitions;
    private DocumentServiceLeaseContainer leaseContainer;
    private DocumentServiceLeaseManager leaseManager;
    private PartitionSupervisorFactory partitionSupervisorFactory;
    private PartitionSynchronizer synchronizer;
    private ChangeFeedProcessorHealthMonitor monitor;
    private CancellationTokenSource shutdownCts;
    public PartitionControllerCore(DocumentServiceLeaseContainer leaseContainer, DocumentServiceLeaseManager leaseManager, PartitionSupervisorFactory partitionSupervisorFactory, PartitionSynchronizer synchronizer, ChangeFeedProcessorHealthMonitor monitor);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionControllerCore/<InitializeAsync>d__8")]
public virtual Task InitializeAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionControllerCore/<AddOrUpdateLeaseAsync>d__9")]
public virtual Task AddOrUpdateLeaseAsync(DocumentServiceLease lease);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionControllerCore/<ShutdownAsync>d__10")]
public virtual Task ShutdownAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionControllerCore/<LoadLeasesAsync>d__11")]
private Task LoadLeasesAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionControllerCore/<RemoveLeaseAsync>d__12")]
private Task RemoveLeaseAsync(DocumentServiceLease lease, bool wasAcquired);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionControllerCore/<ProcessPartitionAsync>d__13")]
private Task ProcessPartitionAsync(DocumentServiceLease lease);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionControllerCore/<HandlePartitionGoneAsync>d__14")]
private Task HandlePartitionGoneAsync(DocumentServiceLease lease, string lastContinuationToken);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionLoadBalancer : object {
    public abstract virtual void Start();
    public abstract virtual Task StopAsync();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionLoadBalancerCore : PartitionLoadBalancer {
    private PartitionController partitionController;
    private DocumentServiceLeaseContainer leaseContainer;
    private LoadBalancingStrategy partitionLoadBalancingStrategy;
    private TimeSpan leaseAcquireInterval;
    private CancellationTokenSource cancellationTokenSource;
    private Task runTask;
    public PartitionLoadBalancerCore(PartitionController partitionController, DocumentServiceLeaseContainer leaseContainer, LoadBalancingStrategy partitionLoadBalancingStrategy, TimeSpan leaseAcquireInterval);
    public virtual void Start();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionLoadBalancerCore/<StopAsync>d__8")]
public virtual Task StopAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionLoadBalancerCore/<RunAsync>d__9")]
private Task RunAsync();
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionManager : object {
    public abstract virtual Task StartAsync();
    public abstract virtual Task StopAsync();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionManagerCore : PartitionManager {
    private Bootstrapper bootstrapper;
    private PartitionController partitionController;
    private PartitionLoadBalancer partitionLoadBalancer;
    public PartitionManagerCore(Bootstrapper bootstrapper, PartitionController partitionController, PartitionLoadBalancer partitionLoadBalancer);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionManagerCore/<StartAsync>d__4")]
public virtual Task StartAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionManagerCore/<StopAsync>d__5")]
public virtual Task StopAsync();
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionSupervisor : object {
    public abstract virtual Task RunAsync(CancellationToken shutdownToken);
    public abstract virtual void Dispose();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionSupervisorCore : PartitionSupervisor {
    private DocumentServiceLease lease;
    private ChangeFeedObserver observer;
    private FeedProcessor processor;
    private LeaseRenewer renewer;
    private CancellationTokenSource renewerCancellation;
    private CancellationTokenSource processorCancellation;
    public PartitionSupervisorCore(DocumentServiceLease lease, ChangeFeedObserver observer, FeedProcessor processor, LeaseRenewer renewer);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionSupervisorCore/<RunAsync>d__7")]
public virtual Task RunAsync(CancellationToken shutdownToken);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <RunAsync>b__7_0(Task _);
    [CompilerGeneratedAttribute]
private void <RunAsync>b__7_1(Task _);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionSupervisorFactory : object {
    public abstract virtual PartitionSupervisor Create(DocumentServiceLease lease);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionSupervisorFactoryCore : PartitionSupervisorFactory {
    private ChangeFeedObserverFactory observerFactory;
    private DocumentServiceLeaseManager leaseManager;
    private ChangeFeedLeaseOptions changeFeedLeaseOptions;
    private FeedProcessorFactory partitionProcessorFactory;
    public PartitionSupervisorFactoryCore(ChangeFeedObserverFactory observerFactory, DocumentServiceLeaseManager leaseManager, FeedProcessorFactory partitionProcessorFactory, ChangeFeedLeaseOptions options);
    public virtual PartitionSupervisor Create(DocumentServiceLease lease);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.FeedManagement.PartitionSynchronizer : object {
    public abstract virtual Task CreateMissingLeasesAsync();
    public abstract virtual Task`1<ValueTuple`2<IEnumerable`1<DocumentServiceLease>, bool>> HandlePartitionGoneAsync(DocumentServiceLease lease);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.CheckpointerObserverFactory : ChangeFeedObserverFactory {
    private ChangeFeedObserverFactory observerFactory;
    private bool withManualCheckpointing;
    public CheckpointerObserverFactory(ChangeFeedObserverFactory observerFactory, bool withManualCheckpointing);
    public virtual ChangeFeedObserver CreateObserver();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedEstimatorRunner : object {
    private static string EstimationLeaseIdentifier;
    private static TimeSpan defaultMonitoringDelay;
    private ChangeFeedEstimator remainingWorkEstimator;
    private TimeSpan monitoringDelay;
    private ChangesEstimationHandler dispatchEstimation;
    private ChangeFeedProcessorHealthMonitor healthMonitor;
    public FeedEstimatorRunner(ChangesEstimationHandler dispatchEstimation, ChangeFeedEstimator remainingWorkEstimator, ChangeFeedProcessorHealthMonitor healthMonitor, Nullable`1<TimeSpan> estimationPeriod);
    private static FeedEstimatorRunner();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedEstimatorRunner/<RunAsync>d__7")]
public Task RunAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedEstimatorRunner/<EstimateAsync>d__8")]
private Task EstimateAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedEstimatorRunner/<GetEstimatedRemainingWorkAsync>d__9")]
private Task`1<long> GetEstimatedRemainingWorkAsync(CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedProcessor : object {
    public abstract virtual Task RunAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedProcessorCore : FeedProcessor {
    private ProcessorOptions options;
    private PartitionCheckpointer checkpointer;
    private ChangeFeedObserver observer;
    private FeedIterator resultSetIterator;
    public FeedProcessorCore(ChangeFeedObserver observer, FeedIterator resultSetIterator, ProcessorOptions options, PartitionCheckpointer checkpointer);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedProcessorCore/<RunAsync>d__5")]
public virtual Task RunAsync(CancellationToken cancellationToken);
    private void HandleFailedRequest(ResponseMessage responseMessage, string lastContinuation);
    private Task DispatchChangesAsync(ResponseMessage response, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedProcessorFactory : object {
    public abstract virtual FeedProcessor Create(DocumentServiceLease lease, ChangeFeedObserver observer);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.FeedProcessorFactoryCore : FeedProcessorFactory {
    private ContainerInternal container;
    private ChangeFeedProcessorOptions changeFeedProcessorOptions;
    private DocumentServiceLeaseCheckpointer leaseCheckpointer;
    public FeedProcessorFactoryCore(ContainerInternal container, ChangeFeedProcessorOptions changeFeedProcessorOptions, DocumentServiceLeaseCheckpointer leaseCheckpointer);
    public virtual FeedProcessor Create(DocumentServiceLease lease, ChangeFeedObserver observer);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.FeedProcessing.ProcessorOptions : object {
    [CompilerGeneratedAttribute]
private string <LeaseToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <FeedPollDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartContinuation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StartFromBeginning>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RequestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedRange <FeedRange>k__BackingField;
    public string LeaseToken { get; public set; }
    public Nullable`1<int> MaxItemCount { get; public set; }
    public TimeSpan FeedPollDelay { get; public set; }
    public string StartContinuation { get; public set; }
    public bool StartFromBeginning { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    public TimeSpan RequestTimeout { get; public set; }
    public FeedRange FeedRange { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LeaseToken();
    [CompilerGeneratedAttribute]
public void set_LeaseToken(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxItemCount();
    [CompilerGeneratedAttribute]
public void set_MaxItemCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_FeedPollDelay();
    [CompilerGeneratedAttribute]
public void set_FeedPollDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_StartContinuation();
    [CompilerGeneratedAttribute]
public void set_StartContinuation(string value);
    [CompilerGeneratedAttribute]
public bool get_StartFromBeginning();
    [CompilerGeneratedAttribute]
public void set_StartFromBeginning(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RequestTimeout();
    [CompilerGeneratedAttribute]
public void set_RequestTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public FeedRange get_FeedRange();
    [CompilerGeneratedAttribute]
public void set_FeedRange(FeedRange value);
}
[JsonConverterAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseConverter")]
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLease : object {
    public static string IdPropertyName;
    public static string LeasePartitionKeyPropertyName;
    public string CurrentLeaseToken { get; }
    public FeedRangeInternal FeedRange { get; public set; }
    public string Owner { get; public set; }
    public DateTime Timestamp { get; public set; }
    public string ContinuationToken { get; public set; }
    public string Id { get; }
    public string PartitionKey { get; }
    public string ConcurrencyToken { get; }
    public Dictionary`2<string, string> Properties { get; public set; }
    public string Mode { get; public set; }
    public abstract virtual string get_CurrentLeaseToken();
    public abstract virtual FeedRangeInternal get_FeedRange();
    public abstract virtual void set_FeedRange(FeedRangeInternal value);
    public abstract virtual string get_Owner();
    public abstract virtual void set_Owner(string value);
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual void set_Timestamp(DateTime value);
    public abstract virtual string get_ContinuationToken();
    public abstract virtual void set_ContinuationToken(string value);
    public abstract virtual string get_Id();
    public abstract virtual string get_PartitionKey();
    public abstract virtual string get_ConcurrencyToken();
    public abstract virtual Dictionary`2<string, string> get_Properties();
    public abstract virtual void set_Properties(Dictionary`2<string, string> value);
    public abstract virtual string get_Mode();
    public abstract virtual void set_Mode(string value);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseCheckpointer : object {
    public abstract virtual Task`1<DocumentServiceLease> CheckpointAsync(DocumentServiceLease lease, string continuationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseCheckpointerCore : DocumentServiceLeaseCheckpointer {
    private DocumentServiceLeaseUpdater leaseUpdater;
    private RequestOptionsFactory requestOptionsFactory;
    public DocumentServiceLeaseCheckpointerCore(DocumentServiceLeaseUpdater leaseUpdater, RequestOptionsFactory requestOptionsFactory);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseCheckpointerCore/<CheckpointAsync>d__3")]
public virtual Task`1<DocumentServiceLease> CheckpointAsync(DocumentServiceLease lease, string continuationToken);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseContainer : object {
    public abstract virtual Task`1<IReadOnlyList`1<DocumentServiceLease>> GetAllLeasesAsync();
    public abstract virtual Task`1<IEnumerable`1<DocumentServiceLease>> GetOwnedLeasesAsync();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseContainerCosmos : DocumentServiceLeaseContainer {
    private Container container;
    private DocumentServiceLeaseStoreManagerOptions options;
    private static QueryRequestOptions queryRequestOptions;
    public DocumentServiceLeaseContainerCosmos(Container container, DocumentServiceLeaseStoreManagerOptions options);
    private static DocumentServiceLeaseContainerCosmos();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseContainerCosmos/<GetAllLeasesAsync>d__4")]
public virtual Task`1<IReadOnlyList`1<DocumentServiceLease>> GetAllLeasesAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseContainerCosmos/<GetOwnedLeasesAsync>d__5")]
public virtual Task`1<IEnumerable`1<DocumentServiceLease>> GetOwnedLeasesAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseContainerCosmos/<ListDocumentsAsync>d__6")]
private Task`1<IReadOnlyList`1<DocumentServiceLease>> ListDocumentsAsync(string prefix);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseContainerInMemory : DocumentServiceLeaseContainer {
    private ConcurrentDictionary`2<string, DocumentServiceLease> container;
    public DocumentServiceLeaseContainerInMemory(ConcurrentDictionary`2<string, DocumentServiceLease> container);
    public virtual Task`1<IReadOnlyList`1<DocumentServiceLease>> GetAllLeasesAsync();
    public virtual Task`1<IEnumerable`1<DocumentServiceLease>> GetOwnedLeasesAsync();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseConverter : JsonConverter {
    private static string VersionPropertyName;
    private static DocumentServiceLeaseConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseCore : DocumentServiceLease {
    private static DateTime UnixStartTime;
    private bool isMigratingFromV2;
    [CompilerGeneratedAttribute]
private string <LeaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeasePartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeaseToken>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedRangeInternal <FeedRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExplicitTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [JsonPropertyAttribute("id")]
public string LeaseId { get; public set; }
    [JsonPropertyAttribute]
public string LeasePartitionKey { get; public set; }
    [JsonIgnoreAttribute]
public string PartitionKey { get; }
    [JsonPropertyAttribute("version")]
public DocumentServiceLeaseVersion Version { get; }
    [JsonIgnoreAttribute]
public string Id { get; }
    [JsonPropertyAttribute("_etag")]
public string ETag { get; public set; }
    [JsonPropertyAttribute("LeaseToken")]
public string LeaseToken { get; public set; }
    [JsonPropertyAttribute]
private string PartitionId { get; private set; }
    [JsonIgnoreAttribute]
public string CurrentLeaseToken { get; }
    [JsonPropertyAttribute]
public FeedRangeInternal FeedRange { get; public set; }
    [JsonPropertyAttribute("Owner")]
public string Owner { get; public set; }
    [JsonPropertyAttribute("ContinuationToken")]
public string ContinuationToken { get; public set; }
    [JsonIgnoreAttribute]
public DateTime Timestamp { get; public set; }
    [JsonIgnoreAttribute]
public string ConcurrencyToken { get; }
    [JsonPropertyAttribute("properties")]
public Dictionary`2<string, string> Properties { get; public set; }
    [JsonPropertyAttribute("timestamp")]
private Nullable`1<DateTime> ExplicitTimestamp { get; private set; }
    [JsonPropertyAttribute("_ts")]
private long TS { get; private set; }
    [JsonPropertyAttribute]
public string Mode { get; public set; }
    private static DocumentServiceLeaseCore();
    [CompilerGeneratedAttribute]
public string get_LeaseId();
    [CompilerGeneratedAttribute]
public void set_LeaseId(string value);
    [CompilerGeneratedAttribute]
public string get_LeasePartitionKey();
    [CompilerGeneratedAttribute]
public void set_LeasePartitionKey(string value);
    public virtual string get_PartitionKey();
    public DocumentServiceLeaseVersion get_Version();
    public virtual string get_Id();
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(string value);
    [CompilerGeneratedAttribute]
public string get_LeaseToken();
    [CompilerGeneratedAttribute]
public void set_LeaseToken(string value);
    private string get_PartitionId();
    private void set_PartitionId(string value);
    public virtual string get_CurrentLeaseToken();
    [CompilerGeneratedAttribute]
public virtual FeedRangeInternal get_FeedRange();
    [CompilerGeneratedAttribute]
public virtual void set_FeedRange(FeedRangeInternal value);
    [CompilerGeneratedAttribute]
public virtual string get_Owner();
    [CompilerGeneratedAttribute]
public virtual void set_Owner(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public virtual void set_ContinuationToken(string value);
    public virtual DateTime get_Timestamp();
    public virtual void set_Timestamp(DateTime value);
    public virtual string get_ConcurrencyToken();
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public virtual void set_Properties(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> get_ExplicitTimestamp();
    [CompilerGeneratedAttribute]
private void set_ExplicitTimestamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
private long get_TS();
    [CompilerGeneratedAttribute]
private void set_TS(long value);
    [CompilerGeneratedAttribute]
public virtual string get_Mode();
    [CompilerGeneratedAttribute]
public virtual void set_Mode(string value);
    public virtual string ToString();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseCoreEpk : DocumentServiceLease {
    private static DateTime UnixStartTime;
    [CompilerGeneratedAttribute]
private string <LeaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeasePartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeaseToken>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedRangeInternal <FeedRange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ExplicitTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TS>k__BackingField;
    [JsonPropertyAttribute("id")]
public string LeaseId { get; public set; }
    [JsonPropertyAttribute]
public string LeasePartitionKey { get; public set; }
    [JsonIgnoreAttribute]
public string PartitionKey { get; }
    [JsonPropertyAttribute("version")]
public DocumentServiceLeaseVersion Version { get; }
    [JsonIgnoreAttribute]
public string Id { get; }
    [JsonPropertyAttribute("_etag")]
public string ETag { get; public set; }
    [JsonPropertyAttribute("LeaseToken")]
public string LeaseToken { get; public set; }
    [JsonIgnoreAttribute]
public string CurrentLeaseToken { get; }
    [JsonPropertyAttribute]
public FeedRangeInternal FeedRange { get; public set; }
    [JsonPropertyAttribute("Owner")]
public string Owner { get; public set; }
    [JsonPropertyAttribute("ContinuationToken")]
public string ContinuationToken { get; public set; }
    [JsonIgnoreAttribute]
public DateTime Timestamp { get; public set; }
    [JsonIgnoreAttribute]
public string ConcurrencyToken { get; }
    [JsonPropertyAttribute("properties")]
public Dictionary`2<string, string> Properties { get; public set; }
    [JsonPropertyAttribute]
public string Mode { get; public set; }
    [JsonPropertyAttribute("timestamp")]
private Nullable`1<DateTime> ExplicitTimestamp { get; private set; }
    [JsonPropertyAttribute("_ts")]
private long TS { get; private set; }
    private static DocumentServiceLeaseCoreEpk();
    [CompilerGeneratedAttribute]
public string get_LeaseId();
    [CompilerGeneratedAttribute]
public void set_LeaseId(string value);
    [CompilerGeneratedAttribute]
public string get_LeasePartitionKey();
    [CompilerGeneratedAttribute]
public void set_LeasePartitionKey(string value);
    public virtual string get_PartitionKey();
    public DocumentServiceLeaseVersion get_Version();
    public virtual string get_Id();
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(string value);
    [CompilerGeneratedAttribute]
public string get_LeaseToken();
    [CompilerGeneratedAttribute]
public void set_LeaseToken(string value);
    public virtual string get_CurrentLeaseToken();
    [CompilerGeneratedAttribute]
public virtual FeedRangeInternal get_FeedRange();
    [CompilerGeneratedAttribute]
public virtual void set_FeedRange(FeedRangeInternal value);
    [CompilerGeneratedAttribute]
public virtual string get_Owner();
    [CompilerGeneratedAttribute]
public virtual void set_Owner(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public virtual void set_ContinuationToken(string value);
    public virtual DateTime get_Timestamp();
    public virtual void set_Timestamp(DateTime value);
    public virtual string get_ConcurrencyToken();
    [CompilerGeneratedAttribute]
public virtual Dictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public virtual void set_Properties(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual string get_Mode();
    [CompilerGeneratedAttribute]
public virtual void set_Mode(string value);
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> get_ExplicitTimestamp();
    [CompilerGeneratedAttribute]
private void set_ExplicitTimestamp(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
private long get_TS();
    [CompilerGeneratedAttribute]
private void set_TS(long value);
    public virtual string ToString();
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManager : object {
    public abstract virtual Task`1<DocumentServiceLease> CreateLeaseIfNotExistAsync(PartitionKeyRange partitionKeyRange, string continuationToken);
    public abstract virtual Task`1<DocumentServiceLease> CreateLeaseIfNotExistAsync(FeedRangeEpk feedRange, string continuationToken);
    public abstract virtual Task DeleteAsync(DocumentServiceLease lease);
    public abstract virtual Task`1<DocumentServiceLease> AcquireAsync(DocumentServiceLease lease);
    public abstract virtual Task ReleaseAsync(DocumentServiceLease lease);
    public abstract virtual Task`1<DocumentServiceLease> RenewAsync(DocumentServiceLease lease);
    public abstract virtual Task`1<DocumentServiceLease> UpdatePropertiesAsync(DocumentServiceLease leaseToUpdatePropertiesFrom);
    public void ChangeFeedModeSwitchingCheck(IReadOnlyList`1<DocumentServiceLease> documentServiceLeases, ChangeFeedMode changeFeedLeaseOptionsMode);
    private void VerifyChangeFeedProcessorMode(ChangeFeedMode changeFeedMode, string leaseChangeFeedMode);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManagerCosmos : DocumentServiceLeaseManager {
    private ContainerInternal monitoredContainer;
    private ContainerInternal leaseContainer;
    private DocumentServiceLeaseUpdater leaseUpdater;
    private DocumentServiceLeaseStoreManagerOptions options;
    private RequestOptionsFactory requestOptionsFactory;
    private AsyncLazy`1<TryCatch`1<string>> lazyContainerRid;
    private PartitionKeyRangeCache partitionKeyRangeCache;
    public DocumentServiceLeaseManagerCosmos(ContainerInternal monitoredContainer, ContainerInternal leaseContainer, DocumentServiceLeaseUpdater leaseUpdater, DocumentServiceLeaseStoreManagerOptions options, RequestOptionsFactory requestOptionsFactory);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManagerCosmos/<AcquireAsync>d__8")]
public virtual Task`1<DocumentServiceLease> AcquireAsync(DocumentServiceLease lease);
    public virtual Task`1<DocumentServiceLease> CreateLeaseIfNotExistAsync(PartitionKeyRange partitionKeyRange, string continuationToken);
    public virtual Task`1<DocumentServiceLease> CreateLeaseIfNotExistAsync(FeedRangeEpk feedRange, string continuationToken);
    private string GetChangeFeedMode();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManagerCosmos/<ReleaseAsync>d__12")]
public virtual Task ReleaseAsync(DocumentServiceLease lease);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManagerCosmos/<DeleteAsync>d__13")]
public virtual Task DeleteAsync(DocumentServiceLease lease);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManagerCosmos/<RenewAsync>d__14")]
public virtual Task`1<DocumentServiceLease> RenewAsync(DocumentServiceLease lease);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManagerCosmos/<UpdatePropertiesAsync>d__15")]
public virtual Task`1<DocumentServiceLease> UpdatePropertiesAsync(DocumentServiceLease lease);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManagerCosmos/<TryCreateDocumentServiceLeaseAsync>d__16")]
private Task`1<DocumentServiceLease> TryCreateDocumentServiceLeaseAsync(DocumentServiceLease documentServiceLease);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManagerCosmos/<TryGetLeaseAsync>d__17")]
private Task`1<DocumentServiceLease> TryGetLeaseAsync(DocumentServiceLease lease);
    private string GetDocumentId(string partitionId);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManagerCosmos/<TryInitializeContainerRIdAsync>d__19")]
private Task`1<TryCatch`1<string>> TryInitializeContainerRIdAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task`1<TryCatch`1<string>> <.ctor>b__7_0(ITrace trace, CancellationToken innerCancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseManagerInMemory : DocumentServiceLeaseManager {
    private DocumentServiceLeaseUpdater leaseUpdater;
    private ConcurrentDictionary`2<string, DocumentServiceLease> container;
    public DocumentServiceLeaseManagerInMemory(DocumentServiceLeaseUpdater leaseUpdater, ConcurrentDictionary`2<string, DocumentServiceLease> container);
    public virtual Task`1<DocumentServiceLease> AcquireAsync(DocumentServiceLease lease);
    public virtual Task`1<DocumentServiceLease> CreateLeaseIfNotExistAsync(PartitionKeyRange partitionKeyRange, string continuationToken);
    public virtual Task`1<DocumentServiceLease> CreateLeaseIfNotExistAsync(FeedRangeEpk feedRange, string continuationToken);
    public virtual Task ReleaseAsync(DocumentServiceLease lease);
    public virtual Task DeleteAsync(DocumentServiceLease lease);
    public virtual Task`1<DocumentServiceLease> RenewAsync(DocumentServiceLease lease);
    public virtual Task`1<DocumentServiceLease> UpdatePropertiesAsync(DocumentServiceLease lease);
    private Task`1<DocumentServiceLease> TryCreateDocumentServiceLeaseAsync(DocumentServiceLease documentServiceLease);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStore : object {
    public abstract virtual Task`1<bool> IsInitializedAsync();
    public abstract virtual Task MarkInitializedAsync();
    public abstract virtual Task`1<bool> AcquireInitializationLockAsync(TimeSpan lockExpirationTime);
    public abstract virtual Task`1<bool> ReleaseInitializationLockAsync();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreCosmos : DocumentServiceLeaseStore {
    private Container container;
    private string containerNamePrefix;
    private RequestOptionsFactory requestOptionsFactory;
    private string lockETag;
    public DocumentServiceLeaseStoreCosmos(Container container, string containerNamePrefix, RequestOptionsFactory requestOptionsFactory);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreCosmos/<IsInitializedAsync>d__5")]
public virtual Task`1<bool> IsInitializedAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreCosmos/<MarkInitializedAsync>d__6")]
public virtual Task MarkInitializedAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreCosmos/<AcquireInitializationLockAsync>d__7")]
public virtual Task`1<bool> AcquireInitializationLockAsync(TimeSpan lockTime);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreCosmos/<ReleaseInitializationLockAsync>d__8")]
public virtual Task`1<bool> ReleaseInitializationLockAsync();
    private string GetStoreMarkerName();
    private string GetStoreLockName();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreInMemory : DocumentServiceLeaseStore {
    private bool isInitialized;
    public virtual Task`1<bool> IsInitializedAsync();
    public virtual Task MarkInitializedAsync();
    public virtual Task`1<bool> AcquireInitializationLockAsync(TimeSpan lockTime);
    public virtual Task`1<bool> ReleaseInitializationLockAsync();
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManager : object {
    public DocumentServiceLeaseContainer LeaseContainer { get; }
    public DocumentServiceLeaseManager LeaseManager { get; }
    public DocumentServiceLeaseCheckpointer LeaseCheckpointer { get; }
    public DocumentServiceLeaseStore LeaseStore { get; }
    public abstract virtual DocumentServiceLeaseContainer get_LeaseContainer();
    public abstract virtual DocumentServiceLeaseManager get_LeaseManager();
    public abstract virtual DocumentServiceLeaseCheckpointer get_LeaseCheckpointer();
    public abstract virtual DocumentServiceLeaseStore get_LeaseStore();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManagerBuilder : object {
    private static string IdPkPathName;
    private static string PartitionKeyPkPathName;
    private DocumentServiceLeaseStoreManagerOptions options;
    private ContainerInternal monitoredContainer;
    private ContainerInternal leaseContainer;
    private RequestOptionsFactory requestOptionsFactory;
    private static DocumentServiceLeaseStoreManagerBuilder();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManagerBuilder/<InitializeAsync>d__2")]
public static Task`1<DocumentServiceLeaseStoreManager> InitializeAsync(ContainerInternal monitoredContainer, ContainerInternal leaseContainer, string leaseContainerPrefix, string instanceName, ChangeFeedMode changeFeedMode);
    private DocumentServiceLeaseStoreManagerBuilder WithMonitoredContainer(ContainerInternal monitoredContainer);
    private DocumentServiceLeaseStoreManagerBuilder WithLeaseContainer(ContainerInternal leaseContainer);
    private DocumentServiceLeaseStoreManagerBuilder WithLeasePrefix(string leasePrefix);
    private DocumentServiceLeaseStoreManagerBuilder WithRequestOptionsFactory(RequestOptionsFactory requestOptionsFactory);
    private DocumentServiceLeaseStoreManagerBuilder WithHostName(string hostName);
    private DocumentServiceLeaseStoreManagerBuilder WithChangeFeedMode(ChangeFeedMode changeFeedMode);
    private DocumentServiceLeaseStoreManager Build();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManagerCosmos : DocumentServiceLeaseStoreManager {
    private DocumentServiceLeaseStore leaseStore;
    private DocumentServiceLeaseManager leaseManager;
    private DocumentServiceLeaseCheckpointer leaseCheckpointer;
    private DocumentServiceLeaseContainer leaseContainer;
    public DocumentServiceLeaseStore LeaseStore { get; }
    public DocumentServiceLeaseManager LeaseManager { get; }
    public DocumentServiceLeaseCheckpointer LeaseCheckpointer { get; }
    public DocumentServiceLeaseContainer LeaseContainer { get; }
    public DocumentServiceLeaseStoreManagerCosmos(DocumentServiceLeaseStoreManagerOptions options, ContainerInternal monitoredContainer, ContainerInternal leaseContainer, RequestOptionsFactory requestOptionsFactory);
    internal DocumentServiceLeaseStoreManagerCosmos(DocumentServiceLeaseStoreManagerOptions options, ContainerInternal monitoredContainer, ContainerInternal leaseContainer, RequestOptionsFactory requestOptionsFactory, DocumentServiceLeaseUpdater leaseUpdater);
    public virtual DocumentServiceLeaseStore get_LeaseStore();
    public virtual DocumentServiceLeaseManager get_LeaseManager();
    public virtual DocumentServiceLeaseCheckpointer get_LeaseCheckpointer();
    public virtual DocumentServiceLeaseContainer get_LeaseContainer();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManagerInMemory : DocumentServiceLeaseStoreManager {
    private DocumentServiceLeaseStore leaseStore;
    private DocumentServiceLeaseManager leaseManager;
    private DocumentServiceLeaseCheckpointer leaseCheckpointer;
    private DocumentServiceLeaseContainer leaseContainer;
    public DocumentServiceLeaseStore LeaseStore { get; }
    public DocumentServiceLeaseManager LeaseManager { get; }
    public DocumentServiceLeaseCheckpointer LeaseCheckpointer { get; }
    public DocumentServiceLeaseContainer LeaseContainer { get; }
    internal DocumentServiceLeaseStoreManagerInMemory(ConcurrentDictionary`2<string, DocumentServiceLease> container);
    internal DocumentServiceLeaseStoreManagerInMemory(DocumentServiceLeaseUpdater leaseUpdater, ConcurrentDictionary`2<string, DocumentServiceLease> container);
    public virtual DocumentServiceLeaseStore get_LeaseStore();
    public virtual DocumentServiceLeaseManager get_LeaseManager();
    public virtual DocumentServiceLeaseCheckpointer get_LeaseCheckpointer();
    public virtual DocumentServiceLeaseContainer get_LeaseContainer();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseStoreManagerOptions : object {
    private static string PartitionLeasePrefixSeparator;
    [CompilerGeneratedAttribute]
private string <ContainerNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private ChangeFeedMode <Mode>k__BackingField;
    internal string ContainerNamePrefix { get; internal set; }
    internal string HostName { get; internal set; }
    internal ChangeFeedMode Mode { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_ContainerNamePrefix();
    [CompilerGeneratedAttribute]
internal void set_ContainerNamePrefix(string value);
    [CompilerGeneratedAttribute]
internal string get_HostName();
    [CompilerGeneratedAttribute]
internal void set_HostName(string value);
    internal string GetPartitionLeasePrefix();
    [CompilerGeneratedAttribute]
internal ChangeFeedMode get_Mode();
    [CompilerGeneratedAttribute]
internal void set_Mode(ChangeFeedMode value);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseUpdater : object {
    public abstract virtual Task`1<DocumentServiceLease> UpdateLeaseAsync(DocumentServiceLease cachedLease, string leaseId, PartitionKey leasePartitionKey, Func`2<DocumentServiceLease, DocumentServiceLease> updateLease);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseUpdaterCosmos : DocumentServiceLeaseUpdater {
    private static int RetryCountOnConflict;
    private Container container;
    public DocumentServiceLeaseUpdaterCosmos(Container container);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseUpdaterCosmos/<UpdateLeaseAsync>d__3")]
public virtual Task`1<DocumentServiceLease> UpdateLeaseAsync(DocumentServiceLease cachedLease, string itemId, PartitionKey partitionKey, Func`2<DocumentServiceLease, DocumentServiceLease> updateLease);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseUpdaterCosmos/<TryReplaceLeaseAsync>d__4")]
private Task`1<DocumentServiceLease> TryReplaceLeaseAsync(DocumentServiceLease lease, PartitionKey partitionKey, string itemId);
    private ItemRequestOptions CreateIfMatchOptions(DocumentServiceLease lease);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseUpdaterInMemory : DocumentServiceLeaseUpdater {
    private static int RetryCountOnConflict;
    private ConcurrentDictionary`2<string, DocumentServiceLease> container;
    public DocumentServiceLeaseUpdaterInMemory(ConcurrentDictionary`2<string, DocumentServiceLease> container);
    public virtual Task`1<DocumentServiceLease> UpdateLeaseAsync(DocumentServiceLease cachedLease, string itemId, PartitionKey partitionKey, Func`2<DocumentServiceLease, DocumentServiceLease> updateLease);
}
internal enum Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.DocumentServiceLeaseVersion : Enum {
    public int value__;
    public static DocumentServiceLeaseVersion PartitionKeyRangeBasedLease;
    public static DocumentServiceLeaseVersion EPKRangeBasedLease;
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.PartitionedByIdCollectionRequestOptionsFactory : RequestOptionsFactory {
    public virtual PartitionKey GetPartitionKey(string itemId, string partitionKey);
    public virtual void AddPartitionKeyIfNeeded(Action`1<string> partitionKeySetter, string partitionKey);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.PartitionedByPartitionKeyCollectionRequestOptionsFactory : RequestOptionsFactory {
    public virtual PartitionKey GetPartitionKey(string itemId, string partitionKey);
    public virtual void AddPartitionKeyIfNeeded(Action`1<string> partitionKeySetter, string partitionKey);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.RequestOptionsFactory : object {
    public abstract virtual PartitionKey GetPartitionKey(string itemId, string partitionKey);
    public abstract virtual void AddPartitionKeyIfNeeded(Action`1<string> partitionKeySetter, string partitionKey);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.LeaseManagement.SinglePartitionRequestOptionsFactory : RequestOptionsFactory {
    public virtual void AddPartitionKeyIfNeeded(Action`1<string> partitionKeySetter, string partitionKey);
    public virtual PartitionKey GetPartitionKey(string itemId, string partitionKey);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.MalformedChangeFeedContinuationTokenException : ChangeFeedException {
    public MalformedChangeFeedContinuationTokenException(string message);
    public MalformedChangeFeedContinuationTokenException(string message, Exception innerException);
    public virtual TResult Accept(ChangeFeedExceptionVisitor`1<TResult> visitor, ITrace trace);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.ChangeFeedProcessorHealthMonitorCore : ChangeFeedProcessorHealthMonitor {
    private ChangeFeedMonitorErrorDelegate errorDelegate;
    private ChangeFeedMonitorLeaseAcquireDelegate acquireDelegate;
    private ChangeFeedMonitorLeaseReleaseDelegate releaseDelegate;
    public void SetErrorDelegate(ChangeFeedMonitorErrorDelegate delegateCallback);
    public void SetLeaseAcquireDelegate(ChangeFeedMonitorLeaseAcquireDelegate delegateCallback);
    public void SetLeaseReleaseDelegate(ChangeFeedMonitorLeaseReleaseDelegate delegateCallback);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.ChangeFeedProcessorHealthMonitorCore/<NotifyLeaseAcquireAsync>d__6")]
public virtual Task NotifyLeaseAcquireAsync(string leaseToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.ChangeFeedProcessorHealthMonitorCore/<NotifyLeaseReleaseAsync>d__7")]
public virtual Task NotifyLeaseReleaseAsync(string leaseToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Monitoring.ChangeFeedProcessorHealthMonitorCore/<NotifyErrorAsync>d__8")]
public virtual Task NotifyErrorAsync(string leaseToken, Exception exception);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.ObserverExceptionWrappingChangeFeedObserverDecorator : ChangeFeedObserver {
    private ChangeFeedObserver changeFeedObserver;
    public ObserverExceptionWrappingChangeFeedObserverDecorator(ChangeFeedObserver changeFeedObserver);
    public virtual Task CloseAsync(string leaseToken, ChangeFeedObserverCloseReason reason);
    public virtual Task OpenAsync(string leaseToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.ObserverExceptionWrappingChangeFeedObserverDecorator/<ProcessChangesAsync>d__4")]
public virtual Task ProcessChangesAsync(ChangeFeedObserverContextCore context, Stream stream, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Pagination.ChangeFeedExecutionOptions : ExecutionOptions {
    public static ChangeFeedExecutionOptions Default;
    public static ImmutableHashSet`1<string> BannedHeaders;
    [CompilerGeneratedAttribute]
private ChangeFeedMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private ChangeFeedQuerySpec <ChangeFeedQuerySpec>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<JsonSerializationFormat> <JsonSerializationFormat>k__BackingField;
    public ChangeFeedMode Mode { get; }
    public ChangeFeedQuerySpec ChangeFeedQuerySpec { get; }
    public Nullable`1<JsonSerializationFormat> JsonSerializationFormat { get; }
    protected ImmutableHashSet`1<string> BannedAdditionalHeaders { get; }
    public ChangeFeedExecutionOptions(ChangeFeedMode mode, Nullable`1<int> pageSizeHint, Nullable`1<JsonSerializationFormat> jsonSerializationFormat, Dictionary`2<string, string> additionalHeaders, ChangeFeedQuerySpec changeFeedQuerySpec);
    private static ChangeFeedExecutionOptions();
    [CompilerGeneratedAttribute]
public ChangeFeedMode get_Mode();
    [CompilerGeneratedAttribute]
public ChangeFeedQuerySpec get_ChangeFeedQuerySpec();
    [CompilerGeneratedAttribute]
public Nullable`1<JsonSerializationFormat> get_JsonSerializationFormat();
    protected virtual ImmutableHashSet`1<string> get_BannedAdditionalHeaders();
}
internal static class Microsoft.Azure.Cosmos.ChangeFeed.Pagination.ChangeFeedFeedRangeStateSerializer : object {
    public static CosmosElement ToCosmosElement(FeedRangeState`1<ChangeFeedState> feedRangeState);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Pagination.ChangeFeedNotModifiedPage : ChangeFeedPage {
    private static ImmutableHashSet`1<string> bannedHeaders;
    public int ItemCount { get; }
    protected ImmutableHashSet`1<string> DerivedClassBannedHeaders { get; }
    public ChangeFeedNotModifiedPage(double requestCharge, string activityId, IReadOnlyDictionary`2<string, string> additionalHeaders, ChangeFeedState state);
    private static ChangeFeedNotModifiedPage();
    public virtual int get_ItemCount();
    protected virtual ImmutableHashSet`1<string> get_DerivedClassBannedHeaders();
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.Pagination.ChangeFeedPage : Page`1<ChangeFeedState> {
    public static ImmutableHashSet`1<string> BannedHeaders;
    protected ChangeFeedPage(double requestCharge, string activityId, IReadOnlyDictionary`2<string, string> additionalHeaders, ChangeFeedState state);
    private static ChangeFeedPage();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Pagination.ChangeFeedPartitionRangePageAsyncEnumerator : PartitionRangePageAsyncEnumerator`2<ChangeFeedPage, ChangeFeedState> {
    private IChangeFeedDataSource changeFeedDataSource;
    private ChangeFeedExecutionOptions changeFeedPaginationOptions;
    public ChangeFeedPartitionRangePageAsyncEnumerator(IChangeFeedDataSource changeFeedDataSource, FeedRangeState`1<ChangeFeedState> feedRangeState, ChangeFeedExecutionOptions changeFeedPaginationOptions);
    public virtual ValueTask DisposeAsync();
    protected virtual Task`1<TryCatch`1<ChangeFeedPage>> GetNextPageAsync(ITrace trace, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeed.Pagination.ChangeFeedState : State {
    public abstract virtual void Accept(IChangeFeedStateVisitor`1<TInput> visitor, TInput input);
    public abstract virtual TOutput Accept(IChangeFeedStateVisitor`2<TInput, TOutput> visitor, TInput input);
    public abstract virtual TResult Accept(IChangeFeedStateTransformer`1<TResult> visitor);
    public static ChangeFeedState Now();
    public static ChangeFeedState Beginning();
    public static ChangeFeedState Time(DateTime time);
    public static ChangeFeedState Continuation(CosmosElement continuation);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Pagination.ChangeFeedStateBeginning : ChangeFeedState {
    public static ChangeFeedStateBeginning Singleton;
    private static ChangeFeedStateBeginning();
    public virtual void Accept(IChangeFeedStateVisitor`1<TInput> visitor, TInput input);
    public virtual TOutput Accept(IChangeFeedStateVisitor`2<TInput, TOutput> visitor, TInput input);
    public virtual TResult Accept(IChangeFeedStateTransformer`1<TResult> visitor);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Pagination.ChangeFeedStateContinuation : ChangeFeedState {
    [CompilerGeneratedAttribute]
private CosmosElement <ContinuationToken>k__BackingField;
    public CosmosElement ContinuationToken { get; }
    public ChangeFeedStateContinuation(CosmosElement continuation);
    [CompilerGeneratedAttribute]
public CosmosElement get_ContinuationToken();
    public virtual void Accept(IChangeFeedStateVisitor`1<TInput> visitor, TInput input);
    public virtual TOutput Accept(IChangeFeedStateVisitor`2<TInput, TOutput> visitor, TInput input);
    public virtual TResult Accept(IChangeFeedStateTransformer`1<TResult> visitor);
}
internal static class Microsoft.Azure.Cosmos.ChangeFeed.Pagination.ChangeFeedStateCosmosElementSerializer : object {
    private static string TypePropertyName;
    private static string ValuePropertyName;
    private static string BeginningTypeValue;
    private static string TimeTypeValue;
    private static string ContinuationTypeValue;
    private static string NowTypeValue;
    public static TryCatch`1<ChangeFeedState> MonadicFromCosmosElement(CosmosElement cosmosElement);
    public static CosmosElement ToCosmosElement(ChangeFeedState changeFeedState);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Pagination.ChangeFeedStateNow : ChangeFeedState {
    public static ChangeFeedStateNow Singleton;
    private static ChangeFeedStateNow();
    public virtual void Accept(IChangeFeedStateVisitor`1<TInput> visitor, TInput input);
    public virtual TOutput Accept(IChangeFeedStateVisitor`2<TInput, TOutput> visitor, TInput input);
    public virtual TResult Accept(IChangeFeedStateTransformer`1<TResult> visitor);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Pagination.ChangeFeedStateTime : ChangeFeedState {
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    public DateTime StartTime { get; }
    public ChangeFeedStateTime(DateTime time);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    public virtual void Accept(IChangeFeedStateVisitor`1<TInput> visitor, TInput input);
    public virtual TOutput Accept(IChangeFeedStateVisitor`2<TInput, TOutput> visitor, TInput input);
    public virtual TResult Accept(IChangeFeedStateTransformer`1<TResult> visitor);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Pagination.ChangeFeedSuccessPage : ChangeFeedPage {
    private static ImmutableHashSet`1<string> bannedHeaders;
    [CompilerGeneratedAttribute]
private Stream <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemCount>k__BackingField;
    public Stream Content { get; }
    public int ItemCount { get; }
    protected ImmutableHashSet`1<string> DerivedClassBannedHeaders { get; }
    public ChangeFeedSuccessPage(Stream content, double requestCharge, int itemCount, string activityId, IReadOnlyDictionary`2<string, string> additionalHeaders, ChangeFeedState state);
    private static ChangeFeedSuccessPage();
    [CompilerGeneratedAttribute]
public Stream get_Content();
    [CompilerGeneratedAttribute]
public virtual int get_ItemCount();
    protected virtual ImmutableHashSet`1<string> get_DerivedClassBannedHeaders();
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.Pagination.CrossPartitionChangeFeedAsyncEnumerator : object {
    private CrossPartitionRangePageAsyncEnumerator`2<ChangeFeedPage, ChangeFeedState> crossPartitionEnumerator;
    private Nullable`1<TryCatch`1<CrossFeedRangePage`2<ChangeFeedPage, ChangeFeedState>>> bufferedException;
    [CompilerGeneratedAttribute]
private TryCatch`1<CrossFeedRangePage`2<ChangeFeedPage, ChangeFeedState>> <Current>k__BackingField;
    public TryCatch`1<CrossFeedRangePage`2<ChangeFeedPage, ChangeFeedState>> Current { get; private set; }
    private CrossPartitionChangeFeedAsyncEnumerator(CrossPartitionRangePageAsyncEnumerator`2<ChangeFeedPage, ChangeFeedState> crossPartitionEnumerator);
    [CompilerGeneratedAttribute]
public sealed virtual TryCatch`1<CrossFeedRangePage`2<ChangeFeedPage, ChangeFeedState>> get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(TryCatch`1<CrossFeedRangePage`2<ChangeFeedPage, ChangeFeedState>> value);
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Pagination.CrossPartitionChangeFeedAsyncEnumerator/<MoveNextAsync>d__8")]
public sealed virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
    public static CrossPartitionChangeFeedAsyncEnumerator Create(IDocumentContainer documentContainer, CrossFeedRangeState`1<ChangeFeedState> state, ChangeFeedExecutionOptions changeFeedPaginationOptions);
    private static bool IsNextRangeEqualToOriginal(CrossPartitionRangePageAsyncEnumerator`2<ChangeFeedPage, ChangeFeedState> crossPartitionEnumerator, FeedRangeInternal originalRange);
    private static CreatePartitionRangePageAsyncEnumerator`2<ChangeFeedPage, ChangeFeedState> MakeCreateFunction(IChangeFeedDataSource changeFeedDataSource, ChangeFeedExecutionOptions changeFeedPaginationOptions);
}
internal interface Microsoft.Azure.Cosmos.ChangeFeed.Pagination.IChangeFeedDataSource {
    public abstract virtual Task`1<ChangeFeedPage> ChangeFeedAsync(FeedRangeState`1<ChangeFeedState> feedRangeState, ChangeFeedExecutionOptions changeFeedPaginationOptions, ITrace trace, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Cosmos.ChangeFeed.Pagination.IChangeFeedStateTransformer`1 {
    public abstract virtual TResult Transform(ChangeFeedStateBeginning changeFeedStateBeginning);
    public abstract virtual TResult Transform(ChangeFeedStateTime changeFeedStateTime);
    public abstract virtual TResult Transform(ChangeFeedStateContinuation changeFeedStateContinuation);
    public abstract virtual TResult Transform(ChangeFeedStateNow changeFeedStateNow);
}
internal interface Microsoft.Azure.Cosmos.ChangeFeed.Pagination.IChangeFeedStateVisitor`1 {
    public abstract virtual void Visit(ChangeFeedStateBeginning changeFeedStateBeginning, TInput input);
    public abstract virtual void Visit(ChangeFeedStateTime changeFeedStateTime, TInput input);
    public abstract virtual void Visit(ChangeFeedStateContinuation changeFeedStateContinuation, TInput input);
    public abstract virtual void Visit(ChangeFeedStateNow changeFeedStateNow, TInput input);
}
internal interface Microsoft.Azure.Cosmos.ChangeFeed.Pagination.IChangeFeedStateVisitor`2 {
    public abstract virtual TOutput Visit(ChangeFeedStateBeginning changeFeedStateBeginning, TInput input);
    public abstract virtual TOutput Visit(ChangeFeedStateTime changeFeedStateTime, TInput input);
    public abstract virtual TOutput Visit(ChangeFeedStateContinuation changeFeedStateContinuation, TInput input);
    public abstract virtual TOutput Visit(ChangeFeedStateNow changeFeedStateNow, TInput input);
}
internal interface Microsoft.Azure.Cosmos.ChangeFeed.Pagination.IMonadicChangeFeedDataSource {
    public abstract virtual Task`1<TryCatch`1<ChangeFeedPage>> MonadicChangeFeedAsync(FeedRangeState`1<ChangeFeedState> feedRangeState, ChangeFeedExecutionOptions changeFeedPaginationOptions, ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.StandByFeedContinuationToken : object {
    private string containerRid;
    private PartitionKeyRangeCacheDelegate pkRangeCacheDelegate;
    private string inputContinuationToken;
    private Queue`1<CompositeContinuationToken> compositeContinuationTokens;
    private CompositeContinuationToken currentToken;
    private StandByFeedContinuationToken(string containerRid, string initialStandByFeedContinuationToken, PartitionKeyRangeCacheDelegate pkRangeCacheDelegate);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.StandByFeedContinuationToken/<CreateAsync>d__6")]
public static Task`1<StandByFeedContinuationToken> CreateAsync(string containerRid, string initialStandByFeedContinuationToken, PartitionKeyRangeCacheDelegate pkRangeCacheDelegate);
    public static string CreateForRange(string containerRid, string minInclusive, string maxExclusive);
    private static string SerializeTokens(IEnumerable`1<CompositeContinuationToken> compositeContinuationTokens);
    private static List`1<CompositeContinuationToken> DeserializeTokens(string continuationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.StandByFeedContinuationToken/<GetCurrentTokenAsync>d__11")]
public Task`1<Tuple`2<CompositeContinuationToken, string>> GetCurrentTokenAsync(bool forceRefresh);
    public void MoveToNextToken();
    public string ToString();
    private static CompositeContinuationToken CreateCompositeContinuationTokenForRange(string minInclusive, string maxExclusive, string token);
    private void HandleSplit(IReadOnlyList`1<PartitionKeyRange> keyRanges);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.StandByFeedContinuationToken/<EnsureInitializedAsync>d__16")]
private Task EnsureInitializedAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.StandByFeedContinuationToken/<BuildCompositeTokensAsync>d__17")]
private Task`1<IEnumerable`1<CompositeContinuationToken>> BuildCompositeTokensAsync(string initialContinuationToken);
    private void InitializeCompositeTokens(IEnumerable`1<CompositeContinuationToken> tokens);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.StandByFeedContinuationToken/<TryGetOverlappingRangesAsync>d__19")]
private Task`1<IReadOnlyList`1<PartitionKeyRange>> TryGetOverlappingRangesAsync(Range`1<string> targetRange, bool forceRefresh);
}
internal class Microsoft.Azure.Cosmos.ChangeFeed.StandByFeedIteratorCore : FeedIteratorInternal {
    internal StandByFeedContinuationToken compositeContinuationToken;
    private CosmosClientContext clientContext;
    private string containerRid;
    private string continuationToken;
    private Nullable`1<int> maxItemCount;
    protected StandByFeedIteratorRequestOptions changeFeedOptions;
    public bool HasMoreResults { get; }
    internal StandByFeedIteratorCore(CosmosClientContext clientContext, ContainerInternal container, string continuationToken, Nullable`1<int> maxItemCount, StandByFeedIteratorRequestOptions options);
    public virtual bool get_HasMoreResults();
    public virtual Task`1<ResponseMessage> ReadNextAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.StandByFeedIteratorCore/<ReadNextAsync>d__10")]
public virtual Task`1<ResponseMessage> ReadNextAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.StandByFeedIteratorCore/<ReadNextInternalAsync>d__11")]
internal Task`1<Tuple`2<string, ResponseMessage>> ReadNextInternalAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.StandByFeedIteratorCore/<ShouldRetryFailureAsync>d__12")]
internal Task`1<bool> ShouldRetryFailureAsync(ResponseMessage response, CancellationToken cancellationToken);
    internal virtual Task`1<ResponseMessage> NextResultSetDelegateAsync(string continuationToken, string partitionKeyRangeId, Nullable`1<int> maxItemCount, StandByFeedIteratorRequestOptions options, ITrace trace, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.ChangeFeed.Utils.CosmosContainerExtensions : object {
    private static ItemRequestOptions itemRequestOptionsWithResponseEnabled;
    public static CosmosSerializerCore DefaultJsonSerializer;
    private static CosmosContainerExtensions();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Utils.CosmosContainerExtensions/<TryGetItemAsync>d__2`1")]
[ExtensionAttribute]
public static Task`1<T> TryGetItemAsync(Container container, PartitionKey partitionKey, string itemId);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Utils.CosmosContainerExtensions/<TryCreateItemAsync>d__3`1")]
[ExtensionAttribute]
public static Task`1<ItemResponse`1<T>> TryCreateItemAsync(Container container, PartitionKey partitionKey, T item);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Utils.CosmosContainerExtensions/<TryReplaceItemAsync>d__4`1")]
[ExtensionAttribute]
public static Task`1<ItemResponse`1<T>> TryReplaceItemAsync(Container container, string itemId, T item, PartitionKey partitionKey, ItemRequestOptions itemRequestOptions);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Utils.CosmosContainerExtensions/<TryDeleteItemAsync>d__5`1")]
[ExtensionAttribute]
public static Task`1<bool> TryDeleteItemAsync(Container container, PartitionKey partitionKey, string itemId, ItemRequestOptions cosmosItemRequestOptions);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Utils.CosmosContainerExtensions/<ItemExistsAsync>d__6")]
[ExtensionAttribute]
public static Task`1<bool> ItemExistsAsync(Container container, PartitionKey partitionKey, string itemId);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ChangeFeed.Utils.CosmosContainerExtensions/<GetMonitoredDatabaseAndContainerRidAsync>d__7")]
[ExtensionAttribute]
public static Task`1<string> GetMonitoredDatabaseAndContainerRidAsync(Container monitoredContainer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static string GetLeasePrefix(Container monitoredContainer, string leasePrefix, string monitoredDatabaseAndContainerRid);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.ChangeFeed.Utils.ParallelHelper : object {
    [ExtensionAttribute]
public static Task ForEachAsync(IEnumerable`1<TSource> source, Func`2<TSource, Task> worker, int maxParallelTaskCount, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.ChangeFeed.Utils.TaskExtensions : object {
    [ExtensionAttribute]
public static void LogException(Task task);
}
public abstract class Microsoft.Azure.Cosmos.ChangeFeedEstimator : object {
    public abstract virtual FeedIterator`1<ChangeFeedProcessorState> GetCurrentStateIterator(ChangeFeedEstimatorRequestOptions changeFeedEstimatorRequestOptions);
}
internal class Microsoft.Azure.Cosmos.ChangeFeedEstimatorCore : ChangeFeedEstimator {
    private string processorName;
    private ContainerInternal monitoredContainer;
    private ContainerInternal leaseContainer;
    private DocumentServiceLeaseContainer documentServiceLeaseContainer;
    public ChangeFeedEstimatorCore(string processorName, ContainerInternal monitoredContainer, ContainerInternal leaseContainer, DocumentServiceLeaseContainer documentServiceLeaseContainer);
    public virtual FeedIterator`1<ChangeFeedProcessorState> GetCurrentStateIterator(ChangeFeedEstimatorRequestOptions changeFeedEstimatorRequestOptions);
}
public class Microsoft.Azure.Cosmos.ChangeFeedEstimatorRequestOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxItemCount>k__BackingField;
    public Nullable`1<int> MaxItemCount { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxItemCount();
    [CompilerGeneratedAttribute]
public void set_MaxItemCount(Nullable`1<int> value);
}
internal static class Microsoft.Azure.Cosmos.ChangeFeedHelper : object {
    internal static bool IsChangeFeedWithQueryRequest(OperationType operationType, bool hasPayload);
}
internal class Microsoft.Azure.Cosmos.ChangeFeedItem`1 : object {
    [CompilerGeneratedAttribute]
private T <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private ChangeFeedMetadata <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Previous>k__BackingField;
    [JsonPropertyAttribute]
[JsonPropertyNameAttribute("current")]
public T Current { get; public set; }
    [JsonPropertyAttribute]
[JsonPropertyNameAttribute("metadata")]
public ChangeFeedMetadata Metadata { get; public set; }
    [JsonPropertyAttribute]
[JsonPropertyNameAttribute("previous")]
public T Previous { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Current();
    [CompilerGeneratedAttribute]
public void set_Current(T value);
    [CompilerGeneratedAttribute]
public ChangeFeedMetadata get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(ChangeFeedMetadata value);
    [CompilerGeneratedAttribute]
public T get_Previous();
    [CompilerGeneratedAttribute]
public void set_Previous(T value);
}
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Resource.FullFidelity.Converters.ChangeFeedMetadataConverter")]
internal class Microsoft.Azure.Cosmos.ChangeFeedMetadata : object {
    [CompilerGeneratedAttribute]
private DateTime <ConflictResolutionTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Lsn>k__BackingField;
    [CompilerGeneratedAttribute]
private ChangeFeedOperationType <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PreviousLsn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTimeToLiveExpired>k__BackingField;
    [JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.Azure.Documents.UnixDateTimeConverter")]
public DateTime ConflictResolutionTimestamp { get; internal set; }
    [JsonPropertyAttribute]
public long Lsn { get; internal set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public ChangeFeedOperationType OperationType { get; internal set; }
    [JsonPropertyAttribute]
public long PreviousLsn { get; internal set; }
    [JsonPropertyAttribute]
public bool IsTimeToLiveExpired { get; internal set; }
    [CompilerGeneratedAttribute]
public DateTime get_ConflictResolutionTimestamp();
    [CompilerGeneratedAttribute]
internal void set_ConflictResolutionTimestamp(DateTime value);
    [CompilerGeneratedAttribute]
public long get_Lsn();
    [CompilerGeneratedAttribute]
internal void set_Lsn(long value);
    [CompilerGeneratedAttribute]
public ChangeFeedOperationType get_OperationType();
    [CompilerGeneratedAttribute]
internal void set_OperationType(ChangeFeedOperationType value);
    [CompilerGeneratedAttribute]
public long get_PreviousLsn();
    [CompilerGeneratedAttribute]
internal void set_PreviousLsn(long value);
    [CompilerGeneratedAttribute]
public bool get_IsTimeToLiveExpired();
    [CompilerGeneratedAttribute]
internal void set_IsTimeToLiveExpired(bool value);
}
public abstract class Microsoft.Azure.Cosmos.ChangeFeedMode : object {
    public static ChangeFeedMode Incremental { get; }
    public static ChangeFeedMode LatestVersion { get; }
    internal static ChangeFeedMode AllVersionsAndDeletes { get; }
    internal abstract virtual void Accept(RequestMessage requestMessage);
    public static ChangeFeedMode get_Incremental();
    public static ChangeFeedMode get_LatestVersion();
    internal static ChangeFeedMode get_AllVersionsAndDeletes();
}
internal enum Microsoft.Azure.Cosmos.ChangeFeedOperationType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ChangeFeedOperationType Create;
    [EnumMemberAttribute]
public static ChangeFeedOperationType Replace;
    [EnumMemberAttribute]
public static ChangeFeedOperationType Delete;
}
internal class Microsoft.Azure.Cosmos.ChangeFeedOptions : object {
    private Nullable`1<DateTime> startTime;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestContinuation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartitionKeyRangeId>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionKey <PartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StartFromBeginning>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeTentativeWrites>k__BackingField;
    public Nullable`1<int> MaxItemCount { get; public set; }
    public string RequestContinuation { get; public set; }
    public string SessionToken { get; public set; }
    public string PartitionKeyRangeId { get; public set; }
    public PartitionKey PartitionKey { get; public set; }
    public bool StartFromBeginning { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    internal bool IncludeTentativeWrites { get; internal set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxItemCount();
    [CompilerGeneratedAttribute]
public void set_MaxItemCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_RequestContinuation();
    [CompilerGeneratedAttribute]
public void set_RequestContinuation(string value);
    [CompilerGeneratedAttribute]
public string get_SessionToken();
    [CompilerGeneratedAttribute]
public void set_SessionToken(string value);
    [CompilerGeneratedAttribute]
public string get_PartitionKeyRangeId();
    [CompilerGeneratedAttribute]
public void set_PartitionKeyRangeId(string value);
    [CompilerGeneratedAttribute]
public PartitionKey get_PartitionKey();
    [CompilerGeneratedAttribute]
public void set_PartitionKey(PartitionKey value);
    [CompilerGeneratedAttribute]
public bool get_StartFromBeginning();
    [CompilerGeneratedAttribute]
public void set_StartFromBeginning(bool value);
    public Nullable`1<DateTime> get_StartTime();
    public void set_StartTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
internal bool get_IncludeTentativeWrites();
    [CompilerGeneratedAttribute]
internal void set_IncludeTentativeWrites(bool value);
}
internal class Microsoft.Azure.Cosmos.ChangeFeedPolicy : object {
    [JsonPropertyAttribute]
private int retentionDurationInMinutes;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonIgnoreAttribute]
public TimeSpan FullFidelityRetention { get; public set; }
    public static TimeSpan FullFidelityNoRetention { get; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    public TimeSpan get_FullFidelityRetention();
    public void set_FullFidelityRetention(TimeSpan value);
    public static TimeSpan get_FullFidelityNoRetention();
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public abstract class Microsoft.Azure.Cosmos.ChangeFeedProcessor : object {
    public abstract virtual Task StartAsync();
    public abstract virtual Task StopAsync();
}
public class Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder : object {
    private static string InMemoryDefaultHostName;
    private ContainerInternal monitoredContainer;
    private ChangeFeedProcessor changeFeedProcessor;
    private ChangeFeedLeaseOptions changeFeedLeaseOptions;
    private Action`6<DocumentServiceLeaseStoreManager, ContainerInternal, string, ChangeFeedLeaseOptions, ChangeFeedProcessorOptions, ContainerInternal> applyBuilderConfiguration;
    private ChangeFeedProcessorOptions changeFeedProcessorOptions;
    private ContainerInternal leaseContainer;
    private string InstanceName;
    private DocumentServiceLeaseStoreManager LeaseStoreManager;
    private bool isBuilt;
    internal ChangeFeedProcessorBuilder(string processorName, ContainerInternal container, ChangeFeedProcessor changeFeedProcessor, Action`6<DocumentServiceLeaseStoreManager, ContainerInternal, string, ChangeFeedLeaseOptions, ChangeFeedProcessorOptions, ContainerInternal> applyBuilderConfiguration);
    public ChangeFeedProcessorBuilder WithInstanceName(string instanceName);
    internal ChangeFeedProcessorBuilder WithChangeFeedMode(ChangeFeedMode changeFeedMode);
    public ChangeFeedProcessorBuilder WithLeaseConfiguration(Nullable`1<TimeSpan> acquireInterval, Nullable`1<TimeSpan> expirationInterval, Nullable`1<TimeSpan> renewInterval);
    public ChangeFeedProcessorBuilder WithPollInterval(TimeSpan pollInterval);
    internal virtual ChangeFeedProcessorBuilder WithStartFromBeginning();
    public ChangeFeedProcessorBuilder WithStartTime(DateTime startTime);
    public ChangeFeedProcessorBuilder WithMaxItems(int maxItemCount);
    public ChangeFeedProcessorBuilder WithLeaseContainer(Container leaseContainer);
    internal virtual ChangeFeedProcessorBuilder WithInMemoryLeaseContainer();
    public ChangeFeedProcessorBuilder WithErrorNotification(ChangeFeedMonitorErrorDelegate errorDelegate);
    public ChangeFeedProcessorBuilder WithLeaseAcquireNotification(ChangeFeedMonitorLeaseAcquireDelegate acquireDelegate);
    public ChangeFeedProcessorBuilder WithLeaseReleaseNotification(ChangeFeedMonitorLeaseReleaseDelegate releaseDelegate);
    public ChangeFeedProcessor Build();
}
public abstract class Microsoft.Azure.Cosmos.ChangeFeedProcessorContext : object {
    public string LeaseToken { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public Headers Headers { get; }
    public FeedRange FeedRange { get; }
    public abstract virtual string get_LeaseToken();
    public abstract virtual CosmosDiagnostics get_Diagnostics();
    public abstract virtual Headers get_Headers();
    public abstract virtual FeedRange get_FeedRange();
}
internal abstract class Microsoft.Azure.Cosmos.ChangeFeedProcessorHealthMonitor : object {
    public abstract virtual Task NotifyLeaseAcquireAsync(string leaseToken);
    public abstract virtual Task NotifyLeaseReleaseAsync(string leaseToken);
    public abstract virtual Task NotifyErrorAsync(string leaseToken, Exception exception);
}
public class Microsoft.Azure.Cosmos.ChangeFeedProcessorState : object {
    [CompilerGeneratedAttribute]
private string <LeaseToken>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EstimatedLag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    public string LeaseToken { get; }
    public long EstimatedLag { get; }
    public string InstanceName { get; }
    public ChangeFeedProcessorState(string leaseToken, long estimatedLag, string instanceName);
    [CompilerGeneratedAttribute]
public string get_LeaseToken();
    [CompilerGeneratedAttribute]
public long get_EstimatedLag();
    [CompilerGeneratedAttribute]
public string get_InstanceName();
}
public class Microsoft.Azure.Cosmos.ChangeFeedProcessorUserException : Exception {
    private static string DefaultMessage;
    [CompilerGeneratedAttribute]
private ChangeFeedProcessorContext <ChangeFeedProcessorContext>k__BackingField;
    public ChangeFeedProcessorContext ChangeFeedProcessorContext { get; private set; }
    public ChangeFeedProcessorUserException(Exception originalException, ChangeFeedProcessorContext context);
    protected ChangeFeedProcessorUserException(SerializationInfo info, StreamingContext context);
    private static ChangeFeedProcessorUserException();
    [CompilerGeneratedAttribute]
public ChangeFeedProcessorContext get_ChangeFeedProcessorContext();
    [CompilerGeneratedAttribute]
private void set_ChangeFeedProcessorContext(ChangeFeedProcessorContext value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static void RecordOtelAttributes(ChangeFeedProcessorUserException exception, DiagnosticScope scope);
}
public class Microsoft.Azure.Cosmos.ChangeFeedRequestOptions : RequestOptions {
    private Nullable`1<int> pageSizeHint;
    [CompilerGeneratedAttribute]
private JsonSerializationFormatOptions <JsonSerializationFormatOptions>k__BackingField;
    public Nullable`1<int> PageSizeHint { get; public set; }
    [ObsoleteAttribute("IfMatchEtag is inherited from the base class but not used.")]
[EditorBrowsableAttribute("1")]
public string IfMatchEtag { get; public set; }
    [ObsoleteAttribute("IfNoneMatchEtag is inherited from the base class but not used.")]
[EditorBrowsableAttribute("1")]
public string IfNoneMatchEtag { get; public set; }
    internal JsonSerializationFormatOptions JsonSerializationFormatOptions { get; internal set; }
    public Nullable`1<int> get_PageSizeHint();
    public void set_PageSizeHint(Nullable`1<int> value);
    internal virtual void PopulateRequestOptions(RequestMessage request);
    public string get_IfMatchEtag();
    public void set_IfMatchEtag(string value);
    public string get_IfNoneMatchEtag();
    public void set_IfNoneMatchEtag(string value);
    [CompilerGeneratedAttribute]
internal JsonSerializationFormatOptions get_JsonSerializationFormatOptions();
    [CompilerGeneratedAttribute]
internal void set_JsonSerializationFormatOptions(JsonSerializationFormatOptions value);
    internal ChangeFeedRequestOptions Clone();
}
public abstract class Microsoft.Azure.Cosmos.ChangeFeedStartFrom : object {
    [CompilerGeneratedAttribute]
private FeedRange <FeedRange>k__BackingField;
    internal FeedRange FeedRange { get; }
    internal ChangeFeedStartFrom(FeedRange feedRange);
    [CompilerGeneratedAttribute]
internal FeedRange get_FeedRange();
    internal abstract virtual void Accept(ChangeFeedStartFromVisitor visitor);
    internal abstract virtual TResult Accept(ChangeFeedStartFromVisitor`1<TResult> visitor);
    internal abstract virtual Task`1<TResult> AcceptAsync(ChangeFeedStartFromAsyncVisitor`2<TInput, TResult> visitor, TInput input, CancellationToken cancellationToken);
    public static ChangeFeedStartFrom Now();
    public static ChangeFeedStartFrom Now(FeedRange feedRange);
    public static ChangeFeedStartFrom Time(DateTime dateTimeUtc);
    public static ChangeFeedStartFrom Time(DateTime dateTimeUtc, FeedRange feedRange);
    public static ChangeFeedStartFrom ContinuationToken(string continuationToken);
    public static ChangeFeedStartFrom Beginning();
    public static ChangeFeedStartFrom Beginning(FeedRange feedRange);
}
internal class Microsoft.Azure.Cosmos.ClearingSessionContainerClientRetryPolicy : object {
    private IDocumentClientRetryPolicy retryPolicy;
    private ISessionContainer sessionContainer;
    private DocumentServiceRequest request;
    private bool hasTriggered;
    public ClearingSessionContainerClientRetryPolicy(ISessionContainer sessionContainer, IDocumentClientRetryPolicy retryPolicy);
    public sealed virtual void OnBeforeSendRequest(DocumentServiceRequest request);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClearingSessionContainerClientRetryPolicy/<ShouldRetryAsync>d__6")]
public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(Exception exception, CancellationToken cancellationToken);
    public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(ResponseMessage cosmosResponseMessage, CancellationToken cancellationToken);
    private ShouldRetryResult ShouldRetryInternal(Nullable`1<HttpStatusCode> statusCode, Nullable`1<SubStatusCodes> subStatusCode, ShouldRetryResult shouldRetryResult);
}
internal class Microsoft.Azure.Cosmos.ClientContextCore : CosmosClientContext {
    private BatchAsyncContainerExecutorCache batchExecutorCache;
    private CosmosClient client;
    private DocumentClient documentClient;
    private CosmosSerializerCore serializerCore;
    private CosmosResponseFactoryInternal responseFactory;
    private RequestInvokerHandler requestHandler;
    private CosmosClientOptions clientOptions;
    private string userAgent;
    private bool isDisposed;
    internal CosmosClient Client { get; }
    internal DocumentClient DocumentClient { get; }
    internal CosmosSerializerCore SerializerCore { get; }
    internal CosmosResponseFactoryInternal ResponseFactory { get; }
    internal RequestInvokerHandler RequestHandler { get; }
    internal CosmosClientOptions ClientOptions { get; }
    internal string UserAgent { get; }
    private ClientContextCore(CosmosClient client, CosmosClientOptions clientOptions, CosmosSerializerCore serializerCore, CosmosResponseFactoryInternal cosmosResponseFactory, RequestInvokerHandler requestHandler, DocumentClient documentClient, string userAgent, BatchAsyncContainerExecutorCache batchExecutorCache);
    internal static CosmosClientContext Create(CosmosClient cosmosClient, CosmosClientOptions clientOptions);
    private static RemoteCertificateValidationCallback SslCustomValidationCallBack(Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> serverCertificateCustomValidationCallback);
    internal static CosmosClientContext Create(CosmosClient cosmosClient, DocumentClient documentClient, CosmosClientOptions clientOptions, RequestInvokerHandler requestInvokerHandler);
    internal virtual CosmosClient get_Client();
    internal virtual DocumentClient get_DocumentClient();
    internal virtual CosmosSerializerCore get_SerializerCore();
    internal virtual CosmosResponseFactoryInternal get_ResponseFactory();
    internal virtual RequestInvokerHandler get_RequestHandler();
    internal virtual CosmosClientOptions get_ClientOptions();
    internal virtual string get_UserAgent();
    internal virtual string CreateLink(string parentLink, string uriPathSegment, string id);
    internal virtual void ValidateResource(string resourceId);
    internal virtual Task`1<TResult> OperationHelperAsync(string operationName, string containerName, string databaseName, OperationType operationType, RequestOptions requestOptions, Func`2<ITrace, Task`1<TResult>> task, Func`2<TResult, OpenTelemetryAttributes> openTelemetry, TraceComponent traceComponent, TraceLevel traceLevel);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientContextCore/<OperationHelperWithRootTraceAsync>d__30`1")]
private Task`1<TResult> OperationHelperWithRootTraceAsync(string operationName, string containerName, string databaseName, OperationType operationType, RequestOptions requestOptions, Func`2<ITrace, Task`1<TResult>> task, Func`2<TResult, OpenTelemetryAttributes> openTelemetry, TraceComponent traceComponent, TraceLevel traceLevel);
    private Task`1<TResult> OperationHelperWithRootTraceWithSynchronizationContextAsync(string operationName, string containerName, string databaseName, OperationType operationType, RequestOptions requestOptions, Func`2<ITrace, Task`1<TResult>> task, Func`2<TResult, OpenTelemetryAttributes> openTelemetry, TraceComponent traceComponent, TraceLevel traceLevel);
    internal virtual Task`1<ResponseMessage> ProcessResourceOperationStreamAsync(string resourceUri, ResourceType resourceType, OperationType operationType, RequestOptions requestOptions, ContainerInternal cosmosContainerCore, Nullable`1<PartitionKey> partitionKey, string itemId, Stream streamPayload, Action`1<RequestMessage> requestEnricher, ITrace trace, CancellationToken cancellationToken);
    internal virtual Task`1<ResponseMessage> ProcessResourceOperationStreamAsync(string resourceUri, ResourceType resourceType, OperationType operationType, RequestOptions requestOptions, ContainerInternal cosmosContainerCore, FeedRange feedRange, Stream streamPayload, Action`1<RequestMessage> requestEnricher, ITrace trace, CancellationToken cancellationToken);
    internal virtual Task`1<T> ProcessResourceOperationAsync(string resourceUri, ResourceType resourceType, OperationType operationType, RequestOptions requestOptions, ContainerInternal cosmosContainerCore, FeedRange feedRange, Stream streamPayload, Action`1<RequestMessage> requestEnricher, Func`2<ResponseMessage, T> responseCreator, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientContextCore/<GetCachedContainerPropertiesAsync>d__35")]
internal virtual Task`1<ContainerProperties> GetCachedContainerPropertiesAsync(string containerUri, ITrace trace, CancellationToken cancellationToken);
    internal virtual BatchAsyncContainerExecutor GetExecutorForContainer(ContainerInternal container);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientContextCore/<InitializeContainerUsingRntbdAsync>d__37")]
internal virtual Task InitializeContainerUsingRntbdAsync(string databaseId, string containerLinkUri, CancellationToken cancellationToken);
    public virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientContextCore/<RunWithDiagnosticsHelperAsync>d__40`1")]
private Task`1<TResult> RunWithDiagnosticsHelperAsync(string containerName, string databaseName, OperationType operationType, ITrace trace, Func`2<ITrace, Task`1<TResult>> task, Func`2<TResult, OpenTelemetryAttributes> openTelemetry, string operationName, RequestOptions requestOptions);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientContextCore/<ProcessResourceOperationAsBulkStreamAsync>d__41")]
private Task`1<ResponseMessage> ProcessResourceOperationAsBulkStreamAsync(OperationType operationType, RequestOptions requestOptions, ContainerInternal cosmosContainerCore, PartitionKey partitionKey, string itemId, Stream streamPayload, ITrace trace, CancellationToken cancellationToken);
    private bool IsBulkOperationSupported(ResourceType resourceType, OperationType operationType);
    private static CosmosClientOptions CreateOrCloneClientOptions(CosmosClientOptions clientOptions);
    internal T ThrowIfDisposed(T input);
    private void ThrowIfDisposed();
}
public class Microsoft.Azure.Cosmos.ClientEncryptionIncludedPath : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientEncryptionKeyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncryptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncryptionAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [JsonPropertyAttribute]
public string ClientEncryptionKeyId { get; public set; }
    [JsonPropertyAttribute]
public string EncryptionType { get; public set; }
    [JsonPropertyAttribute]
public string EncryptionAlgorithm { get; public set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_ClientEncryptionKeyId();
    [CompilerGeneratedAttribute]
public void set_ClientEncryptionKeyId(string value);
    [CompilerGeneratedAttribute]
public string get_EncryptionType();
    [CompilerGeneratedAttribute]
public void set_EncryptionType(string value);
    [CompilerGeneratedAttribute]
public string get_EncryptionAlgorithm();
    [CompilerGeneratedAttribute]
public void set_EncryptionAlgorithm(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public abstract class Microsoft.Azure.Cosmos.ClientEncryptionKey : object {
    public string Id { get; }
    public abstract virtual string get_Id();
    public abstract virtual Task`1<ClientEncryptionKeyResponse> ReadAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ClientEncryptionKeyResponse> ReplaceAsync(ClientEncryptionKeyProperties clientEncryptionKeyProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ClientEncryptionKeyCore : ClientEncryptionKey {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Database <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkUri>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosClientContext <ClientContext>k__BackingField;
    public string Id { get; }
    public Database Database { get; }
    public string LinkUri { get; }
    public CosmosClientContext ClientContext { get; }
    public ClientEncryptionKeyCore(CosmosClientContext clientContext, DatabaseInternal database, string keyId);
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
public virtual Database get_Database();
    [CompilerGeneratedAttribute]
public virtual string get_LinkUri();
    [CompilerGeneratedAttribute]
public virtual CosmosClientContext get_ClientContext();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientEncryptionKeyCore/<ReadAsync>d__14")]
public virtual Task`1<ClientEncryptionKeyResponse> ReadAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientEncryptionKeyCore/<ReplaceAsync>d__15")]
public virtual Task`1<ClientEncryptionKeyResponse> ReplaceAsync(ClientEncryptionKeyProperties clientEncryptionKeyProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public static string CreateLinkUri(CosmosClientContext clientContext, DatabaseInternal database, string keyId);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientEncryptionKeyCore/<ReadInternalAsync>d__17")]
private Task`1<ClientEncryptionKeyResponse> ReadInternalAsync(RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientEncryptionKeyCore/<ReplaceInternalAsync>d__18")]
private Task`1<ClientEncryptionKeyResponse> ReplaceInternalAsync(ClientEncryptionKeyProperties clientEncryptionKeyProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ProcessStreamAsync(Stream streamPayload, OperationType operationType, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ClientEncryptionKeyInlineCore : ClientEncryptionKeyCore {
    internal ClientEncryptionKeyInlineCore(CosmosClientContext clientContext, DatabaseInternal database, string keyId);
    public virtual Task`1<ClientEncryptionKeyResponse> ReadAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ClientEncryptionKeyResponse> ReplaceAsync(ClientEncryptionKeyProperties clientEncryptionKeyProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ClientEncryptionKeyResponse> <>n__0(RequestOptions requestOptions, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ClientEncryptionKeyResponse> <>n__1(ClientEncryptionKeyProperties clientEncryptionKeyProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
}
public class Microsoft.Azure.Cosmos.ClientEncryptionKeyProperties : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncryptionAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <WrappedDataEncryptionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private EncryptionKeyWrapMetadata <EncryptionKeyWrapMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfLink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Id { get; internal set; }
    [JsonPropertyAttribute]
public string EncryptionAlgorithm { get; internal set; }
    [JsonPropertyAttribute]
public Byte[] WrappedDataEncryptionKey { get; internal set; }
    [JsonPropertyAttribute]
public EncryptionKeyWrapMetadata EncryptionKeyWrapMetadata { get; internal set; }
    [JsonConverterAttribute("Microsoft.Azure.Documents.UnixDateTimeConverter")]
[JsonPropertyAttribute]
public Nullable`1<DateTime> CreatedTime { get; internal set; }
    [JsonPropertyAttribute]
public string ETag { get; internal set; }
    [JsonConverterAttribute("Microsoft.Azure.Documents.UnixDateTimeConverter")]
[JsonPropertyAttribute]
public Nullable`1<DateTime> LastModified { get; internal set; }
    [JsonPropertyAttribute]
public string SelfLink { get; internal set; }
    [JsonPropertyAttribute]
internal string ResourceId { get; internal set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    public ClientEncryptionKeyProperties(string id, string encryptionAlgorithm, Byte[] wrappedDataEncryptionKey, EncryptionKeyWrapMetadata encryptionKeyWrapMetadata);
    internal ClientEncryptionKeyProperties(ClientEncryptionKeyProperties source);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_EncryptionAlgorithm();
    [CompilerGeneratedAttribute]
internal void set_EncryptionAlgorithm(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_WrappedDataEncryptionKey();
    [CompilerGeneratedAttribute]
internal void set_WrappedDataEncryptionKey(Byte[] value);
    [CompilerGeneratedAttribute]
public EncryptionKeyWrapMetadata get_EncryptionKeyWrapMetadata();
    [CompilerGeneratedAttribute]
internal void set_EncryptionKeyWrapMetadata(EncryptionKeyWrapMetadata value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CreatedTime();
    [CompilerGeneratedAttribute]
internal void set_CreatedTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
internal void set_ETag(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastModified();
    [CompilerGeneratedAttribute]
internal void set_LastModified(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_SelfLink();
    [CompilerGeneratedAttribute]
internal virtual void set_SelfLink(string value);
    [CompilerGeneratedAttribute]
internal string get_ResourceId();
    [CompilerGeneratedAttribute]
internal void set_ResourceId(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ClientEncryptionKeyProperties other);
    public virtual int GetHashCode();
    private static bool Equals(Byte[] x, Byte[] y);
}
public class Microsoft.Azure.Cosmos.ClientEncryptionKeyResponse : Response`1<ClientEncryptionKeyProperties> {
    [CompilerGeneratedAttribute]
private ClientEncryptionKey <ClientEncryptionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientEncryptionKeyProperties <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    public ClientEncryptionKey ClientEncryptionKey { get; }
    public Headers Headers { get; }
    public ClientEncryptionKeyProperties Resource { get; }
    public HttpStatusCode StatusCode { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ETag { get; }
    internal RequestMessage RequestMessage { get; }
    internal ClientEncryptionKeyResponse(HttpStatusCode httpStatusCode, Headers headers, ClientEncryptionKeyProperties keyProperties, ClientEncryptionKey key, CosmosDiagnostics diagnostics, RequestMessage requestMessage);
    [CompilerGeneratedAttribute]
public virtual ClientEncryptionKey get_ClientEncryptionKey();
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public virtual ClientEncryptionKeyProperties get_Resource();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    public virtual double get_RequestCharge();
    public virtual string get_ActivityId();
    public virtual string get_ETag();
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
    public static ClientEncryptionKey op_Implicit(ClientEncryptionKeyResponse response);
}
public class Microsoft.Azure.Cosmos.ClientEncryptionPolicy : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ClientEncryptionIncludedPath> <IncludedPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PolicyFormatVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public IEnumerable`1<ClientEncryptionIncludedPath> IncludedPaths { get; private set; }
    [JsonPropertyAttribute]
public int PolicyFormatVersion { get; private set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    public ClientEncryptionPolicy(IEnumerable`1<ClientEncryptionIncludedPath> includedPaths);
    public ClientEncryptionPolicy(IEnumerable`1<ClientEncryptionIncludedPath> includedPaths, int policyFormatVersion);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ClientEncryptionIncludedPath> get_IncludedPaths();
    [CompilerGeneratedAttribute]
private void set_IncludedPaths(IEnumerable`1<ClientEncryptionIncludedPath> value);
    [CompilerGeneratedAttribute]
public int get_PolicyFormatVersion();
    [CompilerGeneratedAttribute]
private void set_PolicyFormatVersion(int value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
    internal void ValidatePartitionKeyPathsIfEncrypted(IReadOnlyList`1<IReadOnlyList`1<string>> partitionKeyPathTokens);
    private static void ValidateIncludedPaths(IEnumerable`1<ClientEncryptionIncludedPath> clientEncryptionIncludedPath, int policyFormatVersion);
    private static void ValidateClientEncryptionIncludedPath(ClientEncryptionIncludedPath clientEncryptionIncludedPath, int policyFormatVersion);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.ClientExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientExtensions/<GetAsync>d__0")]
[ExtensionAttribute]
public static Task`1<HttpResponseMessage> GetAsync(HttpClient client, Uri uri, INameValueCollection additionalHeaders, CancellationToken cancellationToken);
    public static Task`1<DocumentServiceResponse> ParseResponseAsync(HttpResponseMessage responseMessage, JsonSerializerSettings serializerSettings, DocumentServiceRequest request);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientExtensions/<ParseMediaResponseAsync>d__2")]
public static Task`1<DocumentServiceResponse> ParseMediaResponseAsync(HttpResponseMessage responseMessage, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ClientPipelineBuilder : object {
    private CosmosClient client;
    private Nullable`1<ConsistencyLevel> requestedClientConsistencyLevel;
    private Nullable`1<PriorityLevel> requestedPriorityLevel;
    private DiagnosticsHandler diagnosticsHandler;
    private RequestHandler invalidPartitionExceptionRetryHandler;
    private RequestHandler transportHandler;
    private TelemetryHandler telemetryHandler;
    private IReadOnlyCollection`1<RequestHandler> customHandlers;
    private RequestHandler retryHandler;
    [CompilerGeneratedAttribute]
private RequestHandler <PartitionKeyRangeHandler>k__BackingField;
    internal IReadOnlyCollection`1<RequestHandler> CustomHandlers { get; private set; }
    internal RequestHandler PartitionKeyRangeHandler { get; internal set; }
    public ClientPipelineBuilder(CosmosClient client, Nullable`1<ConsistencyLevel> requestedClientConsistencyLevel, Nullable`1<PriorityLevel> requestedClientPriorityLevel, IReadOnlyCollection`1<RequestHandler> customHandlers, TelemetryToServiceHelper telemetryToServiceHelper);
    internal IReadOnlyCollection`1<RequestHandler> get_CustomHandlers();
    private void set_CustomHandlers(IReadOnlyCollection`1<RequestHandler> value);
    [CompilerGeneratedAttribute]
internal RequestHandler get_PartitionKeyRangeHandler();
    [CompilerGeneratedAttribute]
internal void set_PartitionKeyRangeHandler(RequestHandler value);
    public RequestInvokerHandler Build();
    internal static RequestHandler CreatePipeline(RequestHandler[] requestHandlers);
    private ClientPipelineBuilder UseRetryPolicy();
    private ClientPipelineBuilder AddCustomHandlers(IReadOnlyCollection`1<RequestHandler> customHandlers);
    private RequestHandler CreateDocumentFeedPipeline();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Azure.Cosmos.ClientResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AllServicePoolsEmpty { get; }
    internal static string AuthTokenNotFound { get; }
    internal static string BadQuery_IllegalMemberAccess { get; }
    internal static string BadQuery_InvalidArrayIndexExpression { get; }
    internal static string BadQuery_InvalidArrayIndexType { get; }
    internal static string BadQuery_InvalidComparison { get; }
    internal static string BadQuery_InvalidComparisonType { get; }
    internal static string BadQuery_InvalidExpression { get; }
    internal static string BadQuery_InvalidLeftExpression { get; }
    internal static string BadQuery_InvalidMemberAccessExpression { get; }
    internal static string BadQuery_InvalidMethodCall { get; }
    internal static string BadQuery_InvalidQueryType { get; }
    internal static string BadQuery_InvalidReturnType { get; }
    internal static string BadQuery_TooManySelectManyArguments { get; }
    internal static string BadQuery_TransformQueryException { get; }
    internal static string BadSession { get; }
    internal static string BatchNoOperations { get; }
    internal static string BatchOperationTooLarge { get; }
    internal static string BatchRequestOptionNotSupported { get; }
    internal static string BatchTooLarge { get; }
    internal static string BinaryOperatorNotSupported { get; }
    internal static string ConstantTypeIsNotSupported { get; }
    internal static string ConstructorInvocationNotSupported { get; }
    internal static string EncryptorNotConfigured { get; }
    internal static string EpkPropertiesPairingExpected { get; }
    internal static string ExpectedMethodCallsMethods { get; }
    internal static string ExpressionTypeIsNotSupported { get; }
    internal static string FailedToEvaluateSpatialExpression { get; }
    internal static string FailedToGetAadToken { get; }
    internal static string FeedToken_EffectivePartitionKeyRouting { get; }
    internal static string FeedToken_InvalidFeedTokenForContainer { get; }
    internal static string FeedToken_UnknownFormat { get; }
    internal static string FeedToken_UnrecognizedFeedToken { get; }
    internal static string InputIsNotIDocumentQuery { get; }
    internal static string InvalidArgumentsCount { get; }
    internal static string InvalidCallToUserDefinedFunctionProvider { get; }
    internal static string InvalidRangeError { get; }
    internal static string InvalidRequestWithEncryptionOptions { get; }
    internal static string InvalidServerResponse { get; }
    internal static string InvalidSkipValue { get; }
    internal static string InvalidTakeValue { get; }
    internal static string InvalidTypesForMethod { get; }
    internal static string MediaLinkInvalid { get; }
    internal static string MemberBindingNotSupported { get; }
    internal static string MethodNotSupported { get; }
    internal static string NotSupported { get; }
    internal static string OnlyLINQMethodsAreSupported { get; }
    internal static string PartitionKeyExtractError { get; }
    internal static string PartitionKeyPathConflict { get; }
    internal static string PartitionPropertyNotFound { get; }
    internal static string PartitionResolver_DatabaseAlreadyExist { get; }
    internal static string PartitionResolver_DatabaseDoesntExist { get; }
    internal static string PathExpressionsOnly { get; }
    internal static string PKAndEpkSetTogether { get; }
    internal static string RangeNotFoundError { get; }
    internal static string ServerResponseDeserializationFailure { get; }
    internal static string StringCompareToInvalidConstant { get; }
    internal static string StringCompareToInvalidOperator { get; }
    internal static string StringCompareInvalidOperator { get; }
    internal static string StringCompareInvalidConstant { get; }
    internal static string TokenRefreshInProgress { get; }
    internal static string TypeCheckExtensionFunctionsNotImplemented { get; }
    internal static string UdfNameIsNullOrEmpty { get; }
    internal static string UnaryOperatorNotSupported { get; }
    internal static string UnexpectedAuthTokenType { get; }
    internal static string UnexpectedTokenType { get; }
    internal static string UnsupportedBulkRequestOptions { get; }
    internal static string UnsupportedPartitionKey { get; }
    internal static string ValueAndAnonymousTypesAndGeometryOnly { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AllServicePoolsEmpty();
    internal static string get_AuthTokenNotFound();
    internal static string get_BadQuery_IllegalMemberAccess();
    internal static string get_BadQuery_InvalidArrayIndexExpression();
    internal static string get_BadQuery_InvalidArrayIndexType();
    internal static string get_BadQuery_InvalidComparison();
    internal static string get_BadQuery_InvalidComparisonType();
    internal static string get_BadQuery_InvalidExpression();
    internal static string get_BadQuery_InvalidLeftExpression();
    internal static string get_BadQuery_InvalidMemberAccessExpression();
    internal static string get_BadQuery_InvalidMethodCall();
    internal static string get_BadQuery_InvalidQueryType();
    internal static string get_BadQuery_InvalidReturnType();
    internal static string get_BadQuery_TooManySelectManyArguments();
    internal static string get_BadQuery_TransformQueryException();
    internal static string get_BadSession();
    internal static string get_BatchNoOperations();
    internal static string get_BatchOperationTooLarge();
    internal static string get_BatchRequestOptionNotSupported();
    internal static string get_BatchTooLarge();
    internal static string get_BinaryOperatorNotSupported();
    internal static string get_ConstantTypeIsNotSupported();
    internal static string get_ConstructorInvocationNotSupported();
    internal static string get_EncryptorNotConfigured();
    internal static string get_EpkPropertiesPairingExpected();
    internal static string get_ExpectedMethodCallsMethods();
    internal static string get_ExpressionTypeIsNotSupported();
    internal static string get_FailedToEvaluateSpatialExpression();
    internal static string get_FailedToGetAadToken();
    internal static string get_FeedToken_EffectivePartitionKeyRouting();
    internal static string get_FeedToken_InvalidFeedTokenForContainer();
    internal static string get_FeedToken_UnknownFormat();
    internal static string get_FeedToken_UnrecognizedFeedToken();
    internal static string get_InputIsNotIDocumentQuery();
    internal static string get_InvalidArgumentsCount();
    internal static string get_InvalidCallToUserDefinedFunctionProvider();
    internal static string get_InvalidRangeError();
    internal static string get_InvalidRequestWithEncryptionOptions();
    internal static string get_InvalidServerResponse();
    internal static string get_InvalidSkipValue();
    internal static string get_InvalidTakeValue();
    internal static string get_InvalidTypesForMethod();
    internal static string get_MediaLinkInvalid();
    internal static string get_MemberBindingNotSupported();
    internal static string get_MethodNotSupported();
    internal static string get_NotSupported();
    internal static string get_OnlyLINQMethodsAreSupported();
    internal static string get_PartitionKeyExtractError();
    internal static string get_PartitionKeyPathConflict();
    internal static string get_PartitionPropertyNotFound();
    internal static string get_PartitionResolver_DatabaseAlreadyExist();
    internal static string get_PartitionResolver_DatabaseDoesntExist();
    internal static string get_PathExpressionsOnly();
    internal static string get_PKAndEpkSetTogether();
    internal static string get_RangeNotFoundError();
    internal static string get_ServerResponseDeserializationFailure();
    internal static string get_StringCompareToInvalidConstant();
    internal static string get_StringCompareToInvalidOperator();
    internal static string get_StringCompareInvalidOperator();
    internal static string get_StringCompareInvalidConstant();
    internal static string get_TokenRefreshInProgress();
    internal static string get_TypeCheckExtensionFunctionsNotImplemented();
    internal static string get_UdfNameIsNullOrEmpty();
    internal static string get_UnaryOperatorNotSupported();
    internal static string get_UnexpectedAuthTokenType();
    internal static string get_UnexpectedTokenType();
    internal static string get_UnsupportedBulkRequestOptions();
    internal static string get_UnsupportedPartitionKey();
    internal static string get_ValueAndAnonymousTypesAndGeometryOnly();
}
internal class Microsoft.Azure.Cosmos.ClientRetryPolicy : object {
    private static int RetryIntervalInMS;
    private static int MaxRetryCount;
    private static int MaxServiceUnavailableRetryCount;
    private IDocumentClientRetryPolicy throttlingRetry;
    private GlobalEndpointManager globalEndpointManager;
    private GlobalPartitionEndpointManager partitionKeyRangeLocationCache;
    private bool enableEndpointDiscovery;
    private bool isPertitionLevelFailoverEnabled;
    private int failoverRetryCount;
    private int sessionTokenRetryCount;
    private int serviceUnavailableRetryCount;
    private bool isReadRequest;
    private bool canUseMultipleWriteLocations;
    private bool isMultiMasterWriteRequest;
    private Uri locationEndpoint;
    private RetryContext retryContext;
    private DocumentServiceRequest documentServiceRequest;
    public ClientRetryPolicy(GlobalEndpointManager globalEndpointManager, GlobalPartitionEndpointManager partitionKeyRangeLocationCache, RetryOptions retryOptions, bool enableEndpointDiscovery, bool isPertitionLevelFailoverEnabled);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientRetryPolicy/<ShouldRetryAsync>d__18")]
public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(Exception exception, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientRetryPolicy/<ShouldRetryAsync>d__19")]
public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(ResponseMessage cosmosResponseMessage, CancellationToken cancellationToken);
    public sealed virtual void OnBeforeSendRequest(DocumentServiceRequest request);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientRetryPolicy/<ShouldRetryInternalAsync>d__21")]
private Task`1<ShouldRetryResult> ShouldRetryInternalAsync(Nullable`1<HttpStatusCode> statusCode, Nullable`1<SubStatusCodes> subStatusCode);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ClientRetryPolicy/<ShouldRetryOnEndpointFailureAsync>d__22")]
private Task`1<ShouldRetryResult> ShouldRetryOnEndpointFailureAsync(bool isReadRequest, bool markBothReadAndWriteAsUnavailable, bool forceRefresh, bool retryOnPreferredLocations, bool overwriteEndpointDiscovery);
    private ShouldRetryResult ShouldRetryOnSessionNotAvailable(DocumentServiceRequest request);
    private ShouldRetryResult TryMarkEndpointUnavailableForPkRangeAndRetryOnServiceUnavailable(bool shouldMarkEndpointUnavailableForPkRange);
    private ShouldRetryResult ShouldRetryOnServiceUnavailable();
    private bool ShouldMarkEndpointUnavailableOnSystemResourceUnavailableForWrite(Nullable`1<HttpStatusCode> statusCode, Nullable`1<SubStatusCodes> subStatusCode);
}
internal class Microsoft.Azure.Cosmos.ClientTelemetryConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public bool IsEnabled { get; public set; }
    [JsonPropertyAttribute]
public string Endpoint { get; public set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
internal class Microsoft.Azure.Cosmos.Common.AsyncCache`2 : object {
    private IEqualityComparer`1<TValue> valueEqualityComparer;
    private IEqualityComparer`1<TKey> keyEqualityComparer;
    private ConcurrentDictionary`2<TKey, AsyncLazy`1<TValue>> values;
    public ICollection`1<TKey> Keys { get; }
    public AsyncCache`2(IEqualityComparer`1<TValue> valueEqualityComparer, IEqualityComparer`1<TKey> keyEqualityComparer);
    public ICollection`1<TKey> get_Keys();
    public void Set(TKey key, TValue value);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Common.AsyncCache`2/<GetAsync>d__8")]
public Task`1<TValue> GetAsync(TKey key, TValue obsoleteValue, Func`1<Task`1<TValue>> singleValueInitFunc, CancellationToken cancellationToken, bool forceRefresh);
    public void Remove(TKey key);
    public bool TryRemoveIfCompleted(TKey key);
    private bool TryRemoveValue(TKey key, AsyncLazy`1<TValue> initialLazyValue);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Common.AsyncCache`2/<RemoveAsync>d__12")]
public Task`1<TValue> RemoveAsync(TKey key);
    public void Clear();
    public void BackgroundRefreshNonBlocking(TKey key, Func`1<Task`1<TValue>> singleValueInitFunc);
}
internal class Microsoft.Azure.Cosmos.Common.AsyncLazy`1 : Lazy`1<Task`1<T>> {
    public AsyncLazy`1(T value);
    public AsyncLazy`1(Func`1<T> valueFactory, CancellationToken cancellationToken);
    public AsyncLazy`1(Func`1<Task`1<T>> taskFactory, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.Common.CollectionCache : object {
    protected InternalCache[] cacheByApiList;
    public virtual Task`1<ContainerProperties> ResolveCollectionAsync(DocumentServiceRequest request, TimeSpan refreshAfter, CancellationToken cancellationToken, ITrace trace);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Common.CollectionCache/<ResolveCollectionAsync>d__4")]
public virtual Task`1<ContainerProperties> ResolveCollectionAsync(DocumentServiceRequest request, CancellationToken cancellationToken, ITrace trace);
    public void Refresh(string resourceAddress, string apiVersion);
    protected abstract virtual Task`1<ContainerProperties> GetByRidAsync(string apiVersion, string collectionRid, ITrace trace, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    protected abstract virtual Task`1<ContainerProperties> GetByNameAsync(string apiVersion, string resourceAddress, ITrace trace, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Common.CollectionCache/<ResolveByPartitionKeyRangeIdentityAsync>d__8")]
private Task`1<ContainerProperties> ResolveByPartitionKeyRangeIdentityAsync(string apiVersion, PartitionKeyRangeIdentity partitionKeyRangeIdentity, ITrace trace, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    private Task`1<ContainerProperties> ResolveByRidAsync(string apiVersion, string resourceId, ITrace trace, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Common.CollectionCache/<ResolveByNameAsync>d__10")]
internal virtual Task`1<ContainerProperties> ResolveByNameAsync(string apiVersion, string resourceAddress, bool forceRefesh, ITrace trace, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Common.CollectionCache/<RefreshAsync>d__11")]
private Task RefreshAsync(DocumentServiceRequest request, ITrace trace, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    protected InternalCache GetCache(string apiVersion);
}
internal interface Microsoft.Azure.Cosmos.Common.IAddressCache {
    public abstract virtual Task`1<PartitionAddressInformation> TryGetAddressesAsync(DocumentServiceRequest request, PartitionKeyRangeIdentity partitionKeyRangeIdentity, ServiceIdentity serviceIdentity, bool forceRefreshPartitionAddresses, CancellationToken cancellationToken);
    public abstract virtual void SetOpenConnectionsHandler(IOpenConnectionsHandler openConnectionsHandler);
}
internal interface Microsoft.Azure.Cosmos.Common.ICollectionRoutingMapCache {
    public abstract virtual Task`1<CollectionRoutingMap> TryLookupAsync(string collectionRid, CollectionRoutingMap previousValue, DocumentServiceRequest request, ITrace trace);
}
internal interface Microsoft.Azure.Cosmos.Common.IRequestSigner {
    public abstract virtual Task SignRequestAsync(DocumentServiceRequest request, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Common.SessionContainer : object {
    private static string sessionTokenSeparator;
    private SessionContainerState modreq(System.Runtime.CompilerServices.IsVolatile) state;
    public string HostName { get; }
    public SessionContainer(string hostName);
    private static SessionContainer();
    public void ReplaceCurrrentStateWithStateOf(SessionContainer comrade);
    public string get_HostName();
    public string GetSessionToken(string collectionLink);
    public sealed virtual string ResolveGlobalSessionToken(DocumentServiceRequest request);
    public sealed virtual ISessionToken ResolvePartitionLocalSessionToken(DocumentServiceRequest request, string partitionKeyRangeId);
    public string ResolvePartitionLocalSessionTokenForGateway(DocumentServiceRequest request, string partitionKeyRangeId);
    public sealed virtual void ClearTokenByCollectionFullname(string collectionFullname);
    public sealed virtual void ClearTokenByResourceId(string resourceId);
    public sealed virtual void SetSessionToken(string collectionRid, string collectionFullname, INameValueCollection responseHeaders);
    public sealed virtual void SetSessionToken(DocumentServiceRequest request, INameValueCollection responseHeaders);
    public object MakeSnapshot();
    private static string GetSessionToken(SessionContainerState self, string collectionLink);
    private static string ResolveGlobalSessionToken(SessionContainerState self, DocumentServiceRequest request);
    private static ISessionToken ResolvePartitionLocalSessionToken(SessionContainerState self, DocumentServiceRequest request, string partitionKeyRangeId);
    private static string ResolvePartitionLocalSessionTokenForGateway(SessionContainerState self, DocumentServiceRequest request, string partitionKeyRangeId);
    private static void ClearTokenByCollectionFullname(SessionContainerState self, string collectionFullname);
    private static void ClearTokenByResourceId(SessionContainerState self, string resourceId);
    private static void SetSessionToken(SessionContainerState self, string collectionRid, string collectionFullname, INameValueCollection responseHeaders);
    private static void SetSessionToken(SessionContainerState self, DocumentServiceRequest request, INameValueCollection responseHeaders);
    private static SessionContainerSnapshot MakeSnapshot(SessionContainerState self);
    private static ConcurrentDictionary`2<string, ISessionToken> GetPartitionKeyRangeIdToTokenMap(SessionContainerState self, DocumentServiceRequest request);
    private static void SetSessionToken(SessionContainerState self, ResourceId resourceId, string collectionName, string encodedToken);
    private static void AddSessionToken(SessionContainerState self, ulong rid, string partitionKeyRangeId, ISessionToken token);
    private static string GetSessionTokenString(ConcurrentDictionary`2<string, ISessionToken> partitionKeyRangeIdToTokenMap);
    private static bool AreDictionariesEqual(Dictionary`2<string, ISessionToken> first, Dictionary`2<string, ISessionToken> second);
    private static bool ShouldUpdateSessionToken(DocumentServiceRequest request, INameValueCollection responseHeaders, ResourceId& resourceId, String& collectionName);
}
public class Microsoft.Azure.Cosmos.CompositePath : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private CompositePathSortOrder <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public CompositePathSortOrder Order { get; public set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public CompositePathSortOrder get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(CompositePathSortOrder value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public enum Microsoft.Azure.Cosmos.CompositePathSortOrder : Enum {
    public int value__;
    [EnumMemberAttribute]
public static CompositePathSortOrder Ascending;
    [EnumMemberAttribute]
public static CompositePathSortOrder Descending;
}
internal class Microsoft.Azure.Cosmos.ComputedProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Query { get; public set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
internal static class Microsoft.Azure.Cosmos.ConfigurationManager : object {
    internal static string ReplicaConnectivityValidationEnabled;
    internal static string PartitionLevelFailoverEnabled;
    internal static string OptimisticDirectExecutionEnabled;
    internal static string NonStreamingOrderByQueryFeatureDisabled;
    internal static string DistributedQueryGatewayModeEnabled;
    private static ConfigurationManager();
    public static T GetEnvironmentVariable(string variable, T defaultValue);
    public static bool IsReplicaAddressValidationEnabled(ConnectionPolicy connectionPolicy);
    public static bool IsPartitionLevelFailoverEnabled(bool defaultValue);
    public static bool IsOptimisticDirectExecutionEnabled(bool defaultValue);
    public static bool IsNonStreamingOrderByQueryFeatureDisabled(bool defaultValue);
    public static bool IsDistributedQueryGatewayModeEnabled(bool defaultValue);
}
public class Microsoft.Azure.Cosmos.ConflictProperties : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationKind <OperationKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfLink>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ConflictLSN>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Id { get; internal set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
[JsonPropertyAttribute]
public OperationKind OperationKind { get; internal set; }
    [JsonPropertyAttribute]
public string SelfLink { get; private set; }
    [JsonConverterAttribute("Microsoft.Azure.Cosmos.ConflictResourceTypeJsonConverter")]
[JsonPropertyAttribute]
internal Type ResourceType { get; internal set; }
    [JsonPropertyAttribute]
internal string SourceResourceId { get; internal set; }
    [JsonPropertyAttribute]
internal string Content { get; internal set; }
    [JsonPropertyAttribute]
internal long ConflictLSN { get; internal set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(string value);
    [CompilerGeneratedAttribute]
public OperationKind get_OperationKind();
    [CompilerGeneratedAttribute]
internal void set_OperationKind(OperationKind value);
    [CompilerGeneratedAttribute]
public string get_SelfLink();
    [CompilerGeneratedAttribute]
private void set_SelfLink(string value);
    [CompilerGeneratedAttribute]
internal Type get_ResourceType();
    [CompilerGeneratedAttribute]
internal void set_ResourceType(Type value);
    [CompilerGeneratedAttribute]
internal string get_SourceResourceId();
    [CompilerGeneratedAttribute]
internal void set_SourceResourceId(string value);
    [CompilerGeneratedAttribute]
internal string get_Content();
    [CompilerGeneratedAttribute]
internal void set_Content(string value);
    [CompilerGeneratedAttribute]
internal long get_ConflictLSN();
    [CompilerGeneratedAttribute]
internal void set_ConflictLSN(long value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public enum Microsoft.Azure.Cosmos.ConflictResolutionMode : Enum {
    public int value__;
    public static ConflictResolutionMode LastWriterWins;
    public static ConflictResolutionMode Custom;
}
public class Microsoft.Azure.Cosmos.ConflictResolutionPolicy : object {
    [CompilerGeneratedAttribute]
private ConflictResolutionMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResolutionPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResolutionProcedure>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public ConflictResolutionMode Mode { get; public set; }
    [JsonPropertyAttribute]
public string ResolutionPath { get; public set; }
    [JsonPropertyAttribute]
public string ResolutionProcedure { get; public set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public ConflictResolutionMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(ConflictResolutionMode value);
    [CompilerGeneratedAttribute]
public string get_ResolutionPath();
    [CompilerGeneratedAttribute]
public void set_ResolutionPath(string value);
    [CompilerGeneratedAttribute]
public string get_ResolutionProcedure();
    [CompilerGeneratedAttribute]
public void set_ResolutionProcedure(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
internal class Microsoft.Azure.Cosmos.ConflictResourceTypeJsonConverter : JsonConverter {
    public bool CanRead { get; }
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool get_CanRead();
    public virtual bool CanConvert(Type objectType);
}
public abstract class Microsoft.Azure.Cosmos.Conflicts : object {
    public abstract virtual Task`1<ResponseMessage> DeleteAsync(ConflictProperties conflict, PartitionKey partitionKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<ItemResponse`1<T>> ReadCurrentAsync(ConflictProperties conflict, PartitionKey partitionKey, CancellationToken cancellationToken);
    public abstract virtual T ReadConflictContent(ConflictProperties conflict);
    public abstract virtual FeedIterator`1<T> GetConflictQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator GetConflictQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator`1<T> GetConflictQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator GetConflictQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
}
internal abstract class Microsoft.Azure.Cosmos.ConflictsCore : Conflicts {
    private ContainerInternal container;
    [CompilerGeneratedAttribute]
private CosmosClientContext <ClientContext>k__BackingField;
    protected CosmosClientContext ClientContext { get; }
    public ConflictsCore(CosmosClientContext clientContext, ContainerInternal container);
    [CompilerGeneratedAttribute]
protected CosmosClientContext get_ClientContext();
    public Task`1<ResponseMessage> DeleteAsync(ConflictProperties conflict, PartitionKey partitionKey, ITrace trace, CancellationToken cancellationToken);
    public virtual FeedIterator GetConflictQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetConflictQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetConflictQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetConflictQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ConflictsCore/<ReadCurrentAsync>d__10`1")]
public Task`1<ItemResponse`1<T>> ReadCurrentAsync(ConflictProperties cosmosConflict, PartitionKey partitionKey, ITrace trace, CancellationToken cancellationToken);
    public virtual T ReadConflictContent(ConflictProperties cosmosConflict);
    [CompilerGeneratedAttribute]
private FeedResponse`1<T> <GetConflictQueryIterator>b__9_0(ResponseMessage response);
}
internal class Microsoft.Azure.Cosmos.ConflictsInlineCore : ConflictsCore {
    internal ConflictsInlineCore(CosmosClientContext clientContext, ContainerInternal container);
    public virtual Task`1<ResponseMessage> DeleteAsync(ConflictProperties conflict, PartitionKey partitionKey, CancellationToken cancellationToken);
    public virtual FeedIterator GetConflictQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetConflictQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetConflictQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetConflictQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual Task`1<ItemResponse`1<T>> ReadCurrentAsync(ConflictProperties cosmosConflict, PartitionKey partitionKey, CancellationToken cancellationToken);
    public virtual T ReadConflictContent(ConflictProperties cosmosConflict);
}
public enum Microsoft.Azure.Cosmos.ConnectionMode : Enum {
    public int value__;
    public static ConnectionMode Gateway;
    public static ConnectionMode Direct;
}
internal class Microsoft.Azure.Cosmos.ConnectionPolicy : object {
    private static int defaultRequestTimeout;
    private static int defaultMediaRequestTimeout;
    private static int defaultMaxConcurrentFanoutRequests;
    private static int defaultMaxConcurrentConnectionLimit;
    internal UserAgentContainer UserAgentContainer;
    private static ConnectionPolicy defaultPolicy;
    private Protocol connectionProtocol;
    private ObservableCollection`1<string> preferredLocations;
    private ObservableCollection`1<Uri> accountInitializationCustomEndpoints;
    [CompilerGeneratedAttribute]
private int <MaxConcurrentFanoutRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RequestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MediaRequestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionMode <ConnectionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private MediaReadMode <MediaReadMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableReadRequestsFallback>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTcpConnectionEndpointRediscovery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableEndpointDiscovery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePartitionLevelFailover>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> <ServerCertificateCustomValidationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseMultipleWriteLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxConnectionLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private RetryOptions <RetryOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <IdleTcpConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <OpenTcpConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxRequestsPerTcpConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxTcpConnectionsPerEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PortReuseMode> <PortReuseMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<HttpClient> <HttpClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableAdvancedReplicaSelectionForTcp>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxTcpPartitionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosClientTelemetryOptions <CosmosClientTelemetryOptions>k__BackingField;
    internal int MaxConcurrentFanoutRequests { get; internal set; }
    public TimeSpan RequestTimeout { get; public set; }
    public TimeSpan MediaRequestTimeout { get; public set; }
    public ConnectionMode ConnectionMode { get; public set; }
    public MediaReadMode MediaReadMode { get; public set; }
    public Protocol ConnectionProtocol { get; public set; }
    public Nullable`1<bool> EnableReadRequestsFallback { get; public set; }
    public bool EnableTcpConnectionEndpointRediscovery { get; public set; }
    public static ConnectionPolicy Default { get; }
    public string UserAgentSuffix { get; public set; }
    public Collection`1<string> PreferredLocations { get; }
    public Collection`1<Uri> AccountInitializationCustomEndpoints { get; }
    public bool EnableEndpointDiscovery { get; public set; }
    public bool EnablePartitionLevelFailover { get; public set; }
    internal Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> ServerCertificateCustomValidationCallback { get; internal set; }
    public bool UseMultipleWriteLocations { get; public set; }
    public int MaxConnectionLimit { get; public set; }
    public RetryOptions RetryOptions { get; public set; }
    public Nullable`1<TimeSpan> IdleTcpConnectionTimeout { get; public set; }
    public Nullable`1<TimeSpan> OpenTcpConnectionTimeout { get; public set; }
    public Nullable`1<int> MaxRequestsPerTcpConnection { get; public set; }
    public Nullable`1<int> MaxTcpConnectionsPerEndpoint { get; public set; }
    public Nullable`1<PortReuseMode> PortReuseMode { get; public set; }
    public Func`1<HttpClient> HttpClientFactory { get; public set; }
    public Nullable`1<bool> EnableAdvancedReplicaSelectionForTcp { get; public set; }
    internal Nullable`1<int> MaxTcpPartitionCount { get; internal set; }
    internal CosmosClientTelemetryOptions CosmosClientTelemetryOptions { get; internal set; }
    public void SetCurrentLocation(string location);
    public void SetPreferredLocations(IReadOnlyList`1<string> regions);
    public void SetAccountInitializationCustomEndpoints(IEnumerable`1<Uri> customEndpoints);
    [CompilerGeneratedAttribute]
internal int get_MaxConcurrentFanoutRequests();
    [CompilerGeneratedAttribute]
internal void set_MaxConcurrentFanoutRequests(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RequestTimeout();
    [CompilerGeneratedAttribute]
public void set_RequestTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MediaRequestTimeout();
    [CompilerGeneratedAttribute]
public void set_MediaRequestTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public ConnectionMode get_ConnectionMode();
    [CompilerGeneratedAttribute]
public void set_ConnectionMode(ConnectionMode value);
    [CompilerGeneratedAttribute]
public MediaReadMode get_MediaReadMode();
    [CompilerGeneratedAttribute]
public void set_MediaReadMode(MediaReadMode value);
    public Protocol get_ConnectionProtocol();
    public void set_ConnectionProtocol(Protocol value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableReadRequestsFallback();
    [CompilerGeneratedAttribute]
public void set_EnableReadRequestsFallback(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_EnableTcpConnectionEndpointRediscovery();
    [CompilerGeneratedAttribute]
public void set_EnableTcpConnectionEndpointRediscovery(bool value);
    public static ConnectionPolicy get_Default();
    public string get_UserAgentSuffix();
    public void set_UserAgentSuffix(string value);
    public Collection`1<string> get_PreferredLocations();
    public Collection`1<Uri> get_AccountInitializationCustomEndpoints();
    [CompilerGeneratedAttribute]
public bool get_EnableEndpointDiscovery();
    [CompilerGeneratedAttribute]
public void set_EnableEndpointDiscovery(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnablePartitionLevelFailover();
    [CompilerGeneratedAttribute]
public void set_EnablePartitionLevelFailover(bool value);
    [CompilerGeneratedAttribute]
internal Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> get_ServerCertificateCustomValidationCallback();
    [CompilerGeneratedAttribute]
internal void set_ServerCertificateCustomValidationCallback(Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> value);
    [CompilerGeneratedAttribute]
public bool get_UseMultipleWriteLocations();
    [CompilerGeneratedAttribute]
public void set_UseMultipleWriteLocations(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxConnectionLimit();
    [CompilerGeneratedAttribute]
public void set_MaxConnectionLimit(int value);
    [CompilerGeneratedAttribute]
public RetryOptions get_RetryOptions();
    [CompilerGeneratedAttribute]
public void set_RetryOptions(RetryOptions value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_IdleTcpConnectionTimeout();
    [CompilerGeneratedAttribute]
public void set_IdleTcpConnectionTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_OpenTcpConnectionTimeout();
    [CompilerGeneratedAttribute]
public void set_OpenTcpConnectionTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxRequestsPerTcpConnection();
    [CompilerGeneratedAttribute]
public void set_MaxRequestsPerTcpConnection(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxTcpConnectionsPerEndpoint();
    [CompilerGeneratedAttribute]
public void set_MaxTcpConnectionsPerEndpoint(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PortReuseMode> get_PortReuseMode();
    [CompilerGeneratedAttribute]
public void set_PortReuseMode(Nullable`1<PortReuseMode> value);
    [CompilerGeneratedAttribute]
public Func`1<HttpClient> get_HttpClientFactory();
    [CompilerGeneratedAttribute]
public void set_HttpClientFactory(Func`1<HttpClient> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableAdvancedReplicaSelectionForTcp();
    [CompilerGeneratedAttribute]
public void set_EnableAdvancedReplicaSelectionForTcp(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_MaxTcpPartitionCount();
    [CompilerGeneratedAttribute]
internal void set_MaxTcpPartitionCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal CosmosClientTelemetryOptions get_CosmosClientTelemetryOptions();
    [CompilerGeneratedAttribute]
internal void set_CosmosClientTelemetryOptions(CosmosClientTelemetryOptions value);
    internal void add_PreferenceChanged(NotifyCollectionChangedEventHandler value);
    internal void remove_PreferenceChanged(NotifyCollectionChangedEventHandler value);
    internal RetryWithConfiguration GetRetryWithConfiguration();
}
public enum Microsoft.Azure.Cosmos.ConsistencyLevel : Enum {
    public int value__;
    public static ConsistencyLevel Strong;
    public static ConsistencyLevel BoundedStaleness;
    public static ConsistencyLevel Session;
    public static ConsistencyLevel Eventual;
    public static ConsistencyLevel ConsistentPrefix;
}
public abstract class Microsoft.Azure.Cosmos.Container : object {
    public string Id { get; }
    public Database Database { get; }
    public Conflicts Conflicts { get; }
    public Scripts Scripts { get; }
    public abstract virtual string get_Id();
    public abstract virtual Database get_Database();
    public abstract virtual Conflicts get_Conflicts();
    public abstract virtual Scripts get_Scripts();
    public abstract virtual Task`1<ContainerResponse> ReadContainerAsync(ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> ReadContainerStreamAsync(ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ContainerResponse> ReplaceContainerAsync(ContainerProperties containerProperties, ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> ReplaceContainerStreamAsync(ContainerProperties containerProperties, ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ContainerResponse> DeleteContainerAsync(ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> DeleteContainerStreamAsync(ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<int>> ReadThroughputAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ThroughputResponse> ReadThroughputAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ThroughputResponse> ReplaceThroughputAsync(int throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ThroughputResponse> ReplaceThroughputAsync(ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> CreateItemStreamAsync(Stream streamPayload, PartitionKey partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ItemResponse`1<T>> CreateItemAsync(T item, Nullable`1<PartitionKey> partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> ReadItemStreamAsync(string id, PartitionKey partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ItemResponse`1<T>> ReadItemAsync(string id, PartitionKey partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> UpsertItemStreamAsync(Stream streamPayload, PartitionKey partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ItemResponse`1<T>> UpsertItemAsync(T item, Nullable`1<PartitionKey> partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> ReplaceItemStreamAsync(Stream streamPayload, string id, PartitionKey partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ItemResponse`1<T>> ReplaceItemAsync(T item, string id, Nullable`1<PartitionKey> partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> ReadManyItemsStreamAsync(IReadOnlyList`1<ValueTuple`2<string, PartitionKey>> items, ReadManyRequestOptions readManyRequestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<FeedResponse`1<T>> ReadManyItemsAsync(IReadOnlyList`1<ValueTuple`2<string, PartitionKey>> items, ReadManyRequestOptions readManyRequestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ItemResponse`1<T>> PatchItemAsync(string id, PartitionKey partitionKey, IReadOnlyList`1<PatchOperation> patchOperations, PatchItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> PatchItemStreamAsync(string id, PartitionKey partitionKey, IReadOnlyList`1<PatchOperation> patchOperations, PatchItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> DeleteItemStreamAsync(string id, PartitionKey partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ItemResponse`1<T>> DeleteItemAsync(string id, PartitionKey partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual FeedIterator GetItemQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator`1<T> GetItemQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator GetItemQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator`1<T> GetItemQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator GetItemQueryStreamIterator(FeedRange feedRange, QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator`1<T> GetItemQueryIterator(FeedRange feedRange, QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual IOrderedQueryable`1<T> GetItemLinqQueryable(bool allowSynchronousQueryExecution, string continuationToken, QueryRequestOptions requestOptions, CosmosLinqSerializerOptions linqSerializerOptions);
    public abstract virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilder(string processorName, ChangesHandler`1<T> onChangesDelegate);
    public abstract virtual ChangeFeedProcessorBuilder GetChangeFeedEstimatorBuilder(string processorName, ChangesEstimationHandler estimationDelegate, Nullable`1<TimeSpan> estimationPeriod);
    public abstract virtual ChangeFeedEstimator GetChangeFeedEstimator(string processorName, Container leaseContainer);
    public abstract virtual TransactionalBatch CreateTransactionalBatch(PartitionKey partitionKey);
    public abstract virtual Task`1<IReadOnlyList`1<FeedRange>> GetFeedRangesAsync(CancellationToken cancellationToken);
    public abstract virtual FeedIterator GetChangeFeedStreamIterator(ChangeFeedStartFrom changeFeedStartFrom, ChangeFeedMode changeFeedMode, ChangeFeedRequestOptions changeFeedRequestOptions);
    public abstract virtual FeedIterator`1<T> GetChangeFeedIterator(ChangeFeedStartFrom changeFeedStartFrom, ChangeFeedMode changeFeedMode, ChangeFeedRequestOptions changeFeedRequestOptions);
    public abstract virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilder(string processorName, ChangeFeedHandler`1<T> onChangesDelegate);
    public abstract virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilderWithManualCheckpoint(string processorName, ChangeFeedHandlerWithManualCheckpoint`1<T> onChangesDelegate);
    public abstract virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilder(string processorName, ChangeFeedStreamHandler onChangesDelegate);
    public abstract virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilderWithManualCheckpoint(string processorName, ChangeFeedStreamHandlerWithManualCheckpoint onChangesDelegate);
}
internal abstract class Microsoft.Azure.Cosmos.ContainerCore : ContainerInternal {
    private Lazy`1<BatchAsyncContainerExecutor> lazyBatchExecutor;
    private static Range`1<string> allRanges;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Database <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkUri>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosClientContext <ClientContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Conflicts <Conflicts>k__BackingField;
    [CompilerGeneratedAttribute]
private Scripts <Scripts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <cachedUriSegmentWithoutId>k__BackingField;
    private CosmosQueryClient queryClient;
    public string Id { get; }
    public Database Database { get; }
    public string LinkUri { get; }
    public CosmosClientContext ClientContext { get; }
    public BatchAsyncContainerExecutor BatchExecutor { get; }
    public Conflicts Conflicts { get; }
    public Scripts Scripts { get; }
    private string cachedUriSegmentWithoutId { get; }
    protected ContainerCore(CosmosClientContext clientContext, DatabaseInternal database, string containerId, CosmosQueryClient cosmosQueryClient);
    private static ContainerCore();
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
public virtual Database get_Database();
    [CompilerGeneratedAttribute]
public virtual string get_LinkUri();
    [CompilerGeneratedAttribute]
public virtual CosmosClientContext get_ClientContext();
    public virtual BatchAsyncContainerExecutor get_BatchExecutor();
    [CompilerGeneratedAttribute]
public virtual Conflicts get_Conflicts();
    [CompilerGeneratedAttribute]
public virtual Scripts get_Scripts();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<ReadContainerAsync>d__23")]
public Task`1<ContainerResponse> ReadContainerAsync(ITrace trace, ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<ReplaceContainerAsync>d__24")]
public Task`1<ContainerResponse> ReplaceContainerAsync(ContainerProperties containerProperties, ITrace trace, ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<DeleteContainerAsync>d__25")]
public Task`1<ContainerResponse> DeleteContainerAsync(ITrace trace, ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<ReadThroughputAsync>d__26")]
public Task`1<Nullable`1<int>> ReadThroughputAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<ReadThroughputAsync>d__27")]
public Task`1<ThroughputResponse> ReadThroughputAsync(RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ThroughputResponse> ReadThroughputIfExistsAsync(RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ThroughputResponse> ReplaceThroughputAsync(int throughput, ITrace trace, RequestOptions requestOptions, CancellationToken cancellationToken);
    public Task`1<ThroughputResponse> ReplaceThroughputIfExistsAsync(ThroughputProperties throughput, ITrace trace, RequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<ReplaceThroughputAsync>d__31")]
public Task`1<ThroughputResponse> ReplaceThroughputAsync(ThroughputProperties throughputProperties, ITrace trace, RequestOptions requestOptions, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> DeleteContainerStreamAsync(ITrace trace, ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> ReadContainerStreamAsync(ITrace trace, RequestOptions requestOptions, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> ReplaceContainerStreamAsync(ContainerProperties containerProperties, ITrace trace, ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<GetFeedRangesAsync>d__35")]
public Task`1<IReadOnlyList`1<FeedRange>> GetFeedRangesAsync(ITrace trace, CancellationToken cancellationToken);
    public virtual FeedIterator GetChangeFeedStreamIterator(ChangeFeedStartFrom changeFeedStartFrom, ChangeFeedMode changeFeedMode, ChangeFeedRequestOptions changeFeedRequestOptions);
    public virtual FeedIterator`1<T> GetChangeFeedIterator(ChangeFeedStartFrom changeFeedStartFrom, ChangeFeedMode changeFeedMode, ChangeFeedRequestOptions changeFeedRequestOptions);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<GetPartitionKeyRangesAsync>d__38")]
internal Task`1<IEnumerable`1<string>> GetPartitionKeyRangesAsync(FeedRange feedRange, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<GetCachedContainerPropertiesAsync>d__39")]
public virtual Task`1<ContainerProperties> GetCachedContainerPropertiesAsync(bool forceRefresh, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<GetCachedRIDAsync>d__40")]
public virtual Task`1<string> GetCachedRIDAsync(bool forceRefresh, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<GetPartitionKeyDefinitionAsync>d__41")]
public virtual Task`1<PartitionKeyDefinition> GetPartitionKeyDefinitionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<GetPartitionKeyPathTokensAsync>d__42")]
public virtual Task`1<IReadOnlyList`1<IReadOnlyList`1<string>>> GetPartitionKeyPathTokensAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<GetNonePartitionKeyValueAsync>d__43")]
public virtual Task`1<PartitionKeyInternal> GetNonePartitionKeyValueAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<GetRoutingMapAsync>d__44")]
public virtual Task`1<CollectionRoutingMap> GetRoutingMapAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<OfferRetryHelperForStaleRidCacheAsync>d__45")]
private Task`1<ThroughputResponse> OfferRetryHelperForStaleRidCacheAsync(Func`2<string, Task`1<ThroughputResponse>> executeOfferOperation, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ReplaceStreamInternalAsync(Stream streamPayload, ITrace trace, ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ProcessStreamAsync(Stream streamPayload, OperationType operationType, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ProcessResourceOperationStreamAsync(Stream streamPayload, OperationType operationType, string linkUri, ResourceType resourceType, ITrace trace, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual FeedIterator GetChangeFeedStreamIteratorWithQuery(ChangeFeedStartFrom changeFeedStartFrom, ChangeFeedMode changeFeedMode, ChangeFeedQuerySpec changeFeedQuerySpec, ChangeFeedRequestOptions changeFeedRequestOptions);
    public virtual FeedIterator`1<T> GetChangeFeedIteratorWithQuery(ChangeFeedStartFrom changeFeedStartFrom, ChangeFeedMode changeFeedMode, ChangeFeedQuerySpec changeFeedQuerySpec, ChangeFeedRequestOptions changeFeedRequestOptions);
    [CompilerGeneratedAttribute]
private string get_cachedUriSegmentWithoutId();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<CreateItemStreamAsync>d__55")]
public Task`1<ResponseMessage> CreateItemStreamAsync(Stream streamPayload, PartitionKey partitionKey, ITrace trace, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<CreateItemAsync>d__56`1")]
public Task`1<ItemResponse`1<T>> CreateItemAsync(T item, ITrace trace, Nullable`1<PartitionKey> partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<ReadItemStreamAsync>d__57")]
public Task`1<ResponseMessage> ReadItemStreamAsync(string id, PartitionKey partitionKey, ITrace trace, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<ReadItemAsync>d__58`1")]
public Task`1<ItemResponse`1<T>> ReadItemAsync(string id, PartitionKey partitionKey, ITrace trace, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<UpsertItemStreamAsync>d__59")]
public Task`1<ResponseMessage> UpsertItemStreamAsync(Stream streamPayload, PartitionKey partitionKey, ITrace trace, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<UpsertItemAsync>d__60`1")]
public Task`1<ItemResponse`1<T>> UpsertItemAsync(T item, ITrace trace, Nullable`1<PartitionKey> partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<ReplaceItemStreamAsync>d__61")]
public Task`1<ResponseMessage> ReplaceItemStreamAsync(Stream streamPayload, string id, PartitionKey partitionKey, ITrace trace, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<ReplaceItemAsync>d__62`1")]
public Task`1<ItemResponse`1<T>> ReplaceItemAsync(T item, string id, ITrace trace, Nullable`1<PartitionKey> partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<DeleteItemStreamAsync>d__63")]
public Task`1<ResponseMessage> DeleteItemStreamAsync(string id, PartitionKey partitionKey, ITrace trace, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<DeleteItemAsync>d__64`1")]
public Task`1<ItemResponse`1<T>> DeleteItemAsync(string id, PartitionKey partitionKey, ITrace trace, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual FeedIterator GetItemQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetItemQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<ReadManyItemsStreamAsync>d__67")]
public Task`1<ResponseMessage> ReadManyItemsStreamAsync(IReadOnlyList`1<ValueTuple`2<string, PartitionKey>> items, ITrace trace, ReadManyRequestOptions readManyRequestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<ReadManyItemsAsync>d__68`1")]
public Task`1<FeedResponse`1<T>> ReadManyItemsAsync(IReadOnlyList`1<ValueTuple`2<string, PartitionKey>> items, ITrace trace, ReadManyRequestOptions readManyRequestOptions, CancellationToken cancellationToken);
    public virtual FeedIterator`1<T> GetItemQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetItemQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual IOrderedQueryable`1<T> GetItemLinqQueryable(bool allowSynchronousQueryExecution, string continuationToken, QueryRequestOptions requestOptions, CosmosLinqSerializerOptions linqSerializerOptions);
    public virtual FeedIterator`1<T> GetItemQueryIterator(FeedRange feedRange, QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetItemQueryStreamIterator(FeedRange feedRange, QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilder(string processorName, ChangesHandler`1<T> onChangesDelegate);
    public virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilder(string processorName, ChangeFeedHandler`1<T> onChangesDelegate);
    public virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilderWithManualCheckpoint(string processorName, ChangeFeedHandlerWithManualCheckpoint`1<T> onChangesDelegate);
    public virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilder(string processorName, ChangeFeedStreamHandler onChangesDelegate);
    public virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilderWithManualCheckpoint(string processorName, ChangeFeedStreamHandlerWithManualCheckpoint onChangesDelegate);
    public virtual ChangeFeedProcessorBuilder GetChangeFeedEstimatorBuilder(string processorName, ChangesEstimationHandler estimationDelegate, Nullable`1<TimeSpan> estimationPeriod);
    public virtual ChangeFeedEstimator GetChangeFeedEstimator(string processorName, Container leaseContainer);
    public virtual TransactionalBatch CreateTransactionalBatch(PartitionKey partitionKey);
    public virtual IAsyncEnumerable`1<TryCatch`1<ChangeFeedPage>> GetChangeFeedAsyncEnumerable(ChangeFeedCrossFeedRangeState state, ChangeFeedMode changeFeedMode, ChangeFeedRequestOptions changeFeedRequestOptions);
    public virtual FeedIterator GetStandByFeedIterator(string continuationToken, Nullable`1<int> maxItemCount, StandByFeedIteratorRequestOptions requestOptions);
    public virtual FeedIteratorInternal GetItemQueryStreamIteratorInternal(SqlQuerySpec sqlQuerySpec, bool isContinuationExcpected, string continuationToken, FeedRangeInternal feedRange, QueryRequestOptions requestOptions);
    public virtual FeedIteratorInternal GetReadFeedIterator(QueryDefinition queryDefinition, QueryRequestOptions queryRequestOptions, string resourceLink, ResourceType resourceType, string continuationToken, int pageSize);
    public virtual IAsyncEnumerable`1<TryCatch`1<ReadFeedPage>> GetReadFeedAsyncEnumerable(ReadFeedCrossFeedRangeState state, QueryRequestOptions queryRequestOptions);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<ExtractPartitionKeyAndProcessItemStreamAsync>d__87`1")]
private Task`1<ResponseMessage> ExtractPartitionKeyAndProcessItemStreamAsync(Nullable`1<PartitionKey> partitionKey, string itemId, T item, OperationType operationType, ItemRequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<ProcessItemStreamAsync>d__88")]
private Task`1<ResponseMessage> ProcessItemStreamAsync(Nullable`1<PartitionKey> partitionKey, string itemId, Stream streamPayload, OperationType operationType, ItemRequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<GetPartitionKeyValueFromStreamAsync>d__89")]
public virtual Task`1<PartitionKey> GetPartitionKeyValueFromStreamAsync(Stream stream, ITrace trace, CancellationToken cancellation);
    public Task`1<ResponseMessage> DeleteAllItemsByPartitionKeyStreamAsync(PartitionKey partitionKey, ITrace trace, RequestOptions requestOptions, CancellationToken cancellationToken);
    private static bool TryParseTokenListForElement(CosmosObject pathTraversal, IReadOnlyList`1<string> tokens, CosmosElement& result);
    private static PartitionKey CosmosElementToPartitionKeyObject(IReadOnlyList`1<CosmosElement> cosmosElementList);
    private string GetResourceUri(RequestOptions requestOptions, OperationType operationType, string itemId);
    private string GetResourceSegmentUriWithoutId();
    private string ContcatCachedUriWithId(string resourceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ContainerCore/<PatchItemAsync>d__96`1")]
public Task`1<ItemResponse`1<T>> PatchItemAsync(string id, PartitionKey partitionKey, IReadOnlyList`1<PatchOperation> patchOperations, ITrace trace, PatchItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> PatchItemStreamAsync(string id, PartitionKey partitionKey, IReadOnlyList`1<PatchOperation> patchOperations, ITrace trace, PatchItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> PatchItemStreamAsync(string id, PartitionKey partitionKey, Stream streamPayload, ITrace trace, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilderWithAllVersionsAndDeletes(string processorName, ChangeFeedHandler`1<ChangeFeedItem`1<T>> onChangesDelegate);
    private ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilderPrivate(string processorName, ChangeFeedObserverFactory observerFactory, ChangeFeedMode mode);
    [CompilerGeneratedAttribute]
private BatchAsyncContainerExecutor <.ctor>b__2_0();
}
internal class Microsoft.Azure.Cosmos.ContainerInlineCore : ContainerCore {
    internal ContainerInlineCore(CosmosClientContext clientContext, DatabaseInternal database, string containerId, CosmosQueryClient cosmosQueryClient);
    public virtual Task`1<ContainerResponse> ReadContainerAsync(ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> ReadContainerStreamAsync(ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ContainerResponse> ReplaceContainerAsync(ContainerProperties containerProperties, ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> ReplaceContainerStreamAsync(ContainerProperties containerProperties, ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ContainerResponse> DeleteContainerAsync(ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> DeleteContainerStreamAsync(ContainerRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<int>> ReadThroughputAsync(CancellationToken cancellationToken);
    public virtual Task`1<ThroughputResponse> ReadThroughputAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ThroughputResponse> ReplaceThroughputAsync(int throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ThroughputResponse> ReplaceThroughputAsync(ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ThroughputResponse> ReadThroughputIfExistsAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ThroughputResponse> ReplaceThroughputIfExistsAsync(ThroughputProperties throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> CreateItemStreamAsync(Stream streamPayload, PartitionKey partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ItemResponse`1<T>> CreateItemAsync(T item, Nullable`1<PartitionKey> partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> ReadItemStreamAsync(string id, PartitionKey partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ItemResponse`1<T>> ReadItemAsync(string id, PartitionKey partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> UpsertItemStreamAsync(Stream streamPayload, PartitionKey partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ItemResponse`1<T>> UpsertItemAsync(T item, Nullable`1<PartitionKey> partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> ReplaceItemStreamAsync(Stream streamPayload, string id, PartitionKey partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ItemResponse`1<T>> ReplaceItemAsync(T item, string id, Nullable`1<PartitionKey> partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> DeleteItemStreamAsync(string id, PartitionKey partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ItemResponse`1<T>> DeleteItemAsync(string id, PartitionKey partitionKey, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> PatchItemStreamAsync(string id, PartitionKey partitionKey, IReadOnlyList`1<PatchOperation> patchOperations, PatchItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> PatchItemStreamAsync(string id, PartitionKey partitionKey, Stream streamPayload, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ItemResponse`1<T>> PatchItemAsync(string id, PartitionKey partitionKey, IReadOnlyList`1<PatchOperation> patchOperations, PatchItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> ReadManyItemsStreamAsync(IReadOnlyList`1<ValueTuple`2<string, PartitionKey>> items, ReadManyRequestOptions readManyRequestOptions, CancellationToken cancellationToken);
    public virtual Task`1<FeedResponse`1<T>> ReadManyItemsAsync(IReadOnlyList`1<ValueTuple`2<string, PartitionKey>> items, ReadManyRequestOptions readManyRequestOptions, CancellationToken cancellationToken);
    public virtual FeedIterator GetItemQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetItemQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetItemQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetItemQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual IOrderedQueryable`1<T> GetItemLinqQueryable(bool allowSynchronousQueryExecution, string continuationToken, QueryRequestOptions requestOptions, CosmosLinqSerializerOptions linqSerializerOptions);
    public virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilder(string processorName, ChangesHandler`1<T> onChangesDelegate);
    public virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilder(string processorName, ChangeFeedHandler`1<T> onChangesDelegate);
    public virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilderWithManualCheckpoint(string processorName, ChangeFeedHandlerWithManualCheckpoint`1<T> onChangesDelegate);
    public virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilder(string processorName, ChangeFeedStreamHandler onChangesDelegate);
    public virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilderWithManualCheckpoint(string processorName, ChangeFeedStreamHandlerWithManualCheckpoint onChangesDelegate);
    public virtual ChangeFeedProcessorBuilder GetChangeFeedEstimatorBuilder(string processorName, ChangesEstimationHandler estimationDelegate, Nullable`1<TimeSpan> estimationPeriod);
    public virtual ChangeFeedEstimator GetChangeFeedEstimator(string processorName, Container leaseContainer);
    public virtual TransactionalBatch CreateTransactionalBatch(PartitionKey partitionKey);
    public virtual Task`1<IReadOnlyList`1<FeedRange>> GetFeedRangesAsync(CancellationToken cancellationToken);
    public virtual FeedIterator GetChangeFeedStreamIterator(ChangeFeedStartFrom changeFeedStartFrom, ChangeFeedMode changeFeedMode, ChangeFeedRequestOptions changeFeedRequestOptions);
    public virtual FeedIterator`1<T> GetChangeFeedIterator(ChangeFeedStartFrom changeFeedStartFrom, ChangeFeedMode changeFeedMode, ChangeFeedRequestOptions changeFeedRequestOptions);
    public virtual Task`1<IEnumerable`1<string>> GetPartitionKeyRangesAsync(FeedRange feedRange, CancellationToken cancellationToken);
    public virtual FeedIterator GetItemQueryStreamIterator(FeedRange feedRange, QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetItemQueryIterator(FeedRange feedRange, QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIteratorInternal GetReadFeedIterator(QueryDefinition queryDefinition, QueryRequestOptions queryRequestOptions, string resourceLink, ResourceType resourceType, string continuationToken, int pageSize);
    public virtual IAsyncEnumerable`1<TryCatch`1<ChangeFeedPage>> GetChangeFeedAsyncEnumerable(ChangeFeedCrossFeedRangeState state, ChangeFeedMode changeFeedMode, ChangeFeedRequestOptions changeFeedRequestOptions);
    public virtual IAsyncEnumerable`1<TryCatch`1<ReadFeedPage>> GetReadFeedAsyncEnumerable(ReadFeedCrossFeedRangeState state, QueryRequestOptions requestOptions);
    public virtual Task`1<ResponseMessage> DeleteAllItemsByPartitionKeyStreamAsync(PartitionKey partitionKey, RequestOptions requestOptions, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.ContainerInternal : Container {
    public string LinkUri { get; }
    public CosmosClientContext ClientContext { get; }
    public BatchAsyncContainerExecutor BatchExecutor { get; }
    public abstract virtual string get_LinkUri();
    public abstract virtual CosmosClientContext get_ClientContext();
    public abstract virtual BatchAsyncContainerExecutor get_BatchExecutor();
    public abstract virtual Task`1<ThroughputResponse> ReadThroughputIfExistsAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ThroughputResponse> ReplaceThroughputIfExistsAsync(ThroughputProperties throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public Task`1<string> GetCachedRIDAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetCachedRIDAsync(bool forceRefresh, ITrace trace, CancellationToken cancellationToken);
    public abstract virtual Task`1<PartitionKeyDefinition> GetPartitionKeyDefinitionAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ContainerProperties> GetCachedContainerPropertiesAsync(bool forceRefresh, ITrace trace, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyList`1<IReadOnlyList`1<string>>> GetPartitionKeyPathTokensAsync(ITrace trace, CancellationToken cancellationToken);
    public abstract virtual Task`1<PartitionKeyInternal> GetNonePartitionKeyValueAsync(ITrace trace, CancellationToken cancellationToken);
    public abstract virtual Task`1<CollectionRoutingMap> GetRoutingMapAsync(CancellationToken cancellationToken);
    public abstract virtual FeedIterator GetStandByFeedIterator(string continuationToken, Nullable`1<int> maxItemCount, StandByFeedIteratorRequestOptions requestOptions);
    public abstract virtual FeedIteratorInternal GetItemQueryStreamIteratorInternal(SqlQuerySpec sqlQuerySpec, bool isContinuationExcpected, string continuationToken, FeedRangeInternal feedRange, QueryRequestOptions requestOptions);
    public abstract virtual FeedIteratorInternal GetReadFeedIterator(QueryDefinition queryDefinition, QueryRequestOptions queryRequestOptions, string resourceLink, ResourceType resourceType, string continuationToken, int pageSize);
    public abstract virtual Task`1<PartitionKey> GetPartitionKeyValueFromStreamAsync(Stream stream, ITrace trace, CancellationToken cancellation);
    public abstract virtual IAsyncEnumerable`1<TryCatch`1<ChangeFeedPage>> GetChangeFeedAsyncEnumerable(ChangeFeedCrossFeedRangeState state, ChangeFeedMode changeFeedMode, ChangeFeedRequestOptions changeFeedRequestOptions);
    public abstract virtual IAsyncEnumerable`1<TryCatch`1<ReadFeedPage>> GetReadFeedAsyncEnumerable(ReadFeedCrossFeedRangeState state, QueryRequestOptions requestOptions);
    public static void ValidatePartitionKey(object partitionKey, RequestOptions requestOptions);
    public abstract virtual Task`1<ResponseMessage> PatchItemStreamAsync(string id, PartitionKey partitionKey, Stream streamPayload, ItemRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> DeleteAllItemsByPartitionKeyStreamAsync(PartitionKey partitionKey, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<string>> GetPartitionKeyRangesAsync(FeedRange feedRange, CancellationToken cancellationToken);
    public abstract virtual ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilderWithAllVersionsAndDeletes(string processorName, ChangeFeedHandler`1<ChangeFeedItem`1<T>> onChangesDelegate);
    public abstract virtual FeedIterator GetChangeFeedStreamIteratorWithQuery(ChangeFeedStartFrom changeFeedStartFrom, ChangeFeedMode changeFeedMode, ChangeFeedQuerySpec changeFeedQuerySpec, ChangeFeedRequestOptions changeFeedRequestOptions);
    public abstract virtual FeedIterator`1<T> GetChangeFeedIteratorWithQuery(ChangeFeedStartFrom changeFeedStartFrom, ChangeFeedMode changeFeedMode, ChangeFeedQuerySpec changeFeedQuerySpec, ChangeFeedRequestOptions changeFeedRequestOptions);
}
public class Microsoft.Azure.Cosmos.ContainerProperties : object {
    private static Char[] partitionKeyTokenDelimeter;
    [JsonPropertyAttribute]
private ChangeFeedPolicy changeFeedPolicyInternal;
    [JsonPropertyAttribute]
private IndexingPolicy indexingPolicyInternal;
    [JsonPropertyAttribute]
private GeospatialConfig geospatialConfigInternal;
    [JsonPropertyAttribute]
private UniqueKeyPolicy uniqueKeyPolicyInternal;
    [JsonPropertyAttribute]
private ConflictResolutionPolicy conflictResolutionInternal;
    [JsonPropertyAttribute]
private ClientEncryptionPolicy clientEncryptionPolicyInternal;
    [JsonPropertyAttribute]
private VectorEmbeddingPolicy vectorEmbeddingPolicyInternal;
    [JsonPropertyAttribute]
private Collection`1<ComputedProperty> computedProperties;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    private IReadOnlyList`1<IReadOnlyList`1<string>> partitionKeyPathTokens;
    private string id;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeToLivePropertyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DefaultTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <AnalyticalStoreTimeToLiveInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfLink>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionKeyDefinition <PartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [JsonIgnoreAttribute]
public Nullable`1<PartitionKeyDefinitionVersion> PartitionKeyDefinitionVersion { get; public set; }
    [JsonIgnoreAttribute]
public ConflictResolutionPolicy ConflictResolutionPolicy { get; public set; }
    [JsonPropertyAttribute]
public string Id { get; public set; }
    [JsonIgnoreAttribute]
public UniqueKeyPolicy UniqueKeyPolicy { get; public set; }
    [JsonPropertyAttribute]
public string ETag { get; private set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.Azure.Documents.UnixDateTimeConverter")]
public Nullable`1<DateTime> LastModified { get; private set; }
    [JsonIgnoreAttribute]
public ClientEncryptionPolicy ClientEncryptionPolicy { get; public set; }
    [JsonIgnoreAttribute]
public IndexingPolicy IndexingPolicy { get; public set; }
    [JsonIgnoreAttribute]
internal VectorEmbeddingPolicy VectorEmbeddingPolicy { get; internal set; }
    [JsonIgnoreAttribute]
internal Collection`1<ComputedProperty> ComputedProperties { get; internal set; }
    [JsonIgnoreAttribute]
internal ChangeFeedPolicy ChangeFeedPolicy { get; internal set; }
    [JsonIgnoreAttribute]
public GeospatialConfig GeospatialConfig { get; public set; }
    [JsonIgnoreAttribute]
public string PartitionKeyPath { get; public set; }
    [JsonIgnoreAttribute]
public IReadOnlyList`1<string> PartitionKeyPaths { get; public set; }
    [ObsoleteAttribute]
[JsonPropertyAttribute]
public string TimeToLivePropertyPath { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> DefaultTimeToLive { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> AnalyticalStoreTimeToLiveInSeconds { get; public set; }
    [JsonPropertyAttribute]
public string SelfLink { get; private set; }
    [JsonPropertyAttribute]
internal PartitionKeyDefinition PartitionKey { get; internal set; }
    [JsonPropertyAttribute]
internal string ResourceId { get; private set; }
    internal bool HasPartitionKey { get; }
    internal IReadOnlyList`1<IReadOnlyList`1<string>> PartitionKeyPathTokens { get; }
    public ContainerProperties(string id, string partitionKeyPath);
    public ContainerProperties(string id, IReadOnlyList`1<string> partitionKeyPaths);
    internal ContainerProperties(string id, PartitionKeyDefinition partitionKeyDefinition);
    private static ContainerProperties();
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
    public Nullable`1<PartitionKeyDefinitionVersion> get_PartitionKeyDefinitionVersion();
    public void set_PartitionKeyDefinitionVersion(Nullable`1<PartitionKeyDefinitionVersion> value);
    public ConflictResolutionPolicy get_ConflictResolutionPolicy();
    public void set_ConflictResolutionPolicy(ConflictResolutionPolicy value);
    public string get_Id();
    public void set_Id(string value);
    public UniqueKeyPolicy get_UniqueKeyPolicy();
    public void set_UniqueKeyPolicy(UniqueKeyPolicy value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
private void set_ETag(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastModified();
    [CompilerGeneratedAttribute]
private void set_LastModified(Nullable`1<DateTime> value);
    public ClientEncryptionPolicy get_ClientEncryptionPolicy();
    public void set_ClientEncryptionPolicy(ClientEncryptionPolicy value);
    public IndexingPolicy get_IndexingPolicy();
    public void set_IndexingPolicy(IndexingPolicy value);
    internal VectorEmbeddingPolicy get_VectorEmbeddingPolicy();
    internal void set_VectorEmbeddingPolicy(VectorEmbeddingPolicy value);
    internal Collection`1<ComputedProperty> get_ComputedProperties();
    internal void set_ComputedProperties(Collection`1<ComputedProperty> value);
    internal ChangeFeedPolicy get_ChangeFeedPolicy();
    internal void set_ChangeFeedPolicy(ChangeFeedPolicy value);
    public GeospatialConfig get_GeospatialConfig();
    public void set_GeospatialConfig(GeospatialConfig value);
    public string get_PartitionKeyPath();
    public void set_PartitionKeyPath(string value);
    public IReadOnlyList`1<string> get_PartitionKeyPaths();
    public void set_PartitionKeyPaths(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_TimeToLivePropertyPath();
    [CompilerGeneratedAttribute]
public void set_TimeToLivePropertyPath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DefaultTimeToLive();
    [CompilerGeneratedAttribute]
public void set_DefaultTimeToLive(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_AnalyticalStoreTimeToLiveInSeconds();
    [CompilerGeneratedAttribute]
public void set_AnalyticalStoreTimeToLiveInSeconds(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_SelfLink();
    [CompilerGeneratedAttribute]
private void set_SelfLink(string value);
    internal PartitionKeyInternal GetNoneValue();
    internal static ContainerProperties CreateWithResourceId(string resourceId);
    [CompilerGeneratedAttribute]
internal PartitionKeyDefinition get_PartitionKey();
    [CompilerGeneratedAttribute]
internal void set_PartitionKey(PartitionKeyDefinition value);
    [CompilerGeneratedAttribute]
internal string get_ResourceId();
    [CompilerGeneratedAttribute]
private void set_ResourceId(string value);
    internal bool get_HasPartitionKey();
    internal IReadOnlyList`1<IReadOnlyList`1<string>> get_PartitionKeyPathTokens();
    internal void ValidateRequiredProperties();
}
public class Microsoft.Azure.Cosmos.ContainerRequestOptions : RequestOptions {
    [CompilerGeneratedAttribute]
private bool <PopulateQuotaInfo>k__BackingField;
    public bool PopulateQuotaInfo { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PopulateQuotaInfo();
    [CompilerGeneratedAttribute]
public void set_PopulateQuotaInfo(bool value);
    internal virtual void PopulateRequestOptions(RequestMessage request);
}
public class Microsoft.Azure.Cosmos.ContainerResponse : Response`1<ContainerProperties> {
    [CompilerGeneratedAttribute]
private Container <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerProperties <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    public Container Container { get; private set; }
    public Headers Headers { get; }
    public ContainerProperties Resource { get; }
    public HttpStatusCode StatusCode { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ETag { get; }
    internal RequestMessage RequestMessage { get; }
    internal ContainerResponse(HttpStatusCode httpStatusCode, Headers headers, ContainerProperties containerProperties, Container container, CosmosDiagnostics diagnostics, RequestMessage requestMessage);
    [CompilerGeneratedAttribute]
public virtual Container get_Container();
    [CompilerGeneratedAttribute]
private void set_Container(Container value);
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public virtual ContainerProperties get_Resource();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    public virtual double get_RequestCharge();
    public virtual string get_ActivityId();
    public virtual string get_ETag();
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
    public static Container op_Implicit(ContainerResponse response);
}
internal class Microsoft.Azure.Cosmos.CosmosAccountServiceConfiguration : object {
    [CompilerGeneratedAttribute]
private Func`1<Task`1<AccountProperties>> <accountPropertiesTaskFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private AccountProperties <AccountProperties>k__BackingField;
    private Func`1<Task`1<AccountProperties>> accountPropertiesTaskFunc { get; }
    internal AccountProperties AccountProperties { get; private set; }
    public IDictionary`2<string, object> QueryEngineConfiguration { get; }
    public string DatabaseAccountId { get; }
    public Uri DatabaseAccountApiEndpoint { get; }
    public ReplicationPolicy UserReplicationPolicy { get; }
    public ReplicationPolicy SystemReplicationPolicy { get; }
    public ConsistencyLevel DefaultConsistencyLevel { get; }
    public ReadPolicy ReadPolicy { get; }
    public string PrimaryMasterKey { get; }
    public string SecondaryMasterKey { get; }
    public string PrimaryReadonlyMasterKey { get; }
    public string SecondaryReadonlyMasterKey { get; }
    public string ResourceSeedKey { get; }
    public bool EnableAuthorization { get; }
    public string SubscriptionId { get; }
    public CosmosAccountServiceConfiguration(Func`1<Task`1<AccountProperties>> accountPropertiesTaskFunc);
    [CompilerGeneratedAttribute]
private Func`1<Task`1<AccountProperties>> get_accountPropertiesTaskFunc();
    [CompilerGeneratedAttribute]
internal AccountProperties get_AccountProperties();
    [CompilerGeneratedAttribute]
private void set_AccountProperties(AccountProperties value);
    public IDictionary`2<string, object> get_QueryEngineConfiguration();
    public sealed virtual string get_DatabaseAccountId();
    public sealed virtual Uri get_DatabaseAccountApiEndpoint();
    public sealed virtual ReplicationPolicy get_UserReplicationPolicy();
    public sealed virtual ReplicationPolicy get_SystemReplicationPolicy();
    public sealed virtual ConsistencyLevel get_DefaultConsistencyLevel();
    public sealed virtual ReadPolicy get_ReadPolicy();
    public sealed virtual string get_PrimaryMasterKey();
    public sealed virtual string get_SecondaryMasterKey();
    public sealed virtual string get_PrimaryReadonlyMasterKey();
    public sealed virtual string get_SecondaryReadonlyMasterKey();
    public sealed virtual string get_ResourceSeedKey();
    public bool get_EnableAuthorization();
    public sealed virtual string get_SubscriptionId();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosAccountServiceConfiguration/<InitializeAsync>d__36")]
public sealed virtual Task InitializeAsync();
}
public class Microsoft.Azure.Cosmos.CosmosClient : object {
    internal string Id;
    private object disposedLock;
    private string DatabaseRootUri;
    private Nullable`1<ConsistencyLevel> accountConsistencyLevel;
    private bool isDisposed;
    internal static int numberOfClientsCreated;
    internal static int NumberOfActiveClients;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DisposedDateTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Endpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccountKey>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthorizationTokenProvider <AuthorizationTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosClientContext <ClientContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientConfigurationTraceDatum <ClientConfigurationTraceDatum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ClientId>k__BackingField;
    internal Nullable`1<DateTime> DisposedDateTimeUtc { get; private set; }
    public CosmosClientOptions ClientOptions { get; }
    public CosmosResponseFactory ResponseFactory { get; }
    public Uri Endpoint { get; }
    internal string AccountKey { get; }
    internal AuthorizationTokenProvider AuthorizationTokenProvider { get; }
    internal DocumentClient DocumentClient { get; }
    internal RequestInvokerHandler RequestHandler { get; }
    internal CosmosClientContext ClientContext { get; }
    internal ClientConfigurationTraceDatum ClientConfigurationTraceDatum { get; }
    internal int ClientId { get; }
    private static CosmosClient();
    public CosmosClient(string connectionString, CosmosClientOptions clientOptions);
    public CosmosClient(string accountEndpoint, string authKeyOrResourceToken, CosmosClientOptions clientOptions);
    public CosmosClient(string accountEndpoint, AzureKeyCredential authKeyOrResourceTokenCredential, CosmosClientOptions clientOptions);
    public CosmosClient(string accountEndpoint, TokenCredential tokenCredential, CosmosClientOptions clientOptions);
    internal CosmosClient(string accountEndpoint, AuthorizationTokenProvider authorizationTokenProvider, CosmosClientOptions clientOptions);
    internal CosmosClient(string accountEndpoint, string authKeyOrResourceToken, CosmosClientOptions cosmosClientOptions, DocumentClient documentClient);
    [CompilerGeneratedAttribute]
internal Nullable`1<DateTime> get_DisposedDateTimeUtc();
    [CompilerGeneratedAttribute]
private void set_DisposedDateTimeUtc(Nullable`1<DateTime> value);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosClient/<CreateAndInitializeAsync>d__18")]
public static Task`1<CosmosClient> CreateAndInitializeAsync(string accountEndpoint, string authKeyOrResourceToken, IReadOnlyList`1<ValueTuple`2<string, string>> containers, CosmosClientOptions cosmosClientOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosClient/<CreateAndInitializeAsync>d__19")]
public static Task`1<CosmosClient> CreateAndInitializeAsync(string accountEndpoint, AzureKeyCredential authKeyOrResourceTokenCredential, IReadOnlyList`1<ValueTuple`2<string, string>> containers, CosmosClientOptions cosmosClientOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosClient/<CreateAndInitializeAsync>d__20")]
public static Task`1<CosmosClient> CreateAndInitializeAsync(string connectionString, IReadOnlyList`1<ValueTuple`2<string, string>> containers, CosmosClientOptions cosmosClientOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosClient/<CreateAndInitializeAsync>d__21")]
public static Task`1<CosmosClient> CreateAndInitializeAsync(string accountEndpoint, TokenCredential tokenCredential, IReadOnlyList`1<ValueTuple`2<string, string>> containers, CosmosClientOptions cosmosClientOptions, CancellationToken cancellationToken);
    public virtual CosmosClientOptions get_ClientOptions();
    public virtual CosmosResponseFactory get_ResponseFactory();
    [CompilerGeneratedAttribute]
public virtual Uri get_Endpoint();
    [CompilerGeneratedAttribute]
internal string get_AccountKey();
    [CompilerGeneratedAttribute]
internal AuthorizationTokenProvider get_AuthorizationTokenProvider();
    internal DocumentClient get_DocumentClient();
    internal RequestInvokerHandler get_RequestHandler();
    [CompilerGeneratedAttribute]
internal CosmosClientContext get_ClientContext();
    [CompilerGeneratedAttribute]
internal ClientConfigurationTraceDatum get_ClientConfigurationTraceDatum();
    [CompilerGeneratedAttribute]
internal int get_ClientId();
    public virtual Task`1<AccountProperties> ReadAccountAsync();
    public virtual Database GetDatabase(string id);
    public virtual Container GetContainer(string databaseId, string containerId);
    public virtual Task`1<DatabaseResponse> CreateDatabaseAsync(string id, Nullable`1<int> throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<DatabaseResponse> CreateDatabaseAsync(string id, ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<DatabaseResponse> CreateDatabaseIfNotExistsAsync(string id, ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<DatabaseResponse> CreateDatabaseIfNotExistsAsync(string id, Nullable`1<int> throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual FeedIterator`1<T> GetDatabaseQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetDatabaseQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetDatabaseQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetDatabaseQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual Task`1<ResponseMessage> CreateDatabaseStreamAsync(DatabaseProperties databaseProperties, Nullable`1<int> throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    private static void RemoveDefaultTraceListener();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosClient/<GetAccountConsistencyLevelAsync>d__62")]
internal virtual Task`1<ConsistencyLevel> GetAccountConsistencyLevelAsync();
    internal DatabaseProperties PrepareDatabaseProperties(string id);
    internal virtual Task`1<ResponseMessage> CreateDatabaseStreamAsync(DatabaseProperties databaseProperties, ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosClient/<CreateDatabaseInternalAsync>d__65")]
private Task`1<DatabaseResponse> CreateDatabaseInternalAsync(DatabaseProperties databaseProperties, ThroughputProperties throughputProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> CreateDatabaseStreamInternalAsync(DatabaseProperties databaseProperties, ThroughputProperties throughputProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private FeedIteratorInternal`1<T> GetDatabaseQueryIteratorHelper(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    private FeedIteratorInternal GetDatabaseQueryStreamIteratorHelper(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosClient/<InitializeContainersAsync>d__69")]
internal Task InitializeContainersAsync(IReadOnlyList`1<ValueTuple`2<string, string>> containers, CancellationToken cancellationToken);
    private int IncrementNumberOfClientsCreated();
    private int IncrementNumberOfActiveClients();
    private int DecrementNumberOfActiveClients();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private Task`1<AccountProperties> <ReadAccountAsync>b__49_0(ITrace trace);
    [CompilerGeneratedAttribute]
private FeedResponse`1<T> <GetDatabaseQueryIteratorHelper>b__67_0(ResponseMessage response);
}
internal abstract class Microsoft.Azure.Cosmos.CosmosClientContext : object {
    internal CosmosClient Client { get; }
    internal DocumentClient DocumentClient { get; }
    internal CosmosSerializerCore SerializerCore { get; }
    internal CosmosResponseFactoryInternal ResponseFactory { get; }
    internal RequestInvokerHandler RequestHandler { get; }
    internal CosmosClientOptions ClientOptions { get; }
    internal string UserAgent { get; }
    internal abstract virtual CosmosClient get_Client();
    internal abstract virtual DocumentClient get_DocumentClient();
    internal abstract virtual CosmosSerializerCore get_SerializerCore();
    internal abstract virtual CosmosResponseFactoryInternal get_ResponseFactory();
    internal abstract virtual RequestInvokerHandler get_RequestHandler();
    internal abstract virtual CosmosClientOptions get_ClientOptions();
    internal abstract virtual string get_UserAgent();
    internal abstract virtual BatchAsyncContainerExecutor GetExecutorForContainer(ContainerInternal container);
    internal abstract virtual string CreateLink(string parentLink, string uriPathSegment, string id);
    internal abstract virtual void ValidateResource(string id);
    internal abstract virtual Task`1<ContainerProperties> GetCachedContainerPropertiesAsync(string containerUri, ITrace trace, CancellationToken cancellationToken);
    internal abstract virtual Task`1<TResult> OperationHelperAsync(string operationName, string containerName, string databaseName, OperationType operationType, RequestOptions requestOptions, Func`2<ITrace, Task`1<TResult>> task, Func`2<TResult, OpenTelemetryAttributes> openTelemetry, TraceComponent traceComponent, TraceLevel traceLevel);
    internal abstract virtual Task`1<ResponseMessage> ProcessResourceOperationStreamAsync(string resourceUri, ResourceType resourceType, OperationType operationType, RequestOptions requestOptions, ContainerInternal cosmosContainerCore, Nullable`1<PartitionKey> partitionKey, string itemId, Stream streamPayload, Action`1<RequestMessage> requestEnricher, ITrace trace, CancellationToken cancellationToken);
    internal abstract virtual Task`1<ResponseMessage> ProcessResourceOperationStreamAsync(string resourceUri, ResourceType resourceType, OperationType operationType, RequestOptions requestOptions, ContainerInternal cosmosContainerCore, FeedRange feedRange, Stream streamPayload, Action`1<RequestMessage> requestEnricher, ITrace trace, CancellationToken cancellationToken);
    internal abstract virtual Task`1<T> ProcessResourceOperationAsync(string resourceUri, ResourceType resourceType, OperationType operationType, RequestOptions requestOptions, ContainerInternal containerInternal, FeedRange feedRange, Stream streamPayload, Action`1<RequestMessage> requestEnricher, Func`2<ResponseMessage, T> responseCreator, ITrace trace, CancellationToken cancellationToken);
    internal abstract virtual Task InitializeContainerUsingRntbdAsync(string databaseId, string containerLinkUri, CancellationToken cancellationToken);
    public abstract virtual void Dispose();
}
public class Microsoft.Azure.Cosmos.CosmosClientOptions : object {
    private static ConnectionMode DefaultConnectionMode;
    private static Protocol DefaultProtocol;
    private static string ConnectionStringAccountEndpoint;
    private static string ConnectionStringAccountKey;
    private static string ConnectionStringDisableServerCertificateValidation;
    private static ApiType DefaultApiType;
    private int gatewayModeMaxConnectionLimit;
    private CosmosSerializationOptions serializerOptions;
    private CosmosSerializer serializerInternal;
    private JsonSerializerOptions stjSerializerOptions;
    private ConnectionMode connectionMode;
    private Protocol connectionProtocol;
    private Nullable`1<TimeSpan> idleTcpConnectionTimeout;
    private Nullable`1<TimeSpan> openTcpConnectionTimeout;
    private Nullable`1<int> maxRequestsPerTcpConnection;
    private Nullable`1<int> maxTcpConnectionsPerEndpoint;
    private Nullable`1<PortReuseMode> portReuseMode;
    private IWebProxy webProxy;
    private Func`1<HttpClient> httpClientFactory;
    private string applicationName;
    [CompilerGeneratedAttribute]
private ISessionContainer <SessionContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <ApplicationPreferredRegions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Uri> <AccountInitializationCustomEndpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RequestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <TokenCredentialBackgroundRefreshInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<RequestHandler> <CustomHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ConsistencyLevel> <ConsistencyLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PriorityLevel> <PriorityLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxRetryAttemptsOnRateLimitedRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxRetryWaitTimeOnRateLimitedRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableContentResponseOnWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableAdvancedReplicaSelectionForTcp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LimitToEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowBulkExecution>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTcpConnectionEndpointRediscovery>k__BackingField;
    [CompilerGeneratedAttribute]
private AvailabilityStrategy <AvailabilityStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePartitionLevelFailover>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableUpgradeConsistencyToLocalQuorum>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SendingRequestEventArgs> <SendingRequestEventArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TransportClient, TransportClient> <TransportClientHandlerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> <ServerCertificateCustomValidationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <DisableServerCertificateValidationInvocationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiType <ApiType>k__BackingField;
    [CompilerGeneratedAttribute]
private IStoreClientFactory <StoreClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <InitialRetryForRetryWithMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaximumRetryForRetryWithMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RandomSaltForRetryWithMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TotalWaitTimeForRetryWithMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableCpuMonitor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableServerCertificateValidation>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosClientTelemetryOptions <CosmosClientTelemetryOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IChaosInterceptorFactory <ChaosInterceptorFactory>k__BackingField;
    public string ApplicationName { get; public set; }
    internal ISessionContainer SessionContainer { get; internal set; }
    public string ApplicationRegion { get; public set; }
    public IReadOnlyList`1<string> ApplicationPreferredRegions { get; public set; }
    public IEnumerable`1<Uri> AccountInitializationCustomEndpoints { get; public set; }
    public int GatewayModeMaxConnectionLimit { get; public set; }
    public TimeSpan RequestTimeout { get; public set; }
    public Nullable`1<TimeSpan> TokenCredentialBackgroundRefreshInterval { get; public set; }
    [JsonConverterAttribute("Microsoft.Azure.Cosmos.CosmosClientOptions/ClientOptionJsonConverter")]
public Collection`1<RequestHandler> CustomHandlers { get; }
    public ConnectionMode ConnectionMode { get; public set; }
    public Nullable`1<ConsistencyLevel> ConsistencyLevel { get; public set; }
    public Nullable`1<PriorityLevel> PriorityLevel { get; public set; }
    public Nullable`1<int> MaxRetryAttemptsOnRateLimitedRequests { get; public set; }
    public Nullable`1<TimeSpan> MaxRetryWaitTimeOnRateLimitedRequests { get; public set; }
    public Nullable`1<bool> EnableContentResponseOnWrite { get; public set; }
    public JsonSerializerOptions UseSystemTextJsonSerializerWithOptions { get; public set; }
    internal Nullable`1<bool> EnableAdvancedReplicaSelectionForTcp { get; internal set; }
    public Nullable`1<TimeSpan> IdleTcpConnectionTimeout { get; public set; }
    public Nullable`1<TimeSpan> OpenTcpConnectionTimeout { get; public set; }
    public Nullable`1<int> MaxRequestsPerTcpConnection { get; public set; }
    public Nullable`1<int> MaxTcpConnectionsPerEndpoint { get; public set; }
    public Nullable`1<PortReuseMode> PortReuseMode { get; public set; }
    [JsonIgnoreAttribute]
public IWebProxy WebProxy { get; public set; }
    public CosmosSerializationOptions SerializerOptions { get; public set; }
    [JsonConverterAttribute("Microsoft.Azure.Cosmos.CosmosClientOptions/ClientOptionJsonConverter")]
public CosmosSerializer Serializer { get; public set; }
    public bool LimitToEndpoint { get; public set; }
    public bool AllowBulkExecution { get; public set; }
    public bool EnableTcpConnectionEndpointRediscovery { get; public set; }
    [JsonIgnoreAttribute]
public Func`1<HttpClient> HttpClientFactory { get; public set; }
    internal AvailabilityStrategy AvailabilityStrategy { get; internal set; }
    internal bool EnablePartitionLevelFailover { get; internal set; }
    internal bool EnableUpgradeConsistencyToLocalQuorum { get; internal set; }
    internal Protocol ConnectionProtocol { get; internal set; }
    internal EventHandler`1<SendingRequestEventArgs> SendingRequestEventArgs { get; internal set; }
    internal Func`2<TransportClient, TransportClient> TransportClientHandlerFactory { get; internal set; }
    public Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> ServerCertificateCustomValidationCallback { get; public set; }
    internal Action DisableServerCertificateValidationInvocationCallback { get; internal set; }
    internal ApiType ApiType { get; internal set; }
    internal IStoreClientFactory StoreClientFactory { get; internal set; }
    internal Nullable`1<int> InitialRetryForRetryWithMilliseconds { get; internal set; }
    internal Nullable`1<int> MaximumRetryForRetryWithMilliseconds { get; internal set; }
    internal Nullable`1<int> RandomSaltForRetryWithMilliseconds { get; internal set; }
    internal Nullable`1<int> TotalWaitTimeForRetryWithMilliseconds { get; internal set; }
    internal Nullable`1<bool> EnableCpuMonitor { get; internal set; }
    internal bool DisableServerCertificateValidation { get; internal set; }
    public CosmosClientTelemetryOptions CosmosClientTelemetryOptions { get; public set; }
    internal IChaosInterceptorFactory ChaosInterceptorFactory { get; internal set; }
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
internal ISessionContainer get_SessionContainer();
    [CompilerGeneratedAttribute]
internal void set_SessionContainer(ISessionContainer value);
    [CompilerGeneratedAttribute]
public string get_ApplicationRegion();
    [CompilerGeneratedAttribute]
public void set_ApplicationRegion(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_ApplicationPreferredRegions();
    [CompilerGeneratedAttribute]
public void set_ApplicationPreferredRegions(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Uri> get_AccountInitializationCustomEndpoints();
    [CompilerGeneratedAttribute]
public void set_AccountInitializationCustomEndpoints(IEnumerable`1<Uri> value);
    public int get_GatewayModeMaxConnectionLimit();
    public void set_GatewayModeMaxConnectionLimit(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RequestTimeout();
    [CompilerGeneratedAttribute]
public void set_RequestTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_TokenCredentialBackgroundRefreshInterval();
    [CompilerGeneratedAttribute]
public void set_TokenCredentialBackgroundRefreshInterval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Collection`1<RequestHandler> get_CustomHandlers();
    public ConnectionMode get_ConnectionMode();
    public void set_ConnectionMode(ConnectionMode value);
    [CompilerGeneratedAttribute]
public Nullable`1<ConsistencyLevel> get_ConsistencyLevel();
    [CompilerGeneratedAttribute]
public void set_ConsistencyLevel(Nullable`1<ConsistencyLevel> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PriorityLevel> get_PriorityLevel();
    [CompilerGeneratedAttribute]
public void set_PriorityLevel(Nullable`1<PriorityLevel> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxRetryAttemptsOnRateLimitedRequests();
    [CompilerGeneratedAttribute]
public void set_MaxRetryAttemptsOnRateLimitedRequests(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaxRetryWaitTimeOnRateLimitedRequests();
    [CompilerGeneratedAttribute]
public void set_MaxRetryWaitTimeOnRateLimitedRequests(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableContentResponseOnWrite();
    [CompilerGeneratedAttribute]
public void set_EnableContentResponseOnWrite(Nullable`1<bool> value);
    public JsonSerializerOptions get_UseSystemTextJsonSerializerWithOptions();
    public void set_UseSystemTextJsonSerializerWithOptions(JsonSerializerOptions value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_EnableAdvancedReplicaSelectionForTcp();
    [CompilerGeneratedAttribute]
internal void set_EnableAdvancedReplicaSelectionForTcp(Nullable`1<bool> value);
    public Nullable`1<TimeSpan> get_IdleTcpConnectionTimeout();
    public void set_IdleTcpConnectionTimeout(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_OpenTcpConnectionTimeout();
    public void set_OpenTcpConnectionTimeout(Nullable`1<TimeSpan> value);
    public Nullable`1<int> get_MaxRequestsPerTcpConnection();
    public void set_MaxRequestsPerTcpConnection(Nullable`1<int> value);
    public Nullable`1<int> get_MaxTcpConnectionsPerEndpoint();
    public void set_MaxTcpConnectionsPerEndpoint(Nullable`1<int> value);
    public Nullable`1<PortReuseMode> get_PortReuseMode();
    public void set_PortReuseMode(Nullable`1<PortReuseMode> value);
    public IWebProxy get_WebProxy();
    public void set_WebProxy(IWebProxy value);
    public CosmosSerializationOptions get_SerializerOptions();
    public void set_SerializerOptions(CosmosSerializationOptions value);
    public CosmosSerializer get_Serializer();
    public void set_Serializer(CosmosSerializer value);
    [CompilerGeneratedAttribute]
public bool get_LimitToEndpoint();
    [CompilerGeneratedAttribute]
public void set_LimitToEndpoint(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowBulkExecution();
    [CompilerGeneratedAttribute]
public void set_AllowBulkExecution(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableTcpConnectionEndpointRediscovery();
    [CompilerGeneratedAttribute]
public void set_EnableTcpConnectionEndpointRediscovery(bool value);
    public Func`1<HttpClient> get_HttpClientFactory();
    public void set_HttpClientFactory(Func`1<HttpClient> value);
    [CompilerGeneratedAttribute]
internal AvailabilityStrategy get_AvailabilityStrategy();
    [CompilerGeneratedAttribute]
internal void set_AvailabilityStrategy(AvailabilityStrategy value);
    [CompilerGeneratedAttribute]
internal bool get_EnablePartitionLevelFailover();
    [CompilerGeneratedAttribute]
internal void set_EnablePartitionLevelFailover(bool value);
    [CompilerGeneratedAttribute]
internal bool get_EnableUpgradeConsistencyToLocalQuorum();
    [CompilerGeneratedAttribute]
internal void set_EnableUpgradeConsistencyToLocalQuorum(bool value);
    internal Protocol get_ConnectionProtocol();
    internal void set_ConnectionProtocol(Protocol value);
    [CompilerGeneratedAttribute]
internal EventHandler`1<SendingRequestEventArgs> get_SendingRequestEventArgs();
    [CompilerGeneratedAttribute]
internal void set_SendingRequestEventArgs(EventHandler`1<SendingRequestEventArgs> value);
    [CompilerGeneratedAttribute]
internal Func`2<TransportClient, TransportClient> get_TransportClientHandlerFactory();
    [CompilerGeneratedAttribute]
internal void set_TransportClientHandlerFactory(Func`2<TransportClient, TransportClient> value);
    [CompilerGeneratedAttribute]
public Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> get_ServerCertificateCustomValidationCallback();
    [CompilerGeneratedAttribute]
public void set_ServerCertificateCustomValidationCallback(Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> value);
    internal Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> GetServerCertificateCustomValidationCallback();
    [CompilerGeneratedAttribute]
internal Action get_DisableServerCertificateValidationInvocationCallback();
    [CompilerGeneratedAttribute]
internal void set_DisableServerCertificateValidationInvocationCallback(Action value);
    [CompilerGeneratedAttribute]
internal ApiType get_ApiType();
    [CompilerGeneratedAttribute]
internal void set_ApiType(ApiType value);
    [CompilerGeneratedAttribute]
internal IStoreClientFactory get_StoreClientFactory();
    [CompilerGeneratedAttribute]
internal void set_StoreClientFactory(IStoreClientFactory value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_InitialRetryForRetryWithMilliseconds();
    [CompilerGeneratedAttribute]
internal void set_InitialRetryForRetryWithMilliseconds(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_MaximumRetryForRetryWithMilliseconds();
    [CompilerGeneratedAttribute]
internal void set_MaximumRetryForRetryWithMilliseconds(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_RandomSaltForRetryWithMilliseconds();
    [CompilerGeneratedAttribute]
internal void set_RandomSaltForRetryWithMilliseconds(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_TotalWaitTimeForRetryWithMilliseconds();
    [CompilerGeneratedAttribute]
internal void set_TotalWaitTimeForRetryWithMilliseconds(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_EnableCpuMonitor();
    [CompilerGeneratedAttribute]
internal void set_EnableCpuMonitor(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal bool get_DisableServerCertificateValidation();
    [CompilerGeneratedAttribute]
internal void set_DisableServerCertificateValidation(bool value);
    [CompilerGeneratedAttribute]
public CosmosClientTelemetryOptions get_CosmosClientTelemetryOptions();
    [CompilerGeneratedAttribute]
public void set_CosmosClientTelemetryOptions(CosmosClientTelemetryOptions value);
    [CompilerGeneratedAttribute]
internal IChaosInterceptorFactory get_ChaosInterceptorFactory();
    [CompilerGeneratedAttribute]
internal void set_ChaosInterceptorFactory(IChaosInterceptorFactory value);
    internal void SetSerializerIfNotConfigured(CosmosSerializer serializer);
    internal CosmosClientOptions Clone();
    internal virtual ConnectionPolicy GetConnectionPolicy(int clientId);
    internal Nullable`1<ConsistencyLevel> GetDocumentsConsistencyLevel();
    internal static string GetAccountEndpoint(string connectionString);
    internal static string GetAccountKey(string connectionString);
    internal static bool IsConnectionStringDisableServerCertificateValidationFlag(string connectionString);
    internal static CosmosClientOptions GetCosmosClientOptionsWithCertificateFlag(string connectionString, CosmosClientOptions clientOptions);
    private static T GetValueFromConnectionString(string connectionString, string keyName, T defaultValue);
    private void ValidateLimitToEndpointSettings();
    private void ValidatePartitionLevelFailoverSettings();
    private void ValidateAvailabilityStrategy();
    private void ValidateDirectTCPSettings();
    internal UserAgentContainer CreateUserAgentContainerWithFeatures(int clientId);
    private string GetRegionConfiguration();
    internal string GetSerializedConfiguration();
    [CompilerGeneratedAttribute]
private bool <GetServerCertificateCustomValidationCallback>b__150_1(X509Certificate2 cert, X509Chain chain, SslPolicyErrors policyErrors);
}
[FlagsAttribute]
internal enum Microsoft.Azure.Cosmos.CosmosClientOptionsFeatures : Enum {
    public int value__;
    public static CosmosClientOptionsFeatures NoFeatures;
    public static CosmosClientOptionsFeatures AllowBulkExecution;
    public static CosmosClientOptionsFeatures HttpClientFactory;
}
public class Microsoft.Azure.Cosmos.CosmosClientTelemetryOptions : object {
    [CompilerGeneratedAttribute]
private bool <DisableSendingMetricsToService>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableDistributedTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosThresholdOptions <CosmosThresholdOptions>k__BackingField;
    public bool DisableSendingMetricsToService { get; public set; }
    public bool DisableDistributedTracing { get; public set; }
    public CosmosThresholdOptions CosmosThresholdOptions { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DisableSendingMetricsToService();
    [CompilerGeneratedAttribute]
public void set_DisableSendingMetricsToService(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableDistributedTracing();
    [CompilerGeneratedAttribute]
public void set_DisableDistributedTracing(bool value);
    [CompilerGeneratedAttribute]
public CosmosThresholdOptions get_CosmosThresholdOptions();
    [CompilerGeneratedAttribute]
public void set_CosmosThresholdOptions(CosmosThresholdOptions value);
}
public abstract class Microsoft.Azure.Cosmos.CosmosDiagnostics : object {
    public virtual TimeSpan GetClientElapsedTime();
    public virtual Nullable`1<DateTime> GetStartTimeUtc();
    public virtual int GetFailedRequestCount();
    public virtual ServerSideCumulativeMetrics GetQueryMetrics();
    public abstract virtual string ToString();
    public abstract virtual IReadOnlyList`1<ValueTuple`2<string, Uri>> GetContactedRegions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.CosmosArray : CosmosElement {
    public static CosmosArray Empty;
    private static UInt32 HashSeed;
    public int Count { get; }
    public CosmosElement Item { get; }
    private static CosmosArray();
    public abstract virtual int get_Count();
    public abstract virtual CosmosElement get_Item(int index);
    public virtual void Accept(ICosmosElementVisitor cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`1<TResult> cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`2<TArg, TResult> cosmosElementVisitor, TArg input);
    public virtual bool Equals(CosmosElement cosmosElement);
    public sealed virtual bool Equals(CosmosArray cosmosArray);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosArray cosmosArray);
    public static CosmosArray Create(IJsonNavigator jsonNavigator, IJsonNavigatorNode jsonNavigatorNode);
    public static CosmosArray Create(IEnumerable`1<CosmosElement> cosmosElements);
    public static CosmosArray Create(CosmosElement[] cosmosElements);
    public static CosmosArray Create();
    public abstract virtual Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<CosmosElement> System.Collections.Generic.IEnumerable<Microsoft.Azure.Cosmos.CosmosElements.CosmosElement>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NullableContextAttribute("0")]
public static CosmosArray CreateFromBuffer(ReadOnlyMemory`1<byte> buffer);
    public static CosmosArray Parse(string json);
    [NullableContextAttribute("0")]
public static bool TryCreateFromBuffer(ReadOnlyMemory`1<byte> buffer, CosmosArray& cosmosArray);
    public static bool TryParse(string json, CosmosArray& cosmosArray);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.CosmosBinary : CosmosElement {
    private static UInt32 HashSeed;
    [NullableAttribute("0")]
public ReadOnlyMemory`1<byte> Value { get; }
    [NullableContextAttribute("0")]
public abstract virtual ReadOnlyMemory`1<byte> get_Value();
    public virtual void Accept(ICosmosElementVisitor cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`1<TResult> cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`2<TArg, TResult> cosmosElementVisitor, TArg input);
    public virtual bool Equals(CosmosElement cosmosElement);
    public sealed virtual bool Equals(CosmosBinary cosmosBinary);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosBinary cosmosBinary);
    public static CosmosBinary Create(IJsonNavigator jsonNavigator, IJsonNavigatorNode jsonNavigatorNode);
    [NullableContextAttribute("0")]
public static CosmosBinary Create(ReadOnlyMemory`1<byte> value);
    [NullableContextAttribute("0")]
public static CosmosBinary CreateFromBuffer(ReadOnlyMemory`1<byte> buffer);
    public static CosmosBinary Parse(string json);
    [NullableContextAttribute("0")]
public static bool TryCreateFromBuffer(ReadOnlyMemory`1<byte> buffer, CosmosBinary& cosmosBinary);
    public static bool TryParse(string json, CosmosBinary& cosmosBinary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.Cosmos.CosmosElements.CosmosBoolean : CosmosElement {
    private static int TrueHash;
    private static int FalseHash;
    private static CosmosBoolean True;
    private static CosmosBoolean False;
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public bool Value { get; }
    private CosmosBoolean(bool value);
    private static CosmosBoolean();
    [CompilerGeneratedAttribute]
public bool get_Value();
    public virtual void Accept(ICosmosElementVisitor cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`1<TResult> cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`2<TArg, TResult> cosmosElementVisitor, TArg input);
    public virtual bool Equals(CosmosElement cosmosElement);
    public sealed virtual bool Equals(CosmosBoolean cosmosBoolean);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosBoolean cosmosBoolean);
    public static CosmosBoolean Create(bool boolean);
    public virtual void WriteTo(IJsonWriter jsonWriter);
    [NullableContextAttribute("0")]
public static CosmosBoolean CreateFromBuffer(ReadOnlyMemory`1<byte> buffer);
    public static CosmosBoolean Parse(string json);
    [NullableContextAttribute("0")]
public static bool TryCreateFromBuffer(ReadOnlyMemory`1<byte> buffer, CosmosBoolean& cosmosBoolean);
    public static bool TryParse(string json, CosmosBoolean& cosmosBoolean);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.CosmosElements.CosmosElementJsonConverter")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.CosmosElement : object {
    protected static JsonSerializer DefaultSerializer;
    private static CosmosElement();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public abstract virtual bool Equals(CosmosElement cosmosElement);
    public abstract virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosElement other);
    public abstract virtual void WriteTo(IJsonWriter jsonWriter);
    public abstract virtual void Accept(ICosmosElementVisitor cosmosElementVisitor);
    public abstract virtual TResult Accept(ICosmosElementVisitor`1<TResult> cosmosElementVisitor);
    public abstract virtual TResult Accept(ICosmosElementVisitor`2<TArg, TResult> cosmosElementVisitor, TArg input);
    public virtual T Materialize();
    public virtual IJsonReader CreateReader();
    [NullableContextAttribute("0")]
public static TCosmosElement CreateFromBuffer(ReadOnlyMemory`1<byte> buffer);
    [NullableContextAttribute("0")]
public static CosmosElement CreateFromBuffer(ReadOnlyMemory`1<byte> buffer);
    [NullableContextAttribute("0")]
public static bool TryCreateFromBuffer(ReadOnlyMemory`1<byte> buffer, TCosmosElement& cosmosElement);
    public static CosmosElement Parse(string json);
    public static TCosmosElement Parse(string json);
    public static bool TryParse(string json, TCosmosElement& cosmosElement);
    public static CosmosElement Dispatch(IJsonNavigator jsonNavigator, IJsonNavigatorNode jsonNavigatorNode);
    public static bool op_Equality(CosmosElement a, CosmosElement b);
    public static bool op_Inequality(CosmosElement a, CosmosElement b);
}
internal class Microsoft.Azure.Cosmos.CosmosElements.CosmosElementCouldNotDetermineWhichConstructorToUseException : CosmosElementException {
    public CosmosElementCouldNotDetermineWhichConstructorToUseException(string message, Exception innerException);
}
internal class Microsoft.Azure.Cosmos.CosmosElements.CosmosElementEmptyBufferException : CosmosElementException {
    public CosmosElementEmptyBufferException(string message, Exception innerException);
}
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.CosmosElementException : Exception {
    public CosmosElementException(string message, Exception innerException);
}
internal class Microsoft.Azure.Cosmos.CosmosElements.CosmosElementFailedToFindPropertyException : CosmosElementException {
    public CosmosElementFailedToFindPropertyException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.Cosmos.CosmosElements.CosmosElementJsonConverter : JsonConverter {
    private static HashSet`1<Type> NumberTypes;
    private static HashSet`1<Type> StringTypes;
    private static HashSet`1<Type> NullTypes;
    private static HashSet`1<Type> ArrayTypes;
    private static HashSet`1<Type> ObjectTypes;
    private static HashSet`1<Type> BooleanTypes;
    private static HashSet`1<Type> ConvertableTypes;
    private static CosmosElementJsonConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class Microsoft.Azure.Cosmos.CosmosElements.CosmosElementNoPubliclyAccessibleConstructorException : CosmosElementException {
    public CosmosElementNoPubliclyAccessibleConstructorException(string message, Exception innerException);
}
internal class Microsoft.Azure.Cosmos.CosmosElements.CosmosElementWrongTypeException : CosmosElementException {
    public CosmosElementWrongTypeException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.CosmosGuid : CosmosElement {
    private static UInt32 HashSeed;
    public Guid Value { get; }
    public abstract virtual Guid get_Value();
    public virtual void Accept(ICosmosElementVisitor cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`1<TResult> cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`2<TArg, TResult> cosmosElementVisitor, TArg input);
    public virtual bool Equals(CosmosElement cosmosElement);
    public sealed virtual bool Equals(CosmosGuid cosmosGuid);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosGuid cosmosGuid);
    public static CosmosGuid Create(IJsonNavigator jsonNavigator, IJsonNavigatorNode jsonNavigatorNode);
    public static CosmosGuid Create(Guid value);
    public virtual void WriteTo(IJsonWriter jsonWriter);
    [NullableContextAttribute("0")]
public static CosmosGuid CreateFromBuffer(ReadOnlyMemory`1<byte> buffer);
    public static CosmosGuid Parse(string json);
    [NullableContextAttribute("0")]
public static bool TryCreateFromBuffer(ReadOnlyMemory`1<byte> buffer, CosmosGuid& cosmosGuid);
    public static bool TryParse(string json, CosmosGuid& cosmosGuid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.Cosmos.CosmosElements.CosmosNull : CosmosElement {
    private static UInt32 Hash;
    private static CosmosNull Singleton;
    private static CosmosNull();
    public virtual void Accept(ICosmosElementVisitor cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`1<TResult> cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`2<TArg, TResult> cosmosElementVisitor, TArg input);
    public virtual bool Equals(CosmosElement cosmosElement);
    public sealed virtual bool Equals(CosmosNull cosmosNull);
    public static CosmosNull Create();
    public virtual int GetHashCode();
    public virtual void WriteTo(IJsonWriter jsonWriter);
    [NullableContextAttribute("0")]
public static CosmosNull CreateFromBuffer(ReadOnlyMemory`1<byte> buffer);
    public static CosmosNull Parse(string json);
    [NullableContextAttribute("0")]
public static bool TryCreateFromBuffer(ReadOnlyMemory`1<byte> buffer, CosmosNull& cosmosNull);
    public static bool TryParse(string json, CosmosNull& cosmosNull);
    public sealed virtual int CompareTo(CosmosNull other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.CosmosNumber : CosmosElement {
    public Number64 Value { get; }
    public abstract virtual Number64 get_Value();
    public abstract virtual void Accept(ICosmosNumberVisitor cosmosNumberVisitor);
    public abstract virtual TResult Accept(ICosmosNumberVisitor`1<TResult> cosmosNumberVisitor);
    public abstract virtual TOutput Accept(ICosmosNumberVisitor`2<TArg, TOutput> cosmosNumberVisitor, TArg input);
    public virtual void Accept(ICosmosElementVisitor cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`1<TResult> cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`2<TArg, TResult> cosmosElementVisitor, TArg input);
    public virtual bool Equals(CosmosElement cosmosElement);
    public abstract virtual bool Equals(CosmosNumber cosmosNumber);
    public sealed virtual int CompareTo(CosmosNumber other);
    [NullableContextAttribute("0")]
public static CosmosNumber CreateFromBuffer(ReadOnlyMemory`1<byte> buffer);
    public static CosmosNumber Parse(string json);
    [NullableContextAttribute("0")]
public static bool TryCreateFromBuffer(ReadOnlyMemory`1<byte> buffer, CosmosNumber& cosmosNumber);
    public static bool TryParse(string json, CosmosNumber& cosmosNumber);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.CosmosObject : CosmosElement {
    private static UInt32 HashSeed;
    private static UInt32 NameHashSeed;
    public KeyCollection Keys { get; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,Microsoft.Azure.Cosmos.CosmosElements.CosmosElement>.Keys { get; }
    public ValueCollection Values { get; }
    private IEnumerable`1<CosmosElement> System.Collections.Generic.IReadOnlyDictionary<System.String,Microsoft.Azure.Cosmos.CosmosElements.CosmosElement>.Values { get; }
    public int Count { get; }
    public CosmosElement Item { get; }
    public abstract virtual KeyCollection get_Keys();
    private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,Microsoft.Azure.Cosmos.CosmosElements.CosmosElement>.get_Keys();
    public abstract virtual ValueCollection get_Values();
    private sealed virtual override IEnumerable`1<CosmosElement> System.Collections.Generic.IReadOnlyDictionary<System.String,Microsoft.Azure.Cosmos.CosmosElements.CosmosElement>.get_Values();
    public abstract virtual int get_Count();
    public abstract virtual CosmosElement get_Item(string key);
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual bool TryGetValue(string key, CosmosElement& value);
    public virtual void Accept(ICosmosElementVisitor cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`1<TResult> cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`2<TArg, TResult> cosmosElementVisitor, TArg input);
    public bool TryGetValue(string key, TCosmosElement& typedCosmosElement);
    public abstract virtual Enumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, CosmosElement>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Azure.Cosmos.CosmosElements.CosmosElement>>.GetEnumerator();
    public virtual bool Equals(CosmosElement cosmosElement);
    public sealed virtual bool Equals(CosmosObject cosmosObject);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosObject cosmosObject);
    public static CosmosObject Create(IJsonNavigator jsonNavigator, IJsonNavigatorNode jsonNavigatorNode);
    public static CosmosObject Create(IReadOnlyDictionary`2<string, CosmosElement> dictionary);
    [NullableContextAttribute("0")]
public static CosmosObject CreateFromBuffer(ReadOnlyMemory`1<byte> buffer);
    public static CosmosObject Parse(string json);
    [NullableContextAttribute("0")]
public static bool TryCreateFromBuffer(ReadOnlyMemory`1<byte> buffer, CosmosObject& cosmosObject);
    public static bool TryParse(string json, CosmosObject& cosmosObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.CosmosString : CosmosElement {
    public static CosmosString Empty;
    private static UInt32 HashSeed;
    public UtfAnyString Value { get; }
    private static CosmosString();
    public abstract virtual UtfAnyString get_Value();
    public virtual void Accept(ICosmosElementVisitor cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`1<TResult> cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`2<TArg, TResult> cosmosElementVisitor, TArg input);
    public virtual bool Equals(CosmosElement cosmosElement);
    public sealed virtual bool Equals(CosmosString cosmosString);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosString cosmosString);
    public static CosmosString Create(IJsonNavigator jsonNavigator, IJsonNavigatorNode jsonNavigatorNode);
    public static CosmosString Create(string value);
    [NullableContextAttribute("0")]
public static CosmosString CreateFromBuffer(ReadOnlyMemory`1<byte> buffer);
    public static CosmosString Parse(string json);
    [NullableContextAttribute("0")]
public static bool TryCreateFromBuffer(ReadOnlyMemory`1<byte> buffer, CosmosString& cosmosString);
    public static bool TryParse(string json, CosmosString& cosmosString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.Cosmos.CosmosElements.CosmosUndefined : CosmosElement {
    private static CosmosUndefined Instance;
    private static CosmosUndefined();
    public virtual void Accept(ICosmosElementVisitor cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`1<TResult> cosmosElementVisitor);
    public virtual TResult Accept(ICosmosElementVisitor`2<TArg, TResult> cosmosElementVisitor, TArg input);
    public sealed virtual int CompareTo(CosmosUndefined other);
    public virtual bool Equals(CosmosElement cosmosElement);
    public sealed virtual bool Equals(CosmosUndefined other);
    public virtual int GetHashCode();
    public virtual void WriteTo(IJsonWriter jsonWriter);
    public static CosmosUndefined Create();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Azure.Cosmos.CosmosElements.ICosmosElementVisitor {
    public abstract virtual void Visit(CosmosArray cosmosArray);
    public abstract virtual void Visit(CosmosBinary cosmosBinary);
    public abstract virtual void Visit(CosmosBoolean cosmosBoolean);
    public abstract virtual void Visit(CosmosGuid cosmosGuid);
    public abstract virtual void Visit(CosmosNull cosmosNull);
    public abstract virtual void Visit(CosmosNumber cosmosNumber);
    public abstract virtual void Visit(CosmosObject cosmosObject);
    public abstract virtual void Visit(CosmosString cosmosString);
    public abstract virtual void Visit(CosmosUndefined cosmosUndefined);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Azure.Cosmos.CosmosElements.ICosmosElementVisitor`1 {
    public abstract virtual TResult Visit(CosmosArray cosmosArray);
    public abstract virtual TResult Visit(CosmosBinary cosmosBinary);
    public abstract virtual TResult Visit(CosmosBoolean cosmosBoolean);
    public abstract virtual TResult Visit(CosmosGuid cosmosGuid);
    public abstract virtual TResult Visit(CosmosNull cosmosNull);
    public abstract virtual TResult Visit(CosmosNumber cosmosNumber);
    public abstract virtual TResult Visit(CosmosObject cosmosObject);
    public abstract virtual TResult Visit(CosmosString cosmosString);
    public abstract virtual TResult Visit(CosmosUndefined cosmosUndefined);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Azure.Cosmos.CosmosElements.ICosmosElementVisitor`2 {
    public abstract virtual TResult Visit(CosmosArray cosmosArray, TArg input);
    public abstract virtual TResult Visit(CosmosBinary cosmosBinary, TArg input);
    public abstract virtual TResult Visit(CosmosBoolean cosmosBoolean, TArg input);
    public abstract virtual TResult Visit(CosmosGuid cosmosGuid, TArg input);
    public abstract virtual TResult Visit(CosmosNull cosmosNull, TArg input);
    public abstract virtual TResult Visit(CosmosNumber cosmosNumber, TArg input);
    public abstract virtual TResult Visit(CosmosObject cosmosObject, TArg input);
    public abstract virtual TResult Visit(CosmosString cosmosString, TArg input);
    public abstract virtual TResult Visit(CosmosUndefined cosmosUndefined, TArg input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.Numbers.CosmosFloat32 : CosmosNumber {
    public Number64 Value { get; }
    public virtual Number64 get_Value();
    public abstract virtual float GetValue();
    public virtual void Accept(ICosmosNumberVisitor cosmosNumberVisitor);
    public virtual TResult Accept(ICosmosNumberVisitor`1<TResult> cosmosNumberVisitor);
    public virtual TOutput Accept(ICosmosNumberVisitor`2<TArg, TOutput> cosmosNumberVisitor, TArg input);
    public virtual bool Equals(CosmosNumber cosmosNumber);
    public sealed virtual bool Equals(CosmosFloat32 cosmosFloat32);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosFloat32 cosmosFloat32);
    public virtual void WriteTo(IJsonWriter jsonWriter);
    public static CosmosFloat32 Create(IJsonNavigator jsonNavigator, IJsonNavigatorNode jsonNavigatorNode);
    public static CosmosFloat32 Create(float number);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.Numbers.CosmosFloat64 : CosmosNumber {
    public Number64 Value { get; }
    public virtual Number64 get_Value();
    public abstract virtual double GetValue();
    public virtual void Accept(ICosmosNumberVisitor cosmosNumberVisitor);
    public virtual TResult Accept(ICosmosNumberVisitor`1<TResult> cosmosNumberVisitor);
    public virtual TOutput Accept(ICosmosNumberVisitor`2<TArg, TOutput> cosmosNumberVisitor, TArg input);
    public virtual bool Equals(CosmosNumber cosmosNumber);
    public sealed virtual bool Equals(CosmosFloat64 cosmosFloat64);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosFloat64 cosmosFloat64);
    public virtual void WriteTo(IJsonWriter jsonWriter);
    public static CosmosFloat64 Create(IJsonNavigator jsonNavigator, IJsonNavigatorNode jsonNavigatorNode);
    public static CosmosFloat64 Create(double number);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.Numbers.CosmosInt16 : CosmosNumber {
    public Number64 Value { get; }
    public virtual Number64 get_Value();
    public abstract virtual short GetValue();
    public virtual void Accept(ICosmosNumberVisitor cosmosNumberVisitor);
    public virtual TResult Accept(ICosmosNumberVisitor`1<TResult> cosmosNumberVisitor);
    public virtual TOutput Accept(ICosmosNumberVisitor`2<TArg, TOutput> cosmosNumberVisitor, TArg input);
    public virtual bool Equals(CosmosNumber cosmosNumber);
    public sealed virtual bool Equals(CosmosInt16 cosmosInt16);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosInt16 cosmosInt16);
    public virtual void WriteTo(IJsonWriter jsonWriter);
    public static CosmosInt16 Create(IJsonNavigator jsonNavigator, IJsonNavigatorNode jsonNavigatorNode);
    public static CosmosInt16 Create(short number);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.Numbers.CosmosInt32 : CosmosNumber {
    public Number64 Value { get; }
    public virtual Number64 get_Value();
    public abstract virtual int GetValue();
    public virtual void Accept(ICosmosNumberVisitor cosmosNumberVisitor);
    public virtual TResult Accept(ICosmosNumberVisitor`1<TResult> cosmosNumberVisitor);
    public virtual TOutput Accept(ICosmosNumberVisitor`2<TArg, TOutput> cosmosNumberVisitor, TArg input);
    public virtual bool Equals(CosmosNumber cosmosNumber);
    public sealed virtual bool Equals(CosmosInt32 cosmosInt32);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosInt32 cosmosInt32);
    public virtual void WriteTo(IJsonWriter jsonWriter);
    public static CosmosInt32 Create(IJsonNavigator jsonNavigator, IJsonNavigatorNode jsonNavigatorNode);
    public static CosmosInt32 Create(int number);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.Numbers.CosmosInt64 : CosmosNumber {
    public Number64 Value { get; }
    public virtual Number64 get_Value();
    public abstract virtual long GetValue();
    public virtual void Accept(ICosmosNumberVisitor cosmosNumberVisitor);
    public virtual TResult Accept(ICosmosNumberVisitor`1<TResult> cosmosNumberVisitor);
    public virtual TOutput Accept(ICosmosNumberVisitor`2<TArg, TOutput> cosmosNumberVisitor, TArg input);
    public virtual bool Equals(CosmosNumber cosmosNumber);
    public sealed virtual bool Equals(CosmosInt64 cosmosInt64);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosInt64 cosmosInt64);
    public virtual void WriteTo(IJsonWriter jsonWriter);
    public static CosmosInt64 Create(IJsonNavigator jsonNavigator, IJsonNavigatorNode jsonNavigatorNode);
    public static CosmosInt64 Create(long number);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.Numbers.CosmosInt8 : CosmosNumber {
    public Number64 Value { get; }
    public virtual Number64 get_Value();
    public abstract virtual sbyte GetValue();
    public virtual void Accept(ICosmosNumberVisitor cosmosNumberVisitor);
    public virtual TResult Accept(ICosmosNumberVisitor`1<TResult> cosmosNumberVisitor);
    public virtual TOutput Accept(ICosmosNumberVisitor`2<TArg, TOutput> cosmosNumberVisitor, TArg input);
    public virtual bool Equals(CosmosNumber cosmosNumber);
    public sealed virtual bool Equals(CosmosInt8 cosmosInt8);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosInt8 cosmosInt8);
    public virtual void WriteTo(IJsonWriter jsonWriter);
    public static CosmosInt8 Create(IJsonNavigator jsonNavigator, IJsonNavigatorNode jsonNavigatorNode);
    public static CosmosInt8 Create(sbyte number);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.Numbers.CosmosNumber64 : CosmosNumber {
    public Number64 Value { get; }
    public virtual Number64 get_Value();
    public abstract virtual Number64 GetValue();
    public virtual void Accept(ICosmosNumberVisitor cosmosNumberVisitor);
    public virtual TResult Accept(ICosmosNumberVisitor`1<TResult> cosmosNumberVisitor);
    public virtual TOutput Accept(ICosmosNumberVisitor`2<TArg, TOutput> cosmosNumberVisitor, TArg input);
    public virtual bool Equals(CosmosNumber cosmosNumber);
    public sealed virtual bool Equals(CosmosNumber64 cosmosNumber64);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosNumber64 cosmosNumber64);
    public virtual void WriteTo(IJsonWriter jsonWriter);
    public static CosmosNumber64 Create(IJsonNavigator jsonNavigator, IJsonNavigatorNode jsonNavigatorNode);
    public static CosmosNumber64 Create(Number64 number);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Azure.Cosmos.CosmosElements.Numbers.CosmosUInt32 : CosmosNumber {
    public Number64 Value { get; }
    public virtual Number64 get_Value();
    public abstract virtual UInt32 GetValue();
    public virtual void Accept(ICosmosNumberVisitor cosmosNumberVisitor);
    public virtual TResult Accept(ICosmosNumberVisitor`1<TResult> cosmosNumberVisitor);
    public virtual TOutput Accept(ICosmosNumberVisitor`2<TArg, TOutput> cosmosNumberVisitor, TArg input);
    public virtual bool Equals(CosmosNumber cosmosNumber);
    public sealed virtual bool Equals(CosmosUInt32 cosmosUInt32);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(CosmosUInt32 cosmosUInt32);
    public virtual void WriteTo(IJsonWriter jsonWriter);
    public static CosmosUInt32 Create(IJsonNavigator jsonNavigator, IJsonNavigatorNode jsonNavigatorNode);
    public static CosmosUInt32 Create(UInt32 number);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Azure.Cosmos.CosmosElements.Numbers.ICosmosNumberVisitor {
    public abstract virtual void Visit(CosmosNumber64 cosmosNumber64);
    public abstract virtual void Visit(CosmosInt8 cosmosInt8);
    public abstract virtual void Visit(CosmosInt16 cosmosInt16);
    public abstract virtual void Visit(CosmosInt32 cosmosInt32);
    public abstract virtual void Visit(CosmosInt64 cosmosInt64);
    public abstract virtual void Visit(CosmosUInt32 cosmosUInt32);
    public abstract virtual void Visit(CosmosFloat32 cosmosFloat32);
    public abstract virtual void Visit(CosmosFloat64 cosmosFloat64);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Azure.Cosmos.CosmosElements.Numbers.ICosmosNumberVisitor`1 {
    public abstract virtual TResult Visit(CosmosNumber64 cosmosNumber64);
    public abstract virtual TResult Visit(CosmosInt8 cosmosInt8);
    public abstract virtual TResult Visit(CosmosInt16 cosmosInt16);
    public abstract virtual TResult Visit(CosmosInt32 cosmosInt32);
    public abstract virtual TResult Visit(CosmosInt64 cosmosInt64);
    public abstract virtual TResult Visit(CosmosUInt32 cosmosUInt32);
    public abstract virtual TResult Visit(CosmosFloat32 cosmosFloat32);
    public abstract virtual TResult Visit(CosmosFloat64 cosmosFloat64);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Azure.Cosmos.CosmosElements.Numbers.ICosmosNumberVisitor`2 {
    public abstract virtual TOutput Visit(CosmosNumber64 cosmosNumber64, TArg input);
    public abstract virtual TOutput Visit(CosmosInt8 cosmosInt8, TArg input);
    public abstract virtual TOutput Visit(CosmosInt16 cosmosInt16, TArg input);
    public abstract virtual TOutput Visit(CosmosInt32 cosmosInt32, TArg input);
    public abstract virtual TOutput Visit(CosmosInt64 cosmosInt64, TArg input);
    public abstract virtual TOutput Visit(CosmosUInt32 cosmosUInt32, TArg input);
    public abstract virtual TOutput Visit(CosmosFloat32 cosmosFloat32, TArg input);
    public abstract virtual TOutput Visit(CosmosFloat64 cosmosFloat64, TArg input);
}
public class Microsoft.Azure.Cosmos.CosmosException : Exception {
    private string stackTrace;
    private Lazy`1<string> lazyMessage;
    [CompilerGeneratedAttribute]
private string <ResponseBody>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private ITrace <Trace>k__BackingField;
    [CompilerGeneratedAttribute]
private Error <Error>k__BackingField;
    public string Message { get; }
    public string ResponseBody { get; }
    public HttpStatusCode StatusCode { get; }
    public int SubStatusCode { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public Nullable`1<TimeSpan> RetryAfter { get; }
    public Headers Headers { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public string StackTrace { get; }
    internal ITrace Trace { get; }
    internal Error Error { get; internal set; }
    internal CosmosException(HttpStatusCode statusCode, string message, string stackTrace, Headers headers, ITrace trace, Error error, Exception innerException);
    public CosmosException(string message, HttpStatusCode statusCode, int subStatusCode, string activityId, double requestCharge);
    public virtual string get_Message();
    [CompilerGeneratedAttribute]
public virtual string get_ResponseBody();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    public virtual int get_SubStatusCode();
    public virtual double get_RequestCharge();
    public virtual string get_ActivityId();
    public virtual Nullable`1<TimeSpan> get_RetryAfter();
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    public virtual string get_StackTrace();
    [CompilerGeneratedAttribute]
internal virtual ITrace get_Trace();
    [CompilerGeneratedAttribute]
internal virtual Error get_Error();
    [CompilerGeneratedAttribute]
internal virtual void set_Error(Error value);
    public virtual bool TryGetHeader(string headerName, String& value);
    public virtual string ToString();
    internal ResponseMessage ToCosmosResponseMessage(RequestMessage request);
    private static string GetMessageHelper(HttpStatusCode statusCode, Headers headers, string responseBody, CosmosDiagnostics diagnostics);
    private static void AppendMessageWithoutDiagnostics(StringBuilder stringBuilder, HttpStatusCode statusCode, Headers headers, string responseBody);
    private string ToStringHelper(StringBuilder stringBuilder);
    internal static void RecordOtelAttributes(CosmosException exception, DiagnosticScope scope);
}
internal static class Microsoft.Azure.Cosmos.CosmosFeedResponseSerializer : object {
    private static byte ArrayStart;
    private static byte ArrayEnd;
    [NullableContextAttribute("1")]
internal static IReadOnlyCollection`1<T> FromFeedResponseStream(CosmosSerializerCore serializerCore, Stream streamWithServiceEnvelope);
    [NullableContextAttribute("1")]
internal static MemoryStream GetStreamWithoutServiceEnvelope(Stream streamWithServiceEnvelope);
    private static int GetArrayStartPosition(ReadOnlyMemory`1<byte> memoryByte);
    private static int GetArrayEndPosition(ReadOnlyMemory`1<byte> memoryByte);
}
internal abstract class Microsoft.Azure.Cosmos.CosmosHttpClient : object {
    public static TimeSpan GatewayRequestTimeout;
    public HttpMessageHandler HttpMessageHandler { get; }
    private static CosmosHttpClient();
    public abstract virtual HttpMessageHandler get_HttpMessageHandler();
    public abstract virtual Task`1<HttpResponseMessage> GetAsync(Uri uri, INameValueCollection additionalHeaders, ResourceType resourceType, HttpTimeoutPolicy timeoutPolicy, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpResponseMessage> SendHttpAsync(Func`1<ValueTask`1<HttpRequestMessage>> createRequestMessageAsync, ResourceType resourceType, HttpTimeoutPolicy timeoutPolicy, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    protected abstract virtual void Dispose(bool disposing);
    public abstract virtual void Dispose();
}
internal class Microsoft.Azure.Cosmos.CosmosHttpClientCore : CosmosHttpClient {
    private HttpClient httpClient;
    private ICommunicationEventSource eventSource;
    private bool disposedValue;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <HttpMessageHandler>k__BackingField;
    public HttpMessageHandler HttpMessageHandler { get; }
    private CosmosHttpClientCore(HttpClient httpClient, HttpMessageHandler httpMessageHandler, ICommunicationEventSource eventSource);
    [CompilerGeneratedAttribute]
public virtual HttpMessageHandler get_HttpMessageHandler();
    public static CosmosHttpClient CreateWithConnectionPolicy(ApiType apiType, ICommunicationEventSource eventSource, ConnectionPolicy connectionPolicy, HttpMessageHandler httpMessageHandler, EventHandler`1<SendingRequestEventArgs> sendingRequestEventArgs, EventHandler`1<ReceivedResponseEventArgs> receivedResponseEventArgs);
    public static HttpMessageHandler CreateHttpClientHandler(int gatewayModeMaxConnectionLimit, IWebProxy webProxy, Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> serverCertificateCustomValidationCallback);
    public static HttpMessageHandler CreateSocketsHttpHandlerHelper(int gatewayModeMaxConnectionLimit, IWebProxy webProxy, Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> serverCertificateCustomValidationCallback);
    public static HttpMessageHandler CreateHttpClientHandlerHelper(int gatewayModeMaxConnectionLimit, IWebProxy webProxy, Func`4<X509Certificate2, X509Chain, SslPolicyErrors, bool> serverCertificateCustomValidationCallback);
    private static HttpMessageHandler CreateHttpMessageHandler(HttpMessageHandler innerHandler, EventHandler`1<SendingRequestEventArgs> sendingRequestEventArgs, EventHandler`1<ReceivedResponseEventArgs> receivedResponseEventArgs);
    private static CosmosHttpClient CreateHelper(HttpClient httpClient, HttpMessageHandler httpMessageHandler, TimeSpan requestTimeout, UserAgentContainer userAgentContainer, ApiType apiType, ICommunicationEventSource eventSource);
    public virtual Task`1<HttpResponseMessage> GetAsync(Uri uri, INameValueCollection additionalHeaders, ResourceType resourceType, HttpTimeoutPolicy timeoutPolicy, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    public virtual Task`1<HttpResponseMessage> SendHttpAsync(Func`1<ValueTask`1<HttpRequestMessage>> createRequestMessageAsync, ResourceType resourceType, HttpTimeoutPolicy timeoutPolicy, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosHttpClientCore/<SendHttpHelperAsync>d__15")]
private Task`1<HttpResponseMessage> SendHttpHelperAsync(Func`1<ValueTask`1<HttpRequestMessage>> createRequestMessageAsync, ResourceType resourceType, HttpTimeoutPolicy timeoutPolicy, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    private static bool IsOutOfRetries(HttpTimeoutPolicy timeoutPolicy, DateTime startDateTimeUtc, IEnumerator`1<ValueTuple`2<TimeSpan, TimeSpan>> timeoutEnumerator);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosHttpClientCore/<ExecuteHttpHelperAsync>d__17")]
private Task`1<HttpResponseMessage> ExecuteHttpHelperAsync(HttpRequestMessage requestMessage, ResourceType resourceType, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public virtual void Dispose();
}
internal class Microsoft.Azure.Cosmos.CosmosIndexJsonConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class Microsoft.Azure.Cosmos.CosmosJsonDotNetSerializer : CosmosSerializer {
    private static Encoding DefaultEncoding;
    private JsonSerializerSettings SerializerSettings;
    internal CosmosJsonDotNetSerializer(CosmosSerializationOptions cosmosSerializerOptions);
    internal CosmosJsonDotNetSerializer(JsonSerializerSettings jsonSerializerSettings);
    private static CosmosJsonDotNetSerializer();
    public virtual T FromStream(Stream stream);
    public virtual Stream ToStream(T input);
    private JsonSerializer GetSerializer();
}
internal class Microsoft.Azure.Cosmos.CosmosJsonSerializerWrapper : CosmosSerializer {
    [CompilerGeneratedAttribute]
private CosmosSerializer <InternalJsonSerializer>k__BackingField;
    internal CosmosSerializer InternalJsonSerializer { get; }
    public CosmosJsonSerializerWrapper(CosmosSerializer cosmosJsonSerializer);
    [CompilerGeneratedAttribute]
internal CosmosSerializer get_InternalJsonSerializer();
    public virtual T FromStream(Stream stream);
    public virtual Stream ToStream(T input);
}
public abstract class Microsoft.Azure.Cosmos.CosmosLinqSerializer : CosmosSerializer {
    public abstract virtual string SerializeMemberName(MemberInfo memberInfo);
}
public class Microsoft.Azure.Cosmos.CosmosLinqSerializerOptions : object {
    [CompilerGeneratedAttribute]
private CosmosPropertyNamingPolicy <PropertyNamingPolicy>k__BackingField;
    public CosmosPropertyNamingPolicy PropertyNamingPolicy { get; public set; }
    [CompilerGeneratedAttribute]
public CosmosPropertyNamingPolicy get_PropertyNamingPolicy();
    [CompilerGeneratedAttribute]
public void set_PropertyNamingPolicy(CosmosPropertyNamingPolicy value);
}
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.Azure.Cosmos.CosmosMessageHeadersInternal : object {
    public string Authorization { get; public set; }
    public string XDate { get; public set; }
    public string RequestCharge { get; public set; }
    public string ActivityId { get; public set; }
    public string ETag { get; public set; }
    public string ContentType { get; public set; }
    public string ContentLength { get; public set; }
    public string SubStatus { get; public set; }
    public string RetryAfterInMilliseconds { get; public set; }
    public string IsUpsert { get; public set; }
    public string OfferThroughput { get; public set; }
    public string QueryMetrics { get; public set; }
    public string IndexUtilization { get; public set; }
    public string BackendRequestDurationMilliseconds { get; public set; }
    public string Location { get; public set; }
    public string Continuation { get; public set; }
    public string SessionToken { get; public set; }
    public string PartitionKey { get; public set; }
    public string PartitionKeyRangeId { get; public set; }
    public string IfNoneMatch { get; public set; }
    public string PageSize { get; public set; }
    public string ConsistencyLevel { get; public set; }
    public string SDKSupportedCapabilities { get; public set; }
    public string ContentSerializationFormat { get; public set; }
    public string SupportedSerializationFormats { get; public set; }
    public string ReadFeedKeyType { get; public set; }
    public string StartEpk { get; public set; }
    public string EndEpk { get; public set; }
    public string OptimisticDirectExecute { get; public set; }
    public string RequiresDistribution { get; public set; }
    public INameValueCollection INameValueCollection { get; }
    public string Item { get; public set; }
    public virtual string get_Authorization();
    public virtual void set_Authorization(string value);
    public virtual string get_XDate();
    public virtual void set_XDate(string value);
    public virtual string get_RequestCharge();
    public virtual void set_RequestCharge(string value);
    public virtual string get_ActivityId();
    public virtual void set_ActivityId(string value);
    public virtual string get_ETag();
    public virtual void set_ETag(string value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual string get_ContentLength();
    public virtual void set_ContentLength(string value);
    public virtual string get_SubStatus();
    public virtual void set_SubStatus(string value);
    public virtual string get_RetryAfterInMilliseconds();
    public virtual void set_RetryAfterInMilliseconds(string value);
    public virtual string get_IsUpsert();
    public virtual void set_IsUpsert(string value);
    public virtual string get_OfferThroughput();
    public virtual void set_OfferThroughput(string value);
    public virtual string get_QueryMetrics();
    public virtual void set_QueryMetrics(string value);
    public virtual string get_IndexUtilization();
    public virtual void set_IndexUtilization(string value);
    public virtual string get_BackendRequestDurationMilliseconds();
    public virtual void set_BackendRequestDurationMilliseconds(string value);
    public virtual string get_Location();
    public virtual void set_Location(string value);
    public virtual string get_Continuation();
    public virtual void set_Continuation(string value);
    public virtual string get_SessionToken();
    public virtual void set_SessionToken(string value);
    public virtual string get_PartitionKey();
    public virtual void set_PartitionKey(string value);
    public virtual string get_PartitionKeyRangeId();
    public virtual void set_PartitionKeyRangeId(string value);
    public virtual string get_IfNoneMatch();
    public virtual void set_IfNoneMatch(string value);
    public virtual string get_PageSize();
    public virtual void set_PageSize(string value);
    public virtual string get_ConsistencyLevel();
    public virtual void set_ConsistencyLevel(string value);
    public virtual string get_SDKSupportedCapabilities();
    public virtual void set_SDKSupportedCapabilities(string value);
    public virtual string get_ContentSerializationFormat();
    public virtual void set_ContentSerializationFormat(string value);
    public virtual string get_SupportedSerializationFormats();
    public virtual void set_SupportedSerializationFormats(string value);
    public virtual string get_ReadFeedKeyType();
    public virtual void set_ReadFeedKeyType(string value);
    public virtual string get_StartEpk();
    public virtual void set_StartEpk(string value);
    public virtual string get_EndEpk();
    public virtual void set_EndEpk(string value);
    public virtual string get_OptimisticDirectExecute();
    public virtual void set_OptimisticDirectExecute(string value);
    public virtual string get_RequiresDistribution();
    public virtual void set_RequiresDistribution(string value);
    public abstract virtual INameValueCollection get_INameValueCollection();
    public virtual string get_Item(string headerName);
    public virtual void set_Item(string headerName, string value);
    public abstract virtual IEnumerator`1<string> GetEnumerator();
    public abstract virtual void Add(string headerName, string value);
    public abstract virtual void Set(string headerName, string value);
    public abstract virtual string Get(string headerName);
    public abstract virtual bool TryGetValue(string headerName, String& value);
    public abstract virtual void Remove(string headerName);
    public abstract virtual String[] AllKeys();
    public abstract virtual int Count();
    public abstract virtual String[] GetValues(string key);
    protected void SetProperty(string headerName, string value);
    public virtual string GetValueOrDefault(string headerName);
    public virtual void Add(string headerName, IEnumerable`1<string> values);
    public virtual T GetHeaderValue(string key);
    public virtual void Add(INameValueCollection collection);
}
internal class Microsoft.Azure.Cosmos.CosmosNullReferenceException : NullReferenceException {
    private NullReferenceException originalException;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    public string Source { get; public set; }
    public string Message { get; }
    public string StackTrace { get; }
    public IDictionary Data { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public string HelpLink { get; public set; }
    internal CosmosNullReferenceException(NullReferenceException originalException, ITrace trace);
    public virtual string get_Source();
    public virtual void set_Source(string value);
    public virtual string get_Message();
    public virtual string get_StackTrace();
    public virtual IDictionary get_Data();
    [CompilerGeneratedAttribute]
public CosmosDiagnostics get_Diagnostics();
    public virtual string get_HelpLink();
    public virtual void set_HelpLink(string value);
    public virtual Exception GetBaseException();
    public virtual string ToString();
    internal static void RecordOtelAttributes(CosmosNullReferenceException exception, DiagnosticScope scope);
}
internal class Microsoft.Azure.Cosmos.CosmosObjectDisposedException : ObjectDisposedException {
    private ObjectDisposedException originalException;
    private CosmosClient cosmosClient;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    public string Source { get; public set; }
    public string Message { get; }
    public string StackTrace { get; }
    public IDictionary Data { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public string HelpLink { get; public set; }
    internal CosmosObjectDisposedException(ObjectDisposedException originalException, CosmosClient cosmosClient, ITrace trace);
    public virtual string get_Source();
    public virtual void set_Source(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Message();
    public virtual string get_StackTrace();
    public virtual IDictionary get_Data();
    [CompilerGeneratedAttribute]
public CosmosDiagnostics get_Diagnostics();
    public virtual string get_HelpLink();
    public virtual void set_HelpLink(string value);
    public virtual Exception GetBaseException();
    public virtual string ToString();
    internal static void RecordOtelAttributes(CosmosObjectDisposedException exception, DiagnosticScope scope);
}
internal class Microsoft.Azure.Cosmos.CosmosOfferResult : object {
    [CompilerGeneratedAttribute]
private CosmosException <CosmosException>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Throughput>k__BackingField;
    public CosmosException CosmosException { get; }
    public HttpStatusCode StatusCode { get; }
    public Nullable`1<int> Throughput { get; }
    public CosmosOfferResult(Nullable`1<int> throughput);
    public CosmosOfferResult(HttpStatusCode statusCode, CosmosException cosmosRequestException);
    [CompilerGeneratedAttribute]
public CosmosException get_CosmosException();
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Throughput();
}
internal class Microsoft.Azure.Cosmos.CosmosOffers : object {
    private CosmosClientContext ClientContext;
    private string OfferRootUri;
    public CosmosOffers(CosmosClientContext clientContext);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosOffers/<ReadThroughputAsync>d__3")]
internal Task`1<ThroughputResponse> ReadThroughputAsync(string targetRID, RequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosOffers/<ReadThroughputIfExistsAsync>d__4")]
internal Task`1<ThroughputResponse> ReadThroughputIfExistsAsync(string targetRID, RequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosOffers/<ReplaceThroughputPropertiesAsync>d__5")]
internal Task`1<ThroughputResponse> ReplaceThroughputPropertiesAsync(string targetRID, ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosOffers/<ReplaceThroughputPropertiesIfExistsAsync>d__6")]
internal Task`1<ThroughputResponse> ReplaceThroughputPropertiesIfExistsAsync(string targetRID, ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    internal Task`1<ThroughputResponse> ReplaceThroughputAsync(string targetRID, int throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    internal Task`1<ThroughputResponse> ReplaceThroughputIfExistsAsync(string targetRID, int throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosOffers/<GetOfferV2Async>d__9`1")]
private Task`1<ValueTuple`2<T, double>> GetOfferV2Async(string targetRID, bool failIfNotConfigured, CancellationToken cancellationToken);
    internal virtual FeedIterator`1<T> GetOfferQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions, CancellationToken cancellationToken);
    internal virtual FeedIterator GetOfferQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosOffers/<SingleOrDefaultAsync>d__12`1")]
private Task`1<ValueTuple`2<T, double>> SingleOrDefaultAsync(FeedIterator`1<T> offerQuery, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosOffers/<GetThroughputResponseAsync>d__13")]
private Task`1<ThroughputResponse> GetThroughputResponseAsync(Stream streamPayload, OperationType operationType, Uri linkUri, ResourceType resourceType, double currentRequestCharge, RequestOptions requestOptions, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private FeedResponse`1<T> <GetOfferQueryIterator>b__10_0(ResponseMessage response);
}
public class Microsoft.Azure.Cosmos.CosmosOperationCanceledException : OperationCanceledException {
    private OperationCanceledException originalException;
    private Lazy`1<string> lazyMessage;
    private Lazy`1<string> toStringMessage;
    private bool tokenCancellationRequested;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    public string Source { get; public set; }
    public string Message { get; }
    public string StackTrace { get; }
    public IDictionary Data { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public string HelpLink { get; public set; }
    public CosmosOperationCanceledException(OperationCanceledException originalException, CosmosDiagnostics diagnostics);
    internal CosmosOperationCanceledException(OperationCanceledException originalException, ITrace trace);
    protected CosmosOperationCanceledException(SerializationInfo info, StreamingContext context);
    public virtual string get_Source();
    public virtual void set_Source(string value);
    public virtual string get_Message();
    public virtual string get_StackTrace();
    public virtual IDictionary get_Data();
    [CompilerGeneratedAttribute]
public CosmosDiagnostics get_Diagnostics();
    public virtual string get_HelpLink();
    public virtual void set_HelpLink(string value);
    public virtual Exception GetBaseException();
    public virtual string ToString();
    private Lazy`1<string> CreateLazyMessage();
    private Lazy`1<string> CreateToStringMessage();
    internal static void RecordOtelAttributes(CosmosOperationCanceledException exception, DiagnosticScope scope);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
private string <CreateLazyMessage>b__24_0();
    [CompilerGeneratedAttribute]
private string <CreateToStringMessage>b__25_0();
}
public enum Microsoft.Azure.Cosmos.CosmosPropertyNamingPolicy : Enum {
    public int value__;
    public static CosmosPropertyNamingPolicy Default;
    public static CosmosPropertyNamingPolicy CamelCase;
}
internal class Microsoft.Azure.Cosmos.CosmosQueryClientCore : CosmosQueryClient {
    private static string QueryExecutionInfoHeader;
    private CosmosClientContext clientContext;
    private ContainerInternal cosmosContainerCore;
    private DocumentClient documentClient;
    private SemaphoreSlim semaphore;
    public Action`1<IQueryable> OnExecuteScalarQueryCallback { get; }
    public CosmosQueryClientCore(CosmosClientContext clientContext, ContainerInternal cosmosContainerCore);
    public virtual Action`1<IQueryable> get_OnExecuteScalarQueryCallback();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosQueryClientCore/<GetCachedContainerQueryPropertiesAsync>d__8")]
public virtual Task`1<ContainerQueryProperties> GetCachedContainerQueryPropertiesAsync(string containerLink, Nullable`1<PartitionKey> partitionKey, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosQueryClientCore/<TryGetPartitionedQueryExecutionInfoAsync>d__9")]
public virtual Task`1<TryCatch`1<PartitionedQueryExecutionInfo>> TryGetPartitionedQueryExecutionInfoAsync(SqlQuerySpec sqlQuerySpec, ResourceType resourceType, PartitionKeyDefinition partitionKeyDefinition, VectorEmbeddingPolicy vectorEmbeddingPolicy, bool requireFormattableOrderByQuery, bool isContinuationExpected, bool allowNonValueAggregateQuery, bool hasLogicalPartitionKey, bool allowDCount, bool useSystemPrefix, GeospatialType geospatialType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosQueryClientCore/<ExecuteItemQueryAsync>d__10")]
public virtual Task`1<TryCatch`1<QueryPage>> ExecuteItemQueryAsync(string resourceUri, ResourceType resourceType, OperationType operationType, FeedRange feedRange, QueryRequestOptions requestOptions, AdditionalRequestHeaders additionalRequestHeaders, SqlQuerySpec sqlQuerySpec, string continuationToken, int pageSize, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosQueryClientCore/<ExecuteQueryPlanRequestAsync>d__11")]
public virtual Task`1<PartitionedQueryExecutionInfo> ExecuteQueryPlanRequestAsync(string resourceUri, ResourceType resourceType, OperationType operationType, SqlQuerySpec sqlQuerySpec, Nullable`1<PartitionKey> partitionKey, string supportedQueryFeatures, Guid clientQueryCorrelationId, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosQueryClientCore/<GetClientDisableOptimisticDirectExecutionAsync>d__12")]
public virtual Task`1<bool> GetClientDisableOptimisticDirectExecutionAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosQueryClientCore/<GetTargetPartitionKeyRangeByFeedRangeAsync>d__13")]
public virtual Task`1<List`1<PartitionKeyRange>> GetTargetPartitionKeyRangeByFeedRangeAsync(string resourceLink, string collectionResourceId, PartitionKeyDefinition partitionKeyDefinition, FeedRangeInternal feedRangeInternal, bool forceRefresh, ITrace trace);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosQueryClientCore/<GetTargetPartitionKeyRangesAsync>d__14")]
public virtual Task`1<List`1<PartitionKeyRange>> GetTargetPartitionKeyRangesAsync(string resourceLink, string collectionResourceId, IReadOnlyList`1<Range`1<string>> providedRanges, bool forceRefresh, ITrace trace);
    public virtual bool BypassQueryParsing();
    public virtual void ClearSessionTokenCache(string collectionFullName);
    private static TryCatch`1<QueryPage> GetCosmosElementResponse(ResourceType resourceType, ResponseMessage cosmosResponseMessage, ITrace trace);
    internal static TryCatch`1<QueryPage> CreateQueryPage(Headers headers, Stream content, ResourceType resourceType);
    private void PopulatePartitionKeyRangeInfo(RequestMessage request, PartitionKeyRangeIdentity partitionKeyRangeIdentity);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosQueryClientCore/<ForceRefreshCollectionCacheAsync>d__20")]
public virtual Task ForceRefreshCollectionCacheAsync(string collectionLink, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CosmosQueryClientCore/<TryGetOverlappingRangesAsync>d__21")]
public virtual Task`1<IReadOnlyList`1<PartitionKeyRange>> TryGetOverlappingRangesAsync(string collectionResourceId, Range`1<string> range, bool forceRefresh);
    private Task`1<PartitionKeyRangeCache> GetRoutingMapProviderAsync();
    public static void ParseRestStream(Stream stream, ResourceType resourceType, CosmosArray& documents, CosmosObject& distributionPlan, Nullable`1& streaming);
}
internal class Microsoft.Azure.Cosmos.CosmosQueryResponseMessageHeaders : Headers {
    [CompilerGeneratedAttribute]
private string <DisallowContinuationTokenMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerRid>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceType <ResourceType>k__BackingField;
    internal string DisallowContinuationTokenMessage { get; }
    public string ContinuationToken { get; internal set; }
    internal string ContainerRid { get; }
    internal ResourceType ResourceType { get; }
    internal string InternalContinuationToken { get; }
    public CosmosQueryResponseMessageHeaders(string continauationToken, string disallowContinuationTokenMessage, ResourceType resourceType, string containerRid);
    [CompilerGeneratedAttribute]
internal string get_DisallowContinuationTokenMessage();
    public virtual string get_ContinuationToken();
    internal virtual void set_ContinuationToken(string value);
    [CompilerGeneratedAttribute]
internal virtual string get_ContainerRid();
    [CompilerGeneratedAttribute]
internal virtual ResourceType get_ResourceType();
    internal string get_InternalContinuationToken();
    internal CosmosQueryResponseMessageHeaders CloneKnownProperties();
    internal CosmosQueryResponseMessageHeaders CloneKnownProperties(string continauationToken, string disallowContinuationTokenMessage);
    internal static CosmosQueryResponseMessageHeaders ConvertToQueryHeaders(Headers sourceHeaders, ResourceType resourceType, string containerRid, Nullable`1<int> substatusCode, string activityId);
}
internal class Microsoft.Azure.Cosmos.CosmosQuotaResponse : object {
    protected IDictionary`2<string, double> Quotas;
    private string source;
    protected static string FunctionsKey;
    protected static string StoredProceduresKey;
    protected static string TriggersKey;
    protected static string DatabasesKey;
    protected static string DocumentSizeKey;
    protected static string DocumentsSizeKey;
    protected static string DocumentsCountKey;
    protected static string ContainerSizeKey;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Databases>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <UserDefinedFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <StoredProcedures>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Triggers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DocumentSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DocumentsSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <DocumentsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <ContainerSize>k__BackingField;
    internal Nullable`1<double> Databases { get; private set; }
    internal Nullable`1<double> UserDefinedFunctions { get; private set; }
    internal Nullable`1<double> StoredProcedures { get; private set; }
    internal Nullable`1<double> Triggers { get; private set; }
    internal Nullable`1<double> DocumentSize { get; private set; }
    internal Nullable`1<double> DocumentsSize { get; private set; }
    internal Nullable`1<double> DocumentsCount { get; private set; }
    internal Nullable`1<double> ContainerSize { get; private set; }
    internal CosmosQuotaResponse(string quotaInfo);
    private void ParseQuotaString(string quotaInfo);
    [CompilerGeneratedAttribute]
internal Nullable`1<double> get_Databases();
    [CompilerGeneratedAttribute]
private void set_Databases(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<double> get_UserDefinedFunctions();
    [CompilerGeneratedAttribute]
private void set_UserDefinedFunctions(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<double> get_StoredProcedures();
    [CompilerGeneratedAttribute]
private void set_StoredProcedures(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<double> get_Triggers();
    [CompilerGeneratedAttribute]
private void set_Triggers(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<double> get_DocumentSize();
    [CompilerGeneratedAttribute]
private void set_DocumentSize(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<double> get_DocumentsSize();
    [CompilerGeneratedAttribute]
private void set_DocumentsSize(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<double> get_DocumentsCount();
    [CompilerGeneratedAttribute]
private void set_DocumentsCount(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<double> get_ContainerSize();
    [CompilerGeneratedAttribute]
private void set_ContainerSize(Nullable`1<double> value);
    public virtual string ToString();
}
internal static class Microsoft.Azure.Cosmos.CosmosResource : object {
    private static CosmosJsonDotNetSerializer cosmosDefaultJsonSerializer;
    private static CosmosResource();
    internal static T FromStream(DocumentServiceResponse response);
    internal static Stream ToStream(T input);
    internal static T FromStream(Stream stream);
}
public abstract class Microsoft.Azure.Cosmos.CosmosResponseFactory : object {
    public abstract virtual FeedResponse`1<T> CreateItemFeedResponse(ResponseMessage responseMessage);
    public abstract virtual ItemResponse`1<T> CreateItemResponse(ResponseMessage responseMessage);
    public abstract virtual StoredProcedureExecuteResponse`1<T> CreateStoredProcedureExecuteResponse(ResponseMessage responseMessage);
}
internal class Microsoft.Azure.Cosmos.CosmosResponseFactoryCore : CosmosResponseFactoryInternal {
    private CosmosSerializerCore serializerCore;
    public CosmosResponseFactoryCore(CosmosSerializerCore jsonSerializerCore);
    public virtual FeedResponse`1<T> CreateItemFeedResponse(ResponseMessage responseMessage);
    public virtual FeedResponse`1<T> CreateChangeFeedUserTypeResponse(ResponseMessage responseMessage);
    public virtual FeedResponse`1<T> CreateQueryFeedUserTypeResponse(ResponseMessage responseMessage);
    public virtual FeedResponse`1<T> CreateQueryFeedResponse(ResponseMessage responseMessage, ResourceType resourceType);
    private FeedResponse`1<T> CreateQueryFeedResponseHelper(ResponseMessage cosmosResponseMessage);
    private FeedResponse`1<T> CreateChangeFeedResponseHelper(ResponseMessage cosmosResponseMessage);
    public virtual ItemResponse`1<T> CreateItemResponse(ResponseMessage responseMessage);
    public virtual ContainerResponse CreateContainerResponse(Container container, ResponseMessage responseMessage);
    public virtual UserResponse CreateUserResponse(User user, ResponseMessage responseMessage);
    public virtual PermissionResponse CreatePermissionResponse(Permission permission, ResponseMessage responseMessage);
    public virtual ClientEncryptionKeyResponse CreateClientEncryptionKeyResponse(ClientEncryptionKey clientEncryptionKey, ResponseMessage responseMessage);
    public virtual DatabaseResponse CreateDatabaseResponse(Database database, ResponseMessage responseMessage);
    public virtual ThroughputResponse CreateThroughputResponse(ResponseMessage responseMessage);
    public virtual StoredProcedureExecuteResponse`1<T> CreateStoredProcedureExecuteResponse(ResponseMessage responseMessage);
    public virtual StoredProcedureResponse CreateStoredProcedureResponse(ResponseMessage responseMessage);
    public virtual TriggerResponse CreateTriggerResponse(ResponseMessage responseMessage);
    public virtual UserDefinedFunctionResponse CreateUserDefinedFunctionResponse(ResponseMessage responseMessage);
    public T ProcessMessage(ResponseMessage responseMessage, Func`2<ResponseMessage, T> createResponse);
    public T ToObjectpublic(ResponseMessage responseMessage);
    [CompilerGeneratedAttribute]
private ItemResponse`1<T> <CreateItemResponse>b__8_0(ResponseMessage cosmosResponseMessage);
    [CompilerGeneratedAttribute]
private ThroughputResponse <CreateThroughputResponse>b__14_0(ResponseMessage cosmosResponseMessage);
    [CompilerGeneratedAttribute]
private StoredProcedureExecuteResponse`1<T> <CreateStoredProcedureExecuteResponse>b__15_0(ResponseMessage cosmosResponseMessage);
    [CompilerGeneratedAttribute]
private StoredProcedureResponse <CreateStoredProcedureResponse>b__16_0(ResponseMessage cosmosResponseMessage);
    [CompilerGeneratedAttribute]
private TriggerResponse <CreateTriggerResponse>b__17_0(ResponseMessage cosmosResponseMessage);
    [CompilerGeneratedAttribute]
private UserDefinedFunctionResponse <CreateUserDefinedFunctionResponse>b__18_0(ResponseMessage cosmosResponseMessage);
}
internal abstract class Microsoft.Azure.Cosmos.CosmosResponseFactoryInternal : CosmosResponseFactory {
    public abstract virtual FeedResponse`1<T> CreateChangeFeedUserTypeResponse(ResponseMessage responseMessage);
    public abstract virtual FeedResponse`1<T> CreateQueryFeedUserTypeResponse(ResponseMessage responseMessage);
    public abstract virtual FeedResponse`1<T> CreateQueryFeedResponse(ResponseMessage responseMessage, ResourceType resourceType);
    public abstract virtual ContainerResponse CreateContainerResponse(Container container, ResponseMessage responseMessage);
    public abstract virtual UserResponse CreateUserResponse(User user, ResponseMessage responseMessage);
    public abstract virtual PermissionResponse CreatePermissionResponse(Permission permission, ResponseMessage responseMessage);
    public abstract virtual ClientEncryptionKeyResponse CreateClientEncryptionKeyResponse(ClientEncryptionKey clientEncryptionKey, ResponseMessage responseMessage);
    public abstract virtual DatabaseResponse CreateDatabaseResponse(Database database, ResponseMessage responseMessage);
    public abstract virtual ThroughputResponse CreateThroughputResponse(ResponseMessage responseMessage);
    public abstract virtual StoredProcedureResponse CreateStoredProcedureResponse(ResponseMessage responseMessage);
    public abstract virtual TriggerResponse CreateTriggerResponse(ResponseMessage responseMessage);
    public abstract virtual UserDefinedFunctionResponse CreateUserDefinedFunctionResponse(ResponseMessage responseMessage);
}
internal class Microsoft.Azure.Cosmos.CosmosSerializationFormatOptions : object {
    [CompilerGeneratedAttribute]
private string <ContentSerializationFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateCustomNavigator <CreateCustomNavigatorCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateCustomWriter <CreateCustomWriterCallback>k__BackingField;
    public string ContentSerializationFormat { get; }
    public CreateCustomNavigator CreateCustomNavigatorCallback { get; }
    public CreateCustomWriter CreateCustomWriterCallback { get; }
    public CosmosSerializationFormatOptions(string contentSerializationFormat, CreateCustomNavigator createCustomNavigator, CreateCustomWriter createCustomWriter);
    [CompilerGeneratedAttribute]
public string get_ContentSerializationFormat();
    [CompilerGeneratedAttribute]
public CreateCustomNavigator get_CreateCustomNavigatorCallback();
    [CompilerGeneratedAttribute]
public CreateCustomWriter get_CreateCustomWriterCallback();
}
public class Microsoft.Azure.Cosmos.CosmosSerializationOptions : object {
    [CompilerGeneratedAttribute]
private bool <IgnoreNullValues>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Indented>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosPropertyNamingPolicy <PropertyNamingPolicy>k__BackingField;
    public bool IgnoreNullValues { get; public set; }
    public bool Indented { get; public set; }
    public CosmosPropertyNamingPolicy PropertyNamingPolicy { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IgnoreNullValues();
    [CompilerGeneratedAttribute]
public void set_IgnoreNullValues(bool value);
    [CompilerGeneratedAttribute]
public bool get_Indented();
    [CompilerGeneratedAttribute]
public void set_Indented(bool value);
    [CompilerGeneratedAttribute]
public CosmosPropertyNamingPolicy get_PropertyNamingPolicy();
    [CompilerGeneratedAttribute]
public void set_PropertyNamingPolicy(CosmosPropertyNamingPolicy value);
}
internal static class Microsoft.Azure.Cosmos.CosmosSerializationUtil : object {
    private static CamelCaseNamingStrategy camelCaseNamingStrategy;
    private static CosmosSerializationUtil();
    internal static string GetStringWithPropertyNamingPolicy(CosmosLinqSerializerOptions options, string name);
    internal static string GetStringWithPropertyNamingPolicy(CosmosPropertyNamingPolicy namingPolicy, string name);
}
public abstract class Microsoft.Azure.Cosmos.CosmosSerializer : object {
    public abstract virtual T FromStream(Stream stream);
    public abstract virtual Stream ToStream(T input);
}
internal class Microsoft.Azure.Cosmos.CosmosSerializerCore : object {
    private static CosmosSerializer propertiesSerializer;
    private CosmosSerializer customSerializer;
    private CosmosSerializer sqlQuerySpecSerializer;
    private CosmosSerializer patchOperationSerializer;
    internal CosmosSerializerCore(CosmosSerializer customSerializer);
    private static CosmosSerializerCore();
    internal static CosmosSerializerCore Create(CosmosSerializer customSerializer, CosmosSerializationOptions serializationOptions);
    internal T FromStream(Stream stream);
    internal T[] FromFeedStream(Stream stream);
    internal Stream ToStream(T input);
    internal Stream ToStreamSqlQuerySpec(SqlQuerySpec input, ResourceType resourceType);
    internal CosmosSerializer GetCustomOrDefaultSerializer();
    private CosmosSerializer GetSerializer();
}
internal class Microsoft.Azure.Cosmos.CosmosSqlQuerySpecJsonConverter : JsonConverter {
    private CosmosSerializer UserSerializer;
    internal CosmosSqlQuerySpecJsonConverter(CosmosSerializer userSerializer);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    internal static CosmosSerializer CreateSqlQuerySpecSerializer(CosmosSerializer cosmosSerializer, CosmosSerializer propertiesSerializer);
}
internal class Microsoft.Azure.Cosmos.CosmosSystemTextJsonSerializer : CosmosLinqSerializer {
    private JsonSerializerOptions jsonSerializerOptions;
    internal CosmosSystemTextJsonSerializer(JsonSerializerOptions jsonSerializerOptions);
    public virtual T FromStream(Stream stream);
    public virtual Stream ToStream(T input);
    public virtual string SerializeMemberName(MemberInfo memberInfo);
}
public class Microsoft.Azure.Cosmos.CosmosThresholdOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <NonPointOperationLatencyThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <PointOperationLatencyThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <RequestChargeThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PayloadSizeThresholdInBytes>k__BackingField;
    public TimeSpan NonPointOperationLatencyThreshold { get; public set; }
    public TimeSpan PointOperationLatencyThreshold { get; public set; }
    public Nullable`1<double> RequestChargeThreshold { get; public set; }
    public Nullable`1<int> PayloadSizeThresholdInBytes { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_NonPointOperationLatencyThreshold();
    [CompilerGeneratedAttribute]
public void set_NonPointOperationLatencyThreshold(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_PointOperationLatencyThreshold();
    [CompilerGeneratedAttribute]
public void set_PointOperationLatencyThreshold(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_RequestChargeThreshold();
    [CompilerGeneratedAttribute]
public void set_RequestChargeThreshold(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PayloadSizeThresholdInBytes();
    [CompilerGeneratedAttribute]
public void set_PayloadSizeThresholdInBytes(Nullable`1<int> value);
}
internal class Microsoft.Azure.Cosmos.CrossRegionHedgingAvailabilityStrategy : AvailabilityStrategyInternal {
    private static string HedgeContext;
    private static string ResponseRegion;
    [CompilerGeneratedAttribute]
private TimeSpan <Threshold>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ThresholdStep>k__BackingField;
    public TimeSpan Threshold { get; private set; }
    public TimeSpan ThresholdStep { get; private set; }
    public CrossRegionHedgingAvailabilityStrategy(TimeSpan threshold, Nullable`1<TimeSpan> thresholdStep);
    [CompilerGeneratedAttribute]
public TimeSpan get_Threshold();
    [CompilerGeneratedAttribute]
private void set_Threshold(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ThresholdStep();
    [CompilerGeneratedAttribute]
private void set_ThresholdStep(TimeSpan value);
    internal virtual bool Enabled();
    internal bool ShouldHedge(RequestMessage request);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CrossRegionHedgingAvailabilityStrategy/<ExecuteAvailabilityStrategyAsync>d__13")]
internal virtual Task`1<ResponseMessage> ExecuteAvailabilityStrategyAsync(Func`3<RequestMessage, CancellationToken, Task`1<ResponseMessage>> sender, CosmosClient client, RequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CrossRegionHedgingAvailabilityStrategy/<CloneAndSendAsync>d__14")]
private Task`1<HedgingResponse> CloneAndSendAsync(Func`3<RequestMessage, CancellationToken, Task`1<ResponseMessage>> sender, RequestMessage request, CloneableStream clonedBody, IReadOnlyCollection`1<string> hedgeRegions, int requestNumber, ITrace trace, CancellationToken cancellationToken, CancellationTokenSource cancellationTokenSource);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.CrossRegionHedgingAvailabilityStrategy/<RequestSenderAndResultCheckAsync>d__15")]
private Task`1<HedgingResponse> RequestSenderAndResultCheckAsync(Func`3<RequestMessage, CancellationToken, Task`1<ResponseMessage>> sender, RequestMessage request, string hedgedRegion, CancellationToken cancellationToken, CancellationTokenSource cancellationTokenSource);
    private static bool IsFinalResult(int statusCode, int subStatusCode);
}
public abstract class Microsoft.Azure.Cosmos.Database : object {
    public string Id { get; }
    public CosmosClient Client { get; }
    public abstract virtual string get_Id();
    public abstract virtual CosmosClient get_Client();
    public abstract virtual Task`1<DatabaseResponse> ReadAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<DatabaseResponse> DeleteAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<Nullable`1<int>> ReadThroughputAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ThroughputResponse> ReadThroughputAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ThroughputResponse> ReplaceThroughputAsync(ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ContainerResponse> CreateContainerAsync(ContainerProperties containerProperties, ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ContainerResponse> CreateContainerIfNotExistsAsync(ContainerProperties containerProperties, ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> CreateContainerStreamAsync(ContainerProperties containerProperties, ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ThroughputResponse> ReplaceThroughputAsync(int throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> ReadStreamAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> DeleteStreamAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Container GetContainer(string id);
    public abstract virtual Task`1<ContainerResponse> CreateContainerAsync(ContainerProperties containerProperties, Nullable`1<int> throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ContainerResponse> CreateContainerAsync(string id, string partitionKeyPath, Nullable`1<int> throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ContainerResponse> CreateContainerIfNotExistsAsync(ContainerProperties containerProperties, Nullable`1<int> throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ContainerResponse> CreateContainerIfNotExistsAsync(string id, string partitionKeyPath, Nullable`1<int> throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> CreateContainerStreamAsync(ContainerProperties containerProperties, Nullable`1<int> throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual User GetUser(string id);
    public abstract virtual Task`1<UserResponse> CreateUserAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<UserResponse> UpsertUserAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual FeedIterator`1<T> GetContainerQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator GetContainerQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator`1<T> GetContainerQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator GetContainerQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator`1<T> GetUserQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator`1<T> GetUserQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual ContainerBuilder DefineContainer(string name, string partitionKeyPath);
    public abstract virtual ClientEncryptionKey GetClientEncryptionKey(string id);
    public abstract virtual FeedIterator`1<ClientEncryptionKeyProperties> GetClientEncryptionKeyQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual Task`1<ClientEncryptionKeyResponse> CreateClientEncryptionKeyAsync(ClientEncryptionKeyProperties clientEncryptionKeyProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.DatabaseCore : DatabaseInternal {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkUri>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosClientContext <ClientContext>k__BackingField;
    public string Id { get; }
    public CosmosClient Client { get; }
    internal string LinkUri { get; }
    internal CosmosClientContext ClientContext { get; }
    protected DatabaseCore(CosmosClientContext clientContext, string databaseId);
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    public virtual CosmosClient get_Client();
    [CompilerGeneratedAttribute]
internal virtual string get_LinkUri();
    [CompilerGeneratedAttribute]
internal virtual CosmosClientContext get_ClientContext();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<ReadAsync>d__12")]
public Task`1<DatabaseResponse> ReadAsync(RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<DeleteAsync>d__13")]
public Task`1<DatabaseResponse> DeleteAsync(RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<ReadThroughputAsync>d__14")]
public Task`1<Nullable`1<int>> ReadThroughputAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<ReadThroughputAsync>d__15")]
public Task`1<ThroughputResponse> ReadThroughputAsync(RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<ReadThroughputIfExistsAsync>d__16")]
internal virtual Task`1<ThroughputResponse> ReadThroughputIfExistsAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<ReplaceThroughputAsync>d__17")]
public Task`1<ThroughputResponse> ReplaceThroughputAsync(int throughput, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<ReplaceThroughputIfExistsAsync>d__18")]
internal virtual Task`1<ThroughputResponse> ReplaceThroughputIfExistsAsync(int throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> CreateContainerStreamAsync(ContainerProperties containerProperties, ThroughputProperties throughputProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<CreateContainerAsync>d__20")]
public Task`1<ContainerResponse> CreateContainerAsync(ContainerProperties containerProperties, ThroughputProperties throughputProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<CreateContainerIfNotExistsAsync>d__21")]
public Task`1<ContainerResponse> CreateContainerIfNotExistsAsync(ContainerProperties containerProperties, ThroughputProperties throughputProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<ReplaceThroughputAsync>d__22")]
public Task`1<ThroughputResponse> ReplaceThroughputAsync(ThroughputProperties throughputProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<ReplaceThroughputPropertiesIfExistsAsync>d__23")]
internal virtual Task`1<ThroughputResponse> ReplaceThroughputPropertiesIfExistsAsync(ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> ReadStreamAsync(RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> DeleteStreamAsync(RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<CreateContainerAsync>d__26")]
public Task`1<ContainerResponse> CreateContainerAsync(ContainerProperties containerProperties, Nullable`1<int> throughput, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ContainerResponse> CreateContainerAsync(string id, string partitionKeyPath, Nullable`1<int> throughput, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ContainerResponse> CreateContainerIfNotExistsAsync(ContainerProperties containerProperties, Nullable`1<int> throughput, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ContainerResponse> CreateContainerIfNotExistsAsync(string id, string partitionKeyPath, Nullable`1<int> throughput, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public virtual Container GetContainer(string id);
    public Task`1<ResponseMessage> CreateContainerStreamAsync(ContainerProperties containerProperties, Nullable`1<int> throughput, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<CreateUserAsync>d__32")]
public Task`1<UserResponse> CreateUserAsync(string id, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public virtual User GetUser(string id);
    public Task`1<ResponseMessage> CreateUserStreamAsync(UserProperties userProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<UpsertUserAsync>d__35")]
public Task`1<UserResponse> UpsertUserAsync(string id, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public virtual FeedIterator GetContainerQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetContainerQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetContainerQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetContainerQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetUserQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetUserQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetUserQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetUserQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual ContainerBuilder DefineContainer(string name, string partitionKeyPath);
    public virtual ClientEncryptionKey GetClientEncryptionKey(string id);
    public virtual FeedIterator`1<ClientEncryptionKeyProperties> GetClientEncryptionKeyQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    private FeedIterator GetClientEncryptionKeyQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<CreateClientEncryptionKeyAsync>d__48")]
public Task`1<ClientEncryptionKeyResponse> CreateClientEncryptionKeyAsync(ITrace trace, ClientEncryptionKeyProperties clientEncryptionKeyProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    private void ValidateContainerProperties(ContainerProperties containerProperties);
    private Task`1<ResponseMessage> ProcessCollectionCreateAsync(Stream streamPayload, ThroughputProperties throughputProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ProcessCollectionCreateAsync(Stream streamPayload, Nullable`1<int> throughput, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ProcessUserCreateAsync(Stream streamPayload, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ProcessUserUpsertAsync(Stream streamPayload, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DatabaseCore/<GetRIDAsync>d__54")]
internal virtual Task`1<string> GetRIDAsync(CancellationToken cancellationToken);
    private Task`1<ResponseMessage> CreateClientEncryptionKeyStreamAsync(ITrace trace, Stream streamPayload, RequestOptions requestOptions, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ProcessResourceOperationStreamAsync(Stream streamPayload, OperationType operationType, string linkUri, ResourceType resourceType, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private FeedResponse`1<T> <GetContainerQueryIterator>b__39_0(ResponseMessage response);
    [CompilerGeneratedAttribute]
private FeedResponse`1<T> <GetUserQueryIterator>b__40_0(ResponseMessage response);
    [CompilerGeneratedAttribute]
private FeedResponse`1<ClientEncryptionKeyProperties> <GetClientEncryptionKeyQueryIterator>b__46_0(ResponseMessage responseMessage);
}
internal class Microsoft.Azure.Cosmos.DatabaseInlineCore : DatabaseCore {
    internal DatabaseInlineCore(CosmosClientContext clientContext, string databaseId);
    public virtual Task`1<ContainerResponse> CreateContainerAsync(ContainerProperties containerProperties, Nullable`1<int> throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ContainerResponse> CreateContainerAsync(string id, string partitionKeyPath, Nullable`1<int> throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ContainerResponse> CreateContainerIfNotExistsAsync(ContainerProperties containerProperties, Nullable`1<int> throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ContainerResponse> CreateContainerIfNotExistsAsync(string id, string partitionKeyPath, Nullable`1<int> throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> CreateContainerStreamAsync(ContainerProperties containerProperties, Nullable`1<int> throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<UserResponse> CreateUserAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual ContainerBuilder DefineContainer(string name, string partitionKeyPath);
    public virtual Task`1<DatabaseResponse> DeleteAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> DeleteStreamAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Container GetContainer(string id);
    public virtual FeedIterator`1<T> GetContainerQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetContainerQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetContainerQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetContainerQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual User GetUser(string id);
    public virtual FeedIterator`1<T> GetUserQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetUserQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual Task`1<DatabaseResponse> ReadAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> ReadStreamAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<int>> ReadThroughputAsync(CancellationToken cancellationToken);
    public virtual Task`1<ThroughputResponse> ReadThroughputAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ThroughputResponse> ReplaceThroughputAsync(int throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ThroughputResponse> ReplaceThroughputAsync(ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ContainerResponse> CreateContainerAsync(ContainerProperties containerProperties, ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ContainerResponse> CreateContainerIfNotExistsAsync(ContainerProperties containerProperties, ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> CreateContainerStreamAsync(ContainerProperties containerProperties, ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<UserResponse> UpsertUserAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual ClientEncryptionKey GetClientEncryptionKey(string id);
    public virtual FeedIterator`1<ClientEncryptionKeyProperties> GetClientEncryptionKeyQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual Task`1<ClientEncryptionKeyResponse> CreateClientEncryptionKeyAsync(ClientEncryptionKeyProperties clientEncryptionKeyProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.DatabaseInternal : Database {
    internal string LinkUri { get; }
    internal CosmosClientContext ClientContext { get; }
    internal abstract virtual string get_LinkUri();
    internal abstract virtual CosmosClientContext get_ClientContext();
    internal abstract virtual Task`1<ThroughputResponse> ReadThroughputIfExistsAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    internal abstract virtual Task`1<ThroughputResponse> ReplaceThroughputIfExistsAsync(int throughput, RequestOptions requestOptions, CancellationToken cancellationToken);
    internal abstract virtual Task`1<ThroughputResponse> ReplaceThroughputPropertiesIfExistsAsync(ThroughputProperties throughputProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    internal abstract virtual Task`1<string> GetRIDAsync(CancellationToken cancellationToken);
    public abstract virtual FeedIterator GetUserQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator GetUserQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
}
public class Microsoft.Azure.Cosmos.DatabaseProperties : object {
    private string id;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfLink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Id { get; public set; }
    [JsonPropertyAttribute]
public string ETag { get; private set; }
    [JsonConverterAttribute("Microsoft.Azure.Documents.UnixDateTimeConverter")]
[JsonPropertyAttribute]
public Nullable`1<DateTime> LastModified { get; private set; }
    [JsonPropertyAttribute]
public string SelfLink { get; private set; }
    [JsonPropertyAttribute]
internal string ResourceId { get; private set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    public DatabaseProperties(string id);
    public string get_Id();
    public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
private void set_ETag(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastModified();
    [CompilerGeneratedAttribute]
private void set_LastModified(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_SelfLink();
    [CompilerGeneratedAttribute]
private void set_SelfLink(string value);
    [CompilerGeneratedAttribute]
internal string get_ResourceId();
    [CompilerGeneratedAttribute]
private void set_ResourceId(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public class Microsoft.Azure.Cosmos.DatabaseResponse : Response`1<DatabaseProperties> {
    [CompilerGeneratedAttribute]
private Database <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private DatabaseProperties <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    public Database Database { get; }
    public Headers Headers { get; }
    public DatabaseProperties Resource { get; }
    public HttpStatusCode StatusCode { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ETag { get; }
    internal RequestMessage RequestMessage { get; }
    internal DatabaseResponse(HttpStatusCode httpStatusCode, Headers headers, DatabaseProperties databaseProperties, Database database, CosmosDiagnostics diagnostics, RequestMessage requestMessage);
    [CompilerGeneratedAttribute]
public virtual Database get_Database();
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public virtual DatabaseProperties get_Resource();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    public virtual double get_RequestCharge();
    public virtual string get_ActivityId();
    public virtual string get_ETag();
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
    public static Database op_Implicit(DatabaseResponse response);
}
public enum Microsoft.Azure.Cosmos.DataType : Enum {
    public int value__;
    public static DataType Number;
    public static DataType String;
    public static DataType Point;
    public static DataType LineString;
    public static DataType Polygon;
    public static DataType MultiPolygon;
}
public class Microsoft.Azure.Cosmos.DedicatedGatewayRequestOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <MaxIntegratedCacheStaleness>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <BypassIntegratedCache>k__BackingField;
    public Nullable`1<TimeSpan> MaxIntegratedCacheStaleness { get; public set; }
    public Nullable`1<bool> BypassIntegratedCache { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_MaxIntegratedCacheStaleness();
    [CompilerGeneratedAttribute]
public void set_MaxIntegratedCacheStaleness(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_BypassIntegratedCache();
    [CompilerGeneratedAttribute]
public void set_BypassIntegratedCache(Nullable`1<bool> value);
    internal static void PopulateMaxIntegratedCacheStalenessOption(DedicatedGatewayRequestOptions dedicatedGatewayRequestOptions, RequestMessage request);
    internal static void PopulateBypassIntegratedCacheOption(DedicatedGatewayRequestOptions dedicatedGatewayRequestOptions, RequestMessage request);
}
internal static class Microsoft.Azure.Cosmos.DefaultJsonSerializationSettings : object {
    public static JsonSerializerSettings Value;
    private static DefaultJsonSerializationSettings();
}
internal class Microsoft.Azure.Cosmos.Diagnostics.BoundedList`1 : object {
    private int capacity;
    private List`1<T> elementList;
    private CircularQueue`1<T> circularQueue;
    public BoundedList`1(int capacity);
    public void Add(T element);
    public void AddRange(IEnumerable`1<T> elements);
    [IteratorStateMachineAttribute("Microsoft.Azure.Cosmos.Diagnostics.BoundedList`1/<GetListEnumerator>d__6")]
public IEnumerator`1<T> GetListEnumerator();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Azure.Cosmos.Diagnostics.CircularQueue`1 : object {
    private T[] buffer;
    private int head;
    private int tail;
    public int Capacity { get; }
    public bool Full { get; }
    public bool Empty { get; }
    public CircularQueue`1(int capacity);
    public int get_Capacity();
    public bool get_Full();
    public bool get_Empty();
    public void Add(T element);
    public void AddRange(IEnumerable`1<T> elements);
    private int GetNextIndex(int index);
    private bool TryPop(T& element);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [IteratorStateMachineAttribute("Microsoft.Azure.Cosmos.Diagnostics.CircularQueue`1/<GetEnumerator>d__15")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
}
internal class Microsoft.Azure.Cosmos.Diagnostics.CosmosTraceDiagnostics : CosmosDiagnostics {
    private Lazy`1<ServerSideCumulativeMetrics> accumulatedMetrics;
    [CompilerGeneratedAttribute]
private ITrace <Value>k__BackingField;
    public ITrace Value { get; }
    public CosmosTraceDiagnostics(ITrace trace);
    [CompilerGeneratedAttribute]
public ITrace get_Value();
    public virtual string ToString();
    public virtual TimeSpan GetClientElapsedTime();
    public virtual IReadOnlyList`1<ValueTuple`2<string, Uri>> GetContactedRegions();
    public virtual ServerSideCumulativeMetrics GetQueryMetrics();
    internal bool IsGoneExceptionHit();
    private bool WalkTraceTreeForGoneException(ITrace currentTrace);
    private string ToJsonString();
    private ReadOnlyMemory`1<byte> WriteTraceToJsonWriter(JsonSerializationFormat jsonSerializationFormat);
    private static ServerSideCumulativeMetrics PopulateServerSideCumulativeMetrics(ITrace trace);
    public virtual Nullable`1<DateTime> GetStartTimeUtc();
    public virtual int GetFailedRequestCount();
    [CompilerGeneratedAttribute]
private ServerSideCumulativeMetrics <.ctor>b__1_0();
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.DictionaryExtensions : object {
    [ExtensionAttribute]
internal static bool EqualsTo(IDictionary`2<string, JToken> dict1, IDictionary`2<string, JToken> dict2);
    [ExtensionAttribute]
internal static bool EqualsTo(IDictionary`2<U, T> dict1, IDictionary`2<U, T> dict2);
}
internal class Microsoft.Azure.Cosmos.DisabledAvailabilityStrategy : AvailabilityStrategyInternal {
    internal virtual bool Enabled();
    internal virtual Task`1<ResponseMessage> ExecuteAvailabilityStrategyAsync(Func`3<RequestMessage, CancellationToken, Task`1<ResponseMessage>> sender, CosmosClient client, RequestMessage requestMessage, CancellationToken cancellationToken);
}
internal enum Microsoft.Azure.Cosmos.DistanceFunction : Enum {
    public int value__;
    [EnumMemberAttribute]
public static DistanceFunction Euclidean;
    [EnumMemberAttribute]
public static DistanceFunction Cosine;
    [EnumMemberAttribute]
public static DistanceFunction DotProduct;
}
internal class Microsoft.Azure.Cosmos.DocumentClient : object {
    private static string AllowOverrideStrongerConsistency;
    private static string MaxConcurrentConnectionOpenConfig;
    private static string IdleConnectionTimeoutInSecondsConfig;
    private static string OpenConnectionTimeoutInSecondsConfig;
    private static string TransportTimerPoolGranularityInSecondsConfig;
    private static string EnableTcpChannelConfig;
    private static string MaxRequestsPerChannelConfig;
    private static string TcpPartitionCount;
    private static string MaxChannelsPerHostConfig;
    private static string RntbdPortReuseMode;
    private static string RntbdPortPoolReuseThreshold;
    private static string RntbdPortPoolBindAttempts;
    private static string RntbdReceiveHangDetectionTimeConfig;
    private static string RntbdSendHangDetectionTimeConfig;
    private static string EnableCpuMonitorConfig;
    private static string RntbdMaxConcurrentOpeningConnectionCountConfig;
    private static int MaxConcurrentConnectionOpenRequestsPerProcessor;
    private static int DefaultMaxRequestsPerRntbdChannel;
    private static int DefaultRntbdPartitionCount;
    private static int DefaultMaxRntbdChannelsPerHost;
    private static PortReuseMode DefaultRntbdPortReuseMode;
    private static int DefaultRntbdPortPoolReuseThreshold;
    private static int DefaultRntbdPortPoolBindAttempts;
    private static int DefaultRntbdReceiveHangDetectionTimeSeconds;
    private static int DefaultRntbdSendHangDetectionTimeSeconds;
    private static bool DefaultEnableCpuMonitor;
    private static string DefaultInitTaskKey;
    private bool IsLocalQuorumConsistency;
    private bool isReplicaAddressValidationEnabled;
    private AvailabilityStrategy availabilityStrategy;
    private IChaosInterceptorFactory chaosInterceptorFactory;
    private IChaosInterceptor chaosInterceptor;
    private bool isChaosInterceptorInititalized;
    internal AuthorizationTokenProvider cosmosAuthorization;
    private RetryPolicy retryPolicy;
    private bool allowOverrideStrongerConsistency;
    private int maxConcurrentConnectionOpenRequests;
    private int openConnectionTimeoutInSeconds;
    private int idleConnectionTimeoutInSeconds;
    private int timerPoolGranularityInSeconds;
    private bool enableRntbdChannel;
    private int maxRequestsPerRntbdChannel;
    private int rntbdPartitionCount;
    private int maxRntbdChannels;
    private PortReuseMode rntbdPortReuseMode;
    private int rntbdPortPoolReuseThreshold;
    private int rntbdPortPoolBindAttempts;
    private int rntbdReceiveHangDetectionTimeSeconds;
    private int rntbdSendHangDetectionTimeSeconds;
    private bool enableCpuMonitor;
    private int rntbdMaxConcurrentOpeningConnectionCount;
    private string clientId;
    private Nullable`1<ConsistencyLevel> desiredConsistencyLevel;
    [CompilerGeneratedAttribute]
private CosmosAccountServiceConfiguration <accountServiceConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private TelemetryToServiceHelper <telemetryToServiceHelper>k__BackingField;
    private ClientCollectionCache collectionCache;
    private PartitionKeyRangeCache partitionKeyRangeCache;
    private bool isSuccessfullyInitialized;
    private bool isDisposed;
    private IStoreClientFactory storeClientFactory;
    [CompilerGeneratedAttribute]
private CosmosHttpClient <httpClient>k__BackingField;
    private bool isStoreClientFactoryCreatedInternally;
    private static int idCounter;
    private int traceId;
    internal RemoteCertificateValidationCallback remoteCertificateValidationCallback;
    internal CosmosClientTelemetryOptions cosmosClientTelemetryOptions;
    internal ISessionContainer sessionContainer;
    private CancellationTokenSource cancellationTokenSource;
    private AsyncLazy`1<QueryPartitionProvider> queryPartitionProvider;
    private DocumentClientEventSource eventSource;
    private Func`2<bool, Task`1<bool>> initializeTaskFactory;
    internal AsyncCacheNonBlocking`2<string, bool> initTaskCache;
    private JsonSerializerSettings serializerSettings;
    [CompilerGeneratedAttribute]
private EventHandler`1<SendingRequestEventArgs> sendingRequest;
    [CompilerGeneratedAttribute]
private EventHandler`1<ReceivedResponseEventArgs> receivedResponse;
    private Func`2<TransportClient, TransportClient> transportClientHandlerFactory;
    [CompilerGeneratedAttribute]
private GlobalAddressResolver <AddressResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private GlobalEndpointManager <GlobalEndpointManager>k__BackingField;
    [CompilerGeneratedAttribute]
private GlobalPartitionEndpointManager <PartitionKeyRangeLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private ApiType <ApiType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseMultipleWriteLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ServiceEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionPolicy <ConnectionPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryCompatibilityMode <QueryCompatibilityMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IRetryPolicyFactory <ResetSessionTokenRetryPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private IStoreModelExtension <StoreModel>k__BackingField;
    [CompilerGeneratedAttribute]
private IStoreModelExtension <GatewayStoreModel>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IQueryable> <OnExecuteScalarQueryCallback>k__BackingField;
    internal CosmosAccountServiceConfiguration accountServiceConfiguration { get; private set; }
    internal TelemetryToServiceHelper telemetryToServiceHelper { get; internal set; }
    internal CosmosHttpClient httpClient { get; private set; }
    internal GlobalAddressResolver AddressResolver { get; private set; }
    internal GlobalEndpointManager GlobalEndpointManager { get; private set; }
    internal GlobalPartitionEndpointManager PartitionKeyRangeLocation { get; private set; }
    public object Session { get; public set; }
    internal ApiType ApiType { get; private set; }
    internal bool UseMultipleWriteLocations { get; private set; }
    public Uri ServiceEndpoint { get; private set; }
    public Uri WriteEndpoint { get; }
    public Uri ReadEndpoint { get; }
    public ConnectionPolicy ConnectionPolicy { get; private set; }
    public SecureString AuthKey { get; }
    public ConsistencyLevel ConsistencyLevel { get; }
    internal QueryCompatibilityMode QueryCompatibilityMode { get; internal set; }
    internal IRetryPolicyFactory ResetSessionTokenRetryPolicy { get; private set; }
    internal IStoreModelExtension StoreModel { get; internal set; }
    internal IStoreModelExtension GatewayStoreModel { get; internal set; }
    internal Action`1<IQueryable> OnExecuteScalarQueryCallback { get; internal set; }
    internal Task`1<QueryPartitionProvider> QueryPartitionProvider { get; }
    public DocumentClient(Uri serviceEndpoint, SecureString authKey, ConnectionPolicy connectionPolicy, Nullable`1<ConsistencyLevel> desiredConsistencyLevel);
    [ObsoleteAttribute("Please use the constructor that takes JsonSerializerSettings as the third parameter.")]
public DocumentClient(Uri serviceEndpoint, SecureString authKey, ConnectionPolicy connectionPolicy, Nullable`1<ConsistencyLevel> desiredConsistencyLevel, JsonSerializerSettings serializerSettings);
    public DocumentClient(Uri serviceEndpoint, SecureString authKey, JsonSerializerSettings serializerSettings, ConnectionPolicy connectionPolicy, Nullable`1<ConsistencyLevel> desiredConsistencyLevel);
    public DocumentClient(Uri serviceEndpoint, string authKeyOrResourceToken, ConnectionPolicy connectionPolicy, Nullable`1<ConsistencyLevel> desiredConsistencyLevel);
    public DocumentClient(Uri serviceEndpoint, string authKeyOrResourceToken, HttpMessageHandler handler, ConnectionPolicy connectionPolicy, Nullable`1<ConsistencyLevel> desiredConsistencyLevel);
    internal DocumentClient(Uri serviceEndpoint, string authKeyOrResourceToken, EventHandler`1<SendingRequestEventArgs> sendingRequestEventArgs, ConnectionPolicy connectionPolicy, Nullable`1<ConsistencyLevel> desiredConsistencyLevel, JsonSerializerSettings serializerSettings, ApiType apitype, EventHandler`1<ReceivedResponseEventArgs> receivedResponseEventArgs, HttpMessageHandler handler, ISessionContainer sessionContainer, Nullable`1<bool> enableCpuMonitor, Func`2<TransportClient, TransportClient> transportClientHandlerFactory, IStoreClientFactory storeClientFactory);
    internal DocumentClient(Uri serviceEndpoint, AuthorizationTokenProvider cosmosAuthorization, EventHandler`1<SendingRequestEventArgs> sendingRequestEventArgs, ConnectionPolicy connectionPolicy, Nullable`1<ConsistencyLevel> desiredConsistencyLevel, JsonSerializerSettings serializerSettings, ApiType apitype, EventHandler`1<ReceivedResponseEventArgs> receivedResponseEventArgs, HttpMessageHandler handler, ISessionContainer sessionContainer, Nullable`1<bool> enableCpuMonitor, Func`2<TransportClient, TransportClient> transportClientHandlerFactory, IStoreClientFactory storeClientFactory, bool isLocalQuorumConsistency, string cosmosClientId, RemoteCertificateValidationCallback remoteCertificateValidationCallback, CosmosClientTelemetryOptions cosmosClientTelemetryOptions, AvailabilityStrategy availabilityStrategy, IChaosInterceptorFactory chaosInterceptorFactory);
    [ObsoleteAttribute("Please use the constructor that takes JsonSerializerSettings as the third parameter.")]
public DocumentClient(Uri serviceEndpoint, string authKeyOrResourceToken, ConnectionPolicy connectionPolicy, Nullable`1<ConsistencyLevel> desiredConsistencyLevel, JsonSerializerSettings serializerSettings);
    public DocumentClient(Uri serviceEndpoint, string authKeyOrResourceToken, JsonSerializerSettings serializerSettings, ConnectionPolicy connectionPolicy, Nullable`1<ConsistencyLevel> desiredConsistencyLevel);
    internal DocumentClient(Uri serviceEndpoint, ConnectionPolicy connectionPolicy);
    [CompilerGeneratedAttribute]
internal CosmosAccountServiceConfiguration get_accountServiceConfiguration();
    [CompilerGeneratedAttribute]
private void set_accountServiceConfiguration(CosmosAccountServiceConfiguration value);
    [CompilerGeneratedAttribute]
internal TelemetryToServiceHelper get_telemetryToServiceHelper();
    [CompilerGeneratedAttribute]
internal void set_telemetryToServiceHelper(TelemetryToServiceHelper value);
    [CompilerGeneratedAttribute]
internal CosmosHttpClient get_httpClient();
    [CompilerGeneratedAttribute]
private void set_httpClient(CosmosHttpClient value);
    [CompilerGeneratedAttribute]
private void add_sendingRequest(EventHandler`1<SendingRequestEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_sendingRequest(EventHandler`1<SendingRequestEventArgs> value);
    [CompilerGeneratedAttribute]
private void add_receivedResponse(EventHandler`1<ReceivedResponseEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_receivedResponse(EventHandler`1<ReceivedResponseEventArgs> value);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<GetCollectionCacheAsync>d__99")]
internal virtual Task`1<ClientCollectionCache> GetCollectionCacheAsync(ITrace trace);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<GetPartitionKeyRangeCacheAsync>d__100")]
internal virtual Task`1<PartitionKeyRangeCache> GetPartitionKeyRangeCacheAsync(ITrace trace);
    [CompilerGeneratedAttribute]
internal GlobalAddressResolver get_AddressResolver();
    [CompilerGeneratedAttribute]
private void set_AddressResolver(GlobalAddressResolver value);
    [CompilerGeneratedAttribute]
internal GlobalEndpointManager get_GlobalEndpointManager();
    [CompilerGeneratedAttribute]
private void set_GlobalEndpointManager(GlobalEndpointManager value);
    [CompilerGeneratedAttribute]
internal GlobalPartitionEndpointManager get_PartitionKeyRangeLocation();
    [CompilerGeneratedAttribute]
private void set_PartitionKeyRangeLocation(GlobalPartitionEndpointManager value);
    public Task OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<OpenPrivateInlineAsync>d__114")]
private Task OpenPrivateInlineAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<OpenPrivateAsync>d__115")]
private Task OpenPrivateAsync(CancellationToken cancellationToken);
    internal virtual void Initialize(Uri serviceEndpoint, ConnectionPolicy connectionPolicy, Nullable`1<ConsistencyLevel> desiredConsistencyLevel, HttpMessageHandler handler, ISessionContainer sessionContainer, Nullable`1<bool> enableCpuMonitor, IStoreClientFactory storeClientFactory, TokenCredential tokenCredential, string cosmosClientId, RemoteCertificateValidationCallback remoteCertificateValidationCallback, CosmosClientTelemetryOptions cosmosClientTelemetryOptions);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<GetInitializationTaskAsync>d__117")]
private Task`1<bool> GetInitializationTaskAsync(IStoreClientFactory storeClientFactory);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<InitializeCachesAsync>d__118")]
private Task InitializeCachesAsync(string databaseName, DocumentCollection collection, CancellationToken cancellationToken);
    public sealed virtual object get_Session();
    public sealed virtual void set_Session(object value);
    internal string GetSessionToken(string collectionLink);
    [CompilerGeneratedAttribute]
internal ApiType get_ApiType();
    [CompilerGeneratedAttribute]
private void set_ApiType(ApiType value);
    [CompilerGeneratedAttribute]
internal bool get_UseMultipleWriteLocations();
    [CompilerGeneratedAttribute]
private void set_UseMultipleWriteLocations(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ServiceEndpoint();
    [CompilerGeneratedAttribute]
private void set_ServiceEndpoint(Uri value);
    public sealed virtual Uri get_WriteEndpoint();
    public sealed virtual Uri get_ReadEndpoint();
    [CompilerGeneratedAttribute]
public sealed virtual ConnectionPolicy get_ConnectionPolicy();
    [CompilerGeneratedAttribute]
private void set_ConnectionPolicy(ConnectionPolicy value);
    public sealed virtual SecureString get_AuthKey();
    public virtual ConsistencyLevel get_ConsistencyLevel();
    public bool TryGetCachedAccountProperties(AccountProperties& properties);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal QueryCompatibilityMode get_QueryCompatibilityMode();
    [CompilerGeneratedAttribute]
internal void set_QueryCompatibilityMode(QueryCompatibilityMode value);
    [CompilerGeneratedAttribute]
internal virtual IRetryPolicyFactory get_ResetSessionTokenRetryPolicy();
    [CompilerGeneratedAttribute]
private void set_ResetSessionTokenRetryPolicy(IRetryPolicyFactory value);
    [CompilerGeneratedAttribute]
internal IStoreModelExtension get_StoreModel();
    [CompilerGeneratedAttribute]
internal void set_StoreModel(IStoreModelExtension value);
    [CompilerGeneratedAttribute]
internal IStoreModelExtension get_GatewayStoreModel();
    [CompilerGeneratedAttribute]
internal void set_GatewayStoreModel(IStoreModelExtension value);
    [CompilerGeneratedAttribute]
internal Action`1<IQueryable> get_OnExecuteScalarQueryCallback();
    [CompilerGeneratedAttribute]
internal void set_OnExecuteScalarQueryCallback(Action`1<IQueryable> value);
    internal virtual Task`1<QueryPartitionProvider> get_QueryPartitionProvider();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<GetDefaultConsistencyLevelAsync>d__171")]
internal virtual Task`1<ConsistencyLevel> GetDefaultConsistencyLevelAsync();
    internal Task`1<Nullable`1<ConsistencyLevel>> GetDesiredConsistencyLevelAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ProcessRequestAsync>d__173")]
internal Task`1<DocumentServiceResponse> ProcessRequestAsync(string verb, DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken, string testAuthorization);
    internal Task`1<DocumentServiceResponse> ProcessRequestAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ProcessRequestAsync>d__175")]
internal Task`1<DocumentServiceResponse> ProcessRequestAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<OpenConnectionsToAllReplicasAsync>d__176")]
internal Task OpenConnectionsToAllReplicasAsync(string databaseName, string containerLinkUri, CancellationToken cancellationToken);
    private static string NormalizeAuthorizationPayload(string input);
    internal RntbdConnectionConfig RecordTcpSettings(ClientConfigurationTraceDatum clientConfigurationTraceDatum);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<EnsureValidClientAsync>d__179")]
internal virtual Task EnsureValidClientAsync(ITrace trace);
    public sealed virtual Task`1<ResourceResponse`1<Database>> CreateDatabaseAsync(Database database, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<CreateDatabasePrivateAsync>d__181")]
private Task`1<ResourceResponse`1<Database>> CreateDatabasePrivateAsync(Database database, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<Database>> CreateDatabaseIfNotExistsAsync(Database database, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<CreateDatabaseIfNotExistsPrivateAsync>d__183")]
private Task`1<ResourceResponse`1<Database>> CreateDatabaseIfNotExistsPrivateAsync(Database database, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<Document>> CreateDocumentAsync(string documentsFeedOrDatabaseLink, object document, RequestOptions options, bool disableAutomaticIdGeneration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<CreateDocumentInlineAsync>d__185")]
private Task`1<ResourceResponse`1<Document>> CreateDocumentInlineAsync(string documentsFeedOrDatabaseLink, object document, RequestOptions options, bool disableAutomaticIdGeneration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<CreateDocumentPrivateAsync>d__186")]
private Task`1<ResourceResponse`1<Document>> CreateDocumentPrivateAsync(string documentCollectionLink, object document, RequestOptions options, bool disableAutomaticIdGeneration, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResourceResponse`1<DocumentCollection>> CreateDocumentCollectionAsync(string databaseLink, DocumentCollection documentCollection, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<CreateDocumentCollectionPrivateAsync>d__188")]
private Task`1<ResourceResponse`1<DocumentCollection>> CreateDocumentCollectionPrivateAsync(string databaseLink, DocumentCollection documentCollection, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<DocumentCollection>> CreateDocumentCollectionIfNotExistsAsync(string databaseLink, DocumentCollection documentCollection, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<CreateDocumentCollectionIfNotExistsPrivateAsync>d__190")]
private Task`1<ResourceResponse`1<DocumentCollection>> CreateDocumentCollectionIfNotExistsPrivateAsync(string databaseLink, DocumentCollection documentCollection, RequestOptions options);
    internal Task`1<ResourceResponse`1<DocumentCollection>> RestoreDocumentCollectionAsync(string sourceDocumentCollectionLink, DocumentCollection targetDocumentCollection, Nullable`1<DateTimeOffset> restoreTime, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<RestoreDocumentCollectionPrivateAsync>d__192")]
private Task`1<ResourceResponse`1<DocumentCollection>> RestoreDocumentCollectionPrivateAsync(string sourceDocumentCollectionLink, DocumentCollection targetDocumentCollection, Nullable`1<DateTimeOffset> restoreTime, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    internal Task`1<DocumentCollectionRestoreStatus> GetDocumentCollectionRestoreStatusAsync(string targetDocumentCollectionLink);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<GetDocumentCollectionRestoreStatusPrivateAsync>d__194")]
private Task`1<DocumentCollectionRestoreStatus> GetDocumentCollectionRestoreStatusPrivateAsync(string targetDocumentCollectionLink, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<StoredProcedure>> CreateStoredProcedureAsync(string collectionLink, StoredProcedure storedProcedure, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<CreateStoredProcedurePrivateAsync>d__196")]
private Task`1<ResourceResponse`1<StoredProcedure>> CreateStoredProcedurePrivateAsync(string collectionLink, StoredProcedure storedProcedure, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<Trigger>> CreateTriggerAsync(string collectionLink, Trigger trigger, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<CreateTriggerPrivateAsync>d__198")]
private Task`1<ResourceResponse`1<Trigger>> CreateTriggerPrivateAsync(string collectionLink, Trigger trigger, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<UserDefinedFunction>> CreateUserDefinedFunctionAsync(string collectionLink, UserDefinedFunction function, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<CreateUserDefinedFunctionPrivateAsync>d__200")]
private Task`1<ResourceResponse`1<UserDefinedFunction>> CreateUserDefinedFunctionPrivateAsync(string collectionLink, UserDefinedFunction function, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    internal Task`1<ResourceResponse`1<UserDefinedType>> CreateUserDefinedTypeAsync(string databaseLink, UserDefinedType userDefinedType, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<CreateUserDefinedTypePrivateAsync>d__202")]
private Task`1<ResourceResponse`1<UserDefinedType>> CreateUserDefinedTypePrivateAsync(string databaseLink, UserDefinedType userDefinedType, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    internal Task`1<ResourceResponse`1<Snapshot>> CreateSnapshotAsync(Snapshot snapshot, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<CreateSnapshotPrivateAsync>d__204")]
private Task`1<ResourceResponse`1<Snapshot>> CreateSnapshotPrivateAsync(Snapshot snapshot, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<Database>> DeleteDatabaseAsync(string databaseLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<DeleteDatabasePrivateAsync>d__206")]
private Task`1<ResourceResponse`1<Database>> DeleteDatabasePrivateAsync(string databaseLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<Document>> DeleteDocumentAsync(string documentLink, RequestOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<DeleteDocumentPrivateAsync>d__208")]
private Task`1<ResourceResponse`1<Document>> DeleteDocumentPrivateAsync(string documentLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResourceResponse`1<DocumentCollection>> DeleteDocumentCollectionAsync(string documentCollectionLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<DeleteDocumentCollectionPrivateAsync>d__210")]
private Task`1<ResourceResponse`1<DocumentCollection>> DeleteDocumentCollectionPrivateAsync(string documentCollectionLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<StoredProcedure>> DeleteStoredProcedureAsync(string storedProcedureLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<DeleteStoredProcedurePrivateAsync>d__212")]
private Task`1<ResourceResponse`1<StoredProcedure>> DeleteStoredProcedurePrivateAsync(string storedProcedureLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<Trigger>> DeleteTriggerAsync(string triggerLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<DeleteTriggerPrivateAsync>d__214")]
private Task`1<ResourceResponse`1<Trigger>> DeleteTriggerPrivateAsync(string triggerLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<UserDefinedFunction>> DeleteUserDefinedFunctionAsync(string functionLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<DeleteUserDefinedFunctionPrivateAsync>d__216")]
private Task`1<ResourceResponse`1<UserDefinedFunction>> DeleteUserDefinedFunctionPrivateAsync(string functionLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<Conflict>> DeleteConflictAsync(string conflictLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<DeleteConflictPrivateAsync>d__218")]
private Task`1<ResourceResponse`1<Conflict>> DeleteConflictPrivateAsync(string conflictLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    internal Task`1<ResourceResponse`1<Snapshot>> DeleteSnapshotAsync(string snapshotLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<DeleteSnapshotPrivateAsync>d__220")]
private Task`1<ResourceResponse`1<Snapshot>> DeleteSnapshotPrivateAsync(string snapshotLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<DocumentCollection>> ReplaceDocumentCollectionAsync(DocumentCollection documentCollection, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReplaceDocumentCollectionPrivateAsync>d__222")]
private Task`1<ResourceResponse`1<DocumentCollection>> ReplaceDocumentCollectionPrivateAsync(DocumentCollection documentCollection, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance, string altLink);
    public sealed virtual Task`1<ResourceResponse`1<Document>> ReplaceDocumentAsync(string documentLink, object document, RequestOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReplaceDocumentInlineAsync>d__224")]
private Task`1<ResourceResponse`1<Document>> ReplaceDocumentInlineAsync(string documentLink, object document, RequestOptions options, CancellationToken cancellationToken);
    private Task`1<ResourceResponse`1<Document>> ReplaceDocumentPrivateAsync(string documentLink, object document, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResourceResponse`1<Document>> ReplaceDocumentAsync(Document document, RequestOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReplaceDocumentPrivateAsync>d__227")]
private Task`1<ResourceResponse`1<Document>> ReplaceDocumentPrivateAsync(string documentLink, Document document, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResourceResponse`1<StoredProcedure>> ReplaceStoredProcedureAsync(StoredProcedure storedProcedure, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReplaceStoredProcedurePrivateAsync>d__229")]
private Task`1<ResourceResponse`1<StoredProcedure>> ReplaceStoredProcedurePrivateAsync(StoredProcedure storedProcedure, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance, string altLink);
    public sealed virtual Task`1<ResourceResponse`1<Trigger>> ReplaceTriggerAsync(Trigger trigger, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReplaceTriggerPrivateAsync>d__231")]
private Task`1<ResourceResponse`1<Trigger>> ReplaceTriggerPrivateAsync(Trigger trigger, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance, string altLink);
    public sealed virtual Task`1<ResourceResponse`1<UserDefinedFunction>> ReplaceUserDefinedFunctionAsync(UserDefinedFunction function, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReplaceUserDefinedFunctionPrivateAsync>d__233")]
private Task`1<ResourceResponse`1<UserDefinedFunction>> ReplaceUserDefinedFunctionPrivateAsync(UserDefinedFunction function, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance, string altLink);
    public sealed virtual Task`1<ResourceResponse`1<Offer>> ReplaceOfferAsync(Offer offer);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReplaceOfferPrivateAsync>d__235")]
private Task`1<ResourceResponse`1<Offer>> ReplaceOfferPrivateAsync(Offer offer, IDocumentClientRetryPolicy retryPolicyInstance);
    internal Task`1<ResourceResponse`1<UserDefinedType>> ReplaceUserDefinedTypeAsync(UserDefinedType userDefinedType, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReplaceUserDefinedTypePrivateAsync>d__237")]
private Task`1<ResourceResponse`1<UserDefinedType>> ReplaceUserDefinedTypePrivateAsync(UserDefinedType userDefinedType, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance, string altLink);
    public sealed virtual Task`1<ResourceResponse`1<Database>> ReadDatabaseAsync(string databaseLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadDatabasePrivateAsync>d__239")]
private Task`1<ResourceResponse`1<Database>> ReadDatabasePrivateAsync(string databaseLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<Document>> ReadDocumentAsync(string documentLink, RequestOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadDocumentPrivateAsync>d__241")]
private Task`1<ResourceResponse`1<Document>> ReadDocumentPrivateAsync(string documentLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    public sealed virtual Task`1<DocumentResponse`1<T>> ReadDocumentAsync(string documentLink, RequestOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadDocumentPrivateAsync>d__243`1")]
private Task`1<DocumentResponse`1<T>> ReadDocumentPrivateAsync(string documentLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResourceResponse`1<DocumentCollection>> ReadDocumentCollectionAsync(string documentCollectionLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadDocumentCollectionPrivateAsync>d__245")]
private Task`1<ResourceResponse`1<DocumentCollection>> ReadDocumentCollectionPrivateAsync(string documentCollectionLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<StoredProcedure>> ReadStoredProcedureAsync(string storedProcedureLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadStoredProcedureAsync>d__247")]
private Task`1<ResourceResponse`1<StoredProcedure>> ReadStoredProcedureAsync(string storedProcedureLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<Trigger>> ReadTriggerAsync(string triggerLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadTriggerPrivateAsync>d__249")]
private Task`1<ResourceResponse`1<Trigger>> ReadTriggerPrivateAsync(string triggerLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<UserDefinedFunction>> ReadUserDefinedFunctionAsync(string functionLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadUserDefinedFunctionPrivateAsync>d__251")]
private Task`1<ResourceResponse`1<UserDefinedFunction>> ReadUserDefinedFunctionPrivateAsync(string functionLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<Conflict>> ReadConflictAsync(string conflictLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadConflictPrivateAsync>d__253")]
private Task`1<ResourceResponse`1<Conflict>> ReadConflictPrivateAsync(string conflictLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<Offer>> ReadOfferAsync(string offerLink);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadOfferPrivateAsync>d__255")]
private Task`1<ResourceResponse`1<Offer>> ReadOfferPrivateAsync(string offerLink, IDocumentClientRetryPolicy retryPolicyInstance);
    internal Task`1<ResourceResponse`1<Schema>> ReadSchemaAsync(string documentSchemaLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadSchemaPrivateAsync>d__257")]
private Task`1<ResourceResponse`1<Schema>> ReadSchemaPrivateAsync(string documentSchemaLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    internal Task`1<ResourceResponse`1<UserDefinedType>> ReadUserDefinedTypeAsync(string userDefinedTypeLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadUserDefinedTypePrivateAsync>d__259")]
private Task`1<ResourceResponse`1<UserDefinedType>> ReadUserDefinedTypePrivateAsync(string userDefinedTypeLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    internal Task`1<ResourceResponse`1<Snapshot>> ReadSnapshotAsync(string snapshotLink, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadSnapshotPrivateAsync>d__261")]
private Task`1<ResourceResponse`1<Snapshot>> ReadSnapshotPrivateAsync(string snapshotLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<DocumentFeedResponse`1<Database>> ReadDatabaseFeedAsync(FeedOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadDatabaseFeedPrivateAsync>d__263")]
private Task`1<DocumentFeedResponse`1<Database>> ReadDatabaseFeedPrivateAsync(FeedOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<DocumentFeedResponse`1<PartitionKeyRange>> ReadPartitionKeyRangeFeedAsync(string partitionKeyRangesOrCollectionLink, FeedOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadPartitionKeyRangeFeedPrivateAsync>d__265")]
private Task`1<DocumentFeedResponse`1<PartitionKeyRange>> ReadPartitionKeyRangeFeedPrivateAsync(string partitionKeyRangesLink, FeedOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<DocumentFeedResponse`1<DocumentCollection>> ReadDocumentCollectionFeedAsync(string collectionsLink, FeedOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadDocumentCollectionFeedPrivateAsync>d__267")]
private Task`1<DocumentFeedResponse`1<DocumentCollection>> ReadDocumentCollectionFeedPrivateAsync(string collectionsLink, FeedOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<DocumentFeedResponse`1<StoredProcedure>> ReadStoredProcedureFeedAsync(string storedProceduresLink, FeedOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadStoredProcedureFeedPrivateAsync>d__269")]
private Task`1<DocumentFeedResponse`1<StoredProcedure>> ReadStoredProcedureFeedPrivateAsync(string storedProceduresLink, FeedOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<DocumentFeedResponse`1<Trigger>> ReadTriggerFeedAsync(string triggersLink, FeedOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadTriggerFeedPrivateAsync>d__271")]
private Task`1<DocumentFeedResponse`1<Trigger>> ReadTriggerFeedPrivateAsync(string triggersLink, FeedOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<DocumentFeedResponse`1<UserDefinedFunction>> ReadUserDefinedFunctionFeedAsync(string userDefinedFunctionsLink, FeedOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadUserDefinedFunctionFeedPrivateAsync>d__273")]
private Task`1<DocumentFeedResponse`1<UserDefinedFunction>> ReadUserDefinedFunctionFeedPrivateAsync(string userDefinedFunctionsLink, FeedOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<DocumentFeedResponse`1<object>> ReadDocumentFeedAsync(string documentsLink, FeedOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadDocumentFeedInlineAsync>d__275")]
private Task`1<DocumentFeedResponse`1<object>> ReadDocumentFeedInlineAsync(string documentsLink, FeedOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<DocumentFeedResponse`1<Conflict>> ReadConflictFeedAsync(string conflictsLink, FeedOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadConflictFeedInlineAsync>d__277")]
private Task`1<DocumentFeedResponse`1<Conflict>> ReadConflictFeedInlineAsync(string conflictsLink, FeedOptions options);
    public sealed virtual Task`1<DocumentFeedResponse`1<Offer>> ReadOffersFeedAsync(FeedOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadOfferFeedPrivateAsync>d__279")]
private Task`1<DocumentFeedResponse`1<Offer>> ReadOfferFeedPrivateAsync(FeedOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    internal Task`1<DocumentFeedResponse`1<Schema>> ReadSchemaFeedAsync(string documentCollectionSchemaLink, FeedOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadSchemaFeedPrivateAsync>d__281")]
private Task`1<DocumentFeedResponse`1<Schema>> ReadSchemaFeedPrivateAsync(string documentCollectionSchemaLink, FeedOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    internal Task`1<DocumentFeedResponse`1<UserDefinedType>> ReadUserDefinedTypeFeedAsync(string userDefinedTypesLink, FeedOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadUserDefinedTypeFeedPrivateAsync>d__283")]
private Task`1<DocumentFeedResponse`1<UserDefinedType>> ReadUserDefinedTypeFeedPrivateAsync(string userDefinedTypesLink, FeedOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    internal Task`1<DocumentFeedResponse`1<Snapshot>> ReadSnapshotFeedAsync(FeedOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ReadSnapshotFeedPrivateAsync>d__285")]
private Task`1<DocumentFeedResponse`1<Snapshot>> ReadSnapshotFeedPrivateAsync(FeedOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<StoredProcedureResponse`1<TValue>> ExecuteStoredProcedureAsync(string storedProcedureLink, Object[] procedureParams);
    public sealed virtual Task`1<StoredProcedureResponse`1<TValue>> ExecuteStoredProcedureAsync(string storedProcedureLink, RequestOptions options, Object[] procedureParams);
    public sealed virtual Task`1<StoredProcedureResponse`1<TValue>> ExecuteStoredProcedureAsync(string storedProcedureLink, RequestOptions options, CancellationToken cancellationToken, Object[] procedureParams);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<ExecuteStoredProcedurePrivateAsync>d__289`1")]
private Task`1<StoredProcedureResponse`1<TValue>> ExecuteStoredProcedurePrivateAsync(string storedProcedureLink, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken, Object[] procedureParams);
    internal Task`1<ResourceResponse`1<Database>> UpsertDatabaseAsync(Database database, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<UpsertDatabasePrivateAsync>d__291")]
private Task`1<ResourceResponse`1<Database>> UpsertDatabasePrivateAsync(Database database, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<Document>> UpsertDocumentAsync(string documentsFeedOrDatabaseLink, object document, RequestOptions options, bool disableAutomaticIdGeneration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<UpsertDocumentInlineAsync>d__293")]
private Task`1<ResourceResponse`1<Document>> UpsertDocumentInlineAsync(string documentsFeedOrDatabaseLink, object document, RequestOptions options, bool disableAutomaticIdGeneration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<UpsertDocumentPrivateAsync>d__294")]
private Task`1<ResourceResponse`1<Document>> UpsertDocumentPrivateAsync(string documentCollectionLink, object document, RequestOptions options, bool disableAutomaticIdGeneration, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    internal Task`1<ResourceResponse`1<DocumentCollection>> UpsertDocumentCollectionAsync(string databaseLink, DocumentCollection documentCollection, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<StoredProcedure>> UpsertStoredProcedureAsync(string collectionLink, StoredProcedure storedProcedure, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<UpsertStoredProcedurePrivateAsync>d__297")]
private Task`1<ResourceResponse`1<StoredProcedure>> UpsertStoredProcedurePrivateAsync(string collectionLink, StoredProcedure storedProcedure, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<Trigger>> UpsertTriggerAsync(string collectionLink, Trigger trigger, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<UpsertTriggerPrivateAsync>d__299")]
private Task`1<ResourceResponse`1<Trigger>> UpsertTriggerPrivateAsync(string collectionLink, Trigger trigger, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    public sealed virtual Task`1<ResourceResponse`1<UserDefinedFunction>> UpsertUserDefinedFunctionAsync(string collectionLink, UserDefinedFunction function, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<UpsertUserDefinedFunctionPrivateAsync>d__301")]
private Task`1<ResourceResponse`1<UserDefinedFunction>> UpsertUserDefinedFunctionPrivateAsync(string collectionLink, UserDefinedFunction function, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    internal Task`1<ResourceResponse`1<UserDefinedType>> UpsertUserDefinedTypeAsync(string databaseLink, UserDefinedType userDefinedType, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<UpsertUserDefinedTypePrivateAsync>d__303")]
private Task`1<ResourceResponse`1<UserDefinedType>> UpsertUserDefinedTypePrivateAsync(string databaseLink, UserDefinedType userDefinedType, RequestOptions options, IDocumentClientRetryPolicy retryPolicyInstance);
    private sealed virtual override ValueTask`1<ValueTuple`2<string, string>> Microsoft.Azure.Documents.IAuthorizationTokenProvider.GetUserAuthorizationAsync(string resourceAddress, string resourceType, string requestVerb, INameValueCollection headers, AuthorizationTokenType tokenType);
    private sealed virtual override ValueTask`1<string> Microsoft.Azure.Cosmos.ICosmosAuthorizationTokenProvider.GetUserAuthorizationTokenAsync(string resourceAddress, string resourceType, string requestVerb, INameValueCollection headers, AuthorizationTokenType tokenType, ITrace trace);
    private sealed virtual override Task Microsoft.Azure.Documents.IAuthorizationTokenProvider.AddSystemAuthorizationHeaderAsync(DocumentServiceRequest request, string federationId, string verb, string resourceId);
    internal Task`1<DocumentServiceResponse> CreateAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicy, CancellationToken cancellationToken);
    internal Task`1<DocumentServiceResponse> UpdateAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicy, CancellationToken cancellationToken);
    internal Task`1<DocumentServiceResponse> ReadAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicy, CancellationToken cancellationToken);
    internal Task`1<DocumentServiceResponse> ReadFeedAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicy, CancellationToken cancellationToken);
    internal Task`1<DocumentServiceResponse> DeleteAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicy, CancellationToken cancellationToken);
    internal Task`1<DocumentServiceResponse> ExecuteProcedureAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicy, CancellationToken cancellationToken);
    internal Task`1<DocumentServiceResponse> ExecuteQueryAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicy, CancellationToken cancellationToken);
    internal Task`1<DocumentServiceResponse> UpsertAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicy, CancellationToken cancellationToken);
    public sealed virtual Task`1<AccountProperties> GetDatabaseAccountAsync();
    private sealed virtual override Task`1<AccountProperties> Microsoft.Azure.Cosmos.IDocumentClientInternal.GetDatabaseAccountInternalAsync(Uri serviceEndpoint, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<GetDatabaseAccountPrivateAsync>d__317")]
private Task`1<AccountProperties> GetDatabaseAccountPrivateAsync(Uri serviceEndpoint, CancellationToken cancellationToken);
    internal IStoreModel GetStoreProxy(DocumentServiceRequest request);
    private string GetLinkForRouting(Resource resource);
    internal void EnsureValidOverwrite(ConsistencyLevel desiredConsistencyLevel, Nullable`1<OperationType> operationType, Nullable`1<ResourceType> resourceType);
    private bool IsValidConsistency(ConsistencyLevel backendConsistency, ConsistencyLevel desiredConsistency, Nullable`1<OperationType> operationType, Nullable`1<ResourceType> resourceType);
    private void InitializeDirectConnectivity(IStoreClientFactory storeClientFactory);
    private void CreateStoreModel(bool subscribeRntbdStatus);
    private void DisableRntbdChannel();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<InitializeGatewayConfigurationReaderAsync>d__325")]
private Task InitializeGatewayConfigurationReaderAsync();
    internal void CaptureSessionToken(DocumentServiceRequest request, DocumentServiceResponse response);
    internal DocumentServiceRequest CreateDocumentServiceRequest(OperationType operationType, string resourceLink, ResourceType resourceType, INameValueCollection headers);
    internal void ValidateResource(Resource resource);
    internal void ValidateResource(string resourceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<AddPartitionKeyInformationAsync>d__330")]
private Task AddPartitionKeyInformationAsync(DocumentServiceRequest request, Document document, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<AddPartitionKeyInformationAsync>d__331")]
internal Task AddPartitionKeyInformationAsync(DocumentServiceRequest request, RequestOptions options);
    private JsonSerializerSettings GetSerializerSettingsForRequest(RequestOptions requestOptions);
    private INameValueCollection GetRequestHeaders(RequestOptions options, OperationType operationType, ResourceType resourceType);
    public sealed virtual Task`1<ResourceResponse`1<Document>> CreateDocumentAsync(Uri documentCollectionUri, object document, RequestOptions options, bool disableAutomaticIdGeneration, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResourceResponse`1<DocumentCollection>> CreateDocumentCollectionAsync(Uri databaseUri, DocumentCollection documentCollection, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<DocumentCollection>> CreateDocumentCollectionIfNotExistsAsync(Uri databaseUri, DocumentCollection documentCollection, RequestOptions options);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.DocumentClient/<CreateDocumentCollectionIfNotExistsPrivateAsync>d__339")]
private Task`1<ResourceResponse`1<DocumentCollection>> CreateDocumentCollectionIfNotExistsPrivateAsync(Uri databaseUri, DocumentCollection documentCollection, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<StoredProcedure>> CreateStoredProcedureAsync(Uri documentCollectionUri, StoredProcedure storedProcedure, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<Trigger>> CreateTriggerAsync(Uri documentCollectionUri, Trigger trigger, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<UserDefinedFunction>> CreateUserDefinedFunctionAsync(Uri documentCollectionUri, UserDefinedFunction function, RequestOptions options);
    internal Task`1<ResourceResponse`1<UserDefinedType>> CreateUserDefinedTypeAsync(Uri databaseUri, UserDefinedType userDefinedType, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<Document>> UpsertDocumentAsync(Uri documentCollectionUri, object document, RequestOptions options, bool disableAutomaticIdGeneration, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResourceResponse`1<StoredProcedure>> UpsertStoredProcedureAsync(Uri documentCollectionUri, StoredProcedure storedProcedure, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<Trigger>> UpsertTriggerAsync(Uri documentCollectionUri, Trigger trigger, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<UserDefinedFunction>> UpsertUserDefinedFunctionAsync(Uri documentCollectionUri, UserDefinedFunction function, RequestOptions options);
    internal Task`1<ResourceResponse`1<UserDefinedType>> UpsertUserDefinedTypeAsync(Uri databaseUri, UserDefinedType userDefinedType, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<Database>> DeleteDatabaseAsync(Uri databaseUri, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<Document>> DeleteDocumentAsync(Uri documentUri, RequestOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResourceResponse`1<DocumentCollection>> DeleteDocumentCollectionAsync(Uri documentCollectionUri, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<StoredProcedure>> DeleteStoredProcedureAsync(Uri storedProcedureUri, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<Trigger>> DeleteTriggerAsync(Uri triggerUri, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<UserDefinedFunction>> DeleteUserDefinedFunctionAsync(Uri functionUri, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<Conflict>> DeleteConflictAsync(Uri conflictUri, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<Document>> ReplaceDocumentAsync(Uri documentUri, object document, RequestOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResourceResponse`1<DocumentCollection>> ReplaceDocumentCollectionAsync(Uri documentCollectionUri, DocumentCollection documentCollection, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<StoredProcedure>> ReplaceStoredProcedureAsync(Uri storedProcedureUri, StoredProcedure storedProcedure, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<Trigger>> ReplaceTriggerAsync(Uri triggerUri, Trigger trigger, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<UserDefinedFunction>> ReplaceUserDefinedFunctionAsync(Uri userDefinedFunctionUri, UserDefinedFunction function, RequestOptions options);
    internal Task`1<ResourceResponse`1<UserDefinedType>> ReplaceUserDefinedTypeAsync(Uri userDefinedTypeUri, UserDefinedType userDefinedType, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<Database>> ReadDatabaseAsync(Uri databaseUri, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<Document>> ReadDocumentAsync(Uri documentUri, RequestOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<DocumentResponse`1<T>> ReadDocumentAsync(Uri documentUri, RequestOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResourceResponse`1<DocumentCollection>> ReadDocumentCollectionAsync(Uri documentCollectionUri, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<StoredProcedure>> ReadStoredProcedureAsync(Uri storedProcedureUri, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<Trigger>> ReadTriggerAsync(Uri triggerUri, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<UserDefinedFunction>> ReadUserDefinedFunctionAsync(Uri functionUri, RequestOptions options);
    public sealed virtual Task`1<ResourceResponse`1<Conflict>> ReadConflictAsync(Uri conflictUri, RequestOptions options);
    internal Task`1<ResourceResponse`1<Schema>> ReadSchemaAsync(Uri schemaUri, RequestOptions options);
    internal Task`1<ResourceResponse`1<UserDefinedType>> ReadUserDefinedTypeAsync(Uri userDefinedTypeUri, RequestOptions options);
    internal Task`1<ResourceResponse`1<Snapshot>> ReadSnapshotAsync(Uri snapshotUri, RequestOptions options);
    public sealed virtual Task`1<DocumentFeedResponse`1<DocumentCollection>> ReadDocumentCollectionFeedAsync(Uri documentCollectionsUri, FeedOptions options);
    public sealed virtual Task`1<DocumentFeedResponse`1<StoredProcedure>> ReadStoredProcedureFeedAsync(Uri storedProceduresUri, FeedOptions options);
    public sealed virtual Task`1<DocumentFeedResponse`1<Trigger>> ReadTriggerFeedAsync(Uri triggersUri, FeedOptions options);
    public sealed virtual Task`1<DocumentFeedResponse`1<UserDefinedFunction>> ReadUserDefinedFunctionFeedAsync(Uri userDefinedFunctionsUri, FeedOptions options);
    public sealed virtual Task`1<DocumentFeedResponse`1<object>> ReadDocumentFeedAsync(Uri documentsUri, FeedOptions options, CancellationToken cancellationToken);
    public sealed virtual Task`1<DocumentFeedResponse`1<Conflict>> ReadConflictFeedAsync(Uri conflictsUri, FeedOptions options);
    public sealed virtual Task`1<DocumentFeedResponse`1<PartitionKeyRange>> ReadPartitionKeyRangeFeedAsync(Uri partitionKeyRangesOrCollectionUri, FeedOptions options);
    internal Task`1<DocumentFeedResponse`1<UserDefinedType>> ReadUserDefinedTypeFeedAsync(Uri userDefinedTypesUri, FeedOptions options);
    public sealed virtual Task`1<StoredProcedureResponse`1<TValue>> ExecuteStoredProcedureAsync(Uri storedProcedureUri, Object[] procedureParams);
    public sealed virtual Task`1<StoredProcedureResponse`1<TValue>> ExecuteStoredProcedureAsync(Uri storedProcedureUri, RequestOptions options, Object[] procedureParams);
    public sealed virtual Task`1<StoredProcedureResponse`1<TValue>> ExecuteStoredProcedureAsync(Uri storedProcedureUri, RequestOptions options, CancellationToken cancellationToken, Object[] procedureParams);
    internal Task`1<DocumentFeedResponse`1<Schema>> ReadSchemaFeedAsync(Uri schemasUri, FeedOptions options);
    public sealed virtual IOrderedQueryable`1<DocumentCollection> CreateDocumentCollectionQuery(Uri databaseUri, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateDocumentCollectionQuery(Uri databaseUri, string sqlExpression, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateDocumentCollectionQuery(Uri databaseUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    internal IDocumentQuery`1<DocumentCollection> CreateDocumentCollectionChangeFeedQuery(Uri databaseUri, ChangeFeedOptions feedOptions);
    public sealed virtual IOrderedQueryable`1<StoredProcedure> CreateStoredProcedureQuery(Uri storedProceduresUri, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateStoredProcedureQuery(Uri storedProceduresUri, string sqlExpression, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateStoredProcedureQuery(Uri storedProceduresUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public sealed virtual IOrderedQueryable`1<Trigger> CreateTriggerQuery(Uri triggersUri, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateTriggerQuery(Uri triggersUri, string sqlExpression, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateTriggerQuery(Uri triggersUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public sealed virtual IOrderedQueryable`1<UserDefinedFunction> CreateUserDefinedFunctionQuery(Uri userDefinedFunctionsUri, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateUserDefinedFunctionQuery(Uri userDefinedFunctionsUri, string sqlExpression, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateUserDefinedFunctionQuery(Uri userDefinedFunctionsUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public sealed virtual IOrderedQueryable`1<Conflict> CreateConflictQuery(Uri conflictsUri, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateConflictQuery(Uri conflictsUri, string sqlExpression, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateConflictQuery(Uri conflictsUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public sealed virtual IOrderedQueryable`1<T> CreateDocumentQuery(Uri documentCollectionUri, FeedOptions feedOptions);
    [ObsoleteAttribute("Support for IPartitionResolver based method overloads is now obsolete. Please use the override that does not take a partitionKey parameter.")]
public IOrderedQueryable`1<T> CreateDocumentQuery(Uri documentCollectionOrDatabaseUri, FeedOptions feedOptions, object partitionKey);
    public sealed virtual IQueryable`1<T> CreateDocumentQuery(Uri documentCollectionOrDatabaseUri, string sqlExpression, FeedOptions feedOptions);
    [ObsoleteAttribute("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")]
public IQueryable`1<T> CreateDocumentQuery(Uri documentCollectionOrDatabaseUri, string sqlExpression, FeedOptions feedOptions, object partitionKey);
    public sealed virtual IQueryable`1<T> CreateDocumentQuery(Uri documentCollectionOrDatabaseUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    [ObsoleteAttribute("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")]
public IQueryable`1<T> CreateDocumentQuery(Uri documentCollectionOrDatabaseUri, SqlQuerySpec querySpec, FeedOptions feedOptions, object partitionKey);
    public sealed virtual IOrderedQueryable`1<Document> CreateDocumentQuery(Uri documentCollectionOrDatabaseUri, FeedOptions feedOptions);
    [ObsoleteAttribute("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")]
public IOrderedQueryable`1<Document> CreateDocumentQuery(Uri documentCollectionOrDatabaseUri, FeedOptions feedOptions, object partitionKey);
    public sealed virtual IQueryable`1<object> CreateDocumentQuery(Uri documentCollectionOrDatabaseUri, string sqlExpression, FeedOptions feedOptions);
    [ObsoleteAttribute("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")]
public IQueryable`1<object> CreateDocumentQuery(Uri documentCollectionOrDatabaseUri, string sqlExpression, FeedOptions feedOptions, object partitionKey);
    public sealed virtual IQueryable`1<object> CreateDocumentQuery(Uri documentCollectionOrDatabaseUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    [ObsoleteAttribute("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")]
public IQueryable`1<object> CreateDocumentQuery(Uri documentCollectionOrDatabaseUri, SqlQuerySpec querySpec, FeedOptions feedOptions, object partitionKey);
    public sealed virtual IDocumentQuery`1<Document> CreateDocumentChangeFeedQuery(Uri collectionLink, ChangeFeedOptions feedOptions);
    internal IOrderedQueryable`1<UserDefinedType> CreateUserDefinedTypeQuery(Uri userDefinedTypesUri, FeedOptions feedOptions);
    internal IQueryable`1<object> CreateUserDefinedTypeQuery(Uri userDefinedTypesUri, string sqlExpression, FeedOptions feedOptions);
    internal IQueryable`1<object> CreateUserDefinedTypeQuery(Uri userDefinedTypesUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    internal IDocumentQuery`1<UserDefinedType> CreateUserDefinedTypeChangeFeedQuery(Uri databaseUri, ChangeFeedOptions feedOptions);
    public sealed virtual IOrderedQueryable`1<Database> CreateDatabaseQuery(FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateDatabaseQuery(string sqlExpression, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateDatabaseQuery(SqlQuerySpec querySpec, FeedOptions feedOptions);
    internal IDocumentQuery`1<Database> CreateDatabaseChangeFeedQuery(ChangeFeedOptions feedOptions);
    public sealed virtual IOrderedQueryable`1<DocumentCollection> CreateDocumentCollectionQuery(string databaseLink, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateDocumentCollectionQuery(string databaseLink, string sqlExpression, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateDocumentCollectionQuery(string databaseLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    internal IDocumentQuery`1<DocumentCollection> CreateDocumentCollectionChangeFeedQuery(string databaseLink, ChangeFeedOptions feedOptions);
    public sealed virtual IOrderedQueryable`1<StoredProcedure> CreateStoredProcedureQuery(string collectionLink, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateStoredProcedureQuery(string collectionLink, string sqlExpression, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateStoredProcedureQuery(string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public sealed virtual IOrderedQueryable`1<Trigger> CreateTriggerQuery(string collectionLink, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateTriggerQuery(string collectionLink, string sqlExpression, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateTriggerQuery(string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public sealed virtual IOrderedQueryable`1<UserDefinedFunction> CreateUserDefinedFunctionQuery(string collectionLink, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateUserDefinedFunctionQuery(string collectionLink, string sqlExpression, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateUserDefinedFunctionQuery(string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public sealed virtual IOrderedQueryable`1<Conflict> CreateConflictQuery(string collectionLink, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateConflictQuery(string collectionLink, string sqlExpression, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateConflictQuery(string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public sealed virtual IOrderedQueryable`1<T> CreateDocumentQuery(string collectionLink, FeedOptions feedOptions);
    [ObsoleteAttribute("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")]
public IOrderedQueryable`1<T> CreateDocumentQuery(string documentsFeedOrDatabaseLink, FeedOptions feedOptions, object partitionKey);
    public sealed virtual IQueryable`1<T> CreateDocumentQuery(string collectionLink, string sqlExpression, FeedOptions feedOptions);
    [ObsoleteAttribute("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")]
public IQueryable`1<T> CreateDocumentQuery(string collectionLink, string sqlExpression, FeedOptions feedOptions, object partitionKey);
    public sealed virtual IQueryable`1<T> CreateDocumentQuery(string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    [ObsoleteAttribute("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")]
public IQueryable`1<T> CreateDocumentQuery(string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions, object partitionKey);
    public sealed virtual IOrderedQueryable`1<Document> CreateDocumentQuery(string collectionLink, FeedOptions feedOptions);
    [ObsoleteAttribute("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")]
public IOrderedQueryable`1<Document> CreateDocumentQuery(string collectionLink, FeedOptions feedOptions, object partitionKey);
    public sealed virtual IQueryable`1<object> CreateDocumentQuery(string collectionLink, string sqlExpression, FeedOptions feedOptions);
    [ObsoleteAttribute("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")]
public IQueryable`1<object> CreateDocumentQuery(string collectionLink, string sqlExpression, FeedOptions feedOptions, object partitionKey);
    public sealed virtual IQueryable`1<object> CreateDocumentQuery(string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    [ObsoleteAttribute("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")]
public IQueryable`1<object> CreateDocumentQuery(string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions, object partitionKey);
    public sealed virtual IDocumentQuery`1<Document> CreateDocumentChangeFeedQuery(string collectionLink, ChangeFeedOptions feedOptions);
    public sealed virtual IOrderedQueryable`1<Offer> CreateOfferQuery(FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateOfferQuery(string sqlExpression, FeedOptions feedOptions);
    public sealed virtual IQueryable`1<object> CreateOfferQuery(SqlQuerySpec querySpec, FeedOptions feedOptions);
    internal IOrderedQueryable`1<UserDefinedType> CreateUserDefinedTypeQuery(string userDefinedTypesLink, FeedOptions feedOptions);
    internal IQueryable`1<object> CreateUserDefinedTypeQuery(string userDefinedTypesLink, string sqlExpression, FeedOptions feedOptions);
    internal IQueryable`1<object> CreateUserDefinedTypeQuery(string userDefinedTypesLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    internal IDocumentQuery`1<UserDefinedType> CreateUserDefinedTypeChangeFeedQuery(string databaseLink, ChangeFeedOptions feedOptions);
    private static void ValidateChangeFeedOptionsForNotPartitionedResource(ChangeFeedOptions feedOptions);
    [CompilerGeneratedAttribute]
private Task <get_ConsistencyLevel>b__146_0();
    [CompilerGeneratedAttribute]
private Task`1<AccountProperties> <GetDatabaseAccountAsync>b__315_0();
}
[EventSourceAttribute]
internal class Microsoft.Azure.Cosmos.DocumentClientEventSource : EventSource {
    private static Lazy`1<DocumentClientEventSource> documentClientEventSourceInstance;
    public static DocumentClientEventSource Instance { get; }
    private static DocumentClientEventSource();
    public static DocumentClientEventSource get_Instance();
    [NonEventAttribute]
private void WriteEventCoreWithActivityId(Guid activityId, int eventId, int eventDataCount, EventData* dataDesc);
    [EventAttribute("1")]
private void Request(Guid activityId, Guid localId, string uri, string resourceType, string accept, string authorization, string consistencyLevel, string contentType, string contentEncoding, string contentLength, string contentLocation, string continuation, string emitVerboseTracesInQuery, string enableScanInQuery, string eTag, string httpDate, string ifMatch, string ifNoneMatch, string indexingDirective, string keepAlive, string offerType, string pageSize, string preTriggerExclude, string preTriggerInclude, string postTriggerExclude, string postTriggerInclude, string profileRequest, string resourceTokenExpiry, string sessionToken, string setCookie, string slug, string userAgent, string xDate);
    [NonEventAttribute]
public sealed virtual void Request(Guid activityId, Guid localId, string uri, string resourceType, HttpRequestHeaders requestHeaders);
    [EventAttribute("2")]
private void Response(Guid activityId, Guid localId, short statusCode, double milliseconds, string contentType, string contentEncoding, string contentLength, string contentLocation, string currentMediaStorageUsageInMB, string currentResourceQuotaUsage, string databaseAccountConsumedDocumentStorageInMB, string databaseAccountProvisionedDocumentStorageInMB, string databaseAccountReservedDocumentStorageInMB, string gatewayVersion, string indexingDirective, string itemCount, string lastStateChangeUtc, string maxMediaStorageUsageInMB, string maxResourceQuota, string newResourceId, string ownerFullName, string ownerId, string requestCharge, string requestValidationFailure, string retryAfter, string retryAfterInMilliseconds, string serverVersion, string schemaVersion, string sessionToken, string version);
    [NonEventAttribute]
public virtual void Response(Guid activityId, Guid localId, short statusCode, double milliseconds, HttpResponseHeaders responseHeaders);
}
internal class Microsoft.Azure.Cosmos.DocumentCollectionRestoreStatus : object {
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    public string State { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
internal void set_State(string value);
}
internal class Microsoft.Azure.Cosmos.DocumentFeedResponse`1 : object {
    internal string disallowContinuationTokenMessage;
    private IEnumerable`1<T> inner;
    private Dictionary`2<string, long> usageHeaders;
    private Dictionary`2<string, long> quotaHeaders;
    private bool useETagAsContinuation;
    private IReadOnlyDictionary`2<string, QueryMetrics> queryMetrics;
    private INameValueCollection responseHeaders;
    [CompilerGeneratedAttribute]
private IClientSideRequestStatistics <RequestStatistics>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ResponseLengthBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    internal IClientSideRequestStatistics RequestStatistics { get; private set; }
    internal long ResponseLengthBytes { get; private set; }
    public long DatabaseQuota { get; }
    public long DatabaseUsage { get; }
    public long CollectionQuota { get; }
    public long CollectionUsage { get; }
    public long UserQuota { get; }
    public long UserUsage { get; }
    public long PermissionQuota { get; }
    public long PermissionUsage { get; }
    public long CollectionSizeQuota { get; }
    public long CollectionSizeUsage { get; }
    public long StoredProceduresQuota { get; }
    public long StoredProceduresUsage { get; }
    public long TriggersQuota { get; }
    public long TriggersUsage { get; }
    public long UserDefinedFunctionsQuota { get; }
    public long UserDefinedFunctionsUsage { get; }
    public int Count { get; private set; }
    public string MaxResourceQuota { get; }
    public string CurrentResourceQuotaUsage { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ResponseContinuation { get; internal set; }
    public string SessionToken { get; }
    public string ContentLocation { get; }
    public string ETag { get; }
    internal INameValueCollection Headers { get; internal set; }
    public NameValueCollection ResponseHeaders { get; }
    public IReadOnlyDictionary`2<string, QueryMetrics> QueryMetrics { get; }
    internal string InternalResponseContinuation { get; }
    public string RequestDiagnosticsString { get; }
    internal bool UseETagAsContinuation { get; }
    internal string DisallowContinuationTokenMessage { get; }
    public DocumentFeedResponse`1(IEnumerable`1<T> result);
    internal DocumentFeedResponse`1(IEnumerable`1<T> result, int count, INameValueCollection responseHeaders, bool useETagAsContinuation, IReadOnlyDictionary`2<string, QueryMetrics> queryMetrics, IClientSideRequestStatistics requestStats, string disallowContinuationTokenMessage, long responseLengthBytes);
    internal DocumentFeedResponse`1(IEnumerable`1<T> result, int count, INameValueCollection responseHeaders, long responseLengthBytes);
    internal DocumentFeedResponse`1(IEnumerable`1<T> result, int count, INameValueCollection responseHeaders, IClientSideRequestStatistics requestStats, long responseLengthBytes);
    [CompilerGeneratedAttribute]
internal IClientSideRequestStatistics get_RequestStatistics();
    [CompilerGeneratedAttribute]
private void set_RequestStatistics(IClientSideRequestStatistics value);
    [CompilerGeneratedAttribute]
internal long get_ResponseLengthBytes();
    [CompilerGeneratedAttribute]
private void set_ResponseLengthBytes(long value);
    public sealed virtual long get_DatabaseQuota();
    public sealed virtual long get_DatabaseUsage();
    public sealed virtual long get_CollectionQuota();
    public sealed virtual long get_CollectionUsage();
    public sealed virtual long get_UserQuota();
    public sealed virtual long get_UserUsage();
    public sealed virtual long get_PermissionQuota();
    public sealed virtual long get_PermissionUsage();
    public sealed virtual long get_CollectionSizeQuota();
    public sealed virtual long get_CollectionSizeUsage();
    public sealed virtual long get_StoredProceduresQuota();
    public sealed virtual long get_StoredProceduresUsage();
    public sealed virtual long get_TriggersQuota();
    public sealed virtual long get_TriggersUsage();
    public sealed virtual long get_UserDefinedFunctionsQuota();
    public sealed virtual long get_UserDefinedFunctionsUsage();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual string get_MaxResourceQuota();
    public sealed virtual string get_CurrentResourceQuotaUsage();
    public sealed virtual double get_RequestCharge();
    public sealed virtual string get_ActivityId();
    public sealed virtual string get_ResponseContinuation();
    internal void set_ResponseContinuation(string value);
    public sealed virtual string get_SessionToken();
    public sealed virtual string get_ContentLocation();
    public string get_ETag();
    internal INameValueCollection get_Headers();
    internal void set_Headers(INameValueCollection value);
    public sealed virtual NameValueCollection get_ResponseHeaders();
    public IReadOnlyDictionary`2<string, QueryMetrics> get_QueryMetrics();
    internal string get_InternalResponseContinuation();
    public string get_RequestDiagnosticsString();
    internal bool get_UseETagAsContinuation();
    internal string get_DisallowContinuationTokenMessage();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
    private long GetCurrentQuotaHeader(string headerName);
    private long GetMaxQuotaHeader(string headerName);
    private void PopulateQuotaHeader(string headerMaxQuota, string headerCurrentUsage);
}
internal class Microsoft.Azure.Cosmos.Embedding : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private VectorDataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Dimensions>k__BackingField;
    [CompilerGeneratedAttribute]
private DistanceFunction <DistanceFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public VectorDataType DataType { get; public set; }
    [JsonPropertyAttribute]
public ulong Dimensions { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public DistanceFunction DistanceFunction { get; public set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public VectorDataType get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(VectorDataType value);
    [CompilerGeneratedAttribute]
public ulong get_Dimensions();
    [CompilerGeneratedAttribute]
public void set_Dimensions(ulong value);
    [CompilerGeneratedAttribute]
public DistanceFunction get_DistanceFunction();
    [CompilerGeneratedAttribute]
public void set_DistanceFunction(DistanceFunction value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
    public void ValidateEmbeddingPath();
    public sealed virtual bool Equals(Embedding that);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.EncodingExtensions : object {
    [ExtensionAttribute]
public static string GetString(Encoding encoding, ReadOnlySpan`1<byte> src);
    [ExtensionAttribute]
public static int GetChars(Encoding encoding, ReadOnlySpan`1<byte> src, Span`1<char> dest);
    [ExtensionAttribute]
public static int GetBytes(Encoding encoding, string src, Span`1<byte> dest);
    [ExtensionAttribute]
public static int GetBytes(Encoding encoding, ReadOnlySpan`1<char> src, Span`1<byte> dest);
    [ExtensionAttribute]
public static int GetByteCount(Encoding encoding, ReadOnlySpan`1<char> src);
}
public class Microsoft.Azure.Cosmos.EncryptionKeyWrapMetadata : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Type { get; private set; }
    [JsonPropertyAttribute]
public string Name { get; private set; }
    [JsonPropertyAttribute]
public string Value { get; private set; }
    [JsonPropertyAttribute]
public string Algorithm { get; private set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    public EncryptionKeyWrapMetadata(string type, string name, string value, string algorithm);
    public EncryptionKeyWrapMetadata(EncryptionKeyWrapMetadata source);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
private void set_Algorithm(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(EncryptionKeyWrapMetadata other);
}
internal class Microsoft.Azure.Cosmos.EnvironmentInformation : object {
    private static string clientSDKVersion;
    private static string framework;
    private static string architecture;
    private static string os;
    public string ClientVersion { get; }
    public string OperatingSystem { get; }
    public string RuntimeFramework { get; }
    public string ProcessArchitecture { get; }
    private static EnvironmentInformation();
    public string get_ClientVersion();
    public string get_OperatingSystem();
    public string get_RuntimeFramework();
    public string get_ProcessArchitecture();
}
public class Microsoft.Azure.Cosmos.ExcludedPath : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
internal static class Microsoft.Azure.Cosmos.ExecUtils : object {
    internal static Task`1<T> ProcessResourceOperationAsync(CosmosClient client, string resourceUri, ResourceType resourceType, OperationType operationType, RequestOptions requestOptions, Action`1<RequestMessage> requestEnricher, Func`2<ResponseMessage, T> responseCreator, ITrace trace, CancellationToken cancellationToken);
    internal static Task`1<T> ProcessResourceOperationAsync(CosmosClient client, string resourceUri, ResourceType resourceType, OperationType operationType, RequestOptions requestOptions, Func`2<ResponseMessage, T> responseCreator, ITrace trace, CancellationToken cancellationToken);
    internal static Task`1<T> ProcessResourceOperationAsync(CosmosClient client, string resourceUri, ResourceType resourceType, OperationType operationType, RequestOptions requestOptions, Stream streamPayload, Func`2<ResponseMessage, T> responseCreator, ITrace trace, CancellationToken cancellationToken);
    internal static Task`1<T> ProcessResourceOperationAsync(CosmosClient client, string resourceUri, ResourceType resourceType, OperationType operationType, RequestOptions requestOptions, ContainerInternal cosmosContainerCore, FeedRange feedRange, Stream streamPayload, Action`1<RequestMessage> requestEnricher, Func`2<ResponseMessage, T> responseCreator, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ExecUtils/<ProcessResourceOperationAsync>d__4`1")]
internal static Task`1<T> ProcessResourceOperationAsync(RequestInvokerHandler requestHandler, string resourceUri, ResourceType resourceType, OperationType operationType, RequestOptions requestOptions, ContainerInternal cosmosContainerCore, FeedRange feedRange, Stream streamPayload, Action`1<RequestMessage> requestEnricher, Func`2<ResponseMessage, T> responseCreator, ITrace trace, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.Extensions : object {
    private static Char[] NewLineCharacters;
    private static Extensions();
    [ExtensionAttribute]
internal static bool IsSuccess(HttpStatusCode httpStatusCode);
    [ExtensionAttribute]
public static void Add(INameValueCollection nameValueCollection, string headerName, IEnumerable`1<string> values);
    [ExtensionAttribute]
public static T GetHeaderValue(INameValueCollection nameValueCollection, string key);
    [ExtensionAttribute]
internal static ResponseMessage ToCosmosResponseMessage(DocumentServiceResponse documentServiceResponse, RequestMessage requestMessage, RequestChargeTracker requestChargeTracker);
    [ExtensionAttribute]
internal static ResponseMessage ToCosmosResponseMessage(DocumentClientException documentClientException, RequestMessage requestMessage);
    internal static void TraceException(Exception exception);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Extensions/<UsingWaitAsync>d__7")]
[ExtensionAttribute]
public static Task`1<IDisposable> UsingWaitAsync(SemaphoreSlim semaphoreSlim, ITrace trace, CancellationToken cancellationToken);
    private static void TraceExceptionInternal(Exception exception);
}
public abstract class Microsoft.Azure.Cosmos.FeedIterator : object {
    private bool disposedValue;
    internal ContainerInternal container;
    internal string databaseName;
    public bool HasMoreResults { get; }
    public abstract virtual bool get_HasMoreResults();
    public abstract virtual Task`1<ResponseMessage> ReadNextAsync(CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public abstract class Microsoft.Azure.Cosmos.FeedIterator`1 : object {
    private bool disposedValue;
    internal ContainerInternal container;
    internal string databaseName;
    public bool HasMoreResults { get; }
    public abstract virtual bool get_HasMoreResults();
    public abstract virtual Task`1<FeedResponse`1<T>> ReadNextAsync(CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.Cosmos.FeedIteratorCore : FeedIteratorInternal {
    private CosmosClientContext clientContext;
    private string resourceLink;
    private ResourceType resourceType;
    private SqlQuerySpec querySpec;
    private bool hasMoreResultsInternal;
    [CompilerGeneratedAttribute]
private QueryRequestOptions <requestOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    public bool HasMoreResults { get; }
    public QueryRequestOptions requestOptions { get; }
    public string ContinuationToken { get; public set; }
    public FeedIteratorCore(CosmosClientContext clientContext, string resourceLink, ResourceType resourceType, QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions options, ContainerInternal container, string databaseId);
    public virtual bool get_HasMoreResults();
    [CompilerGeneratedAttribute]
public QueryRequestOptions get_requestOptions();
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
    public virtual Task`1<ResponseMessage> ReadNextAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.FeedIteratorCore/<ReadNextAsync>d__16")]
public virtual Task`1<ResponseMessage> ReadNextAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.FeedIteratorCore/<RewriteStreamAsTextAsync>d__17")]
private static Task RewriteStreamAsTextAsync(ResponseMessage responseMessage, QueryRequestOptions requestOptions, ITrace trace);
    [CompilerGeneratedAttribute]
private void <ReadNextAsync>b__16_0(RequestMessage request);
}
internal class Microsoft.Azure.Cosmos.FeedIteratorCore`1 : FeedIteratorInternal`1<T> {
    private FeedIteratorInternal feedIterator;
    private Func`2<ResponseMessage, FeedResponse`1<T>> responseCreator;
    public bool HasMoreResults { get; }
    internal FeedIteratorCore`1(FeedIteratorInternal feedIterator, Func`2<ResponseMessage, FeedResponse`1<T>> responseCreator);
    public virtual bool get_HasMoreResults();
    public virtual Task`1<FeedResponse`1<T>> ReadNextAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.FeedIteratorCore`1/<ReadNextWithRootTraceAsync>d__6")]
private Task`1<FeedResponse`1<T>> ReadNextWithRootTraceAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.FeedIteratorCore`1/<ReadNextAsync>d__7")]
public virtual Task`1<FeedResponse`1<T>> ReadNextAsync(ITrace trace, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Azure.Cosmos.FeedIteratorInlineCore : FeedIteratorInternal {
    private FeedIteratorInternal feedIteratorInternal;
    private CosmosClientContext clientContext;
    public bool HasMoreResults { get; }
    internal FeedIteratorInlineCore(FeedIterator feedIterator, CosmosClientContext clientContext);
    internal FeedIteratorInlineCore(FeedIteratorInternal feedIteratorInternal, CosmosClientContext clientContext);
    public virtual bool get_HasMoreResults();
    public virtual Task`1<ResponseMessage> ReadNextAsync(CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> ReadNextAsync(ITrace trace, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Azure.Cosmos.FeedIteratorInlineCore`1 : FeedIteratorInternal`1<T> {
    private FeedIteratorInternal`1<T> feedIteratorInternal;
    private CosmosClientContext clientContext;
    public bool HasMoreResults { get; }
    internal FeedIteratorInlineCore`1(FeedIterator`1<T> feedIterator, CosmosClientContext clientContext);
    internal FeedIteratorInlineCore`1(FeedIteratorInternal`1<T> feedIteratorInternal, CosmosClientContext clientContext);
    public virtual bool get_HasMoreResults();
    public virtual Task`1<FeedResponse`1<T>> ReadNextAsync(CancellationToken cancellationToken);
    public virtual Task`1<FeedResponse`1<T>> ReadNextAsync(ITrace trace, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
internal abstract class Microsoft.Azure.Cosmos.FeedIteratorInternal : FeedIterator {
    public static bool IsRetriableException(CosmosException cosmosException);
    public abstract virtual Task`1<ResponseMessage> ReadNextAsync(ITrace trace, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.FeedIteratorInternal`1 : FeedIterator`1<T> {
    public virtual Task`1<FeedResponse`1<T>> ReadNextAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.FeedIteratorInternal`1/<ReadNextWithRootTraceAsync>d__1")]
private Task`1<FeedResponse`1<T>> ReadNextWithRootTraceAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<FeedResponse`1<T>> ReadNextAsync(ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.FeedOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableScanInQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCrossPartitionQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableLowPrecisionOrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionKey <PartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartitionKeyRangeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxDegreeOfParallelism>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxBufferedItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EmitVerboseTracesInQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterBySchemaResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PopulateQueryMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ResponseContinuationTokenLimitInKb>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableRUPerMinuteUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <JsonSerializerSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ConsistencyLevel> <ConsistencyLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceQueryScan>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<EnumerationDirection> <EnumerationDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReadFeedKeyType> <ReadFeedKeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartEpk>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndEpk>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SupportedSerializationFormats> <SupportedSerializationFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableGroupBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MergeStaticId>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosSerializationFormatOptions <CosmosSerializationFormatOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    public Nullable`1<int> MaxItemCount { get; public set; }
    public string RequestContinuationToken { get; public set; }
    public string SessionToken { get; public set; }
    public Nullable`1<bool> EnableScanInQuery { get; public set; }
    public bool EnableCrossPartitionQuery { get; public set; }
    public Nullable`1<bool> EnableLowPrecisionOrderBy { get; public set; }
    public PartitionKey PartitionKey { get; public set; }
    public string PartitionKeyRangeId { get; public set; }
    public int MaxDegreeOfParallelism { get; public set; }
    public int MaxBufferedItemCount { get; public set; }
    public Nullable`1<bool> EmitVerboseTracesInQuery { get; public set; }
    public string FilterBySchemaResourceId { get; public set; }
    public bool PopulateQueryMetrics { get; public set; }
    public Nullable`1<int> ResponseContinuationTokenLimitInKb { get; public set; }
    public bool DisableRUPerMinuteUsage { get; public set; }
    public JsonSerializerSettings JsonSerializerSettings { get; public set; }
    public Nullable`1<ConsistencyLevel> ConsistencyLevel { get; public set; }
    public bool ForceQueryScan { get; public set; }
    public Nullable`1<EnumerationDirection> EnumerationDirection { get; public set; }
    public Nullable`1<ReadFeedKeyType> ReadFeedKeyType { get; public set; }
    public string StartId { get; public set; }
    public string EndId { get; public set; }
    public string StartEpk { get; public set; }
    public string EndEpk { get; public set; }
    public Nullable`1<SupportedSerializationFormats> SupportedSerializationFormats { get; public set; }
    public bool EnableGroupBy { get; public set; }
    public string MergeStaticId { get; public set; }
    public CosmosSerializationFormatOptions CosmosSerializationFormatOptions { get; public set; }
    public IDictionary`2<string, object> Properties { get; public set; }
    public FeedOptions(FeedOptions options);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxItemCount();
    [CompilerGeneratedAttribute]
public void set_MaxItemCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_RequestContinuationToken();
    [CompilerGeneratedAttribute]
public void set_RequestContinuationToken(string value);
    [CompilerGeneratedAttribute]
public string get_SessionToken();
    [CompilerGeneratedAttribute]
public void set_SessionToken(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableScanInQuery();
    [CompilerGeneratedAttribute]
public void set_EnableScanInQuery(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_EnableCrossPartitionQuery();
    [CompilerGeneratedAttribute]
public void set_EnableCrossPartitionQuery(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableLowPrecisionOrderBy();
    [CompilerGeneratedAttribute]
public void set_EnableLowPrecisionOrderBy(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public PartitionKey get_PartitionKey();
    [CompilerGeneratedAttribute]
public void set_PartitionKey(PartitionKey value);
    [CompilerGeneratedAttribute]
public string get_PartitionKeyRangeId();
    [CompilerGeneratedAttribute]
public void set_PartitionKeyRangeId(string value);
    [CompilerGeneratedAttribute]
public int get_MaxDegreeOfParallelism();
    [CompilerGeneratedAttribute]
public void set_MaxDegreeOfParallelism(int value);
    [CompilerGeneratedAttribute]
public int get_MaxBufferedItemCount();
    [CompilerGeneratedAttribute]
public void set_MaxBufferedItemCount(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EmitVerboseTracesInQuery();
    [CompilerGeneratedAttribute]
public void set_EmitVerboseTracesInQuery(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_FilterBySchemaResourceId();
    [CompilerGeneratedAttribute]
public void set_FilterBySchemaResourceId(string value);
    [CompilerGeneratedAttribute]
public bool get_PopulateQueryMetrics();
    [CompilerGeneratedAttribute]
public void set_PopulateQueryMetrics(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ResponseContinuationTokenLimitInKb();
    [CompilerGeneratedAttribute]
public void set_ResponseContinuationTokenLimitInKb(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_DisableRUPerMinuteUsage();
    [CompilerGeneratedAttribute]
public void set_DisableRUPerMinuteUsage(bool value);
    [CompilerGeneratedAttribute]
public JsonSerializerSettings get_JsonSerializerSettings();
    [CompilerGeneratedAttribute]
public void set_JsonSerializerSettings(JsonSerializerSettings value);
    [CompilerGeneratedAttribute]
public Nullable`1<ConsistencyLevel> get_ConsistencyLevel();
    [CompilerGeneratedAttribute]
public void set_ConsistencyLevel(Nullable`1<ConsistencyLevel> value);
    [CompilerGeneratedAttribute]
public bool get_ForceQueryScan();
    [CompilerGeneratedAttribute]
public void set_ForceQueryScan(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<EnumerationDirection> get_EnumerationDirection();
    [CompilerGeneratedAttribute]
public void set_EnumerationDirection(Nullable`1<EnumerationDirection> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReadFeedKeyType> get_ReadFeedKeyType();
    [CompilerGeneratedAttribute]
public void set_ReadFeedKeyType(Nullable`1<ReadFeedKeyType> value);
    [CompilerGeneratedAttribute]
public string get_StartId();
    [CompilerGeneratedAttribute]
public void set_StartId(string value);
    [CompilerGeneratedAttribute]
public string get_EndId();
    [CompilerGeneratedAttribute]
public void set_EndId(string value);
    [CompilerGeneratedAttribute]
public string get_StartEpk();
    [CompilerGeneratedAttribute]
public void set_StartEpk(string value);
    [CompilerGeneratedAttribute]
public string get_EndEpk();
    [CompilerGeneratedAttribute]
public void set_EndEpk(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<SupportedSerializationFormats> get_SupportedSerializationFormats();
    [CompilerGeneratedAttribute]
public void set_SupportedSerializationFormats(Nullable`1<SupportedSerializationFormats> value);
    [CompilerGeneratedAttribute]
public bool get_EnableGroupBy();
    [CompilerGeneratedAttribute]
public void set_EnableGroupBy(bool value);
    [CompilerGeneratedAttribute]
public string get_MergeStaticId();
    [CompilerGeneratedAttribute]
public void set_MergeStaticId(string value);
    [CompilerGeneratedAttribute]
public CosmosSerializationFormatOptions get_CosmosSerializationFormatOptions();
    [CompilerGeneratedAttribute]
public void set_CosmosSerializationFormatOptions(CosmosSerializationFormatOptions value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, object> value);
}
public abstract class Microsoft.Azure.Cosmos.FeedRange : object {
    public abstract virtual string ToJsonString();
    public static FeedRange FromJsonString(string toStringValue);
    public static FeedRange FromPartitionKey(PartitionKey partitionKey);
}
[JsonConverterAttribute("Microsoft.Azure.Cosmos.FeedRangeCompositeContinuationConverter")]
internal class Microsoft.Azure.Cosmos.FeedRangeCompositeContinuation : FeedRangeContinuation {
    private static ShouldRetryResult Retry;
    private static ShouldRetryResult NoRetry;
    [CompilerGeneratedAttribute]
private Queue`1<CompositeContinuationToken> <CompositeContinuationTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private CompositeContinuationToken <CurrentToken>k__BackingField;
    private string initialNoResultsRange;
    public Queue`1<CompositeContinuationToken> CompositeContinuationTokens { get; }
    public CompositeContinuationToken CurrentToken { get; private set; }
    public bool IsDone { get; }
    private FeedRangeCompositeContinuation(string containerRid, FeedRangeInternal feedRange);
    public FeedRangeCompositeContinuation(string containerRid, FeedRangeInternal feedRange, IReadOnlyList`1<Range`1<string>> ranges, string continuation);
    public FeedRangeCompositeContinuation(string containerRid, FeedRangeInternal feedRange, IReadOnlyList`1<CompositeContinuationToken> deserializedTokens);
    private static FeedRangeCompositeContinuation();
    [CompilerGeneratedAttribute]
public Queue`1<CompositeContinuationToken> get_CompositeContinuationTokens();
    [CompilerGeneratedAttribute]
public CompositeContinuationToken get_CurrentToken();
    [CompilerGeneratedAttribute]
private void set_CurrentToken(CompositeContinuationToken value);
    public virtual string GetContinuation();
    public virtual FeedRange GetFeedRange();
    public virtual string ToString();
    public virtual void ReplaceContinuation(string continuationToken);
    public virtual TryCatch ValidateContainer(string containerRid);
    public virtual bool get_IsDone();
    public virtual ShouldRetryResult HandleChangeFeedNotModified(ResponseMessage responseMessage);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.FeedRangeCompositeContinuation/<HandleSplitAsync>d__21")]
public virtual Task`1<ShouldRetryResult> HandleSplitAsync(ContainerInternal containerCore, ResponseMessage responseMessage, CancellationToken cancellationToken);
    public static bool TryParse(string toStringValue, FeedRangeContinuation& feedToken);
    private static bool TryParseAsCompositeContinuationToken(string providedContinuation, CompositeContinuationToken& compositeContinuationToken);
    private static CompositeContinuationToken CreateCompositeContinuationTokenForRange(string minInclusive, string maxExclusive, string token);
    private void MoveToNextToken();
    private void CreateChildRanges(IReadOnlyList`1<PartitionKeyRange> keyRanges);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.FeedRangeCompositeContinuation/<TryGetOverlappingRangesAsync>d__27")]
private Task`1<IReadOnlyList`1<PartitionKeyRange>> TryGetOverlappingRangesAsync(PartitionKeyRangeCache partitionKeyRangeCache, string min, string max, bool forceRefresh);
    public virtual void Accept(IFeedRangeContinuationVisitor visitor);
}
internal class Microsoft.Azure.Cosmos.FeedRangeCompositeContinuationConverter : JsonConverter {
    private static string VersionPropertyName;
    private static string RidPropertyName;
    private static string ContinuationPropertyName;
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal abstract class Microsoft.Azure.Cosmos.FeedRangeContinuation : object {
    [CompilerGeneratedAttribute]
private string <ContainerRid>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedRangeInternal <FeedRange>k__BackingField;
    public string ContainerRid { get; }
    public FeedRangeInternal FeedRange { get; }
    public bool IsDone { get; }
    public FeedRangeContinuation(string containerRid, FeedRangeInternal feedRange);
    [CompilerGeneratedAttribute]
public string get_ContainerRid();
    [CompilerGeneratedAttribute]
public virtual FeedRangeInternal get_FeedRange();
    public abstract virtual string GetContinuation();
    public abstract virtual FeedRange GetFeedRange();
    public abstract virtual void ReplaceContinuation(string continuationToken);
    public abstract virtual bool get_IsDone();
    public abstract virtual TryCatch ValidateContainer(string containerRid);
    public static bool TryParse(string toStringValue, FeedRangeContinuation& parsedToken);
    public abstract virtual ShouldRetryResult HandleChangeFeedNotModified(ResponseMessage responseMessage);
    public abstract virtual Task`1<ShouldRetryResult> HandleSplitAsync(ContainerInternal containerCore, ResponseMessage responseMessage, CancellationToken cancellationToken);
    public abstract virtual void Accept(IFeedRangeContinuationVisitor visitor);
}
internal enum Microsoft.Azure.Cosmos.FeedRangeContinuationVersion : Enum {
    public int value__;
    public static FeedRangeContinuationVersion V1;
}
internal static class Microsoft.Azure.Cosmos.FeedRangeCosmosElementSerializer : object {
    private static string TypePropertyName;
    private static string ValuePropertyName;
    private static string MinPropertyName;
    private static string MaxPropertyName;
    private static string LogicalPartitionKey;
    private static string PhysicalPartitionKeyRangeId;
    private static string EffectivePartitionKeyRange;
    public static TryCatch`1<FeedRangeInternal> MonadicCreateFromCosmosElement(CosmosElement cosmosElement);
    public static CosmosElement ToCosmosElement(FeedRangeInternal feedRange);
}
internal class Microsoft.Azure.Cosmos.FeedRangeEpk : FeedRangeInternal {
    public static FeedRangeEpk FullRange;
    [CompilerGeneratedAttribute]
private Range`1<string> <Range>k__BackingField;
    public Range`1<string> Range { get; }
    public FeedRangeEpk(Range`1<string> range);
    private static FeedRangeEpk();
    [CompilerGeneratedAttribute]
public Range`1<string> get_Range();
    internal virtual Task`1<List`1<Range`1<string>>> GetEffectiveRangesAsync(IRoutingMapProvider routingMapProvider, string containerRid, PartitionKeyDefinition partitionKeyDefinition, ITrace trace);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.FeedRangeEpk/<GetPartitionKeyRangesAsync>d__6")]
internal virtual Task`1<IEnumerable`1<string>> GetPartitionKeyRangesAsync(IRoutingMapProvider routingMapProvider, string containerRid, PartitionKeyDefinition partitionKeyDefinition, CancellationToken cancellationToken, ITrace trace);
    internal virtual void Accept(IFeedRangeVisitor visitor);
    internal virtual void Accept(IFeedRangeVisitor`1<TInput> visitor, TInput input);
    internal virtual TOutput Accept(IFeedRangeVisitor`2<TInput, TOutput> visitor, TInput input);
    internal virtual Task`1<TResult> AcceptAsync(IFeedRangeAsyncVisitor`1<TResult> visitor, CancellationToken cancellationToken);
    internal virtual Task`1<TResult> AcceptAsync(IFeedRangeAsyncVisitor`2<TResult, TArg> visitor, TArg argument, CancellationToken cancellationToken);
    public virtual string ToString();
    internal virtual TResult Accept(IFeedRangeTransformer`1<TResult> transformer);
    public virtual bool Equals(object obj);
    public bool Equals(FeedRangeEpk other);
    public virtual int GetHashCode();
}
[JsonConverterAttribute("Microsoft.Azure.Cosmos.FeedRangeInternalConverter")]
internal abstract class Microsoft.Azure.Cosmos.FeedRangeInternal : FeedRange {
    internal abstract virtual Task`1<List`1<Range`1<string>>> GetEffectiveRangesAsync(IRoutingMapProvider routingMapProvider, string containerRid, PartitionKeyDefinition partitionKeyDefinition, ITrace trace);
    internal abstract virtual Task`1<IEnumerable`1<string>> GetPartitionKeyRangesAsync(IRoutingMapProvider routingMapProvider, string containerRid, PartitionKeyDefinition partitionKeyDefinition, CancellationToken cancellationToken, ITrace trace);
    internal abstract virtual void Accept(IFeedRangeVisitor visitor);
    internal abstract virtual void Accept(IFeedRangeVisitor`1<TInput> visitor, TInput input);
    internal abstract virtual TOutput Accept(IFeedRangeVisitor`2<TInput, TOutput> visitor, TInput input);
    internal abstract virtual TResult Accept(IFeedRangeTransformer`1<TResult> transformer);
    internal abstract virtual Task`1<TResult> AcceptAsync(IFeedRangeAsyncVisitor`1<TResult> visitor, CancellationToken cancellationToken);
    internal abstract virtual Task`1<TResult> AcceptAsync(IFeedRangeAsyncVisitor`2<TResult, TArg> visitor, TArg argument, CancellationToken cancellationToken);
    public abstract virtual string ToString();
    public virtual string ToJsonString();
    public static bool TryParse(string jsonString, FeedRangeInternal& feedRangeInternal);
}
internal class Microsoft.Azure.Cosmos.FeedRangeInternalConverter : JsonConverter {
    private static string PartitionKeyNoneValue;
    private static string RangePropertyName;
    private static string PartitionKeyPropertyName;
    private static string PartitionKeyRangeIdPropertyName;
    private static RangeJsonConverter rangeJsonConverter;
    private static FeedRangeInternalConverter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public static FeedRangeInternal ReadJObject(JObject jObject, JsonSerializer serializer);
    public static void WriteJObject(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class Microsoft.Azure.Cosmos.FeedRangePartitionKey : FeedRangeInternal {
    [CompilerGeneratedAttribute]
private PartitionKey <PartitionKey>k__BackingField;
    public PartitionKey PartitionKey { get; }
    public FeedRangePartitionKey(PartitionKey partitionKey);
    [CompilerGeneratedAttribute]
public PartitionKey get_PartitionKey();
    internal virtual Task`1<List`1<Range`1<string>>> GetEffectiveRangesAsync(IRoutingMapProvider routingMapProvider, string containerRid, PartitionKeyDefinition partitionKeyDefinition, ITrace trace);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.FeedRangePartitionKey/<GetPartitionKeyRangesAsync>d__5")]
internal virtual Task`1<IEnumerable`1<string>> GetPartitionKeyRangesAsync(IRoutingMapProvider routingMapProvider, string containerRid, PartitionKeyDefinition partitionKeyDefinition, CancellationToken cancellationToken, ITrace trace);
    internal virtual void Accept(IFeedRangeVisitor visitor);
    internal virtual void Accept(IFeedRangeVisitor`1<TInput> visitor, TInput input);
    internal virtual TOutput Accept(IFeedRangeVisitor`2<TInput, TOutput> visitor, TInput input);
    internal virtual Task`1<TResult> AcceptAsync(IFeedRangeAsyncVisitor`1<TResult> visitor, CancellationToken cancellationToken);
    internal virtual Task`1<TResult> AcceptAsync(IFeedRangeAsyncVisitor`2<TResult, TArg> visitor, TArg argument, CancellationToken cancellationToken);
    public virtual string ToString();
    internal virtual TResult Accept(IFeedRangeTransformer`1<TResult> transformer);
}
internal class Microsoft.Azure.Cosmos.FeedRangePartitionKeyRange : FeedRangeInternal {
    [CompilerGeneratedAttribute]
private string <PartitionKeyRangeId>k__BackingField;
    public string PartitionKeyRangeId { get; }
    public FeedRangePartitionKeyRange(string partitionKeyRangeId);
    [CompilerGeneratedAttribute]
public string get_PartitionKeyRangeId();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.FeedRangePartitionKeyRange/<GetEffectiveRangesAsync>d__4")]
internal virtual Task`1<List`1<Range`1<string>>> GetEffectiveRangesAsync(IRoutingMapProvider routingMapProvider, string containerRid, PartitionKeyDefinition partitionKeyDefinition, ITrace trace);
    internal virtual Task`1<IEnumerable`1<string>> GetPartitionKeyRangesAsync(IRoutingMapProvider routingMapProvider, string containerRid, PartitionKeyDefinition partitionKeyDefinition, CancellationToken cancellationToken, ITrace trace);
    internal virtual void Accept(IFeedRangeVisitor visitor);
    internal virtual void Accept(IFeedRangeVisitor`1<TInput> visitor, TInput input);
    internal virtual TOutput Accept(IFeedRangeVisitor`2<TInput, TOutput> visitor, TInput input);
    internal virtual Task`1<TResult> AcceptAsync(IFeedRangeAsyncVisitor`1<TResult> visitor, CancellationToken cancellationToken);
    internal virtual Task`1<TResult> AcceptAsync(IFeedRangeAsyncVisitor`2<TResult, TArg> visitor, TArg argument, CancellationToken cancellationToken);
    public virtual string ToString();
    internal virtual TResult Accept(IFeedRangeTransformer`1<TResult> transformer);
}
internal class Microsoft.Azure.Cosmos.FeedRangePartitionKeyRangeExtractor : object {
    private ContainerInternal container;
    public FeedRangePartitionKeyRangeExtractor(ContainerInternal container);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.FeedRangePartitionKeyRangeExtractor/<VisitAsync>d__2")]
public sealed virtual Task`1<IReadOnlyList`1<Range`1<string>>> VisitAsync(FeedRangePartitionKey feedRange, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.FeedRangePartitionKeyRangeExtractor/<VisitAsync>d__3")]
public sealed virtual Task`1<IReadOnlyList`1<Range`1<string>>> VisitAsync(FeedRangePartitionKeyRange feedRange, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.FeedRangePartitionKeyRangeExtractor/<VisitAsync>d__4")]
public sealed virtual Task`1<IReadOnlyList`1<Range`1<string>>> VisitAsync(FeedRangeEpk feedRange, CancellationToken cancellationToken);
}
internal static class Microsoft.Azure.Cosmos.FeedRangeResponse : object {
    public static ResponseMessage CreateSuccess(ResponseMessage responseMessage, FeedRangeContinuation feedRangeContinuation);
    public static ResponseMessage CreateFailure(ResponseMessage responseMessage);
}
public abstract class Microsoft.Azure.Cosmos.FeedResponse`1 : Response`1<IEnumerable`1<T>> {
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ETag { get; }
    public string ContinuationToken { get; }
    public int Count { get; }
    public string IndexMetrics { get; }
    internal RequestMessage RequestMessage { get; }
    public virtual double get_RequestCharge();
    public virtual string get_ActivityId();
    public virtual string get_ETag();
    public abstract virtual string get_ContinuationToken();
    public abstract virtual int get_Count();
    public abstract virtual string get_IndexMetrics();
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
    public abstract virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class Microsoft.Azure.Cosmos.FeedResponseBinder : object {
    public static DocumentFeedResponse`1<T> Convert(DocumentFeedResponse`1<object> dynamicFeed);
    public static DocumentFeedResponse`1<T> ConvertCosmosElementFeed(DocumentFeedResponse`1<CosmosElement> dynamicFeed, ResourceType resourceType, JsonSerializerSettings settings);
}
internal class Microsoft.Azure.Cosmos.Fluent.ChangeFeedPolicyDefinition : object {
    private ContainerBuilder parent;
    private Action`1<ChangeFeedPolicy> attachCallback;
    private TimeSpan changeFeedPolicyRetention;
    internal ChangeFeedPolicyDefinition(ContainerBuilder parent, TimeSpan retention, Action`1<ChangeFeedPolicy> attachCallback);
    public ContainerBuilder Attach();
}
public class Microsoft.Azure.Cosmos.Fluent.ClientEncryptionPolicyDefinition : object {
    private Collection`1<ClientEncryptionIncludedPath> clientEncryptionIncludedPaths;
    private ContainerBuilder parent;
    private Action`1<ClientEncryptionPolicy> attachCallback;
    private int policyFormatVersion;
    internal ClientEncryptionPolicyDefinition(ContainerBuilder parent, Action`1<ClientEncryptionPolicy> attachCallback, int policyFormatVersion);
    public ClientEncryptionPolicyDefinition WithIncludedPath(ClientEncryptionIncludedPath path);
    public ContainerBuilder Attach();
}
public class Microsoft.Azure.Cosmos.Fluent.CompositeIndexDefinition`1 : object {
    private Collection`1<CompositePath> compositePaths;
    private T parent;
    private Action`1<Collection`1<CompositePath>> attachCallback;
    internal CompositeIndexDefinition`1(T parent, Action`1<Collection`1<CompositePath>> attachCallback);
    public CompositeIndexDefinition`1<T> Path(string path);
    public CompositeIndexDefinition`1<T> Path(string path, CompositePathSortOrder sortOrder);
    public T Attach();
}
internal class Microsoft.Azure.Cosmos.Fluent.ComputedPropertiesDefinition`1 : object {
    private Collection`1<ComputedProperty> computedProperties;
    private T parent;
    private Action`1<Collection`1<ComputedProperty>> attachCallback;
    internal ComputedPropertiesDefinition`1(T parent, Action`1<Collection`1<ComputedProperty>> attachCallback);
    public ComputedPropertiesDefinition`1<T> WithComputedProperty(string name, string query);
    public T Attach();
}
public class Microsoft.Azure.Cosmos.Fluent.ConflictResolutionDefinition : object {
    private ContainerBuilder parent;
    private Action`1<ConflictResolutionPolicy> attachCallback;
    private string conflictResolutionPath;
    private string conflictResolutionProcedure;
    internal ConflictResolutionDefinition(ContainerBuilder parent, Action`1<ConflictResolutionPolicy> attachCallback);
    public ConflictResolutionDefinition WithLastWriterWinsResolution(string conflictResolutionPath);
    public ConflictResolutionDefinition WithCustomStoredProcedureResolution(string conflictResolutionProcedure);
    public ContainerBuilder Attach();
}
public class Microsoft.Azure.Cosmos.Fluent.ContainerBuilder : ContainerDefinition`1<ContainerBuilder> {
    private Database database;
    private CosmosClientContext clientContext;
    private Uri containerUri;
    private UniqueKeyPolicy uniqueKeyPolicy;
    private ConflictResolutionPolicy conflictResolutionPolicy;
    private ChangeFeedPolicy changeFeedPolicy;
    private ClientEncryptionPolicy clientEncryptionPolicy;
    private VectorEmbeddingPolicy vectorEmbeddingPolicy;
    public ContainerBuilder(Database database, string name, string partitionKeyPath);
    public UniqueKeyDefinition WithUniqueKey();
    public ConflictResolutionDefinition WithConflictResolution();
    internal ChangeFeedPolicyDefinition WithChangeFeedPolicy(TimeSpan retention);
    public ClientEncryptionPolicyDefinition WithClientEncryptionPolicy();
    public ClientEncryptionPolicyDefinition WithClientEncryptionPolicy(int policyFormatVersion);
    internal VectorEmbeddingPolicyDefinition WithVectorEmbeddingPolicy(Collection`1<Embedding> embeddings);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Fluent.ContainerBuilder/<CreateAsync>d__16")]
public Task`1<ContainerResponse> CreateAsync(ThroughputProperties throughputProperties, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Fluent.ContainerBuilder/<CreateIfNotExistsAsync>d__17")]
public Task`1<ContainerResponse> CreateIfNotExistsAsync(ThroughputProperties throughputProperties, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Fluent.ContainerBuilder/<CreateAsync>d__18")]
public Task`1<ContainerResponse> CreateAsync(Nullable`1<int> throughput, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Fluent.ContainerBuilder/<CreateIfNotExistsAsync>d__19")]
public Task`1<ContainerResponse> CreateIfNotExistsAsync(Nullable`1<int> throughput, CancellationToken cancellationToken);
    public ContainerProperties Build();
    private void AddUniqueKey(UniqueKey uniqueKey);
    private void AddConflictResolution(ConflictResolutionPolicy conflictResolutionPolicy);
    private void AddChangeFeedPolicy(ChangeFeedPolicy changeFeedPolicy);
    private void AddClientEncryptionPolicy(ClientEncryptionPolicy clientEncryptionPolicy);
    private void AddVectorEmbeddingPolicy(VectorEmbeddingPolicy embeddingPolicy);
    [CompilerGeneratedAttribute]
private void <WithUniqueKey>b__10_0(UniqueKey uniqueKey);
    [CompilerGeneratedAttribute]
private void <WithConflictResolution>b__11_0(ConflictResolutionPolicy conflictPolicy);
    [CompilerGeneratedAttribute]
private void <WithChangeFeedPolicy>b__12_0(ChangeFeedPolicy changeFeedPolicy);
    [CompilerGeneratedAttribute]
private void <WithClientEncryptionPolicy>b__13_0(ClientEncryptionPolicy clientEncryptionPolicy);
    [CompilerGeneratedAttribute]
private void <WithClientEncryptionPolicy>b__14_0(ClientEncryptionPolicy clientEncryptionPolicy);
    [CompilerGeneratedAttribute]
private void <WithVectorEmbeddingPolicy>b__15_0(VectorEmbeddingPolicy embeddingPolicy);
}
public abstract class Microsoft.Azure.Cosmos.Fluent.ContainerDefinition`1 : object {
    private string containerName;
    private string partitionKeyPath;
    private Nullable`1<int> defaultTimeToLive;
    private IndexingPolicy indexingPolicy;
    private string timeToLivePropertyPath;
    private Nullable`1<PartitionKeyDefinitionVersion> partitionKeyDefinitionVersion;
    private Collection`1<ComputedProperty> computedProperties;
    internal ContainerDefinition`1(string name, string partitionKeyPath);
    public T WithPartitionKeyDefinitionVersion(PartitionKeyDefinitionVersion partitionKeyDefinitionVersion);
    public T WithDefaultTimeToLive(TimeSpan defaultTtlTimeSpan);
    public T WithDefaultTimeToLive(int defaultTtlInSeconds);
    public T WithTimeToLivePropertyPath(string propertyPath);
    public IndexingPolicyDefinition`1<T> WithIndexingPolicy();
    internal ComputedPropertiesDefinition`1<T> WithComputedProperties();
    public ContainerProperties Build();
    private void WithIndexingPolicy(IndexingPolicy indexingPolicy);
    private void WithComputedProperties(Collection`1<ComputedProperty> computedProperties);
    [CompilerGeneratedAttribute]
private void <WithIndexingPolicy>b__13_0(IndexingPolicy indexingPolicy);
    [CompilerGeneratedAttribute]
private void <WithComputedProperties>b__14_0(Collection`1<ComputedProperty> computedProperties);
}
public class Microsoft.Azure.Cosmos.Fluent.CosmosClientBuilder : object {
    private CosmosClientOptions clientOptions;
    private string accountEndpoint;
    private string accountKey;
    private AzureKeyCredential azureKeyCredential;
    private TokenCredential tokenCredential;
    public CosmosClientBuilder(string accountEndpoint, string authKeyOrResourceToken);
    public CosmosClientBuilder(string accountEndpoint, AzureKeyCredential authKeyOrResourceTokenCredential);
    public CosmosClientBuilder(string connectionString);
    public CosmosClientBuilder(string accountEndpoint, TokenCredential tokenCredential);
    public CosmosClient Build();
    public Task`1<CosmosClient> BuildAndInitializeAsync(IReadOnlyList`1<ValueTuple`2<string, string>> containers, CancellationToken cancellationToken);
    internal virtual CosmosClient Build(DocumentClient documentClient);
    public CosmosClientBuilder WithApplicationName(string applicationName);
    public CosmosClientBuilder WithApplicationRegion(string applicationRegion);
    public CosmosClientBuilder WithApplicationPreferredRegions(IReadOnlyList`1<string> applicationPreferredRegions);
    public CosmosClientBuilder WithCustomAccountEndpoints(IEnumerable`1<Uri> customAccountEndpoints);
    public CosmosClientBuilder WithLimitToEndpoint(bool limitToEndpoint);
    public CosmosClientBuilder WithRequestTimeout(TimeSpan requestTimeout);
    public CosmosClientBuilder WithConnectionModeDirect();
    public CosmosClientBuilder WithConnectionModeDirect(Nullable`1<TimeSpan> idleTcpConnectionTimeout, Nullable`1<TimeSpan> openTcpConnectionTimeout, Nullable`1<int> maxRequestsPerTcpConnection, Nullable`1<int> maxTcpConnectionsPerEndpoint, Nullable`1<PortReuseMode> portReuseMode, Nullable`1<bool> enableTcpConnectionEndpointRediscovery);
    public CosmosClientBuilder WithConsistencyLevel(ConsistencyLevel consistencyLevel);
    public CosmosClientBuilder WithPriorityLevel(PriorityLevel priorityLevel);
    public CosmosClientBuilder WithConnectionModeGateway(Nullable`1<int> maxConnectionLimit, IWebProxy webProxy);
    public CosmosClientBuilder AddCustomHandlers(RequestHandler[] customHandlers);
    public CosmosClientBuilder WithThrottlingRetryOptions(TimeSpan maxRetryWaitTimeOnThrottledRequests, int maxRetryAttemptsOnThrottledRequests);
    public CosmosClientBuilder WithSerializerOptions(CosmosSerializationOptions cosmosSerializerOptions);
    public CosmosClientBuilder WithCustomSerializer(CosmosSerializer cosmosJsonSerializer);
    public CosmosClientBuilder WithBulkExecution(bool enabled);
    public CosmosClientBuilder WithHttpClientFactory(Func`1<HttpClient> httpClientFactory);
    public CosmosClientBuilder WithContentResponseOnWrite(bool contentResponseOnWrite);
    public CosmosClientBuilder WithSystemTextJsonSerializerOptions(JsonSerializerOptions serializerOptions);
    internal CosmosClientBuilder WithSendingRequestEventArgs(EventHandler`1<SendingRequestEventArgs> sendingRequestEventArgs);
    internal CosmosClientBuilder WithSessionContainer(ISessionContainer sessionContainer);
    internal CosmosClientBuilder WithTransportClientHandlerFactory(Func`2<TransportClient, TransportClient> transportClientHandlerFactory);
    internal CosmosClientBuilder WithApiType(ApiType apiType);
    internal CosmosClientBuilder WithAvailabilityStrategy(AvailabilityStrategy strategy);
    internal CosmosClientBuilder WithStoreClientFactory(IStoreClientFactory storeClientFactory);
    internal CosmosClientBuilder WithCpuMonitorDisabled();
    internal CosmosClientBuilder WithPartitionLevelFailoverEnabled();
    internal CosmosClientBuilder WithFaultInjection(IChaosInterceptorFactory chaosInterceptorFactory);
    internal CosmosClientBuilder AllowUpgradeConsistencyToLocalQuorum();
    internal CosmosClientBuilder WithRetryWithOptions(Nullable`1<int> initialRetryForRetryWithMilliseconds, Nullable`1<int> maximumRetryForRetryWithMilliseconds, Nullable`1<int> randomSaltForRetryWithMilliseconds, Nullable`1<int> totalWaitTimeForRetryWithMilliseconds);
    public CosmosClientBuilder WithClientTelemetryOptions(CosmosClientTelemetryOptions options);
}
public class Microsoft.Azure.Cosmos.Fluent.IndexingPolicyDefinition`1 : object {
    private IndexingPolicy indexingPolicy;
    private T parent;
    private Action`1<IndexingPolicy> attachCallback;
    private PathsDefinition`1<IndexingPolicyDefinition`1<T>> includedPathsBuilder;
    private PathsDefinition`1<IndexingPolicyDefinition`1<T>> excludedPathsBuilder;
    internal IndexingPolicyDefinition`1(T parent, Action`1<IndexingPolicy> attachCallback);
    public IndexingPolicyDefinition`1<T> WithIndexingMode(IndexingMode indexingMode);
    public IndexingPolicyDefinition`1<T> WithAutomaticIndexing(bool enabled);
    public PathsDefinition`1<IndexingPolicyDefinition`1<T>> WithIncludedPaths();
    public PathsDefinition`1<IndexingPolicyDefinition`1<T>> WithExcludedPaths();
    public CompositeIndexDefinition`1<IndexingPolicyDefinition`1<T>> WithCompositeIndex();
    public SpatialIndexDefinition`1<IndexingPolicyDefinition`1<T>> WithSpatialIndex();
    internal VectorIndexDefinition`1<IndexingPolicyDefinition`1<T>> WithVectorIndex();
    public T Attach();
    private void AddCompositePaths(Collection`1<CompositePath> compositePaths);
    private void AddSpatialPath(SpatialPath spatialSpec);
    private void AddVectorIndexPath(VectorIndexPath vectorIndexPath);
    private void AddIncludedPaths(IEnumerable`1<string> paths);
    private void AddExcludedPaths(IEnumerable`1<string> paths);
    [CompilerGeneratedAttribute]
private void <WithIncludedPaths>b__9_0(IEnumerable`1<string> paths);
    [CompilerGeneratedAttribute]
private void <WithExcludedPaths>b__10_0(IEnumerable`1<string> paths);
    [CompilerGeneratedAttribute]
private void <WithCompositeIndex>b__11_0(Collection`1<CompositePath> compositePaths);
    [CompilerGeneratedAttribute]
private void <WithSpatialIndex>b__12_0(SpatialPath spatialIndex);
    [CompilerGeneratedAttribute]
private void <WithVectorIndex>b__13_0(VectorIndexPath vectorIndex);
}
public class Microsoft.Azure.Cosmos.Fluent.PathsDefinition`1 : object {
    private List`1<string> paths;
    private T parent;
    private Action`1<IEnumerable`1<string>> attachCallback;
    internal PathsDefinition`1(T parent, Action`1<IEnumerable`1<string>> attachCallback);
    public PathsDefinition`1<T> Path(string path);
    public T Attach();
}
public class Microsoft.Azure.Cosmos.Fluent.SpatialIndexDefinition`1 : object {
    private SpatialPath spatialSpec;
    private T parent;
    private Action`1<SpatialPath> attachCallback;
    internal SpatialIndexDefinition`1(T parent, Action`1<SpatialPath> attachCallback);
    public SpatialIndexDefinition`1<T> Path(string path);
    public SpatialIndexDefinition`1<T> Path(string path, SpatialType[] spatialTypes);
    public T Attach();
}
public class Microsoft.Azure.Cosmos.Fluent.UniqueKeyDefinition : object {
    private Collection`1<string> paths;
    private ContainerBuilder parent;
    private Action`1<UniqueKey> attachCallback;
    internal UniqueKeyDefinition(ContainerBuilder parent, Action`1<UniqueKey> attachCallback);
    public UniqueKeyDefinition Path(string path);
    public ContainerBuilder Attach();
}
internal class Microsoft.Azure.Cosmos.Fluent.VectorEmbeddingPolicyDefinition : object {
    private ContainerBuilder parent;
    private Action`1<VectorEmbeddingPolicy> attachCallback;
    private Collection`1<Embedding> vectorEmbeddings;
    public VectorEmbeddingPolicyDefinition(ContainerBuilder parent, Collection`1<Embedding> embeddings, Action`1<VectorEmbeddingPolicy> attachCallback);
    public ContainerBuilder Attach();
}
internal class Microsoft.Azure.Cosmos.Fluent.VectorIndexDefinition`1 : object {
    private VectorIndexPath vectorIndexPath;
    private T parent;
    private Action`1<VectorIndexPath> attachCallback;
    public VectorIndexDefinition`1(T parent, Action`1<VectorIndexPath> attachCallback);
    public VectorIndexDefinition`1<T> Path(string path, VectorIndexType indexType);
    public T Attach();
}
internal class Microsoft.Azure.Cosmos.GatewayAccountReader : object {
    private ConnectionPolicy connectionPolicy;
    private AuthorizationTokenProvider cosmosAuthorization;
    private CosmosHttpClient httpClient;
    private Uri serviceEndpoint;
    private CancellationToken cancellationToken;
    public GatewayAccountReader(Uri serviceEndpoint, AuthorizationTokenProvider cosmosAuthorization, ConnectionPolicy connectionPolicy, CosmosHttpClient httpClient, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.GatewayAccountReader/<GetDatabaseAccountAsync>d__6")]
private Task`1<AccountProperties> GetDatabaseAccountAsync(Uri serviceEndpoint);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.GatewayAccountReader/<InitializeReaderAsync>d__7")]
public Task`1<AccountProperties> InitializeReaderAsync();
}
internal class Microsoft.Azure.Cosmos.GatewayStoreClient : TransportClient {
    private ICommunicationEventSource eventSource;
    private CosmosHttpClient httpClient;
    private JsonSerializerSettings SerializerSettings;
    private static HttpMethod httpPatchMethod;
    public GatewayStoreClient(CosmosHttpClient httpClient, ICommunicationEventSource eventSource, JsonSerializerSettings serializerSettings);
    private static GatewayStoreClient();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.GatewayStoreClient/<InvokeAsync>d__5")]
public Task`1<DocumentServiceResponse> InvokeAsync(DocumentServiceRequest request, ResourceType resourceType, Uri physicalAddress, CancellationToken cancellationToken);
    public static bool IsFeedRequest(OperationType requestOperationType);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.GatewayStoreClient/<InvokeStoreAsync>d__7")]
internal virtual Task`1<StoreResponse> InvokeStoreAsync(Uri baseAddress, ResourceOperation resourceOperation, DocumentServiceRequest request);
    internal Task`1<HttpResponseMessage> SendHttpAsync(Func`1<ValueTask`1<HttpRequestMessage>> requestMessage, ResourceType resourceType, HttpTimeoutPolicy timeoutPolicy, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.GatewayStoreClient/<ParseResponseAsync>d__9")]
internal static Task`1<DocumentServiceResponse> ParseResponseAsync(HttpResponseMessage responseMessage, JsonSerializerSettings serializerSettings, DocumentServiceRequest request);
    internal static INameValueCollection ExtractResponseHeaders(HttpResponseMessage responseMessage);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.GatewayStoreClient/<CreateDocumentClientExceptionAsync>d__11")]
internal static Task`1<DocumentClientException> CreateDocumentClientExceptionAsync(HttpResponseMessage responseMessage, IClientSideRequestStatistics requestStatistics);
    internal static bool IsAllowedRequestHeader(string headerName);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.GatewayStoreClient/<BufferContentIfAvailableAsync>d__13")]
private static Task`1<Stream> BufferContentIfAvailableAsync(HttpResponseMessage responseMessage);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.GatewayStoreClient/<PrepareRequestMessageAsync>d__14")]
private ValueTask`1<HttpRequestMessage> PrepareRequestMessageAsync(DocumentServiceRequest request, Uri physicalAddress);
    private Task`1<HttpResponseMessage> InvokeClientAsync(DocumentServiceRequest request, ResourceType resourceType, Uri physicalAddress, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.GatewayStoreModel : object {
    private static string sessionConsistencyAsString;
    private GlobalEndpointManager endpointManager;
    private DocumentClientEventSource eventSource;
    private ISessionContainer sessionContainer;
    private ConsistencyLevel defaultConsistencyLevel;
    private GatewayStoreClient gatewayStoreClient;
    private ClientCollectionCache clientCollectionCache;
    private PartitionKeyRangeCache partitionKeyRangeCache;
    public GatewayStoreModel(GlobalEndpointManager endpointManager, ISessionContainer sessionContainer, ConsistencyLevel defaultConsistencyLevel, DocumentClientEventSource eventSource, JsonSerializerSettings serializerSettings, CosmosHttpClient httpClient);
    private static GatewayStoreModel();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.GatewayStoreModel/<ProcessMessageAsync>d__9")]
public virtual Task`1<DocumentServiceResponse> ProcessMessageAsync(DocumentServiceRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.GatewayStoreModel/<GetDatabaseAccountAsync>d__10")]
public virtual Task`1<AccountProperties> GetDatabaseAccountAsync(Func`1<ValueTask`1<HttpRequestMessage>> requestMessage, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    public void SetCaches(PartitionKeyRangeCache partitionKeyRangeCache, ClientCollectionCache clientCollectionCache);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.GatewayStoreModel/<CaptureSessionTokenAndHandleSplitAsync>d__13")]
private Task CaptureSessionTokenAndHandleSplitAsync(Nullable`1<HttpStatusCode> statusCode, SubStatusCodes subStatusCode, DocumentServiceRequest request, INameValueCollection responseHeaders);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.GatewayStoreModel/<ApplySessionTokenAsync>d__14")]
internal static Task ApplySessionTokenAsync(DocumentServiceRequest request, ConsistencyLevel defaultConsistencyLevel, ISessionContainer sessionContainer, PartitionKeyRangeCache partitionKeyRangeCache, CollectionCache clientCollectionCache, IGlobalEndpointManager globalEndpointManager);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.GatewayStoreModel/<TryResolveSessionTokenAsync>d__15")]
internal static Task`1<Tuple`2<bool, string>> TryResolveSessionTokenAsync(DocumentServiceRequest request, ISessionContainer sessionContainer, PartitionKeyRangeCache partitionKeyRangeCache, CollectionCache clientCollectionCache);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.GatewayStoreModel/<TryResolvePartitionKeyRangeAsync>d__16")]
private static Task`1<Tuple`2<bool, PartitionKeyRange>> TryResolvePartitionKeyRangeAsync(DocumentServiceRequest request, ISessionContainer sessionContainer, PartitionKeyRangeCache partitionKeyRangeCache, CollectionCache clientCollectionCache, bool refreshCache);
    internal static bool IsMasterOperation(ResourceType resourceType, OperationType operationType);
    internal static bool IsStoredProcedureCrudOperation(ResourceType resourceType, OperationType operationType);
    private void Dispose(bool disposing);
    private Uri GetEntityUri(DocumentServiceRequest entity);
    private Uri GetFeedUri(DocumentServiceRequest request);
    public sealed virtual Task OpenConnectionsToAllReplicasAsync(string databaseName, string containerLinkUri, CancellationToken cancellationToken);
}
public class Microsoft.Azure.Cosmos.GeospatialConfig : object {
    [CompilerGeneratedAttribute]
private GeospatialType <GeospatialType>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public GeospatialType GeospatialType { get; public set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    public GeospatialConfig(GeospatialType geospatialType);
    [CompilerGeneratedAttribute]
public GeospatialType get_GeospatialType();
    [CompilerGeneratedAttribute]
public void set_GeospatialType(GeospatialType value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public enum Microsoft.Azure.Cosmos.GeospatialType : Enum {
    public int value__;
    public static GeospatialType Geography;
    public static GeospatialType Geometry;
}
internal class Microsoft.Azure.Cosmos.Handler.DiagnosticsHandlerHelper : object {
    private static string Diagnostickey;
    private static string Telemetrykey;
    public static TimeSpan DiagnosticsRefreshInterval;
    private static TimeSpan ClientTelemetryRefreshInterval;
    private static SystemUsageRecorder DiagnosticSystemUsageRecorder;
    private static SystemUsageRecorder TelemetrySystemUsageRecorder;
    private static DiagnosticsHandlerHelper Instance;
    private static bool isDiagnosticsMonitoringEnabled;
    private static bool isTelemetryMonitoringEnabled;
    private SystemUsageMonitor systemUsageMonitor;
    private static DiagnosticsHandlerHelper();
    public static DiagnosticsHandlerHelper GetInstance();
    public static void Refresh(bool isClientTelemetryEnabled);
    private void StopSystemMonitor();
    public SystemUsageHistory GetDiagnosticsSystemHistory();
    public SystemUsageHistory GetClientTelemetrySystemHistory();
}
internal static class Microsoft.Azure.Cosmos.HandlerConstants : object {
    public static string StartEpkString;
    public static string EndEpkString;
    public static string ResourceUri;
}
internal abstract class Microsoft.Azure.Cosmos.Handlers.AbstractRetryHandler : RequestHandler {
    internal abstract virtual Task`1<IDocumentClientRetryPolicy> GetRetryPolicyAsync(RequestMessage request);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.AbstractRetryHandler/<SendAsync>d__1")]
public virtual Task`1<ResponseMessage> SendAsync(RequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.AbstractRetryHandler/<ExecuteHttpRequestAsync>d__2")]
private static Task`1<ResponseMessage> ExecuteHttpRequestAsync(Func`1<Task`1<ResponseMessage>> callbackMethod, Func`3<ResponseMessage, CancellationToken, Task`1<ShouldRetryResult>> callShouldRetry, Func`3<Exception, CancellationToken, Task`1<ShouldRetryResult>> callShouldRetryException, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ResponseMessage> <>n__0(RequestMessage request, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler : RequestHandler {
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.DiagnosticsHandler/<SendAsync>d__0")]
public virtual Task`1<ResponseMessage> SendAsync(RequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ResponseMessage> <>n__0(RequestMessage request, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Handlers.NamedCacheRetryHandler : AbstractRetryHandler {
    internal virtual Task`1<IDocumentClientRetryPolicy> GetRetryPolicyAsync(RequestMessage request);
}
internal class Microsoft.Azure.Cosmos.Handlers.PartitionKeyRangeHandler : RequestHandler {
    private CosmosClient client;
    private PartitionRoutingHelper partitionRoutingHelper;
    public PartitionKeyRangeHandler(CosmosClient client, PartitionRoutingHelper partitionRoutingHelper);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.PartitionKeyRangeHandler/<SendAsync>d__3")]
public virtual Task`1<ResponseMessage> SendAsync(RequestMessage request, CancellationToken cancellationToken);
    private void SetOriginalContinuationToken(RequestMessage request, ResponseMessage response, string originalContinuation);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ResponseMessage> <>n__0(RequestMessage request, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler : RequestHandler {
    private static HttpMethod httpPatchMethod;
    private static ValueTuple`2<bool, ResponseMessage> clientIsValid;
    private CosmosClient client;
    private Nullable`1<ConsistencyLevel> RequestedClientConsistencyLevel;
    private Nullable`1<PriorityLevel> RequestedClientPriorityLevel;
    private Nullable`1<bool> IsLocalQuorumConsistency;
    private Nullable`1<ConsistencyLevel> AccountConsistencyLevel;
    public RequestInvokerHandler(CosmosClient client, Nullable`1<ConsistencyLevel> requestedClientConsistencyLevel, Nullable`1<PriorityLevel> requestedClientPriorityLevel);
    private static RequestInvokerHandler();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler/<SendAsync>d__8")]
public virtual Task`1<ResponseMessage> SendAsync(RequestMessage request, CancellationToken cancellationToken);
    public AvailabilityStrategyInternal AvailabilityStrategy(RequestMessage request);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler/<BaseSendAsync>d__10")]
public virtual Task`1<ResponseMessage> BaseSendAsync(RequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler/<SendAsync>d__11`1")]
public virtual Task`1<T> SendAsync(string resourceUri, ResourceType resourceType, OperationType operationType, RequestOptions requestOptions, ContainerInternal cosmosContainerCore, FeedRange feedRange, Stream streamPayload, Action`1<RequestMessage> requestEnricher, Func`2<ResponseMessage, T> responseCreator, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler/<SendAsync>d__12")]
public virtual Task`1<ResponseMessage> SendAsync(string resourceUriString, ResourceType resourceType, OperationType operationType, RequestOptions requestOptions, ContainerInternal cosmosContainerCore, FeedRange feedRange, Stream streamPayload, Action`1<RequestMessage> requestEnricher, ITrace trace, CancellationToken cancellationToken);
    internal static HttpMethod GetHttpMethod(ResourceType resourceType, OperationType operationType, bool hasPayload);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler/<EnsureValidClientAsync>d__14")]
private Task`1<ValueTuple`2<bool, ResponseMessage>> EnsureValidClientAsync(RequestMessage request, ITrace trace);
    private void FillMultiMasterContext(RequestMessage request);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler/<ValidateAndSetConsistencyLevelAsync>d__16")]
private Task ValidateAndSetConsistencyLevelAsync(RequestMessage requestMessage);
    private void SetPriorityLevel(RequestMessage requestMessage);
    internal static bool ShouldSetNoContentResponseHeaders(RequestOptions requestOptions, CosmosClientOptions clientOptions, OperationType operationType, ResourceType resourceType);
    private static bool IsItemNoRepsonseSet(bool enableContentResponseOnWrite, OperationType operationType);
    private static bool IsClientNoResponseSet(CosmosClientOptions clientOptions, OperationType operationType);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.RequestInvokerHandler/<ResolveFeedRangeBasedOnPrefixContainerAsync>d__21")]
internal static Task`1<FeedRange> ResolveFeedRangeBasedOnPrefixContainerAsync(FeedRange feedRange, ContainerInternal cosmosContainerCore, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ResponseMessage> <>n__0(RequestMessage request, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Handlers.RetryHandler : AbstractRetryHandler {
    private CosmosClient client;
    public RetryHandler(CosmosClient client);
    internal virtual Task`1<IDocumentClientRetryPolicy> GetRetryPolicyAsync(RequestMessage request);
}
internal class Microsoft.Azure.Cosmos.Handlers.RouterHandler : RequestHandler {
    private RequestHandler documentFeedHandler;
    private RequestHandler pointOperationHandler;
    public RouterHandler(RequestHandler documentFeedHandler, RequestHandler pointOperationHandler);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.RouterHandler/<SendAsync>d__3")]
public virtual Task`1<ResponseMessage> SendAsync(RequestMessage request, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Handlers.TelemetryHandler : RequestHandler {
    private TelemetryToServiceHelper telemetryToServiceHelper;
    public TelemetryHandler(TelemetryToServiceHelper telemetryToServiceHelper);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.TelemetryHandler/<SendAsync>d__2")]
public virtual Task`1<ResponseMessage> SendAsync(RequestMessage request, CancellationToken cancellationToken);
    private bool IsAllowed(RequestMessage request);
    private static long GetPayloadSize(ResponseMessage response);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ResponseMessage> <>n__0(RequestMessage request, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Handlers.TransportHandler : RequestHandler {
    private CosmosClient client;
    public TransportHandler(CosmosClient client);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.TransportHandler/<SendAsync>d__2")]
public virtual Task`1<ResponseMessage> SendAsync(RequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Handlers.TransportHandler/<ProcessMessageAsync>d__3")]
internal Task`1<ResponseMessage> ProcessMessageAsync(RequestMessage request, CancellationToken cancellationToken);
    internal static ResponseMessage AggregateExceptionConverter(AggregateException aggregateException, RequestMessage request);
}
internal class Microsoft.Azure.Cosmos.HashIndex : Index {
    [CompilerGeneratedAttribute]
private DataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <Precision>k__BackingField;
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public DataType DataType { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<short> Precision { get; public set; }
    public HashIndex(DataType dataType);
    public HashIndex(DataType dataType, short precision);
    [CompilerGeneratedAttribute]
public DataType get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(DataType value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(Nullable`1<short> value);
    public sealed virtual object Clone();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Azure.Cosmos.Headers : object {
    internal static string SDKSUPPORTEDCAPABILITIES;
    [CompilerGeneratedAttribute]
private CosmosMessageHeadersInternal <CosmosMessageHeaders>k__BackingField;
    internal SubStatusCodes SubStatusCode { get; internal set; }
    public string ContinuationToken { get; internal set; }
    internal string CorrelatedActivityId { get; internal set; }
    public double RequestCharge { get; internal set; }
    public string ActivityId { get; internal set; }
    public string ETag { get; internal set; }
    public string ContentType { get; internal set; }
    public string Session { get; internal set; }
    public string ContentLength { get; public set; }
    public string Location { get; internal set; }
    internal string SubStatusCodeLiteral { get; internal set; }
    internal Nullable`1<TimeSpan> RetryAfter { get; internal set; }
    internal string Authorization { get; internal set; }
    internal string RetryAfterLiteral { get; internal set; }
    internal string PartitionKey { get; internal set; }
    internal string OptimisticDirectExecute { get; internal set; }
    internal string RequiresDistribution { get; internal set; }
    internal string PartitionKeyRangeId { get; internal set; }
    internal string IsUpsert { get; internal set; }
    internal string OfferThroughput { get; internal set; }
    internal string IfNoneMatch { get; internal set; }
    internal string PageSize { get; internal set; }
    internal string QueryMetricsText { get; internal set; }
    internal string IndexUtilizationText { get; internal set; }
    internal string BackendRequestDurationMilliseconds { get; internal set; }
    internal string ConsistencyLevel { get; internal set; }
    internal string SDKSupportedCapabilities { get; internal set; }
    internal string ContentSerializationFormat { get; internal set; }
    internal string ReadFeedKeyType { get; internal set; }
    internal string StartEpk { get; internal set; }
    internal string EndEpk { get; internal set; }
    internal string ItemCount { get; }
    public string Item { get; public set; }
    internal CosmosMessageHeadersInternal CosmosMessageHeaders { get; }
    internal Headers(INameValueCollection nameValueCollection);
    internal Headers(CosmosMessageHeadersInternal cosmosMessageHeaders);
    private static Headers();
    internal virtual SubStatusCodes get_SubStatusCode();
    internal virtual void set_SubStatusCode(SubStatusCodes value);
    public virtual string get_ContinuationToken();
    internal virtual void set_ContinuationToken(string value);
    internal virtual string get_CorrelatedActivityId();
    internal virtual void set_CorrelatedActivityId(string value);
    public virtual double get_RequestCharge();
    internal virtual void set_RequestCharge(double value);
    public virtual string get_ActivityId();
    internal virtual void set_ActivityId(string value);
    public virtual string get_ETag();
    internal virtual void set_ETag(string value);
    public virtual string get_ContentType();
    internal virtual void set_ContentType(string value);
    public virtual string get_Session();
    internal virtual void set_Session(string value);
    public virtual string get_ContentLength();
    public virtual void set_ContentLength(string value);
    public virtual string get_Location();
    internal virtual void set_Location(string value);
    internal virtual string get_SubStatusCodeLiteral();
    internal virtual void set_SubStatusCodeLiteral(string value);
    internal Nullable`1<TimeSpan> get_RetryAfter();
    internal void set_RetryAfter(Nullable`1<TimeSpan> value);
    internal virtual string get_Authorization();
    internal virtual void set_Authorization(string value);
    internal virtual string get_RetryAfterLiteral();
    internal virtual void set_RetryAfterLiteral(string value);
    internal virtual string get_PartitionKey();
    internal virtual void set_PartitionKey(string value);
    internal virtual string get_OptimisticDirectExecute();
    internal virtual void set_OptimisticDirectExecute(string value);
    internal virtual string get_RequiresDistribution();
    internal virtual void set_RequiresDistribution(string value);
    internal virtual string get_PartitionKeyRangeId();
    internal virtual void set_PartitionKeyRangeId(string value);
    internal virtual string get_IsUpsert();
    internal virtual void set_IsUpsert(string value);
    internal virtual string get_OfferThroughput();
    internal virtual void set_OfferThroughput(string value);
    internal virtual string get_IfNoneMatch();
    internal virtual void set_IfNoneMatch(string value);
    internal virtual string get_PageSize();
    internal virtual void set_PageSize(string value);
    internal virtual string get_QueryMetricsText();
    internal virtual void set_QueryMetricsText(string value);
    internal virtual string get_IndexUtilizationText();
    internal virtual void set_IndexUtilizationText(string value);
    internal virtual string get_BackendRequestDurationMilliseconds();
    internal virtual void set_BackendRequestDurationMilliseconds(string value);
    internal virtual string get_ConsistencyLevel();
    internal virtual void set_ConsistencyLevel(string value);
    internal virtual string get_SDKSupportedCapabilities();
    internal virtual void set_SDKSupportedCapabilities(string value);
    internal virtual string get_ContentSerializationFormat();
    internal virtual void set_ContentSerializationFormat(string value);
    internal virtual string get_ReadFeedKeyType();
    internal virtual void set_ReadFeedKeyType(string value);
    internal virtual string get_StartEpk();
    internal virtual void set_StartEpk(string value);
    internal virtual string get_EndEpk();
    internal virtual void set_EndEpk(string value);
    internal virtual string get_ItemCount();
    public virtual string get_Item(string headerName);
    public virtual void set_Item(string headerName, string value);
    [IteratorStateMachineAttribute("Microsoft.Azure.Cosmos.Headers/<GetEnumerator>d__102")]
public virtual IEnumerator`1<string> GetEnumerator();
    public virtual void Add(string headerName, string value);
    public virtual void Add(string headerName, IEnumerable`1<string> values);
    public virtual void Set(string headerName, string value);
    public virtual string Get(string headerName);
    public virtual bool TryGetValue(string headerName, String& value);
    public virtual string GetValueOrDefault(string headerName);
    public virtual void Remove(string headerName);
    public virtual String[] AllKeys();
    public virtual T GetHeaderValue(string headerName);
    internal Headers Clone();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal String[] GetValues(string key);
    [CompilerGeneratedAttribute]
internal CosmosMessageHeadersInternal get_CosmosMessageHeaders();
    internal static int GetIntValueOrDefault(string value);
    internal static SubStatusCodes GetSubStatusCodes(string value);
    internal static Nullable`1<TimeSpan> GetRetryAfter(string value);
}
internal class Microsoft.Azure.Cosmos.HttpResponseHeadersWrapper : CosmosMessageHeadersInternal {
    private HttpResponseHeaders httpResponseHeaders;
    private HttpContentHeaders httpContentHeaders;
    private Lazy`1<DictionaryNameValueCollection> dictionaryNameValueCollection;
    public INameValueCollection INameValueCollection { get; }
    public HttpResponseHeadersWrapper(HttpResponseHeaders responseHeaders, HttpContentHeaders httpContentHeaders);
    public virtual INameValueCollection get_INameValueCollection();
    public virtual void Add(string key, string value);
    public virtual void Add(INameValueCollection collection);
    public sealed virtual void Clear();
    public virtual bool TryGetValue(string headerName, String& value);
    public virtual String[] AllKeys();
    public sealed virtual INameValueCollection Clone();
    public virtual int Count();
    public virtual string Get(string key);
    public virtual IEnumerator`1<string> GetEnumerator();
    [IteratorStateMachineAttribute("Microsoft.Azure.Cosmos.HttpResponseHeadersWrapper/<AllItems>d__15")]
private IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> AllItems();
    public virtual String[] GetValues(string key);
    [IteratorStateMachineAttribute("Microsoft.Azure.Cosmos.HttpResponseHeadersWrapper/<Keys>d__17")]
public sealed virtual IEnumerable`1<string> Keys();
    public virtual void Remove(string key);
    public virtual void Set(string key, string value);
    public sealed virtual NameValueCollection ToNameValueCollection();
    private string JoinHeaders(IEnumerable`1<string> headerValues);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal abstract class Microsoft.Azure.Cosmos.HttpTimeoutPolicy : object {
    public string TimeoutPolicyName { get; }
    public int TotalRetryCount { get; }
    public bool ShouldThrow503OnTimeout { get; }
    public abstract virtual string get_TimeoutPolicyName();
    public abstract virtual int get_TotalRetryCount();
    public abstract virtual IEnumerator`1<ValueTuple`2<TimeSpan, TimeSpan>> GetTimeoutEnumerator();
    public abstract virtual bool IsSafeToRetry(HttpMethod httpMethod);
    public abstract virtual bool ShouldRetryBasedOnResponse(HttpMethod requestHttpMethod, HttpResponseMessage responseMessage);
    public virtual bool get_ShouldThrow503OnTimeout();
    public static HttpTimeoutPolicy GetTimeoutPolicy(DocumentServiceRequest documentServiceRequest);
    private static bool IsMetaData(DocumentServiceRequest request);
}
internal class Microsoft.Azure.Cosmos.HttpTimeoutPolicyControlPlaneRead : HttpTimeoutPolicy {
    public static HttpTimeoutPolicy Instance;
    private static string Name;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<ValueTuple`2<TimeSpan, TimeSpan>> TimeoutsAndDelays;
    public string TimeoutPolicyName { get; }
    public int TotalRetryCount { get; }
    public bool ShouldThrow503OnTimeout { get; }
    private static HttpTimeoutPolicyControlPlaneRead();
    public virtual string get_TimeoutPolicyName();
    public virtual int get_TotalRetryCount();
    public virtual IEnumerator`1<ValueTuple`2<TimeSpan, TimeSpan>> GetTimeoutEnumerator();
    public virtual bool IsSafeToRetry(HttpMethod httpMethod);
    public virtual bool ShouldRetryBasedOnResponse(HttpMethod requestHttpMethod, HttpResponseMessage responseMessage);
    public virtual bool get_ShouldThrow503OnTimeout();
}
internal class Microsoft.Azure.Cosmos.HttpTimeoutPolicyControlPlaneRetriableHotPath : HttpTimeoutPolicy {
    public static HttpTimeoutPolicy Instance;
    public static HttpTimeoutPolicy InstanceShouldThrow503OnTimeout;
    public bool shouldThrow503OnTimeout;
    private static string Name;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<ValueTuple`2<TimeSpan, TimeSpan>> TimeoutsAndDelays;
    public string TimeoutPolicyName { get; }
    public int TotalRetryCount { get; }
    public bool ShouldThrow503OnTimeout { get; }
    private HttpTimeoutPolicyControlPlaneRetriableHotPath(bool shouldThrow503OnTimeout);
    private static HttpTimeoutPolicyControlPlaneRetriableHotPath();
    public virtual string get_TimeoutPolicyName();
    public virtual int get_TotalRetryCount();
    public virtual IEnumerator`1<ValueTuple`2<TimeSpan, TimeSpan>> GetTimeoutEnumerator();
    public virtual bool IsSafeToRetry(HttpMethod httpMethod);
    public virtual bool ShouldRetryBasedOnResponse(HttpMethod requestHttpMethod, HttpResponseMessage responseMessage);
    public virtual bool get_ShouldThrow503OnTimeout();
}
internal class Microsoft.Azure.Cosmos.HttpTimeoutPolicyDefault : HttpTimeoutPolicy {
    public static HttpTimeoutPolicy Instance;
    public static HttpTimeoutPolicy InstanceShouldThrow503OnTimeout;
    public bool shouldThrow503OnTimeout;
    private static string Name;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<ValueTuple`2<TimeSpan, TimeSpan>> TimeoutsAndDelays;
    public string TimeoutPolicyName { get; }
    public int TotalRetryCount { get; }
    public bool ShouldThrow503OnTimeout { get; }
    private HttpTimeoutPolicyDefault(bool shouldThrow503OnTimeout);
    private static HttpTimeoutPolicyDefault();
    public virtual string get_TimeoutPolicyName();
    public virtual int get_TotalRetryCount();
    public virtual IEnumerator`1<ValueTuple`2<TimeSpan, TimeSpan>> GetTimeoutEnumerator();
    public virtual bool IsSafeToRetry(HttpMethod httpMethod);
    public virtual bool ShouldRetryBasedOnResponse(HttpMethod requestHttpMethod, HttpResponseMessage responseMessage);
    public virtual bool get_ShouldThrow503OnTimeout();
}
internal class Microsoft.Azure.Cosmos.HttpTimeoutPolicyNoRetry : HttpTimeoutPolicy {
    public static HttpTimeoutPolicy Instance;
    private static string Name;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IReadOnlyList`1<ValueTuple`2<TimeSpan, TimeSpan>> TimeoutsAndDelays;
    public string TimeoutPolicyName { get; }
    public int TotalRetryCount { get; }
    private static HttpTimeoutPolicyNoRetry();
    public virtual string get_TimeoutPolicyName();
    public virtual int get_TotalRetryCount();
    public virtual IEnumerator`1<ValueTuple`2<TimeSpan, TimeSpan>> GetTimeoutEnumerator();
    public virtual bool IsSafeToRetry(HttpMethod httpMethod);
    public virtual bool ShouldRetryBasedOnResponse(HttpMethod requestHttpMethod, HttpResponseMessage responseMessage);
}
internal interface Microsoft.Azure.Cosmos.IChaosInterceptorFactory {
    public abstract virtual IChaosInterceptor CreateInterceptor(DocumentClient documentClient);
    public abstract virtual Task ConfigureChaosInterceptorAsync();
}
internal interface Microsoft.Azure.Cosmos.IComputeHash {
    public SecureString Key { get; }
    public abstract virtual Byte[] ComputeHash(ArraySegment`1<byte> bytesToHash);
    public abstract virtual SecureString get_Key();
}
internal interface Microsoft.Azure.Cosmos.ICosmosAuthorizationTokenProvider {
    public abstract virtual ValueTask`1<string> GetUserAuthorizationTokenAsync(string resourceAddress, string resourceType, string requestVerb, INameValueCollection headers, AuthorizationTokenType tokenType, ITrace trace);
}
internal interface Microsoft.Azure.Cosmos.IDocumentClient {
    public object Session { get; public set; }
    public Uri ServiceEndpoint { get; }
    public Uri WriteEndpoint { get; }
    public Uri ReadEndpoint { get; }
    public ConnectionPolicy ConnectionPolicy { get; }
    public SecureString AuthKey { get; }
    public ConsistencyLevel ConsistencyLevel { get; }
    public abstract virtual object get_Session();
    public abstract virtual void set_Session(object value);
    public abstract virtual Uri get_ServiceEndpoint();
    public abstract virtual Uri get_WriteEndpoint();
    public abstract virtual Uri get_ReadEndpoint();
    public abstract virtual ConnectionPolicy get_ConnectionPolicy();
    public abstract virtual SecureString get_AuthKey();
    public abstract virtual ConsistencyLevel get_ConsistencyLevel();
    public abstract virtual Task`1<AccountProperties> GetDatabaseAccountAsync();
    public abstract virtual Task`1<ResourceResponse`1<Database>> CreateDatabaseAsync(Database database, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Database>> CreateDatabaseIfNotExistsAsync(Database database, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<DocumentCollection>> CreateDocumentCollectionAsync(string databaseLink, DocumentCollection documentCollection, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<DocumentCollection>> CreateDocumentCollectionIfNotExistsAsync(string databaseLink, DocumentCollection documentCollection, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<DocumentCollection>> CreateDocumentCollectionAsync(Uri databaseUri, DocumentCollection documentCollection, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<DocumentCollection>> CreateDocumentCollectionIfNotExistsAsync(Uri databaseUri, DocumentCollection documentCollection, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Document>> CreateDocumentAsync(string collectionLink, object document, RequestOptions options, bool disableAutomaticIdGeneration, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse`1<Document>> CreateDocumentAsync(Uri documentCollectionUri, object document, RequestOptions options, bool disableAutomaticIdGeneration, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse`1<StoredProcedure>> CreateStoredProcedureAsync(string collectionLink, StoredProcedure storedProcedure, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<StoredProcedure>> CreateStoredProcedureAsync(Uri documentCollectionUri, StoredProcedure storedProcedure, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Trigger>> CreateTriggerAsync(string collectionLink, Trigger trigger, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Trigger>> CreateTriggerAsync(Uri documentCollectionUri, Trigger trigger, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<UserDefinedFunction>> CreateUserDefinedFunctionAsync(string collectionLink, UserDefinedFunction function, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<UserDefinedFunction>> CreateUserDefinedFunctionAsync(Uri documentCollectionUri, UserDefinedFunction function, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Database>> DeleteDatabaseAsync(string databaseLink, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Database>> DeleteDatabaseAsync(Uri databaseUri, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<DocumentCollection>> DeleteDocumentCollectionAsync(string documentCollectionLink, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<DocumentCollection>> DeleteDocumentCollectionAsync(Uri documentCollectionUri, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Document>> DeleteDocumentAsync(string documentLink, RequestOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse`1<Document>> DeleteDocumentAsync(Uri documentUri, RequestOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse`1<StoredProcedure>> DeleteStoredProcedureAsync(string storedProcedureLink, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<StoredProcedure>> DeleteStoredProcedureAsync(Uri storedProcedureUri, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Trigger>> DeleteTriggerAsync(string triggerLink, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Trigger>> DeleteTriggerAsync(Uri triggerUri, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<UserDefinedFunction>> DeleteUserDefinedFunctionAsync(string functionLink, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<UserDefinedFunction>> DeleteUserDefinedFunctionAsync(Uri functionUri, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Conflict>> DeleteConflictAsync(string conflictLink, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Conflict>> DeleteConflictAsync(Uri conflictUri, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<DocumentCollection>> ReplaceDocumentCollectionAsync(DocumentCollection documentCollection, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<DocumentCollection>> ReplaceDocumentCollectionAsync(Uri documentCollectionUri, DocumentCollection documentCollection, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Document>> ReplaceDocumentAsync(string documentLink, object document, RequestOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse`1<Document>> ReplaceDocumentAsync(Uri documentUri, object document, RequestOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse`1<Document>> ReplaceDocumentAsync(Document document, RequestOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse`1<StoredProcedure>> ReplaceStoredProcedureAsync(StoredProcedure storedProcedure, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<StoredProcedure>> ReplaceStoredProcedureAsync(Uri storedProcedureUri, StoredProcedure storedProcedure, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Trigger>> ReplaceTriggerAsync(Trigger trigger, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Trigger>> ReplaceTriggerAsync(Uri triggerUri, Trigger trigger, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<UserDefinedFunction>> ReplaceUserDefinedFunctionAsync(UserDefinedFunction function, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<UserDefinedFunction>> ReplaceUserDefinedFunctionAsync(Uri userDefinedFunctionUri, UserDefinedFunction function, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Offer>> ReplaceOfferAsync(Offer offer);
    public abstract virtual Task`1<ResourceResponse`1<Database>> ReadDatabaseAsync(string databaseLink, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Database>> ReadDatabaseAsync(Uri databaseUri, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<DocumentCollection>> ReadDocumentCollectionAsync(string documentCollectionLink, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<DocumentCollection>> ReadDocumentCollectionAsync(Uri documentCollectionUri, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Document>> ReadDocumentAsync(string documentLink, RequestOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse`1<Document>> ReadDocumentAsync(Uri documentUri, RequestOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<DocumentResponse`1<T>> ReadDocumentAsync(string documentLink, RequestOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<DocumentResponse`1<T>> ReadDocumentAsync(Uri documentUri, RequestOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse`1<StoredProcedure>> ReadStoredProcedureAsync(string storedProcedureLink, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<StoredProcedure>> ReadStoredProcedureAsync(Uri storedProcedureUri, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Trigger>> ReadTriggerAsync(string triggerLink, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Trigger>> ReadTriggerAsync(Uri triggerUri, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<UserDefinedFunction>> ReadUserDefinedFunctionAsync(string functionLink, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<UserDefinedFunction>> ReadUserDefinedFunctionAsync(Uri functionUri, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Conflict>> ReadConflictAsync(string conflictLink, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Conflict>> ReadConflictAsync(Uri conflictUri, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Offer>> ReadOfferAsync(string offerLink);
    public abstract virtual Task`1<DocumentFeedResponse`1<Database>> ReadDatabaseFeedAsync(FeedOptions options);
    public abstract virtual Task`1<DocumentFeedResponse`1<PartitionKeyRange>> ReadPartitionKeyRangeFeedAsync(string partitionKeyRangesOrCollectionLink, FeedOptions options);
    public abstract virtual Task`1<DocumentFeedResponse`1<PartitionKeyRange>> ReadPartitionKeyRangeFeedAsync(Uri partitionKeyRangesOrCollectionUri, FeedOptions options);
    public abstract virtual Task`1<DocumentFeedResponse`1<DocumentCollection>> ReadDocumentCollectionFeedAsync(string collectionsLink, FeedOptions options);
    public abstract virtual Task`1<DocumentFeedResponse`1<DocumentCollection>> ReadDocumentCollectionFeedAsync(Uri databaseUri, FeedOptions options);
    public abstract virtual Task`1<DocumentFeedResponse`1<object>> ReadDocumentFeedAsync(string documentsLink, FeedOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<DocumentFeedResponse`1<object>> ReadDocumentFeedAsync(Uri documentCollectionUri, FeedOptions options, CancellationToken cancellationToken);
    public abstract virtual Task`1<DocumentFeedResponse`1<StoredProcedure>> ReadStoredProcedureFeedAsync(string storedProceduresLink, FeedOptions options);
    public abstract virtual Task`1<DocumentFeedResponse`1<StoredProcedure>> ReadStoredProcedureFeedAsync(Uri documentCollectionUri, FeedOptions options);
    public abstract virtual Task`1<DocumentFeedResponse`1<Trigger>> ReadTriggerFeedAsync(string triggersLink, FeedOptions options);
    public abstract virtual Task`1<DocumentFeedResponse`1<Trigger>> ReadTriggerFeedAsync(Uri documentCollectionUri, FeedOptions options);
    public abstract virtual Task`1<DocumentFeedResponse`1<UserDefinedFunction>> ReadUserDefinedFunctionFeedAsync(string userDefinedFunctionsLink, FeedOptions options);
    public abstract virtual Task`1<DocumentFeedResponse`1<UserDefinedFunction>> ReadUserDefinedFunctionFeedAsync(Uri documentCollectionUri, FeedOptions options);
    public abstract virtual Task`1<DocumentFeedResponse`1<Conflict>> ReadConflictFeedAsync(string conflictsLink, FeedOptions options);
    public abstract virtual Task`1<DocumentFeedResponse`1<Conflict>> ReadConflictFeedAsync(Uri documentCollectionUri, FeedOptions options);
    public abstract virtual Task`1<DocumentFeedResponse`1<Offer>> ReadOffersFeedAsync(FeedOptions options);
    public abstract virtual Task`1<StoredProcedureResponse`1<TValue>> ExecuteStoredProcedureAsync(string storedProcedureLink, Object[] procedureParams);
    public abstract virtual Task`1<StoredProcedureResponse`1<TValue>> ExecuteStoredProcedureAsync(Uri storedProcedureUri, Object[] procedureParams);
    public abstract virtual Task`1<StoredProcedureResponse`1<TValue>> ExecuteStoredProcedureAsync(string storedProcedureLink, RequestOptions options, Object[] procedureParams);
    public abstract virtual Task`1<StoredProcedureResponse`1<TValue>> ExecuteStoredProcedureAsync(Uri storedProcedureUri, RequestOptions options, Object[] procedureParams);
    public abstract virtual Task`1<StoredProcedureResponse`1<TValue>> ExecuteStoredProcedureAsync(string storedProcedureLink, RequestOptions options, CancellationToken cancellationToken, Object[] procedureParams);
    public abstract virtual Task`1<StoredProcedureResponse`1<TValue>> ExecuteStoredProcedureAsync(Uri storedProcedureUri, RequestOptions options, CancellationToken cancellationToken, Object[] procedureParams);
    public abstract virtual Task`1<ResourceResponse`1<Document>> UpsertDocumentAsync(string collectionLink, object document, RequestOptions options, bool disableAutomaticIdGeneration, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse`1<Document>> UpsertDocumentAsync(Uri documentCollectionUri, object document, RequestOptions options, bool disableAutomaticIdGeneration, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse`1<StoredProcedure>> UpsertStoredProcedureAsync(string collectionLink, StoredProcedure storedProcedure, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<StoredProcedure>> UpsertStoredProcedureAsync(Uri documentCollectionUri, StoredProcedure storedProcedure, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Trigger>> UpsertTriggerAsync(string collectionLink, Trigger trigger, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<Trigger>> UpsertTriggerAsync(Uri documentCollectionUri, Trigger trigger, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<UserDefinedFunction>> UpsertUserDefinedFunctionAsync(string collectionLink, UserDefinedFunction function, RequestOptions options);
    public abstract virtual Task`1<ResourceResponse`1<UserDefinedFunction>> UpsertUserDefinedFunctionAsync(Uri documentCollectionUri, UserDefinedFunction function, RequestOptions options);
    public abstract virtual IOrderedQueryable`1<DocumentCollection> CreateDocumentCollectionQuery(Uri databaseUri, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateDocumentCollectionQuery(Uri databaseUri, string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateDocumentCollectionQuery(Uri databaseUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<StoredProcedure> CreateStoredProcedureQuery(Uri documentCollectionUri, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateStoredProcedureQuery(Uri documentCollectionUri, string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateStoredProcedureQuery(Uri documentCollectionUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<Trigger> CreateTriggerQuery(Uri documentCollectionUri, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateTriggerQuery(Uri documentCollectionUri, string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateTriggerQuery(Uri documentCollectionUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<UserDefinedFunction> CreateUserDefinedFunctionQuery(Uri documentCollectionUri, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateUserDefinedFunctionQuery(Uri documentCollectionUri, string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateUserDefinedFunctionQuery(Uri documentCollectionUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<Conflict> CreateConflictQuery(Uri documentCollectionUri, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateConflictQuery(Uri documentCollectionUri, string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateConflictQuery(Uri documentCollectionUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<T> CreateDocumentQuery(Uri documentCollectionUri, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<T> CreateDocumentQuery(Uri documentCollectionUri, string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<T> CreateDocumentQuery(Uri documentCollectionUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<Document> CreateDocumentQuery(Uri documentCollectionUri, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateDocumentQuery(Uri documentCollectionUri, string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateDocumentQuery(Uri documentCollectionUri, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IDocumentQuery`1<Document> CreateDocumentChangeFeedQuery(Uri collectionLink, ChangeFeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<Database> CreateDatabaseQuery(FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateDatabaseQuery(string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateDatabaseQuery(SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<DocumentCollection> CreateDocumentCollectionQuery(string databaseLink, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateDocumentCollectionQuery(string databaseLink, string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateDocumentCollectionQuery(string databaseLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<StoredProcedure> CreateStoredProcedureQuery(string collectionLink, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateStoredProcedureQuery(string collectionLink, string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateStoredProcedureQuery(string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<Trigger> CreateTriggerQuery(string collectionLink, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateTriggerQuery(string collectionLink, string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateTriggerQuery(string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<UserDefinedFunction> CreateUserDefinedFunctionQuery(string collectionLink, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateUserDefinedFunctionQuery(string collectionLink, string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateUserDefinedFunctionQuery(string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<Conflict> CreateConflictQuery(string collectionLink, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateConflictQuery(string collectionLink, string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateConflictQuery(string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<T> CreateDocumentQuery(string collectionLink, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<T> CreateDocumentQuery(string collectionLink, string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<T> CreateDocumentQuery(string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<Document> CreateDocumentQuery(string collectionLink, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateDocumentQuery(string collectionLink, string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateDocumentQuery(string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions);
    public abstract virtual IDocumentQuery`1<Document> CreateDocumentChangeFeedQuery(string collectionLink, ChangeFeedOptions feedOptions);
    public abstract virtual IOrderedQueryable`1<Offer> CreateOfferQuery(FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateOfferQuery(string sqlExpression, FeedOptions feedOptions);
    public abstract virtual IQueryable`1<object> CreateOfferQuery(SqlQuerySpec querySpec, FeedOptions feedOptions);
}
internal interface Microsoft.Azure.Cosmos.IDocumentClientInternal {
    public abstract virtual Task`1<AccountProperties> GetDatabaseAccountInternalAsync(Uri serviceEndpoint, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Cosmos.IDocumentClientRetryPolicy {
    public abstract virtual void OnBeforeSendRequest(DocumentServiceRequest request);
    public abstract virtual Task`1<ShouldRetryResult> ShouldRetryAsync(ResponseMessage cosmosResponseMessage, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Cosmos.IDocumentFeedResponse`1 {
    public long DatabaseQuota { get; }
    public long DatabaseUsage { get; }
    public long CollectionQuota { get; }
    public long CollectionUsage { get; }
    public long UserQuota { get; }
    public long UserUsage { get; }
    public long PermissionQuota { get; }
    public long PermissionUsage { get; }
    public long CollectionSizeQuota { get; }
    public long CollectionSizeUsage { get; }
    public long StoredProceduresQuota { get; }
    public long StoredProceduresUsage { get; }
    public long TriggersQuota { get; }
    public long TriggersUsage { get; }
    public long UserDefinedFunctionsQuota { get; }
    public long UserDefinedFunctionsUsage { get; }
    public int Count { get; }
    public string MaxResourceQuota { get; }
    public string CurrentResourceQuotaUsage { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ResponseContinuation { get; }
    public string SessionToken { get; }
    public string ContentLocation { get; }
    public NameValueCollection ResponseHeaders { get; }
    public abstract virtual long get_DatabaseQuota();
    public abstract virtual long get_DatabaseUsage();
    public abstract virtual long get_CollectionQuota();
    public abstract virtual long get_CollectionUsage();
    public abstract virtual long get_UserQuota();
    public abstract virtual long get_UserUsage();
    public abstract virtual long get_PermissionQuota();
    public abstract virtual long get_PermissionUsage();
    public abstract virtual long get_CollectionSizeQuota();
    public abstract virtual long get_CollectionSizeUsage();
    public abstract virtual long get_StoredProceduresQuota();
    public abstract virtual long get_StoredProceduresUsage();
    public abstract virtual long get_TriggersQuota();
    public abstract virtual long get_TriggersUsage();
    public abstract virtual long get_UserDefinedFunctionsQuota();
    public abstract virtual long get_UserDefinedFunctionsUsage();
    public abstract virtual int get_Count();
    public abstract virtual string get_MaxResourceQuota();
    public abstract virtual string get_CurrentResourceQuotaUsage();
    public abstract virtual double get_RequestCharge();
    public abstract virtual string get_ActivityId();
    public abstract virtual string get_ResponseContinuation();
    public abstract virtual string get_SessionToken();
    public abstract virtual string get_ContentLocation();
    public abstract virtual NameValueCollection get_ResponseHeaders();
    public abstract virtual IEnumerator`1<T> GetEnumerator();
}
internal interface Microsoft.Azure.Cosmos.IFeedRangeAsyncVisitor`1 {
    public abstract virtual Task`1<TResult> VisitAsync(FeedRangePartitionKey feedRange, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> VisitAsync(FeedRangePartitionKeyRange feedRange, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> VisitAsync(FeedRangeEpk feedRange, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Cosmos.IFeedRangeAsyncVisitor`2 {
    public abstract virtual Task`1<TResult> VisitAsync(FeedRangePartitionKey feedRange, TArg argument, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> VisitAsync(FeedRangePartitionKeyRange feedRange, TArg argument, CancellationToken cancellationToken);
    public abstract virtual Task`1<TResult> VisitAsync(FeedRangeEpk feedRange, TArg argument, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Cosmos.IFeedRangeContinuationVisitor {
    public abstract virtual void Visit(FeedRangeCompositeContinuation feedRangeCompositeContinuation);
}
internal interface Microsoft.Azure.Cosmos.IFeedRangeTransformer`1 {
    public abstract virtual TResult Visit(FeedRangePartitionKey feedRange);
    public abstract virtual TResult Visit(FeedRangePartitionKeyRange feedRange);
    public abstract virtual TResult Visit(FeedRangeEpk feedRange);
}
internal interface Microsoft.Azure.Cosmos.IFeedRangeVisitor {
    public abstract virtual void Visit(FeedRangePartitionKey feedRange);
    public abstract virtual void Visit(FeedRangePartitionKeyRange feedRange);
    public abstract virtual void Visit(FeedRangeEpk feedRange);
}
internal interface Microsoft.Azure.Cosmos.IFeedRangeVisitor`1 {
    public abstract virtual void Visit(FeedRangePartitionKey feedRange, TInput input);
    public abstract virtual void Visit(FeedRangePartitionKeyRange feedRange, TInput input);
    public abstract virtual void Visit(FeedRangeEpk feedRange, TInput input);
}
internal interface Microsoft.Azure.Cosmos.IFeedRangeVisitor`2 {
    public abstract virtual TOutput Visit(FeedRangePartitionKey feedRange, TInput input);
    public abstract virtual TOutput Visit(FeedRangePartitionKeyRange feedRange, TInput input);
    public abstract virtual TOutput Visit(FeedRangeEpk feedRange, TInput input);
}
internal class Microsoft.Azure.Cosmos.IgnoreForUnitTest : Attribute {
}
internal interface Microsoft.Azure.Cosmos.IMediaHandler {
    public abstract virtual Task UploadMediaAsync(string mediaId, Stream mediaStream, INameValueCollection headers, int singleBlobUploadThresholdInBytes, TimeSpan blobUploadTimeoutSeconds);
    public abstract virtual Task`1<Tuple`2<INameValueCollection, INameValueCollection>> HeadMediaAsync(string mediaId, INameValueCollection headers);
    public abstract virtual Task`1<Tuple`3<Stream, INameValueCollection, INameValueCollection>> DownloadMediaAsync(string mediaId, INameValueCollection headers, TimeSpan blobDownloadTimeoutSeconds);
    public abstract virtual Task DeleteMediaAsync(string mediaId, INameValueCollection headers);
}
internal interface Microsoft.Azure.Cosmos.IMediaResponse {
    public string ActivityId { get; }
    public long ContentLength { get; }
    public string ContentType { get; }
    public long CurrentMediaStorageUsageInMB { get; }
    public long MaxMediaStorageUsageInMB { get; }
    public Stream Media { get; }
    public NameValueCollection ResponseHeaders { get; }
    public string Slug { get; }
    public abstract virtual string get_ActivityId();
    public abstract virtual long get_ContentLength();
    public abstract virtual string get_ContentType();
    public abstract virtual long get_CurrentMediaStorageUsageInMB();
    public abstract virtual long get_MaxMediaStorageUsageInMB();
    public abstract virtual Stream get_Media();
    public abstract virtual NameValueCollection get_ResponseHeaders();
    public abstract virtual string get_Slug();
}
public class Microsoft.Azure.Cosmos.IncludedPath : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<Index> <Indexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsFullIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [JsonPropertyAttribute]
internal Collection`1<Index> Indexes { get; internal set; }
    [JsonPropertyAttribute]
internal Nullable`1<bool> IsFullIndex { get; internal set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
internal Collection`1<Index> get_Indexes();
    [CompilerGeneratedAttribute]
internal void set_Indexes(Collection`1<Index> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_IsFullIndex();
    [CompilerGeneratedAttribute]
internal void set_IsFullIndex(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
[JsonConverterAttribute("Microsoft.Azure.Cosmos.CosmosIndexJsonConverter")]
internal abstract class Microsoft.Azure.Cosmos.Index : object {
    [CompilerGeneratedAttribute]
private IndexKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public IndexKind Kind { get; public set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    protected Index(IndexKind kind);
    [CompilerGeneratedAttribute]
public IndexKind get_Kind();
    [CompilerGeneratedAttribute]
public void set_Kind(IndexKind value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
    public static RangeIndex Range(DataType dataType);
    public static RangeIndex Range(DataType dataType, short precision);
    public static HashIndex Hash(DataType dataType);
    public static HashIndex Hash(DataType dataType, short precision);
    public static SpatialIndex Spatial(DataType dataType);
}
public enum Microsoft.Azure.Cosmos.IndexingDirective : Enum {
    public int value__;
    public static IndexingDirective Default;
    public static IndexingDirective Include;
    public static IndexingDirective Exclude;
}
internal static class Microsoft.Azure.Cosmos.IndexingDirectiveStrings : object {
    public static string Default;
    public static string Include;
    public static string Exclude;
    private static IndexingDirectiveStrings();
    public static string FromIndexingDirective(IndexingDirective directive);
}
public enum Microsoft.Azure.Cosmos.IndexingMode : Enum {
    public int value__;
    public static IndexingMode Consistent;
    public static IndexingMode Lazy;
    public static IndexingMode None;
}
public class Microsoft.Azure.Cosmos.IndexingPolicy : object {
    internal static string DefaultPath;
    [CompilerGeneratedAttribute]
private bool <Automatic>k__BackingField;
    [CompilerGeneratedAttribute]
private IndexingMode <IndexingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<IncludedPath> <IncludedPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<ExcludedPath> <ExcludedPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<Collection`1<CompositePath>> <CompositeIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<SpatialPath> <SpatialIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<VectorIndexPath> <VectorIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public bool Automatic { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public IndexingMode IndexingMode { get; public set; }
    [JsonPropertyAttribute]
public Collection`1<IncludedPath> IncludedPaths { get; internal set; }
    [JsonPropertyAttribute]
public Collection`1<ExcludedPath> ExcludedPaths { get; internal set; }
    [JsonPropertyAttribute]
public Collection`1<Collection`1<CompositePath>> CompositeIndexes { get; internal set; }
    [JsonPropertyAttribute]
public Collection`1<SpatialPath> SpatialIndexes { get; internal set; }
    [JsonPropertyAttribute]
internal Collection`1<VectorIndexPath> VectorIndexes { get; internal set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_Automatic();
    [CompilerGeneratedAttribute]
public void set_Automatic(bool value);
    [CompilerGeneratedAttribute]
public IndexingMode get_IndexingMode();
    [CompilerGeneratedAttribute]
public void set_IndexingMode(IndexingMode value);
    [CompilerGeneratedAttribute]
public Collection`1<IncludedPath> get_IncludedPaths();
    [CompilerGeneratedAttribute]
internal void set_IncludedPaths(Collection`1<IncludedPath> value);
    [CompilerGeneratedAttribute]
public Collection`1<ExcludedPath> get_ExcludedPaths();
    [CompilerGeneratedAttribute]
internal void set_ExcludedPaths(Collection`1<ExcludedPath> value);
    [CompilerGeneratedAttribute]
public Collection`1<Collection`1<CompositePath>> get_CompositeIndexes();
    [CompilerGeneratedAttribute]
internal void set_CompositeIndexes(Collection`1<Collection`1<CompositePath>> value);
    [CompilerGeneratedAttribute]
public Collection`1<SpatialPath> get_SpatialIndexes();
    [CompilerGeneratedAttribute]
internal void set_SpatialIndexes(Collection`1<SpatialPath> value);
    [CompilerGeneratedAttribute]
internal Collection`1<VectorIndexPath> get_VectorIndexes();
    [CompilerGeneratedAttribute]
internal void set_VectorIndexes(Collection`1<VectorIndexPath> value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public enum Microsoft.Azure.Cosmos.IndexKind : Enum {
    public int value__;
    public static IndexKind Hash;
    public static IndexKind Range;
    public static IndexKind Spatial;
}
internal class Microsoft.Azure.Cosmos.InterlockIncrementCheck : object {
    private int maxConcurrentOperations;
    private int counter;
    public InterlockIncrementCheck(int maxConcurrentOperations);
    public void EnterLockCheck();
}
[FlagsAttribute]
internal enum Microsoft.Azure.Cosmos.Internal.PermissionMode : Enum {
    public byte value__;
    public static PermissionMode Read;
    public static PermissionMode All;
}
internal interface Microsoft.Azure.Cosmos.IResourceResponseBase {
    public long DatabaseQuota { get; }
    public long DatabaseUsage { get; }
    public long CollectionQuota { get; }
    public long CollectionUsage { get; }
    public long UserQuota { get; }
    public long UserUsage { get; }
    public long PermissionQuota { get; }
    public long PermissionUsage { get; }
    public long CollectionSizeQuota { get; }
    public long CollectionSizeUsage { get; }
    public long DocumentQuota { get; }
    public long DocumentUsage { get; }
    public long StoredProceduresQuota { get; }
    public long StoredProceduresUsage { get; }
    public long TriggersQuota { get; }
    public long TriggersUsage { get; }
    public long UserDefinedFunctionsQuota { get; }
    public long UserDefinedFunctionsUsage { get; }
    public string ActivityId { get; }
    public string SessionToken { get; }
    public HttpStatusCode StatusCode { get; }
    public string MaxResourceQuota { get; }
    public string CurrentResourceQuotaUsage { get; }
    public Stream ResponseStream { get; }
    public double RequestCharge { get; }
    public NameValueCollection ResponseHeaders { get; }
    public string ContentLocation { get; }
    public long IndexTransformationProgress { get; }
    public long LazyIndexingProgress { get; }
    public abstract virtual long get_DatabaseQuota();
    public abstract virtual long get_DatabaseUsage();
    public abstract virtual long get_CollectionQuota();
    public abstract virtual long get_CollectionUsage();
    public abstract virtual long get_UserQuota();
    public abstract virtual long get_UserUsage();
    public abstract virtual long get_PermissionQuota();
    public abstract virtual long get_PermissionUsage();
    public abstract virtual long get_CollectionSizeQuota();
    public abstract virtual long get_CollectionSizeUsage();
    public abstract virtual long get_DocumentQuota();
    public abstract virtual long get_DocumentUsage();
    public abstract virtual long get_StoredProceduresQuota();
    public abstract virtual long get_StoredProceduresUsage();
    public abstract virtual long get_TriggersQuota();
    public abstract virtual long get_TriggersUsage();
    public abstract virtual long get_UserDefinedFunctionsQuota();
    public abstract virtual long get_UserDefinedFunctionsUsage();
    public abstract virtual string get_ActivityId();
    public abstract virtual string get_SessionToken();
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual string get_MaxResourceQuota();
    public abstract virtual string get_CurrentResourceQuotaUsage();
    public abstract virtual Stream get_ResponseStream();
    public abstract virtual double get_RequestCharge();
    public abstract virtual NameValueCollection get_ResponseHeaders();
    public abstract virtual string get_ContentLocation();
    public abstract virtual long get_IndexTransformationProgress();
    public abstract virtual long get_LazyIndexingProgress();
}
internal interface Microsoft.Azure.Cosmos.IRetryPolicyFactory {
    public abstract virtual IDocumentClientRetryPolicy GetRequestPolicy();
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.IRoutingMapProviderExtensions : object {
    private static string Max(string left, string right);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.IRoutingMapProviderExtensions/<TryGetRangeByEffectivePartitionKeyAsync>d__1")]
[ExtensionAttribute]
public static Task`1<PartitionKeyRange> TryGetRangeByEffectivePartitionKeyAsync(IRoutingMapProvider routingMapProvider, string collectionResourceId, string effectivePartitionKey, ITrace trace);
    private static bool IsNonOverlapping(SortedSet`1<Range`1<T>> sortedSet);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.IRoutingMapProviderExtensions/<TryGetOverlappingRangesAsync>d__3")]
[ExtensionAttribute]
public static Task`1<List`1<PartitionKeyRange>> TryGetOverlappingRangesAsync(IRoutingMapProvider routingMapProvider, string collectionResourceId, IEnumerable`1<Range`1<string>> sortedRanges, ITrace trace, bool forceRefresh);
}
internal interface Microsoft.Azure.Cosmos.IStoredProcedureResponse`1 {
    public string ActivityId { get; }
    public string CurrentResourceQuotaUsage { get; }
    public string MaxResourceQuota { get; }
    public double RequestCharge { get; }
    public TValue Response { get; }
    public NameValueCollection ResponseHeaders { get; }
    public string SessionToken { get; }
    public string ScriptLog { get; }
    public HttpStatusCode StatusCode { get; }
    public abstract virtual string get_ActivityId();
    public abstract virtual string get_CurrentResourceQuotaUsage();
    public abstract virtual string get_MaxResourceQuota();
    public abstract virtual double get_RequestCharge();
    public abstract virtual TValue get_Response();
    public abstract virtual NameValueCollection get_ResponseHeaders();
    public abstract virtual string get_SessionToken();
    public abstract virtual string get_ScriptLog();
    public abstract virtual HttpStatusCode get_StatusCode();
}
internal class Microsoft.Azure.Cosmos.ItemBatchOperation : object {
    protected Memory`1<byte> body;
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private Nullable`1<PartitionKey> <PartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationType <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <ResourceStream>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionalBatchItemRequestOptions <RequestOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OperationIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ContainerInternal <ContainerInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartitionKeyJson>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionKey <ParsedPartitionKey>k__BackingField;
    private CosmosClientContext ClientContext;
    [CompilerGeneratedAttribute]
private ItemBatchOperationContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ITrace <Trace>k__BackingField;
    public Nullable`1<PartitionKey> PartitionKey { get; internal set; }
    public string Id { get; }
    public OperationType OperationType { get; }
    public Stream ResourceStream { get; protected set; }
    public TransactionalBatchItemRequestOptions RequestOptions { get; }
    public int OperationIndex { get; internal set; }
    internal ContainerInternal ContainerInternal { get; }
    internal string PartitionKeyJson { get; internal set; }
    internal PartitionKey ParsedPartitionKey { get; internal set; }
    internal Memory`1<byte> ResourceBody { get; internal set; }
    internal ItemBatchOperationContext Context { get; private set; }
    internal ITrace Trace { get; internal set; }
    public ItemBatchOperation(OperationType operationType, int operationIndex, PartitionKey partitionKey, string id, Stream resourceStream, TransactionalBatchItemRequestOptions requestOptions, CosmosClientContext cosmosClientContext);
    public ItemBatchOperation(OperationType operationType, int operationIndex, ContainerInternal containerCore, string id, Stream resourceStream, TransactionalBatchItemRequestOptions requestOptions);
    [CompilerGeneratedAttribute]
public Nullable`1<PartitionKey> get_PartitionKey();
    [CompilerGeneratedAttribute]
internal void set_PartitionKey(Nullable`1<PartitionKey> value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public OperationType get_OperationType();
    [CompilerGeneratedAttribute]
public Stream get_ResourceStream();
    [CompilerGeneratedAttribute]
protected void set_ResourceStream(Stream value);
    [CompilerGeneratedAttribute]
public TransactionalBatchItemRequestOptions get_RequestOptions();
    [CompilerGeneratedAttribute]
public int get_OperationIndex();
    [CompilerGeneratedAttribute]
internal void set_OperationIndex(int value);
    [CompilerGeneratedAttribute]
internal ContainerInternal get_ContainerInternal();
    [CompilerGeneratedAttribute]
internal string get_PartitionKeyJson();
    [CompilerGeneratedAttribute]
internal void set_PartitionKeyJson(string value);
    [CompilerGeneratedAttribute]
internal PartitionKey get_ParsedPartitionKey();
    [CompilerGeneratedAttribute]
internal void set_ParsedPartitionKey(PartitionKey value);
    internal Memory`1<byte> get_ResourceBody();
    internal void set_ResourceBody(Memory`1<byte> value);
    [CompilerGeneratedAttribute]
internal ItemBatchOperationContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ItemBatchOperationContext value);
    [CompilerGeneratedAttribute]
internal ITrace get_Trace();
    [CompilerGeneratedAttribute]
internal void set_Trace(ITrace value);
    public sealed virtual void Dispose();
    internal static Result WriteOperation(RowWriter& writer, TypeArgument typeArg, ItemBatchOperation operation);
    internal int GetApproximateSerializedLength();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ItemBatchOperation/<MaterializeResourceAsync>d__51")]
internal virtual Task MaterializeResourceAsync(CosmosSerializerCore serializerCore, CancellationToken cancellationToken);
    internal void AttachContext(ItemBatchOperationContext context);
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Azure.Cosmos.ItemBatchOperation`1 : ItemBatchOperation {
    [CompilerGeneratedAttribute]
private T <Resource>k__BackingField;
    public T Resource { get; private set; }
    public ItemBatchOperation`1(OperationType operationType, int operationIndex, PartitionKey partitionKey, T resource, string id, TransactionalBatchItemRequestOptions requestOptions, CosmosClientContext cosmosClientContext);
    public ItemBatchOperation`1(OperationType operationType, int operationIndex, T resource, ContainerInternal containerCore, string id, TransactionalBatchItemRequestOptions requestOptions);
    [CompilerGeneratedAttribute]
public T get_Resource();
    [CompilerGeneratedAttribute]
private void set_Resource(T value);
    internal virtual Task MaterializeResourceAsync(CosmosSerializerCore serializerCore, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ItemBatchOperationContext : object {
    [CompilerGeneratedAttribute]
private string <PartitionKeyRangeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClientEncrypted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntendedCollectionRidValue>k__BackingField;
    [CompilerGeneratedAttribute]
private BatchAsyncBatcher <CurrentBatcher>k__BackingField;
    private IDocumentClientRetryPolicy retryPolicy;
    private TaskCompletionSource`1<TransactionalBatchOperationResult> taskCompletionSource;
    private ITrace initialTrace;
    public string PartitionKeyRangeId { get; private set; }
    public bool IsClientEncrypted { get; public set; }
    public string IntendedCollectionRidValue { get; public set; }
    public BatchAsyncBatcher CurrentBatcher { get; public set; }
    public Task`1<TransactionalBatchOperationResult> OperationTask { get; }
    public ItemBatchOperationContext(string partitionKeyRangeId, ITrace trace, IDocumentClientRetryPolicy retryPolicy);
    [CompilerGeneratedAttribute]
public string get_PartitionKeyRangeId();
    [CompilerGeneratedAttribute]
private void set_PartitionKeyRangeId(string value);
    [CompilerGeneratedAttribute]
public bool get_IsClientEncrypted();
    [CompilerGeneratedAttribute]
public void set_IsClientEncrypted(bool value);
    [CompilerGeneratedAttribute]
public string get_IntendedCollectionRidValue();
    [CompilerGeneratedAttribute]
public void set_IntendedCollectionRidValue(string value);
    [CompilerGeneratedAttribute]
public BatchAsyncBatcher get_CurrentBatcher();
    [CompilerGeneratedAttribute]
public void set_CurrentBatcher(BatchAsyncBatcher value);
    public Task`1<TransactionalBatchOperationResult> get_OperationTask();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ItemBatchOperationContext/<ShouldRetryAsync>d__22")]
public Task`1<ShouldRetryResult> ShouldRetryAsync(TransactionalBatchOperationResult batchOperationResult, CancellationToken cancellationToken);
    public void Complete(BatchAsyncBatcher completer, TransactionalBatchOperationResult result);
    public void Fail(BatchAsyncBatcher completer, Exception exception);
    public void ReRouteOperation(string newPartitionKeyRangeId, ITrace trace);
    public sealed virtual void Dispose();
    private bool AssertBatcher(BatchAsyncBatcher completer, Exception innerException);
}
public class Microsoft.Azure.Cosmos.ItemRequestOptions : RequestOptions {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <PreTriggers>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <PostTriggers>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<IndexingDirective> <IndexingDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableContentResponseOnWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private DedicatedGatewayRequestOptions <DedicatedGatewayRequestOptions>k__BackingField;
    public IEnumerable`1<string> PreTriggers { get; public set; }
    public IEnumerable`1<string> PostTriggers { get; public set; }
    public Nullable`1<IndexingDirective> IndexingDirective { get; public set; }
    public string SessionToken { get; public set; }
    public Nullable`1<ConsistencyLevel> ConsistencyLevel { get; public set; }
    public Nullable`1<bool> EnableContentResponseOnWrite { get; public set; }
    public DedicatedGatewayRequestOptions DedicatedGatewayRequestOptions { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_PreTriggers();
    [CompilerGeneratedAttribute]
public void set_PreTriggers(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_PostTriggers();
    [CompilerGeneratedAttribute]
public void set_PostTriggers(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<IndexingDirective> get_IndexingDirective();
    [CompilerGeneratedAttribute]
public void set_IndexingDirective(Nullable`1<IndexingDirective> value);
    [CompilerGeneratedAttribute]
public string get_SessionToken();
    [CompilerGeneratedAttribute]
public void set_SessionToken(string value);
    public Nullable`1<ConsistencyLevel> get_ConsistencyLevel();
    public void set_ConsistencyLevel(Nullable`1<ConsistencyLevel> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableContentResponseOnWrite();
    [CompilerGeneratedAttribute]
public void set_EnableContentResponseOnWrite(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public DedicatedGatewayRequestOptions get_DedicatedGatewayRequestOptions();
    [CompilerGeneratedAttribute]
public void set_DedicatedGatewayRequestOptions(DedicatedGatewayRequestOptions value);
    internal virtual void PopulateRequestOptions(RequestMessage request);
}
public class Microsoft.Azure.Cosmos.ItemResponse`1 : Response`1<T> {
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    internal RequestMessage RequestMessage { get; }
    public Headers Headers { get; }
    public T Resource { get; }
    public HttpStatusCode StatusCode { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ETag { get; }
    internal ItemResponse`1(HttpStatusCode httpStatusCode, Headers headers, T item, CosmosDiagnostics diagnostics, RequestMessage requestMessage);
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public virtual T get_Resource();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    public virtual double get_RequestCharge();
    public virtual string get_ActivityId();
    public virtual string get_ETag();
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.Json.BitArrayExtensions : object {
    [ExtensionAttribute]
public static bool SetEquals(BitArray first, BitArray second);
    [ExtensionAttribute]
public static bool IsSubset(BitArray first, BitArray second);
}
internal static class Microsoft.Azure.Cosmos.Json.ByteOrder : object {
    public static byte Reverse(byte value);
    public static bool Reverse(bool value);
    public static char Reverse(char value);
    public static short Reverse(short value);
    public static ushort Reverse(ushort value);
    public static int Reverse(int value);
    public static UInt32 Reverse(UInt32 value);
    public static long Reverse(long value);
    public static ulong Reverse(ulong value);
    public static float Reverse(float value);
    public static double Reverse(double value);
}
internal interface Microsoft.Azure.Cosmos.Json.IJsonBinaryWriterExtensions {
    public abstract virtual void WriteRawJsonValue(ReadOnlyMemory`1<byte> rootBuffer, ReadOnlyMemory`1<byte> rawJsonValue, bool isRootNode, bool isFieldName);
}
internal interface Microsoft.Azure.Cosmos.Json.IJsonNavigator {
    public JsonSerializationFormat SerializationFormat { get; }
    public abstract virtual JsonSerializationFormat get_SerializationFormat();
    public abstract virtual IJsonNavigatorNode GetRootNode();
    public abstract virtual JsonNodeType GetNodeType(IJsonNavigatorNode node);
    public abstract virtual Number64 GetNumber64Value(IJsonNavigatorNode numberNode);
    public abstract virtual bool TryGetBufferedStringValue(IJsonNavigatorNode stringNode, Utf8Memory& value);
    public abstract virtual UtfAnyString GetStringValue(IJsonNavigatorNode stringNode);
    public abstract virtual sbyte GetInt8Value(IJsonNavigatorNode numberNode);
    public abstract virtual short GetInt16Value(IJsonNavigatorNode numberNode);
    public abstract virtual int GetInt32Value(IJsonNavigatorNode numberNode);
    public abstract virtual long GetInt64Value(IJsonNavigatorNode numberNode);
    public abstract virtual float GetFloat32Value(IJsonNavigatorNode numberNode);
    public abstract virtual double GetFloat64Value(IJsonNavigatorNode numberNode);
    public abstract virtual UInt32 GetUInt32Value(IJsonNavigatorNode numberNode);
    public abstract virtual Guid GetGuidValue(IJsonNavigatorNode guidNode);
    public abstract virtual ReadOnlyMemory`1<byte> GetBinaryValue(IJsonNavigatorNode binaryNode);
    public abstract virtual bool TryGetBufferedBinaryValue(IJsonNavigatorNode binaryNode, ReadOnlyMemory`1& bufferedBinaryValue);
    public abstract virtual int GetArrayItemCount(IJsonNavigatorNode arrayNode);
    public abstract virtual IJsonNavigatorNode GetArrayItemAt(IJsonNavigatorNode arrayNode, int index);
    public abstract virtual IEnumerable`1<IJsonNavigatorNode> GetArrayItems(IJsonNavigatorNode arrayNode);
    public abstract virtual int GetObjectPropertyCount(IJsonNavigatorNode objectNode);
    public abstract virtual bool TryGetObjectProperty(IJsonNavigatorNode objectNode, string propertyName, ObjectProperty& objectProperty);
    public abstract virtual IEnumerable`1<ObjectProperty> GetObjectProperties(IJsonNavigatorNode objectNode);
    public abstract virtual IJsonReader CreateReader(IJsonNavigatorNode jsonNavigatorNode);
    public abstract virtual void WriteNode(IJsonNavigatorNode jsonNavigatorNode, IJsonWriter jsonWriter);
}
internal interface Microsoft.Azure.Cosmos.Json.IJsonNavigatorNode {
}
internal interface Microsoft.Azure.Cosmos.Json.IJsonReader {
    public JsonSerializationFormat SerializationFormat { get; }
    public int CurrentDepth { get; }
    public JsonTokenType CurrentTokenType { get; }
    public abstract virtual JsonSerializationFormat get_SerializationFormat();
    public abstract virtual int get_CurrentDepth();
    public abstract virtual JsonTokenType get_CurrentTokenType();
    public abstract virtual bool Read();
    public abstract virtual Number64 GetNumberValue();
    public abstract virtual UtfAnyString GetStringValue();
    public abstract virtual bool TryGetBufferedStringValue(Utf8Memory& value);
    public abstract virtual sbyte GetInt8Value();
    public abstract virtual short GetInt16Value();
    public abstract virtual int GetInt32Value();
    public abstract virtual long GetInt64Value();
    public abstract virtual UInt32 GetUInt32Value();
    public abstract virtual float GetFloat32Value();
    public abstract virtual double GetFloat64Value();
    public abstract virtual Guid GetGuidValue();
    public abstract virtual ReadOnlyMemory`1<byte> GetBinaryValue();
    public abstract virtual void WriteCurrentToken(IJsonWriter writer);
    public abstract virtual void WriteAll(IJsonWriter writer);
}
internal interface Microsoft.Azure.Cosmos.Json.IJsonTextReaderPrivateImplementation {
    public abstract virtual Utf8Memory GetBufferedJsonToken();
}
internal interface Microsoft.Azure.Cosmos.Json.IJsonTextWriterExtensions {
    public abstract virtual void WriteRawJsonValue(ReadOnlyMemory`1<byte> buffer, bool isFieldName);
}
internal interface Microsoft.Azure.Cosmos.Json.IJsonWriter {
    public JsonSerializationFormat SerializationFormat { get; }
    public long CurrentLength { get; }
    public abstract virtual JsonSerializationFormat get_SerializationFormat();
    public abstract virtual long get_CurrentLength();
    public abstract virtual void WriteObjectStart();
    public abstract virtual void WriteObjectEnd();
    public abstract virtual void WriteArrayStart();
    public abstract virtual void WriteArrayEnd();
    public abstract virtual void WriteFieldName(string fieldName);
    public abstract virtual void WriteFieldName(Utf8Span fieldName);
    public abstract virtual void WriteStringValue(string value);
    public abstract virtual void WriteStringValue(Utf8Span value);
    public abstract virtual void WriteNumber64Value(Number64 value);
    public abstract virtual void WriteBoolValue(bool value);
    public abstract virtual void WriteNullValue();
    public abstract virtual void WriteInt8Value(sbyte value);
    public abstract virtual void WriteInt16Value(short value);
    public abstract virtual void WriteInt32Value(int value);
    public abstract virtual void WriteInt64Value(long value);
    public abstract virtual void WriteFloat32Value(float value);
    public abstract virtual void WriteFloat64Value(double value);
    public abstract virtual void WriteUInt32Value(UInt32 value);
    public abstract virtual void WriteGuidValue(Guid value);
    public abstract virtual void WriteBinaryValue(ReadOnlySpan`1<byte> value);
    public abstract virtual ReadOnlyMemory`1<byte> GetResult();
}
internal class Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftReader : JsonReader {
    private static object Null;
    private static object False;
    private static object True;
    private IJsonReader jsonReader;
    public CosmosDBToNewtonsoftReader(IJsonReader jsonReader);
    private static CosmosDBToNewtonsoftReader();
    public virtual bool Read();
    public virtual Byte[] ReadAsBytes();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<int> ReadAsInt32();
    public virtual string ReadAsString();
    private Nullable`1<double> ReadNumberValue();
}
internal class Microsoft.Azure.Cosmos.Json.Interop.CosmosDBToNewtonsoftWriter : JsonWriter {
    private IJsonWriter jsonWriter;
    public CosmosDBToNewtonsoftWriter(JsonSerializationFormat jsonSerializationFormat);
    public virtual void Flush();
    public virtual void WriteComment(string text);
    public virtual void WriteEndArray();
    public virtual void WriteEndConstructor();
    public virtual void WriteEndObject();
    public virtual void WriteNull();
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteRaw(string json);
    public virtual void WriteRawValue(string json);
    public virtual void WriteStartArray();
    public virtual void WriteStartObject();
    public virtual void WriteUndefined();
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Uri value);
    public ReadOnlyMemory`1<byte> GetResult();
}
internal class Microsoft.Azure.Cosmos.Json.Interop.NewtonsoftToCosmosDBReader : JsonReader {
    private JsonReader reader;
    public JsonSerializationFormat SerializationFormat { get; }
    private NewtonsoftToCosmosDBReader(JsonReader reader);
    public virtual JsonSerializationFormat get_SerializationFormat();
    public virtual ReadOnlyMemory`1<byte> GetBinaryValue();
    public virtual float GetFloat32Value();
    public virtual double GetFloat64Value();
    public virtual Guid GetGuidValue();
    public virtual short GetInt16Value();
    public virtual int GetInt32Value();
    public virtual long GetInt64Value();
    public virtual sbyte GetInt8Value();
    public virtual Number64 GetNumberValue();
    public virtual UtfAnyString GetStringValue();
    public virtual UInt32 GetUInt32Value();
    public virtual bool Read();
    public static NewtonsoftToCosmosDBReader CreateFromBuffer(ReadOnlyMemory`1<byte> buffer);
    public static NewtonsoftToCosmosDBReader CreateFromString(string json);
    public static NewtonsoftToCosmosDBReader CreateFromReader(JsonReader reader);
    public virtual bool TryGetBufferedStringValue(Utf8Memory& bufferedUtf8StringValue);
}
internal class Microsoft.Azure.Cosmos.Json.Interop.NewtonsoftToCosmosDBWriter : JsonWriter {
    private JsonWriter writer;
    private Func`1<Byte[]> getResultCallback;
    public long CurrentLength { get; }
    public JsonSerializationFormat SerializationFormat { get; }
    private NewtonsoftToCosmosDBWriter(JsonWriter writer, Func`1<Byte[]> getResultCallback);
    public virtual long get_CurrentLength();
    public virtual JsonSerializationFormat get_SerializationFormat();
    public virtual ReadOnlyMemory`1<byte> GetResult();
    public virtual void WriteArrayEnd();
    public virtual void WriteArrayStart();
    public virtual void WriteBinaryValue(ReadOnlySpan`1<byte> value);
    public virtual void WriteBoolValue(bool value);
    public virtual void WriteFieldName(string fieldName);
    public virtual void WriteFloat32Value(float value);
    public virtual void WriteFloat64Value(double value);
    public virtual void WriteGuidValue(Guid value);
    public virtual void WriteInt16Value(short value);
    public virtual void WriteInt32Value(int value);
    public virtual void WriteInt64Value(long value);
    public virtual void WriteInt8Value(sbyte value);
    public virtual void WriteNullValue();
    public virtual void WriteNumber64Value(Number64 value);
    public virtual void WriteObjectEnd();
    public virtual void WriteObjectStart();
    public virtual void WriteStringValue(string value);
    public virtual void WriteUInt32Value(UInt32 value);
    public static NewtonsoftToCosmosDBWriter CreateTextWriter();
    public static NewtonsoftToCosmosDBWriter CreateFromWriter(JsonWriter writer);
    public virtual void WriteFieldName(Utf8Span utf8FieldName);
    public virtual void WriteStringValue(Utf8Span utf8StringValue);
}
internal interface Microsoft.Azure.Cosmos.Json.ITypedBinaryJsonWriter {
    public abstract virtual void Write(PreblittedBinaryJsonScope scope);
    public abstract virtual void WriteDollarTBsonTypeDollarV(byte cosmosBsonTypeByte);
    public abstract virtual void WriteDollarTBsonTypeDollarVNestedScope(bool isNestedArray, byte cosmosBsonTypeByte);
}
internal interface Microsoft.Azure.Cosmos.Json.ITypedJsonReader {
    public abstract virtual bool TryReadTypedJsonValueWrapper(Int32& typeCode);
    public abstract virtual Utf8Span GetUtf8SpanValue();
}
internal class Microsoft.Azure.Cosmos.Json.JsonArrayNotStartedException : JsonParseException {
}
internal static class Microsoft.Azure.Cosmos.Json.JsonBinaryEncoding : object {
    public static int TypeMarkerLength;
    public static int OneByteLength;
    public static int OneByteCount;
    public static int TwoByteLength;
    public static int TwoByteCount;
    public static int FourByteLength;
    public static int FourByteCount;
    public static int OneByteBaseChar;
    public static int OneByteOffset;
    public static int TwoByteOffset;
    public static int ThreeByteOffset;
    public static int FourByteOffset;
    public static int GuidLength;
    public static int GuidWithQuotesLength;
    public static int EncodedGuidLength;
    private static int MaxStackAlloc;
    private static int Min4BitCharSetStringLength;
    private static int MinCompressedStringLength4;
    private static int MinCompressedStringLength5;
    private static int MinCompressedStringLength6;
    private static int MinCompressedStringLength7;
    private static int MinCompressedStringLength;
    private static ImmutableArray`1<bool> IsBufferedStringCandidate;
    private static JsonBinaryEncoding();
    public static Guid GetGuidValue(ReadOnlySpan`1<byte> guidToken);
    public static bool TryGetGuidValue(ReadOnlySpan`1<byte> guidToken, Guid& guidValue);
    public static ReadOnlyMemory`1<byte> GetBinaryValue(ReadOnlyMemory`1<byte> binaryToken);
    public static bool TryGetBinaryValue(ReadOnlyMemory`1<byte> binaryToken, ReadOnlyMemory`1& binaryValue);
    public static int GetValueLength(ReadOnlySpan`1<byte> buffer);
    public static int GetStringLengths(byte typeMarker);
    public static int GetFirstValueOffset(byte typeMarker);
    public static bool TryGetValueLength(ReadOnlySpan`1<byte> buffer, Int32& length);
    private static bool TryGetFixedWidthValue(ReadOnlySpan`1<byte> token, int expectedTypeMarker, T& fixedWidthValue);
    public static void SetFixedSizedValue(Span`1<byte> buffer, TFixedType value);
    public static TFixedType GetFixedSizedValue(ReadOnlySpan`1<byte> buffer);
    public static string HexDump(Byte[] bytes, int bytesPerLine);
    public static Number64 GetNumberValue(ReadOnlySpan`1<byte> numberToken);
    public static bool TryGetNumberValue(ReadOnlySpan`1<byte> numberToken, Number64& number64, Int32& bytesConsumed);
    public static sbyte GetInt8Value(ReadOnlySpan`1<byte> int8Token);
    public static bool TryGetInt8Value(ReadOnlySpan`1<byte> int8Token, SByte& int8Value);
    public static short GetInt16Value(ReadOnlySpan`1<byte> int16Token);
    public static bool TryGetInt16Value(ReadOnlySpan`1<byte> int16Token, Int16& int16Value);
    public static int GetInt32Value(ReadOnlySpan`1<byte> int32Token);
    public static bool TryGetInt32Value(ReadOnlySpan`1<byte> int32Token, Int32& int32Value);
    public static long GetInt64Value(ReadOnlySpan`1<byte> int64Token);
    public static bool TryGetInt64Value(ReadOnlySpan`1<byte> int64Token, Int64& int64Value);
    public static UInt32 GetUInt32Value(ReadOnlySpan`1<byte> uInt32Token);
    public static bool TryGetUInt32Value(ReadOnlySpan`1<byte> uInt32Token, UInt32& uInt32Value);
    public static float GetFloat32Value(ReadOnlySpan`1<byte> float32Token);
    public static bool TryGetFloat32Value(ReadOnlySpan`1<byte> float32Token, Single& float32Value);
    public static double GetFloat64Value(ReadOnlySpan`1<byte> float64Token);
    public static bool TryGetFloat64Value(ReadOnlySpan`1<byte> float64Token, Double& float64Value);
    public static string GetStringValue(ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> stringToken);
    public static Utf8Span GetUtf8SpanValue(ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> stringToken);
    public static Utf8String GetUtf8StringValue(ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> stringToken);
    public static bool TryGetBufferedStringValue(ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> stringToken, Utf8Memory& value);
    public static bool TryGetDictionaryEncodedStringValue(ReadOnlySpan`1<byte> stringToken, UtfAllString& value);
    private static ReadOnlyMemory`1<byte> GetUtf8MemoryValue(ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> stringToken);
    private static void GetStringValue(ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> stringToken, Span`1<byte> destinationBuffer, Int32& valueLength);
    private static bool TryGetEncodedStringValue(ReadOnlySpan`1<byte> stringToken, UtfAllString& value);
    private static bool TryGetEncodedSystemStringValue(ReadOnlySpan`1<byte> stringToken, UtfAllString& value);
    private static bool TryGetEncodedUserStringValue(ReadOnlySpan`1<byte> stringToken, UtfAllString& encodedUserStringValue);
    private static bool TryGetUserStringId(ReadOnlySpan`1<byte> stringToken, Int32& userStringId);
    private static bool TryGetBufferedLengthPrefixedString(ReadOnlyMemory`1<byte> buffer, ReadOnlyMemory`1<byte> stringToken, Utf8Memory& value);
    public static bool TryGetEncodedStringTypeMarker(Utf8Span utf8Span, MultiByteTypeMarker& multiByteTypeMarker);
    private static bool TryGetEncodedSystemStringTypeMarker(Utf8Span utf8Span, MultiByteTypeMarker& multiByteTypeMarker);
    private static bool TryGetEncodedUserStringTypeMarker(Utf8Span utf8Span, MultiByteTypeMarker& multiByteTypeMarker);
    public static bool TryEncodeGuidString(ReadOnlySpan`1<byte> guidString, Span`1<byte> destinationBuffer);
    public static bool TryEncodeCompressedString(ReadOnlySpan`1<byte> stringValue, Span`1<byte> destinationBuffer, Int32& bytesWritten);
    private static bool TryEncodeString(byte typeMarker, ReadOnlySpan`1<byte> stringValue, byte baseChar, Span`1<byte> destinationBuffer, Int32& bytesWritten);
    private static void EncodeStringValue(byte typeMarker, ReadOnlySpan`1<byte> stringValue, byte baseChar, Span`1<byte> destinationBuffer);
    private static void Encode4BitCharacterStringValue(StringCompressionLookupTables chars, ReadOnlySpan`1<byte> stringValue, Span`1<byte> destinationBuffer);
    private static void EncodeCompressedStringValue(int numberOfBits, ReadOnlySpan`1<byte> stringValue, byte baseChar, Span`1<byte> destinationBuffer);
    private static bool EncodedStringEqualsTo(byte typeMarker, ReadOnlySpan`1<byte> encodedStringValue, ReadOnlySpan`1<byte> stringValue);
    private static void DecodeString(ReadOnlySpan`1<byte> stringToken, Span`1<byte> destinationBuffer, Int32& bytesWritten);
    private static int GetEncodedStringValueLength(ReadOnlySpan`1<byte> stringToken);
    private static int GetEncodedStringBufferLength(ReadOnlySpan`1<byte> stringToken);
    private static byte GetEncodedStringBaseChar(ReadOnlySpan`1<byte> stringToken);
    private static void DecodeStringValue(byte typeMarker, ReadOnlySpan`1<byte> encodedString, byte baseChar, Span`1<byte> destinationBuffer);
    private static void Decode4BitCharacterStringValue(StringCompressionLookupTables chars, ReadOnlySpan`1<byte> encodedString, Span`1<byte> destinationBuffer);
    private static void DecodeCompressedStringValue(int numberOfBits, ReadOnlySpan`1<byte> encodedString, byte baseChar, Span`1<byte> destinationBuffer);
    private static void DecodeGuidStringValue(ReadOnlySpan`1<byte> encodedString, bool isUpperCaseGuid, Span`1<byte> destinationBuffer);
}
internal class Microsoft.Azure.Cosmos.Json.JsonInvalidEscapedCharacterException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonInvalidNumberException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonInvalidParameterException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonInvalidStringCharacterException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonInvalidTokenException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonInvalidUnicodeEscapeException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonMaxNestingExceededException : JsonParseException {
}
internal abstract class Microsoft.Azure.Cosmos.Json.JsonMemoryReader : object {
    protected ReadOnlyMemory`1<byte> buffer;
    protected int position;
    public bool IsEof { get; }
    public int Position { get; }
    protected JsonMemoryReader(ReadOnlyMemory`1<byte> buffer);
    public bool get_IsEof();
    public int get_Position();
    public byte Read();
    public byte Peek();
    public ReadOnlyMemory`1<byte> GetBufferedRawJsonToken();
    public ReadOnlyMemory`1<byte> GetBufferedRawJsonToken(int startPosition);
    public ReadOnlyMemory`1<byte> GetBufferedRawJsonToken(int startPosition, int endPosition);
}
internal abstract class Microsoft.Azure.Cosmos.Json.JsonMemoryWriter : object {
    protected Byte[] buffer;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    public int Position { get; public set; }
    public Span`1<byte> Cursor { get; }
    public ReadOnlyMemory`1<byte> BufferAsMemory { get; }
    public Span`1<byte> BufferAsSpan { get; }
    public Memory`1<byte> RawBuffer { get; }
    protected JsonMemoryWriter(int initialCapacity);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    public Span`1<byte> get_Cursor();
    public ReadOnlyMemory`1<byte> get_BufferAsMemory();
    public Span`1<byte> get_BufferAsSpan();
    public Memory`1<byte> get_RawBuffer();
    public void Write(ReadOnlySpan`1<byte> value);
    public void EnsureRemainingBufferSpace(int size);
    private void Resize(int minNewSize);
}
internal class Microsoft.Azure.Cosmos.Json.JsonMissingClosingQuoteException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonMissingEndArrayException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonMissingEndObjectException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonMissingNameSeparatorException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonMissingPropertyException : JsonParseException {
}
internal abstract class Microsoft.Azure.Cosmos.Json.JsonNavigator : object {
    public JsonSerializationFormat SerializationFormat { get; }
    public abstract virtual JsonSerializationFormat get_SerializationFormat();
    public static IJsonNavigator Create(ReadOnlyMemory`1<byte> buffer);
    public abstract virtual IJsonNavigatorNode GetRootNode();
    public abstract virtual JsonNodeType GetNodeType(IJsonNavigatorNode node);
    public abstract virtual Number64 GetNumber64Value(IJsonNavigatorNode numberNode);
    public abstract virtual bool TryGetBufferedStringValue(IJsonNavigatorNode stringNode, Utf8Memory& bufferedStringValue);
    public abstract virtual UtfAnyString GetStringValue(IJsonNavigatorNode stringNode);
    public abstract virtual sbyte GetInt8Value(IJsonNavigatorNode numberNode);
    public abstract virtual short GetInt16Value(IJsonNavigatorNode numberNode);
    public abstract virtual int GetInt32Value(IJsonNavigatorNode numberNode);
    public abstract virtual long GetInt64Value(IJsonNavigatorNode numberNode);
    public abstract virtual float GetFloat32Value(IJsonNavigatorNode numberNode);
    public abstract virtual double GetFloat64Value(IJsonNavigatorNode numberNode);
    public abstract virtual UInt32 GetUInt32Value(IJsonNavigatorNode numberNode);
    public abstract virtual Guid GetGuidValue(IJsonNavigatorNode guidNode);
    public abstract virtual ReadOnlyMemory`1<byte> GetBinaryValue(IJsonNavigatorNode binaryNode);
    public abstract virtual bool TryGetBufferedBinaryValue(IJsonNavigatorNode binaryNode, ReadOnlyMemory`1& bufferedBinaryValue);
    public abstract virtual int GetArrayItemCount(IJsonNavigatorNode arrayNode);
    public abstract virtual IJsonNavigatorNode GetArrayItemAt(IJsonNavigatorNode arrayNode, int index);
    public abstract virtual IEnumerable`1<IJsonNavigatorNode> GetArrayItems(IJsonNavigatorNode arrayNode);
    public abstract virtual int GetObjectPropertyCount(IJsonNavigatorNode objectNode);
    public abstract virtual bool TryGetObjectProperty(IJsonNavigatorNode objectNode, string propertyName, ObjectProperty& objectProperty);
    public abstract virtual IEnumerable`1<ObjectProperty> GetObjectProperties(IJsonNavigatorNode objectNode);
    public virtual void WriteNode(IJsonNavigatorNode jsonNavigatorNode, IJsonWriter jsonWriter);
    public abstract virtual IJsonReader CreateReader(IJsonNavigatorNode jsonNavigatorNode);
}
internal enum Microsoft.Azure.Cosmos.Json.JsonNodeType : Enum {
    public int value__;
    public static JsonNodeType Null;
    public static JsonNodeType False;
    public static JsonNodeType True;
    public static JsonNodeType Number64;
    public static JsonNodeType String;
    public static JsonNodeType Array;
    public static JsonNodeType Object;
    public static JsonNodeType FieldName;
    public static JsonNodeType Int8;
    public static JsonNodeType Int16;
    public static JsonNodeType Int32;
    public static JsonNodeType Int64;
    public static JsonNodeType UInt32;
    public static JsonNodeType Float32;
    public static JsonNodeType Float64;
    public static JsonNodeType Binary;
    public static JsonNodeType Guid;
    public static JsonNodeType Unknown;
}
internal class Microsoft.Azure.Cosmos.Json.JsonNotCompleteException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonNotFieldnameTokenException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonNotNumberTokenException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonNotStringTokenException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonNumberOutOfRangeException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonNumberTooLongException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonObjectNotStartedException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonObjectState : object {
    private static int JsonMaxNestingDepth;
    private bool readMode;
    private Byte[] nestingStackBitmap;
    private int nestingStackIndex;
    private JsonObjectContext currentContext;
    [CompilerGeneratedAttribute]
private JsonTokenType <CurrentTokenType>k__BackingField;
    public int CurrentDepth { get; }
    public JsonTokenType CurrentTokenType { get; private set; }
    public bool IsPropertyExpected { get; }
    public bool InArrayContext { get; }
    public bool InObjectContext { get; }
    private JsonObjectContext RetrieveCurrentContext { get; }
    private byte Mask { get; }
    public JsonObjectState(bool readMode);
    public int get_CurrentDepth();
    [CompilerGeneratedAttribute]
public JsonTokenType get_CurrentTokenType();
    [CompilerGeneratedAttribute]
private void set_CurrentTokenType(JsonTokenType value);
    public bool get_IsPropertyExpected();
    public bool get_InArrayContext();
    public bool get_InObjectContext();
    private JsonObjectContext get_RetrieveCurrentContext();
    private byte get_Mask();
    public void RegisterToken(JsonTokenType jsonTokenType);
    private void Push(bool isArray);
    private void RegisterValue(JsonTokenType jsonTokenType);
    private void RegisterBeginArray();
    public void RegisterEndArray();
    private void RegisterBeginObject();
    public void RegisterEndObject();
    public void RegisterFieldName();
}
internal abstract class Microsoft.Azure.Cosmos.Json.JsonParseException : DocumentClientException {
    protected JsonParseException(string message);
}
internal class Microsoft.Azure.Cosmos.Json.JsonPropertyAlreadyAddedException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonPropertyArrayOrObjectNotStartedException : JsonParseException {
}
internal abstract class Microsoft.Azure.Cosmos.Json.JsonReader : object {
    internal JsonObjectState JsonObjectState;
    private static ImmutableArray`1<JsonTokenType> TypeMarkerToTokenType;
    public JsonSerializationFormat SerializationFormat { get; }
    public int CurrentDepth { get; }
    public JsonTokenType CurrentTokenType { get; }
    private static JsonReader();
    public abstract virtual JsonSerializationFormat get_SerializationFormat();
    public sealed virtual int get_CurrentDepth();
    public sealed virtual JsonTokenType get_CurrentTokenType();
    public static IJsonReader Create(ReadOnlyMemory`1<byte> buffer);
    public static IJsonReader Create(JsonSerializationFormat jsonSerializationFormat, ReadOnlyMemory`1<byte> buffer);
    internal static IJsonReader CreateBinaryFromOffset(ReadOnlyMemory`1<byte> buffer, int offset);
    public abstract virtual bool Read();
    public abstract virtual Number64 GetNumberValue();
    public abstract virtual UtfAnyString GetStringValue();
    public abstract virtual bool TryGetBufferedStringValue(Utf8Memory& value);
    public abstract virtual sbyte GetInt8Value();
    public abstract virtual short GetInt16Value();
    public abstract virtual int GetInt32Value();
    public abstract virtual long GetInt64Value();
    public abstract virtual UInt32 GetUInt32Value();
    public abstract virtual float GetFloat32Value();
    public abstract virtual double GetFloat64Value();
    public abstract virtual Guid GetGuidValue();
    public abstract virtual ReadOnlyMemory`1<byte> GetBinaryValue();
    public virtual void WriteCurrentToken(IJsonWriter writer);
    public virtual void WriteAll(IJsonWriter writer);
}
internal enum Microsoft.Azure.Cosmos.Json.JsonSerializationFormat : Enum {
    public byte value__;
    public static JsonSerializationFormat Text;
    public static JsonSerializationFormat Binary;
    public static JsonSerializationFormat HybridRow;
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.Json.JsonSerializationFormatExtensions : object {
    private static string Text;
    private static string Binary;
    private static string HybridRow;
    private static JsonSerializationFormatExtensions();
    [ExtensionAttribute]
public static string ToContentSerializationFormatString(JsonSerializationFormat jsonSerializationFormat);
}
internal static class Microsoft.Azure.Cosmos.Json.JsonSerializer : object {
    public static ReadOnlyMemory`1<byte> Serialize(object value, JsonSerializationFormat jsonSerializationFormat);
    public static void SerializeInternal(object value, IJsonWriter jsonWriter);
    public static T Deserialize(ReadOnlyMemory`1<byte> buffer);
    public static bool TryDeserialize(ReadOnlyMemory`1<byte> buffer, T& result);
}
internal static class Microsoft.Azure.Cosmos.Json.JsonTextParser : object {
    private static ReadOnlyMemory`1<byte> ReverseSolidusBytes;
    private static JsonTextParser();
    public static Number64 GetNumberValue(ReadOnlySpan`1<byte> token);
    public static Utf8String GetStringValue(Utf8Memory token);
    public static sbyte GetInt8Value(ReadOnlySpan`1<byte> intToken);
    public static short GetInt16Value(ReadOnlySpan`1<byte> intToken);
    public static int GetInt32Value(ReadOnlySpan`1<byte> intToken);
    public static long GetInt64Value(ReadOnlySpan`1<byte> intToken);
    public static UInt32 GetUInt32Value(ReadOnlySpan`1<byte> intToken);
    public static float GetFloat32Value(ReadOnlySpan`1<byte> floatToken);
    public static double GetFloat64Value(ReadOnlySpan`1<byte> floatToken);
    public static Guid GetGuidValue(ReadOnlySpan`1<byte> guidToken);
    public static ReadOnlyMemory`1<byte> GetBinaryValue(ReadOnlySpan`1<byte> binaryToken);
    private static double GetDoubleValue(ReadOnlySpan`1<byte> token);
    private static float GetFloatValue(ReadOnlySpan`1<byte> token);
    private static long GetIntegerValue(ReadOnlySpan`1<byte> token);
    private static Utf8String UnescapeJson(Utf8Memory escapedString, bool checkIfNeedsEscaping);
    private static int WideCharToMultiByte(char value, Span`1<byte> multiByteBuffer);
    private static int WideCharToMultiByte(char highSurrogate, char lowSurrogate, Span`1<byte> multiByteBuffer);
}
internal enum Microsoft.Azure.Cosmos.Json.JsonTokenType : Enum {
    public int value__;
    public static JsonTokenType NotStarted;
    public static JsonTokenType BeginArray;
    public static JsonTokenType EndArray;
    public static JsonTokenType BeginObject;
    public static JsonTokenType EndObject;
    public static JsonTokenType String;
    public static JsonTokenType Number;
    public static JsonTokenType True;
    public static JsonTokenType False;
    public static JsonTokenType Null;
    public static JsonTokenType FieldName;
    public static JsonTokenType Int8;
    public static JsonTokenType Int16;
    public static JsonTokenType Int32;
    public static JsonTokenType Int64;
    public static JsonTokenType UInt32;
    public static JsonTokenType Float32;
    public static JsonTokenType Float64;
    public static JsonTokenType Guid;
    public static JsonTokenType Binary;
}
internal class Microsoft.Azure.Cosmos.Json.JsonUnexpectedEndArrayException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonUnexpectedEndObjectException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonUnexpectedNameSeparatorException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonUnexpectedTokenException : JsonParseException {
}
internal class Microsoft.Azure.Cosmos.Json.JsonUnexpectedValueSeparatorException : JsonParseException {
}
internal abstract class Microsoft.Azure.Cosmos.Json.JsonWriter : object {
    private static int MaxStackAlloc;
    protected JsonObjectState JsonObjectState;
    [CompilerGeneratedAttribute]
private bool <EnableEncodedStrings>k__BackingField;
    public JsonSerializationFormat SerializationFormat { get; }
    public long CurrentLength { get; }
    internal bool EnableEncodedStrings { get; private set; }
    public abstract virtual JsonSerializationFormat get_SerializationFormat();
    public abstract virtual long get_CurrentLength();
    public static IJsonWriter Create(JsonSerializationFormat jsonSerializationFormat, int initalCapacity, bool enableEncodedStrings);
    public abstract virtual void WriteObjectStart();
    public abstract virtual void WriteObjectEnd();
    public abstract virtual void WriteArrayStart();
    public abstract virtual void WriteArrayEnd();
    public virtual void WriteFieldName(string fieldName);
    public abstract virtual void WriteFieldName(Utf8Span fieldName);
    public virtual void WriteStringValue(string value);
    public abstract virtual void WriteStringValue(Utf8Span value);
    public abstract virtual void WriteNumber64Value(Number64 value);
    public abstract virtual void WriteBoolValue(bool value);
    public abstract virtual void WriteNullValue();
    public abstract virtual void WriteInt8Value(sbyte value);
    public abstract virtual void WriteInt16Value(short value);
    public abstract virtual void WriteInt32Value(int value);
    public abstract virtual void WriteInt64Value(long value);
    public abstract virtual void WriteFloat32Value(float value);
    public abstract virtual void WriteFloat64Value(double value);
    public abstract virtual void WriteUInt32Value(UInt32 value);
    public abstract virtual void WriteGuidValue(Guid value);
    public abstract virtual void WriteBinaryValue(ReadOnlySpan`1<byte> value);
    public abstract virtual ReadOnlyMemory`1<byte> GetResult();
    [CompilerGeneratedAttribute]
internal bool get_EnableEncodedStrings();
    [CompilerGeneratedAttribute]
private void set_EnableEncodedStrings(bool value);
    public static PreblittedBinaryJsonScope CapturePreblittedBinaryJsonScope(Action`1<ITypedBinaryJsonWriter> scopeWriter);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Json.ObjectProperty : ValueType {
    [CompilerGeneratedAttribute]
private IJsonNavigatorNode <NameNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IJsonNavigatorNode <ValueNode>k__BackingField;
    public IJsonNavigatorNode NameNode { get; }
    public IJsonNavigatorNode ValueNode { get; }
    public ObjectProperty(IJsonNavigatorNode nameNode, IJsonNavigatorNode valueNode);
    [CompilerGeneratedAttribute]
public IJsonNavigatorNode get_NameNode();
    [CompilerGeneratedAttribute]
public IJsonNavigatorNode get_ValueNode();
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Json.PreblittedBinaryJsonScope : ValueType {
    public ReadOnlyMemory`1<byte> Bytes;
    public PreblittedBinaryJsonScope(ReadOnlyMemory`1<byte> bytes);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.Json.StackExtensions : object {
    [ExtensionAttribute]
public static bool Empty(Stack`1<T> stack);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Json.Utf8Memory : ValueType {
    public static Utf8Memory Empty;
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<byte> <Memory>k__BackingField;
    public ReadOnlyMemory`1<byte> Memory { get; }
    public Utf8Span Span { get; }
    public bool IsEmpty { get; }
    public int Length { get; }
    private Utf8Memory(ReadOnlyMemory`1<byte> utf8Bytes);
    private static Utf8Memory();
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<byte> get_Memory();
    public Utf8Span get_Span();
    public Utf8Memory Slice(int start);
    public Utf8Memory Slice(int start, int length);
    public bool get_IsEmpty();
    public int get_Length();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Utf8Memory utf8Memory);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static Utf8Memory Create(ReadOnlyMemory`1<byte> utf8Bytes);
    public static Utf8Memory Create(string value);
    public static Utf8Memory UnsafeCreateNoValidation(ReadOnlyMemory`1<byte> utf8Bytes);
    public static bool TryCreate(ReadOnlyMemory`1<byte> utf8Bytes, Utf8Memory& utf8Memory);
}
internal static class Microsoft.Azure.Cosmos.Json.Utf8StringHelpers : object {
    public static string ToString(ReadOnlyMemory`1<byte> buffer);
}
internal class Microsoft.Azure.Cosmos.Json.UtfAllString : object {
    [CompilerGeneratedAttribute]
private Utf8Memory <Utf8String>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Utf16String>k__BackingField;
    [CompilerGeneratedAttribute]
private Utf8Memory <Utf8EscapedString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Utf16EscapedString>k__BackingField;
    public Utf8Memory Utf8String { get; }
    public string Utf16String { get; }
    public Utf8Memory Utf8EscapedString { get; }
    public string Utf16EscapedString { get; }
    private UtfAllString(Utf8Memory utf8String, string utf16String, Utf8Memory utf8EscapedString, string utf16EscapedString);
    [CompilerGeneratedAttribute]
public Utf8Memory get_Utf8String();
    [CompilerGeneratedAttribute]
public string get_Utf16String();
    [CompilerGeneratedAttribute]
public Utf8Memory get_Utf8EscapedString();
    [CompilerGeneratedAttribute]
public string get_Utf16EscapedString();
    public static UtfAllString Create(string utf16String);
    public static UtfAllString Create(Utf8Memory utf8String);
    public sealed virtual bool Equals(UtfAllString other);
}
internal static class Microsoft.Azure.Cosmos.Linq.ArrayBuiltinFunctions : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, BuiltinFunctionVisitor> <ArrayBuiltinFunctionDefinitions>k__BackingField;
    private static Dictionary`2<string, BuiltinFunctionVisitor> ArrayBuiltinFunctionDefinitions { get; private set; }
    private static ArrayBuiltinFunctions();
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, BuiltinFunctionVisitor> get_ArrayBuiltinFunctionDefinitions();
    [CompilerGeneratedAttribute]
private static void set_ArrayBuiltinFunctionDefinitions(Dictionary`2<string, BuiltinFunctionVisitor> value);
    public static SqlScalarExpression Visit(MethodCallExpression methodCallExpression, TranslationContext context);
}
internal abstract class Microsoft.Azure.Cosmos.Linq.BuiltinFunctionVisitor : object {
    public SqlScalarExpression Visit(MethodCallExpression methodCallExpression, TranslationContext context);
    public static SqlScalarExpression VisitBuiltinFunctionCall(MethodCallExpression methodCallExpression, TranslationContext context);
    protected abstract virtual SqlScalarExpression VisitExplicit(MethodCallExpression methodCallExpression, TranslationContext context);
    protected abstract virtual SqlScalarExpression VisitImplicit(MethodCallExpression methodCallExpression, TranslationContext context);
}
internal class Microsoft.Azure.Cosmos.Linq.ChangeFeedQuery`1 : object {
    private static string IfNoneMatchAllHeaderValue;
    private ResourceType resourceType;
    private DocumentClient client;
    private string resourceLink;
    private ChangeFeedOptions feedOptions;
    private string ifModifiedSince;
    private HttpStatusCode lastStatusCode;
    private string nextIfNoneMatch;
    public bool HasMoreResults { get; }
    public ChangeFeedQuery`1(DocumentClient client, ResourceType resourceType, string resourceLink, ChangeFeedOptions feedOptions);
    public sealed virtual void Dispose();
    public sealed virtual bool get_HasMoreResults();
    public sealed virtual Task`1<DocumentFeedResponse`1<TResult>> ExecuteNextAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<DocumentFeedResponse`1<object>> ExecuteNextAsync(CancellationToken cancellationToken);
    public Task`1<DocumentFeedResponse`1<TResult>> ReadDocumentChangeFeedAsync(string resourceLink, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Linq.ChangeFeedQuery`1/<ReadDocumentChangeFeedPrivateAsync>d__15`1")]
private Task`1<DocumentFeedResponse`1<TResult>> ReadDocumentChangeFeedPrivateAsync(string link, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Linq.ChangeFeedQuery`1/<GetFeedResponseAsync>d__16")]
private Task`1<DocumentServiceResponse> GetFeedResponseAsync(string resourceLink, ResourceType resourceType, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    private string ConvertToHttpTime(DateTime time);
}
internal class Microsoft.Azure.Cosmos.Linq.Collection : object {
    public bool isOuter;
    public SqlCollection inner;
    public string Name;
    public Collection(string name);
    public Collection(SqlCollection collection);
}
internal static class Microsoft.Azure.Cosmos.Linq.ConstantEvaluator : object {
    public static Expression PartialEval(Expression expression, Func`2<Expression, bool> fnCanBeEvaluated);
    public static Expression PartialEval(Expression expression);
    private static bool CanBeEvaluated(Expression expression);
}
internal static class Microsoft.Azure.Cosmos.Linq.ConstantFolding : object {
    public static bool IsConstant(Expression inputExpression);
    public static Expression Fold(Expression inputExpression);
    public static MemberBinding FoldBinding(MemberBinding inputExpression);
    public static ElementInit FoldElementInitializer(ElementInit inputExpression);
    public static Expression FoldUnary(UnaryExpression inputExpression);
    public static Expression FoldBinary(BinaryExpression inputExpression);
    public static Expression FoldTypeIs(TypeBinaryExpression inputExpression);
    public static Expression FoldConstant(ConstantExpression inputExpression);
    public static Expression FoldConditional(ConditionalExpression inputExpression);
    public static Expression FoldParameter(ParameterExpression inputExpression);
    public static Expression FoldMemberAccess(MemberExpression inputExpression);
    public static Expression FoldMethodCall(MethodCallExpression inputExpression);
    public static ReadOnlyCollection`1<Expression> FoldExpressionList(ReadOnlyCollection`1<Expression> inputExpressionList);
    public static MemberAssignment FoldMemberAssignment(MemberAssignment inputExpression);
    public static MemberMemberBinding FoldMemberMemberBinding(MemberMemberBinding inputExpression);
    public static MemberListBinding FoldMemberListBinding(MemberListBinding inputExpression);
    public static IList`1<MemberBinding> FoldBindingList(ReadOnlyCollection`1<MemberBinding> inputExpressionList);
    public static IList`1<ElementInit> FoldElementInitializerList(ReadOnlyCollection`1<ElementInit> inputExpressionList);
    public static LambdaExpression FoldLambda(LambdaExpression inputExpression);
    public static NewExpression FoldNew(NewExpression inputExpression);
    public static Expression FoldMemberInit(MemberInitExpression inputExpression);
    public static Expression FoldListInit(ListInitExpression inputExpression);
    public static Expression FoldNewArray(NewArrayExpression inputExpression);
    public static Expression FoldInvocation(InvocationExpression inputExpression);
}
internal class Microsoft.Azure.Cosmos.Linq.CosmosElementToSqlScalarExpressionVisitor : object {
    public static CosmosElementToSqlScalarExpressionVisitor Singleton;
    private static CosmosElementToSqlScalarExpressionVisitor();
    public sealed virtual SqlScalarExpression Visit(CosmosArray cosmosArray);
    public sealed virtual SqlScalarExpression Visit(CosmosBinary cosmosBinary);
    public sealed virtual SqlScalarExpression Visit(CosmosBoolean cosmosBoolean);
    public sealed virtual SqlScalarExpression Visit(CosmosGuid cosmosGuid);
    public sealed virtual SqlScalarExpression Visit(CosmosNull cosmosNull);
    public sealed virtual SqlScalarExpression Visit(CosmosNumber cosmosNumber);
    public sealed virtual SqlScalarExpression Visit(CosmosObject cosmosObject);
    public sealed virtual SqlScalarExpression Visit(CosmosString cosmosString);
    public sealed virtual SqlScalarExpression Visit(CosmosUndefined cosmosUndefined);
}
public static class Microsoft.Azure.Cosmos.Linq.CosmosLinq : object {
    public static object InvokeUserDefinedFunction(string udfName, Object[] arguments);
}
[ExtensionAttribute]
public static class Microsoft.Azure.Cosmos.Linq.CosmosLinqExtensions : object {
    [ExtensionAttribute]
public static int DocumentId(object obj);
    [ExtensionAttribute]
public static bool IsArray(object obj);
    [ExtensionAttribute]
public static bool IsBool(object obj);
    [ExtensionAttribute]
public static bool IsDefined(object obj);
    [ExtensionAttribute]
public static bool IsNull(object obj);
    [ExtensionAttribute]
public static bool IsNumber(object obj);
    [ExtensionAttribute]
public static bool IsObject(object obj);
    [ExtensionAttribute]
public static bool IsPrimitive(object obj);
    [ExtensionAttribute]
public static bool IsString(object obj);
    [ExtensionAttribute]
public static bool RegexMatch(object obj, string regularExpression);
    [ExtensionAttribute]
public static bool RegexMatch(object obj, string regularExpression, string searchModifier);
    [ExtensionAttribute]
internal static QueryDefinition ToQueryDefinition(IQueryable`1<T> query, IDictionary`2<object, string> namedParameters);
    [ExtensionAttribute]
public static QueryDefinition ToQueryDefinition(IQueryable`1<T> query);
    [ExtensionAttribute]
public static FeedIterator`1<T> ToFeedIterator(IQueryable`1<T> query);
    [ExtensionAttribute]
public static FeedIterator ToStreamIterator(IQueryable`1<T> query);
    [ExtensionAttribute]
public static Task`1<Response`1<TSource>> MaxAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<TSource>> MinAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<decimal>> AverageAsync(IQueryable`1<decimal> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<Nullable`1<decimal>>> AverageAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<double>> AverageAsync(IQueryable`1<double> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<Nullable`1<double>>> AverageAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<float>> AverageAsync(IQueryable`1<float> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<Nullable`1<float>>> AverageAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<double>> AverageAsync(IQueryable`1<int> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<Nullable`1<double>>> AverageAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<double>> AverageAsync(IQueryable`1<long> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<Nullable`1<double>>> AverageAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<decimal>> SumAsync(IQueryable`1<decimal> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<Nullable`1<decimal>>> SumAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<double>> SumAsync(IQueryable`1<double> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<Nullable`1<double>>> SumAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<float>> SumAsync(IQueryable`1<float> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<Nullable`1<float>>> SumAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<int>> SumAsync(IQueryable`1<int> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<Nullable`1<int>>> SumAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<long>> SumAsync(IQueryable`1<long> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<Nullable`1<long>>> SumAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Response`1<int>> CountAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    private static Task`1<Response`1<T>> ResponseHelperAsync(T value);
    private static MethodInfo GetMethodInfoOf(Func`2<T1, T2> func);
}
internal class Microsoft.Azure.Cosmos.Linq.CosmosLinqQuery`1 : object {
    private CosmosLinqQueryProvider queryProvider;
    private Guid correlatedActivityId;
    private ContainerInternal container;
    private CosmosQueryClientCore queryClient;
    private CosmosResponseFactoryInternal responseFactory;
    private QueryRequestOptions cosmosQueryRequestOptions;
    private bool allowSynchronousQueryExecution;
    private string continuationToken;
    private CosmosLinqSerializerOptionsInternal linqSerializationOptions;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public bool HasMoreResults { get; }
    public CosmosLinqQuery`1(ContainerInternal container, CosmosResponseFactoryInternal responseFactory, CosmosQueryClientCore queryClient, string continuationToken, QueryRequestOptions cosmosQueryRequestOptions, Expression expression, bool allowSynchronousQueryExecution, CosmosLinqSerializerOptionsInternal linqSerializationOptions);
    public CosmosLinqQuery`1(ContainerInternal container, CosmosResponseFactoryInternal responseFactory, CosmosQueryClientCore queryClient, string continuationToken, QueryRequestOptions cosmosQueryRequestOptions, bool allowSynchronousQueryExecution, CosmosLinqSerializerOptionsInternal linqSerializerOptions);
    public sealed virtual Type get_ElementType();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    public sealed virtual IQueryProvider get_Provider();
    public sealed virtual bool get_HasMoreResults();
    [IteratorStateMachineAttribute("Microsoft.Azure.Cosmos.Linq.CosmosLinqQuery`1/<GetEnumerator>d__20")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    public QueryDefinition ToQueryDefinition(IDictionary`2<object, string> parameters);
    public FeedIterator`1<T> ToFeedIterator();
    public FeedIterator ToStreamIterator();
    public sealed virtual void Dispose();
    private sealed virtual override Task`1<DocumentFeedResponse`1<TResult>> Microsoft.Azure.Cosmos.Linq.IDocumentQuery<T>.ExecuteNextAsync(CancellationToken token);
    private sealed virtual override Task`1<DocumentFeedResponse`1<object>> Microsoft.Azure.Cosmos.Linq.IDocumentQuery<T>.ExecuteNextAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Linq.CosmosLinqQuery`1/<AggregateResultAsync>d__29")]
internal Task`1<Response`1<T>> AggregateResultAsync(CancellationToken cancellationToken);
    internal T ExecuteScalar();
    private FeedIteratorInternal CreateStreamIterator(bool isContinuationExcpected, ScalarOperationKind& scalarOperationKind);
    private FeedIteratorInlineCore`1<T> CreateFeedIterator(bool isContinuationExpected, ScalarOperationKind& scalarOperationKind);
}
internal class Microsoft.Azure.Cosmos.Linq.CosmosLinqQueryProvider : object {
    private ContainerInternal container;
    private CosmosQueryClientCore queryClient;
    private CosmosResponseFactoryInternal responseFactory;
    private QueryRequestOptions cosmosQueryRequestOptions;
    private bool allowSynchronousQueryExecution;
    private Action`1<IQueryable> onExecuteScalarQueryCallback;
    private string continuationToken;
    private CosmosLinqSerializerOptionsInternal linqSerializerOptions;
    public CosmosLinqQueryProvider(ContainerInternal container, CosmosResponseFactoryInternal responseFactory, CosmosQueryClientCore queryClient, string continuationToken, QueryRequestOptions cosmosQueryRequestOptions, bool allowSynchronousQueryExecution, Action`1<IQueryable> onExecuteScalarQueryCallback, CosmosLinqSerializerOptionsInternal linqSerializerOptions);
    public sealed virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public sealed virtual IQueryable CreateQuery(Expression expression);
    public sealed virtual TResult Execute(Expression expression);
    public sealed virtual object Execute(Expression expression);
    public Task`1<Response`1<TResult>> ExecuteAggregateAsync(Expression expression, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Linq.CustomCosmosLinqSerializer : object {
    private CosmosLinqSerializer CustomCosmosSerializer;
    public CustomCosmosLinqSerializer(CosmosLinqSerializer customCosmosLinqSerializer);
    public sealed virtual bool RequiresCustomSerialization(MemberExpression memberExpression, Type memberType);
    public sealed virtual string Serialize(object value, MemberExpression memberExpression, Type memberType);
    public sealed virtual string SerializeScalarExpression(ConstantExpression inputExpression);
    public sealed virtual string SerializeMemberName(MemberInfo memberInfo);
    private string SerializeWithCustomSerializer(object value);
}
internal class Microsoft.Azure.Cosmos.Linq.DefaultCosmosLinqSerializer : object {
    private CosmosPropertyNamingPolicy PropertyNamingPolicy;
    public DefaultCosmosLinqSerializer(CosmosPropertyNamingPolicy propertyNamingPolicy);
    public sealed virtual bool RequiresCustomSerialization(MemberExpression memberExpression, Type memberType);
    public sealed virtual string Serialize(object value, MemberExpression memberExpression, Type memberType);
    public sealed virtual string SerializeScalarExpression(ConstantExpression inputExpression);
    public sealed virtual string SerializeMemberName(MemberInfo memberInfo);
}
internal class Microsoft.Azure.Cosmos.Linq.DocumentQuery`1 : object {
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DocumentFeedResponse`1<object> EmptyFeedResponse;
    private IDocumentQueryClient client;
    private ResourceType resourceTypeEnum;
    private Type resourceType;
    private string documentsFeedOrDatabaseLink;
    private FeedOptions feedOptions;
    private object partitionKey;
    private DocumentQueryProvider queryProvider;
    private SchedulingStopwatch executeNextAysncMetrics;
    private IDocumentQueryExecutionContext queryExecutionContext;
    private bool tracedFirstExecution;
    private bool tracedLastExecution;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CorrelatedActivityId>k__BackingField;
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public bool HasMoreResults { get; }
    public Guid CorrelatedActivityId { get; }
    public DocumentQuery`1(IDocumentQueryClient client, ResourceType resourceTypeEnum, Type resourceType, string documentsFeedOrDatabaseLink, Expression expression, FeedOptions feedOptions, object partitionKey);
    public DocumentQuery`1(DocumentClient client, ResourceType resourceTypeEnum, Type resourceType, string documentsFeedOrDatabaseLink, Expression expression, FeedOptions feedOptions, object partitionKey);
    public DocumentQuery`1(IDocumentQueryClient client, ResourceType resourceTypeEnum, Type resourceType, string documentsFeedOrDatabaseLink, FeedOptions feedOptions, object partitionKey);
    public DocumentQuery`1(DocumentClient client, ResourceType resourceTypeEnum, Type resourceType, string documentsFeedOrDatabaseLink, FeedOptions feedOptions, object partitionKey);
    private static DocumentQuery`1();
    public sealed virtual Type get_ElementType();
    [CompilerGeneratedAttribute]
public sealed virtual Expression get_Expression();
    public sealed virtual IQueryProvider get_Provider();
    public sealed virtual bool get_HasMoreResults();
    [CompilerGeneratedAttribute]
public Guid get_CorrelatedActivityId();
    public sealed virtual void Dispose();
    public sealed virtual Task`1<DocumentFeedResponse`1<object>> ExecuteNextAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<DocumentFeedResponse`1<TResponse>> ExecuteNextAsync(CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("Microsoft.Azure.Cosmos.Linq.DocumentQuery`1/<GetEnumerator>d__31")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    private Task`1<IDocumentQueryExecutionContext> CreateDocumentQueryExecutionContextAsync(bool isContinuationExpected, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Linq.DocumentQuery`1/<ExecuteAllAsync>d__35")]
internal Task`1<List`1<T>> ExecuteAllAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Linq.DocumentQuery`1/<ExecuteNextPrivateAsync>d__36`1")]
private Task`1<DocumentFeedResponse`1<TResponse>> ExecuteNextPrivateAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Task`1<IDocumentQueryExecutionContext> <GetEnumerator>b__31_0();
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.Linq.DocumentQueryable : object {
    [ExtensionAttribute]
public static IDocumentQuery`1<T> AsDocumentQuery(IQueryable`1<T> query);
    [ExtensionAttribute]
internal static IQueryable`1<TResult> AsSQL(IOrderedQueryable`1<TSource> source, SqlQuerySpec querySpec);
    [ExtensionAttribute]
internal static IQueryable`1<object> AsSQL(IOrderedQueryable`1<TSource> source, SqlQuerySpec querySpec);
    [ExtensionAttribute]
internal static IOrderedQueryable`1<Document> CreateDocumentQuery(IDocumentQueryClient client, string collectionLink, FeedOptions feedOptions, object partitionKey);
    [ExtensionAttribute]
internal static IQueryable`1<object> CreateDocumentQuery(IDocumentQueryClient client, string collectionLink, SqlQuerySpec querySpec, FeedOptions feedOptions, object partitionKey);
    private static MethodInfo GetMethodInfoOf(Expression`1<Func`1<T>> expression);
    private static MethodInfo GetMethodInfoOf(Func`2<T1, T2> func);
}
internal static class Microsoft.Azure.Cosmos.Linq.DocumentQueryEvaluator : object {
    private static string SQLMethod;
    public static LinqQueryOperation Evaluate(Expression expression, CosmosLinqSerializerOptionsInternal linqSerializerOptions, IDictionary`2<object, string> parameters);
    public static bool IsTransformExpression(Expression expression);
    private static LinqQueryOperation HandleEmptyQuery(ConstantExpression expression);
    private static LinqQueryOperation HandleMethodCallExpression(MethodCallExpression expression, IDictionary`2<object, string> parameters, CosmosLinqSerializerOptionsInternal linqSerializerOptions);
    private static LinqQueryOperation HandleAsSqlTransformExpression(MethodCallExpression expression);
    private static LinqQueryOperation GetSqlQuerySpec(object value);
}
internal class Microsoft.Azure.Cosmos.Linq.DocumentQueryException : DocumentClientException {
    public DocumentQueryException(string message);
    public DocumentQueryException(string message, Exception innerException);
    private DocumentQueryException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Azure.Cosmos.Linq.DocumentQueryProvider : object {
    private IDocumentQueryClient client;
    private ResourceType resourceTypeEnum;
    private Type resourceType;
    private string documentsFeedOrDatabaseLink;
    private FeedOptions feedOptions;
    private object partitionKey;
    private Action`1<IQueryable> onExecuteScalarQueryCallback;
    public DocumentQueryProvider(IDocumentQueryClient client, ResourceType resourceTypeEnum, Type resourceType, string documentsFeedOrDatabaseLink, FeedOptions feedOptions, object partitionKey, Action`1<IQueryable> onExecuteScalarQueryCallback);
    public sealed virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public sealed virtual IQueryable CreateQuery(Expression expression);
    public sealed virtual TResult Execute(Expression expression);
    public sealed virtual object Execute(Expression expression);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Linq.DocumentQueryProvider/<ExecuteAsync>d__12`1")]
public sealed virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.Linq.ExpressionSimplifier : object {
    private static ConcurrentDictionary`2<Type, ExpressionSimplifier> cached;
    private static ExpressionSimplifier();
    public abstract virtual object EvalBoxed(Expression expr);
    public static object Evaluate(Expression expr);
    public static Expression EvaluateToExpression(Expression expr);
}
internal class Microsoft.Azure.Cosmos.Linq.ExpressionSimplifier`1 : ExpressionSimplifier {
    public virtual object EvalBoxed(Expression expr);
    public T Eval(Expression expr);
}
internal static class Microsoft.Azure.Cosmos.Linq.ExpressionToSql : object {
    private static string SqlRoot;
    private static string DefaultParameterName;
    private static bool usePropertyRef;
    private static ExpressionToSql();
    public static SqlQuery TranslateQuery(Expression inputExpression, IDictionary`2<object, string> parameters, CosmosLinqSerializerOptionsInternal linqSerializerOptions, ScalarOperationKind& clientOperation);
    private static Collection Translate(Expression inputExpression, TranslationContext context);
    private static Collection TranslateInput(ConstantExpression inputExpression, TranslationContext context);
    private static string GetBindingParameterName(TranslationContext context);
    internal static SqlScalarExpression VisitNonSubqueryScalarExpression(Expression inputExpression, TranslationContext context);
    private static SqlScalarExpression VisitMethodCallScalar(MethodCallExpression methodCallExpression, TranslationContext context);
    private static SqlObjectProperty VisitBinding(MemberBinding binding, TranslationContext context);
    private static SqlUnaryScalarOperatorKind GetUnaryOperatorKind(ExpressionType type);
    private static SqlScalarExpression VisitUnary(UnaryExpression inputExpression, TranslationContext context);
    private static SqlBinaryScalarOperatorKind GetBinaryOperatorKind(ExpressionType expressionType, Type resultType);
    private static SqlScalarExpression VisitBinary(BinaryExpression inputExpression, TranslationContext context);
    private static SqlScalarExpression ApplyCustomConverters(Expression left, SqlLiteralScalarExpression right, TranslationContext context);
    private static bool TryMatchStringCompareTo(MethodCallExpression left, ConstantExpression right, ExpressionType compareOperator);
    private static SqlScalarExpression VisitStringCompareTo(MethodCallExpression left, ExpressionType compareOperator, bool reverseNodeType, TranslationContext context);
    private static ExpressionType ReverseExpressionTypeForStrings(ExpressionType compareOperator, string errorMessage);
    private static bool TryMatchStringCompare(MethodCallExpression left, ConstantExpression right, ExpressionType compareOperator);
    private static SqlScalarExpression VisitStringCompare(MethodCallExpression left, ExpressionType compareOperator, bool reverseNodeType, TranslationContext context);
    private static SqlScalarExpression VisitTypeIs(TypeBinaryExpression inputExpression, TranslationContext context);
    public static SqlScalarExpression VisitConstant(ConstantExpression inputExpression, TranslationContext context);
    private static SqlScalarExpression VisitConditional(ConditionalExpression inputExpression, TranslationContext context);
    private static SqlScalarExpression VisitParameter(ParameterExpression inputExpression, TranslationContext context);
    private static SqlScalarExpression VisitMemberAccess(MemberExpression inputExpression, TranslationContext context);
    private static SqlScalarExpression[] VisitExpressionList(ReadOnlyCollection`1<Expression> inputExpressionList, TranslationContext context);
    private static SqlObjectProperty VisitMemberAssignment(MemberAssignment inputExpression, TranslationContext context);
    private static SqlObjectProperty VisitMemberMemberBinding(MemberMemberBinding inputExpression, TranslationContext context);
    private static SqlObjectProperty VisitMemberListBinding(MemberListBinding inputExpression, TranslationContext context);
    private static SqlObjectProperty[] VisitBindingList(ReadOnlyCollection`1<MemberBinding> inputExpressionList, TranslationContext context);
    private static SqlObjectProperty[] CreateInitializers(ReadOnlyCollection`1<Expression> arguments, ReadOnlyCollection`1<MemberInfo> members, TranslationContext context);
    private static SqlSelectItem[] CreateSelectItems(ReadOnlyCollection`1<Expression> arguments, ReadOnlyCollection`1<MemberInfo> members, TranslationContext context);
    private static SqlScalarExpression VisitNew(NewExpression inputExpression, TranslationContext context);
    private static SqlScalarExpression VisitMemberInit(MemberInitExpression inputExpression, TranslationContext context);
    private static SqlScalarExpression VisitListInit(ListInitExpression inputExpression, TranslationContext context);
    private static SqlScalarExpression VisitNewArray(NewArrayExpression inputExpression, TranslationContext context);
    private static SqlScalarExpression VisitInvocation(InvocationExpression inputExpression, TranslationContext context);
    private static Collection ConvertToCollection(SqlScalarExpression scalar);
    private static Collection ConvertToScalarAnyCollection(TranslationContext context);
    private static SqlScalarExpression VisitNonSubqueryScalarExpression(Expression expression, ReadOnlyCollection`1<ParameterExpression> parameters, TranslationContext context);
    private static SqlScalarExpression VisitNonSubqueryScalarLambda(LambdaExpression lambdaExpression, TranslationContext context);
    private static Collection VisitCollectionExpression(Expression expression, ReadOnlyCollection`1<ParameterExpression> parameters, TranslationContext context);
    private static Collection VisitCollectionExpression(Expression expression, TranslationContext context, string parameterName);
    private static Collection VisitCollectionLambda(LambdaExpression lambdaExpression, TranslationContext context);
    private static Collection VisitMemberAccessCollectionExpression(Expression inputExpression, TranslationContext context, string parameterName);
    private static Collection VisitMethodCall(MethodCallExpression inputExpression, TranslationContext context);
    private static SqlSelectClause VisitGroupByAggregateMethodCall(MethodCallExpression inputExpression, TranslationContext context);
    private static bool IsSubqueryScalarExpression(Expression expression, Nullable`1& expressionObjKind, Boolean& isMinMaxAvgMethod);
    private static SqlScalarExpression VisitScalarExpression(LambdaExpression lambda, TranslationContext context);
    internal static SqlScalarExpression VisitScalarExpression(Expression expression, TranslationContext context);
    internal static bool TryGetSqlNumberLiteral(object value, SqlNumberLiteral& sqlNumberLiteral);
    private static SqlScalarExpression VisitScalarExpression(Expression expression, ReadOnlyCollection`1<ParameterExpression> parameters, TranslationContext context);
    private static SqlCollection CreateSubquerySqlCollection(SqlQuery query, SubqueryKind subqueryType);
    private static SqlQuery CreateSubquery(Expression expression, ReadOnlyCollection`1<ParameterExpression> parameters, TranslationContext context);
    private static SqlWhereClause VisitWhere(ReadOnlyCollection`1<Expression> arguments, TranslationContext context);
    private static SqlSelectClause VisitSelect(ReadOnlyCollection`1<Expression> arguments, TranslationContext context);
    private static Collection VisitSelectMany(ReadOnlyCollection`1<Expression> arguments, TranslationContext context);
    private static Collection VisitGroupBy(Type returnElementType, ReadOnlyCollection`1<Expression> arguments, TranslationContext context);
    private static SqlOrderByClause VisitOrderBy(ReadOnlyCollection`1<Expression> arguments, bool isDescending, TranslationContext context);
    private static bool TryGetTopSkipTakeLiteral(SqlScalarExpression scalarExpression, TranslationContext context, SqlNumberLiteral& literal);
    private static bool TryGetTopSkipTakeParameter(SqlScalarExpression scalarExpression, TranslationContext context, SqlParameter& sqlParameter);
    private static SqlOffsetSpec VisitSkip(ReadOnlyCollection`1<Expression> arguments, TranslationContext context);
    private static SqlLimitSpec VisitTakeLimit(ReadOnlyCollection`1<Expression> arguments, TranslationContext context);
    private static SqlTopSpec VisitTakeTop(ReadOnlyCollection`1<Expression> arguments, TranslationContext context);
    private static SqlSelectClause VisitAggregateFunction(ReadOnlyCollection`1<Expression> arguments, TranslationContext context, string aggregateFunctionName);
    private static SqlSelectClause VisitDistinct(ReadOnlyCollection`1<Expression> arguments, TranslationContext context);
    private static SqlSelectClause VisitCount(ReadOnlyCollection`1<Expression> arguments, TranslationContext context);
    private static SqlInputPathCollection ConvertPropertyRefToPath(SqlPropertyRefScalarExpression propRef);
    private static SqlInputPathCollection ConvertMemberIndexerToPath(SqlMemberIndexerScalarExpression memberIndexerExpression);
}
internal class Microsoft.Azure.Cosmos.Linq.FromParameterBindings : object {
    private List`1<Binding> ParameterDefinitions;
    public ParameterExpression SetInputParameter(Type parameterType, string parameterName, HashSet`1<ParameterExpression> inScope);
    public void Add(Binding binding);
    public IEnumerable`1<Binding> GetBindings();
    public ParameterExpression GetInputParameter();
}
internal static class Microsoft.Azure.Cosmos.Linq.GeometrySqlExpressionFactory : object {
    public static SqlScalarExpression Construct(Expression geometryExpression);
    private static SqlScalarExpression FromJToken(JToken jToken);
}
internal interface Microsoft.Azure.Cosmos.Linq.ICosmosLinqSerializerInternal {
    public abstract virtual bool RequiresCustomSerialization(MemberExpression memberExpression, Type memberType);
    public abstract virtual string Serialize(object value, MemberExpression memberExpression, Type memberType);
    public abstract virtual string SerializeScalarExpression(ConstantExpression inputExpression);
    public abstract virtual string SerializeMemberName(MemberInfo memberInfo);
}
internal interface Microsoft.Azure.Cosmos.Linq.IDocumentQuery {
}
internal interface Microsoft.Azure.Cosmos.Linq.IDocumentQuery`1 {
    public bool HasMoreResults { get; }
    public abstract virtual bool get_HasMoreResults();
    public abstract virtual Task`1<DocumentFeedResponse`1<TResult>> ExecuteNextAsync(CancellationToken token);
    public abstract virtual Task`1<DocumentFeedResponse`1<object>> ExecuteNextAsync(CancellationToken token);
}
internal interface Microsoft.Azure.Cosmos.Linq.IDocumentQueryProvider {
    public abstract virtual Task`1<TResult> ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Linq.LinqQueryOperation : object {
    [CompilerGeneratedAttribute]
private SqlQuerySpec <SqlQuerySpec>k__BackingField;
    [CompilerGeneratedAttribute]
private ScalarOperationKind <ScalarOperationKind>k__BackingField;
    public SqlQuerySpec SqlQuerySpec { get; }
    public ScalarOperationKind ScalarOperationKind { get; }
    public LinqQueryOperation(SqlQuerySpec sqlQuerySpec, ScalarOperationKind scalarOperationKind);
    [CompilerGeneratedAttribute]
public SqlQuerySpec get_SqlQuerySpec();
    [CompilerGeneratedAttribute]
public ScalarOperationKind get_ScalarOperationKind();
}
internal static class Microsoft.Azure.Cosmos.Linq.MathBuiltinFunctions : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, BuiltinFunctionVisitor> <MathBuiltinFunctionDefinitions>k__BackingField;
    private static Dictionary`2<string, BuiltinFunctionVisitor> MathBuiltinFunctionDefinitions { get; private set; }
    private static MathBuiltinFunctions();
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, BuiltinFunctionVisitor> get_MathBuiltinFunctionDefinitions();
    [CompilerGeneratedAttribute]
private static void set_MathBuiltinFunctionDefinitions(Dictionary`2<string, BuiltinFunctionVisitor> value);
    public static SqlScalarExpression Visit(MethodCallExpression methodCallExpression, TranslationContext context);
}
internal class Microsoft.Azure.Cosmos.Linq.MemberNames : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HasValue>k__BackingField;
    public string Value { get; }
    public string HasValue { get; }
    internal MemberNames(CosmosLinqSerializerOptions options);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public string get_HasValue();
}
internal static class Microsoft.Azure.Cosmos.Linq.Nominator : object {
    public static HashSet`1<Expression> Nominate(Expression expression, Func`2<Expression, bool> fnCanBeEvaluated);
}
internal static class Microsoft.Azure.Cosmos.Linq.OtherBuiltinSystemFunctions : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, BuiltinFunctionVisitor> <FunctionsDefinitions>k__BackingField;
    private static Dictionary`2<string, BuiltinFunctionVisitor> FunctionsDefinitions { get; private set; }
    private static OtherBuiltinSystemFunctions();
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, BuiltinFunctionVisitor> get_FunctionsDefinitions();
    [CompilerGeneratedAttribute]
private static void set_FunctionsDefinitions(Dictionary`2<string, BuiltinFunctionVisitor> value);
    public static SqlScalarExpression Visit(MethodCallExpression methodCallExpression, TranslationContext context);
}
internal class Microsoft.Azure.Cosmos.Linq.ParameterSubstitution : object {
    private Dictionary`2<ParameterExpression, Expression> substitutionTable;
    public static string InputParameterName;
    public void AddSubstitution(ParameterExpression parameter, Expression with);
    public Expression Lookup(ParameterExpression parameter);
    internal void Remove(ParameterExpression parameter);
}
internal class Microsoft.Azure.Cosmos.Linq.QueryUnderConstruction : object {
    [CompilerGeneratedAttribute]
private FromParameterBindings <FromParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private FromParameterBindings <GroupByParameter>k__BackingField;
    private Func`2<string, ParameterExpression> aliasCreatorFunc;
    public static string DefaultSubqueryRoot;
    private SqlSelectClause selectClause;
    private SqlWhereClause whereClause;
    private SqlOrderByClause orderByClause;
    private SqlGroupByClause groupByClause;
    private SqlTopSpec topSpec;
    private SqlOffsetSpec offsetSpec;
    private SqlLimitSpec limitSpec;
    private Lazy`1<ParameterExpression> alias;
    private QueryUnderConstruction inputQuery;
    public FromParameterBindings FromParameters { get; public set; }
    public FromParameterBindings GroupByParameter { get; public set; }
    public ParameterExpression Alias { get; }
    public QueryUnderConstruction(Func`2<string, ParameterExpression> aliasCreatorFunc);
    public QueryUnderConstruction(Func`2<string, ParameterExpression> aliasCreatorFunc, QueryUnderConstruction inputQuery);
    [CompilerGeneratedAttribute]
public FromParameterBindings get_FromParameters();
    [CompilerGeneratedAttribute]
public void set_FromParameters(FromParameterBindings value);
    [CompilerGeneratedAttribute]
public FromParameterBindings get_GroupByParameter();
    [CompilerGeneratedAttribute]
public void set_GroupByParameter(FromParameterBindings value);
    public ParameterExpression get_Alias();
    public void Bind(ParameterExpression parameter, SqlCollection collection);
    public void AddBinding(Binding binding);
    public ParameterExpression GetInputParameterInContext(bool isInNewQuery);
    private SqlFromClause CreateFromClause(SqlCollectionExpression inputCollectionExpression);
    private SqlFromClause CreateSubqueryFromClause();
    public SqlQuery GetSqlQuery();
    public QueryUnderConstruction PackageQuery(HashSet`1<ParameterExpression> inScope);
    public QueryUnderConstruction FlattenAsPossible();
    private QueryUnderConstruction Flatten();
    private SqlSelectClause Substitute(SqlSelectClause inputSelectClause, SqlTopSpec topSpec, SqlIdentifier inputParam, SqlSelectClause selectClause);
    private SqlWhereClause Substitute(SqlSelectSpec spec, SqlIdentifier inputParam, SqlWhereClause whereClause);
    private SqlOrderByClause Substitute(SqlSelectSpec spec, SqlIdentifier inputParam, SqlOrderByClause orderByClause);
    private SqlGroupByClause Substitute(SqlSelectSpec spec, SqlIdentifier inputParam, SqlGroupByClause groupByClause);
    public bool ShouldBeOnNewQuery(string methodName, int argumentCount);
    public QueryUnderConstruction AddSelectClause(SqlSelectClause select);
    public QueryUnderConstruction AddSelectClause(SqlSelectClause select, TranslationContext context);
    public QueryUnderConstruction AddOrderByClause(SqlOrderByClause orderBy, TranslationContext context);
    public QueryUnderConstruction UpdateOrderByClause(SqlOrderByClause thenBy, TranslationContext context);
    public QueryUnderConstruction AddGroupByClause(SqlGroupByClause groupBy, TranslationContext context);
    public QueryUnderConstruction AddOffsetSpec(SqlOffsetSpec offsetSpec, TranslationContext context);
    private static long GetOffsetCount(SqlOffsetSpec offsetSpec);
    public QueryUnderConstruction AddLimitSpec(SqlLimitSpec limitSpec, TranslationContext context);
    private static long GetLimitCount(SqlLimitSpec limitSpec);
    public QueryUnderConstruction AddTopSpec(SqlTopSpec topSpec);
    private static long GetTopCount(SqlTopSpec sqlTopSpec);
    private static SqlWhereClause CombineWithConjunction(SqlWhereClause first, SqlWhereClause second);
    private static FromParameterBindings CombineInputParameters(FromParameterBindings inputQueryParams, FromParameterBindings currentQueryParams);
    public QueryUnderConstruction AddWhereClause(SqlWhereClause whereClause, TranslationContext context);
    public QueryUnderConstruction GetSubquery(QueryUnderConstruction queryBeforeVisit);
    public bool HasOffsetSpec();
    private bool HasSelectAggregate();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private ParameterExpression <Flatten>b__31_0();
}
internal enum Microsoft.Azure.Cosmos.Linq.ScalarOperationKind : Enum {
    public int value__;
    public static ScalarOperationKind None;
    public static ScalarOperationKind FirstOrDefault;
}
internal static class Microsoft.Azure.Cosmos.Linq.SpatialBuiltinFunctions : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, BuiltinFunctionVisitor> <SpatialBuiltinFunctionDefinitions>k__BackingField;
    private static Dictionary`2<string, BuiltinFunctionVisitor> SpatialBuiltinFunctionDefinitions { get; private set; }
    private static SpatialBuiltinFunctions();
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, BuiltinFunctionVisitor> get_SpatialBuiltinFunctionDefinitions();
    [CompilerGeneratedAttribute]
private static void set_SpatialBuiltinFunctionDefinitions(Dictionary`2<string, BuiltinFunctionVisitor> value);
    public static SqlScalarExpression Visit(MethodCallExpression methodCallExpression, TranslationContext context);
}
internal class Microsoft.Azure.Cosmos.Linq.SqlBuiltinFunctionVisitor : BuiltinFunctionVisitor {
    [CompilerGeneratedAttribute]
private string <SqlName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStatic>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type[]> <ArgumentLists>k__BackingField;
    public string SqlName { get; private set; }
    public bool IsStatic { get; private set; }
    public List`1<Type[]> ArgumentLists { get; private set; }
    public SqlBuiltinFunctionVisitor(string sqlName, bool isStatic, List`1<Type[]> argumentLists);
    [CompilerGeneratedAttribute]
public string get_SqlName();
    [CompilerGeneratedAttribute]
private void set_SqlName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsStatic();
    [CompilerGeneratedAttribute]
private void set_IsStatic(bool value);
    [CompilerGeneratedAttribute]
public List`1<Type[]> get_ArgumentLists();
    [CompilerGeneratedAttribute]
private void set_ArgumentLists(List`1<Type[]> value);
    protected virtual SqlScalarExpression VisitExplicit(MethodCallExpression methodCallExpression, TranslationContext context);
    protected virtual SqlScalarExpression VisitImplicit(MethodCallExpression methodCallExpression, TranslationContext context);
    private bool MatchArgumentLists(ReadOnlyCollection`1<Expression> methodCallArguments, Type[] expectedArguments);
    private SqlScalarExpression VisitBuiltinFunction(MethodCallExpression methodCallExpression, TranslationContext context);
}
internal static class Microsoft.Azure.Cosmos.Linq.SqlExpressionManipulation : object {
    public static SqlScalarExpression Substitute(SqlScalarExpression replacement, SqlIdentifier toReplace, SqlScalarExpression into);
}
internal static class Microsoft.Azure.Cosmos.Linq.SqlTranslator : object {
    internal static string TranslateExpression(Expression inputExpression, CosmosLinqSerializerOptionsInternal linqSerializerOptions);
    internal static string TranslateExpressionOld(Expression inputExpression, CosmosLinqSerializerOptionsInternal linqSerializerOptions);
    internal static LinqQueryOperation TranslateQuery(Expression inputExpression, CosmosLinqSerializerOptionsInternal linqSerializerOptions, IDictionary`2<object, string> parameters);
}
internal static class Microsoft.Azure.Cosmos.Linq.StringBuiltinFunctions : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, BuiltinFunctionVisitor> <StringBuiltinFunctionDefinitions>k__BackingField;
    private static Dictionary`2<string, BuiltinFunctionVisitor> StringBuiltinFunctionDefinitions { get; private set; }
    private static StringBuiltinFunctions();
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, BuiltinFunctionVisitor> get_StringBuiltinFunctionDefinitions();
    [CompilerGeneratedAttribute]
private static void set_StringBuiltinFunctionDefinitions(Dictionary`2<string, BuiltinFunctionVisitor> value);
    public static SqlScalarExpression Visit(MethodCallExpression methodCallExpression, TranslationContext context);
}
internal class Microsoft.Azure.Cosmos.Linq.SubtreeEvaluator : ExpressionVisitor {
    private HashSet`1<Expression> candidates;
    public SubtreeEvaluator(HashSet`1<Expression> candidates);
    public Expression Evaluate(Expression expression);
    public virtual Expression Visit(Expression expression);
    protected virtual Expression VisitMemberInit(MemberInitExpression node);
    private Expression EvaluateMemberAccess(Expression expression);
    private Expression EvaluateConstant(Expression expression);
}
internal class Microsoft.Azure.Cosmos.Linq.TranslationContext : object {
    public MemberNames MemberNames;
    public ICosmosLinqSerializerInternal CosmosLinqSerializer;
    public HashSet`1<ParameterExpression> InScope;
    public QueryUnderConstruction CurrentQuery;
    public IDictionary`2<object, string> Parameters;
    public ParameterSubstitution GroupByKeySubstitution;
    public bool LastExpressionIsGroupBy;
    private ParameterSubstitution substitutions;
    private List`1<MethodCallExpression> methodStack;
    private List`1<ParameterExpression> lambdaParametersStack;
    private List`1<Collection> collectionStack;
    private Stack`1<SubqueryBinding> subqueryBindingStack;
    private static ICosmosLinqSerializerInternal DefaultLinqSerializer;
    private static MemberNames DefaultMemberNames;
    private Nullable`1<ScalarOperationKind> clientOperation;
    public ScalarOperationKind ClientOperation { get; }
    public SubqueryBinding CurrentSubqueryBinding { get; }
    public TranslationContext(CosmosLinqSerializerOptionsInternal linqSerializerOptionsInternal, IDictionary`2<object, string> parameters);
    private static TranslationContext();
    public ScalarOperationKind get_ClientOperation();
    public void SetClientOperation(ScalarOperationKind clientOperation);
    public Expression LookupSubstitution(ParameterExpression parameter);
    public ParameterExpression GenerateFreshParameter(Type parameterType, string baseParameterName, bool includeSuffix);
    public Func`2<string, ParameterExpression> GetGenFreshParameterFunc();
    public void PushParameter(ParameterExpression parameter, bool shouldBeOnNewQuery);
    public void PopParameter();
    public void PushMethod(MethodCallExpression method);
    public void PopMethod();
    public MethodCallExpression PeekMethod();
    public void PushCollection(Collection collection);
    public void PopCollection();
    public ParameterExpression SetInputParameter(Type type, string name);
    public void SetFromParameter(ParameterExpression parameter, SqlCollection collection);
    public bool IsInMainBranchSelect();
    public void PushSubqueryBinding(bool shouldBeOnNewQuery);
    public SubqueryBinding PopSubqueryBinding();
    public SubqueryBinding get_CurrentSubqueryBinding();
    public QueryUnderConstruction PackageCurrentQueryIfNeccessary();
    [CompilerGeneratedAttribute]
private ParameterExpression <GetGenFreshParameterFunc>b__21_0(string paramName);
}
internal static class Microsoft.Azure.Cosmos.Linq.TypeCheckFunctions : object {
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, BuiltinFunctionVisitor> <TypeCheckFunctionsDefinitions>k__BackingField;
    private static Dictionary`2<string, BuiltinFunctionVisitor> TypeCheckFunctionsDefinitions { get; private set; }
    private static TypeCheckFunctions();
    [CompilerGeneratedAttribute]
private static Dictionary`2<string, BuiltinFunctionVisitor> get_TypeCheckFunctionsDefinitions();
    [CompilerGeneratedAttribute]
private static void set_TypeCheckFunctionsDefinitions(Dictionary`2<string, BuiltinFunctionVisitor> value);
    public static SqlScalarExpression Visit(MethodCallExpression methodCallExpression, TranslationContext context);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.Linq.TypeSystem : object {
    public static Type GetElementType(Type type);
    [ExtensionAttribute]
public static string GetMemberName(MemberInfo memberInfo, TranslationContext context);
    private static Type GetElementType(Type type, HashSet`1<Type> visitedSet);
    private static Type GetMoreSpecificType(Type left, Type right);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static bool IsEnumerable(Type type);
    [ExtensionAttribute]
public static bool IsExtensionMethod(MethodInfo methodInfo);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static Type NullableUnderlyingType(Type type);
}
internal static class Microsoft.Azure.Cosmos.Linq.Utilities : object {
    public static string SqlQuoteString(string toQuote);
    public static LambdaExpression GetLambda(Expression expr);
    public static ParameterExpression NewParameter(string prefix, Type type, HashSet`1<ParameterExpression> inScope, bool includeSuffix);
}
internal class Microsoft.Azure.Cosmos.MediaOptions : object {
    [CompilerGeneratedAttribute]
private string <Slug>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    public string Slug { get; public set; }
    public string ContentType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Slug();
    [CompilerGeneratedAttribute]
public void set_Slug(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
}
internal enum Microsoft.Azure.Cosmos.MediaReadMode : Enum {
    public int value__;
    public static MediaReadMode Buffered;
    public static MediaReadMode Streamed;
}
internal class Microsoft.Azure.Cosmos.MediaResponse : object {
    private INameValueCollection responseHeaders;
    [CompilerGeneratedAttribute]
private string <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Media>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Slug>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ContentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaxMediaStorageUsageInMB>k__BackingField;
    [CompilerGeneratedAttribute]
private long <CurrentMediaStorageUsageInMB>k__BackingField;
    public string ActivityId { get; internal set; }
    public Stream Media { get; internal set; }
    public string Slug { get; internal set; }
    public string ContentType { get; internal set; }
    public long ContentLength { get; internal set; }
    public long MaxMediaStorageUsageInMB { get; internal set; }
    public long CurrentMediaStorageUsageInMB { get; internal set; }
    public NameValueCollection ResponseHeaders { get; }
    internal INameValueCollection Headers { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ActivityId();
    [CompilerGeneratedAttribute]
internal void set_ActivityId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_Media();
    [CompilerGeneratedAttribute]
internal void set_Media(Stream value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Slug();
    [CompilerGeneratedAttribute]
internal void set_Slug(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
internal void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_ContentLength();
    [CompilerGeneratedAttribute]
internal void set_ContentLength(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_MaxMediaStorageUsageInMB();
    [CompilerGeneratedAttribute]
internal void set_MaxMediaStorageUsageInMB(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_CurrentMediaStorageUsageInMB();
    [CompilerGeneratedAttribute]
internal void set_CurrentMediaStorageUsageInMB(long value);
    public sealed virtual NameValueCollection get_ResponseHeaders();
    internal INameValueCollection get_Headers();
    internal void set_Headers(INameValueCollection value);
}
internal class Microsoft.Azure.Cosmos.MediaStream : Stream {
    private HttpResponseMessage responseMessage;
    private Stream contentStream;
    private bool isDisposed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public long Position { get; public set; }
    public MediaStream(HttpResponseMessage responseMessage, Stream contentStream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Close();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual object InitializeLifetimeService();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Azure.Cosmos.MetadataRequestThrottleRetryPolicy : object {
    private static int DefaultMaxWaitTimeInSeconds;
    private static int DefaultMaxServiceUnavailableRetryCount;
    private IGlobalEndpointManager globalEndpointManager;
    private IDocumentClientRetryPolicy throttlingRetryPolicy;
    private int maxServiceUnavailableRetryCount;
    private MetadataRetryContext retryContext;
    private int serviceUnavailableRetryCount;
    public MetadataRequestThrottleRetryPolicy(IGlobalEndpointManager endpointManager, int maxRetryAttemptsOnThrottledRequests, int maxRetryWaitTimeInSeconds);
    public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(Exception exception, CancellationToken cancellationToken);
    public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(ResponseMessage cosmosResponseMessage, CancellationToken cancellationToken);
    public sealed virtual void OnBeforeSendRequest(DocumentServiceRequest request);
    private bool IncrementRetryIndexOnServiceUnavailableForMetadataRead();
}
internal class Microsoft.Azure.Cosmos.Metrics : object {
    private ValueStopwatch stopwatch;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public long ElapsedMilliseconds { get; }
    public double AverageElapsedMilliseconds { get; }
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public long get_ElapsedMilliseconds();
    public double get_AverageElapsedMilliseconds();
    public void Start();
    public void Stop();
    public virtual string ToString();
}
internal static class Microsoft.Azure.Cosmos.MurmurHash3 : object {
    public static UInt32 Hash32(string value, UInt32 seed);
    public static UInt32 Hash32(bool value, UInt32 seed);
    public static UInt32 Hash32(T value, UInt32 seed);
    public static UInt32 Hash32(ReadOnlySpan`1<byte> span, UInt32 seed);
    private static UInt32 RotateLeft32(UInt32 n, int numBits);
    public static UInt128 Hash128(string value, UInt128 seed);
    public static UInt128 Hash128(bool value, UInt128 seed);
    public static UInt128 Hash128(T value, UInt128 seed);
    public static UInt128 Hash128(ReadOnlySpan`1<byte> span, UInt128 seed);
    private static ulong Mix(ulong h);
    private static ulong RotateLeft64(ulong n, int numBits);
}
internal class Microsoft.Azure.Cosmos.NameValueResponseHeaders : CosmosMessageHeadersInternal {
    [CompilerGeneratedAttribute]
private INameValueCollection <INameValueCollection>k__BackingField;
    public INameValueCollection INameValueCollection { get; }
    public NameValueResponseHeaders(INameValueCollection nameValueCollection);
    [CompilerGeneratedAttribute]
public virtual INameValueCollection get_INameValueCollection();
    public virtual void Add(string headerName, string value);
    public virtual void Add(string headerName, IEnumerable`1<string> values);
    public virtual void Set(string headerName, string value);
    public virtual string Get(string headerName);
    public virtual bool TryGetValue(string headerName, String& value);
    public virtual void Remove(string headerName);
    public virtual String[] AllKeys();
    public virtual IEnumerator`1<string> GetEnumerator();
    public virtual int Count();
    public virtual String[] GetValues(string key);
}
internal class Microsoft.Azure.Cosmos.NullRequestSigner : object {
    public sealed virtual Task SignRequestAsync(DocumentServiceRequest request, CancellationToken cancellationToken);
}
[IsReadOnlyAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Number64/Number64JsonConverter")]
internal class Microsoft.Azure.Cosmos.Number64 : ValueType {
    public static Number64 MaxValue;
    public static Number64 MinValue;
    private Nullable`1<double> doubleValue;
    private Nullable`1<long> longValue;
    public bool IsInteger { get; }
    public bool IsDouble { get; }
    public bool IsInfinity { get; }
    public bool IsNaN { get; }
    private Number64(double value);
    private Number64(long value);
    private static Number64();
    public bool get_IsInteger();
    public bool get_IsDouble();
    public bool get_IsInfinity();
    public bool get_IsNaN();
    public virtual string ToString();
    public string ToString(string format);
    public string ToString(IFormatProvider formatProvider);
    public string ToString(string format, IFormatProvider formatProvider);
    public static bool op_LessThan(Number64 left, Number64 right);
    public static bool op_GreaterThan(Number64 left, Number64 right);
    public static bool op_LessThanOrEqual(Number64 left, Number64 right);
    public static bool op_GreaterThanOrEqual(Number64 left, Number64 right);
    public static bool op_Equality(Number64 left, Number64 right);
    public static bool op_Inequality(Number64 left, Number64 right);
    public static Number64 op_Implicit(long value);
    public static Number64 op_Implicit(double value);
    public static long ToLong(Number64 number64);
    public static double ToDouble(Number64 number64);
    public static DoubleEx ToDoubleEx(Number64 number64);
    public int CompareTo(object value);
    public sealed virtual int CompareTo(Number64 other);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Number64 other);
    public virtual int GetHashCode();
}
internal class Microsoft.Azure.Cosmos.OfferAutoscaleAutoUpgradeProperties : object {
    [CompilerGeneratedAttribute]
private AutoscaleThroughputProperties <ThroughputProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public AutoscaleThroughputProperties ThroughputProperties { get; private set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    internal OfferAutoscaleAutoUpgradeProperties(int incrementPercent);
    [CompilerGeneratedAttribute]
public AutoscaleThroughputProperties get_ThroughputProperties();
    [CompilerGeneratedAttribute]
private void set_ThroughputProperties(AutoscaleThroughputProperties value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
    internal string GetJsonString();
}
internal class Microsoft.Azure.Cosmos.OfferAutoscaleProperties : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxThroughput>k__BackingField;
    [CompilerGeneratedAttribute]
private OfferAutoscaleAutoUpgradeProperties <AutoscaleAutoUpgradeProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public Nullable`1<int> MaxThroughput { get; private set; }
    [JsonPropertyAttribute]
public OfferAutoscaleAutoUpgradeProperties AutoscaleAutoUpgradeProperties { get; private set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    internal OfferAutoscaleProperties(int startingMaxThroughput, Nullable`1<int> autoUpgradeMaxThroughputIncrementPercentage);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxThroughput();
    [CompilerGeneratedAttribute]
private void set_MaxThroughput(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public OfferAutoscaleAutoUpgradeProperties get_AutoscaleAutoUpgradeProperties();
    [CompilerGeneratedAttribute]
private void set_AutoscaleAutoUpgradeProperties(OfferAutoscaleAutoUpgradeProperties value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
    internal string GetJsonString();
}
internal class Microsoft.Azure.Cosmos.OfferContentProperties : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OfferThroughput>k__BackingField;
    [CompilerGeneratedAttribute]
private OfferAutoscaleProperties <OfferAutoscaleSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OfferIsRUPerMinuteThroughputEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <OfferLastReplaceTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public Nullable`1<int> OfferThroughput { get; private set; }
    [JsonPropertyAttribute]
public OfferAutoscaleProperties OfferAutoscaleSettings { get; private set; }
    [JsonPropertyAttribute]
public Nullable`1<bool> OfferIsRUPerMinuteThroughputEnabled { get; private set; }
    [JsonPropertyAttribute]
internal Nullable`1<long> OfferLastReplaceTimestamp { get; private set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    internal OfferContentProperties(int manualThroughput);
    internal OfferContentProperties(OfferAutoscaleProperties autoscaleProperties);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OfferThroughput();
    [CompilerGeneratedAttribute]
private void set_OfferThroughput(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public OfferAutoscaleProperties get_OfferAutoscaleSettings();
    [CompilerGeneratedAttribute]
private void set_OfferAutoscaleSettings(OfferAutoscaleProperties value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_OfferIsRUPerMinuteThroughputEnabled();
    [CompilerGeneratedAttribute]
private void set_OfferIsRUPerMinuteThroughputEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<long> get_OfferLastReplaceTimestamp();
    [CompilerGeneratedAttribute]
private void set_OfferLastReplaceTimestamp(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
    public static OfferContentProperties CreateManualOfferConent(int throughput);
    public static OfferContentProperties CreateAutoscaleOfferConent(int startingMaxThroughput, Nullable`1<int> autoUpgradeMaxThroughputIncrementPercentage);
}
internal class Microsoft.Azure.Cosmos.OpenTelemetryResponse : OpenTelemetryAttributes {
    internal OpenTelemetryResponse(TransactionalBatchResponse responseMessage, bool isHomogenousOperations, Nullable`1<OperationType> batchOperation);
    internal OpenTelemetryResponse(ResponseMessage responseMessage);
    private OpenTelemetryResponse(HttpStatusCode statusCode, Nullable`1<double> requestCharge, string responseContentLength, CosmosDiagnostics diagnostics, string itemCount, RequestMessage requestMessage, Nullable`1<SubStatusCodes> subStatusCode, string activityId, string correlationId, OperationType operationType, Nullable`1<int> batchSize, Nullable`1<OperationType> batchOperationName);
    private static string GetPayloadSize(ResponseMessage response);
    private static Headers GetHeader(TransactionalBatchResponse responseMessage);
    private static Headers GetHeader(ResponseMessage responseMessage);
}
internal class Microsoft.Azure.Cosmos.OpenTelemetryResponse`1 : OpenTelemetryAttributes {
    internal OpenTelemetryResponse`1(FeedResponse`1<T> responseMessage);
    internal OpenTelemetryResponse`1(Response`1<T> responseMessage);
    private OpenTelemetryResponse`1(HttpStatusCode statusCode, Nullable`1<double> requestCharge, string responseContentLength, CosmosDiagnostics diagnostics, string itemCount, RequestMessage requestMessage, Nullable`1<SubStatusCodes> subStatusCode, string activityId, string correlatedActivityId, OperationType operationType);
    private static Headers GetHeader(FeedResponse`1<T> responseMessage);
    private static Headers GetHeader(Response`1<T> responseMessage);
}
public enum Microsoft.Azure.Cosmos.OperationKind : Enum {
    public int value__;
    public static OperationKind Invalid;
    public static OperationKind Create;
    public static OperationKind Replace;
    public static OperationKind Delete;
    [ObsoleteAttribute("This item is obsolete as it does not apply to Conflict.")]
public static OperationKind Read;
}
internal class Microsoft.Azure.Cosmos.Pagination.BufferedPartitionRangePageAsyncEnumerator`2 : BufferedPartitionRangePageAsyncEnumeratorBase`2<TPage, TState> {
    private PartitionRangePageAsyncEnumerator`2<TPage, TState> enumerator;
    private Nullable`1<TryCatch`1<TPage>> bufferedPage;
    public Exception BufferedException { get; }
    public int BufferedItemCount { get; }
    public BufferedPartitionRangePageAsyncEnumerator`2(PartitionRangePageAsyncEnumerator`2<TPage, TState> enumerator);
    public virtual Exception get_BufferedException();
    public virtual int get_BufferedItemCount();
    public virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.BufferedPartitionRangePageAsyncEnumerator`2/<GetNextPageAsync>d__8")]
protected virtual Task`1<TryCatch`1<TPage>> GetNextPageAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.BufferedPartitionRangePageAsyncEnumerator`2/<PrefetchAsync>d__9")]
public virtual ValueTask PrefetchAsync(ITrace trace, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.Pagination.BufferedPartitionRangePageAsyncEnumeratorBase`2 : PartitionRangePageAsyncEnumerator`2<TPage, TState> {
    public Exception BufferedException { get; }
    public int BufferedItemCount { get; }
    protected BufferedPartitionRangePageAsyncEnumeratorBase`2(FeedRangeState`1<TState> feedRangeState);
    public abstract virtual Exception get_BufferedException();
    public abstract virtual int get_BufferedItemCount();
    public abstract virtual ValueTask PrefetchAsync(ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Pagination.CreatePartitionRangePageAsyncEnumerator`2 : MulticastDelegate {
    public CreatePartitionRangePageAsyncEnumerator`2(object object, IntPtr method);
    public virtual PartitionRangePageAsyncEnumerator`2<TPage, TState> Invoke(FeedRangeState`1<TState> feedRangeState);
    public virtual IAsyncResult BeginInvoke(FeedRangeState`1<TState> feedRangeState, AsyncCallback callback, object object);
    public virtual PartitionRangePageAsyncEnumerator`2<TPage, TState> EndInvoke(IAsyncResult result);
}
internal class Microsoft.Azure.Cosmos.Pagination.CrossFeedRangePage`2 : Page`1<CrossFeedRangeState`1<TBackendState>> {
    private static ImmutableHashSet`1<string> bannedHeaders;
    [CompilerGeneratedAttribute]
private TBackendPage <Page>k__BackingField;
    public TBackendPage Page { get; }
    public int ItemCount { get; }
    protected ImmutableHashSet`1<string> DerivedClassBannedHeaders { get; }
    public CrossFeedRangePage`2(TBackendPage backendEndPage, CrossFeedRangeState`1<TBackendState> state);
    private static CrossFeedRangePage`2();
    [CompilerGeneratedAttribute]
public TBackendPage get_Page();
    public virtual int get_ItemCount();
    protected virtual ImmutableHashSet`1<string> get_DerivedClassBannedHeaders();
}
internal class Microsoft.Azure.Cosmos.Pagination.CrossFeedRangeState`1 : State {
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<FeedRangeState`1<TState>> <Value>k__BackingField;
    public ReadOnlyMemory`1<FeedRangeState`1<TState>> Value { get; }
    public CrossFeedRangeState`1(ReadOnlyMemory`1<FeedRangeState`1<TState>> value);
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<FeedRangeState`1<TState>> get_Value();
}
internal static class Microsoft.Azure.Cosmos.Pagination.CrossFeedRangeStateSplitterAndMerger : object {
    public static Memory`1<FeedRangeState`1<TState>> Merge(ReadOnlyMemory`1<FeedRangeState`1<TState>> first, ReadOnlyMemory`1<FeedRangeState`1<TState>> second);
    public static Memory`1<FeedRangeState`1<TState>> Merge(ReadOnlyMemory`1<FeedRangeState`1<TState>> first, ReadOnlyMemory`1<FeedRangeState`1<TState>> second, ReadOnlyMemory`1<FeedRangeState`1<TState>> third);
    public static Memory`1<FeedRangeState`1<TState>> Merge(IReadOnlyList`1<ReadOnlyMemory`1<FeedRangeState`1<TState>>> ranges);
    public static bool TrySplit(ReadOnlyMemory`1<FeedRangeState`1<TState>> rangeToSplit, ReadOnlyMemory`1& first, ReadOnlyMemory`1& second);
    public static bool TrySplit(ReadOnlyMemory`1<FeedRangeState`1<TState>> rangeToSplit, ReadOnlyMemory`1& first, ReadOnlyMemory`1& second, ReadOnlyMemory`1& third);
    public static bool TrySplit(ReadOnlyMemory`1<FeedRangeState`1<TState>> rangeToSplit, int numPartitions, List`1& partitions);
}
internal class Microsoft.Azure.Cosmos.Pagination.CrossPartitionRangePageAsyncEnumerator`2 : object {
    private IFeedRangeProvider feedRangeProvider;
    private CreatePartitionRangePageAsyncEnumerator`2<TPage, TState> createPartitionRangeEnumerator;
    private AsyncLazy`1<IQueue`1<TPage, TState, PartitionRangePageAsyncEnumerator`2<TPage, TState>>> lazyEnumerators;
    private Nullable`1<FeedRangeState`1<TState>> nextState;
    [CompilerGeneratedAttribute]
private TryCatch`1<CrossFeedRangePage`2<TPage, TState>> <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedRangeInternal <CurrentRange>k__BackingField;
    public TryCatch`1<CrossFeedRangePage`2<TPage, TState>> Current { get; private set; }
    public FeedRangeInternal CurrentRange { get; private set; }
    public CrossPartitionRangePageAsyncEnumerator`2(IFeedRangeProvider feedRangeProvider, CreatePartitionRangePageAsyncEnumerator`2<TPage, TState> createPartitionRangeEnumerator, IComparer`1<PartitionRangePageAsyncEnumerator`2<TPage, TState>> comparer, Nullable`1<int> maxConcurrency, PrefetchPolicy prefetchPolicy, CrossFeedRangeState`1<TState> state);
    [CompilerGeneratedAttribute]
public sealed virtual TryCatch`1<CrossFeedRangePage`2<TPage, TState>> get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(TryCatch`1<CrossFeedRangePage`2<TPage, TState>> value);
    [CompilerGeneratedAttribute]
public FeedRangeInternal get_CurrentRange();
    [CompilerGeneratedAttribute]
private void set_CurrentRange(FeedRangeInternal value);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.CrossPartitionRangePageAsyncEnumerator`2/<MoveNextAsync>d__13")]
public sealed virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
    public sealed virtual ValueTask DisposeAsync();
    public bool TryPeekNext(FeedRangeState`1& nextState);
    private static bool IsSplitException(Exception exeception);
    private static Nullable`1<FeedRangeState`1<TState>> GetNextRange(IQueue`1<TPage, TState, PartitionRangePageAsyncEnumerator`2<TPage, TState>> enumerators);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.CrossPartitionRangePageAsyncEnumerator`2/<InitializeEnumeratorsAsync>d__18")]
private static Task`1<IQueue`1<TPage, TState, PartitionRangePageAsyncEnumerator`2<TPage, TState>>> InitializeEnumeratorsAsync(IFeedRangeProvider feedRangeProvider, CreatePartitionRangePageAsyncEnumerator`2<TPage, TState> createPartitionRangeEnumerator, IComparer`1<PartitionRangePageAsyncEnumerator`2<TPage, TState>> comparer, Nullable`1<int> maxConcurrency, PrefetchPolicy prefetchPolicy, CrossFeedRangeState`1<TState> state, ITrace trace, CancellationToken token);
    private static IReadOnlyList`1<BufferedPartitionRangePageAsyncEnumeratorBase`2<TPage, TState>> CreateBufferedEnumerators(PrefetchPolicy policy, CreatePartitionRangePageAsyncEnumerator`2<TPage, TState> createPartitionRangeEnumerator, ReadOnlyMemory`1<FeedRangeState`1<TState>> rangeAndStates, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Pagination.DocumentContainer : object {
    private IMonadicDocumentContainer monadicDocumentContainer;
    public DocumentContainer(IMonadicDocumentContainer monadicDocumentContainer);
    public sealed virtual Task`1<TryCatch`1<List`1<FeedRangeEpk>>> MonadicGetChildRangeAsync(FeedRangeInternal feedRange, ITrace trace, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<FeedRangeEpk>> GetChildRangeAsync(FeedRangeInternal feedRange, ITrace trace, CancellationToken cancellationToken);
    public sealed virtual Task`1<TryCatch`1<List`1<FeedRangeEpk>>> MonadicGetFeedRangesAsync(ITrace trace, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<FeedRangeEpk>> GetFeedRangesAsync(ITrace trace, CancellationToken cancellationToken);
    public sealed virtual Task RefreshProviderAsync(ITrace trace, CancellationToken cancellationToken);
    public sealed virtual Task`1<TryCatch> MonadicRefreshProviderAsync(ITrace trace, CancellationToken cancellationToken);
    public sealed virtual Task`1<TryCatch`1<Record>> MonadicCreateItemAsync(CosmosObject payload, CancellationToken cancellationToken);
    public sealed virtual Task`1<Record> CreateItemAsync(CosmosObject payload, CancellationToken cancellationToken);
    public sealed virtual Task`1<TryCatch`1<Record>> MonadicReadItemAsync(CosmosElement partitionKey, string identifer, CancellationToken cancellationToken);
    public sealed virtual Task`1<Record> ReadItemAsync(CosmosElement partitionKey, string identifier, CancellationToken cancellationToken);
    public sealed virtual Task`1<TryCatch`1<ReadFeedPage>> MonadicReadFeedAsync(FeedRangeState`1<ReadFeedState> feedRangeState, ReadFeedExecutionOptions readFeedPaginationOptions, ITrace trace, CancellationToken cancellationToken);
    public sealed virtual Task`1<ReadFeedPage> ReadFeedAsync(FeedRangeState`1<ReadFeedState> feedRangeState, ReadFeedExecutionOptions readFeedPaginationOptions, ITrace trace, CancellationToken cancellationToken);
    public sealed virtual Task`1<TryCatch`1<QueryPage>> MonadicQueryAsync(SqlQuerySpec sqlQuerySpec, FeedRangeState`1<QueryState> feedRangeState, QueryExecutionOptions queryPaginationOptions, ITrace trace, CancellationToken cancellationToken);
    public sealed virtual Task`1<QueryPage> QueryAsync(SqlQuerySpec sqlQuerySpec, FeedRangeState`1<QueryState> feedRangeState, QueryExecutionOptions queryPaginationOptions, ITrace trace, CancellationToken cancellationToken);
    public sealed virtual Task`1<TryCatch> MonadicSplitAsync(FeedRangeInternal feedRange, CancellationToken cancellationToken);
    public sealed virtual Task SplitAsync(FeedRangeInternal feedRange, CancellationToken cancellationToken);
    public sealed virtual Task`1<TryCatch> MonadicMergeAsync(FeedRangeInternal feedRange1, FeedRangeInternal feedRange2, CancellationToken cancellationToken);
    public sealed virtual Task MergeAsync(FeedRangeInternal feedRange1, FeedRangeInternal feedRange2, CancellationToken cancellationToken);
    public sealed virtual Task`1<ChangeFeedPage> ChangeFeedAsync(FeedRangeState`1<ChangeFeedState> feedRangeState, ChangeFeedExecutionOptions changeFeedPaginationOptions, ITrace trace, CancellationToken cancellationToken);
    public sealed virtual Task`1<TryCatch`1<ChangeFeedPage>> MonadicChangeFeedAsync(FeedRangeState`1<ChangeFeedState> state, ChangeFeedExecutionOptions changeFeedPaginationOptions, ITrace trace, CancellationToken cancellationToken);
    public sealed virtual Task`1<string> GetResourceIdentifierAsync(ITrace trace, CancellationToken cancellationToken);
    public sealed virtual Task`1<TryCatch`1<string>> MonadicGetResourceIdentifierAsync(ITrace trace, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.Pagination.ExecutionOptions : object {
    protected static ImmutableHashSet`1<string> bannedAdditionalHeaders;
    private static ImmutableDictionary`2<string, string> EmptyDictionary;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <AdditionalHeaders>k__BackingField;
    public Nullable`1<int> PageSizeLimit { get; }
    public IReadOnlyDictionary`2<string, string> AdditionalHeaders { get; }
    protected ImmutableHashSet`1<string> BannedAdditionalHeaders { get; }
    protected ExecutionOptions(Nullable`1<int> pageSizeLimit, IReadOnlyDictionary`2<string, string> additionalHeaders);
    private static ExecutionOptions();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSizeLimit();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_AdditionalHeaders();
    protected abstract virtual ImmutableHashSet`1<string> get_BannedAdditionalHeaders();
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Pagination.FeedRangeState`1 : ValueType {
    [CompilerGeneratedAttribute]
private FeedRangeInternal <FeedRange>k__BackingField;
    [CompilerGeneratedAttribute]
private TState <State>k__BackingField;
    public FeedRangeInternal FeedRange { get; }
    public TState State { get; }
    public FeedRangeState`1(FeedRangeInternal feedRange, TState state);
    [CompilerGeneratedAttribute]
public FeedRangeInternal get_FeedRange();
    [CompilerGeneratedAttribute]
public TState get_State();
}
internal class Microsoft.Azure.Cosmos.Pagination.FullyBufferedPartitionRangeAsyncEnumerator`2 : BufferedPartitionRangePageAsyncEnumeratorBase`2<TPage, TState> {
    private PartitionRangePageAsyncEnumerator`2<TPage, TState> enumerator;
    private List`1<TPage> bufferedPages;
    private int currentIndex;
    private int bufferedItemCount;
    private Exception exception;
    private bool hasPrefetched;
    public Exception BufferedException { get; }
    public int BufferedItemCount { get; }
    public FullyBufferedPartitionRangeAsyncEnumerator`2(PartitionRangePageAsyncEnumerator`2<TPage, TState> enumerator);
    public FullyBufferedPartitionRangeAsyncEnumerator`2(PartitionRangePageAsyncEnumerator`2<TPage, TState> enumerator, IReadOnlyList`1<TPage> bufferedPages);
    public virtual Exception get_BufferedException();
    public virtual int get_BufferedItemCount();
    public virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.FullyBufferedPartitionRangeAsyncEnumerator`2/<PrefetchAsync>d__13")]
public virtual ValueTask PrefetchAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.FullyBufferedPartitionRangeAsyncEnumerator`2/<GetNextPageAsync>d__14")]
protected virtual Task`1<TryCatch`1<TPage>> GetNextPageAsync(ITrace trace, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Cosmos.Pagination.IDocumentContainer {
    public abstract virtual Task`1<Record> CreateItemAsync(CosmosObject payload, CancellationToken cancellationToken);
    public abstract virtual Task`1<Record> ReadItemAsync(CosmosElement partitionKey, string identifier, CancellationToken cancellationToken);
    public abstract virtual Task SplitAsync(FeedRangeInternal feedRange, CancellationToken cancellationToken);
    public abstract virtual Task MergeAsync(FeedRangeInternal feedRange1, FeedRangeInternal feedRange2, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetResourceIdentifierAsync(ITrace trace, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Cosmos.Pagination.IFeedRangeProvider {
    public abstract virtual Task`1<List`1<FeedRangeEpk>> GetChildRangeAsync(FeedRangeInternal feedRange, ITrace trace, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<FeedRangeEpk>> GetFeedRangesAsync(ITrace trace, CancellationToken cancellationToken);
    public abstract virtual Task RefreshProviderAsync(ITrace trace, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Cosmos.Pagination.IMonadicDocumentContainer {
    public abstract virtual Task`1<TryCatch`1<Record>> MonadicCreateItemAsync(CosmosObject payload, CancellationToken cancellationToken);
    public abstract virtual Task`1<TryCatch`1<Record>> MonadicReadItemAsync(CosmosElement partitionKey, string identifer, CancellationToken cancellationToken);
    public abstract virtual Task`1<TryCatch> MonadicSplitAsync(FeedRangeInternal feedRange, CancellationToken cancellationToken);
    public abstract virtual Task`1<TryCatch> MonadicMergeAsync(FeedRangeInternal feedRange1, FeedRangeInternal feedRange2, CancellationToken cancellationToken);
    public abstract virtual Task`1<TryCatch`1<string>> MonadicGetResourceIdentifierAsync(ITrace trace, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Cosmos.Pagination.IMonadicFeedRangeProvider {
    public abstract virtual Task`1<TryCatch`1<List`1<FeedRangeEpk>>> MonadicGetChildRangeAsync(FeedRangeInternal feedRange, ITrace trace, CancellationToken cancellationToken);
    public abstract virtual Task`1<TryCatch`1<List`1<FeedRangeEpk>>> MonadicGetFeedRangesAsync(ITrace trace, CancellationToken cancellationToken);
    public abstract virtual Task`1<TryCatch> MonadicRefreshProviderAsync(ITrace trace, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Cosmos.Pagination.IPrefetcher {
    public abstract virtual ValueTask PrefetchAsync(ITrace trace, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Cosmos.Pagination.ITracingAsyncEnumerator`1 {
    public T Current { get; }
    public abstract virtual T get_Current();
    public abstract virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Pagination.NetworkAttachedDocumentContainer : object {
    private ContainerInternal container;
    private CosmosQueryClient cosmosQueryClient;
    private ICosmosDistributedQueryClient distributedQueryClient;
    private QueryRequestOptions queryRequestOptions;
    private ChangeFeedRequestOptions changeFeedRequestOptions;
    private string resourceLink;
    private ResourceType resourceType;
    private Guid correlatedActivityId;
    public NetworkAttachedDocumentContainer(ContainerInternal container, CosmosQueryClient cosmosQueryClient, Guid correlatedActivityId, QueryRequestOptions queryRequestOptions, ChangeFeedRequestOptions changeFeedRequestOptions, string resourceLink, ResourceType resourceType);
    public NetworkAttachedDocumentContainer(ContainerInternal container, CosmosQueryClient cosmosQueryClient, ICosmosDistributedQueryClient distributedQueryClient, Guid correlatedActivityId, QueryRequestOptions queryRequestOptions, ChangeFeedRequestOptions changeFeedRequestOptions, string resourceLink, ResourceType resourceType);
    public sealed virtual Task`1<TryCatch> MonadicSplitAsync(FeedRangeInternal feedRange, CancellationToken cancellationToken);
    public sealed virtual Task`1<TryCatch> MonadicMergeAsync(FeedRangeInternal feedRange1, FeedRangeInternal feedRange2, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.NetworkAttachedDocumentContainer/<MonadicCreateItemAsync>d__12")]
public sealed virtual Task`1<TryCatch`1<Record>> MonadicCreateItemAsync(CosmosObject payload, CancellationToken cancellationToken);
    public sealed virtual Task`1<TryCatch`1<Record>> MonadicReadItemAsync(CosmosElement partitionKey, string identifer, CancellationToken cancellationToken);
    public sealed virtual Task`1<TryCatch`1<List`1<FeedRangeEpk>>> MonadicGetFeedRangesAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.NetworkAttachedDocumentContainer/<MonadicGetChildRangeAsync>d__15")]
public sealed virtual Task`1<TryCatch`1<List`1<FeedRangeEpk>>> MonadicGetChildRangeAsync(FeedRangeInternal feedRange, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.NetworkAttachedDocumentContainer/<MonadicRefreshProviderAsync>d__16")]
public sealed virtual Task`1<TryCatch> MonadicRefreshProviderAsync(ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.NetworkAttachedDocumentContainer/<MonadicReadFeedAsync>d__17")]
public sealed virtual Task`1<TryCatch`1<ReadFeedPage>> MonadicReadFeedAsync(FeedRangeState`1<ReadFeedState> feedRangeState, ReadFeedExecutionOptions readFeedPaginationOptions, ITrace trace, CancellationToken cancellationToken);
    public sealed virtual Task`1<TryCatch`1<QueryPage>> MonadicQueryAsync(SqlQuerySpec sqlQuerySpec, FeedRangeState`1<QueryState> feedRangeState, QueryExecutionOptions queryPaginationOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.NetworkAttachedDocumentContainer/<MonadicChangeFeedAsync>d__19")]
public sealed virtual Task`1<TryCatch`1<ChangeFeedPage>> MonadicChangeFeedAsync(FeedRangeState`1<ChangeFeedState> feedRangeState, ChangeFeedExecutionOptions changeFeedPaginationOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.NetworkAttachedDocumentContainer/<MonadicGetResourceIdentifierAsync>d__20")]
public sealed virtual Task`1<TryCatch`1<string>> MonadicGetResourceIdentifierAsync(ITrace trace, CancellationToken cancellationToken);
    private static Dictionary`2<string, string> GetAdditionalHeaders(CosmosMessageHeadersInternal headers, ImmutableHashSet`1<string> bannedHeaders);
}
internal abstract class Microsoft.Azure.Cosmos.Pagination.Page`1 : object {
    protected static ImmutableHashSet`1<string> BannedHeadersBase;
    private static IReadOnlyDictionary`2<string, string> EmptyDictionary;
    [CompilerGeneratedAttribute]
private double <RequestCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <AdditionalHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private TState <State>k__BackingField;
    public double RequestCharge { get; }
    public int ItemCount { get; }
    public string ActivityId { get; }
    public IReadOnlyDictionary`2<string, string> AdditionalHeaders { get; }
    public TState State { get; }
    protected ImmutableHashSet`1<string> DerivedClassBannedHeaders { get; }
    protected Page`1(double requestCharge, string activityId, IReadOnlyDictionary`2<string, string> additionalHeaders, TState state);
    private static Page`1();
    [CompilerGeneratedAttribute]
public double get_RequestCharge();
    public abstract virtual int get_ItemCount();
    [CompilerGeneratedAttribute]
public string get_ActivityId();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_AdditionalHeaders();
    [CompilerGeneratedAttribute]
public TState get_State();
    protected abstract virtual ImmutableHashSet`1<string> get_DerivedClassBannedHeaders();
}
internal static class Microsoft.Azure.Cosmos.Pagination.ParallelPrefetch : object {
    private static int BatchLimit;
    public static Task PrefetchInParallelAsync(IEnumerable`1<IPrefetcher> prefetchers, int maxConcurrency, ITrace trace, CancellationToken cancellationToken);
    public static Task PrefetchInParallelCoreAsync(IEnumerable`1<IPrefetcher> prefetchers, int maxConcurrency, ITrace trace, ParallelPrefetchTestConfig config, CancellationToken cancellationToken);
    private static ITrace CommonStartTrace(ITrace trace);
    private static T[] RentArray(ParallelPrefetchTestConfig config, int minSize, bool clear);
    private static void ReturnRentedArray(ParallelPrefetchTestConfig config, T[] array, int clearThrough);
    private static Task CommonStartTaskAsync(ParallelPrefetchTestConfig config, CommonPrefetchState commonState, IPrefetcher firstPrefetcher);
    private static int FillPrefetcherBuffer(CommonPrefetchState commonState, IPrefetcher[] prefetchers, int startIndex, int endIndex, IEnumerator`1<IPrefetcher> enumerator);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.ParallelPrefetch/<SingleConcurrencyPrefetchInParallelAsync>d__10")]
private static Task SingleConcurrencyPrefetchInParallelAsync(IEnumerable`1<IPrefetcher> prefetchers, ITrace trace, ParallelPrefetchTestConfig config, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.ParallelPrefetch/<LowConcurrencyPrefetchInParallelAsync>d__11")]
private static Task LowConcurrencyPrefetchInParallelAsync(IEnumerable`1<IPrefetcher> prefetchers, int maxConcurrency, ITrace trace, ParallelPrefetchTestConfig config, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.ParallelPrefetch/<HighConcurrencyPrefetchInParallelAsync>d__12")]
private static Task HighConcurrencyPrefetchInParallelAsync(IEnumerable`1<IPrefetcher> prefetchers, int maxConcurrency, ITrace trace, ParallelPrefetchTestConfig config, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.Pagination.PartitionRangePageAsyncEnumerator`2 : object {
    [CompilerGeneratedAttribute]
private FeedRangeState`1<TState> <FeedRangeState>k__BackingField;
    [CompilerGeneratedAttribute]
private TryCatch`1<TPage> <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasStarted>k__BackingField;
    public FeedRangeState`1<TState> FeedRangeState { get; private set; }
    public TryCatch`1<TPage> Current { get; private set; }
    public bool HasStarted { get; private set; }
    private bool HasMoreResults { get; }
    protected PartitionRangePageAsyncEnumerator`2(FeedRangeState`1<TState> feedRangeState);
    [CompilerGeneratedAttribute]
public FeedRangeState`1<TState> get_FeedRangeState();
    [CompilerGeneratedAttribute]
private void set_FeedRangeState(FeedRangeState`1<TState> value);
    [CompilerGeneratedAttribute]
public sealed virtual TryCatch`1<TPage> get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(TryCatch`1<TPage> value);
    [CompilerGeneratedAttribute]
public bool get_HasStarted();
    [CompilerGeneratedAttribute]
private void set_HasStarted(bool value);
    private bool get_HasMoreResults();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Pagination.PartitionRangePageAsyncEnumerator`2/<MoveNextAsync>d__15")]
public sealed virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
    protected abstract virtual Task`1<TryCatch`1<TPage>> GetNextPageAsync(ITrace trace, CancellationToken cancellationToken);
    public abstract virtual ValueTask DisposeAsync();
}
internal enum Microsoft.Azure.Cosmos.Pagination.PrefetchPolicy : Enum {
    public int value__;
    public static PrefetchPolicy PrefetchSinglePage;
    public static PrefetchPolicy PrefetchAll;
}
internal class Microsoft.Azure.Cosmos.Pagination.Record : object {
    [CompilerGeneratedAttribute]
private ResourceId <ResourceIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosObject <Payload>k__BackingField;
    public ResourceId ResourceIdentifier { get; }
    public DateTime Timestamp { get; }
    public string Identifier { get; }
    public CosmosObject Payload { get; }
    public Record(ResourceId resourceIdentifier, DateTime timestamp, string identifier, CosmosObject payload);
    [CompilerGeneratedAttribute]
public ResourceId get_ResourceIdentifier();
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public CosmosObject get_Payload();
}
internal class Microsoft.Azure.Cosmos.Pagination.ResourceIdentifier : object {
    private static int OfferIdLength;
    private static int RbacResourceIdLength;
    private static int SnapshotIdLength;
    public static ushort Length;
    public static ushort MaxPathFragment;
    public static ResourceIdentifier Empty;
    [CompilerGeneratedAttribute]
private UInt32 <Offer>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <DocumentCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <StoredProcedure>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Trigger>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <UserDefinedFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Conflict>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <PartitionKeyRange>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <User>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ClientEncryptionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <UserDefinedType>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Attachment>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Snapshot>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <RoleAssignment>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <RoleDefinition>k__BackingField;
    public UInt32 Offer { get; }
    public UInt32 Database { get; }
    public UInt32 DocumentCollection { get; }
    public ulong StoredProcedure { get; }
    public ulong Trigger { get; }
    public ulong UserDefinedFunction { get; }
    public ulong Conflict { get; }
    public ulong Document { get; }
    public ulong PartitionKeyRange { get; }
    public UInt32 User { get; }
    public UInt32 ClientEncryptionKey { get; }
    public UInt32 UserDefinedType { get; }
    public ulong Permission { get; }
    public UInt32 Attachment { get; }
    public ulong Schema { get; }
    public ulong Snapshot { get; }
    public ulong RoleAssignment { get; }
    public ulong RoleDefinition { get; }
    public ResourceIdentifier(UInt32 offer, UInt32 database, UInt32 documentCollection, ulong storedProcedure, ulong trigger, ulong userDefinedFunction, ulong conflict, ulong document, ulong partitionKeyRange, UInt32 user, UInt32 clientEncryptionKey, UInt32 userDefinedType, ulong permission, UInt32 attachment, ulong schema, ulong snapshot, ulong roleAssignment, ulong roleDefinition);
    private static ResourceIdentifier();
    [CompilerGeneratedAttribute]
public UInt32 get_Offer();
    [CompilerGeneratedAttribute]
public UInt32 get_Database();
    [CompilerGeneratedAttribute]
public UInt32 get_DocumentCollection();
    [CompilerGeneratedAttribute]
public ulong get_StoredProcedure();
    [CompilerGeneratedAttribute]
public ulong get_Trigger();
    [CompilerGeneratedAttribute]
public ulong get_UserDefinedFunction();
    [CompilerGeneratedAttribute]
public ulong get_Conflict();
    [CompilerGeneratedAttribute]
public ulong get_Document();
    [CompilerGeneratedAttribute]
public ulong get_PartitionKeyRange();
    [CompilerGeneratedAttribute]
public UInt32 get_User();
    [CompilerGeneratedAttribute]
public UInt32 get_ClientEncryptionKey();
    [CompilerGeneratedAttribute]
public UInt32 get_UserDefinedType();
    [CompilerGeneratedAttribute]
public ulong get_Permission();
    [CompilerGeneratedAttribute]
public UInt32 get_Attachment();
    [CompilerGeneratedAttribute]
public ulong get_Schema();
    [CompilerGeneratedAttribute]
public ulong get_Snapshot();
    [CompilerGeneratedAttribute]
public ulong get_RoleAssignment();
    [CompilerGeneratedAttribute]
public ulong get_RoleDefinition();
    public Byte[] ToByteArray();
    public static ResourceIdentifier Parse(string id);
    public static bool TryParse(string id, ResourceIdentifier& rid);
    public static bool Verify(string id, Byte[]& buffer);
    public virtual string ToString();
    public static Byte[] FromBase64String(string s);
    public static ulong ToUnsignedLong(Byte[] buffer);
    public static ulong ToUnsignedLong(Byte[] buffer, int length);
    public static string ToBase64String(Byte[] buffer);
    public static string ToBase64String(Byte[] buffer, int offset, int length);
    public static void BlockCopy(Byte[] src, int srcOffset, Byte[] dst, int dstOffset, int count);
}
internal static class Microsoft.Azure.Cosmos.Pagination.RestFeedResponseParser : object {
    public static CosmosArray ParseRestFeedResponse(Stream stream, JsonSerializationFormatOptions jsonSerializationFormatOptions);
    public static CosmosArray ParseRestFeedResponse(Stream stream, ResourceType resourceType, JsonSerializationFormatOptions jsonSerializationFormatOptions);
    private static ReadOnlyMemory`1<byte> StreamToBytes(Stream stream);
    private static IJsonNavigator CreateNavigatorFromContent(ReadOnlyMemory`1<byte> content, JsonSerializationFormatOptions jsonSerializationFormatOptions);
    private static string ResourceTypeToArrayKeyName(ResourceType resourceType);
    private static CosmosArray GetResourceArrayFromNavigator(IJsonNavigator jsonNavigator, string arrayKeyName);
}
internal class Microsoft.Azure.Cosmos.Pagination.StartedState : State {
    public static StartedState Singleton;
    private static StartedState();
}
internal abstract class Microsoft.Azure.Cosmos.Pagination.State : object {
}
internal class Microsoft.Azure.Cosmos.Pagination.TracingAsyncEnumerator`1 : object {
    private ITracingAsyncEnumerator`1<T> enumerator;
    private ITrace trace;
    private CancellationToken cancellationToken;
    public T Current { get; }
    public TracingAsyncEnumerator`1(ITracingAsyncEnumerator`1<T> enumerator, ITrace trace, CancellationToken cancellationToken);
    public sealed virtual T get_Current();
    public sealed virtual ValueTask DisposeAsync();
    public sealed virtual ValueTask`1<bool> MoveNextAsync();
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.PartitionKey : ValueType {
    private static PartitionKeyInternal NullPartitionKeyInternal;
    private static PartitionKeyInternal TruePartitionKeyInternal;
    private static PartitionKeyInternal FalsePartitionKeyInternal;
    public static PartitionKey None;
    public static PartitionKey Null;
    public static string SystemKeyName;
    public static string SystemKeyPath;
    [CompilerGeneratedAttribute]
private PartitionKeyInternal <InternalKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNone>k__BackingField;
    internal static string NoneString;
    internal PartitionKeyInternal InternalKey { get; }
    internal bool IsNone { get; }
    public PartitionKey(string partitionKeyValue);
    public PartitionKey(bool partitionKeyValue);
    public PartitionKey(double partitionKeyValue);
    internal PartitionKey(object value);
    internal PartitionKey(PartitionKeyInternal partitionKeyInternal);
    private PartitionKey(PartitionKeyInternal partitionKeyInternal, bool isNone);
    private static PartitionKey();
    [CompilerGeneratedAttribute]
internal PartitionKeyInternal get_InternalKey();
    [CompilerGeneratedAttribute]
internal bool get_IsNone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(PartitionKey other);
    public virtual string ToString();
    internal string ToJsonString();
    internal static bool TryParseJsonString(string partitionKeyString, PartitionKey& partitionKey);
    public static bool op_Equality(PartitionKey left, PartitionKey right);
    public static bool op_Inequality(PartitionKey left, PartitionKey right);
}
public class Microsoft.Azure.Cosmos.PartitionKeyBuilder : object {
    private List`1<object> partitionKeyValues;
    public PartitionKeyBuilder Add(string val);
    public PartitionKeyBuilder Add(double val);
    public PartitionKeyBuilder Add(bool val);
    public PartitionKeyBuilder AddNullValue();
    public PartitionKeyBuilder AddNoneType();
    public PartitionKey Build();
}
public enum Microsoft.Azure.Cosmos.PartitionKeyDefinitionVersion : Enum {
    public int value__;
    public static PartitionKeyDefinitionVersion V1;
    public static PartitionKeyDefinitionVersion V2;
}
internal class Microsoft.Azure.Cosmos.PartitionKeyMismatchRetryPolicy : object {
    private static int MaxRetries;
    private CollectionCache clientCollectionCache;
    private IDocumentClientRetryPolicy nextRetryPolicy;
    private int retriesAttempted;
    public PartitionKeyMismatchRetryPolicy(CollectionCache clientCollectionCache, IDocumentClientRetryPolicy nextRetryPolicy);
    public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(Exception exception, CancellationToken cancellationToken);
    public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(ResponseMessage cosmosResponseMessage, CancellationToken cancellationToken);
    public sealed virtual void OnBeforeSendRequest(DocumentServiceRequest request);
    private ShouldRetryResult ShouldRetryInternal(Nullable`1<HttpStatusCode> statusCode, Nullable`1<SubStatusCodes> subStatusCode, string resourceIdOrFullName);
}
internal class Microsoft.Azure.Cosmos.PartitionKeyRangeBatchExecutionResult : object {
    [CompilerGeneratedAttribute]
private string <PartitionKeyRangeId>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionalBatchResponse <ServerResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ItemBatchOperation> <Operations>k__BackingField;
    public string PartitionKeyRangeId { get; }
    public TransactionalBatchResponse ServerResponse { get; }
    public IEnumerable`1<ItemBatchOperation> Operations { get; }
    public PartitionKeyRangeBatchExecutionResult(string pkRangeId, IEnumerable`1<ItemBatchOperation> operations, TransactionalBatchResponse serverResponse);
    [CompilerGeneratedAttribute]
public string get_PartitionKeyRangeId();
    [CompilerGeneratedAttribute]
public TransactionalBatchResponse get_ServerResponse();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ItemBatchOperation> get_Operations();
    internal bool IsSplit();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse : TransactionalBatchResponse {
    private TransactionalBatchOperationResult[] resultsByOperationIndex;
    private TransactionalBatchResponse serverResponse;
    private bool isDisposed;
    [CompilerGeneratedAttribute]
private CosmosSerializerCore <SerializerCore>k__BackingField;
    public string ActivityId { get; }
    public CosmosDiagnostics Diagnostics { get; }
    internal CosmosSerializerCore SerializerCore { get; }
    public int Count { get; }
    public TransactionalBatchOperationResult Item { get; }
    internal PartitionKeyRangeBatchResponse(int originalOperationsCount, TransactionalBatchResponse serverResponse, CosmosSerializerCore serializerCore);
    public virtual string get_ActivityId();
    public virtual CosmosDiagnostics get_Diagnostics();
    [CompilerGeneratedAttribute]
internal virtual CosmosSerializerCore get_SerializerCore();
    public virtual int get_Count();
    public virtual TransactionalBatchOperationResult get_Item(int index);
    public virtual TransactionalBatchOperationResult`1<T> GetOperationResultAtIndex(int index);
    [IteratorStateMachineAttribute("Microsoft.Azure.Cosmos.PartitionKeyRangeBatchResponse/<GetEnumerator>d__16")]
public virtual IEnumerator`1<TransactionalBatchOperationResult> GetEnumerator();
    internal virtual IEnumerable`1<string> GetActivityIds();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Azure.Cosmos.PartitionKeyRangeGoneRetryPolicy : object {
    private CollectionCache collectionCache;
    private IDocumentClientRetryPolicy nextRetryPolicy;
    private PartitionKeyRangeCache partitionKeyRangeCache;
    private string collectionLink;
    private ITrace trace;
    private bool retried;
    public PartitionKeyRangeGoneRetryPolicy(CollectionCache collectionCache, PartitionKeyRangeCache partitionKeyRangeCache, string collectionLink, IDocumentClientRetryPolicy nextRetryPolicy);
    public PartitionKeyRangeGoneRetryPolicy(CollectionCache collectionCache, PartitionKeyRangeCache partitionKeyRangeCache, string collectionLink, IDocumentClientRetryPolicy nextRetryPolicy, ITrace trace);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.PartitionKeyRangeGoneRetryPolicy/<ShouldRetryAsync>d__8")]
public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(Exception exception, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.PartitionKeyRangeGoneRetryPolicy/<ShouldRetryAsync>d__9")]
public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(ResponseMessage cosmosResponseMessage, CancellationToken cancellationToken);
    public sealed virtual void OnBeforeSendRequest(DocumentServiceRequest request);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.PartitionKeyRangeGoneRetryPolicy/<ShouldRetryInternalAsync>d__11")]
private Task`1<ShouldRetryResult> ShouldRetryInternalAsync(Nullable`1<HttpStatusCode> statusCode, Nullable`1<SubStatusCodes> subStatusCode, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.PartitionKeyRangeServerBatchRequest : ServerBatchRequest {
    [CompilerGeneratedAttribute]
private string <PartitionKeyRangeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClientEncrypted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntendedCollectionRidValue>k__BackingField;
    public string PartitionKeyRangeId { get; }
    public bool IsClientEncrypted { get; }
    public string IntendedCollectionRidValue { get; }
    public PartitionKeyRangeServerBatchRequest(string partitionKeyRangeId, bool isClientEncrypted, string intendedCollectionRidValue, int maxBodyLength, int maxOperationCount, CosmosSerializerCore serializerCore);
    [CompilerGeneratedAttribute]
public string get_PartitionKeyRangeId();
    [CompilerGeneratedAttribute]
public bool get_IsClientEncrypted();
    [CompilerGeneratedAttribute]
public string get_IntendedCollectionRidValue();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.PartitionKeyRangeServerBatchRequest/<CreateAsync>d__10")]
public static Task`1<Tuple`2<PartitionKeyRangeServerBatchRequest, ArraySegment`1<ItemBatchOperation>>> CreateAsync(string partitionKeyRangeId, ArraySegment`1<ItemBatchOperation> operations, int maxBodyLength, int maxOperationCount, bool ensureContinuousOperationIndexes, CosmosSerializerCore serializerCore, bool isClientEncrypted, string intendedCollectionRidValue, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.PatchConstants : object {
    [ExtensionAttribute]
public static string ToEnumMemberString(PatchOperationType patchOperationType);
}
public class Microsoft.Azure.Cosmos.PatchItemRequestOptions : ItemRequestOptions {
    [CompilerGeneratedAttribute]
private string <FilterPredicate>k__BackingField;
    public string FilterPredicate { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FilterPredicate();
    [CompilerGeneratedAttribute]
public void set_FilterPredicate(string value);
}
public abstract class Microsoft.Azure.Cosmos.PatchOperation : object {
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [JsonPropertyAttribute]
public PatchOperationType OperationType { get; }
    [JsonPropertyAttribute]
public string Path { get; }
    [JsonPropertyAttribute]
public string From { get; public set; }
    public abstract virtual PatchOperationType get_OperationType();
    public abstract virtual string get_Path();
    [CompilerGeneratedAttribute]
public virtual string get_From();
    [CompilerGeneratedAttribute]
public virtual void set_From(string value);
    public virtual bool TrySerializeValueParameter(CosmosSerializer cosmosSerializer, Stream& valueParam);
    public static PatchOperation Add(string path, T value);
    public static PatchOperation Remove(string path);
    public static PatchOperation Replace(string path, T value);
    public static PatchOperation Set(string path, T value);
    public static PatchOperation Increment(string path, long value);
    public static PatchOperation Increment(string path, double value);
    public static PatchOperation Move(string from, string path);
}
public abstract class Microsoft.Azure.Cosmos.PatchOperation`1 : PatchOperation {
    [JsonPropertyAttribute]
public T Value { get; }
    public abstract virtual T get_Value();
}
internal class Microsoft.Azure.Cosmos.PatchOperationCore : PatchOperation {
    [CompilerGeneratedAttribute]
private PatchOperationType <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public PatchOperationType OperationType { get; }
    public string Path { get; }
    public PatchOperationCore(PatchOperationType operationType, string path);
    [CompilerGeneratedAttribute]
public virtual PatchOperationType get_OperationType();
    [CompilerGeneratedAttribute]
public virtual string get_Path();
}
internal class Microsoft.Azure.Cosmos.PatchOperationCore`1 : PatchOperation`1<T> {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private PatchOperationType <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public T Value { get; }
    public PatchOperationType OperationType { get; }
    public string Path { get; }
    public PatchOperationCore`1(PatchOperationType operationType, string path, T value);
    [CompilerGeneratedAttribute]
public virtual T get_Value();
    [CompilerGeneratedAttribute]
public virtual PatchOperationType get_OperationType();
    [CompilerGeneratedAttribute]
public virtual string get_Path();
    public virtual bool TrySerializeValueParameter(CosmosSerializer cosmosSerializer, Stream& valueParam);
}
internal class Microsoft.Azure.Cosmos.PatchOperationsJsonConverter : JsonConverter {
    private CosmosSerializer userSerializer;
    public bool CanRead { get; }
    public PatchOperationsJsonConverter(CosmosSerializer userSerializer);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanRead();
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    internal static CosmosSerializer CreatePatchOperationsSerializer(CosmosSerializer cosmosSerializer, CosmosSerializer propertiesSerializer);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum Microsoft.Azure.Cosmos.PatchOperationType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static PatchOperationType Add;
    [EnumMemberAttribute]
public static PatchOperationType Remove;
    [EnumMemberAttribute]
public static PatchOperationType Replace;
    [EnumMemberAttribute]
public static PatchOperationType Set;
    [EnumMemberAttribute]
public static PatchOperationType Increment;
    [EnumMemberAttribute]
public static PatchOperationType Move;
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.PatchSpec : ValueType {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PatchOperation> <PatchOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private Either`2<PatchItemRequestOptions, TransactionalBatchPatchItemRequestOptions> <RequestOptions>k__BackingField;
    public IReadOnlyList`1<PatchOperation> PatchOperations { get; }
    public Either`2<PatchItemRequestOptions, TransactionalBatchPatchItemRequestOptions> RequestOptions { get; }
    public PatchSpec(IReadOnlyList`1<PatchOperation> patchOperations, Either`2<PatchItemRequestOptions, TransactionalBatchPatchItemRequestOptions> requestOptions);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<PatchOperation> get_PatchOperations();
    [CompilerGeneratedAttribute]
public Either`2<PatchItemRequestOptions, TransactionalBatchPatchItemRequestOptions> get_RequestOptions();
}
public abstract class Microsoft.Azure.Cosmos.Permission : object {
    public string Id { get; }
    public abstract virtual string get_Id();
    public abstract virtual Task`1<PermissionResponse> ReadAsync(Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<PermissionResponse> ReplaceAsync(PermissionProperties permissionProperties, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<PermissionResponse> DeleteAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.PermissionCore : Permission {
    private string linkUri;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosClientContext <ClientContext>k__BackingField;
    public string Id { get; }
    internal CosmosClientContext ClientContext { get; }
    internal PermissionCore(CosmosClientContext clientContext, UserCore user, string userId);
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
internal CosmosClientContext get_ClientContext();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.PermissionCore/<DeleteAsync>d__8")]
public Task`1<PermissionResponse> DeleteAsync(RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> DeletePermissionStreamAsync(RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.PermissionCore/<ReadAsync>d__10")]
public Task`1<PermissionResponse> ReadAsync(Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> ReadPermissionStreamAsync(Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.PermissionCore/<ReplaceAsync>d__12")]
public Task`1<PermissionResponse> ReplaceAsync(PermissionProperties permissionProperties, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> ReplacePermissionStreamAsync(PermissionProperties permissionProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ReplaceStreamInternalAsync(Stream streamPayload, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ProcessStreamAsync(Stream streamPayload, OperationType operationType, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ProcessResourceOperationStreamAsync(Stream streamPayload, OperationType operationType, string linkUri, ResourceType resourceType, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.PermissionInlineCore : PermissionCore {
    internal PermissionInlineCore(CosmosClientContext clientContext, UserCore user, string userId);
    public virtual Task`1<PermissionResponse> ReadAsync(Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<PermissionResponse> ReplaceAsync(PermissionProperties permissionProperties, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<PermissionResponse> DeleteAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
}
[FlagsAttribute]
public enum Microsoft.Azure.Cosmos.PermissionMode : Enum {
    public byte value__;
    public static PermissionMode Read;
    public static PermissionMode All;
}
public class Microsoft.Azure.Cosmos.PermissionProperties : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private PermissionMode <PermissionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfLink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionKeyInternal <InternalResourcePartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Id { get; private set; }
    [JsonPropertyAttribute]
public string ResourceUri { get; private set; }
    [JsonIgnoreAttribute]
public Nullable`1<PartitionKey> ResourcePartitionKey { get; public set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
[JsonPropertyAttribute]
public PermissionMode PermissionMode { get; private set; }
    [JsonPropertyAttribute]
public string Token { get; private set; }
    [JsonPropertyAttribute]
public string ETag { get; private set; }
    [JsonConverterAttribute("Microsoft.Azure.Documents.UnixDateTimeConverter")]
[JsonPropertyAttribute]
public Nullable`1<DateTime> LastModified { get; private set; }
    [JsonPropertyAttribute]
public string SelfLink { get; private set; }
    [JsonPropertyAttribute]
internal string ResourceId { get; private set; }
    [JsonPropertyAttribute]
internal PartitionKeyInternal InternalResourcePartitionKey { get; private set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    public PermissionProperties(string id, PermissionMode permissionMode, Container container, Nullable`1<PartitionKey> resourcePartitionKey);
    public PermissionProperties(string id, PermissionMode permissionMode, Container container, PartitionKey resourcePartitionKey, string itemId);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ResourceUri();
    [CompilerGeneratedAttribute]
private void set_ResourceUri(string value);
    public Nullable`1<PartitionKey> get_ResourcePartitionKey();
    public void set_ResourcePartitionKey(Nullable`1<PartitionKey> value);
    [CompilerGeneratedAttribute]
public PermissionMode get_PermissionMode();
    [CompilerGeneratedAttribute]
private void set_PermissionMode(PermissionMode value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
private void set_Token(string value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
private void set_ETag(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastModified();
    [CompilerGeneratedAttribute]
private void set_LastModified(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_SelfLink();
    [CompilerGeneratedAttribute]
private void set_SelfLink(string value);
    [CompilerGeneratedAttribute]
internal string get_ResourceId();
    [CompilerGeneratedAttribute]
private void set_ResourceId(string value);
    [CompilerGeneratedAttribute]
internal PartitionKeyInternal get_InternalResourcePartitionKey();
    [CompilerGeneratedAttribute]
private void set_InternalResourcePartitionKey(PartitionKeyInternal value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public class Microsoft.Azure.Cosmos.PermissionResponse : Response`1<PermissionProperties> {
    [CompilerGeneratedAttribute]
private Permission <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private PermissionProperties <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    public Permission Permission { get; private set; }
    public Headers Headers { get; }
    public PermissionProperties Resource { get; }
    public HttpStatusCode StatusCode { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ETag { get; }
    internal RequestMessage RequestMessage { get; }
    internal PermissionResponse(HttpStatusCode httpStatusCode, Headers headers, PermissionProperties permissionProperties, Permission permission, CosmosDiagnostics diagnostics, RequestMessage requestMessage);
    [CompilerGeneratedAttribute]
public virtual Permission get_Permission();
    [CompilerGeneratedAttribute]
private void set_Permission(Permission value);
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public virtual PermissionProperties get_Resource();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    public virtual double get_RequestCharge();
    public virtual string get_ActivityId();
    public virtual string get_ETag();
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
    public static Permission op_Implicit(PermissionResponse response);
}
public enum Microsoft.Azure.Cosmos.PortReuseMode : Enum {
    public int value__;
    public static PortReuseMode ReuseUnicastPort;
    public static PortReuseMode PrivatePortPool;
}
public enum Microsoft.Azure.Cosmos.PriorityLevel : Enum {
    public int value__;
    public static PriorityLevel High;
    public static PriorityLevel Low;
}
internal class Microsoft.Azure.Cosmos.Query.Core.AdditionalRequestHeaders : object {
    [CompilerGeneratedAttribute]
private Guid <CorrelatedActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContinuationExpected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OptimisticDirectExecute>k__BackingField;
    public Guid CorrelatedActivityId { get; }
    public bool IsContinuationExpected { get; }
    public bool OptimisticDirectExecute { get; }
    public AdditionalRequestHeaders(Guid correlatedActivityId, bool isContinuationExpected, bool optimisticDirectExecute);
    [CompilerGeneratedAttribute]
public Guid get_CorrelatedActivityId();
    [CompilerGeneratedAttribute]
public bool get_IsContinuationExpected();
    [CompilerGeneratedAttribute]
public bool get_OptimisticDirectExecute();
}
internal class Microsoft.Azure.Cosmos.Query.Core.AsyncLazy`1 : object {
    private Func`3<ITrace, CancellationToken, Task`1<T>> valueFactory;
    private T value;
    [CompilerGeneratedAttribute]
private bool <ValueInitialized>k__BackingField;
    public bool ValueInitialized { get; private set; }
    public T Result { get; }
    public AsyncLazy`1(Func`3<ITrace, CancellationToken, Task`1<T>> valueFactory);
    [CompilerGeneratedAttribute]
public bool get_ValueInitialized();
    [CompilerGeneratedAttribute]
private void set_ValueInitialized(bool value);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.AsyncLazy`1/<GetValueAsync>d__7")]
public Task`1<T> GetValueAsync(ITrace trace, CancellationToken cancellationToken);
    public T get_Result();
}
internal static class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.ClientDistributionPlanDeserializer : object {
    public static ClientDistributionPlan DeserializeClientDistributionPlan(string jsonString);
    private static CqlEnumerableExpression DeserializeCqlEnumerableExpression(CosmosObject cosmosObject);
    private static CqlAggregateEnumerableExpression DeserializeAggregateEnumerableExpression(CosmosObject cosmosObject);
    private static CqlDistinctEnumerableExpression DeserializeDistinctEnumerableExpression(CosmosObject cosmosObject);
    private static CqlGroupByEnumerableExpression DeserializeGroupByEnumerableExpression(CosmosObject cosmosObject);
    private static CqlInputEnumerableExpression DeserializeInputEnumerableExpression(CosmosObject cosmosObject);
    private static CqlOrderByEnumerableExpression DeserializeOrderByEnumerableExpression(CosmosObject cosmosObject);
    private static CqlScalarAsEnumerableExpression DeserializeScalarAsEnumerableExpression(CosmosObject cosmosObject);
    private static CqlSelectEnumerableExpression DeserializeSelectEnumerableExpression(CosmosObject cosmosObject);
    private static CqlSelectManyEnumerableExpression DeserializeSelectManyEnumerableExpression(CosmosObject cosmosObject);
    private static CqlTakeEnumerableExpression DeserializeTakeEnumerableExpression(CosmosObject cosmosObject);
    private static CqlWhereEnumerableExpression DeserializeWhereEnumerableExpression(CosmosObject cosmosObject);
    private static CqlScalarExpression DeserializeScalarExpression(CosmosObject cosmosObject);
    private static CqlArrayCreateScalarExpression DeserializeArrayCreateScalarExpression(CosmosObject cosmosObject);
    private static CqlArrayIndexerScalarExpression DeserializeArrayIndexerScalarExpression(CosmosObject cosmosObject);
    private static CqlBinaryScalarExpression DeserializeBinaryOperatorScalarExpression(CosmosObject cosmosObject);
    private static CqlIsOperatorScalarExpression DeserializeIsOperatorScalarExpression(CosmosObject cosmosObject);
    private static CqlLetScalarExpression DeserializeLetScalarExpression(CosmosObject cosmosObject);
    private static CqlLiteralScalarExpression DeserializeLiteralScalarExpression(CosmosObject cosmosObject);
    private static CqlMuxScalarExpression DeserializeMuxScalarExpression(CosmosObject cosmosObject);
    private static CqlObjectCreateScalarExpression DeserializeObjectCreateScalarExpression(CosmosObject cosmosObject);
    private static CqlPropertyRefScalarExpression DeserializePropertyRefScalarExpression(CosmosObject cosmosObject);
    private static CqlSystemFunctionCallScalarExpression DeserializeSystemFunctionCallScalarExpression(CosmosObject cosmosObject);
    private static CqlTupleCreateScalarExpression DeserializeTupleCreateScalarExpression(CosmosObject cosmosObject);
    private static CqlTupleItemRefScalarExpression DeserializeTupleItemRefScalarExpression(CosmosObject cosmosObject);
    private static CqlUnaryScalarExpression DeserializeUnaryScalarExpression(CosmosObject cosmosObject);
    private static CqlUserDefinedFunctionCallScalarExpression DeserializeUserDefinedFunctionCallScalarExpression(CosmosObject cosmosObject);
    private static CqlVariableRefScalarExpression DeserializeVariableRefScalarExpression(CosmosObject cosmosObject);
    private static IReadOnlyList`1<CqlAggregate> DeserializeAggregateArray(CosmosArray cosmosArray);
    private static CqlAggregate DeserializeAggregate(CosmosObject cosmosObject);
    private static CqlBuiltinAggregate DeserializeBuiltInAggregateExpression(CosmosObject cosmosObject);
    private static CqlTupleAggregate DeserializeTupleAggregateExpression(CosmosObject cosmosObject);
    private static CqlLiteral DeserializeLiteral(CosmosObject cosmosObject);
    private static IReadOnlyList`1<CqlLiteral> DeserializeLiteralArray(CosmosArray cosmosArray);
    private static IReadOnlyList`1<CqlObjectLiteralProperty> DeserializeObjectLiteralArray(CosmosArray cosmosArray);
    private static CqlVariable DeserializeCqlVariable(CosmosObject cosmosObject);
    private static IReadOnlyList`1<CqlObjectProperty> DeserializeObjectProperties(CosmosArray cosmosArray);
    private static IReadOnlyList`1<CqlScalarExpression> DeserializeScalarExpressionArray(CosmosArray cosmosArray);
    private static IReadOnlyList`1<CqlOrderByItem> DeserializeOrderByItemArray(CosmosArray cosmosArray);
    private static T GetValue(CosmosObject cosmosObject, string propertyName);
    private static bool TryGetValue(CosmosObject cosmosObject, string propertyName, T& result);
    private static TEnum GetEnumValue(string propertyName);
    private static string GetExceptionMessage();
    private static CosmosObject CastToCosmosObject(CosmosElement cosmosElement);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.ClientDistributionPlan : object {
    [CompilerGeneratedAttribute]
private CqlEnumerableExpression <Cql>k__BackingField;
    public CqlEnumerableExpression Cql { get; }
    public ClientDistributionPlan(CqlEnumerableExpression cql);
    [CompilerGeneratedAttribute]
public CqlEnumerableExpression get_Cql();
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlAggregate : object {
    [CompilerGeneratedAttribute]
private CqlAggregateKind <Kind>k__BackingField;
    public CqlAggregateKind Kind { get; }
    protected CqlAggregate(CqlAggregateKind kind);
    [CompilerGeneratedAttribute]
public CqlAggregateKind get_Kind();
    public abstract virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlAggregateEnumerableExpression : CqlEnumerableExpression {
    [CompilerGeneratedAttribute]
private CqlEnumerableExpression <SourceExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlAggregate <Aggregate>k__BackingField;
    public CqlEnumerableExpression SourceExpression { get; }
    public CqlAggregate Aggregate { get; }
    public CqlAggregateEnumerableExpression(CqlEnumerableExpression sourceExpression, CqlAggregate aggregate);
    [CompilerGeneratedAttribute]
public CqlEnumerableExpression get_SourceExpression();
    [CompilerGeneratedAttribute]
public CqlAggregate get_Aggregate();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal enum Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlAggregateKind : Enum {
    public int value__;
    public static CqlAggregateKind Builtin;
    public static CqlAggregateKind Tuple;
}
internal enum Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlAggregateOperatorKind : Enum {
    public int value__;
    public static CqlAggregateOperatorKind All;
    public static CqlAggregateOperatorKind Any;
    public static CqlAggregateOperatorKind Array;
    public static CqlAggregateOperatorKind Count;
    public static CqlAggregateOperatorKind First;
    public static CqlAggregateOperatorKind Last;
    public static CqlAggregateOperatorKind Max;
    public static CqlAggregateOperatorKind Min;
    public static CqlAggregateOperatorKind Sum;
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlArrayCreateScalarExpression : CqlScalarExpression {
    private static string Array;
    [CompilerGeneratedAttribute]
private string <ArrayKind>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CqlScalarExpression> <Items>k__BackingField;
    public string ArrayKind { get; }
    public IReadOnlyList`1<CqlScalarExpression> Items { get; }
    public CqlArrayCreateScalarExpression(IReadOnlyList`1<CqlScalarExpression> items);
    [CompilerGeneratedAttribute]
public string get_ArrayKind();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CqlScalarExpression> get_Items();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlArrayIndexerScalarExpression : CqlScalarExpression {
    [CompilerGeneratedAttribute]
private CqlScalarExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Index>k__BackingField;
    public CqlScalarExpression Expression { get; }
    public ulong Index { get; }
    public CqlArrayIndexerScalarExpression(CqlScalarExpression expression, ulong index);
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_Expression();
    [CompilerGeneratedAttribute]
public ulong get_Index();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlArrayLiteral : CqlLiteral {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CqlLiteral> <Items>k__BackingField;
    public IReadOnlyList`1<CqlLiteral> Items { get; }
    public CqlArrayLiteral(IReadOnlyList`1<CqlLiteral> items);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CqlLiteral> get_Items();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlBinaryScalarExpression : CqlScalarExpression {
    [CompilerGeneratedAttribute]
private CqlBinaryScalarOperatorKind <OperatorKind>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlScalarExpression <LeftExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlScalarExpression <RightExpression>k__BackingField;
    public CqlBinaryScalarOperatorKind OperatorKind { get; }
    public CqlScalarExpression LeftExpression { get; }
    public CqlScalarExpression RightExpression { get; }
    public CqlBinaryScalarExpression(CqlBinaryScalarOperatorKind operatorKind, CqlScalarExpression leftExpression, CqlScalarExpression rightExpression);
    [CompilerGeneratedAttribute]
public CqlBinaryScalarOperatorKind get_OperatorKind();
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_LeftExpression();
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_RightExpression();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal enum Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlBinaryScalarOperatorKind : Enum {
    public int value__;
    public static CqlBinaryScalarOperatorKind Add;
    public static CqlBinaryScalarOperatorKind And;
    public static CqlBinaryScalarOperatorKind BitwiseAnd;
    public static CqlBinaryScalarOperatorKind BitwiseOr;
    public static CqlBinaryScalarOperatorKind BitwiseXor;
    public static CqlBinaryScalarOperatorKind Divide;
    public static CqlBinaryScalarOperatorKind Equal;
    public static CqlBinaryScalarOperatorKind GreaterThan;
    public static CqlBinaryScalarOperatorKind GreaterThanOrEqual;
    public static CqlBinaryScalarOperatorKind LeftShift;
    public static CqlBinaryScalarOperatorKind LessThan;
    public static CqlBinaryScalarOperatorKind LessThanOrEqual;
    public static CqlBinaryScalarOperatorKind Modulo;
    public static CqlBinaryScalarOperatorKind Multiply;
    public static CqlBinaryScalarOperatorKind NotEqual;
    public static CqlBinaryScalarOperatorKind Or;
    public static CqlBinaryScalarOperatorKind RightShift;
    public static CqlBinaryScalarOperatorKind Subtract;
    public static CqlBinaryScalarOperatorKind ZeroFillRightShift;
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlBooleanLiteral : CqlLiteral {
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public bool Value { get; }
    public CqlBooleanLiteral(bool value);
    [CompilerGeneratedAttribute]
public bool get_Value();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlBuiltinAggregate : CqlAggregate {
    [CompilerGeneratedAttribute]
private CqlAggregateOperatorKind <OperatorKind>k__BackingField;
    public CqlAggregateOperatorKind OperatorKind { get; }
    public CqlBuiltinAggregate(CqlAggregateOperatorKind operatorKind);
    [CompilerGeneratedAttribute]
public CqlAggregateOperatorKind get_OperatorKind();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal enum Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlBuiltinScalarFunctionKind : Enum {
    public int value__;
    public static CqlBuiltinScalarFunctionKind Abs;
    public static CqlBuiltinScalarFunctionKind Acos;
    public static CqlBuiltinScalarFunctionKind All;
    public static CqlBuiltinScalarFunctionKind Any;
    public static CqlBuiltinScalarFunctionKind Array;
    public static CqlBuiltinScalarFunctionKind Array_Concat;
    public static CqlBuiltinScalarFunctionKind Array_Contains;
    public static CqlBuiltinScalarFunctionKind Array_Length;
    public static CqlBuiltinScalarFunctionKind Array_Slice;
    public static CqlBuiltinScalarFunctionKind Asin;
    public static CqlBuiltinScalarFunctionKind Atan;
    public static CqlBuiltinScalarFunctionKind Atn2;
    public static CqlBuiltinScalarFunctionKind Avg;
    public static CqlBuiltinScalarFunctionKind Ceiling;
    public static CqlBuiltinScalarFunctionKind Choose;
    public static CqlBuiltinScalarFunctionKind Concat;
    public static CqlBuiltinScalarFunctionKind Contains;
    public static CqlBuiltinScalarFunctionKind Cos;
    public static CqlBuiltinScalarFunctionKind Cot;
    public static CqlBuiltinScalarFunctionKind Count;
    public static CqlBuiltinScalarFunctionKind DateTimeAdd;
    public static CqlBuiltinScalarFunctionKind DateTimeBin;
    public static CqlBuiltinScalarFunctionKind DateTimeDiff;
    public static CqlBuiltinScalarFunctionKind DateTimeFromParts;
    public static CqlBuiltinScalarFunctionKind DateTimePart;
    public static CqlBuiltinScalarFunctionKind DateTimeToTicks;
    public static CqlBuiltinScalarFunctionKind DateTimeToTimestamp;
    public static CqlBuiltinScalarFunctionKind Degrees;
    public static CqlBuiltinScalarFunctionKind DocumentId;
    public static CqlBuiltinScalarFunctionKind EndsWith;
    public static CqlBuiltinScalarFunctionKind Exp;
    public static CqlBuiltinScalarFunctionKind First;
    public static CqlBuiltinScalarFunctionKind Floor;
    public static CqlBuiltinScalarFunctionKind GetCurrentDateTime;
    public static CqlBuiltinScalarFunctionKind GetCurrentDateTimeStatic;
    public static CqlBuiltinScalarFunctionKind GetCurrentTicks;
    public static CqlBuiltinScalarFunctionKind GetCurrentTicksStatic;
    public static CqlBuiltinScalarFunctionKind GetCurrentTimestamp;
    public static CqlBuiltinScalarFunctionKind GetCurrentTimestampStatic;
    public static CqlBuiltinScalarFunctionKind Iif;
    public static CqlBuiltinScalarFunctionKind Index_Of;
    public static CqlBuiltinScalarFunctionKind IntAdd;
    public static CqlBuiltinScalarFunctionKind IntBitAnd;
    public static CqlBuiltinScalarFunctionKind IntBitLeftShift;
    public static CqlBuiltinScalarFunctionKind IntBitNot;
    public static CqlBuiltinScalarFunctionKind IntBitOr;
    public static CqlBuiltinScalarFunctionKind IntBitRightShift;
    public static CqlBuiltinScalarFunctionKind IntBitXor;
    public static CqlBuiltinScalarFunctionKind IntDiv;
    public static CqlBuiltinScalarFunctionKind IntMod;
    public static CqlBuiltinScalarFunctionKind IntMul;
    public static CqlBuiltinScalarFunctionKind IntSub;
    public static CqlBuiltinScalarFunctionKind Is_Array;
    public static CqlBuiltinScalarFunctionKind Is_Bool;
    public static CqlBuiltinScalarFunctionKind Is_DateTime;
    public static CqlBuiltinScalarFunctionKind Is_Defined;
    public static CqlBuiltinScalarFunctionKind Is_Finite_Number;
    public static CqlBuiltinScalarFunctionKind Is_Integer;
    public static CqlBuiltinScalarFunctionKind Is_Null;
    public static CqlBuiltinScalarFunctionKind Is_Number;
    public static CqlBuiltinScalarFunctionKind Is_Object;
    public static CqlBuiltinScalarFunctionKind Is_Primitive;
    public static CqlBuiltinScalarFunctionKind Is_String;
    public static CqlBuiltinScalarFunctionKind Last;
    public static CqlBuiltinScalarFunctionKind LastIndexOf;
    public static CqlBuiltinScalarFunctionKind Left;
    public static CqlBuiltinScalarFunctionKind Length;
    public static CqlBuiltinScalarFunctionKind Like;
    public static CqlBuiltinScalarFunctionKind Log;
    public static CqlBuiltinScalarFunctionKind Log10;
    public static CqlBuiltinScalarFunctionKind Lower;
    public static CqlBuiltinScalarFunctionKind Ltrim;
    public static CqlBuiltinScalarFunctionKind Max;
    public static CqlBuiltinScalarFunctionKind Min;
    public static CqlBuiltinScalarFunctionKind NumberBin;
    public static CqlBuiltinScalarFunctionKind ObjectToArray;
    public static CqlBuiltinScalarFunctionKind Pi;
    public static CqlBuiltinScalarFunctionKind Power;
    public static CqlBuiltinScalarFunctionKind Radians;
    public static CqlBuiltinScalarFunctionKind Rand;
    public static CqlBuiltinScalarFunctionKind RegexMatch;
    public static CqlBuiltinScalarFunctionKind Replace;
    public static CqlBuiltinScalarFunctionKind Replicate;
    public static CqlBuiltinScalarFunctionKind Reverse;
    public static CqlBuiltinScalarFunctionKind Right;
    public static CqlBuiltinScalarFunctionKind Round;
    public static CqlBuiltinScalarFunctionKind Rtrim;
    public static CqlBuiltinScalarFunctionKind SetDifference;
    public static CqlBuiltinScalarFunctionKind SetIntersect;
    public static CqlBuiltinScalarFunctionKind SetUnion;
    public static CqlBuiltinScalarFunctionKind Sign;
    public static CqlBuiltinScalarFunctionKind Sin;
    public static CqlBuiltinScalarFunctionKind Sqrt;
    public static CqlBuiltinScalarFunctionKind Square;
    public static CqlBuiltinScalarFunctionKind ST_Area;
    public static CqlBuiltinScalarFunctionKind ST_Distance;
    public static CqlBuiltinScalarFunctionKind ST_Intersects;
    public static CqlBuiltinScalarFunctionKind ST_IsValid;
    public static CqlBuiltinScalarFunctionKind ST_IsValidDetailed;
    public static CqlBuiltinScalarFunctionKind ST_Within;
    public static CqlBuiltinScalarFunctionKind StartsWith;
    public static CqlBuiltinScalarFunctionKind StringEquals;
    public static CqlBuiltinScalarFunctionKind StringToArray;
    public static CqlBuiltinScalarFunctionKind StringToBoolean;
    public static CqlBuiltinScalarFunctionKind StringToNull;
    public static CqlBuiltinScalarFunctionKind StringToNumber;
    public static CqlBuiltinScalarFunctionKind StringToObject;
    public static CqlBuiltinScalarFunctionKind Substring;
    public static CqlBuiltinScalarFunctionKind Sum;
    public static CqlBuiltinScalarFunctionKind Tan;
    public static CqlBuiltinScalarFunctionKind TicksToDateTime;
    public static CqlBuiltinScalarFunctionKind TimestampToDateTime;
    public static CqlBuiltinScalarFunctionKind ToString;
    public static CqlBuiltinScalarFunctionKind Trim;
    public static CqlBuiltinScalarFunctionKind Trunc;
    public static CqlBuiltinScalarFunctionKind Upper;
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlDistinctEnumerableExpression : CqlEnumerableExpression {
    [CompilerGeneratedAttribute]
private CqlEnumerableExpression <SourceExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlVariable <DeclaredVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CqlScalarExpression> <Expression>k__BackingField;
    public CqlEnumerableExpression SourceExpression { get; }
    public CqlVariable DeclaredVariable { get; }
    public IReadOnlyList`1<CqlScalarExpression> Expression { get; }
    public CqlDistinctEnumerableExpression(CqlEnumerableExpression sourceExpression, CqlVariable declaredVariable, IReadOnlyList`1<CqlScalarExpression> expression);
    [CompilerGeneratedAttribute]
public CqlEnumerableExpression get_SourceExpression();
    [CompilerGeneratedAttribute]
public CqlVariable get_DeclaredVariable();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CqlScalarExpression> get_Expression();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlEnumerableExpression : object {
    [CompilerGeneratedAttribute]
private CqlEnumerableExpressionKind <Kind>k__BackingField;
    public CqlEnumerableExpressionKind Kind { get; }
    protected CqlEnumerableExpression(CqlEnumerableExpressionKind kind);
    [CompilerGeneratedAttribute]
public CqlEnumerableExpressionKind get_Kind();
    public abstract virtual void Accept(ICqlVisitor cqlVisitor);
}
internal enum Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlEnumerableExpressionKind : Enum {
    public int value__;
    public static CqlEnumerableExpressionKind Aggregate;
    public static CqlEnumerableExpressionKind Distinct;
    public static CqlEnumerableExpressionKind GroupBy;
    public static CqlEnumerableExpressionKind Input;
    public static CqlEnumerableExpressionKind OrderBy;
    public static CqlEnumerableExpressionKind ScalarAsEnumerable;
    public static CqlEnumerableExpressionKind Select;
    public static CqlEnumerableExpressionKind SelectMany;
    public static CqlEnumerableExpressionKind Take;
    public static CqlEnumerableExpressionKind Where;
}
internal enum Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlEnumerationKind : Enum {
    public int value__;
    public static CqlEnumerationKind ArrayItems;
    public static CqlEnumerationKind PropertyValues;
    public static CqlEnumerationKind Children;
    public static CqlEnumerationKind Descendants;
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlFunctionIdentifier : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public CqlFunctionIdentifier(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlGroupByEnumerableExpression : CqlEnumerableExpression {
    [CompilerGeneratedAttribute]
private CqlEnumerableExpression <SourceExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <KeyCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CqlAggregate> <Aggregates>k__BackingField;
    public CqlEnumerableExpression SourceExpression { get; }
    public ulong KeyCount { get; }
    public IReadOnlyList`1<CqlAggregate> Aggregates { get; }
    public CqlGroupByEnumerableExpression(CqlEnumerableExpression sourceExpression, ulong keyCount, IReadOnlyList`1<CqlAggregate> aggregates);
    [CompilerGeneratedAttribute]
public CqlEnumerableExpression get_SourceExpression();
    [CompilerGeneratedAttribute]
public ulong get_KeyCount();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CqlAggregate> get_Aggregates();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlInputEnumerableExpression : CqlEnumerableExpression {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public CqlInputEnumerableExpression(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal enum Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlIsOperatorKind : Enum {
    public int value__;
    public static CqlIsOperatorKind Defined;
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlIsOperatorScalarExpression : CqlScalarExpression {
    [CompilerGeneratedAttribute]
private CqlIsOperatorKind <OperatorKind>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlScalarExpression <Expression>k__BackingField;
    public CqlIsOperatorKind OperatorKind { get; }
    public CqlScalarExpression Expression { get; }
    public CqlIsOperatorScalarExpression(CqlIsOperatorKind operatorKind, CqlScalarExpression expression);
    [CompilerGeneratedAttribute]
public CqlIsOperatorKind get_OperatorKind();
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_Expression();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlLetScalarExpression : CqlScalarExpression {
    [CompilerGeneratedAttribute]
private CqlVariable <DeclaredVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlScalarExpression <DeclaredVariableExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlScalarExpression <Expression>k__BackingField;
    public CqlVariable DeclaredVariable { get; }
    public CqlScalarExpression DeclaredVariableExpression { get; }
    public CqlScalarExpression Expression { get; }
    public CqlLetScalarExpression(CqlVariable declaredVariable, CqlScalarExpression declaredVariableExpression, CqlScalarExpression expression);
    [CompilerGeneratedAttribute]
public CqlVariable get_DeclaredVariable();
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_DeclaredVariableExpression();
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_Expression();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlLiteral : object {
    [CompilerGeneratedAttribute]
private CqlLiteralKind <Kind>k__BackingField;
    public CqlLiteralKind Kind { get; }
    protected CqlLiteral(CqlLiteralKind kind);
    [CompilerGeneratedAttribute]
public CqlLiteralKind get_Kind();
    public abstract virtual void Accept(ICqlVisitor cqlVisitor);
}
internal enum Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlLiteralKind : Enum {
    public int value__;
    public static CqlLiteralKind Undefined;
    public static CqlLiteralKind Array;
    public static CqlLiteralKind Boolean;
    public static CqlLiteralKind Null;
    public static CqlLiteralKind Number;
    public static CqlLiteralKind Object;
    public static CqlLiteralKind String;
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlLiteralScalarExpression : CqlScalarExpression {
    [CompilerGeneratedAttribute]
private CqlLiteral <Literal>k__BackingField;
    public CqlLiteral Literal { get; }
    public CqlLiteralScalarExpression(CqlLiteral literal);
    [CompilerGeneratedAttribute]
public CqlLiteral get_Literal();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlMuxScalarExpression : CqlScalarExpression {
    [CompilerGeneratedAttribute]
private CqlScalarExpression <ConditionExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlScalarExpression <LeftExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlScalarExpression <RightExpression>k__BackingField;
    public CqlScalarExpression ConditionExpression { get; }
    public CqlScalarExpression LeftExpression { get; }
    public CqlScalarExpression RightExpression { get; }
    public CqlMuxScalarExpression(CqlScalarExpression conditionExpression, CqlScalarExpression leftExpression, CqlScalarExpression rightExpression);
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_ConditionExpression();
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_LeftExpression();
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_RightExpression();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlNullLiteral : CqlLiteral {
    public static CqlNullLiteral Singleton;
    private static CqlNullLiteral();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlNumberLiteral : CqlLiteral {
    [CompilerGeneratedAttribute]
private Number64 <Value>k__BackingField;
    public Number64 Value { get; }
    public CqlNumberLiteral(Number64 value);
    [CompilerGeneratedAttribute]
public Number64 get_Value();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlObjectCreateScalarExpression : CqlScalarExpression {
    private static string Object;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CqlObjectProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectKind>k__BackingField;
    public IReadOnlyList`1<CqlObjectProperty> Properties { get; }
    public string ObjectKind { get; }
    public CqlObjectCreateScalarExpression(IReadOnlyList`1<CqlObjectProperty> properties);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CqlObjectProperty> get_Properties();
    [CompilerGeneratedAttribute]
public string get_ObjectKind();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlObjectLiteral : CqlLiteral {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CqlObjectLiteralProperty> <Properties>k__BackingField;
    public IReadOnlyList`1<CqlObjectLiteralProperty> Properties { get; }
    public CqlObjectLiteral(IReadOnlyList`1<CqlObjectLiteralProperty> properties);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CqlObjectLiteralProperty> get_Properties();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlObjectLiteralProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlLiteral <Literal>k__BackingField;
    public string Name { get; }
    public CqlLiteral Literal { get; }
    public CqlObjectLiteralProperty(string name, CqlLiteral literal);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public CqlLiteral get_Literal();
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlObjectProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlScalarExpression <Expression>k__BackingField;
    public string Name { get; }
    public CqlScalarExpression Expression { get; }
    public CqlObjectProperty(string name, CqlScalarExpression expression);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_Expression();
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlOrderByEnumerableExpression : CqlEnumerableExpression {
    [CompilerGeneratedAttribute]
private CqlEnumerableExpression <SourceExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlVariable <DeclaredVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CqlOrderByItem> <Items>k__BackingField;
    public CqlEnumerableExpression SourceExpression { get; }
    public CqlVariable DeclaredVariable { get; }
    public IReadOnlyList`1<CqlOrderByItem> Items { get; }
    public CqlOrderByEnumerableExpression(CqlEnumerableExpression sourceExpression, CqlVariable declaredVariable, IReadOnlyList`1<CqlOrderByItem> items);
    [CompilerGeneratedAttribute]
public CqlEnumerableExpression get_SourceExpression();
    [CompilerGeneratedAttribute]
public CqlVariable get_DeclaredVariable();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CqlOrderByItem> get_Items();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlOrderByItem : object {
    [CompilerGeneratedAttribute]
private CqlScalarExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlSortOrder <SortOrder>k__BackingField;
    public CqlScalarExpression Expression { get; }
    public CqlSortOrder SortOrder { get; }
    public CqlOrderByItem(CqlScalarExpression expression, CqlSortOrder sortOrder);
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_Expression();
    [CompilerGeneratedAttribute]
public CqlSortOrder get_SortOrder();
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlPropertyRefScalarExpression : CqlScalarExpression {
    [CompilerGeneratedAttribute]
private CqlScalarExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public CqlScalarExpression Expression { get; }
    public string PropertyName { get; }
    public CqlPropertyRefScalarExpression(CqlScalarExpression expression, string propertyName);
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_Expression();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlScalarAsEnumerableExpression : CqlEnumerableExpression {
    [CompilerGeneratedAttribute]
private CqlScalarExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlEnumerationKind <EnumerationKind>k__BackingField;
    public CqlScalarExpression Expression { get; }
    public CqlEnumerationKind EnumerationKind { get; }
    public CqlScalarAsEnumerableExpression(CqlScalarExpression expression, CqlEnumerationKind enumerationKind);
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_Expression();
    [CompilerGeneratedAttribute]
public CqlEnumerationKind get_EnumerationKind();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlScalarExpression : object {
    [CompilerGeneratedAttribute]
private CqlScalarExpressionKind <Kind>k__BackingField;
    public CqlScalarExpressionKind Kind { get; }
    protected CqlScalarExpression(CqlScalarExpressionKind kind);
    [CompilerGeneratedAttribute]
public CqlScalarExpressionKind get_Kind();
    public abstract virtual void Accept(ICqlVisitor cqlVisitor);
}
internal enum Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlScalarExpressionKind : Enum {
    public int value__;
    public static CqlScalarExpressionKind ArrayCreate;
    public static CqlScalarExpressionKind ArrayIndexer;
    public static CqlScalarExpressionKind BinaryOperator;
    public static CqlScalarExpressionKind IsOperator;
    public static CqlScalarExpressionKind Let;
    public static CqlScalarExpressionKind Literal;
    public static CqlScalarExpressionKind Mux;
    public static CqlScalarExpressionKind ObjectCreate;
    public static CqlScalarExpressionKind PropertyRef;
    public static CqlScalarExpressionKind SystemFunctionCall;
    public static CqlScalarExpressionKind TupleCreate;
    public static CqlScalarExpressionKind TupleItemRef;
    public static CqlScalarExpressionKind UnaryOperator;
    public static CqlScalarExpressionKind UserDefinedFunctionCall;
    public static CqlScalarExpressionKind VariableRef;
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlSelectEnumerableExpression : CqlEnumerableExpression {
    [CompilerGeneratedAttribute]
private CqlEnumerableExpression <SourceExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlVariable <DeclaredVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlScalarExpression <Expression>k__BackingField;
    public CqlEnumerableExpression SourceExpression { get; }
    public CqlVariable DeclaredVariable { get; }
    public CqlScalarExpression Expression { get; }
    public CqlSelectEnumerableExpression(CqlEnumerableExpression sourceExpression, CqlVariable declaredVariable, CqlScalarExpression expression);
    [CompilerGeneratedAttribute]
public CqlEnumerableExpression get_SourceExpression();
    [CompilerGeneratedAttribute]
public CqlVariable get_DeclaredVariable();
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_Expression();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlSelectManyEnumerableExpression : CqlEnumerableExpression {
    [CompilerGeneratedAttribute]
private CqlEnumerableExpression <SourceExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlVariable <DeclaredVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlEnumerableExpression <SelectorExpression>k__BackingField;
    public CqlEnumerableExpression SourceExpression { get; }
    public CqlVariable DeclaredVariable { get; }
    public CqlEnumerableExpression SelectorExpression { get; }
    public CqlSelectManyEnumerableExpression(CqlEnumerableExpression sourceExpression, CqlVariable declaredVariable, CqlEnumerableExpression selectorExpression);
    [CompilerGeneratedAttribute]
public CqlEnumerableExpression get_SourceExpression();
    [CompilerGeneratedAttribute]
public CqlVariable get_DeclaredVariable();
    [CompilerGeneratedAttribute]
public CqlEnumerableExpression get_SelectorExpression();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal enum Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlSortOrder : Enum {
    public int value__;
    public static CqlSortOrder Ascending;
    public static CqlSortOrder Descending;
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlStringLiteral : CqlLiteral {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public CqlStringLiteral(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlSystemFunctionCallScalarExpression : CqlScalarExpression {
    [CompilerGeneratedAttribute]
private CqlBuiltinScalarFunctionKind <FunctionKind>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CqlScalarExpression> <Arguments>k__BackingField;
    public CqlBuiltinScalarFunctionKind FunctionKind { get; }
    public IReadOnlyList`1<CqlScalarExpression> Arguments { get; }
    public CqlSystemFunctionCallScalarExpression(CqlBuiltinScalarFunctionKind functionKind, IReadOnlyList`1<CqlScalarExpression> arguments);
    [CompilerGeneratedAttribute]
public CqlBuiltinScalarFunctionKind get_FunctionKind();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CqlScalarExpression> get_Arguments();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlTakeEnumerableExpression : CqlEnumerableExpression {
    [CompilerGeneratedAttribute]
private CqlEnumerableExpression <SourceExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <SkipValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TakeValue>k__BackingField;
    public CqlEnumerableExpression SourceExpression { get; }
    public ulong SkipValue { get; }
    public ulong TakeValue { get; }
    public CqlTakeEnumerableExpression(CqlEnumerableExpression sourceExpression, ulong skipValue, ulong takeValue);
    [CompilerGeneratedAttribute]
public CqlEnumerableExpression get_SourceExpression();
    [CompilerGeneratedAttribute]
public ulong get_SkipValue();
    [CompilerGeneratedAttribute]
public ulong get_TakeValue();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlTupleAggregate : CqlAggregate {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CqlAggregate> <Items>k__BackingField;
    public IReadOnlyList`1<CqlAggregate> Items { get; }
    public CqlTupleAggregate(IReadOnlyList`1<CqlAggregate> items);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CqlAggregate> get_Items();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlTupleCreateScalarExpression : CqlScalarExpression {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CqlScalarExpression> <Items>k__BackingField;
    public IReadOnlyList`1<CqlScalarExpression> Items { get; }
    public CqlTupleCreateScalarExpression(IReadOnlyList`1<CqlScalarExpression> items);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CqlScalarExpression> get_Items();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlTupleItemRefScalarExpression : CqlScalarExpression {
    [CompilerGeneratedAttribute]
private CqlScalarExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Index>k__BackingField;
    public CqlScalarExpression Expression { get; }
    public ulong Index { get; }
    public CqlTupleItemRefScalarExpression(CqlScalarExpression expression, ulong index);
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_Expression();
    [CompilerGeneratedAttribute]
public ulong get_Index();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlUnaryScalarExpression : CqlScalarExpression {
    [CompilerGeneratedAttribute]
private CqlUnaryScalarOperatorKind <OperatorKind>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlScalarExpression <Expression>k__BackingField;
    public CqlUnaryScalarOperatorKind OperatorKind { get; }
    public CqlScalarExpression Expression { get; }
    public CqlUnaryScalarExpression(CqlUnaryScalarOperatorKind operatorKind, CqlScalarExpression expression);
    [CompilerGeneratedAttribute]
public CqlUnaryScalarOperatorKind get_OperatorKind();
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_Expression();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal enum Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlUnaryScalarOperatorKind : Enum {
    public int value__;
    public static CqlUnaryScalarOperatorKind BitwiseNot;
    public static CqlUnaryScalarOperatorKind Minus;
    public static CqlUnaryScalarOperatorKind Not;
    public static CqlUnaryScalarOperatorKind Plus;
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlUndefinedLiteral : CqlLiteral {
    public static CqlUndefinedLiteral Singleton;
    private static CqlUndefinedLiteral();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlUserDefinedFunctionCallScalarExpression : CqlScalarExpression {
    [CompilerGeneratedAttribute]
private CqlFunctionIdentifier <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CqlScalarExpression> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Builtin>k__BackingField;
    public CqlFunctionIdentifier Identifier { get; }
    public IReadOnlyList`1<CqlScalarExpression> Arguments { get; }
    public bool Builtin { get; }
    public CqlUserDefinedFunctionCallScalarExpression(CqlFunctionIdentifier identifier, IReadOnlyList`1<CqlScalarExpression> arguments, bool builtin);
    [CompilerGeneratedAttribute]
public CqlFunctionIdentifier get_Identifier();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CqlScalarExpression> get_Arguments();
    [CompilerGeneratedAttribute]
public bool get_Builtin();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlVariable : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UniqueId>k__BackingField;
    public string Name { get; }
    public long UniqueId { get; }
    public CqlVariable(string name, long uniqueId);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public long get_UniqueId();
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlVariableRefScalarExpression : CqlScalarExpression {
    [CompilerGeneratedAttribute]
private CqlVariable <Variable>k__BackingField;
    public CqlVariable Variable { get; }
    public CqlVariableRefScalarExpression(CqlVariable variable);
    [CompilerGeneratedAttribute]
public CqlVariable get_Variable();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.Cql.CqlWhereEnumerableExpression : CqlEnumerableExpression {
    [CompilerGeneratedAttribute]
private CqlEnumerableExpression <SourceExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlVariable <DeclaredVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private CqlScalarExpression <Expression>k__BackingField;
    public CqlEnumerableExpression SourceExpression { get; }
    public CqlVariable DeclaredVariable { get; }
    public CqlScalarExpression Expression { get; }
    public CqlWhereEnumerableExpression(CqlEnumerableExpression sourceExpression, CqlVariable declaredVariable, CqlScalarExpression expression);
    [CompilerGeneratedAttribute]
public CqlEnumerableExpression get_SourceExpression();
    [CompilerGeneratedAttribute]
public CqlVariable get_DeclaredVariable();
    [CompilerGeneratedAttribute]
public CqlScalarExpression get_Expression();
    public virtual void Accept(ICqlVisitor cqlVisitor);
}
internal interface Microsoft.Azure.Cosmos.Query.Core.ClientDistributionPlan.ICqlVisitor {
    public abstract virtual void Visit(CqlAggregate cqlAggregate);
    public abstract virtual void Visit(CqlAggregateEnumerableExpression cqlAggregateEnumerableExpression);
    public abstract virtual void Visit(CqlAggregateKind cqlAggregateKind);
    public abstract virtual void Visit(CqlAggregateOperatorKind cqlAggregateOperatorKind);
    public abstract virtual void Visit(CqlArrayCreateScalarExpression cqlArrayCreateScalarExpression);
    public abstract virtual void Visit(CqlArrayIndexerScalarExpression cqlArrayIndexerScalarExpression);
    public abstract virtual void Visit(CqlArrayLiteral cqlArrayLiteral);
    public abstract virtual void Visit(CqlBinaryScalarExpression cqlBinaryScalarExpression);
    public abstract virtual void Visit(CqlBinaryScalarOperatorKind cqlBinaryScalarOperatorKind);
    public abstract virtual void Visit(CqlBooleanLiteral cqlBooleanLiteral);
    public abstract virtual void Visit(CqlBuiltinAggregate cqlBuiltinAggregate);
    public abstract virtual void Visit(CqlBuiltinScalarFunctionKind cqlBuiltinScalarFunctionKind);
    public abstract virtual void Visit(CqlDistinctEnumerableExpression cqlDistinctEnumerableExpression);
    public abstract virtual void Visit(CqlEnumerableExpression cqlEnumerableExpression);
    public abstract virtual void Visit(CqlEnumerableExpressionKind cqlEnumerableExpressionKind);
    public abstract virtual void Visit(CqlEnumerationKind cqlEnumerationKind);
    public abstract virtual void Visit(CqlFunctionIdentifier cqlFunctionIdentifier);
    public abstract virtual void Visit(CqlGroupByEnumerableExpression cqlGroupByEnumerableExpression);
    public abstract virtual void Visit(CqlInputEnumerableExpression cqlInputEnumerableExpression);
    public abstract virtual void Visit(CqlIsOperatorKind cqlIsOperatorKind);
    public abstract virtual void Visit(CqlIsOperatorScalarExpression cqlIsOperatorScalarExpression);
    public abstract virtual void Visit(CqlLetScalarExpression cqlLetScalarExpression);
    public abstract virtual void Visit(CqlLiteral cqlLiteral);
    public abstract virtual void Visit(CqlLiteralKind cqlLiteralKind);
    public abstract virtual void Visit(CqlLiteralScalarExpression cqlLiteralScalarExpression);
    public abstract virtual void Visit(CqlMuxScalarExpression cqlMuxScalarExpression);
    public abstract virtual void Visit(CqlNullLiteral cqlNullLiteral);
    public abstract virtual void Visit(CqlNumberLiteral cqlNumberLiteral);
    public abstract virtual void Visit(CqlObjectCreateScalarExpression cqlObjectCreateScalarExpression);
    public abstract virtual void Visit(CqlObjectLiteral cqlObjectLiteral);
    public abstract virtual void Visit(CqlObjectLiteralProperty cqlObjectLiteralProperty);
    public abstract virtual void Visit(CqlObjectProperty cqlObjectProperty);
    public abstract virtual void Visit(CqlOrderByEnumerableExpression cqlOrderByEnumerableExpression);
    public abstract virtual void Visit(CqlOrderByItem cqlOrderByItem);
    public abstract virtual void Visit(CqlPropertyRefScalarExpression cqlPropertyRefScalarExpression);
    public abstract virtual void Visit(CqlScalarAsEnumerableExpression cqlScalarAsEnumerableExpression);
    public abstract virtual void Visit(CqlScalarExpression cqlScalarExpression);
    public abstract virtual void Visit(CqlScalarExpressionKind cqlScalarExpressionKind);
    public abstract virtual void Visit(CqlSelectEnumerableExpression cqlSelectEnumerableExpression);
    public abstract virtual void Visit(CqlSelectManyEnumerableExpression cqlSelectManyEnumerableExpression);
    public abstract virtual void Visit(CqlSortOrder cqlSortOrder);
    public abstract virtual void Visit(CqlStringLiteral cqlStringLiteral);
    public abstract virtual void Visit(CqlSystemFunctionCallScalarExpression cqlSystemFunctionCallScalarExpression);
    public abstract virtual void Visit(CqlTakeEnumerableExpression cqlTakeEnumerableExpression);
    public abstract virtual void Visit(CqlTupleAggregate cqlTupleAggregate);
    public abstract virtual void Visit(CqlTupleCreateScalarExpression cqlTupleCreateScalarExpression);
    public abstract virtual void Visit(CqlTupleItemRefScalarExpression cqlTupleItemRefScalarExpression);
    public abstract virtual void Visit(CqlUnaryScalarExpression cqlUnaryScalarExpression);
    public abstract virtual void Visit(CqlUnaryScalarOperatorKind cqlUnaryScalarOperatorKind);
    public abstract virtual void Visit(CqlUndefinedLiteral cqlUndefinedLiteral);
    public abstract virtual void Visit(CqlUserDefinedFunctionCallScalarExpression cqlUserDefinedFunctionCallScalarExpression);
    public abstract virtual void Visit(CqlVariable cqlVariable);
    public abstract virtual void Visit(CqlVariableRefScalarExpression cqlVariableRefScalarExpression);
    public abstract virtual void Visit(CqlWhereEnumerableExpression cqlWhereEnumerableExpression);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Collections.PriorityQueue`1 : object {
    private static int DefaultInitialCapacity;
    private List`1<T> queue;
    [CompilerGeneratedAttribute]
private IComparer`1<T> <Comparer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSynchronized>k__BackingField;
    public int Count { get; }
    public IComparer`1<T> Comparer { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public PriorityQueue`1(bool isSynchronized);
    public PriorityQueue`1(int initialCapacity, bool isSynchronized);
    public PriorityQueue`1(IComparer`1<T> comparer, bool isSynchronized);
    public PriorityQueue`1(IEnumerable`1<T> enumerable, bool isSynchronized);
    public PriorityQueue`1(IEnumerable`1<T> enumerable, IComparer`1<T> comparer, bool isSynchronized);
    public PriorityQueue`1(int initialCapacity, IComparer`1<T> comparer, bool isSynchronized);
    private PriorityQueue`1(List`1<T> queue, IComparer`1<T> comparer, bool isSynchronized);
    public sealed virtual int get_Count();
    [CompilerGeneratedAttribute]
public IComparer`1<T> get_Comparer();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(T[] array, int index);
    public sealed virtual bool TryAdd(T item);
    public sealed virtual bool TryTake(T& item);
    public bool TryPeek(T& item);
    public sealed virtual void CopyTo(Array array, int index);
    public void Clear();
    public bool Contains(T item);
    public T Dequeue();
    public void Enqueue(T item);
    public void EnqueueRange(IEnumerable`1<T> items);
    public T Peek();
    public sealed virtual T[] ToArray();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void CopyToPrivate(T[] array, int index);
    private bool TryTakePrivate(T& item);
    private bool TryPeekPrivate(T& item);
    private void ClearPrivate();
    private bool ContainsPrivate(T item);
    private T DequeuePrivate();
    private void EnqueuePrivate(T item);
    private void EnqueueRangePrivate(IEnumerable`1<T> items);
    private T PeekPrivate();
    private T[] ToArrayPrivate();
    private IEnumerator`1<T> GetEnumeratorPrivate();
    private void Heapify();
    private void DownHeap(int itemIndex);
    private void UpHeap(int itemIndex);
    private int GetSmallestChildIndex(int parentIndex);
    private int GetParentIndex(int childIndex);
}
internal class Microsoft.Azure.Cosmos.Query.Core.DistributionPlanSpec : object {
    [CompilerGeneratedAttribute]
private string <BackendDistributionPlan>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientDistributionPlan>k__BackingField;
    public string BackendDistributionPlan { get; }
    public string ClientDistributionPlan { get; }
    public DistributionPlanSpec(string backendDistributionPlan, string clientDistributionPlan);
    [CompilerGeneratedAttribute]
public string get_BackendDistributionPlan();
    [CompilerGeneratedAttribute]
public string get_ClientDistributionPlan();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Exceptions.ExpectedQueryPartitionProviderException : QueryPartitionProviderException {
    public ExpectedQueryPartitionProviderException(string message);
    public ExpectedQueryPartitionProviderException(string message, Exception innerException);
    public virtual TResult Accept(QueryExceptionVisitor`1<TResult> visitor, ITrace trace);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Exceptions.MalformedContinuationTokenException : QueryException {
    public MalformedContinuationTokenException(string message);
    public MalformedContinuationTokenException(string message, Exception innerException);
    public virtual TResult Accept(QueryExceptionVisitor`1<TResult> visitor, ITrace trace);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.Exceptions.QueryException : Exception {
    protected QueryException(string message);
    protected QueryException(string message, Exception innerException);
    public abstract virtual TResult Accept(QueryExceptionVisitor`1<TResult> visitor, ITrace trace);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.Exceptions.QueryExceptionVisitor`1 : object {
    public abstract virtual TResult Visit(MalformedContinuationTokenException malformedContinuationTokenException, ITrace trace);
    public abstract virtual TResult Visit(UnexpectedQueryPartitionProviderException unexpectedQueryPartitionProviderException, ITrace trace);
    public abstract virtual TResult Visit(ExpectedQueryPartitionProviderException expectedQueryPartitionProviderException, ITrace trace);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.Exceptions.QueryPartitionProviderException : QueryException {
    protected QueryPartitionProviderException(string message);
    protected QueryPartitionProviderException(string message, Exception innerException);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Exceptions.UnexpectedQueryPartitionProviderException : QueryPartitionProviderException {
    public UnexpectedQueryPartitionProviderException(string message);
    public UnexpectedQueryPartitionProviderException(string message, Exception innerException);
    public virtual TResult Accept(QueryExceptionVisitor`1<TResult> visitor, ITrace trace);
}
internal class Microsoft.Azure.Cosmos.Query.Core.ExceptionToCosmosException : object {
    public static bool TryCreateFromException(Exception exception, ITrace trace, CosmosException& cosmosException);
    private static CosmosException CreateFromDocumentClientException(DocumentClientException documentClientException, ITrace trace);
    private static bool TryCreateFromExceptionWithStackTrace(ExceptionWithStackTraceException exceptionWithStackTrace, ITrace trace, CosmosException& cosmosException);
}
internal static class Microsoft.Azure.Cosmos.Query.Core.ExecutionContext.CosmosQueryExecutionContextFactory : object {
    internal static string ClientDisableOptimisticDirectExecution;
    private static string InternalPartitionKeyDefinitionProperty;
    private static string QueryInspectionPattern;
    private static string OptimisticDirectExecution;
    private static string Passthrough;
    private static string Specialized;
    private static int PageSizeFactorForTop;
    private static Regex QueryInspectionRegex;
    private static CosmosQueryExecutionContextFactory();
    public static IQueryPipelineStage Create(DocumentContainer documentContainer, CosmosQueryContext cosmosQueryContext, InputParameters inputParameters, ITrace trace);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.ExecutionContext.CosmosQueryExecutionContextFactory/<TryCreateCoreContextAsync>d__9")]
private static Task`1<TryCatch`1<IQueryPipelineStage>> TryCreateCoreContextAsync(DocumentContainer documentContainer, CosmosQueryContext cosmosQueryContext, InputParameters inputParameters, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.ExecutionContext.CosmosQueryExecutionContextFactory/<TryCreateFromPartitionedQueryExecutionInfoAsync>d__10")]
private static Task`1<TryCatch`1<IQueryPipelineStage>> TryCreateFromPartitionedQueryExecutionInfoAsync(DocumentContainer documentContainer, PartitionedQueryExecutionInfo partitionedQueryExecutionInfo, ContainerQueryProperties containerQueryProperties, CosmosQueryContext cosmosQueryContext, InputParameters inputParameters, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.ExecutionContext.CosmosQueryExecutionContextFactory/<TryCreateSinglePartitionExecutionContextAsync>d__11")]
private static Task`1<TryCatch`1<IQueryPipelineStage>> TryCreateSinglePartitionExecutionContextAsync(DocumentContainer documentContainer, PartitionedQueryExecutionInfo partitionedQueryExecutionInfo, CosmosQueryContext cosmosQueryContext, ContainerQueryProperties containerQueryProperties, InputParameters inputParameters, PartitionKeyRange targetRange, ITrace trace, CancellationToken cancellationToken);
    private static TryCatch`1<IQueryPipelineStage> TryCreateSpecializedDocumentQueryExecutionContext(DocumentContainer documentContainer, CosmosQueryContext cosmosQueryContext, InputParameters inputParameters, List`1<PartitionKeyRange> targetRanges, ContainerQueryProperties containerQueryProperties, PartitionedQueryExecutionInfo partitionedQueryExecutionInfo);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.ExecutionContext.CosmosQueryExecutionContextFactory/<TryCreateSpecializedDocumentQueryExecutionContextAsync>d__13")]
private static Task`1<TryCatch`1<IQueryPipelineStage>> TryCreateSpecializedDocumentQueryExecutionContextAsync(DocumentContainer documentContainer, CosmosQueryContext cosmosQueryContext, ContainerQueryProperties containerQueryProperties, InputParameters inputParameters, ITrace trace, CancellationToken cancellationToken);
    private static TryCatch`1<IQueryPipelineStage> TryCreateOptimisticDirectExecutionContext(DocumentContainer documentContainer, CosmosQueryContext cosmosQueryContext, ContainerQueryProperties containerQueryProperties, InputParameters inputParameters, PartitionKeyRange targetRange, CancellationToken cancellationToken);
    private static TryCatch`1<IQueryPipelineStage> TryCreatePassthroughQueryExecutionContext(DocumentContainer documentContainer, InputParameters inputParameters, List`1<PartitionKeyRange> targetRanges, ContainerQueryProperties containerQueryProperties);
    private static TryCatch`1<IQueryPipelineStage> TryCreateSpecializedDocumentQueryExecutionContext(DocumentContainer documentContainer, CosmosQueryContext cosmosQueryContext, InputParameters inputParameters, PartitionedQueryExecutionInfo partitionedQueryExecutionInfo, List`1<PartitionKeyRange> targetRanges, ContainerQueryProperties containerQueryProperties);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.ExecutionContext.CosmosQueryExecutionContextFactory/<GetPartitionedQueryExecutionInfoAsync>d__17")]
private static Task`1<PartitionedQueryExecutionInfo> GetPartitionedQueryExecutionInfoAsync(CosmosQueryContext cosmosQueryContext, InputParameters inputParameters, ContainerQueryProperties containerQueryProperties, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.ExecutionContext.CosmosQueryExecutionContextFactory/<GetTargetPartitionKeyRangesAsync>d__18")]
internal static Task`1<List`1<PartitionKeyRange>> GetTargetPartitionKeyRangesAsync(CosmosQueryClient queryClient, string resourceLink, PartitionedQueryExecutionInfo partitionedQueryExecutionInfo, ContainerQueryProperties containerQueryProperties, IReadOnlyDictionary`2<string, object> properties, FeedRangeInternal feedRangeInternal, ITrace trace);
    private static bool TryGetEpkProperty(IReadOnlyDictionary`2<string, object> properties, String& effectivePartitionKeyString);
    private static void SetTestInjectionPipelineType(InputParameters inputParameters, string pipelineType);
    private static PartitionKeyDefinition GetPartitionKeyDefinition(InputParameters inputParameters, ContainerQueryProperties containerQueryProperties);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.ExecutionContext.CosmosQueryExecutionContextFactory/<TryGetTargetRangeOptimisticDirectExecutionAsync>d__22")]
private static Task`1<PartitionKeyRange> TryGetTargetRangeOptimisticDirectExecutionAsync(InputParameters inputParameters, PartitionedQueryExecutionInfo partitionedQueryExecutionInfo, CosmosQueryContext cosmosQueryContext, ContainerQueryProperties containerQueryProperties, ITrace trace);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.ClientSideMetrics : object {
    public static ClientSideMetrics Empty;
    [CompilerGeneratedAttribute]
private long <Retries>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RequestCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<FetchExecutionRange> <FetchExecutionRanges>k__BackingField;
    public long Retries { get; }
    public double RequestCharge { get; }
    public IEnumerable`1<FetchExecutionRange> FetchExecutionRanges { get; }
    public ClientSideMetrics(long retries, double requestCharge, IEnumerable`1<FetchExecutionRange> fetchExecutionRanges);
    private static ClientSideMetrics();
    [CompilerGeneratedAttribute]
public long get_Retries();
    [CompilerGeneratedAttribute]
public double get_RequestCharge();
    [CompilerGeneratedAttribute]
public IEnumerable`1<FetchExecutionRange> get_FetchExecutionRanges();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.ClientSideMetricsAccumulator : object {
    private List`1<ClientSideMetrics> clientSideMetricsList;
    public void Accumulate(ClientSideMetrics clientSideMetrics);
    public ClientSideMetrics GetClientSideMetrics();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.CompositeIndexIndexMetrics : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <IndexSpecs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexImpactScore>k__BackingField;
    [JsonPropertyAttribute]
public IReadOnlyList`1<string> IndexSpecs { get; }
    [JsonPropertyAttribute]
public string IndexImpactScore { get; }
    [JsonConstructorAttribute]
private CompositeIndexIndexMetrics(IReadOnlyList`1<string> indexDocumentExpressions, string indexImpactScore);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_IndexSpecs();
    [CompilerGeneratedAttribute]
public string get_IndexImpactScore();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.CompositeIndexUtilizationEntity : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <IndexDocumentExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IndexPlanFullFidelity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexImpactScore>k__BackingField;
    [JsonPropertyAttribute]
public IReadOnlyList`1<string> IndexDocumentExpressions { get; }
    [JsonPropertyAttribute]
public bool IndexPlanFullFidelity { get; }
    [JsonPropertyAttribute]
public string IndexImpactScore { get; }
    [JsonConstructorAttribute]
public CompositeIndexUtilizationEntity(IReadOnlyList`1<string> indexDocumentExpressions, bool indexPlanFullFidelity, string indexImpactScore);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_IndexDocumentExpressions();
    [CompilerGeneratedAttribute]
public bool get_IndexPlanFullFidelity();
    [CompilerGeneratedAttribute]
public string get_IndexImpactScore();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.FetchExecutionRange : object {
    [CompilerGeneratedAttribute]
private string <PartitionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NumberOfDocuments>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RetryCount>k__BackingField;
    public string PartitionId { get; }
    public string ActivityId { get; }
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public long NumberOfDocuments { get; }
    public long RetryCount { get; }
    public FetchExecutionRange(string partitionKeyRangeId, string activityId, DateTime startTime, DateTime endTime, long numberOfDocuments, long retryCount);
    [CompilerGeneratedAttribute]
public string get_PartitionId();
    [CompilerGeneratedAttribute]
public string get_ActivityId();
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public DateTime get_EndTime();
    [CompilerGeneratedAttribute]
public long get_NumberOfDocuments();
    [CompilerGeneratedAttribute]
public long get_RetryCount();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.FetchExecutionRangeAccumulator : object {
    private DateTime constructionTime;
    private ValueStopwatch stopwatch;
    private List`1<FetchExecutionRange> fetchExecutionRanges;
    private DateTime startTime;
    private DateTime endTime;
    private bool isFetching;
    public IEnumerable`1<FetchExecutionRange> GetExecutionRanges();
    public void BeginFetchRange();
    public void EndFetchRange(string partitionIdentifier, string activityId, long numberOfDocuments, long retryCount);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.IndexMetricsInfo : object {
    [CompilerGeneratedAttribute]
private IndexMetricsInfoEntity <UtilizedEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private IndexMetricsInfoEntity <PotentialEntity>k__BackingField;
    [JsonPropertyAttribute("Utilized")]
public IndexMetricsInfoEntity UtilizedEntity { get; }
    [JsonPropertyAttribute("Potential")]
public IndexMetricsInfoEntity PotentialEntity { get; }
    [JsonConstructorAttribute]
public IndexMetricsInfo(IndexMetricsInfoEntity utilizedEntity, IndexMetricsInfoEntity potentialEntity);
    [CompilerGeneratedAttribute]
public IndexMetricsInfoEntity get_UtilizedEntity();
    [CompilerGeneratedAttribute]
public IndexMetricsInfoEntity get_PotentialEntity();
    public static bool TryCreateFromString(string delimitedString, IndexMetricsInfo& result);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.IndexMetricsInfoEntity : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SingleIndexIndexMetrics> <SingleIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CompositeIndexIndexMetrics> <CompositeIndexes>k__BackingField;
    public IReadOnlyList`1<SingleIndexIndexMetrics> SingleIndexes { get; }
    public IReadOnlyList`1<CompositeIndexIndexMetrics> CompositeIndexes { get; }
    [JsonConstructorAttribute]
public IndexMetricsInfoEntity(IReadOnlyList`1<SingleIndexIndexMetrics> singleIndexes, IReadOnlyList`1<CompositeIndexIndexMetrics> compositeIndexes);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<SingleIndexIndexMetrics> get_SingleIndexes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CompositeIndexIndexMetrics> get_CompositeIndexes();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.IndexMetricsWriter : object {
    private static string IndexUtilizationInfo;
    private static string UtilizedSingleIndexes;
    private static string PotentialSingleIndexes;
    private static string UtilizedCompositeIndexes;
    private static string PotentialCompositeIndexes;
    private static string IndexExpression;
    private static string IndexImpactScore;
    private static string IndexUtilizationSeparator;
    private StringBuilder stringBuilder;
    public IndexMetricsWriter(StringBuilder stringBuilder);
    public void WriteIndexMetrics(IndexUtilizationInfo indexUtilizationInfo);
    protected void WriteBeforeIndexUtilizationInfo();
    protected void WriteIndexUtilizationInfo(IndexUtilizationInfo indexUtilizationInfo);
    protected void WriteAfterIndexUtilizationInfo();
    private static void AppendHeaderToStringBuilder(StringBuilder stringBuilder, string headerTitle, int indentLevel);
    private static void AppendNewlineToStringBuilder(StringBuilder stringBuilder);
    [CompilerGeneratedAttribute]
private void <WriteIndexUtilizationInfo>g__WriteSingleIndexUtilizationEntity|12_0(SingleIndexUtilizationEntity indexUtilizationEntity);
    [CompilerGeneratedAttribute]
private void <WriteIndexUtilizationInfo>g__WriteCompositeIndexUtilizationEntity|12_1(CompositeIndexUtilizationEntity indexUtilizationEntity);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.IndexUtilizationInfo : object {
    public static IndexUtilizationInfo Empty;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SingleIndexUtilizationEntity> <UtilizedSingleIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SingleIndexUtilizationEntity> <PotentialSingleIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CompositeIndexUtilizationEntity> <UtilizedCompositeIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CompositeIndexUtilizationEntity> <PotentialCompositeIndexes>k__BackingField;
    public IReadOnlyList`1<SingleIndexUtilizationEntity> UtilizedSingleIndexes { get; }
    public IReadOnlyList`1<SingleIndexUtilizationEntity> PotentialSingleIndexes { get; }
    public IReadOnlyList`1<CompositeIndexUtilizationEntity> UtilizedCompositeIndexes { get; }
    public IReadOnlyList`1<CompositeIndexUtilizationEntity> PotentialCompositeIndexes { get; }
    [JsonConstructorAttribute]
public IndexUtilizationInfo(IReadOnlyList`1<SingleIndexUtilizationEntity> utilizedSingleIndexes, IReadOnlyList`1<SingleIndexUtilizationEntity> potentialSingleIndexes, IReadOnlyList`1<CompositeIndexUtilizationEntity> utilizedCompositeIndexes, IReadOnlyList`1<CompositeIndexUtilizationEntity> potentialCompositeIndexes);
    private static IndexUtilizationInfo();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<SingleIndexUtilizationEntity> get_UtilizedSingleIndexes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<SingleIndexUtilizationEntity> get_PotentialSingleIndexes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CompositeIndexUtilizationEntity> get_UtilizedCompositeIndexes();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CompositeIndexUtilizationEntity> get_PotentialCompositeIndexes();
    internal static bool TryCreateFromDelimitedBase64String(string delimitedString, IndexUtilizationInfo& result);
    public static IndexUtilizationInfo CreateFromString(string delimitedString);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.IndexUtilizationInfoAccumulator : object {
    private List`1<IndexUtilizationInfo> indexUtilizationInfoList;
    public void Accumulate(IndexUtilizationInfo indexUtilizationInfo);
    public IndexUtilizationInfo GetIndexUtilizationInfo();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.PartitionedQueryMetrics : object {
    private Dictionary`2<string, QueryMetrics> partitionedQueryMetrics;
    public int Count { get; }
    public IEnumerable`1<string> Keys { get; }
    public IEnumerable`1<QueryMetrics> Values { get; }
    public QueryMetrics Item { get; }
    public PartitionedQueryMetrics(IReadOnlyDictionary`2<string, QueryMetrics> other);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerable`1<string> get_Keys();
    public sealed virtual IEnumerable`1<QueryMetrics> get_Values();
    public sealed virtual QueryMetrics get_Item(string key);
    public static PartitionedQueryMetrics CreateFromIEnumerable(IEnumerable`1<PartitionedQueryMetrics> partitionedQueryMetricsList);
    public static PartitionedQueryMetrics op_Addition(PartitionedQueryMetrics partitionedQueryMetrics1, PartitionedQueryMetrics partitionedQueryMetrics2);
    public PartitionedQueryMetrics Add(PartitionedQueryMetrics[] partitionedQueryMetricsList);
    public virtual string ToString();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, QueryMetrics>> GetEnumerator();
    public sealed virtual bool TryGetValue(string key, QueryMetrics& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private string ToTextString();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.QueryMetrics : object {
    public static QueryMetrics Empty;
    [CompilerGeneratedAttribute]
private ServerSideMetricsInternal <ServerSideMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private IndexUtilizationInfo <IndexUtilizationInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientSideMetrics <ClientSideMetrics>k__BackingField;
    public ServerSideMetricsInternal ServerSideMetrics { get; }
    public IndexUtilizationInfo IndexUtilizationInfo { get; }
    public ClientSideMetrics ClientSideMetrics { get; }
    public QueryMetrics(ServerSideMetricsInternal serverSideMetrics, IndexUtilizationInfo indexUtilizationInfo, ClientSideMetrics clientSideMetrics);
    public QueryMetrics(string deliminatedString, IndexUtilizationInfo indexUtilizationInfo, ClientSideMetrics clientSideMetrics);
    private static QueryMetrics();
    [CompilerGeneratedAttribute]
public ServerSideMetricsInternal get_ServerSideMetrics();
    [CompilerGeneratedAttribute]
public IndexUtilizationInfo get_IndexUtilizationInfo();
    [CompilerGeneratedAttribute]
public ClientSideMetrics get_ClientSideMetrics();
    public static QueryMetrics op_Addition(QueryMetrics queryMetrics1, QueryMetrics queryMetrics2);
    public virtual string ToString();
    private string ToTextString();
    public static QueryMetrics CreateFromIEnumerable(IEnumerable`1<QueryMetrics> queryMetricsList);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.QueryMetricsAccumulator : object {
    private List`1<QueryMetrics> queryMetricsList;
    public void Accumulate(QueryMetrics queryMetrics);
    public QueryMetrics GetQueryMetrics();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.QueryMetricsTextWriter : QueryMetricsWriter {
    private static string ActivityIds;
    private static string RetrievedDocumentCount;
    private static string RetrievedDocumentSize;
    private static string OutputDocumentCount;
    private static string OutputDocumentSize;
    private static string IndexUtilization;
    private static string TotalQueryExecutionTime;
    private static string QueryPreparationTime;
    private static string QueryCompileTime;
    private static string LogicalPlanBuildTime;
    private static string PhysicalPlanBuildTime;
    private static string QueryOptimizationTime;
    private static string QueryEngineTimes;
    private static string IndexLookupTime;
    private static string DocumentLoadTime;
    private static string DocumentWriteTime;
    private static string RuntimeExecutionTime;
    private static string TotalExecutionTime;
    private static string SystemFunctionExecuteTime;
    private static string UserDefinedFunctionExecutionTime;
    private static string ClientSideQueryMetrics;
    private static string Retries;
    private static string RequestCharge;
    private static string FetchExecutionRanges;
    private static string SchedulingMetrics;
    private static string IndexUtilizationInfo;
    private static string UtilizedSingleIndexes;
    private static string PotentialSingleIndexes;
    private static string UtilizedCompositeIndexes;
    private static string PotentialCompositeIndexes;
    private static string FilterExpression;
    private static string IndexExpression;
    private static string FilterExpressionPrecision;
    private static string IndexPlanFullFidelity;
    private static string IndexImpactScore;
    private static string StartTimeHeader;
    private static string EndTimeHeader;
    private static string DurationHeader;
    private static string PartitionKeyRangeIdHeader;
    private static string NumberOfDocumentsHeader;
    private static string RetryCountHeader;
    private static string ActivityIdHeader;
    private static string PartitionIdHeader;
    private static string ResponseTimeHeader;
    private static string RunTimeHeader;
    private static string WaitTimeHeader;
    private static string TurnaroundTimeHeader;
    private static string NumberOfPreemptionHeader;
    private static string DateTimeFormat;
    private static string IndexUtilizationSeparator;
    private StringBuilder stringBuilder;
    private static int MaxDateTimeStringLength;
    private static int StartTimeHeaderLength;
    private static int EndTimeHeaderLength;
    private static int DurationHeaderLength;
    private static int PartitionKeyRangeIdHeaderLength;
    private static int NumberOfDocumentsHeaderLength;
    private static int RetryCountHeaderLength;
    private static int ActivityIdHeaderLength;
    private static Column[] PartitionExecutionTimelineColumns;
    private static TextTable PartitionExecutionTimelineTable;
    private static int MaxTimeSpanStringLength;
    private static int PartitionIdHeaderLength;
    private static int ResponseTimeHeaderLength;
    private static int RunTimeHeaderLength;
    private static int WaitTimeHeaderLength;
    private static int TurnaroundTimeHeaderLength;
    private static int NumberOfPreemptionHeaderLength;
    private static Column[] SchedulingMetricsColumns;
    private static TextTable SchedulingMetricsTable;
    private string lastFetchPartitionId;
    private string lastActivityId;
    private DateTime lastStartTime;
    private DateTime lastEndTime;
    private long lastFetchDocumentCount;
    private long lastFetchRetryCount;
    private string lastSchedulingPartitionId;
    private TimeSpan lastResponseTime;
    private TimeSpan lastRunTime;
    private TimeSpan lastWaitTime;
    private TimeSpan lastTurnaroundTime;
    private long lastNumberOfPreemptions;
    public QueryMetricsTextWriter(StringBuilder stringBuilder);
    private static QueryMetricsTextWriter();
    protected virtual void WriteBeforeQueryMetrics();
    protected virtual void WriteRetrievedDocumentCount(long retrievedDocumentCount);
    protected virtual void WriteRetrievedDocumentSize(long retrievedDocumentSize);
    protected virtual void WriteOutputDocumentCount(long outputDocumentCount);
    protected virtual void WriteOutputDocumentSize(long outputDocumentSize);
    protected virtual void WriteIndexHitRatio(double indexHitRatio);
    protected virtual void WriteTotalQueryExecutionTime(TimeSpan totalQueryExecutionTime);
    protected virtual void WriteQueryPreparationTime(QueryPreparationTimesInternal queryPreparationTimes);
    protected virtual void WriteIndexLookupTime(TimeSpan indexLookupTime);
    protected virtual void WriteDocumentLoadTime(TimeSpan documentLoadTime);
    protected virtual void WriteVMExecutionTime(TimeSpan vmExecutionTime);
    protected virtual void WriteRuntimeExecutionTime(RuntimeExecutionTimesInternal runtimeExecutionTimes);
    protected virtual void WriteDocumentWriteTime(TimeSpan documentWriteTime);
    protected virtual void WriteBeforeClientSideMetrics();
    protected virtual void WriteRetries(long retries);
    protected virtual void WriteRequestCharge(double requestCharge);
    protected virtual void WriteBeforePartitionExecutionTimeline();
    protected virtual void WriteBeforeFetchExecutionRange();
    protected virtual void WriteFetchPartitionKeyRangeId(string partitionId);
    protected virtual void WriteActivityId(string activityId);
    protected virtual void WriteStartTime(DateTime startTime);
    protected virtual void WriteEndTime(DateTime endTime);
    protected virtual void WriteFetchDocumentCount(long numberOfDocuments);
    protected virtual void WriteFetchRetryCount(long retryCount);
    protected virtual void WriteAfterFetchExecutionRange();
    protected virtual void WriteAfterPartitionExecutionTimeline();
    protected virtual void WriteBeforeSchedulingMetrics();
    protected virtual void WriteBeforePartitionSchedulingTimeSpan();
    protected virtual void WritePartitionSchedulingTimeSpanId(string partitionId);
    protected virtual void WriteResponseTime(TimeSpan responseTime);
    protected virtual void WriteRunTime(TimeSpan runTime);
    protected virtual void WriteWaitTime(TimeSpan waitTime);
    protected virtual void WriteTurnaroundTime(TimeSpan turnaroundTime);
    protected virtual void WriteNumberOfPreemptions(long numPreemptions);
    protected virtual void WriteAfterPartitionSchedulingTimeSpan();
    protected virtual void WriteAfterSchedulingMetrics();
    protected virtual void WriteAfterClientSideMetrics();
    protected virtual void WriteBeforeIndexUtilizationInfo();
    protected virtual void WriteIndexUtilizationInfo(IndexUtilizationInfo indexUtilizationInfo);
    protected virtual void WriteAfterIndexUtilizationInfo();
    protected virtual void WriteAfterQueryMetrics();
    private static void AppendToStringBuilder(StringBuilder stringBuilder, string property, string value, string units, int indentLevel);
    private static void AppendBytesToStringBuilder(StringBuilder stringBuilder, string property, long bytes, int indentLevel);
    private static void AppendCountToStringBuilder(StringBuilder stringBuilder, string property, long count, int indentLevel);
    private static void AppendPercentageToStringBuilder(StringBuilder stringBuilder, string property, double percentage, int indentLevel);
    private static void AppendTimeSpanToStringBuilder(StringBuilder stringBuilder, string property, TimeSpan timeSpan, int indentLevel);
    private static void AppendHeaderToStringBuilder(StringBuilder stringBuilder, string headerTitle, int indentLevel);
    private static void AppendRUToStringBuilder(StringBuilder stringBuilder, string property, double requestCharge, int indentLevel);
    private static void AppendNewlineToStringBuilder(StringBuilder stringBuilder);
    [CompilerGeneratedAttribute]
private void <WriteIndexUtilizationInfo>g__WriteSingleIndexUtilizationEntity|121_0(SingleIndexUtilizationEntity indexUtilizationEntity);
    [CompilerGeneratedAttribute]
private void <WriteIndexUtilizationInfo>g__WriteCompositeIndexUtilizationEntity|121_1(CompositeIndexUtilizationEntity indexUtilizationEntity);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.Metrics.QueryMetricsWriter : object {
    public void WriteQueryMetrics(QueryMetrics queryMetrics);
    protected abstract virtual void WriteBeforeQueryMetrics();
    protected abstract virtual void WriteRetrievedDocumentCount(long retrievedDocumentCount);
    protected abstract virtual void WriteRetrievedDocumentSize(long retrievedDocumentSize);
    protected abstract virtual void WriteOutputDocumentCount(long outputDocumentCount);
    protected abstract virtual void WriteOutputDocumentSize(long outputDocumentSize);
    protected abstract virtual void WriteIndexHitRatio(double indexHitRatio);
    protected abstract virtual void WriteTotalQueryExecutionTime(TimeSpan totalQueryExecutionTime);
    protected abstract virtual void WriteQueryPreparationTime(QueryPreparationTimesInternal queryPreparationTimes);
    protected abstract virtual void WriteIndexLookupTime(TimeSpan indexLookupTime);
    protected abstract virtual void WriteDocumentLoadTime(TimeSpan documentLoadTime);
    protected abstract virtual void WriteVMExecutionTime(TimeSpan vMExecutionTime);
    protected abstract virtual void WriteRuntimeExecutionTime(RuntimeExecutionTimesInternal runtimeExecutionTimes);
    protected abstract virtual void WriteDocumentWriteTime(TimeSpan documentWriteTime);
    private void WriteClientSideMetrics(ClientSideMetrics clientSideMetrics);
    protected abstract virtual void WriteBeforeClientSideMetrics();
    protected abstract virtual void WriteRetries(long retries);
    protected abstract virtual void WriteRequestCharge(double requestCharge);
    private void WritePartitionExecutionTimeline(ClientSideMetrics clientSideMetrics);
    protected abstract virtual void WriteBeforePartitionExecutionTimeline();
    private void WriteFetchExecutionRange(FetchExecutionRange fetchExecutionRange);
    protected abstract virtual void WriteBeforeFetchExecutionRange();
    protected abstract virtual void WriteFetchPartitionKeyRangeId(string partitionId);
    protected abstract virtual void WriteActivityId(string activityId);
    protected abstract virtual void WriteStartTime(DateTime startTime);
    protected abstract virtual void WriteEndTime(DateTime endTime);
    protected abstract virtual void WriteFetchDocumentCount(long numberOfDocuments);
    protected abstract virtual void WriteFetchRetryCount(long retryCount);
    protected abstract virtual void WriteAfterFetchExecutionRange();
    protected abstract virtual void WriteAfterPartitionExecutionTimeline();
    protected abstract virtual void WriteBeforeSchedulingMetrics();
    private void WritePartitionSchedulingTimeSpan(string partitionId, SchedulingTimeSpan schedulingTimeSpan);
    protected abstract virtual void WriteBeforePartitionSchedulingTimeSpan();
    protected abstract virtual void WritePartitionSchedulingTimeSpanId(string partitionId);
    protected abstract virtual void WriteResponseTime(TimeSpan responseTime);
    protected abstract virtual void WriteRunTime(TimeSpan runTime);
    protected abstract virtual void WriteWaitTime(TimeSpan waitTime);
    protected abstract virtual void WriteTurnaroundTime(TimeSpan turnaroundTime);
    protected abstract virtual void WriteNumberOfPreemptions(long numPreemptions);
    protected abstract virtual void WriteAfterPartitionSchedulingTimeSpan();
    protected abstract virtual void WriteAfterSchedulingMetrics();
    protected abstract virtual void WriteAfterClientSideMetrics();
    protected abstract virtual void WriteBeforeIndexUtilizationInfo();
    protected abstract virtual void WriteIndexUtilizationInfo(IndexUtilizationInfo indexUtilizationInfo);
    protected abstract virtual void WriteAfterIndexUtilizationInfo();
    protected abstract virtual void WriteAfterQueryMetrics();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.QueryPreparationTimesAccumulator : object {
    private List`1<QueryPreparationTimesInternal> queryPreparationTimesList;
    public void Accumulate(QueryPreparationTimesInternal queryPreparationTimes);
    public QueryPreparationTimesInternal GetQueryPreparationTimes();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.QueryPreparationTimesInternal : object {
    public static QueryPreparationTimesInternal Zero;
    [CompilerGeneratedAttribute]
private TimeSpan <QueryCompilationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LogicalPlanBuildTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <PhysicalPlanBuildTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <QueryOptimizationTime>k__BackingField;
    public TimeSpan QueryCompilationTime { get; }
    public TimeSpan LogicalPlanBuildTime { get; }
    public TimeSpan PhysicalPlanBuildTime { get; }
    public TimeSpan QueryOptimizationTime { get; }
    public QueryPreparationTimesInternal(TimeSpan queryCompilationTime, TimeSpan logicalPlanBuildTime, TimeSpan physicalPlanBuildTime, TimeSpan queryOptimizationTime);
    private static QueryPreparationTimesInternal();
    [CompilerGeneratedAttribute]
public TimeSpan get_QueryCompilationTime();
    [CompilerGeneratedAttribute]
public TimeSpan get_LogicalPlanBuildTime();
    [CompilerGeneratedAttribute]
public TimeSpan get_PhysicalPlanBuildTime();
    [CompilerGeneratedAttribute]
public TimeSpan get_QueryOptimizationTime();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.RuntimeExecutionTimesAccumulator : object {
    private List`1<RuntimeExecutionTimesInternal> runtimeExecutionTimesList;
    public void Accumulate(RuntimeExecutionTimesInternal runtimeExecutionTimes);
    public RuntimeExecutionTimesInternal GetRuntimeExecutionTimes();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.RuntimeExecutionTimesInternal : object {
    public static RuntimeExecutionTimesInternal Empty;
    [CompilerGeneratedAttribute]
private TimeSpan <QueryEngineExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <SystemFunctionExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <UserDefinedFunctionExecutionTime>k__BackingField;
    public TimeSpan QueryEngineExecutionTime { get; }
    public TimeSpan SystemFunctionExecutionTime { get; }
    public TimeSpan UserDefinedFunctionExecutionTime { get; }
    public RuntimeExecutionTimesInternal(TimeSpan queryEngineExecutionTime, TimeSpan systemFunctionExecutionTime, TimeSpan userDefinedFunctionExecutionTime);
    private static RuntimeExecutionTimesInternal();
    [CompilerGeneratedAttribute]
public TimeSpan get_QueryEngineExecutionTime();
    [CompilerGeneratedAttribute]
public TimeSpan get_SystemFunctionExecutionTime();
    [CompilerGeneratedAttribute]
public TimeSpan get_UserDefinedFunctionExecutionTime();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.SchedulingStopwatch : object {
    private ValueStopwatch turnaroundTimeStopwatch;
    private ValueStopwatch responseTimeStopwatch;
    private ValueStopwatch runTimeStopwatch;
    private long numPreemptions;
    private bool responded;
    public SchedulingTimeSpan Elapsed { get; }
    public SchedulingTimeSpan get_Elapsed();
    public void Ready();
    public void Start();
    public void Stop();
    public void Terminate();
    public virtual string ToString();
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.SchedulingTimeSpan : ValueType {
    [CompilerGeneratedAttribute]
private long <NumPreemptions>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TurnaroundTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ResponseTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RunTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <WaitTime>k__BackingField;
    public long NumPreemptions { get; }
    public TimeSpan TurnaroundTime { get; }
    public TimeSpan ResponseTime { get; }
    public TimeSpan RunTime { get; }
    public TimeSpan WaitTime { get; }
    public SchedulingTimeSpan(TimeSpan turnaroundTime, TimeSpan responseTime, TimeSpan runTime, TimeSpan waitTime, long numPreemptions);
    [CompilerGeneratedAttribute]
public long get_NumPreemptions();
    [CompilerGeneratedAttribute]
public TimeSpan get_TurnaroundTime();
    [CompilerGeneratedAttribute]
public TimeSpan get_ResponseTime();
    [CompilerGeneratedAttribute]
public TimeSpan get_RunTime();
    [CompilerGeneratedAttribute]
public TimeSpan get_WaitTime();
    public static TimeSpan GetAverageTurnaroundTime(IEnumerable`1<SchedulingTimeSpan> schedulingTimeSpans);
    public static TimeSpan GetAverageResponseTime(IEnumerable`1<SchedulingTimeSpan> schedulingTimeSpans);
    public static TimeSpan GetAverageRunTime(IEnumerable`1<SchedulingTimeSpan> schedulingTimeSpans);
    public static double GetThroughput(IEnumerable`1<SchedulingTimeSpan> schedulingTimeSpans);
    public static double GetCpuUtilization(IEnumerable`1<SchedulingTimeSpan> schedulingTimeSpans);
    public void WriteJsonObject(JsonWriter jsonWriter);
    public virtual string ToString();
    private static TimeSpan GetAverageTime(IEnumerable`1<SchedulingTimeSpan> schedulingTimeSpans, Func`2<SchedulingTimeSpan, long> propertySelectorCallback);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.ServerSideMetricsInternal : ServerSideMetrics {
    public static ServerSideMetricsInternal Empty;
    [CompilerGeneratedAttribute]
private TimeSpan <TotalTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RetrievedDocumentCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RetrievedDocumentSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <OutputDocumentCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <OutputDocumentSize>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryPreparationTimesInternal <QueryPreparationTimes>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <IndexLookupTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DocumentLoadTime>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeExecutionTimesInternal <RuntimeExecutionTimes>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DocumentWriteTime>k__BackingField;
    [CompilerGeneratedAttribute]
private double <IndexHitRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <VMExecutionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FeedRange>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PartitionKeyRangeId>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RequestCharge>k__BackingField;
    public TimeSpan TotalTime { get; }
    public long RetrievedDocumentCount { get; }
    public long RetrievedDocumentSize { get; }
    public long OutputDocumentCount { get; }
    public long OutputDocumentSize { get; }
    public QueryPreparationTimesInternal QueryPreparationTimes { get; }
    public TimeSpan QueryPreparationTime { get; }
    public TimeSpan IndexLookupTime { get; }
    public TimeSpan DocumentLoadTime { get; }
    public RuntimeExecutionTimesInternal RuntimeExecutionTimes { get; }
    public TimeSpan RuntimeExecutionTime { get; }
    public TimeSpan DocumentWriteTime { get; }
    public double IndexHitRatio { get; }
    public TimeSpan VMExecutionTime { get; }
    public string FeedRange { get; public set; }
    public Nullable`1<int> PartitionKeyRangeId { get; public set; }
    public double RequestCharge { get; public set; }
    public ServerSideMetricsInternal(long retrievedDocumentCount, long retrievedDocumentSize, long outputDocumentCount, long outputDocumentSize, double indexHitRatio, TimeSpan totalQueryExecutionTime, QueryPreparationTimesInternal queryPreparationTimes, TimeSpan indexLookupTime, TimeSpan documentLoadTime, TimeSpan vmExecutionTime, RuntimeExecutionTimesInternal runtimeExecutionTimes, TimeSpan documentWriteTime, string feedRange, Nullable`1<int> partitionKeyRangeId);
    private static ServerSideMetricsInternal();
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_TotalTime();
    [CompilerGeneratedAttribute]
public virtual long get_RetrievedDocumentCount();
    [CompilerGeneratedAttribute]
public virtual long get_RetrievedDocumentSize();
    [CompilerGeneratedAttribute]
public virtual long get_OutputDocumentCount();
    [CompilerGeneratedAttribute]
public virtual long get_OutputDocumentSize();
    [CompilerGeneratedAttribute]
public QueryPreparationTimesInternal get_QueryPreparationTimes();
    public virtual TimeSpan get_QueryPreparationTime();
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_IndexLookupTime();
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_DocumentLoadTime();
    [CompilerGeneratedAttribute]
public RuntimeExecutionTimesInternal get_RuntimeExecutionTimes();
    public virtual TimeSpan get_RuntimeExecutionTime();
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_DocumentWriteTime();
    [CompilerGeneratedAttribute]
public virtual double get_IndexHitRatio();
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_VMExecutionTime();
    [CompilerGeneratedAttribute]
public string get_FeedRange();
    [CompilerGeneratedAttribute]
public void set_FeedRange(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PartitionKeyRangeId();
    [CompilerGeneratedAttribute]
public void set_PartitionKeyRangeId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public double get_RequestCharge();
    [CompilerGeneratedAttribute]
public void set_RequestCharge(double value);
    public static ServerSideMetricsInternal Create(IEnumerable`1<ServerSideMetricsInternal> serverSideMetricsEnumerable);
    public static bool TryParseFromDelimitedString(string delimitedString, ServerSideMetricsInternal& serverSideMetrics);
    public static ServerSideMetricsInternal ParseFromDelimitedString(string delimitedString);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.ServerSideMetricsInternalAccumulator : object {
    private List`1<ServerSideMetricsInternal> serverSideMetricsList;
    public void Accumulate(ServerSideMetricsInternal serverSideMetrics);
    public ServerSideMetricsInternal GetServerSideMetrics();
    public List`1<ServerSideMetricsInternal> GetPartitionedServerSideMetrics();
}
internal static class Microsoft.Azure.Cosmos.Query.Core.Metrics.ServerSideMetricsParser : object {
    public static bool TryParse(string deliminatedString, ServerSideMetricsInternal& serverSideMetrics);
    private static bool TryParseTimeSpanField(ReadOnlySpan`1<byte> corpus, TimeSpan& timeSpan, Int32& bytesConsumed);
    private static bool TryParseLongField(ReadOnlySpan`1<byte> corpus, Int64& value, Int32& bytesConsumed);
    private static bool TryParseDoubleField(ReadOnlySpan`1<byte> corpus, Double& value, Int32& bytesConsumed);
}
internal static class Microsoft.Azure.Cosmos.Query.Core.Metrics.ServerSideMetricsTokenizer : object {
    public static ValueTuple`2<Nullable`1<TokenType>, ReadOnlyMemory`1<byte>> Read(ReadOnlySpan`1<byte> corpus);
    private static ValueTuple`2<Nullable`1<TokenType>, ReadOnlyMemory`1<byte>> GetTokenType(ReadOnlySpan`1<byte> buffer);
    private static ValueTuple`2<Nullable`1<TokenType>, ReadOnlyMemory`1<byte>> GetTokenTypeLength20(ReadOnlySpan`1<byte> buffer);
    private static ValueTuple`2<Nullable`1<TokenType>, ReadOnlyMemory`1<byte>> GetTokenTypeLength19(ReadOnlySpan`1<byte> buffer);
    private static ValueTuple`2<Nullable`1<TokenType>, ReadOnlyMemory`1<byte>> GetTokenTypeLength21(ReadOnlySpan`1<byte> buffer);
    private static ValueTuple`2<Nullable`1<TokenType>, ReadOnlyMemory`1<byte>> GetTokenTypeLength29(ReadOnlySpan`1<byte> buffer);
    private static ValueTuple`2<Nullable`1<TokenType>, ReadOnlyMemory`1<byte>> GetTokenTypeLength18(ReadOnlySpan`1<byte> buffer);
    private static ValueTuple`2<Nullable`1<TokenType>, ReadOnlyMemory`1<byte>> GetTokenTypeLength30(ReadOnlySpan`1<byte> buffer);
    private static ValueTuple`2<Nullable`1<TokenType>, ReadOnlyMemory`1<byte>> GetTokenTypeLength25(ReadOnlySpan`1<byte> buffer);
    private static ValueTuple`2<Nullable`1<TokenType>, ReadOnlyMemory`1<byte>> GetTokenTypeLength22(ReadOnlySpan`1<byte> buffer);
    private static ValueTuple`2<Nullable`1<TokenType>, ReadOnlyMemory`1<byte>> GetTokenTypeLength27(ReadOnlySpan`1<byte> buffer);
}
internal static class Microsoft.Azure.Cosmos.Query.Core.Metrics.ServerSideMetricsTraceExtractor : object {
    public static void WalkTraceTreeForQueryMetrics(ITrace currentTrace, ServerSideMetricsInternalAccumulator accumulator);
    private static void WalkTraceTreeForPartitionInfo(ITrace currentTrace, ServerSideMetricsInternal serverSideMetrics);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.Query.Core.Metrics.ServerSideMetricsUtils : object {
    [ExtensionAttribute]
public static string FormatTrace(ServerSideMetricsInternal serverSideMetrics);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.SingleIndexIndexMetrics : object {
    [CompilerGeneratedAttribute]
private string <IndexDocumentExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexImpactScore>k__BackingField;
    [JsonPropertyAttribute]
public string IndexDocumentExpression { get; }
    [JsonPropertyAttribute]
public string IndexImpactScore { get; }
    [JsonConstructorAttribute]
public SingleIndexIndexMetrics(string indexDocumentExpression, string indexImpactScore);
    [CompilerGeneratedAttribute]
public string get_IndexDocumentExpression();
    [CompilerGeneratedAttribute]
public string get_IndexImpactScore();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.SingleIndexUtilizationEntity : object {
    [CompilerGeneratedAttribute]
private string <FilterExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexDocumentExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FilterExpressionPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IndexPlanFullFidelity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexImpactScore>k__BackingField;
    [JsonPropertyAttribute]
public string FilterExpression { get; }
    [JsonPropertyAttribute]
public string IndexDocumentExpression { get; }
    [JsonPropertyAttribute]
public bool FilterExpressionPrecision { get; }
    [JsonPropertyAttribute]
public bool IndexPlanFullFidelity { get; }
    [JsonPropertyAttribute]
public string IndexImpactScore { get; }
    [JsonConstructorAttribute]
public SingleIndexUtilizationEntity(string filterExpression, string indexDocumentExpression, bool filterExpressionPrecision, bool indexPlanFullFidelity, string indexImpactScore);
    [CompilerGeneratedAttribute]
public string get_FilterExpression();
    [CompilerGeneratedAttribute]
public string get_IndexDocumentExpression();
    [CompilerGeneratedAttribute]
public bool get_FilterExpressionPrecision();
    [CompilerGeneratedAttribute]
public bool get_IndexPlanFullFidelity();
    [CompilerGeneratedAttribute]
public string get_IndexImpactScore();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Metrics.TextTable : object {
    private static char CellLeftTop;
    private static char CellRightTop;
    private static char CellLeftBottom;
    private static char CellRightBottom;
    private static char CellHorizontalJointTop;
    private static char CellHorizontalJointBottom;
    private static char CellVerticalJointLeft;
    private static char CellTJoint;
    private static char CellVerticalJointRight;
    private static char CellHorizontalLine;
    private static char CellVerticalLine;
    private List`1<Column> columns;
    private string rowFormatString;
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TopLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MiddleLine>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BottomLine>k__BackingField;
    public string Header { get; }
    public string TopLine { get; }
    public string MiddleLine { get; }
    public string BottomLine { get; }
    public TextTable(Column[] columns);
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public string get_TopLine();
    [CompilerGeneratedAttribute]
public string get_MiddleLine();
    [CompilerGeneratedAttribute]
public string get_BottomLine();
    public string GetRow(Object[] cells);
    private static string BuildLine(char firstChar, char lastChar, char seperator, IEnumerable`1<Column> columns);
    private static string BuildLineFormatString(string cellFormatString, IEnumerable`1<Column> columns);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.Monads.Either`2 : ValueType {
    private TLeft left;
    private TRight right;
    [CompilerGeneratedAttribute]
private bool <IsLeft>k__BackingField;
    public bool IsLeft { get; }
    public bool IsRight { get; }
    private Either`2(TLeft left, TRight right, bool isLeft);
    [CompilerGeneratedAttribute]
public bool get_IsLeft();
    public bool get_IsRight();
    public void Match(Action`1<TLeft> onLeft, Action`1<TRight> onRight);
    public TResult Match(Func`2<TLeft, TResult> onLeft, Func`2<TRight, TResult> onRight);
    public TLeft FromLeft(TLeft defaultValue);
    public TRight FromRight(TRight defaultValue);
    public virtual bool Equals(object obj);
    public bool Equals(Either`2<TLeft, TRight> other);
    public virtual int GetHashCode();
    public static Either`2<TLeft, TRight> op_Implicit(TLeft left);
    public static Either`2<TLeft, TRight> op_Implicit(TRight right);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Monads.ExceptionWithStackTraceException : Exception {
    private static string EndOfInnerExceptionString;
    private StackTrace stackTrace;
    public string StackTrace { get; }
    public ExceptionWithStackTraceException(StackTrace stackTrace);
    public ExceptionWithStackTraceException(string message, StackTrace stackTrace);
    public ExceptionWithStackTraceException(string message, Exception innerException, StackTrace stackTrace);
    private static ExceptionWithStackTraceException();
    public virtual string get_StackTrace();
    public virtual string ToString();
    private string GetClassName();
    public static Exception UnWrapMonadExcepion(Exception exception, ITrace trace);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.Monads.TryCatch : ValueType {
    private TryCatch`1<Void> voidTryCatch;
    public Exception Exception { get; }
    public bool Succeeded { get; }
    public bool Failed { get; }
    private TryCatch(TryCatch`1<Void> voidTryCatch);
    public Exception get_Exception();
    public bool get_Succeeded();
    public bool get_Failed();
    public void Match(Action onSuccess, Action`1<Exception> onError);
    public TryCatch Try(Action onSuccess);
    public TryCatch`1<T> Try(Func`1<T> onSuccess);
    public Task`1<TryCatch`1<T>> TryAsync(Func`1<Task`1<T>> onSuccess);
    public TryCatch Catch(Action`1<Exception> onError);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Monads.TryCatch/<CatchAsync>d__13")]
public Task`1<TryCatch> CatchAsync(Func`2<Exception, Task> onError);
    public void ThrowIfFailed();
    public virtual bool Equals(object obj);
    public bool Equals(TryCatch other);
    public virtual int GetHashCode();
    public static TryCatch FromResult();
    public static TryCatch FromException(Exception exception);
    public static Task UnsafeWaitAsync(Task`1<TryCatch> tryCatchTask, CancellationToken cancellationToken);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.Monads.TryCatch`1 : ValueType {
    private Either`2<Exception, TResult> either;
    public bool Succeeded { get; }
    public bool Failed { get; }
    public TResult Result { get; }
    public Exception Exception { get; }
    public Exception InnerMostException { get; }
    private TryCatch`1(Either`2<Exception, TResult> either);
    public bool get_Succeeded();
    public bool get_Failed();
    public TResult get_Result();
    public Exception get_Exception();
    public Exception get_InnerMostException();
    public void Match(Action`1<TResult> onSuccess, Action`1<Exception> onError);
    public TryCatch`1<TResult> Try(Action`1<TResult> onSuccess);
    public TryCatch`1<T> Try(Func`2<TResult, T> onSuccess);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Monads.TryCatch`1/<TryAsync>d__15`1")]
public Task`1<TryCatch`1<T>> TryAsync(Func`2<TResult, Task`1<T>> onSuccess);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Monads.TryCatch`1/<TryAsync>d__16`1")]
public ValueTask`1<TryCatch`1<T>> TryAsync(Func`2<TResult, ValueTask`1<T>> onSuccess);
    public TryCatch`1<T> Try(Func`2<TResult, TryCatch`1<T>> onSuccess);
    public TryCatch`1<TResult> Catch(Action`1<Exception> onError);
    public TryCatch`1<TResult> Catch(Func`2<Exception, TryCatch`1<TResult>> onError);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Monads.TryCatch`1/<CatchAsync>d__20")]
public Task`1<TryCatch`1<TResult>> CatchAsync(Func`2<Exception, Task> onError);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Monads.TryCatch`1/<CatchAsync>d__21")]
public Task`1<TryCatch`1<TResult>> CatchAsync(Func`2<Exception, Task`1<TryCatch`1<TResult>>> onError);
    public void ThrowIfFailed();
    public virtual bool Equals(object obj);
    public bool Equals(TryCatch`1<TResult> other);
    public virtual int GetHashCode();
    public static TryCatch`1<TResult> FromResult(TResult result);
    public static TryCatch`1<TResult> FromException(Exception exception);
    public static bool ConvertToTryGet(TryCatch`1<T> tryCatch, T& result);
    public static T UnsafeGetResult(TryCatch`1<T> tryCatch);
    public static Task`1<T> UnsafeGetResultAsync(Task`1<TryCatch`1<T>> tryCatch, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Parser.CstToAstVisitor : sqlBaseVisitor`1<SqlObject> {
    public static CstToAstVisitor Singleton;
    private static IReadOnlyDictionary`2<string, SqlBinaryScalarOperatorKind> binaryOperatorKindLookup;
    private static IReadOnlyDictionary`2<string, SqlUnaryScalarOperatorKind> unaryOperatorKindLookup;
    private static CstToAstVisitor();
    public virtual SqlObject VisitProgram(ProgramContext context);
    public virtual SqlObject VisitSql_query(Sql_queryContext context);
    public virtual SqlObject VisitSelect_clause(Select_clauseContext context);
    public virtual SqlObject VisitSelect_star_spec(Select_star_specContext context);
    public virtual SqlObject VisitSelect_value_spec(Select_value_specContext context);
    public virtual SqlObject VisitSelect_list_spec(Select_list_specContext context);
    public virtual SqlObject VisitSelect_item(Select_itemContext context);
    public virtual SqlObject VisitTop_spec(Top_specContext context);
    public virtual SqlObject VisitFrom_clause(From_clauseContext context);
    public virtual SqlObject VisitAliasedCollectionExpression(AliasedCollectionExpressionContext context);
    public virtual SqlObject VisitArrayIteratorCollectionExpression(ArrayIteratorCollectionExpressionContext context);
    public virtual SqlObject VisitJoinCollectionExpression(JoinCollectionExpressionContext context);
    public virtual SqlObject VisitInputPathCollection(InputPathCollectionContext context);
    public virtual SqlObject VisitSubqueryCollection(SubqueryCollectionContext context);
    public virtual SqlObject VisitEpsilonPathExpression(EpsilonPathExpressionContext context);
    public virtual SqlObject VisitIdentifierPathExpression(IdentifierPathExpressionContext context);
    public virtual SqlObject VisitNumberPathExpression(NumberPathExpressionContext context);
    public virtual SqlObject VisitStringPathExpression(StringPathExpressionContext context);
    public virtual SqlObject VisitWhere_clause(Where_clauseContext context);
    public virtual SqlObject VisitGroup_by_clause(Group_by_clauseContext context);
    public virtual SqlObject VisitOrder_by_clause(Order_by_clauseContext context);
    public virtual SqlObject VisitOrder_by_item(Order_by_itemContext context);
    public virtual SqlObject VisitOffset_limit_clause(Offset_limit_clauseContext context);
    public virtual SqlObject VisitOffset_count(Offset_countContext context);
    public virtual SqlObject VisitLimit_count(Limit_countContext context);
    public virtual SqlObject VisitAllScalarExpression(AllScalarExpressionContext context);
    public virtual SqlObject VisitArrayCreateScalarExpression(ArrayCreateScalarExpressionContext context);
    public virtual SqlObject VisitArrayScalarExpression(ArrayScalarExpressionContext context);
    public virtual SqlObject VisitBetweenScalarExpression(BetweenScalarExpressionContext context);
    public virtual SqlObject VisitBinary_scalar_expression(Binary_scalar_expressionContext context);
    public virtual SqlObject VisitCoalesceScalarExpression(CoalesceScalarExpressionContext context);
    public virtual SqlObject VisitConditionalScalarExpression(ConditionalScalarExpressionContext context);
    public virtual SqlObject VisitExistsScalarExpression(ExistsScalarExpressionContext context);
    public virtual SqlObject VisitFirstScalarExpression(FirstScalarExpressionContext context);
    public virtual SqlObject VisitFunctionCallScalarExpression(FunctionCallScalarExpressionContext context);
    public virtual SqlObject VisitFunction_call_scalar_expression(Function_call_scalar_expressionContext context);
    public virtual SqlObject VisitIn_scalar_expression(In_scalar_expressionContext context);
    public virtual SqlObject VisitLastScalarExpression(LastScalarExpressionContext context);
    public virtual SqlObject VisitLike_scalar_expression(Like_scalar_expressionContext context);
    public virtual SqlObject VisitEscape_expression(Escape_expressionContext context);
    public virtual SqlObject VisitLiteralScalarExpression(LiteralScalarExpressionContext context);
    public virtual SqlObject VisitLiteral(LiteralContext context);
    public virtual SqlObject VisitMemberIndexerScalarExpression(MemberIndexerScalarExpressionContext context);
    public virtual SqlObject VisitObjectCreateScalarExpression(ObjectCreateScalarExpressionContext context);
    public virtual SqlObject VisitObject_property(Object_propertyContext context);
    public virtual SqlObject VisitParameterRefScalarExpression(ParameterRefScalarExpressionContext context);
    public virtual SqlObject VisitPropertyRefScalarExpressionBase(PropertyRefScalarExpressionBaseContext context);
    public virtual SqlObject VisitPropertyRefScalarExpressionRecursive(PropertyRefScalarExpressionRecursiveContext context);
    public virtual SqlObject VisitSubqueryScalarExpression(SubqueryScalarExpressionContext context);
    public virtual SqlObject VisitUnary_scalar_expression(Unary_scalar_expressionContext context);
    public virtual SqlObject VisitParenthesizedScalarExperession(ParenthesizedScalarExperessionContext context);
    public virtual SqlObject VisitLogical_scalar_expression(Logical_scalar_expressionContext context);
    public virtual SqlObject VisitAdditive_operator(Additive_operatorContext context);
    public virtual SqlObject VisitBitwise_and_operator(Bitwise_and_operatorContext context);
    public virtual SqlObject VisitBitwise_exclusive_or_operator(Bitwise_exclusive_or_operatorContext context);
    public virtual SqlObject VisitBitwise_inclusive_or_operator(Bitwise_inclusive_or_operatorContext context);
    public virtual SqlObject VisitEquality_operator(Equality_operatorContext context);
    public virtual SqlObject VisitMultiplicative_operator(Multiplicative_operatorContext context);
    public virtual SqlObject VisitRelational_operator(Relational_operatorContext context);
    public virtual SqlObject VisitString_concat_operator(String_concat_operatorContext context);
    public virtual SqlObject VisitUnary_operator(Unary_operatorContext context);
    public virtual SqlObject VisitObject_property_list(Object_property_listContext context);
    public virtual SqlObject VisitOrder_by_items(Order_by_itemsContext context);
    public virtual SqlObject VisitSort_order(Sort_orderContext context);
    public virtual SqlObject VisitScalar_expression_list(Scalar_expression_listContext context);
    private static string GetStringValueFromNode(IParseTree parseTree);
    private static Number64 GetNumber64ValueFromNode(IParseTree parseTree);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Parser.ErrorListener`1 : object {
    public ParseException parseException;
    private Parser parser;
    private Lexer lexer;
    private CommonTokenStream tokenStream;
    private bool firstTime;
    public ErrorListener`1(Parser parser, Lexer lexer, CommonTokenStream token_stream);
    public sealed virtual void SyntaxError(TextWriter output, IRecognizer recognizer, S offendingSymbol, int line, int col, string msg, RecognitionException recognitionException);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Parser.LASets : object {
    private Dictionary`2<Pair`2<ATNState, int>, bool> visited;
    private bool logParse;
    private bool logClosure;
    private Parser parser;
    private CommonTokenStream tokenStream;
    private List`1<IToken> input;
    private int cursor;
    private HashSet`1<ATNState> stopStates;
    private HashSet`1<ATNState> startStates;
    private int entryValue;
    public IntervalSet Compute(Parser parser, CommonTokenStream token_stream, int line, int col);
    private bool CheckPredicate(PredicateTransition transition);
    private List`1<List`1<Edge>> EnterState(Edge t);
    private HashSet`1<ATNState> closure(ATNState start);
    private HashSet`1<ATNState> ComputeSingle(List`1<Edge> parse);
    private bool Validate(List`1<Edge> parse, List`1<IToken> i);
    private string PrintSingle(List`1<Edge> parse);
    private string PrintResult(List`1<List`1<Edge>> all_parses);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Parser.ParseException : Exception {
    public ParseException(string message, Exception innerException);
}
internal static class Microsoft.Azure.Cosmos.Query.Core.Parser.SqlQueryParser : object {
    public static bool TryParse(string text, SqlQuery& sqlQuery);
    public static SqlQuery Parse(string text);
}
internal enum Microsoft.Azure.Cosmos.Query.Core.Pipeline.Aggregate.AggregateOperator : Enum {
    public int value__;
    public static AggregateOperator Average;
    public static AggregateOperator Count;
    public static AggregateOperator MakeList;
    public static AggregateOperator MakeSet;
    public static AggregateOperator Max;
    public static AggregateOperator Min;
    public static AggregateOperator Sum;
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Aggregate.AggregateQueryPipelineStage : QueryPipelineStageBase {
    private SingleGroupAggregator singleGroupAggregator;
    private bool isValueQuery;
    protected bool returnedFinalPage;
    private AggregateQueryPipelineStage(IQueryPipelineStage source, SingleGroupAggregator singleGroupAggregator, bool isValueQuery);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.Aggregate.AggregateQueryPipelineStage/<MoveNextAsync>d__4")]
public virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
    public static TryCatch`1<IQueryPipelineStage> MonadicCreate(IReadOnlyList`1<AggregateOperator> aggregates, IReadOnlyDictionary`2<string, Nullable`1<AggregateOperator>> aliasToAggregateType, IReadOnlyList`1<string> orderedAliases, bool hasSelectValue, CosmosElement continuationToken, MonadicCreatePipelineStage monadicCreatePipelineStage);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Aggregate.Aggregators.AggregateItem : ValueType {
    private static string ItemName1;
    private static string ItemName2;
    private CosmosObject cosmosObject;
    public CosmosElement Item { get; }
    public AggregateItem(CosmosElement cosmosElement);
    public CosmosElement get_Item();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Aggregate.Aggregators.AverageAggregator : object {
    private AverageInfo globalAverage;
    private AverageAggregator(AverageInfo globalAverage);
    public sealed virtual void Aggregate(CosmosElement localAverage);
    public sealed virtual CosmosElement GetResult();
    public static TryCatch`1<IAggregator> TryCreate(CosmosElement continuationToken);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Aggregate.Aggregators.CountAggregator : object {
    private long globalCount;
    private CountAggregator(long initialCount);
    public sealed virtual void Aggregate(CosmosElement localCount);
    public sealed virtual CosmosElement GetResult();
    public static TryCatch`1<IAggregator> TryCreate(CosmosElement continuationToken);
}
internal interface Microsoft.Azure.Cosmos.Query.Core.Pipeline.Aggregate.Aggregators.IAggregator {
    public abstract virtual void Aggregate(CosmosElement item);
    public abstract virtual CosmosElement GetResult();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Aggregate.Aggregators.MakeListAggregator : object {
    private List`1<CosmosElement> globalList;
    private MakeListAggregator(CosmosArray initialList);
    public sealed virtual void Aggregate(CosmosElement localList);
    public sealed virtual CosmosElement GetResult();
    public static TryCatch`1<IAggregator> TryCreate(CosmosElement continuationToken);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Aggregate.Aggregators.MakeSetAggregator : object {
    private HashSet`1<CosmosElement> globalSet;
    private MakeSetAggregator(CosmosArray initialSet);
    public sealed virtual void Aggregate(CosmosElement localSet);
    public sealed virtual CosmosElement GetResult();
    public static TryCatch`1<IAggregator> TryCreate(CosmosElement continuationToken);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Aggregate.Aggregators.MinMaxAggregator : object {
    private bool isMinAggregation;
    private CosmosElement globalMinMax;
    private MinMaxAggregator(bool isMinAggregation, CosmosElement globalMinMax);
    public sealed virtual void Aggregate(CosmosElement localMinMax);
    public sealed virtual CosmosElement GetResult();
    public static TryCatch`1<IAggregator> TryCreateMinAggregator(CosmosElement continuationToken);
    public static TryCatch`1<IAggregator> TryCreateMaxAggregator(CosmosElement continuationToken);
    private static TryCatch`1<IAggregator> TryCreate(bool isMinAggregation, CosmosElement continuationToken);
    private static bool IsPrimitve(CosmosElement cosmosElement);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Aggregate.Aggregators.SingleGroupAggregator : object {
    public abstract virtual void AddValues(CosmosElement values);
    public abstract virtual CosmosElement GetResult();
    public static TryCatch`1<SingleGroupAggregator> TryCreate(IReadOnlyList`1<AggregateOperator> aggregates, IReadOnlyDictionary`2<string, Nullable`1<AggregateOperator>> aggregateAliasToAggregateType, IReadOnlyList`1<string> orderedAliases, bool hasSelectValue, CosmosElement continuationToken);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Aggregate.Aggregators.SumAggregator : object {
    private double globalSum;
    private SumAggregator(double globalSum);
    public sealed virtual void Aggregate(CosmosElement localSum);
    public sealed virtual CosmosElement GetResult();
    public static TryCatch`1<IAggregator> TryCreate(CosmosElement requestContinuationToken);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CatchAllQueryPipelineStage : QueryPipelineStageBase {
    public CatchAllQueryPipelineStage(IQueryPipelineStage inputStage);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.CatchAllQueryPipelineStage/<MoveNextAsync>d__1")]
public virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CosmosExceptionExtensions : object {
    [ExtensionAttribute]
public static bool IsPartitionSplitException(Exception ex);
    [ExtensionAttribute]
public static bool IsPartitionSplitException(CosmosException ex);
}
internal static class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.HierarchicalPartitionUtils : object {
    public static FeedRangeInternal LimitFeedRangeToSinglePartition(Nullable`1<PartitionKey> partitionKey, FeedRangeInternal feedRange, ContainerQueryProperties containerQueryProperties);
}
internal interface Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.IPartitionedToken {
    public Range`1<string> Range { get; }
    public abstract virtual Range`1<string> get_Range();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.BufferedOrderByResults : object {
    [CompilerGeneratedAttribute]
private IEnumerator`1<OrderByQueryResult> <Enumerator>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TotalRequestCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryPageParameters <QueryPageParameters>k__BackingField;
    public IEnumerator`1<OrderByQueryResult> Enumerator { get; }
    public int Count { get; }
    public double TotalRequestCharge { get; }
    public QueryPageParameters QueryPageParameters { get; }
    public BufferedOrderByResults(IEnumerator`1<OrderByQueryResult> enumerator, int itemCount, double totalRequestCharge, QueryPageParameters queryPageParameters);
    [CompilerGeneratedAttribute]
public IEnumerator`1<OrderByQueryResult> get_Enumerator();
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public double get_TotalRequestCharge();
    [CompilerGeneratedAttribute]
public QueryPageParameters get_QueryPageParameters();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.CosmosElementToQueryLiteral : object {
    private StringBuilder stringBuilder;
    private CosmosNumberToQueryLiteral cosmosNumberToQueryLiteral;
    public CosmosElementToQueryLiteral(StringBuilder stringBuilder);
    public sealed virtual void Visit(CosmosArray cosmosArray);
    public sealed virtual void Visit(CosmosBinary cosmosBinary);
    public sealed virtual void Visit(CosmosBoolean cosmosBoolean);
    public sealed virtual void Visit(CosmosGuid cosmosGuid);
    public sealed virtual void Visit(CosmosUndefined cosmosUndefined);
    public sealed virtual void Visit(CosmosNull cosmosNull);
    public sealed virtual void Visit(CosmosNumber cosmosNumber);
    public sealed virtual void Visit(CosmosObject cosmosObject);
    public sealed virtual void Visit(CosmosString cosmosString);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.ItemComparer : object {
    public static ItemComparer Instance;
    public static MinValueItem MinValue;
    public static MaxValueItem MaxValue;
    private static ItemComparer();
    public sealed virtual int Compare(CosmosElement element1, CosmosElement element2);
    public static bool IsMinOrMax(CosmosElement obj);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.OrderByColumn : ValueType {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private SortOrder <SortOrder>k__BackingField;
    public string Expression { get; }
    public SortOrder SortOrder { get; }
    public OrderByColumn(string expression, SortOrder sortOrder);
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public SortOrder get_SortOrder();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.OrderByContinuationToken : object {
    [CompilerGeneratedAttribute]
private ParallelContinuationToken <ParallelContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<OrderByItem> <OrderByItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlQueryResumeValue> <ResumeValues>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Rid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SkipCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [JsonPropertyAttribute("compositeToken")]
public ParallelContinuationToken ParallelContinuationToken { get; }
    [JsonPropertyAttribute("orderByItems")]
public IReadOnlyList`1<OrderByItem> OrderByItems { get; }
    [JsonPropertyAttribute("resumeValues")]
public IReadOnlyList`1<SqlQueryResumeValue> ResumeValues { get; }
    [JsonPropertyAttribute("rid")]
public string Rid { get; }
    [JsonPropertyAttribute("skipCount")]
public int SkipCount { get; }
    [JsonPropertyAttribute("filter")]
public string Filter { get; }
    [JsonIgnoreAttribute]
public Range`1<string> Range { get; }
    public OrderByContinuationToken(ParallelContinuationToken compositeContinuationToken, IReadOnlyList`1<OrderByItem> orderByItems, IReadOnlyList`1<SqlQueryResumeValue> resumeValues, string rid, int skipCount, string filter);
    [CompilerGeneratedAttribute]
public ParallelContinuationToken get_ParallelContinuationToken();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<OrderByItem> get_OrderByItems();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<SqlQueryResumeValue> get_ResumeValues();
    [CompilerGeneratedAttribute]
public string get_Rid();
    [CompilerGeneratedAttribute]
public int get_SkipCount();
    [CompilerGeneratedAttribute]
public string get_Filter();
    public sealed virtual Range`1<string> get_Range();
    public static CosmosElement ToCosmosElement(OrderByContinuationToken orderByContinuationToken);
    public static TryCatch`1<OrderByContinuationToken> TryCreateFromCosmosElement(CosmosElement cosmosElement);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.OrderByCrossPartitionEnumerator : object {
    private PriorityQueue`1<IEnumerator`1<OrderByQueryResult>> queue;
    private bool started;
    public OrderByQueryResult Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    private OrderByCrossPartitionEnumerator(PriorityQueue`1<IEnumerator`1<OrderByQueryResult>> queue);
    public sealed virtual OrderByQueryResult get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.OrderByCrossPartitionEnumerator/<CreateAsync>d__7")]
public static Task`1<BufferedOrderByResults> CreateAsync(ITracingAsyncEnumerator`1<TryCatch`1<OrderByQueryPage>> enumerator, IComparer`1<OrderByQueryResult> comparer, int levelSize, ITrace trace, CancellationToken cancellationToken);
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
}
internal static class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.OrderByCrossPartitionQueryPipelineStage : object {
    private static string FormatPlaceHolder;
    private static string TrueFilter;
    private static QueryState InitializingQueryState;
    private static IReadOnlyList`1<CosmosElement> EmptyPage;
    private static OrderByCrossPartitionQueryPipelineStage();
    public static TryCatch`1<IQueryPipelineStage> MonadicCreate(IDocumentContainer documentContainer, ContainerQueryProperties containerQueryProperties, SqlQuerySpec sqlQuerySpec, IReadOnlyList`1<FeedRangeEpk> targetRanges, Nullable`1<PartitionKey> partitionKey, IReadOnlyList`1<OrderByColumn> orderByColumns, QueryExecutionOptions queryPaginationOptions, int maxConcurrency, bool nonStreamingOrderBy, CosmosElement continuationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.OrderByCrossPartitionQueryPipelineStage/<MoveNextAsync_InitializeAsync_HandleSplitAsync>d__7")]
private static ValueTask MoveNextAsync_InitializeAsync_HandleSplitAsync(IDocumentContainer documentContainer, ContainerQueryProperties containerQueryProperties, Queue`1<ValueTuple`2<OrderByQueryPartitionRangePageAsyncEnumerator, OrderByContinuationToken>> uninitializedEnumeratorsAndTokens, OrderByQueryPartitionRangePageAsyncEnumerator uninitializedEnumerator, OrderByContinuationToken token, ITrace trace, CancellationToken cancellationToken);
    private static bool IsSplitException(Exception exception);
    private static OrderByContinuationToken CreateOrderByContinuationToken(ParallelContinuationToken parallelToken, OrderByQueryResult orderByQueryResult, int skipCount, string filter);
    private static bool ContainsSupportedResumeTypes(IReadOnlyList`1<OrderByItem> orderByItems);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.OrderByEnumeratorComparer : object {
    private OrderByQueryResultComparer comparer;
    public OrderByEnumeratorComparer(IReadOnlyList`1<SortOrder> sortOrders);
    public sealed virtual int Compare(OrderByQueryPartitionRangePageAsyncEnumerator enumerator1, OrderByQueryPartitionRangePageAsyncEnumerator enumerator2);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.OrderByItem : ValueType {
    private static string ItemName;
    private CosmosObject cosmosObject;
    public CosmosElement Item { get; }
    public OrderByItem(CosmosElement cosmosElement);
    public CosmosElement get_Item();
    public static CosmosElement ToCosmosElement(OrderByItem orderByItem);
    public static OrderByItem FromCosmosElement(CosmosElement cosmosElement);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.OrderByQueryPage : Page`1<QueryState> {
    private static ImmutableHashSet`1<string> bannedHeaders;
    [CompilerGeneratedAttribute]
private QueryPage <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerator`1<CosmosElement> <Enumerator>k__BackingField;
    public QueryPage Page { get; }
    public IEnumerator`1<CosmosElement> Enumerator { get; }
    public int ItemCount { get; }
    protected ImmutableHashSet`1<string> DerivedClassBannedHeaders { get; }
    public OrderByQueryPage(QueryPage queryPage);
    private static OrderByQueryPage();
    [CompilerGeneratedAttribute]
public QueryPage get_Page();
    [CompilerGeneratedAttribute]
public IEnumerator`1<CosmosElement> get_Enumerator();
    public virtual int get_ItemCount();
    protected virtual ImmutableHashSet`1<string> get_DerivedClassBannedHeaders();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.OrderByQueryPartitionRangePageAsyncEnumerator : PartitionRangePageAsyncEnumerator`2<OrderByQueryPage, QueryState> {
    private InnerEnumerator innerEnumerator;
    private BufferedPartitionRangePageAsyncEnumeratorBase`2<OrderByQueryPage, QueryState> bufferedEnumerator;
    [CompilerGeneratedAttribute]
private QueryState <StartOfPageState>k__BackingField;
    public SqlQuerySpec SqlQuerySpec { get; }
    public QueryExecutionOptions QueryPaginationOptions { get; }
    public string Filter { get; }
    public QueryState StartOfPageState { get; private set; }
    public int BufferedResultCount { get; }
    private OrderByQueryPartitionRangePageAsyncEnumerator(InnerEnumerator innerEnumerator, BufferedPartitionRangePageAsyncEnumeratorBase`2<OrderByQueryPage, QueryState> bufferedEnumerator, FeedRangeState`1<QueryState> feedRangeState);
    public static OrderByQueryPartitionRangePageAsyncEnumerator Create(IQueryDataSource queryDataSource, ContainerQueryProperties containerQueryProperties, SqlQuerySpec sqlQuerySpec, FeedRangeState`1<QueryState> feedRangeState, Nullable`1<PartitionKey> partitionKey, QueryExecutionOptions queryPaginationOptions, string filter, PrefetchPolicy prefetchPolicy);
    public SqlQuerySpec get_SqlQuerySpec();
    public QueryExecutionOptions get_QueryPaginationOptions();
    public string get_Filter();
    [CompilerGeneratedAttribute]
public QueryState get_StartOfPageState();
    [CompilerGeneratedAttribute]
private void set_StartOfPageState(QueryState value);
    public int get_BufferedResultCount();
    public virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.OrderByQueryPartitionRangePageAsyncEnumerator/<GetNextPageAsync>d__17")]
protected virtual Task`1<TryCatch`1<OrderByQueryPage>> GetNextPageAsync(ITrace trace, CancellationToken cancellationToken);
    public sealed virtual ValueTask PrefetchAsync(ITrace trace, CancellationToken cancellationToken);
    public OrderByQueryPartitionRangePageAsyncEnumerator CloneAsFullyBufferedEnumerator();
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.OrderByQueryResult : ValueType {
    private CosmosObject cosmosObject;
    private IReadOnlyList`1<OrderByItem> orderByItems;
    public string Rid { get; }
    public IReadOnlyList`1<OrderByItem> OrderByItems { get; }
    public CosmosElement Payload { get; }
    public OrderByQueryResult(CosmosElement cosmosElement);
    public string get_Rid();
    public IReadOnlyList`1<OrderByItem> get_OrderByItems();
    public CosmosElement get_Payload();
    private static IReadOnlyList`1<OrderByItem> GetOrderByItems(CosmosObject cosmosObject);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.OrderByQueryResultComparer : object {
    private IReadOnlyList`1<SortOrder> sortOrders;
    public OrderByQueryResultComparer(IReadOnlyList`1<SortOrder> sortOrders);
    public sealed virtual int Compare(OrderByQueryResult x, OrderByQueryResult y);
    private int CompareOrderByItems(IReadOnlyList`1<OrderByItem> items1, IReadOnlyList`1<OrderByItem> items2);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.QueryPageParameters : object {
    [CompilerGeneratedAttribute]
private string <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<CosmosQueryExecutionInfo> <CosmosQueryExecutionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private DistributionPlanSpec <DistributionPlanSpec>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <AdditionalHeaders>k__BackingField;
    public string ActivityId { get; }
    public Lazy`1<CosmosQueryExecutionInfo> CosmosQueryExecutionInfo { get; }
    public DistributionPlanSpec DistributionPlanSpec { get; }
    public IReadOnlyDictionary`2<string, string> AdditionalHeaders { get; }
    public QueryPageParameters(string activityId, Lazy`1<CosmosQueryExecutionInfo> cosmosQueryExecutionInfo, DistributionPlanSpec distributionPlanSpec, IReadOnlyDictionary`2<string, string> additionalHeaders);
    [CompilerGeneratedAttribute]
public string get_ActivityId();
    [CompilerGeneratedAttribute]
public Lazy`1<CosmosQueryExecutionInfo> get_CosmosQueryExecutionInfo();
    [CompilerGeneratedAttribute]
public DistributionPlanSpec get_DistributionPlanSpec();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_AdditionalHeaders();
}
internal enum Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.OrderBy.SortOrder : Enum {
    public int value__;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.Parallel.ParallelContinuationToken : object {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private Range`1<string> <Range>k__BackingField;
    public string Token { get; }
    public Range`1<string> Range { get; }
    public ParallelContinuationToken(string token, Range`1<string> range);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public sealed virtual Range`1<string> get_Range();
    public static CosmosElement ToCosmosElement(ParallelContinuationToken parallelContinuationToken);
    public static TryCatch`1<ParallelContinuationToken> TryCreateFromCosmosElement(CosmosElement cosmosElement);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.Parallel.ParallelCrossPartitionQueryPipelineStage : object {
    private CrossPartitionRangePageAsyncEnumerator`2<QueryPage, QueryState> crossPartitionRangePageAsyncEnumerator;
    [CompilerGeneratedAttribute]
private TryCatch`1<QueryPage> <Current>k__BackingField;
    public TryCatch`1<QueryPage> Current { get; private set; }
    private ParallelCrossPartitionQueryPipelineStage(CrossPartitionRangePageAsyncEnumerator`2<QueryPage, QueryState> crossPartitionRangePageAsyncEnumerator);
    [CompilerGeneratedAttribute]
public sealed virtual TryCatch`1<QueryPage> get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(TryCatch`1<QueryPage> value);
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.Parallel.ParallelCrossPartitionQueryPipelineStage/<MoveNextAsync>d__7")]
public sealed virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
    public static TryCatch`1<IQueryPipelineStage> MonadicCreate(IDocumentContainer documentContainer, SqlQuerySpec sqlQuerySpec, IReadOnlyList`1<FeedRangeEpk> targetRanges, Nullable`1<PartitionKey> partitionKey, QueryExecutionOptions queryPaginationOptions, ContainerQueryProperties containerQueryProperties, int maxConcurrency, PrefetchPolicy prefetchPolicy, CosmosElement continuationToken);
    private static TryCatch`1<CrossFeedRangeState`1<QueryState>> MonadicExtractState(CosmosElement continuationToken, IReadOnlyList`1<FeedRangeEpk> ranges);
    private static CreatePartitionRangePageAsyncEnumerator`2<QueryPage, QueryState> MakeCreateFunction(IQueryDataSource queryDataSource, SqlQuerySpec sqlQuerySpec, QueryExecutionOptions queryPaginationOptions, Nullable`1<PartitionKey> partitionKey, ContainerQueryProperties containerQueryProperties);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.Parallel.PartitionKeyRangeComparer : object {
    public static PartitionKeyRangeComparer Singleton;
    private static PartitionKeyRangeComparer();
    public sealed virtual int Compare(PartitionKeyRange x, PartitionKeyRange y);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.Parallel.QueryPartitionRangePageAsyncEnumerator : PartitionRangePageAsyncEnumerator`2<QueryPage, QueryState> {
    private IQueryDataSource queryDataSource;
    private SqlQuerySpec sqlQuerySpec;
    private QueryExecutionOptions queryPaginationOptions;
    private ContainerQueryProperties containerQueryProperties;
    private Nullable`1<PartitionKey> partitionKey;
    public QueryPartitionRangePageAsyncEnumerator(IQueryDataSource queryDataSource, SqlQuerySpec sqlQuerySpec, FeedRangeState`1<QueryState> feedRangeState, Nullable`1<PartitionKey> partitionKey, QueryExecutionOptions queryPaginationOptions, ContainerQueryProperties containerQueryProperties);
    public virtual ValueTask DisposeAsync();
    protected virtual Task`1<TryCatch`1<QueryPage>> GetNextPageAsync(ITrace trace, CancellationToken cancellationToken);
}
internal static class Microsoft.Azure.Cosmos.Query.Core.Pipeline.CrossPartition.PartitionMapper : object {
    public static TryCatch`1<PartitionMapping`1<PartitionedToken>> MonadicGetPartitionMapping(IReadOnlyList`1<FeedRangeEpk> feedRanges, IReadOnlyList`1<PartitionedToken> tokens);
    public static TryCatch`1<PartitionMapping`1<PartitionedToken>> MonadicGetPartitionMapping(FeedRangeEpk feedRange, PartitionedToken token);
    private static List`1<FeedRangeEpk> MergeRangesWherePossible(IReadOnlyList`1<FeedRangeEpk> feedRanges);
    private static List`1<ValueTuple`2<FeedRangeEpk, PartitionedToken>> SplitRangesBasedOffContinuationToken(IReadOnlyList`1<FeedRangeEpk> feedRanges, IReadOnlyList`1<PartitionedToken> tokens);
    private static FeedRangeEpk GetTargetFeedRange(IReadOnlyList`1<PartitionedToken> tokens);
    private static TryCatch`1<PartitionMapping`1<PartitionedToken>> MonadicConstructPartitionMapping(IReadOnlyList`1<ValueTuple`2<FeedRangeEpk, PartitionedToken>> splitRangesAndTokens, IReadOnlyList`1<PartitionedToken> tokens, FeedRangeEpk targetRange);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<FeedRangeEpk, PartitionedToken> <MonadicConstructPartitionMapping>g__CreateMappingFromTuples|5_1(ReadOnlySpan`1<ValueTuple`2<FeedRangeEpk, PartitionedToken>> rangeAndTokens);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.DCount.DCountQueryPipelineStage : QueryPipelineStageBase {
    private DCountInfo info;
    private long count;
    protected bool returnedFinalPage;
    public DCountQueryPipelineStage(IQueryPipelineStage source, long count, DCountInfo info);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.DCount.DCountQueryPipelineStage/<MoveNextAsync>d__4")]
public virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
    public static TryCatch`1<IQueryPipelineStage> MonadicCreate(DCountInfo info, CosmosElement continuationToken, MonadicCreatePipelineStage monadicCreatePipelineStage);
    protected CosmosElement GetFinalResult();
}
internal static class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Distinct.DistinctHash : object {
    private static UInt128 RootHashSeed;
    private static DistinctHash();
    public static UInt128 GetHash(CosmosElement cosmosElement);
    private static UInt128 GetHash(CosmosElement cosmosElement, UInt128 seed);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Distinct.DistinctMap : object {
    public static TryCatch`1<DistinctMap> TryCreate(DistinctQueryType distinctQueryType, CosmosElement distinctMapContinuationToken);
    public abstract virtual bool Add(CosmosElement cosmosElement, UInt128& hash);
    public abstract virtual string GetContinuationToken();
    public abstract virtual CosmosElement GetCosmosElementContinuationToken();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Distinct.DistinctQueryPipelineStage : QueryPipelineStageBase {
    private static string DisallowContinuationTokenMessage;
    private DistinctQueryType distinctQueryType;
    private DistinctMap distinctMap;
    private DistinctQueryPipelineStage(DistinctQueryType distinctQueryType, DistinctMap distinctMap, IQueryPipelineStage source);
    private static DistinctQueryPipelineStage();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.Distinct.DistinctQueryPipelineStage/<MoveNextAsync>d__4")]
public virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
    public static TryCatch`1<IQueryPipelineStage> MonadicCreate(CosmosElement requestContinuation, MonadicCreatePipelineStage monadicCreatePipelineStage, DistinctQueryType distinctQueryType);
}
internal enum Microsoft.Azure.Cosmos.Query.Core.Pipeline.Distinct.DistinctQueryType : Enum {
    public int value__;
    public static DistinctQueryType None;
    public static DistinctQueryType Unordered;
    public static DistinctQueryType Ordered;
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.DistributedQueryPipelineStage : object {
    private IDocumentContainer documentContainer;
    private SqlQuerySpec sqlQuerySpec;
    private FeedRangeInternal feedRangeInternal;
    private Nullable`1<PartitionKey> partitionKey;
    private QueryExecutionOptions queryPaginationOptions;
    private ContinuationToken continuationToken;
    private bool started;
    [CompilerGeneratedAttribute]
private TryCatch`1<QueryPage> <Current>k__BackingField;
    public TryCatch`1<QueryPage> Current { get; private set; }
    private DistributedQueryPipelineStage(IDocumentContainer documentContainer, SqlQuerySpec sqlQuerySpec, FeedRangeInternal feedRangeInternal, Nullable`1<PartitionKey> partitionKey, QueryExecutionOptions queryPaginationOptions, ContinuationToken continuationToken);
    [CompilerGeneratedAttribute]
public sealed virtual TryCatch`1<QueryPage> get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(TryCatch`1<QueryPage> value);
    public static TryCatch`1<IQueryPipelineStage> MonadicCreate(IDocumentContainer documentContainer, SqlQuerySpec sqlQuerySpec, FeedRangeInternal feedRangeInternal, Nullable`1<PartitionKey> partitionKey, QueryExecutionOptions queryPaginationOptions, CosmosElement continuation);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.DistributedQueryPipelineStage/<MoveNextAsync>d__13")]
public sealed virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
    public sealed virtual ValueTask DisposeAsync();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.EmptyQueryPipelineStage : object {
    public static EmptyQueryPipelineStage Singleton;
    private EmptyAsyncEnumerator`1<TryCatch`1<QueryPage>> emptyAsyncEnumerator;
    public TryCatch`1<QueryPage> Current { get; }
    private static EmptyQueryPipelineStage();
    public sealed virtual TryCatch`1<QueryPage> get_Current();
    public sealed virtual ValueTask DisposeAsync();
    public sealed virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.FaultedQueryPipelineStage : object {
    private JustAsyncEnumerator`1<TryCatch`1<QueryPage>> justAsyncEnumerator;
    public TryCatch`1<QueryPage> Current { get; }
    public FaultedQueryPipelineStage(Exception exception);
    public sealed virtual TryCatch`1<QueryPage> get_Current();
    public sealed virtual ValueTask DisposeAsync();
    public sealed virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.GroupBy.GroupByQueryPipelineStage : QueryPipelineStageBase {
    private static string ContinuationTokenNotSupportedWithGroupBy;
    private GroupingTable groupingTable;
    protected int pageSize;
    protected bool returnedLastPage;
    protected GroupByQueryPipelineStage(IQueryPipelineStage source, GroupingTable groupingTable, int pageSize);
    public static TryCatch`1<IQueryPipelineStage> MonadicCreate(CosmosElement requestContinuation, MonadicCreatePipelineStage monadicCreatePipelineStage, IReadOnlyList`1<AggregateOperator> aggregates, IReadOnlyDictionary`2<string, Nullable`1<AggregateOperator>> groupByAliasToAggregateType, IReadOnlyList`1<string> orderedAliases, bool hasSelectValue, int pageSize);
    protected void AggregateGroupings(IReadOnlyList`1<CosmosElement> cosmosElements);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.GroupBy.GroupByQueryPipelineStage/<MoveNextAsync>d__7")]
public virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
}
internal static class Microsoft.Azure.Cosmos.Query.Core.Pipeline.IndexUtilizationHelper : object {
    public static IReadOnlyDictionary`2<string, string> AccumulateIndexUtilization(IReadOnlyDictionary`2<string, string> cumulativeHeaders, IReadOnlyDictionary`2<string, string> currentHeaders);
}
internal interface Microsoft.Azure.Cosmos.Query.Core.Pipeline.IQueryPipelineStage {
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.LazyQueryPipelineStage : object {
    private AsyncLazy`1<TryCatch`1<IQueryPipelineStage>> lazyTryCreateStage;
    [CompilerGeneratedAttribute]
private TryCatch`1<QueryPage> <Current>k__BackingField;
    public TryCatch`1<QueryPage> Current { get; private set; }
    public LazyQueryPipelineStage(AsyncLazy`1<TryCatch`1<IQueryPipelineStage>> lazyTryCreateStage);
    [CompilerGeneratedAttribute]
public sealed virtual TryCatch`1<QueryPage> get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(TryCatch`1<QueryPage> value);
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.LazyQueryPipelineStage/<MoveNextAsync>d__7")]
public sealed virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.MonadicCreatePipelineStage : MulticastDelegate {
    public MonadicCreatePipelineStage(object object, IntPtr method);
    public virtual TryCatch`1<IQueryPipelineStage> Invoke(CosmosElement continuationToken);
    public virtual IAsyncResult BeginInvoke(CosmosElement continuationToken, AsyncCallback callback, object object);
    public virtual TryCatch`1<IQueryPipelineStage> EndInvoke(IAsyncResult result);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.NameCacheStaleRetryQueryPipelineStage : object {
    private CosmosQueryContext cosmosQueryContext;
    private Func`1<IQueryPipelineStage> queryPipelineStageFactory;
    private IQueryPipelineStage currentQueryPipelineStage;
    private bool alreadyRetried;
    [CompilerGeneratedAttribute]
private TryCatch`1<QueryPage> <Current>k__BackingField;
    public TryCatch`1<QueryPage> Current { get; private set; }
    public NameCacheStaleRetryQueryPipelineStage(CosmosQueryContext cosmosQueryContext, Func`1<IQueryPipelineStage> queryPipelineStageFactory);
    [CompilerGeneratedAttribute]
public sealed virtual TryCatch`1<QueryPage> get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(TryCatch`1<QueryPage> value);
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.NameCacheStaleRetryQueryPipelineStage/<MoveNextAsync>d__10")]
public sealed virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.OptimisticDirectExecutionQuery.OptimisticDirectExecutionContinuationToken : object {
    private static string OptimisticDirectExecutionToken;
    [CompilerGeneratedAttribute]
private ParallelContinuationToken <Token>k__BackingField;
    public ParallelContinuationToken Token { get; }
    public Range`1<string> Range { get; }
    public OptimisticDirectExecutionContinuationToken(ParallelContinuationToken token);
    [CompilerGeneratedAttribute]
public ParallelContinuationToken get_Token();
    public sealed virtual Range`1<string> get_Range();
    public static bool IsOptimisticDirectExecutionContinuationToken(CosmosElement continuationToken);
    public static CosmosElement ToCosmosElement(OptimisticDirectExecutionContinuationToken continuationToken);
    public static TryCatch`1<OptimisticDirectExecutionContinuationToken> TryCreateFromCosmosElement(CosmosElement cosmosElement);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.OptimisticDirectExecutionQuery.OptimisticDirectExecutionQueryPipelineStage : object {
    private static string OptimisticDirectExecutionToken;
    private FallbackQueryPipelineStageFactory queryPipelineStageFactory;
    private TryCatch`1<IQueryPipelineStage> inner;
    private CosmosElement continuationToken;
    private ExecutionState executionState;
    private Nullable`1<bool> previousRequiresDistribution;
    public TryCatch`1<QueryPage> Current { get; }
    private OptimisticDirectExecutionQueryPipelineStage(TryCatch`1<IQueryPipelineStage> inner, FallbackQueryPipelineStageFactory queryPipelineStageFactory, CosmosElement continuationToken);
    public sealed virtual TryCatch`1<QueryPage> get_Current();
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.OptimisticDirectExecutionQuery.OptimisticDirectExecutionQueryPipelineStage/<MoveNextAsync>d__12")]
public sealed virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
    private static CosmosElement UnwrapContinuationToken(CosmosElement continuationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.OptimisticDirectExecutionQuery.OptimisticDirectExecutionQueryPipelineStage/<SwitchToFallbackPipelineAsync>d__14")]
private Task`1<bool> SwitchToFallbackPipelineAsync(CosmosElement continuationToken, ITrace trace, CancellationToken cancellationToken);
    public static TryCatch`1<IQueryPipelineStage> MonadicCreate(DocumentContainer documentContainer, InputParameters inputParameters, FeedRangeEpk targetRange, ContainerQueryProperties containerQueryProperties, FallbackQueryPipelineStageFactory fallbackQueryPipelineStageFactory, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Cosmos.Query.Core.Pipeline.Pagination.IMonadicQueryDataSource {
    public abstract virtual Task`1<TryCatch`1<QueryPage>> MonadicQueryAsync(SqlQuerySpec sqlQuerySpec, FeedRangeState`1<QueryState> feedRangeState, QueryExecutionOptions queryPaginationOptions, ITrace trace, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Cosmos.Query.Core.Pipeline.Pagination.IQueryDataSource {
    public abstract virtual Task`1<QueryPage> QueryAsync(SqlQuerySpec sqlQuerySpec, FeedRangeState`1<QueryState> feedRangeState, QueryExecutionOptions queryPaginationOptions, ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Pagination.QueryExecutionOptions : ExecutionOptions {
    public static QueryExecutionOptions Default;
    public static ImmutableHashSet`1<string> BannedHeaders;
    [CompilerGeneratedAttribute]
private bool <OptimisticDirectExecute>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDistributedQueryGatewayMode>k__BackingField;
    public bool OptimisticDirectExecute { get; }
    public bool EnableDistributedQueryGatewayMode { get; }
    protected ImmutableHashSet`1<string> BannedAdditionalHeaders { get; }
    public QueryExecutionOptions(Nullable`1<int> pageSizeHint, IReadOnlyDictionary`2<string, string> additionalHeaders, bool optimisticDirectExecute, bool enableDistributedQueryGatewayMode);
    private static QueryExecutionOptions();
    [CompilerGeneratedAttribute]
public bool get_OptimisticDirectExecute();
    [CompilerGeneratedAttribute]
public bool get_EnableDistributedQueryGatewayMode();
    protected virtual ImmutableHashSet`1<string> get_BannedAdditionalHeaders();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Pagination.QueryPage : Page`1<QueryState> {
    public static ImmutableHashSet`1<string> BannedHeaders;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CosmosElement> <Documents>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<CosmosQueryExecutionInfo> <CosmosQueryExecutionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private DistributionPlanSpec <DistributionPlanSpec>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisallowContinuationTokenMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Streaming>k__BackingField;
    public IReadOnlyList`1<CosmosElement> Documents { get; }
    public Lazy`1<CosmosQueryExecutionInfo> CosmosQueryExecutionInfo { get; }
    public DistributionPlanSpec DistributionPlanSpec { get; }
    public string DisallowContinuationTokenMessage { get; }
    public Nullable`1<bool> Streaming { get; }
    public int ItemCount { get; }
    protected ImmutableHashSet`1<string> DerivedClassBannedHeaders { get; }
    public QueryPage(IReadOnlyList`1<CosmosElement> documents, double requestCharge, string activityId, Lazy`1<CosmosQueryExecutionInfo> cosmosQueryExecutionInfo, DistributionPlanSpec distributionPlanSpec, string disallowContinuationTokenMessage, IReadOnlyDictionary`2<string, string> additionalHeaders, QueryState state, Nullable`1<bool> streaming);
    private static QueryPage();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<CosmosElement> get_Documents();
    [CompilerGeneratedAttribute]
public Lazy`1<CosmosQueryExecutionInfo> get_CosmosQueryExecutionInfo();
    [CompilerGeneratedAttribute]
public DistributionPlanSpec get_DistributionPlanSpec();
    [CompilerGeneratedAttribute]
public string get_DisallowContinuationTokenMessage();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Streaming();
    public virtual int get_ItemCount();
    protected virtual ImmutableHashSet`1<string> get_DerivedClassBannedHeaders();
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Pagination.QueryState : State {
    [CompilerGeneratedAttribute]
private CosmosElement <Value>k__BackingField;
    public CosmosElement Value { get; }
    public QueryState(CosmosElement value);
    [CompilerGeneratedAttribute]
public CosmosElement get_Value();
}
internal static class Microsoft.Azure.Cosmos.Query.Core.Pipeline.PipelineFactory : object {
    public static TryCatch`1<IQueryPipelineStage> MonadicCreate(IDocumentContainer documentContainer, SqlQuerySpec sqlQuerySpec, IReadOnlyList`1<FeedRangeEpk> targetRanges, Nullable`1<PartitionKey> partitionKey, QueryInfo queryInfo, QueryExecutionOptions queryPaginationOptions, ContainerQueryProperties containerQueryProperties, int maxConcurrency, CosmosElement requestContinuationToken);
    private static PrefetchPolicy DeterminePrefetchPolicy(QueryInfo queryInfo);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.Pipeline.QueryPipelineStageBase : object {
    protected IQueryPipelineStage inputStage;
    [CompilerGeneratedAttribute]
private TryCatch`1<QueryPage> <Current>k__BackingField;
    public TryCatch`1<QueryPage> Current { get; protected set; }
    protected QueryPipelineStageBase(IQueryPipelineStage inputStage);
    [CompilerGeneratedAttribute]
public sealed virtual TryCatch`1<QueryPage> get_Current();
    [CompilerGeneratedAttribute]
protected void set_Current(TryCatch`1<QueryPage> value);
    public sealed virtual ValueTask DisposeAsync();
    public abstract virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Skip.SkipQueryPipelineStage : QueryPipelineStageBase {
    private int skipCount;
    protected SkipQueryPipelineStage(IQueryPipelineStage source, long skipCount);
    public static TryCatch`1<IQueryPipelineStage> MonadicCreate(int offsetCount, CosmosElement continuationToken, MonadicCreatePipelineStage monadicCreatePipelineStage);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.SkipEmptyPageQueryPipelineStage : object {
    private static IReadOnlyList`1<CosmosElement> EmptyPage;
    private IQueryPipelineStage inputStage;
    private double cumulativeRequestCharge;
    private IReadOnlyDictionary`2<string, string> cumulativeAdditionalHeaders;
    private bool returnedFinalStats;
    [CompilerGeneratedAttribute]
private TryCatch`1<QueryPage> <Current>k__BackingField;
    public TryCatch`1<QueryPage> Current { get; private set; }
    public SkipEmptyPageQueryPipelineStage(IQueryPipelineStage inputStage);
    private static SkipEmptyPageQueryPipelineStage();
    [CompilerGeneratedAttribute]
public sealed virtual TryCatch`1<QueryPage> get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(TryCatch`1<QueryPage> value);
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.Pipeline.SkipEmptyPageQueryPipelineStage/<MoveNextAsync>d__11")]
public sealed virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Take.TakeQueryPipelineStage : QueryPipelineStageBase {
    private int takeCount;
    private bool ReturnedFinalPage { get; }
    protected TakeQueryPipelineStage(IQueryPipelineStage source, int takeCount);
    private bool get_ReturnedFinalPage();
    public static TryCatch`1<IQueryPipelineStage> MonadicCreateLimitStage(int limitCount, CosmosElement requestContinuationToken, MonadicCreatePipelineStage monadicCreatePipelineStage);
    public static TryCatch`1<IQueryPipelineStage> MonadicCreateTopStage(int limitCount, CosmosElement requestContinuationToken, MonadicCreatePipelineStage monadicCreatePipelineStage);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Tokens.PipelineContinuationToken : object {
    protected static string VersionPropertyName;
    private static Version CurrentVersion;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    public Version Version { get; }
    protected PipelineContinuationToken(Version version);
    private static PipelineContinuationToken();
    [CompilerGeneratedAttribute]
public Version get_Version();
    public static bool TryCreateFromCosmosElement(CosmosElement cosmosElement, PipelineContinuationToken& pipelineContinuationToken);
    public static bool TryConvertToLatest(PipelineContinuationToken pipelinedContinuationToken, PipelineContinuationTokenV1_1& pipelineContinuationTokenV1_1);
    public static bool IsTokenFromTheFuture(PipelineContinuationToken versionedContinuationToken);
    protected static bool TryParseVersion(CosmosObject parsedVersionedContinuationToken, Version& version);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Tokens.PipelineContinuationTokenV0 : PipelineContinuationToken {
    public static Version VersionNumber;
    [CompilerGeneratedAttribute]
private CosmosElement <SourceContinuationToken>k__BackingField;
    public CosmosElement SourceContinuationToken { get; }
    public PipelineContinuationTokenV0(CosmosElement sourceContinuationToken);
    private static PipelineContinuationTokenV0();
    [CompilerGeneratedAttribute]
public CosmosElement get_SourceContinuationToken();
    public virtual string ToString();
    public static bool TryCreateFromCosmosElement(CosmosElement cosmosElement, PipelineContinuationTokenV0& pipelineContinuationTokenV0);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Tokens.PipelineContinuationTokenV1 : PipelineContinuationToken {
    public static Version VersionNumber;
    private static string SourceContinuationTokenPropertyName;
    [CompilerGeneratedAttribute]
private CosmosElement <SourceContinuationToken>k__BackingField;
    public CosmosElement SourceContinuationToken { get; }
    public PipelineContinuationTokenV1(CosmosElement sourceContinuationToken);
    private static PipelineContinuationTokenV1();
    [CompilerGeneratedAttribute]
public CosmosElement get_SourceContinuationToken();
    public virtual string ToString();
    public static bool TryCreateFromCosmosElement(CosmosObject parsedContinuationToken, PipelineContinuationTokenV1& pipelinedContinuationTokenV1);
    public static PipelineContinuationTokenV1 CreateFromV0Token(PipelineContinuationTokenV0 pipelinedContinuationTokenV0);
}
internal class Microsoft.Azure.Cosmos.Query.Core.Pipeline.Tokens.PipelineContinuationTokenV1_1 : PipelineContinuationToken {
    public static Version VersionNumber;
    private static string SourceContinuationTokenPropertyName;
    private static string QueryPlanPropertyName;
    [CompilerGeneratedAttribute]
private CosmosElement <SourceContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionedQueryExecutionInfo <QueryPlan>k__BackingField;
    public CosmosElement SourceContinuationToken { get; }
    public PartitionedQueryExecutionInfo QueryPlan { get; }
    public PipelineContinuationTokenV1_1(PartitionedQueryExecutionInfo queryPlan, CosmosElement sourceContinuationToken);
    private static PipelineContinuationTokenV1_1();
    [CompilerGeneratedAttribute]
public CosmosElement get_SourceContinuationToken();
    [CompilerGeneratedAttribute]
public PartitionedQueryExecutionInfo get_QueryPlan();
    public virtual string ToString();
    public string ToString(int lengthLimitInBytes);
    public static bool TryCreateFromCosmosElement(CosmosObject parsedContinuationToken, PipelineContinuationTokenV1_1& pipelinedContinuationToken);
    private static bool TryParseQueryPlan(CosmosObject parsedContinuationToken, PartitionedQueryExecutionInfo& queryPlan);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.QueryClient.ContainerQueryProperties : ValueType {
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Range`1<string>> <EffectiveRangesForPartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionKeyDefinition <PartitionKeyDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private VectorEmbeddingPolicy <VectorEmbeddingPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private GeospatialType <GeospatialType>k__BackingField;
    public string ResourceId { get; }
    public IReadOnlyList`1<Range`1<string>> EffectiveRangesForPartitionKey { get; }
    public PartitionKeyDefinition PartitionKeyDefinition { get; }
    public VectorEmbeddingPolicy VectorEmbeddingPolicy { get; }
    public GeospatialType GeospatialType { get; }
    public ContainerQueryProperties(string resourceId, IReadOnlyList`1<Range`1<string>> effectivePartitionKeyRanges, PartitionKeyDefinition partitionKeyDefinition, VectorEmbeddingPolicy vectorEmbeddingPolicy, GeospatialType geospatialType);
    [CompilerGeneratedAttribute]
public string get_ResourceId();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Range`1<string>> get_EffectiveRangesForPartitionKey();
    [CompilerGeneratedAttribute]
public PartitionKeyDefinition get_PartitionKeyDefinition();
    [CompilerGeneratedAttribute]
public VectorEmbeddingPolicy get_VectorEmbeddingPolicy();
    [CompilerGeneratedAttribute]
public GeospatialType get_GeospatialType();
}
internal class Microsoft.Azure.Cosmos.Query.Core.QueryClient.CosmosDistributedQueryClient : object {
    private CosmosClientContext cosmosClientContext;
    private string containerLink;
    private Guid correlatedActivityId;
    private DocumentClient DocumentClient { get; }
    private IDocumentClientRetryPolicy RetryPolicy { get; }
    public CosmosDistributedQueryClient(CosmosClientContext cosmosClientContext, string containerLink, Guid correlatedActivityId);
    private DocumentClient get_DocumentClient();
    private IDocumentClientRetryPolicy get_RetryPolicy();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.QueryClient.CosmosDistributedQueryClient/<MonadicQueryAsync>d__8")]
public sealed virtual Task`1<TryCatch`1<QueryPage>> MonadicQueryAsync(Nullable`1<PartitionKey> partitionKey, FeedRangeInternal feedRange, SqlQuerySpec sqlQuerySpec, string continuationToken, QueryExecutionOptions queryPaginationOptions, ITrace trace, CancellationToken cancellationToken);
    private DocumentServiceRequest CreateRequest(SqlQuerySpec sqlQuerySpec, Nullable`1<PartitionKey> partitionKey, FeedRangeInternal feedRange, string continuationToken, QueryExecutionOptions queryPaginationOptions, ITrace trace);
    private static TryCatch`1<QueryPage> CreatePage(DocumentServiceResponse response, ITrace trace);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.QueryClient.CosmosQueryClient : object {
    public Action`1<IQueryable> OnExecuteScalarQueryCallback { get; }
    public abstract virtual Action`1<IQueryable> get_OnExecuteScalarQueryCallback();
    public abstract virtual Task`1<ContainerQueryProperties> GetCachedContainerQueryPropertiesAsync(string containerLink, Nullable`1<PartitionKey> partitionKey, ITrace trace, CancellationToken cancellationToken);
    public abstract virtual Task`1<IReadOnlyList`1<PartitionKeyRange>> TryGetOverlappingRangesAsync(string collectionResourceId, Range`1<string> range, bool forceRefresh);
    public abstract virtual Task`1<TryCatch`1<PartitionedQueryExecutionInfo>> TryGetPartitionedQueryExecutionInfoAsync(SqlQuerySpec sqlQuerySpec, ResourceType resourceType, PartitionKeyDefinition partitionKeyDefinition, VectorEmbeddingPolicy vectorEmbeddingPolicy, bool requireFormattableOrderByQuery, bool isContinuationExpected, bool allowNonValueAggregateQuery, bool hasLogicalPartitionKey, bool allowDCount, bool useSystemPrefix, GeospatialType geospatialType, CancellationToken cancellationToken);
    public abstract virtual Task`1<TryCatch`1<QueryPage>> ExecuteItemQueryAsync(string resourceUri, ResourceType resourceType, OperationType operationType, FeedRange feedRange, QueryRequestOptions requestOptions, AdditionalRequestHeaders additionalRequestHeaders, SqlQuerySpec sqlQuerySpec, string continuationToken, int pageSize, ITrace trace, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> GetClientDisableOptimisticDirectExecutionAsync();
    public abstract virtual Task`1<PartitionedQueryExecutionInfo> ExecuteQueryPlanRequestAsync(string resourceUri, ResourceType resourceType, OperationType operationType, SqlQuerySpec sqlQuerySpec, Nullable`1<PartitionKey> partitionKey, string supportedQueryFeatures, Guid clientQueryCorrelationId, ITrace trace, CancellationToken cancellationToken);
    public abstract virtual void ClearSessionTokenCache(string collectionFullName);
    public abstract virtual Task`1<List`1<PartitionKeyRange>> GetTargetPartitionKeyRangeByFeedRangeAsync(string resourceLink, string collectionResourceId, PartitionKeyDefinition partitionKeyDefinition, FeedRangeInternal feedRangeInternal, bool forceRefresh, ITrace trace);
    public abstract virtual Task`1<List`1<PartitionKeyRange>> GetTargetPartitionKeyRangesAsync(string resourceLink, string collectionResourceId, IReadOnlyList`1<Range`1<string>> providedRanges, bool forceRefresh, ITrace trace);
    public abstract virtual bool BypassQueryParsing();
    public abstract virtual Task ForceRefreshCollectionCacheAsync(string collectionLink, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.Query.Core.QueryClient.CosmosQueryContext : object {
    [CompilerGeneratedAttribute]
private CosmosQueryClient <QueryClient>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceType <ResourceTypeEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationType <OperationTypeEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContinuationExpected>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowNonValueAggregateQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceLink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CorrelatedActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSystemPrefix>k__BackingField;
    public CosmosQueryClient QueryClient { get; }
    public ResourceType ResourceTypeEnum { get; }
    public OperationType OperationTypeEnum { get; }
    public Type ResourceType { get; }
    public bool IsContinuationExpected { get; }
    public bool AllowNonValueAggregateQuery { get; }
    public string ResourceLink { get; }
    public string ContainerResourceId { get; public set; }
    public Guid CorrelatedActivityId { get; }
    public bool UseSystemPrefix { get; }
    public CosmosQueryContext(CosmosQueryClient client, ResourceType resourceTypeEnum, OperationType operationType, Type resourceType, string resourceLink, Guid correlatedActivityId, bool isContinuationExpected, bool allowNonValueAggregateQuery, bool useSystemPrefix, string containerResourceId);
    [CompilerGeneratedAttribute]
public virtual CosmosQueryClient get_QueryClient();
    [CompilerGeneratedAttribute]
public virtual ResourceType get_ResourceTypeEnum();
    [CompilerGeneratedAttribute]
public virtual OperationType get_OperationTypeEnum();
    [CompilerGeneratedAttribute]
public virtual Type get_ResourceType();
    [CompilerGeneratedAttribute]
public virtual bool get_IsContinuationExpected();
    [CompilerGeneratedAttribute]
public virtual bool get_AllowNonValueAggregateQuery();
    [CompilerGeneratedAttribute]
public virtual string get_ResourceLink();
    [CompilerGeneratedAttribute]
public virtual string get_ContainerResourceId();
    [CompilerGeneratedAttribute]
public virtual void set_ContainerResourceId(string value);
    [CompilerGeneratedAttribute]
public virtual Guid get_CorrelatedActivityId();
    [CompilerGeneratedAttribute]
public virtual bool get_UseSystemPrefix();
    internal abstract virtual Task`1<TryCatch`1<QueryPage>> ExecuteQueryAsync(SqlQuerySpec querySpecForInit, QueryRequestOptions queryRequestOptions, string continuationToken, FeedRange feedRange, bool isContinuationExpected, int pageSize, ITrace trace, CancellationToken cancellationToken);
    internal abstract virtual Task`1<PartitionedQueryExecutionInfo> ExecuteQueryPlanRequestAsync(string resourceUri, ResourceType resourceType, OperationType operationType, SqlQuerySpec sqlQuerySpec, Nullable`1<PartitionKey> partitionKey, string supportedQueryFeatures, ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Query.Core.QueryClient.CosmosQueryExecutionInfo : object {
    [CompilerGeneratedAttribute]
private bool <ReverseRidEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReverseIndexScan>k__BackingField;
    [JsonPropertyAttribute("reverseRidEnabled")]
public bool ReverseRidEnabled { get; }
    [JsonPropertyAttribute("reverseIndexScan")]
public bool ReverseIndexScan { get; }
    [JsonConstructorAttribute]
public CosmosQueryExecutionInfo(bool reverseRidEnabled, bool reverseIndexScan);
    [CompilerGeneratedAttribute]
public bool get_ReverseRidEnabled();
    [CompilerGeneratedAttribute]
public bool get_ReverseIndexScan();
}
internal interface Microsoft.Azure.Cosmos.Query.Core.QueryClient.ICosmosDistributedQueryClient {
    public abstract virtual Task`1<TryCatch`1<QueryPage>> MonadicQueryAsync(Nullable`1<PartitionKey> partitionKey, FeedRangeInternal feedRange, SqlQuerySpec sqlQuerySpec, string continuationToken, QueryExecutionOptions queryPaginationOptions, ITrace trace, CancellationToken cancellationToken);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.QueryClient.QueryResponseCore : ValueType {
    private static IReadOnlyList`1<CosmosElement> EmptyList;
    internal static string EmptyGuidString;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CosmosElement> <CosmosElements>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosException <CosmosException>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SubStatusCodes> <SubStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisallowContinuationTokenMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RequestCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ResponseLengthBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosQueryExecutionInfo <CosmosQueryExecutionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    internal IReadOnlyList`1<CosmosElement> CosmosElements { get; }
    internal CosmosException CosmosException { get; }
    internal Nullable`1<SubStatusCodes> SubStatusCode { get; }
    internal HttpStatusCode StatusCode { get; }
    internal string DisallowContinuationTokenMessage { get; }
    internal string ContinuationToken { get; }
    internal double RequestCharge { get; }
    internal string ActivityId { get; }
    internal long ResponseLengthBytes { get; }
    internal CosmosQueryExecutionInfo CosmosQueryExecutionInfo { get; }
    internal bool IsSuccess { get; }
    private QueryResponseCore(IReadOnlyList`1<CosmosElement> result, bool isSuccess, HttpStatusCode statusCode, double requestCharge, string activityId, long responseLengthBytes, string disallowContinuationTokenMessage, string continuationToken, CosmosException cosmosException, Nullable`1<SubStatusCodes> subStatusCode, CosmosQueryExecutionInfo cosmosQueryExecutionInfo);
    private static QueryResponseCore();
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<CosmosElement> get_CosmosElements();
    [CompilerGeneratedAttribute]
internal CosmosException get_CosmosException();
    [CompilerGeneratedAttribute]
internal Nullable`1<SubStatusCodes> get_SubStatusCode();
    [CompilerGeneratedAttribute]
internal HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
internal string get_DisallowContinuationTokenMessage();
    [CompilerGeneratedAttribute]
internal string get_ContinuationToken();
    [CompilerGeneratedAttribute]
internal double get_RequestCharge();
    [CompilerGeneratedAttribute]
internal string get_ActivityId();
    [CompilerGeneratedAttribute]
internal long get_ResponseLengthBytes();
    [CompilerGeneratedAttribute]
internal CosmosQueryExecutionInfo get_CosmosQueryExecutionInfo();
    [CompilerGeneratedAttribute]
internal bool get_IsSuccess();
    internal static QueryResponseCore CreateSuccess(IReadOnlyList`1<CosmosElement> result, double requestCharge, string activityId, long responseLengthBytes, string disallowContinuationTokenMessage, string continuationToken, CosmosQueryExecutionInfo cosmosQueryExecutionInfo);
    internal static QueryResponseCore CreateFailure(HttpStatusCode statusCode, Nullable`1<SubStatusCodes> subStatusCodes, CosmosException cosmosException, double requestCharge, string activityId);
}
[JsonObjectAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.QueryPlan.DCountInfo : object {
    [CompilerGeneratedAttribute]
private string <DCountAlias>k__BackingField;
    [JsonPropertyAttribute("dCountAlias")]
public string DCountAlias { get; public set; }
    public bool IsValueAggregate { get; }
    [CompilerGeneratedAttribute]
public string get_DCountAlias();
    [CompilerGeneratedAttribute]
public void set_DCountAlias(string value);
    public bool get_IsValueAggregate();
}
internal class Microsoft.Azure.Cosmos.Query.Core.QueryPlan.PartitionedQueryExecutionInfo : object {
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryInfo <QueryInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Range`1<string>> <QueryRanges>k__BackingField;
    [JsonPropertyAttribute("partitionedQueryExecutionInfoVersion")]
public int Version { get; private set; }
    [JsonPropertyAttribute("queryInfo")]
public QueryInfo QueryInfo { get; public set; }
    [JsonPropertyAttribute("queryRanges")]
public List`1<Range`1<string>> QueryRanges { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(int value);
    [CompilerGeneratedAttribute]
public QueryInfo get_QueryInfo();
    [CompilerGeneratedAttribute]
public void set_QueryInfo(QueryInfo value);
    [CompilerGeneratedAttribute]
public List`1<Range`1<string>> get_QueryRanges();
    [CompilerGeneratedAttribute]
public void set_QueryRanges(List`1<Range`1<string>> value);
    public virtual string ToString();
    public static bool TryParse(string serializedQueryPlan, PartitionedQueryExecutionInfo& partitionedQueryExecutionInfo);
}
internal class Microsoft.Azure.Cosmos.Query.Core.QueryPlan.PartitionedQueryExecutionInfoInternal : object {
    [CompilerGeneratedAttribute]
private QueryInfo <QueryInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Range`1<PartitionKeyInternal>> <QueryRanges>k__BackingField;
    [JsonPropertyAttribute("queryInfo")]
public QueryInfo QueryInfo { get; public set; }
    [JsonPropertyAttribute("queryRanges")]
public List`1<Range`1<PartitionKeyInternal>> QueryRanges { get; public set; }
    [CompilerGeneratedAttribute]
public QueryInfo get_QueryInfo();
    [CompilerGeneratedAttribute]
public void set_QueryInfo(QueryInfo value);
    [CompilerGeneratedAttribute]
public List`1<Range`1<PartitionKeyInternal>> get_QueryRanges();
    [CompilerGeneratedAttribute]
public void set_QueryRanges(List`1<Range`1<PartitionKeyInternal>> value);
}
[FlagsAttribute]
internal enum Microsoft.Azure.Cosmos.Query.Core.QueryPlan.QueryFeatures : Enum {
    public ulong value__;
    public static QueryFeatures None;
    public static QueryFeatures Aggregate;
    public static QueryFeatures CompositeAggregate;
    public static QueryFeatures Distinct;
    public static QueryFeatures GroupBy;
    public static QueryFeatures MultipleAggregates;
    public static QueryFeatures MultipleOrderBy;
    public static QueryFeatures OffsetAndLimit;
    public static QueryFeatures OrderBy;
    public static QueryFeatures Top;
    public static QueryFeatures NonValueAggregate;
    public static QueryFeatures DCount;
    public static QueryFeatures NonStreamingOrderBy;
    public static QueryFeatures ListAndSetAggregate;
    public static QueryFeatures HybridSearch;
}
[JsonObjectAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.QueryPlan.QueryInfo : object {
    [CompilerGeneratedAttribute]
private DistinctQueryType <DistinctType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SortOrder> <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <OrderByExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <GroupByExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <GroupByAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<AggregateOperator> <Aggregates>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, Nullable`1<AggregateOperator>> <GroupByAliasToAggregateType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RewrittenQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSelectValue>k__BackingField;
    [CompilerGeneratedAttribute]
private DCountInfo <DCountInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasNonStreamingOrderBy>k__BackingField;
    [JsonPropertyAttribute("distinctType")]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public DistinctQueryType DistinctType { get; public set; }
    [JsonPropertyAttribute("top")]
public Nullable`1<int> Top { get; public set; }
    [JsonPropertyAttribute("offset")]
public Nullable`1<int> Offset { get; public set; }
    [JsonPropertyAttribute("limit")]
public Nullable`1<int> Limit { get; public set; }
    [JsonPropertyAttribute("orderBy")]
public IReadOnlyList`1<SortOrder> OrderBy { get; public set; }
    [JsonPropertyAttribute("orderByExpressions")]
public IReadOnlyList`1<string> OrderByExpressions { get; public set; }
    [JsonPropertyAttribute("groupByExpressions")]
public IReadOnlyList`1<string> GroupByExpressions { get; public set; }
    [JsonPropertyAttribute("groupByAliases")]
public IReadOnlyList`1<string> GroupByAliases { get; public set; }
    [JsonPropertyAttribute("aggregates")]
public IReadOnlyList`1<AggregateOperator> Aggregates { get; public set; }
    [JsonPropertyAttribute("groupByAliasToAggregateType")]
public IReadOnlyDictionary`2<string, Nullable`1<AggregateOperator>> GroupByAliasToAggregateType { get; public set; }
    [JsonPropertyAttribute("rewrittenQuery")]
public string RewrittenQuery { get; public set; }
    [JsonPropertyAttribute("hasSelectValue")]
public bool HasSelectValue { get; public set; }
    [JsonPropertyAttribute("dCountInfo")]
public DCountInfo DCountInfo { get; public set; }
    [JsonPropertyAttribute("hasNonStreamingOrderBy")]
public bool HasNonStreamingOrderBy { get; public set; }
    public bool HasDCount { get; }
    public bool HasDistinct { get; }
    public bool HasTop { get; }
    public bool HasAggregates { get; }
    public bool HasGroupBy { get; }
    public bool HasOrderBy { get; }
    public bool HasOffset { get; }
    public bool HasLimit { get; }
    [CompilerGeneratedAttribute]
public DistinctQueryType get_DistinctType();
    [CompilerGeneratedAttribute]
public void set_DistinctType(DistinctQueryType value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Limit();
    [CompilerGeneratedAttribute]
public void set_Limit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<SortOrder> get_OrderBy();
    [CompilerGeneratedAttribute]
public void set_OrderBy(IReadOnlyList`1<SortOrder> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_OrderByExpressions();
    [CompilerGeneratedAttribute]
public void set_OrderByExpressions(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_GroupByExpressions();
    [CompilerGeneratedAttribute]
public void set_GroupByExpressions(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_GroupByAliases();
    [CompilerGeneratedAttribute]
public void set_GroupByAliases(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<AggregateOperator> get_Aggregates();
    [CompilerGeneratedAttribute]
public void set_Aggregates(IReadOnlyList`1<AggregateOperator> value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, Nullable`1<AggregateOperator>> get_GroupByAliasToAggregateType();
    [CompilerGeneratedAttribute]
public void set_GroupByAliasToAggregateType(IReadOnlyDictionary`2<string, Nullable`1<AggregateOperator>> value);
    [CompilerGeneratedAttribute]
public string get_RewrittenQuery();
    [CompilerGeneratedAttribute]
public void set_RewrittenQuery(string value);
    [CompilerGeneratedAttribute]
public bool get_HasSelectValue();
    [CompilerGeneratedAttribute]
public void set_HasSelectValue(bool value);
    [CompilerGeneratedAttribute]
public DCountInfo get_DCountInfo();
    [CompilerGeneratedAttribute]
public void set_DCountInfo(DCountInfo value);
    [CompilerGeneratedAttribute]
public bool get_HasNonStreamingOrderBy();
    [CompilerGeneratedAttribute]
public void set_HasNonStreamingOrderBy(bool value);
    public bool get_HasDCount();
    public bool get_HasDistinct();
    public bool get_HasTop();
    public bool get_HasAggregates();
    public bool get_HasGroupBy();
    public bool get_HasOrderBy();
    public bool get_HasOffset();
    public bool get_HasLimit();
}
internal class Microsoft.Azure.Cosmos.Query.Core.QueryPlan.QueryPartitionProvider : object {
    private static int InitialBufferSize;
    private static UInt32 DISP_E_BUFFERTOOSMALL;
    private static PartitionedQueryExecutionInfoInternal DefaultInfoInternal;
    private object serviceProviderStateLock;
    private IntPtr serviceProvider;
    private bool disposed;
    private string queryengineConfiguration;
    [CompilerGeneratedAttribute]
private bool <ClientDisableOptimisticDirectExecution>k__BackingField;
    public bool ClientDisableOptimisticDirectExecution { get; private set; }
    public QueryPartitionProvider(IDictionary`2<string, object> queryengineConfiguration);
    private static QueryPartitionProvider();
    [CompilerGeneratedAttribute]
public bool get_ClientDisableOptimisticDirectExecution();
    [CompilerGeneratedAttribute]
private void set_ClientDisableOptimisticDirectExecution(bool value);
    public sealed virtual void Dispose();
    public void Update(IDictionary`2<string, object> queryengineConfiguration);
    public TryCatch`1<PartitionedQueryExecutionInfo> TryGetPartitionedQueryExecutionInfo(string querySpecJsonString, PartitionKeyDefinition partitionKeyDefinition, VectorEmbeddingPolicy vectorEmbeddingPolicy, bool requireFormattableOrderByQuery, bool isContinuationExpected, bool allowNonValueAggregateQuery, bool hasLogicalPartitionKey, bool allowDCount, bool useSystemPrefix, GeospatialType geospatialType);
    private static bool GetClientDisableOptimisticDirectExecution(IReadOnlyDictionary`2<string, object> queryengineConfiguration);
    internal PartitionedQueryExecutionInfo ConvertPartitionedQueryExecutionInfo(PartitionedQueryExecutionInfoInternal queryInfoInternal, PartitionKeyDefinition partitionKeyDefinition);
    internal TryCatch`1<PartitionedQueryExecutionInfoInternal> TryGetPartitionedQueryExecutionInfoInternal(string querySpecJsonString, PartitionKeyDefinition partitionKeyDefinition, VectorEmbeddingPolicy vectorEmbeddingPolicy, bool requireFormattableOrderByQuery, bool isContinuationExpected, bool allowNonValueAggregateQuery, bool hasLogicalPartitionKey, bool allowDCount, bool useSystemPrefix, GeospatialType geospatialType);
    internal static TryCatch`1<IntPtr> TryCreateServiceProvider(string queryEngineConfiguration);
    protected virtual override void Finalize();
    private void Initialize();
    private void Dispose(bool disposing);
}
internal class Microsoft.Azure.Cosmos.Query.Core.QueryPlan.QueryPlanHandler : object {
    private CosmosQueryClient queryClient;
    public QueryPlanHandler(CosmosQueryClient queryClient);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.QueryPlan.QueryPlanHandler/<TryGetQueryPlanAsync>d__2")]
public Task`1<TryCatch`1<PartitionedQueryExecutionInfo>> TryGetQueryPlanAsync(SqlQuerySpec sqlQuerySpec, ResourceType resourceType, PartitionKeyDefinition partitionKeyDefinition, VectorEmbeddingPolicy vectorEmbeddingPolicy, QueryFeatures supportedQueryFeatures, bool hasLogicalPartitionKey, bool useSystemPrefix, GeospatialType geospatialType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.QueryPlan.QueryPlanHandler/<TryGetQueryInfoAndIfSupportedAsync>d__3")]
public Task`1<TryCatch`1<ValueTuple`2<PartitionedQueryExecutionInfo, bool>>> TryGetQueryInfoAndIfSupportedAsync(QueryFeatures supportedQueryFeatures, SqlQuerySpec sqlQuerySpec, ResourceType resourceType, PartitionKeyDefinition partitionKeyDefinition, VectorEmbeddingPolicy vectorEmbeddingPolicy, bool hasLogicalPartitionKey, bool useSystemPrefix, GeospatialType geospatialType, CancellationToken cancellationToken);
    private Task`1<TryCatch`1<PartitionedQueryExecutionInfo>> TryGetQueryInfoAsync(SqlQuerySpec sqlQuerySpec, ResourceType resourceType, PartitionKeyDefinition partitionKeyDefinition, VectorEmbeddingPolicy vectorEmbeddingPolicy, bool hasLogicalPartitionKey, bool useSystemPrefix, GeospatialType geospatialType, CancellationToken cancellationToken);
}
internal static class Microsoft.Azure.Cosmos.Query.Core.QueryPlan.QueryPlanRetriever : object {
    private static QueryFeatures SupportedQueryFeatures;
    private static QueryFeatures SupportedQueryFeaturesWithoutNonStreamingOrderBy;
    private static string SupportedQueryFeaturesString;
    private static string SupportedQueryFeaturesWithoutNonStreamingOrderByString;
    private static QueryPlanRetriever();
    private static string GetSupportedQueryFeaturesString(bool isNonStreamingOrderByQueryFeatureDisabled);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.Core.QueryPlan.QueryPlanRetriever/<GetQueryPlanWithServiceInteropAsync>d__5")]
public static Task`1<PartitionedQueryExecutionInfo> GetQueryPlanWithServiceInteropAsync(CosmosQueryClient queryClient, SqlQuerySpec sqlQuerySpec, ResourceType resourceType, PartitionKeyDefinition partitionKeyDefinition, VectorEmbeddingPolicy vectorEmbeddingPolicy, bool hasLogicalPartitionKey, GeospatialType geospatialType, bool useSystemPrefix, ITrace trace, CancellationToken cancellationToken);
    public static Task`1<PartitionedQueryExecutionInfo> GetQueryPlanThroughGatewayAsync(CosmosQueryContext queryContext, SqlQuerySpec sqlQuerySpec, string resourceLink, Nullable`1<PartitionKey> partitionKey, bool isNonStreamingOrderByQueryFeatureDisabled, ITrace trace, CancellationToken cancellationToken);
}
[DataContractAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.SqlParameter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public object Value { get; public set; }
    public SqlParameter(string name);
    public SqlParameter(string name, object value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public sealed virtual bool Equals(SqlParameter other);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.Cosmos.Query.Core.SqlParameterCollection : object {
    private List`1<SqlParameter> parameters;
    public SqlParameter Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public SqlParameterCollection(IEnumerable`1<SqlParameter> parameters);
    public sealed virtual int IndexOf(SqlParameter item);
    public sealed virtual void Insert(int index, SqlParameter item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual SqlParameter get_Item(int index);
    public sealed virtual void set_Item(int index, SqlParameter value);
    public sealed virtual void Add(SqlParameter item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(SqlParameter item);
    public sealed virtual void CopyTo(SqlParameter[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(SqlParameter item);
    public sealed virtual IEnumerator`1<SqlParameter> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DataContractAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.SqlQueryResumeFilter : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlQueryResumeValue> <ResumeValues>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Rid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exclude>k__BackingField;
    [DataMemberAttribute]
public IReadOnlyList`1<SqlQueryResumeValue> ResumeValues { get; }
    [DataMemberAttribute]
public string Rid { get; }
    [DataMemberAttribute]
public bool Exclude { get; }
    public SqlQueryResumeFilter(IReadOnlyList`1<SqlQueryResumeValue> resumeValues, string rid, bool exclude);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<SqlQueryResumeValue> get_ResumeValues();
    [CompilerGeneratedAttribute]
public string get_Rid();
    [CompilerGeneratedAttribute]
public bool get_Exclude();
}
internal class Microsoft.Azure.Cosmos.Query.Core.SqlQueryResumeValue : object {
    private static CosmosElement EmptyObject;
    private static SqlQueryResumeValue();
    public sealed virtual int CompareTo(CosmosElement cosmosElement);
    public static CosmosElement ToCosmosElement(SqlQueryResumeValue resumeValue);
    public static SqlQueryResumeValue FromCosmosElement(CosmosElement value);
    public static SqlQueryResumeValue FromOrderByValue(CosmosElement orderByValue);
    public static void Serialize(JsonWriter writer, SqlQueryResumeValue value, JsonSerializer serializer);
}
[DataContractAttribute]
internal class Microsoft.Azure.Cosmos.Query.Core.SqlQuerySpec : object {
    private SqlParameterCollection parameters;
    [CompilerGeneratedAttribute]
private string <QueryText>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ClientQLCompatibilityLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlQueryResumeFilter <ResumeFilter>k__BackingField;
    [DataMemberAttribute]
public string QueryText { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> ClientQLCompatibilityLevel { get; public set; }
    [DataMemberAttribute]
public SqlParameterCollection Parameters { get; public set; }
    [DataMemberAttribute]
public SqlQueryResumeFilter ResumeFilter { get; public set; }
    public SqlQuerySpec(string queryText);
    public SqlQuerySpec(string queryText, SqlParameterCollection parameters);
    public SqlQuerySpec(string queryText, SqlParameterCollection parameters, SqlQueryResumeFilter resumeFilter);
    [CompilerGeneratedAttribute]
public string get_QueryText();
    [CompilerGeneratedAttribute]
public void set_QueryText(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ClientQLCompatibilityLevel();
    [CompilerGeneratedAttribute]
public void set_ClientQLCompatibilityLevel(Nullable`1<int> value);
    public SqlParameterCollection get_Parameters();
    public void set_Parameters(SqlParameterCollection value);
    [CompilerGeneratedAttribute]
public SqlQueryResumeFilter get_ResumeFilter();
    [CompilerGeneratedAttribute]
public void set_ResumeFilter(SqlQueryResumeFilter value);
    public bool ShouldSerializeParameters();
}
internal class Microsoft.Azure.Cosmos.Query.Core.TestInjections : object {
    [CompilerGeneratedAttribute]
private bool <SimulateThrottles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SimulateEmptyPages>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseStats <Stats>k__BackingField;
    public bool SimulateThrottles { get; }
    public bool SimulateEmptyPages { get; }
    public ResponseStats Stats { get; }
    public TestInjections(bool simulate429s, bool simulateEmptyPages, ResponseStats responseStats);
    [CompilerGeneratedAttribute]
public bool get_SimulateThrottles();
    [CompilerGeneratedAttribute]
public bool get_SimulateEmptyPages();
    [CompilerGeneratedAttribute]
public ResponseStats get_Stats();
}
internal class Microsoft.Azure.Cosmos.Query.CosmosQueryContextCore : CosmosQueryContext {
    public CosmosQueryContextCore(CosmosQueryClient client, ResourceType resourceTypeEnum, OperationType operationType, Type resourceType, string resourceLink, Guid correlatedActivityId, bool isContinuationExpected, bool allowNonValueAggregateQuery, bool useSystemPrefix, string containerResourceId);
    internal virtual Task`1<TryCatch`1<QueryPage>> ExecuteQueryAsync(SqlQuerySpec querySpecForInit, QueryRequestOptions queryRequestOptions, string continuationToken, FeedRange feedRange, bool isContinuationExpected, int pageSize, ITrace trace, CancellationToken cancellationToken);
    internal virtual Task`1<PartitionedQueryExecutionInfo> ExecuteQueryPlanRequestAsync(string resourceUri, ResourceType resourceType, OperationType operationType, SqlQuerySpec sqlQuerySpec, Nullable`1<PartitionKey> partitionKey, string supportedQueryFeatures, ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Query.DefaultDocumentQueryExecutionContext : DocumentQueryExecutionContextBase {
    private static string InternalPartitionKeyDefinitionProperty;
    private bool isContinuationExpected;
    private SchedulingStopwatch fetchSchedulingMetrics;
    private FetchExecutionRangeAccumulator fetchExecutionRangeAccumulator;
    private IDictionary`2<string, IReadOnlyList`1<Range`1<string>>> providedRangesCache;
    private PartitionRoutingHelper partitionRoutingHelper;
    private long retries;
    public DefaultDocumentQueryExecutionContext(InitParams constructorParams, bool isContinuationExpected);
    public static Task`1<DefaultDocumentQueryExecutionContext> CreateAsync(InitParams constructorParams, bool isContinuationExpected, CancellationToken token);
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DefaultDocumentQueryExecutionContext/<ExecuteInternalAsync>d__10")]
protected virtual Task`1<DocumentFeedResponse`1<CosmosElement>> ExecuteInternalAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DefaultDocumentQueryExecutionContext/<ExecuteOnceAsync>d__11")]
private Task`1<Tuple`2<DocumentFeedResponse`1<CosmosElement>, string>> ExecuteOnceAsync(IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    private static bool LogicalPartitionKeyProvided(DocumentServiceRequest request);
    private static bool PhysicalPartitionKeyRangeIdProvided(DefaultDocumentQueryExecutionContext context);
    private static bool ServiceInteropAvailable();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DefaultDocumentQueryExecutionContext/<TryGetTargetPartitionKeyRangeAsync>d__15")]
private Task`1<Tuple`2<ResolvedRangeInfo, IReadOnlyList`1<Range`1<string>>>> TryGetTargetPartitionKeyRangeAsync(DocumentServiceRequest request, ContainerProperties collection, QueryPartitionProvider queryPartitionProvider, IRoutingMapProvider routingMapProvider, Range`1<string> rangeFromContinuationToken, List`1<CompositeContinuationToken> suppliedTokens);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DefaultDocumentQueryExecutionContext/<CreateRequestAsync>d__16")]
private Task`1<DocumentServiceRequest> CreateRequestAsync();
}
internal class Microsoft.Azure.Cosmos.Query.DocumentQueryClient : object {
    private DocumentClient innerClient;
    private QueryCompatibilityMode Microsoft.Azure.Cosmos.Query.IDocumentQueryClient.QueryCompatibilityMode { get; private set; }
    private IRetryPolicyFactory Microsoft.Azure.Cosmos.Query.IDocumentQueryClient.ResetSessionTokenRetryPolicy { get; }
    private Uri Microsoft.Azure.Cosmos.Query.IDocumentQueryClient.ServiceEndpoint { get; }
    private ConnectionMode Microsoft.Azure.Cosmos.Query.IDocumentQueryClient.ConnectionMode { get; }
    private Action`1<IQueryable> Microsoft.Azure.Cosmos.Query.IDocumentQueryClient.OnExecuteScalarQueryCallback { get; }
    public DocumentQueryClient(DocumentClient innerClient);
    public sealed virtual void Dispose();
    private sealed virtual override QueryCompatibilityMode Microsoft.Azure.Cosmos.Query.IDocumentQueryClient.get_QueryCompatibilityMode();
    private sealed virtual override void Microsoft.Azure.Cosmos.Query.IDocumentQueryClient.set_QueryCompatibilityMode(QueryCompatibilityMode value);
    private sealed virtual override IRetryPolicyFactory Microsoft.Azure.Cosmos.Query.IDocumentQueryClient.get_ResetSessionTokenRetryPolicy();
    private sealed virtual override Uri Microsoft.Azure.Cosmos.Query.IDocumentQueryClient.get_ServiceEndpoint();
    private sealed virtual override ConnectionMode Microsoft.Azure.Cosmos.Query.IDocumentQueryClient.get_ConnectionMode();
    private sealed virtual override Action`1<IQueryable> Microsoft.Azure.Cosmos.Query.IDocumentQueryClient.get_OnExecuteScalarQueryCallback();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryClient/<Microsoft-Azure-Cosmos-Query-IDocumentQueryClient-GetCollectionCacheAsync>d__14")]
private sealed virtual override Task`1<CollectionCache> Microsoft.Azure.Cosmos.Query.IDocumentQueryClient.GetCollectionCacheAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryClient/<Microsoft-Azure-Cosmos-Query-IDocumentQueryClient-GetRoutingMapProviderAsync>d__15")]
private sealed virtual override Task`1<IRoutingMapProvider> Microsoft.Azure.Cosmos.Query.IDocumentQueryClient.GetRoutingMapProviderAsync();
    public sealed virtual Task`1<QueryPartitionProvider> GetQueryPartitionProviderAsync();
    public sealed virtual Task`1<DocumentServiceResponse> ExecuteQueryAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    public sealed virtual Task`1<DocumentServiceResponse> ReadFeedAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryClient/<GetDefaultConsistencyLevelAsync>d__19")]
public sealed virtual Task`1<ConsistencyLevel> GetDefaultConsistencyLevelAsync();
    public sealed virtual Task`1<Nullable`1<ConsistencyLevel>> GetDesiredConsistencyLevelAsync();
    public sealed virtual Task EnsureValidOverwriteAsync(ConsistencyLevel requestedConsistencyLevel, OperationType operationType, ResourceType resourceType);
    public sealed virtual Task`1<PartitionKeyRangeCache> GetPartitionKeyRangeCacheAsync();
}
internal abstract class Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase : object {
    public static string DefaultSupportedSerializationFormats;
    [DynamicAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DocumentFeedResponse`1<object> EmptyFeedResponse;
    protected SqlQuerySpec querySpec;
    private Expression expression;
    private FeedOptions feedOptions;
    private bool getLazyFeedResponse;
    private bool isExpressionEvaluated;
    private DocumentFeedResponse`1<CosmosElement> lastPage;
    [CompilerGeneratedAttribute]
private IDocumentQueryClient <Client>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceType <ResourceTypeEnum>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceLink>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CorrelatedActivityId>k__BackingField;
    public bool ShouldExecuteQueryRequest { get; }
    public IDocumentQueryClient Client { get; }
    public Type ResourceType { get; }
    public ResourceType ResourceTypeEnum { get; }
    public string ResourceLink { get; }
    public Nullable`1<int> MaxItemCount { get; }
    protected SqlQuerySpec QuerySpec { get; }
    protected PartitionKeyInternal PartitionKeyInternal { get; }
    protected int MaxBufferedItemCount { get; }
    protected int MaxDegreeOfParallelism { get; }
    protected string PartitionKeyRangeId { get; }
    protected string ContinuationToken { get; }
    public bool IsDone { get; }
    public Guid CorrelatedActivityId { get; }
    protected DocumentQueryExecutionContextBase(InitParams initParams);
    private static DocumentQueryExecutionContextBase();
    public bool get_ShouldExecuteQueryRequest();
    [CompilerGeneratedAttribute]
public IDocumentQueryClient get_Client();
    [CompilerGeneratedAttribute]
public Type get_ResourceType();
    [CompilerGeneratedAttribute]
public ResourceType get_ResourceTypeEnum();
    [CompilerGeneratedAttribute]
public string get_ResourceLink();
    public Nullable`1<int> get_MaxItemCount();
    protected SqlQuerySpec get_QuerySpec();
    protected PartitionKeyInternal get_PartitionKeyInternal();
    protected int get_MaxBufferedItemCount();
    protected int get_MaxDegreeOfParallelism();
    protected string get_PartitionKeyRangeId();
    protected virtual string get_ContinuationToken();
    public virtual bool get_IsDone();
    [CompilerGeneratedAttribute]
public Guid get_CorrelatedActivityId();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase/<GetPartitionedQueryExecutionInfoAsync>d__43")]
public Task`1<PartitionedQueryExecutionInfo> GetPartitionedQueryExecutionInfoAsync(PartitionKeyDefinition partitionKeyDefinition, VectorEmbeddingPolicy vectorEmbeddingPolicy, bool requireFormattableOrderByQuery, bool isContinuationExpected, bool allowNonValueAggregateQuery, bool hasLogicalPartitionKey, bool allowDCount, GeospatialType geospatialType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase/<ExecuteNextFeedResponseAsync>d__44")]
public virtual Task`1<DocumentFeedResponse`1<CosmosElement>> ExecuteNextFeedResponseAsync(CancellationToken cancellationToken);
    public FeedOptions GetFeedOptions(string continuationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase/<CreateCommonHeadersAsync>d__46")]
public Task`1<INameValueCollection> CreateCommonHeadersAsync(FeedOptions feedOptions);
    public DocumentServiceRequest CreateDocumentServiceRequest(INameValueCollection requestHeaders, SqlQuerySpec querySpec, PartitionKeyInternal partitionKey);
    public DocumentServiceRequest CreateDocumentServiceRequest(INameValueCollection requestHeaders, SqlQuerySpec querySpec, PartitionKeyRange targetRange, string collectionRid);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase/<ExecuteRequestLazyAsync>d__49")]
public Task`1<DocumentFeedResponse`1<CosmosElement>> ExecuteRequestLazyAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase/<ExecuteRequestAsync>d__50")]
public Task`1<DocumentFeedResponse`1<CosmosElement>> ExecuteRequestAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase/<ExecuteRequestAsync>d__51`1")]
public Task`1<DocumentFeedResponse`1<T>> ExecuteRequestAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase/<ExecuteQueryRequestAsync>d__52")]
public Task`1<DocumentFeedResponse`1<CosmosElement>> ExecuteQueryRequestAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase/<ExecuteQueryRequestAsync>d__53`1")]
public Task`1<DocumentFeedResponse`1<T>> ExecuteQueryRequestAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase/<ExecuteReadFeedRequestAsync>d__54")]
public Task`1<DocumentFeedResponse`1<CosmosElement>> ExecuteReadFeedRequestAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase/<ExecuteReadFeedRequestAsync>d__55`1")]
public Task`1<DocumentFeedResponse`1<T>> ExecuteReadFeedRequestAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    public void PopulatePartitionKeyRangeInfo(DocumentServiceRequest request, PartitionKeyRange range, string collectionRid);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase/<GetTargetPartitionKeyRangeByIdAsync>d__57")]
public Task`1<PartitionKeyRange> GetTargetPartitionKeyRangeByIdAsync(string collectionResourceId, string partitionKeyRangeId);
    internal Task`1<List`1<PartitionKeyRange>> GetTargetPartitionKeyRangesByEpkStringAsync(string collectionResourceId, string effectivePartitionKeyString);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase/<GetTargetPartitionKeyRangesAsync>d__59")]
internal Task`1<List`1<PartitionKeyRange>> GetTargetPartitionKeyRangesAsync(string collectionResourceId, List`1<Range`1<string>> providedRanges);
    public abstract virtual void Dispose();
    protected abstract virtual Task`1<DocumentFeedResponse`1<CosmosElement>> ExecuteInternalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase/<GetReplacementRangesAsync>d__62")]
protected Task`1<List`1<PartitionKeyRange>> GetReplacementRangesAsync(PartitionKeyRange targetRange, string collectionRid);
    protected bool NeedPartitionKeyRangeCacheRefresh(DocumentClientException ex);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextBase/<ExecuteQueryRequestInternalAsync>d__64")]
private Task`1<DocumentServiceResponse> ExecuteQueryRequestInternalAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    private DocumentServiceRequest CreateDocumentServiceRequest(INameValueCollection requestHeaders, SqlQuerySpec querySpec);
    private DocumentServiceRequest CreateQueryDocumentServiceRequest(INameValueCollection requestHeaders, SqlQuerySpec querySpec);
    private DocumentServiceRequest CreateReadFeedDocumentServiceRequest(INameValueCollection requestHeaders);
    private void PopulatePartitionKeyInfo(DocumentServiceRequest request, PartitionKeyInternal partitionKey);
    private DocumentFeedResponse`1<T> GetFeedResponse(DocumentServiceResponse response);
    private DocumentFeedResponse`1<CosmosElement> GetFeedResponse(DocumentServiceRequest documentServiceRequest, DocumentServiceResponse documentServiceResponse);
    private string GetRootNodeName(ResourceType resourceType);
}
internal static class Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextFactory : object {
    private static int PageSizeFactorForTop;
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextFactory/<CreateDocumentQueryExecutionContextAsync>d__1")]
public static Task`1<IDocumentQueryExecutionContext> CreateDocumentQueryExecutionContextAsync(IDocumentQueryClient client, ResourceType resourceTypeEnum, Type resourceType, Expression expression, FeedOptions feedOptions, string resourceLink, bool isContinuationExpected, CancellationToken token, Guid correlatedActivityId);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.DocumentQueryExecutionContextFactory/<GetTargetPartitionKeyRangesAsync>d__2")]
internal static Task`1<List`1<PartitionKeyRange>> GetTargetPartitionKeyRangesAsync(DefaultDocumentQueryExecutionContext queryExecutionContext, PartitionedQueryExecutionInfo partitionedQueryExecutionInfo, ContainerProperties collection, FeedOptions feedOptions);
    private static bool ShouldCreateSpecializedDocumentQueryExecutionContext(ResourceType resourceTypeEnum, FeedOptions feedOptions, PartitionedQueryExecutionInfo partitionedQueryExecutionInfo, PartitionKeyDefinition partitionKeyDefinition, bool isContinuationExpected);
    private static bool IsCrossPartitionQuery(ResourceType resourceTypeEnum, FeedOptions feedOptions, PartitionKeyDefinition partitionKeyDefinition, PartitionedQueryExecutionInfo partitionedQueryExecutionInfo);
    private static bool IsParallelQuery(FeedOptions feedOptions);
    private static bool IsTopOrderByQuery(PartitionedQueryExecutionInfo partitionedQueryExecutionInfo);
    private static bool IsAggregateQuery(PartitionedQueryExecutionInfo partitionedQueryExecutionInfo);
    private static bool IsAggregateQueryWithoutContinuation(PartitionedQueryExecutionInfo partitionedQueryExecutionInfo, bool isContinuationExpected);
    private static bool IsOffsetLimitQuery(PartitionedQueryExecutionInfo partitionedQueryExecutionInfo);
    private static bool IsDistinctQuery(PartitionedQueryExecutionInfo partitionedQueryExecutionInfo);
    private static bool IsGroupByQuery(PartitionedQueryExecutionInfo partitionedQueryExecutionInfo);
    private static bool IsDCountQuery(PartitionedQueryExecutionInfo partitionedQueryExecutionInfo);
    private static bool TryGetEpkProperty(FeedOptions feedOptions, String& effectivePartitionKeyString);
}
internal interface Microsoft.Azure.Cosmos.Query.IDocumentQueryClient {
    public QueryCompatibilityMode QueryCompatibilityMode { get; public set; }
    public IRetryPolicyFactory ResetSessionTokenRetryPolicy { get; }
    public Uri ServiceEndpoint { get; }
    public ConnectionMode ConnectionMode { get; }
    public Action`1<IQueryable> OnExecuteScalarQueryCallback { get; }
    public abstract virtual QueryCompatibilityMode get_QueryCompatibilityMode();
    public abstract virtual void set_QueryCompatibilityMode(QueryCompatibilityMode value);
    public abstract virtual IRetryPolicyFactory get_ResetSessionTokenRetryPolicy();
    public abstract virtual Uri get_ServiceEndpoint();
    public abstract virtual ConnectionMode get_ConnectionMode();
    public abstract virtual Action`1<IQueryable> get_OnExecuteScalarQueryCallback();
    public abstract virtual Task`1<CollectionCache> GetCollectionCacheAsync();
    public abstract virtual Task`1<IRoutingMapProvider> GetRoutingMapProviderAsync();
    public abstract virtual Task`1<QueryPartitionProvider> GetQueryPartitionProviderAsync();
    public abstract virtual Task`1<DocumentServiceResponse> ExecuteQueryAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    public abstract virtual Task`1<DocumentServiceResponse> ReadFeedAsync(DocumentServiceRequest request, IDocumentClientRetryPolicy retryPolicyInstance, CancellationToken cancellationToken);
    public abstract virtual Task`1<ConsistencyLevel> GetDefaultConsistencyLevelAsync();
    public abstract virtual Task`1<Nullable`1<ConsistencyLevel>> GetDesiredConsistencyLevelAsync();
    public abstract virtual Task EnsureValidOverwriteAsync(ConsistencyLevel desiredConsistencyLevel, OperationType operationType, ResourceType resourceType);
    public abstract virtual Task`1<PartitionKeyRangeCache> GetPartitionKeyRangeCacheAsync();
}
internal interface Microsoft.Azure.Cosmos.Query.IDocumentQueryExecutionContext {
    public bool IsDone { get; }
    public abstract virtual bool get_IsDone();
    public abstract virtual Task`1<DocumentFeedResponse`1<CosmosElement>> ExecuteNextFeedResponseAsync(CancellationToken token);
}
internal class Microsoft.Azure.Cosmos.Query.ProxyDocumentQueryExecutionContext : object {
    private IDocumentQueryClient client;
    private ResourceType resourceTypeEnum;
    private Type resourceType;
    private Expression expression;
    private FeedOptions feedOptions;
    private string resourceLink;
    private ContainerProperties collection;
    private bool isContinuationExpected;
    private Guid correlatedActivityId;
    private IDocumentQueryExecutionContext innerExecutionContext;
    public bool IsDone { get; }
    private ProxyDocumentQueryExecutionContext(IDocumentQueryExecutionContext innerExecutionContext, IDocumentQueryClient client, ResourceType resourceTypeEnum, Type resourceType, Expression expression, FeedOptions feedOptions, string resourceLink, ContainerProperties collection, bool isContinuationExpected, Guid correlatedActivityId);
    public static ProxyDocumentQueryExecutionContext Create(IDocumentQueryClient client, ResourceType resourceTypeEnum, Type resourceType, Expression expression, FeedOptions feedOptions, string resourceLink, CancellationToken token, ContainerProperties collection, bool isContinuationExpected, Guid correlatedActivityId);
    public sealed virtual bool get_IsDone();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.ProxyDocumentQueryExecutionContext/<ExecuteNextFeedResponseAsync>d__15")]
public sealed virtual Task`1<DocumentFeedResponse`1<CosmosElement>> ExecuteNextFeedResponseAsync(CancellationToken token);
}
internal enum Microsoft.Azure.Cosmos.Query.QueryCompatibilityMode : Enum {
    public int value__;
    public static QueryCompatibilityMode Default;
    public static QueryCompatibilityMode Query;
    public static QueryCompatibilityMode SqlQuery;
}
internal class Microsoft.Azure.Cosmos.Query.QueryIterator : FeedIteratorInternal {
    private static string CorrelatedActivityIdKeyName;
    private static IReadOnlyList`1<CosmosElement> EmptyPage;
    private CosmosQueryContextCore cosmosQueryContext;
    private IQueryPipelineStage queryPipelineStage;
    private CosmosSerializationFormatOptions cosmosSerializationFormatOptions;
    private RequestOptions requestOptions;
    private CosmosClientContext clientContext;
    private Guid correlatedActivityId;
    private bool hasMoreResults;
    public bool HasMoreResults { get; }
    private QueryIterator(CosmosQueryContextCore cosmosQueryContext, IQueryPipelineStage cosmosQueryExecutionContext, CosmosSerializationFormatOptions cosmosSerializationFormatOptions, RequestOptions requestOptions, CosmosClientContext clientContext, Guid correlatedActivityId, ContainerInternal container);
    private static QueryIterator();
    public static QueryIterator Create(ContainerCore containerCore, CosmosQueryClient client, CosmosClientContext clientContext, SqlQuerySpec sqlQuerySpec, string continuationToken, FeedRangeInternal feedRangeInternal, QueryRequestOptions queryRequestOptions, string resourceLink, bool isContinuationExpected, bool allowNonValueAggregateQuery, PartitionedQueryExecutionInfo partitionedQueryExecutionInfo, ResourceType resourceType);
    public virtual bool get_HasMoreResults();
    public virtual Task`1<ResponseMessage> ReadNextAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Query.QueryIterator/<ReadNextAsync>d__14")]
public virtual Task`1<ResponseMessage> ReadNextAsync(ITrace trace, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    internal static bool IsSystemPrefixExpected(QueryRequestOptions queryRequestOptions);
}
public class Microsoft.Azure.Cosmos.QueryDefinition : object {
    [CompilerGeneratedAttribute]
private List`1<SqlParameter> <parameters>k__BackingField;
    private ParametersListAdapter parametersAdapter;
    [CompilerGeneratedAttribute]
private string <QueryText>k__BackingField;
    [JsonPropertyAttribute]
private List`1<SqlParameter> parameters { get; private set; }
    [JsonPropertyAttribute]
public string QueryText { get; }
    [JsonIgnoreAttribute]
internal IReadOnlyList`1<SqlParameter> Parameters { get; }
    public QueryDefinition(string query);
    [CompilerGeneratedAttribute]
private List`1<SqlParameter> get_parameters();
    [CompilerGeneratedAttribute]
private void set_parameters(List`1<SqlParameter> value);
    [CompilerGeneratedAttribute]
public string get_QueryText();
    internal static QueryDefinition CreateFromQuerySpec(SqlQuerySpec sqlQuery);
    public QueryDefinition WithParameter(string name, object value);
    public QueryDefinition WithParameterStream(string name, Stream valueStream);
    public IReadOnlyList`1<ValueTuple`2<string, object>> GetQueryParameters();
    internal SqlQuerySpec ToSqlQuerySpec();
    internal IReadOnlyList`1<SqlParameter> get_Parameters();
}
internal class Microsoft.Azure.Cosmos.QueryDefinitionEqualityComparer : object {
    public static QueryDefinitionEqualityComparer Instance;
    private static QueryDefinitionEqualityComparer();
    public sealed virtual bool Equals(QueryDefinition x, QueryDefinition y);
    public sealed virtual int GetHashCode(QueryDefinition queryDefinition);
    private static bool ParameterEquals(IReadOnlyList`1<SqlParameter> parameters, IReadOnlyList`1<SqlParameter> otherParameters);
}
public class Microsoft.Azure.Cosmos.QueryRequestOptions : RequestOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ResponseContinuationTokenLimitInKb>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableScanInQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableLowPrecisionOrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableOptimisticDirectExecution>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxBufferedItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxConcurrency>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PartitionKey> <PartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PopulateIndexMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private DedicatedGatewayRequestOptions <DedicatedGatewayRequestOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosElement <CosmosElementContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<EnumerationDirection> <EnumerationDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosSerializationFormatOptions <CosmosSerializationFormatOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SupportedSerializationFormats> <SupportedSerializationFormats>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ReturnResultsInDeterministicOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private TestInjections <TestSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private FeedRange <FeedRange>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNonStreamingOrderByQueryFeatureDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDistributedQueryGatewayMode>k__BackingField;
    public Nullable`1<int> ResponseContinuationTokenLimitInKb { get; public set; }
    public Nullable`1<bool> EnableScanInQuery { get; public set; }
    public Nullable`1<bool> EnableLowPrecisionOrderBy { get; public set; }
    public bool EnableOptimisticDirectExecution { get; public set; }
    public Nullable`1<int> MaxBufferedItemCount { get; public set; }
    public Nullable`1<int> MaxItemCount { get; public set; }
    public Nullable`1<int> MaxConcurrency { get; public set; }
    public Nullable`1<PartitionKey> PartitionKey { get; public set; }
    public Nullable`1<bool> PopulateIndexMetrics { get; public set; }
    public Nullable`1<ConsistencyLevel> ConsistencyLevel { get; public set; }
    public string SessionToken { get; public set; }
    public DedicatedGatewayRequestOptions DedicatedGatewayRequestOptions { get; public set; }
    internal CosmosElement CosmosElementContinuationToken { get; internal set; }
    internal string StartId { get; internal set; }
    internal string EndId { get; internal set; }
    internal Nullable`1<EnumerationDirection> EnumerationDirection { get; internal set; }
    internal CosmosSerializationFormatOptions CosmosSerializationFormatOptions { get; internal set; }
    internal Nullable`1<SupportedSerializationFormats> SupportedSerializationFormats { get; internal set; }
    internal Nullable`1<bool> ReturnResultsInDeterministicOrder { get; internal set; }
    internal TestInjections TestSettings { get; internal set; }
    internal FeedRange FeedRange { get; internal set; }
    internal bool IsNonStreamingOrderByQueryFeatureDisabled { get; internal set; }
    internal bool EnableDistributedQueryGatewayMode { get; internal set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ResponseContinuationTokenLimitInKb();
    [CompilerGeneratedAttribute]
public void set_ResponseContinuationTokenLimitInKb(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableScanInQuery();
    [CompilerGeneratedAttribute]
public void set_EnableScanInQuery(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableLowPrecisionOrderBy();
    [CompilerGeneratedAttribute]
public void set_EnableLowPrecisionOrderBy(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_EnableOptimisticDirectExecution();
    [CompilerGeneratedAttribute]
public void set_EnableOptimisticDirectExecution(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxBufferedItemCount();
    [CompilerGeneratedAttribute]
public void set_MaxBufferedItemCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxItemCount();
    [CompilerGeneratedAttribute]
public void set_MaxItemCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxConcurrency();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrency(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PartitionKey> get_PartitionKey();
    [CompilerGeneratedAttribute]
public void set_PartitionKey(Nullable`1<PartitionKey> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PopulateIndexMetrics();
    [CompilerGeneratedAttribute]
public void set_PopulateIndexMetrics(Nullable`1<bool> value);
    public Nullable`1<ConsistencyLevel> get_ConsistencyLevel();
    public void set_ConsistencyLevel(Nullable`1<ConsistencyLevel> value);
    [CompilerGeneratedAttribute]
public string get_SessionToken();
    [CompilerGeneratedAttribute]
public void set_SessionToken(string value);
    [CompilerGeneratedAttribute]
public DedicatedGatewayRequestOptions get_DedicatedGatewayRequestOptions();
    [CompilerGeneratedAttribute]
public void set_DedicatedGatewayRequestOptions(DedicatedGatewayRequestOptions value);
    [CompilerGeneratedAttribute]
internal CosmosElement get_CosmosElementContinuationToken();
    [CompilerGeneratedAttribute]
internal void set_CosmosElementContinuationToken(CosmosElement value);
    [CompilerGeneratedAttribute]
internal string get_StartId();
    [CompilerGeneratedAttribute]
internal void set_StartId(string value);
    [CompilerGeneratedAttribute]
internal string get_EndId();
    [CompilerGeneratedAttribute]
internal void set_EndId(string value);
    [CompilerGeneratedAttribute]
internal Nullable`1<EnumerationDirection> get_EnumerationDirection();
    [CompilerGeneratedAttribute]
internal void set_EnumerationDirection(Nullable`1<EnumerationDirection> value);
    [CompilerGeneratedAttribute]
internal CosmosSerializationFormatOptions get_CosmosSerializationFormatOptions();
    [CompilerGeneratedAttribute]
internal void set_CosmosSerializationFormatOptions(CosmosSerializationFormatOptions value);
    [CompilerGeneratedAttribute]
internal Nullable`1<SupportedSerializationFormats> get_SupportedSerializationFormats();
    [CompilerGeneratedAttribute]
internal void set_SupportedSerializationFormats(Nullable`1<SupportedSerializationFormats> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_ReturnResultsInDeterministicOrder();
    [CompilerGeneratedAttribute]
internal void set_ReturnResultsInDeterministicOrder(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal TestInjections get_TestSettings();
    [CompilerGeneratedAttribute]
internal void set_TestSettings(TestInjections value);
    [CompilerGeneratedAttribute]
internal FeedRange get_FeedRange();
    [CompilerGeneratedAttribute]
internal void set_FeedRange(FeedRange value);
    [CompilerGeneratedAttribute]
internal bool get_IsNonStreamingOrderByQueryFeatureDisabled();
    [CompilerGeneratedAttribute]
internal void set_IsNonStreamingOrderByQueryFeatureDisabled(bool value);
    [CompilerGeneratedAttribute]
internal bool get_EnableDistributedQueryGatewayMode();
    [CompilerGeneratedAttribute]
internal void set_EnableDistributedQueryGatewayMode(bool value);
    internal virtual void PopulateRequestOptions(RequestMessage request);
    internal static void FillContinuationToken(RequestMessage request, string continuationToken);
}
internal class Microsoft.Azure.Cosmos.QueryResponse : ResponseMessage {
    private Lazy`1<MemoryStream> memoryStream;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<CosmosElement> <CosmosElements>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosSerializationFormatOptions <CosmosSerializationOptions>k__BackingField;
    public int Count { get; }
    public Stream Content { get; }
    internal IReadOnlyList`1<CosmosElement> CosmosElements { get; }
    internal CosmosQueryResponseMessageHeaders QueryHeaders { get; }
    internal CosmosSerializationFormatOptions CosmosSerializationOptions { get; }
    private QueryResponse(IReadOnlyList`1<CosmosElement> result, int count, CosmosQueryResponseMessageHeaders responseHeaders, HttpStatusCode statusCode, RequestMessage requestMessage, CosmosException cosmosException, Lazy`1<MemoryStream> memoryStream, CosmosSerializationFormatOptions serializationOptions, ITrace trace);
    [CompilerGeneratedAttribute]
public int get_Count();
    public virtual Stream get_Content();
    [CompilerGeneratedAttribute]
internal virtual IReadOnlyList`1<CosmosElement> get_CosmosElements();
    internal virtual CosmosQueryResponseMessageHeaders get_QueryHeaders();
    [CompilerGeneratedAttribute]
internal virtual CosmosSerializationFormatOptions get_CosmosSerializationOptions();
    internal bool GetHasMoreResults();
    internal static QueryResponse CreateSuccess(IReadOnlyList`1<CosmosElement> result, int count, CosmosQueryResponseMessageHeaders responseHeaders, CosmosSerializationFormatOptions serializationOptions, ITrace trace);
    internal static QueryResponse CreateFailure(CosmosQueryResponseMessageHeaders responseHeaders, HttpStatusCode statusCode, RequestMessage requestMessage, CosmosException cosmosException, ITrace trace);
}
internal class Microsoft.Azure.Cosmos.QueryResponse`1 : FeedResponse`1<T> {
    private CosmosSerializerCore serializerCore;
    private CosmosSerializationFormatOptions serializationOptions;
    private IReadOnlyList`1<T> resource;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosQueryResponseMessageHeaders <QueryHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<string> <IndexUtilizationText>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    public string ContinuationToken { get; }
    public double RequestCharge { get; }
    public Headers Headers { get; }
    public HttpStatusCode StatusCode { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public int Count { get; }
    internal CosmosQueryResponseMessageHeaders QueryHeaders { get; }
    private Lazy`1<string> IndexUtilizationText { get; }
    public string IndexMetrics { get; }
    public IEnumerable`1<T> Resource { get; }
    internal RequestMessage RequestMessage { get; }
    private QueryResponse`1(HttpStatusCode httpStatusCode, IReadOnlyList`1<CosmosElement> cosmosElements, CosmosQueryResponseMessageHeaders responseMessageHeaders, CosmosDiagnostics diagnostics, CosmosSerializerCore serializerCore, CosmosSerializationFormatOptions serializationOptions, RequestMessage requestMessage);
    public virtual string get_ContinuationToken();
    public virtual double get_RequestCharge();
    public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    public virtual int get_Count();
    [CompilerGeneratedAttribute]
internal CosmosQueryResponseMessageHeaders get_QueryHeaders();
    [CompilerGeneratedAttribute]
private Lazy`1<string> get_IndexUtilizationText();
    public virtual string get_IndexMetrics();
    public virtual IEnumerator`1<T> GetEnumerator();
    public virtual IEnumerable`1<T> get_Resource();
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
    internal static QueryResponse`1<TInput> CreateResponse(QueryResponse cosmosQueryResponse, CosmosSerializerCore serializerCore);
}
internal class Microsoft.Azure.Cosmos.RangeIndex : Index {
    [CompilerGeneratedAttribute]
private DataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<short> <Precision>k__BackingField;
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public DataType DataType { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<short> Precision { get; public set; }
    public RangeIndex(DataType dataType);
    public RangeIndex(DataType dataType, short precision);
    [CompilerGeneratedAttribute]
public DataType get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(DataType value);
    [CompilerGeneratedAttribute]
public Nullable`1<short> get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(Nullable`1<short> value);
    public sealed virtual object Clone();
}
internal class Microsoft.Azure.Cosmos.Reactive.EmptyAsyncEnumerator`1 : object {
    public T Current { get; }
    public sealed virtual T get_Current();
    public sealed virtual ValueTask DisposeAsync();
    public sealed virtual ValueTask`1<bool> MoveNextAsync();
    public ValueTask`1<bool> MoveNextAsync(ITrace trace);
}
internal class Microsoft.Azure.Cosmos.Reactive.JustAsyncEnumerator`1 : object {
    private IEnumerator`1<T> enumerator;
    public T Current { get; }
    public JustAsyncEnumerator`1(T[] items);
    public sealed virtual T get_Current();
    public sealed virtual ValueTask DisposeAsync();
    public sealed virtual ValueTask`1<bool> MoveNextAsync();
    public ValueTask`1<bool> MoveNextAsync(ITrace trace);
}
internal class Microsoft.Azure.Cosmos.ReadFeed.Pagination.CrossPartitionReadFeedAsyncEnumerator : object {
    private CrossPartitionRangePageAsyncEnumerator`2<ReadFeedPage, ReadFeedState> crossPartitionEnumerator;
    [CompilerGeneratedAttribute]
private TryCatch`1<CrossFeedRangePage`2<ReadFeedPage, ReadFeedState>> <Current>k__BackingField;
    public TryCatch`1<CrossFeedRangePage`2<ReadFeedPage, ReadFeedState>> Current { get; public set; }
    private CrossPartitionReadFeedAsyncEnumerator(CrossPartitionRangePageAsyncEnumerator`2<ReadFeedPage, ReadFeedState> crossPartitionEnumerator);
    [CompilerGeneratedAttribute]
public sealed virtual TryCatch`1<CrossFeedRangePage`2<ReadFeedPage, ReadFeedState>> get_Current();
    [CompilerGeneratedAttribute]
public void set_Current(TryCatch`1<CrossFeedRangePage`2<ReadFeedPage, ReadFeedState>> value);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ReadFeed.Pagination.CrossPartitionReadFeedAsyncEnumerator/<MoveNextAsync>d__6")]
public sealed virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
    public sealed virtual ValueTask DisposeAsync();
    public static CrossPartitionReadFeedAsyncEnumerator Create(IDocumentContainer documentContainer, CrossFeedRangeState`1<ReadFeedState> crossFeedRangeState, ReadFeedExecutionOptions readFeedPaginationOptions);
    private static CreatePartitionRangePageAsyncEnumerator`2<ReadFeedPage, ReadFeedState> MakeCreateFunction(IReadFeedDataSource readFeedDataSource, ReadFeedExecutionOptions readFeedPaginationOptions);
}
internal interface Microsoft.Azure.Cosmos.ReadFeed.Pagination.IMonadicReadFeedDataSource {
    public abstract virtual Task`1<TryCatch`1<ReadFeedPage>> MonadicReadFeedAsync(FeedRangeState`1<ReadFeedState> feedRangeState, ReadFeedExecutionOptions readFeedPaginationOptions, ITrace trace, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Cosmos.ReadFeed.Pagination.IReadFeedDataSource {
    public abstract virtual Task`1<ReadFeedPage> ReadFeedAsync(FeedRangeState`1<ReadFeedState> feedRangeState, ReadFeedExecutionOptions readFeedPaginationOptions, ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ReadFeed.Pagination.ReadFeedBeginningState : ReadFeedState {
    public static ReadFeedBeginningState Singleton;
    private static ReadFeedBeginningState();
}
internal class Microsoft.Azure.Cosmos.ReadFeed.Pagination.ReadFeedContinuationState : ReadFeedState {
    [CompilerGeneratedAttribute]
private CosmosElement <ContinuationToken>k__BackingField;
    public CosmosElement ContinuationToken { get; }
    public ReadFeedContinuationState(CosmosElement continuationToken);
    [CompilerGeneratedAttribute]
public CosmosElement get_ContinuationToken();
}
internal class Microsoft.Azure.Cosmos.ReadFeed.Pagination.ReadFeedExecutionOptions : ExecutionOptions {
    public static ReadFeedExecutionOptions Default;
    public static ImmutableHashSet`1<string> BannedHeaders;
    [CompilerGeneratedAttribute]
private Nullable`1<PaginationDirection> <Direction>k__BackingField;
    public Nullable`1<PaginationDirection> Direction { get; }
    protected ImmutableHashSet`1<string> BannedAdditionalHeaders { get; }
    public ReadFeedExecutionOptions(Nullable`1<PaginationDirection> paginationDirection, Nullable`1<int> pageSizeHint, Dictionary`2<string, string> additionalHeaders);
    private static ReadFeedExecutionOptions();
    [CompilerGeneratedAttribute]
public Nullable`1<PaginationDirection> get_Direction();
    protected virtual ImmutableHashSet`1<string> get_BannedAdditionalHeaders();
}
internal static class Microsoft.Azure.Cosmos.ReadFeed.Pagination.ReadFeedFeedRangeStateSerializer : object {
    public static CosmosElement ToCosmosElement(FeedRangeState`1<ReadFeedState> feedRangeState);
}
internal class Microsoft.Azure.Cosmos.ReadFeed.Pagination.ReadFeedPage : Page`1<ReadFeedState> {
    public static ImmutableHashSet`1<string> BannedHeaders;
    [CompilerGeneratedAttribute]
private Stream <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemCount>k__BackingField;
    public Stream Content { get; }
    public int ItemCount { get; }
    protected ImmutableHashSet`1<string> DerivedClassBannedHeaders { get; }
    public ReadFeedPage(Stream content, double requestCharge, int itemCount, string activityId, IReadOnlyDictionary`2<string, string> additionalHeaders, ReadFeedState state);
    private static ReadFeedPage();
    [CompilerGeneratedAttribute]
public Stream get_Content();
    [CompilerGeneratedAttribute]
public virtual int get_ItemCount();
    protected virtual ImmutableHashSet`1<string> get_DerivedClassBannedHeaders();
}
internal abstract class Microsoft.Azure.Cosmos.ReadFeed.Pagination.ReadFeedState : State {
    public static ReadFeedState Beginning();
    public static ReadFeedState Continuation(CosmosElement cosmosElement);
}
internal class Microsoft.Azure.Cosmos.ReadFeed.ReadFeedCrossFeedRangeAsyncEnumerable : object {
    private IDocumentContainer documentContainer;
    private ReadFeedCrossFeedRangeState state;
    private ReadFeedExecutionOptions readFeedPaginationOptions;
    public ReadFeedCrossFeedRangeAsyncEnumerable(IDocumentContainer documentContainer, ReadFeedCrossFeedRangeState state, ReadFeedExecutionOptions readFeedPaginationOptions);
    public sealed virtual IAsyncEnumerator`1<TryCatch`1<ReadFeedPage>> GetAsyncEnumerator(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ReadFeed.ReadFeedCrossFeedRangeAsyncEnumerator : object {
    private CrossPartitionReadFeedAsyncEnumerator enumerator;
    [CompilerGeneratedAttribute]
private TryCatch`1<ReadFeedPage> <Current>k__BackingField;
    public TryCatch`1<ReadFeedPage> Current { get; private set; }
    public ReadFeedCrossFeedRangeAsyncEnumerator(CrossPartitionReadFeedAsyncEnumerator enumerator);
    [CompilerGeneratedAttribute]
public sealed virtual TryCatch`1<ReadFeedPage> get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(TryCatch`1<ReadFeedPage> value);
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ReadFeed.ReadFeedCrossFeedRangeAsyncEnumerator/<MoveNextAsync>d__7")]
public sealed virtual ValueTask`1<bool> MoveNextAsync(ITrace trace, CancellationToken cancellationToken);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.ReadFeed.ReadFeedCrossFeedRangeState : ValueType {
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<FeedRangeState`1<ReadFeedState>> <FeedRangeStates>k__BackingField;
    internal ReadOnlyMemory`1<FeedRangeState`1<ReadFeedState>> FeedRangeStates { get; }
    public ReadFeedCrossFeedRangeState(IReadOnlyList`1<FeedRangeState`1<ReadFeedState>> feedRangeStates);
    internal ReadFeedCrossFeedRangeState(ReadOnlyMemory`1<FeedRangeState`1<ReadFeedState>> feedRangeStates);
    [CompilerGeneratedAttribute]
internal ReadOnlyMemory`1<FeedRangeState`1<ReadFeedState>> get_FeedRangeStates();
    public ReadFeedCrossFeedRangeState Merge(ReadFeedCrossFeedRangeState first);
    public ReadFeedCrossFeedRangeState Merge(ReadFeedCrossFeedRangeState first, ReadFeedCrossFeedRangeState second);
    public ReadFeedCrossFeedRangeState Merge(ReadFeedCrossFeedRangeState[] readFeedCrossFeedRangeStates);
    public ReadFeedCrossFeedRangeState Merge(IReadOnlyList`1<ReadFeedCrossFeedRangeState> readFeedCrossFeedRangeStates);
    public bool TrySplit(ReadFeedCrossFeedRangeState& first, ReadFeedCrossFeedRangeState& second);
    public bool TrySplit(ReadFeedCrossFeedRangeState& first, ReadFeedCrossFeedRangeState& second, ReadFeedCrossFeedRangeState& third);
    public bool TrySplit(int numberOfPartitions, List`1& partitions);
    public CosmosElement ToCosmosElement();
    public virtual string ToString();
    public static ReadFeedCrossFeedRangeState Parse(string text);
    public static bool TryParse(string text, ReadFeedCrossFeedRangeState& state);
    public static ReadFeedCrossFeedRangeState CreateFromBeginning();
    public static ReadFeedCrossFeedRangeState CreateFromBeginning(FeedRange feedRange);
    public static ReadFeedCrossFeedRangeState CreateFromContinuation(CosmosElement continuation);
    public static ReadFeedCrossFeedRangeState CreateFromContinuation(CosmosElement continuation, FeedRange feedRange);
}
internal class Microsoft.Azure.Cosmos.ReadFeed.ReadFeedIteratorCore : FeedIteratorInternal {
    private TryCatch`1<CrossPartitionReadFeedAsyncEnumerator> monadicEnumerator;
    private QueryRequestOptions queryRequestOptions;
    private bool hasMoreResults;
    public bool HasMoreResults { get; }
    public ReadFeedIteratorCore(IDocumentContainer documentContainer, string continuationToken, ReadFeedExecutionOptions readFeedPaginationOptions, QueryRequestOptions queryRequestOptions, ContainerInternal container, CancellationToken cancellationToken);
    public virtual bool get_HasMoreResults();
    public virtual Task`1<ResponseMessage> ReadNextAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ReadFeed.ReadFeedIteratorCore/<ReadNextAsync>d__7")]
public virtual Task`1<ResponseMessage> ReadNextAsync(ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ReadFeed.ReadFeedPage : object {
    [CompilerGeneratedAttribute]
private CosmosArray <Documents>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RequestCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ReadFeedCrossFeedRangeState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <AdditionalHeaders>k__BackingField;
    public CosmosArray Documents { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public Nullable`1<ReadFeedCrossFeedRangeState> State { get; }
    public IReadOnlyDictionary`2<string, string> AdditionalHeaders { get; }
    public ReadFeedPage(CosmosArray documents, double requestCharge, string activityId, Nullable`1<ReadFeedCrossFeedRangeState> state, IReadOnlyDictionary`2<string, string> additionalHeaders);
    [CompilerGeneratedAttribute]
public CosmosArray get_Documents();
    [CompilerGeneratedAttribute]
public double get_RequestCharge();
    [CompilerGeneratedAttribute]
public string get_ActivityId();
    [CompilerGeneratedAttribute]
public Nullable`1<ReadFeedCrossFeedRangeState> get_State();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_AdditionalHeaders();
}
internal enum Microsoft.Azure.Cosmos.ReadFeedKeyType : Enum {
    public int value__;
    public static ReadFeedKeyType ResourceId;
    public static ReadFeedKeyType EffectivePartitionKey;
}
internal class Microsoft.Azure.Cosmos.ReadFeedResponse`1 : FeedResponse`1<T> {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    public int Count { get; }
    public string ContinuationToken { get; }
    public Headers Headers { get; }
    public IEnumerable`1<T> Resource { get; }
    public HttpStatusCode StatusCode { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public string IndexMetrics { get; }
    internal RequestMessage RequestMessage { get; }
    internal ReadFeedResponse`1(HttpStatusCode httpStatusCode, IEnumerable`1<T> resources, int resourceCount, Headers responseMessageHeaders, CosmosDiagnostics diagnostics, RequestMessage requestMessage);
    [CompilerGeneratedAttribute]
public virtual int get_Count();
    public virtual string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<T> get_Resource();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    [CompilerGeneratedAttribute]
public virtual string get_IndexMetrics();
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
    public virtual IEnumerator`1<T> GetEnumerator();
    internal static ReadFeedResponse`1<TInput> CreateResponse(ResponseMessage responseMessage, CosmosSerializerCore serializerCore);
}
internal abstract class Microsoft.Azure.Cosmos.ReadManyHelper : object {
    public abstract virtual Task`1<ResponseMessage> ExecuteReadManyRequestAsync(IReadOnlyList`1<ValueTuple`2<string, PartitionKey>> items, ReadManyRequestOptions readManyRequestOptions, ITrace trace, CancellationToken cancellationToken);
    public abstract virtual Task`1<FeedResponse`1<T>> ExecuteReadManyRequestAsync(IReadOnlyList`1<ValueTuple`2<string, PartitionKey>> items, ReadManyRequestOptions readManyRequestOptions, ITrace trace, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.ReadManyQueryHelper : ReadManyHelper {
    private List`1<string> partitionKeySelectors;
    private PartitionKeyDefinition partitionKeyDefinition;
    private int maxConcurrency;
    private int maxItemsPerQuery;
    private ContainerCore container;
    private CosmosClientContext clientContext;
    public ReadManyQueryHelper(PartitionKeyDefinition partitionKeyDefinition, ContainerCore container);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ReadManyQueryHelper/<ExecuteReadManyRequestAsync>d__7")]
public virtual Task`1<ResponseMessage> ExecuteReadManyRequestAsync(IReadOnlyList`1<ValueTuple`2<string, PartitionKey>> items, ReadManyRequestOptions readManyRequestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ReadManyQueryHelper/<ExecuteReadManyRequestAsync>d__8`1")]
public virtual Task`1<FeedResponse`1<T>> ExecuteReadManyRequestAsync(IReadOnlyList`1<ValueTuple`2<string, PartitionKey>> items, ReadManyRequestOptions readManyRequestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ReadManyQueryHelper/<ReadManyTaskHelperAsync>d__9")]
internal Task`1<List`1[]> ReadManyTaskHelperAsync(IDictionary`2<PartitionKeyRange, List`1<ValueTuple`2<string, PartitionKey>>> partitionKeyRangeItemMap, ReadManyRequestOptions readManyRequestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ReadManyQueryHelper/<CreatePartitionKeyRangeItemListMapAsync>d__10")]
private Task`1<IDictionary`2<PartitionKeyRange, List`1<ValueTuple`2<string, PartitionKey>>>> CreatePartitionKeyRangeItemListMapAsync(IReadOnlyList`1<ValueTuple`2<string, PartitionKey>> items, ITrace trace, CancellationToken cancellationToken);
    private ResponseMessage CombineStreamsFromQueryResponses(List`1[] queryResponses, string collectionRid, ITrace trace);
    private FeedResponse`1<T> CombineFeedResponseFromQueryResponses(List`1[] queryResponses, ITrace trace);
    private QueryDefinition CreateReadManyQueryDefinitionForId(List`1<ValueTuple`2<string, PartitionKey>> items, int startIndex);
    private QueryDefinition CreateReadManyQueryDefinitionForOther(List`1<ValueTuple`2<string, PartitionKey>> items, int startIndex);
    private List`1<string> CreatePkSelectors(PartitionKeyDefinition partitionKeyDefinition);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ReadManyQueryHelper/<GenerateStreamResponsesForPartitionAsync>d__16")]
private Task`1<List`1<ResponseMessage>> GenerateStreamResponsesForPartitionAsync(QueryDefinition queryDefinition, PartitionKeyRange partitionKeyRange, ReadManyRequestOptions readManyRequestOptions, ITrace trace, CancellationToken cancellationToken);
    private void CancelCancellationToken(CancellationToken cancellationToken);
    private ValueTask`1<PartitionKeyInternal> GetPartitionKeyInternalAsync(PartitionKey partitionKey, ITrace trace, CancellationToken cancellationToken);
}
public class Microsoft.Azure.Cosmos.ReadManyRequestOptions : RequestOptions {
    [CompilerGeneratedAttribute]
private string <SessionToken>k__BackingField;
    public Nullable`1<ConsistencyLevel> ConsistencyLevel { get; public set; }
    public string SessionToken { get; public set; }
    public Nullable`1<ConsistencyLevel> get_ConsistencyLevel();
    public void set_ConsistencyLevel(Nullable`1<ConsistencyLevel> value);
    [CompilerGeneratedAttribute]
public string get_SessionToken();
    [CompilerGeneratedAttribute]
public void set_SessionToken(string value);
    internal QueryRequestOptions ConvertToQueryRequestOptions();
}
internal enum Microsoft.Azure.Cosmos.ReadType : Enum {
    public int value__;
    public static ReadType Item;
    public static ReadType Feed;
    public static ReadType Query;
    public static ReadType HeadFeed;
}
internal class Microsoft.Azure.Cosmos.RegionNameMapper : object {
    private Dictionary`2<string, string> normalizedToCosmosDBRegionNameMapping;
    public string GetCosmosDBRegionName(string normalizedRegionName);
}
public static class Microsoft.Azure.Cosmos.Regions : object {
    public static string WestUS;
    public static string WestUS2;
    public static string WestCentralUS;
    public static string EastUS;
    public static string EastUS2;
    public static string CentralUS;
    public static string SouthCentralUS;
    public static string NorthCentralUS;
    public static string WestEurope;
    public static string NorthEurope;
    public static string EastAsia;
    public static string SoutheastAsia;
    public static string JapanEast;
    public static string JapanWest;
    public static string AustraliaEast;
    public static string AustraliaSoutheast;
    public static string CentralIndia;
    public static string SouthIndia;
    public static string WestIndia;
    public static string CanadaEast;
    public static string CanadaCentral;
    public static string GermanyCentral;
    public static string GermanyNortheast;
    public static string ChinaNorth;
    public static string ChinaEast;
    public static string ChinaNorth2;
    public static string ChinaEast2;
    public static string KoreaSouth;
    public static string KoreaCentral;
    public static string UKWest;
    public static string UKSouth;
    public static string BrazilSouth;
    public static string USGovArizona;
    public static string USGovTexas;
    public static string USGovVirginia;
    public static string EastUS2EUAP;
    public static string CentralUSEUAP;
    public static string FranceCentral;
    public static string FranceSouth;
    public static string USDoDCentral;
    public static string USDoDEast;
    public static string AustraliaCentral;
    public static string AustraliaCentral2;
    public static string SouthAfricaNorth;
    public static string SouthAfricaWest;
    public static string UAECentral;
    public static string UAENorth;
    public static string USNatEast;
    public static string USNatWest;
    public static string USSecEast;
    public static string USSecWest;
    public static string USSecWestCentral;
    public static string SwitzerlandNorth;
    public static string SwitzerlandWest;
    public static string GermanyNorth;
    public static string GermanyWestCentral;
    public static string NorwayEast;
    public static string NorwayWest;
    public static string BrazilSoutheast;
    public static string WestUS3;
    public static string JioIndiaCentral;
    public static string JioIndiaWest;
    public static string EastUSSLV;
    public static string SwedenCentral;
    public static string SwedenSouth;
    public static string QatarCentral;
    public static string ChinaNorth3;
    public static string ChinaEast3;
    public static string PolandCentral;
    public static string MalaysiaSouth;
    public static string ItalyNorth;
    public static string IsraelCentral;
    public static string MexicoCentral;
    public static string SpainCentral;
    public static string TaiwanNorth;
    public static string TaiwanNorthwest;
    public static string NewZealandNorth;
}
internal class Microsoft.Azure.Cosmos.RenameCollectionAwareClientRetryPolicy : object {
    private IDocumentClientRetryPolicy retryPolicy;
    private ISessionContainer sessionContainer;
    private ClientCollectionCache collectionCache;
    private DocumentServiceRequest request;
    private bool hasTriggered;
    public RenameCollectionAwareClientRetryPolicy(ISessionContainer sessionContainer, ClientCollectionCache collectionCache, IDocumentClientRetryPolicy retryPolicy);
    public sealed virtual void OnBeforeSendRequest(DocumentServiceRequest request);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.RenameCollectionAwareClientRetryPolicy/<ShouldRetryAsync>d__7")]
public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(Exception exception, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.RenameCollectionAwareClientRetryPolicy/<ShouldRetryAsync>d__8")]
public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(ResponseMessage cosmosResponseMessage, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.RenameCollectionAwareClientRetryPolicy/<ShouldRetryInternalAsync>d__9")]
private Task`1<ShouldRetryResult> ShouldRetryInternalAsync(Nullable`1<HttpStatusCode> statusCode, Nullable`1<SubStatusCodes> subStatusCode, ShouldRetryResult shouldRetryResult, CancellationToken cancellationToken);
}
public abstract class Microsoft.Azure.Cosmos.RequestHandler : object {
    internal string FullHandlerName;
    [CompilerGeneratedAttribute]
private RequestHandler <InnerHandler>k__BackingField;
    public RequestHandler InnerHandler { get; public set; }
    [CompilerGeneratedAttribute]
public RequestHandler get_InnerHandler();
    [CompilerGeneratedAttribute]
public void set_InnerHandler(RequestHandler value);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.RequestHandler/<SendAsync>d__6")]
public virtual Task`1<ResponseMessage> SendAsync(RequestMessage request, CancellationToken cancellationToken);
}
public class Microsoft.Azure.Cosmos.RequestMessage : object {
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestUriString>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <InternalRequestUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ITrace <Trace>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestOptions <RequestOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceType <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationType <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionKeyRangeIdentity <PartitionKeyRangeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <UseGatewayMode>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentServiceRequest <DocumentServiceRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<DocumentServiceRequest> <OnBeforeSendRequestActions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseId>k__BackingField;
    private Lazy`1<Dictionary`2<string, object>> properties;
    private Lazy`1<Headers> headers;
    private bool disposed;
    private Stream content;
    public HttpMethod Method { get; private set; }
    public Uri RequestUri { get; }
    public Headers Headers { get; }
    public Stream Content { get; public set; }
    internal string RequestUriString { get; }
    internal Uri InternalRequestUri { get; private set; }
    internal ITrace Trace { get; internal set; }
    internal RequestOptions RequestOptions { get; internal set; }
    internal ResourceType ResourceType { get; internal set; }
    internal OperationType OperationType { get; internal set; }
    internal PartitionKeyRangeIdentity PartitionKeyRangeId { get; internal set; }
    internal Nullable`1<bool> UseGatewayMode { get; internal set; }
    internal DocumentServiceRequest DocumentServiceRequest { get; internal set; }
    internal Action`1<DocumentServiceRequest> OnBeforeSendRequestActions { get; internal set; }
    internal bool IsPropertiesInitialized { get; }
    internal bool IsPartitionKeyRangeHandlerRequired { get; }
    internal string ContainerId { get; internal set; }
    internal string DatabaseId { get; internal set; }
    public Dictionary`2<string, object> Properties { get; }
    public RequestMessage(HttpMethod method, Uri requestUri);
    internal RequestMessage(HttpMethod method, string requestUriString, ITrace trace);
    private RequestMessage(HttpMethod method, string requestUriString, ITrace trace, Headers headers, Dictionary`2<string, object> properties);
    [CompilerGeneratedAttribute]
public virtual HttpMethod get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(HttpMethod value);
    public virtual Uri get_RequestUri();
    public virtual Headers get_Headers();
    public virtual Stream get_Content();
    public virtual void set_Content(Stream value);
    [CompilerGeneratedAttribute]
internal string get_RequestUriString();
    [CompilerGeneratedAttribute]
internal Uri get_InternalRequestUri();
    [CompilerGeneratedAttribute]
private void set_InternalRequestUri(Uri value);
    [CompilerGeneratedAttribute]
internal ITrace get_Trace();
    [CompilerGeneratedAttribute]
internal void set_Trace(ITrace value);
    [CompilerGeneratedAttribute]
internal RequestOptions get_RequestOptions();
    [CompilerGeneratedAttribute]
internal void set_RequestOptions(RequestOptions value);
    [CompilerGeneratedAttribute]
internal ResourceType get_ResourceType();
    [CompilerGeneratedAttribute]
internal void set_ResourceType(ResourceType value);
    [CompilerGeneratedAttribute]
internal OperationType get_OperationType();
    [CompilerGeneratedAttribute]
internal void set_OperationType(OperationType value);
    [CompilerGeneratedAttribute]
internal PartitionKeyRangeIdentity get_PartitionKeyRangeId();
    [CompilerGeneratedAttribute]
internal void set_PartitionKeyRangeId(PartitionKeyRangeIdentity value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_UseGatewayMode();
    [CompilerGeneratedAttribute]
internal void set_UseGatewayMode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal DocumentServiceRequest get_DocumentServiceRequest();
    [CompilerGeneratedAttribute]
internal void set_DocumentServiceRequest(DocumentServiceRequest value);
    [CompilerGeneratedAttribute]
internal Action`1<DocumentServiceRequest> get_OnBeforeSendRequestActions();
    [CompilerGeneratedAttribute]
internal void set_OnBeforeSendRequestActions(Action`1<DocumentServiceRequest> value);
    internal bool get_IsPropertiesInitialized();
    internal bool get_IsPartitionKeyRangeHandlerRequired();
    [CompilerGeneratedAttribute]
internal string get_ContainerId();
    [CompilerGeneratedAttribute]
internal void set_ContainerId(string value);
    [CompilerGeneratedAttribute]
internal string get_DatabaseId();
    [CompilerGeneratedAttribute]
internal void set_DatabaseId(string value);
    public virtual Dictionary`2<string, object> get_Properties();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AddThroughputHeader(Nullable`1<int> throughputValue);
    internal void AddThroughputPropertiesHeader(ThroughputProperties throughputProperties);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.RequestMessage/<AssertPartitioningDetailsAsync>d__76")]
internal Task AssertPartitioningDetailsAsync(CosmosClient client, CancellationToken cancellationToken, ITrace trace);
    internal DocumentServiceRequest ToDocumentServiceRequest();
    internal RequestMessage Clone(ITrace newTrace, CloneableStream cloneContent);
    private static Dictionary`2<string, object> CreateDictionary();
    private static Headers CreateHeaders();
    private void OnBeforeRequestHandler(DocumentServiceRequest serviceRequest);
    private bool AssertPartitioningPropertiesAndHeaders();
    private bool IsMasterOperation();
    private void CheckDisposed();
}
public class Microsoft.Azure.Cosmos.RequestOptions : object {
    [CompilerGeneratedAttribute]
private string <IfMatchEtag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IfNoneMatchEtag>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Headers> <AddRequestHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PriorityLevel> <PriorityLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosThresholdOptions <CosmosThresholdOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExcludeRegions>k__BackingField;
    [CompilerGeneratedAttribute]
private AvailabilityStrategy <AvailabilityStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEffectivePartitionKeyRouting>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ConsistencyLevel> <BaseConsistencyLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisablePointOperationDiagnostics>k__BackingField;
    public string IfMatchEtag { get; public set; }
    public string IfNoneMatchEtag { get; public set; }
    public IReadOnlyDictionary`2<string, object> Properties { get; public set; }
    public Action`1<Headers> AddRequestHeaders { get; public set; }
    public Nullable`1<PriorityLevel> PriorityLevel { get; public set; }
    public CosmosThresholdOptions CosmosThresholdOptions { get; public set; }
    public List`1<string> ExcludeRegions { get; public set; }
    internal AvailabilityStrategy AvailabilityStrategy { get; internal set; }
    internal bool IsEffectivePartitionKeyRouting { get; internal set; }
    internal Nullable`1<ConsistencyLevel> BaseConsistencyLevel { get; internal set; }
    internal bool DisablePointOperationDiagnostics { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_IfMatchEtag();
    [CompilerGeneratedAttribute]
public void set_IfMatchEtag(string value);
    [CompilerGeneratedAttribute]
public string get_IfNoneMatchEtag();
    [CompilerGeneratedAttribute]
public void set_IfNoneMatchEtag(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IReadOnlyDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Action`1<Headers> get_AddRequestHeaders();
    [CompilerGeneratedAttribute]
public void set_AddRequestHeaders(Action`1<Headers> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PriorityLevel> get_PriorityLevel();
    [CompilerGeneratedAttribute]
public void set_PriorityLevel(Nullable`1<PriorityLevel> value);
    [CompilerGeneratedAttribute]
public CosmosThresholdOptions get_CosmosThresholdOptions();
    [CompilerGeneratedAttribute]
public void set_CosmosThresholdOptions(CosmosThresholdOptions value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ExcludeRegions();
    [CompilerGeneratedAttribute]
public void set_ExcludeRegions(List`1<string> value);
    [CompilerGeneratedAttribute]
internal AvailabilityStrategy get_AvailabilityStrategy();
    [CompilerGeneratedAttribute]
internal void set_AvailabilityStrategy(AvailabilityStrategy value);
    [CompilerGeneratedAttribute]
internal bool get_IsEffectivePartitionKeyRouting();
    [CompilerGeneratedAttribute]
internal void set_IsEffectivePartitionKeyRouting(bool value);
    [CompilerGeneratedAttribute]
internal virtual Nullable`1<ConsistencyLevel> get_BaseConsistencyLevel();
    [CompilerGeneratedAttribute]
internal virtual void set_BaseConsistencyLevel(Nullable`1<ConsistencyLevel> value);
    [CompilerGeneratedAttribute]
internal bool get_DisablePointOperationDiagnostics();
    [CompilerGeneratedAttribute]
internal void set_DisablePointOperationDiagnostics(bool value);
    internal virtual void PopulateRequestOptions(RequestMessage request);
    public RequestOptions ShallowCopy();
    internal bool TryGetResourceUri(Uri& resourceUri);
    internal static void SetSessionToken(RequestMessage request, string sessionToken);
}
internal static class Microsoft.Azure.Cosmos.Resource.CosmosExceptions.CosmosExceptionFactory : object {
    internal static CosmosException Create(DocumentClientException dce, ITrace trace);
    internal static CosmosException Create(HttpStatusCode statusCode, RequestMessage requestMessage, string errorMessage);
    internal static CosmosException Create(ResponseMessage responseMessage);
    internal static CosmosException Create(DocumentServiceResponse documentServiceResponse, Headers responseHeaders, ITrace trace);
    internal static CosmosException Create(StoreResponse storeResponse, RequestMessage requestMessage);
    internal static ValueTuple`2<Error, string> GetErrorFromStream(Stream content);
    private static bool ExceptionsToIgnore(Exception exception);
    internal static CosmosException CreateRequestTimeoutException(string message, Headers headers, string stackTrace, ITrace trace, Error error, Exception innerException);
    internal static CosmosException CreateThrottledException(string message, Headers headers, string stackTrace, ITrace trace, Error error, Exception innerException);
    internal static CosmosException CreateNotFoundException(string message, Headers headers, string stackTrace, ITrace trace, Error error, Exception innerException);
    internal static CosmosException CreateInternalServerErrorException(string message, Headers headers, string stackTrace, ITrace trace, Error error, Exception innerException);
    internal static CosmosException CreateBadRequestException(string message, Headers headers, string stackTrace, ITrace trace, Error error, Exception innerException);
    internal static CosmosException CreateServiceUnavailableException(string message, Headers headers, string stackTrace, ITrace trace, Error error, Exception innerException);
    internal static CosmosException CreateUnauthorizedException(string message, Headers headers, Exception innerException, string stackTrace, ITrace trace, Error error);
    internal static CosmosException Create(HttpStatusCode statusCode, string message, string stackTrace, Headers headers, ITrace trace, Error error, Exception innerException);
}
internal class Microsoft.Azure.Cosmos.Resource.FullFidelity.ChangeFeedMetadataFields : object {
    public static string ConflictResolutionTimestamp;
    public static string Lsn;
    public static string OperationType;
    public static string PreviousImageLSN;
    public static string TimeToLiveExpired;
}
internal class Microsoft.Azure.Cosmos.Resource.FullFidelity.Converters.ChangeFeedMetadataConverter : JsonConverter`1<ChangeFeedMetadata> {
    private static DateTime UnixEpoch;
    private static ChangeFeedMetadataConverter();
    public virtual ChangeFeedMetadata Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, ChangeFeedMetadata value, JsonSerializerOptions options);
    private static long ToUnixTimeInSecondsFromDateTime(DateTime date);
    private static DateTime ToDateTimeFromUnixTimeInSeconds(long unixTimeInSeconds);
}
internal class Microsoft.Azure.Cosmos.ResourceFeedReader`1 : object {
    private DocumentQuery`1<T> documentQuery;
    public bool HasMoreResults { get; }
    internal ResourceFeedReader`1(DocumentClient client, ResourceType resourceType, FeedOptions options, string resourceLink, object partitionKey);
    public bool get_HasMoreResults();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public Task`1<DocumentFeedResponse`1<T>> ExecuteNextAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ResourceFeedReader`1/<InternalExecuteNextAsync>d__7")]
private Task`1<DocumentFeedResponse`1<T>> InternalExecuteNextAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.ResourceFeedReaderClientExtensions : object {
    [ExtensionAttribute]
public static ResourceFeedReader`1<Database> CreateDatabaseFeedReader(DocumentClient client, FeedOptions options);
    [ExtensionAttribute]
public static ResourceFeedReader`1<Document> CreateDocumentFeedReader(DocumentClient client, string documentsFeedOrDatabaseLink, FeedOptions options, object partitionKey);
    [ExtensionAttribute]
public static ResourceFeedReader`1<PartitionKeyRange> CreatePartitionKeyRangeFeedReader(DocumentClient client, string partitionKeyRangesLink, FeedOptions options);
    [ExtensionAttribute]
public static ResourceFeedReader`1<DocumentCollection> CreateDocumentCollectionFeedReader(DocumentClient client, string collectionsLink, FeedOptions options);
    [ExtensionAttribute]
public static ResourceFeedReader`1<User> CreateUserFeedReader(DocumentClient client, string usersLink, FeedOptions options);
    [ExtensionAttribute]
public static ResourceFeedReader`1<UserDefinedType> CreateUserDefinedTypeFeedReader(DocumentClient client, string userDefinedTypesLink, FeedOptions options);
    [ExtensionAttribute]
public static ResourceFeedReader`1<Permission> CreatePermissionFeedReader(DocumentClient client, string permissionsLink, FeedOptions options);
    [ExtensionAttribute]
public static ResourceFeedReader`1<StoredProcedure> CreateStoredProcedureFeedReader(DocumentClient client, string storedProceduresLink, FeedOptions options);
    [ExtensionAttribute]
public static ResourceFeedReader`1<Trigger> CreateTriggerFeedReader(DocumentClient client, string triggersLink, FeedOptions options);
    [ExtensionAttribute]
public static ResourceFeedReader`1<UserDefinedFunction> CreateUserDefinedFunctionFeedReader(DocumentClient client, string userDefinedFunctionsLink, FeedOptions options);
    [ExtensionAttribute]
public static ResourceFeedReader`1<Attachment> CreateAttachmentFeedReader(DocumentClient client, string attachmentsLink, FeedOptions options);
    [ExtensionAttribute]
public static ResourceFeedReader`1<Conflict> CreateConflictFeedReader(DocumentClient client, string conflictsLink, FeedOptions options);
    [ExtensionAttribute]
internal static ResourceFeedReader`1<Schema> CreateSchemaFeedReader(DocumentClient client, string schemasLink, FeedOptions options);
    [ExtensionAttribute]
public static ResourceFeedReader`1<Offer> CreateOfferFeedReader(DocumentClient client, FeedOptions options);
    [ExtensionAttribute]
public static ResourceFeedReader`1<Snapshot> CreateSnapshotFeedReader(DocumentClient client, FeedOptions options);
}
internal class Microsoft.Azure.Cosmos.ResourceThrottleRetryPolicy : object {
    private static int DefaultMaxWaitTimeInSeconds;
    private static int DefaultRetryInSeconds;
    private UInt32 backoffDelayFactor;
    private int maxAttemptCount;
    private TimeSpan maxWaitTimeInMilliseconds;
    private int currentAttemptCount;
    private TimeSpan cumulativeRetryDelay;
    public ResourceThrottleRetryPolicy(int maxAttemptCount, int maxWaitTimeInSeconds, UInt32 backoffDelayFactor);
    public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(Exception exception, CancellationToken cancellationToken);
    public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(ResponseMessage cosmosResponseMessage, CancellationToken cancellationToken);
    private Task`1<ShouldRetryResult> ShouldRetryInternalAsync(Nullable`1<TimeSpan> retryAfter);
    private object GetExceptionMessage(Exception exception);
    public sealed virtual void OnBeforeSendRequest(DocumentServiceRequest request);
    private bool CheckIfRetryNeeded(Nullable`1<TimeSpan> retryAfter, TimeSpan& retryDelay);
    private bool IsValidThrottleStatusCode(Nullable`1<HttpStatusCode> statusCode);
}
internal class Microsoft.Azure.Cosmos.ResourceToken : object {
    [CompilerGeneratedAttribute]
private string <ResourceLink>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <ResourcePartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    public string ResourceLink { get; public set; }
    public Object[] ResourcePartitionKey { get; public set; }
    public string Token { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ResourceLink();
    [CompilerGeneratedAttribute]
public void set_ResourceLink(string value);
    [CompilerGeneratedAttribute]
public Object[] get_ResourcePartitionKey();
    [CompilerGeneratedAttribute]
public void set_ResourcePartitionKey(Object[] value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
}
public abstract class Microsoft.Azure.Cosmos.Response`1 : object {
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    public Headers Headers { get; }
    public T Resource { get; }
    public HttpStatusCode StatusCode { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ETag { get; }
    public CosmosDiagnostics Diagnostics { get; }
    internal RequestMessage RequestMessage { get; }
    public abstract virtual Headers get_Headers();
    public abstract virtual T get_Resource();
    public static T op_Implicit(Response`1<T> response);
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual double get_RequestCharge();
    public abstract virtual string get_ActivityId();
    public abstract virtual string get_ETag();
    public abstract virtual CosmosDiagnostics get_Diagnostics();
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
}
public class Microsoft.Azure.Cosmos.ResponseMessage : object {
    private CosmosDiagnostics diagnostics;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<string> <IndexUtilizationText>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private ITrace <Trace>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosException <CosmosException>k__BackingField;
    private bool disposed;
    private Stream content;
    public HttpStatusCode StatusCode { get; private set; }
    public Stream Content { get; public set; }
    public string ErrorMessage { get; }
    public Headers Headers { get; }
    public string ContinuationToken { get; }
    private Lazy`1<string> IndexUtilizationText { get; }
    public string IndexMetrics { get; }
    public RequestMessage RequestMessage { get; internal set; }
    public CosmosDiagnostics Diagnostics { get; public set; }
    internal ITrace Trace { get; internal set; }
    internal CosmosException CosmosException { get; }
    public bool IsSuccessStatusCode { get; }
    public ResponseMessage(HttpStatusCode statusCode, RequestMessage requestMessage, string errorMessage);
    internal ResponseMessage(HttpStatusCode statusCode, RequestMessage requestMessage, Headers headers, CosmosException cosmosException, ITrace trace);
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(HttpStatusCode value);
    public virtual Stream get_Content();
    public virtual void set_Content(Stream value);
    public virtual string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    public virtual string get_ContinuationToken();
    [CompilerGeneratedAttribute]
private Lazy`1<string> get_IndexUtilizationText();
    public string get_IndexMetrics();
    [CompilerGeneratedAttribute]
public virtual RequestMessage get_RequestMessage();
    [CompilerGeneratedAttribute]
internal virtual void set_RequestMessage(RequestMessage value);
    public virtual CosmosDiagnostics get_Diagnostics();
    public virtual void set_Diagnostics(CosmosDiagnostics value);
    [CompilerGeneratedAttribute]
internal ITrace get_Trace();
    [CompilerGeneratedAttribute]
internal void set_Trace(ITrace value);
    [CompilerGeneratedAttribute]
internal CosmosException get_CosmosException();
    public virtual bool get_IsSuccessStatusCode();
    public virtual ResponseMessage EnsureSuccessStatusCode();
    public sealed virtual void Dispose();
    internal string GetResourceAddress();
    protected virtual void Dispose(bool disposing);
    private void CheckDisposed();
    internal static Lazy`1<string> DecodeIndexMetrics(Headers responseMessageHeaders, bool isBase64Encoded);
}
internal enum Microsoft.Azure.Cosmos.RestoreState : Enum {
    public int value__;
    public static RestoreState Invalid;
    public static RestoreState RestorePending;
    public static RestoreState RestoreCompleted;
    public static RestoreState RestoreFailed;
}
internal class Microsoft.Azure.Cosmos.RetryOptions : object {
    internal static int DefaultMaxRetryWaitTimeInSeconds;
    internal static int DefaultMaxRetryAttemptsOnThrottledRequests;
    private RetryWithConfiguration retryWithConfiguration;
    private int maxRetryAttemptsOnThrottledRequests;
    private int maxRetryWaitTime;
    public int MaxRetryAttemptsOnThrottledRequests { get; public set; }
    public int MaxRetryWaitTimeInSeconds { get; public set; }
    internal Nullable`1<int> InitialRetryForRetryWithMilliseconds { get; internal set; }
    internal Nullable`1<int> MaximumRetryForRetryWithMilliseconds { get; internal set; }
    internal Nullable`1<int> RandomSaltForRetryWithMilliseconds { get; internal set; }
    internal Nullable`1<int> TotalWaitTimeForRetryWithMilliseconds { get; internal set; }
    public int get_MaxRetryAttemptsOnThrottledRequests();
    public void set_MaxRetryAttemptsOnThrottledRequests(int value);
    public int get_MaxRetryWaitTimeInSeconds();
    public void set_MaxRetryWaitTimeInSeconds(int value);
    internal Nullable`1<int> get_InitialRetryForRetryWithMilliseconds();
    internal void set_InitialRetryForRetryWithMilliseconds(Nullable`1<int> value);
    internal Nullable`1<int> get_MaximumRetryForRetryWithMilliseconds();
    internal void set_MaximumRetryForRetryWithMilliseconds(Nullable`1<int> value);
    internal Nullable`1<int> get_RandomSaltForRetryWithMilliseconds();
    internal void set_RandomSaltForRetryWithMilliseconds(Nullable`1<int> value);
    internal Nullable`1<int> get_TotalWaitTimeForRetryWithMilliseconds();
    internal void set_TotalWaitTimeForRetryWithMilliseconds(Nullable`1<int> value);
    internal RetryWithConfiguration GetRetryWithConfiguration();
}
internal class Microsoft.Azure.Cosmos.RetryPolicy : object {
    private GlobalPartitionEndpointManager partitionKeyRangeLocationCache;
    private GlobalEndpointManager globalEndpointManager;
    private bool enableEndpointDiscovery;
    private bool isPertitionLevelFailoverEnabled;
    private RetryOptions retryOptions;
    public RetryPolicy(GlobalEndpointManager globalEndpointManager, ConnectionPolicy connectionPolicy, GlobalPartitionEndpointManager partitionKeyRangeLocationCache);
    public sealed virtual IDocumentClientRetryPolicy GetRequestPolicy();
}
internal class Microsoft.Azure.Cosmos.Routing.ClientCollectionCache : CollectionCache {
    private static string TelemetrySourceName;
    private IStoreModel storeModel;
    private ICosmosAuthorizationTokenProvider tokenProvider;
    private IRetryPolicyFactory retryPolicy;
    private ISessionContainer sessionContainer;
    private TelemetryToServiceHelper telemetryToServiceHelper;
    public ClientCollectionCache(ISessionContainer sessionContainer, IStoreModel storeModel, ICosmosAuthorizationTokenProvider tokenProvider, IRetryPolicyFactory retryPolicy, TelemetryToServiceHelper telemetryToServiceHelper);
    protected virtual Task`1<ContainerProperties> GetByRidAsync(string apiVersion, string collectionRid, ITrace trace, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    protected virtual Task`1<ContainerProperties> GetByNameAsync(string apiVersion, string resourceAddress, ITrace trace, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    internal virtual Task`1<ContainerProperties> ResolveByNameAsync(string apiVersion, string resourceAddress, bool forceRefesh, ITrace trace, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    public virtual Task`1<ContainerProperties> ResolveCollectionAsync(DocumentServiceRequest request, CancellationToken cancellationToken, ITrace trace);
    public virtual Task`1<ContainerProperties> ResolveCollectionAsync(DocumentServiceRequest request, TimeSpan refreshAfter, CancellationToken cancellationToken, ITrace trace);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.ClientCollectionCache/<ResolveCollectionWithSessionContainerCleanupAsync>d__12")]
private Task`1<ContainerProperties> ResolveCollectionWithSessionContainerCleanupAsync(DocumentServiceRequest request, Func`1<Task`1<ContainerProperties>> resolveContainerProvider);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.ClientCollectionCache/<ReadCollectionAsync>d__13")]
private Task`1<ContainerProperties> ReadCollectionAsync(string collectionLink, IDocumentClientRetryPolicy retryPolicyInstance, ITrace trace, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ContainerProperties> <>n__0(string apiVersion, string resourceAddress, bool forceRefesh, ITrace trace, IClientSideRequestStatistics clientSideRequestStatistics, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ContainerProperties> <>n__1(DocumentServiceRequest request, CancellationToken cancellationToken, ITrace trace);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ContainerProperties> <>n__2(DocumentServiceRequest request, TimeSpan refreshAfter, CancellationToken cancellationToken, ITrace trace);
}
internal class Microsoft.Azure.Cosmos.Routing.CollectionRoutingMap : object {
    private Dictionary`2<string, Tuple`2<PartitionKeyRange, ServiceIdentity>> rangeById;
    private List`1<PartitionKeyRange> orderedPartitionKeyRanges;
    private List`1<Range`1<string>> orderedRanges;
    private HashSet`1<string> goneRanges;
    private static int InvalidPkRangeId;
    [CompilerGeneratedAttribute]
private int <HighestNonOfflinePkRangeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollectionUniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChangeFeedNextIfNoneMatch>k__BackingField;
    internal int HighestNonOfflinePkRangeId { get; private set; }
    public string CollectionUniqueId { get; private set; }
    public string ChangeFeedNextIfNoneMatch { get; private set; }
    public IReadOnlyList`1<PartitionKeyRange> OrderedPartitionKeyRanges { get; }
    public CollectionRoutingMap(CollectionRoutingMap collectionRoutingMap, string changeFeedNextIfNoneMatch);
    private CollectionRoutingMap(Dictionary`2<string, Tuple`2<PartitionKeyRange, ServiceIdentity>> rangeById, List`1<PartitionKeyRange> orderedPartitionKeyRanges, string collectionUniqueId, string changeFeedNextIfNoneMatch);
    private static CollectionRoutingMap();
    [CompilerGeneratedAttribute]
internal int get_HighestNonOfflinePkRangeId();
    [CompilerGeneratedAttribute]
private void set_HighestNonOfflinePkRangeId(int value);
    public static CollectionRoutingMap TryCreateCompleteRoutingMap(IEnumerable`1<Tuple`2<PartitionKeyRange, ServiceIdentity>> ranges, string collectionUniqueId, string changeFeedNextIfNoneMatch);
    [CompilerGeneratedAttribute]
public string get_CollectionUniqueId();
    [CompilerGeneratedAttribute]
private void set_CollectionUniqueId(string value);
    [CompilerGeneratedAttribute]
public string get_ChangeFeedNextIfNoneMatch();
    [CompilerGeneratedAttribute]
private void set_ChangeFeedNextIfNoneMatch(string value);
    public IReadOnlyList`1<PartitionKeyRange> get_OrderedPartitionKeyRanges();
    public IReadOnlyList`1<PartitionKeyRange> GetOverlappingRanges(Range`1<string> range);
    public IReadOnlyList`1<PartitionKeyRange> GetOverlappingRanges(IReadOnlyList`1<Range`1<string>> providedPartitionKeyRanges);
    public PartitionKeyRange GetRangeByEffectivePartitionKey(string effectivePartitionKeyValue);
    public PartitionKeyRange TryGetRangeByPartitionKeyRangeId(string partitionKeyRangeId);
    public ServiceIdentity TryGetInfoByPartitionKeyRangeId(string partitionKeyRangeId);
    public CollectionRoutingMap TryCombine(IEnumerable`1<Tuple`2<PartitionKeyRange, ServiceIdentity>> ranges, string changeFeedNextIfNoneMatch);
    private static bool IsCompleteSetOfRanges(IList`1<PartitionKeyRange> orderedRanges);
    public bool IsGone(string partitionKeyRangeId);
    [CompilerGeneratedAttribute]
private int <.ctor>b__10_2(PartitionKeyRange range);
}
internal class Microsoft.Azure.Cosmos.Routing.CompositeContinuationToken : object {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private Range`1<string> <Range>k__BackingField;
    [JsonPropertyAttribute("token")]
public string Token { get; public set; }
    [JsonPropertyAttribute("range")]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Routing.RangeJsonConverter")]
public Range`1<string> Range { get; public set; }
    [JsonIgnoreAttribute]
public Range`1<string> PartitionRange { get; }
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public Range`1<string> get_Range();
    [CompilerGeneratedAttribute]
public void set_Range(Range`1<string> value);
    public Range`1<string> get_PartitionRange();
    public object ShallowCopy();
}
internal class Microsoft.Azure.Cosmos.Routing.DocumentAnalyzer : object {
    public static PartitionKeyInternal ExtractPartitionKeyValue(Document document, PartitionKeyDefinition partitionKeyDefinition);
    public static PartitionKeyInternal ExtractPartitionKeyValue(string documentString, PartitionKeyDefinition partitionKeyDefinition);
    internal static PartitionKeyInternal ExtractPartitionKeyValue(T data, PartitionKeyDefinition partitionKeyDefinition, Func`2<T, JToken> convertToJToken);
}
internal class Microsoft.Azure.Cosmos.Routing.GatewayAddressCache : object {
    private static string protocolFilterFormat;
    private static string AddressResolutionBatchSize;
    private static int DefaultBatchSize;
    private static TimeSpan WarmupCacheAndOpenConnectionTimeout;
    private Uri serviceEndpoint;
    private Uri addressEndpoint;
    private AsyncCacheNonBlocking`2<PartitionKeyRangeIdentity, PartitionAddressInformation> serverPartitionAddressCache;
    private ConcurrentDictionary`2<PartitionKeyRangeIdentity, DateTime> suboptimalServerPartitionTimestamps;
    private ConcurrentDictionary`2<ServerKey, HashSet`1<PartitionKeyRangeIdentity>> serverPartitionAddressToPkRangeIdMap;
    private IServiceConfigurationReader serviceConfigReader;
    private long suboptimalPartitionForceRefreshIntervalInSeconds;
    private Protocol protocol;
    private string protocolFilter;
    private ICosmosAuthorizationTokenProvider tokenProvider;
    private bool enableTcpConnectionEndpointRediscovery;
    private SemaphoreSlim semaphore;
    private CosmosHttpClient httpClient;
    private bool isReplicaAddressValidationEnabled;
    private Tuple`2<PartitionKeyRangeIdentity, PartitionAddressInformation> masterPartitionAddressCache;
    private DateTime suboptimalMasterPartitionTimestamp;
    private bool disposedValue;
    private bool validateUnknownReplicas;
    private IOpenConnectionsHandler openConnectionsHandler;
    public Uri ServiceEndpoint { get; }
    public GatewayAddressCache(Uri serviceEndpoint, Protocol protocol, ICosmosAuthorizationTokenProvider tokenProvider, IServiceConfigurationReader serviceConfigReader, CosmosHttpClient httpClient, IOpenConnectionsHandler openConnectionsHandler, long suboptimalPartitionForceRefreshIntervalInSeconds, bool enableTcpConnectionEndpointRediscovery, bool replicaAddressValidationEnabled);
    private static GatewayAddressCache();
    public Uri get_ServiceEndpoint();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GatewayAddressCache/<OpenConnectionsAsync>d__26")]
public Task OpenConnectionsAsync(string databaseName, ContainerProperties collection, IReadOnlyList`1<PartitionKeyRangeIdentity> partitionKeyRangeIdentities, bool shouldOpenRntbdChannels, CancellationToken cancellationToken);
    public sealed virtual void SetOpenConnectionsHandler(IOpenConnectionsHandler openConnectionsHandler);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GatewayAddressCache/<TryGetAddressesAsync>d__28")]
public sealed virtual Task`1<PartitionAddressInformation> TryGetAddressesAsync(DocumentServiceRequest request, PartitionKeyRangeIdentity partitionKeyRangeIdentity, ServiceIdentity serviceIdentity, bool forceRefreshPartitionAddresses, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GatewayAddressCache/<WarmupCachesAndOpenConnectionsAsync>d__29")]
private Task WarmupCachesAndOpenConnectionsAsync(DocumentServiceRequest request, string collectionRid, IEnumerable`1<string> partitionKeyRangeIds, ContainerProperties containerProperties, bool shouldOpenRntbdChannels, CancellationToken cancellationToken);
    private static void SetTransportAddressUrisToUnhealthy(PartitionAddressInformation stalePartitionAddressInformation, Lazy`1<HashSet`1<TransportAddressUri>> failedEndpoints);
    private static void LogPartitionCacheRefresh(IClientSideRequestStatistics clientSideRequestStatistics, PartitionAddressInformation old, PartitionAddressInformation updated);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GatewayAddressCache/<MarkAddressesToUnhealthyAsync>d__32")]
public Task MarkAddressesToUnhealthyAsync(ServerKey serverKey);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GatewayAddressCache/<ResolveMasterAsync>d__33")]
private Task`1<Tuple`2<PartitionKeyRangeIdentity, PartitionAddressInformation>> ResolveMasterAsync(DocumentServiceRequest request, bool forceRefresh);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GatewayAddressCache/<GetAddressesForRangeIdAsync>d__34")]
private Task`1<PartitionAddressInformation> GetAddressesForRangeIdAsync(DocumentServiceRequest request, PartitionAddressInformation cachedAddresses, string collectionRid, string partitionKeyRangeId, bool forceRefresh);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GatewayAddressCache/<GetMasterAddressesViaGatewayAsync>d__35")]
private Task`1<DocumentServiceResponse> GetMasterAddressesViaGatewayAsync(DocumentServiceRequest request, ResourceType resourceType, string resourceAddress, string entryUrl, bool forceRefresh, bool useMasterCollectionResolver);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GatewayAddressCache/<GetServerAddressesViaGatewayAsync>d__36")]
private Task`1<DocumentServiceResponse> GetServerAddressesViaGatewayAsync(DocumentServiceRequest request, string collectionRid, IEnumerable`1<string> partitionKeyRangeIds, bool forceRefresh);
    internal Tuple`2<PartitionKeyRangeIdentity, PartitionAddressInformation> ToPartitionAddressAndRange(string collectionRid, IList`1<Address> addresses, bool inNetworkRequest);
    private static IReadOnlyList`1<AddressInformation> GetSortedAddressInformation(IList`1<Address> addresses);
    private bool IsInNetworkRequest(DocumentServiceResponse documentServiceResponse);
    private static string LogAddressResolutionStart(DocumentServiceRequest request, Uri targetEndpoint);
    private static void LogAddressResolutionEnd(DocumentServiceRequest request, string identifier);
    private static Protocol ProtocolFromString(string protocol);
    private static string ProtocolString(Protocol protocol);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GatewayAddressCache/<GetAddressesAsync>d__44")]
private Task`1<TryCatch`1<DocumentServiceResponse>> GetAddressesAsync(DocumentServiceRequest request, string collectionRid, IEnumerable`1<string> partitionKeyRangeIds);
    private void ValidateReplicaAddresses(IReadOnlyList`1<TransportAddressUri> addresses);
    private static PartitionAddressInformation MergeAddresses(PartitionAddressInformation newAddresses, PartitionAddressInformation cachedAddresses);
    private IEnumerable`1<TransportAddressUri> GetAddressesNeededToValidateStatus(IReadOnlyList`1<TransportAddressUri> transportAddresses);
    private void CaptureTransportAddressUriHealthStates(PartitionAddressInformation partitionAddressInformation, IReadOnlyList`1<TransportAddressUri> transportAddressUris);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.Cosmos.Routing.GlobalAddressResolver : object {
    private static int MaxBackupReadRegions;
    private GlobalEndpointManager endpointManager;
    private GlobalPartitionEndpointManager partitionKeyRangeLocationCache;
    private Protocol protocol;
    private ICosmosAuthorizationTokenProvider tokenProvider;
    private CollectionCache collectionCache;
    private PartitionKeyRangeCache routingMapProvider;
    private int maxEndpoints;
    private IServiceConfigurationReader serviceConfigReader;
    private CosmosHttpClient httpClient;
    private ConcurrentDictionary`2<Uri, EndpointCache> addressCacheByEndpoint;
    private bool enableTcpConnectionEndpointRediscovery;
    private bool isReplicaAddressValidationEnabled;
    private IOpenConnectionsHandler openConnectionsHandler;
    public GlobalAddressResolver(GlobalEndpointManager endpointManager, GlobalPartitionEndpointManager partitionKeyRangeLocationCache, Protocol protocol, ICosmosAuthorizationTokenProvider tokenProvider, CollectionCache collectionCache, PartitionKeyRangeCache routingMapProvider, IServiceConfigurationReader serviceConfigReader, ConnectionPolicy connectionPolicy, CosmosHttpClient httpClient);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GlobalAddressResolver/<OpenAsync>d__15")]
public Task OpenAsync(string databaseName, ContainerProperties collection, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GlobalAddressResolver/<OpenConnectionsToAllReplicasAsync>d__16")]
public sealed virtual Task OpenConnectionsToAllReplicasAsync(string databaseName, string containerLinkUri, CancellationToken cancellationToken);
    public sealed virtual void SetOpenConnectionsHandler(IOpenConnectionsHandler openConnectionsHandler);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GlobalAddressResolver/<ResolveAsync>d__18")]
public sealed virtual Task`1<PartitionAddressInformation> ResolveAsync(DocumentServiceRequest request, bool forceRefresh, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GlobalAddressResolver/<UpdateAsync>d__19")]
public sealed virtual Task UpdateAsync(ServerKey serverKey, CancellationToken cancellationToken);
    private IAddressResolver GetAddressResolver(DocumentServiceRequest request);
    public sealed virtual void Dispose();
    private EndpointCache GetOrAddEndpoint(Uri endpoint);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.Cosmos.Routing.GlobalEndpointManager : object {
    private static int DefaultBackgroundRefreshLocationTimeIntervalInMS;
    private static string BackgroundRefreshLocationTimeIntervalInMS;
    private static string MinimumIntervalForNonForceRefreshLocationInMS;
    private CancellationTokenSource cancellationTokenSource;
    private LocationCache locationCache;
    private Uri defaultEndpoint;
    private ConnectionPolicy connectionPolicy;
    private IDocumentClientInternal owner;
    private AsyncCache`2<string, AccountProperties> databaseAccountCache;
    private TimeSpan MinTimeBetweenAccountRefresh;
    private int backgroundRefreshLocationTimeIntervalInMS;
    private object backgroundAccountRefreshLock;
    private object isAccountRefreshInProgressLock;
    private bool isAccountRefreshInProgress;
    private bool isBackgroundAccountRefreshActive;
    private DateTime LastBackgroundRefreshUtc;
    public ReadOnlyCollection`1<Uri> ReadEndpoints { get; }
    public ReadOnlyCollection`1<Uri> AccountReadEndpoints { get; }
    public ReadOnlyCollection`1<Uri> WriteEndpoints { get; }
    public int PreferredLocationCount { get; }
    public GlobalEndpointManager(IDocumentClientInternal owner, ConnectionPolicy connectionPolicy);
    public sealed virtual ReadOnlyCollection`1<Uri> get_ReadEndpoints();
    public sealed virtual ReadOnlyCollection`1<Uri> get_AccountReadEndpoints();
    public sealed virtual ReadOnlyCollection`1<Uri> get_WriteEndpoints();
    public sealed virtual int get_PreferredLocationCount();
    public bool IsMultimasterMetadataWriteRequest(DocumentServiceRequest request);
    public Uri GetHubUri();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GlobalEndpointManager/<GetDatabaseAccountFromAnyLocationsAsync>d__27")]
public static Task`1<AccountProperties> GetDatabaseAccountFromAnyLocationsAsync(Uri defaultEndpoint, IList`1<string> locations, IList`1<Uri> accountInitializationCustomEndpoints, Func`2<Uri, Task`1<AccountProperties>> getDatabaseAccountFn, CancellationToken cancellationToken);
    public virtual Uri ResolveServiceEndpoint(DocumentServiceRequest request);
    public Uri GetDefaultEndpoint();
    public sealed virtual ReadOnlyDictionary`2<string, Uri> GetAvailableWriteEndpointsByLocation();
    public sealed virtual ReadOnlyDictionary`2<string, Uri> GetAvailableReadEndpointsByLocation();
    public sealed virtual string GetLocation(Uri endpoint);
    public ReadOnlyCollection`1<Uri> GetApplicableEndpoints(DocumentServiceRequest request, bool isReadRequest);
    public ReadOnlyCollection`1<string> GetApplicableRegions(IEnumerable`1<string> excludeRegions, bool isReadRequest);
    public bool TryGetLocationForGatewayDiagnostics(Uri endpoint, String& regionName);
    public virtual void MarkEndpointUnavailableForRead(Uri endpoint);
    public virtual void MarkEndpointUnavailableForWrite(Uri endpoint);
    public sealed virtual bool CanUseMultipleWriteLocations(DocumentServiceRequest request);
    public sealed virtual void Dispose();
    public virtual void InitializeAccountPropertiesAndStartBackgroundRefresh(AccountProperties databaseAccount);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GlobalEndpointManager/<RefreshLocationAsync>d__42")]
public virtual Task RefreshLocationAsync(bool forceRefresh);
    public sealed virtual bool CanSupportMultipleWriteLocations(DocumentServiceRequest request);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GlobalEndpointManager/<StartLocationBackgroundRefreshLoop>d__44")]
private void StartLocationBackgroundRefreshLoop();
    private Task`1<AccountProperties> GetDatabaseAccountAsync(Uri serviceEndpoint);
    private void OnPreferenceChanged(object sender, NotifyCollectionChangedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GlobalEndpointManager/<RefreshDatabaseAccountInternalAsync>d__47")]
private Task RefreshDatabaseAccountInternalAsync(bool forceRefresh);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.GlobalEndpointManager/<GetDatabaseAccountAsync>d__48")]
internal Task`1<AccountProperties> GetDatabaseAccountAsync(bool forceRefresh);
    private bool SkipRefresh(bool forceRefresh);
    [CompilerGeneratedAttribute]
private Task`1<AccountProperties> <GetDatabaseAccountAsync>b__48_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Azure.Cosmos.Routing.GlobalPartitionEndpointManager : object {
    public abstract virtual bool TryAddPartitionLevelLocationOverride(DocumentServiceRequest request);
    public abstract virtual bool TryMarkEndpointUnavailableForPartitionKeyRange(DocumentServiceRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.Cosmos.Routing.GlobalPartitionEndpointManagerCore : GlobalPartitionEndpointManager {
    private IGlobalEndpointManager globalEndpointManager;
    private Lazy`1<ConcurrentDictionary`2<PartitionKeyRange, PartitionKeyRangeFailoverInfo>> PartitionKeyRangeToLocation;
    public GlobalPartitionEndpointManagerCore(IGlobalEndpointManager globalEndpointManager);
    private bool CanUsePartitionLevelFailoverLocations(DocumentServiceRequest request);
    public virtual bool TryAddPartitionLevelLocationOverride(DocumentServiceRequest request);
    public virtual bool TryMarkEndpointUnavailableForPartitionKeyRange(DocumentServiceRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.Cosmos.Routing.GlobalPartitionEndpointManagerNoOp : GlobalPartitionEndpointManager {
    public static GlobalPartitionEndpointManager Instance;
    private static GlobalPartitionEndpointManagerNoOp();
    public virtual bool TryAddPartitionLevelLocationOverride(DocumentServiceRequest request);
    public virtual bool TryMarkEndpointUnavailableForPartitionKeyRange(DocumentServiceRequest request);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Azure.Cosmos.Routing.IGlobalEndpointManager {
    public ReadOnlyCollection`1<Uri> ReadEndpoints { get; }
    public ReadOnlyCollection`1<Uri> AccountReadEndpoints { get; }
    public ReadOnlyCollection`1<Uri> WriteEndpoints { get; }
    public int PreferredLocationCount { get; }
    public abstract virtual ReadOnlyCollection`1<Uri> get_ReadEndpoints();
    public abstract virtual ReadOnlyCollection`1<Uri> get_AccountReadEndpoints();
    public abstract virtual ReadOnlyCollection`1<Uri> get_WriteEndpoints();
    public abstract virtual int get_PreferredLocationCount();
    public abstract virtual Uri ResolveServiceEndpoint(DocumentServiceRequest request);
    public abstract virtual string GetLocation(Uri endpoint);
    public abstract virtual void MarkEndpointUnavailableForRead(Uri endpoint);
    public abstract virtual void MarkEndpointUnavailableForWrite(Uri endpoint);
    public abstract virtual bool CanUseMultipleWriteLocations(DocumentServiceRequest request);
    public abstract virtual void InitializeAccountPropertiesAndStartBackgroundRefresh(AccountProperties databaseAccount);
    public abstract virtual Task RefreshLocationAsync(bool forceRefresh);
    public abstract virtual ReadOnlyDictionary`2<string, Uri> GetAvailableWriteEndpointsByLocation();
    public abstract virtual ReadOnlyDictionary`2<string, Uri> GetAvailableReadEndpointsByLocation();
    public abstract virtual bool CanSupportMultipleWriteLocations(DocumentServiceRequest request);
}
internal class Microsoft.Azure.Cosmos.Routing.InvalidPartitionExceptionRetryPolicy : object {
    private IDocumentClientRetryPolicy nextPolicy;
    private DocumentServiceRequest documentServiceRequest;
    private bool retried;
    public InvalidPartitionExceptionRetryPolicy(IDocumentClientRetryPolicy nextPolicy);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.InvalidPartitionExceptionRetryPolicy/<ShouldRetryAsync>d__4")]
public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(Exception exception, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.InvalidPartitionExceptionRetryPolicy/<ShouldRetryAsync>d__5")]
public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(ResponseMessage httpResponseMessage, CancellationToken cancellationToken);
    private ShouldRetryResult ShouldRetryInternal(Nullable`1<HttpStatusCode> statusCode, Nullable`1<SubStatusCodes> subStatusCode, string resourceIdOrFullName);
    public sealed virtual void OnBeforeSendRequest(DocumentServiceRequest request);
}
internal interface Microsoft.Azure.Cosmos.Routing.IRoutingMapProvider {
    public abstract virtual Task`1<IReadOnlyList`1<PartitionKeyRange>> TryGetOverlappingRangesAsync(string collectionResourceId, Range`1<string> range, ITrace trace, bool forceRefresh);
    public abstract virtual Task`1<PartitionKeyRange> TryGetPartitionKeyRangeByIdAsync(string collectionResourceId, string partitionKeyRangeId, ITrace trace, bool forceRefresh);
}
internal class Microsoft.Azure.Cosmos.Routing.LocationCache : object {
    private static string UnavailableLocationsExpirationTimeInSeconds;
    private static int DefaultUnavailableLocationsExpirationTimeInSeconds;
    private bool enableEndpointDiscovery;
    private Uri defaultEndpoint;
    private bool useMultipleWriteLocations;
    private object lockObject;
    private TimeSpan unavailableLocationsExpirationTime;
    private int connectionLimit;
    private ConcurrentDictionary`2<Uri, LocationUnavailabilityInfo> locationUnavailablityInfoByEndpoint;
    private RegionNameMapper regionNameMapper;
    private DatabaseAccountLocationsInfo locationInfo;
    private DateTime lastCacheUpdateTimestamp;
    private bool enableMultipleWriteLocations;
    public ReadOnlyCollection`1<Uri> ReadEndpoints { get; }
    public ReadOnlyCollection`1<Uri> AccountReadEndpoints { get; }
    public ReadOnlyCollection`1<Uri> WriteEndpoints { get; }
    public LocationCache(ReadOnlyCollection`1<string> preferredLocations, Uri defaultEndpoint, bool enableEndpointDiscovery, int connectionLimit, bool useMultipleWriteLocations);
    private static LocationCache();
    public ReadOnlyCollection`1<Uri> get_ReadEndpoints();
    public ReadOnlyCollection`1<Uri> get_AccountReadEndpoints();
    public ReadOnlyCollection`1<Uri> get_WriteEndpoints();
    public string GetLocation(Uri endpoint);
    public bool TryGetLocationForGatewayDiagnostics(Uri endpoint, String& regionName);
    public void MarkEndpointUnavailableForRead(Uri endpoint);
    public void MarkEndpointUnavailableForWrite(Uri endpoint);
    public void OnDatabaseAccountRead(AccountProperties databaseAccount);
    public void OnLocationPreferenceChanged(ReadOnlyCollection`1<string> preferredLocations);
    public bool IsMetaData(DocumentServiceRequest request);
    public bool IsMultimasterMetadataWriteRequest(DocumentServiceRequest request);
    public Uri GetDefaultEndpoint();
    public ReadOnlyDictionary`2<string, Uri> GetAvailableWriteEndpointsByLocation();
    public ReadOnlyDictionary`2<string, Uri> GetAvailableReadEndpointsByLocation();
    public Uri GetHubUri();
    public ReadOnlyCollection`1<string> GetAvailableReadLocations();
    public ReadOnlyCollection`1<string> GetAvailableWriteLocations();
    public Uri ResolveServiceEndpoint(DocumentServiceRequest request);
    public ReadOnlyCollection`1<Uri> GetApplicableEndpoints(DocumentServiceRequest request, bool isReadRequest);
    public ReadOnlyCollection`1<string> GetApplicableRegions(IEnumerable`1<string> excludeRegions, bool isReadRequest);
    private ReadOnlyCollection`1<Uri> GetApplicableEndpoints(ReadOnlyDictionary`2<string, Uri> regionNameByEndpoint, Uri fallbackEndpoint, IEnumerable`1<string> excludeRegions);
    private ReadOnlyCollection`1<string> GetApplicableRegions(ReadOnlyCollection`1<string> regionNameByEndpoint, string fallbackRegion, IEnumerable`1<string> excludeRegions);
    public bool ShouldRefreshEndpoints(Boolean& canRefreshInBackground);
    public bool CanUseMultipleWriteLocations(DocumentServiceRequest request);
    private void ClearStaleEndpointUnavailabilityInfo();
    private bool IsEndpointUnavailable(Uri endpoint, OperationType expectedAvailableOperations);
    private void MarkEndpointUnavailable(Uri unavailableEndpoint, OperationType unavailableOperationType);
    private void UpdateLocationCache(IEnumerable`1<AccountRegion> writeLocations, IEnumerable`1<AccountRegion> readLocations, ReadOnlyCollection`1<string> preferenceList, Nullable`1<bool> enableMultipleWriteLocations);
    private ReadOnlyCollection`1<Uri> GetPreferredAvailableEndpoints(ReadOnlyDictionary`2<string, Uri> endpointsByLocation, ReadOnlyCollection`1<string> orderedLocations, OperationType expectedAvailableOperation, Uri fallbackEndpoint);
    private ReadOnlyDictionary`2<string, Uri> GetEndpointByLocation(IEnumerable`1<AccountRegion> locations, ReadOnlyCollection`1& orderedLocations);
    internal bool CanUseMultipleWriteLocations();
    private void SetServicePointConnectionLimit(Uri endpoint);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.Routing.LocationHelper : object {
    internal static Uri GetLocationEndpoint(Uri serviceEndpoint, string location);
    [ExtensionAttribute]
private static string DataCenterToUriPostfix(string datacenter);
}
internal class Microsoft.Azure.Cosmos.Routing.NonRetriableInvalidPartitionExceptionRetryPolicy : object {
    private CollectionCache clientCollectionCache;
    private IDocumentClientRetryPolicy nextPolicy;
    public NonRetriableInvalidPartitionExceptionRetryPolicy(CollectionCache clientCollectionCache, IDocumentClientRetryPolicy nextPolicy);
    public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(Exception exception, CancellationToken cancellationToken);
    public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(ResponseMessage cosmosResponseMessage, CancellationToken cancellationToken);
    public sealed virtual void OnBeforeSendRequest(DocumentServiceRequest request);
    private ShouldRetryResult ShouldRetryInternal(Nullable`1<HttpStatusCode> statusCode, Nullable`1<SubStatusCodes> subStatusCode, string resourceIdOrFullName);
}
internal class Microsoft.Azure.Cosmos.Routing.PartitionKeyAndResourceTokenPair : object {
    [CompilerGeneratedAttribute]
private PartitionKeyInternal <PartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceToken>k__BackingField;
    public PartitionKeyInternal PartitionKey { get; private set; }
    public string ResourceToken { get; private set; }
    public PartitionKeyAndResourceTokenPair(PartitionKeyInternal partitionKey, string resourceToken);
    [CompilerGeneratedAttribute]
public PartitionKeyInternal get_PartitionKey();
    [CompilerGeneratedAttribute]
private void set_PartitionKey(PartitionKeyInternal value);
    [CompilerGeneratedAttribute]
public string get_ResourceToken();
    [CompilerGeneratedAttribute]
private void set_ResourceToken(string value);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Routing.PartitionKeyHash : ValueType {
    private IReadOnlyList`1<UInt128> values;
    public static PartitionKeyHash None;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    internal IReadOnlyList`1<UInt128> HashValues { get; }
    public PartitionKeyHash(UInt128 value);
    public PartitionKeyHash(UInt128[] values);
    private static PartitionKeyHash();
    [CompilerGeneratedAttribute]
public string get_Value();
    internal IReadOnlyList`1<UInt128> get_HashValues();
    public sealed virtual int CompareTo(PartitionKeyHash other);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(PartitionKeyHash other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool TryParse(string value, PartitionKeyHash& parsedValue);
    public static PartitionKeyHash Parse(string value);
    public static bool op_Equality(PartitionKeyHash left, PartitionKeyHash right);
    public static bool op_Inequality(PartitionKeyHash left, PartitionKeyHash right);
    public static bool op_LessThan(PartitionKeyHash left, PartitionKeyHash right);
    public static bool op_LessThanOrEqual(PartitionKeyHash left, PartitionKeyHash right);
    public static bool op_GreaterThan(PartitionKeyHash left, PartitionKeyHash right);
    public static bool op_GreaterThanOrEqual(PartitionKeyHash left, PartitionKeyHash right);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Routing.PartitionKeyHashRange : ValueType {
    [CompilerGeneratedAttribute]
private Nullable`1<PartitionKeyHash> <StartInclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PartitionKeyHash> <EndExclusive>k__BackingField;
    public Nullable`1<PartitionKeyHash> StartInclusive { get; }
    public Nullable`1<PartitionKeyHash> EndExclusive { get; }
    public PartitionKeyHashRange(Nullable`1<PartitionKeyHash> startInclusive, Nullable`1<PartitionKeyHash> endExclusive);
    [CompilerGeneratedAttribute]
public Nullable`1<PartitionKeyHash> get_StartInclusive();
    [CompilerGeneratedAttribute]
public Nullable`1<PartitionKeyHash> get_EndExclusive();
    public bool Contains(PartitionKeyHash partitionKeyHash);
    public bool Contains(PartitionKeyHashRange partitionKeyHashRange);
    public bool TryGetOverlappingRange(PartitionKeyHashRange rangeToOverlapWith, PartitionKeyHashRange& overlappingRange);
    public sealed virtual int CompareTo(PartitionKeyHashRange other);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(PartitionKeyHashRange other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.Cosmos.Routing.PartitionKeyHashRangeDictionary`1 : object {
    private SortedDictionary`2<PartitionKeyHashRange, ValueTuple`2<bool, T>> dictionary;
    public T Item { get; public set; }
    public T Item { get; public set; }
    public PartitionKeyHashRangeDictionary`1(PartitionKeyHashRanges partitionKeyHashRanges);
    public bool TryGetValue(PartitionKeyHash partitionKeyHash, T& value);
    public bool TryGetValue(PartitionKeyHashRange partitionKeyHashRange, T& value);
    public T get_Item(PartitionKeyHash key);
    public void set_Item(PartitionKeyHash key, T value);
    public T get_Item(PartitionKeyHashRange key);
    public void set_Item(PartitionKeyHashRange key, T value);
    private bool TryGetContainingRange(PartitionKeyHash partitionKeyHash, PartitionKeyHashRange& range);
}
internal class Microsoft.Azure.Cosmos.Routing.PartitionKeyHashRanges : object {
    private SortedSet`1<PartitionKeyHashRange> partitionKeyHashRanges;
    private PartitionKeyHashRanges(SortedSet`1<PartitionKeyHashRange> partitionKeyHashRanges);
    public sealed virtual IOrderedEnumerable`1<PartitionKeyHashRange> CreateOrderedEnumerable(Func`2<PartitionKeyHashRange, TKey> keySelector, IComparer`1<TKey> comparer, bool descending);
    public sealed virtual IEnumerator`1<PartitionKeyHashRange> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    public static PartitionKeyHashRanges Create(IEnumerable`1<PartitionKeyHashRange> partitionKeyHashRanges);
    public static CreateOutcome TryCreate(IEnumerable`1<PartitionKeyHashRange> partitionKeyHashRanges, PartitionKeyHashRanges& partitionedSortedEffectiveRanges);
}
internal class Microsoft.Azure.Cosmos.Routing.PartitionKeyRangeCache : object {
    private static string PageSizeString;
    private AsyncCacheNonBlocking`2<string, CollectionRoutingMap> routingMapCache;
    private ICosmosAuthorizationTokenProvider authorizationTokenProvider;
    private IStoreModel storeModel;
    private CollectionCache collectionCache;
    private IGlobalEndpointManager endpointManager;
    public PartitionKeyRangeCache(ICosmosAuthorizationTokenProvider authorizationTokenProvider, IStoreModel storeModel, CollectionCache collectionCache, IGlobalEndpointManager endpointManager);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.PartitionKeyRangeCache/<TryGetOverlappingRangesAsync>d__7")]
public virtual Task`1<IReadOnlyList`1<PartitionKeyRange>> TryGetOverlappingRangesAsync(string collectionRid, Range`1<string> range, ITrace trace, bool forceRefresh);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.PartitionKeyRangeCache/<TryGetPartitionKeyRangeByIdAsync>d__8")]
public virtual Task`1<PartitionKeyRange> TryGetPartitionKeyRangeByIdAsync(string collectionResourceId, string partitionKeyRangeId, ITrace trace, bool forceRefresh);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.PartitionKeyRangeCache/<TryLookupAsync>d__9")]
public virtual Task`1<CollectionRoutingMap> TryLookupAsync(string collectionRid, CollectionRoutingMap previousValue, DocumentServiceRequest request, ITrace trace);
    private static bool ShouldForceRefresh(CollectionRoutingMap previousValue, CollectionRoutingMap currentValue);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.PartitionKeyRangeCache/<GetRoutingMapForCollectionAsync>d__11")]
private Task`1<CollectionRoutingMap> GetRoutingMapForCollectionAsync(string collectionRid, CollectionRoutingMap previousRoutingMap, ITrace trace, IClientSideRequestStatistics clientSideRequestStatistics);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.PartitionKeyRangeCache/<ExecutePartitionKeyRangeReadChangeFeedAsync>d__12")]
private Task`1<DocumentServiceResponse> ExecutePartitionKeyRangeReadChangeFeedAsync(string collectionRid, INameValueCollection headers, ITrace trace, IClientSideRequestStatistics clientSideRequestStatistics, IDocumentClientRetryPolicy retryPolicy);
}
internal class Microsoft.Azure.Cosmos.Routing.PartitionRoutingHelper : object {
    public static IReadOnlyList`1<Range`1<string>> GetProvidedPartitionKeyRanges(string querySpecJsonString, bool enableCrossPartitionQuery, bool parallelizeCrossPartitionQuery, bool isContinuationExpected, bool hasLogicalPartitionKey, bool allowDCount, bool allowNonValueAggregates, bool useSystemPrefix, PartitionKeyDefinition partitionKeyDefinition, VectorEmbeddingPolicy vectorEmbeddingPolicy, QueryPartitionProvider queryPartitionProvider, string clientApiVersion, GeospatialType geospatialType, QueryInfo& queryInfo);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.PartitionRoutingHelper/<TryGetTargetRangeFromContinuationTokenRangeAsync>d__1")]
public virtual Task`1<ResolvedRangeInfo> TryGetTargetRangeFromContinuationTokenRangeAsync(IReadOnlyList`1<Range`1<string>> providedPartitionKeyRanges, IRoutingMapProvider routingMapProvider, string collectionRid, Range`1<string> rangeFromContinuationToken, List`1<CompositeContinuationToken> suppliedTokens, ITrace trace, RntdbEnumerationDirection direction);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.PartitionRoutingHelper/<GetReplacementRangesAsync>d__2")]
public static Task`1<List`1<PartitionKeyRange>> GetReplacementRangesAsync(PartitionKeyRange targetRange, IRoutingMapProvider routingMapProvider, string collectionRid, ITrace trace);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Routing.PartitionRoutingHelper/<TryAddPartitionKeyRangeToContinuationTokenAsync>d__3")]
public virtual Task`1<bool> TryAddPartitionKeyRangeToContinuationTokenAsync(INameValueCollection backendResponseHeaders, IReadOnlyList`1<Range`1<string>> providedPartitionKeyRanges, IRoutingMapProvider routingMapProvider, string collectionRid, ResolvedRangeInfo resolvedRangeInfo, ITrace trace, RntdbEnumerationDirection direction);
    public virtual Range`1<string> ExtractPartitionKeyRangeFromContinuationToken(INameValueCollection headers, List`1& compositeContinuationTokens);
    private static string AddPartitionKeyRangeToContinuationToken(string continuationToken, PartitionKeyRange partitionKeyRange);
    private static bool IsSupportedPartitionedQueryExecutionInfo(PartitionedQueryExecutionInfo partitionedQueryExecutionInfoueryInfo, string clientApiVersion);
    private static bool IsAggregateSupportedApiVersion(string clientApiVersion);
    private static T Min(IReadOnlyList`1<T> values, IComparer`1<T> comparer);
    private static T MinAfter(IReadOnlyList`1<T> values, T minValue, IComparer`1<T> comparer);
    private static PartitionKeyRange MinBefore(IReadOnlyList`1<PartitionKeyRange> values, PartitionKeyRange minValue);
}
internal class Microsoft.Azure.Cosmos.Routing.PathParser : object {
    private static char segmentSeparator;
    private static string errorMessageFormat;
    private static PathParser();
    public static IReadOnlyList`1<string> GetPathParts(string path);
    private static string GetEscapedToken(string path, Int32& currentIndex);
    private static string GetToken(string path, Int32& currentIndex);
}
internal class Microsoft.Azure.Cosmos.Routing.RangeJsonConverter : JsonConverter {
    private static string MinProperty;
    private static string MaxProperty;
    private static RangeJsonConverter();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public abstract class Microsoft.Azure.Cosmos.Scripts.Scripts : object {
    public abstract virtual Task`1<StoredProcedureResponse> CreateStoredProcedureAsync(StoredProcedureProperties storedProcedureProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual FeedIterator`1<T> GetStoredProcedureQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator GetStoredProcedureQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator`1<T> GetStoredProcedureQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator GetStoredProcedureQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual Task`1<StoredProcedureResponse> ReadStoredProcedureAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<StoredProcedureResponse> ReplaceStoredProcedureAsync(StoredProcedureProperties storedProcedureProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<StoredProcedureResponse> DeleteStoredProcedureAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<StoredProcedureExecuteResponse`1<TOutput>> ExecuteStoredProcedureAsync(string storedProcedureId, PartitionKey partitionKey, Object[] parameters, StoredProcedureRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> ExecuteStoredProcedureStreamAsync(string storedProcedureId, PartitionKey partitionKey, Object[] parameters, StoredProcedureRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResponseMessage> ExecuteStoredProcedureStreamAsync(string storedProcedureId, Stream streamPayload, PartitionKey partitionKey, StoredProcedureRequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<TriggerResponse> CreateTriggerAsync(TriggerProperties triggerProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual FeedIterator`1<T> GetTriggerQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator GetTriggerQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator`1<T> GetTriggerQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator GetTriggerQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual Task`1<TriggerResponse> ReadTriggerAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<TriggerResponse> ReplaceTriggerAsync(TriggerProperties triggerProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<TriggerResponse> DeleteTriggerAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<UserDefinedFunctionResponse> CreateUserDefinedFunctionAsync(UserDefinedFunctionProperties userDefinedFunctionProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual FeedIterator`1<T> GetUserDefinedFunctionQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator GetUserDefinedFunctionQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator`1<T> GetUserDefinedFunctionQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator GetUserDefinedFunctionQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual Task`1<UserDefinedFunctionResponse> ReadUserDefinedFunctionAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<UserDefinedFunctionResponse> ReplaceUserDefinedFunctionAsync(UserDefinedFunctionProperties userDefinedFunctionProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<UserDefinedFunctionResponse> DeleteUserDefinedFunctionAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.Scripts.ScriptsCore : Scripts {
    protected ContainerInternal container;
    [CompilerGeneratedAttribute]
private CosmosClientContext <ClientContext>k__BackingField;
    protected CosmosClientContext ClientContext { get; }
    internal ScriptsCore(ContainerInternal container, CosmosClientContext clientContext);
    [CompilerGeneratedAttribute]
protected CosmosClientContext get_ClientContext();
    public Task`1<StoredProcedureResponse> CreateStoredProcedureAsync(StoredProcedureProperties storedProcedureProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public virtual FeedIterator GetStoredProcedureQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetStoredProcedureQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetStoredProcedureQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetStoredProcedureQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public Task`1<StoredProcedureResponse> ReadStoredProcedureAsync(string id, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<StoredProcedureResponse> ReplaceStoredProcedureAsync(StoredProcedureProperties storedProcedureProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<StoredProcedureResponse> DeleteStoredProcedureAsync(string id, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Scripts.ScriptsCore/<ExecuteStoredProcedureAsync>d__13`1")]
public Task`1<StoredProcedureExecuteResponse`1<TOutput>> ExecuteStoredProcedureAsync(string storedProcedureId, PartitionKey partitionKey, Object[] parameters, StoredProcedureRequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> ExecuteStoredProcedureStreamAsync(string storedProcedureId, PartitionKey partitionKey, Object[] parameters, StoredProcedureRequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> ExecuteStoredProcedureStreamAsync(string storedProcedureId, Stream streamPayload, PartitionKey partitionKey, StoredProcedureRequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<TriggerResponse> CreateTriggerAsync(TriggerProperties triggerProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public virtual FeedIterator GetTriggerQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetTriggerQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetTriggerQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetTriggerQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public Task`1<TriggerResponse> ReadTriggerAsync(string id, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<TriggerResponse> ReplaceTriggerAsync(TriggerProperties triggerProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<TriggerResponse> DeleteTriggerAsync(string id, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<UserDefinedFunctionResponse> CreateUserDefinedFunctionAsync(UserDefinedFunctionProperties userDefinedFunctionProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public virtual FeedIterator GetUserDefinedFunctionQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetUserDefinedFunctionQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetUserDefinedFunctionQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetUserDefinedFunctionQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public Task`1<UserDefinedFunctionResponse> ReadUserDefinedFunctionAsync(string id, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<UserDefinedFunctionResponse> ReplaceUserDefinedFunctionAsync(UserDefinedFunctionProperties userDefinedFunctionProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<UserDefinedFunctionResponse> DeleteUserDefinedFunctionAsync(string id, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Scripts.ScriptsCore/<ProcessStoredProcedureOperationAsync>d__32")]
private Task`1<StoredProcedureResponse> ProcessStoredProcedureOperationAsync(string id, OperationType operationType, Stream streamPayload, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Scripts.ScriptsCore/<ProcessTriggerOperationAsync>d__33")]
private Task`1<TriggerResponse> ProcessTriggerOperationAsync(string id, OperationType operationType, Stream streamPayload, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ProcessStreamOperationAsync(string resourceUri, ResourceType resourceType, OperationType operationType, Nullable`1<PartitionKey> partitionKey, Stream streamPayload, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Scripts.ScriptsCore/<ProcessScriptsCreateOperationAsync>d__35`1")]
private Task`1<T> ProcessScriptsCreateOperationAsync(string resourceUri, ResourceType resourceType, OperationType operationType, Stream streamPayload, RequestOptions requestOptions, Func`2<ResponseMessage, T> responseFunc, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Scripts.ScriptsCore/<ProcessUserDefinedFunctionOperationAsync>d__36")]
private Task`1<UserDefinedFunctionResponse> ProcessUserDefinedFunctionOperationAsync(string id, OperationType operationType, Stream streamPayload, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private FeedResponse`1<T> <GetStoredProcedureQueryIterator>b__9_0(ResponseMessage response);
    [CompilerGeneratedAttribute]
private FeedResponse`1<T> <GetTriggerQueryIterator>b__20_0(ResponseMessage response);
    [CompilerGeneratedAttribute]
private FeedResponse`1<T> <GetUserDefinedFunctionQueryIterator>b__28_0(ResponseMessage response);
}
internal class Microsoft.Azure.Cosmos.Scripts.ScriptsInlineCore : ScriptsCore {
    internal ScriptsInlineCore(ContainerInternal container, CosmosClientContext clientContext);
    public virtual Task`1<StoredProcedureResponse> CreateStoredProcedureAsync(StoredProcedureProperties storedProcedureProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual FeedIterator`1<T> GetStoredProcedureQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetStoredProcedureQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetStoredProcedureQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetStoredProcedureQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual Task`1<StoredProcedureResponse> ReadStoredProcedureAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<StoredProcedureResponse> ReplaceStoredProcedureAsync(StoredProcedureProperties storedProcedureProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<StoredProcedureResponse> DeleteStoredProcedureAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<StoredProcedureExecuteResponse`1<TOutput>> ExecuteStoredProcedureAsync(string storedProcedureId, PartitionKey partitionKey, Object[] parameters, StoredProcedureRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> ExecuteStoredProcedureStreamAsync(string storedProcedureId, PartitionKey partitionKey, Object[] parameters, StoredProcedureRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<ResponseMessage> ExecuteStoredProcedureStreamAsync(string storedProcedureId, Stream streamPayload, PartitionKey partitionKey, StoredProcedureRequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<TriggerResponse> CreateTriggerAsync(TriggerProperties triggerProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual FeedIterator`1<T> GetTriggerQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetTriggerQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetTriggerQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetTriggerQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual Task`1<TriggerResponse> ReadTriggerAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<TriggerResponse> ReplaceTriggerAsync(TriggerProperties triggerProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<TriggerResponse> DeleteTriggerAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<UserDefinedFunctionResponse> CreateUserDefinedFunctionAsync(UserDefinedFunctionProperties userDefinedFunctionProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual FeedIterator`1<T> GetUserDefinedFunctionQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetUserDefinedFunctionQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetUserDefinedFunctionQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator GetUserDefinedFunctionQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual Task`1<UserDefinedFunctionResponse> ReadUserDefinedFunctionAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<UserDefinedFunctionResponse> ReplaceUserDefinedFunctionAsync(UserDefinedFunctionProperties userDefinedFunctionProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<UserDefinedFunctionResponse> DeleteUserDefinedFunctionAsync(string id, RequestOptions requestOptions, CancellationToken cancellationToken);
}
public class Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1 : Response`1<T> {
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    public Headers Headers { get; }
    public T Resource { get; }
    public HttpStatusCode StatusCode { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ETag { get; }
    public string SessionToken { get; }
    public string ScriptLog { get; }
    internal RequestMessage RequestMessage { get; }
    internal StoredProcedureExecuteResponse`1(HttpStatusCode httpStatusCode, Headers headers, T response, CosmosDiagnostics diagnostics, RequestMessage requestmessage);
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public virtual T get_Resource();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    public virtual double get_RequestCharge();
    public virtual string get_ActivityId();
    public virtual string get_ETag();
    public virtual string get_SessionToken();
    public virtual string get_ScriptLog();
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
}
public class Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties : object {
    private string id;
    private string body;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfLink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Body { get; public set; }
    [JsonPropertyAttribute]
public string Id { get; public set; }
    [JsonPropertyAttribute]
public string ETag { get; private set; }
    [JsonConverterAttribute("Microsoft.Azure.Documents.UnixDateTimeConverter")]
[JsonPropertyAttribute]
public Nullable`1<DateTime> LastModified { get; private set; }
    [JsonPropertyAttribute]
public string SelfLink { get; private set; }
    [JsonPropertyAttribute]
internal string ResourceId { get; private set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    public StoredProcedureProperties(string id, string body);
    public string get_Body();
    public void set_Body(string value);
    public string get_Id();
    public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
private void set_ETag(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastModified();
    [CompilerGeneratedAttribute]
private void set_LastModified(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_SelfLink();
    [CompilerGeneratedAttribute]
private void set_SelfLink(string value);
    [CompilerGeneratedAttribute]
internal string get_ResourceId();
    [CompilerGeneratedAttribute]
private void set_ResourceId(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public class Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions : RequestOptions {
    [CompilerGeneratedAttribute]
private bool <EnableScriptLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionToken>k__BackingField;
    public bool EnableScriptLogging { get; public set; }
    public string SessionToken { get; public set; }
    public Nullable`1<ConsistencyLevel> ConsistencyLevel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableScriptLogging();
    [CompilerGeneratedAttribute]
public void set_EnableScriptLogging(bool value);
    [CompilerGeneratedAttribute]
public string get_SessionToken();
    [CompilerGeneratedAttribute]
public void set_SessionToken(string value);
    public Nullable`1<ConsistencyLevel> get_ConsistencyLevel();
    public void set_ConsistencyLevel(Nullable`1<ConsistencyLevel> value);
    internal virtual void PopulateRequestOptions(RequestMessage request);
}
public class Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse : Response`1<StoredProcedureProperties> {
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private StoredProcedureProperties <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    public Headers Headers { get; }
    public StoredProcedureProperties Resource { get; }
    public HttpStatusCode StatusCode { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ETag { get; }
    public string SessionToken { get; }
    internal RequestMessage RequestMessage { get; }
    internal StoredProcedureResponse(HttpStatusCode httpStatusCode, Headers headers, StoredProcedureProperties storedProcedureProperties, CosmosDiagnostics diagnostics, RequestMessage requestMessage);
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public virtual StoredProcedureProperties get_Resource();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    public virtual double get_RequestCharge();
    public virtual string get_ActivityId();
    public virtual string get_ETag();
    public virtual string get_SessionToken();
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
    public static StoredProcedureProperties op_Implicit(StoredProcedureResponse response);
}
public enum Microsoft.Azure.Cosmos.Scripts.TriggerOperation : Enum {
    public short value__;
    public static TriggerOperation All;
    public static TriggerOperation Create;
    public static TriggerOperation Update;
    public static TriggerOperation Delete;
    public static TriggerOperation Replace;
    public static TriggerOperation Upsert;
}
public class Microsoft.Azure.Cosmos.Scripts.TriggerProperties : object {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private TriggerType <TriggerType>k__BackingField;
    [CompilerGeneratedAttribute]
private TriggerOperation <TriggerOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfLink>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Body { get; public set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
[JsonPropertyAttribute]
public TriggerType TriggerType { get; public set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
[JsonPropertyAttribute]
public TriggerOperation TriggerOperation { get; public set; }
    [JsonPropertyAttribute]
public string Id { get; public set; }
    [JsonPropertyAttribute]
public string ETag { get; private set; }
    [JsonPropertyAttribute]
public string SelfLink { get; private set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public TriggerType get_TriggerType();
    [CompilerGeneratedAttribute]
public void set_TriggerType(TriggerType value);
    [CompilerGeneratedAttribute]
public TriggerOperation get_TriggerOperation();
    [CompilerGeneratedAttribute]
public void set_TriggerOperation(TriggerOperation value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
private void set_ETag(string value);
    [CompilerGeneratedAttribute]
public string get_SelfLink();
    [CompilerGeneratedAttribute]
private void set_SelfLink(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public class Microsoft.Azure.Cosmos.Scripts.TriggerResponse : Response`1<TriggerProperties> {
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private TriggerProperties <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    public Headers Headers { get; }
    public TriggerProperties Resource { get; }
    public HttpStatusCode StatusCode { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ETag { get; }
    internal RequestMessage RequestMessage { get; }
    internal TriggerResponse(HttpStatusCode httpStatusCode, Headers headers, TriggerProperties triggerProperties, CosmosDiagnostics diagnostics, RequestMessage requestmessage);
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public virtual TriggerProperties get_Resource();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    public virtual double get_RequestCharge();
    public virtual string get_ActivityId();
    public virtual string get_ETag();
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
    public static TriggerProperties op_Implicit(TriggerResponse response);
}
public enum Microsoft.Azure.Cosmos.Scripts.TriggerType : Enum {
    public byte value__;
    public static TriggerType Pre;
    public static TriggerType Post;
}
public class Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties : object {
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfLink>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Body { get; public set; }
    [JsonPropertyAttribute]
public string Id { get; public set; }
    [JsonPropertyAttribute]
public string ETag { get; private set; }
    [JsonPropertyAttribute]
public string SelfLink { get; private set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
private void set_ETag(string value);
    [CompilerGeneratedAttribute]
public string get_SelfLink();
    [CompilerGeneratedAttribute]
private void set_SelfLink(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public class Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse : Response`1<UserDefinedFunctionProperties> {
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private UserDefinedFunctionProperties <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    public Headers Headers { get; }
    public UserDefinedFunctionProperties Resource { get; }
    public HttpStatusCode StatusCode { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ETag { get; }
    internal RequestMessage RequestMessage { get; }
    internal UserDefinedFunctionResponse(HttpStatusCode httpStatusCode, Headers headers, UserDefinedFunctionProperties userDefinedFunctionProperties, CosmosDiagnostics diagnostics, RequestMessage requestMessage);
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public virtual UserDefinedFunctionProperties get_Resource();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    public virtual double get_RequestCharge();
    public virtual string get_ActivityId();
    public virtual string get_ETag();
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
    public static UserDefinedFunctionProperties op_Implicit(UserDefinedFunctionResponse response);
}
[FlagsAttribute]
internal enum Microsoft.Azure.Cosmos.SDKSupportedCapabilities : Enum {
    public ulong value__;
    public static SDKSupportedCapabilities None;
    public static SDKSupportedCapabilities PartitionMerge;
}
internal class Microsoft.Azure.Cosmos.SecureStringHMACSHA256Helper : object {
    private static UInt32 SHA256HashOutputSizeInBytes;
    private SecureString key;
    private int keyLength;
    private IntPtr algorithmHandle;
    public SecureString Key { get; }
    public SecureStringHMACSHA256Helper(SecureString base64EncodedKey);
    public sealed virtual SecureString get_Key();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private void Dispose(bool disposing);
    public sealed virtual Byte[] ComputeHash(ArraySegment`1<byte> bytesToHash);
    private void AddData(IntPtr hashHandle, ArraySegment`1<byte> dataStream);
    private Byte[] FinishHash(IntPtr hashHandle);
    private void InitializeBCryptHash(SecureString base64EncodedPassword, int base64EncodedPasswordLength, IntPtr& hashHandle);
}
internal static class Microsoft.Azure.Cosmos.SecureStringUtility : object {
    public static SecureString ConvertToSecureString(string unsecureStr);
}
internal class Microsoft.Azure.Cosmos.SerializableNameValueCollection : JsonSerializable {
    private Lazy`1<NameValueCollection> lazyCollection;
    [JsonIgnoreAttribute]
public NameValueCollection Collection { get; }
    public SerializableNameValueCollection(NameValueCollection collection);
    public NameValueCollection get_Collection();
    public static string SaveToString(SerializableNameValueCollection nameValueCollection);
    public static SerializableNameValueCollection LoadFromString(string value);
    internal virtual void OnSave();
    private NameValueCollection Init();
    public virtual bool Equals(object obj);
    public bool Equals(SerializableNameValueCollection collection);
    private bool IsEqual(SerializableNameValueCollection serializableNameValueCollection);
    public virtual int GetHashCode();
}
internal class Microsoft.Azure.Cosmos.SerializedParameterValue : ValueType {
    internal string rawSerializedJsonValue;
}
internal static class Microsoft.Azure.Cosmos.Serializer.CosmosElementSerializer : object {
    internal static MemoryStream ToStream(string containerRid, IEnumerable`1<CosmosElement> cosmosElements, ResourceType resourceType, CosmosSerializationFormatOptions cosmosSerializationOptions);
    internal static IReadOnlyList`1<T> GetResources(IReadOnlyList`1<CosmosElement> cosmosArray, CosmosSerializerCore serializerCore);
    internal static T[] GetResourcesHelper(IReadOnlyList`1<CosmosElement> cosmosElements, CosmosSerializerCore serializerCore, CosmosSerializationFormatOptions cosmosSerializationOptions);
    internal static MemoryStream ElementsToMemoryStream(IReadOnlyList`1<CosmosElement> cosmosElements, CosmosSerializationFormatOptions cosmosSerializationOptions);
    private static MemoryStream GetMemoryStreamFromJsonWriter(IJsonWriter jsonWriter);
    private static string GetRootNodeName(ResourceType resourceType);
}
internal class Microsoft.Azure.Cosmos.Serializer.CosmosLinqSerializerOptionsInternal : object {
    [CompilerGeneratedAttribute]
private CosmosLinqSerializerOptions <CosmosLinqSerializerOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosLinqSerializer <CustomCosmosLinqSerializer>k__BackingField;
    public CosmosLinqSerializerOptions CosmosLinqSerializerOptions { get; }
    public CosmosLinqSerializer CustomCosmosLinqSerializer { get; }
    private CosmosLinqSerializerOptionsInternal(CosmosLinqSerializerOptions cosmosLinqSerializerOptions, CosmosLinqSerializer customCosmosLinqSerializer);
    public static CosmosLinqSerializerOptionsInternal Create(CosmosLinqSerializerOptions cosmosLinqSerializerOptions, CosmosSerializer customCosmosSerializer);
    [CompilerGeneratedAttribute]
public CosmosLinqSerializerOptions get_CosmosLinqSerializerOptions();
    [CompilerGeneratedAttribute]
public CosmosLinqSerializer get_CustomCosmosLinqSerializer();
}
internal abstract class Microsoft.Azure.Cosmos.Serializer.JsonSerializationFormatOptions : object {
    [CompilerGeneratedAttribute]
private JsonSerializationFormat <JsonSerializationFormat>k__BackingField;
    public JsonSerializationFormat JsonSerializationFormat { get; }
    protected JsonSerializationFormatOptions(JsonSerializationFormat jsonSerializationFormat);
    [CompilerGeneratedAttribute]
public JsonSerializationFormat get_JsonSerializationFormat();
    public static JsonSerializationFormatOptions Create(JsonSerializationFormat jsonSerializationFormat);
    public static JsonSerializationFormatOptions Create(JsonSerializationFormat jsonSerializationFormat, CreateNavigator createNavigator);
}
internal abstract class Microsoft.Azure.Cosmos.ServerBatchRequest : object {
    private int maxBodyLength;
    private int maxOperationCount;
    private CosmosSerializerCore serializerCore;
    private ArraySegment`1<ItemBatchOperation> operations;
    private MemorySpanResizer`1<byte> operationResizableWriteBuffer;
    private MemoryStream bodyStream;
    private long bodyStreamPositionBeforeWritingCurrentRecord;
    private bool shouldDeleteLastWrittenRecord;
    private int lastWrittenOperationIndex;
    public IReadOnlyList`1<ItemBatchOperation> Operations { get; }
    protected ServerBatchRequest(int maxBodyLength, int maxOperationCount, CosmosSerializerCore serializerCore);
    public IReadOnlyList`1<ItemBatchOperation> get_Operations();
    public MemoryStream TransferBodyStream();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.ServerBatchRequest/<CreateBodyStreamAsync>d__13")]
protected Task`1<ArraySegment`1<ItemBatchOperation>> CreateBodyStreamAsync(ArraySegment`1<ItemBatchOperation> operations, CancellationToken cancellationToken, bool ensureContinuousOperationIndexes);
    private Result WriteOperation(long index, ReadOnlyMemory`1& buffer);
}
public abstract class Microsoft.Azure.Cosmos.ServerSideCumulativeMetrics : object {
    public ServerSideMetrics CumulativeMetrics { get; }
    public double TotalRequestCharge { get; }
    public IReadOnlyList`1<ServerSidePartitionedMetrics> PartitionedMetrics { get; }
    public abstract virtual ServerSideMetrics get_CumulativeMetrics();
    public abstract virtual double get_TotalRequestCharge();
    public abstract virtual IReadOnlyList`1<ServerSidePartitionedMetrics> get_PartitionedMetrics();
}
internal class Microsoft.Azure.Cosmos.ServerSideCumulativeMetricsInternal : ServerSideCumulativeMetrics {
    [CompilerGeneratedAttribute]
private ServerSideMetrics <CumulativeMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ServerSidePartitionedMetrics> <PartitionedMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TotalRequestCharge>k__BackingField;
    public ServerSideMetrics CumulativeMetrics { get; }
    public IReadOnlyList`1<ServerSidePartitionedMetrics> PartitionedMetrics { get; }
    public double TotalRequestCharge { get; }
    internal ServerSideCumulativeMetricsInternal(IEnumerable`1<ServerSidePartitionedMetricsInternal> serverSideMetricsList);
    [CompilerGeneratedAttribute]
public virtual ServerSideMetrics get_CumulativeMetrics();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<ServerSidePartitionedMetrics> get_PartitionedMetrics();
    [CompilerGeneratedAttribute]
public virtual double get_TotalRequestCharge();
}
public abstract class Microsoft.Azure.Cosmos.ServerSideMetrics : object {
    public TimeSpan TotalTime { get; }
    public long RetrievedDocumentCount { get; }
    public long RetrievedDocumentSize { get; }
    public long OutputDocumentCount { get; }
    public long OutputDocumentSize { get; }
    public TimeSpan QueryPreparationTime { get; }
    public TimeSpan IndexLookupTime { get; }
    public TimeSpan DocumentLoadTime { get; }
    public TimeSpan RuntimeExecutionTime { get; }
    public TimeSpan DocumentWriteTime { get; }
    public double IndexHitRatio { get; }
    public TimeSpan VMExecutionTime { get; }
    public abstract virtual TimeSpan get_TotalTime();
    public abstract virtual long get_RetrievedDocumentCount();
    public abstract virtual long get_RetrievedDocumentSize();
    public abstract virtual long get_OutputDocumentCount();
    public abstract virtual long get_OutputDocumentSize();
    public abstract virtual TimeSpan get_QueryPreparationTime();
    public abstract virtual TimeSpan get_IndexLookupTime();
    public abstract virtual TimeSpan get_DocumentLoadTime();
    public abstract virtual TimeSpan get_RuntimeExecutionTime();
    public abstract virtual TimeSpan get_DocumentWriteTime();
    public abstract virtual double get_IndexHitRatio();
    public abstract virtual TimeSpan get_VMExecutionTime();
}
public abstract class Microsoft.Azure.Cosmos.ServerSidePartitionedMetrics : object {
    public ServerSideMetrics ServerSideMetrics { get; }
    public string FeedRange { get; }
    public Nullable`1<int> PartitionKeyRangeId { get; }
    public double RequestCharge { get; }
    public abstract virtual ServerSideMetrics get_ServerSideMetrics();
    public abstract virtual string get_FeedRange();
    public abstract virtual Nullable`1<int> get_PartitionKeyRangeId();
    public abstract virtual double get_RequestCharge();
}
internal class Microsoft.Azure.Cosmos.ServerSidePartitionedMetricsInternal : ServerSidePartitionedMetrics {
    [CompilerGeneratedAttribute]
private ServerSideMetricsInternal <ServerSideMetricsInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FeedRange>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PartitionKeyRangeId>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RequestCharge>k__BackingField;
    public ServerSideMetricsInternal ServerSideMetricsInternal { get; }
    public ServerSideMetrics ServerSideMetrics { get; }
    public string FeedRange { get; }
    public Nullable`1<int> PartitionKeyRangeId { get; }
    public double RequestCharge { get; }
    internal ServerSidePartitionedMetricsInternal(ServerSideMetricsInternal serverSideMetricsInternal);
    internal ServerSidePartitionedMetricsInternal(ServerSideMetricsInternal serverSideMetricsInternal, string feedRange, Nullable`1<int> partitionKeyRangeId, double requestCharge);
    [CompilerGeneratedAttribute]
public ServerSideMetricsInternal get_ServerSideMetricsInternal();
    public virtual ServerSideMetrics get_ServerSideMetrics();
    [CompilerGeneratedAttribute]
public virtual string get_FeedRange();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_PartitionKeyRangeId();
    [CompilerGeneratedAttribute]
public virtual double get_RequestCharge();
}
internal class Microsoft.Azure.Cosmos.ServicePointAccessor : object {
    private static bool IsBrowser;
    private ServicePoint servicePoint;
    public int ConnectionLimit { get; public set; }
    private ServicePointAccessor(ServicePoint servicePoint);
    private static ServicePointAccessor();
    internal static ServicePointAccessor FindServicePoint(Uri endpoint);
    public int get_ConnectionLimit();
    public void set_ConnectionLimit(int value);
    private void TryDisableUseNagleAlgorithm();
    private void TrySetConnectionLimit(int connectionLimit);
}
internal class Microsoft.Azure.Cosmos.SinglePartitionKeyServerBatchRequest : ServerBatchRequest {
    [CompilerGeneratedAttribute]
private Nullable`1<PartitionKey> <PartitionKey>k__BackingField;
    public Nullable`1<PartitionKey> PartitionKey { get; }
    private SinglePartitionKeyServerBatchRequest(Nullable`1<PartitionKey> partitionKey, CosmosSerializerCore serializerCore);
    [CompilerGeneratedAttribute]
public Nullable`1<PartitionKey> get_PartitionKey();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.SinglePartitionKeyServerBatchRequest/<CreateAsync>d__4")]
public static Task`1<SinglePartitionKeyServerBatchRequest> CreateAsync(Nullable`1<PartitionKey> partitionKey, ArraySegment`1<ItemBatchOperation> operations, CosmosSerializerCore serializerCore, ITrace trace, CancellationToken cancellationToken);
}
[DataContractAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Spatial.Converters.BoundingBoxJsonConverter")]
public class Microsoft.Azure.Cosmos.Spatial.BoundingBox : object {
    [CompilerGeneratedAttribute]
private Position <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private Position <Max>k__BackingField;
    [DataMemberAttribute]
public Position Min { get; private set; }
    [DataMemberAttribute]
public Position Max { get; private set; }
    public BoundingBox(Position min, Position max);
    [CompilerGeneratedAttribute]
public Position get_Min();
    [CompilerGeneratedAttribute]
private void set_Min(Position value);
    [CompilerGeneratedAttribute]
public Position get_Max();
    [CompilerGeneratedAttribute]
private void set_Max(Position value);
    public sealed virtual bool Equals(BoundingBox other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.Azure.Cosmos.Spatial.Converters.BoundingBoxJsonConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Microsoft.Azure.Cosmos.Spatial.Converters.CrsJsonConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Microsoft.Azure.Cosmos.Spatial.Converters.GeometryJsonConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Microsoft.Azure.Cosmos.Spatial.Converters.LinearRingJsonConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Microsoft.Azure.Cosmos.Spatial.Converters.LineStringCoordinatesJsonConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Microsoft.Azure.Cosmos.Spatial.Converters.PolygonCoordinatesJsonConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Microsoft.Azure.Cosmos.Spatial.Converters.PositionJsonConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[DataContractAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Spatial.Converters.CrsJsonConverter")]
public abstract class Microsoft.Azure.Cosmos.Spatial.Crs : object {
    [CompilerGeneratedAttribute]
private CrsType <Type>k__BackingField;
    public static Crs Default { get; }
    public static Crs Unspecified { get; }
    [DataMemberAttribute]
public CrsType Type { get; private set; }
    protected Crs(CrsType type);
    public static Crs get_Default();
    public static Crs get_Unspecified();
    [CompilerGeneratedAttribute]
public CrsType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(CrsType value);
    public static NamedCrs Named(string name);
    public static LinkedCrs Linked(string href);
    public static LinkedCrs Linked(string href, string type);
}
public enum Microsoft.Azure.Cosmos.Spatial.CrsType : Enum {
    public int value__;
    public static CrsType Named;
    public static CrsType Linked;
    public static CrsType Unspecified;
}
[DataContractAttribute]
[JsonObjectAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Spatial.Converters.GeometryJsonConverter")]
public abstract class Microsoft.Azure.Cosmos.Spatial.Geometry : object {
    [CompilerGeneratedAttribute]
private GeometryType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundingBox <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Crs <CrsForSerialization>k__BackingField;
    public Crs Crs { get; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public GeometryType Type { get; private set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public BoundingBox BoundingBox { get; private set; }
    [JsonExtensionDataAttribute]
[DataMemberAttribute]
public IDictionary`2<string, object> AdditionalProperties { get; private set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
private Crs CrsForSerialization { get; private set; }
    protected Geometry(GeometryType type, GeometryParams geometryParams);
    public Crs get_Crs();
    [CompilerGeneratedAttribute]
public GeometryType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(GeometryType value);
    [CompilerGeneratedAttribute]
public BoundingBox get_BoundingBox();
    [CompilerGeneratedAttribute]
private void set_BoundingBox(BoundingBox value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
private Crs get_CrsForSerialization();
    [CompilerGeneratedAttribute]
private void set_CrsForSerialization(Crs value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public double Distance(Geometry to);
    public bool Within(Geometry outer);
    public bool IsValid();
    public GeometryValidationResult IsValidDetailed();
    public bool Intersects(Geometry geometry2);
    private bool Equals(Geometry other);
}
[DataContractAttribute]
internal class Microsoft.Azure.Cosmos.Spatial.GeometryCollection : Geometry {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<Geometry> <Geometries>k__BackingField;
    [DataMemberAttribute]
[JsonPropertyAttribute]
public ReadOnlyCollection`1<Geometry> Geometries { get; private set; }
    public GeometryCollection(IList`1<Geometry> geometries);
    public GeometryCollection(IList`1<Geometry> geometries, GeometryParams geometryParams);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<Geometry> get_Geometries();
    [CompilerGeneratedAttribute]
private void set_Geometries(ReadOnlyCollection`1<Geometry> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(GeometryCollection other);
}
[DataContractAttribute]
public class Microsoft.Azure.Cosmos.Spatial.GeometryParams : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Crs <Crs>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundingBox <BoundingBox>k__BackingField;
    [DataMemberAttribute]
public IDictionary`2<string, object> AdditionalProperties { get; public set; }
    [DataMemberAttribute]
public Crs Crs { get; public set; }
    [DataMemberAttribute]
public BoundingBox BoundingBox { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Crs get_Crs();
    [CompilerGeneratedAttribute]
public void set_Crs(Crs value);
    [CompilerGeneratedAttribute]
public BoundingBox get_BoundingBox();
    [CompilerGeneratedAttribute]
public void set_BoundingBox(BoundingBox value);
}
public enum Microsoft.Azure.Cosmos.Spatial.GeometryShape : Enum {
    public int value__;
    public static GeometryShape Point;
    public static GeometryShape MultiPoint;
    public static GeometryShape LineString;
    public static GeometryShape MultiLineString;
    public static GeometryShape Polygon;
    public static GeometryShape MultiPolygon;
    public static GeometryShape GeometryCollection;
}
public enum Microsoft.Azure.Cosmos.Spatial.GeometryType : Enum {
    public int value__;
    public static GeometryType Point;
    public static GeometryType MultiPoint;
    public static GeometryType LineString;
    public static GeometryType MultiLineString;
    public static GeometryType Polygon;
    public static GeometryType MultiPolygon;
    public static GeometryType GeometryCollection;
}
[DataContractAttribute]
[JsonObjectAttribute]
public class Microsoft.Azure.Cosmos.Spatial.GeometryValidationResult : object {
    [CompilerGeneratedAttribute]
private bool <IsValid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [DataMemberAttribute]
[JsonPropertyAttribute]
public bool IsValid { get; private set; }
    [DataMemberAttribute]
[JsonPropertyAttribute("reason")]
public string Reason { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_IsValid();
    [CompilerGeneratedAttribute]
private void set_IsValid(bool value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(string value);
}
[DataContractAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Spatial.Converters.LinearRingJsonConverter")]
public class Microsoft.Azure.Cosmos.Spatial.LinearRing : object {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<Position> <Positions>k__BackingField;
    [DataMemberAttribute]
public ReadOnlyCollection`1<Position> Positions { get; private set; }
    public LinearRing(IList`1<Position> coordinates);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<Position> get_Positions();
    [CompilerGeneratedAttribute]
private void set_Positions(ReadOnlyCollection`1<Position> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(LinearRing other);
}
[DataContractAttribute]
public class Microsoft.Azure.Cosmos.Spatial.LineString : Geometry {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<Position> <Positions>k__BackingField;
    [DataMemberAttribute]
[JsonPropertyAttribute]
public ReadOnlyCollection`1<Position> Positions { get; private set; }
    public LineString(IList`1<Position> coordinates);
    public LineString(IList`1<Position> coordinates, GeometryParams geometryParams);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<Position> get_Positions();
    [CompilerGeneratedAttribute]
private void set_Positions(ReadOnlyCollection`1<Position> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(LineString other);
}
[DataContractAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Spatial.Converters.LineStringCoordinatesJsonConverter")]
internal class Microsoft.Azure.Cosmos.Spatial.LineStringCoordinates : object {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<Position> <Positions>k__BackingField;
    [DataMemberAttribute]
public ReadOnlyCollection`1<Position> Positions { get; private set; }
    public LineStringCoordinates(IList`1<Position> positions);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<Position> get_Positions();
    [CompilerGeneratedAttribute]
private void set_Positions(ReadOnlyCollection`1<Position> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(LineStringCoordinates other);
}
[DataContractAttribute]
public class Microsoft.Azure.Cosmos.Spatial.LinkedCrs : Crs {
    [CompilerGeneratedAttribute]
private string <Href>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HrefType>k__BackingField;
    [DataMemberAttribute]
public string Href { get; private set; }
    [DataMemberAttribute]
public string HrefType { get; private set; }
    internal LinkedCrs(string href, string hrefType);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
private void set_Href(string value);
    [CompilerGeneratedAttribute]
public string get_HrefType();
    [CompilerGeneratedAttribute]
private void set_HrefType(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(LinkedCrs other);
}
[DataContractAttribute]
internal class Microsoft.Azure.Cosmos.Spatial.MultiLineString : Geometry {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<LineStringCoordinates> <LineStrings>k__BackingField;
    [DataMemberAttribute]
[JsonPropertyAttribute]
public ReadOnlyCollection`1<LineStringCoordinates> LineStrings { get; private set; }
    public MultiLineString(IList`1<LineStringCoordinates> lineStrings);
    public MultiLineString(IList`1<LineStringCoordinates> lineStrings, GeometryParams geometryParams);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<LineStringCoordinates> get_LineStrings();
    [CompilerGeneratedAttribute]
private void set_LineStrings(ReadOnlyCollection`1<LineStringCoordinates> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(MultiLineString other);
}
[DataContractAttribute]
internal class Microsoft.Azure.Cosmos.Spatial.MultiPoint : Geometry {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<Position> <Points>k__BackingField;
    [DataMemberAttribute]
[JsonPropertyAttribute]
public ReadOnlyCollection`1<Position> Points { get; private set; }
    public MultiPoint(IList`1<Position> points);
    public MultiPoint(IList`1<Position> points, GeometryParams geometryParams);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<Position> get_Points();
    [CompilerGeneratedAttribute]
private void set_Points(ReadOnlyCollection`1<Position> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(MultiPoint other);
}
[DataContractAttribute]
public class Microsoft.Azure.Cosmos.Spatial.MultiPolygon : Geometry {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<PolygonCoordinates> <Polygons>k__BackingField;
    [DataMemberAttribute]
[JsonPropertyAttribute]
public ReadOnlyCollection`1<PolygonCoordinates> Polygons { get; private set; }
    public MultiPolygon(IList`1<PolygonCoordinates> polygons);
    public MultiPolygon(IList`1<PolygonCoordinates> polygons, GeometryParams geometryParams);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<PolygonCoordinates> get_Polygons();
    [CompilerGeneratedAttribute]
private void set_Polygons(ReadOnlyCollection`1<PolygonCoordinates> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(MultiPolygon other);
}
[DataContractAttribute]
public class Microsoft.Azure.Cosmos.Spatial.NamedCrs : Crs {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [DataMemberAttribute]
public string Name { get; private set; }
    internal NamedCrs(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(NamedCrs other);
}
[DataContractAttribute]
public class Microsoft.Azure.Cosmos.Spatial.Point : Geometry {
    [CompilerGeneratedAttribute]
private Position <Position>k__BackingField;
    [DataMemberAttribute]
[JsonPropertyAttribute]
public Position Position { get; private set; }
    public Point(double longitude, double latitude);
    public Point(Position position);
    public Point(Position position, GeometryParams geometryParams);
    [CompilerGeneratedAttribute]
public Position get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(Position value);
    public sealed virtual bool Equals(Point other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DataContractAttribute]
public class Microsoft.Azure.Cosmos.Spatial.Polygon : Geometry {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<LinearRing> <Rings>k__BackingField;
    [DataMemberAttribute]
[JsonPropertyAttribute]
public ReadOnlyCollection`1<LinearRing> Rings { get; private set; }
    public Polygon(IList`1<Position> externalRingPositions);
    public Polygon(IList`1<LinearRing> rings);
    public Polygon(IList`1<LinearRing> rings, GeometryParams geometryParams);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<LinearRing> get_Rings();
    [CompilerGeneratedAttribute]
private void set_Rings(ReadOnlyCollection`1<LinearRing> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(Polygon other);
}
[DataContractAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Spatial.Converters.PolygonCoordinatesJsonConverter")]
public class Microsoft.Azure.Cosmos.Spatial.PolygonCoordinates : object {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<LinearRing> <Rings>k__BackingField;
    [DataMemberAttribute]
public ReadOnlyCollection`1<LinearRing> Rings { get; private set; }
    public PolygonCoordinates(IList`1<LinearRing> rings);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<LinearRing> get_Rings();
    [CompilerGeneratedAttribute]
private void set_Rings(ReadOnlyCollection`1<LinearRing> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(PolygonCoordinates other);
}
[DataContractAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Spatial.Converters.PositionJsonConverter")]
public class Microsoft.Azure.Cosmos.Spatial.Position : object {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<double> <Coordinates>k__BackingField;
    [DataMemberAttribute]
public ReadOnlyCollection`1<double> Coordinates { get; private set; }
    public double Longitude { get; }
    public double Latitude { get; }
    public Nullable`1<double> Altitude { get; }
    public Position(double longitude, double latitude);
    public Position(double longitude, double latitude, Nullable`1<double> altitude);
    public Position(IList`1<double> coordinates);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<double> get_Coordinates();
    [CompilerGeneratedAttribute]
private void set_Coordinates(ReadOnlyCollection`1<double> value);
    public double get_Longitude();
    public double get_Latitude();
    public Nullable`1<double> get_Altitude();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(Position other);
}
[DataContractAttribute]
internal class Microsoft.Azure.Cosmos.Spatial.UnspecifiedCrs : Crs {
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(UnspecifiedCrs other);
}
internal class Microsoft.Azure.Cosmos.SpatialIndex : Index {
    [CompilerGeneratedAttribute]
private DataType <DataType>k__BackingField;
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public DataType DataType { get; public set; }
    public SpatialIndex(DataType dataType);
    [CompilerGeneratedAttribute]
public DataType get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(DataType value);
}
public class Microsoft.Azure.Cosmos.SpatialPath : object {
    private Collection`1<SpatialType> spatialTypesInternal;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private BoundingBoxProperties <BoundingBox>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [JsonPropertyAttribute]
public Collection`1<SpatialType> SpatialTypes { get; internal set; }
    [JsonPropertyAttribute]
public BoundingBoxProperties BoundingBox { get; public set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    public Collection`1<SpatialType> get_SpatialTypes();
    internal void set_SpatialTypes(Collection`1<SpatialType> value);
    [CompilerGeneratedAttribute]
public BoundingBoxProperties get_BoundingBox();
    [CompilerGeneratedAttribute]
public void set_BoundingBox(BoundingBoxProperties value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public enum Microsoft.Azure.Cosmos.SpatialType : Enum {
    public int value__;
    public static SpatialType Point;
    public static SpatialType LineString;
    public static SpatialType Polygon;
    public static SpatialType MultiPolygon;
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlAliasedCollectionExpression : SqlCollectionExpression {
    [CompilerGeneratedAttribute]
private SqlCollection <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlIdentifier <Alias>k__BackingField;
    public SqlCollection Collection { get; }
    public SqlIdentifier Alias { get; }
    private SqlAliasedCollectionExpression(SqlCollection collection, SqlIdentifier alias);
    [CompilerGeneratedAttribute]
public SqlCollection get_Collection();
    [CompilerGeneratedAttribute]
public SqlIdentifier get_Alias();
    public static SqlAliasedCollectionExpression Create(SqlCollection collection, SqlIdentifier alias);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlCollectionExpressionVisitor visitor);
    public virtual TResult Accept(SqlCollectionExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlCollectionExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlAllScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlQuery <Subquery>k__BackingField;
    public SqlQuery Subquery { get; }
    private SqlAllScalarExpression(SqlQuery subquery);
    [CompilerGeneratedAttribute]
public SqlQuery get_Subquery();
    public static SqlAllScalarExpression Create(SqlQuery subquery);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlArrayCreateScalarExpression : SqlScalarExpression {
    private static SqlArrayCreateScalarExpression Empty;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<SqlScalarExpression> <Items>k__BackingField;
    public ImmutableArray`1<SqlScalarExpression> Items { get; }
    private SqlArrayCreateScalarExpression(ImmutableArray`1<SqlScalarExpression> items);
    private static SqlArrayCreateScalarExpression();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SqlScalarExpression> get_Items();
    public static SqlArrayCreateScalarExpression Create();
    public static SqlArrayCreateScalarExpression Create(SqlScalarExpression[] items);
    public static SqlArrayCreateScalarExpression Create(ImmutableArray`1<SqlScalarExpression> items);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlArrayIteratorCollectionExpression : SqlCollectionExpression {
    [CompilerGeneratedAttribute]
private SqlIdentifier <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlCollection <Collection>k__BackingField;
    public SqlIdentifier Identifier { get; }
    public SqlCollection Collection { get; }
    private SqlArrayIteratorCollectionExpression(SqlIdentifier identifier, SqlCollection collection);
    [CompilerGeneratedAttribute]
public SqlIdentifier get_Identifier();
    [CompilerGeneratedAttribute]
public SqlCollection get_Collection();
    public static SqlArrayIteratorCollectionExpression Create(SqlIdentifier identifier, SqlCollection collection);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlCollectionExpressionVisitor visitor);
    public virtual TResult Accept(SqlCollectionExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlCollectionExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlArrayScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlQuery <SqlQuery>k__BackingField;
    public SqlQuery SqlQuery { get; }
    private SqlArrayScalarExpression(SqlQuery sqlQuery);
    [CompilerGeneratedAttribute]
public SqlQuery get_SqlQuery();
    public static SqlArrayScalarExpression Create(SqlQuery sqlQuery);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlBetweenScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Not>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <StartInclusive>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <EndInclusive>k__BackingField;
    public SqlScalarExpression Expression { get; }
    public bool Not { get; }
    public SqlScalarExpression StartInclusive { get; }
    public SqlScalarExpression EndInclusive { get; }
    private SqlBetweenScalarExpression(SqlScalarExpression expression, SqlScalarExpression startInclusive, SqlScalarExpression endInclusive, bool not);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Expression();
    [CompilerGeneratedAttribute]
public bool get_Not();
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_StartInclusive();
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_EndInclusive();
    public static SqlBetweenScalarExpression Create(SqlScalarExpression expression, SqlScalarExpression startInclusive, SqlScalarExpression endInclusive, bool not);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlBinaryScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlScalarExpression <LeftExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlBinaryScalarOperatorKind <OperatorKind>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <RightExpression>k__BackingField;
    public SqlScalarExpression LeftExpression { get; }
    public SqlBinaryScalarOperatorKind OperatorKind { get; }
    public SqlScalarExpression RightExpression { get; }
    private SqlBinaryScalarExpression(SqlBinaryScalarOperatorKind operatorKind, SqlScalarExpression left, SqlScalarExpression right);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_LeftExpression();
    [CompilerGeneratedAttribute]
public SqlBinaryScalarOperatorKind get_OperatorKind();
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_RightExpression();
    public static SqlBinaryScalarExpression Create(SqlBinaryScalarOperatorKind operatorKind, SqlScalarExpression left, SqlScalarExpression right);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal enum Microsoft.Azure.Cosmos.SqlObjects.SqlBinaryScalarOperatorKind : Enum {
    public int value__;
    public static SqlBinaryScalarOperatorKind Add;
    public static SqlBinaryScalarOperatorKind And;
    public static SqlBinaryScalarOperatorKind BitwiseAnd;
    public static SqlBinaryScalarOperatorKind BitwiseOr;
    public static SqlBinaryScalarOperatorKind BitwiseXor;
    public static SqlBinaryScalarOperatorKind Coalesce;
    public static SqlBinaryScalarOperatorKind Divide;
    public static SqlBinaryScalarOperatorKind Equal;
    public static SqlBinaryScalarOperatorKind GreaterThan;
    public static SqlBinaryScalarOperatorKind GreaterThanOrEqual;
    public static SqlBinaryScalarOperatorKind LessThan;
    public static SqlBinaryScalarOperatorKind LessThanOrEqual;
    public static SqlBinaryScalarOperatorKind Modulo;
    public static SqlBinaryScalarOperatorKind Multiply;
    public static SqlBinaryScalarOperatorKind NotEqual;
    public static SqlBinaryScalarOperatorKind Or;
    public static SqlBinaryScalarOperatorKind StringConcat;
    public static SqlBinaryScalarOperatorKind Subtract;
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlBooleanLiteral : SqlLiteral {
    public static SqlBooleanLiteral True;
    public static SqlBooleanLiteral False;
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public bool Value { get; }
    private SqlBooleanLiteral(bool value);
    private static SqlBooleanLiteral();
    [CompilerGeneratedAttribute]
public bool get_Value();
    public static SqlBooleanLiteral Create(bool value);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlLiteralVisitor visitor);
    public virtual TResult Accept(SqlLiteralVisitor`1<TResult> visitor);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlCoalesceScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Right>k__BackingField;
    public SqlScalarExpression Left { get; }
    public SqlScalarExpression Right { get; }
    private SqlCoalesceScalarExpression(SqlScalarExpression left, SqlScalarExpression right);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Left();
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Right();
    public static SqlCoalesceScalarExpression Create(SqlScalarExpression left, SqlScalarExpression right);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.SqlCollection : SqlObject {
    public abstract virtual void Accept(SqlCollectionVisitor visitor);
    public abstract virtual TResult Accept(SqlCollectionVisitor`1<TResult> visitor);
    public abstract virtual TResult Accept(SqlCollectionVisitor`2<T, TResult> visitor, T input);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.SqlCollectionExpression : SqlObject {
    public abstract virtual void Accept(SqlCollectionExpressionVisitor visitor);
    public abstract virtual TResult Accept(SqlCollectionExpressionVisitor`1<TResult> visitor);
    public abstract virtual TResult Accept(SqlCollectionExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlConditionalScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Consequent>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Alternative>k__BackingField;
    public SqlScalarExpression Condition { get; }
    public SqlScalarExpression Consequent { get; }
    public SqlScalarExpression Alternative { get; }
    private SqlConditionalScalarExpression(SqlScalarExpression condition, SqlScalarExpression consequent, SqlScalarExpression alternative);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Condition();
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Consequent();
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Alternative();
    public static SqlConditionalScalarExpression Create(SqlScalarExpression condition, SqlScalarExpression consequent, SqlScalarExpression alternative);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlExistsScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlQuery <Subquery>k__BackingField;
    public SqlQuery Subquery { get; }
    private SqlExistsScalarExpression(SqlQuery subquery);
    [CompilerGeneratedAttribute]
public SqlQuery get_Subquery();
    public static SqlExistsScalarExpression Create(SqlQuery subquery);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlFirstScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlQuery <Subquery>k__BackingField;
    public SqlQuery Subquery { get; }
    private SqlFirstScalarExpression(SqlQuery subquery);
    [CompilerGeneratedAttribute]
public SqlQuery get_Subquery();
    public static SqlFirstScalarExpression Create(SqlQuery subquery);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlFromClause : SqlObject {
    [CompilerGeneratedAttribute]
private SqlCollectionExpression <Expression>k__BackingField;
    public SqlCollectionExpression Expression { get; }
    private SqlFromClause(SqlCollectionExpression expression);
    [CompilerGeneratedAttribute]
public SqlCollectionExpression get_Expression();
    public static SqlFromClause Create(SqlCollectionExpression expression);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlFunctionCallScalarExpression : SqlScalarExpression {
    private static ImmutableDictionary`2<string, SqlIdentifier> FunctionIdentifiers;
    [CompilerGeneratedAttribute]
private SqlIdentifier <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<SqlScalarExpression> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUdf>k__BackingField;
    public SqlIdentifier Name { get; }
    public ImmutableArray`1<SqlScalarExpression> Arguments { get; }
    public bool IsUdf { get; }
    private SqlFunctionCallScalarExpression(SqlIdentifier name, bool isUdf, ImmutableArray`1<SqlScalarExpression> arguments);
    private static SqlFunctionCallScalarExpression();
    [CompilerGeneratedAttribute]
public SqlIdentifier get_Name();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SqlScalarExpression> get_Arguments();
    [CompilerGeneratedAttribute]
public bool get_IsUdf();
    public static SqlFunctionCallScalarExpression Create(SqlIdentifier name, bool isUdf, SqlScalarExpression[] arguments);
    public static SqlFunctionCallScalarExpression Create(SqlIdentifier name, bool isUdf, ImmutableArray`1<SqlScalarExpression> arguments);
    public static SqlFunctionCallScalarExpression Create(string name, bool isUdf, SqlScalarExpression[] arguments);
    public static SqlFunctionCallScalarExpression Create(string name, bool isUdf, ImmutableArray`1<SqlScalarExpression> arguments);
    public static SqlFunctionCallScalarExpression CreateBuiltin(string name, SqlScalarExpression[] arguments);
    public static SqlFunctionCallScalarExpression CreateBuiltin(string name, ImmutableArray`1<SqlScalarExpression> arguments);
    public static SqlFunctionCallScalarExpression CreateBuiltin(SqlIdentifier name, SqlScalarExpression[] arguments);
    public static SqlFunctionCallScalarExpression CreateBuiltin(SqlIdentifier name, ImmutableArray`1<SqlScalarExpression> arguments);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlGroupByClause : SqlObject {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<SqlScalarExpression> <Expressions>k__BackingField;
    public ImmutableArray`1<SqlScalarExpression> Expressions { get; }
    private SqlGroupByClause(ImmutableArray`1<SqlScalarExpression> expressions);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SqlScalarExpression> get_Expressions();
    public static SqlGroupByClause Create(SqlScalarExpression[] expressions);
    public static SqlGroupByClause Create(ImmutableArray`1<SqlScalarExpression> expressions);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlIdentifier : SqlObject {
    private static Dictionary`2<string, SqlIdentifier> FrequentIdentifiers;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    private SqlIdentifier(string value);
    private static SqlIdentifier();
    [CompilerGeneratedAttribute]
public string get_Value();
    public static SqlIdentifier Create(string value);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlIdentifierPathExpression : SqlPathExpression {
    [CompilerGeneratedAttribute]
private SqlIdentifier <Value>k__BackingField;
    public SqlIdentifier Value { get; }
    private SqlIdentifierPathExpression(SqlPathExpression parentPath, SqlIdentifier value);
    [CompilerGeneratedAttribute]
public SqlIdentifier get_Value();
    public static SqlIdentifierPathExpression Create(SqlPathExpression parentPath, SqlIdentifier value);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlPathExpressionVisitor visitor);
    public virtual TResult Accept(SqlPathExpressionVisitor`1<TResult> visitor);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlInputPathCollection : SqlCollection {
    [CompilerGeneratedAttribute]
private SqlIdentifier <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlPathExpression <RelativePath>k__BackingField;
    public SqlIdentifier Input { get; }
    public SqlPathExpression RelativePath { get; }
    private SqlInputPathCollection(SqlIdentifier input, SqlPathExpression relativePath);
    [CompilerGeneratedAttribute]
public SqlIdentifier get_Input();
    [CompilerGeneratedAttribute]
public SqlPathExpression get_RelativePath();
    public static SqlInputPathCollection Create(SqlIdentifier input, SqlPathExpression relativePath);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlCollectionVisitor visitor);
    public virtual TResult Accept(SqlCollectionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlCollectionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlInScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Needle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Not>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<SqlScalarExpression> <Haystack>k__BackingField;
    public SqlScalarExpression Needle { get; }
    public bool Not { get; }
    public ImmutableArray`1<SqlScalarExpression> Haystack { get; }
    private SqlInScalarExpression(SqlScalarExpression needle, bool not, ImmutableArray`1<SqlScalarExpression> haystack);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Needle();
    [CompilerGeneratedAttribute]
public bool get_Not();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SqlScalarExpression> get_Haystack();
    public static SqlInScalarExpression Create(SqlScalarExpression needle, bool not, SqlScalarExpression[] haystack);
    public static SqlInScalarExpression Create(SqlScalarExpression needle, bool not, ImmutableArray`1<SqlScalarExpression> haystack);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlJoinCollectionExpression : SqlCollectionExpression {
    [CompilerGeneratedAttribute]
private SqlCollectionExpression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlCollectionExpression <Right>k__BackingField;
    public SqlCollectionExpression Left { get; }
    public SqlCollectionExpression Right { get; }
    private SqlJoinCollectionExpression(SqlCollectionExpression left, SqlCollectionExpression right);
    [CompilerGeneratedAttribute]
public SqlCollectionExpression get_Left();
    [CompilerGeneratedAttribute]
public SqlCollectionExpression get_Right();
    public static SqlJoinCollectionExpression Create(SqlCollectionExpression left, SqlCollectionExpression right);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlCollectionExpressionVisitor visitor);
    public virtual TResult Accept(SqlCollectionExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlCollectionExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlLastScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlQuery <Subquery>k__BackingField;
    public SqlQuery Subquery { get; }
    private SqlLastScalarExpression(SqlQuery subquery);
    [CompilerGeneratedAttribute]
public SqlQuery get_Subquery();
    public static SqlLastScalarExpression Create(SqlQuery subquery);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlLikeScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Not>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlStringLiteral <EscapeSequence>k__BackingField;
    public SqlScalarExpression Expression { get; }
    public SqlScalarExpression Pattern { get; }
    public bool Not { get; }
    public SqlStringLiteral EscapeSequence { get; }
    private SqlLikeScalarExpression(SqlScalarExpression expression, SqlScalarExpression pattern, bool not, SqlStringLiteral escapeSequence);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Expression();
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Pattern();
    [CompilerGeneratedAttribute]
public bool get_Not();
    [CompilerGeneratedAttribute]
public SqlStringLiteral get_EscapeSequence();
    public static SqlLikeScalarExpression Create(SqlScalarExpression expression, SqlScalarExpression pattern, bool not, SqlStringLiteral escapeSequence);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlLimitSpec : SqlObject {
    private static int PremadeLimitIndex;
    private static ImmutableArray`1<SqlLimitSpec> PremadeLimitSpecs;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <LimitExpression>k__BackingField;
    public SqlScalarExpression LimitExpression { get; }
    private SqlLimitSpec(SqlScalarExpression limitExpression);
    private static SqlLimitSpec();
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_LimitExpression();
    public static SqlLimitSpec Create(SqlNumberLiteral sqlNumberLiteral);
    public static SqlLimitSpec Create(SqlParameter sqlParameter);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.SqlLiteral : SqlObject {
    public abstract virtual void Accept(SqlLiteralVisitor visitor);
    public abstract virtual TResult Accept(SqlLiteralVisitor`1<TResult> visitor);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlLiteralScalarExpression : SqlScalarExpression {
    public static SqlLiteralScalarExpression SqlNullLiteralScalarExpression;
    public static SqlLiteralScalarExpression SqlTrueLiteralScalarExpression;
    public static SqlLiteralScalarExpression SqlFalseLiteralScalarExpression;
    public static SqlLiteralScalarExpression SqlUndefinedLiteralScalarExpression;
    [CompilerGeneratedAttribute]
private SqlLiteral <Literal>k__BackingField;
    public SqlLiteral Literal { get; }
    private SqlLiteralScalarExpression(SqlLiteral literal);
    private static SqlLiteralScalarExpression();
    [CompilerGeneratedAttribute]
public SqlLiteral get_Literal();
    public static SqlLiteralScalarExpression Create(SqlLiteral sqlLiteral);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlMemberIndexerScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Indexer>k__BackingField;
    public SqlScalarExpression Member { get; }
    public SqlScalarExpression Indexer { get; }
    private SqlMemberIndexerScalarExpression(SqlScalarExpression member, SqlScalarExpression indexer);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Member();
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Indexer();
    public static SqlMemberIndexerScalarExpression Create(SqlScalarExpression member, SqlScalarExpression indexer);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlNullLiteral : SqlLiteral {
    public static SqlNullLiteral Singleton;
    private static SqlNullLiteral();
    public static SqlNullLiteral Create();
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlLiteralVisitor visitor);
    public virtual TResult Accept(SqlLiteralVisitor`1<TResult> visitor);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlNumberLiteral : SqlLiteral {
    private static int Capacity;
    private static Dictionary`2<long, SqlNumberLiteral> FrequentLongs;
    private static Dictionary`2<double, SqlNumberLiteral> FrequentDoubles;
    [CompilerGeneratedAttribute]
private Number64 <Value>k__BackingField;
    public Number64 Value { get; }
    private SqlNumberLiteral(Number64 value);
    private static SqlNumberLiteral();
    [CompilerGeneratedAttribute]
public Number64 get_Value();
    public static SqlNumberLiteral Create(Number64 number64);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlLiteralVisitor visitor);
    public virtual TResult Accept(SqlLiteralVisitor`1<TResult> visitor);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlNumberPathExpression : SqlPathExpression {
    [CompilerGeneratedAttribute]
private SqlNumberLiteral <Value>k__BackingField;
    public SqlNumberLiteral Value { get; }
    private SqlNumberPathExpression(SqlPathExpression parentPath, SqlNumberLiteral value);
    [CompilerGeneratedAttribute]
public SqlNumberLiteral get_Value();
    public static SqlNumberPathExpression Create(SqlPathExpression parentPath, SqlNumberLiteral value);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlPathExpressionVisitor visitor);
    public virtual TResult Accept(SqlPathExpressionVisitor`1<TResult> visitor);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.SqlObject : object {
    public abstract virtual void Accept(SqlObjectVisitor visitor);
    public abstract virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public abstract virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SqlObject other);
    public string PrettyPrint();
    public SqlObject GetObfuscatedObject();
    private string Serialize(bool prettyPrint);
    public static bool Equals(SqlObject first, SqlObject second);
    public static bool op_Equality(SqlObject first, SqlObject second);
    public static bool op_Inequality(SqlObject first, SqlObject second);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlObjectCreateScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<SqlObjectProperty> <Properties>k__BackingField;
    public ImmutableArray`1<SqlObjectProperty> Properties { get; }
    private SqlObjectCreateScalarExpression(ImmutableArray`1<SqlObjectProperty> properties);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SqlObjectProperty> get_Properties();
    public static SqlObjectCreateScalarExpression Create(SqlObjectProperty[] properties);
    public static SqlObjectCreateScalarExpression Create(ImmutableArray`1<SqlObjectProperty> properties);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlObjectProperty : SqlObject {
    [CompilerGeneratedAttribute]
private SqlPropertyName <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Value>k__BackingField;
    public SqlPropertyName Name { get; }
    public SqlScalarExpression Value { get; }
    private SqlObjectProperty(SqlPropertyName name, SqlScalarExpression value);
    [CompilerGeneratedAttribute]
public SqlPropertyName get_Name();
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Value();
    public static SqlObjectProperty Create(SqlPropertyName name, SqlScalarExpression expression);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlOffsetLimitClause : SqlObject {
    [CompilerGeneratedAttribute]
private SqlOffsetSpec <OffsetSpec>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlLimitSpec <LimitSpec>k__BackingField;
    public SqlOffsetSpec OffsetSpec { get; }
    public SqlLimitSpec LimitSpec { get; }
    private SqlOffsetLimitClause(SqlOffsetSpec offsetSpec, SqlLimitSpec limitSpec);
    [CompilerGeneratedAttribute]
public SqlOffsetSpec get_OffsetSpec();
    [CompilerGeneratedAttribute]
public SqlLimitSpec get_LimitSpec();
    public static SqlOffsetLimitClause Create(SqlOffsetSpec offsetSpec, SqlLimitSpec limitSpec);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlOffsetSpec : SqlObject {
    private static int PremadeOffsetIndex;
    private static ImmutableArray`1<SqlOffsetSpec> PremadeOffsetSpecs;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <OffsetExpression>k__BackingField;
    public SqlScalarExpression OffsetExpression { get; }
    private SqlOffsetSpec(SqlScalarExpression offsetExpression);
    private static SqlOffsetSpec();
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_OffsetExpression();
    public static SqlOffsetSpec Create(SqlNumberLiteral sqlNumberLiteral);
    public static SqlOffsetSpec Create(SqlParameter sqlParameter);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlOrderByClause : SqlObject {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<SqlOrderByItem> <OrderByItems>k__BackingField;
    public ImmutableArray`1<SqlOrderByItem> OrderByItems { get; }
    private SqlOrderByClause(ImmutableArray`1<SqlOrderByItem> orderByItems);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SqlOrderByItem> get_OrderByItems();
    public static SqlOrderByClause Create(SqlOrderByItem[] orderByItems);
    public static SqlOrderByClause Create(ImmutableArray`1<SqlOrderByItem> orderByItems);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlOrderByItem : SqlObject {
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDescending>k__BackingField;
    public SqlScalarExpression Expression { get; }
    public bool IsDescending { get; }
    private SqlOrderByItem(SqlScalarExpression expression, bool isDescending);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Expression();
    [CompilerGeneratedAttribute]
public bool get_IsDescending();
    public static SqlOrderByItem Create(SqlScalarExpression expression, bool isDescending);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlParameter : SqlObject {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    private SqlParameter(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public static SqlParameter Create(string name);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlParameterRefScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlParameter <Parameter>k__BackingField;
    public SqlParameter Parameter { get; }
    private SqlParameterRefScalarExpression(SqlParameter sqlParameter);
    [CompilerGeneratedAttribute]
public SqlParameter get_Parameter();
    public static SqlParameterRefScalarExpression Create(SqlParameter sqlParameter);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.SqlPathExpression : SqlObject {
    [CompilerGeneratedAttribute]
private SqlPathExpression <ParentPath>k__BackingField;
    public SqlPathExpression ParentPath { get; }
    protected SqlPathExpression(SqlPathExpression parentPath);
    [CompilerGeneratedAttribute]
public SqlPathExpression get_ParentPath();
    public abstract virtual void Accept(SqlPathExpressionVisitor visitor);
    public abstract virtual TResult Accept(SqlPathExpressionVisitor`1<TResult> visitor);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlProgram : SqlObject {
    [CompilerGeneratedAttribute]
private SqlQuery <Query>k__BackingField;
    public SqlQuery Query { get; }
    private SqlProgram(SqlQuery query);
    [CompilerGeneratedAttribute]
public SqlQuery get_Query();
    public static SqlProgram Create(SqlQuery query);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlPropertyName : SqlObject {
    private static Dictionary`2<string, SqlPropertyName> SystemProperties;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    private SqlPropertyName(string value);
    private static SqlPropertyName();
    [CompilerGeneratedAttribute]
public string get_Value();
    public static SqlPropertyName Create(string value);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlPropertyRefScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlIdentifier <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Member>k__BackingField;
    public SqlIdentifier Identifier { get; }
    public SqlScalarExpression Member { get; }
    private SqlPropertyRefScalarExpression(SqlScalarExpression member, SqlIdentifier identifier);
    [CompilerGeneratedAttribute]
public SqlIdentifier get_Identifier();
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Member();
    public static SqlPropertyRefScalarExpression Create(SqlScalarExpression member, SqlIdentifier identifier);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlQuery : SqlObject {
    [CompilerGeneratedAttribute]
private SqlSelectClause <SelectClause>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlFromClause <FromClause>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlWhereClause <WhereClause>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlGroupByClause <GroupByClause>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlOrderByClause <OrderByClause>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlOffsetLimitClause <OffsetLimitClause>k__BackingField;
    public SqlSelectClause SelectClause { get; }
    public SqlFromClause FromClause { get; }
    public SqlWhereClause WhereClause { get; }
    public SqlGroupByClause GroupByClause { get; }
    public SqlOrderByClause OrderByClause { get; }
    public SqlOffsetLimitClause OffsetLimitClause { get; }
    private SqlQuery(SqlSelectClause selectClause, SqlFromClause fromClause, SqlWhereClause whereClause, SqlGroupByClause groupByClause, SqlOrderByClause orderByClause, SqlOffsetLimitClause offsetLimitClause);
    [CompilerGeneratedAttribute]
public SqlSelectClause get_SelectClause();
    [CompilerGeneratedAttribute]
public SqlFromClause get_FromClause();
    [CompilerGeneratedAttribute]
public SqlWhereClause get_WhereClause();
    [CompilerGeneratedAttribute]
public SqlGroupByClause get_GroupByClause();
    [CompilerGeneratedAttribute]
public SqlOrderByClause get_OrderByClause();
    [CompilerGeneratedAttribute]
public SqlOffsetLimitClause get_OffsetLimitClause();
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public static SqlQuery Create(SqlSelectClause selectClause, SqlFromClause fromClause, SqlWhereClause whereClause, SqlGroupByClause groupByClause, SqlOrderByClause orderByClause, SqlOffsetLimitClause offsetLimitClause);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.SqlScalarExpression : SqlObject {
    public abstract virtual void Accept(SqlScalarExpressionVisitor visitor);
    public abstract virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public abstract virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlSelectClause : SqlObject {
    public static SqlSelectClause SelectStar;
    [CompilerGeneratedAttribute]
private SqlSelectSpec <SelectSpec>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlTopSpec <TopSpec>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasDistinct>k__BackingField;
    public SqlSelectSpec SelectSpec { get; }
    public SqlTopSpec TopSpec { get; }
    public bool HasDistinct { get; }
    private SqlSelectClause(SqlSelectSpec selectSpec, SqlTopSpec topSpec, bool hasDistinct);
    private static SqlSelectClause();
    [CompilerGeneratedAttribute]
public SqlSelectSpec get_SelectSpec();
    [CompilerGeneratedAttribute]
public SqlTopSpec get_TopSpec();
    [CompilerGeneratedAttribute]
public bool get_HasDistinct();
    public static SqlSelectClause Create(SqlSelectSpec selectSpec, SqlTopSpec topSpec, bool hasDistinct);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlSelectItem : SqlObject {
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlIdentifier <Alias>k__BackingField;
    public SqlScalarExpression Expression { get; }
    public SqlIdentifier Alias { get; }
    private SqlSelectItem(SqlScalarExpression expression, SqlIdentifier alias);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Expression();
    [CompilerGeneratedAttribute]
public SqlIdentifier get_Alias();
    public static SqlSelectItem Create(SqlScalarExpression expression, SqlIdentifier alias);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlSelectListSpec : SqlSelectSpec {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<SqlSelectItem> <Items>k__BackingField;
    public ImmutableArray`1<SqlSelectItem> Items { get; }
    private SqlSelectListSpec(ImmutableArray`1<SqlSelectItem> items);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<SqlSelectItem> get_Items();
    public static SqlSelectListSpec Create(SqlSelectItem[] items);
    public static SqlSelectListSpec Create(ImmutableArray`1<SqlSelectItem> items);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlSelectSpecVisitor visitor);
    public virtual TResult Accept(SqlSelectSpecVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlSelectSpecVisitor`2<T, TResult> visitor, T input);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.SqlSelectSpec : SqlObject {
    public abstract virtual void Accept(SqlSelectSpecVisitor visitor);
    public abstract virtual TResult Accept(SqlSelectSpecVisitor`1<TResult> visitor);
    public abstract virtual TResult Accept(SqlSelectSpecVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlSelectStarSpec : SqlSelectSpec {
    public static SqlSelectStarSpec Singleton;
    private static SqlSelectStarSpec();
    public static SqlSelectStarSpec Create();
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlSelectSpecVisitor visitor);
    public virtual TResult Accept(SqlSelectSpecVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlSelectSpecVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlSelectValueSpec : SqlSelectSpec {
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Expression>k__BackingField;
    public SqlScalarExpression Expression { get; }
    private SqlSelectValueSpec(SqlScalarExpression expression);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Expression();
    public static SqlSelectValueSpec Create(SqlScalarExpression expression);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlSelectSpecVisitor visitor);
    public virtual TResult Accept(SqlSelectSpecVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlSelectSpecVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlStringLiteral : SqlLiteral {
    public static SqlStringLiteral Empty;
    private static Dictionary`2<string, SqlStringLiteral> FrequentlyUsedStrings;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    private SqlStringLiteral(string value);
    private static SqlStringLiteral();
    [CompilerGeneratedAttribute]
public string get_Value();
    public static SqlStringLiteral Create(string value);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlLiteralVisitor visitor);
    public virtual TResult Accept(SqlLiteralVisitor`1<TResult> visitor);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlStringPathExpression : SqlPathExpression {
    [CompilerGeneratedAttribute]
private SqlStringLiteral <Value>k__BackingField;
    public SqlStringLiteral Value { get; }
    private SqlStringPathExpression(SqlPathExpression parentPath, SqlStringLiteral value);
    [CompilerGeneratedAttribute]
public SqlStringLiteral get_Value();
    public static SqlStringPathExpression Create(SqlPathExpression parentPath, SqlStringLiteral value);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlPathExpressionVisitor visitor);
    public virtual TResult Accept(SqlPathExpressionVisitor`1<TResult> visitor);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlSubqueryCollection : SqlCollection {
    [CompilerGeneratedAttribute]
private SqlQuery <Query>k__BackingField;
    public SqlQuery Query { get; }
    private SqlSubqueryCollection(SqlQuery query);
    [CompilerGeneratedAttribute]
public SqlQuery get_Query();
    public static SqlSubqueryCollection Create(SqlQuery query);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlCollectionVisitor visitor);
    public virtual TResult Accept(SqlCollectionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlCollectionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlSubqueryScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlQuery <Query>k__BackingField;
    public SqlQuery Query { get; }
    private SqlSubqueryScalarExpression(SqlQuery query);
    [CompilerGeneratedAttribute]
public SqlQuery get_Query();
    public static SqlSubqueryScalarExpression Create(SqlQuery query);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlTopSpec : SqlObject {
    private static int PremadeTopIndex;
    private static ImmutableArray`1<SqlTopSpec> PremadeTopSpecs;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <TopExpresion>k__BackingField;
    public SqlScalarExpression TopExpresion { get; }
    private SqlTopSpec(SqlScalarExpression topExpression);
    private static SqlTopSpec();
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_TopExpresion();
    public static SqlTopSpec Create(SqlNumberLiteral sqlNumberLiteral);
    public static SqlTopSpec Create(SqlParameter sqlParameter);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlUnaryScalarExpression : SqlScalarExpression {
    [CompilerGeneratedAttribute]
private SqlUnaryScalarOperatorKind <OperatorKind>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlScalarExpression <Expression>k__BackingField;
    public SqlUnaryScalarOperatorKind OperatorKind { get; }
    public SqlScalarExpression Expression { get; }
    private SqlUnaryScalarExpression(SqlUnaryScalarOperatorKind operatorKind, SqlScalarExpression expression);
    [CompilerGeneratedAttribute]
public SqlUnaryScalarOperatorKind get_OperatorKind();
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_Expression();
    public static SqlUnaryScalarExpression Create(SqlUnaryScalarOperatorKind operatorKind, SqlScalarExpression expression);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlScalarExpressionVisitor visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlScalarExpressionVisitor`2<T, TResult> visitor, T input);
}
internal enum Microsoft.Azure.Cosmos.SqlObjects.SqlUnaryScalarOperatorKind : Enum {
    public int value__;
    public static SqlUnaryScalarOperatorKind BitwiseNot;
    public static SqlUnaryScalarOperatorKind Not;
    public static SqlUnaryScalarOperatorKind Minus;
    public static SqlUnaryScalarOperatorKind Plus;
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlUndefinedLiteral : SqlLiteral {
    private static SqlUndefinedLiteral Singleton;
    private static SqlUndefinedLiteral();
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
    public virtual void Accept(SqlLiteralVisitor visitor);
    public virtual TResult Accept(SqlLiteralVisitor`1<TResult> visitor);
    public static SqlUndefinedLiteral Create();
}
internal class Microsoft.Azure.Cosmos.SqlObjects.SqlWhereClause : SqlObject {
    [CompilerGeneratedAttribute]
private SqlScalarExpression <FilterExpression>k__BackingField;
    public SqlScalarExpression FilterExpression { get; }
    private SqlWhereClause(SqlScalarExpression filterExpression);
    [CompilerGeneratedAttribute]
public SqlScalarExpression get_FilterExpression();
    public static SqlWhereClause Create(SqlScalarExpression filterExpression);
    public virtual void Accept(SqlObjectVisitor visitor);
    public virtual TResult Accept(SqlObjectVisitor`1<TResult> visitor);
    public virtual TResult Accept(SqlObjectVisitor`2<T, TResult> visitor, T input);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlCollectionExpressionVisitor : object {
    public abstract virtual void Visit(SqlAliasedCollectionExpression collectionExpression);
    public abstract virtual void Visit(SqlArrayIteratorCollectionExpression collectionExpression);
    public abstract virtual void Visit(SqlJoinCollectionExpression collectionExpression);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlCollectionExpressionVisitor`1 : object {
    public abstract virtual TResult Visit(SqlAliasedCollectionExpression collectionExpression);
    public abstract virtual TResult Visit(SqlArrayIteratorCollectionExpression collectionExpression);
    public abstract virtual TResult Visit(SqlJoinCollectionExpression collectionExpression);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlCollectionExpressionVisitor`2 : object {
    public abstract virtual TResult Visit(SqlAliasedCollectionExpression collectionExpression, TArg input);
    public abstract virtual TResult Visit(SqlArrayIteratorCollectionExpression collectionExpression, TArg input);
    public abstract virtual TResult Visit(SqlJoinCollectionExpression collectionExpression, TArg input);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlCollectionVisitor : object {
    public abstract virtual void Visit(SqlInputPathCollection collection);
    public abstract virtual void Visit(SqlSubqueryCollection collection);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlCollectionVisitor`1 : object {
    public abstract virtual TResult Visit(SqlInputPathCollection collection);
    public abstract virtual TResult Visit(SqlSubqueryCollection collection);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlCollectionVisitor`2 : object {
    public abstract virtual TOuput Visit(SqlInputPathCollection collection, TArg input);
    public abstract virtual TOuput Visit(SqlSubqueryCollection collection, TArg input);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlLiteralVisitor : object {
    public abstract virtual void Visit(SqlBooleanLiteral literal);
    public abstract virtual void Visit(SqlNullLiteral literal);
    public abstract virtual void Visit(SqlNumberLiteral literal);
    public abstract virtual void Visit(SqlStringLiteral literal);
    public abstract virtual void Visit(SqlUndefinedLiteral literal);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlLiteralVisitor`1 : object {
    public abstract virtual TResult Visit(SqlBooleanLiteral literal);
    public abstract virtual TResult Visit(SqlNullLiteral literal);
    public abstract virtual TResult Visit(SqlNumberLiteral literal);
    public abstract virtual TResult Visit(SqlStringLiteral literal);
    public abstract virtual TResult Visit(SqlUndefinedLiteral literal);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlObjectEqualityVisitor : SqlObjectVisitor`2<SqlObject, bool> {
    public static SqlObjectEqualityVisitor Singleton;
    private static SqlObjectEqualityVisitor();
    public virtual bool Visit(SqlAliasedCollectionExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlAllScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlArrayCreateScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlArrayIteratorCollectionExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlArrayScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlBetweenScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlBinaryScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlBooleanLiteral first, SqlObject secondAsObject);
    public virtual bool Visit(SqlCoalesceScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlConditionalScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlExistsScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlFirstScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlFromClause first, SqlObject secondAsObject);
    public virtual bool Visit(SqlFunctionCallScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlGroupByClause first, SqlObject secondAsObject);
    public virtual bool Visit(SqlIdentifier first, SqlObject secondAsObject);
    public virtual bool Visit(SqlIdentifierPathExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlInputPathCollection first, SqlObject secondAsObject);
    public virtual bool Visit(SqlInScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlJoinCollectionExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlLastScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlLikeScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlLimitSpec first, SqlObject secondAsObject);
    public virtual bool Visit(SqlLiteralScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlMemberIndexerScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlNullLiteral first, SqlObject secondAsObject);
    public virtual bool Visit(SqlNumberLiteral first, SqlObject secondAsObject);
    public virtual bool Visit(SqlNumberPathExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlObjectCreateScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlObjectProperty first, SqlObject secondAsObject);
    public virtual bool Visit(SqlOffsetLimitClause first, SqlObject secondAsObject);
    public virtual bool Visit(SqlOffsetSpec first, SqlObject secondAsObject);
    public virtual bool Visit(SqlOrderByClause first, SqlObject secondAsObject);
    public virtual bool Visit(SqlOrderByItem first, SqlObject secondAsObject);
    public virtual bool Visit(SqlParameter first, SqlObject secondAsObject);
    public virtual bool Visit(SqlParameterRefScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlProgram first, SqlObject secondAsObject);
    public virtual bool Visit(SqlPropertyName first, SqlObject secondAsObject);
    public virtual bool Visit(SqlPropertyRefScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlQuery first, SqlObject secondAsObject);
    public virtual bool Visit(SqlSelectClause first, SqlObject secondAsObject);
    public virtual bool Visit(SqlSelectItem first, SqlObject secondAsObject);
    public virtual bool Visit(SqlSelectListSpec first, SqlObject secondAsObject);
    public virtual bool Visit(SqlSelectStarSpec first, SqlObject secondAsObject);
    public virtual bool Visit(SqlSelectValueSpec first, SqlObject secondAsObject);
    public virtual bool Visit(SqlStringLiteral first, SqlObject secondAsObject);
    public virtual bool Visit(SqlStringPathExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlSubqueryCollection first, SqlObject secondAsObject);
    public virtual bool Visit(SqlSubqueryScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlTopSpec first, SqlObject secondAsObject);
    public virtual bool Visit(SqlUnaryScalarExpression first, SqlObject secondAsObject);
    public virtual bool Visit(SqlUndefinedLiteral first, SqlObject secondAsObject);
    public virtual bool Visit(SqlWhereClause first, SqlObject secondAsObject);
    private static bool SequenceEquals(IReadOnlyList`1<SqlObject> firstList, IReadOnlyList`1<SqlObject> secondList);
    private static bool BothNull(SqlObject first, SqlObject second);
    private static bool DifferentNullality(SqlObject first, SqlObject second);
    private static bool Equals(SqlObject first, SqlObject second);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlObjectHasher : SqlObjectVisitor`1<int> {
    public static SqlObjectHasher Singleton;
    private static int SqlAliasedCollectionExpressionHashCode;
    private static int SqlAllScalarExpressionHashCode;
    private static int SqlArrayCreateScalarExpressionHashCode;
    private static int SqlArrayIteratorCollectionExpressionHashCode;
    private static int SqlArrayScalarExpressionHashCode;
    private static int SqlBetweenScalarExpressionHashCode;
    private static int SqlBetweenScalarExpressionNotHashCode;
    private static int SqlBinaryScalarExpressionHashCode;
    private static int SqlBooleanLiteralHashCode;
    private static int SqlBooleanLiteralTrueHashCode;
    private static int SqlBooleanLiteralFalseHashCode;
    private static int SqlCoalesceScalarExpressionHashCode;
    private static int SqlConditionalScalarExpressionHashCode;
    private static int SqlExistsScalarExpressionHashCode;
    private static int SqlFirstScalarExpressionHashCode;
    private static int SqlFromClauseHashCode;
    private static int SqlFunctionCallScalarExpressionHashCode;
    private static int SqlFunctionCallScalarExpressionUdfHashCode;
    private static int SqlGroupByClauseHashCode;
    private static int SqlIdentifierHashCode;
    private static int SqlIdentifierPathExpressionHashCode;
    private static int SqlInputPathCollectionHashCode;
    private static int SqlInScalarExpressionHashCode;
    private static int SqlInScalarExpressionNotHashCode;
    private static int SqlJoinCollectionExpressionHashCode;
    private static int SqlLastScalarExpressionHashCode;
    private static int SqlLikeScalarExpressionHashCode;
    private static int SqlLimitSpecHashCode;
    private static int SqlLiteralScalarExpressionHashCode;
    private static int SqlMemberIndexerScalarExpressionHashCode;
    private static int SqlNullLiteralHashCode;
    private static int SqlNumberLiteralHashCode;
    private static int SqlNumberPathExpressionHashCode;
    private static int SqlObjectCreateScalarExpressionHashCode;
    private static int SqlObjectPropertyHashCode;
    private static int SqlOffsetLimitClauseHashCode;
    private static int SqlOffsetSpecHashCode;
    private static int SqlOrderbyClauseHashCode;
    private static int SqlOrderbyItemHashCode;
    private static int SqlOrderbyItemAscendingHashCode;
    private static int SqlOrderbyItemDescendingHashCode;
    private static int SqlParameterHashCode;
    private static int SqlParameterRefScalarExpressionHashCode;
    private static int SqlProgramHashCode;
    private static int SqlPropertyNameHashCode;
    private static int SqlPropertyRefScalarExpressionHashCode;
    private static int SqlQueryHashCode;
    private static int SqlSelectClauseHashCode;
    private static int SqlSelectClauseDistinctHashCode;
    private static int SqlSelectItemHashCode;
    private static int SqlSelectListSpecHashCode;
    private static int SqlSelectStarSpecHashCode;
    private static int SqlSelectValueSpecHashCode;
    private static int SqlStringLiteralHashCode;
    private static int SqlStringPathExpressionHashCode;
    private static int SqlSubqueryCollectionHashCode;
    private static int SqlSubqueryScalarExpressionHashCode;
    private static int SqlTopSpecHashCode;
    private static int SqlUnaryScalarExpressionHashCode;
    private static int SqlUndefinedLiteralHashCode;
    private static int SqlWhereClauseHashCode;
    private bool isStrict;
    public SqlObjectHasher(bool isStrict);
    private static SqlObjectHasher();
    public virtual int Visit(SqlAliasedCollectionExpression sqlAliasedCollectionExpression);
    public virtual int Visit(SqlAllScalarExpression sqlAllScalarExpression);
    public virtual int Visit(SqlArrayCreateScalarExpression sqlArrayCreateScalarExpression);
    public virtual int Visit(SqlArrayIteratorCollectionExpression sqlArrayIteratorCollectionExpression);
    public virtual int Visit(SqlArrayScalarExpression sqlArrayScalarExpression);
    public virtual int Visit(SqlBetweenScalarExpression sqlBetweenScalarExpression);
    public virtual int Visit(SqlBinaryScalarExpression sqlBinaryScalarExpression);
    public virtual int Visit(SqlBooleanLiteral sqlBooleanLiteral);
    public virtual int Visit(SqlCoalesceScalarExpression sqlCoalesceScalarExpression);
    public virtual int Visit(SqlConditionalScalarExpression sqlConditionalScalarExpression);
    public virtual int Visit(SqlExistsScalarExpression sqlExistsScalarExpression);
    public virtual int Visit(SqlFirstScalarExpression sqlFirstScalarExpression);
    public virtual int Visit(SqlFromClause sqlFromClause);
    public virtual int Visit(SqlFunctionCallScalarExpression sqlFunctionCallScalarExpression);
    public virtual int Visit(SqlGroupByClause sqlGroupByClause);
    public virtual int Visit(SqlIdentifier sqlIdentifier);
    public virtual int Visit(SqlIdentifierPathExpression sqlIdentifierPathExpression);
    public virtual int Visit(SqlInputPathCollection sqlInputPathCollection);
    public virtual int Visit(SqlInScalarExpression sqlInScalarExpression);
    public virtual int Visit(SqlJoinCollectionExpression sqlJoinCollectionExpression);
    public virtual int Visit(SqlLastScalarExpression sqlLastScalarExpression);
    public virtual int Visit(SqlLimitSpec sqlObject);
    public virtual int Visit(SqlLikeScalarExpression sqlLikeScalarExpression);
    public virtual int Visit(SqlLiteralScalarExpression sqlLiteralScalarExpression);
    public virtual int Visit(SqlMemberIndexerScalarExpression sqlMemberIndexerScalarExpression);
    public virtual int Visit(SqlNullLiteral sqlNullLiteral);
    public virtual int Visit(SqlNumberLiteral sqlNumberLiteral);
    public virtual int Visit(SqlNumberPathExpression sqlNumberPathExpression);
    public virtual int Visit(SqlObjectCreateScalarExpression sqlObjectCreateScalarExpression);
    public virtual int Visit(SqlObjectProperty sqlObjectProperty);
    public virtual int Visit(SqlOffsetLimitClause sqlObject);
    public virtual int Visit(SqlOffsetSpec sqlObject);
    public virtual int Visit(SqlOrderByClause sqlOrderByClause);
    public virtual int Visit(SqlOrderByItem sqlOrderByItem);
    public virtual int Visit(SqlParameter sqlObject);
    public virtual int Visit(SqlParameterRefScalarExpression sqlObject);
    public virtual int Visit(SqlProgram sqlProgram);
    public virtual int Visit(SqlPropertyName sqlPropertyName);
    public virtual int Visit(SqlPropertyRefScalarExpression sqlPropertyRefScalarExpression);
    public virtual int Visit(SqlQuery sqlQuery);
    public virtual int Visit(SqlSelectClause sqlSelectClause);
    public virtual int Visit(SqlSelectItem sqlSelectItem);
    public virtual int Visit(SqlSelectListSpec sqlSelectListSpec);
    public virtual int Visit(SqlSelectStarSpec sqlSelectStarSpec);
    public virtual int Visit(SqlSelectValueSpec sqlSelectValueSpec);
    public virtual int Visit(SqlStringLiteral sqlStringLiteral);
    public virtual int Visit(SqlStringPathExpression sqlStringPathExpression);
    public virtual int Visit(SqlSubqueryCollection sqlSubqueryCollection);
    public virtual int Visit(SqlSubqueryScalarExpression sqlSubqueryScalarExpression);
    public virtual int Visit(SqlTopSpec sqlTopSpec);
    public virtual int Visit(SqlUnaryScalarExpression sqlUnaryScalarExpression);
    public virtual int Visit(SqlUndefinedLiteral sqlUndefinedLiteral);
    public virtual int Visit(SqlWhereClause sqlWhereClause);
    private static int SqlUnaryScalarOperatorKindGetHashCode(SqlUnaryScalarOperatorKind kind);
    private static int SqlBinaryScalarOperatorKindGetHashCode(SqlBinaryScalarOperatorKind kind);
    private static int CombineHashes(long lhs, long rhs);
    private static int Djb2(string value);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlObjectObfuscator : SqlObjectVisitor`1<SqlObject> {
    private static HashSet`1<string> ExemptedString;
    private Dictionary`2<string, string> obfuscatedStrings;
    private Dictionary`2<Number64, Number64> obfuscatedNumbers;
    private int numberSequenceNumber;
    private int stringSequenceNumber;
    private int identifierSequenceNumber;
    private int fieldNameSequenceNumber;
    private int paramaterSequenceNumber;
    private static SqlObjectObfuscator();
    public virtual SqlObject Visit(SqlAliasedCollectionExpression sqlAliasedCollectionExpression);
    public virtual SqlObject Visit(SqlAllScalarExpression sqlAllScalarExpression);
    public virtual SqlObject Visit(SqlArrayCreateScalarExpression sqlArrayCreateScalarExpression);
    public virtual SqlObject Visit(SqlArrayIteratorCollectionExpression sqlArrayIteratorCollectionExpression);
    public virtual SqlObject Visit(SqlArrayScalarExpression sqlArrayScalarExpression);
    public virtual SqlObject Visit(SqlBetweenScalarExpression sqlBetweenScalarExpression);
    public virtual SqlObject Visit(SqlBinaryScalarExpression sqlBinaryScalarExpression);
    public virtual SqlObject Visit(SqlBooleanLiteral sqlBooleanLiteral);
    public virtual SqlObject Visit(SqlCoalesceScalarExpression sqlCoalesceScalarExpression);
    public virtual SqlObject Visit(SqlConditionalScalarExpression sqlConditionalScalarExpression);
    public virtual SqlObject Visit(SqlExistsScalarExpression sqlExistsScalarExpression);
    public virtual SqlObject Visit(SqlFirstScalarExpression sqlFirstScalarExpression);
    public virtual SqlObject Visit(SqlFromClause sqlFromClause);
    public virtual SqlObject Visit(SqlFunctionCallScalarExpression sqlFunctionCallScalarExpression);
    public virtual SqlObject Visit(SqlGroupByClause sqlGroupByClause);
    public virtual SqlObject Visit(SqlIdentifier sqlIdentifier);
    public virtual SqlObject Visit(SqlIdentifierPathExpression sqlIdentifierPathExpression);
    public virtual SqlObject Visit(SqlInputPathCollection sqlInputPathCollection);
    public virtual SqlObject Visit(SqlInScalarExpression sqlInScalarExpression);
    public virtual SqlObject Visit(SqlJoinCollectionExpression sqlJoinCollectionExpression);
    public virtual SqlObject Visit(SqlLastScalarExpression sqlLastScalarExpression);
    public virtual SqlObject Visit(SqlLikeScalarExpression sqlLikeScalarExpression);
    public virtual SqlObject Visit(SqlLimitSpec sqlObject);
    public virtual SqlObject Visit(SqlLiteralScalarExpression sqlLiteralScalarExpression);
    public virtual SqlObject Visit(SqlMemberIndexerScalarExpression sqlMemberIndexerScalarExpression);
    public virtual SqlObject Visit(SqlNullLiteral sqlNullLiteral);
    public virtual SqlObject Visit(SqlNumberLiteral sqlNumberLiteral);
    public virtual SqlObject Visit(SqlNumberPathExpression sqlNumberPathExpression);
    public virtual SqlObject Visit(SqlObjectCreateScalarExpression sqlObjectCreateScalarExpression);
    public virtual SqlObject Visit(SqlObjectProperty sqlObjectProperty);
    public virtual SqlObject Visit(SqlOffsetLimitClause sqlObject);
    public virtual SqlObject Visit(SqlOffsetSpec sqlObject);
    public virtual SqlObject Visit(SqlOrderByClause sqlOrderByClause);
    public virtual SqlObject Visit(SqlOrderByItem sqlOrderByItem);
    public virtual SqlObject Visit(SqlParameter sqlParameter);
    public virtual SqlObject Visit(SqlParameterRefScalarExpression sqlObject);
    public virtual SqlObject Visit(SqlProgram sqlProgram);
    public virtual SqlObject Visit(SqlPropertyName sqlPropertyName);
    public virtual SqlObject Visit(SqlPropertyRefScalarExpression sqlPropertyRefScalarExpression);
    public virtual SqlObject Visit(SqlQuery sqlQuery);
    public virtual SqlObject Visit(SqlSelectClause sqlSelectClause);
    public virtual SqlObject Visit(SqlSelectItem sqlSelectItem);
    public virtual SqlObject Visit(SqlSelectListSpec sqlSelectListSpec);
    public virtual SqlObject Visit(SqlSelectStarSpec sqlSelectStarSpec);
    public virtual SqlObject Visit(SqlSelectValueSpec sqlSelectValueSpec);
    public virtual SqlObject Visit(SqlStringLiteral sqlStringLiteral);
    public virtual SqlObject Visit(SqlStringPathExpression sqlStringPathExpression);
    public virtual SqlObject Visit(SqlSubqueryCollection sqlSubqueryCollection);
    public virtual SqlObject Visit(SqlSubqueryScalarExpression sqlSubqueryScalarExpression);
    public virtual SqlObject Visit(SqlTopSpec sqlTopSpec);
    public virtual SqlObject Visit(SqlUnaryScalarExpression sqlUnaryScalarExpression);
    public virtual SqlObject Visit(SqlUndefinedLiteral sqlUndefinedLiteral);
    public virtual SqlObject Visit(SqlWhereClause sqlWhereClause);
    private Number64 GetObfuscatedNumber(Number64 value);
    private string GetObfuscatedString(string value, string prefix, Int32& sequence);
}
internal class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlObjectTextSerializer : SqlObjectVisitor {
    private static string Tab;
    private static Char[] CharactersThatNeedEscaping;
    private StringWriter writer;
    private bool prettyPrint;
    private int indentLevel;
    public SqlObjectTextSerializer(bool prettyPrint);
    private static SqlObjectTextSerializer();
    public virtual void Visit(SqlAliasedCollectionExpression sqlAliasedCollectionExpression);
    public virtual void Visit(SqlAllScalarExpression sqlAllScalarExpression);
    public virtual void Visit(SqlArrayCreateScalarExpression sqlArrayCreateScalarExpression);
    public virtual void Visit(SqlArrayIteratorCollectionExpression sqlArrayIteratorCollectionExpression);
    public virtual void Visit(SqlArrayScalarExpression sqlArrayScalarExpression);
    public virtual void Visit(SqlBetweenScalarExpression sqlBetweenScalarExpression);
    public virtual void Visit(SqlBinaryScalarExpression sqlBinaryScalarExpression);
    public virtual void Visit(SqlBooleanLiteral sqlBooleanLiteral);
    public virtual void Visit(SqlCoalesceScalarExpression sqlCoalesceScalarExpression);
    public virtual void Visit(SqlConditionalScalarExpression sqlConditionalScalarExpression);
    public virtual void Visit(SqlExistsScalarExpression sqlExistsScalarExpression);
    public virtual void Visit(SqlFirstScalarExpression sqlFirstScalarExpression);
    public virtual void Visit(SqlFromClause sqlFromClause);
    public virtual void Visit(SqlFunctionCallScalarExpression sqlFunctionCallScalarExpression);
    public virtual void Visit(SqlGroupByClause sqlGroupByClause);
    public virtual void Visit(SqlIdentifier sqlIdentifier);
    public virtual void Visit(SqlIdentifierPathExpression sqlIdentifierPathExpression);
    public virtual void Visit(SqlInputPathCollection sqlInputPathCollection);
    public virtual void Visit(SqlInScalarExpression sqlInScalarExpression);
    public virtual void Visit(SqlJoinCollectionExpression sqlJoinCollectionExpression);
    public virtual void Visit(SqlLastScalarExpression sqlLastScalarExpression);
    public virtual void Visit(SqlLimitSpec sqlObject);
    public virtual void Visit(SqlLikeScalarExpression sqlObject);
    public virtual void Visit(SqlLiteralScalarExpression sqlLiteralScalarExpression);
    public virtual void Visit(SqlMemberIndexerScalarExpression sqlMemberIndexerScalarExpression);
    public virtual void Visit(SqlNullLiteral sqlNullLiteral);
    public virtual void Visit(SqlNumberLiteral sqlNumberLiteral);
    public virtual void Visit(SqlNumberPathExpression sqlNumberPathExpression);
    public virtual void Visit(SqlObjectCreateScalarExpression sqlObjectCreateScalarExpression);
    public virtual void Visit(SqlObjectProperty sqlObjectProperty);
    public virtual void Visit(SqlOffsetLimitClause sqlObject);
    public virtual void Visit(SqlOffsetSpec sqlObject);
    public virtual void Visit(SqlOrderByClause sqlOrderByClause);
    public virtual void Visit(SqlOrderByItem sqlOrderByItem);
    public virtual void Visit(SqlParameter sqlParameter);
    public virtual void Visit(SqlParameterRefScalarExpression sqlParameterRefScalarExpression);
    public virtual void Visit(SqlProgram sqlProgram);
    public virtual void Visit(SqlPropertyName sqlPropertyName);
    public virtual void Visit(SqlPropertyRefScalarExpression sqlPropertyRefScalarExpression);
    public virtual void Visit(SqlQuery sqlQuery);
    public virtual void Visit(SqlSelectClause sqlSelectClause);
    public virtual void Visit(SqlSelectItem sqlSelectItem);
    public virtual void Visit(SqlSelectListSpec sqlSelectListSpec);
    public virtual void Visit(SqlSelectStarSpec sqlSelectStarSpec);
    public virtual void Visit(SqlSelectValueSpec sqlSelectValueSpec);
    public virtual void Visit(SqlStringLiteral sqlStringLiteral);
    public virtual void Visit(SqlStringPathExpression sqlStringPathExpression);
    public virtual void Visit(SqlSubqueryCollection sqlSubqueryCollection);
    public virtual void Visit(SqlSubqueryScalarExpression sqlSubqueryScalarExpression);
    public virtual void Visit(SqlTopSpec sqlTopSpec);
    public virtual void Visit(SqlUnaryScalarExpression sqlUnaryScalarExpression);
    public virtual void Visit(SqlUndefinedLiteral sqlUndefinedLiteral);
    public virtual void Visit(SqlWhereClause sqlWhereClause);
    public virtual string ToString();
    private void WriteStartContext(string startCharacter);
    private void WriteDelimiter(string delimiter);
    private void WriteEndContext(string endCharacter);
    private void WriteNewline();
    private void WriteTab();
    private static void WriteNumber64(StringBuilder stringBuilder, Number64 value);
    private static void WriteEscapedString(StringBuilder stringBuilder, ReadOnlySpan`1<char> unescapedString);
    private static Nullable`1<int> IndexOfCharacterThatNeedsEscaping(ReadOnlySpan`1<char> unescapedString);
    private static char GetHexDigit(int value);
    private static string SqlUnaryScalarOperatorKindToString(SqlUnaryScalarOperatorKind kind);
    private static string SqlBinaryScalarOperatorKindToString(SqlBinaryScalarOperatorKind kind);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlObjectVisitor : object {
    public abstract virtual void Visit(SqlAliasedCollectionExpression sqlObject);
    public abstract virtual void Visit(SqlAllScalarExpression sqlObject);
    public abstract virtual void Visit(SqlArrayCreateScalarExpression sqlObject);
    public abstract virtual void Visit(SqlArrayIteratorCollectionExpression sqlObject);
    public abstract virtual void Visit(SqlArrayScalarExpression sqlObject);
    public abstract virtual void Visit(SqlBetweenScalarExpression sqlObject);
    public abstract virtual void Visit(SqlBinaryScalarExpression sqlObject);
    public abstract virtual void Visit(SqlBooleanLiteral sqlObject);
    public abstract virtual void Visit(SqlCoalesceScalarExpression sqlObject);
    public abstract virtual void Visit(SqlConditionalScalarExpression sqlObject);
    public abstract virtual void Visit(SqlExistsScalarExpression sqlObject);
    public abstract virtual void Visit(SqlFirstScalarExpression sqlObject);
    public abstract virtual void Visit(SqlFromClause sqlObject);
    public abstract virtual void Visit(SqlFunctionCallScalarExpression sqlObject);
    public abstract virtual void Visit(SqlGroupByClause sqlObject);
    public abstract virtual void Visit(SqlIdentifier sqlObject);
    public abstract virtual void Visit(SqlIdentifierPathExpression sqlObject);
    public abstract virtual void Visit(SqlInputPathCollection sqlObject);
    public abstract virtual void Visit(SqlInScalarExpression sqlObject);
    public abstract virtual void Visit(SqlJoinCollectionExpression sqlObject);
    public abstract virtual void Visit(SqlLastScalarExpression sqlObject);
    public abstract virtual void Visit(SqlLikeScalarExpression sqlObject);
    public abstract virtual void Visit(SqlLimitSpec sqlObject);
    public abstract virtual void Visit(SqlLiteralScalarExpression sqlObject);
    public abstract virtual void Visit(SqlMemberIndexerScalarExpression sqlObject);
    public abstract virtual void Visit(SqlNullLiteral sqlObject);
    public abstract virtual void Visit(SqlNumberLiteral sqlObject);
    public abstract virtual void Visit(SqlNumberPathExpression sqlObject);
    public abstract virtual void Visit(SqlObjectCreateScalarExpression sqlObject);
    public abstract virtual void Visit(SqlObjectProperty sqlObject);
    public abstract virtual void Visit(SqlOffsetLimitClause sqlObject);
    public abstract virtual void Visit(SqlOffsetSpec sqlObject);
    public abstract virtual void Visit(SqlOrderByClause sqlObject);
    public abstract virtual void Visit(SqlOrderByItem sqlObject);
    public abstract virtual void Visit(SqlParameter sqlObject);
    public abstract virtual void Visit(SqlParameterRefScalarExpression sqlObject);
    public abstract virtual void Visit(SqlProgram sqlObject);
    public abstract virtual void Visit(SqlPropertyName sqlObject);
    public abstract virtual void Visit(SqlPropertyRefScalarExpression sqlObject);
    public abstract virtual void Visit(SqlQuery sqlObject);
    public abstract virtual void Visit(SqlSelectClause sqlObject);
    public abstract virtual void Visit(SqlSelectItem sqlObject);
    public abstract virtual void Visit(SqlSelectListSpec sqlObject);
    public abstract virtual void Visit(SqlSelectStarSpec sqlObject);
    public abstract virtual void Visit(SqlSelectValueSpec sqlObject);
    public abstract virtual void Visit(SqlStringLiteral sqlObject);
    public abstract virtual void Visit(SqlStringPathExpression sqlObject);
    public abstract virtual void Visit(SqlSubqueryCollection sqlObject);
    public abstract virtual void Visit(SqlSubqueryScalarExpression sqlObject);
    public abstract virtual void Visit(SqlTopSpec sqlObject);
    public abstract virtual void Visit(SqlUnaryScalarExpression sqlObject);
    public abstract virtual void Visit(SqlUndefinedLiteral sqlObject);
    public abstract virtual void Visit(SqlWhereClause sqlObject);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlObjectVisitor`1 : object {
    public abstract virtual TResult Visit(SqlAliasedCollectionExpression sqlObject);
    public abstract virtual TResult Visit(SqlAllScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlArrayCreateScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlArrayIteratorCollectionExpression sqlObject);
    public abstract virtual TResult Visit(SqlArrayScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlBetweenScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlBinaryScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlBooleanLiteral sqlObject);
    public abstract virtual TResult Visit(SqlCoalesceScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlConditionalScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlExistsScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlFirstScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlFromClause sqlObject);
    public abstract virtual TResult Visit(SqlFunctionCallScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlGroupByClause sqlObject);
    public abstract virtual TResult Visit(SqlIdentifier sqlObject);
    public abstract virtual TResult Visit(SqlIdentifierPathExpression sqlObject);
    public abstract virtual TResult Visit(SqlInputPathCollection sqlObject);
    public abstract virtual TResult Visit(SqlJoinCollectionExpression sqlObject);
    public abstract virtual TResult Visit(SqlLastScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlLikeScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlInScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlLimitSpec sqlObject);
    public abstract virtual TResult Visit(SqlLiteralScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlMemberIndexerScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlNullLiteral sqlObject);
    public abstract virtual TResult Visit(SqlNumberLiteral sqlObject);
    public abstract virtual TResult Visit(SqlNumberPathExpression sqlObject);
    public abstract virtual TResult Visit(SqlObjectCreateScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlObjectProperty sqlObject);
    public abstract virtual TResult Visit(SqlOffsetLimitClause sqlObject);
    public abstract virtual TResult Visit(SqlOffsetSpec sqlObject);
    public abstract virtual TResult Visit(SqlOrderByClause sqlObject);
    public abstract virtual TResult Visit(SqlOrderByItem sqlObject);
    public abstract virtual TResult Visit(SqlParameter sqlObject);
    public abstract virtual TResult Visit(SqlParameterRefScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlProgram sqlObject);
    public abstract virtual TResult Visit(SqlPropertyName sqlObject);
    public abstract virtual TResult Visit(SqlPropertyRefScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlQuery sqlObject);
    public abstract virtual TResult Visit(SqlSelectClause sqlObject);
    public abstract virtual TResult Visit(SqlSelectItem sqlObject);
    public abstract virtual TResult Visit(SqlSelectListSpec sqlObject);
    public abstract virtual TResult Visit(SqlSelectStarSpec sqlObject);
    public abstract virtual TResult Visit(SqlSelectValueSpec sqlObject);
    public abstract virtual TResult Visit(SqlStringLiteral sqlObject);
    public abstract virtual TResult Visit(SqlStringPathExpression sqlObject);
    public abstract virtual TResult Visit(SqlSubqueryCollection sqlObject);
    public abstract virtual TResult Visit(SqlSubqueryScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlTopSpec sqlObject);
    public abstract virtual TResult Visit(SqlUnaryScalarExpression sqlObject);
    public abstract virtual TResult Visit(SqlUndefinedLiteral sqlObject);
    public abstract virtual TResult Visit(SqlWhereClause sqlObject);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlObjectVisitor`2 : object {
    public abstract virtual TOutput Visit(SqlAliasedCollectionExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlAllScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlArrayCreateScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlArrayIteratorCollectionExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlArrayScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlBetweenScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlBinaryScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlBooleanLiteral sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlCoalesceScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlConditionalScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlExistsScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlFirstScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlFromClause sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlFunctionCallScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlGroupByClause sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlIdentifier sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlIdentifierPathExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlInputPathCollection sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlInScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlJoinCollectionExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlLastScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlLikeScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlLimitSpec sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlLiteralScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlMemberIndexerScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlNullLiteral sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlNumberLiteral sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlNumberPathExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlObjectCreateScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlObjectProperty sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlOffsetLimitClause sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlOffsetSpec sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlOrderByClause sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlOrderByItem sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlParameter sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlParameterRefScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlProgram sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlPropertyName sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlPropertyRefScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlQuery sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlSelectClause sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlSelectItem sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlSelectListSpec sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlSelectStarSpec sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlSelectValueSpec sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlStringLiteral sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlStringPathExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlSubqueryCollection sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlSubqueryScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlTopSpec sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlUnaryScalarExpression sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlUndefinedLiteral sqlObject, TArg input);
    public abstract virtual TOutput Visit(SqlWhereClause sqlObject, TArg input);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlPathExpressionVisitor : object {
    public abstract virtual void Visit(SqlIdentifierPathExpression sqlObject);
    public abstract virtual void Visit(SqlNumberPathExpression sqlObject);
    public abstract virtual void Visit(SqlStringPathExpression sqlObject);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlPathExpressionVisitor`1 : object {
    public abstract virtual TResult Visit(SqlIdentifierPathExpression sqlObject);
    public abstract virtual TResult Visit(SqlNumberPathExpression sqlObject);
    public abstract virtual TResult Visit(SqlStringPathExpression sqlObject);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlScalarExpressionVisitor : object {
    public abstract virtual void Visit(SqlAllScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlArrayCreateScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlArrayScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlBetweenScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlBinaryScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlCoalesceScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlConditionalScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlExistsScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlFirstScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlFunctionCallScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlInScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlLastScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlLikeScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlLiteralScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlMemberIndexerScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlObjectCreateScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlParameterRefScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlPropertyRefScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlSubqueryScalarExpression scalarExpression);
    public abstract virtual void Visit(SqlUnaryScalarExpression scalarExpression);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlScalarExpressionVisitor`1 : object {
    public abstract virtual TResult Visit(SqlAllScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlArrayCreateScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlArrayScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlBetweenScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlBinaryScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlCoalesceScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlConditionalScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlExistsScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlFirstScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlFunctionCallScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlInScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlLastScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlLikeScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlLiteralScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlMemberIndexerScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlObjectCreateScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlParameterRefScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlPropertyRefScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlSubqueryScalarExpression scalarExpression);
    public abstract virtual TResult Visit(SqlUnaryScalarExpression scalarExpression);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlScalarExpressionVisitor`2 : object {
    public abstract virtual TOutput Visit(SqlAllScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlArrayCreateScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlArrayScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlBetweenScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlBinaryScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlCoalesceScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlConditionalScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlExistsScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlFirstScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlFunctionCallScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlInScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlLastScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlLikeScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlLiteralScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlMemberIndexerScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlObjectCreateScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlParameterRefScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlPropertyRefScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlSubqueryScalarExpression scalarExpression, TArg input);
    public abstract virtual TOutput Visit(SqlUnaryScalarExpression scalarExpression, TArg input);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlSelectSpecVisitor : object {
    public abstract virtual void Visit(SqlSelectListSpec selectSpec);
    public abstract virtual void Visit(SqlSelectStarSpec selectSpec);
    public abstract virtual void Visit(SqlSelectValueSpec selectSpec);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlSelectSpecVisitor`1 : object {
    public abstract virtual TResult Visit(SqlSelectListSpec selectSpec);
    public abstract virtual TResult Visit(SqlSelectStarSpec selectSpec);
    public abstract virtual TResult Visit(SqlSelectValueSpec selectSpec);
}
internal abstract class Microsoft.Azure.Cosmos.SqlObjects.Visitors.SqlSelectSpecVisitor`2 : object {
    public abstract virtual TOutput Visit(SqlSelectListSpec selectSpec, TArg input);
    public abstract virtual TOutput Visit(SqlSelectStarSpec selectSpec, TArg input);
    public abstract virtual TOutput Visit(SqlSelectValueSpec selectSpec, TArg input);
}
internal class Microsoft.Azure.Cosmos.StandByFeedIteratorRequestOptions : RequestOptions {
    internal static string IfNoneMatchAllHeaderValue;
    internal static DateTime DateTimeStartFromBeginning;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartTime>k__BackingField;
    public Nullable`1<int> MaxItemCount { get; public set; }
    public Nullable`1<DateTime> StartTime { get; public set; }
    private static StandByFeedIteratorRequestOptions();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxItemCount();
    [CompilerGeneratedAttribute]
public void set_MaxItemCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(Nullable`1<DateTime> value);
    internal virtual void PopulateRequestOptions(RequestMessage request);
    internal static void FillPartitionKeyRangeId(RequestMessage request, string partitionKeyRangeId);
    internal static void FillPartitionKey(RequestMessage request, PartitionKey partitionKey);
    internal static void FillContinuationToken(RequestMessage request, string continuationToken);
    internal static void FillMaxItemCount(RequestMessage request, Nullable`1<int> maxItemCount);
}
internal class Microsoft.Azure.Cosmos.StoredProcedureResponse`1 : object {
    private DocumentServiceResponse response;
    private TValue responseBody;
    private JsonSerializerSettings serializerSettings;
    public string ActivityId { get; }
    public string SessionToken { get; }
    public string ScriptLog { get; }
    public HttpStatusCode StatusCode { get; }
    public string MaxResourceQuota { get; }
    public string CurrentResourceQuotaUsage { get; }
    public double RequestCharge { get; }
    public NameValueCollection ResponseHeaders { get; }
    internal INameValueCollection Headers { get; }
    public TValue Response { get; }
    internal IClientSideRequestStatistics RequestStatistics { get; }
    internal StoredProcedureResponse`1(DocumentServiceResponse response, JsonSerializerSettings serializerSettings);
    public sealed virtual string get_ActivityId();
    public sealed virtual string get_SessionToken();
    public sealed virtual string get_ScriptLog();
    public sealed virtual HttpStatusCode get_StatusCode();
    public sealed virtual string get_MaxResourceQuota();
    public sealed virtual string get_CurrentResourceQuotaUsage();
    public sealed virtual double get_RequestCharge();
    public sealed virtual NameValueCollection get_ResponseHeaders();
    internal INameValueCollection get_Headers();
    public sealed virtual TValue get_Response();
    internal IClientSideRequestStatistics get_RequestStatistics();
    public static TValue op_Implicit(StoredProcedureResponse`1<TValue> source);
}
internal class Microsoft.Azure.Cosmos.StoreRequestHeaders : CosmosMessageHeadersInternal {
    private RequestNameValueCollection requestNameValueCollection;
    public string Continuation { get; public set; }
    public string SessionToken { get; public set; }
    public string PartitionKeyRangeId { get; public set; }
    public string PartitionKey { get; public set; }
    public string XDate { get; public set; }
    public string OptimisticDirectExecute { get; public set; }
    public string ConsistencyLevel { get; public set; }
    public string IfNoneMatch { get; public set; }
    public string SDKSupportedCapabilities { get; public set; }
    public string ContentSerializationFormat { get; public set; }
    public string SupportedSerializationFormats { get; public set; }
    public string ReadFeedKeyType { get; public set; }
    public string StartEpk { get; public set; }
    public string EndEpk { get; public set; }
    public string PageSize { get; public set; }
    public INameValueCollection INameValueCollection { get; }
    public virtual string get_Continuation();
    public virtual void set_Continuation(string value);
    public virtual string get_SessionToken();
    public virtual void set_SessionToken(string value);
    public virtual string get_PartitionKeyRangeId();
    public virtual void set_PartitionKeyRangeId(string value);
    public virtual string get_PartitionKey();
    public virtual void set_PartitionKey(string value);
    public virtual string get_XDate();
    public virtual void set_XDate(string value);
    public virtual string get_OptimisticDirectExecute();
    public virtual void set_OptimisticDirectExecute(string value);
    public virtual string get_ConsistencyLevel();
    public virtual void set_ConsistencyLevel(string value);
    public virtual string get_IfNoneMatch();
    public virtual void set_IfNoneMatch(string value);
    public virtual string get_SDKSupportedCapabilities();
    public virtual void set_SDKSupportedCapabilities(string value);
    public virtual string get_ContentSerializationFormat();
    public virtual void set_ContentSerializationFormat(string value);
    public virtual string get_SupportedSerializationFormats();
    public virtual void set_SupportedSerializationFormats(string value);
    public virtual string get_ReadFeedKeyType();
    public virtual void set_ReadFeedKeyType(string value);
    public virtual string get_StartEpk();
    public virtual void set_StartEpk(string value);
    public virtual string get_EndEpk();
    public virtual void set_EndEpk(string value);
    public virtual string get_PageSize();
    public virtual void set_PageSize(string value);
    public virtual INameValueCollection get_INameValueCollection();
    public virtual void Add(string headerName, string value);
    public virtual void Add(string headerName, IEnumerable`1<string> values);
    public virtual void Set(string headerName, string value);
    public virtual string Get(string headerName);
    public virtual bool TryGetValue(string headerName, String& value);
    public virtual void Remove(string headerName);
    public virtual String[] AllKeys();
    public virtual IEnumerator`1<string> GetEnumerator();
    public virtual int Count();
    public virtual String[] GetValues(string key);
}
internal class Microsoft.Azure.Cosmos.StoreResponseHeaders : CosmosMessageHeadersInternal {
    private StoreResponseNameValueCollection storeResponseNameValueCollection;
    public string RequestCharge { get; public set; }
    public string ActivityId { get; public set; }
    public string ETag { get; public set; }
    public string SubStatus { get; public set; }
    public string QueryMetrics { get; public set; }
    public string BackendRequestDurationMilliseconds { get; public set; }
    public string Continuation { get; public set; }
    public string SessionToken { get; public set; }
    public string PartitionKeyRangeId { get; public set; }
    public INameValueCollection INameValueCollection { get; }
    public StoreResponseHeaders(StoreResponseNameValueCollection storeResponseNameValueCollection);
    public virtual string get_RequestCharge();
    public virtual void set_RequestCharge(string value);
    public virtual string get_ActivityId();
    public virtual void set_ActivityId(string value);
    public virtual string get_ETag();
    public virtual void set_ETag(string value);
    public virtual string get_SubStatus();
    public virtual void set_SubStatus(string value);
    public virtual string get_QueryMetrics();
    public virtual void set_QueryMetrics(string value);
    public virtual string get_BackendRequestDurationMilliseconds();
    public virtual void set_BackendRequestDurationMilliseconds(string value);
    public virtual string get_Continuation();
    public virtual void set_Continuation(string value);
    public virtual string get_SessionToken();
    public virtual void set_SessionToken(string value);
    public virtual string get_PartitionKeyRangeId();
    public virtual void set_PartitionKeyRangeId(string value);
    public virtual INameValueCollection get_INameValueCollection();
    public virtual void Add(string headerName, string value);
    public virtual void Add(string headerName, IEnumerable`1<string> values);
    public virtual void Set(string headerName, string value);
    public virtual string Get(string headerName);
    public virtual bool TryGetValue(string headerName, String& value);
    public virtual void Remove(string headerName);
    public virtual String[] AllKeys();
    public virtual IEnumerator`1<string> GetEnumerator();
    public virtual int Count();
    public virtual String[] GetValues(string key);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.StreamExtensions : object {
    [ExtensionAttribute]
public static string ReadAsString(Stream stream);
}
internal class Microsoft.Azure.Cosmos.StringHMACSHA256Hash : object {
    private string base64EncodedKey;
    private Byte[] keyBytes;
    private SecureString secureString;
    private ConcurrentQueue`1<HMACSHA256> hmacPool;
    public SecureString Key { get; }
    public StringHMACSHA256Hash(string base64EncodedKey);
    public sealed virtual Byte[] ComputeHash(ArraySegment`1<byte> bytesToHash);
    public sealed virtual SecureString get_Key();
    public sealed virtual void Dispose();
}
internal static class Microsoft.Azure.Cosmos.TaskHelper : object {
    public static Task InlineIfPossibleAsync(Func`1<Task> function, IRetryPolicy retryPolicy, CancellationToken cancellationToken);
    public static Task`1<TResult> InlineIfPossible(Func`1<Task`1<TResult>> function, IRetryPolicy retryPolicy, CancellationToken cancellationToken);
    public static Task`1<TResult> RunInlineIfNeededAsync(Func`1<Task`1<TResult>> task);
}
internal class Microsoft.Azure.Cosmos.Telemetry.ClientTelemetry : object {
    private static TimeSpan observingWindow;
    private ClientTelemetryProperties clientTelemetryInfo;
    private ClientTelemetryProcessor processor;
    private DiagnosticsHandlerHelper diagnosticsHelper;
    private string endpointUrl;
    private NetworkDataRecorder networkDataRecorder;
    private CancellationTokenSource cancellationTokenSource;
    private GlobalEndpointManager globalEndpointManager;
    private Task telemetryTask;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<OperationInfo, ValueTuple`2<LongConcurrentHistogram, LongConcurrentHistogram>> operationInfoMap;
    private ConcurrentDictionary`2<CacheRefreshInfo, LongConcurrentHistogram> cacheRefreshInfoMap;
    internal ClientTelemetry(string clientId, CosmosHttpClient httpClient, string userAgent, ConnectionMode connectionMode, AuthorizationTokenProvider authorizationTokenProvider, DiagnosticsHandlerHelper diagnosticsHelper, IReadOnlyList`1<string> preferredRegions, GlobalEndpointManager globalEndpointManager, string endpointUrl);
    private static ClientTelemetry();
    public static ClientTelemetry CreateAndStartBackgroundTelemetry(string clientId, CosmosHttpClient httpClient, string userAgent, ConnectionMode connectionMode, AuthorizationTokenProvider authorizationTokenProvider, DiagnosticsHandlerHelper diagnosticsHelper, IReadOnlyList`1<string> preferredRegions, GlobalEndpointManager globalEndpointManager, string endpointUrl);
    private void StartObserverTask();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Telemetry.ClientTelemetry/<EnrichAndSendAsync>d__15")]
private Task EnrichAndSendAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Telemetry.ClientTelemetry/<RunProcessorTaskAsync>d__16")]
internal static Task RunProcessorTaskAsync(string telemetryDate, Task processingTask, TimeSpan timeout);
    internal void PushCacheDatapoint(string cacheName, TelemetryInformation data);
    internal void PushOperationDatapoint(TelemetryInformation data);
    public void PushNetworkDataPoint(List`1<StoreResponseStatistics> storeResponseStatistics, string databaseId, string containerId);
    public sealed virtual void Dispose();
}
internal static class Microsoft.Azure.Cosmos.Telemetry.ClientTelemetryHelper : object {
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Telemetry.ClientTelemetryHelper/<SetAccountNameAsync>d__0")]
internal static Task`1<AccountProperties> SetAccountNameAsync(GlobalEndpointManager globalEndpointManager);
    private static List`1<SystemInfo> RecordSystemUsage(SystemUsageHistory systemUsageHistory, bool isDirectConnectionMode);
    internal static List`1<SystemInfo> RecordSystemUtilization(DiagnosticsHandlerHelper helper, bool isDirectMode);
    internal static string GetContactedRegions(IReadOnlyCollection`1<ValueTuple`2<string, Uri>> regionList);
}
internal static class Microsoft.Azure.Cosmos.Telemetry.ClientTelemetryOptions : object {
    internal static int HistogramPrecisionFactor;
    internal static double TicksToMsFactor;
    internal static int KbToMbFactor;
    internal static int OneKbToBytes;
    internal static long RequestLatencyMax;
    internal static long RequestLatencyMin;
    internal static int RequestLatencyPrecision;
    internal static string RequestLatencyName;
    internal static string RequestLatencyUnit;
    internal static long RequestChargeMax;
    internal static long RequestChargeMin;
    internal static int RequestChargePrecision;
    internal static string RequestChargeName;
    internal static string RequestChargeUnit;
    internal static long CpuMax;
    internal static long CpuMin;
    internal static int CpuPrecision;
    internal static string CpuName;
    internal static string CpuUnit;
    internal static long MemoryMax;
    internal static long MemoryMin;
    internal static int MemoryPrecision;
    internal static string MemoryName;
    internal static string MemoryUnit;
    internal static long AvailableThreadsMax;
    internal static long AvailableThreadsMin;
    internal static int AvailableThreadsPrecision;
    internal static string AvailableThreadsName;
    internal static string AvailableThreadsUnit;
    internal static long ThreadWaitIntervalInMsMax;
    internal static long ThreadWaitIntervalInMsMin;
    internal static int ThreadWaitIntervalInMsPrecision;
    internal static string ThreadWaitIntervalInMsName;
    internal static string ThreadWaitIntervalInMsUnit;
    internal static long NumberOfTcpConnectionMax;
    internal static long NumberOfTcpConnectionMin;
    internal static int NumberOfTcpConnectionPrecision;
    internal static string NumberOfTcpConnectionName;
    internal static string NumberOfTcpConnectionUnit;
    internal static string IsThreadStarvingName;
    internal static string IsThreadStarvingUnit;
    internal static double Percentile50;
    internal static double Percentile90;
    internal static double Percentile95;
    internal static double Percentile99;
    internal static double Percentile999;
    internal static string DateFormat;
    internal static string EnvPropsClientTelemetryEnvironmentName;
    internal static ResourceType AllowedResourceTypes;
    internal static TimeSpan NetworkLatencyThreshold;
    internal static int NetworkRequestsSampleSizeThreshold;
    internal static JsonSerializerSettings JsonSerializerSettings;
    internal static List`1<int> ExcludedStatusCodes;
    internal static int NetworkTelemetrySampleSize;
    internal static TimeSpan DefaultIntervalForTelemetryJob;
    internal static int PayloadSizeThreshold;
    internal static TimeSpan ClientTelemetryProcessorTimeOut;
    private static string environmentName;
    private static ClientTelemetryOptions();
    internal static string GetHostInformation(Compute vmInformation);
    internal static string GetEnvironmentName();
}
internal static class Microsoft.Azure.Cosmos.Telemetry.ClientTelemetryPayloadWriter : object {
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Telemetry.ClientTelemetryPayloadWriter/<SerializedPayloadChunksAsync>d__0")]
public static Task SerializedPayloadChunksAsync(ClientTelemetryProperties properties, ConcurrentDictionary`2<OperationInfo, ValueTuple`2<LongConcurrentHistogram, LongConcurrentHistogram>> operationInfoSnapshot, ConcurrentDictionary`2<CacheRefreshInfo, LongConcurrentHistogram> cacheRefreshInfoSnapshot, IReadOnlyList`1<RequestInfo> sampledRequestInfo, Func`2<string, Task> callback);
    private static JsonWriter GetWriterWithSectionStartTag(StringBuilder stringBuilder, ClientTelemetryProperties properties, string sectionName);
}
internal class Microsoft.Azure.Cosmos.Telemetry.ClientTelemetryProcessor : object {
    private AuthorizationTokenProvider tokenProvider;
    private CosmosHttpClient httpClient;
    internal ClientTelemetryProcessor(CosmosHttpClient httpClient, AuthorizationTokenProvider tokenProvider);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Telemetry.ClientTelemetryProcessor/<ProcessAndSendAsync>d__3")]
internal Task ProcessAndSendAsync(ClientTelemetryProperties clientTelemetryInfo, ConcurrentDictionary`2<OperationInfo, ValueTuple`2<LongConcurrentHistogram, LongConcurrentHistogram>> operationInfoSnapshot, ConcurrentDictionary`2<CacheRefreshInfo, LongConcurrentHistogram> cacheRefreshInfoSnapshot, IReadOnlyList`1<RequestInfo> requestInfoSnapshot, string endpointUrl, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Telemetry.ClientTelemetryProcessor/<SendAsync>d__4")]
private Task SendAsync(string globalDatabaseAccountName, string jsonPayload, string endpointUrl, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Telemetry.Collector.TelemetryCollector : object {
    private ClientTelemetry clientTelemetry;
    private ConnectionPolicy connectionPolicy;
    internal TelemetryCollector(ClientTelemetry clientTelemetry, ConnectionPolicy connectionPolicy);
    public sealed virtual void CollectCacheInfo(string cacheName, Func`1<TelemetryInformation> functionFordata);
    public sealed virtual void CollectOperationAndNetworkInfo(Func`1<TelemetryInformation> functionFordata);
    private static void GetDatabaseAndCollectionName(string path, String& databaseName, String& collectionName);
}
internal class Microsoft.Azure.Cosmos.Telemetry.Collector.TelemetryCollectorNoOp : object {
    public sealed virtual void CollectCacheInfo(string cacheName, Func`1<TelemetryInformation> functionFordata);
    public sealed virtual void CollectOperationAndNetworkInfo(Func`1<TelemetryInformation> functionFordata);
}
internal class Microsoft.Azure.Cosmos.Telemetry.Collector.TelemetryInformation : object {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private SubStatusCodes <SubStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationType <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceType <ResourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ResponseSizeInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsistencyLevel>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ValueTuple`2<string, Uri>> <RegionsContactedList>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RequestLatency>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RequestCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollectionLink>k__BackingField;
    [CompilerGeneratedAttribute]
private ITrace <Trace>k__BackingField;
    internal HttpStatusCode StatusCode { get; internal set; }
    internal SubStatusCodes SubStatusCode { get; internal set; }
    internal OperationType OperationType { get; internal set; }
    internal ResourceType ResourceType { get; internal set; }
    internal string ContainerId { get; internal set; }
    internal string DatabaseId { get; internal set; }
    internal long ResponseSizeInBytes { get; internal set; }
    internal string ConsistencyLevel { get; internal set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal IReadOnlyCollection`1<ValueTuple`2<string, Uri>> RegionsContactedList { get; internal set; }
    internal Nullable`1<TimeSpan> RequestLatency { get; internal set; }
    internal double RequestCharge { get; internal set; }
    internal string CollectionLink { get; internal set; }
    internal ITrace Trace { get; internal set; }
    [CompilerGeneratedAttribute]
internal HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
internal void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
internal SubStatusCodes get_SubStatusCode();
    [CompilerGeneratedAttribute]
internal void set_SubStatusCode(SubStatusCodes value);
    [CompilerGeneratedAttribute]
internal OperationType get_OperationType();
    [CompilerGeneratedAttribute]
internal void set_OperationType(OperationType value);
    [CompilerGeneratedAttribute]
internal ResourceType get_ResourceType();
    [CompilerGeneratedAttribute]
internal void set_ResourceType(ResourceType value);
    [CompilerGeneratedAttribute]
internal string get_ContainerId();
    [CompilerGeneratedAttribute]
internal void set_ContainerId(string value);
    [CompilerGeneratedAttribute]
internal string get_DatabaseId();
    [CompilerGeneratedAttribute]
internal void set_DatabaseId(string value);
    [CompilerGeneratedAttribute]
internal long get_ResponseSizeInBytes();
    [CompilerGeneratedAttribute]
internal void set_ResponseSizeInBytes(long value);
    [CompilerGeneratedAttribute]
internal string get_ConsistencyLevel();
    [CompilerGeneratedAttribute]
internal void set_ConsistencyLevel(string value);
    [CompilerGeneratedAttribute]
internal IReadOnlyCollection`1<ValueTuple`2<string, Uri>> get_RegionsContactedList();
    [CompilerGeneratedAttribute]
internal void set_RegionsContactedList(IReadOnlyCollection`1<ValueTuple`2<string, Uri>> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<TimeSpan> get_RequestLatency();
    [CompilerGeneratedAttribute]
internal void set_RequestLatency(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
internal double get_RequestCharge();
    [CompilerGeneratedAttribute]
internal void set_RequestCharge(double value);
    [CompilerGeneratedAttribute]
internal string get_CollectionLink();
    [CompilerGeneratedAttribute]
internal void set_CollectionLink(string value);
    [CompilerGeneratedAttribute]
internal ITrace get_Trace();
    [CompilerGeneratedAttribute]
internal void set_Trace(ITrace value);
}
[EventSourceAttribute]
internal class Microsoft.Azure.Cosmos.Telemetry.CosmosDbEventSource : AzureEventSource {
    internal static string EventSourceName;
    [CompilerGeneratedAttribute]
private static CosmosDbEventSource <Singleton>k__BackingField;
    private static CosmosDbEventSource Singleton { get; }
    private static CosmosDbEventSource();
    [CompilerGeneratedAttribute]
private static CosmosDbEventSource get_Singleton();
    [NonEventAttribute]
public static bool IsEnabled(EventLevel level);
    [NonEventAttribute]
public static void RecordDiagnosticsForRequests(CosmosThresholdOptions config, OperationType operationType, OpenTelemetryAttributes response);
    [NonEventAttribute]
public static void RecordDiagnosticsForExceptions(CosmosDiagnostics diagnostics);
    [EventAttribute("1")]
private void Exception(string message);
    [EventAttribute("2")]
private void ThresholdViolation(string message);
    [EventAttribute("3")]
private void FailedRequest(string message);
}
internal class Microsoft.Azure.Cosmos.Telemetry.DataLatencyComparer : object {
    public static DataLatencyComparer Instance;
    private static DataLatencyComparer();
    public sealed virtual int Compare(RequestInfo a, RequestInfo b);
}
internal class Microsoft.Azure.Cosmos.Telemetry.DataSampleCountComparer : object {
    public static DataSampleCountComparer Instance;
    private static DataSampleCountComparer();
    public sealed virtual int Compare(RequestInfo a, RequestInfo b);
}
internal class Microsoft.Azure.Cosmos.Telemetry.DataSampler : object {
    public static List`1<RequestInfo> OrderAndSample(List`1<RequestInfo> requestInfoList, IComparer`1<RequestInfo> comparer);
}
internal static class Microsoft.Azure.Cosmos.Telemetry.Diagnostics.DiagnosticsFilterHelper : object {
    private static CosmosThresholdOptions defaultThresholdOptions;
    private static DiagnosticsFilterHelper();
    public static bool IsLatencyThresholdCrossed(CosmosThresholdOptions config, OperationType operationType, OpenTelemetryAttributes response);
    public static bool IsPayloadSizeThresholdCrossed(CosmosThresholdOptions config, OpenTelemetryAttributes response);
    public static bool IsSuccessfulResponse(HttpStatusCode statusCode, int subStatusCode);
    internal static TimeSpan DefaultLatencyThreshold(OperationType operationType, CosmosThresholdOptions config);
    internal static bool IsPointOperation(OperationType operationType);
}
internal interface Microsoft.Azure.Cosmos.Telemetry.ITelemetryCollector {
    public abstract virtual void CollectCacheInfo(string cacheName, Func`1<TelemetryInformation> functionFordata);
    public abstract virtual void CollectOperationAndNetworkInfo(Func`1<TelemetryInformation> functionFordata);
}
internal class Microsoft.Azure.Cosmos.Telemetry.Models.AzureVMMetadata : object {
    [CompilerGeneratedAttribute]
private Compute <Compute>k__BackingField;
    [JsonPropertyAttribute]
internal Compute Compute { get; }
    public AzureVMMetadata(Compute compute);
    [CompilerGeneratedAttribute]
internal Compute get_Compute();
}
internal class Microsoft.Azure.Cosmos.Telemetry.Models.CacheRefreshInfo : OperationInfo {
    [CompilerGeneratedAttribute]
private string <CacheRefreshSource>k__BackingField;
    [JsonPropertyAttribute]
internal string CacheRefreshSource { get; }
    internal CacheRefreshInfo(string metricsName, string unitName);
    [JsonConstructorAttribute]
internal CacheRefreshInfo(string regionsContacted, Nullable`1<long> responseSizeInBytes, string consistency, string databaseName, string containerName, Nullable`1<OperationType> operation, Nullable`1<ResourceType> resource, Nullable`1<int> statusCode, int subStatusCode, string cacheRefreshSource);
    [CompilerGeneratedAttribute]
internal string get_CacheRefreshSource();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class Microsoft.Azure.Cosmos.Telemetry.Models.ClientTelemetryProperties : object {
    [CompilerGeneratedAttribute]
private string <DateTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GlobalDatabaseAccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostEnvInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AcceleratedNetworking>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <PreferredRegions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AggregationIntervalInSec>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SystemInfo> <SystemInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CacheRefreshInfo> <CacheRefreshInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<OperationInfo> <OperationInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RequestInfo> <RequestInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDirectConnectionMode>k__BackingField;
    [JsonPropertyAttribute]
internal string DateTimeUtc { get; internal set; }
    [JsonPropertyAttribute]
internal string ClientId { get; }
    [JsonPropertyAttribute]
internal string MachineId { get; internal set; }
    [JsonPropertyAttribute]
internal string ProcessId { get; }
    [JsonPropertyAttribute]
internal string UserAgent { get; }
    [JsonPropertyAttribute]
internal string ConnectionMode { get; }
    [JsonPropertyAttribute]
internal string GlobalDatabaseAccountName { get; internal set; }
    [JsonPropertyAttribute]
internal string ApplicationRegion { get; internal set; }
    [JsonPropertyAttribute]
internal string HostEnvInfo { get; internal set; }
    [JsonPropertyAttribute]
internal Nullable`1<bool> AcceleratedNetworking { get; internal set; }
    [JsonPropertyAttribute]
internal IReadOnlyList`1<string> PreferredRegions { get; internal set; }
    [JsonPropertyAttribute]
internal int AggregationIntervalInSec { get; internal set; }
    [JsonPropertyAttribute]
internal List`1<SystemInfo> SystemInfo { get; internal set; }
    [JsonPropertyAttribute]
internal List`1<CacheRefreshInfo> CacheRefreshInfo { get; internal set; }
    [JsonPropertyAttribute]
internal List`1<OperationInfo> OperationInfo { get; internal set; }
    [JsonPropertyAttribute]
internal List`1<RequestInfo> RequestInfo { get; internal set; }
    [JsonIgnoreAttribute]
internal bool IsDirectConnectionMode { get; }
    internal ClientTelemetryProperties(string clientId, string processId, string userAgent, ConnectionMode connectionMode, IReadOnlyList`1<string> preferredRegions, int aggregationIntervalInSec);
    [JsonConstructorAttribute]
public ClientTelemetryProperties(string dateTimeUtc, string clientId, string processId, string userAgent, string connectionMode, string globalDatabaseAccountName, string applicationRegion, string hostEnvInfo, Nullable`1<bool> acceleratedNetworking, IReadOnlyList`1<string> preferredRegions, List`1<SystemInfo> systemInfo, List`1<CacheRefreshInfo> cacheRefreshInfo, List`1<OperationInfo> operationInfo, List`1<RequestInfo> requestInfo, string machineId);
    [CompilerGeneratedAttribute]
internal string get_DateTimeUtc();
    [CompilerGeneratedAttribute]
internal void set_DateTimeUtc(string value);
    [CompilerGeneratedAttribute]
internal string get_ClientId();
    [CompilerGeneratedAttribute]
internal string get_MachineId();
    [CompilerGeneratedAttribute]
internal void set_MachineId(string value);
    [CompilerGeneratedAttribute]
internal string get_ProcessId();
    [CompilerGeneratedAttribute]
internal string get_UserAgent();
    [CompilerGeneratedAttribute]
internal string get_ConnectionMode();
    [CompilerGeneratedAttribute]
internal string get_GlobalDatabaseAccountName();
    [CompilerGeneratedAttribute]
internal void set_GlobalDatabaseAccountName(string value);
    [CompilerGeneratedAttribute]
internal string get_ApplicationRegion();
    [CompilerGeneratedAttribute]
internal void set_ApplicationRegion(string value);
    [CompilerGeneratedAttribute]
internal string get_HostEnvInfo();
    [CompilerGeneratedAttribute]
internal void set_HostEnvInfo(string value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_AcceleratedNetworking();
    [CompilerGeneratedAttribute]
internal void set_AcceleratedNetworking(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<string> get_PreferredRegions();
    [CompilerGeneratedAttribute]
internal void set_PreferredRegions(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
internal int get_AggregationIntervalInSec();
    [CompilerGeneratedAttribute]
internal void set_AggregationIntervalInSec(int value);
    [CompilerGeneratedAttribute]
internal List`1<SystemInfo> get_SystemInfo();
    [CompilerGeneratedAttribute]
internal void set_SystemInfo(List`1<SystemInfo> value);
    [CompilerGeneratedAttribute]
internal List`1<CacheRefreshInfo> get_CacheRefreshInfo();
    [CompilerGeneratedAttribute]
internal void set_CacheRefreshInfo(List`1<CacheRefreshInfo> value);
    [CompilerGeneratedAttribute]
internal List`1<OperationInfo> get_OperationInfo();
    [CompilerGeneratedAttribute]
internal void set_OperationInfo(List`1<OperationInfo> value);
    [CompilerGeneratedAttribute]
internal List`1<RequestInfo> get_RequestInfo();
    [CompilerGeneratedAttribute]
internal void set_RequestInfo(List`1<RequestInfo> value);
    [CompilerGeneratedAttribute]
internal bool get_IsDirectConnectionMode();
    public void Write(JsonWriter writer);
}
internal class Microsoft.Azure.Cosmos.Telemetry.Models.Compute : object {
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SKU>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzEnvironment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OSType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VMSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VMId>k__BackingField;
    [JsonPropertyAttribute]
internal string Location { get; }
    [JsonPropertyAttribute]
internal string SKU { get; }
    [JsonPropertyAttribute]
internal string AzEnvironment { get; }
    [JsonPropertyAttribute]
internal string OSType { get; }
    [JsonPropertyAttribute]
internal string VMSize { get; }
    [JsonPropertyAttribute]
internal string VMId { get; }
    [JsonConstructorAttribute]
public Compute(string vMId, string location, string sKU, string azEnvironment, string oSType, string vMSize);
    [CompilerGeneratedAttribute]
internal string get_Location();
    [CompilerGeneratedAttribute]
internal string get_SKU();
    [CompilerGeneratedAttribute]
internal string get_AzEnvironment();
    [CompilerGeneratedAttribute]
internal string get_OSType();
    [CompilerGeneratedAttribute]
internal string get_VMSize();
    [CompilerGeneratedAttribute]
internal string get_VMId();
}
internal class Microsoft.Azure.Cosmos.Telemetry.Models.MetricInfo : object {
    [CompilerGeneratedAttribute]
private string <MetricsName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnitName>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Mean>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Min>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Max>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<double, double> <Percentiles>k__BackingField;
    [JsonPropertyAttribute]
internal string MetricsName { get; }
    [JsonPropertyAttribute]
internal string UnitName { get; }
    [JsonPropertyAttribute]
internal double Mean { get; internal set; }
    [JsonPropertyAttribute]
internal long Count { get; internal set; }
    [JsonPropertyAttribute]
internal double Min { get; internal set; }
    [JsonPropertyAttribute]
internal double Max { get; internal set; }
    [JsonPropertyAttribute]
internal IReadOnlyDictionary`2<double, double> Percentiles { get; internal set; }
    internal MetricInfo(string metricsName, string unitName);
    public MetricInfo(string metricsName, string unitName, double mean, long count, long min, long max, IReadOnlyDictionary`2<double, double> percentiles);
    [CompilerGeneratedAttribute]
internal string get_MetricsName();
    [CompilerGeneratedAttribute]
internal string get_UnitName();
    [CompilerGeneratedAttribute]
internal double get_Mean();
    [CompilerGeneratedAttribute]
internal void set_Mean(double value);
    [CompilerGeneratedAttribute]
internal long get_Count();
    [CompilerGeneratedAttribute]
internal void set_Count(long value);
    [CompilerGeneratedAttribute]
internal double get_Min();
    [CompilerGeneratedAttribute]
internal void set_Min(double value);
    [CompilerGeneratedAttribute]
internal double get_Max();
    [CompilerGeneratedAttribute]
internal void set_Max(double value);
    [CompilerGeneratedAttribute]
internal IReadOnlyDictionary`2<double, double> get_Percentiles();
    [CompilerGeneratedAttribute]
internal void set_Percentiles(IReadOnlyDictionary`2<double, double> value);
    internal MetricInfo SetAggregators(LongConcurrentHistogram histogram, double adjustment);
}
internal class Microsoft.Azure.Cosmos.Telemetry.Models.OperationInfo : object {
    [CompilerGeneratedAttribute]
private string <RegionsContacted>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <GreaterThan1Kb>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Consistency>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private MetricInfo <MetricInfo>k__BackingField;
    [JsonPropertyAttribute]
internal string RegionsContacted { get; }
    [JsonPropertyAttribute]
internal Nullable`1<bool> GreaterThan1Kb { get; internal set; }
    [JsonPropertyAttribute]
internal string DatabaseName { get; }
    [JsonPropertyAttribute]
internal string ContainerName { get; }
    [JsonPropertyAttribute]
internal string Operation { get; }
    [JsonPropertyAttribute]
internal string Resource { get; }
    [JsonPropertyAttribute]
internal string Consistency { get; }
    [JsonPropertyAttribute]
public Nullable`1<int> StatusCode { get; }
    [JsonPropertyAttribute]
public int SubStatusCode { get; }
    [JsonPropertyAttribute]
internal MetricInfo MetricInfo { get; internal set; }
    internal OperationInfo(string metricsName, string unitName);
    internal OperationInfo(string regionsContacted, Nullable`1<long> responseSizeInBytes, string consistency, string databaseName, string containerName, Nullable`1<OperationType> operation, Nullable`1<ResourceType> resource, Nullable`1<int> statusCode, int subStatusCode);
    public OperationInfo(string regionsContacted, Nullable`1<bool> greaterThan1Kb, string databaseName, string containerName, string operation, string resource, string consistency, Nullable`1<int> statusCode, int subStatusCode, MetricInfo metricInfo);
    [CompilerGeneratedAttribute]
internal string get_RegionsContacted();
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_GreaterThan1Kb();
    [CompilerGeneratedAttribute]
internal void set_GreaterThan1Kb(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal string get_DatabaseName();
    [CompilerGeneratedAttribute]
internal string get_ContainerName();
    [CompilerGeneratedAttribute]
internal string get_Operation();
    [CompilerGeneratedAttribute]
internal string get_Resource();
    [CompilerGeneratedAttribute]
internal string get_Consistency();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StatusCode();
    [CompilerGeneratedAttribute]
public int get_SubStatusCode();
    [CompilerGeneratedAttribute]
internal MetricInfo get_MetricInfo();
    [CompilerGeneratedAttribute]
internal void set_MetricInfo(MetricInfo value);
    public OperationInfo Copy();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    internal void SetAggregators(LongConcurrentHistogram histogram, double adjustment);
}
internal class Microsoft.Azure.Cosmos.Telemetry.Models.RequestInfo : object {
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MetricInfo> <Metrics>k__BackingField;
    [JsonPropertyAttribute("uri")]
public string Uri { get; public set; }
    [JsonPropertyAttribute("databaseName")]
public string DatabaseName { get; public set; }
    [JsonPropertyAttribute("containerName")]
public string ContainerName { get; public set; }
    [JsonPropertyAttribute("operation")]
public string Operation { get; public set; }
    [JsonPropertyAttribute("resource")]
public string Resource { get; public set; }
    [JsonPropertyAttribute("statusCode")]
public Nullable`1<int> StatusCode { get; public set; }
    [JsonPropertyAttribute("subStatusCode")]
public int SubStatusCode { get; public set; }
    [JsonPropertyAttribute("metricInfo")]
public List`1<MetricInfo> Metrics { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
public void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerName();
    [CompilerGeneratedAttribute]
public void set_ContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_SubStatusCode();
    [CompilerGeneratedAttribute]
public void set_SubStatusCode(int value);
    [CompilerGeneratedAttribute]
public List`1<MetricInfo> get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(List`1<MetricInfo> value);
    public virtual int GetHashCode();
    public int GetHashCodeForSampler();
    public virtual bool Equals(object obj);
    public double GetP99Latency();
    public double GetSampleCount();
    public virtual string ToString();
}
internal class Microsoft.Azure.Cosmos.Telemetry.Models.SystemInfo : object {
    [CompilerGeneratedAttribute]
private MetricInfo <MetricInfo>k__BackingField;
    [JsonPropertyAttribute]
internal string Resource { get; }
    [JsonPropertyAttribute]
internal MetricInfo MetricInfo { get; internal set; }
    internal SystemInfo(string metricsName, string unitName);
    internal SystemInfo(string metricsName, string unitName, int count);
    public SystemInfo(MetricInfo metricInfo);
    internal string get_Resource();
    [CompilerGeneratedAttribute]
internal MetricInfo get_MetricInfo();
    [CompilerGeneratedAttribute]
internal void set_MetricInfo(MetricInfo value);
    internal void SetAggregators(LongConcurrentHistogram histogram, double adjustment);
}
internal class Microsoft.Azure.Cosmos.Telemetry.NetworkDataRecorder : object {
    private ConcurrentDictionary`2<RequestInfo, LongConcurrentHistogram> RequestInfoHighLatencyBucket;
    private ConcurrentDictionary`2<RequestInfo, LongConcurrentHistogram> RequestInfoErrorBucket;
    public void Record(List`1<StoreResponseStatistics> storeResponseStatistics, string databaseId, string containerId);
    internal void GetErroredRequests(List`1<RequestInfo> requestInfoList);
    internal void GetHighLatencyRequests(List`1<RequestInfo> requestInfoList);
    internal RequestInfo CreateRequestInfo(StoreResponseStatistics storeResponseStatistic, string databaseId, string containerId);
    public List`1<RequestInfo> GetRequests();
    internal static bool IsHighLatency(double latency);
    internal static bool IsUserOrServerError(int statusCode);
    internal static bool IsStatusCodeNotExcluded(int statusCode, int subStatusCode);
}
internal class Microsoft.Azure.Cosmos.Telemetry.OpenTelemetryAttributeKeys : object {
    public static string DiagnosticNamespace;
    public static string ResourceProviderNamespace;
    public static string OperationPrefix;
    public static string NetworkLevelPrefix;
    public static string DbSystemName;
    public static string DbName;
    public static string DbOperation;
    public static string ServerAddress;
    public static string ClientId;
    public static string MachineId;
    public static string UserAgent;
    public static string ConnectionMode;
    public static string OperationType;
    public static string ContainerName;
    public static string RequestContentLength;
    public static string ResponseContentLength;
    public static string StatusCode;
    public static string SubStatusCode;
    public static string RequestCharge;
    public static string Region;
    public static string ItemCount;
    public static string ActivityId;
    public static string CorrelatedActivityId;
    public static string BatchSize;
    public static string ExceptionType;
    public static string ExceptionMessage;
    public static string ExceptionStacktrace;
}
internal class Microsoft.Azure.Cosmos.Telemetry.OpenTelemetryAttributes : object {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <RequestCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestContentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseContentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CorrelatedActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationType <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <BatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OperationType> <BatchOperationName>k__BackingField;
    internal HttpStatusCode StatusCode { get; internal set; }
    internal Nullable`1<double> RequestCharge { get; internal set; }
    internal string RequestContentLength { get; internal set; }
    internal string ResponseContentLength { get; internal set; }
    internal string ItemCount { get; internal set; }
    internal CosmosDiagnostics Diagnostics { get; internal set; }
    internal int SubStatusCode { get; internal set; }
    internal string ActivityId { get; internal set; }
    internal string CorrelatedActivityId { get; internal set; }
    internal OperationType OperationType { get; internal set; }
    internal Nullable`1<int> BatchSize { get; internal set; }
    internal Nullable`1<OperationType> BatchOperationName { get; internal set; }
    internal OpenTelemetryAttributes(RequestMessage requestMessage);
    [CompilerGeneratedAttribute]
internal HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
internal void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
internal Nullable`1<double> get_RequestCharge();
    [CompilerGeneratedAttribute]
internal void set_RequestCharge(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
internal string get_RequestContentLength();
    [CompilerGeneratedAttribute]
internal void set_RequestContentLength(string value);
    [CompilerGeneratedAttribute]
internal string get_ResponseContentLength();
    [CompilerGeneratedAttribute]
internal void set_ResponseContentLength(string value);
    [CompilerGeneratedAttribute]
internal string get_ItemCount();
    [CompilerGeneratedAttribute]
internal void set_ItemCount(string value);
    [CompilerGeneratedAttribute]
internal CosmosDiagnostics get_Diagnostics();
    [CompilerGeneratedAttribute]
internal void set_Diagnostics(CosmosDiagnostics value);
    [CompilerGeneratedAttribute]
internal int get_SubStatusCode();
    [CompilerGeneratedAttribute]
internal void set_SubStatusCode(int value);
    [CompilerGeneratedAttribute]
internal string get_ActivityId();
    [CompilerGeneratedAttribute]
internal void set_ActivityId(string value);
    [CompilerGeneratedAttribute]
internal string get_CorrelatedActivityId();
    [CompilerGeneratedAttribute]
internal void set_CorrelatedActivityId(string value);
    [CompilerGeneratedAttribute]
internal OperationType get_OperationType();
    [CompilerGeneratedAttribute]
internal void set_OperationType(OperationType value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_BatchSize();
    [CompilerGeneratedAttribute]
internal void set_BatchSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<OperationType> get_BatchOperationName();
    [CompilerGeneratedAttribute]
internal void set_BatchOperationName(Nullable`1<OperationType> value);
}
internal class Microsoft.Azure.Cosmos.Telemetry.OpenTelemetryCoreRecorder : ValueType {
    private static string CosmosDb;
    private DiagnosticScope scope;
    private CosmosThresholdOptions config;
    private Activity activity;
    private OperationType operationType;
    private string connectionModeCache;
    private OpenTelemetryAttributes response;
    internal static IDictionary`2<Type, Action`2<Exception, DiagnosticScope>> OTelCompatibleExceptions;
    public bool IsEnabled { get; }
    private OpenTelemetryCoreRecorder(DiagnosticScope scope);
    private OpenTelemetryCoreRecorder(string operationName);
    private OpenTelemetryCoreRecorder(DiagnosticScope scope, string operationName, string containerName, string databaseName, OperationType operationType, CosmosClientContext clientContext, CosmosThresholdOptions config);
    private static OpenTelemetryCoreRecorder();
    public static OpenTelemetryCoreRecorder CreateNetworkLevelParentActivity(DiagnosticScope networkScope);
    public static OpenTelemetryCoreRecorder CreateParentActivity(string operationName);
    public static OpenTelemetryCoreRecorder CreateOperationLevelParentActivity(DiagnosticScope operationScope, string operationName, string containerName, string databaseName, OperationType operationType, CosmosClientContext clientContext, CosmosThresholdOptions config);
    public bool get_IsEnabled();
    public void Record(string key, string value);
    public void Record(string operationName, string containerName, string databaseName, CosmosClientContext clientContext);
    public void Record(OpenTelemetryAttributes response);
    public void MarkFailed(Exception exception);
    internal static bool IsExceptionRegistered(Exception exception, DiagnosticScope scope);
    public sealed virtual void Dispose();
}
internal static class Microsoft.Azure.Cosmos.Telemetry.OpenTelemetryRecorderFactory : object {
    private static Lazy`1<DiagnosticScopeFactory> LazyScopeFactory;
    private static OpenTelemetryRecorderFactory();
    public static OpenTelemetryCoreRecorder CreateRecorder(string operationName, string containerName, string databaseName, OperationType operationType, RequestOptions requestOptions, ITrace trace, CosmosClientContext clientContext);
}
internal static class Microsoft.Azure.Cosmos.Telemetry.TelemetrySystemUsage : object {
    public static SystemInfo GetCpuInfo(IReadOnlyCollection`1<SystemUsageLoad> systemUsageCollection);
    public static SystemInfo GetMemoryRemainingInfo(IReadOnlyCollection`1<SystemUsageLoad> systemUsageCollection);
    public static SystemInfo GetAvailableThreadsInfo(IReadOnlyCollection`1<SystemUsageLoad> systemUsageCollection);
    public static SystemInfo GetThreadStarvationSignalCount(IReadOnlyCollection`1<SystemUsageLoad> systemUsageCollection);
    public static SystemInfo GetThreadWaitIntervalInMs(IReadOnlyCollection`1<SystemUsageLoad> systemUsageCollection);
    public static SystemInfo GetTcpConnectionCount(IReadOnlyCollection`1<SystemUsageLoad> systemUsageCollection);
}
internal class Microsoft.Azure.Cosmos.Telemetry.TelemetryToServiceHelper : object {
    private ITelemetryCollector collector;
    internal static TimeSpan DefaultBackgroundRefreshClientConfigTimeInterval;
    private AuthorizationTokenProvider cosmosAuthorization;
    private CosmosHttpClient httpClient;
    private Uri serviceEnpoint;
    private ConnectionPolicy connectionPolicy;
    private string clientId;
    private GlobalEndpointManager globalEndpointManager;
    private CancellationTokenSource cancellationTokenSource;
    private ClientTelemetry clientTelemetry;
    private TelemetryToServiceHelper(string clientId, ConnectionPolicy connectionPolicy, AuthorizationTokenProvider cosmosAuthorization, CosmosHttpClient httpClient, Uri serviceEndpoint, GlobalEndpointManager globalEndpointManager, CancellationTokenSource cancellationTokenSource);
    private static TelemetryToServiceHelper();
    public static TelemetryToServiceHelper CreateAndInitializeClientConfigAndTelemetryJob(string clientId, ConnectionPolicy connectionPolicy, AuthorizationTokenProvider cosmosAuthorization, CosmosHttpClient httpClient, Uri serviceEndpoint, GlobalEndpointManager globalEndpointManager, CancellationTokenSource cancellationTokenSource);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Telemetry.TelemetryToServiceHelper/<RetrieveConfigAndInitiateTelemetryAsync>d__13")]
private Task RetrieveConfigAndInitiateTelemetryAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Telemetry.TelemetryToServiceHelper/<GetDatabaseAccountClientConfigAsync>d__14")]
private Task`1<TryCatch`1<AccountClientConfiguration>> GetDatabaseAccountClientConfigAsync(AuthorizationTokenProvider cosmosAuthorization, CosmosHttpClient httpClient, Uri clientConfigEndpoint);
    public ITelemetryCollector GetCollector();
    public bool IsClientTelemetryJobRunning();
    private void InitializeClientTelemetry(AccountClientConfiguration clientConfig);
    public sealed virtual void Dispose();
    private void StopClientTelemetry();
}
internal static class Microsoft.Azure.Cosmos.Telemetry.VmMetadataApiHandler : object {
    internal static string HashedMachineNamePrefix;
    internal static string VmIdPrefix;
    internal static string UuidPrefix;
    internal static Uri vmMetadataEndpointUrl;
    private static string nonAzureCloud;
    private static object lockObject;
    private static bool isInitialized;
    private static AzureVMMetadata azMetadata;
    private static Lazy`1<string> uniqueId;
    private static VmMetadataApiHandler();
    internal static void TryInitialize(CosmosHttpClient httpClient);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Telemetry.VmMetadataApiHandler/<MetadataApiCallAsync>d__9")]
private static Task MetadataApiCallAsync(CosmosHttpClient httpClient);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Telemetry.VmMetadataApiHandler/<ProcessResponseAsync>d__10")]
internal static Task`1<AzureVMMetadata> ProcessResponseAsync(HttpResponseMessage httpResponseMessage);
    internal static string GetMachineId();
    internal static Compute GetMachineInfo();
    internal static string GetMachineRegion();
    internal static string GetCloudInformation();
    [CompilerGeneratedAttribute]
internal static ValueTask`1<HttpRequestMessage> <MetadataApiCallAsync>g__CreateRequestMessage|9_0();
}
internal class Microsoft.Azure.Cosmos.Tests.Pagination.ReadFeedPartitionRangeEnumerator : PartitionRangePageAsyncEnumerator`2<ReadFeedPage, ReadFeedState> {
    private IReadFeedDataSource readFeedDataSource;
    private ReadFeedExecutionOptions readFeedPaginationOptions;
    public ReadFeedPartitionRangeEnumerator(IReadFeedDataSource readFeedDataSource, FeedRangeState`1<ReadFeedState> feedRangeState, ReadFeedExecutionOptions readFeedPaginationOptions);
    public virtual ValueTask DisposeAsync();
    protected virtual Task`1<TryCatch`1<ReadFeedPage>> GetNextPageAsync(ITrace trace, CancellationToken cancellationToken);
}
public class Microsoft.Azure.Cosmos.ThroughputProperties : object {
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfLink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OfferRID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceRID>k__BackingField;
    [CompilerGeneratedAttribute]
private OfferContentProperties <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OfferVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string ETag { get; private set; }
    [JsonConverterAttribute("Microsoft.Azure.Documents.UnixDateTimeConverter")]
[JsonPropertyAttribute]
public Nullable`1<DateTime> LastModified { get; private set; }
    [JsonIgnoreAttribute]
public Nullable`1<int> Throughput { get; private set; }
    [JsonIgnoreAttribute]
public Nullable`1<int> AutoscaleMaxThroughput { get; }
    [JsonIgnoreAttribute]
internal Nullable`1<int> AutoUpgradeMaxThroughputIncrementPercentage { get; }
    [JsonPropertyAttribute]
public string SelfLink { get; private set; }
    [JsonPropertyAttribute]
internal string OfferRID { get; private set; }
    [JsonPropertyAttribute]
internal string ResourceRID { get; private set; }
    [JsonPropertyAttribute]
internal OfferContentProperties Content { get; internal set; }
    [JsonPropertyAttribute]
internal string OfferVersion { get; private set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    internal ThroughputProperties(OfferContentProperties offerContentProperties);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
private void set_ETag(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastModified();
    [CompilerGeneratedAttribute]
private void set_LastModified(Nullable`1<DateTime> value);
    public Nullable`1<int> get_Throughput();
    private void set_Throughput(Nullable`1<int> value);
    public Nullable`1<int> get_AutoscaleMaxThroughput();
    internal Nullable`1<int> get_AutoUpgradeMaxThroughputIncrementPercentage();
    public static ThroughputProperties CreateManualThroughput(int throughput);
    public static ThroughputProperties CreateAutoscaleThroughput(int autoscaleMaxThroughput);
    internal static ThroughputProperties CreateManualThroughput(Nullable`1<int> throughput);
    internal static ThroughputProperties CreateAutoscaleThroughput(int maxAutoscaleThroughput, Nullable`1<int> autoUpgradeMaxThroughputIncrementPercentage);
    [CompilerGeneratedAttribute]
public string get_SelfLink();
    [CompilerGeneratedAttribute]
private void set_SelfLink(string value);
    [CompilerGeneratedAttribute]
internal string get_OfferRID();
    [CompilerGeneratedAttribute]
private void set_OfferRID(string value);
    [CompilerGeneratedAttribute]
internal string get_ResourceRID();
    [CompilerGeneratedAttribute]
private void set_ResourceRID(string value);
    [CompilerGeneratedAttribute]
internal OfferContentProperties get_Content();
    [CompilerGeneratedAttribute]
internal void set_Content(OfferContentProperties value);
    [CompilerGeneratedAttribute]
internal string get_OfferVersion();
    [CompilerGeneratedAttribute]
private void set_OfferVersion(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public class Microsoft.Azure.Cosmos.ThroughputResponse : Response`1<ThroughputProperties> {
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private ThroughputProperties <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    public Headers Headers { get; }
    public ThroughputProperties Resource { get; }
    public HttpStatusCode StatusCode { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ETag { get; }
    public Nullable`1<int> MinThroughput { get; }
    public Nullable`1<bool> IsReplacePending { get; }
    internal RequestMessage RequestMessage { get; }
    internal ThroughputResponse(HttpStatusCode httpStatusCode, Headers headers, ThroughputProperties throughputProperties, CosmosDiagnostics diagnostics, RequestMessage requestMessage);
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public virtual ThroughputProperties get_Resource();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    public virtual double get_RequestCharge();
    public virtual string get_ActivityId();
    public virtual string get_ETag();
    public Nullable`1<int> get_MinThroughput();
    public Nullable`1<bool> get_IsReplacePending();
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
    public static ThroughputProperties op_Implicit(ThroughputResponse response);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.Cosmos.Timers.TimerWheelCore : TimerWheel {
    private ConcurrentQueue`1[] timers;
    private int resolutionInTicks;
    private int resolutionInMs;
    private int buckets;
    private Timer timer;
    private object timerConcurrencyLock;
    private bool isDisposed;
    private bool isRunning;
    private int expirationIndex;
    private TimerWheelCore(double resolution, int buckets);
    internal TimerWheelCore(TimeSpan resolution, int buckets);
    internal TimerWheelCore(TimeSpan resolution, int buckets, Timer timer);
    public virtual void Dispose();
    public virtual TimerWheelTimer CreateTimer(TimeSpan timeout);
    public virtual void SubscribeForTimeouts(TimerWheelTimer timer);
    public void OnTimer(object stateInfo);
    private int GetIndexForTimeout(int bucket);
    private void DisposeAllTimers();
    private void ThrowIfDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.Cosmos.Timers.TimerWheelTimerCore : TimerWheelTimer {
    private static object completedObject;
    private TaskCompletionSource`1<object> taskCompletionSource;
    private object memberLock;
    private TimerWheel timerWheel;
    private bool timerStarted;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    public TimeSpan Timeout { get; }
    internal TimerWheelTimerCore(TimeSpan timeoutPeriod, TimerWheel timerWheel);
    private static TimerWheelTimerCore();
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_Timeout();
    public virtual Task StartTimerAsync();
    public virtual bool CancelTimer();
    public virtual bool FireTimeout();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Azure.Cosmos.TimerWheel : object {
    public abstract virtual void Dispose();
    public abstract virtual TimerWheelTimer CreateTimer(TimeSpan timeout);
    public abstract virtual void SubscribeForTimeouts(TimerWheelTimer timer);
    public static TimerWheel CreateTimerWheel(TimeSpan resolution, int buckets);
}
internal abstract class Microsoft.Azure.Cosmos.TimerWheelTimer : object {
    public TimeSpan Timeout { get; }
    public abstract virtual TimeSpan get_Timeout();
    [NullableContextAttribute("1")]
public abstract virtual Task StartTimerAsync();
    public abstract virtual bool CancelTimer();
    public abstract virtual bool FireTimeout();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.Cosmos.TokenCredentialCache : object {
    public static double DefaultBackgroundTokenCredentialRefreshIntervalPercentage;
    public static TimeSpan MaxBackgroundRefreshInterval;
    public static TimeSpan MinimumTimeBetweenBackgroundRefreshInterval;
    private static string ScopeFormat;
    private TokenRequestContext tokenRequestContext;
    private TokenCredential tokenCredential;
    private CancellationTokenSource cancellationTokenSource;
    private CancellationToken cancellationToken;
    private Nullable`1<TimeSpan> userDefinedBackgroundTokenCredentialRefreshInterval;
    private SemaphoreSlim isTokenRefreshingLock;
    private object backgroundRefreshLock;
    private Nullable`1<TimeSpan> systemBackgroundTokenCredentialRefreshInterval;
    [NullableAttribute("2")]
private Task`1<AccessToken> currentRefreshOperation;
    private Nullable`1<AccessToken> cachedAccessToken;
    private bool isBackgroundTaskRunning;
    private bool isDisposed;
    public Nullable`1<TimeSpan> BackgroundTokenCredentialRefreshInterval { get; }
    internal TokenCredentialCache(TokenCredential tokenCredential, Uri accountEndpoint, Nullable`1<TimeSpan> backgroundTokenCredentialRefreshInterval);
    private static TokenCredentialCache();
    public Nullable`1<TimeSpan> get_BackgroundTokenCredentialRefreshInterval();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.TokenCredentialCache/<GetTokenAsync>d__19")]
internal ValueTask`1<string> GetTokenAsync(ITrace trace);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.TokenCredentialCache/<GetNewTokenAsync>d__21")]
private Task`1<AccessToken> GetNewTokenAsync(ITrace trace);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.TokenCredentialCache/<RefreshCachedTokenWithRetryHelperAsync>d__22")]
private ValueTask`1<AccessToken> RefreshCachedTokenWithRetryHelperAsync(ITrace trace);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.TokenCredentialCache/<StartBackgroundTokenRefreshLoop>d__23")]
private void StartBackgroundTokenRefreshLoop();
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.Tracing.CallerInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    public string MemberName { get; }
    public string FilePath { get; }
    public int LineNumber { get; }
    public CallerInfo(string memberName, string filePath, int lineNumber);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public int get_LineNumber();
}
internal interface Microsoft.Azure.Cosmos.Tracing.ITrace {
    public string Name { get; }
    public Guid Id { get; }
    public DateTime StartTime { get; }
    public TimeSpan Duration { get; }
    public TraceLevel Level { get; }
    public TraceComponent Component { get; }
    public TraceSummary Summary { get; }
    public ITrace Parent { get; }
    public IReadOnlyList`1<ITrace> Children { get; }
    public IReadOnlyDictionary`2<string, object> Data { get; }
    public abstract virtual string get_Name();
    public abstract virtual Guid get_Id();
    public abstract virtual DateTime get_StartTime();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual TraceLevel get_Level();
    public abstract virtual TraceComponent get_Component();
    public abstract virtual TraceSummary get_Summary();
    public abstract virtual ITrace get_Parent();
    public abstract virtual IReadOnlyList`1<ITrace> get_Children();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_Data();
    public abstract virtual ITrace StartChild(string name);
    public abstract virtual ITrace StartChild(string name, TraceComponent component, TraceLevel level);
    public abstract virtual void AddDatum(string key, TraceDatum traceDatum);
    public abstract virtual void AddDatum(string key, object value);
    public abstract virtual void AddOrUpdateDatum(string key, object value);
    public abstract virtual void AddChild(ITrace trace);
}
internal interface Microsoft.Azure.Cosmos.Tracing.ITraceDatumVisitor {
    public abstract virtual void Visit(QueryMetricsTraceDatum queryMetricsTraceDatum);
    public abstract virtual void Visit(PointOperationStatisticsTraceDatum pointOperationStatisticsTraceDatum);
    public abstract virtual void Visit(ClientSideRequestStatisticsTraceDatum clientSideRequestStatisticsTraceDatum);
    public abstract virtual void Visit(CpuHistoryTraceDatum cpuHistoryTraceDatum);
    public abstract virtual void Visit(ClientConfigurationTraceDatum clientConfigurationTraceDatum);
    public abstract virtual void Visit(PartitionKeyRangeCacheTraceDatum partitionKeyRangeCacheTraceDatum);
}
internal class Microsoft.Azure.Cosmos.Tracing.NoOpTrace : object {
    public static NoOpTrace Singleton;
    public static TraceSummary NoOpTraceSummary;
    private static IReadOnlyList`1<ITrace> NoOpChildren;
    private static IReadOnlyDictionary`2<string, object> NoOpData;
    public string Name { get; }
    public Guid Id { get; }
    public DateTime StartTime { get; }
    public TimeSpan Duration { get; }
    public TraceLevel Level { get; }
    public TraceSummary Summary { get; }
    public TraceComponent Component { get; }
    public ITrace Parent { get; }
    public IReadOnlyList`1<ITrace> Children { get; }
    public IReadOnlyDictionary`2<string, object> Data { get; }
    private static NoOpTrace();
    public sealed virtual string get_Name();
    public sealed virtual Guid get_Id();
    public sealed virtual DateTime get_StartTime();
    public sealed virtual TimeSpan get_Duration();
    public sealed virtual TraceLevel get_Level();
    public sealed virtual TraceSummary get_Summary();
    public sealed virtual TraceComponent get_Component();
    public sealed virtual ITrace get_Parent();
    public sealed virtual IReadOnlyList`1<ITrace> get_Children();
    public sealed virtual IReadOnlyDictionary`2<string, object> get_Data();
    public sealed virtual void Dispose();
    public sealed virtual ITrace StartChild(string name);
    public sealed virtual ITrace StartChild(string name, TraceComponent component, TraceLevel level);
    public sealed virtual void AddDatum(string key, TraceDatum traceDatum);
    public sealed virtual void AddDatum(string key, object value);
    public sealed virtual void AddChild(ITrace trace);
    public sealed virtual void AddOrUpdateDatum(string key, object value);
    public void UpdateRegionContacted(TraceDatum traceDatum);
}
internal class Microsoft.Azure.Cosmos.Tracing.Trace : object {
    private static IReadOnlyDictionary`2<string, object> EmptyDictionary;
    private List`1<ITrace> children;
    private Lazy`1<Dictionary`2<string, object>> data;
    private ValueStopwatch stopwatch;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceComponent <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceSummary <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private ITrace <Parent>k__BackingField;
    public string Name { get; }
    public Guid Id { get; }
    public DateTime StartTime { get; }
    public TimeSpan Duration { get; }
    public TraceLevel Level { get; }
    public TraceComponent Component { get; }
    public TraceSummary Summary { get; }
    public ITrace Parent { get; }
    public IReadOnlyList`1<ITrace> Children { get; }
    public IReadOnlyDictionary`2<string, object> Data { get; }
    private Trace(string name, TraceLevel level, TraceComponent component, Trace parent, TraceSummary summary);
    private static Trace();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_StartTime();
    public sealed virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public sealed virtual TraceLevel get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual TraceComponent get_Component();
    [CompilerGeneratedAttribute]
public sealed virtual TraceSummary get_Summary();
    [CompilerGeneratedAttribute]
public sealed virtual ITrace get_Parent();
    public sealed virtual IReadOnlyList`1<ITrace> get_Children();
    public sealed virtual IReadOnlyDictionary`2<string, object> get_Data();
    public sealed virtual void Dispose();
    public sealed virtual ITrace StartChild(string name);
    public sealed virtual ITrace StartChild(string name, TraceComponent component, TraceLevel level);
    public sealed virtual void AddChild(ITrace child);
    public static Trace GetRootTrace(string name);
    public static Trace GetRootTrace(string name, TraceComponent component, TraceLevel level);
    public sealed virtual void AddDatum(string key, TraceDatum traceDatum);
    public sealed virtual void AddDatum(string key, object value);
    public sealed virtual void AddOrUpdateDatum(string key, object value);
}
internal enum Microsoft.Azure.Cosmos.Tracing.TraceComponent : Enum {
    public int value__;
    public static TraceComponent Unknown;
    public static TraceComponent Authorization;
    public static TraceComponent Batch;
    public static TraceComponent ChangeFeed;
    public static TraceComponent Json;
    public static TraceComponent Pagination;
    public static TraceComponent Poco;
    public static TraceComponent Query;
    public static TraceComponent ReadFeed;
    public static TraceComponent RequestHandler;
    public static TraceComponent Routing;
    public static TraceComponent Transport;
}
internal class Microsoft.Azure.Cosmos.Tracing.TraceData.ClientConfigurationTraceDatum : TraceDatum {
    [CompilerGeneratedAttribute]
private DateTime <ClientCreatedDateTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private GatewayConnectionConfig <GatewayConnectionConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private RntbdConnectionConfig <RntbdConnectionConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private OtherConnectionConfig <OtherConnectionConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsistencyConfig <ConsistencyConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionMode <ConnectionMode>k__BackingField;
    internal UserAgentContainer UserAgentContainer;
    private ReadOnlyMemory`1<byte> cachedSerializedJson;
    private int cachedNumberOfClientCreated;
    private int cachedNumberOfActiveClient;
    private string cachedUserAgentString;
    private string cachedMachineId;
    private string cachedVMRegion;
    public DateTime ClientCreatedDateTimeUtc { get; }
    public GatewayConnectionConfig GatewayConnectionConfig { get; }
    public RntbdConnectionConfig RntbdConnectionConfig { get; }
    public OtherConnectionConfig OtherConnectionConfig { get; }
    public ConsistencyConfig ConsistencyConfig { get; }
    public int ProcessorCount { get; }
    public ConnectionMode ConnectionMode { get; }
    public ReadOnlyMemory`1<byte> SerializedJson { get; }
    public ClientConfigurationTraceDatum(CosmosClientContext cosmosClientContext, DateTime startTime);
    [CompilerGeneratedAttribute]
public DateTime get_ClientCreatedDateTimeUtc();
    [CompilerGeneratedAttribute]
public GatewayConnectionConfig get_GatewayConnectionConfig();
    [CompilerGeneratedAttribute]
public RntbdConnectionConfig get_RntbdConnectionConfig();
    [CompilerGeneratedAttribute]
public OtherConnectionConfig get_OtherConnectionConfig();
    [CompilerGeneratedAttribute]
public ConsistencyConfig get_ConsistencyConfig();
    [CompilerGeneratedAttribute]
public int get_ProcessorCount();
    [CompilerGeneratedAttribute]
public ConnectionMode get_ConnectionMode();
    public ReadOnlyMemory`1<byte> get_SerializedJson();
    internal virtual void Accept(ITraceDatumVisitor traceDatumVisitor);
    private ReadOnlyMemory`1<byte> GetSerializedDatum();
}
internal class Microsoft.Azure.Cosmos.Tracing.TraceData.ClientSideRequestStatisticsTraceDatum : TraceDatum {
    private static IReadOnlyDictionary`2<string, AddressResolutionStatistics> EmptyEndpointToAddressResolutionStatistics;
    private static IReadOnlyList`1<StoreResponseStatistics> EmptyStoreResponseStatistics;
    private static IReadOnlyList`1<HttpResponseStatistics> EmptyHttpResponseStatistics;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<PartitionAddressInformation, PartitionAddressInformation>> partitionAddressInformationRefreshes;
    internal static string HttpRequestRegionNameProperty;
    private object requestEndTimeLock;
    private Dictionary`2<string, AddressResolutionStatistics> endpointToAddressResolutionStats;
    private List`1<StoreResponseStatistics> storeResponseStatistics;
    private List`1<HttpResponseStatistics> httpResponseStatistics;
    private IReadOnlyDictionary`2<string, AddressResolutionStatistics> shallowCopyOfEndpointToAddressResolutionStatistics;
    private IReadOnlyList`1<StoreResponseStatistics> shallowCopyOfStoreResponseStatistics;
    private IReadOnlyList`1<HttpResponseStatistics> shallowCopyOfHttpResponseStatistics;
    private SystemUsageHistory systemUsageHistory;
    [CompilerGeneratedAttribute]
private DateTime <RequestStartTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <RequestEndTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TransportAddressUri> <ContactedReplicas>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<TransportAddressUri> <FailedReplicas>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<ValueTuple`2<string, Uri>> <RegionsContacted>k__BackingField;
    [CompilerGeneratedAttribute]
private ITrace <Trace>k__BackingField;
    public DateTime RequestStartTimeUtc { get; }
    public Nullable`1<DateTime> RequestEndTimeUtc { get; private set; }
    public IReadOnlyDictionary`2<string, AddressResolutionStatistics> EndpointToAddressResolutionStatistics { get; }
    public List`1<TransportAddressUri> ContactedReplicas { get; public set; }
    public HashSet`1<TransportAddressUri> FailedReplicas { get; }
    public HashSet`1<ValueTuple`2<string, Uri>> RegionsContacted { get; }
    public ITrace Trace { get; private set; }
    public TraceSummary TraceSummary { get; }
    public IReadOnlyList`1<StoreResponseStatistics> StoreResponseStatisticsList { get; }
    public IReadOnlyList`1<HttpResponseStatistics> HttpResponseStatisticsList { get; }
    public Nullable`1<TimeSpan> RequestLatency { get; }
    public Nullable`1<bool> IsCpuHigh { get; }
    public Nullable`1<bool> IsCpuThreadStarvation { get; }
    public ClientSideRequestStatisticsTraceDatum(DateTime startTime, ITrace trace);
    private static ClientSideRequestStatisticsTraceDatum();
    [CompilerGeneratedAttribute]
public DateTime get_RequestStartTimeUtc();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_RequestEndTimeUtc();
    [CompilerGeneratedAttribute]
private void set_RequestEndTimeUtc(Nullable`1<DateTime> value);
    public IReadOnlyDictionary`2<string, AddressResolutionStatistics> get_EndpointToAddressResolutionStatistics();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<TransportAddressUri> get_ContactedReplicas();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContactedReplicas(List`1<TransportAddressUri> value);
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<TransportAddressUri> get_FailedReplicas();
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<ValueTuple`2<string, Uri>> get_RegionsContacted();
    [CompilerGeneratedAttribute]
public ITrace get_Trace();
    [CompilerGeneratedAttribute]
private void set_Trace(ITrace value);
    public TraceSummary get_TraceSummary();
    public IReadOnlyList`1<StoreResponseStatistics> get_StoreResponseStatisticsList();
    public IReadOnlyList`1<HttpResponseStatistics> get_HttpResponseStatisticsList();
    public sealed virtual Nullable`1<TimeSpan> get_RequestLatency();
    public sealed virtual Nullable`1<bool> get_IsCpuHigh();
    public sealed virtual Nullable`1<bool> get_IsCpuThreadStarvation();
    public sealed virtual void RecordRequest(DocumentServiceRequest request);
    public void RecordAddressCachRefreshContent(PartitionAddressInformation existingInfo, PartitionAddressInformation newInfo);
    public void WriteAddressCachRefreshContent(IJsonWriter jsonWriter);
    private static bool IsSamePartitionAddressInformation(PartitionAddressInformation info1, PartitionAddressInformation info2);
    public sealed virtual void RecordResponse(DocumentServiceRequest request, StoreResult storeResult, DateTime startTimeUtc, DateTime endTimeUtc);
    public sealed virtual void RecordException(DocumentServiceRequest request, Exception exception, DateTime startTimeUtc, DateTime endTimeUtc);
    public sealed virtual string RecordAddressResolutionStart(Uri targetEndpoint);
    public sealed virtual void RecordAddressResolutionEnd(string identifier);
    public sealed virtual void RecordHttpResponse(HttpRequestMessage request, HttpResponseMessage response, ResourceType resourceType, DateTime requestStartTimeUtc);
    public sealed virtual void RecordHttpException(HttpRequestMessage request, Exception exception, ResourceType resourceType, DateTime requestStartTimeUtc);
    private DateTime UpdateRequestEndTime(DateTime requestEndTimeUtc);
    public void UpdateSystemUsage();
    internal virtual void Accept(ITraceDatumVisitor traceDatumVisitor);
    public sealed virtual void AppendToBuilder(StringBuilder stringBuilder);
}
internal class Microsoft.Azure.Cosmos.Tracing.TraceData.ConsistencyConfig : object {
    [CompilerGeneratedAttribute]
private Nullable`1<ConsistencyLevel> <ConsistencyLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <PreferredRegions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationRegion>k__BackingField;
    private Lazy`1<string> lazyString;
    private Lazy`1<string> lazyJsonString;
    public Nullable`1<ConsistencyLevel> ConsistencyLevel { get; }
    public IReadOnlyList`1<string> PreferredRegions { get; }
    public string ApplicationRegion { get; }
    public ConsistencyConfig(Nullable`1<ConsistencyLevel> consistencyLevel, IReadOnlyList`1<string> preferredRegions, string applicationRegion);
    [CompilerGeneratedAttribute]
public Nullable`1<ConsistencyLevel> get_ConsistencyLevel();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<string> get_PreferredRegions();
    [CompilerGeneratedAttribute]
public string get_ApplicationRegion();
    public virtual string ToString();
    public string ToJsonString();
    private static string PreferredRegionsInternal(IReadOnlyList`1<string> applicationPreferredRegions);
}
internal class Microsoft.Azure.Cosmos.Tracing.TraceData.CpuHistoryTraceDatum : TraceDatum {
    [CompilerGeneratedAttribute]
private SystemUsageHistory <Value>k__BackingField;
    public SystemUsageHistory Value { get; }
    public CpuHistoryTraceDatum(SystemUsageHistory cpuLoadHistory);
    [CompilerGeneratedAttribute]
public SystemUsageHistory get_Value();
    internal virtual void Accept(ITraceDatumVisitor traceDatumVisitor);
}
internal class Microsoft.Azure.Cosmos.Tracing.TraceData.GatewayConnectionConfig : object {
    [CompilerGeneratedAttribute]
private int <MaxConnectionLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserRequestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWebProxyConfigured>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHttpClientFactoryConfigured>k__BackingField;
    private Lazy`1<string> lazyString;
    private Lazy`1<string> lazyJsonString;
    public int MaxConnectionLimit { get; }
    public int UserRequestTimeout { get; }
    public bool IsWebProxyConfigured { get; }
    public bool IsHttpClientFactoryConfigured { get; }
    public GatewayConnectionConfig(int maxConnectionLimit, TimeSpan requestTimeout, IWebProxy webProxy, Func`1<HttpClient> httpClientFactory);
    [CompilerGeneratedAttribute]
public int get_MaxConnectionLimit();
    [CompilerGeneratedAttribute]
public int get_UserRequestTimeout();
    [CompilerGeneratedAttribute]
public bool get_IsWebProxyConfigured();
    [CompilerGeneratedAttribute]
public bool get_IsHttpClientFactoryConfigured();
    public virtual string ToString();
    public string ToJsonString();
}
internal class Microsoft.Azure.Cosmos.Tracing.TraceData.OtherConnectionConfig : object {
    [CompilerGeneratedAttribute]
private bool <LimitToEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowBulkExecution>k__BackingField;
    private Lazy`1<string> lazyString;
    private Lazy`1<string> lazyJsonString;
    public bool LimitToEndpoint { get; }
    public bool AllowBulkExecution { get; }
    public OtherConnectionConfig(bool limitToEndpoint, bool allowBulkExecution);
    [CompilerGeneratedAttribute]
public bool get_LimitToEndpoint();
    [CompilerGeneratedAttribute]
public bool get_AllowBulkExecution();
    public virtual string ToString();
    public string ToJsonString();
}
internal class Microsoft.Azure.Cosmos.Tracing.TraceData.PartitionKeyRangeCacheTraceDatum : TraceDatum {
    [CompilerGeneratedAttribute]
private string <PreviousContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    public string PreviousContinuationToken { get; }
    public string ContinuationToken { get; }
    public PartitionKeyRangeCacheTraceDatum(string previousContinuationToken, string continuationToken);
    [CompilerGeneratedAttribute]
public string get_PreviousContinuationToken();
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    internal virtual void Accept(ITraceDatumVisitor traceDatumVisitor);
}
internal class Microsoft.Azure.Cosmos.Tracing.TraceData.PointOperationStatisticsTraceDatum : TraceDatum {
    [CompilerGeneratedAttribute]
private string <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private SubStatusCodes <SubStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ResponseTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RequestCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestSessionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseSessionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BELatencyInMs>k__BackingField;
    public string ActivityId { get; }
    public HttpStatusCode StatusCode { get; }
    public SubStatusCodes SubStatusCode { get; }
    public DateTime ResponseTimeUtc { get; }
    public double RequestCharge { get; }
    public string ErrorMessage { get; }
    public HttpMethod Method { get; }
    public string RequestUri { get; }
    public string RequestSessionToken { get; }
    public string ResponseSessionToken { get; }
    public string BELatencyInMs { get; }
    public PointOperationStatisticsTraceDatum(string activityId, HttpStatusCode statusCode, SubStatusCodes subStatusCode, DateTime responseTimeUtc, double requestCharge, string errorMessage, HttpMethod method, string requestUri, string requestSessionToken, string responseSessionToken, string beLatencyInMs);
    [CompilerGeneratedAttribute]
public string get_ActivityId();
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public SubStatusCodes get_SubStatusCode();
    [CompilerGeneratedAttribute]
public DateTime get_ResponseTimeUtc();
    [CompilerGeneratedAttribute]
public double get_RequestCharge();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public HttpMethod get_Method();
    [CompilerGeneratedAttribute]
public string get_RequestUri();
    [CompilerGeneratedAttribute]
public string get_RequestSessionToken();
    [CompilerGeneratedAttribute]
public string get_ResponseSessionToken();
    [CompilerGeneratedAttribute]
public string get_BELatencyInMs();
    internal virtual void Accept(ITraceDatumVisitor traceDatumVisitor);
}
internal class Microsoft.Azure.Cosmos.Tracing.TraceData.QueryMetricsTraceDatum : TraceDatum {
    private Lazy`1<QueryMetrics> LazyQueryMetrics;
    public QueryMetrics QueryMetrics { get; }
    public QueryMetricsTraceDatum(Lazy`1<QueryMetrics> queryMetrics);
    public QueryMetrics get_QueryMetrics();
    internal virtual void Accept(ITraceDatumVisitor traceDatumVisitor);
}
internal class Microsoft.Azure.Cosmos.Tracing.TraceData.RntbdConnectionConfig : object {
    [CompilerGeneratedAttribute]
private int <ConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IdleConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRequestsPerChannel>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRequestsPerEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TcpEndpointRediscovery>k__BackingField;
    [CompilerGeneratedAttribute]
private PortReuseMode <PortReuseMode>k__BackingField;
    private Lazy`1<string> lazyString;
    private Lazy`1<string> lazyJsonString;
    public int ConnectionTimeout { get; }
    public int IdleConnectionTimeout { get; }
    public int MaxRequestsPerChannel { get; }
    public int MaxRequestsPerEndpoint { get; }
    public bool TcpEndpointRediscovery { get; }
    public PortReuseMode PortReuseMode { get; }
    public RntbdConnectionConfig(int connectionTimeout, int idleConnectionTimeout, int maxRequestsPerChannel, int maxRequestsPerEndpoint, bool tcpEndpointRediscovery, PortReuseMode portReuseMode);
    [CompilerGeneratedAttribute]
public int get_ConnectionTimeout();
    [CompilerGeneratedAttribute]
public int get_IdleConnectionTimeout();
    [CompilerGeneratedAttribute]
public int get_MaxRequestsPerChannel();
    [CompilerGeneratedAttribute]
public int get_MaxRequestsPerEndpoint();
    [CompilerGeneratedAttribute]
public bool get_TcpEndpointRediscovery();
    [CompilerGeneratedAttribute]
public PortReuseMode get_PortReuseMode();
    public virtual string ToString();
    public string ToJsonString();
}
internal class Microsoft.Azure.Cosmos.Tracing.TraceData.SummaryDiagnostics : ValueType {
    [CompilerGeneratedAttribute]
private Lazy`1<HashSet`1<string>> <AllRegionsNameContacted>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<HashSet`1<Uri>> <AllRegionsContacted>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<List`1<StoreResponseStatistics>> <StoreResponseStatistics>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Lazy`1<Dictionary`2<ValueTuple`2<int, int>, int>> <DirectRequestsSummary>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<List`1<HttpResponseStatistics>> <HttpResponseStatistics>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Lazy`1<Dictionary`2<ValueTuple`2<int, int>, int>> <GatewayRequestsSummary>k__BackingField;
    public Lazy`1<HashSet`1<string>> AllRegionsNameContacted { get; private set; }
    public Lazy`1<HashSet`1<Uri>> AllRegionsContacted { get; private set; }
    public Lazy`1<List`1<StoreResponseStatistics>> StoreResponseStatistics { get; private set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<Dictionary`2<ValueTuple`2<int, int>, int>> DirectRequestsSummary { get; private set; }
    public Lazy`1<List`1<HttpResponseStatistics>> HttpResponseStatistics { get; private set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Lazy`1<Dictionary`2<ValueTuple`2<int, int>, int>> GatewayRequestsSummary { get; private set; }
    public SummaryDiagnostics(ITrace trace);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Lazy`1<HashSet`1<string>> get_AllRegionsNameContacted();
    [CompilerGeneratedAttribute]
private void set_AllRegionsNameContacted(Lazy`1<HashSet`1<string>> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Lazy`1<HashSet`1<Uri>> get_AllRegionsContacted();
    [CompilerGeneratedAttribute]
private void set_AllRegionsContacted(Lazy`1<HashSet`1<Uri>> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Lazy`1<List`1<StoreResponseStatistics>> get_StoreResponseStatistics();
    [CompilerGeneratedAttribute]
private void set_StoreResponseStatistics(Lazy`1<List`1<StoreResponseStatistics>> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Lazy`1<Dictionary`2<ValueTuple`2<int, int>, int>> get_DirectRequestsSummary();
    [CompilerGeneratedAttribute]
private void set_DirectRequestsSummary(Lazy`1<Dictionary`2<ValueTuple`2<int, int>, int>> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Lazy`1<List`1<HttpResponseStatistics>> get_HttpResponseStatistics();
    [CompilerGeneratedAttribute]
private void set_HttpResponseStatistics(Lazy`1<List`1<HttpResponseStatistics>> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Lazy`1<Dictionary`2<ValueTuple`2<int, int>, int>> get_GatewayRequestsSummary();
    [CompilerGeneratedAttribute]
private void set_GatewayRequestsSummary(Lazy`1<Dictionary`2<ValueTuple`2<int, int>, int>> value);
    private void CollectSummaryFromTraceTree(ITrace currentTrace);
    private void AggregateRegionsContacted(HashSet`1<ValueTuple`2<string, Uri>> regionsContacted);
    private void AggregateGatewayStatistics(IReadOnlyList`1<HttpResponseStatistics> httpResponseStatisticsList);
    private void AggregateStatsFromStoreResults(IReadOnlyList`1<StoreResponseStatistics> storeResponseStatisticsList);
    public void WriteSummaryDiagnostics(IJsonWriter jsonWriter);
    private static string GetSubStatusCodes(HttpResponseStatistics httpResponseStatistics);
}
internal abstract class Microsoft.Azure.Cosmos.Tracing.TraceDatum : object {
    internal abstract virtual void Accept(ITraceDatumVisitor traceDatumVisitor);
}
internal enum Microsoft.Azure.Cosmos.Tracing.TraceLevel : Enum {
    public int value__;
    public static TraceLevel Off;
    public static TraceLevel Error;
    public static TraceLevel Warning;
    public static TraceLevel Info;
    public static TraceLevel Verbose;
}
internal class Microsoft.Azure.Cosmos.Tracing.TraceSummary : object {
    private int failedRequestCount;
    private HashSet`1<ValueTuple`2<string, Uri>> regionContactedInternal;
    public IReadOnlyList`1<ValueTuple`2<string, Uri>> RegionsContacted { get; }
    public void IncrementFailedCount();
    public int GetFailedCount();
    public IReadOnlyList`1<ValueTuple`2<string, Uri>> get_RegionsContacted();
    public void UpdateRegionContacted(TraceDatum traceDatum);
    public void AddRegionContacted(string regionName, Uri locationEndpoint);
}
internal static class Microsoft.Azure.Cosmos.Tracing.TraceWriter : object {
    private static ConcurrentDictionary`2<string, string> FilePathToName;
    internal static string HourTimeFormatString;
    internal static string DateTimeFormatString;
    private static TraceWriter();
    public static void WriteTrace(TextWriter writer, ITrace trace, TraceLevel level, AsciiType asciiType);
    public static void WriteTrace(IJsonWriter writer, ITrace trace);
    public static string TraceToText(ITrace trace, TraceLevel level, AsciiType asciiType);
    public static string TraceToJson(ITrace trace);
    public static string GetFileNameFromPath(string filePath);
    private static void WriteTraceDatum(IJsonWriter writer, object value);
}
public abstract class Microsoft.Azure.Cosmos.TransactionalBatch : object {
    public abstract virtual TransactionalBatch CreateItem(T item, TransactionalBatchItemRequestOptions requestOptions);
    public abstract virtual TransactionalBatch CreateItemStream(Stream streamPayload, TransactionalBatchItemRequestOptions requestOptions);
    public abstract virtual TransactionalBatch ReadItem(string id, TransactionalBatchItemRequestOptions requestOptions);
    public abstract virtual TransactionalBatch UpsertItem(T item, TransactionalBatchItemRequestOptions requestOptions);
    public abstract virtual TransactionalBatch UpsertItemStream(Stream streamPayload, TransactionalBatchItemRequestOptions requestOptions);
    public abstract virtual TransactionalBatch ReplaceItem(string id, T item, TransactionalBatchItemRequestOptions requestOptions);
    public abstract virtual TransactionalBatch ReplaceItemStream(string id, Stream streamPayload, TransactionalBatchItemRequestOptions requestOptions);
    public abstract virtual TransactionalBatch DeleteItem(string id, TransactionalBatchItemRequestOptions requestOptions);
    public abstract virtual TransactionalBatch PatchItem(string id, IReadOnlyList`1<PatchOperation> patchOperations, TransactionalBatchPatchItemRequestOptions requestOptions);
    public abstract virtual Task`1<TransactionalBatchResponse> ExecuteAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<TransactionalBatchResponse> ExecuteAsync(TransactionalBatchRequestOptions requestOptions, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Cosmos.TransactionalBatchInternal : TransactionalBatch {
    protected List`1<ItemBatchOperation> operations;
    internal bool isHomogenousOperations;
    internal Nullable`1<OperationType> homogenousOperation;
    protected void AddOperation(ItemBatchOperation itemBatchOperation);
}
public class Microsoft.Azure.Cosmos.TransactionalBatchItemRequestOptions : RequestOptions {
    [CompilerGeneratedAttribute]
private Nullable`1<IndexingDirective> <IndexingDirective>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableContentResponseOnWrite>k__BackingField;
    public Nullable`1<IndexingDirective> IndexingDirective { get; public set; }
    public Nullable`1<bool> EnableContentResponseOnWrite { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<IndexingDirective> get_IndexingDirective();
    [CompilerGeneratedAttribute]
public void set_IndexingDirective(Nullable`1<IndexingDirective> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EnableContentResponseOnWrite();
    [CompilerGeneratedAttribute]
public void set_EnableContentResponseOnWrite(Nullable`1<bool> value);
    internal static TransactionalBatchItemRequestOptions FromItemRequestOptions(ItemRequestOptions itemRequestOptions);
    internal virtual Result WriteRequestProperties(RowWriter& writer, bool pkWritten);
    internal virtual int GetRequestPropertiesSerializationLength();
}
public class Microsoft.Azure.Cosmos.TransactionalBatchOperationResult : object {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <ResourceStream>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RequestCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private SubStatusCodes <SubStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartitionKeyRangeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private ITrace <Trace>k__BackingField;
    public HttpStatusCode StatusCode { get; private set; }
    public bool IsSuccessStatusCode { get; }
    public string ETag { get; internal set; }
    public Stream ResourceStream { get; internal set; }
    public TimeSpan RetryAfter { get; internal set; }
    internal double RequestCharge { get; internal set; }
    internal SubStatusCodes SubStatusCode { get; internal set; }
    internal string SessionToken { get; internal set; }
    internal string PartitionKeyRangeId { get; internal set; }
    internal string ActivityId { get; internal set; }
    internal ITrace Trace { get; internal set; }
    internal TransactionalBatchOperationResult(HttpStatusCode statusCode);
    internal TransactionalBatchOperationResult(TransactionalBatchOperationResult other);
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(HttpStatusCode value);
    public virtual bool get_IsSuccessStatusCode();
    [CompilerGeneratedAttribute]
public virtual string get_ETag();
    [CompilerGeneratedAttribute]
internal virtual void set_ETag(string value);
    [CompilerGeneratedAttribute]
public virtual Stream get_ResourceStream();
    [CompilerGeneratedAttribute]
internal virtual void set_ResourceStream(Stream value);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_RetryAfter();
    [CompilerGeneratedAttribute]
internal virtual void set_RetryAfter(TimeSpan value);
    [CompilerGeneratedAttribute]
internal virtual double get_RequestCharge();
    [CompilerGeneratedAttribute]
internal virtual void set_RequestCharge(double value);
    [CompilerGeneratedAttribute]
internal virtual SubStatusCodes get_SubStatusCode();
    [CompilerGeneratedAttribute]
internal virtual void set_SubStatusCode(SubStatusCodes value);
    [CompilerGeneratedAttribute]
internal virtual string get_SessionToken();
    [CompilerGeneratedAttribute]
internal virtual void set_SessionToken(string value);
    [CompilerGeneratedAttribute]
internal virtual string get_PartitionKeyRangeId();
    [CompilerGeneratedAttribute]
internal virtual void set_PartitionKeyRangeId(string value);
    [CompilerGeneratedAttribute]
internal virtual string get_ActivityId();
    [CompilerGeneratedAttribute]
internal virtual void set_ActivityId(string value);
    [CompilerGeneratedAttribute]
internal ITrace get_Trace();
    [CompilerGeneratedAttribute]
internal void set_Trace(ITrace value);
    internal static Result ReadOperationResult(ReadOnlyMemory`1<byte> input, TransactionalBatchOperationResult& batchOperationResult);
    private static Result ReadOperationResult(RowReader& reader, TransactionalBatchOperationResult& batchOperationResult);
    internal ResponseMessage ToResponseMessage(ContainerInternal cosmosContainerCore);
}
public class Microsoft.Azure.Cosmos.TransactionalBatchOperationResult`1 : TransactionalBatchOperationResult {
    [CompilerGeneratedAttribute]
private T <Resource>k__BackingField;
    public T Resource { get; public set; }
    internal TransactionalBatchOperationResult`1(TransactionalBatchOperationResult result, T resource);
    [CompilerGeneratedAttribute]
public virtual T get_Resource();
    [CompilerGeneratedAttribute]
public virtual void set_Resource(T value);
}
public class Microsoft.Azure.Cosmos.TransactionalBatchPatchItemRequestOptions : TransactionalBatchItemRequestOptions {
    [CompilerGeneratedAttribute]
private string <FilterPredicate>k__BackingField;
    public string FilterPredicate { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FilterPredicate();
    [CompilerGeneratedAttribute]
public void set_FilterPredicate(string value);
}
public class Microsoft.Azure.Cosmos.TransactionalBatchRequestOptions : RequestOptions {
    [CompilerGeneratedAttribute]
private string <SessionToken>k__BackingField;
    public string SessionToken { get; public set; }
    public Nullable`1<ConsistencyLevel> ConsistencyLevel { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SessionToken();
    [CompilerGeneratedAttribute]
public void set_SessionToken(string value);
    public Nullable`1<ConsistencyLevel> get_ConsistencyLevel();
    public void set_ConsistencyLevel(Nullable`1<ConsistencyLevel> value);
    internal virtual void PopulateRequestOptions(RequestMessage request);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Azure.Cosmos.TransactionalBatchResponse : object {
    private List`1<TransactionalBatchOperationResult> results;
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private SubStatusCodes <SubStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosSerializerCore <SerializerCore>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ItemBatchOperation> <Operations>k__BackingField;
    public Headers Headers { get; internal set; }
    public string ActivityId { get; }
    public double RequestCharge { get; }
    public Nullable`1<TimeSpan> RetryAfter { get; }
    public HttpStatusCode StatusCode { get; internal set; }
    public string ErrorMessage { get; internal set; }
    public bool IsSuccessStatusCode { get; }
    public int Count { get; }
    public CosmosDiagnostics Diagnostics { get; }
    internal SubStatusCodes SubStatusCode { get; }
    internal CosmosSerializerCore SerializerCore { get; }
    internal IReadOnlyList`1<ItemBatchOperation> Operations { get; internal set; }
    public TransactionalBatchOperationResult Item { get; }
    internal TransactionalBatchResponse(HttpStatusCode statusCode, SubStatusCodes subStatusCode, string errorMessage, IReadOnlyList`1<ItemBatchOperation> operations, ITrace trace);
    private TransactionalBatchResponse(HttpStatusCode statusCode, SubStatusCodes subStatusCode, string errorMessage, Headers headers, ITrace trace, IReadOnlyList`1<ItemBatchOperation> operations, CosmosSerializerCore serializer);
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
internal virtual void set_Headers(Headers value);
    public virtual string get_ActivityId();
    public virtual double get_RequestCharge();
    public virtual Nullable`1<TimeSpan> get_RetryAfter();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
internal virtual void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public virtual string get_ErrorMessage();
    [CompilerGeneratedAttribute]
internal virtual void set_ErrorMessage(string value);
    public virtual bool get_IsSuccessStatusCode();
    public virtual int get_Count();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    [CompilerGeneratedAttribute]
internal virtual SubStatusCodes get_SubStatusCode();
    [CompilerGeneratedAttribute]
internal virtual CosmosSerializerCore get_SerializerCore();
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<ItemBatchOperation> get_Operations();
    [CompilerGeneratedAttribute]
internal void set_Operations(IReadOnlyList`1<ItemBatchOperation> value);
    public virtual TransactionalBatchOperationResult get_Item(int index);
    public virtual TransactionalBatchOperationResult`1<T> GetOperationResultAtIndex(int index);
    public virtual IEnumerator`1<TransactionalBatchOperationResult> GetEnumerator();
    [IteratorStateMachineAttribute("Microsoft.Azure.Cosmos.TransactionalBatchResponse/<GetActivityIds>d__43")]
internal virtual IEnumerable`1<string> GetActivityIds();
    public sealed virtual void Dispose();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.TransactionalBatchResponse/<FromResponseMessageAsync>d__46")]
internal static Task`1<TransactionalBatchResponse> FromResponseMessageAsync(ResponseMessage responseMessage, ServerBatchRequest serverRequest, CosmosSerializerCore serializer, bool shouldPromoteOperationStatus, ITrace trace, CancellationToken cancellationToken);
    private void CreateAndPopulateResults(IReadOnlyList`1<ItemBatchOperation> operations, ITrace trace, int retryAfterMilliseconds);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.TransactionalBatchResponse/<PopulateFromContentAsync>d__48")]
private static Task`1<TransactionalBatchResponse> PopulateFromContentAsync(Stream content, ResponseMessage responseMessage, ServerBatchRequest serverRequest, CosmosSerializerCore serializer, ITrace trace, bool shouldPromoteOperationStatus);
    internal int GetBatchSize();
    protected virtual void Dispose(bool disposing);
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.UInt128 : ValueType {
    public static int Length;
    public static UInt128 MaxValue;
    public static UInt128 MinValue;
    private ulong low;
    private ulong high;
    private UInt128(ulong low, ulong high);
    private static UInt128();
    public static UInt128 op_Implicit(int value);
    public static UInt128 op_Implicit(long value);
    public static UInt128 op_Implicit(UInt32 value);
    public static UInt128 op_Implicit(ulong value);
    public static UInt128 op_Addition(UInt128 augend, UInt128 addend);
    public static UInt128 op_Subtraction(UInt128 minuend, UInt128 subtrahend);
    public static UInt128 op_Multiply(UInt128 multiplicand, UInt128 multiplier);
    private static ValueTuple`2<ulong, ulong> Mult64To128(ulong u, ulong v);
    private static ValueTuple`2<UInt128, UInt128> Mult128To256(UInt128 n, UInt128 m);
    public static UInt128 op_Division(UInt128 dividend, UInt128 divisor);
    public static bool op_LessThan(UInt128 left, UInt128 right);
    public static bool op_GreaterThan(UInt128 left, UInt128 right);
    public static bool op_LessThanOrEqual(UInt128 left, UInt128 right);
    public static bool op_GreaterThanOrEqual(UInt128 left, UInt128 right);
    public static bool op_Equality(UInt128 left, UInt128 right);
    public static bool op_Inequality(UInt128 left, UInt128 right);
    public static UInt128 op_BitwiseAnd(UInt128 left, UInt128 right);
    public static UInt128 op_BitwiseOr(UInt128 left, UInt128 right);
    public static UInt128 op_ExclusiveOr(UInt128 left, UInt128 right);
    public static UInt128 op_Increment(UInt128 value);
    public static UInt128 op_Decrement(UInt128 value);
    public static UInt128 Create(ulong low, ulong high);
    public static UInt128 FromByteArray(ReadOnlySpan`1<byte> buffer);
    public static Byte[] ToByteArray(UInt128 uint128);
    public sealed virtual int CompareTo(object value);
    public sealed virtual int CompareTo(UInt128 other);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(UInt128 other);
    public virtual int GetHashCode();
    public virtual string ToString();
    public ulong GetHigh();
    public ulong GetLow();
    public static bool TryParse(string value, UInt128& uInt128);
    public static bool TryCreateFromByteArray(ReadOnlySpan`1<byte> buffer, UInt128& value);
}
internal class Microsoft.Azure.Cosmos.UInt128BinaryComparer : object {
    public static UInt128BinaryComparer Singleton;
    private static UInt128BinaryComparer();
    public sealed virtual int Compare(UInt128 x, UInt128 y);
    private ulong ReverseBytes(ulong value);
}
public class Microsoft.Azure.Cosmos.UniqueKey : object {
    [CompilerGeneratedAttribute]
private Collection`1<string> <Paths>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public Collection`1<string> Paths { get; internal set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public Collection`1<string> get_Paths();
    [CompilerGeneratedAttribute]
internal void set_Paths(Collection`1<string> value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public class Microsoft.Azure.Cosmos.UniqueKeyPolicy : object {
    [CompilerGeneratedAttribute]
private Collection`1<UniqueKey> <UniqueKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public Collection`1<UniqueKey> UniqueKeys { get; internal set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public Collection`1<UniqueKey> get_UniqueKeys();
    [CompilerGeneratedAttribute]
internal void set_UniqueKeys(Collection`1<UniqueKey> value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
internal static class Microsoft.Azure.Cosmos.UriFactory : object {
    public static Uri CreateDatabaseUri(string databaseId);
    [ObsoleteAttribute("CreateCollectionUri method is deprecated, please use CreateDocumentCollectionUri method instead.")]
public static Uri CreateCollectionUri(string databaseId, string collectionId);
    public static Uri CreateDocumentCollectionUri(string databaseId, string collectionId);
    internal static Uri CreateClientEncryptionKeyUri(string databaseId, string clientEncryptionKeyId);
    public static Uri CreateUserUri(string databaseId, string userId);
    internal static Uri CreateUserDefinedTypeUri(string databaseId, string userDefinedTypeId);
    public static Uri CreateDocumentUri(string databaseId, string collectionId, string documentId);
    public static Uri CreatePermissionUri(string databaseId, string userId, string permissionId);
    public static Uri CreateStoredProcedureUri(string databaseId, string collectionId, string storedProcedureId);
    internal static Uri CreateStoredProcedureUri(string documentCollectionLink, string storedProcedureId);
    public static Uri CreateTriggerUri(string databaseId, string collectionId, string triggerId);
    public static Uri CreateUserDefinedFunctionUri(string databaseId, string collectionId, string udfId);
    public static Uri CreateConflictUri(string databaseId, string collectionId, string conflictId);
    public static Uri CreateAttachmentUri(string databaseId, string collectionId, string documentId, string attachmentId);
    public static Uri CreatePartitionKeyRangesUri(string databaseId, string collectionId);
    internal static Uri CreateSchemaUri(string databaseId, string collectionId, string schemaId);
}
internal class Microsoft.Azure.Cosmos.UsableSemaphoreWrapper : object {
    private SemaphoreSlim semaphore;
    private bool disposed;
    public UsableSemaphoreWrapper(SemaphoreSlim semaphore);
    public sealed virtual void Dispose();
}
public abstract class Microsoft.Azure.Cosmos.User : object {
    public string Id { get; }
    public abstract virtual string get_Id();
    public abstract virtual Task`1<UserResponse> ReadAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<UserResponse> ReplaceAsync(UserProperties userProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<UserResponse> DeleteAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Permission GetPermission(string id);
    public abstract virtual Task`1<PermissionResponse> CreatePermissionAsync(PermissionProperties permissionProperties, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual Task`1<PermissionResponse> UpsertPermissionAsync(PermissionProperties permissionProperties, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, CancellationToken cancellationToken);
    public abstract virtual FeedIterator`1<T> GetPermissionQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public abstract virtual FeedIterator`1<T> GetPermissionQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
}
internal class Microsoft.Azure.Cosmos.UserAgentContainer : UserAgentContainer {
    private static int MaxOperatingSystemString;
    private static int MaxClientId;
    private string cosmosBaseUserAgent;
    private string clientId;
    internal string BaseUserAgent { get; }
    public UserAgentContainer(int clientId, string features, string regionConfiguration, string suffix);
    internal virtual string get_BaseUserAgent();
    protected virtual void GetEnvironmentInformation(String& clientVersion, String& processArchitecture, String& operatingSystem, String& runtimeFramework);
    private string CreateBaseUserAgentString(string features, string regionConfiguration);
}
internal abstract class Microsoft.Azure.Cosmos.UserCore : User {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Database <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkUri>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosClientContext <ClientContext>k__BackingField;
    public string Id { get; }
    public Database Database { get; }
    internal string LinkUri { get; }
    internal CosmosClientContext ClientContext { get; }
    internal UserCore(CosmosClientContext clientContext, DatabaseInternal database, string userId);
    [CompilerGeneratedAttribute]
public virtual string get_Id();
    [CompilerGeneratedAttribute]
public Database get_Database();
    [CompilerGeneratedAttribute]
internal virtual string get_LinkUri();
    [CompilerGeneratedAttribute]
internal virtual CosmosClientContext get_ClientContext();
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.UserCore/<ReadAsync>d__13")]
public Task`1<UserResponse> ReadAsync(RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> ReadStreamAsync(RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.UserCore/<ReplaceAsync>d__15")]
public Task`1<UserResponse> ReplaceAsync(UserProperties userProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> ReplaceStreamAsync(UserProperties userProperties, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.UserCore/<DeleteAsync>d__17")]
public Task`1<UserResponse> DeleteAsync(RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> DeleteStreamAsync(RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public virtual Permission GetPermission(string id);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.UserCore/<CreatePermissionAsync>d__20")]
public Task`1<PermissionResponse> CreatePermissionAsync(PermissionProperties permissionProperties, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public Task`1<ResponseMessage> CreatePermissionStreamAsync(PermissionProperties permissionProperties, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.UserCore/<UpsertPermissionAsync>d__22")]
public Task`1<PermissionResponse> UpsertPermissionAsync(PermissionProperties permissionProperties, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    public virtual FeedIterator`1<T> GetPermissionQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public FeedIterator GetPermissionQueryStreamIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetPermissionQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public FeedIterator GetPermissionQueryStreamIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    internal Task`1<ResponseMessage> ProcessPermissionCreateAsync(Stream streamPayload, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    internal Task`1<ResponseMessage> ProcessPermissionUpsertAsync(Stream streamPayload, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ReplaceStreamInternalAsync(Stream streamPayload, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ProcessStreamAsync(Stream streamPayload, OperationType operationType, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> ProcessResourceOperationStreamAsync(Stream streamPayload, OperationType operationType, string linkUri, ResourceType resourceType, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> CreatePermissionStreamInternalAsync(Stream streamPayload, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    private Task`1<ResponseMessage> UpsertPermissionStreamInternalAsync(Stream streamPayload, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, ITrace trace, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private FeedResponse`1<T> <GetPermissionQueryIterator>b__23_0(ResponseMessage response);
}
internal class Microsoft.Azure.Cosmos.UserInlineCore : UserCore {
    internal UserInlineCore(CosmosClientContext clientContext, DatabaseInternal database, string userId);
    public virtual Task`1<UserResponse> ReadAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<UserResponse> ReplaceAsync(UserProperties userProperties, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<UserResponse> DeleteAsync(RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Permission GetPermission(string id);
    public virtual Task`1<PermissionResponse> CreatePermissionAsync(PermissionProperties permissionProperties, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual Task`1<PermissionResponse> UpsertPermissionAsync(PermissionProperties permissionProperties, Nullable`1<int> tokenExpiryInSeconds, RequestOptions requestOptions, CancellationToken cancellationToken);
    public virtual FeedIterator`1<T> GetPermissionQueryIterator(string queryText, string continuationToken, QueryRequestOptions requestOptions);
    public virtual FeedIterator`1<T> GetPermissionQueryIterator(QueryDefinition queryDefinition, string continuationToken, QueryRequestOptions requestOptions);
}
public class Microsoft.Azure.Cosmos.UserProperties : object {
    private string id;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastModified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SelfLink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Id { get; public set; }
    [JsonPropertyAttribute]
public string ETag { get; private set; }
    [JsonConverterAttribute("Microsoft.Azure.Documents.UnixDateTimeConverter")]
[JsonPropertyAttribute]
public Nullable`1<DateTime> LastModified { get; private set; }
    [JsonPropertyAttribute]
public string SelfLink { get; private set; }
    [JsonPropertyAttribute]
internal string ResourceId { get; internal set; }
    [JsonPropertyAttribute]
internal string Permissions { get; private set; }
    internal string PermissionsLink { get; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    public UserProperties(string id);
    public string get_Id();
    public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
private void set_ETag(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastModified();
    [CompilerGeneratedAttribute]
private void set_LastModified(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_SelfLink();
    [CompilerGeneratedAttribute]
private void set_SelfLink(string value);
    [CompilerGeneratedAttribute]
internal string get_ResourceId();
    [CompilerGeneratedAttribute]
internal void set_ResourceId(string value);
    [CompilerGeneratedAttribute]
internal string get_Permissions();
    [CompilerGeneratedAttribute]
private void set_Permissions(string value);
    internal string get_PermissionsLink();
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
public class Microsoft.Azure.Cosmos.UserResponse : Response`1<UserProperties> {
    [CompilerGeneratedAttribute]
private User <User>k__BackingField;
    [CompilerGeneratedAttribute]
private Headers <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private UserProperties <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosDiagnostics <Diagnostics>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMessage <RequestMessage>k__BackingField;
    public User User { get; private set; }
    public Headers Headers { get; }
    public UserProperties Resource { get; }
    public HttpStatusCode StatusCode { get; }
    public CosmosDiagnostics Diagnostics { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ETag { get; }
    internal RequestMessage RequestMessage { get; }
    internal UserResponse(HttpStatusCode httpStatusCode, Headers headers, UserProperties userProperties, User user, CosmosDiagnostics diagnostics, RequestMessage requestMessage);
    [CompilerGeneratedAttribute]
public virtual User get_User();
    [CompilerGeneratedAttribute]
private void set_User(User value);
    [CompilerGeneratedAttribute]
public virtual Headers get_Headers();
    [CompilerGeneratedAttribute]
public virtual UserProperties get_Resource();
    [CompilerGeneratedAttribute]
public virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public virtual CosmosDiagnostics get_Diagnostics();
    public virtual double get_RequestCharge();
    public virtual string get_ActivityId();
    public virtual string get_ETag();
    [CompilerGeneratedAttribute]
internal virtual RequestMessage get_RequestMessage();
    public static User op_Implicit(UserResponse response);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.Util.CosmosHistogramExtension : object {
    [ExtensionAttribute]
public static long GetMinValue(HistogramBase histogram);
}
internal class Microsoft.Azure.Cosmos.Util.HashingExtension : object {
    internal static string ComputeHash(string rawData);
}
internal static class Microsoft.Azure.Cosmos.ValidationHelpers : object {
    public static bool IsValidConsistencyLevelOverwrite(ConsistencyLevel backendConsistency, ConsistencyLevel desiredConsistency, bool isLocalQuorumConsistency, OperationType operationType, ResourceType resourceType);
    public static bool IsValidConsistencyLevelOverwrite(ConsistencyLevel backendConsistency, ConsistencyLevel desiredConsistency, bool isLocalQuorumConsistency, Nullable`1<OperationType> operationType, Nullable`1<ResourceType> resourceType);
    private static bool IsValidConsistencyLevelOverwrite(ConsistencyLevel backendConsistency, ConsistencyLevel desiredConsistency);
    private static bool IsLocalQuorumConsistency(ConsistencyLevel desiredConsistency, Nullable`1<OperationType> operationType, Nullable`1<ResourceType> resourceType);
}
internal enum Microsoft.Azure.Cosmos.VectorDataType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static VectorDataType Float16;
    [EnumMemberAttribute]
public static VectorDataType Float32;
    [EnumMemberAttribute]
public static VectorDataType Uint8;
    [EnumMemberAttribute]
public static VectorDataType Int8;
}
internal class Microsoft.Azure.Cosmos.VectorEmbeddingPolicy : object {
    [JsonPropertyAttribute]
public Collection`1<Embedding> Embeddings;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    public VectorEmbeddingPolicy(Collection`1<Embedding> embeddings);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
    private static void ValidateEmbeddings(IEnumerable`1<Embedding> embeddings);
}
internal class Microsoft.Azure.Cosmos.VectorIndexPath : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private VectorIndexType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <AdditionalProperties>k__BackingField;
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public VectorIndexType Type { get; public set; }
    [JsonExtensionDataAttribute]
internal IDictionary`2<string, JToken> AdditionalProperties { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public VectorIndexType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(VectorIndexType value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, JToken> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
private void set_AdditionalProperties(IDictionary`2<string, JToken> value);
}
internal enum Microsoft.Azure.Cosmos.VectorIndexType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static VectorIndexType Flat;
    [EnumMemberAttribute]
public static VectorIndexType DiskANN;
    [EnumMemberAttribute]
public static VectorIndexType QuantizedFlat;
}
[IsReadOnlyAttribute]
internal class Microsoft.Azure.Cosmos.VersionedAndRidCheckedCompositeToken : ValueType {
    [CompilerGeneratedAttribute]
private Version <VersionNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosElement <ContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Rid>k__BackingField;
    public Version VersionNumber { get; }
    public CosmosElement ContinuationToken { get; }
    public string Rid { get; }
    public VersionedAndRidCheckedCompositeToken(Version version, CosmosElement continuationToken, string rid);
    [CompilerGeneratedAttribute]
public Version get_VersionNumber();
    [CompilerGeneratedAttribute]
public CosmosElement get_ContinuationToken();
    [CompilerGeneratedAttribute]
public string get_Rid();
    public static TryCatch`1<VersionedAndRidCheckedCompositeToken> MonadicCreateFromCosmosElement(CosmosElement cosmosElement);
    public static CosmosElement ToCosmosElement(VersionedAndRidCheckedCompositeToken token);
}
internal class Microsoft.Azure.Cosmos.WebExceptionRetryPolicy : object {
    private static int waitTimeInSeconds;
    private static int initialBackoffSeconds;
    private static int backoffMultiplier;
    private ValueStopwatch durationTimer;
    private int attemptCount;
    private int currentBackoffSeconds;
    public sealed virtual Task`1<ShouldRetryResult> ShouldRetryAsync(Exception exception, CancellationToken cancellationToken);
    public Task`1<ShouldRetryResult> ShouldRetryAsync(ResponseMessage cosmosResponseMessage, CancellationToken cancellationToken);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[GeneratedCodeAttribute("ANTLR", "4.7.2")]
internal class sqlBaseListener : object {
    public virtual void EnterProgram(ProgramContext context);
    public virtual void ExitProgram(ProgramContext context);
    public virtual void EnterSql_query(Sql_queryContext context);
    public virtual void ExitSql_query(Sql_queryContext context);
    public virtual void EnterSelect_clause(Select_clauseContext context);
    public virtual void ExitSelect_clause(Select_clauseContext context);
    public virtual void EnterTop_spec(Top_specContext context);
    public virtual void ExitTop_spec(Top_specContext context);
    public virtual void EnterSelection(SelectionContext context);
    public virtual void ExitSelection(SelectionContext context);
    public virtual void EnterSelect_star_spec(Select_star_specContext context);
    public virtual void ExitSelect_star_spec(Select_star_specContext context);
    public virtual void EnterSelect_value_spec(Select_value_specContext context);
    public virtual void ExitSelect_value_spec(Select_value_specContext context);
    public virtual void EnterSelect_list_spec(Select_list_specContext context);
    public virtual void ExitSelect_list_spec(Select_list_specContext context);
    public virtual void EnterSelect_item(Select_itemContext context);
    public virtual void ExitSelect_item(Select_itemContext context);
    public virtual void EnterFrom_clause(From_clauseContext context);
    public virtual void ExitFrom_clause(From_clauseContext context);
    public virtual void EnterJoinCollectionExpression(JoinCollectionExpressionContext context);
    public virtual void ExitJoinCollectionExpression(JoinCollectionExpressionContext context);
    public virtual void EnterAliasedCollectionExpression(AliasedCollectionExpressionContext context);
    public virtual void ExitAliasedCollectionExpression(AliasedCollectionExpressionContext context);
    public virtual void EnterArrayIteratorCollectionExpression(ArrayIteratorCollectionExpressionContext context);
    public virtual void ExitArrayIteratorCollectionExpression(ArrayIteratorCollectionExpressionContext context);
    public virtual void EnterInputPathCollection(InputPathCollectionContext context);
    public virtual void ExitInputPathCollection(InputPathCollectionContext context);
    public virtual void EnterSubqueryCollection(SubqueryCollectionContext context);
    public virtual void ExitSubqueryCollection(SubqueryCollectionContext context);
    public virtual void EnterStringPathExpression(StringPathExpressionContext context);
    public virtual void ExitStringPathExpression(StringPathExpressionContext context);
    public virtual void EnterEpsilonPathExpression(EpsilonPathExpressionContext context);
    public virtual void ExitEpsilonPathExpression(EpsilonPathExpressionContext context);
    public virtual void EnterIdentifierPathExpression(IdentifierPathExpressionContext context);
    public virtual void ExitIdentifierPathExpression(IdentifierPathExpressionContext context);
    public virtual void EnterNumberPathExpression(NumberPathExpressionContext context);
    public virtual void ExitNumberPathExpression(NumberPathExpressionContext context);
    public virtual void EnterWhere_clause(Where_clauseContext context);
    public virtual void ExitWhere_clause(Where_clauseContext context);
    public virtual void EnterGroup_by_clause(Group_by_clauseContext context);
    public virtual void ExitGroup_by_clause(Group_by_clauseContext context);
    public virtual void EnterOrder_by_clause(Order_by_clauseContext context);
    public virtual void ExitOrder_by_clause(Order_by_clauseContext context);
    public virtual void EnterOrder_by_items(Order_by_itemsContext context);
    public virtual void ExitOrder_by_items(Order_by_itemsContext context);
    public virtual void EnterOrder_by_item(Order_by_itemContext context);
    public virtual void ExitOrder_by_item(Order_by_itemContext context);
    public virtual void EnterSort_order(Sort_orderContext context);
    public virtual void ExitSort_order(Sort_orderContext context);
    public virtual void EnterOffset_limit_clause(Offset_limit_clauseContext context);
    public virtual void ExitOffset_limit_clause(Offset_limit_clauseContext context);
    public virtual void EnterOffset_count(Offset_countContext context);
    public virtual void ExitOffset_count(Offset_countContext context);
    public virtual void EnterLimit_count(Limit_countContext context);
    public virtual void ExitLimit_count(Limit_countContext context);
    public virtual void EnterLogicalScalarExpression(LogicalScalarExpressionContext context);
    public virtual void ExitLogicalScalarExpression(LogicalScalarExpressionContext context);
    public virtual void EnterConditionalScalarExpression(ConditionalScalarExpressionContext context);
    public virtual void ExitConditionalScalarExpression(ConditionalScalarExpressionContext context);
    public virtual void EnterCoalesceScalarExpression(CoalesceScalarExpressionContext context);
    public virtual void ExitCoalesceScalarExpression(CoalesceScalarExpressionContext context);
    public virtual void EnterBetweenScalarExpression(BetweenScalarExpressionContext context);
    public virtual void ExitBetweenScalarExpression(BetweenScalarExpressionContext context);
    public virtual void EnterLogical_scalar_expression(Logical_scalar_expressionContext context);
    public virtual void ExitLogical_scalar_expression(Logical_scalar_expressionContext context);
    public virtual void EnterIn_scalar_expression(In_scalar_expressionContext context);
    public virtual void ExitIn_scalar_expression(In_scalar_expressionContext context);
    public virtual void EnterLike_scalar_expression(Like_scalar_expressionContext context);
    public virtual void ExitLike_scalar_expression(Like_scalar_expressionContext context);
    public virtual void EnterEscape_expression(Escape_expressionContext context);
    public virtual void ExitEscape_expression(Escape_expressionContext context);
    public virtual void EnterBinary_scalar_expression(Binary_scalar_expressionContext context);
    public virtual void ExitBinary_scalar_expression(Binary_scalar_expressionContext context);
    public virtual void EnterMultiplicative_operator(Multiplicative_operatorContext context);
    public virtual void ExitMultiplicative_operator(Multiplicative_operatorContext context);
    public virtual void EnterAdditive_operator(Additive_operatorContext context);
    public virtual void ExitAdditive_operator(Additive_operatorContext context);
    public virtual void EnterRelational_operator(Relational_operatorContext context);
    public virtual void ExitRelational_operator(Relational_operatorContext context);
    public virtual void EnterEquality_operator(Equality_operatorContext context);
    public virtual void ExitEquality_operator(Equality_operatorContext context);
    public virtual void EnterBitwise_and_operator(Bitwise_and_operatorContext context);
    public virtual void ExitBitwise_and_operator(Bitwise_and_operatorContext context);
    public virtual void EnterBitwise_exclusive_or_operator(Bitwise_exclusive_or_operatorContext context);
    public virtual void ExitBitwise_exclusive_or_operator(Bitwise_exclusive_or_operatorContext context);
    public virtual void EnterBitwise_inclusive_or_operator(Bitwise_inclusive_or_operatorContext context);
    public virtual void ExitBitwise_inclusive_or_operator(Bitwise_inclusive_or_operatorContext context);
    public virtual void EnterString_concat_operator(String_concat_operatorContext context);
    public virtual void ExitString_concat_operator(String_concat_operatorContext context);
    public virtual void EnterUnary_scalar_expression(Unary_scalar_expressionContext context);
    public virtual void ExitUnary_scalar_expression(Unary_scalar_expressionContext context);
    public virtual void EnterUnary_operator(Unary_operatorContext context);
    public virtual void ExitUnary_operator(Unary_operatorContext context);
    public virtual void EnterAllScalarExpression(AllScalarExpressionContext context);
    public virtual void ExitAllScalarExpression(AllScalarExpressionContext context);
    public virtual void EnterLiteralScalarExpression(LiteralScalarExpressionContext context);
    public virtual void ExitLiteralScalarExpression(LiteralScalarExpressionContext context);
    public virtual void EnterObjectCreateScalarExpression(ObjectCreateScalarExpressionContext context);
    public virtual void ExitObjectCreateScalarExpression(ObjectCreateScalarExpressionContext context);
    public virtual void EnterFirstScalarExpression(FirstScalarExpressionContext context);
    public virtual void ExitFirstScalarExpression(FirstScalarExpressionContext context);
    public virtual void EnterArrayCreateScalarExpression(ArrayCreateScalarExpressionContext context);
    public virtual void ExitArrayCreateScalarExpression(ArrayCreateScalarExpressionContext context);
    public virtual void EnterMemberIndexerScalarExpression(MemberIndexerScalarExpressionContext context);
    public virtual void ExitMemberIndexerScalarExpression(MemberIndexerScalarExpressionContext context);
    public virtual void EnterSubqueryScalarExpression(SubqueryScalarExpressionContext context);
    public virtual void ExitSubqueryScalarExpression(SubqueryScalarExpressionContext context);
    public virtual void EnterPropertyRefScalarExpressionBase(PropertyRefScalarExpressionBaseContext context);
    public virtual void ExitPropertyRefScalarExpressionBase(PropertyRefScalarExpressionBaseContext context);
    public virtual void EnterFunctionCallScalarExpression(FunctionCallScalarExpressionContext context);
    public virtual void ExitFunctionCallScalarExpression(FunctionCallScalarExpressionContext context);
    public virtual void EnterParenthesizedScalarExperession(ParenthesizedScalarExperessionContext context);
    public virtual void ExitParenthesizedScalarExperession(ParenthesizedScalarExperessionContext context);
    public virtual void EnterParameterRefScalarExpression(ParameterRefScalarExpressionContext context);
    public virtual void ExitParameterRefScalarExpression(ParameterRefScalarExpressionContext context);
    public virtual void EnterExistsScalarExpression(ExistsScalarExpressionContext context);
    public virtual void ExitExistsScalarExpression(ExistsScalarExpressionContext context);
    public virtual void EnterArrayScalarExpression(ArrayScalarExpressionContext context);
    public virtual void ExitArrayScalarExpression(ArrayScalarExpressionContext context);
    public virtual void EnterLastScalarExpression(LastScalarExpressionContext context);
    public virtual void ExitLastScalarExpression(LastScalarExpressionContext context);
    public virtual void EnterPropertyRefScalarExpressionRecursive(PropertyRefScalarExpressionRecursiveContext context);
    public virtual void ExitPropertyRefScalarExpressionRecursive(PropertyRefScalarExpressionRecursiveContext context);
    public virtual void EnterFunction_call_scalar_expression(Function_call_scalar_expressionContext context);
    public virtual void ExitFunction_call_scalar_expression(Function_call_scalar_expressionContext context);
    public virtual void EnterScalar_expression_list(Scalar_expression_listContext context);
    public virtual void ExitScalar_expression_list(Scalar_expression_listContext context);
    public virtual void EnterObject_property_list(Object_property_listContext context);
    public virtual void ExitObject_property_list(Object_property_listContext context);
    public virtual void EnterObject_property(Object_propertyContext context);
    public virtual void ExitObject_property(Object_propertyContext context);
    public virtual void EnterIdentifier(IdentifierContext context);
    public virtual void ExitIdentifier(IdentifierContext context);
    public virtual void EnterLiteral(LiteralContext context);
    public virtual void ExitLiteral(LiteralContext context);
    public virtual void EnterEveryRule(ParserRuleContext context);
    public virtual void ExitEveryRule(ParserRuleContext context);
    public virtual void VisitTerminal(ITerminalNode node);
    public virtual void VisitErrorNode(IErrorNode node);
}
[GeneratedCodeAttribute("ANTLR", "4.7.2")]
internal class sqlBaseVisitor`1 : AbstractParseTreeVisitor`1<Result> {
    public virtual Result VisitProgram(ProgramContext context);
    public virtual Result VisitSql_query(Sql_queryContext context);
    public virtual Result VisitSelect_clause(Select_clauseContext context);
    public virtual Result VisitTop_spec(Top_specContext context);
    public virtual Result VisitSelection(SelectionContext context);
    public virtual Result VisitSelect_star_spec(Select_star_specContext context);
    public virtual Result VisitSelect_value_spec(Select_value_specContext context);
    public virtual Result VisitSelect_list_spec(Select_list_specContext context);
    public virtual Result VisitSelect_item(Select_itemContext context);
    public virtual Result VisitFrom_clause(From_clauseContext context);
    public virtual Result VisitJoinCollectionExpression(JoinCollectionExpressionContext context);
    public virtual Result VisitAliasedCollectionExpression(AliasedCollectionExpressionContext context);
    public virtual Result VisitArrayIteratorCollectionExpression(ArrayIteratorCollectionExpressionContext context);
    public virtual Result VisitInputPathCollection(InputPathCollectionContext context);
    public virtual Result VisitSubqueryCollection(SubqueryCollectionContext context);
    public virtual Result VisitStringPathExpression(StringPathExpressionContext context);
    public virtual Result VisitEpsilonPathExpression(EpsilonPathExpressionContext context);
    public virtual Result VisitIdentifierPathExpression(IdentifierPathExpressionContext context);
    public virtual Result VisitNumberPathExpression(NumberPathExpressionContext context);
    public virtual Result VisitWhere_clause(Where_clauseContext context);
    public virtual Result VisitGroup_by_clause(Group_by_clauseContext context);
    public virtual Result VisitOrder_by_clause(Order_by_clauseContext context);
    public virtual Result VisitOrder_by_items(Order_by_itemsContext context);
    public virtual Result VisitOrder_by_item(Order_by_itemContext context);
    public virtual Result VisitSort_order(Sort_orderContext context);
    public virtual Result VisitOffset_limit_clause(Offset_limit_clauseContext context);
    public virtual Result VisitOffset_count(Offset_countContext context);
    public virtual Result VisitLimit_count(Limit_countContext context);
    public virtual Result VisitLogicalScalarExpression(LogicalScalarExpressionContext context);
    public virtual Result VisitConditionalScalarExpression(ConditionalScalarExpressionContext context);
    public virtual Result VisitCoalesceScalarExpression(CoalesceScalarExpressionContext context);
    public virtual Result VisitBetweenScalarExpression(BetweenScalarExpressionContext context);
    public virtual Result VisitLogical_scalar_expression(Logical_scalar_expressionContext context);
    public virtual Result VisitIn_scalar_expression(In_scalar_expressionContext context);
    public virtual Result VisitLike_scalar_expression(Like_scalar_expressionContext context);
    public virtual Result VisitEscape_expression(Escape_expressionContext context);
    public virtual Result VisitBinary_scalar_expression(Binary_scalar_expressionContext context);
    public virtual Result VisitMultiplicative_operator(Multiplicative_operatorContext context);
    public virtual Result VisitAdditive_operator(Additive_operatorContext context);
    public virtual Result VisitRelational_operator(Relational_operatorContext context);
    public virtual Result VisitEquality_operator(Equality_operatorContext context);
    public virtual Result VisitBitwise_and_operator(Bitwise_and_operatorContext context);
    public virtual Result VisitBitwise_exclusive_or_operator(Bitwise_exclusive_or_operatorContext context);
    public virtual Result VisitBitwise_inclusive_or_operator(Bitwise_inclusive_or_operatorContext context);
    public virtual Result VisitString_concat_operator(String_concat_operatorContext context);
    public virtual Result VisitUnary_scalar_expression(Unary_scalar_expressionContext context);
    public virtual Result VisitUnary_operator(Unary_operatorContext context);
    public virtual Result VisitAllScalarExpression(AllScalarExpressionContext context);
    public virtual Result VisitLiteralScalarExpression(LiteralScalarExpressionContext context);
    public virtual Result VisitObjectCreateScalarExpression(ObjectCreateScalarExpressionContext context);
    public virtual Result VisitFirstScalarExpression(FirstScalarExpressionContext context);
    public virtual Result VisitArrayCreateScalarExpression(ArrayCreateScalarExpressionContext context);
    public virtual Result VisitMemberIndexerScalarExpression(MemberIndexerScalarExpressionContext context);
    public virtual Result VisitSubqueryScalarExpression(SubqueryScalarExpressionContext context);
    public virtual Result VisitPropertyRefScalarExpressionBase(PropertyRefScalarExpressionBaseContext context);
    public virtual Result VisitFunctionCallScalarExpression(FunctionCallScalarExpressionContext context);
    public virtual Result VisitParenthesizedScalarExperession(ParenthesizedScalarExperessionContext context);
    public virtual Result VisitParameterRefScalarExpression(ParameterRefScalarExpressionContext context);
    public virtual Result VisitExistsScalarExpression(ExistsScalarExpressionContext context);
    public virtual Result VisitArrayScalarExpression(ArrayScalarExpressionContext context);
    public virtual Result VisitLastScalarExpression(LastScalarExpressionContext context);
    public virtual Result VisitPropertyRefScalarExpressionRecursive(PropertyRefScalarExpressionRecursiveContext context);
    public virtual Result VisitFunction_call_scalar_expression(Function_call_scalar_expressionContext context);
    public virtual Result VisitScalar_expression_list(Scalar_expression_listContext context);
    public virtual Result VisitObject_property_list(Object_property_listContext context);
    public virtual Result VisitObject_property(Object_propertyContext context);
    public virtual Result VisitIdentifier(IdentifierContext context);
    public virtual Result VisitLiteral(LiteralContext context);
}
[GeneratedCodeAttribute("ANTLR", "4.7.2")]
internal class sqlLexer : Lexer {
    protected static DFA[] decisionToDFA;
    protected static PredictionContextCache sharedContextCache;
    public static int T__0;
    public static int T__1;
    public static int T__2;
    public static int T__3;
    public static int T__4;
    public static int T__5;
    public static int T__6;
    public static int T__7;
    public static int T__8;
    public static int T__9;
    public static int T__10;
    public static int T__11;
    public static int T__12;
    public static int T__13;
    public static int T__14;
    public static int T__15;
    public static int T__16;
    public static int T__17;
    public static int T__18;
    public static int T__19;
    public static int T__20;
    public static int T__21;
    public static int T__22;
    public static int T__23;
    public static int T__24;
    public static int T__25;
    public static int T__26;
    public static int K_ALL;
    public static int K_AND;
    public static int K_ARRAY;
    public static int K_AS;
    public static int K_ASC;
    public static int K_BETWEEN;
    public static int K_BY;
    public static int K_DESC;
    public static int K_DISTINCT;
    public static int K_ESCAPE;
    public static int K_EXISTS;
    public static int K_FIRST;
    public static int K_FALSE;
    public static int K_FROM;
    public static int K_GROUP;
    public static int K_IN;
    public static int K_JOIN;
    public static int K_LAST;
    public static int K_LEFT;
    public static int K_LIKE;
    public static int K_LIMIT;
    public static int K_NOT;
    public static int K_NULL;
    public static int K_OFFSET;
    public static int K_OR;
    public static int K_ORDER;
    public static int K_RIGHT;
    public static int K_SELECT;
    public static int K_TOP;
    public static int K_TRUE;
    public static int K_UDF;
    public static int K_UNDEFINED;
    public static int K_VALUE;
    public static int K_WHERE;
    public static int WS;
    public static int NUMERIC_LITERAL;
    public static int STRING_LITERAL;
    public static int LEX_IDENTIFIER;
    public static int PARAMETER;
    public static String[] channelNames;
    public static String[] modeNames;
    public static String[] ruleNames;
    private static String[] _LiteralNames;
    private static String[] _SymbolicNames;
    public static IVocabulary DefaultVocabulary;
    private static Char[] _serializedATN;
    public static ATN _ATN;
    [NotNullAttribute]
public IVocabulary Vocabulary { get; }
    public string GrammarFileName { get; }
    public String[] RuleNames { get; }
    public String[] ChannelNames { get; }
    public String[] ModeNames { get; }
    public string SerializedAtn { get; }
    public sqlLexer(ICharStream input);
    public sqlLexer(ICharStream input, TextWriter output, TextWriter errorOutput);
    private static sqlLexer();
    public virtual IVocabulary get_Vocabulary();
    public virtual string get_GrammarFileName();
    public virtual String[] get_RuleNames();
    public virtual String[] get_ChannelNames();
    public virtual String[] get_ModeNames();
    public virtual string get_SerializedAtn();
}
[GeneratedCodeAttribute("ANTLR", "4.7.2")]
internal class sqlParser : Parser {
    protected static DFA[] decisionToDFA;
    protected static PredictionContextCache sharedContextCache;
    public static int T__0;
    public static int T__1;
    public static int T__2;
    public static int T__3;
    public static int T__4;
    public static int T__5;
    public static int T__6;
    public static int T__7;
    public static int T__8;
    public static int T__9;
    public static int T__10;
    public static int T__11;
    public static int T__12;
    public static int T__13;
    public static int T__14;
    public static int T__15;
    public static int T__16;
    public static int T__17;
    public static int T__18;
    public static int T__19;
    public static int T__20;
    public static int T__21;
    public static int T__22;
    public static int T__23;
    public static int T__24;
    public static int T__25;
    public static int T__26;
    public static int K_ALL;
    public static int K_AND;
    public static int K_ARRAY;
    public static int K_AS;
    public static int K_ASC;
    public static int K_BETWEEN;
    public static int K_BY;
    public static int K_DESC;
    public static int K_DISTINCT;
    public static int K_ESCAPE;
    public static int K_EXISTS;
    public static int K_FIRST;
    public static int K_FALSE;
    public static int K_FROM;
    public static int K_GROUP;
    public static int K_IN;
    public static int K_JOIN;
    public static int K_LAST;
    public static int K_LEFT;
    public static int K_LIKE;
    public static int K_LIMIT;
    public static int K_NOT;
    public static int K_NULL;
    public static int K_OFFSET;
    public static int K_OR;
    public static int K_ORDER;
    public static int K_RIGHT;
    public static int K_SELECT;
    public static int K_TOP;
    public static int K_TRUE;
    public static int K_UDF;
    public static int K_UNDEFINED;
    public static int K_VALUE;
    public static int K_WHERE;
    public static int WS;
    public static int NUMERIC_LITERAL;
    public static int STRING_LITERAL;
    public static int LEX_IDENTIFIER;
    public static int PARAMETER;
    public static int RULE_program;
    public static int RULE_sql_query;
    public static int RULE_select_clause;
    public static int RULE_top_spec;
    public static int RULE_selection;
    public static int RULE_select_star_spec;
    public static int RULE_select_value_spec;
    public static int RULE_select_list_spec;
    public static int RULE_select_item;
    public static int RULE_from_clause;
    public static int RULE_collection_expression;
    public static int RULE_collection;
    public static int RULE_path_expression;
    public static int RULE_where_clause;
    public static int RULE_group_by_clause;
    public static int RULE_order_by_clause;
    public static int RULE_order_by_items;
    public static int RULE_order_by_item;
    public static int RULE_sort_order;
    public static int RULE_offset_limit_clause;
    public static int RULE_offset_count;
    public static int RULE_limit_count;
    public static int RULE_scalar_expression;
    public static int RULE_logical_scalar_expression;
    public static int RULE_in_scalar_expression;
    public static int RULE_like_scalar_expression;
    public static int RULE_escape_expression;
    public static int RULE_binary_scalar_expression;
    public static int RULE_multiplicative_operator;
    public static int RULE_additive_operator;
    public static int RULE_relational_operator;
    public static int RULE_equality_operator;
    public static int RULE_bitwise_and_operator;
    public static int RULE_bitwise_exclusive_or_operator;
    public static int RULE_bitwise_inclusive_or_operator;
    public static int RULE_string_concat_operator;
    public static int RULE_unary_scalar_expression;
    public static int RULE_unary_operator;
    public static int RULE_primary_expression;
    public static int RULE_function_call_scalar_expression;
    public static int RULE_scalar_expression_list;
    public static int RULE_object_property_list;
    public static int RULE_object_property;
    public static int RULE_identifier;
    public static int RULE_literal;
    public static String[] ruleNames;
    private static String[] _LiteralNames;
    private static String[] _SymbolicNames;
    public static IVocabulary DefaultVocabulary;
    private static Char[] _serializedATN;
    public static ATN _ATN;
    [NotNullAttribute]
public IVocabulary Vocabulary { get; }
    public string GrammarFileName { get; }
    public String[] RuleNames { get; }
    public string SerializedAtn { get; }
    private static sqlParser();
    public sqlParser(ITokenStream input);
    public sqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput);
    public virtual IVocabulary get_Vocabulary();
    public virtual string get_GrammarFileName();
    public virtual String[] get_RuleNames();
    public virtual string get_SerializedAtn();
    [RuleVersionAttribute("0")]
public ProgramContext program();
    [RuleVersionAttribute("0")]
public Sql_queryContext sql_query();
    [RuleVersionAttribute("0")]
public Select_clauseContext select_clause();
    [RuleVersionAttribute("0")]
public Top_specContext top_spec();
    [RuleVersionAttribute("0")]
public SelectionContext selection();
    [RuleVersionAttribute("0")]
public Select_star_specContext select_star_spec();
    [RuleVersionAttribute("0")]
public Select_value_specContext select_value_spec();
    [RuleVersionAttribute("0")]
public Select_list_specContext select_list_spec();
    [RuleVersionAttribute("0")]
public Select_itemContext select_item();
    [RuleVersionAttribute("0")]
public From_clauseContext from_clause();
    [RuleVersionAttribute("0")]
public Collection_expressionContext collection_expression();
    private Collection_expressionContext collection_expression(int _p);
    [RuleVersionAttribute("0")]
public CollectionContext collection();
    [RuleVersionAttribute("0")]
public Path_expressionContext path_expression();
    private Path_expressionContext path_expression(int _p);
    [RuleVersionAttribute("0")]
public Where_clauseContext where_clause();
    [RuleVersionAttribute("0")]
public Group_by_clauseContext group_by_clause();
    [RuleVersionAttribute("0")]
public Order_by_clauseContext order_by_clause();
    [RuleVersionAttribute("0")]
public Order_by_itemsContext order_by_items();
    [RuleVersionAttribute("0")]
public Order_by_itemContext order_by_item();
    [RuleVersionAttribute("0")]
public Sort_orderContext sort_order();
    [RuleVersionAttribute("0")]
public Offset_limit_clauseContext offset_limit_clause();
    [RuleVersionAttribute("0")]
public Offset_countContext offset_count();
    [RuleVersionAttribute("0")]
public Limit_countContext limit_count();
    [RuleVersionAttribute("0")]
public Scalar_expressionContext scalar_expression();
    private Scalar_expressionContext scalar_expression(int _p);
    [RuleVersionAttribute("0")]
public Logical_scalar_expressionContext logical_scalar_expression();
    private Logical_scalar_expressionContext logical_scalar_expression(int _p);
    [RuleVersionAttribute("0")]
public In_scalar_expressionContext in_scalar_expression();
    [RuleVersionAttribute("0")]
public Like_scalar_expressionContext like_scalar_expression();
    [RuleVersionAttribute("0")]
public Escape_expressionContext escape_expression();
    [RuleVersionAttribute("0")]
public Binary_scalar_expressionContext binary_scalar_expression();
    private Binary_scalar_expressionContext binary_scalar_expression(int _p);
    [RuleVersionAttribute("0")]
public Multiplicative_operatorContext multiplicative_operator();
    [RuleVersionAttribute("0")]
public Additive_operatorContext additive_operator();
    [RuleVersionAttribute("0")]
public Relational_operatorContext relational_operator();
    [RuleVersionAttribute("0")]
public Equality_operatorContext equality_operator();
    [RuleVersionAttribute("0")]
public Bitwise_and_operatorContext bitwise_and_operator();
    [RuleVersionAttribute("0")]
public Bitwise_exclusive_or_operatorContext bitwise_exclusive_or_operator();
    [RuleVersionAttribute("0")]
public Bitwise_inclusive_or_operatorContext bitwise_inclusive_or_operator();
    [RuleVersionAttribute("0")]
public String_concat_operatorContext string_concat_operator();
    [RuleVersionAttribute("0")]
public Unary_scalar_expressionContext unary_scalar_expression();
    [RuleVersionAttribute("0")]
public Unary_operatorContext unary_operator();
    [RuleVersionAttribute("0")]
public Primary_expressionContext primary_expression();
    private Primary_expressionContext primary_expression(int _p);
    [RuleVersionAttribute("0")]
public Function_call_scalar_expressionContext function_call_scalar_expression();
    [RuleVersionAttribute("0")]
public Scalar_expression_listContext scalar_expression_list();
    [RuleVersionAttribute("0")]
public Object_property_listContext object_property_list();
    [RuleVersionAttribute("0")]
public Object_propertyContext object_property();
    [RuleVersionAttribute("0")]
public IdentifierContext identifier();
    [RuleVersionAttribute("0")]
public LiteralContext literal();
    public virtual bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex);
    private bool collection_expression_sempred(Collection_expressionContext _localctx, int predIndex);
    private bool path_expression_sempred(Path_expressionContext _localctx, int predIndex);
    private bool scalar_expression_sempred(Scalar_expressionContext _localctx, int predIndex);
    private bool logical_scalar_expression_sempred(Logical_scalar_expressionContext _localctx, int predIndex);
    private bool binary_scalar_expression_sempred(Binary_scalar_expressionContext _localctx, int predIndex);
    private bool primary_expression_sempred(Primary_expressionContext _localctx, int predIndex);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[GeneratedCodeAttribute("ANTLR", "4.8")]
internal class XPathLexer : Lexer {
    protected static DFA[] decisionToDFA;
    protected static PredictionContextCache sharedContextCache;
    public static int TokenRef;
    public static int RuleRef;
    public static int Anywhere;
    public static int Root;
    public static int Wildcard;
    public static int Bang;
    public static int ID;
    public static int String;
    public static String[] channelNames;
    public static String[] modeNames;
    public static String[] ruleNames;
    private static String[] _LiteralNames;
    private static String[] _SymbolicNames;
    public static IVocabulary DefaultVocabulary;
    private static string _serializedATN;
    public static ATN _ATN;
    [NotNullAttribute]
public IVocabulary Vocabulary { get; }
    public string GrammarFileName { get; }
    public String[] RuleNames { get; }
    public String[] ChannelNames { get; }
    public String[] ModeNames { get; }
    public string SerializedAtn { get; }
    public XPathLexer(ICharStream input);
    private static XPathLexer();
    public virtual IVocabulary get_Vocabulary();
    public virtual string get_GrammarFileName();
    public virtual String[] get_RuleNames();
    public virtual String[] get_ChannelNames();
    public virtual String[] get_ModeNames();
    public virtual string get_SerializedAtn();
    public virtual void Action(RuleContext _localctx, int ruleIndex, int actionIndex);
    private void ID_action(RuleContext _localctx, int actionIndex);
    private static string _serializeATN();
}
