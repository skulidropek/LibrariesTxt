internal static class AssemblyRef : object {
    internal static string ProductPublicKey;
    internal static string TestPublicKey;
    internal static string MoqPublicKey;
    internal static string FakesPublicKey;
}
internal static class AssemblyVersionInfo : object {
    public static string AssemblyFileVersionString;
}
internal static class Microsoft.Azure.Cosmos.Core.ArgumentChecker : object {
    internal static void ArgumentNotNull(object parameter, string parameterName);
    internal static void ArgumentStringIsGuid(string parameter, string parameterName);
    internal static void ArgumentStringNotNullOrEmpty(string parameter, string parameterName);
    internal static void ArgumentStringNotNullOrWhiteSpace(string parameter, string parameterName);
    internal static void ArgumentThrowIfNotWithinBoundsInclusive(string parameterName, int parameterValue, int minValue, int maxValue);
    internal static void ArgumentThrowIfFirstLessThanSecond(string firstParameterName, T firstParameterValue, string secondParameterName, T secondParameterValue);
}
internal class Microsoft.Azure.Cosmos.Core.AsyncCache`2 : object {
    private ConcurrentDictionary`2<TKey, AsyncLazy`1<TValue>> values;
    private IEqualityComparer`1<TValue> valueEqualityComparer;
    private IEqualityComparer`1<TKey> keyEqualityComparer;
    public ICollection`1<TKey> Keys { get; }
    public AsyncCache`2(IEqualityComparer`1<TValue> valueEqualityComparer, IEqualityComparer`1<TKey> keyEqualityComparer);
    public ICollection`1<TKey> get_Keys();
    public void Set(TKey key, TValue value);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Core.AsyncCache`2/<GetAsync>d__8")]
public Task`1<TValue> GetAsync(TKey key, TValue obsoleteValue, Func`1<Task`1<TValue>> singleValueInitFunc, CancellationToken cancellationToken, bool forceRefresh);
    public void Remove(TKey key);
    public bool TryRemoveIfCompleted(TKey key);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Core.AsyncCache`2/<RemoveAsync>d__11")]
public Task`1<TValue> RemoveAsync(TKey key);
    public void Clear();
    private void InvokeEvictionCallbackIfCompleted(AsyncLazy`1<TValue> lazyValue);
}
internal class Microsoft.Azure.Cosmos.Core.AsyncLazy`1 : Lazy`1<Task`1<T>> {
    public AsyncLazy`1(T value);
    public AsyncLazy`1(Func`1<T> valueFactory, CancellationToken cancellationToken);
    public AsyncLazy`1(Func`1<Task`1<T>> taskFactory, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Cosmos.Core.AsyncMemoryCache`2 : object {
    private ConcurrentDictionary`2<TKey, CachedValue<TKey, TValue>> valueByKey;
    private AsyncCache`2<TKey, TValue> asyncCache;
    public ICollection`1<TKey> Keys { get; }
    public AsyncMemoryCache`2(IEqualityComparer`1<TValue> valueEqualityComparer, IEqualityComparer`1<TKey> keyEqualityComparer);
    public ICollection`1<TKey> get_Keys();
    public void Set(TKey key, TValue value);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Core.AsyncMemoryCache`2/<GetAsync>d__6")]
public Task`1<TValue> GetAsync(TKey key, Func`1<Task`1<TValue>> singleValueInitFunc, TimeSpan refreshAfter, TimeSpan forceRefreshAfter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Core.AsyncMemoryCache`2/<InitAsync>d__7")]
private Task`1<TValue> InitAsync(TKey key, Func`1<Task`1<TValue>> func, CachedValue<TKey, TValue> previousValue);
}
public class Microsoft.Azure.Cosmos.Core.AsyncQueue`1 : object {
    private EventAsync<T> available;
    private ConcurrentQueue`1<T> queue;
    private CancellationToken cancel;
    private CancellationTokenRegistration cancelRegistration;
    private int disposed;
    public int Count { get; }
    public AsyncQueue`1(CancellationToken cancel);
    public int get_Count();
    public sealed virtual void Dispose();
    public bool TryEnqueue(T item);
    public bool TryDequeue(T& item);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Core.AsyncQueue`1/<DequeueAsync>d__11")]
public Task`1<T> DequeueAsync();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_0();
}
internal class Microsoft.Azure.Cosmos.Core.AsyncTimeCache`2 : object {
    private AsyncCache`2<TKey, Tuple`2<TValue, DateTimeOffset>> asyncCache;
    public AsyncTimeCache`2(IEqualityComparer`1<TKey> keyEqualityComparer, IEqualityComparer`1<TValue> valueEqualityComparer);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Core.AsyncTimeCache`2/<GetAsync>d__2")]
public Task`1<TValue> GetAsync(TKey key, TValue obsoleteValue, Func`1<Task`1<TValue>> singleValueInitFunc, TimeSpan refreshInterval, CancellationToken cancellationToken, bool forceRefresh);
    public bool TryRemoveIfCompleted(TKey key);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Core.AsyncTimeCache`2/<GetResourceAsync>d__4")]
private static Task`1<Tuple`2<TValue, DateTimeOffset>> GetResourceAsync(Func`1<Task`1<TValue>> singleValueInitFunc);
}
public class Microsoft.Azure.Cosmos.Core.BigEndianBinaryReader : BinaryReader {
    private Byte[] buffer;
    public BigEndianBinaryReader(Stream input);
    public BigEndianBinaryReader(Stream input, Encoding encoding);
    public BigEndianBinaryReader(Stream input, Encoding encoding, bool leaveOpen);
    public virtual short ReadInt16();
    public virtual ushort ReadUInt16();
    public virtual int ReadInt32();
    public virtual UInt32 ReadUInt32();
    public virtual long ReadInt64();
    public virtual ulong ReadUInt64();
    public virtual string ReadString();
    public virtual double ReadDouble();
    public virtual float ReadSingle();
    public virtual byte ReadByte();
    public virtual Byte[] ReadBytes(int count);
    public virtual int Read(Byte[] buffer, int index, int count);
    public virtual decimal ReadDecimal();
    public virtual bool ReadBoolean();
    public virtual int Read(Char[] buffer, int index, int count);
    public virtual Char[] ReadChars(int count);
    public virtual int Read();
    public virtual int PeekChar();
    private void WriteToBuffer(int bytesToRead, Byte[] readBuffer, int readBufferIndex);
}
public class Microsoft.Azure.Cosmos.Core.BigEndianBinaryWriter : BinaryWriter {
    private Byte[] numberBytes;
    public BigEndianBinaryWriter(Stream output, Encoding encoding, bool leaveOpen);
    public virtual void Write(short value);
    public virtual void Write(ushort value);
    public virtual void Write(int value);
    public virtual void Write(UInt32 value);
    public virtual void Write(ulong value);
    public virtual void Write(long value);
    public virtual void Write(string value);
    public virtual void Write(double value);
    public virtual void Write(float value);
    private void WriteValue(Byte* bytePointer, int length);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Azure.Cosmos.Core.Collections.TreeNode`1 : object {
    private List`1<TreeNode`1<T>> children;
    [CompilerGeneratedAttribute]
private TreeNode`1<T> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public TreeNode`1<T> Parent { get; private set; }
    public T Value { get; }
    public TreeNode`1<T> Item { get; }
    public ReadOnlyCollection`1<TreeNode`1<T>> Children { get; }
    public TreeNode`1(T value);
    [CompilerGeneratedAttribute]
public TreeNode`1<T> get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(TreeNode`1<T> value);
    [CompilerGeneratedAttribute]
public T get_Value();
    public TreeNode`1<T> get_Item(int i);
    public ReadOnlyCollection`1<TreeNode`1<T>> get_Children();
    public TreeNode`1<T> AddChild(T value);
    public void AddChild(TreeNode`1<T> value);
    public TreeNode`1[] AddChildren(T[] values);
    public bool RemoveChild(TreeNode`1<T> node);
    public void Traverse(Action`1<T> action);
    public IEnumerable`1<T> Flatten();
    public List`1<TreeNode`1<T>> GetNodes();
}
public class Microsoft.Azure.Cosmos.Core.Collections.Trie`2 : object {
    private static int MinCapacity;
    private Memory`1<Node<TSymbol, TValue>> capacity;
    private Memory`1<Node<TSymbol, TValue>> tree;
    public Trie`2(int initialCapacity);
    public bool TryAdd(ReadOnlySpan`1<TSymbol> key, TValue value);
    public void AddOrUpdate(ReadOnlySpan`1<TSymbol> key, TValue value);
    public bool TryGetValue(ReadOnlySpan`1<TSymbol> key, TValue& value);
    private static bool SymbolEquals(TSymbol left, TSymbol right);
    private int AllocNode(TSymbol s);
    private bool FindChild(TSymbol s, int parent, Int32& child);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.Core.ConfigurationProviderExtensions : object {
    [ExtensionAttribute]
internal static int GetIntValue(IConfigurationProvider configurationProvider, string configurationPropertyName);
    [ExtensionAttribute]
internal static int GetOptionalIntValue(IConfigurationProvider configurationProvider, string configurationPropertyName, int defaultValue);
    [ExtensionAttribute]
internal static UInt32 GetOptionalUnsignedIntValue(IConfigurationProvider configurationProvider, string configurationPropertyName, UInt32 defaultValue);
    [ExtensionAttribute]
internal static double GetDoubleValue(IConfigurationProvider configurationProvider, string configurationPropertyName);
    [ExtensionAttribute]
internal static String[] GetStringArrayValue(IConfigurationProvider configurationProvider, string configurationPropertyName, char separator);
    [ExtensionAttribute]
internal static bool GetBoolValue(IConfigurationProvider configurationProvider, string configurationPropertyName);
    [ExtensionAttribute]
internal static bool TryGetValue(IConfigurationProvider configurationProvider, string configurationPropertyName, String& value);
    [ExtensionAttribute]
internal static string GetOptionalValue(IConfigurationProvider configurationProvider, string configurationPropertyName);
}
[ExcludeFromCodeCoverageAttribute]
public static class Microsoft.Azure.Cosmos.Core.Contract : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool condition);
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool condition, string message);
    public static void Requires(bool condition);
    public static void Requires(bool condition, string message);
    public static void Invariant(bool condition);
    public static void Invariant(bool condition, string message);
    public static void Fail();
    public static void Fail(string message);
    private static void Fail(string api, string message);
}
[ExcludeFromCodeCoverageAttribute]
public class Microsoft.Azure.Cosmos.Core.ContractViolationException : Exception {
    public ContractViolationException(string message);
    public ContractViolationException(string message, Exception innerException);
    protected ContractViolationException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.Azure.Cosmos.Core.Crc32 : object {
    private static UInt32[] CrcTable0;
    private static UInt32[] CrcTable1;
    private static UInt32[] CrcTable2;
    private static UInt32[] CrcTable3;
    private static UInt32[] CrcTable4;
    private static UInt32[] CrcTable5;
    private static UInt32[] CrcTable6;
    private static UInt32[] CrcTable7;
    private static Crc32();
    public static UInt32 Update(UInt32 crc32, ReadOnlySpan`1<byte> span);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.Core.EnumExtensions : object {
    [ExtensionAttribute]
internal static string GetDescription(T enumValue);
}
public abstract class Microsoft.Azure.Cosmos.Core.Fault : object {
}
internal interface Microsoft.Azure.Cosmos.Core.IAsyncCacheEvents {
    public abstract virtual void OnEviction();
}
internal interface Microsoft.Azure.Cosmos.Core.IConfigurationProvider {
    public bool IsKeysSupported { get; }
    public IEnumerable`1<string> Keys { get; }
    public abstract virtual bool get_IsKeysSupported();
    public abstract virtual IEnumerable`1<string> get_Keys();
    public abstract virtual string GetValue(string key);
}
internal enum Microsoft.Azure.Cosmos.Core.Networking.PrivateSslProtocols : Enum {
    public int value__;
    public static PrivateSslProtocols None;
    public static PrivateSslProtocols Ssl2;
    public static PrivateSslProtocols Ssl3;
    public static PrivateSslProtocols Tls;
    public static PrivateSslProtocols Default;
    public static PrivateSslProtocols Tls11;
    public static PrivateSslProtocols Tls12;
    public static PrivateSslProtocols Tls13;
}
public enum Microsoft.Azure.Cosmos.Core.Networking.PublicNetworkAccess : Enum {
    public int value__;
    public static PublicNetworkAccess Enabled;
    public static PublicNetworkAccess Disabled;
}
internal class Microsoft.Azure.Cosmos.Core.Networking.TransportLayerSecurity : ValueType {
    internal static int ServerSsl2;
    internal static int ClientSsl2;
    internal static int Ssl2;
    internal static int ServerSsl3;
    internal static int ClientSsl3;
    internal static int Ssl3;
    internal static int ServerTls1;
    internal static int ClientTls1;
    internal static int Tls1;
    internal static int ServerTls11;
    internal static int ClientTls11;
    internal static int Tls11;
    internal static int ServerTls12;
    internal static int ClientTls12;
    internal static int Tls12;
    internal static int ServerTls13;
    internal static int ClientTls13;
    internal static int Tls13;
    [CompilerGeneratedAttribute]
private PrivateSslProtocols <Protocol>k__BackingField;
    internal PrivateSslProtocols Protocol { get; }
    public TransportLayerSecurity(UInt32 protocol);
    public TransportLayerSecurity(SslProtocols protocol);
    public TransportLayerSecurity(PrivateSslProtocols protocol);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal PrivateSslProtocols get_Protocol();
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Core.Outcome`1 : ValueType {
    private T result;
    private Fault fault;
    public bool IsFaulted { get; }
    public T Result { get; }
    public Fault Fault { get; }
    private Outcome`1(T result, Fault fault);
    public bool get_IsFaulted();
    public T get_Result();
    public Fault get_Fault();
    public static Outcome`1<T> FromResult(T result);
    public static Outcome`1<T> FromFault(Fault fault);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Azure.Cosmos.Core.ResourceStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentIsNullOrEmpty { get; }
    internal static string ParameterOutOfBounds { get; }
    internal static string StringIsNotGuid { get; }
    internal static string StringIsNullOrEmptyOrWhiteSpace { get; }
    internal static string StringIsNullOrEmpty { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentIsNullOrEmpty();
    internal static string get_ParameterOutOfBounds();
    internal static string get_StringIsNotGuid();
    internal static string get_StringIsNullOrEmptyOrWhiteSpace();
    internal static string get_StringIsNullOrEmpty();
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.Core.ServiceProviderExtensions : object {
    [ExtensionAttribute]
internal static int GetIntValue(IServiceProvider serviceProvider, string configurationPropertyName);
    [ExtensionAttribute]
internal static bool TryGetIntValue(IServiceProvider serviceProvider, string configurationPropertyName, Int32& result);
    [ExtensionAttribute]
internal static double GetDoubleValue(IServiceProvider serviceProvider, string configurationPropertyName);
    [ExtensionAttribute]
internal static bool TryGetDoubleValue(IServiceProvider serviceProvider, string configurationPropertyName, Double& result);
    [ExtensionAttribute]
internal static bool GetBoolValue(IServiceProvider serviceProvider, string configurationPropertyName);
    [ExtensionAttribute]
internal static bool GetOptionalBoolValue(IServiceProvider serviceProvider, string configurationPropertyName, bool defaultValue);
    [ExtensionAttribute]
internal static T GetEnumValue(IServiceProvider serviceProvider, string configurationPropertyName);
    [ExtensionAttribute]
internal static string GetValue(IServiceProvider serviceProvider, string configurationPropertyName);
    [ExtensionAttribute]
internal static bool TryGetStringValue(IServiceProvider serviceProvider, string configurationPropertyName, String& result);
    [ExtensionAttribute]
internal static String[] GetStringArrayValue(IServiceProvider serviceProvider, string configurationPropertyName, char separator);
    [ExtensionAttribute]
internal static bool TryGetStringArrayValue(IServiceProvider serviceProvider, string configurationPropertyName, String[]& result, char separator);
}
[ExtensionAttribute]
public static class Microsoft.Azure.Cosmos.Core.SpanExtensions : object {
    [ExtensionAttribute]
public static int Read(Stream stm, Span`1<byte> buffer);
    [ExtensionAttribute]
public static void Write(Stream stm, ReadOnlySpan`1<byte> buffer);
    [ExtensionAttribute]
public static Task WriteAsync(Stream stm, ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ReadAsync(Stream stm, Memory`1<byte> buffer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static string GetString(Encoding encoding, ReadOnlySpan`1<byte> src);
    [ExtensionAttribute]
public static int GetCharCount(Encoding encoding, ReadOnlySpan`1<byte> src);
    [ExtensionAttribute]
public static int GetBytes(Encoding encoding, ReadOnlySpan`1<char> src, Span`1<byte> dst);
    [ExtensionAttribute]
public static void NextBytes(Random rand, Span`1<byte> buffer);
}
[ExtensionAttribute]
public static class Microsoft.Azure.Cosmos.Core.SpanHexExtensions : object {
    private static Byte[] DecodeTable;
    private static UInt32[] EncodeTable;
    private static SpanHexExtensions();
    [ExtensionAttribute]
public static string ToHexString(ReadOnlySpan`1<byte> bytes);
    [ExtensionAttribute]
public static bool TryParseHexString(ReadOnlySpan`1<char> hexChars, Byte[]& result);
    [ExtensionAttribute]
public static bool TryParseHexString(ReadOnlySpan`1<char> hexChars, Span`1<byte> result);
    private static UInt32[] Initialize();
}
internal class Microsoft.Azure.Cosmos.Core.SyncCache`1 : object {
    private long timeToLiveInStopwatchTicks;
    private Func`1<TValue> valueInitFunc;
    private long futureRefreshTimestampInStopwatchTicks;
    private TValue value;
    public SyncCache`1(int refreshIntervalInMilliseconds, Func`1<TValue> valueInitFunc);
    public TValue GetValue();
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Cosmos.Core.TaskFactoryExtensions : object {
    [ExtensionAttribute]
public static Task StartNewOnCurrentTaskSchedulerAsync(TaskFactory taskFactory, Action action);
    [ExtensionAttribute]
public static Task StartNewOnCurrentTaskSchedulerAsync(TaskFactory taskFactory, Action action, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task StartNewOnCurrentTaskSchedulerAsync(TaskFactory taskFactory, Action action, TaskCreationOptions creationOptions);
    [ExtensionAttribute]
public static Task`1<TResult> StartNewOnCurrentTaskSchedulerAsync(TaskFactory taskFactory, Func`1<TResult> function);
    [ExtensionAttribute]
public static Task`1<TResult> StartNewOnCurrentTaskSchedulerAsync(TaskFactory taskFactory, Func`1<TResult> function, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> StartNewOnCurrentTaskSchedulerAsync(TaskFactory taskFactory, Func`1<TResult> function, TaskCreationOptions creationOptions);
}
internal class Microsoft.Azure.Cosmos.Core.Utf8.Utf16LittleEndianCodePointEnumerator : ValueType {
    private string str;
    private int index;
    private UInt32 codePoint;
    private bool hasValue;
    public UInt32 Current { get; }
    public Utf16LittleEndianCodePointEnumerator(string str);
    public UInt32 get_Current();
    public bool MoveNext();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class Microsoft.Azure.Cosmos.Core.Utf8.Utf8CodePointEnumerator : ValueType {
    private ReadOnlySpan`1<byte> utf8Bytes;
    private int index;
    private UInt32 codePoint;
    private bool hasValue;
    public UInt32 Current { get; }
    public Utf8CodePointEnumerator(ReadOnlySpan`1<byte> utf8Bytes);
    public UInt32 get_Current();
    public bool MoveNext();
}
internal static class Microsoft.Azure.Cosmos.Core.Utf8.Utf8Helper : object {
    public static int MaxCodeUnitsPerCodePoint;
    private static byte B0000_0111U;
    private static byte B0000_1111U;
    private static byte B0001_1111U;
    private static byte B0011_1111U;
    private static byte B1000_0000U;
    private static byte B1100_0000U;
    private static byte B1110_0000U;
    private static byte B1111_0000U;
    private static byte B1111_1000U;
    public static bool TryDecodeCodePoint(ReadOnlySpan`1<byte> utf8, int index, UInt32& codePoint, Int32& bytesConsumed);
    public static bool TryDecodeCodePointFromString(string s, int index, UInt32& codePoint, Int32& encodedChars);
    private static int GetEncodedBytes(byte b);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{ToString()}")]
public class Microsoft.Azure.Cosmos.Core.Utf8.Utf8Span : ValueType {
    private ReadOnlySpan`1<byte> buffer;
    public static Utf8Span Empty { get; }
    public ReadOnlySpan`1<byte> Span { get; }
    public int Length { get; }
    public bool IsEmpty { get; }
    private Utf8Span(ReadOnlySpan`1<byte> utf8Bytes);
    public static Utf8Span get_Empty();
    public static bool TryParseUtf8Bytes(ReadOnlySpan`1<byte> utf8Bytes, Utf8Span& span);
    public static Utf8Span UnsafeFromUtf8BytesNoValidation(ReadOnlySpan`1<byte> utf8Bytes);
    public static Utf8Span TranscodeUtf16(string utf16String);
    public ReadOnlySpan`1<byte> get_Span();
    public int get_Length();
    public bool get_IsEmpty();
    public Utf8CodePointEnumerator GetEnumerator();
    public virtual string ToString();
    public bool ReferenceEquals(Utf8Span other);
    public bool Equals(Utf8Span other);
    public bool Equals(string other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Utf8Span left, Utf8Span right);
    public static bool op_Inequality(Utf8Span left, Utf8Span right);
    public static bool op_Equality(Utf8Span left, string right);
    public static bool op_Inequality(Utf8Span left, string right);
    public static bool op_Equality(string left, Utf8Span right);
    public static bool op_Inequality(string left, Utf8Span right);
    public static bool op_LessThan(Utf8Span left, Utf8Span right);
    public static bool op_LessThanOrEqual(Utf8Span left, Utf8Span right);
    public static bool op_GreaterThan(Utf8Span left, Utf8Span right);
    public static bool op_GreaterThanOrEqual(Utf8Span left, Utf8Span right);
    public static bool op_LessThan(Utf8Span left, string right);
    public static bool op_LessThanOrEqual(Utf8Span left, string right);
    public static bool op_GreaterThan(Utf8Span left, string right);
    public static bool op_GreaterThanOrEqual(Utf8Span left, string right);
    public static bool op_LessThan(string left, Utf8Span right);
    public static bool op_LessThanOrEqual(string left, Utf8Span right);
    public static bool op_GreaterThan(string left, Utf8Span right);
    public static bool op_GreaterThanOrEqual(string left, Utf8Span right);
    public int CompareTo(Utf8Span other);
    public int CompareTo(string other);
    public bool StartsWith(Utf8Span pattern);
    public bool EndsWith(Utf8Span pattern);
    public bool Contains(Utf8Span pattern);
    public bool TrySplitFirst(Utf8Span pattern, Utf8Span& left, Utf8Span& right);
}
[DebuggerDisplayAttribute("{ToString()}")]
public class Microsoft.Azure.Cosmos.Core.Utf8.Utf8String : object {
    private ReadOnlyMemory`1<byte> buffer;
    public static Utf8String Empty;
    public ReadOnlyMemory`1<byte> Memory { get; }
    public Utf8Span Span { get; }
    public int Length { get; }
    public bool IsEmpty { get; }
    private Utf8String(ReadOnlyMemory`1<byte> utf8Bytes);
    private static Utf8String();
    public ReadOnlyMemory`1<byte> get_Memory();
    public Utf8Span get_Span();
    public int get_Length();
    public bool get_IsEmpty();
    public static bool TryParseUtf8Bytes(ReadOnlyMemory`1<byte> utf8Bytes, Utf8String& str);
    public static Utf8String UnsafeFromUtf8BytesNoValidation(ReadOnlyMemory`1<byte> utf8Bytes);
    public static Utf8String CopyFrom(Utf8Span span);
    public static Utf8String TranscodeUtf16(string utf16String);
    public static Utf8Span op_Implicit(Utf8String utf8String);
    public static UtfAnyString op_Implicit(Utf8String utf8String);
    public static bool op_Equality(Utf8String left, Utf8String right);
    public static bool op_Inequality(Utf8String left, Utf8String right);
    public static bool op_LessThan(Utf8String left, Utf8String right);
    public static bool op_LessThanOrEqual(Utf8String left, Utf8String right);
    public static bool op_GreaterThan(Utf8String left, Utf8String right);
    public static bool op_GreaterThanOrEqual(Utf8String left, Utf8String right);
    public static bool op_LessThan(Utf8String left, string right);
    public static bool op_LessThanOrEqual(Utf8String left, string right);
    public static bool op_GreaterThan(Utf8String left, string right);
    public static bool op_GreaterThanOrEqual(Utf8String left, string right);
    public static bool op_LessThan(string left, Utf8String right);
    public static bool op_LessThanOrEqual(string left, Utf8String right);
    public static bool op_GreaterThan(string left, Utf8String right);
    public static bool op_GreaterThanOrEqual(string left, Utf8String right);
    public Utf8CodePointEnumerator GetEnumerator();
    public virtual string ToString();
    public bool Equals(Utf8Span other);
    public sealed virtual bool Equals(Utf8String other);
    public sealed virtual bool Equals(string other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(Utf8String other);
    public sealed virtual int CompareTo(string other);
    public bool TrySplitFirst(Utf8Span pattern, Utf8String& left, Utf8String& right);
    public bool TryTrimLeft(Utf8Span pattern, Utf8String& output);
    public bool TryTrimRight(Utf8Span pattern, Utf8String& output);
    public bool TryTrim(Utf8Span leftPattern, Utf8Span rightPattern, Utf8String& output);
    public static bool IsNullOrEmpty(Utf8String utf8String);
}
internal static class Microsoft.Azure.Cosmos.Core.Utf8.Utf8Util : object {
    internal static bool IsInRangeInclusive(UInt32 value, UInt32 lowerBound, UInt32 upperBound);
    private static int ConvertIntPtrToInt32WithoutOverflowCheck(IntPtr value);
    private static UInt32 CountNumberOfLeadingAsciiBytesFrom24BitInteger(UInt32 value);
    private static bool DWordAllBytesAreAscii(UInt32 value);
    private static bool DWordBeginsAndEndsWithUtf8TwoByteMask(UInt32 value);
    private static bool DWordBeginsWithOverlongUtf8TwoByteSequence(UInt32 value);
    private static bool DWordBeginsWithUtf8FourByteMask(UInt32 value);
    private static bool DWordBeginsWithUtf8ThreeByteMask(UInt32 value);
    private static bool DWordBeginsWithUtf8TwoByteMask(UInt32 value);
    private static bool DWordEndsWithOverlongUtf8TwoByteSequence(UInt32 value);
    private static bool DWordEndsWithUtf8TwoByteMask(UInt32 value);
    private static bool DWordBeginsWithValidUtf8TwoByteSequenceLittleEndian(UInt32 value);
    private static bool DWordEndsWithValidUtf8TwoByteSequenceLittleEndian(UInt32 value);
    private static bool DWordFourthByteIsAscii(UInt32 value);
    private static bool DWordThirdByteIsAscii(UInt32 value);
    private static int GetNumberOfBytesToNextDWordAlignment(Byte& ref);
    private static bool IntPtrIsLessThanOrEqualTo(IntPtr a, IntPtr b);
    private static bool IsUtf8ContinuationByte(UInt32 value);
    private static UInt32 ReadAndFoldTwoDWordsUnaligned(Byte& buffer);
    private static ulong ReadAndFoldTwoQWordsUnaligned(Byte& buffer);
    private static UInt32 ROL32(UInt32 value, int shift);
    private static bool QWordAllBytesAreAscii(ulong value);
    internal static int GetIndexOfFirstInvalidUtf8Sequence(ReadOnlySpan`1<byte> input, Int32& scalarCount, Int32& surrogatePairCount);
    private static IntPtr ConsumeAsciiBytesVectorized(Byte& buffer, int length);
    private static int GetIndexOfFirstInvalidUtf8Sequence(Byte& inputBuffer, int inputLength, Int32& scalarCount, Int32& surrogatePairCount);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{ToString()}")]
public class Microsoft.Azure.Cosmos.Core.Utf8.UtfAnyString : ValueType {
    private object buffer;
    public static UtfAnyString Empty { get; }
    public bool IsUtf8 { get; }
    public bool IsUtf16 { get; }
    public bool IsNull { get; }
    public bool IsEmpty { get; }
    public UtfAnyString(string utf16String);
    public UtfAnyString(Utf8String utf8String);
    public static UtfAnyString get_Empty();
    public bool get_IsUtf8();
    public bool get_IsUtf16();
    public bool get_IsNull();
    public bool get_IsEmpty();
    public static UtfAnyString op_Implicit(string utf16String);
    public static string op_Implicit(UtfAnyString str);
    public virtual string ToString();
    public Utf8String ToUtf8String();
    public bool ReferenceEquals(UtfAnyString other);
    public sealed virtual bool Equals(UtfAnyString other);
    public bool Equals(Utf8Span other);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Utf8String other);
    public sealed virtual bool Equals(string other);
    public static bool op_Equality(UtfAnyString left, UtfAnyString right);
    public static bool op_Inequality(UtfAnyString left, UtfAnyString right);
    public static bool op_Equality(UtfAnyString left, string right);
    public static bool op_Inequality(UtfAnyString left, string right);
    public static bool op_Equality(string left, UtfAnyString right);
    public static bool op_Inequality(string left, UtfAnyString right);
    public static bool op_Equality(UtfAnyString left, Utf8String right);
    public static bool op_Inequality(UtfAnyString left, Utf8String right);
    public static bool op_Equality(Utf8String left, UtfAnyString right);
    public static bool op_Inequality(Utf8String left, UtfAnyString right);
    public static bool op_Equality(UtfAnyString left, Utf8Span right);
    public static bool op_Inequality(UtfAnyString left, Utf8Span right);
    public static bool op_Equality(Utf8Span left, UtfAnyString right);
    public static bool op_Inequality(Utf8Span left, UtfAnyString right);
    public virtual int GetHashCode();
    public static bool op_LessThan(UtfAnyString left, UtfAnyString right);
    public static bool op_LessThanOrEqual(UtfAnyString left, UtfAnyString right);
    public static bool op_GreaterThan(UtfAnyString left, UtfAnyString right);
    public static bool op_GreaterThanOrEqual(UtfAnyString left, UtfAnyString right);
    public static bool op_LessThan(UtfAnyString left, string right);
    public static bool op_LessThanOrEqual(UtfAnyString left, string right);
    public static bool op_GreaterThan(UtfAnyString left, string right);
    public static bool op_GreaterThanOrEqual(UtfAnyString left, string right);
    public static bool op_LessThan(string left, UtfAnyString right);
    public static bool op_LessThanOrEqual(string left, UtfAnyString right);
    public static bool op_GreaterThan(string left, UtfAnyString right);
    public static bool op_GreaterThanOrEqual(string left, UtfAnyString right);
    public static bool op_LessThan(UtfAnyString left, Utf8String right);
    public static bool op_LessThanOrEqual(UtfAnyString left, Utf8String right);
    public static bool op_GreaterThan(UtfAnyString left, Utf8String right);
    public static bool op_GreaterThanOrEqual(UtfAnyString left, Utf8String right);
    public static bool op_LessThan(Utf8String left, UtfAnyString right);
    public static bool op_LessThanOrEqual(Utf8String left, UtfAnyString right);
    public static bool op_GreaterThan(Utf8String left, UtfAnyString right);
    public static bool op_GreaterThanOrEqual(Utf8String left, UtfAnyString right);
    public static bool op_LessThan(UtfAnyString left, Utf8Span right);
    public static bool op_LessThanOrEqual(UtfAnyString left, Utf8Span right);
    public static bool op_GreaterThan(UtfAnyString left, Utf8Span right);
    public static bool op_GreaterThanOrEqual(UtfAnyString left, Utf8Span right);
    public static bool op_LessThan(Utf8Span left, UtfAnyString right);
    public static bool op_LessThanOrEqual(Utf8Span left, UtfAnyString right);
    public static bool op_GreaterThan(Utf8Span left, UtfAnyString right);
    public static bool op_GreaterThanOrEqual(Utf8Span left, UtfAnyString right);
    public sealed virtual int CompareTo(UtfAnyString other);
    public sealed virtual int CompareTo(Utf8String other);
    public int CompareTo(Utf8Span other);
    public sealed virtual int CompareTo(string other);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
