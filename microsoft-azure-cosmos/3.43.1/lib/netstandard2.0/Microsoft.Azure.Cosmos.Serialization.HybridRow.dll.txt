internal static class AssemblyRef : object {
    internal static string ProductPublicKey;
    internal static string TestPublicKey;
    internal static string MoqPublicKey;
    internal static string FakesPublicKey;
}
internal static class AssemblyVersionInfo : object {
    public static string AssemblyFileVersionString;
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.DefaultSpanResizer`1 : object {
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static DefaultSpanResizer`1<T> Default;
    private static DefaultSpanResizer`1();
    public sealed virtual Span`1<T> Resize(int minimumLength, Span`1<T> buffer);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Low,High}")]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Float128 : ValueType {
    public static int Size;
    public long Low;
    public long High;
    public Float128(long high, long low);
    public static bool op_Equality(Float128 left, Float128 right);
    public static bool op_Inequality(Float128 left, Float128 right);
    public sealed virtual bool Equals(Float128 other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.HybridRowHeader : ValueType {
    public static int Size;
    [CompilerGeneratedAttribute]
private HybridRowVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaId <SchemaId>k__BackingField;
    public HybridRowVersion Version { get; }
    public SchemaId SchemaId { get; }
    public HybridRowHeader(HybridRowVersion version, SchemaId schemaId);
    [CompilerGeneratedAttribute]
public HybridRowVersion get_Version();
    [CompilerGeneratedAttribute]
public SchemaId get_SchemaId();
}
public enum Microsoft.Azure.Cosmos.Serialization.HybridRow.HybridRowVersion : Enum {
    public byte value__;
    public static HybridRowVersion Invalid;
    public static HybridRowVersion V1;
}
internal static class Microsoft.Azure.Cosmos.Serialization.HybridRow.Internal.MurmurHash3 : object {
    public static ValueTuple`2<ulong, ulong> Hash128(string value, ValueTuple`2<ulong, ulong> seed);
    public static ValueTuple`2<ulong, ulong> Hash128(bool value, ValueTuple`2<ulong, ulong> seed);
    public static ValueTuple`2<ulong, ulong> Hash128(T value, ValueTuple`2<ulong, ulong> seed);
    public static ValueTuple`2<ulong, ulong> Hash128(ReadOnlySpan`1<byte> span, ValueTuple`2<ulong, ulong> seed);
    private static ulong Mix(ulong h);
    private static ulong RotateLeft64(ulong n, int numBits);
}
internal class Microsoft.Azure.Cosmos.Serialization.HybridRow.Internal.Utf8StringJsonConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public static class Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.HybridRowSerializer : object {
    public static EqualityReferenceResult EqualityReferenceCheck(T x, T y);
}
public interface Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.IHybridRowSerializer`1 {
    public IEqualityComparer`1<T> Comparer { get; }
    public abstract virtual IEqualityComparer`1<T> get_Comparer();
    public abstract virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, T value);
    public abstract virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, T& value);
}
public interface Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.IRowSerializable {
    public abstract virtual Result Write(RowWriter& writer, TypeArgument typeArg);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.RowReader : ValueType {
    private int schematizedCount;
    private ColumnView columns;
    private RowBuffer row;
    private States state;
    private int columnIndex;
    private RowCursor cursor;
    public int Length { get; }
    public HybridRowHeader Header { get; }
    public StorageKind Storage { get; }
    public LayoutType Type { get; }
    public TypeArgumentList TypeArgs { get; }
    public bool HasValue { get; }
    public UtfAnyString Path { get; }
    public Utf8Span PathSpan { get; }
    public int Index { get; }
    private RowReader(RowBuffer& row, RowCursor& scope);
    public RowReader(RowBuffer& row);
    public RowReader(ReadOnlyMemory`1<byte> buffer, HybridRowVersion version, LayoutResolver resolver);
    public RowReader(ReadOnlyMemory`1<byte> buffer, HybridRowVersion version, LayoutResolver resolver, Checkpoint& checkpoint);
    public RowReader(RowBuffer& row, Checkpoint& checkpoint);
    public int get_Length();
    public HybridRowHeader get_Header();
    public StorageKind get_Storage();
    public LayoutType get_Type();
    public TypeArgumentList get_TypeArgs();
    public bool get_HasValue();
    public UtfAnyString get_Path();
    public Utf8Span get_PathSpan();
    public int get_Index();
    public Checkpoint SaveCheckpoint();
    public bool Read();
    public Result ReadBool(Boolean& value);
    public Result ReadNull(NullValue& value);
    public Result ReadInt8(SByte& value);
    public Result ReadInt16(Int16& value);
    public Result ReadInt32(Int32& value);
    public Result ReadInt64(Int64& value);
    public Result ReadUInt8(Byte& value);
    public Result ReadUInt16(UInt16& value);
    public Result ReadUInt32(UInt32& value);
    public Result ReadUInt64(UInt64& value);
    public Result ReadVarInt(Int64& value);
    public Result ReadVarUInt(UInt64& value);
    public Result ReadFloat32(Single& value);
    public Result ReadFloat64(Double& value);
    public Result ReadFloat128(Float128& value);
    public Result ReadDecimal(Decimal& value);
    public Result ReadDateTime(DateTime& value);
    public Result ReadUnixDateTime(UnixDateTime& value);
    public Result ReadGuid(Guid& value);
    public Result ReadMongoDbObjectId(MongoDbObjectId& value);
    public Result ReadString(String& value);
    public Result ReadString(Utf8String& value);
    public Result ReadString(Utf8Span& value);
    public Result ReadBinary(Byte[]& value);
    public Result ReadBinary(ReadOnlySpan`1& value);
    public RowReader ReadScope();
    public Result ReadScope(T& value);
    public Result ReadScope(TContext context, ReaderFunc`1<TContext> func);
    public Result SkipScope(RowReader& nestedReader);
    private Result ReadPrimitiveValue(TValue& value);
    private Result ReadPrimitiveValue(Utf8Span& value);
    private Result ReadPrimitiveValue(ReadOnlySpan`1& value);
}
[ExtensionAttribute]
public static class Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.RowReaderExtensions : object {
    [ExtensionAttribute]
public static Result ReadList(RowReader& reader, DeserializerFunc`1<TItem> deserializer, List`1& list);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.RowWriter : ValueType {
    private RowBuffer row;
    private RowCursor cursor;
    public LayoutResolver Resolver { get; }
    public int Length { get; }
    public Layout Layout { get; }
    private RowWriter(RowBuffer& row, RowCursor& scope);
    public LayoutResolver get_Resolver();
    public int get_Length();
    public Layout get_Layout();
    public static Result WriteBuffer(RowBuffer& row, TContext context, WriterFunc`1<TContext> func);
    public Result WriteBool(UtfAnyString path, bool value);
    public Result WriteNull(UtfAnyString path);
    public Result WriteInt8(UtfAnyString path, sbyte value);
    public Result WriteInt16(UtfAnyString path, short value);
    public Result WriteInt32(UtfAnyString path, int value);
    public Result WriteInt64(UtfAnyString path, long value);
    public Result WriteUInt8(UtfAnyString path, byte value);
    public Result WriteUInt16(UtfAnyString path, ushort value);
    public Result WriteUInt32(UtfAnyString path, UInt32 value);
    public Result WriteUInt64(UtfAnyString path, ulong value);
    public Result WriteVarInt(UtfAnyString path, long value);
    public Result WriteVarUInt(UtfAnyString path, ulong value);
    public Result WriteFloat32(UtfAnyString path, float value);
    public Result WriteFloat64(UtfAnyString path, double value);
    public Result WriteFloat128(UtfAnyString path, Float128 value);
    public Result WriteDecimal(UtfAnyString path, decimal value);
    public Result WriteDateTime(UtfAnyString path, DateTime value);
    public Result WriteUnixDateTime(UtfAnyString path, UnixDateTime value);
    public Result WriteGuid(UtfAnyString path, Guid value);
    public Result WriteMongoDbObjectId(UtfAnyString path, MongoDbObjectId value);
    public Result WriteString(UtfAnyString path, string value);
    public Result WriteString(UtfAnyString path, Utf8Span value);
    public Result WriteBinary(UtfAnyString path, Byte[] value);
    public Result WriteBinary(UtfAnyString path, ReadOnlySpan`1<byte> value);
    public Result WriteBinary(UtfAnyString path, ReadOnlySequence`1<byte> value);
    public Result WriteScope(UtfAnyString path, TypeArgument typeArg, T value);
    public Result WriteScope(UtfAnyString path, TypeArgument typeArg, TContext context, WriterFunc`1<TContext> func);
    private Result WritePrimitive(UtfAnyString path, TValue value, LayoutType`1<TValue> type, AccessMethod`1<TValue> sparse);
    private Result WritePrimitive(UtfAnyString path, Utf8Span value, TLayoutType type, AccessUtf8SpanMethod sparse);
    private Result WritePrimitive(UtfAnyString path, ReadOnlySpan`1<TElement> value, TLayoutType type, AccessReadOnlySpanMethod`1<TElement> sparse);
    private Result WritePrimitive(UtfAnyString path, ReadOnlySequence`1<TElement> value, TLayoutType type, AccessMethod`1<ReadOnlySequence`1<TElement>> sparse);
    private Result PrepareSparseWrite(UtfAnyString path, TypeArgument typeArg);
    private Result WriteSchematizedValue(UtfAnyString path, TValue value);
    private Result WriteSchematizedValue(UtfAnyString path, Utf8Span value);
    private Result WriteSchematizedValue(UtfAnyString path, ReadOnlySpan`1<TElement> value);
    private Result WriteSchematizedValue(UtfAnyString path, ReadOnlySequence`1<TElement> value);
}
public interface Microsoft.Azure.Cosmos.Serialization.HybridRow.ISpanResizer`1 {
    public abstract virtual Span`1<T> Resize(int minimumLength, Span`1<T> buffer);
}
public interface Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.ILayoutSequenceWritable`1 {
    public abstract virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, ReadOnlySequence`1<TElement> value);
    public abstract virtual Result WriteVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, ReadOnlySequence`1<TElement> value);
    public abstract virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, ReadOnlySequence`1<TElement> value, UpdateOptions options);
}
public interface Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.ILayoutSpanReadable`1 {
    public abstract virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, ReadOnlySpan`1& value);
    public abstract virtual Result ReadVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, ReadOnlySpan`1& value);
    public abstract virtual Result ReadSparse(RowBuffer& b, RowCursor& scope, ReadOnlySpan`1& value);
}
public interface Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.ILayoutSpanWritable`1 {
    public abstract virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, ReadOnlySpan`1<TElement> value);
    public abstract virtual Result WriteVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, ReadOnlySpan`1<TElement> value);
    public abstract virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, ReadOnlySpan`1<TElement> value, UpdateOptions options);
}
public interface Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.ILayoutType {
}
public interface Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.ILayoutUtf8SpanReadable {
    public abstract virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Utf8Span& value);
    public abstract virtual Result ReadVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, Utf8Span& value);
    public abstract virtual Result ReadSparse(RowBuffer& b, RowCursor& scope, Utf8Span& value);
}
public interface Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.ILayoutUtf8SpanWritable {
    public abstract virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Utf8Span value);
    public abstract virtual Result WriteVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, Utf8Span value);
    public abstract virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, Utf8Span value, UpdateOptions options);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.Layout : object {
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static Layout Empty;
    private LayoutColumn[] topColumns;
    private Dictionary`2<Utf8String, LayoutColumn> pathMap;
    private Dictionary`2<string, LayoutColumn> pathStringMap;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaId <SchemaId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumBitmaskBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumFixed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumVariable>k__BackingField;
    [CompilerGeneratedAttribute]
private StringTokenizer <Tokenizer>k__BackingField;
    public string Name { get; }
    public SchemaId SchemaId { get; }
    public ColumnView Columns { get; }
    public int Size { get; }
    public int NumBitmaskBytes { get; }
    public int NumFixed { get; }
    public int NumVariable { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1822:MarkMembersAsStatic")]
public StringTokenizer Tokenizer { get; }
    internal Layout(string name, SchemaId schemaId, int numBitmaskBytes, int minRequiredSize, List`1<LayoutColumn> columns);
    private static Layout();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public SchemaId get_SchemaId();
    public ColumnView get_Columns();
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public int get_NumBitmaskBytes();
    [CompilerGeneratedAttribute]
public int get_NumFixed();
    [CompilerGeneratedAttribute]
public int get_NumVariable();
    [CompilerGeneratedAttribute]
public StringTokenizer get_Tokenizer();
    public bool TryFind(UtfAnyString path, LayoutColumn& column);
    public bool TryFind(string path, LayoutColumn& column);
    public virtual string ToString();
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutArray : LayoutIndexedScope {
    [CompilerGeneratedAttribute]
private TypeArgument <TypeArg>k__BackingField;
    public string Name { get; }
    internal TypeArgument TypeArg { get; }
    internal LayoutArray(bool immutable);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
internal TypeArgument get_TypeArg();
    public virtual Result WriteScope(RowBuffer& b, RowCursor& edit, TypeArgumentList typeArgs, RowCursor& value, UpdateOptions options);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutBinary : LayoutType`1<Byte[]> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Byte[] value);
    public sealed virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, ReadOnlySpan`1<byte> value);
    public sealed virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, ReadOnlySequence`1<byte> value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Byte[]& value);
    public sealed virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, ReadOnlySpan`1& value);
    public virtual Result WriteVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, Byte[] value);
    public sealed virtual Result WriteVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, ReadOnlySpan`1<byte> value);
    public sealed virtual Result WriteVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, ReadOnlySequence`1<byte> value);
    public virtual Result ReadVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, Byte[]& value);
    public sealed virtual Result ReadVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, ReadOnlySpan`1& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, Byte[] value, UpdateOptions options);
    public sealed virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, ReadOnlySpan`1<byte> value, UpdateOptions options);
    public sealed virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, ReadOnlySequence`1<byte> value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, Byte[]& value);
    public sealed virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, ReadOnlySpan`1& value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutBit : ValueType {
    public static LayoutBit Invalid;
    private int index;
    public bool IsInvalid { get; }
    public int Index { get; }
    internal LayoutBit(int index);
    private static LayoutBit();
    public bool get_IsInvalid();
    public int get_Index();
    public static bool op_Equality(LayoutBit left, LayoutBit right);
    public static bool op_Inequality(LayoutBit left, LayoutBit right);
    public int GetOffset(int offset);
    public int GetBit();
    public virtual bool Equals(object other);
    public sealed virtual bool Equals(LayoutBit other);
    public virtual int GetHashCode();
    internal static int DivCeiling(int numerator, int divisor);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutBoolean : LayoutType`1<bool> {
    public string Name { get; }
    public bool IsFixed { get; }
    public bool IsBool { get; }
    internal LayoutBoolean(bool value);
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual bool get_IsBool();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, bool value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Boolean& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, bool value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, Boolean& value);
}
internal class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutBuilder : object {
    private string name;
    private SchemaId schemaId;
    private Allocator bitallocator;
    private List`1<LayoutColumn> fixedColumns;
    private int fixedCount;
    private int fixedSize;
    private List`1<LayoutColumn> varColumns;
    private int varCount;
    private List`1<LayoutColumn> sparseColumns;
    private int sparseCount;
    private Stack`1<LayoutColumn> scope;
    private LayoutColumn Parent { get; }
    public LayoutBuilder(string name, SchemaId schemaId);
    private LayoutColumn get_Parent();
    public void AddFixedColumn(string path, LayoutType type, bool nullable, int length);
    public void AddVariableColumn(string path, LayoutType type, int length);
    public void AddSparseColumn(string path, LayoutType type);
    public void AddObjectScope(string path, LayoutType type);
    public void EndObjectScope();
    public void AddTypedScope(string path, LayoutType type, TypeArgumentList typeArgs);
    public Layout Build();
    private void Reset();
}
public enum Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutCode : Enum {
    public byte value__;
    public static LayoutCode Invalid;
    public static LayoutCode Null;
    public static LayoutCode BooleanFalse;
    public static LayoutCode Boolean;
    public static LayoutCode Int8;
    public static LayoutCode Int16;
    public static LayoutCode Int32;
    public static LayoutCode Int64;
    public static LayoutCode UInt8;
    public static LayoutCode UInt16;
    public static LayoutCode UInt32;
    public static LayoutCode UInt64;
    public static LayoutCode VarInt;
    public static LayoutCode VarUInt;
    public static LayoutCode Float32;
    public static LayoutCode Float64;
    public static LayoutCode Decimal;
    public static LayoutCode DateTime;
    public static LayoutCode Guid;
    public static LayoutCode Utf8;
    public static LayoutCode Binary;
    public static LayoutCode Float128;
    public static LayoutCode UnixDateTime;
    public static LayoutCode MongoDbObjectId;
    public static LayoutCode ObjectScope;
    public static LayoutCode ImmutableObjectScope;
    public static LayoutCode ArrayScope;
    public static LayoutCode ImmutableArrayScope;
    public static LayoutCode TypedArrayScope;
    public static LayoutCode ImmutableTypedArrayScope;
    public static LayoutCode TupleScope;
    public static LayoutCode ImmutableTupleScope;
    public static LayoutCode TypedTupleScope;
    public static LayoutCode ImmutableTypedTupleScope;
    public static LayoutCode MapScope;
    public static LayoutCode ImmutableMapScope;
    public static LayoutCode TypedMapScope;
    public static LayoutCode ImmutableTypedMapScope;
    public static LayoutCode SetScope;
    public static LayoutCode ImmutableSetScope;
    public static LayoutCode TypedSetScope;
    public static LayoutCode ImmutableTypedSetScope;
    public static LayoutCode NullableScope;
    public static LayoutCode ImmutableNullableScope;
    public static LayoutCode TaggedScope;
    public static LayoutCode ImmutableTaggedScope;
    public static LayoutCode Tagged2Scope;
    public static LayoutCode ImmutableTagged2Scope;
    public static LayoutCode Schema;
    public static LayoutCode ImmutableSchema;
    public static LayoutCode EndScope;
}
internal static class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutCodeTraits : object {
    public static LayoutCode ClearImmutableBit(LayoutCode code);
    internal static bool AlwaysRequiresTypeCode(LayoutCode code);
    internal static LayoutCode Canonicalize(LayoutCode code);
}
[DebuggerDisplayAttribute("{FullPath + ": " + Type.Name + TypeArgs.ToString()}")]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutColumn : object {
    private int size;
    private Utf8String path;
    private Utf8String fullPath;
    private LayoutType type;
    private TypeArgument typeArg;
    private StorageKind storage;
    private LayoutColumn parent;
    private TypeArgumentList typeArgs;
    private LayoutBit nullBit;
    private LayoutBit boolBit;
    private int index;
    private int offset;
    public Utf8String Path { get; }
    public Utf8String FullPath { get; }
    public LayoutType Type { get; }
    public StorageKind Storage { get; }
    public LayoutColumn Parent { get; }
    public TypeArgument TypeArg { get; }
    public TypeArgumentList TypeArgs { get; }
    public int Index { get; }
    public int Offset { get; }
    public LayoutBit NullBit { get; }
    public LayoutBit BoolBit { get; }
    public int Size { get; }
    internal LayoutColumn(string path, LayoutType type, TypeArgumentList typeArgs, StorageKind storage, LayoutColumn parent, int index, int offset, LayoutBit nullBit, LayoutBit boolBit, int length);
    public Utf8String get_Path();
    public Utf8String get_FullPath();
    public LayoutType get_Type();
    public StorageKind get_Storage();
    public LayoutColumn get_Parent();
    public TypeArgument get_TypeArg();
    public TypeArgumentList get_TypeArgs();
    public int get_Index();
    public int get_Offset();
    public LayoutBit get_NullBit();
    public LayoutBit get_BoolBit();
    public int get_Size();
    [DebuggerHiddenAttribute]
public T TypeAs();
    internal void SetIndex(int index);
    internal void SetOffset(int offset);
    private static string GetFullPath(LayoutColumn parent, string path);
}
[ExcludeFromCodeCoverageAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutCompilationException : Exception {
    public LayoutCompilationException(string message);
    public LayoutCompilationException(string message, Exception innerException);
    private LayoutCompilationException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutCompiler : object {
    private static string BasePropertyName;
    public static Layout Compile(Namespace ns, Schema schema);
    private static void AddBase(LayoutBuilder builder, Namespace ns, Schema s);
    private static void AddProperties(LayoutBuilder builder, SchemaLanguageVersion v, Namespace ns, LayoutCode scope, List`1<Property> properties);
    private static LayoutType LogicalToPhysicalType(SchemaLanguageVersion v, Namespace ns, PropertyType logicalType, TypeArgumentList& typeArgs);
    private static LayoutType PrimitiveToPhysicalType(TypeKind type);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutDateTime : LayoutType`1<DateTime> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, DateTime value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, DateTime& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, DateTime value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, DateTime& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutDecimal : LayoutType`1<decimal> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, decimal value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Decimal& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, decimal value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, Decimal& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutEndScope : LayoutScope {
    public string Name { get; }
    public virtual string get_Name();
    public virtual Result WriteScope(RowBuffer& b, RowCursor& scope, TypeArgumentList typeArgs, RowCursor& value, UpdateOptions options);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutFloat128 : LayoutType`1<Float128> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Float128 value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Float128& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, Float128 value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, Float128& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutFloat32 : LayoutType`1<float> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, float value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Single& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, float value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, Single& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutFloat64 : LayoutType`1<double> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, double value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Double& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, double value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, Double& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutGuid : LayoutType`1<Guid> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Guid value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Guid& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, Guid value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, Guid& value);
}
public abstract class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutIndexedScope : LayoutScope {
    protected LayoutIndexedScope(LayoutCode code, bool immutable, bool isSizedScope, bool isFixedArity, bool isUniqueScope, bool isTypedScope);
    internal virtual void ReadSparsePath(RowBuffer& row, RowCursor& edit);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutInt16 : LayoutType`1<short> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, short value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Int16& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, short value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, Int16& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutInt32 : LayoutType`1<int> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, int value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Int32& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, int value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, Int32& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutInt64 : LayoutType`1<long> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, long value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Int64& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, long value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, Int64& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutInt8 : LayoutType`1<sbyte> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, sbyte value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, SByte& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, sbyte value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, SByte& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutMongoDbObjectId : LayoutType`1<MongoDbObjectId> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, MongoDbObjectId value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, MongoDbObjectId& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, MongoDbObjectId value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, MongoDbObjectId& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutNull : LayoutType`1<NullValue> {
    public string Name { get; }
    public bool IsFixed { get; }
    public bool IsNull { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual bool get_IsNull();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, NullValue value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, NullValue& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, NullValue value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, NullValue& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutNullable : LayoutIndexedScope {
    public string Name { get; }
    internal LayoutNullable(bool immutable);
    public virtual string get_Name();
    public Result WriteScope(RowBuffer& b, RowCursor& edit, TypeArgumentList typeArgs, bool hasValue, RowCursor& value, UpdateOptions options);
    public virtual Result WriteScope(RowBuffer& b, RowCursor& edit, TypeArgumentList typeArgs, RowCursor& value, UpdateOptions options);
    public static Result HasValue(RowBuffer& b, RowCursor& scope);
    internal virtual bool HasImplicitTypeCode(RowCursor& edit);
    internal virtual void SetImplicitTypeCode(RowCursor& edit);
    internal virtual int CountTypeArgument(TypeArgumentList value);
    internal virtual int WriteTypeArgument(RowBuffer& row, int offset, TypeArgumentList value);
    internal virtual TypeArgumentList ReadTypeArgumentList(RowBuffer& row, int offset, Int32& lenInBytes);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutObject : LayoutPropertyScope {
    [CompilerGeneratedAttribute]
private TypeArgument <TypeArg>k__BackingField;
    public string Name { get; }
    internal TypeArgument TypeArg { get; }
    internal LayoutObject(bool immutable);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
internal TypeArgument get_TypeArg();
    public virtual Result WriteScope(RowBuffer& b, RowCursor& edit, TypeArgumentList typeArgs, RowCursor& value, UpdateOptions options);
}
public abstract class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutPropertyScope : LayoutScope {
    protected LayoutPropertyScope(LayoutCode code, bool immutable);
}
public abstract class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutResolver : object {
    public abstract virtual Layout Resolve(SchemaId schemaId);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutResolverNamespace : LayoutResolver {
    private ConcurrentDictionary`2<int, Layout> layoutCache;
    private LayoutResolver parent;
    private Namespace schemaNamespace;
    public Namespace Namespace { get; }
    public LayoutResolverNamespace(Namespace schemaNamespace, LayoutResolver parent);
    public Namespace get_Namespace();
    public virtual Layout Resolve(SchemaId schemaId);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutResolverSimple : LayoutResolver {
    private Func`2<SchemaId, Layout> resolver;
    public LayoutResolverSimple(Func`2<SchemaId, Layout> resolver);
    public virtual Layout Resolve(SchemaId schemaId);
}
public abstract class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutScope : LayoutType {
    internal bool IsUniqueScope;
    internal bool IsIndexedScope;
    internal bool IsSizedScope;
    internal bool IsFixedArity;
    internal bool IsTypedScope;
    public bool IsFixed { get; }
    protected LayoutScope(LayoutCode code, bool immutable, bool isSizedScope, bool isIndexedScope, bool isFixedArity, bool isUniqueScope, bool isTypedScope);
    public sealed virtual bool get_IsFixed();
    public Result ReadScope(RowBuffer& b, RowCursor& edit, RowCursor& value);
    public abstract virtual Result WriteScope(RowBuffer& b, RowCursor& scope, TypeArgumentList typeArgs, RowCursor& value, UpdateOptions options);
    public virtual Result WriteScope(RowBuffer& b, RowCursor& scope, TypeArgumentList typeArgs, TContext context, WriterFunc`1<TContext> func, UpdateOptions options);
    public Result DeleteScope(RowBuffer& b, RowCursor& edit);
    internal virtual bool HasImplicitTypeCode(RowCursor& edit);
    internal virtual void SetImplicitTypeCode(RowCursor& edit);
    internal virtual void ReadSparsePath(RowBuffer& row, RowCursor& edit);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutTagged : LayoutIndexedScope {
    public string Name { get; }
    internal LayoutTagged(bool immutable);
    public virtual string get_Name();
    public virtual Result WriteScope(RowBuffer& b, RowCursor& edit, TypeArgumentList typeArgs, RowCursor& value, UpdateOptions options);
    internal virtual bool HasImplicitTypeCode(RowCursor& edit);
    internal virtual void SetImplicitTypeCode(RowCursor& edit);
    internal virtual int CountTypeArgument(TypeArgumentList value);
    internal virtual int WriteTypeArgument(RowBuffer& row, int offset, TypeArgumentList value);
    internal virtual TypeArgumentList ReadTypeArgumentList(RowBuffer& row, int offset, Int32& lenInBytes);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutTagged2 : LayoutIndexedScope {
    public string Name { get; }
    internal LayoutTagged2(bool immutable);
    public virtual string get_Name();
    public virtual Result WriteScope(RowBuffer& b, RowCursor& edit, TypeArgumentList typeArgs, RowCursor& value, UpdateOptions options);
    internal virtual bool HasImplicitTypeCode(RowCursor& edit);
    internal virtual void SetImplicitTypeCode(RowCursor& edit);
    internal virtual int CountTypeArgument(TypeArgumentList value);
    internal virtual int WriteTypeArgument(RowBuffer& row, int offset, TypeArgumentList value);
    internal virtual TypeArgumentList ReadTypeArgumentList(RowBuffer& row, int offset, Int32& lenInBytes);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutTuple : LayoutIndexedScope {
    public string Name { get; }
    internal LayoutTuple(bool immutable);
    public virtual string get_Name();
    public virtual Result WriteScope(RowBuffer& b, RowCursor& edit, TypeArgumentList typeArgs, RowCursor& value, UpdateOptions options);
    internal virtual int CountTypeArgument(TypeArgumentList value);
    internal virtual int WriteTypeArgument(RowBuffer& row, int offset, TypeArgumentList value);
    internal virtual TypeArgumentList ReadTypeArgumentList(RowBuffer& row, int offset, Int32& lenInBytes);
}
[DebuggerDisplayAttribute("{Name}")]
public abstract class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutType : object {
    internal static int BitsPerByte;
    private static LayoutType[] CodeIndex;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutInt8 Int8;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutInt16 Int16;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutInt32 Int32;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutInt64 Int64;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutUInt8 UInt8;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutUInt16 UInt16;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutUInt32 UInt32;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutUInt64 UInt64;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutVarInt VarInt;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutVarUInt VarUInt;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutFloat32 Float32;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutFloat64 Float64;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutFloat128 Float128;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutDecimal Decimal;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutNull Null;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutBoolean Boolean;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutBoolean BooleanFalse;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutDateTime DateTime;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutUnixDateTime UnixDateTime;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutGuid Guid;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutMongoDbObjectId MongoDbObjectId;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutUtf8 Utf8;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutBinary Binary;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutObject Object;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutObject ImmutableObject;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutArray Array;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutArray ImmutableArray;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutTypedArray TypedArray;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutTypedArray ImmutableTypedArray;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutTypedSet TypedSet;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutTypedSet ImmutableTypedSet;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutTypedMap TypedMap;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutTypedMap ImmutableTypedMap;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutTuple Tuple;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutTuple ImmutableTuple;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutTypedTuple TypedTuple;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutTypedTuple ImmutableTypedTuple;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutTagged Tagged;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutTagged ImmutableTagged;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutTagged2 Tagged2;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutTagged2 ImmutableTagged2;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutNullable Nullable;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutNullable ImmutableNullable;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutUDT UDT;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static LayoutUDT ImmutableUDT;
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
internal static LayoutEndScope EndScope;
    public LayoutCode LayoutCode;
    public bool Immutable;
    public int Size;
    public string Name { get; }
    public bool IsFixed { get; }
    public bool AllowVariable { get; }
    public bool IsBool { get; }
    public bool IsNull { get; }
    public bool IsVarint { get; }
    internal LayoutType(LayoutCode code, bool immutable, int size);
    private static LayoutType();
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsFixed();
    public bool get_AllowVariable();
    public virtual bool get_IsBool();
    public virtual bool get_IsNull();
    public virtual bool get_IsVarint();
    [DebuggerHiddenAttribute]
public T TypeAs();
    internal static LayoutType FromCode(LayoutCode code);
    internal static Result PrepareSparseDelete(RowBuffer& b, RowCursor& edit, LayoutCode code);
    internal static Result PrepareSparseWrite(RowBuffer& b, RowCursor& edit, TypeArgument typeArg, UpdateOptions options);
    internal static Result PrepareSparseRead(RowBuffer& b, RowCursor& edit, LayoutCode code);
    internal static Result PrepareSparseMove(RowBuffer& b, RowCursor& destinationScope, LayoutScope destinationCode, TypeArgument elementType, RowCursor& srcEdit, UpdateOptions options, RowCursor& dstEdit);
    internal virtual int CountTypeArgument(TypeArgumentList value);
    internal virtual int WriteTypeArgument(RowBuffer& row, int offset, TypeArgumentList value);
    internal static TypeArgument ReadTypeArgument(RowBuffer& row, int offset, Int32& lenInBytes);
    internal virtual TypeArgumentList ReadTypeArgumentList(RowBuffer& row, int offset, Int32& lenInBytes);
}
public abstract class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutType`1 : LayoutType {
    private TypeArgument typeArg;
    internal TypeArgument TypeArg { get; }
    internal LayoutType`1(LayoutCode code, int size);
    internal TypeArgument get_TypeArg();
    public Result HasValue(RowBuffer& b, RowCursor& scope, LayoutColumn col);
    public abstract virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, T value);
    public abstract virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, T& value);
    public Result DeleteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col);
    public Result DeleteVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col);
    public virtual Result WriteVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, T value);
    public virtual Result ReadVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, T& value);
    public Result DeleteSparse(RowBuffer& b, RowCursor& edit);
    public abstract virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, T value, UpdateOptions options);
    public abstract virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, T& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutTypedArray : LayoutIndexedScope {
    public string Name { get; }
    internal LayoutTypedArray(bool immutable);
    public virtual string get_Name();
    public virtual Result WriteScope(RowBuffer& b, RowCursor& edit, TypeArgumentList typeArgs, RowCursor& value, UpdateOptions options);
    internal virtual bool HasImplicitTypeCode(RowCursor& edit);
    internal virtual void SetImplicitTypeCode(RowCursor& edit);
    internal virtual int CountTypeArgument(TypeArgumentList value);
    internal virtual int WriteTypeArgument(RowBuffer& row, int offset, TypeArgumentList value);
    internal virtual TypeArgumentList ReadTypeArgumentList(RowBuffer& row, int offset, Int32& lenInBytes);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutTypedMap : LayoutUniqueScope {
    public string Name { get; }
    internal LayoutTypedMap(bool immutable);
    public virtual string get_Name();
    public virtual TypeArgument FieldType(RowCursor& scope);
    public virtual Result WriteScope(RowBuffer& b, RowCursor& edit, TypeArgumentList typeArgs, RowCursor& value, UpdateOptions options);
    internal virtual bool HasImplicitTypeCode(RowCursor& edit);
    internal virtual void SetImplicitTypeCode(RowCursor& edit);
    internal virtual int CountTypeArgument(TypeArgumentList value);
    internal virtual int WriteTypeArgument(RowBuffer& row, int offset, TypeArgumentList value);
    internal virtual TypeArgumentList ReadTypeArgumentList(RowBuffer& row, int offset, Int32& lenInBytes);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutTypedSet : LayoutUniqueScope {
    public string Name { get; }
    internal LayoutTypedSet(bool immutable);
    public virtual string get_Name();
    public virtual TypeArgument FieldType(RowCursor& scope);
    public virtual Result WriteScope(RowBuffer& b, RowCursor& edit, TypeArgumentList typeArgs, RowCursor& value, UpdateOptions options);
    internal virtual bool HasImplicitTypeCode(RowCursor& edit);
    internal virtual void SetImplicitTypeCode(RowCursor& edit);
    internal virtual int CountTypeArgument(TypeArgumentList value);
    internal virtual int WriteTypeArgument(RowBuffer& row, int offset, TypeArgumentList value);
    internal virtual TypeArgumentList ReadTypeArgumentList(RowBuffer& row, int offset, Int32& lenInBytes);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutTypedTuple : LayoutIndexedScope {
    public string Name { get; }
    internal LayoutTypedTuple(bool immutable);
    public virtual string get_Name();
    public virtual Result WriteScope(RowBuffer& b, RowCursor& edit, TypeArgumentList typeArgs, RowCursor& value, UpdateOptions options);
    internal virtual bool HasImplicitTypeCode(RowCursor& edit);
    internal virtual void SetImplicitTypeCode(RowCursor& edit);
    internal virtual int CountTypeArgument(TypeArgumentList value);
    internal virtual int WriteTypeArgument(RowBuffer& row, int offset, TypeArgumentList value);
    internal virtual TypeArgumentList ReadTypeArgumentList(RowBuffer& row, int offset, Int32& lenInBytes);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutUDT : LayoutPropertyScope {
    public string Name { get; }
    internal LayoutUDT(bool immutable);
    public virtual string get_Name();
    public virtual Result WriteScope(RowBuffer& b, RowCursor& edit, TypeArgumentList typeArgs, RowCursor& value, UpdateOptions options);
    internal virtual int CountTypeArgument(TypeArgumentList value);
    internal virtual int WriteTypeArgument(RowBuffer& row, int offset, TypeArgumentList value);
    internal virtual TypeArgumentList ReadTypeArgumentList(RowBuffer& row, int offset, Int32& lenInBytes);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutUInt16 : LayoutType`1<ushort> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, ushort value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, UInt16& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, ushort value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, UInt16& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutUInt32 : LayoutType`1<UInt32> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, UInt32 value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, UInt32& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, UInt32 value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, UInt32& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutUInt64 : LayoutType`1<ulong> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, ulong value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, UInt64& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, ulong value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, UInt64& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutUInt8 : LayoutType`1<byte> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, byte value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Byte& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, byte value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, Byte& value);
}
public abstract class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutUniqueScope : LayoutIndexedScope {
    protected LayoutUniqueScope(LayoutCode code, bool immutable, bool isSizedScope, bool isTypedScope);
    public abstract virtual TypeArgument FieldType(RowCursor& scope);
    public virtual Result WriteScope(RowBuffer& b, RowCursor& scope, TypeArgumentList typeArgs, TContext context, WriterFunc`1<TContext> func, UpdateOptions options);
    public Result MoveField(RowBuffer& b, RowCursor& destinationScope, RowCursor& sourceEdit, UpdateOptions options);
    public Result Find(RowBuffer& b, RowCursor& scope, RowCursor& patternScope, RowCursor& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutUnixDateTime : LayoutType`1<UnixDateTime> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, UnixDateTime value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, UnixDateTime& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, UnixDateTime value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, UnixDateTime& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutUtf8 : LayoutType`1<string> {
    public string Name { get; }
    public bool IsFixed { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, string value);
    public sealed virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Utf8Span value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, String& value);
    public sealed virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Utf8Span& value);
    public virtual Result WriteVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, string value);
    public sealed virtual Result WriteVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, Utf8Span value);
    public virtual Result ReadVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, String& value);
    public sealed virtual Result ReadVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, Utf8Span& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, string value, UpdateOptions options);
    public sealed virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, Utf8Span value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, String& value);
    public sealed virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, Utf8Span& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutVarInt : LayoutType`1<long> {
    public string Name { get; }
    public bool IsFixed { get; }
    public bool IsVarint { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual bool get_IsVarint();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, long value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, Int64& value);
    public virtual Result WriteVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, long value);
    public virtual Result ReadVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, Int64& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, long value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, Int64& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.LayoutVarUInt : LayoutType`1<ulong> {
    public string Name { get; }
    public bool IsFixed { get; }
    public bool IsVarint { get; }
    public virtual string get_Name();
    public virtual bool get_IsFixed();
    public virtual bool get_IsVarint();
    public virtual Result WriteFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, ulong value);
    public virtual Result ReadFixed(RowBuffer& b, RowCursor& scope, LayoutColumn col, UInt64& value);
    public virtual Result WriteVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, ulong value);
    public virtual Result ReadVariable(RowBuffer& b, RowCursor& scope, LayoutColumn col, UInt64& value);
    public virtual Result WriteSparse(RowBuffer& b, RowCursor& edit, ulong value, UpdateOptions options);
    public virtual Result ReadSparse(RowBuffer& b, RowCursor& edit, UInt64& value);
}
internal class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.SamplingStringComparer : object {
    public static SamplingStringComparer Default;
    private static SamplingStringComparer();
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string obj);
}
internal class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.SamplingUtf8StringComparer : object {
    public static SamplingUtf8StringComparer Default;
    private static SamplingUtf8StringComparer();
    public sealed virtual bool Equals(Utf8String x, Utf8String y);
    public sealed virtual int GetHashCode(Utf8String obj);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.StringToken : ValueType {
    public ulong Id;
    public Byte[] Varint;
    public Utf8String Path;
    public bool IsNull { get; }
    public StringToken(ulong id, Utf8String path);
    public bool get_IsNull();
    private static int Write7BitEncodedUInt(Span`1<byte> buffer, ulong value);
    private static int Count7BitEncodedUInt(ulong value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.StringTokenizer : object {
    private Dictionary`2<Utf8String, StringToken> tokens;
    private Dictionary`2<string, StringToken> stringTokens;
    private List`1<Utf8String> strings;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public bool TryFindToken(UtfAnyString path, StringToken& token);
    public bool TryFindString(ulong token, Utf8String& path);
    internal StringToken Add(Utf8String path);
    private StringToken AllocateToken(Utf8String path);
}
public static class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.SystemSchema : object {
    public static SchemaId EmptySchemaId;
    public static LayoutResolver LayoutResolver { get; }
    private static SystemSchema();
    public static LayoutResolver get_LayoutResolver();
    public static Namespace GetNamespace();
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{this.type == null ? null : ToString()}")]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.TypeArgument : ValueType {
    private LayoutType type;
    private TypeArgumentList typeArgs;
    public LayoutType Type { get; }
    public TypeArgumentList TypeArgs { get; }
    public TypeArgument(LayoutType type);
    public TypeArgument(LayoutType type, TypeArgumentList typeArgs);
    public LayoutType get_Type();
    public TypeArgumentList get_TypeArgs();
    public static bool op_Equality(TypeArgument left, TypeArgument right);
    public static bool op_Inequality(TypeArgument left, TypeArgument right);
    [DebuggerHiddenAttribute]
public T TypeAs();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(TypeArgument other);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{this.args == null ? null : ToString()}")]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.TypeArgumentList : ValueType {
    public static TypeArgumentList Empty;
    private TypeArgument[] args;
    private SchemaId schemaId;
    public int Count { get; }
    public SchemaId SchemaId { get; }
    public TypeArgument Item { get; }
    public TypeArgumentList(TypeArgument[] args);
    public TypeArgumentList(SchemaId schemaId);
    private static TypeArgumentList();
    public int get_Count();
    public SchemaId get_SchemaId();
    public TypeArgument get_Item(int i);
    [SuppressMessageAttribute("Usage", "CA2225:Operator overloads have named alternates")]
public static TypeArgumentList op_Implicit(SchemaId schemaId);
    public static bool op_Equality(TypeArgumentList left, TypeArgumentList right);
    public static bool op_Inequality(TypeArgumentList left, TypeArgumentList right);
    public Enumerator GetEnumerator();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(TypeArgumentList other);
}
public enum Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts.UpdateOptions : Enum {
    public int value__;
    public static UpdateOptions None;
    public static UpdateOptions Update;
    public static UpdateOptions Insert;
    public static UpdateOptions Upsert;
    public static UpdateOptions InsertAt;
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.MemorySpanResizer`1 : object {
    private Memory`1<T> memory;
    public Memory`1<T> Memory { get; }
    public MemorySpanResizer`1(int initialCapacity);
    public Memory`1<T> get_Memory();
    public sealed virtual Span`1<T> Resize(int minimumLength, Span`1<T> buffer);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.MongoDbObjectId : ValueType {
    public static int Size;
    [FixedBufferAttribute("System.Byte", "12")]
private <data>e__FixedBuffer data;
    public MongoDbObjectId(UInt32 high, ulong low);
    public MongoDbObjectId(ReadOnlySpan`1<byte> src);
    public static bool op_Equality(MongoDbObjectId left, MongoDbObjectId right);
    public static bool op_Inequality(MongoDbObjectId left, MongoDbObjectId right);
    public sealed virtual bool Equals(MongoDbObjectId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public Byte[] ToByteArray();
    public void CopyTo(Span`1<byte> dest);
    private static UInt32 SwapByteOrder(UInt32 value);
    private static ulong SwapByteOrder(ulong value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.NullValue : ValueType {
    public static NullValue Default;
    private static NullValue();
    public static bool op_Equality(NullValue left, NullValue right);
    public static bool op_Inequality(NullValue left, NullValue right);
    public sealed virtual bool Equals(NullValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.RecordIO.Record : ValueType {
    public int Length;
    public UInt32 Crc32;
    public Record(int length, UInt32 crc32);
}
public static class Microsoft.Azure.Cosmos.Serialization.HybridRow.RecordIO.RecordIOFormatter : object {
    private static Layout SegmentLayout;
    private static Layout RecordLayout;
    private static RecordIOFormatter();
    public static Result FormatSegment(Segment segment, RowBuffer& row, ISpanResizer`1<byte> resizer);
    public static Result FormatRecord(ReadOnlyMemory`1<byte> body, RowBuffer& row, ISpanResizer`1<byte> resizer);
    private static Result FormatObject(ISpanResizer`1<byte> resizer, int initialCapacity, Layout layout, T obj, RowBuffer& row);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.RecordIO.RecordIOParser : ValueType {
    private State state;
    private Segment segment;
    private Record record;
    public bool HaveSegment { get; }
    public Segment Segment { get; }
    public bool get_HaveSegment();
    public Segment get_Segment();
    [ObsoleteAttribute("Use ReadOnlyMemory<byte> override instead.")]
public Result Process(ReadOnlyMemory`1<byte> buffer, ProductionType& type, Memory`1& record, Int32& need, Int32& consumed);
    public Result Process(ReadOnlyMemory`1<byte> buffer, ProductionType& type, ReadOnlyMemory`1& record, Int32& need, Int32& consumed);
}
[ExtensionAttribute]
public static class Microsoft.Azure.Cosmos.Serialization.HybridRow.RecordIO.RecordIOStream : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use ReadOnlyMemory<byte> override instead.")]
public static Task`1<Result> ReadRecordIOAsync(Stream stm, Func`2<Memory`1<byte>, Result> visitRecord, Func`2<Memory`1<byte>, Result> visitSegment, MemorySpanResizer`1<byte> resizer);
    [ExtensionAttribute]
public static Task`1<Result> ReadRecordIOAsync(Stream stm, Func`2<ReadOnlyMemory`1<byte>, Result> visitRecord, Func`2<ReadOnlyMemory`1<byte>, Result> visitSegment, MemorySpanResizer`1<byte> resizer);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Serialization.HybridRow.RecordIO.RecordIOStream/<ReadRecordIOAsync>d__4")]
[ExtensionAttribute]
public static Task`1<Result> ReadRecordIOAsync(Stream stm, Func`2<ReadOnlyMemory`1<byte>, ValueTask`1<Result>> visitRecord, Func`2<ReadOnlyMemory`1<byte>, ValueTask`1<Result>> visitSegment, MemorySpanResizer`1<byte> resizer);
    [ExtensionAttribute]
public static Task`1<Result> WriteRecordIOAsync(Stream stm, Segment segment, ProduceFunc produce, MemorySpanResizer`1<byte> resizer);
    [AsyncStateMachineAttribute("Microsoft.Azure.Cosmos.Serialization.HybridRow.RecordIO.RecordIOStream/<WriteRecordIOAsync>d__6")]
[ExtensionAttribute]
public static Task`1<Result> WriteRecordIOAsync(Stream stm, Segment segment, ProduceFuncAsync produce, MemorySpanResizer`1<byte> resizer);
    private static Result FormatSegment(Segment segment, MemorySpanResizer`1<byte> resizer, Memory`1& block);
    private static Result FormatRow(ReadOnlyMemory`1<byte> body, MemorySpanResizer`1<byte> resizer, Memory`1& block);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.RecordIO.Segment : ValueType {
    public int Length;
    public string Comment;
    public string SDL;
    public Namespace Schema;
    [ObsoleteAttribute("Use object-model constructor instead.")]
public Segment(string comment, string sdl);
    public Segment(string comment, Namespace ns);
}
public enum Microsoft.Azure.Cosmos.Serialization.HybridRow.Result : Enum {
    public int value__;
    public static Result Success;
    public static Result Failure;
    public static Result NotFound;
    public static Result Exists;
    public static Result TooBig;
    public static Result TypeMismatch;
    public static Result InsufficientPermissions;
    public static Result TypeConstraint;
    public static Result InvalidRow;
    public static Result InsufficientBuffer;
    public static Result Canceled;
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.RowBuffer : ValueType {
    private ISpanResizer`1<byte> resizer;
    private Span`1<byte> buffer;
    private LayoutResolver resolver;
    private int length;
    public HybridRowHeader Header { get; }
    public int Length { get; }
    public LayoutResolver Resolver { get; }
    public RowBuffer(int capacity, ISpanResizer`1<byte> resizer);
    public RowBuffer(Span`1<byte> buffer, HybridRowVersion version, LayoutResolver resolver, ISpanResizer`1<byte> resizer);
    public HybridRowHeader get_Header();
    public int get_Length();
    public Byte[] ToArray();
    public ReadOnlySpan`1<byte> AsSpan();
    public LayoutResolver get_Resolver();
    public void Reset();
    public void WriteTo(Stream stream);
    public bool ReadFrom(Stream inputStream, int bytesCount, HybridRowVersion rowVersion, LayoutResolver resolver);
    public bool ReadFrom(ReadOnlySpan`1<byte> input, HybridRowVersion rowVersion, LayoutResolver resolver);
    public void InitLayout(HybridRowVersion version, Layout layout, LayoutResolver resolver);
    internal void WriteHeader(int offset, HybridRowHeader value);
    internal HybridRowHeader ReadHeader(int offset);
    internal void WriteSchemaId(int offset, SchemaId value);
    internal SchemaId ReadSchemaId(int offset);
    internal void SetBit(int offset, LayoutBit bit);
    internal void UnsetBit(int offset, LayoutBit bit);
    internal bool ReadBit(int offset, LayoutBit bit);
    internal void DeleteVariable(int offset, bool isVarint);
    internal void WriteInt8(int offset, sbyte value);
    internal sbyte ReadInt8(int offset);
    internal void WriteUInt8(int offset, byte value);
    internal byte ReadUInt8(int offset);
    internal void WriteInt16(int offset, short value);
    internal short ReadInt16(int offset);
    internal void WriteUInt16(int offset, ushort value);
    internal ushort ReadUInt16(int offset);
    internal void WriteInt32(int offset, int value);
    internal int ReadInt32(int offset);
    internal void IncrementUInt32(int offset, UInt32 increment);
    internal void DecrementUInt32(int offset, UInt32 decrement);
    internal void WriteUInt32(int offset, UInt32 value);
    internal UInt32 ReadUInt32(int offset);
    internal void WriteInt64(int offset, long value);
    internal long ReadInt64(int offset);
    internal void WriteUInt64(int offset, ulong value);
    internal ulong ReadUInt64(int offset);
    internal int Write7BitEncodedUInt(int offset, ulong value);
    internal ulong Read7BitEncodedUInt(int offset, Int32& lenInBytes);
    internal int Write7BitEncodedInt(int offset, long value);
    internal long Read7BitEncodedInt(int offset, Int32& lenInBytes);
    internal void WriteFloat32(int offset, float value);
    internal float ReadFloat32(int offset);
    internal void WriteFloat64(int offset, double value);
    internal double ReadFloat64(int offset);
    internal void WriteFloat128(int offset, Float128 value);
    internal Float128 ReadFloat128(int offset);
    internal void WriteDecimal(int offset, decimal value);
    internal decimal ReadDecimal(int offset);
    internal void WriteDateTime(int offset, DateTime value);
    internal DateTime ReadDateTime(int offset);
    internal void WriteUnixDateTime(int offset, UnixDateTime value);
    internal UnixDateTime ReadUnixDateTime(int offset);
    internal void WriteGuid(int offset, Guid value);
    internal Guid ReadGuid(int offset);
    internal void WriteMongoDbObjectId(int offset, MongoDbObjectId value);
    internal MongoDbObjectId ReadMongoDbObjectId(int offset);
    internal Utf8Span ReadFixedString(int offset, int len);
    internal void WriteFixedString(int offset, Utf8Span value);
    internal ReadOnlySpan`1<byte> ReadFixedBinary(int offset, int len);
    internal void WriteFixedBinary(int offset, ReadOnlySpan`1<byte> value, int len);
    internal void WriteFixedBinary(int offset, ReadOnlySequence`1<byte> value, int len);
    internal Utf8Span ReadVariableString(int offset);
    internal void WriteVariableString(int offset, Utf8Span value, bool exists, Int32& shift);
    internal ReadOnlySpan`1<byte> ReadVariableBinary(int offset);
    internal void WriteVariableBinary(int offset, ReadOnlySpan`1<byte> value, bool exists, Int32& shift);
    internal void WriteVariableBinary(int offset, ReadOnlySequence`1<byte> value, bool exists, Int32& shift);
    internal long ReadVariableInt(int offset);
    internal void WriteVariableInt(int offset, long value, bool exists, Int32& shift);
    internal ulong ReadVariableUInt(int offset);
    internal void WriteVariableUInt(int offset, ulong value, bool exists, Int32& shift);
    internal LayoutType ReadSparseTypeCode(int offset);
    internal void WriteSparseTypeCode(int offset, LayoutCode code);
    internal sbyte ReadSparseInt8(RowCursor& edit);
    internal void WriteSparseInt8(RowCursor& edit, sbyte value, UpdateOptions options);
    internal short ReadSparseInt16(RowCursor& edit);
    internal void WriteSparseInt16(RowCursor& edit, short value, UpdateOptions options);
    internal int ReadSparseInt32(RowCursor& edit);
    internal void WriteSparseInt32(RowCursor& edit, int value, UpdateOptions options);
    internal long ReadSparseInt64(RowCursor& edit);
    internal void WriteSparseInt64(RowCursor& edit, long value, UpdateOptions options);
    internal byte ReadSparseUInt8(RowCursor& edit);
    internal void WriteSparseUInt8(RowCursor& edit, byte value, UpdateOptions options);
    internal ushort ReadSparseUInt16(RowCursor& edit);
    internal void WriteSparseUInt16(RowCursor& edit, ushort value, UpdateOptions options);
    internal UInt32 ReadSparseUInt32(RowCursor& edit);
    internal void WriteSparseUInt32(RowCursor& edit, UInt32 value, UpdateOptions options);
    internal ulong ReadSparseUInt64(RowCursor& edit);
    internal void WriteSparseUInt64(RowCursor& edit, ulong value, UpdateOptions options);
    internal long ReadSparseVarInt(RowCursor& edit);
    internal void WriteSparseVarInt(RowCursor& edit, long value, UpdateOptions options);
    internal ulong ReadSparseVarUInt(RowCursor& edit);
    internal void WriteSparseVarUInt(RowCursor& edit, ulong value, UpdateOptions options);
    internal float ReadSparseFloat32(RowCursor& edit);
    internal void WriteSparseFloat32(RowCursor& edit, float value, UpdateOptions options);
    internal double ReadSparseFloat64(RowCursor& edit);
    internal void WriteSparseFloat64(RowCursor& edit, double value, UpdateOptions options);
    internal Float128 ReadSparseFloat128(RowCursor& edit);
    internal void WriteSparseFloat128(RowCursor& edit, Float128 value, UpdateOptions options);
    internal decimal ReadSparseDecimal(RowCursor& edit);
    internal void WriteSparseDecimal(RowCursor& edit, decimal value, UpdateOptions options);
    internal DateTime ReadSparseDateTime(RowCursor& edit);
    internal void WriteSparseDateTime(RowCursor& edit, DateTime value, UpdateOptions options);
    internal UnixDateTime ReadSparseUnixDateTime(RowCursor& edit);
    internal void WriteSparseUnixDateTime(RowCursor& edit, UnixDateTime value, UpdateOptions options);
    internal Guid ReadSparseGuid(RowCursor& edit);
    internal void WriteSparseGuid(RowCursor& edit, Guid value, UpdateOptions options);
    internal MongoDbObjectId ReadSparseMongoDbObjectId(RowCursor& edit);
    internal void WriteSparseMongoDbObjectId(RowCursor& edit, MongoDbObjectId value, UpdateOptions options);
    internal NullValue ReadSparseNull(RowCursor& edit);
    internal void WriteSparseNull(RowCursor& edit, NullValue value, UpdateOptions options);
    internal bool ReadSparseBool(RowCursor& edit);
    internal void WriteSparseBool(RowCursor& edit, bool value, UpdateOptions options);
    internal Utf8Span ReadSparseString(RowCursor& edit);
    internal void WriteSparseString(RowCursor& edit, Utf8Span value, UpdateOptions options);
    internal ReadOnlySpan`1<byte> ReadSparseBinary(RowCursor& edit);
    internal void WriteSparseBinary(RowCursor& edit, ReadOnlySpan`1<byte> value, UpdateOptions options);
    internal void WriteSparseBinary(RowCursor& edit, ReadOnlySequence`1<byte> value, UpdateOptions options);
    internal void WriteSparseObject(RowCursor& edit, LayoutScope scopeType, UpdateOptions options, RowCursor& newScope);
    internal void WriteSparseArray(RowCursor& edit, LayoutScope scopeType, UpdateOptions options, RowCursor& newScope);
    internal void WriteTypedArray(RowCursor& edit, LayoutScope scopeType, TypeArgumentList typeArgs, UpdateOptions options, RowCursor& newScope);
    internal void WriteTypedSet(RowCursor& edit, LayoutScope scopeType, TypeArgumentList typeArgs, UpdateOptions options, RowCursor& newScope);
    internal void WriteTypedMap(RowCursor& edit, LayoutScope scopeType, TypeArgumentList typeArgs, UpdateOptions options, RowCursor& newScope);
    internal void WriteSparseTuple(RowCursor& edit, LayoutScope scopeType, TypeArgumentList typeArgs, UpdateOptions options, RowCursor& newScope);
    internal void WriteTypedTuple(RowCursor& edit, LayoutScope scopeType, TypeArgumentList typeArgs, UpdateOptions options, RowCursor& newScope);
    internal void WriteNullable(RowCursor& edit, LayoutScope scopeType, TypeArgumentList typeArgs, UpdateOptions options, bool hasValue, RowCursor& newScope);
    internal void WriteSparseUDT(RowCursor& edit, LayoutScope scopeType, Layout udt, UpdateOptions options, RowCursor& newScope);
    internal void DeleteSparse(RowCursor& edit);
    [SuppressMessageAttribute("StyleCop.CSharp.DocumentationRules", "SA1629:DocumentationTextMustEndWithAPeriod")]
internal static ulong RotateSignToLsb(long value);
    internal static long RotateSignToMsb(ulong uvalue);
    internal int ComputeVariableValueOffset(Layout layout, int scopeOffset, int varIndex);
    internal bool SparseIteratorMoveNext(RowCursor& edit);
    internal RowCursor SparseIteratorReadScope(RowCursor& edit, bool immutable);
    internal RowCursor PrepareSparseMove(RowCursor& scope, RowCursor& srcEdit);
    internal void TypedCollectionMoveField(RowCursor& dstEdit, RowCursor& srcEdit, RowOptions options);
    internal Result TypedCollectionUniqueIndexRebuild(RowCursor& scope);
    private static int CountSparsePath(RowCursor& edit);
    internal static int Count7BitEncodedUInt(ulong value);
    private static int Count7BitEncodedInt(long value);
    private bool InitReadFrom(HybridRowVersion rowVersion);
    private int SkipScope(RowCursor& edit);
    [SuppressMessageAttribute("Microsoft.StyleCop.CSharp.OrderingRules", "SA1201")]
private int CompareFieldValue(RowCursor left, int leftLen, RowCursor right, int rightLen);
    private int CompareKeyValueFieldValue(RowCursor left, RowCursor right);
    private bool InsertionSort(RowCursor& scope, RowCursor& dstEdit, Span`1<UniqueIndexItem> uniqueIndex);
    internal int ReadSparsePathLen(Layout layout, int offset, Int32& pathLenInBytes, Int32& pathOffset);
    internal Utf8Span ReadSparsePath(RowCursor& edit);
    private void WriteSparsePath(RowCursor& edit, int offset);
    private Utf8Span ReadString(int offset, Int32& sizeLenInBytes);
    private int WriteString(int offset, Utf8Span value);
    private ReadOnlySpan`1<byte> ReadBinary(int offset, Int32& sizeLenInBytes);
    private int WriteBinary(int offset, ReadOnlySpan`1<byte> value);
    private int WriteBinary(int offset, ReadOnlySequence`1<byte> value);
    private void Ensure(int size);
    private void EnsureVariable(int offset, bool isVarint, int numBytes, bool exists, Int32& spaceNeeded, Int32& shift);
    [ConditionalAttribute("DEBUG")]
private void ValidateSparsePrimitiveTypeCode(RowCursor& edit, LayoutType code);
    private void WriteSparseMetadata(RowCursor& edit, LayoutType cellType, TypeArgumentList typeArgs, int metaBytes);
    private void EnsureSparse(RowCursor& edit, LayoutType cellType, TypeArgumentList typeArgs, int numBytes, UpdateOptions options, Int32& metaBytes, Int32& spaceNeeded, Int32& shift);
    private void EnsureSparse(RowCursor& edit, LayoutType cellType, TypeArgumentList typeArgs, int numBytes, RowOptions options, Int32& metaBytes, Int32& spaceNeeded, Int32& shift);
    private void ReadSparseMetadata(RowCursor& edit);
    private int SparseComputeSize(RowCursor& edit);
    private int SparseComputePrimitiveSize(LayoutType cellType, int metaOffset, int valueOffset);
    private int CountDefaultValue(LayoutType code, TypeArgumentList typeArgs);
    private int WriteDefaultValue(int offset, LayoutType code, TypeArgumentList typeArgs);
}
[DebuggerDisplayAttribute("{ToString()}")]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.RowCursor : ValueType {
    internal Layout layout;
    internal LayoutScope scopeType;
    internal TypeArgumentList scopeTypeArgs;
    internal bool immutable;
    internal bool deferUniqueIndex;
    internal int start;
    internal bool exists;
    internal UtfAnyString writePath;
    internal StringToken writePathToken;
    internal int pathOffset;
    internal int pathToken;
    internal int metaOffset;
    internal LayoutType cellType;
    internal int valueOffset;
    internal int endOffset;
    internal int count;
    internal int index;
    internal TypeArgumentList cellTypeArgs;
    [DebuggerBrowsableAttribute("0")]
public ulong Token { get; }
    [DebuggerBrowsableAttribute("0")]
public int Index { get; }
    [DebuggerBrowsableAttribute("0")]
public bool Immutable { get; }
    [DebuggerBrowsableAttribute("0")]
public LayoutType ScopeType { get; }
    [DebuggerBrowsableAttribute("0")]
public TypeArgumentList ScopeTypeArgs { get; }
    [DebuggerBrowsableAttribute("0")]
public Layout Layout { get; }
    [DebuggerBrowsableAttribute("0")]
public TypeArgument TypeArg { get; }
    public static RowCursor Create(RowBuffer& row);
    public static RowCursor& Create(RowBuffer& row, RowCursor& cursor);
    public static RowCursor& CreateForAppend(RowBuffer& row, RowCursor& cursor);
    public ulong get_Token();
    public int get_Index();
    public bool get_Immutable();
    public LayoutType get_ScopeType();
    public TypeArgumentList get_ScopeTypeArgs();
    public Layout get_Layout();
    public TypeArgument get_TypeArg();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Microsoft.Azure.Cosmos.Serialization.HybridRow.RowCursorExtensions : object {
    [ExtensionAttribute]
public static RowCursor& Clone(RowCursor& src, RowCursor& dest);
    [ExtensionAttribute]
public static RowCursor& AsReadOnly(RowCursor& src, RowCursor& dest);
    [ExtensionAttribute]
public static RowCursor& Find(RowCursor& edit, RowBuffer& row, UtfAnyString path);
    [ExtensionAttribute]
public static RowCursor& Find(RowCursor& edit, RowBuffer& row, StringToken& pathToken);
    [ExtensionAttribute]
public static bool MoveNext(RowCursor& edit, RowBuffer& row);
    [ExtensionAttribute]
public static bool MoveTo(RowCursor& edit, RowBuffer& row, int index);
    [ExtensionAttribute]
public static bool MoveNext(RowCursor& edit, RowBuffer& row, RowCursor& childScope);
    [ExtensionAttribute]
public static void Skip(RowCursor& edit, RowBuffer& row, RowCursor& childScope);
}
internal enum Microsoft.Azure.Cosmos.Serialization.HybridRow.RowOptions : Enum {
    public int value__;
    public static RowOptions None;
    public static RowOptions Update;
    public static RowOptions Insert;
    public static RowOptions Upsert;
    public static RowOptions InsertAt;
    public static RowOptions Delete;
}
[IsReadOnlyAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Serialization.HybridRow.SchemaId/SchemaIdConverter")]
[DebuggerDisplayAttribute("{Id}")]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.SchemaId : ValueType {
    public static int Size;
    public static SchemaId Invalid;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; }
    public SchemaId(int id);
    private static SchemaId();
    [CompilerGeneratedAttribute]
public int get_Id();
    [SuppressMessageAttribute("Usage", "CA2225:Operator overloads have named alternates")]
public static SchemaId op_Explicit(int id);
    [SuppressMessageAttribute("Usage", "CA2225:Operator overloads have named alternates")]
public static int op_Explicit(SchemaId id);
    public static bool op_Equality(SchemaId left, SchemaId right);
    public static bool op_Inequality(SchemaId left, SchemaId right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(SchemaId other);
    public virtual string ToString();
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
[FlagsAttribute]
[SuppressMessageAttribute("Naming", "CA1714:Flags enums should have plural names")]
public enum Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.AllowEmptyKind : Enum {
    public byte value__;
    public static AllowEmptyKind None;
    public static AllowEmptyKind EmptyAsNull;
    public static AllowEmptyKind NullAsEmpty;
    public static AllowEmptyKind Both;
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.ArrayHybridRowSerializer`2 : ValueType {
    public IEqualityComparer`1<List`1<T>> Comparer { get; }
    public sealed virtual IEqualityComparer`1<List`1<T>> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, List`1<T> value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, List`1& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.ArrayPropertyType : ScopePropertyType {
    [CompilerGeneratedAttribute]
private PropertyType <Items>k__BackingField;
    [JsonPropertyAttribute]
public PropertyType Items { get; public set; }
    [CompilerGeneratedAttribute]
public PropertyType get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(PropertyType value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.ArrayPropertyTypeHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String ItemsName;
    private static Utf8String __BaseName;
    private static LayoutColumn ItemsColumn;
    private static LayoutColumn __BaseColumn;
    private static StringToken ItemsToken;
    private static StringToken __BaseToken;
    public IEqualityComparer`1<ArrayPropertyType> Comparer { get; }
    private static ArrayPropertyTypeHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<ArrayPropertyType> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, ArrayPropertyType value);
    private static Result Write(RowBuffer& row, RowCursor& scope, ArrayPropertyType value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, ArrayPropertyType& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, ArrayPropertyType& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.BinaryHybridRowSerializer : ValueType {
    public IEqualityComparer`1<Byte[]> Comparer { get; }
    public sealed virtual IEqualityComparer`1<Byte[]> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, Byte[] value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Byte[]& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.BooleanHybridRowSerializer : ValueType {
    public IEqualityComparer`1<bool> Comparer { get; }
    public sealed virtual IEqualityComparer`1<bool> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, bool value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Boolean& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.DateTimeHybridRowSerializer : ValueType {
    public IEqualityComparer`1<DateTime> Comparer { get; }
    public sealed virtual IEqualityComparer`1<DateTime> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, DateTime value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, DateTime& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.DecimalHybridRowSerializer : ValueType {
    public IEqualityComparer`1<decimal> Comparer { get; }
    public sealed virtual IEqualityComparer`1<decimal> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, decimal value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Decimal& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.EnumSchema : object {
    private List`1<EnumValue> values;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiType>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeKind <Type>k__BackingField;
    [JsonPropertyAttribute]
public string Comment { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string ApiType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[JsonPropertyAttribute]
public TypeKind Type { get; public set; }
    [JsonPropertyAttribute]
public List`1<EnumValue> Values { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ApiType();
    [CompilerGeneratedAttribute]
public void set_ApiType(string value);
    [CompilerGeneratedAttribute]
public TypeKind get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TypeKind value);
    public List`1<EnumValue> get_Values();
    public void set_Values(List`1<EnumValue> value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.EnumSchemaHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String TypeName;
    private static Utf8String NameName;
    private static Utf8String CommentName;
    private static Utf8String ApiTypeName;
    private static Utf8String ValuesName;
    private static LayoutColumn TypeColumn;
    private static LayoutColumn NameColumn;
    private static LayoutColumn CommentColumn;
    private static LayoutColumn ApiTypeColumn;
    private static LayoutColumn ValuesColumn;
    private static StringToken CommentToken;
    private static StringToken ApiTypeToken;
    private static StringToken ValuesToken;
    public IEqualityComparer`1<EnumSchema> Comparer { get; }
    private static EnumSchemaHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<EnumSchema> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, EnumSchema value);
    private static Result Write(RowBuffer& row, RowCursor& scope, EnumSchema value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, EnumSchema& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, EnumSchema& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.EnumValue : object {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Value>k__BackingField;
    [JsonPropertyAttribute]
public string Comment { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public long Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public long get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(long value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.EnumValueHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String NameName;
    private static Utf8String ValueName;
    private static Utf8String CommentName;
    private static LayoutColumn NameColumn;
    private static LayoutColumn ValueColumn;
    private static LayoutColumn CommentColumn;
    private static StringToken CommentToken;
    public IEqualityComparer`1<EnumValue> Comparer { get; }
    private static EnumValueHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<EnumValue> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, EnumValue value);
    private static Result Write(RowBuffer& row, RowCursor& scope, EnumValue value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, EnumValue& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, EnumValue& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.Float128HybridRowSerializer : ValueType {
    public IEqualityComparer`1<Float128> Comparer { get; }
    public sealed virtual IEqualityComparer`1<Float128> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, Float128 value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Float128& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.Float32HybridRowSerializer : ValueType {
    public IEqualityComparer`1<float> Comparer { get; }
    public sealed virtual IEqualityComparer`1<float> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, float value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Single& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.Float64HybridRowSerializer : ValueType {
    public IEqualityComparer`1<double> Comparer { get; }
    public sealed virtual IEqualityComparer`1<double> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, double value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Double& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.GuidHybridRowSerializer : ValueType {
    public IEqualityComparer`1<Guid> Comparer { get; }
    public sealed virtual IEqualityComparer`1<Guid> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, Guid value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Guid& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.Int16HybridRowSerializer : ValueType {
    public IEqualityComparer`1<short> Comparer { get; }
    public sealed virtual IEqualityComparer`1<short> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, short value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Int16& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.Int32HybridRowSerializer : ValueType {
    public IEqualityComparer`1<int> Comparer { get; }
    public sealed virtual IEqualityComparer`1<int> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, int value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Int32& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.Int64HybridRowSerializer : ValueType {
    public IEqualityComparer`1<long> Comparer { get; }
    public sealed virtual IEqualityComparer`1<long> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, long value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Int64& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.Int8HybridRowSerializer : ValueType {
    public IEqualityComparer`1<sbyte> Comparer { get; }
    public sealed virtual IEqualityComparer`1<sbyte> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, sbyte value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, SByte& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.MapPropertyType : ScopePropertyType {
    [CompilerGeneratedAttribute]
private PropertyType <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyType <Values>k__BackingField;
    [JsonPropertyAttribute]
public PropertyType Keys { get; public set; }
    [JsonPropertyAttribute]
public PropertyType Values { get; public set; }
    [CompilerGeneratedAttribute]
public PropertyType get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(PropertyType value);
    [CompilerGeneratedAttribute]
public PropertyType get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(PropertyType value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.MapPropertyTypeHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String KeysName;
    private static Utf8String ValuesName;
    private static Utf8String __BaseName;
    private static LayoutColumn KeysColumn;
    private static LayoutColumn ValuesColumn;
    private static LayoutColumn __BaseColumn;
    private static StringToken KeysToken;
    private static StringToken ValuesToken;
    private static StringToken __BaseToken;
    public IEqualityComparer`1<MapPropertyType> Comparer { get; }
    private static MapPropertyTypeHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<MapPropertyType> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, MapPropertyType value);
    private static Result Write(RowBuffer& row, RowCursor& scope, MapPropertyType value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, MapPropertyType& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, MapPropertyType& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.MongoDbObjectIdHybridRowSerializer : ValueType {
    public IEqualityComparer`1<MongoDbObjectId> Comparer { get; }
    public sealed virtual IEqualityComparer`1<MongoDbObjectId> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, MongoDbObjectId value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, MongoDbObjectId& value);
}
[JsonObjectAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.Namespace : object {
    private static JsonSerializerSettings NamespaceParseSettings;
    private List`1<EnumSchema> enums;
    private List`1<Schema> schemas;
    [CompilerGeneratedAttribute]
private SchemaLanguageVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CppNamespace>k__BackingField;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[JsonPropertyAttribute]
public SchemaLanguageVersion Version { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public string Comment { get; public set; }
    [JsonPropertyAttribute]
public string CppNamespace { get; public set; }
    [JsonPropertyAttribute]
public List`1<EnumSchema> Enums { get; public set; }
    [JsonPropertyAttribute]
public List`1<Schema> Schemas { get; public set; }
    private static Namespace();
    [CompilerGeneratedAttribute]
public SchemaLanguageVersion get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(SchemaLanguageVersion value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public string get_CppNamespace();
    [CompilerGeneratedAttribute]
public void set_CppNamespace(string value);
    public List`1<EnumSchema> get_Enums();
    public void set_Enums(List`1<EnumSchema> value);
    public List`1<Schema> get_Schemas();
    public void set_Schemas(List`1<Schema> value);
    public static Namespace Parse(string json);
    public static string ToJson(Namespace n);
    public static Result Read(RowBuffer& row, Namespace& value);
    public Result Write(RowBuffer& row);
    internal SchemaLanguageVersion GetEffectiveSdlVersion();
    private bool ShouldSerializeEnums();
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.NamespaceHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String VersionName;
    private static Utf8String NameName;
    private static Utf8String CommentName;
    private static Utf8String SchemasName;
    private static Utf8String EnumsName;
    private static Utf8String CppNamespaceName;
    private static LayoutColumn VersionColumn;
    private static LayoutColumn NameColumn;
    private static LayoutColumn CommentColumn;
    private static LayoutColumn SchemasColumn;
    private static LayoutColumn EnumsColumn;
    private static LayoutColumn CppNamespaceColumn;
    private static StringToken CommentToken;
    private static StringToken SchemasToken;
    private static StringToken EnumsToken;
    private static StringToken CppNamespaceToken;
    public IEqualityComparer`1<Namespace> Comparer { get; }
    private static NamespaceHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<Namespace> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, Namespace value);
    private static Result Write(RowBuffer& row, RowCursor& scope, Namespace value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Namespace& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, Namespace& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.NullableHybridRowSerializer`3 : ValueType {
    public IEqualityComparer`1<TNullable> Comparer { get; }
    public sealed virtual IEqualityComparer`1<TNullable> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, TNullable value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, TNullable& value);
    private static bool HasValue(TNullable value);
    private static TNullable AsNullable(T value);
    private static T AsValue(TNullable value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.NullHybridRowSerializer : ValueType {
    public IEqualityComparer`1<NullValue> Comparer { get; }
    public sealed virtual IEqualityComparer`1<NullValue> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, NullValue value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, NullValue& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.ObjectPropertyType : ScopePropertyType {
    private List`1<Property> properties;
    [JsonPropertyAttribute]
public List`1<Property> Properties { get; public set; }
    public List`1<Property> get_Properties();
    public void set_Properties(List`1<Property> value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.ObjectPropertyTypeHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String PropertiesName;
    private static Utf8String __BaseName;
    private static LayoutColumn PropertiesColumn;
    private static LayoutColumn __BaseColumn;
    private static StringToken PropertiesToken;
    private static StringToken __BaseToken;
    public IEqualityComparer`1<ObjectPropertyType> Comparer { get; }
    private static ObjectPropertyTypeHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<ObjectPropertyType> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, ObjectPropertyType value);
    private static Result Write(RowBuffer& row, RowCursor& scope, ObjectPropertyType value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, ObjectPropertyType& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, ObjectPropertyType& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.PartitionKey : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.PartitionKeyHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String PathName;
    private static LayoutColumn PathColumn;
    public IEqualityComparer`1<PartitionKey> Comparer { get; }
    private static PartitionKeyHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<PartitionKey> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, PartitionKey value);
    private static Result Write(RowBuffer& row, RowCursor& scope, PartitionKey value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, PartitionKey& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, PartitionKey& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.PrimarySortKey : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <Direction>k__BackingField;
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [JsonPropertyAttribute]
public SortDirection Direction { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public SortDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(SortDirection value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.PrimarySortKeyHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String PathName;
    private static Utf8String DirectionName;
    private static LayoutColumn PathColumn;
    private static LayoutColumn DirectionColumn;
    public IEqualityComparer`1<PrimarySortKey> Comparer { get; }
    private static PrimarySortKeyHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<PrimarySortKey> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, PrimarySortKey value);
    private static Result Write(RowBuffer& row, RowCursor& scope, PrimarySortKey value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, PrimarySortKey& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, PrimarySortKey& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.PrimitivePropertyType : PropertyType {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private StorageKind <Storage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Enum>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RowBufferSize>k__BackingField;
    [JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.StrictIntegerConverter")]
public int Length { get; public set; }
    [JsonPropertyAttribute]
public StorageKind Storage { get; public set; }
    [JsonPropertyAttribute]
public string Enum { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.StrictBooleanConverter")]
public bool RowBufferSize { get; public set; }
    public PrimitivePropertyType(TypeKind type);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    [CompilerGeneratedAttribute]
public StorageKind get_Storage();
    [CompilerGeneratedAttribute]
public void set_Storage(StorageKind value);
    [CompilerGeneratedAttribute]
public string get_Enum();
    [CompilerGeneratedAttribute]
public void set_Enum(string value);
    [CompilerGeneratedAttribute]
public bool get_RowBufferSize();
    [CompilerGeneratedAttribute]
public void set_RowBufferSize(bool value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.PrimitivePropertyTypeHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String LengthName;
    private static Utf8String StorageName;
    private static Utf8String EnumName;
    private static Utf8String RowBufferSizeName;
    private static Utf8String __BaseName;
    private static LayoutColumn LengthColumn;
    private static LayoutColumn StorageColumn;
    private static LayoutColumn EnumColumn;
    private static LayoutColumn RowBufferSizeColumn;
    private static LayoutColumn __BaseColumn;
    private static StringToken EnumToken;
    private static StringToken RowBufferSizeToken;
    private static StringToken __BaseToken;
    public IEqualityComparer`1<PrimitivePropertyType> Comparer { get; }
    private static PrimitivePropertyTypeHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<PrimitivePropertyType> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, PrimitivePropertyType value);
    private static Result Write(RowBuffer& row, RowCursor& scope, PrimitivePropertyType value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, PrimitivePropertyType& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, PrimitivePropertyType& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.Property : object {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiName>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyType <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private AllowEmptyKind <AllowEmpty>k__BackingField;
    [JsonPropertyAttribute]
public string Comment { get; public set; }
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [JsonPropertyAttribute]
public string ApiName { get; public set; }
    [JsonPropertyAttribute]
public PropertyType PropertyType { get; public set; }
    [JsonPropertyAttribute]
public AllowEmptyKind AllowEmpty { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_ApiName();
    [CompilerGeneratedAttribute]
public void set_ApiName(string value);
    [CompilerGeneratedAttribute]
public PropertyType get_PropertyType();
    [CompilerGeneratedAttribute]
public void set_PropertyType(PropertyType value);
    [CompilerGeneratedAttribute]
public AllowEmptyKind get_AllowEmpty();
    [CompilerGeneratedAttribute]
public void set_AllowEmpty(AllowEmptyKind value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.PropertyHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String PathName;
    private static Utf8String CommentName;
    private static Utf8String PropertyTypeName;
    private static Utf8String ApiNameName;
    private static Utf8String AllowEmptyName;
    private static LayoutColumn PathColumn;
    private static LayoutColumn CommentColumn;
    private static LayoutColumn PropertyTypeColumn;
    private static LayoutColumn ApiNameColumn;
    private static LayoutColumn AllowEmptyColumn;
    private static StringToken CommentToken;
    private static StringToken PropertyTypeToken;
    private static StringToken ApiNameToken;
    private static StringToken AllowEmptyToken;
    public IEqualityComparer`1<Property> Comparer { get; }
    private static PropertyHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<Property> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, Property value);
    private static Result Write(RowBuffer& row, RowCursor& scope, Property value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Property& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, Property& value);
}
internal class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.PropertySchemaConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    [ExcludeFromCodeCoverageAttribute]
public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.PropertySchemaConverter")]
public abstract class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.PropertyType : object {
    [CompilerGeneratedAttribute]
private string <ApiType>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeKind <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Nullable>k__BackingField;
    [JsonPropertyAttribute]
public string ApiType { get; public set; }
    [JsonPropertyAttribute]
public TypeKind Type { get; public set; }
    [DefaultValueAttribute("True")]
[JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.StrictBooleanConverter")]
public bool Nullable { get; public set; }
    protected PropertyType(TypeKind type);
    [CompilerGeneratedAttribute]
public string get_ApiType();
    [CompilerGeneratedAttribute]
public void set_ApiType(string value);
    [CompilerGeneratedAttribute]
public TypeKind get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TypeKind value);
    [CompilerGeneratedAttribute]
public bool get_Nullable();
    [CompilerGeneratedAttribute]
public void set_Nullable(bool value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.PropertyTypeHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String ApiTypeName;
    private static Utf8String TypeName;
    private static Utf8String NullableName;
    private static LayoutColumn ApiTypeColumn;
    private static LayoutColumn TypeColumn;
    private static LayoutColumn NullableColumn;
    public IEqualityComparer`1<PropertyType> Comparer { get; }
    private static PropertyTypeHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<PropertyType> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, PropertyType value);
    public static Result WriteBase(RowBuffer& row, RowCursor& scope, PropertyType value);
    private static Result Write(RowBuffer& row, RowCursor& scope, PropertyType value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, PropertyType& value);
    public static Result ReadBase(RowBuffer& row, RowCursor& scope, PropertyType& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, PropertyType& value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.RecordHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String LengthName;
    private static Utf8String Crc32Name;
    private static LayoutColumn LengthColumn;
    private static LayoutColumn Crc32Column;
    public IEqualityComparer`1<Record> Comparer { get; }
    private static RecordHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<Record> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, Record value);
    private static Result Write(RowBuffer& row, RowCursor& scope, Record value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Record& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, Record& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.Schema : object {
    private List`1<PartitionKey> partitionKeys;
    private List`1<PrimarySortKey> primaryKeys;
    private List`1<StaticKey> staticKeys;
    private List`1<Property> properties;
    [CompilerGeneratedAttribute]
private SchemaLanguageVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaId <SchemaId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaId <BaseSchemaId>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeKind <Type>k__BackingField;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[JsonPropertyAttribute]
public SchemaLanguageVersion Version { get; public set; }
    [JsonPropertyAttribute]
public string Comment { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public SchemaId SchemaId { get; public set; }
    [JsonPropertyAttribute]
public string BaseName { get; public set; }
    [JsonPropertyAttribute]
public SchemaId BaseSchemaId { get; public set; }
    [JsonPropertyAttribute]
public SchemaOptions Options { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[JsonPropertyAttribute]
public TypeKind Type { get; public set; }
    [JsonPropertyAttribute]
public List`1<Property> Properties { get; public set; }
    [JsonPropertyAttribute]
public List`1<PartitionKey> PartitionKeys { get; public set; }
    [JsonPropertyAttribute]
public List`1<PrimarySortKey> PrimaryKeys { get; public set; }
    [JsonPropertyAttribute]
public List`1<StaticKey> StaticKeys { get; public set; }
    [CompilerGeneratedAttribute]
public SchemaLanguageVersion get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(SchemaLanguageVersion value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public SchemaId get_SchemaId();
    [CompilerGeneratedAttribute]
public void set_SchemaId(SchemaId value);
    [CompilerGeneratedAttribute]
public string get_BaseName();
    [CompilerGeneratedAttribute]
public void set_BaseName(string value);
    [CompilerGeneratedAttribute]
public SchemaId get_BaseSchemaId();
    [CompilerGeneratedAttribute]
public void set_BaseSchemaId(SchemaId value);
    [CompilerGeneratedAttribute]
public SchemaOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(SchemaOptions value);
    [CompilerGeneratedAttribute]
public TypeKind get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TypeKind value);
    public List`1<Property> get_Properties();
    public void set_Properties(List`1<Property> value);
    public List`1<PartitionKey> get_PartitionKeys();
    public void set_PartitionKeys(List`1<PartitionKey> value);
    public List`1<PrimarySortKey> get_PrimaryKeys();
    public void set_PrimaryKeys(List`1<PrimarySortKey> value);
    public List`1<StaticKey> get_StaticKeys();
    public void set_StaticKeys(List`1<StaticKey> value);
    public Layout Compile(Namespace ns);
    internal SchemaLanguageVersion GetEffectiveSdlVersion(Namespace ns);
}
[ExcludeFromCodeCoverageAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.SchemaException : Exception {
    public SchemaException(string message);
    public SchemaException(string message, Exception innerException);
    private SchemaException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.SchemaHash : object {
    public static ValueTuple`2<ulong, ulong> ComputeHash(Namespace ns, Schema schema, ValueTuple`2<ulong, ulong> seed);
    private static ValueTuple`2<ulong, ulong> ComputeHash(SchemaLanguageVersion v, SchemaOptions options, ValueTuple`2<ulong, ulong> seed);
    private static ValueTuple`2<ulong, ulong> ComputeHash(SchemaLanguageVersion v, Namespace ns, Property p, ValueTuple`2<ulong, ulong> seed);
    private static ValueTuple`2<ulong, ulong> ComputeHash(SchemaLanguageVersion v, Namespace ns, PropertyType p, ValueTuple`2<ulong, ulong> seed);
    private static ValueTuple`2<ulong, ulong> ComputeHash(SchemaLanguageVersion v, Namespace ns, PartitionKey key, ValueTuple`2<ulong, ulong> seed);
    private static ValueTuple`2<ulong, ulong> ComputeHash(SchemaLanguageVersion v, Namespace ns, PrimarySortKey key, ValueTuple`2<ulong, ulong> seed);
    private static ValueTuple`2<ulong, ulong> ComputeHash(SchemaLanguageVersion v, Namespace ns, StaticKey key, ValueTuple`2<ulong, ulong> seed);
    private static ValueTuple`2<ulong, ulong> ComputeHash(SchemaLanguageVersion v, Namespace ns, EnumSchema es, ValueTuple`2<ulong, ulong> seed);
    private static ValueTuple`2<ulong, ulong> ComputeHash(SchemaLanguageVersion v, Namespace ns, EnumValue ev, ValueTuple`2<ulong, ulong> seed);
    private static ValueTuple`2<ulong, ulong> ComputeHash(SchemaLanguageVersion v, Namespace ns, TypeKind type, ValueTuple`2<ulong, ulong> seed);
    private static ValueTuple`2<ulong, ulong> ComputeHash(SchemaLanguageVersion v, Namespace ns, SortDirection direction, ValueTuple`2<ulong, ulong> seed);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.SchemaHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String VersionName;
    private static Utf8String TypeName;
    private static Utf8String SchemaIdName;
    private static Utf8String NameName;
    private static Utf8String CommentName;
    private static Utf8String OptionsName;
    private static Utf8String PartitionKeysName;
    private static Utf8String PrimaryKeysName;
    private static Utf8String StaticKeysName;
    private static Utf8String PropertiesName;
    private static Utf8String BaseNameName;
    private static Utf8String BaseSchemaIdName;
    private static LayoutColumn VersionColumn;
    private static LayoutColumn TypeColumn;
    private static LayoutColumn SchemaIdColumn;
    private static LayoutColumn NameColumn;
    private static LayoutColumn CommentColumn;
    private static LayoutColumn OptionsColumn;
    private static LayoutColumn PartitionKeysColumn;
    private static LayoutColumn PrimaryKeysColumn;
    private static LayoutColumn StaticKeysColumn;
    private static LayoutColumn PropertiesColumn;
    private static LayoutColumn BaseNameColumn;
    private static LayoutColumn BaseSchemaIdColumn;
    private static StringToken CommentToken;
    private static StringToken OptionsToken;
    private static StringToken PartitionKeysToken;
    private static StringToken PrimaryKeysToken;
    private static StringToken StaticKeysToken;
    private static StringToken PropertiesToken;
    private static StringToken BaseNameToken;
    private static StringToken BaseSchemaIdToken;
    public IEqualityComparer`1<Schema> Comparer { get; }
    private static SchemaHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<Schema> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, Schema value);
    private static Result Write(RowBuffer& row, RowCursor& scope, Schema value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Schema& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, Schema& value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.SchemaLanguageVersion : Enum {
    public byte value__;
    public static SchemaLanguageVersion V1;
    public static SchemaLanguageVersion V2;
    public static SchemaLanguageVersion Latest;
    public static SchemaLanguageVersion Unspecified;
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.SchemaOptions : object {
    [CompilerGeneratedAttribute]
private bool <DisallowUnschematized>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePropertyLevelTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableSystemPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Abstract>k__BackingField;
    [JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.StrictBooleanConverter")]
public bool DisallowUnschematized { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.StrictBooleanConverter")]
public bool EnablePropertyLevelTimestamp { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.StrictBooleanConverter")]
public bool DisableSystemPrefix { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.StrictBooleanConverter")]
public bool Abstract { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DisallowUnschematized();
    [CompilerGeneratedAttribute]
public void set_DisallowUnschematized(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnablePropertyLevelTimestamp();
    [CompilerGeneratedAttribute]
public void set_EnablePropertyLevelTimestamp(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableSystemPrefix();
    [CompilerGeneratedAttribute]
public void set_DisableSystemPrefix(bool value);
    [CompilerGeneratedAttribute]
public bool get_Abstract();
    [CompilerGeneratedAttribute]
public void set_Abstract(bool value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.SchemaOptionsHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String DisallowUnschematizedName;
    private static Utf8String EnablePropertyLevelTimestampName;
    private static Utf8String DisableSystemPrefixName;
    private static Utf8String AbstractName;
    private static LayoutColumn DisallowUnschematizedColumn;
    private static LayoutColumn EnablePropertyLevelTimestampColumn;
    private static LayoutColumn DisableSystemPrefixColumn;
    private static LayoutColumn AbstractColumn;
    private static StringToken DisallowUnschematizedToken;
    private static StringToken EnablePropertyLevelTimestampToken;
    private static StringToken DisableSystemPrefixToken;
    private static StringToken AbstractToken;
    public IEqualityComparer`1<SchemaOptions> Comparer { get; }
    private static SchemaOptionsHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<SchemaOptions> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, SchemaOptions value);
    private static Result Write(RowBuffer& row, RowCursor& scope, SchemaOptions value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, SchemaOptions& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, SchemaOptions& value);
}
internal static class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.SchemasHrSchema : object {
    public static Namespace Namespace;
    public static LayoutResolver LayoutResolver;
    private static SchemasHrSchema();
    private static Namespace CreateSchema();
    private static LayoutResolver LoadSchema();
}
public static class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.SchemaValidator : object {
    public static void Validate(Namespace ns);
    private static void Visit(Namespace ns, Dictionary`2<ValueTuple`2<string, SchemaId>, Schema> schemas, Dictionary`2<SchemaId, Schema> ids, Dictionary`2<string, EnumSchema> enums);
    private static void Visit(SchemaLanguageVersion v, EnumSchema es);
    private static void Visit(SchemaLanguageVersion v, Schema s, Dictionary`2<ValueTuple`2<string, SchemaId>, Schema> schemas, Dictionary`2<SchemaId, Schema> ids, Dictionary`2<string, EnumSchema> enums);
    private static void Visit(Property p, Schema s, Dictionary`2<ValueTuple`2<string, SchemaId>, Schema> schemas, Dictionary`2<SchemaId, Schema> ids, Dictionary`2<string, EnumSchema> enums);
    private static void Visit(PropertyType p, PropertyType parent, Dictionary`2<ValueTuple`2<string, SchemaId>, Schema> schemas, Dictionary`2<SchemaId, Schema> ids, Dictionary`2<string, EnumSchema> enums);
}
public abstract class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.ScopePropertyType : PropertyType {
    [CompilerGeneratedAttribute]
private bool <Immutable>k__BackingField;
    [JsonPropertyAttribute]
[JsonConverterAttribute("Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.StrictBooleanConverter")]
public bool Immutable { get; public set; }
    protected ScopePropertyType(TypeKind type);
    [CompilerGeneratedAttribute]
public bool get_Immutable();
    [CompilerGeneratedAttribute]
public void set_Immutable(bool value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.ScopePropertyTypeHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String ImmutableName;
    private static Utf8String __BaseName;
    private static LayoutColumn ImmutableColumn;
    private static LayoutColumn __BaseColumn;
    private static StringToken __BaseToken;
    public IEqualityComparer`1<ScopePropertyType> Comparer { get; }
    private static ScopePropertyTypeHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<ScopePropertyType> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, ScopePropertyType value);
    public static Result WriteBase(RowBuffer& row, RowCursor& scope, ScopePropertyType value);
    private static Result Write(RowBuffer& row, RowCursor& scope, ScopePropertyType value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, ScopePropertyType& value);
    public static Result ReadBase(RowBuffer& row, RowCursor& scope, ScopePropertyType& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, ScopePropertyType& value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.SegmentHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String LengthName;
    private static Utf8String CommentName;
    private static Utf8String SDLName;
    private static Utf8String SchemaName;
    private static LayoutColumn LengthColumn;
    private static LayoutColumn CommentColumn;
    private static LayoutColumn SDLColumn;
    private static LayoutColumn SchemaColumn;
    private static StringToken CommentToken;
    private static StringToken SDLToken;
    private static StringToken SchemaToken;
    public IEqualityComparer`1<Segment> Comparer { get; }
    private static SegmentHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<Segment> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, Segment value);
    private static Result Write(RowBuffer& row, RowCursor& scope, Segment value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Segment& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, Segment& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.SetPropertyType : ScopePropertyType {
    [CompilerGeneratedAttribute]
private PropertyType <Items>k__BackingField;
    [JsonPropertyAttribute]
public PropertyType Items { get; public set; }
    [CompilerGeneratedAttribute]
public PropertyType get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(PropertyType value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.SetPropertyTypeHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String ItemsName;
    private static Utf8String __BaseName;
    private static LayoutColumn ItemsColumn;
    private static LayoutColumn __BaseColumn;
    private static StringToken ItemsToken;
    private static StringToken __BaseToken;
    public IEqualityComparer`1<SetPropertyType> Comparer { get; }
    private static SetPropertyTypeHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<SetPropertyType> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, SetPropertyType value);
    private static Result Write(RowBuffer& row, RowCursor& scope, SetPropertyType value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, SetPropertyType& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, SetPropertyType& value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.SortDirection : Enum {
    public byte value__;
    [EnumMemberAttribute]
public static SortDirection Ascending;
    [EnumMemberAttribute]
public static SortDirection Descending;
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.StaticKey : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [JsonPropertyAttribute]
public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.StaticKeyHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String PathName;
    private static LayoutColumn PathColumn;
    public IEqualityComparer`1<StaticKey> Comparer { get; }
    private static StaticKeyHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<StaticKey> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, StaticKey value);
    private static Result Write(RowBuffer& row, RowCursor& scope, StaticKey value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, StaticKey& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, StaticKey& value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.StorageKind : Enum {
    public int value__;
    public static StorageKind Sparse;
    public static StorageKind Fixed;
    public static StorageKind Variable;
}
internal class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.StrictBooleanConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    [ExcludeFromCodeCoverageAttribute]
public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.StrictIntegerConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    [ExcludeFromCodeCoverageAttribute]
public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private static bool IsIntegerType(Type type);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.TaggedPropertyType : ScopePropertyType {
    internal static int MinTaggedArguments;
    internal static int MaxTaggedArguments;
    private List`1<PropertyType> items;
    [JsonPropertyAttribute]
public List`1<PropertyType> Items { get; public set; }
    public List`1<PropertyType> get_Items();
    public void set_Items(List`1<PropertyType> value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.TaggedPropertyTypeHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String ItemsName;
    private static Utf8String __BaseName;
    private static LayoutColumn ItemsColumn;
    private static LayoutColumn __BaseColumn;
    private static StringToken ItemsToken;
    private static StringToken __BaseToken;
    public IEqualityComparer`1<TaggedPropertyType> Comparer { get; }
    private static TaggedPropertyTypeHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<TaggedPropertyType> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, TaggedPropertyType value);
    private static Result Write(RowBuffer& row, RowCursor& scope, TaggedPropertyType value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, TaggedPropertyType& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, TaggedPropertyType& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.TuplePropertyType : ScopePropertyType {
    private List`1<PropertyType> items;
    [JsonPropertyAttribute]
public List`1<PropertyType> Items { get; public set; }
    public List`1<PropertyType> get_Items();
    public void set_Items(List`1<PropertyType> value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.TuplePropertyTypeHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String ItemsName;
    private static Utf8String __BaseName;
    private static LayoutColumn ItemsColumn;
    private static LayoutColumn __BaseColumn;
    private static StringToken ItemsToken;
    private static StringToken __BaseToken;
    public IEqualityComparer`1<TuplePropertyType> Comparer { get; }
    private static TuplePropertyTypeHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<TuplePropertyType> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, TuplePropertyType value);
    private static Result Write(RowBuffer& row, RowCursor& scope, TuplePropertyType value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, TuplePropertyType& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, TuplePropertyType& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.TypedArrayHybridRowSerializer`2 : ValueType {
    public IEqualityComparer`1<List`1<T>> Comparer { get; }
    public sealed virtual IEqualityComparer`1<List`1<T>> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, List`1<T> value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, List`1& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.TypedMapHybridRowSerializer`4 : ValueType {
    public IEqualityComparer`1<Dictionary`2<TKey, TValue>> Comparer { get; }
    public sealed virtual IEqualityComparer`1<Dictionary`2<TKey, TValue>> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, Dictionary`2<TKey, TValue> value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Dictionary`2& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.TypedTupleHybridRowSerializer`4 : ValueType {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEqualityComparer`1<ValueTuple`2<T1, T2>> Comparer { get; }
    public sealed virtual IEqualityComparer`1<ValueTuple`2<T1, T2>> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, ValueTuple`2<T1, T2> value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, ValueTuple`2& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.TypedTupleHybridRowSerializer`6 : ValueType {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEqualityComparer`1<ValueTuple`3<T1, T2, T3>> Comparer { get; }
    public sealed virtual IEqualityComparer`1<ValueTuple`3<T1, T2, T3>> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, ValueTuple`3<T1, T2, T3> value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, ValueTuple`3& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.TypedTupleHybridRowSerializer`8 : ValueType {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEqualityComparer`1<ValueTuple`4<T1, T2, T3, T4>> Comparer { get; }
    public sealed virtual IEqualityComparer`1<ValueTuple`4<T1, T2, T3, T4>> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, ValueTuple`4<T1, T2, T3, T4> value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, ValueTuple`4& value);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter", "Mono.Cecil.CustomAttributeArgument[]")]
public enum Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.TypeKind : Enum {
    public byte value__;
    public static TypeKind Invalid;
    public static TypeKind Null;
    [EnumMemberAttribute]
public static TypeKind Boolean;
    public static TypeKind Int8;
    public static TypeKind Int16;
    public static TypeKind Int32;
    public static TypeKind Int64;
    [EnumMemberAttribute]
public static TypeKind UInt8;
    [EnumMemberAttribute]
public static TypeKind UInt16;
    [EnumMemberAttribute]
public static TypeKind UInt32;
    [EnumMemberAttribute]
public static TypeKind UInt64;
    [EnumMemberAttribute]
public static TypeKind VarInt;
    [EnumMemberAttribute]
public static TypeKind VarUInt;
    public static TypeKind Float32;
    public static TypeKind Float64;
    public static TypeKind Float128;
    public static TypeKind Decimal;
    [EnumMemberAttribute]
public static TypeKind DateTime;
    [EnumMemberAttribute]
public static TypeKind UnixDateTime;
    public static TypeKind Guid;
    [EnumMemberAttribute]
public static TypeKind MongoDbObjectId;
    public static TypeKind Utf8;
    public static TypeKind Binary;
    public static TypeKind Object;
    public static TypeKind Array;
    public static TypeKind Set;
    public static TypeKind Map;
    public static TypeKind Tuple;
    public static TypeKind Tagged;
    public static TypeKind Schema;
    public static TypeKind Any;
    public static TypeKind Enum;
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.UdtPropertyType : ScopePropertyType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaId <SchemaId>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute]
public SchemaId SchemaId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public SchemaId get_SchemaId();
    [CompilerGeneratedAttribute]
public void set_SchemaId(SchemaId value);
}
[IsReadOnlyAttribute]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.UdtPropertyTypeHybridRowSerializer : ValueType {
    public static int SchemaId;
    public static int Size;
    private static Utf8String NameName;
    private static Utf8String SchemaIdName;
    private static Utf8String __BaseName;
    private static LayoutColumn NameColumn;
    private static LayoutColumn SchemaIdColumn;
    private static LayoutColumn __BaseColumn;
    private static StringToken __BaseToken;
    public IEqualityComparer`1<UdtPropertyType> Comparer { get; }
    private static UdtPropertyTypeHybridRowSerializer();
    public sealed virtual IEqualityComparer`1<UdtPropertyType> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, UdtPropertyType value);
    private static Result Write(RowBuffer& row, RowCursor& scope, UdtPropertyType value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, UdtPropertyType& value);
    private static Result Read(RowBuffer& row, RowCursor& scope, UdtPropertyType& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.UInt16HybridRowSerializer : ValueType {
    public IEqualityComparer`1<ushort> Comparer { get; }
    public sealed virtual IEqualityComparer`1<ushort> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, ushort value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, UInt16& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.UInt32HybridRowSerializer : ValueType {
    public IEqualityComparer`1<UInt32> Comparer { get; }
    public sealed virtual IEqualityComparer`1<UInt32> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, UInt32 value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, UInt32& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.UInt64HybridRowSerializer : ValueType {
    public IEqualityComparer`1<ulong> Comparer { get; }
    public sealed virtual IEqualityComparer`1<ulong> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, ulong value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, UInt64& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.UInt8HybridRowSerializer : ValueType {
    public IEqualityComparer`1<byte> Comparer { get; }
    public sealed virtual IEqualityComparer`1<byte> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, byte value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Byte& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.UnixDateTimeHybridRowSerializer : ValueType {
    public IEqualityComparer`1<UnixDateTime> Comparer { get; }
    public sealed virtual IEqualityComparer`1<UnixDateTime> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, UnixDateTime value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, UnixDateTime& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.Utf8HybridRowSerializer : ValueType {
    public IEqualityComparer`1<string> Comparer { get; }
    public sealed virtual IEqualityComparer`1<string> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, string value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, String& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.VarIntHybridRowSerializer : ValueType {
    public IEqualityComparer`1<long> Comparer { get; }
    public sealed virtual IEqualityComparer`1<long> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, long value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, Int64& value);
}
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas.VarUIntHybridRowSerializer : ValueType {
    public IEqualityComparer`1<ulong> Comparer { get; }
    public sealed virtual IEqualityComparer`1<ulong> get_Comparer();
    public sealed virtual Result Write(RowBuffer& row, RowCursor& scope, bool isRoot, TypeArgumentList typeArgs, ulong value);
    public sealed virtual Result Read(RowBuffer& row, RowCursor& scope, bool isRoot, UInt64& value);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{Milliseconds}")]
public class Microsoft.Azure.Cosmos.Serialization.HybridRow.UnixDateTime : ValueType {
    public static int Size;
    public static UnixDateTime Epoch;
    [CompilerGeneratedAttribute]
private long <Milliseconds>k__BackingField;
    public long Milliseconds { get; }
    public UnixDateTime(long milliseconds);
    [CompilerGeneratedAttribute]
public long get_Milliseconds();
    public static bool op_Equality(UnixDateTime left, UnixDateTime right);
    public static bool op_Inequality(UnixDateTime left, UnixDateTime right);
    public sealed virtual bool Equals(UnixDateTime other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
