internal class Microsoft.Azure.Amqp.Transport.ClientWebSocketTransport : TransportBase {
    private static AsyncCallback s_onReadComplete;
    private static AsyncCallback s_onWriteComplete;
    private static TimeSpan s_closeTimeout;
    private static WebSocketState[] s_closedWebsocketStates;
    private ClientWebSocket _webSocket;
    private EndPoint _localEndPoint;
    private EndPoint _remoteEndPoint;
    private CancellationTokenSource _writeCancellationTokenSource;
    private bool _isDisposed;
    public string LocalEndPoint { get; }
    public string RemoteEndPoint { get; }
    public bool RequiresCompleteFrames { get; }
    public bool IsSecure { get; }
    public ClientWebSocketTransport(ClientWebSocket webSocket, EndPoint localEndpoint, EndPoint remoteEndpoint);
    private static ClientWebSocketTransport();
    public virtual string get_LocalEndPoint();
    public virtual string get_RemoteEndPoint();
    public virtual bool get_RequiresCompleteFrames();
    public virtual bool get_IsSecure();
    public virtual void SetMonitor(ITransportMonitor usageMeter);
    public virtual bool WriteAsync(TransportAsyncCallbackArgs args);
    public virtual bool ReadAsync(TransportAsyncCallbackArgs args);
    public sealed virtual void Dispose();
    protected virtual bool OpenInternal();
    protected virtual bool CloseInternal();
    protected virtual void AbortInternal();
    [AsyncStateMachineAttribute("Microsoft.Azure.Amqp.Transport.ClientWebSocketTransport/<ReadImplAsync>d__25")]
private Task`1<int> ReadImplAsync(TransportAsyncCallbackArgs args);
    [AsyncStateMachineAttribute("Microsoft.Azure.Amqp.Transport.ClientWebSocketTransport/<WriteImplAsync>d__26")]
private Task WriteImplAsync(TransportAsyncCallbackArgs args);
    [AsyncStateMachineAttribute("Microsoft.Azure.Amqp.Transport.ClientWebSocketTransport/<CloseImplAsync>d__27")]
private Task CloseImplAsync(TimeSpan timeout);
    private void CancelPendingWrite();
    private static void OnReadComplete(IAsyncResult result);
    private static void HandleReadComplete(IAsyncResult result);
    private static bool ReadTaskDone(Task`1<int> taskResult, TransportAsyncCallbackArgs args);
    private static void OnWriteComplete(IAsyncResult result);
    private static void HandleWriteComplete(IAsyncResult result);
    private static bool WriteTaskDone(Task taskResult, TransportAsyncCallbackArgs args);
    private void ThrowIfNotOpen();
}
[FlagsAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
internal enum Microsoft.Azure.Devices.Client.AccessRights : Enum {
    public int value__;
    public static AccessRights DeviceConnect;
}
internal static class Microsoft.Azure.Devices.Client.AccessRightsHelper : object {
    public static String[] AccessRightsToStringArray(AccessRights accessRights);
}
internal abstract class Microsoft.Azure.Devices.Client.ActionItem : object {
    private bool _isScheduled;
    [CompilerGeneratedAttribute]
private bool <LowPriority>k__BackingField;
    public bool LowPriority { get; protected set; }
    [CompilerGeneratedAttribute]
public bool get_LowPriority();
    [CompilerGeneratedAttribute]
protected void set_LowPriority(bool value);
    public static void Schedule(Action`1<object> callback, object state);
    public static void Schedule(Action`1<object> callback, object state, bool lowPriority);
    [SecurityCriticalAttribute]
protected abstract virtual void Invoke();
    [SecurityCriticalAttribute]
protected void Schedule();
    [SecurityCriticalAttribute]
protected void ScheduleWithoutContext();
    [SecurityCriticalAttribute]
private static void ScheduleCallback(Action`1<object> callback, object state, bool lowPriority);
    [SecurityCriticalAttribute]
private void ScheduleCallback(Action`1<object> callback);
}
public class Microsoft.Azure.Devices.Client.AmqpConnectionPoolSettings : object {
    private UInt32 _maxPoolSize;
    internal static UInt32 MaxDevicesPerConnection;
    private static UInt32 DefaultPoolSize;
    public static UInt32 AbsoluteMaxPoolSize;
    [CompilerGeneratedAttribute]
private bool <Pooling>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ConnectionIdleTimeout>k__BackingField;
    public UInt32 MaxPoolSize { get; public set; }
    public bool Pooling { get; public set; }
    [ObsoleteAttribute("This property is not used and will be removed in a future update.")]
public TimeSpan ConnectionIdleTimeout { get; public set; }
    public UInt32 get_MaxPoolSize();
    public void set_MaxPoolSize(UInt32 value);
    [CompilerGeneratedAttribute]
public bool get_Pooling();
    [CompilerGeneratedAttribute]
public void set_Pooling(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ConnectionIdleTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectionIdleTimeout(TimeSpan value);
    public bool Equals(AmqpConnectionPoolSettings other);
}
public class Microsoft.Azure.Devices.Client.AmqpTransportSettings : object {
    private TransportType _transportType;
    private TimeSpan _operationTimeout;
    private TimeSpan _openTimeout;
    public static TimeSpan DefaultOperationTimeout;
    public static TimeSpan DefaultOpenTimeout;
    public static TimeSpan DefaultIdleTimeout;
    public static UInt32 DefaultPrefetchCount;
    [CompilerGeneratedAttribute]
private string <AuthenticationChain>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <IdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <WebSocketKeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PrefetchCount>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <RemoteCertificateValidationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpConnectionPoolSettings <AmqpConnectionPoolSettings>k__BackingField;
    internal string AuthenticationChain { get; internal set; }
    public bool CertificateRevocationCheck { get; public set; }
    public TimeSpan IdleTimeout { get; public set; }
    public TimeSpan OperationTimeout { get; public set; }
    public TimeSpan OpenTimeout { get; public set; }
    public Nullable`1<TimeSpan> WebSocketKeepAlive { get; public set; }
    public UInt32 PrefetchCount { get; public set; }
    public X509Certificate2 ClientCertificate { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    public AmqpConnectionPoolSettings AmqpConnectionPoolSettings { get; public set; }
    public TimeSpan DefaultReceiveTimeout { get; }
    public AmqpTransportSettings(TransportType transportType);
    public AmqpTransportSettings(TransportType transportType, UInt32 prefetchCount);
    public AmqpTransportSettings(TransportType transportType, UInt32 prefetchCount, AmqpConnectionPoolSettings amqpConnectionPoolSettings);
    private static AmqpTransportSettings();
    [CompilerGeneratedAttribute]
internal string get_AuthenticationChain();
    [CompilerGeneratedAttribute]
internal void set_AuthenticationChain(string value);
    public bool get_CertificateRevocationCheck();
    public void set_CertificateRevocationCheck(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_IdleTimeout();
    [CompilerGeneratedAttribute]
public void set_IdleTimeout(TimeSpan value);
    public TimeSpan get_OperationTimeout();
    public void set_OperationTimeout(TimeSpan value);
    public TimeSpan get_OpenTimeout();
    public void set_OpenTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_WebSocketKeepAlive();
    [CompilerGeneratedAttribute]
public void set_WebSocketKeepAlive(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public UInt32 get_PrefetchCount();
    [CompilerGeneratedAttribute]
public void set_PrefetchCount(UInt32 value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public void set_ClientCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public sealed virtual IWebProxy get_Proxy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Proxy(IWebProxy value);
    [CompilerGeneratedAttribute]
public RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    [CompilerGeneratedAttribute]
public void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    [CompilerGeneratedAttribute]
public AmqpConnectionPoolSettings get_AmqpConnectionPoolSettings();
    [CompilerGeneratedAttribute]
public void set_AmqpConnectionPoolSettings(AmqpConnectionPoolSettings value);
    public sealed virtual TimeSpan get_DefaultReceiveTimeout();
    public sealed virtual TransportType GetTransportType();
    public bool Equals(AmqpTransportSettings other);
    private void SetOperationTimeout(TimeSpan timeout);
    private void SetOpenTimeout(TimeSpan timeout);
}
[DebuggerStepThroughAttribute]
internal abstract class Microsoft.Azure.Devices.Client.AsyncResult : object {
    public static string DisablePrepareForRethrow;
    private static AsyncCallback s_asyncCompletionWrapperCallback;
    private AsyncCallback _callback;
    private bool _endCalled;
    private Exception _exception;
    private AsyncCompletion _nextAsyncCompletion;
    private ManualResetEvent _manualResetEvent;
    private object _thisLock;
    [CompilerGeneratedAttribute]
private object <AsyncState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompletedSynchronously>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<AsyncResult, Exception> <OnCompleting>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<AsyncCallback, IAsyncResult> <VirtualCallback>k__BackingField;
    public object AsyncState { get; private set; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; private set; }
    public bool HasCallback { get; }
    public bool IsCompleted { get; private set; }
    protected Action`2<AsyncResult, Exception> OnCompleting { get; protected set; }
    protected internal EventTraceActivity Activity { get; }
    protected object ThisLock { get; }
    protected Action`2<AsyncCallback, IAsyncResult> VirtualCallback { get; protected set; }
    protected AsyncResult(AsyncCallback callback, object state);
    [CompilerGeneratedAttribute]
public sealed virtual object get_AsyncState();
    [CompilerGeneratedAttribute]
private void set_AsyncState(object value);
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CompletedSynchronously();
    [CompilerGeneratedAttribute]
private void set_CompletedSynchronously(bool value);
    public bool get_HasCallback();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCompleted();
    [CompilerGeneratedAttribute]
private void set_IsCompleted(bool value);
    [CompilerGeneratedAttribute]
protected Action`2<AsyncResult, Exception> get_OnCompleting();
    [CompilerGeneratedAttribute]
protected void set_OnCompleting(Action`2<AsyncResult, Exception> value);
    protected internal virtual EventTraceActivity get_Activity();
    protected object get_ThisLock();
    [CompilerGeneratedAttribute]
protected Action`2<AsyncCallback, IAsyncResult> get_VirtualCallback();
    [CompilerGeneratedAttribute]
protected void set_VirtualCallback(Action`2<AsyncCallback, IAsyncResult> value);
    protected bool TryComplete(bool didCompleteSynchronously, Exception exception);
    protected void Complete(bool didCompleteSynchronously);
    protected void Complete(bool didCompleteSynchronously, Exception e);
    private static void AsyncCompletionWrapperCallback(IAsyncResult result);
    protected AsyncCallback PrepareAsyncCompletion(AsyncCompletion callback);
    protected bool CheckSyncContinue(IAsyncResult result);
    protected bool SyncContinue(IAsyncResult result);
    private bool TryContinueHelper(IAsyncResult result, AsyncCompletion& callback);
    private AsyncCompletion GetNextCompletion();
    protected static void ThrowInvalidAsyncResult(IAsyncResult result);
    protected static void ThrowInvalidAsyncResult(string debugText);
    protected static TAsyncResult End(IAsyncResult result);
}
internal abstract class Microsoft.Azure.Devices.Client.AsyncResultT`1 : AsyncResult {
    protected AsyncResultT`1(AsyncCallback callback, object state);
    public static TAsyncResult End(IAsyncResult asyncResult);
}
public class Microsoft.Azure.Devices.Client.AuthenticationMethodFactory : object {
    internal static IAuthenticationMethod GetAuthenticationMethod(IotHubConnectionStringBuilder csBuilder);
    public static IAuthenticationMethod CreateAuthenticationWithSharedAccessPolicyKey(string deviceId, string policyName, string key);
    public static IAuthenticationMethod CreateAuthenticationWithToken(string deviceId, string token);
    public static IAuthenticationMethod CreateAuthenticationWithToken(string deviceId, string moduleId, string token);
    public static IAuthenticationMethod CreateAuthenticationWithRegistrySymmetricKey(string deviceId, string key);
    public static IAuthenticationMethod CreateAuthenticationWithRegistrySymmetricKey(string deviceId, string moduleId, string key);
}
public abstract class Microsoft.Azure.Devices.Client.AuthenticationWithTokenRefresh : object {
    private int _suggestedTimeToLiveSeconds;
    private int _timeBufferPercentage;
    private int _bufferSeconds;
    private SemaphoreSlim _lock;
    private string _token;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private DateTime <ExpiresOn>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisposalWithClient>k__BackingField;
    public DateTime ExpiresOn { get; private set; }
    public DateTime RefreshesOn { get; }
    public bool IsExpiring { get; }
    internal bool DisposalWithClient { get; }
    public AuthenticationWithTokenRefresh(int suggestedTimeToLiveSeconds, int timeBufferPercentage);
    public AuthenticationWithTokenRefresh(int suggestedTimeToLiveSeconds, int timeBufferPercentage, bool disposeWithClient);
    [CompilerGeneratedAttribute]
public DateTime get_ExpiresOn();
    [CompilerGeneratedAttribute]
private void set_ExpiresOn(DateTime value);
    public DateTime get_RefreshesOn();
    public bool get_IsExpiring();
    [CompilerGeneratedAttribute]
internal bool get_DisposalWithClient();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.AuthenticationWithTokenRefresh/<GetTokenAsync>d__19")]
public Task`1<string> GetTokenAsync(string iotHub);
    public virtual IotHubConnectionStringBuilder Populate(IotHubConnectionStringBuilder iotHubConnectionStringBuilder);
    protected abstract virtual Task`1<string> SafeCreateNewToken(string iotHub, int suggestedTimeToLive);
    private void UpdateTimeBufferSeconds(int ttl);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal static class Microsoft.Azure.Devices.Client.CertificateInstaller : object {
    private static object s_certOperationsLock;
    private static CertificateInstaller();
    internal static void EnsureChainIsInstalled(X509Certificate2Collection certificates);
}
internal class Microsoft.Azure.Devices.Client.ClientApiVersionHelper : object {
    internal static string ApiVersionQueryPrefix;
    internal static string ApiVersionLatest;
    public static string ApiVersionString;
    public static string ApiVersionQueryStringLatest;
}
internal class Microsoft.Azure.Devices.Client.ClientFactory : object {
    private static string DeviceId;
    private static string DeviceIdParameterPattern;
    private static TimeSpan s_regexTimeoutMilliseconds;
    private static Regex s_deviceIdParameterRegex;
    private static ClientFactory();
    internal static InternalClient Create(string hostname, IAuthenticationMethod authenticationMethod, ClientOptions options);
    internal static InternalClient Create(string hostname, string gatewayHostname, IAuthenticationMethod authenticationMethod, ClientOptions options);
    internal static InternalClient Create(string hostname, IAuthenticationMethod authenticationMethod, TransportType transportType, ClientOptions options);
    internal static InternalClient Create(string hostname, string gatewayHostname, IAuthenticationMethod authenticationMethod, TransportType transportType, ClientOptions options);
    internal static InternalClient Create(string hostname, IAuthenticationMethod authenticationMethod, ITransportSettings[] transportSettings, ClientOptions options);
    internal static InternalClient Create(string hostname, string gatewayHostname, IAuthenticationMethod authenticationMethod, ITransportSettings[] transportSettings, ClientOptions options);
    internal static InternalClient CreateFromConnectionString(string connectionString, ClientOptions options);
    internal static InternalClient CreateFromConnectionString(string connectionString, string deviceId, ClientOptions options);
    internal static InternalClient CreateFromConnectionString(string connectionString, TransportType transportType, ClientOptions options);
    internal static InternalClient CreateFromConnectionString(string connectionString, string deviceId, TransportType transportType, ClientOptions options);
    internal static InternalClient CreateFromConnectionString(string connectionString, ITransportSettings[] transportSettings, ClientOptions options);
    internal static InternalClient CreateFromConnectionString(string connectionString, string deviceId, ITransportSettings[] transportSettings, ClientOptions options);
    internal static InternalClient CreateFromConnectionString(string connectionString, IAuthenticationMethod authenticationMethod, TransportType transportType, IDeviceClientPipelineBuilder pipelineBuilder, ClientOptions options);
    internal static ITransportSettings[] GetTransportSettings(TransportType transportType);
    internal static InternalClient CreateFromConnectionString(string connectionString, IAuthenticationMethod authenticationMethod, ITransportSettings[] transportSettings, IDeviceClientPipelineBuilder pipelineBuilder, ClientOptions options);
    private static void EnsureOptionsIsSetup(X509Certificate2 cert, ClientOptions& options);
    private static IDeviceClientPipelineBuilder BuildPipeline();
    private static ITransportSettings[] PopulateCertificateInTransportSettings(IotHubConnectionStringBuilder connectionStringBuilder, TransportType transportType);
    private static ITransportSettings[] PopulateCertificateInTransportSettings(IotHubConnectionStringBuilder connectionStringBuilder, ITransportSettings[] transportSettings);
}
public class Microsoft.Azure.Devices.Client.ClientOptions : object {
    [CompilerGeneratedAttribute]
private string <ModelId>k__BackingField;
    [CompilerGeneratedAttribute]
private Http1TransportSettings <FileUploadTransportSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private SdkAssignsMessageId <SdkAssignsMessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <SasTokenTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SasTokenRenewalBuffer>k__BackingField;
    public string ModelId { get; public set; }
    public Http1TransportSettings FileUploadTransportSettings { get; public set; }
    public SdkAssignsMessageId SdkAssignsMessageId { get; public set; }
    public TimeSpan SasTokenTimeToLive { get; public set; }
    public int SasTokenRenewalBuffer { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ModelId();
    [CompilerGeneratedAttribute]
public void set_ModelId(string value);
    [CompilerGeneratedAttribute]
public Http1TransportSettings get_FileUploadTransportSettings();
    [CompilerGeneratedAttribute]
public void set_FileUploadTransportSettings(Http1TransportSettings value);
    [CompilerGeneratedAttribute]
public SdkAssignsMessageId get_SdkAssignsMessageId();
    [CompilerGeneratedAttribute]
public void set_SdkAssignsMessageId(SdkAssignsMessageId value);
    [CompilerGeneratedAttribute]
public TimeSpan get_SasTokenTimeToLive();
    [CompilerGeneratedAttribute]
public void set_SasTokenTimeToLive(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_SasTokenRenewalBuffer();
    [CompilerGeneratedAttribute]
public void set_SasTokenRenewalBuffer(int value);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Azure.Devices.Client.Common.Api.ApiResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string FailedToSerializeUnsupportedType { get; }
    internal static string HostNameIsNull { get; }
    internal static string InvalidPassword { get; }
    internal static string InvalidUser { get; }
    internal static string MessageBodyConsumed { get; }
    internal static string MessageDisposed { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_FailedToSerializeUnsupportedType();
    internal static string get_HostNameIsNull();
    internal static string get_InvalidPassword();
    internal static string get_InvalidUser();
    internal static string get_MessageBodyConsumed();
    internal static string get_MessageDisposed();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Azure.Devices.Client.Common.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActionItemIsAlreadyScheduled { get; }
    internal static string ArgumentMustBeNonNegative { get; }
    internal static string ArgumentMustBePositive { get; }
    internal static string ArgumentNullOrEmpty { get; }
    internal static string ArgumentNullOrWhiteSpace { get; }
    internal static string ArgumentOutOfRange { get; }
    internal static string AsyncCallbackThrewException { get; }
    internal static string AsyncResultAlreadyEnded { get; }
    internal static string AsyncResultCompletedTwice { get; }
    internal static string AsyncTransactionException { get; }
    internal static string BufferAllocationFailed { get; }
    internal static string BufferAlreadyReclaimed { get; }
    internal static string BufferIsNotRightSizeForBufferManager { get; }
    internal static string FailFastMessage { get; }
    internal static string InvalidAsyncResult { get; }
    internal static string InvalidAsyncResultImplementation { get; }
    internal static string InvalidAsyncResultImplementationGeneric { get; }
    internal static string InvalidBufferSize { get; }
    internal static string InvalidNullAsyncResult { get; }
    internal static string InvalidSemaphoreExit { get; }
    internal static string IOThreadTimerCannotAcceptMaxTimeSpan { get; }
    internal static string ObjectIsReadOnly { get; }
    internal static string OffsetExceedsBufferSize { get; }
    internal static string OperationTimeoutExpired { get; }
    internal static string ShipAssertExceptionMessage { get; }
    internal static string SizeExceedsRemainingBufferSpace { get; }
    internal static string StringIsNotBase64 { get; }
    internal static string TimeoutMustBeNonNegative { get; }
    internal static string TimeoutMustBePositive { get; }
    internal static string UserErrorFormat { get; }
    internal static string ValueMustBeNonNegative { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActionItemIsAlreadyScheduled();
    internal static string get_ArgumentMustBeNonNegative();
    internal static string get_ArgumentMustBePositive();
    internal static string get_ArgumentNullOrEmpty();
    internal static string get_ArgumentNullOrWhiteSpace();
    internal static string get_ArgumentOutOfRange();
    internal static string get_AsyncCallbackThrewException();
    internal static string get_AsyncResultAlreadyEnded();
    internal static string get_AsyncResultCompletedTwice();
    internal static string get_AsyncTransactionException();
    internal static string get_BufferAllocationFailed();
    internal static string get_BufferAlreadyReclaimed();
    internal static string get_BufferIsNotRightSizeForBufferManager();
    internal static string get_FailFastMessage();
    internal static string get_InvalidAsyncResult();
    internal static string get_InvalidAsyncResultImplementation();
    internal static string get_InvalidAsyncResultImplementationGeneric();
    internal static string get_InvalidBufferSize();
    internal static string get_InvalidNullAsyncResult();
    internal static string get_InvalidSemaphoreExit();
    internal static string get_IOThreadTimerCannotAcceptMaxTimeSpan();
    internal static string get_ObjectIsReadOnly();
    internal static string get_OffsetExceedsBufferSize();
    internal static string get_OperationTimeoutExpired();
    internal static string get_ShipAssertExceptionMessage();
    internal static string get_SizeExceedsRemainingBufferSpace();
    internal static string get_StringIsNotBase64();
    internal static string get_TimeoutMustBeNonNegative();
    internal static string get_TimeoutMustBePositive();
    internal static string get_UserErrorFormat();
    internal static string get_ValueMustBeNonNegative();
}
public class Microsoft.Azure.Devices.Client.Common.UrlEncodedDictionarySerializer : object {
    public static char KeyValueSeparator;
    public static char PropertySeparator;
    public static int PropertySeparatorLength;
    private static float EncodedSymbolsFactor;
    private IDictionary`2<string, string> _output;
    private Tokenizer _tokenizer;
    private UrlEncodedDictionarySerializer(IDictionary`2<string, string> output, string value, int startIndex);
    private void Deserialize();
    public static Dictionary`2<string, string> Deserialize(string value, int startIndex);
    public static void Deserialize(string value, int startIndex, IDictionary`2<string, string> properties);
    public static string Serialize(IEnumerable`1<KeyValuePair`2<string, string>> properties);
}
internal static class Microsoft.Azure.Devices.Client.CommonConstants : object {
    public static string DeviceAudienceFormat;
    public static string MediaTypeForDeviceManagementApis;
    public static string AmqpsScheme;
    public static string AmqpScheme;
    public static string AmqpDnsWSPrefix;
    public static int WindowsFabricRetryLimit;
    public static int WindowsFabricRetryWaitInMilliseconds;
    public static string IotHubApplicationName;
    public static string IotHubApplicationTypeName;
    public static string IotHubServiceTypeName;
    public static string IotHubMetadataParentName;
    public static string MicrosoftOwinContextPropertyName;
    public static int EventHubEndpointPortNumber;
    public static string EventHubConnectionStringTemplate;
    public static string ResourceProviderNamespace;
    public static string ResourceProviderServiceResourceType;
    public static string ResourceProviderBasePathTemplate;
    public static int RuntimeRetryLimit;
    public static int RuntimeRetryWaitInMilliseconds;
    public static string DeviceEventPathTemplate;
    public static string ModuleEventPathTemplate;
    public static string DeviceBoundPathTemplate;
    public static string ModuleBoundPathTemplate;
    public static string DeviceMethodPathTemplate;
    public static string ModuleMethodPathTemplate;
    public static string DeviceTwinPathTemplate;
    public static string ModuleTwinPathTemplate;
    public static string BlobUploadStatusPathTemplate;
    public static string BlobUploadPathTemplate;
    public static string DeviceBoundPathCompleteTemplate;
    public static string DeviceBoundPathAbandonTemplate;
    public static string DeviceBoundPathRejectTemplate;
    public static string ProvisioningStateSucceed;
    public static string ProvisioningStateFailed;
    public static string ProvisioningStateCanceled;
    public static string DeviceToCloudOperation;
    public static string CloudToDeviceOperation;
    public static string ApiVersionQueryParameterName;
    public static string PartitionCount;
    public static string TargetReplicaSetSize;
    public static string MinReplicaSetSize;
    public static string ContentTypeHeaderName;
    public static string ContentEncodingHeaderName;
    public static string BatchedMessageContentType;
    public static string IotHubServiceNamePrefix;
    public static string IotHubSystemStoreServiceName;
    public static string AdminUriFormat;
    public static string DefaultConfigurationKey;
    public static string SecurityMessageInterfaceId;
}
internal class Microsoft.Azure.Devices.Client.CommonResources : Resources {
    internal static string GetString(string value, Object[] args);
    internal static string GetNewStringGuid(string postfix);
}
internal class Microsoft.Azure.Devices.Client.CompletedAsyncResultT`1 : AsyncResult {
    private T _data;
    public CompletedAsyncResultT`1(T data, AsyncCallback callback, object state);
    public static T End(IAsyncResult result);
}
internal class Microsoft.Azure.Devices.Client.CompletedAsyncResultT2`2 : AsyncResult {
    private TResult _resultData;
    private TParameter _parameter;
    public CompletedAsyncResultT2`2(TResult resultData, TParameter parameter, AsyncCallback callback, object state);
    public static TResult End(IAsyncResult result, TParameter& parameter);
}
public enum Microsoft.Azure.Devices.Client.ConnectionStatus : Enum {
    public int value__;
    public static ConnectionStatus Disconnected;
    public static ConnectionStatus Connected;
    public static ConnectionStatus Disconnected_Retrying;
    public static ConnectionStatus Disabled;
}
public enum Microsoft.Azure.Devices.Client.ConnectionStatusChangeReason : Enum {
    public int value__;
    public static ConnectionStatusChangeReason Connection_Ok;
    public static ConnectionStatusChangeReason Expired_SAS_Token;
    public static ConnectionStatusChangeReason Device_Disabled;
    public static ConnectionStatusChangeReason Bad_Credential;
    public static ConnectionStatusChangeReason Retry_Expired;
    public static ConnectionStatusChangeReason No_Network;
    public static ConnectionStatusChangeReason Communication_Error;
    public static ConnectionStatusChangeReason Client_Close;
}
public class Microsoft.Azure.Devices.Client.ConnectionStatusChangesHandler : MulticastDelegate {
    public ConnectionStatusChangesHandler(object object, IntPtr method);
    public virtual void Invoke(ConnectionStatus status, ConnectionStatusChangeReason reason);
    public virtual IAsyncResult BeginInvoke(ConnectionStatus status, ConnectionStatusChangeReason reason, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Azure.Devices.Client.ContinuationFactory`1 : MulticastDelegate {
    public ContinuationFactory`1(object object, IntPtr method);
    public virtual T Invoke(PipelineContext context, IDelegatingHandler innerHandler);
    public virtual IAsyncResult BeginInvoke(PipelineContext context, IDelegatingHandler innerHandler, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
internal static class Microsoft.Azure.Devices.Client.CustomHeaderConstants : object {
    public static string CorrelationId;
    public static string MessageId;
    public static string To;
    public static string EnqueuedTime;
    public static string DeliveryCount;
    public static string ExpiryTimeUtc;
    public static string UserId;
    public static string Operation;
    public static string Ack;
    public static string MessageSchema;
    public static string CreationTimeUtc;
    public static string ContentEncoding;
    public static string ContentType;
    public static string MessageLockToken;
    public static string MessageLockTimeout;
    public static string SequenceNumber;
    public static string TrackingId;
    public static string HttpAppPropertyPrefix;
    public static string HttpIotHubName;
    public static string HttpIotHub;
    public static string HttpDevice;
    public static string ClientIpAddress;
    public static string PrincipalName;
    public static string ClientTenantId;
    public static string ClientAudience;
    public static string ClientIssuer;
    public static string ClientObjectId;
    public static string ClientAppId;
    public static string ClientRequestId;
    public static string ReturnClientRequestId;
    public static string ActivityId;
    public static string ApiVersion;
    public static string MicrosoftAsyncOperationHeaderName;
    public static string RequestId;
    public static string ModuleId;
    public static string InterfaceId;
    public static string ComponentName;
}
public enum Microsoft.Azure.Devices.Client.DeliveryAcknowledgement : Enum {
    public int value__;
    public static DeliveryAcknowledgement None;
    public static DeliveryAcknowledgement NegativeOnly;
    public static DeliveryAcknowledgement PositiveOnly;
    public static DeliveryAcknowledgement Full;
}
public class Microsoft.Azure.Devices.Client.DesiredPropertyUpdateCallback : MulticastDelegate {
    public DesiredPropertyUpdateCallback(object object, IntPtr method);
    public virtual Task Invoke(TwinCollection desiredProperties, object userContext);
    public virtual IAsyncResult BeginInvoke(TwinCollection desiredProperties, object userContext, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class Microsoft.Azure.Devices.Client.DeviceAuthenticationWithRegistrySymmetricKey : object {
    private string _deviceId;
    private Byte[] _key;
    public string DeviceId { get; public set; }
    public Byte[] Key { get; public set; }
    public string KeyAsBase64String { get; public set; }
    public DeviceAuthenticationWithRegistrySymmetricKey(string deviceId, string key);
    public string get_DeviceId();
    public void set_DeviceId(string value);
    public Byte[] get_Key();
    public void set_Key(Byte[] value);
    public string get_KeyAsBase64String();
    public void set_KeyAsBase64String(string value);
    public sealed virtual IotHubConnectionStringBuilder Populate(IotHubConnectionStringBuilder iotHubConnectionStringBuilder);
    private void SetKey(Byte[] key);
    private void SetKeyFromBase64String(string key);
    private void SetDeviceId(string deviceId);
}
internal class Microsoft.Azure.Devices.Client.DeviceAuthenticationWithSakRefresh : DeviceAuthenticationWithTokenRefresh {
    private IotHubConnectionString _connectionString;
    public DeviceAuthenticationWithSakRefresh(string deviceId, IotHubConnectionString connectionString);
    internal DeviceAuthenticationWithSakRefresh(string deviceId, IotHubConnectionString connectionString, TimeSpan sasTokenTimeToLive, int sasTokenRenewalBuffer, bool disposeWithClient);
    protected virtual Task`1<string> SafeCreateNewToken(string iotHub, int suggestedTimeToLive);
}
public class Microsoft.Azure.Devices.Client.DeviceAuthenticationWithSharedAccessPolicyKey : object {
    private string _deviceId;
    private string _policyName;
    private string _key;
    public string DeviceId { get; public set; }
    public string Key { get; public set; }
    public string PolicyName { get; public set; }
    public DeviceAuthenticationWithSharedAccessPolicyKey(string deviceId, string policyName, string key);
    public string get_DeviceId();
    public void set_DeviceId(string value);
    public string get_Key();
    public void set_Key(string value);
    public string get_PolicyName();
    public void set_PolicyName(string value);
    public sealed virtual IotHubConnectionStringBuilder Populate(IotHubConnectionStringBuilder iotHubConnectionStringBuilder);
    private void SetDeviceId(string deviceId);
    private void SetKey(string key);
    private void SetPolicyName(string policyName);
}
public class Microsoft.Azure.Devices.Client.DeviceAuthenticationWithToken : object {
    private string _deviceId;
    private string _token;
    public string DeviceId { get; public set; }
    public string Token { get; public set; }
    public DeviceAuthenticationWithToken(string deviceId, string token);
    public string get_DeviceId();
    public void set_DeviceId(string value);
    public string get_Token();
    public void set_Token(string value);
    public sealed virtual IotHubConnectionStringBuilder Populate(IotHubConnectionStringBuilder iotHubConnectionStringBuilder);
    private void SetDeviceId(string deviceId);
    private void SetToken(string token);
}
public abstract class Microsoft.Azure.Devices.Client.DeviceAuthenticationWithTokenRefresh : AuthenticationWithTokenRefresh {
    internal static int DefaultTimeToLiveSeconds;
    internal static int DefaultBufferPercentage;
    [CompilerGeneratedAttribute]
private string <DeviceId>k__BackingField;
    public string DeviceId { get; private set; }
    public DeviceAuthenticationWithTokenRefresh(string deviceId);
    public DeviceAuthenticationWithTokenRefresh(string deviceId, int suggestedTimeToLiveSeconds, int timeBufferPercentage);
    public DeviceAuthenticationWithTokenRefresh(string deviceId, int suggestedTimeToLiveSeconds, int timeBufferPercentage, bool disposeWithClient);
    [CompilerGeneratedAttribute]
public string get_DeviceId();
    [CompilerGeneratedAttribute]
private void set_DeviceId(string value);
    public virtual IotHubConnectionStringBuilder Populate(IotHubConnectionStringBuilder iotHubConnectionStringBuilder);
    private static int SetSasTokenSuggestedTimeToLiveSeconds(int suggestedTimeToLiveSeconds);
    private static int SetSasTokenRenewalBufferPercentage(int timeBufferPercentage);
}
public class Microsoft.Azure.Devices.Client.DeviceAuthenticationWithTpm : DeviceAuthenticationWithTokenRefresh {
    private SecurityProviderTpm _securityProvider;
    public DeviceAuthenticationWithTpm(string deviceId, SecurityProviderTpm securityProvider);
    public DeviceAuthenticationWithTpm(string deviceId, SecurityProviderTpm securityProvider, int suggestedTimeToLiveSeconds, int timeBufferPercentage);
    public DeviceAuthenticationWithTpm(string deviceId, SecurityProviderTpm securityProvider, int suggestedTimeToLiveSeconds, int timeBufferPercentage, bool disposeWithClient);
    protected virtual Task`1<string> SafeCreateNewToken(string iotHub, int suggestedTimeToLiveSeconds);
}
public class Microsoft.Azure.Devices.Client.DeviceAuthenticationWithX509Certificate : object {
    private string _deviceId;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2Collection <ChainCertificates>k__BackingField;
    public string DeviceId { get; public set; }
    public X509Certificate2 Certificate { get; public set; }
    public X509Certificate2Collection ChainCertificates { get; }
    public DeviceAuthenticationWithX509Certificate(string deviceId, X509Certificate2 certificate, X509Certificate2Collection chainCertificates);
    public string get_DeviceId();
    public void set_DeviceId(string value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public X509Certificate2Collection get_ChainCertificates();
    public sealed virtual IotHubConnectionStringBuilder Populate(IotHubConnectionStringBuilder iotHubConnectionStringBuilder);
    private void SetDeviceId(string deviceId);
    public sealed virtual void Dispose();
}
public class Microsoft.Azure.Devices.Client.DeviceClient : object {
    public static UInt32 DefaultOperationTimeoutInMilliseconds;
    [CompilerGeneratedAttribute]
private InternalClient <InternalClient>k__BackingField;
    internal IDelegatingHandler InnerHandler { get; internal set; }
    internal InternalClient InternalClient { get; private set; }
    public int DiagnosticSamplingPercentage { get; public set; }
    public UInt32 OperationTimeoutInMilliseconds { get; public set; }
    public string ProductInfo { get; public set; }
    [ObsoleteAttribute("This method has been deprecated.  Please use Microsoft.Azure.Devices.Client.SetRetryPolicy(IRetryPolicy retryPolicy) instead.")]
public RetryPolicyType RetryPolicy { get; public set; }
    private DeviceClient(InternalClient internalClient);
    public static DeviceClient Create(string hostname, IAuthenticationMethod authenticationMethod, ClientOptions options);
    public static DeviceClient Create(string hostname, string gatewayHostname, IAuthenticationMethod authenticationMethod, ClientOptions options);
    public static DeviceClient Create(string hostname, IAuthenticationMethod authenticationMethod, TransportType transportType, ClientOptions options);
    public static DeviceClient Create(string hostname, string gatewayHostname, IAuthenticationMethod authenticationMethod, TransportType transportType, ClientOptions options);
    public static DeviceClient Create(string hostname, IAuthenticationMethod authenticationMethod, ITransportSettings[] transportSettings, ClientOptions options);
    public static DeviceClient Create(string hostname, string gatewayHostname, IAuthenticationMethod authenticationMethod, ITransportSettings[] transportSettings, ClientOptions options);
    public static DeviceClient CreateFromConnectionString(string connectionString, ClientOptions options);
    public static DeviceClient CreateFromConnectionString(string connectionString, string deviceId, ClientOptions options);
    public static DeviceClient CreateFromConnectionString(string connectionString, TransportType transportType, ClientOptions options);
    public static DeviceClient CreateFromConnectionString(string connectionString, string deviceId, TransportType transportType, ClientOptions options);
    public static DeviceClient CreateFromConnectionString(string connectionString, ITransportSettings[] transportSettings, ClientOptions options);
    public static DeviceClient CreateFromConnectionString(string connectionString, string deviceId, ITransportSettings[] transportSettings, ClientOptions options);
    private static DeviceClient Create(Func`1<InternalClient> internalClientCreator);
    internal IDelegatingHandler get_InnerHandler();
    internal void set_InnerHandler(IDelegatingHandler value);
    [CompilerGeneratedAttribute]
internal InternalClient get_InternalClient();
    [CompilerGeneratedAttribute]
private void set_InternalClient(InternalClient value);
    public int get_DiagnosticSamplingPercentage();
    public void set_DiagnosticSamplingPercentage(int value);
    public UInt32 get_OperationTimeoutInMilliseconds();
    public void set_OperationTimeoutInMilliseconds(UInt32 value);
    public string get_ProductInfo();
    public void set_ProductInfo(string value);
    public RetryPolicyType get_RetryPolicy();
    public void set_RetryPolicy(RetryPolicyType value);
    public void SetRetryPolicy(IRetryPolicy retryPolicy);
    public Task OpenAsync();
    public Task OpenAsync(CancellationToken cancellationToken);
    public Task CloseAsync();
    public Task CloseAsync(CancellationToken cancellationToken);
    public Task`1<Message> ReceiveAsync();
    public Task`1<Message> ReceiveAsync(CancellationToken cancellationToken);
    public Task`1<Message> ReceiveAsync(TimeSpan timeout);
    public Task SetReceiveMessageHandlerAsync(ReceiveMessageCallback messageHandler, object userContext, CancellationToken cancellationToken);
    public Task CompleteAsync(string lockToken);
    public Task CompleteAsync(string lockToken, CancellationToken cancellationToken);
    public Task CompleteAsync(Message message);
    public Task CompleteAsync(Message message, CancellationToken cancellationToken);
    public Task AbandonAsync(string lockToken);
    public Task AbandonAsync(string lockToken, CancellationToken cancellationToken);
    public Task AbandonAsync(Message message);
    public Task AbandonAsync(Message message, CancellationToken cancellationToken);
    public Task RejectAsync(string lockToken);
    public Task RejectAsync(string lockToken, CancellationToken cancellationToken);
    public Task RejectAsync(Message message);
    public Task RejectAsync(Message message, CancellationToken cancellationToken);
    public Task SendEventAsync(Message message);
    public Task SendEventAsync(Message message, CancellationToken cancellationToken);
    public Task SendEventBatchAsync(IEnumerable`1<Message> messages);
    public Task SendEventBatchAsync(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    [ObsoleteAttribute("This API has been split into three APIs: GetFileUploadSasUri, uploading to blob directly using the Azure Storage SDK, and CompleteFileUploadAsync")]
public Task UploadToBlobAsync(string blobName, Stream source);
    [ObsoleteAttribute("This API has been split into three APIs: GetFileUploadSasUri, uploading to blob directly using the Azure Storage SDK, and CompleteFileUploadAsync")]
public Task UploadToBlobAsync(string blobName, Stream source, CancellationToken cancellationToken);
    public Task`1<FileUploadSasUriResponse> GetFileUploadSasUriAsync(FileUploadSasUriRequest request, CancellationToken cancellationToken);
    public Task CompleteFileUploadAsync(FileUploadCompletionNotification notification, CancellationToken cancellationToken);
    public Task SetMethodHandlerAsync(string methodName, MethodCallback methodHandler, object userContext);
    public Task SetMethodHandlerAsync(string methodName, MethodCallback methodHandler, object userContext, CancellationToken cancellationToken);
    public Task SetMethodDefaultHandlerAsync(MethodCallback methodHandler, object userContext);
    public Task SetMethodDefaultHandlerAsync(MethodCallback methodHandler, object userContext, CancellationToken cancellationToken);
    [ObsoleteAttribute("Please use SetMethodHandlerAsync.")]
public void SetMethodHandler(string methodName, MethodCallback methodHandler, object userContext);
    public void SetConnectionStatusChangesHandler(ConnectionStatusChangesHandler statusChangesHandler);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [ObsoleteAttribute("Please use SetDesiredPropertyUpdateCallbackAsync.")]
public Task SetDesiredPropertyUpdateCallback(DesiredPropertyUpdateCallback callback, object userContext);
    public Task SetDesiredPropertyUpdateCallbackAsync(DesiredPropertyUpdateCallback callback, object userContext);
    public Task SetDesiredPropertyUpdateCallbackAsync(DesiredPropertyUpdateCallback callback, object userContext, CancellationToken cancellationToken);
    public Task`1<Twin> GetTwinAsync();
    public Task`1<Twin> GetTwinAsync(CancellationToken cancellationToken);
    public Task UpdateReportedPropertiesAsync(TwinCollection reportedProperties);
    public Task UpdateReportedPropertiesAsync(TwinCollection reportedProperties, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Devices.Client.DeviceClientPipelineBuilder : object {
    private List`1<ContinuationFactory`1<IDelegatingHandler>> _pipeline;
    public sealed virtual IDeviceClientPipelineBuilder With(ContinuationFactory`1<IDelegatingHandler> delegatingHandlerCreator);
    public sealed virtual IDelegatingHandler Build(PipelineContext context);
}
internal class Microsoft.Azure.Devices.Client.Edge.CustomCertificateValidator : object {
    private IEnumerable`1<X509Certificate2> _certs;
    private ITransportSettings[] _transportSettings;
    private CustomCertificateValidator(IList`1<X509Certificate2> certs, ITransportSettings[] transportSettings);
    public static CustomCertificateValidator Create(IList`1<X509Certificate2> certs, ITransportSettings[] transportSettings);
    public sealed virtual Func`5<object, X509Certificate, X509Chain, SslPolicyErrors, bool> GetCustomCertificateValidation();
    private void SetupCertificateValidation();
    private static bool ValidateCertificate(X509Certificate2 trustedCertificate, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    [CompilerGeneratedAttribute]
private bool <GetCustomCertificateValidation>b__4_0(object sender, X509Certificate cert, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    [CompilerGeneratedAttribute]
private bool <SetupCertificateValidation>b__5_0(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    [CompilerGeneratedAttribute]
private bool <SetupCertificateValidation>b__5_1(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
}
internal class Microsoft.Azure.Devices.Client.Edge.EdgeModuleClientFactory : object {
    private static string DefaultApiVersion;
    private static string IotEdgeWorkloadUriVariableName;
    private static string IotHubHostNameVariableName;
    private static string GatewayHostNameVariableName;
    private static string DeviceIdVariableName;
    private static string ModuleIdVariableName;
    private static string ModuleGenerationIdVariableName;
    private static string AuthSchemeVariableName;
    private static string SasTokenAuthScheme;
    private static string EdgeHubConnectionStringVariableName;
    private static string IotHubConnectionStringVariableName;
    private static string EdgeCaCertificateFileVariableName;
    private ITransportSettings[] _transportSettings;
    private ITrustBundleProvider _trustBundleProvider;
    private ClientOptions _options;
    public EdgeModuleClientFactory(ITransportSettings[] transportSettings, ITrustBundleProvider trustBundleProvider, ClientOptions options);
    public Task`1<ModuleClient> CreateAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Edge.EdgeModuleClientFactory/<CreateInternalClientFromEnvironmentAsync>d__17")]
private Task`1<ModuleClient> CreateInternalClientFromEnvironmentAsync();
    private ICertificateValidator GetCertificateValidator(IList`1<X509Certificate2> certs);
    private InternalClient CreateInternalClientFromConnectionString(string connectionString, ClientOptions options);
    private InternalClient CreateInternalClientFromAuthenticationMethod(string hostname, string gateway, IAuthenticationMethod authMethod, ClientOptions options);
    private static string GetValueFromEnvironment(IDictionary envVariables, string variableName);
}
internal interface Microsoft.Azure.Devices.Client.Edge.ICertificateValidator {
    public abstract virtual Func`5<object, X509Certificate, X509Chain, SslPolicyErrors, bool> GetCustomCertificateValidation();
}
internal class Microsoft.Azure.Devices.Client.Edge.InstalledCertificateValidator : object {
    private IList`1<X509Certificate2> _certs;
    private InstalledCertificateValidator(IList`1<X509Certificate2> certs);
    public static InstalledCertificateValidator Create(IList`1<X509Certificate2> certs);
    public sealed virtual Func`5<object, X509Certificate, X509Chain, SslPolicyErrors, bool> GetCustomCertificateValidation();
    private void SetupCertificateValidation();
}
internal interface Microsoft.Azure.Devices.Client.Edge.ITrustBundleProvider {
    public abstract virtual Task`1<IList`1<X509Certificate2>> GetTrustBundleAsync(Uri providerUri, string defaultApiVersion);
}
internal class Microsoft.Azure.Devices.Client.Edge.NullCertificateValidator : object {
    [CompilerGeneratedAttribute]
private static NullCertificateValidator <Instance>k__BackingField;
    public static NullCertificateValidator Instance { get; }
    private static NullCertificateValidator();
    [CompilerGeneratedAttribute]
public static NullCertificateValidator get_Instance();
    public sealed virtual Func`5<object, X509Certificate, X509Chain, SslPolicyErrors, bool> GetCustomCertificateValidation();
}
internal class Microsoft.Azure.Devices.Client.Edge.TrustBundleProvider : object {
    private static ITransientErrorDetectionStrategy s_transientErrorDetectionStrategy;
    private static RetryStrategy s_transientRetryStrategy;
    private static TrustBundleProvider();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Edge.TrustBundleProvider/<GetTrustBundleAsync>d__2")]
public sealed virtual Task`1<IList`1<X509Certificate2>> GetTrustBundleAsync(Uri providerUri, string apiVersion);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Edge.TrustBundleProvider/<GetTrustBundleWithRetryAsync>d__3")]
private static Task`1<TrustBundleResponse> GetTrustBundleWithRetryAsync(HttpHsmClient hsmHttpClient, string apiVersion);
    internal static IList`1<X509Certificate2> ParseCertificates(string pemCerts);
}
internal class Microsoft.Azure.Devices.Client.EventTraceActivity : object {
    private static EventTraceActivity s_empty;
    internal Guid _activityId;
    public static EventTraceActivity Empty { get; }
    public static string Name { get; }
    public EventTraceActivity(Guid activityId);
    public static EventTraceActivity get_Empty();
    public static string get_Name();
    public static EventTraceActivity CreateFromThread();
}
internal class Microsoft.Azure.Devices.Client.ExceptionDispatcher : object {
    public static void Throw(Exception exception);
}
public class Microsoft.Azure.Devices.Client.Exceptions.DeviceMaximumQueueDepthExceededException : IotHubException {
    public DeviceMaximumQueueDepthExceededException(int maximumQueueDepth);
    public DeviceMaximumQueueDepthExceededException(string message);
    public DeviceMaximumQueueDepthExceededException(string message, Exception innerException);
    private DeviceMaximumQueueDepthExceededException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Azure.Devices.Client.Exceptions.DeviceMessageLockLostException : IotHubException {
    public DeviceMessageLockLostException(string message);
    public DeviceMessageLockLostException(string deviceId, Guid messageId);
    public DeviceMessageLockLostException(string message, Exception innerException);
    protected DeviceMessageLockLostException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Azure.Devices.Client.Exceptions.DeviceNotFoundException : IotHubException {
    public DeviceNotFoundException(string deviceId);
    public DeviceNotFoundException(string deviceId, string iotHubName);
    public DeviceNotFoundException(string deviceId, string iotHubName, string trackingId);
    public DeviceNotFoundException(string message, Exception innerException);
    public DeviceNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Azure.Devices.Client.Exceptions.ExceptionHandlingHelper : object {
    public static IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> GetDefaultErrorMapping();
    public static Task`1<string> GetExceptionMessageAsync(HttpResponseMessage response);
}
internal class Microsoft.Azure.Devices.Client.Exceptions.FatalException : Exception {
    public FatalException(string message);
    public FatalException(string message, Exception innerException);
    protected FatalException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Azure.Devices.Client.Exceptions.IotHubCommunicationException : IotHubException {
    public IotHubCommunicationException(string message);
    public IotHubCommunicationException(string message, Exception innerException);
    private IotHubCommunicationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Azure.Devices.Client.Exceptions.IotHubException : Exception {
    private static string IsTransientValueSerializationStoreName;
    private static string TrackingIdValueSerializationStoreName;
    [CompilerGeneratedAttribute]
private bool <IsTransient>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TrackingId>k__BackingField;
    public bool IsTransient { get; protected set; }
    public string TrackingId { get; public set; }
    public IotHubException(string message);
    public IotHubException(string message, string trackingId);
    public IotHubException(string message, bool isTransient, string trackingId);
    public IotHubException(string message, bool isTransient);
    public IotHubException(Exception innerException);
    public IotHubException(string message, Exception innerException);
    protected IotHubException(string message, Exception innerException, bool isTransient);
    protected IotHubException(string message, Exception innerException, bool isTransient, string trackingId);
    protected IotHubException(SerializationInfo info, StreamingContext context);
    internal IotHubException(bool isTransient);
    [CompilerGeneratedAttribute]
public bool get_IsTransient();
    [CompilerGeneratedAttribute]
protected void set_IsTransient(bool value);
    [CompilerGeneratedAttribute]
public string get_TrackingId();
    [CompilerGeneratedAttribute]
public void set_TrackingId(string value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Azure.Devices.Client.Exceptions.IotHubSuspendedException : IotHubException {
    public IotHubSuspendedException(string iotHubName);
    public IotHubSuspendedException(string iotHubName, string trackingId);
    public IotHubSuspendedException(string message, Exception innerException);
    protected IotHubSuspendedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Azure.Devices.Client.Exceptions.IotHubThrottledException : IotHubException {
    public IotHubThrottledException(string message);
    public IotHubThrottledException(int maximumBatchCount);
    public IotHubThrottledException(string message, Exception innerException);
    private IotHubThrottledException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Azure.Devices.Client.Exceptions.MessageTooLargeException : IotHubException {
    public MessageTooLargeException(int maximumMessageSizeInBytes);
    public MessageTooLargeException(string message);
    public MessageTooLargeException(string message, Exception innerException);
    private MessageTooLargeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Azure.Devices.Client.Exceptions.QuotaExceededException : IotHubException {
    public QuotaExceededException(string message);
    public QuotaExceededException(string message, Exception innerException);
    private QuotaExceededException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Azure.Devices.Client.Exceptions.ServerBusyException : IotHubException {
    public ServerBusyException(string message);
    public ServerBusyException(string message, Exception innerException);
    private ServerBusyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Azure.Devices.Client.Exceptions.ServerErrorException : IotHubException {
    public ServerErrorException(string message);
    public ServerErrorException(string message, Exception innerException);
    private ServerErrorException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Azure.Devices.Client.Exceptions.UnauthorizedException : IotHubException {
    public UnauthorizedException(string message);
    public UnauthorizedException(string message, Exception innerException);
    private UnauthorizedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Azure.Devices.Client.ExceptionTrace : object {
    private string _eventSourceName;
    public ExceptionTrace(string eventSourceName);
    public Exception AsError(Exception exception);
    public Exception AsInformation(Exception exception);
    public Exception AsWarning(Exception exception);
    public Exception AsVerbose(Exception exception);
    public ArgumentException Argument(string paramName, string message);
    public ArgumentNullException ArgumentNull(string paramName);
    public ArgumentNullException ArgumentNull(string paramName, string message);
    public ArgumentOutOfRangeException ArgumentOutOfRange(string paramName, object actualValue, string message);
    public ObjectDisposedException ObjectDisposed(string message);
    public void TraceHandled(Exception exception, string catchLocation);
    public TException TraceException(TException exception, TraceEventType level);
    public static string GetDetailsForThrownException(Exception e);
    internal void BreakOnException(Exception exception);
}
public class Microsoft.Azure.Devices.Client.ExponentialBackoff : object {
    private ExponentialBackoffRetryStrategy _exponentialBackoffRetryStrategy;
    public ExponentialBackoff(int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public sealed virtual bool ShouldRetry(int currentRetryCount, Exception lastException, TimeSpan& retryInterval);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Devices.Client.Extensions.CommonExtensionMethods : object {
    private static char ValuePairDelimiter;
    private static char ValuePairSeparator;
    private static Regex s_trimWhiteSpace;
    private static CommonExtensionMethods();
    [ExtensionAttribute]
public static string EnsureStartsWith(string value, char prefix);
    [ExtensionAttribute]
public static string GetValueOrDefault(IDictionary`2<string, string> map, string keyName);
    [ExtensionAttribute]
public static IDictionary`2<string, string> ToDictionary(string valuePairString, char kvpDelimiter, char kvpSeparator);
    [ExtensionAttribute]
public static bool TryGetIotHubName(HttpRequestMessage requestMessage, String& iotHubName);
    [ExtensionAttribute]
public static string GetIotHubName(HttpRequestMessage requestMessage);
    [ExtensionAttribute]
public static void AppendKeyValuePairIfNotEmpty(StringBuilder builder, string name, object value);
    [ExtensionAttribute]
public static int NthIndexOf(string str, char value, int startIndex, int n);
    [ExtensionAttribute]
public static string TrimWhiteSpace(string input);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Devices.Client.Extensions.ExceptionExtensions : object {
    private static string ExceptionIdentifierName;
    private static MethodInfo prepForRemotingMethodInfo;
    [ExtensionAttribute]
public static bool IsFatal(Exception exception);
    [IteratorStateMachineAttribute("Microsoft.Azure.Devices.Client.Extensions.ExceptionExtensions/<Unwind>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<Exception> Unwind(Exception exception, bool unwindAggregate);
    [ExtensionAttribute]
public static IEnumerable`1<TException> Unwind(Exception exception);
    [ExtensionAttribute]
public static Exception PrepareForRethrow(Exception exception);
    [ExtensionAttribute]
public static Exception DisablePrepareForRethrow(Exception exception);
    [ExtensionAttribute]
public static string ToStringSlim(Exception exception);
    [ExtensionAttribute]
public static string GetReferenceCode(Exception exception);
    private static bool ShouldPrepareForRethrow(Exception exception);
    [ExtensionAttribute]
public static void ThrowIfNull(object argumentValue, string argumentName);
    [ExtensionAttribute]
public static void ThrowIfNullOrWhiteSpace(string argumentValue, string argumentName);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Devices.Client.Extensions.StringFormattingExtensions : object {
    [ExtensionAttribute]
public static string FormatInvariant(string format, Object[] args);
}
internal class Microsoft.Azure.Devices.Client.Extensions.TryParse`2 : MulticastDelegate {
    public TryParse`2(object object, IntPtr method);
    public virtual bool Invoke(TInput input, bool ignoreCase, TOutput& output);
    public virtual IAsyncResult BeginInvoke(TInput input, bool ignoreCase, TOutput& output, AsyncCallback callback, object object);
    public virtual bool EndInvoke(TOutput& output, IAsyncResult result);
}
internal static class Microsoft.Azure.Devices.Client.Fx : object {
    private static string DefaultEventSource;
    private static ExceptionTrace s_exceptionTrace;
    public static ExceptionTrace Exception { get; }
    public static ExceptionTrace get_Exception();
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool condition, string description);
    [ConditionalAttribute("DEBUG")]
public static void Assert(string description);
    public static void AssertAndThrow(bool condition, string description);
    public static void AssertAndThrowFatal(bool condition, string description);
    public static Exception AssertAndThrowFatal(string description);
    public static bool IsFatal(Exception ex);
    private static bool HandleAtThreadBase(Exception exception);
}
internal static class Microsoft.Azure.Devices.Client.FxCop : object {
}
internal static class Microsoft.Azure.Devices.Client.FxTrace : object {
    private static string EventSourceName;
    private static ExceptionTrace s_exceptionTrace;
    public static ExceptionTrace Exception { get; }
    public static ExceptionTrace get_Exception();
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.CertificateResponse : object {
    private PrivateKey _privateKey;
    private string _certificate;
    private DateTime _expiration;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [JsonPropertyAttribute]
public PrivateKey PrivateKey { get; public set; }
    [JsonPropertyAttribute]
public string Certificate { get; public set; }
    [JsonPropertyAttribute]
public DateTime Expiration { get; public set; }
    public PrivateKey get_PrivateKey();
    public void set_PrivateKey(PrivateKey value);
    public string get_Certificate();
    public void set_Certificate(string value);
    public DateTime get_Expiration();
    public void set_Expiration(DateTime value);
    public string ToJson();
    public static CertificateResponse FromJson(string data);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void RaisePropertyChanged(string propertyName);
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.DecryptRequest : object {
    private Byte[] _ciphertext;
    private Byte[] _initializationVector;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [JsonPropertyAttribute]
public Byte[] Ciphertext { get; public set; }
    [JsonPropertyAttribute]
public Byte[] InitializationVector { get; public set; }
    public Byte[] get_Ciphertext();
    public void set_Ciphertext(Byte[] value);
    public Byte[] get_InitializationVector();
    public void set_InitializationVector(Byte[] value);
    public string ToJson();
    public static DecryptRequest FromJson(string data);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void RaisePropertyChanged(string propertyName);
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.DecryptResponse : object {
    private Byte[] _plaintext;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [JsonPropertyAttribute]
public Byte[] Plaintext { get; public set; }
    public Byte[] get_Plaintext();
    public void set_Plaintext(Byte[] value);
    public string ToJson();
    public static DecryptResponse FromJson(string data);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void RaisePropertyChanged(string propertyName);
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.EncryptRequest : object {
    private Byte[] _plaintext;
    private Byte[] _initializationVector;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [JsonPropertyAttribute]
public Byte[] Plaintext { get; public set; }
    [JsonPropertyAttribute]
public Byte[] InitializationVector { get; public set; }
    public Byte[] get_Plaintext();
    public void set_Plaintext(Byte[] value);
    public Byte[] get_InitializationVector();
    public void set_InitializationVector(Byte[] value);
    public string ToJson();
    public static EncryptRequest FromJson(string data);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void RaisePropertyChanged(string propertyName);
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.EncryptResponse : object {
    private Byte[] _ciphertext;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [JsonPropertyAttribute]
public Byte[] Ciphertext { get; public set; }
    public Byte[] get_Ciphertext();
    public void set_Ciphertext(Byte[] value);
    public string ToJson();
    public static EncryptResponse FromJson(string data);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void RaisePropertyChanged(string propertyName);
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.ErrorResponse : object {
    private string _message;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [JsonPropertyAttribute]
public string Message { get; public set; }
    public string get_Message();
    public void set_Message(string value);
    public string ToJson();
    public static ErrorResponse FromJson(string data);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void RaisePropertyChanged(string propertyName);
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.HttpHsmClient : object {
    private string _baseUrl;
    private HttpClient _httpClient;
    private Lazy`1<JsonSerializerSettings> _settings;
    public string BaseUrl { get; public set; }
    protected JsonSerializerSettings JsonSerializerSettings { get; }
    public HttpHsmClient(HttpClient httpClient);
    public string get_BaseUrl();
    public void set_BaseUrl(string value);
    protected JsonSerializerSettings get_JsonSerializerSettings();
    public Task`1<SignResponse> SignAsync(string api_version, string name, string genid, SignRequest payload);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.HttpHsmClient/<SignAsync>d__14")]
public Task`1<SignResponse> SignAsync(string api_version, string name, string genid, SignRequest payload, CancellationToken cancellationToken);
    public Task`1<EncryptResponse> EncryptAsync(string api_version, string name, string genid, EncryptRequest payload);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.HttpHsmClient/<EncryptAsync>d__16")]
public Task`1<EncryptResponse> EncryptAsync(string api_version, string name, string genid, EncryptRequest payload, CancellationToken cancellationToken);
    public Task`1<DecryptResponse> DecryptAsync(string api_version, string name, string genid, DecryptRequest payload);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.HttpHsmClient/<DecryptAsync>d__18")]
public Task`1<DecryptResponse> DecryptAsync(string api_version, string name, string genid, DecryptRequest payload, CancellationToken cancellationToken);
    public Task`1<CertificateResponse> CreateIdentityCertificateAsync(string api_version, string name, string genid);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.HttpHsmClient/<CreateIdentityCertificateAsync>d__20")]
public Task`1<CertificateResponse> CreateIdentityCertificateAsync(string api_version, string name, string genid, CancellationToken cancellationToken);
    public Task`1<CertificateResponse> CreateServerCertificateAsync(string api_version, string name, string genid, ServerCertificateRequest request);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.HttpHsmClient/<CreateServerCertificateAsync>d__22")]
public Task`1<CertificateResponse> CreateServerCertificateAsync(string api_version, string name, string genid, ServerCertificateRequest request, CancellationToken cancellationToken);
    public Task`1<TrustBundleResponse> TrustBundleAsync(string api_version);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.HttpHsmClient/<TrustBundleAsync>d__24")]
public Task`1<TrustBundleResponse> TrustBundleAsync(string api_version, CancellationToken cancellationToken);
    private string ConvertToString(object value, CultureInfo cultureInfo);
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.PrivateKey : object {
    private PrivateKeyType _type;
    private string _ref;
    private string _bytes;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public PrivateKeyType Type { get; public set; }
    [JsonPropertyAttribute]
public string Ref { get; public set; }
    [JsonPropertyAttribute]
public string Bytes { get; public set; }
    public PrivateKeyType get_Type();
    public void set_Type(PrivateKeyType value);
    public string get_Ref();
    public void set_Ref(string value);
    public string get_Bytes();
    public void set_Bytes(string value);
    public string ToJson();
    public static PrivateKey FromJson(string data);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void RaisePropertyChanged(string propertyName);
}
internal enum Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.PrivateKeyType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static PrivateKeyType Ref;
    [EnumMemberAttribute]
public static PrivateKeyType Key;
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.ServerCertificateRequest : object {
    private string _commonName;
    private DateTime _expiration;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [JsonPropertyAttribute]
public string CommonName { get; public set; }
    [JsonPropertyAttribute]
public DateTime Expiration { get; public set; }
    public string get_CommonName();
    public void set_CommonName(string value);
    public DateTime get_Expiration();
    public void set_Expiration(DateTime value);
    public string ToJson();
    public static ServerCertificateRequest FromJson(string data);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void RaisePropertyChanged(string propertyName);
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.SignRequest : object {
    private string _keyId;
    private SignRequestAlgo _algo;
    private Byte[] _data;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [JsonPropertyAttribute]
public string KeyId { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public SignRequestAlgo Algo { get; public set; }
    [JsonPropertyAttribute]
public Byte[] Data { get; public set; }
    public string get_KeyId();
    public void set_KeyId(string value);
    public SignRequestAlgo get_Algo();
    public void set_Algo(SignRequestAlgo value);
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    public string ToJson();
    public static SignRequest FromJson(string data);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void RaisePropertyChanged(string propertyName);
}
internal enum Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.SignRequestAlgo : Enum {
    public int value__;
    [EnumMemberAttribute]
public static SignRequestAlgo HMACSHA256;
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.SignResponse : object {
    private Byte[] _digest;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [JsonPropertyAttribute]
public Byte[] Digest { get; public set; }
    public Byte[] get_Digest();
    public void set_Digest(Byte[] value);
    public string ToJson();
    public static SignResponse FromJson(string data);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void RaisePropertyChanged(string propertyName);
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.SwaggerException : Exception {
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IEnumerable`1<string>> <Headers>k__BackingField;
    public int StatusCode { get; private set; }
    public string Response { get; private set; }
    public Dictionary`2<string, IEnumerable`1<string>> Headers { get; private set; }
    public SwaggerException(string message, int statusCode, string response, Dictionary`2<string, IEnumerable`1<string>> headers, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public string get_Response();
    [CompilerGeneratedAttribute]
private void set_Response(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IEnumerable`1<string>> get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(Dictionary`2<string, IEnumerable`1<string>> value);
    public virtual string ToString();
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.SwaggerException`1 : SwaggerException {
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    public TResult Result { get; private set; }
    public SwaggerException`1(string message, int statusCode, string response, Dictionary`2<string, IEnumerable`1<string>> headers, TResult result, Exception innerException);
    [CompilerGeneratedAttribute]
public TResult get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(TResult value);
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode.TrustBundleResponse : object {
    private string _certificate;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [JsonPropertyAttribute]
public string Certificate { get; public set; }
    public string get_Certificate();
    public void set_Certificate(string value);
    public string ToJson();
    public static TrustBundleResponse FromJson(string data);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void RaisePropertyChanged(string propertyName);
}
internal static class Microsoft.Azure.Devices.Client.HsmAuthentication.HttpClientHelper : object {
    private static string HttpScheme;
    private static string HttpsScheme;
    private static string UnixScheme;
    public static HttpClient GetHttpClient(Uri providerUri);
    public static string GetBaseUrl(Uri providerUri);
}
public class Microsoft.Azure.Devices.Client.HsmAuthentication.HttpHsmComunicationException : Exception {
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    public int StatusCode { get; }
    public HttpHsmComunicationException(string message, int statusCode);
    protected HttpHsmComunicationException(SerializationInfo info, StreamingContext context);
    internal HttpHsmComunicationException(string message);
    internal HttpHsmComunicationException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.HttpHsmSignatureProvider : object {
    private static SignRequestAlgo DefaultSignRequestAlgo;
    private static string DefaultKeyId;
    private string _apiVersion;
    private Uri _providerUri;
    private static ITransientErrorDetectionStrategy s_transientErrorDetectionStrategy;
    private static RetryStrategy s_transientRetryStrategy;
    public HttpHsmSignatureProvider(string providerUri, string apiVersion);
    private static HttpHsmSignatureProvider();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.HttpHsmSignatureProvider/<SignAsync>d__7")]
public sealed virtual Task`1<string> SignAsync(string moduleId, string generationId, string data);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.HttpHsmSignatureProvider/<SignAsyncWithRetryAsync>d__8")]
private Task`1<SignResponse> SignAsyncWithRetryAsync(HttpHsmClient hsmHttpClient, string moduleId, string generationId, SignRequest signRequest);
}
internal interface Microsoft.Azure.Devices.Client.HsmAuthentication.ISignatureProvider {
    public abstract virtual Task`1<string> SignAsync(string moduleId, string generationId, string data);
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.ModuleAuthenticationWithHsm : ModuleAuthenticationWithTokenRefresh {
    private ISignatureProvider _signatureProvider;
    private string _generationId;
    internal ModuleAuthenticationWithHsm(ISignatureProvider signatureProvider, string deviceId, string moduleId, string generationId);
    internal ModuleAuthenticationWithHsm(ISignatureProvider signatureProvider, string deviceId, string moduleId, string generationId, TimeSpan sasTokenTimeToLive, int sasTokenRenewalBuffer, bool disposeWithClient);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.ModuleAuthenticationWithHsm/<SafeCreateNewToken>d__4")]
protected virtual Task`1<string> SafeCreateNewToken(string iotHub, int suggestedTimeToLive);
}
internal static class Microsoft.Azure.Devices.Client.HsmAuthentication.SasTokenBuilder : object {
    public static string BuildSasToken(string audience, string signature, string expiry);
    public static string BuildExpiresOn(DateTime startTime, TimeSpan timeToLive);
    public static string BuildAudience(string iotHub, string deviceId, string moduleId);
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.Transport.HttpBufferedStream : Stream {
    private static char CR;
    private static char LF;
    private Stream _innerStream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public HttpBufferedStream(Stream stream);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.Transport.HttpBufferedStream/<ReadLineAsync>d__8")]
public Task`1<string> ReadLineAsync(CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.Transport.HttpRequestResponseSerializer : object {
    private static char Space;
    private static char CarriageReturn;
    private static char LineFeed;
    private static char ProtocolVersionSeparator;
    private static string Protocol;
    private static char HeaderSeparator;
    private static string ContentLengthHeaderName;
    public static Byte[] SerializeRequest(HttpRequestMessage request);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.Transport.HttpRequestResponseSerializer/<DeserializeResponseAsync>d__8")]
public static Task`1<HttpResponseMessage> DeserializeResponseAsync(HttpBufferedStream bufferedStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.Transport.HttpRequestResponseSerializer/<SetHeadersAndContentAsync>d__9")]
private static Task SetHeadersAndContentAsync(HttpResponseMessage httpResponse, HttpBufferedStream bufferedStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.Transport.HttpRequestResponseSerializer/<SetResponseStatusLineAsync>d__10")]
private static Task SetResponseStatusLineAsync(HttpResponseMessage httpResponse, HttpBufferedStream bufferedStream, CancellationToken cancellationToken);
    private static void PreProcessRequest(HttpRequestMessage request);
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.Transport.HttpUdsMessageHandler : HttpMessageHandler {
    private Uri _providerUri;
    public HttpUdsMessageHandler(Uri providerUri);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.Transport.HttpUdsMessageHandler/<SendAsync>d__2")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.HsmAuthentication.Transport.HttpUdsMessageHandler/<GetConnectedSocketAsync>d__3")]
private Task`1<Socket> GetConnectedSocketAsync();
}
internal class Microsoft.Azure.Devices.Client.HsmAuthentication.Transport.UnixDomainSocketEndPoint : EndPoint {
    private static AddressFamily EndPointAddressFamily;
    private static Encoding s_pathEncoding;
    private static int NativePathOffset;
    private static int NativePathLength;
    private static int NativeAddressSize;
    private string _path;
    private Byte[] _encodedPath;
    public AddressFamily AddressFamily { get; }
    public UnixDomainSocketEndPoint(string path);
    internal UnixDomainSocketEndPoint(SocketAddress socketAddress);
    private static UnixDomainSocketEndPoint();
    public virtual SocketAddress Serialize();
    public virtual EndPoint Create(SocketAddress socketAddress);
    public virtual AddressFamily get_AddressFamily();
    public virtual string ToString();
}
public class Microsoft.Azure.Devices.Client.Http1TransportSettings : object {
    private static TimeSpan s_defaultOperationTimeout;
    [CompilerGeneratedAttribute]
private X509Certificate2 <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <HttpClient>k__BackingField;
    public X509Certificate2 ClientCertificate { get; public set; }
    public TimeSpan DefaultReceiveTimeout { get; }
    public IWebProxy Proxy { get; public set; }
    public HttpClient HttpClient { get; public set; }
    private static Http1TransportSettings();
    public sealed virtual TransportType GetTransportType();
    [CompilerGeneratedAttribute]
public X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public void set_ClientCertificate(X509Certificate2 value);
    public sealed virtual TimeSpan get_DefaultReceiveTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual IWebProxy get_Proxy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Proxy(IWebProxy value);
    [CompilerGeneratedAttribute]
public HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
public void set_HttpClient(HttpClient value);
}
public interface Microsoft.Azure.Devices.Client.IAuthenticationMethod {
    public abstract virtual IotHubConnectionStringBuilder Populate(IotHubConnectionStringBuilder iotHubConnectionStringBuilder);
}
internal interface Microsoft.Azure.Devices.Client.IAuthorizationProvider {
    public abstract virtual Task`1<string> GetPasswordAsync();
}
internal interface Microsoft.Azure.Devices.Client.IContinuationProvider`1 {
    public ContinuationFactory`1<T> ContinuationFactory { get; public set; }
    public abstract virtual ContinuationFactory`1<T> get_ContinuationFactory();
    public abstract virtual void set_ContinuationFactory(ContinuationFactory`1<T> value);
}
internal interface Microsoft.Azure.Devices.Client.IDelegatingHandler {
    public bool IsUsable { get; }
    public abstract virtual Task OpenAsync(TimeoutHelper timeoutHelper);
    public abstract virtual Task OpenAsync(CancellationToken cancellationToken);
    public abstract virtual Task CloseAsync(CancellationToken cancellationToken);
    public abstract virtual Task WaitForTransportClosedAsync();
    public abstract virtual bool get_IsUsable();
    public abstract virtual Task SendEventAsync(Message message, CancellationToken cancellationToken);
    public abstract virtual Task SendEventAsync(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    public abstract virtual Task`1<Message> ReceiveAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<Message> ReceiveAsync(TimeoutHelper timeoutHelper);
    public abstract virtual Task EnableReceiveMessageAsync(CancellationToken cancellationToken);
    public abstract virtual Task EnsurePendingMessagesAreDeliveredAsync(CancellationToken cancellationToken);
    public abstract virtual Task DisableReceiveMessageAsync(CancellationToken cancellationToken);
    public abstract virtual Task RejectAsync(string lockToken, CancellationToken cancellationToken);
    public abstract virtual Task AbandonAsync(string lockToken, CancellationToken cancellationToken);
    public abstract virtual Task CompleteAsync(string lockToken, CancellationToken cancellationToken);
    public abstract virtual Task EnableEventReceiveAsync(bool isAnEdgeModule, CancellationToken cancellationToken);
    public abstract virtual Task DisableEventReceiveAsync(bool isAnEdgeModule, CancellationToken cancellationToken);
    public abstract virtual Task EnableMethodsAsync(CancellationToken cancellationToken);
    public abstract virtual Task DisableMethodsAsync(CancellationToken cancellationToken);
    public abstract virtual Task SendMethodResponseAsync(MethodResponseInternal methodResponse, CancellationToken cancellationToken);
    public abstract virtual Task`1<Twin> SendTwinGetAsync(CancellationToken cancellationToken);
    public abstract virtual Task SendTwinPatchAsync(TwinCollection reportedProperties, CancellationToken cancellationToken);
    public abstract virtual Task EnableTwinPatchAsync(CancellationToken cancellationToken);
    public abstract virtual Task DisableTwinPatchAsync(CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Devices.Client.IDeviceClientPipelineBuilder {
    public abstract virtual IDeviceClientPipelineBuilder With(ContinuationFactory`1<IDelegatingHandler> delegatingHandlerCreator);
    public abstract virtual IDelegatingHandler Build(PipelineContext context);
}
internal class Microsoft.Azure.Devices.Client.InternalClient : object {
    private SemaphoreSlim _methodsSemaphore;
    private SemaphoreSlim _deviceReceiveMessageSemaphore;
    private SemaphoreSlim _moduleReceiveMessageSemaphore;
    private SemaphoreSlim _twinDesiredPropertySemaphore;
    private ProductInfo _productInfo;
    private HttpTransportHandler _fileUploadHttpTransportHandler;
    private ITransportSettings[] _transportSettings;
    private ClientOptions _clientOptions;
    private Dictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _receiveEventEndpoints;
    private Tuple`2 modreq(System.Runtime.CompilerServices.IsVolatile) _defaultEventCallback;
    private bool _isDeviceMethodEnabled;
    private Dictionary`2<string, Tuple`2<MethodCallback, object>> _deviceMethods;
    private Tuple`2 modreq(System.Runtime.CompilerServices.IsVolatile) _deviceDefaultMethodCallback;
    private ConnectionStatusChangesHandler modreq(System.Runtime.CompilerServices.IsVolatile) _connectionStatusChangesHandler;
    private int _currentMessageCount;
    private int _diagnosticSamplingPercentage;
    private ConnectionStatus _lastConnectionStatus;
    private ConnectionStatusChangeReason _lastConnectionStatusChangeReason;
    private Tuple`2 modreq(System.Runtime.CompilerServices.IsVolatile) _deviceReceiveMessageCallback;
    private bool _twinPatchSubscribedWithService;
    private object _twinPatchCallbackContext;
    internal DesiredPropertyUpdateCallback _desiredPropertyUpdateCallback;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <OperationTimeoutInMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private RetryPolicyType <RetryPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDelegatingHandler <InnerHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IotHubConnectionString <IotHubConnectionString>k__BackingField;
    internal bool IsDisposed { get; private set; }
    public int DiagnosticSamplingPercentage { get; public set; }
    public UInt32 OperationTimeoutInMilliseconds { get; public set; }
    public string ProductInfo { get; public set; }
    [ObsoleteAttribute("This method has been deprecated.  Please use Microsoft.Azure.Devices.Client.SetRetryPolicy(IRetryPolicy retryPolicy) instead.")]
public RetryPolicyType RetryPolicy { get; public set; }
    internal X509Certificate2 Certificate { get; internal set; }
    internal IDelegatingHandler InnerHandler { get; internal set; }
    internal IotHubConnectionString IotHubConnectionString { get; private set; }
    public InternalClient(IotHubConnectionString iotHubConnectionString, ITransportSettings[] transportSettings, IDeviceClientPipelineBuilder pipelineBuilder, ClientOptions options);
    [CompilerGeneratedAttribute]
internal bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public int get_DiagnosticSamplingPercentage();
    public void set_DiagnosticSamplingPercentage(int value);
    [CompilerGeneratedAttribute]
public UInt32 get_OperationTimeoutInMilliseconds();
    [CompilerGeneratedAttribute]
public void set_OperationTimeoutInMilliseconds(UInt32 value);
    public string get_ProductInfo();
    public void set_ProductInfo(string value);
    [CompilerGeneratedAttribute]
public RetryPolicyType get_RetryPolicy();
    [CompilerGeneratedAttribute]
public void set_RetryPolicy(RetryPolicyType value);
    [CompilerGeneratedAttribute]
internal X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
internal void set_Certificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
internal IDelegatingHandler get_InnerHandler();
    [CompilerGeneratedAttribute]
internal void set_InnerHandler(IDelegatingHandler value);
    [CompilerGeneratedAttribute]
internal IotHubConnectionString get_IotHubConnectionString();
    [CompilerGeneratedAttribute]
private void set_IotHubConnectionString(IotHubConnectionString value);
    public void SetRetryPolicy(IRetryPolicy retryPolicy);
    private T GetDelegateHandler();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<OpenAsync>d__58")]
public Task OpenAsync();
    public Task OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<CloseAsync>d__60")]
public Task CloseAsync();
    public Task CloseAsync(CancellationToken cancellationToken);
    public void SetConnectionStatusChangesHandler(ConnectionStatusChangesHandler statusChangesHandler);
    internal void OnConnectionStatusChanged(ConnectionStatus status, ConnectionStatusChangeReason reason);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<CompleteAsync>d__64")]
public Task CompleteAsync(string lockToken);
    public Task CompleteAsync(string lockToken, CancellationToken cancellationToken);
    public Task CompleteAsync(Message message);
    public Task CompleteAsync(Message message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<AbandonAsync>d__68")]
public Task AbandonAsync(string lockToken);
    public Task AbandonAsync(string lockToken, CancellationToken cancellationToken);
    public Task AbandonAsync(Message message);
    public Task AbandonAsync(Message message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<RejectAsync>d__72")]
public Task RejectAsync(string lockToken);
    public Task RejectAsync(string lockToken, CancellationToken cancellationToken);
    public Task RejectAsync(Message message);
    public Task RejectAsync(Message message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SendEventAsync>d__76")]
public Task SendEventAsync(Message message);
    public Task SendEventAsync(Message message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SendEventBatchAsync>d__78")]
public Task SendEventBatchAsync(IEnumerable`1<Message> messages);
    public Task SendEventBatchAsync(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SetMethodHandlerAsync>d__80")]
public Task SetMethodHandlerAsync(string methodName, MethodCallback methodHandler, object userContext);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SetMethodHandlerAsync>d__81")]
public Task SetMethodHandlerAsync(string methodName, MethodCallback methodHandler, object userContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SetMethodDefaultHandlerAsync>d__82")]
public Task SetMethodDefaultHandlerAsync(MethodCallback methodHandler, object userContext);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SetMethodDefaultHandlerAsync>d__83")]
public Task SetMethodDefaultHandlerAsync(MethodCallback methodHandler, object userContext, CancellationToken cancellationToken);
    [ObsoleteAttribute("Please use SetMethodHandlerAsync.")]
[EditorBrowsableAttribute("1")]
public void SetMethodHandler(string methodName, MethodCallback methodHandler, object userContext);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<OnMethodCalledAsync>d__85")]
internal Task OnMethodCalledAsync(MethodRequestInternal methodRequestInternal);
    internal Task SendMethodResponseAsync(MethodResponseInternal methodResponse, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<HandleMethodEnableAsync>d__87")]
private Task HandleMethodEnableAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SetDesiredPropertyUpdateCallbackAsync>d__88")]
public Task SetDesiredPropertyUpdateCallbackAsync(DesiredPropertyUpdateCallback callback, object userContext);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SetDesiredPropertyUpdateCallbackAsync>d__89")]
public Task SetDesiredPropertyUpdateCallbackAsync(DesiredPropertyUpdateCallback callback, object userContext, CancellationToken cancellationToken);
    [ObsoleteAttribute("Please use SetDesiredPropertyUpdateCallbackAsync.")]
[EditorBrowsableAttribute("1")]
public Task SetDesiredPropertyUpdateCallback(DesiredPropertyUpdateCallback callback, object userContext);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<GetTwinAsync>d__91")]
public Task`1<Twin> GetTwinAsync();
    public Task`1<Twin> GetTwinAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<UpdateReportedPropertiesAsync>d__93")]
public Task UpdateReportedPropertiesAsync(TwinCollection reportedProperties);
    public Task UpdateReportedPropertiesAsync(TwinCollection reportedProperties, CancellationToken cancellationToken);
    internal void OnReportedStatePatchReceived(TwinCollection patch);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<ReceiveAsync>d__96")]
public Task`1<Message> ReceiveAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<ReceiveAsync>d__97")]
public Task`1<Message> ReceiveAsync(TimeSpan timeout);
    public Task`1<Message> ReceiveAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<HandleMethodDisableAsync>d__99")]
private Task HandleMethodDisableAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SetReceiveMessageHandlerAsync>d__100")]
public Task SetReceiveMessageHandlerAsync(ReceiveMessageCallback messageHandler, object userContext, CancellationToken cancellationToken);
    private Task EnableReceiveMessageAsync(CancellationToken cancellationToken);
    private Task DisableReceiveMessageAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<OnDeviceMessageReceivedAsync>d__103")]
private Task OnDeviceMessageReceivedAsync(Message message);
    internal Task`1<FileUploadSasUriResponse> GetFileUploadSasUriAsync(FileUploadSasUriRequest request, CancellationToken cancellationToken);
    internal Task CompleteFileUploadAsync(FileUploadCompletionNotification notification, CancellationToken cancellationToken);
    [ObsoleteAttribute("This API has been split into three APIs: GetFileUploadSasUri, uploading to blob directly using the Azure Storage SDK, and CompleteFileUploadAsync")]
public Task UploadToBlobAsync(string blobName, Stream source);
    [ObsoleteAttribute("This API has been split into three APIs: GetFileUploadSasUri, uploading to blob directly using the Azure Storage SDK, and CompleteFileUploadAsync")]
public Task UploadToBlobAsync(string blobName, Stream source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SendEventAsync>d__108")]
public Task SendEventAsync(string outputName, Message message);
    public Task SendEventAsync(string outputName, Message message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SendEventBatchAsync>d__110")]
public Task SendEventBatchAsync(string outputName, IEnumerable`1<Message> messages);
    public Task SendEventBatchAsync(string outputName, IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SetInputMessageHandlerAsync>d__112")]
public Task SetInputMessageHandlerAsync(string inputName, MessageHandler messageHandler, object userContext, bool isAnEdgeModule);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SetInputMessageHandlerAsync>d__113")]
public Task SetInputMessageHandlerAsync(string inputName, MessageHandler messageHandler, object userContext, bool isAnEdgeModule, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SetMessageHandlerAsync>d__114")]
public Task SetMessageHandlerAsync(MessageHandler messageHandler, object userContext, bool isAnEdgeModule);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<SetMessageHandlerAsync>d__115")]
public Task SetMessageHandlerAsync(MessageHandler messageHandler, object userContext, bool isAnEdgeModule, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.InternalClient/<OnModuleEventMessageReceivedAsync>d__116")]
internal Task OnModuleEventMessageReceivedAsync(string input, Message message);
    private Task EnableEventReceiveAsync(bool isAnEdgeModule, CancellationToken cancellationToken);
    private Task DisableEventReceiveAsync(bool isAnEdgeModule, CancellationToken cancellationToken);
    internal void ValidateModuleTransportHandler(string apiName);
    public sealed virtual void Dispose();
    internal bool IsE2eDiagnosticSupportedProtocol();
    private static bool IsCausedByTimeoutOrCancellation(Exception ex);
    private CancellationTokenSource CancellationTokenSourceFactory();
}
internal class Microsoft.Azure.Devices.Client.IoThreadScheduler : object {
    private static int MaximumCapacity;
    private static IoThreadScheduler current;
    private ScheduledOverlapped overlapped;
    [SecurityCriticalAttribute]
private Slot[] _slots;
    [SecurityCriticalAttribute]
private Slot[] _slotsLowPri;
    private int _headTail;
    private int _headTailLowPri;
    private int SlotMask { get; }
    private int SlotMaskLowPri { get; }
    private IoThreadScheduler(int capacity, int capacityLowPri);
    private static IoThreadScheduler();
    [SecurityCriticalAttribute]
public static void ScheduleCallbackNoFlow(Action`1<object> callback, object state);
    [SecurityCriticalAttribute]
public static void ScheduleCallbackLowPriNoFlow(Action`1<object> callback, object state);
    [SecurityCriticalAttribute]
private bool ScheduleCallbackHelper(Action`1<object> callback, object state);
    [SecurityCriticalAttribute]
private bool ScheduleCallbackLowPriHelper(Action`1<object> callback, object state);
    [SecurityCriticalAttribute]
private void CompletionCallback(Action`1& callback, Object& state);
    [SecurityCriticalAttribute]
private bool TryCoalesce(Action`1& callback, Object& state);
    [SecurityCriticalAttribute]
private int get_SlotMask();
    [SecurityCriticalAttribute]
private int get_SlotMaskLowPri();
    protected virtual override void Finalize();
    private void Cleanup();
}
internal class Microsoft.Azure.Devices.Client.IotHubApiResources : ApiResources {
    internal static string GetString(string value, Object[] args);
}
internal class Microsoft.Azure.Devices.Client.IotHubClientDiagnostic : object {
    private static string Chars;
    private static string DiagnosticCreationTimeUtcKey;
    private static DateTime s_dt1970;
    private static IotHubClientDiagnostic();
    internal static bool AddDiagnosticInfoIfNecessary(Message message, int diagnosticSamplingPercentage, Int32& currentMessageCount);
    internal static bool HasDiagnosticProperties(Message message);
    private static string GenerateEightRandomCharacters();
    private static bool ShouldAddDiagnosticInfo(int diagnosticSamplingPercentage, Int32& currentMessageCount);
    private static double CurrentUtcTimeToSecond();
}
internal class Microsoft.Azure.Devices.Client.IotHubConnectionString : object {
    [CompilerGeneratedAttribute]
private AuthenticationWithTokenRefresh <TokenRefresher>k__BackingField;
    private static int DefaultSecurePort;
    [CompilerGeneratedAttribute]
private string <IotHubName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <HttpsEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <AmqpEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Audience>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedAccessKeyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedAccessKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedAccessSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUsingGateway>k__BackingField;
    public AuthenticationWithTokenRefresh TokenRefresher { get; private set; }
    public string IotHubName { get; private set; }
    public string DeviceId { get; private set; }
    public string ModuleId { get; private set; }
    public string HostName { get; private set; }
    public Uri HttpsEndpoint { get; private set; }
    public Uri AmqpEndpoint { get; private set; }
    public string Audience { get; private set; }
    public string SharedAccessKeyName { get; private set; }
    public string SharedAccessKey { get; private set; }
    public string SharedAccessSignature { get; private set; }
    public bool IsUsingGateway { get; private set; }
    public IotHubConnectionString(IotHubConnectionStringBuilder builder);
    internal IotHubConnectionString(string ioTHubName, string deviceId, string moduleId, string hostName, Uri httpsEndpoint, Uri amqpEndpoint, string audience, string sharedAccessKeyName, string sharedAccessKey, string sharedAccessSignature, bool isUsingGateway);
    [CompilerGeneratedAttribute]
public AuthenticationWithTokenRefresh get_TokenRefresher();
    [CompilerGeneratedAttribute]
private void set_TokenRefresher(AuthenticationWithTokenRefresh value);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.IotHubConnectionString/<Microsoft-Azure-Devices-Client-IAuthorizationProvider-GetPasswordAsync>d__4")]
private sealed virtual override Task`1<string> Microsoft.Azure.Devices.Client.IAuthorizationProvider.GetPasswordAsync();
    public Uri BuildLinkAddress(string path);
    [CompilerGeneratedAttribute]
public string get_IotHubName();
    [CompilerGeneratedAttribute]
private void set_IotHubName(string value);
    [CompilerGeneratedAttribute]
public string get_DeviceId();
    [CompilerGeneratedAttribute]
private void set_DeviceId(string value);
    [CompilerGeneratedAttribute]
public string get_ModuleId();
    [CompilerGeneratedAttribute]
private void set_ModuleId(string value);
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
private void set_HostName(string value);
    [CompilerGeneratedAttribute]
public Uri get_HttpsEndpoint();
    [CompilerGeneratedAttribute]
private void set_HttpsEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_AmqpEndpoint();
    [CompilerGeneratedAttribute]
private void set_AmqpEndpoint(Uri value);
    [CompilerGeneratedAttribute]
public string get_Audience();
    [CompilerGeneratedAttribute]
private void set_Audience(string value);
    [CompilerGeneratedAttribute]
public string get_SharedAccessKeyName();
    [CompilerGeneratedAttribute]
private void set_SharedAccessKeyName(string value);
    [CompilerGeneratedAttribute]
public string get_SharedAccessKey();
    [CompilerGeneratedAttribute]
private void set_SharedAccessKey(string value);
    [CompilerGeneratedAttribute]
public string get_SharedAccessSignature();
    [CompilerGeneratedAttribute]
private void set_SharedAccessSignature(string value);
    [CompilerGeneratedAttribute]
public bool get_IsUsingGateway();
    [CompilerGeneratedAttribute]
private void set_IsUsingGateway(bool value);
}
public class Microsoft.Azure.Devices.Client.IotHubConnectionStringBuilder : object {
    private static char ValuePairDelimiter;
    private static char ValuePairSeparator;
    private static string HostNameSeparator;
    private static string HostNamePropertyName;
    private static string DeviceIdPropertyName;
    private static string ModuleIdPropertyName;
    private static string SharedAccessKeyNamePropertyName;
    private static string SharedAccessKeyPropertyName;
    private static string SharedAccessSignaturePropertyName;
    private static string GatewayHostNamePropertyName;
    private static string X509CertPropertyName;
    private static string CommonX509CertPropertyName;
    private static RegexOptions CommonRegexOptions;
    private static TimeSpan s_regexTimeoutMilliseconds;
    private static Regex s_hostNameRegex;
    private static Regex s_idNameRegex;
    private static Regex s_sharedAccessKeyNameRegex;
    private static Regex s_sharedAccessKeyRegex;
    private static Regex s_sharedAccessSignatureRegex;
    private static Regex s_x509CertRegex;
    private string _hostName;
    private IAuthenticationMethod _authenticationMethod;
    [CompilerGeneratedAttribute]
private string <DeviceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedAccessKeyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedAccessKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GatewayHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedAccessSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsingX509Cert>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IotHubName>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2Collection <ChainCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <SasTokenTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SasTokenRenewalBuffer>k__BackingField;
    public string HostName { get; public set; }
    public IAuthenticationMethod AuthenticationMethod { get; public set; }
    public string DeviceId { get; internal set; }
    public string ModuleId { get; internal set; }
    public string SharedAccessKeyName { get; internal set; }
    public string SharedAccessKey { get; internal set; }
    public string GatewayHostName { get; internal set; }
    public string SharedAccessSignature { get; internal set; }
    public bool UsingX509Cert { get; internal set; }
    internal string IotHubName { get; private set; }
    internal X509Certificate2 Certificate { get; internal set; }
    internal X509Certificate2Collection ChainCertificates { get; internal set; }
    internal TimeSpan SasTokenTimeToLive { get; internal set; }
    internal int SasTokenRenewalBuffer { get; internal set; }
    private static IotHubConnectionStringBuilder();
    public static IotHubConnectionStringBuilder Create(string hostname, IAuthenticationMethod authenticationMethod);
    public static IotHubConnectionStringBuilder Create(string hostname, string gatewayHostname, IAuthenticationMethod authenticationMethod);
    public static IotHubConnectionStringBuilder Create(string iotHubConnectionString);
    internal static IotHubConnectionStringBuilder CreateWithIAuthenticationOverride(string iotHubConnectionString, IAuthenticationMethod authenticationMethod);
    public string get_HostName();
    public void set_HostName(string value);
    public IAuthenticationMethod get_AuthenticationMethod();
    public void set_AuthenticationMethod(IAuthenticationMethod value);
    [CompilerGeneratedAttribute]
public string get_DeviceId();
    [CompilerGeneratedAttribute]
internal void set_DeviceId(string value);
    [CompilerGeneratedAttribute]
public string get_ModuleId();
    [CompilerGeneratedAttribute]
internal void set_ModuleId(string value);
    [CompilerGeneratedAttribute]
public string get_SharedAccessKeyName();
    [CompilerGeneratedAttribute]
internal void set_SharedAccessKeyName(string value);
    [CompilerGeneratedAttribute]
public string get_SharedAccessKey();
    [CompilerGeneratedAttribute]
internal void set_SharedAccessKey(string value);
    [CompilerGeneratedAttribute]
public string get_GatewayHostName();
    [CompilerGeneratedAttribute]
internal void set_GatewayHostName(string value);
    [CompilerGeneratedAttribute]
public string get_SharedAccessSignature();
    [CompilerGeneratedAttribute]
internal void set_SharedAccessSignature(string value);
    [CompilerGeneratedAttribute]
public bool get_UsingX509Cert();
    [CompilerGeneratedAttribute]
internal void set_UsingX509Cert(bool value);
    [CompilerGeneratedAttribute]
internal string get_IotHubName();
    [CompilerGeneratedAttribute]
private void set_IotHubName(string value);
    [CompilerGeneratedAttribute]
internal X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
internal void set_Certificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
internal X509Certificate2Collection get_ChainCertificates();
    [CompilerGeneratedAttribute]
internal void set_ChainCertificates(X509Certificate2Collection value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_SasTokenTimeToLive();
    [CompilerGeneratedAttribute]
internal void set_SasTokenTimeToLive(TimeSpan value);
    [CompilerGeneratedAttribute]
internal int get_SasTokenRenewalBuffer();
    [CompilerGeneratedAttribute]
internal void set_SasTokenRenewalBuffer(int value);
    internal IotHubConnectionString ToIotHubConnectionString();
    public sealed virtual string ToString();
    private void Parse(string iotHubConnectionString);
    private void Validate();
    private void SetHostName(string hostname);
    private void SetIotHubName();
    private void SetAuthenticationMethod(IAuthenticationMethod authMethod);
    private static void ValidateFormat(string value, string propertyName, Regex regex);
    private static void ValidateFormatIfSpecified(string value, string propertyName, Regex regex);
    private static string GetConnectionStringValue(IDictionary`2<string, string> map, string propertyName);
    private static string GetConnectionStringOptionalValue(IDictionary`2<string, string> map, string propertyName);
    private static TValue GetConnectionStringOptionalValueOrDefault(IDictionary`2<string, string> map, string propertyName, TryParse`2<string, TValue> tryParse, bool ignoreCase);
    private static string GetIotHubName(string hostName);
    private static bool ParseX509(string input, bool ignoreCase, Boolean& isUsingX509Cert);
}
public interface Microsoft.Azure.Devices.Client.IReadOnlyIndicator {
    public bool IsReadOnly { get; }
    public abstract virtual bool get_IsReadOnly();
}
public interface Microsoft.Azure.Devices.Client.IRetryPolicy {
    public abstract virtual bool ShouldRetry(int currentRetryCount, Exception lastException, TimeSpan& retryInterval);
}
internal interface Microsoft.Azure.Devices.Client.ISharedAccessSignatureCredential {
    public abstract virtual bool IsExpired();
}
public interface Microsoft.Azure.Devices.Client.ITransportSettings {
    public TimeSpan DefaultReceiveTimeout { get; }
    public IWebProxy Proxy { get; public set; }
    public abstract virtual TransportType GetTransportType();
    public abstract virtual TimeSpan get_DefaultReceiveTimeout();
    public abstract virtual IWebProxy get_Proxy();
    public abstract virtual void set_Proxy(IWebProxy value);
}
internal static class Microsoft.Azure.Devices.Client.JsonSerializerSettingsInitializer : object {
    private static JsonSerializerSettings s_settings;
    private static JsonSerializerSettingsInitializer();
    internal static JsonSerializerSettings GetJsonSerializerSettings();
}
internal enum Microsoft.Azure.Devices.Client.MappingType : Enum {
    public int value__;
    public static MappingType ApplicationProperty;
    public static MappingType MessageBody;
}
public class Microsoft.Azure.Devices.Client.Message : object {
    private Stream modreq(System.Runtime.CompilerServices.IsVolatile) _bodyStream;
    private bool _disposed;
    private StreamDisposalResponsibility _streamDisposalResponsibility;
    private static long StreamCannotSeek;
    private long _originalStreamPosition;
    private int _getBodyCalled;
    private long _sizeInBytesCalled;
    [CompilerGeneratedAttribute]
private string <MqttTopicName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <SystemProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private ArraySegment`1<byte> <DeliveryTag>k__BackingField;
    public string MessageId { get; public set; }
    public string To { get; public set; }
    public DateTime ExpiryTimeUtc { get; internal set; }
    public string CorrelationId { get; public set; }
    public ulong SequenceNumber { get; internal set; }
    public string LockToken { get; internal set; }
    public DateTime EnqueuedTimeUtc { get; internal set; }
    public UInt32 DeliveryCount { get; internal set; }
    public string UserId { get; public set; }
    internal string MqttTopicName { get; internal set; }
    public string MessageSchema { get; public set; }
    public DateTime CreationTimeUtc { get; public set; }
    public bool IsSecurityMessage { get; }
    public string ContentType { get; public set; }
    public string InputName { get; internal set; }
    public string ConnectionDeviceId { get; internal set; }
    public string ConnectionModuleId { get; internal set; }
    public string ContentEncoding { get; public set; }
    public string ComponentName { get; public set; }
    public IDictionary`2<string, string> Properties { get; private set; }
    internal IDictionary`2<string, object> SystemProperties { get; private set; }
    private bool Microsoft.Azure.Devices.Client.IReadOnlyIndicator.IsReadOnly { get; }
    public Stream BodyStream { get; }
    internal ArraySegment`1<byte> DeliveryTag { get; internal set; }
    internal bool IsBodyCalled { get; }
    public Message(Stream stream);
    public Message(Byte[] byteArray);
    internal Message(Stream stream, StreamDisposalResponsibility streamDisposalResponsibility);
    public string get_MessageId();
    public void set_MessageId(string value);
    public string get_To();
    public void set_To(string value);
    public DateTime get_ExpiryTimeUtc();
    internal void set_ExpiryTimeUtc(DateTime value);
    public string get_CorrelationId();
    public void set_CorrelationId(string value);
    public ulong get_SequenceNumber();
    internal void set_SequenceNumber(ulong value);
    public string get_LockToken();
    internal void set_LockToken(string value);
    public DateTime get_EnqueuedTimeUtc();
    internal void set_EnqueuedTimeUtc(DateTime value);
    public UInt32 get_DeliveryCount();
    internal void set_DeliveryCount(UInt32 value);
    public string get_UserId();
    public void set_UserId(string value);
    [CompilerGeneratedAttribute]
internal string get_MqttTopicName();
    [CompilerGeneratedAttribute]
internal void set_MqttTopicName(string value);
    public string get_MessageSchema();
    public void set_MessageSchema(string value);
    public DateTime get_CreationTimeUtc();
    public void set_CreationTimeUtc(DateTime value);
    public bool get_IsSecurityMessage();
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_InputName();
    internal void set_InputName(string value);
    public string get_ConnectionDeviceId();
    internal void set_ConnectionDeviceId(string value);
    public string get_ConnectionModuleId();
    internal void set_ConnectionModuleId(string value);
    public string get_ContentEncoding();
    public void set_ContentEncoding(string value);
    public string get_ComponentName();
    public void set_ComponentName(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, object> get_SystemProperties();
    [CompilerGeneratedAttribute]
private void set_SystemProperties(IDictionary`2<string, object> value);
    private sealed virtual override bool Microsoft.Azure.Devices.Client.IReadOnlyIndicator.get_IsReadOnly();
    public Stream get_BodyStream();
    [CompilerGeneratedAttribute]
internal ArraySegment`1<byte> get_DeliveryTag();
    [CompilerGeneratedAttribute]
internal void set_DeliveryTag(ArraySegment`1<byte> value);
    public sealed virtual void Dispose();
    internal bool HasBodyStream();
    public Stream GetBodyStream();
    public Byte[] GetBytes();
    public Message CloneWithBody(Byte[]& byteArray);
    internal void ResetBody();
    internal bool get_IsBodyCalled();
    private void SetGetBodyCalled();
    public void SetAsSecurityMessage();
    private void InitializeWithStream(Stream stream, StreamDisposalResponsibility streamDisposalResponsibility);
    private static Byte[] ReadFullStream(Stream inputStream);
    private T GetSystemProperty(string key);
    internal void ThrowIfDisposed();
    private void Dispose(bool disposing);
}
public class Microsoft.Azure.Devices.Client.MessageHandler : MulticastDelegate {
    public MessageHandler(object object, IntPtr method);
    public virtual Task`1<MessageResponse> Invoke(Message message, object userContext);
    public virtual IAsyncResult BeginInvoke(Message message, object userContext, AsyncCallback callback, object object);
    public virtual Task`1<MessageResponse> EndInvoke(IAsyncResult result);
}
public enum Microsoft.Azure.Devices.Client.MessageResponse : Enum {
    public int value__;
    public static MessageResponse None;
    public static MessageResponse Completed;
    public static MessageResponse Abandoned;
}
internal static class Microsoft.Azure.Devices.Client.MessageSystemPropertyNames : object {
    public static string MessageId;
    public static string LockToken;
    public static string SequenceNumber;
    public static string To;
    public static string EnqueuedTime;
    public static string ExpiryTimeUtc;
    public static string CorrelationId;
    public static string DeliveryCount;
    public static string UserId;
    public static string Operation;
    public static string Ack;
    public static string OutputName;
    public static string InputName;
    public static string MessageSchema;
    public static string CreationTimeUtc;
    public static string ContentEncoding;
    public static string ContentType;
    public static string ConnectionDeviceId;
    public static string ConnectionModuleId;
    public static string DiagId;
    public static string DiagCorrelationContext;
    public static string InterfaceId;
    public static string ComponentName;
}
public class Microsoft.Azure.Devices.Client.MethodCallback : MulticastDelegate {
    public MethodCallback(object object, IntPtr method);
    public virtual Task`1<MethodResponse> Invoke(MethodRequest methodRequest, object userContext);
    public virtual IAsyncResult BeginInvoke(MethodRequest methodRequest, object userContext, AsyncCallback callback, object object);
    public virtual Task`1<MethodResponse> EndInvoke(IAsyncResult result);
}
internal class Microsoft.Azure.Devices.Client.MethodInvokeRequest : object {
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ResponseTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private JRaw <Payload>k__BackingField;
    [JsonPropertyAttribute]
public string MethodName { get; private set; }
    [JsonIgnoreAttribute]
public Nullable`1<TimeSpan> ResponseTimeout { get; private set; }
    [JsonIgnoreAttribute]
public Nullable`1<TimeSpan> ConnectionTimeout { get; private set; }
    [JsonPropertyAttribute]
internal Nullable`1<int> ResponseTimeoutInSeconds { get; }
    [JsonPropertyAttribute]
internal Nullable`1<int> ConnectionTimeoutInSeconds { get; }
    [JsonPropertyAttribute]
internal JRaw Payload { get; internal set; }
    public MethodInvokeRequest(string methodName, string payload, Nullable`1<TimeSpan> responseTimeout, Nullable`1<TimeSpan> connectionTimeout);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
private void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ResponseTimeout();
    [CompilerGeneratedAttribute]
private void set_ResponseTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ConnectionTimeout();
    [CompilerGeneratedAttribute]
private void set_ConnectionTimeout(Nullable`1<TimeSpan> value);
    internal Nullable`1<int> get_ResponseTimeoutInSeconds();
    internal Nullable`1<int> get_ConnectionTimeoutInSeconds();
    [CompilerGeneratedAttribute]
internal JRaw get_Payload();
    [CompilerGeneratedAttribute]
internal void set_Payload(JRaw value);
    private static void ValidatePayloadIsJson(string json);
}
internal class Microsoft.Azure.Devices.Client.MethodInvokeResponse : object {
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private JRaw <Payload>k__BackingField;
    [JsonPropertyAttribute("status")]
public int Status { get; public set; }
    [JsonPropertyAttribute("payload")]
internal JRaw Payload { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(int value);
    public string GetPayloadAsJson();
    [CompilerGeneratedAttribute]
internal JRaw get_Payload();
    [CompilerGeneratedAttribute]
internal void set_Payload(JRaw value);
}
public class Microsoft.Azure.Devices.Client.MethodRequest : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ResponseTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ConnectionTimeout>k__BackingField;
    public string Name { get; private set; }
    public Byte[] Data { get; private set; }
    public Nullable`1<TimeSpan> ResponseTimeout { get; private set; }
    public Nullable`1<TimeSpan> ConnectionTimeout { get; private set; }
    public string DataAsJson { get; }
    public MethodRequest(string name);
    public MethodRequest(string name, Byte[] data);
    public MethodRequest(string name, Nullable`1<TimeSpan> responseTimeout, Nullable`1<TimeSpan> connectionTimeout);
    public MethodRequest(string name, Byte[] data, Nullable`1<TimeSpan> responseTimeout, Nullable`1<TimeSpan> connectionTimeout);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ResponseTimeout();
    [CompilerGeneratedAttribute]
private void set_ResponseTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_ConnectionTimeout();
    [CompilerGeneratedAttribute]
private void set_ConnectionTimeout(Nullable`1<TimeSpan> value);
    public string get_DataAsJson();
}
public class Microsoft.Azure.Devices.Client.MethodRequestInternal : object {
    private Stream modreq(System.Runtime.CompilerServices.IsVolatile) _bodyStream;
    private bool _disposed;
    private bool _ownsBodyStream;
    private int _getBodyCalled;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    internal CancellationToken CancellationToken { get; private set; }
    internal string Name { get; private set; }
    internal string RequestId { get; private set; }
    internal Stream BodyStream { get; }
    internal bool IsBodyCalled { get; }
    internal MethodRequestInternal(CancellationToken cancellationToken);
    internal MethodRequestInternal(string name, string requestId, Stream bodyStream, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
private void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
internal string get_RequestId();
    [CompilerGeneratedAttribute]
private void set_RequestId(string value);
    internal Stream get_BodyStream();
    public sealed virtual void Dispose();
    internal Stream GetBodyStream();
    internal Byte[] GetBytes();
    internal void ResetGetBodyCalled();
    internal bool TryResetBody(long position);
    internal bool get_IsBodyCalled();
    private void SetGetBodyCalled();
    private void InitializeWithStream(Stream stream, bool ownsStream);
    private static Byte[] ReadFullStream(Stream inputStream);
    private void ThrowIfDisposed();
    private void Dispose(bool disposing);
}
public class Microsoft.Azure.Devices.Client.MethodResponse : object {
    private Byte[] _result;
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    public Byte[] Result { get; private set; }
    public string ResultAsJson { get; }
    public int Status { get; private set; }
    public MethodResponse(Byte[] result, int status);
    public MethodResponse(int status);
    private void set_Result(Byte[] value);
    public Byte[] get_Result();
    public string get_ResultAsJson();
    [CompilerGeneratedAttribute]
public int get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(int value);
}
public class Microsoft.Azure.Devices.Client.MethodResponseInternal : object {
    private Stream modreq(System.Runtime.CompilerServices.IsVolatile) _bodyStream;
    private bool _disposed;
    private bool _ownsBodyStream;
    private int _getBodyCalled;
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    internal int Status { get; internal set; }
    internal string RequestId { get; internal set; }
    internal Stream BodyStream { get; }
    internal bool IsBodyCalled { get; }
    internal MethodResponseInternal(string requestId, int status);
    internal MethodResponseInternal(Stream stream);
    internal MethodResponseInternal(Byte[] byteArray, string requestId, int status);
    [CompilerGeneratedAttribute]
internal int get_Status();
    [CompilerGeneratedAttribute]
internal void set_Status(int value);
    [CompilerGeneratedAttribute]
internal string get_RequestId();
    [CompilerGeneratedAttribute]
internal void set_RequestId(string value);
    internal Stream get_BodyStream();
    public sealed virtual void Dispose();
    internal Stream GetBodyStream();
    internal Byte[] GetBytes();
    internal void ResetGetBodyCalled();
    internal bool TryResetBody(long position);
    internal bool get_IsBodyCalled();
    private void SetGetBodyCalled();
    private void InitializeWithStream(Stream stream, bool ownsStream);
    private static Byte[] ReadFullStream(Stream inputStream);
    internal void ThrowIfDisposed();
    private void Dispose(bool disposing);
}
public enum Microsoft.Azure.Devices.Client.MethodResponseStatusCode : Enum {
    public int value__;
    public static MethodResponseStatusCode BadRequest;
    public static MethodResponseStatusCode UserCodeException;
    public static MethodResponseStatusCode MethodNotImplemented;
}
public class Microsoft.Azure.Devices.Client.ModuleAuthenticationWithRegistrySymmetricKey : object {
    private string _deviceId;
    private string _moduleId;
    private Byte[] _key;
    public string DeviceId { get; public set; }
    public string ModuleId { get; public set; }
    public Byte[] Key { get; public set; }
    public string KeyAsBase64String { get; public set; }
    public ModuleAuthenticationWithRegistrySymmetricKey(string deviceId, string moduleId, string key);
    public string get_DeviceId();
    public void set_DeviceId(string value);
    public string get_ModuleId();
    public void set_ModuleId(string value);
    public Byte[] get_Key();
    public void set_Key(Byte[] value);
    public string get_KeyAsBase64String();
    public void set_KeyAsBase64String(string value);
    public sealed virtual IotHubConnectionStringBuilder Populate(IotHubConnectionStringBuilder iotHubConnectionStringBuilder);
    private void SetKey(Byte[] key);
    private void SetKeyFromBase64String(string key);
    private void SetDeviceId(string deviceId);
    private void SetModuleId(string moduleId);
}
internal class Microsoft.Azure.Devices.Client.ModuleAuthenticationWithSakRefresh : ModuleAuthenticationWithTokenRefresh {
    private IotHubConnectionString _connectionString;
    public ModuleAuthenticationWithSakRefresh(string deviceId, string moduleId, IotHubConnectionString connectionString);
    internal ModuleAuthenticationWithSakRefresh(string deviceId, string moduleId, IotHubConnectionString connectionString, TimeSpan sasTokenTimeToLive, int sasTokenRenewalBuffer, bool disposeWithClient);
    protected virtual Task`1<string> SafeCreateNewToken(string iotHub, int suggestedTimeToLive);
}
public class Microsoft.Azure.Devices.Client.ModuleAuthenticationWithToken : object {
    private string _deviceId;
    private string _moduleId;
    private string _token;
    public string DeviceId { get; public set; }
    public string ModuleId { get; public set; }
    public string Token { get; public set; }
    public ModuleAuthenticationWithToken(string deviceId, string moduleId, string token);
    public string get_DeviceId();
    public void set_DeviceId(string value);
    public string get_ModuleId();
    public void set_ModuleId(string value);
    public string get_Token();
    public void set_Token(string value);
    public sealed virtual IotHubConnectionStringBuilder Populate(IotHubConnectionStringBuilder iotHubConnectionStringBuilder);
    private void SetDeviceId(string deviceId);
    private void SetModuleId(string moduleId);
    private void SetToken(string token);
}
public abstract class Microsoft.Azure.Devices.Client.ModuleAuthenticationWithTokenRefresh : AuthenticationWithTokenRefresh {
    private static int DefaultTimeToLiveSeconds;
    private static int DefaultBufferPercentage;
    [CompilerGeneratedAttribute]
private string <ModuleId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceId>k__BackingField;
    public string ModuleId { get; }
    public string DeviceId { get; }
    public ModuleAuthenticationWithTokenRefresh(string deviceId, string moduleId);
    public ModuleAuthenticationWithTokenRefresh(string deviceId, string moduleId, int suggestedTimeToLiveSeconds, int timeBufferPercentage);
    public ModuleAuthenticationWithTokenRefresh(string deviceId, string moduleId, int suggestedTimeToLiveSeconds, int timeBufferPercentage, bool disposeWithClient);
    [CompilerGeneratedAttribute]
public string get_ModuleId();
    [CompilerGeneratedAttribute]
public string get_DeviceId();
    public virtual IotHubConnectionStringBuilder Populate(IotHubConnectionStringBuilder iotHubConnectionStringBuilder);
    private static int SetSasTokenSuggestedTimeToLiveSeconds(int suggestedTimeToLiveSeconds);
    private static int SetSasTokenRenewalBufferPercentage(int timeBufferPercentage);
}
public class Microsoft.Azure.Devices.Client.ModuleClient : object {
    private static string ModuleMethodUriFormat;
    private static string DeviceMethodUriFormat;
    private bool _isAnEdgeModule;
    private ICertificateValidator _certValidator;
    private HttpTransportHandler _httpTransportHandler;
    [CompilerGeneratedAttribute]
private InternalClient <InternalClient>k__BackingField;
    internal InternalClient InternalClient { get; private set; }
    internal IDelegatingHandler InnerHandler { get; internal set; }
    public int DiagnosticSamplingPercentage { get; public set; }
    public UInt32 OperationTimeoutInMilliseconds { get; public set; }
    public string ProductInfo { get; public set; }
    internal ModuleClient(InternalClient internalClient);
    internal ModuleClient(InternalClient internalClient, ICertificateValidator certValidator);
    [CompilerGeneratedAttribute]
internal InternalClient get_InternalClient();
    [CompilerGeneratedAttribute]
private void set_InternalClient(InternalClient value);
    public static ModuleClient Create(string hostname, IAuthenticationMethod authenticationMethod, ClientOptions options);
    public static ModuleClient Create(string hostname, string gatewayHostname, IAuthenticationMethod authenticationMethod, ClientOptions options);
    public static ModuleClient Create(string hostname, IAuthenticationMethod authenticationMethod, TransportType transportType, ClientOptions options);
    public static ModuleClient Create(string hostname, string gatewayHostname, IAuthenticationMethod authenticationMethod, TransportType transportType, ClientOptions options);
    public static ModuleClient Create(string hostname, IAuthenticationMethod authenticationMethod, ITransportSettings[] transportSettings, ClientOptions options);
    public static ModuleClient Create(string hostname, string gatewayHostname, IAuthenticationMethod authenticationMethod, ITransportSettings[] transportSettings, ClientOptions options);
    public static ModuleClient CreateFromConnectionString(string connectionString, ClientOptions options);
    public static ModuleClient CreateFromConnectionString(string connectionString, TransportType transportType, ClientOptions options);
    public static ModuleClient CreateFromConnectionString(string connectionString, ITransportSettings[] transportSettings, ClientOptions options);
    public static Task`1<ModuleClient> CreateFromEnvironmentAsync(ClientOptions options);
    public static Task`1<ModuleClient> CreateFromEnvironmentAsync(TransportType transportType, ClientOptions options);
    public static Task`1<ModuleClient> CreateFromEnvironmentAsync(ITransportSettings[] transportSettings, ClientOptions options);
    private static ModuleClient Create(Func`1<InternalClient> internalClientCreator);
    internal IDelegatingHandler get_InnerHandler();
    internal void set_InnerHandler(IDelegatingHandler value);
    public int get_DiagnosticSamplingPercentage();
    public void set_DiagnosticSamplingPercentage(int value);
    public UInt32 get_OperationTimeoutInMilliseconds();
    public void set_OperationTimeoutInMilliseconds(UInt32 value);
    public string get_ProductInfo();
    public void set_ProductInfo(string value);
    public void SetRetryPolicy(IRetryPolicy retryPolicy);
    public Task OpenAsync();
    public Task OpenAsync(CancellationToken cancellationToken);
    public Task CloseAsync();
    public Task CloseAsync(CancellationToken cancellationToken);
    public Task CompleteAsync(string lockToken);
    public Task CompleteAsync(string lockToken, CancellationToken cancellationToken);
    public Task CompleteAsync(Message message);
    public Task CompleteAsync(Message message, CancellationToken cancellationToken);
    public Task AbandonAsync(string lockToken);
    public Task AbandonAsync(string lockToken, CancellationToken cancellationToken);
    public Task AbandonAsync(Message message);
    public Task AbandonAsync(Message message, CancellationToken cancellationToken);
    public Task SendEventAsync(Message message);
    public Task SendEventAsync(Message message, CancellationToken cancellationToken);
    public Task SendEventBatchAsync(IEnumerable`1<Message> messages);
    public Task SendEventBatchAsync(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    public Task SetMethodHandlerAsync(string methodName, MethodCallback methodHandler, object userContext);
    public Task SetMethodHandlerAsync(string methodName, MethodCallback methodHandler, object userContext, CancellationToken cancellationToken);
    public Task SetMethodDefaultHandlerAsync(MethodCallback methodHandler, object userContext);
    public Task SetMethodDefaultHandlerAsync(MethodCallback methodHandler, object userContext, CancellationToken cancellationToken);
    public void SetConnectionStatusChangesHandler(ConnectionStatusChangesHandler statusChangesHandler);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public Task SetDesiredPropertyUpdateCallbackAsync(DesiredPropertyUpdateCallback callback, object userContext);
    public Task SetDesiredPropertyUpdateCallbackAsync(DesiredPropertyUpdateCallback callback, object userContext, CancellationToken cancellationToken);
    public Task`1<Twin> GetTwinAsync();
    public Task`1<Twin> GetTwinAsync(CancellationToken cancellationToken);
    public Task UpdateReportedPropertiesAsync(TwinCollection reportedProperties);
    public Task UpdateReportedPropertiesAsync(TwinCollection reportedProperties, CancellationToken cancellationToken);
    public Task SendEventAsync(string outputName, Message message);
    public Task SendEventAsync(string outputName, Message message, CancellationToken cancellationToken);
    public Task SendEventBatchAsync(string outputName, IEnumerable`1<Message> messages);
    public Task SendEventBatchAsync(string outputName, IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    public Task SetInputMessageHandlerAsync(string inputName, MessageHandler messageHandler, object userContext);
    public Task SetInputMessageHandlerAsync(string inputName, MessageHandler messageHandler, object userContext, CancellationToken cancellationToken);
    public Task SetMessageHandlerAsync(MessageHandler messageHandler, object userContext);
    public Task SetMessageHandlerAsync(MessageHandler messageHandler, object userContext, CancellationToken cancellationToken);
    public Task`1<MethodResponse> InvokeMethodAsync(string deviceId, MethodRequest methodRequest);
    public Task`1<MethodResponse> InvokeMethodAsync(string deviceId, MethodRequest methodRequest, CancellationToken cancellationToken);
    public Task`1<MethodResponse> InvokeMethodAsync(string deviceId, string moduleId, MethodRequest methodRequest);
    public Task`1<MethodResponse> InvokeMethodAsync(string deviceId, string moduleId, MethodRequest methodRequest, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.ModuleClient/<InvokeMethodAsync>d__78")]
private Task`1<MethodResponse> InvokeMethodAsync(Uri uri, MethodRequest methodRequest, CancellationToken cancellationToken);
    private static Uri GetDeviceMethodUri(string deviceId);
    private static Uri GetModuleMethodUri(string deviceId, string moduleId);
}
public class Microsoft.Azure.Devices.Client.NoRetry : object {
    public sealed virtual bool ShouldRetry(int currentRetryCount, Exception lastException, TimeSpan& retryInterval);
}
internal static class Microsoft.Azure.Devices.Client.PartialTrustHelpers : object {
    internal static bool ShouldFlowSecurityContext { get; }
    [SecurityCriticalAttribute]
internal static bool get_ShouldFlowSecurityContext();
    [SecurityCriticalAttribute]
internal static bool IsInFullTrust();
    [SecurityCriticalAttribute]
internal static bool UnsafeIsInFullTrust();
    [SecurityCriticalAttribute]
internal static bool IsTypeAptca(Type type);
    [SecurityCriticalAttribute]
private static void DemandForFullTrust();
    [SecurityCriticalAttribute]
private static bool IsAssemblyAptca(Assembly assembly);
    [SecurityCriticalAttribute]
private static bool IsAssemblySigned(Assembly assembly);
    [SecurityCriticalAttribute]
internal static bool HasEtwPermissions();
}
internal class Microsoft.Azure.Devices.Client.PipelineContext : object {
    [CompilerGeneratedAttribute]
private ITransportSettings <TransportSettingsSelected>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransportSettings[] <TransportSettingsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private ProductInfo <ProductInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IotHubConnectionString <IotHubConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientOptions <ClientOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionStatusChangesHandler <ConnectionStatusChangesHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<TwinCollection> <DesiredPropertyUpdateCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private OnMethodCalledDelegate <MethodCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private OnModuleEventMessageReceivedDelegate <ModuleEventCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private OnDeviceMessageReceivedDelegate <DeviceEventCallback>k__BackingField;
    internal ITransportSettings TransportSettingsSelected { get; internal set; }
    internal ITransportSettings[] TransportSettingsArray { get; internal set; }
    internal ProductInfo ProductInfo { get; internal set; }
    internal IotHubConnectionString IotHubConnectionString { get; internal set; }
    internal ClientOptions ClientOptions { get; internal set; }
    internal ConnectionStatusChangesHandler ConnectionStatusChangesHandler { get; internal set; }
    internal Action`1<TwinCollection> DesiredPropertyUpdateCallback { get; internal set; }
    internal OnMethodCalledDelegate MethodCallback { get; internal set; }
    internal OnModuleEventMessageReceivedDelegate ModuleEventCallback { get; internal set; }
    internal OnDeviceMessageReceivedDelegate DeviceEventCallback { get; internal set; }
    [CompilerGeneratedAttribute]
internal ITransportSettings get_TransportSettingsSelected();
    [CompilerGeneratedAttribute]
internal void set_TransportSettingsSelected(ITransportSettings value);
    [CompilerGeneratedAttribute]
internal ITransportSettings[] get_TransportSettingsArray();
    [CompilerGeneratedAttribute]
internal void set_TransportSettingsArray(ITransportSettings[] value);
    [CompilerGeneratedAttribute]
internal ProductInfo get_ProductInfo();
    [CompilerGeneratedAttribute]
internal void set_ProductInfo(ProductInfo value);
    [CompilerGeneratedAttribute]
internal IotHubConnectionString get_IotHubConnectionString();
    [CompilerGeneratedAttribute]
internal void set_IotHubConnectionString(IotHubConnectionString value);
    [CompilerGeneratedAttribute]
internal ClientOptions get_ClientOptions();
    [CompilerGeneratedAttribute]
internal void set_ClientOptions(ClientOptions value);
    [CompilerGeneratedAttribute]
internal ConnectionStatusChangesHandler get_ConnectionStatusChangesHandler();
    [CompilerGeneratedAttribute]
internal void set_ConnectionStatusChangesHandler(ConnectionStatusChangesHandler value);
    [CompilerGeneratedAttribute]
internal Action`1<TwinCollection> get_DesiredPropertyUpdateCallback();
    [CompilerGeneratedAttribute]
internal void set_DesiredPropertyUpdateCallback(Action`1<TwinCollection> value);
    [CompilerGeneratedAttribute]
internal OnMethodCalledDelegate get_MethodCallback();
    [CompilerGeneratedAttribute]
internal void set_MethodCallback(OnMethodCalledDelegate value);
    [CompilerGeneratedAttribute]
internal OnModuleEventMessageReceivedDelegate get_ModuleEventCallback();
    [CompilerGeneratedAttribute]
internal void set_ModuleEventCallback(OnModuleEventMessageReceivedDelegate value);
    [CompilerGeneratedAttribute]
internal OnDeviceMessageReceivedDelegate get_DeviceEventCallback();
    [CompilerGeneratedAttribute]
internal void set_DeviceEventCallback(OnDeviceMessageReceivedDelegate value);
}
internal class Microsoft.Azure.Devices.Client.ProductInfo : object {
    [CompilerGeneratedAttribute]
private string <Extra>k__BackingField;
    private Lazy`1<int> _productType;
    private Lazy`1<string> _sqmId;
    public string Extra { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Extra();
    [CompilerGeneratedAttribute]
public void set_Extra(string value);
    public virtual string ToString();
    internal string ToString(UserAgentFormats format);
    private string ToString(string format);
    internal static string GetSqmMachineId();
    internal static int GetWindowsProductType();
    private static bool GetProductInfo(int dwOSMajorVersion, int dwOSMinorVersion, int dwSpMajorVersion, int dwSpMinorVersion, Int32& pdwReturnedProductType);
}
internal enum Microsoft.Azure.Devices.Client.PropertyValueType : Enum {
    public int value__;
    public static PropertyValueType Null;
    public static PropertyValueType Byte;
    public static PropertyValueType SByte;
    public static PropertyValueType Char;
    public static PropertyValueType Int16;
    public static PropertyValueType UInt16;
    public static PropertyValueType Int32;
    public static PropertyValueType UInt32;
    public static PropertyValueType Int64;
    public static PropertyValueType UInt64;
    public static PropertyValueType Single;
    public static PropertyValueType Double;
    public static PropertyValueType Decimal;
    public static PropertyValueType Boolean;
    public static PropertyValueType Guid;
    public static PropertyValueType String;
    public static PropertyValueType Uri;
    public static PropertyValueType DateTime;
    public static PropertyValueType DateTimeOffset;
    public static PropertyValueType TimeSpan;
    public static PropertyValueType Stream;
    public static PropertyValueType Unknown;
}
internal enum Microsoft.Azure.Devices.Client.PutOperationType : Enum {
    public int value__;
    public static PutOperationType CreateEntity;
    public static PutOperationType UpdateEntity;
    public static PutOperationType ForceUpdateEntity;
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class Microsoft.Azure.Devices.Client.ReadOnlyDictionary45`2 : object {
    private object _syncRoot;
    private KeyCollection<TKey, TValue> _keys;
    private ValueCollection<TKey, TValue> _values;
    private IReadOnlyIndicator _readOnlyIndicator;
    [CompilerGeneratedAttribute]
private IDictionary`2<TKey, TValue> <Dictionary>k__BackingField;
    protected IDictionary`2<TKey, TValue> Dictionary { get; private set; }
    public KeyCollection<TKey, TValue> Keys { get; }
    public ValueCollection<TKey, TValue> Values { get; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    public TValue Item { get; }
    private TValue System.Collections.Generic.IDictionary<TKey,TValue>.Item { get; private set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ReadOnlyDictionary45`2(IDictionary`2<TKey, TValue> dictionary);
    internal ReadOnlyDictionary45`2(IDictionary`2<TKey, TValue> dictionary, IReadOnlyIndicator readOnlyIndicator);
    [CompilerGeneratedAttribute]
protected IDictionary`2<TKey, TValue> get_Dictionary();
    [CompilerGeneratedAttribute]
private void set_Dictionary(IDictionary`2<TKey, TValue> value);
    public KeyCollection<TKey, TValue> get_Keys();
    public ValueCollection<TKey, TValue> get_Values();
    public sealed virtual bool ContainsKey(TKey key);
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    public TValue get_Item(TKey key);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
    private sealed virtual override TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static bool IsCompatibleKey(object key);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override void System.Collections.IDictionary.Clear();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
public class Microsoft.Azure.Devices.Client.ReceiveMessageCallback : MulticastDelegate {
    public ReceiveMessageCallback(object object, IntPtr method);
    public virtual Task Invoke(Message message, object userContext);
    public virtual IAsyncResult BeginInvoke(Message message, object userContext, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("This enum has been deprecated. Please use Microsoft.Azure.Devices.Client.SetRetryPolicy(IRetryPolicy retryPolicy) instead.")]
public enum Microsoft.Azure.Devices.Client.RetryPolicyType : Enum {
    public int value__;
    public static RetryPolicyType No_Retry;
    public static RetryPolicyType Exponential_Backoff_With_Jitter;
}
internal class Microsoft.Azure.Devices.Client.RetryStrategyAdapter : RetryStrategy {
    private IRetryPolicy _retryStrategy;
    public RetryStrategyAdapter(IRetryPolicy retryPolicy);
    public virtual ShouldRetry GetShouldRetry();
    private bool ShouldRetry(int retryCount, Exception lastException, TimeSpan& retryInterval);
}
internal static class Microsoft.Azure.Devices.Client.SecurityConstants : object {
    public static string BearerTokenScheme;
    public static string CertificateScheme;
    public static string AuthenticationScheme;
    public static string ResourceProviderClientAccessRole;
    public static string ResourceProviderAdminAccessRole;
    public static string ResourceProviderFullAccessRole;
    public static string AuthenticationFailed;
    public static string AuthorizationFailed;
    public static string MissingCertificate;
    public static int KeyLengthInBytes;
    public static string WwwAuthenticateHeader;
    public static string DefaultSasKeyName;
    public static string AdminSasKeyName;
    public static int SasKeyLength;
    public static string SharedAccessKey;
    public static string SharedAccessKeyFieldName;
    public static string SharedAccessKeyFullFieldName;
}
internal static class Microsoft.Azure.Devices.Client.SecurityHelper : object {
    public static void ValidateIotHubHostName(string iotHubHostName, string iotHubName);
}
internal static class Microsoft.Azure.Devices.Client.SerializationUtilities : object {
    private static Dictionary`2<Type, PropertyValueType> s_typeToIntMap;
    private static SerializationUtilities();
    public static PropertyValueType GetTypeId(object value);
}
internal static class Microsoft.Azure.Devices.Client.ServicePointHelpers : object {
    internal static int DefaultMaxConnectionsPerServer;
    internal static int DefaultConnectionLeaseTimeout;
    public static void SetLimits(HttpMessageHandler messageHandler, Uri baseUri, int connectionLeaseTimeoutMilliseconds);
}
internal class Microsoft.Azure.Devices.Client.SharedAccessSignature : object {
    private string _encodedAudience;
    private string _expiry;
    [CompilerGeneratedAttribute]
private string <IotHubName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ExpiresOn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Audience>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    public string IotHubName { get; }
    public DateTime ExpiresOn { get; private set; }
    public string KeyName { get; private set; }
    public string Audience { get; private set; }
    public string Signature { get; private set; }
    private SharedAccessSignature(string iotHubName, DateTime expiresOn, string expiry, string keyName, string signature, string encodedAudience);
    [CompilerGeneratedAttribute]
public string get_IotHubName();
    [CompilerGeneratedAttribute]
public DateTime get_ExpiresOn();
    [CompilerGeneratedAttribute]
private void set_ExpiresOn(DateTime value);
    [CompilerGeneratedAttribute]
public string get_KeyName();
    [CompilerGeneratedAttribute]
private void set_KeyName(string value);
    [CompilerGeneratedAttribute]
public string get_Audience();
    [CompilerGeneratedAttribute]
private void set_Audience(string value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
private void set_Signature(string value);
    public static SharedAccessSignature Parse(string iotHubName, string rawToken);
    public static bool IsSharedAccessSignature(string rawSignature);
    public sealed virtual bool IsExpired();
    public string ComputeSignature(Byte[] key);
    internal static string Sign(Byte[] key, string value);
    private static IDictionary`2<string, string> ExtractFieldValues(string sharedAccessSignature);
}
internal class Microsoft.Azure.Devices.Client.SharedAccessSignatureAuthorizationRule : object {
    private string _primaryKey;
    private string _secondaryKey;
    [CompilerGeneratedAttribute]
private string <KeyName>k__BackingField;
    [CompilerGeneratedAttribute]
private AccessRights <Rights>k__BackingField;
    public string KeyName { get; public set; }
    public string PrimaryKey { get; public set; }
    public string SecondaryKey { get; public set; }
    public AccessRights Rights { get; public set; }
    [CompilerGeneratedAttribute]
public string get_KeyName();
    [CompilerGeneratedAttribute]
public void set_KeyName(string value);
    public string get_PrimaryKey();
    public void set_PrimaryKey(string value);
    public string get_SecondaryKey();
    public void set_SecondaryKey(string value);
    [CompilerGeneratedAttribute]
public AccessRights get_Rights();
    [CompilerGeneratedAttribute]
public void set_Rights(AccessRights value);
    public sealed virtual bool Equals(SharedAccessSignatureAuthorizationRule other);
    public virtual bool Equals(object obj);
    private static int GetHashCode(SharedAccessSignatureAuthorizationRule rule);
    public virtual int GetHashCode();
}
public class Microsoft.Azure.Devices.Client.SharedAccessSignatureBuilder : object {
    private string _key;
    [CompilerGeneratedAttribute]
private string <KeyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TimeToLive>k__BackingField;
    public string KeyName { get; public set; }
    public string Key { get; public set; }
    public string Target { get; public set; }
    public TimeSpan TimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public string get_KeyName();
    [CompilerGeneratedAttribute]
public void set_KeyName(string value);
    public string get_Key();
    public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(TimeSpan value);
    public string ToSignature();
    private string BuildSignature(string keyName, string key, string target, TimeSpan timeToLive);
    private static string BuildExpiresOn(TimeSpan timeToLive);
    protected virtual string Sign(string requestString, string key);
}
internal static class Microsoft.Azure.Devices.Client.SharedAccessSignatureConstants : object {
    public static int MaxKeyNameLength;
    public static int MaxKeyLength;
    public static string SharedAccessSignature;
    public static string AudienceFieldName;
    public static string SignatureFieldName;
    public static string KeyNameFieldName;
    public static string ExpiryFieldName;
    public static string SignedResourceFullFieldName;
    public static char KeyValueSeparator;
    public static char PairSeparator;
    public static DateTime EpochTime;
    public static TimeSpan MaxClockSkew;
    private static SharedAccessSignatureConstants();
}
internal class Microsoft.Azure.Devices.Client.SignalGate : object {
    private int _state;
    internal bool IsLocked { get; }
    internal bool IsSignalled { get; }
    internal bool get_IsLocked();
    internal bool get_IsSignalled();
    public bool Signal();
    public bool Unlock();
    private static void ThrowInvalidSignalGateState();
}
internal class Microsoft.Azure.Devices.Client.SignalGateT`1 : SignalGate {
    [CompilerGeneratedAttribute]
private T <Result>k__BackingField;
    private T Result { get; private set; }
    [CompilerGeneratedAttribute]
private T get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(T value);
    public bool Signal(T result);
    public bool Unlock(T& result);
}
internal class Microsoft.Azure.Devices.Client.StringValidationHelper : object {
    private static char Base64Padding;
    private static HashSet`1<char> s_base64Table;
    private static StringValidationHelper();
    public static void EnsureBase64String(string value, string paramName);
    public static bool IsBase64StringValid(string value);
    public static void EnsureNullOrBase64String(string value, string paramName);
    public static bool IsNullOrBase64String(string value);
    public static bool IsBase64String(string value);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Devices.Client.TaskHelpers : object {
    public static Task CompletedTask;
    private static TaskHelpers();
    [ExtensionAttribute]
public static IAsyncResult ToAsyncResult(Task task, AsyncCallback callback, object state);
    [ExtensionAttribute]
public static IAsyncResult ToAsyncResult(Task`1<TResult> task, AsyncCallback callback, object state);
}
internal static class Microsoft.Azure.Devices.Client.Ticks : object {
    public static int ToMilliseconds(long ticks);
}
[DebuggerStepThroughAttribute]
internal class Microsoft.Azure.Devices.Client.TimeoutHelper : ValueType {
    private DateTime _deadline;
    private bool _isDeadlineSet;
    private TimeSpan _originalTimeout;
    public static TimeSpan MaxWait;
    public TimeoutHelper(TimeSpan timeout);
    public TimeoutHelper(TimeSpan timeout, bool startTimeout);
    private static TimeoutHelper();
    public static int ToMilliseconds(TimeSpan timeout);
    public TimeSpan GetRemainingTime();
    private void SetDeadline();
}
internal class Microsoft.Azure.Devices.Client.TransientFaultHandling.ExponentialBackoffRetryStrategy : RetryStrategy {
    private static Random s_random;
    private int _retryCount;
    private TimeSpan _minBackoff;
    private TimeSpan _maxBackoff;
    private TimeSpan _deltaBackoff;
    public ExponentialBackoffRetryStrategy(int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public ExponentialBackoffRetryStrategy(string name, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public ExponentialBackoffRetryStrategy(string name, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff, bool firstFastRetry);
    private static ExponentialBackoffRetryStrategy();
    public virtual ShouldRetry GetShouldRetry();
    [CompilerGeneratedAttribute]
private bool <GetShouldRetry>b__9_0(int currentRetryCount, Exception lastException, TimeSpan& retryInterval);
}
internal class Microsoft.Azure.Devices.Client.TransientFaultHandling.FixedInterval : RetryStrategy {
    private int _retryCount;
    private TimeSpan _retryInterval;
    public FixedInterval(int retryCount);
    public FixedInterval(int retryCount, TimeSpan retryInterval);
    public FixedInterval(string name, int retryCount, TimeSpan retryInterval);
    public FixedInterval(string name, int retryCount, TimeSpan retryInterval, bool firstFastRetry);
    public virtual ShouldRetry GetShouldRetry();
    [CompilerGeneratedAttribute]
private bool <GetShouldRetry>b__7_1(int currentRetryCount, Exception lastException, TimeSpan& interval);
}
internal static class Microsoft.Azure.Devices.Client.TransientFaultHandling.Guard : object {
    public static bool ArgumentNotNullOrEmptyString(string argumentValue, string argumentName);
    public static bool ArgumentNotNull(object argumentValue, string argumentName);
    public static void ArgumentNotNegativeValue(int argumentValue, string argumentName);
    public static void ArgumentNotNegativeValue(long argumentValue, string argumentName);
    public static void ArgumentNotGreaterThan(double argumentValue, double ceilingValue, string argumentName);
}
internal class Microsoft.Azure.Devices.Client.TransientFaultHandling.Incremental : RetryStrategy {
    private int _retryCount;
    private TimeSpan _initialInterval;
    private TimeSpan _increment;
    public Incremental(int retryCount, TimeSpan initialInterval, TimeSpan increment);
    public Incremental(string name, int retryCount, TimeSpan initialInterval, TimeSpan increment);
    public Incremental(string name, int retryCount, TimeSpan initialInterval, TimeSpan increment, bool firstFastRetry);
    public virtual ShouldRetry GetShouldRetry();
    [CompilerGeneratedAttribute]
private bool <GetShouldRetry>b__7_0(int currentRetryCount, Exception lastException, TimeSpan& retryInterval);
}
internal interface Microsoft.Azure.Devices.Client.TransientFaultHandling.ITransientErrorDetectionStrategy {
    public abstract virtual bool IsTransient(Exception ex);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Azure.Devices.Client.TransientFaultHandling.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentCannotBeGreaterThanBaseline { get; }
    internal static string ArgumentCannotBeNegative { get; }
    internal static string RetryLimitExceeded { get; }
    internal static string StringCannotBeEmpty { get; }
    internal static string TaskCannotBeNull { get; }
    internal static string TaskMustBeScheduled { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentCannotBeGreaterThanBaseline();
    internal static string get_ArgumentCannotBeNegative();
    internal static string get_RetryLimitExceeded();
    internal static string get_StringCannotBeEmpty();
    internal static string get_TaskCannotBeNull();
    internal static string get_TaskMustBeScheduled();
}
internal class Microsoft.Azure.Devices.Client.TransientFaultHandling.RetryingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <CurrentRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <LastException>k__BackingField;
    public int CurrentRetryCount { get; private set; }
    public TimeSpan Delay { get; private set; }
    public Exception LastException { get; private set; }
    public RetryingEventArgs(int currentRetryCount, TimeSpan delay, Exception lastException);
    [CompilerGeneratedAttribute]
public int get_CurrentRetryCount();
    [CompilerGeneratedAttribute]
private void set_CurrentRetryCount(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Delay();
    [CompilerGeneratedAttribute]
private void set_Delay(TimeSpan value);
    [CompilerGeneratedAttribute]
public Exception get_LastException();
    [CompilerGeneratedAttribute]
private void set_LastException(Exception value);
}
internal class Microsoft.Azure.Devices.Client.TransientFaultHandling.RetryLimitExceededException : Exception {
    public RetryLimitExceededException(string message);
    public RetryLimitExceededException(Exception innerException);
    public RetryLimitExceededException(string message, Exception innerException);
}
internal class Microsoft.Azure.Devices.Client.TransientFaultHandling.RetryPolicy : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<RetryingEventArgs> Retrying;
    [CompilerGeneratedAttribute]
private static RetryPolicy <NoRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private static RetryPolicy <DefaultFixed>k__BackingField;
    [CompilerGeneratedAttribute]
private static RetryPolicy <DefaultProgressive>k__BackingField;
    [CompilerGeneratedAttribute]
private static RetryPolicy <DefaultExponential>k__BackingField;
    [CompilerGeneratedAttribute]
private RetryStrategy <RetryStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransientErrorDetectionStrategy <ErrorDetectionStrategy>k__BackingField;
    public static RetryPolicy NoRetry { get; }
    public static RetryPolicy DefaultFixed { get; }
    public static RetryPolicy DefaultProgressive { get; }
    public static RetryPolicy DefaultExponential { get; }
    public RetryStrategy RetryStrategy { get; private set; }
    public ITransientErrorDetectionStrategy ErrorDetectionStrategy { get; private set; }
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, RetryStrategy retryStrategy);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan retryInterval);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan initialInterval, TimeSpan increment);
    private static RetryPolicy();
    [CompilerGeneratedAttribute]
public void add_Retrying(EventHandler`1<RetryingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Retrying(EventHandler`1<RetryingEventArgs> value);
    [CompilerGeneratedAttribute]
public static RetryPolicy get_NoRetry();
    [CompilerGeneratedAttribute]
public static RetryPolicy get_DefaultFixed();
    [CompilerGeneratedAttribute]
public static RetryPolicy get_DefaultProgressive();
    [CompilerGeneratedAttribute]
public static RetryPolicy get_DefaultExponential();
    [CompilerGeneratedAttribute]
public RetryStrategy get_RetryStrategy();
    [CompilerGeneratedAttribute]
private void set_RetryStrategy(RetryStrategy value);
    [CompilerGeneratedAttribute]
public ITransientErrorDetectionStrategy get_ErrorDetectionStrategy();
    [CompilerGeneratedAttribute]
private void set_ErrorDetectionStrategy(ITransientErrorDetectionStrategy value);
    public Task RunWithRetryAsync(Func`1<Task> taskAction, CancellationToken cancellationToken);
    public Task`1<TResult> RunWithRetryAsync(Func`1<Task`1<TResult>> taskFunc);
    public Task`1<TResult> RunWithRetryAsync(Func`1<Task`1<TResult>> taskFunc, CancellationToken cancellationToken);
    protected virtual void OnRetrying(int retryCount, Exception lastError, TimeSpan delay);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.TransientFaultHandling.RetryPolicy/<RunWithRetryAsync>d__34")]
private static Task RunWithRetryAsync(Func`1<Task> taskFunc, ShouldRetry shouldRetry, Func`2<Exception, bool> isTransient, Action`3<int, Exception, TimeSpan> onRetrying, bool fastFirstRetry, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.TransientFaultHandling.RetryPolicy/<RunWithRetryAsync>d__35`1")]
private static Task`1<T> RunWithRetryAsync(Func`1<Task`1<T>> taskFunc, ShouldRetry shouldRetry, Func`2<Exception, bool> isTransient, Action`3<int, Exception, TimeSpan> onRetrying, bool fastFirstRetry, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.Devices.Client.TransientFaultHandling.RetryStrategy : object {
    public static int DefaultClientRetryCount;
    public static TimeSpan DefaultClientBackoff;
    public static TimeSpan DefaultMaxBackoff;
    public static TimeSpan DefaultMinBackoff;
    public static TimeSpan DefaultRetryInterval;
    public static TimeSpan DefaultRetryIncrement;
    public static bool DefaultFirstFastRetry;
    [CompilerGeneratedAttribute]
private static RetryStrategy <NoRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private static RetryStrategy <DefaultFixed>k__BackingField;
    [CompilerGeneratedAttribute]
private static RetryStrategy <DefaultProgressive>k__BackingField;
    [CompilerGeneratedAttribute]
private static RetryStrategy <DefaultExponential>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FastFirstRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static RetryStrategy NoRetry { get; }
    public static RetryStrategy DefaultFixed { get; }
    public static RetryStrategy DefaultProgressive { get; }
    public static RetryStrategy DefaultExponential { get; }
    public bool FastFirstRetry { get; public set; }
    public string Name { get; private set; }
    protected RetryStrategy(string name, bool firstFastRetry);
    private static RetryStrategy();
    [CompilerGeneratedAttribute]
public static RetryStrategy get_NoRetry();
    [CompilerGeneratedAttribute]
public static RetryStrategy get_DefaultFixed();
    [CompilerGeneratedAttribute]
public static RetryStrategy get_DefaultProgressive();
    [CompilerGeneratedAttribute]
public static RetryStrategy get_DefaultExponential();
    [CompilerGeneratedAttribute]
public bool get_FastFirstRetry();
    [CompilerGeneratedAttribute]
public void set_FastFirstRetry(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public abstract virtual ShouldRetry GetShouldRetry();
}
internal class Microsoft.Azure.Devices.Client.TransientFaultHandling.ShouldRetry : MulticastDelegate {
    public ShouldRetry(object object, IntPtr method);
    public virtual bool Invoke(int retryCount, Exception lastException, TimeSpan& delay);
    public virtual IAsyncResult BeginInvoke(int retryCount, Exception lastException, TimeSpan& delay, AsyncCallback callback, object object);
    public virtual bool EndInvoke(TimeSpan& delay, IAsyncResult result);
}
internal class Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpAuthenticationRefresher : object {
    private static String[] s_accessRightsStringArray;
    private AmqpIotCbsLink _amqpIotCbsLink;
    private IotHubConnectionString _connectionString;
    private AmqpIotCbsTokenProvider _amqpIotCbsTokenProvider;
    private string _audience;
    private Task _refreshLoop;
    private bool _disposed;
    private CancellationTokenSource _refresherCancellationTokenSource;
    internal AmqpAuthenticationRefresher(IDeviceIdentity deviceIdentity, AmqpIotCbsLink amqpCbsLink);
    private static AmqpAuthenticationRefresher();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpAuthenticationRefresher/<InitLoopAsync>d__9")]
public sealed virtual Task InitLoopAsync(CancellationToken cancellationToken);
    public sealed virtual void StartLoop(DateTime refreshOn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpAuthenticationRefresher/<RefreshLoopAsync>d__11")]
private Task RefreshLoopAsync(DateTime refreshesOn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpAuthenticationRefresher/<StopLoopAsync>d__12")]
public sealed virtual Task StopLoopAsync();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal class Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpConnectionHolder : object {
    private IDeviceIdentity _deviceIdentity;
    private AmqpIotConnector _amqpIotConnector;
    private SemaphoreSlim _lock;
    private HashSet`1<AmqpUnit> _amqpUnits;
    private object _unitsLock;
    private AmqpIotConnection _amqpIotConnection;
    private IAmqpAuthenticationRefresher _amqpAuthenticationRefresher;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    public AmqpConnectionHolder(IDeviceIdentity deviceIdentity);
    public sealed virtual AmqpUnit CreateAmqpUnit(IDeviceIdentity deviceIdentity, Func`2<MethodRequestInternal, Task> onMethodCallback, Action`4<Twin, string, TwinCollection, IotHubException> twinMessageListener, Func`3<string, Message, Task> onModuleMessageReceivedCallback, Func`2<Message, Task> onDeviceMessageReceivedCallback, Action onUnitDisconnected);
    private void OnConnectionClosed(object o, EventArgs args);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpConnectionHolder/<ShutdownAsync>d__11")]
public sealed virtual Task ShutdownAsync();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpConnectionHolder/<CreateRefresherAsync>d__14")]
public sealed virtual Task`1<IAmqpAuthenticationRefresher> CreateRefresherAsync(IDeviceIdentity deviceIdentity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpConnectionHolder/<OpenSessionAsync>d__15")]
public sealed virtual Task`1<AmqpIotSession> OpenSessionAsync(IDeviceIdentity deviceIdentity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpConnectionHolder/<EnsureConnectionAsync>d__16")]
public sealed virtual Task`1<AmqpIotConnection> EnsureConnectionAsync(CancellationToken cancellationToken);
    public sealed virtual void RemoveAmqpUnit(AmqpUnit amqpUnit);
    internal IDeviceIdentity GetDeviceIdentityOfAuthenticationProvider();
    internal bool IsEmpty();
}
internal class Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpConnectionPool : object {
    private AmqpConnectionHolder[] _amqpSasIndividualPool;
    private IDictionary`2<string, AmqpConnectionHolder[]> _amqpSasGroupedPool;
    private object _lock;
    protected virtual IDictionary`2<string, AmqpConnectionHolder[]> GetAmqpSasGroupedPoolDictionary();
    public sealed virtual AmqpUnit CreateAmqpUnit(IDeviceIdentity deviceIdentity, Func`2<MethodRequestInternal, Task> onMethodCallback, Action`4<Twin, string, TwinCollection, IotHubException> twinMessageListener, Func`3<string, Message, Task> onModuleMessageReceivedCallback, Func`2<Message, Task> onDeviceMessageReceivedCallback, Action onUnitDisconnected);
    public sealed virtual void RemoveAmqpUnit(AmqpUnit amqpUnit);
    private AmqpConnectionHolder[] ResolveConnectionGroup(IDeviceIdentity deviceIdentity);
    private AmqpConnectionHolder ResolveConnectionByHashing(AmqpConnectionHolder[] pool, IDeviceIdentity deviceIdentity);
    private static int GetDeviceIdentityIndex(IDeviceIdentity deviceIdentity, int poolLength);
}
internal class Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpIotConnector : object {
    private static AmqpVersion s_amqpVersion_1_0_0;
    private static bool s_disableServerCertificateValidation;
    private AmqpTransportSettings _amqpTransportSettings;
    private string _hostName;
    private AmqpIotTransport _amqpIotTransport;
    internal AmqpIotConnector(AmqpTransportSettings amqpTransportSettings, string hostName);
    private static AmqpIotConnector();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpIotConnector/<OpenConnectionAsync>d__6")]
public Task`1<AmqpIotConnection> OpenConnectionAsync(CancellationToken cancellationToken);
    private static bool InitializeDisableServerCertificateValidation();
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler : TransportHandler {
    private static int ResponseTimeoutInSeconds;
    private TimeSpan _operationTimeout;
    protected AmqpUnit _amqpUnit;
    private Action`1<TwinCollection> _onDesiredStatePatchListener;
    private object _lock;
    private ConcurrentDictionary`2<string, TaskCompletionSource`1<Twin>> _twinResponseCompletions;
    private bool _closed;
    public bool IsUsable { get; }
    private static AmqpTransportHandler();
    internal AmqpTransportHandler(PipelineContext context, IotHubConnectionString connectionString, AmqpTransportSettings transportSettings, Func`2<MethodRequestInternal, Task> onMethodCallback, Action`1<TwinCollection> onDesiredStatePatchReceivedCallback, Func`3<string, Message, Task> onModuleMessageReceivedCallback, Func`2<Message, Task> onDeviceMessageReceivedCallback);
    private void OnDisconnected();
    public virtual bool get_IsUsable();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<OpenAsync>d__12")]
public virtual Task OpenAsync(TimeoutHelper timeoutHelper);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<OpenAsync>d__13")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<CloseAsync>d__14")]
public virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<SendEventAsync>d__15")]
public virtual Task SendEventAsync(Message message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<SendEventAsync>d__16")]
public virtual Task SendEventAsync(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<ReceiveAsync>d__17")]
public virtual Task`1<Message> ReceiveAsync(TimeoutHelper timeoutHelper);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<ReceiveAsync>d__18")]
public virtual Task`1<Message> ReceiveAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<EnableReceiveMessageAsync>d__19")]
public virtual Task EnableReceiveMessageAsync(CancellationToken cancellationToken);
    public virtual Task EnsurePendingMessagesAreDeliveredAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<DisableReceiveMessageAsync>d__21")]
public virtual Task DisableReceiveMessageAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<EnableMethodsAsync>d__22")]
public virtual Task EnableMethodsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<DisableMethodsAsync>d__23")]
public virtual Task DisableMethodsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<SendMethodResponseAsync>d__24")]
public virtual Task SendMethodResponseAsync(MethodResponseInternal methodResponse, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<EnableTwinPatchAsync>d__25")]
public virtual Task EnableTwinPatchAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<DisableTwinPatchAsync>d__26")]
public virtual Task DisableTwinPatchAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<SendTwinGetAsync>d__27")]
public virtual Task`1<Twin> SendTwinGetAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<SendTwinPatchAsync>d__28")]
public virtual Task SendTwinPatchAsync(TwinCollection reportedProperties, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<RoundTripTwinMessageAsync>d__29")]
private Task`1<Twin> RoundTripTwinMessageAsync(AmqpTwinMessageType amqpTwinMessageType, TwinCollection reportedProperties, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<EnableEventReceiveAsync>d__30")]
public virtual Task EnableEventReceiveAsync(bool isAnEdgeModule, CancellationToken cancellationToken);
    public virtual Task CompleteAsync(string lockToken, CancellationToken cancellationToken);
    public virtual Task AbandonAsync(string lockToken, CancellationToken cancellationToken);
    public virtual Task RejectAsync(string lockToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpTransportHandler/<DisposeMessageAsync>d__34")]
private Task DisposeMessageAsync(string lockToken, AmqpIotDisposeActions outcome, CancellationToken cancellationToken);
    private void TwinMessageListener(Twin twin, string correlationId, TwinCollection twinCollection, IotHubException ex);
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Azure.Devices.Client.Transport.Amqp.AmqpUnitManager : object {
    private static AmqpUnitManager s_instance;
    private IDictionary`2<string, IAmqpUnitManager> _amqpConnectionPools;
    private object _connectionPoolLock;
    private static AmqpUnitManager();
    internal static AmqpUnitManager GetInstance();
    public sealed virtual AmqpUnit CreateAmqpUnit(IDeviceIdentity deviceIdentity, Func`2<MethodRequestInternal, Task> onMethodCallback, Action`4<Twin, string, TwinCollection, IotHubException> twinMessageListener, Func`3<string, Message, Task> onModuleMessageReceivedCallback, Func`2<Message, Task> onDeviceMessageReceivedCallback, Action onUnitDisconnected);
    public sealed virtual void RemoveAmqpUnit(AmqpUnit amqpUnit);
    private IAmqpUnitManager ResolveConnectionPool(string host);
}
internal class Microsoft.Azure.Devices.Client.Transport.Amqp.CancellationTokenBundle : object {
    private CancellationTokenSource _timeoutTokenSource;
    private CancellationTokenSource _bundleSource;
    private bool _isDisposed;
    public CancellationToken Token { get; }
    public CancellationTokenBundle(TimeSpan timeout, CancellationToken cancellationToken);
    public CancellationToken get_Token();
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.Devices.Client.Transport.Amqp.DeviceIdentity : object {
    [CompilerGeneratedAttribute]
private IotHubConnectionString <IotHubConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private AmqpTransportSettings <AmqpTransportSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ProductInfo <ProductInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationModel <AuthenticationModel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Audience>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientOptions <Options>k__BackingField;
    public IotHubConnectionString IotHubConnectionString { get; }
    public AmqpTransportSettings AmqpTransportSettings { get; }
    public ProductInfo ProductInfo { get; }
    public AuthenticationModel AuthenticationModel { get; }
    public string Audience { get; }
    public ClientOptions Options { get; }
    internal DeviceIdentity(IotHubConnectionString iotHubConnectionString, AmqpTransportSettings amqpTransportSettings, ProductInfo productInfo, ClientOptions options);
    [CompilerGeneratedAttribute]
public sealed virtual IotHubConnectionString get_IotHubConnectionString();
    [CompilerGeneratedAttribute]
public sealed virtual AmqpTransportSettings get_AmqpTransportSettings();
    [CompilerGeneratedAttribute]
public sealed virtual ProductInfo get_ProductInfo();
    [CompilerGeneratedAttribute]
public sealed virtual AuthenticationModel get_AuthenticationModel();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Audience();
    [CompilerGeneratedAttribute]
public sealed virtual ClientOptions get_Options();
    private static string CreateAudience(IotHubConnectionString connectionString);
    public sealed virtual bool IsPooling();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static int UpdateHashCode(int hashCode, object field);
}
internal interface Microsoft.Azure.Devices.Client.Transport.Amqp.IAmqpAuthenticationRefresher {
    public abstract virtual Task InitLoopAsync(CancellationToken cancellationToken);
    public abstract virtual void StartLoop(DateTime refreshOn, CancellationToken cancellationToken);
    public abstract virtual Task StopLoopAsync();
}
internal interface Microsoft.Azure.Devices.Client.Transport.Amqp.IAmqpConnectionHolder {
    public abstract virtual Task`1<AmqpIotSession> OpenSessionAsync(IDeviceIdentity deviceIdentity, CancellationToken cancellationToken);
    public abstract virtual Task`1<AmqpIotConnection> EnsureConnectionAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<IAmqpAuthenticationRefresher> CreateRefresherAsync(IDeviceIdentity deviceIdentity, CancellationToken cancellationToken);
    public abstract virtual Task ShutdownAsync();
}
internal interface Microsoft.Azure.Devices.Client.Transport.Amqp.IAmqpUnitManager {
    public abstract virtual AmqpUnit CreateAmqpUnit(IDeviceIdentity deviceIdentity, Func`2<MethodRequestInternal, Task> onMethodCallback, Action`4<Twin, string, TwinCollection, IotHubException> twinMessageListener, Func`3<string, Message, Task> onModuleMessageReceivedCallback, Func`2<Message, Task> onDeviceMessageReceivedCallback, Action onUnitDisconnected);
    public abstract virtual void RemoveAmqpUnit(AmqpUnit amqpUnit);
}
internal interface Microsoft.Azure.Devices.Client.Transport.Amqp.IDeviceIdentity {
    public AuthenticationModel AuthenticationModel { get; }
    public AmqpTransportSettings AmqpTransportSettings { get; }
    public IotHubConnectionString IotHubConnectionString { get; }
    public ProductInfo ProductInfo { get; }
    public ClientOptions Options { get; }
    public string Audience { get; }
    public abstract virtual AuthenticationModel get_AuthenticationModel();
    public abstract virtual AmqpTransportSettings get_AmqpTransportSettings();
    public abstract virtual IotHubConnectionString get_IotHubConnectionString();
    public abstract virtual ProductInfo get_ProductInfo();
    public abstract virtual ClientOptions get_Options();
    public abstract virtual string get_Audience();
    public abstract virtual bool IsPooling();
}
internal class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotCbsLink : object {
    private AmqpCbsLink _amqpCbsLink;
    internal AmqpIotCbsLink(AmqpCbsLink amqpCbsLink);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotCbsLink/<SendTokenAsync>d__2")]
public Task`1<DateTime> SendTokenAsync(ICbsTokenProvider tokenProvider, Uri namespaceAddress, string audience, string resource, String[] requiredClaims, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotCbsTokenProvider : object {
    private IotHubConnectionString _connectionString;
    private bool _isDisposed;
    public AmqpIotCbsTokenProvider(IotHubConnectionString connectionString);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotCbsTokenProvider/<GetTokenAsync>d__3")]
public sealed virtual Task`1<CbsToken> GetTokenAsync(Uri namespaceAddress, string appliesTo, String[] requiredClaims);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotConnection : object {
    [CompilerGeneratedAttribute]
private EventHandler Closed;
    private AmqpConnection _amqpConnection;
    private AmqpIotCbsLink _amqpIotCbsLink;
    internal AmqpIotConnection(AmqpConnection amqpConnection);
    [CompilerGeneratedAttribute]
public void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Closed(EventHandler value);
    internal AmqpIotCbsLink GetCbsLink();
    internal void AmqpConnectionClosed(object sender, EventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotConnection/<OpenSessionAsync>d__8")]
internal Task`1<AmqpIotSession> OpenSessionAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotConnection/<CreateRefresherAsync>d__9")]
internal Task`1<IAmqpAuthenticationRefresher> CreateRefresherAsync(IDeviceIdentity deviceIdentity, CancellationToken cancellationToken);
    internal void SafeClose();
    internal bool IsClosing();
}
internal static class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotConstants : object {
    internal static string Vendor;
    internal static int DefaultSecurePort;
    internal static int ProtocolHeaderSize;
    internal static UInt32 DefaultMaxFrameSize;
    internal static ArraySegment`1<byte> NullBinary;
    internal static UInt32 AmqpBatchedMessageFormat;
    internal static Accepted AcceptedOutcome;
    internal static string ResponseStatusName;
    internal static string TelemetrySenderLinkSuffix;
    internal static string TelemetryReceiveLinkSuffix;
    internal static string EventsReceiverLinkSuffix;
    internal static string MethodsSenderLinkSuffix;
    internal static string MethodsReceiverLinkSuffix;
    internal static string MethodCorrelationIdPrefix;
    internal static string TwinSenderLinkSuffix;
    internal static string TwinReceiverLinkSuffix;
    internal static string TwinCorrelationIdPrefix;
    internal static string MethodName;
    internal static string Status;
    public static AmqpSymbol TrackingId;
    public static AmqpSymbol ClientVersion;
    public static AmqpSymbol ApiVersion;
    public static AmqpSymbol ChannelCorrelationId;
    public static AmqpSymbol AuthChain;
    public static AmqpSymbol ModelId;
    internal static string IotHubSasTokenType;
    private static AmqpIotConstants();
}
internal enum Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotDisposeActions : Enum {
    public int value__;
    public static AmqpIotDisposeActions Accepted;
    public static AmqpIotDisposeActions Released;
    public static AmqpIotDisposeActions Rejected;
}
internal static class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotErrorAdapter : object {
    public static AmqpSymbol TimeoutName;
    public static AmqpSymbol StackTraceName;
    public static AmqpSymbol DeadLetterName;
    public static string DeadLetterReasonHeader;
    public static string DeadLetterErrorDescriptionHeader;
    public static AmqpSymbol TimeoutError;
    public static AmqpSymbol MessageLockLostError;
    public static AmqpSymbol IotHubNotFoundError;
    public static AmqpSymbol ArgumentError;
    public static AmqpSymbol ArgumentOutOfRangeError;
    public static AmqpSymbol DeviceContainerThrottled;
    public static AmqpSymbol IotHubSuspended;
    private static AmqpIotErrorAdapter();
    public static Exception GetExceptionFromOutcome(Outcome outcome);
    public static Exception ToIotHubClientContract(AmqpException amqpException);
    public static Exception ToIotHubClientContract(Error error);
}
internal class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotExceptionAdapter : object {
    internal static Exception ConvertToIotHubException(Exception exception);
    internal static Exception ConvertToIotHubException(Exception exception, AmqpObject source);
}
internal class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotLinkFactory : object {
    private static AmqpIotLinkFactory s_instance;
    private static AmqpIotLinkFactory();
    public static AmqpIotLinkFactory GetInstance();
    public sealed virtual IAsyncResult BeginOpenLink(AmqpLink link, TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual AmqpLink CreateLink(AmqpSession session, AmqpLinkSettings settings);
    public sealed virtual void EndOpenLink(IAsyncResult result);
}
internal class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotMessageConverter : object {
    private static string LockTokenName;
    private static string SequenceNumberName;
    private static string TimeSpanName;
    private static string UriName;
    private static string DateTimeOffsetName;
    private static string InputName;
    private static string AmqpDiagIdKey;
    private static string AmqpDiagCorrelationContextKey;
    private static string MethodName;
    private static string Status;
    public static Message AmqpMessageToMessage(AmqpMessage amqpMessage);
    public static AmqpMessage MessageToAmqpMessage(Message message);
    public static void UpdateMessageHeaderAndProperties(AmqpMessage amqpMessage, Message message);
    public static void UpdateAmqpMessageHeadersAndProperties(AmqpMessage amqpMessage, Message data, bool copyUserProperties);
    public static AmqpMessage ConvertMethodResponseInternalToAmqpMessage(MethodResponseInternal methodResponseInternal);
    public static MethodRequestInternal ConstructMethodRequestFromAmqpMessage(AmqpMessage amqpMessage, CancellationToken cancellationToken);
    public static void PopulateAmqpMessageFromMethodResponse(AmqpMessage amqpMessage, MethodResponseInternal methodResponseInternal);
    private static bool TryGetNetObjectFromAmqpObject(object amqpObject, MappingType mappingType, Object& netObject);
    private static bool TryGetAmqpObjectFromNetObject(object netObject, MappingType mappingType, Object& amqpObject);
    internal static ArraySegment`1<byte> ReadStream(Stream stream);
}
internal class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotOutcome : object {
    private Outcome _outcome;
    public AmqpIotOutcome(Outcome outcome);
    public void ThrowIfNotAccepted();
    public void ThrowIfError();
}
internal class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotReceivingLink : object {
    [CompilerGeneratedAttribute]
private EventHandler Closed;
    private ReceivingAmqpLink _receivingAmqpLink;
    private Action`1<Message> _onEventsReceived;
    private Action`1<Message> _onDeviceMessageReceived;
    private Action`1<MethodRequestInternal> _onMethodReceived;
    private Action`4<Twin, string, TwinCollection, IotHubException> _onTwinMessageReceived;
    public AmqpIotReceivingLink(ReceivingAmqpLink receivingAmqpLink);
    [CompilerGeneratedAttribute]
public void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Closed(EventHandler value);
    private void ReceivingAmqpLinkClosed(object sender, EventArgs e);
    internal Task CloseAsync(CancellationToken cancellationToken);
    internal bool IsClosing();
    internal void SafeClose();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotReceivingLink/<ReceiveAmqpMessageAsync>d__13")]
internal Task`1<Message> ReceiveAmqpMessageAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotReceivingLink/<DisposeMessageAsync>d__14")]
internal Task`1<AmqpIotOutcome> DisposeMessageAsync(string lockToken, Outcome outcome, CancellationToken cancellationToken);
    private static ArraySegment`1<byte> ConvertToDeliveryTag(string lockToken);
    internal void RegisterReceiveMessageListener(Action`1<Message> onDeviceMessageReceived);
    private void OnDeviceMessageReceived(AmqpMessage amqpMessage);
    internal void RegisterEventListener(Action`1<Message> onEventsReceived);
    private void OnEventsReceived(AmqpMessage amqpMessage);
    internal void RegisterMethodListener(Action`1<MethodRequestInternal> onMethodReceived);
    private void OnMethodReceived(AmqpMessage amqpMessage);
    private void DisposeDelivery(AmqpMessage amqpMessage, bool settled, Accepted acceptedOutcome);
    internal void RegisterTwinListener(Action`4<Twin, string, TwinCollection, IotHubException> onDesiredPropertyReceived);
    private void OnTwinChangesReceived(AmqpMessage amqpMessage);
    internal static int GetStatus(AmqpMessage response);
}
internal class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotResourceException : IotHubException {
    internal AmqpIotResourceException(bool isTransient);
    internal AmqpIotResourceException(string message, bool isTransient);
    internal AmqpIotResourceException(string message, Exception cause, bool isTransient);
    internal AmqpIotResourceException(string message);
    internal AmqpIotResourceException(string message, Exception innerException);
}
internal static class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotResultAdapter : object {
    internal static Outcome GetResult(AmqpIotDisposeActions amqpIotConstants);
}
internal class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSendingLink : object {
    [CompilerGeneratedAttribute]
private EventHandler Closed;
    private SendingAmqpLink _sendingAmqpLink;
    public AmqpIotSendingLink(SendingAmqpLink sendingAmqpLink);
    [CompilerGeneratedAttribute]
public void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Closed(EventHandler value);
    private void SendingAmqpLinkClosed(object sender, EventArgs e);
    internal Task CloseAsync(CancellationToken cancellationToken);
    internal void SafeClose();
    internal bool IsClosing();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSendingLink/<SendMessageAsync>d__9")]
internal Task`1<AmqpIotOutcome> SendMessageAsync(Message message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSendingLink/<SendMessagesAsync>d__10")]
internal Task`1<AmqpIotOutcome> SendMessagesAsync(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSendingLink/<SendAmqpMessageAsync>d__11")]
private Task`1<Outcome> SendAmqpMessageAsync(AmqpMessage amqpMessage, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSendingLink/<SendMethodResponseAsync>d__12")]
internal Task`1<AmqpIotOutcome> SendMethodResponseAsync(MethodResponseInternal methodResponse, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSendingLink/<SendTwinGetMessageAsync>d__13")]
internal Task`1<AmqpIotOutcome> SendTwinGetMessageAsync(string correlationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSendingLink/<SendTwinPatchMessageAsync>d__14")]
internal Task`1<AmqpIotOutcome> SendTwinPatchMessageAsync(string correlationId, TwinCollection reportedProperties, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSendingLink/<SubscribeToDesiredPropertiesAsync>d__15")]
internal Task`1<AmqpIotOutcome> SubscribeToDesiredPropertiesAsync(string correlationId, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSession : object {
    [CompilerGeneratedAttribute]
private EventHandler Closed;
    private AmqpSession _amqpSession;
    public AmqpIotSession(AmqpSession amqpSession);
    [CompilerGeneratedAttribute]
public void add_Closed(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Closed(EventHandler value);
    private void AmqpSessionClosed(object sender, EventArgs e);
    internal Task CloseAsync(CancellationToken cancellationToken);
    internal void SafeClose();
    internal bool IsClosing();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSession/<OpenTelemetrySenderLinkAsync>d__9")]
internal Task`1<AmqpIotSendingLink> OpenTelemetrySenderLinkAsync(IDeviceIdentity deviceIdentity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSession/<OpenMessageReceiverLinkAsync>d__10")]
internal Task`1<AmqpIotReceivingLink> OpenMessageReceiverLinkAsync(IDeviceIdentity deviceIdentity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSession/<OpenEventsReceiverLinkAsync>d__11")]
internal Task`1<AmqpIotReceivingLink> OpenEventsReceiverLinkAsync(IDeviceIdentity deviceIdentity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSession/<OpenMethodsSenderLinkAsync>d__12")]
internal Task`1<AmqpIotSendingLink> OpenMethodsSenderLinkAsync(IDeviceIdentity deviceIdentity, string correlationIdSuffix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSession/<OpenMethodsReceiverLinkAsync>d__13")]
internal Task`1<AmqpIotReceivingLink> OpenMethodsReceiverLinkAsync(IDeviceIdentity deviceIdentity, string correlationIdSuffix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSession/<OpenTwinReceiverLinkAsync>d__14")]
internal Task`1<AmqpIotReceivingLink> OpenTwinReceiverLinkAsync(IDeviceIdentity deviceIdentity, string correlationIdSuffix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSession/<OpenTwinSenderLinkAsync>d__15")]
internal Task`1<AmqpIotSendingLink> OpenTwinSenderLinkAsync(IDeviceIdentity deviceIdentity, string correlationIdSuffix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSession/<OpenSendingAmqpLinkAsync>d__16")]
private static Task`1<AmqpIotSendingLink> OpenSendingAmqpLinkAsync(IDeviceIdentity deviceIdentity, AmqpSession amqpSession, Nullable`1<byte> senderSettleMode, Nullable`1<byte> receiverSettleMode, string deviceTemplate, string moduleTemplate, string linkSuffix, string correlationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotSession/<OpenReceivingAmqpLinkAsync>d__17")]
private static Task`1<AmqpIotReceivingLink> OpenReceivingAmqpLinkAsync(IDeviceIdentity deviceIdentity, AmqpSession amqpSession, Nullable`1<byte> senderSettleMode, Nullable`1<byte> receiverSettleMode, string deviceTemplate, string moduleTemplate, string linkSuffix, string correlationId, CancellationToken cancellationToken);
    private static string BuildLinkAddress(IDeviceIdentity deviceIdentity, string deviceTemplate, string moduleTemplate);
}
internal class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotTransport : object {
    private bool _disableServerCertificateValidation;
    private string _hostName;
    private AmqpSettings _amqpSettings;
    private AmqpTransportSettings _amqpTransportSettings;
    private TlsTransportSettings _tlsTransportSettings;
    private ClientWebSocketTransport _clientWebSocketTransport;
    public AmqpIotTransport(AmqpSettings amqpSettings, AmqpTransportSettings amqpTransportSettings, string hostName, bool disableServerCertificateValidation);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotTransport/<InitializeAsync>d__8")]
internal Task`1<TransportBase> InitializeAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotTransport/<CreateClientWebSocketTransportAsync>d__9")]
private Task`1<TransportBase> CreateClientWebSocketTransportAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotTransport/<CreateClientWebSocketAsync>d__10")]
private Task`1<ClientWebSocket> CreateClientWebSocketAsync(Uri websocketUri, CancellationToken cancellationToken);
    private bool OnRemoteCertificateValidation(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    private static bool CausedByRevocationCheckError(X509Chain chain);
}
internal class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpIotTransportLog : AmqpTrace {
    public virtual void AmqpAbortThrowingException(string exception);
    public virtual void AmqpAddSession(object source, object session, ushort localChannel, ushort remoteChannel);
    public virtual void AmqpAttachLink(object connection, object session, object link, UInt32 localHandle, UInt32 remoteHandle, string linkName, string role, object source, object target);
    public virtual void AmqpCacheMessage(object source, UInt32 deliveryId, int count, bool isPrefecthingBySize, long totalCacheSizeInBytes, UInt32 totalLinkCredit, UInt32 linkCredit);
    public virtual void AmqpCloseConnection(object source, object connection, bool abort);
    public virtual void AmqpDeliveryNotFound(object source, string deliveryTag);
    public virtual void AmqpDispose(object source, UInt32 deliveryId, bool settled, object state);
    public virtual void AmqpDynamicBufferSizeChange(object source, string type, int oldSize, int newSize);
    public virtual void AmqpHandleException(Exception exception, string traceInfo);
    public virtual void AmqpInsecureTransport(object source, object transport, bool isSecure, bool isAuthenticated);
    public virtual void AmqpIoEvent(object source, int ioEvent, long queueSize);
    public virtual void AmqpLinkDetach(object source, string name, UInt32 handle, string action, string error);
    public virtual void AmqpListenSocketAcceptError(object source, bool willRetry, string error);
    public virtual void AmqpLogError(object source, string operation, string message);
    public virtual void AmqpLogOperationInformational(object source, TraceOperation operation, object detail);
    public virtual void AmqpLogOperationVerbose(object source, TraceOperation operation, object detail);
    public virtual void AmqpMissingHandle(object source, string type, UInt32 handle);
    public virtual void AmqpOpenConnection(object source, object connection);
    public virtual void AmqpOpenEntityFailed(object source, object obj, string name, string entityName, string error);
    public virtual void AmqpOpenEntitySucceeded(object source, object obj, string name, string entityName);
    public virtual void AmqpReceiveMessage(object source, UInt32 deliveryId, int transferCount);
    public virtual void AmqpRemoveLink(object connection, object session, object link, UInt32 localHandle, UInt32 remoteHandle, string linkName);
    public virtual void AmqpRemoveSession(object source, object session, ushort localChannel, ushort remoteChannel);
    public virtual void AmqpSessionWindowClosed(object source, int nextId);
    public virtual void AmqpStateTransition(object source, string operation, object fromState, object toState);
    public virtual void AmqpUpgradeTransport(object source, object from, object to);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal enum Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpTwinMessageType : Enum {
    public int value__;
    public static AmqpTwinMessageType Get;
    public static AmqpTwinMessageType Patch;
    public static AmqpTwinMessageType Put;
}
internal class Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit : object {
    private IDeviceIdentity _deviceIdentity;
    private Func`2<MethodRequestInternal, Task> _onMethodCallback;
    private Action`4<Twin, string, TwinCollection, IotHubException> _twinMessageListener;
    private Func`3<string, Message, Task> _onModuleMessageReceivedCallback;
    private Func`2<Message, Task> _onDeviceMessageReceivedCallback;
    private IAmqpConnectionHolder _amqpConnectionHolder;
    private Action _onUnitDisconnected;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _closed;
    private SemaphoreSlim _sessionSemaphore;
    private AmqpIotSendingLink _messageSendingLink;
    private AmqpIotReceivingLink _messageReceivingLink;
    private SemaphoreSlim _messageReceivingLinkSemaphore;
    private SemaphoreSlim _messageReceivingCallbackSemaphore;
    private bool _isDeviceReceiveMessageCallbackSet;
    private AmqpIotReceivingLink _eventReceivingLink;
    private SemaphoreSlim _eventReceivingLinkSemaphore;
    private EventHandler _eventReceiverLinkDisconnected;
    private AmqpIotSendingLink _methodSendingLink;
    private AmqpIotReceivingLink _methodReceivingLink;
    private SemaphoreSlim _methodLinkSemaphore;
    private EventHandler _methodSenderLinkDisconnected;
    private EventHandler _methodReceiverLinkDisconnected;
    private AmqpIotSendingLink _twinSendingLink;
    private AmqpIotReceivingLink _twinReceivingLink;
    private SemaphoreSlim _twinLinksSemaphore;
    private EventHandler _twinSenderLinkDisconnected;
    private EventHandler _twinReceiverLinkDisconnected;
    private AmqpIotSession _amqpIotSession;
    private IAmqpAuthenticationRefresher _amqpAuthenticationRefresher;
    public AmqpUnit(IDeviceIdentity deviceIdentity, IAmqpConnectionHolder amqpConnectionHolder, Func`2<MethodRequestInternal, Task> onMethodCallback, Action`4<Twin, string, TwinCollection, IotHubException> twinMessageListener, Func`3<string, Message, Task> onModuleMessageReceivedCallback, Func`2<Message, Task> onDeviceMessageReceivedCallback, Action onUnitDisconnected);
    internal IDeviceIdentity GetDeviceIdentity();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<OpenAsync>d__32")]
public Task OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<EnsureSessionIsOpenAsync>d__33")]
internal Task`1<AmqpIotSession> EnsureSessionIsOpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<CloseAsync>d__34")]
public Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<CleanupAsync>d__35")]
private Task CleanupAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<EnsureMessageReceivingLinkIsOpenAsync>d__36")]
private Task EnsureMessageReceivingLinkIsOpenAsync(CancellationToken cancellationToken, bool enableCallback);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<SendMessagesAsync>d__37")]
public Task`1<AmqpIotOutcome> SendMessagesAsync(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<SendMessageAsync>d__38")]
public Task`1<AmqpIotOutcome> SendMessageAsync(Message message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<ReceiveMessageAsync>d__39")]
public Task`1<Message> ReceiveMessageAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<EnableReceiveMessageAsync>d__40")]
public Task EnableReceiveMessageAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<DisableReceiveMessageAsync>d__41")]
public Task DisableReceiveMessageAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<DisableMessageReceivingLinkAsync>d__42")]
public Task DisableMessageReceivingLinkAsync(CancellationToken cancellationToken);
    private void OnDeviceMessageReceived(Message message);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<DisposeMessageAsync>d__44")]
public Task`1<AmqpIotOutcome> DisposeMessageAsync(string lockToken, AmqpIotDisposeActions disposeAction, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<EnableEventReceiveAsync>d__45")]
public Task EnableEventReceiveAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<SendEventsAsync>d__46")]
public Task`1<AmqpIotOutcome> SendEventsAsync(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<SendEventAsync>d__47")]
public Task`1<AmqpIotOutcome> SendEventAsync(Message message, CancellationToken cancellationToken);
    public void OnEventsReceived(Message message);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<EnableMethodsAsync>d__49")]
public Task EnableMethodsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<OpenMethodsReceiverLinkAsync>d__50")]
private Task OpenMethodsReceiverLinkAsync(AmqpIotSession amqpIotSession, string correlationIdSuffix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<DisableTwinLinksAsync>d__51")]
public Task DisableTwinLinksAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<DisableMethodsAsync>d__52")]
public Task DisableMethodsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<OpenMethodsSenderLinkAsync>d__53")]
private Task OpenMethodsSenderLinkAsync(AmqpIotSession amqpIotSession, string correlationIdSuffix, CancellationToken cancellationToken);
    private void OnMethodReceived(MethodRequestInternal methodRequestInternal);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<SendMethodResponseAsync>d__55")]
public Task`1<AmqpIotOutcome> SendMethodResponseAsync(MethodResponseInternal methodResponse, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<EnableTwinLinksAsync>d__56")]
internal Task EnableTwinLinksAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<OpenTwinReceiverLinkAsync>d__57")]
private Task OpenTwinReceiverLinkAsync(AmqpIotSession amqpIotSession, string correlationIdSuffix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<OpenTwinSenderLinkAsync>d__58")]
private Task OpenTwinSenderLinkAsync(AmqpIotSession amqpIotSession, string correlationIdSuffix, CancellationToken cancellationToken);
    private void OnDesiredPropertyReceived(Twin twin, string correlationId, TwinCollection twinCollection, IotHubException ex);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.AmqpIot.AmqpUnit/<SendTwinMessageAsync>d__60")]
public Task SendTwinMessageAsync(AmqpTwinMessageType amqpTwinMessageType, string correlationId, TwinCollection reportedProperties, CancellationToken cancellationToken);
    public void OnConnectionDisconnected();
    private void OnSessionDisconnected(object o, EventArgs args);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <EnsureSessionIsOpenAsync>b__33_0(object obj, EventArgs arg);
    [CompilerGeneratedAttribute]
private void <EnsureMessageReceivingLinkIsOpenAsync>b__36_0(object obj, EventArgs arg);
    [CompilerGeneratedAttribute]
private void <EnableEventReceiveAsync>b__45_0(object obj, EventArgs arg);
}
internal enum Microsoft.Azure.Devices.Client.Transport.AuthenticationModel : Enum {
    public int value__;
    public static AuthenticationModel SasGrouped;
    public static AuthenticationModel SasIndividual;
    public static AuthenticationModel X509;
}
internal enum Microsoft.Azure.Devices.Client.Transport.ClientTransportStatus : Enum {
    public int value__;
    public static ClientTransportStatus Closed;
    public static ClientTransportStatus Open;
}
internal class Microsoft.Azure.Devices.Client.Transport.DefaultDelegatingHandler : object {
    protected internal static string ClientDisposedMessage;
    protected Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isDisposed;
    private IDelegatingHandler modreq(System.Runtime.CompilerServices.IsVolatile) _innerHandler;
    [CompilerGeneratedAttribute]
private PipelineContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ContinuationFactory`1<IDelegatingHandler> <ContinuationFactory>k__BackingField;
    public PipelineContext Context { get; protected set; }
    public ContinuationFactory`1<IDelegatingHandler> ContinuationFactory { get; public set; }
    public IDelegatingHandler InnerHandler { get; protected set; }
    public bool IsUsable { get; }
    protected internal DefaultDelegatingHandler(PipelineContext context, IDelegatingHandler innerHandler);
    [CompilerGeneratedAttribute]
public PipelineContext get_Context();
    [CompilerGeneratedAttribute]
protected void set_Context(PipelineContext value);
    [CompilerGeneratedAttribute]
public sealed virtual ContinuationFactory`1<IDelegatingHandler> get_ContinuationFactory();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContinuationFactory(ContinuationFactory`1<IDelegatingHandler> value);
    public IDelegatingHandler get_InnerHandler();
    protected void set_InnerHandler(IDelegatingHandler value);
    public virtual Task OpenAsync(TimeoutHelper timeoutHelper);
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual Task CloseAsync(CancellationToken cancellationToken);
    public virtual Task WaitForTransportClosedAsync();
    public virtual Task`1<Message> ReceiveAsync(CancellationToken cancellationToken);
    public virtual Task`1<Message> ReceiveAsync(TimeoutHelper timeoutHelper);
    public virtual Task EnableReceiveMessageAsync(CancellationToken cancellationToken);
    public virtual Task EnsurePendingMessagesAreDeliveredAsync(CancellationToken cancellationToken);
    public virtual Task DisableReceiveMessageAsync(CancellationToken cancellationToken);
    public virtual Task CompleteAsync(string lockToken, CancellationToken cancellationToken);
    public virtual Task AbandonAsync(string lockToken, CancellationToken cancellationToken);
    public virtual Task RejectAsync(string lockToken, CancellationToken cancellationToken);
    public virtual Task SendEventAsync(Message message, CancellationToken cancellationToken);
    public virtual Task SendEventAsync(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    public virtual Task EnableMethodsAsync(CancellationToken cancellationToken);
    public virtual Task DisableMethodsAsync(CancellationToken cancellationToken);
    public virtual Task SendMethodResponseAsync(MethodResponseInternal methodResponse, CancellationToken cancellationToken);
    public virtual Task EnableTwinPatchAsync(CancellationToken cancellationToken);
    public virtual Task DisableTwinPatchAsync(CancellationToken cancellationToken);
    public virtual Task`1<Twin> SendTwinGetAsync(CancellationToken cancellationToken);
    public virtual Task SendTwinPatchAsync(TwinCollection reportedProperties, CancellationToken cancellationToken);
    public virtual Task EnableEventReceiveAsync(bool isAnEdgeModule, CancellationToken cancellationToken);
    public virtual Task DisableEventReceiveAsync(bool isAnEdgeModule, CancellationToken cancellationToken);
    public virtual bool get_IsUsable();
    public virtual void Dispose();
    protected internal void ThrowIfDisposed();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Microsoft.Azure.Devices.Client.Transport.ErrorDelegatingHandler : DefaultDelegatingHandler {
    private static HashSet`1<Type> s_networkExceptions;
    public ErrorDelegatingHandler(PipelineContext context, IDelegatingHandler innerHandler);
    private static ErrorDelegatingHandler();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual Task OpenAsync(TimeoutHelper timeoutHelper);
    public virtual Task`1<Message> ReceiveAsync(CancellationToken cancellationToken);
    public virtual Task`1<Message> ReceiveAsync(TimeoutHelper timeoutHelper);
    public virtual Task EnableReceiveMessageAsync(CancellationToken cancellationToken);
    public virtual Task EnsurePendingMessagesAreDeliveredAsync(CancellationToken cancellationToken);
    public virtual Task DisableReceiveMessageAsync(CancellationToken cancellationToken);
    public virtual Task EnableMethodsAsync(CancellationToken cancellationToken);
    public virtual Task DisableMethodsAsync(CancellationToken cancellationToken);
    public virtual Task EnableEventReceiveAsync(bool isAnEdgeModule, CancellationToken cancellationToken);
    public virtual Task DisableEventReceiveAsync(bool isAnEdgeModule, CancellationToken cancellationToken);
    public virtual Task EnableTwinPatchAsync(CancellationToken cancellationToken);
    public virtual Task DisableTwinPatchAsync(CancellationToken cancellationToken);
    public virtual Task`1<Twin> SendTwinGetAsync(CancellationToken cancellationToken);
    public virtual Task SendTwinPatchAsync(TwinCollection reportedProperties, CancellationToken cancellationToken);
    public virtual Task AbandonAsync(string lockToken, CancellationToken cancellationToken);
    public virtual Task CompleteAsync(string lockToken, CancellationToken cancellationToken);
    public virtual Task RejectAsync(string lockToken, CancellationToken cancellationToken);
    public virtual Task SendEventAsync(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    public virtual Task SendEventAsync(Message message, CancellationToken cancellationToken);
    public virtual Task SendMethodResponseAsync(MethodResponseInternal methodResponse, CancellationToken cancellationToken);
    private static bool IsNetworkExceptionChain(Exception exceptionChain);
    private static bool IsSecurityExceptionChain(Exception exceptionChain);
    private static bool IsTlsSecurity(Exception singleException);
    private static bool IsNetwork(Exception singleException);
    private Task ExecuteWithErrorHandlingAsync(Func`1<Task> asyncOperation);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.ErrorDelegatingHandler/<ExecuteWithErrorHandlingAsync>d__28`1")]
private Task`1<T> ExecuteWithErrorHandlingAsync(Func`1<Task`1<T>> asyncOperation);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(TimeoutHelper timeoutHelper);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<Message> <>n__2(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<Message> <>n__3(TimeoutHelper timeoutHelper);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__4(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__5(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__6(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__7(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__8(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__9(bool isAnEdgeModule, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__10(bool isAnEdgeModule, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__11(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__12(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<Twin> <>n__13(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__14(TwinCollection reportedProperties, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__15(string lockToken, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__16(string lockToken, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__17(string lockToken, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__18(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__19(Message message, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__20(MethodResponseInternal methodResponse, CancellationToken cancellationToken);
}
public class Microsoft.Azure.Devices.Client.Transport.FileUploadCompletionNotification : object {
    [CompilerGeneratedAttribute]
private string <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusDescription>k__BackingField;
    [JsonPropertyAttribute]
public string CorrelationId { get; public set; }
    [JsonPropertyAttribute]
public bool IsSuccess { get; public set; }
    [JsonPropertyAttribute]
public int StatusCode { get; public set; }
    [JsonPropertyAttribute]
public string StatusDescription { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public void set_IsSuccess(bool value);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public string get_StatusDescription();
    [CompilerGeneratedAttribute]
public void set_StatusDescription(string value);
}
public class Microsoft.Azure.Devices.Client.Transport.FileUploadSasUriRequest : object {
    [CompilerGeneratedAttribute]
private string <BlobName>k__BackingField;
    [JsonPropertyAttribute]
public string BlobName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BlobName();
    [CompilerGeneratedAttribute]
public void set_BlobName(string value);
}
public class Microsoft.Azure.Devices.Client.Transport.FileUploadSasUriResponse : object {
    [CompilerGeneratedAttribute]
private string <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SasToken>k__BackingField;
    [JsonPropertyAttribute]
public string CorrelationId { get; public set; }
    [JsonPropertyAttribute]
public string HostName { get; public set; }
    [JsonPropertyAttribute]
public string ContainerName { get; public set; }
    [JsonPropertyAttribute]
public string BlobName { get; public set; }
    [JsonPropertyAttribute]
public string SasToken { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(string value);
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
public void set_HostName(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerName();
    [CompilerGeneratedAttribute]
public void set_ContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_BlobName();
    [CompilerGeneratedAttribute]
public void set_BlobName(string value);
    [CompilerGeneratedAttribute]
public string get_SasToken();
    [CompilerGeneratedAttribute]
public void set_SasToken(string value);
    public Uri GetBlobUri();
}
internal class Microsoft.Azure.Devices.Client.Transport.HttpClientHelper : object {
    private Uri _baseAddress;
    private IAuthorizationProvider _authenticationHeaderProvider;
    private IReadOnlyDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> _defaultErrorMapping;
    private bool _usingX509ClientCert;
    private HttpClient _httpClientObj;
    private bool _isDisposed;
    private ProductInfo _productInfo;
    private bool _isClientPrimaryTransportHandler;
    public HttpClientHelper(Uri baseAddress, IAuthorizationProvider authenticationHeaderProvider, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> defaultErrorMapping, TimeSpan timeout, Http1TransportSettings transportSettings, ProductInfo productInfo, IWebProxy proxy, bool isClientPrimaryTransportHandler);
    public sealed virtual Task`1<T> GetAsync(Uri requestUri, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, IDictionary`2<string, string> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpClientHelper/<GetAsync>d__10`1")]
public sealed virtual Task`1<T> GetAsync(Uri requestUri, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, IDictionary`2<string, string> customHeaders, bool throwIfNotFound, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpClientHelper/<PutAsync>d__11`1")]
public sealed virtual Task`1<T> PutAsync(Uri requestUri, T entity, PutOperationType operationType, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpClientHelper/<ReadResponseMessageAsync>d__12`1")]
private static Task`1<T> ReadResponseMessageAsync(HttpResponseMessage message, CancellationToken token);
    private static Task AddCustomHeaders(HttpRequestMessage requestMessage, IDictionary`2<string, string> customHeaders);
    private static void InsertEtag(HttpRequestMessage requestMessage, IETagHolder entity, PutOperationType operationType);
    private static void InsertEtag(HttpRequestMessage requestMessage, IETagHolder entity);
    private IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> MergeErrorMapping(IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides);
    public sealed virtual Task PostAsync(Uri requestUri, T entity, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, IDictionary`2<string, string> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpClientHelper/<PostAsync>d__18`2")]
public sealed virtual Task`1<T2> PostAsync(Uri requestUri, T1 entity, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, IDictionary`2<string, string> customHeaders, CancellationToken cancellationToken);
    private Task PostAsyncHelper(Uri requestUri, T1 entity, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, IDictionary`2<string, string> customHeaders, Func`3<HttpResponseMessage, CancellationToken, Task> processResponseMessageAsync, CancellationToken cancellationToken);
    public sealed virtual Task DeleteAsync(Uri requestUri, T entity, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, IDictionary`2<string, string> customHeaders, CancellationToken cancellationToken);
    private Task ExecuteAsync(HttpMethod httpMethod, Uri requestUri, Func`3<HttpRequestMessage, CancellationToken, Task> modifyRequestMessageAsync, Func`3<HttpResponseMessage, CancellationToken, Task> processResponseMessageAsync, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpClientHelper/<ExecuteAsync>d__22")]
private Task ExecuteAsync(HttpMethod httpMethod, Uri requestUri, Func`3<HttpRequestMessage, CancellationToken, Task> modifyRequestMessageAsync, Func`2<HttpResponseMessage, bool> isSuccessful, Func`3<HttpResponseMessage, CancellationToken, Task> processResponseMessageAsync, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpClientHelper/<MapToExceptionAsync>d__23")]
private static Task`1<Exception> MapToExceptionAsync(HttpResponseMessage response, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMapping);
    public sealed virtual void Dispose();
    private static StringContent CreateContent(T entity);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpClientHelper/<ReadAsAsync>d__26`1")]
private static Task`1<T> ReadAsAsync(HttpContent content, CancellationToken token);
}
internal class Microsoft.Azure.Devices.Client.Transport.HttpTransportHandler : TransportHandler {
    private static TimeSpan s_defaultOperationTimeout;
    private static TimeSpan s_defaultMethodOperationTimeout;
    private static IDictionary`2<string, string> s_mapMessagePropertiesToHttpHeaders;
    private static IDictionary`2<string, string> s_mapHttpHeadersToMessageProperties;
    private IHttpClientHelper _httpClientHelper;
    private string _deviceId;
    private string _moduleId;
    internal HttpTransportHandler(PipelineContext context, IotHubConnectionString iotHubConnectionString, Http1TransportSettings transportSettings, bool isClientPrimaryTransportHandler);
    private static HttpTransportHandler();
    public virtual Task OpenAsync(TimeoutHelper timeoutHelper);
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual Task CloseAsync(CancellationToken cancellationToken);
    public virtual Task SendEventAsync(Message message, CancellationToken cancellationToken);
    public virtual Task SendEventAsync(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpTransportHandler/<UploadToBlobAsync>d__14")]
internal Task UploadToBlobAsync(string blobName, Stream source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpTransportHandler/<GetFileUploadSasUriAsync>d__15")]
internal Task`1<FileUploadSasUriResponse> GetFileUploadSasUriAsync(FileUploadSasUriRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpTransportHandler/<CompleteFileUploadAsync>d__16")]
internal Task CompleteFileUploadAsync(FileUploadCompletionNotification notification, CancellationToken cancellationToken);
    public virtual Task`1<Twin> SendTwinGetAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpTransportHandler/<ReceiveAsync>d__18")]
public virtual Task`1<Message> ReceiveAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpTransportHandler/<ReceiveAsync>d__19")]
public virtual Task`1<Message> ReceiveAsync(TimeoutHelper timeoutHelper);
    public virtual Task EnableReceiveMessageAsync(CancellationToken cancellationToken);
    public virtual Task DisableReceiveMessageAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpTransportHandler/<CompleteAsync>d__22")]
public virtual Task CompleteAsync(string lockToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpTransportHandler/<AbandonAsync>d__23")]
public virtual Task AbandonAsync(string lockToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpTransportHandler/<RejectAsync>d__24")]
public virtual Task RejectAsync(string lockToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.HttpTransportHandler/<InvokeMethodAsync>d__25")]
internal Task`1<MethodInvokeResponse> InvokeMethodAsync(MethodInvokeRequest methodInvokeRequest, Uri uri, CancellationToken cancellationToken);
    private static TimeSpan GetInvokeDeviceMethodOperationTimeout(MethodInvokeRequest methodInvokeRequest);
    private static IDictionary`2<string, string> PrepareCustomHeaders(string toHeader, string messageId, string operation);
    private static object ConvertToMessageSystemProperty(string messagePropertyName, IEnumerable`1<string> messagePropertyValues);
    private static Uri GetRequestUri(string deviceId, string path, IDictionary`2<string, string> queryValueDictionary);
    private static string ToJson(IEnumerable`1<Message> messages);
}
internal interface Microsoft.Azure.Devices.Client.Transport.IHttpClientHelper {
    public abstract virtual Task`1<T> GetAsync(Uri requestUri, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, IDictionary`2<string, string> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> GetAsync(Uri requestUri, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, IDictionary`2<string, string> customHeaders, bool throwIfNotFound, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> PutAsync(Uri requestUri, T entity, PutOperationType operationType, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, CancellationToken cancellationToken);
    public abstract virtual Task PostAsync(Uri requestUri, T entity, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, IDictionary`2<string, string> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<T2> PostAsync(Uri requestUri, T1 entity, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, IDictionary`2<string, string> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task DeleteAsync(Uri requestUri, T entity, IDictionary`2<HttpStatusCode, Func`2<HttpResponseMessage, Task`1<Exception>>> errorMappingOverrides, IDictionary`2<string, string> customHeaders, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.Devices.Client.Transport.ITransportHandlerFactory {
    public abstract virtual IDelegatingHandler Create(PipelineContext context);
}
public class Microsoft.Azure.Devices.Client.Transport.Mqtt.ChannelMessageProcessingException : Exception {
    [CompilerGeneratedAttribute]
private IChannelHandlerContext <Context>k__BackingField;
    public IChannelHandlerContext Context { get; private set; }
    public ChannelMessageProcessingException(Exception innerException, IChannelHandlerContext context);
    protected ChannelMessageProcessingException(SerializationInfo info, StreamingContext context);
    internal ChannelMessageProcessingException(string message);
    internal ChannelMessageProcessingException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public IChannelHandlerContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(IChannelHandlerContext value);
}
internal class Microsoft.Azure.Devices.Client.Transport.Mqtt.ClientWebSocketChannel : AbstractChannel {
    private ClientWebSocket _webSocket;
    private CancellationTokenSource _writeCancellationTokenSource;
    private bool _isActive;
    private bool _isReadPending;
    private bool _isWriteInProgress;
    [CompilerGeneratedAttribute]
private IChannelConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ChannelMetadata <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <LocalAddressInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <RemoteAddressInternal>k__BackingField;
    public IChannelConfiguration Configuration { get; }
    public bool Open { get; }
    public bool Active { get; }
    public ChannelMetadata Metadata { get; }
    protected EndPoint LocalAddressInternal { get; }
    protected EndPoint RemoteAddressInternal { get; }
    public ClientWebSocketChannel(IChannel parent, ClientWebSocket webSocket);
    [CompilerGeneratedAttribute]
public virtual IChannelConfiguration get_Configuration();
    public virtual bool get_Open();
    public virtual bool get_Active();
    [CompilerGeneratedAttribute]
public virtual ChannelMetadata get_Metadata();
    [CompilerGeneratedAttribute]
protected virtual EndPoint get_LocalAddressInternal();
    [CompilerGeneratedAttribute]
protected virtual EndPoint get_RemoteAddressInternal();
    protected virtual IChannelUnsafe NewUnsafe();
    protected virtual bool IsCompatible(IEventLoop eventLoop);
    public ClientWebSocketChannel Option(ChannelOption`1<T> option, T value);
    public sealed virtual void Dispose();
    protected virtual void DoBind(EndPoint endpointAddress);
    protected virtual void DoDisconnect();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.ClientWebSocketChannel/<DoClose>d__29")]
protected virtual void DoClose();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.ClientWebSocketChannel/<DoBeginRead>d__30")]
protected virtual void DoBeginRead();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.ClientWebSocketChannel/<DoWrite>d__31")]
protected virtual void DoWrite(ChannelOutboundBuffer channelOutboundBuffer);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.ClientWebSocketChannel/<DoReadBytesAsync>d__32")]
private Task`1<int> DoReadBytesAsync(IByteBuffer byteBuffer);
    private void CancelPendingWrite();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.ClientWebSocketChannel/<HandleCloseAsync>d__34")]
private Task HandleCloseAsync();
    private void Abort();
}
public class Microsoft.Azure.Devices.Client.Transport.Mqtt.ClientWebSocketChannelConfig : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ConnectTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WriteSpinCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IByteBufferAllocator <Allocator>k__BackingField;
    [CompilerGeneratedAttribute]
private IRecvByteBufAllocator <RecvByteBufAllocator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoRead>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WriteBufferHighWaterMark>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WriteBufferLowWaterMark>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessageSizeEstimator <MessageSizeEstimator>k__BackingField;
    public TimeSpan ConnectTimeout { get; public set; }
    public int WriteSpinCount { get; public set; }
    public IByteBufferAllocator Allocator { get; public set; }
    public IRecvByteBufAllocator RecvByteBufAllocator { get; public set; }
    public bool AutoRead { get; public set; }
    public int WriteBufferHighWaterMark { get; public set; }
    public int WriteBufferLowWaterMark { get; public set; }
    public IMessageSizeEstimator MessageSizeEstimator { get; public set; }
    public sealed virtual T GetOption(ChannelOption`1<T> option);
    public sealed virtual bool SetOption(ChannelOption option, object value);
    public sealed virtual bool SetOption(ChannelOption`1<T> option, T value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_ConnectTimeout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_WriteSpinCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WriteSpinCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IByteBufferAllocator get_Allocator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Allocator(IByteBufferAllocator value);
    [CompilerGeneratedAttribute]
public sealed virtual IRecvByteBufAllocator get_RecvByteBufAllocator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RecvByteBufAllocator(IRecvByteBufAllocator value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoRead();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoRead(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_WriteBufferHighWaterMark();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WriteBufferHighWaterMark(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_WriteBufferLowWaterMark();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WriteBufferLowWaterMark(int value);
    [CompilerGeneratedAttribute]
public sealed virtual IMessageSizeEstimator get_MessageSizeEstimator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MessageSizeEstimator(IMessageSizeEstimator value);
}
internal interface Microsoft.Azure.Devices.Client.Transport.Mqtt.ICancellable {
    public abstract virtual void Cancel();
    public abstract virtual void Abort(Exception exception);
}
internal interface Microsoft.Azure.Devices.Client.Transport.Mqtt.IMqttIotHubEventHandler {
    public TransportState State { get; }
    public abstract virtual void OnConnected();
    public abstract virtual void OnMessageReceived(Message message);
    public abstract virtual void OnError(Exception exception);
    public abstract virtual TransportState get_State();
}
internal interface Microsoft.Azure.Devices.Client.Transport.Mqtt.ISessionContextProvider {
    public IDictionary`2<string, string> Properties { get; public set; }
    public abstract virtual IDictionary`2<string, string> get_Properties();
    public abstract virtual void set_Properties(IDictionary`2<string, string> value);
}
public interface Microsoft.Azure.Devices.Client.Transport.Mqtt.IWillMessage {
    public Message Message { get; }
    public QualityOfService QoS { get; public set; }
    public abstract virtual Message get_Message();
    public abstract virtual QualityOfService get_QoS();
    public abstract virtual void set_QoS(QualityOfService value);
}
internal class Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter : ChannelHandlerAdapter {
    private static string DeviceTelemetryTopicFormat;
    private static string ModuleTelemetryTopicFormat;
    private static string DeviceCommandTopicFilterFormat;
    private static string DeviceClientTypeParam;
    private static string AuthChainParam;
    private static string ModelIdParam;
    private static char SegmentSeparatorChar;
    private static char SingleSegmentWildcardChar;
    private static char MultiSegmentWildcardChar;
    private static Char[] s_wildcardChars;
    private static string IotHubTrueString;
    private static string SegmentSeparator;
    private static int MaxPayloadSize;
    private static int MaxTopicNameLength;
    private static Action`1<object> s_pingServerCallback;
    private static Action`1<object> s_checkConnAckTimeoutCallback;
    private static Func`3<IChannelHandlerContext, Exception, bool> s_shutdownOnWriteErrorHandler;
    private static TimeSpan s_pingResponseTimeout;
    private static SemaphoreSlim s_pingResponseSemaphore;
    private IMqttIotHubEventHandler _mqttIotHubEventHandler;
    private string _deviceId;
    private string _moduleId;
    private SimpleWorkQueue`1<PublishPacket> _deviceBoundOneWayProcessor;
    private OrderedTwoPhaseWorkQueue`2<int, PublishPacket> _deviceBoundTwoWayProcessor;
    private string _iotHubHostName;
    private MqttTransportSettings _mqttTransportSettings;
    private TimeSpan _pingRequestInterval;
    private IAuthorizationProvider _passwordProvider;
    private SimpleWorkQueue`1<PublishWorkItem> _serviceBoundOneWayProcessor;
    private OrderedTwoPhaseWorkQueue`2<int, PublishWorkItem> _serviceBoundTwoWayProcessor;
    private IWillMessage _willMessage;
    private DateTime _lastChannelActivityTime;
    private StateFlags _stateFlags;
    private ConcurrentDictionary`2<int, TaskCompletionSource> _subscribeCompletions;
    private ConcurrentDictionary`2<int, TaskCompletionSource> _unsubscribeCompletions;
    private ProductInfo _productInfo;
    private ClientOptions _options;
    private ushort _packetId;
    private SpinLock _packetIdLock;
    private static Dictionary`2<string, string> s_toSystemPropertiesMap;
    private static Dictionary`2<string, string> s_fromSystemPropertiesMap;
    private int InboundBacklogSize { get; }
    public MqttIotHubAdapter(string deviceId, string moduleId, string iotHubHostName, IAuthorizationProvider passwordProvider, MqttTransportSettings mqttTransportSettings, IWillMessage willMessage, IMqttIotHubEventHandler mqttIotHubEventHandler, ProductInfo productInfo, ClientOptions options);
    private static MqttIotHubAdapter();
    private int get_InboundBacklogSize();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<ChannelActive>d__43")]
public virtual void ChannelActive(IChannelHandlerContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<WriteAsync>d__44")]
public virtual Task WriteAsync(IChannelHandlerContext context, object data);
    public virtual void ChannelRead(IChannelHandlerContext context, object message);
    public virtual void ChannelReadComplete(IChannelHandlerContext context);
    public virtual void ChannelInactive(IChannelHandlerContext context);
    public virtual void ExceptionCaught(IChannelHandlerContext context, Exception exception);
    public virtual void UserEventTriggered(IChannelHandlerContext context, object event);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<ConnectAsync>d__50")]
private Task ConnectAsync(IChannelHandlerContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<ScheduleKeepConnectionAliveAsync>d__51")]
private void ScheduleKeepConnectionAliveAsync(IChannelHandlerContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<ScheduleCheckConnectTimeoutAsync>d__52")]
private void ScheduleCheckConnectTimeoutAsync(IChannelHandlerContext context);
    private static void ShutdownIfNotReady(object state);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<PingServerAsync>d__54")]
private static void PingServerAsync(object ctx);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<ProcessConnectAckAsync>d__55")]
private Task ProcessConnectAckAsync(IChannelHandlerContext context, ConnAckPacket packet);
    private void ProcessPingResp(IChannelHandlerContext context, PingRespPacket packet);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<SubscribeAsync>d__57")]
private Task SubscribeAsync(IChannelHandlerContext context, SubscribePacket packetPassed);
    private void ProcessSubAck(IChannelHandlerContext context, SubAckPacket packet);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<UnSubscribeAsync>d__59")]
private Task UnSubscribeAsync(IChannelHandlerContext context, UnsubscribePacket packetPassed);
    private void ProcessUnsubAck(IChannelHandlerContext context, UnsubAckPacket packet);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<ProcessMessageAsync>d__61")]
private void ProcessMessageAsync(IChannelHandlerContext context, Packet packet);
    private Task AcceptMessageAsync(IChannelHandlerContext context, PublishPacket publish);
    private Task ProcessAckAsync(IChannelHandlerContext context, PublishWorkItem publish);
    private void ProcessPublish(IChannelHandlerContext context, PublishPacket packet);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<SendMessageAsync>d__65")]
private Task SendMessageAsync(IChannelHandlerContext context, Message message);
    private Task AcknowledgeAsync(IChannelHandlerContext context, string packetIdString);
    private Task SendAckAsync(IChannelHandlerContext context, PublishPacket publish);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<SendMessageToServerAsync>d__68")]
private Task SendMessageToServerAsync(IChannelHandlerContext context, PublishWorkItem publish);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<ShutdownOnErrorAsync>d__69")]
private static void ShutdownOnErrorAsync(IChannelHandlerContext context, Exception exception);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<ShutdownAsync>d__70")]
private void ShutdownAsync(IChannelHandlerContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<CloseIotHubConnectionAsync>d__71")]
private void CloseIotHubConnectionAsync();
    private void ResumeReadingIfNecessary(IChannelHandlerContext context);
    private bool IsInState(StateFlags stateFlagsToCheck);
    private static IByteBuffer GetWillMessageBody(Message message);
    private string GetTelemetryTopicName();
    private string GetCommandTopicFilter();
    private ushort GetNextPacketId();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<ComposePublishPacketAsync>d__78")]
public Task`1<PublishPacket> ComposePublishPacketAsync(IChannelHandlerContext context, Message message, QualityOfService qos, string topicName);
    public static void PopulateMessagePropertiesFromPacket(Message message, PublishPacket publish);
    private static string ConvertFromSystemProperties(object systemProperty);
    private static object ConvertToSystemProperty(KeyValuePair`2<string, string> property);
    public static bool CheckTopicFilterMatch(string topicName, string topicFilter);
    public static Message CompleteMessageFromPacket(Message message, PublishPacket packet, MqttTransportSettings mqttTransportSettings);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapter/<WriteMessageAsync>d__87")]
public static Task WriteMessageAsync(IChannelHandlerContext context, object message, Func`3<IChannelHandlerContext, Exception, bool> exceptionHandler);
    internal static string PopulateMessagePropertiesFromMessage(string topicName, Message message);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0(IChannelHandlerContext context);
}
internal class Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttIotHubAdapterFactory : object {
    private MqttTransportSettings _settings;
    public MqttIotHubAdapterFactory(MqttTransportSettings settings);
    public MqttIotHubAdapter Create(IMqttIotHubEventHandler mqttIotHubEventHandler, IotHubConnectionString iotHubConnectionString, MqttTransportSettings mqttTransportSettings, ProductInfo productInfo, ClientOptions options);
}
internal class Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler : TransportHandler {
    private static int ProtocolGatewayPort;
    private static int MaxMessageSize;
    private static string ProcessorThreadCountVariableName;
    private static string DeviceBoundMessagesTopicFilter;
    private static string DeviceBoundMessagesTopicPrefix;
    private static string TwinResponseTopicFilter;
    private static string TwinResponseTopicPrefix;
    private static string TwinGetTopic;
    private static string TwinResponseTopicPattern;
    private static string TwinPatchTopic;
    private static string TwinPatchTopicFilter;
    private static string TwinPatchTopicPrefix;
    private static string MethodPostTopicFilter;
    private static string MethodPostTopicPrefix;
    private static string MethodResponseTopic;
    private static string ReceiveEventMessagePatternFilter;
    private static string ReceiveEventMessagePrefixPattern;
    private static int s_generationPrefixLength;
    private static Lazy`1<IEventLoopGroup> s_eventLoopGroup;
    private static TimeSpan s_regexTimeoutMilliseconds;
    private static TimeSpan s_defaultTwinTimeout;
    private string _generationId;
    private string _receiveEventMessageFilter;
    private string _receiveEventMessagePrefix;
    private string _deviceboundMessageFilter;
    private string _deviceboundMessagePrefix;
    private string _hostName;
    private Func`3<IPAddress[], int, Task`1<IChannel>> _channelFactory;
    private ConcurrentQueue`1<string> _completionQueue;
    private MqttIotHubAdapterFactory _mqttIotHubAdapterFactory;
    private QualityOfService _qosSendPacketToService;
    private QualityOfService _qosReceivePacketFromService;
    private bool _retainMessagesAcrossSessions;
    private RetryPolicy _closeRetryPolicy;
    private ConcurrentQueue`1<Message> _messageQueue;
    private TaskCompletionSource _connectCompletion;
    private TaskCompletionSource _subscribeCompletionSource;
    private IWebProxy _webProxy;
    private SemaphoreSlim _deviceReceiveMessageSemaphore;
    private SemaphoreSlim _receivingSemaphore;
    private CancellationTokenSource _disconnectAwaitersCancellationSource;
    private Regex _twinResponseTopicRegex;
    private Func`2<MethodRequestInternal, Task> _methodListener;
    private Action`1<TwinCollection> _onDesiredStatePatchListener;
    private Func`3<string, Message, Task> _moduleMessageReceivedListener;
    private Func`2<Message, Task> _deviceMessageReceivedListener;
    private bool _isDeviceReceiveMessageCallbackSet;
    private Func`1<Task> _cleanupFunc;
    private IChannel _channel;
    private ExceptionDispatchInfo _fatalException;
    private IPAddress[] _serverAddresses;
    private int _state;
    private Action`1<Message> _twinResponseEvent;
    [CompilerGeneratedAttribute]
private TimeSpan <TwinTimeout>k__BackingField;
    public TransportState State { get; }
    public bool IsUsable { get; }
    public TimeSpan TwinTimeout { get; public set; }
    internal MqttTransportHandler(PipelineContext context, IotHubConnectionString iotHubConnectionString, MqttTransportSettings settings, Func`2<MethodRequestInternal, Task> onMethodCallback, Action`1<TwinCollection> onDesiredStatePatchReceivedCallback, Func`3<string, Message, Task> onModuleMessageReceivedCallback, Func`2<Message, Task> onDeviceMessageReceivedCallback);
    internal MqttTransportHandler(PipelineContext context, IotHubConnectionString iotHubConnectionString, MqttTransportSettings settings, Func`3<IPAddress[], int, Task`1<IChannel>> channelFactory);
    private static MqttTransportHandler();
    public sealed virtual TransportState get_State();
    public virtual bool get_IsUsable();
    [CompilerGeneratedAttribute]
public TimeSpan get_TwinTimeout();
    [CompilerGeneratedAttribute]
public void set_TwinTimeout(TimeSpan value);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<OpenAsync>d__63")]
public virtual Task OpenAsync(TimeoutHelper timeoutHelper);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<OpenAsync>d__64")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<SendEventAsync>d__65")]
public virtual Task SendEventAsync(Message message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<SendEventAsync>d__66")]
public virtual Task SendEventAsync(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<ReceiveAsync>d__67")]
public virtual Task`1<Message> ReceiveAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<ReceiveAsync>d__68")]
public virtual Task`1<Message> ReceiveAsync(TimeoutHelper timeoutHelper);
    private Message ProcessC2dMessage();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<WaitUntilC2dMessageArrivesAsync>d__70")]
private Task WaitUntilC2dMessageArrivesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<CompleteAsync>d__71")]
public virtual Task CompleteAsync(string lockToken, CancellationToken cancellationToken);
    public virtual Task AbandonAsync(string lockToken, CancellationToken cancellationToken);
    public virtual Task RejectAsync(string lockToken, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<CloseAsync>d__75")]
public virtual Task CloseAsync(CancellationToken cancellationToken);
    public sealed virtual void OnConnected();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<HandleIncomingTwinPatchAsync>d__77")]
private Task HandleIncomingTwinPatchAsync(Message message);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<HandleIncomingMethodPostAsync>d__78")]
private Task HandleIncomingMethodPostAsync(Message message);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<HandleIncomingMessagesAsync>d__79")]
private Task HandleIncomingMessagesAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<OnMessageReceived>d__80")]
public sealed virtual void OnMessageReceived(Message message);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<CompleteIncomingMessageAsync>d__81")]
private Task CompleteIncomingMessageAsync(Message message);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<HandleIncomingEventMessageAsync>d__82")]
private Task HandleIncomingEventMessageAsync(Message message);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<OnError>d__83")]
public sealed virtual void OnError(Exception exception);
    private TransportState MoveToStateIfPossible(TransportState destination, TransportState illegalStates);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<EnableReceiveMessageAsync>d__85")]
public virtual Task EnableReceiveMessageAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<EnsurePendingMessagesAreDeliveredAsync>d__86")]
public virtual Task EnsurePendingMessagesAreDeliveredAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<DisableReceiveMessageAsync>d__87")]
public virtual Task DisableReceiveMessageAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<EnableMethodsAsync>d__88")]
public virtual Task EnableMethodsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<DisableMethodsAsync>d__89")]
public virtual Task DisableMethodsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<EnableEventReceiveAsync>d__90")]
public virtual Task EnableEventReceiveAsync(bool isAnEdgeModule, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<DisableEventReceiveAsync>d__91")]
public virtual Task DisableEventReceiveAsync(bool isAnEdgeModule, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<SendMethodResponseAsync>d__92")]
public virtual Task SendMethodResponseAsync(MethodResponseInternal methodResponse, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<EnableTwinPatchAsync>d__93")]
public virtual Task EnableTwinPatchAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<DisableTwinPatchAsync>d__94")]
public virtual Task DisableTwinPatchAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<SendTwinGetAsync>d__95")]
public virtual Task`1<Twin> SendTwinGetAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<SendTwinPatchAsync>d__96")]
public virtual Task SendTwinPatchAsync(TwinCollection reportedProperties, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<OpenInternalAsync>d__97")]
private Task OpenInternalAsync(CancellationToken cancellationToken);
    private bool TryStop();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<SubscribeCloudToDeviceMessagesAsync>d__99")]
private Task SubscribeCloudToDeviceMessagesAsync();
    private Task SubscribeTwinResponsesAsync();
    private bool ParseResponseTopic(string topicName, String& rid, Int32& status);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<SendTwinRequestAsync>d__102")]
private Task`1<Message> SendTwinRequestAsync(Message request, string rid, CancellationToken cancellationToken);
    private Func`3<IPAddress[], int, Task`1<IChannel>> CreateChannelFactory(IotHubConnectionString iotHubConnectionString, MqttTransportSettings settings, ProductInfo productInfo, ClientOptions options);
    private Func`3<IPAddress[], int, Task`1<IChannel>> CreateWebSocketChannelFactory(IotHubConnectionString iotHubConnectionString, MqttTransportSettings settings, ProductInfo productInfo, ClientOptions options);
    private void ScheduleCleanup(Func`1<Task> cleanupTask);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<CleanUpAsync>d__106")]
private Task CleanUpAsync();
    private Task CleanUpImplAsync();
    private bool TryStateTransition(TransportState fromState, TransportState toState);
    private void EnsureValidState(bool throwIfNotOpen);
    private static IEventLoopGroup GetEventLoopGroup();
    private bool IsProxyConfigured();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportHandler/<<OpenInternalAsync>b__97_0>d")]
[CompilerGeneratedAttribute]
private Task <OpenInternalAsync>b__97_0();
}
public class Microsoft.Azure.Devices.Client.Transport.Mqtt.MqttTransportSettings : object {
    private TransportType _transportType;
    private static bool DefaultCleanSession;
    private static bool DefaultDeviceReceiveAckCanTimeout;
    private static bool DefaultHasWill;
    private static bool DefaultMaxOutboundRetransmissionEnforced;
    private static int DefaultKeepAliveInSeconds;
    private static int DefaultMaxPendingInboundMessages;
    private static QualityOfService DefaultPublishToServerQoS;
    private static QualityOfService DefaultReceivingQoS;
    private static TimeSpan s_defaultConnectArrivalTimeout;
    private static TimeSpan s_defaultDeviceReceiveAckTimeout;
    private static TimeSpan s_defaultReceiveTimeout;
    [CompilerGeneratedAttribute]
private bool <DeviceReceiveAckCanTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DeviceReceiveAckTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private QualityOfService <PublishToServerQoS>k__BackingField;
    [CompilerGeneratedAttribute]
private QualityOfService <ReceivingQoS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RetainPropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DupPropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QoSPropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MaxOutboundRetransmissionEnforced>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxPendingInboundMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ConnectArrivalTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CleanSession>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeepAliveInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <WebSocketKeepAlive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasWill>k__BackingField;
    [CompilerGeneratedAttribute]
private IWillMessage <WillMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DefaultReceiveTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <RemoteCertificateValidationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationChain>k__BackingField;
    public bool CertificateRevocationCheck { get; public set; }
    public bool DeviceReceiveAckCanTimeout { get; public set; }
    public TimeSpan DeviceReceiveAckTimeout { get; public set; }
    public QualityOfService PublishToServerQoS { get; public set; }
    public QualityOfService ReceivingQoS { get; public set; }
    public string RetainPropertyName { get; public set; }
    public string DupPropertyName { get; public set; }
    public string QoSPropertyName { get; public set; }
    public bool MaxOutboundRetransmissionEnforced { get; public set; }
    public int MaxPendingInboundMessages { get; public set; }
    public TimeSpan ConnectArrivalTimeout { get; public set; }
    public bool CleanSession { get; public set; }
    public int KeepAliveInSeconds { get; public set; }
    public Nullable`1<TimeSpan> WebSocketKeepAlive { get; public set; }
    public bool HasWill { get; public set; }
    public IWillMessage WillMessage { get; public set; }
    public TimeSpan DefaultReceiveTimeout { get; public set; }
    public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    public X509Certificate ClientCertificate { get; public set; }
    public IWebProxy Proxy { get; public set; }
    internal string AuthenticationChain { get; internal set; }
    public MqttTransportSettings(TransportType transportType);
    private static MqttTransportSettings();
    public bool get_CertificateRevocationCheck();
    public void set_CertificateRevocationCheck(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeviceReceiveAckCanTimeout();
    [CompilerGeneratedAttribute]
public void set_DeviceReceiveAckCanTimeout(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DeviceReceiveAckTimeout();
    [CompilerGeneratedAttribute]
public void set_DeviceReceiveAckTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public QualityOfService get_PublishToServerQoS();
    [CompilerGeneratedAttribute]
public void set_PublishToServerQoS(QualityOfService value);
    [CompilerGeneratedAttribute]
public QualityOfService get_ReceivingQoS();
    [CompilerGeneratedAttribute]
public void set_ReceivingQoS(QualityOfService value);
    [CompilerGeneratedAttribute]
public string get_RetainPropertyName();
    [CompilerGeneratedAttribute]
public void set_RetainPropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_DupPropertyName();
    [CompilerGeneratedAttribute]
public void set_DupPropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_QoSPropertyName();
    [CompilerGeneratedAttribute]
public void set_QoSPropertyName(string value);
    [CompilerGeneratedAttribute]
public bool get_MaxOutboundRetransmissionEnforced();
    [CompilerGeneratedAttribute]
public void set_MaxOutboundRetransmissionEnforced(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxPendingInboundMessages();
    [CompilerGeneratedAttribute]
public void set_MaxPendingInboundMessages(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ConnectArrivalTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectArrivalTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_CleanSession();
    [CompilerGeneratedAttribute]
public void set_CleanSession(bool value);
    [CompilerGeneratedAttribute]
public int get_KeepAliveInSeconds();
    [CompilerGeneratedAttribute]
public void set_KeepAliveInSeconds(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_WebSocketKeepAlive();
    [CompilerGeneratedAttribute]
public void set_WebSocketKeepAlive(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public bool get_HasWill();
    [CompilerGeneratedAttribute]
public void set_HasWill(bool value);
    [CompilerGeneratedAttribute]
public IWillMessage get_WillMessage();
    [CompilerGeneratedAttribute]
public void set_WillMessage(IWillMessage value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_DefaultReceiveTimeout();
    [CompilerGeneratedAttribute]
public void set_DefaultReceiveTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    [CompilerGeneratedAttribute]
public void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    [CompilerGeneratedAttribute]
public X509Certificate get_ClientCertificate();
    [CompilerGeneratedAttribute]
public void set_ClientCertificate(X509Certificate value);
    [CompilerGeneratedAttribute]
public sealed virtual IWebProxy get_Proxy();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Proxy(IWebProxy value);
    public sealed virtual TransportType GetTransportType();
    [CompilerGeneratedAttribute]
internal string get_AuthenticationChain();
    [CompilerGeneratedAttribute]
internal void set_AuthenticationChain(string value);
}
internal class Microsoft.Azure.Devices.Client.Transport.Mqtt.OrderedTwoPhaseWorkQueue`2 : SimpleWorkQueue`1<TWork> {
    private Func`2<TWork, TWorkId> _getWorkId;
    private Func`3<IChannelHandlerContext, TWork, Task> _completeWorkAsync;
    private ConcurrentQueue`1<IncompleteWorkItem<TWorkId, TWork>> _incompleteQueue;
    public OrderedTwoPhaseWorkQueue`2(Func`3<IChannelHandlerContext, TWork, Task> workerAsync, Func`2<TWork, TWorkId> getWorkId, Func`3<IChannelHandlerContext, TWork, Task> completeWorkAsync);
    public Task CompleteWorkAsync(IChannelHandlerContext context, TWorkId workId);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.OrderedTwoPhaseWorkQueue`2/<DoWorkAsync>d__6")]
protected virtual Task DoWorkAsync(IChannelHandlerContext context, TWork work);
    public virtual void Abort();
    public virtual void Abort(Exception exception);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(IChannelHandlerContext context, TWork work);
}
internal class Microsoft.Azure.Devices.Client.Transport.Mqtt.PublishWorkItem : ReferenceCountedObjectContainer`1<PublishPacket> {
    [CompilerGeneratedAttribute]
private PublishPacket <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource <Completion>k__BackingField;
    public PublishPacket Value { get; public set; }
    public TaskCompletionSource Completion { get; public set; }
    [CompilerGeneratedAttribute]
public virtual PublishPacket get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(PublishPacket value);
    [CompilerGeneratedAttribute]
public TaskCompletionSource get_Completion();
    [CompilerGeneratedAttribute]
public void set_Completion(TaskCompletionSource value);
    public sealed virtual void Cancel();
    public sealed virtual void Abort(Exception exception);
}
internal class Microsoft.Azure.Devices.Client.Transport.Mqtt.ReadOnlyByteBufferStream : Stream {
    private IByteBuffer _buffer;
    private bool _releaseReferenceOnClosure;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public ReadOnlyByteBufferStream(IByteBuffer buffer, bool releaseReferenceOnClosure);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] output, int offset, int count);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] input, int offset, int count);
}
internal abstract class Microsoft.Azure.Devices.Client.Transport.Mqtt.ReferenceCountedObjectContainer`1 : object {
    public T Value { get; public set; }
    public int ReferenceCount { get; }
    public abstract virtual T get_Value();
    public abstract virtual void set_Value(T value);
    public sealed virtual IReferenceCounted Retain();
    public sealed virtual IReferenceCounted Retain(int increment);
    public sealed virtual IReferenceCounted Touch();
    public sealed virtual IReferenceCounted Touch(object hint);
    public sealed virtual bool Release();
    public sealed virtual bool Release(int decrement);
    public sealed virtual int get_ReferenceCount();
}
internal enum Microsoft.Azure.Devices.Client.Transport.Mqtt.RouteDestinationType : Enum {
    public int value__;
    public static RouteDestinationType Unknown;
    public static RouteDestinationType Telemetry;
}
internal class Microsoft.Azure.Devices.Client.Transport.Mqtt.SessionContextProvider : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    public IDictionary`2<string, string> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Properties(IDictionary`2<string, string> value);
}
internal class Microsoft.Azure.Devices.Client.Transport.Mqtt.SimpleWorkQueue`1 : object {
    private Func`3<IChannelHandlerContext, TWork, Task> _workerAsync;
    private ConcurrentQueue`1<TWork> _backlogQueue;
    private TaskCompletionSource _completionSource;
    [CompilerGeneratedAttribute]
private States<TWork> <State>k__BackingField;
    protected States<TWork> State { get; protected set; }
    public Task Completion { get; }
    public int BacklogSize { get; }
    public SimpleWorkQueue`1(Func`3<IChannelHandlerContext, TWork, Task> workerAsync);
    [CompilerGeneratedAttribute]
protected States<TWork> get_State();
    [CompilerGeneratedAttribute]
protected void set_State(States<TWork> value);
    public Task get_Completion();
    public int get_BacklogSize();
    public virtual void Post(IChannelHandlerContext context, TWork workItem);
    public void Complete();
    public virtual void Abort();
    public virtual void Abort(Exception exception);
    protected virtual Task DoWorkAsync(IChannelHandlerContext context, TWork work);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.Mqtt.SimpleWorkQueue`1/<StartWorkQueueProcessingAsync>d__17")]
private void StartWorkQueueProcessingAsync(IChannelHandlerContext context);
}
internal class Microsoft.Azure.Devices.Client.Transport.Mqtt.TransientErrorIgnoreStrategy : object {
    public sealed virtual bool IsTransient(Exception ex);
}
[FlagsAttribute]
public enum Microsoft.Azure.Devices.Client.Transport.Mqtt.TransportState : Enum {
    public int value__;
    public static TransportState NotInitialized;
    public static TransportState Opening;
    public static TransportState Open;
    public static TransportState Subscribing;
    public static TransportState Receiving;
    public static TransportState Closed;
    public static TransportState Error;
}
public class Microsoft.Azure.Devices.Client.Transport.Mqtt.WillMessage : object {
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private QualityOfService <QoS>k__BackingField;
    public Message Message { get; private set; }
    public QualityOfService QoS { get; public set; }
    public WillMessage(QualityOfService qos, Message message);
    [CompilerGeneratedAttribute]
public sealed virtual Message get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(Message value);
    [CompilerGeneratedAttribute]
public sealed virtual QualityOfService get_QoS();
    [CompilerGeneratedAttribute]
public sealed virtual void set_QoS(QualityOfService value);
}
internal class Microsoft.Azure.Devices.Client.Transport.ProtocolRoutingDelegatingHandler : DefaultDelegatingHandler {
    private bool _transportSelectionComplete;
    private int _nextTransportIndex;
    private SemaphoreSlim _handlerLock;
    public ProtocolRoutingDelegatingHandler(PipelineContext context, IDelegatingHandler innerHandler);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.ProtocolRoutingDelegatingHandler/<OpenAsync>d__5")]
public virtual Task OpenAsync(TimeoutHelper timeoutHelper);
    private void SelectTransport();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.ProtocolRoutingDelegatingHandler/<OpenAsync>d__7")]
public virtual Task OpenAsync(CancellationToken cancellationToken);
    private void CreateNewTransportIfNotReady();
    private void CreateNewTransportHandler();
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.ProtocolRoutingDelegatingHandler/<WaitForTransportClosedAsync>d__10")]
public virtual Task WaitForTransportClosedAsync();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(TimeoutHelper timeoutHelper);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2();
}
internal class Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler : DefaultDelegatingHandler {
    private static int RetryMaxCount;
    private RetryPolicy _internalRetryPolicy;
    private SemaphoreSlim _clientOpenSemaphore;
    private SemaphoreSlim _cloudToDeviceMessageSubscriptionSemaphore;
    private SemaphoreSlim _cloudToDeviceEventSubscriptionSemaphore;
    private SemaphoreSlim _directMethodSubscriptionSemaphore;
    private SemaphoreSlim _twinEventsSubscriptionSemaphore;
    private bool _openCalled;
    private bool _methodsEnabled;
    private bool _twinEnabled;
    private bool _eventsEnabled;
    private bool _deviceReceiveMessageEnabled;
    private bool _isDisposing;
    private bool _isAnEdgeModule;
    private long _clientTransportState;
    private Task _transportClosedTask;
    private CancellationTokenSource _handleDisconnectCts;
    private CancellationTokenSource _cancelPendingOperationsCts;
    private ConnectionStatusChangesHandler _onConnectionStatusChanged;
    public RetryDelegatingHandler(PipelineContext context, IDelegatingHandler innerHandler);
    public virtual void SetRetryPolicy(IRetryPolicy retryPolicy);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<SendEventAsync>d__22")]
public virtual Task SendEventAsync(Message message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<SendEventAsync>d__23")]
public virtual Task SendEventAsync(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<SendMethodResponseAsync>d__24")]
public virtual Task SendMethodResponseAsync(MethodResponseInternal method, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<ReceiveAsync>d__25")]
public virtual Task`1<Message> ReceiveAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<ReceiveAsync>d__26")]
public virtual Task`1<Message> ReceiveAsync(TimeoutHelper timeoutHelper);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<EnableReceiveMessageAsync>d__27")]
public virtual Task EnableReceiveMessageAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<EnsurePendingMessagesAreDeliveredAsync>d__28")]
public virtual Task EnsurePendingMessagesAreDeliveredAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<DisableReceiveMessageAsync>d__29")]
public virtual Task DisableReceiveMessageAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<EnableMethodsAsync>d__30")]
public virtual Task EnableMethodsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<DisableMethodsAsync>d__31")]
public virtual Task DisableMethodsAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<EnableEventReceiveAsync>d__32")]
public virtual Task EnableEventReceiveAsync(bool isAnEdgeModule, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<DisableEventReceiveAsync>d__33")]
public virtual Task DisableEventReceiveAsync(bool isAnEdgeModule, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<EnableTwinPatchAsync>d__34")]
public virtual Task EnableTwinPatchAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<DisableTwinPatchAsync>d__35")]
public virtual Task DisableTwinPatchAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<SendTwinGetAsync>d__36")]
public virtual Task`1<Twin> SendTwinGetAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<SendTwinPatchAsync>d__37")]
public virtual Task SendTwinPatchAsync(TwinCollection reportedProperties, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<CompleteAsync>d__38")]
public virtual Task CompleteAsync(string lockToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<AbandonAsync>d__39")]
public virtual Task AbandonAsync(string lockToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<RejectAsync>d__40")]
public virtual Task RejectAsync(string lockToken, CancellationToken cancellationToken);
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<CloseAsync>d__42")]
public virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<EnsureOpenedAsync>d__43")]
private Task EnsureOpenedAsync(bool withRetry, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<EnsureOpenedAsync>d__44")]
private Task EnsureOpenedAsync(bool withRetry, TimeoutHelper timeoutHelper);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<OpenInternalAsync>d__45")]
private Task OpenInternalAsync(bool withRetry, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<OpenInternalAsync>d__46")]
private Task OpenInternalAsync(bool withRetry, TimeoutHelper timeoutHelper);
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Client.Transport.RetryDelegatingHandler/<HandleDisconnectAsync>d__47")]
private Task HandleDisconnectAsync();
    private void HandleConnectionStatusExceptions(Exception exception, bool retryAttemptsExhausted);
    private ClientTransportStatus GetClientTransportStatus();
    private void SetClientTransportStatus(ClientTransportStatus clientTransportStatus);
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(Message message, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(IEnumerable`1<Message> messages, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(MethodResponseInternal methodResponse, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<Message> <>n__3(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<Message> <>n__4(TimeoutHelper timeoutHelper);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__5(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__6(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__7(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__8(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__9(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__10(bool isAnEdgeModule, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__11(bool isAnEdgeModule, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__12(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__13(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<Twin> <>n__14(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__15(TwinCollection reportedProperties, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__16(string lockToken, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__17(string lockToken, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__18(string lockToken, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__19(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__20(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__21(TimeoutHelper timeoutHelper);
}
internal abstract class Microsoft.Azure.Devices.Client.Transport.TransportHandler : DefaultDelegatingHandler {
    private TaskCompletionSource`1<bool> _transportShouldRetry;
    protected ITransportSettings _transportSettings;
    protected TransportHandler(PipelineContext context, ITransportSettings transportSettings);
    public virtual Task WaitForTransportClosedAsync();
    protected virtual void Dispose(bool disposing);
    protected void OnTransportClosedGracefully();
    protected void OnTransportDisconnected();
}
internal class Microsoft.Azure.Devices.Client.Transport.TransportHandlerFactory : object {
    public sealed virtual IDelegatingHandler Create(PipelineContext context);
}
public enum Microsoft.Azure.Devices.Client.TransportType : Enum {
    public int value__;
    public static TransportType Amqp;
    public static TransportType Http1;
    public static TransportType Amqp_WebSocket_Only;
    public static TransportType Amqp_Tcp_Only;
    public static TransportType Mqtt;
    public static TransportType Mqtt_WebSocket_Only;
    public static TransportType Mqtt_Tcp_Only;
}
internal enum Microsoft.Azure.Devices.Client.UserAgentFormats : Enum {
    public int value__;
    public static UserAgentFormats Default;
    public static UserAgentFormats Http;
}
internal static class Microsoft.Azure.Devices.Client.Utils : object {
    public static void ValidateBufferBounds(Byte[] buffer, int offset, int size);
    private static void ValidateBufferBounds(int bufferSize, int offset, int size);
    public static DeliveryAcknowledgement ConvertDeliveryAckTypeFromString(string value);
    public static string ConvertDeliveryAckTypeToString(DeliveryAcknowledgement value);
    public static void ValidateDataIsEmptyOrJson(Byte[] data);
    public static IReadOnlyDictionary`2<TKey, TValue> MergeDictionaries(IDictionary`2[] dictionaries);
}
internal static class Microsoft.Azure.Devices.Client.WaitCallbackActionItem : object {
    [CompilerGeneratedAttribute]
private static bool <ShouldUseActivity>k__BackingField;
    internal static bool ShouldUseActivity { get; internal set; }
    [CompilerGeneratedAttribute]
internal static bool get_ShouldUseActivity();
    [CompilerGeneratedAttribute]
internal static void set_ShouldUseActivity(bool value);
}
internal static class Microsoft.Azure.Devices.Client.WebSocketConstants : object {
    internal static string Scheme;
    internal static string UriSuffix;
    internal static string SecurePort;
    internal static string Version;
}
internal class Microsoft.Azure.Devices.Shared.DefaultWebProxySettings : object {
    private static DefaultWebProxySettings s_defaultWebproxy;
    [CompilerGeneratedAttribute]
private static DefaultWebProxySettings <Instance>k__BackingField;
    public static DefaultWebProxySettings Instance { get; }
    public ICredentials Credentials { get; public set; }
    private static DefaultWebProxySettings();
    [CompilerGeneratedAttribute]
public static DefaultWebProxySettings get_Instance();
    public sealed virtual ICredentials get_Credentials();
    public sealed virtual void set_Credentials(ICredentials value);
    public sealed virtual Uri GetProxy(Uri destination);
    public sealed virtual bool IsBypassed(Uri host);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Devices.Shared.HttpContentExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Shared.HttpContentExtensions/<CopyToStreamAsync>d__0")]
[ExtensionAttribute]
internal static Task CopyToStreamAsync(HttpContent content, Stream stream, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Stream> ReadHttpContentAsStream(HttpContent httpContent, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<Byte[]> ReadHttpContentAsByteArrayAsync(HttpContent content, CancellationToken cancellationToken);
    [ExtensionAttribute]
internal static Task`1<string> ReadHttpContentAsStringAsync(HttpContent content, CancellationToken cancellationToken);
}
[EventSourceAttribute]
internal class Microsoft.Azure.Devices.Shared.Logging : EventSource {
    private static int CreateId;
    private static int GenerateTokenId;
    public static Logging Log;
    private static int EnterEventId;
    private static int ExitEventId;
    private static int AssociateEventId;
    private static int InfoEventId;
    private static int ErrorEventId;
    private static int CriticalFailureEventId;
    private static int DumpArrayEventId;
    private static string MissingMember;
    private static string NullInstance;
    private static int MaxDumpSize;
    private static string NoParameters;
    public static bool IsEnabled { get; }
    private static Logging();
    [NonEventAttribute]
public static void CreateFromConnectionString(object thisOrContextObject, string iotHubConnectionStringWithNoKey, ITransportSettings[] transportSettings, ClientOptions options);
    [NonEventAttribute]
public static void GenerateToken(object thisOrContextObject, DateTime expirationDateTime);
    [EventAttribute("20")]
private void CreateFromConnectionString(string thisOrContextObject, string iotHubConnectionString, string transportSettingsString);
    [EventAttribute("21")]
private void GenerateToken(string thisOrContextObject, string currentDateTime, string expirationDateTime);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, object arg2, string memberName);
    [EventAttribute("1")]
private void Enter(string thisOrContextObject, string memberName, string parameters);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, object arg1, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, object arg1, object arg2, string memberName);
    [EventAttribute("2")]
private void Exit(string thisOrContextObject, string memberName, string result);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, object message, string memberName);
    [EventAttribute("4")]
private void Info(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, object message, string memberName);
    [EventAttribute("5")]
private void ErrorMessage(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, object message, string memberName);
    [EventAttribute("6")]
private void CriticalFailure(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, int offset, int count, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, IntPtr bufferPtr, int count, string memberName);
    [EventAttribute("7")]
private void DumpBuffer(string thisOrContextObject, string memberName, Byte[] buffer);
    [NonEventAttribute]
public static void Associate(object first, object second, string memberName);
    [NonEventAttribute]
public static void Associate(object thisOrContextObject, object first, object second, string memberName);
    [EventAttribute("3")]
private void Associate(string thisOrContextObject, string memberName, string first, string second);
    private static void DebugValidateArg(object arg);
    private static void DebugValidateArg(FormattableString arg);
    public static bool get_IsEnabled();
    [NonEventAttribute]
public static string IdOf(object value);
    [NonEventAttribute]
public static int GetHashCode(object value);
    [NonEventAttribute]
public static object Format(object value);
    [NonEventAttribute]
private static string Format(FormattableString s);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, string arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, Byte[] arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, int arg3, int arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, string arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, int arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, int arg4);
}
internal enum Microsoft.Azure.Devices.Shared.StreamDisposalResponsibility : Enum {
    public int value__;
    public static StreamDisposalResponsibility App;
    public static StreamDisposalResponsibility Sdk;
}
[ExtensionAttribute]
internal static class Microsoft.Azure.Devices.Shared.StreamExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Azure.Devices.Shared.StreamExtensions/<WriteToStreamAsync>d__0")]
[ExtensionAttribute]
internal static Task WriteToStreamAsync(Stream stream, Byte[] requestBytes, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.Devices.Shared.TaskCompletionSource : TaskCompletionSource`1<bool> {
    public bool TrySetResult();
    public void SetResult();
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
