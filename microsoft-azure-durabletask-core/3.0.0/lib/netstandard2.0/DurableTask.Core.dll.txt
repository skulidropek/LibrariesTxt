[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DurableTask.Core.ActivityExecutionResult : object {
    [CompilerGeneratedAttribute]
private HistoryEvent <ResponseEvent>k__BackingField;
    public HistoryEvent ResponseEvent { get; public set; }
    [CompilerGeneratedAttribute]
public HistoryEvent get_ResponseEvent();
    [CompilerGeneratedAttribute]
public void set_ResponseEvent(HistoryEvent value);
}
public abstract class DurableTask.Core.AsyncTaskActivity`2 : TaskActivity {
    [CompilerGeneratedAttribute]
private DataConverter <DataConverter>k__BackingField;
    public DataConverter DataConverter { get; protected set; }
    protected AsyncTaskActivity`2(DataConverter dataConverter);
    [CompilerGeneratedAttribute]
public DataConverter get_DataConverter();
    [CompilerGeneratedAttribute]
protected void set_DataConverter(DataConverter value);
    public virtual string Run(TaskContext context, string input);
    protected abstract virtual Task`1<TResult> ExecuteAsync(TaskContext context, TInput input);
    [AsyncStateMachineAttribute("DurableTask.Core.AsyncTaskActivity`2/<RunAsync>d__8")]
public virtual Task`1<string> RunAsync(TaskContext context, string input);
}
public enum DurableTask.Core.BehaviorOnContinueAsNew : Enum {
    public int value__;
    public static BehaviorOnContinueAsNew Ignore;
    public static BehaviorOnContinueAsNew Carryover;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DurableTask.Core.Command.CreateSubOrchestrationAction : OrchestratorAction {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Tags>k__BackingField;
    public OrchestratorActionType OrchestratorActionType { get; }
    public string Name { get; public set; }
    public string Version { get; public set; }
    public string InstanceId { get; public set; }
    public string Input { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> Tags { get; public set; }
    public virtual OrchestratorActionType get_OrchestratorActionType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(IDictionary`2<string, string> value);
}
public class DurableTask.Core.Command.CreateTimerOrchestratorAction : OrchestratorAction {
    [CompilerGeneratedAttribute]
private DateTime <FireAt>k__BackingField;
    public OrchestratorActionType OrchestratorActionType { get; }
    public DateTime FireAt { get; public set; }
    public virtual OrchestratorActionType get_OrchestratorActionType();
    [CompilerGeneratedAttribute]
public DateTime get_FireAt();
    [CompilerGeneratedAttribute]
public void set_FireAt(DateTime value);
}
internal class DurableTask.Core.Command.OrchestrationActionConverter : JsonCreationConverter`1<OrchestratorAction> {
    protected virtual OrchestratorAction CreateObject(Type objectType, JObject jObject);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DurableTask.Core.Command.OrchestrationCompleteOrchestratorAction : OrchestratorAction {
    [CompilerGeneratedAttribute]
private OrchestrationStatus <OrchestrationStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private FailureDetails <FailureDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewVersion>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IList`1<HistoryEvent> <CarryoverEvents>k__BackingField;
    public OrchestrationStatus OrchestrationStatus { get; public set; }
    public OrchestratorActionType OrchestratorActionType { get; }
    public string Result { get; public set; }
    public string Details { get; public set; }
    public FailureDetails FailureDetails { get; public set; }
    public string NewVersion { get; public set; }
    [NullableAttribute("1")]
public IList`1<HistoryEvent> CarryoverEvents { get; }
    [CompilerGeneratedAttribute]
public OrchestrationStatus get_OrchestrationStatus();
    [CompilerGeneratedAttribute]
public void set_OrchestrationStatus(OrchestrationStatus value);
    public virtual OrchestratorActionType get_OrchestratorActionType();
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(string value);
    [CompilerGeneratedAttribute]
public string get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(string value);
    [CompilerGeneratedAttribute]
public FailureDetails get_FailureDetails();
    [CompilerGeneratedAttribute]
public void set_FailureDetails(FailureDetails value);
    [CompilerGeneratedAttribute]
public string get_NewVersion();
    [CompilerGeneratedAttribute]
public void set_NewVersion(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IList`1<HistoryEvent> get_CarryoverEvents();
}
[JsonConverterAttribute("DurableTask.Core.Command.OrchestrationActionConverter")]
public abstract class DurableTask.Core.Command.OrchestratorAction : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; public set; }
    public OrchestratorActionType OrchestratorActionType { get; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    public abstract virtual OrchestratorActionType get_OrchestratorActionType();
}
public enum DurableTask.Core.Command.OrchestratorActionType : Enum {
    public int value__;
    public static OrchestratorActionType ScheduleOrchestrator;
    public static OrchestratorActionType CreateSubOrchestration;
    public static OrchestratorActionType CreateTimer;
    public static OrchestratorActionType SendEvent;
    public static OrchestratorActionType OrchestrationComplete;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DurableTask.Core.Command.ScheduleTaskOrchestratorAction : OrchestratorAction {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tasklist>k__BackingField;
    public OrchestratorActionType OrchestratorActionType { get; }
    public string Name { get; public set; }
    public string Version { get; public set; }
    public string Input { get; public set; }
    internal string Tasklist { get; internal set; }
    public virtual OrchestratorActionType get_OrchestratorActionType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
internal string get_Tasklist();
    [CompilerGeneratedAttribute]
internal void set_Tasklist(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DurableTask.Core.Command.SendEventOrchestratorAction : OrchestratorAction {
    [CompilerGeneratedAttribute]
private OrchestrationInstance <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventData>k__BackingField;
    public OrchestratorActionType OrchestratorActionType { get; }
    public OrchestrationInstance Instance { get; public set; }
    public string EventName { get; public set; }
    public string EventData { get; public set; }
    public virtual OrchestratorActionType get_OrchestratorActionType();
    [CompilerGeneratedAttribute]
public OrchestrationInstance get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(OrchestrationInstance value);
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
public void set_EventName(string value);
    [CompilerGeneratedAttribute]
public string get_EventData();
    [CompilerGeneratedAttribute]
public void set_EventData(string value);
}
public enum DurableTask.Core.Common.CompressionStyle : Enum {
    public int value__;
    public static CompressionStyle Legacy;
    public static CompressionStyle Never;
    public static CompressionStyle Always;
    public static CompressionStyle Threshold;
}
[ExtensionAttribute]
public static class DurableTask.Core.Common.DateTimeUtils : object {
    public static DateTime MinDateTime;
    private static DateTimeUtils();
    [ExtensionAttribute]
public static bool IsSet(DateTime dateTime);
    public static void SetMinDateTimeForStorageEmulator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class DurableTask.Core.Common.Entities : object {
    public static bool IsEntityInstance(string instanceId);
    public static bool IsDelayedEntityMessage(TaskMessage taskMessage, DateTime& due);
    public static bool AutoStart(string instanceId, IList`1<TaskMessage> newMessages);
}
internal static class DurableTask.Core.Common.Fnv1aHashHelper : object {
    private static UInt32 FnvPrime;
    private static UInt32 FnvOffsetBasis;
    public static UInt32 ComputeHash(string value);
    public static UInt32 ComputeHash(string value, Encoding encoding);
    public static UInt32 ComputeHash(string value, Encoding encoding, UInt32 hash);
    public static UInt32 ComputeHash(Byte[] array);
    public static UInt32 ComputeHash(Byte[] array, UInt32 hash);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class DurableTask.Core.Common.Utils : object {
    private static int FullGzipHeaderLength;
    public static DateTime DateTimeSafeMaxValue;
    private static Byte[] GzipHeader;
    internal static string PackageVersion;
    private static JsonSerializerSettings ObjectJsonSettings;
    private static JsonSerializer DefaultObjectJsonSerializer;
    private static JsonSerializer DefaultSerializer;
    [CompilerGeneratedAttribute]
private static string <AppName>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <RedactUserCodeExceptions>k__BackingField;
    public static string AppName { get; public set; }
    public static bool RedactUserCodeExceptions { get; public set; }
    private static Utils();
    public static string SerializeToJson(object payload);
    public static string SerializeToJson(JsonSerializer serializer, object payload);
    public static T DeserializeFromJson(JsonSerializer serializer, string jsonString);
    public static object DeserializeFromJson(string jsonString, Type type);
    public static object DeserializeFromJson(JsonSerializer serializer, string jsonString, Type type);
    [CompilerGeneratedAttribute]
public static string get_AppName();
    [CompilerGeneratedAttribute]
public static void set_AppName(string value);
    [CompilerGeneratedAttribute]
public static bool get_RedactUserCodeExceptions();
    [CompilerGeneratedAttribute]
public static void set_RedactUserCodeExceptions(bool value);
    private static bool GetRedactUserCodeExceptionsDefaultValue();
    public static void UnusedParameter(object parameter);
    [ExtensionAttribute]
public static string Truncate(string input, int maxLength);
    internal static JArray ConvertToJArray(string input);
    public static void WriteObjectToStream(Stream objectStream, object obj);
    public static Stream WriteStringToStream(string input, bool compress, Int64& originalStreamSize);
    [NullableContextAttribute("2")]
public static T ReadObjectFromStream(Stream objectStream);
    public static Byte[] ReadBytesFromStream(Stream objectStream);
    [NullableContextAttribute("2")]
public static T ReadObjectFromByteArray(Byte[] serializedBytes);
    public static bool IsGzipStream(Stream stream);
    public static Stream GetCompressedStream(Stream input);
    [AsyncStateMachineAttribute("DurableTask.Core.Common.Utils/<GetDecompressedStreamAsync>d__31")]
public static Task`1<Stream> GetDecompressedStreamAsync(Stream input);
    public static bool IsFatal(Exception exception);
    public static bool IsExecutionAborting(Exception exception);
    [AsyncStateMachineAttribute("DurableTask.Core.Common.Utils/<ExecuteWithRetries>d__34")]
public static Task ExecuteWithRetries(Func`1<Task> retryAction, string sessionId, string operation, int numberOfAttempts, int delayInAttemptsSecs);
    [AsyncStateMachineAttribute("DurableTask.Core.Common.Utils/<ExecuteWithRetries>d__35`1")]
public static Task`1<T> ExecuteWithRetries(Func`1<Task`1<T>> retryAction, string sessionId, string operation, int numberOfAttempts, int delayInAttemptsSecs);
    public static string SerializeCause(Exception originalException, DataConverter converter);
    public static Exception RetrieveCause(string details, DataConverter converter);
    public static string EscapeJson(string inputJson);
    public static OrchestrationState BuildOrchestrationState(OrchestrationRuntimeState runtimeState);
    public static Task DelayWithCancellation(TimeSpan timeout, CancellationToken cancellationToken);
    public static int GetTaskEventId(HistoryEvent historyEvent);
    public static bool TryGetTaskScheduledId(HistoryEvent historyEvent, Int32& taskScheduledId);
    internal static Guid CreateGuidFromHash(string stringToHash);
    internal static Type GetGenericReturnType(MethodInfo methodInfo, Type[] genericArguments);
    internal static Type ConvertFromGenericType(Type[] genericParameters, Type[] genericArguments, Type typeToConvert);
}
public class DurableTask.Core.CorrelatedExceptionDetails : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentId>k__BackingField;
    public Exception Exception { get; public set; }
    public string OperationId { get; public set; }
    public string ParentId { get; public set; }
    public CorrelatedExceptionDetails(Exception exception, string operationId, string parentId);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public string get_OperationId();
    [CompilerGeneratedAttribute]
public void set_OperationId(string value);
    [CompilerGeneratedAttribute]
public string get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(string value);
}
public static class DurableTask.Core.CorrelationTraceClient : object {
    private static string DiagnosticSourceName;
    private static string RequestTrackEvent;
    private static string DependencyTrackEvent;
    private static string ExceptionEvent;
    private static DiagnosticSource logger;
    private static IDisposable applicationInsightsSubscription;
    private static IDisposable listenerSubscription;
    private static CorrelationTraceClient();
    public static void SetUp(Action`1<TraceContextBase> trackRequestTelemetryAction, Action`1<TraceContextBase> trackDependencyTelemetryAction, Action`1<Exception> trackExceptionAction);
    public static void TrackRequestTelemetry(TraceContextBase context);
    public static void TrackDepencencyTelemetry(TraceContextBase context);
    public static void TrackException(Exception e);
    public static void Propagate(Action action);
    public static Task PropagateAsync(Func`1<Task> func);
    private static void Tracking(Action tracking);
    private static void Execute(Action action);
}
public class DurableTask.Core.CorrelationTraceContext : object {
    private static AsyncLocal`1<TraceContextBase> current;
    private static AsyncLocal`1<bool> generateDependencyTracking;
    public static TraceContextBase Current { get; public set; }
    public static bool GenerateDependencyTracking { get; public set; }
    private static CorrelationTraceContext();
    public static TraceContextBase get_Current();
    public static void set_Current(TraceContextBase value);
    public static bool get_GenerateDependencyTracking();
    public static void set_GenerateDependencyTracking(bool value);
}
public class DurableTask.Core.DefaultObjectCreator`1 : ObjectCreator`1<T> {
    private T instance;
    private Type prototype;
    public DefaultObjectCreator`1(Type type);
    public DefaultObjectCreator`1(T instance);
    public virtual T Create();
    private void Initialize(object obj);
}
[ExtensionAttribute]
internal static class DurableTask.Core.DurableTraceContextWrapperExtensions : object {
    [ExtensionAttribute]
internal static bool TryGetParentTraceContext(ISupportsDurableTraceContext wrapper, ActivityContext& parentTraceContext);
    [ExtensionAttribute]
internal static void SetParentTraceContext(ISupportsDurableTraceContext wrapper, Activity activity);
    [ExtensionAttribute]
internal static void SetParentTraceContext(ISupportsDurableTraceContext wrapper, ActivityContext activityContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class DurableTask.Core.Entities.ClientEntityHelpers : object {
    public static EntityMessageEvent EmitOperationSignal(OrchestrationInstance targetInstance, Guid requestId, string operationName, string input, Nullable`1<ValueTuple`2<DateTime, DateTime>> scheduledTimeUtc);
    public static EntityMessageEvent EmitUnlockForOrphanedLock(OrchestrationInstance targetInstance, string lockOwnerInstanceId);
    [NullableContextAttribute("2")]
public static string GetEntityState(string serializedSchedulerState);
    [NullableContextAttribute("2")]
public static EntityStatus GetEntityStatus(string orchestrationCustomStatus);
}
public class DurableTask.Core.Entities.EntityBackendProperties : object {
    [CompilerGeneratedAttribute]
private TimeSpan <EntityMessageReorderWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxEntityOperationBatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxConcurrentTaskEntityWorkItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsImplicitEntityDeletion>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaximumSignalDelayTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSeparateQueueForEntityWorkItems>k__BackingField;
    public TimeSpan EntityMessageReorderWindow { get; public set; }
    public Nullable`1<int> MaxEntityOperationBatchSize { get; public set; }
    public int MaxConcurrentTaskEntityWorkItems { get; public set; }
    public bool SupportsImplicitEntityDeletion { get; public set; }
    public TimeSpan MaximumSignalDelayTime { get; public set; }
    public bool UseSeparateQueueForEntityWorkItems { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_EntityMessageReorderWindow();
    [CompilerGeneratedAttribute]
public void set_EntityMessageReorderWindow(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxEntityOperationBatchSize();
    [CompilerGeneratedAttribute]
public void set_MaxEntityOperationBatchSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_MaxConcurrentTaskEntityWorkItems();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrentTaskEntityWorkItems(int value);
    [CompilerGeneratedAttribute]
public bool get_SupportsImplicitEntityDeletion();
    [CompilerGeneratedAttribute]
public void set_SupportsImplicitEntityDeletion(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaximumSignalDelayTime();
    [CompilerGeneratedAttribute]
public void set_MaximumSignalDelayTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_UseSeparateQueueForEntityWorkItems();
    [CompilerGeneratedAttribute]
public void set_UseSeparateQueueForEntityWorkItems(bool value);
    public DateTime GetCappedScheduledTime(DateTime nowUtc, DateTime scheduledUtcTime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class DurableTask.Core.Entities.EntityBackendQueries : object {
    public abstract virtual Task`1<Nullable`1<EntityMetadata>> GetEntityAsync(EntityId id, bool includeState, bool includeStateless, CancellationToken cancellation);
    public abstract virtual Task`1<EntityQueryResult> QueryEntitiesAsync(EntityQuery query, CancellationToken cancellation);
    public abstract virtual Task`1<CleanEntityStorageResult> CleanEntityStorageAsync(CleanEntityStorageRequest request, CancellationToken cancellation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DataContractAttribute]
public class DurableTask.Core.Entities.EntityId : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [DataMemberAttribute]
public string Name { get; }
    [DataMemberAttribute]
public string Key { get; }
    public EntityId(string name, string key);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Key();
    public virtual string ToString();
    public static EntityId FromString(string instanceId);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(EntityId other);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class DurableTask.Core.Entities.EntityMessageEvent : ValueType {
    private string eventName;
    private EntityMessage message;
    private OrchestrationInstance target;
    public string EventName { get; }
    public OrchestrationInstance TargetInstance { get; }
    internal EntityMessageEvent(string eventName, EntityMessage message, OrchestrationInstance target);
    public virtual string ToString();
    public string get_EventName();
    public OrchestrationInstance get_TargetInstance();
    public string AsSerializedString();
    public TaskMessage AsTaskMessage();
    public RawInput AsRawInput();
    [NullableContextAttribute("0")]
public static Nullable`1<ValueTuple`2<DateTime, DateTime>> GetCappedScheduledTime(DateTime nowUtc, TimeSpan maxDelay, Nullable`1<DateTime> scheduledUtcTime);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class DurableTask.Core.Entities.EntityStatus : object {
    [NullableAttribute("1")]
private static string EntityExistsProperyName;
    [CompilerGeneratedAttribute]
private bool <EntityExists>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BacklogQueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LockedBy>k__BackingField;
    [DataMemberAttribute]
public bool EntityExists { get; public set; }
    [DataMemberAttribute]
public int BacklogQueueSize { get; public set; }
    [DataMemberAttribute]
public string LockedBy { get; public set; }
    [NullableContextAttribute("1")]
public static bool TestEntityExists(string serializedJson);
    [CompilerGeneratedAttribute]
public bool get_EntityExists();
    [CompilerGeneratedAttribute]
public void set_EntityExists(bool value);
    [CompilerGeneratedAttribute]
public int get_BacklogQueueSize();
    [CompilerGeneratedAttribute]
public void set_BacklogQueueSize(int value);
    [CompilerGeneratedAttribute]
public string get_LockedBy();
    [CompilerGeneratedAttribute]
public void set_LockedBy(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
internal abstract class DurableTask.Core.Entities.EventFormat.EntityMessage : object {
    public abstract virtual string GetShortDescription();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class DurableTask.Core.Entities.EventFormat.EntityMessageEventNames : object {
    public static string RequestMessageEventName { get; }
    public static string ReleaseMessageEventName { get; }
    public static string ContinueMessageEventName { get; }
    public static string get_RequestMessageEventName();
    public static string get_ReleaseMessageEventName();
    public static string get_ContinueMessageEventName();
    public static string ScheduledRequestMessageEventName(DateTime scheduledUtc);
    public static string ResponseMessageEventName(Guid requestId);
    public static bool IsRequestMessage(string eventName);
    public static bool IsReleaseMessage(string eventName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
internal class DurableTask.Core.Entities.EventFormat.ReleaseMessage : EntityMessage {
    [CompilerGeneratedAttribute]
private string <ParentInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [DataMemberAttribute]
public string ParentInstanceId { get; public set; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ParentInstanceId();
    [CompilerGeneratedAttribute]
public void set_ParentInstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [NullableContextAttribute("1")]
public virtual string GetShortDescription();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
internal class DurableTask.Core.Entities.EventFormat.RequestMessage : EntityMessage {
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ScheduledTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Predecessor>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityId[] <LockSet>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [DataMemberAttribute]
public string Operation { get; public set; }
    [DataMemberAttribute]
public bool IsSignal { get; public set; }
    [DataMemberAttribute]
public string Input { get; public set; }
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string ParentInstanceId { get; public set; }
    [DataMemberAttribute]
public string ParentExecutionId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> ScheduledTime { get; public set; }
    [DataMemberAttribute]
public DateTime Timestamp { get; public set; }
    [DataMemberAttribute]
public DateTime Predecessor { get; public set; }
    [DataMemberAttribute]
public EntityId[] LockSet { get; public set; }
    [DataMemberAttribute]
public int Position { get; public set; }
    [DataMemberAttribute]
public bool IsLockRequest { get; }
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSignal();
    [CompilerGeneratedAttribute]
public void set_IsSignal(bool value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_ParentInstanceId();
    [CompilerGeneratedAttribute]
public void set_ParentInstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_ParentExecutionId();
    [CompilerGeneratedAttribute]
public void set_ParentExecutionId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ScheduledTime();
    [CompilerGeneratedAttribute]
public void set_ScheduledTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_Predecessor();
    [CompilerGeneratedAttribute]
public void set_Predecessor(DateTime value);
    [CompilerGeneratedAttribute]
public EntityId[] get_LockSet();
    [CompilerGeneratedAttribute]
public void set_LockSet(EntityId[] value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    public bool get_IsLockRequest();
    [NullableContextAttribute("1")]
public virtual string GetShortDescription();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
internal class DurableTask.Core.Entities.EventFormat.ResponseMessage : EntityMessage {
    [NullableAttribute("1")]
public static string LockAcquisitionCompletion;
    [CompilerGeneratedAttribute]
private string <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private FailureDetails <FailureDetails>k__BackingField;
    [DataMemberAttribute]
public string Result { get; public set; }
    [DataMemberAttribute]
public string ErrorMessage { get; public set; }
    [DataMemberAttribute]
public FailureDetails FailureDetails { get; public set; }
    [IgnoreDataMemberAttribute]
public bool IsErrorResult { get; }
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public FailureDetails get_FailureDetails();
    [CompilerGeneratedAttribute]
public void set_FailureDetails(FailureDetails value);
    public bool get_IsErrorResult();
    [NullableContextAttribute("1")]
public virtual string GetShortDescription();
}
[NullableContextAttribute("2")]
public interface DurableTask.Core.Entities.IEntityOrchestrationService {
    public EntityBackendProperties EntityBackendProperties { get; }
    public EntityBackendQueries EntityBackendQueries { get; }
    public abstract virtual EntityBackendProperties get_EntityBackendProperties();
    public abstract virtual EntityBackendQueries get_EntityBackendQueries();
    [NullableContextAttribute("1")]
public abstract virtual Task`1<TaskOrchestrationWorkItem> LockNextOrchestrationWorkItemAsync(TimeSpan receiveTimeout, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public abstract virtual Task`1<TaskOrchestrationWorkItem> LockNextEntityWorkItemAsync(TimeSpan receiveTimeout, CancellationToken cancellationToken);
}
[DataContractAttribute]
internal class DurableTask.Core.Entities.MessageSorter : object {
    private static TimeSpan MinIntervalBetweenCollections;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, DateTime> <LastSentToInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ReceiveBuffer> <ReceivedFromInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ReceiveHorizon>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <SendHorizon>k__BackingField;
    [DataMemberAttribute]
public Dictionary`2<string, DateTime> LastSentToInstance { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, ReceiveBuffer> ReceivedFromInstance { get; public set; }
    [DataMemberAttribute]
public DateTime ReceiveHorizon { get; public set; }
    [DataMemberAttribute]
public DateTime SendHorizon { get; public set; }
    [IgnoreDataMemberAttribute]
internal int NumberBufferedRequests { get; }
    private static MessageSorter();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, DateTime> get_LastSentToInstance();
    [CompilerGeneratedAttribute]
public void set_LastSentToInstance(Dictionary`2<string, DateTime> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ReceiveBuffer> get_ReceivedFromInstance();
    [CompilerGeneratedAttribute]
public void set_ReceivedFromInstance(Dictionary`2<string, ReceiveBuffer> value);
    [CompilerGeneratedAttribute]
public DateTime get_ReceiveHorizon();
    [CompilerGeneratedAttribute]
public void set_ReceiveHorizon(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_SendHorizon();
    [CompilerGeneratedAttribute]
public void set_SendHorizon(DateTime value);
    internal int get_NumberBufferedRequests();
    public void LabelOutgoingMessage(RequestMessage message, string destination, DateTime now, TimeSpan reorderWindow);
    [IteratorStateMachineAttribute("DurableTask.Core.Entities.MessageSorter/<ReceiveInOrder>d__20")]
public IEnumerable`1<RequestMessage> ReceiveInOrder(RequestMessage message, TimeSpan reorderWindow);
    private bool TryDeliverNextMessage(ReceiveBuffer buffer, RequestMessage& message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DurableTask.Core.Entities.OperationFormat.EntityBatchRequest : object {
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityState>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<OperationRequest> <Operations>k__BackingField;
    public string InstanceId { get; public set; }
    public string EntityState { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<OperationRequest> Operations { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_EntityState();
    [CompilerGeneratedAttribute]
public void set_EntityState(string value);
    [CompilerGeneratedAttribute]
public List`1<OperationRequest> get_Operations();
    [CompilerGeneratedAttribute]
public void set_Operations(List`1<OperationRequest> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DurableTask.Core.Entities.OperationFormat.EntityBatchResult : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<OperationResult> <Results>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<OperationAction> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityState>k__BackingField;
    [CompilerGeneratedAttribute]
private FailureDetails <FailureDetails>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<OperationResult> Results { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<OperationAction> Actions { get; public set; }
    public string EntityState { get; public set; }
    public FailureDetails FailureDetails { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<OperationResult> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(List`1<OperationResult> value);
    [CompilerGeneratedAttribute]
public List`1<OperationAction> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(List`1<OperationAction> value);
    [CompilerGeneratedAttribute]
public string get_EntityState();
    [CompilerGeneratedAttribute]
public void set_EntityState(string value);
    [CompilerGeneratedAttribute]
public FailureDetails get_FailureDetails();
    [CompilerGeneratedAttribute]
public void set_FailureDetails(FailureDetails value);
}
[JsonConverterAttribute("DurableTask.Core.Entities.OperationFormat.OperationActionConverter")]
public abstract class DurableTask.Core.Entities.OperationFormat.OperationAction : object {
    public OperationActionType OperationActionType { get; }
    public abstract virtual OperationActionType get_OperationActionType();
}
internal class DurableTask.Core.Entities.OperationFormat.OperationActionConverter : JsonCreationConverter`1<OperationAction> {
    protected virtual OperationAction CreateObject(Type objectType, JObject jObject);
}
public enum DurableTask.Core.Entities.OperationFormat.OperationActionType : Enum {
    public int value__;
    public static OperationActionType SendSignal;
    public static OperationActionType StartNewOrchestration;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DurableTask.Core.Entities.OperationFormat.OperationRequest : object {
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    public string Operation { get; public set; }
    public Guid Id { get; public set; }
    public string Input { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DurableTask.Core.Entities.OperationFormat.OperationResult : object {
    [CompilerGeneratedAttribute]
private string <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private FailureDetails <FailureDetails>k__BackingField;
    public string Result { get; public set; }
    public bool IsError { get; }
    public string ErrorMessage { get; public set; }
    public FailureDetails FailureDetails { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(string value);
    public bool get_IsError();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public FailureDetails get_FailureDetails();
    [CompilerGeneratedAttribute]
public void set_FailureDetails(FailureDetails value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DurableTask.Core.Entities.OperationFormat.SendSignalOperationAction : OperationAction {
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ScheduledTime>k__BackingField;
    public OperationActionType OperationActionType { get; }
    public string InstanceId { get; public set; }
    public string Name { get; public set; }
    public string Input { get; public set; }
    public Nullable`1<DateTime> ScheduledTime { get; public set; }
    public virtual OperationActionType get_OperationActionType();
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ScheduledTime();
    [CompilerGeneratedAttribute]
public void set_ScheduledTime(Nullable`1<DateTime> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DurableTask.Core.Entities.OperationFormat.StartNewOrchestrationOperationAction : OperationAction {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ScheduledStartTime>k__BackingField;
    public OperationActionType OperationActionType { get; }
    public string Name { get; public set; }
    public string Version { get; public set; }
    public string InstanceId { get; public set; }
    public string Input { get; public set; }
    public Nullable`1<DateTime> ScheduledStartTime { get; public set; }
    public virtual OperationActionType get_OperationActionType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ScheduledStartTime();
    [CompilerGeneratedAttribute]
public void set_ScheduledStartTime(Nullable`1<DateTime> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DurableTask.Core.Entities.OrchestrationEntityContext : object {
    private string instanceId;
    private string executionId;
    private OrchestrationContext innerContext;
    private MessageSorter messageSorter;
    private bool lockAcquisitionPending;
    private Nullable`1<Guid> criticalSectionId;
    [NullableAttribute("2")]
private EntityId[] criticalSectionLocks;
    [NullableAttribute("2")]
private HashSet`1<EntityId> availableLocks;
    public bool EntitiesAreSupported { get; }
    public bool IsInsideCriticalSection { get; }
    public Nullable`1<Guid> CurrentCriticalSectionId { get; }
    public OrchestrationEntityContext(string instanceId, string executionId, OrchestrationContext innerContext);
    public bool get_EntitiesAreSupported();
    public bool get_IsInsideCriticalSection();
    public Nullable`1<Guid> get_CurrentCriticalSectionId();
    private void CheckEntitySupport();
    [IteratorStateMachineAttribute("DurableTask.Core.Entities.OrchestrationEntityContext/<GetAvailableEntities>d__16")]
public IEnumerable`1<EntityId> GetAvailableEntities();
    [NullableContextAttribute("2")]
public bool ValidateSuborchestrationTransition(String& errorMessage);
    public bool ValidateOperationTransition(string targetInstanceId, bool oneWay, String& errorMessage);
    [NullableContextAttribute("2")]
public bool ValidateAcquireTransition(String& errorMessage);
    public void RecoverLockAfterCall(string targetInstanceId);
    [IteratorStateMachineAttribute("DurableTask.Core.Entities.OrchestrationEntityContext/<EmitLockReleaseMessages>d__21")]
public IEnumerable`1<EntityMessageEvent> EmitLockReleaseMessages();
    public EntityMessageEvent EmitRequestMessage(OrchestrationInstance target, string operationName, bool oneWay, Guid operationId, Nullable`1<ValueTuple`2<DateTime, DateTime>> scheduledTimeUtc, string input);
    public EntityMessageEvent EmitAcquireMessage(Guid lockRequestId, EntityId[] entities);
    public void CompleteAcquire(OperationResult result, Guid criticalSectionId);
    internal void AdjustOutgoingMessage(string instanceId, RequestMessage requestMessage, Nullable`1<DateTime> cappedTime, String& eventName);
    public OperationResult DeserializeEntityResponseEvent(string eventContent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
internal class DurableTask.Core.Entities.SchedulerState : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <EntityState>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Queue`1<RequestMessage> <Queue>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <LockedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Suspended>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageSorter <MessageSorter>k__BackingField;
    [IgnoreDataMemberAttribute]
public bool EntityExists { get; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public string EntityState { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public Queue`1<RequestMessage> Queue { get; private set; }
    [NullableAttribute("2")]
[DataMemberAttribute]
public string LockedBy { get; public set; }
    [DataMemberAttribute]
public bool Suspended { get; public set; }
    [DataMemberAttribute]
public MessageSorter MessageSorter { get; public set; }
    [IgnoreDataMemberAttribute]
public bool IsEmpty { get; }
    public bool get_EntityExists();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_EntityState();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_EntityState(string value);
    [CompilerGeneratedAttribute]
public Queue`1<RequestMessage> get_Queue();
    [CompilerGeneratedAttribute]
private void set_Queue(Queue`1<RequestMessage> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_LockedBy();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_LockedBy(string value);
    [CompilerGeneratedAttribute]
public bool get_Suspended();
    [CompilerGeneratedAttribute]
public void set_Suspended(bool value);
    [CompilerGeneratedAttribute]
public MessageSorter get_MessageSorter();
    [CompilerGeneratedAttribute]
public void set_MessageSorter(MessageSorter value);
    public bool get_IsEmpty();
    internal void Enqueue(RequestMessage operationMessage);
    internal void PutBack(Queue`1<RequestMessage> messages);
    internal bool MayDequeue();
    internal RequestMessage Dequeue();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class DurableTask.Core.Entities.Serializer : object {
    public static JsonSerializer InternalSerializer;
    public static JsonSerializerSettings InternalSerializerSettings;
    private static Serializer();
}
public abstract class DurableTask.Core.Entities.TaskEntity : object {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<EntityBatchResult> ExecuteOperationBatchAsync(EntityBatchRequest operations);
}
public class DurableTask.Core.Entities.TaskOrchestrationEntityParameters : object {
    [CompilerGeneratedAttribute]
private TimeSpan <EntityMessageReorderWindow>k__BackingField;
    public TimeSpan EntityMessageReorderWindow { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_EntityMessageReorderWindow();
    [CompilerGeneratedAttribute]
public void set_EntityMessageReorderWindow(TimeSpan value);
    [NullableContextAttribute("2")]
public static TaskOrchestrationEntityParameters FromEntityBackendProperties(EntityBackendProperties properties);
}
public enum DurableTask.Core.ErrorPropagationMode : Enum {
    public int value__;
    public static ErrorPropagationMode SerializeExceptions;
    public static ErrorPropagationMode UseFailureDetails;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DurableTask.Core.Exceptions.EntitySchedulerException : Exception {
    public EntitySchedulerException(string message);
    public EntitySchedulerException(string errorMessage, Exception innerException);
    protected EntitySchedulerException(SerializationInfo info, StreamingContext context);
}
public class DurableTask.Core.Exceptions.NonDeterministicOrchestrationException : OrchestrationException {
    public NonDeterministicOrchestrationException(string message);
    public NonDeterministicOrchestrationException(string message, Exception innerException);
    public NonDeterministicOrchestrationException(int eventId, string eventDetails);
    protected NonDeterministicOrchestrationException(SerializationInfo info, StreamingContext context);
}
public class DurableTask.Core.Exceptions.OrchestrationAlreadyExistsException : InvalidOperationException {
    public OrchestrationAlreadyExistsException(string message);
    public OrchestrationAlreadyExistsException(string message, Exception innerException);
    protected OrchestrationAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DurableTask.Core.Exceptions.OrchestrationException : Exception {
    [CompilerGeneratedAttribute]
private int <EventId>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private FailureDetails <FailureDetails>k__BackingField;
    public int EventId { get; public set; }
    [NullableAttribute("2")]
public FailureDetails FailureDetails { get; public set; }
    public OrchestrationException(string message);
    public OrchestrationException(string message, Exception innerException);
    public OrchestrationException(int eventId, string message, Exception innerException);
    protected OrchestrationException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public int get_EventId();
    [CompilerGeneratedAttribute]
public void set_EventId(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public FailureDetails get_FailureDetails();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_FailureDetails(FailureDetails value);
}
public class DurableTask.Core.Exceptions.OrchestrationFailureException : Exception {
    [CompilerGeneratedAttribute]
private string <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private FailureDetails <FailureDetails>k__BackingField;
    public string Details { get; public set; }
    internal FailureDetails FailureDetails { get; internal set; }
    public OrchestrationFailureException(string reason);
    public OrchestrationFailureException(string reason, Exception innerException);
    public OrchestrationFailureException(string reason, string details);
    protected OrchestrationFailureException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(string value);
    [CompilerGeneratedAttribute]
internal FailureDetails get_FailureDetails();
    [CompilerGeneratedAttribute]
internal void set_FailureDetails(FailureDetails value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class DurableTask.Core.Exceptions.OrchestrationFrameworkException : Exception {
    public OrchestrationFrameworkException(string message);
    public OrchestrationFrameworkException(Exception innerException);
    public OrchestrationFrameworkException(string message, Exception innerException);
    protected OrchestrationFrameworkException(SerializationInfo info, StreamingContext context);
}
public class DurableTask.Core.Exceptions.SessionAbortedException : InvalidOperationException {
    public SessionAbortedException(string message);
    public SessionAbortedException(string message, Exception innerException);
    protected SessionAbortedException(SerializationInfo info, StreamingContext context);
}
public class DurableTask.Core.Exceptions.SubOrchestrationFailedException : OrchestrationException {
    [CompilerGeneratedAttribute]
private int <ScheduleId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public int ScheduleId { get; public set; }
    public string Name { get; public set; }
    public string Version { get; public set; }
    public SubOrchestrationFailedException(string reason);
    public SubOrchestrationFailedException(string reason, Exception innerException);
    public SubOrchestrationFailedException(int eventId, int scheduleId, string name, string version, string reason, Exception cause);
    protected SubOrchestrationFailedException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public int get_ScheduleId();
    [CompilerGeneratedAttribute]
public void set_ScheduleId(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
public class DurableTask.Core.Exceptions.TaskFailedException : OrchestrationException {
    [CompilerGeneratedAttribute]
private int <ScheduleId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public int ScheduleId { get; public set; }
    public string Name { get; public set; }
    public string Version { get; public set; }
    public TaskFailedException(string reason);
    public TaskFailedException(string reason, Exception innerException);
    public TaskFailedException(int eventId, int scheduleId, string name, string version, string reason, Exception cause);
    protected TaskFailedException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public int get_ScheduleId();
    [CompilerGeneratedAttribute]
public void set_ScheduleId(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
public class DurableTask.Core.Exceptions.TaskFailedExceptionDeserializationException : Exception {
    public TaskFailedExceptionDeserializationException(string message);
    public TaskFailedExceptionDeserializationException(string details, Exception deserializationException);
    protected TaskFailedExceptionDeserializationException(SerializationInfo info, StreamingContext context);
}
public class DurableTask.Core.Exceptions.TaskFailureException : Exception {
    [CompilerGeneratedAttribute]
private string <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FailureSource>k__BackingField;
    [CompilerGeneratedAttribute]
private FailureDetails <FailureDetails>k__BackingField;
    public string Details { get; public set; }
    internal string FailureSource { get; internal set; }
    internal FailureDetails FailureDetails { get; internal set; }
    public TaskFailureException(string reason);
    public TaskFailureException(string reason, Exception innerException);
    public TaskFailureException(string reason, Exception innerException, string details);
    public TaskFailureException(string reason, string details);
    protected TaskFailureException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public string get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(string value);
    [CompilerGeneratedAttribute]
internal string get_FailureSource();
    [CompilerGeneratedAttribute]
internal void set_FailureSource(string value);
    [CompilerGeneratedAttribute]
internal FailureDetails get_FailureDetails();
    [CompilerGeneratedAttribute]
internal void set_FailureDetails(FailureDetails value);
    internal TaskFailureException WithFailureSource(string failureSource);
    internal TaskFailureException WithFailureDetails(FailureDetails failureDetails);
    private bool ExistPropertyInfo(SerializationInfo info, string propertyName);
}
public class DurableTask.Core.Exceptions.TypeMissingException : Exception {
    public TypeMissingException(string message);
    public TypeMissingException(string message, Exception innerException);
    protected TypeMissingException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DurableTask.Core.FailureDetails : object {
    [CompilerGeneratedAttribute]
private string <ErrorType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <StackTrace>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private FailureDetails <InnerFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNonRetriable>k__BackingField;
    public string ErrorType { get; }
    public string ErrorMessage { get; }
    [NullableAttribute("2")]
public string StackTrace { get; }
    [NullableAttribute("2")]
public FailureDetails InnerFailure { get; }
    public bool IsNonRetriable { get; }
    [JsonConstructorAttribute]
public FailureDetails(string errorType, string errorMessage, string stackTrace, FailureDetails innerFailure, bool isNonRetriable);
    public FailureDetails(Exception e, FailureDetails innerFailure);
    public FailureDetails(Exception e);
    protected FailureDetails(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_ErrorType();
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_StackTrace();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public FailureDetails get_InnerFailure();
    [CompilerGeneratedAttribute]
public bool get_IsNonRetriable();
    public virtual string ToString();
    [NullableContextAttribute("0")]
public bool IsCausedBy();
    public virtual bool Equals(object other);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(FailureDetails other);
    public virtual int GetHashCode();
    private static string GetErrorMessage(Exception e);
    [NullableContextAttribute("2")]
private static FailureDetails FromException(Exception e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Type <IsCausedBy>b__21_0(Assembly a);
}
public enum DurableTask.Core.FilterComparisonType : Enum {
    public int value__;
    public static FilterComparisonType Equals;
    public static FilterComparisonType NotEquals;
}
public class DurableTask.Core.FrameworkConstants : object {
    public static string TaskMessageContentType;
    public static string StateMessageContentType;
    public static string HistoryEventIndexPropertyName;
    public static int FakeTimerIdToSplitDecision;
    public static int OrchestrationTransientErrorBackOffSecs;
    public static int OrchestrationNonTransientErrorBackOffSecs;
    public static int OrchestrationDefaultDispatcherCount;
    public static int OrchestrationDefaultMaxConcurrentItems;
    public static int ActivityTransientErrorBackOffSecs;
    public static int ActivityNonTransientErrorBackOffSecs;
    public static int ActivityDefaultDispatcherCount;
    public static int ActivityDefaultMaxConcurrentItems;
    public static int TrackingTransientErrorBackOffSecs;
    public static int TrackingNonTransientErrorBackOffSecs;
    public static int TrackingDefaultDispatcherCount;
    public static int TrackingDefaultMaxConcurrentItems;
    public static bool TrackingTrackHistoryEvents;
    public static TimeSpan JumpStartDefaultInterval;
    public static TimeSpan JumpStartDefaultIgnoreWindow;
    public static string CompressionTypePropertyName;
    public static string CompressionTypeGzipPropertyValue;
    public static string CompressionTypeNonePropertyValue;
    public static int MessageOverflowThresholdInBytesDefault;
    public static int MessageMaxSizeInBytesDefault;
    public static int SessionOverflowThresholdInBytesDefault;
    public static int SessionMaxSizeInBytesDefault;
    public static int BatchFlushIntervalInMilliSecs;
    private static FrameworkConstants();
}
[DataContractAttribute]
public class DurableTask.Core.History.ContinueAsNewEvent : ExecutionCompletedEvent {
    public EventType EventType { get; }
    public ContinueAsNewEvent(int eventId, string input);
    public virtual EventType get_EventType();
}
[DataContractAttribute]
public class DurableTask.Core.History.EventRaisedEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private DistributedTraceContext <ParentTraceContext>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Input { get; public set; }
    [DataMemberAttribute]
public DistributedTraceContext ParentTraceContext { get; public set; }
    public EventRaisedEvent(int eventId, string input);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DistributedTraceContext get_ParentTraceContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParentTraceContext(DistributedTraceContext value);
}
[DataContractAttribute]
public class DurableTask.Core.History.EventSentEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public string InstanceId { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Input { get; public set; }
    public EventSentEvent(int eventId);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
}
public enum DurableTask.Core.History.EventType : Enum {
    public int value__;
    public static EventType ExecutionStarted;
    public static EventType ExecutionCompleted;
    public static EventType ExecutionFailed;
    public static EventType ExecutionTerminated;
    public static EventType TaskScheduled;
    public static EventType TaskCompleted;
    public static EventType TaskFailed;
    public static EventType SubOrchestrationInstanceCreated;
    public static EventType SubOrchestrationInstanceCompleted;
    public static EventType SubOrchestrationInstanceFailed;
    public static EventType TimerCreated;
    public static EventType TimerFired;
    public static EventType OrchestratorStarted;
    public static EventType OrchestratorCompleted;
    public static EventType EventSent;
    public static EventType EventRaised;
    public static EventType ContinueAsNew;
    public static EventType GenericEvent;
    public static EventType HistoryState;
    public static EventType ExecutionSuspended;
    public static EventType ExecutionResumed;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class DurableTask.Core.History.ExecutionCompletedEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private OrchestrationStatus <OrchestrationStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private FailureDetails <FailureDetails>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public OrchestrationStatus OrchestrationStatus { get; private set; }
    [DataMemberAttribute]
public string Result { get; private set; }
    [DataMemberAttribute]
public FailureDetails FailureDetails { get; private set; }
    public ExecutionCompletedEvent(int eventId, string result, OrchestrationStatus orchestrationStatus, FailureDetails failureDetails);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public OrchestrationStatus get_OrchestrationStatus();
    [CompilerGeneratedAttribute]
private void set_OrchestrationStatus(OrchestrationStatus value);
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(string value);
    [CompilerGeneratedAttribute]
public FailureDetails get_FailureDetails();
    [CompilerGeneratedAttribute]
private void set_FailureDetails(FailureDetails value);
}
[DataContractAttribute]
public class DurableTask.Core.History.ExecutionResumedEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public string Reason { get; public set; }
    public ExecutionResumedEvent(int eventId, string reason);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(string value);
}
[DataContractAttribute]
public class DurableTask.Core.History.ExecutionStartedEvent : HistoryEvent {
    [DataMemberAttribute]
public OrchestrationInstance OrchestrationInstance;
    [CompilerGeneratedAttribute]
private ParentInstance <ParentInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Correlation>k__BackingField;
    [CompilerGeneratedAttribute]
private DistributedTraceContext <ParentTraceContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ScheduledStartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Generation>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public ParentInstance ParentInstance { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public string Input { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> Tags { get; public set; }
    [DataMemberAttribute]
public string Correlation { get; public set; }
    [DataMemberAttribute]
public DistributedTraceContext ParentTraceContext { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> ScheduledStartTime { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> Generation { get; public set; }
    public ExecutionStartedEvent(int eventId, string input);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public ParentInstance get_ParentInstance();
    [CompilerGeneratedAttribute]
public void set_ParentInstance(ParentInstance value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_Correlation();
    [CompilerGeneratedAttribute]
public void set_Correlation(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DistributedTraceContext get_ParentTraceContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParentTraceContext(DistributedTraceContext value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ScheduledStartTime();
    [CompilerGeneratedAttribute]
public void set_ScheduledStartTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Generation();
    [CompilerGeneratedAttribute]
public void set_Generation(Nullable`1<int> value);
    internal void SetParentTraceContext(ExecutionStartedEvent parent);
}
[DataContractAttribute]
public class DurableTask.Core.History.ExecutionSuspendedEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public string Reason { get; public set; }
    public ExecutionSuspendedEvent(int eventId, string reason);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(string value);
}
[DataContractAttribute]
public class DurableTask.Core.History.ExecutionTerminatedEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public string Input { get; public set; }
    public ExecutionTerminatedEvent(int eventId, string input);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
}
[DataContractAttribute]
public class DurableTask.Core.History.GenericEvent : HistoryEvent {
    [DataMemberAttribute]
public string Data;
    public EventType EventType { get; }
    public GenericEvent(int eventId, string data);
    public virtual EventType get_EventType();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
[KnownTypeAttribute("KnownTypes")]
public abstract class DurableTask.Core.History.HistoryEvent : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IReadOnlyCollection`1<Type> knownTypes;
    [CompilerGeneratedAttribute]
private int <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPlayed>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private EventType <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionDataObject <ExtensionData>k__BackingField;
    [DataMemberAttribute]
public int EventId { get; internal set; }
    [DataMemberAttribute]
public bool IsPlayed { get; public set; }
    [DataMemberAttribute]
public DateTime Timestamp { get; public set; }
    [DataMemberAttribute]
public EventType EventType { get; private set; }
    public ExtensionDataObject ExtensionData { get; public set; }
    protected HistoryEvent(int eventId);
    [NullableContextAttribute("1")]
public static IEnumerable`1<Type> KnownTypes();
    [CompilerGeneratedAttribute]
public int get_EventId();
    [CompilerGeneratedAttribute]
internal void set_EventId(int value);
    [CompilerGeneratedAttribute]
public bool get_IsPlayed();
    [CompilerGeneratedAttribute]
public void set_IsPlayed(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
private void set_EventType(EventType value);
    [CompilerGeneratedAttribute]
public sealed virtual ExtensionDataObject get_ExtensionData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtensionData(ExtensionDataObject value);
}
[DataContractAttribute]
public class DurableTask.Core.History.HistoryStateEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private OrchestrationState <State>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public OrchestrationState State { get; public set; }
    public HistoryStateEvent(int eventId, OrchestrationState state);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public OrchestrationState get_State();
    [CompilerGeneratedAttribute]
public void set_State(OrchestrationState value);
}
[DataContractAttribute]
public class DurableTask.Core.History.OrchestratorCompletedEvent : HistoryEvent {
    public EventType EventType { get; }
    public OrchestratorCompletedEvent(int eventId);
    public virtual EventType get_EventType();
}
[DataContractAttribute]
public class DurableTask.Core.History.OrchestratorStartedEvent : HistoryEvent {
    public EventType EventType { get; }
    public OrchestratorStartedEvent(int eventId);
    public virtual EventType get_EventType();
}
[DataContractAttribute]
public class DurableTask.Core.History.SubOrchestrationInstanceCompletedEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private int <TaskScheduledId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Result>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public int TaskScheduledId { get; private set; }
    [DataMemberAttribute]
public string Result { get; private set; }
    public SubOrchestrationInstanceCompletedEvent(int eventId, int taskScheduledId, string result);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public int get_TaskScheduledId();
    [CompilerGeneratedAttribute]
private void set_TaskScheduledId(int value);
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(string value);
}
[DataContractAttribute]
public class DurableTask.Core.History.SubOrchestrationInstanceCreatedEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSpanId>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public string InstanceId { get; public set; }
    [DataMemberAttribute]
public string Input { get; public set; }
    [DataMemberAttribute]
public string ClientSpanId { get; public set; }
    public SubOrchestrationInstanceCreatedEvent(int eventId);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSpanId();
    [CompilerGeneratedAttribute]
public void set_ClientSpanId(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class DurableTask.Core.History.SubOrchestrationInstanceFailedEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private int <TaskScheduledId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private FailureDetails <FailureDetails>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public int TaskScheduledId { get; private set; }
    [DataMemberAttribute]
public string Reason { get; private set; }
    [DataMemberAttribute]
public string Details { get; private set; }
    [DataMemberAttribute]
public FailureDetails FailureDetails { get; internal set; }
    public SubOrchestrationInstanceFailedEvent(int eventId, int taskScheduledId, string reason, string details, FailureDetails failureDetails);
    public SubOrchestrationInstanceFailedEvent(int eventId, int taskScheduledId, string reason, string details);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public int get_TaskScheduledId();
    [CompilerGeneratedAttribute]
private void set_TaskScheduledId(int value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(string value);
    [CompilerGeneratedAttribute]
public string get_Details();
    [CompilerGeneratedAttribute]
private void set_Details(string value);
    [CompilerGeneratedAttribute]
public FailureDetails get_FailureDetails();
    [CompilerGeneratedAttribute]
internal void set_FailureDetails(FailureDetails value);
}
[DataContractAttribute]
public class DurableTask.Core.History.TaskCompletedEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private int <TaskScheduledId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Result>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public int TaskScheduledId { get; private set; }
    [DataMemberAttribute]
public string Result { get; private set; }
    public TaskCompletedEvent(int eventId, int taskScheduledId, string result);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public int get_TaskScheduledId();
    [CompilerGeneratedAttribute]
private void set_TaskScheduledId(int value);
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class DurableTask.Core.History.TaskFailedEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private int <TaskScheduledId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private FailureDetails <FailureDetails>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public int TaskScheduledId { get; private set; }
    [DataMemberAttribute]
public string Reason { get; private set; }
    [DataMemberAttribute]
public string Details { get; private set; }
    [DataMemberAttribute]
public FailureDetails FailureDetails { get; private set; }
    public TaskFailedEvent(int eventId, int taskScheduledId, string reason, string details, FailureDetails failureDetails);
    public TaskFailedEvent(int eventId, int taskScheduledId, string reason, string details);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public int get_TaskScheduledId();
    [CompilerGeneratedAttribute]
private void set_TaskScheduledId(int value);
    [CompilerGeneratedAttribute]
public string get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(string value);
    [CompilerGeneratedAttribute]
public string get_Details();
    [CompilerGeneratedAttribute]
private void set_Details(string value);
    [CompilerGeneratedAttribute]
public FailureDetails get_FailureDetails();
    [CompilerGeneratedAttribute]
private void set_FailureDetails(FailureDetails value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class DurableTask.Core.History.TaskScheduledEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private DistributedTraceContext <ParentTraceContext>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public string Input { get; public set; }
    [DataMemberAttribute]
public DistributedTraceContext ParentTraceContext { get; public set; }
    public TaskScheduledEvent(int eventId, string name, string version, string input);
    public TaskScheduledEvent(int eventId);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DistributedTraceContext get_ParentTraceContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParentTraceContext(DistributedTraceContext value);
}
[DataContractAttribute]
public class DurableTask.Core.History.TimerCreatedEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private DateTime <FireAt>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public DateTime FireAt { get; public set; }
    public TimerCreatedEvent(int eventId, DateTime fireAt);
    public TimerCreatedEvent(int eventId);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public DateTime get_FireAt();
    [CompilerGeneratedAttribute]
public void set_FireAt(DateTime value);
}
[DataContractAttribute]
public class DurableTask.Core.History.TimerFiredEvent : HistoryEvent {
    [CompilerGeneratedAttribute]
private int <TimerId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <FireAt>k__BackingField;
    public EventType EventType { get; }
    [DataMemberAttribute]
public int TimerId { get; public set; }
    [DataMemberAttribute]
public DateTime FireAt { get; public set; }
    public TimerFiredEvent(int eventId, DateTime fireAt);
    public TimerFiredEvent(int eventId);
    public virtual EventType get_EventType();
    [CompilerGeneratedAttribute]
public int get_TimerId();
    [CompilerGeneratedAttribute]
public void set_TimerId(int value);
    [CompilerGeneratedAttribute]
public DateTime get_FireAt();
    [CompilerGeneratedAttribute]
public void set_FireAt(DateTime value);
}
public class DurableTask.Core.HttpCorrelationProtocolTraceContext : TraceContextBase {
    [CompilerGeneratedAttribute]
private string <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentParentId>k__BackingField;
    public string ParentId { get; public set; }
    public string ParentParentId { get; public set; }
    public TimeSpan Duration { get; }
    public string TelemetryId { get; }
    public string TelemetryContextOperationId { get; }
    public string TelemetryContextOperationParentId { get; }
    [CompilerGeneratedAttribute]
public string get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(string value);
    [CompilerGeneratedAttribute]
public string get_ParentParentId();
    [CompilerGeneratedAttribute]
public void set_ParentParentId(string value);
    public virtual void SetParentAndStart(TraceContextBase parentTraceContext);
    public virtual void StartAsNew();
    public virtual TimeSpan get_Duration();
    public virtual string get_TelemetryId();
    public virtual string get_TelemetryContextOperationId();
    public virtual string get_TelemetryContextOperationParentId();
    internal string GetRootId(string id);
}
public interface DurableTask.Core.INameVersionInfo {
    public string Name { get; }
    public string Version { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Version();
}
[NullableContextAttribute("2")]
public interface DurableTask.Core.INameVersionObjectManager`1 {
    [NullableContextAttribute("1")]
public abstract virtual void Add(ObjectCreator`1<T> creator);
    public abstract virtual T GetObject(string name, string version);
}
public interface DurableTask.Core.IOrchestrationService {
    public int TaskOrchestrationDispatcherCount { get; }
    public int MaxConcurrentTaskOrchestrationWorkItems { get; }
    public BehaviorOnContinueAsNew EventBehaviourForContinueAsNew { get; }
    public int TaskActivityDispatcherCount { get; }
    public int MaxConcurrentTaskActivityWorkItems { get; }
    public abstract virtual Task StartAsync();
    public abstract virtual Task StopAsync();
    public abstract virtual Task StopAsync(bool isForced);
    public abstract virtual Task CreateAsync();
    public abstract virtual Task CreateAsync(bool recreateInstanceStore);
    public abstract virtual Task CreateIfNotExistsAsync();
    public abstract virtual Task DeleteAsync();
    public abstract virtual Task DeleteAsync(bool deleteInstanceStore);
    public abstract virtual bool IsMaxMessageCountExceeded(int currentMessageCount, OrchestrationRuntimeState runtimeState);
    public abstract virtual int GetDelayInSecondsAfterOnProcessException(Exception exception);
    public abstract virtual int GetDelayInSecondsAfterOnFetchException(Exception exception);
    public abstract virtual int get_TaskOrchestrationDispatcherCount();
    public abstract virtual int get_MaxConcurrentTaskOrchestrationWorkItems();
    public abstract virtual BehaviorOnContinueAsNew get_EventBehaviourForContinueAsNew();
    public abstract virtual Task`1<TaskOrchestrationWorkItem> LockNextTaskOrchestrationWorkItemAsync(TimeSpan receiveTimeout, CancellationToken cancellationToken);
    public abstract virtual Task RenewTaskOrchestrationWorkItemLockAsync(TaskOrchestrationWorkItem workItem);
    public abstract virtual Task CompleteTaskOrchestrationWorkItemAsync(TaskOrchestrationWorkItem workItem, OrchestrationRuntimeState newOrchestrationRuntimeState, IList`1<TaskMessage> outboundMessages, IList`1<TaskMessage> orchestratorMessages, IList`1<TaskMessage> timerMessages, TaskMessage continuedAsNewMessage, OrchestrationState orchestrationState);
    public abstract virtual Task AbandonTaskOrchestrationWorkItemAsync(TaskOrchestrationWorkItem workItem);
    public abstract virtual Task ReleaseTaskOrchestrationWorkItemAsync(TaskOrchestrationWorkItem workItem);
    public abstract virtual int get_TaskActivityDispatcherCount();
    public abstract virtual int get_MaxConcurrentTaskActivityWorkItems();
    public abstract virtual Task`1<TaskActivityWorkItem> LockNextTaskActivityWorkItem(TimeSpan receiveTimeout, CancellationToken cancellationToken);
    public abstract virtual Task`1<TaskActivityWorkItem> RenewTaskActivityWorkItemLockAsync(TaskActivityWorkItem workItem);
    public abstract virtual Task CompleteTaskActivityWorkItemAsync(TaskActivityWorkItem workItem, TaskMessage responseMessage);
    public abstract virtual Task AbandonTaskActivityWorkItemAsync(TaskActivityWorkItem workItem);
}
public interface DurableTask.Core.IOrchestrationServiceClient {
    public abstract virtual Task CreateTaskOrchestrationAsync(TaskMessage creationMessage);
    public abstract virtual Task CreateTaskOrchestrationAsync(TaskMessage creationMessage, OrchestrationStatus[] dedupeStatuses);
    public abstract virtual Task SendTaskOrchestrationMessageAsync(TaskMessage message);
    public abstract virtual Task SendTaskOrchestrationMessageBatchAsync(TaskMessage[] messages);
    public abstract virtual Task`1<OrchestrationState> WaitForOrchestrationAsync(string instanceId, string executionId, TimeSpan timeout, CancellationToken cancellationToken);
    public abstract virtual Task ForceTerminateTaskOrchestrationAsync(string instanceId, string reason);
    public abstract virtual Task`1<IList`1<OrchestrationState>> GetOrchestrationStateAsync(string instanceId, bool allExecutions);
    public abstract virtual Task`1<OrchestrationState> GetOrchestrationStateAsync(string instanceId, string executionId);
    public abstract virtual Task`1<string> GetOrchestrationHistoryAsync(string instanceId, string executionId);
    public abstract virtual Task PurgeOrchestrationHistoryAsync(DateTime thresholdDateTimeUtc, OrchestrationStateTimeRangeFilterType timeRangeFilterType);
}
public interface DurableTask.Core.IOrchestrationServiceInstanceStore {
    public int MaxHistoryEntryLength { get; }
    public abstract virtual int get_MaxHistoryEntryLength();
    public abstract virtual Task InitializeStoreAsync(bool recreate);
    public abstract virtual Task DeleteStoreAsync();
    public abstract virtual Task`1<object> WriteEntitiesAsync(IEnumerable`1<InstanceEntityBase> entities);
    public abstract virtual Task`1<IEnumerable`1<OrchestrationStateInstanceEntity>> GetEntitiesAsync(string instanceId, string executionId);
    public abstract virtual Task`1<object> DeleteEntitiesAsync(IEnumerable`1<InstanceEntityBase> entities);
    public abstract virtual Task`1<IEnumerable`1<OrchestrationStateInstanceEntity>> GetOrchestrationStateAsync(string instanceId, bool allInstances);
    public abstract virtual Task`1<OrchestrationStateInstanceEntity> GetOrchestrationStateAsync(string instanceId, string executionId);
    public abstract virtual Task`1<IEnumerable`1<OrchestrationWorkItemInstanceEntity>> GetOrchestrationHistoryEventsAsync(string instanceId, string executionId);
    public abstract virtual Task`1<int> PurgeOrchestrationHistoryEventsAsync(DateTime thresholdDateTimeUtc, OrchestrationStateTimeRangeFilterType timeRangeFilterType);
    public abstract virtual Task`1<object> WriteJumpStartEntitiesAsync(IEnumerable`1<OrchestrationJumpStartInstanceEntity> entities);
    public abstract virtual Task`1<object> DeleteJumpStartEntitiesAsync(IEnumerable`1<OrchestrationJumpStartInstanceEntity> entities);
    public abstract virtual Task`1<IEnumerable`1<OrchestrationJumpStartInstanceEntity>> GetJumpStartEntitiesAsync(int top);
}
public interface DurableTask.Core.IOrchestrationServicePurgeClient {
    public abstract virtual Task`1<PurgeResult> PurgeInstanceStateAsync(string instanceId);
    public abstract virtual Task`1<PurgeResult> PurgeInstanceStateAsync(PurgeInstanceFilter purgeInstanceFilter);
}
public interface DurableTask.Core.IOrchestrationSession {
    public abstract virtual Task`1<IList`1<TaskMessage>> FetchNewOrchestrationMessagesAsync(TaskOrchestrationWorkItem workItem);
}
public interface DurableTask.Core.ISupportsDurableTraceContext {
    public DistributedTraceContext ParentTraceContext { get; public set; }
    public abstract virtual DistributedTraceContext get_ParentTraceContext();
    public abstract virtual void set_ParentTraceContext(DistributedTraceContext value);
}
internal static class DurableTask.Core.Logging.EventIds : object {
    public static int TaskHubWorkerStarting;
    public static int TaskHubWorkerStarted;
    public static int TaskHubWorkerStopping;
    public static int TaskHubWorkerStopped;
    public static int DispatcherStarting;
    public static int DispatcherStopped;
    public static int DispatchersStopping;
    public static int FetchWorkItemStarting;
    public static int FetchWorkItemCompleted;
    public static int FetchWorkItemFailure;
    public static int FetchingThrottled;
    public static int ProcessWorkItemStarting;
    public static int ProcessWorkItemCompleted;
    public static int ProcessWorkItemFailed;
    public static int SchedulingOrchestration;
    public static int RaisingEvent;
    public static int TerminatingInstance;
    public static int WaitingForInstance;
    public static int FetchingInstanceState;
    public static int FetchingInstanceHistory;
    public static int SchedulingActivity;
    public static int CreatingTimer;
    public static int SendingEvent;
    public static int OrchestrationCompleted;
    public static int ProcessingOrchestrationMessage;
    public static int OrchestrationExecuting;
    public static int OrchestrationExecuted;
    public static int OrchestrationAborted;
    public static int DiscardingMessage;
    public static int EntityBatchExecuting;
    public static int EntityBatchExecuted;
    public static int EntityLockAcquired;
    public static int EntityLockReleased;
    public static int TaskActivityStarting;
    public static int TaskActivityCompleted;
    public static int TaskActivityFailure;
    public static int TaskActivityAborted;
    public static int TaskActivityDispatcherError;
    public static int RenewActivityMessageStarting;
    public static int RenewActivityMessageCompleted;
    public static int RenewActivityMessageFailed;
    public static int SuspendingInstance;
    public static int ResumingInstance;
    public static int RenewOrchestrationWorkItemStarting;
    public static int RenewOrchestrationWorkItemCompleted;
    public static int RenewOrchestrationWorkItemFailed;
    public static int OrchestrationDebugTrace;
}
public interface DurableTask.Core.Logging.IEventSourceEvent {
    public abstract virtual void WriteEventSource();
}
public interface DurableTask.Core.Logging.ILogEvent {
    public EventId EventId { get; }
    public LogLevel Level { get; }
    public string FormattedMessage { get; }
    public abstract virtual EventId get_EventId();
    public abstract virtual LogLevel get_Level();
    public abstract virtual string get_FormattedMessage();
}
internal static class DurableTask.Core.Logging.LogEvents : object {
}
[ExtensionAttribute]
public static class DurableTask.Core.Logging.LoggingExtensions : object {
    [ExtensionAttribute]
public static void LogDurableEvent(ILogger logger, ILogEvent logEvent, Exception exception);
    public static void SetLogicalTraceActivityId(Guid traceActivityId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class DurableTask.Core.Logging.LogHelper : object {
    [NullableAttribute("2")]
private ILogger log;
    private bool IsStructuredLoggingEnabled { get; }
    [NullableContextAttribute("2")]
public LogHelper(ILogger log);
    private bool get_IsStructuredLoggingEnabled();
    internal void TaskHubWorkerStarting();
    internal void TaskHubWorkerStarted(TimeSpan latency);
    internal void TaskHubWorkerStopping(bool isForced);
    internal void TaskHubWorkerStopped(TimeSpan latency);
    internal void DispatcherStarting(WorkItemDispatcherContext context);
    internal void DispatcherStopped(WorkItemDispatcherContext context);
    internal void DispatchersStopping(string name, string id, int concurrentWorkItemCount, int activeFetchers);
    internal void FetchWorkItemStarting(WorkItemDispatcherContext context, TimeSpan timeout, int concurrentWorkItemCount, int maxConcurrentWorkItems);
    internal void FetchWorkItemCompleted(WorkItemDispatcherContext context, string workItemId, TimeSpan latency, int concurrentWorkItemCount, int maxConcurrentWorkItems);
    internal void FetchWorkItemFailure(WorkItemDispatcherContext context, Exception exception);
    internal void FetchingThrottled(WorkItemDispatcherContext context, int concurrentWorkItemCount, int maxConcurrentWorkItems);
    internal void ProcessWorkItemStarting(WorkItemDispatcherContext context, string workItemId);
    internal void ProcessWorkItemCompleted(WorkItemDispatcherContext context, string workItemId);
    internal void ProcessWorkItemFailed(WorkItemDispatcherContext context, string workItemId, string additionalInfo, Exception exception);
    internal void SchedulingOrchestration(ExecutionStartedEvent startedEvent);
    internal void RaisingEvent(OrchestrationInstance target, EventRaisedEvent raisedEvent);
    internal void RaisingEvent(OrchestrationInstance source, EventSentEvent raisedEvent);
    internal void TerminatingInstance(OrchestrationInstance instance, string reason);
    internal void SuspendingInstance(OrchestrationInstance instance, string reason);
    internal void ResumingInstance(OrchestrationInstance instance, string reason);
    internal void WaitingForInstance(OrchestrationInstance instance, TimeSpan timeout);
    internal void FetchingInstanceState(string instanceId, string executionId);
    internal void FetchingInstanceHistory(OrchestrationInstance instance);
    internal void ProcessingOrchestrationMessage(TaskOrchestrationWorkItem workItem, TaskMessage message);
    internal void OrchestrationExecuting(OrchestrationInstance instance, string name);
    internal void OrchestrationExecuted(OrchestrationInstance instance, string name, IReadOnlyList`1<OrchestratorAction> actions);
    internal void SchedulingActivity(OrchestrationInstance instance, TaskScheduledEvent scheduledEvent);
    internal void CreatingTimer(OrchestrationInstance instance, TimerCreatedEvent timerEvent, bool isInternal);
    internal void SendingEvent(OrchestrationInstance source, EventSentEvent eventSentEvent);
    internal void OrchestrationCompleted(OrchestrationRuntimeState runtimeState, OrchestrationCompleteOrchestratorAction action);
    internal void OrchestrationAborted(OrchestrationInstance instance, string reason);
    internal void DroppingOrchestrationWorkItem(TaskOrchestrationWorkItem workItem, string reason);
    internal void DroppingOrchestrationMessage(TaskOrchestrationWorkItem workItem, TaskMessage message, string reason);
    internal void RenewOrchestrationWorkItemStarting(TaskOrchestrationWorkItem workItem);
    internal void RenewOrchestrationWorkItemCompleted(TaskOrchestrationWorkItem workItem);
    internal void RenewOrchestrationWorkItemFailed(TaskOrchestrationWorkItem workItem, Exception exception);
    internal void EntityBatchExecuting(EntityBatchRequest request);
    internal void EntityBatchExecuted(EntityBatchRequest request, EntityBatchResult result);
    internal void EntityLockAcquired(string entityId, RequestMessage message);
    internal void EntityLockReleased(string entityId, ReleaseMessage message);
    internal void TaskActivityStarting(OrchestrationInstance instance, TaskScheduledEvent taskEvent);
    internal void TaskActivityCompleted(OrchestrationInstance instance, string name, TaskCompletedEvent taskEvent);
    internal void TaskActivityFailure(OrchestrationInstance instance, string name, TaskFailedEvent failedEvent, Exception exception);
    internal void TaskActivityAborted(OrchestrationInstance instance, TaskScheduledEvent taskEvent, string details);
    internal void TaskActivityDispatcherError(TaskActivityWorkItem workItem, string details);
    internal void RenewActivityMessageStarting(TaskActivityWorkItem workItem);
    internal void RenewActivityMessageCompleted(TaskActivityWorkItem workItem, DateTime renewAt);
    internal void RenewActivityMessageFailed(TaskActivityWorkItem workItem, Exception exception);
    internal void OrchestrationDebugTrace(string instanceId, string executionId, string details);
    private void WriteStructuredLog(ILogEvent logEvent, Exception exception);
    internal static string GetRedactedExceptionDetails(Exception exception);
}
[EventSourceAttribute]
internal class DurableTask.Core.Logging.StructuredEventSource : EventSource {
    internal static StructuredEventSource Log;
    private static AsyncLocal`1<Guid> ActivityIdState;
    private static StructuredEventSource();
    [NonEventAttribute]
public static void SetLogicalTraceActivityId(Guid activityId);
    [NonEventAttribute]
internal static void EnsureLogicalTraceActivityId();
    private bool IsEnabled(EventLevel level);
    [EventAttribute("10")]
internal void TaskHubWorkerStarting(string AppName, string ExtensionVersion);
    [EventAttribute("11")]
internal void TaskHubWorkerStarted(long LatencyMs, string AppName, string ExtensionVersion);
    [EventAttribute("12")]
internal void TaskHubWorkerStopping(bool IsForced, string AppName, string ExtensionVersion);
    [EventAttribute("13")]
internal void TaskHubWorkerStopped(long LatencyMs, string AppName, string ExtensionVersion);
    [EventAttribute("20")]
internal void DispatcherStarting(string Dispatcher, string AppName, string ExtensionVersion);
    [EventAttribute("21")]
internal void DispatcherStopped(string Dispatcher, string AppName, string ExtensionVersion);
    [EventAttribute("22")]
internal void DispatchersStopping(string Dispatcher, int WorkItemCount, int ActiveFetcherCount, string AppName, string ExtensionVersion);
    [EventAttribute("23")]
internal void FetchWorkItemStarting(string Dispatcher, int TimeoutSeconds, int WorkItemCount, int MaxWorkItemCount, string AppName, string ExtensionVersion);
    [EventAttribute("24")]
internal void FetchWorkItemCompleted(string Dispatcher, string WorkItemId, long LatencyMs, int WorkItemCount, int MaxWorkItemCount, string AppName, string ExtensionVersion);
    [EventAttribute("25")]
internal void FetchWorkItemFailure(string Dispatcher, string Details, string AppName, string ExtensionVersion);
    [EventAttribute("26")]
internal void FetchingThrottled(string Dispatcher, int WorkItemCount, int MaxWorkItemCount, string AppName, string ExtensionVersion);
    [EventAttribute("27")]
internal void ProcessWorkItemStarting(string Dispatcher, string WorkItemId, string AppName, string ExtensionVersion);
    [EventAttribute("28")]
internal void ProcessWorkItemCompleted(string Dispatcher, string WorkItemId, string AppName, string ExtensionVersion);
    [EventAttribute("29")]
internal void ProcessWorkItemFailed(string Dispatcher, string WorkItemId, string Details, string AppName, string ExtensionVersion);
    [EventAttribute("40")]
internal void SchedulingOrchestration(string InstanceId, string ExecutionId, string TargetInstanceId, string TargetExecutionId, string Name, int TaskEventId, int SizeInBytes, string AppName, string ExtensionVersion);
    [EventAttribute("41")]
internal void RaisingEvent(string InstanceId, string ExecutionId, string TargetInstanceId, string Name, int TaskEventId, int SizeInBytes, string AppName, string ExtensionVersion);
    [EventAttribute("42")]
internal void TerminatingInstance(string InstanceId, string ExecutionId, string Details, string AppName, string ExtensionVersion);
    [EventAttribute("68")]
internal void SuspendingInstance(string InstanceId, string ExecutionId, string Details, string AppName, string ExtensionVersion);
    [EventAttribute("69")]
internal void ResumingInstance(string InstanceId, string ExecutionId, string Details, string AppName, string ExtensionVersion);
    [EventAttribute("43")]
internal void WaitingForInstance(string InstanceId, string ExecutionId, int TimeoutSeconds, string AppName, string ExtensionVersion);
    [EventAttribute("44")]
internal void FetchingInstanceState(string InstanceId, string ExecutionId, string AppName, string ExtensionVersion);
    [EventAttribute("45")]
internal void FetchingInstanceHistory(string InstanceId, string ExecutionId, string AppName, string ExtensionVersion);
    [EventAttribute("50")]
internal void ProcessingOrchestrationMessage(string InstanceId, string ExecutionId, string EventType, int TaskEventId, string AppName, string ExtensionVersion);
    [EventAttribute("51")]
internal void OrchestrationExecuting(string InstanceId, string ExecutionId, string Name, string AppName, string ExtensionVersion);
    [EventAttribute("52")]
internal void OrchestrationExecuted(string InstanceId, string ExecutionId, string Name, int ActionCount, string AppName, string ExtensionVersion);
    [EventAttribute("46")]
internal void SchedulingActivity(string InstanceId, string ExecutionId, string Name, int TaskEventId, int SizeInBytes, string AppName, string ExtensionVersion);
    [EventAttribute("47")]
internal void CreatingTimer(string InstanceId, string ExecutionId, DateTime FireAt, int TaskEventId, bool IsInternal, string AppName, string ExtensionVersion);
    [EventAttribute("49")]
internal void OrchestrationCompleted(string InstanceId, string ExecutionId, string RuntimeStatus, string Details, int SizeInBytes, string AppName, string ExtensionVersion);
    [EventAttribute("53")]
internal void OrchestrationAborted(string InstanceId, string ExecutionId, string Details, string AppName, string ExtensionVersion);
    [EventAttribute("54")]
internal void DiscardingMessage(string InstanceId, string ExecutionId, string EventType, int TaskEventId, string Details, string AppName, string ExtensionVersion);
    [EventAttribute("55")]
internal void EntityBatchExecuting(string InstanceId, int OperationCount, int EntityStateLength, string AppName, string ExtensionVersion);
    [EventAttribute("56")]
internal void EntityBatchExecuted(string InstanceId, int OperationCount, int ResultCount, int ErrorCount, int ActionCount, int EntityStateLength, string AppName, string ExtensionVersion);
    [EventAttribute("57")]
internal void EntityLockAcquired(string EntityId, string InstanceId, string ExecutionId, Guid CriticalSectionId, string LockSet, int Position, string AppName, string ExtensionVersion);
    [EventAttribute("58")]
internal void EntityLockReleased(string EntityId, string InstanceId, string Id, string AppName, string ExtensionVersion);
    [EventAttribute("60")]
internal void TaskActivityStarting(string InstanceId, string ExecutionId, string Name, int TaskEventId, string AppName, string ExtensionVersion);
    [EventAttribute("61")]
internal void TaskActivityCompleted(string InstanceId, string ExecutionId, string Name, int TaskEventId, int SizeInBytes, string AppName, string ExtensionVersion);
    [EventAttribute("62")]
internal void TaskActivityFailure(string InstanceId, string ExecutionId, string Name, int TaskEventId, string Details, string AppName, string ExtensionVersion);
    [EventAttribute("63")]
internal void TaskActivityAborted(string InstanceId, string ExecutionId, string Name, int TaskEventId, string Details, string AppName, string ExtensionVersion);
    [EventAttribute("64")]
internal void TaskActivityDispatcherError(string InstanceId, string ExecutionId, string Details, string AppName, string ExtensionVersion);
    [EventAttribute("65")]
internal void RenewActivityMessageStarting(string InstanceId, string ExecutionId, string Name, int TaskEventId, string AppName, string ExtensionVersion);
    [EventAttribute("66")]
internal void RenewActivityMessageCompleted(string InstanceId, string ExecutionId, string Name, int TaskEventId, DateTime NextRenewal, string AppName, string ExtensionVersion);
    [EventAttribute("67")]
internal void RenewActivityMessageFailed(string InstanceId, string ExecutionId, string Name, int TaskEventId, string Details, string AppName, string ExtensionVersion);
    [EventAttribute("70")]
internal void RenewOrchestrationWorkItemStarting(string InstanceId, string AppName, string ExtensionVersion);
    [EventAttribute("71")]
internal void RenewOrchestrationWorkItemCompleted(string InstanceId, string AppName, string ExtensionVersion);
    [EventAttribute("72")]
internal void RenewOrchestrationWorkItemFailed(string InstanceId, string Details, string AppName, string ExtensionVersion);
    [EventAttribute("73")]
internal void OrchestrationDebugTrace(string InstanceId, string ExecutionId, string Details, string AppName, string ExtensionVersion);
}
public abstract class DurableTask.Core.Logging.StructuredLogEvent : object {
    private static ConcurrentDictionary`2<Type, IReadOnlyDictionary`2<string, PropertyInfo>> SharedPropertiesCache;
    private string logMessage;
    private IReadOnlyDictionary`2<string, PropertyInfo> Properties { get; }
    public EventId EventId { get; }
    public LogLevel Level { get; }
    private string DurableTask.Core.Logging.ILogEvent.FormattedMessage { get; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Keys { get; }
    private IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Values { get; }
    private int System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.Count { get; }
    private object System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.Item { get; }
    private static StructuredLogEvent();
    private IReadOnlyDictionary`2<string, PropertyInfo> get_Properties();
    public abstract virtual EventId get_EventId();
    public abstract virtual LogLevel get_Level();
    private sealed virtual override string DurableTask.Core.Logging.ILogEvent.get_FormattedMessage();
    protected abstract virtual string CreateLogMessage();
    private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Keys();
    private sealed virtual override IEnumerable`1<object> System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Values();
    private sealed virtual override int System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.get_Count();
    private sealed virtual override object System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Item(string key);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.ContainsKey(string key);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.TryGetValue(string key, Object& value);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static IReadOnlyDictionary`2<string, PropertyInfo> GetProperties(Type type);
    protected static string GetEventDescription(string eventType, int taskEventId);
    [CompilerGeneratedAttribute]
private object <System.Collections.Generic.IReadOnlyDictionary<System.String,System.Object>.get_Values>b__14_0(PropertyInfo p);
    [CompilerGeneratedAttribute]
private KeyValuePair`2<string, object> <System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator>b__21_0(KeyValuePair`2<string, PropertyInfo> pair);
}
[AttributeUsageAttribute("128")]
public class DurableTask.Core.Logging.StructuredLogFieldAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public StructuredLogFieldAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class DurableTask.Core.Middleware.DispatchMiddlewareContext : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    public IDictionary`2<string, object> Properties { get; }
    public void SetProperty(T value);
    public void SetProperty(string key, T value);
    public T GetProperty();
    public T GetProperty(string key);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
}
public class DurableTask.Core.Middleware.DispatchMiddlewareDelegate : MulticastDelegate {
    public DispatchMiddlewareDelegate(object object, IntPtr method);
    public virtual Task Invoke(DispatchMiddlewareContext context);
    public virtual IAsyncResult BeginInvoke(DispatchMiddlewareContext context, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
internal class DurableTask.Core.Middleware.DispatchMiddlewarePipeline : object {
    private IList`1<Func`2<DispatchMiddlewareDelegate, DispatchMiddlewareDelegate>> components;
    public Task RunAsync(DispatchMiddlewareContext context, DispatchMiddlewareDelegate handler);
    public void Add(Func`3<DispatchMiddlewareContext, Func`1<Task>, Task> middleware);
}
public class DurableTask.Core.NameValueObjectCreator`1 : DefaultObjectCreator`1<T> {
    public NameValueObjectCreator`1(string name, string version, Type type);
    public NameValueObjectCreator`1(string name, string version, T instance);
}
public static class DurableTask.Core.NameVersionHelper : object {
    internal static string GetDefaultMethodName(MethodInfo methodInfo, bool useFullyQualifiedMethodNames);
    public static string GetDefaultName(object obj);
    public static string GetDefaultName(object obj, bool useFullyQualifiedMethodNames);
    public static string GetDefaultVersion(object obj);
    internal static string GetFullyQualifiedMethodName(string declaringType, string methodName);
    internal static string GetFullyQualifiedMethodName(string declaringType, MethodInfo methodInfo);
    internal static IList`1<MethodInfo> GetAllInterfaceMethods(Type t, Func`2<MethodInfo, string> getMethodUniqueId, HashSet`1<string> visited);
}
internal class DurableTask.Core.NameVersionObjectManager`1 : object {
    private IDictionary`2<string, ObjectCreator`1<T>> creators;
    private object thisLock;
    public sealed virtual void Add(ObjectCreator`1<T> creator);
    public sealed virtual T GetObject(string name, string version);
    private string GetKey(string name, string version);
}
public class DurableTask.Core.NullObjectTraceContext : TraceContextBase {
    public TimeSpan Duration { get; }
    public string TelemetryId { get; }
    public string TelemetryContextOperationId { get; }
    public string TelemetryContextOperationParentId { get; }
    public virtual TimeSpan get_Duration();
    public virtual string get_TelemetryId();
    public virtual string get_TelemetryContextOperationId();
    public virtual string get_TelemetryContextOperationParentId();
    public virtual void SetParentAndStart(TraceContextBase parentTraceContext);
    public virtual void StartAsNew();
}
public abstract class DurableTask.Core.ObjectCreator`1 : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Name { get; protected set; }
    public string Version { get; protected set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
protected void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
protected void set_Version(string value);
    public abstract virtual T Create();
}
public abstract class DurableTask.Core.OrchestrationContext : object {
    private static ProxyGenerator ProxyGenerator;
    [ThreadStaticAttribute]
public static bool IsOrchestratorThread;
    [CompilerGeneratedAttribute]
private JsonDataConverter <MessageDataConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonDataConverter <ErrorDataConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private OrchestrationInstance <OrchestrationInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CurrentUtcDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReplaying>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorPropagationMode <ErrorPropagationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskOrchestrationEntityParameters <EntityParameters>k__BackingField;
    public JsonDataConverter MessageDataConverter { get; public set; }
    public JsonDataConverter ErrorDataConverter { get; public set; }
    public OrchestrationInstance OrchestrationInstance { get; protected internal set; }
    public string Version { get; protected internal set; }
    public DateTime CurrentUtcDateTime { get; internal set; }
    public bool IsReplaying { get; protected internal set; }
    internal ErrorPropagationMode ErrorPropagationMode { get; internal set; }
    internal TaskOrchestrationEntityParameters EntityParameters { get; internal set; }
    private static OrchestrationContext();
    [CompilerGeneratedAttribute]
public JsonDataConverter get_MessageDataConverter();
    [CompilerGeneratedAttribute]
public void set_MessageDataConverter(JsonDataConverter value);
    [CompilerGeneratedAttribute]
public JsonDataConverter get_ErrorDataConverter();
    [CompilerGeneratedAttribute]
public void set_ErrorDataConverter(JsonDataConverter value);
    [CompilerGeneratedAttribute]
public OrchestrationInstance get_OrchestrationInstance();
    [CompilerGeneratedAttribute]
protected internal void set_OrchestrationInstance(OrchestrationInstance value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
protected internal void set_Version(string value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_CurrentUtcDateTime();
    [CompilerGeneratedAttribute]
internal virtual void set_CurrentUtcDateTime(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_IsReplaying();
    [CompilerGeneratedAttribute]
protected internal void set_IsReplaying(bool value);
    [CompilerGeneratedAttribute]
internal ErrorPropagationMode get_ErrorPropagationMode();
    [CompilerGeneratedAttribute]
internal void set_ErrorPropagationMode(ErrorPropagationMode value);
    [CompilerGeneratedAttribute]
internal TaskOrchestrationEntityParameters get_EntityParameters();
    [CompilerGeneratedAttribute]
internal void set_EntityParameters(TaskOrchestrationEntityParameters value);
    public virtual T CreateClient();
    public virtual T CreateClient(bool useFullyQualifiedMethodNames);
    public virtual T CreateClientV2();
    public virtual T CreateRetryableClient(RetryOptions retryOptions);
    public virtual T CreateRetryableClient(RetryOptions retryOptions, bool useFullyQualifiedMethodNames);
    public virtual Task`1<T> ScheduleWithRetry(Type taskActivityType, RetryOptions retryOptions, Object[] parameters);
    public virtual Task`1<T> ScheduleWithRetry(string name, string version, RetryOptions retryOptions, Object[] parameters);
    public virtual Task`1<T> CreateSubOrchestrationInstanceWithRetry(Type orchestrationType, RetryOptions retryOptions, object input);
    public virtual Task`1<T> CreateSubOrchestrationInstanceWithRetry(Type orchestrationType, string instanceId, RetryOptions retryOptions, object input);
    public virtual Task`1<T> CreateSubOrchestrationInstanceWithRetry(string name, string version, RetryOptions retryOptions, object input);
    public virtual Task`1<T> CreateSubOrchestrationInstanceWithRetry(string name, string version, string instanceId, RetryOptions retryOptions, object input);
    public virtual Task`1<TResult> ScheduleTask(Type activityType, Object[] parameters);
    public abstract virtual Task`1<TResult> ScheduleTask(string name, string version, Object[] parameters);
    public abstract virtual Task`1<T> CreateTimer(DateTime fireAt, T state);
    public abstract virtual Task`1<T> CreateTimer(DateTime fireAt, T state, CancellationToken cancelToken);
    public virtual Task`1<T> CreateSubOrchestrationInstance(Type orchestrationType, object input);
    public virtual Task`1<T> CreateSubOrchestrationInstance(Type orchestrationType, string instanceId, object input);
    public abstract virtual Task`1<T> CreateSubOrchestrationInstance(string name, string version, object input);
    public abstract virtual Task`1<T> CreateSubOrchestrationInstance(string name, string version, string instanceId, object input);
    public abstract virtual Task`1<T> CreateSubOrchestrationInstance(string name, string version, string instanceId, object input, IDictionary`2<string, string> tags);
    public abstract virtual void SendEvent(OrchestrationInstance orchestrationInstance, string eventName, object eventData);
    public abstract virtual void ContinueAsNew(object input);
    public abstract virtual void ContinueAsNew(string newVersion, object input);
    private static T CreateClient(Func`1<IInterceptor> createScheduleProxy);
    [CompilerGeneratedAttribute]
private IInterceptor <CreateClientV2>b__36_0();
}
[DataContractAttribute]
public class DurableTask.Core.OrchestrationExecutionContext : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <OrchestrationTags>k__BackingField;
    [DataMemberAttribute]
public IDictionary`2<string, string> OrchestrationTags { get; internal set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_OrchestrationTags();
    [CompilerGeneratedAttribute]
internal void set_OrchestrationTags(IDictionary`2<string, string> value);
}
internal class DurableTask.Core.OrchestrationExecutionCursor : object {
    [CompilerGeneratedAttribute]
private OrchestrationRuntimeState <RuntimeState>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskOrchestration <TaskOrchestration>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskOrchestrationExecutor <OrchestrationExecutor>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<OrchestratorAction> <LatestDecisions>k__BackingField;
    public OrchestrationRuntimeState RuntimeState { get; }
    public TaskOrchestration TaskOrchestration { get; }
    public TaskOrchestrationExecutor OrchestrationExecutor { get; }
    public IEnumerable`1<OrchestratorAction> LatestDecisions { get; public set; }
    public OrchestrationExecutionCursor(OrchestrationRuntimeState state, TaskOrchestration orchestration, TaskOrchestrationExecutor executor, IEnumerable`1<OrchestratorAction> latestDecisions);
    [CompilerGeneratedAttribute]
public OrchestrationRuntimeState get_RuntimeState();
    [CompilerGeneratedAttribute]
public TaskOrchestration get_TaskOrchestration();
    [CompilerGeneratedAttribute]
public TaskOrchestrationExecutor get_OrchestrationExecutor();
    [CompilerGeneratedAttribute]
public IEnumerable`1<OrchestratorAction> get_LatestDecisions();
    [CompilerGeneratedAttribute]
public void set_LatestDecisions(IEnumerable`1<OrchestratorAction> value);
}
[DataContractAttribute]
public class DurableTask.Core.OrchestrationInstance : object {
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionDataObject <ExtensionData>k__BackingField;
    [DataMemberAttribute]
public string InstanceId { get; public set; }
    [DataMemberAttribute]
public string ExecutionId { get; public set; }
    public ExtensionDataObject ExtensionData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionId();
    [CompilerGeneratedAttribute]
public void set_ExecutionId(string value);
    internal OrchestrationInstance Clone();
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual ExtensionDataObject get_ExtensionData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtensionData(ExtensionDataObject value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DurableTask.Core.OrchestrationRuntimeState : object {
    private OrchestrationStatus orchestrationStatus;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IList`1<HistoryEvent> <Events>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IList`1<HistoryEvent> <NewEvents>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IList`1<HistoryEvent> <PastEvents>k__BackingField;
    [NullableAttribute("1")]
private ISet`1<int> completedEventIds;
    public long CompressedSize;
    [CompilerGeneratedAttribute]
private ExecutionCompletedEvent <ExecutionCompletedEvent>k__BackingField;
    public long Size;
    public string Status;
    [CompilerGeneratedAttribute]
private ExecutionStartedEvent <ExecutionStartedEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private LogHelper <LogHelper>k__BackingField;
    [NullableAttribute("1")]
public IList`1<HistoryEvent> Events { get; }
    [NullableAttribute("1")]
public IList`1<HistoryEvent> NewEvents { get; }
    [NullableAttribute("1")]
public IList`1<HistoryEvent> PastEvents { get; }
    public ExecutionCompletedEvent ExecutionCompletedEvent { get; public set; }
    public ExecutionStartedEvent ExecutionStartedEvent { get; private set; }
    public DateTime CreatedTime { get; }
    public DateTime CompletedTime { get; }
    public string Input { get; }
    public string Output { get; }
    public FailureDetails FailureDetails { get; }
    internal Exception Exception { get; internal set; }
    [NullableAttribute("1")]
public string Name { get; }
    [NullableAttribute("1")]
public string Version { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> Tags { get; }
    public OrchestrationStatus OrchestrationStatus { get; }
    public OrchestrationInstance OrchestrationInstance { get; }
    public ParentInstance ParentInstance { get; }
    public bool IsValid { get; }
    internal LogHelper LogHelper { get; internal set; }
    public OrchestrationRuntimeState(IList`1<HistoryEvent> events);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IList`1<HistoryEvent> get_Events();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IList`1<HistoryEvent> get_NewEvents();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IList`1<HistoryEvent> get_PastEvents();
    [CompilerGeneratedAttribute]
public ExecutionCompletedEvent get_ExecutionCompletedEvent();
    [CompilerGeneratedAttribute]
public void set_ExecutionCompletedEvent(ExecutionCompletedEvent value);
    [CompilerGeneratedAttribute]
public ExecutionStartedEvent get_ExecutionStartedEvent();
    [CompilerGeneratedAttribute]
private void set_ExecutionStartedEvent(ExecutionStartedEvent value);
    public DateTime get_CreatedTime();
    public DateTime get_CompletedTime();
    public string get_Input();
    public string get_Output();
    public FailureDetails get_FailureDetails();
    [CompilerGeneratedAttribute]
internal Exception get_Exception();
    [CompilerGeneratedAttribute]
internal void set_Exception(Exception value);
    [NullableContextAttribute("1")]
public string get_Name();
    [NullableContextAttribute("1")]
public string get_Version();
    public IDictionary`2<string, string> get_Tags();
    public OrchestrationStatus get_OrchestrationStatus();
    public OrchestrationInstance get_OrchestrationInstance();
    public ParentInstance get_ParentInstance();
    public bool get_IsValid();
    [CompilerGeneratedAttribute]
internal LogHelper get_LogHelper();
    [CompilerGeneratedAttribute]
internal void set_LogHelper(LogHelper value);
    [NullableContextAttribute("1")]
public void AddEvent(HistoryEvent historyEvent);
    [NullableContextAttribute("1")]
private ExecutionStartedEvent GetExecutionStartedEventOrThrow();
    [NullableContextAttribute("1")]
private void AddEvent(HistoryEvent historyEvent, bool isNewEvent);
    [NullableContextAttribute("1")]
private bool IsDuplicateEvent(HistoryEvent historyEvent);
    [NullableContextAttribute("1")]
private void SetMarkerEvents(HistoryEvent historyEvent);
    [NullableContextAttribute("1")]
public OrchestrationRuntimeStateDump GetOrchestrationRuntimeStateDump();
    [NullableContextAttribute("1")]
private HistoryEvent GenerateAbridgedEvent(HistoryEvent evt);
}
public class DurableTask.Core.OrchestrationRuntimeStateDump : object {
    [CompilerGeneratedAttribute]
private int <EventCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewEventsCount>k__BackingField;
    public IList`1<HistoryEvent> Events;
    public IList`1<HistoryEvent> NewEvents;
    public int EventCount { get; public set; }
    public int NewEventsCount { get; public set; }
    [CompilerGeneratedAttribute]
public int get_EventCount();
    [CompilerGeneratedAttribute]
public void set_EventCount(int value);
    [CompilerGeneratedAttribute]
public int get_NewEventsCount();
    [CompilerGeneratedAttribute]
public void set_NewEventsCount(int value);
}
internal class DurableTask.Core.OrchestrationSessionState : object {
    [CompilerGeneratedAttribute]
private IList`1<HistoryEvent> <Events>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobKey>k__BackingField;
    public IList`1<HistoryEvent> Events { get; public set; }
    public string BlobKey { get; public set; }
    public OrchestrationSessionState(IList`1<HistoryEvent> events);
    public OrchestrationSessionState(string blobKey);
    [CompilerGeneratedAttribute]
public IList`1<HistoryEvent> get_Events();
    [CompilerGeneratedAttribute]
public void set_Events(IList`1<HistoryEvent> value);
    [CompilerGeneratedAttribute]
public string get_BlobKey();
    [CompilerGeneratedAttribute]
public void set_BlobKey(string value);
}
[DataContractAttribute]
public class DurableTask.Core.OrchestrationState : object {
    [DataMemberAttribute]
public DateTime CompletedTime;
    [DataMemberAttribute]
public long CompressedSize;
    [DataMemberAttribute]
public DateTime CreatedTime;
    [DataMemberAttribute]
public string Input;
    [DataMemberAttribute]
public DateTime LastUpdatedTime;
    [DataMemberAttribute]
public string Name;
    [DataMemberAttribute]
public OrchestrationInstance OrchestrationInstance;
    [DataMemberAttribute]
public OrchestrationStatus OrchestrationStatus;
    [DataMemberAttribute]
public string Output;
    [DataMemberAttribute]
public ParentInstance ParentInstance;
    [DataMemberAttribute]
public long Size;
    [DataMemberAttribute]
public string Status;
    [DataMemberAttribute]
public IDictionary`2<string, string> Tags;
    [DataMemberAttribute]
public string Version;
    [DataMemberAttribute]
public Nullable`1<int> Generation;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ScheduledStartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private FailureDetails <FailureDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionDataObject <ExtensionData>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<DateTime> ScheduledStartTime { get; public set; }
    [DataMemberAttribute]
public FailureDetails FailureDetails { get; public set; }
    public ExtensionDataObject ExtensionData { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ScheduledStartTime();
    [CompilerGeneratedAttribute]
public void set_ScheduledStartTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public FailureDetails get_FailureDetails();
    [CompilerGeneratedAttribute]
public void set_FailureDetails(FailureDetails value);
    public OrchestrationState ClearFieldsImmutably(bool clearInput, bool clearOutput);
    [CompilerGeneratedAttribute]
public sealed virtual ExtensionDataObject get_ExtensionData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtensionData(ExtensionDataObject value);
}
public class DurableTask.Core.OrchestrationStateInstanceFilter : OrchestrationStateQueryFilter {
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StartsWith>k__BackingField;
    public string InstanceId { get; public set; }
    public string ExecutionId { get; public set; }
    public bool StartsWith { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_ExecutionId();
    [CompilerGeneratedAttribute]
public void set_ExecutionId(string value);
    [CompilerGeneratedAttribute]
public bool get_StartsWith();
    [CompilerGeneratedAttribute]
public void set_StartsWith(bool value);
}
public class DurableTask.Core.OrchestrationStateNameVersionFilter : OrchestrationStateQueryFilter {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Name { get; public set; }
    public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
public class DurableTask.Core.OrchestrationStateQuery : object {
    private static Dictionary`2<Type, int> FilterPrecedenceMap;
    [CompilerGeneratedAttribute]
private IDictionary`2<Type, OrchestrationStateQueryFilter> <FilterMap>k__BackingField;
    public IDictionary`2<Type, OrchestrationStateQueryFilter> FilterMap { get; private set; }
    private static OrchestrationStateQuery();
    [CompilerGeneratedAttribute]
public IDictionary`2<Type, OrchestrationStateQueryFilter> get_FilterMap();
    [CompilerGeneratedAttribute]
private void set_FilterMap(IDictionary`2<Type, OrchestrationStateQueryFilter> value);
    public Tuple`2<OrchestrationStateQueryFilter, IEnumerable`1<OrchestrationStateQueryFilter>> GetFilters();
    private int SafeGetFilterPrecedence(OrchestrationStateQueryFilter filter);
    public OrchestrationStateQuery AddInstanceFilter(string instanceId);
    public OrchestrationStateQuery AddInstanceFilter(string instanceId, string executionId);
    public OrchestrationStateQuery AddInstanceFilter(string instanceId, bool startsWith);
    public OrchestrationStateQuery AddNameVersionFilter(string name);
    public OrchestrationStateQuery AddNameVersionFilter(string name, string version);
    public OrchestrationStateQuery AddStatusFilter(OrchestrationStatus status);
    public OrchestrationStateQuery AddStatusFilter(OrchestrationStatus status, FilterComparisonType comparisonType);
    public OrchestrationStateQuery AddTimeRangeFilter(DateTime startTime, DateTime endTime, OrchestrationStateTimeRangeFilterType filterType);
}
public abstract class DurableTask.Core.OrchestrationStateQueryFilter : object {
}
public class DurableTask.Core.OrchestrationStateQuerySegment : object {
    public string ContinuationToken;
    public IEnumerable`1<OrchestrationState> Results;
}
public class DurableTask.Core.OrchestrationStateStatusFilter : OrchestrationStateQueryFilter {
    [CompilerGeneratedAttribute]
private OrchestrationStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private FilterComparisonType <ComparisonType>k__BackingField;
    public OrchestrationStatus Status { get; public set; }
    public FilterComparisonType ComparisonType { get; public set; }
    [CompilerGeneratedAttribute]
public OrchestrationStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(OrchestrationStatus value);
    [CompilerGeneratedAttribute]
public FilterComparisonType get_ComparisonType();
    [CompilerGeneratedAttribute]
public void set_ComparisonType(FilterComparisonType value);
}
public class DurableTask.Core.OrchestrationStateTimeRangeFilter : OrchestrationStateQueryFilter {
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private OrchestrationStateTimeRangeFilterType <FilterType>k__BackingField;
    public DateTime StartTime { get; public set; }
    public DateTime EndTime { get; public set; }
    public OrchestrationStateTimeRangeFilterType FilterType { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(DateTime value);
    [CompilerGeneratedAttribute]
public OrchestrationStateTimeRangeFilterType get_FilterType();
    [CompilerGeneratedAttribute]
public void set_FilterType(OrchestrationStateTimeRangeFilterType value);
}
public enum DurableTask.Core.OrchestrationStateTimeRangeFilterType : Enum {
    public int value__;
    public static OrchestrationStateTimeRangeFilterType OrchestrationCreatedTimeFilter;
    public static OrchestrationStateTimeRangeFilterType OrchestrationCompletedTimeFilter;
    public static OrchestrationStateTimeRangeFilterType OrchestrationLastUpdatedTimeFilter;
}
public enum DurableTask.Core.OrchestrationStatus : Enum {
    public int value__;
    public static OrchestrationStatus Running;
    public static OrchestrationStatus Completed;
    public static OrchestrationStatus ContinuedAsNew;
    public static OrchestrationStatus Failed;
    public static OrchestrationStatus Canceled;
    public static OrchestrationStatus Terminated;
    public static OrchestrationStatus Pending;
    public static OrchestrationStatus Suspended;
}
public static class DurableTask.Core.OrchestrationTags : object {
    public static string FireAndForget;
    internal static bool IsTaggedAsFireAndForget(IDictionary`2<string, string> tags);
    internal static IDictionary`2<string, string> MergeTags(IDictionary`2<string, string> newTags, IDictionary`2<string, string> existingTags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DurableTask.Core.OrchestratorExecutionResult : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<OrchestratorAction> <Actions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CustomStatus>k__BackingField;
    [JsonPropertyAttribute("actions")]
public IEnumerable`1<OrchestratorAction> Actions { get; public set; }
    [NullableAttribute("2")]
[JsonPropertyAttribute("customStatus")]
public string CustomStatus { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<OrchestratorAction> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(IEnumerable`1<OrchestratorAction> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CustomStatus();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CustomStatus(string value);
    public static OrchestratorExecutionResult ForFailure(string message, Exception e);
    public static OrchestratorExecutionResult ForFailure(string message, string details);
}
[DataContractAttribute]
public class DurableTask.Core.ParentInstance : object {
    [DataMemberAttribute]
public string Name;
    [DataMemberAttribute]
public OrchestrationInstance OrchestrationInstance;
    [DataMemberAttribute]
public int TaskScheduleId;
    [DataMemberAttribute]
public string Version;
    [CompilerGeneratedAttribute]
private ExtensionDataObject <ExtensionData>k__BackingField;
    public ExtensionDataObject ExtensionData { get; public set; }
    internal ParentInstance Clone();
    [CompilerGeneratedAttribute]
public sealed virtual ExtensionDataObject get_ExtensionData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtensionData(ExtensionDataObject value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DurableTask.Core.PurgeInstanceFilter : object {
    [CompilerGeneratedAttribute]
private DateTime <CreatedTimeFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedTimeTo>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<OrchestrationStatus> <RuntimeStatus>k__BackingField;
    public DateTime CreatedTimeFrom { get; }
    public Nullable`1<DateTime> CreatedTimeTo { get; }
    public IEnumerable`1<OrchestrationStatus> RuntimeStatus { get; }
    public PurgeInstanceFilter(DateTime createdTimeFrom, Nullable`1<DateTime> createdTimeTo, IEnumerable`1<OrchestrationStatus> runtimeStatus);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedTimeFrom();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CreatedTimeTo();
    [CompilerGeneratedAttribute]
public IEnumerable`1<OrchestrationStatus> get_RuntimeStatus();
}
public class DurableTask.Core.PurgeResult : object {
    [CompilerGeneratedAttribute]
private int <DeletedInstanceCount>k__BackingField;
    public int DeletedInstanceCount { get; }
    public PurgeResult(int deletedInstanceCount);
    [CompilerGeneratedAttribute]
public int get_DeletedInstanceCount();
}
public interface DurableTask.Core.Query.IOrchestrationServiceQueryClient {
    public abstract virtual Task`1<OrchestrationQueryResult> GetOrchestrationWithQueryAsync(OrchestrationQuery query, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class DurableTask.Core.Query.OrchestrationQuery : object {
    [CompilerGeneratedAttribute]
private ICollection`1<OrchestrationStatus> <RuntimeStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedTimeFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedTimeTo>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ICollection`1<string> <TaskHubNames>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceIdPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FetchInputsAndOutputs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeEntities>k__BackingField;
    public ICollection`1<OrchestrationStatus> RuntimeStatus { get; public set; }
    public Nullable`1<DateTime> CreatedTimeFrom { get; public set; }
    public Nullable`1<DateTime> CreatedTimeTo { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<string> TaskHubNames { get; public set; }
    public int PageSize { get; public set; }
    public string ContinuationToken { get; public set; }
    public string InstanceIdPrefix { get; public set; }
    public bool FetchInputsAndOutputs { get; public set; }
    public bool ExcludeEntities { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<OrchestrationStatus> get_RuntimeStatus();
    [CompilerGeneratedAttribute]
public void set_RuntimeStatus(ICollection`1<OrchestrationStatus> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CreatedTimeFrom();
    [CompilerGeneratedAttribute]
public void set_CreatedTimeFrom(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CreatedTimeTo();
    [CompilerGeneratedAttribute]
public void set_CreatedTimeTo(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_TaskHubNames();
    [CompilerGeneratedAttribute]
public void set_TaskHubNames(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceIdPrefix();
    [CompilerGeneratedAttribute]
public void set_InstanceIdPrefix(string value);
    [CompilerGeneratedAttribute]
public bool get_FetchInputsAndOutputs();
    [CompilerGeneratedAttribute]
public void set_FetchInputsAndOutputs(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeEntities();
    [CompilerGeneratedAttribute]
public void set_ExcludeEntities(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DurableTask.Core.Query.OrchestrationQueryResult : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<OrchestrationState> <OrchestrationState>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    public IReadOnlyCollection`1<OrchestrationState> OrchestrationState { get; }
    [NullableAttribute("2")]
public string ContinuationToken { get; }
    public OrchestrationQueryResult(IReadOnlyCollection`1<OrchestrationState> orchestrationState, string continuationToken);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<OrchestrationState> get_OrchestrationState();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ContinuationToken();
}
public class DurableTask.Core.ReflectionBasedTaskActivity : TaskActivity {
    private DataConverter dataConverter;
    private Type[] genericArguments;
    [CompilerGeneratedAttribute]
private object <ActivityObject>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    public DataConverter DataConverter { get; public set; }
    public object ActivityObject { get; private set; }
    public MethodInfo MethodInfo { get; private set; }
    public ReflectionBasedTaskActivity(object activityObject, MethodInfo methodInfo);
    public DataConverter get_DataConverter();
    public void set_DataConverter(DataConverter value);
    [CompilerGeneratedAttribute]
public object get_ActivityObject();
    [CompilerGeneratedAttribute]
private void set_ActivityObject(object value);
    [CompilerGeneratedAttribute]
public MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
private void set_MethodInfo(MethodInfo value);
    public virtual string Run(TaskContext context, string input);
    [AsyncStateMachineAttribute("DurableTask.Core.ReflectionBasedTaskActivity/<RunAsync>d__15")]
public virtual Task`1<string> RunAsync(TaskContext context, string input);
    public virtual object InvokeActivity(Object[] inputParameters);
    public virtual object InvokeActivity(Object[] inputParameters, Type[] genericTypeParameters);
    private string MethodInfoString();
    private Type[] GetGenericTypeArguments(JArray jArray);
    private Object[] GetInputParameters(JArray jArray, int parameterCount, ParameterInfo[] methodParameters, Type[] genericArguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DurableTask.Core.RetryInterceptor`1 : object {
    private OrchestrationContext context;
    private Func`1<Task`1<T>> retryCall;
    private RetryOptions retryOptions;
    public RetryInterceptor`1(OrchestrationContext context, RetryOptions retryOptions, Func`1<Task`1<T>> retryCall);
    [AsyncStateMachineAttribute("DurableTask.Core.RetryInterceptor`1/<Invoke>d__4")]
public Task`1<T> Invoke();
    private TimeSpan ComputeNextDelay(int attempt, DateTime firstAttempt, Exception failure);
}
public class DurableTask.Core.RetryOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <FirstRetryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxRetryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private double <BackoffCoefficient>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxNumberOfAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Exception, bool> <Handle>k__BackingField;
    public TimeSpan FirstRetryInterval { get; public set; }
    public TimeSpan MaxRetryInterval { get; public set; }
    public double BackoffCoefficient { get; public set; }
    public TimeSpan RetryTimeout { get; public set; }
    public int MaxNumberOfAttempts { get; public set; }
    public Func`2<Exception, bool> Handle { get; public set; }
    public RetryOptions(TimeSpan firstRetryInterval, int maxNumberOfAttempts);
    [CompilerGeneratedAttribute]
public TimeSpan get_FirstRetryInterval();
    [CompilerGeneratedAttribute]
public void set_FirstRetryInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxRetryInterval();
    [CompilerGeneratedAttribute]
public void set_MaxRetryInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public double get_BackoffCoefficient();
    [CompilerGeneratedAttribute]
public void set_BackoffCoefficient(double value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RetryTimeout();
    [CompilerGeneratedAttribute]
public void set_RetryTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_MaxNumberOfAttempts();
    [CompilerGeneratedAttribute]
public void set_MaxNumberOfAttempts(int value);
    [CompilerGeneratedAttribute]
public Func`2<Exception, bool> get_Handle();
    [CompilerGeneratedAttribute]
public void set_Handle(Func`2<Exception, bool> value);
}
internal class DurableTask.Core.RetryProxy : object {
    private OrchestrationContext context;
    private RetryOptions retryOptions;
    public RetryProxy(OrchestrationContext context, RetryOptions retryOptions);
    public sealed virtual void Intercept(IInvocation invocation);
    [AsyncStateMachineAttribute("DurableTask.Core.RetryProxy/<InvokeWithRetry>d__4`1")]
private Task`1<TReturnType> InvokeWithRetry(IInvocation invocation);
}
internal class DurableTask.Core.ScheduleProxy : object {
    private OrchestrationContext context;
    private bool useFullyQualifiedMethodNames;
    public ScheduleProxy(OrchestrationContext context);
    public ScheduleProxy(OrchestrationContext context, bool useFullyQualifiedMethodNames);
    public sealed virtual void Intercept(IInvocation invocation);
    protected virtual string NormalizeMethodName(MethodInfo method);
}
internal class DurableTask.Core.ScheduleProxyV2 : ScheduleProxy {
    private string declaringTypeFullName;
    public ScheduleProxyV2(OrchestrationContext context, string declaringTypeFullName);
    protected virtual string NormalizeMethodName(MethodInfo method);
}
public abstract class DurableTask.Core.Serializing.DataConverter : object {
    public abstract virtual string Serialize(object value);
    public abstract virtual string Serialize(object value, bool formatted);
    public abstract virtual object Deserialize(string data, Type objectType);
    public T Deserialize(string data);
    internal string SerializeInternal(object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ObsoleteAttribute("Not for public consumption.")]
public class DurableTask.Core.Serializing.Internal.RawInput : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public RawInput(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
}
internal abstract class DurableTask.Core.Serializing.JsonCreationConverter`1 : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    protected abstract virtual T CreateObject(Type objectType, JObject jObject);
}
public class DurableTask.Core.Serializing.JsonDataConverter : DataConverter {
    public static JsonDataConverter Default;
    private JsonSerializer serializer;
    public JsonDataConverter(JsonSerializerSettings settings);
    private static JsonDataConverter();
    public virtual string Serialize(object value);
    public virtual string Serialize(object value, bool formatted);
    public virtual object Deserialize(string data, Type objectType);
}
[ComVisibleAttribute("False")]
public class DurableTask.Core.Serializing.PackageUpgradeSerializationBinder : DefaultSerializationBinder {
    private static Lazy`1<IDictionary`2<string, Type>> KnownTypes;
    private static string CurrentAssemblyName;
    private static ISet`1<string> UpgradeableAssemblyNames;
    private static PackageUpgradeSerializationBinder();
    public virtual Type BindToType(string assemblyName, string typeName);
}
public class DurableTask.Core.Serializing.RuntimeStateStreamConverter : object {
    [AsyncStateMachineAttribute("DurableTask.Core.Serializing.RuntimeStateStreamConverter/<OrchestrationRuntimeStateToRawStream>d__0")]
public static Task`1<Stream> OrchestrationRuntimeStateToRawStream(OrchestrationRuntimeState newOrchestrationRuntimeState, OrchestrationRuntimeState runtimeState, DataConverter dataConverter, bool shouldCompress, ISessionSettings serviceBusSessionSettings, IOrchestrationServiceBlobStore orchestrationServiceBlobStore, string sessionId);
    [AsyncStateMachineAttribute("DurableTask.Core.Serializing.RuntimeStateStreamConverter/<CreateStreamForExternalStorageAsync>d__1")]
private static Task`1<Stream> CreateStreamForExternalStorageAsync(bool shouldCompress, IOrchestrationServiceBlobStore orchestrationServiceBlobStore, string sessionId, DataConverter dataConverter, Stream compressedState);
    [AsyncStateMachineAttribute("DurableTask.Core.Serializing.RuntimeStateStreamConverter/<RawStreamToRuntimeState>d__2")]
public static Task`1<OrchestrationRuntimeState> RawStreamToRuntimeState(Stream rawSessionStream, string sessionId, IOrchestrationServiceBlobStore orchestrationServiceBlobStore, DataConverter dataConverter);
    private static OrchestrationRuntimeState GetOrCreateInstanceState(Stream stateStream, string sessionId, DataConverter dataConverter, String& blobKey);
    private static OrchestrationRuntimeState DeserializeToRuntimeStateWithFallback(string serializedState, DataConverter dataConverter, string sessionId, String& blobKey);
}
public class DurableTask.Core.Settings.CompressionSettings : ValueType {
    [CompilerGeneratedAttribute]
private CompressionStyle <Style>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThresholdInBytes>k__BackingField;
    public CompressionStyle Style { get; public set; }
    public int ThresholdInBytes { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public CompressionStyle get_Style();
    [CompilerGeneratedAttribute]
public void set_Style(CompressionStyle value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_ThresholdInBytes();
    [CompilerGeneratedAttribute]
public void set_ThresholdInBytes(int value);
}
public class DurableTask.Core.Settings.CorrelationSettings : object {
    [CompilerGeneratedAttribute]
private Protocol <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDistributedTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private static CorrelationSettings <Current>k__BackingField;
    public Protocol Protocol { get; public set; }
    public bool EnableDistributedTracing { get; public set; }
    public static CorrelationSettings Current { get; public set; }
    private static CorrelationSettings();
    [CompilerGeneratedAttribute]
public Protocol get_Protocol();
    [CompilerGeneratedAttribute]
public void set_Protocol(Protocol value);
    [CompilerGeneratedAttribute]
public bool get_EnableDistributedTracing();
    [CompilerGeneratedAttribute]
public void set_EnableDistributedTracing(bool value);
    [CompilerGeneratedAttribute]
public static CorrelationSettings get_Current();
    [CompilerGeneratedAttribute]
public static void set_Current(CorrelationSettings value);
}
public interface DurableTask.Core.Settings.ISessionSettings {
    public int SessionMaxSizeInBytes { get; public set; }
    public int SessionOverflowThresholdInBytes { get; public set; }
    public abstract virtual int get_SessionMaxSizeInBytes();
    public abstract virtual void set_SessionMaxSizeInBytes(int value);
    public abstract virtual int get_SessionOverflowThresholdInBytes();
    public abstract virtual void set_SessionOverflowThresholdInBytes(int value);
}
public enum DurableTask.Core.Settings.Protocol : Enum {
    public int value__;
    public static Protocol W3CTraceContext;
    public static Protocol HttpCorrelationProtocol;
}
public class DurableTask.Core.Settings.TaskActivityDispatcherSettings : object {
    [CompilerGeneratedAttribute]
private int <TransientErrorBackOffSecs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NonTransientErrorBackOffSecs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DispatcherCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxConcurrentActivities>k__BackingField;
    public int TransientErrorBackOffSecs { get; public set; }
    public int NonTransientErrorBackOffSecs { get; public set; }
    public int DispatcherCount { get; public set; }
    public int MaxConcurrentActivities { get; public set; }
    [CompilerGeneratedAttribute]
public int get_TransientErrorBackOffSecs();
    [CompilerGeneratedAttribute]
public void set_TransientErrorBackOffSecs(int value);
    [CompilerGeneratedAttribute]
public int get_NonTransientErrorBackOffSecs();
    [CompilerGeneratedAttribute]
public void set_NonTransientErrorBackOffSecs(int value);
    [CompilerGeneratedAttribute]
public int get_DispatcherCount();
    [CompilerGeneratedAttribute]
public void set_DispatcherCount(int value);
    [CompilerGeneratedAttribute]
public int get_MaxConcurrentActivities();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrentActivities(int value);
    internal TaskActivityDispatcherSettings Clone();
}
public class DurableTask.Core.Settings.TaskOrchestrationDispatcherSettings : object {
    [CompilerGeneratedAttribute]
private int <TransientErrorBackOffSecs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NonTransientErrorBackOffSecs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DispatcherCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxConcurrentOrchestrations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CompressOrchestrationState>k__BackingField;
    [CompilerGeneratedAttribute]
private BehaviorOnContinueAsNew <EventBehaviourForContinueAsNew>k__BackingField;
    public int TransientErrorBackOffSecs { get; public set; }
    public int NonTransientErrorBackOffSecs { get; public set; }
    public int DispatcherCount { get; public set; }
    public int MaxConcurrentOrchestrations { get; public set; }
    public bool CompressOrchestrationState { get; public set; }
    public BehaviorOnContinueAsNew EventBehaviourForContinueAsNew { get; public set; }
    [CompilerGeneratedAttribute]
public int get_TransientErrorBackOffSecs();
    [CompilerGeneratedAttribute]
public void set_TransientErrorBackOffSecs(int value);
    [CompilerGeneratedAttribute]
public int get_NonTransientErrorBackOffSecs();
    [CompilerGeneratedAttribute]
public void set_NonTransientErrorBackOffSecs(int value);
    [CompilerGeneratedAttribute]
public int get_DispatcherCount();
    [CompilerGeneratedAttribute]
public void set_DispatcherCount(int value);
    [CompilerGeneratedAttribute]
public int get_MaxConcurrentOrchestrations();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrentOrchestrations(int value);
    [CompilerGeneratedAttribute]
public bool get_CompressOrchestrationState();
    [CompilerGeneratedAttribute]
public void set_CompressOrchestrationState(bool value);
    [CompilerGeneratedAttribute]
public BehaviorOnContinueAsNew get_EventBehaviourForContinueAsNew();
    [CompilerGeneratedAttribute]
public void set_EventBehaviourForContinueAsNew(BehaviorOnContinueAsNew value);
    internal TaskOrchestrationDispatcherSettings Clone();
}
public class DurableTask.Core.Settings.TrackingDispatcherSettings : object {
    [CompilerGeneratedAttribute]
private int <TransientErrorBackOffSecs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NonTransientErrorBackOffSecs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DispatcherCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxConcurrentTrackingSessions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrackHistoryEvents>k__BackingField;
    public int TransientErrorBackOffSecs { get; public set; }
    public int NonTransientErrorBackOffSecs { get; public set; }
    public int DispatcherCount { get; public set; }
    public int MaxConcurrentTrackingSessions { get; public set; }
    public bool TrackHistoryEvents { get; public set; }
    [CompilerGeneratedAttribute]
public int get_TransientErrorBackOffSecs();
    [CompilerGeneratedAttribute]
public void set_TransientErrorBackOffSecs(int value);
    [CompilerGeneratedAttribute]
public int get_NonTransientErrorBackOffSecs();
    [CompilerGeneratedAttribute]
public void set_NonTransientErrorBackOffSecs(int value);
    [CompilerGeneratedAttribute]
public int get_DispatcherCount();
    [CompilerGeneratedAttribute]
public void set_DispatcherCount(int value);
    [CompilerGeneratedAttribute]
public int get_MaxConcurrentTrackingSessions();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrentTrackingSessions(int value);
    [CompilerGeneratedAttribute]
public bool get_TrackHistoryEvents();
    [CompilerGeneratedAttribute]
public void set_TrackHistoryEvents(bool value);
    internal TrackingDispatcherSettings Clone();
}
[ExtensionAttribute]
public static class DurableTask.Core.StackExtensions : object {
    [ExtensionAttribute]
public static Stack`1<T> Clone(Stack`1<T> original);
}
[ObsoleteAttribute("This has been Replaced by a combination of the HistoryStateEvent and TaskMessage")]
[DataContractAttribute]
public class DurableTask.Core.StateMessage : object {
    [DataMemberAttribute]
public OrchestrationState State;
}
public class DurableTask.Core.Stats.Counter : object {
    private long counterValue;
    public long Value { get; }
    public long get_Value();
    public void Increment();
    public void Increment(long value);
    public void Decrement();
    public long Reset();
    public virtual string ToString();
}
internal class DurableTask.Core.SynchronousTaskScheduler : TaskScheduler {
    public int MaximumConcurrencyLevel { get; }
    public virtual int get_MaximumConcurrencyLevel();
    protected virtual void QueueTask(Task task);
    protected virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    protected virtual IEnumerable`1<Task> GetScheduledTasks();
}
public abstract class DurableTask.Core.TaskActivity : object {
    public abstract virtual string Run(TaskContext context, string input);
    public virtual Task`1<string> RunAsync(TaskContext context, string input);
}
public abstract class DurableTask.Core.TaskActivity`2 : AsyncTaskActivity`2<TInput, TResult> {
    protected abstract virtual TResult Execute(TaskContext context, TInput input);
    protected virtual Task`1<TResult> ExecuteAsync(TaskContext context, TInput input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DurableTask.Core.TaskActivityDispatcher : object {
    private INameVersionObjectManager`1<TaskActivity> objectManager;
    private WorkItemDispatcher`1<TaskActivityWorkItem> dispatcher;
    private IOrchestrationService orchestrationService;
    private DispatchMiddlewarePipeline dispatchPipeline;
    private LogHelper logHelper;
    private ErrorPropagationMode errorPropagationMode;
    [CompilerGeneratedAttribute]
private bool <IncludeDetails>k__BackingField;
    public bool IncludeDetails { get; public set; }
    internal TaskActivityDispatcher(IOrchestrationService orchestrationService, INameVersionObjectManager`1<TaskActivity> objectManager, DispatchMiddlewarePipeline dispatchPipeline, LogHelper logHelper, ErrorPropagationMode errorPropagationMode);
    [CompilerGeneratedAttribute]
public bool get_IncludeDetails();
    [CompilerGeneratedAttribute]
public void set_IncludeDetails(bool value);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskActivityDispatcher/<StartAsync>d__11")]
public Task StartAsync();
    [AsyncStateMachineAttribute("DurableTask.Core.TaskActivityDispatcher/<StopAsync>d__12")]
public Task StopAsync(bool forced);
    private Task`1<TaskActivityWorkItem> OnFetchWorkItemAsync(TimeSpan receiveTimeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskActivityDispatcher/<OnProcessWorkItemAsync>d__14")]
private Task OnProcessWorkItemAsync(TaskActivityWorkItem workItem);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskActivityDispatcher/<RenewUntil>d__15")]
private Task RenewUntil(TaskActivityWorkItem workItem, CancellationToken cancellationToken);
    private DateTime AdjustRenewAt(DateTime renewAt);
}
public class DurableTask.Core.TaskActivityWorkItem : object {
    public string Id;
    public DateTime LockedUntilUtc;
    public TaskMessage TaskMessage;
    public TraceContextBase TraceContextBase;
}
public class DurableTask.Core.TaskContext : object {
    [CompilerGeneratedAttribute]
private OrchestrationInstance <OrchestrationInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorPropagationMode <ErrorPropagationMode>k__BackingField;
    public OrchestrationInstance OrchestrationInstance { get; private set; }
    internal ErrorPropagationMode ErrorPropagationMode { get; internal set; }
    public TaskContext(OrchestrationInstance orchestrationInstance);
    [CompilerGeneratedAttribute]
public OrchestrationInstance get_OrchestrationInstance();
    [CompilerGeneratedAttribute]
private void set_OrchestrationInstance(OrchestrationInstance value);
    [CompilerGeneratedAttribute]
internal ErrorPropagationMode get_ErrorPropagationMode();
    [CompilerGeneratedAttribute]
internal void set_ErrorPropagationMode(ErrorPropagationMode value);
}
public class DurableTask.Core.TaskEntityDispatcher : object {
    private INameVersionObjectManager`1<TaskEntity> objectManager;
    private IOrchestrationService orchestrationService;
    private IEntityOrchestrationService entityOrchestrationService;
    private WorkItemDispatcher`1<TaskOrchestrationWorkItem> dispatcher;
    private DispatchMiddlewarePipeline dispatchPipeline;
    private EntityBackendProperties entityBackendProperties;
    private LogHelper logHelper;
    private ErrorPropagationMode errorPropagationMode;
    private NonBlockingCountdownLock concurrentSessionLock;
    public EntityBackendProperties EntityBackendProperties { get; }
    internal TaskEntityDispatcher(IOrchestrationService orchestrationService, INameVersionObjectManager`1<TaskEntity> entityObjectManager, DispatchMiddlewarePipeline entityDispatchPipeline, LogHelper logHelper, ErrorPropagationMode errorPropagationMode);
    public EntityBackendProperties get_EntityBackendProperties();
    [AsyncStateMachineAttribute("DurableTask.Core.TaskEntityDispatcher/<StartAsync>d__12")]
public Task StartAsync();
    [AsyncStateMachineAttribute("DurableTask.Core.TaskEntityDispatcher/<StopAsync>d__13")]
public Task StopAsync(bool forced);
    protected Task`1<TaskOrchestrationWorkItem> OnFetchWorkItemAsync(TimeSpan receiveTimeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskEntityDispatcher/<OnProcessWorkItemSessionAsync>d__15")]
private Task OnProcessWorkItemSessionAsync(TaskOrchestrationWorkItem workItem);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskEntityDispatcher/<OnProcessWorkItemAsync>d__17")]
protected Task`1<bool> OnProcessWorkItemAsync(TaskOrchestrationWorkItem workItem);
    private void ProcessLockRequest(WorkItemEffects effects, SchedulerState schedulerState, RequestMessage request);
    private string SerializeSchedulerStateForNextExecution(SchedulerState schedulerState);
    private void DetermineWork(OrchestrationRuntimeState runtimeState, SchedulerState& schedulerState, Work& batch);
    private void SendResultMessage(WorkItemEffects effects, RequestMessage request, OperationResult result);
    private void SendSignalMessage(WorkItemEffects effects, SchedulerState schedulerState, SendSignalOperationAction action);
    private void SendLockRequestMessage(WorkItemEffects effects, SchedulerState schedulerState, OrchestrationInstance target, RequestMessage message);
    private void SendLockResponseMessage(WorkItemEffects effects, OrchestrationInstance target, Guid requestId);
    private void SendScheduledSelfMessage(WorkItemEffects effects, RequestMessage request);
    private void SendContinueSelfMessage(WorkItemEffects effects);
    private void ProcessSendEventMessage(WorkItemEffects effects, OrchestrationInstance destination, string eventName, object eventContent);
    internal void ProcessSendStartMessage(WorkItemEffects effects, OrchestrationRuntimeState runtimeState, StartNewOrchestrationOperationAction action);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskEntityDispatcher/<ExecuteViaMiddlewareAsync>d__30")]
private Task`1<EntityBatchResult> ExecuteViaMiddlewareAsync(Work workToDoNow, OrchestrationInstance instance, string serializedEntityState);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DurableTask.Core.TaskHubClient : object {
    private DataConverter defaultConverter;
    private LogHelper logHelper;
    [CompilerGeneratedAttribute]
private IOrchestrationServiceClient <ServiceClient>k__BackingField;
    internal LogHelper LogHelper { get; }
    internal DataConverter DefaultConverter { get; }
    public IOrchestrationServiceClient ServiceClient { get; }
    public TaskHubClient(IOrchestrationServiceClient serviceClient);
    public TaskHubClient(IOrchestrationServiceClient serviceClient, JsonDataConverter dataConverter);
    [NullableContextAttribute("2")]
public TaskHubClient(IOrchestrationServiceClient serviceClient, DataConverter dataConverter, ILoggerFactory loggerFactory);
    internal LogHelper get_LogHelper();
    internal DataConverter get_DefaultConverter();
    [CompilerGeneratedAttribute]
public IOrchestrationServiceClient get_ServiceClient();
    public Task`1<OrchestrationInstance> CreateScheduledOrchestrationInstanceAsync(Type orchestrationType, object input, DateTime startAt);
    public Task`1<OrchestrationInstance> CreateScheduledOrchestrationInstanceAsync(Type orchestrationType, string instanceId, object input, DateTime startAt);
    public Task`1<OrchestrationInstance> CreateScheduledOrchestrationInstanceAsync(string name, string version, string instanceId, object input, DateTime startAt);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceAsync(Type orchestrationType, object input);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceAsync(Type orchestrationType, object input, DateTime startAt);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceAsync(Type orchestrationType, string instanceId, object input);
    [NullableContextAttribute("2")]
public Task`1<OrchestrationInstance> CreateOrchestrationInstanceAsync(Type orchestrationType, string instanceId, object input, OrchestrationStatus[] dedupeStatuses);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceAsync(string name, string version, object input);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceAsync(string name, string version, string instanceId, object input);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceAsync(string name, string version, string instanceId, object input, IDictionary`2<string, string> tags);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceAsync(string name, string version, string instanceId, object input, IDictionary`2<string, string> tags, OrchestrationStatus[] dedupeStatuses);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceAsync(string name, string version, string instanceId, object input, IDictionary`2<string, string> tags, OrchestrationStatus[] dedupeStatuses, DateTime startAt);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceWithRaisedEventAsync(Type orchestrationType, object orchestrationInput, string eventName, object eventData);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceWithRaisedEventAsync(Type orchestrationType, string instanceId, object orchestrationInput, string eventName, object eventData);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceWithRaisedEventAsync(Type orchestrationType, string instanceId, object orchestrationInput, OrchestrationStatus[] dedupeStatuses, string eventName, object eventData);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceWithRaisedEventAsync(string orchestrationName, string orchestrationVersion, string eventName, object eventData);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceWithRaisedEventAsync(string orchestrationName, string orchestrationVersion, object orchestrationInput, string eventName, object eventData);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceWithRaisedEventAsync(string orchestrationName, string orchestrationVersion, string instanceId, object orchestrationInput, string eventName, object eventData);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceWithRaisedEventAsync(string orchestrationName, string orchestrationVersion, string instanceId, object orchestrationInput, IDictionary`2<string, string> orchestrationTags, string eventName, object eventData);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceWithRaisedEventAsync(string orchestrationName, string orchestrationVersion, string instanceId, object orchestrationInput, IDictionary`2<string, string> orchestrationTags, OrchestrationStatus[] dedupeStatuses, string eventName, object eventData);
    public Task`1<OrchestrationInstance> CreateOrchestrationInstanceWithRaisedEventAsync(string orchestrationName, string orchestrationVersion, string instanceId, string eventName, object eventData);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("DurableTask.Core.TaskHubClient/<InternalCreateOrchestrationInstanceWithRaisedEventAsync>d__33")]
private Task`1<OrchestrationInstance> InternalCreateOrchestrationInstanceWithRaisedEventAsync(string orchestrationName, string orchestrationVersion, string orchestrationInstanceId, object orchestrationInput, IDictionary`2<string, string> orchestrationTags, OrchestrationStatus[] dedupeStatuses, string eventName, object eventData, Nullable`1<DateTime> startAt);
    private TraceContextBase CreateOrExtractRequestTraceContext(string eventName);
    [NullableContextAttribute("2")]
private void CreateAndTrackDependencyTelemetry(TraceContextBase requestTraceContext);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskHubClient/<RaiseEventAsync>d__36")]
public Task RaiseEventAsync(OrchestrationInstance orchestrationInstance, string eventName, object eventData);
    public Task TerminateInstanceAsync(OrchestrationInstance orchestrationInstance);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskHubClient/<TerminateInstanceAsync>d__38")]
public Task TerminateInstanceAsync(OrchestrationInstance orchestrationInstance, string reason);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskHubClient/<SuspendInstanceAsync>d__39")]
public Task SuspendInstanceAsync(OrchestrationInstance orchestrationInstance, string reason);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskHubClient/<ResumeInstanceAsync>d__40")]
public Task ResumeInstanceAsync(OrchestrationInstance orchestrationInstance, string reason);
    public Task`1<OrchestrationState> WaitForOrchestrationAsync(OrchestrationInstance orchestrationInstance, TimeSpan timeout);
    public Task`1<OrchestrationState> WaitForOrchestrationAsync(OrchestrationInstance orchestrationInstance, TimeSpan timeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskHubClient/<GetOrchestrationStateAsync>d__43")]
public Task`1<OrchestrationState> GetOrchestrationStateAsync(string instanceId);
    public Task`1<IList`1<OrchestrationState>> GetOrchestrationStateAsync(string instanceId, bool allExecutions);
    public Task`1<OrchestrationState> GetOrchestrationStateAsync(OrchestrationInstance instance);
    public Task`1<OrchestrationState> GetOrchestrationStateAsync(string instanceId, string executionId);
    public Task`1<string> GetOrchestrationHistoryAsync(OrchestrationInstance instance);
    public Task PurgeOrchestrationInstanceHistoryAsync(DateTime thresholdDateTimeUtc, OrchestrationStateTimeRangeFilterType timeRangeFilterType);
}
public class DurableTask.Core.TaskHubWorker : object {
    private INameVersionObjectManager`1<TaskActivity> activityManager;
    private INameVersionObjectManager`1<TaskOrchestration> orchestrationManager;
    private INameVersionObjectManager`1<TaskEntity> entityManager;
    private DispatchMiddlewarePipeline orchestrationDispatchPipeline;
    private DispatchMiddlewarePipeline entityDispatchPipeline;
    private DispatchMiddlewarePipeline activityDispatchPipeline;
    private bool dispatchEntitiesSeparately;
    private SemaphoreSlim slimLock;
    private LogHelper logHelper;
    [CompilerGeneratedAttribute]
private IOrchestrationService <orchestrationService>k__BackingField;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) isStarted;
    private TaskActivityDispatcher activityDispatcher;
    private TaskOrchestrationDispatcher orchestrationDispatcher;
    private TaskEntityDispatcher entityDispatcher;
    [CompilerGeneratedAttribute]
private ErrorPropagationMode <ErrorPropagationMode>k__BackingField;
    public IOrchestrationService orchestrationService { get; }
    public TaskOrchestrationDispatcher TaskOrchestrationDispatcher { get; }
    public TaskActivityDispatcher TaskActivityDispatcher { get; }
    public ErrorPropagationMode ErrorPropagationMode { get; public set; }
    public TaskHubWorker(IOrchestrationService orchestrationService);
    public TaskHubWorker(IOrchestrationService orchestrationService, ILoggerFactory loggerFactory);
    public TaskHubWorker(IOrchestrationService orchestrationService, INameVersionObjectManager`1<TaskOrchestration> orchestrationObjectManager, INameVersionObjectManager`1<TaskActivity> activityObjectManager);
    public TaskHubWorker(IOrchestrationService orchestrationService, INameVersionObjectManager`1<TaskOrchestration> orchestrationObjectManager, INameVersionObjectManager`1<TaskActivity> activityObjectManager, ILoggerFactory loggerFactory);
    public TaskHubWorker(IOrchestrationService orchestrationService, INameVersionObjectManager`1<TaskOrchestration> orchestrationObjectManager, INameVersionObjectManager`1<TaskActivity> activityObjectManager, INameVersionObjectManager`1<TaskEntity> entityObjectManager, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public IOrchestrationService get_orchestrationService();
    public TaskOrchestrationDispatcher get_TaskOrchestrationDispatcher();
    public TaskActivityDispatcher get_TaskActivityDispatcher();
    [CompilerGeneratedAttribute]
public ErrorPropagationMode get_ErrorPropagationMode();
    [CompilerGeneratedAttribute]
public void set_ErrorPropagationMode(ErrorPropagationMode value);
    public void AddOrchestrationDispatcherMiddleware(Func`3<DispatchMiddlewareContext, Func`1<Task>, Task> middleware);
    public void AddEntityDispatcherMiddleware(Func`3<DispatchMiddlewareContext, Func`1<Task>, Task> middleware);
    public void AddActivityDispatcherMiddleware(Func`3<DispatchMiddlewareContext, Func`1<Task>, Task> middleware);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskHubWorker/<StartAsync>d__32")]
public Task`1<TaskHubWorker> StartAsync();
    [AsyncStateMachineAttribute("DurableTask.Core.TaskHubWorker/<StopAsync>d__33")]
public Task StopAsync();
    [AsyncStateMachineAttribute("DurableTask.Core.TaskHubWorker/<StopAsync>d__34")]
public Task StopAsync(bool isForced);
    public TaskHubWorker AddTaskOrchestrations(Type[] taskOrchestrationTypes);
    public TaskHubWorker AddTaskOrchestrations(ObjectCreator`1[] taskOrchestrationCreators);
    public TaskHubWorker AddTaskEntities(Type[] taskEntityTypes);
    public TaskHubWorker AddTaskEntities(ObjectCreator`1[] taskEntityCreators);
    public TaskHubWorker AddTaskActivities(TaskActivity[] taskActivityObjects);
    public TaskHubWorker AddTaskActivities(Type[] taskActivityTypes);
    public TaskHubWorker AddTaskActivities(ObjectCreator`1[] taskActivityCreators);
    public TaskHubWorker AddTaskActivitiesFromInterface(T activities);
    public TaskHubWorker AddTaskActivitiesFromInterface(T activities, bool useFullyQualifiedMethodNames);
    public TaskHubWorker AddTaskActivitiesFromInterfaceV2(object activities);
    public TaskHubWorker AddTaskActivitiesFromInterface(Type interface, object activities, bool useFullyQualifiedMethodNames);
    public TaskHubWorker AddTaskActivitiesFromInterfaceV2(Type interface, object activities);
    public TaskHubWorker AddTaskActivitiesFromInterfaceOrClass(object activities, bool useFullyQualifiedMethodNames, bool includeInternalMethods);
    public TaskHubWorker AddTaskActivitiesFromInterfaceOrClass(Type interfaceOrClass, object activities, bool useFullyQualifiedMethodNames, bool includeInternalMethods);
    public sealed virtual void Dispose();
    private void ValidateActivitiesInterfaceType(Type interface, object activities);
}
[DataContractAttribute]
public class DurableTask.Core.TaskMessage : object {
    [CompilerGeneratedAttribute]
private HistoryEvent <Event>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SequenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private OrchestrationInstance <OrchestrationInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private OrchestrationExecutionContext <OrchestrationExecutionContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionDataObject <ExtensionData>k__BackingField;
    [DataMemberAttribute]
public HistoryEvent Event { get; public set; }
    [DataMemberAttribute]
public long SequenceNumber { get; public set; }
    [DataMemberAttribute]
public OrchestrationInstance OrchestrationInstance { get; public set; }
    [DataMemberAttribute]
public OrchestrationExecutionContext OrchestrationExecutionContext { get; public set; }
    public ExtensionDataObject ExtensionData { get; public set; }
    [CompilerGeneratedAttribute]
public HistoryEvent get_Event();
    [CompilerGeneratedAttribute]
public void set_Event(HistoryEvent value);
    [CompilerGeneratedAttribute]
public long get_SequenceNumber();
    [CompilerGeneratedAttribute]
public void set_SequenceNumber(long value);
    [CompilerGeneratedAttribute]
public OrchestrationInstance get_OrchestrationInstance();
    [CompilerGeneratedAttribute]
public void set_OrchestrationInstance(OrchestrationInstance value);
    [CompilerGeneratedAttribute]
public OrchestrationExecutionContext get_OrchestrationExecutionContext();
    [CompilerGeneratedAttribute]
public void set_OrchestrationExecutionContext(OrchestrationExecutionContext value);
    [CompilerGeneratedAttribute]
public sealed virtual ExtensionDataObject get_ExtensionData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtensionData(ExtensionDataObject value);
}
public abstract class DurableTask.Core.TaskOrchestration : object {
    public abstract virtual Task`1<string> Execute(OrchestrationContext context, string input);
    public abstract virtual void RaiseEvent(OrchestrationContext context, string name, string input);
    public abstract virtual string GetStatus();
}
public abstract class DurableTask.Core.TaskOrchestration`2 : TaskOrchestration`4<TResult, TInput, string, string> {
}
public abstract class DurableTask.Core.TaskOrchestration`4 : TaskOrchestration {
    [CompilerGeneratedAttribute]
private DataConverter <DataConverter>k__BackingField;
    public DataConverter DataConverter { get; protected set; }
    [CompilerGeneratedAttribute]
public DataConverter get_DataConverter();
    [CompilerGeneratedAttribute]
protected void set_DataConverter(DataConverter value);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskOrchestration`4/<Execute>d__5")]
public virtual Task`1<string> Execute(OrchestrationContext context, string input);
    public virtual void RaiseEvent(OrchestrationContext context, string name, string input);
    public virtual string GetStatus();
    public abstract virtual Task`1<TResult> RunTask(OrchestrationContext context, TInput input);
    public virtual void OnEvent(OrchestrationContext context, string name, TEvent input);
    public virtual TStatus OnGetStatus();
}
internal class DurableTask.Core.TaskOrchestrationContext : OrchestrationContext {
    private IDictionary`2<int, OpenTaskInfo> openTasks;
    private IDictionary`2<int, OrchestratorAction> orchestratorActionsMap;
    private OrchestrationCompleteOrchestratorAction continueAsNew;
    private bool executionCompletedOrTerminated;
    private int idCounter;
    private Queue`1<HistoryEvent> eventsWhileSuspended;
    private IDictionary`2<int, OrchestratorAction> suspendedActionsMap;
    [CompilerGeneratedAttribute]
private bool <IsSuspended>k__BackingField;
    public bool IsSuspended { get; private set; }
    public bool HasContinueAsNew { get; }
    public IEnumerable`1<OrchestratorAction> OrchestratorActions { get; }
    public bool HasOpenTasks { get; }
    public TaskOrchestrationContext(OrchestrationInstance orchestrationInstance, TaskScheduler taskScheduler, TaskOrchestrationEntityParameters entityParameters, ErrorPropagationMode errorPropagationMode);
    [CompilerGeneratedAttribute]
public bool get_IsSuspended();
    [CompilerGeneratedAttribute]
private void set_IsSuspended(bool value);
    public bool get_HasContinueAsNew();
    public void AddEventToNextIteration(HistoryEvent he);
    public IEnumerable`1<OrchestratorAction> get_OrchestratorActions();
    public bool get_HasOpenTasks();
    internal void ClearPendingActions();
    [AsyncStateMachineAttribute("DurableTask.Core.TaskOrchestrationContext/<ScheduleTask>d__20`1")]
public virtual Task`1<TResult> ScheduleTask(string name, string version, Object[] parameters);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskOrchestrationContext/<ScheduleTaskToWorker>d__21`1")]
public Task`1<TResult> ScheduleTaskToWorker(string name, string version, string taskList, Object[] parameters);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskOrchestrationContext/<ScheduleTaskInternal>d__22")]
public Task`1<object> ScheduleTaskInternal(string name, string version, string taskList, Type resultType, Object[] parameters);
    public virtual Task`1<T> CreateSubOrchestrationInstance(string name, string version, string instanceId, object input);
    public virtual Task`1<T> CreateSubOrchestrationInstance(string name, string version, string instanceId, object input, IDictionary`2<string, string> tags);
    public virtual Task`1<T> CreateSubOrchestrationInstance(string name, string version, object input);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskOrchestrationContext/<CreateSubOrchestrationInstanceCore>d__26`1")]
private Task`1<T> CreateSubOrchestrationInstanceCore(string name, string version, string instanceId, object input, IDictionary`2<string, string> tags);
    public virtual void SendEvent(OrchestrationInstance orchestrationInstance, string eventName, object eventData);
    public virtual void ContinueAsNew(object input);
    public virtual void ContinueAsNew(string newVersion, object input);
    private void ContinueAsNewCore(string newVersion, object input);
    public virtual Task`1<T> CreateTimer(DateTime fireAt, T state);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskOrchestrationContext/<CreateTimer>d__32`1")]
public virtual Task`1<T> CreateTimer(DateTime fireAt, T state, CancellationToken cancelToken);
    public void HandleTaskScheduledEvent(TaskScheduledEvent scheduledEvent);
    public void HandleTimerCreatedEvent(TimerCreatedEvent timerCreatedEvent);
    public void HandleSubOrchestrationCreatedEvent(SubOrchestrationInstanceCreatedEvent subOrchestrationCreateEvent);
    public void HandleEventSentEvent(EventSentEvent eventSentEvent);
    public void HandleEventRaisedEvent(EventRaisedEvent eventRaisedEvent, bool skipCarryOverEvents, TaskOrchestration taskOrchestration);
    public void HandleTaskCompletedEvent(TaskCompletedEvent completedEvent);
    public void HandleTaskFailedEvent(TaskFailedEvent failedEvent);
    public void HandleSubOrchestrationInstanceCompletedEvent(SubOrchestrationInstanceCompletedEvent completedEvent);
    public void HandleSubOrchestrationInstanceFailedEvent(SubOrchestrationInstanceFailedEvent failedEvent);
    public void HandleTimerFiredEvent(TimerFiredEvent timerFiredEvent);
    private void LogDuplicateEvent(string source, HistoryEvent historyEvent, int taskId);
    public void HandleExecutionTerminatedEvent(ExecutionTerminatedEvent terminatedEvent);
    public void CompleteOrchestration(string result);
    public void HandleEventWhileSuspended(HistoryEvent historyEvent);
    public void HandleExecutionSuspendedEvent(ExecutionSuspendedEvent suspendedEvent);
    public void HandleExecutionResumedEvent(ExecutionResumedEvent resumedEvent, Action`1<HistoryEvent> eventProcessor);
    public void FailOrchestration(Exception failure, OrchestrationRuntimeState runtimeState);
    public void CompleteOrchestration(string result, string details, OrchestrationStatus orchestrationStatus, FailureDetails failureDetails);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DurableTask.Core.TaskOrchestrationDispatcher : object {
    private static Task CompletedTask;
    private INameVersionObjectManager`1<TaskOrchestration> objectManager;
    private IOrchestrationService orchestrationService;
    private WorkItemDispatcher`1<TaskOrchestrationWorkItem> dispatcher;
    private DispatchMiddlewarePipeline dispatchPipeline;
    private LogHelper logHelper;
    private ErrorPropagationMode errorPropagationMode;
    private NonBlockingCountdownLock concurrentSessionLock;
    [NullableAttribute("2")]
private IEntityOrchestrationService entityOrchestrationService;
    [NullableAttribute("2")]
private EntityBackendProperties entityBackendProperties;
    [NullableAttribute("2")]
private TaskOrchestrationEntityParameters entityParameters;
    [CompilerGeneratedAttribute]
private bool <IncludeDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeParameters>k__BackingField;
    private static TimeSpan MinRenewalInterval;
    private static TimeSpan MaxRenewalInterval;
    public bool IncludeDetails { get; public set; }
    public bool IncludeParameters { get; public set; }
    internal TaskOrchestrationDispatcher(IOrchestrationService orchestrationService, INameVersionObjectManager`1<TaskOrchestration> objectManager, DispatchMiddlewarePipeline dispatchPipeline, LogHelper logHelper, ErrorPropagationMode errorPropagationMode);
    private static TaskOrchestrationDispatcher();
    [AsyncStateMachineAttribute("DurableTask.Core.TaskOrchestrationDispatcher/<StartAsync>d__12")]
public Task StartAsync();
    [AsyncStateMachineAttribute("DurableTask.Core.TaskOrchestrationDispatcher/<StopAsync>d__13")]
public Task StopAsync(bool forced);
    [CompilerGeneratedAttribute]
public bool get_IncludeDetails();
    [CompilerGeneratedAttribute]
public void set_IncludeDetails(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeParameters();
    [CompilerGeneratedAttribute]
public void set_IncludeParameters(bool value);
    protected Task`1<TaskOrchestrationWorkItem> OnFetchWorkItemAsync(TimeSpan receiveTimeout, CancellationToken cancellationToken);
    private void EnsureExecutionStartedIsFirst(IList`1<TaskMessage> batch);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskOrchestrationDispatcher/<OnProcessWorkItemSessionAsync>d__24")]
private Task OnProcessWorkItemSessionAsync(TaskOrchestrationWorkItem workItem);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskOrchestrationDispatcher/<OnProcessWorkItemAsync>d__25")]
protected Task`1<bool> OnProcessWorkItemAsync(TaskOrchestrationWorkItem workItem);
    private static OrchestrationExecutionContext GetOrchestrationExecutionContext(OrchestrationRuntimeState runtimeState);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskOrchestrationDispatcher/<RenewUntil>d__29")]
internal static Task RenewUntil(TaskOrchestrationWorkItem workItem, IOrchestrationService orchestrationService, LogHelper logHelper, string dispatcher, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskOrchestrationDispatcher/<ExecuteOrchestrationAsync>d__30")]
private Task`1<OrchestrationExecutionCursor> ExecuteOrchestrationAsync(OrchestrationRuntimeState runtimeState, TaskOrchestrationWorkItem workItem);
    [AsyncStateMachineAttribute("DurableTask.Core.TaskOrchestrationDispatcher/<ResumeOrchestrationAsync>d__31")]
private Task ResumeOrchestrationAsync(TaskOrchestrationWorkItem workItem);
    internal static bool ReconcileMessagesWithState(TaskOrchestrationWorkItem workItem, string dispatcher, ErrorPropagationMode errorPropagationMode, LogHelper logHelper);
    private TaskMessage ProcessWorkflowCompletedTaskDecision(OrchestrationCompleteOrchestratorAction completeOrchestratorAction, OrchestrationRuntimeState runtimeState, bool includeDetails, Boolean& continuedAsNew);
    private void ResetDistributedTraceActivity(OrchestrationRuntimeState runtimeState);
    private TaskMessage ProcessScheduleTaskDecision(ScheduleTaskOrchestratorAction scheduleTaskOrchestratorAction, OrchestrationRuntimeState runtimeState, bool includeParameters, Activity parentTraceActivity);
    private TaskMessage ProcessCreateTimerDecision(CreateTimerOrchestratorAction createTimerOrchestratorAction, OrchestrationRuntimeState runtimeState, bool isInternal);
    private TaskMessage ProcessCreateSubOrchestrationInstanceDecision(CreateSubOrchestrationAction createSubOrchestrationAction, OrchestrationRuntimeState runtimeState, bool includeParameters, Activity parentTraceActivity);
    private TaskMessage ProcessSendEventDecision(SendEventOrchestratorAction sendEventAction, OrchestrationRuntimeState runtimeState);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DurableTask.Core.TaskOrchestrationExecutor : object {
    private TaskOrchestrationContext context;
    private TaskScheduler decisionScheduler;
    private OrchestrationRuntimeState orchestrationRuntimeState;
    private TaskOrchestration taskOrchestration;
    private bool skipCarryOverEvents;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Task`1<string> result;
    internal bool IsCompleted { get; }
    public TaskOrchestrationExecutor(OrchestrationRuntimeState orchestrationRuntimeState, TaskOrchestration taskOrchestration, BehaviorOnContinueAsNew eventBehaviourForContinueAsNew, TaskOrchestrationEntityParameters entityParameters, ErrorPropagationMode errorPropagationMode);
    public TaskOrchestrationExecutor(OrchestrationRuntimeState orchestrationRuntimeState, TaskOrchestration taskOrchestration, BehaviorOnContinueAsNew eventBehaviourForContinueAsNew, ErrorPropagationMode errorPropagationMode);
    internal bool get_IsCompleted();
    public OrchestratorExecutionResult Execute();
    public OrchestratorExecutionResult ExecuteNewEvents();
    private OrchestratorExecutionResult ExecuteCore(IEnumerable`1<HistoryEvent> pastEvents, IEnumerable`1<HistoryEvent> newEvents);
    private void ProcessEvent(HistoryEvent historyEvent);
    [CompilerGeneratedAttribute]
private void <ExecuteCore>g__ProcessEvents|12_0(IEnumerable`1<HistoryEvent> events);
}
public class DurableTask.Core.TaskOrchestrationWorkItem : object {
    public string InstanceId;
    public OrchestrationRuntimeState OrchestrationRuntimeState;
    public DateTime LockedUntilUtc;
    public IList`1<TaskMessage> NewMessages;
    public IOrchestrationSession Session;
    public TraceContextBase TraceContext;
    public bool IsExtendedSession;
    internal OrchestrationExecutionCursor Cursor;
    public bool RestoreOriginalRuntimeStateDuringCompletion { get; }
    public virtual bool get_RestoreOriginalRuntimeStateDuringCompletion();
}
public enum DurableTask.Core.TelemetryType : Enum {
    public int value__;
    public static TelemetryType Request;
    public static TelemetryType Dependency;
}
public static class DurableTask.Core.TraceConstants : object {
    public static string Client;
    public static string Orchestrator;
    public static string Activity;
    public static string DependencyDefault;
}
public abstract class DurableTask.Core.TraceContextBase : object {
    private static JsonSerializer serializer;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TelemetryType <TelemetryType>k__BackingField;
    [CompilerGeneratedAttribute]
private Stack`1<TraceContextBase> <OrchestrationTraceContexts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private Activity <CurrentActivity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReplay>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonSerializerSettings <CustomJsonSerializerSettings>k__BackingField;
    public DateTimeOffset StartTime { get; public set; }
    public TelemetryType TelemetryType { get; public set; }
    public Stack`1<TraceContextBase> OrchestrationTraceContexts { get; public set; }
    public string OperationName { get; public set; }
    [JsonIgnoreAttribute]
internal Activity CurrentActivity { get; internal set; }
    [JsonIgnoreAttribute]
public bool IsReplay { get; public set; }
    [JsonIgnoreAttribute]
public TimeSpan Duration { get; }
    [JsonIgnoreAttribute]
private static JsonSerializerSettings CustomJsonSerializerSettings { get; }
    [JsonIgnoreAttribute]
public string SerializableTraceContext { get; }
    [JsonIgnoreAttribute]
public string TelemetryId { get; }
    [JsonIgnoreAttribute]
public string TelemetryContextOperationId { get; }
    [JsonIgnoreAttribute]
public string TelemetryContextOperationParentId { get; }
    private static TraceContextBase();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public TelemetryType get_TelemetryType();
    [CompilerGeneratedAttribute]
public void set_TelemetryType(TelemetryType value);
    [CompilerGeneratedAttribute]
public Stack`1<TraceContextBase> get_OrchestrationTraceContexts();
    [CompilerGeneratedAttribute]
public void set_OrchestrationTraceContexts(Stack`1<TraceContextBase> value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [CompilerGeneratedAttribute]
internal Activity get_CurrentActivity();
    [CompilerGeneratedAttribute]
internal void set_CurrentActivity(Activity value);
    [CompilerGeneratedAttribute]
public bool get_IsReplay();
    [CompilerGeneratedAttribute]
public void set_IsReplay(bool value);
    public abstract virtual TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
private static JsonSerializerSettings get_CustomJsonSerializerSettings();
    public string get_SerializableTraceContext();
    public abstract virtual string get_TelemetryId();
    public abstract virtual string get_TelemetryContextOperationId();
    public TraceContextBase GetCurrentOrchestrationRequestTraceContext();
    public abstract virtual string get_TelemetryContextOperationParentId();
    public abstract virtual void SetParentAndStart(TraceContextBase parentTraceContext);
    public abstract virtual void StartAsNew();
    public void Stop();
    public void SetActivityToCurrent();
    public static TraceContextBase Restore(string json);
}
public class DurableTask.Core.TraceContextFactory : object {
    [CompilerGeneratedAttribute]
private static TraceContextBase <Empty>k__BackingField;
    public static TraceContextBase Empty { get; }
    private static TraceContextFactory();
    public static TraceContextBase Create(string operationName);
    public static TraceContextBase Create(Activity activity);
    [CompilerGeneratedAttribute]
public static TraceContextBase get_Empty();
    private static ITraceContextFactory CreateFactory();
}
internal class DurableTask.Core.TraceParentObject : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceFlags>k__BackingField;
    public string Version { get; public set; }
    public string TraceId { get; public set; }
    public string SpanId { get; public set; }
    public string TraceFlags { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_TraceId();
    [CompilerGeneratedAttribute]
public void set_TraceId(string value);
    [CompilerGeneratedAttribute]
public string get_SpanId();
    [CompilerGeneratedAttribute]
public void set_SpanId(string value);
    [CompilerGeneratedAttribute]
public string get_TraceFlags();
    [CompilerGeneratedAttribute]
public void set_TraceFlags(string value);
    public static TraceParentObject Create(string traceParent);
}
internal enum DurableTask.Core.Tracing.ActivityStatusCode : Enum {
    public int value__;
    public static ActivityStatusCode Unset;
    public static ActivityStatusCode OK;
    public static ActivityStatusCode Error;
}
[EventSourceAttribute]
[ComVisibleAttribute("False")]
public class DurableTask.Core.Tracing.DefaultEventSource : EventSource {
    private static int TraceEventId;
    private static int DebugEventId;
    private static int InfoEventId;
    private static int WarningEventId;
    private static int ErrorEventId;
    private static int CriticalEventId;
    public static DefaultEventSource Log;
    private string processName;
    public bool IsTraceEnabled { get; }
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarningEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsCriticalEnabled { get; }
    private static DefaultEventSource();
    public bool get_IsTraceEnabled();
    public bool get_IsDebugEnabled();
    public bool get_IsInfoEnabled();
    public bool get_IsWarningEnabled();
    public bool get_IsErrorEnabled();
    public bool get_IsCriticalEnabled();
    [NonEventAttribute]
public void TraceEvent(TraceEventType eventLevel, string source, string instanceId, string executionId, string sessionId, string message, string eventType);
    [NonEventAttribute]
public void TraceEvent(TraceEventType eventLevel, string source, string instanceId, string executionId, string sessionId, Exception exception, string eventType);
    [NonEventAttribute]
public void Trace(string source, string instanceId, string executionId, string sessionId, string message, string eventType);
    [NonEventAttribute]
public void Trace(string source, string instanceId, string executionId, string sessionId, string message, Exception exception, string eventType);
    [EventAttribute("1")]
public void Trace(string source, string instanceId, string executionId, string sessionId, string message, string info, string eventType);
    [NonEventAttribute]
public void Debug(string source, string instanceId, string executionId, string sessionId, string message, string eventType);
    [NonEventAttribute]
public void Debug(string source, string instanceId, string executionId, string sessionId, string message, Exception exception, string eventType);
    [EventAttribute("2")]
public void Debug(string source, string instanceId, string executionId, string sessionId, string message, string info, string eventType);
    [NonEventAttribute]
public void Info(string source, string instanceId, string executionId, string sessionId, string message, string eventType);
    [NonEventAttribute]
public void Info(string source, string instanceId, string executionId, string sessionId, string message, Exception exception, string eventType);
    [EventAttribute("3")]
public void Info(string source, string instanceId, string executionId, string sessionId, string message, string info, string eventType);
    [NonEventAttribute]
public void Warning(string source, string instanceId, string executionId, string sessionId, string message, string eventType);
    [NonEventAttribute]
public void Warning(string source, string instanceId, string executionId, string sessionId, string message, Exception exception, string eventType);
    [EventAttribute("4")]
public void Warning(string source, string instanceId, string executionId, string sessionId, string message, string exception, string eventType);
    [NonEventAttribute]
public void Error(string source, string instanceId, string executionId, string sessionId, string message, string eventType);
    [NonEventAttribute]
public void Error(string source, string instanceId, string executionId, string sessionId, string message, Exception exception, string eventType);
    [EventAttribute("5")]
public void Error(string source, string instanceId, string executionId, string sessionId, string message, string exception, string eventType);
    [NonEventAttribute]
public void Critical(string source, string instanceId, string executionId, string sessionId, string message, string eventType);
    [NonEventAttribute]
public void Critical(string source, string instanceId, string executionId, string sessionId, string message, Exception exception, string eventType);
    [EventAttribute("6")]
public void Critical(string source, string instanceId, string executionId, string sessionId, string message, string exception, string eventType);
    [NonEventAttribute]
private void WriteEventInternal(int eventId, string source, string instanceId, string executionId, string sessionId, string message, string info, string eventType);
    private static void MakeSafe(String& value);
}
[ExtensionAttribute]
internal static class DurableTask.Core.Tracing.DiagnosticActivityExtensions : object {
    private static Action`2<Activity, string> s_setSpanId;
    private static Action`2<Activity, string> s_setId;
    private static Action`3<Activity, ActivityStatusCode, string> s_setStatus;
    private static DiagnosticActivityExtensions();
    [ExtensionAttribute]
public static void SetId(Activity activity, string id);
    [ExtensionAttribute]
public static void SetSpanId(Activity activity, string spanId);
    [ExtensionAttribute]
public static void SetStatus(Activity activity, ActivityStatusCode status, string description);
    private static Action`3<Activity, ActivityStatusCode, string> CreateSetStatus();
}
internal class DurableTask.Core.Tracing.DistributedTraceActivity : object {
    private static AsyncLocal`1<Activity> CurrentActivity;
    internal static Activity Current { get; internal set; }
    private static DistributedTraceActivity();
    internal static Activity get_Current();
    internal static void set_Current(Activity value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class DurableTask.Core.Tracing.DistributedTraceContext : object {
    private string traceState;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <TraceParent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ActivityStartTime>k__BackingField;
    [NullableAttribute("1")]
[DataMemberAttribute]
public string TraceParent { get; public set; }
    [DataMemberAttribute]
public string TraceState { get; public set; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string SpanId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> ActivityStartTime { get; public set; }
    [NullableContextAttribute("1")]
public DistributedTraceContext(string traceParent, string traceState);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_TraceParent();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_TraceParent(string value);
    public string get_TraceState();
    public void set_TraceState(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_SpanId();
    [CompilerGeneratedAttribute]
public void set_SpanId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ActivityStartTime();
    [CompilerGeneratedAttribute]
public void set_ActivityStartTime(Nullable`1<DateTimeOffset> value);
}
[ExtensionAttribute]
internal static class DurableTask.Core.Tracing.FieldInfoExtensionMethods : object {
    [ExtensionAttribute]
internal static Action`2<TTarget, TValue> CreateSetter(FieldInfo fieldInfo);
}
internal static class DurableTask.Core.Tracing.Schema : object {
}
internal class DurableTask.Core.Tracing.TraceActivityConstants : object {
    public static string Client;
    public static string Orchestration;
    public static string Activity;
    public static string Event;
    public static string Timer;
    public static string CreateOrchestration;
    public static string OrchestrationEvent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class DurableTask.Core.Tracing.TraceHelper : object {
    private static string Source;
    private static ActivitySource ActivityTraceSource;
    private static TraceHelper();
    internal static Activity StartActivityForNewOrchestration(ExecutionStartedEvent startEvent);
    [NullableContextAttribute("2")]
internal static Activity StartTraceActivityForOrchestrationExecution(ExecutionStartedEvent startEvent);
    internal static Activity StartTraceActivityForTaskExecution(TaskScheduledEvent scheduledEvent, OrchestrationInstance instance);
    [NullableContextAttribute("2")]
internal static Activity StartTraceActivityForSchedulingTask(OrchestrationInstance instance, TaskScheduledEvent taskScheduledEvent);
    internal static void EmitTraceActivityForTaskCompleted(OrchestrationInstance orchestrationInstance, TaskScheduledEvent taskScheduledEvent);
    [NullableContextAttribute("2")]
internal static void EmitTraceActivityForTaskFailed(OrchestrationInstance orchestrationInstance, TaskScheduledEvent taskScheduledEvent, TaskFailedEvent failedEvent, ErrorPropagationMode errorPropagationMode);
    [NullableContextAttribute("2")]
internal static Activity CreateTraceActivityForSchedulingSubOrchestration(OrchestrationInstance orchestrationInstance, SubOrchestrationInstanceCreatedEvent createdEvent);
    internal static void EmitTraceActivityForSubOrchestrationCompleted(OrchestrationInstance orchestrationInstance, SubOrchestrationInstanceCreatedEvent createdEvent);
    [NullableContextAttribute("2")]
internal static void EmitTraceActivityForSubOrchestrationFailed(OrchestrationInstance orchestrationInstance, SubOrchestrationInstanceCreatedEvent createdEvent, SubOrchestrationInstanceFailedEvent failedEvent, ErrorPropagationMode errorPropagationMode);
    [NullableContextAttribute("2")]
internal static Activity StartTraceActivityForEventRaisedFromWorker(EventRaisedEvent eventRaisedEvent, OrchestrationInstance instance, string targetInstanceId);
    internal static Activity StartActivityForNewEventRaisedFromClient(EventRaisedEvent eventRaised, OrchestrationInstance instance);
    internal static void EmitTraceActivityForTimer(OrchestrationInstance instance, string orchestrationName, DateTime startTime, TimerFiredEvent timerFiredEvent);
    internal static void SetRuntimeStatusTag(string runtimeStatus);
    internal static void AddErrorDetailsToSpan(Activity activity, Exception e);
    private static string CreateSpanName(string spanDescription, string taskName, string taskVersion);
    private static string CreateTimerSpanName(string orchestrationName);
    public static void Trace(TraceEventType eventLevel, string eventType, Func`1<string> generateMessage);
    public static void Trace(TraceEventType eventLevel, string eventType, string format, Object[] args);
    public static void TraceSession(TraceEventType eventLevel, string eventType, string sessionId, Func`1<string> generateMessage);
    public static void TraceSession(TraceEventType eventLevel, string eventType, string sessionId, string format, Object[] args);
    public static void TraceInstance(TraceEventType eventLevel, string eventType, OrchestrationInstance orchestrationInstance, string format, Object[] args);
    public static void TraceInstance(TraceEventType eventLevel, string eventType, OrchestrationInstance orchestrationInstance, Func`1<string> generateMessage);
    public static Exception TraceException(TraceEventType eventLevel, string eventType, Exception exception);
    public static Exception TraceException(TraceEventType eventLevel, string eventType, Exception exception, Func`1<string> generateMessage);
    public static Exception TraceException(TraceEventType eventLevel, string eventType, Exception exception, string format, Object[] args);
    public static Exception TraceExceptionInstance(TraceEventType eventLevel, string eventType, OrchestrationInstance orchestrationInstance, Exception exception);
    public static Exception TraceExceptionInstance(TraceEventType eventLevel, string eventType, OrchestrationInstance orchestrationInstance, Exception exception, Func`1<string> generateMessage);
    public static Exception TraceExceptionInstance(TraceEventType eventLevel, string eventType, OrchestrationInstance orchestrationInstance, Exception exception, string format, Object[] args);
    public static Exception TraceExceptionSession(TraceEventType eventLevel, string eventType, string sessionId, Exception exception);
    public static ExceptionDispatchInfo TraceExceptionSession(TraceEventType eventLevel, string eventType, string sessionId, ExceptionDispatchInfo exceptionDispatchInfo);
    public static Exception TraceExceptionSession(TraceEventType eventLevel, string eventType, string sessionId, Exception exception, Func`1<string> generateMessage);
    public static Exception TraceExceptionSession(TraceEventType eventLevel, string eventType, string sessionId, Exception exception, string format, Object[] args);
    public static ExceptionDispatchInfo TraceExceptionSession(TraceEventType eventLevel, string eventType, string sessionId, ExceptionDispatchInfo exceptionDispatchInfo, string format, Object[] args);
    private static ExceptionDispatchInfo TraceExceptionCore(TraceEventType eventLevel, string eventType, string iid, string eid, ExceptionDispatchInfo exceptionDispatchInfo, string format, Object[] args);
    private static Exception TraceExceptionCore(TraceEventType eventLevel, string eventType, string iid, string eid, Exception exception, Func`1<string> generateMessage);
    private static string FormatString(string formatted, Object[] args);
    private static void ExceptionHandlingWrapper(Action innerFunc);
}
public class DurableTask.Core.Tracking.InstanceEntityBase : object {
    public long SequenceNumber;
}
public interface DurableTask.Core.Tracking.IOrchestrationServiceBlobStore {
    public abstract virtual string BuildMessageBlobKey(OrchestrationInstance orchestrationInstance, DateTime messageFireTime);
    public abstract virtual string BuildSessionBlobKey(string sessionId);
    public abstract virtual Task SaveStreamAsync(string blobKey, Stream stream);
    public abstract virtual Task`1<Stream> LoadStreamAsync(string blobKey);
    public abstract virtual Task DeleteStoreAsync();
    public abstract virtual Task PurgeExpiredBlobsAsync(DateTime thresholdDateTimeUtc);
}
public class DurableTask.Core.Tracking.OrchestrationJumpStartInstanceEntity : InstanceEntityBase {
    public DateTime JumpStartTime;
    public OrchestrationState State;
}
public class DurableTask.Core.Tracking.OrchestrationStateInstanceEntity : InstanceEntityBase {
    public OrchestrationState State;
}
public class DurableTask.Core.Tracking.OrchestrationWorkItemInstanceEntity : InstanceEntityBase {
    public string InstanceId;
    public string ExecutionId;
    public DateTime EventTimestamp;
    public HistoryEvent HistoryEvent;
}
public class DurableTask.Core.TrackingWorkItem : object {
    public string InstanceId;
    public DateTime LockedUntilUtc;
    public IList`1<TaskMessage> NewMessages;
    public object SessionInstance;
}
public class DurableTask.Core.W3CTraceContext : TraceContextBase {
    [CompilerGeneratedAttribute]
private string <TraceParent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentSpanId>k__BackingField;
    public string TraceParent { get; public set; }
    public string TraceState { get; public set; }
    public string ParentSpanId { get; public set; }
    public TimeSpan Duration { get; }
    public string TelemetryId { get; }
    public string TelemetryContextOperationId { get; }
    public string TelemetryContextOperationParentId { get; }
    [CompilerGeneratedAttribute]
public string get_TraceParent();
    [CompilerGeneratedAttribute]
public void set_TraceParent(string value);
    [CompilerGeneratedAttribute]
public string get_TraceState();
    [CompilerGeneratedAttribute]
public void set_TraceState(string value);
    [CompilerGeneratedAttribute]
public string get_ParentSpanId();
    [CompilerGeneratedAttribute]
public void set_ParentSpanId(string value);
    public virtual TimeSpan get_Duration();
    public virtual string get_TelemetryId();
    public virtual string get_TelemetryContextOperationId();
    public virtual string get_TelemetryContextOperationParentId();
    public virtual void SetParentAndStart(TraceContextBase parentTraceContext);
    public virtual void StartAsNew();
}
public class DurableTask.Core.WorkItemDispatcher`1 : object {
    private static int DefaultMaxConcurrentWorkItems;
    private static int DefaultDispatcherCount;
    private static int BackOffIntervalOnInvalidOperationSecs;
    private static int CountDownToZeroDelay;
    private static TimeSpan DefaultReceiveTimeout;
    private string id;
    private string name;
    private object thisLock;
    private SemaphoreSlim initializationLock;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) concurrentWorkItemCount;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) countDownToZeroDelay;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) delayOverrideSecs;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) activeFetchers;
    private bool isStarted;
    private SemaphoreSlim concurrencyLock;
    private CancellationTokenSource shutdownCancellationTokenSource;
    [CompilerGeneratedAttribute]
private int <MaxConcurrentWorkItems>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DispatcherCount>k__BackingField;
    private Func`2<T, string> workItemIdentifier;
    [CompilerGeneratedAttribute]
private Func`3<TimeSpan, CancellationToken, Task`1<T>> <FetchWorkItem>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<T, Task> <ProcessWorkItem>k__BackingField;
    public Func`2<T, Task> SafeReleaseWorkItem;
    public Func`2<T, Task> AbortWorkItem;
    public Func`2<Exception, int> GetDelayInSecondsAfterOnFetchException;
    public Func`2<Exception, int> GetDelayInSecondsAfterOnProcessException;
    [CompilerGeneratedAttribute]
private LogHelper <LogHelper>k__BackingField;
    public int MaxConcurrentWorkItems { get; public set; }
    public int DispatcherCount { get; public set; }
    private Func`3<TimeSpan, CancellationToken, Task`1<T>> FetchWorkItem { get; }
    private Func`2<T, Task> ProcessWorkItem { get; }
    internal LogHelper LogHelper { get; internal set; }
    public WorkItemDispatcher`1(string name, Func`2<T, string> workItemIdentifier, Func`3<TimeSpan, CancellationToken, Task`1<T>> fetchWorkItem, Func`2<T, Task> processWorkItem);
    private static WorkItemDispatcher`1();
    [CompilerGeneratedAttribute]
public int get_MaxConcurrentWorkItems();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrentWorkItems(int value);
    [CompilerGeneratedAttribute]
public int get_DispatcherCount();
    [CompilerGeneratedAttribute]
public void set_DispatcherCount(int value);
    [CompilerGeneratedAttribute]
private Func`3<TimeSpan, CancellationToken, Task`1<T>> get_FetchWorkItem();
    [CompilerGeneratedAttribute]
private Func`2<T, Task> get_ProcessWorkItem();
    [CompilerGeneratedAttribute]
internal LogHelper get_LogHelper();
    [CompilerGeneratedAttribute]
internal void set_LogHelper(LogHelper value);
    [AsyncStateMachineAttribute("DurableTask.Core.WorkItemDispatcher`1/<StartAsync>d__40")]
public Task StartAsync();
    [AsyncStateMachineAttribute("DurableTask.Core.WorkItemDispatcher`1/<StopAsync>d__41")]
public Task StopAsync(bool forced);
    private bool AllWorkItemsCompleted();
    [AsyncStateMachineAttribute("DurableTask.Core.WorkItemDispatcher`1/<DispatchAsync>d__43")]
private Task DispatchAsync(WorkItemDispatcherContext context);
    private static bool IsNull(T value);
    [AsyncStateMachineAttribute("DurableTask.Core.WorkItemDispatcher`1/<ProcessWorkItemAsync>d__45")]
private Task ProcessWorkItemAsync(WorkItemDispatcherContext context, object workItemObj);
    private void AdjustDelayModifierOnSuccess();
    private void AdjustDelayModifierOnFailure(int delaySecs);
    [AsyncStateMachineAttribute("DurableTask.Core.WorkItemDispatcher`1/<ExceptionTraceWrapperAsync>d__48")]
private Task ExceptionTraceWrapperAsync(WorkItemDispatcherContext context, string workItemId, string operation, Func`1<Task> asyncAction);
    protected string GetFormattedLog(string dispatcherId, string message);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class DurableTask.Core.WorkItemDispatcherContext : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DispatcherId>k__BackingField;
    public string Name { get; }
    public string Id { get; }
    public string DispatcherId { get; }
    public WorkItemDispatcherContext(string name, string id, string dispatcherId);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_DispatcherId();
    internal string GetDisplayName();
    public virtual string ToString();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
