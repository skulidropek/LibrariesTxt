internal class Kusto.Cloud.Platform.Http.AadApplicationHttpClientAuthenticator : object {
    private AuthenticationMethod m_authenticationMethod;
    private KustoClientServiceAadEntitiesConfiguration m_aadEntitiesConfiguration;
    private string m_applicationClientId;
    private string m_applicationKey;
    private string m_applicationCertificateThumbprint;
    private string m_applicationCertificateSubjectDistinguishedName;
    private string m_applicationCertificateIssuerDistinguishedName;
    private bool m_applicationCertificateSendX5c;
    private X509Certificate2 m_applicationCertificateBlob;
    private String[] m_scopes;
    private string m_authorityId;
    private string m_azureRegion;
    private static ConcurrentDictionary`2<CacheKey, IConfidentialClientApplication> s_confidentialClientApplicationDictionary;
    internal AadApplicationHttpClientAuthenticator(KustoClientServiceAadEntitiesConfiguration aadEntitiesConfiguration, AuthenticationMethod authenticationMethod, string scope, string authorityId, string applicationClientId, string applicationKey, string applicationCertificateThumbprint, string applicationCertificateSubjectDistinguishedName, string applicationCertificateIssuerDistinguishedName, bool applicationCertificateSendX5c, X509Certificate2 applicationCertificateBlob, string azureRegion);
    private static AadApplicationHttpClientAuthenticator();
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Http.AadApplicationHttpClientAuthenticator/<AuthenticateAsync>d__14")]
public sealed virtual Task AuthenticateAsync(HttpRequestMessage request);
    private static ConfidentialClientApplicationBuilder InitConfidentialClientApplicationBuilder(string appClientId, Uri authorityUri, string azureRegion);
    private static IConfidentialClientApplication BuildConfidentialClientApplication(string appClientId, Uri authorityUri, string clientSecret);
    private static IConfidentialClientApplication BuildConfidentialClientApplication(string appClientId, Uri authorityUri, X509Certificate2 certificate, string azureRegion);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Http.AadApplicationHttpClientAuthenticator/<GetTokenAsync>d__18")]
private Task`1<string> GetTokenAsync();
    private X509Certificate2 LoadCertificate();
    [CompilerGeneratedAttribute]
private IConfidentialClientApplication <GetTokenAsync>b__18_1(CacheKey key);
}
internal class Kusto.Cloud.Platform.Http.AadHttpClientAuthenticatorBuilder : object {
    private AuthenticationMethod m_authenticationMethod;
    private KustoClientServiceAadEntitiesConfiguration m_aadEntitiesConfiguration;
    private string m_dataSource;
    private string m_scope;
    private string m_resourceUri;
    internal AadHttpClientAuthenticatorBuilder(string kustoConnectionDataSource, AuthenticationMethod authenticationMethod, bool enforceMfa);
    internal BearerTokenHttpClientAuthenticator WithToken(string token);
    internal TokenProviderHttpClientAuthenticator WithTokenProvider(Func`1<Task`1<string>> tokenProviderCallback);
    internal TokenProviderHttpClientAuthenticator WithTokenProvider(IKustoTokenCredentialsProvider kustoTokenCredentialsProvider);
    internal AadApplicationHttpClientAuthenticator WithApplicationKey(string applicationClientId, string authorityId, string applicationKey);
    internal AadApplicationHttpClientAuthenticator WithApplicationCertificate(string applicationClientId, string authorityId, X509Certificate2 applicationCertificateBlob, bool applicationCertificateSendX5c, string azureRegion);
    internal AadApplicationHttpClientAuthenticator WithApplicationCertificateThumbprint(string applicationClientId, string authorityId, string applicationCertificateThumbprint, bool applicationCertificateSendX5c);
    internal AadApplicationHttpClientAuthenticator WithApplicationCertificateSubjectAndIssuer(string applicationClientId, string authorityId, string applicationCertificateSubjectDistinguishedName, string applicationCertificateIssuerDistinguishedName, bool applicationCertificateSendX5c, string azureRegion);
    internal AadUserHttpClientAuthenticator WithUserIdentifier(string userId, string authorityId);
}
internal class Kusto.Cloud.Platform.Http.AadUserHttpClientAuthenticator : object {
    private KustoClientServiceAadEntitiesConfiguration m_aadEntitiesConfiguration;
    private string m_dataSource;
    private String[] m_scopes;
    private string m_authorityId;
    private string m_userId;
    private static string c_personalTenantIdV2AAD;
    private UserTokenFileCache m_aadUserTokenFileCache;
    internal AadUserHttpClientAuthenticator(KustoClientServiceAadEntitiesConfiguration aadEntitiesConfiguration, string dataSource, string scope, string authorityId, string userId);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Http.AadUserHttpClientAuthenticator/<AuthenticateAsync>d__8")]
public sealed virtual Task AuthenticateAsync(HttpRequestMessage request);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Http.AadUserHttpClientAuthenticator/<GetTokenAsync>d__9")]
private Task`1<string> GetTokenAsync();
}
public static class Kusto.Cloud.Platform.Http.AuthenticationMetadataProvider : object {
    private static string c_authMetadataEndpoint;
    private static NetworkCache`3<string, object, AuthenticationMetadataResponse> s_clusterUrlToAuthMetadataCache;
    private static AuthenticationMetadataResponse s_defaultAuthenticationMetadata;
    private static KustoHttpClientFactory s_kustoHttpClientFactory;
    private static TimeSpan s_defaultHttpRequestTimeout;
    private static AuthenticationMetadataProvider();
    public static void SetDefaultAuthenticationMetadata(AadAuthenticationMetadata aadAuthenticationMetadata, DstsAuthenticationMetadata dstsAuthenticationMetadata, ITraceSource outerTracer);
    public static void ClearDefaultAuthenticationMetadata();
    public static bool TryGetDstsAuthenticationMetadataForCluster(Uri clusterUrl, DstsAuthenticationMetadata& authMetadata);
    public static bool TryGetAadAuthenticationMetadataForCluster(Uri clusterUrl, AadAuthenticationMetadata& authMetadata);
    public static DstsAuthenticationMetadata GetDstsAuthenticationMetadataForCluster(Uri clusterUrl);
    public static AadAuthenticationMetadata GetAadAuthenticationMetadataForCluster(Uri clusterUrl);
    private static void SetDefaultAuthenticationMetadataInternal(AadAuthenticationMetadata aadAuthenticationMetadata, DstsAuthenticationMetadata dstsAuthenticationMetadata);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Http.AuthenticationMetadataProvider/<ExternalGetAuthenticationMetadataForClusterAsync>d__12")]
private static Task`1<AuthenticationMetadataResponse> ExternalGetAuthenticationMetadataForClusterAsync(string clusterUrl);
}
public class Kusto.Cloud.Platform.Http.AuthenticationMetadataResponse : object {
    [JsonPropertyAttribute("AzureAD")]
public AadAuthenticationMetadata AadMetadata;
    [JsonPropertyAttribute("dSTS")]
public DstsAuthenticationMetadata DstsMetadata;
}
public class Kusto.Cloud.Platform.Http.BasicHttpClientAuthenticator : object {
    private string m_scheme;
    private string m_parameter;
    public BasicHttpClientAuthenticator(string username, string password);
    public sealed virtual Task AuthenticateAsync(HttpRequestMessage request);
}
internal class Kusto.Cloud.Platform.Http.BearerTokenHttpClientAuthenticator : object {
    private string m_token;
    internal BearerTokenHttpClientAuthenticator(string token);
    public sealed virtual Task AuthenticateAsync(HttpRequestMessage request);
}
internal static class Kusto.Cloud.Platform.Http.CommonUtility : object {
    public static string GetFirstHeaderValue(IEnumerable`1<T> headerValues);
}
public class Kusto.Cloud.Platform.Http.CredentialsProviderHttpClientAuthenticator : object {
    private IKustoTokenCredentialsProvider m_credentialsProvider;
    private string m_targetResource;
    public CredentialsProviderHttpClientAuthenticator(IKustoTokenCredentialsProvider credentialsProvider, string targetResource);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Http.CredentialsProviderHttpClientAuthenticator/<AuthenticateAsync>d__3")]
public sealed virtual Task AuthenticateAsync(HttpRequestMessage request);
}
internal class Kusto.Cloud.Platform.Http.DstsHttpClientAuthenticator : object {
    public static string DstsTokenScheme;
    private AuthenticationMethod m_authenticationMethod;
    [CompilerGeneratedAttribute]
private string <ApplicationCertificateThumbprint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagedServiceIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrincipalToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationCertificateSubjectDistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <ApplicationCertificateBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DstsInstance>k__BackingField;
    public string ApplicationCertificateThumbprint { get; public set; }
    public string ManagedServiceIdentity { get; public set; }
    public string PrincipalToken { get; public set; }
    public string ApplicationCertificateSubjectDistinguishedName { get; public set; }
    public X509Certificate2 ApplicationCertificateBlob { get; public set; }
    public string DstsInstance { get; public set; }
    public DstsHttpClientAuthenticator(string kustoConnectionDataSource, AuthenticationMethod authenticationMethod, string token);
    [CompilerGeneratedAttribute]
public string get_ApplicationCertificateThumbprint();
    [CompilerGeneratedAttribute]
public void set_ApplicationCertificateThumbprint(string value);
    [CompilerGeneratedAttribute]
public string get_ManagedServiceIdentity();
    [CompilerGeneratedAttribute]
public void set_ManagedServiceIdentity(string value);
    [CompilerGeneratedAttribute]
public string get_PrincipalToken();
    [CompilerGeneratedAttribute]
public void set_PrincipalToken(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationCertificateSubjectDistinguishedName();
    [CompilerGeneratedAttribute]
public void set_ApplicationCertificateSubjectDistinguishedName(string value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_ApplicationCertificateBlob();
    [CompilerGeneratedAttribute]
public void set_ApplicationCertificateBlob(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public string get_DstsInstance();
    [CompilerGeneratedAttribute]
public void set_DstsInstance(string value);
    public sealed virtual Task AuthenticateAsync(HttpRequestMessage request);
    private string GetToken();
}
internal class Kusto.Cloud.Platform.Http.DstsHttpClientAuthenticatorBuilder : object {
    private AuthenticationMethod m_authenticationMethod;
    private KustoClientServiceDstsEntitiesConfiguration m_dstsEntitiesConfiguration;
    private string m_dataSource;
    internal DstsHttpClientAuthenticatorBuilder(string kustoConnectionDataSource, AuthenticationMethod authenticationMethod);
    internal IHttpClientAuthenticator WithToken(string token, TokenType authenticationTokenType);
    internal IHttpClientAuthenticator WithApplicationCertificate(string applicationClientId, string clientDstsInstance, X509Certificate2 applicationCertificateBlob, bool applicationCertificateSendX5c, bool useDstsSubjectNameBasedAuthentication, TokenType tokenType);
    internal IHttpClientAuthenticator WithApplicationCertificateThumbprint(string applicationClientId, string clientDstsInstance, string applicationCertificateThumbprint, bool applicationCertificateSendX5c, TokenType tokenType);
    internal IHttpClientAuthenticator WithApplicationCertificateSubject(string applicationClientId, string clientDstsInstance, string applicationCertificateSubjectDistinguishedName, bool applicationCertificateSendX5c, TokenType tokenType);
    internal IHttpClientAuthenticator WithUserPrompt(string authorityId, string userId, TokenType tokenType);
    private static TokenType DetermineDstsTokenTypeWithOptionalAppId(TokenType tokenType, string applicationClientId);
}
[ExtensionAttribute]
public static class Kusto.Cloud.Platform.Http.ExtendedHttpRequestMessage : object {
    [ExtensionAttribute]
public static void SetHttpAuthorizationHeader(HttpRequestMessage request, string scheme, string parameter);
}
[ExtensionAttribute]
public static class Kusto.Cloud.Platform.Http.ExtendedTokenType : object {
    [ExtensionAttribute]
public static TokenType GetValueOrDefault(TokenType thisValue, TokenType defaultValue);
    [ExtensionAttribute]
public static string ToSchema(TokenType thisValue);
    [ExtensionAttribute]
public static bool IsJWT(TokenType thisValue);
}
[ExtensionAttribute]
internal static class Kusto.Cloud.Platform.Http.HttpResponseMessageUtils : object {
    [ExtensionAttribute]
public static string GetHeaderSingleValueOrDefault(HttpHeaders headers, string name);
}
public interface Kusto.Cloud.Platform.Http.IHttpClientAuthenticator {
    public abstract virtual Task AuthenticateAsync(HttpRequestMessage request);
}
public class Kusto.Cloud.Platform.Http.KustoHttpMessageHandler : object {
    private void f();
}
public class Kusto.Cloud.Platform.Http.KustoMsalLoggingRedirector : object {
    public sealed virtual bool IsEnabled(EventLogLevel eventLogLevel);
    public sealed virtual void Log(LogEntry entry);
    private static TraceVerbosity EventLogLevelToTraceVerbosity(EventLogLevel eventLogLevel);
}
public class Kusto.Cloud.Platform.Http.SchemeAndParameter : object {
    private string m_scheme;
    private string m_parameter;
    public string Scheme { get; }
    public string Parameter { get; }
    public SchemeAndParameter(string scheme, string parameter);
    public string get_Scheme();
    public string get_Parameter();
}
public class Kusto.Cloud.Platform.Http.SharedAccessSignatureHttpClientAuthenticator : object {
    private string m_sasKey;
    public SharedAccessSignatureHttpClientAuthenticator(string sasKey);
    public sealed virtual Task AuthenticateAsync(HttpRequestMessage request);
}
public class Kusto.Cloud.Platform.Http.SharedKeyHttpClientAuthenticator : object {
    private string m_accountName;
    private Byte[] m_accountKeyValue;
    private string m_accountKeyName;
    public SharedKeyHttpClientAuthenticator(string accountName, Byte[] accountKeyValue, string accountKeyName);
    public SharedKeyHttpClientAuthenticator(string accountName, string accountKeyValue, string accountKeyName);
    public sealed virtual Task AuthenticateAsync(HttpRequestMessage request);
    public static string ConvertDateTimeToHttpString(DateTimeOffset dateTime);
    public static void SetSharedKeyAuthentication(HttpRequestMessage request, string accountName, Byte[] accountKeyValue, string accountKeyName);
}
internal class Kusto.Cloud.Platform.Http.TokenProviderHttpClientAuthenticator : object {
    private Func`1<Task`1<string>> m_tokenProviderCallback;
    private string m_tokenProviderCallbackSchema;
    private IKustoTokenCredentialsProvider m_credentialsProvider;
    private string m_resource;
    internal TokenProviderHttpClientAuthenticator(Func`1<Task`1<string>> tokenProviderCallback, string schema);
    internal TokenProviderHttpClientAuthenticator(IKustoTokenCredentialsProvider credProvider, string resource);
    [AsyncStateMachineAttribute("Kusto.Cloud.Platform.Http.TokenProviderHttpClientAuthenticator/<AuthenticateAsync>d__6")]
public sealed virtual Task AuthenticateAsync(HttpRequestMessage request);
}
public class Kusto.Cloud.Platform.Http.TrivialHttpClientAuthenticator : object {
    private string m_tokenScheme;
    private string m_tokenValue;
    public TrivialHttpClientAuthenticator(string tokenScheme, string tokenValue);
    public sealed virtual Task AuthenticateAsync(HttpRequestMessage request);
}
[DataContractAttribute]
public enum Kusto.Common.Svc.AdminTrackableOperationState : Enum {
    public int value__;
    [EnumMemberAttribute]
public static AdminTrackableOperationState InProgress;
    [EnumMemberAttribute]
public static AdminTrackableOperationState Completed;
    [EnumMemberAttribute]
public static AdminTrackableOperationState Failed;
    [EnumMemberAttribute]
public static AdminTrackableOperationState PartiallySucceeded;
    [EnumMemberAttribute]
public static AdminTrackableOperationState Abandoned;
    [EnumMemberAttribute]
public static AdminTrackableOperationState BadInput;
    [EnumMemberAttribute]
public static AdminTrackableOperationState Scheduled;
    [EnumMemberAttribute]
public static AdminTrackableOperationState Throttled;
    [EnumMemberAttribute]
public static AdminTrackableOperationState Cancelled;
    [EnumMemberAttribute]
public static AdminTrackableOperationState Skipped;
    [EnumMemberAttribute]
public static AdminTrackableOperationState Deferred;
}
[ExtensionAttribute]
public static class Kusto.Common.Svc.ExtendedAdminTrackableOperationState : object {
    [ExtensionAttribute]
public static string FastToString(AdminTrackableOperationState that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(AdminTrackableOperationState that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(AdminTrackableOperationState that, AdminTrackableOperationState flag);
    public static AdminTrackableOperationState FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, AdminTrackableOperationState& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(AdminTrackableOperationState that);
    [ExtensionAttribute]
public static string FastGetDescription(AdminTrackableOperationState that);
}
public class Kusto.Data.AccountClientSubscriptionsShowCmCommandResult : object {
    public Guid SubscriptionId;
    public string Etag;
    public string RegistrationState;
    public int ClusterQuotaLimit;
    public int PoolQuotaLimit;
    public string ReservedSlot1;
    public bool AvailableInClientSubscriptionsStore;
    public string CustomerSegment;
}
public class Kusto.Data.AccountConfigurationBasicShowCmCommandResult : object {
    public string Name;
    public string TenantName;
    public string Division;
}
public class Kusto.Data.AccountConfigurationShowCmCommandResult : object {
    public string AccountName;
    public string AccountConfiguration;
}
public class Kusto.Data.AccountContactsShowCmCommandResult : object {
    public string AccountName;
    public string ContactName;
    public string ContactType;
    public string EmailAddress;
    public string Notes;
}
public class Kusto.Data.AccountShowCmCommandResult : object {
    public string Name;
    public int MajorVersion;
    public DateTime VersionTimestamp;
    public int EngineServices;
    public int DataManagementServices;
    public int BridgeServices;
    public int ClusterManagementServices;
    public string Division;
    public string ServiceTree;
    public string TenantName;
    public string TenantId;
    public string Reserved1;
    public int BillingServices;
    public int DashboardServices;
    public int FlightingServices;
    public int GaiaServices;
    public int HealthSuiteServices;
    public int ProxyServices;
    public int ResourceProviderServices;
    public int ServicesProcHostServices;
    public int SaasResourceProviderServices;
    public int ServiceProbeServices;
    public int AssistantServices;
}
public class Kusto.Data.AccountSubscriptionsShowCmCommandResult : object {
    public string AccountName;
    public Guid SubscriptionId;
    public string SubscriptionName;
    public int AvailableCores;
    public int AvailableStorageAccounts;
    public int AvailableHostedServices;
    public int CurrentCores;
    public int CurrentStorageAccounts;
    public int CurrentHostedServices;
    public string AzureAccountAdmin;
    public string AzureServiceAdmin;
    public int KustoServiceCount;
    public string KustoServiceNames;
    public string PcCode;
    public string ResourcesUsageByRegion;
    public int CurrentArmCores;
    public int CurrentVMSS;
    public int AvailableArmStorageAccounts;
    public int CurrentArmStorageAccounts;
    public int AvailableArmPartitionedDnsStorageAccounts;
    public int CurrentArmPartitionedDnsStorageAccounts;
    public bool IsLocked;
    public string Purposes;
}
public enum Kusto.Data.AdminTrackableOperationKind : Enum {
    public int value__;
    public static AdminTrackableOperationKind None;
    public static AdminTrackableOperationKind AdminThenQuery;
    public static AdminTrackableOperationKind AdminPersistentStateShowCommand;
    public static AdminTrackableOperationKind AllDatabasesSetMaintenanceMode;
    public static AdminTrackableOperationKind AutoDeletePolicyAlter;
    public static AdminTrackableOperationKind AutoDeletePolicyDrop;
    public static AdminTrackableOperationKind AutoDeletePolicyShow;
    public static AdminTrackableOperationKind BasicAuthUserCreate;
    public static AdminTrackableOperationKind BasicAuthUserDrop;
    public static AdminTrackableOperationKind BasicAuthUserShow;
    public static AdminTrackableOperationKind CalloutPolicyShow;
    public static AdminTrackableOperationKind CalloutPolicyAlter;
    public static AdminTrackableOperationKind CalloutPolicyDrop;
    public static AdminTrackableOperationKind CallstacksShow;
    public static AdminTrackableOperationKind CachingPolicyShow;
    public static AdminTrackableOperationKind CachingPolicyShowEffective;
    public static AdminTrackableOperationKind CachingPolicyAlter;
    public static AdminTrackableOperationKind CachingPolicyDrop;
    public static AdminTrackableOperationKind CacheShow;
    public static AdminTrackableOperationKind CacheAlter;
    public static AdminTrackableOperationKind CapacityPolicyAlter;
    public static AdminTrackableOperationKind CapacityPolicyShow;
    public static AdminTrackableOperationKind CapacityShow;
    public static AdminTrackableOperationKind CertificatesShow;
    public static AdminTrackableOperationKind CleanOperationShow;
    public static AdminTrackableOperationKind CloudSettingsShow;
    public static AdminTrackableOperationKind ClusterClusterAdminPolicyAlter;
    public static AdminTrackableOperationKind ClusterClusterAdminPolicyShow;
    public static AdminTrackableOperationKind ClusterAdminStateShow;
    public static AdminTrackableOperationKind ClusterCredStoreCacheClear;
    public static AdminTrackableOperationKind ClusterExtentsCorruptedPatch;
    public static AdminTrackableOperationKind ClusterExtentsCorruptedShow;
    public static AdminTrackableOperationKind ClusterExtentsShow;
    public static AdminTrackableOperationKind ClusterDataMovementRestrictionPolicyAlter;
    public static AdminTrackableOperationKind ClusterDataMovementRestrictionPolicyDrop;
    public static AdminTrackableOperationKind ClusterDataMovementRestrictionPolicyShow;
    public static AdminTrackableOperationKind ClusterExternalArtifactsCacheClear;
    public static AdminTrackableOperationKind ClusterDiagnosticsPolicyAlter;
    public static AdminTrackableOperationKind ClusterDiagnosticsPolicyShow;
    public static AdminTrackableOperationKind ClusterGroupMembershipCacheClear;
    public static AdminTrackableOperationKind ClusterMonitoringShow;
    public static AdminTrackableOperationKind ClusterNodesToScaleInShow;
    public static AdminTrackableOperationKind ClusterServicesShow;
    public static AdminTrackableOperationKind ClusterSetAccessGroups;
    public static AdminTrackableOperationKind ClusterShow;
    public static AdminTrackableOperationKind ClusterShowAccessGroups;
    public static AdminTrackableOperationKind ClusterShowNetwork;
    public static AdminTrackableOperationKind ClusterAlterBlockedPrincipals;
    public static AdminTrackableOperationKind ClusterWorkloadGroupAlterMergeCommand;
    public static AdminTrackableOperationKind ClusterWorkloadGroupCreateOrAlterCommand;
    public static AdminTrackableOperationKind ClusterWorkloadGroupsDropCommand;
    public static AdminTrackableOperationKind ClusterWorkloadGroupsShowCommand;
    public static AdminTrackableOperationKind ClusterWorkloadGroupsResourcesUtilizationShowCommand;
    public static AdminTrackableOperationKind ClusterRequestClassificationPolicyAlter;
    public static AdminTrackableOperationKind ClusterRequestClassificationPolicyShow;
    public static AdminTrackableOperationKind ClusterRequestClassificationPolicyDrop;
    public static AdminTrackableOperationKind ClusterShowBlockedPrincipals;
    public static AdminTrackableOperationKind ClusterStorageKeysAlter;
    public static AdminTrackableOperationKind ClusterStorageKeysHashShow;
    public static AdminTrackableOperationKind ClusterStreamingIngestionPolicyAlter;
    public static AdminTrackableOperationKind ClusterStreamingIngestionPolicyDrop;
    public static AdminTrackableOperationKind ClusterStreamingIngestionPolicyShow;
    public static AdminTrackableOperationKind ClusterSystemPropertiesAlter;
    public static AdminTrackableOperationKind ClusterSystemPropertiesShow;
    public static AdminTrackableOperationKind ClusterExternalThrottlingPolicyAlter;
    public static AdminTrackableOperationKind ClusterExternalThrottlingPolicyShow;
    public static AdminTrackableOperationKind ClusterScriptExecute;
    public static AdminTrackableOperationKind ColumnAlter;
    public static AdminTrackableOperationKind ColumnClassificationShow;
    public static AdminTrackableOperationKind ColumnDrop;
    public static AdminTrackableOperationKind ColumnDataMovementRestrictionPolicyAlter;
    public static AdminTrackableOperationKind ColumnDataMovementRestrictionPolicyDrop;
    public static AdminTrackableOperationKind ColumnDataMovementRestrictionPolicyShow;
    public static AdminTrackableOperationKind ColumnRename;
    public static AdminTrackableOperationKind ColumnsDrop;
    public static AdminTrackableOperationKind ColumnsRename;
    public static AdminTrackableOperationKind ColumnsAlterDocStrings;
    public static AdminTrackableOperationKind CommandLineArgsShow;
    public static AdminTrackableOperationKind CommandsShow;
    public static AdminTrackableOperationKind CommandsAndQueriesShow;
    public static AdminTrackableOperationKind CommConcurrencyShow;
    public static AdminTrackableOperationKind CommPoolsShow;
    public static AdminTrackableOperationKind ContinuousDataExportToExternalTable;
    public static AdminTrackableOperationKind ContinuousOperationsStatusShow;
    public static AdminTrackableOperationKind Mirroring;
    public static AdminTrackableOperationKind DataAnalyzerRun;
    public static AdminTrackableOperationKind DatabaseAttach;
    public static AdminTrackableOperationKind DatabaseCreate;
    public static AdminTrackableOperationKind DatabaseCopy;
    public static AdminTrackableOperationKind DatabaseContainersUtilizationShow;
    public static AdminTrackableOperationKind DatabaseDataAnalyzerRun;
    public static AdminTrackableOperationKind DatabaseDetach;
    public static AdminTrackableOperationKind DatabaseScavenge;
    public static AdminTrackableOperationKind DatabaseSchemaShow;
    public static AdminTrackableOperationKind DatabaseSchemaShowAsCslScript;
    public static AdminTrackableOperationKind DatabaseSchemaShowAsJson;
    public static AdminTrackableOperationKind DatabaseSchemaViolationsShow;
    public static AdminTrackableOperationKind DatabaseSetAccessMode;
    public static AdminTrackableOperationKind DatabaseSetAccessGroups;
    public static AdminTrackableOperationKind DatabaseSetMaintenanceMode;
    public static AdminTrackableOperationKind DatabaseSetStreamingIngestionMaintenanceMode;
    public static AdminTrackableOperationKind DatabaseShowAccessGroups;
    public static AdminTrackableOperationKind DatabaseEntityShow;
    public static AdminTrackableOperationKind DatabaseExtentContainerAdd;
    public static AdminTrackableOperationKind DatabaseExtentContainerDrop;
    public static AdminTrackableOperationKind DatabaseExtentContainerDropEmpty;
    public static AdminTrackableOperationKind DatabaseExtentContainerSetState;
    public static AdminTrackableOperationKind DatabaseExtentContainerShow;
    public static AdminTrackableOperationKind DatabaseExtentContainerRecycle;
    public static AdminTrackableOperationKind DatabaseExtentsMetadataShow;
    public static AdminTrackableOperationKind DatabaseExtentsShow;
    public static AdminTrackableOperationKind DatabaseExtentTagsStatisticsShow;
    public static AdminTrackableOperationKind DatabaseIngestionMappingCreate;
    public static AdminTrackableOperationKind DatabaseIngestionMappingDrop;
    public static AdminTrackableOperationKind DatabaseIngestionMappingAlter;
    public static AdminTrackableOperationKind DatabaseIngestionMappingShow;
    public static AdminTrackableOperationKind DatabaseKeyVaultSecretsReplace;
    public static AdminTrackableOperationKind DatabaseKeyVaultSecretsShow;
    public static AdminTrackableOperationKind DatabaseMetadataContainerAlter;
    public static AdminTrackableOperationKind DatabaseMetadataExport;
    public static AdminTrackableOperationKind DatabasePolicySoftRetentionViolationsShow;
    public static AdminTrackableOperationKind DatabasePolicyHardRetentionViolationsShow;
    public static AdminTrackableOperationKind DatabasePrettyNameAlter;
    public static AdminTrackableOperationKind DatabasePrettyNameDrop;
    public static AdminTrackableOperationKind DatabaseSystemPropertiesAlter;
    public static AdminTrackableOperationKind DatabaseSystemPropertiesShow;
    public static AdminTrackableOperationKind DatabaseShardGroupsMerge;
    public static AdminTrackableOperationKind DatabaseShardGroupStatisticsShow;
    public static AdminTrackableOperationKind DatabaseStorageKeysAlter;
    public static AdminTrackableOperationKind DatabaseStreamingIngestionSchemaCacheClear;
    public static AdminTrackableOperationKind DatabaseWeakConsistencyCacheClear;
    public static AdminTrackableOperationKind DatabaseResultsCacheClearCommand;
    public static AdminTrackableOperationKind DatabaseResultsCacheShowCommand;
    public static AdminTrackableOperationKind DatabaseRemoteSchemaClearCacheCommand;
    public static AdminTrackableOperationKind DatabaseReplaceStorageAccounts;
    public static AdminTrackableOperationKind DatabasesEntitiesShowCommand;
    public static AdminTrackableOperationKind DatabasesExtentContainersAddStorageAccounts;
    public static AdminTrackableOperationKind DatabasesExtentContainersClean;
    public static AdminTrackableOperationKind DatabasesExtentContainersDropStorageAccounts;
    public static AdminTrackableOperationKind DatabasesExtentContainersSetStorageAccounts;
    public static AdminTrackableOperationKind DatabasesExtentContainersShowStorageAccounts;
    public static AdminTrackableOperationKind DatabaseExtentsPartitioningStatisticsShow;
    public static AdminTrackableOperationKind DatabaseShow;
    public static AdminTrackableOperationKind DatabasesShow;
    public static AdminTrackableOperationKind DatabasesManagementGroupsShow;
    public static AdminTrackableOperationKind DatabasesPoliciesShow;
    public static AdminTrackableOperationKind DataExportToExternalTable;
    public static AdminTrackableOperationKind DataExportToFile;
    public static AdminTrackableOperationKind DataExportContinuousJobCreateOrAlter;
    public static AdminTrackableOperationKind DataExportContinuousJobDrop;
    public static AdminTrackableOperationKind DataExportContinuousJobShow;
    public static AdminTrackableOperationKind DataExportContinuousJobEnableDisable;
    public static AdminTrackableOperationKind DataExportContinuousJobSetCursor;
    public static AdminTrackableOperationKind DataExportContinuousJobShowFailures;
    public static AdminTrackableOperationKind DataExportContinuousJobShowPending;
    public static AdminTrackableOperationKind DataExportContinuousJobShowExportedFiles;
    public static AdminTrackableOperationKind DataExportToFilePartitioned;
    public static AdminTrackableOperationKind DataExportSystemData;
    public static AdminTrackableOperationKind DataExportToMdm;
    public static AdminTrackableOperationKind DataExportToSql;
    public static AdminTrackableOperationKind DatabaseExtentContainersShowArtifacts;
    public static AdminTrackableOperationKind DatabaseExtentsCorruptedPatch;
    public static AdminTrackableOperationKind DatabaseExtentsCorruptedShow;
    public static AdminTrackableOperationKind DatabaseScriptExecute;
    public static AdminTrackableOperationKind DataWarming;
    public static AdminTrackableOperationKind DataIngestPull;
    public static AdminTrackableOperationKind DataIngestPush;
    public static AdminTrackableOperationKind DataOperationsShow;
    public static AdminTrackableOperationKind DataUpdate;
    public static AdminTrackableOperationKind DataShardingPolicyAlter;
    public static AdminTrackableOperationKind DataShardingPolicyShow;
    public static AdminTrackableOperationKind DataShardingPolicyDrop;
    public static AdminTrackableOperationKind DataPartitioningPolicyAlter;
    public static AdminTrackableOperationKind DataPartitioningPolicyShow;
    public static AdminTrackableOperationKind DataPartitioningPolicyDrop;
    public static AdminTrackableOperationKind DiagnosticsShow;
    public static AdminTrackableOperationKind Debug;
    public static AdminTrackableOperationKind Echo;
    public static AdminTrackableOperationKind ExpiredTablesCleanup;
    public static AdminTrackableOperationKind EncodingPolicyAlter;
    public static AdminTrackableOperationKind EncodingPolicyDrop;
    public static AdminTrackableOperationKind EncodingPolicyShow;
    public static AdminTrackableOperationKind EncryptionKeysCreate;
    public static AdminTrackableOperationKind EntityGroupAlterMergeCommand;
    public static AdminTrackableOperationKind EntityGroupCreateCommand;
    public static AdminTrackableOperationKind EntityGroupCreateOrAlterCommand;
    public static AdminTrackableOperationKind EntityGroupDropCommand;
    public static AdminTrackableOperationKind EntityGroupAlterCommand;
    public static AdminTrackableOperationKind EntityGroupShowCommand;
    public static AdminTrackableOperationKind EntityGroupsShowCommand;
    public static AdminTrackableOperationKind EntityShowSchema;
    public static AdminTrackableOperationKind ExtentsAttachByContainer;
    public static AdminTrackableOperationKind ExtentsAttachByMetadata;
    public static AdminTrackableOperationKind ExtentLoad;
    public static AdminTrackableOperationKind ExtentTagsDrop;
    public static AdminTrackableOperationKind ExtentTagsDropByQuery;
    public static AdminTrackableOperationKind ExtentTagsDropDueToRetention;
    public static AdminTrackableOperationKind ExtentTagsAlter;
    public static AdminTrackableOperationKind ExtentPartitionMetadataDropByQuery;
    public static AdminTrackableOperationKind ExtentPartitionMetadataAlterByQuery;
    public static AdminTrackableOperationKind ExtentPartitionMetadataAlter;
    public static AdminTrackableOperationKind ExtentTagsRetentionPolicyAlter;
    public static AdminTrackableOperationKind ExtentTagsRetentionPolicyDrop;
    public static AdminTrackableOperationKind ExtentTagsRetentionPolicyShow;
    public static AdminTrackableOperationKind ExtentsDrop;
    public static AdminTrackableOperationKind ExtentsDropByQuery;
    public static AdminTrackableOperationKind ExtentsMerge;
    public static AdminTrackableOperationKind ExtentsMove;
    public static AdminTrackableOperationKind ExtentsMoveByQuery;
    public static AdminTrackableOperationKind ExtentsPartition;
    public static AdminTrackableOperationKind ExtentsRebuild;
    public static AdminTrackableOperationKind ExtentsConvert;
    public static AdminTrackableOperationKind ExtentsRecover;
    public static AdminTrackableOperationKind ExtentsReplace;
    public static AdminTrackableOperationKind ExtentCompact;
    public static AdminTrackableOperationKind ExtentColumnStorageStats;
    public static AdminTrackableOperationKind ExtentDetailsShow;
    public static AdminTrackableOperationKind ExtentRebuildByQuery;
    public static AdminTrackableOperationKind ExtentsRebuildByQuery;
    public static AdminTrackableOperationKind ExtentsMergePolicyAlter;
    public static AdminTrackableOperationKind ExtentsMergePolicyShow;
    public static AdminTrackableOperationKind ExtentsMergePolicyDrop;
    public static AdminTrackableOperationKind ExtentsCorruptedDateTimePatch;
    public static AdminTrackableOperationKind ExtentsCorruptedDateTimeShow;
    public static AdminTrackableOperationKind ExternalTableCatalogUpdate;
    public static AdminTrackableOperationKind IngestionForExternalTableQueryAcceleration;
    public static AdminTrackableOperationKind ExternalTableAccessGroupsSet;
    public static AdminTrackableOperationKind ExternalTableAlter;
    public static AdminTrackableOperationKind ExternalTableCreate;
    public static AdminTrackableOperationKind ExternalTableDrop;
    public static AdminTrackableOperationKind ExternalTableShow;
    public static AdminTrackableOperationKind ExternalTableShowSchema;
    public static AdminTrackableOperationKind ExternalTableShowArtifacts;
    public static AdminTrackableOperationKind ExternalTableAlterDocString;
    public static AdminTrackableOperationKind ExternalTableAlterFolder;
    public static AdminTrackableOperationKind ExternalTableMappingCreate;
    public static AdminTrackableOperationKind ExternalTableMappingDrop;
    public static AdminTrackableOperationKind ExternalTableMappingAlter;
    public static AdminTrackableOperationKind ExternalTableMappingCreateOrAlter;
    public static AdminTrackableOperationKind ExternalTableMappingShow;
    public static AdminTrackableOperationKind ExternalTableMappingsShow;
    public static AdminTrackableOperationKind FabricShow;
    public static AdminTrackableOperationKind FabricSuspendNodes;
    public static AdminTrackableOperationKind FabricResumeNodes;
    public static AdminTrackableOperationKind FabricServiceAssignmentsAlter;
    public static AdminTrackableOperationKind FabricServiceAssignmentsDrop;
    public static AdminTrackableOperationKind FailedIngestionsShow;
    public static AdminTrackableOperationKind FeatureFlagsShow;
    public static AdminTrackableOperationKind FlushTraces;
    public static AdminTrackableOperationKind FollowerClusterConfigurationAlter;
    public static AdminTrackableOperationKind FollowerDatabasesAdd;
    public static AdminTrackableOperationKind FollowerDatabasesDrop;
    public static AdminTrackableOperationKind FollowerDatabasesShow;
    public static AdminTrackableOperationKind FollowerDatabaseAuthorizedPrincipalsModificationKindAlter;
    public static AdminTrackableOperationKind FollowerDatabaseAuthorizedPrincipalsAdd;
    public static AdminTrackableOperationKind FollowerDatabaseAuthorizedPrincipalsDrop;
    public static AdminTrackableOperationKind FollowerDatabaseMetadataOverrideAlterMerge;
    public static AdminTrackableOperationKind FollowerDatabaseCachingPolicyAlter;
    public static AdminTrackableOperationKind FollowerDatabaseCachingPolicyModificationKindAlter;
    public static AdminTrackableOperationKind FollowerDatabaseCachingPolicyDrop;
    public static AdminTrackableOperationKind FollowerDatabaseChildEntitiesAlter;
    public static AdminTrackableOperationKind FollowerDatabasePrefetchExtentsAlter;
    public static AdminTrackableOperationKind FollowerDatabaseChildEntitiesDrop;
    public static AdminTrackableOperationKind FollowerTablesCachingPolicyAlter;
    public static AdminTrackableOperationKind FollowerTablesCachingPolicyDrop;
    public static AdminTrackableOperationKind FreshnessShow;
    public static AdminTrackableOperationKind FunctionsShow;
    public static AdminTrackableOperationKind FunctionShowSchema;
    public static AdminTrackableOperationKind FunctionCreate;
    public static AdminTrackableOperationKind FunctionAlter;
    public static AdminTrackableOperationKind FunctionAlterFolder;
    public static AdminTrackableOperationKind FunctionAlterDocString;
    public static AdminTrackableOperationKind FunctionDrop;
    public static AdminTrackableOperationKind FunctionsDrop;
    public static AdminTrackableOperationKind FunctionSetAccessGroups;
    public static AdminTrackableOperationKind FunctionCreateOrAlter;
    public static AdminTrackableOperationKind IngestionDuplicate;
    public static AdminTrackableOperationKind IngestionMappingsShow;
    public static AdminTrackableOperationKind TableIngestionMappingCreate;
    public static AdminTrackableOperationKind TableIngestionMappingDrop;
    public static AdminTrackableOperationKind TableIngestionMappingAlter;
    public static AdminTrackableOperationKind TableIngestionMappingShow;
    public static AdminTrackableOperationKind TableIngestionMappingsShow;
    public static AdminTrackableOperationKind IngestionBatchingPolicyAlter;
    public static AdminTrackableOperationKind IngestionBatchingPolicyShow;
    public static AdminTrackableOperationKind IngestionBatchingPolicyDrop;
    public static AdminTrackableOperationKind IngestionTimePolicyAlter;
    public static AdminTrackableOperationKind IngestionTimePolicyDrop;
    public static AdminTrackableOperationKind IngestionTimePolicyShow;
    public static AdminTrackableOperationKind IngestionResourcesGet;
    public static AdminTrackableOperationKind JournalShow;
    public static AdminTrackableOperationKind KuiperAccountShow;
    public static AdminTrackableOperationKind KuiperAccountCreate;
    public static AdminTrackableOperationKind KuiperAccountDrop;
    public static AdminTrackableOperationKind KuiperVirtualClusterShow;
    public static AdminTrackableOperationKind KuiperVirtualClusterCreate;
    public static AdminTrackableOperationKind KuiperVirtualClusterDrop;
    public static AdminTrackableOperationKind KuiperClusterShow;
    public static AdminTrackableOperationKind KuiperJobsShow;
    public static AdminTrackableOperationKind KuiperTasksShow;
    public static AdminTrackableOperationKind KuiperResourceTreeShow;
    public static AdminTrackableOperationKind KuiperWorkloadShow;
    public static AdminTrackableOperationKind KuiperWorkloadAlter;
    public static AdminTrackableOperationKind KuiperWorkloadDrop;
    public static AdminTrackableOperationKind KuiperWorkloadGroupShow;
    public static AdminTrackableOperationKind KuiperWorkloadGroupAlter;
    public static AdminTrackableOperationKind KuiperWorkloadGroupDrop;
    public static AdminTrackableOperationKind KustoCrash;
    public static AdminTrackableOperationKind KustoException;
    public static AdminTrackableOperationKind LocalShow;
    public static AdminTrackableOperationKind ManagedIdentityPolicyAlter;
    public static AdminTrackableOperationKind ManagedIdentityPolicyDrop;
    public static AdminTrackableOperationKind ManagedIdentityPolicyShow;
    public static AdminTrackableOperationKind MaterializedViewAccessGroupsSet;
    public static AdminTrackableOperationKind MaterializedViewAlter;
    public static AdminTrackableOperationKind MaterializedViewAlterFolder;
    public static AdminTrackableOperationKind MaterializedViewAlterDocString;
    public static AdminTrackableOperationKind MaterializedViewClearData;
    public static AdminTrackableOperationKind MaterializedViewAlterLookback;
    public static AdminTrackableOperationKind MaterializedViewAlterAutoUpdateSchema;
    public static AdminTrackableOperationKind MaterializedViewClearStatistics;
    public static AdminTrackableOperationKind MaterializedViewCreate;
    public static AdminTrackableOperationKind MaterializedViewCreateOrAlter;
    public static AdminTrackableOperationKind MaterializedViewDrop;
    public static AdminTrackableOperationKind MaterializedViewContinuousRun;
    public static AdminTrackableOperationKind MaterializedViewEnableDisable;
    public static AdminTrackableOperationKind MaterializedViewExtentsShow;
    public static AdminTrackableOperationKind MaterializedViewRun;
    public static AdminTrackableOperationKind MaterializedViewMerge;
    public static AdminTrackableOperationKind MaterializedViewsMonitoring;
    public static AdminTrackableOperationKind MaterializedViewRestoreToVersion;
    public static AdminTrackableOperationKind MaterializedViewRename;
    public static AdminTrackableOperationKind MaterializedViewSchemaShow;
    public static AdminTrackableOperationKind MaterializedViewSetCursor;
    public static AdminTrackableOperationKind MaterializedViewShow;
    public static AdminTrackableOperationKind MaterializedViewShowDiagnostics;
    public static AdminTrackableOperationKind MaterializedViewShowFailures;
    public static AdminTrackableOperationKind MaterializedViewShowStatistics;
    public static AdminTrackableOperationKind MaterializedViewStoredQueryResult;
    public static AdminTrackableOperationKind MaterializedViewSourceTableRename;
    public static AdminTrackableOperationKind MaterializedViewsTrigger;
    public static AdminTrackableOperationKind QueryAccelerationPolicyAlter;
    public static AdminTrackableOperationKind QueryAccelerationPolicyShow;
    public static AdminTrackableOperationKind QueryAccelerationPolicyDrop;
    public static AdminTrackableOperationKind MirroringPolicyAlter;
    public static AdminTrackableOperationKind MirroringPolicyDrop;
    public static AdminTrackableOperationKind MirroringPolicyShow;
    public static AdminTrackableOperationKind MirroringPolicyShowStatus;
    public static AdminTrackableOperationKind MemoryShow;
    public static AdminTrackableOperationKind MemPoolsShow;
    public static AdminTrackableOperationKind MultiDatabaseAdminsPolicyShow;
    public static AdminTrackableOperationKind MultiDatabaseAdminsPolicyAlter;
    public static AdminTrackableOperationKind DatabaseDiagnosticsPolicyAlter;
    public static AdminTrackableOperationKind DatabaseDiagnosticsPolicyShow;
    public static AdminTrackableOperationKind DatabaseDiagnosticsPolicyDrop;
    public static AdminTrackableOperationKind OperationCancel;
    public static AdminTrackableOperationKind OperationsShow;
    public static AdminTrackableOperationKind OperationShowDetails;
    public static AdminTrackableOperationKind PluginDisable;
    public static AdminTrackableOperationKind PluginEnable;
    public static AdminTrackableOperationKind PluginShow;
    public static AdminTrackableOperationKind PrincipalAccessShow;
    public static AdminTrackableOperationKind PrincipalRolesShow;
    public static AdminTrackableOperationKind PurgeCleanup;
    public static AdminTrackableOperationKind PurgeShow;
    public static AdminTrackableOperationKind QueriesShow;
    public static AdminTrackableOperationKind QueryPlanShow;
    public static AdminTrackableOperationKind QueryCallTreeShow;
    public static AdminTrackableOperationKind QueryExecutionShow;
    public static AdminTrackableOperationKind QueryWeakConsistencyPolicyAlter;
    public static AdminTrackableOperationKind QueryWeakConsistencyPolicyShow;
    public static AdminTrackableOperationKind ReplaceContainersStorageAccounts;
    public static AdminTrackableOperationKind RequestSupportCreate;
    public static AdminTrackableOperationKind RequestSupportShow;
    public static AdminTrackableOperationKind ResultsTrace;
    public static AdminTrackableOperationKind RestrictedViewAccessPolicyAlter;
    public static AdminTrackableOperationKind RestrictedViewAccessPolicyDrop;
    public static AdminTrackableOperationKind RestrictedViewAccessPolicyShow;
    public static AdminTrackableOperationKind RetentionPolicyAlter;
    public static AdminTrackableOperationKind RetentionPolicyShow;
    public static AdminTrackableOperationKind RetentionPolicyDrop;
    public static AdminTrackableOperationKind RowOrderPolicyAlter;
    public static AdminTrackableOperationKind RowOrderPolicyDrop;
    public static AdminTrackableOperationKind RowOrderPolicyShow;
    public static AdminTrackableOperationKind RowStoreAttach;
    public static AdminTrackableOperationKind RowStoreCreate;
    public static AdminTrackableOperationKind RowStoreBlockKeys;
    public static AdminTrackableOperationKind RowStoreDrop;
    public static AdminTrackableOperationKind RowStoresShow;
    public static AdminTrackableOperationKind RowStoreTransactionsShow;
    public static AdminTrackableOperationKind RowStorePolicyAlter;
    public static AdminTrackableOperationKind RowStorePolicyDrop;
    public static AdminTrackableOperationKind RowStorePolicyShow;
    public static AdminTrackableOperationKind RowStoreKuiperPodIndexAlter;
    public static AdminTrackableOperationKind RowLevelSecurityPolicyAlter;
    public static AdminTrackableOperationKind RowLevelSecurityPolicyDrop;
    public static AdminTrackableOperationKind RowLevelSecurityPolicyShow;
    public static AdminTrackableOperationKind RunningQueryCancel;
    public static AdminTrackableOperationKind RunningQueriesShow;
    public static AdminTrackableOperationKind SandboxPolicyAlter;
    public static AdminTrackableOperationKind SandboxPolicyDrop;
    public static AdminTrackableOperationKind SandboxPolicyShow;
    public static AdminTrackableOperationKind SandboxesStatsShow;
    public static AdminTrackableOperationKind ShardWarming;
    public static AdminTrackableOperationKind ShardsGroupingPolicyAlter;
    public static AdminTrackableOperationKind ShardsGroupingPolicyShow;
    public static AdminTrackableOperationKind ShardsGroupingPolicyDrop;
    public static AdminTrackableOperationKind SchemaShow;
    public static AdminTrackableOperationKind SchemaShowAsJson;
    public static AdminTrackableOperationKind ServicePointsShow;
    public static AdminTrackableOperationKind SharedContainersShow;
    public static AdminTrackableOperationKind StackSampleShow;
    public static AdminTrackableOperationKind StorageArtifactsCleanup;
    public static AdminTrackableOperationKind StorageContainersUsageShow;
    public static AdminTrackableOperationKind StoredQueryResultContainerDrop;
    public static AdminTrackableOperationKind StoredQueryResultContainerDropUnused;
    public static AdminTrackableOperationKind StoredQueryResultSet;
    public static AdminTrackableOperationKind StoredQueryResultSetOrReplace;
    public static AdminTrackableOperationKind StoredQueryResultDrop;
    public static AdminTrackableOperationKind StoredQueryResultsDrop;
    public static AdminTrackableOperationKind StoredQueryResultsShow;
    public static AdminTrackableOperationKind StreamingIngestionFailuresShow;
    public static AdminTrackableOperationKind StreamingIngestionStatisticsShow;
    public static AdminTrackableOperationKind TableAccessGroupsSet;
    public static AdminTrackableOperationKind TableAppend;
    public static AdminTrackableOperationKind TableCreate;
    public static AdminTrackableOperationKind TableCreateBasedOnAnother;
    public static AdminTrackableOperationKind TableAlter;
    public static AdminTrackableOperationKind TableAlterFolder;
    public static AdminTrackableOperationKind TableAlterDocString;
    public static AdminTrackableOperationKind TableDimensionsShow;
    public static AdminTrackableOperationKind TableClearData;
    public static AdminTrackableOperationKind TableDrop;
    public static AdminTrackableOperationKind TableExtentsShow;
    public static AdminTrackableOperationKind TableExtentsShuffle;
    public static AdminTrackableOperationKind TableRename;
    public static AdminTrackableOperationKind TableReplace;
    public static AdminTrackableOperationKind TableShardGroupsShowCommand;
    public static AdminTrackableOperationKind TableShardsGroupShowCommand;
    public static AdminTrackableOperationKind TableStreamingIngestionSchemaCacheClear;
    public static AdminTrackableOperationKind TableStreamingIngestionPolicyAlter;
    public static AdminTrackableOperationKind TableStreamingIngestionPolicyDrop;
    public static AdminTrackableOperationKind TableStreamingIngestionPolicyShow;
    public static AdminTrackableOperationKind TableRowStoreReferencesAlter;
    public static AdminTrackableOperationKind TableRowStoreReferencesSet;
    public static AdminTrackableOperationKind TableRowStoreReferencesShow;
    public static AdminTrackableOperationKind TableRowStoreSealInfoShow;
    public static AdminTrackableOperationKind TableRowStoresShow;
    public static AdminTrackableOperationKind TableSeal;
    public static AdminTrackableOperationKind TableSet;
    public static AdminTrackableOperationKind TableSetOrAppend;
    public static AdminTrackableOperationKind TableSetOrReplace;
    public static AdminTrackableOperationKind TableShow;
    public static AdminTrackableOperationKind TableShowSchema;
    public static AdminTrackableOperationKind TableStatisticsShow;
    public static AdminTrackableOperationKind TableStatisticsAlter;
    public static AdminTrackableOperationKind TableStatisticsMethodAlter;
    public static AdminTrackableOperationKind TablesWithOldStatisticsShow;
    public static AdminTrackableOperationKind TableDeleteRecords;
    public static AdminTrackableOperationKind TableDropUndo;
    public static AdminTrackableOperationKind TableRecordsPurge;
    public static AdminTrackableOperationKind TableRecordsPurgeResume;
    public static AdminTrackableOperationKind TableRecordsPurgeWhatIf;
    public static AdminTrackableOperationKind TablePurge;
    public static AdminTrackableOperationKind TableMirroringPolicyTemplateApplyToTables;
    public static AdminTrackableOperationKind TableMirroringPolicyTemplatesAlter;
    public static AdminTrackableOperationKind TableMirroringPolicyTemplatesDrop;
    public static AdminTrackableOperationKind TableMirroringPolicyTemplatesShow;
    public static AdminTrackableOperationKind TablesDefine;
    public static AdminTrackableOperationKind TablesRename;
    public static AdminTrackableOperationKind TablesShow;
    public static AdminTrackableOperationKind TablesDrop;
    public static AdminTrackableOperationKind TablesPoliciesShow;
    public static AdminTrackableOperationKind TcpConnectionsShow;
    public static AdminTrackableOperationKind TcpPortsShow;
    public static AdminTrackableOperationKind TempStorageCreate;
    public static AdminTrackableOperationKind TempStorageDrop;
    public static AdminTrackableOperationKind ThreadPoolsShow;
    public static AdminTrackableOperationKind TraceLevelSet;
    public static AdminTrackableOperationKind UpdatePolicyAlter;
    public static AdminTrackableOperationKind UpdatePolicyShow;
    public static AdminTrackableOperationKind UpdatePolicyDrop;
    public static AdminTrackableOperationKind UserRolesShow;
    public static AdminTrackableOperationKind VersionShow;
    public static AdminTrackableOperationKind VirtualClusterAlter;
    public static AdminTrackableOperationKind VirtualClusterCreate;
    public static AdminTrackableOperationKind VirtualClusterDetach;
    public static AdminTrackableOperationKind VirtualClusterShow;
    public static AdminTrackableOperationKind VirtualClusterSuspend;
    public static AdminTrackableOperationKind WarmingPolicyAlter;
    public static AdminTrackableOperationKind WarmingPolicyDrop;
    public static AdminTrackableOperationKind WarmingPolicyShow;
}
public class Kusto.Data.AggregatorScaleCommandResult : object {
    public string property;
    public string value;
}
public class Kusto.Data.AlterPartitionMetadataCommandResult : object {
    public string Status;
}
[DataContractAttribute]
public class Kusto.Data.AutoDeletePolicy : object {
    [JsonPropertyAttribute("ExpiryDate")]
[DataMemberAttribute]
private Nullable`1<DateTime> m_expiryDate;
    [JsonPropertyAttribute("DeleteIfNotEmpty")]
[DataMemberAttribute]
private bool m_deleteIfNotEmpty;
    [JsonIgnoreAttribute]
public Nullable`1<DateTime> ExpiryDate { get; }
    [JsonIgnoreAttribute]
public bool DeleteIfNotEmpty { get; }
    public AutoDeletePolicy(Nullable`1<DateTime> expiryDate, bool deleteIfNotEmpty);
    public AutoDeletePolicy(AutoDeletePolicy other);
    public bool IsValid(String& error);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AutoDeletePolicy other);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public AutoDeletePolicy NewSetExpiryDate(Nullable`1<DateTime> expiryDate);
    public AutoDeletePolicy NewSetDeleteIfNotEmpty(bool deleteIfNotEmpty);
    public Nullable`1<DateTime> get_ExpiryDate();
    public bool get_DeleteIfNotEmpty();
}
public class Kusto.Data.BasicAuthUserCreateCommandResult : object {
    public string UserName;
    public string Token;
    public string ImportantNote;
}
public class Kusto.Data.BasicAuthUserRemoveCommandResult : object {
    public string RemovedUserName;
}
public class Kusto.Data.BasicAuthUsersShowCommandResult : object {
    public string UserName;
}
public class Kusto.Data.BridgeClusterSettingsCommandResult : object {
    public string SettingsVersion;
    public string BridgeType;
    public string Settings;
}
public class Kusto.Data.BridgeSingleStringCommandResult : object {
    public string Status;
}
public class Kusto.Data.BridgeVersionShowCommandResult : object {
    public string BuildVersion;
    public DateTime BuildTime;
    public string ServiceType;
    public string ProductVersion;
    public string ServiceSubType;
}
public class Kusto.Data.CacheAlterCommandResult : object {
    public string NodeId;
    public string Status;
}
public class Kusto.Data.CacheShowCommandResult : object {
    public string NodeId;
    public Nullable`1<long> WarmedShardsSize;
    public Nullable`1<long> ShardsSizeToWarm;
    public Nullable`1<long> HotShardsSize;
}
public class Kusto.Data.CachingPolicyCommandResult : object {
    public string Entity;
    public string Database;
    public string Table;
    public string Column;
    public string Policy;
    public string Action;
}
[DataContractAttribute]
public class Kusto.Data.CalloutPolicy : object {
    private Regex m_materializedCalloutUriRegex;
    [JsonPropertyAttribute("CalloutType")]
[DataMemberAttribute]
private string m_calloutType;
    [JsonPropertyAttribute("CalloutUriRegex")]
[DataMemberAttribute]
private string m_calloutUriRegex;
    [JsonPropertyAttribute("CanCall")]
[DataMemberAttribute]
private bool m_canCall;
    [JsonIgnoreAttribute]
public string CalloutType { get; }
    [JsonIgnoreAttribute]
public string CalloutUriRegex { get; }
    [JsonIgnoreAttribute]
public bool CanCall { get; }
    public CalloutPolicy(string calloutType, string calloutUriRegex, bool canCall);
    public CalloutPolicy(CalloutPolicy other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public bool IsValid(String& errorMessage);
    public sealed virtual bool Equals(CalloutPolicy other);
    public Regex GetRegex();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public CalloutPolicy NewSetCalloutType(string calloutType);
    public CalloutPolicy NewSetCalloutUriRegex(string calloutUriRegex);
    public CalloutPolicy NewSetCanCall(bool canCall);
    public string get_CalloutType();
    public string get_CalloutUriRegex();
    public bool get_CanCall();
}
[DataContractAttribute]
public class Kusto.Data.CapacityPolicy : object {
    public static CapacityPolicy Default;
    [JsonPropertyAttribute("IngestionCapacity")]
[DataMemberAttribute]
private IngestionCapacity m_ingestionCapacity;
    [JsonPropertyAttribute("ExtentsMergeCapacity")]
[DataMemberAttribute]
private ExtentsMergeCapacity m_extentsMergeCapacity;
    [JsonPropertyAttribute("ExtentsPurgeRebuildCapacity")]
[DataMemberAttribute]
private ExtentsPurgeRebuildCapacity m_extentsPurgeRebuildCapacity;
    [JsonPropertyAttribute("ExportCapacity")]
[DataMemberAttribute]
private ExportCapacity m_exportCapacity;
    [JsonPropertyAttribute("ExtentsPartitionCapacity")]
[DataMemberAttribute]
private ExtentsPartitionCapacity m_extentsPartitionCapacity;
    [JsonPropertyAttribute("StreamingIngestionPostProcessingCapacity")]
[DataMemberAttribute]
private StreamingIngestionPostProcessingCapacity m_streamingIngestionPostProcessingCapacity;
    [JsonPropertyAttribute("MaterializedViewsCapacity")]
[DataMemberAttribute]
private MaterializedViewsCapacity m_materializedViewsCapacity;
    [JsonPropertyAttribute("StoredQueryResultsCapacity")]
[DataMemberAttribute]
private StoredQueryResultsCapacity m_storedQueryResultsCapacity;
    [JsonPropertyAttribute("PurgeStorageArtifactsCleanupCapacity")]
[DataMemberAttribute]
private PurgeStorageArtifactsCleanupCapacity m_purgeStorageArtifactsCleanupCapacity;
    [JsonPropertyAttribute("PeriodicStorageArtifactsCleanupCapacity")]
[DataMemberAttribute]
private PeriodicStorageArtifactsCleanupCapacity m_periodicStorageArtifactsCleanupCapacity;
    [JsonPropertyAttribute("MirroringCapacity")]
[DataMemberAttribute]
private MirroringCapacity m_mirroringCapacity;
    [JsonPropertyAttribute("QueryAccelerationCapacity")]
[DataMemberAttribute]
private QueryAccelerationCapacity m_queryAccelerationCapacity;
    [JsonIgnoreAttribute]
public IngestionCapacity IngestionCapacity { get; }
    [JsonIgnoreAttribute]
public ExtentsMergeCapacity ExtentsMergeCapacity { get; }
    [JsonIgnoreAttribute]
public ExtentsPurgeRebuildCapacity ExtentsPurgeRebuildCapacity { get; }
    [JsonIgnoreAttribute]
public ExportCapacity ExportCapacity { get; }
    [JsonIgnoreAttribute]
public ExtentsPartitionCapacity ExtentsPartitionCapacity { get; }
    [JsonIgnoreAttribute]
public StreamingIngestionPostProcessingCapacity StreamingIngestionPostProcessingCapacity { get; }
    [JsonIgnoreAttribute]
public MaterializedViewsCapacity MaterializedViewsCapacity { get; }
    [JsonIgnoreAttribute]
public StoredQueryResultsCapacity StoredQueryResultsCapacity { get; }
    [JsonIgnoreAttribute]
public PurgeStorageArtifactsCleanupCapacity PurgeStorageArtifactsCleanupCapacity { get; }
    [JsonIgnoreAttribute]
public PeriodicStorageArtifactsCleanupCapacity PeriodicStorageArtifactsCleanupCapacity { get; }
    [JsonIgnoreAttribute]
public MirroringCapacity MirroringCapacity { get; }
    [JsonIgnoreAttribute]
public QueryAccelerationCapacity QueryAccelerationCapacity { get; }
    public CapacityPolicy(IngestionCapacity ingestionCapacity, ExtentsMergeCapacity extentsMergeCapacity, ExtentsPurgeRebuildCapacity extentsPurgeRebuildCapacity, ExportCapacity exportCapacity, ExtentsPartitionCapacity extentsPartitionCapacity, StreamingIngestionPostProcessingCapacity streamingIngestionPostProcessingCapacity, MaterializedViewsCapacity materializedViewsCapacity, StoredQueryResultsCapacity storedQueryResultsCapacity, PurgeStorageArtifactsCleanupCapacity purgeStorageArtifactsCleanupCapacity, PeriodicStorageArtifactsCleanupCapacity periodicStorageArtifactsCleanupCapacity, MirroringCapacity mirroringCapacity, QueryAccelerationCapacity queryAccelerationCapacity);
    public CapacityPolicy(CapacityPolicy other);
    private static CapacityPolicy();
    public CapacityPolicy Merge(string partialPolicyJson);
    public bool IsValid(String& errorMessage);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CapacityPolicy other);
    public virtual string ToString();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public CapacityPolicy NewSetIngestionCapacity(IngestionCapacity ingestionCapacity);
    public CapacityPolicy NewSetExtentsMergeCapacity(ExtentsMergeCapacity extentsMergeCapacity);
    public CapacityPolicy NewSetExtentsPurgeRebuildCapacity(ExtentsPurgeRebuildCapacity extentsPurgeRebuildCapacity);
    public CapacityPolicy NewSetExportCapacity(ExportCapacity exportCapacity);
    public CapacityPolicy NewSetExtentsPartitionCapacity(ExtentsPartitionCapacity extentsPartitionCapacity);
    public CapacityPolicy NewSetStreamingIngestionPostProcessingCapacity(StreamingIngestionPostProcessingCapacity streamingIngestionPostProcessingCapacity);
    public CapacityPolicy NewSetMaterializedViewsCapacity(MaterializedViewsCapacity materializedViewsCapacity);
    public CapacityPolicy NewSetStoredQueryResultsCapacity(StoredQueryResultsCapacity storedQueryResultsCapacity);
    public CapacityPolicy NewSetPurgeStorageArtifactsCleanupCapacity(PurgeStorageArtifactsCleanupCapacity purgeStorageArtifactsCleanupCapacity);
    public CapacityPolicy NewSetPeriodicStorageArtifactsCleanupCapacity(PeriodicStorageArtifactsCleanupCapacity periodicStorageArtifactsCleanupCapacity);
    public CapacityPolicy NewSetMirroringCapacity(MirroringCapacity mirroringCapacity);
    public CapacityPolicy NewSetQueryAccelerationCapacity(QueryAccelerationCapacity queryAccelerationCapacity);
    public IngestionCapacity get_IngestionCapacity();
    public ExtentsMergeCapacity get_ExtentsMergeCapacity();
    public ExtentsPurgeRebuildCapacity get_ExtentsPurgeRebuildCapacity();
    public ExportCapacity get_ExportCapacity();
    public ExtentsPartitionCapacity get_ExtentsPartitionCapacity();
    public StreamingIngestionPostProcessingCapacity get_StreamingIngestionPostProcessingCapacity();
    public MaterializedViewsCapacity get_MaterializedViewsCapacity();
    public StoredQueryResultsCapacity get_StoredQueryResultsCapacity();
    public PurgeStorageArtifactsCleanupCapacity get_PurgeStorageArtifactsCleanupCapacity();
    public PeriodicStorageArtifactsCleanupCapacity get_PeriodicStorageArtifactsCleanupCapacity();
    public MirroringCapacity get_MirroringCapacity();
    public QueryAccelerationCapacity get_QueryAccelerationCapacity();
}
public class Kusto.Data.CapacityShowCommandResult : object {
    public string Resource;
    public long Total;
    public long Consumed;
    public long Remaining;
    public string Origin;
}
public enum Kusto.Data.CapacityShowVirtualResourceKind : Enum {
    public int value__;
    public static CapacityShowVirtualResourceKind All;
    public static CapacityShowVirtualResourceKind Ingestions;
    public static CapacityShowVirtualResourceKind ExtentsMerge;
    public static CapacityShowVirtualResourceKind TablePurge;
    public static CapacityShowVirtualResourceKind DataExport;
    public static CapacityShowVirtualResourceKind ExtentsPartition;
    public static CapacityShowVirtualResourceKind StreamingIngestionPostProcessing;
    public static CapacityShowVirtualResourceKind MaterializedView;
    public static CapacityShowVirtualResourceKind Queries;
    public static CapacityShowVirtualResourceKind StoredQueryResults;
    public static CapacityShowVirtualResourceKind PurgeStorageArtifactsCleanup;
    public static CapacityShowVirtualResourceKind PeriodicStorageArtifactsCleanup;
    public static CapacityShowVirtualResourceKind Mirroring;
    public static CapacityShowVirtualResourceKind QueryAcceleration;
}
public class Kusto.Data.CleanOperationShowCommandResult : object {
    public Guid OperationId;
    public DateTime LastUpdatedOn;
    public string Database;
    public string DatabaseVersion;
    public string State;
}
public class Kusto.Data.CloudSettingsShowCommandResult : object {
    public string CloudSettings;
}
[DataContractAttribute]
public class Kusto.Data.ClusterAdminPolicy : object {
    private static JsonConverter s_policyShowJsonConverter;
    public static JsonSerializerSettings PolicyShowJsonSettings;
    public static ClusterAdminPolicy Default;
    [JsonPropertyAttribute("SlackerSettings")]
[DataMemberAttribute]
private SlackerSettings m_slackerSettings;
    [JsonIgnoreAttribute]
public SlackerSettings SlackerSettings { get; }
    public ClusterAdminPolicy(SlackerSettings slackerSettings);
    public ClusterAdminPolicy(ClusterAdminPolicy other);
    private static ClusterAdminPolicy();
    public ClusterAdminPolicy Merge(string partialPolicyJson);
    public bool IsValid(String& errorMessage);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual object Clone();
    private void AfterDeserialized();
    public bool EqualsIgnoreOrigin(ClusterAdminPolicy other);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public ClusterAdminPolicy NewSetSlackerSettings(SlackerSettings slackerSettings);
    public SlackerSettings get_SlackerSettings();
}
public class Kusto.Data.ClusterAdminStateShowCommandResult : object {
    public string NodeId;
    public string Name;
    public DateTime StartTime;
    public bool Reserved0;
    public bool IsClusterAdminReady;
    public Nullable`1<DateTime> PrimarySince;
    public string CurrentStateDescription;
    public bool IsFabricReady;
}
public class Kusto.Data.ClusterClearCredStoreCacheCommandResult : object {
    public string NodeId;
    public string Status;
}
public class Kusto.Data.ClusterClearGroupMembershipCacheCommandResult : object {
    public string NodeId;
    public string Status;
}
public class Kusto.Data.ClusterConfigurationShowCmCommandResult : object {
    public string Cluster;
    public Guid ClientSubscription;
    public string TenantId;
    public string ResourceGroup;
    public string ResourceId;
}
public class Kusto.Data.ClusterCreateForTenantGroupCommandResult : object {
    public string EngineUri;
    public string DataManagementUri;
}
[DataContractAttribute]
public class Kusto.Data.ClusterDataMovementRestrictionPolicy : object {
    [JsonPropertyAttribute("Labels")]
private ImmutableArray`1<string> m_labels;
    [JsonIgnoreAttribute]
[DataMemberAttribute]
private String[] m_transportLabels;
    [JsonIgnoreAttribute]
public ImmutableArray`1<string> Labels { get; }
    public ClusterDataMovementRestrictionPolicy(ImmutableArray`1<string> labels);
    public ClusterDataMovementRestrictionPolicy(ClusterDataMovementRestrictionPolicy other);
    public sealed virtual bool Equals(ClusterDataMovementRestrictionPolicy other);
    public virtual string ToString();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public ClusterDataMovementRestrictionPolicy NewSetLabels(ImmutableArray`1<string> labels);
    public ImmutableArray`1<string> get_Labels();
}
public class Kusto.Data.ClusterExternalArtifactsCacheClearCommandResult : object {
    public string ExternalArtifactUri;
    public string State;
}
public class Kusto.Data.ClusterMaintenanceModeSetCommandResult : object {
    public bool MaintenanceModeEnabled;
}
public class Kusto.Data.ClusterManagementResourcesShowCommandResult : object {
    public string ClusterResourceId;
}
public class Kusto.Data.ClusterMonitoringShowCommandResult : object {
    public string KustoAccount;
    public string ClusterAlias;
    public string GenevaMonitoringAccount;
    public string DataCenter;
    public string CloudName;
    public string CloudResourceId;
    public string VirtualClusterName;
}
public class Kusto.Data.ClusterNodesToScaleInShowCommandResult : object {
    public string NodeId;
}
public class Kusto.Data.ClusterServicesShowCommandResult : object {
    public string NodeId;
    public bool IsClusterAdmin;
    public bool IsFabricManager;
    public bool IsDatabaseAdmin;
    public bool IsWeakConsistencyNode;
    public bool IsRowStoreHostNode;
    public bool IsDataNode;
}
public class Kusto.Data.ClusterSharedContainersShowCommandResult : object {
    public string ContainerPath;
    public long Cardinality;
    public string SharedDatabases;
}
public class Kusto.Data.ClusterShowCommandResult : object {
    public string NodeId;
    public string Address;
    public string Name;
    public DateTime StartTime;
    public bool IsAdmin;
    public long MachineTotalMemory;
    public long MachineAvailableMemory;
    public int ProcessorCount;
    public string EnvironmentDescription;
    public string ProductVersion;
    public int Reserved0;
}
public class Kusto.Data.ClusterShowDetailsCommandResult : object {
    public string NodeId;
    public string Address;
    public string Name;
    public DateTime StartTime;
    public int AssignedHotExtents;
    public bool IsAdmin;
    public long MachineTotalMemory;
    public long MachineAvailableMemory;
    public int ProcessorCount;
    public long HotExtentsOriginalSize;
    public long HotExtentsSize;
    public string EnvironmentDescription;
    public string ProductVersion;
    public int Reserved0;
    public string ClockDescription;
    public string RuntimeDescription;
}
public class Kusto.Data.ClusterShowNetworkCommandResult : object {
    public string Address;
    public TimeSpan TimeToFirstByte;
    public TimeSpan TimeToLastByte;
    public double BytesPerSecond;
}
public class Kusto.Data.ClusterStorageAccountsShowCommandResult : object {
    public string StorageAccountName;
    public string StorageAccountPurpose;
    public string StorageAccountAccessMode;
}
[DataContractAttribute]
public class Kusto.Data.ClusterStreamingIngestionPolicy : object {
    public static TimeSpan MaximalIngestionRequestTimeout;
    public static TimeSpan MinimalIngestionRequestTimeout;
    [CompilerGeneratedAttribute]
private static ClusterStreamingIngestionPolicy <Default>k__BackingField;
    private static TimeSpan c_defaultIngestionRequestTimeout;
    [JsonPropertyAttribute("IngestionRequestTimeout")]
[DataMemberAttribute]
private TimeSpan m_ingestionRequestTimeout;
    public static ClusterStreamingIngestionPolicy Default { get; }
    [JsonIgnoreAttribute]
public TimeSpan IngestionRequestTimeout { get; }
    private static ClusterStreamingIngestionPolicy();
    public ClusterStreamingIngestionPolicy(TimeSpan ingestionRequestTimeout);
    public ClusterStreamingIngestionPolicy(ClusterStreamingIngestionPolicy other);
    [CompilerGeneratedAttribute]
public static ClusterStreamingIngestionPolicy get_Default();
    public ClusterStreamingIngestionPolicy Merge(string partialPolicyJson);
    public bool IsValid(String& errorMsg);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public ClusterStreamingIngestionPolicy NewSetIngestionRequestTimeout(TimeSpan ingestionRequestTimeout);
    public TimeSpan get_IngestionRequestTimeout();
}
public class Kusto.Data.ClusterWorkloadGroupsShowCommandResult : object {
    public string WorkloadGroupName;
    public string WorkloadGroup;
}
public class Kusto.Data.ColumnAlterCommandResult : object {
    public string EntityName;
    public string DataType;
    public string Policy;
}
[DataContractAttribute]
public class Kusto.Data.ColumnDataMovementRestrictionPolicy : object {
    [JsonPropertyAttribute("IsSensitive")]
[DataMemberAttribute]
private bool m_isSensitive;
    [JsonIgnoreAttribute]
public bool IsSensitive { get; }
    public ColumnDataMovementRestrictionPolicy(bool isSensitive);
    public ColumnDataMovementRestrictionPolicy(ColumnDataMovementRestrictionPolicy other);
    public sealed virtual bool Equals(ColumnDataMovementRestrictionPolicy other);
    public virtual string ToString();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public ColumnDataMovementRestrictionPolicy NewSetIsSensitive(bool isSensitive);
    public bool get_IsSensitive();
}
[ExtensionAttribute]
public static class Kusto.Data.ColumnDataMovementRestrictionPolicyUtils : object {
    [ExtensionAttribute]
public static bool SafeEquals(ColumnDataMovementRestrictionPolicy policy, ColumnDataMovementRestrictionPolicy other);
}
public class Kusto.Data.ColumnsRenameCommandResult : object {
    public string DatabaseName;
    public string TableName;
    public string ColumnName;
    public string ColumnType;
}
public class Kusto.Data.CommandsAndQueriesShowCommandResult : object {
    public string ClientActivityId;
    public string CommandType;
    public string Text;
    public string Database;
    public DateTime StartedOn;
    public DateTime LastUpdatedOn;
    public TimeSpan Duration;
    public string State;
    public string FailureReason;
    public Guid RootActivityId;
    public string User;
    public string Application;
    public string Principal;
    public string ClientRequestProperties;
    public TimeSpan TotalCpu;
    public long MemoryPeak;
    public string CacheStatistics;
    public string ScannedExtentsStatistics;
    public string ResultSetStatistics;
    public string WorkloadGroup;
}
public class Kusto.Data.CommandsShowCommandResult : object {
    public string ClientActivityId;
    public string CommandType;
    public string Text;
    public string Database;
    public DateTime StartedOn;
    public DateTime LastUpdatedOn;
    public TimeSpan Duration;
    public string State;
    public Guid RootActivityId;
    public string User;
    public string FailureReason;
    public string Application;
    public string Principal;
    public TimeSpan TotalCpu;
    public string ResourcesUtilization;
    public string ClientRequestProperties;
    public string WorkloadGroup;
}
public enum Kusto.Data.Common.AdminCommandErrorCode : Enum {
    public UInt32 value__;
    public static AdminCommandErrorCode FollowerDatabase_UnsupportedPrincipalRole;
}
[ExtensionAttribute]
public static class Kusto.Data.Common.AdminProviderExtension : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteControlCommand(ICslAdminProvider adminProvider, string command, ClientRequestProperties properties);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteControlCommand(ICslAdminProvider adminProvider, string databaseName, string command, ClientRequestProperties properties);
    [AsyncStateMachineAttribute("Kusto.Data.Common.AdminProviderExtension/<ExecuteControlCommandAsync>d__2`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteControlCommandAsync(ICslAdminProvider adminProvider, string command, ClientRequestProperties properties);
    [AsyncStateMachineAttribute("Kusto.Data.Common.AdminProviderExtension/<ExecuteControlCommandAsync>d__3`1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<T>> ExecuteControlCommandAsync(ICslAdminProvider adminProvider, string databaseName, string command, ClientRequestProperties properties);
}
[ObsoleteAttribute("This class is obsolete. Please use Kusto.Data.Common.ColumnMapping instead")]
public class Kusto.Data.Common.AvroColumnMapping : object {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnType>k__BackingField;
    [JsonPropertyAttribute("column")]
public string ColumnName { get; public set; }
    [JsonPropertyAttribute("field")]
public string FieldName { get; public set; }
    [JsonPropertyAttribute("datatype")]
public string ColumnType { get; public set; }
    [JsonIgnoreAttribute]
public bool IsValid { get; }
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnType();
    [CompilerGeneratedAttribute]
public void set_ColumnType(string value);
    public AvroColumnMapping Clone();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public bool get_IsValid();
}
[DebuggerDisplayAttribute("The set of properties sent by a Kusto client to the service that control request processing.")]
[DataContractAttribute]
[KnownTypeAttribute("Kusto.Data.QueryDataScope")]
public class Kusto.Data.Common.ClientRequestProperties : object {
    [JsonIgnoreAttribute]
private static JsonSerializerSettings s_deSerializationSettings;
    [JsonPropertyAttribute("Options")]
[DataMemberAttribute]
private Dictionary`2<string, object> m_options;
    [JsonPropertyAttribute("Parameters")]
[DataMemberAttribute]
private Dictionary`2<string, string> m_parameters;
    [DebuggerDisplayAttribute("If specified, indicates that the request can't write anything. [Boolean]")]
public static string OptionRequestReadOnly;
    [DebuggerDisplayAttribute("If specified, indicates that the request can't call-out to a user-provided service. [Boolean]")]
public static string OptionRequestCalloutDisabled;
    [DebuggerDisplayAttribute("If specified, indicates that the request can't access remote databases and clusters. [Boolean]")]
public static string OptionRequestRemoteEntitiesDisabled;
    [DebuggerDisplayAttribute("If specified, indicates that the request can't invoke code in the sandbox. [Boolean]")]
public static string OptionRequestSandboxedExecutionDisabled;
    [DebuggerDisplayAttribute("If specified, indicates that the request can't access external tables. [Boolean]")]
public static string OptionRequestExternalTableDisabled;
    [DebuggerDisplayAttribute("If specified, indicates that the request can't access external data (using externaldata operator) or external tables. [Boolean]")]
public static string OptionRequestExternalDataDisabled;
    [DebuggerDisplayAttribute("If specified, indicates that the service should not impersonate the caller's identity. [Boolean]")]
public static string OptionDoNotImpersonate;
    [DebuggerDisplayAttribute("If specified, forces Row Level Security rules, even if row_level_security policy is disabled [Boolean]")]
public static string OptionQueryForceRowLevelSecurity;
    [DebuggerDisplayAttribute("If specified, blocks access to tables for which row_level_security policy is enabled [Boolean]")]
public static string OptionRequestBlockRowLevelSecurity;
    [DebuggerDisplayAttribute("If set, retrieves the schema of each tabular data in the results of the query instead of the data itself. [Boolean]")]
public static string OptionQueryResultsApplyGetSchema;
    [DebuggerDisplayAttribute("When evaluating the bin_auto() function, the start value to use. [LiteralExpression]")]
public static string QueryBinAutoAt;
    [DebuggerDisplayAttribute("When evaluating the bin_auto() function, the bin size value to use. [LiteralExpression]")]
public static string QueryBinAutoSize;
    [DebuggerDisplayAttribute("Database pattern overrides database name and picks the 1st database that matches the pattern. '*' means any database that user has access to. [String][Internal]")]
public static string OptionDatabasePattern;
    [DebuggerDisplayAttribute("Controls the query's datascope -- whether the query applies to all data or just part of it. ['default', 'all', or 'hotcache']")]
public static string OptionQueryDataScope;
    public static string OptionQueryDataScope_Default;
    public static string OptionQueryDataScope_All;
    public static string OptionQueryDataScope_HotCache;
    [DebuggerDisplayAttribute("Controls the column name for the query's datetime scope (query_datetimescope_to / query_datetimescope_from). [String]")]
public static string OptionQueryDateTimeScopeColumn;
    [DebuggerDisplayAttribute("Controls the query's datetime scope (earliest) -- used as auto-applied filter on query_datetimescope_column only (if defined). [DateTime]")]
public static string OptionQueryDateTimeScopeFrom;
    [DebuggerDisplayAttribute("Controls the query's datetime scope (latest) -- used as auto-applied filter on query_datetimescope_column only (if defined). [DateTime]")]
public static string OptionQueryDateTimeScopeTo;
    [DebuggerDisplayAttribute("List of table names that should be scoped to cursor_after_default .. cursor_before_or_at_default (upper bound is optional). [dynamic]")]
public static string OptionQueryCursorScopedTables;
    [DebuggerDisplayAttribute("Disables usage of cursor functions in the context of the query. [boolean]")]
public static string OptionQueryCursorDisabled;
    [DebuggerDisplayAttribute("Enables logging of the query parameters, so that they can be viewed later in the `.show queries` journal. [Boolean]")]
public static string OptionQueryLogQueryParameters;
    [DebuggerDisplayAttribute("Controls how the query text is to be interpreted. ['csl','kql' or 'sql']")]
public static string OptionQueryLanguage;
    public static string OptionQueryLanguage_CSL;
    public static string OptionQueryLanguage_SQL;
    public static string OptionQueryLanguage_KQL;
    [DebuggerDisplayAttribute("Overrides the datetime value returned by the now(0s) function. [DateTime]")]
public static string OptionQueryNow;
    [DebuggerDisplayAttribute("Overrides the cursor value returned by the cursor_current() or current_cursor() functions. [string]")]
public static string OptionQueryCursorCurrent;
    [DebuggerDisplayAttribute("The default parameter value of the cursor_after() function when called without parameters. [string]")]
public static string OptionQueryCursorAfterDefault;
    [DebuggerDisplayAttribute("The default parameter value of the cursor_before_or_at() function when called without parameters. [string]")]
public static string OptionQueryCursorBeforeOrAtDefault;
    [DebuggerDisplayAttribute("Validates user's permissions to perform the query and doesn't run the query itself. [Boolean]
The possible results for this property are:
- "OK": permissions are present and valid.
- "Incomplete": validation could not be completed as the query uses dynamic schema evaluation.
- Returns KustoRequestDeniedException if permissions were not set.
")]
public static string OptionValidatePermissions;
    [DebuggerDisplayAttribute("If positive, controls the maximum age of the cached query results the service is allowed to return [TimeSpan]")]
public static string OptionQueryResultsCacheMaxAge;
    [DebuggerDisplayAttribute("If set, enables per-shard query cache. [Boolean]")]
public static string OptionQueryResultsCachePerShardEnabled;
    [DebuggerDisplayAttribute("If set, forces query results cache refresh for a specific query. Must be used in combination with 'query_results_cache_max_age', and sent via ClientRequestProperties object (not as 'set' statement). [Boolean]")]
public static string OptionQueryResultsCacheForceRefresh;
    [DebuggerDisplayAttribute("If positive, controls the maximum time a request may queue until it gets throttled. [TimeSpan][Internal]")]
public static string OptionMaxQueueTime;
    [DebuggerDisplayAttribute("If true, enabled JIT streams when sending data from managed code to native code. [Boolean][Internal]")]
public static string OptionEnableJitStream;
    [DebuggerDisplayAttribute("If true, search over projected and extended tables will be attempted to run as 'search' instead falling back to 'union'. [Boolean][Internal]")]
public static string OptionAllowProjectionAndExtensionUnderSearch;
    [DebuggerDisplayAttribute("Experimental flag which enables automatic optimizations. [Boolean][Internal]")]
public static string CostBasedOptimizer;
    [DebuggerDisplayAttribute("Experimental flag to control Shuffling Cardinality Threshold. [Boolean][Internal]")]
public static string CostBasedOptimizerShufflingCardinalityThreshold;
    [DebuggerDisplayAttribute("Experimental flag to control Max Rows count for build in broadcast join. [Boolean][Internal]")]
public static string CostBasedOptimizerBroadcastJoinBuildMax;
    [DebuggerDisplayAttribute("Experimental flag to control Min Rows count for probe in broadcast join. [Boolean][Internal]")]
public static string CostBasedOptimizerBroadcastJoinProbeMin;
    [DebuggerDisplayAttribute("the default number of partitions in partitioned join/summarize, in case num partitions isn't explicitly provided. [long][Internal]")]
public static string OptionShuffleNumPartitionsDefault;
    [DebuggerDisplayAttribute("Controls how the shard engine handles cache misses during queries. 0=Passive (read range from blob directly), 1=Active (read blob into file cache), 5=Adaptive (default; bring fixed-sized segments into file cache). [Int][Internal]")]
public static string OptionShardQueryCacheEnforcement;
    [DebuggerDisplayAttribute("Maximum height of the RelOp tree under the ShardQuery. [Int][Internal]")]
public static string OptionShardQueryMaxRelOpHeight;
    [DebuggerDisplayAttribute("Maximum number of scalar operations (functions) per operator. [Int][Internal]")]
public static string OptionShardQueryMaxScalarOpsPerRelOp;
    [DebuggerDisplayAttribute("Classifies a request to the target workload group, and doesn't run the request itself. [Boolean][Internal]
The result includes the name of the target workload group")]
public static string OptionRequestClassifyWorkloadGroupOnly;
    [DebuggerDisplayAttribute("Overrides the default maximum number of columns a query is allowed to produce. [Long]")]
public static string OptionMaxEntitiesToUnion;
    public static long OptionMaxEntitiesToUnion_Default;
    [DebuggerDisplayAttribute("Overrides the default maximum amount of memory a query operator may allocate. [UInt64]")]
public static string OptionMaxMemoryConsumptionPerIterator;
    [DebuggerDisplayAttribute("Overrides the default maximum amount of memory a whole query may allocate per node. [UInt64]")]
public static string OptionMaxMemoryConsumptionPerQueryPerNode;
    [DebuggerDisplayAttribute("Overrides the default maximum number of columns a query is allowed to produce. [Long]")]
public static string OptionMaxOutputColumns;
    [DebuggerDisplayAttribute("Enables setting the request timeout to its maximum value. This option cannot be set via a set-statement. [Boolean]")]
public static string OptionNoRequestTimeout;
    [DebuggerDisplayAttribute("Overrides the default request timeout. This option cannot be set via a set-statement. [TimeSpan]")]
public static string OptionServerTimeout;
    [DebuggerDisplayAttribute("Enables suppressing truncation of the query results returned to the caller. [Boolean]")]
public static string OptionNoTruncation;
    [DebuggerDisplayAttribute("Overrides the default maximum number of records a query is allowed to return to the caller (truncation). [Long]")]
public static string OptionTruncationMaxRecords;
    [DebuggerDisplayAttribute("Overrides the default maximum data size a query is allowed to return to the caller (truncation). [Long]")]
public static string OptionTruncationMaxSize;
    [DebuggerDisplayAttribute("Enables limiting query results to this number of records. [Long]")]
public static string OptionTakeMaxRecords;
    [DebuggerDisplayAttribute("The percentage of threads to fan out execution to. [Int]")]
public static string OptionQueryFanoutThreadsPercent;
    [DebuggerDisplayAttribute("The percentage of nodes to fan out execution to. [Int]")]
public static string OptionQueryFanoutNodesPercent;
    [DebuggerDisplayAttribute("If set, controls the way the subquery merge behaves: the executing node will introduce an additional level
in the query hierarchy for each subgroup of nodes; the size of the subgroup is set by this option. [Int]")]
public static string OptionQueryDistributionNodesSpanSize;
    [DebuggerDisplayAttribute("If set, generate python debug query for the enumerated python node (default first). [Boolean or Int]")]
public static string OptionDebugPython;
    [DebuggerDisplayAttribute("If true, disables reporting partial query failures as part of the result set. [Boolean]")]
public static string OptionDeferPartialQueryFailures;
    [DebuggerDisplayAttribute("Decides the placement of errors in the result set. ['in_data', 'end_of_table', 'end_of_dataset']")]
public static string OptionErrorReportingPlacement;
    public static string OptionErrorReportingPlacement_InData;
    public static string OptionErrorReportingPlacement_EndOfTable;
    public static string OptionErrorReportingPlacement_EndOfDataset;
    [DebuggerDisplayAttribute("Controls the serialization of 'dynamic' values in result sets. ['string', 'json'][Internal]")]
public static string OptionResponseDynamicSerialization;
    public static string OptionResponseDynamicSerialization_String;
    public static string OptionResponseDynamicSerialization_Json;
    public static string OptionResponseDynamicSerialization_Default;
    [DebuggerDisplayAttribute("Controls the serialization of 'dynamic' string and null values in result sets. ['legacy', 'current'][Internal]")]
public static string OptionResponseDynamicSerialization_2;
    public static string OptionResponseDynamicSerialization_2_Legacy;
    public static string OptionResponseDynamicSerialization_2_Current;
    [DebuggerDisplayAttribute("If set, enables the progressive query stream")]
public static string OptionResultsProgressiveEnabled;
    public static string OptionResultsProgressiveEnabledOld;
    [DebuggerDisplayAttribute("Hint for Kusto as to how often to send progress frames (takes effect only if OptionResultsProgressiveEnabled is set)")]
public static string OptionProgressiveProgressReportPeriod;
    [DebuggerDisplayAttribute("Hint for Kusto as to how many records to send in each update (takes effect only if OptionResultsProgressiveEnabled is set)")]
public static string OptionProgressiveQueryMinRowCountPerUpdate;
    [DebuggerDisplayAttribute("Enables splitting of sequence blocks after aggregation operator. [Boolean][Internal]")]
public static string OptionBlockSplittingEnabled;
    [DebuggerDisplayAttribute("TDS maximal string size for string encoding that should be reflected via this option in SQL metadata. [Long][Internal]")]
public static string OptionSqlMaxStringSize;
    [DebuggerDisplayAttribute("If true, push simple selection through aggregation [Boolean]")]
public static string OptionPushSelectionThroughAggregation;
    [DebuggerDisplayAttribute("Sets the query weak consistency session id. Takes effect when 'queryconsistency' mode is set to 'weakconsistency_by_session_id'. [String]")]
public static string OptionQueryWeakConsistencySessionId;
    [DebuggerDisplayAttribute("Controls query consistency: ['strongconsistency', 'weakconsistency', 'weakconsistency_by_query', 'weakconsistency_by_database', or 'weakconsistency_by_session_id']")]
public static string OptionQueryConsistency;
    public static string OptionQueryConsistency_Strong;
    public static string OptionQueryConsistency_Weak;
    public static string OptionQueryConsistency_Weak_AffinitizedByQuery;
    public static string OptionQueryConsistency_Weak_AffinitizedByDatabase;
    public static string OptionQueryConsistency_Weak_AffinitizedBySessionId;
    public static string OptionQueryConsistency_Weak_AffinitizedByQueryObsolete;
    public static string OptionQueryConsistency_Weak_AffinitizedByDatabaseObsolete;
    public static string OptionResultsVersion;
    public static string OptionResultsVersionV1;
    public static string OptionResultsVersionV2;
    [DebuggerDisplayAttribute("Adds new lines between frames in the results, in order to make it easier to parse them. [Boolean]")]
public static string OptionResultsV2NewlinesBetweenFrames;
    [DebuggerDisplayAttribute("Causes primary tables to be sent in multiple fragments, each containing a subset of the rows. [Boolean]")]
public static string OptionV2FragmentPrimaryTables;
    public static string OptionVersion;
    public static string OptionVersion20190213;
    public static string OptionNoPrejoin;
    public static string OptionSplitSelectionOptimization;
    [DebuggerDisplayAttribute("Controls sketches evaluation in extents prefiltering 0=Default (never skip skeches evaluation), 1=SkipSelected (skip sketches evaluation for selected set of extents), 2=Skip (skip sketches evaluation). [Int][Internal]")]
public static string OptionSketchesEvaluationLevel;
    public static string EnableShardQueryDiagnostics;
    [DebuggerDisplayAttribute("A hint to use shuffle strategy for materialized views that are referenced in the query.
The property is an array of materialized views names and the shuffle keys to use.
examples: 'dynamic([ { "Name": "V1", "Keys" : [ "K1", "K2" ] } ])' (shuffle view V1 by K1, K2)
or 'dynamic([ { "Name": "V1" } ])' (shuffle view V1 by all keys) [dynamic]")]
public static string OptionMaterializedViewShuffleQuery;
    [DebuggerDisplayAttribute("Flag which enables/disables automatic optimizations in materialized views (default is true). [Boolean][Internal]")]
public static string OptionMaterializedViewCbo;
    [DebuggerDisplayAttribute("If set, allows fuzzy resolution and connectivity issues of union legs. The set of union sources is reduced to the set of table references that exist and are accessible at the time.
If at least one such table is found, any failure will yield a warning in the query status results, but will not prevent the query execution. [Boolean]")]
public static string OptionBestEffort;
    public static string OptionCommandEnableReroute;
    [DebuggerDisplayAttribute("Request user to be used in the reporting (e.g. show queries). [String]")]
public static string OptionRequestUser;
    [DebuggerDisplayAttribute("Request application name to be used in the reporting (e.g. show queries). [String]")]
public static string OptionRequestAppName;
    [DebuggerDisplayAttribute("Arbitrary text that the author of the request wants to include as the request description. [String]")]
public static string OptionRequestDescription;
    [DebuggerDisplayAttribute("A security token of a principal that is authorized to call commands to create keys for user impersonation. [String][internal]")]
public static string OptionImpersonationCallerToken;
    [DebuggerDisplayAttribute("A security token for calling ARM on behalf of user. [String][internal]")]
public static string OptionArmOnBehalfOfToken;
    [CompilerGeneratedAttribute]
private string <ClientRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Application>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsIdentity <PrincipalIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecurityToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizationScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalClusterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginClusterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceToServiceAuthHeader>k__BackingField;
    [JsonPropertyAttribute("ClientRequestId")]
[DataMemberAttribute]
public string ClientRequestId { get; public set; }
    [JsonPropertyAttribute("Application")]
[DataMemberAttribute]
public string Application { get; public set; }
    [JsonPropertyAttribute("User")]
[DataMemberAttribute]
public string User { get; public set; }
    public IEnumerable`1<KeyValuePair`2<string, object>> Options { get; }
    public IReadOnlyDictionary`2<string, string> Parameters { get; }
    [JsonPropertyAttribute("PrincipalIdentity")]
[DataMemberAttribute]
public ClaimsIdentity PrincipalIdentity { get; public set; }
    [JsonPropertyAttribute("SecurityToken")]
[DataMemberAttribute]
public string SecurityToken { get; public set; }
    [JsonPropertyAttribute("AuthorizationScheme")]
[DataMemberAttribute]
public string AuthorizationScheme { get; public set; }
    [JsonPropertyAttribute("RequestHostName")]
[DataMemberAttribute]
public string RequestHostName { get; public set; }
    [JsonPropertyAttribute("LocalClusterName")]
[DataMemberAttribute]
public string LocalClusterName { get; public set; }
    [JsonPropertyAttribute("OriginClusterName")]
[DataMemberAttribute]
public string OriginClusterName { get; public set; }
    [JsonPropertyAttribute("ServiceToServiceAuthHeader")]
[DataMemberAttribute]
public string ServiceToServiceAuthHeader { get; public set; }
    protected ClientRequestProperties(bool dummy);
    public ClientRequestProperties(IEnumerable`1<KeyValuePair`2<string, object>> options, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    private static ClientRequestProperties();
    private static JsonSerializerSettings CreateSerializationSettings();
    protected virtual void CloneTo(ClientRequestProperties dest, bool secureClone);
    public virtual ClientRequestProperties Clone(bool secureClone);
    public static ClientRequestProperties FromJsonString(string properties);
    public static ClientRequestProperties FromJsonStringInternal(string properties);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext ctx);
    [CompilerGeneratedAttribute]
public string get_ClientRequestId();
    [CompilerGeneratedAttribute]
public void set_ClientRequestId(string value);
    [CompilerGeneratedAttribute]
public string get_Application();
    [CompilerGeneratedAttribute]
public void set_Application(string value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    public IEnumerable`1<KeyValuePair`2<string, object>> get_Options();
    public IReadOnlyDictionary`2<string, string> get_Parameters();
    [CompilerGeneratedAttribute]
public ClaimsIdentity get_PrincipalIdentity();
    [CompilerGeneratedAttribute]
public void set_PrincipalIdentity(ClaimsIdentity value);
    [CompilerGeneratedAttribute]
public string get_SecurityToken();
    [CompilerGeneratedAttribute]
public void set_SecurityToken(string value);
    [CompilerGeneratedAttribute]
public string get_AuthorizationScheme();
    [CompilerGeneratedAttribute]
public void set_AuthorizationScheme(string value);
    [CompilerGeneratedAttribute]
public string get_RequestHostName();
    [CompilerGeneratedAttribute]
public void set_RequestHostName(string value);
    [CompilerGeneratedAttribute]
public string get_LocalClusterName();
    [CompilerGeneratedAttribute]
public void set_LocalClusterName(string value);
    [CompilerGeneratedAttribute]
public string get_OriginClusterName();
    [CompilerGeneratedAttribute]
public void set_OriginClusterName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceToServiceAuthHeader();
    [CompilerGeneratedAttribute]
public void set_ServiceToServiceAuthHeader(string value);
    public T GetOptionValueOrDefault(string name, T defaultValue);
    public T GetOptionValueOrThrowIfInvalid(string name, T defaultValue);
    public bool TryGetOptionValue(string name, T& value);
    public void ClearOption(string name);
    public void ClearOptions(IEnumerable`1<string> names);
    public void ClearOptions();
    public void SetOption(string name, object value);
    public bool HasOption(string name);
    public void ClearParameter(string name);
    public void SetParameters(IDictionary`2<string, string> parameters);
    public void SetParameter(string name, string value);
    public void SetParameter(string name, DateTime value);
    public void SetParameter(string name, TimeSpan value);
    public void SetParameter(string name, bool value);
    public void SetParameter(string name, int value);
    public void SetParameter(string name, long value);
    public void SetParameter(string name, Guid value);
    public void SetParameter(string name, double value);
    public bool HasParameter(string name);
    public bool IsApiVersionV2();
    public static bool IsOptionEnabled(ClientRequestProperties that, string name);
    public static T SafeGetOptionValueOrDefault(ClientRequestProperties that, string name, T defaultValue);
    public Dictionary`2<string, object> CloneOptions();
    public Dictionary`2<string, string> CloneParameters();
    public ClientRequestProperties NewOverrideOptions(IEnumerable`1<KeyValuePair`2<string, object>> options);
    public ClientRequestProperties NewOverrideAndMergeOptionsIfNeeded(IReadOnlyDictionary`2<string, object> options);
    public void MergeParameters(IReadOnlyDictionary`2<string, string> parameters);
}
[ExtensionAttribute]
public static class Kusto.Data.Common.ClientRequestPropertiesExtensions : object {
    [ThreadStaticAttribute]
private static StringBuilder s_sb;
    private static JsonSerializerSettings s_serializationSettings;
    private static JsonSerializer s_safeToTraceStringSerializer;
    public static String[] ResultsProgressiveFlags;
    private static ClientRequestPropertiesExtensions();
    [ExtensionAttribute]
public static void ResetAuthorizationSettingsIfNeeded(ClientRequestProperties properties);
    private static JsonSerializerSettings CreateSerializationSettings();
    [ExtensionAttribute]
public static T SafeGetOptionValueOrDefault(ClientRequestProperties that, string name, T defaultValue);
    [ExtensionAttribute]
public static bool SafeQueryResultsProgressiveEnabled(ClientRequestProperties properties);
    [ExtensionAttribute]
public static void SafeSetQueryResultsProgressiveEnabled(ClientRequestProperties properties, bool value);
    [ExtensionAttribute]
public static ClientRequestProperties SafeSetEnableCommandReroute(ClientRequestProperties properties, bool value);
    [ExtensionAttribute]
public static string ToJsonString(ClientRequestProperties properties);
    [ExtensionAttribute]
public static string ToJsonStringInternal(ClientRequestProperties properties);
    [ExtensionAttribute]
public static JObject ToJson(ClientRequestProperties properties);
    [ExtensionAttribute]
public static string SafeToTraceString(ClientRequestProperties properties, bool indented);
    private static JsonSerializer CreateSafeToTraceStringSerializer();
    [ExtensionAttribute]
public static ClientRequestProperties SafeSetOption(ClientRequestProperties props, string name, object value);
    [ExtensionAttribute]
public static void SetOptionToParsedValue(ClientRequestProperties props, string name, string value);
    [ExtensionAttribute]
public static ClientRequestProperties SafeExternalize(ClientRequestProperties props);
}
[DataContractAttribute]
public class Kusto.Data.Common.ClusterSchema : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, DatabaseSchema> <Databases>k__BackingField;
    [DataMemberAttribute]
public PluginSchema[] Plugins;
    [DataMemberAttribute]
public Dictionary`2<string, DatabaseSchema> Databases { get; private set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, DatabaseSchema> get_Databases();
    [CompilerGeneratedAttribute]
private void set_Databases(Dictionary`2<string, DatabaseSchema> value);
    public void AddDatabases(IEnumerable`1<DatabaseSchema> databaseSchemas);
    public void RemoveDatabases(IEnumerable`1<string> databaseNames);
    public void UpdateDatabases(IEnumerable`1<DatabaseSchema> databaseSchemas);
    public void UpdateOrRemoveDatabases(IEnumerable`1<KeyValuePair`2<string, DatabaseSchema>> databaseSchemas);
    public static ClusterSchema Parse(SchemaShowAsJsonCommandResult queryResult);
    public static ClusterSchema Parse(IEnumerable`1<SchemaShowCommandResult> queryResult);
    public string ToJsonString(bool indented);
    public sealed virtual object Clone();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
public class Kusto.Data.Common.ColumnMapping : object {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnType>k__BackingField;
    [JsonPropertyAttribute("Properties")]
public Dictionary`2<string, string> Properties;
    [JsonPropertyAttribute("column")]
public string ColumnName { get; public set; }
    [JsonPropertyAttribute("datatype")]
public string ColumnType { get; public set; }
    public ColumnMapping(string name, string type, Dictionary`2<string, string> prop);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnType();
    [CompilerGeneratedAttribute]
public void set_ColumnType(string value);
    public ColumnMapping Clone();
    public string GetProperty(string propertyName);
    public int GetIntProperty(string propertyName, bool throwExceptionIfNotExist);
    public bool IsValid(IngestionMappingKind mappingKind);
}
public class Kusto.Data.Common.ColumnMappingConverter : JsonConverter {
    private static ColumnMappingConverter s_instance;
    private static string c_properties;
    private static string c_Properties;
    public static ColumnMappingConverter Instance { get; }
    public bool CanWrite { get; }
    public bool CanRead { get; }
    private static ColumnMappingConverter();
    public static ColumnMappingConverter get_Instance();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[DataContractAttribute]
public class Kusto.Data.Common.ColumnSchema : object {
    [DataMemberAttribute]
public string Name;
    [DataMemberAttribute]
public string Type;
    [DataMemberAttribute]
public string CslType;
    [DataMemberAttribute]
public string CslDefaultValue;
    [DataMemberAttribute]
public string DocString;
    [DataMemberAttribute]
public HashSet`1<string> RestrictionTags;
    public ColumnSchema(string name);
    public ColumnSchema(string name, string type);
    public ColumnSchema(string name, string type, HashSet`1<string> restrictionTags);
    public ColumnSchema(string name, string type, string docString, string cslType);
    public ColumnSchema(string name, string type, string docString, string cslType, HashSet`1<string> restrictionTags);
    public ColumnSchema(string name, string type, string docString, string cslType, string cslDefaultValue, HashSet`1<string> restrictionTags);
    public static ColumnSchema FromNameAndCslType(string name, string cslType);
    public static ColumnSchema FromScalarFunctionParameter(string name, string cslType, string cslDefaultValue);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public virtual object Clone();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class Kusto.Data.Common.CslAsyncExecution : object {
    [ExtensionAttribute]
public static OperationsShowCommandResult ExecuteAsyncControlCommand(ICslAdminProvider admin, string databaseName, string command, TimeSpan timeout, TimeSpan pollingInterval, ClientRequestProperties properties, CancellationToken cancellationToken);
}
public class Kusto.Data.Common.CslAsyncExecutor : object {
    private Guid m_operationId;
    private ICslAdminProvider m_admin;
    private ClientRequestProperties m_properties;
    public CslAsyncExecutor(ICslAdminProvider admin, IDataReader pendingOperation, ClientRequestProperties properties);
    public CslAsyncExecutor(ICslAdminProvider admin, Guid operationId, ClientRequestProperties properties);
    public OperationsShowCommandResult Await(TimeSpan timeout, TimeSpan pollingInterval, CancellationToken cancellationToken);
}
public static class Kusto.Data.Common.CslBoolLiteral : object {
    public static Nullable`1<bool> FromObject(object value);
    public static string AsCslString(Nullable`1<bool> value);
    public static string AsCslString(object value);
    public static bool TryParse(string literal, Nullable`1& result, bool strict);
    public static bool TryParseNoNull(string literal, Boolean& result, bool defaultValue);
    public static Nullable`1<bool> Parse(string literal);
    public static bool ParseNoNull(string literal);
}
public class Kusto.Data.Common.CslColumnSchema : object {
    private string m_name;
    private CslType m_type;
    public string Name { get; }
    public CslType CslType { get; }
    [JsonConstructorAttribute]
private CslColumnSchema(string name, CslType cslType);
    public static CslColumnSchema FromClr(FieldInfo fieldInfo, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    public static CslColumnSchema FromClr(string name, Type clrType, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    public static CslColumnSchema FromClr(string name, string clrType, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    public static CslColumnSchema FromCsl(string name, string cslType, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    public static CslColumnSchema FromDataColumn(DataColumn dataColumn, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    public string get_Name();
    public CslType get_CslType();
    public string AsSchemaString();
    public string GetUnescapedName();
    public void ValidateSchema();
    private static CslColumnSchema FromCsl(string name, CslType cslColumnType, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
}
public static class Kusto.Data.Common.CslCommandGenerator : object {
    public static string V2FormatVersion;
    private static string c_policyShowOperation;
    private static string c_policyAlterMergeOperation;
    private static string c_policyAlterOperation;
    private static string c_policyDeleteOperation;
    private static string c_utf8NoBom;
    private static string c_utf8Bom;
    private static int c_exportDefaultSizeLimitInBytes;
    private static int c_exportMaxSizeLimitInBytes;
    private static string c_ifExists;
    [ThreadStaticAttribute]
private static StringBuilder s_sb;
    private static Char[] s_newLineChars;
    private static int s_sbMaxSize;
    private static string c_materializedViewEntityType;
    public static string CommandResults { get; }
    private static CslCommandGenerator();
    public static string get_CommandResults();
    public static string CombineCommandWithFollowupQuery(string command, string query);
    public static string GenerateEchoCommand(TraceVerbosity verbosity, string message);
    public static string GenerateTraceResults(string prefix, string queryOrCommand);
    public static string GenerateFlushTracesCommand();
    public static string GenerateCreateTempStorageCommand();
    public static string GenerateTempStorageDropCommand(TimeSpan age);
    public static string GenerateTempStorageDropCommand(int ageInDays);
    public static string GenerateCreateIngestionsStatusTableCommand();
    public static string GenerateClusterClearCredStoreCacheCommand();
    public static string GenerateRegisterFeatureCommand(string featureName, IEnumerable`1<string> subscriptionsId);
    public static string GenerateRowStoreTransactionsShowCommand();
    public static string GenerateRowStoreSealsShowCommand(IEnumerable`1<Tuple`2<string, string>> databasesAndTable, bool onlySuccessful, bool onlyLatest);
    public static string GenerateRowStoreSealsShowCommand(string tableName, bool onlySuccessful, bool onlyLatest);
    public static string GenerateTableRowStoreReferencesShowCommand(string databaseName, string tableName);
    public static string GenerateTableRowStoreReferencesShowCommand();
    public static string GenerateTableRowStoreSealInfoShowCommand(string databaseName, string tableName);
    public static string GenerateOperationsShowCommand();
    public static string GenerateOperationsShowCommand(Guid operationId);
    public static string GenerateOperationDetailsShowCommand(Guid operationId);
    public static string GenerateOperationsShowCommand(IEnumerable`1<Guid> operationIds);
    public static string GenerateOperationsShowCommand(AdminTrackableOperationKind operationKind, DateTime startedLaterThan, string state);
    public static string GenerateOperationCancelCommand(Guid operationId, string reasonPhrase);
    public static string GenerateDatabaseJournalShowCommand(string databaseName);
    public static string GenerateClusterJournalShowCommand();
    public static string GenerateJournalShowCommand();
    public static string GenerateClusterSharedContainersShowCommand(int minimalCardinality);
    public static string GenerateClusterDataMovementRestrictionPolicyShowCommand();
    public static string GenerateClusterDataMovementRestrictionPolicyDropCommand();
    public static string GenerateClusterDataMovementRestrictionPolicyAlterCommand(IEnumerable`1<string> labels);
    public static string GenerateInProgressOperationsShowCommand();
    public static string GenerateCommandsShowCommand();
    public static string GenerateCommandsAndQueriesShowCommand();
    public static string GenerateIngestionFailuresShowCommand(Guid operationId);
    public static string GenerateIngestionFailuresShowCommand(IEnumerable`1<Guid> operationIds, bool summarized);
    public static string GenerateIngestionFailuresShowCommand(Guid operationId, bool originatesFromUpdatePolicy);
    public static string GenerateIngestionFailuresShowCommandWithoutPermanentPostIngestionFailures(Guid operationId);
    public static string GenerateIngestionFailuresShowCommand();
    public static string GenerateDataOperationsShowCommand();
    public static string GenerateStreamingIngestionFailuresShowCommand();
    public static string GenerateStreamingIngestionStatisticsShowCommand();
    public static string GenerateCapacityShowCommand(CapacityShowVirtualResourceKind virtualResource, Dictionary`2<string, string> properties);
    public static string GenerateVersionShowCommand();
    public static string GenerateDataConnectionsShowCommand();
    public static string GenerateClusterShowCommand(bool detailed);
    public static string GenerateClusterMonitoringShowCommand();
    public static string GenerateClusterServicesShowCommand();
    public static string GenerateDiagnosticsShowCommand(Dictionary`2<string, string> properties);
    public static string GenerateShowUnallocatedSubscriptionsCommand(bool showall);
    public static string GeneratePolicySoftRetentionViolationsShowCommand(string databaseName);
    public static string GenerateDiagnosticsShowHardDeleteRetentionViolationsCommand(string databaseName);
    public static string GenerateSetTraceCommand(TraceVerbosity traceVerbosity);
    public static string GenerateQueryCancelCommand(string requestId, string reasonPhrase, Nullable`1<Guid> activityId, Nullable`1<bool> expired);
    public static string GenerateQueriesShowCommand();
    public static string GenerateRunningQueriesShowCommand(bool allQueries);
    public static string GenerateIngestionSourceContainersGetCommand();
    public static string GenerateKustoIdentityTokenGetCommand();
    public static string GenerateWarmDataCommand(bool isAsync);
    public static string GenerateClusterStorageKeysHashShowCommand();
    public static string GenerateClusterStorageAccountsShowCommand();
    public static string GenerateClusterStorageKeysAlterCommand(Dictionary`2<string, string> storageAccountKeyByStorageAccountName, string decryptionCertificateThumbprint, bool isAsync);
    public static string GenerateDatabaseStorageKeysAlterCommand(string databaseName, Dictionary`2<string, string> storageAccountKeyByStorageAccountName, string decryptionCertificateThumbprint, bool isAsync);
    public static string GenerateClusterNodesToScaleInShowCommand(int numberOfNodes);
    public static string GenerateClusterExternalArtifactsCacheClearCommand(List`1<string> artifactsUris);
    public static string GenerateDatabaseCreateCommand(string databaseName, bool persist, IEnumerable`1<string> persistentPaths, bool ifNotExists, string encryptionScope);
    public static string GenerateDatabaseCreateCommand(string databaseName, string metadataPersistentPath, string dataPersistentPath, bool ifNotExists);
    public static string GenerateDatabaseCreateCommand(string databaseName, string persistentPath, bool ifNotExists);
    public static string GenerateDatabaseCopyCommand(string databaseName, string sourcePersistentFullPath, IEnumerable`1<string> persistentPaths, string prettyName, bool isAsync);
    public static string GenerateReplaceDatabaseStorageAcountsCommand(string databaseName, IEnumerable`1<string> storageAccountURIs, string prettyName, bool isAsync);
    public static string GenerateDatabaseAttachCommand(string databaseName, string persistentPath, bool all, bool readOnly, string version, string prettyName);
    public static string GenerateDatabaseDetachCommand(string databaseName, bool ifExists, bool skipSeal);
    public static string GenerateDatabaseSaveCommand(string what, string persistentPath, bool force, bool switch);
    public static string GenerateDatabaseMetadataContainerAlterCommand(string databaseName, string metadataContainerPath, bool allowNonEmptyPath);
    public static string GenerateDatabaseMetadataContainerAlterCommand(string databaseName);
    public static string GenerateSetDatabasePrettyNameCommand(string databaseName, string prettyName);
    public static string GenerateDatabasePrettyNameDropCommand(string databaseName);
    public static string GenerateDatabaseSystemPropertiesAlterCommand(string databaseName, Dictionary`2<string, object> properties);
    public static string GenerateDatabaseSystemPropertiesDropCommand(string databaseName);
    public static string GenerateDatabaseSystemPropertiesShowCommand(string databaseName);
    public static string GenerateReplaceDatabaseKeyVaultSecretsCommand(string secretMapping);
    public static string GenerateApplyTableMirroringPolicyTemplateToTablesCommand(string templateName, string query);
    public static string GenerateApplyTableMirroringPolicyTemplateToTablesCommand(string templateName, IEnumerable`1<string> tableNames);
    private static string CreateApplyTableMirroringPolicyTemplateCommand(string templateName, string queryOrTableNames);
    public static string GenerateSchemaShowCommand(bool formatAsJson, bool details, Nullable`1<bool> showObfuscatedStrings);
    public static string GenerateClusterSchemaShowCommand(bool formatAsJson, bool details);
    public static string GenerateDatabasesSchemaShowCommand(IEnumerable`1<string> databaseNames, IEnumerable`1<EntityType> displaySpecificEntities, bool formatAsJson, bool details, Nullable`1<bool> showObfuscatedStrings);
    public static string GenerateDatabaseSchemaShowCommand(string databaseName, string version);
    public static string GenerateDatabasesSchemaShowCommand(IEnumerable`1<string> databaseNames, bool formatAsJson, bool details, Dictionary`2<string, string> properties);
    public static string GenerateDatabaseSchemaShowAsJsonCommand(string databaseName, Nullable`1<bool> showObfuscatedStrings);
    public static string GenerateDatabaseSchemaShowAsCslCommand(string databaseName, bool asScript, Nullable`1<bool> includeEncodingPolicies, Nullable`1<bool> includeSecuritySettings, Nullable`1<bool> includeIngestionMappings, Nullable`1<bool> showObfuscatedStrings, string authorizationContext);
    public static string GenerateDatabasesSchemaShowCommandWithVersion(IEnumerable`1<Tuple`2<string, string>> databaseNamesAndVersions, bool formatAsJson, bool details);
    public static string GenerateDatabasesEntitiesShowCommand(Nullable`1<bool> showObfuscatedStrings, Nullable`1<bool> showSystemObjects, Nullable`1<bool> resolveFunctionsSchema, Nullable`1<bool> resolveDependencies, IEnumerable`1<string> filterOnDatabases, IEnumerable`1<EntityType> filterOnEntityTypes, IEnumerable`1<string> filterOnEntityNames);
    public static string GenerateDatabaseEntityShowCommand(string databaseName, string entityName, Nullable`1<bool> showObfuscatedStrings, Nullable`1<bool> showSystemObjects, Nullable`1<bool> resolveFunctionsSchema, Nullable`1<bool> resolveDependencies);
    public static string GenerateTableSchemaShowAsJsonCommand(string tableName);
    public static string GenerateTableSchemaShowAsJsonCommand(string tableName, string databaseName);
    public static string GenerateTableSchemaShowAsCsl(string tableName, string databaseName);
    public static string GenerateEntitySchemaShowAsJsonCommand(string databaseName, string entityName, string remoteEntitiesCallStack, bool functionsOverrideTables, bool allowExternalTables, bool resolveStoredQueryResults, Nullable`1<bool> validatePermissions);
    public static string GenerateEntitySchemaShowAsJsonCommand(IEnumerable`1<string> databaseNames, string entityName, string remoteEntitiesCallStack, bool functionsOverrideTables, bool allowExternalTables, bool resolveStoredQueryResults, Nullable`1<bool> validatePermissions);
    public static string GenerateEntitySchemaShowAsJsonCommand(IEnumerable`1<string> databaseNames, string entityName, Dictionary`2<string, string> properties, string remoteEntitiesCallStack);
    public static string GenerateDatabaseSchemaViolationsShowCommand(string databaseName);
    public static string GenerateDatabaseShowCommand(bool details);
    public static string GenerateDatabaseShowCommand(DatabaseShowFlavor flavor);
    public static string GenerateDatabasesShowCommand(bool onlyWithReadWriteAccess, bool onlyCmkSuspended, bool details, bool showSystemObjects, IEnumerable`1<string> databases, bool includeHotDataStatistics, string skipUntilAndIncluding, Nullable`1<int> take);
    public static string GenerateDatabasesShowCommand(DatabaseShowFlavor flavor, bool onlyWithReadWriteAccess, bool onlyCmkSuspended, bool showSystemObjects, IEnumerable`1<string> databases, bool includeHotDataStatistics, string skip_until_and_including, Nullable`1<int> take);
    public static string GenerateDatabasesShowActiveCommand(bool active, bool includeVirtualClusters, Nullable`1<TimeSpan> lookback);
    public static string GenerateDatabasesManagementGroupsShowCommand();
    public static string GenerateShowDatabasesPolicies(IEnumerable`1<string> databases, IEnumerable`1<PolicyCslToken> policies);
    public static string GenerateShowTablesPoliciesOfDatabases(IEnumerable`1<string> databases, IEnumerable`1<PolicyCslToken> policies);
    public static string GenerateColumnDataMovementRestrictionPolicyShowCommand(string columnName);
    public static string GenerateColumnDataMovementRestrictionPolicyDropCommand(string columnName);
    public static string GenerateColumnDataMovementRestrictionPolicyAlterCommand(string columnName, bool isSensitive);
    public static string GenerateDatabaseAccessSetCommand(string databaseName, bool isReadOnly);
    public static string GenerateDatabaseAccessSetCommand(string databaseName, string databaseAccessMode);
    public static string GenerateDatabaseMaintenanceModeCommand(string databaseName, bool enableMaintenance, bool withRowStore);
    public static string GenerateAllDatabasesSetMaintenanceModeCommand(bool enableMaintenance);
    public static string GenerateDatabaseStreamingIngestionMaintenanceModeCommand(bool enableMaintenance);
    public static string GenerateClusterExtentsShowCommand(ExtentsShowFilteringRuntimePolicy filteringRuntimePolicy, IEnumerable`1<Guid> extentIds, bool hotOnly, bool details, bool formatResultsAsJson, IEnumerable`1<string> tagsHas, IEnumerable`1<string> tagsContains, IEnumerable`1<string> tagsNotHas, IEnumerable`1<string> tagsNotContains);
    public static string GenerateDatabasesExtentsShowCommand(IEnumerable`1<string> databases, ExtentsShowFilteringRuntimePolicy filteringRuntimePolicy, IEnumerable`1<Guid> extentIds, bool hotOnly, bool details, bool formatResultsAsJson, IEnumerable`1<string> tagsHas, IEnumerable`1<string> tagsContains, IEnumerable`1<string> tagsNotHas, IEnumerable`1<string> tagsNotContains);
    public static string GenerateDatabaseExtentsShowCommand(string database, ExtentsShowFilteringRuntimePolicy filteringRuntimePolicy, IEnumerable`1<Guid> extentIds, bool hotOnly, bool details, bool formatResultsAsJson, IEnumerable`1<string> tagsHas, IEnumerable`1<string> tagsContains, IEnumerable`1<string> tagsNotHas, IEnumerable`1<string> tagsNotContains);
    public static string GenerateTableExtentsShowCommand(string tableName, ExtentsShowFilteringRuntimePolicy filteringRuntimePolicy, IEnumerable`1<Guid> extentIds, bool hotOnly, bool details, bool formatResultsAsJson, IEnumerable`1<string> tagsHas, IEnumerable`1<string> tagsContains, IEnumerable`1<string> tagsNotHas, IEnumerable`1<string> tagsNotContains);
    public static string GenerateTablesExtentsShowCommand(IEnumerable`1<string> tableNames, IEnumerable`1<Guid> extentIds, bool hotOnly, bool details, bool formatResultsAsJson, IEnumerable`1<string> tagsHas, IEnumerable`1<string> tagsContains, IEnumerable`1<string> tagsNotHas, IEnumerable`1<string> tagsNotContains, ExtentsShowFilteringRuntimePolicy filteringRuntimePolicy);
    public static string GenerateExtentShowCommand(string tableName, Guid extentId);
    public static string GenerateExtentsDetailsShowCommand(string tableName, Guid extentId, Nullable`1<int> verbosity);
    public static string GenerateDatabaseExtentTagsStatisticsShowCommand(Nullable`1<DateTime> MinCreationTime);
    public static string GenerateDatabaseExtentsPartitioningStatisticsShowCommand(string databaseName);
    private static void AppendExtentFiltering(StringBuilder sb, ExtentsShowFilteringRuntimePolicy filteringRuntimePolicy, IEnumerable`1<Guid> extentIds, bool hot, bool details, bool formatResultsAsJson, IEnumerable`1<string> tagsHas, IEnumerable`1<string> tagsContains, IEnumerable`1<string> tagsNotHas, IEnumerable`1<string> tagsNotContains);
    public static string GenerateExtentsCorruptedDatetimeShowCommand(string tableName, Nullable`1<DateTime> minCreationTime);
    public static string GenerateExtentsCorruptedDatetimePatchCommand(string tableName, Nullable`1<DateTime> minCreationTime);
    public static string GenerateExtentDropCommand(Guid extentId, string tableName);
    public static string GenerateExtentDropCommand(Guid extentId);
    public static string GenerateExtentsDropCommand(IEnumerable`1<Guid> extentIds, string tableName);
    public static string GenerateExtentsDropCommand(IEnumerable`1<Guid> extentIds);
    public static string GenerateExtentsDropCommand(string tableName);
    public static string GenerateExtentsDropOlderThanCommand(TimeSpan olderThanPeriod, string tableName);
    public static string GenerateTableClearDataCommand(string tableName, bool isAsync);
    public static string GenerateExtentsTrimAndDropOlderThanCommand(DataTrimKind trimKind, long trimSizeInBytes, TimeSpan olderThanPeriod, IEnumerable`1<string> tableNames, bool dueToRetention);
    public static string GenerateExtentsDropByQueryCommand(string innerQuery, bool dueToRetention);
    public static string GenerateExtentsDropByTagsCommand(string tableName, String[] tags);
    public static string GenerateExtentsAttachByMetadataCommand(string destinationTableName, bool isAsync, string queryToObtainExtentsMetadata);
    public static string GenerateExtentTagsDropCommand(string tableName, IEnumerable`1<string> tagsToDrop, Nullable`1<DateTime> extentCreatedOnFrom, Nullable`1<DateTime> extentCreatedOnTo, bool isAsync);
    public static string GenerateExtentTagsDropByQueryCommand(string innerQuery, string tableName, Nullable`1<DateTime> extentCreatedOnFrom, Nullable`1<DateTime> extentCreatedOnTo, bool isAsync);
    public static string GenerateExtentTagsDropByRegexCommand(string tableName, string regex, Nullable`1<DateTime> extentCreatedOnFrom, Nullable`1<DateTime> extentCreatedOnTo, bool isAsync);
    public static string GenerateExtentTagsDropBySubstringCommand(string tableName, string substring, Nullable`1<DateTime> extentCreatedOnFrom, Nullable`1<DateTime> extentCreatedOnTo, bool isAsync);
    public static string GenerateExtentTagsAlterByQueryCommand(IEnumerable`1<string> tags, string innerQuery, string tableName, bool alterMerge, Nullable`1<DateTime> extentCreatedOnFrom, Nullable`1<DateTime> extentCreatedOnTo, bool isAsync);
    public static string GenerateExtentsMoveCommand(string sourceTableName, string destinationTableName, bool isAsync, IEnumerable`1<Guid> extentIdsToMove, Dictionary`2<string, string> properties);
    public static string GenerateExtentsMoveByQueryCommand(string destinationTableName, string innerQuery, bool isAsync, Dictionary`2<string, string> properties);
    public static string GenerateExtentsReplaceByQueriesCommand(string destinationTableName, string extentsToDropInnerQuery, string extentsToMoveInnerQuery, bool isAsync, Dictionary`2<string, string> properties);
    public static string GenerateExtentsShuffleCommand(string tableName, bool isAsync, IEnumerable`1<Guid> extentIdsToShuffle, Dictionary`2<string, string> properties);
    public static string GenerateExtentsShuffleByQueryCommand(string tableName, string innerQuery, bool isAsync, Dictionary`2<string, string> properties);
    public static string GenerateExtentsMergeCommand(string tableName, IEnumerable`1<Guid> extentIds, bool isAsync, bool rebuild, Nullable`1<DateTime> extentCreatedOnFrom, Nullable`1<DateTime> extentCreatedOnTo);
    public static string GenerateExtentConvertCommand(string tableName, Guid extentId, bool isAsync, ExtentConversionOption conversionOption, bool isRecover, Nullable`1<DateTime> extentCreatedOnFrom, Nullable`1<DateTime> extentCreatedOnTo);
    public static string GenerateExtentsPartitionCommand(string tableName, IEnumerable`1<Guid> extentIds, bool isAsync, Nullable`1<DateTime> extentCreatedOnFrom, Nullable`1<DateTime> extentCreatedOnTo);
    public static string GenerateExtentsPartitionCommand(bool isAsync, string tableName, IEnumerable`1<Guid> extentIds, string partitioningPolicyAsJson);
    public static string GenerateExtentsDropPartitionMetadataCommand(string query, bool isAsync, string table, Nullable`1<DateTime> startTime, Nullable`1<DateTime> endTime);
    public static string GenerateExtentsAttachPartitionMetadataCommand(string query, bool isAsync, string table, Nullable`1<DateTime> startTime, Nullable`1<DateTime> endTime);
    public static string GenerateExtentsRebuildByQueryCommand(string tableName, Guid extentId, string query, bool isAsync, bool purge);
    public static string GenerateExtentsRebuildByQueryCommand(string tableName, List`1<Guid> extentIds, string query, bool isAsync, bool purge);
    public static string GenerateTableCreateCommand(string tableName, Type rowType, bool forceNormalizeColumnName);
    public static string GenerateTableCreateCommand_Internal(string tableName, Type rowType, bool forceNormalizeColumnName);
    public static string GenerateTableCreateCommand(string tableName, IEnumerable`1<Tuple`2<string, Type>> rowFields, bool forceNormalizeColumnName);
    public static string GenerateTableCreateCommand_Internal(string tableName, IEnumerable`1<Tuple`2<string, Type>> rowFields, bool forceNormalizeColumnName);
    public static string GenerateTableCreateCommand(string tableName, IEnumerable`1<Tuple`2<string, string>> rowFields, bool forceNormalizeColumnName);
    public static string GenerateTableCreateCommand_Internal(string tableName, IEnumerable`1<Tuple`2<string, string>> rowFields, bool forceNormalizeColumnName);
    public static string GenerateTablesCreateCommand(IEnumerable`1<Tuple`2<string, IEnumerable`1<Tuple`2<string, string>>>> definitionRecords, bool forceNormalizeColumnName);
    public static string GenerateTablesCreateCommand_Internal(IEnumerable`1<Tuple`2<string, IEnumerable`1<Tuple`2<string, string>>>> definitionRecords, bool forceNormalizeColumnName);
    public static string GenerateTableCreateCommand(TableSchema table, bool forceNormalizeColumnName);
    public static string GenerateTableCreateCommand_Internal(TableSchema table, bool forceNormalizeColumnName);
    public static string GenerateTablesCreateCommand(IEnumerable`1<TableSchema> tables, bool forceNormalizeColumnName, string folder);
    public static string GenerateTablesCreateMergeCommand(IEnumerable`1<TableSchema> tables, bool forceNormalizeColumnName, string folder);
    public static string GenerateTablesCreateCommand_Internal(IEnumerable`1<TableSchema> tables, bool forceNormalizeColumnName);
    public static string GenerateTableCreateBasedOnAnotherCommand(string tableName, string otherTableName, string folder, string docString, String[] includedPolicies, bool ifNotExists, String[] excludedPolicies);
    private static string GenerateTableCreateCommand(string tableName, Type rowType, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    private static string CommonGenerateTableCreateCommand(string tableName, IEnumerable`1<Tuple`2<string, Type>> rowFields, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    private static string CommonGenerateTableCreateCommand(string tableName, IEnumerable`1<Tuple`2<string, string>> rowFields, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    private static string CommonGenerateTablesCreateCommand(IEnumerable`1<Tuple`2<string, IEnumerable`1<Tuple`2<string, string>>>> definitionRecords, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    private static string GenerateWithClauseForTableCommands(TableSchema table, bool includeEmptyProperties);
    private static string CommonGenerateTableCreateCommand(TableSchema table, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    private static string CommonGenerateTablesCreateCommand(IEnumerable`1<TableSchema> tables, bool forceNormalizeColumnName, SchemaOptions schemaOptions, bool extendSchema, string folder);
    public static string GenerateAlterTableFolderCommand(string tableName, string value);
    public static string GenerateAlterTableDocStringCommand(string tableName, string value);
    public static string GenerateAlterColumnsDocStringsCommand(string tableName, Dictionary`2<string, string> columnNamesToDocs, bool alterMerge);
    public static string GenerateTableAlterCommand(TableSchema table, bool forceNormalizeColumnName);
    public static string GenerateTableAlterCommand_Internal(TableSchema table, bool forceNormalizeColumnName);
    public static string GenerateTableAlterMergeCommand(TableSchema table, bool forceNormalizeColumnName);
    public static string GenerateTableAlterMergeCommand_Internal(TableSchema table, bool forceNormalizeColumnName);
    public static string GenerateTableAlterMergeCommandWithExtraProperties(TableSchema table, bool forceNormalizeColumnName);
    public static string GenerateTableAlterMergeCommandWithExtraProperties_Internal(TableSchema table, bool forceNormalizeColumnName);
    public static string GenerateTableCreateMergeCommand(TableSchema table, bool forceNormalizeColumnName);
    public static string GenerateTableCreateMergeCommand_Internal(TableSchema table, bool forceNormalizeColumnName);
    public static string GenerateTableCreateMergeCommandWithExtraProperties(TableSchema table, bool forceNormalizeColumnName);
    public static string GenerateTableCreateMergeCommandWithExtraProperties_Internal(TableSchema table, bool forceNormalizeColumnName);
    private static string CommonGenerateTableAlterCommand(TableSchema table, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    private static string CommonGenerateTableAlterMergeCommand(TableSchema table, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    private static string CommonGenerateTableAlterMergeCommandWithExtraProperties(TableSchema table, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    private static string CommonGenerateTableCreateMergeCommand(TableSchema table, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    private static string CommonGenerateTableCreateMergeCommandWithExtraProperties(TableSchema table, bool forceNormalizeColumnName, SchemaOptions schemaOptions);
    public static string GenerateTableDropCommand(string tableName, bool ifExists, bool skipSeal);
    public static string GenerateTableDropUndoCommand(string tableName, string version, string newTableName);
    public static string GenerateDatabaseWeakConsistencyClearCacheCommand();
    public static string GenerateClusterClearRemoteDatabaseSchemaCacheCommand(string clusterName, string databaseName);
    public static string GenerateDatabaseStreamingIngestionCacheClearCommand();
    public static string GenerateTableStreamingIngestionCacheClearCommand(string tableName);
    public static string GenerateTablesDropCommand(IEnumerable`1<string> tableNames, bool ifExists, bool skipSeal);
    public static string GenerateDeleteTableRecordsCommand(string tableName, string predicate, bool isAsync, bool whatIf);
    public static string GenerateDeleteMaterializedViewRecordsCommand(string materializedViewName, string predicate, bool isAsync, bool whatIf);
    private static string GenerateDeleteEntityRecordsCommand(string entityKind, string entityName, string predicate, bool isAsync, bool whatIf);
    public static string GenerateUpdateTableCommand(string tableName, string deleteIdentifier, string appendIdentifier, string updatePredicate, IDictionary`2<string, string> properties, bool isAsync);
    public static string GeneratePurgeTableRecordsWhatIfStatisticsCommand(string tableName, string predicate, bool isAsync, Nullable`1<long> maxRecords);
    public static string GeneratePurgeTableRecordsWhatIfInfoCommand(string tableName, string predicate, bool isAsync, Nullable`1<long> maxRecords);
    public static string GeneratePurgeTableRecords(string tableName, string predicate, bool isAsync, Nullable`1<long> maxRecords, bool extentGranularity, Nullable`1<Guid> retryOfOperationId);
    public static string GeneratePurgeMaterializedViewRecordsWhatIfInfoCommand(string materializedViewName, string predicate, bool isAsync, Nullable`1<long> maxRecords);
    public static string GeneratePurgeMaterializedViewRecords(string materializedViewName, string predicate, bool isAsync, Nullable`1<long> maxRecords, bool extentGranularity, Nullable`1<Guid> retryOfOperationId);
    private static string GeneratePurgeTableRecordsCommand(string tableName, string predicate, bool isAsync, string whatif, Nullable`1<long> maxRecords, bool extentGranularity, Nullable`1<Guid> retryOfOperationId);
    private static string GeneratePurgeMaterializedViewRecordsCommand(string tableName, string predicate, bool isAsync, string whatif, Nullable`1<long> maxRecords, bool extentGranularity, Nullable`1<Guid> retryOfOperationId);
    private static string GeneratePurgeEntityRecordsCommand(string entityKind, string tableName, string predicate, bool isAsync, string whatif, Nullable`1<long> maxRecords, bool extentGranularity, Nullable`1<Guid> retryOfOperationId);
    public static string GeneratePurgeTableCommand(string tableName);
    public static string GeneratePurgeCleanupCommand(DateTime until, bool isAsync);
    public static string GenerateEmptyExtentContainersCleanupCommand(string databaseName, DateTime until, bool whatif, bool isAsync, bool ifExists);
    public static string GenerateShowDatabasesExtentContainersStorageAccountsCommand();
    public static string GenerateAddDatabasesExtentContainersStorageAccountsCommand(IEnumerable`1<string> uris);
    public static string GenerateSetDatabasesExtentContainersStorageAccountsCommand(IEnumerable`1<string> uris);
    public static string GenerateDropDatabasesExtentContainersStorageAccountsCommand(IEnumerable`1<string> uris);
    public static string GenerateStorageArtifactsCleanupCommand(DateTime until, bool isWhatIf, bool isAsync, bool ifExists);
    public static string GenerateDatabasesExtentContainersCleanupCommand(IEnumerable`1<string> databases, bool isAsync);
    public static string GenerateDatabaseExtentContainerUtilizationShowCommand(string databaseName, IEnumerable`1<string> containerIds, bool isAsync, Nullable`1<TimeSpan> retention);
    public static string GenerateContainerUsageShowCommand(string storageUriWithoutSecret, bool isAsync);
    public static string GenerateShowPurgeCommand(string databaseName, Guid operationId);
    public static string GenerateShowPurgeOperationCommand(string databaseName, Guid operationId);
    public static string GenerateShowPurgeCommand(string databaseName);
    public static string GenerateShowCleanOperationsCommand(string databaseName, Guid operationId);
    public static string GenerateShowCleanOperationsCommand(string databaseName);
    public static string GenerateTableIngestPullCommand(string tableName, IEnumerable`1<string> pathSpecifications, bool isAsync, IDictionary`2<string, string> extensions, IEnumerable`1<string> tags, IEnumerable`1<string> extensionsKeysToObfuscate, bool optimizedSyntax);
    private static StringBuilder AppendPathSpecification(StringBuilder sb, string pathSpecification, bool allowSplittingHiddenPart);
    private static StringBuilder AppendPathSpecifications(StringBuilder sb, IEnumerable`1<string> pathSpecifications, bool allowSplittingHiddenPart);
    private static StringBuilder AppendIngestionPropertiesAsJson(StringBuilder sb, IDictionary`2<string, string> extensions, IEnumerable`1<string> tags);
    private static StringBuilder AppendIngestionProperties(StringBuilder sb, IDictionary`2<string, string> extensions, IEnumerable`1<string> tags, IEnumerable`1<string> extensionsKeysToObfuscate);
    public static string GenerateTableIngestPullCommand(string tableName, string pathSpecification, bool isAsync, string extensions, IEnumerable`1<string> tags);
    public static string GenerateTableIngestPullCommand(string tableName, IEnumerable`1<string> pathSpecifications, bool isAsync, string extensions, IEnumerable`1<string> tags);
    public static string GenerateTableIngestPullCommand(string tableName, string pathSpecification, bool isAsync, Dictionary`2<string, string> properties, IEnumerable`1<string> tags);
    public static string GenerateTableIngestPushCommand(string tableName, bool compressed, string csvData, Dictionary`2<string, string> properties, IEnumerable`1<string> tags);
    public static string GenerateTableIngestPushCommand(string tableName, bool compressed, string csvData, IEnumerable`1<string> tags);
    public static string GenerateTableIngestPushCommand(string tableName, bool compressed, Stream csvData, Dictionary`2<string, string> properties, IEnumerable`1<string> tags, bool optimizedSyntax);
    private static IDictionary`2<string, string> AddTagsToExtentionsDictionary(IEnumerable`1<string> tags, IDictionary`2<string, string> extensions);
    public static string GenerateQueuedIngestFromStorageContainerCommand(string tableName, string containerConnectionString, string prefix, string suffix, Nullable`1<long> maxFiles, IDictionary`2<string, string> ingestionProperties);
    public static string GenerateListBlobsCommand(string containerConnectionString, string prefix, string suffix, Nullable`1<long> maxFiles);
    public static string GenerateQueuedIngestFromSingleBlobUri(string tableName, string sourcePath, IDictionary`2<string, string> ingestionProperties);
    public static string GenerateTableSetCommand(string tableName, string innerQuery, bool isAsync, IEnumerable`1<string> tags, Nullable`1<DateTime> creationTime, string folderName, string docString, bool enableIngestionTimePolicy, bool persistDetails, bool isDistributed);
    public static string GenerateTableSetCommand(string tableName, string innerQuery, bool isAsync, TableSetAppendReplaceParameters parameters);
    public static string GenerateTableAppendCommand(string tableName, string innerQuery, bool isAsync, IEnumerable`1<string> tags, IEnumerable`1<string> ingestIfNotExistsValues, Nullable`1<DateTime> creationTime, string folderName, string docString, bool extendSchema, bool persistDetails, bool distributed);
    public static string GenerateTableAppendCommand(string tableName, string innerQuery, bool isAsync, TableSetAppendReplaceParameters parameters);
    public static string GenerateTableSetOrAppendCommand(string tableName, string innerQuery, bool isAsync, IEnumerable`1<string> tags, IEnumerable`1<string> ingestIfNotExistsValues, Nullable`1<DateTime> creationTime, string folderName, string docString, bool enableIngestionTimePolicy, bool extendSchema, bool persistDetails, bool distributed);
    public static string GenerateTableSetOrAppendCommand(string tableName, string innerQuery, bool isAsync, TableSetAppendReplaceParameters parameters);
    public static string GenerateTableSetOrReplaceCommand(string tableName, string innerQuery, bool isAsync, IEnumerable`1<string> tags, IEnumerable`1<string> ingestIfNotExistsValues, Nullable`1<DateTime> creationTime, string folderName, string docString, bool enableIngestionTimePolicy, bool extendSchema, bool persistDetails, bool distributed, bool disableReplaceOnUpdatePolicies);
    public static string GenerateTableSetOrReplaceCommand(string tableName, string innerQuery, bool isAsync, TableSetAppendReplaceParameters parameters);
    private static string GenerateTableAppendOrReplaceCommandImpl(string tableName, string innerQuery, bool isAsync, TableSetAppendReplaceParameters parameters, string commandName);
    public static string GenerateTableRenameCommand(string tableName, string newTableName, bool syncStreamingIngestion);
    public static string GenerateTablesRenameCommand(IEnumerable`1<Tuple`2<string, string>> tableRenames);
    public static string GenerateTableShowCommand(string tableName);
    public static string GenerateTableDataStatisticsShowCommand(string tableName, double samplePercent, bool includeColdData, Nullable`1<DateTime> from, Nullable`1<DateTime> to);
    public static string GenerateTablesShowCommand();
    public static string GenerateTablesShowDetailsCommand(IEnumerable`1<string> tableNames);
    public static string GenerateTablesShowDetailsLevelCommand(IEnumerable`1<string> tableNames, int level, bool includeMaterializedViews);
    public static string GenerateTablesShowIncludeExternalsCommand();
    public static string GenerateExtentContainersShowCommand(Nullable`1<bool> isRecyclableFilter, string stateFilter);
    public static string GenerateDatabaseExtentContainerAddCommand(string databaseName, string rootUrl, TimeSpan extentContainerHardDeletePeriod);
    public static string GenerateDatabaseExtentContainerRecycleCommand(string databaseName, Guid containerId);
    public static string GenerateDatabaseExtentContainerRecycleCommand(string databaseName, int ageInHours);
    public static string GenerateDatabaseExtentContainerDropCommand(string databaseName);
    public static string GenerateDatabaseExtentContainerDropCommand(string databaseName, Guid containerId);
    public static string GenerateDatabaseExtentContainerSetStateCommand(string databaseName, Guid containerId, string state);
    public static string GenerateStoredQueryResultContainerDropCommand(string databaseName, IEnumerable`1<Guid> containerIds);
    public static string GenerateStoredQueryResultContainerDropUnusedCommand(string databaseName);
    public static string GenerateDmAlterAggregatorStorageAccountsCommand(IEnumerable`1<string> storages, IEnumerable`1<string> remoteStorage);
    public static string GenerateDmAlterMergeAggregatorStorageAccountsCommand(IEnumerable`1<string> storages, IEnumerable`1<string> remoteStorages);
    public static string GenerateDmDropAggregatorStorageAccountsCommand(IEnumerable`1<string> storages);
    public static string GenerateDmAlterObtainerQueuesCommand(string obtainerName, IEnumerable`1<string> queues);
    public static string GenerateDmAlterMergeObtainerQueuesCommand(string obtainerName, IEnumerable`1<string> queues);
    public static string GenerateDmDropObtainerQueuesCommand(string obtainerName, IEnumerable`1<string> queues);
    public static string GenerateDmAlterObtainersQueuesCommand(IEnumerable`1<string> obtainerNames, IEnumerable`1<string> queues);
    public static string GenerateDmAlterMergeObtainersQueuesCommand(IEnumerable`1<string> obtainerNames, IEnumerable`1<string> queues);
    public static string GenerateDmDropObtainersQueuesCommand(IEnumerable`1<string> obtainerNames, IEnumerable`1<string> queues);
    public static string GenerateDmAddOrAlterDataIngestionSourceCommand(string obtainerName, string obtainerType, string configurationAsJson);
    public static string GenerateDmAlterMergeDataIngestionSourceCommand(string obtainerName, string obtainerType, Dictionary`2<string, string> properties);
    public static string GenerateDmClusterDropDataObtainerCommand(string obtainerName);
    public static string GenerateDmClusterDropDataObtainersCommand(IEnumerable`1<string> obtainerNames);
    public static string GenerateDmPauseCommand(string name);
    public static string GenerateBridgeClusterTenantGroupAddCommand(string name, string engineDataSource, HashSet`1<string> dmDataSources, string pubSubEventsNamePrefix, bool sharePubSubStorageAccounts, Nullable`1<TimeSpan> defaultDatabaseHotCacheSpan);
    public static string GenerateBridgeClusterTenantGroupAddCommand(string name);
    public static string GenerateBridgeStorageAccountsSetVisibility(string name, IEnumerable`1<string> storageAccounts, bool isVisible);
    public static string GenerateAriaBridgeNotifyResumeCommand(string clusterName);
    public static string GenerateAriaBridgeNotifySuspendCommand(string clusterName);
    public static string GenerateAriaBridgeNotifyDeleteCommand(string clusterName);
    public static string GenerateDmClusterSettingsAlterCommand(string settingsType, string settingsAsJson, string name);
    public static string GenerateDmClusterSettingsAlterMergeCommand(string settingJsonPath, string settingNewValue);
    public static string GenerateDmClusterSettingsShowCommand(string settingsType, string name, bool withEncryptedSecrets);
    public static string GenerateBridgeClusterSettingsShowCommand(string settingsVersion, int numOfVersions);
    public static string GenerateDmTargetQueryServiceUriShowCommand();
    public static string GenerateDmGenevaSourceSettingsShowCommand();
    public static string GenerateDmEventHubSourceSettingsShowCommand(bool includeReadOnlySources, bool withSecrets);
    public static string GenerateDmEventGridSourceSettingsShowCommand(bool withSecrets);
    public static string GenerateDmCosmosDbSourceSettingsShowCommand();
    public static string GenerateDmIngestionSourceTypesShowCommand();
    public static string GenerateDmClusterInitializeConfigurationCommand(string configurationAsJson);
    public static string GenerateDmRefreshPoliciesCommand();
    public static string GenerateDmAlterStorageKeysCommand(DmSettingsType settingsType, Dictionary`2<string, string> storageKeys, string certificateThumbprint);
    public static string GenerateDmAlterMergeGenevaIngestionSourceCommand(string obtainerName, string settingName, string settingValue);
    public static string GenerateDmReplaceCommonQueuesCommand(string queueTypeName);
    public static string GenerateDmProcessDeadLetterQueueCommand(string entityTypeName, string obtainerName);
    public static string GenerateDmAlterCommonStoragePropertiesCommand(string storageAccountName, string accessMode, string drainUntil);
    public static string GenerateDmStagingRetentionPeriodSetCommand(TimeSpan period);
    public static string GenerateDmPurgesShowCommand(Guid operationId);
    public static string GenerateDmPurgesShowCommand(Nullable`1<DateTime> startTime, Nullable`1<DateTime> endTime, string database);
    public static string GenerateDmPurgeTableRecordsFirstPhase(string databaseName, string tableName, string predicate);
    public static string GenerateDmPurgeTableRecordsSecondPhase(string databaseName, string tableName, string predicate, string verificationToken);
    public static string GenerateDmPurgeTableRecordsSinglePhase(string databaseName, string tableName, string predicate, bool noRegrets);
    public static string GenerateDmPurgeMaterializedViewRecordsFirstPhase(string databaseName, string tableName, string predicate);
    public static string GenerateDmPurgeMaterializedViewRecordsSecondPhase(string databaseName, string tableName, string predicate, string verificationToken);
    public static string GenerateDmPurgeMaterializedViewRecordsSinglePhase(string databaseName, string tableName, string predicate, bool noRegrets);
    private static string GenerateDmPurgeEntityRecordsFirstPhase(string entityKind, string databaseName, string tableName, string predicate);
    private static string GenerateDmPurgeEntityRecordsSecondPhase(string entityKind, string databaseName, string tableName, string predicate, string verificationToken);
    private static string GenerateDmPurgeEntityRecordsSinglePhase(string entityKind, string databaseName, string tableName, string predicate, bool noRegrets);
    public static string GenerateDmPurgeTableFirstPhase(string databaseName, string tableName);
    public static string GenerateDmPurgeTableSecondPhase(string databaseName, string tableName, string verificationToken);
    public static string GenerateDmPurgeTableSinglePhase(string databaseName, string tableName, bool noRegrets);
    public static string GenerateDmPurgeTableRecordsRetryCommand(Nullable`1<DateTime> startTime, Nullable`1<DateTime> endTime, bool dryRun);
    public static string GenerateExecuteScriptCommand(string script, bool continueOnErrors, string authorizationContext, bool isClusterLevelScript);
    public static string GenerateAdminThenQuery(string adminCommand, string innnerQuery, bool isPipe);
    public static string GenerateExportToSqlDatabaseCommand(string sqlTableName, string sqlConnectionString, string query, bool isAsync, bool fireTriggers, bool createIfNotExists, string primaryKey, bool distributed);
    public static string GenerateExportCommand(IEnumerable`1<string> storageBlobUriList, string query, bool async, bool compressed, string compressionType, int sizeLimitInBytes, string namePrefix, string format, IncludeHeaders includeHeaders, string encoding, Nullable`1<bool> isDistributed, Nullable`1<bool> persistCommandResults, string distribution, Nullable`1<int> parquetRowGroupSize, bool writeNativeParquetV2, Nullable`1<ParquetDatetimePrecision> parquetDatetimePrecision, Nullable`1<bool> useNativeParquetWriter, string exportSchema);
    public static string GenerateExportToExternalTableCommand(string externalTableName, string query, Nullable`1<long> sizeLimitInBytes, bool isAsync, Nullable`1<bool> persistDetails, Nullable`1<bool> distributed, Nullable`1<bool> legacy, string distributionKind, int parquetRowGroupSize, Nullable`1<int> spread, Nullable`1<bool> useNativeParquetWriter, string exportSchema);
    public static string GenerateContinuousExportCreateOrAlterCommand(string jobName, string externalTableName, string query, TimeSpan intervalBetweenRuns, Nullable`1<TimeSpan> forcedLatency, List`1<string> cursorScopedTables, Nullable`1<bool> isDistributed, Nullable`1<long> sizeLimitInBytes, string distributionKind, string managedIdentity, Nullable`1<int> parquetRowGroupSize, Nullable`1<bool> useNativeParquetWriter, Nullable`1<bool> isDisabled);
    public static string GenerateContinuousExportEnableCommand(string jobName);
    public static string GenerateContinuousExportSetCursorToNowCommand(string jobName);
    public static string GenerateContinuousExportDisableCommand(string jobName);
    private static void AddPropertyIfNonNull(T property, Func`1<string> propertyToString, string name, Dictionary`2<string, string> props);
    public static string GenerateContinuousExportRunCommand(string jobName, bool isAsync);
    public static string GenerateContinuousExportJobDropCommand(string jobName);
    public static string GenerateContinuousExportJobsShowCommand();
    public static string GenerateContinuousExportJobShowCommand(string jobName);
    public static string GenerateContinuousExportJobShowExportedArtifactsCommand(string jobName);
    public static string GenerateContinuousExportJobShowFailuresCommand(string jobName);
    public static string GenerateContinuousExportJobShowPendingCommand(bool showInOrderReadyForExecutionOnly);
    public static string GeneratePluginEnableCommand(string pluginName);
    public static string GeneratePluginDisableCommand(string pluginName);
    public static string GenerateWorkloadGroupAlterMergeCommand(string workloadGroupName, string serializedWorkloadGroup);
    public static string GenerateWorkloadGroupCreateOrAlterCommand(string workloadGroupName, string serializedWorkloadGroup);
    public static string GenerateWorkloadGroupDropCommand(string workloadGroupName);
    public static string GenerateWorkloadGroupShowCommand(string workloadGroupName);
    public static string GenerateWorkloadGroupsShowCommand();
    public static string GenerateDatabaseShowRetentionPolicyCommand(string databaseName);
    public static string GenerateDatabaseShowExtentTagsRetentionPolicyCommand(string databaseName);
    public static string GenerateDatabaseShowRetentionInternalPolicyCommand(string databaseName);
    public static string GenerateDatabaseShowIngestionBatchingPolicyCommand(string databaseName);
    public static string GenerateDatabaseShowMergePolicyCommand(string databaseName);
    public static string GenerateDatabaseShowShardingPolicyCommand(string databaseName);
    public static string GenerateDatabaseShowStreamingIngestionPolicyCommand(string databaseName);
    public static string GenerateDatabaseShowCachingPolicyCommand(string databaseName);
    public static string GenerateTablesShowRetentionPolicyCommand(string databaseName);
    public static string GenerateTableShowRetentionPolicyCommand(string tableName);
    public static string GenerateTableShowRetentionInternalPolicyCommand(string tableName);
    public static string GenerateTableShowIngestionBatchingPolicyCommand(string tableName);
    public static string GenerateTableShowMergePolicyCommand(string tableName);
    public static string GenerateTableShowUpdatePolicyCommand(string tableName);
    public static string GenerateTableShowUpdatePolicyCommand(string databaseName, string tableName);
    public static string GenerateTableShowShardingPolicyCommand(string tableName);
    public static string GenerateTableShowPartitioningPolicyCommand(string tableName);
    public static string GenerateTableShowIngestionTimePolicyCommand(string tableName);
    public static string GenerateTableShowRestrictedViewAccessPolicyCommand(string tableName);
    public static string GenerateTableShowStreamingIngestionPolicyCommand(string tableName);
    public static string GenerateTableShowCachingPolicyCommand(string tableName);
    public static string GenerateTableShowAutoDeletePolicyCommand(string tableName);
    public static string GenerateShowClusterExternalThrottlingPolicy();
    public static string GenerateTableShowExtentTagsRetentionPolicyCommand(string tableName);
    public static string GenerateTableShowRowLevelSecurityPolicyCommand(string tableName);
    public static string GenerateTableShowEncodingPolicyCommand(string tableName);
    public static string GenerateClusterShowStreamingIngestionPolicyCommand();
    public static string GenerateClusterShowIngestionBatchingPolicyCommand();
    public static string GenerateClusterShowQueryWeakConsistencyPolicyCommand();
    public static string GenerateClusterShowShardingPolicyCommand();
    public static string GenerateClusterShowManagedIdentityPolicyCommand();
    public static string GenerateDatabaseShowManagedIdentityPolicyCommand(string databaseName);
    public static string GeneratePolicyShowCommand(PolicyCslToken policyType, EntityType entityType, string entityQualifiedName, Dictionary`2<string, string> properties);
    private static string GeneratePolicyShowCommand(PolicyCslToken policyType, string entityType, string entityQualifiedName, Dictionary`2<string, string> properties);
    public static string GenerateClusterShowCapacityPolicyCommand();
    public static string GenerateClusterShowCapacityPolicyCommandInternal();
    public static string GenerateEncodingPolicyShowCommand(EntityType entityType, string qualifiedName);
    public static string GenerateClusterMultiDatabaseAdminsPolicyShowCommand();
    public static string GenerateClusterClusterAdminPolicyShowCommand();
    public static string GenerateClusterRequestClassificationPolicyShowCommand();
    public static string GenerateClusterDiagnosticsPolicyShowCommand();
    public static string GenerateDatabaseDiagnosticsPolicyShowCommand(string databaseName);
    public static string GenerateClusterCalloutPolicyShowCommand();
    public static string GenerateTableAlterRetentionPolicyCommand(string databaseName, string tableName, string retentionPolicy);
    public static string GenerateTableAlterRetentionPolicyCommand(string databaseName, string tableName, DataRetentionPolicy retentionPolicy);
    public static string GenerateDatabaseAlterRetentionPolicyCommand(string databaseName, DataRetentionPolicy retentionPolicy);
    public static string GenerateDatabaseAlterExtentTagsRetentionPolicyCommand(string databaseName, IEnumerable`1<ExtentTagsRetentionPolicy> extentTagsRetentionPolicies);
    public static string GenerateTableAlterRetentionInternalPolicyCommand(string databaseName, string tableName, DataRetentionPolicyPersistency retentionPolicy);
    public static string GenerateDatabaseAlterRetentionInternalPolicyCommand(string databaseName, DataRetentionPolicyPersistency retentionPolicy);
    public static string GenerateDatabaseAlterRetentionPolicyCommand(string databaseName, Nullable`1<TimeSpan> softDeletePeriod, DataRecoverability recoverability);
    public static string GenerateTableAlterRetentionPolicyCommand(string databaseName, string tableName, Nullable`1<TimeSpan> softDeletePeriod, DataRecoverability recoverability);
    private static string GenerateAlterMergeRetentionPolicy(Nullable`1<TimeSpan> softDeletePeriod, DataRecoverability recoverability);
    public static string GenerateTableAlterDataPartitioningPolicyCommand(string databaseName, string tableName, string serializedDataPartitioningPolicy);
    public static string GenerateTableAlterIngestionBatchingPolicyCommand(string databaseName, string tableName, IngestionBatchingPolicy ingestionBatchingPolicy);
    public static string GenerateTableAlterMergeIngestionBatchingPolicyCommand(string databaseName, string tableName, string serializedProperty);
    public static string GenerateDatabaseAlterIngestionBatchingPolicyCommand(string databaseName, IngestionBatchingPolicy ingestionBatchingPolicy);
    public static string GenerateDatabaseAlterMergeIngestionBatchingPolicyCommand(string databaseName, string serializedProperty);
    public static string GenerateTableAlterExtentsMergePolicyCommand(string databaseName, string tableName, string serializedProperty, Dictionary`2<string, string> properties);
    public static string GenerateTableAlterExtentsMergePolicyCommand(string databaseName, string tableName, ExtentsMergePolicy mergePolicy, Dictionary`2<string, string> properties);
    public static string GenerateTableAlterMergeExtentsMergePolicyCommand(string databaseName, string tableName, string serializedProperty, Dictionary`2<string, string> properties);
    public static string GenerateDatabaseAlterExtentsMergePolicyCommand(string databaseName, string serializedProperty);
    public static string GenerateDatabaseAlterExtentsMergePolicyCommand(string databaseName, ExtentsMergePolicy mergepolicy);
    public static string GenerateTableUpdatePolicyAlterCommand(string databaseName, string tableName, DataUpdatePolicy dataUpdatePolicy);
    public static string GenerateTableUpdatePoliciesAlterCommand(string databaseName, string tableName, IEnumerable`1<DataUpdatePolicy> dataUpdatePolicies, Dictionary`2<string, string> properties);
    public static string GenerateTableUpdatePoliciesAlterMergeCommand(string databaseName, string tableName, IEnumerable`1<DataUpdatePolicy> dataUpdatePolicies);
    public static string GenerateTableDataShardingPolicyAlterCommand(string databaseName, string tableName, DataShardingPolicy dataShardingPolicy);
    public static string GenerateTableDataPartitioningPolicyAlterCommand(string databaseName, string tableName, string dataPartitioningPolicyAsJson);
    public static string GenerateTableAlterRowOrderPolicyCommand(string databaseName, string tableName, string rowOrder);
    public static string GenerateTableAlterRowLevelSecurityPolicyCommand(string databaseName, string tableName, string query, bool isEnabled, Dictionary`2<string, string> properties);
    public static string GenerateDatabaseAlterManagedIdentityPolicyCommand(string databaseName, Dictionary`2<string, HashSet`1<string>> allowedUsages, bool alterMerge);
    public static string GenerateDatabaseManagedIdentityPolicyDropCommand(string databaseName);
    public static string GenerateClusterAlterManagedIdentityPolicyCommand(Dictionary`2<string, HashSet`1<string>> allowedUsages, bool alterMerge);
    public static string GenerateClusterSystemPropertiesAlterCommand(Dictionary`2<string, object> properties);
    public static string GenerateClusterSystemPropertiesDropCommand();
    public static string GenerateClusterSystemPropertiesShowCommand();
    public static string GenerateClusterManagedIdentityPolicyDropCommand();
    public static string GenerateClusterManagedIdentityPolicyShowCommand();
    public static string GenerateTableAlterAutoDeletePolicyCommand(string tableName, AutoDeletePolicy autoDeletePolicy);
    public static string GenerateAlterClusterExternalThrottlingPolicy(string policyStr);
    public static string GenerateTableAlterExtentTagsRetentionPolicyCommand(string tableName, IEnumerable`1<ExtentTagsRetentionPolicy> extentTagsRetentionPolicies);
    public static string GenerateDatabaseDataShardingPolicyAlterCommand(string databaseName, DataShardingPolicy dataShardingPolicy);
    public static string GenerateDatabaseDataShardingPolicyDropCommand(string databaseName);
    public static string GenerateClusterAlterCachingPolicyCommand(TimeSpan dataHotSpan, TimeSpan indexHotSpan, IEnumerable`1<DateTimeRange> windowHotDates);
    public static string GenerateDatabaseAlterCachingPolicyCommand(string databaseName, TimeSpan dataHotSpan, TimeSpan indexHotSpan, IEnumerable`1<DateTimeRange> windowHotDates);
    public static string GenerateCachingPolicyWindowHotDatesText(IEnumerable`1<DateTimeRange> windowHotDates);
    public static string GenerateDatabaseAlterStreamingIngestionPolicyCommand(string databaseName, bool isEnabled, Nullable`1<double> hintAllocatedRate);
    public static string GenerateDatabaseAlterStreamingIngestionPolicyCommand(string databaseName, string policy, bool alterMerge);
    public static string GenerateDatabaseAlterStreamingIngestionPolicyCommand(string databaseName, bool isEnabled);
    public static string GenerateDatabaseAlterStreamingIngestionPolicyCommand(string databaseName, StreamingIngestionPolicy policy);
    public static string GenerateDatabaseAlterEncodingPolicyCommand(string databaseName, string encoding);
    public static string GenerateDatabaseAlterRetentionPolicies(IEnumerable`1<EntityNameAndPolicy`1<DataRetentionPolicy>> retentionPolicies);
    public static string GenerateEntitiesAlterRetentionInternalPolicies(IEnumerable`1<EntityNameAndPolicy`1<DataRetentionPolicyPersistency>> retentionPolicies);
    public static string GenerateClusterAlterQueryWeakConsistencyPolicyCommand(QueryWeakConsistencyPolicy queryWeakConsistencyPolicy);
    public static string GenerateClusterAlterStreamingIngestionPolicyCommand(ClusterStreamingIngestionPolicy policy);
    public static string GenerateClusterAlterIngestionBatchingPolicyCommand(IngestionBatchingPolicy ingestionBatchingPolicy);
    public static string GenerateClusterAlterMergeIngestionBatchingPolicyCommand(string serializedProperty);
    public static string GenerateClusterAlterShardingPolicyCommand(DataShardingPolicy dataShardingPolicy);
    public static string GenerateColumnAlterEncodingPolicyCommand(string tableName, string columnName, string encoding);
    public static string GenerateColumnsAlterEncodingPolicyByQueryCommand(string encoding, string columnsQuery);
    public static string GenerateColumnAlterEncodingPolicyByTypeCommand(string tableName, string columnName, string encodingPolicyType);
    public static string GenerateColumnAlterCachingPolicyCommand(string tableName, string columnName, TimeSpan dataHotSpan, TimeSpan indexHotSpan);
    public static string GenerateColumnShowPolicyEncodingCommand(string tableName, string columnName);
    public static string MultiEncodingPolicyChangeSuffixJson(string encodingPolicies);
    public static string GenerateMultiEncodingPolicyByTypeCommand(string tableName, string entityNameToPolicyType);
    public static string GenerateTableColumnsClassificationShowCommand(string tableName);
    public static string GenerateClusterAlterCapacityPolicyCommand(CapacityPolicy capacityPolicy);
    public static string GenerateClusterAlterMergeCapacityPolicy(string capacityPolicyJson);
    public static string GenerateClusterAlterMergeRequestClassificationPolicyCommand(bool isEnabled);
    public static string GenerateClusterAlterMergeShardingUseShardEnginePolicyCommand(bool useShardEngine);
    public static string GenerateClusterAlterRequestClassificationPolicyCommand(bool isEnabled, string classificationFunctionBody);
    public static string GenerateIngestionTimePolicyAlterCommand(string tableName, bool enable);
    public static string GenerateRestrictedViewAccessPolicyAlterCommand(string tableName, bool enable);
    public static string GenerateAlterTableCachingPolicyCommand(string tableName, TimeSpan hotSpan, IEnumerable`1<DateTimeRange> windowHotDates);
    public static string GenerateAlterTableCachingPolicyCommand(string tableName, TimeSpan dataHotSpan, TimeSpan indexHotSpan, IEnumerable`1<DateTimeRange> windowHotDates);
    public static string GenerateAlterTableStreamingIngestionPolicyCommand(string tableName, string policy, bool alterMerge);
    public static string GenerateTableAlterStreamingIngestionPolicyCommand(string tableName, string policy, bool alterMerge);
    public static string GenerateAlterTableStreamingIngestionPolicyCommand(string tableName, bool isEnable);
    public static string GenerateTableAlterStreamingIngestionPolicyCommand(string tableName, bool isEnabled);
    public static string GenerateAlterTableStreamingIngestionPolicyCommand(string tableName, bool isEnabled, Nullable`1<double> hintAllocatedRate);
    public static string GenerateTableAlterStreamingIngestionPolicyCommand(string tableName, bool isEnabled, Nullable`1<double> hintAllocatedRate);
    public static string GenerateClusterAlterRowStorePolicyCommand(string rowStorePolicy, bool alterMerge, string withProperties);
    public static string GeneratePolicyAlterCommand(PolicyCslToken policyType, EntityType entityType, string entityQualifiedName, string alterPostfix, string withProperties);
    private static string GeneratePolicyAlterCommand(PolicyCslToken policyType, string entityType, string entityQualifiedName, string alterPostfix, string withProperties);
    private static string GeneratePolicyAlterMergeCommand(PolicyCslToken policyType, string entityType, string entityQualifiedName, string alterPostfix);
    public static string GeneratePolicyAlterMergeCommand(PolicyCslToken policyType, EntityType entityType, string entityQualifiedName, string alterPostfix, string withProperties);
    public static string GenerateEncodingPolicyAlterCommand(string qualifiedName, string newEncodingPolicy);
    public static string GenerateTableEncodingPolicyAlterCommand(string qualifiedName, string newEncodingPolicy);
    private static string ClearEncodingPolicyOrigin(string encodingPolicyJson);
    private static void ClearEncodingPolicyOriginForType(JObject encodingPolicy, string policyType);
    public static string GenerateColumnEncodingPolicyAlterCommand(string qualifiedName, string newEncodingPolicy);
    public static string GenerateAlterTablesDataRetentionPolicyCommand(IEnumerable`1<string> tableNames, string retentionPolicyJson);
    public static string GenerateAlterTablesDataRetentionPolicyCommand(IEnumerable`1<string> tableNames, DataRetentionPolicy retentionPolicy);
    public static string GenerateAlterTablesExtentsMergePolicyCommand(IEnumerable`1<string> tableNames, ExtentsMergePolicy mergePolicy);
    public static string GenerateAlterTablesCachingPolicyCommand(IEnumerable`1<string> tableNames, TimeSpan dataHotSpan, TimeSpan indexHotSpan);
    public static string GenerateAlterTablesIngestionTimePolicyCommand(IEnumerable`1<string> tableNames, bool enable);
    public static string GenerateAlterTablesRestrictedViewAccessPolicyCommand(IEnumerable`1<string> tableNames, bool enable);
    public static string GenerateTableShowRowOrderPolicyCommand(string tableName);
    public static string GenerateAlterTablesRowOrderPolicyCommand(IEnumerable`1<string> tableNames, string rowOrderPolicy);
    public static string GenerateClusterAlterMultiDatabaseAdminsPolicyCommand(MultiDatabaseAdminsPolicy multiDatabaseAdminsPolicy);
    public static string GenerateClusterAlterDiagnosticsPolicyCommand(DiagnosticsPolicy diagnosticsPolicy);
    public static string GenerateClusterAlterMergeDiagnosticsPolicyCommand(DiagnosticsPolicy diagnosticsPolicy);
    public static string GenerateDatabaseAlterDiagnosticsPolicyCommand(DiagnosticsPolicy diagnosticsPolicy, string databaseName);
    public static string GenerateDatabaseAlterMergeDiagnosticsPolicyCommand(DiagnosticsPolicy diagnosticsPolicy, string databaseName);
    public static string GenerateClusterAlterCalloutPolicyCommand(IEnumerable`1<CalloutPolicy> calloutPolicies);
    public static string GenerateDatabaseMergePolicyDropCommand(string databaseName);
    public static string GenerateColumnEncodingPolicyDropCommand(string databaseName, string tableName, string columnName);
    public static string GenerateTableMergePolicyDropCommand(string databaseName, string tableName);
    public static string GenerateTableUpdatePolicyDropCommand(string databaseName, string tableName);
    public static string GenerateDatabaseRetentionPolicyDropCommand(string databaseName);
    public static string GenerateDatabaseExtentTagsRetentionPolicyDropCommand(string databaseName);
    public static string GenerateDatabaseCachingPolicyDropCommand(string databaseName);
    public static string GenerateTableRetentionPolicyDropCommand(string databaseName, string tableName);
    public static string GenerateTableDataPartitioningPolicyDropCommand(string databaseName, string tableName);
    public static string GenerateTableAutoDeletePolicyDropCommand(string databaseName, string tableName);
    public static string GenerateTableExtentTagsRetentionPolicyDropCommand(string databaseName, string tableName);
    public static string GenerateClusterDataShardingPolicyDropCommand();
    public static string GenerateClusterDropStreamingIngestionPolicyCommand();
    public static string GenerateClusterDropRowStorePolicyCommand();
    public static string GenerateClusterDropRequestClassificationPolicyCommand();
    private static string GeneratePolicyDropCommand(PolicyCslToken policyType, string entityType, string entityQualifiedName);
    public static string GeneratePolicyDropCommand(PolicyCslToken policyType, EntityType entityType, string entityQualifiedName);
    public static string GenerateTableCachingPolicyDropCommand(string databaseName, string tableName);
    public static string GenerateTableBatchingPolicyDropCommand(string databaseName, string tableName);
    public static string GenerateTableIngestionTimePolicyDropCommand(string databaseName, string tableName);
    public static string GenerateTableRestrictedViewAccessPolicyDropCommand(string databaseName, string tableName);
    public static string GenerateTableRowOrderPolicyDropCommand(string databaseName, string tableName);
    public static string GenerateTableRowLevelSecurityPolicyDropCommand(string databaseName, string tableName);
    public static string GenerateDatabaseStreamingIngestionPolicyDropCommand(string databaseName, bool shouldSeal);
    public static string GenerateTableStreamingIngestionPolicyDropCommand(string databaseName, string tableName);
    public static string GenerateDatabaseBatchingPolicyDropCommand(string databaseName);
    public static string GenerateDatabaseDropDiagnosticsPolicyCommand(string databaseName);
    public static string GenerateMultipleEntitiesRetentionPolicyDeleteCommand(IEnumerable`1<string> entities);
    public static string GenerateClusterRowStorePolicyShowCommand();
    public static string GenerateRowStoresShowCommand();
    public static string GenerateRowStoreShowCommand(string rowStore);
    public static string GenerateTableRowStoresShowCommand(string databaseName, string tableName);
    public static string GenerateRowStoreKeysBlockCommandForDatabase(string databaseName);
    public static string GenerateRowStoreKeysBlockCommandForTable(string databaseName, string tableName);
    public static string GenerateRowStoreCreateCommand();
    public static string GenerateRowStoreAttachCommand(string rowStoreName, Guid rowStoreId, string writeAheadLogPath);
    public static string GenerateRowStoreDropCommand(string rowStoreName, bool ifexists, bool force);
    public static string GenerateAlterRowstoreReferencesCommand(string tableName, string operationMode, string entityType, string entityName, bool force, bool failIfNotFound);
    public static string GenerateAlterRowstoreReferencesCommand(string databaseName, string tableName, string operationMode, string entityType, string entityName, bool force, bool failIfNotFound);
    public static string GenerateSealTableCommand(string tableName, bool shouldTrim);
    public static string GenerateSealTableUpToDateCommand(string tableName, DateTime untilOrAfter, bool shouldTrim);
    public static string GenerateSealAllTablesCommand(DateTime untilOrAfter, bool flush, bool forceFlush);
    public static string GenerateColumnAlterCommand(string tableName, string columnName, Type clrType);
    public static string GenerateColumnAlterCommand(string tableName, string columnName, string columnType);
    public static string GenerateColumnAlterCommand(string databaseName, string tableName, string columnName, Type clrType);
    public static string GenerateColumnAlterCommand(string databaseName, string tableName, string columnName, string columnType);
    public static string GenerateColumnDropCommand(string tableName, string columnName, bool ifExists);
    public static string GenerateColumnDropCommand(string databaseName, string tableName, string columnName, bool ifExists);
    public static string GenerateDropTableColumnsCommand(string tableName, IEnumerable`1<string> columns);
    public static string GenerateColumnsSwapCommand(string tableName, string columnName1, string columnName2);
    public static string GenerateColumnsSwapCommand(string databaseName, string tableName, string columnName1, string columnName2);
    public static string GenerateColumnRenameCommand(string tableName, string columnName, string newColumnName);
    public static string GenerateColumnRenameCommand(string databaseName, string tableName, string columnName, string newColumnName);
    [ObsoleteAttribute]
public static string GenerateTableCsvMappingCreateCommand(string tableName, string mappingName, IEnumerable`1<CsvColumnMapping> mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults);
    [ObsoleteAttribute]
public static string GenerateTableJsonMappingCreateCommand(string tableName, string mappingName, IEnumerable`1<JsonColumnMapping> mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults);
    [ObsoleteAttribute]
public static string GenerateTableAvroMappingCreateCommand(string tableName, string mappingName, IEnumerable`1<AvroColumnMapping> mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults);
    public static string GenerateTableMappingCreateCommand(IngestionMappingKind mappingKind, string entityName, string mappingName, IEnumerable`1<ColumnMapping> mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults);
    public static string GenerateDatabaseMappingCreateCommand(IngestionMappingKind mappingKind, string entityName, string mappingName, IEnumerable`1<ColumnMapping> mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults);
    private static string GenerateMappingCreateCommand(EntityType entityType, IngestionMappingKind mappingKind, string entityName, string mappingName, string mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults, string formatVersion);
    public static string GenerateTableMappingAlterMergeCommand(IngestionMappingKind mappingKind, string tableName, string mappingName, IEnumerable`1<ColumnMapping> mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults, string formatVersion);
    public static string GenerateDatabaseMappingAlterMergeCommand(IngestionMappingKind mappingKind, string entityName, string mappingName, IEnumerable`1<ColumnMapping> mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults, string formatVersion);
    private static string GenerateMappingAlterMergeCommand(EntityType entityType, IngestionMappingKind mappingKind, string entityName, string mappingName, string mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults, string formatVersion);
    [ObsoleteAttribute]
public static string GenerateTableCsvMappingCreateOrAlterCommand(string tableName, string mappingName, IEnumerable`1<CsvColumnMapping> mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults);
    [ObsoleteAttribute]
public static string GenerateTableJsonMappingCreateOrAlterCommand(string tableName, string mappingName, IEnumerable`1<JsonColumnMapping> mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults);
    [ObsoleteAttribute]
public static string GenerateTableAvroMappingCreateOrAlterCommand(string tableName, string mappingName, IEnumerable`1<AvroColumnMapping> mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults);
    public static string GenerateTableMappingCreateOrAlterCommand(IngestionMappingKind mappingKind, string tableName, string mappingName, IEnumerable`1<ColumnMapping> mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults, string formatVersion);
    private static string GenerateDatabaseMappingCreateOrAlterCommand(EntityType entityType, string mappingType, string tableName, string mappingName, string mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults, string formatVersion);
    public static string GenerateDatabaseMappingCreateOrAlterCommand(IngestionMappingKind mappingKind, string entityName, string mappingName, IEnumerable`1<ColumnMapping> mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults, string formatVersion);
    public static string GenerateTableMappingCreateOrAlterCommand(string mappingType, string tableName, string mappingName, string mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults, string formatVersion);
    private static string GenerateMappingCreateOrAlterCommand(EntityType entityType, string mappingType, string entityName, string mappingName, string mapping, Nullable`1<bool> removeOldestIfRequired, bool skipResults, string formatVersion);
    public static string GenerateCsvMappingsShowCommand(bool onlyLatestPerTable);
    public static string GenerateJsonMappingsShowCommand(bool onlyLatestPerTable);
    public static string GenerateAvroMappingsShowCommand(bool onlyLatestPerTable);
    public static string GenerateIngestionMappingsShowCommand(IngestionMappingKind mappingKind, bool onlyLatestPerTable, string formatVersion);
    public static string GenerateDatabaseIngestionMappingsShowCommand(string databaseName, string mappingName, IngestionMappingKind mappingKind, bool onlyLatestPerTable, string formatVersion);
    public static string GenerateDatabasesCsvMappingsShowCommand(IEnumerable`1<string> databaseNames, bool onlyLatestPerTable, string formatVersion);
    public static string GenerateDatabasesAvroMappingsShowCommand(IEnumerable`1<string> databaseNames, bool onlyLatestPerTable, string formatVersion);
    public static string GenerateDatabasesJsonMappingsShowCommand(IEnumerable`1<string> databaseNames, bool onlyLatestPerTable, string formatVersion);
    public static string GenerateDatabasesIngestionMappingsShowCommand(IEnumerable`1<string> databaseNames, bool onlyLatestPerTable, string formatVersion);
    public static string GenerateDatabasesIngestionMappingsShowCommand(IEnumerable`1<string> databaseNames, IngestionMappingKind mappingKind, bool onlyLatestPerTable, string formatVersion);
    public static string GenerateTableCsvMappingsShowCommand(string tableName);
    public static string GenerateTableJsonMappingsShowCommand(string tableName);
    public static string GenerateTableAvroMappingsShowCommand(string tableName);
    public static string GenerateTableCsvMappingShowCommand(string tableName, string mappingName);
    public static string GenerateTableJsonMappingShowCommand(string tableName, string mappingName);
    public static string GenerateTableAvroMappingShowCommand(string tableName, string mappingName);
    public static string GenerateTableIngestionMappingShowCommand(IngestionMappingKind mappingKind, string tableName, string mappingName, string formatVersion);
    public static string GenerateTableIngestionMappingsShowCommand(IngestionMappingKind mappingKind, string tableName, string formatVersion);
    [ObsoleteAttribute]
public static string GenerateTableCsvMappingAlterCommand(string tableName, string mappingName, IEnumerable`1<CsvColumnMapping> mapping, bool skipResults);
    [ObsoleteAttribute]
public static string GenerateTableJsonMappingAlterCommand(string tableName, string mappingName, IEnumerable`1<JsonColumnMapping> mapping, bool skipResults);
    [ObsoleteAttribute]
public static string GenerateTableAvroMappingAlterCommand(string tableName, string mappingName, IEnumerable`1<AvroColumnMapping> mapping, bool skipResults);
    public static string GenerateTableMappingAlterCommand(IngestionMappingKind mappingKind, string tableName, string mappingName, IEnumerable`1<ColumnMapping> mapping, bool skipResults);
    public static string GenerateDatabaseMappingAlterCommand(IngestionMappingKind mappingKind, string entityName, string mappingName, IEnumerable`1<ColumnMapping> mapping, bool skipResults);
    public static string GenerateTableMappingAlterCommand(IngestionMappingKind mappingKind, string tableName, string mappingName, string mapping, bool skipResults);
    public static string GenerateDatabaseMappingAlterCommand(IngestionMappingKind mappingKind, string entityName, string mappingName, string mapping, bool skipResults);
    private static string GenerateMappingAlterCommand(EntityType entityType, IngestionMappingKind mappingKind, string entityName, string mappingName, string mapping, bool skipResults);
    public static string GenerateTableCsvMappingDropCommand(string tableName, string mappingName, bool skipResults);
    public static string GenerateTableJsonMappingDropCommand(string tableName, string mappingName, bool skipResults);
    public static string GenerateTableAvroMappingDropCommand(string tableName, string mappingName, bool skipResults);
    public static string GenerateTableIngestionMappingDropCommand(string tableName, string mappingName, IngestionMappingKind mappingKind, bool skipResults, string formatVersion);
    public static string GenerateDatabaseIngestionMappingDropCommand(string tableName, string mappingName, IngestionMappingKind mappingKind, bool skipResults, string formatVersion);
    private static string GenerateIngestionMappingDropCommand(EntityType entityType, string entityName, string mappingName, IngestionMappingKind mappingKind, bool skipResults, string formatVersion);
    public static string GenerateIngestionQueuesGetCommand(string queueTypeName, bool withSas, bool withKeys);
    public static string GenerateIngestionQueuesLengthsGetCommand();
    public static string GenerateIngestionResourcesGetCommand(bool withRegions, bool withoutSecrets);
    public static string GenerateAriaBridgeUriCommand();
    public static string GenerateShowPrincipalRolesCommand();
    public static string GenerateShowPrincipalRolesCommand(string principal);
    public static string GenerateShowClusterPrincipalRolesCommand();
    public static string GenerateShowClusterPrincipalRolesCommand(string principal);
    public static string GenerateShowDatabasePrincipalRolesCommand(string databaseName);
    public static string GenerateShowDatabasePrincipalRolesCommand(string databaseName, string principal);
    public static string GenerateShowTablePrincipalRolesCommand(string tableName);
    public static string GenerateShowTablePrincipalRolesCommand(string tableName, string principal);
    public static string GenerateShowFunctionPrincipalRolesCommand(string functionName);
    public static string GenerateShowFunctionPrincipalRolesCommand(string functionName, string principal);
    public static string GenerateShowClusterPrincipalsCommand(bool useLightSchema);
    public static string GenerateBasicAuthUsersShowCommand();
    public static string GenerateFeatureFlagsShowCommand();
    public static string GenerateShowDatabasePrincipalsCommand(string databaseName, bool excludeCluster, bool useLightSchema);
    public static string GenerateShowDatabasesPrincipalsCommand(IEnumerable`1<string> databaseNames, bool excludeCluster, bool useLightSchema);
    public static string GenerateShowTableAdminsCommand(string tableName);
    public static string GenerateShowFunctionAdminsCommand(string functionName);
    public static string GenerateShowClusterBlockedPrincipalsCommand();
    public static string GenerateShowPrincipalAccessCommand(string principalFqn, string accessType);
    public static string GenerateShowPrincipalAccessCommand(string principalFqn, string accessType, string database);
    public static string GenerateShowPrincipalAccessCommand(string principalFqn, string accessType, string database, string table);
    public static string GenerateShowPrincipalAccessCommand(string accessType, string database, string table, bool useCurrentPrincipal);
    private static string GenerateShowPrincipalAccessCommand(string principalFqn, string accessType, string database, string table, bool useCurrentPrincipal);
    public static string GenerateSetOrAddClusterAuthorizedPrincipalsCommand(AuthorizationRole authorizationRole, bool isAdd, IEnumerable`1<string> principals, bool skipValidation, string notes, bool skipResults);
    public static string GenerateSetOrAddClusterAuthorizedPrincipalsCommand(bool isAdmin, bool isAdd, IEnumerable`1<string> principals, bool skipValidation, string notes, bool skipResults);
    public static string GenerateSetOrAddTableAdminsCommand(string tableName, bool isAdd, IEnumerable`1<string> principals, bool skipValidation, string notes, bool skipResults);
    public static string GenerateSetOrAddTableIngestorsCommand(string tableName, bool isAdd, IEnumerable`1<string> principals, bool skipValidation, string notes, bool skipResults);
    public static string GenerateExternalTableAlterAuthorizedPrincipalsCommand(string externalTableName, string operationMode, IEnumerable`1<string> principals, string notes, bool skipResults);
    public static string GenerateAlterExternalTableFolderCommand(string tableName, string value);
    public static string GenerateAlterExternalTableDocStringCommand(string tableName, string value);
    private static string GenerateSetOrAddTableAuthorizedPrincipalsCommand(string tableName, bool isAdd, IEnumerable`1<string> principals, AuthorizationRole authorizationRole, string notes, bool skipResults);
    public static string GenerateSetOrAddFunctionAdminsCommand(string functionName, bool isAdd, IEnumerable`1<string> principals, string notes, bool skipResults);
    private static List`1<string> GetValidatedPrincipalList(IEnumerable`1<string> principals, string operationMode, string notes, string entityTypeNameAndAllowedRoles);
    private static string GenerateAlterPrincipalsCommandText(string entityTypeName, string entityName, string operationMode, AuthorizationRole authorizationRole, string notes, bool skipResults, IEnumerable`1<string> validatedPrincipalsList, Func`2<string, string> normalizeName, bool isImmutable);
    public static string GenerateSetDatabaseAuthorizedPrincipalsCommandForSecurityGroups(string databaseName, AuthorizationRole authorizationRole, bool isAdd, IEnumerable`1<string> aadSecurityGroupNames, bool skipValidation, string notes, bool skipResults, bool isImmutable);
    public static string GenerateSetDatabaseAuthorizedPrincipalsCommandForSecurityGroups(string databaseName, bool isAdmin, bool isAdd, IEnumerable`1<string> aadSecurityGroupNames, bool skipValidation, string notes, bool skipResults);
    public static string GenerateSetDatabaseAuthorizedPrincipalsCommand(string databaseName, AuthorizationRole authorizationRole, bool isAdd, IEnumerable`1<string> principals, bool skipValidation, string notes, bool skipResults, bool isImmutable);
    public static string GenerateSetDatabaseAuthorizedPrincipalsCommand(string databaseName, bool isAdmin, bool isAdd, IEnumerable`1<string> principals, bool skipValidation, string notes, bool skipResults, bool isImmutable);
    public static string GenerateAddClusterBlockedPrincipalsCommand(string principal, string application, string user, Nullable`1<TimeSpan> blockPeriod, string reason);
    public static string GenerateDropClusterBlockedPrincipalsCommand(string principal, string application, string user);
    public static string GenerateDropClusterAuthorizedPrincipalsCommand(AuthorizationRole authorizationRole, IEnumerable`1<string> principals);
    public static string GenerateDropClusterAuthorizedPrincipalsCommand(bool isAdmin, IEnumerable`1<string> principals);
    public static string GenerateAddDatabaseAuthorizedPrincipalsCommand(AuthorizationRole authorizationRole, string databaseName, IEnumerable`1<string> principals, string notes, bool skipResults, bool isImmutable);
    public static string GenerateDropDatabaseAuthorizedPrincipalsCommand(AuthorizationRole authorizationRole, string databaseName, IEnumerable`1<string> principals, bool skipResults);
    public static string GenerateDropDatabaseAuthorizedPrincipalsCommand(bool isAdmin, string databaseName, IEnumerable`1<string> principals, bool skipResults);
    public static string GenerateDropTableAdminsCommand(string tableName, IEnumerable`1<string> principals);
    public static string GenerateDropTableIngestorsCommand(string tableName, IEnumerable`1<string> principals);
    private static string GenerateDropTableAuthorizedPrincipalsCommand(string tableName, IEnumerable`1<string> principals, AuthorizationRole authorizationRole);
    public static string GenerateDropFunctionAdminsCommand(string functionName, IEnumerable`1<string> principals);
    public static string GenerateCreateFunctionCommand(string functionName, string folder, string docString, IDictionary`2<string, string> parameters, string body, bool ifNotExists, bool skipValidation, bool isView);
    public static string GenerateAlterFunctionCommand(string functionName, string folder, string docString, IDictionary`2<string, string> parameters, string body, bool skipValidation);
    public static string GenerateCreateOrAlterFunctionCommand(string functionName, string folder, string docString, IDictionary`2<string, string> parameters, string body, bool skipValidation);
    private static string GenerateAlterFunctionCommandBase(string functionName, string folder, string docString, IDictionary`2<string, string> parameters, string body, bool createIfNotExists, bool skipValidation);
    public static string GenerateCreateFunctionCommand(FunctionSchema functionSchema, bool ifNotExists, bool skipValidation);
    public static string GenerateAlterFunctionCommand(FunctionSchema functionSchema, bool skipValidation);
    public static string GenerateCreateOrAlterFunctionCommand(FunctionSchema functionSchema, bool skipValidation);
    private static string GenerateAlterFunctionCommandBase(FunctionSchema functionSchema, bool createIfNotExists, bool skipValidation);
    public static string GenerateFunctionAlterFolderCommand(string functionName, string value);
    public static string GenerateFunctionAlterDocStringCommand(string functionName, string value);
    public static string GenerateFunctionDropCommand(string functionName, bool ifExists);
    public static string GenerateFunctionsDropCommand(IEnumerable`1<string> functionNames, bool ifExists);
    public static string GenerateFunctionsShowCommand();
    public static string GenerateFunctionShowCommand(string functionName, Nullable`1<bool> showObfuscatedStrings);
    public static string GenerateFunctionShowSchemaAsJsonCommand(string functionName, Nullable`1<bool> showObfuscatedStrings);
    public static string GenerateEncryptionKeysCreateCommand(string grantedForPrincipalFqn);
    public static string GenerateFollowerClusterDefaultDatabasePrincipalsModificationKindAlterCommand(string leaderClusterMetadataPath, string defaultDatabasePrincipalsModificationKind, string leaderKeyVaultName);
    public static string GenerateFollowerClusterLeaderKeyVaultNameAlterCommand(string leaderClusterMetadataPath, string leaderKeyVaultName);
    public static string GenerateFollowerClusterDefaultDatabaseCachingPoliciesModificationKindAlterCommand(string leaderClusterMetadataPath, string defaultDatabaseCachingPoliciesModificationKind);
    public static string GenerateFollowerClusterFollowAuthorizedPrincipalsCommand(string leaderClusterMetadataPath, bool followAuthorizedPrincipals);
    public static string GenerateFollowerClusterDatabaseNamePrefixAlterCommand(string leaderClusterMetadataPath, string databaseNamePrefix, string leaderKeyVaultName);
    public static string GenerateFollowerClusterLeaderClusterMetadataPathAlterCommand(string leaderClusterMetadataPath, string newLeaderClusterMetadataPath, string leaderKeyVaultName);
    public static string GenerateFollowerDatabasesShowCommand();
    public static string GenerateFollowerDatabaseShowCommand(string databaseName);
    public static string GenerateFollowerDatabasesShowCommand(IEnumerable`1<string> databaseNames);
    public static string GenerateFollowLeadersAllDatabasesCommand(string leaderClusterMetadataPath, string defaultDatabasePrincipalsModificationKind, string defaultDatabaseCachingPoliciesModificationKind, string databaseNamePrefix, string leaderKeyVaultName);
    public static string GenerateUnFollowLeadersAllDatabasesCommand(string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabasesAddCommand(IEnumerable`1<string> databaseNames, string leaderClusterMetadataPath, string defaultDatabasePrincipalsModificationKind, string defaultDatabaseCachingPoliciesModificationKind, string databaseNamePrefix);
    public static string GenerateFollowerDatabaseAddCommand(string databaseName, string leaderClusterMetadataPath, string serializedDatabaseMetadataOverride, string leaderKeyVaultName);
    public static string GenerateFollowerDatabaseMetadataOverrideAlterCommand(string databaseName, string serializedDatabaseMetadataOverride, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseAddCommand(string databaseName, string leaderClusterMetadataPath, string defaultDatabasePrincipalsModificationKind, string defaultDatabaseCachingPoliciesModificationKind, IEnumerable`1<string> excludedTableNames, IEnumerable`1<string> includedTableNames, IEnumerable`1<string> excludedExternalTableNames, IEnumerable`1<string> includedExternalTableNames, IEnumerable`1<string> excludedMaterializedViews, IEnumerable`1<string> includedMaterializedViews, IEnumerable`1<string> excludedFunctions, IEnumerable`1<string> includedFunctions, string databaseNameOverride, string prettyNameOverride);
    public static string GenerateFollowerDatabasesDropCommand(IEnumerable`1<string> databaseNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseCachingPolicyAlterCommand(string databaseName, TimeSpan dataHotSpan, TimeSpan indexHotSpan, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseCachingPolicyDropCommand(string databaseName);
    public static string GenerateFollowerTablesCachingPolicyAlterCommand(string databaseName, IEnumerable`1<string> tableNames, TimeSpan dataHotSpan, TimeSpan indexHotSpan, string leaderClusterMetadataPath);
    public static string GenerateFollowerTablesCachingPolicyDropCommand(string databaseName, IEnumerable`1<string> tableNames);
    public static string GenerateFollowerMaterializedViewsCachingPolicyAlterCommand(string databaseName, IEnumerable`1<string> materializedViewNames, TimeSpan dataHotSpan, TimeSpan indexHotSpan, string leaderClusterMetadataPath);
    public static string GenerateFollowerMaterializedViewsCachingPolicyDropCommand(string databaseName, IEnumerable`1<string> materializedViewNames);
    private static string GenerateFollowerTablesCachingPolicyAlterCommandImpl(string databaseName, IEnumerable`1<string> entityNames, EntityType entityType, TimeSpan dataHotSpan, TimeSpan indexHotSpan, string leaderClusterMetadataPath);
    private static string GenerateFollowerTablesCachingPolicyDropCommandImpl(string databaseName, IEnumerable`1<string> entityNames, EntityType entityType);
    public static string GenerateFollowerDatabaseIncludedTablesAddCommand(string databaseName, IEnumerable`1<string> tableNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseIncludedTablesDropCommand(string databaseName, IEnumerable`1<string> tableNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseExcludedTablesAddCommand(string databaseName, IEnumerable`1<string> tableNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseExcludedTablesDropCommand(string databaseName, IEnumerable`1<string> tableNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseIncludedExternalTablesAddCommand(string databaseName, IEnumerable`1<string> externalTableNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseIncludedExternalTablesDropCommand(string databaseName, IEnumerable`1<string> externalTableNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseExcludedExternalTablesAddCommand(string databaseName, IEnumerable`1<string> externalTableNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseExcludedExternalTablesDropCommand(string databaseName, IEnumerable`1<string> externalTableNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseIncludedMaterializedViewsAddCommand(string databaseName, IEnumerable`1<string> materializedViewNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseIncludedMaterializedViewsDropCommand(string databaseName, IEnumerable`1<string> materializedViewNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseExcludedMaterializedViewsAddCommand(string databaseName, IEnumerable`1<string> materializedViewNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseExcludedMaterializedViewsDropCommand(string databaseName, IEnumerable`1<string> materializedViewNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseIncludedFunctionsAddCommand(string databaseName, IEnumerable`1<string> functionNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseIncludedFunctionsDropCommand(string databaseName, IEnumerable`1<string> functionNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseExcludedFunctionsAddCommand(string databaseName, IEnumerable`1<string> functionNames, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseExcludedFunctionsDropCommand(string databaseName, IEnumerable`1<string> functionNames, string leaderClusterMetadataPath);
    private static string GenerateFollowerDatabaseChildEntitiesAlterCommand(string databaseName, IEnumerable`1<string> entityNames, EntityType entityType, string alterMode, string listKind, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseAuthorizedPrincipalsAddCommand(string databaseName, AuthorizationRole authorizationRole, IEnumerable`1<string> principals, string notes, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseAuthorizedPrincipalsDropCommand(string databaseName, AuthorizationRole authorizationRole, IEnumerable`1<string> principals);
    public static string GenerateFollowerDatabaseAuthorizedPrincipalsModificationKindAlterCommand(string databaseName, string modificationKind, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseCachingPoliciesModificationKindAlterCommand(string databaseName, string modificationKind, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabaseNameOverrideAlterCommand(string databaseName, string databaseNameOverride, string leaderClusterMetadataPath);
    public static string GenerateFollowerDatabasePrefetchExtentsAlterCommand(string databaseName, bool prefetchExtentsOnSchemaRefresh);
    private static string GetKeyVaultSuffix(string leaderKeyVaultName);
    public static string GenerateExternalAdlTableCreateOrAlterCommand(string tableName, Type rowType, string format, IList`1<string> adlUriList, bool alter, bool forceNormalizeColumnName, string folder, string docString, Nullable`1<bool> compressed, string compressionType, Nullable`1<IncludeHeaders> includeHeaders, string encoding, string namePrefix, string fileExtension, IList`1<string> partitionsList, string partitionBy, string pathFormat, bool sampleUris, bool validateNotEmpty, bool dryRun, bool filesPreview);
    public static string GenerateExternalBlobTableCreateOrAlterCommand(string tableName, Type rowType, string format, IList`1<string> storageBlobUriList, bool alter, bool forceNormalizeColumnName, string folder, string docString, Nullable`1<bool> compressed, string compressionType, Nullable`1<IncludeHeaders> includeHeaders, string encoding, string namePrefix, string fileExtension, IList`1<string> partitionsList, string partitionBy, string pathFormat, bool sampleUris, bool validateNotEmpty, bool dryRun, bool filesPreview, string catalog);
    public static string GenerateExternalBlobTableCreateOrAlterCommand(string tableName, CslTableSchema tableSchema, string format, IList`1<string> storageBlobUriList, bool alter, bool forceNormalizeColumnName, string folder, string docString, Nullable`1<bool> compressed, string compressionType, Nullable`1<IncludeHeaders> includeHeaders, string encoding, string namePrefix, string fileExtension, IList`1<string> partitionsList, string partitionBy, string pathFormat, bool sampleUris, bool validateNotEmpty, bool dryRun, bool filesPreview, string catalog);
    public static string GenerateExternalAzureStorageTableCreateOrAlterCommand(string tableName, string tableKind, CslTableSchema tableSchema, string format, IList`1<string> pathsUriList, bool alter, bool forceNormalizeColumnName, string folder, string docString, Nullable`1<bool> compressed, string compressionType, Nullable`1<IncludeHeaders> includeHeaders, string encoding, string namePrefix, string fileExtension, IList`1<string> partitionsList, string partitionBy, string pathFormat, bool sampleUris, bool validateNotEmpty, bool dryRun, bool filesPreview, string catalog);
    public static string GenerateExternalAzureStorageTableCreateOrAlterCommand_Internal(string tableName, string tableKind, CslTableSchema tableSchema, string format, IList`1<string> pathsUriList, bool alter, bool forceNormalizeColumnName, string folder, string docString, Nullable`1<bool> compressed, string compressionType, Nullable`1<IncludeHeaders> includeHeaders, string encoding, string namePrefix, string fileExtension, IList`1<string> partitionsList, string partitionBy, string pathFormat, bool sampleUris, bool validateNotEmpty, bool dryRun, bool filesPreview, SchemaOptions schemaOptions, string catalog);
    private static string GenerateExternalTablePartitionParams(IList`1<string> partitionsList, string partitionBy, string pathFormat);
    public static string GenerateExternalDeltaTableCreateOrAlterCommand(string tableName, IList`1<string> pathsUriList, CslTableSchema tableSchema, bool alter, string folder, string docString, string namePrefix, string fileExtension, bool dryRun, SchemaOptions schemaOptions, bool isAsync);
    public static string GenerateExternalSqlTableCreateOrAlterCommand(string externalTableName, Type rowType, string sqlTableName, string connectionString, string folder, string docString, Nullable`1<bool> createIfNotExists, string primaryKey, Nullable`1<bool> fireTriggers, CslTableSchema tableSchema, SqlDialectKind sqlDialect);
    public static string GenerateStringPartitionText(string columnName, Nullable`1<int> mod, string formatPrefix, string formatSuffix);
    public static string GenerateDatetimePartitionText(string columnName, TimeSpan timeSpan, string partitionFormat);
    public static string GenerateDatetimeFunctionPartitionText(string columnName, string function, Nullable`1<TimeSpan> timeSpan, string partitionFormat);
    public static string GenerateExternalTablesShowCommand(Nullable`1<bool> showObfuscatedStrings);
    public static string GenerateExternalTableShowCommand(string tableName, Nullable`1<bool> showObfuscatedStrings);
    public static string GenerateExternalTableShowSchemaCommand(string tableName, bool asJson);
    public static string GenerateExternalTableShowPrincipalsCommand(string tableName);
    public static string GenerateExternalTableShowArtifactsCommand(string tableName, Nullable`1<long> limit);
    public static string GenerateExternalTableDropCommand(string externalTableName, bool ifExists);
    public static string GenerateTableMirroringPolicyAlterCommand(string databaseName, string tableName, string tableMirroringPolicy, bool isAlterMerge);
    public static string GenerateTableMirroringPolicyWithPropertiesAlterCommand(string databaseName, string tableName, string connectionString, string partitionBy, string pathFormat, IDictionary`2<string, string> properties, bool isAlterMerge);
    public static string GenerateTableMirroringPolicyDropCommand(string databaseName, string tableName);
    public static string GenerateTableMirroringPolicyShowCommand(string databaseName, string tableName);
    public static string GenerateDatabaseMirroringPolicyAlterCommand(string databaseName, string databaseMirroringPolicy, bool isAlterMerge);
    public static string GenerateDatabaseMirroringPolicyWithPropertiesAlterCommand(string databaseName, string connectionString, Dictionary`2<string, string> properties, bool isAlterMerge);
    public static string GenerateDatabaseMirroringPolicyDropCommand(string databaseName);
    public static string GenerateDatabaseMirroringPolicyShowCommand(string databaseName);
    public static string GenerateDatabaseTableMirroringPolicyTemplatesAlterCommand(string databaseName, string databaseMirroringTemplates, bool isAlterMerge);
    public static string GenerateDatabaseTableMirroringPolicyTemplatesShowCommand(string databaseName);
    public static string GenerateDatabaseTableMirroringPolicyTemplatesDropCommand(string databaseName);
    private static string GenerateDatabaseTableMirroringPolicyTemplatesCommand(string commandPrefix, string databaseName, string commandSuffix);
    public static string GenerateShowTableOperationsMirroringStatusCommand(string tableName);
    public static string GenerateShowTableOperationsMirroringFailuresCommand(string tableName);
    public static string GenerateShowTableOperationsMirroringExportedArtifactsCommand(string tableName);
    [ObsoleteAttribute]
public static string GenerateExternalTableMappingCreateCommand(IngestionMappingKind mappingKind, string externalTableName, string mappingName, string mapping, Nullable`1<bool> removeOldestIfRequired);
    [ObsoleteAttribute]
public static string GenerateExternalTableMappingCreateOrAlterCommand(IngestionMappingKind mappingKind, string externalTableName, string mappingName, string mapping, Nullable`1<bool> removeOldestIfRequired);
    [ObsoleteAttribute]
public static string GenerateExternalTableMappingAlterCommand(IngestionMappingKind mappingKind, string externalTableName, string mappingName, string mapping, Nullable`1<bool> removeOldestIfRequired);
    [ObsoleteAttribute]
public static string GenerateExternalTableMappingDropCommand(string externalTableName, string mappingName, IngestionMappingKind mappingKind);
    [ObsoleteAttribute]
public static string GenerateExternalTableMappingsShowCommand(IngestionMappingKind mappingKind, string externalTableName);
    [ObsoleteAttribute]
public static string GenerateExternalTableMappingShowCommand(IngestionMappingKind mappingKind, string externalTableName, string mappingName);
    public static string GenerateExternalTableMappingCreateCommand(string externalTableName, string mappingName, string mapping, Nullable`1<bool> removeOldestIfRequired);
    public static string GenerateExternalTableMappingCreateOrAlterCommand(string externalTableName, string mappingName, string mapping, Nullable`1<bool> removeOldestIfRequired);
    public static string GenerateExternalTableMappingAlterCommand(string externalTableName, string mappingName, string mapping);
    public static string GenerateExternalTableMappingDropCommand(string externalTableName, string mappingName);
    public static string GenerateExternalTableMappingsShowCommand(string externalTableName);
    public static string GenerateExternalTableMappingShowCommand(string externalTableName, string mappingName);
    public static string GenerateMaterializedViewCreateCommand(string viewName, string sourceTableName, string query, bool isAsync, bool backfill, bool ifNotExists, Nullable`1<DateTime> effectiveDateTime, IDictionary`2<string, string> properties);
    public static string GenerateMaterializedViewOverMaterializedViewCreateCommand(string viewName, string sourceMaterializedViewName, string query, bool isAsync, bool backfill, bool ifNotExists, Nullable`1<DateTime> effectiveDateTime, IDictionary`2<string, string> properties);
    public static string GenerateMaterializedViewOverMaterializedViewCreateOrAlterCommand(string viewName, string sourceMaterializedViewName, string query, IDictionary`2<string, string> properties);
    private static string GenerateMaterializedViewCreateCommandImpl(string viewName, EntityType entityType, string sourceTableName, string query, bool isAsync, bool backfill, bool ifNotExists, Nullable`1<DateTime> effectiveDateTime, IDictionary`2<string, string> properties);
    public static string GenerateMaterializedViewRenameCommand(string oldName, string newName);
    public static string GenerateMaterializedViewAlterCommand(string viewName, string sourceTableName, string query, IDictionary`2<string, string> properties);
    public static string GenerateMaterializedViewCreateOrAlterCommand(string viewName, string sourceTableName, string query, IDictionary`2<string, string> properties);
    public static string GenerateMaterializedViewAlterDocStringCommand(string viewName, string docString);
    public static string GenerateMaterializedViewAlterFolderCommand(string viewName, string folder);
    public static string GenerateMaterializedViewAlterLookbackCommand(string viewName, Nullable`1<TimeSpan> lookback);
    public static string GenerateMaterializedViewAlterAutoUpdateSchemaCommand(string viewName, bool autoUpdateSchema);
    public static string GenerateMaterializedViewShowCommand(string viewName);
    public static string GenerateMaterializedViewsShowCommand();
    public static string GenerateMaterializedViewsShowDetailsCommand();
    public static string GenerateMaterializedViewsShowDetailsCommand(IEnumerable`1<string> materializedViewsNames);
    public static string GenerateMaterializedViewsShowDetailsCommand(string viewName);
    public static string GenerateMaterializedViewsShowDetailsLevelCommand(IEnumerable`1<string> materializedViewsNames, int level);
    public static string GenerateMaterializedViewSchemaShowCommand(string viewName, bool formatAsJson);
    public static string GenerateMaterializedViewShowFailuresCommand(string viewName);
    public static string GenerateMaterializedViewExtentsShowCommand(string viewName, bool hotOnly, bool details);
    public static string GenerateMaterializedViewDropCommand(string viewName, bool ifExists);
    public static string GenerateMaterializedViewEnableDisableCommand(string viewName, bool disable);
    public static string GenerateMaterializedViewAlterAuthorizedPrincipalsCommand(string materializedViewName, string operationMode, IEnumerable`1<string> principals, string notes);
    public static string GenerateMaterializedViewAlterRowLevelSecurityPolicyCommand(string materializedViewName, string query, bool isEnabled);
    public static string GenerateMaterializedViewDropRowLevelSecurityPolicyCommand(string materializedViewName);
    public static string GenerateMaterializedViewShowPrincipalsCommand(string materializedViewName);
    public static string GenerateMaterializedViewShowRetentionPolicyCommand(string materializedViewName);
    public static string GenerateMaterializedViewAlterMergeRetentionPolicyCommand(string materializedViewName, Nullable`1<TimeSpan> softDeletePeriod, DataRecoverability recoverability);
    public static string GenerateMaterializedViewShowShardingPolicyCommand(string materializedViewName);
    public static string GenerateMaterializedViewAlterMergeShardingPolicyCommand(string materializedViewName, DataShardingPolicy dataShardingPolicy);
    public static string GenerateMaterializedViewShowMergePolicyCommand(string materializedViewName);
    public static string GenerateMaterializedViewAlterMergePolicyCommand(string materializedViewName, ExtentsMergePolicy mergePolicy);
    public static string GenerateMaterializedViewShowPartitioningPolicyCommand(string materializedViewName);
    public static string GenerateMaterializedViewAlterMergePartitioningPolicyCommand(string materializedViewName, string dataPartitioningPolicyAsJson);
    public static string GenerateMaterializedViewShowRowOrderPolicyCommand(string materializedViewName);
    public static string GenerateMaterializedViewAlterRowOrderPolicyCommand(string materializedViewName, string rowOrderPolicy);
    public static string GenerateMaterializedViewShowCachingPolicyCommand(string materializedViewName);
    public static string GenerateMaterializedViewShowRowLevelSecurityPolicyCommand(string materializedViewName);
    public static string GenerateMaterializedViewAlterMergeCachingPolicyCommand(string materializedViewName, TimeSpan dataHotSpan, TimeSpan indexHotSpan);
    public static string GenerateMaterializedViewClearDataCommand(string materializedViewName);
    public static string GenerateMaterializedViewRetentionPolicyDropCommand(string materializedViewName);
    public static string GenerateMaterializedViewMergePolicyDropCommand(string materializedViewName);
    public static string GenerateMaterializedViewCachingPolicyDropCommand(string materializedViewName);
    public static string GenerateMaterializedViewRowOrderPolicyDropCommand(string materializedViewName);
    public static string GenerateMaterializedViewShardingPolicyDropCommand(string materializedViewName);
    public static string GenerateMaterializedViewPartitioningPolicyDropCommand(string materializedViewName);
    public static string GenerateStoredQueryResultSetCommand(string name, string innerQuery, Nullable`1<TimeSpan> expiresAfter, Nullable`1<int> previewCount, Nullable`1<bool> distributed, Nullable`1<bool> async, Nullable`1<bool> hotCache);
    public static string GenerateStoredQueryResultSetOrReplaceCommand(string name, string innerQuery, Nullable`1<TimeSpan> expiresAfter, Nullable`1<int> previewCount, Nullable`1<bool> distributed, Nullable`1<bool> async, Nullable`1<bool> hotCache);
    private static string GenerateSetOrSetOrReplaceStoredQueryResultCommand(string command, string storedQueryResultName, string innerQuery, Nullable`1<TimeSpan> expiresAfter, Nullable`1<int> previewCount, Nullable`1<bool> distributed, Nullable`1<bool> async, Nullable`1<bool> hotCache);
    public static string GenerateStoredQueryResultsShowCommand(Nullable`1<bool> namesOnly, string namePrefix, Nullable`1<DateTime> validUntil, string sqrName);
    public static string GenerateStoredQueryResultShowSchemaCommand(string name);
    public static string GenerateStoredQueryResultDropCommand(string name);
    public static string GenerateStoredQueryResultsDropCommand(string principal);
    public static string GenerateQueryExecutionShowCommand(string query);
    private static void VerifyModificationKindOrThrow(string modificationKindStr);
    public static string GetQualifiedName(string databaseName, string tableName, string columnName);
    private static string GeneratePolicyCommand(string commandName, PolicyCslToken policyType, EntityType entityType, string entityQualifiedName, string alterPostfix, string withProperties);
    private static string GeneratePolicyCommand(string commandName, PolicyCslToken policyType, string entityType, string entityQualifiedName, string alterPostfix, string withProperties);
    private static string GenerateMultipleTablesAlterPolicyCommand(string commandName, PolicyCslToken policyType, IEnumerable`1<string> tableNames, string policy);
    public static string GetAuthorizationRoleString(AuthorizationRole authorizationRole);
    public static string GenerateWithClause(string propertyName, string propertyValue, bool includeEmptyProperties);
    public static string GenerateWithClause(IDictionary`2<string, string> properties, bool includeEmptyProperties, bool escapeValueIfNeeded);
    public static string DecodeQueryFromBase64Url(string encodedQuery);
    public static string DecodeQueryFromBase64(string query64Base);
    public static string EncodeQueryAsBase64Url(string query);
    private static string GeneratePropertyString(string propertyName, string propertyValue, bool isMandatory);
    private static string PolicyTokenToCslString(PolicyCslToken token);
    private static string JoinWithAtSign(IEnumerable`1<string> list);
    public static string GenerateFabricServicesShowCommand();
    public static string GenerateFabricNodesShowCommand();
    public static string GenerateFabricServiceAssignmentAlterCommand(string fabricServiceType, string serviceId, string nodeId);
    public static string GenerateFabricServiceAssignmentsAlterCommand(string fabricServiceType, Dictionary`2<string, string> serviceIdToNodeId);
    public static string GenerateFabricServiceAssignmentsDropCommand(string fabricServiceType);
    [CompilerGeneratedAttribute]
internal static string <GenerateFollowerDatabaseAddCommand>g__GetIncludedExcludedEntitiesString|697_0(string entityToken, IEnumerable`1<string> excludedEntityNames, IEnumerable`1<string> includedEntityNames);
}
public static class Kusto.Data.Common.CslDateTimeLiteral : object {
    public static string AsCslString(Nullable`1<DateTime> value);
    public static bool TryParse(string literal, Nullable`1& result, bool strict);
    public static bool TryParseNoNull(string literal, DateTime& result, DateTime defaultValue);
    public static Nullable`1<DateTime> Parse(string literal);
    public static DateTime ParseNoNull(string literal);
}
public static class Kusto.Data.Common.CslDecimalLiteral : object {
    public static string AsCslString(Nullable`1<SqlDecimal> value, bool forceNormalize);
    public static bool TryParse(string literal, Nullable`1& result, bool strict);
    public static bool TryParseNoNull(string literal, SqlDecimal& result, SqlDecimal defaultValue);
    public static Nullable`1<SqlDecimal> Parse(string literal);
    public static SqlDecimal ParseNoNull(string literal);
}
public static class Kusto.Data.Common.CslDynamicLiteral : object {
    public static string AsCslString(JToken value);
    private static string AsCslStringImpl(JToken value);
    private static string AsCslStringImpl(JObject jObject);
    private static string AsCslStringImpl(JArray jArray);
}
public static class Kusto.Data.Common.CslGuidLiteral : object {
    public static string AsCslString(Nullable`1<Guid> value);
    public static bool TryParse(string literal, Nullable`1& result, bool strict);
    public static bool TryParseNoNull(string literal, Guid& result, Guid defaultValue);
    public static Nullable`1<Guid> Parse(string literal);
    public static Guid ParseNoNull(string literal);
}
public static class Kusto.Data.Common.CslIntLiteral : object {
    public static string AsCslString(Nullable`1<int> value, bool forceNormalize, bool forceHex);
    public static bool TryParse(string literal, Nullable`1& result, bool strict);
    public static bool TryParseNoNull(string literal, Int32& result, int defaultValue);
    public static Nullable`1<int> Parse(string literal);
    public static int ParseNoNull(string literal);
}
public static class Kusto.Data.Common.CslLiteralParseHelper : object {
    private static bool MatchWhiteSpace(string s, Int32& i);
    private static bool MatchWhiteSpaceBackwards(string s, Int32& i);
    private static bool Match(string s, char c, Int32& i);
    private static bool MatchBackwards(string s, char c, Int32& i);
    private static bool Match(string s, string ss, Int32& i);
    public static bool TryMatch(string literal, string type, Int32& startIndex, Int32& length);
    public static bool TryParseNoNull(string literal, TResult& result, TResult defaultValue, TryParse`1<TResult> tryParse);
    public static Nullable`1<TResult> Parse(string literal, TryParse`1<TResult> tryParse, string literalType);
    public static TResult ParseNoNull(string literal, TryParse`1<TResult> tryParse, string literalType);
}
public static class Kusto.Data.Common.CslLongLiteral : object {
    public static string AsCslString(Nullable`1<long> value, bool forceNormalize, bool forceHex);
    public static bool TryParse(string literal, Nullable`1& result, bool strict);
    public static bool TryParseNoNull(string literal, Int64& result, long defaultValue);
    public static Nullable`1<long> Parse(string literal);
    public static long ParseNoNull(string literal);
}
public class Kusto.Data.Common.CslQueryGenerator : object {
    private static Regex s_possibleOperatorsRegex;
    private static Regex s_termsRegex;
    private static Regex s_cslFilteringRegex;
    private static CslQueryGenerator();
    public static string CreatePowerQueryStatement(KustoConnectionStringBuilder kcsb, string query);
    public static string CreatePowerQueryStatement(KustoConnectionStringBuilder kcsb, string query, Nullable`1<TimeSpan> queryTimeout, string languageSpecification, bool queryWeakConsistency);
    public static string CreatePowerQueryStatementV2(KustoConnectionStringBuilder kcsb, string query, Nullable`1<TimeSpan> queryTimeout, string languageSpecification, bool queryWeakConsistency);
    public static string GenerateCslQueryFromSearchString(string searchString, DatabaseSchema database, TableSchema table, ColumnSchema searchColumn, ColumnSchema timeColumn, Nullable`1<DateTime> start, Nullable`1<DateTime> end, Nullable`1<long> limit, IEnumerable`1<string> facets, bool facetBeforeLimit, IDictionary`2<string, IEnumerable`1<string>> additionalFilters);
    public static string GenerateGeneralTermFilterStatement(string field, IEnumerable`1<T> values, FilterCondition filterCond, FilterAppendLogicOperation logicOperation);
    public static string EnchanceCslQueryWithFacets(string searchString, Nullable`1<long> limit, IEnumerable`1<string> facets, bool facetBeforeLimit, IDictionary`2<string, IEnumerable`1<string>> additionalFilters);
    public static string EnchanceCslQueryWithLimit(string command, int limit);
    public static string GenerateFilterStatement(IDictionary`2<ColumnSchema, IEnumerable`1<string>> additionalFilters, bool useNewLines);
    public static string GenerateTimeFilterStatement(IEnumerable`1<DateTimeRange> timeRanges, IEnumerable`1<string> dateTimeColumnNames);
    public static string GenerateTimeFilterStatementForSingleRange(DateTimeRange timeRange, IEnumerable`1<string> dateTimeColumnNames);
    private static string GenerateDateTimeRangeFilter(string column, DateTimeRange range);
    private static Tuple`2<Dictionary`2<string, IEnumerable`1<string>>, Dictionary`2<string, Tuple`2<DateTime, DateTime>>> ConvertFiltersByColumnType(IDictionary`2<ColumnSchema, IEnumerable`1<string>> additionalFilters);
    private static IEnumerable`1<string> ConvertToCslLiteral(string type, IEnumerable`1<string> columnValues);
    private static string FilterCslOperator(FilterCondition filterCond, CslType cslType);
    private static string GetNumericComparisonOperator(FilterCondition filterCond);
    private static string GetStringMatchOperator(FilterCondition filterCond);
    private static string GetStringForLogicalOperation(FilterAppendLogicOperation logicOperator);
    private static void AppendRangeFilters(StringBuilder sb, Dictionary`2<string, Tuple`2<DateTime, DateTime>> dtRangeFilters);
    private static void AppendEqualityFilters(StringBuilder sb, IDictionary`2<string, IEnumerable`1<string>> additionalFilters, bool useNewLines);
    private static void ParseSearch(StringBuilder sb, TableSchema table, ColumnSchema searchColumn, string searchString);
    private static void ProcessCslPart(StringBuilder sb, TableSchema table, ColumnSchema searchColumn, string cslPart);
    private static void ProcessQueryTerms(StringBuilder sb, TableSchema table, ColumnSchema searchColumn, IEnumerable`1<string> terms, bool isPartOfOrStatement);
    private static void AddCslExpression(StringBuilder sb, string cslExpression);
    private static void AddColumnEqualsExpression(StringBuilder sb, ColumnSchema column, string searchTerm, bool isPartOfOrStatement);
    private static void AddColumnFilterExpression(StringBuilder sb, string searchExpression, bool isPartOfOrStatement);
    private static void AddColumnFilterExpression(StringBuilder sb, ColumnSchema column, string searchTerm, bool isPartOfOrStatement);
    private static void AppendFacetsAndLimit(StringBuilder sb, Nullable`1<long> limit, IEnumerable`1<string> facets, bool facetBeforeLimit);
    private static void AppendLimit(StringBuilder sb, Nullable`1<long> limit, string pipeOrWith);
    private static bool AppendFacets(StringBuilder sb, IEnumerable`1<string> facets);
    private static void AppendTimeFilter(StringBuilder sb, ColumnSchema timeColumn, Nullable`1<DateTime> start, Nullable`1<DateTime> end);
    private static bool TryHandleCslQuery(string searchString, String& cslQuery);
    private static IEnumerable`1<string> ParseTokens(string input);
}
public static class Kusto.Data.Common.CslRealLiteral : object {
    public static string AsCslString(Nullable`1<double> value, bool forceNormalize);
    public static bool TryParse(string literal, Nullable`1& result, bool strict);
    public static bool TryParseNoNull(string literal, Double& result, double defaultValue);
    public static Nullable`1<double> Parse(string literal);
    public static double ParseNoNull(string literal);
}
public static class Kusto.Data.Common.CslStringLiteral : object {
    public static string AsCslString(string value, bool hidden);
    public static string AsCslString(string value);
    public static string AsHiddenCslString(string value);
}
public static class Kusto.Data.Common.CslSyntaxGenerator : object {
    private static HashSet`1<string> s_literalsThatRequireNormalization;
    private static HashSet`1<string> s_classicKeywordsThatNeedBrackets;
    private static HashSet`1<string> s_queryKeywordsThatNeedBrackets;
    private static HashSet`1<string> s_engineCommandKeywordsThatNeedBrackets;
    private static CslSyntaxGenerator();
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use NormalizeName")]
public static string NormalizeDatabaseName(string databaseName, bool forceNormalization);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use NormalizeName")]
public static string NormalizeDatabaseName(string databaseName);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use NormalizeName")]
public static string NormalizeEntityGroupName(string entityGroupName);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use NormalizeName")]
public static string NormalizeVirutalClusterName(string virtualClusterName, bool forceNormalization);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use NormalizeName")]
public static string NormalizeFunctionName(string functionName, bool forceNormalizeFunctionName);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use NormalizeName")]
public static string NormalizeTableName(string tableName, bool forceNormalizeTableName);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use NormalizeName")]
public static string NormalizeContinuousJobName(string jobName, bool forceNormalizeTableName);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use NormalizeName")]
public static string NormalizeColumnName(string columnName, bool forceNormalizeColumnName);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use DenormalizeName")]
public static string DenormalizeColumnName(string columnName);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use NormalizeName")]
public static string NormalizeRowStoreName(string rowStoreName);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use NormalizeName")]
public static string NormalizeWorkloadGroupName(string workloadGroupName);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use NormalizeName")]
public static string NormalizeEncryptionScope(string encryptionScope);
    private static NormalizationMode GetMode(bool forceNormaliztion);
    private static bool CanBeIdentifier(string name, NormalizationMode mode);
    public static bool CanBeClusterManagerCommandIdentifier(string name);
    public static bool CanBeDataManagerCommandIdentifier(string name);
    public static bool CanBeEngineCommandIdentifier(string name);
    public static bool CanBeQueryIdentifier(string name);
    private static string NormalizeName(string name, NormalizationMode mode);
    public static string NormalizeName(string name);
    public static string NormalizeClusterManagerCommandName(string name);
    public static string NormalizeDataManagerCommandName(string name);
    public static string NormalizeEngineCommandName(string name);
    public static string NormalizeQueryName(string name);
    public static string NormalizeQueryOrEngineCommandName(string name);
    private static bool IsIdentifier(string name);
    private static bool IsAscii(char c);
    public static string DenormalizeName(string name);
    [ObsoleteAttribute("Use CanBeIdentifier instead.")]
public static bool IsKeyword(string name);
}
public class Kusto.Data.Common.CslTableSchema : object {
    private ImmutableArray`1<CslColumnSchema> m_columns;
    private static CslTableSchema s_emptyTableScema;
    public static CslTableSchema Empty { get; }
    public IEnumerable`1<CslColumnSchema> Columns { get; }
    [JsonConstructorAttribute]
private CslTableSchema(ImmutableArray`1<CslColumnSchema> columns);
    private static CslTableSchema();
    public static CslTableSchema get_Empty();
    public static CslTableSchema FromClr(Type rowType, bool forceNormalizeColumnNames, SchemaOptions schemaOptions);
    public static CslTableSchema FromClr(IEnumerable`1<Tuple`2<string, Type>> rowFields, bool forceNormalizeColumnNames, SchemaOptions schemaOptions);
    public static CslTableSchema FromClr(IEnumerable`1<Tuple`2<string, string>> rowFields, bool forceNormalizeColumnNames, SchemaOptions schemaOptions);
    public static CslTableSchema FromCsl(IEnumerable`1<Tuple`2<string, string>> rowFields, bool forceNormalizeColumnNames, SchemaOptions schemaOptions);
    public static CslTableSchema FromColumns(IEnumerable`1<CslColumnSchema> columns);
    public static CslTableSchema FromDataTable(DataTable dataTable, bool forceNormalizeColumnNames, SchemaOptions schemaOptions);
    public static CslTableSchema FromSchemaTable(DataTable schemaTable, bool forceNormalizeColumnNames, SchemaOptions schemaOptions);
    public IEnumerable`1<CslColumnSchema> get_Columns();
    public string AsSchemaString(bool addEnclosingParens);
    public CslTableSchema ValidateSchema(SchemaOptions schemaOptions);
    public static string AsDataTableLiteralString(DataTable dataTable, string parameters, bool forceNormalizeColumnNames, bool singleLine, SchemaOptions schemaOptions);
}
public static class Kusto.Data.Common.CslTimeSpanLiteral : object {
    public static string AsCslString(Nullable`1<TimeSpan> value);
    public static bool TryParse(string literal, Nullable`1& result, bool strict);
    public static bool TryParseNoNull(string literal, TimeSpan& result, TimeSpan defaultValue);
    public static Nullable`1<TimeSpan> Parse(string literal);
    public static TimeSpan ParseNoNull(string literal);
}
[DebuggerDisplayAttribute("CslType: {m_typeString} (SDT: {m_typeCode})")]
public class Kusto.Data.Common.CslType : ValueType {
    private CslScalarTypeCode m_typeCode;
    [JsonPropertyAttribute("type")]
private string m_typeString;
    private Type m_correspondingClrType;
    private string m_correspondingSqlType;
    public static CslType Bool;
    public static CslType Int;
    public static CslType Long;
    public static CslType Real;
    public static CslType String;
    public static CslType DateTime;
    public static CslType Guid;
    public static CslType TimeSpan;
    public static CslType Dynamic;
    public static CslType Decimal;
    [EditorBrowsableAttribute("1")]
public static CslType UInt8;
    [EditorBrowsableAttribute("1")]
public static CslType Int16;
    [EditorBrowsableAttribute("1")]
public static CslType UInt16;
    [EditorBrowsableAttribute("1")]
public static CslType UInt;
    [EditorBrowsableAttribute("1")]
public static CslType ULong;
    [EditorBrowsableAttribute("1")]
public static CslType Float;
    private static CslType Int128;
    private static CslType UInt128;
    public bool IsNumeric { get; }
    public bool IsSummable { get; }
    private CslType(CslScalarTypeCode cslScalarTypeCode, string cslScalarTypeString, Type correspondingClrType, string correspondingSqlType);
    private static CslType();
    public bool get_IsNumeric();
    public bool get_IsSummable();
    public sealed virtual bool Equals(CslType other);
    public static bool op_Equality(CslType lhs, CslType rhs);
    public static bool op_Inequality(CslType lhs, CslType rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal static bool TryConvertFromClrType(Type clrType, CslType& cslType);
    public static CslType FromClrType(Type clrType);
    public static CslType FromClrType(string clrType);
    private static bool TryConvertFromClrType(string clrType, CslType& cslType);
    public static CslType FromCslType(string cslTypeString);
    public static string FormatStringLiteralString(string value);
    public static string GetCslTypeFromClrType(Type clrValueType);
    public static string GetCslLiteral(string cslTypeString, string valueString);
    public static string GetCslLiteralFromClrValueString(string clrTypeString, string clrValueString);
    public static string GetDataValueLiteralString(object dataValue);
    public string AsDataValueLiteralString(object dataValue);
    public Type GetCorrespondingClrType();
    public string GetCorrespondingSqlType();
    public static string GetCslTypeNameFromClrType(Type clrType);
    public static string GetCslTypeNameFromClrType(string clrType);
    public virtual string ToString();
    private static bool ValidateJTokenIsValid(JToken jobject);
}
[ObsoleteAttribute("This class is obsolete. Please use Kusto.Data.Common.ColumnMapping instead")]
public class Kusto.Data.Common.CsvColumnMapping : object {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CslDataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CsvColumnDataType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Ordinal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstValue>k__BackingField;
    [JsonPropertyAttribute("Name")]
public string ColumnName { get; public set; }
    [JsonPropertyAttribute("DataType")]
public string CslDataType { get; public set; }
    [JsonPropertyAttribute("CsvDataType")]
public string CsvColumnDataType { get; public set; }
    [JsonPropertyAttribute("Ordinal")]
public int Ordinal { get; public set; }
    [JsonPropertyAttribute("ConstValue")]
public string ConstValue { get; public set; }
    [JsonIgnoreAttribute]
public bool IsValid { get; }
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_CslDataType();
    [CompilerGeneratedAttribute]
public void set_CslDataType(string value);
    [CompilerGeneratedAttribute]
public string get_CsvColumnDataType();
    [CompilerGeneratedAttribute]
public void set_CsvColumnDataType(string value);
    [CompilerGeneratedAttribute]
public int get_Ordinal();
    [CompilerGeneratedAttribute]
public void set_Ordinal(int value);
    [CompilerGeneratedAttribute]
public string get_ConstValue();
    [CompilerGeneratedAttribute]
public void set_ConstValue(string value);
    public CsvColumnMapping Clone();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public bool get_IsValid();
}
[DataContractAttribute]
public class Kusto.Data.Common.DatabaseSchema : object {
    [DataMemberAttribute]
public string Name;
    [DataMemberAttribute]
public Dictionary`2<string, TableSchema> Tables;
    public TableSchema DefaultTable;
    [DataMemberAttribute]
public string PrettyName;
    [DataMemberAttribute]
public int MajorVersion;
    [DataMemberAttribute]
public int MinorVersion;
    [DataMemberAttribute]
public Dictionary`2<string, FunctionSchema> Functions;
    [DataMemberAttribute]
public string DatabaseAccessMode;
    [DataMemberAttribute]
public Dictionary`2<string, TableSchema> ExternalTables;
    [DataMemberAttribute]
public Dictionary`2<string, TableSchema> MaterializedViews;
    [DataMemberAttribute]
public Dictionary`2<string, ImmutableArray`1<string>> EntityGroups;
    [DataMemberAttribute]
public DatabaseSuspensionState SuspensionState;
    public DatabaseSchema(string name, string prettyName);
    public void AddFunction(FunctionSchema functionSchema);
    public void AddTable(TableSchema tableSchema);
    public void AddExternalTable(TableSchema tableSchema);
    public void AddMaterializedView(TableSchema viewSchema);
    public void AddEntityGroup(string entityGroupName, ImmutableArray`1<string> entityGroupBody);
    public sealed virtual object Clone();
    public virtual bool Equals(object other);
    public static bool CompareTableSchemas(Dictionary`2<string, TableSchema> tables, Dictionary`2<string, TableSchema> otherTables);
    public string GetVersionName();
    public virtual int GetHashCode();
    public static DatabaseSchema FromJsonString(string clusterSchemaJsonString, string databaseName);
    public static IEnumerable`1<DatabaseSchema> Parse(DatabaseSchemaShowAsJsonCommandResult queryResult);
}
public enum Kusto.Data.Common.DatabaseShowFlavor : Enum {
    public int value__;
    public static DatabaseShowFlavor Identity;
    public static DatabaseShowFlavor Verbose;
    public static DatabaseShowFlavor Policies;
    public static DatabaseShowFlavor DataStats;
    public static DatabaseShowFlavor Default;
    public static DatabaseShowFlavor Metadata;
    public static DatabaseShowFlavor EncryptionCertificate;
}
public enum Kusto.Data.Common.DataConnectionError : Enum {
    public int value__;
    public static DataConnectionError ManagedIdentityUnauthorized;
    public static DataConnectionError ManagedIdentityNotFound;
    public static DataConnectionError UsingDeprecatedConnectionString;
}
public enum Kusto.Data.Common.DataRecoverability : Enum {
    public int value__;
    public static DataRecoverability Unknown;
    public static DataRecoverability Enabled;
    public static DataRecoverability Disabled;
}
[DataContractAttribute]
public enum Kusto.Data.Common.DataSourceCompressionType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static DataSourceCompressionType None;
    [EnumMemberAttribute]
public static DataSourceCompressionType GZip;
    [EnumMemberAttribute]
public static DataSourceCompressionType Zip;
}
[DataContractAttribute]
public enum Kusto.Data.Common.DataSourceFormat : Enum {
    public int value__;
    [EnumMemberAttribute]
public static DataSourceFormat csv;
    [EnumMemberAttribute]
public static DataSourceFormat tsv;
    [EnumMemberAttribute]
public static DataSourceFormat scsv;
    [EnumMemberAttribute]
public static DataSourceFormat sohsv;
    [EnumMemberAttribute]
public static DataSourceFormat psv;
    [EnumMemberAttribute]
public static DataSourceFormat txt;
    [EnumMemberAttribute]
public static DataSourceFormat raw;
    [EnumMemberAttribute]
public static DataSourceFormat tsve;
    [EnumMemberAttribute]
public static DataSourceFormat json;
    [EnumMemberAttribute]
public static DataSourceFormat singlejson;
    [EnumMemberAttribute]
public static DataSourceFormat multijson;
    [EnumMemberAttribute]
public static DataSourceFormat avro;
    [EnumMemberAttribute]
public static DataSourceFormat parquet;
    [EnumMemberAttribute]
public static DataSourceFormat sstream;
    [EnumMemberAttribute]
public static DataSourceFormat orc;
    [EnumMemberAttribute]
public static DataSourceFormat apacheavro;
    [EnumMemberAttribute]
public static DataSourceFormat w3clogfile;
}
public class Kusto.Data.Common.EndpointContext : object {
    [CompilerGeneratedAttribute]
private EndpointType <EndpointType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    public EndpointType EndpointType { get; }
    public string ResourceId { get; }
    public EndpointContext(EndpointType endpointType, string resourceId);
    [CompilerGeneratedAttribute]
public EndpointType get_EndpointType();
    [CompilerGeneratedAttribute]
public string get_ResourceId();
}
public enum Kusto.Data.Common.EndpointType : Enum {
    public int value__;
    public static EndpointType Kusto;
    public static EndpointType NonKusto;
}
[DataContractAttribute]
public enum Kusto.Data.Common.EntityType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static EntityType Unknown;
    [EnumMemberAttribute]
public static EntityType Cluster;
    [EnumMemberAttribute]
public static EntityType Database;
    [EnumMemberAttribute]
public static EntityType Table;
    [EnumMemberAttribute]
public static EntityType Column;
    [EnumMemberAttribute]
public static EntityType Function;
    [EnumMemberAttribute]
public static EntityType ExternalTable;
    [EnumMemberAttribute]
public static EntityType MaterializedView;
    [EnumMemberAttribute]
public static EntityType EntityGroup;
}
public static class Kusto.Data.Common.EntityValidator : object {
    public static int MaximumEntityNameLength;
    private static string c_allowedChars;
    private static string c_allowedCharsCondition;
    private static Regex s_validDatabaseNameRegex;
    private static Regex s_validAccountRegex;
    private static Regex s_validVirtualClusterRegex;
    private static Regex s_validKuiperVirtualClusterNameRegex;
    private static Regex s_validDataConnectionNameRegex;
    private static Regex s_validPrincipalAssignmentNameRegex;
    private static Regex s_validTableNameRegex;
    private static Regex s_validColumnNameRegex;
    private static Regex s_validLetNameRegex;
    private static HashSet`1<string> s_validLetNameInternal;
    private static Regex s_validProjectionNameRegex;
    private static Regex s_validDatabasePrettyNameRegex;
    private static Regex s_validFunctionNameRegex;
    private static Regex s_validateEntityGroupNameRegex;
    private static Regex s_validIngestionMappingNameRegex;
    private static Regex s_validWorkloadGroupName;
    private static Regex s_validManagedPrivateEndpointName;
    private static Regex s_validSandboxCustomImageName;
    private static Regex s_validPrivateEndpointConnectionProxyName;
    private static Regex s_forbiddenRegex;
    private static Regex s_forbiddenProjectionRegex;
    private static Regex s_numericProjectionRegex;
    private static CslType[] s_forbiddenDataTypes;
    private static EntityValidator();
    public static bool TryValidateTableName(string tableName, String& errorReason);
    public static void ValidateTableName(string tableName);
    public static bool TryValidateColumnName(string columnName, String& errorReason);
    public static void ValidateColumnName(string columnName);
    public static void ValidateColumnType(string columnName, CslType dataType);
    public static bool TryValidateColumnType(string columnName, CslType dataType);
    public static bool TryValidateDataConnectionName(string dataConnectionName, int dataConnectionNameLimit, String& errorReason);
    public static bool TryValidatePrincipalAssignmentName(string principalAssignmentName, String& errorReason);
    public static bool TryValidateAccountName(string accountName, String& errorReason);
    public static void ValidateAccountName(string accountName);
    public static bool TryValidateKuiperVirtualClusterName(string virtualClusterName, String& errorReason);
    public static void ValidateKuiperVirtualClusterName(string virtualClusterName);
    public static bool TryValidateVirtualClusterName(string virtualClusterName, String& errorReason);
    public static void ValidateVirtualClusterName(string virtualClusterName);
    public static bool TryValidateDatabaseName(string databaseName, String& errorReason);
    public static void ValidateDatabaseName(string databaseName);
    public static bool TryValidateDatabasePrettyName(string prettyName, String& errorReason);
    public static void ValidateDatabasePrettyName(string prettyName);
    public static bool TryValidateFunctionName(string functionName, String& errorReason);
    public static void ValidateFunctionName(string functionName);
    public static void ValidateEntityGroupName(string entityGroupName);
    public static bool TryValidateIngestionMappingName(string ingestionMappingName, String& errorReason);
    public static void ValidateIngestionMappingName(string ingestionMappingName);
    public static bool TryValidateWorkloadGroupName(string workloadGroupName, String& errorReason);
    public static bool TryValidatePrivateEndpointConnectionProxyName(string privateEndpointConnectionProxyName, String& errorReason);
    public static bool TryValidateManagedPrivateEndpointName(string managedPrivateEndpointName, String& errorReason);
    public static bool TryValidateSandboxCustomImageName(string sandboxCustomImageName, String& errorReason);
    public static bool TryValidateLetName(string letName, String& errorReason);
    public static void ValidateLetName(string letName);
    public static bool TryValidateProjectionName(string name, String& errorReason);
    public static void ValidateProjectionName(string name);
    public static bool TryValidateProjectionIsNotNumericLiteral(string name, String& errorReason);
    private static bool TryValidate(string entityKind, string propertyName, string entityName, Regex okRegex, Regex failRegex, String& errorReason, HashSet`1<string> additionalValidNames, int maximumEntityNameLength);
    private static bool Validate(string entityKind, string propertyName, string entityName, Regex okRegex, Regex failRegex, HashSet`1<string> additionalValidNames);
    private static bool TryValidate(string entityKind, string propertyName, string entityName, CslType dataType, String& errorReason);
    private static bool Validate(string entityKind, string propertyName, string entityName, CslType dataType);
}
public static class Kusto.Data.Common.ExtendedActivity : object {
    public static string DetermineClientRequestId(string clientRequestId, string prefix, bool createNewIfNone);
    public static string DetermineClientRequestId(ClientRequestProperties properties, string prefix, bool createNewIfNone);
}
[ExtensionAttribute]
public static class Kusto.Data.Common.ExtendedAdminCommandErrorCode : object {
    [ExtensionAttribute]
public static string FastToString(AdminCommandErrorCode that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(UInt32 value);
    [ExtensionAttribute]
public static bool FastHasFlag(AdminCommandErrorCode that, UInt32 flag);
    [ExtensionAttribute]
public static bool FastHasFlag(AdminCommandErrorCode that, AdminCommandErrorCode flag);
    public static AdminCommandErrorCode FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, AdminCommandErrorCode& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(AdminCommandErrorCode that);
    [ExtensionAttribute]
public static string FastGetDescription(AdminCommandErrorCode that);
}
[ExtensionAttribute]
public static class Kusto.Data.Common.ExtendedDatabaseShowFlavor : object {
    [ExtensionAttribute]
public static string FastToString(DatabaseShowFlavor that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(DatabaseShowFlavor that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(DatabaseShowFlavor that, DatabaseShowFlavor flag);
    public static DatabaseShowFlavor FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, DatabaseShowFlavor& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(DatabaseShowFlavor that);
    [ExtensionAttribute]
public static string FastGetDescription(DatabaseShowFlavor that);
}
[ExtensionAttribute]
public static class Kusto.Data.Common.ExtendedDataConnectionError : object {
    [ExtensionAttribute]
public static string FastToString(DataConnectionError that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(DataConnectionError that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(DataConnectionError that, DataConnectionError flag);
    public static DataConnectionError FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, DataConnectionError& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(DataConnectionError that);
    [ExtensionAttribute]
public static string FastGetDescription(DataConnectionError that);
}
[ExtensionAttribute]
public static class Kusto.Data.Common.ExtendedDataRecoverability : object {
    [ExtensionAttribute]
public static string FastToString(DataRecoverability that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(DataRecoverability that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(DataRecoverability that, DataRecoverability flag);
    public static DataRecoverability FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, DataRecoverability& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(DataRecoverability that);
    [ExtensionAttribute]
public static string FastGetDescription(DataRecoverability that);
}
[ExtensionAttribute]
public static class Kusto.Data.Common.ExtendedDataSourceCompressionType : object {
    [ExtensionAttribute]
public static string FastToString(DataSourceCompressionType that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(DataSourceCompressionType that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(DataSourceCompressionType that, DataSourceCompressionType flag);
    public static DataSourceCompressionType FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, DataSourceCompressionType& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(DataSourceCompressionType that);
    [ExtensionAttribute]
public static string FastGetDescription(DataSourceCompressionType that);
}
[ExtensionAttribute]
public static class Kusto.Data.Common.ExtendedDataSourceFormat : object {
    [ExtensionAttribute]
public static string FastToString(DataSourceFormat that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(DataSourceFormat that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(DataSourceFormat that, DataSourceFormat flag);
    public static DataSourceFormat FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, DataSourceFormat& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(DataSourceFormat that);
    [ExtensionAttribute]
public static string FastGetDescription(DataSourceFormat that);
    [ExtensionAttribute]
public static bool IsJsonFormat(DataSourceFormat that);
    [ExtensionAttribute]
public static bool IsBinaryFormat(DataSourceFormat that);
}
[ExtensionAttribute]
public static class Kusto.Data.Common.ExtendedEntityType : object {
    public static EntityType Parse(string entityTypeName);
    [ExtensionAttribute]
public static string FastToString(EntityType that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(EntityType that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(EntityType that, EntityType flag);
    public static EntityType FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, EntityType& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(EntityType that);
    [ExtensionAttribute]
public static string FastGetDescription(EntityType that);
}
[ExtensionAttribute]
public static class Kusto.Data.Common.ExtendedExtentsMergeLookbackPeriodKind : object {
    [ExtensionAttribute]
public static string FastToString(ExtentsMergeLookbackPeriodKind that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(ExtentsMergeLookbackPeriodKind that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(ExtentsMergeLookbackPeriodKind that, ExtentsMergeLookbackPeriodKind flag);
    public static ExtentsMergeLookbackPeriodKind FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, ExtentsMergeLookbackPeriodKind& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(ExtentsMergeLookbackPeriodKind that);
    [ExtensionAttribute]
public static string FastGetDescription(ExtentsMergeLookbackPeriodKind that);
}
[ExtensionAttribute]
public static class Kusto.Data.Common.ExtendedIngestionErrorCategory : object {
    [ExtensionAttribute]
public static string FastToString(IngestionErrorCategory that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(IngestionErrorCategory that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(IngestionErrorCategory that, IngestionErrorCategory flag);
    public static IngestionErrorCategory FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, IngestionErrorCategory& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(IngestionErrorCategory that);
    [ExtensionAttribute]
public static string FastGetDescription(IngestionErrorCategory that);
}
[ExtensionAttribute]
public static class Kusto.Data.Common.ExtendedIngestionErrorCode : object {
    private static HashSet`1<IngestionErrorCode> s_permanentCodes;
    private static HashSet`1<IngestionErrorCode> s_transientCodes;
    private static HashSet`1<IngestionErrorCode> s_updatePolicyOriginated;
    private static Dictionary`2<IngestionErrorCode, IngestionErrorCategory> s_errorsToCategoriesDictionary;
    public static string MultipleSourcesString;
    public static int NumOfExamplesForMultipleSourcesFailure;
    private static ExtendedIngestionErrorCode();
    public static bool FromHresult(UInt32 hr, IngestionErrorCode& ret);
    [ExtensionAttribute]
public static bool IsPermanent(IngestionErrorCode ingestionErrorCode);
    [ExtensionAttribute]
public static bool IsUpdatePolicyOriginated(IngestionErrorCode ingestionErrorCode);
    [ExtensionAttribute]
public static IngestionErrorCategory ToCategory(IngestionErrorCode ingestionErrorCode);
    public static bool VerifyAllErrorCodesHaveCategory(String& error);
    public static bool VerifyAllErrorCodesHavePermanentOrTransientDefinition(String& error);
    [ExtensionAttribute]
public static string FastToString(IngestionErrorCode that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(UInt32 value);
    [ExtensionAttribute]
public static bool FastHasFlag(IngestionErrorCode that, UInt32 flag);
    [ExtensionAttribute]
public static bool FastHasFlag(IngestionErrorCode that, IngestionErrorCode flag);
    public static IngestionErrorCode FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, IngestionErrorCode& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(IngestionErrorCode that);
    [ExtensionAttribute]
public static string FastGetDescription(IngestionErrorCode that);
}
[ExtensionAttribute]
public static class Kusto.Data.Common.ExtendedStorageEngineKind : object {
    [ExtensionAttribute]
public static string FastToString(StorageEngineKind that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(StorageEngineKind that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(StorageEngineKind that, StorageEngineKind flag);
    public static StorageEngineKind FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, StorageEngineKind& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(StorageEngineKind that);
    [ExtensionAttribute]
public static string FastGetDescription(StorageEngineKind that);
}
[ExtensionAttribute]
public static class Kusto.Data.Common.ExtendedTransformationMethod : object {
    [ExtensionAttribute]
public static string FastToString(TransformationMethod that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(TransformationMethod that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(TransformationMethod that, TransformationMethod flag);
    public static TransformationMethod FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, TransformationMethod& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(TransformationMethod that);
    [ExtensionAttribute]
public static string FastGetDescription(TransformationMethod that);
}
public enum Kusto.Data.Common.ExtentConversionOption : Enum {
    public int value__;
    public static ExtentConversionOption Default;
    public static ExtentConversionOption V2;
    public static ExtentConversionOption V3;
}
public enum Kusto.Data.Common.ExtentsMergeLookbackPeriodKind : Enum {
    public int value__;
    public static ExtentsMergeLookbackPeriodKind Default;
    public static ExtentsMergeLookbackPeriodKind HotCache;
    public static ExtentsMergeLookbackPeriodKind All;
    public static ExtentsMergeLookbackPeriodKind Custom;
}
[DataContractAttribute]
public class Kusto.Data.Common.FunctionParameterSchema : ColumnSchema {
    [DataMemberAttribute]
public IEnumerable`1<ColumnSchema> Columns;
    private FunctionParameterSchema(string name, string type, string cslType, string cslDefaultValue);
    private FunctionParameterSchema(string name, IEnumerable`1<ColumnSchema> attributes);
    public static FunctionParameterSchema FromScalar(string name, string type, string cslType, string cslDefaultValue);
    public static FunctionParameterSchema FromTabular(string name, IEnumerable`1<ColumnSchema> attributes);
    public virtual object Clone();
    public string AsCslString();
    public bool IsTabular();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
[DataContractAttribute]
public class Kusto.Data.Common.FunctionSchema : object {
    [DataMemberAttribute]
public string Name;
    [DataMemberAttribute]
public List`1<FunctionParameterSchema> InputParameters;
    [DataMemberAttribute]
public string Body;
    [DataMemberAttribute]
public string Folder;
    [DataMemberAttribute]
public string DocString;
    [DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public FunctionKind Kind;
    [DataMemberAttribute]
public IEnumerable`1<ColumnSchema> OutputColumns;
    public string NormalizedName { get; }
    public FunctionSchema(string name, List`1<FunctionParameterSchema> parameters, string body, string folder, string docString, FunctionKind kind, IEnumerable`1<ColumnSchema> outputColumns);
    public string get_NormalizedName();
    public string ToJsonString(bool indented, bool shouldObfuscateBody);
    public static FunctionSchema FromJsonString(string jsonString);
    public static string FormatParametersAsCslString(IEnumerable`1<FunctionParameterSchema> parameters);
    public sealed virtual object Clone();
    public string ToCallingName(string paramValues);
    public string ToLetStatement();
    public string ToSchemaString();
    public string ToCslString(bool skipValidation);
    public string GetInputParametersAsCslString();
    private void Validate();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
public interface Kusto.Data.Common.ICslAdminMultiProvider {
    public abstract virtual IDataReader ExecuteControlCommand(string hostAddress, string databaseName, string command, string addr, ClientRequestProperties properties);
    public abstract virtual Task`1<IDataReader> ExecuteControlCommandAsync(string hostAddress, string databaseName, string command, string addr, ClientRequestProperties properties);
}
public interface Kusto.Data.Common.ICslAdminProvider {
    public string DefaultDatabaseName { get; public set; }
    public abstract virtual IDataReader ExecuteControlCommand(string databaseName, string command, ClientRequestProperties properties);
    public abstract virtual Task`1<IDataReader> ExecuteControlCommandAsync(string databaseName, string command, ClientRequestProperties properties);
    public abstract virtual IDataReader ExecuteControlCommand(string command, ClientRequestProperties properties);
    public abstract virtual string get_DefaultDatabaseName();
    public abstract virtual void set_DefaultDatabaseName(string value);
}
public interface Kusto.Data.Common.ICslQueryKustoDataStreamMultiProvider {
    public abstract virtual Stream ExecuteQueryAsKustoDataStream(string hostAddress, string databaseName, string query, ClientRequestProperties properties);
    public abstract virtual Task`1<Stream> ExecuteQueryAsKustoDataStreamAsync(string hostAddress, string databaseName, string query, ClientRequestProperties properties);
}
public interface Kusto.Data.Common.ICslQueryMultiProvider {
    public abstract virtual IDataReader ExecuteQuery(string hostAddress, string databaseName, string query, ClientRequestProperties properties);
    public abstract virtual Task`1<IDataReader> ExecuteQueryAsync(string hostAddress, string databaseName, string query, ClientRequestProperties properties);
    public abstract virtual Task`1<ProgressiveDataSet> ExecuteQueryAsProgressiveDataSetAsync(string hostAddress, string databaseName, string query, ClientRequestProperties properties);
}
public interface Kusto.Data.Common.ICslQueryProvider {
    public string DefaultDatabaseName { get; public set; }
    public abstract virtual IDataReader ExecuteQuery(string databaseName, string query, ClientRequestProperties properties);
    public abstract virtual Task`1<IDataReader> ExecuteQueryAsync(string databaseName, string query, ClientRequestProperties properties, CancellationToken cancellationToken);
    public abstract virtual Task`1<ProgressiveDataSet> ExecuteQueryV2Async(string databaseName, string query, ClientRequestProperties properties, CancellationToken cancellationToken);
    public abstract virtual string get_DefaultDatabaseName();
    public abstract virtual void set_DefaultDatabaseName(string value);
    public abstract virtual IDataReader ExecuteQuery(string query, ClientRequestProperties properties);
    public abstract virtual IDataReader ExecuteQuery(string query);
}
public interface Kusto.Data.Common.IKustoStatelessClient {
    public abstract virtual Task`1<IDataReader> ExecuteQueryAsync(string hostAddress, string databaseName, string query, ClientRequestProperties properties, CancellationToken cancellationToken);
    public abstract virtual Task`1<ProgressiveDataSet> ExecuteQueryV2Async(string hostAddress, string databaseName, string query, ClientRequestProperties properties, CancellationToken cancellationToken);
    public abstract virtual Task`1<IDataReader> ExecuteControlCommandAsync(string hostAddress, string databaseName, string command, ClientRequestProperties properties, CancellationToken cancellationToken);
    public abstract virtual Task`1<KustoProtocolResponse> ExecuteRequestAsync(string hostAddress, string databaseName, string queryOrCommand, ClientRequestProperties properties, string restApiPrefix, CancellationToken cancellationToken);
}
public class Kusto.Data.Common.Impl.ClientRequestProperties_ClientControl : object {
    [DebuggerDisplayAttribute("Controls how Kusto.Data!Kusto.Data.Net.Client.RestClient2 dumps the HTTP request/response streams. ['console', 'console.headers', console.immediate', 'console.json', 'default', 'file=...', 'none', or 'trace'][Internal]")]
public static string OptionClientDumpHttpRequestResponse;
    public static string OptionClientDumpHttpRequestResponse_Console;
    public static string OptionClientDumpHttpRequestResponse_ConsoleHeaders;
    public static string OptionClientDumpHttpRequestResponse_ConsoleImmediate;
    public static string OptionClientDumpHttpRequestResponse_ConsoleJson;
    public static string OptionClientDumpHttpRequestResponse_Default;
    public static string OptionClientDumpHttpRequestResponse_File;
    public static string OptionClientDumpHttpRequestResponse_None;
    public static string OptionClientDumpHttpRequestResponse_Trace;
    [DebuggerDisplayAttribute("Controls how Kusto.Data!Kusto.Data.Net.Client.RestClient2 dumps the HTTP authorization information. ['none'/'console'][Internal]")]
public static string OptionClientDumpHttpAuthorization;
    [DebuggerDisplayAttribute("If set, disables the client's default sending of the activity context to the service. [Boolean][Internal]")]
public static string OptionClientSuppressSendingActivityContext;
    [DebuggerDisplayAttribute("If set, sends a nicer-looking JSON body with HTTP requests. [Boolean][Internal]")]
public static string OptionClientHttpRequestWithCleanJson;
    [DebuggerDisplayAttribute("If set, parses the HTTP responses using a streaming parser (regardless of the KustoConnectionStringBuilder. [Boolean][Internal]")]
public static string OptionClientHttpResponseStreamingParser;
    [DebuggerDisplayAttribute("If set, the client aborts the request during the result streaming phase. [Boolean][Internal]")]
public static string OptionClientAbortDuringResultStreaming;
    [DebuggerDisplayAttribute("If set and positive, indicates the maximum number of HTTP redirects that the client will process. [Long]")]
public static string OptionClientMaxRedirectCount;
    [DebuggerDisplayAttribute("If set, the results reader will tolerate tables whose row width varies across rows. [Boolean]")]
public static string OptionClientResultsReaderAllowVaryingRowWidths;
}
public class Kusto.Data.Common.Impl.ClientRequestProperties_Debugging : object {
    [DebuggerDisplayAttribute("Requests that trace verbosity will be increased for this request. [String][Internal]")]
public static string OptionRequestSupport;
    [DebuggerDisplayAttribute("Enables the generation of a performance trace. [Boolean][Internal]")]
public static string OptionPerfTrace;
    [DebuggerDisplayAttribute("Suppresses query execution once the query plan is ready. [Boolean][Internal]")]
public static string OptionNoExecute;
    [DebuggerDisplayAttribute("Enables detailed tracing of shard query. [Boolean][Internal]")]
public static string OptionShardTrace;
    [DebuggerDisplayAttribute("If specified, sets the timeout when waiting for a virtual cluster to start. [TimeSpan][Internal]")]
public static string OptionVirtualClusterStartupTimeout;
    [DebuggerDisplayAttribute("Sets the threshold size (In bytes) for a file part that is required by the Compound optimization for Parquet and SStream formats. [Long][Internal]")]
public static string CompoundOptimizationPartSizeThresholdForParquetAndSStream;
    [DebuggerDisplayAttribute("Sets the maximum row count for each fragment of the primary table in table fragmentation mode. [Int][Internal]")]
public static string OptionV2FragmentTablesRowCount;
    public static int DefaultV2FragmentTablesRowCount;
    [DebuggerDisplayAttribute("Force a Parquet external_table/externaldata query to run in EngineV3 (true) or EngineV2 (false). [Boolean][Internal]")]
public static string QueryParquetInShardEngine;
    [DebuggerDisplayAttribute("Make extensions which were supposed to run in V2 run in V3 by having V3 pull the source from V2. [Bool][Internal]")]
public static string RunStandAloneExtensionInShardEngine;
}
public class Kusto.Data.Common.Impl.ClientRequestProperties_FaultInjection : object {
    [DebuggerDisplayAttribute("The amount of CPU time to burn in the query planning phase, in msec. Requires debug build or FF 'EnableQueryPlanBurnCPU'. [Long][Internal]")]
public static string OptionDebugQueryPlanBurnCpuMsec;
    [DebuggerDisplayAttribute("If set, query execution in the engine will delay until the expiry time. [Boolean][Internal]")]
public static string OptionDebugQueryExecutionEnableExpiry;
    [DebuggerDisplayAttribute("If set, the timeout to use in http_request/http_request_post when waiting for a response, in msec. [Long][Internal]")]
public static string OptionDebugQueryHttpRequestPluginTimeoutMsec;
    [DebuggerDisplayAttribute("If true, forces requests to fail on rate-throttling. [Boolean][Internal]")]
public static string OptionDebugRequestFailThrottling;
    [DebuggerDisplayAttribute("If true, uses ErrorDataReader where supported. [Boolean][Internal]")]
public static string OptionDebugUseErrorDataReader;
    [DebuggerDisplayAttribute("If true, query execution in the engine will fail due to a simulated OOM. [Boolean][Internal]")]
public static string OptionDebugQueryExecutionEnableOom;
    [DebuggerDisplayAttribute("The amount of total CPU seconds to report when finalizing request execution. [Double][Internal]")]
public static string OptionDebugRequestReportTotalCpuSeconds;
    [DebuggerDisplayAttribute("If not null or empty, query execution will fail with the provided error reason. [String][Internal]")]
public static string OptionDebugRequestFailSubquery;
    [DebuggerDisplayAttribute("If >=0, the number of bytes that the client sends to the service in the HTTP body every second. [Double][Internal]")]
public static string OptionDebugClientRequestSendBytesPerSecond;
    [DebuggerDisplayAttribute("Similar to servertimeout, only affects the client-side timeout. [TimeSpan][Internal]")]
public static string OptionDebugClientTimeout;
}
public class Kusto.Data.Common.Impl.ClientRequestProperties_Ingestion : object {
    [DebuggerDisplayAttribute("Indicates that the data is coming from ingestion data connection source. [Boolean][Internal]")]
public static string OptionIngestionDataConnectionSource;
}
public class Kusto.Data.Common.Impl.ClientRequestProperties_Kuiper : object {
    [DebuggerDisplayAttribute("Specifies the ID of the Kuiper job associated with the request. [String][Internal]")]
public static string OptionKuiperJobId;
    [DebuggerDisplayAttribute("Specifies the path of the workload group the request was classified to. [String][Internal]")]
public static string OptionKuiperWorkloadPath;
    [DebuggerDisplayAttribute("Specifies the origin of the value of KuiperJobId. [String][Internal]")]
public static string OptionKuiperJob_Origin;
    public static string OptionKuiperJob_OriginInGateway;
    [DebuggerDisplayAttribute("Specifies whether or not a request was routed from the gateway directly to a Kuiper worker. [Boolean][Internal]")]
public static string OptionExecuteRequestOnKuiperWorker;
}
public class Kusto.Data.Common.Impl.ClientRequestProperties_QueryHints : object {
    [DebuggerDisplayAttribute("If set, forces the admin to forgo being the query's head node. [Boolean][Internal]")]
public static string OptionAdminSuperSlackerModeEnabled;
    [DebuggerDisplayAttribute("A hint to use broadcast strategy for materialized views that are referenced in the query.
The property is an array of materialized views names.
examples: 'dynamic([ { "Name": "V1" } ])'. [dynamic][Internal]")]
public static string OptionMaterializedViewBroadcastQuery;
    [DebuggerDisplayAttribute("If set, add in AggregateNormalizer projections for aggregations that appear more than once and are eliminated from aggregate expressions. [Boolean][Internal]")]
public static string OptionProjectDuplicateAggregationsInNormalization;
    [DebuggerDisplayAttribute("If set, forces a specific NodeId to be the query's head node. [String][Internal]")]
public static string OptionRemoteQueryToNode;
    [DebuggerDisplayAttribute("Initial settings aggregation level (e.g: in a regular 3 level hierarcy, 0 - top level, 1 - node level, 2 - extent level). [Dictionary{int,long}][Internal]")]
public static string OptionAggregationSeedsByLevel;
    public static string OptionDebugShardQueryMultiplyShards;
    public static string DebugShardQueryMinFrameSize;
    public static string DebugShardQueryDisableRelop;
    public static string PushExperimentalOperatorsToShardEngine;
    public static string PushConstantDataTableToShardEngine;
    public static string PushRangeOperatorToShardEngine;
    public static string OptionInjectSelectionBeforeExtensionOptimizer;
    public static string OptionEncodeDynamicValuesAsShardEngineCompatible;
    public static string OptionEnableMaterializeCacheIdsAllocationOpt;
    public static string OptionEnableMaterializeCentralizedDistribution;
    public static string OptionEnablePushProjectionThroughMaterialize;
    public static string OptionQueryResultsCacheOriginRequestId;
    public static string OptionQueryResultsCacheOriginStartedOn;
    [DebuggerDisplayAttribute("When set to 'true', Enables an experimental optimization for queries that perform costly free-text search operations (`| where * has "pattern"`). [Boolean]")]
public static string OptionEnableRewriteFtsAsFunctionAtRelop;
    public static string OptionEnableRewriteAdjacentOrAndAsMultiFieldFunctions;
    public static string PushParseOperatorToShardEngine;
    public static string PushMvApplyOperatorToShardEngine;
    public static string OptionMaterializedViewSplitDeltaOptimization;
    public static string OptionMaterializedViewLowIntersectionOptimization;
    [DebuggerDisplayAttribute("When set to 'true', parallel sub-query operator is pushed down to V3 engine. [Boolean][Internal]")]
public static string EnableParallelSubqueryInShardEngine;
    [DebuggerDisplayAttribute("When set to 'true', distributed plugins are executed out-of-proc on same node ([Boolean][Internal]")]
public static string EnablePluginHostProcess;
    [DebuggerDisplayAttribute("When true enables join optimizer (swaps left and right if right apears to be smaller). [Boolean][Internal]")]
public static string EnableJoinOptimizer;
    public static string DataMovementRestrictionLabel;
    [DebuggerDisplayAttribute("If set to true, plugin query execution will fail. [Boolean][Internal]")]
public static string FailOnPluginQueryEvaluation;
    [DebuggerDisplayAttribute("When set to 'true', enables the shard engine implementation of the join operator. [Boolean][Internal]")]
public static string EnableJoinInRelopEngine;
    [DebuggerDisplayAttribute("When set to 'true', clears option OptionAdminSuperSlackerMode during partial query evaluation. [Boolean][Internal]")]
public static string OptionClearAdminSuperSlackerDuringPartialQueries;
    [DebuggerDisplayAttribute("When set to 'true', enables Rust's implementation of regex in V3. [Boolean][Internal]")]
public static string OptionEnableRustRegexInShardEngine;
    [DebuggerDisplayAttribute("When set to true, enables externaldata() implementation in V3. [Boolean][Internal]")]
public static string OptionEnableExternalDataInShardEngine;
    [DebuggerDisplayAttribute("When set to 'true', fail on query-execution (e.g. plugins) in analyze phase. [Boolean][Internal]")]
public static string DisableQueryExecutionInAnalyzePhase;
    [DebuggerDisplayAttribute("When set to 'true', allows shuffle query over broadcast join. [Boolean][Internal]")]
public static string OptionEnableShuffleOverBroadcastJoin;
    [DebuggerDisplayAttribute("When set to 'true', graph operators will run in the V3 engine. [Boolean][Internal]")]
public static string OptionEnableGraphOperatorsInV3;
    [DebuggerDisplayAttribute("When set to 'true', uses native AVRO reader for queries in V3. [Boolean][Internal]")]
public static string OptionEnableNativeAvroReader;
}
public class Kusto.Data.Common.Impl.ClientRequestProperties_ServerRouting : object {
    public static string OptionForwardToVirtualCluster;
    [DebuggerDisplayAttribute("If specified, indicates that execution should not occur if service is not running. [Boolean][Internal]")]
public static string OptionRequestExecuteOnlyIfRunning;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DebuggerDisplayAttribute("If specified, indicates the target virtual cluster dns name. Used when a command is sent to the host cluster's DNS name but is intended to be redirected to the hosted VC's DNS name. [String][Internal]")]
public static string OptionTargetVirtualClusterDnsName;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DebuggerDisplayAttribute("If specified, indicates the target virtual cluster name. Used internally by the 'hoster' to route the request to the selected virtual cluster. [String][Internal]")]
public static string OptionInternalVirtualClusterName;
    [DebuggerDisplayAttribute("Original client address as client address is lost when hoster forwards requests to KVCs. [String][Internal]")]
public static string OptionOriginalClientIpAddress;
    [DebuggerDisplayAttribute("Original kusto client version for usage tracing as it is lost when hoster forwards requests to KVCs. [String][Internal]")]
public static string OptionOriginalKustoClientForUsageTracing;
}
public class Kusto.Data.Common.Impl.ClientRequestProperties_ServerTimeout : object {
    [DebuggerDisplayAttribute("Specifies the origin of OptionServerTimeout value. If not set - assume client request. [String][Internal]")]
public static string OptionServerTimeoutOrigin;
    public static string OptionServerTimeoutOriginInGateway;
    public static string OptionServerTimeoutOriginInternal;
    public static string OptionServerTimeoutOriginRequestLimitsPolicy;
}
public class Kusto.Data.Common.Impl.ClientRequestProperties_SignedQuery : object {
    [DebuggerDisplayAttribute("An encoded impersonation manifest describing the permission. [String][Internal]")]
public static string OptionSignedQueryImpersonationManifest;
    [DebuggerDisplayAttribute("A json encoded ClientRequestProperties object to use in the query. [String][Internal]")]
public static string OptionSignedQueryProperties;
    [DebuggerDisplayAttribute("A signature of the query. [String][Internal]")]
public static string OptionSignedQuerySignature;
}
public class Kusto.Data.Common.Impl.ClientRequestProperties_TypesConversions : object {
    [DebuggerDisplayAttribute("Enables conversion of decimal values to strings in the early stage of result stream writing. [Boolean][Internal]")]
public static string OptionPreliminaryDecimalToStringConversionEnabled;
}
public class Kusto.Data.Common.Impl.WellKnownKustoEndpointsData : object {
    [CompilerGeneratedAttribute]
private static WellKnownKustoEndpointsData <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, AllowedEndpoints> <AllowedEndpointsByCloud>k__BackingField;
    [JsonIgnoreAttribute]
public static WellKnownKustoEndpointsData Instance { get; private set; }
    public IReadOnlyDictionary`2<string, AllowedEndpoints> AllowedEndpointsByCloud { get; public set; }
    private static WellKnownKustoEndpointsData();
    [CompilerGeneratedAttribute]
public static WellKnownKustoEndpointsData get_Instance();
    [CompilerGeneratedAttribute]
private static void set_Instance(WellKnownKustoEndpointsData value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, AllowedEndpoints> get_AllowedEndpointsByCloud();
    [CompilerGeneratedAttribute]
public void set_AllowedEndpointsByCloud(IReadOnlyDictionary`2<string, AllowedEndpoints> value);
}
public enum Kusto.Data.Common.IngestionErrorCategory : Enum {
    public int value__;
    public static IngestionErrorCategory Unknown;
    public static IngestionErrorCategory InternalServiceError;
    public static IngestionErrorCategory BadFormat;
    public static IngestionErrorCategory BadRequest;
    public static IngestionErrorCategory UpdatePolicyFailure;
    public static IngestionErrorCategory EntityNotFound;
    public static IngestionErrorCategory UserAccessNotAuthorized;
    public static IngestionErrorCategory DataAccessNotAuthorized;
    public static IngestionErrorCategory FileTooLarge;
    public static IngestionErrorCategory ThrottledOnEngine;
    public static IngestionErrorCategory DownloadFailed;
    public static IngestionErrorCategory RetryAttemptsExceeded;
    public static IngestionErrorCategory BlobAlreadyReceived;
    public static IngestionErrorCategory Cancelled;
    public static IngestionErrorCategory Configuration;
    public static IngestionErrorCategory MetadataAccessNotAuthorized;
    public static IngestionErrorCategory Skippable;
}
public enum Kusto.Data.Common.IngestionErrorCode : Enum {
    public UInt32 value__;
    public static IngestionErrorCode Unknown;
    public static IngestionErrorCode OutOfMemory;
    public static IngestionErrorCode Stream_WrongNumberOfFields;
    public static IngestionErrorCode Stream_InputStreamTooLarge;
    public static IngestionErrorCode Stream_NoDataToIngest;
    public static IngestionErrorCode Stream_ClosingQuoteMissing;
    public static IngestionErrorCode Stream_DynamicPropertyBagTooLarge;
    public static IngestionErrorCode Download_SourceNotFound;
    public static IngestionErrorCode Download_AccessConditionNotSatisfied;
    public static IngestionErrorCode Download_Forbidden;
    public static IngestionErrorCode Download_AccountNotFound;
    public static IngestionErrorCode Download_TransientNameResolutionFailure;
    public static IngestionErrorCode Download_BadRequest;
    public static IngestionErrorCode Download_NotTransient;
    public static IngestionErrorCode Download_UnknownError;
    public static IngestionErrorCode UpdatePolicy_QuerySchemaDoesNotMatchTableSchema;
    public static IngestionErrorCode UpdatePolicy_FailedDescendantTransaction;
    public static IngestionErrorCode UpdatePolicy_ManagedIdentityError;
    public static IngestionErrorCode UpdatePolicy_IngestionError;
    public static IngestionErrorCode UpdatePolicy_UnknownError;
    public static IngestionErrorCode BadRequest_MissingMappingFailure;
    public static IngestionErrorCode BadRequest_InvalidBlob;
    public static IngestionErrorCode BadRequest_EmptyBlob;
    public static IngestionErrorCode BadRequest_NoRecordsOrWrongFormat;
    public static IngestionErrorCode BadRequest_EmptyArchive;
    public static IngestionErrorCode BadRequest_InvalidArchive;
    public static IngestionErrorCode BadRequest_InvalidBlobUri;
    public static IngestionErrorCode BadRequest_EmptyBlobUri;
    public static IngestionErrorCode BadRequest_DatabaseNotExist;
    public static IngestionErrorCode BadRequest_TableNotExist;
    public static IngestionErrorCode BadRequest_InvalidKustoIdentityToken;
    public static IngestionErrorCode BadRequest_FileTooLarge;
    public static IngestionErrorCode Reserved_1;
    public static IngestionErrorCode General_RetryAttemptsExceeded;
    public static IngestionErrorCode General_BadRequest;
    public static IngestionErrorCode General_InternalServerError;
    public static IngestionErrorCode UpdatePolicy_Cyclic_Update_Not_Allowed;
    public static IngestionErrorCode BadRequest_InvalidMapping;
    public static IngestionErrorCode BadRequest_InvalidMappingReference;
    public static IngestionErrorCode BadRequest_MappingReferenceWasNotFound;
    public static IngestionErrorCode BadRequest_FormatNotSupported;
    public static IngestionErrorCode BadRequest_DuplicateMapping;
    public static IngestionErrorCode BadRequest_CorruptedMessage;
    public static IngestionErrorCode BadRequest_InconsistentMapping;
    public static IngestionErrorCode BadRequest_SyntaxError;
    public static IngestionErrorCode BadRequest_InvalidOrEmptyTableName;
    public static IngestionErrorCode BadRequest_EmptyDatabaseName;
    public static IngestionErrorCode BadRequest_EmptyTenantIdentifier;
    public static IngestionErrorCode BadRequest_EmptyMappingReference;
    public static IngestionErrorCode BadRequest_EntityNotFound;
    public static IngestionErrorCode BadRequest_EntityNameIsNotValid;
    public static IngestionErrorCode General_AbandonedIngestion;
    public static IngestionErrorCode General_ThrottledIngestion;
    public static IngestionErrorCode General_TransientSchemaMismatch;
    public static IngestionErrorCode BadRequest_DatabaseAccessDenied;
    public static IngestionErrorCode BadRequest_UnexpectedCharacterInInputStream;
    public static IngestionErrorCode Forbidden;
    public static IngestionErrorCode BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy;
    public static IngestionErrorCode BadRequest_CreationTimeEarlierThanSoftDeletePeriod;
    public static IngestionErrorCode BadRequest_NotSupported;
    public static IngestionErrorCode Skipped_IngestByTagAlreadyExists;
    public static IngestionErrorCode Timeout;
    public static IngestionErrorCode BadRequest_MalformedIngestionProperty;
    public static IngestionErrorCode BadRequest_IngestionPropertyNotSupportedInThisContext;
    public static IngestionErrorCode BadRequest_InvalidAuthentication;
    public static IngestionErrorCode BlobAlreadyReceived_BlobAlreadyFoundInBatch;
    public static IngestionErrorCode BadRequest_InvalidManagedIdentity;
    public static IngestionErrorCode BadRequest_DataCapacityLimitReached;
    public static IngestionErrorCode UpdatePolicy_BadRequest;
    public static IngestionErrorCode BadRequest_NonMultiDatabaseDataConnection;
    public static IngestionErrorCode Cancelled;
    public static IngestionErrorCode AbandonedByConfiguration_StorageAccount;
    public static IngestionErrorCode AbandonedByConfiguration_DatabaseAndTable;
    public static IngestionErrorCode BadRequest_TableSchemaModificationUnauthorized;
    public static IngestionErrorCode BadRequest_DatabaseSchemaModificationUnauthorized;
    public static IngestionErrorCode BadRequest_StreamingIngestionPolicyNotEnabled;
    public static IngestionErrorCode BadRequest_StreamingIngestionUpdatePolicyIncompatible;
    public static IngestionErrorCode NotFound_StreamingIngestionDisabledForCluster;
    public static IngestionErrorCode Storage_Throttled;
    public static IngestionErrorCode UpdatePolicy_CalloutProhibited;
    public static IngestionErrorCode BadRequest_InvalidIngestionDataConnectionSource;
    public static IngestionErrorCode BadRequest_MaximumNumberOfTablesExceeded;
}
public interface Kusto.Data.Common.IRedirectProvider {
    public abstract virtual HttpResponseMessage ExecuteRedirectCommand(ClientRequestProperties properties);
    public abstract virtual Task`1<HttpResponseMessage> ExecuteRedirectCommandAsync(ClientRequestProperties properties);
}
public interface Kusto.Data.Common.IStreamingIngestMultiProvider {
    public abstract virtual Task`1<IDataReader> ExecuteStreamIngestAsync(string hostHeaderOverride, string address, string databaseName, string tableName, Stream stream, ClientRequestProperties properties, StreamProperties streamProperties, CancellationToken cancellationToken, DataSourceFormat streamFormat, string mappingName);
    public abstract virtual Task`1<IDataReader> ExecuteIngestFromStorageAsync(string hostHeaderOverride, string address, string databaseName, string tableName, string uri, ClientRequestProperties properties, CancellationToken cancellationToken, DataSourceFormat streamFormat, string mappingName);
}
public interface Kusto.Data.Common.IStreamingIngestProvider {
    [ObsoleteAttribute("This method has been deprecated, and will be removed in upcoming versions. Please use `IStreamingIngestProvider.ExecuteStreamIngestAsync` instead.")]
public abstract virtual IDataReader ExecuteStreamIngest(string databaseName, string tableName, Stream stream, ClientRequestProperties properties, DataSourceFormat streamFormat, bool compressStream, string mappingName);
    public abstract virtual Task`1<IDataReader> ExecuteStreamIngestAsync(string databaseName, string tableName, Stream stream, ClientRequestProperties properties, DataSourceFormat streamFormat, bool compressStream, string mappingName, bool leaveRequestStreamOpen);
    public abstract virtual Task`1<IDataReader> ExecuteStreamIngestAsync(string databaseName, string tableName, Stream stream, StreamProperties streamProperties, ClientRequestProperties properties, DataSourceFormat streamFormat, string mappingName);
    public abstract virtual Task`1<IDataReader> ExecuteIngestFromStorageAsync(string databaseName, string tableName, string uri, ClientRequestProperties properties, DataSourceFormat streamFormat, string mappingName);
    [ObsoleteAttribute("This method has been deprecated, and will be removed in upcoming versions. Please use `IStreamingIngestProvider.ExecuteStreamIngestAsync` instead.")]
public abstract virtual IDataReader ExecuteStreamIngest(string databaseName, string tableName, string data, ClientRequestProperties properties, DataSourceFormat streamFormat, bool compressStream, string mappingName);
    [ObsoleteAttribute("This method has been deprecated, and will be removed in upcoming versions. Please use `IStreamingIngestProvider.ExecuteStreamIngestAsync` instead.")]
public abstract virtual Task`1<IDataReader> ExecuteStreamIngestAsync(string databaseName, string tableName, string data, ClientRequestProperties properties, DataSourceFormat streamFormat, bool compressStream, string mappingName);
}
[ObsoleteAttribute("This class is obsolete. Please use Kusto.Data.Common.ColumnMapping instead")]
public class Kusto.Data.Common.JsonColumnMapping : object {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnType>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformationMethod <TransformationMethod>k__BackingField;
    [JsonPropertyAttribute("column")]
public string ColumnName { get; public set; }
    [JsonPropertyAttribute("path")]
public string JsonPath { get; public set; }
    [JsonPropertyAttribute("datatype")]
public string ColumnType { get; public set; }
    [JsonPropertyAttribute("transform")]
public TransformationMethod TransformationMethod { get; public set; }
    [JsonIgnoreAttribute]
public bool IsValid { get; }
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_JsonPath();
    [CompilerGeneratedAttribute]
public void set_JsonPath(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnType();
    [CompilerGeneratedAttribute]
public void set_ColumnType(string value);
    [CompilerGeneratedAttribute]
public TransformationMethod get_TransformationMethod();
    [CompilerGeneratedAttribute]
public void set_TransformationMethod(TransformationMethod value);
    public JsonColumnMapping Clone();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public bool get_IsValid();
}
internal class Kusto.Data.Common.KustoDataExceptionsTracer : TraceSourceBase`1<KustoDataExceptionsTracer> {
    public string Id { get; }
    public TraceVerbosity DefaultVerbosity { get; }
    public virtual string get_Id();
    public virtual TraceVerbosity get_DefaultVerbosity();
}
public static class Kusto.Data.Common.KustoTrustedEndpoints : object {
    public static EndpointContext KustoEndpointContext;
    public static EndpointContext NonKustoEndpointContext;
    public static string EnableWellKnownKustoEndpointsValidation;
    private static Tweak`1<bool> s_enableWellKnownKustoEndpointsValidation;
    private static object s_lock;
    private static Dictionary`2<string, FastSuffixMatcher`1<EndpointContext>> s_matchers;
    private static FastSuffixMatcher`1<EndpointContext> s_additionalMatcher;
    private static Predicate`1<string> s_overrideMatcher;
    private static EndpointContext s_overrideContext;
    private static KustoTrustedEndpoints();
    public static void SetOverridePolicy(Predicate`1<string> matcher, EndpointContext endpointContext);
    public static void ValidateTrustedEndpoint(KustoConnectionStringBuilder kcsb, string loginEndpoint);
    public static void ValidateTrustedEndpoint(KustoConnectionStringBuilder kcsb, string aadLoginEndpoint, string dstsLoginEndpoint);
    public static void ValidateTrustedEndpoint(Uri uri, string loginEndpoint);
    public static void ValidateTrustedEndpoint(Uri uri, string aadLoginEndpoint, string dstsLoginEndpoint);
    public static bool IsTrustedEndpoint(KustoConnectionStringBuilder kcsb, string loginEndpoint, String& errorMessage);
    public static bool IsTrustedEndpoint(Uri uri, string loginEndpoint, String& errorMessage);
    public static bool IsTrustedEndpoint(Uri uri, string aadLoginEndpoint, string dstsLoginEndpoint, String& errorMessage);
    public static bool IsTrustedEndpoint(KustoConnectionStringBuilder kcsb, string aadLoginEndpoint, string dstsLoginEndpoint, String& errorMessage);
    public static void AddTrustedHosts(IEnumerable`1<MatchRule<EndpointContext>> rules, bool replace);
    public static bool TryGetEndpointContext(string hostname, string loginEndpoint, EndpointContext& endpointContext);
    public static bool IsKustoEndpoint(Uri uri, string loginEndpoint, String& errorMessage);
    private static bool IsTrustedEndpointImpl(string hostname, string loginEndpoint, String& errorMessage, EndpointContext& endpointContext);
    private static bool IsSameCloud(string endpointA, string endpointB);
}
public class Kusto.Data.Common.MappingConsts : object {
    public static string Path;
    public static string TransformationMethod;
    public static string Ordinal;
    public static string ConstValue;
    public static string FieldName;
    public static string Columns;
    public static string StorageDataType;
    private static IList`1<string> s_mappingConsts;
    private static MappingConsts();
    public static IList`1<string> GetMappingProperties();
}
[FlagsAttribute]
internal enum Kusto.Data.Common.NormalizationMode : Enum {
    public int value__;
    public static NormalizationMode Always;
    public static NormalizationMode Classic;
    public static NormalizationMode ClusterManagerCommand;
    public static NormalizationMode DataManagerCommand;
    public static NormalizationMode EngineCommand;
    public static NormalizationMode Query;
}
[DataContractAttribute]
public class Kusto.Data.Common.PluginSchema : object {
    [DataMemberAttribute]
public string Name;
    public PluginSchema(string name);
    public sealed virtual object Clone();
}
[ExtensionAttribute]
public static class Kusto.Data.Common.QueryProviderExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteQuery(ICslQueryProvider queryProvider, string query, ClientRequestProperties properties);
    [ExtensionAttribute]
public static IEnumerable`1<T> ExecuteQuery(ICslQueryProvider queryProvider, string databaseName, string query, ClientRequestProperties properties);
}
public class Kusto.Data.Common.Repl : object {
    private static string c_timing;
    private static string c_crid;
    private static string c_tableView;
    private static string c_typeView;
    private static string c_marsView;
    private static string c_narrowView;
    private static string c_outputResultsSet;
    private static string c_prettyErrors;
    private static string c_markdownView;
    private static string c_trim;
    private static string c_lineMode;
    private static string c_csvHeaders;
    private static string c_focus;
    private static string c_consoletrace;
    private static string c_v2protocol;
    private static string c_queryStreaming;
    private static string c_notSupportedByThisRuntime;
    private string m_databaseName;
    private ICslQueryProvider m_queryProvider;
    private ICslAdminProvider m_adminProvider;
    private KustoConnectionStringBuilder m_kcsb;
    private ClientRequestProperties m_clientRequestProperties;
    private bool m_keepOpen;
    private ReplPermissions m_replPermissions;
    private ILogger`1<ConsoleColor> m_logger;
    private Options m_options;
    private bool m_echo;
    private Dictionary`2<string, string> m_properties;
    private Dictionary`2<string, Action`2<RunContext, string>> m_clientCommands;
    private TextWriter m_nextRequestWriter;
    private bool m_nextRequestWriterClip;
    private DataSourceFormat m_nextRequestWriterFormat;
    private RunningQueryOrCommand m_runningQueryOrCommand;
    public bool Echo { get; public set; }
    public Dictionary`2<string, string> Properties { get; public set; }
    public ILogger`1<ConsoleColor> Logger { get; public set; }
    public bool Focus { get; public set; }
    public Repl(string defaultDatabaseName, ICslQueryProvider queryProvider, ICslAdminProvider adminProvider, KustoConnectionStringBuilder kcsb, ClientRequestProperties clientRequestProperties, bool keepOpen, bool lineMode, ReplPermissions replPermissions);
    public bool get_Echo();
    public void set_Echo(bool value);
    public Dictionary`2<string, string> get_Properties();
    public void set_Properties(Dictionary`2<string, string> value);
    public ILogger`1<ConsoleColor> get_Logger();
    public void set_Logger(ILogger`1<ConsoleColor> value);
    public bool get_Focus();
    public void set_Focus(bool value);
    private IDisposable SuppressReplPermissionsInteractiveIfNeeded(bool interactive);
    public ReplRunResults RunScript(string script, bool multiline, bool quitOnError);
    public ReplRunResults RunCommand(string command, bool interactive);
    public ReplRunResults RunCommands(IEnumerable`1<string> commands, bool interactive);
    public ReplRunResults Run();
    private ReplRunResults RunSingleNoPromptNoClose(RunContext runContext, string text);
    private ReplRunResults RunImpl(RunContext runContext, TextReader inputStream, bool showPrompt, bool quitOnError);
    private static string GetClientRequestIdFromExceptionOrFallback(Exception ex, string fallback);
    private void CloseProvidersIfNeeded();
    private void DoCls(RunContext runContext, string cmd);
    private void DoHelp(RunContext runContext, string cmd);
    private void DoDbcontext(RunContext runContext, string cmd);
    private List`1<CrpOption> ListClientRequestPropertiesOptions(string name, bool include_public, bool include_internal);
    private void DoDoc(RunContext runContext, string cmd);
    private void DoReq(RunContext runContext, string cmd);
    private void DoCrp(RunContext runContext, string cmd);
    private void DoQueryParametersDisplayAll();
    private void DoQueryParametersDisplayOne(RunContext runContext, string name);
    private void DoQueryParameters(RunContext runContext, string cmd);
    private void DoEcho(RunContext runContext, string cmd);
    private void DoWait(RunContext runContext, string cmd);
    private void DoHttpGet(RunContext runContext, string cmd);
    private static bool Authenticate(KustoConnectionStringBuilder kcsb, HttpRequestMessage request, String& error);
    private void DoConnect(RunContext runContext, string cmd);
    private void DoLoop(RunContext runContext, string cmd);
    private void DoReplPermissionsError(string permission);
    private void DoSave(RunContext runContext, string cmd);
    private void DoScript(RunContext runContext, string cmd);
    private void DoScriptml(RunContext runContext, string cmd);
    private void DoClip(RunContext runContext, string cmd);
    private void DoExecuteQueryInKustoExplorer(RunContext runContext, string cmd);
    private void ExecuteSingle(RunContext runContext, string cmd, String& clientRequestId);
    public void PrintUsage();
    private void PrintUsage(RunContext runContext);
    private void PrintUsageImpl(string text, Action`1<string> WriteLine, bool predicate);
    private void EnableStreamingClientIfNeeded(object provider);
    public ClientRequestProperties SendQuery(string cmd, String& clientRequestId);
    private ClientRequestProperties SendQuery(RunContext runContext, string cmd, String& clientRequestId);
    private ClientRequestProperties SendQueryImpl(RunContext runContext, string cmd, String& clientRequestId);
    private void ConsumeQueryV2Results(Task`1<ProgressiveDataSet> v2Task, string cmd);
    private string DynamicDataTypeDecoder(Byte[] x, int y, int z);
    private string DecimalDataTypeDecoder(Byte[] x, int y, int z);
    private static void WriteAsText(ProgressiveDataSetDataTableFragmentFrame frame, string title, bool tabify, TextWriter writer, bool focus, bool firstOnly, bool markdown, bool trim, int bufferedRowCount, string includeWithHeader, bool includeHeader);
    private void WriteResults(string banner, string cmd, IDataReader reader);
    private void DisposeNextRequestWriter();
    public ClientRequestProperties SendCommand(string cmd, String& clientRequestId);
    private ClientRequestProperties SendCommand(RunContext runContext, string cmd, String& clientRequestId);
    private ClientRequestProperties GetClientRequestProperties();
    [CompilerGeneratedAttribute]
private void <.ctor>b__33_0(RunContext _1, string _2);
    [CompilerGeneratedAttribute]
private void <.ctor>b__33_1(RunContext _1, string _2);
    [CompilerGeneratedAttribute]
private void <.ctor>b__33_2(RunContext _1, string _2);
    [CompilerGeneratedAttribute]
private void <.ctor>b__33_3(RunContext _1, string _2);
    [CompilerGeneratedAttribute]
private void <.ctor>b__33_4(RunContext _1, string _2);
    [CompilerGeneratedAttribute]
private void <.ctor>b__33_5(RunContext _1, string _2);
    [CompilerGeneratedAttribute]
private void <.ctor>b__33_6(RunContext _1, string _2);
    [CompilerGeneratedAttribute]
private void <.ctor>b__33_7(RunContext _1, string _2);
    [CompilerGeneratedAttribute]
private void <.ctor>b__33_8(RunContext _1, string _2);
    [CompilerGeneratedAttribute]
private void <RunImpl>b__52_0();
    [CompilerGeneratedAttribute]
private bool <RunImpl>b__52_1();
}
public class Kusto.Data.Common.ReplDocHelper : object {
    private static Type[] s_paramlessTypes;
    private static Object[] s_paramlessValues;
    private ILogger`1<ConsoleColor> m_logger;
    public ReplDocHelper(ILogger`1<ConsoleColor> logger);
    private static ReplDocHelper();
    public void DocExceptions();
    private static void DocException(ExtendedStringBuilder esb, Type type, string docstring);
}
public class Kusto.Data.Common.ReplParser : object {
    private TextReader m_input;
    private bool m_lineMode;
    private bool m_ignoreControlG;
    private Func`1<bool> m_lineModeProvider;
    private Action m_prompt;
    public ReplParser(TextReader input, bool lineMode, bool ignoreControlG, Action prompt);
    public ReplParser(TextReader input, Func`1<bool> lineModeProvider, bool ignoreControlG, Action prompt);
    [IteratorStateMachineAttribute("Kusto.Data.Common.ReplParser/<Parse>d__7")]
public IEnumerable`1<string> Parse();
    private bool GetLineMode();
}
public class Kusto.Data.Common.ReplPermissions : object {
    [CompilerGeneratedAttribute]
private bool <CanAccessClipboard>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanAccessConsole>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanAccessFilesystem>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanConnect>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanInvokeKustoExplorer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanTerminateProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanCalloutHttpEndpoint>k__BackingField;
    public bool CanAccessClipboard { get; public set; }
    public bool CanAccessConsole { get; public set; }
    public bool CanAccessFilesystem { get; public set; }
    public bool CanConnect { get; public set; }
    public bool CanInvokeKustoExplorer { get; public set; }
    public bool CanTerminateProcess { get; public set; }
    public bool CanCalloutHttpEndpoint { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CanAccessClipboard();
    [CompilerGeneratedAttribute]
public void set_CanAccessClipboard(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanAccessConsole();
    [CompilerGeneratedAttribute]
public void set_CanAccessConsole(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanAccessFilesystem();
    [CompilerGeneratedAttribute]
public void set_CanAccessFilesystem(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanConnect();
    [CompilerGeneratedAttribute]
public void set_CanConnect(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanInvokeKustoExplorer();
    [CompilerGeneratedAttribute]
public void set_CanInvokeKustoExplorer(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanTerminateProcess();
    [CompilerGeneratedAttribute]
public void set_CanTerminateProcess(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanCalloutHttpEndpoint();
    [CompilerGeneratedAttribute]
public void set_CanCalloutHttpEndpoint(bool value);
    public static ReplPermissions FromHeadlessService();
    public static ReplPermissions FromInteractiveConsole();
    public static ReplPermissions FromLocalScript();
    public ReplPermissions Clone();
}
public class Kusto.Data.Common.ReplRunResults : object {
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Quit>k__BackingField;
    public int ErrorCode { get; private set; }
    public bool Quit { get; private set; }
    internal static ReplRunResults Empty { get; }
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(int value);
    [CompilerGeneratedAttribute]
public bool get_Quit();
    [CompilerGeneratedAttribute]
private void set_Quit(bool value);
    internal static ReplRunResults get_Empty();
    public static ReplRunResults FromError(int errorCode);
    internal static ReplRunResults FromQuit();
}
public enum Kusto.Data.Common.SchemaOptions : Enum {
    public int value__;
    public static SchemaOptions BlockUnsupportedTypes;
    public static SchemaOptions AllowUnsupportedTypes;
}
[DataContractAttribute]
public class Kusto.Data.Common.ServiceRequestProperties : ClientRequestProperties {
    public ServiceRequestProperties(IEnumerable`1<KeyValuePair`2<string, object>> options, IEnumerable`1<KeyValuePair`2<string, string>> parameters);
    protected ServiceRequestProperties(bool dummy);
    public static ServiceRequestProperties CreateOrCast(ClientRequestProperties clientRequestProperties);
    protected virtual void CloneTo(ClientRequestProperties dest, bool secureClone);
    public virtual ClientRequestProperties Clone(bool secureClone);
    public static ServiceRequestProperties FromJsonString(string properties);
}
public enum Kusto.Data.Common.ServiceType : Enum {
    public int value__;
    public static ServiceType Engine;
    public static ServiceType DataManagement;
    public static ServiceType ClusterManagement;
    public static ServiceType Bridge;
}
public enum Kusto.Data.Common.StorageEngineKind : Enum {
    public int value__;
    public static StorageEngineKind StorageV2;
    public static StorageEngineKind StorageV3;
}
[DataContractAttribute]
public class Kusto.Data.Common.TableSchema : object {
    [DataMemberAttribute]
public string Name;
    [DataMemberAttribute]
public ColumnSchema DefaultColumn;
    [DataMemberAttribute]
public string Folder;
    [DataMemberAttribute]
public string DocString;
    private Dictionary`2<string, ColumnSchema> m_columns;
    [DataMemberAttribute]
private List`1<ColumnSchema> m_orderedColumns;
    public ReadOnlyDictionary`2<string, ColumnSchema> Columns { get; }
    public IReadOnlyList`1<ColumnSchema> OrderedColumns { get; }
    public TableSchema(string name);
    public TableSchema(string name, IEnumerable`1<ColumnSchema> columns);
    public TableSchema(string name, IEnumerable`1<ColumnSchema> columns, string folder, string docString);
    public ReadOnlyDictionary`2<string, ColumnSchema> get_Columns();
    public IReadOnlyList`1<ColumnSchema> get_OrderedColumns();
    public sealed virtual object Clone();
    public void MergeFrom(TableSchema other, bool sortColumns);
    public int CalculateNumberOfMissingColumns(TableSchema schema);
    public IEnumerable`1<ColumnSchema> GetMissingColumns(TableSchema schema);
    public string ToCslString();
    public string ToSchemaString();
    public string ToColumnDocStringsCslString();
    public TableSchema GetMissingSchema(TableSchema schema);
    public void AddColumnIfMissing(ColumnSchema columnSchema);
    public void AddColumnsIfMissing(IEnumerable`1<ColumnSchema> columnSchemas);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public string ToJsonString(bool indented);
    public static TableSchema FromJsonString(string jsonString);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    private void ConstructColumnsDictionaryIfNeeded();
}
public class Kusto.Data.Common.TableSetAppendReplaceParameters : object {
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IngestIfNotExistsValues>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FolderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableIngestionTimePolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExtendSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RecreateSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsDistributed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PersistDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StorageEngineKind> <StorageEngine>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableReplaceOnUpdatePolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SmallDimensionTable>k__BackingField;
    public HashSet`1<string> Tags { get; public set; }
    public HashSet`1<string> IngestIfNotExistsValues { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public string FolderName { get; public set; }
    public string DocString { get; public set; }
    public bool EnableIngestionTimePolicy { get; public set; }
    public bool ExtendSchema { get; public set; }
    public bool RecreateSchema { get; public set; }
    public Nullable`1<bool> IsDistributed { get; public set; }
    public bool PersistDetails { get; public set; }
    public Nullable`1<StorageEngineKind> StorageEngine { get; public set; }
    public bool DisableReplaceOnUpdatePolicies { get; public set; }
    public bool SmallDimensionTable { get; public set; }
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_IngestIfNotExistsValues();
    [CompilerGeneratedAttribute]
public void set_IngestIfNotExistsValues(HashSet`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_FolderName();
    [CompilerGeneratedAttribute]
public void set_FolderName(string value);
    [CompilerGeneratedAttribute]
public string get_DocString();
    [CompilerGeneratedAttribute]
public void set_DocString(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableIngestionTimePolicy();
    [CompilerGeneratedAttribute]
public void set_EnableIngestionTimePolicy(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExtendSchema();
    [CompilerGeneratedAttribute]
public void set_ExtendSchema(bool value);
    [CompilerGeneratedAttribute]
public bool get_RecreateSchema();
    [CompilerGeneratedAttribute]
public void set_RecreateSchema(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsDistributed();
    [CompilerGeneratedAttribute]
public void set_IsDistributed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_PersistDetails();
    [CompilerGeneratedAttribute]
public void set_PersistDetails(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<StorageEngineKind> get_StorageEngine();
    [CompilerGeneratedAttribute]
public void set_StorageEngine(Nullable`1<StorageEngineKind> value);
    [CompilerGeneratedAttribute]
public bool get_DisableReplaceOnUpdatePolicies();
    [CompilerGeneratedAttribute]
public void set_DisableReplaceOnUpdatePolicies(bool value);
    [CompilerGeneratedAttribute]
public bool get_SmallDimensionTable();
    [CompilerGeneratedAttribute]
public void set_SmallDimensionTable(bool value);
    public string ToCslString();
    private List`1<string> ToProperties();
}
public enum Kusto.Data.Common.TransformationMethod : Enum {
    public int value__;
    public static TransformationMethod None;
    public static TransformationMethod PropertyBagArrayToDictionary;
    public static TransformationMethod SourceLocation;
    public static TransformationMethod SourceLineNumber;
    public static TransformationMethod UnknownMethod1;
    public static TransformationMethod UnknownMethod;
    public static TransformationMethod DateTimeFromUnixSeconds;
    public static TransformationMethod DateTimeFromUnixMilliseconds;
    public static TransformationMethod DateTimeFromUnixMicroseconds;
    public static TransformationMethod DateTimeFromUnixNanoseconds;
    public static TransformationMethod DropMappedFields;
    public static TransformationMethod BytesAsBase64;
}
public class Kusto.Data.Common.TypeHierarchyWalker : object {
    private Type m_rootType;
    private TopDownTreeNode`1<Type> m_rootNode;
    private Dictionary`2<Type, TopDownTreeNode`1<Type>> m_map;
    private Dictionary`2<string, string> m_docstrings;
    public TypeHierarchyWalker(Type rootType);
    public void Walk(Action`3<TContext, Type, string> action, TContext context, Action indent, Action unindent);
    private void AddDocstrings(string xmlFile);
    private void CreateMap();
    private void SetMapEntry(Type key, TopDownTreeNode`1<Type> value);
    private static string SuperTrim(string text);
}
internal static class Kusto.Data.Common.VersionParser : object {
    private static Regex s_versionRegex;
    private static VersionParser();
    internal static void TryParseVersion(string versionString, DatabaseSchema database);
}
public static class Kusto.Data.Common.WellKnownConnectionStrings : object {
    private static Dictionary`2<string, string> s_wellKnownConnectionStrings;
    private static Regex s_cluster_database_Regex;
    private static WellKnownConnectionStrings();
    public static string GetConnectionStringByAliasOrSelf(string potentialAlias);
    public static string GetConnectionStringByAliasOrNull(string alias, IDictionary`2<string, string> alternativeWellKnownConnectionStrings);
    private static Dictionary`2<string, string> GetWellKnownConnectionStrings();
}
public class Kusto.Data.Common.WellKnownDstsDetails : object {
    public static string KustoServiceName;
    public static string DstsTokenSchema;
    public static string DstsUpnClaimName;
    public static string DstsJWTTenantId;
}
public class Kusto.Data.ContainersGetCommandResult : object {
    public string StorageRoot;
    public bool RemoteStorage;
}
public class Kusto.Data.ContinuousDataExportFailuresCommandResult : object {
    public DateTime Timestamp;
    public string OperationId;
    public string Name;
    public DateTime LastSuccessRun;
    public string FailureKind;
    public string Details;
}
public class Kusto.Data.ContinuousDataExportToExternalTableCommandResult : object {
    public DateTime Timestamp;
    public string ExternalTableName;
    public string Path;
    public long NumRecords;
    public long SizeInBytes;
}
public class Kusto.Data.ContinuousExportShowCommandResult : object {
    public string Name;
    public string ExternalTableName;
    public string Query;
    public TimeSpan ForcedLatency;
    public TimeSpan IntervalBetweenRuns;
    public string CursorScopedTables;
    public string ExportProperties;
    public DateTime LastRunTime;
    public string StartCursor;
    public bool IsDisabled;
    public string LastRunResult;
    public DateTime ExportedTo;
    public bool IsRunning;
    public string ManagedIdentityIdentifier;
}
public class Kusto.Data.ContinuousExportShowPendingCommandResult : object {
    public string DatabaseName;
    public string Name;
    public Nullable`1<TimeSpan> ForcedLatency;
    public TimeSpan IntervalBetweenRuns;
    public bool IsRunning;
    public DateTime LastRunTime;
    public DateTime ExportedTo;
    public TimeSpan AvailableExportScope;
    public string ManagedIdentityIdentifier;
}
public class Kusto.Data.CopyAzureTablesCommandResult : object {
    public bool success;
}
public class Kusto.Data.CoralConfigurationStateShowCommandResult : object {
    public string ConfigurationState;
}
public class Kusto.Data.CorruptedDateTimePatchCommandResult : object {
    public string TableName;
    public string OldExtentId;
    public string NewExtentId;
    public JArray PreviousColumnRanges;
    public JArray PatchedColumnRanges;
    public string Status;
    public string Error;
}
public class Kusto.Data.CorruptedDateTimeShowCommandResult : object {
    public string TableName;
    public string ExtentId;
    public JArray ColumnRanges;
}
public class Kusto.Data.DashboardGrantAccessCommandResult : object {
    public string Status;
}
public class Kusto.Data.DashboardResolveCommandResult : object {
    public bool IsResolved;
    public string TenantId;
}
public class Kusto.Data.DashboardResourceRevokeAccessCommandResult : object {
    public string Status;
}
public class Kusto.Data.DashboardsShowCommandResult : object {
    public string ServiceName;
    public string CmConnectionString;
    public string PublicUrl;
    public string DashboardSettings;
}
public class Kusto.Data.DashboardTenantResolveCommandResult : object {
    public bool IsResolved;
}
public class Kusto.Data.Data.Facet : object {
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<FacetBucket> <Buckets>k__BackingField;
    public string ColumnName { get; public set; }
    public IEnumerable`1<FacetBucket> Buckets { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<FacetBucket> get_Buckets();
    [CompilerGeneratedAttribute]
public void set_Buckets(IEnumerable`1<FacetBucket> value);
}
public class Kusto.Data.Data.FacetBucket : object {
    [CompilerGeneratedAttribute]
private string <ColumnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    public string ColumnValue { get; public set; }
    public long Count { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ColumnValue();
    [CompilerGeneratedAttribute]
public void set_ColumnValue(string value);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(long value);
}
internal class Kusto.Data.Data.Impl.Impl.ColumnSequence`1 : object {
    private T[] m_values;
    private Byte[] m_nulls;
    public int Count { get; }
    public ColumnSequence`1(T[] values, Byte[] nulls);
    public sealed virtual int get_Count();
    public sealed virtual bool IsNull(int i);
    public sealed virtual object GetValue(int i);
}
internal class Kusto.Data.Data.Impl.Impl.DataTableFrame : FrameBase {
    [CompilerGeneratedAttribute]
private IDataReader <TableData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TableId>k__BackingField;
    [CompilerGeneratedAttribute]
private WellKnownDataSet <TableKind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    public IDataReader TableData { get; private set; }
    public int TableId { get; private set; }
    public WellKnownDataSet TableKind { get; private set; }
    public string TableName { get; private set; }
    public DataTableFrame(KdsTabularHeaderFrame header, IEnumerable`1<KdsTabularDataFrame> fragments);
    public DataTableFrame(int tableId, WellKnownDataSet tableKind, string tableName, IDataReader tableData);
    [CompilerGeneratedAttribute]
public sealed virtual IDataReader get_TableData();
    [CompilerGeneratedAttribute]
private void set_TableData(IDataReader value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TableId();
    [CompilerGeneratedAttribute]
private void set_TableId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual WellKnownDataSet get_TableKind();
    [CompilerGeneratedAttribute]
private void set_TableKind(WellKnownDataSet value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TableName();
    [CompilerGeneratedAttribute]
private void set_TableName(string value);
}
internal class Kusto.Data.Data.Impl.Impl.EmptyStringColumnSequence : object {
    private int m_count;
    public int Count { get; }
    public EmptyStringColumnSequence(int count);
    public sealed virtual int get_Count();
    public sealed virtual bool IsNull(int i);
    public sealed virtual object GetValue(int i);
}
[ExtensionAttribute]
public static class Kusto.Data.Data.Impl.Impl.ExtendedStorageDataType : object {
    [ExtensionAttribute]
public static Type GetCorrespondingClrType(StorageDataType sdt);
    [ExtensionAttribute]
public static string GetCanonicalStorageDataTypeName(StorageDataType sdt);
}
internal abstract class Kusto.Data.Data.Impl.Impl.FrameBase : object {
    [CompilerGeneratedAttribute]
private FrameHeader <FrameHeader>k__BackingField;
    internal FrameHeader FrameHeader { get; private set; }
    public FrameType FrameType { get; }
    public FrameBase(FrameType frameType);
    [CompilerGeneratedAttribute]
internal FrameHeader get_FrameHeader();
    [CompilerGeneratedAttribute]
private void set_FrameHeader(FrameHeader value);
    public sealed virtual FrameType get_FrameType();
}
internal class Kusto.Data.Data.Impl.Impl.FrameHeader : ValueType {
    public FrameType FrameType;
    public FrameHeader(FrameType frameType);
}
internal interface Kusto.Data.Data.Impl.Impl.IColumnSequence {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual bool IsNull(int i);
    public abstract virtual object GetValue(int i);
}
internal class Kusto.Data.Data.Impl.Impl.JsonTokenReader : object {
    private static LeakDetectorSlim s_leakDetector;
    private DumpingJsonTextReader m_reader;
    private JsonSerializer m_serializer;
    private KustoClientRequestDescriptor m_requestDescriptor;
    private bool m_disposed;
    private bool m_debugAbortDuringRead;
    unknown bool DebugAbortDuringRead {public set; }
    public bool DumpingEnabled { get; }
    public object CurrentValue { get; }
    public JsonTokenReader(DumpingJsonTextReader reader, JsonSerializer serializer, KustoClientRequestDescriptor requestDescriptor);
    private static JsonTokenReader();
    public sealed virtual void Dispose();
    public void set_DebugAbortDuringRead(bool value);
    public Exception CreateStreamCorruptionException(string message);
    public static Exception CreateStreamReadException(KustoClientRequestDescriptor requestDescriptor, Exception ex);
    public bool get_DumpingEnabled();
    public void Dump(string text);
    public void Dump(string format, Object[] args);
    private void ReadSkip();
    private bool ReadToken();
    public JsonToken ReadNextTokenOrThrow();
    public JsonToken ReadToken(JsonToken tokenType);
    public JsonToken ReadToken(JsonToken tokenType1, JsonToken tokenType2);
    public JsonToken ReadToken(JsonToken tokenType1, JsonToken tokenType2, JsonToken tokenType3);
    public JsonToken ReadToken(JsonToken tokenType1, JsonToken tokenType2, JsonToken tokenType3, JsonToken tokenType4);
    public JsonToken ReadStartObject();
    public JsonToken ReadEndObject();
    public JsonToken ReadPropertyNameOrStartObject();
    public JsonToken ReadPropertyNameOrEndObject();
    public JsonToken ReadPropertyName(string name);
    public void ReadStartArray();
    public void ReadEndArray();
    public string ReadString();
    public bool ReadBoolOrDefault(bool defaultValue);
    public int ReadInt32OrDefault(int defaultValue);
    public double ReadDoubleOrDefault(double defaultValue);
    public bool ReadStartObjectOrEndArray();
    public T ReadObjectOfType();
    public void SkipToTheEnd();
    public JsonToken SkipUntilPropertyName(string name);
    public JsonToken SkipUntilPropertyNameOrEndObject(string name1, string name2, string name3);
    public JsonToken SkipUntilToken(JsonToken token);
    public JsonToken SkipUntilToken(JsonToken token1, JsonToken token2);
    public JsonToken SkipUntilEndObject();
    public JsonToken SkipUntilEndArray();
    public JsonToken SkipUntilStartObject();
    public object get_CurrentValue();
    public JArray ReadNextTokenAsJArray();
    public JObject ReadNextTokenAsJObject();
    public JToken ReadNextTokenAsJToken();
}
internal class Kusto.Data.Data.Impl.Impl.KdsAuxFrame : KdsFrameDecoder {
    public KdsAuxFrame(KdsFrame frame, ILogger`1<TraceVerbosity> logger, KdsFrameType frameType);
}
internal class Kusto.Data.Data.Impl.Impl.KdsDecoder : object {
    private Stream m_stream;
    private bool m_leaveOpen;
    private ILogger`1<TraceVerbosity> m_logger;
    private bool m_convertDecimalColumnToString;
    public KdsDecoder(Stream stream, bool leaveOpen, ILogger`1<TraceVerbosity> logger, bool convertDecimalColumnToString);
    public sealed virtual void Dispose();
    public KdsFrameDecoder ReadNextFrame();
    private KdsFrame ReadRawFrame();
    private Byte[] ForceRead(int count);
}
internal class Kusto.Data.Data.Impl.Impl.KdsErrorFrame : KdsFrameDecoder {
    [CompilerGeneratedAttribute]
private Exception[] <Errors>k__BackingField;
    public Exception[] Errors { get; private set; }
    public KdsErrorFrame(KdsFrame frame, ILogger`1<TraceVerbosity> logger, KdsFrameType frameType);
    [CompilerGeneratedAttribute]
public Exception[] get_Errors();
    [CompilerGeneratedAttribute]
private void set_Errors(Exception[] value);
    public static Exception CreateExceptionFromErrorDetails(UInt32 code, string message);
    private void ParseFrame();
}
internal class Kusto.Data.Data.Impl.Impl.KdsFrame : object {
    private KdsFrameHeader m_header;
    [CompilerGeneratedAttribute]
private Byte[] <Payload>k__BackingField;
    public Byte[] Payload { get; private set; }
    public int SubstreamId { get; }
    public KdsFrameType FrameType { get; }
    public KdsFrame(KdsFrameHeader header, Byte[] payload);
    [CompilerGeneratedAttribute]
public Byte[] get_Payload();
    [CompilerGeneratedAttribute]
private void set_Payload(Byte[] value);
    public int get_SubstreamId();
    public KdsFrameType get_FrameType();
}
internal abstract class Kusto.Data.Data.Impl.Impl.KdsFrameDecoder : object {
    protected KdsFrame m_frame;
    public KdsFrameType FrameType { get; }
    public Byte[] Payload { get; }
    public int SubstreamId { get; }
    public KdsFrameDecoder(KdsFrame frame);
    public KdsFrameType get_FrameType();
    public Byte[] get_Payload();
    public int get_SubstreamId();
}
internal class Kusto.Data.Data.Impl.Impl.KdsFrameHeader : ValueType {
    public int PayloadSize;
    public int SubstreamId;
    public KdsFrameType FrameType;
}
internal enum Kusto.Data.Data.Impl.Impl.KdsFrameType : Enum {
    public int value__;
    public static KdsFrameType TabularHeader;
    public static KdsFrameType TabularData;
    public static KdsFrameType Error;
    public static KdsFrameType Aux;
    public static KdsFrameType SubstreamTermination;
    public static KdsFrameType TabularHeaderV2;
    public static KdsFrameType TabularDataV2;
    public static KdsFrameType ErrorV2;
    public static KdsFrameType ProgressReportV2;
    public static KdsFrameType AuxV2;
    public static KdsFrameType SubstreamTerminationV2;
}
internal class Kusto.Data.Data.Impl.Impl.KdsMultiplexedStream : object {
    private KdsDecoder m_decoder;
    private List`1<KdsSubstream> m_substreams;
    private static int MaxSubstreams;
    public int SubstreamCount { get; }
    public KdsMultiplexedStream(Stream stream, bool leaveOpen, ILogger`1<TraceVerbosity> logger, bool convertDecimalColumnToString);
    public int get_SubstreamCount();
    public bool TryReadSubstream(int substreamId, KdsFrameDecoder& frame);
    public void DiscardSubstream(int substreamId);
    public sealed virtual void Dispose();
    private bool ReadFrame();
    private KdsSubstream GetOrCreateSubstream(int substreamId);
}
public class Kusto.Data.Data.Impl.Impl.KdsProgressiveFrameDecoder : object {
    private KdsDecoder m_decoder;
    private string m_clientRequestId;
    private bool m_started;
    private bool m_completed;
    private ITraceSource m_tracer;
    private KdsStreamHeader m_streamHeader;
    public static string ServerProtocolVersion;
    public KdsProgressiveFrameDecoder(Stream stream, string clientRequestId, ITraceSource tracer);
    internal bool TryReadFrame(FrameBase& frame);
    internal ProgressiveDataSetCompletionFrame Cancel();
    private bool ShouldConsumeSubstream(KdsTabularHeaderFrame tableHeader);
    private DataTableFrame ConsumeSubstream(KdsTabularHeaderFrame tableHeader);
    public sealed virtual void Dispose();
}
internal class Kusto.Data.Data.Impl.Impl.KdsProgressReportFrame : KdsFrameDecoder {
    [CompilerGeneratedAttribute]
private ulong <TotalRows>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <ScannedRows>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    public ulong TotalRows { get; private set; }
    public ulong ScannedRows { get; private set; }
    public string NodeId { get; private set; }
    public KdsProgressReportFrame(KdsFrame frame, ILogger`1<TraceVerbosity> logger);
    [CompilerGeneratedAttribute]
public ulong get_TotalRows();
    [CompilerGeneratedAttribute]
private void set_TotalRows(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_ScannedRows();
    [CompilerGeneratedAttribute]
private void set_ScannedRows(ulong value);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
private void set_NodeId(string value);
    private void ParseFrame();
}
internal enum Kusto.Data.Data.Impl.Impl.KdsStreamEncoding : Enum {
    public int value__;
    public static KdsStreamEncoding Invalid;
    public static KdsStreamEncoding Native;
    public static KdsStreamEncoding JSON;
    public static KdsStreamEncoding NativeV2;
    public static KdsStreamEncoding LastInvalid;
}
internal class Kusto.Data.Data.Impl.Impl.KdsStreamHeader : object {
    public static ushort c_NativeEncodingVersion;
    public static ushort c_NativeV2EncodingVersion;
    public static ushort c_JsonEncodingVersion;
    private static UInt32 c_KdsMagic;
    private static string c_KdsMagicString;
    private static string s_headerString_Native;
    private static string s_headerString_JSON;
    private static string s_headerString_NativeV2;
    [CompilerGeneratedAttribute]
private KdsStreamEncoding <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <EncodingVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContainsProgressiveFrames>k__BackingField;
    public KdsStreamEncoding Encoding { get; private set; }
    public ushort EncodingVersion { get; private set; }
    public bool ContainsProgressiveFrames { get; private set; }
    private static KdsStreamHeader();
    [CompilerGeneratedAttribute]
public KdsStreamEncoding get_Encoding();
    [CompilerGeneratedAttribute]
private void set_Encoding(KdsStreamEncoding value);
    [CompilerGeneratedAttribute]
public ushort get_EncodingVersion();
    [CompilerGeneratedAttribute]
private void set_EncodingVersion(ushort value);
    [CompilerGeneratedAttribute]
public bool get_ContainsProgressiveFrames();
    [CompilerGeneratedAttribute]
private void set_ContainsProgressiveFrames(bool value);
    private static string GetHeaderAsString(KdsStreamEncoding encoding);
    public static KdsStreamHeader ReadAndValidate(TextReader reader);
    public static KdsStreamHeader ReadAndValidate(Stream stream);
    public static void Write(Stream stream, KdsStreamEncoding encoding);
    public static void Write(StringBuilder sb, KdsStreamEncoding encoding);
}
internal class Kusto.Data.Data.Impl.Impl.KdsSubstream : object {
    private Queue`1<KdsFrameDecoder> m_frames;
    private bool m_started;
    private bool m_discarded;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasTerminationFrame>k__BackingField;
    public int Id { get; private set; }
    public bool HasTerminationFrame { get; private set; }
    public bool Ended { get; }
    public bool HasFrames { get; }
    public bool HasStarted { get; }
    public KdsSubstream(int id);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public bool get_HasTerminationFrame();
    [CompilerGeneratedAttribute]
private void set_HasTerminationFrame(bool value);
    public bool get_Ended();
    public bool get_HasFrames();
    public bool get_HasStarted();
    public KdsFrameDecoder Peek();
    public KdsFrameDecoder Dequeue();
    public void Enqueue(KdsFrameDecoder frame);
    public void Discard();
}
internal class Kusto.Data.Data.Impl.Impl.KdsSubstreamTerminationFrame : KdsFrameDecoder {
    [CompilerGeneratedAttribute]
private bool <Cancelled>k__BackingField;
    public bool Cancelled { get; private set; }
    public KdsSubstreamTerminationFrame(KdsFrame frame, ILogger`1<TraceVerbosity> logger, KdsFrameType frameType);
    [CompilerGeneratedAttribute]
public bool get_Cancelled();
    [CompilerGeneratedAttribute]
private void set_Cancelled(bool value);
    private void ParseFrame();
}
internal class Kusto.Data.Data.Impl.Impl.KdsTabularDataFrame : KdsFrameDecoder {
    [CompilerGeneratedAttribute]
private IColumnSequence[] <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RecordCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TableFragmentType <TableFragmentType>k__BackingField;
    public IColumnSequence[] Columns { get; private set; }
    public int RecordCount { get; private set; }
    public TableFragmentType TableFragmentType { get; private set; }
    public KdsTabularDataFrame(KdsFrame frame, ILogger`1<TraceVerbosity> logger, KdsFrameType frameType, bool convertDecimalColumnToString);
    [CompilerGeneratedAttribute]
public IColumnSequence[] get_Columns();
    [CompilerGeneratedAttribute]
private void set_Columns(IColumnSequence[] value);
    [CompilerGeneratedAttribute]
public int get_RecordCount();
    [CompilerGeneratedAttribute]
private void set_RecordCount(int value);
    [CompilerGeneratedAttribute]
public TableFragmentType get_TableFragmentType();
    [CompilerGeneratedAttribute]
private void set_TableFragmentType(TableFragmentType value);
    private void ParseFrame(KdsFrameType frameType, bool convertDecimalColumnToString);
    private T[] ParseNumbers(BinaryReader reader, int count);
    private T[] ParseBuffers(BinaryReader reader, int count, Func`4<Byte[], int, int, T> decoder);
    private String[] ParseStrings(BinaryReader reader, int count);
    private Object[] ParseDynamic(BinaryReader reader, int count);
    private static object JsonStringToObject(Byte[] data, int offset, int length);
    private DateTime[] ParseDates(BinaryReader reader, int count, Byte[] nullFlags);
    private TimeSpan[] ParseTimeSpans(BinaryReader reader, int count, Byte[] nullFlags);
    private SqlDecimal[] ParseDecimals(BinaryReader reader, int count, Byte[] nullFlags);
    private String[] ParseDecimalsToStrings(BinaryReader reader, int count, Byte[] nullFlags);
    private Guid[] ParseGuids(BinaryReader reader, int count);
    private Boolean[] ParseBools(BinaryReader reader, int count);
    private IColumnSequence CreateNullSequence(int count);
    private IColumnSequence CreateEmptyStringSequence(int count);
}
[ExtensionAttribute]
internal static class Kusto.Data.Data.Impl.Impl.KdsTabularHeaderExtensions : object {
    [ExtensionAttribute]
internal static DataTable ToSchemaTable(KdsTabularHeaderFrame frame, TupleStructure structure, bool convertDynamicColumnToString);
    internal static Type GetDataReaderSchemaType(StorageDataType dataType, bool convertDynamicColumnToString);
    private static TupleStructure GetStructureFromHeader(KdsTabularHeaderFrame frame);
}
internal class Kusto.Data.Data.Impl.Impl.KdsTabularHeaderFrame : KdsFrameDecoder {
    [CompilerGeneratedAttribute]
private Guid <DataSetId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataSetName>k__BackingField;
    [CompilerGeneratedAttribute]
private WellKnownDataSet <DataSetKind>k__BackingField;
    [CompilerGeneratedAttribute]
private StorageDataType[] <ColumnTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ColumnNames>k__BackingField;
    public Guid DataSetId { get; private set; }
    public string DataSetName { get; private set; }
    public WellKnownDataSet DataSetKind { get; private set; }
    public StorageDataType[] ColumnTypes { get; private set; }
    public String[] ColumnNames { get; private set; }
    public KdsTabularHeaderFrame(KdsFrame frame, ILogger`1<TraceVerbosity> logger, KdsFrameType frameType);
    [CompilerGeneratedAttribute]
public Guid get_DataSetId();
    [CompilerGeneratedAttribute]
private void set_DataSetId(Guid value);
    [CompilerGeneratedAttribute]
public string get_DataSetName();
    [CompilerGeneratedAttribute]
private void set_DataSetName(string value);
    [CompilerGeneratedAttribute]
public WellKnownDataSet get_DataSetKind();
    [CompilerGeneratedAttribute]
private void set_DataSetKind(WellKnownDataSet value);
    [CompilerGeneratedAttribute]
public StorageDataType[] get_ColumnTypes();
    [CompilerGeneratedAttribute]
private void set_ColumnTypes(StorageDataType[] value);
    [CompilerGeneratedAttribute]
public String[] get_ColumnNames();
    [CompilerGeneratedAttribute]
private void set_ColumnNames(String[] value);
    private void ParseFrame(KdsFrameType frameType);
    [CompilerGeneratedAttribute]
private string <.ctor>b__0_0(int i);
}
internal class Kusto.Data.Data.Impl.Impl.KustoJsonDataStreamReader : DataReaderBase {
    private JsonTokenReader m_tokenReader;
    private KustoDataReaderOptions m_options;
    private string m_tableName;
    private DataTable m_table;
    private DataColumnCollection m_columns;
    private DataTable m_schemaTable;
    private Object[] m_row;
    private bool m_isClosed;
    private bool m_readingRows;
    public int FieldCount { get; }
    public bool IsClosed { get; }
    public KustoJsonDataStreamReader(JsonTokenReader tokenReader, KustoDataReaderOptions options);
    public virtual void Dispose();
    internal static bool ReadPreamble(JsonTokenReader tokenReader);
    private void ReadTableSchema();
    private void SetReadingRows(bool value);
    private bool TryReadNextRow();
    public virtual int get_FieldCount();
    public virtual bool get_IsClosed();
    public virtual void Close();
    public virtual Type GetFieldType(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    public virtual DataTable GetSchemaTable();
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public virtual bool NextResult();
    public virtual bool Read();
}
internal class Kusto.Data.Data.Impl.Impl.NullColumnSequence : object {
    private int m_count;
    public int Count { get; }
    public NullColumnSequence(int count);
    public sealed virtual int get_Count();
    public sealed virtual bool IsNull(int i);
    public sealed virtual object GetValue(int i);
}
internal class Kusto.Data.Data.Impl.Impl.ProgressFrame : FrameBase {
    [CompilerGeneratedAttribute]
private double <TableProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TableId>k__BackingField;
    public double TableProgress { get; private set; }
    public int TableId { get; private set; }
    public ProgressFrame(KdsProgressReportFrame kdsFrame);
    public ProgressFrame(int tableId, double progress);
    [CompilerGeneratedAttribute]
public sealed virtual double get_TableProgress();
    [CompilerGeneratedAttribute]
private void set_TableProgress(double value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TableId();
    [CompilerGeneratedAttribute]
private void set_TableId(int value);
}
internal class Kusto.Data.Data.Impl.Impl.ProgressiveDataSetEnumerator : object {
    private static Func`2<string, Exception> s_incompleteDataStreamExceptionFactory;
    private static JsonSerializer s_serializer;
    private IDumper m_dumper;
    private JsonTokenReader m_tokenReader;
    private FrameBase m_frame;
    private bool m_done;
    public static string ClientProtocolVersion;
    private ProgressiveDataSetFrame System.Collections.Generic.IEnumerator<Kusto.Data.Results.ProgressiveDataSetFrame>.Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public ProgressiveDataSetEnumerator(Stream stream, Encoding encoding, KustoClientRequestDescriptor requestDescriptor, IDumper dumper);
    private static ProgressiveDataSetEnumerator();
    private sealed virtual override ProgressiveDataSetFrame System.Collections.Generic.IEnumerator<Kusto.Data.Results.ProgressiveDataSetFrame>.get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Dispose();
    public sealed virtual void Reset();
    private FrameType ReadFrameType();
    private FrameDeserializerBase CreateFrameDeserializer(FrameType frameType);
    private bool IsFrameMaterialized(FrameBase frame);
}
internal class Kusto.Data.Data.Impl.Impl.QueryCompletionFrame : FrameBase {
    [CompilerGeneratedAttribute]
private bool <HasErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancelled>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public bool HasErrors { get; private set; }
    public bool Cancelled { get; private set; }
    public Exception Exception { get; private set; }
    public QueryCompletionFrame(Exception exception, bool hasErrors, bool cancelled);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasErrors();
    [CompilerGeneratedAttribute]
private void set_HasErrors(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Cancelled();
    [CompilerGeneratedAttribute]
private void set_Cancelled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
    public static QueryCompletionFrame CreateFromCancelled(string clientRequestId);
    public static QueryCompletionFrame CreateFromSuccess(string clientRequestId);
    public static QueryCompletionFrame CreateFromError(string clientRequestId, Exception[] exceptions);
}
[DefaultMemberAttribute("Item")]
internal abstract class Kusto.Data.Data.Impl.Impl.ResultReader : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public WellKnownDataSet TableKind { get; }
    public int Id { get; private set; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public ResultReader(int id);
    public abstract virtual WellKnownDataSet get_TableKind();
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    public abstract virtual bool Read();
    public abstract virtual DataTable GetSchemaTable();
    public abstract virtual int get_FieldCount();
    public abstract virtual bool GetBoolean(int i);
    public abstract virtual byte GetByte(int i);
    public abstract virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public abstract virtual char GetChar(int i);
    public abstract virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public abstract virtual IDataReader GetData(int i);
    public abstract virtual string GetDataTypeName(int i);
    public abstract virtual DateTime GetDateTime(int i);
    public abstract virtual decimal GetDecimal(int i);
    public abstract virtual double GetDouble(int i);
    public abstract virtual Type GetFieldType(int i);
    public abstract virtual float GetFloat(int i);
    public abstract virtual Guid GetGuid(int i);
    public abstract virtual short GetInt16(int i);
    public abstract virtual int GetInt32(int i);
    public abstract virtual long GetInt64(int i);
    public abstract virtual string GetName(int i);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual string GetString(int i);
    public abstract virtual object GetValue(int i);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual bool IsDBNull(int i);
    public abstract virtual object get_Item(string name);
    public abstract virtual object get_Item(int i);
}
internal class Kusto.Data.Data.Impl.Impl.SetHeaderFrame : FrameBase {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProgressive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFragmented>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorReportingPlacement <ErrorReportingPlacement>k__BackingField;
    public string Version { get; private set; }
    public bool IsProgressive { get; private set; }
    public bool IsFragmented { get; private set; }
    public ErrorReportingPlacement ErrorReportingPlacement { get; private set; }
    public SetHeaderFrame(string version, bool isProgressive, bool isFragmented, ErrorReportingPlacement errorReportingPlacement);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsProgressive();
    [CompilerGeneratedAttribute]
private void set_IsProgressive(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFragmented();
    [CompilerGeneratedAttribute]
private void set_IsFragmented(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ErrorReportingPlacement get_ErrorReportingPlacement();
    [CompilerGeneratedAttribute]
private void set_ErrorReportingPlacement(ErrorReportingPlacement value);
}
public enum Kusto.Data.Data.Impl.Impl.StorageDataType : Enum {
    public int value__;
    public static StorageDataType Null;
    public static StorageDataType I8;
    public static StorageDataType UI8;
    public static StorageDataType I16;
    public static StorageDataType UI16;
    public static StorageDataType I32;
    public static StorageDataType UI32;
    public static StorageDataType I64;
    public static StorageDataType UI64;
    public static StorageDataType I128;
    public static StorageDataType UI128;
    public static StorageDataType R32;
    public static StorageDataType R64;
    public static StorageDataType StringBuffer;
    public static StorageDataType DateTime;
    public static StorageDataType Sbuf;
    public static StorageDataType Decimal;
    public static StorageDataType UniqueId;
    public static StorageDataType TimeSpan;
    public static StorageDataType Dynamic;
    public static StorageDataType LastInvalid;
}
internal class Kusto.Data.Data.Impl.Impl.TableCompletionFrame : FrameBase {
    [CompilerGeneratedAttribute]
private int <TableId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public int TableId { get; private set; }
    public long RowCount { get; private set; }
    public Exception Exception { get; private set; }
    public TableCompletionFrame(KdsSubstreamTerminationFrame kdsFrame);
    public TableCompletionFrame(int tableId, long rowCount, Exception[] exceptions);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TableId();
    [CompilerGeneratedAttribute]
private void set_TableId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_RowCount();
    [CompilerGeneratedAttribute]
private void set_RowCount(long value);
    [CompilerGeneratedAttribute]
public sealed virtual Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
}
internal class Kusto.Data.Data.Impl.Impl.TableFragmentFrame : FrameBase {
    private IColumnSequence[] m_columns;
    private int m_recordOffset;
    private List`1<Object[]> m_fragment;
    [CompilerGeneratedAttribute]
private int <TableId>k__BackingField;
    [CompilerGeneratedAttribute]
private TableFragmentType <FrameSubType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FieldCount>k__BackingField;
    public int TableId { get; private set; }
    public TableFragmentType FrameSubType { get; private set; }
    public int FieldCount { get; private set; }
    public TableFragmentFrame(KdsTabularDataFrame kdsFrame);
    public TableFragmentFrame(int tableId, TableFragmentType action, List`1<Object[]> fragment);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TableId();
    [CompilerGeneratedAttribute]
private void set_TableId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual TableFragmentType get_FrameSubType();
    [CompilerGeneratedAttribute]
private void set_FrameSubType(TableFragmentType value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_FieldCount();
    [CompilerGeneratedAttribute]
private void set_FieldCount(int value);
    public sealed virtual bool GetNextRecord(Object[] values);
    private bool GetValuesFromList(Object[] values);
    private bool GetValuesFromKds(Object[] values);
}
internal class Kusto.Data.Data.Impl.Impl.TableHeaderFrame : FrameBase {
    [CompilerGeneratedAttribute]
private int <TableId>k__BackingField;
    [CompilerGeneratedAttribute]
private WellKnownDataSet <TableKind>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTable <TableSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    public int TableId { get; private set; }
    public WellKnownDataSet TableKind { get; private set; }
    public DataTable TableSchema { get; private set; }
    public string TableName { get; private set; }
    public TableHeaderFrame(KdsTabularHeaderFrame kdsFrame);
    public TableHeaderFrame(int tableId, WellKnownDataSet tableKind, DataTable schemaTable, string tableName);
    [CompilerGeneratedAttribute]
public sealed virtual int get_TableId();
    [CompilerGeneratedAttribute]
private void set_TableId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual WellKnownDataSet get_TableKind();
    [CompilerGeneratedAttribute]
private void set_TableKind(WellKnownDataSet value);
    [CompilerGeneratedAttribute]
public sealed virtual DataTable get_TableSchema();
    [CompilerGeneratedAttribute]
private void set_TableSchema(DataTable value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TableName();
    [CompilerGeneratedAttribute]
private void set_TableName(string value);
}
[DefaultMemberAttribute("Item")]
internal class Kusto.Data.Data.Impl.Impl.TabularResultReader : ResultReader {
    private TupleStructure m_structure;
    private KdsTabularHeaderFrame m_headerFrame;
    private KdsMultiplexedStream m_stream;
    private Queue`1<KdsTabularDataFrame> m_currentData;
    private int m_recordOffset;
    private DataTable m_schemaTable;
    private bool m_convertDynamicColumnToString;
    private bool m_dynamicJValuesLegacySerialization;
    private bool m_mayContainProgressiveFrames;
    public WellKnownDataSet TableKind { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal string TableName { get; }
    public TabularResultReader(int id, TupleStructure structure, KdsTabularHeaderFrame headerFrame, KdsMultiplexedStream stream, bool convertDynamicColumnToString, bool dynamicJValuesLegacySerialization, bool mayContainProgressiveFrames);
    public virtual bool Read();
    public virtual DataTable GetSchemaTable();
    public virtual WellKnownDataSet get_TableKind();
    public virtual int get_FieldCount();
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public virtual IDataReader GetData(int i);
    public virtual string GetDataTypeName(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual Type GetFieldType(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int i);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int i);
    public virtual object get_Item(string name);
    public virtual object get_Item(int i);
    internal string get_TableName();
    private void SetStructureFromHeader();
    private Type GetDataReaderSchemaType(StorageDataType dataType);
    private bool ReadProgressiveImpl();
    private bool ReadImpl();
    private void EnsureFrameIsDataFrame(KdsFrameDecoder frame);
    [CompilerGeneratedAttribute]
private TupleElement <SetStructureFromHeader>b__44_0(int i);
}
internal class Kusto.Data.Data.Impl.Impl.TupleElement : object {
    public string Name;
    public StorageDataType DataType;
    public TupleElement(string name, StorageDataType dataType);
    public bool Match(string name);
}
internal class Kusto.Data.Data.Impl.Impl.TupleStructure : object {
    public string Name;
    public TupleElement[] Elements;
    public TupleStructure(TupleElement[] elements);
    public int FindElementIndex(string tupleName, string attrName);
}
[DefaultMemberAttribute("Item")]
internal class Kusto.Data.Data.Impl.KdsDataReader : object {
    private static Func`4<Byte[], int, int, string> s_dynamicTypeDecoder;
    private static Func`4<Byte[], int, int, string> s_decimalTypeDecoder;
    private KdsMultiplexedStream m_multiplexedStream;
    private KdsStreamHeader m_streamHeader;
    private int m_currentSubstreamId;
    private ResultReader m_currentResultReader;
    private bool m_convertDynamicColumnToString;
    public bool m_dynamicJValuesLegacySerialization;
    public static bool IsAvailable { get; }
    internal static Func`4<Byte[], int, int, string> DynamicDataTypeDecoder { get; }
    internal static Func`4<Byte[], int, int, string> DecimalDataTypeDecoder { get; }
    internal KdsStreamEncoding Encoding { get; }
    internal WellKnownDataSet CurrentTableKind { get; }
    internal WellKnownDataSet CurrentTableKindIfAvailable { get; }
    internal string CurrentTableNameIfAvailable { get; }
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public KdsDataReader(Stream stream, KdsStreamHeader streamHeader, bool leaveOpen, bool convertDynamicColumnToString, bool convertDecimalColumnToString, bool dynamicJValuesLegacySerialization, bool skipUntilPrimaryResultsInV2, ILogger`1<TraceVerbosity> logger);
    public static void Initialize(Func`4<Byte[], int, int, string> dynamicDataTypeDecoder, Func`4<Byte[], int, int, string> decimalDataTypeDecoder);
    public static bool get_IsAvailable();
    internal static Func`4<Byte[], int, int, string> get_DynamicDataTypeDecoder();
    internal static Func`4<Byte[], int, int, string> get_DecimalDataTypeDecoder();
    internal KdsStreamEncoding get_Encoding();
    internal WellKnownDataSet get_CurrentTableKind();
    internal WellKnownDataSet get_CurrentTableKindIfAvailable();
    internal string get_CurrentTableNameIfAvailable();
    public sealed virtual void Close();
    public sealed virtual int get_Depth();
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual bool get_IsClosed();
    public sealed virtual bool NextResult();
    public sealed virtual bool Read();
    public sealed virtual int get_RecordsAffected();
    public sealed virtual void Dispose();
    public sealed virtual int get_FieldCount();
    public sealed virtual bool GetBoolean(int i);
    public sealed virtual byte GetByte(int i);
    public sealed virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public sealed virtual char GetChar(int i);
    public sealed virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public sealed virtual IDataReader GetData(int i);
    public sealed virtual string GetDataTypeName(int i);
    public sealed virtual DateTime GetDateTime(int i);
    public sealed virtual decimal GetDecimal(int i);
    public sealed virtual double GetDouble(int i);
    public sealed virtual Type GetFieldType(int i);
    public sealed virtual float GetFloat(int i);
    public sealed virtual Guid GetGuid(int i);
    public sealed virtual short GetInt16(int i);
    public sealed virtual int GetInt32(int i);
    public sealed virtual long GetInt64(int i);
    public sealed virtual string GetName(int i);
    public sealed virtual int GetOrdinal(string name);
    public sealed virtual string GetString(int i);
    public sealed virtual object GetValue(int i);
    public sealed virtual int GetValues(Object[] values);
    public sealed virtual bool IsDBNull(int i);
    public sealed virtual object get_Item(string name);
    public sealed virtual object get_Item(int i);
    private void EnsureResultReaderEstablished();
    private bool EstablishResultReader();
}
[DefaultMemberAttribute("Item")]
internal class Kusto.Data.Data.Impl.KdsDataReaderWithSuccessVerification : DataReaderBase {
    private KdsDataReader m_reader;
    internal static string s_queryStatusTableName;
    private static string s_queryResourceConsumption;
    private static string s_eventTypeName;
    private static string s_statusCode;
    private static string s_payload;
    private static string s_queryCompletedSuccessfully;
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public KdsDataReaderWithSuccessVerification(KdsDataReader reader);
    private static KdsDataReaderWithSuccessVerification();
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual void Close();
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual void Dispose();
    public virtual int get_FieldCount();
    public virtual IDataReader GetData(int i);
    public virtual Type GetFieldType(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int i);
    public virtual object get_Item(string name);
    public virtual object get_Item(int i);
    private void ConsumeRestOfStream();
    internal static void VerifyQueryCompletionInformationV1(KdsDataReader reader);
    internal static void VerifyQueryCompletionInformationV2(KdsDataReader reader);
}
public class Kusto.Data.Data.Impl.KdsProgressiveFrameEnumerator : object {
    private KdsProgressiveFrameDecoder m_decoder;
    private FrameBase m_frame;
    public ProgressiveDataSetFrame Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public KdsProgressiveFrameEnumerator(Stream stream, string clientRequestId, ITraceSource tracer);
    public sealed virtual ProgressiveDataSetFrame get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public ProgressiveDataSetCompletionFrame Cancel();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
}
public static class Kusto.Data.Data.Impl.KustoDataStream : object {
    public static string EnableKustoDataStreamJitStreamTweakName;
    private static Tweak`1<bool> s_enableKustoDataStreamJitStreamTweak;
    private static ILogger`1<TraceVerbosity> s_logger;
    internal static Byte[] s_kdsStreamHeader_JsonEncoding;
    public static ILogger`1<TraceVerbosity> Logger { get; public set; }
    public static bool IsNativeStreamEncodingAvailable { get; }
    private static KustoDataStream();
    public static void Initialize(Func`4<Byte[], int, int, string> dynamicDataTypeDecoder, Func`4<Byte[], int, int, string> decimalDataTypeDecoder);
    public static IDataReader CreateReader(Stream stream, ClientRequestProperties properties, KustoClientRequestDescriptor requestDescriptor, ILogger`1<TraceVerbosity> logger, bool convertDynamicColumnToString, bool legacySerialization, bool convertDecimalColumnToString);
    public static IDataReader CreateReader(Stream stream, KustoClientRequestDescriptor requestDescriptor, bool convertDynamicColumnToString, bool convertDecimalColumnToString, bool legacySerialization, bool skipFirstTableIfV2, bool leaveOpen, ILogger`1<TraceVerbosity> logger);
    public static IDataReader CreateReaderWithQueryCompletionSuccessVerification(Stream stream, ClientRequestProperties properties, bool convertDecimalColumnToString, bool dynamicJValuesLegacySerialization, bool skipUntilPrimaryResultsInV2, ILogger`1<TraceVerbosity> logger);
    public static void VerifySuccessCompletion(Stream stream, bool leaveOpen);
    public static string ToString(IDataReader reader);
    public static Stream ToStream(IDataReader reader, bool enableJitStream);
    private static Stream ToStream_NonStreaming(IDataReader reader);
    private static Stream ToStream_Streaming(IDataReader reader, int internalBufferSize);
    public static ILogger`1<TraceVerbosity> get_Logger();
    public static void set_Logger(ILogger`1<TraceVerbosity> value);
    public static bool get_IsNativeStreamEncodingAvailable();
    internal static object ParseJsonStringToDynamic(string json);
    internal static object GetDynamicValueBySerializationOptions(object value, bool convertDynamicToString, bool dynamicJValuesLegacySerialization);
    private static Byte[] GetKdsStreamHeaderAsBuffer(KdsStreamEncoding encoding);
}
public static class Kusto.Data.Data.Impl.KustoDataStreamClientRequestPropertiesExtensions : object {
    public static bool SafeConvertDynamicToStrings(ClientRequestProperties properties, bool convertDynamicColumnToStringDefault);
    public static bool SafeSerializeDynamicJValuesLegacy(ClientRequestProperties properties, bool legacySerializationDefault);
}
public class Kusto.Data.Data.Impl.QueryV2Converter : JsonConverter {
    private static JsonSerializer s_serializer;
    private Action`2<PlatformExceptionDetail, JsonWriter> m_oneApiWriter;
    public static string Version;
    public QueryV2Converter(Action`2<PlatformExceptionDetail, JsonWriter> oneApiWriter);
    private static QueryV2Converter();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public void WriteKustoDataStreamAsJson(JsonWriter writer, Stream stream, JsonSerializer serializer, ClientRequestProperties properties);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    private bool NextFrame(State state);
    private void WriteJsonImpl(State state, Stream stream, bool convertDynamicToString, bool dynamicJValuesLegacySerialization);
    private void WriteJsonProgressiveImpl(State state, Stream stream, bool convertDynamicToString, bool dynamicJValuesLegacySerialization);
    private void WriteSetHeader(State state);
    private void WriteSetCompletion(State state);
    private void WriteSchema(State state);
    private void WriteDataGrid(State state, WellKnownDataSet tableKind, bool convertDynamicToString, bool dynamicJValuesLegacySerialization, Action onNewRow);
    private void WriteDataTable(State state, bool convertDynamicToString, bool dynamicJValuesLegacySerialization);
    private void WriteFragmentedTable(State state, bool convertDynamicToString, bool dynamicJValuesLegacySerialization);
    private Exception[] LoopOverDataFrames(State state, Action onTabularData);
    private void WriteErrorFrame(State state, Exception[] exceptions);
    private void WriteException(State state, Exception ex);
    private void WriteExceptions(State state, Exception[] exceptions);
    private void WriteOneApiErrorsProperty(State state, Exception[] exceptions);
    private void WriteTableHeader(State state);
    private void WriteTableFragment(State state, WellKnownDataSet tableKind, bool convertDynamicToString, bool dynamicJValuesLegacySerialization);
    private static void WriteTableFragmentStart(State state);
    private static void WriteTableFragmentEnd(State state, Nullable`1<int> recordCount);
    private void WriteTableCompletion(State state, Nullable`1<int> tableId, Exception[] exceptions);
    private void WriteTableProgress(State state);
}
public class Kusto.Data.Data.Impl.UniversalDataReaderAdapter : object {
    private Stream m_sourceStream;
    private string m_sourceString;
    private IDataReader m_sourceReader;
    private KustoClientRequestDescriptor m_requestDescriptor;
    private ITraceSource m_tracer;
    private Activity m_creationActivity;
    private State modreq(System.Runtime.CompilerServices.IsVolatile) m_state;
    private Action m_onDone;
    public Stream UnderlyingStream { get; }
    public UniversalDataReaderAdapter(Stream stream, KustoClientRequestDescriptor requestDescriptor, ITraceSource tracer);
    public UniversalDataReaderAdapter(string kdsString, KustoClientRequestDescriptor requestDescriptor, ITraceSource tracer);
    public UniversalDataReaderAdapter(IDataReader reader, KustoClientRequestDescriptor requestDescriptor, ITraceSource tracer);
    private UniversalDataReaderAdapter(KustoClientRequestDescriptor requestDescriptor, ITraceSource tracer);
    public void DisposeIfNeeded();
    public Stream get_UnderlyingStream();
    public Stream ToStream(Action onDone, bool enableJitStream);
    public string ToString(Action onDone);
    public IDataReader ToDataReader(Action onDone, bool convertDecimalColumnToString);
    private void OnDone();
    [CompilerGeneratedAttribute]
private void <ToDataReader>b__18_0(object source, DataReaderEventArgs ev);
}
public class Kusto.Data.Data.KustoDataReaderOptions : ValueType {
    public bool DebugDisableStreaming;
    public bool DebugAbortDuringRead;
    public bool EnableBoolColumnType;
    public bool AllowVaryingRowWidths;
    public KustoClientRequestDescriptor RequestDescriptor;
    public static KustoDataReaderOptions CreateFromClientRequestProperties(ClientRequestProperties properties, KustoClientRequestDescriptor requestDescriptor);
}
public static class Kusto.Data.Data.KustoDataReaderParser : object {
    public static KustoResponseDataSet ParseV1(IDataReader reader, ClientRequestProperties clientRequestProperties, KustoDataReaderParserTraits options);
    public static KustoResponseDataSet ParseV2(ProgressiveDataSet dataSet, ClientRequestProperties clientRequestProperties, KustoDataReaderParserTraits options);
    public static KustoResponseDataSet ParseV2(ProgressiveDataSet dataSet, string clientRequestId, KustoDataReaderParserTraits options);
    public static DataTable ApplyParserTraitsToData(DataTable table, KustoDataReaderParserTraits options);
}
[FlagsAttribute]
public enum Kusto.Data.Data.KustoDataReaderParserTraits : Enum {
    public int value__;
    public static KustoDataReaderParserTraits None;
    public static KustoDataReaderParserTraits AllowTemplateFormattingReplacement;
}
public static class Kusto.Data.Data.KustoJsonDataStream : object {
    private static Func`2<string, Exception> s_incompleteDataStreamExceptionFactory;
    private static JsonSerializer s_serializer;
    private static KustoJsonDataStream();
    public static IEnumerator`1<ProgressiveDataSetFrame> CreateProgressiveReader(Stream stream, Encoding encoding, KustoClientRequestDescriptor requestDescriptor, IDumper dumper);
    public static IDataReader CreateReader(TextReader reader, KustoDataReaderOptions options);
    public static IDataReader CreateReader(Stream stream, Encoding encoding, KustoDataReaderOptions options, IDumper dumper, bool leaveDumperOpen);
    public static Stream GetReaderDataAsStream(IDataReader reader, Encoding encoding, int internalBufferSize, IDisposable whenDone);
    public static void WriteReaderDataToStream(IDataReader reader, Stream stream, Encoding encoding, int bufferSize, bool leaveOpen);
    public static void WriteReaderDataToTextWriter(IDataReader reader, TextWriter writer);
    public static IJitStreamSource CreateWriter(IDataReader reader);
    public static IDataReader CreateReaderWriterPairForTest(IDataReader reader, KustoDataReaderOptions options, Action`1<string> processIntermediateStream, bool enableJitStream);
    internal static Exception CreateStreamCorruptionException(string message, JsonTextReader reader);
    internal static Exception CreateStreamCorruptionException(string message, JsonTokenReader tokenReader);
    internal static Exception ParsePartialQueryFailure(JsonTokenReader tokenReader);
}
[DefaultMemberAttribute("Item")]
public interface Kusto.Data.Data.KustoResponseDataSet {
    public string ClientRequestId { get; }
    public KustoResponseDataTable Item { get; }
    public KustoResponseDataTable Item { get; }
    public IEnumerable`1<KustoResponseDataTable> Item { get; }
    public List`1<Facet> Facets { get; }
    public ChartVisualizationOptions ChartVisualization { get; }
    public IEnumerable`1<ChartVisualizationOptions> ChartVisualizations { get; }
    public string Cursor { get; }
    public IEnumerable`1<KustoResponseDataTable> Tables { get; }
    public Tuple`2<string, string> StatusLevelAndMessage { get; }
    public int ErrorCount { get; }
    public abstract virtual string get_ClientRequestId();
    public abstract virtual KustoResponseDataTable get_Item(string tableName);
    public abstract virtual KustoResponseDataTable get_Item(int ordinal);
    public abstract virtual IEnumerable`1<KustoResponseDataTable> get_Item(WellKnownDataSet tableKind);
    public abstract virtual KustoResponseDataTable GetMainResultsOrNull();
    public abstract virtual KustoResponseDataTable GetRenderResultsOrNull();
    public abstract virtual List`1<Facet> get_Facets();
    public abstract virtual ChartVisualizationOptions get_ChartVisualization();
    public abstract virtual IEnumerable`1<ChartVisualizationOptions> get_ChartVisualizations();
    public abstract virtual string get_Cursor();
    public abstract virtual IEnumerable`1<KustoResponseDataTable> get_Tables();
    public abstract virtual Tuple`2<string, string> get_StatusLevelAndMessage();
    public abstract virtual int get_ErrorCount();
    public abstract virtual void AppendCalculatedTable(string tableName, KustoResponseDataTable table);
}
public class Kusto.Data.Data.KustoResponseDataTable : object {
    [CompilerGeneratedAttribute]
private DataTable <TableData>k__BackingField;
    [CompilerGeneratedAttribute]
private WellKnownDataSet <TableKind>k__BackingField;
    [CompilerGeneratedAttribute]
private ChartVisualizationOptions <VisualizationOptions>k__BackingField;
    public DataTable TableData { get; public set; }
    public WellKnownDataSet TableKind { get; public set; }
    public ChartVisualizationOptions VisualizationOptions { get; public set; }
    public KustoResponseDataTable(DataTable tableData, WellKnownDataSet tableKind);
    [CompilerGeneratedAttribute]
public DataTable get_TableData();
    [CompilerGeneratedAttribute]
public void set_TableData(DataTable value);
    [CompilerGeneratedAttribute]
public WellKnownDataSet get_TableKind();
    [CompilerGeneratedAttribute]
public void set_TableKind(WellKnownDataSet value);
    [CompilerGeneratedAttribute]
public ChartVisualizationOptions get_VisualizationOptions();
    [CompilerGeneratedAttribute]
public void set_VisualizationOptions(ChartVisualizationOptions value);
}
public class Kusto.Data.Data.QueryContext : object {
    private string m_connectionString;
    public DateTime StartTimestamp;
    public string ClientActivityId;
    public string Api;
    public string Text;
    public string Username;
    public string ApplicationName;
    public string ApplicationVersion;
    public string ApplicationMode;
    public DateTime StartedOn;
    public DateTime EndedOn;
    public bool Success;
    public int ResultRowCount;
    public string ErrorMessage;
    public Exception Exception;
    public QueryRuntimeOptions QueryRuntimeOptions;
    [JsonIgnoreAttribute]
public int Epoch;
    [JsonIgnoreAttribute]
public bool Cached;
    [JsonIgnoreAttribute]
public DateTime CachedOn;
    [JsonIgnoreAttribute]
public string ClientConnectionContext;
    [JsonIgnoreAttribute]
public string OriginalText;
    [JsonIgnoreAttribute]
public Dictionary`2<int, Tuple`2<string, WellKnownDataSet>> TableIdsToTableNameAndKind;
    [JsonIgnoreAttribute]
public double QueryProgressInPercent;
    [JsonIgnoreAttribute]
public List`1<ChartVisualizationOptions> VisualizationOptions;
    public string ConnectionString { get; public set; }
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public static bool TryParse(string input, QueryContext& result);
    public string AsJsonSecure(Formatting formatting);
}
public class Kusto.Data.Data.QueryDescriptor : object {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryRuntimeOptions <QueryRuntimeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private KustoResponseDataSet <QueryResultsSet>k__BackingField;
    public string ConnectionString { get; private set; }
    public string Query { get; private set; }
    public QueryRuntimeOptions QueryRuntimeOptions { get; private set; }
    public KustoResponseDataSet QueryResultsSet { get; private set; }
    public QueryDescriptor(string context, string query, QueryRuntimeOptions queryRuntimeOptions, KustoResponseDataSet queryResultsSet);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
private void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
private void set_Query(string value);
    [CompilerGeneratedAttribute]
public QueryRuntimeOptions get_QueryRuntimeOptions();
    [CompilerGeneratedAttribute]
private void set_QueryRuntimeOptions(QueryRuntimeOptions value);
    [CompilerGeneratedAttribute]
public KustoResponseDataSet get_QueryResultsSet();
    [CompilerGeneratedAttribute]
private void set_QueryResultsSet(KustoResponseDataSet value);
}
[DefaultMemberAttribute("Item")]
public class Kusto.Data.Data.QueryResultSetV1 : object {
    [JsonIgnoreAttribute]
private Dictionary`2<string, KustoResponseDataTable> m_dataByTableName;
    [JsonIgnoreAttribute]
private Dictionary`2<WellKnownDataSet, List`1<KustoResponseDataTable>> m_dataByTableKind;
    [JsonPropertyAttribute]
private KustoResponseDataTable[] m_data;
    [JsonPropertyAttribute]
private TableOfContents m_toc;
    [CompilerGeneratedAttribute]
private List`1<Facet> <Facets>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ChartVisualizationOptions> <ChartVisualizations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cursor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Tuple`2<string, string> <StatusLevelAndMessage>k__BackingField;
    public List`1<Facet> Facets { get; private set; }
    public ChartVisualizationOptions ChartVisualization { get; }
    public IEnumerable`1<ChartVisualizationOptions> ChartVisualizations { get; private set; }
    public string Cursor { get; private set; }
    public KustoResponseDataTable Item { get; }
    public KustoResponseDataTable Item { get; }
    public IEnumerable`1<KustoResponseDataTable> Item { get; }
    public IEnumerable`1<KustoResponseDataTable> Tables { get; }
    public string ClientRequestId { get; private set; }
    public int ErrorCount { get; private set; }
    public Tuple`2<string, string> StatusLevelAndMessage { get; private set; }
    internal QueryResultSetV1(IDataReader reader, string clientRequestId, KustoDataReaderParserTraits options);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Facet> get_Facets();
    [CompilerGeneratedAttribute]
private void set_Facets(List`1<Facet> value);
    public sealed virtual ChartVisualizationOptions get_ChartVisualization();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ChartVisualizationOptions> get_ChartVisualizations();
    [CompilerGeneratedAttribute]
private void set_ChartVisualizations(IEnumerable`1<ChartVisualizationOptions> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Cursor();
    [CompilerGeneratedAttribute]
private void set_Cursor(string value);
    public sealed virtual KustoResponseDataTable get_Item(string tableName);
    public sealed virtual KustoResponseDataTable get_Item(int ordinal);
    public sealed virtual IEnumerable`1<KustoResponseDataTable> get_Item(WellKnownDataSet tableKind);
    public sealed virtual IEnumerable`1<KustoResponseDataTable> get_Tables();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientRequestId();
    [CompilerGeneratedAttribute]
private void set_ClientRequestId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ErrorCount();
    [CompilerGeneratedAttribute]
private void set_ErrorCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Tuple`2<string, string> get_StatusLevelAndMessage();
    [CompilerGeneratedAttribute]
private void set_StatusLevelAndMessage(Tuple`2<string, string> value);
    public sealed virtual void AppendCalculatedTable(string tableName, KustoResponseDataTable table);
    public static Tuple`3<string, string, int> ParseQueryStatusTable(DataTable table);
    public sealed virtual KustoResponseDataTable GetMainResultsOrNull();
    public sealed virtual KustoResponseDataTable GetRenderResultsOrNull();
    private static List`1<ChartVisualizationOptions> ParseChartVisualizations(DataTable table);
    private static string ParseCursor(DataTable table);
    private string DetermineTableName(TocEntry entry);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext ctx);
    private void InitIndexesAfterDeserialization();
}
[DefaultMemberAttribute("Item")]
public class Kusto.Data.Data.QueryResultSetV2 : object {
    [JsonIgnoreAttribute]
private Dictionary`2<string, int> m_dataByTableNameMap;
    [JsonIgnoreAttribute]
private Dictionary`2<WellKnownDataSet, List`1<int>> m_dataByTableKindMap;
    [JsonPropertyAttribute]
private KustoResponseDataTable[] m_data;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ChartVisualizationOptions> <ChartVisualizations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cursor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Facet> <Facets>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Tuple`2<string, string> <StatusLevelAndMessage>k__BackingField;
    public ChartVisualizationOptions ChartVisualization { get; }
    public IEnumerable`1<ChartVisualizationOptions> ChartVisualizations { get; private set; }
    public string Cursor { get; private set; }
    public string ClientRequestId { get; private set; }
    public KustoResponseDataTable Item { get; }
    public KustoResponseDataTable Item { get; }
    public IEnumerable`1<KustoResponseDataTable> Item { get; }
    public IEnumerable`1<KustoResponseDataTable> Tables { get; }
    public List`1<Facet> Facets { get; private set; }
    public int ErrorCount { get; private set; }
    public Tuple`2<string, string> StatusLevelAndMessage { get; private set; }
    internal QueryResultSetV2(string clientRequestId, ProgressiveDataSet dataSet, KustoDataReaderParserTraits options);
    public sealed virtual ChartVisualizationOptions get_ChartVisualization();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ChartVisualizationOptions> get_ChartVisualizations();
    [CompilerGeneratedAttribute]
private void set_ChartVisualizations(IEnumerable`1<ChartVisualizationOptions> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Cursor();
    [CompilerGeneratedAttribute]
private void set_Cursor(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientRequestId();
    [CompilerGeneratedAttribute]
private void set_ClientRequestId(string value);
    public sealed virtual KustoResponseDataTable get_Item(string tableName);
    public sealed virtual KustoResponseDataTable get_Item(int ordinal);
    public sealed virtual IEnumerable`1<KustoResponseDataTable> get_Item(WellKnownDataSet tableKind);
    public sealed virtual IEnumerable`1<KustoResponseDataTable> get_Tables();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Facet> get_Facets();
    [CompilerGeneratedAttribute]
private void set_Facets(List`1<Facet> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ErrorCount();
    [CompilerGeneratedAttribute]
private void set_ErrorCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Tuple`2<string, string> get_StatusLevelAndMessage();
    [CompilerGeneratedAttribute]
private void set_StatusLevelAndMessage(Tuple`2<string, string> value);
    public sealed virtual void AppendCalculatedTable(string tableName, KustoResponseDataTable table);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext ctx);
    public sealed virtual KustoResponseDataTable GetMainResultsOrNull();
    public sealed virtual KustoResponseDataTable GetRenderResultsOrNull();
    public static List`1<ChartVisualizationOptions> ParseChartVisualizations(DataTable table);
    private static string ParseCursor(DataTable table);
    public static Tuple`3<string, string, int> ParseQueryStatusTable(DataTable table);
    private void Initialize(string clientRequestId, ProgressiveDataSet dataSet, KustoDataReaderParserTraits options);
    private void InitIndexes();
    private Dictionary`2<string, int> InitializeTableByNameMapping(KustoResponseDataTable[] tables);
    [CompilerGeneratedAttribute]
private KustoResponseDataTable <get_Item>b__22_0(int i);
    [CompilerGeneratedAttribute]
private KustoResponseDataTable <InitIndexes>b__47_5(int i);
}
public class Kusto.Data.Data.QueryRuntimeOptions : object {
    private static QueryRuntimeOptions s_defaultOptions;
    [CompilerGeneratedAttribute]
private QueryDataScopeKind <QueryDataScope>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <QueryDataTimeRangeScope>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CustomStartDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CustomEndDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    public static QueryRuntimeOptions Default { get; }
    public QueryDataScopeKind QueryDataScope { get; public set; }
    public Nullable`1<TimeSpan> QueryDataTimeRangeScope { get; public set; }
    public Nullable`1<DateTime> CustomStartDateTime { get; public set; }
    public Nullable`1<DateTime> CustomEndDateTime { get; public set; }
    public string ColumnName { get; public set; }
    private static QueryRuntimeOptions();
    public static QueryRuntimeOptions get_Default();
    [CompilerGeneratedAttribute]
public QueryDataScopeKind get_QueryDataScope();
    [CompilerGeneratedAttribute]
public void set_QueryDataScope(QueryDataScopeKind value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_QueryDataTimeRangeScope();
    [CompilerGeneratedAttribute]
public void set_QueryDataTimeRangeScope(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CustomStartDateTime();
    [CompilerGeneratedAttribute]
public void set_CustomStartDateTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CustomEndDateTime();
    [CompilerGeneratedAttribute]
public void set_CustomEndDateTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public QueryRuntimeOptions Clone();
}
public class Kusto.Data.DatabaseAttachCommandResult : object {
    public string Step;
    public TimeSpan Duration;
}
public class Kusto.Data.DatabaseClearResultsCacheCommandResult : object {
    public string NodeId;
    public int Entries;
}
public class Kusto.Data.DatabaseClearWeakConsistencyCacheResult : object {
    public string NodeId;
    public string Status;
}
public class Kusto.Data.DatabaseContainersUtilizationShowCommandResult : object {
    public Guid ContainerId;
    public string ContainerUri;
    public long NumberOfUnusedBlobs;
    public long TotalSizeOfUnusedBlobs;
}
public class Kusto.Data.DatabaseCreateCommandResult : object {
    public string DatabaseName;
    public string PersistentPath;
    public bool Created;
    public bool StoresMetadata;
    public bool StoresData;
}
public class Kusto.Data.DatabaseDetachCommandPartialSuccessResult : object {
    public string Result;
}
public class Kusto.Data.DatabaseDetachCommandResult : object {
    public string TableName;
    public int RemovedExtentsCount;
}
public class Kusto.Data.DatabaseExtentsPartitioningStatisticsShowCommandResult : object {
    public string TableName;
    public JObject PartitioningPolicy;
    public long TotalRowCount;
    public long PartitionedRowCount;
    public double PartitionedRowsPercentage;
}
public class Kusto.Data.DatabaseExtentTagsStatisticsCommandResult : object {
    public string TableName;
    public long TotalExtentsCount;
    public long TaggedExtentsCount;
    public long TotalTagsCount;
    public long TotalTagsLength;
    public long DropByTagsCount;
    public long DropByTagsLength;
    public long IngestByTagsCount;
    public long IngestByTagsLength;
}
public class Kusto.Data.DatabaseFollowerInvitationCreateCmCommandResult : object {
    public string GeneratedInvitation;
}
public class Kusto.Data.DatabaseFollowerInvitationValidateCmCommandResult : object {
    public bool IsValidInvitation;
    public string ResourceId;
    public string InviteeEmail;
    public string ClusterUrl;
    public string DatabaseName;
    public string TenantId;
    public string Region;
    public string ErrorCode;
    public string ErrorMessage;
    public string CustomErrorCode;
    public string ErrorParams;
    public string LeaderDatabaseDetails;
}
public class Kusto.Data.DatabaseHardRetentionPolicyViolationsShowCommandResult : object {
    public Guid ExtentContainerId;
    public string Url;
    public string State;
    public DateTime CreatedOn;
    public DateTime MaxDateTime;
    public TimeSpan HardDeletePeriod;
}
public class Kusto.Data.DatabaseKeyVaultSecretsReplaceCommandResult : object {
    public string Details;
}
public class Kusto.Data.DatabaseKeyVaultSecretsShowCommandResult : object {
    public string KeyVaultSecretId;
}
public class Kusto.Data.DatabaseMetadataContainerAlterCommandResult : object {
    public string DatabaseName;
    public string OldMetadataPath;
    public string NewMetadataPath;
    public string Status;
}
public class Kusto.Data.DatabaseMetadataExportCommandResult : object {
    public string DatabaseName;
    public string DatabaseVersion;
    public Guid DatabaseId;
    public string PersistentStorage;
}
public class Kusto.Data.DatabaseRemoteSchemaClearCacheCommandResult : object {
    public string NodeId;
    public string Status;
}
public class Kusto.Data.DatabaseSchemaShowAsCslScriptCommandResult : object {
    public string DatabaseSchemaScript;
}
public class Kusto.Data.DatabaseSchemaShowAsJsonCommandResult : object {
    public string DatabaseSchema;
}
public class Kusto.Data.DatabaseScriptShowCommandResult : object {
    public string DatabaseName;
    public string ScriptName;
    public string ScriptUrl;
    public string ForceToUpdateTag;
    public bool ContinueOnErrors;
    public string SystemData;
    public bool IsClusterLevelScript;
    public bool RemovePrincipalsOnScriptCompletion;
}
public class Kusto.Data.DatabasesEntitiesDependenciesShowCommandResult : object {
    public string DatabaseName;
    public string EntityType;
    public string EntityName;
    public string DocString;
    public string Folder;
    public string CslInputSchema;
    public string Content;
    public string CslOutputSchema;
    public JObject Properties;
    public JArray Dependencies;
}
public class Kusto.Data.DatabasesEntitiesShowCommandResult : object {
    public string DatabaseName;
    public string EntityType;
    public string EntityName;
    public string DocString;
    public string Folder;
    public string CslInputSchema;
    public string Content;
    public string CslOutputSchema;
    public JObject Properties;
}
public class Kusto.Data.DatabaseSetAccessModeCommandResult : object {
    public string DatabaseName;
    public string RequestedAccessMode;
    public string Status;
}
public class Kusto.Data.DatabaseSetPrettyNameCommandResult : object {
    public string DatabaseName;
    public string PrettyName;
    public string Status;
}
public class Kusto.Data.DatabasesExtentContainersCleanCommandResult : object {
    public Guid OperationId;
    public DateTime LastUpdatedOn;
    public string Database;
    public int DatabaseMajorVersion;
    public int DatabaseMinorVersion;
    public Guid DatabaseId;
    public string State;
}
public class Kusto.Data.DatabasesExtentContainersShowStorageAccountsCommandResult : object {
    public string Url;
}
public class Kusto.Data.DatabaseShardGroupStatisticsShowCommandResult : object {
    public string DatabaseName;
    public long TableCount;
    public long ShardGroupCount;
    public long ShardCount;
    public long RowCount;
    public long OriginalSize;
    public long ShardSize;
    public long CompressedSize;
    public long IndexSize;
    public long DeletedRowCount;
    public long PartitionedRowCount;
}
public class Kusto.Data.DatabasesManagementGroupsShowCommandResult : object {
    public string DatabaseName;
    public string ManagementGroup;
    public string DatabaseAccessMode;
    public bool IsVolatile;
    public string DatabasePrettyName;
}
public class Kusto.Data.DatabaseSoftRetentionPolicyViolationsShowCommandResult : object {
    public string Table;
    public Guid Extent;
    public DateTime MinDateTime;
    public DateTime ExpectedOldestExtent;
}
[DataContractAttribute]
public class Kusto.Data.DatabasesShowActiveCommandResult : object {
    [DataMemberAttribute]
public string ClusterAlias;
    [DataMemberAttribute]
public string DatabaseName;
    [DataMemberAttribute]
public string DatabasePrettyName;
    [DataMemberAttribute]
public DateTime LastActiveOn;
}
public class Kusto.Data.DatabasesShowCommandResult : object {
    public string DatabaseName;
    public string PersistentStorage;
    public string Version;
    public bool IsCurrent;
    public string DatabaseAccessMode;
    public string PrettyName;
    public bool CurrentUserIsUnrestrictedViewer;
    public Guid DatabaseId;
    public string InTransitionTo;
}
public class Kusto.Data.DatabasesShowDataStatsCommandResult : object {
    public string DatabaseName;
    public string PersistentStorage;
    public string Version;
    public bool IsCurrent;
    public string DatabaseAccessMode;
    public string PrettyName;
    public Guid DatabaseId;
    public double OriginalSize;
    public double ExtentSize;
    public double CompressedSize;
    public double IndexSize;
    public long RowCount;
    public double HotOriginalSize;
    public double HotExtentSize;
    public double HotCompressedSize;
    public double HotIndexSize;
    public long HotRowCount;
    public long TotalExtents;
    public long HotExtents;
}
public class Kusto.Data.DatabasesShowDefaultCommandResult : object {
    public string DatabaseName;
    public string PersistentStorage;
    public string Version;
    public bool IsCurrent;
    public string DatabaseAccessMode;
    public string PrettyName;
    public bool ReservedSlot1;
    public Guid DatabaseId;
    public string InTransitionTo;
    public string SuspensionState;
}
[DataContractAttribute]
public class Kusto.Data.DatabasesShowEncryptionCertificateThumbprintCommandResult : object {
    public string DatabaseName;
    public string DatabaseAccessMode;
    public string EncryptionCertificateThumbprint;
}
public class Kusto.Data.DatabasesShowMetadataCommandResult : object {
    public string DatabaseName;
    public string Version;
    public string PersistentStoragePointer;
    public string MetadataPersistentStorage;
    public string DatabaseAccessMode;
}
public class Kusto.Data.DatabasesShowPoliciesCommandResult : object {
    public string DatabaseName;
    public string PersistentStorage;
    public string Version;
    public bool IsCurrent;
    public string DatabaseAccessMode;
    public string PrettyName;
    public Guid DatabaseId;
    public string AuthorizedPrincipals;
    public string RetentionPolicy;
    public string MergePolicy;
    public string CachingPolicy;
    public string ShardingPolicy;
    public string StreamingIngestionPolicy;
    public string IngestionBatchingPolicy;
}
public class Kusto.Data.DatabasesShowVerboseCommandResult : object {
    public string DatabaseName;
    public string PersistentStorage;
    public string Version;
    public bool IsCurrent;
    public string DatabaseAccessMode;
    public string PrettyName;
    public string AuthorizedPrincipals;
    public string RetentionPolicy;
    public string MergePolicy;
    public string ReservedSlot1;
    public string CachingPolicy;
    public string ShardingPolicy;
    public string StreamingIngestionPolicy;
    public string IngestionBatchingPolicy;
    public double TotalSize;
    public Guid DatabaseId;
    public string InTransitionTo;
    public int NumberOfTables;
    public int NumberOfExternalTables;
    public int NumberOfMaterializedViews;
    public string EncryptionScope;
    public string SuspensionState;
}
[DataContractAttribute]
public class Kusto.Data.DatabaseSuspensionState : object {
    [JsonPropertyAttribute("CMKSuspensionStart")]
[DataMemberAttribute]
private DateTime m_cMKSuspensionStart;
    [JsonIgnoreAttribute]
public DateTime CMKSuspensionStart { get; }
    public DatabaseSuspensionState(DateTime cMKSuspensionStart);
    public DatabaseSuspensionState(DatabaseSuspensionState other);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public DatabaseSuspensionState NewSetCMKSuspensionStart(DateTime cMKSuspensionStart);
    public DateTime get_CMKSuspensionStart();
    public sealed virtual bool Equals(DatabaseSuspensionState other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Kusto.Data.DatabaseTableMirroringPolicyTemplatesShowCommandResult : object {
    public string Name;
    public bool IsDefault;
    public JObject Policy;
}
public class Kusto.Data.DataClassificationCommandResult : object {
    public string DatabaseName;
    public string TableName;
    public string ColumnName;
    public string EncodingPolicyProfile;
}
public class Kusto.Data.DataConnectionValidationCommandResult : object {
    public string ValidationError;
}
public class Kusto.Data.DataExportToBlobCommandResult : object {
    public string Path;
    public long NumRecords;
    public long SizeInBytes;
}
public class Kusto.Data.DataExportToExternalTableCommandResult : object {
    public string ExternalTableName;
    public string Path;
    public long NumRecords;
    public long SizeInBytes;
}
public class Kusto.Data.DataExportToMdmCommandResult : object {
    public int NumRecords;
}
public class Kusto.Data.DataExportToSqlCommandResult : object {
    public long Rows;
}
public class Kusto.Data.DataIngestCommandResult : object {
    public Guid ExtentId;
    public double OriginalSize;
    public double ExtentSize;
    public double CompressedSize;
    public double IndexSize;
    public long RowCount;
}
public class Kusto.Data.DataIngestPullCommandResult : object {
    public Guid ExtentId;
    public string ItemLoaded;
    public TimeSpan Duration;
    public bool HasErrors;
    public Guid OperationId;
}
public class Kusto.Data.DataOperationsShowCommandResult : object {
    public DateTime Timestamp;
    public string Database;
    public string Table;
    public string ClientActivityId;
    public string OperationKind;
    public long OriginalSize;
    public long ExtentSize;
    public long RowCount;
    public int ExtentCount;
    public TimeSpan Duration;
    public TimeSpan TotalCpu;
    public string Principal;
    public string Properties;
}
public class Kusto.Data.DataProvider.PolicyUtils : object {
    public static bool ValidateCondition(bool condition, string msg, String& error);
}
[DataContractAttribute]
public class Kusto.Data.DataRetentionPolicy : object {
    public static DataRetentionPolicy Default;
    public static DataRetentionPolicy Zero;
    [JsonPropertyAttribute("SoftDeletePeriod")]
[DataMemberAttribute]
private TimeSpan m_softDeletePeriod;
    [JsonPropertyAttribute("Recoverability")]
[DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
private DataRecoverability m_recoverability;
    [JsonIgnoreAttribute]
public TimeSpan SoftDeletePeriod { get; }
    [JsonIgnoreAttribute]
public DataRecoverability Recoverability { get; }
    public DataRetentionPolicy(TimeSpan softDeletePeriod);
    public DataRetentionPolicy(TimeSpan softDeletePeriod, DataRecoverability recoverability);
    public DataRetentionPolicy(DataRetentionPolicy other);
    private static DataRetentionPolicy();
    public static DataRetentionPolicy FromDataRetentionPolicyPersistency(DataRetentionPolicyPersistency policyPersistency);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public DataRetentionPolicy NewSetSoftDeletePeriod(TimeSpan softDeletePeriod);
    public DataRetentionPolicy NewSetRecoverability(DataRecoverability recoverability);
    public TimeSpan get_SoftDeletePeriod();
    public DataRecoverability get_Recoverability();
}
public class Kusto.Data.DataRetentionPolicyConverter : JsonConverter {
    private static DataRetentionPolicyConverter s_instance;
    public static DataRetentionPolicyConverter Instance { get; }
    public bool CanWrite { get; }
    public bool CanRead { get; }
    private static DataRetentionPolicyConverter();
    public static DataRetentionPolicyConverter get_Instance();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[DataContractAttribute]
public class Kusto.Data.DataRetentionPolicyPersistency : object {
    public static TimeSpan s_longRecoverabilityPeriod;
    public static TimeSpan s_shortRecoverabilityPeriod;
    private static TimeSpan s_defaultSoftDeletePeriod;
    private static TimeSpan s_defaultContainerRecyclingPeriod;
    private static TimeSpan s_minimumContainerRecyclingPeriod;
    private static long c_defaultExtentsDataSizeLimitInBytes;
    private static long c_defaultOriginalDataSizeLimitInBytes;
    public static DataRetentionPolicyPersistency Default;
    public static DataRetentionPolicyPersistency Zero;
    [JsonPropertyAttribute("SoftDeletePeriod")]
[DataMemberAttribute]
private TimeSpan m_softDeletePeriod;
    [JsonPropertyAttribute("HardDeletePeriod")]
[DataMemberAttribute]
private TimeSpan m_hardDeletePeriod;
    [JsonPropertyAttribute("ContainerRecyclingPeriod")]
[DataMemberAttribute]
private TimeSpan m_containerRecyclingPeriod;
    [JsonPropertyAttribute("ExtentsDataSizeLimitInBytes")]
[DataMemberAttribute]
private long m_extentsDataSizeLimitInBytes;
    [JsonPropertyAttribute("OriginalDataSizeLimitInBytes")]
[DataMemberAttribute]
private long m_originalDataSizeLimitInBytes;
    [JsonPropertyAttribute("Recoverability")]
[DataMemberAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
private DataRecoverability m_recoverability;
    [JsonIgnoreAttribute]
public bool IsZero { get; }
    [JsonIgnoreAttribute]
public TimeSpan SoftDeletePeriod { get; }
    [JsonIgnoreAttribute]
public TimeSpan HardDeletePeriod { get; }
    [JsonIgnoreAttribute]
public TimeSpan ContainerRecyclingPeriod { get; }
    [JsonIgnoreAttribute]
public long ExtentsDataSizeLimitInBytes { get; }
    [JsonIgnoreAttribute]
public long OriginalDataSizeLimitInBytes { get; }
    [JsonIgnoreAttribute]
public DataRecoverability Recoverability { get; }
    public DataRetentionPolicyPersistency(TimeSpan softDeletePeriod, DataRecoverability recoverability);
    public DataRetentionPolicyPersistency(TimeSpan softDeletePeriod);
    public DataRetentionPolicyPersistency(TimeSpan softDeletePeriod, TimeSpan hardDeletePeriod, TimeSpan containerRecyclingPeriod, long extentsDataSizeLimitInBytes, long originalDataSizeLimitInBytes, DataRecoverability recoverability);
    public DataRetentionPolicyPersistency(DataRetentionPolicyPersistency other);
    private static DataRetentionPolicyPersistency();
    public bool get_IsZero();
    private void InitDefaultValues(TimeSpan softDeletePeriod);
    private void InitInternalDefaultValues();
    public bool IsValid(bool isTableLevelPolicy, String& errorMsg);
    public DataRetentionPolicyPersistency Merge(string partialPolicyJson);
    public static DataRetentionPolicyPersistency GetEffectiveDataRetentionPolicyForTable(DataRetentionPolicyPersistency databaseRetentionPolicy, DataRetentionPolicyPersistency tableRetentionPolicy);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual object Clone();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public DataRetentionPolicyPersistency NewSetSoftDeletePeriod(TimeSpan softDeletePeriod);
    public DataRetentionPolicyPersistency NewSetHardDeletePeriod(TimeSpan hardDeletePeriod);
    public DataRetentionPolicyPersistency NewSetContainerRecyclingPeriod(TimeSpan containerRecyclingPeriod);
    public DataRetentionPolicyPersistency NewSetExtentsDataSizeLimitInBytes(long extentsDataSizeLimitInBytes);
    public DataRetentionPolicyPersistency NewSetOriginalDataSizeLimitInBytes(long originalDataSizeLimitInBytes);
    public DataRetentionPolicyPersistency NewSetRecoverability(DataRecoverability recoverability);
    public TimeSpan get_SoftDeletePeriod();
    public TimeSpan get_HardDeletePeriod();
    public TimeSpan get_ContainerRecyclingPeriod();
    public long get_ExtentsDataSizeLimitInBytes();
    public long get_OriginalDataSizeLimitInBytes();
    public DataRecoverability get_Recoverability();
}
[DataContractAttribute]
public class Kusto.Data.DataShardingPolicy : object {
    private static int c_defaultMaxExtentSizeInMb;
    private static int c_defaultMaxOriginalSizeInMb;
    private static int c_defaultMaxRowCount;
    private static bool c_defaultUseShardEngine;
    private static int c_shardEngineDefaultMaxExtentSizeInMb;
    private static int c_shardEngineDefaultMaxOriginalSizeInMb;
    private static int c_shardEngineDefaultMaxRowCount;
    public static DataShardingPolicy Default;
    [JsonPropertyAttribute("MaxRowCount")]
[DataMemberAttribute]
private long m_maxRowCount;
    [JsonPropertyAttribute("MaxExtentSizeInMb")]
[DataMemberAttribute]
private long m_maxExtentSizeInMb;
    [JsonPropertyAttribute("MaxOriginalSizeInMb")]
[DataMemberAttribute]
private long m_maxOriginalSizeInMb;
    [JsonPropertyAttribute("UseShardEngine")]
[DataMemberAttribute]
[DefaultValueAttribute("True")]
private bool m_useShardEngine;
    [JsonPropertyAttribute("ShardEngineMaxRowCount")]
[DataMemberAttribute]
private long m_shardEngineMaxRowCount;
    [JsonPropertyAttribute("ShardEngineMaxExtentSizeInMb")]
[DataMemberAttribute]
private long m_shardEngineMaxExtentSizeInMb;
    [JsonPropertyAttribute("ShardEngineMaxOriginalSizeInMb")]
[DataMemberAttribute]
private long m_shardEngineMaxOriginalSizeInMb;
    [JsonIgnoreAttribute]
public long MaxRowCount { get; }
    [JsonIgnoreAttribute]
public long MaxExtentSizeInMb { get; }
    [JsonIgnoreAttribute]
public long MaxOriginalSizeInMb { get; }
    [JsonIgnoreAttribute]
public bool UseShardEngine { get; }
    [JsonIgnoreAttribute]
public long ShardEngineMaxRowCount { get; }
    [JsonIgnoreAttribute]
public long ShardEngineMaxExtentSizeInMb { get; }
    [JsonIgnoreAttribute]
public long ShardEngineMaxOriginalSizeInMb { get; }
    public DataShardingPolicy(long maxRowCount, long maxExtentSizeInMb, long maxOriginalSizeInMb, bool useShardEngine, long shardEngineMaxRowCount, long shardEngineMaxExtentSizeInMb, long shardEngineMaxOriginalSizeInMb);
    public DataShardingPolicy(DataShardingPolicy other);
    private static DataShardingPolicy();
    public DataShardingPolicy Merge(string partialPolicyJson);
    public bool IsValid(String& errorMessage);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DataShardingPolicy other);
    public virtual string ToString();
    public sealed virtual object Clone();
    public long GetMaxRowCount(Nullable`1<bool> useShardEngine);
    public long GetMaxExtentSizeInMb(Nullable`1<bool> useShardEngine);
    public long GetMaxOriginalSizeInMb(Nullable`1<bool> useShardEngine);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public DataShardingPolicy NewSetMaxRowCount(long maxRowCount);
    public DataShardingPolicy NewSetMaxExtentSizeInMb(long maxExtentSizeInMb);
    public DataShardingPolicy NewSetMaxOriginalSizeInMb(long maxOriginalSizeInMb);
    public DataShardingPolicy NewSetUseShardEngine(bool useShardEngine);
    public DataShardingPolicy NewSetShardEngineMaxRowCount(long shardEngineMaxRowCount);
    public DataShardingPolicy NewSetShardEngineMaxExtentSizeInMb(long shardEngineMaxExtentSizeInMb);
    public DataShardingPolicy NewSetShardEngineMaxOriginalSizeInMb(long shardEngineMaxOriginalSizeInMb);
    public long get_MaxRowCount();
    public long get_MaxExtentSizeInMb();
    public long get_MaxOriginalSizeInMb();
    public bool get_UseShardEngine();
    public long get_ShardEngineMaxRowCount();
    public long get_ShardEngineMaxExtentSizeInMb();
    public long get_ShardEngineMaxOriginalSizeInMb();
}
[DataContractAttribute]
public class Kusto.Data.DataUpdatePolicy : object {
    [JsonPropertyAttribute("IsEnabled")]
[DataMemberAttribute]
private bool m_isEnabled;
    [JsonPropertyAttribute("Source")]
[DataMemberAttribute]
private string m_source;
    [JsonPropertyAttribute("Query")]
[DataMemberAttribute]
private string m_query;
    [JsonPropertyAttribute("IsTransactional")]
[DataMemberAttribute]
private bool m_isTransactional;
    [JsonPropertyAttribute("PropagateIngestionProperties")]
[DataMemberAttribute]
private bool m_propagateIngestionProperties;
    [JsonPropertyAttribute("ManagedIdentity")]
[DataMemberAttribute]
private string m_managedIdentity;
    [JsonIgnoreAttribute]
public bool IsEnabled { get; }
    [JsonIgnoreAttribute]
public string Source { get; }
    [JsonIgnoreAttribute]
public string Query { get; }
    [JsonIgnoreAttribute]
public bool IsTransactional { get; }
    [JsonIgnoreAttribute]
public bool PropagateIngestionProperties { get; }
    [JsonIgnoreAttribute]
public string ManagedIdentity { get; }
    public DataUpdatePolicy(bool isEnabled, string source, string query, bool isTransactional, bool propagateIngestionProperties);
    public DataUpdatePolicy(bool isEnabled, string source, string query, bool isTransactional, bool propagateIngestionProperties, string managedIdentity);
    public DataUpdatePolicy(DataUpdatePolicy other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public DataUpdatePolicy NewSetIsEnabled(bool isEnabled);
    public DataUpdatePolicy NewSetSource(string source);
    public DataUpdatePolicy NewSetQuery(string query);
    public DataUpdatePolicy NewSetIsTransactional(bool isTransactional);
    public DataUpdatePolicy NewSetPropagateIngestionProperties(bool propagateIngestionProperties);
    public DataUpdatePolicy NewSetManagedIdentity(string managedIdentity);
    public bool get_IsEnabled();
    public string get_Source();
    public string get_Query();
    public bool get_IsTransactional();
    public bool get_PropagateIngestionProperties();
    public string get_ManagedIdentity();
}
public class Kusto.Data.DataWarmingCommandResult : object {
    public string EntityName;
    public string Query;
    public DateTime StartedOn;
    public TimeSpan Duration;
    public string State;
    public string Status;
    public string DatabaseName;
    public string RootActivityId;
}
[DataContractAttribute]
public class Kusto.Data.DiagnosticsPolicy : object {
    [CompilerGeneratedAttribute]
private static DiagnosticsPolicy <Default>k__BackingField;
    [JsonPropertyAttribute("EnableQueryDiagnostics")]
[DataMemberAttribute]
private Nullable`1<bool> m_enableQueryDiagnostics;
    [JsonPropertyAttribute("EnableCommandDiagnostics")]
[DataMemberAttribute]
private Nullable`1<bool> m_enableCommandDiagnostics;
    [JsonPropertyAttribute("EnableTableUsageStatistics")]
[DataMemberAttribute]
private Nullable`1<bool> m_enableTableUsageStatistics;
    [JsonPropertyAttribute("EnableJournalDiagnostics")]
[DataMemberAttribute]
private Nullable`1<bool> m_enableJournalDiagnostics;
    [JsonPropertyAttribute("EnableDataOperationDiagnostics")]
[DataMemberAttribute]
private Nullable`1<bool> m_enableDataOperationDiagnostics;
    public static DiagnosticsPolicy Default { get; }
    [JsonIgnoreAttribute]
public Nullable`1<bool> EnableQueryDiagnostics { get; }
    [JsonIgnoreAttribute]
public Nullable`1<bool> EnableCommandDiagnostics { get; }
    [JsonIgnoreAttribute]
public Nullable`1<bool> EnableTableUsageStatistics { get; }
    [JsonIgnoreAttribute]
public Nullable`1<bool> EnableJournalDiagnostics { get; }
    [JsonIgnoreAttribute]
public Nullable`1<bool> EnableDataOperationDiagnostics { get; }
    public DiagnosticsPolicy(Nullable`1<bool> enableQueryDiagnostics, Nullable`1<bool> enableCommandDiagnostics, Nullable`1<bool> enableTableUsageStatistics, Nullable`1<bool> enableJournalDiagnostics, Nullable`1<bool> enableDataOperationDiagnostics);
    public DiagnosticsPolicy(DiagnosticsPolicy other);
    private static DiagnosticsPolicy();
    [CompilerGeneratedAttribute]
public static DiagnosticsPolicy get_Default();
    public DiagnosticsPolicy Merge(string partialPolicyJson);
    public bool IsValid(String& errorMsg);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public DiagnosticsPolicy NewSetEnableQueryDiagnostics(Nullable`1<bool> enableQueryDiagnostics);
    public DiagnosticsPolicy NewSetEnableCommandDiagnostics(Nullable`1<bool> enableCommandDiagnostics);
    public DiagnosticsPolicy NewSetEnableTableUsageStatistics(Nullable`1<bool> enableTableUsageStatistics);
    public DiagnosticsPolicy NewSetEnableJournalDiagnostics(Nullable`1<bool> enableJournalDiagnostics);
    public DiagnosticsPolicy NewSetEnableDataOperationDiagnostics(Nullable`1<bool> enableDataOperationDiagnostics);
    public Nullable`1<bool> get_EnableQueryDiagnostics();
    public Nullable`1<bool> get_EnableCommandDiagnostics();
    public Nullable`1<bool> get_EnableTableUsageStatistics();
    public Nullable`1<bool> get_EnableJournalDiagnostics();
    public Nullable`1<bool> get_EnableDataOperationDiagnostics();
    public sealed virtual bool Equals(DiagnosticsPolicy other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Kusto.Data.DiagnosticsShowBridgeCommandResult : object {
    public bool IsHealthy;
    public string BuildVersion;
    public DateTime BuildTime;
    public string NotHealthyReason;
    public bool IsAttentionRequired;
    public string AttentionRequiredReason;
    public string ProductVersion;
    public string EnvironmentDescription;
}
public class Kusto.Data.DiagnosticsShowCmCommandResult : object {
    public bool IsHealthy;
    public string AttentionRequiredReason;
    public int TotalAccounts;
    public int TotalServices;
    public string AdminNode;
    public DateTime AdminStartTime;
    public DateTime AdminLastElectedOn;
    public int PendingDistributedOperations;
    public int Reserved;
    public int DeploymentOperationsInProgress;
    public double DeploymentOperationsSuccessRate;
    public int FailedDeploymentOperations;
    public int CloudServiceMaintenanceOperationsInProgress;
    public double CloudServiceMaintenanceOperationsSuccessRate;
    public int FailedCloudServiceMaintenanceOperations;
    public int ClusterMetadataOperationsInProgress;
    public double ClusterMetadataOperationsSuccessRate;
    public int FailedClusterMetadataOperations;
    public string ProductVersion;
    public string BuildVersion;
    public DateTime BuildTime;
    public double GDPROperationsSuccessRate;
    public int FailedCustomerOperations;
    public double CustomerOperationsSuccessRate;
    public int UnallocatedSubscriptionsCount;
    public int Reserved0;
    public int OrchestrationMaxQueueLength;
    public TimeSpan OrchestrationMaxQueueLatency;
    public string OrchestrationPerformanceHeartbeats;
}
public class Kusto.Data.DiagnosticsShowCommandResult : object {
    public bool IsHealthy;
    public string EnvironmentDescription;
    public bool IsScaleOutRequired;
    public int MachinesTotal;
    public int MachinesOffline;
    public DateTime NodeLastRestartedOn;
    public DateTime AdminLastElectedOn;
    public double TotalHotExtentSize;
    public int ExtentsTotal;
    public int DiskColdAllocationPercentage;
    public int InstancesTargetBasedOnDataCapacity;
    public double TotalOriginalDataSize;
    public double TotalExtentSize;
    public double IngestionsLoadFactor;
    public long IngestionsInProgress;
    public double IngestionsSuccessRate;
    public long MergesInProgress;
    public string BuildVersion;
    public DateTime BuildTime;
    public double ClusterDataCapacityFactor;
    public bool IsDataWarmingRequired;
    public string ReservedSlot1;
    public DateTime DataWarmingLastRunOn;
    public double MergesSuccessRate;
    public string NotHealthyReason;
    public bool IsAttentionRequired;
    public string AttentionRequiredReason;
    public string ProductVersion;
    public int FailedIngestOperations;
    public int FailedMergeOperations;
    public int MaxExtentsInSingleTable;
    public string TableWithMaxExtents;
    public double ReservedSlot2;
    public int NumberOfDatabases;
    public double PurgeExtentsRebuildLoadFactor;
    public long PurgeExtentsRebuildInProgress;
    public long PurgesInProgress;
    public TimeSpan ReservedSlot3;
    public string ReservedSlot4;
    public double RowStoreLocalStorageCapacityFactor;
    public double ExportsLoadFactor;
    public long ExportsInProgress;
    public long PendingContinuousExports;
    public long MaxContinuousExportLatenessMinutes;
    public long RowStoreSealsInProgress;
    public bool IsRowStoreUnhealthy;
    public int MachinesSuspended;
    public double DataPartitioningLoadFactor;
    public long DataPartitioningOperationsInProgress;
    public double MinPartitioningPercentageInSingleTable;
    public string TableWithMinPartitioningPercentage;
    public double ReservedSlot5;
    public double V3DataCapacityFactor;
    public int ReservedSlot6;
    public int ReservedSlot7;
    public long MaterializedViewsInProgress;
    public double MaterializedViewsLoadFactor;
    public double IngestionCapacityUtilization;
    public string ShardsWarmingStatus;
    public double ShardsWarmingTemperature;
    public string ShardsWarmingDetails;
    public long StoredQueryResultsInProgress;
    public double HotDataDiskSpaceUsage;
    public bool TransientRowStoreCommunicationFailures;
    public long PendingMirroringPolicyJobs;
    public long MaxMirroringPolicyJobsLatenessMinutes;
    public double MirroringOperationsLoadFactor;
    public long MirroringOperationsInProgress;
    public double QueryAccelerationOperationsLoadFactor;
    public long QueryAccelerationOperationsInProgress;
}
public class Kusto.Data.DiagnosticsShowDMCommandResult : object {
    public bool IsHealthy;
    public string BuildVersion;
    public DateTime BuildTime;
    public string NotHealthyReason;
    public bool IsAttentionRequired;
    public string AttentionRequiredReason;
    public string ProductVersion;
    public string IngestionQueuesLengths;
    public TimeSpan MaxOldestMessageAge;
    public int InputQueueLength;
    public double InputQueueOldestMessageAge;
    public bool InputQueueIsLagging;
    public int InternalQueueLength;
    public double InternalQueueOldestMessageAge;
    public bool InternalQueueIsLagging;
    public int ReadyForAggregationQueueLength;
    public double ReadyForAggregationQueueOldestMessageAge;
    public bool ReadyForAggregationQueueIsLagging;
    public int SecuredReadyForAggregationQueueLength;
    public double SecuredReadyForAggregationQueueOldestMessageAge;
    public bool SecuredReadyForAggregationQueueIsLagging;
    public int AggregatedReadyForImportQueueLength;
    public double AggregatedReadyForImportQueueOldestMessageAge;
    public bool AggregatedReadyForImportQueueIsLagging;
    public int MachinesTotal;
    public int MachinesOffline;
    public bool HasMinimalInstancesPerServiceType;
    public string EnvironmentDescription;
    public int MachinesResponding;
}
public class Kusto.Data.DmClusterSettingsCommandResult : object {
    public string SettingsVersion;
    public string Settings;
}
public class Kusto.Data.DmClusterShowCommandResult : object {
    public string NodeId;
    public string Address;
    public string Name;
    public DateTime StartTime;
    public bool IsAdmin;
    public bool IsImporter;
    public bool IsAggregator;
    public bool IsObtainer;
    public long MachineTotalMemory;
    public long MachineAvailableMemory;
    public int ProcessorCount;
    public string EnvironmentDescription;
    public string ProductVersion;
    public string RuntimeDescription;
}
public class Kusto.Data.DmServiceDataConnectionSuspendResumeCommandResult : object {
    public string ServiceName;
    public string DataConnectionName;
    public bool Enabled;
}
public enum Kusto.Data.DmSettingsType : Enum {
    public int value__;
    public static DmSettingsType AdminSettings;
    public static DmSettingsType DataObtainerServiceSettings;
    public static DmSettingsType DataAggregatorSettings;
    public static DmSettingsType DataObtainerSettings;
    public static DmSettingsType CloudManagersSettings;
    public static DmSettingsType SchemaManagmentSettings;
    public static DmSettingsType CommonSettings;
    public static DmSettingsType DataImporterSettings;
    public static DmSettingsType StatusReporterSettings;
    public static DmSettingsType All;
    public static DmSettingsType VirtualDmsSettings;
}
public class Kusto.Data.DmTempStorageCreateCommandResult : object {
    public string StorageRoot;
    public bool RemoteStorage;
}
public class Kusto.Data.DropPubSubStorageAccountsFromUsageCommandResult : object {
    public string TenantGroupName;
    public string DroppedStorageAccounts;
}
public class Kusto.Data.EchoCommandResult : object {
    public string Message;
}
public class Kusto.Data.EncryptionKeysCreateCommandResult : object {
    public string EncryptionKey;
    public string ImpersonationManifest;
    public DateTime ExpirationTime;
}
public class Kusto.Data.EntityGroupShowCommandResult : object {
    public string Name;
    public string Entities;
}
public class Kusto.Data.EntityNameAndPolicy`1 : object {
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Policy>k__BackingField;
    public string EntityName { get; public set; }
    public T Policy { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EntityName();
    [CompilerGeneratedAttribute]
public void set_EntityName(string value);
    [CompilerGeneratedAttribute]
public T get_Policy();
    [CompilerGeneratedAttribute]
public void set_Policy(T value);
}
public class Kusto.Data.EntityShowSchemaCommandResult : object {
    public string Name;
    public string Kind;
    public string Schema;
    public string DatabaseName;
    public string PrettyName;
    public bool IsDataCachingAllowed;
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.ClusterSuspendedException : KustoRequestException {
    public string VirtualClusterDnsHostName;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    protected ClusterSuspendedException(SerializationInfo info, StreamingContext context);
    public ClusterSuspendedException(string virtualClusterDnsHostName, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public ClusterSuspendedException(string virtualClusterDnsHostName, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public ClusterSuspendedException(string virtualClusterDnsHostName, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public ClusterSuspendedException(string virtualClusterDnsHostName, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.DatabaseNotFoundException : KustoBadRequestException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public DatabaseNotFoundException(string message, Exception innerException);
    protected DatabaseNotFoundException(SerializationInfo info, StreamingContext context);
    public DatabaseNotFoundException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public DatabaseNotFoundException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.DeltaTableFeatureNotSupportedException : KustoBadRequestException {
    public string NotSupportedFeature;
    public string DeltaTableUri;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public DeltaTableFeatureNotSupportedException(string message, Exception innerException);
    protected DeltaTableFeatureNotSupportedException(SerializationInfo info, StreamingContext context);
    public DeltaTableFeatureNotSupportedException(string notSupportedFeature, string deltaTableUri, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public DeltaTableFeatureNotSupportedException(string notSupportedFeature, string deltaTableUri, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public DeltaTableFeatureNotSupportedException(string notSupportedFeature, string deltaTableUri, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public DeltaTableFeatureNotSupportedException(string notSupportedFeature, string deltaTableUri, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.DuplicateMappingException : KustoBadRequestException {
    public string MappingType;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    protected DuplicateMappingException(SerializationInfo info, StreamingContext context);
    public DuplicateMappingException(string mappingType, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public DuplicateMappingException(string mappingType, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public DuplicateMappingException(string mappingType, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public DuplicateMappingException(string mappingType, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.EntityNameIsNotValidException : KustoBadRequestException {
    public string EntityKind;
    public string PropertyName;
    public string EntityName;
    public string Reason;
    public string Message { get; }
    public bool AlreadyTraced { get; }
    public EntityNameIsNotValidException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, int failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public EntityNameIsNotValidException(string message, Exception innerException);
    protected EntityNameIsNotValidException(SerializationInfo info, StreamingContext context);
    public EntityNameIsNotValidException(string entityKind, string propertyName, string entityName, string reason, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public EntityNameIsNotValidException(string entityKind, string propertyName, string entityName, string reason, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public EntityNameIsNotValidException(string entityKind, string propertyName, string entityName, string reason, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public EntityNameIsNotValidException(string entityKind, string propertyName, string entityName, string reason, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public virtual string get_Message();
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.EntityNotFoundException : KustoBadRequestException {
    public string EntityKind;
    public string EntityId;
    public string Message { get; }
    public bool AlreadyTraced { get; }
    public EntityNotFoundException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, int failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public EntityNotFoundException(string message, Exception innerException);
    protected EntityNotFoundException(SerializationInfo info, StreamingContext context);
    public EntityNotFoundException(string entityKind, string entityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public EntityNotFoundException(string entityKind, string entityId, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public EntityNotFoundException(string entityKind, string entityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public EntityNotFoundException(string entityKind, string entityId, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public virtual string get_Message();
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.EntityNotFoundInContainerException : KustoBadRequestException {
    public string EntityKind;
    public string EntityId;
    public string Container;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public EntityNotFoundInContainerException(string message, Exception innerException);
    protected EntityNotFoundInContainerException(SerializationInfo info, StreamingContext context);
    public EntityNotFoundInContainerException(string entityKind, string entityId, string container, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public EntityNotFoundInContainerException(string entityKind, string entityId, string container, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public EntityNotFoundInContainerException(string entityKind, string entityId, string container, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public EntityNotFoundInContainerException(string entityKind, string entityId, string container, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.EntityTypeIsNotValidException : KustoBadRequestException {
    public string EntityKind;
    public string PropertyName;
    public string CslType;
    public string Reason;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public EntityTypeIsNotValidException(string message, Exception innerException);
    protected EntityTypeIsNotValidException(SerializationInfo info, StreamingContext context);
    public EntityTypeIsNotValidException(string entityKind, string propertyName, string cslType, string reason, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public EntityTypeIsNotValidException(string entityKind, string propertyName, string cslType, string reason, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public EntityTypeIsNotValidException(string entityKind, string propertyName, string cslType, string reason, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public EntityTypeIsNotValidException(string entityKind, string propertyName, string cslType, string reason, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.FormatNotSupportedException : KustoBadRequestException {
    public string FormatProvided;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    protected FormatNotSupportedException(SerializationInfo info, StreamingContext context);
    public FormatNotSupportedException(string formatProvided, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public FormatNotSupportedException(string formatProvided, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public FormatNotSupportedException(string formatProvided, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public FormatNotSupportedException(string formatProvided, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.InappropriateNullLiteralException : SyntaxException {
    public string LiteralType;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    protected InappropriateNullLiteralException(SerializationInfo info, StreamingContext context);
    public InappropriateNullLiteralException(string literalType, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public InappropriateNullLiteralException(string literalType, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.IngestionPropertyNotSupportedInThisContextException : KustoBadRequestException {
    public string IngestionProperty;
    public string Context;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public IngestionPropertyNotSupportedInThisContextException(string message, Exception innerException);
    protected IngestionPropertyNotSupportedInThisContextException(SerializationInfo info, StreamingContext context);
    public IngestionPropertyNotSupportedInThisContextException(string ingestionProperty, string context, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public IngestionPropertyNotSupportedInThisContextException(string ingestionProperty, string context, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public IngestionPropertyNotSupportedInThisContextException(string ingestionProperty, string context, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public IngestionPropertyNotSupportedInThisContextException(string ingestionProperty, string context, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.InvalidDeltaTableException : KustoBadRequestException {
    public string Details;
    public string DeltaTableUri;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public InvalidDeltaTableException(string message, Exception innerException);
    protected InvalidDeltaTableException(SerializationInfo info, StreamingContext context);
    public InvalidDeltaTableException(string details, string deltaTableUri, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public InvalidDeltaTableException(string details, string deltaTableUri, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public InvalidDeltaTableException(string details, string deltaTableUri, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public InvalidDeltaTableException(string details, string deltaTableUri, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.InvalidLiteralFormatException : SyntaxException {
    public string LiteralText;
    public string LiteralType;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public InvalidLiteralFormatException(string message, Exception innerException);
    protected InvalidLiteralFormatException(SerializationInfo info, StreamingContext context);
    public InvalidLiteralFormatException(string literalText, string literalType, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public InvalidLiteralFormatException(string literalText, string literalType, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoBadRequestException : KustoRequestException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoBadRequestException(string message, Exception innerException);
    protected KustoBadRequestException(SerializationInfo info, StreamingContext context);
    public KustoBadRequestException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoBadRequestException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientApplicationAuthenticationException : KustoClientAuthenticationException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoClientApplicationAuthenticationException(string message, Exception innerException);
    protected KustoClientApplicationAuthenticationException(SerializationInfo info, StreamingContext context);
    public KustoClientApplicationAuthenticationException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientApplicationAuthenticationException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientApplicationCertificateNotFoundException : KustoClientAuthenticationException {
    public string CertificateIdentification;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    protected KustoClientApplicationCertificateNotFoundException(SerializationInfo info, StreamingContext context);
    public KustoClientApplicationCertificateNotFoundException(string certificateIdentification, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientApplicationCertificateNotFoundException(string certificateIdentification, string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientApplicationCertificateNotFoundException(string certificateIdentification, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientApplicationCertificateNotFoundException(string certificateIdentification, string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientAuthenticationException : KustoClientException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoClientAuthenticationException(string message, Exception innerException);
    protected KustoClientAuthenticationException(SerializationInfo info, StreamingContext context);
    public KustoClientAuthenticationException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientAuthenticationException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientException : KustoException {
    public string ErrorMessage;
    public string DataSource;
    public string DatabaseName;
    public string ClientRequestId;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoClientException(string message, Exception innerException);
    protected KustoClientException(SerializationInfo info, StreamingContext context);
    public KustoClientException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientInvalidConnectionStringException : KustoClientException {
    public string InitializationErrorMessage;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    protected KustoClientInvalidConnectionStringException(SerializationInfo info, StreamingContext context);
    public KustoClientInvalidConnectionStringException(string initializationErrorMessage, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientInvalidConnectionStringException(string initializationErrorMessage, string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientInvalidConnectionStringException(string initializationErrorMessage, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientInvalidConnectionStringException(string initializationErrorMessage, string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientLocalSecretAuthenticationAccessDisabledException : KustoClientAuthenticationException {
    public string Keyword;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    protected KustoClientLocalSecretAuthenticationAccessDisabledException(SerializationInfo info, StreamingContext context);
    public KustoClientLocalSecretAuthenticationAccessDisabledException(string keyword, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientLocalSecretAuthenticationAccessDisabledException(string keyword, string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientLocalSecretAuthenticationAccessDisabledException(string keyword, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientLocalSecretAuthenticationAccessDisabledException(string keyword, string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientNameResolutionFailureException : KustoClientException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoClientNameResolutionFailureException(string message, Exception innerException);
    protected KustoClientNameResolutionFailureException(SerializationInfo info, StreamingContext context);
    public KustoClientNameResolutionFailureException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientNameResolutionFailureException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientNotSupportedException : KustoClientException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoClientNotSupportedException(string message, Exception innerException);
    protected KustoClientNotSupportedException(SerializationInfo info, StreamingContext context);
    public KustoClientNotSupportedException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientNotSupportedException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientPrincipalIdentityMustBeNullException : KustoClientException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoClientPrincipalIdentityMustBeNullException(string message, Exception innerException);
    protected KustoClientPrincipalIdentityMustBeNullException(SerializationInfo info, StreamingContext context);
    public KustoClientPrincipalIdentityMustBeNullException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientPrincipalIdentityMustBeNullException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientRequestCanceledByUserException : KustoClientException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoClientRequestCanceledByUserException(string message, Exception innerException);
    protected KustoClientRequestCanceledByUserException(SerializationInfo info, StreamingContext context);
    public KustoClientRequestCanceledByUserException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientRequestCanceledByUserException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientStreamReadException : KustoClientException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoClientStreamReadException(string message, Exception innerException);
    protected KustoClientStreamReadException(SerializationInfo info, StreamingContext context);
    public KustoClientStreamReadException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientStreamReadException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientTemporaryStorageRetrievalException : KustoClientException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoClientTemporaryStorageRetrievalException(string message, Exception innerException);
    protected KustoClientTemporaryStorageRetrievalException(SerializationInfo info, StreamingContext context);
    public KustoClientTemporaryStorageRetrievalException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientTemporaryStorageRetrievalException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientTimeoutAwaitingPendingOperationException : KustoClientException {
    public Guid OperationId;
    public TimeSpan Timeout;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoClientTimeoutAwaitingPendingOperationException(string message, Exception innerException);
    protected KustoClientTimeoutAwaitingPendingOperationException(SerializationInfo info, StreamingContext context);
    public KustoClientTimeoutAwaitingPendingOperationException(Guid operationId, TimeSpan timeout, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientTimeoutAwaitingPendingOperationException(Guid operationId, TimeSpan timeout, string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientTimeoutAwaitingPendingOperationException(Guid operationId, TimeSpan timeout, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientTimeoutAwaitingPendingOperationException(Guid operationId, TimeSpan timeout, string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientTimeoutException : KustoClientException {
    public TimeSpan Timeout;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoClientTimeoutException(string message, Exception innerException);
    protected KustoClientTimeoutException(SerializationInfo info, StreamingContext context);
    public KustoClientTimeoutException(TimeSpan timeout, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientTimeoutException(TimeSpan timeout, string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientTimeoutException(TimeSpan timeout, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientTimeoutException(TimeSpan timeout, string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientUnableToConnectException : KustoClientException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoClientUnableToConnectException(string message, Exception innerException);
    protected KustoClientUnableToConnectException(SerializationInfo info, StreamingContext context);
    public KustoClientUnableToConnectException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientUnableToConnectException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientUserAuthenticationException : KustoClientAuthenticationException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoClientUserAuthenticationException(string message, Exception innerException);
    protected KustoClientUserAuthenticationException(SerializationInfo info, StreamingContext context);
    public KustoClientUserAuthenticationException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientUserAuthenticationException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoClientUserInteractiveModeNotValidException : KustoClientAuthenticationException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoClientUserInteractiveModeNotValidException(string message, Exception innerException);
    protected KustoClientUserInteractiveModeNotValidException(SerializationInfo info, StreamingContext context);
    public KustoClientUserInteractiveModeNotValidException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoClientUserInteractiveModeNotValidException(string errorMessage, string dataSource, string databaseName, string clientRequestId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoConflictException : KustoRequestException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoConflictException(string message, Exception innerException);
    protected KustoConflictException(SerializationInfo info, StreamingContext context);
    public KustoConflictException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoConflictException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoCsvVerificationStreamException : KustoException {
    public string Details;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    protected KustoCsvVerificationStreamException(SerializationInfo info, StreamingContext context);
    public KustoCsvVerificationStreamException(string details, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoCsvVerificationStreamException(string details, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoDataStreamException : KustoServiceException {
    public UInt32 UnderlyingErrorCode;
    public string UnderlyingErrorMessage;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoDataStreamException(string message, Exception innerException);
    protected KustoDataStreamException(SerializationInfo info, StreamingContext context);
    public KustoDataStreamException(UInt32 underlyingErrorCode, string underlyingErrorMessage, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoDataStreamException(UInt32 underlyingErrorCode, string underlyingErrorMessage, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoDataStreamException(UInt32 underlyingErrorCode, string underlyingErrorMessage, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoDataStreamException(UInt32 underlyingErrorCode, string underlyingErrorMessage, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public abstract class Kusto.Data.Exceptions.KustoException : Exception {
    protected string creationMessage;
    protected bool alreadyTraced;
    protected CreationContext creationContext;
    protected string creationContextStr;
    [CompilerGeneratedAttribute]
private int <FailureCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FailureSubCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPermanent>k__BackingField;
    public CreationContext CreationContext { get; }
    public int FailureCode { get; protected set; }
    public string FailureSubCode { get; protected set; }
    public bool IsPermanent { get; protected set; }
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoException(string message, Exception innerException);
    protected KustoException(SerializationInfo info, StreamingContext context);
    public sealed virtual CreationContext get_CreationContext();
    [CompilerGeneratedAttribute]
public virtual int get_FailureCode();
    [CompilerGeneratedAttribute]
protected virtual void set_FailureCode(int value);
    [CompilerGeneratedAttribute]
public virtual string get_FailureSubCode();
    [CompilerGeneratedAttribute]
protected virtual void set_FailureSubCode(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsPermanent();
    [CompilerGeneratedAttribute]
protected virtual void set_IsPermanent(bool value);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoFailedChangeServiceStateException : KustoRequestException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoFailedChangeServiceStateException(string message, Exception innerException);
    protected KustoFailedChangeServiceStateException(SerializationInfo info, StreamingContext context);
    public KustoFailedChangeServiceStateException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoFailedChangeServiceStateException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoRequestDeniedException : KustoRequestException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoRequestDeniedException(string message, Exception innerException);
    protected KustoRequestDeniedException(SerializationInfo info, StreamingContext context);
    public KustoRequestDeniedException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoRequestDeniedException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoRequestException : KustoException {
    public string ErrorCode;
    public string ErrorReason;
    public string ErrorMessage;
    public string DataSource;
    public string DatabaseName;
    public string ClientRequestId;
    public Guid ActivityId;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoRequestException(string message, Exception innerException);
    protected KustoRequestException(SerializationInfo info, StreamingContext context);
    public KustoRequestException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoRequestException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoRequestPayloadTooLargeException : KustoRequestException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoRequestPayloadTooLargeException(string message, Exception innerException);
    protected KustoRequestPayloadTooLargeException(SerializationInfo info, StreamingContext context);
    public KustoRequestPayloadTooLargeException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoRequestPayloadTooLargeException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoRequestThrottledException : KustoServiceException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoRequestThrottledException(string message, Exception innerException);
    protected KustoRequestThrottledException(SerializationInfo info, StreamingContext context);
    public KustoRequestThrottledException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoRequestThrottledException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoServiceException : KustoException {
    public string ErrorCode;
    public string ErrorReason;
    public string ErrorMessage;
    public string DataSource;
    public string DatabaseName;
    public string ClientRequestId;
    public Guid ActivityId;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoServiceException(string message, Exception innerException);
    protected KustoServiceException(SerializationInfo info, StreamingContext context);
    public KustoServiceException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoServiceException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoServicePartialQueryFailureException : KustoException {
    public string Error;
    public string DatabaseName;
    public string Query;
    public string ClientRequestId;
    public Guid ActivityId;
    public IEnumerable`1<QueryStatusLog> QueryStatusLog;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoServicePartialQueryFailureException(string message, Exception innerException);
    protected KustoServicePartialQueryFailureException(SerializationInfo info, StreamingContext context);
    public KustoServicePartialQueryFailureException(string error, string databaseName, string query, string clientRequestId, Guid activityId, IEnumerable`1<QueryStatusLog> queryStatusLog, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoServicePartialQueryFailureException(string error, string databaseName, string query, string clientRequestId, Guid activityId, IEnumerable`1<QueryStatusLog> queryStatusLog, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public static KustoServicePartialQueryFailureException FromException(Exception ex);
    public static KustoServicePartialQueryFailureException FromException(string message, Exception ex);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoServicePartialQueryFailureIllFormattedDataException : KustoServiceException {
    public UInt32 UnderlyingErrorCode;
    public string UnderlyingErrorMessage;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoServicePartialQueryFailureIllFormattedDataException(string message, Exception innerException);
    protected KustoServicePartialQueryFailureIllFormattedDataException(SerializationInfo info, StreamingContext context);
    public KustoServicePartialQueryFailureIllFormattedDataException(UInt32 underlyingErrorCode, string underlyingErrorMessage, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoServicePartialQueryFailureIllFormattedDataException(UInt32 underlyingErrorCode, string underlyingErrorMessage, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoServicePartialQueryFailureIllFormattedDataException(UInt32 underlyingErrorCode, string underlyingErrorMessage, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoServicePartialQueryFailureIllFormattedDataException(UInt32 underlyingErrorCode, string underlyingErrorMessage, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoServicePartialQueryFailureLimitsExceededException : KustoServiceException {
    public UInt32 UnderlyingErrorCode;
    public string UnderlyingErrorMessage;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoServicePartialQueryFailureLimitsExceededException(string message, Exception innerException);
    protected KustoServicePartialQueryFailureLimitsExceededException(SerializationInfo info, StreamingContext context);
    public KustoServicePartialQueryFailureLimitsExceededException(UInt32 underlyingErrorCode, string underlyingErrorMessage, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoServicePartialQueryFailureLimitsExceededException(UInt32 underlyingErrorCode, string underlyingErrorMessage, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoServicePartialQueryFailureLimitsExceededException(UInt32 underlyingErrorCode, string underlyingErrorMessage, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoServicePartialQueryFailureLimitsExceededException(UInt32 underlyingErrorCode, string underlyingErrorMessage, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoServicePartialQueryFailureLowMemoryConditionException : KustoServiceException {
    public UInt32 UnderlyingErrorCode;
    public string UnderlyingErrorMessage;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoServicePartialQueryFailureLowMemoryConditionException(string message, Exception innerException);
    protected KustoServicePartialQueryFailureLowMemoryConditionException(SerializationInfo info, StreamingContext context);
    public KustoServicePartialQueryFailureLowMemoryConditionException(UInt32 underlyingErrorCode, string underlyingErrorMessage, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoServicePartialQueryFailureLowMemoryConditionException(UInt32 underlyingErrorCode, string underlyingErrorMessage, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoServicePartialQueryFailureLowMemoryConditionException(UInt32 underlyingErrorCode, string underlyingErrorMessage, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoServicePartialQueryFailureLowMemoryConditionException(UInt32 underlyingErrorCode, string underlyingErrorMessage, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoServiceTimeoutException : KustoServiceException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoServiceTimeoutException(string message, Exception innerException);
    protected KustoServiceTimeoutException(SerializationInfo info, StreamingContext context);
    public KustoServiceTimeoutException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoServiceTimeoutException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.KustoServiceUnavilableException : KustoServiceException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public KustoServiceUnavilableException(string message, Exception innerException);
    protected KustoServiceUnavilableException(SerializationInfo info, StreamingContext context);
    public KustoServiceUnavilableException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public KustoServiceUnavilableException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.MalformedIngestionPropertyException : KustoBadRequestException {
    public string IngestionProperty;
    public string ExpectedForm;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public MalformedIngestionPropertyException(string message, Exception innerException);
    protected MalformedIngestionPropertyException(SerializationInfo info, StreamingContext context);
    public MalformedIngestionPropertyException(string ingestionProperty, string expectedForm, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public MalformedIngestionPropertyException(string ingestionProperty, string expectedForm, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public MalformedIngestionPropertyException(string ingestionProperty, string expectedForm, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public MalformedIngestionPropertyException(string ingestionProperty, string expectedForm, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.MappingNotFoundException : KustoBadRequestException {
    public string MappingName;
    public string MappingType;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public MappingNotFoundException(string message, Exception innerException);
    protected MappingNotFoundException(SerializationInfo info, StreamingContext context);
    public MappingNotFoundException(string mappingName, string mappingType, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public MappingNotFoundException(string mappingName, string mappingType, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public MappingNotFoundException(string mappingName, string mappingType, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public MappingNotFoundException(string mappingName, string mappingType, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.MappingNotValidException : KustoBadRequestException {
    public string Mapping;
    public string MappingType;
    public string InvalidityReason;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public MappingNotValidException(string message, Exception innerException);
    protected MappingNotValidException(SerializationInfo info, StreamingContext context);
    public MappingNotValidException(string mapping, string mappingType, string invalidityReason, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public MappingNotValidException(string mapping, string mappingType, string invalidityReason, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public MappingNotValidException(string mapping, string mappingType, string invalidityReason, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public MappingNotValidException(string mapping, string mappingType, string invalidityReason, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.QueryCslTreeExceedsDepthsLimitsException : KustoBadRequestException {
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public QueryCslTreeExceedsDepthsLimitsException(string message, Exception innerException);
    protected QueryCslTreeExceedsDepthsLimitsException(SerializationInfo info, StreamingContext context);
    public QueryCslTreeExceedsDepthsLimitsException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public QueryCslTreeExceedsDepthsLimitsException(string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.RelopSemanticException : KustoBadRequestException {
    public string Text;
    public string SemanticErrors;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public RelopSemanticException(string message, Exception innerException);
    protected RelopSemanticException(SerializationInfo info, StreamingContext context);
    public RelopSemanticException(string text, string semanticErrors, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public RelopSemanticException(string text, string semanticErrors, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public RelopSemanticException(string text, string semanticErrors, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public RelopSemanticException(string text, string semanticErrors, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.SemanticException : KustoBadRequestException {
    public string Text;
    public string SemanticErrors;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public SemanticException(string message, Exception innerException);
    protected SemanticException(SerializationInfo info, StreamingContext context);
    public SemanticException(string text, string semanticErrors, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public SemanticException(string text, string semanticErrors, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public SemanticException(string text, string semanticErrors, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public SemanticException(string text, string semanticErrors, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.SyntaxException : KustoBadRequestException {
    public string Text;
    public string ParseErrors;
    public int Line;
    public int CharacterPositionInLine;
    public string Token;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public SyntaxException(string message, Exception innerException);
    protected SyntaxException(SerializationInfo info, StreamingContext context);
    public SyntaxException(string text, string parseErrors, int line, int characterPositionInLine, string token, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public SyntaxException(string text, string parseErrors, int line, int characterPositionInLine, string token, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public SyntaxException(string text, string parseErrors, int line, int characterPositionInLine, string token, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public SyntaxException(string text, string parseErrors, int line, int characterPositionInLine, string token, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.TableNotFoundException : KustoBadRequestException {
    public string TableName;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    protected TableNotFoundException(SerializationInfo info, StreamingContext context);
    public TableNotFoundException(string tableName, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public TableNotFoundException(string tableName, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public TableNotFoundException(string tableName, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public TableNotFoundException(string tableName, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.WeakConsistencyEntitiesNotFoundException : KustoServiceException {
    public string EntityKind;
    public string EntityIds;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public WeakConsistencyEntitiesNotFoundException(string message, Exception innerException);
    protected WeakConsistencyEntitiesNotFoundException(SerializationInfo info, StreamingContext context);
    public WeakConsistencyEntitiesNotFoundException(string entityKind, string entityIds, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public WeakConsistencyEntitiesNotFoundException(string entityKind, string entityIds, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public WeakConsistencyEntitiesNotFoundException(string entityKind, string entityIds, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public WeakConsistencyEntitiesNotFoundException(string entityKind, string entityIds, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("CloudPlatformException", "4.5.0.0")]
public class Kusto.Data.Exceptions.WeakConsistencyEntityNotFoundException : KustoServiceException {
    public string EntityKind;
    public string EntityId;
    public bool AlreadyTraced { get; }
    public string Message { get; }
    public WeakConsistencyEntityNotFoundException(string message, Exception innerException);
    protected WeakConsistencyEntityNotFoundException(SerializationInfo info, StreamingContext context);
    public WeakConsistencyEntityNotFoundException(string entityKind, string entityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public WeakConsistencyEntityNotFoundException(string entityKind, string entityId, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public WeakConsistencyEntityNotFoundException(string entityKind, string entityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    public WeakConsistencyEntityNotFoundException(string entityKind, string entityId, string errorCode, string errorReason, string errorMessage, string dataSource, string databaseName, string clientRequestId, Guid activityId, Exception innerException, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct(bool deserializing, Nullable`1<int> failureCode, string failureSubCode, Nullable`1<bool> isPermanent);
    private void Construct_Debugger();
    private void Construct_IsPermanent(Nullable`1<bool> isPermanent, int failureCode);
    private void Construct_ExceptionCreationContext(bool deserializing);
    private void Construct_Trace();
    public virtual bool get_AlreadyTraced();
    public virtual string get_Message();
    private string CreateMessageFromTemplate();
    public virtual string ToString();
    public virtual void WriteToStringTo(StringBuilder sb);
    public virtual void WritePropertiesTo(StringBuilder sb);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[DataContractAttribute]
public class Kusto.Data.ExportCapacity : object {
    private long c_defaultClusterMaximumConcurrentOperations;
    private double c_defaultCoreUtilizationCoefficient;
    [JsonPropertyAttribute("ClusterMaximumConcurrentOperations")]
[DataMemberAttribute]
private long m_clusterMaximumConcurrentOperations;
    [JsonPropertyAttribute("CoreUtilizationCoefficient")]
[DataMemberAttribute]
private double m_coreUtilizationCoefficient;
    [JsonIgnoreAttribute]
public long ClusterMaximumConcurrentOperations { get; }
    [JsonIgnoreAttribute]
public double CoreUtilizationCoefficient { get; }
    public ExportCapacity(long clusterMaximumConcurrentOperations, double coreUtilizationCoefficient);
    public ExportCapacity(ExportCapacity other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ExportCapacity other);
    public bool IsValid(String& errorMessage);
    public virtual string ToString();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public ExportCapacity NewSetClusterMaximumConcurrentOperations(long clusterMaximumConcurrentOperations);
    public ExportCapacity NewSetCoreUtilizationCoefficient(double coreUtilizationCoefficient);
    public long get_ClusterMaximumConcurrentOperations();
    public double get_CoreUtilizationCoefficient();
}
public class Kusto.Data.ExportContainersGetCommandResult : object {
    public string StorageRoot;
    public bool RemoteStorage;
}
[ExtensionAttribute]
public static class Kusto.Data.ExtendedCapacityShowVirtualResourceKind : object {
    [ExtensionAttribute]
public static string ToCslString(CapacityShowVirtualResourceKind resource);
}
[ExtensionAttribute]
public static class Kusto.Data.ExtendedDatabaseSuspensionState : object {
    [ExtensionAttribute]
public static bool SafeDoesHaveAnySuspension(DatabaseSuspensionState suspensionState);
    [ExtensionAttribute]
public static bool SafeDoesHaveCmkSuspension(DatabaseSuspensionState suspensionState);
}
[ExtensionAttribute]
public static class Kusto.Data.ExtendedDiagnosticsPolicy : object {
    private static bool c_defaultDiagnosticsPolicyProperty;
    public static DiagnosticsPolicy GetEffectiveDiagnosticsPolicyForDatabase(DiagnosticsPolicy clusterPolicy, DiagnosticsPolicy databasePolicy);
    [ExtensionAttribute]
public static bool IsCommandEnabled(DiagnosticsPolicy diagnosticsPolicy);
    [ExtensionAttribute]
public static bool IsQueryEnabled(DiagnosticsPolicy diagnosticsPolicy);
    [ExtensionAttribute]
public static bool IsTableUsageStatisticsEnabled(DiagnosticsPolicy diagnosticsPolicy);
    [ExtensionAttribute]
public static bool IsJournalEnabled(DiagnosticsPolicy diagnosticsPolicy);
    [ExtensionAttribute]
public static bool IsDataOperationsEnabled(DiagnosticsPolicy diagnosticsPolicy);
}
[ExtensionAttribute]
public static class Kusto.Data.ExtendedDmSettingsType : object {
    [ExtensionAttribute]
public static string FastToString(DmSettingsType that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(DmSettingsType that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(DmSettingsType that, DmSettingsType flag);
    public static DmSettingsType FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, DmSettingsType& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(DmSettingsType that);
    [ExtensionAttribute]
public static string FastGetDescription(DmSettingsType that);
}
[ExtensionAttribute]
public static class Kusto.Data.ExtendedIngestionQueueType : object {
    [ExtensionAttribute]
public static string FastToString(IngestionQueueType that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(IngestionQueueType that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(IngestionQueueType that, IngestionQueueType flag);
    public static IngestionQueueType FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, IngestionQueueType& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(IngestionQueueType that);
    [ExtensionAttribute]
public static string FastGetDescription(IngestionQueueType that);
}
[ExtensionAttribute]
public static class Kusto.Data.ExtendedKustoCmCommandResults : object {
    private static void WriteNullable(Nullable`1<TimeSpan> value, Action`1<string> writeField);
    private static void WriteNullable(Nullable`1<DateTime> value, Action`1<string> writeField);
    private static void WriteNullable(Nullable`1<Guid> value, Action`1<string> writeField);
    private static void WriteNullable(Nullable`1<bool> value, Action`1<string> writeField);
    private static void WriteReferenceField(object value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PendingCmOperationResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PendingCmOperationResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceModelShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceModelShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(AccountShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(AccountShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(AccountContactsShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(AccountContactsShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(AccountConfigurationShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(AccountConfigurationShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(AccountConfigurationBasicShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(AccountConfigurationBasicShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(AccountSubscriptionsShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(AccountSubscriptionsShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(AccountClientSubscriptionsShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(AccountClientSubscriptionsShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterConfigurationShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterConfigurationShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(RegionalClusterManagementShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(RegionalClusterManagementShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SubscriptionShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SubscriptionShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceConfigurationShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceConfigurationShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceConfigurationsShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceConfigurationsShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(MultiServicesExecuteCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(MultiServicesExecuteCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PrivateEndpointConnectionProxyValidateCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PrivateEndpointConnectionProxyValidateCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(GroupIdInformationShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(GroupIdInformationShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceStorageObjectsShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceStorageObjectsShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceFabricLocksShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceFabricLocksShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceVersionsShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceVersionsShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceCheckNameAvailabilityCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceCheckNameAvailabilityCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServicePackagesConfigurationShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServicePackagesConfigurationShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SandboxPackagesConfigurationShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SandboxPackagesConfigurationShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PackagesConfigurationPathGetCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PackagesConfigurationPathGetCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DiagnosticsShowCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DiagnosticsShowCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServicesInNonRegisteredSubscriptionsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServicesInNonRegisteredSubscriptionsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceMetadataShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceMetadataShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(RunnersDeploymentCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(RunnersDeploymentCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceDatabasesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceDatabasesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceDatabasesSummaryShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceDatabasesSummaryShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceStorageAccountsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceStorageAccountsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceStorageAccountsKeysShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceStorageAccountsKeysShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceStorageAccountsKeysRegenerateCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceStorageAccountsKeysRegenerateCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceStorageAccountsAlterCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceStorageAccountsAlterCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceArmDetailsRegenerateCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceArmDetailsRegenerateCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(UnallocatedSubscriptionsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(UnallocatedSubscriptionsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceAuditLogShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceAuditLogShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServicePurgesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServicePurgesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PrivateEndpointConnectionProxyDeleteCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PrivateEndpointConnectionProxyDeleteCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ServiceSuspendAdminNodeCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ServiceSuspendAdminNodeCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(StorageAccountRotateKeyCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(StorageAccountRotateKeyCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DashboardResolveCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DashboardResolveCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DashboardTenantResolveCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DashboardTenantResolveCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DashboardGrantAccessCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DashboardGrantAccessCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DashboardResourceRevokeAccessCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DashboardResourceRevokeAccessCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DashboardsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DashboardsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TriggerDashboardTenantsMigrationCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TriggerDashboardTenantsMigrationCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ShowDashboardTenantsCountForMigrationCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ShowDashboardTenantsCountForMigrationCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(NonAzureDmServiceDataConnectionsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(NonAzureDmServiceDataConnectionsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DataConnectionValidationCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DataConnectionValidationCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SynapseMockNotifyCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SynapseMockNotifyCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SynapseMockRbacNotifyCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SynapseMockRbacNotifyCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SynapseMockSettingsSetCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SynapseMockSettingsSetCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SynapseMockRbacSetCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SynapseMockRbacSetCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(KustoPoolsListByWorkspaceCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(KustoPoolsListByWorkspaceCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SynapsePrivateEndpointCreateCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SynapsePrivateEndpointCreateCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TridentCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TridentCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(LocalStorageInformationForServiceTypeShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(LocalStorageInformationForServiceTypeShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SnatConnectionCountFailuresMetricResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SnatConnectionCountFailuresMetricResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseFollowerInvitationCreateCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseFollowerInvitationCreateCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseFollowerInvitationValidateCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseFollowerInvitationValidateCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ShowCertificateCmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ShowCertificateCmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ShowLeaderDatabasesCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ShowLeaderDatabasesCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DmServiceDataConnectionSuspendResumeCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DmServiceDataConnectionSuspendResumeCommandResult value, Action`1<string> writeField);
}
[ExtensionAttribute]
public static class Kusto.Data.ExtendedKustoCommandResults : object {
    private static void WriteNullable(Nullable`1<TimeSpan> value, Action`1<string> writeField);
    private static void WriteNullable(Nullable`1<DateTime> value, Action`1<string> writeField);
    private static void WriteNullable(Nullable`1<Guid> value, Action`1<string> writeField);
    private static void WriteNullable(Nullable`1<bool> value, Action`1<string> writeField);
    private static void WriteNullable(Nullable`1<long> value, Action`1<string> writeField);
    private static void WriteReferenceField(object value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseCreateCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseCreateCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseDetachCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseDetachCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseDetachCommandPartialSuccessResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseDetachCommandPartialSuccessResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ReplaceContainersStorageAccountsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ReplaceContainersStorageAccountsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseAttachCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseAttachCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseMetadataContainerAlterCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseMetadataContainerAlterCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabasesManagementGroupsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabasesManagementGroupsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabasesShowActiveCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabasesShowActiveCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabasesShowDefaultCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabasesShowDefaultCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabasesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabasesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabasesShowVerboseCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabasesShowVerboseCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PrincipalResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PrincipalResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabasesShowPoliciesCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabasesShowPoliciesCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabasesShowDataStatsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabasesShowDataStatsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabasesShowMetadataCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabasesShowMetadataCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabasesShowEncryptionCertificateThumbprintCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabasesShowEncryptionCertificateThumbprintCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(GetNumberOfAvailableStorageAccountsInCmResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(GetNumberOfAvailableStorageAccountsInCmResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(VirtualClusterShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(VirtualClusterShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(VirtualClusterAlterCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(VirtualClusterAlterCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DataExportToSqlCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DataExportToSqlCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(UnhandledDatabasesCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(UnhandledDatabasesCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(RunningQueryCancelCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(RunningQueryCancelCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(OperationCancelCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(OperationCancelCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(QueriesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(QueriesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(CommandsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(CommandsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(CommandsAndQueriesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(CommandsAndQueriesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DataExportToBlobCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DataExportToBlobCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SetOrAppendPluginResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SetOrAppendPluginResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DataExportToExternalTableCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DataExportToExternalTableCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(MaterializedViewRunCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(MaterializedViewRunCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(MaterializedViewRestoreCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(MaterializedViewRestoreCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(MaterializedViewShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(MaterializedViewShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(MaterializedViewsTriggerCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(MaterializedViewsTriggerCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(MaterializedViewFailuresCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(MaterializedViewFailuresCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseMetadataExportCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseMetadataExportCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ContinuousDataExportToExternalTableCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ContinuousDataExportToExternalTableCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ContinuousDataExportFailuresCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ContinuousDataExportFailuresCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ContinuousExportShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ContinuousExportShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ContinuousExportShowPendingCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ContinuousExportShowPendingCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DataExportToMdmCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DataExportToMdmCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DataIngestCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DataIngestCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DataIngestPullCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DataIngestPullCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(UpdateCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(UpdateCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(UpdateCommandResult_WhatIfMode value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(UpdateCommandResult_WhatIfMode value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableSealCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableSealCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableSealUpToCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableSealUpToCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(OperationsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(OperationsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(OperationShowDetailsEmptyCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(OperationShowDetailsEmptyCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(RetryPurgeOperationsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(RetryPurgeOperationsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(RowStoreTransactionsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(RowStoreTransactionsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestionFailuresShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestionFailuresShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DataOperationsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DataOperationsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(StreamingIngestionFailuresShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(StreamingIngestionFailuresShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(StreamingIngestionStatisticsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(StreamingIngestionStatisticsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestionFailuresSummarizedShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestionFailuresSummarizedShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(JournalShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(JournalShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentsMergeCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentsMergeCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentsPartitionCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentsPartitionCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentsPartitionMetadataAlterCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentsPartitionMetadataAlterCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentTagsAlterCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentTagsAlterCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseExtentTagsStatisticsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseExtentTagsStatisticsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentsMoveCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentsMoveCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SchemaShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SchemaShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SchemaShowDetailsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SchemaShowDetailsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ColumnsRenameCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ColumnsRenameCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SchemaShowAsJsonCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SchemaShowAsJsonCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(QueryGetSchemaResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(QueryGetSchemaResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(QueryGetSchemaAsCslResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(QueryGetSchemaAsCslResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SchemaViolationsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SchemaViolationsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseSchemaShowAsJsonCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseSchemaShowAsJsonCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseSchemaShowAsCslScriptCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseSchemaShowAsCslScriptCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabasesEntitiesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabasesEntitiesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabasesEntitiesDependenciesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabasesEntitiesDependenciesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ColumnAlterCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ColumnAlterCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableDimensionsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableDimensionsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableShowDataStatisticsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableShowDataStatisticsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableShowDataStatisticsCommandResultEx value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableShowDataStatisticsCommandResultEx value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableShowSchemaCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableShowSchemaCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableDropUndoCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableDropUndoCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableDropCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableDropCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(FunctionShowSchemaCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(FunctionShowSchemaCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(FollowerDatabasesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(FollowerDatabasesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseScriptShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseScriptShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(EntityShowSchemaCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(EntityShowSchemaCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(FreshnessShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(FreshnessShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TablesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TablesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TablesDetailsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TablesDetailsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(MaterializedViewsDetailsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(MaterializedViewsDetailsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TablesLevelDetailsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TablesLevelDetailsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(MaterializedViewsLevelDetailsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(MaterializedViewsLevelDetailsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableColumnsCardinalityShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableColumnsCardinalityShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableWithOldStatisticsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableWithOldStatisticsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableColumnsStatisticsMethodShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableColumnsStatisticsMethodShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentsAttachByMetadataCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentsAttachByMetadataCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentContainersShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentContainersShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabasesExtentContainersShowStorageAccountsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabasesExtentContainersShowStorageAccountsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentContainersDropCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentContainersDropCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentContainersRecycleCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentContainersRecycleCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TempStorageDropCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TempStorageDropCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentsShowDetailsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentsShowDetailsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentsShowForExtentsManagementLogicCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentsShowForExtentsManagementLogicCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentsMetadataShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentsMetadataShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentsDropCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentsDropCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableClearDataCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableClearDataCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(AlterPartitionMetadataCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(AlterPartitionMetadataCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentsDropFromDatabasesCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentsDropFromDatabasesCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentRebuildByQueryCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentRebuildByQueryCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PurgeTableRecordsExtentsStatistics value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PurgeTableRecordsExtentsStatistics value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PurgeTableRecordsInfo value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PurgeTableRecordsInfo value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PurgeCleanupCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PurgeCleanupCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PurgeShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PurgeShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PurgeOperationShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PurgeOperationShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(CleanOperationShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(CleanOperationShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PurgeTableRecordsCommandResumeResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PurgeTableRecordsCommandResumeResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PurgeTableRecordsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PurgeTableRecordsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ShardRecordsDeleteCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ShardRecordsDeleteCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableRecordsDeleteCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableRecordsDeleteCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseContainersUtilizationShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseContainersUtilizationShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(StorageContainersUsageShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(StorageContainersUsageShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(StorageArtifactsCleanupCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(StorageArtifactsCleanupCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabasesExtentContainersCleanCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabasesExtentContainersCleanCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterAdminStateShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterAdminStateShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterShowDetailsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterShowDetailsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterShowNetworkCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterShowNetworkCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(VersionShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(VersionShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(EchoCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(EchoCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(FlushTracesCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(FlushTracesCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(FeatureFlagsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(FeatureFlagsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DiagnosticsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DiagnosticsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseSoftRetentionPolicyViolationsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseSoftRetentionPolicyViolationsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseHardRetentionPolicyViolationsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseHardRetentionPolicyViolationsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DiagnosticsShowDMCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DiagnosticsShowDMCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(MemoryShowDetailsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(MemoryShowDetailsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(MemoryShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(MemoryShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(CacheShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(CacheShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(CacheAlterCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(CacheAlterCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(CapacityShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(CapacityShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterSharedContainersShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterSharedContainersShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseSetAccessModeCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseSetAccessModeCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseSetPrettyNameCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseSetPrettyNameCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseClearWeakConsistencyCacheResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseClearWeakConsistencyCacheResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseRemoteSchemaClearCacheCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseRemoteSchemaClearCacheCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(StreamingIngestionSchemaCacheClearCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(StreamingIngestionSchemaCacheClearCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseClearResultsCacheCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseClearResultsCacheCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ShowAccessGroupsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ShowAccessGroupsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ShowAccessGroupsCommandResultLight value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ShowAccessGroupsCommandResultLight value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ShowPrincipalAccessCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ShowPrincipalAccessCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ShowTrustedExternalTenantsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ShowTrustedExternalTenantsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ShowBlockedPrincipalsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ShowBlockedPrincipalsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(BasicAuthUsersShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(BasicAuthUsersShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(BasicAuthUserRemoveCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(BasicAuthUserRemoveCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(BasicAuthUserCreateCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(BasicAuthUserCreateCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(UserRolesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(UserRolesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentDetailsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentDetailsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExtentDescriptionShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExtentDescriptionShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(CorruptedDateTimeShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(CorruptedDateTimeShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(CorruptedDateTimePatchCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(CorruptedDateTimePatchCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TempStorageCreateCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TempStorageCreateCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DmTempStorageCreateCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DmTempStorageCreateCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestionsStatusTableCreateCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestionsStatusTableCreateCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestionsStatusTablesGetCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestionsStatusTablesGetCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestionResourcesGetCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestionResourcesGetCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestionResourcesGetCommandResultWithRemote value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestionResourcesGetCommandResultWithRemote value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExportContainersGetCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExportContainersGetCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ContainersGetCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ContainersGetCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PolicyShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PolicyShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PolicyShowCommandEffectiveResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PolicyShowCommandEffectiveResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DataClassificationCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DataClassificationCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DataWarmingCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DataWarmingCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ShardsWarmingCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ShardsWarmingCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestionDuplicateCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestionDuplicateCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterMonitoringShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterMonitoringShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterManagementResourcesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterManagementResourcesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(RequestSupportCreateCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(RequestSupportCreateCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(RowStoreCreateCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(RowStoreCreateCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(RowStoresShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(RowStoresShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(RowStoreShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(RowStoreShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(RowStoreDropCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(RowStoreDropCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(RowStoreBlockKeysCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(RowStoreBlockKeysCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(QueryResultsCacheShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(QueryResultsCacheShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ScriptExecuteObsoleteCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ScriptExecuteObsoleteCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ScriptExecuteCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ScriptExecuteCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(StackSampleShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(StackSampleShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterNodesToScaleInShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterNodesToScaleInShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(QueryCallTreeShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(QueryCallTreeShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseShardGroupStatisticsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseShardGroupStatisticsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableShardGroupStatisticsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableShardGroupStatisticsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableShardGroupsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableShardGroupsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseExtentsPartitioningStatisticsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseExtentsPartitioningStatisticsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(MirroringOperationsShowStatusResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(MirroringOperationsShowStatusResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseTableMirroringPolicyTemplatesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseTableMirroringPolicyTemplatesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SystemPropertiesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SystemPropertiesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterClearCredStoreCacheCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterClearCredStoreCacheCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterClearGroupMembershipCacheCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterClearGroupMembershipCacheCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseKeyVaultSecretsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseKeyVaultSecretsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterExternalArtifactsCacheClearCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterExternalArtifactsCacheClearCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DatabaseKeyVaultSecretsReplaceCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DatabaseKeyVaultSecretsReplaceCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PendingOperationResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PendingOperationResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(GetLaggingQueuesCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(GetLaggingQueuesCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(GetIngestionQueuesLengthsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(GetIngestionQueuesLengthsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(GetIngestionQueuesCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(GetIngestionQueuesCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(GetKustoTokenCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(GetKustoTokenCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DmClusterSettingsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DmClusterSettingsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DmClusterShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DmClusterShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestionSourceTypesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestionSourceTypesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestionSourceAriaShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestionSourceAriaShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestionSourceGenevaShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestionSourceGenevaShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestionSourceEventHubShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestionSourceEventHubShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestionSourceEventGridWithEventHubShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestionSourceEventGridWithEventHubShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestionSourceCosmosDbShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestionSourceCosmosDbShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ObtainersSettingsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ObtainersSettingsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ResetClusterConfigurationCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ResetClusterConfigurationCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(RefreshPolicyCacheCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(RefreshPolicyCacheCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterMaintenanceModeSetCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterMaintenanceModeSetCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PurgeTableDryRunCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PurgeTableDryRunCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterStorageAccountsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterStorageAccountsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PurgeTableRecordsDryRunCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PurgeTableRecordsDryRunCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PurgesSummaryShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PurgesSummaryShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(RetryPurgesCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(RetryPurgesCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TargetQueryServiceUriShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TargetQueryServiceUriShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(BridgeVersionShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(BridgeVersionShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(BridgeClusterSettingsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(BridgeClusterSettingsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DiagnosticsShowBridgeCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DiagnosticsShowBridgeCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SubscribedTenantsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SubscribedTenantsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TenantGroupIngestionSourcesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TenantGroupIngestionSourcesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TenantPubSubSubscriptionsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TenantPubSubSubscriptionsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(CoralConfigurationStateShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(CoralConfigurationStateShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TenantCoralConfigurationShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TenantCoralConfigurationShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(BridgeSingleStringCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(BridgeSingleStringCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(DropPubSubStorageAccountsFromUsageCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(DropPubSubStorageAccountsFromUsageCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterCreateForTenantGroupCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterCreateForTenantGroupCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(PendingBridgeOperationResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(PendingBridgeOperationResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(QueryTableOfContents value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(QueryTableOfContents value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(QueryStatusLog value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(QueryStatusLog value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(FunctionDropCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(FunctionDropCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(FunctionShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(FunctionShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(EntityGroupShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(EntityGroupShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(CachingPolicyCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(CachingPolicyCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(QueryPlanShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(QueryPlanShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterServicesShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterServicesShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(StorageKeysHashShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(StorageKeysHashShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(StorageKeysAlterCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(StorageKeysAlterCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableShowRowstoresCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableShowRowstoresCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableShowRowstoreReferencesCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableShowRowstoreReferencesCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(TableShowRowstoreSealInfoCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(TableShowRowstoreSealInfoCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ShowPluginCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ShowPluginCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(SandboxesStatsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(SandboxesStatsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(QueryExecutionShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(QueryExecutionShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestionMappingShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestionMappingShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(StreamIngestResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(StreamIngestResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(IngestInlineResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(IngestInlineResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExternalTableInternalCatalogRefreshResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExternalTableInternalCatalogRefreshResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExternalTableCachedTableIngestionResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExternalTableCachedTableIngestionResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExternalTableShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExternalTableShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExternalTableShowArtifactsResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExternalTableShowArtifactsResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ExternalTableSampleUrisResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ExternalTableSampleUrisResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ClusterWorkloadGroupsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ClusterWorkloadGroupsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(StoredQueryResultsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(StoredQueryResultsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(StoredQueryResultsSearchCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(StoredQueryResultsSearchCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(StoredQueryResultShowSchemaResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(StoredQueryResultShowSchemaResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(VirtualDmShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(VirtualDmShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(HealthShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(HealthShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(AggregatorScaleCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(AggregatorScaleCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(CopyAzureTablesCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(CopyAzureTablesCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(StagingStorageRetentionPeriodSetCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(StagingStorageRetentionPeriodSetCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(CloudSettingsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(CloudSettingsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(ListBlobsCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(ListBlobsCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(QueuedIngestionCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(QueuedIngestionCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(QueuedIngestionOperationShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(QueuedIngestionOperationShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(QueuedIngestionOperationsDetailsShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(QueuedIngestionOperationsDetailsShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(KuiperWorkloadGroupShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(KuiperWorkloadGroupShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(EncryptionKeysCreateCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(EncryptionKeysCreateCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(KuiperAccountShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(KuiperAccountShowCommandResult value, Action`1<string> writeField);
    [ExtensionAttribute]
public static DataTable CreateDataTable(KuiperVirtualClusterShowCommandResult value, string tableName);
    [ExtensionAttribute]
public static void WriteFields(KuiperVirtualClusterShowCommandResult value, Action`1<string> writeField);
}
[ExtensionAttribute]
public static class Kusto.Data.ExtendedPolicyOrigin : object {
    [ExtensionAttribute]
public static string FastToString(PolicyOrigin that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(PolicyOrigin that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(PolicyOrigin that, PolicyOrigin flag);
    public static PolicyOrigin FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, PolicyOrigin& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(PolicyOrigin that);
    [ExtensionAttribute]
public static string FastGetDescription(PolicyOrigin that);
}
[ExtensionAttribute]
public static class Kusto.Data.ExtendedQueryConsistency : object {
    public static bool TryConvertFromString(string value, QueryConsistency& queryConsistency);
    [ExtensionAttribute]
public static string ToOptionString(QueryConsistency queryConsistency);
    [ExtensionAttribute]
public static string FastToString(QueryConsistency that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(QueryConsistency that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(QueryConsistency that, QueryConsistency flag);
    public static QueryConsistency FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, QueryConsistency& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(QueryConsistency that);
    [ExtensionAttribute]
public static string FastGetDescription(QueryConsistency that);
}
[ExtensionAttribute]
public static class Kusto.Data.ExtendedQueryDataScope : object {
    [ExtensionAttribute]
public static string FastToString(QueryDataScope that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(QueryDataScope that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(QueryDataScope that, QueryDataScope flag);
    public static QueryDataScope FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, QueryDataScope& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(QueryDataScope that);
    [ExtensionAttribute]
public static string FastGetDescription(QueryDataScope that);
}
[ExtensionAttribute]
public static class Kusto.Data.ExtendedSqlDialectKind : object {
    [ExtensionAttribute]
public static string FastToString(SqlDialectKind that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(SqlDialectKind that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(SqlDialectKind that, SqlDialectKind flag);
    public static SqlDialectKind FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, SqlDialectKind& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(SqlDialectKind that);
    [ExtensionAttribute]
public static string FastGetDescription(SqlDialectKind that);
}
[ExtensionAttribute]
public static class Kusto.Data.ExtendedTrackableOperationKind : object {
    [ExtensionAttribute]
public static bool FallsUnderIngestCategory(AdminTrackableOperationKind operation);
    [ExtensionAttribute]
public static bool FallsUnderMergeRebuildCategory(AdminTrackableOperationKind operation);
    [ExtensionAttribute]
public static bool FallsUnderExportCategory(AdminTrackableOperationKind operation);
    [ExtensionAttribute]
public static bool FallsUnderWorkloadGroupManagementCategory(AdminTrackableOperationKind operation);
    [ExtensionAttribute]
public static bool FallsUnderMaterializedViewsCategory(AdminTrackableOperationKind operation);
}
public class Kusto.Data.ExtentContainersDropCommandResult : object {
    public string DatabaseName;
    public string Result;
    public string ContainerId;
}
public class Kusto.Data.ExtentContainersRecycleCommandResult : object {
    public string DatabaseName;
    public string Result;
}
public class Kusto.Data.ExtentContainersShowCommandResult : object {
    public Guid ExtentContainerId;
    public string Url;
    public string State;
    public DateTime CreatedOn;
    public DateTime MaxDateTime;
    public bool IsRecyclable;
    public bool StoresDatabaseMetadataPointer;
    public TimeSpan HardDeletePeriod;
    public bool ActiveMetadataContainer;
    public bool MetadataContainer;
}
public class Kusto.Data.ExtentDescriptionShowCommandResult : object {
    public string Description;
}
public class Kusto.Data.ExtentDetailsShowCommandResult : object {
    public Guid ExtentId;
    public string ColumnName;
    public Guid ColumnId;
    public string DataType;
    public long SourceDataSize;
    public long EncodedDataSize;
    public long ColumnIndexSize;
    public long SegmentIndexSize;
    public long SegmentCount;
    public long BlockCount;
    public string ColumnDescription;
}
[ExtensionAttribute]
public static class Kusto.Data.ExtentedPolicyIEnumerable : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> MergePolicies(IEnumerable`1<T> policies, string partialPolicyJson);
}
public class Kusto.Data.ExtentRebuildByQueryCommandResult : object {
    public Guid OldExtentId;
    public Guid NewExtentId;
    public bool ShouldRetry;
    public string Error;
}
public class Kusto.Data.ExtentsAttachByMetadataCommandResult : object {
    public string DatabaseName;
    public string TableName;
    public int ExtentsAttached;
}
public class Kusto.Data.ExtentsDropCommandResult : object {
    public Guid ExtentId;
    public string TableName;
    public DateTime CreatedOn;
}
public class Kusto.Data.ExtentsDropFromDatabasesCommandResult : object {
    public string DatabaseName;
    public string Result;
}
[DataContractAttribute]
public class Kusto.Data.ExtentsMergeCapacity : object {
    private static long c_defaultMaximumConcurrentOperationsPerNode;
    private static long c_defaultMinimumConcurrentOperationsPerNode;
    public static ExtentsMergeCapacity Default;
    [JsonPropertyAttribute("MinimumConcurrentOperationsPerNode")]
[DataMemberAttribute]
private long m_minimumConcurrentOperationsPerNode;
    [JsonPropertyAttribute("MaximumConcurrentOperationsPerNode")]
[DataMemberAttribute]
private long m_maximumConcurrentOperationsPerNode;
    [JsonPropertyAttribute("CurrentConcurrentOperationsPerNode")]
[DataMemberAttribute]
private long m_currentConcurrentOperationsPerNode;
    [JsonIgnoreAttribute]
public long MinimumConcurrentOperationsPerNode { get; }
    [JsonIgnoreAttribute]
public long MaximumConcurrentOperationsPerNode { get; }
    [JsonIgnoreAttribute]
public long CurrentConcurrentOperationsPerNode { get; }
    public ExtentsMergeCapacity(long minimumConcurrentOperationsPerNode, long maximumConcurrentOperationsPerNode, long currentConcurrentOperationsPerNode);
    public ExtentsMergeCapacity(ExtentsMergeCapacity other);
    private static ExtentsMergeCapacity();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ExtentsMergeCapacity other);
    public virtual string ToString();
    public bool IsValid(String& errorMessage);
    private void AfterDeserialized();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public ExtentsMergeCapacity NewSetMinimumConcurrentOperationsPerNode(long minimumConcurrentOperationsPerNode);
    public ExtentsMergeCapacity NewSetMaximumConcurrentOperationsPerNode(long maximumConcurrentOperationsPerNode);
    public ExtentsMergeCapacity NewSetCurrentConcurrentOperationsPerNode(long currentConcurrentOperationsPerNode);
    public long get_MinimumConcurrentOperationsPerNode();
    public long get_MaximumConcurrentOperationsPerNode();
    public long get_CurrentConcurrentOperationsPerNode();
}
public class Kusto.Data.ExtentsMergeCommandResult : object {
    public string OriginalExtentId;
    public string ResultExtentId;
    public TimeSpan Duration;
}
[DataContractAttribute]
public class Kusto.Data.ExtentsMergeLookback : object {
    public static TimeSpan DefaultPeriod;
    public static ExtentsMergeLookback HotCache;
    [JsonPropertyAttribute("Kind")]
[DataMemberAttribute]
private ExtentsMergeLookbackPeriodKind m_kind;
    [JsonPropertyAttribute("CustomPeriod")]
[DataMemberAttribute]
private Nullable`1<TimeSpan> m_customPeriod;
    [JsonIgnoreAttribute]
public ExtentsMergeLookbackPeriodKind Kind { get; }
    [JsonIgnoreAttribute]
public Nullable`1<TimeSpan> CustomPeriod { get; }
    public ExtentsMergeLookback(ExtentsMergeLookbackPeriodKind kind, Nullable`1<TimeSpan> customPeriod);
    public ExtentsMergeLookback(ExtentsMergeLookback other);
    private static ExtentsMergeLookback();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public bool IsValid(String& errorMessage);
    public sealed virtual bool Equals(ExtentsMergeLookback other);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public ExtentsMergeLookback NewSetKind(ExtentsMergeLookbackPeriodKind kind);
    public ExtentsMergeLookback NewSetCustomPeriod(Nullable`1<TimeSpan> customPeriod);
    public ExtentsMergeLookbackPeriodKind get_Kind();
    public Nullable`1<TimeSpan> get_CustomPeriod();
}
[DataContractAttribute]
public class Kusto.Data.ExtentsMergePolicy : object {
    private static long c_defaultRowCountUpperBoundForMerge;
    private static long c_defaultOriginalSizeMBUpperBoundForMerge;
    private static long c_defaultMaxExtentsToMerge;
    private static long c_defaultMaxRangeInHours;
    private static bool c_defaultAllowRebuild;
    private static bool c_defaultAllowMerge;
    private static PolicyOrigin s_defaultOriginForDeserialization;
    private static JsonConverter s_policyShowJsonConverter;
    public static JsonSerializerSettings PolicyShowJsonSettings;
    public static ExtentsMergePolicy Default;
    public static ExtentsMergePolicy Disabled;
    [JsonPropertyAttribute("RowCountUpperBoundForMerge")]
[DataMemberAttribute]
private long m_rowCountUpperBoundForMerge;
    [JsonPropertyAttribute("OriginalSizeMBUpperBoundForMerge")]
[DataMemberAttribute]
private long m_originalSizeMBUpperBoundForMerge;
    [JsonPropertyAttribute("MaxExtentsToMerge")]
[DataMemberAttribute]
private long m_maxExtentsToMerge;
    [JsonPropertyAttribute("MaxRangeInHours")]
[DataMemberAttribute]
private long m_maxRangeInHours;
    [JsonPropertyAttribute("AllowRebuild")]
[DataMemberAttribute]
private bool m_allowRebuild;
    [JsonPropertyAttribute("AllowMerge")]
[DataMemberAttribute]
private bool m_allowMerge;
    [JsonPropertyAttribute("Lookback")]
[DataMemberAttribute]
private ExtentsMergeLookback m_lookback;
    [JsonPropertyAttribute("Origin")]
[DataMemberAttribute]
private PolicyOrigin m_origin;
    [JsonIgnoreAttribute]
public long RowCountUpperBoundForMerge { get; }
    [JsonIgnoreAttribute]
public long OriginalSizeMBUpperBoundForMerge { get; }
    [JsonIgnoreAttribute]
public long MaxExtentsToMerge { get; }
    [JsonIgnoreAttribute]
public long MaxRangeInHours { get; }
    [JsonIgnoreAttribute]
public bool AllowRebuild { get; }
    [JsonIgnoreAttribute]
public bool AllowMerge { get; }
    [JsonIgnoreAttribute]
public ExtentsMergeLookback Lookback { get; }
    [JsonIgnoreAttribute]
public PolicyOrigin Origin { get; }
    public ExtentsMergePolicy(int maxRangeInHours, PolicyOrigin origin);
    public ExtentsMergePolicy(int maxRangeInHours);
    public ExtentsMergePolicy(long rowCountUpperBoundForMerge, long originalSizeMBUpperBoundForMerge, long maxExtentsToMerge, long maxRangeInHours, bool allowRebuild, bool allowMerge, ExtentsMergeLookback lookback, PolicyOrigin origin);
    public ExtentsMergePolicy(ExtentsMergePolicy other);
    private static ExtentsMergePolicy();
    public ExtentsMergePolicy Merge(string partialPolicyJson);
    public static ExtentsMergePolicy GetEffectiveExtentsMergePolicyForTable(ExtentsMergePolicy databaseMergePolicy, ExtentsMergePolicy tableMergePolicy);
    public bool IsValid(String& errorMessage);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public sealed virtual object Clone();
    private void AfterDeserialized();
    public bool EqualsIgnoreOrigin(ExtentsMergePolicy other);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public ExtentsMergePolicy NewSetRowCountUpperBoundForMerge(long rowCountUpperBoundForMerge);
    public ExtentsMergePolicy NewSetOriginalSizeMBUpperBoundForMerge(long originalSizeMBUpperBoundForMerge);
    public ExtentsMergePolicy NewSetMaxExtentsToMerge(long maxExtentsToMerge);
    public ExtentsMergePolicy NewSetMaxRangeInHours(long maxRangeInHours);
    public ExtentsMergePolicy NewSetAllowRebuild(bool allowRebuild);
    public ExtentsMergePolicy NewSetAllowMerge(bool allowMerge);
    public ExtentsMergePolicy NewSetLookback(ExtentsMergeLookback lookback);
    public ExtentsMergePolicy NewSetOrigin(PolicyOrigin origin);
    public long get_RowCountUpperBoundForMerge();
    public long get_OriginalSizeMBUpperBoundForMerge();
    public long get_MaxExtentsToMerge();
    public long get_MaxRangeInHours();
    public bool get_AllowRebuild();
    public bool get_AllowMerge();
    public ExtentsMergeLookback get_Lookback();
    public PolicyOrigin get_Origin();
}
public class Kusto.Data.ExtentsMetadataShowCommandResult : object {
    public Guid ExtentId;
    public string DatabaseName;
    public string TableName;
    public string ExtentMetadata;
}
public class Kusto.Data.ExtentsMoveCommandResult : object {
    public string OriginalExtentId;
    public string ResultExtentId;
    public string Details;
}
[DataContractAttribute]
public class Kusto.Data.ExtentsPartitionCapacity : object {
    private long c_defaultClusterMaximumConcurrentOperations;
    private long c_defaultClusterMinimumConcurrentOperations;
    private int c_defaultExtentsRebuildConcurrencyPerOperation;
    private int c_defaultExtentsPartitionConcurrencyPerOperation;
    public static ExtentsPartitionCapacity Default;
    [JsonPropertyAttribute("ClusterMinimumConcurrentOperations")]
[DataMemberAttribute]
private long m_clusterMinimumConcurrentOperations;
    [JsonPropertyAttribute("ClusterMaximumConcurrentOperations")]
[DataMemberAttribute]
private long m_clusterMaximumConcurrentOperations;
    [JsonPropertyAttribute("ClusterCurrentConcurrentOperations")]
[DataMemberAttribute]
private long m_clusterCurrentConcurrentOperations;
    [JsonPropertyAttribute("ExtentsRebuildMaxConcurrencyPerOperation")]
[DataMemberAttribute]
private int m_extentsRebuildMaxConcurrencyPerOperation;
    [JsonPropertyAttribute("ExtentsPartitionMaxConcurrencyPerOperation")]
[DataMemberAttribute]
private int m_extentsPartitionMaxConcurrencyPerOperation;
    [JsonIgnoreAttribute]
public long ClusterMinimumConcurrentOperations { get; }
    [JsonIgnoreAttribute]
public long ClusterMaximumConcurrentOperations { get; }
    [JsonIgnoreAttribute]
public long ClusterCurrentConcurrentOperations { get; }
    [JsonIgnoreAttribute]
public int ExtentsRebuildMaxConcurrencyPerOperation { get; }
    [JsonIgnoreAttribute]
public int ExtentsPartitionMaxConcurrencyPerOperation { get; }
    public ExtentsPartitionCapacity(long clusterMinimumConcurrentOperations, long clusterMaximumConcurrentOperations, long clusterCurrentConcurrentOperations, int extentsRebuildMaxConcurrencyPerOperation, int extentsPartitionMaxConcurrencyPerOperation);
    public ExtentsPartitionCapacity(ExtentsPartitionCapacity other);
    private static ExtentsPartitionCapacity();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ExtentsPartitionCapacity other);
    public bool IsValid(String& errorMessage);
    public virtual string ToString();
    private void AfterDeserialized();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public ExtentsPartitionCapacity NewSetClusterMinimumConcurrentOperations(long clusterMinimumConcurrentOperations);
    public ExtentsPartitionCapacity NewSetClusterMaximumConcurrentOperations(long clusterMaximumConcurrentOperations);
    public ExtentsPartitionCapacity NewSetClusterCurrentConcurrentOperations(long clusterCurrentConcurrentOperations);
    public ExtentsPartitionCapacity NewSetExtentsRebuildMaxConcurrencyPerOperation(int extentsRebuildMaxConcurrencyPerOperation);
    public ExtentsPartitionCapacity NewSetExtentsPartitionMaxConcurrencyPerOperation(int extentsPartitionMaxConcurrencyPerOperation);
    public long get_ClusterMinimumConcurrentOperations();
    public long get_ClusterMaximumConcurrentOperations();
    public long get_ClusterCurrentConcurrentOperations();
    public int get_ExtentsRebuildMaxConcurrencyPerOperation();
    public int get_ExtentsPartitionMaxConcurrencyPerOperation();
}
public class Kusto.Data.ExtentsPartitionCommandResult : object {
    public string SourceExtentId;
    public string Result;
}
public class Kusto.Data.ExtentsPartitionMetadataAlterCommandResult : object {
    public string OriginalExtentId;
    public string ResultExtentId;
    public string Details;
}
[DataContractAttribute]
public class Kusto.Data.ExtentsPurgeRebuildCapacity : object {
    public static long DefaultMaximumConcurrentOperationsPerNode;
    [JsonPropertyAttribute("MaximumConcurrentOperationsPerNode")]
[DataMemberAttribute]
private long m_maximumConcurrentOperationsPerNode;
    [JsonIgnoreAttribute]
public long MaximumConcurrentOperationsPerNode { get; }
    public ExtentsPurgeRebuildCapacity(long maximumConcurrentOperationsPerNode);
    public ExtentsPurgeRebuildCapacity(ExtentsPurgeRebuildCapacity other);
    private static ExtentsPurgeRebuildCapacity();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(ExtentsPurgeRebuildCapacity other);
    public virtual string ToString();
    public bool IsValid(String& errorMessage);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public ExtentsPurgeRebuildCapacity NewSetMaximumConcurrentOperationsPerNode(long maximumConcurrentOperationsPerNode);
    public long get_MaximumConcurrentOperationsPerNode();
}
public class Kusto.Data.ExtentsShowCommandResult : object {
    public Guid ExtentId;
    public string DatabaseName;
    public string TableName;
    public DateTime MaxCreatedOn;
    public double OriginalSize;
    public double ExtentSize;
    public double CompressedSize;
    public double IndexSize;
    public long Blocks;
    public long Segments;
    public string ReservedSlot1;
    public string ReservedSlot2;
    public string ExtentContainerId;
    public long RowCount;
    public DateTime MinCreatedOn;
    public string Tags;
    public string Kind;
    public string ReservedSlot3;
    public long DeletedRowCount;
}
public class Kusto.Data.ExtentsShowDetailsCommandResult : object {
    public Guid ExtentId;
    public string DatabaseName;
    public string TableName;
    public DateTime MaxCreatedOn;
    public double OriginalSize;
    public double ExtentSize;
    public double CompressedSize;
    public double IndexSize;
    public long Blocks;
    public long Segments;
    public string AssignedDataNodes;
    public string ReservedSlot1;
    public string ExtentContainerId;
    public long RowCount;
    public DateTime MinCreatedOn;
    public string Tags;
    public string Kind;
    public string Partition;
    public long DeletedRowCount;
}
[DataContractAttribute]
public class Kusto.Data.ExtentsShowFilteringRuntimePolicy : object {
    private static int c_defaultMaximumTagsLength;
    public static int c_lowMaximumResultsCount;
    public static int c_highMaximumResultsCount;
    private static int c_defaultMinimumExtentSize;
    public static ExtentsShowFilteringRuntimePolicy ExtentsMergeLogicDefault;
    public static ExtentsShowFilteringRuntimePolicy DataMigrationLogicDefault;
    public static ExtentsShowFilteringRuntimePolicy ExtentsPartitioningLogicDefault;
    public static ExtentsShowFilteringRuntimePolicy Detailed;
    public static ExtentsShowFilteringRuntimePolicy HotCacheOnly;
    public static ExtentsShowFilteringRuntimePolicy IncludeHiddenTables;
    public static ExtentsShowFilteringRuntimePolicy NoFilters;
    [JsonPropertyAttribute("ExcludeColumnsUnusedByMergeLogic")]
[DataMemberAttribute]
private bool m_excludeColumnsUnusedByMergeLogic;
    [JsonPropertyAttribute("ExcludeExtentsDisabledForRebuildAndMerge")]
[DataMemberAttribute]
private bool m_excludeExtentsDisabledForRebuildAndMerge;
    [JsonPropertyAttribute("ExcludeAboveRowCountUpperBound")]
[DataMemberAttribute]
private bool m_excludeAboveRowCountUpperBound;
    [JsonPropertyAttribute("ExcludeAboveMaxRowCount")]
[DataMemberAttribute]
private bool m_excludeAboveMaxRowCount;
    [JsonPropertyAttribute("ExcludeAboveMaxExtentSize")]
[DataMemberAttribute]
private bool m_excludeAboveMaxExtentSize;
    [JsonPropertyAttribute("ExcludeAboveMaxOriginalSize")]
[DataMemberAttribute]
private bool m_excludeAboveMaxOriginalSize;
    [JsonPropertyAttribute("ExcludeAboveShardingPolicyMaxSizes")]
[DataMemberAttribute]
private bool m_excludeAboveShardingPolicyMaxSizes;
    [JsonPropertyAttribute("ExcludeExtentsNotInHotCache")]
[DataMemberAttribute]
private bool m_excludeExtentsNotInHotCache;
    [JsonPropertyAttribute("ExcludeReadOnlyDatabases")]
[DataMemberAttribute]
private bool m_excludeReadOnlyDatabases;
    [JsonPropertyAttribute("ExcludeHomogeneousExtents")]
[DataMemberAttribute]
private bool m_excludeHomogeneousExtents;
    [JsonPropertyAttribute("ExcludeNonPartitionedTables")]
[DataMemberAttribute]
private bool m_excludeNonPartitionedTables;
    [JsonPropertyAttribute("ExcludeNonDropByTags")]
[DataMemberAttribute]
private bool m_excludeNonDropByTags;
    [JsonPropertyAttribute("IncludeDataNodesAssignment")]
[DataMemberAttribute]
private bool m_includeDataNodesAssignment;
    [JsonPropertyAttribute("IncludePartitionDetails")]
[DataMemberAttribute]
private bool m_includePartitionDetails;
    [JsonPropertyAttribute("MaximumResultsCount")]
[DataMemberAttribute]
private long m_maximumResultsCount;
    [JsonPropertyAttribute("MinimumExtentsPerTable")]
[DataMemberAttribute]
private long m_minimumExtentsPerTable;
    [JsonPropertyAttribute("MaximumTagsLength")]
[DataMemberAttribute]
private long m_maximumTagsLength;
    [JsonPropertyAttribute("MinimumExtentSize")]
[DataMemberAttribute]
private long m_minimumExtentSize;
    [JsonPropertyAttribute("ExcludeHiddenTables")]
[DataMemberAttribute]
private bool m_excludeHiddenTables;
    [JsonPropertyAttribute("ExcludeBeforeMergeLookbackPeriod")]
[DataMemberAttribute]
private bool m_excludeBeforeMergeLookbackPeriod;
    [JsonPropertyAttribute("ExcludeCompactionCandidates")]
[DataMemberAttribute]
private bool m_excludeCompactionCandidates;
    [JsonPropertyAttribute("ExcludeColdExtentsBeforeMergeLookbackPeriod")]
[DataMemberAttribute]
private bool m_excludeColdExtentsBeforeMergeLookbackPeriod;
    [JsonIgnoreAttribute]
public bool ExcludeColumnsUnusedByMergeLogic { get; }
    [JsonIgnoreAttribute]
public bool ExcludeExtentsDisabledForRebuildAndMerge { get; }
    [JsonIgnoreAttribute]
public bool ExcludeAboveRowCountUpperBound { get; }
    [JsonIgnoreAttribute]
public bool ExcludeAboveMaxRowCount { get; }
    [JsonIgnoreAttribute]
public bool ExcludeAboveMaxExtentSize { get; }
    [JsonIgnoreAttribute]
public bool ExcludeAboveMaxOriginalSize { get; }
    [JsonIgnoreAttribute]
public bool ExcludeAboveShardingPolicyMaxSizes { get; }
    [JsonIgnoreAttribute]
public bool ExcludeExtentsNotInHotCache { get; }
    [JsonIgnoreAttribute]
public bool ExcludeReadOnlyDatabases { get; }
    [JsonIgnoreAttribute]
public bool ExcludeHomogeneousExtents { get; }
    [JsonIgnoreAttribute]
public bool ExcludeNonPartitionedTables { get; }
    [JsonIgnoreAttribute]
public bool ExcludeNonDropByTags { get; }
    [JsonIgnoreAttribute]
public bool IncludeDataNodesAssignment { get; }
    [JsonIgnoreAttribute]
public bool IncludePartitionDetails { get; }
    [JsonIgnoreAttribute]
public long MaximumResultsCount { get; }
    [JsonIgnoreAttribute]
public long MinimumExtentsPerTable { get; }
    [JsonIgnoreAttribute]
public long MaximumTagsLength { get; }
    [JsonIgnoreAttribute]
public long MinimumExtentSize { get; }
    [JsonIgnoreAttribute]
public bool ExcludeHiddenTables { get; }
    [JsonIgnoreAttribute]
public bool ExcludeBeforeMergeLookbackPeriod { get; }
    [JsonIgnoreAttribute]
public bool ExcludeCompactionCandidates { get; }
    [JsonIgnoreAttribute]
public bool ExcludeColdExtentsBeforeMergeLookbackPeriod { get; }
    public ExtentsShowFilteringRuntimePolicy(bool excludeColumnsUnusedByMergeLogic, bool excludeExtentsDisabledForRebuildAndMerge, bool excludeAboveRowCountUpperBound, bool excludeAboveMaxRowCount, bool excludeAboveMaxExtentSize, bool excludeAboveMaxOriginalSize, bool excludeAboveShardingPolicyMaxSizes, bool excludeExtentsNotInHotCache, bool excludeReadOnlyDatabases, bool excludeHomogeneousExtents, bool excludeNonPartitionedTables, bool excludeNonDropByTags, bool includeDataNodesAssignment, bool includePartitionDetails, long maximumResultsCount, long minimumExtentsPerTable, long maximumTagsLength, long minimumExtentSize, bool excludeHiddenTables, bool excludeBeforeMergeLookbackPeriod, bool excludeCompactionCandidates, bool excludeColdExtentsBeforeMergeLookbackPeriod);
    public ExtentsShowFilteringRuntimePolicy(ExtentsShowFilteringRuntimePolicy other);
    private static ExtentsShowFilteringRuntimePolicy();
    public virtual string ToString();
    public ExtentsShowFilteringRuntimePolicy NewSetDetailed();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeColumnsUnusedByMergeLogic(bool excludeColumnsUnusedByMergeLogic);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeExtentsDisabledForRebuildAndMerge(bool excludeExtentsDisabledForRebuildAndMerge);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeAboveRowCountUpperBound(bool excludeAboveRowCountUpperBound);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeAboveMaxRowCount(bool excludeAboveMaxRowCount);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeAboveMaxExtentSize(bool excludeAboveMaxExtentSize);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeAboveMaxOriginalSize(bool excludeAboveMaxOriginalSize);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeAboveShardingPolicyMaxSizes(bool excludeAboveShardingPolicyMaxSizes);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeExtentsNotInHotCache(bool excludeExtentsNotInHotCache);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeReadOnlyDatabases(bool excludeReadOnlyDatabases);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeHomogeneousExtents(bool excludeHomogeneousExtents);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeNonPartitionedTables(bool excludeNonPartitionedTables);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeNonDropByTags(bool excludeNonDropByTags);
    public ExtentsShowFilteringRuntimePolicy NewSetIncludeDataNodesAssignment(bool includeDataNodesAssignment);
    public ExtentsShowFilteringRuntimePolicy NewSetIncludePartitionDetails(bool includePartitionDetails);
    public ExtentsShowFilteringRuntimePolicy NewSetMaximumResultsCount(long maximumResultsCount);
    public ExtentsShowFilteringRuntimePolicy NewSetMinimumExtentsPerTable(long minimumExtentsPerTable);
    public ExtentsShowFilteringRuntimePolicy NewSetMaximumTagsLength(long maximumTagsLength);
    public ExtentsShowFilteringRuntimePolicy NewSetMinimumExtentSize(long minimumExtentSize);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeHiddenTables(bool excludeHiddenTables);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeBeforeMergeLookbackPeriod(bool excludeBeforeMergeLookbackPeriod);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeCompactionCandidates(bool excludeCompactionCandidates);
    public ExtentsShowFilteringRuntimePolicy NewSetExcludeColdExtentsBeforeMergeLookbackPeriod(bool excludeColdExtentsBeforeMergeLookbackPeriod);
    public bool get_ExcludeColumnsUnusedByMergeLogic();
    public bool get_ExcludeExtentsDisabledForRebuildAndMerge();
    public bool get_ExcludeAboveRowCountUpperBound();
    public bool get_ExcludeAboveMaxRowCount();
    public bool get_ExcludeAboveMaxExtentSize();
    public bool get_ExcludeAboveMaxOriginalSize();
    public bool get_ExcludeAboveShardingPolicyMaxSizes();
    public bool get_ExcludeExtentsNotInHotCache();
    public bool get_ExcludeReadOnlyDatabases();
    public bool get_ExcludeHomogeneousExtents();
    public bool get_ExcludeNonPartitionedTables();
    public bool get_ExcludeNonDropByTags();
    public bool get_IncludeDataNodesAssignment();
    public bool get_IncludePartitionDetails();
    public long get_MaximumResultsCount();
    public long get_MinimumExtentsPerTable();
    public long get_MaximumTagsLength();
    public long get_MinimumExtentSize();
    public bool get_ExcludeHiddenTables();
    public bool get_ExcludeBeforeMergeLookbackPeriod();
    public bool get_ExcludeCompactionCandidates();
    public bool get_ExcludeColdExtentsBeforeMergeLookbackPeriod();
    public sealed virtual bool Equals(ExtentsShowFilteringRuntimePolicy other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Kusto.Data.ExtentsShowForExtentsManagementLogicCommandResult : object {
    public Guid ExtentId;
    public string DatabaseName;
    public string TableName;
    public DateTime MinCreatedOn;
    public DateTime MaxCreatedOn;
    public double ExtentSize;
    public string AssignedDataNodes;
    public string ExtentContainerId;
    public long RowCount;
    public string Tags;
    public double OriginalSize;
    public string Kind;
    public string Partition;
    public int TagsLength;
}
public static class Kusto.Data.ExtentTagging : object {
    public static string TagsPropertyName;
    public static string IngestIfNotExistsPropertyName;
    public static string DropByPrefix;
    public static string IngestByPrefix;
    public static string GetCslPropertyName();
    public static string GetDropByPrefix();
    public static string GetIngestByPrefix();
    public static string GetIngestIfNotExistsPropertyName();
    public static string GetCslPropertyValue(IEnumerable`1<string> tags);
    public static string GetCslPropertyValue(HashSet`1<string> tags);
    public static ImmutableHashSet`1<string> FromCslPropertyValueAsImmutableHashSet(string serializedTags, string propertyName);
    public static HashSet`1<string> FromCslPropertyValueAsHashSet(string serializedTags, string propertyName);
    public static string ToStringIdentifierByDropByTagsFromJson(string tagsStr);
    public static string ToStringIdentifierByDropByTagsFromTagsPrint(string tagsStr);
    public static bool AreDropByTagsHomogenous(IEnumerable`1<IEnumerable`1<string>> allTags);
    public static string ToStringIdentifierByDropByTags(ImmutableHashSet`1<string> tags);
    public static ImmutableHashSet`1<string> ImmutableHashSetFromTagsStringPrint(string tagsStr);
    public static string PrintTags(IEnumerable`1<string> tags);
    public static string PrintDropByTags(IEnumerable`1<string> tags);
    private static bool StartsWithDropByPrefix(string value);
    private static T DeserializeStringCollectionOrThrow(string serializedCollection, string propertyName, Func`1<T> getDefaultEmptyResult);
}
public class Kusto.Data.ExtentTaggingAggregatorKeyComparator : object {
    public sealed virtual int GetHashCodeForAggregation(string str);
    public sealed virtual bool IsEqualsForAggregation(string str, string otherStr);
}
public class Kusto.Data.ExtentTagsAlterCommandResult : object {
    public string OriginalExtentId;
    public string ResultExtentId;
    public string ResultExtentTags;
    public string Details;
}
[DataContractAttribute]
public class Kusto.Data.ExtentTagsRetentionPolicy : object {
    [JsonPropertyAttribute("TagPrefix")]
[DataMemberAttribute]
private string m_tagPrefix;
    [JsonPropertyAttribute("RetentionPeriod")]
[DataMemberAttribute]
private TimeSpan m_retentionPeriod;
    [JsonIgnoreAttribute]
public string TagPrefix { get; }
    [JsonIgnoreAttribute]
public TimeSpan RetentionPeriod { get; }
    public ExtentTagsRetentionPolicy(string tagPrefix, TimeSpan retentionPeriod);
    public ExtentTagsRetentionPolicy(ExtentTagsRetentionPolicy other);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public bool IsValid(String& errorMessage);
    public sealed virtual bool Equals(ExtentTagsRetentionPolicy other);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public ExtentTagsRetentionPolicy NewSetTagPrefix(string tagPrefix);
    public ExtentTagsRetentionPolicy NewSetRetentionPeriod(TimeSpan retentionPeriod);
    public string get_TagPrefix();
    public TimeSpan get_RetentionPeriod();
}
public class Kusto.Data.ExternalTableCachedTableIngestionResult : object {
    public string ArtifactUri;
    public bool HasErrors;
    public JArray DataIngestCommandResults;
}
public class Kusto.Data.ExternalTableInternalCatalogRefreshResult : object {
    public string ExternalTableName;
    public long Version;
    public DateTime CatalogLastUpdate;
}
public class Kusto.Data.ExternalTableSampleUrisResult : object {
    public string Uri;
}
public class Kusto.Data.ExternalTableShowArtifactsResult : object {
    public string Uri;
    public long Size;
    public JObject Partition;
}
public class Kusto.Data.ExternalTableShowCommandResult : object {
    public string TableName;
    public string TableType;
    public string Folder;
    public string DocString;
    public string Properties;
    public JArray ConnectionStrings;
    public JArray Partitions;
    public string PathFormat;
    public string Catalog;
}
public class Kusto.Data.FeatureFlagsShowCommandResult : object {
    public string Name;
    public string Value;
}
public class Kusto.Data.FlushTracesCommandResult : object {
    public string NodeId;
    public bool FlushedSuccessfully;
}
public class Kusto.Data.FollowerDatabasesShowCommandResult : object {
    public string DatabaseName;
    public string LeaderClusterMetadataPath;
    public string CachingPolicyOverride;
    public string AuthorizedPrincipalsOverride;
    public string AuthorizedPrincipalsModificationKind;
    public bool IsAutoPrefetchEnabled;
    public string TableMetadataOverrides;
    public string CachingPoliciesModificationKind;
    public string ChildEntities;
    public string OriginalDatabaseName;
}
public class Kusto.Data.FreshnessShowCommandResult : object {
    public string LastTimeStampUtc;
    public string Freshness;
    public int thresholdInSeconds;
    public bool IsFresh;
}
public class Kusto.Data.FunctionDropCommandResult : object {
    public string Name;
}
public class Kusto.Data.FunctionShowCommandResult : object {
    public string Name;
    public string Parameters;
    public string Body;
    public string Folder;
    public string DocString;
}
public class Kusto.Data.FunctionShowSchemaCommandResult : object {
    public string FunctionName;
    public string Schema;
    public string DatabaseName;
    public string Folder;
    public string DocString;
}
[DataContractAttribute]
public class Kusto.Data.GetIngestionQueuesCommandResult : object {
    [DataMemberAttribute]
public string IngestionSource;
    [DataMemberAttribute]
public string QueueType;
    [DataMemberAttribute]
public string QueueName;
    [DataMemberAttribute]
public string StorageAccountName;
    [DataMemberAttribute]
public string Uri;
    [DataMemberAttribute]
public string IngestionSourceType;
    [DataMemberAttribute]
public string StorageAccountAccessMode;
    [DataMemberAttribute]
public bool StorageAccountRemoteRegion;
    [DataMemberAttribute]
public string QueueDrainUntil;
}
[DataContractAttribute]
public class Kusto.Data.GetIngestionQueuesLengthsCommandResult : object {
    [DataMemberAttribute]
public string QueueName;
    [DataMemberAttribute]
public int Length;
    [DataMemberAttribute]
public TimeSpan OldestMessageAge;
    [DataMemberAttribute]
[DefaultValueAttribute("0")]
[JsonPropertyAttribute]
public int LengthThreshold;
    [DataMemberAttribute]
[DefaultValueAttribute("00:00:00")]
[JsonPropertyAttribute]
public TimeSpan AgeThreshold;
    [DataMemberAttribute]
public bool IsLagging;
    [DataMemberAttribute]
[JsonPropertyAttribute]
public string LaggingReason;
    [DataMemberAttribute]
public string QueueType;
    [DataMemberAttribute]
public string ComponentType;
    [DataMemberAttribute]
public string ComponentName;
}
[DataContractAttribute]
public class Kusto.Data.GetKustoTokenCommandResult : object {
    [DataMemberAttribute]
public string AuthorizationContext;
}
public class Kusto.Data.GetLaggingQueuesCommandResult : object {
    public string QueueName;
    public int Length;
    public int Threshold;
}
public class Kusto.Data.GetNumberOfAvailableStorageAccountsInCmResult : object {
    public int AvailableStorageAccounts;
}
public class Kusto.Data.GroupIdInformationShowCommandResult : object {
    public string Result;
}
public class Kusto.Data.HealthShowCommandResult : object {
    public bool IsHealthy;
    public string EntityName;
    public string EntityType;
    public string Status;
    public string Details;
    public DateTime SnapshotTime;
}
public interface Kusto.Data.IKustoDataAggregatorKeyComparator {
    public abstract virtual int GetHashCodeForAggregation(string str);
    public abstract virtual bool IsEqualsForAggregation(string str, string otherStr);
}
public abstract class Kusto.Data.Impl.KustoConsoleToolBase : object {
    private static KustoConsoleToolBase s_instance;
    private String[] m_args;
    private KustoConsoleToolCommandLineArgs m_consoleToolCommandLineArgs;
    private KustoConsoleToolCommandLineArgsVerbose m_consoleToolCommandLineArgsVerbose;
    private KustoConsoleToolCommandLineArgsInternal m_consoleToolCommandLineArgsInternal;
    private TranscriptLogger`1<ConsoleColor> m_logger;
    protected ILogger`1<ConsoleColor> Logger { get; }
    protected KustoConsoleToolCommandLineArgs ConsoleToolCommandLineArgs { get; }
    protected KustoConsoleToolCommandLineArgsVerbose ConsoleToolCommandLineArgsVerbose { get; }
    protected KustoConsoleToolCommandLineArgsInternal KustoConsoleToolCommandLineArgsInternal { get; }
    public KustoConsoleToolBase(String[] args);
    protected int Start(Object[] simpleTargets, string envVarName, Object[] verboseTargets, Object[] internalTargets);
    protected ILogger`1<ConsoleColor> get_Logger();
    protected KustoConsoleToolCommandLineArgs get_ConsoleToolCommandLineArgs();
    protected KustoConsoleToolCommandLineArgsVerbose get_ConsoleToolCommandLineArgsVerbose();
    protected KustoConsoleToolCommandLineArgsInternal get_KustoConsoleToolCommandLineArgsInternal();
    protected abstract virtual int Run();
}
public class Kusto.Data.Impl.KustoConsoleToolCommandLineArgs : object {
    [CommandLineArgAttribute("help", "Get basic help and quit", "Mono.Cecil.CustomAttributeArgument[]")]
public bool Help;
    [CommandLineArgAttribute("verboseHelp", "Get help and quit; no skimping over advanced command-line switches", "Mono.Cecil.CustomAttributeArgument[]")]
public bool VerboseHelp;
}
public class Kusto.Data.Impl.KustoConsoleToolCommandLineArgsInternal : object {
    [CommandLineArgAttribute("helpi", "Get internal help and quit")]
public bool InternalHelp;
    [CommandLineArgAttribute("breakOnStart", "If set to 'true' or 'console', breaks into the debugger on startup")]
public string BreakOnStart;
    [CommandLineArgAttribute("devTracing", "If set, write trace logs to a local directory (by default, 'RollingLogs' in the current directory, or can be modified by setting the switch value).")]
public string DevTracing;
}
public class Kusto.Data.Impl.KustoConsoleToolCommandLineArgsVerbose : object {
    [CommandLineArgAttribute("transcript", "The name of a transcript file to tee-off all output to")]
public string Transcript;
    [CommandLineArgAttribute("logToConsole", "If enabled (the default), output is sent to the console")]
public bool LogToConsole;
    [CommandLineArgAttribute("promiscuousMode", "If set, allows connecting to any URI, not just well-known/trusted Kusto endpoints; cannot be modified following startup")]
public bool PromiscuousMode;
    [CommandLineArgAttribute("allowAccessToLocalSecrets", "If set, allows Kusto connection strings to reference local secrets (such as locally-installed certificates and managed identities)")]
public bool AllowAccessToLocalSecrets;
}
public class Kusto.Data.IngestInlineResult : object {
    public Guid ExtentId;
}
[ExtensionAttribute]
public static class Kusto.Data.Ingestion.ExtendedIngestionMappingKind : object {
    [ExtensionAttribute]
public static string FastToString(IngestionMappingKind that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(IngestionMappingKind that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(IngestionMappingKind that, IngestionMappingKind flag);
    public static IngestionMappingKind FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, IngestionMappingKind& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(IngestionMappingKind that);
    [ExtensionAttribute]
public static string FastGetDescription(IngestionMappingKind that);
}
[DataContractAttribute]
public enum Kusto.Data.Ingestion.IngestionMappingKind : Enum {
    public int value__;
    [EnumMemberAttribute]
public static IngestionMappingKind Unknown;
    [EnumMemberAttribute]
public static IngestionMappingKind Csv;
    [EnumMemberAttribute]
public static IngestionMappingKind Json;
    [EnumMemberAttribute]
public static IngestionMappingKind Avro;
    [EnumMemberAttribute]
public static IngestionMappingKind Parquet;
    [EnumMemberAttribute]
public static IngestionMappingKind SStream;
    [EnumMemberAttribute]
public static IngestionMappingKind Orc;
    [EnumMemberAttribute]
public static IngestionMappingKind ApacheAvro;
    [EnumMemberAttribute]
public static IngestionMappingKind W3CLogFile;
}
[DataContractAttribute]
public class Kusto.Data.IngestionBatchingPolicy : object {
    public static TimeSpan s_defaultMaximumBatchingTimeSpan;
    public static int s_defaultMaximumNumberOfItems;
    public static long s_defaultMaximumRawDataSizeMB;
    public static TimeSpan s_freeTierAndTridentDefaultMaximumBatchingTimeSpan;
    private static TimeSpan s_maximumBatchingTimeSpanMinValue;
    private static int s_maximumNumberOfItemsMinValue;
    private static long s_maximumRawDataSizeMBMinValue;
    public static IngestionBatchingPolicy Default;
    public static IngestionBatchingPolicy FreeTierAndTridentDefault;
    [JsonPropertyAttribute("MaximumBatchingTimeSpan")]
[DataMemberAttribute]
private TimeSpan m_maximumBatchingTimeSpan;
    [JsonPropertyAttribute("MaximumNumberOfItems")]
[DataMemberAttribute]
private int m_maximumNumberOfItems;
    [JsonPropertyAttribute("MaximumRawDataSizeMB")]
[DataMemberAttribute]
private long m_maximumRawDataSizeMB;
    [JsonPropertyAttribute("Origin")]
[DataMemberAttribute]
private PolicyOrigin m_origin;
    [JsonIgnoreAttribute]
public TimeSpan MaximumBatchingTimeSpan { get; }
    [JsonIgnoreAttribute]
public int MaximumNumberOfItems { get; }
    [JsonIgnoreAttribute]
public long MaximumRawDataSizeMB { get; }
    [JsonIgnoreAttribute]
public PolicyOrigin Origin { get; }
    public IngestionBatchingPolicy(TimeSpan maximumBatchingTimeSpan, int maximumNumberOfItems, long maximumRawDataSizeMB);
    public IngestionBatchingPolicy(TimeSpan maximumBatchingTimeSpan, int maximumNumberOfItems, long maximumRawDataSizeMB, PolicyOrigin origin);
    public IngestionBatchingPolicy(IngestionBatchingPolicy other);
    private static IngestionBatchingPolicy();
    public static IngestionBatchingPolicy GetEffectiveIngestionBatchingPolicy(IngestionBatchingPolicy tableIngestionBatchingPolicy, IngestionBatchingPolicy databaseIngestionBatchingPolicy, IngestionBatchingPolicy clusterIngestionBatchingPolicy);
    public bool IsValid(String& errorMsg);
    public virtual int GetHashCode();
    public virtual string ToString();
    public bool EqualsIgnoreOrigin(IngestionBatchingPolicy p);
    public static bool SafeEqualsIgnoreOrigin(IngestionBatchingPolicy a, IngestionBatchingPolicy b);
    public virtual bool Equals(object obj);
    public IngestionBatchingPolicy Merge(string partialPolicyJson);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public IngestionBatchingPolicy NewSetMaximumBatchingTimeSpan(TimeSpan maximumBatchingTimeSpan);
    public IngestionBatchingPolicy NewSetMaximumNumberOfItems(int maximumNumberOfItems);
    public IngestionBatchingPolicy NewSetMaximumRawDataSizeMB(long maximumRawDataSizeMB);
    public IngestionBatchingPolicy NewSetOrigin(PolicyOrigin origin);
    public TimeSpan get_MaximumBatchingTimeSpan();
    public int get_MaximumNumberOfItems();
    public long get_MaximumRawDataSizeMB();
    public PolicyOrigin get_Origin();
}
[DataContractAttribute]
public class Kusto.Data.IngestionCapacity : object {
    private long c_defaultClusterMaximumConcurrentOperations;
    private double c_defaultCoreUtilizationCoefficient;
    [JsonPropertyAttribute("ClusterMaximumConcurrentOperations")]
[DataMemberAttribute]
private long m_clusterMaximumConcurrentOperations;
    [JsonPropertyAttribute("CoreUtilizationCoefficient")]
[DataMemberAttribute]
private double m_coreUtilizationCoefficient;
    [JsonIgnoreAttribute]
public long ClusterMaximumConcurrentOperations { get; }
    [JsonIgnoreAttribute]
public double CoreUtilizationCoefficient { get; }
    public IngestionCapacity(long clusterMaximumConcurrentOperations, double coreUtilizationCoefficient);
    public IngestionCapacity(IngestionCapacity other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(IngestionCapacity other);
    public bool IsValid(String& errorMessage);
    public virtual string ToString();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public IngestionCapacity NewSetClusterMaximumConcurrentOperations(long clusterMaximumConcurrentOperations);
    public IngestionCapacity NewSetCoreUtilizationCoefficient(double coreUtilizationCoefficient);
    public long get_ClusterMaximumConcurrentOperations();
    public double get_CoreUtilizationCoefficient();
}
public class Kusto.Data.IngestionDuplicateCommandResult : object {
    public string TableName;
    public string StorageContainerPath;
    public string IngestionCommandFilePath;
}
public class Kusto.Data.IngestionFailuresShowCommandResult : object {
    public Guid OperationId;
    public string Database;
    public string Table;
    public DateTime FailedOn;
    public string IngestionSourcePath;
    public string Details;
    public string FailureKind;
    public Guid RootActivityId;
    public string OperationKind;
    public bool OriginatesFromUpdatePolicy;
    public string ErrorCode;
    public string Principal;
    public bool ShouldRetry;
    public string User;
    public string ingestionProperties;
    public int NumberOfSources;
}
public class Kusto.Data.IngestionFailuresSummarizedShowCommandResult : object {
    public Guid OperationId;
    public string Database;
    public string Table;
    public DateTime FailedOn;
    public string IngestionSourcePath;
    public string Details;
    public string FailureKind;
    public Guid RootActivityId;
    public string OperationKind;
    public bool OriginatesFromUpdatePolicy;
    public string ErrorCode;
    public string Principal;
    public bool ShouldRetry;
    public string User;
}
public class Kusto.Data.IngestionMappingShowCommandResult : object {
    public string Name;
    public string Kind;
    public string Mapping;
    public DateTime LastUpdatedOn;
    public string Database;
    public string Table;
}
public enum Kusto.Data.IngestionQueueType : Enum {
    public int value__;
    public static IngestionQueueType All;
    public static IngestionQueueType InputQueue;
    public static IngestionQueueType InternalQueue;
    public static IngestionQueueType ReadyForAggregationQueue;
    public static IngestionQueueType SecuredReadyForAggregationQueue;
    public static IngestionQueueType AggregatedReadyForImportQueue;
    public static IngestionQueueType FailedIngestionsQueue;
    public static IngestionQueueType SuccessfulIngestionsQueue;
    public static IngestionQueueType AbandonedIngestionsQueue;
    public static IngestionQueueType SecuredAbandonedIngestionsQueue;
    public static IngestionQueueType InternalFailedIngestionsQueue;
    public static IngestionQueueType AbandonedInputQueues;
    public static IngestionQueueType ImporterDeadLetterQueue;
}
public class Kusto.Data.IngestionResourcesGetCommandResult : object {
    public string ResourceTypeName;
    public string StorageRoot;
}
public class Kusto.Data.IngestionResourcesGetCommandResultWithRemote : object {
    public string ResourceTypeName;
    public string StorageRoot;
    public bool RemoteStorage;
}
public class Kusto.Data.IngestionSourceAriaShowCommandResult : object {
    public string Name;
    public string BridgeServiceUri;
    public string InternalStorageAccountNames;
    public bool Enabled;
    public bool IsAriaIntEnvironment;
    public string ExternalDataSourceProperties;
}
public class Kusto.Data.IngestionSourceCosmosDbShowCommandResult : object {
    public string DataConnectionName;
    public string TargetDatabase;
    public string TargetTable;
    public string CosmosDbAccountEndPoint;
    public string CosmosDbAccountResourceId;
    public string CosmosDbDatabase;
    public string CosmosDbContainer;
    public string IngestionMappingReference;
    public Nullable`1<DateTime> RetrievalStartDate;
    public string LeaseContainerName;
    public string ManagedIdentityId;
    public string ManagedIdentityResourceId;
    public string ExternalDataSourceProperties;
}
public class Kusto.Data.IngestionSourceEventGridWithEventHubShowCommandResult : object {
    public string StorageConnectionString;
    public string EventHubConnectionString;
    public string EventHubName;
    public string AccessMode;
    public string MaxThroughputUnits;
    public string PartitionsCount;
    public bool ManagedExternally;
    public string IngestionSourceName;
    public string TargetDatabase;
    public string TargetTable;
    public string Format;
    public string IngestionMappingReference;
    public string ConsumerGroup;
    public string EventHubResourceId;
    public string EventHubSecondaryConnectionString;
    public string StorageAccountResourceId;
    public string StorageSecondaryConnectionString;
    public string BlobStorageEventType;
    public bool IgnoreFirstRecord;
    public string ManagedIdentityId;
    public string EventHubNamespaceEndpoint;
    public string EventGridResourceId;
    public string StorageAccountUrl;
    public string ManagedIdentityResourceId;
    public bool AllowMultiDatabase;
    public bool Enabled;
    public string EventHubPrimaryConnectionStringName;
    public string EventHubSecondaryConnectionStringName;
    public string StorageAccountPrimaryConnectionStringName;
    public string StorageAccountSecondaryConnectionStringName;
    public Nullable`1<DateTime> RetrievalStartDate;
    public string ExternalDataSourceProperties;
}
public class Kusto.Data.IngestionSourceEventHubShowCommandResult : object {
    public string EventHubConnectionString;
    public string EventHubName;
    public string AccessMode;
    public string MaxThroughputUnits;
    public string PartitionsCount;
    public bool ManagedExternally;
    public string IngestionSourceName;
    public string TargetDatabase;
    public string TargetTable;
    public string Format;
    public string IngestionMappingReference;
    public string ConsumerGroup;
    public string IngestionSourceType;
    public string EventHubResourceId;
    public string EventHubSecondaryConnectionString;
    public string EventSystemProperties;
    public string Compression;
    public string ManagedIdentityId;
    public string EventHubNamespaceEndpoint;
    public string ManagedIdentityResourceId;
    public bool AllowMultiDatabase;
    public bool Enabled;
    public string EventHubPrimaryConnectionStringName;
    public string EventHubSecondaryConnectionStringName;
    public string LeaseContainerName;
    public Nullable`1<DateTime> RetrievalStartDate;
    public string LeaseStorageConnectionString;
    public string ExternalResourceId;
    public string ExternalDataSourceProperties;
}
public class Kusto.Data.IngestionSourceGenevaShowCommandResult : object {
    public string Environment;
    public string MdsAccounts;
    public string ConsumerGroup;
    public string LogAnalyticsId;
    public string Namespace;
    public string Moniker;
    public string Event;
    public string Location;
    public int NumberOfVersions;
    public bool IsScrubbed;
    public string Name;
    public string PipelineType;
    public string InternalStorageAccountNames;
    public bool Enabled;
    public bool ExtractBondFieldNameWithoutLinkingPolicy;
    public string ExternalDataSourceProperties;
}
public class Kusto.Data.IngestionSourceTypesShowCommandResult : object {
    public string SourceType;
}
public class Kusto.Data.IngestionsStatusTableCreateCommandResult : object {
    public string StorageRoot;
}
public class Kusto.Data.IngestionsStatusTablesGetCommandResult : object {
    public string StorageRoot;
    public bool ActiveTable;
}
public class Kusto.Data.JournalShowCommandResult : object {
    public string Event;
    public DateTime EventTimestamp;
    public string Database;
    public string EntityName;
    public string UpdatedEntityName;
    public string EntityVersion;
    public string EntityContainerName;
    public string OriginalEntityState;
    public string UpdatedEntityState;
    public string ChangeCommand;
    public string Principal;
    public Guid RootActivityId;
    public string ClientRequestId;
    public string User;
}
public class Kusto.Data.KuiperAccountShowCommandResult : object {
    public Guid Id;
    public string Name;
    public string Version;
    public JArray Databases;
    public JArray VirtualClusters;
}
public class Kusto.Data.KuiperVirtualClusterShowCommandResult : object {
    public Guid Id;
    public string Name;
    public JArray WorkloadGroups;
}
public class Kusto.Data.KuiperWorkloadGroupShowCommandResult : object {
    public string Path;
    public JObject WorkloadGroup;
}
[DefaultMemberAttribute("Item")]
public class Kusto.Data.KustoConnectionStringBuilder : DbConnectionStringBuilder {
    private static int KeywordsCount;
    internal static String[] s_validKeywords;
    private static Dictionary`2<string, Keywords> s_keywords;
    private static string s_clientVersion;
    private static bool s_defaultStreaming;
    private static bool s_defaultPreventAccessToLocalSecretsViaKeywords;
    private string m_connectionScheme;
    private string m_dataSource;
    private string m_initialCatalog;
    private string m_userID;
    private string m_password;
    private bool m_aadFederatedSecurity;
    private bool m_dstsFederatedSecurity;
    private bool m_enforceMfa;
    private string m_authority;
    private string m_applicationClientId;
    private string m_embeddedManagedIdentity;
    private string m_applicationkey;
    private string m_applicationCertificateThumbprint;
    private string m_applicationCertificateSubjectDistinguishedName;
    private string m_applicationCertificateIssuerDistinguishedName;
    private bool m_applicationCertificateSendX5c;
    private X509Certificate2 m_applicationCertificateBlob;
    private bool m_useDstsSubjectNameBasedAuthentication;
    private string m_applicationToken;
    private string m_userToken;
    private string m_applicationNameForTracing;
    private string m_userNameForTracing;
    private string m_clientVersionForTracing;
    private string m_queryConsistency;
    private bool m_streaming;
    private bool m_uncompressed;
    private string m_namespace;
    private Func`1<Task`1<string>> m_tokenProviderCallback;
    private IKustoTokenCredentialsProvider m_kustoTokenCredentialsProvider;
    private string m_azureRegion;
    private bool m_preventAccessToLocalSecretsViaKeywords;
    private bool m_initialCatalogWasSetToDefault;
    private TokenType m_dstsTokenType;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<Task`1<ValueTuple`2<string, string>>> m_s2sTokenProviderCallback;
    [CompilerGeneratedAttribute]
private bool <EnableAzCliAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AzCliInteractiveLogin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Accept>k__BackingField;
    public bool EnableAzCliAuthentication { get; private set; }
    public bool AzCliInteractiveLogin { get; private set; }
    public static bool DefaultStreaming { get; public set; }
    public object Item { get; public set; }
    public string ConnectionScheme { get; public set; }
    public string DataSource { get; public set; }
    public string DataSourceUri { get; public set; }
    public string Hostname { get; }
    public string ServiceName { get; }
    public string InitialCatalog { get; public set; }
    internal bool InitialCatalogWasSetToDefault { get; }
    [PasswordPropertyTextAttribute("True")]
public string Password { get; public set; }
    public string UserID { get; public set; }
    public bool FederatedSecurity { get; public set; }
    public bool DstsFederatedSecurity { get; public set; }
    public bool EnforceMfa { get; public set; }
    public string Authority { get; public set; }
    [PasswordPropertyTextAttribute("True")]
public string ApplicationKey { get; public set; }
    public string ApplicationCertificateThumbprint { get; public set; }
    public string ApplicationCertificateSubjectDistinguishedName { get; public set; }
    public string ApplicationCertificateIssuerDistinguishedName { get; public set; }
    public bool ApplicationCertificateSendX5c { get; public set; }
    public X509Certificate2 ApplicationCertificateBlob { get; public set; }
    public bool UseDstsSubjectNameBasedAuthentication { get; public set; }
    public string ApplicationClientId { get; public set; }
    [ObsoleteAttribute]
public string ManagedServiceIdentity { get; public set; }
    public string EmbeddedManagedIdentity { get; public set; }
    [PasswordPropertyTextAttribute("True")]
public string ApplicationToken { get; public set; }
    [PasswordPropertyTextAttribute("True")]
public string UserToken { get; public set; }
    public Func`1<Task`1<string>> TokenProviderCallback { get; private set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public IKustoTokenCredentialsProvider KustoTokenCredentialsProvider { get; private set; }
    public string ApplicationNameForTracing { get; public set; }
    public string UserNameForTracing { get; public set; }
    public string ClientVersionForTracing { get; public set; }
    public string QueryConsistency { get; public set; }
    public bool Accept { get; public set; }
    public bool Streaming { get; public set; }
    public bool Uncompressed { get; public set; }
    public string Namespace { get; public set; }
    public bool IsFixedSize { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public string SecurityString { get; }
    public bool UsesManagedIdentityOrLocalCredentials { get; }
    public string AzureRegion { get; public set; }
    public bool PreventAccessToLocalSecretsViaKeywords { get; public set; }
    public static bool DefaultPreventAccessToLocalSecretsViaKeywords { get; public set; }
    public TokenType DstsTokenType { get; public set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<Task`1<ValueTuple`2<string, string>>> S2STokenProviderCallback { get; private set; }
    private static KustoConnectionStringBuilder();
    public KustoConnectionStringBuilder(KustoConnectionStringBuilder other);
    public KustoConnectionStringBuilder(string connectionString);
    public KustoConnectionStringBuilder(string hostAddress, string database);
    public KustoConnectionStringBuilder(string hostAddress, string database, bool inferDatabaseFromHostAddress);
    [CompilerGeneratedAttribute]
public bool get_EnableAzCliAuthentication();
    [CompilerGeneratedAttribute]
private void set_EnableAzCliAuthentication(bool value);
    [CompilerGeneratedAttribute]
public bool get_AzCliInteractiveLogin();
    [CompilerGeneratedAttribute]
private void set_AzCliInteractiveLogin(bool value);
    public KustoConnectionStringBuilder WithAadUserPromptAuthentication(string authority, string userId);
    public KustoConnectionStringBuilder WithDstsUserPromptAuthentication(string dstsInstance, string userId);
    public KustoConnectionStringBuilder WithAadApplicationKeyAuthentication(string applicationClientId, string applicationKey, string authority);
    public KustoConnectionStringBuilder WithAadApplicationThumbprintAuthentication(string applicationClientId, string applicationCertificateThumbprint, string authority);
    public KustoConnectionStringBuilder WithDstsApplicationThumbprintAuthentication(string applicationCertificateThumbprint, string dstsInstance, string applicationClientId);
    public KustoConnectionStringBuilder WithDstsApplicationSubjectAuthentication(string applicationCertificateSubjectDistinguishedName, string dstsInstance, string applicationClientId);
    public KustoConnectionStringBuilder WithDstsApplicationCertificateAuthentication(X509Certificate2 applicationCertificate, bool useSubjectNameBasedAuthentication, string dstsInstance, string applicationClientId);
    private KustoConnectionStringBuilder WithAadApplicationSubjectAndIssuerAuthenticationImpl(string applicationClientId, string applicationCertificateSubjectDistinguishedName, string applicationCertificateIssuerDistinguishedName, bool applicationCertificateSendX5c, string authority, string azureRegion);
    public KustoConnectionStringBuilder WithAadApplicationSubjectAndIssuerAuthentication(string applicationClientId, string applicationCertificateSubjectDistinguishedName, string applicationCertificateIssuerDistinguishedName, string authority, string azureRegion);
    public KustoConnectionStringBuilder WithAadApplicationSubjectAndIssuerAuthentication(string applicationClientId, string applicationCertificateSubjectDistinguishedName, string applicationCertificateIssuerDistinguishedName, bool applicationCertificateSendX5c, string authority, string azureRegion);
    public KustoConnectionStringBuilder WithAadApplicationSubjectNameAuthentication(string applicationClientId, string applicationCertificateSubjectDistinguishedName, string authority, string azureRegion);
    public KustoConnectionStringBuilder WithAadUserTokenAuthentication(string userToken);
    public KustoConnectionStringBuilder WithDstsUserTokenAuthentication(string userToken);
    public KustoConnectionStringBuilder WithAadApplicationTokenAuthentication(string applicationToken);
    public KustoConnectionStringBuilder WithAadTokenProviderAuthentication(Func`1<string> tokenProviderCallback);
    public KustoConnectionStringBuilder WithAadTokenProviderAuthentication(Func`1<Task`1<string>> tokenProviderCallback);
    public KustoConnectionStringBuilder WithAadAzureTokenCredentialsAuthentication(TokenCredential tokenCredential);
    public KustoConnectionStringBuilder WithAadDeviceCodeAuthentication(DeviceCodeCallback callback);
    public KustoConnectionStringBuilder WithAadDeviceCodeAuthentication(DeviceCodeCallback callback, string authority, string tenant);
    public KustoConnectionStringBuilder WithAadDeviceCodeAuthentication(DeviceCodeCallback callback, string authority, string tenant, string applicationClientId, string clientRedirectUr);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public KustoConnectionStringBuilder WithKustoTokenCredentialsProviderAuthentication(IKustoTokenCredentialsProvider provider);
    public KustoConnectionStringBuilder WithDstsApplicationTokenAuthentication(string applicationToken);
    public KustoConnectionStringBuilder WithAadApplicationCertificateAuthentication(string applicationClientId, X509Certificate2 applicationCertificate, string authority, bool sendX5c, string azureRegion);
    public KustoConnectionStringBuilder WithKustoBasicAuthentication(string username, string password);
    public KustoConnectionStringBuilder WithAadSystemManagedIdentity();
    public KustoConnectionStringBuilder WithAadUserManagedIdentity(string managedIdentityClientId);
    [ObsoleteAttribute("Please use WithAadSystemManagedIdentity() or WithAadUserManagedIdentity(string managedIdentityClientId) instead", "False")]
public KustoConnectionStringBuilder WithAadManagedIdentity(string embeddedManagedIdentity);
    private KustoConnectionStringBuilder WithAadManagedIdentityImpl(string managedIdentityClientId);
    public KustoConnectionStringBuilder WithAadAzCliAuthentication(bool interactive);
    public KustoConnectionStringBuilder WithAadTokenAndS2SHeaderProvidersAuthentication(Func`1<Task`1<string>> tokenProviderCallback, Func`1<Task`1<ValueTuple`2<string, string>>> s2sTokenProviderCallback);
    public virtual string ToString();
    public string ToSecureString();
    public string ToUnsecureString();
    private KustoConnectionStringBuilder CloneNoAuth();
    public void EraseCredentialsIfSet();
    private static void EraseCredentialsIfSet(String& creds);
    private static string AddIndirectProperties(string connectionString, KustoConnectionStringBuilder kcsb);
    public static bool get_DefaultStreaming();
    public static void set_DefaultStreaming(bool value);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public string get_ConnectionScheme();
    public void set_ConnectionScheme(string value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public string get_DataSourceUri();
    public void set_DataSourceUri(string value);
    public string get_Hostname();
    public string get_ServiceName();
    public string get_InitialCatalog();
    public void set_InitialCatalog(string value);
    internal bool get_InitialCatalogWasSetToDefault();
    public string get_Password();
    public void set_Password(string value);
    public string get_UserID();
    public void set_UserID(string value);
    public bool get_FederatedSecurity();
    public void set_FederatedSecurity(bool value);
    public bool get_DstsFederatedSecurity();
    public void set_DstsFederatedSecurity(bool value);
    public bool get_EnforceMfa();
    public void set_EnforceMfa(bool value);
    public string get_Authority();
    public void set_Authority(string value);
    public string get_ApplicationKey();
    public void set_ApplicationKey(string value);
    public string get_ApplicationCertificateThumbprint();
    public void set_ApplicationCertificateThumbprint(string value);
    public string get_ApplicationCertificateSubjectDistinguishedName();
    public void set_ApplicationCertificateSubjectDistinguishedName(string value);
    public string get_ApplicationCertificateIssuerDistinguishedName();
    public void set_ApplicationCertificateIssuerDistinguishedName(string value);
    public bool get_ApplicationCertificateSendX5c();
    public void set_ApplicationCertificateSendX5c(bool value);
    public X509Certificate2 get_ApplicationCertificateBlob();
    public void set_ApplicationCertificateBlob(X509Certificate2 value);
    public bool get_UseDstsSubjectNameBasedAuthentication();
    public void set_UseDstsSubjectNameBasedAuthentication(bool value);
    public string get_ApplicationClientId();
    public void set_ApplicationClientId(string value);
    public string get_ManagedServiceIdentity();
    public void set_ManagedServiceIdentity(string value);
    public string get_EmbeddedManagedIdentity();
    public void set_EmbeddedManagedIdentity(string value);
    public string get_ApplicationToken();
    public void set_ApplicationToken(string value);
    public string get_UserToken();
    public void set_UserToken(string value);
    public Func`1<Task`1<string>> get_TokenProviderCallback();
    private void set_TokenProviderCallback(Func`1<Task`1<string>> value);
    public IKustoTokenCredentialsProvider get_KustoTokenCredentialsProvider();
    private void set_KustoTokenCredentialsProvider(IKustoTokenCredentialsProvider value);
    public string get_ApplicationNameForTracing();
    public void set_ApplicationNameForTracing(string value);
    public string get_UserNameForTracing();
    public void set_UserNameForTracing(string value);
    public string get_ClientVersionForTracing();
    public void set_ClientVersionForTracing(string value);
    public string get_QueryConsistency();
    public void set_QueryConsistency(string value);
    [CompilerGeneratedAttribute]
public bool get_Accept();
    [CompilerGeneratedAttribute]
public void set_Accept(bool value);
    public bool get_Streaming();
    public void set_Streaming(bool value);
    public bool get_Uncompressed();
    public void set_Uncompressed(bool value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public virtual bool get_IsFixedSize();
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    public string get_SecurityString();
    public bool get_UsesManagedIdentityOrLocalCredentials();
    public string get_AzureRegion();
    public void set_AzureRegion(string value);
    public bool get_PreventAccessToLocalSecretsViaKeywords();
    public void set_PreventAccessToLocalSecretsViaKeywords(bool value);
    public static bool get_DefaultPreventAccessToLocalSecretsViaKeywords();
    public static void set_DefaultPreventAccessToLocalSecretsViaKeywords(bool value);
    public TokenType get_DstsTokenType();
    public void set_DstsTokenType(TokenType value);
    public Func`1<Task`1<ValueTuple`2<string, string>>> get_S2STokenProviderCallback();
    private void set_S2STokenProviderCallback(Func`1<Task`1<ValueTuple`2<string, string>>> value);
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    public virtual bool Remove(string keyword);
    public virtual bool ShouldSerialize(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
    public ClientDetails GetClientDetails(string clientInstance);
    public void SetConnectorDetails(string name, string version, string appName, string appVersion, bool sendUser, string overrideUser, ValueTuple`2[] additional);
    public void SetDataSourceOnly(string dataSource);
    private static bool DetermineDefaultPreventAccessToLocalSecretsViaKeywords();
    private void InitializeFromConnectionString(string connectionString);
    private void InitializeFromDataSourceString(string text, bool attemptToExtractInitialCatalog);
    private void InitializeFromUserInfo(string userInfo);
    internal static bool ConvertToBool(object value);
    private static string ConvertToString(object value);
    private object GetAt(Keywords index);
    private Keywords GetIndex(string keyword);
    protected virtual void GetProperties(Hashtable propertyDescriptors);
    private void Reset(Keywords index);
    private void SetValue(string keyword, string value);
    private void SetValue(string keyword, bool value);
    private void ThrowIfKeywordAccessNotAllowed(string keyword, Keywords keywordIndex, object value);
}
public static class Kusto.Data.KustoConnectionStringValidator : object {
    private static string c_embeddedManagedIdentityKeyword;
    private static string c_tokenProviderCallbackKeyword;
    private static Char[] c_CorporateCredentialsHints;
    private static KustoConnectionStringValidator();
    public static void ValidateProperties(KustoConnectionStringBuilder kcsb);
    public static bool IsValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsAnonymousAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsAadApplicationKeyAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsAadApplicationCertificateThumbprintAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsAadApplicationCertificateSubjectAndIssuerAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsAadManagedIdentityAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsDstsApplicationThumbprintAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsDstsApplicationSubjectAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsDstsApplicationCertificateBlobAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsAadApplicationCertificateAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsAadUserTokenAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsDstsUserTokenAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsAadApplicationTokenAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsAadTokenProviderAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsDstsApplicationTokenAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsBasicAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsAzCliAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsAadUsernamePasswordAuthenticationMethodValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsAadUserPromptWithCacheAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsDstsUserPromptWithCacheAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
    private static bool IsDstsManagedServiceIdentityAuthenticationModeValid(KustoConnectionStringBuilder kcsb, String& errorMessage);
}
internal class Kusto.Data.KustoPoliciesTracer : TraceSourceBase`1<KustoPoliciesTracer> {
    public string Id { get; }
    public TraceVerbosity DefaultVerbosity { get; }
    public virtual string get_Id();
    public virtual TraceVerbosity get_DefaultVerbosity();
}
public class Kusto.Data.KustoPoolsListByWorkspaceCommandResult : object {
    public string WorkspaceId;
    public string WorkspaceName;
    public string ServiceName;
    public string ServiceConfiguration;
}
public class Kusto.Data.Linq.KustoDataContext : object {
    private ICslQueryProvider m_cslQueryProvider;
    private ICslAdminProvider m_cslAdminProvider;
    private ClientRequestProperties m_requestProperties;
    private Disposer m_disposer;
    [CompilerGeneratedAttribute]
private Uri <KustoUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KustoHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebugMode>k__BackingField;
    public Uri KustoUri { get; private set; }
    public string KustoHost { get; private set; }
    public string ConnectionString { get; private set; }
    public string DefaultDatabaseName { get; public set; }
    public bool DebugMode { get; public set; }
    public bool DeferPartialQueryFailures { get; public set; }
    public KustoDataContext(ICslQueryProvider cslQueryProvider, ICslAdminProvider cslAdminProvider);
    public KustoDataContext(string connectionString);
    public KustoDataContext(KustoConnectionStringBuilder kcsb);
    public KustoDataContext(string host, string databaseName);
    [CompilerGeneratedAttribute]
public Uri get_KustoUri();
    [CompilerGeneratedAttribute]
private void set_KustoUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_KustoHost();
    [CompilerGeneratedAttribute]
private void set_KustoHost(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
private void set_ConnectionString(string value);
    public string get_DefaultDatabaseName();
    public void set_DefaultDatabaseName(string value);
    [CompilerGeneratedAttribute]
public bool get_DebugMode();
    [CompilerGeneratedAttribute]
public void set_DebugMode(bool value);
    public bool get_DeferPartialQueryFailures();
    public void set_DeferPartialQueryFailures(bool value);
    private void Initialize(KustoConnectionStringBuilder kcsb);
    public sealed virtual void Dispose();
    public void CreateDatabase();
    public void CreateDatabase(string path);
    public IEnumerable`1<DatabaseAttachCommandResult> AttachDatabase(string path, bool readOnly, bool forceDataLoad);
    public IDataReader ExecuteQuery(string query, string databaseName, ClientRequestProperties requestProperties);
    public Task`1<IDataReader> ExecuteQueryAsync(string query, string databaseName, ClientRequestProperties requestProperties);
    [AsyncStateMachineAttribute("Kusto.Data.Linq.KustoDataContext/<ExecuteQueryV2Async>d__37")]
public Task`1<ProgressiveDataSet> ExecuteQueryV2Async(string query, ClientRequestProperties properties, string databaseName);
    public IEnumerable`1<TRow> ExecuteQuery(string query, string databaseName, ClientRequestProperties requestProperties);
    public IDataReader ExecuteControlCommand(string command, string databaseName, ClientRequestProperties requestProperties);
    public Task`1<IDataReader> ExecuteControlCommandAsync(string command, string databaseName, ClientRequestProperties requestProperties);
    public IEnumerable`1<TRow> ExecuteControlCommand(string command, string databaseName, ClientRequestProperties requestProperties);
    public IEnumerable`1<TRow> ExecuteControlCommand(string command, TRow instance, string databaseName, ClientRequestProperties requestProperties);
}
public class Kusto.Data.ListBlobsCommandResult : object {
    public string BlobUri;
    public long SizeInBytes;
    public string CapturedVariables;
}
public class Kusto.Data.LocalStorageInformationForServiceTypeShowCommandResult : object {
    public string LocalStorageName;
    public string CleanOnRoleRecycle;
    public string SizeInMb;
    public string SizeInBytes;
    public string SizeInBytesForQuota;
    public string DiskName;
    public string Path;
    public Nullable`1<bool> IsStatic;
}
public class Kusto.Data.MaterializedViewFailuresCommandResult : object {
    public DateTime Timestamp;
    public string OperationId;
    public string Name;
    public DateTime LastSuccessRun;
    public string FailureKind;
    public string Details;
}
public class Kusto.Data.MaterializedViewRestoreCommandResult : object {
    public string Result;
    public string FailureReason;
    public DateTime MaterializedTo;
}
public class Kusto.Data.MaterializedViewRunCommandResult : object {
    public Guid ExtentId;
    public string Source;
    public long NumRecords;
    public string EndCursor;
}
[DataContractAttribute]
public class Kusto.Data.MaterializedViewsCapacity : object {
    private static long c_defaultClusterMinimumConcurrentOperations;
    private static long c_defaultClusterMaximumConcurrentOperations;
    public static MaterializedViewsCapacity Default;
    [CompilerGeneratedAttribute]
private bool <Migrated>k__BackingField;
    [JsonPropertyAttribute("ClusterMinimumConcurrentOperations")]
[DataMemberAttribute]
private long m_clusterMinimumConcurrentOperations;
    [JsonPropertyAttribute("ClusterMaximumConcurrentOperations")]
[DataMemberAttribute]
private long m_clusterMaximumConcurrentOperations;
    [JsonPropertyAttribute("ClusterCurrentConcurrentOperations")]
[DataMemberAttribute]
private long m_clusterCurrentConcurrentOperations;
    [JsonPropertyAttribute("ExtentsRebuildCapacity")]
[DataMemberAttribute]
private MaterializedViewsExtentsRebuildCapacity m_extentsRebuildCapacity;
    [JsonIgnoreAttribute]
public bool Migrated { get; public set; }
    [JsonIgnoreAttribute]
public long ClusterMinimumConcurrentOperations { get; }
    [JsonIgnoreAttribute]
public long ClusterMaximumConcurrentOperations { get; }
    [JsonIgnoreAttribute]
public long ClusterCurrentConcurrentOperations { get; }
    [JsonIgnoreAttribute]
public MaterializedViewsExtentsRebuildCapacity ExtentsRebuildCapacity { get; }
    public MaterializedViewsCapacity(long clusterMinimumConcurrentOperations, long clusterMaximumConcurrentOperations, long clusterCurrentConcurrentOperations, MaterializedViewsExtentsRebuildCapacity extentsRebuildCapacity);
    public MaterializedViewsCapacity(MaterializedViewsCapacity other);
    private static MaterializedViewsCapacity();
    [CompilerGeneratedAttribute]
public bool get_Migrated();
    [CompilerGeneratedAttribute]
public void set_Migrated(bool value);
    private void AfterDeserialized();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MaterializedViewsCapacity other);
    public bool IsValid(String& errorMessage);
    public virtual string ToString();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public MaterializedViewsCapacity NewSetClusterMinimumConcurrentOperations(long clusterMinimumConcurrentOperations);
    public MaterializedViewsCapacity NewSetClusterMaximumConcurrentOperations(long clusterMaximumConcurrentOperations);
    public MaterializedViewsCapacity NewSetClusterCurrentConcurrentOperations(long clusterCurrentConcurrentOperations);
    public MaterializedViewsCapacity NewSetExtentsRebuildCapacity(MaterializedViewsExtentsRebuildCapacity extentsRebuildCapacity);
    public long get_ClusterMinimumConcurrentOperations();
    public long get_ClusterMaximumConcurrentOperations();
    public long get_ClusterCurrentConcurrentOperations();
    public MaterializedViewsExtentsRebuildCapacity get_ExtentsRebuildCapacity();
}
public class Kusto.Data.MaterializedViewsDetailsShowCommandResult : object {
    public string MaterializedViewName;
    public string DatabaseName;
    public string Folder;
    public string DocString;
    public long TotalExtents;
    public double TotalExtentSize;
    public double TotalOriginalSize;
    public long TotalRowCount;
    public long HotExtents;
    public double HotExtentSize;
    public double HotOriginalSize;
    public long HotRowCount;
    public string AuthorizedPrincipals;
    public string RetentionPolicy;
    public string CachingPolicy;
    public string ShardingPolicy;
    public string MergePolicy;
    public Nullable`1<DateTime> MinExtentsCreationTime;
    public Nullable`1<DateTime> MaxExtentsCreationTime;
}
[DataContractAttribute]
public class Kusto.Data.MaterializedViewsExtentsRebuildCapacity : object {
    private long c_defaultClusterMaximumConcurrentOperations;
    private long c_defaultMaximumConcurrentOperationsPerNode;
    [JsonPropertyAttribute("ClusterMaximumConcurrentOperations")]
[DataMemberAttribute]
private long m_clusterMaximumConcurrentOperations;
    [JsonPropertyAttribute("MaximumConcurrentOperationsPerNode")]
[DataMemberAttribute]
private long m_maximumConcurrentOperationsPerNode;
    [JsonIgnoreAttribute]
public long ClusterMaximumConcurrentOperations { get; }
    [JsonIgnoreAttribute]
public long MaximumConcurrentOperationsPerNode { get; }
    public MaterializedViewsExtentsRebuildCapacity(long clusterMaximumConcurrentOperations, long maximumConcurrentOperationsPerNode);
    public MaterializedViewsExtentsRebuildCapacity(MaterializedViewsExtentsRebuildCapacity other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MaterializedViewsExtentsRebuildCapacity other);
    public bool IsValid(String& errorMessage);
    public virtual string ToString();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public MaterializedViewsExtentsRebuildCapacity NewSetClusterMaximumConcurrentOperations(long clusterMaximumConcurrentOperations);
    public MaterializedViewsExtentsRebuildCapacity NewSetMaximumConcurrentOperationsPerNode(long maximumConcurrentOperationsPerNode);
    public long get_ClusterMaximumConcurrentOperations();
    public long get_MaximumConcurrentOperationsPerNode();
}
public class Kusto.Data.MaterializedViewShowCommandResult : object {
    public string Name;
    public string SourceTable;
    public string Query;
    public DateTime MaterializedTo;
    public DateTime LastRun;
    public string LastRunResult;
    public bool IsHealthy;
    public bool IsEnabled;
    public string Folder;
    public string DocString;
    public bool AutoUpdateSchema;
    public DateTime EffectiveDateTime;
    public Nullable`1<TimeSpan> Lookback;
}
public class Kusto.Data.MaterializedViewsLevelDetailsShowCommandResult : object {
    public string MaterializedViewName;
    public string DatabaseName;
    public string Folder;
    public string DocString;
    public string RetentionPolicy;
    public string CachingPolicy;
    public string ShardingPolicy;
    public string MergePolicy;
    public string RetentionPolicyOrigin;
    public string CachingPolicyOrigin;
    public string ShardingPolicyOrigin;
    public string MergePolicyOrigin;
    public long TotalExtentsCountV2;
    public long TotalExtentSizeV2;
    public long TotalOriginalSizeV2;
    public long TotalIndexSizeV2;
    public long TotalRowCountV2;
    public long HotExtentsCountV2;
    public long HotExtentSizeV2;
    public long HotIndexSizeV2;
    public long HotOriginalSizeV2;
    public long HotRowCountV2;
    public Nullable`1<DateTime> MinExtentsCreationTimeV2;
    public Nullable`1<DateTime> MaxExtentsCreationTimeV2;
    public Nullable`1<DateTime> MinHotExtentsCreationTimeV2;
    public Nullable`1<DateTime> MaxHotExtentsCreationTimeV2;
    public long TotalExtentsCountV3;
    public long TotalExtentSizeV3;
    public long TotalOriginalSizeV3;
    public long TotalIndexSizeV3;
    public long TotalRowCountV3;
    public long HotExtentsCountV3;
    public long HotExtentSizeV3;
    public long HotIndexSizeV3;
    public long HotOriginalSizeV3;
    public long HotRowCountV3;
    public Nullable`1<DateTime> MinExtentsCreationTimeV3;
    public Nullable`1<DateTime> MaxExtentsCreationTimeV3;
    public Nullable`1<DateTime> MinHotExtentsCreationTimeV3;
    public Nullable`1<DateTime> MaxHotExtentsCreationTimeV3;
}
public class Kusto.Data.MaterializedViewsTriggerCommandResult : object {
    public string ViewName;
    public string DatabaseName;
    public string Result;
    public long DeltaCount;
}
public class Kusto.Data.MemoryShowCommandResult : object {
    public string NodeId;
    public DateTime StartTime;
    public bool IsAdmin;
    public long MachineTotalMemory;
    public long MachineAvailableMemory;
    public long PrivateMemorySize;
    public long NativeMemoryAllocated;
    public long NativeMemoryConsumed;
    public long NativeMemoryRemainingFree;
}
public class Kusto.Data.MemoryShowDetailsCommandResult : object {
    public string NodeId;
    public DateTime StartTime;
    public int AssignedHotExtents;
    public long NativeMemoryRemainingFree;
    public bool IsAdmin;
    public long MachineTotalMemory;
    public long MachineAvailableMemory;
    public long PrivateMemorySize;
    public long NativeMemoryAllocated;
    public long NativeMemoryConsumed;
    public string NativeMemorySummary;
    public long HotExtentsOriginalSize;
    public long HotExtentsSize;
    public string ShardEngineDiagnostics;
    public long TotalAllocatedForRowStores;
}
[DataContractAttribute]
public class Kusto.Data.MirroringCapacity : object {
    private long c_defaultClusterMaximumConcurrentOperations;
    private double c_defaultCoreUtilizationCoefficient;
    [JsonPropertyAttribute("ClusterMaximumConcurrentOperations")]
[DataMemberAttribute]
private long m_clusterMaximumConcurrentOperations;
    [JsonPropertyAttribute("CoreUtilizationCoefficient")]
[DataMemberAttribute]
private double m_coreUtilizationCoefficient;
    [JsonIgnoreAttribute]
public long ClusterMaximumConcurrentOperations { get; }
    [JsonIgnoreAttribute]
public double CoreUtilizationCoefficient { get; }
    public MirroringCapacity(long clusterMaximumConcurrentOperations, double coreUtilizationCoefficient);
    public MirroringCapacity(MirroringCapacity other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MirroringCapacity other);
    public bool IsValid(String& errorMessage);
    public virtual string ToString();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public MirroringCapacity NewSetClusterMaximumConcurrentOperations(long clusterMaximumConcurrentOperations);
    public MirroringCapacity NewSetCoreUtilizationCoefficient(double coreUtilizationCoefficient);
    public long get_ClusterMaximumConcurrentOperations();
    public double get_CoreUtilizationCoefficient();
}
public class Kusto.Data.MirroringOperationsShowStatusResult : object {
    public string TableName;
    public bool IsEnabled;
    public string ManagedIdentityIdentifier;
    public bool IsExportRunning;
    public Nullable`1<DateTime> LastExportStartTime;
    public string LastExportResult;
    public Nullable`1<DateTime> LastExportedDataTime;
    public TimeSpan Latency;
}
[DataContractAttribute]
public class Kusto.Data.MultiDatabaseAdminsPolicy : object {
    public static MultiDatabaseAdminsPolicy Default;
    public static int DefaultValuePlaceholder;
    public static int DefaultPercentageOfNodes;
    public static int DefaultMinimumNumberOfNodes;
    public static int DefaultMaximumNumberOfNodes;
    [JsonPropertyAttribute("PercentageOfNodes")]
[DataMemberAttribute]
private int m_percentageOfNodes;
    [JsonPropertyAttribute("MinimumNumberOfNodes")]
[DataMemberAttribute]
private int m_minimumNumberOfNodes;
    [JsonPropertyAttribute("MaximumNumberOfNodes")]
[DataMemberAttribute]
private int m_maximumNumberOfNodes;
    [JsonPropertyAttribute("DatabaseAdminSuperSlacker")]
[DataMemberAttribute]
private bool m_databaseAdminSuperSlacker;
    [JsonIgnoreAttribute]
public int PercentageOfNodes { get; }
    [JsonIgnoreAttribute]
public int MinimumNumberOfNodes { get; }
    [JsonIgnoreAttribute]
public int MaximumNumberOfNodes { get; }
    [JsonIgnoreAttribute]
public bool DatabaseAdminSuperSlacker { get; }
    public MultiDatabaseAdminsPolicy(int percentageOfNodes, int minimumNumberOfNodes, int maximumNumberOfNodes, bool databaseAdminSuperSlacker);
    public MultiDatabaseAdminsPolicy(MultiDatabaseAdminsPolicy other);
    private static MultiDatabaseAdminsPolicy();
    public MultiDatabaseAdminsPolicy Merge(string partialPolicyJson);
    public bool IsValid(String& errorMsg);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public MultiDatabaseAdminsPolicy GetEffectivePolicy();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public MultiDatabaseAdminsPolicy NewSetPercentageOfNodes(int percentageOfNodes);
    public MultiDatabaseAdminsPolicy NewSetMinimumNumberOfNodes(int minimumNumberOfNodes);
    public MultiDatabaseAdminsPolicy NewSetMaximumNumberOfNodes(int maximumNumberOfNodes);
    public MultiDatabaseAdminsPolicy NewSetDatabaseAdminSuperSlacker(bool databaseAdminSuperSlacker);
    public int get_PercentageOfNodes();
    public int get_MinimumNumberOfNodes();
    public int get_MaximumNumberOfNodes();
    public bool get_DatabaseAdminSuperSlacker();
}
public class Kusto.Data.MultiServicesExecuteCommandResult : object {
    public string ServiceName;
    public Guid OperationId;
    public string Operation;
    public Nullable`1<DateTime> StartedOn;
    public Nullable`1<DateTime> LastUpdatedOn;
    public Nullable`1<TimeSpan> Duration;
    public string State;
    public Guid RootActivityId;
    public string OperationInfo;
    public string CmName;
}
internal class Kusto.Data.Net.Client.GZipContent : HttpContent {
    private Stream m_uncompressedStream;
    private bool m_leaveOpen;
    public GZipContent(Stream uncompressedStream, bool leaveOpen);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.GZipContent/<SerializeToStreamAsync>d__3")]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    protected virtual void Dispose(bool disposing);
}
public static class Kusto.Data.Net.Client.KustoClientFactory : object {
    private static object s_lock;
    private static Dictionary`2<string, Func`2<KustoConnectionStringBuilder, ICslQueryProvider>> s_schemeToQueryFactory;
    private static Dictionary`2<string, Func`2<KustoConnectionStringBuilder, ICslAdminProvider>> s_schemeToAdminFactory;
    private static Dictionary`2<string, Func`2<KustoConnectionStringBuilder, IStreamingIngestProvider>> s_schemeToStreamIngestFactory;
    [EditorBrowsableAttribute("2")]
public static string InProcessDataSourceScheme { get; }
    [EditorBrowsableAttribute("2")]
public static string InProcessDataSource { get; }
    [EditorBrowsableAttribute("2")]
public static KustoConnectionStringBuilder InProcessKustoConnectionStringBuilder { get; }
    private static KustoClientFactory();
    public static string get_InProcessDataSourceScheme();
    public static string get_InProcessDataSource();
    public static KustoConnectionStringBuilder get_InProcessKustoConnectionStringBuilder();
    [EditorBrowsableAttribute("2")]
public static void RegisterQueryProviderFactory(string scheme, Func`2<KustoConnectionStringBuilder, ICslQueryProvider> queryProviderFactory);
    [EditorBrowsableAttribute("2")]
public static void RegisterAdminProviderFactory(string scheme, Func`2<KustoConnectionStringBuilder, ICslAdminProvider> adminProviderFactory);
    [EditorBrowsableAttribute("2")]
public static void RegisterStreamIngestProviderFactory(string scheme, Func`2<KustoConnectionStringBuilder, IStreamingIngestProvider> streamIngestProviderFactory);
    public static IKustoStatelessClient CreateKustoStatelessClient();
    public static ICslQueryProvider CreateCslQueryProvider(KustoConnectionStringBuilder builder);
    public static ICslQueryProvider CreateCslQueryProvider(string connectionString);
    public static ICslAdminProvider CreateCslAdminProvider(KustoConnectionStringBuilder builder);
    public static ICslAdminProvider CreateCslAdminProvider(string connectionString);
    public static IStreamingIngestProvider CreateCslStreamIngestClient(string connectionString);
    public static IStreamingIngestProvider CreateCslStreamIngestClient(KustoConnectionStringBuilder builder);
    public static IStreamingIngestMultiProvider CreateCslStreamIngestMultiProvider(bool canForwardTokenToTarget, bool skipSecurityChecks);
    public static IRedirectProvider CreateRedirectProvider(KustoConnectionStringBuilder builder);
    public static ICslQueryKustoDataStreamMultiProvider CreateCslQueryKustoDataStreamMultiProvider(bool canForwardTokenToTarget);
    public static ICslAdminProvider CreateCslDmAdminProvider(KustoConnectionStringBuilder builder);
    public static ICslAdminProvider CreateCslCmAdminProvider(KustoConnectionStringBuilder builder);
    public static ICslAdminProvider CreateCslBridgeAdminProvider(KustoConnectionStringBuilder builder);
    public static ICslAdminProvider CreateCslArmResourceProviderAdminProvider(KustoConnectionStringBuilder builder);
    public static ICslAdminProvider CreateCslFlightingAdminProvider(KustoConnectionStringBuilder builder);
    public static ICslAdminProvider CreateCslHealthSuiteAdminProvider(KustoConnectionStringBuilder builder);
    public static ICslAdminProvider CreateCslGaiaAdminProvider(KustoConnectionStringBuilder builder);
    public static ICslAdminProvider CreateCslSaasResourceProviderAdminProvider(KustoConnectionStringBuilder builder);
    private static Client Validate(KustoConnectionStringBuilder builder, string argName, Purpose purpose);
    private static void ValidateProviderFactory(string scheme, object factory, string factoryName);
    private static Exception CreateInvalidConnectionSchemeException(string connectionScheme, Purpose purpose);
    private static Exception CreateInvalidConnectionStringException(Purpose purpose, KustoConnectionStringBuilder kcsb);
    private static ICslAdminProvider CreateCslXxxAdminProvider(KustoConnectionStringBuilder builder);
}
public class Kusto.Data.Net.Client.KustoClientRequestDescriptor : object {
    [CompilerGeneratedAttribute]
private string <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientRequestId>k__BackingField;
    public string DataSource { get; private set; }
    public string DatabaseName { get; private set; }
    public string ClientRequestId { get; private set; }
    public KustoClientRequestDescriptor(string dataSource, string databaseName, string clientRequestId);
    [CompilerGeneratedAttribute]
public string get_DataSource();
    [CompilerGeneratedAttribute]
private void set_DataSource(string value);
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
private void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public string get_ClientRequestId();
    [CompilerGeneratedAttribute]
private void set_ClientRequestId(string value);
}
public class Kusto.Data.Net.Client.KustoDataHttpClient : KustoHttpClient {
    protected KustoDataHttpClient(ITraceSource tracer, string tracePrefixShort, string tracePrefixLong);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.KustoDataHttpClient/<ThrowKustoExceptionFromResponseMessageAsync>d__1")]
protected Task ThrowKustoExceptionFromResponseMessageAsync(KustoProtocolResponse response, KustoExceptionContext exceptionContext, HttpResponseMessage responseMessage, ClientRequestProperties properties, bool shouldBuffer, Action`2<HttpResponseMessage, string> notify);
}
public class Kusto.Data.Net.Client.KustoProtocolResponse : object {
    private Context m_creationContext;
    private CancellationTokenSource m_cancellationTokenSource;
    private IDumper m_dumper;
    private Stream m_stream;
    public HttpStatusCodeEx StatusCode;
    public string ReasonPhrase;
    public string ClientRequestId;
    public Guid ActivityId;
    public string MediaType;
    public ICollection`1<string> ContentEncoding;
    public KustoClientRequestDescriptor RequestDescriptor;
    public IDumper Dumper { get; public set; }
    public CancellationTokenSource CancellationTokenSource { get; public set; }
    public Stream Stream { get; public set; }
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public IDumper get_Dumper();
    public void set_Dumper(IDumper value);
    public CancellationTokenSource get_CancellationTokenSource();
    public void set_CancellationTokenSource(CancellationTokenSource value);
    public Stream get_Stream();
    public void set_Stream(Stream value);
}
public enum Kusto.Data.Net.Client.RestApi : Enum {
    public int value__;
    public static RestApi AuthMetadata;
    public static RestApi Ping;
    public static RestApi Query;
    public static RestApi QueryV2;
    public static RestApi QueryStreaming;
    public static RestApi QueryStreamingV2;
    public static RestApi Mgmt;
    public static RestApi StreamIngest;
    public static RestApi PassiveLogin;
}
public static class Kusto.Data.Net.Client.RestApiPrefix : object {
    public static string AuthMetadata;
    public static string Ping;
    public static string Query;
    public static string QueryV2;
    public static string QueryStreaming;
    public static string QueryStreamingV2;
    public static string Mgmt;
    public static string StreamIngest;
    public static string PassiveLogin;
    public static KustoDataStreamFormat GetQueryOrAdminResponseFormat(string restApiPrefix);
}
internal class Kusto.Data.Net.Client.RestClient2 : KustoDataHttpClient {
    private static string c_typeHeaderApplicationJson;
    private static long s_instancesCreated;
    private string m_version;
    private Uri m_defaultRemoteUriBase;
    private string m_defaultNamespace;
    private string m_queryConsistency;
    private bool m_canForwardTokenToTarget;
    private bool m_uncompressed;
    private KustoConnectionStringBuilder m_kcsb;
    private string m_defaultDatabaseName;
    private bool m_streaming;
    private IHttpClientAuthenticator m_authenticator;
    private bool m_isAuthenticatorInitialized;
    private object m_authenticatorInitLock;
    private ClientDetails m_clientDetails;
    private Lazy`1<TrustedInitialConnection> m_trustedInitialConnection;
    private bool m_skipSecurityChecks;
    private IKustoHttpClientFactory m_clientFactory;
    private static ExecuteQueryActivityType s_executeQueryActivityType;
    private static ExecuteControlCommandActivityType s_executeControlCommandActivityType;
    private static ExcuteStreamIngestCommandActivityType s_executeStreamIngestCommandActivityType;
    internal bool Streaming { get; internal set; }
    public string DefaultDatabaseName { get; public set; }
    public RestClient2(KustoConnectionStringBuilder kcsb);
    public RestClient2(KustoConnectionStringBuilder kcsb, bool canForwardTokenToTarget, bool skipSecurityChecks);
    private static RestClient2();
    public sealed virtual void Dispose();
    internal bool get_Streaming();
    internal void set_Streaming(bool value);
    public sealed virtual IDataReader ExecuteStreamIngest(string databaseName, string tableName, Stream data, ClientRequestProperties properties, DataSourceFormat streamFormat, bool compressStream, string mappingName);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteStreamIngestAsync>d__25")]
public sealed virtual Task`1<IDataReader> ExecuteStreamIngestAsync(string databaseName, string tableName, Stream stream, ClientRequestProperties properties, DataSourceFormat streamFormat, bool compressStream, string mappingName, bool leaveRequestStreamOpen);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteStreamIngestAsync>d__26")]
public sealed virtual Task`1<IDataReader> ExecuteStreamIngestAsync(string databaseName, string tableName, Stream stream, StreamProperties streamProperties, ClientRequestProperties properties, DataSourceFormat streamFormat, string mappingName);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteIngestFromStorageAsync>d__27")]
public sealed virtual Task`1<IDataReader> ExecuteIngestFromStorageAsync(string databaseName, string tableName, string uri, ClientRequestProperties properties, DataSourceFormat streamFormat, string mappingName);
    public sealed virtual IDataReader ExecuteStreamIngest(string databaseName, string tableName, string data, ClientRequestProperties properties, DataSourceFormat streamFormat, bool compressStream, string mappingName);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteStreamIngestAsync>d__29")]
public sealed virtual Task`1<IDataReader> ExecuteStreamIngestAsync(string databaseName, string tableName, string data, ClientRequestProperties properties, DataSourceFormat streamFormat, bool compressStream, string mappingName);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteStreamIngestAsync>d__30")]
public sealed virtual Task`1<IDataReader> ExecuteStreamIngestAsync(string hostHeaderOverride, string address, string databaseName, string tableName, Stream stream, ClientRequestProperties properties, StreamProperties streamProperties, CancellationToken cancellationToken, DataSourceFormat streamFormat, string mappingName);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteIngestFromStorageAsync>d__31")]
public sealed virtual Task`1<IDataReader> ExecuteIngestFromStorageAsync(string hostHeaderOverride, string hostAddress, string databaseName, string tableName, string uri, ClientRequestProperties properties, CancellationToken cancellationToken, DataSourceFormat streamFormat, string mappingName);
    private KustoConnectionStringBuilder ValidateKustoStatelessClientArgs(string hostAddress, string databaseName, string csl, ClientRequestProperties properties);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteQueryAsync>d__33")]
public sealed virtual Task`1<IDataReader> ExecuteQueryAsync(string hostAddress, string databaseName, string query, ClientRequestProperties properties, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteQueryV2Async>d__34")]
public sealed virtual Task`1<ProgressiveDataSet> ExecuteQueryV2Async(string hostAddress, string databaseName, string query, ClientRequestProperties properties, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteControlCommandAsync>d__35")]
public sealed virtual Task`1<IDataReader> ExecuteControlCommandAsync(string hostAddress, string databaseName, string command, ClientRequestProperties properties, CancellationToken cancellationToken);
    public sealed virtual Task`1<KustoProtocolResponse> ExecuteRequestAsync(string hostAddress, string databaseName, string queryOrCommand, ClientRequestProperties properties, string restApiPrefix, CancellationToken cancellationToken);
    public sealed virtual HttpResponseMessage ExecuteRedirectCommand(ClientRequestProperties properties);
    private ValueTuple`2<IKustoHttpClientFactory, HttpClient> GetOrCreateHttpClient(string methodName, Uri uri);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteRedirectCommandAsync>d__39")]
public sealed virtual Task`1<HttpResponseMessage> ExecuteRedirectCommandAsync(ClientRequestProperties properties);
    public sealed virtual Stream ExecuteQueryAsKustoDataStream(string hostAddress, string databaseName, string query, ClientRequestProperties properties);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteQueryAsKustoDataStreamAsync>d__41")]
public sealed virtual Task`1<Stream> ExecuteQueryAsKustoDataStreamAsync(string hostAddress, string databaseName, string query, ClientRequestProperties properties);
    public sealed virtual string get_DefaultDatabaseName();
    public sealed virtual void set_DefaultDatabaseName(string value);
    public sealed virtual IDataReader ExecuteQuery(string databaseName, string query, ClientRequestProperties properties);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteQueryAsync>d__46")]
public sealed virtual Task`1<IDataReader> ExecuteQueryAsync(string databaseName, string query, ClientRequestProperties properties, CancellationToken cancellationToken);
    public sealed virtual IDataReader ExecuteQuery(string query, ClientRequestProperties properties);
    public sealed virtual IDataReader ExecuteQuery(string query);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteQueryV2Async>d__49")]
public sealed virtual Task`1<ProgressiveDataSet> ExecuteQueryV2Async(string databaseName, string query, ClientRequestProperties properties, CancellationToken cancellationToken);
    private void ThrowOnQueryStatusFailures(string databaseName, string query, DataSet queryResults);
    public sealed virtual IDataReader ExecuteControlCommand(string hostAddress, string databaseName, string command, string addr, ClientRequestProperties properties);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteControlCommandAsync>d__52")]
public sealed virtual Task`1<IDataReader> ExecuteControlCommandAsync(string hostAddress, string databaseName, string command, string addr, ClientRequestProperties properties);
    public IDataReader ExecuteControlCommand(string databaseName, string command, string addr, ClientRequestProperties properties);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<ExecuteControlCommandAsync>d__54")]
public Task`1<IDataReader> ExecuteControlCommandAsync(string databaseName, string command, string addr, ClientRequestProperties properties);
    public sealed virtual IDataReader ExecuteControlCommand(string databaseName, string command, ClientRequestProperties properties);
    public sealed virtual Task`1<IDataReader> ExecuteControlCommandAsync(string databaseName, string command, ClientRequestProperties properties);
    public sealed virtual IDataReader ExecuteControlCommand(string command, ClientRequestProperties properties);
    private string CombineBaseAndRelativeAddress(string baseAddress, string relativeAddress, string query);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<MakeHttpRequestAsync>d__59")]
private Task`1<KustoProtocolResponse> MakeHttpRequestAsync(RestApi restApi, string baseAddress, string relativeAddress, string clientRequestIdPrefix, string ns, string databaseName, string csl, string addr, bool streaming, ClientRequestProperties properties, ServiceModelTimeoutKind timeoutKind, StreamProperties streamProperties, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<MakeHttpRequestAsync>d__60")]
private Task`1<KustoProtocolResponse> MakeHttpRequestAsync(RestApi restApi, string address, string ns, string databaseName, bool streaming, ClientRequestProperties properties, ServiceModelTimeoutKind timeoutKind, string clientRequestIdPrefix, Stream stream, StreamProperties streamProperties, CancellationToken cancellationToken, string hostHeaderOverride);
    [AsyncStateMachineAttribute("Kusto.Data.Net.Client.RestClient2/<MakeHttpRequestAsyncImpl>d__61")]
private Task`1<KustoProtocolResponse> MakeHttpRequestAsyncImpl(RestApi restApi, string address, string csl, string ns, string databaseName, bool streaming, ClientRequestProperties properties, ServiceModelTimeoutKind timeoutKind, string clientRequestId, Stream body, StreamProperties streamProperties, CancellationToken cancellationToken, KustoProtocolRequest request, string hostHeaderOverride);
    private static HttpContent CreateHttpContent(string csl, string ns, string databaseName, ClientRequestProperties properties, Stream body, StreamProperties streamProperties);
    private void TraceResponse(HttpResponseMessage responseMessage);
    private void TraceRequest(HttpRequestMessage requestMessage, ClientRequestProperties properties, string clientRequestId);
    private static ClientRequestProperties GetClientRequestProperties(ClientRequestProperties properties, string queryConsistency, bool forceCreation, bool canForwardTokenToTarget);
    private IDataReader ParseStreamAsDataReader(KustoProtocolResponse response, ClientRequestProperties properties, bool streaming);
    private ProgressiveDataSet ParseStreamAsProgressiveDataSet(KustoProtocolResponse response, ClientRequestProperties properties);
    private bool UseStreamingParser(ClientRequestProperties properties);
    private static ActivityType GetActivityType(RestApi restApi);
    [CompilerGeneratedAttribute]
private TrustedInitialConnection <.ctor>b__19_0();
}
public class Kusto.Data.Net.Client.StreamProperties : object {
    [CompilerGeneratedAttribute]
private bool <LeaveOpen>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Compress>k__BackingField;
    [CompilerGeneratedAttribute]
private DataSourceCompressionType <CompressionType>k__BackingField;
    public bool LeaveOpen { get; public set; }
    public bool Compress { get; public set; }
    public DataSourceCompressionType CompressionType { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_LeaveOpen();
    [CompilerGeneratedAttribute]
public void set_LeaveOpen(bool value);
    [CompilerGeneratedAttribute]
public bool get_Compress();
    [CompilerGeneratedAttribute]
public void set_Compress(bool value);
    [CompilerGeneratedAttribute]
public DataSourceCompressionType get_CompressionType();
    [CompilerGeneratedAttribute]
public void set_CompressionType(DataSourceCompressionType value);
}
[DataContractAttribute]
public class Kusto.Data.Net.Common.CachePartialQueryResultStatistics : object {
    [DataMemberAttribute]
public ulong Hits;
    [DataMemberAttribute]
public ulong Misses;
    public sealed virtual bool Equals(CachePartialQueryResultStatistics other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DataContractAttribute]
public class Kusto.Data.Net.Common.CacheQueryResultStatistics : object {
    [DataMemberAttribute]
public DateTime StartedOn;
    [DataMemberAttribute]
public string ClientRequestId;
    public sealed virtual bool Equals(CacheQueryResultStatistics other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DataContractAttribute]
public class Kusto.Data.Net.Common.CacheShardsLayerStatistics : object {
    [DataMemberAttribute]
public long HitBytes;
    [DataMemberAttribute]
public long MissBytes;
    [DataMemberAttribute]
public long RetrieveBytes;
    public sealed virtual bool Equals(CacheShardsLayerStatistics other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DataContractAttribute]
public class Kusto.Data.Net.Common.CacheShardsStatistics : object {
    [DataMemberAttribute]
public CacheShardsLayerStatistics Hot;
    [DataMemberAttribute]
public CacheShardsLayerStatistics Cold;
    [DataMemberAttribute]
public long BypassBytes;
    public sealed virtual bool Equals(CacheShardsStatistics other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DataContractAttribute]
public class Kusto.Data.Net.Common.CacheStatistics : object {
    [DataMemberAttribute]
public CacheShardsStatistics Shards;
    [JsonPropertyAttribute]
[DataMemberAttribute]
public CacheQueryResultStatistics QueryResults;
    [JsonPropertyAttribute]
[DataMemberAttribute]
public CachePartialQueryResultStatistics ShardLevelQueryResults;
    public sealed virtual bool Equals(CacheStatistics other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DataContractAttribute]
public class Kusto.Data.Net.Common.DataSetStatistics : object {
    [DataMemberAttribute]
public int TableCount;
    [DataMemberAttribute]
public DataTableStatistics[] TablesStatistics;
    public static int MaxTableCount;
    [OnDeserializedAttribute]
private void OnAfterDeserialize(StreamingContext context);
    public sealed virtual bool Equals(DataSetStatistics other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DataContractAttribute]
public class Kusto.Data.Net.Common.DataTableStatistics : object {
    [DataMemberAttribute]
public ulong RowCount;
    [DataMemberAttribute]
public ulong TableSize;
    public sealed virtual bool Equals(DataTableStatistics other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class Kusto.Data.Net.Common.ExtendedKustoDataStreamFormat : object {
    [ExtensionAttribute]
public static string FastToString(KustoDataStreamFormat that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(KustoDataStreamFormat that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(KustoDataStreamFormat that, KustoDataStreamFormat flag);
    public static KustoDataStreamFormat FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, KustoDataStreamFormat& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(KustoDataStreamFormat that);
    [ExtensionAttribute]
public static string FastGetDescription(KustoDataStreamFormat that);
}
[ExtensionAttribute]
public static class Kusto.Data.Net.Common.ExtendedRemoteServiceType : object {
    [ExtensionAttribute]
public static string FastToString(RemoteServiceType that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(RemoteServiceType that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(RemoteServiceType that, RemoteServiceType flag);
    [ExtensionAttribute]
public static bool FastHasAllFlags(RemoteServiceType that, RemoteServiceType flags);
    [ExtensionAttribute]
public static bool FastHasAnyFlags(RemoteServiceType that, RemoteServiceType flags);
    [ExtensionAttribute]
public static int FastCountIntersectionsWith(RemoteServiceType that, RemoteServiceType flags);
    public static RemoteServiceType FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, RemoteServiceType& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(RemoteServiceType that);
    [ExtensionAttribute]
public static string FastGetDescription(RemoteServiceType that);
    [IteratorStateMachineAttribute("Kusto.Data.Net.Common.ExtendedRemoteServiceType/<FastGetFlags>d__12")]
[ExtensionAttribute]
public static IEnumerable`1<RemoteServiceType> FastGetFlags(RemoteServiceType that);
}
public enum Kusto.Data.Net.Common.KustoDataStreamFormat : Enum {
    public int value__;
    public static KustoDataStreamFormat KustoJsonDataStream;
    public static KustoDataStreamFormat KustoDataStream;
}
[FlagsAttribute]
public enum Kusto.Data.Net.Common.RemoteServiceType : Enum {
    public int value__;
    public static RemoteServiceType Admin;
    public static RemoteServiceType Query;
    public static RemoteServiceType UIRedirect;
    public static RemoteServiceType DataManagement;
    public static RemoteServiceType ClusterManagement;
    public static RemoteServiceType Bridge;
    public static RemoteServiceType Ping;
    public static RemoteServiceType CustomType;
    public static RemoteServiceType StreamIngest;
    public static RemoteServiceType PassiveLogin;
    public static RemoteServiceType ArmResourceProvider;
    public static RemoteServiceType AuthMetadata;
    public static RemoteServiceType Flighting;
    public static RemoteServiceType HealthSuite;
    public static RemoteServiceType Gaia;
    public static RemoteServiceType Proxy;
    public static RemoteServiceType SaasResourceProvider;
    public static RemoteServiceType Dashboard;
    public static RemoteServiceType Assistant;
    public static RemoteServiceType AllControlCommands;
}
[DataContractAttribute]
public class Kusto.Data.Net.Common.ScannedExtentsStatistics : object {
    [DataMemberAttribute]
public Nullable`1<DateTime> MinDataScannedTime;
    [DataMemberAttribute]
public Nullable`1<DateTime> MaxDataScannedTime;
    [DataMemberAttribute]
public long TotalExtentsCount;
    [DataMemberAttribute]
public long ScannedExtentsCount;
    [DataMemberAttribute]
public long TotalRowsCount;
    [DataMemberAttribute]
public long ScannedRowsCount;
    public sealed virtual bool Equals(ScannedExtentsStatistics other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Kusto.Data.Net.Http.OneApiError : object {
    [JsonPropertyAttribute("error")]
public Root error;
}
public class Kusto.Data.Net.IngestionSourceStorage : object {
    public string SourceUri;
}
public static class Kusto.Data.Net.KustoExceptionUtils : object {
    private static Dictionary`2<string, ExceptionHandler> s_exceptionHandlers;
    private static KustoExceptionUtils();
    public static void RegisterExceptionHandler(string type, ExceptionHandler handler);
    internal static Exception ToKustoException(Exception ex, KustoExceptionContext context, CancellationToken userCancellationToken);
    internal static Exception ToKustoException(string responseBody, HttpStatusCode statusCode, string reasonPhrase, KustoExceptionContext context, ITraceSource tracer);
    private static string PreferFirst(string first, string second);
    private static Guid PreferFirst(Nullable`1<Guid> first, Nullable`1<Guid> second);
    internal static Exception ToKustoException(OneApiError oneApi);
    private static string GetStatusCodeString(HttpStatusCodeEx statusCode);
}
public class Kusto.Data.NonAzureDmServiceDataConnectionsShowCommandResult : object {
    public string DataObtainerName;
    public string DataObtainerType;
    public string TargetDatabase;
    public string TargetTable;
    public Nullable`1<bool> IsHealthy;
    public string EventHubName;
    public string AccessMode;
    public string MaxThroughputUnits;
    public string PartitionsCount;
    public bool ManagedExternally;
    public string Format;
    public string IngestionMappingReference;
    public string ConsumerGroup;
    public string EventHubResourceId;
    public string EventSystemProperties;
    public string Compression;
    public string EventHubNamespaceEndpoint;
    public bool AllowMultiDatabase;
    public string LeaseContainerName;
    public Nullable`1<DateTime> RetrievalStartDate;
    public string LeaseStorageConnectionString;
    public string ExternalResourceId;
}
public class Kusto.Data.ObtainersSettingsShowCommandResult : object {
    public string ObtainerName;
    public string ObtainerType;
    public string TargetTable;
    public string TargetDatabase;
    public string Source;
    public bool Enabled;
    public Nullable`1<bool> IsHealthy;
    public string HealthDetails;
    public bool UserActionRequired;
    public string Status;
}
public class Kusto.Data.OperationCancelCommandResult : object {
    public string OperationId;
    public string Operation;
    public DateTime StartedOn;
    public string CancellationState;
    public string ReasonPhrase;
}
public class Kusto.Data.OperationShowDetailsEmptyCommandResult : object {
    public string Details;
}
public class Kusto.Data.OperationsShowCommandResult : object {
    public Guid OperationId;
    public string Operation;
    public string NodeId;
    public DateTime StartedOn;
    public DateTime LastUpdatedOn;
    public TimeSpan Duration;
    public string State;
    public string Status;
    public Guid RootActivityId;
    public bool ShouldRetry;
    public string Database;
    public string Principal;
    public string User;
    public DateTime AdminEpochStartTime;
}
public class Kusto.Data.PackagesConfigurationPathGetCmCommandResult : object {
    public string Path;
    public string DecryptionCertificateThumbprint;
}
public class Kusto.Data.PendingBridgeOperationResult : object {
    public Guid OperationId;
    public Guid RootActivityId;
    public string OperationInfo;
}
public class Kusto.Data.PendingCmOperationResult : object {
    public Guid OperationId;
    public Guid RootActivityId;
    public string OperationInfo;
}
public class Kusto.Data.PendingOperationResult : object {
    public Guid OperationId;
}
[DataContractAttribute]
public class Kusto.Data.PeriodicStorageArtifactsCleanupCapacity : object {
    public static double DefaultNumberOfOperationsPerCore;
    [JsonPropertyAttribute("MaximumConcurrentOperationsPerCluster")]
[DataMemberAttribute]
private long m_maximumConcurrentOperationsPerCluster;
    [JsonIgnoreAttribute]
public long MaximumConcurrentOperationsPerCluster { get; }
    public PeriodicStorageArtifactsCleanupCapacity(long maximumConcurrentOperationsPerCluster);
    public PeriodicStorageArtifactsCleanupCapacity(PeriodicStorageArtifactsCleanupCapacity other);
    private static PeriodicStorageArtifactsCleanupCapacity();
    public virtual string ToString();
    public bool IsValid(String& errorMessage);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public PeriodicStorageArtifactsCleanupCapacity NewSetMaximumConcurrentOperationsPerCluster(long maximumConcurrentOperationsPerCluster);
    public long get_MaximumConcurrentOperationsPerCluster();
    public sealed virtual bool Equals(PeriodicStorageArtifactsCleanupCapacity other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Kusto.Data.PolicyOrigin : Enum {
    public int value__;
    public static PolicyOrigin Unknown;
    public static PolicyOrigin Admin;
    public static PolicyOrigin Default;
    public static PolicyOrigin Automatic;
}
public class Kusto.Data.PolicyShowCommandEffectiveResult : object {
    public string PolicyName;
    public string EntityName;
    public string Policy;
    public string ChildEntities;
    public string EntityType;
    public string EffectivePolicy;
}
public class Kusto.Data.PolicyShowCommandResult : object {
    public string PolicyName;
    public string EntityName;
    public string Policy;
    public string ChildEntities;
    public string EntityType;
}
public class Kusto.Data.PrincipalResult : object {
    public string Role;
    public string PrincipalName;
    public string PrincipalType;
}
public class Kusto.Data.PrivateEndpointConnectionProxyDeleteCommandResult : object {
    public string Status;
    public string Description;
}
public class Kusto.Data.PrivateEndpointConnectionProxyValidateCommandResult : object {
    public string RemotePrivateEndpoint;
}
public class Kusto.Data.PurgeCleanupCommandResult : object {
    public Guid ExtentId;
    public string StorageContainer;
    public string StorageObject;
}
public class Kusto.Data.PurgeOperationShowCommandResult : object {
    public Guid OperationId;
    public DateTime LastUpdatedOn;
    public string Database;
    public string Table;
    public string State;
    public DateTime StartedOn;
    public TimeSpan Duration;
    public string FailureReason;
    public bool ShouldRetry;
    public Nullable`1<DateTime> RetryAfter;
    public string Granularity;
    public Nullable`1<Guid> RetryOfOperationId;
}
public class Kusto.Data.PurgeShowCommandResult : object {
    public Guid OperationId;
    public DateTime LastUpdatedOn;
    public string Database;
    public string Table;
    public string DatabaseVersion;
    public string PurgeState;
    public DateTime StartedOn;
    public TimeSpan Duration;
    public string FailureReason;
    public string Granularity;
    public Nullable`1<Guid> RetryOfOperationId;
}
public class Kusto.Data.PurgesSummaryShowCommandResult : object {
    public Guid OperationId;
    public string DatabaseName;
    public string TableName;
    public DateTime ScheduledTime;
    public TimeSpan Duration;
    public DateTime LastUpdatedOn;
    public Guid EngineOperationId;
    public string State;
    public string StateDetails;
    public DateTime EngineStartTime;
    public TimeSpan EngineDuration;
    public int Retries;
    public string ClientRequestId;
    public string Principal;
}
[DataContractAttribute]
public class Kusto.Data.PurgeStorageArtifactsCleanupCapacity : object {
    public static double DefaultNumberOfOperationsPerCore;
    [JsonPropertyAttribute("MaximumConcurrentOperationsPerCluster")]
[DataMemberAttribute]
private long m_maximumConcurrentOperationsPerCluster;
    [JsonIgnoreAttribute]
public long MaximumConcurrentOperationsPerCluster { get; }
    public PurgeStorageArtifactsCleanupCapacity(long maximumConcurrentOperationsPerCluster);
    public PurgeStorageArtifactsCleanupCapacity(PurgeStorageArtifactsCleanupCapacity other);
    private static PurgeStorageArtifactsCleanupCapacity();
    public virtual string ToString();
    public bool IsValid(String& errorMessage);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public PurgeStorageArtifactsCleanupCapacity NewSetMaximumConcurrentOperationsPerCluster(long maximumConcurrentOperationsPerCluster);
    public long get_MaximumConcurrentOperationsPerCluster();
    public sealed virtual bool Equals(PurgeStorageArtifactsCleanupCapacity other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Kusto.Data.PurgeTableDryRunCommandResult : object {
    public string VerificationToken;
}
public class Kusto.Data.PurgeTableRecordsCommandResult : object {
    public Guid OldExtentId;
    public Guid NewExtentId;
    public long RecordsPurged;
    public long RecordsRetained;
}
public class Kusto.Data.PurgeTableRecordsCommandResumeResult : object {
    public Guid ResumedOperationId;
}
public class Kusto.Data.PurgeTableRecordsDryRunCommandResult : object {
    public long NumRecordsToPurge;
    public TimeSpan EstimatedPurgeExecutionTime;
    public string VerificationToken;
}
public class Kusto.Data.PurgeTableRecordsExtentsStatistics : object {
    public Guid ExtentId;
    public long RecordsPurged;
    public long RecordsRetained;
}
public class Kusto.Data.PurgeTableRecordsInfo : object {
    public long NumRecordsToPurge;
    public TimeSpan EstimatedPurgeExecutionTime;
}
public class Kusto.Data.QueriesShowCommandResult : object {
    public string ClientActivityId;
    public string Text;
    public string Database;
    public DateTime StartedOn;
    public DateTime LastUpdatedOn;
    public TimeSpan Duration;
    public string State;
    public Guid RootActivityId;
    public string User;
    public string FailureReason;
    public TimeSpan TotalCpu;
    public string CacheStatistics;
    public string Application;
    public long MemoryPeak;
    public string ScannedExtentsStatistics;
    public string Principal;
    public string ClientRequestProperties;
    public string ResultSetStatistics;
    public string WorkloadGroup;
}
[DataContractAttribute]
public class Kusto.Data.QueryAccelerationCapacity : object {
    private long c_defaultClusterMaximumConcurrentOperations;
    private double c_defaultCoreUtilizationCoefficient;
    [JsonPropertyAttribute("ClusterMaximumConcurrentOperations")]
[DataMemberAttribute]
private long m_clusterMaximumConcurrentOperations;
    [JsonPropertyAttribute("CoreUtilizationCoefficient")]
[DataMemberAttribute]
private double m_coreUtilizationCoefficient;
    [JsonIgnoreAttribute]
public long ClusterMaximumConcurrentOperations { get; }
    [JsonIgnoreAttribute]
public double CoreUtilizationCoefficient { get; }
    public QueryAccelerationCapacity(long clusterMaximumConcurrentOperations, double coreUtilizationCoefficient);
    public QueryAccelerationCapacity(QueryAccelerationCapacity other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(QueryAccelerationCapacity other);
    public bool IsValid(String& errorMessage);
    public virtual string ToString();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public QueryAccelerationCapacity NewSetClusterMaximumConcurrentOperations(long clusterMaximumConcurrentOperations);
    public QueryAccelerationCapacity NewSetCoreUtilizationCoefficient(double coreUtilizationCoefficient);
    public long get_ClusterMaximumConcurrentOperations();
    public double get_CoreUtilizationCoefficient();
}
public class Kusto.Data.QueryCallTreeShowCommandResult : object {
    public string Caller;
    public JObject References;
}
public enum Kusto.Data.QueryConsistency : Enum {
    public int value__;
    public static QueryConsistency Strong;
    public static QueryConsistency Weak;
    public static QueryConsistency WeakAffinitizedByQuery;
    public static QueryConsistency WeakAffinitizedByDatabase;
    public static QueryConsistency WeakAffinitizedBySessionId;
}
public enum Kusto.Data.QueryDataScope : Enum {
    public int value__;
    public static QueryDataScope Default;
    public static QueryDataScope All;
    public static QueryDataScope HotCache;
}
public class Kusto.Data.QueryExecutionShowCommandResult : object {
    public int NodeId;
    public string OperatorName;
    public string Metrics;
    public Guid RequestId;
    public Guid ActivityId;
    public Guid SubActivityId;
    public string ClientRequestId;
}
public class Kusto.Data.QueryGetSchemaAsCslResult : object {
    public string Schema;
}
public class Kusto.Data.QueryGetSchemaResult : object {
    public string ColumnName;
    public int ColumnOrdinal;
    public string DataType;
    public string ColumnType;
}
public class Kusto.Data.QueryPlanShowCommandResult : object {
    public string ResultType;
    public string Format;
    public string Content;
}
public class Kusto.Data.QueryResultsCacheShowCommandResult : object {
    public string NodeId;
    public long Hits;
    public long Misses;
    public long CacheSizeInBytes;
    public long UsedBytes;
    public long Count;
}
public class Kusto.Data.QueryStatusLog : object {
    public DateTime Timestamp;
    public int Severity;
    public string SeverityName;
    public int StatusCode;
    public string StatusDescription;
    public int Count;
    public Guid RequestId;
    public Guid ActivityId;
    public Guid SubActivityId;
    public string ClientActivityId;
}
public class Kusto.Data.QueryTableOfContents : object {
    public long Ordinal;
    public string Kind;
    public string Name;
    public string Id;
}
[DataContractAttribute]
public class Kusto.Data.QueryWeakConsistencyPolicy : object {
    public static int DefaultValuePlaceholder;
    public static int DefaultPercentageOfNodes;
    public static int DefaultMinimumNumberOfNodes;
    public static int DefaultMaximumNumberOfNodes;
    public static int DefaultSuperSlackerNumberOfNodesThreshold;
    public static bool DefaultEnableMetadataPrefetch;
    public static int DefaultMaximumLagAllowedInMinutes;
    public static int DefaultRefreshPeriodInSeconds;
    private static int c_percentageOfNodesLowThreshold;
    private static int c_percentageOfNodesHighThreshold;
    private static int c_superSlackerNumberOfNodesLowThreshold;
    private static int c_maximumLagAllowedInMinutesLowThreshold;
    private static int c_maximumLagAllowedInMinutesHighThreshold;
    private static int c_refreshPeriodInSecondsLowThreshold;
    private static int c_refreshPeriodInSecondsHighThreshold;
    public static QueryWeakConsistencyPolicy Default;
    [JsonPropertyAttribute("PercentageOfNodes")]
[DataMemberAttribute]
private int m_percentageOfNodes;
    [JsonPropertyAttribute("MinimumNumberOfNodes")]
[DataMemberAttribute]
private int m_minimumNumberOfNodes;
    [JsonPropertyAttribute("MaximumNumberOfNodes")]
[DataMemberAttribute]
private int m_maximumNumberOfNodes;
    [JsonPropertyAttribute("SuperSlackerNumberOfNodesThreshold")]
[DataMemberAttribute]
private int m_superSlackerNumberOfNodesThreshold;
    [JsonPropertyAttribute("EnableMetadataPrefetch")]
[DataMemberAttribute]
private bool m_enableMetadataPrefetch;
    [JsonPropertyAttribute("MaximumLagAllowedInMinutes")]
[DataMemberAttribute]
private int m_maximumLagAllowedInMinutes;
    [JsonPropertyAttribute("RefreshPeriodInSeconds")]
[DataMemberAttribute]
private int m_refreshPeriodInSeconds;
    [JsonIgnoreAttribute]
public int PercentageOfNodes { get; }
    [JsonIgnoreAttribute]
public int MinimumNumberOfNodes { get; }
    [JsonIgnoreAttribute]
public int MaximumNumberOfNodes { get; }
    [JsonIgnoreAttribute]
public int SuperSlackerNumberOfNodesThreshold { get; }
    [JsonIgnoreAttribute]
public bool EnableMetadataPrefetch { get; }
    [JsonIgnoreAttribute]
public int MaximumLagAllowedInMinutes { get; }
    [JsonIgnoreAttribute]
public int RefreshPeriodInSeconds { get; }
    public QueryWeakConsistencyPolicy(int percentageOfNodes, int minimumNumberOfNodes, int maximumNumberOfNodes, int superSlackerNumberOfNodesThreshold, bool enableMetadataPrefetch, int maximumLagAllowedInMinutes, int refreshPeriodInSeconds);
    public QueryWeakConsistencyPolicy(QueryWeakConsistencyPolicy other);
    private static QueryWeakConsistencyPolicy();
    public QueryWeakConsistencyPolicy Merge(string partialPolicyJson);
    public bool IsValid(String& errorMessage);
    public QueryWeakConsistencyPolicy GetEffectivePolicy();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(QueryWeakConsistencyPolicy other);
    public virtual string ToString();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public QueryWeakConsistencyPolicy NewSetPercentageOfNodes(int percentageOfNodes);
    public QueryWeakConsistencyPolicy NewSetMinimumNumberOfNodes(int minimumNumberOfNodes);
    public QueryWeakConsistencyPolicy NewSetMaximumNumberOfNodes(int maximumNumberOfNodes);
    public QueryWeakConsistencyPolicy NewSetSuperSlackerNumberOfNodesThreshold(int superSlackerNumberOfNodesThreshold);
    public QueryWeakConsistencyPolicy NewSetEnableMetadataPrefetch(bool enableMetadataPrefetch);
    public QueryWeakConsistencyPolicy NewSetMaximumLagAllowedInMinutes(int maximumLagAllowedInMinutes);
    public QueryWeakConsistencyPolicy NewSetRefreshPeriodInSeconds(int refreshPeriodInSeconds);
    public int get_PercentageOfNodes();
    public int get_MinimumNumberOfNodes();
    public int get_MaximumNumberOfNodes();
    public int get_SuperSlackerNumberOfNodesThreshold();
    public bool get_EnableMetadataPrefetch();
    public int get_MaximumLagAllowedInMinutes();
    public int get_RefreshPeriodInSeconds();
}
public class Kusto.Data.QueuedIngestionCommandResult : object {
    public Guid IngestionOperationId;
}
public class Kusto.Data.QueuedIngestionOperationsDetailsShowCommandResult : object {
    public Guid IngestionOperationId;
    public string BlobUrl;
    public string IngestionStatus;
    public Nullable`1<DateTime> StartedAt;
    public Nullable`1<DateTime> CompletedAt;
    public string FailedReason;
}
public class Kusto.Data.QueuedIngestionOperationShowCommandResult : object {
    public Guid IngestionOperationId;
    public string IngestionStatus;
    public Nullable`1<DateTime> StartedAt;
    public Nullable`1<DateTime> CompletedAt;
    public Nullable`1<long> DiscoveredCount;
    public Nullable`1<long> PendingCount;
    public Nullable`1<long> CanceledCount;
    public Nullable`1<long> IngestedCount;
    public Nullable`1<long> FailedCount;
    public string SampleFailedReasons;
}
public class Kusto.Data.RefreshPolicyCacheCommandResult : object {
    public string Result;
}
public class Kusto.Data.RegionalClusterManagementShowCmCommandResult : object {
    public string CmName;
    public string CmConnectionString;
    public string SupportedRegions;
}
public class Kusto.Data.ReplaceContainersStorageAccountsCommandResult : object {
    public string Entity;
    public string Details;
    public string Result;
}
public class Kusto.Data.RequestSupportCreateCommandResult : object {
    public string RequestSupportKey;
}
public class Kusto.Data.ResetClusterConfigurationCommandResult : object {
    public string Result;
}
[DataContractAttribute]
public enum Kusto.Data.Results.ErrorReportingPlacement : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ErrorReportingPlacement InData;
    [EnumMemberAttribute]
public static ErrorReportingPlacement EndOfTable;
    [EnumMemberAttribute]
public static ErrorReportingPlacement EndOfDataSet;
}
[ExtensionAttribute]
public static class Kusto.Data.Results.ExtendedErrorReportingPlacement : object {
    [ExtensionAttribute]
public static string FastToString(ErrorReportingPlacement that);
    public static bool FastIsDefined(string value);
    public static bool FastIsDefined(int value);
    [ExtensionAttribute]
public static bool FastHasFlag(ErrorReportingPlacement that, int flag);
    [ExtensionAttribute]
public static bool FastHasFlag(ErrorReportingPlacement that, ErrorReportingPlacement flag);
    public static ErrorReportingPlacement FastParse(string value, bool ignoreCase, bool ignoreInts);
    public static bool FastTryParse(string value, ErrorReportingPlacement& ret, bool ignoreCase, bool ignoreInts);
    [ExtensionAttribute]
public static int FastGetHashCode(ErrorReportingPlacement that);
    [ExtensionAttribute]
public static string FastGetDescription(ErrorReportingPlacement that);
}
[ExtensionAttribute]
public static class Kusto.Data.Results.ExtendedTableFragment : object {
    [ExtensionAttribute]
public static DataTable ToDataTable(ProgressiveDataSetDataTableFragmentFrame tableFragment);
    [ExtensionAttribute]
public static DataTable ToDataTable(ProgressiveDataSetDataTableFragmentFrame tableFragment, DataTable schema);
    [ExtensionAttribute]
public static DataTable ToEmptyDataTable(ProgressiveDataSetDataTableSchemaFrame tableHeader);
    private static DataTable CreateMatchingDataTable(DataTable schema, Object[] sampleRow);
    private static DataTable GuessTableSchema(ProgressiveDataSetDataTableFragmentFrame fragment);
    private static bool IsValidSchema(DataTable schema, int expectedRowCount);
}
public enum Kusto.Data.Results.FrameType : Enum {
    public int value__;
    public static FrameType DataSetHeader;
    public static FrameType TableHeader;
    public static FrameType TableFragment;
    public static FrameType TableCompletion;
    public static FrameType TableProgress;
    public static FrameType DataTable;
    public static FrameType DataSetCompletion;
    public static FrameType LastInvalid;
}
public class Kusto.Data.Results.ProgressiveDataSet : object {
    [CompilerGeneratedAttribute]
private Action Disposing;
    [CompilerGeneratedAttribute]
private Action Disposed;
    private IEnumerator`1<ProgressiveDataSetFrame> m_frames;
    public ProgressiveDataSet(IEnumerator`1<ProgressiveDataSetFrame> frames);
    [CompilerGeneratedAttribute]
public void add_Disposing(Action value);
    [CompilerGeneratedAttribute]
public void remove_Disposing(Action value);
    [CompilerGeneratedAttribute]
public void add_Disposed(Action value);
    [CompilerGeneratedAttribute]
public void remove_Disposed(Action value);
    public IEnumerator`1<ProgressiveDataSetFrame> GetFrames();
    public sealed virtual void Dispose();
    protected void OnDisposing();
    protected void OnDisposed();
}
public static class Kusto.Data.Results.ProgressiveDataSetBuilder : object {
    public static ProgressiveDataSet CreateFromDataTables(IEnumerable`1<DataTable> data);
}
public interface Kusto.Data.Results.ProgressiveDataSetCompletionFrame {
    public bool HasErrors { get; }
    public bool Cancelled { get; }
    public Exception Exception { get; }
    public abstract virtual bool get_HasErrors();
    public abstract virtual bool get_Cancelled();
    public abstract virtual Exception get_Exception();
}
public interface Kusto.Data.Results.ProgressiveDataSetDataTableFragmentFrame {
    public int TableId { get; }
    public int FieldCount { get; }
    public TableFragmentType FrameSubType { get; }
    public abstract virtual int get_TableId();
    public abstract virtual int get_FieldCount();
    public abstract virtual TableFragmentType get_FrameSubType();
    public abstract virtual bool GetNextRecord(Object[] values);
}
public interface Kusto.Data.Results.ProgressiveDataSetDataTableFrame {
    public int TableId { get; }
    public WellKnownDataSet TableKind { get; }
    public string TableName { get; }
    public IDataReader TableData { get; }
    public abstract virtual int get_TableId();
    public abstract virtual WellKnownDataSet get_TableKind();
    public abstract virtual string get_TableName();
    public abstract virtual IDataReader get_TableData();
}
public interface Kusto.Data.Results.ProgressiveDataSetDataTableSchemaFrame {
    public int TableId { get; }
    public WellKnownDataSet TableKind { get; }
    public string TableName { get; }
    public DataTable TableSchema { get; }
    public abstract virtual int get_TableId();
    public abstract virtual WellKnownDataSet get_TableKind();
    public abstract virtual string get_TableName();
    public abstract virtual DataTable get_TableSchema();
}
public interface Kusto.Data.Results.ProgressiveDataSetFrame {
    public FrameType FrameType { get; }
    public abstract virtual FrameType get_FrameType();
}
public interface Kusto.Data.Results.ProgressiveDataSetHeaderFrame {
    public string Version { get; }
    public bool IsProgressive { get; }
    public bool IsFragmented { get; }
    public ErrorReportingPlacement ErrorReportingPlacement { get; }
    public abstract virtual string get_Version();
    public abstract virtual bool get_IsProgressive();
    public abstract virtual bool get_IsFragmented();
    public abstract virtual ErrorReportingPlacement get_ErrorReportingPlacement();
}
public interface Kusto.Data.Results.ProgressiveDataSetTableCompletionFrame {
    public int TableId { get; }
    public long RowCount { get; }
    public Exception Exception { get; }
    public abstract virtual int get_TableId();
    public abstract virtual long get_RowCount();
    public abstract virtual Exception get_Exception();
}
public interface Kusto.Data.Results.ProgressiveDataSetTableProgressFrame {
    public int TableId { get; }
    public double TableProgress { get; }
    public abstract virtual int get_TableId();
    public abstract virtual double get_TableProgress();
}
public enum Kusto.Data.Results.TableFragmentType : Enum {
    public int value__;
    public static TableFragmentType DataAppend;
    public static TableFragmentType DataReplace;
    public static TableFragmentType DataRemove;
    public static TableFragmentType LastInvalid;
}
public static class Kusto.Data.RetentionPolicyMigrator : object {
    public static DataRetentionPolicyPersistency MigratePolicy(DataRetentionPolicyPersistency policy);
    public static DataRetentionPolicyPersistency AdjustRecoverability(DataRetentionPolicyPersistency policy);
}
public class Kusto.Data.RetryPurgeOperationsCommandResult : object {
    public Guid OperationId;
    public string State;
    public string StateDetails;
}
public class Kusto.Data.RetryPurgesCommandResult : object {
    public Guid OperationId;
    public string State;
    public string StateDetails;
    public string Database;
    public string Table;
}
public class Kusto.Data.RowStoreBlockKeysCommandResult : object {
    public string RowStoreName;
    public string RowStoreKey;
    public string Status;
}
public class Kusto.Data.RowStoreCreateCommandResult : object {
    public string RowStoreName;
    public Guid RowStoreId;
    public string WriteAheadLogStorage;
    public string Status;
    public DateTime StatusLastUpdatedOn;
    public string UsageTags;
}
public class Kusto.Data.RowStoreDropCommandResult : object {
    public string RowStoreName;
    public Guid RowStoreId;
    public string Status;
    public DateTime StatusLastUpdatedOn;
}
public class Kusto.Data.RowStoreShowCommandResult : object {
    public string RowStoreName;
    public Guid RowStoreId;
    public string RowStoreKey;
    public long OrdinalFrom;
    public long OrdinalTo;
    public long EstimatedDataSize;
    public long MinWriteAheadLogOffset;
    public long LocalStorageSize;
    public long LocalStorageStartOffset;
    public int Status;
    public DateTime StatusLastUpdatedOn;
    public string DatabaseName;
    public string TableName;
    public string AssignedToNode;
    public DateTime LatestIngestionTime;
}
public class Kusto.Data.RowStoresShowCommandResult : object {
    public string RowStoreName;
    public Guid RowStoreId;
    public string WriteAheadLogStorage;
    public string PersistentStorage;
    public bool IsActive;
    public string AssignedToNode;
    public long NumberOfKeys;
    public long WriteAheadLogSize;
    public long WriteAheadLogStartOffset;
    public long LocalStorageSize;
    public double WriteAheadDistanceToSizeRatioThreshold;
    public long InsertsConcurrencyLimit;
    public long KeyInsertsConcurrencyLimit;
    public long UnsealedSizePerKeyLimit;
    public long NodeInsertsConcurrencyLimit;
    public string Status;
    public DateTime StatusLastUpdatedOn;
    public string UsageTags;
    public bool IsEmpty;
    public bool IsDataAvailableForQuery;
}
public class Kusto.Data.RowStoreTransactionsShowCommandResult : object {
    public Guid RowStoreTransactionId;
    public string TransactionKind;
    public Guid RowStoreId;
    public string RowStoreName;
    public string RowStoreKey;
    public DateTime TimeStamp;
    public long OrdinalFrom;
    public long OrdinalTo;
    public Guid RootActivityId;
    public string Status;
    public string DatabaseName;
    public string TableName;
    public long DataSize;
    public long RowCount;
    public TimeSpan Duration;
}
public class Kusto.Data.RunnersDeploymentCmCommandResult : object {
    public string ServiceName;
    public string Result;
}
public class Kusto.Data.RunningQueryCancelCommandResult : object {
    public bool RunningQueryCanceled;
    public string ClientRequestId;
    public string ReasonPhrase;
}
public class Kusto.Data.SandboxesStatsShowCommandResult : object {
    public string NodeId;
    public string SandboxKind;
    public int TargetSandboxCount;
    public int AvailableSandboxCount;
    public int AllocatedSandboxCount;
    public int UsedSandboxCount;
    public long PackageLogicalSizeInBytes;
}
public class Kusto.Data.SandboxPackagesConfigurationShowCmCommandResult : object {
    public string SandboxKind;
    public string PackageVersion;
    public DateTime LastModifiedUtc;
    public string CloudVaultObjectId;
    public string SandboxTechnology;
    public string ImageName;
}
public class Kusto.Data.SchemaShowAsJsonCommandResult : object {
    public string ClusterSchema;
}
public class Kusto.Data.SchemaShowCommandResult : object {
    public string DatabaseName;
    public string TableName;
    public string ColumnName;
    public string ColumnType;
    public bool IsDefaultTable;
    public bool IsDefaultColumn;
    public string PrettyName;
    public string Version;
    public string Folder;
    public string DocString;
}
public class Kusto.Data.SchemaShowDetailsCommandResult : object {
    public string DatabaseName;
    public string TableName;
    public string ColumnName;
    public string ColumnType;
    public bool IsDefaultTable;
    public bool IsDefaultColumn;
    public string DataEncodingPolicy;
    public string PrettyName;
    public string Version;
    public string Folder;
    public string DocString;
}
public class Kusto.Data.SchemaViolationsShowCommandResult : object {
    public string EntityKind;
    public string EntityName;
    public string Property;
    public string Reason;
}
public class Kusto.Data.ScriptExecuteCommandResult : object {
    public Guid OperationId;
    public string CommandType;
    public string CommandText;
    public string Result;
    public string Reason;
}
public class Kusto.Data.ScriptExecuteObsoleteCommandResult : object {
    public DateTime Timestamp;
    public string Level;
    public string Text;
}
[DataContractAttribute]
public class Kusto.Data.SecureStorageUri : object {
    [JsonPropertyAttribute("NonSecretiveUri")]
[DataMemberAttribute]
private string m_nonSecretiveUri;
    [JsonPropertyAttribute("SecretIdentifier")]
[DataMemberAttribute]
private string m_secretIdentifier;
    public bool HasSecret { get; }
    [JsonIgnoreAttribute]
public string NonSecretiveUri { get; }
    [JsonIgnoreAttribute]
public string SecretIdentifier { get; }
    public SecureStorageUri(string nonSecretiveUri, string secretIdentifier);
    public SecureStorageUri(SecureStorageUri other);
    public bool get_HasSecret();
    public virtual string ToString();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public SecureStorageUri NewSetNonSecretiveUri(string nonSecretiveUri);
    public SecureStorageUri NewSetSecretIdentifier(string secretIdentifier);
    public string get_NonSecretiveUri();
    public string get_SecretIdentifier();
    public sealed virtual bool Equals(SecureStorageUri other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Kusto.Data.Security.AadAuthenticationMetadata : object {
    public string LoginEndpoint;
    public bool LoginMfaRequired;
    public string KustoClientAppId;
    public string KustoClientRedirectUri;
    public string KustoServiceResourceId;
    public string FirstPartyAuthorityUrl;
}
public class Kusto.Data.Security.AddPrincipalModel : PrincipalModelBase {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public string Identifier { get; public set; }
    public AddPrincipalModel(object activeContext);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    public string ToPrincipalString();
    public bool CanBeAdded();
    public bool CanAdminBeAdded();
}
public class Kusto.Data.Security.AuthenticationHelpers : object {
    private static string c_aadJwtTokenScheme;
    private static string c_basicTokenScheme;
    private static string c_dstsClaimXPathTemplate;
    private static string c_dstsXmlNamespace;
    private static string c_dstsGroupClaim;
    private static string DecodeString(string encodedString);
    public static IDictionary`2<string, object> ExtractAadClaims(string token);
    public static IDictionary`2<string, object> ExtractBasicAuthClaims(KustoConnectionStringBuilder kcsb);
    public static IDictionary`2<string, object> CreateUnauthenticatedClaims();
    public static IDictionary`2<string, object> GetPrincipalDetails(KustoConnectionStringBuilder kcsb);
    private static string GetApplicationPrincipalIdentifier(IDictionary`2<string, object> claimsDictionary);
    private static string GetPrincipalUniqueName(IDictionary`2<string, object> claimsDictionary);
    public static void TrustKustoUriOrThrow(Uri endpoint);
    public static bool IsTrustedKustoEndpoint(Uri clusterUri, String& errorMessage);
}
public enum Kusto.Data.Security.AuthenticationMethod : Enum {
    public int value__;
    public static AuthenticationMethod None;
    public static AuthenticationMethod UsernamePassword;
    public static AuthenticationMethod AadUserPromptWithCache;
    public static AuthenticationMethod AadUserToken;
    public static AuthenticationMethod AadApplicationToken;
    public static AuthenticationMethod AadApplicationKey;
    public static AuthenticationMethod AadApplicationCertificateThumbprint;
    public static AuthenticationMethod AadApplicationCertificateSubjectAndIssuer;
    public static AuthenticationMethod AadApplicationCertificate;
    public static AuthenticationMethod AadManagedIdentity;
    public static AuthenticationMethod AadAzCli;
    public static AuthenticationMethod DstsUserPromptWithCache;
    public static AuthenticationMethod DstsApplicationCertificateThumbprint;
    public static AuthenticationMethod DstsUserToken;
    public static AuthenticationMethod DstsApplicationToken;
    public static AuthenticationMethod DstsApplicationCertificateSubject;
    public static AuthenticationMethod AadTokenProvider;
    public static AuthenticationMethod DstsApplicationCertificateBlob;
    public static AuthenticationMethod KustoTokenCredentialsProvider;
}
internal enum Kusto.Data.Security.CloudType : Enum {
    public int value__;
    public static CloudType Private;
    public static CloudType PublicCloud;
    public static CloudType Mooncake;
    public static CloudType BlackForest;
    public static CloudType FairFax;
    public static CloudType Ppe;
    public static CloudType USNat;
    public static CloudType USSec;
}
internal static class Kusto.Data.Security.CloudTypeEndpointSuffixResolver : object {
    public static string AriaProxyEndpointSuffixInPublicCloud;
    public static string EndpointSuffixInPublicCloud;
    public static string EndpointSuffixInTestCloud;
    public static string LoginEndpointInPublicCloud;
    public static string EndpointSuffixInMooncake;
    public static string LoginEndpointInMooncake;
    public static string EndpointSuffixInBlackForest;
    public static string EndpointSuffixInFairFax;
    public static string LoginEndpointInFairFax;
    public static string EndpointSuffixInPpe;
    public static string EndpointSuffixInUSNat;
    public static string LoginEndpointInUSNat;
    public static string EndpointSuffixInUSSec;
    public static string LoinEndpointInUSSec;
    private static Dictionary`2<CloudType, string> s_cloudTypeToEndpointSuffix;
    private static CloudTypeEndpointSuffixResolver();
    public static CloudType GetCloudType(string serviceEndpoint);
    public static string GetEndpointSuffix(CloudType cloudType);
    public static string GetEndpointSuffix(string kustoConnection);
}
public class Kusto.Data.Security.DstsAuthenticationMetadata : object {
    public string CloudEndpointSuffix;
    public string DstsRealm;
    public string DstsInstance;
    public string KustoDnsHostName;
    public string ServiceName;
    public string KustoDstsServiceId;
    public string DstsJWTAuthorityAddress;
}
[ExtensionAttribute]
internal static class Kusto.Data.Security.ExtendedAadApplicationAuth : object {
    [ExtensionAttribute]
internal static bool IsAadApplicationAuth(AuthenticationMethod authMethod);
    [ExtensionAttribute]
internal static bool IsAadApplicationCertificateAuth(AuthenticationMethod authMethod);
}
public static class Kusto.Data.Security.HttpClientAuthenticatorFactory : object {
    private static IReadOnlyDictionary`2<string, Assembly> s_assemblies;
    private static HttpClientAuthenticatorFactory();
    public static Context GetContext(string targetResourceId, string targetResourceDisplayName, ITraceSource tracer);
    public static IHttpClientAuthenticator CreateAuthenticator(SecretiveUri secretiveUri, Context context, IKustoTokenCredentialsProvider credentialsProvider, String& error);
    public static IHttpClientAuthenticator CreateAuthenticator(KustoHttpAuthenticationMethod authenticationMethod, string token, Context context, IKustoTokenCredentialsProvider credentialsProvider, string account, String& error);
    public static IHttpClientAuthenticator CreateAuthenticator(KustoConnectionStringBuilder kcsb);
    public static SchemeAndParameter TryGetSchemeAndParameter(KustoConnectionStringBuilder kcsb);
}
public interface Kusto.Data.Security.IStorageAccountCredentialsProvider {
    public abstract virtual string ResolveStorageAccountUriCredentials(string storageAccountUri);
    public abstract virtual ImmutableArray`1<string> ResolveStorageAccountUriCredentials(ImmutableArray`1<string> storageAccountUris);
    public abstract virtual string RemoveStorageAccountUriCredentials(string storageAccountUri);
    public abstract virtual ImmutableArray`1<string> RemoveStorageAccountUriCredentials(ImmutableArray`1<string> storageAccountUris);
}
public interface Kusto.Data.Security.IStorageAccountCredentialsProviderFactory {
    public abstract virtual IStorageAccountCredentialsProvider GetStorageAccountCredentialsProvider(string credentialsProviderConnectionString);
}
internal class Kusto.Data.Security.KustoClientServiceAadEntitiesConfiguration : object {
    public static string AadAuthorityEndpointTemplate;
    private static string c_aadAuthorityBaseUriPublicCloud;
    private static string c_firstPartyTenantIdPublicCloud;
    private static string c_kustoClientAadApplicationIdPublicCloud;
    private static string c_kustoServiceDefaultResourceId;
    [CompilerGeneratedAttribute]
private string <AadAuthorityBaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AadCommonAuthorityUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AadOrganizationsAuthorityUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstPartyAuthorityUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KustoClientAadApplicationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KustoServiceResourceId>k__BackingField;
    public string AadAuthorityBaseUrl { get; private set; }
    public string AadCommonAuthorityUrl { get; private set; }
    public string AadOrganizationsAuthorityUrl { get; private set; }
    public string FirstPartyAuthorityUrl { get; private set; }
    public string KustoClientAadApplicationId { get; private set; }
    public string KustoClientRedirectUri { get; }
    public string KustoServiceResourceId { get; private set; }
    [CompilerGeneratedAttribute]
public string get_AadAuthorityBaseUrl();
    [CompilerGeneratedAttribute]
private void set_AadAuthorityBaseUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AadCommonAuthorityUrl();
    [CompilerGeneratedAttribute]
private void set_AadCommonAuthorityUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AadOrganizationsAuthorityUrl();
    [CompilerGeneratedAttribute]
private void set_AadOrganizationsAuthorityUrl(string value);
    [CompilerGeneratedAttribute]
public string get_FirstPartyAuthorityUrl();
    [CompilerGeneratedAttribute]
private void set_FirstPartyAuthorityUrl(string value);
    [CompilerGeneratedAttribute]
public string get_KustoClientAadApplicationId();
    [CompilerGeneratedAttribute]
private void set_KustoClientAadApplicationId(string value);
    public string get_KustoClientRedirectUri();
    [CompilerGeneratedAttribute]
public string get_KustoServiceResourceId();
    [CompilerGeneratedAttribute]
private void set_KustoServiceResourceId(string value);
    public static KustoClientServiceAadEntitiesConfiguration CreateConfigurationFromAuthenticationMetadataEndpoint(ParsedUri parsedKustoConnectionDataSource, Boolean& loginMfaRequired);
    public static AadAuthenticationMetadata GetDefaultPublicCloudAadAuthenticationMetadata();
    public static string GetTenantIdFromAuthorityUrl(string authorityUrl);
}
internal class Kusto.Data.Security.KustoClientServiceDstsEntitiesConfiguration : object {
    private static string c_corePrefix;
    [CompilerGeneratedAttribute]
private string <EndpointSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DstsRealm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DstsDnsHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KustoDnsHostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KustoServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KustoDstsServiceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DstsJWTAuthorityAddress>k__BackingField;
    public string EndpointSuffix { get; private set; }
    public string DstsRealm { get; private set; }
    public string DstsDnsHostName { get; private set; }
    public string KustoDnsHostName { get; private set; }
    public string KustoServiceName { get; private set; }
    public string KustoDstsServiceId { get; private set; }
    public string DstsJWTAuthorityAddress { get; private set; }
    [CompilerGeneratedAttribute]
public string get_EndpointSuffix();
    [CompilerGeneratedAttribute]
private void set_EndpointSuffix(string value);
    [CompilerGeneratedAttribute]
public string get_DstsRealm();
    [CompilerGeneratedAttribute]
private void set_DstsRealm(string value);
    [CompilerGeneratedAttribute]
public string get_DstsDnsHostName();
    [CompilerGeneratedAttribute]
private void set_DstsDnsHostName(string value);
    [CompilerGeneratedAttribute]
public string get_KustoDnsHostName();
    [CompilerGeneratedAttribute]
private void set_KustoDnsHostName(string value);
    [CompilerGeneratedAttribute]
public string get_KustoServiceName();
    [CompilerGeneratedAttribute]
private void set_KustoServiceName(string value);
    [CompilerGeneratedAttribute]
public string get_KustoDstsServiceId();
    [CompilerGeneratedAttribute]
private void set_KustoDstsServiceId(string value);
    [CompilerGeneratedAttribute]
public string get_DstsJWTAuthorityAddress();
    [CompilerGeneratedAttribute]
private void set_DstsJWTAuthorityAddress(string value);
    public static KustoClientServiceDstsEntitiesConfiguration CreateConfigurationFromAuthenticationMetadataEndpoint(ParsedUri parsedKustoConnectionDataSource);
    public static DstsAuthenticationMetadata GetDefaultPublicCloudDstsAuthenticationMetadata();
    public static string BuildDstsAuthority(string dstsInstance);
    private static string GetAzureEndpointSuffix(string endpointSuffix);
    private static KustoClientServiceDstsEntitiesConfiguration CreateConfiguration(string kustoConnectionDataSource);
}
public class Kusto.Data.Security.KustoEndpointStructure : ValueType {
    public static string KustoDomain;
    public static string KustoMfaDomain;
    public static String[] Suffixes;
    private static String[] KustoDomains;
    private static String[] IgnorableNamePrefixes;
    private static KustoEndpointStructure();
    public static bool AreSameCluster(string cluster1, string cluster2);
    public static int GetEquivalenceAwareHashCode(string obj);
    private static bool DomainsAreEquivalent(EndpointParts ep1, EndpointParts ep2);
    private static bool StringEqualsToSubstring(string str1, string str2, int startIndex2, int length2, StringComparison comparisonType);
    private static bool SubstringsAreEqual(string str1, int startIndex1, int length1, string str2, int startIndex2, int length2, StringComparison comparisonType);
    private static EndpointParts ResolveClusterNameParts(string endpoint);
}
public abstract class Kusto.Data.Security.PrincipalModelBase : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ActiveContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Notes>k__BackingField;
    public string Type { get; public set; }
    public string Role { get; public set; }
    public object ActiveContext { get; public set; }
    public string Notes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(string value);
    [CompilerGeneratedAttribute]
public object get_ActiveContext();
    [CompilerGeneratedAttribute]
public void set_ActiveContext(object value);
    [CompilerGeneratedAttribute]
public string get_Notes();
    [CompilerGeneratedAttribute]
public void set_Notes(string value);
    public AuthorizationRole GetAuthorizationRole();
}
public enum Kusto.Data.Security.PrincipalType : Enum {
    public int value__;
    public static PrincipalType KustoUser;
    public static PrincipalType AadUser;
    public static PrincipalType AadGroup;
    public static PrincipalType AadApplication;
    public static PrincipalType KustoService;
    public static PrincipalType DstsUser;
    public static PrincipalType DstsGroup;
    public static PrincipalType DstsApplication;
    public static PrincipalType MsaUser;
}
[ExtensionAttribute]
public static class Kusto.Data.Security.PrincipalTypeExtensions : object {
    [ExtensionAttribute]
public static string ToFriendlyString(PrincipalType principalType);
    public static PrincipalType FromFriendlyString(string principalTypeString);
}
public class Kusto.Data.Security.SecurityUtils : object {
    public static AuthenticationMethod GetAuthenticationMethod(KustoConnectionStringBuilder kcsb);
}
public class Kusto.Data.Security.ViewPrincipalModel : PrincipalModelBase {
    [CompilerGeneratedAttribute]
private string <PrincipalDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrincipalObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrincipalFqn>k__BackingField;
    public string PrincipalDisplayName { get; public set; }
    public string PrincipalObjectId { get; public set; }
    public string PrincipalFqn { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PrincipalDisplayName();
    [CompilerGeneratedAttribute]
public void set_PrincipalDisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_PrincipalObjectId();
    [CompilerGeneratedAttribute]
public void set_PrincipalObjectId(string value);
    [CompilerGeneratedAttribute]
public string get_PrincipalFqn();
    [CompilerGeneratedAttribute]
public void set_PrincipalFqn(string value);
    public static ViewPrincipalModel Translate(ShowAccessGroupsCommandResult result);
}
public class Kusto.Data.Security.VoidStorageAccountCredentialsProvider : object {
    public static IStorageAccountCredentialsProvider Instance;
    private static VoidStorageAccountCredentialsProvider();
    public sealed virtual string ResolveStorageAccountUriCredentials(string storageAccountUri);
    public sealed virtual ImmutableArray`1<string> ResolveStorageAccountUriCredentials(ImmutableArray`1<string> storageAccountUris);
    public sealed virtual string RemoveStorageAccountUriCredentials(string storageAccountUri);
    public sealed virtual ImmutableArray`1<string> RemoveStorageAccountUriCredentials(ImmutableArray`1<string> storageAccountUris);
    public sealed virtual void Dispose();
}
public class Kusto.Data.Security.VoidStorageAccountCredentialsProviderFactory : object {
    public static IStorageAccountCredentialsProviderFactory Instance { get; }
    public static IStorageAccountCredentialsProviderFactory get_Instance();
    public sealed virtual IStorageAccountCredentialsProvider GetStorageAccountCredentialsProvider(string credentialsProviderConnectionString);
}
public static class Kusto.Data.Security.WellKnownAadResourceIds : object {
    public static string AadResourceId_AzureKustoMfa;
    public static string AadResourceId_EventHub;
    public static string AadResourceId_AzureKusto { get; }
    public static string AadResourceId_AzureSql { get; }
    public static string AadResourceId_AzureStorage { get; }
    public static string AadResourceId_AzureDataLakeStoreGen1 { get; }
    public static string AadResourceId_AzureDigitalTwins { get; }
    public static string AadResourceId_AzureManagement { get; }
    private static WellKnownAadResourceIds();
    public static string get_AadResourceId_AzureKusto();
    public static string get_AadResourceId_AzureSql();
    public static string get_AadResourceId_AzureStorage();
    public static string get_AadResourceId_AzureDataLakeStoreGen1();
    public static string get_AadResourceId_AzureDigitalTwins();
    public static string get_AadResourceId_AzureManagement();
    public static string GetResourceIdOrNull(string serviceUri);
    public static string GetResourceIdOrNull(Service service, string serviceUri);
    private static string Success(Service service, string serviceUri, string result);
    private static string Error(Service service, string serviceUri);
    private static Service DetermineServiceByHostname(string hostname);
    private static Service DetermineService(Service service, string serviceUri);
}
public class Kusto.Data.ServiceArmDetailsRegenerateCommandResult : object {
    public string ServiceName;
    public string ResourceId;
    public Nullable`1<bool> Hydrated;
    public string TenantId;
    public Nullable`1<bool> IsTenantIdFixed;
}
public class Kusto.Data.ServiceAuditLogShowCommandResult : object {
    public Guid OperationId;
    public string OperationKind;
    public string ServiceName;
    public string ServiceType;
    public DateTime StartTime;
    public TimeSpan Duration;
    public string State;
    public string StateDetails;
    public string PrincipalIdentity;
    public string ClientActivityId;
    public string Text;
    public string AdditionalParameters;
}
public class Kusto.Data.ServiceCheckNameAvailabilityCmCommandResult : object {
    public string Name;
    public bool IsAvailable;
    public string Message;
}
public class Kusto.Data.ServiceConfigurationShowCmCommandResult : object {
    public string ServiceName;
    public string AccountName;
    public string PublicUrl;
    public string ServiceConfiguration;
}
public class Kusto.Data.ServiceConfigurationsShowCmCommandResult : object {
    public string ServiceName;
    public string ServiceConfiguration;
}
public class Kusto.Data.ServiceDatabasesShowCommandResult : object {
    public string DatabaseName;
    public string DatabaseAccessMode;
    public string PrettyName;
    public string Version;
    public double SoftDeletePeriodInDays;
    public double HotCachePeriodInDays;
    public string ProvisioningState;
    public double Size;
    public Nullable`1<TimeSpan> SoftDeletePeriod;
    public Nullable`1<TimeSpan> HotCachePeriod;
    public bool IsFollowed;
    public string KeyVaultProperties;
    public string SuspensionState;
}
public class Kusto.Data.ServiceDatabasesSummaryShowCommandResult : object {
    public string DatabaseName;
    public string DatabaseAccessMode;
    public string PrettyName;
    public bool IsFollowed;
    public string KeyVaultProperties;
    public string SuspensionState;
}
public class Kusto.Data.ServiceFabricLocksShowCmCommandResult : object {
    public string Name;
    public string FullName;
    public bool IsAcquired;
    public string State;
}
public class Kusto.Data.ServiceMetadataShowCommandResult : object {
    public string Description;
    public string StreamName;
    public string TemporaryDownloadUri;
    public string Metadata;
}
public class Kusto.Data.ServiceModelShowCommandResult : object {
    public string AccountName;
    public string ServiceName;
    public string ServiceType;
    public string Pipeline;
    public string PublicUrl;
    public string State;
    public string ServiceAlias;
    public string StateDetails;
    public string DeploymentRing;
    public string DeploymentKind;
    public string Location;
}
public class Kusto.Data.ServicePackagesConfigurationShowCmCommandResult : object {
    public string ServiceType;
    public string ProductVersion;
    public DateTime LastModifiedUtc;
    public string DeploymentKind;
    public string CloudVaultObjectId;
    public string DeploymentRing;
    public string OsType;
    public string DotnetPlatform;
    public string HostingType;
    public string OsImageType;
}
public class Kusto.Data.ServicePurgesShowCommandResult : object {
    public Guid ManagementOperationId;
    public Guid EngineOperationId;
    public string ServiceName;
    public string DatabaseName;
    public string TableName;
    public DateTime StartTime;
    public TimeSpan Duration;
    public string State;
    public string StateDetails;
    public DateTime EngineStartTime;
    public TimeSpan EngineDuration;
    public string ClientActivityId;
    public string PrincipalIdentity;
}
public class Kusto.Data.ServiceShowCmCommandResult : object {
    public string ServiceName;
    public string AccountName;
    public string InstancesCountByStatus;
    public string InstancesDetails;
    public string SubscriptionMetadata;
    public string PublicUrl;
    public string ServiceConfiguration;
    public string AutoscaleSetting;
    public string DeploymentDetails;
    public string HostedServiceDetails;
    public string State;
    public string StateDetails;
    public string ServiceDetails;
    public string ServiceHealthState;
    public string VirtualMachineScaleSetVMs;
    public string NodesDetails;
    public string NodesCountByHealthState;
    public string DeploymentKind;
    public string MissingNodes;
}
public class Kusto.Data.ServicesInNonRegisteredSubscriptionsShowCommandResult : object {
    public string ServiceName;
    public string ClientSubscription;
    public string ClientSubscriptionState;
    public string ServiceState;
    public string Reason;
    public string ResourceId;
    public string AdditionalDetails;
}
public class Kusto.Data.ServiceStorageAccountsAlterCommandResult : object {
    public string StorageAccountName;
    public string AccountType;
    public bool ReservedSlot1;
    public string OperationResult;
}
public class Kusto.Data.ServiceStorageAccountsKeysRegenerateCommandResult : object {
    public string StorageAccountName;
    public string KeyHash;
    public string ServiceName;
}
public class Kusto.Data.ServiceStorageAccountsKeysShowCommandResult : object {
    public string StorageAccountName;
    public string StorageAccountKeyInUse;
    public string StorageAccountPurpose;
}
public class Kusto.Data.ServiceStorageAccountsShowCommandResult : object {
    public string StorageAccountName;
    public string Location;
    public string Label;
    public string AccountType;
    public long Capacity;
    public string SubscriptionId;
    public string ManagementType;
    public bool EncryptionEnabled;
    public string OperationResult;
    public bool HasIdentity;
    public string KeyVaultProperties;
    public string Purpose;
    public string Zone;
    public string BlobSoftDeleteProperties;
    public string ContainerSoftDeleteProperties;
}
public class Kusto.Data.ServiceStorageObjectsShowCmCommandResult : object {
    public string ObjectIdentifier;
    public string StorageAccountName;
    public string ObjectName;
    public string ObjectType;
    public string ObjectUrl;
}
public class Kusto.Data.ServiceSuspendAdminNodeCommandResult : object {
    public string AdminNode;
    public DateTime ExpirationTime;
}
public class Kusto.Data.ServiceVersionsShowCmCommandResult : object {
    public string ServiceName;
    public string BuildVersion;
    public DateTime BuildTime;
    public string ServiceType;
    public string ProductVersion;
    public string ServiceOffering;
}
public class Kusto.Data.SetOrAppendPluginResult : object {
    public string DataIngestionResult;
}
public class Kusto.Data.ShardRecordsDeleteCommandResult : object {
    public Guid OldExtentId;
    public Guid NewExtentId;
    public bool Success;
}
[DataContractAttribute]
public class Kusto.Data.ShardsWarmingCommandResult : object {
    [DataMemberAttribute]
public string NodeId;
    [DataMemberAttribute]
public DateTime CompletedAt;
    [DataMemberAttribute]
public TimeSpan Duration;
    [DataMemberAttribute]
public bool Completed;
    [DataMemberAttribute]
public long WarmedShardsCount;
    [DataMemberAttribute]
public Nullable`1<long> WarmedShardsSize;
    [DataMemberAttribute]
public int ShardsToWarmCount;
    [DataMemberAttribute]
public Nullable`1<long> ShardsToWarmSize;
    [DataMemberAttribute]
public int HotShardsCount;
    [DataMemberAttribute]
public Nullable`1<long> HotShardsSize;
    [DataMemberAttribute]
public bool Active;
    public ShardsWarmingCommandResult(bool completed, long warmedShardsCount, Nullable`1<long> warmedShardsSize, int shardsToWarmCount, Nullable`1<long> shardsToWarmSize, int hotShardsCount, Nullable`1<long> hotShardsSize, DateTime startedAt, Nullable`1<DateTime> completedAt, string nodeId, bool active);
    public sealed virtual bool Equals(ShardsWarmingCommandResult other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void SetDuration(DateTime startedAt, Nullable`1<DateTime> completedAt);
    public virtual string ToString();
}
public class Kusto.Data.ShowAccessGroupsCommandResult : object {
    public string Role;
    public string PrincipalType;
    public string PrincipalDisplayName;
    public string PrincipalObjectId;
    public string PrincipalFQN;
    public string Notes;
    public string RoleAssignmentIdentifier;
}
public class Kusto.Data.ShowAccessGroupsCommandResultLight : object {
    public string EntityName;
    public string Role;
    public string PrincipalFQN;
    public string Notes;
    public string Scope;
}
public class Kusto.Data.ShowBlockedPrincipalsCommandResult : object {
    public string PrincipalType;
    public string PrincipalDisplayName;
    public string PrincipalObjectId;
    public string PrincipalFQN;
    public string Application;
    public string User;
    public DateTime BlockedUntil;
    public string Reason;
}
public class Kusto.Data.ShowCertificateCmCommandResult : object {
    public string Name;
    public string Thumbprint;
    public DateTime Created;
    public DateTime ValidFrom;
    public DateTime Expires;
    public bool Enabled;
    public string Id;
}
public class Kusto.Data.ShowDashboardTenantsCountForMigrationCommandResult : object {
    public int TenantsCount;
}
public class Kusto.Data.ShowLeaderDatabasesCommandResult : object {
    public string Databases;
    public string Region;
    public string ErrorCode;
    public string ErrorMessage;
    public string CustomErrorCode;
    public string ErrorParams;
}
public class Kusto.Data.ShowPluginCommandResult : object {
    public string PluginName;
    public bool IsEnabled;
    public string Description;
}
public class Kusto.Data.ShowPrincipalAccessCommandResult : object {
    public string PrincipalFQN;
    public string EntityName;
    public string AccessType;
    public bool IsAllowed;
}
public class Kusto.Data.ShowTrustedExternalTenantsCommandResult : object {
    public string TenantId;
    public string TenantDomain;
}
[DataContractAttribute]
public class Kusto.Data.SlackerSettings : object {
    private static PolicyOrigin s_defaultOriginForDeserialization;
    public static SlackerSettings Default;
    [JsonPropertyAttribute("IsEnabled")]
[DataMemberAttribute]
private bool m_isEnabled;
    [JsonPropertyAttribute("Origin")]
[DataMemberAttribute]
private PolicyOrigin m_origin;
    [JsonIgnoreAttribute]
public bool IsEnabled { get; }
    [JsonIgnoreAttribute]
public PolicyOrigin Origin { get; }
    public SlackerSettings(bool isEnabled, PolicyOrigin origin);
    public SlackerSettings(SlackerSettings other);
    private static SlackerSettings();
    public bool IsValid(String& errorMessage);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public object Clone();
    public bool EqualsIgnoreOrigin(SlackerSettings other);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public SlackerSettings NewSetIsEnabled(bool isEnabled);
    public SlackerSettings NewSetOrigin(PolicyOrigin origin);
    public bool get_IsEnabled();
    public PolicyOrigin get_Origin();
}
public class Kusto.Data.SnatConnectionCountFailuresMetricResult : object {
    public DateTime MetricTime;
    public int FailedSnatCount;
}
public enum Kusto.Data.SqlDialectKind : Enum {
    public int value__;
    public static SqlDialectKind MsSql;
    public static SqlDialectKind MySql;
    public static SqlDialectKind PostgreSql;
    public static SqlDialectKind CosmosDbSql;
}
public class Kusto.Data.StackSampleShowCommandResult : object {
    public string NodeId;
    public int Count;
    public string Callstack;
}
public class Kusto.Data.StagingStorageRetentionPeriodSetCommandResult : object {
    public TimeSpan UpdatedCsvContainerRetentionPeriod;
}
public class Kusto.Data.StorageAccountRotateKeyCommandResult : object {
    public string ServiceName;
    public bool IsEmergency;
}
public class Kusto.Data.StorageArtifactsCleanupCommandResult : object {
    public Guid ExtentId;
    public string StorageContainer;
    public string StorageObject;
}
public class Kusto.Data.StorageContainersUsageShowCommandResult : object {
    public string UnusedContainerUri;
}
public class Kusto.Data.StorageKeysAlterCommandResult : object {
    public string StorageAccountName;
    public string Result;
    public string FailureReason;
    public string Scope;
}
public class Kusto.Data.StorageKeysHashShowCommandResult : object {
    public string StorageAccountName;
    public string StorageKeyHash;
    public string DatabaseName;
    public string Dedication;
    public bool IsOwner;
}
[DataContractAttribute]
public class Kusto.Data.StoredQueryResultsCapacity : object {
    private static long c_defaultMaximumConcurrentOperationsPerDbAdmin;
    private static double c_defaultCoreUtilizationCoefficient;
    [JsonPropertyAttribute("MaximumConcurrentOperationsPerDbAdmin")]
[DataMemberAttribute]
private long m_maximumConcurrentOperationsPerDbAdmin;
    [JsonPropertyAttribute("CoreUtilizationCoefficient")]
[DataMemberAttribute]
private double m_coreUtilizationCoefficient;
    [JsonIgnoreAttribute]
public long MaximumConcurrentOperationsPerDbAdmin { get; }
    [JsonIgnoreAttribute]
public double CoreUtilizationCoefficient { get; }
    public StoredQueryResultsCapacity(long maximumConcurrentOperationsPerDbAdmin, double coreUtilizationCoefficient);
    public StoredQueryResultsCapacity(StoredQueryResultsCapacity other);
    public bool IsValid(String& errorMessage);
    public virtual string ToString();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public StoredQueryResultsCapacity NewSetMaximumConcurrentOperationsPerDbAdmin(long maximumConcurrentOperationsPerDbAdmin);
    public StoredQueryResultsCapacity NewSetCoreUtilizationCoefficient(double coreUtilizationCoefficient);
    public long get_MaximumConcurrentOperationsPerDbAdmin();
    public double get_CoreUtilizationCoefficient();
    public sealed virtual bool Equals(StoredQueryResultsCapacity other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Kusto.Data.StoredQueryResultShowSchemaResult : object {
    public string StoredQueryResult;
    public string Schema;
}
public class Kusto.Data.StoredQueryResultsSearchCommandResult : object {
    public string StoredQueryResult;
}
public class Kusto.Data.StoredQueryResultsShowCommandResult : object {
    public Guid StoredQueryResultId;
    public string Name;
    public string DatabaseName;
    public string PrincipalIdentity;
    public long SizeInBytes;
    public long RowCount;
    public DateTime CreatedOn;
    public DateTime ExpiresOn;
}
public class Kusto.Data.StreamIngestResult : object {
    public long ConsumedRecordsCount;
    public string UpdatePolicyStatus;
    public string UpdatePolicyFailureCode;
    public string UpdatePolicyFailureReason;
}
public class Kusto.Data.StreamingIngestionFailuresShowCommandResult : object {
    public string Database;
    public string Table;
    public string Principal;
    public Guid RootActivityId;
    public string IngestionProperties;
    public long Count;
    public DateTime FirstFailureOn;
    public DateTime LastFailureOn;
    public string FailureKind;
    public string ErrorCode;
    public string Details;
}
[DataContractAttribute]
public class Kusto.Data.StreamingIngestionPolicy : object {
    private static int DefaultNumberOfRowStores;
    private static int NumberOfRowStoresPerGbHrOfDataRate;
    [CompilerGeneratedAttribute]
private static StreamingIngestionPolicy <Default>k__BackingField;
    [JsonPropertyAttribute("IsEnabled")]
[DataMemberAttribute]
private bool m_isEnabled;
    [JsonPropertyAttribute("HintAllocatedRate")]
[DataMemberAttribute]
private Nullable`1<double> m_hintAllocatedRate;
    [JsonPropertyAttribute("NumberOfRowStores")]
[DataMemberAttribute]
private Nullable`1<int> m_numberOfRowStores;
    [JsonPropertyAttribute("SealIntervalLimit")]
[DataMemberAttribute]
private Nullable`1<TimeSpan> m_sealIntervalLimit;
    [JsonPropertyAttribute("SealThresholdBytes")]
[DataMemberAttribute]
private Nullable`1<long> m_sealThresholdBytes;
    [JsonPropertyAttribute("UsageTags")]
private ImmutableArray`1<string> m_usageTags;
    [JsonIgnoreAttribute]
[DataMemberAttribute]
private String[] m_transportUsageTags;
    [JsonPropertyAttribute("IsMaintenanceActive")]
[DataMemberAttribute]
private bool m_isMaintenanceActive;
    public static StreamingIngestionPolicy Default { get; }
    [JsonIgnoreAttribute]
public bool IsEnabled { get; }
    [JsonIgnoreAttribute]
public Nullable`1<double> HintAllocatedRate { get; }
    [JsonIgnoreAttribute]
private Nullable`1<int> NumberOfRowStores { get; }
    [JsonIgnoreAttribute]
private Nullable`1<TimeSpan> SealIntervalLimit { get; }
    [JsonIgnoreAttribute]
private Nullable`1<long> SealThresholdBytes { get; }
    [JsonIgnoreAttribute]
public ImmutableArray`1<string> UsageTags { get; }
    [JsonIgnoreAttribute]
public bool IsMaintenanceActive { get; }
    private static StreamingIngestionPolicy();
    public StreamingIngestionPolicy(bool isEnabled);
    public StreamingIngestionPolicy(bool isEnabled, ImmutableArray`1<string> usageTags);
    public StreamingIngestionPolicy(bool isEnabled, Nullable`1<double> hintAllocatedRate);
    public StreamingIngestionPolicy(bool isEnabled, Nullable`1<double> hintAllocatedRate, ImmutableArray`1<string> usageTags);
    public StreamingIngestionPolicy(bool isEnabled, Nullable`1<double> hintAllocatedRate, Nullable`1<TimeSpan> sealIntervalLimit, Nullable`1<long> sealThresholdBytes);
    private StreamingIngestionPolicy(bool isEnabled, Nullable`1<double> hintAllocatedRate, Nullable`1<int> numberOfRowStores, Nullable`1<TimeSpan> sealIntervalLimit, Nullable`1<long> sealThresholdBytes, ImmutableArray`1<string> usageTags, bool isMaintenanceActive);
    public StreamingIngestionPolicy(StreamingIngestionPolicy other);
    [CompilerGeneratedAttribute]
public static StreamingIngestionPolicy get_Default();
    public Nullable`1<TimeSpan> GetSealIntervalLimit();
    public Nullable`1<long> GetSealThresholdBytes();
    public virtual string ToString();
    private void AfterDeserialized();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public StreamingIngestionPolicy NewSetIsEnabled(bool isEnabled);
    public StreamingIngestionPolicy NewSetHintAllocatedRate(Nullable`1<double> hintAllocatedRate);
    public StreamingIngestionPolicy NewSetUsageTags(ImmutableArray`1<string> usageTags);
    public StreamingIngestionPolicy NewSetIsMaintenanceActive(bool isMaintenanceActive);
    public bool get_IsEnabled();
    public Nullable`1<double> get_HintAllocatedRate();
    private Nullable`1<int> get_NumberOfRowStores();
    private Nullable`1<TimeSpan> get_SealIntervalLimit();
    private Nullable`1<long> get_SealThresholdBytes();
    public ImmutableArray`1<string> get_UsageTags();
    public bool get_IsMaintenanceActive();
    public sealed virtual bool Equals(StreamingIngestionPolicy other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DataContractAttribute]
public class Kusto.Data.StreamingIngestionPostProcessingCapacity : object {
    public static long DefaultMaximumConcurrentOperationsPerNode;
    [JsonPropertyAttribute("MaximumConcurrentOperationsPerNode")]
[DataMemberAttribute]
private long m_maximumConcurrentOperationsPerNode;
    [JsonIgnoreAttribute]
public long MaximumConcurrentOperationsPerNode { get; }
    public StreamingIngestionPostProcessingCapacity(long maximumConcurrentOperationsPerNode);
    public StreamingIngestionPostProcessingCapacity(StreamingIngestionPostProcessingCapacity other);
    private static StreamingIngestionPostProcessingCapacity();
    public virtual string ToString();
    public bool IsValid(String& errorMessage);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
    public StreamingIngestionPostProcessingCapacity NewSetMaximumConcurrentOperationsPerNode(long maximumConcurrentOperationsPerNode);
    public long get_MaximumConcurrentOperationsPerNode();
    public sealed virtual bool Equals(StreamingIngestionPostProcessingCapacity other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Kusto.Data.StreamingIngestionSchemaCacheClearCommandResult : object {
    public string NodeId;
    public string Status;
}
public class Kusto.Data.StreamingIngestionStatisticsShowCommandResult : object {
    public string Database;
    public string Table;
    public DateTime StartTime;
    public DateTime EndTime;
    public long Count;
    public TimeSpan MinDuration;
    public TimeSpan MaxDuration;
    public TimeSpan AvgDuration;
    public long TotalDataSize;
    public long MinDataSize;
    public long MaxDataSize;
    public long TotalRowCount;
    public long MinRowCount;
    public long MaxRowCount;
    public string IngestionStatus;
    public int NumOfRowStoresReferences;
    public string Principal;
    public string NodeId;
    public string IngestionProperties;
}
public class Kusto.Data.SubscribedTenantsShowCommandResult : object {
    public string TenantType;
    public string TenantId;
}
public class Kusto.Data.SubscriptionShowCmCommandResult : object {
    public Guid SubscriptionId;
    public string SubscriptionName;
    public int AvailableArmStorageAccounts;
    public int CurrentArmStorageAccounts;
    public int AvailableArmPartitionedDnsStorageAccounts;
    public int CurrentArmPartitionedDnsStorageAccounts;
    public string AzureAccountAdmin;
    public string AzureServiceAdmin;
    public int KustoServiceCount;
    public string KustoServiceNames;
    public int AvailableArmCores;
    public int CurrentArmCores;
    public string ResourcesUsageByRegion;
    public int CurrentVMSS;
    public string RegisteredAfecFlags;
}
public class Kusto.Data.SynapseMockNotifyCommandResult : object {
    public string WorkspaceUid;
    public string NotificationType;
    public string Message;
}
public class Kusto.Data.SynapseMockRbacNotifyCommandResult : object {
    public string WorkspaceUid;
    public string Message;
}
public class Kusto.Data.SynapseMockRbacSetCommandResult : object {
    public string Message;
}
public class Kusto.Data.SynapseMockSettingsSetCommandResult : object {
    public string Message;
}
public class Kusto.Data.SynapsePrivateEndpointCreateCommandResult : object {
    public string Status;
    public string Description;
}
public class Kusto.Data.SystemPropertiesShowCommandResult : object {
    public string PropertyName;
    public string PropertyValue;
}
public class Kusto.Data.TableClearDataCommandResult : object {
    public string Status;
}
public class Kusto.Data.TableColumnsCardinalityShowCommandResult : object {
    public string DatabaseName;
    public string TableName;
    public string ColumnName;
    public DateTime LastUpdate;
    public long Cardinality;
    public long Count;
    public long CountNulls;
    public string Origin;
}
public class Kusto.Data.TableColumnsStatisticsMethodShowCommandResult : object {
    public string DatabaseName;
    public string TableName;
    public string Origin;
}
public class Kusto.Data.TableDimensionsShowCommandResult : object {
    public string AttributeName;
    public bool IsDimension;
    public string AttributeValue;
    public int AttributePopularity;
}
public class Kusto.Data.TableDropCommandResult : object {
    public string TableName;
    public string DatabaseName;
    public string Folder;
    public string DocString;
}
public class Kusto.Data.TableDropUndoCommandResult : object {
    public Guid ExtentId;
    public long NumberOfRecords;
    public string Status;
    public string FailureReason;
}
public class Kusto.Data.TableRecordsDeleteCommandResult : object {
    public Guid OldExtentId;
    public Guid NewExtentId;
    public long RecordsMatchPredicate;
}
public class Kusto.Data.TablesDetailsShowCommandResult : object {
    public string TableName;
    public string DatabaseName;
    public string Folder;
    public string DocString;
    public long TotalExtents;
    public double TotalExtentSize;
    public double TotalOriginalSize;
    public long TotalRowCount;
    public long HotExtents;
    public double HotExtentSize;
    public double HotOriginalSize;
    public long HotRowCount;
    public string AuthorizedPrincipals;
    public string RetentionPolicy;
    public string CachingPolicy;
    public string ShardingPolicy;
    public string MergePolicy;
    public string StreamingIngestionPolicy;
    public string IngestionBatchingPolicy;
    public Nullable`1<DateTime> MinExtentsCreationTime;
    public Nullable`1<DateTime> MaxExtentsCreationTime;
    public string RowOrderPolicy;
    public Guid TableId;
}
public class Kusto.Data.TableSealCommandResult : object {
    public Guid ExtentId;
    public double OriginalSize;
    public double ExtentSize;
    public double CompressedSize;
    public double IndexSize;
    public long RowCount;
    public string RowStoreRanges;
}
public class Kusto.Data.TableSealUpToCommandResult : object {
    public string Database;
    public string Table;
    public string Status;
}
public class Kusto.Data.TableShardGroupsShowCommandResult : object {
    public Guid Id;
    public long ShardCount;
    public long RowCount;
    public long OriginalSize;
    public long ShardSize;
    public long CompressedSize;
    public long IndexSize;
    public long DeletedRowCount;
    public long PartitionedRowCount;
    public JArray DateTimeColumnRanges;
    public JObject Partition;
}
public class Kusto.Data.TableShardGroupStatisticsShowCommandResult : object {
    public string TableName;
    public long ShardGroupCount;
    public long ShardCount;
    public long RowCount;
    public long OriginalSize;
    public long ShardSize;
    public long CompressedSize;
    public long IndexSize;
    public long DeletedRowCount;
    public long PartitionedRowCount;
    public Nullable`1<DateTime> MaxIngestionTime;
}
public class Kusto.Data.TableShowDataStatisticsCommandResult : object {
    public string AttributeName;
    public string AttributeType;
    public long ExtentSize;
    public double CompressionRatio;
    public long IndexSize;
    public double IndexSizePercent;
    public long OriginalSize;
    public Guid AttributeId;
    public long SharedIndexSize;
    public string StorageEngineVersion;
    public double SamplePercent;
    public bool IncludeColdData;
}
public class Kusto.Data.TableShowDataStatisticsCommandResultEx : object {
    public string ColumnName;
    public string ColumnType;
    public Guid ColumnId;
    public long OriginalSize;
    public long ExtentSize;
    public double CompressionRatio;
    public long DataCompressedSize;
    public long SharedIndexSize;
    public long IndexSize;
    public double IndexSizePercent;
    public string StorageEngineVersion;
    public long PresentRowCount;
    public long DeletedRowCount;
    public double SamplePercent;
    public bool IncludeColdData;
}
public class Kusto.Data.TableShowRowstoreReferencesCommandResult : object {
    public string DatabaseName;
    public string TableName;
    public string RowstoreReferenceKey;
    public string RowStoreName;
    public bool EnabledForIngestion;
}
public class Kusto.Data.TableShowRowstoresCommandResult : object {
    public string DatabaseName;
    public string TableName;
    public Guid ExtentId;
    public bool IsSealed;
    public string RowStoreName;
    public string RowStoreId;
    public string RowStoreKey;
    public long OrdinalFrom;
    public long OrdinalTo;
    public long WriteAheadLogSize;
    public long LocalStorageSize;
    public long EstimatedDataSize;
    public long MinWriteAheadLogOffset;
}
public class Kusto.Data.TableShowRowstoreSealInfoCommandResult : object {
    public string DatabaseName;
    public string TableName;
    public string RowStoreId;
    public string RowStoreKey;
    public long SealedUpToOrdinal;
    public DateTime LastUpdatedOn;
}
public class Kusto.Data.TableShowSchemaCommandResult : object {
    public string TableName;
    public string Schema;
    public string DatabaseName;
    public string Folder;
    public string DocString;
}
public class Kusto.Data.TablesLevelDetailsShowCommandResult : object {
    public string TableName;
    public string DatabaseName;
    public string Folder;
    public string DocString;
    public string RetentionPolicy;
    public string CachingPolicy;
    public string ShardingPolicy;
    public string MergePolicy;
    public string StreamingIngestionPolicy;
    public string IngestionBatchingPolicy;
    public string RowOrderPolicy;
    public string RetentionPolicyOrigin;
    public string CachingPolicyOrigin;
    public string ShardingPolicyOrigin;
    public string MergePolicyOrigin;
    public string StreamingIngestionPolicyOrigin;
    public string IngestionBatchingOrigin;
    public long TotalExtentsCountV2;
    public long TotalExtentSizeV2;
    public long TotalOriginalSizeV2;
    public long TotalIndexSizeV2;
    public long TotalRowCountV2;
    public long HotExtentsCountV2;
    public long HotExtentSizeV2;
    public long HotIndexSizeV2;
    public long HotOriginalSizeV2;
    public long HotRowCountV2;
    public Nullable`1<DateTime> MinExtentsCreationTimeV2;
    public Nullable`1<DateTime> MaxExtentsCreationTimeV2;
    public Nullable`1<DateTime> MinHotExtentsCreationTimeV2;
    public Nullable`1<DateTime> MaxHotExtentsCreationTimeV2;
    public long TotalExtentsCountV3;
    public long TotalExtentSizeV3;
    public long TotalOriginalSizeV3;
    public long TotalIndexSizeV3;
    public long TotalRowCountV3;
    public long HotExtentsCountV3;
    public long HotExtentSizeV3;
    public long HotIndexSizeV3;
    public long HotOriginalSizeV3;
    public long HotRowCountV3;
    public Nullable`1<DateTime> MinExtentsCreationTimeV3;
    public Nullable`1<DateTime> MaxExtentsCreationTimeV3;
    public Nullable`1<DateTime> MinHotExtentsCreationTimeV3;
    public Nullable`1<DateTime> MaxHotExtentsCreationTimeV3;
}
public class Kusto.Data.TablesShowCommandResult : object {
    public string TableName;
    public string DatabaseName;
    public string Folder;
    public string DocString;
}
public class Kusto.Data.TableWithOldStatisticsShowCommandResult : object {
    public string DatabaseName;
    public string TableName;
    public DateTime LastUpdate;
}
public class Kusto.Data.TargetQueryServiceUriShowCommandResult : object {
    public string QueryServiceUri;
}
public class Kusto.Data.TempStorageCreateCommandResult : object {
    public string StorageRoot;
}
public class Kusto.Data.TempStorageDropCommandResult : object {
    public string ContainerPath;
    public string Result;
}
public class Kusto.Data.TenantCoralConfigurationShowCommandResult : object {
    public string Configuration;
}
public class Kusto.Data.TenantGroupIngestionSourcesShowCommandResult : object {
    public string QueueUri;
}
public class Kusto.Data.TenantPubSubSubscriptionsShowCommandResult : object {
    public string ClusterName;
    public string TenantId;
    public string Subscription;
}
public class Kusto.Data.TridentCommandResult : object {
    public string Result;
    public string Description;
}
public class Kusto.Data.TriggerDashboardTenantsMigrationCommandResult : object {
    public string OperationInfo;
    public string CmConnectionString;
    public Guid OperationId;
    public Guid RootActivityId;
}
public class Kusto.Data.UnallocatedSubscriptionsShowCommandResult : object {
    public Guid SubscriptionId;
    public string Location;
    public int AvailableCoresL;
    public int CurrentCoresL;
    public int AvailableCoresD;
    public int CurrentCoresD;
    public int AvailableStorageAccounts;
    public int CurrentStorageAccounts;
    public int AvailablePartitionedDnsStorageAccounts;
    public int CurrentPartitionedDnsStorageAccounts;
    public bool IsLocked;
    public int AvailableCoresDs;
    public int CurrentCoresDs;
    public string Purposes;
    public bool DontChargeCompute;
    public int AvailableCoresE;
    public int CurrentCoresE;
    public int AvailableCoresEas;
    public int CurrentCoresEas;
    public int AvailableCoresEiv3;
    public int CurrentCoresEiv3;
    public string ZoneMapping;
    public int AvailableCoresLsv2;
    public int CurrentCoresLsv2;
    public int AvailableCoresDdv4;
    public int CurrentCoresDdv4;
    public int AvailableCoresDav4;
    public int CurrentCoresDav4;
    public string RegisteredFeatureFlags;
    public string SkuAvailability;
    public int AvailableCoresEidsv4;
    public int CurrentCoresEidsv4;
    public string Usage;
    public int ResourceGroupsUsage;
    public string CustomerSegment;
    public int AvailablePublicIps;
    public int CurrentPublicIps;
}
public class Kusto.Data.UnhandledDatabasesCommandResult : object {
    public string DatabaseName;
}
public class Kusto.Data.UpdateCommandResult : object {
    public string Table;
    public string Action;
    public Guid ExtentId;
    public long RowCount;
}
public class Kusto.Data.UpdateCommandResult_WhatIfMode : object {
    public string Table;
    public long RowCountToIngest;
    public long RowCountToDelete;
}
public enum Kusto.Data.UpdatePolicyKind : Enum {
    public int value__;
    public static UpdatePolicyKind Append;
}
public class Kusto.Data.UserRolesShowCommandResult : object {
    public string Scope;
    public string DisplayName;
    public string AADObjectID;
    public string Role;
}
public class Kusto.Data.Utils.AdminCommandsResultParser : object {
    private static Regex m_versionRegex;
    private static AdminCommandsResultParser();
    public static bool TryParseDatabaseVersion(string version, Int32& majorVersion, Int32& minorVersion);
}
public enum Kusto.Data.Utils.AxisVisualizationMode : Enum {
    public int value__;
    public static AxisVisualizationMode Linear;
    public static AxisVisualizationMode Log;
}
public class Kusto.Data.Utils.ChartVisualizationOptions : object {
    private string m_visualizationDirection;
    private string m_mode;
    private string m_ysplit;
    private string m_legend;
    private string m_xaxis;
    private string m_yaxis;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Series>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <YColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AnomalyColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <YTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Accumulate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQuerySorted>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ymin>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Ymax>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Xmin>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Xmax>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualizationMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualizationKind <Visualization>k__BackingField;
    [CompilerGeneratedAttribute]
private AxisVisualizationMode <XAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private AxisVisualizationMode <YAxis>k__BackingField;
    [CompilerGeneratedAttribute]
private SplitVisualizationMode <YSplit>k__BackingField;
    [CompilerGeneratedAttribute]
private LegendVisualizationMode <Legend>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TableIndex>k__BackingField;
    [JsonPropertyAttribute]
public string VisualizationKindString { get; public set; }
    [JsonPropertyAttribute]
public string KindString { get; public set; }
    [JsonPropertyAttribute]
public string YSplitString { get; public set; }
    [JsonPropertyAttribute]
public string LegendString { get; public set; }
    [JsonPropertyAttribute]
public string XAxisString { get; public set; }
    [JsonPropertyAttribute]
public string YAxisString { get; public set; }
    [JsonPropertyAttribute]
public string Title { get; public set; }
    [JsonPropertyAttribute]
public string XColumn { get; public set; }
    [JsonPropertyAttribute]
public String[] Series { get; public set; }
    [JsonPropertyAttribute]
public String[] YColumns { get; public set; }
    [JsonPropertyAttribute]
public String[] AnomalyColumns { get; public set; }
    [JsonPropertyAttribute("XTitle")]
public string XTitle { get; public set; }
    [JsonPropertyAttribute("YTitle")]
public string YTitle { get; public set; }
    [JsonPropertyAttribute]
public bool Accumulate { get; public set; }
    [JsonPropertyAttribute]
public bool IsQuerySorted { get; public set; }
    [JsonPropertyAttribute]
public double Ymin { get; public set; }
    [JsonPropertyAttribute]
public double Ymax { get; public set; }
    [JsonPropertyAttribute]
public object Xmin { get; public set; }
    [JsonPropertyAttribute]
public object Xmax { get; public set; }
    [JsonIgnoreAttribute]
public VisualizationMode Mode { get; public set; }
    [JsonIgnoreAttribute]
public VisualizationKind Visualization { get; public set; }
    [JsonIgnoreAttribute]
public AxisVisualizationMode XAxis { get; public set; }
    [JsonIgnoreAttribute]
public AxisVisualizationMode YAxis { get; public set; }
    [JsonIgnoreAttribute]
public SplitVisualizationMode YSplit { get; public set; }
    [JsonIgnoreAttribute]
public LegendVisualizationMode Legend { get; public set; }
    public int TableIndex { get; public set; }
    public ChartVisualizationOptions(int tableIndex);
    public string get_VisualizationKindString();
    public void set_VisualizationKindString(string value);
    public string get_KindString();
    public void set_KindString(string value);
    public string get_YSplitString();
    public void set_YSplitString(string value);
    public string get_LegendString();
    public void set_LegendString(string value);
    public string get_XAxisString();
    public void set_XAxisString(string value);
    public string get_YAxisString();
    public void set_YAxisString(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_XColumn();
    [CompilerGeneratedAttribute]
public void set_XColumn(string value);
    [CompilerGeneratedAttribute]
public String[] get_Series();
    [CompilerGeneratedAttribute]
public void set_Series(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_YColumns();
    [CompilerGeneratedAttribute]
public void set_YColumns(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_AnomalyColumns();
    [CompilerGeneratedAttribute]
public void set_AnomalyColumns(String[] value);
    [CompilerGeneratedAttribute]
public string get_XTitle();
    [CompilerGeneratedAttribute]
public void set_XTitle(string value);
    [CompilerGeneratedAttribute]
public string get_YTitle();
    [CompilerGeneratedAttribute]
public void set_YTitle(string value);
    [CompilerGeneratedAttribute]
public bool get_Accumulate();
    [CompilerGeneratedAttribute]
public void set_Accumulate(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsQuerySorted();
    [CompilerGeneratedAttribute]
public void set_IsQuerySorted(bool value);
    [CompilerGeneratedAttribute]
public double get_Ymin();
    [CompilerGeneratedAttribute]
public void set_Ymin(double value);
    [CompilerGeneratedAttribute]
public double get_Ymax();
    [CompilerGeneratedAttribute]
public void set_Ymax(double value);
    [CompilerGeneratedAttribute]
public object get_Xmin();
    [CompilerGeneratedAttribute]
public void set_Xmin(object value);
    [CompilerGeneratedAttribute]
public object get_Xmax();
    [CompilerGeneratedAttribute]
public void set_Xmax(object value);
    [CompilerGeneratedAttribute]
public VisualizationMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(VisualizationMode value);
    [CompilerGeneratedAttribute]
public VisualizationKind get_Visualization();
    [CompilerGeneratedAttribute]
public void set_Visualization(VisualizationKind value);
    [CompilerGeneratedAttribute]
public AxisVisualizationMode get_XAxis();
    [CompilerGeneratedAttribute]
public void set_XAxis(AxisVisualizationMode value);
    [CompilerGeneratedAttribute]
public AxisVisualizationMode get_YAxis();
    [CompilerGeneratedAttribute]
public void set_YAxis(AxisVisualizationMode value);
    [CompilerGeneratedAttribute]
public SplitVisualizationMode get_YSplit();
    [CompilerGeneratedAttribute]
public void set_YSplit(SplitVisualizationMode value);
    [CompilerGeneratedAttribute]
public LegendVisualizationMode get_Legend();
    [CompilerGeneratedAttribute]
public void set_Legend(LegendVisualizationMode value);
    [CompilerGeneratedAttribute]
public int get_TableIndex();
    [CompilerGeneratedAttribute]
public void set_TableIndex(int value);
    public static VisualizationKind ResolveVisualizationKindFromDirection(string visualizationResult);
    public static VisualizationMode ResolveModeFromString(string value, VisualizationKind visualizationKind);
    private static SplitVisualizationMode ResolveYSplitFromString(string ysplit);
    private static LegendVisualizationMode ResolveLegendModeFromString(string mode);
    private static AxisVisualizationMode ResolveAxisModeFromString(string mode);
}
public abstract class Kusto.Data.Utils.ExceptionAnalyzerBase : object {
    protected T FindException(Exception ex);
    public abstract virtual bool TryGetTargetState(Exception ex, ServiceState& targetState);
}
public interface Kusto.Data.Utils.IServiceStateExceptionAnalyzer {
    public abstract virtual bool TryGetTargetState(Exception ex, ServiceState& targetState);
}
public class Kusto.Data.Utils.KustoClientToolLauncher : object {
    private string m_kwe;
    private string m_keLatest;
    public KustoClientToolLauncher(string environment);
    public bool TryLaunchKustoWebExplorer(string title, string name, string connectionString, string requestText);
    public bool TryLaunchKustoExplorer(string title, string name, string connectionString, string requestText);
    private static string TryLocateKustoWebExplorer(string environment);
    private static string TryLocateKustoExplorer();
    private static string UrlEncode(string url);
}
public static class Kusto.Data.Utils.KustoEngineResolver : object {
    public static ICslQueryProvider CreateClient(string connectionString, string environment, String& updateConnectionString);
    public static ICslQueryProvider CreateClient(string connectionString, string environment, string appName, String& updateConnectionString);
    public static ICslQueryProvider CreateClient(string connectionString, Options options, String& updateConnectionString);
    public static KustoConnectionStringBuilder CreateKustoConnectionStringBuilder(string connectionString, Options options);
    private static ICslQueryProvider CreateClientByKustoConnectionStringBuilder(KustoConnectionStringBuilder kcsb, String& updateConnectionString);
    private static void ValidateTrustedEndpoint(Uri uri);
    private static KustoConnectionStringBuilder NewSetInitialCatalogIfNeeded(KustoConnectionStringBuilder kcsb);
    private static ICslQueryProvider SetDefaultDatabaseNameIfNeeded(ICslQueryProvider queryProvider, KustoConnectionStringBuilder kcsb, String& updateConnectionString);
    private static KustoConnectionStringBuilder GetPersonalEngineClusterFromSaasRp(KustoConnectionStringBuilder kcsb, string environment);
}
public enum Kusto.Data.Utils.LegendVisualizationMode : Enum {
    public int value__;
    public static LegendVisualizationMode Visible;
    public static LegendVisualizationMode Hidden;
}
public static class Kusto.Data.Utils.PowershellCompatibleAssemblyLoader : object {
    public static void ResolveWith(IReadOnlyDictionary`2<string, Assembly> assemblies);
    private static Assembly AssemblyResolveCallback(ResolveEventArgs args, IReadOnlyDictionary`2<string, Assembly> assemblies, Assembly[] loadedAssemblies);
}
public enum Kusto.Data.Utils.ServiceState : Enum {
    public int value__;
    public static ServiceState Up;
    public static ServiceState Down;
    public static ServiceState DoesNotExist;
}
public class Kusto.Data.Utils.ServiceStateTracker : object {
    private static TimeSpan s_DurationToDeclareNotExistState;
    private TimeSpan m_DurationToDeclareNotExistState;
    private List`1<IServiceStateExceptionAnalyzer> m_analyzers;
    private object m_lock;
    private ServiceState m_state;
    private Nullable`1<DateTime> m_firstDnsIssueTime;
    public ServiceState State { get; }
    public ServiceStateTracker(IEnumerable`1<IServiceStateExceptionAnalyzer> analyzerList, ServiceState initialState, Nullable`1<TimeSpan> durationToDeclareNotExistState);
    private static ServiceStateTracker();
    public ServiceState get_State();
    public static ServiceStateTracker CreateKustoDataTracker(ServiceState initialState, Nullable`1<TimeSpan> durationToDeclareNotExistState);
    public void ReportConnectionSucceeded();
    public void ReportConnectionFailedWithException(Exception ex);
    private ServiceState ThreadSafeGetState();
    private void ThreadSafeSetState(ServiceState currentState, ServiceState targetState);
}
public class Kusto.Data.Utils.SocketExceptionAnazler : ExceptionAnalyzerBase {
    public virtual bool TryGetTargetState(Exception ex, ServiceState& targetState);
}
public enum Kusto.Data.Utils.SplitVisualizationMode : Enum {
    public int value__;
    public static SplitVisualizationMode None;
    public static SplitVisualizationMode Axes;
    public static SplitVisualizationMode Panels;
}
internal class Kusto.Data.Utils.TricklingHttpContent : HttpContent {
    private HttpContent m_inner;
    private double m_bytesPerSecond;
    public TricklingHttpContent(HttpContent inner, double bytesPerSecond);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Kusto.Data.Utils.TricklingHttpContent/<SerializeToStreamAsync>d__4")]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
}
public enum Kusto.Data.Utils.VisualizationKind : Enum {
    public int value__;
    public static VisualizationKind None;
    public static VisualizationKind PieChart;
    public static VisualizationKind BarChart;
    public static VisualizationKind Card;
    public static VisualizationKind ColumnChart;
    public static VisualizationKind TimeLineChart;
    public static VisualizationKind TimeLineWithAnomalyChart;
    public static VisualizationKind LineChart;
    public static VisualizationKind TimeLadderChart;
    public static VisualizationKind PivotChart;
    public static VisualizationKind Plotly;
    public static VisualizationKind ScatterChart;
    public static VisualizationKind AreaChart;
    public static VisualizationKind StackedAreaChart;
    public static VisualizationKind TimePivot;
    public static VisualizationKind ThreeDChart;
    public static VisualizationKind TreeMap;
    public static VisualizationKind Graph;
}
public enum Kusto.Data.Utils.VisualizationMode : Enum {
    public int value__;
    public static VisualizationMode Default;
    public static VisualizationMode Unstacked;
    public static VisualizationMode Stacked;
    public static VisualizationMode Stacked100;
    public static VisualizationMode Map;
}
public class Kusto.Data.Utils.WebExceptionAnalyzer : ExceptionAnalyzerBase {
    public virtual bool TryGetTargetState(Exception ex, ServiceState& targetState);
}
public class Kusto.Data.VersionShowCommandResult : object {
    public string BuildVersion;
    public DateTime BuildTime;
    public string ServiceType;
    public string ProductVersion;
    public string ServiceOffering;
}
public class Kusto.Data.VirtualClusterAlterCommandResult : object {
    public string Name;
    public string MetadataContainerPath;
    public string DnsHostName;
    public string ResourceLimitations;
    public string TrustedExternalTenants;
    public string Result;
    public string TridentInstanceSettings;
    public bool EnforceApplicationFirewall;
}
public class Kusto.Data.VirtualClusterShowCommandResult : object {
    public string Name;
    public string MetadataContainerPath;
    public string DnsHostName;
    public string ResourceLimitations;
    public string AssignedNode;
    public string RuntimeState;
    public string TrustedExternalTenants;
    public string AdditionalInformation;
    public string TridentInstanceSettings;
    public bool EnforceApplicationFirewall;
}
public class Kusto.Data.VirtualDmShowCommandResult : object {
    public string Name;
    public string ServiceUri;
    public string PersistentPath;
    public string QueryUri;
    public string State;
    public string Resources;
    public string AssignedNode;
    public string LockState;
    public DateTime StateSince;
}
public enum Kusto.Data.WellKnownDataSet : Enum {
    public int value__;
    public static WellKnownDataSet PrimaryResult;
    public static WellKnownDataSet QueryCompletionInformation;
    public static WellKnownDataSet QueryTraceLog;
    public static WellKnownDataSet QueryPerfLog;
    public static WellKnownDataSet TableOfContents;
    public static WellKnownDataSet QueryProperties;
    public static WellKnownDataSet QueryPlan;
    public static WellKnownDataSet Unknown;
    public static WellKnownDataSet LastInvalid;
}
public abstract class Kusto.QueryLanguage.Expressions.TabularOperator : object {
    [CompilerGeneratedAttribute]
private string <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private TabularOperator[] <Inputs>k__BackingField;
    [CompilerGeneratedAttribute]
private CslTableSchema <OutputSchema>k__BackingField;
    [JsonPropertyAttribute("operator")]
public string Operator { get; protected set; }
    [JsonPropertyAttribute("inputs")]
public TabularOperator[] Inputs { get; protected set; }
    [JsonPropertyAttribute("schema")]
public CslTableSchema OutputSchema { get; protected set; }
    [CompilerGeneratedAttribute]
public string get_Operator();
    [CompilerGeneratedAttribute]
protected void set_Operator(string value);
    [CompilerGeneratedAttribute]
public TabularOperator[] get_Inputs();
    [CompilerGeneratedAttribute]
protected void set_Inputs(TabularOperator[] value);
    [CompilerGeneratedAttribute]
public CslTableSchema get_OutputSchema();
    [CompilerGeneratedAttribute]
protected void set_OutputSchema(CslTableSchema value);
    public abstract virtual string ToJson();
    public abstract virtual string ToCsl();
}
