internal class Microsoft.Azure.SignalR.Management.AutoHealthCheckRouter : EndpointRouterDecorator {
    public virtual ServiceEndpoint GetNegotiateEndpoint(HttpContext context, IEnumerable`1<ServiceEndpoint> endpoints);
}
internal class Microsoft.Azure.SignalR.Management.CascadeServiceOptionsSetup : CascadeOptionsSetup`2<ServiceOptions, ServiceManagerOptions> {
    public CascadeServiceOptionsSetup(IOptionsMonitor`1<ServiceManagerOptions> sourceMonitor);
    protected virtual void Convert(ServiceOptions target, ServiceManagerOptions source);
}
public abstract class Microsoft.Azure.SignalR.Management.ClientManager : object {
    public abstract virtual Task CloseConnectionAsync(string connectionId, string reason, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> ConnectionExistsAsync(string connectionId, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> UserExistsAsync(string userId, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> GroupExistsAsync(string groupName, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.SignalR.Management.ClientManagerAdapter : ClientManager {
    private IServiceHubLifetimeManager _lifetimeManager;
    public ClientManagerAdapter(IServiceHubLifetimeManager lifetimeManager);
    public virtual Task CloseConnectionAsync(string connectionId, string reason, CancellationToken cancellationToken);
    public virtual Task`1<bool> ConnectionExistsAsync(string connectionId, CancellationToken cancellationToken);
    public virtual Task`1<bool> GroupExistsAsync(string groupName, CancellationToken cancellationToken);
    public virtual Task`1<bool> UserExistsAsync(string userId, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Azure.SignalR.Management.Configuration.CascadeOptionsSetup`2 : object {
    private IDisposable _registration;
    private IOptionsMonitor`1<SourceOptions> _sourceMonitor;
    private ConfigurationReloadToken _changeToken;
    public string Name { get; }
    public CascadeOptionsSetup`2(IOptionsMonitor`1<SourceOptions> sourceMonitor);
    public sealed virtual string get_Name();
    public sealed virtual void Configure(TargetOptions target);
    protected abstract virtual void Convert(TargetOptions target, SourceOptions source);
    public sealed virtual IChangeToken GetChangeToken();
    private void RaiseChange(SourceOptions sourceOptions);
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.SignalR.Management.ConnectionService : object {
    private IServiceConnectionContainer _connectionContainer;
    public ConnectionService(IServiceConnectionContainer connectionContainer);
    public sealed virtual Task StartAsync(CancellationToken token);
    public sealed virtual Task StopAsync(CancellationToken _);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.SignalR.Management.DependencyInjectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddSignalRServiceManager(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddSignalRServiceManager(IServiceCollection services, TOptionsSetup setupInstance);
    [ExtensionAttribute]
public static IServiceCollection AddHub(IServiceCollection services, string hubName);
    [ExtensionAttribute]
public static IServiceCollection AddHub(IServiceCollection services, string hubName);
    [ExtensionAttribute]
private static IServiceCollection AddSignalRServiceCore(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection WithAssembly(IServiceCollection services, Assembly assembly);
    [ExtensionAttribute]
public static IServiceCollection AddUserAgent(IServiceCollection services, string userAgent);
    [ExtensionAttribute]
private static IServiceCollection TrySetProductInfo(IServiceCollection services);
    [ExtensionAttribute]
private static IServiceCollection AddRestClient(IServiceCollection services);
    [CompilerGeneratedAttribute]
internal static HttpMessageHandler <AddRestClient>g__ConfigureProxy|8_8(IServiceProvider sp);
    [CompilerGeneratedAttribute]
internal static bool <AddRestClient>g__IsTransientErrorAndIdempotentForMessageApi|8_9(HttpStatusCode code);
    [CompilerGeneratedAttribute]
internal static bool <AddRestClient>g__IsTransientErrorForNonMessageApi|8_10(HttpStatusCode code);
    [CompilerGeneratedAttribute]
internal static void <AddRestClient>g__ConfigureUserTimeout|8_11(IServiceProvider sp, HttpClient client);
    [CompilerGeneratedAttribute]
internal static void <AddRestClient>g__ConfigureProduceInfo|8_12(IServiceProvider sp, HttpClient client);
    [CompilerGeneratedAttribute]
internal static void <AddRestClient>g__ConfigureMessageTracingId|8_13(IServiceProvider sp, HttpClient client);
}
internal class Microsoft.Azure.SignalR.Management.DummyBackOffPolicy : object {
    public sealed virtual IEnumerable`1<TimeSpan> GetDelays();
}
internal class Microsoft.Azure.SignalR.Management.ExponentialBackOffPolicy : object {
    private int _maxRetries;
    private TimeSpan _minDelay;
    private TimeSpan _maxDelay;
    public ExponentialBackOffPolicy(IOptions`1<ServiceManagerOptions> options);
    [IteratorStateMachineAttribute("Microsoft.Azure.SignalR.Management.ExponentialBackOffPolicy/<GetDelays>d__4")]
public sealed virtual IEnumerable`1<TimeSpan> GetDelays();
}
internal class Microsoft.Azure.SignalR.Management.FixedBackOffPolicy : object {
    private int _maxRetries;
    private TimeSpan _delay;
    public FixedBackOffPolicy(IOptions`1<ServiceManagerOptions> options);
    [IteratorStateMachineAttribute("Microsoft.Azure.SignalR.Management.FixedBackOffPolicy/<GetDelays>d__3")]
public sealed virtual IEnumerable`1<TimeSpan> GetDelays();
}
internal class Microsoft.Azure.SignalR.Management.FixedEndpointRouter : EndpointRouterDecorator {
    private IEnumerable`1<ServiceEndpoint> _serviceEndpoints;
    public FixedEndpointRouter(IEnumerable`1<ServiceEndpoint> serviceEndpoints);
    public virtual ServiceEndpoint GetNegotiateEndpoint(HttpContext context, IEnumerable`1<ServiceEndpoint> endpoints);
}
public abstract class Microsoft.Azure.SignalR.Management.GroupManager : object {
    public abstract virtual Task AddToGroupAsync(string connectionId, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task RemoveFromGroupAsync(string connectionId, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task RemoveFromAllGroupsAsync(string connectionId, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.SignalR.Management.GroupManagerAdapter : GroupManager {
    private IHubLifetimeManager _lifetimeManager;
    public GroupManagerAdapter(IHubLifetimeManager lifetimeManager);
    public virtual Task AddToGroupAsync(string connectionId, string groupName, CancellationToken cancellationToken);
    public virtual Task RemoveFromGroupAsync(string connectionId, string groupName, CancellationToken cancellationToken);
    public virtual Task RemoveFromAllGroupsAsync(string connectionId, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.SignalR.Management.HealthCheckOption : object {
    [CompilerGeneratedAttribute]
private TimeSpan <CheckInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HttpTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnabledForSingleEndpoint>k__BackingField;
    public TimeSpan CheckInterval { get; public set; }
    public TimeSpan RetryInterval { get; public set; }
    public TimeSpan HttpTimeout { get; public set; }
    public bool EnabledForSingleEndpoint { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_CheckInterval();
    [CompilerGeneratedAttribute]
public void set_CheckInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RetryInterval();
    [CompilerGeneratedAttribute]
public void set_RetryInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HttpTimeout();
    [CompilerGeneratedAttribute]
public void set_HttpTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_EnabledForSingleEndpoint();
    [CompilerGeneratedAttribute]
public void set_EnabledForSingleEndpoint(bool value);
}
internal class Microsoft.Azure.SignalR.Management.HostedServiceFactory : object {
    private IServiceProvider _serviceProvider;
    private ServiceManagerOptions _options;
    private bool _used;
    public HostedServiceFactory(IServiceProvider serviceProvider, IOptions`1<ServiceManagerOptions> options);
    public IHostedService Create();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Azure.SignalR.Management.IBackOffPolicy {
    public abstract virtual IEnumerable`1<TimeSpan> GetDelays();
}
internal interface Microsoft.Azure.SignalR.Management.IHubLifetimeManager {
    public abstract virtual Task AddToGroupAsync(string connectionId, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task OnConnectedAsync(HubConnectionContext connection);
    public abstract virtual Task OnDisconnectedAsync(HubConnectionContext connection);
    public abstract virtual Task RemoveFromGroupAsync(string connectionId, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task RemoveFromAllGroupsAsync(string connectionId, CancellationToken cancellationToken);
    public abstract virtual Task SendAllAsync(string methodName, Object[] args, CancellationToken cancellationToken);
    public abstract virtual Task SendAllExceptAsync(string methodName, Object[] args, IReadOnlyList`1<string> excludedConnectionIds, CancellationToken cancellationToken);
    public abstract virtual Task SendConnectionAsync(string connectionId, string methodName, Object[] args, CancellationToken cancellationToken);
    public abstract virtual Task SendConnectionsAsync(IReadOnlyList`1<string> connectionIds, string methodName, Object[] args, CancellationToken cancellationToken);
    public abstract virtual Task SendGroupAsync(string groupName, string methodName, Object[] args, CancellationToken cancellationToken);
    public abstract virtual Task SendGroupExceptAsync(string groupName, string methodName, Object[] args, IReadOnlyList`1<string> excludedConnectionIds, CancellationToken cancellationToken);
    public abstract virtual Task SendGroupsAsync(IReadOnlyList`1<string> groupNames, string methodName, Object[] args, CancellationToken cancellationToken);
    public abstract virtual Task SendUserAsync(string userId, string methodName, Object[] args, CancellationToken cancellationToken);
    public abstract virtual Task SendUsersAsync(IReadOnlyList`1<string> userIds, string methodName, Object[] args, CancellationToken cancellationToken);
}
public interface Microsoft.Azure.SignalR.Management.IServiceHubContext {
    public IUserGroupManager UserGroups { get; }
    public abstract virtual IUserGroupManager get_UserGroups();
    public abstract virtual Task DisposeAsync();
}
internal interface Microsoft.Azure.SignalR.Management.IServiceHubLifetimeManager {
    public abstract virtual Task CloseConnectionAsync(string connectionId, string reason, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> ConnectionExistsAsync(string connectionId, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> UserExistsAsync(string userId, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> GroupExistsAsync(string groupName, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.SignalR.Management.IServiceHubLifetimeManager`1 {
}
public interface Microsoft.Azure.SignalR.Management.IServiceManager {
    public abstract virtual Task`1<IServiceHubContext> CreateHubContextAsync(string hubName, ILoggerFactory loggerFactory, CancellationToken cancellationToken);
    public abstract virtual string GenerateClientAccessToken(string hubName, string userId, IList`1<Claim> claims, Nullable`1<TimeSpan> lifeTime);
    public abstract virtual string GetClientEndpoint(string hubName);
    public abstract virtual Task`1<bool> IsServiceHealthy(CancellationToken cancellationToken);
}
[ObsoleteAttribute("Use ServiceManagerBuilder.BuildServiceManager() to build an abstract class of ServiceManager instead.")]
public interface Microsoft.Azure.SignalR.Management.IServiceManagerBuilder {
    [ObsoleteAttribute("Use ServiceManagerBuilder.BuildServiceManager() instead.")]
public abstract virtual IServiceManager Build();
}
internal interface Microsoft.Azure.SignalR.Management.IUserGroupHubLifetimeManager {
    public abstract virtual Task UserAddToGroupAsync(string userId, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task UserAddToGroupAsync(string userId, string groupName, TimeSpan ttl, CancellationToken cancellationToken);
    public abstract virtual Task UserRemoveFromGroupAsync(string userId, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task UserRemoveFromAllGroupsAsync(string userId, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> IsUserInGroup(string userId, string groupName, CancellationToken cancellationToken);
}
public interface Microsoft.Azure.SignalR.Management.IUserGroupManager {
    public abstract virtual Task AddToGroupAsync(string userId, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task AddToGroupAsync(string userId, string groupName, TimeSpan ttl, CancellationToken cancellationToken);
    public abstract virtual Task RemoveFromGroupAsync(string userId, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task RemoveFromAllGroupsAsync(string userId, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> IsUserInGroup(string userId, string groupName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.SignalR.Management.JsonObjectSerializerHubProtocol : object {
    private static string ResultPropertyName;
    private static JsonEncodedText ResultPropertyNameBytes;
    private static string ItemPropertyName;
    private static JsonEncodedText ItemPropertyNameBytes;
    private static string InvocationIdPropertyName;
    private static JsonEncodedText InvocationIdPropertyNameBytes;
    private static string StreamIdsPropertyName;
    private static JsonEncodedText StreamIdsPropertyNameBytes;
    private static string TypePropertyName;
    private static JsonEncodedText TypePropertyNameBytes;
    private static string ErrorPropertyName;
    private static JsonEncodedText ErrorPropertyNameBytes;
    private static string TargetPropertyName;
    private static JsonEncodedText TargetPropertyNameBytes;
    private static string ArgumentsPropertyName;
    private static JsonEncodedText ArgumentsPropertyNameBytes;
    private static string HeadersPropertyName;
    private static JsonEncodedText HeadersPropertyNameBytes;
    private static Byte[] CommaBytes;
    private static string ProtocolName;
    private static int ProtocolVersion;
    [CompilerGeneratedAttribute]
private ObjectSerializer <ObjectSerializer>k__BackingField;
    public ObjectSerializer ObjectSerializer { get; }
    public string Name { get; }
    public int Version { get; }
    public TransferFormat TransferFormat { get; }
    public JsonObjectSerializerHubProtocol(ObjectSerializer objectSerializer);
    private static JsonObjectSerializerHubProtocol();
    [CompilerGeneratedAttribute]
public ObjectSerializer get_ObjectSerializer();
    public sealed virtual string get_Name();
    public sealed virtual int get_Version();
    public sealed virtual TransferFormat get_TransferFormat();
    public sealed virtual bool IsVersionSupported(int version);
    public sealed virtual bool TryParseMessage(ReadOnlySequence`1& input, IInvocationBinder binder, HubMessage& message);
    public sealed virtual void WriteMessage(HubMessage message, IBufferWriter`1<byte> output);
    [NullableContextAttribute("0")]
public sealed virtual ReadOnlyMemory`1<byte> GetMessageBytes(HubMessage message);
    private void WriteMessageCore(HubMessage message, IBufferWriter`1<byte> stream);
    private static void WriteHeaders(Utf8JsonWriter writer, HubInvocationMessage message);
    private void WriteCompletionMessage(CompletionMessage message, Utf8JsonWriter writer, IBufferWriter`1<byte> bufferWriter);
    private static void WriteCancelInvocationMessage(CancelInvocationMessage message, Utf8JsonWriter writer);
    private void WriteStreamItemMessage(StreamItemMessage message, Utf8JsonWriter writer, IBufferWriter`1<byte> bufferWriter);
    private void WriteInvocationMessage(InvocationMessage message, Utf8JsonWriter writer, IBufferWriter`1<byte> bufferWriter);
    private void WriteStreamInvocationMessage(StreamInvocationMessage message, Utf8JsonWriter writer, IBufferWriter`1<byte> bufferWriter);
    private void WriteArguments(Object[] arguments, Utf8JsonWriter writer, IBufferWriter`1<byte> bufferWriter);
    private void WriteWithObjectSerializer(object obj, Utf8JsonWriter utf8JsonWriter, IBufferWriter`1<byte> bufferWriter);
    private static void WriteStreamIds(String[] streamIds, Utf8JsonWriter writer);
    private static void WriteInvocationId(HubInvocationMessage message, Utf8JsonWriter writer);
    private static void WriteMessageType(Utf8JsonWriter writer, int type);
    internal static JsonSerializerOptions CreateDefaultSerializerSettings();
}
internal class Microsoft.Azure.SignalR.Management.ManagementConnectionFactory : object {
    private string _productInfo;
    private ConnectionFactory _connectionFactory;
    public ManagementConnectionFactory(IOptions`1<ServiceManagerOptions> context, ConnectionFactory connectionFactory);
    public sealed virtual Task`1<ConnectionContext> ConnectAsync(HubServiceEndpoint endpoint, TransferFormat transferFormat, string connectionId, string target, CancellationToken cancellationToken, IDictionary`2<string, string> headers);
    public sealed virtual Task DisposeAsync(ConnectionContext connection);
}
public class Microsoft.Azure.SignalR.Management.ManagementHubOptionsSetup : object {
    internal static int DefaultMaximumMessageSize;
    internal static int DefaultStreamBufferCapacity;
    private List`1<string> _defaultProtocols;
    internal static TimeSpan DefaultHandshakeTimeout { get; }
    internal static TimeSpan DefaultKeepAliveInterval { get; }
    public ManagementHubOptionsSetup(IEnumerable`1<IHubProtocol> protocols);
    internal static TimeSpan get_DefaultHandshakeTimeout();
    internal static TimeSpan get_DefaultKeepAliveInterval();
    public sealed virtual void Configure(HubOptions options);
}
internal class Microsoft.Azure.SignalR.Management.MultiEndpointConnectionContainerFactory : object {
    private IServiceConnectionFactory _connectionFactory;
    private ILoggerFactory _loggerFactory;
    private IServiceEndpointManager _endpointManager;
    private int _connectionCount;
    private IEndpointRouter _router;
    public MultiEndpointConnectionContainerFactory(IServiceConnectionFactory connectionFactory, ILoggerFactory loggerFactory, IServiceEndpointManager serviceEndpointManager, IOptions`1<ServiceManagerOptions> options, IEndpointRouter router);
    public MultiEndpointServiceConnectionContainer Create(string hubName);
    [CompilerGeneratedAttribute]
private IServiceConnectionContainer <Create>b__6_0(HubServiceEndpoint endpoint);
}
internal class Microsoft.Azure.SignalR.Management.NegotiateProcessor : object {
    private static string GeneratingTokenTaskDescription;
    private static string ErrorMsg;
    private static TimeSpan Timeout;
    private IServiceEndpointManager _serviceEndpointManager;
    private IEndpointRouter _router;
    public NegotiateProcessor(IServiceEndpointManager serviceEndpointManager, IEndpointRouter router);
    private static NegotiateProcessor();
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.NegotiateProcessor/<NegotiateAsync>d__6")]
public Task`1<NegotiationResponse> NegotiateAsync(string hubName, NegotiationOptions negotiationOptions, CancellationToken cancellationToken);
}
public class Microsoft.Azure.SignalR.Management.NegotiationOptions : object {
    internal static NegotiationOptions Default;
    [CompilerGeneratedAttribute]
private HttpContext <HttpContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Claim> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <TokenLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDiagnosticClient>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDetailedErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseOnAuthenticationExpiration>k__BackingField;
    public HttpContext HttpContext { get; public set; }
    public string UserId { get; public set; }
    public IList`1<Claim> Claims { get; public set; }
    public TimeSpan TokenLifetime { get; public set; }
    public bool IsDiagnosticClient { get; public set; }
    public bool EnableDetailedErrors { get; public set; }
    public bool CloseOnAuthenticationExpiration { get; public set; }
    private static NegotiationOptions();
    [CompilerGeneratedAttribute]
public HttpContext get_HttpContext();
    [CompilerGeneratedAttribute]
public void set_HttpContext(HttpContext value);
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(string value);
    [CompilerGeneratedAttribute]
public IList`1<Claim> get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(IList`1<Claim> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TokenLifetime();
    [CompilerGeneratedAttribute]
public void set_TokenLifetime(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_IsDiagnosticClient();
    [CompilerGeneratedAttribute]
public void set_IsDiagnosticClient(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableDetailedErrors();
    [CompilerGeneratedAttribute]
public void set_EnableDetailedErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_CloseOnAuthenticationExpiration();
    [CompilerGeneratedAttribute]
public void set_CloseOnAuthenticationExpiration(bool value);
}
public class Microsoft.Azure.SignalR.Management.NewtonsoftServiceHubProtocolOptions : object {
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <PayloadSerializerSettings>k__BackingField;
    public JsonSerializerSettings PayloadSerializerSettings { get; public set; }
    [CompilerGeneratedAttribute]
public JsonSerializerSettings get_PayloadSerializerSettings();
    [CompilerGeneratedAttribute]
public void set_PayloadSerializerSettings(JsonSerializerSettings value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.SignalR.Management.PayloadBuilderResolver : object {
    private IHubProtocolResolver _hubProtocolResolver;
    public PayloadBuilderResolver(IHubProtocolResolver hubProtocolResolver);
    public IPayloadContentBuilder GetPayloadContentBuilder();
}
internal class Microsoft.Azure.SignalR.Management.RestApiProvider : object {
    private static string Version;
    public static string HealthApiPath;
    private RestApiAccessTokenGenerator _restApiAccessTokenGenerator;
    private string _audienceBaseUrl;
    private string _serverEndpoint;
    public RestApiProvider(ServiceEndpoint endpoint);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestApiProvider/<GetServiceHealthEndpointAsync>d__6")]
public Task`1<RestApiEndpoint> GetServiceHealthEndpointAsync();
    public Task`1<RestApiEndpoint> GetBroadcastEndpointAsync(string appName, string hubName, Nullable`1<TimeSpan> lifetime, IReadOnlyList`1<string> excluded);
    public Task`1<RestApiEndpoint> GetUserGroupManagementEndpointAsync(string appName, string hubName, string userId, string groupName, Nullable`1<TimeSpan> lifetime);
    public Task`1<RestApiEndpoint> GetSendToUserEndpointAsync(string appName, string hubName, string userId, Nullable`1<TimeSpan> lifetime);
    public Task`1<RestApiEndpoint> GetSendToGroupEndpointAsync(string appName, string hubName, string groupName, Nullable`1<TimeSpan> lifetime, IReadOnlyList`1<string> excluded);
    public Task`1<RestApiEndpoint> GetRemoveUserFromAllGroupsAsync(string appName, string hubName, string userId, Nullable`1<TimeSpan> lifetime);
    public Task`1<RestApiEndpoint> GetRemoveConnectionFromAllGroupsAsync(string appName, string hubName, string connectionId, Nullable`1<TimeSpan> lifetime);
    public Task`1<RestApiEndpoint> GetSendToConnectionEndpointAsync(string appName, string hubName, string connectionId, Nullable`1<TimeSpan> lifetime);
    public Task`1<RestApiEndpoint> GetConnectionGroupManagementEndpointAsync(string appName, string hubName, string connectionId, string groupName, Nullable`1<TimeSpan> lifetime);
    public Task`1<RestApiEndpoint> GetCloseConnectionEndpointAsync(string appName, string hubName, string connectionId, string reason);
    public Task`1<RestApiEndpoint> GetCheckConnectionExistsEndpointAsync(string appName, string hubName, string connectionId);
    public Task`1<RestApiEndpoint> GetCheckUserExistsEndpointAsync(string appName, string hubName, string user);
    public Task`1<RestApiEndpoint> GetCheckGroupExistsEndpointAsync(string appName, string hubName, string group);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestApiProvider/<GenerateRestApiEndpointAsync>d__19")]
private Task`1<RestApiEndpoint> GenerateRestApiEndpointAsync(string appName, string hubName, string pathAfterHub, Nullable`1<TimeSpan> lifetime, IDictionary`2<string, StringValues> queries);
}
internal class Microsoft.Azure.SignalR.Management.RestHealthCheckService : object {
    internal static int MaxRetries;
    private TimeSpan _checkInterval;
    private TimeSpan _httpTimeout;
    private TimeSpan _retryInterval;
    private IServiceEndpointManager _serviceEndpointManager;
    private ILogger`1<RestHealthCheckService> _logger;
    private string _hubName;
    private TimerAwaitable _timer;
    private IHttpClientFactory _httpClientFactory;
    private bool _enabledForSingleEndpoint;
    public RestHealthCheckService(IServiceEndpointManager serviceEndpointManager, ILogger`1<RestHealthCheckService> logger, string hubName, IOptions`1<HealthCheckOption> options, IHttpClientFactory httpClientFactory);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHealthCheckService/<StartAsync>d__11")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken _);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHealthCheckService/<CheckEndpointHealthAsync>d__13")]
private Task CheckEndpointHealthAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHealthCheckService/<LoopAsync>d__14")]
private Task LoopAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHealthCheckService/<IsServiceHealthy>d__15")]
private Task`1<bool> IsServiceHealthy(ServiceEndpoint endpoint);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHealthCheckService/<<CheckEndpointHealthAsync>b__13_1>d")]
[CompilerGeneratedAttribute]
private Task <CheckEndpointHealthAsync>b__13_1(HubServiceEndpoint endpoint);
}
internal class Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1 : HubLifetimeManager`1<THub> {
    private static string NullOrEmptyStringErrorMessage;
    private static string TtlOutOfRangeErrorMessage;
    private RestClient _restClient;
    private RestApiProvider _restApiProvider;
    private string _hubName;
    private string _appName;
    public RestHubLifetimeManager`1(string hubName, ServiceEndpoint endpoint, string appName, RestClient restClient);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<AddToGroupAsync>d__7")]
public virtual Task AddToGroupAsync(string connectionId, string groupName, CancellationToken cancellationToken);
    public virtual Task OnConnectedAsync(HubConnectionContext connection);
    public virtual Task OnDisconnectedAsync(HubConnectionContext connection);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<RemoveFromGroupAsync>d__10")]
public virtual Task RemoveFromGroupAsync(string connectionId, string groupName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<RemoveFromAllGroupsAsync>d__11")]
public sealed virtual Task RemoveFromAllGroupsAsync(string connectionId, CancellationToken cancellationToken);
    public virtual Task SendAllAsync(string methodName, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<SendAllExceptAsync>d__13")]
public virtual Task SendAllExceptAsync(string methodName, Object[] args, IReadOnlyList`1<string> excludedConnectionIds, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<SendConnectionAsync>d__14")]
public virtual Task SendConnectionAsync(string connectionId, string methodName, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<SendConnectionsAsync>d__15")]
public virtual Task SendConnectionsAsync(IReadOnlyList`1<string> connectionIds, string methodName, Object[] args, CancellationToken cancellationToken);
    public virtual Task SendGroupAsync(string groupName, string methodName, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<SendGroupExceptAsync>d__17")]
public virtual Task SendGroupExceptAsync(string groupName, string methodName, Object[] args, IReadOnlyList`1<string> excludedConnectionIds, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<SendGroupsAsync>d__18")]
public virtual Task SendGroupsAsync(IReadOnlyList`1<string> groupNames, string methodName, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<SendUserAsync>d__19")]
public virtual Task SendUserAsync(string userId, string methodName, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<SendUsersAsync>d__20")]
public virtual Task SendUsersAsync(IReadOnlyList`1<string> userIds, string methodName, Object[] args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<UserAddToGroupAsync>d__21")]
public sealed virtual Task UserAddToGroupAsync(string userId, string groupName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<UserAddToGroupAsync>d__22")]
public sealed virtual Task UserAddToGroupAsync(string userId, string groupName, TimeSpan ttl, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<UserRemoveFromGroupAsync>d__23")]
public sealed virtual Task UserRemoveFromGroupAsync(string userId, string groupName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<UserRemoveFromAllGroupsAsync>d__24")]
public sealed virtual Task UserRemoveFromAllGroupsAsync(string userId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<IsUserInGroup>d__25")]
public sealed virtual Task`1<bool> IsUserInGroup(string userId, string groupName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<CloseConnectionAsync>d__26")]
public sealed virtual Task CloseConnectionAsync(string connectionId, string reason, CancellationToken cancellationToken);
    private static void ValidateUserIdAndGroupName(string userId, string groupName);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<ConnectionExistsAsync>d__28")]
public sealed virtual Task`1<bool> ConnectionExistsAsync(string connectionId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<UserExistsAsync>d__29")]
public sealed virtual Task`1<bool> UserExistsAsync(string userId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RestHubLifetimeManager`1/<GroupExistsAsync>d__30")]
public sealed virtual Task`1<bool> GroupExistsAsync(string groupName, CancellationToken cancellationToken);
    public Task DisposeAsync();
    private static bool FilterExpectedResponse(HttpResponseMessage response, string expectedErrorCode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.SignalR.Management.RetryHttpMessageHandler : DelegatingHandler {
    private IBackOffPolicy _retryDelayProvider;
    private Func`2<HttpStatusCode, bool> _canRetry;
    public RetryHttpMessageHandler(IBackOffPolicy retryDelayProvider, Func`2<HttpStatusCode, bool> transientErrorPredicate);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.RetryHttpMessageHandler/<SendAsync>d__3")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.SignalR.Management.SerializationDependencyInjectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddNewtonsoftHubProtocol(IServiceCollection services, Action`1<NewtonsoftServiceHubProtocolOptions> configure);
}
public abstract class Microsoft.Azure.SignalR.Management.ServiceHubContext : object {
    public UserGroupManager UserGroups { get; }
    private IUserGroupManager Microsoft.Azure.SignalR.Management.IServiceHubContext.UserGroups { get; }
    public IHubClients Clients { get; }
    public GroupManager Groups { get; }
    private IGroupManager Microsoft.AspNetCore.SignalR.IHubContext<Microsoft.AspNetCore.SignalR.Hub>.Groups { get; }
    public ClientManager ClientManager { get; }
    public virtual UserGroupManager get_UserGroups();
    private sealed virtual override IUserGroupManager Microsoft.Azure.SignalR.Management.IServiceHubContext.get_UserGroups();
    public virtual IHubClients get_Clients();
    public virtual GroupManager get_Groups();
    private sealed virtual override IGroupManager Microsoft.AspNetCore.SignalR.IHubContext<Microsoft.AspNetCore.SignalR.Hub>.get_Groups();
    public virtual ClientManager get_ClientManager();
    public virtual ValueTask`1<NegotiationResponse> NegotiateAsync(NegotiationOptions negotiationOptions, CancellationToken cancellationToken);
    public virtual Task DisposeAsync();
    public virtual void Dispose();
    [EditorBrowsableAttribute("1")]
public virtual IEnumerable`1<ServiceEndpoint> GetServiceEndpoints();
    [EditorBrowsableAttribute("1")]
public virtual ServiceHubContext WithEndpoints(IEnumerable`1<ServiceEndpoint> endpoints);
}
public abstract class Microsoft.Azure.SignalR.Management.ServiceHubContext`1 : object {
    public IHubClients`1<T> Clients { get; }
    public GroupManager Groups { get; }
    public UserGroupManager UserGroups { get; }
    public ClientManager ClientManager { get; }
    private IGroupManager Microsoft.AspNetCore.SignalR.IHubContext<Microsoft.AspNetCore.SignalR.Hub<T>,T>.Groups { get; }
    public abstract virtual IHubClients`1<T> get_Clients();
    public abstract virtual GroupManager get_Groups();
    public abstract virtual UserGroupManager get_UserGroups();
    public abstract virtual ClientManager get_ClientManager();
    private sealed virtual override IGroupManager Microsoft.AspNetCore.SignalR.IHubContext<Microsoft.AspNetCore.SignalR.Hub<T>,T>.get_Groups();
    public abstract virtual ValueTask`1<NegotiationResponse> NegotiateAsync(NegotiationOptions negotiationOptions, CancellationToken cancellationToken);
    public abstract virtual ValueTask DisposeAsync();
    public abstract virtual void Dispose();
}
internal class Microsoft.Azure.SignalR.Management.ServiceHubContextBuilder : object {
    private HostBuilder _hostBuilder;
    internal ServiceHubContextBuilder(IEnumerable`1<ServiceDescriptor> srcServices);
    internal ServiceHubContextBuilder ConfigureServices(Action`1<IServiceCollection> configure);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.ServiceHubContextBuilder/<CreateAsync>d__3")]
internal Task`1<ServiceHubContext> CreateAsync(string hubName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.ServiceHubContextBuilder/<CreateAsync>d__4`1")]
public Task`1<ServiceHubContext`1<T>> CreateAsync(string hubName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.ServiceHubContextBuilder/<CreateAndStartHost>d__5")]
private Task`1<IHost> CreateAndStartHost(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.SignalR.Management.ServiceHubContextImpl : ServiceHubContext {
    private string _hubName;
    private IHubContext`1<Hub> _hubContext;
    private NegotiateProcessor _negotiateProcessor;
    private IServiceEndpointManager _endpointManager;
    private bool _disposing;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupManager <Groups>k__BackingField;
    [CompilerGeneratedAttribute]
private UserGroupManager <UserGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientManager <ClientManager>k__BackingField;
    internal IServiceProvider ServiceProvider { get; }
    public IHubClients Clients { get; }
    public GroupManager Groups { get; }
    public UserGroupManager UserGroups { get; }
    public ClientManager ClientManager { get; }
    public ServiceHubContextImpl(string hubName, IHubContext`1<Hub> hubContext, IServiceHubLifetimeManager lifetimeManager, IServiceProvider serviceProvider, NegotiateProcessor negotiateProcessor, IServiceEndpointManager endpointManager);
    [CompilerGeneratedAttribute]
internal IServiceProvider get_ServiceProvider();
    public virtual IHubClients get_Clients();
    [CompilerGeneratedAttribute]
public virtual GroupManager get_Groups();
    [CompilerGeneratedAttribute]
public virtual UserGroupManager get_UserGroups();
    [CompilerGeneratedAttribute]
public virtual ClientManager get_ClientManager();
    public virtual ValueTask`1<NegotiationResponse> NegotiateAsync(NegotiationOptions options, CancellationToken cancellationToken);
    public virtual IEnumerable`1<ServiceEndpoint> GetServiceEndpoints();
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.ServiceHubContextImpl/<DisposeAsync>d__22")]
public virtual Task DisposeAsync();
    public virtual ServiceHubContext WithEndpoints(IEnumerable`1<ServiceEndpoint> endpoints);
}
internal class Microsoft.Azure.SignalR.Management.ServiceHubContextImpl`1 : ServiceHubContext`1<T> {
    private string _hubName;
    private NegotiateProcessor _negotiateProcessor;
    private bool _disposing;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IHubClients`1<T> <Clients>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupManager <Groups>k__BackingField;
    [CompilerGeneratedAttribute]
private UserGroupManager <UserGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientManager <ClientManager>k__BackingField;
    internal IServiceProvider ServiceProvider { get; }
    public IHubClients`1<T> Clients { get; }
    public GroupManager Groups { get; }
    public UserGroupManager UserGroups { get; }
    public ClientManager ClientManager { get; }
    public ServiceHubContextImpl`1(string hubName, IHubContext`2<Hub`1<T>, T> typedHubContext, NegotiateProcessor negotiateProcessor, IServiceHubLifetimeManager lifetimeManager, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
internal IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public virtual IHubClients`1<T> get_Clients();
    [CompilerGeneratedAttribute]
public virtual GroupManager get_Groups();
    [CompilerGeneratedAttribute]
public virtual UserGroupManager get_UserGroups();
    [CompilerGeneratedAttribute]
public virtual ClientManager get_ClientManager();
    public virtual ValueTask`1<NegotiationResponse> NegotiateAsync(NegotiationOptions negotiationOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.ServiceHubContextImpl`1/<DisposeAsync>d__20")]
public virtual ValueTask DisposeAsync();
    public virtual void Dispose();
}
internal class Microsoft.Azure.SignalR.Management.ServiceHubLifetimeManagerFactory : object {
    private IServiceProvider _serviceProvider;
    private ServiceManagerOptions _options;
    public ServiceHubLifetimeManagerFactory(IServiceProvider sp, IOptions`1<ServiceManagerOptions> context);
    public IServiceHubLifetimeManager`1<THub> Create(string hubName);
}
public abstract class Microsoft.Azure.SignalR.Management.ServiceManager : object {
    public abstract virtual Task`1<ServiceHubContext> CreateHubContextAsync(string hubName, CancellationToken cancellationToken);
    public virtual Task`1<ServiceHubContext`1<T>> CreateHubContextAsync(string hubName, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> IsServiceHealthy(CancellationToken cancellationToken);
    public abstract virtual void Dispose();
}
public class Microsoft.Azure.SignalR.Management.ServiceManagerBuilder : object {
    private IServiceCollection _services;
    private Action`1<IServiceCollection> _configureAction;
    internal ServiceManagerBuilder(IServiceCollection services);
    public ServiceManagerBuilder WithOptions(Action`1<ServiceManagerOptions> configure);
    public ServiceManagerBuilder WithLoggerFactory(ILoggerFactory loggerFactory);
    public ServiceManagerBuilder WithConfiguration(IConfiguration configuration);
    public ServiceManagerBuilder WithRouter(IEndpointRouter router);
    public ServiceManagerBuilder WithNewtonsoftJson(Action`1<NewtonsoftServiceHubProtocolOptions> configure);
    public ServiceManagerBuilder WithNewtonsoftJson();
    public ServiceManagerBuilder WithHubProtocols(IHubProtocol[] hubProtocols);
    public ServiceManagerBuilder AddHubProtocol(IHubProtocol hubProtocol);
    [EditorBrowsableAttribute("1")]
public ServiceManagerBuilder WithCallingAssembly();
    [EditorBrowsableAttribute("1")]
public ServiceManagerBuilder AddUserAgent(string userAgent);
    internal ServiceManagerBuilder ConfigureServices(Action`1<IServiceCollection> configureAction);
    [ObsoleteAttribute("Use BuildServiceManager() instead. See https://github.com/Azure/azure-signalr/blob/dev/docs/management-sdk-migration.md for migration guide.")]
public sealed virtual IServiceManager Build();
    public ServiceManager BuildServiceManager();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.SignalR.Management.ServiceManagerImpl : ServiceManager {
    private IServiceProvider _serviceProvider;
    private RestClient _restClient;
    private IReadOnlyCollection`1<ServiceDescriptor> _services;
    private RestApiProvider _restApiEndpointProvider;
    private IServiceEndpointProvider _serviceEndpointProvider;
    public ServiceManagerImpl(IReadOnlyCollection`1<ServiceDescriptor> services, IServiceProvider serviceProvider, RestClient restClient, IServiceEndpointManager endpointManager);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.ServiceManagerImpl/<CreateHubContextAsync>d__6")]
public sealed virtual Task`1<IServiceHubContext> CreateHubContextAsync(string hubName, ILoggerFactory loggerFactory, CancellationToken cancellationToken);
    public virtual Task`1<ServiceHubContext> CreateHubContextAsync(string hubName, CancellationToken cancellationToken);
    public virtual Task`1<ServiceHubContext`1<T>> CreateHubContextAsync(string hubName, CancellationToken cancellation);
    public virtual void Dispose();
    public sealed virtual string GenerateClientAccessToken(string hubName, string userId, IList`1<Claim> claims, Nullable`1<TimeSpan> lifeTime);
    public sealed virtual string GetClientEndpoint(string hubName);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.ServiceManagerImpl/<IsServiceHealthy>d__12")]
public virtual Task`1<bool> IsServiceHealthy(CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Azure.SignalR.Management.ServiceManagerOptions : object {
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ServiceEndpoint[] <ServiceEndpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <Proxy>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceTransportType <ServiceTransportType>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <HttpClientTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceManagerRetryOptions <RetryOptions>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private JsonSerializerSettings <JsonSerializerSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectSerializer <ObjectSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMessageTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductInfo>k__BackingField;
    public string ApplicationName { get; public set; }
    public int ConnectionCount { get; public set; }
    public string ConnectionString { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ServiceEndpoint[] ServiceEndpoints { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public ServiceTransportType ServiceTransportType { get; public set; }
    public TimeSpan HttpClientTimeout { get; public set; }
    public ServiceManagerRetryOptions RetryOptions { get; public set; }
    [NullableAttribute("1")]
[ObsoleteAttribute("Use ServiceManagerBuilder.WithNewtonsoftJson instead.")]
public JsonSerializerSettings JsonSerializerSettings { get; }
    internal ObjectSerializer ObjectSerializer { get; internal set; }
    internal bool EnableMessageTracing { get; internal set; }
    internal string ProductInfo { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public int get_ConnectionCount();
    [CompilerGeneratedAttribute]
public void set_ConnectionCount(int value);
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public ServiceEndpoint[] get_ServiceEndpoints();
    [CompilerGeneratedAttribute]
public void set_ServiceEndpoints(ServiceEndpoint[] value);
    [CompilerGeneratedAttribute]
public IWebProxy get_Proxy();
    [CompilerGeneratedAttribute]
public void set_Proxy(IWebProxy value);
    [CompilerGeneratedAttribute]
public ServiceTransportType get_ServiceTransportType();
    [CompilerGeneratedAttribute]
public void set_ServiceTransportType(ServiceTransportType value);
    [CompilerGeneratedAttribute]
public TimeSpan get_HttpClientTimeout();
    [CompilerGeneratedAttribute]
public void set_HttpClientTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public ServiceManagerRetryOptions get_RetryOptions();
    [CompilerGeneratedAttribute]
public void set_RetryOptions(ServiceManagerRetryOptions value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public JsonSerializerSettings get_JsonSerializerSettings();
    [CompilerGeneratedAttribute]
internal ObjectSerializer get_ObjectSerializer();
    [CompilerGeneratedAttribute]
internal void set_ObjectSerializer(ObjectSerializer value);
    [NullableContextAttribute("1")]
public void UseJsonObjectSerializer(ObjectSerializer objectSerializer);
    [CompilerGeneratedAttribute]
internal bool get_EnableMessageTracing();
    [CompilerGeneratedAttribute]
internal void set_EnableMessageTracing(bool value);
    [CompilerGeneratedAttribute]
internal string get_ProductInfo();
    [CompilerGeneratedAttribute]
internal void set_ProductInfo(string value);
    internal void ValidateOptions();
}
internal class Microsoft.Azure.SignalR.Management.ServiceManagerOptionsSetup : object {
    private IConfiguration _configuration;
    public string Name { get; }
    public ServiceManagerOptionsSetup(IConfiguration configuration);
    public sealed virtual string get_Name();
    public sealed virtual void Configure(ServiceManagerOptions options);
    public sealed virtual IChangeToken GetChangeToken();
}
public enum Microsoft.Azure.SignalR.Management.ServiceManagerRetryMode : Enum {
    public int value__;
    public static ServiceManagerRetryMode Fixed;
    public static ServiceManagerRetryMode Exponential;
}
public class Microsoft.Azure.SignalR.Management.ServiceManagerRetryOptions : object {
    [CompilerGeneratedAttribute]
private int <MaxRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceManagerRetryMode <Mode>k__BackingField;
    public int MaxRetries { get; public set; }
    public TimeSpan Delay { get; public set; }
    public TimeSpan MaxDelay { get; public set; }
    public ServiceManagerRetryMode Mode { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxRetries();
    [CompilerGeneratedAttribute]
public void set_MaxRetries(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Delay();
    [CompilerGeneratedAttribute]
public void set_Delay(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxDelay();
    [CompilerGeneratedAttribute]
public void set_MaxDelay(TimeSpan value);
    [CompilerGeneratedAttribute]
public ServiceManagerRetryMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(ServiceManagerRetryMode value);
}
public enum Microsoft.Azure.SignalR.Management.ServiceTransportType : Enum {
    public int value__;
    public static ServiceTransportType Transient;
    public static ServiceTransportType Persistent;
}
[ExtensionAttribute]
internal static class Microsoft.Azure.SignalR.Management.TaskExtensions : object {
    private static TimeSpan DefaultTimeout;
    private static TaskExtensions();
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.TaskExtensions/<OrTimeout>d__1")]
[ExtensionAttribute]
public static Task OrTimeout(Task task, CancellationToken cancellationToken, TimeSpan timeout, string taskDescription);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.SignalR.Management.TimeoutHttpMessageHandler : DelegatingHandler {
    private bool _enableTimeout;
    private TimeSpan _timeout;
    public TimeoutHttpMessageHandler(IOptions`1<ServiceManagerOptions> serviceManagerOptions);
    [AsyncStateMachineAttribute("Microsoft.Azure.SignalR.Management.TimeoutHttpMessageHandler/<SendAsync>d__3")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
public abstract class Microsoft.Azure.SignalR.Management.UserGroupManager : object {
    public abstract virtual Task AddToGroupAsync(string userId, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task AddToGroupAsync(string userId, string groupName, TimeSpan ttl, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> IsUserInGroup(string userId, string groupName, CancellationToken cancellationToken);
    public abstract virtual Task RemoveFromAllGroupsAsync(string userId, CancellationToken cancellationToken);
    public abstract virtual Task RemoveFromGroupAsync(string userId, string groupName, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.SignalR.Management.UserGroupsManagerAdapter : UserGroupManager {
    private IUserGroupHubLifetimeManager _lifetimeManager;
    public UserGroupsManagerAdapter(IUserGroupHubLifetimeManager lifetimeManager);
    public virtual Task AddToGroupAsync(string userId, string groupName, CancellationToken cancellationToken);
    public virtual Task AddToGroupAsync(string userId, string groupName, TimeSpan ttl, CancellationToken cancellationToken);
    public virtual Task RemoveFromAllGroupsAsync(string userId, CancellationToken cancellationToken);
    public virtual Task`1<bool> IsUserInGroup(string userId, string groupName, CancellationToken cancellationToken);
    public virtual Task RemoveFromGroupAsync(string userId, string groupName, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.SignalR.Management.WebSocketsHubLifetimeManager`1 : ServiceLifetimeManagerBase`1<THub> {
    private IOptions`1<ServiceManagerOptions> _serviceManagerOptions;
    public WebSocketsHubLifetimeManager`1(IServiceConnectionManager`1<THub> serviceConnectionManager, IHubProtocolResolver protocolResolver, IOptions`1<HubOptions> globalHubOptions, IOptions`1<HubOptions`1<THub>> hubOptions, ILoggerFactory loggerFactory, IOptions`1<ServiceManagerOptions> serviceManagerOptions);
    public sealed virtual Task RemoveFromAllGroupsAsync(string connectionId, CancellationToken cancellationToken);
    public sealed virtual Task UserAddToGroupAsync(string userId, string groupName, CancellationToken cancellationToken);
    public sealed virtual Task UserAddToGroupAsync(string userId, string groupName, TimeSpan ttl, CancellationToken cancellationToken);
    public sealed virtual Task UserRemoveFromGroupAsync(string userId, string groupName, CancellationToken cancellationToken);
    public sealed virtual Task UserRemoveFromAllGroupsAsync(string userId, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> IsUserInGroup(string userId, string groupName, CancellationToken cancellationToken);
    public sealed virtual Task CloseConnectionAsync(string connectionId, string reason, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> ConnectionExistsAsync(string connectionId, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> UserExistsAsync(string userId, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> GroupExistsAsync(string groupName, CancellationToken cancellationToken);
    protected virtual T AppendMessageTracingId(T message);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.SignalR.SystemTextJsonExtensions : object {
    [ExtensionAttribute]
public static bool CheckRead(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static void EnsureObjectStart(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static string GetTokenString(Utf8JsonReader& reader);
    public static string GetTokenString(JsonTokenType tokenType);
    [ExtensionAttribute]
public static void EnsureArrayStart(Utf8JsonReader& reader);
    [ExtensionAttribute]
public static bool ReadAsBoolean(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static string ReadAsString(Utf8JsonReader& reader, string propertyName);
    [ExtensionAttribute]
public static Nullable`1<int> ReadAsInt32(Utf8JsonReader& reader, string propertyName);
}
internal static class Microsoft.Azure.SignalR.TextMessageFormatter : object {
    public static byte RecordSeparator;
    public static void WriteRecordSeparator(IBufferWriter`1<byte> output);
}
internal static class Microsoft.Azure.SignalR.TextMessageParser : object {
    public static byte RecordSeparator;
    private static TextMessageParser();
    public static bool TryParseMessage(ReadOnlySequence`1& buffer, ReadOnlySequence`1& payload);
}
