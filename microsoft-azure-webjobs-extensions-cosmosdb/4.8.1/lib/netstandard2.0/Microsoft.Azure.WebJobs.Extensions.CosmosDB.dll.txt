[AttributeUsageAttribute("10240")]
[BindingAttribute]
public class Microsoft.Azure.WebJobs.CosmosDBAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateIfNotExists>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContainerThroughput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SqlQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreferredLocations>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ValueTuple`2<string, object>> <SqlQueryParameters>k__BackingField;
    [AutoResolveAttribute]
public string DatabaseName { get; private set; }
    [AutoResolveAttribute]
public string ContainerName { get; private set; }
    public bool CreateIfNotExists { get; public set; }
    public string Connection { get; public set; }
    [AutoResolveAttribute]
public string Id { get; public set; }
    [AutoResolveAttribute]
public string PartitionKey { get; public set; }
    public int ContainerThroughput { get; public set; }
    [AutoResolveAttribute]
public string SqlQuery { get; public set; }
    [AutoResolveAttribute]
public string PreferredLocations { get; public set; }
    internal IEnumerable`1<ValueTuple`2<string, object>> SqlQueryParameters { get; internal set; }
    public CosmosDBAttribute(string databaseName, string containerName);
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
private void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerName();
    [CompilerGeneratedAttribute]
private void set_ContainerName(string value);
    [CompilerGeneratedAttribute]
public bool get_CreateIfNotExists();
    [CompilerGeneratedAttribute]
public void set_CreateIfNotExists(bool value);
    [CompilerGeneratedAttribute]
public string get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_PartitionKey();
    [CompilerGeneratedAttribute]
public void set_PartitionKey(string value);
    [CompilerGeneratedAttribute]
public int get_ContainerThroughput();
    [CompilerGeneratedAttribute]
public void set_ContainerThroughput(int value);
    [CompilerGeneratedAttribute]
public string get_SqlQuery();
    [CompilerGeneratedAttribute]
public void set_SqlQuery(string value);
    [CompilerGeneratedAttribute]
public string get_PreferredLocations();
    [CompilerGeneratedAttribute]
public void set_PreferredLocations(string value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<ValueTuple`2<string, object>> get_SqlQueryParameters();
    [CompilerGeneratedAttribute]
internal void set_SqlQueryParameters(IEnumerable`1<ValueTuple`2<string, object>> value);
}
[AttributeUsageAttribute("2048")]
[BindingAttribute]
public class Microsoft.Azure.WebJobs.CosmosDBTriggerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeaseConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeaseContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeaseDatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateLeaseContainerIfNotExists>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LeasesContainerThroughput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeaseContainerPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FeedPollDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LeaseRenewInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LeaseAcquireInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LeaseExpirationInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxItemsPerInvocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StartFromBeginning>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartFromTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreferredLocations>k__BackingField;
    public string Connection { get; public set; }
    public string ContainerName { get; private set; }
    public string DatabaseName { get; private set; }
    public string LeaseConnection { get; public set; }
    public string LeaseContainerName { get; public set; }
    public string LeaseDatabaseName { get; public set; }
    public bool CreateLeaseContainerIfNotExists { get; public set; }
    public int LeasesContainerThroughput { get; public set; }
    public string LeaseContainerPrefix { get; public set; }
    public int FeedPollDelay { get; public set; }
    public int LeaseRenewInterval { get; public set; }
    public int LeaseAcquireInterval { get; public set; }
    public int LeaseExpirationInterval { get; public set; }
    public int MaxItemsPerInvocation { get; public set; }
    public bool StartFromBeginning { get; public set; }
    public string StartFromTime { get; public set; }
    public string PreferredLocations { get; public set; }
    public CosmosDBTriggerAttribute(string databaseName, string containerName);
    [CompilerGeneratedAttribute]
public string get_Connection();
    [CompilerGeneratedAttribute]
public void set_Connection(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerName();
    [CompilerGeneratedAttribute]
private void set_ContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
private void set_DatabaseName(string value);
    [CompilerGeneratedAttribute]
public string get_LeaseConnection();
    [CompilerGeneratedAttribute]
public void set_LeaseConnection(string value);
    [CompilerGeneratedAttribute]
public string get_LeaseContainerName();
    [CompilerGeneratedAttribute]
public void set_LeaseContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_LeaseDatabaseName();
    [CompilerGeneratedAttribute]
public void set_LeaseDatabaseName(string value);
    [CompilerGeneratedAttribute]
public bool get_CreateLeaseContainerIfNotExists();
    [CompilerGeneratedAttribute]
public void set_CreateLeaseContainerIfNotExists(bool value);
    [CompilerGeneratedAttribute]
public int get_LeasesContainerThroughput();
    [CompilerGeneratedAttribute]
public void set_LeasesContainerThroughput(int value);
    [CompilerGeneratedAttribute]
public string get_LeaseContainerPrefix();
    [CompilerGeneratedAttribute]
public void set_LeaseContainerPrefix(string value);
    [CompilerGeneratedAttribute]
public int get_FeedPollDelay();
    [CompilerGeneratedAttribute]
public void set_FeedPollDelay(int value);
    [CompilerGeneratedAttribute]
public int get_LeaseRenewInterval();
    [CompilerGeneratedAttribute]
public void set_LeaseRenewInterval(int value);
    [CompilerGeneratedAttribute]
public int get_LeaseAcquireInterval();
    [CompilerGeneratedAttribute]
public void set_LeaseAcquireInterval(int value);
    [CompilerGeneratedAttribute]
public int get_LeaseExpirationInterval();
    [CompilerGeneratedAttribute]
public void set_LeaseExpirationInterval(int value);
    [CompilerGeneratedAttribute]
public int get_MaxItemsPerInvocation();
    [CompilerGeneratedAttribute]
public void set_MaxItemsPerInvocation(int value);
    [CompilerGeneratedAttribute]
public bool get_StartFromBeginning();
    [CompilerGeneratedAttribute]
public void set_StartFromBeginning(bool value);
    [CompilerGeneratedAttribute]
public string get_StartFromTime();
    [CompilerGeneratedAttribute]
public void set_StartFromTime(string value);
    [CompilerGeneratedAttribute]
public string get_PreferredLocations();
    [CompilerGeneratedAttribute]
public void set_PreferredLocations(string value);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.Bindings.CosmosDBClientBuilder : object {
    private CosmosDBExtensionConfigProvider _configProvider;
    public CosmosDBClientBuilder(CosmosDBExtensionConfigProvider configProvider);
    public sealed virtual CosmosClient Convert(CosmosDBAttribute attribute);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.Bindings.CosmosDBCollectorBuilder`1 : object {
    private CosmosDBExtensionConfigProvider _configProvider;
    public CosmosDBCollectorBuilder`1(CosmosDBExtensionConfigProvider configProvider);
    public sealed virtual IAsyncCollector`1<T> Convert(CosmosDBAttribute attribute);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.Bindings.CosmosDBJArrayBuilder : object {
    private CosmosDBEnumerableBuilder`1<JToken> _builder;
    public CosmosDBJArrayBuilder(CosmosDBExtensionConfigProvider configProvider);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.Bindings.CosmosDBJArrayBuilder/<ConvertAsync>d__2")]
public sealed virtual Task`1<JArray> ConvertAsync(CosmosDBAttribute attribute, CancellationToken cancellationToken);
}
public static class Microsoft.Azure.WebJobs.Extensions.CosmosDB.Constants : object {
    public static string DefaultConnectionStringName;
    public static string WebJobsCosmosExtensionName;
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBAsyncCollector`1 : object {
    private CosmosDBContext _docDBContext;
    public CosmosDBAsyncCollector`1(CosmosDBContext docDBContext);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBAsyncCollector`1/<AddAsync>d__2")]
public sealed virtual Task AddAsync(T item, CancellationToken cancellationToken);
    public sealed virtual Task FlushAsync(CancellationToken cancellationToken);
    internal static Task UpsertDocument(CosmosDBContext context, T item);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBContext : object {
    [CompilerGeneratedAttribute]
private CosmosDBAttribute <ResolvedAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private CosmosClient <Service>k__BackingField;
    public CosmosDBAttribute ResolvedAttribute { get; public set; }
    public CosmosClient Service { get; public set; }
    [CompilerGeneratedAttribute]
public CosmosDBAttribute get_ResolvedAttribute();
    [CompilerGeneratedAttribute]
public void set_ResolvedAttribute(CosmosDBAttribute value);
    [CompilerGeneratedAttribute]
public CosmosClient get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(CosmosClient value);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBEnumerableBuilder`1 : object {
    private CosmosDBExtensionConfigProvider _configProvider;
    public CosmosDBEnumerableBuilder`1(CosmosDBExtensionConfigProvider configProvider);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBEnumerableBuilder`1/<ConvertAsync>d__2")]
public sealed virtual Task`1<IEnumerable`1<T>> ConvertAsync(CosmosDBAttribute attribute, CancellationToken cancellationToken);
}
[ExtensionAttribute("CosmosDB", "")]
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBExtensionConfigProvider : object {
    private ICosmosDBServiceFactory _cosmosDBServiceFactory;
    private ICosmosDBSerializerFactory _cosmosSerializerFactory;
    private INameResolver _nameResolver;
    private CosmosDBOptions _options;
    private IDrainModeManager _drainModeManager;
    private ILoggerFactory _loggerFactory;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, CosmosClient> <ClientCache>k__BackingField;
    internal ConcurrentDictionary`2<string, CosmosClient> ClientCache { get; }
    public CosmosDBExtensionConfigProvider(IOptions`1<CosmosDBOptions> options, ICosmosDBServiceFactory cosmosDBServiceFactory, ICosmosDBSerializerFactory cosmosSerializerFactory, INameResolver nameResolver, IDrainModeManager drainModeManager, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
internal ConcurrentDictionary`2<string, CosmosClient> get_ClientCache();
    public sealed virtual void Initialize(ExtensionConfigContext context);
    internal void ValidateConnection(CosmosDBAttribute attribute, Type paramType);
    internal ParameterBindingData CreateParameterBindingData(CosmosDBAttribute cosmosAttribute);
    internal Task`1<IValueBinder> BindForItemAsync(CosmosDBAttribute attribute, Type type);
    internal CosmosClient GetService(string connection, string preferredLocations, string userAgent);
    internal CosmosDBContext CreateContext(CosmosDBAttribute attribute);
    internal static bool IsSupportedEnumerable(Type type);
    internal static string BuildCacheKey(string connectionString, string region);
    [CompilerGeneratedAttribute]
private ParameterBindingData <Initialize>b__10_0(CosmosDBAttribute attr);
    [CompilerGeneratedAttribute]
private Task`1<IValueBinder> <Initialize>b__10_1(CosmosDBAttribute attr, Type t);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBItemValueBinder`1 : object {
    private CosmosDBContext _context;
    private JObject _originalItem;
    public Type Type { get; }
    public CosmosDBItemValueBinder`1(CosmosDBContext context);
    public sealed virtual Type get_Type();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBItemValueBinder`1/<SetValueAsync>d__5")]
public sealed virtual Task SetValueAsync(object value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBItemValueBinder`1/<GetValueAsync>d__6")]
public sealed virtual Task`1<object> GetValueAsync();
    public sealed virtual string ToInvokeString();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBItemValueBinder`1/<SetValueInternalAsync>d__8")]
internal static Task SetValueInternalAsync(JObject originalItem, T newItem, CosmosDBContext context);
    internal static bool TryGetId(JObject item, String& id);
    internal static bool HasChanged(JToken original, JToken current);
    internal static JObject CloneItem(object item);
}
public class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBOptions : object {
    [CompilerGeneratedAttribute]
private Nullable`1<ConnectionMode> <ConnectionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgentSuffix>k__BackingField;
    public Nullable`1<ConnectionMode> ConnectionMode { get; public set; }
    public string UserAgentSuffix { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<ConnectionMode> get_ConnectionMode();
    [CompilerGeneratedAttribute]
public void set_ConnectionMode(Nullable`1<ConnectionMode> value);
    [CompilerGeneratedAttribute]
public string get_UserAgentSuffix();
    [CompilerGeneratedAttribute]
public void set_UserAgentSuffix(string value);
    public sealed virtual string Format();
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBSqlResolutionPolicy : object {
    public sealed virtual string TemplateBind(PropertyInfo propInfo, Attribute resolvedAttribute, BindingTemplate bindingTemplate, IReadOnlyDictionary`2<string, object> bindingData);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBTriggerAttributeBindingProvider`1 : object {
    private static string CosmosDBTriggerUserAgentSuffix;
    private static string SharedThroughputRequirementException;
    private static string LeaseCollectionRequiredPartitionKey;
    private static string LeaseCollectionRequiredPartitionKeyFromGremlin;
    private INameResolver _nameResolver;
    private CosmosDBOptions _options;
    private ILogger _logger;
    private CosmosDBExtensionConfigProvider _configProvider;
    private IDrainModeManager _drainModeManager;
    public CosmosDBTriggerAttributeBindingProvider`1(INameResolver nameResolver, CosmosDBOptions options, CosmosDBExtensionConfigProvider configProvider, IDrainModeManager drainModeManager, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBTriggerAttributeBindingProvider`1/<TryCreateAsync>d__10")]
public Task`1<ITriggerBinding> TryCreateAsync(TriggerBindingProviderContext context);
    internal static TimeSpan ResolveTimeSpanFromMilliseconds(string nameOfProperty, TimeSpan baseTimeSpan, Nullable`1<int> attributeValue);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBTriggerAttributeBindingProvider`1/<CreateLeaseCollectionIfNotExistsAsync>d__12")]
private static Task CreateLeaseCollectionIfNotExistsAsync(CosmosClient cosmosClient, string databaseName, string collectionName, int throughput);
    private string ResolveAttributeConnection(CosmosDBTriggerAttribute attribute);
    private string ResolveAttributeLeasesConnection(CosmosDBTriggerAttribute attribute);
    private void ThrowMissingConnectionStringException(bool isLeaseConnectionString);
    private string ResolveAttributeValue(string attributeValue);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBTriggerAttributeBindingProviderGenerator : object {
    private INameResolver _nameResolver;
    private CosmosDBOptions _options;
    private ILoggerFactory _loggerFactory;
    private IDrainModeManager _drainModeManager;
    private CosmosDBExtensionConfigProvider _configProvider;
    public CosmosDBTriggerAttributeBindingProviderGenerator(INameResolver nameResolver, CosmosDBOptions options, CosmosDBExtensionConfigProvider configProvider, IDrainModeManager drainModeManager, ILoggerFactory loggerFactory);
    public static Type GetParameterType(ParameterInfo parameter);
    public sealed virtual Task`1<ITriggerBinding> TryCreateAsync(TriggerBindingProviderContext context);
}
[SupportsRetryAttribute]
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBTriggerBinding`1 : object {
    private static IReadOnlyDictionary`2<string, Type> _emptyBindingContract;
    private static IReadOnlyDictionary`2<string, object> _emptyBindingData;
    private ParameterInfo _parameter;
    private string _processorName;
    private ILogger _logger;
    private Container _monitoredContainer;
    private Container _leaseContainer;
    private CosmosDBTriggerAttribute _cosmosDBAttribute;
    private IDrainModeManager _drainModeManager;
    public Type TriggerValueType { get; }
    internal Container MonitoredContainer { get; }
    internal Container LeaseContainer { get; }
    internal string ProcessorName { get; }
    internal CosmosDBTriggerAttribute CosmosDBAttribute { get; }
    public IReadOnlyDictionary`2<string, Type> BindingDataContract { get; }
    public CosmosDBTriggerBinding`1(ParameterInfo parameter, string processorName, Container monitoredContainer, Container leaseContainer, CosmosDBTriggerAttribute cosmosDBAttribute, IDrainModeManager drainModeManager, ILogger logger);
    private static CosmosDBTriggerBinding`1();
    public sealed virtual Type get_TriggerValueType();
    internal Container get_MonitoredContainer();
    internal Container get_LeaseContainer();
    internal string get_ProcessorName();
    internal CosmosDBTriggerAttribute get_CosmosDBAttribute();
    public sealed virtual IReadOnlyDictionary`2<string, Type> get_BindingDataContract();
    public sealed virtual Task`1<ITriggerData> BindAsync(object value, ValueBindingContext context);
    public sealed virtual Task`1<IListener> CreateListenerAsync(ListenerFactoryContext context);
    public sealed virtual ParameterDescriptor ToParameterDescriptor();
}
internal static class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBTriggerConstants : object {
    public static string DefaultLeaseCollectionName;
    public static string TriggerName;
    public static string TriggerDescription;
    public static string InvokeString;
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBTriggerHealthMonitor : object {
    private ILogger logger;
    public CosmosDBTriggerHealthMonitor(ILogger logger);
    public Task OnErrorAsync(string leaseToken, Exception exception);
    public Task OnLeaseAcquireAsync(string leaseToken);
    public Task OnLeaseReleaseAsync(string leaseToken);
    public void OnChangesDelivered(ChangeFeedProcessorContext context);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBTriggerListener`1 : object {
    private static int ListenerNotRegistered;
    private static int ListenerRegistering;
    private static int ListenerRegistered;
    private ITriggeredFunctionExecutor _executor;
    private ILogger _logger;
    private Container _monitoredContainer;
    private Container _leaseContainer;
    private CosmosDBTriggerAttribute _cosmosDBAttribute;
    private string _hostName;
    private string _processorName;
    private string _functionId;
    private ScaleMonitorDescriptor _scaleMonitorDescriptor;
    private CosmosDBTriggerHealthMonitor _healthMonitor;
    private string _listenerLogDetails;
    private IScaleMonitor`1<CosmosDBTriggerMetrics> _cosmosDBScaleMonitor;
    private ITargetScaler _cosmosDBTargetScaler;
    private CancellationTokenSource _functionExecutionCancellationTokenSource;
    private IDrainModeManager _drainModeManager;
    private ChangeFeedProcessor _host;
    private ChangeFeedProcessorBuilder _hostBuilder;
    private int _listenerStatus;
    public ScaleMonitorDescriptor Descriptor { get; }
    public CosmosDBTriggerListener`1(ITriggeredFunctionExecutor executor, string functionId, string processorName, Container monitoredContainer, Container leaseContainer, CosmosDBTriggerAttribute cosmosDBAttribute, IDrainModeManager drainModeManager, ILogger logger);
    public ScaleMonitorDescriptor get_Descriptor();
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBTriggerListener`1/<StartAsync>d__26")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBTriggerListener`1/<StopAsync>d__27")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    internal virtual Task StartProcessorAsync();
    internal virtual void InitializeBuilder();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBTriggerListener`1/<ProcessChangesAsync>d__30")]
private Task ProcessChangesAsync(ChangeFeedProcessorContext context, IReadOnlyCollection`1<T> docs, CancellationToken cancellationToken);
    public sealed virtual IScaleMonitor GetMonitor();
    public sealed virtual ITargetScaler GetTargetScaler();
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBTriggerMetrics : ScaleMetrics {
    [CompilerGeneratedAttribute]
private int <PartitionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RemainingWork>k__BackingField;
    public int PartitionCount { get; public set; }
    public long RemainingWork { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PartitionCount();
    [CompilerGeneratedAttribute]
public void set_PartitionCount(int value);
    [CompilerGeneratedAttribute]
public long get_RemainingWork();
    [CompilerGeneratedAttribute]
public void set_RemainingWork(long value);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBTriggerParameterDescriptor : TriggerParameterDescriptor {
    [CompilerGeneratedAttribute]
private string <CollectionName>k__BackingField;
    public string CollectionName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CollectionName();
    [CompilerGeneratedAttribute]
public void set_CollectionName(string value);
    public virtual string GetTriggerReason(IDictionary`2<string, string> arguments);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBTriggerValueBinder : object {
    private object _value;
    private ParameterInfo _parameter;
    private bool _isJArray;
    private bool _isString;
    public Type Type { get; }
    public CosmosDBTriggerValueBinder(ParameterInfo parameter, object value);
    public sealed virtual Type get_Type();
    public sealed virtual Task`1<object> GetValueAsync();
    public sealed virtual string ToInvokeString();
}
internal static class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBUtility : object {
    internal static bool TryGetCosmosException(Exception originalEx, CosmosException& cosmosException);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBUtility/<CreateDatabaseAndCollectionIfNotExistAsync>d__1")]
internal static Task CreateDatabaseAndCollectionIfNotExistAsync(CosmosDBContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBUtility/<CreateDatabaseAndCollectionIfNotExistAsync>d__2")]
internal static Task CreateDatabaseAndCollectionIfNotExistAsync(CosmosClient service, string databaseName, string containerName, string partitionKey, int throughput, bool setTTL);
    internal static CosmosClientOptions BuildClientOptions(Nullable`1<ConnectionMode> connectionMode, CosmosSerializer serializer, string preferredLocations, string userAgent);
    internal static IReadOnlyList`1<string> ParsePreferredLocations(string preferredRegions);
}
public class Microsoft.Azure.WebJobs.Extensions.CosmosDB.CosmosDBWebJobsStartup : object {
    public sealed virtual void Configure(IWebJobsBuilder builder);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.DefaultCosmosDBSerializerFactory : object {
    public sealed virtual CosmosSerializer CreateSerializer();
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.DefaultCosmosDBServiceFactory : object {
    private IConfiguration _configuration;
    private AzureComponentFactory _componentFactory;
    public DefaultCosmosDBServiceFactory(IConfiguration configuration, AzureComponentFactory componentFactory);
    public sealed virtual CosmosClient CreateService(string connectionName, CosmosClientOptions cosmosClientOptions);
    private CosmosConnectionInformation ResolveConnectionInformation(string connection);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.DocumentQueryResponse`1 : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResponseContinuation>k__BackingField;
    public IEnumerable`1<T> Results { get; public set; }
    public string ResponseContinuation { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(IEnumerable`1<T> value);
    [CompilerGeneratedAttribute]
public string get_ResponseContinuation();
    [CompilerGeneratedAttribute]
public void set_ResponseContinuation(string value);
}
internal static class Microsoft.Azure.WebJobs.Extensions.CosmosDB.Events : object {
    public static EventId OnError;
    public static EventId OnAcquire;
    public static EventId OnRelease;
    public static EventId OnDelivery;
    public static EventId OnListenerStopError;
    public static EventId OnScaling;
    public static EventId OnListenerStarted;
    public static EventId OnListenerStartError;
    public static EventId OnListenerStopped;
    private static Events();
}
public interface Microsoft.Azure.WebJobs.Extensions.CosmosDB.ICosmosDBSerializerFactory {
    public abstract virtual CosmosSerializer CreateSerializer();
}
internal interface Microsoft.Azure.WebJobs.Extensions.CosmosDB.ICosmosDBServiceFactory {
    public abstract virtual CosmosClient CreateService(string connectionString, CosmosClientOptions cosmosClientOptions);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.Trigger.CosmosDBMetricsProvider : object {
    private ILogger _logger;
    private Container _monitoredContainer;
    private Container _leaseContainer;
    private string _processorName;
    private int _maxAssignWorkerOnNotFoundCount;
    private int _assignWorkerOnNotFoundCount;
    private static Dictionary`2<string, string> KnownDocumentClientErrors;
    public CosmosDBMetricsProvider(ILogger logger, Container monitoredContainer, Container leaseContainer, string processorName);
    private static CosmosDBMetricsProvider();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.Trigger.CosmosDBMetricsProvider/<GetMetricsAsync>d__8")]
public Task`1<CosmosDBTriggerMetrics> GetMetricsAsync();
    private bool TryHandleCosmosException(Exception exception);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.Trigger.CosmosDBScaleMonitor : object {
    private ILogger _logger;
    private string _functionId;
    private Container _monitoredContainer;
    private ScaleMonitorDescriptor _scaleMonitorDescriptor;
    private CosmosDBMetricsProvider _cosmosDBMetricsProvider;
    public ScaleMonitorDescriptor Descriptor { get; }
    public CosmosDBScaleMonitor(string functionId, ILogger logger, Container monitoredContainer, Container leaseContainer, string processorName);
    public sealed virtual ScaleMonitorDescriptor get_Descriptor();
    public sealed virtual ScaleStatus GetScaleStatus(ScaleStatusContext`1<CosmosDBTriggerMetrics> context);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.Trigger.CosmosDBScaleMonitor/<Microsoft-Azure-WebJobs-Host-Scale-IScaleMonitor-GetMetricsAsync>d__9")]
private sealed virtual override Task`1<ScaleMetrics> Microsoft.Azure.WebJobs.Host.Scale.IScaleMonitor.GetMetricsAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.Trigger.CosmosDBScaleMonitor/<GetMetricsAsync>d__10")]
public sealed virtual Task`1<CosmosDBTriggerMetrics> GetMetricsAsync();
    public sealed virtual ScaleStatus GetScaleStatus(ScaleStatusContext context);
    private ScaleStatus GetScaleStatusCore(int workerCount, CosmosDBTriggerMetrics[] metrics);
    private static bool IsTrueForLast(IList`1<CosmosDBTriggerMetrics> metrics, int count, Func`3<CosmosDBTriggerMetrics, CosmosDBTriggerMetrics, bool> predicate);
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.Trigger.CosmosDbScalerProvider : object {
    private CosmosDBScaleMonitor _scaleMonitor;
    private CosmosDBTargetScaler _targetScaler;
    public CosmosDbScalerProvider(IServiceProvider serviceProvider, TriggerMetadata triggerMetadata);
    public sealed virtual IScaleMonitor GetMonitor();
    public sealed virtual ITargetScaler GetTargetScaler();
}
internal class Microsoft.Azure.WebJobs.Extensions.CosmosDB.Trigger.CosmosDBTargetScaler : object {
    public static int DefaultMaxItemsPerInvocation;
    private string _functionId;
    private TargetScalerDescriptor _targetScalerDescriptor;
    private CosmosDBMetricsProvider _cosmosDBMetricsProvider;
    private ILogger _logger;
    private int _maxItemsPerInvocation;
    private Container _monitoredContainer;
    public TargetScalerDescriptor TargetScalerDescriptor { get; }
    public CosmosDBTargetScaler(string functionId, int maxItemsPerInvocation, Container monitoredContainer, Container leaseContainer, string processorName, ILogger logger);
    public sealed virtual TargetScalerDescriptor get_TargetScalerDescriptor();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.CosmosDB.Trigger.CosmosDBTargetScaler/<GetScaleResultAsync>d__10")]
public sealed virtual Task`1<TargetScalerResult> GetScaleResultAsync(TargetScalerContext context);
    internal TargetScalerResult GetScaleResultInternal(TargetScalerContext context, long remainingWork, int partitionCount);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.CosmosDB.WebJobsConfigurationExtensions : object {
    private static string WebJobsConfigurationSectionName;
    [ExtensionAttribute]
public static IConfigurationSection GetWebJobsConnectionStringSection(IConfiguration configuration, string connectionStringName);
    public static string GetPrefixedConnectionStringName(string connectionStringName);
    [ExtensionAttribute]
public static IConfigurationSection GetConnectionStringOrSetting(IConfiguration configuration, string connectionName);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.CosmosDBWebJobsBuilderExtensions : object {
    [ExtensionAttribute]
public static IWebJobsBuilder AddCosmosDB(IWebJobsBuilder builder);
    [ExtensionAttribute]
public static IWebJobsBuilder AddCosmosDB(IWebJobsBuilder builder, Action`1<CosmosDBOptions> configure);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static IWebJobsBuilder AddCosmosDbScaleForTrigger(IWebJobsBuilder builder, TriggerMetadata triggerMetadata);
}
