internal class DurableTask.Core.Entities.EntityFailureException : Exception {
    public EntityFailureException(string message);
}
[AttributeUsageAttribute("2048")]
[DebuggerDisplayAttribute("{Activity}")]
[BindingAttribute]
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.ActivityTriggerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Activity>k__BackingField;
    [AutoResolveAttribute]
public string Activity { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Activity();
    [CompilerGeneratedAttribute]
public void set_Activity(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.ActivityTriggerAttributeBindingProvider : object {
    private DurableTaskExtension durableTaskConfig;
    private string connectionName;
    public ActivityTriggerAttributeBindingProvider(DurableTaskExtension durableTaskConfig, string connectionName);
    public sealed virtual Task`1<ITriggerBinding> TryCreateAsync(TriggerBindingProviderContext context);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.AsyncLock : object {
    private SemaphoreSlim semaphore;
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.AsyncLock/<AcquireAsync>d__2")]
public Task`1<Releaser> AcquireAsync();
    public void Release();
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.Auth.AzureCredentialFactory : object {
    private static string AzureStorageResource;
    private static string AzureStorageResourceScope;
    private string hubName;
    private AzureComponentFactory componentFactory;
    private EndToEndTraceHelper traceHelper;
    [CompilerGeneratedAttribute]
private Action`1<TokenRenewalState> Renewing;
    [CompilerGeneratedAttribute]
private Action`1<NewTokenAndFrequency> Renewed;
    [CompilerGeneratedAttribute]
private Action`3<int, NewTokenAndFrequency, Exception> RenewalFailed;
    public AzureCredentialFactory(IOptions`1<DurableTaskOptions> options, AzureComponentFactory componentFactory, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
internal void add_Renewing(Action`1<TokenRenewalState> value);
    [CompilerGeneratedAttribute]
internal void remove_Renewing(Action`1<TokenRenewalState> value);
    [CompilerGeneratedAttribute]
internal void add_Renewed(Action`1<NewTokenAndFrequency> value);
    [CompilerGeneratedAttribute]
internal void remove_Renewed(Action`1<NewTokenAndFrequency> value);
    [CompilerGeneratedAttribute]
internal void add_RenewalFailed(Action`3<int, NewTokenAndFrequency, Exception> value);
    [CompilerGeneratedAttribute]
internal void remove_RenewalFailed(Action`3<int, NewTokenAndFrequency, Exception> value);
    public sealed virtual TokenCredential Create(IConfiguration configuration, CancellationToken cancellationToken);
    public sealed virtual TokenCredential Create(IConfiguration configuration, TimeSpan tokenRefreshOffset, TimeSpan tokenRefreshRetryDelay, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.Auth.AzureCredentialFactory/<RenewTokenAsync>d__17")]
private Task`1<NewTokenAndFrequency> RenewTokenAsync(TokenRenewalState state, CancellationToken cancellationToken);
    private void OnRenewing(TokenRenewalState state);
    private void OnRenewed(NewTokenAndFrequency next);
    private void OnRenewalFailed(int attempt, NewTokenAndFrequency next, Exception exception);
    private static TimeSpan GetRenewalFrequency(AccessToken accessToken, TimeSpan refreshOffset);
    [CompilerGeneratedAttribute]
private Task`1<NewTokenAndFrequency> <Create>b__16_0(object o, CancellationToken t);
}
internal interface Microsoft.Azure.WebJobs.Extensions.DurableTask.Auth.ITokenCredentialFactory {
    public abstract virtual TokenCredential Create(IConfiguration configuration, CancellationToken cancellationToken);
    public abstract virtual TokenCredential Create(IConfiguration configuration, TimeSpan tokenRefreshOffset, TimeSpan tokenRefreshRetryDelay, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.AzureStorageAccountProvider : object {
    private IConnectionInfoResolver connectionInfoResolver;
    private ITokenCredentialFactory credentialFactory;
    private ConcurrentDictionary`2<string, TokenCredential> cachedTokenCredentials;
    public AzureStorageAccountProvider(IConnectionInfoResolver connectionInfoResolver, ITokenCredentialFactory credentialFactory);
    public sealed virtual StorageAccountDetails GetStorageAccountDetails(string connectionName);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.AzureStorageDurabilityProvider : DurabilityProvider {
    private AzureStorageOrchestrationService serviceClient;
    private IStorageAccountProvider storageAccountProvider;
    private string connectionName;
    private JObject storageOptionsJson;
    private ILogger logger;
    [CompilerGeneratedAttribute]
private TimeSpan <MaximumDelayTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LongRunningTimerIntervalLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventSourceName>k__BackingField;
    public bool CheckStatusBeforeRaiseEvent { get; }
    public string ConnectionName { get; }
    public JObject ConfigurationJson { get; }
    public TimeSpan MaximumDelayTime { get; public set; }
    public TimeSpan LongRunningTimerIntervalLength { get; public set; }
    public string EventSourceName { get; public set; }
    public AzureStorageDurabilityProvider(AzureStorageOrchestrationService service, IStorageAccountProvider storageAccountProvider, string connectionName, AzureStorageOptions options, ILogger logger);
    public virtual bool get_CheckStatusBeforeRaiseEvent();
    public virtual string get_ConnectionName();
    public virtual JObject get_ConfigurationJson();
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_MaximumDelayTime();
    [CompilerGeneratedAttribute]
public virtual void set_MaximumDelayTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_LongRunningTimerIntervalLength();
    [CompilerGeneratedAttribute]
public virtual void set_LongRunningTimerIntervalLength(TimeSpan value);
    [CompilerGeneratedAttribute]
public virtual string get_EventSourceName();
    [CompilerGeneratedAttribute]
public virtual void set_EventSourceName(string value);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.AzureStorageDurabilityProvider/<GetAllOrchestrationStates>d__24")]
public virtual Task`1<IList`1<OrchestrationState>> GetAllOrchestrationStates(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.AzureStorageDurabilityProvider/<GetOrchestrationStateWithInputsAsync>d__25")]
public virtual Task`1<IList`1<OrchestrationState>> GetOrchestrationStateWithInputsAsync(string instanceId, bool showInput);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.AzureStorageDurabilityProvider/<RewindAsync>d__26")]
public virtual Task RewindAsync(string instanceId, string reason);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.AzureStorageDurabilityProvider/<GetAllOrchestrationStatesWithFilters>d__27")]
[ObsoleteAttribute]
public virtual Task`1<IList`1<OrchestrationState>> GetAllOrchestrationStatesWithFilters(DateTime createdTimeFrom, Nullable`1<DateTime> createdTimeTo, IEnumerable`1<OrchestrationRuntimeStatus> runtimeStatus, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.AzureStorageDurabilityProvider/<RetrieveSerializedEntityState>d__28")]
public virtual Task`1<string> RetrieveSerializedEntityState(EntityId entityId, JsonSerializerSettings serializerSettings);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.AzureStorageDurabilityProvider/<LegacyImplementationOfRetrieveSerializedEntityState>d__29")]
private Task`1<string> LegacyImplementationOfRetrieveSerializedEntityState(EntityId entityId, JsonSerializerSettings serializerSettings);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.AzureStorageDurabilityProvider/<PurgeInstanceHistoryByInstanceId>d__30")]
public virtual Task`1<PurgeHistoryResult> PurgeInstanceHistoryByInstanceId(string instanceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.AzureStorageDurabilityProvider/<PurgeHistoryByFilters>d__31")]
public virtual Task`1<int> PurgeHistoryByFilters(DateTime createdTimeFrom, Nullable`1<DateTime> createdTimeTo, IEnumerable`1<OrchestrationStatus> runtimeStatus);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.AzureStorageDurabilityProvider/<GetOrchestrationStateWithPagination>d__32")]
public virtual Task`1<OrchestrationStatusQueryResult> GetOrchestrationStateWithPagination(OrchestrationStatusQueryCondition condition, CancellationToken cancellationToken);
    public virtual bool ValidateDelayTime(TimeSpan timespan, String& errorMessage);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.AzureStorageDurabilityProvider/<MakeCurrentAppPrimaryAsync>d__34")]
public virtual Task MakeCurrentAppPrimaryAsync();
    private OrchestrationStatusQueryResult ConvertFrom(DurableStatusQueryResult statusContext);
    internal static OrchestrationInstanceStatusQueryCondition ConvertWebjobsDurableConditionToAzureStorageCondition(OrchestrationStatusQueryCondition condition);
    internal DurableTaskMetricsProvider GetMetricsProvider(string functionName, string hubName, CloudStorageAccount storageAccount, ILogger logger);
    public virtual bool TryGetScaleMonitor(string functionId, string functionName, string hubName, string connectionName, IScaleMonitor& scaleMonitor);
    public virtual bool TryGetTargetScaler(string functionId, string functionName, string hubName, string connectionName, ITargetScaler& targetScaler);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.AzureStorageDurabilityProviderFactory : object {
    private static string LoggerName;
    internal static string ProviderName;
    private DurableTaskOptions options;
    private IStorageAccountProvider storageAccountProvider;
    private AzureStorageOptions azureStorageOptions;
    private INameResolver nameResolver;
    private ILoggerFactory loggerFactory;
    private bool useSeparateQueueForEntityWorkItems;
    private bool inConsumption;
    private AzureStorageDurabilityProvider defaultStorageProvider;
    private bool hasValidatedOptions;
    private AzureStorageOrchestrationServiceSettings defaultSettings;
    [CompilerGeneratedAttribute]
private string <DefaultConnectionName>k__BackingField;
    public string Name { get; }
    internal string DefaultConnectionName { get; }
    public AzureStorageDurabilityProviderFactory(IOptions`1<DurableTaskOptions> options, IStorageAccountProvider storageAccountProvider, INameResolver nameResolver, ILoggerFactory loggerFactory, IPlatformInformation platformInfo);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
internal string get_DefaultConnectionName();
    private void EnsureDefaultClientSettingsInitialized();
    public virtual DurabilityProvider GetDurabilityProvider();
    public virtual DurabilityProvider GetDurabilityProvider(DurableClientAttribute attribute);
    private AzureStorageDurabilityProvider GetAzureStorageStorageProvider(DurableClientAttribute attribute);
    internal AzureStorageOrchestrationServiceSettings GetAzureStorageOrchestrationServiceSettings(string connectionName, string taskHubNameOverride);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.AzureStorageOptions : object {
    private static int MaxTaskHubNameSize;
    private static int MinTaskHubNameSize;
    private static string TaskHubPadding;
    [CompilerGeneratedAttribute]
private string <ConnectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ControlQueueBatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PartitionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ControlQueueBufferThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ControlQueueVisibilityTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <WorkItemQueueVisibilityTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TrackingStoreConnectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TrackingStoreNamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FetchLargeMessagesAutomatically>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxQueuePollingInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseLegacyPartitionManagement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseTablePartitionManagement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowReplayingTerminalInstances>k__BackingField;
    public string ConnectionName { get; public set; }
    [ObsoleteAttribute("Please use ConnectionName instead.")]
public string ConnectionStringName { get; public set; }
    public int ControlQueueBatchSize { get; public set; }
    public int PartitionCount { get; public set; }
    public int ControlQueueBufferThreshold { get; public set; }
    public TimeSpan ControlQueueVisibilityTimeout { get; public set; }
    public TimeSpan WorkItemQueueVisibilityTimeout { get; public set; }
    public string TrackingStoreConnectionName { get; public set; }
    [ObsoleteAttribute("Please use TrackingStoreConnectionName instead.")]
public string TrackingStoreConnectionStringName { get; public set; }
    public string TrackingStoreNamePrefix { get; public set; }
    public bool FetchLargeMessagesAutomatically { get; public set; }
    public TimeSpan MaxQueuePollingInterval { get; public set; }
    public bool UseLegacyPartitionManagement { get; public set; }
    public bool UseTablePartitionManagement { get; public set; }
    public bool AllowReplayingTerminalInstances { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConnectionName();
    [CompilerGeneratedAttribute]
public void set_ConnectionName(string value);
    public string get_ConnectionStringName();
    public void set_ConnectionStringName(string value);
    [CompilerGeneratedAttribute]
public int get_ControlQueueBatchSize();
    [CompilerGeneratedAttribute]
public void set_ControlQueueBatchSize(int value);
    [CompilerGeneratedAttribute]
public int get_PartitionCount();
    [CompilerGeneratedAttribute]
public void set_PartitionCount(int value);
    [CompilerGeneratedAttribute]
public int get_ControlQueueBufferThreshold();
    [CompilerGeneratedAttribute]
public void set_ControlQueueBufferThreshold(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ControlQueueVisibilityTimeout();
    [CompilerGeneratedAttribute]
public void set_ControlQueueVisibilityTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_WorkItemQueueVisibilityTimeout();
    [CompilerGeneratedAttribute]
public void set_WorkItemQueueVisibilityTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_TrackingStoreConnectionName();
    [CompilerGeneratedAttribute]
public void set_TrackingStoreConnectionName(string value);
    public string get_TrackingStoreConnectionStringName();
    public void set_TrackingStoreConnectionStringName(string value);
    [CompilerGeneratedAttribute]
public string get_TrackingStoreNamePrefix();
    [CompilerGeneratedAttribute]
public void set_TrackingStoreNamePrefix(string value);
    [CompilerGeneratedAttribute]
public bool get_FetchLargeMessagesAutomatically();
    [CompilerGeneratedAttribute]
public void set_FetchLargeMessagesAutomatically(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxQueuePollingInterval();
    [CompilerGeneratedAttribute]
public void set_MaxQueuePollingInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_UseLegacyPartitionManagement();
    [CompilerGeneratedAttribute]
public void set_UseLegacyPartitionManagement(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseTablePartitionManagement();
    [CompilerGeneratedAttribute]
public void set_UseTablePartitionManagement(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowReplayingTerminalInstances();
    [CompilerGeneratedAttribute]
public void set_AllowReplayingTerminalInstances(bool value);
    public void ValidateHubName(string hubName);
    private static string GetTaskHubErrorString(string hubName);
    internal bool IsSanitizedHubName(string hubName, String& sanitizedHubName);
    public void Validate(ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.BindingHelper : object {
    private static string InstanceIdPlaceholder;
    private DurableTaskExtension config;
    public BindingHelper(DurableTaskExtension config);
    public IAsyncCollector`1<StartOrchestrationArgs> CreateAsyncCollector(DurableClientAttribute clientAttribute);
    public string DurableOrchestrationClientToString(IDurableOrchestrationClient client, DurableClientAttribute attr);
    public StartOrchestrationArgs JObjectToStartOrchestrationArgs(JObject input, DurableClientAttribute attr);
    public StartOrchestrationArgs StringToStartOrchestrationArgs(string input, DurableClientAttribute attr);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.CleanEntityStorageResult : ValueType {
    public int NumberOfOrphanedLocksRemoved;
    public int NumberOfEmptyEntitiesRemoved;
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.ContextImplementations.DurableClientFactory : object {
    private ConcurrentDictionary`2<DurableClientAttribute, DurableClient> cachedClients;
    private ConcurrentDictionary`2<DurableClientAttribute, HttpApiHandler> cachedHttpListeners;
    private DurableClientOptions defaultDurableClientOptions;
    private DurableTaskOptions durableTaskOptions;
    private IDurabilityProviderFactory durabilityProviderFactory;
    private ILogger logger;
    [CompilerGeneratedAttribute]
private MessagePayloadDataConverter <MessageDataConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private EndToEndTraceHelper <TraceHelper>k__BackingField;
    internal MessagePayloadDataConverter MessageDataConverter { get; private set; }
    internal EndToEndTraceHelper TraceHelper { get; private set; }
    public DurableClientFactory(IOptions`1<DurableClientOptions> defaultDurableClientOptions, IOptions`1<DurableTaskOptions> durableTaskOptions, IDurabilityProviderFactory orchestrationServiceFactory, ILoggerFactory loggerFactory, IMessageSerializerSettingsFactory messageSerializerSettingsFactory);
    [CompilerGeneratedAttribute]
internal MessagePayloadDataConverter get_MessageDataConverter();
    [CompilerGeneratedAttribute]
private void set_MessageDataConverter(MessagePayloadDataConverter value);
    [CompilerGeneratedAttribute]
internal EndToEndTraceHelper get_TraceHelper();
    [CompilerGeneratedAttribute]
private void set_TraceHelper(EndToEndTraceHelper value);
    public sealed virtual IDurableClient CreateClient(DurableClientOptions durableClientOptions);
    public sealed virtual IDurableClient CreateClient();
    public sealed virtual void Dispose();
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.ContextImplementations.IDurableClientFactory {
    public abstract virtual IDurableClient CreateClient(DurableClientOptions durableClientOptions);
    public abstract virtual IDurableClient CreateClient();
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.Correlation.DurableTaskCorrelationTelemetryInitializer : object {
    private static string RddDiagnosticSourcePrefix;
    private static string SqlRemoteDependencyType;
    internal static string TraceIdTag;
    internal static string SpanIdTag;
    internal static string ParentSpanIdTag;
    internal static string VersionTag;
    internal static string SampledTag;
    internal static string TracestateTag;
    internal static string DefaultVersion;
    internal static string TraceFlagRecordedAndNotRequested;
    internal static string TraceFlagRecordedAndRequested;
    internal static byte RequestedTraceFlag;
    internal static string LegacyRootIdProperty;
    internal static string LegacyRequestIdProperty;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ExcludeComponentCorrelationHttpHeadersOnDomains>k__BackingField;
    public HashSet`1<string> ExcludeComponentCorrelationHttpHeadersOnDomains { get; public set; }
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_ExcludeComponentCorrelationHttpHeadersOnDomains();
    [CompilerGeneratedAttribute]
public void set_ExcludeComponentCorrelationHttpHeadersOnDomains(HashSet`1<string> value);
    public sealed virtual void Initialize(ITelemetry telemetry);
    internal static void UpdateTelemetry(ITelemetry telemetry, TraceContextBase contextBase);
    internal static void UpdateTelemetryHttpCorrelationProtocol(ITelemetry telemetry, HttpCorrelationProtocolTraceContext context);
    internal static void UpdateTelemetryW3C(ITelemetry telemetry, W3CTraceContext context);
    internal void SuppressTelemetry(ITelemetry telemetry);
    internal bool IsSuppressedTelemetry(ITelemetry telemetry);
    internal static void UpdateTelemetryExceptionForHTTPCorrelationProtocol(ExceptionTelemetry telemetry, Activity activity);
    internal static void UpdateTelemetry(ITelemetry telemetry, Activity activity, bool forceUpdate);
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.Correlation.ITelemetryActivator {
    public abstract virtual void Initialize(ILogger logger);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.Correlation.NoOpTelemetryChannel : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeveloperMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndpointAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowError>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ITelemetry> <OnSend>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <OnFlush>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <OnDispose>k__BackingField;
    public Nullable`1<bool> DeveloperMode { get; public set; }
    public string EndpointAddress { get; public set; }
    public bool ThrowError { get; public set; }
    public Action`1<ITelemetry> OnSend { get; public set; }
    public Action OnFlush { get; public set; }
    public Action OnDispose { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DeveloperMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeveloperMode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EndpointAddress();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndpointAddress(string value);
    [CompilerGeneratedAttribute]
public bool get_ThrowError();
    [CompilerGeneratedAttribute]
public void set_ThrowError(bool value);
    [CompilerGeneratedAttribute]
public Action`1<ITelemetry> get_OnSend();
    [CompilerGeneratedAttribute]
public void set_OnSend(Action`1<ITelemetry> value);
    [CompilerGeneratedAttribute]
public Action get_OnFlush();
    [CompilerGeneratedAttribute]
public void set_OnFlush(Action value);
    [CompilerGeneratedAttribute]
public Action get_OnDispose();
    [CompilerGeneratedAttribute]
public void set_OnDispose(Action value);
    public sealed virtual void Send(ITelemetry item);
    public sealed virtual void Dispose();
    public sealed virtual void Flush();
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.Correlation.TelemetryActivator : object {
    private DurableTaskOptions options;
    private INameResolver nameResolver;
    private EndToEndTraceHelper endToEndTraceHelper;
    private TelemetryClient telemetryClient;
    private IAsyncDisposable telemetryModule;
    [CompilerGeneratedAttribute]
private Action`1<ITelemetry> <OnSend>k__BackingField;
    public Action`1<ITelemetry> OnSend { get; public set; }
    public TelemetryActivator(IOptions`1<DurableTaskOptions> options, INameResolver nameResolver);
    [CompilerGeneratedAttribute]
public Action`1<ITelemetry> get_OnSend();
    [CompilerGeneratedAttribute]
public void set_OnSend(Action`1<ITelemetry> value);
    public sealed virtual ValueTask DisposeAsync();
    public sealed virtual void Dispose();
    public sealed virtual void Initialize(ILogger logger);
    private void SetUpV1DistributedTracing();
    private void SetUpTelemetryCallbacks();
    private void SetUpTelemetryClient(TelemetryConfiguration telemetryConfiguration);
    private TelemetryConfiguration SetupTelemetryConfiguration();
}
[ExtensionAttribute]
public static class Microsoft.Azure.WebJobs.Extensions.DurableTask.Correlation.TraceContextBaseExtensions : object {
    [ExtensionAttribute]
public static RequestTelemetry CreateRequestTelemetry(TraceContextBase context, string siteName);
    [ExtensionAttribute]
public static DependencyTelemetry CreateDependencyTelemetry(TraceContextBase context);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.Correlation.TraceParent : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SpanId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceFlags>k__BackingField;
    public string Version { get; public set; }
    public string TraceId { get; public set; }
    public string SpanId { get; public set; }
    public string TraceFlags { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_TraceId();
    [CompilerGeneratedAttribute]
public void set_TraceId(string value);
    [CompilerGeneratedAttribute]
public string get_SpanId();
    [CompilerGeneratedAttribute]
public void set_SpanId(string value);
    [CompilerGeneratedAttribute]
public string get_TraceFlags();
    [CompilerGeneratedAttribute]
public void set_TraceFlags(string value);
    public static TraceParent FromString(string traceparent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.DefaultPlatformInformation : object {
    private INameResolver nameResolver;
    private ConcurrentDictionary`2<string, string> cachedEnviromentVariables;
    private EndToEndTraceHelper traceHelper;
    private Nullable`1<WorkerRuntimeType> workerRuntimeType;
    public DefaultPlatformInformation(INameResolver nameResolver, ILoggerFactory loggerFactory);
    private string ReadEnviromentVariable(string variableName);
    private bool IsInLinuxConsumption();
    private bool IsInAppService();
    private bool IsInLinuxAppService();
    public sealed virtual OperatingSystem GetOperatingSystem();
    private bool IsInWindowsConsumption();
    public sealed virtual bool UsesExternalPowerShellSDK();
    public sealed virtual bool IsInConsumptionPlan();
    public sealed virtual WorkerRuntimeType GetWorkerRuntimeType();
    [NullableContextAttribute("2")]
public sealed virtual string GetLinuxTenant();
    [NullableContextAttribute("2")]
public sealed virtual string GetLinuxStampName();
    [NullableContextAttribute("2")]
public sealed virtual string GetContainerName();
}
[AttributeUsageAttribute("64")]
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.DeterministicAttribute : Attribute {
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider : object {
    internal static string NoConnectionDetails;
    private static JObject EmptyConfig;
    private string name;
    private IOrchestrationService innerService;
    private IOrchestrationServiceClient innerServiceClient;
    private IEntityOrchestrationService entityOrchestrationService;
    private string connectionName;
    [CompilerGeneratedAttribute]
private TimeSpan <MaximumDelayTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LongRunningTimerIntervalLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventSourceName>k__BackingField;
    public string ConnectionName { get; }
    public bool SupportsEntities { get; }
    public bool SupportsPollFreeWait { get; }
    public bool GuaranteesOrderedDelivery { get; }
    public bool SupportsImplicitEntityDeletion { get; }
    public bool CheckStatusBeforeRaiseEvent { get; }
    public JObject ConfigurationJson { get; }
    public TimeSpan MaximumDelayTime { get; public set; }
    public TimeSpan LongRunningTimerIntervalLength { get; public set; }
    public string EventSourceName { get; public set; }
    public int TaskOrchestrationDispatcherCount { get; }
    public int MaxConcurrentTaskOrchestrationWorkItems { get; }
    public BehaviorOnContinueAsNew EventBehaviourForContinueAsNew { get; }
    public int TaskActivityDispatcherCount { get; }
    public int MaxConcurrentTaskActivityWorkItems { get; }
    private EntityBackendProperties DurableTask.Core.Entities.IEntityOrchestrationService.EntityBackendProperties { get; }
    private EntityBackendQueries DurableTask.Core.Entities.IEntityOrchestrationService.EntityBackendQueries { get; }
    public DurabilityProvider(string storageProviderName, IOrchestrationService service, IOrchestrationServiceClient serviceClient, string connectionName);
    private static DurabilityProvider();
    public virtual string get_ConnectionName();
    public virtual bool get_SupportsEntities();
    public virtual bool get_SupportsPollFreeWait();
    public virtual bool get_GuaranteesOrderedDelivery();
    public virtual bool get_SupportsImplicitEntityDeletion();
    public virtual bool get_CheckStatusBeforeRaiseEvent();
    public virtual JObject get_ConfigurationJson();
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_MaximumDelayTime();
    [CompilerGeneratedAttribute]
public virtual void set_MaximumDelayTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_LongRunningTimerIntervalLength();
    [CompilerGeneratedAttribute]
public virtual void set_LongRunningTimerIntervalLength(TimeSpan value);
    [CompilerGeneratedAttribute]
public virtual string get_EventSourceName();
    [CompilerGeneratedAttribute]
public virtual void set_EventSourceName(string value);
    public sealed virtual int get_TaskOrchestrationDispatcherCount();
    public sealed virtual int get_MaxConcurrentTaskOrchestrationWorkItems();
    public sealed virtual BehaviorOnContinueAsNew get_EventBehaviourForContinueAsNew();
    public sealed virtual int get_TaskActivityDispatcherCount();
    public sealed virtual int get_MaxConcurrentTaskActivityWorkItems();
    private sealed virtual override EntityBackendProperties DurableTask.Core.Entities.IEntityOrchestrationService.get_EntityBackendProperties();
    private sealed virtual override EntityBackendQueries DurableTask.Core.Entities.IEntityOrchestrationService.get_EntityBackendQueries();
    private sealed virtual override Task`1<TaskOrchestrationWorkItem> DurableTask.Core.Entities.IEntityOrchestrationService.LockNextOrchestrationWorkItemAsync(TimeSpan receiveTimeout, CancellationToken cancellationToken);
    private sealed virtual override Task`1<TaskOrchestrationWorkItem> DurableTask.Core.Entities.IEntityOrchestrationService.LockNextEntityWorkItemAsync(TimeSpan receiveTimeout, CancellationToken cancellationToken);
    internal string GetBackendInfo();
    private IOrchestrationService GetOrchestrationService();
    private IOrchestrationServiceClient GetOrchestrationServiceClient();
    public sealed virtual Task AbandonTaskActivityWorkItemAsync(TaskActivityWorkItem workItem);
    public sealed virtual Task AbandonTaskOrchestrationWorkItemAsync(TaskOrchestrationWorkItem workItem);
    public sealed virtual Task CompleteTaskActivityWorkItemAsync(TaskActivityWorkItem workItem, TaskMessage responseMessage);
    public sealed virtual Task CompleteTaskOrchestrationWorkItemAsync(TaskOrchestrationWorkItem workItem, OrchestrationRuntimeState newOrchestrationRuntimeState, IList`1<TaskMessage> outboundMessages, IList`1<TaskMessage> orchestratorMessages, IList`1<TaskMessage> timerMessages, TaskMessage continuedAsNewMessage, OrchestrationState orchestrationState);
    public sealed virtual Task CreateAsync();
    public sealed virtual Task CreateAsync(bool recreateInstanceStore);
    public sealed virtual Task CreateIfNotExistsAsync();
    public sealed virtual Task DeleteAsync();
    public sealed virtual Task DeleteAsync(bool deleteInstanceStore);
    public sealed virtual int GetDelayInSecondsAfterOnFetchException(Exception exception);
    public sealed virtual int GetDelayInSecondsAfterOnProcessException(Exception exception);
    public sealed virtual bool IsMaxMessageCountExceeded(int currentMessageCount, OrchestrationRuntimeState runtimeState);
    public sealed virtual Task`1<TaskActivityWorkItem> LockNextTaskActivityWorkItem(TimeSpan receiveTimeout, CancellationToken cancellationToken);
    public sealed virtual Task`1<TaskOrchestrationWorkItem> LockNextTaskOrchestrationWorkItemAsync(TimeSpan receiveTimeout, CancellationToken cancellationToken);
    public sealed virtual Task ReleaseTaskOrchestrationWorkItemAsync(TaskOrchestrationWorkItem workItem);
    public sealed virtual Task`1<TaskActivityWorkItem> RenewTaskActivityWorkItemLockAsync(TaskActivityWorkItem workItem);
    public sealed virtual Task RenewTaskOrchestrationWorkItemLockAsync(TaskOrchestrationWorkItem workItem);
    public sealed virtual Task StartAsync();
    public sealed virtual Task StopAsync();
    public sealed virtual Task StopAsync(bool isForced);
    private NotImplementedException GetNotImplementedException(string methodName);
    public virtual Task`1<IList`1<OrchestrationState>> GetAllOrchestrationStates(CancellationToken cancellationToken);
    [ObsoleteAttribute]
public virtual Task`1<IList`1<OrchestrationState>> GetAllOrchestrationStatesWithFilters(DateTime createdTimeFrom, Nullable`1<DateTime> createdTimeTo, IEnumerable`1<OrchestrationRuntimeStatus> runtimeStatus, CancellationToken cancellationToken);
    public virtual Task`1<IList`1<OrchestrationState>> GetOrchestrationStateWithInputsAsync(string instanceId, bool showInput);
    public virtual Task`1<OrchestrationStatusQueryResult> GetOrchestrationStateWithPagination(OrchestrationStatusQueryCondition condition, CancellationToken cancellationToken);
    public virtual Task`1<int> PurgeHistoryByFilters(DateTime createdTimeFrom, Nullable`1<DateTime> createdTimeTo, IEnumerable`1<OrchestrationStatus> runtimeStatus);
    public virtual Task`1<PurgeHistoryResult> PurgeInstanceHistoryByInstanceId(string instanceId);
    public virtual Task`1<string> RetrieveSerializedEntityState(EntityId entityId, JsonSerializerSettings serializierSettings);
    public virtual Task RewindAsync(string instanceId, string reason);
    public virtual Task MakeCurrentAppPrimaryAsync();
    public sealed virtual Task CreateTaskOrchestrationAsync(TaskMessage creationMessage);
    public sealed virtual Task CreateTaskOrchestrationAsync(TaskMessage creationMessage, OrchestrationStatus[] dedupeStatuses);
    public sealed virtual Task SendTaskOrchestrationMessageAsync(TaskMessage message);
    public sealed virtual Task SendTaskOrchestrationMessageBatchAsync(TaskMessage[] messages);
    public sealed virtual Task`1<OrchestrationState> WaitForOrchestrationAsync(string instanceId, string executionId, TimeSpan timeout, CancellationToken cancellationToken);
    public sealed virtual Task ForceTerminateTaskOrchestrationAsync(string instanceId, string reason);
    public Task SuspendTaskOrchestrationAsync(string instanceId, string reason);
    public Task ResumeTaskOrchestrationAsync(string instanceId, string reason);
    public sealed virtual Task`1<IList`1<OrchestrationState>> GetOrchestrationStateAsync(string instanceId, bool allExecutions);
    public sealed virtual Task`1<OrchestrationState> GetOrchestrationStateAsync(string instanceId, string executionId);
    public sealed virtual Task`1<string> GetOrchestrationHistoryAsync(string instanceId, string executionId);
    public sealed virtual Task PurgeOrchestrationHistoryAsync(DateTime thresholdDateTimeUtc, OrchestrationStateTimeRangeFilterType timeRangeFilterType);
    private sealed virtual override Task`1<OrchestrationQueryResult> DurableTask.Core.Query.IOrchestrationServiceQueryClient.GetOrchestrationWithQueryAsync(OrchestrationQuery query, CancellationToken cancellationToken);
    private sealed virtual override Task`1<PurgeResult> DurableTask.Core.IOrchestrationServicePurgeClient.PurgeInstanceStateAsync(string instanceId);
    private sealed virtual override Task`1<PurgeResult> DurableTask.Core.IOrchestrationServicePurgeClient.PurgeInstanceStateAsync(PurgeInstanceFilter purgeInstanceFilter);
    public virtual bool ValidateDelayTime(TimeSpan timespan, String& errorMessage);
    internal virtual bool ConnectionNameMatches(DurabilityProvider durabilityProvider);
    public virtual bool TryGetScaleMonitor(string functionId, string functionName, string hubName, string connectionName, IScaleMonitor& scaleMonitor);
    public virtual bool TryGetTargetScaler(string functionId, string functionName, string hubName, string connectionName, ITargetScaler& targetScaler);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableActivityContext : object {
    private string functionName;
    private string serializedInput;
    private string instanceId;
    private MessagePayloadDataConverter messageDataConverter;
    private bool inputsAreArrays;
    private bool rawInput;
    private JToken parsedJsonInput;
    private string serializedOutput;
    private string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableActivityContext.InstanceId { get; }
    private string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableActivityContext.Name { get; }
    internal DurableActivityContext(DurableTaskExtension config, string instanceId, string serializedInput, string functionName);
    private sealed virtual override string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableActivityContext.get_InstanceId();
    private sealed virtual override string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableActivityContext.get_Name();
    internal string GetRawInput();
    internal JToken GetInputAsJson();
    private sealed virtual override T Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableActivityContext.GetInput();
    internal object GetInput(Type destinationType);
    internal string GetSerializedOutput();
    internal void SetOutput(object output);
}
[ObsoleteAttribute("Use IDurableActivityContext instead.")]
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableActivityContextBase {
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient : object {
    private static string DefaultVersion;
    private static int MaxInstanceIdLength;
    private static JValue NullJValue;
    private static OrchestrationRuntimeStatus[] RunningStatus;
    private TaskHubClient client;
    private string hubName;
    private DurabilityProvider durabilityProvider;
    private HttpApiHandler httpApiHandler;
    private EndToEndTraceHelper traceHelper;
    private DurableTaskExtension config;
    private DurableClientAttribute attribute;
    private MessagePayloadDataConverter messageDataConverter;
    private DurableTaskOptions durableTaskOptions;
    private IDurableClientFactory clientFactory;
    public string TaskHubName { get; }
    internal DurabilityProvider DurabilityProvider { get; }
    private string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.TaskHubName { get; }
    private string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableClient.TaskHubName { get; }
    private string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.TaskHubName { get; }
    private bool CheckStatusBeforeRaiseEvent { get; }
    internal DurableClient(DurabilityProvider serviceClient, HttpApiHandler httpHandler, DurableClientAttribute attribute, MessagePayloadDataConverter messageDataConverter, EndToEndTraceHelper traceHelper, DurableTaskOptions durableTaskOptions);
    internal DurableClient(DurabilityProvider serviceClient, DurableTaskExtension config, HttpApiHandler httpHandler, DurableClientAttribute attribute);
    internal DurableClient(DurabilityProvider serviceClient, HttpApiHandler httpHandler, DurableClientAttribute attribute, MessagePayloadDataConverter messageDataConverter, EndToEndTraceHelper traceHelper, DurableTaskOptions durableTaskOption, IDurableClientFactory clientFactory);
    private static DurableClient();
    public string get_TaskHubName();
    internal DurabilityProvider get_DurabilityProvider();
    private sealed virtual override string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.get_TaskHubName();
    private sealed virtual override string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableClient.get_TaskHubName();
    private sealed virtual override string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.get_TaskHubName();
    private bool get_CheckStatusBeforeRaiseEvent();
    private IDurableClient GetDurableClient(string taskHubName, string connectionName);
    public virtual string ToString();
    private sealed virtual override HttpResponseMessage Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.CreateCheckStatusResponse(HttpRequestMessage request, string instanceId, bool returnInternalServerErrorOnFailure);
    private sealed virtual override IActionResult Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.CreateCheckStatusResponse(HttpRequest request, string instanceId, bool returnInternalServerErrorOnFailure);
    private sealed virtual override HttpManagementPayload Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.CreateHttpManagementPayload(string instanceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationClient-WaitForCompletionOrCreateCheckStatusResponseAsync>d__34")]
private sealed virtual override Task`1<HttpResponseMessage> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.WaitForCompletionOrCreateCheckStatusResponseAsync(HttpRequestMessage request, string instanceId, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryInterval, bool returnInternalServerErrorOnFailure);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationClient-WaitForCompletionOrCreateCheckStatusResponseAsync>d__35")]
private sealed virtual override Task`1<IActionResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.WaitForCompletionOrCreateCheckStatusResponseAsync(HttpRequest request, string instanceId, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryInterval, bool returnInternalServerErrorOnFailure);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationClient-StartNewAsync>d__36`1")]
private sealed virtual override Task`1<string> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.StartNewAsync(string orchestratorFunctionName, string instanceId, T input);
    private OrchestrationStatus[] GetStatusesNotToOverride();
    private static bool IsInvalidCharacter(char c);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.RaiseEventAsync(string instanceId, string eventName, object eventData);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.RaiseEventAsync(string taskHubName, string instanceId, string eventName, object eventData, string connectionName);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.SignalEntityAsync(EntityId entityId, string operationName, object operationInput, string taskHubName, string connectionName);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.SignalEntityAsync(EntityId entityId, DateTime scheduledTimeUtc, string operationName, object operationInput, string taskHubName, string connectionName);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<SignalEntityAsyncInternal>d__43")]
private Task SignalEntityAsyncInternal(DurableClient durableClient, string hubName, EntityId entityId, Nullable`1<DateTime> scheduledTimeUtc, string operationName, object operationInput);
    private bool ClientReferencesCurrentApp(DurableClient client);
    private bool TaskHubMatchesCurrentApp(DurableClient client);
    private bool ConnectionNameMatchesCurrentApp(DurableClient client);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationClient-TerminateAsync>d__47")]
private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.TerminateAsync(string instanceId, string reason);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationClient-SuspendAsync>d__48")]
private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.SuspendAsync(string instanceId, string reason);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationClient-ResumeAsync>d__49")]
private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.ResumeAsync(string instanceId, string reason);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationClient-RewindAsync>d__50")]
private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.RewindAsync(string instanceId, string reason);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationClient-GetStatusAsync>d__51")]
private sealed virtual override Task`1<DurableOrchestrationStatus> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.GetStatusAsync(string instanceId, bool showHistory, bool showHistoryOutput, bool showInput);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationClient-GetStatusAsync>d__52")]
private sealed virtual override Task`1<IList`1<DurableOrchestrationStatus>> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.GetStatusAsync(IEnumerable`1<string> instanceIds, bool showHistory, bool showHistoryOutput, bool showInput);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationClient-GetStatusAsync>d__53")]
private sealed virtual override Task`1<IList`1<DurableOrchestrationStatus>> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.GetStatusAsync(Nullable`1<DateTime> createdTimeFrom, Nullable`1<DateTime> createdTimeTo, IEnumerable`1<OrchestrationRuntimeStatus> runtimeStatus, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<GetAllStatusHelper>d__54")]
private Task`1<IList`1<DurableOrchestrationStatus>> GetAllStatusHelper(Nullable`1<DateTime> createdTimeFrom, Nullable`1<DateTime> createdTimeTo, IEnumerable`1<OrchestrationRuntimeStatus> runtimeStatus, CancellationToken cancellationToken);
    private OrchestrationStatusQueryCondition CreateConditionFromParameters(Nullable`1<DateTime> createdTimeFrom, Nullable`1<DateTime> createdTimeTo, IEnumerable`1<OrchestrationRuntimeStatus> runtimeStatus);
    private sealed virtual override Task`1<EntityStateResponse`1<T>> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.ReadEntityStateAsync(EntityId entityId, string taskHubName, string connectionName);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<ReadEntityStateAsync>d__57`1")]
private Task`1<EntityStateResponse`1<T>> ReadEntityStateAsync(DurabilityProvider provider, EntityId entityId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<ReadEntityStateLegacyAsync>d__58`1")]
private Task`1<EntityStateResponse`1<T>> ReadEntityStateLegacyAsync(DurabilityProvider provider, EntityId entityId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationClient-PurgeInstanceHistoryAsync>d__59")]
private sealed virtual override Task`1<PurgeHistoryResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.PurgeInstanceHistoryAsync(string instanceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationClient-PurgeInstanceHistoryAsync>d__60")]
private sealed virtual override Task`1<PurgeHistoryResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.PurgeInstanceHistoryAsync(IEnumerable`1<string> instanceIds);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationClient-PurgeInstanceHistoryAsync>d__61")]
private sealed virtual override Task`1<PurgeHistoryResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.PurgeInstanceHistoryAsync(DateTime createdTimeFrom, Nullable`1<DateTime> createdTimeTo, IEnumerable`1<OrchestrationStatus> runtimeStatus);
    private sealed virtual override Task`1<OrchestrationStatusQueryResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.GetStatusAsync(OrchestrationStatusQueryCondition condition, CancellationToken cancellationToken);
    private sealed virtual override Task`1<OrchestrationStatusQueryResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.ListInstancesAsync(OrchestrationStatusQueryCondition condition, CancellationToken cancellationToken);
    private static EntityQueryResult ConvertToEntityQueryResult(IEnumerable`1<DurableEntityStatus> entities, string continuationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableEntityClient-ListEntitiesAsync>d__65")]
private sealed virtual override Task`1<EntityQueryResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.ListEntitiesAsync(EntityQuery query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<ListEntitiesLegacyAsync>d__66")]
private Task`1<EntityQueryResult> ListEntitiesLegacyAsync(EntityQuery query, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableEntityClient-CleanEntityStorageAsync>d__67")]
private sealed virtual override Task`1<CleanEntityStorageResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.CleanEntityStorageAsync(bool removeEmptyEntities, bool releaseOrphanedLocks, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<CleanEntityStorageLegacyAsync>d__68")]
private Task`1<CleanEntityStorageResult> CleanEntityStorageLegacyAsync(bool removeEmptyEntities, bool releaseOrphanedLocks, CancellationToken cancellationToken);
    private bool HasNativeEntityQuerySupport(DurabilityProvider provider, EntityBackendQueries& entityBackendQueries);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<GetOrchestrationInstanceStateAsync>d__70")]
private Task`1<OrchestrationState> GetOrchestrationInstanceStateAsync(string instanceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<GetOrchestrationInstanceStateAsync>d__71")]
private static Task`1<OrchestrationState> GetOrchestrationInstanceStateAsync(TaskHubClient client, string instanceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<RaiseEventInternalAsync>d__72")]
private Task RaiseEventInternalAsync(TaskHubClient taskHubClient, string taskHubName, string instanceId, string eventName, object eventData, bool checkStatusFirst);
    internal HttpManagementPayload CreateHttpManagementPayload(string instanceId, string taskHubName, string connectionName);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<WaitForCompletionOrCreateCheckStatusResponseAsync>d__74")]
internal Task`1<HttpResponseMessage> WaitForCompletionOrCreateCheckStatusResponseAsync(HttpRequestMessage request, string instanceId, DurableClientAttribute attribute, TimeSpan timeout, TimeSpan retryInterval, bool returnInternalServerErrorOnFailure);
    private static bool IsOrchestrationSuspendable(OrchestrationState status);
    private static bool IsOrchestrationRunning(OrchestrationState status);
    private static bool IsOrchestrationSuspended(OrchestrationState status);
    private static HttpRequestMessage ConvertHttpRequestMessage(HttpRequest request);
    private static IActionResult ConvertHttpResponseMessage(HttpResponseMessage response);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<GetDurableOrchestrationStatusAsync>d__80")]
private static Task`1<DurableOrchestrationStatus> GetDurableOrchestrationStatusAsync(OrchestrationState orchestrationState, TaskHubClient client, bool showHistory, bool showHistoryOutput, bool showInput);
    internal HttpResponseMessage CreateCheckStatusResponse(HttpRequestMessage request, string instanceId, DurableClientAttribute attribute, bool returnInternalServerErrorOnFailure);
    private static void TrackNameAndScheduledTime(JObject historyItem, EventType eventType, int index, Dictionary`2<string, EventIndexDateMapping> eventMapper);
    private static void AddScheduledEventDataAndAggregate(Dictionary`2& eventMapper, string prefix, JToken historyItem, List`1<int> indexList, bool showInput);
    internal static DurableOrchestrationStatus ConvertOrchestrationStateToStatus(OrchestrationState orchestrationState, JArray historyArray);
    internal static JToken ParseToJToken(string value);
    private static void ConvertOutputToJToken(JObject jsonObject, bool showHistoryOutput);
    private sealed virtual override Task`1<string> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.StartNewAsync(string orchestratorFunctionName, string instanceId);
    private sealed virtual override Task`1<string> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.StartNewAsync(string orchestratorFunctionName, T input);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClient/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationClient-RestartAsync>d__89")]
private sealed virtual override Task`1<string> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.RestartAsync(string instanceId, bool restartWithNewInstanceId);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.SignalEntityAsync(string entityKey, Action`1<TEntityInterface> operation);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.SignalEntityAsync(string entityKey, DateTime scheduledTimeUtc, Action`1<TEntityInterface> operation);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.SignalEntityAsync(EntityId entityId, Action`1<TEntityInterface> operation);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.SignalEntityAsync(EntityId entityId, DateTime scheduledTimeUtc, Action`1<TEntityInterface> operation);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.MakeCurrentAppPrimaryAsync();
    [CompilerGeneratedAttribute]
private Task`1<DurableOrchestrationStatus> <Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.GetStatusAsync>b__52_0(string instanceId);
    [CompilerGeneratedAttribute]
private Task`1<PurgeHistoryResult> <Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.PurgeInstanceHistoryAsync>b__60_0(string instanceId);
    [CompilerGeneratedAttribute]
internal static DurableEntityStatus <Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient.ListEntitiesAsync>g__ConvertEntityMetadata|65_0(EntityMetadata metadata);
}
[AttributeUsageAttribute("2048")]
[DebuggerDisplayAttribute("TaskHub={TaskHub}, ConnectionName={ConnectionName}")]
[BindingAttribute]
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClientAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TaskHub>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExternalClient>k__BackingField;
    [AutoResolveAttribute]
public string TaskHub { get; public set; }
    public string ConnectionName { get; public set; }
    public bool ExternalClient { get; public set; }
    public DurableClientAttribute(DurableClientOptions durableClientOptions);
    [CompilerGeneratedAttribute]
public string get_TaskHub();
    [CompilerGeneratedAttribute]
public void set_TaskHub(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionName();
    [CompilerGeneratedAttribute]
public void set_ConnectionName(string value);
    [CompilerGeneratedAttribute]
public bool get_ExternalClient();
    [CompilerGeneratedAttribute]
public void set_ExternalClient(bool value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DurableClientAttribute other);
}
internal abstract class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableCommonContext : object {
    private List`1<Func`1<Task>> deferredTasks;
    [CompilerGeneratedAttribute]
private DurableTaskExtension <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<HistoryEvent> <History>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawInput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExecutorCalledBack>k__BackingField;
    internal DurableTaskExtension Config { get; }
    internal string FunctionName { get; }
    internal string InstanceId { get; internal set; }
    internal string ExecutionId { get; internal set; }
    internal IList`1<HistoryEvent> History { get; internal set; }
    internal string RawInput { get; internal set; }
    internal string HubName { get; }
    internal string Name { get; }
    internal bool ExecutorCalledBack { get; internal set; }
    internal DurableCommonContext(DurableTaskExtension config, string functionName);
    [CompilerGeneratedAttribute]
internal DurableTaskExtension get_Config();
    [CompilerGeneratedAttribute]
internal string get_FunctionName();
    [CompilerGeneratedAttribute]
internal string get_InstanceId();
    [CompilerGeneratedAttribute]
internal void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
internal string get_ExecutionId();
    [CompilerGeneratedAttribute]
internal void set_ExecutionId(string value);
    [CompilerGeneratedAttribute]
internal IList`1<HistoryEvent> get_History();
    [CompilerGeneratedAttribute]
internal void set_History(IList`1<HistoryEvent> value);
    [CompilerGeneratedAttribute]
internal string get_RawInput();
    [CompilerGeneratedAttribute]
internal void set_RawInput(string value);
    internal string get_HubName();
    internal string get_Name();
    [CompilerGeneratedAttribute]
internal bool get_ExecutorCalledBack();
    [CompilerGeneratedAttribute]
internal void set_ExecutorCalledBack(bool value);
    internal void AddDeferredTask(Func`1<Task> function);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableCommonContext/<RunDeferredTasks>d__33")]
internal Task RunDeferredTasks();
}
[ExtensionAttribute]
public static class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableContextExtensions : object {
    [ExtensionAttribute]
public static ILogger CreateReplaySafeLogger(IDurableOrchestrationContext context, ILogger logger);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableEntityContext : DurableCommonContext {
    private EntityId self;
    private TaskEntityShim shim;
    private MessagePayloadDataConverter messageDataConverter;
    private MessagePayloadDataConverter errorDataConverter;
    private DurabilityProvider durabilityProvider;
    private List`1<OutgoingMessage> outbox;
    [CompilerGeneratedAttribute]
private StateAccess <CurrentStateAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private object <CurrentState>k__BackingField;
    [CompilerGeneratedAttribute]
private SchedulerState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestMessage <CurrentOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CurrentOperationStartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private ResponseMessage <CurrentOperationResponse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNewlyConstructed>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionDispatchInfo <InternalError>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ExceptionDispatchInfo> <ApplicationErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionBindingContext <FunctionBindingContext>k__BackingField;
    internal StateAccess CurrentStateAccess { get; internal set; }
    internal object CurrentState { get; internal set; }
    internal SchedulerState State { get; internal set; }
    internal RequestMessage CurrentOperation { get; internal set; }
    internal DateTime CurrentOperationStartTime { get; internal set; }
    internal ResponseMessage CurrentOperationResponse { get; internal set; }
    internal bool IsNewlyConstructed { get; internal set; }
    private string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.EntityName { get; }
    private string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.EntityKey { get; }
    private EntityId Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.EntityId { get; }
    private int Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.BatchPosition { get; }
    private int Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.BatchSize { get; }
    internal List`1<RequestMessage> OperationBatch { get; }
    internal ExceptionDispatchInfo InternalError { get; internal set; }
    internal List`1<ExceptionDispatchInfo> ApplicationErrors { get; internal set; }
    internal EntityId Self { get; }
    private string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.OperationName { get; }
    private bool Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.HasState { get; }
    internal int OutboxPosition { get; }
    public FunctionBindingContext FunctionBindingContext { get; public set; }
    public DurableEntityContext(DurableTaskExtension config, DurabilityProvider durabilityProvider, EntityId entity, TaskEntityShim shim);
    [CompilerGeneratedAttribute]
internal StateAccess get_CurrentStateAccess();
    [CompilerGeneratedAttribute]
internal void set_CurrentStateAccess(StateAccess value);
    [CompilerGeneratedAttribute]
internal object get_CurrentState();
    [CompilerGeneratedAttribute]
internal void set_CurrentState(object value);
    [CompilerGeneratedAttribute]
internal SchedulerState get_State();
    [CompilerGeneratedAttribute]
internal void set_State(SchedulerState value);
    [CompilerGeneratedAttribute]
internal RequestMessage get_CurrentOperation();
    [CompilerGeneratedAttribute]
internal void set_CurrentOperation(RequestMessage value);
    [CompilerGeneratedAttribute]
internal DateTime get_CurrentOperationStartTime();
    [CompilerGeneratedAttribute]
internal void set_CurrentOperationStartTime(DateTime value);
    [CompilerGeneratedAttribute]
internal ResponseMessage get_CurrentOperationResponse();
    [CompilerGeneratedAttribute]
internal void set_CurrentOperationResponse(ResponseMessage value);
    [CompilerGeneratedAttribute]
internal bool get_IsNewlyConstructed();
    [CompilerGeneratedAttribute]
internal void set_IsNewlyConstructed(bool value);
    private sealed virtual override string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.get_EntityName();
    private sealed virtual override string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.get_EntityKey();
    private sealed virtual override EntityId Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.get_EntityId();
    private sealed virtual override int Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.get_BatchPosition();
    private sealed virtual override int Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.get_BatchSize();
    internal List`1<RequestMessage> get_OperationBatch();
    [CompilerGeneratedAttribute]
internal ExceptionDispatchInfo get_InternalError();
    [CompilerGeneratedAttribute]
internal void set_InternalError(ExceptionDispatchInfo value);
    [CompilerGeneratedAttribute]
internal List`1<ExceptionDispatchInfo> get_ApplicationErrors();
    [CompilerGeneratedAttribute]
internal void set_ApplicationErrors(List`1<ExceptionDispatchInfo> value);
    internal EntityId get_Self();
    private sealed virtual override string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.get_OperationName();
    private sealed virtual override bool Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.get_HasState();
    internal int get_OutboxPosition();
    [CompilerGeneratedAttribute]
public sealed virtual FunctionBindingContext get_FunctionBindingContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FunctionBindingContext(FunctionBindingContext value);
    public void CaptureInternalError(Exception e, TaskEntityShim shim);
    public void CaptureApplicationError(Exception e);
    public void AbortOnInternalError(string traceFlags);
    public void ThrowInternalExceptionIfAny();
    public void ThrowApplicationExceptionsIfAny();
    public bool ErrorsPresent(String& error, String& sanitizedError);
    public void Rollback(int outboxPositionBeforeOperation);
    private sealed virtual override void Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.DeleteState();
    private sealed virtual override TInput Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.GetInput();
    private sealed virtual override object Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.GetInput(Type argumentType);
    private sealed virtual override TState Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.GetState(Func`1<TState> initializer);
    internal TState GetStateWithInjectedDependencies(Func`1<TState> constructor);
    private sealed virtual override void Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.SetState(object o);
    internal bool TryWriteback(ResponseMessage& serializationErrorMessage, Exception& exception, string operationName, string operationId);
    private sealed virtual override void Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.SignalEntity(EntityId entity, string operation, object input);
    private sealed virtual override void Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.SignalEntity(EntityId entity, DateTime scheduledTimeUtc, string operation, object input);
    private void SignalEntityInternal(EntityId entity, Nullable`1<DateTime> scheduledTimeUtc, string operation, object input);
    private sealed virtual override string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.StartNewOrchestration(string functionName, object input, string instanceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableEntityContext/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableEntityContext-DispatchAsync>d__86`1")]
private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.DispatchAsync(Object[] constructorParameters);
    private sealed virtual override void Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.Return(object result);
    internal static MethodInfo FindMethodForContext(IDurableEntityContext context);
    private void ThrowIfInvalidAccess();
    internal void SendOperationMessage(OrchestrationInstance target, RequestMessage requestMessage);
    internal void SendResponseMessage(OrchestrationInstance target, Guid requestId, object message, bool isException);
    internal void SendLockRequestMessage(OrchestrationInstance target, object message);
    internal void SendLockResponseMessage(OrchestrationInstance target, Guid requestId);
    internal void SendOutbox(OrchestrationContext innerContext, bool writeBackSuccessful, ResponseMessage serializationErrorMessage);
    internal void RescheduleMessages(OrchestrationContext innerContext, List`1<RequestMessage> messages);
    internal void SendContinue(OrchestrationContext innerContext);
    private sealed virtual override void Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.SignalEntity(string entityKey, Action`1<TEntityInterface> operation);
    private sealed virtual override void Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.SignalEntity(string entityKey, DateTime scheduledTimeUtc, Action`1<TEntityInterface> operation);
    private sealed virtual override void Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.SignalEntity(EntityId entityId, Action`1<TEntityInterface> operation);
    private sealed virtual override void Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext.SignalEntity(EntityId entityId, DateTime scheduledTimeUtc, Action`1<TEntityInterface> operation);
}
internal static class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableEntityProxyHelpers : object {
    private static ConcurrentDictionary`2<Type, Type> EntityNameMappings;
    private static DurableEntityProxyHelpers();
    internal static string ResolveEntityName();
    private static Type CreateTypeMapping(Type interfaceType);
}
[DataContractAttribute]
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableEntityStatus : object {
    [CompilerGeneratedAttribute]
private EntityId <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastOperationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <State>k__BackingField;
    [DataMemberAttribute]
public EntityId EntityId { get; public set; }
    [DataMemberAttribute]
public DateTime LastOperationTime { get; public set; }
    [DataMemberAttribute]
public JToken State { get; public set; }
    internal DurableEntityStatus(DurableOrchestrationStatus orchestrationStatus);
    internal DurableEntityStatus(EntityMetadata metadata);
    [CompilerGeneratedAttribute]
public EntityId get_EntityId();
    [CompilerGeneratedAttribute]
public void set_EntityId(EntityId value);
    [CompilerGeneratedAttribute]
public DateTime get_LastOperationTime();
    [CompilerGeneratedAttribute]
public void set_LastOperationTime(DateTime value);
    [CompilerGeneratedAttribute]
public JToken get_State();
    [CompilerGeneratedAttribute]
public void set_State(JToken value);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpClientFactory : object {
    private HttpClient durableHttpClient;
    public HttpClient GetClient(IDurableHttpMessageHandlerFactory handler);
    private static Version GetAssemblyVersion(Assembly assembly);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpMessageHandlerFactory : object {
    private HttpMessageHandler httpClientHandler;
    internal DurableHttpMessageHandlerFactory(HttpMessageHandler handler);
    public sealed virtual HttpMessageHandler CreateHttpMessageHandler();
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpRequest : object {
    [CompilerGeneratedAttribute]
private HttpMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, StringValues> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private ITokenSource <TokenSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AsynchronousPatternEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRetryOptions <HttpRetryOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Timeout>k__BackingField;
    [JsonPropertyAttribute("method")]
[JsonConverterAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpRequest/HttpMethodConverter")]
public HttpMethod Method { get; }
    [JsonPropertyAttribute("uri")]
public Uri Uri { get; }
    [JsonPropertyAttribute("headers")]
[JsonConverterAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpHeadersConverter")]
public IDictionary`2<string, StringValues> Headers { get; }
    [JsonPropertyAttribute("content")]
public string Content { get; }
    [JsonPropertyAttribute("tokenSource")]
[JsonConverterAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpRequest/TokenSourceConverter")]
public ITokenSource TokenSource { get; }
    [JsonPropertyAttribute("asynchronousPatternEnabled")]
public bool AsynchronousPatternEnabled { get; }
    [JsonPropertyAttribute("retryOptions")]
public HttpRetryOptions HttpRetryOptions { get; }
    [JsonPropertyAttribute("timeout")]
public Nullable`1<TimeSpan> Timeout { get; }
    public DurableHttpRequest(HttpMethod method, Uri uri, IDictionary`2<string, StringValues> headers, string content, ITokenSource tokenSource, bool asynchronousPatternEnabled, Nullable`1<TimeSpan> timeout, HttpRetryOptions httpRetryOptions);
    [CompilerGeneratedAttribute]
public HttpMethod get_Method();
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, StringValues> get_Headers();
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public ITokenSource get_TokenSource();
    [CompilerGeneratedAttribute]
public bool get_AsynchronousPatternEnabled();
    [CompilerGeneratedAttribute]
public HttpRetryOptions get_HttpRetryOptions();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Timeout();
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpResponse : object {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, StringValues> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [JsonPropertyAttribute("statusCode")]
public HttpStatusCode StatusCode { get; }
    [JsonPropertyAttribute("headers")]
[JsonConverterAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpHeadersConverter")]
public IDictionary`2<string, StringValues> Headers { get; }
    [JsonPropertyAttribute("content")]
public string Content { get; }
    [JsonConstructorAttribute]
public DurableHttpResponse(HttpStatusCode statusCode, IDictionary`2<string, StringValues> headers, string content);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, StringValues> get_Headers();
    [CompilerGeneratedAttribute]
public string get_Content();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpResponse/<CreateDurableHttpResponseWithHttpResponseMessage>d__10")]
public static Task`1<DurableHttpResponse> CreateDurableHttpResponseWithHttpResponseMessage(HttpResponseMessage httpResponseMessage);
    private static IDictionary`2<string, StringValues> CreateStringValuesHeaderDictionary(IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<string>>> headers);
}
[ObsoleteAttribute("Use IDurableOrchestrationClient instead.")]
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationClientBase {
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationContext : DurableCommonContext {
    public static string DefaultVersion;
    private Dictionary`2<string, IEventTaskCompletionSource> pendingExternalEvents;
    private Dictionary`2<string, Queue`1<string>> bufferedExternalEvents;
    private DurabilityProvider durabilityProvider;
    private int maxActionCount;
    private MessagePayloadDataConverter messageDataConverter;
    private MessagePayloadDataConverter errorDataConverter;
    private int actionCount;
    private string serializedOutput;
    private string serializedCustomStatus;
    private bool isReplaying;
    private int newGuidCounter;
    private LockReleaser lockReleaser;
    private MessageSorter messageSorter;
    [CompilerGeneratedAttribute]
private string <ParentInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private OrchestrationContext <InnerContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContinuedAsNew>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLongRunningTimer>k__BackingField;
    [CompilerGeneratedAttribute]
private ExceptionDispatchInfo <OrchestrationException>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveUnprocessedEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<EntityId> <ContextLocks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LockRequestId>k__BackingField;
    internal string ParentInstanceId { get; internal set; }
    internal OrchestrationContext InnerContext { get; internal set; }
    internal bool IsReplaying { get; internal set; }
    internal TimeSpan LongRunningTimerIntervalLength { get; }
    internal TimeSpan MaximumShortTimerDuration { get; }
    internal int DefaultHttpAsyncRequestSleepTimeMillseconds { get; }
    internal bool ContinuedAsNew { get; private set; }
    internal bool IsCompleted { get; internal set; }
    internal bool IsLongRunningTimer { get; private set; }
    internal ExceptionDispatchInfo OrchestrationException { get; internal set; }
    internal bool IsOutputSet { get; }
    private string OrchestrationName { get; }
    internal bool PreserveUnprocessedEvents { get; internal set; }
    private DateTime Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CurrentUtcDateTime { get; }
    private bool Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.IsReplaying { get; }
    private string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.Name { get; }
    private string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.InstanceId { get; }
    private string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.ParentInstanceId { get; }
    protected List`1<EntityId> ContextLocks { get; protected set; }
    protected string LockRequestId { get; protected set; }
    private MessageSorter MessageSorter { get; }
    internal DurableOrchestrationContext(DurableTaskExtension config, DurabilityProvider durabilityProvider, string functionName);
    [CompilerGeneratedAttribute]
internal string get_ParentInstanceId();
    [CompilerGeneratedAttribute]
internal void set_ParentInstanceId(string value);
    [CompilerGeneratedAttribute]
internal OrchestrationContext get_InnerContext();
    [CompilerGeneratedAttribute]
internal void set_InnerContext(OrchestrationContext value);
    internal bool get_IsReplaying();
    internal void set_IsReplaying(bool value);
    internal TimeSpan get_LongRunningTimerIntervalLength();
    internal TimeSpan get_MaximumShortTimerDuration();
    internal int get_DefaultHttpAsyncRequestSleepTimeMillseconds();
    [CompilerGeneratedAttribute]
internal bool get_ContinuedAsNew();
    [CompilerGeneratedAttribute]
private void set_ContinuedAsNew(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsCompleted();
    [CompilerGeneratedAttribute]
internal void set_IsCompleted(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsLongRunningTimer();
    [CompilerGeneratedAttribute]
private void set_IsLongRunningTimer(bool value);
    [CompilerGeneratedAttribute]
internal ExceptionDispatchInfo get_OrchestrationException();
    [CompilerGeneratedAttribute]
internal void set_OrchestrationException(ExceptionDispatchInfo value);
    internal bool get_IsOutputSet();
    private string get_OrchestrationName();
    [CompilerGeneratedAttribute]
internal bool get_PreserveUnprocessedEvents();
    [CompilerGeneratedAttribute]
internal void set_PreserveUnprocessedEvents(bool value);
    private sealed virtual override DateTime Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.get_CurrentUtcDateTime();
    private sealed virtual override bool Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.get_IsReplaying();
    private sealed virtual override string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.get_Name();
    private sealed virtual override string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.get_InstanceId();
    private sealed virtual override string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.get_ParentInstanceId();
    [CompilerGeneratedAttribute]
protected List`1<EntityId> get_ContextLocks();
    [CompilerGeneratedAttribute]
protected void set_ContextLocks(List`1<EntityId> value);
    [CompilerGeneratedAttribute]
protected string get_LockRequestId();
    [CompilerGeneratedAttribute]
protected void set_LockRequestId(string value);
    private MessageSorter get_MessageSorter();
    internal string GetRawInput();
    internal JToken GetInputAsJson();
    private sealed virtual override T Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.GetInput();
    public sealed virtual void SetOutput(object output);
    internal string GetSerializedOutput();
    private sealed virtual override void Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.SetCustomStatus(object customStatusObject);
    internal string GetSerializedCustomStatus();
    private sealed virtual override Task`1<TResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallSubOrchestratorAsync(string functionName, object input);
    private sealed virtual override Task`1<TResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallSubOrchestratorAsync(string functionName, string instanceId, object input);
    private sealed virtual override Task`1<TResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallSubOrchestratorWithRetryAsync(string functionName, RetryOptions retryOptions, string instanceId, object input);
    private sealed virtual override Task`1<DurableHttpResponse> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallHttpAsync(HttpMethod method, Uri uri, string content, HttpRetryOptions retryOptions);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationContext/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationContext-CallHttpAsync>d__87")]
private sealed virtual override Task`1<DurableHttpResponse> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallHttpAsync(DurableHttpRequest req);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationContext/<ScheduleDurableHttpActivityAsync>d__88")]
private Task`1<DurableHttpResponse> ScheduleDurableHttpActivityAsync(DurableHttpRequest req);
    private DurableHttpRequest CreateLocationPollRequest(DurableHttpRequest durableHttpRequest, string locationUri);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationContext/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationContext-CreateTimer>d__90`1")]
private sealed virtual override Task`1<T> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CreateTimer(DateTime fireAt, T state, CancellationToken cancelToken);
    internal void ThrowIfInvalidTimerLengthForStorageProvider(DateTime fireAt);
    private sealed virtual override Task`1<T> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.WaitForExternalEvent(string name);
    private sealed virtual override Task`1<T> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.WaitForExternalEvent(string name, TimeSpan timeout, CancellationToken cancelToken);
    private sealed virtual override Task`1<T> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.WaitForExternalEvent(string name, TimeSpan timeout, T defaultValue, CancellationToken cancelToken);
    private sealed virtual override Task`1<TResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallActivityAsync(string functionName, object input);
    private sealed virtual override Task`1<TResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallActivityWithRetryAsync(string functionName, RetryOptions retryOptions, object input);
    private sealed virtual override bool Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.IsLocked(IReadOnlyList`1& ownedLocks);
    private sealed virtual override Guid Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.NewGuid();
    private sealed virtual override void Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.SignalEntity(EntityId entity, string operationName, object operationInput);
    private sealed virtual override void Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.SignalEntity(EntityId entity, DateTime startTime, string operationName, object operationInput);
    private sealed virtual override string Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.StartNewOrchestration(string functionName, object input, string instanceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationContext/<CallDurableTaskFunctionAsync>d__102`1")]
internal Task`1<TResult> CallDurableTaskFunctionAsync(string functionName, FunctionType functionType, bool oneWay, string instanceId, string operation, RetryOptions retryOptions, object input, Nullable`1<DateTime> scheduledTimeUtc);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationContext/<WaitForEntityResponse>d__103`1")]
internal Task`1<TResult> WaitForEntityResponse(Guid guid, Nullable`1<EntityId> lockToUse);
    internal Task`1<T> WaitForExternalEvent(string name, string reason);
    internal void RaiseEvent(string name, string input);
    internal void RescheduleBufferedExternalEvents();
    private Task`1<T> WaitForExternalEvent(string name, TimeSpan timeout, Action`1<TaskCompletionSource`1<T>> timeoutAction, CancellationToken cancelToken);
    private sealed virtual override void Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.ContinueAsNew(object input, bool preserveUnprocessedEvents);
    private sealed virtual override Task`1<TResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallEntityAsync(EntityId entityId, string operationName, object operationInput);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallEntityAsync(EntityId entityId, string operationName, object operationInput);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationContext/<Microsoft-Azure-WebJobs-Extensions-DurableTask-IDurableOrchestrationContext-LockAsync>d__111")]
private sealed virtual override Task`1<IDisposable> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.LockAsync(EntityId[] entities);
    public void ReleaseLocks();
    internal void ThrowIfInvalidAccess();
    internal void SendEntityMessage(OrchestrationInstance target, object eventContent);
    private void IncrementActionsOrThrowException();
    private Guid NewGuid();
    private sealed virtual override Task`1<TResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallEntityAsync(EntityId entityId, string operationName);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallEntityAsync(EntityId entityId, string operationName);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallSubOrchestratorAsync(string functionName, object input);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallSubOrchestratorAsync(string functionName, string instanceId, object input);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallSubOrchestratorWithRetryAsync(string functionName, RetryOptions retryOptions, object input);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallSubOrchestratorWithRetryAsync(string functionName, RetryOptions retryOptions, string instanceId, object input);
    private sealed virtual override Task`1<TResult> Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallSubOrchestratorWithRetryAsync(string functionName, RetryOptions retryOptions, object input);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CreateTimer(DateTime fireAt, CancellationToken cancelToken);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.WaitForExternalEvent(string name);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.WaitForExternalEvent(string name, TimeSpan timeout, CancellationToken cancelToken);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallActivityAsync(string functionName, object input);
    private sealed virtual override Task Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallActivityWithRetryAsync(string functionName, RetryOptions retryOptions, object input);
    private sealed virtual override TEntityInterface Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CreateEntityProxy(string entityKey);
    private sealed virtual override TEntityInterface Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CreateEntityProxy(EntityId entityId);
}
[ObsoleteAttribute("Use IDurableOrchestrationContext instead.")]
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationContextBase {
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableOrchestrationStatus : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastUpdatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private OrchestrationRuntimeStatus <RuntimeStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <CustomStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private JArray <History>k__BackingField;
    public string Name { get; public set; }
    public string InstanceId { get; public set; }
    public DateTime CreatedTime { get; public set; }
    public DateTime LastUpdatedTime { get; public set; }
    public JToken Input { get; public set; }
    public JToken Output { get; public set; }
    public OrchestrationRuntimeStatus RuntimeStatus { get; public set; }
    public JToken CustomStatus { get; public set; }
    public JArray History { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedTime();
    [CompilerGeneratedAttribute]
public void set_CreatedTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastUpdatedTime();
    [CompilerGeneratedAttribute]
public void set_LastUpdatedTime(DateTime value);
    [CompilerGeneratedAttribute]
public JToken get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(JToken value);
    [CompilerGeneratedAttribute]
public JToken get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(JToken value);
    [CompilerGeneratedAttribute]
public OrchestrationRuntimeStatus get_RuntimeStatus();
    [CompilerGeneratedAttribute]
public void set_RuntimeStatus(OrchestrationRuntimeStatus value);
    [CompilerGeneratedAttribute]
public JToken get_CustomStatus();
    [CompilerGeneratedAttribute]
public void set_CustomStatus(JToken value);
    [CompilerGeneratedAttribute]
public JArray get_History();
    [CompilerGeneratedAttribute]
public void set_History(JArray value);
}
[ExtensionAttribute("DurableTask", "DurableTask")]
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskExtension : object {
    private static string DefaultProvider;
    internal static string LoggerCategoryName;
    private ConcurrentDictionary`2<DurableClientAttribute, DurableClient> cachedClients;
    private ConcurrentDictionary`2<FunctionName, RegisteredFunctionInfo> knownOrchestrators;
    private ConcurrentDictionary`2<FunctionName, RegisteredFunctionInfo> knownEntities;
    private ConcurrentDictionary`2<FunctionName, RegisteredFunctionInfo> knownActivities;
    private AsyncLock taskHubLock;
    private ITelemetryActivator telemetryActivator;
    private LocalGrpcListener localGrpcListener;
    private bool isOptionsConfigured;
    private Guid extensionGuid;
    internal IPlatformInformation PlatformInformationService;
    private IDurabilityProviderFactory durabilityProviderFactory;
    private INameResolver nameResolver;
    private ILoggerFactory loggerFactory;
    private DurabilityProvider defaultDurabilityProvider;
    private TaskHubWorker taskHubWorker;
    private bool isTaskHubWorkerStarted;
    private HttpClient durableHttpClient;
    private EventSourceListener eventSourceListener;
    [CompilerGeneratedAttribute]
private DurableTaskOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpApiHandler <HttpApiHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private ILifeCycleNotificationHelper <LifeCycleNotificationHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private EndToEndTraceHelper <TraceHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private MessagePayloadDataConverter <MessageDataConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private MessagePayloadDataConverter <ErrorDataConverter>k__BackingField;
    [CompilerGeneratedAttribute]
private TypedCodeProvider <TypedCodeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IApplicationLifetimeWrapper <HostLifetimeService>k__BackingField;
    [CompilerGeneratedAttribute]
private OutOfProcOrchestrationProtocol <OutOfProcProtocol>k__BackingField;
    internal DurableTaskOptions Options { get; }
    internal DurabilityProvider DefaultDurabilityProvider { get; }
    internal HttpApiHandler HttpApiHandler { get; private set; }
    internal ILifeCycleNotificationHelper LifeCycleNotificationHelper { get; private set; }
    internal EndToEndTraceHelper TraceHelper { get; private set; }
    internal MessagePayloadDataConverter MessageDataConverter { get; private set; }
    internal MessagePayloadDataConverter ErrorDataConverter { get; private set; }
    internal TypedCodeProvider TypedCodeProvider { get; private set; }
    internal TimeSpan MessageReorderWindow { get; }
    internal bool UseImplicitEntityDeletion { get; }
    internal IApplicationLifetimeWrapper HostLifetimeService { get; }
    internal OutOfProcOrchestrationProtocol OutOfProcProtocol { get; }
    public DurableTaskExtension(IOptions`1<DurableTaskOptions> options, ILoggerFactory loggerFactory, INameResolver nameResolver, IEnumerable`1<IDurabilityProviderFactory> orchestrationServiceFactories, IApplicationLifetimeWrapper hostLifetimeService, IDurableHttpMessageHandlerFactory durableHttpMessageHandlerFactory, ILifeCycleNotificationHelper lifeCycleNotificationHelper, IMessageSerializerSettingsFactory messageSerializerSettingsFactory, IPlatformInformation platformInformationService, IErrorSerializerSettingsFactory errorSerializerSettingsFactory, IWebHookProvider webhookProvider, ITelemetryActivator telemetryActivator);
    private static DurableTaskExtension();
    [CompilerGeneratedAttribute]
internal DurableTaskOptions get_Options();
    internal DurabilityProvider get_DefaultDurabilityProvider();
    [CompilerGeneratedAttribute]
internal HttpApiHandler get_HttpApiHandler();
    [CompilerGeneratedAttribute]
private void set_HttpApiHandler(HttpApiHandler value);
    [CompilerGeneratedAttribute]
internal ILifeCycleNotificationHelper get_LifeCycleNotificationHelper();
    [CompilerGeneratedAttribute]
private void set_LifeCycleNotificationHelper(ILifeCycleNotificationHelper value);
    [CompilerGeneratedAttribute]
internal EndToEndTraceHelper get_TraceHelper();
    [CompilerGeneratedAttribute]
private void set_TraceHelper(EndToEndTraceHelper value);
    [CompilerGeneratedAttribute]
internal MessagePayloadDataConverter get_MessageDataConverter();
    [CompilerGeneratedAttribute]
private void set_MessageDataConverter(MessagePayloadDataConverter value);
    [CompilerGeneratedAttribute]
internal MessagePayloadDataConverter get_ErrorDataConverter();
    [CompilerGeneratedAttribute]
private void set_ErrorDataConverter(MessagePayloadDataConverter value);
    [CompilerGeneratedAttribute]
internal TypedCodeProvider get_TypedCodeProvider();
    [CompilerGeneratedAttribute]
private void set_TypedCodeProvider(TypedCodeProvider value);
    internal TimeSpan get_MessageReorderWindow();
    internal bool get_UseImplicitEntityDeletion();
    [CompilerGeneratedAttribute]
internal IApplicationLifetimeWrapper get_HostLifetimeService();
    [CompilerGeneratedAttribute]
internal OutOfProcOrchestrationProtocol get_OutOfProcProtocol();
    internal static MessagePayloadDataConverter CreateMessageDataConverter(IMessageSerializerSettingsFactory messageSerializerSettingsFactory);
    private MessagePayloadDataConverter CreateErrorDataConverter(IErrorSerializerSettingsFactory errorSerializerSettingsFactory);
    internal static IDurabilityProviderFactory GetDurabilityProviderFactory(DurableTaskOptions options, ILogger logger, IEnumerable`1<IDurabilityProviderFactory> orchestrationServiceFactories);
    internal string GetBackendInfo();
    private sealed virtual override void Microsoft.Azure.WebJobs.Host.Config.IExtensionConfigProvider.Initialize(ExtensionConfigContext context);
    internal string GetLocalRpcAddress();
    internal DurabilityProvider GetDurabilityProvider(DurableClientAttribute attribute);
    private void InitializeLinuxLogging();
    public sealed virtual void Dispose();
    private void StartLocalHttpServer();
    private void StopLocalHttpServer();
    private void StartLocalGrpcServer();
    private void StopLocalGrpcServer();
    private void InitializeForFunctionsV1(ExtensionConfigContext context);
    private void TraceConfigurationSettings();
    private ILifeCycleNotificationHelper CreateLifeCycleNotificationHelper();
    public Task DeleteTaskHubAsync();
    private sealed virtual override void DurableTask.Core.INameVersionObjectManager<DurableTask.Core.TaskOrchestration>.Add(ObjectCreator`1<TaskOrchestration> creator);
    private sealed virtual override TaskOrchestration DurableTask.Core.INameVersionObjectManager<DurableTask.Core.TaskOrchestration>.GetObject(string name, string version);
    private sealed virtual override void DurableTask.Core.INameVersionObjectManager<DurableTask.Core.TaskActivity>.Add(ObjectCreator`1<TaskActivity> creator);
    private sealed virtual override TaskActivity DurableTask.Core.INameVersionObjectManager<DurableTask.Core.TaskActivity>.GetObject(string name, string version);
    private Task ActivityMiddleware(DispatchMiddlewareContext dispatchContext, Func`1<Task> next);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskExtension/<OrchestrationMiddleware>d__82")]
private Task OrchestrationMiddleware(DispatchMiddlewareContext dispatchContext, Func`1<Task> next);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskExtension/<EntityMiddleware>d__83")]
private Task EntityMiddleware(DispatchMiddlewareContext dispatchContext, Func`1<Task> next);
    internal string GetDefaultConnectionName();
    internal RegisteredFunctionInfo GetOrchestratorInfo(FunctionName orchestratorFunction);
    internal bool TryGetActivityInfo(FunctionName activityFunction, RegisteredFunctionInfo& info);
    internal RegisteredFunctionInfo GetEntityInfo(FunctionName entityFunction);
    private static void ConfigureLoaderHooks();
    private static Assembly ResolveAssembly(object sender, ResolveEventArgs args);
    protected internal virtual IDurableClient GetClient(DurableClientAttribute attribute);
    internal void RegisterOrchestrator(FunctionName orchestratorFunction, RegisteredFunctionInfo orchestratorInfo);
    internal void DeregisterOrchestrator(FunctionName orchestratorFunction);
    internal void RegisterActivity(FunctionName activityFunction, ITriggeredFunctionExecutor executor);
    internal void DeregisterActivity(FunctionName activityFunction);
    internal void RegisterEntity(FunctionName entityFunction, RegisteredFunctionInfo entityInfo);
    internal void DeregisterEntity(FunctionName entityFunction);
    internal void ThrowIfFunctionDoesNotExist(string name, FunctionType functionType);
    private static bool IsDurableHttpTask(string functionName);
    internal string GetInvalidActivityFunctionMessage(string name);
    internal string GetInvalidOrchestratorFunctionMessage(string name);
    internal string GetInvalidEntityFunctionMessage(string name);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskExtension/<StartTaskHubWorkerIfNotStartedAsync>d__102")]
internal Task`1<bool> StartTaskHubWorkerIfNotStartedAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskExtension/<StopTaskHubWorkerIfIdleAsync>d__103")]
internal Task`1<bool> StopTaskHubWorkerIfIdleAsync();
    private sealed virtual override Task`1<HttpResponseMessage> Microsoft.Azure.WebJobs.IAsyncConverter<System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage>.ConvertAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    internal static string ValidatePayloadSize(string payload);
    internal static void TagActivityWithOrchestrationStatus(OrchestrationRuntimeStatus status, string instanceId, bool isEntity);
    [CompilerGeneratedAttribute]
internal static bool <StopTaskHubWorkerIfIdleAsync>g__HasActiveListeners|103_0(RegisteredFunctionInfo info);
}
[ExtensionAttribute]
public static class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskJobHostConfigurationExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddDurableClientFactory(IServiceCollection serviceCollection);
    [ExtensionAttribute]
public static IServiceCollection AddDurableClientFactory(IServiceCollection serviceCollection, Action`1<DurableClientOptions> optionsBuilder);
    [ExtensionAttribute]
public static IWebJobsBuilder AddDurableTask(IWebJobsBuilder builder);
    [ExtensionAttribute]
internal static IWebJobsBuilder AddDurableScaleForTrigger(IWebJobsBuilder builder, TriggerMetadata triggerMetadata);
    [ExtensionAttribute]
public static IWebJobsBuilder AddDurableTask(IWebJobsBuilder builder, IOptions`1<DurableTaskOptions> options);
    [ExtensionAttribute]
public static IWebJobsBuilder AddDurableTask(IWebJobsBuilder builder, Action`1<DurableTaskOptions> configure);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskListener : object {
    private DurableTaskExtension config;
    private string functionId;
    private FunctionName functionName;
    private FunctionType functionType;
    private string connectionName;
    private Lazy`1<IScaleMonitor> scaleMonitor;
    private Lazy`1<ITargetScaler> targetScaler;
    public DurableTaskListener(DurableTaskExtension config, string functionId, FunctionName functionName, FunctionType functionType, string connectionName);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    public sealed virtual IScaleMonitor GetMonitor();
    public sealed virtual ITargetScaler GetTargetScaler();
    [CompilerGeneratedAttribute]
private IScaleMonitor <.ctor>b__7_0();
    [CompilerGeneratedAttribute]
private ITargetScaler <.ctor>b__7_1();
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskMetricsProvider : object {
    private string functionName;
    private string hubName;
    private ILogger logger;
    private CloudStorageAccount storageAccount;
    private DisconnectedPerformanceMonitor performanceMonitor;
    public DurableTaskMetricsProvider(string functionName, string hubName, ILogger logger, DisconnectedPerformanceMonitor performanceMonitor, CloudStorageAccount storageAccount);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskMetricsProvider/<GetMetricsAsync>d__6")]
public virtual Task`1<DurableTaskTriggerMetrics> GetMetricsAsync();
    internal DisconnectedPerformanceMonitor GetPerformanceMonitor();
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskOptions : object {
    internal static string DefaultHubName;
    private string originalHubName;
    private string resolvedHubName;
    private string defaultHubName;
    [CompilerGeneratedAttribute]
private HttpOptions <HttpSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <StorageProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceOptions <Tracing>k__BackingField;
    [CompilerGeneratedAttribute]
private NotificationOptions <Notifications>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxConcurrentActivityFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxConcurrentOrchestratorFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxConcurrentEntityFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <LocalRpcEndpointEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxEntityOperationBatchSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExtendedSessionsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExtendedSessionIdleTimeoutInSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxOrchestrationActions>k__BackingField;
    [CompilerGeneratedAttribute]
private OverridableStates <OverridableExistingInstanceStates>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EntityMessageReorderWindowInMinutes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseGracefulShutdown>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RollbackEntityOperationsOnExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ThrowStatusExceptionsOnRaiseEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseAppLease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StoreInputsInOrchestrationHistory>k__BackingField;
    [CompilerGeneratedAttribute]
private AppLeaseOptions <AppLeaseOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <NotificationHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Uri> <WebhookUriProviderOverride>k__BackingField;
    public HttpOptions HttpSettings { get; public set; }
    public string HubName { get; public set; }
    public IDictionary`2<string, object> StorageProvider { get; public set; }
    public TraceOptions Tracing { get; public set; }
    public NotificationOptions Notifications { get; public set; }
    public Nullable`1<int> MaxConcurrentActivityFunctions { get; public set; }
    public Nullable`1<int> MaxConcurrentOrchestratorFunctions { get; public set; }
    public Nullable`1<int> MaxConcurrentEntityFunctions { get; public set; }
    public Nullable`1<bool> LocalRpcEndpointEnabled { get; public set; }
    public Nullable`1<int> MaxEntityOperationBatchSize { get; public set; }
    public bool ExtendedSessionsEnabled { get; public set; }
    public int ExtendedSessionIdleTimeoutInSeconds { get; public set; }
    public int MaxOrchestrationActions { get; public set; }
    public OverridableStates OverridableExistingInstanceStates { get; public set; }
    public int EntityMessageReorderWindowInMinutes { get; public set; }
    public bool UseGracefulShutdown { get; public set; }
    public bool RollbackEntityOperationsOnExceptions { get; public set; }
    public Nullable`1<bool> ThrowStatusExceptionsOnRaiseEvent { get; public set; }
    public bool UseAppLease { get; public set; }
    public bool StoreInputsInOrchestrationHistory { get; public set; }
    public AppLeaseOptions AppLeaseOptions { get; public set; }
    internal HttpMessageHandler NotificationHandler { get; internal set; }
    internal Func`1<Uri> WebhookUriProviderOverride { get; internal set; }
    [CompilerGeneratedAttribute]
public HttpOptions get_HttpSettings();
    [CompilerGeneratedAttribute]
public void set_HttpSettings(HttpOptions value);
    public string get_HubName();
    public void set_HubName(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_StorageProvider();
    [CompilerGeneratedAttribute]
public void set_StorageProvider(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public TraceOptions get_Tracing();
    [CompilerGeneratedAttribute]
public void set_Tracing(TraceOptions value);
    [CompilerGeneratedAttribute]
public NotificationOptions get_Notifications();
    [CompilerGeneratedAttribute]
public void set_Notifications(NotificationOptions value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxConcurrentActivityFunctions();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrentActivityFunctions(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxConcurrentOrchestratorFunctions();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrentOrchestratorFunctions(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxConcurrentEntityFunctions();
    [CompilerGeneratedAttribute]
public void set_MaxConcurrentEntityFunctions(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_LocalRpcEndpointEnabled();
    [CompilerGeneratedAttribute]
public void set_LocalRpcEndpointEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxEntityOperationBatchSize();
    [CompilerGeneratedAttribute]
public void set_MaxEntityOperationBatchSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_ExtendedSessionsEnabled();
    [CompilerGeneratedAttribute]
public void set_ExtendedSessionsEnabled(bool value);
    [CompilerGeneratedAttribute]
public int get_ExtendedSessionIdleTimeoutInSeconds();
    [CompilerGeneratedAttribute]
public void set_ExtendedSessionIdleTimeoutInSeconds(int value);
    [CompilerGeneratedAttribute]
public int get_MaxOrchestrationActions();
    [CompilerGeneratedAttribute]
public void set_MaxOrchestrationActions(int value);
    [CompilerGeneratedAttribute]
public OverridableStates get_OverridableExistingInstanceStates();
    [CompilerGeneratedAttribute]
public void set_OverridableExistingInstanceStates(OverridableStates value);
    [CompilerGeneratedAttribute]
public int get_EntityMessageReorderWindowInMinutes();
    [CompilerGeneratedAttribute]
public void set_EntityMessageReorderWindowInMinutes(int value);
    [CompilerGeneratedAttribute]
public bool get_UseGracefulShutdown();
    [CompilerGeneratedAttribute]
public void set_UseGracefulShutdown(bool value);
    [CompilerGeneratedAttribute]
public bool get_RollbackEntityOperationsOnExceptions();
    [CompilerGeneratedAttribute]
public void set_RollbackEntityOperationsOnExceptions(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ThrowStatusExceptionsOnRaiseEvent();
    [CompilerGeneratedAttribute]
public void set_ThrowStatusExceptionsOnRaiseEvent(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_UseAppLease();
    [CompilerGeneratedAttribute]
public void set_UseAppLease(bool value);
    [CompilerGeneratedAttribute]
public bool get_StoreInputsInOrchestrationHistory();
    [CompilerGeneratedAttribute]
public void set_StoreInputsInOrchestrationHistory(bool value);
    [CompilerGeneratedAttribute]
public AppLeaseOptions get_AppLeaseOptions();
    [CompilerGeneratedAttribute]
public void set_AppLeaseOptions(AppLeaseOptions value);
    [CompilerGeneratedAttribute]
internal HttpMessageHandler get_NotificationHandler();
    [CompilerGeneratedAttribute]
internal void set_NotificationHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
internal Func`1<Uri> get_WebhookUriProviderOverride();
    [CompilerGeneratedAttribute]
internal void set_WebhookUriProviderOverride(Func`1<Uri> value);
    internal static void ResolveAppSettingOptions(DurableTaskOptions options, INameResolver nameResolver);
    public void SetDefaultHubName(string hubName);
    internal void TraceConfiguration(EndToEndTraceHelper traceHelper, JObject storageProviderConfig);
    internal void Validate(INameResolver environmentVariableResolver, EndToEndTraceHelper traceHelper);
    internal bool IsDefaultHubName();
    private static bool IsInNonProductionSlot();
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskScaleMonitor : object {
    private string functionId;
    private string functionName;
    private string hubName;
    private CloudStorageAccount storageAccount;
    private ScaleMonitorDescriptor scaleMonitorDescriptor;
    private ILogger logger;
    private DurableTaskMetricsProvider durableTaskMetricsProvider;
    private DisconnectedPerformanceMonitor performanceMonitor;
    public ScaleMonitorDescriptor Descriptor { get; }
    public DurableTaskScaleMonitor(string functionId, string functionName, string hubName, CloudStorageAccount storageAccount, ILogger logger, DurableTaskMetricsProvider durableTaskMetricsProvider, DisconnectedPerformanceMonitor performanceMonitor);
    public sealed virtual ScaleMonitorDescriptor get_Descriptor();
    public DurableTaskMetricsProvider GetMetricsProvider();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskScaleMonitor/<Microsoft-Azure-WebJobs-Host-Scale-IScaleMonitor-GetMetricsAsync>d__12")]
private sealed virtual override Task`1<ScaleMetrics> Microsoft.Azure.WebJobs.Host.Scale.IScaleMonitor.GetMetricsAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskScaleMonitor/<GetMetricsAsync>d__13")]
public sealed virtual Task`1<DurableTaskTriggerMetrics> GetMetricsAsync();
    private sealed virtual override ScaleStatus Microsoft.Azure.WebJobs.Host.Scale.IScaleMonitor.GetScaleStatus(ScaleStatusContext context);
    public sealed virtual ScaleStatus GetScaleStatus(ScaleStatusContext`1<DurableTaskTriggerMetrics> context);
    private ScaleStatus GetScaleStatusCore(int workerCount, DurableTaskTriggerMetrics[] metrics);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskTargetScaler : object {
    private DurableTaskMetricsProvider metricsProvider;
    private TargetScalerResult scaleResult;
    private DurabilityProvider durabilityProvider;
    private ILogger logger;
    private string functionId;
    [CompilerGeneratedAttribute]
private TargetScalerDescriptor <TargetScalerDescriptor>k__BackingField;
    public TargetScalerDescriptor TargetScalerDescriptor { get; }
    private int MaxConcurrentActivities { get; }
    private int MaxConcurrentOrchestrators { get; }
    public DurableTaskTargetScaler(string functionId, DurableTaskMetricsProvider metricsProvider, DurabilityProvider durabilityProvider, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual TargetScalerDescriptor get_TargetScalerDescriptor();
    private int get_MaxConcurrentActivities();
    private int get_MaxConcurrentOrchestrators();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskTargetScaler/<GetScaleResultAsync>d__13")]
public sealed virtual Task`1<TargetScalerResult> GetScaleResultAsync(TargetScalerContext context);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskTriggerMetrics : ScaleMetrics {
    [CompilerGeneratedAttribute]
private int <PartitionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControlQueueLengths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ControlQueueLatencies>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WorkItemQueueLength>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkItemQueueLatency>k__BackingField;
    public int PartitionCount { get; public set; }
    public string ControlQueueLengths { get; public set; }
    public string ControlQueueLatencies { get; public set; }
    public int WorkItemQueueLength { get; public set; }
    public string WorkItemQueueLatency { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_PartitionCount();
    [CompilerGeneratedAttribute]
public virtual void set_PartitionCount(int value);
    [CompilerGeneratedAttribute]
public virtual string get_ControlQueueLengths();
    [CompilerGeneratedAttribute]
public virtual void set_ControlQueueLengths(string value);
    [CompilerGeneratedAttribute]
public string get_ControlQueueLatencies();
    [CompilerGeneratedAttribute]
public void set_ControlQueueLatencies(string value);
    [CompilerGeneratedAttribute]
public virtual int get_WorkItemQueueLength();
    [CompilerGeneratedAttribute]
public virtual void set_WorkItemQueueLength(int value);
    [CompilerGeneratedAttribute]
public string get_WorkItemQueueLatency();
    [CompilerGeneratedAttribute]
public void set_WorkItemQueueLatency(string value);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskWebJobsStartup : object {
    public sealed virtual void Configure(IWebJobsBuilder builder);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableTaskWorkerContext : object {
    private DurableTaskExtension listenerConfig;
    private ExtensionConfigContext extensionContext;
    private List`1<ObjectCreator`1<TaskOrchestration>> orchestrations;
    private List`1<ObjectCreator`1<TaskActivity>> activities;
    public DurableTaskExtension ListenerConfig { get; }
    public ExtensionConfigContext ExtensionContext { get; }
    public IList`1<ObjectCreator`1<TaskOrchestration>> Orchestrations { get; }
    public IList`1<ObjectCreator`1<TaskActivity>> Activities { get; }
    public DurableTaskWorkerContext(DurableTaskExtension configuration, ExtensionConfigContext extensionContext);
    public DurableTaskExtension get_ListenerConfig();
    public ExtensionConfigContext get_ExtensionContext();
    public IList`1<ObjectCreator`1<TaskOrchestration>> get_Orchestrations();
    public IList`1<ObjectCreator`1<TaskActivity>> get_Activities();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.EndToEndTraceHelper : object {
    private static string ExtensionVersion;
    [NullableAttribute("2")]
private static string appName;
    [NullableAttribute("2")]
private static string slotName;
    private ILogger logger;
    private bool traceReplayEvents;
    private bool shouldTraceRawData;
    private long sequenceNumber;
    public static string LocalAppName { get; }
    public static string LocalSlotName { get; }
    public EndToEndTraceHelper(ILogger logger, bool traceReplayEvents, bool shouldTraceRawData);
    private static EndToEndTraceHelper();
    public static string get_LocalAppName();
    public static string get_LocalSlotName();
    internal void SanitizeString(string rawPayload, String& iloggerString, String& durableKustoTableString);
    internal void SanitizeException(Exception exception, String& iloggerExceptionString, String& durableKustoTableString);
    public void ExtensionInformationalEvent(string hubName, string instanceId, string functionName, string message, bool writeToUserLogs);
    public void ExtensionWarningEvent(string hubName, string functionName, string instanceId, string message);
    public void FunctionScheduled(string hubName, string functionName, string instanceId, string reason, FunctionType functionType, bool isReplay);
    public void FunctionStarting(string hubName, string functionName, string instanceId, string input, FunctionType functionType, bool isReplay, int taskEventId);
    public void FunctionAwaited(string hubName, string functionName, FunctionType functionType, string instanceId, bool isReplay);
    public void FunctionListening(string hubName, string functionName, string instanceId, string reason, bool isReplay);
    public void FunctionCompleted(string hubName, string functionName, string instanceId, string output, bool continuedAsNew, FunctionType functionType, bool isReplay, int taskEventId);
    public void FunctionTerminated(string hubName, string functionName, string instanceId, string reason);
    public void SuspendingOrchestration(string hubName, string functionName, string instanceId, string reason);
    public void ResumingOrchestration(string hubName, string functionName, string instanceId, string reason);
    public void FunctionRewound(string hubName, string functionName, string instanceId, string reason);
    public void FunctionFailed(string hubName, string functionName, string instanceId, Exception exception, FunctionType functionType, bool isReplay, int taskEventId);
    public void FunctionFailed(string hubName, string functionName, string instanceId, string reason, string sanitizedReason, FunctionType functionType, bool isReplay, int taskEventId);
    public void FunctionAborted(string hubName, string functionName, string instanceId, string reason, FunctionType functionType);
    public void OperationCompleted(string hubName, string functionName, string instanceId, string operationId, string operationName, string input, string output, double duration, bool isReplay);
    public void OperationFailed(string hubName, string functionName, string instanceId, string operationId, string operationName, string input, Exception exception, double duration, bool isReplay);
    public void OperationFailed(string hubName, string functionName, string instanceId, string operationId, string operationName, string input, string exception, double duration, bool isReplay);
    private void OperationFailed(string hubName, string functionName, string instanceId, string operationId, string operationName, string sanitizedInput, string loggerInput, string sanitizedException, string loggerException, double duration, bool isReplay);
    public void ExternalEventRaised(string hubName, string functionName, string instanceId, string eventName, string input, bool isReplay);
    public void ExternalEventSaved(string hubName, string functionName, FunctionType functionType, string instanceId, string eventName, bool isReplay);
    [ConditionalAttribute("DEBUG")]
public void DeliveringEntityMessage(string instanceId, string executionId, int eventId, string eventName, object eventContent);
    [ConditionalAttribute("DEBUG")]
public void SendingEntityMessage(string instanceId, string executionId, string targetInstanceId, string eventName, object eventContent);
    public void EntityOperationQueued(string hubName, string functionName, string instanceId, string operationId, string operationName, bool isReplay);
    public void EntityResponseReceived(string hubName, string functionName, FunctionType functionType, string instanceId, string operationId, string result, bool isReplay);
    public void EntityStateCreated(string hubName, string functionName, string instanceId, string operationName, string operationId, bool isReplay);
    public void EntityStateDeleted(string hubName, string functionName, string instanceId, string operationName, string operationId, bool isReplay);
    public void EntityLockAcquired(string hubName, string functionName, string instanceId, string requestingInstanceId, string requestingExecutionId, string requestId, bool isReplay);
    public void EntityLockReleased(string hubName, string functionName, string instanceId, string requestingInstance, string requestId, bool isReplay);
    public void EntityBatchCompleted(string hubName, string functionName, string instanceId, int eventsReceived, int operationsInBatch, int operationsExecuted, Nullable`1<int> outOfOrderMessages, int queuedMessages, int userStateSize, Nullable`1<int> sources, Nullable`1<int> destinations, string lockedBy, bool suspended, string traceFlags);
    public void EntityBatchFailed(string hubName, string functionName, string instanceId, string traceFlags, Exception error);
    public void EventGridSuccess(string hubName, string functionName, FunctionState functionState, string instanceId, string details, HttpStatusCode statusCode, string reason, long latencyMs);
    public void EventGridFailed(string hubName, string functionName, FunctionState functionState, string instanceId, string details, HttpStatusCode statusCode, string reason, long latencyMs);
    public void EventGridException(string hubName, string functionName, FunctionState functionState, string instanceId, string details, Exception exception, string reason, long latencyMs);
    public void TimerExpired(string hubName, string functionName, string instanceId, DateTime expirationTime, bool isReplay);
    public void TraceConfiguration(string hubName, string configurationJsonString);
    public void RetrievingToken(string hubName, string resource);
    public void TokenRetrievalFailed(string hubName, string resource, Exception exception);
    public void TokenRenewalFailed(string hubName, string resource, int attempt, TimeSpan delay, Exception exception);
    private bool ShouldLogEvent(bool isReplay);
}
public static class Microsoft.Azure.WebJobs.Extensions.DurableTask.Entity : object {
    private static AsyncLocal`1<IDurableEntityContext> EntityContext;
    public static IDurableEntityContext Current { get; }
    private static Entity();
    public static IDurableEntityContext get_Current();
    internal static void SetContext(IDurableEntityContext context);
    public static void SetMockContext(IDurableEntityContext mockContext);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityClientProxy : object {
    private IDurableEntityClient client;
    private Nullable`1<DateTime> scheduledTimeForSignal;
    [CompilerGeneratedAttribute]
private Task <SignalTask>k__BackingField;
    internal Task SignalTask { get; private set; }
    internal EntityClientProxy(IDurableEntityClient client);
    internal EntityClientProxy(IDurableEntityClient client, DateTime scheduledTimeForSignal);
    [CompilerGeneratedAttribute]
internal Task get_SignalTask();
    [CompilerGeneratedAttribute]
private void set_SignalTask(Task value);
    public sealed virtual Task CallAsync(EntityId entityId, string operationName, object operationInput);
    public sealed virtual Task`1<TResult> CallAsync(EntityId entityId, string operationName, object operationInput);
    public sealed virtual void Signal(EntityId entityId, string operationName, object operationInput);
    private void SignalAndStoreTask(EntityId entityId, string operationName, object operationInput);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityContextProxy : object {
    private IDurableEntityContext context;
    private Nullable`1<DateTime> scheduledTimeForSignal;
    internal EntityContextProxy(IDurableEntityContext context);
    internal EntityContextProxy(IDurableEntityContext context, DateTime scheduledTimeForSignal);
    public sealed virtual Task CallAsync(EntityId entityId, string operationName, object operationInput);
    public sealed virtual Task`1<TResult> CallAsync(EntityId entityId, string operationName, object operationInput);
    public sealed virtual void Signal(EntityId entityId, string operationName, object operationInput);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityCurrentOperationStatus : object {
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [JsonPropertyAttribute]
public string Operation { get; public set; }
    [JsonPropertyAttribute]
public Guid Id { get; public set; }
    [JsonPropertyAttribute]
public string ParentInstanceId { get; public set; }
    [JsonPropertyAttribute]
public DateTime StartTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_ParentInstanceId();
    [CompilerGeneratedAttribute]
public void set_ParentInstanceId(string value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTime value);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId : ValueType {
    private string schedulerId;
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityKey>k__BackingField;
    [JsonPropertyAttribute]
public string EntityName { get; private set; }
    [JsonPropertyAttribute]
public string EntityKey { get; private set; }
    public EntityId(string entityName, string entityKey);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_EntityName();
    [CompilerGeneratedAttribute]
private void set_EntityName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_EntityKey();
    [CompilerGeneratedAttribute]
private void set_EntityKey(string value);
    internal static string GetSchedulerIdFromEntityId(EntityId entityId);
    private static string GetSchedulerId(string entityName, string entityKey);
    internal static string GetSchedulerIdPrefixFromEntityName(string entityName);
    internal static EntityId GetEntityIdFromSchedulerId(string schedulerId);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(EntityId other);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(object obj);
}
internal static class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityMessageEventNames : object {
    public static string RequestMessageEventName { get; }
    public static string ReleaseMessageEventName { get; }
    public static string ContinueMessageEventName { get; }
    public static string get_RequestMessageEventName();
    public static string get_ReleaseMessageEventName();
    public static string get_ContinueMessageEventName();
    public static string ScheduledRequestMessageEventName(DateTime scheduledUtc);
    public static string ResponseMessageEventName(Guid requestId);
    public static bool IsRequestMessage(string eventName);
    public static bool IsReleaseMessage(string eventName);
}
public abstract class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityProxy : object {
    private IEntityProxyContext context;
    private EntityId entityId;
    protected EntityProxy(IEntityProxyContext context, EntityId entityId);
    protected internal Task CallAsync(string operationName, object operationInput);
    protected internal Task`1<TResult> CallAsync(string operationName, object operationInput);
    protected internal void Signal(string operationName, object operationInput);
}
internal static class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityProxyFactory : object {
    private static ModuleBuilder DynamicModuleBuilder;
    private static ConcurrentDictionary`2<Type, Type> TypeMappings;
    private static EntityProxyFactory();
    internal static TEntityInterface Create(IEntityProxyContext context, EntityId entityId);
    private static Type CreateProxyType(Type interfaceType);
    private static void ValidateInterface(Type interfaceType);
    private static void BuildConstructor(TypeBuilder typeBuilder);
    private static void BuildMethods(TypeBuilder typeBuilder, Type interfaceType);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityQuery : object {
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastOperationFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastOperationTo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FetchState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDeleted>k__BackingField;
    public string EntityName { get; public set; }
    public DateTime LastOperationFrom { get; public set; }
    public DateTime LastOperationTo { get; public set; }
    public int PageSize { get; public set; }
    public string ContinuationToken { get; public set; }
    public bool FetchState { get; public set; }
    public bool IncludeDeleted { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EntityName();
    [CompilerGeneratedAttribute]
public void set_EntityName(string value);
    [CompilerGeneratedAttribute]
public DateTime get_LastOperationFrom();
    [CompilerGeneratedAttribute]
public void set_LastOperationFrom(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastOperationTo();
    [CompilerGeneratedAttribute]
public void set_LastOperationTo(DateTime value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
    [CompilerGeneratedAttribute]
public bool get_FetchState();
    [CompilerGeneratedAttribute]
public void set_FetchState(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDeleted();
    [CompilerGeneratedAttribute]
public void set_IncludeDeleted(bool value);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityQueryResult : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<DurableEntityStatus> <Entities>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    public IEnumerable`1<DurableEntityStatus> Entities { get; public set; }
    public string ContinuationToken { get; public set; }
    internal EntityQueryResult(OrchestrationStatusQueryResult orchestrationResult, bool includeDeleted);
    [CompilerGeneratedAttribute]
public IEnumerable`1<DurableEntityStatus> get_Entities();
    [CompilerGeneratedAttribute]
public void set_Entities(IEnumerable`1<DurableEntityStatus> value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntitySchedulerException : Exception {
    public EntitySchedulerException(string errorMessage, Exception innerException);
    protected EntitySchedulerException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityStateResponse`1 : ValueType {
    [CompilerGeneratedAttribute]
private bool <EntityExists>k__BackingField;
    [CompilerGeneratedAttribute]
private T <EntityState>k__BackingField;
    public bool EntityExists { get; public set; }
    public T EntityState { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_EntityExists();
    [CompilerGeneratedAttribute]
public void set_EntityExists(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public T get_EntityState();
    [CompilerGeneratedAttribute]
public void set_EntityState(T value);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityStatus : object {
    [CompilerGeneratedAttribute]
private bool <EntityExists>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QueueSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LockedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityCurrentOperationStatus <CurrentOperation>k__BackingField;
    [JsonPropertyAttribute]
public bool EntityExists { get; public set; }
    [JsonPropertyAttribute]
public int QueueSize { get; public set; }
    [JsonPropertyAttribute]
public string LockedBy { get; public set; }
    [JsonPropertyAttribute]
public EntityCurrentOperationStatus CurrentOperation { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EntityExists();
    [CompilerGeneratedAttribute]
public void set_EntityExists(bool value);
    [CompilerGeneratedAttribute]
public int get_QueueSize();
    [CompilerGeneratedAttribute]
public void set_QueueSize(int value);
    [CompilerGeneratedAttribute]
public string get_LockedBy();
    [CompilerGeneratedAttribute]
public void set_LockedBy(string value);
    [CompilerGeneratedAttribute]
public EntityCurrentOperationStatus get_CurrentOperation();
    [CompilerGeneratedAttribute]
public void set_CurrentOperation(EntityCurrentOperationStatus value);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityTraceFlags : ValueType {
    public static char Rehydrated;
    public static char Suspended;
    public static char Resumed;
    public static char MitigationResumed;
    public static char TimedOut;
    public static char HostShutdown;
    public static char SignificantTimeElapsed;
    public static char BatchSizeLimit;
    public static char WaitForEvents;
    public static char DirectExecution;
    public static char InternalError;
    private StringBuilder traceFlags;
    public string TraceFlags { get; }
    public string get_TraceFlags();
    public void AddFlag(char flag);
}
[AttributeUsageAttribute("2048")]
[DebuggerDisplayAttribute("{EntityName} ({Version})")]
[BindingAttribute]
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityTriggerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    [AutoResolveAttribute]
public string EntityName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EntityName();
    [CompilerGeneratedAttribute]
public void set_EntityName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityTriggerAttributeBindingProvider : object {
    private DurableTaskExtension config;
    private string connectionName;
    public EntityTriggerAttributeBindingProvider(DurableTaskExtension config, string connectionName);
    public sealed virtual Task`1<ITriggerBinding> TryCreateAsync(TriggerBindingProviderContext context);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.ErrorSerializerSettingsFactory : object {
    private JsonSerializerSettings jsonSerializerSettings;
    internal ErrorSerializerSettingsFactory(JsonSerializerSettings jsonSerializerSettings);
    public sealed virtual JsonSerializerSettings CreateJsonSerializerSettings();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EventSourceAttribute]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.EtwEventSource : EventSource {
    public static EtwEventSource Instance;
    private static EtwEventSource();
    [EventAttribute("201")]
public void FunctionScheduled(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string Reason, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("202")]
public void FunctionStarting(string TaskHub, string AppName, string SlotName, string FunctionName, int TaskEventId, string InstanceId, string Input, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("203")]
public void FunctionAwaited(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("204")]
public void FunctionListening(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string Reason, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("205")]
public void ExternalEventRaised(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string EventName, string Input, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("206")]
public void FunctionCompleted(string TaskHub, string AppName, string SlotName, string FunctionName, int TaskEventId, string InstanceId, string Output, bool ContinuedAsNew, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("207")]
public void FunctionTerminated(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string Reason, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("208")]
public void FunctionFailed(string TaskHub, string AppName, string SlotName, string FunctionName, int TaskEventId, string InstanceId, string Reason, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("209")]
public void TimerExpired(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string Reason, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("210")]
public void EventGridNotificationCompleted(string TaskHub, string AppName, string SlotName, string FunctionName, FunctionState FunctionState, string InstanceId, string Details, int StatusCode, string Reason, FunctionType FunctionType, string ExtensionVersion, bool IsReplay, long LatencyMs);
    [EventAttribute("211")]
public void EventGridNotificationFailed(string TaskHub, string AppName, string SlotName, string FunctionName, FunctionState FunctionState, string InstanceId, string Details, int StatusCode, string Reason, FunctionType FunctionType, string ExtensionVersion, bool IsReplay, long LatencyMs);
    [EventAttribute("212")]
public void EventGridNotificationException(string TaskHub, string AppName, string SlotName, string FunctionName, FunctionState FunctionState, string Version, string InstanceId, string Details, string Reason, string exceptionMessage, FunctionType FunctionType, string ExtensionVersion, bool IsReplay, long LatencyMs);
    [EventAttribute("213")]
public void ExtensionInformationalEvent(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string Details, string ExtensionVersion);
    [EventAttribute("214")]
public void ExtensionWarningEvent(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string Details, string ExtensionVersion);
    [EventAttribute("215")]
public void ExternalEventSaved(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string EventName, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("216")]
public void FunctionRewound(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string Reason, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("217")]
public void EntityOperationQueued(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string OperationId, string OperationName, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("218")]
public void EntityResponseReceived(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string OperationId, string Result, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("219")]
public void EntityLockAcquired(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string RequestingInstanceId, string RequestingExecutionId, string RequestId, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("220")]
public void EntityLockReleased(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string RequestingInstance, string RequestId, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("221")]
public void OperationCompleted(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string OperationId, string OperationName, string Input, string Output, double Duration, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("222")]
public void OperationFailed(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string OperationId, string OperationName, string Input, string Exception, double Duration, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("223")]
public void ExtensionConfiguration(string TaskHub, string AppName, string SlotName, string Details, string ExtensionVersion);
    [EventAttribute("224")]
public void FunctionAborted(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string Reason, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("225")]
public void ProcessingOutOfProcPayload(string FunctionName, string TaskHub, string AppName, string SlotName, string InstanceId, string Details, string ExtensionVersion);
    [EventAttribute("226")]
public void EntityStateCreated(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string OperationName, string OperationId, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("227")]
public void EntityStateDeleted(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string OperationName, string OperationId, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("228")]
public void RetrievingToken(string TaskHub, string AppName, string SlotName, string Resource, string ExtensionVersion);
    [EventAttribute("229")]
public void TokenRetrievalFailed(string TaskHub, string AppName, string SlotName, string Resource, string Details, string ExtensionVersion);
    [EventAttribute("230")]
public void TokenRenewalFailed(string TaskHub, string AppName, string SlotName, string Resource, int Attempt, long DelayMs, string Details, string ExtensionVersion);
    [EventAttribute("231")]
public void SuspendingOrchestration(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string Reason, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("232")]
public void ResumingOrchestration(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string Reason, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("233")]
public void EntityBatchCompleted(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, int EventsReceived, int OperationsInBatch, int OperationsExecuted, string OutOfOrderMessages, int QueuedMessages, int UserStateSize, string Sources, string Destinations, string LockedBy, bool Suspended, string TraceFlags, string FunctionType, string ExtensionVersion, bool IsReplay);
    [EventAttribute("234")]
public void EntityBatchFailed(string TaskHub, string AppName, string SlotName, string FunctionName, string InstanceId, string TraceFlags, string Details, string FunctionType, string ExtensionVersion);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.EventGridLifeCycleNotificationHelper : object {
    private DurableTaskOptions options;
    private EndToEndTraceHelper traceHelper;
    private bool useTrace;
    private string eventGridKeyValue;
    private string eventGridTopicEndpoint;
    private OrchestrationRuntimeStatus[] eventGridPublishEventTypes;
    private static HttpClient httpClient;
    private static HttpMessageHandler httpMessageHandler;
    public string EventGridKeyValue { get; }
    public string EventGridTopicEndpoint { get; }
    public HttpMessageHandler HttpMessageHandler { get; public set; }
    public EventGridLifeCycleNotificationHelper(DurableTaskOptions options, INameResolver nameResolver, EndToEndTraceHelper traceHelper);
    public string get_EventGridKeyValue();
    public string get_EventGridTopicEndpoint();
    public HttpMessageHandler get_HttpMessageHandler();
    public void set_HttpMessageHandler(HttpMessageHandler value);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.EventGridLifeCycleNotificationHelper/<SendNotificationAsync>d__16")]
private Task SendNotificationAsync(EventGridEvent[] eventGridEventArray, string hubName, string functionName, string instanceId, string reason, FunctionState functionState);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.EventGridLifeCycleNotificationHelper/<OrchestratorStartingAsync>d__17")]
public sealed virtual Task OrchestratorStartingAsync(string hubName, string functionName, string instanceId, bool isReplay);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.EventGridLifeCycleNotificationHelper/<OrchestratorCompletedAsync>d__18")]
public sealed virtual Task OrchestratorCompletedAsync(string hubName, string functionName, string instanceId, bool continuedAsNew, bool isReplay);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.EventGridLifeCycleNotificationHelper/<OrchestratorFailedAsync>d__19")]
public sealed virtual Task OrchestratorFailedAsync(string hubName, string functionName, string instanceId, string reason, bool isReplay);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.EventGridLifeCycleNotificationHelper/<OrchestratorTerminatedAsync>d__20")]
public sealed virtual Task OrchestratorTerminatedAsync(string hubName, string functionName, string instanceId, string reason);
    private EventGridEvent[] CreateEventGridEvent(string hubName, string functionName, string instanceId, string reason, OrchestrationRuntimeStatus orchestrationRuntimeStatus);
    [CompilerGeneratedAttribute]
internal static OrchestrationRuntimeStatus <.ctor>g__ParseAndvalidateEvents|8_3(string event);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.EventGridNotificationOptions : object {
    [CompilerGeneratedAttribute]
private string <TopicEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeySettingName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PublishRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <PublishRetryInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <PublishRetryHttpStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PublishEventTypes>k__BackingField;
    public string TopicEndpoint { get; public set; }
    public string KeySettingName { get; public set; }
    public int PublishRetryCount { get; public set; }
    public TimeSpan PublishRetryInterval { get; public set; }
    public Int32[] PublishRetryHttpStatus { get; public set; }
    public String[] PublishEventTypes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TopicEndpoint();
    [CompilerGeneratedAttribute]
public void set_TopicEndpoint(string value);
    [CompilerGeneratedAttribute]
public string get_KeySettingName();
    [CompilerGeneratedAttribute]
public void set_KeySettingName(string value);
    [CompilerGeneratedAttribute]
public int get_PublishRetryCount();
    [CompilerGeneratedAttribute]
public void set_PublishRetryCount(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_PublishRetryInterval();
    [CompilerGeneratedAttribute]
public void set_PublishRetryInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public Int32[] get_PublishRetryHttpStatus();
    [CompilerGeneratedAttribute]
public void set_PublishRetryHttpStatus(Int32[] value);
    [CompilerGeneratedAttribute]
public String[] get_PublishEventTypes();
    [CompilerGeneratedAttribute]
public void set_PublishEventTypes(String[] value);
    internal void Validate();
    internal void AddToDebugString(StringBuilder builder);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.EventSourceListener : EventListener {
    private LinuxAppServiceLogger logger;
    private bool disableVerbose;
    private string durabilityProviderEventSourceName;
    private Guid extensionGuid;
    private EndToEndTraceHelper traceHelper;
    private List`1<EventSource> pendingEventSources;
    public EventSourceListener(LinuxAppServiceLogger logger, bool enableVerbose, EndToEndTraceHelper traceHelper, string durabilityProviderEventSourceName, Guid extensionGuid);
    protected virtual void OnEventSourceCreated(EventSource eventSource);
    protected virtual void OnEventWritten(EventWrittenEventArgs eventData);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__6_0(EventSource eventSource);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionFailedException : Exception {
    public FunctionFailedException(string message);
    public FunctionFailedException(string message, Exception innerException);
    internal FunctionFailedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionName : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public FunctionName(string name);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    public static bool op_Equality(FunctionName a, FunctionName b);
    public static bool op_Inequality(FunctionName a, FunctionName b);
    public sealed virtual bool Equals(FunctionName other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal enum Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionState : Enum {
    public int value__;
    public static FunctionState Scheduled;
    public static FunctionState Started;
    public static FunctionState Awaited;
    public static FunctionState Listening;
    public static FunctionState Completed;
    public static FunctionState Terminated;
    public static FunctionState Failed;
    public static FunctionState ExternalEventRaised;
    public static FunctionState ExternalEventDropped;
    public static FunctionState LockAcquired;
    public static FunctionState LockReleased;
    public static FunctionState TimerExpired;
    public static FunctionState Rewound;
    public static FunctionState EntityStateCreated;
    public static FunctionState EntityStateDeleted;
    public static FunctionState Suspended;
    public static FunctionState EntityBatch;
}
internal enum Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionType : Enum {
    public int value__;
    public static FunctionType Activity;
    public static FunctionType Orchestrator;
    public static FunctionType Entity;
}
internal static class Microsoft.Azure.WebJobs.Extensions.DurableTask.GuidManager : object {
    internal static string DnsNamespaceValue;
    internal static string UrlNamespaceValue;
    internal static string IsoOidNamespaceValue;
    internal static Guid CreateDeterministicGuid(string namespaceValue, string name);
    internal static Guid CreateDeterministicGuid(string namespaceValue, string name, DeterministicGuidVersion version);
    private static void SwapByteArrayValues(Byte[] byteArray);
    private static void SwapByteArrayElements(Byte[] byteArray, int left, int right);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.HostLifecycleService : object {
    internal static IApplicationLifetimeWrapper NoOp;
    private IApplicationLifetime appLifetime;
    public CancellationToken OnStarted { get; }
    public CancellationToken OnStopping { get; }
    public CancellationToken OnStopped { get; }
    public HostLifecycleService(IApplicationLifetime appLifetime);
    private static HostLifecycleService();
    public sealed virtual CancellationToken get_OnStarted();
    public sealed virtual CancellationToken get_OnStopping();
    public sealed virtual CancellationToken get_OnStopped();
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler : object {
    private static string InstancesControllerSegment;
    private static string OrchestratorsControllerSegment;
    private static string EntitiesControllerSegment;
    private static string AppLeaseMakePrimaryControllerSegment;
    private static string FunctionNameRouteParameter;
    private static string InstanceIdRouteParameter;
    private static string EntityNameRouteParameter;
    private static string EntityKeyRouteParameter;
    private static string OperationRouteParameter;
    private static string EventNameRouteParameter;
    private static string TaskHubParameter;
    private static string ConnectionParameter;
    private static string RaiseEventOperation;
    private static string TerminateOperation;
    private static string RewindOperation;
    private static string RestartOperation;
    private static string ShowHistoryParameter;
    private static string ShowHistoryOutputParameter;
    private static string ShowInputParameter;
    private static string FetchStateParameter;
    private static string InstanceIdPrefixParameter;
    private static string CreatedTimeFromParameter;
    private static string CreatedTimeToParameter;
    private static string RuntimeStatusParameter;
    private static string PageSizeParameter;
    private static string ReturnInternalServerErrorOnFailure;
    private static string LastOperationTimeFrom;
    private static string LastOperationTimeTo;
    private static string RestartWithNewInstanceId;
    private static string TimeoutParameter;
    private static string PollingInterval;
    private static string SuspendOperation;
    private static string ResumeOperation;
    private static string EmptyEntityKeySymbol;
    private static TemplateMatcher StartOrchestrationRoute;
    private static TemplateMatcher EntityRoute;
    private static TemplateMatcher InstancesRoute;
    private static TemplateMatcher InstanceRaiseEventRoute;
    private static TemplateMatcher AppLeaseMakePrimaryRoute;
    private ILogger logger;
    private MessagePayloadDataConverter messageDataConverter;
    private LocalHttpListener localHttpListener;
    private EndToEndTraceHelper traceHelper;
    private DurableTaskOptions durableTaskOptions;
    private DurableTaskExtension config;
    private Func`1<Uri> webhookUrlProvider;
    public HttpApiHandler(EndToEndTraceHelper traceHelper, MessagePayloadDataConverter messageDataConverter, DurableTaskOptions durableTaskOptions, ILogger logger);
    public HttpApiHandler(DurableTaskExtension config, ILogger logger);
    private static HttpApiHandler();
    public sealed virtual void Dispose();
    internal HttpResponseMessage CreateCheckStatusResponse(HttpRequestMessage request, string instanceId, DurableClientAttribute attribute, bool returnInternalServerErrorOnFailure);
    public void RegisterWebhookProvider(Func`1<Uri> webhookProvider);
    private static TemplateMatcher GetStartOrchestrationRoute();
    private static TemplateMatcher GetEntityRoute();
    private static RouteValueDictionary RouteValueDictionaryFromArray(KeyValuePair`2[] values);
    private static TemplateMatcher GetInstancesRoute();
    private static TemplateMatcher GetInstanceRaiseEventRoute();
    private static TemplateMatcher MakePrimaryRoute();
    internal HttpManagementPayload CreateHttpManagementPayload(string instanceId, string taskHub, string connectionName, bool returnInternalServerErrorOnFailure);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<WaitForCompletionOrCreateCheckStatusResponseAsync>d__58")]
internal Task`1<HttpResponseMessage> WaitForCompletionOrCreateCheckStatusResponseAsync(HttpRequestMessage request, string instanceId, DurableClientAttribute attribute, TimeSpan timeout, TimeSpan retryInterval, bool returnInternalServerErrorOnFailure);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleRequestAsync>d__59")]
public Task`1<HttpResponseMessage> HandleRequestAsync(HttpRequestMessage request);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleGetStatusRequestAsync>d__60")]
private Task`1<HttpResponseMessage> HandleGetStatusRequestAsync(HttpRequestMessage request);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleListEntitiesRequestAsync>d__61")]
private Task`1<HttpResponseMessage> HandleListEntitiesRequestAsync(HttpRequestMessage request, string entityName);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleDeleteHistoryByIdRequestAsync>d__62")]
private Task`1<HttpResponseMessage> HandleDeleteHistoryByIdRequestAsync(HttpRequestMessage request, string instanceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleDeleteHistoryWithFiltersRequestAsync>d__63")]
private Task`1<HttpResponseMessage> HandleDeleteHistoryWithFiltersRequestAsync(HttpRequestMessage request);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleGetStatusRequestAsync>d__64")]
private Task`1<HttpResponseMessage> HandleGetStatusRequestAsync(HttpRequestMessage request, string instanceId, Nullable`1<bool> returnInternalServerErrorOnFailure, IDurableOrchestrationClient existingClient);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleMakePrimaryRequestAsync>d__65")]
private Task`1<HttpResponseMessage> HandleMakePrimaryRequestAsync(HttpRequestMessage request);
    private static StatusResponsePayload ConvertFrom(DurableOrchestrationStatus status);
    private static bool TryGetIEnumerableQueryParameterValue(NameValueCollection queryStringNameValueCollection, string queryParameterName, IEnumerable`1& collection);
    private static bool TryGetStringQueryParameterValue(NameValueCollection queryStringNameValueCollection, string queryParameterName, String& stringValue);
    private static bool TryGetDateTimeQueryParameterValue(NameValueCollection queryStringNameValueCollection, string queryParameterName, DateTime& dateTimeValue);
    private static bool TryGetBooleanQueryParameterValue(NameValueCollection queryStringNameValueCollection, string queryParameterName, Boolean& boolValue);
    private static bool TryGetIntQueryParameterValue(NameValueCollection queryStringNameValueCollection, string queryParameterName, Int32& intValue);
    private static bool TryGetTimeSpanQueryParameterValue(NameValueCollection queryStringNameValueCollection, string queryParameterName, Nullable`1& timeSpanValue);
    private static bool IsCompletedStatus(OrchestrationRuntimeStatus status);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleTerminateInstanceRequestAsync>d__74")]
private Task`1<HttpResponseMessage> HandleTerminateInstanceRequestAsync(HttpRequestMessage request, string instanceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleSuspendInstanceRequestAsync>d__75")]
private Task`1<HttpResponseMessage> HandleSuspendInstanceRequestAsync(HttpRequestMessage request, string instanceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleResumeInstanceRequestAsync>d__76")]
private Task`1<HttpResponseMessage> HandleResumeInstanceRequestAsync(HttpRequestMessage request, string instanceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleStartOrchestratorRequestAsync>d__77")]
private Task`1<HttpResponseMessage> HandleStartOrchestratorRequestAsync(HttpRequestMessage request, string functionName, string instanceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleRestartInstanceRequestAsync>d__78")]
private Task`1<HttpResponseMessage> HandleRestartInstanceRequestAsync(HttpRequestMessage request, string instanceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleRewindInstanceRequestAsync>d__79")]
private Task`1<HttpResponseMessage> HandleRewindInstanceRequestAsync(HttpRequestMessage request, string instanceId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleRaiseEventRequestAsync>d__80")]
private Task`1<HttpResponseMessage> HandleRaiseEventRequestAsync(HttpRequestMessage request, string instanceId, string eventName);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandleGetEntityRequestAsync>d__81")]
private Task`1<HttpResponseMessage> HandleGetEntityRequestAsync(HttpRequestMessage request, EntityId entityId);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<HandlePostEntityOperationRequestAsync>d__82")]
private Task`1<HttpResponseMessage> HandlePostEntityOperationRequestAsync(HttpRequestMessage request, EntityId entityId);
    private IDurableClient GetClient(HttpRequestMessage request, DurableClientAttribute existingAttribute);
    protected virtual IDurableClient GetClient(DurableClientAttribute attribute);
    internal string GetBaseUrl();
    internal string GetUniversalQueryStrings();
    internal HttpCreationPayload GetInstanceCreationLinks();
    private HttpManagementPayload GetClientResponseLinks(HttpRequestMessage request, string instanceId, string taskHubName, string connectionName, bool returnInternalServerErrorOnFailure);
    private HttpResponseMessage CreateCheckStatusResponseMessage(HttpRequestMessage request, string instanceId, string statusQueryGetUri, string sendEventPostUri, string terminatePostUri, string purgeHistoryDeleteUri, string restartPostUri, string suspendPostUri, string resumePostUri);
    internal Uri GetWebhookUri();
    internal bool TryGetRpcBaseUrl(Uri& rpcBaseUrl);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<StartLocalHttpServerAsync>d__92")]
internal Task StartLocalHttpServerAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpApiHandler/<StopLocalHttpServerAsync>d__93")]
internal Task StopLocalHttpServerAsync();
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpCreationPayload : object {
    [CompilerGeneratedAttribute]
private string <CreateNewInstancePostUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreateAndWaitOnNewInstancePostUri>k__BackingField;
    [JsonPropertyAttribute("createNewInstancePostUri")]
internal string CreateNewInstancePostUri { get; internal set; }
    [JsonPropertyAttribute("createAndWaitOnNewInstancePostUri")]
internal string CreateAndWaitOnNewInstancePostUri { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_CreateNewInstancePostUri();
    [CompilerGeneratedAttribute]
internal void set_CreateNewInstancePostUri(string value);
    [CompilerGeneratedAttribute]
internal string get_CreateAndWaitOnNewInstancePostUri();
    [CompilerGeneratedAttribute]
internal void set_CreateAndWaitOnNewInstancePostUri(string value);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpHeadersConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    internal static IDictionary`2<string, StringValues> CreateCopy(IDictionary`2<string, StringValues> input);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpManagementPayload : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusQueryGetUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SendEventPostUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TerminatePostUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RewindPostUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PurgeHistoryDeleteUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RestartPostUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SuspendPostUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResumePostUri>k__BackingField;
    [JsonPropertyAttribute("id")]
public string Id { get; internal set; }
    [JsonPropertyAttribute("statusQueryGetUri")]
public string StatusQueryGetUri { get; internal set; }
    [JsonPropertyAttribute("sendEventPostUri")]
public string SendEventPostUri { get; internal set; }
    [JsonPropertyAttribute("terminatePostUri")]
public string TerminatePostUri { get; internal set; }
    [JsonPropertyAttribute("rewindPostUri")]
public string RewindPostUri { get; internal set; }
    [JsonPropertyAttribute("purgeHistoryDeleteUri")]
public string PurgeHistoryDeleteUri { get; internal set; }
    [JsonPropertyAttribute("restartPostUri")]
public string RestartPostUri { get; internal set; }
    [JsonPropertyAttribute("suspendPostUri")]
public string SuspendPostUri { get; internal set; }
    [JsonPropertyAttribute("resumePostUri")]
public string ResumePostUri { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_StatusQueryGetUri();
    [CompilerGeneratedAttribute]
internal void set_StatusQueryGetUri(string value);
    [CompilerGeneratedAttribute]
public string get_SendEventPostUri();
    [CompilerGeneratedAttribute]
internal void set_SendEventPostUri(string value);
    [CompilerGeneratedAttribute]
public string get_TerminatePostUri();
    [CompilerGeneratedAttribute]
internal void set_TerminatePostUri(string value);
    [CompilerGeneratedAttribute]
public string get_RewindPostUri();
    [CompilerGeneratedAttribute]
internal void set_RewindPostUri(string value);
    [CompilerGeneratedAttribute]
public string get_PurgeHistoryDeleteUri();
    [CompilerGeneratedAttribute]
internal void set_PurgeHistoryDeleteUri(string value);
    [CompilerGeneratedAttribute]
public string get_RestartPostUri();
    [CompilerGeneratedAttribute]
internal void set_RestartPostUri(string value);
    [CompilerGeneratedAttribute]
public string get_SuspendPostUri();
    [CompilerGeneratedAttribute]
internal void set_SuspendPostUri(string value);
    [CompilerGeneratedAttribute]
public string get_ResumePostUri();
    [CompilerGeneratedAttribute]
internal void set_ResumePostUri(string value);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpOptions : object {
    internal static string HttpTaskActivityReservedName;
    [CompilerGeneratedAttribute]
private int <DefaultAsyncRequestSleepTimeMilliseconds>k__BackingField;
    public int DefaultAsyncRequestSleepTimeMilliseconds { get; public set; }
    [CompilerGeneratedAttribute]
public int get_DefaultAsyncRequestSleepTimeMilliseconds();
    [CompilerGeneratedAttribute]
public void set_DefaultAsyncRequestSleepTimeMilliseconds(int value);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpRequestMessageExtensions : object {
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode);
    [ExtensionAttribute]
public static HttpResponseMessage CreateResponse(HttpRequestMessage request, HttpStatusCode statusCode, T value);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, string message);
    [ExtensionAttribute]
public static HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, HttpStatusCode statusCode, string message, Exception e);
    [ExtensionAttribute]
public static NameValueCollection GetQueryNameValuePairs(HttpRequestMessage request);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpRetryOptions : object {
    private RetryOptions coreRetryOptions;
    private static TimeSpan DefaultMaxRetryinterval;
    [CompilerGeneratedAttribute]
private IList`1<HttpStatusCode> <StatusCodesToRetry>k__BackingField;
    public TimeSpan FirstRetryInterval { get; public set; }
    public TimeSpan MaxRetryInterval { get; public set; }
    public double BackoffCoefficient { get; public set; }
    public TimeSpan RetryTimeout { get; public set; }
    public int MaxNumberOfAttempts { get; public set; }
    public IList`1<HttpStatusCode> StatusCodesToRetry { get; public set; }
    public HttpRetryOptions(TimeSpan firstRetryInterval, int maxNumberOfAttempts);
    private static HttpRetryOptions();
    public TimeSpan get_FirstRetryInterval();
    public void set_FirstRetryInterval(TimeSpan value);
    public TimeSpan get_MaxRetryInterval();
    public void set_MaxRetryInterval(TimeSpan value);
    public double get_BackoffCoefficient();
    public void set_BackoffCoefficient(double value);
    public TimeSpan get_RetryTimeout();
    public void set_RetryTimeout(TimeSpan value);
    public int get_MaxNumberOfAttempts();
    public void set_MaxNumberOfAttempts(int value);
    [CompilerGeneratedAttribute]
public IList`1<HttpStatusCode> get_StatusCodesToRetry();
    [CompilerGeneratedAttribute]
public void set_StatusCodesToRetry(IList`1<HttpStatusCode> value);
    internal RetryOptions GetRetryOptions();
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IApplicationLifetimeWrapper {
    public CancellationToken OnStarted { get; }
    public CancellationToken OnStopping { get; }
    public CancellationToken OnStopped { get; }
    public abstract virtual CancellationToken get_OnStarted();
    public abstract virtual CancellationToken get_OnStopping();
    public abstract virtual CancellationToken get_OnStopped();
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IConnectionInfoResolver {
    public abstract virtual IConfigurationSection Resolve(string name);
}
[ObsoleteAttribute("Please use IConnectionInfoResolver instead.")]
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IConnectionStringResolver {
    public abstract virtual string Resolve(string connectionStringName);
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurabilityProviderFactory {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual DurabilityProvider GetDurabilityProvider();
    public abstract virtual DurabilityProvider GetDurabilityProvider(DurableClientAttribute attribute);
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableActivityContext {
    public string Name { get; }
    public string InstanceId { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_InstanceId();
    public abstract virtual T GetInput();
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableClient {
    public string TaskHubName { get; }
    public abstract virtual string get_TaskHubName();
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityClient {
    public string TaskHubName { get; }
    public abstract virtual string get_TaskHubName();
    public abstract virtual Task SignalEntityAsync(EntityId entityId, string operationName, object operationInput, string taskHubName, string connectionName);
    public abstract virtual Task SignalEntityAsync(EntityId entityId, DateTime scheduledTimeUtc, string operationName, object operationInput, string taskHubName, string connectionName);
    public abstract virtual Task SignalEntityAsync(string entityKey, Action`1<TEntityInterface> operation);
    public abstract virtual Task SignalEntityAsync(string entityKey, DateTime scheduledTimeUtc, Action`1<TEntityInterface> operation);
    public abstract virtual Task SignalEntityAsync(EntityId entityId, Action`1<TEntityInterface> operation);
    public abstract virtual Task SignalEntityAsync(EntityId entityId, DateTime scheduledTimeUtc, Action`1<TEntityInterface> operation);
    public abstract virtual Task`1<EntityStateResponse`1<T>> ReadEntityStateAsync(EntityId entityId, string taskHubName, string connectionName);
    public abstract virtual Task`1<EntityQueryResult> ListEntitiesAsync(EntityQuery query, CancellationToken cancellationToken);
    public abstract virtual Task`1<CleanEntityStorageResult> CleanEntityStorageAsync(bool removeEmptyEntities, bool releaseOrphanedLocks, CancellationToken cancellationToken);
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext {
    public string EntityName { get; }
    public string EntityKey { get; }
    public EntityId EntityId { get; }
    public string OperationName { get; }
    public FunctionBindingContext FunctionBindingContext { get; public set; }
    public bool HasState { get; }
    public int BatchSize { get; }
    public int BatchPosition { get; }
    public abstract virtual string get_EntityName();
    public abstract virtual string get_EntityKey();
    public abstract virtual EntityId get_EntityId();
    public abstract virtual string get_OperationName();
    public abstract virtual FunctionBindingContext get_FunctionBindingContext();
    public abstract virtual void set_FunctionBindingContext(FunctionBindingContext value);
    public abstract virtual bool get_HasState();
    public abstract virtual int get_BatchSize();
    public abstract virtual int get_BatchPosition();
    public abstract virtual TState GetState(Func`1<TState> initializer);
    public abstract virtual void SetState(object state);
    public abstract virtual void DeleteState();
    public abstract virtual TInput GetInput();
    public abstract virtual object GetInput(Type inputType);
    public abstract virtual void Return(object result);
    public abstract virtual void SignalEntity(EntityId entity, string operationName, object operationInput);
    public abstract virtual void SignalEntity(EntityId entity, DateTime scheduledTimeUtc, string operationName, object operationInput);
    public abstract virtual void SignalEntity(string entityKey, Action`1<TEntityInterface> operation);
    public abstract virtual void SignalEntity(string entityKey, DateTime scheduledTimeUtc, Action`1<TEntityInterface> operation);
    public abstract virtual void SignalEntity(EntityId entityId, Action`1<TEntityInterface> operation);
    public abstract virtual void SignalEntity(EntityId entityId, DateTime scheduledTimeUtc, Action`1<TEntityInterface> operation);
    public abstract virtual string StartNewOrchestration(string functionName, object input, string instanceId);
    public abstract virtual Task DispatchAsync(Object[] constructorParameters);
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableHttpMessageHandlerFactory {
    public abstract virtual HttpMessageHandler CreateHttpMessageHandler();
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient {
    public string TaskHubName { get; }
    public abstract virtual string get_TaskHubName();
    public abstract virtual HttpResponseMessage CreateCheckStatusResponse(HttpRequestMessage request, string instanceId, bool returnInternalServerErrorOnFailure);
    public abstract virtual IActionResult CreateCheckStatusResponse(HttpRequest request, string instanceId, bool returnInternalServerErrorOnFailure);
    public abstract virtual HttpManagementPayload CreateHttpManagementPayload(string instanceId);
    public abstract virtual Task`1<HttpResponseMessage> WaitForCompletionOrCreateCheckStatusResponseAsync(HttpRequestMessage request, string instanceId, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryInterval, bool returnInternalServerErrorOnFailure);
    public abstract virtual Task`1<IActionResult> WaitForCompletionOrCreateCheckStatusResponseAsync(HttpRequest request, string instanceId, Nullable`1<TimeSpan> timeout, Nullable`1<TimeSpan> retryInterval, bool returnInternalServerErrorOnFailure);
    public abstract virtual Task`1<string> StartNewAsync(string orchestratorFunctionName, string instanceId);
    public abstract virtual Task`1<string> StartNewAsync(string orchestratorFunctionName, T input);
    public abstract virtual Task`1<string> StartNewAsync(string orchestratorFunctionName, string instanceId, T input);
    public abstract virtual Task RaiseEventAsync(string instanceId, string eventName, object eventData);
    public abstract virtual Task RaiseEventAsync(string taskHubName, string instanceId, string eventName, object eventData, string connectionName);
    public abstract virtual Task TerminateAsync(string instanceId, string reason);
    public abstract virtual Task SuspendAsync(string instanceId, string reason);
    public abstract virtual Task ResumeAsync(string instanceId, string reason);
    [ObsoleteAttribute("This feature is in preview.")]
public abstract virtual Task RewindAsync(string instanceId, string reason);
    public abstract virtual Task`1<DurableOrchestrationStatus> GetStatusAsync(string instanceId, bool showHistory, bool showHistoryOutput, bool showInput);
    public abstract virtual Task`1<IList`1<DurableOrchestrationStatus>> GetStatusAsync(IEnumerable`1<string> instanceIds, bool showHistory, bool showHistoryOutput, bool showInput);
    [ObsoleteAttribute]
public abstract virtual Task`1<IList`1<DurableOrchestrationStatus>> GetStatusAsync(Nullable`1<DateTime> createdTimeFrom, Nullable`1<DateTime> createdTimeTo, IEnumerable`1<OrchestrationRuntimeStatus> runtimeStatus, CancellationToken cancellationToken);
    public abstract virtual Task`1<PurgeHistoryResult> PurgeInstanceHistoryAsync(string instanceId);
    public abstract virtual Task`1<PurgeHistoryResult> PurgeInstanceHistoryAsync(IEnumerable`1<string> instanceIds);
    public abstract virtual Task`1<PurgeHistoryResult> PurgeInstanceHistoryAsync(DateTime createdTimeFrom, Nullable`1<DateTime> createdTimeTo, IEnumerable`1<OrchestrationStatus> runtimeStatus);
    [ObsoleteAttribute]
public abstract virtual Task`1<OrchestrationStatusQueryResult> GetStatusAsync(OrchestrationStatusQueryCondition condition, CancellationToken cancellationToken);
    public abstract virtual Task`1<OrchestrationStatusQueryResult> ListInstancesAsync(OrchestrationStatusQueryCondition condition, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> RestartAsync(string instanceId, bool restartWithNewInstanceId);
    public abstract virtual Task MakeCurrentAppPrimaryAsync();
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext {
    public string Name { get; }
    public string InstanceId { get; }
    public string ParentInstanceId { get; }
    public DateTime CurrentUtcDateTime { get; }
    public bool IsReplaying { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_InstanceId();
    public abstract virtual string get_ParentInstanceId();
    public abstract virtual DateTime get_CurrentUtcDateTime();
    public abstract virtual bool get_IsReplaying();
    public abstract virtual TInput GetInput();
    public abstract virtual void SetOutput(object output);
    public abstract virtual void ContinueAsNew(object input, bool preserveUnprocessedEvents);
    public abstract virtual void SetCustomStatus(object customStatusObject);
    public abstract virtual Task`1<DurableHttpResponse> CallHttpAsync(HttpMethod method, Uri uri, string content, HttpRetryOptions retryOptions);
    public abstract virtual Task`1<DurableHttpResponse> CallHttpAsync(DurableHttpRequest req);
    public abstract virtual Task`1<TResult> CallEntityAsync(EntityId entityId, string operationName);
    public abstract virtual Task CallEntityAsync(EntityId entityId, string operationName);
    public abstract virtual Task`1<TResult> CallEntityAsync(EntityId entityId, string operationName, object operationInput);
    public abstract virtual Task CallEntityAsync(EntityId entityId, string operationName, object operationInput);
    public abstract virtual Task`1<TResult> CallSubOrchestratorAsync(string functionName, object input);
    public abstract virtual Task`1<TResult> CallSubOrchestratorAsync(string functionName, string instanceId, object input);
    public abstract virtual Task CallSubOrchestratorAsync(string functionName, object input);
    public abstract virtual Task CallSubOrchestratorAsync(string functionName, string instanceId, object input);
    public abstract virtual Task`1<TResult> CallSubOrchestratorWithRetryAsync(string functionName, RetryOptions retryOptions, string instanceId, object input);
    public abstract virtual Task CallSubOrchestratorWithRetryAsync(string functionName, RetryOptions retryOptions, object input);
    public abstract virtual Task CallSubOrchestratorWithRetryAsync(string functionName, RetryOptions retryOptions, string instanceId, object input);
    public abstract virtual Task`1<TResult> CallSubOrchestratorWithRetryAsync(string functionName, RetryOptions retryOptions, object input);
    public abstract virtual Task`1<T> CreateTimer(DateTime fireAt, T state, CancellationToken cancelToken);
    public abstract virtual Task CreateTimer(DateTime fireAt, CancellationToken cancelToken);
    public abstract virtual Task`1<T> WaitForExternalEvent(string name);
    public abstract virtual Task WaitForExternalEvent(string name);
    public abstract virtual Task WaitForExternalEvent(string name, TimeSpan timeout, CancellationToken cancelToken);
    public abstract virtual Task`1<T> WaitForExternalEvent(string name, TimeSpan timeout, CancellationToken cancelToken);
    public abstract virtual Task`1<T> WaitForExternalEvent(string name, TimeSpan timeout, T defaultValue, CancellationToken cancelToken);
    public abstract virtual Task`1<IDisposable> LockAsync(EntityId[] entities);
    public abstract virtual bool IsLocked(IReadOnlyList`1& ownedLocks);
    public abstract virtual Guid NewGuid();
    public abstract virtual Task`1<TResult> CallActivityAsync(string functionName, object input);
    public abstract virtual Task CallActivityAsync(string functionName, object input);
    public abstract virtual Task`1<TResult> CallActivityWithRetryAsync(string functionName, RetryOptions retryOptions, object input);
    public abstract virtual Task CallActivityWithRetryAsync(string functionName, RetryOptions retryOptions, object input);
    public abstract virtual void SignalEntity(EntityId entity, string operationName, object operationInput);
    public abstract virtual void SignalEntity(EntityId entity, DateTime scheduledTimeUtc, string operationName, object operationInput);
    public abstract virtual string StartNewOrchestration(string functionName, object input, string instanceId);
    public abstract virtual TEntityInterface CreateEntityProxy(string entityKey);
    public abstract virtual TEntityInterface CreateEntityProxy(EntityId entityId);
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IEntityProxyContext {
    public abstract virtual Task CallAsync(EntityId entityId, string operationName, object operationInput);
    public abstract virtual Task`1<TResult> CallAsync(EntityId entityId, string operationName, object operationInput);
    public abstract virtual void Signal(EntityId entityId, string operationName, object operationInput);
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IErrorSerializerSettingsFactory {
    public abstract virtual JsonSerializerSettings CreateJsonSerializerSettings();
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.ILifeCycleNotificationHelper {
    public abstract virtual Task OrchestratorStartingAsync(string hubName, string functionName, string instanceId, bool isReplay);
    public abstract virtual Task OrchestratorCompletedAsync(string hubName, string functionName, string instanceId, bool continuedAsNew, bool isReplay);
    public abstract virtual Task OrchestratorFailedAsync(string hubName, string functionName, string instanceId, string reason, bool isReplay);
    public abstract virtual Task OrchestratorTerminatedAsync(string hubName, string functionName, string instanceId, string reason);
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IMessageSerializerSettingsFactory {
    public abstract virtual JsonSerializerSettings CreateJsonSerializerSettings();
}
[ObsoleteAttribute]
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IPlatformInformation {
    public abstract virtual bool IsInConsumptionPlan();
    public abstract virtual OperatingSystem GetOperatingSystem();
    public abstract virtual WorkerRuntimeType GetWorkerRuntimeType();
    public abstract virtual string GetLinuxTenant();
    public abstract virtual string GetLinuxStampName();
    public abstract virtual string GetContainerName();
    public abstract virtual bool UsesExternalPowerShellSDK();
}
internal interface Microsoft.Azure.WebJobs.Extensions.DurableTask.IStorageAccountProvider {
    public abstract virtual StorageAccountDetails GetStorageAccountDetails(string connectionName);
}
public interface Microsoft.Azure.WebJobs.Extensions.DurableTask.ITokenSource {
    public abstract virtual Task`1<string> GetTokenAsync();
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.LinuxAppServiceFileLogger : object {
    private static SemaphoreSlim Semaphore;
    private string logFileName;
    private string logFileDirectory;
    private string logFilePath;
    private string archiveFilePath;
    private BlockingCollection`1<string> buffer;
    private List`1<string> currentBatch;
    private CancellationTokenSource cancellationTokenSource;
    private Task outputTask;
    [CompilerGeneratedAttribute]
private int <MaxFileSizeMb>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FlushFrequencySeconds>k__BackingField;
    private int MaxFileSizeMb { get; private set; }
    private int FlushFrequencySeconds { get; private set; }
    public LinuxAppServiceFileLogger(string logFileName, string logFileDirectory, bool startOnCreate);
    private static LinuxAppServiceFileLogger();
    [CompilerGeneratedAttribute]
private int get_MaxFileSizeMb();
    [CompilerGeneratedAttribute]
private void set_MaxFileSizeMb(int value);
    [CompilerGeneratedAttribute]
private int get_FlushFrequencySeconds();
    [CompilerGeneratedAttribute]
private void set_FlushFrequencySeconds(int value);
    public virtual void Log(string message);
    private void Start();
    public void Stop(TimeSpan timeSpan);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.LinuxAppServiceFileLogger/<ProcessLogQueue>d__21")]
private Task ProcessLogQueue(object state);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.LinuxAppServiceFileLogger/<InternalProcessLogQueue>d__22")]
internal Task InternalProcessLogQueue();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.LinuxAppServiceFileLogger/<WriteLogs>d__23")]
private Task WriteLogs(IEnumerable`1<string> currentBatch);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.LinuxAppServiceFileLogger/<AppendLogs>d__24")]
private Task AppendLogs(string filePath, IEnumerable`1<string> logs);
    public sealed virtual void Dispose();
    private void RollFiles();
    private static int rename(string oldPath, string newPath);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.LinuxAppServiceLogger : object {
    private static string ConsolePrefix;
    internal static string LoggingPath;
    private string roleInstance;
    private string tenant;
    private int procID;
    private string stamp;
    private string primaryStamp;
    private bool writeToConsole;
    private LinuxAppServiceFileLogger fileLogger;
    public LinuxAppServiceLogger(bool writeToConsole, string containerName, string tenant, string stampName);
    private static LinuxAppServiceLogger();
    private string GenerateLogStr(EventWrittenEventArgs eventData, Guid extensionGuid);
    public void Log(EventWrittenEventArgs eventData, Guid extensionGuid);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Azure.WebJobs.Extensions.DurableTask.Listener.FunctionExecutionHelper : object {
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.Listener.FunctionExecutionHelper/<ExecuteFunctionInOrchestrationMiddleware>d__0")]
public static Task`1<WrappedFunctionResult> ExecuteFunctionInOrchestrationMiddleware(ITriggeredFunctionExecutor executor, TriggeredFunctionData triggerInput, TaskCommonShim shim, DurableCommonContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.Listener.FunctionExecutionHelper/<ExecuteActivityFunction>d__1")]
public static Task`1<WrappedFunctionResult> ExecuteActivityFunction(ITriggeredFunctionExecutor executor, TriggeredFunctionData triggerInput, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.Listener.TaskNonexistentActivityShim : TaskActivity {
    private DurableTaskExtension config;
    private string activityName;
    public TaskNonexistentActivityShim(DurableTaskExtension config, string activityName);
    public virtual string Run(TaskContext context, string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.Listener.WrappedFunctionResult : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionResultStatus <ExecutionStatus>k__BackingField;
    [NullableAttribute("2")]
internal Exception Exception { get; }
    internal FunctionResultStatus ExecutionStatus { get; }
    [NullableContextAttribute("2")]
private WrappedFunctionResult(FunctionResultStatus status, Exception ex);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Exception get_Exception();
    [CompilerGeneratedAttribute]
internal FunctionResultStatus get_ExecutionStatus();
    public static WrappedFunctionResult Success();
    public static WrappedFunctionResult FunctionRuntimeFailure(Exception ex);
    public static WrappedFunctionResult UserCodeFailure(Exception ex);
    public static WrappedFunctionResult FunctionTimeoutFailure(Exception ex);
    public static WrappedFunctionResult FunctionHostStoppingFailure(Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.LocalGrpcListener : object {
    private static int DefaultPort;
    private static int MinPort;
    private static int MaxPort;
    private DurableTaskExtension extension;
    private Random portGenerator;
    private HashSet`1<int> attemptedPorts;
    [NullableAttribute("2")]
private Server grpcServer;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ListenAddress>k__BackingField;
    [NullableAttribute("2")]
public string ListenAddress { get; private set; }
    public LocalGrpcListener(DurableTaskExtension extension);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ListenAddress();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ListenAddress(string value);
    public sealed virtual Task StartAsync(CancellationToken cancelToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.LocalGrpcListener/<StopAsync>d__13")]
public sealed virtual Task StopAsync(CancellationToken cancelToken);
    private int GetRandomPort();
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.LocalHttpListener : object {
    private static int DefaultPort;
    private static int MinPort;
    private static int MaxPort;
    private Func`2<HttpRequestMessage, Task`1<HttpResponseMessage>> handler;
    private EndToEndTraceHelper traceHelper;
    private DurableTaskOptions durableTaskOptions;
    private Random portGenerator;
    private HashSet`1<int> attemptedPorts;
    private IWebHost localWebHost;
    [CompilerGeneratedAttribute]
private Uri <InternalRpcUri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsListening>k__BackingField;
    public Uri InternalRpcUri { get; private set; }
    public bool IsListening { get; private set; }
    public LocalHttpListener(EndToEndTraceHelper traceHelper, DurableTaskOptions durableTaskOptions, Func`2<HttpRequestMessage, Task`1<HttpResponseMessage>> handler);
    [CompilerGeneratedAttribute]
public Uri get_InternalRpcUri();
    [CompilerGeneratedAttribute]
private void set_InternalRpcUri(Uri value);
    [CompilerGeneratedAttribute]
public bool get_IsListening();
    [CompilerGeneratedAttribute]
private void set_IsListening(bool value);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.LocalHttpListener/<StartAsync>d__19")]
public Task StartAsync();
    private int GetRandomPort();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.LocalHttpListener/<StopAsync>d__21")]
public Task StopAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.LocalHttpListener/<HandleRequestAsync>d__22")]
private Task HandleRequestAsync(HttpContext context);
    private static HttpRequestMessage GetRequest(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.LocalHttpListener/<SetResponseAsync>d__24")]
private static Task SetResponseAsync(HttpContext context, HttpResponseMessage responseMessage);
    [CompilerGeneratedAttribute]
private void <StartAsync>b__19_1(IApplicationBuilder a);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.LockingRulesViolationException : Exception {
    internal LockingRulesViolationException(string message);
    internal LockingRulesViolationException(string message, Exception innerException);
    internal LockingRulesViolationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.ManagedIdentityOptions : object {
    [CompilerGeneratedAttribute]
private Uri <AuthorityHost>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    [JsonPropertyAttribute("authorityhost")]
public Uri AuthorityHost { get; public set; }
    [JsonPropertyAttribute("tenantid")]
public string TenantId { get; public set; }
    public ManagedIdentityOptions(Uri authorityHost, string tenantId);
    [CompilerGeneratedAttribute]
public Uri get_AuthorityHost();
    [CompilerGeneratedAttribute]
public void set_AuthorityHost(Uri value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(string value);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.ManagedIdentityTokenSource : object {
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private ManagedIdentityOptions <Options>k__BackingField;
    [JsonPropertyAttribute("resource")]
public string Resource { get; }
    [JsonPropertyAttribute("options")]
public ManagedIdentityOptions Options { get; }
    public ManagedIdentityTokenSource(string resource, ManagedIdentityOptions options);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public ManagedIdentityOptions get_Options();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.ManagedIdentityTokenSource/<GetTokenAsync>d__7")]
public sealed virtual Task`1<string> GetTokenAsync();
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.MessagePayloadDataConverter : JsonDataConverter {
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <JsonSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializer <JsonSerializer>k__BackingField;
    public bool IsDefault { get; }
    internal JsonSerializerSettings JsonSettings { get; }
    internal JsonSerializer JsonSerializer { get; }
    public MessagePayloadDataConverter(JsonSerializerSettings settings, bool isDefault);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
internal JsonSerializerSettings get_JsonSettings();
    [CompilerGeneratedAttribute]
internal JsonSerializer get_JsonSerializer();
    public virtual string Serialize(object value);
    public string Serialize(object value, int maxSizeInKB);
    public static JToken ConvertToJToken(string input);
    public static JArray ConvertToJArray(string input);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.MessageSerializerSettingsFactory : object {
    private JsonSerializerSettings jsonSerializerSettings;
    internal MessageSerializerSettingsFactory(JsonSerializerSettings jsonSerializerSettings);
    public sealed virtual JsonSerializerSettings CreateJsonSerializerSettings();
}
[JsonObjectAttribute]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.MessageSorter : object {
    private static TimeSpan MinIntervalBetweenCollections;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, DateTime> <LastSentToInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, ReceiveBuffer> <ReceivedFromInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ReceiveHorizon>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <SendHorizon>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NumMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NumSources>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NumDestinations>k__BackingField;
    [JsonPropertyAttribute]
public Dictionary`2<string, DateTime> LastSentToInstance { get; public set; }
    [JsonPropertyAttribute]
public Dictionary`2<string, ReceiveBuffer> ReceivedFromInstance { get; public set; }
    [JsonPropertyAttribute]
public DateTime ReceiveHorizon { get; public set; }
    [JsonPropertyAttribute]
public DateTime SendHorizon { get; public set; }
    [JsonIgnoreAttribute]
public Nullable`1<int> NumMessages { get; public set; }
    [JsonIgnoreAttribute]
public Nullable`1<int> NumSources { get; public set; }
    [JsonIgnoreAttribute]
public Nullable`1<int> NumDestinations { get; public set; }
    internal int NumberBufferedRequests { get; }
    private static MessageSorter();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, DateTime> get_LastSentToInstance();
    [CompilerGeneratedAttribute]
public void set_LastSentToInstance(Dictionary`2<string, DateTime> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ReceiveBuffer> get_ReceivedFromInstance();
    [CompilerGeneratedAttribute]
public void set_ReceivedFromInstance(Dictionary`2<string, ReceiveBuffer> value);
    [CompilerGeneratedAttribute]
public DateTime get_ReceiveHorizon();
    [CompilerGeneratedAttribute]
public void set_ReceiveHorizon(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_SendHorizon();
    [CompilerGeneratedAttribute]
public void set_SendHorizon(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumMessages();
    [CompilerGeneratedAttribute]
public void set_NumMessages(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumSources();
    [CompilerGeneratedAttribute]
public void set_NumSources(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumDestinations();
    [CompilerGeneratedAttribute]
public void set_NumDestinations(Nullable`1<int> value);
    internal int get_NumberBufferedRequests();
    public void LabelOutgoingMessage(RequestMessage message, string destination, DateTime now, TimeSpan reorderWindow);
    [IteratorStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.MessageSorter/<ReceiveInOrder>d__32")]
public IEnumerable`1<RequestMessage> ReceiveInOrder(RequestMessage message, TimeSpan reorderWindow);
    private bool TryDeliverNextMessage(ReceiveBuffer buffer, RequestMessage& message);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.NotificationOptions : object {
    [CompilerGeneratedAttribute]
private EventGridNotificationOptions <EventGrid>k__BackingField;
    public EventGridNotificationOptions EventGrid { get; public set; }
    [CompilerGeneratedAttribute]
public EventGridNotificationOptions get_EventGrid();
    [CompilerGeneratedAttribute]
public void set_EventGrid(EventGridNotificationOptions value);
    internal void Validate();
    internal void AddToDebugString(StringBuilder builder);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.NullLifeCycleNotificationHelper : object {
    public sealed virtual Task OrchestratorStartingAsync(string hubName, string functionName, string instanceId, bool isReplay);
    public sealed virtual Task OrchestratorCompletedAsync(string hubName, string functionName, string instanceId, bool continuedAsNew, bool isReplay);
    public sealed virtual Task OrchestratorFailedAsync(string hubName, string functionName, string instanceId, string reason, bool isReplay);
    public sealed virtual Task OrchestratorTerminatedAsync(string hubName, string functionName, string instanceId, string reason);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.ObjectValueProvider : object {
    private object value;
    private Task`1<object> valueAsTask;
    private Type valueType;
    public Type Type { get; }
    public ObjectValueProvider(object value, Type valueType);
    public sealed virtual Type get_Type();
    public sealed virtual Task`1<object> GetValueAsync();
    public sealed virtual string ToInvokeString();
}
public enum Microsoft.Azure.WebJobs.Extensions.DurableTask.OperatingSystem : Enum {
    public int value__;
    public static OperatingSystem Linux;
    public static OperatingSystem Windows;
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.OperationErrorException : Exception {
    public OperationErrorException(string errorMessage);
    protected OperationErrorException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.Options.AzureStorageAccountOptions : object {
    public static string DefaultEndpointSuffix;
    [CompilerGeneratedAttribute]
private string <AccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BlobServiceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <QueueServiceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <TableServiceUri>k__BackingField;
    public string AccountName { get; public set; }
    public Uri BlobServiceUri { get; public set; }
    public Uri QueueServiceUri { get; public set; }
    public Uri TableServiceUri { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccountName();
    [CompilerGeneratedAttribute]
public void set_AccountName(string value);
    [CompilerGeneratedAttribute]
public Uri get_BlobServiceUri();
    [CompilerGeneratedAttribute]
public void set_BlobServiceUri(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_QueueServiceUri();
    [CompilerGeneratedAttribute]
public void set_QueueServiceUri(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_TableServiceUri();
    [CompilerGeneratedAttribute]
public void set_TableServiceUri(Uri value);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.Options.DurableClientOptions : object {
    [CompilerGeneratedAttribute]
private string <ConnectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TaskHub>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExternalClient>k__BackingField;
    public string ConnectionName { get; public set; }
    public string TaskHub { get; public set; }
    public bool IsExternalClient { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConnectionName();
    [CompilerGeneratedAttribute]
public void set_ConnectionName(string value);
    [CompilerGeneratedAttribute]
public string get_TaskHub();
    [CompilerGeneratedAttribute]
public void set_TaskHub(string value);
    [CompilerGeneratedAttribute]
public bool get_IsExternalClient();
    [CompilerGeneratedAttribute]
public void set_IsExternalClient(bool value);
}
public enum Microsoft.Azure.WebJobs.Extensions.DurableTask.Options.DurableDistributedTracingVersion : Enum {
    public int value__;
    public static DurableDistributedTracingVersion None;
    public static DurableDistributedTracingVersion V1;
    public static DurableDistributedTracingVersion V2;
}
[AttributeUsageAttribute("2048")]
[BindingAttribute]
[ObsoleteAttribute("OrchestrationClientAttribute is obsolete. Use DurableClientAttribute instead.")]
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationClientAttribute : DurableClientAttribute {
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationContextProxy : object {
    private IDurableOrchestrationContext context;
    private Nullable`1<DateTime> scheduledTimeForSignal;
    internal OrchestrationContextProxy(IDurableOrchestrationContext context);
    internal OrchestrationContextProxy(IDurableOrchestrationContext context, DateTime scheduledTimeForSignal);
    public sealed virtual Task CallAsync(EntityId entityId, string operationName, object operationInput);
    public sealed virtual Task`1<TResult> CallAsync(EntityId entityId, string operationName, object operationInput);
    public sealed virtual void Signal(EntityId entityId, string operationName, object operationInput);
}
public enum Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationRuntimeStatus : Enum {
    public int value__;
    public static OrchestrationRuntimeStatus Unknown;
    public static OrchestrationRuntimeStatus Running;
    public static OrchestrationRuntimeStatus Completed;
    public static OrchestrationRuntimeStatus ContinuedAsNew;
    public static OrchestrationRuntimeStatus Failed;
    public static OrchestrationRuntimeStatus Canceled;
    public static OrchestrationRuntimeStatus Terminated;
    public static OrchestrationRuntimeStatus Pending;
    public static OrchestrationRuntimeStatus Suspended;
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryCondition : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<OrchestrationRuntimeStatus> <RuntimeStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedTimeFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedTimeTo>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <TaskHubNames>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceIdPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInput>k__BackingField;
    public IEnumerable`1<OrchestrationRuntimeStatus> RuntimeStatus { get; public set; }
    public DateTime CreatedTimeFrom { get; public set; }
    public DateTime CreatedTimeTo { get; public set; }
    public IEnumerable`1<string> TaskHubNames { get; public set; }
    public int PageSize { get; public set; }
    public string ContinuationToken { get; public set; }
    public string InstanceIdPrefix { get; public set; }
    public bool ShowInput { get; public set; }
    internal OrchestrationStatusQueryCondition(EntityQuery entityQuery);
    [CompilerGeneratedAttribute]
public IEnumerable`1<OrchestrationRuntimeStatus> get_RuntimeStatus();
    [CompilerGeneratedAttribute]
public void set_RuntimeStatus(IEnumerable`1<OrchestrationRuntimeStatus> value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedTimeFrom();
    [CompilerGeneratedAttribute]
public void set_CreatedTimeFrom(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedTimeTo();
    [CompilerGeneratedAttribute]
public void set_CreatedTimeTo(DateTime value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_TaskHubNames();
    [CompilerGeneratedAttribute]
public void set_TaskHubNames(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceIdPrefix();
    [CompilerGeneratedAttribute]
public void set_InstanceIdPrefix(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInput();
    [CompilerGeneratedAttribute]
public void set_ShowInput(bool value);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryResult : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<DurableOrchestrationStatus> <DurableOrchestrationState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    public IEnumerable`1<DurableOrchestrationStatus> DurableOrchestrationState { get; public set; }
    public string ContinuationToken { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<DurableOrchestrationStatus> get_DurableOrchestrationState();
    [CompilerGeneratedAttribute]
public void set_DurableOrchestrationState(IEnumerable`1<DurableOrchestrationStatus> value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
}
[AttributeUsageAttribute("2048")]
[DebuggerDisplayAttribute("{Orchestration}")]
[BindingAttribute]
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationTriggerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Orchestration>k__BackingField;
    [AutoResolveAttribute]
public string Orchestration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Orchestration();
    [CompilerGeneratedAttribute]
public void set_Orchestration(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationTriggerAttributeBindingProvider : object {
    private DurableTaskExtension config;
    private string connectionName;
    private static JsonSerializer DefaultSerializer;
    private IPlatformInformation platormInformation;
    public OrchestrationTriggerAttributeBindingProvider(DurableTaskExtension config, string connectionName, IPlatformInformation platormInformationService);
    private static OrchestrationTriggerAttributeBindingProvider();
    public sealed virtual Task`1<ITriggerBinding> TryCreateAsync(TriggerBindingProviderContext context);
}
internal static class Microsoft.Azure.WebJobs.Extensions.DurableTask.OutOfProcExceptionHelpers : object {
    private static string ResultLabel;
    private static string MessageLabel;
    private static string StackTraceLabel;
    private static string OutOfProcDataLabel;
    public static bool TryGetExceptionWithFriendlyMessage(Exception ex, Exception& friendlyMessageException);
    public static bool TryExtractOutOfProcStateJson(Exception ex, String& stateJson);
    private static bool TryGetFullOutOfProcMessage(Exception ex, String& message);
    private static bool IsOutOfProcException(Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.OutOfProcMiddleware : object {
    private DurableTaskExtension extension;
    private DurableTaskOptions Options { get; }
    private EndToEndTraceHelper TraceHelper { get; }
    private ILifeCycleNotificationHelper LifeCycleNotificationHelper { get; }
    private IApplicationLifetimeWrapper HostLifetimeService { get; }
    public OutOfProcMiddleware(DurableTaskExtension extension);
    private DurableTaskOptions get_Options();
    private EndToEndTraceHelper get_TraceHelper();
    private ILifeCycleNotificationHelper get_LifeCycleNotificationHelper();
    private IApplicationLifetimeWrapper get_HostLifetimeService();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.OutOfProcMiddleware/<CallOrchestratorAsync>d__10")]
public Task CallOrchestratorAsync(DispatchMiddlewareContext dispatchContext, Func`1<Task> next);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.OutOfProcMiddleware/<CallEntityAsync>d__11")]
public Task CallEntityAsync(DispatchMiddlewareContext dispatchContext, Func`1<Task> next);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.OutOfProcMiddleware/<CallActivityAsync>d__12")]
public Task CallActivityAsync(DispatchMiddlewareContext dispatchContext, Func`1<Task> next);
    private static FailureDetails GetFailureDetails(Exception e);
    [NullableContextAttribute("2")]
private static bool TryGetRpcExceptionFields(string rpcExceptionMessage, String& exception, String& stackTrace);
    [NullableContextAttribute("2")]
private static bool TrySplitExceptionTypeFromMessage(string exception, String& exceptionType, String& exceptionMessage);
}
internal enum Microsoft.Azure.WebJobs.Extensions.DurableTask.OutOfProcOrchestrationProtocol : Enum {
    public int value__;
    public static OutOfProcOrchestrationProtocol OrchestratorShim;
    public static OutOfProcOrchestrationProtocol MiddlewarePassthrough;
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.OutOfProcOrchestrationShim : object {
    private IDurableOrchestrationContext context;
    public OutOfProcOrchestrationShim(IDurableOrchestrationContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.OutOfProcOrchestrationShim/<HandleDurableTaskReplay>d__4")]
public Task HandleDurableTaskReplay(OrchestrationInvocationResult executionJson);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.OutOfProcOrchestrationShim/<ScheduleDurableTaskEvents>d__5")]
internal Task`1<bool> ScheduleDurableTaskEvents(OrchestrationInvocationResult result);
    private Task InvokeAPIFromAction(AsyncAction action, SchemaVersion schema);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.OutOfProcOrchestrationShim/<ProcessAsyncActionsV2>d__7")]
private Task ProcessAsyncActionsV2(AsyncAction[] actions, SchemaVersion schema);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.OutOfProcOrchestrationShim/<ReplayOOProcOrchestration>d__8")]
private Task ReplayOOProcOrchestration(AsyncAction[][] actions, SchemaVersion schema);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.OutOfProcOrchestrationShim/<ProcessAsyncActionsV1>d__9")]
private Task ProcessAsyncActionsV1(AsyncAction[][] actions, SchemaVersion schema);
}
public enum Microsoft.Azure.WebJobs.Extensions.DurableTask.OverridableStates : Enum {
    public int value__;
    public static OverridableStates AnyState;
    public static OverridableStates NonRunningStates;
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.DurableTask.OverridableStatesExtensions : object {
    private static OrchestrationStatus[] NonRunning;
    private static OverridableStatesExtensions();
    [ExtensionAttribute]
public static OrchestrationStatus[] ToDedupeStatuses(OverridableStates states);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.DurableTask.ProtobufUtils : object {
    [NullableContextAttribute("1")]
public static HistoryEvent ToHistoryEventProto(HistoryEvent e);
    [NullableContextAttribute("1")]
public static OrchestratorAction ToOrchestratorAction(OrchestratorAction a);
    [ExtensionAttribute]
public static OrchestratorEntityParameters ToProtobuf(TaskOrchestrationEntityParameters parameters);
    [NullableContextAttribute("1")]
public static string Base64Encode(IMessage message);
    internal static FailureDetails GetFailureDetails(TaskFailureDetails failureDetails);
    internal static TaskFailureDetails GetFailureDetails(FailureDetails failureDetails);
    [NullableContextAttribute("1")]
internal static OrchestrationQuery ToOrchestrationQuery(QueryInstancesRequest request);
    [NullableContextAttribute("1")]
internal static QueryInstancesResponse CreateQueryInstancesResponse(OrchestrationQueryResult result, QueryInstancesRequest request);
    [NullableContextAttribute("1")]
internal static PurgeInstanceFilter ToPurgeInstanceFilter(PurgeInstancesRequest request);
    [NullableContextAttribute("1")]
internal static PurgeInstancesResponse CreatePurgeInstancesResponse(PurgeResult result);
    [ExtensionAttribute]
internal static EntityBatchRequest ToEntityBatchRequest(EntityBatchRequest entityBatchRequest);
    [ExtensionAttribute]
internal static OperationRequest ToOperationRequest(OperationRequest operationRequest);
    [ExtensionAttribute]
internal static EntityBatchResult ToEntityBatchResult(EntityBatchResult entityBatchResult);
    [ExtensionAttribute]
internal static OperationAction ToOperationAction(OperationAction operationAction);
    [ExtensionAttribute]
internal static OperationResult ToOperationResult(OperationResult operationResult);
}
public static class Microsoft.Azure.WebJobs.Extensions.DurableTask.ProviderUtils : object {
    public static string GetSchedulerIdFromEntityId(EntityId entityId);
    public static bool TryGetEntityStateFromSerializedSchedulerState(OrchestrationState state, JsonSerializerSettings serializerSettings, String& result);
    public static DurableOrchestrationStatus ConvertOrchestrationStateToStatus(OrchestrationState orchestrationState);
}
[DataContractAttribute]
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.PurgeHistoryResult : object {
    [CompilerGeneratedAttribute]
private int <InstancesDeleted>k__BackingField;
    [DataMemberAttribute]
public int InstancesDeleted { get; }
    public PurgeHistoryResult(int instancesDeleted);
    [CompilerGeneratedAttribute]
public int get_InstancesDeleted();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.ReadOnlyConfigurationValue : object {
    private string value;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Key { get; }
    public string Path { get; }
    public string Value { get; public set; }
    public string Item { get; public set; }
    public ReadOnlyConfigurationValue(string path, string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual string get_Item(string key);
    public sealed virtual void set_Item(string key, string value);
    public sealed virtual IEnumerable`1<IConfigurationSection> GetChildren();
    public sealed virtual IChangeToken GetReloadToken();
    public sealed virtual IConfigurationSection GetSection(string key);
    private static string GetKey(string path);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.RegisteredFunctionInfo : object {
    [CompilerGeneratedAttribute]
private ITriggeredFunctionExecutor <Executor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeregistered>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOutOfProc>k__BackingField;
    internal ITriggeredFunctionExecutor Executor { get; internal set; }
    internal bool IsDeregistered { get; internal set; }
    internal bool IsOutOfProc { get; }
    internal bool HasActiveListener { get; }
    internal RegisteredFunctionInfo(ITriggeredFunctionExecutor executor, bool isOutOfProc);
    [CompilerGeneratedAttribute]
internal ITriggeredFunctionExecutor get_Executor();
    [CompilerGeneratedAttribute]
internal void set_Executor(ITriggeredFunctionExecutor value);
    [CompilerGeneratedAttribute]
internal bool get_IsDeregistered();
    [CompilerGeneratedAttribute]
internal void set_IsDeregistered(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsOutOfProc();
    internal bool get_HasActiveListener();
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.ReleaseMessage : object {
    [CompilerGeneratedAttribute]
private string <ParentInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LockRequestId>k__BackingField;
    [JsonPropertyAttribute]
public string ParentInstanceId { get; public set; }
    [JsonPropertyAttribute]
public string LockRequestId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ParentInstanceId();
    [CompilerGeneratedAttribute]
public void set_ParentInstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_LockRequestId();
    [CompilerGeneratedAttribute]
public void set_LockRequestId(string value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.RemoteEntityContext : object {
    [CompilerGeneratedAttribute]
private EntityBatchRequest <Request>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EntityBatchResult <Result>k__BackingField;
    [JsonPropertyAttribute("request")]
internal EntityBatchRequest Request { get; private set; }
    [NullableAttribute("2")]
[JsonIgnoreAttribute]
internal EntityBatchResult Result { get; internal set; }
    public RemoteEntityContext(EntityBatchRequest batchRequest);
    [CompilerGeneratedAttribute]
internal EntityBatchRequest get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(EntityBatchRequest value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal EntityBatchResult get_Result();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Result(EntityBatchResult value);
    internal void ThrowIfFailed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.RemoteOrchestratorContext : object {
    private OrchestrationRuntimeState runtimeState;
    [NullableAttribute("2")]
private OrchestratorExecutionResult executionResult;
    [NullableAttribute("2")]
private Exception failure;
    [CompilerGeneratedAttribute]
private int <UpperSchemaVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OrchestratorCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContinuedAsNew>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SerializedOutput>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TaskOrchestrationEntityParameters <EntityParameters>k__BackingField;
    [JsonPropertyAttribute("instanceId")]
public string InstanceId { get; }
    [JsonPropertyAttribute("pastEvents")]
public IEnumerable`1<HistoryEvent> PastEvents { get; }
    [JsonPropertyAttribute("newEvents")]
public IEnumerable`1<HistoryEvent> NewEvents { get; }
    [JsonPropertyAttribute("upperSchemaVersion")]
internal int UpperSchemaVersion { get; }
    [JsonIgnoreAttribute]
internal bool OrchestratorCompleted { get; private set; }
    [JsonIgnoreAttribute]
internal bool ContinuedAsNew { get; private set; }
    [NullableAttribute("2")]
[JsonIgnoreAttribute]
internal string SerializedOutput { get; private set; }
    [NullableAttribute("2")]
[JsonIgnoreAttribute]
internal TaskOrchestrationEntityParameters EntityParameters { get; private set; }
    public RemoteOrchestratorContext(OrchestrationRuntimeState runtimeState, TaskOrchestrationEntityParameters entityParameters);
    public string get_InstanceId();
    public IEnumerable`1<HistoryEvent> get_PastEvents();
    public IEnumerable`1<HistoryEvent> get_NewEvents();
    [CompilerGeneratedAttribute]
internal int get_UpperSchemaVersion();
    [CompilerGeneratedAttribute]
internal bool get_OrchestratorCompleted();
    [CompilerGeneratedAttribute]
private void set_OrchestratorCompleted(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ContinuedAsNew();
    [CompilerGeneratedAttribute]
private void set_ContinuedAsNew(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal string get_SerializedOutput();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_SerializedOutput(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal TaskOrchestrationEntityParameters get_EntityParameters();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_EntityParameters(TaskOrchestrationEntityParameters value);
    internal void ThrowIfFailed();
    internal OrchestratorExecutionResult GetResult();
    [NullableContextAttribute("2")]
internal bool TryGetOrchestrationErrorDetails(Exception& failure);
    internal void SetResult(IEnumerable`1<OrchestratorAction> actions, string customStatus);
    internal void SetResult(string orchestratorResponseJsonText);
    private void SetResultInternal(OrchestratorExecutionResult result);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.ReplaySafeLogger : object {
    private IDurableOrchestrationContext context;
    private ILogger logger;
    internal ReplaySafeLogger(IDurableOrchestrationContext context, ILogger logger);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.RequestMessage : object {
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSignal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentExecutionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ScheduledTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Predecessor>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityId[] <LockSet>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [JsonPropertyAttribute]
public string Operation { get; public set; }
    [JsonPropertyAttribute]
public bool IsSignal { get; public set; }
    [JsonPropertyAttribute]
public string Input { get; public set; }
    [JsonPropertyAttribute]
public Guid Id { get; public set; }
    [JsonPropertyAttribute]
public string ParentInstanceId { get; public set; }
    [JsonPropertyAttribute]
public string ParentExecutionId { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<DateTime> ScheduledTime { get; public set; }
    public DateTime Timestamp { get; public set; }
    public DateTime Predecessor { get; public set; }
    [JsonPropertyAttribute]
public EntityId[] LockSet { get; public set; }
    [JsonPropertyAttribute]
public int Position { get; public set; }
    [JsonIgnoreAttribute]
public bool IsLockRequest { get; }
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSignal();
    [CompilerGeneratedAttribute]
public void set_IsSignal(bool value);
    [CompilerGeneratedAttribute]
public string get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(string value);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_ParentInstanceId();
    [CompilerGeneratedAttribute]
public void set_ParentInstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_ParentExecutionId();
    [CompilerGeneratedAttribute]
public void set_ParentExecutionId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ScheduledTime();
    [CompilerGeneratedAttribute]
public void set_ScheduledTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_Predecessor();
    [CompilerGeneratedAttribute]
public void set_Predecessor(DateTime value);
    [CompilerGeneratedAttribute]
public EntityId[] get_LockSet();
    [CompilerGeneratedAttribute]
public void set_LockSet(EntityId[] value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    public bool get_IsLockRequest();
    public void SetInput(object obj, MessagePayloadDataConverter dataConverter);
    public T GetInput(MessagePayloadDataConverter dataConverter);
    public object GetInput(Type inputType, MessagePayloadDataConverter dataConverter);
    public DateTime GetAdjustedDeliveryTime(DurabilityProvider durabilityProvider);
    public virtual string ToString();
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.ResponseMessage : object {
    [CompilerGeneratedAttribute]
private string <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionType>k__BackingField;
    [JsonPropertyAttribute]
public string Result { get; public set; }
    [JsonPropertyAttribute]
public string ExceptionType { get; public set; }
    [JsonIgnoreAttribute]
public bool IsException { get; }
    [CompilerGeneratedAttribute]
public string get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(string value);
    [CompilerGeneratedAttribute]
public string get_ExceptionType();
    [CompilerGeneratedAttribute]
public void set_ExceptionType(string value);
    public bool get_IsException();
    public void SetResult(object result, MessagePayloadDataConverter dataConverter);
    public void SetExceptionResult(Exception exception, string operation, MessagePayloadDataConverter errorDataConverter);
    public T GetResult(MessagePayloadDataConverter messageDataConverter, MessagePayloadDataConverter errorDataConverter);
    public virtual string ToString();
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions : object {
    private RetryOptions retryOptions;
    private static TimeSpan DefaultMaxRetryinterval;
    public TimeSpan FirstRetryInterval { get; public set; }
    public TimeSpan MaxRetryInterval { get; public set; }
    public double BackoffCoefficient { get; public set; }
    public TimeSpan RetryTimeout { get; public set; }
    public int MaxNumberOfAttempts { get; public set; }
    public Func`2<Exception, bool> Handle { get; public set; }
    public RetryOptions(TimeSpan firstRetryInterval, int maxNumberOfAttempts);
    private static RetryOptions();
    public TimeSpan get_FirstRetryInterval();
    public void set_FirstRetryInterval(TimeSpan value);
    public TimeSpan get_MaxRetryInterval();
    public void set_MaxRetryInterval(TimeSpan value);
    public double get_BackoffCoefficient();
    public void set_BackoffCoefficient(double value);
    public TimeSpan get_RetryTimeout();
    public void set_RetryTimeout(TimeSpan value);
    public int get_MaxNumberOfAttempts();
    public void set_MaxNumberOfAttempts(int value);
    public Func`2<Exception, bool> get_Handle();
    public void set_Handle(Func`2<Exception, bool> value);
    internal RetryOptions GetRetryOptions();
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptionsConverter : JsonConverter {
    private static string BackoffCoefficientField;
    private static string FirstRetryIntervalField;
    private static string MaxAttemptsField;
    private static string MaxRetryIntervalField;
    private static string RetryTimeoutField;
    public bool CanWrite { get; }
    public virtual bool get_CanWrite();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.Scale.DurableTaskTriggersScaleProvider : object {
    private IScaleMonitor monitor;
    private ITargetScaler targetScaler;
    private DurableTaskOptions options;
    private INameResolver nameResolver;
    private ILoggerFactory loggerFactory;
    private IEnumerable`1<IDurabilityProviderFactory> durabilityProviderFactories;
    public DurableTaskTriggersScaleProvider(IOptions`1<DurableTaskOptions> durableTaskOptions, INameResolver nameResolver, ILoggerFactory loggerFactory, IEnumerable`1<IDurabilityProviderFactory> durabilityProviderFactories, TriggerMetadata triggerMetadata);
    private void GetOptions(TriggerMetadata triggerMetadata);
    private IDurabilityProviderFactory GetDurabilityProviderFactory();
    public sealed virtual IScaleMonitor GetMonitor();
    public sealed virtual ITargetScaler GetTargetScaler();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Azure.WebJobs.Extensions.DurableTask.Scale.ScaleUtils : object {
    internal static IScaleMonitor GetScaleMonitor(DurabilityProvider durabilityProvider, string functionId, FunctionName functionName, string connectionName, string hubName);
    internal static ITargetScaler GetTargetScaler(DurabilityProvider durabilityProvider, string functionId, FunctionName functionName, string connectionName, string hubName);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.SchedulerState : object {
    [CompilerGeneratedAttribute]
private bool <EntityExists>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityState>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue`1<RequestMessage> <Queue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LockedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Suspended>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageSorter <MessageSorter>k__BackingField;
    [JsonPropertyAttribute]
public bool EntityExists { get; public set; }
    [JsonPropertyAttribute]
public string EntityState { get; public set; }
    [JsonPropertyAttribute]
public Queue`1<RequestMessage> Queue { get; private set; }
    [JsonPropertyAttribute]
public string LockedBy { get; public set; }
    [JsonPropertyAttribute]
public bool Suspended { get; public set; }
    [JsonPropertyAttribute]
public MessageSorter MessageSorter { get; public set; }
    [JsonIgnoreAttribute]
public bool IsEmpty { get; }
    [JsonIgnoreAttribute]
public int UserStateSize { get; }
    [CompilerGeneratedAttribute]
public bool get_EntityExists();
    [CompilerGeneratedAttribute]
public void set_EntityExists(bool value);
    [CompilerGeneratedAttribute]
public string get_EntityState();
    [CompilerGeneratedAttribute]
public void set_EntityState(string value);
    [CompilerGeneratedAttribute]
public Queue`1<RequestMessage> get_Queue();
    [CompilerGeneratedAttribute]
private void set_Queue(Queue`1<RequestMessage> value);
    [CompilerGeneratedAttribute]
public string get_LockedBy();
    [CompilerGeneratedAttribute]
public void set_LockedBy(string value);
    [CompilerGeneratedAttribute]
public bool get_Suspended();
    [CompilerGeneratedAttribute]
public void set_Suspended(bool value);
    [CompilerGeneratedAttribute]
public MessageSorter get_MessageSorter();
    [CompilerGeneratedAttribute]
public void set_MessageSorter(MessageSorter value);
    public bool get_IsEmpty();
    public int get_UserStateSize();
    internal void Enqueue(RequestMessage operationMessage);
    internal void PutBack(Queue`1<RequestMessage> messages);
    internal bool MayDequeue();
    internal RequestMessage Dequeue();
    public virtual string ToString();
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.StandardConnectionInfoProvider : object {
    private IConfiguration configuration;
    public StandardConnectionInfoProvider(IConfiguration configuration);
    private bool IfExists(IConfigurationSection section);
    public sealed virtual IConfigurationSection Resolve(string name);
}
[ObsoleteAttribute("Please use StandardConnectionInfoProvider instead.")]
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.StandardConnectionStringProvider : object {
    private IConfiguration configuration;
    public StandardConnectionStringProvider(IConfiguration configuration);
    public sealed virtual string Resolve(string connectionStringName);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.StartOrchestrationArgs : object {
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Input>k__BackingField;
    public string FunctionName { get; public set; }
    public string InstanceId { get; public set; }
    public object Input { get; public set; }
    public StartOrchestrationArgs(string functionName, object input);
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public void set_FunctionName(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public object get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(object value);
}
[DataContractAttribute]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.StatusResponsePayload : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Input>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <CustomStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastUpdatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private JArray <HistoryEvents>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string InstanceId { get; public set; }
    [DataMemberAttribute]
public string RuntimeStatus { get; public set; }
    [DataMemberAttribute]
public JToken Input { get; public set; }
    [DataMemberAttribute]
public JToken CustomStatus { get; public set; }
    [DataMemberAttribute]
public JToken Output { get; public set; }
    [DataMemberAttribute]
public string CreatedTime { get; public set; }
    [DataMemberAttribute]
public string LastUpdatedTime { get; public set; }
    [DataMemberAttribute]
public JArray HistoryEvents { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_RuntimeStatus();
    [CompilerGeneratedAttribute]
public void set_RuntimeStatus(string value);
    [CompilerGeneratedAttribute]
public JToken get_Input();
    [CompilerGeneratedAttribute]
public void set_Input(JToken value);
    [CompilerGeneratedAttribute]
public JToken get_CustomStatus();
    [CompilerGeneratedAttribute]
public void set_CustomStatus(JToken value);
    [CompilerGeneratedAttribute]
public JToken get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(JToken value);
    [CompilerGeneratedAttribute]
public string get_CreatedTime();
    [CompilerGeneratedAttribute]
public void set_CreatedTime(string value);
    [CompilerGeneratedAttribute]
public string get_LastUpdatedTime();
    [CompilerGeneratedAttribute]
public void set_LastUpdatedTime(string value);
    [CompilerGeneratedAttribute]
public JArray get_HistoryEvents();
    [CompilerGeneratedAttribute]
public void set_HistoryEvents(JArray value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskActivityShim : TaskActivity {
    private DurableTaskExtension config;
    private ITriggeredFunctionExecutor executor;
    private IApplicationLifetimeWrapper hostServiceLifetime;
    private string activityName;
    private int taskEventId;
    public TaskActivityShim(DurableTaskExtension config, ITriggeredFunctionExecutor executor, IApplicationLifetimeWrapper hostServiceLifetime, string activityName);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskActivityShim/<RunAsync>d__6")]
public virtual Task`1<string> RunAsync(TaskContext context, string rawInput);
    public virtual string Run(TaskContext context, string input);
    internal void SetTaskEventId(int taskEventId);
    [NullableContextAttribute("2")]
private static Exception StripFunctionInvocationException(Exception e);
}
internal abstract class Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskCommonShim : TaskOrchestration {
    private TaskCompletionSource`1<Exception> timeoutTaskCompletionSource;
    [CompilerGeneratedAttribute]
private DurableTaskExtension <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Task> <FunctionInvocationCallback>k__BackingField;
    public DurableCommonContext Context { get; }
    internal DurableTaskExtension Config { get; private set; }
    protected Func`1<Task> FunctionInvocationCallback { get; private set; }
    internal Task`1<Exception> TimeoutTask { get; }
    public TaskCommonShim(DurableTaskExtension config);
    public abstract virtual DurableCommonContext get_Context();
    [CompilerGeneratedAttribute]
internal DurableTaskExtension get_Config();
    [CompilerGeneratedAttribute]
private void set_Config(DurableTaskExtension value);
    [CompilerGeneratedAttribute]
protected Func`1<Task> get_FunctionInvocationCallback();
    [CompilerGeneratedAttribute]
private void set_FunctionInvocationCallback(Func`1<Task> value);
    internal Task`1<Exception> get_TimeoutTask();
    internal void TimeoutTriggered(Exception exception);
    public void SetFunctionInvocationCallback(Func`1<Task> callback);
    public abstract virtual RegisteredFunctionInfo GetFunctionInfo();
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskEntityShim : TaskCommonShim {
    private DurableEntityContext context;
    private MessagePayloadDataConverter messageDataConverter;
    private MessagePayloadDataConverter errorDataConverter;
    private TaskCompletionSource`1<object> doneProcessingMessages;
    private List`1<RequestMessage> operationBatch;
    private RequestMessage lockRequest;
    private List`1<RequestMessage> toBeRescheduled;
    private bool suspendAndContinueWithDelay;
    private EntityTraceFlags entityTraceInfo;
    private int eventsReceived;
    [CompilerGeneratedAttribute]
private string <SchedulerId>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityId <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberEventsToReceive>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BatchPosition>k__BackingField;
    public DurableCommonContext Context { get; }
    public string SchedulerId { get; private set; }
    public EntityId EntityId { get; private set; }
    public int NumberEventsToReceive { get; public set; }
    internal List`1<RequestMessage> OperationBatch { get; }
    internal RequestMessage LockRequest { get; }
    internal int BatchPosition { get; private set; }
    public bool RollbackFailedOperations { get; }
    public string TraceFlags { get; }
    public TaskEntityShim(DurableTaskExtension config, DurabilityProvider durabilityProvider, string schedulerId);
    public virtual DurableCommonContext get_Context();
    [CompilerGeneratedAttribute]
public string get_SchedulerId();
    [CompilerGeneratedAttribute]
private void set_SchedulerId(string value);
    [CompilerGeneratedAttribute]
public EntityId get_EntityId();
    [CompilerGeneratedAttribute]
private void set_EntityId(EntityId value);
    [CompilerGeneratedAttribute]
public int get_NumberEventsToReceive();
    [CompilerGeneratedAttribute]
public void set_NumberEventsToReceive(int value);
    internal List`1<RequestMessage> get_OperationBatch();
    internal RequestMessage get_LockRequest();
    [CompilerGeneratedAttribute]
internal int get_BatchPosition();
    [CompilerGeneratedAttribute]
private void set_BatchPosition(int value);
    public bool get_RollbackFailedOperations();
    public string get_TraceFlags();
    public void AddOperationToBatch(RequestMessage operationMessage);
    public void AddLockRequestToBatch(RequestMessage lockRequest);
    public void AddMessageToBeRescheduled(RequestMessage requestMessage);
    public void ToBeContinuedWithDelay();
    public virtual RegisteredFunctionInfo GetFunctionInfo();
    public virtual string GetStatus();
    public virtual void RaiseEvent(OrchestrationContext unused, string eventName, string serializedEventData);
    public void AddTraceFlag(char flag);
    internal void Rehydrate(string serializedInput);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskEntityShim/<Execute>d__46")]
public virtual Task`1<string> Execute(OrchestrationContext innerContext, string serializedInput);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskEntityShim/<ExecuteBatch>d__47")]
public Task ExecuteBatch(CancellationToken onHostStopping);
    public void ProcessLockRequest(RequestMessage request);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskEntityShim/<ProcessOperationRequestAsync>d__49")]
private Task ProcessOperationRequestAsync(RequestMessage request);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskEntityShim/<ExecuteOutOfProcBatch>d__50")]
private Task ExecuteOutOfProcBatch();
    [CompilerGeneratedAttribute]
private Task <Rehydrate>b__45_0();
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskHttpActivityShim : TaskActivity {
    private HttpClient httpClient;
    private DurableTaskExtension config;
    public TaskHttpActivityShim(DurableTaskExtension config, HttpClient httpClientFactory);
    public virtual string Run(TaskContext context, string input);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskHttpActivityShim/<RunAsync>d__4")]
public virtual Task`1<string> RunAsync(TaskContext context, string rawInput);
    private static DurableHttpRequest ReconstructDurableHttpRequest(string serializedRequest);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskHttpActivityShim/<ConvertToHttpRequestMessage>d__6")]
private Task`1<HttpRequestMessage> ConvertToHttpRequestMessage(DurableHttpRequest durableHttpRequest);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskOrchestrationShim : TaskCommonShim {
    private DurableOrchestrationContext context;
    private OutOfProcOrchestrationShim outOfProcShim;
    private DurableTaskExtension config;
    public DurableCommonContext Context { get; }
    public TaskOrchestrationShim(DurableTaskExtension config, DurabilityProvider durabilityProvider, string name);
    public virtual DurableCommonContext get_Context();
    public virtual RegisteredFunctionInfo GetFunctionInfo();
    public virtual string GetStatus();
    public virtual void RaiseEvent(OrchestrationContext unused, string eventName, string serializedEventData);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskOrchestrationShim/<Execute>d__9")]
public virtual Task`1<string> Execute(OrchestrationContext innerContext, string serializedInput);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskOrchestrationShim/<InvokeUserCodeAndHandleResults>d__10")]
private Task InvokeUserCodeAndHandleResults(RegisteredFunctionInfo orchestratorInfo, OrchestrationContext innerContext);
    private void TraceAndSendExceptionNotification(Exception exception);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.DurableTask.TaskOrchestrationShim/<TraceAndReplay>d__12")]
private Task TraceAndReplay(object result, Exception ex);
    [CompilerGeneratedAttribute]
private Task <Execute>b__9_0();
    [CompilerGeneratedAttribute]
private Task <Execute>b__9_1();
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.TraceOptions : object {
    [CompilerGeneratedAttribute]
private bool <TraceInputsAndOutputs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowVerboseLinuxTelemetry>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TraceReplayEvents>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DistributedTracingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DistributedTracingProtocol>k__BackingField;
    [CompilerGeneratedAttribute]
private DurableDistributedTracingVersion <Version>k__BackingField;
    public bool TraceInputsAndOutputs { get; public set; }
    public bool AllowVerboseLinuxTelemetry { get; public set; }
    public bool TraceReplayEvents { get; public set; }
    public bool DistributedTracingEnabled { get; public set; }
    public string DistributedTracingProtocol { get; public set; }
    public DurableDistributedTracingVersion Version { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_TraceInputsAndOutputs();
    [CompilerGeneratedAttribute]
public void set_TraceInputsAndOutputs(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowVerboseLinuxTelemetry();
    [CompilerGeneratedAttribute]
public void set_AllowVerboseLinuxTelemetry(bool value);
    [CompilerGeneratedAttribute]
public bool get_TraceReplayEvents();
    [CompilerGeneratedAttribute]
public void set_TraceReplayEvents(bool value);
    [CompilerGeneratedAttribute]
public bool get_DistributedTracingEnabled();
    [CompilerGeneratedAttribute]
public void set_DistributedTracingEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_DistributedTracingProtocol();
    [CompilerGeneratedAttribute]
public void set_DistributedTracingProtocol(string value);
    [CompilerGeneratedAttribute]
public DurableDistributedTracingVersion get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(DurableDistributedTracingVersion value);
    internal void AddToDebugString(StringBuilder builder);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.TypedCodeProvider : object {
    public static string Namespace;
    public static string TypedDurableOrchestrationContext;
    public static string ITypedDurableOrchestrationContext;
    public static string TypedDurableClient;
    public static string ITypedDurableClient;
    public static string TypedDurableActivityCaller;
    public static string ITypedDurableActivityCaller;
    public static string TypedDurableOrchestrationCaller;
    public static string ITypedDurableOrchestrationCaller;
    public static string TypedDurableOrchestrationStarter;
    public static string ITypedDurableOrchestrationStarter;
    private Type typedDurableOrchestrationContextType;
    private Type typedDurableClientType;
    private Type typedDurableOrchestrationCallerType;
    private Type typedDurableActivityCallerType;
    private Type typedDurableOrchestrationStarterType;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    public bool IsInitialized { get; private set; }
    public Type TypedDurableOrchestrationContextType { get; }
    public Type TypedDurableClientType { get; }
    [CompilerGeneratedAttribute]
public bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    public Type get_TypedDurableOrchestrationContextType();
    public Type get_TypedDurableClientType();
    public void Initialize();
    public object InstantiateTypedDurableOrchestrationContext(IDurableOrchestrationContext context);
    public object InstantiateTypedDurableClient(IDurableClient client);
    private object InstantiateTypedOrchestrationCaller(IDurableOrchestrationContext context);
    private object InstantiateTypedActivityCaller(IDurableOrchestrationContext context);
    private object InstantiateTypedDurableOrchestrationStarter(IDurableClient client);
}
internal class Microsoft.Azure.WebJobs.Extensions.DurableTask.TypedDurableClientBindingProvider : object {
    private Func`2<DurableClientAttribute, IDurableClient> clientGenerator;
    private TypedCodeProvider typedCodeProvider;
    internal TypedDurableClientBindingProvider(TypedCodeProvider typedCodeProvider, Func`2<DurableClientAttribute, IDurableClient> clientGenerator);
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
}
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.WebJobsConnectionInfoProvider : object {
    private IConfiguration hostConfiguration;
    public WebJobsConnectionInfoProvider(IConfiguration hostConfiguration);
    public sealed virtual IConfigurationSection Resolve(string name);
    [CompilerGeneratedAttribute]
internal static IConfigurationSection <Resolve>g__GetConnectionStringOrSettingSection|2_0(IConfiguration configuration, string connectionName);
}
[ObsoleteAttribute("Please use WebJobsConnectionInfoProvider instead.")]
public class Microsoft.Azure.WebJobs.Extensions.DurableTask.WebJobsConnectionStringProvider : object {
    private IConfiguration hostConfiguration;
    public WebJobsConnectionStringProvider(IConfiguration hostConfiguration);
    public sealed virtual string Resolve(string connectionStringName);
}
public enum Microsoft.Azure.WebJobs.Extensions.DurableTask.WorkerRuntimeType : Enum {
    public int value__;
    public static WorkerRuntimeType DotNet;
    public static WorkerRuntimeType DotNetIsolated;
    public static WorkerRuntimeType Python;
    public static WorkerRuntimeType Node;
    public static WorkerRuntimeType PowerShell;
    public static WorkerRuntimeType Java;
    public static WorkerRuntimeType Custom;
    public static WorkerRuntimeType Unknown;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
