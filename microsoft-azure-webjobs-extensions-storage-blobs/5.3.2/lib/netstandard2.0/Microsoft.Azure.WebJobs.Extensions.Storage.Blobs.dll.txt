internal class Azure.Messaging.EventGrid.SystemEvents.SubscriptionValidationResponse : object {
    [CompilerGeneratedAttribute]
private string <ValidationResponse>k__BackingField;
    [JsonPropertyNameAttribute("validationResponse")]
public string ValidationResponse { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ValidationResponse();
    [CompilerGeneratedAttribute]
public void set_ValidationResponse(string value);
}
[AttributeUsageAttribute("10240")]
[DebuggerDisplayAttribute("{BlobPath,nq}")]
[ConnectionProviderAttribute("Microsoft.Azure.WebJobs.StorageAccountAttribute")]
[BindingAttribute]
public class Microsoft.Azure.WebJobs.BlobAttribute : Attribute {
    private string _blobPath;
    private Nullable`1<FileAccess> _access;
    [CompilerGeneratedAttribute]
private string <Connection>k__BackingField;
    [AutoResolveAttribute]
[BlobNameValidationAttribute]
public string BlobPath { get; }
    public Nullable`1<FileAccess> Access { get; public set; }
    public string Connection { get; public set; }
    public BlobAttribute(string blobPath);
    public BlobAttribute(string blobPath, FileAccess access);
    public string get_BlobPath();
    public Nullable`1<FileAccess> get_Access();
    public void set_Access(Nullable`1<FileAccess> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Connection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Connection(string value);
}
[AttributeUsageAttribute("2048")]
[DebuggerDisplayAttribute("{BlobPath,nq}")]
[ConnectionProviderAttribute("Microsoft.Azure.WebJobs.StorageAccountAttribute")]
[BindingAttribute]
public class Microsoft.Azure.WebJobs.BlobTriggerAttribute : Attribute {
    private string _blobPath;
    private BlobTriggerSource _blobTriggerSource;
    [CompilerGeneratedAttribute]
private string <Connection>k__BackingField;
    public string Connection { get; public set; }
    public string BlobPath { get; }
    public BlobTriggerSource Source { get; public set; }
    public BlobTriggerAttribute(string blobPath);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Connection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Connection(string value);
    public string get_BlobPath();
    public BlobTriggerSource get_Source();
    public void set_Source(BlobTriggerSource value);
}
public enum Microsoft.Azure.WebJobs.BlobTriggerSource : Enum {
    public int value__;
    public static BlobTriggerSource LogsAndContainerScan;
    public static BlobTriggerSource EventGrid;
}
internal abstract class Microsoft.Azure.WebJobs.Extensions.Clients.Shared.StorageClientProvider`2 : object {
    private IConfiguration _configuration;
    private AzureComponentFactory _componentFactory;
    private AzureEventSourceLogForwarder _logForwarder;
    private ILogger _logger;
    public static string DefaultStorageEndpointSuffix;
    protected string ServiceUriSubDomain { get; }
    public StorageClientProvider`2(IConfiguration configuration, AzureComponentFactory componentFactory, AzureEventSourceLogForwarder logForwarder, ILogger`1<TClient> logger);
    protected abstract virtual string get_ServiceUriSubDomain();
    public virtual TClient Get(string name, INameResolver resolver);
    public virtual TClient Get(string name);
    public IConfigurationSection GetWebJobsConnectionStringSection(string name);
    protected virtual TClient CreateClient(IConfiguration configuration, TokenCredential tokenCredential, TClientOptions options);
    public virtual TClient GetHost();
    protected virtual TClientOptions CreateClientOptions(IConfiguration configuration);
    protected virtual bool TryGetServiceUri(IConfiguration configuration, Uri& serviceUri);
    protected virtual Uri FormatServiceUri(string accountName, string defaultProtocol, string endpointSuffix);
    protected static bool IsConnectionStringPresent(IConfiguration configuration);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Clients.Shared.WebJobsConfigurationExtensions : object {
    private static string WebJobsConfigurationSectionName;
    [ExtensionAttribute]
public static IConfigurationSection GetWebJobsConnectionStringSection(IConfiguration configuration, string connectionStringName);
    public static string GetPrefixedConnectionStringName(string connectionStringName);
    [ExtensionAttribute]
public static IConfigurationSection GetConnectionStringOrSetting(IConfiguration configuration, string connectionName);
}
internal enum Microsoft.Azure.WebJobs.Extensions.EventGrid.BindingType : Enum {
    public int value__;
    public static BindingType Unknown;
    public static BindingType EventGridEvent;
    public static BindingType CloudEvent;
}
internal class Microsoft.Azure.WebJobs.Extensions.EventGrid.HttpRequestProcessor : object {
    private ILogger _logger;
    private static string EventTypeKey;
    private static string ValidationCodeKey;
    private static string DataKey;
    private static string SubscriptionValidationEvent;
    private static string NotificationEvent;
    private static string UnsubscribeEvent;
    public HttpRequestProcessor(ILogger`1<HttpRequestProcessor> logger);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.EventGrid.HttpRequestProcessor/<ProcessAsync>d__8")]
internal Task`1<HttpResponseMessage> ProcessAsync(HttpRequestMessage req, string functionName, Func`4<JArray, string, CancellationToken, Task`1<HttpResponseMessage>> eventsFunc, BindingType bindingType, CancellationToken cancellationToken);
}
public class Microsoft.Azure.WebJobs.Extensions.Storage.AzureStorageBlobsWebJobsStartup : object {
    public sealed virtual void Configure(IWebJobsBuilder builder);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Bindings.BlobCommittedAction : object {
    private BlobWithContainer`1<BlobBaseClient> _blob;
    private IBlobWrittenWatcher _blobWrittenWatcher;
    public BlobCommittedAction(BlobWithContainer`1<BlobBaseClient> blob, IBlobWrittenWatcher blobWrittenWatcher);
    public sealed virtual Task ExecuteAsync(CancellationToken cancellationToken);
    public sealed virtual void Execute();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Bindings.CacheableReadBlob : object {
    private IFunctionDataCache _functionDataCache;
    private bool _isDisposed;
    private bool _decrementRefCountInCacheOnDispose;
    [CompilerGeneratedAttribute]
private bool <IsCacheHit>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionDataCacheKey <CacheKey>k__BackingField;
    [CompilerGeneratedAttribute]
private SharedMemoryMetadata <CacheObject>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <BlobStream>k__BackingField;
    public bool IsCacheHit { get; private set; }
    public FunctionDataCacheKey CacheKey { get; private set; }
    public SharedMemoryMetadata CacheObject { get; private set; }
    public Stream BlobStream { get; private set; }
    public CacheableReadBlob(FunctionDataCacheKey cacheKey, SharedMemoryMetadata cacheObject, IFunctionDataCache functionDataCache);
    public CacheableReadBlob(FunctionDataCacheKey cacheKey, Stream blobStream, IFunctionDataCache functionDataCache);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsCacheHit();
    [CompilerGeneratedAttribute]
private void set_IsCacheHit(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual FunctionDataCacheKey get_CacheKey();
    [CompilerGeneratedAttribute]
private void set_CacheKey(FunctionDataCacheKey value);
    [CompilerGeneratedAttribute]
public sealed virtual SharedMemoryMetadata get_CacheObject();
    [CompilerGeneratedAttribute]
private void set_CacheObject(SharedMemoryMetadata value);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_BlobStream();
    [CompilerGeneratedAttribute]
private void set_BlobStream(Stream value);
    public sealed virtual bool TryPutToCache(SharedMemoryMetadata cacheObject, bool isIncrementActiveReference);
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Bindings.CacheableWriteBlob : object {
    private IFunctionDataCache _functionDataCache;
    private BlobWithContainer`1<BlobBaseClient> _blob;
    private SharedMemoryMetadata _cacheObject;
    [CompilerGeneratedAttribute]
private Stream <BlobStream>k__BackingField;
    public Stream BlobStream { get; private set; }
    public CacheableWriteBlob(BlobWithContainer`1<BlobBaseClient> blob, SharedMemoryMetadata cacheObject, Stream blobStream, IFunctionDataCache functionDataCache);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_BlobStream();
    [CompilerGeneratedAttribute]
private void set_BlobStream(Stream value);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Bindings.CacheableWriteBlob/<TryPutToCacheAsync>d__8")]
public sealed virtual Task`1<bool> TryPutToCacheAsync(bool isDeleteOnFailure);
    private bool TryPutToFunctionDataCacheCore(BlobProperties properties, bool isDeleteOnFailure);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Bindings.IBlobCommitedAction {
    public abstract virtual Task ExecuteAsync(CancellationToken cancellationToken);
    public abstract virtual void Execute();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Bindings.NotifyingBlobStream : DelegatingStream {
    private IBlobCommitedAction _committedAction;
    public NotifyingBlobStream(Stream inner, IBlobCommitedAction committedAction);
    public virtual void Flush();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Bindings.NotifyingBlobStream/<FlushAsync>d__3")]
public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void Close();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Bindings.StorageBlobContainerExtensions : object {
    [ExtensionAttribute]
public static Task`1<BlobBaseClient> GetBlobReferenceForArgumentTypeAsync(BlobContainerClient container, string blobName, Type argumentType, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Bindings.StorageBlobContainerExtensions/<GetBlobReferenceFromServerAsync>d__1")]
[ExtensionAttribute]
public static Task`1<ValueTuple`2<BlobBaseClient, BlobProperties>> GetBlobReferenceFromServerAsync(BlobContainerClient container, string blobName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Bindings.StorageBlobContainerExtensions/<GetExistingOrNewBlockBlobReferenceAsync>d__2")]
private static Task`1<BlobBaseClient> GetExistingOrNewBlockBlobReferenceAsync(BlobContainerClient container, string blobName, CancellationToken cancellationToken);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Bindings.WriteBlobArgumentBinding : object {
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Bindings.WriteBlobArgumentBinding/<BindStreamAsync>d__0")]
public static Task`1<NotifyingBlobStream> BindStreamAsync(BlobWithContainer`1<BlobBaseClient> blob, ValueBindingContext context, IBlobWrittenWatcher blobWrittenWatcher);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Bindings.WriteBlobArgumentBinding/<BindStreamCacheAwareAsync>d__1")]
public static Task`1<ICacheAwareWriteObject> BindStreamCacheAwareAsync(BlobWithContainer`1<BlobBaseClient> blob, ValueBindingContext context, IBlobWrittenWatcher blobWrittenWatcher, IFunctionDataCache functionDataCache);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobBaseClientExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobBaseClientExtensions/<FetchPropertiesOrNullIfNotExistAsync>d__0")]
[ExtensionAttribute]
public static Task`1<BlobProperties> FetchPropertiesOrNullIfNotExistAsync(BlobBaseClient blob, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static string GetBlobPath(BlobBaseClient blob);
    [ExtensionAttribute]
public static BlobPath ToBlobPath(BlobBaseClient blob);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobCausalityManager : object {
    [DebuggerNonUserCodeAttribute]
public static void SetWriter(IDictionary`2<string, string> metadata, Guid function);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobCausalityManager/<GetWriterAsync>d__1")]
public static Task`1<Nullable`1<Guid>> GetWriterAsync(BlobBaseClient blob, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobCausalityReader : object {
    private static BlobCausalityReader Singleton;
    public static BlobCausalityReader Instance { get; }
    private static BlobCausalityReader();
    public static BlobCausalityReader get_Instance();
    public sealed virtual Task`1<Nullable`1<Guid>> GetWriterAsync(BlobBaseClient blob, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobClientExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobClientExtensions/<DownloadTextAsync>d__0")]
[ExtensionAttribute]
public static Task`1<string> DownloadTextAsync(BlobBaseClient blobClient, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobClientExtensions/<UploadTextAsync>d__1")]
[ExtensionAttribute]
public static Task UploadTextAsync(BlockBlobClient blockBlobClient, string text, CancellationToken cancellationToken);
    public static void ValidateContainerName(string containerName);
    public static bool IsValidContainerName(string containerName);
    public static void ValidateBlobName(string blobName);
    public static bool IsValidBlobName(string blobName, String& errorMessage);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobContainerClientExtensions : object {
    [ExtensionAttribute]
internal static BlockBlobClient SafeGetBlockBlobReference(BlobContainerClient container, string dir, string blobName);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobMetadataKeys : object {
    public static string ParentId;
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobNameValidationAttribute : ValidationAttribute {
    private static Char[] UnsafeBlobNameCharacters;
    private static BlobNameValidationAttribute();
    protected virtual ValidationResult IsValid(object value, ValidationContext validationContext);
    internal static bool IsValidContainerName(string containerName);
    internal static bool IsValidBlobName(string blobName, String& errorMessage);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobOutputConverter`1 : object {
    private IAsyncConverter`2<TInput, BlobBaseClient> _innerConverter;
    public BlobOutputConverter`1(IAsyncConverter`2<TInput, BlobBaseClient> innerConverter);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobOutputConverter`1/<TryConvertAsync>d__2")]
public sealed virtual Task`1<ConversionResult`1<BlobBaseClient>> TryConvertAsync(object input, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobPath : object {
    private string _containerName;
    private string _blobName;
    public string ContainerName { get; }
    public string BlobName { get; }
    public BlobPath(string containerName, string blobName);
    public string get_ContainerName();
    public string get_BlobName();
    public virtual string ToString();
    public static BlobPath ParseAndValidate(string value, bool isContainerBinding, bool isParameterBindingData);
    public static BlobPath ParseAbsUrl(string blobUrl);
    public static bool TryParseAbsUrl(string blobUrl, BlobPath& path);
    public static bool TryParse(string value, bool isContainerBinding, bool isParameterBindingData, BlobPath& path);
    private static bool TryParseAndValidate(string value, String& errorMessage, BlobPath& path, bool isContainerBinding, bool isParameterBindingData);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobPathSource : object {
    public static IBlobPathSource Create(string pattern);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobPathSourceExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyDictionary`2<string, Type> CreateBindingDataContract(IBlobPathSource path);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobServiceClientExtensions : object {
    [ExtensionAttribute]
public static bool IsDevelopmentStorageAccount(BlobServiceClient blobServiceClient);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobServiceClientProvider : StorageClientProvider`2<BlobServiceClient, BlobClientOptions> {
    protected string ServiceUriSubDomain { get; }
    public BlobServiceClientProvider(IConfiguration configuration, AzureComponentFactory componentFactory, AzureEventSourceLogForwarder logForwarder, ILogger`1<BlobServiceClient> logger);
    protected virtual string get_ServiceUriSubDomain();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobTriggerParameterDescriptor : TriggerParameterDescriptor {
    [CompilerGeneratedAttribute]
private string <AccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobName>k__BackingField;
    [CompilerGeneratedAttribute]
private FileAccess <Access>k__BackingField;
    [CompilerGeneratedAttribute]
private BlobTriggerSource <BlobTriggerSource>k__BackingField;
    public string AccountName { get; public set; }
    public string ContainerName { get; public set; }
    public string BlobName { get; public set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public FileAccess Access { get; public set; }
    public BlobTriggerSource BlobTriggerSource { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccountName();
    [CompilerGeneratedAttribute]
public void set_AccountName(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerName();
    [CompilerGeneratedAttribute]
public void set_ContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_BlobName();
    [CompilerGeneratedAttribute]
public void set_BlobName(string value);
    [CompilerGeneratedAttribute]
public FileAccess get_Access();
    [CompilerGeneratedAttribute]
public void set_Access(FileAccess value);
    [CompilerGeneratedAttribute]
public BlobTriggerSource get_BlobTriggerSource();
    [CompilerGeneratedAttribute]
public void set_BlobTriggerSource(BlobTriggerSource value);
    public virtual string GetTriggerReason(IDictionary`2<string, string> arguments);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.BlobWithContainer`1 : object {
    [CompilerGeneratedAttribute]
private BlobContainerClient <BlobContainerClient>k__BackingField;
    [CompilerGeneratedAttribute]
private T <BlobClient>k__BackingField;
    public BlobContainerClient BlobContainerClient { get; }
    public T BlobClient { get; }
    public BlobWithContainer`1(BlobContainerClient blobContainerClient, T blobClient);
    [CompilerGeneratedAttribute]
public BlobContainerClient get_BlobContainerClient();
    [CompilerGeneratedAttribute]
public T get_BlobClient();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Classifiers.LeaseAlreadyPresentResponseClassificationHandler : ResponseClassificationHandler {
    private bool isError;
    private LeaseAlreadyPresentResponseClassificationHandler(bool isError);
    public virtual bool TryClassify(HttpMessage message, Boolean& isError);
    public static ResponseClassificationHandler GetClassifier(bool classifyAsError);
}
[ExtensionAttribute("AzureStorageBlobs", "Blobs")]
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Config.BlobsExtensionConfigProvider : object {
    private BlobTriggerAttributeBindingProvider _triggerBinder;
    private BlobServiceClientProvider _blobServiceClientProvider;
    private IContextGetter`1<IBlobWrittenWatcher> _blobWrittenWatcherGetter;
    private INameResolver _nameResolver;
    private IConverterManager _converterManager;
    private BlobTriggerQueueWriterFactory _blobTriggerQueueWriterFactory;
    private ILogger _logger;
    private BlobTriggerQueueWriter _blobTriggerQueueWriter;
    private SemaphoreSlim _semaphoreSlim;
    private HttpRequestProcessor _httpRequestProcessor;
    private IFunctionDataCache _functionDataCache;
    private IConfiguration _configuration;
    public BlobsExtensionConfigProvider(BlobServiceClientProvider blobServiceClientProvider, BlobTriggerAttributeBindingProvider triggerBinder, IContextGetter`1<IBlobWrittenWatcher> contextAccessor, INameResolver nameResolver, IConverterManager converterManager, BlobTriggerQueueWriterFactory blobTriggerQueueWriterFactory, HttpRequestProcessor httpRequestProcessor, IFunctionDataCache functionDataCache, ILoggerFactory loggerFactory, IConfiguration configuration);
    public BlobsExtensionConfigProvider(BlobServiceClientProvider blobServiceClientProvider, BlobTriggerAttributeBindingProvider triggerBinder, IContextGetter`1<IBlobWrittenWatcher> contextAccessor, INameResolver nameResolver, IConverterManager converterManager, BlobTriggerQueueWriterFactory blobTriggerQueueWriterFactory, HttpRequestProcessor httpRequestProcessor, ILoggerFactory loggerFactory, IConfiguration configuration);
    public sealed virtual void Initialize(ExtensionConfigContext context);
    private void InitializeBlobBindings(ExtensionConfigContext context);
    private void InitializeBlobTriggerBindings(ExtensionConfigContext context);
    private void RegisterCommonConverters(FluentBindingRule`1<T> rule);
    private sealed virtual override BlobContainerClient Microsoft.Azure.WebJobs.IConverter<Microsoft.Azure.WebJobs.BlobAttribute,Azure.Storage.Blobs.BlobContainerClient>.Convert(BlobAttribute blobAttribute);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Config.BlobsExtensionConfigProvider/<ConvertAsync>d__19")]
public sealed virtual Task`1<HttpResponseMessage> ConvertAsync(HttpRequestMessage input, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Config.BlobsExtensionConfigProvider/<ConvertToCloudBlobStreamAsync>d__20")]
private Task`1<Stream> ConvertToCloudBlobStreamAsync(BlobAttribute blobAttribute, ValueBindingContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Config.BlobsExtensionConfigProvider/<CreateBlobReference>d__21`1")]
private Task`1<T> CreateBlobReference(BlobAttribute blobAttribute, CancellationToken cancellationToken);
    private ParameterBindingData ConvertToParameterBindingData(BlobAttribute blobAttribute);
    private ParameterBindingData ConvertToParameterBindingData(BlobBaseClient input, BlobTriggerAttribute blobTriggerAttribute);
    private ParameterBindingData ConvertBlobInputToParameterBindingData(BlobBaseClient input);
    private ParameterBindingData CreateParameterBindingData(string connection, string blobName, string containerName);
    public sealed virtual void Dispose();
    private sealed virtual override MultiBlobContext Microsoft.Azure.WebJobs.IConverter<Microsoft.Azure.WebJobs.BlobAttribute,Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Config.BlobsExtensionConfigProvider.MultiBlobContext>.Convert(BlobAttribute attr);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Config.BlobsExtensionConfigProvider/<ConvertToStreamAsync>d__31")]
private Task`1<Stream> ConvertToStreamAsync(BlobBaseClient input, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Config.BlobsExtensionConfigProvider/<ConvertFromInvokeString>d__32")]
private Task`1<BlobBaseClient> ConvertFromInvokeString(DirectInvokeString input, Attribute attr, ValueBindingContext context);
    private BlobClient ConvertBlobBaseClientToBlobClient(BlobBaseClient input, BlobTriggerAttribute attr);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Config.BlobsExtensionConfigProvider/<CreateCacheAwareWriteObjectAsync>d__34")]
private Task`1<ICacheAwareWriteObject> CreateCacheAwareWriteObjectAsync(BlobAttribute blobAttribute, ValueBindingContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Config.BlobsExtensionConfigProvider/<CreateCacheAwareReadObjectAsync>d__35")]
private Task`1<ICacheAwareReadObject> CreateCacheAwareReadObjectAsync(BlobAttribute blobAttribute, ValueBindingContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Config.BlobsExtensionConfigProvider/<CreateStreamAsync>d__36")]
private Task`1<Stream> CreateStreamAsync(BlobAttribute blobAttribute, ValueBindingContext context);
    private BlobServiceClient GetClient(BlobAttribute blobAttribute);
    private BlobContainerClient GetContainer(BlobAttribute blobAttribute);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Config.BlobsExtensionConfigProvider/<GetBlobAsync>d__39")]
private Task`1<BlobWithContainer`1<BlobBaseClient>> GetBlobAsync(BlobAttribute blobAttribute, CancellationToken cancellationToken, Type requestedType);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Config.BlobsExtensionConfigProvider/<ProcessEventsAsync>d__40")]
private Task`1<HttpResponseMessage> ProcessEventsAsync(JArray events, string functionName, CancellationToken cancellationToken);
    private static BlobTriggerMessage GetBlobTriggerMessage(JObject jo, string functionId);
    [CompilerGeneratedAttribute]
private ParameterBindingData <InitializeBlobBindings>b__15_0(BlobAttribute attr);
    [CompilerGeneratedAttribute]
private Task`1<BlockBlobClient> <InitializeBlobBindings>b__15_1(BlobAttribute attr, CancellationToken cts);
    [CompilerGeneratedAttribute]
private Task`1<PageBlobClient> <InitializeBlobBindings>b__15_2(BlobAttribute attr, CancellationToken cts);
    [CompilerGeneratedAttribute]
private Task`1<AppendBlobClient> <InitializeBlobBindings>b__15_3(BlobAttribute attr, CancellationToken cts);
    [CompilerGeneratedAttribute]
private Task`1<BlobClient> <InitializeBlobBindings>b__15_4(BlobAttribute attr, CancellationToken cts);
    [CompilerGeneratedAttribute]
private Task`1<BlobBaseClient> <InitializeBlobBindings>b__15_5(BlobAttribute attr, CancellationToken cts);
    [CompilerGeneratedAttribute]
private Task`1<ICacheAwareReadObject> <InitializeBlobBindings>b__15_6(BlobAttribute attr, ValueBindingContext ctx);
    [CompilerGeneratedAttribute]
private Task`1<ICacheAwareWriteObject> <InitializeBlobBindings>b__15_7(BlobAttribute attr, ValueBindingContext ctx);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.DelegatingStream : Stream {
    private Stream _inner;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public DelegatingStream(Stream inner);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Close();
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.FixedBlobPathSource : object {
    private BlobPath _innerPath;
    public string ContainerNamePattern { get; }
    public string BlobNamePattern { get; }
    public IEnumerable`1<string> ParameterNames { get; }
    public FixedBlobPathSource(BlobPath innerPath);
    public sealed virtual string get_ContainerNamePattern();
    public sealed virtual string get_BlobNamePattern();
    public sealed virtual IEnumerable`1<string> get_ParameterNames();
    public sealed virtual IReadOnlyDictionary`2<string, object> CreateBindingData(BlobPath actualBlobPath);
    public virtual string ToString();
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.HostContainerNames : object {
    public static string Hosts;
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.HostDirectoryNames : object {
    public static string BlobReceipts;
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.IBlobCausalityReader {
    public abstract virtual Task`1<Nullable`1<Guid>> GetWriterAsync(BlobBaseClient blob, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.IBlobPathSource {
    public string ContainerNamePattern { get; }
    public string BlobNamePattern { get; }
    public IEnumerable`1<string> ParameterNames { get; }
    public abstract virtual string get_ContainerNamePattern();
    public abstract virtual string get_BlobNamePattern();
    public abstract virtual IEnumerable`1<string> get_ParameterNames();
    public abstract virtual IReadOnlyDictionary`2<string, object> CreateBindingData(BlobPath actualBlobPath);
    public abstract virtual string ToString();
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.IBlobWrittenWatcher {
    public abstract virtual void Notify(BlobWithContainer`1<BlobBaseClient> blobWritten);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobListener : object {
    private ISharedListener _sharedListener;
    private ILogger`1<BlobListener> _logger;
    private bool _started;
    private bool _disposed;
    private string _details;
    internal BlobListener(ISharedListener sharedListener);
    public BlobListener(ISharedListener sharedListener, BlobContainerClient containerClient, IBlobPathSource blobPathSource, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobListener/<StartAsync>d__7")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobListener/<StartAsyncCore>d__8")]
private Task StartAsyncCore(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobListener/<StopAsync>d__9")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobListener/<StopAsyncCore>d__10")]
private Task StopAsyncCore(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    private void ThrowIfDisposed();
    public sealed virtual IScaleMonitor GetMonitor();
    public sealed virtual ITargetScaler GetTargetScaler();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobListenerFactory : object {
    private static string SingletonBlobListenerScopeId;
    private IHostIdProvider _hostIdProvider;
    private BlobsOptions _blobsOptions;
    private IWebJobsExceptionHandler _exceptionHandler;
    private IContextSetter`1<IBlobWrittenWatcher> _blobWrittenWatcherSetter;
    private BlobTriggerQueueWriterFactory _blobTriggerQueueWriterFactory;
    private ISharedContextProvider _sharedContextProvider;
    private FunctionDescriptor _functionDescriptor;
    private ILoggerFactory _loggerFactory;
    private BlobServiceClient _hostBlobServiceClient;
    private QueueServiceClient _hostQueueServiceClient;
    private BlobServiceClient _dataBlobServiceClient;
    private QueueServiceClient _dataQueueServiceClient;
    private BlobContainerClient _container;
    private IBlobPathSource _input;
    private BlobTriggerSource _blobTriggerSource;
    private ITriggeredFunctionExecutor _executor;
    private IHostSingletonManager _singletonManager;
    private ConcurrencyManager _concurrencyManager;
    private IDrainModeManager _drainModeManager;
    public BlobListenerFactory(IHostIdProvider hostIdProvider, BlobsOptions blobsOptions, IWebJobsExceptionHandler exceptionHandler, IContextSetter`1<IBlobWrittenWatcher> blobWrittenWatcherSetter, BlobTriggerQueueWriterFactory blobTriggerQueueWriterFactory, ISharedContextProvider sharedContextProvider, ILoggerFactory loggerFactory, FunctionDescriptor functionDescriptor, BlobServiceClient hostBlobServiceClient, QueueServiceClient hostQueueServiceClient, BlobServiceClient dataBlobServiceClient, QueueServiceClient dataQueueServiceClient, BlobContainerClient container, IBlobPathSource input, BlobTriggerSource triggerKind, ITriggeredFunctionExecutor executor, IHostSingletonManager singletonManager, ConcurrencyManager concurrencyManager, IDrainModeManager drainModeManager);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobListenerFactory/<CreateAsync>d__21")]
public sealed virtual Task`1<IListener> CreateAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobListenerFactory/<RegisterWithSharedBlobListenerAsync>d__22")]
private Task RegisterWithSharedBlobListenerAsync(string hostId, SharedBlobListener sharedBlobListener, BlobServiceClient blobClient, BlobTriggerQueueWriter blobTriggerQueueWriter, CancellationToken cancellationToken);
    private void RegisterWithSharedBlobQueueListenerAsync(SharedBlobQueueListener sharedBlobQueueListener, BlobServiceClient blobClient, QueueServiceClient queueClient);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobLogListener : object {
    internal static int DefaultScanHoursWindow;
    private static string LogType;
    private static string LogContainer;
    private BlobServiceClient _blobClient;
    private HashSet`1<string> _scannedBlobNames;
    private StorageAnalyticsLogParser _parser;
    private ILogger`1<BlobListener> _logger;
    private BlobLogListener(BlobServiceClient blobClient, ILogger`1<BlobListener> logger);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobLogListener/<CreateAsync>d__8")]
public static Task`1<BlobLogListener> CreateAsync(BlobServiceClient blobClient, ILogger`1<BlobListener> logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobLogListener/<GetRecentBlobWritesAsync>d__9")]
public Task`1<IEnumerable`1<BlobWithContainer`1<BlobBaseClient>>> GetRecentBlobWritesAsync(CancellationToken cancellationToken, int hoursWindow);
    internal static IEnumerable`1<BlobPath> GetPathsForValidBlobWrites(IEnumerable`1<StorageAnalyticsLogEntry> entries);
    private static string GetSearchPrefix(string service, DateTime startTime, DateTime endTime);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobLogListener/<ListRecentLogFilesAsync>d__12")]
private static Task`1<List`1<BlobBaseClient>> ListRecentLogFilesAsync(BlobServiceClient blobClient, DateTime startTimeForSearch, int hoursWindow, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobLogListener/<GetLogsWithPrefixAsync>d__13")]
private static Task GetLogsWithPrefixAsync(List`1<BlobBaseClient> selectedLogs, BlobServiceClient blobClient, string prefix, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobLogListener/<EnableLoggingAsync>d__14")]
public static Task EnableLoggingAsync(BlobServiceClient blobClient, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobNotification : object {
    [CompilerGeneratedAttribute]
private BlobWithContainer`1<BlobBaseClient> <Blob>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PollId>k__BackingField;
    public BlobWithContainer`1<BlobBaseClient> Blob { get; private set; }
    public string PollId { get; public set; }
    public BlobNotification(BlobWithContainer`1<BlobBaseClient> blob, string originalClientRequestId);
    [CompilerGeneratedAttribute]
public BlobWithContainer`1<BlobBaseClient> get_Blob();
    [CompilerGeneratedAttribute]
private void set_Blob(BlobWithContainer`1<BlobBaseClient> value);
    [CompilerGeneratedAttribute]
public string get_PollId();
    [CompilerGeneratedAttribute]
public void set_PollId(string value);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobQueueRegistration : object {
    [CompilerGeneratedAttribute]
private ITriggeredFunctionExecutor <Executor>k__BackingField;
    [CompilerGeneratedAttribute]
private BlobServiceClient <BlobServiceClient>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueServiceClient <QueueServiceClient>k__BackingField;
    public ITriggeredFunctionExecutor Executor { get; public set; }
    public BlobServiceClient BlobServiceClient { get; public set; }
    public QueueServiceClient QueueServiceClient { get; public set; }
    [CompilerGeneratedAttribute]
public ITriggeredFunctionExecutor get_Executor();
    [CompilerGeneratedAttribute]
public void set_Executor(ITriggeredFunctionExecutor value);
    [CompilerGeneratedAttribute]
public BlobServiceClient get_BlobServiceClient();
    [CompilerGeneratedAttribute]
public void set_BlobServiceClient(BlobServiceClient value);
    [CompilerGeneratedAttribute]
public QueueServiceClient get_QueueServiceClient();
    [CompilerGeneratedAttribute]
public void set_QueueServiceClient(QueueServiceClient value);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobQueueTriggerExecutor : object {
    private static string BlobCreatedKey;
    private static string BlobLastModifiedKey;
    private IBlobCausalityReader _causalityReader;
    private IBlobWrittenWatcher _blobWrittenWatcher;
    private ConcurrentDictionary`2<string, BlobQueueRegistration> _registrations;
    private BlobTriggerSource _blobTriggerSource;
    private ILogger`1<BlobListener> _logger;
    public BlobQueueTriggerExecutor(BlobTriggerSource blobTriggerSource, IBlobWrittenWatcher blobWrittenWatcher, ILogger`1<BlobListener> logger);
    public BlobQueueTriggerExecutor(IBlobCausalityReader causalityReader, BlobTriggerSource blobTriggerSource, IBlobWrittenWatcher blobWrittenWatcher, ILogger`1<BlobListener> logger);
    public bool TryGetRegistration(string functionId, BlobQueueRegistration& registration);
    public void Register(string functionId, BlobQueueRegistration registration);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobQueueTriggerExecutor/<ExecuteAsync>d__11")]
public sealed virtual Task`1<FunctionResult> ExecuteAsync(QueueMessage value, CancellationToken cancellationToken);
    internal static Dictionary`2<string, string> PopulateTriggerDetails(QueueMessage value);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobReceipt : object {
    private static string IncompleteKey;
    private static BlobReceipt CompletedInstance;
    private static BlobReceipt IncompleteInstance;
    private bool _incomplete;
    public static BlobReceipt Complete { get; }
    public static BlobReceipt Incomplete { get; }
    public bool IsCompleted { get; }
    private BlobReceipt(bool incomplete);
    private static BlobReceipt();
    public static BlobReceipt get_Complete();
    public static BlobReceipt get_Incomplete();
    public bool get_IsCompleted();
    public void ToMetadata(IDictionary`2<string, string> metadata);
    public static BlobReceipt FromMetadata(IDictionary`2<string, string> metadata);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobReceiptManager : object {
    private static TimeSpan LeasePeriod;
    private BlobContainerClient _blobContainerClient;
    public BlobReceiptManager(BlobServiceClient client);
    private static BlobReceiptManager();
    public sealed virtual BlockBlobClient CreateReference(string hostId, string functionId, string containerName, string blobName, string eTag);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobReceiptManager/<TryReadAsync>d__4")]
public sealed virtual Task`1<BlobReceipt> TryReadAsync(BlockBlobClient blob, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobReceiptManager/<TryCreateAsync>d__5")]
public sealed virtual Task`1<bool> TryCreateAsync(BlockBlobClient blob, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobReceiptManager/<TryAcquireLeaseAsync>d__6")]
public sealed virtual Task`1<string> TryAcquireLeaseAsync(BlockBlobClient blob, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobReceiptManager/<MarkCompletedAsync>d__7")]
public sealed virtual Task MarkCompletedAsync(BlockBlobClient blob, string leaseId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobReceiptManager/<ReleaseLeaseAsync>d__8")]
public sealed virtual Task ReleaseLeaseAsync(BlockBlobClient blob, string leaseId, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobScalerMonitorProvider : object {
    private IScaleMonitor _scaleMonitor;
    public BlobScalerMonitorProvider(IServiceProvider serviceProvider, TriggerMetadata triggerMetadata);
    public sealed virtual IScaleMonitor GetMonitor();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobTriggerExecutor : object {
    internal static string TriggerSourceKey;
    internal static string TriggerClientRequestIdKey;
    private string _hostId;
    private FunctionDescriptor _functionDescriptor;
    private IBlobPathSource _input;
    private IBlobTriggerQueueWriter _queueWriter;
    private IBlobReceiptManager _receiptManager;
    private ILogger`1<BlobListener> _logger;
    public BlobTriggerExecutor(string hostId, FunctionDescriptor functionDescriptor, IBlobPathSource input, IBlobReceiptManager receiptManager, IBlobTriggerQueueWriter queueWriter, ILogger`1<BlobListener> logger);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobTriggerExecutor/<ExecuteAsync>d__9")]
public sealed virtual Task`1<FunctionResult> ExecuteAsync(BlobTriggerExecutorContext context, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobTriggerExecutorContext : object {
    [CompilerGeneratedAttribute]
private BlobWithContainer`1<BlobBaseClient> <Blob>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PollId>k__BackingField;
    [CompilerGeneratedAttribute]
private BlobTriggerScanSource <TriggerSource>k__BackingField;
    public BlobWithContainer`1<BlobBaseClient> Blob { get; public set; }
    public string PollId { get; public set; }
    public BlobTriggerScanSource TriggerSource { get; public set; }
    [CompilerGeneratedAttribute]
public BlobWithContainer`1<BlobBaseClient> get_Blob();
    [CompilerGeneratedAttribute]
public void set_Blob(BlobWithContainer`1<BlobBaseClient> value);
    [CompilerGeneratedAttribute]
public string get_PollId();
    [CompilerGeneratedAttribute]
public void set_PollId(string value);
    [CompilerGeneratedAttribute]
public BlobTriggerScanSource get_TriggerSource();
    [CompilerGeneratedAttribute]
public void set_TriggerSource(BlobTriggerScanSource value);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobTriggerMessage : object {
    [CompilerGeneratedAttribute]
private string <FunctionId>k__BackingField;
    [CompilerGeneratedAttribute]
private BlobType <BlobType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    public string Type { get; }
    public string FunctionId { get; public set; }
    [JsonIgnoreAttribute]
public BlobType BlobType { get; public set; }
    [JsonPropertyAttribute("BlobType")]
private string BlobTypeInternal { get; private set; }
    public string ContainerName { get; public set; }
    public string BlobName { get; public set; }
    public string ETag { get; public set; }
    public string get_Type();
    [CompilerGeneratedAttribute]
public string get_FunctionId();
    [CompilerGeneratedAttribute]
public void set_FunctionId(string value);
    [CompilerGeneratedAttribute]
public BlobType get_BlobType();
    [CompilerGeneratedAttribute]
public void set_BlobType(BlobType value);
    private string get_BlobTypeInternal();
    private void set_BlobTypeInternal(string value);
    [CompilerGeneratedAttribute]
public string get_ContainerName();
    [CompilerGeneratedAttribute]
public void set_ContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_BlobName();
    [CompilerGeneratedAttribute]
public void set_BlobName(string value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(string value);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobTriggerQueueWriter : object {
    [CompilerGeneratedAttribute]
private QueueClient <QueueClient>k__BackingField;
    [CompilerGeneratedAttribute]
private SharedQueueWatcher <SharedQueueWatcher>k__BackingField;
    public QueueClient QueueClient { get; }
    public SharedQueueWatcher SharedQueueWatcher { get; }
    public BlobTriggerQueueWriter(QueueClient queueClient, SharedQueueWatcher wsharedQueueWatcher);
    [CompilerGeneratedAttribute]
public QueueClient get_QueueClient();
    [CompilerGeneratedAttribute]
public SharedQueueWatcher get_SharedQueueWatcher();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobTriggerQueueWriter/<EnqueueAsync>d__7")]
public sealed virtual Task`1<ValueTuple`2<string, string>> EnqueueAsync(BlobTriggerMessage message, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobTriggerQueueWriterFactory : object {
    private IHostIdProvider _hostIdProvider;
    private QueueServiceClientProvider _queueServiceClientProvider;
    private SharedQueueWatcher _sharedQueueWatcher;
    public BlobTriggerQueueWriterFactory(IHostIdProvider hostIdProvider, QueueServiceClientProvider queueServiceClientProvider, SharedQueueWatcher sharedQueueWatcher);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobTriggerQueueWriterFactory/<CreateAsync>d__4")]
public Task`1<BlobTriggerQueueWriter> CreateAsync(CancellationToken cancellationToken);
}
internal enum Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.BlobTriggerScanSource : Enum {
    public int value__;
    public static BlobTriggerScanSource ContainerScan;
    public static BlobTriggerScanSource LogScan;
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.CloudBlobClientComparer : object {
    public sealed virtual bool Equals(BlobServiceClient x, BlobServiceClient y);
    public sealed virtual int GetHashCode(BlobServiceClient obj);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.CloudBlobContainerComparer : object {
    public sealed virtual bool Equals(BlobContainerClient x, BlobContainerClient y);
    public sealed virtual int GetHashCode(BlobContainerClient obj);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.ContainerScanInfo : object {
    [CompilerGeneratedAttribute]
private ICollection`1<ITriggerExecutor`1<BlobTriggerExecutorContext>> <Registrations>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastSweepCycleLatestModified>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CurrentSweepCycleLatestModified>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    public ICollection`1<ITriggerExecutor`1<BlobTriggerExecutorContext>> Registrations { get; public set; }
    public DateTime LastSweepCycleLatestModified { get; public set; }
    public DateTime CurrentSweepCycleLatestModified { get; public set; }
    public string ContinuationToken { get; public set; }
    [CompilerGeneratedAttribute]
public ICollection`1<ITriggerExecutor`1<BlobTriggerExecutorContext>> get_Registrations();
    [CompilerGeneratedAttribute]
public void set_Registrations(ICollection`1<ITriggerExecutor`1<BlobTriggerExecutorContext>> value);
    [CompilerGeneratedAttribute]
public DateTime get_LastSweepCycleLatestModified();
    [CompilerGeneratedAttribute]
public void set_LastSweepCycleLatestModified(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_CurrentSweepCycleLatestModified();
    [CompilerGeneratedAttribute]
public void set_CurrentSweepCycleLatestModified(DateTime value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.IBlobListenerStrategy {
    public abstract virtual void Start();
    public abstract virtual void Cancel();
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.IBlobNotificationStrategy {
    public abstract virtual Task RegisterAsync(BlobServiceClient blobServiceClient, BlobContainerClient container, ITriggerExecutor`1<BlobTriggerExecutorContext> triggerExecutor, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.IBlobReceiptManager {
    public abstract virtual BlockBlobClient CreateReference(string hostId, string functionId, string containerName, string blobName, string eTag);
    public abstract virtual Task`1<BlobReceipt> TryReadAsync(BlockBlobClient blob, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> TryCreateAsync(BlockBlobClient blob, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> TryAcquireLeaseAsync(BlockBlobClient blob, CancellationToken cancellationToken);
    public abstract virtual Task MarkCompletedAsync(BlockBlobClient blob, string leaseId, CancellationToken cancellationToken);
    public abstract virtual Task ReleaseLeaseAsync(BlockBlobClient blob, string leaseId, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.IBlobScanInfoManager {
    public abstract virtual Task`1<Nullable`1<DateTime>> LoadLatestScanAsync(string storageAccountName, string containerName);
    public abstract virtual Task UpdateLatestScanAsync(string storageAccountName, string containerName, DateTime scanInfo);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.IBlobTriggerQueueWriter {
    public abstract virtual Task`1<ValueTuple`2<string, string>> EnqueueAsync(BlobTriggerMessage message, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.PollLogsStrategy : object {
    private static TimeSpan TwoSeconds;
    private IDictionary`2<BlobContainerClient, ICollection`1<ITriggerExecutor`1<BlobTriggerExecutorContext>>> _registrations;
    private IDictionary`2<BlobServiceClient, BlobLogListener> _logListeners;
    private Thread _initialScanThread;
    private ConcurrentQueue`1<BlobNotification> _blobsFoundFromScanOrNotification;
    private CancellationTokenSource _cancellationTokenSource;
    private ILogger`1<BlobListener> _logger;
    private IWebJobsExceptionHandler _exceptionHandler;
    private bool _performInitialScan;
    private bool _disposed;
    public PollLogsStrategy(IWebJobsExceptionHandler exceptionHandler, ILogger`1<BlobListener> logger, bool performInitialScan);
    private static PollLogsStrategy();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.PollLogsStrategy/<RegisterAsync>d__11")]
public sealed virtual Task RegisterAsync(BlobServiceClient blobServiceClient, BlobContainerClient container, ITriggerExecutor`1<BlobTriggerExecutorContext> triggerExecutor, CancellationToken cancellationToken);
    public sealed virtual void Notify(BlobWithContainer`1<BlobBaseClient> blobWritten);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.PollLogsStrategy/<ExecuteAsync>d__13")]
public sealed virtual Task`1<TaskSeriesCommandResult> ExecuteAsync(CancellationToken cancellationToken);
    public sealed virtual void Start();
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.PollLogsStrategy/<NotifyRegistrationsAsync>d__17")]
private Task NotifyRegistrationsAsync(BlobWithContainer`1<BlobBaseClient> blob, string pollId, CancellationToken cancellationToken);
    private void ScanContainers(object state);
    private void ThrowIfDisposed();
    [CompilerGeneratedAttribute]
private bool <ExecuteAsync>b__13_0(BlobWithContainer`1<BlobBaseClient> p);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.ScanBlobScanLogHybridPollingStrategy : object {
    private static TimeSpan PollingInterval;
    private IDictionary`2<BlobContainerClient, ContainerScanInfo> _scanInfo;
    private ConcurrentQueue`1<BlobNotification> _blobsFoundFromScanOrNotification;
    private IWebJobsExceptionHandler _exceptionHandler;
    private ILogger`1<BlobListener> _logger;
    private CancellationTokenSource _cancellationTokenSource;
    private IBlobScanInfoManager _blobScanInfoManager;
    private int _scanBlobLimitPerPoll;
    private PollLogsStrategy _pollLogStrategy;
    private bool _disposed;
    public ScanBlobScanLogHybridPollingStrategy(IBlobScanInfoManager blobScanInfoManager, IWebJobsExceptionHandler exceptionHandler, ILogger`1<BlobListener> logger);
    private static ScanBlobScanLogHybridPollingStrategy();
    public sealed virtual void Start();
    public sealed virtual void Cancel();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.ScanBlobScanLogHybridPollingStrategy/<RegisterAsync>d__13")]
public sealed virtual Task RegisterAsync(BlobServiceClient blobServiceClient, BlobContainerClient container, ITriggerExecutor`1<BlobTriggerExecutorContext> triggerExecutor, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.ScanBlobScanLogHybridPollingStrategy/<ExecuteAsync>d__14")]
public sealed virtual Task`1<TaskSeriesCommandResult> ExecuteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.ScanBlobScanLogHybridPollingStrategy/<PollAndNotify>d__15")]
private Task PollAndNotify(BlobContainerClient container, ContainerScanInfo containerScanInfo, List`1<BlobNotification> failedNotifications, CancellationToken cancellationToken);
    public sealed virtual void Notify(BlobWithContainer`1<BlobBaseClient> blobWritten);
    public sealed virtual void Dispose();
    private void ThrowIfDisposed();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.ScanBlobScanLogHybridPollingStrategy/<PollNewBlobsAsync>d__19")]
public Task`1<IEnumerable`1<BlobBaseClient>> PollNewBlobsAsync(BlobContainerClient container, ContainerScanInfo containerScanInfo, string clientRequestId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.ScanBlobScanLogHybridPollingStrategy/<NotifyRegistrationsAsync>d__20")]
private Task NotifyRegistrationsAsync(BlobWithContainer`1<BlobBaseClient> blob, ICollection`1<BlobNotification> failedNotifications, string clientRequestId, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.ScanContainersStrategy : object {
    private static TimeSpan TwoSeconds;
    private IDictionary`2<BlobContainerClient, ICollection`1<ITriggerExecutor`1<BlobTriggerExecutorContext>>> _registrations;
    private IDictionary`2<BlobContainerClient, DateTime> _lastModifiedTimestamps;
    private ConcurrentQueue`1<BlobWithContainer`1<BlobBaseClient>> _blobWrittenNotifications;
    private static ScanContainersStrategy();
    public sealed virtual void Notify(BlobWithContainer`1<BlobBaseClient> blobWritten);
    public sealed virtual Task RegisterAsync(BlobServiceClient blobServiceClient, BlobContainerClient container, ITriggerExecutor`1<BlobTriggerExecutorContext> triggerExecutor, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.ScanContainersStrategy/<ExecuteAsync>d__7")]
public sealed virtual Task`1<TaskSeriesCommandResult> ExecuteAsync(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Start();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.ScanContainersStrategy/<NotifyRegistrationsAsync>d__11")]
private Task NotifyRegistrationsAsync(BlobWithContainer`1<BlobBaseClient> blob, ICollection`1<BlobWithContainer`1<BlobBaseClient>> failedNotifications, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.ScanContainersStrategy/<PollNewBlobsAsync>d__12")]
public static Task`1<Tuple`2<IEnumerable`1<BlobBaseClient>, DateTime>> PollNewBlobsAsync(BlobContainerClient container, DateTime previousTimestamp, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.SharedBlobListener : object {
    private IBlobListenerStrategy _strategy;
    private ITaskSeriesTimer _timer;
    private bool _started;
    private bool _disposed;
    public IBlobWrittenWatcher BlobWritterWatcher { get; }
    public SharedBlobListener(string hostId, BlobServiceClient blobServiceClient, IWebJobsExceptionHandler exceptionHandler, ILogger`1<BlobListener> logger);
    public IBlobWrittenWatcher get_BlobWritterWatcher();
    public Task RegisterAsync(BlobServiceClient blobServiceClient, BlobContainerClient container, ITriggerExecutor`1<BlobTriggerExecutorContext> triggerExecutor, CancellationToken cancellationToken);
    public sealed virtual Task EnsureAllStartedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.SharedBlobListener/<EnsureAllStoppedAsync>d__9")]
public sealed virtual Task EnsureAllStoppedAsync(CancellationToken cancellationToken);
    public sealed virtual void EnsureAllCanceled();
    public sealed virtual void EnsureAllDisposed();
    public sealed virtual void Dispose();
    private static IBlobListenerStrategy CreateStrategy(string hostId, BlobServiceClient blobServiceClient, IWebJobsExceptionHandler exceptionHandler, ILogger`1<BlobListener> logger);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.SharedBlobListenerFactory : object {
    private BlobServiceClient _blobServiceClient;
    private IWebJobsExceptionHandler _exceptionHandler;
    private IContextSetter`1<IBlobWrittenWatcher> _blobWrittenWatcherSetter;
    private ILogger`1<BlobListener> _logger;
    private string _hostId;
    public SharedBlobListenerFactory(string hostId, BlobServiceClient blobServiceClient, IWebJobsExceptionHandler exceptionHandler, IContextSetter`1<IBlobWrittenWatcher> blobWrittenWatcherSetter, ILogger`1<BlobListener> logger);
    public sealed virtual SharedBlobListener Create();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.SharedBlobQueueListener : object {
    private IListener _listener;
    private BlobQueueTriggerExecutor _executor;
    private bool _started;
    private bool _disposed;
    public SharedBlobQueueListener(IListener listener, BlobQueueTriggerExecutor executor);
    public void Register(string functionId, BlobQueueRegistration registration);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.SharedBlobQueueListener/<EnsureAllStartedAsync>d__6")]
public sealed virtual Task EnsureAllStartedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.SharedBlobQueueListener/<EnsureAllStoppedAsync>d__7")]
public sealed virtual Task EnsureAllStoppedAsync(CancellationToken cancellationToken);
    public sealed virtual void EnsureAllCanceled();
    public sealed virtual void EnsureAllDisposed();
    public sealed virtual void Dispose();
    public sealed virtual IScaleMonitor GetMonitor();
    public sealed virtual ITargetScaler GetTargetScaler();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.SharedBlobQueueListenerFactory : object {
    internal static string SharedBlobQueueListenerFunctionId;
    private SharedQueueWatcher _sharedQueueWatcher;
    private QueueClient _hostBlobTriggerQueue;
    private BlobsOptions _blobsOptions;
    private IWebJobsExceptionHandler _exceptionHandler;
    private IBlobWrittenWatcher _blobWrittenWatcher;
    private FunctionDescriptor _functionDescriptor;
    private QueueServiceClient _hostQueueServiceClient;
    private ILoggerFactory _loggerFactory;
    private BlobTriggerSource _blobTriggerSource;
    private ConcurrencyManager _concurrencyManager;
    private IDrainModeManager _drainModeManager;
    public SharedBlobQueueListenerFactory(QueueServiceClient hostQueueServiceClient, SharedQueueWatcher sharedQueueWatcher, QueueClient hostBlobTriggerQueue, BlobsOptions blobsOptions, IWebJobsExceptionHandler exceptionHandler, ILoggerFactory loggerFactory, IBlobWrittenWatcher blobWrittenWatcher, FunctionDescriptor functionDescriptor, BlobTriggerSource blobTriggerSource, ConcurrencyManager concurrencyManager, IDrainModeManager drainmodeManager);
    public sealed virtual SharedBlobQueueListener Create();
    internal static QueuesOptions BlobsOptionsToQueuesOptions(BlobsOptions blobsOptions);
}
internal enum Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.StorageAnalyticsLogColumnId : Enum {
    public int value__;
    public static StorageAnalyticsLogColumnId VersionNumber;
    public static StorageAnalyticsLogColumnId RequestStartTime;
    public static StorageAnalyticsLogColumnId OperationType;
    public static StorageAnalyticsLogColumnId RequestStatus;
    public static StorageAnalyticsLogColumnId HttpStatusCode;
    public static StorageAnalyticsLogColumnId EndToEndLatencyInMs;
    public static StorageAnalyticsLogColumnId ServerLatencyInMs;
    public static StorageAnalyticsLogColumnId AuthenticationType;
    public static StorageAnalyticsLogColumnId RequesterAccountName;
    public static StorageAnalyticsLogColumnId OwnerAccountName;
    public static StorageAnalyticsLogColumnId ServiceType;
    public static StorageAnalyticsLogColumnId RequestUrl;
    public static StorageAnalyticsLogColumnId RequestedObjectKey;
    public static StorageAnalyticsLogColumnId RequestIdHeader;
    public static StorageAnalyticsLogColumnId OperationCount;
    public static StorageAnalyticsLogColumnId LastColumn;
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.StorageAnalyticsLogEntry : object {
    [CompilerGeneratedAttribute]
private DateTime <RequestStartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StorageServiceOperationType> <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StorageServiceType> <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestedObjectKey>k__BackingField;
    public DateTime RequestStartTime { get; public set; }
    public Nullable`1<StorageServiceOperationType> OperationType { get; public set; }
    public Nullable`1<StorageServiceType> ServiceType { get; public set; }
    public string RequestedObjectKey { get; public set; }
    public bool IsBlobWrite { get; }
    [CompilerGeneratedAttribute]
public DateTime get_RequestStartTime();
    [CompilerGeneratedAttribute]
public void set_RequestStartTime(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<StorageServiceOperationType> get_OperationType();
    [CompilerGeneratedAttribute]
public void set_OperationType(Nullable`1<StorageServiceOperationType> value);
    [CompilerGeneratedAttribute]
public Nullable`1<StorageServiceType> get_ServiceType();
    [CompilerGeneratedAttribute]
public void set_ServiceType(Nullable`1<StorageServiceType> value);
    [CompilerGeneratedAttribute]
public string get_RequestedObjectKey();
    [CompilerGeneratedAttribute]
public void set_RequestedObjectKey(string value);
    public bool get_IsBlobWrite();
    public static StorageAnalyticsLogEntry TryParse(String[] fields);
    public BlobPath ToBlobPath();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.StorageAnalyticsLogParser : object {
    private static string FieldPattern;
    private static int ColumnCount;
    private Version supportedVersion;
    private Regex _compiledRegex;
    private ILogger`1<BlobListener> _logger;
    public StorageAnalyticsLogParser(ILogger`1<BlobListener> logger);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.StorageAnalyticsLogParser/<ParseLogAsync>d__6")]
public Task`1<IEnumerable`1<StorageAnalyticsLogEntry>> ParseLogAsync(BlobBaseClient blob, CancellationToken cancellationToken);
    public static Version TryParseVersion(string line);
    public StorageAnalyticsLogEntry TryParseLogEntry(string line);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.StorageBlobScanInfoManager : object {
    private JsonSerializer _serializer;
    private string _hostId;
    private string _blobScanInfoDirectoryPath;
    private BlobContainerClient _blobContainerClient;
    public StorageBlobScanInfoManager(string hostId, BlobServiceClient blobClient);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.StorageBlobScanInfoManager/<LoadLatestScanAsync>d__5")]
public sealed virtual Task`1<Nullable`1<DateTime>> LoadLatestScanAsync(string storageAccountName, string containerName);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.StorageBlobScanInfoManager/<UpdateLatestScanAsync>d__6")]
public sealed virtual Task UpdateLatestScanAsync(string storageAccountName, string containerName, DateTime latestScan);
    private BlockBlobClient GetScanInfoBlobReference(string storageAccountName, string containerName);
}
internal enum Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.StorageServiceOperationType : Enum {
    public int value__;
    public static StorageServiceOperationType ClearPage;
    public static StorageServiceOperationType CopyBlob;
    public static StorageServiceOperationType CopyBlobDestination;
    public static StorageServiceOperationType SetBlobMetadata;
    public static StorageServiceOperationType SetBlobProperties;
    public static StorageServiceOperationType PutBlob;
    public static StorageServiceOperationType PutBlockList;
    public static StorageServiceOperationType PutPage;
}
internal enum Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Listeners.StorageServiceType : Enum {
    public int value__;
    public static StorageServiceType Blob;
    public static StorageServiceType Queue;
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.ParameterizedBlobPathSource : object {
    private string _containerNamePattern;
    private string _blobNamePattern;
    private BindingTemplateSource _template;
    public string ContainerNamePattern { get; }
    public string BlobNamePattern { get; }
    public IEnumerable`1<string> ParameterNames { get; }
    public ParameterizedBlobPathSource(string containerNamePattern, string blobNamePattern, BindingTemplateSource template);
    public sealed virtual string get_ContainerNamePattern();
    public sealed virtual string get_BlobNamePattern();
    public sealed virtual IEnumerable`1<string> get_ParameterNames();
    public sealed virtual IReadOnlyDictionary`2<string, object> CreateBindingData(BlobPath actualBlobPath);
    public virtual string ToString();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.QueueServiceClientProvider : StorageClientProvider`2<QueueServiceClient, QueueClientOptions> {
    private QueuesOptions _queuesOptions;
    private ILogger`1<QueueServiceClient> _logger;
    protected string ServiceUriSubDomain { get; }
    public QueueServiceClientProvider(IConfiguration configuration, AzureComponentFactory componentFactory, AzureEventSourceLogForwarder logForwarder, IOptions`1<QueuesOptions> queueOptions, ILogger`1<QueueServiceClient> logger);
    protected virtual string get_ServiceUriSubDomain();
    protected virtual QueueClientOptions CreateClientOptions(IConfiguration configuration);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.QueueServiceClientProvider/<HandleMessageDecodingFailed>d__6")]
private Task HandleMessageDecodingFailed(QueueMessageDecodingFailedEventArgs args);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.ReadBlobArgumentBinding : object {
    public static Task`1<Stream> TryBindStreamAsync(BlobBaseClient blob, ValueBindingContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.ReadBlobArgumentBinding/<TryBindStreamAsync>d__1")]
public static Task`1<Stream> TryBindStreamAsync(BlobBaseClient blob, CancellationToken cancellationToken, string eTag);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.ReadBlobArgumentBinding/<TryBindCacheAwareAsync>d__2")]
public static Task`1<ICacheAwareReadObject> TryBindCacheAwareAsync(BlobWithContainer`1<BlobBaseClient> blob, ValueBindingContext context, IFunctionDataCache functionDataCache);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.ReadBlobArgumentBinding/<GetFunctionDataCacheKey>d__3")]
private static Task`1<FunctionDataCacheKey> GetFunctionDataCacheKey(BlobWithContainer`1<BlobBaseClient> blob, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.StorageBlobConverter`1 : object {
    public sealed virtual T Convert(BlobBaseClient input);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.StorageLoadBalancerQueue : object {
    private static string SharedLoadBalancerQueueListenerFunctionId;
    private QueuesOptions _queueOptions;
    private ILoggerFactory _loggerFactory;
    private IWebJobsExceptionHandler _exceptionHandler;
    private SharedQueueWatcher _sharedWatcher;
    private QueueServiceClientProvider _queueServiceClientProvider;
    private IDrainModeManager _drainModeManager;
    public StorageLoadBalancerQueue(QueueServiceClientProvider queueServiceClientProvider, IOptions`1<QueuesOptions> queueOptions, IWebJobsExceptionHandler exceptionHandler, SharedQueueWatcher sharedWatcher, ILoggerFactory loggerFactory, IDrainModeManager drainModeManager);
    public sealed virtual IAsyncCollector`1<T> GetQueueWriter(string queue);
    private QueueClient Convert(string queueMoniker);
    public sealed virtual IListener CreateQueueListenr(string queue, string poisonQueue, Func`3<string, CancellationToken, Task`1<FunctionResult>> callback);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.TaskAsyncResult : object {
    private Task _task;
    private object _state;
    private bool _completedSynchronously;
    private AsyncCallback _callback;
    private bool _disposed;
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    public TaskAsyncResult(Task task, AsyncCallback callback, object state);
    public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    public sealed virtual void Dispose();
    public void End();
    private void InvokeCallback(Task ignore);
    private void ThrowIfDisposed();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.TaskAsyncResult`1 : object {
    private Task`1<TResult> _task;
    private object _state;
    private bool _completedSynchronously;
    private AsyncCallback _callback;
    private bool _disposed;
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    public TaskAsyncResult`1(Task`1<TResult> task, AsyncCallback callback, object state);
    public sealed virtual object get_AsyncState();
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    public sealed virtual void Dispose();
    public TResult End();
    private void InvokeCallback(Task ignore);
    private void ThrowIfDisposed();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Triggers.BlobTriggerAttributeBindingProvider : object {
    private INameResolver _nameResolver;
    private BlobServiceClientProvider _blobServiceClientProvider;
    private QueueServiceClientProvider _queueServiceClientProvider;
    private IHostIdProvider _hostIdProvider;
    private BlobsOptions _blobsOptions;
    private IWebJobsExceptionHandler _exceptionHandler;
    private IContextSetter`1<IBlobWrittenWatcher> _blobWrittenWatcherSetter;
    private BlobTriggerQueueWriterFactory _blobTriggerQueueWriterFactory;
    private ISharedContextProvider _sharedContextProvider;
    private IHostSingletonManager _singletonManager;
    private ILoggerFactory _loggerFactory;
    private ILogger _logger;
    private ConcurrencyManager _concurrencyManager;
    private IDrainModeManager _drainModeManager;
    public BlobTriggerAttributeBindingProvider(INameResolver nameResolver, BlobServiceClientProvider blobServiceClientProvider, QueueServiceClientProvider queueServiceClientProvider, IHostIdProvider hostIdProvider, IOptions`1<BlobsOptions> blobsOptions, IWebJobsExceptionHandler exceptionHandler, IContextSetter`1<IBlobWrittenWatcher> blobWrittenWatcherSetter, BlobTriggerQueueWriterFactory blobTriggerQueueWriterFactory, ISharedContextProvider sharedContextProvider, IHostSingletonManager singletonManager, ILoggerFactory loggerFactory, ConcurrencyManager concurrencyManager, IDrainModeManager drainModeManager);
    public sealed virtual Task`1<ITriggerBinding> TryCreateAsync(TriggerBindingProviderContext context);
    private string Resolve(string queueName);
}
[SharedListenerAttribute("SharedBlobQueueListener")]
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Triggers.BlobTriggerBinding : object {
    private ParameterInfo _parameter;
    private BlobServiceClient _hostBlobServiceClient;
    private QueueServiceClient _hostQueueServiceClient;
    private BlobServiceClient _dataBlobServiceClient;
    private QueueServiceClient _dataQueueServiceClient;
    private string _accountName;
    private IBlobPathSource _path;
    private IHostIdProvider _hostIdProvider;
    private BlobsOptions _blobsOptions;
    private IWebJobsExceptionHandler _exceptionHandler;
    private IContextSetter`1<IBlobWrittenWatcher> _blobWrittenWatcherSetter;
    private BlobTriggerQueueWriterFactory _blobTriggerQueueWriterFactory;
    private ISharedContextProvider _sharedContextProvider;
    private ILoggerFactory _loggerFactory;
    private IAsyncObjectToTypeConverter`1<BlobBaseClient> _converter;
    private IReadOnlyDictionary`2<string, Type> _bindingDataContract;
    private IHostSingletonManager _singletonManager;
    private BlobTriggerSource _blobTriggerSource;
    private ConcurrencyManager _concurrencyManager;
    private IDrainModeManager _drainModeManager;
    public Type TriggerValueType { get; }
    public IReadOnlyDictionary`2<string, Type> BindingDataContract { get; }
    public string ContainerName { get; }
    public string BlobName { get; }
    public string BlobPath { get; }
    public BlobTriggerBinding(ParameterInfo parameter, BlobServiceClient hostBlobServiceClient, QueueServiceClient hostQueueServiceClient, BlobServiceClient dataBlobServiceClient, QueueServiceClient dataQueueServiceClient, IBlobPathSource path, BlobTriggerSource blobTriggerSource, IHostIdProvider hostIdProvider, BlobsOptions blobsOptions, IWebJobsExceptionHandler exceptionHandler, IContextSetter`1<IBlobWrittenWatcher> blobWrittenWatcherSetter, BlobTriggerQueueWriterFactory blobTriggerQueueWriterFactory, ISharedContextProvider sharedContextProvider, IHostSingletonManager singletonManager, ILoggerFactory loggerFactory, ConcurrencyManager concurrencyManager, IDrainModeManager drainModeManager);
    public sealed virtual Type get_TriggerValueType();
    public sealed virtual IReadOnlyDictionary`2<string, Type> get_BindingDataContract();
    public string get_ContainerName();
    public string get_BlobName();
    public string get_BlobPath();
    private static IReadOnlyDictionary`2<string, Type> CreateBindingDataContract(IBlobPathSource path);
    private IReadOnlyDictionary`2<string, object> CreateBindingData(BlobBaseClient value, BlobProperties blobProperties);
    private static IAsyncObjectToTypeConverter`1<BlobBaseClient> CreateConverter(BlobServiceClient client);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Triggers.BlobTriggerBinding/<BindAsync>d__34")]
public sealed virtual Task`1<ITriggerData> BindAsync(object value, ValueBindingContext context);
    public sealed virtual Task`1<IListener> CreateListenerAsync(ListenerFactoryContext context);
    public sealed virtual ParameterDescriptor ToParameterDescriptor();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Triggers.StringToCloudBlobConverter : object {
    private BlobServiceClient _client;
    public StringToCloudBlobConverter(BlobServiceClient client);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Blobs.Triggers.StringToCloudBlobConverter/<ConvertAsync>d__2")]
public sealed virtual Task`1<BlobBaseClient> ConvertAsync(string input, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.BinaryDataExtensions : object {
    private static UTF8Encoding encoding;
    private static BinaryDataExtensions();
    [ExtensionAttribute]
public static string ToValidUTF8String(BinaryData binaryData);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Constants : object {
    public static string DateTimeFormatString;
    public static string WebJobsBlobExtensionName;
    public static string WebJobsQueueExtensionName;
    public static string AzureWebJobsStorage;
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.ContextAccessor`1 : object {
    private TValue _value;
    public TValue Value { get; }
    public sealed virtual TValue get_Value();
    public sealed virtual void SetValue(TValue value);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.AsyncConverter`2 : object {
    private IConverter`2<TInput, TOutput> _innerConverter;
    public AsyncConverter`2(IConverter`2<TInput, TOutput> innerConverter);
    public sealed virtual Task`1<TOutput> ConvertAsync(TInput input, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.CompositeAsyncObjectToTypeConverter`1 : object {
    private IEnumerable`1<IAsyncObjectToTypeConverter`1<T>> _converters;
    public CompositeAsyncObjectToTypeConverter`1(IEnumerable`1<IAsyncObjectToTypeConverter`1<T>> converters);
    public CompositeAsyncObjectToTypeConverter`1(IAsyncObjectToTypeConverter`1[] converters);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.CompositeAsyncObjectToTypeConverter`1/<TryConvertAsync>d__3")]
public sealed virtual Task`1<ConversionResult`1<T>> TryConvertAsync(object value, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.CompositeObjectToTypeConverter`1 : object {
    private IEnumerable`1<IObjectToTypeConverter`1<T>> _converters;
    public CompositeObjectToTypeConverter`1(IEnumerable`1<IObjectToTypeConverter`1<T>> converters);
    public CompositeObjectToTypeConverter`1(IObjectToTypeConverter`1[] converters);
    public sealed virtual bool TryConvert(object input, T& output);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.ConversionResult`1 : ValueType {
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    public bool Succeeded { get; public set; }
    public TResult Result { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
public void set_Succeeded(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(TResult value);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.IAsyncObjectToTypeConverter`1 {
    public abstract virtual Task`1<ConversionResult`1<TOutput>> TryConvertAsync(object input, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.IdentityConverter`1 : object {
    public sealed virtual TValue Convert(TValue input);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.IObjectToTypeConverter`1 {
    public abstract virtual bool TryConvert(object input, TOutput& output);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.HostQueueNames : object {
    private static string Prefix;
    private static string HostBlobTriggerQueuePrefix;
    private static string HostQueuePrefix;
    public static string BlobTriggerPoisonQueue;
    public static string GetHostBlobTriggerQueueName(string hostId);
    public static string GetHostQueueName(string hostId);
    public static bool IsHostQueue(string queueName);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.IContextGetter`1 {
    public TValue Value { get; }
    public abstract virtual TValue get_Value();
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.IContextSetter`1 {
    public abstract virtual void SetValue(TValue value);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.IFactory`1 {
    public abstract virtual T Create();
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.IMessageEnqueuedWatcher {
    public abstract virtual void Notify(string enqueuedInQueueName);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.CompositeListener : object {
    private IEnumerable`1<IListener> _listeners;
    private bool _disposed;
    public CompositeListener(IListener[] listeners);
    public CompositeListener(IEnumerable`1<IListener> listeners);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.CompositeListener/<StartAsync>d__4")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.CompositeListener/<StopAsync>d__5")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    private void ThrowIfDisposed();
    public sealed virtual IEnumerator`1<IListener> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.INotificationCommand {
    public abstract virtual void Notify();
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.ISharedContextProvider {
    public abstract virtual bool TryGetValue(string key, Object& value);
    public abstract virtual void SetValue(string key, object value);
    public abstract virtual TValue GetOrCreateInstance(IFactory`1<TValue> factory);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.ISharedListener {
    public abstract virtual void EnsureAllCanceled();
    public abstract virtual Task EnsureAllStartedAsync(CancellationToken cancellationToken);
    public abstract virtual Task EnsureAllStoppedAsync(CancellationToken cancellationToken);
    public abstract virtual void EnsureAllDisposed();
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.ITriggerExecutor`1 {
    public abstract virtual Task`1<FunctionResult> ExecuteAsync(TTriggerValue value, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueListener : object {
    private ITaskSeriesTimer _timer;
    private IDelayStrategy _delayStrategy;
    private QueueClient _queue;
    private QueueClient _poisonQueue;
    private ITriggerExecutor`1<QueueMessage> _triggerExecutor;
    private IWebJobsExceptionHandler _exceptionHandler;
    private IMessageEnqueuedWatcher _sharedWatcher;
    private List`1<Task> _processing;
    private object _stopWaitingTaskSourceLock;
    private QueuesOptions _queueOptions;
    private QueueProcessor _queueProcessor;
    private TimeSpan _visibilityTimeout;
    private ILogger`1<QueueListener> _logger;
    private FunctionDescriptor _functionDescriptor;
    private string _functionId;
    private CancellationTokenSource _shutdownCancellationTokenSource;
    private CancellationTokenSource _executionCancellationTokenSource;
    private Lazy`1<QueueTargetScaler> _targetScaler;
    private Lazy`1<QueueScaleMonitor> _scaleMonitor;
    private IDrainModeManager _drainModeManager;
    private Nullable`1<bool> _queueExists;
    private bool _foundMessageSinceLastDelay;
    private bool _disposed;
    private TaskCompletionSource`1<object> _stopWaitingTaskSource;
    private ConcurrencyManager _concurrencyManager;
    private string _details;
    [CompilerGeneratedAttribute]
private TimeSpan <MinimumVisibilityRenewalInterval>k__BackingField;
    internal TimeSpan MinimumVisibilityRenewalInterval { get; internal set; }
    public QueueListener(QueueClient queue, QueueClient poisonQueue, ITriggerExecutor`1<QueueMessage> triggerExecutor, IWebJobsExceptionHandler exceptionHandler, ILoggerFactory loggerFactory, SharedQueueWatcher sharedWatcher, QueuesOptions queueOptions, QueueProcessor queueProcessor, FunctionDescriptor functionDescriptor, ConcurrencyManager concurrencyManager, string functionId, Nullable`1<TimeSpan> maxPollingInterval, IDrainModeManager drainModeManager);
    [CompilerGeneratedAttribute]
internal TimeSpan get_MinimumVisibilityRenewalInterval();
    [CompilerGeneratedAttribute]
internal void set_MinimumVisibilityRenewalInterval(TimeSpan value);
    public sealed virtual void Cancel();
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueListener/<StopAsync>d__34")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueListener/<ExecuteAsync>d__36")]
public sealed virtual Task`1<TaskSeriesCommandResult> ExecuteAsync(CancellationToken cancellationToken);
    public sealed virtual void Notify();
    internal int GetMessageReceiveCount();
    private Task CreateDelayWithNotificationTask();
    private TaskSeriesCommandResult CreateBackoffResult();
    private TaskSeriesCommandResult CreateDelayResult(TimeSpan delay);
    private TaskSeriesCommandResult CreateSucceededResult();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueListener/<WaitForNewBatchThreshold>d__43")]
private Task WaitForNewBatchThreshold();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueListener/<ProcessMessageAsync>d__44")]
internal Task ProcessMessageAsync(QueueMessage message, TimeSpan visibilityTimeout, CancellationToken cancellationToken);
    private ITaskSeriesTimer CreateUpdateMessageVisibilityTimer(QueueClient queue, QueueMessage message, TimeSpan visibilityTimeout, IWebJobsExceptionHandler exceptionHandler, Action`1<UpdateReceipt> onUpdateReceipt);
    private void ThrowIfDisposed();
    internal static void RegisterSharedWatcherWithQueueProcessor(QueueProcessor queueProcessor, IMessageEnqueuedWatcher sharedWatcher);
    public sealed virtual ITargetScaler GetTargetScaler();
    public sealed virtual IScaleMonitor GetMonitor();
    [CompilerGeneratedAttribute]
private void <StopAsync>b__34_0();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueMetricsProvider : object {
    private QueueClient _queue;
    private ILogger _logger;
    public QueueMetricsProvider(QueueClient queue, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueMetricsProvider/<GetQueueLengthAsync>d__3")]
public Task`1<int> GetQueueLengthAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueMetricsProvider/<GetMetricsAsync>d__4")]
public Task`1<QueueTriggerMetrics> GetMetricsAsync();
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueuePollingIntervals : object {
    public static TimeSpan Minimum;
    public static TimeSpan DefaultMaximum;
    private static QueuePollingIntervals();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueScaleMonitor : object {
    private static int NumberOfSamplesToConsider;
    private QueueClient _queue;
    private ILogger _logger;
    private ScaleMonitorDescriptor _scaleMonitorDescriptor;
    private QueueMetricsProvider _queueMetricsProvider;
    public ScaleMonitorDescriptor Descriptor { get; }
    public QueueScaleMonitor(string functionId, QueueClient queue, ILoggerFactory loggerFactory);
    public sealed virtual ScaleMonitorDescriptor get_Descriptor();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueScaleMonitor/<Microsoft-Azure-WebJobs-Host-Scale-IScaleMonitor-GetMetricsAsync>d__9")]
private sealed virtual override Task`1<ScaleMetrics> Microsoft.Azure.WebJobs.Host.Scale.IScaleMonitor.GetMetricsAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueScaleMonitor/<GetMetricsAsync>d__10")]
public sealed virtual Task`1<QueueTriggerMetrics> GetMetricsAsync();
    private sealed virtual override ScaleStatus Microsoft.Azure.WebJobs.Host.Scale.IScaleMonitor.GetScaleStatus(ScaleStatusContext context);
    public sealed virtual ScaleStatus GetScaleStatus(ScaleStatusContext`1<QueueTriggerMetrics> context);
    private ScaleStatus GetScaleStatusCore(int workerCount, QueueTriggerMetrics[] metrics);
    private static bool IsTrueForLastN(IList`1<QueueTriggerMetrics> samples, int count, Func`3<QueueTriggerMetrics, QueueTriggerMetrics, bool> predicate);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueTargetScaler : object {
    private string _functionId;
    private string _queueName;
    private QueueMetricsProvider _queueMetricsProvider;
    private TargetScalerDescriptor _targetScalerDescriptor;
    private QueuesOptions _options;
    private ILogger _logger;
    public TargetScalerDescriptor TargetScalerDescriptor { get; }
    internal QueueTargetScaler(string functionId, QueueClient queueClient, QueuesOptions options, ILoggerFactory loggerFactory);
    public sealed virtual TargetScalerDescriptor get_TargetScalerDescriptor();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueTargetScaler/<GetScaleResultAsync>d__10")]
public sealed virtual Task`1<TargetScalerResult> GetScaleResultAsync(TargetScalerContext context);
    internal TargetScalerResult GetScaleResultInternal(TargetScalerContext context, int queueLength);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueTriggerMetrics : ScaleMetrics {
    [CompilerGeneratedAttribute]
private int <QueueLength>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <QueueTime>k__BackingField;
    public int QueueLength { get; public set; }
    public TimeSpan QueueTime { get; public set; }
    [CompilerGeneratedAttribute]
public int get_QueueLength();
    [CompilerGeneratedAttribute]
public void set_QueueLength(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_QueueTime();
    [CompilerGeneratedAttribute]
public void set_QueueTime(TimeSpan value);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.SharedContextProvider : object {
    private IDictionary`2<Type, object> _instances;
    private IDictionary`2<string, object> _items;
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual void SetValue(string key, object value);
    public sealed virtual T GetOrCreateInstance(IFactory`1<T> factory);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.SharedQueueWatcher : object {
    private ConcurrentDictionary`2<string, ConcurrentBag`1<INotificationCommand>> _registrations;
    public sealed virtual void Notify(string enqueuedInQueueName);
    public void Register(string queueName, INotificationCommand notification);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.UpdateQueueMessageVisibilityCommand : object {
    private QueueClient _queue;
    private QueueMessage modreq(System.Runtime.CompilerServices.IsVolatile) _message;
    private TimeSpan _visibilityTimeout;
    private IDelayStrategy _speedupStrategy;
    private Action`1<UpdateReceipt> _onUpdateReceipt;
    public UpdateQueueMessageVisibilityCommand(QueueClient queue, QueueMessage message, TimeSpan visibilityTimeout, IDelayStrategy speedupStrategy, Action`1<UpdateReceipt> onUpdateReceipt);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.UpdateQueueMessageVisibilityCommand/<ExecuteAsync>d__6")]
public sealed virtual Task`1<TaskSeriesCommandResult> ExecuteAsync(CancellationToken cancellationToken);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Protocols.JsonSerialization : object {
    private static JsonSerializerSettings JsonSerializerSettings;
    private static JsonSerializer JsonSerializer;
    public static JsonSerializerSettings Settings { get; }
    internal static JsonSerializer Serializer { get; }
    private static JsonSerialization();
    public static JsonSerializerSettings get_Settings();
    internal static JsonSerializer get_Serializer();
    internal static void ApplySettings(JsonReader reader);
    internal static void ApplySettings(JsonWriter writer);
    internal static JsonTextReader CreateJsonTextReader(TextReader reader);
    internal static JsonTextWriter CreateJsonTextWriter(TextWriter textWriter);
    public static bool IsJsonObject(string input);
    internal static JObject ParseJObject(string json);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.QueueMessageExtensions : object {
    [ExtensionAttribute]
public static string TryGetAsString(QueueMessage message, ILogger logger);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.RequestFailedExceptionExtensions : object {
    [ExtensionAttribute]
public static bool IsConflictBlobAlreadyExists(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsConflictLeaseIdMismatchWithLeaseOperation(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsNotFoundContainerNotFound(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsNotFoundBlobOrContainerNotFound(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsPreconditionFailedLeaseIdMissing(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsPreconditionFailedLeaseLost(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsServerSideError(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsNotFound(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsOk(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsBadRequestPopReceiptMismatch(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsConflictQueueBeingDeletedOrDisabled(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsNotFoundMessageOrQueueNotFound(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsNotFoundQueueNotFound(RequestFailedException exception);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.SkuUtility : object {
    private static string AzureWebsiteSku;
    private static string DynamicSku;
    private static Lazy`1<bool> s_isDynamicSku;
    private static Lazy`1<int> s_processorCount;
    public static bool IsDynamicSku { get; }
    public static int ProcessorCount { get; }
    private static SkuUtility();
    private static bool ReadIsDynamicSku();
    private static int GetProcessorCount(bool isDynamicSku);
    public static bool get_IsDynamicSku();
    public static int get_ProcessorCount();
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.StorageQueueExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.StorageQueueExtensions/<AddMessageAndCreateIfNotExistsAsync>d__0")]
[ExtensionAttribute]
public static Task`1<SendReceipt> AddMessageAndCreateIfNotExistsAsync(QueueClient queue, BinaryData body, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.IDelayStrategy {
    public abstract virtual TimeSpan GetNextDelay(bool executionSucceeded);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.IRecurrentCommand {
    public abstract virtual Task`1<bool> TryExecuteAsync(CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.ITaskSeriesCommand {
    public abstract virtual Task`1<TaskSeriesCommandResult> ExecuteAsync(CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.ITaskSeriesTimer {
    public abstract virtual void Start();
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
    public abstract virtual void Cancel();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.LinearSpeedupStrategy : object {
    private TimeSpan _normalInterval;
    private TimeSpan _minimumInterval;
    private int _failureSpeedupDivisor;
    private TimeSpan _currentInterval;
    public LinearSpeedupStrategy(TimeSpan normalInterval, TimeSpan minimumInterval);
    public LinearSpeedupStrategy(TimeSpan normalInterval, TimeSpan minimumInterval, int failureSpeedupDivisor);
    public sealed virtual TimeSpan GetNextDelay(bool executionSucceeded);
    private static TimeSpan Max(TimeSpan x, TimeSpan y);
    public static ITaskSeriesTimer CreateTimer(IRecurrentCommand command, TimeSpan normalInterval, TimeSpan minimumInterval, IWebJobsExceptionHandler exceptionHandler);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.RandomExtensions : object {
    [ExtensionAttribute]
public static double Next(Random random, double minValue, double maxValue);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.RandomizedExponentialBackoffStrategy : object {
    public static double RandomizationFactor;
    private TimeSpan _minimumInterval;
    private TimeSpan _maximumInterval;
    private TimeSpan _deltaBackoff;
    private TimeSpan _currentInterval;
    private UInt32 _backoffExponent;
    private Random _random;
    public RandomizedExponentialBackoffStrategy(TimeSpan minimumInterval, TimeSpan maximumInterval);
    public RandomizedExponentialBackoffStrategy(TimeSpan minimumInterval, TimeSpan maximumInterval, TimeSpan deltaBackoff);
    public sealed virtual TimeSpan GetNextDelay(bool executionSucceeded);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.RecurrentTaskSeriesCommand : object {
    private IRecurrentCommand _innerCommand;
    private IDelayStrategy _delayStrategy;
    public RecurrentTaskSeriesCommand(IRecurrentCommand innerCommand, IDelayStrategy delayStrategy);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.RecurrentTaskSeriesCommand/<ExecuteAsync>d__3")]
public sealed virtual Task`1<TaskSeriesCommandResult> ExecuteAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.TaskSeriesCommandResult : ValueType {
    private Task _wait;
    public Task Wait { get; }
    public TaskSeriesCommandResult(Task wait);
    public Task get_Wait();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.TaskSeriesTimer : object {
    private ITaskSeriesCommand _command;
    private IWebJobsExceptionHandler _exceptionHandler;
    private Task _initialWait;
    private CancellationTokenSource _cancellationTokenSource;
    private bool _started;
    private bool _stopped;
    private Task _run;
    private bool _disposed;
    public TaskSeriesTimer(ITaskSeriesCommand command, IWebJobsExceptionHandler exceptionHandler, Task initialWait);
    public sealed virtual void Start();
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.TaskSeriesTimer/<StopAsyncCore>d__11")]
private Task StopAsyncCore(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.TaskSeriesTimer/<RunAsync>d__14")]
private Task RunAsync(CancellationToken cancellationToken);
    private void ThrowIfDisposed();
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Triggers.ITriggerDataArgumentBinding`1 {
    public Type ValueType { get; }
    public IReadOnlyDictionary`2<string, Type> BindingDataContract { get; }
    public abstract virtual Type get_ValueType();
    public abstract virtual IReadOnlyDictionary`2<string, Type> get_BindingDataContract();
    public abstract virtual Task`1<ITriggerData> BindAsync(TTriggerValue value, ValueBindingContext context);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.TypeUtility : object {
    internal static Attribute GetHierarchicalAttributeOrNull(ParameterInfo parameter, Type attributeType);
    internal static Attribute GetHierarchicalAttributeOrNull(MethodInfo method, Type type);
    internal static TAttribute GetResolvedAttribute(ParameterInfo parameter);
}
public class Microsoft.Azure.WebJobs.Host.BlobsOptions : object {
    private static int DefaultPoisonBlobThreshold;
    private int _maxDegreeOfParallelism;
    private int _poisonBlobThreshold;
    public int MaxDegreeOfParallelism { get; public set; }
    public int PoisonBlobThreshold { get; public set; }
    public int get_MaxDegreeOfParallelism();
    public void set_MaxDegreeOfParallelism(int value);
    public int get_PoisonBlobThreshold();
    public void set_PoisonBlobThreshold(int value);
    [EditorBrowsableAttribute("1")]
private sealed virtual override string Microsoft.Azure.WebJobs.Hosting.IOptionsFormatter.Format();
}
internal class Microsoft.Azure.WebJobs.Host.Queues.PoisonMessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private QueueMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueClient <PoisonQueue>k__BackingField;
    public QueueMessage Message { get; private set; }
    public QueueClient PoisonQueue { get; private set; }
    public PoisonMessageEventArgs(QueueMessage message, QueueClient poisonQueue);
    [CompilerGeneratedAttribute]
public QueueMessage get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(QueueMessage value);
    [CompilerGeneratedAttribute]
public QueueClient get_PoisonQueue();
    [CompilerGeneratedAttribute]
private void set_PoisonQueue(QueueClient value);
}
internal class Microsoft.Azure.WebJobs.Host.Queues.QueueProcessor : object {
    private QueueClient _queue;
    private QueueClient _poisonQueue;
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private Func`3<QueueProcessor, PoisonMessageEventArgs, Task> MessageAddedToPoisonQueueAsync;
    [CompilerGeneratedAttribute]
private QueuesOptions <QueuesOptions>k__BackingField;
    internal QueuesOptions QueuesOptions { get; private set; }
    protected internal QueueProcessor(QueueProcessorOptions queueProcessorOptions);
    [CompilerGeneratedAttribute]
public void add_MessageAddedToPoisonQueueAsync(Func`3<QueueProcessor, PoisonMessageEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public void remove_MessageAddedToPoisonQueueAsync(Func`3<QueueProcessor, PoisonMessageEventArgs, Task> value);
    [CompilerGeneratedAttribute]
internal QueuesOptions get_QueuesOptions();
    [CompilerGeneratedAttribute]
private void set_QueuesOptions(QueuesOptions value);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Queues.QueueProcessor/<BeginProcessingMessageAsync>d__11")]
protected internal virtual Task`1<bool> BeginProcessingMessageAsync(QueueMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Queues.QueueProcessor/<CompleteProcessingMessageAsync>d__12")]
protected internal virtual Task CompleteProcessingMessageAsync(QueueMessage message, FunctionResult result, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Queues.QueueProcessor/<HandlePoisonMessageAsync>d__13")]
internal Task HandlePoisonMessageAsync(QueueMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Queues.QueueProcessor/<CopyMessageToPoisonQueueAsync>d__14")]
protected virtual Task CopyMessageToPoisonQueueAsync(QueueMessage message, QueueClient poisonQueue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Queues.QueueProcessor/<ReleaseMessageAsync>d__15")]
protected virtual Task ReleaseMessageAsync(QueueMessage message, FunctionResult result, TimeSpan visibilityTimeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Queues.QueueProcessor/<DeleteMessageAsync>d__16")]
protected virtual Task DeleteMessageAsync(QueueMessage message, CancellationToken cancellationToken);
    protected internal virtual Task OnMessageAddedToPoisonQueueAsync(PoisonMessageEventArgs e);
}
internal class Microsoft.Azure.WebJobs.Host.Queues.QueueProcessorOptions : object {
    [CompilerGeneratedAttribute]
private QueueClient <Queue>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueClient <PoisonQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private QueuesOptions <Options>k__BackingField;
    public QueueClient Queue { get; private set; }
    public QueueClient PoisonQueue { get; private set; }
    public ILogger Logger { get; private set; }
    public QueuesOptions Options { get; private set; }
    internal QueueProcessorOptions(QueueClient queue, ILoggerFactory loggerFactory, QueuesOptions options, QueueClient poisonQueue);
    [CompilerGeneratedAttribute]
public QueueClient get_Queue();
    [CompilerGeneratedAttribute]
private void set_Queue(QueueClient value);
    [CompilerGeneratedAttribute]
public QueueClient get_PoisonQueue();
    [CompilerGeneratedAttribute]
private void set_PoisonQueue(QueueClient value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public QueuesOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(QueuesOptions value);
}
internal class Microsoft.Azure.WebJobs.Host.QueuesOptions : object {
    private static int DefaultMaxDequeueCount;
    private static int DefaultBatchSize;
    internal static int MaxBatchSize;
    private int _batchSize;
    private int _newBatchThreshold;
    private int _processorCount;
    private TimeSpan _maxPollingInterval;
    private TimeSpan _visibilityTimeout;
    private int _maxDequeueCount;
    private QueueMessageEncoding _messageEncoding;
    public int BatchSize { get; public set; }
    public int NewBatchThreshold { get; public set; }
    public TimeSpan MaxPollingInterval { get; public set; }
    public int MaxDequeueCount { get; public set; }
    public TimeSpan VisibilityTimeout { get; public set; }
    public QueueMessageEncoding MessageEncoding { get; public set; }
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public int get_NewBatchThreshold();
    public void set_NewBatchThreshold(int value);
    public TimeSpan get_MaxPollingInterval();
    public void set_MaxPollingInterval(TimeSpan value);
    public int get_MaxDequeueCount();
    public void set_MaxDequeueCount(int value);
    public TimeSpan get_VisibilityTimeout();
    public void set_VisibilityTimeout(TimeSpan value);
    public QueueMessageEncoding get_MessageEncoding();
    public void set_MessageEncoding(QueueMessageEncoding value);
    [EditorBrowsableAttribute("1")]
private sealed virtual override string Microsoft.Azure.WebJobs.Hosting.IOptionsFormatter.Format();
    internal QueuesOptions Clone();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.StorageBlobsWebJobsBuilderExtensions : object {
    [ExtensionAttribute]
public static IWebJobsBuilder AddAzureStorageBlobs(IWebJobsBuilder builder, Action`1<BlobsOptions> configureBlobs);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static IWebJobsBuilder AddAzureStorageBlobsScaleForTrigger(IWebJobsBuilder builder, TriggerMetadata triggerMetadata);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
