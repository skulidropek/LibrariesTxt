internal abstract class Microsoft.Azure.WebJobs.Extensions.Clients.Shared.StorageClientProvider`2 : object {
    private IConfiguration _configuration;
    private AzureComponentFactory _componentFactory;
    private AzureEventSourceLogForwarder _logForwarder;
    private ILogger _logger;
    public static string DefaultStorageEndpointSuffix;
    protected string ServiceUriSubDomain { get; }
    public StorageClientProvider`2(IConfiguration configuration, AzureComponentFactory componentFactory, AzureEventSourceLogForwarder logForwarder, ILogger`1<TClient> logger);
    protected abstract virtual string get_ServiceUriSubDomain();
    public virtual TClient Get(string name, INameResolver resolver);
    public virtual TClient Get(string name);
    public IConfigurationSection GetWebJobsConnectionStringSection(string name);
    protected virtual TClient CreateClient(IConfiguration configuration, TokenCredential tokenCredential, TClientOptions options);
    public virtual TClient GetHost();
    protected virtual TClientOptions CreateClientOptions(IConfiguration configuration);
    protected virtual bool TryGetServiceUri(IConfiguration configuration, Uri& serviceUri);
    protected virtual Uri FormatServiceUri(string accountName, string defaultProtocol, string endpointSuffix);
    protected static bool IsConnectionStringPresent(IConfiguration configuration);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Clients.Shared.WebJobsConfigurationExtensions : object {
    private static string WebJobsConfigurationSectionName;
    [ExtensionAttribute]
public static IConfigurationSection GetWebJobsConnectionStringSection(IConfiguration configuration, string connectionStringName);
    public static string GetPrefixedConnectionStringName(string connectionStringName);
    [ExtensionAttribute]
public static IConfigurationSection GetConnectionStringOrSetting(IConfiguration configuration, string connectionName);
}
public class Microsoft.Azure.WebJobs.Extensions.Storage.AzureStorageQueuesWebJobsStartup : object {
    public sealed virtual void Configure(IWebJobsBuilder builder);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.BinaryDataExtensions : object {
    private static UTF8Encoding encoding;
    private static BinaryDataExtensions();
    [ExtensionAttribute]
public static string ToValidUTF8String(BinaryData binaryData);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Constants : object {
    public static string DateTimeFormatString;
    public static string WebJobsBlobExtensionName;
    public static string WebJobsQueueExtensionName;
    public static string AzureWebJobsStorage;
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.ContextAccessor`1 : object {
    private TValue _value;
    public TValue Value { get; }
    public sealed virtual TValue get_Value();
    public sealed virtual void SetValue(TValue value);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.AsyncConverter`2 : object {
    private IConverter`2<TInput, TOutput> _innerConverter;
    public AsyncConverter`2(IConverter`2<TInput, TOutput> innerConverter);
    public sealed virtual Task`1<TOutput> ConvertAsync(TInput input, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.CompositeAsyncObjectToTypeConverter`1 : object {
    private IEnumerable`1<IAsyncObjectToTypeConverter`1<T>> _converters;
    public CompositeAsyncObjectToTypeConverter`1(IEnumerable`1<IAsyncObjectToTypeConverter`1<T>> converters);
    public CompositeAsyncObjectToTypeConverter`1(IAsyncObjectToTypeConverter`1[] converters);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.CompositeAsyncObjectToTypeConverter`1/<TryConvertAsync>d__3")]
public sealed virtual Task`1<ConversionResult`1<T>> TryConvertAsync(object value, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.CompositeObjectToTypeConverter`1 : object {
    private IEnumerable`1<IObjectToTypeConverter`1<T>> _converters;
    public CompositeObjectToTypeConverter`1(IEnumerable`1<IObjectToTypeConverter`1<T>> converters);
    public CompositeObjectToTypeConverter`1(IObjectToTypeConverter`1[] converters);
    public sealed virtual bool TryConvert(object input, T& output);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.ConversionResult`1 : ValueType {
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    public bool Succeeded { get; public set; }
    public TResult Result { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
public void set_Succeeded(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(TResult value);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.IAsyncObjectToTypeConverter`1 {
    public abstract virtual Task`1<ConversionResult`1<TOutput>> TryConvertAsync(object input, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.IdentityConverter`1 : object {
    public sealed virtual TValue Convert(TValue input);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Converters.IObjectToTypeConverter`1 {
    public abstract virtual bool TryConvert(object input, TOutput& output);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.HostQueueNames : object {
    private static string Prefix;
    private static string HostBlobTriggerQueuePrefix;
    private static string HostQueuePrefix;
    public static string BlobTriggerPoisonQueue;
    public static string GetHostBlobTriggerQueueName(string hostId);
    public static string GetHostQueueName(string hostId);
    public static bool IsHostQueue(string queueName);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.IContextGetter`1 {
    public TValue Value { get; }
    public abstract virtual TValue get_Value();
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.IContextSetter`1 {
    public abstract virtual void SetValue(TValue value);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.IFactory`1 {
    public abstract virtual T Create();
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.IMessageEnqueuedWatcher {
    public abstract virtual void Notify(string enqueuedInQueueName);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.CompositeListener : object {
    private IEnumerable`1<IListener> _listeners;
    private bool _disposed;
    public CompositeListener(IListener[] listeners);
    public CompositeListener(IEnumerable`1<IListener> listeners);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.CompositeListener/<StartAsync>d__4")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.CompositeListener/<StopAsync>d__5")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    private void ThrowIfDisposed();
    public sealed virtual IEnumerator`1<IListener> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.INotificationCommand {
    public abstract virtual void Notify();
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.ISharedContextProvider {
    public abstract virtual bool TryGetValue(string key, Object& value);
    public abstract virtual void SetValue(string key, object value);
    public abstract virtual TValue GetOrCreateInstance(IFactory`1<TValue> factory);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.ISharedListener {
    public abstract virtual void EnsureAllCanceled();
    public abstract virtual Task EnsureAllStartedAsync(CancellationToken cancellationToken);
    public abstract virtual Task EnsureAllStoppedAsync(CancellationToken cancellationToken);
    public abstract virtual void EnsureAllDisposed();
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.ITriggerExecutor`1 {
    public abstract virtual Task`1<FunctionResult> ExecuteAsync(TTriggerValue value, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueListener : object {
    private ITaskSeriesTimer _timer;
    private IDelayStrategy _delayStrategy;
    private QueueClient _queue;
    private QueueClient _poisonQueue;
    private ITriggerExecutor`1<QueueMessage> _triggerExecutor;
    private IWebJobsExceptionHandler _exceptionHandler;
    private IMessageEnqueuedWatcher _sharedWatcher;
    private List`1<Task> _processing;
    private object _stopWaitingTaskSourceLock;
    private QueuesOptions _queueOptions;
    private QueueProcessor _queueProcessor;
    private TimeSpan _visibilityTimeout;
    private ILogger`1<QueueListener> _logger;
    private FunctionDescriptor _functionDescriptor;
    private string _functionId;
    private CancellationTokenSource _shutdownCancellationTokenSource;
    private CancellationTokenSource _executionCancellationTokenSource;
    private Lazy`1<QueueTargetScaler> _targetScaler;
    private Lazy`1<QueueScaleMonitor> _scaleMonitor;
    private IDrainModeManager _drainModeManager;
    private Nullable`1<bool> _queueExists;
    private bool _foundMessageSinceLastDelay;
    private bool _disposed;
    private TaskCompletionSource`1<object> _stopWaitingTaskSource;
    private ConcurrencyManager _concurrencyManager;
    private string _details;
    [CompilerGeneratedAttribute]
private TimeSpan <MinimumVisibilityRenewalInterval>k__BackingField;
    internal TimeSpan MinimumVisibilityRenewalInterval { get; internal set; }
    public QueueListener(QueueClient queue, QueueClient poisonQueue, ITriggerExecutor`1<QueueMessage> triggerExecutor, IWebJobsExceptionHandler exceptionHandler, ILoggerFactory loggerFactory, SharedQueueWatcher sharedWatcher, QueuesOptions queueOptions, QueueProcessor queueProcessor, FunctionDescriptor functionDescriptor, ConcurrencyManager concurrencyManager, string functionId, Nullable`1<TimeSpan> maxPollingInterval, IDrainModeManager drainModeManager);
    [CompilerGeneratedAttribute]
internal TimeSpan get_MinimumVisibilityRenewalInterval();
    [CompilerGeneratedAttribute]
internal void set_MinimumVisibilityRenewalInterval(TimeSpan value);
    public sealed virtual void Cancel();
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueListener/<StopAsync>d__34")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueListener/<ExecuteAsync>d__36")]
public sealed virtual Task`1<TaskSeriesCommandResult> ExecuteAsync(CancellationToken cancellationToken);
    public sealed virtual void Notify();
    internal int GetMessageReceiveCount();
    private Task CreateDelayWithNotificationTask();
    private TaskSeriesCommandResult CreateBackoffResult();
    private TaskSeriesCommandResult CreateDelayResult(TimeSpan delay);
    private TaskSeriesCommandResult CreateSucceededResult();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueListener/<WaitForNewBatchThreshold>d__43")]
private Task WaitForNewBatchThreshold();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueListener/<ProcessMessageAsync>d__44")]
internal Task ProcessMessageAsync(QueueMessage message, TimeSpan visibilityTimeout, CancellationToken cancellationToken);
    private ITaskSeriesTimer CreateUpdateMessageVisibilityTimer(QueueClient queue, QueueMessage message, TimeSpan visibilityTimeout, IWebJobsExceptionHandler exceptionHandler, Action`1<UpdateReceipt> onUpdateReceipt);
    private void ThrowIfDisposed();
    internal static void RegisterSharedWatcherWithQueueProcessor(QueueProcessor queueProcessor, IMessageEnqueuedWatcher sharedWatcher);
    public sealed virtual ITargetScaler GetTargetScaler();
    public sealed virtual IScaleMonitor GetMonitor();
    [CompilerGeneratedAttribute]
private void <StopAsync>b__34_0();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueMetricsProvider : object {
    private QueueClient _queue;
    private ILogger _logger;
    public QueueMetricsProvider(QueueClient queue, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueMetricsProvider/<GetQueueLengthAsync>d__3")]
public Task`1<int> GetQueueLengthAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueMetricsProvider/<GetMetricsAsync>d__4")]
public Task`1<QueueTriggerMetrics> GetMetricsAsync();
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueuePollingIntervals : object {
    public static TimeSpan Minimum;
    public static TimeSpan DefaultMaximum;
    private static QueuePollingIntervals();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueScaleMonitor : object {
    private static int NumberOfSamplesToConsider;
    private QueueClient _queue;
    private ILogger _logger;
    private ScaleMonitorDescriptor _scaleMonitorDescriptor;
    private QueueMetricsProvider _queueMetricsProvider;
    public ScaleMonitorDescriptor Descriptor { get; }
    public QueueScaleMonitor(string functionId, QueueClient queue, ILoggerFactory loggerFactory);
    public sealed virtual ScaleMonitorDescriptor get_Descriptor();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueScaleMonitor/<Microsoft-Azure-WebJobs-Host-Scale-IScaleMonitor-GetMetricsAsync>d__9")]
private sealed virtual override Task`1<ScaleMetrics> Microsoft.Azure.WebJobs.Host.Scale.IScaleMonitor.GetMetricsAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueScaleMonitor/<GetMetricsAsync>d__10")]
public sealed virtual Task`1<QueueTriggerMetrics> GetMetricsAsync();
    private sealed virtual override ScaleStatus Microsoft.Azure.WebJobs.Host.Scale.IScaleMonitor.GetScaleStatus(ScaleStatusContext context);
    public sealed virtual ScaleStatus GetScaleStatus(ScaleStatusContext`1<QueueTriggerMetrics> context);
    private ScaleStatus GetScaleStatusCore(int workerCount, QueueTriggerMetrics[] metrics);
    private static bool IsTrueForLastN(IList`1<QueueTriggerMetrics> samples, int count, Func`3<QueueTriggerMetrics, QueueTriggerMetrics, bool> predicate);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueTargetScaler : object {
    private string _functionId;
    private string _queueName;
    private QueueMetricsProvider _queueMetricsProvider;
    private TargetScalerDescriptor _targetScalerDescriptor;
    private QueuesOptions _options;
    private ILogger _logger;
    public TargetScalerDescriptor TargetScalerDescriptor { get; }
    internal QueueTargetScaler(string functionId, QueueClient queueClient, QueuesOptions options, ILoggerFactory loggerFactory);
    public sealed virtual TargetScalerDescriptor get_TargetScalerDescriptor();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueTargetScaler/<GetScaleResultAsync>d__10")]
public sealed virtual Task`1<TargetScalerResult> GetScaleResultAsync(TargetScalerContext context);
    internal TargetScalerResult GetScaleResultInternal(TargetScalerContext context, int queueLength);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.QueueTriggerMetrics : ScaleMetrics {
    [CompilerGeneratedAttribute]
private int <QueueLength>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <QueueTime>k__BackingField;
    public int QueueLength { get; public set; }
    public TimeSpan QueueTime { get; public set; }
    [CompilerGeneratedAttribute]
public int get_QueueLength();
    [CompilerGeneratedAttribute]
public void set_QueueLength(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_QueueTime();
    [CompilerGeneratedAttribute]
public void set_QueueTime(TimeSpan value);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.SharedContextProvider : object {
    private IDictionary`2<Type, object> _instances;
    private IDictionary`2<string, object> _items;
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual void SetValue(string key, object value);
    public sealed virtual T GetOrCreateInstance(IFactory`1<T> factory);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.SharedQueueWatcher : object {
    private ConcurrentDictionary`2<string, ConcurrentBag`1<INotificationCommand>> _registrations;
    public sealed virtual void Notify(string enqueuedInQueueName);
    public void Register(string queueName, INotificationCommand notification);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.UpdateQueueMessageVisibilityCommand : object {
    private QueueClient _queue;
    private QueueMessage modreq(System.Runtime.CompilerServices.IsVolatile) _message;
    private TimeSpan _visibilityTimeout;
    private IDelayStrategy _speedupStrategy;
    private Action`1<UpdateReceipt> _onUpdateReceipt;
    public UpdateQueueMessageVisibilityCommand(QueueClient queue, QueueMessage message, TimeSpan visibilityTimeout, IDelayStrategy speedupStrategy, Action`1<UpdateReceipt> onUpdateReceipt);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Listeners.UpdateQueueMessageVisibilityCommand/<ExecuteAsync>d__6")]
public sealed virtual Task`1<TaskSeriesCommandResult> ExecuteAsync(CancellationToken cancellationToken);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Protocols.JsonSerialization : object {
    private static JsonSerializerSettings JsonSerializerSettings;
    private static JsonSerializer JsonSerializer;
    public static JsonSerializerSettings Settings { get; }
    internal static JsonSerializer Serializer { get; }
    private static JsonSerialization();
    public static JsonSerializerSettings get_Settings();
    internal static JsonSerializer get_Serializer();
    internal static void ApplySettings(JsonReader reader);
    internal static void ApplySettings(JsonWriter writer);
    internal static JsonTextReader CreateJsonTextReader(TextReader reader);
    internal static JsonTextWriter CreateJsonTextWriter(TextWriter textWriter);
    public static bool IsJsonObject(string input);
    internal static JObject ParseJObject(string json);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.QueueMessageExtensions : object {
    [ExtensionAttribute]
public static string TryGetAsString(QueueMessage message, ILogger logger);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.RequestFailedExceptionExtensions : object {
    [ExtensionAttribute]
public static bool IsServerSideError(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsNotFound(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsOk(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsBadRequestPopReceiptMismatch(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsConflictQueueBeingDeletedOrDisabled(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsNotFoundMessageOrQueueNotFound(RequestFailedException exception);
    [ExtensionAttribute]
public static bool IsNotFoundQueueNotFound(RequestFailedException exception);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.SkuUtility : object {
    private static string AzureWebsiteSku;
    private static string DynamicSku;
    private static Lazy`1<bool> s_isDynamicSku;
    private static Lazy`1<int> s_processorCount;
    public static bool IsDynamicSku { get; }
    public static int ProcessorCount { get; }
    private static SkuUtility();
    private static bool ReadIsDynamicSku();
    private static int GetProcessorCount(bool isDynamicSku);
    public static bool get_IsDynamicSku();
    public static int get_ProcessorCount();
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.StorageQueueExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.StorageQueueExtensions/<AddMessageAndCreateIfNotExistsAsync>d__0")]
[ExtensionAttribute]
public static Task`1<SendReceipt> AddMessageAndCreateIfNotExistsAsync(QueueClient queue, BinaryData body, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.IDelayStrategy {
    public abstract virtual TimeSpan GetNextDelay(bool executionSucceeded);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.IRecurrentCommand {
    public abstract virtual Task`1<bool> TryExecuteAsync(CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.ITaskSeriesCommand {
    public abstract virtual Task`1<TaskSeriesCommandResult> ExecuteAsync(CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.ITaskSeriesTimer {
    public abstract virtual void Start();
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
    public abstract virtual void Cancel();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.LinearSpeedupStrategy : object {
    private TimeSpan _normalInterval;
    private TimeSpan _minimumInterval;
    private int _failureSpeedupDivisor;
    private TimeSpan _currentInterval;
    public LinearSpeedupStrategy(TimeSpan normalInterval, TimeSpan minimumInterval);
    public LinearSpeedupStrategy(TimeSpan normalInterval, TimeSpan minimumInterval, int failureSpeedupDivisor);
    public sealed virtual TimeSpan GetNextDelay(bool executionSucceeded);
    private static TimeSpan Max(TimeSpan x, TimeSpan y);
    public static ITaskSeriesTimer CreateTimer(IRecurrentCommand command, TimeSpan normalInterval, TimeSpan minimumInterval, IWebJobsExceptionHandler exceptionHandler);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.RandomExtensions : object {
    [ExtensionAttribute]
public static double Next(Random random, double minValue, double maxValue);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.RandomizedExponentialBackoffStrategy : object {
    public static double RandomizationFactor;
    private TimeSpan _minimumInterval;
    private TimeSpan _maximumInterval;
    private TimeSpan _deltaBackoff;
    private TimeSpan _currentInterval;
    private UInt32 _backoffExponent;
    private Random _random;
    public RandomizedExponentialBackoffStrategy(TimeSpan minimumInterval, TimeSpan maximumInterval);
    public RandomizedExponentialBackoffStrategy(TimeSpan minimumInterval, TimeSpan maximumInterval, TimeSpan deltaBackoff);
    public sealed virtual TimeSpan GetNextDelay(bool executionSucceeded);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.RecurrentTaskSeriesCommand : object {
    private IRecurrentCommand _innerCommand;
    private IDelayStrategy _delayStrategy;
    public RecurrentTaskSeriesCommand(IRecurrentCommand innerCommand, IDelayStrategy delayStrategy);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.RecurrentTaskSeriesCommand/<ExecuteAsync>d__3")]
public sealed virtual Task`1<TaskSeriesCommandResult> ExecuteAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.TaskSeriesCommandResult : ValueType {
    private Task _wait;
    public Task Wait { get; }
    public TaskSeriesCommandResult(Task wait);
    public Task get_Wait();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.TaskSeriesTimer : object {
    private ITaskSeriesCommand _command;
    private IWebJobsExceptionHandler _exceptionHandler;
    private Task _initialWait;
    private CancellationTokenSource _cancellationTokenSource;
    private bool _started;
    private bool _stopped;
    private Task _run;
    private bool _disposed;
    public TaskSeriesTimer(ITaskSeriesCommand command, IWebJobsExceptionHandler exceptionHandler, Task initialWait);
    public sealed virtual void Start();
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.TaskSeriesTimer/<StopAsyncCore>d__11")]
private Task StopAsyncCore(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Common.Timers.TaskSeriesTimer/<RunAsync>d__14")]
private Task RunAsync(CancellationToken cancellationToken);
    private void ThrowIfDisposed();
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Common.Triggers.ITriggerDataArgumentBinding`1 {
    public Type ValueType { get; }
    public IReadOnlyDictionary`2<string, Type> BindingDataContract { get; }
    public abstract virtual Type get_ValueType();
    public abstract virtual IReadOnlyDictionary`2<string, Type> get_BindingDataContract();
    public abstract virtual Task`1<ITriggerData> BindAsync(TTriggerValue value, ValueBindingContext context);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Common.TypeUtility : object {
    internal static Attribute GetHierarchicalAttributeOrNull(ParameterInfo parameter, Type attributeType);
    internal static Attribute GetHierarchicalAttributeOrNull(MethodInfo method, Type type);
    internal static TAttribute GetResolvedAttribute(ParameterInfo parameter);
}
[ExtensionAttribute("AzureStorageQueues", "Queues")]
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Config.QueuesExtensionConfigProvider : object {
    private IContextGetter`1<IMessageEnqueuedWatcher> _contextGetter;
    private QueueServiceClientProvider _queueServiceClientProvider;
    private QueueTriggerAttributeBindingProvider _triggerProvider;
    private QueueCausalityManager _queueCausalityManager;
    private IDrainModeManager _drainModeManager;
    public QueuesExtensionConfigProvider(QueueServiceClientProvider queueServiceClientProvider, IContextGetter`1<IMessageEnqueuedWatcher> contextGetter, QueueTriggerAttributeBindingProvider triggerProvider, QueueCausalityManager queueCausalityManager, IDrainModeManager drainModeManager);
    public sealed virtual void Initialize(ExtensionConfigContext context);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.DefaultQueueProcessorFactory : object {
    public virtual QueueProcessor Create(QueueProcessorOptions context);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Listeners.QueueListenerFactory : object {
    private static string poisonQueueSuffix;
    private QueueClient _queue;
    private QueueClient _poisonQueue;
    private QueuesOptions _queueOptions;
    private IWebJobsExceptionHandler _exceptionHandler;
    private SharedQueueWatcher _messageEnqueuedWatcherSetter;
    private ILoggerFactory _loggerFactory;
    private ITriggeredFunctionExecutor _executor;
    private FunctionDescriptor _descriptor;
    private IQueueProcessorFactory _queueProcessorFactory;
    private QueueCausalityManager _queueCausalityManager;
    private ConcurrencyManager _concurrencyManager;
    private IDrainModeManager _drainModeManager;
    public QueueListenerFactory(QueueServiceClient queueServiceClient, QueueClient queue, QueuesOptions queueOptions, IWebJobsExceptionHandler exceptionHandler, SharedQueueWatcher messageEnqueuedWatcherSetter, ILoggerFactory loggerFactory, ITriggeredFunctionExecutor executor, IQueueProcessorFactory queueProcessorFactory, QueueCausalityManager queueCausalityManager, FunctionDescriptor descriptor, ConcurrencyManager concurrencyManager, IDrainModeManager drainModeManager);
    private static QueueListenerFactory();
    public sealed virtual Task`1<IListener> CreateAsync(CancellationToken cancellationToken);
    internal static QueueProcessor CreateQueueProcessor(QueueClient queue, QueueClient poisonQueue, ILoggerFactory loggerFactory, IQueueProcessorFactory queueProcessorFactory, QueuesOptions queuesOptions, IMessageEnqueuedWatcher sharedWatcher);
    internal static QueueClient CreatePoisonQueueReference(QueueServiceClient client, string name);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Listeners.QueueScalerProvider : object {
    private TriggerMetadata _triggerMetadata;
    private IOptions`1<QueuesOptions> _options;
    private ILoggerFactory _loggerFactory;
    private QueueMetadata _queueMetadata;
    private QueueClient _queueClient;
    public QueueScalerProvider(IServiceProvider serviceProvider, TriggerMetadata triggerMetadata);
    public sealed virtual IScaleMonitor GetMonitor();
    public sealed virtual ITargetScaler GetTargetScaler();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Listeners.QueueTriggerExecutor : object {
    private ITriggeredFunctionExecutor _innerExecutor;
    private QueueCausalityManager _queueCausalityManager;
    public QueueTriggerExecutor(ITriggeredFunctionExecutor innerExecutor, QueueCausalityManager queueCausalityManager);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Listeners.QueueTriggerExecutor/<ExecuteAsync>d__3")]
public sealed virtual Task`1<FunctionResult> ExecuteAsync(QueueMessage value, CancellationToken cancellationToken);
    internal static Dictionary`2<string, string> PopulateTriggerDetails(QueueMessage value);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.QueueCausalityManager : object {
    private static string ParentGuidFieldName;
    private ILogger`1<QueueCausalityManager> _logger;
    public QueueCausalityManager(ILoggerFactory loggerFactory);
    public static void SetOwner(Guid functionOwner, JObject token);
    [DebuggerNonUserCodeAttribute]
public Nullable`1<Guid> GetOwner(QueueMessage msg);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.QueueClientExtensions : object {
    public static void ValidateQueueName(string name);
    public static bool IsValidQueueName(string name);
    private static bool IsValidQueueName(string name, String& errorMessage);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.QueueServiceClientProvider : StorageClientProvider`2<QueueServiceClient, QueueClientOptions> {
    private QueuesOptions _queuesOptions;
    private ILoggerFactory _loggerFactory;
    private ILogger`1<QueueServiceClient> _logger;
    private IQueueProcessorFactory _queueProcessorFactory;
    private SharedQueueWatcher _messageEnqueuedWatcher;
    protected string ServiceUriSubDomain { get; }
    public QueueServiceClientProvider(IConfiguration configuration, AzureComponentFactory componentFactory, AzureEventSourceLogForwarder logForwarder, IOptions`1<QueuesOptions> queueOptions, ILoggerFactory loggerFactory, ILogger`1<QueueServiceClient> logger, IQueueProcessorFactory queueProcessorFactory, SharedQueueWatcher messageEnqueuedWatcher);
    protected virtual string get_ServiceUriSubDomain();
    protected virtual QueueClientOptions CreateClientOptions(IConfiguration configuration);
    protected virtual QueueServiceClient CreateClient(IConfiguration configuration, TokenCredential tokenCredential, QueueClientOptions options);
    private SyncAsyncEventHandler`1<QueueMessageDecodingFailedEventArgs> CreateMessageDecodingFailedHandler(QueueServiceClient nonEncodingQueueServiceClient);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.QueueTriggerParameterDescriptor : TriggerParameterDescriptor {
    [CompilerGeneratedAttribute]
private string <AccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueueName>k__BackingField;
    public string AccountName { get; public set; }
    public string QueueName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccountName();
    [CompilerGeneratedAttribute]
public void set_AccountName(string value);
    [CompilerGeneratedAttribute]
public string get_QueueName();
    [CompilerGeneratedAttribute]
public void set_QueueName(string value);
    public virtual string GetTriggerReason(IDictionary`2<string, string> arguments);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.CloudQueueMessageDirectConverter : object {
    public sealed virtual QueueMessage Convert(QueueMessage input);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.CompositeArgumentBindingProvider : object {
    private IEnumerable`1<IQueueTriggerArgumentBindingProvider> _providers;
    public CompositeArgumentBindingProvider(IQueueTriggerArgumentBindingProvider[] providers);
    public sealed virtual ITriggerDataArgumentBinding`1<QueueMessage> TryCreate(ParameterInfo parameter);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.ConverterArgumentBindingProvider`1 : object {
    private IConverter`2<QueueMessage, T> _converter;
    private ILoggerFactory _loggerFactory;
    public ConverterArgumentBindingProvider`1(IConverter`2<QueueMessage, T> converter, ILoggerFactory loggerFactory);
    public sealed virtual ITriggerDataArgumentBinding`1<QueueMessage> TryCreate(ParameterInfo parameter);
}
internal interface Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.IQueueTriggerArgumentBindingProvider {
    public abstract virtual ITriggerDataArgumentBinding`1<QueueMessage> TryCreate(ParameterInfo parameter);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.OutputConverter`1 : object {
    private IConverter`2<TInput, QueueMessage> _innerConverter;
    public OutputConverter`1(IConverter`2<TInput, QueueMessage> innerConverter);
    public sealed virtual bool TryConvert(object input, QueueMessage& output);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.QueueMessageValueProvider : object {
    private QueueMessage _message;
    private object _value;
    private Type _valueType;
    private ILogger`1<QueueMessageValueProvider> _logger;
    public Type Type { get; }
    public QueueMessageValueProvider(QueueMessage message, object value, Type valueType, ILoggerFactory loggerFactory);
    public sealed virtual Type get_Type();
    public sealed virtual Task`1<object> GetValueAsync();
    public sealed virtual string ToInvokeString();
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.QueueTriggerAttributeBindingProvider : object {
    private IQueueTriggerArgumentBindingProvider _innerProvider;
    private INameResolver _nameResolver;
    private QueueServiceClientProvider _queueServiceClientProvider;
    private QueuesOptions _queueOptions;
    private IWebJobsExceptionHandler _exceptionHandler;
    private SharedQueueWatcher _messageEnqueuedWatcherSetter;
    private ILoggerFactory _loggerFactory;
    private IQueueProcessorFactory _queueProcessorFactory;
    private QueueCausalityManager _queueCausalityManager;
    private ConcurrencyManager _concurrencyManager;
    private IDrainModeManager _drainModeManager;
    public QueueTriggerAttributeBindingProvider(INameResolver nameResolver, QueueServiceClientProvider queueServiceClientProvider, IOptions`1<QueuesOptions> queueOptions, IWebJobsExceptionHandler exceptionHandler, SharedQueueWatcher messageEnqueuedWatcherSetter, ILoggerFactory loggerFactory, IQueueProcessorFactory queueProcessorFactory, QueueCausalityManager queueCausalityManager, ConcurrencyManager concurrencyManager, IDrainModeManager drainModeManager);
    public sealed virtual Task`1<ITriggerBinding> TryCreateAsync(TriggerBindingProviderContext context);
    private static string NormalizeAndValidate(string queueName);
    private string Resolve(string queueName);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.QueueTriggerBinding : object {
    private string _parameterName;
    private QueueServiceClient _queueServiceClient;
    private QueueClient _queue;
    private ITriggerDataArgumentBinding`1<QueueMessage> _argumentBinding;
    private IReadOnlyDictionary`2<string, Type> _bindingDataContract;
    private QueuesOptions _queueOptions;
    private IWebJobsExceptionHandler _exceptionHandler;
    private SharedQueueWatcher _messageEnqueuedWatcherSetter;
    private ILoggerFactory _loggerFactory;
    private ILogger`1<QueueTriggerBinding> _logger;
    private IObjectToTypeConverter`1<QueueMessage> _converter;
    private IQueueProcessorFactory _queueProcessorFactory;
    private QueueCausalityManager _queueCausalityManager;
    private ConcurrencyManager _concurrencyManager;
    private IDrainModeManager _drainModeManager;
    public Type TriggerValueType { get; }
    public IReadOnlyDictionary`2<string, Type> BindingDataContract { get; }
    public string QueueName { get; }
    public QueueTriggerBinding(string parameterName, QueueServiceClient queueServiceClient, QueueClient queue, ITriggerDataArgumentBinding`1<QueueMessage> argumentBinding, QueuesOptions queueOptions, IWebJobsExceptionHandler exceptionHandler, SharedQueueWatcher messageEnqueuedWatcherSetter, ILoggerFactory loggerFactory, IQueueProcessorFactory queueProcessorFactory, QueueCausalityManager queueCausalityManager, ConcurrencyManager concurrencyManager, IDrainModeManager drainModeManager);
    public sealed virtual Type get_TriggerValueType();
    public sealed virtual IReadOnlyDictionary`2<string, Type> get_BindingDataContract();
    public string get_QueueName();
    private static IReadOnlyDictionary`2<string, Type> CreateBindingDataContract(IReadOnlyDictionary`2<string, Type> argumentBindingContract);
    private static IObjectToTypeConverter`1<QueueMessage> CreateConverter(QueueClient queue);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.QueueTriggerBinding/<BindAsync>d__24")]
public sealed virtual Task`1<ITriggerData> BindAsync(object value, ValueBindingContext context);
    public sealed virtual Task`1<IListener> CreateListenerAsync(ListenerFactoryContext context);
    public sealed virtual ParameterDescriptor ToParameterDescriptor();
    private IReadOnlyDictionary`2<string, object> CreateBindingData(QueueMessage value, IReadOnlyDictionary`2<string, object> bindingDataFromValueType);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.StorageQueueMessageToBinaryDataConverter : object {
    public sealed virtual BinaryData Convert(QueueMessage input);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.StorageQueueMessageToByteArrayConverter : object {
    public sealed virtual Byte[] Convert(QueueMessage input);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.StorageQueueMessageToParameterBindingDataConverter : object {
    public sealed virtual ParameterBindingData Convert(QueueMessage input);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.StorageQueueMessageToStringConverter : object {
    public sealed virtual string Convert(QueueMessage input);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.StringToStorageQueueMessageConverter : object {
    private QueueClient _queue;
    public StringToStorageQueueMessageConverter(QueueClient queue);
    public sealed virtual QueueMessage Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Extensions.Storage.Queues.Triggers.UserTypeArgumentBindingProvider : object {
    private ILoggerFactory _loggerFactory;
    public UserTypeArgumentBindingProvider(ILoggerFactory loggerFactory);
    public sealed virtual ITriggerDataArgumentBinding`1<QueueMessage> TryCreate(ParameterInfo parameter);
}
public interface Microsoft.Azure.WebJobs.Host.Queues.IQueueProcessorFactory {
    public abstract virtual QueueProcessor Create(QueueProcessorOptions queueProcessorOptions);
}
public class Microsoft.Azure.WebJobs.Host.Queues.PoisonMessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private QueueMessage <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueClient <PoisonQueue>k__BackingField;
    public QueueMessage Message { get; private set; }
    public QueueClient PoisonQueue { get; private set; }
    public PoisonMessageEventArgs(QueueMessage message, QueueClient poisonQueue);
    [CompilerGeneratedAttribute]
public QueueMessage get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(QueueMessage value);
    [CompilerGeneratedAttribute]
public QueueClient get_PoisonQueue();
    [CompilerGeneratedAttribute]
private void set_PoisonQueue(QueueClient value);
}
public class Microsoft.Azure.WebJobs.Host.Queues.QueueProcessor : object {
    private QueueClient _queue;
    private QueueClient _poisonQueue;
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private Func`3<QueueProcessor, PoisonMessageEventArgs, Task> MessageAddedToPoisonQueueAsync;
    [CompilerGeneratedAttribute]
private QueuesOptions <QueuesOptions>k__BackingField;
    internal QueuesOptions QueuesOptions { get; private set; }
    protected internal QueueProcessor(QueueProcessorOptions queueProcessorOptions);
    [CompilerGeneratedAttribute]
public void add_MessageAddedToPoisonQueueAsync(Func`3<QueueProcessor, PoisonMessageEventArgs, Task> value);
    [CompilerGeneratedAttribute]
public void remove_MessageAddedToPoisonQueueAsync(Func`3<QueueProcessor, PoisonMessageEventArgs, Task> value);
    [CompilerGeneratedAttribute]
internal QueuesOptions get_QueuesOptions();
    [CompilerGeneratedAttribute]
private void set_QueuesOptions(QueuesOptions value);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Queues.QueueProcessor/<BeginProcessingMessageAsync>d__11")]
protected internal virtual Task`1<bool> BeginProcessingMessageAsync(QueueMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Queues.QueueProcessor/<CompleteProcessingMessageAsync>d__12")]
protected internal virtual Task CompleteProcessingMessageAsync(QueueMessage message, FunctionResult result, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Queues.QueueProcessor/<HandlePoisonMessageAsync>d__13")]
internal Task HandlePoisonMessageAsync(QueueMessage message, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Queues.QueueProcessor/<CopyMessageToPoisonQueueAsync>d__14")]
protected virtual Task CopyMessageToPoisonQueueAsync(QueueMessage message, QueueClient poisonQueue, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Queues.QueueProcessor/<ReleaseMessageAsync>d__15")]
protected virtual Task ReleaseMessageAsync(QueueMessage message, FunctionResult result, TimeSpan visibilityTimeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Queues.QueueProcessor/<DeleteMessageAsync>d__16")]
protected virtual Task DeleteMessageAsync(QueueMessage message, CancellationToken cancellationToken);
    protected internal virtual Task OnMessageAddedToPoisonQueueAsync(PoisonMessageEventArgs e);
}
public class Microsoft.Azure.WebJobs.Host.Queues.QueueProcessorOptions : object {
    [CompilerGeneratedAttribute]
private QueueClient <Queue>k__BackingField;
    [CompilerGeneratedAttribute]
private QueueClient <PoisonQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private QueuesOptions <Options>k__BackingField;
    public QueueClient Queue { get; private set; }
    public QueueClient PoisonQueue { get; private set; }
    public ILogger Logger { get; private set; }
    public QueuesOptions Options { get; private set; }
    internal QueueProcessorOptions(QueueClient queue, ILoggerFactory loggerFactory, QueuesOptions options, QueueClient poisonQueue);
    [CompilerGeneratedAttribute]
public QueueClient get_Queue();
    [CompilerGeneratedAttribute]
private void set_Queue(QueueClient value);
    [CompilerGeneratedAttribute]
public QueueClient get_PoisonQueue();
    [CompilerGeneratedAttribute]
private void set_PoisonQueue(QueueClient value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public QueuesOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(QueuesOptions value);
}
public class Microsoft.Azure.WebJobs.Host.QueuesOptions : object {
    private static int DefaultMaxDequeueCount;
    private static int DefaultBatchSize;
    internal static int MaxBatchSize;
    private int _batchSize;
    private int _newBatchThreshold;
    private int _processorCount;
    private TimeSpan _maxPollingInterval;
    private TimeSpan _visibilityTimeout;
    private int _maxDequeueCount;
    private QueueMessageEncoding _messageEncoding;
    public int BatchSize { get; public set; }
    public int NewBatchThreshold { get; public set; }
    public TimeSpan MaxPollingInterval { get; public set; }
    public int MaxDequeueCount { get; public set; }
    public TimeSpan VisibilityTimeout { get; public set; }
    public QueueMessageEncoding MessageEncoding { get; public set; }
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public int get_NewBatchThreshold();
    public void set_NewBatchThreshold(int value);
    public TimeSpan get_MaxPollingInterval();
    public void set_MaxPollingInterval(TimeSpan value);
    public int get_MaxDequeueCount();
    public void set_MaxDequeueCount(int value);
    public TimeSpan get_VisibilityTimeout();
    public void set_VisibilityTimeout(TimeSpan value);
    public QueueMessageEncoding get_MessageEncoding();
    public void set_MessageEncoding(QueueMessageEncoding value);
    [EditorBrowsableAttribute("1")]
private sealed virtual override string Microsoft.Azure.WebJobs.Hosting.IOptionsFormatter.Format();
    internal QueuesOptions Clone();
}
[AttributeUsageAttribute("10240")]
[DebuggerDisplayAttribute("{QueueName,nq}")]
[ConnectionProviderAttribute("Microsoft.Azure.WebJobs.StorageAccountAttribute")]
[BindingAttribute]
public class Microsoft.Azure.WebJobs.QueueAttribute : Attribute {
    private string _queueName;
    [CompilerGeneratedAttribute]
private string <Connection>k__BackingField;
    [AutoResolveAttribute]
public string QueueName { get; }
    public string Connection { get; public set; }
    public QueueAttribute(string queueName);
    public string get_QueueName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Connection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Connection(string value);
}
[AttributeUsageAttribute("2048")]
[DebuggerDisplayAttribute("{QueueName,nq}")]
[ConnectionProviderAttribute("Microsoft.Azure.WebJobs.StorageAccountAttribute")]
[BindingAttribute]
public class Microsoft.Azure.WebJobs.QueueTriggerAttribute : Attribute {
    private string _queueName;
    [CompilerGeneratedAttribute]
private string <Connection>k__BackingField;
    public string QueueName { get; }
    public string Connection { get; public set; }
    public QueueTriggerAttribute(string queueName);
    public string get_QueueName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Connection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Connection(string value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.StorageQueuesWebJobsBuilderExtensions : object {
    [ExtensionAttribute]
public static IWebJobsBuilder AddAzureStorageQueues(IWebJobsBuilder builder, Action`1<QueuesOptions> configureQueues);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static IWebJobsBuilder AddAzureStorageQueuesScaleForTrigger(IWebJobsBuilder builder, TriggerMetadata triggerMetadata);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
