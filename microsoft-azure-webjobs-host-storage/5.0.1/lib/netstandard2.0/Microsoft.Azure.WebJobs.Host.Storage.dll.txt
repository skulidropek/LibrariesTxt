[ExtensionAttribute]
internal static class BlobStorageExtensions : object {
    [AsyncStateMachineAttribute("BlobStorageExtensions/<UploadTextAsync>d__0")]
[ExtensionAttribute]
public static Task UploadTextAsync(BlobClient blobClient, string content, bool overwrite, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("BlobStorageExtensions/<UploadTextAsync>d__1")]
[ExtensionAttribute]
public static Task UploadTextAsync(BlockBlobClient blockBlobClient, string content, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("BlobStorageExtensions/<DownloadTextAsync>d__2")]
[ExtensionAttribute]
public static Task`1<string> DownloadTextAsync(BlobClient blobClient, CancellationToken cancellationToken);
}
internal static class Microsoft.Azure.WebJobs.Extensions.Storage.Utility : object {
    internal static int GetProcessorCount();
}
internal class Microsoft.Azure.WebJobs.Host.BlobLeaseDistributedLockManager : object {
    internal static string FunctionInstanceMetadataKey;
    internal static string SingletonLocks;
    private ILogger _logger;
    private IAzureBlobStorageProvider _blobStorageProvider;
    private ConcurrentDictionary`2<string, BlobContainerClient> _lockBlobContainerClientMap;
    public BlobLeaseDistributedLockManager(ILoggerFactory loggerFactory, IAzureBlobStorageProvider azureStorageProvider);
    public sealed virtual Task`1<bool> RenewAsync(IDistributedLock lockHandle, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.BlobLeaseDistributedLockManager/<ReleaseLockAsync>d__7")]
public sealed virtual Task ReleaseLockAsync(IDistributedLock lockHandle, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.BlobLeaseDistributedLockManager/<GetLockOwnerAsync>d__8")]
public virtual Task`1<string> GetLockOwnerAsync(string account, string lockId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.BlobLeaseDistributedLockManager/<TryLockAsync>d__9")]
public sealed virtual Task`1<IDistributedLock> TryLockAsync(string account, string lockId, string lockOwnerId, string proposedLeaseId, TimeSpan lockPeriod, CancellationToken cancellationToken);
    protected virtual BlobContainerClient GetContainerClient(string connectionName);
    private BlobContainerClient CreateBlobContainerClient(string connectionName);
    internal string GetLockPath(string lockId);
    protected virtual BlobLeaseClient GetBlobLeaseClient(BlobClient blobClient, string proposedLeaseId);
    protected virtual BlobContainerClient GetParentBlobContainerClient(BlobClient blobClient);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.BlobLeaseDistributedLockManager/<TryAcquireLeaseAsync>d__15")]
private Task`1<string> TryAcquireLeaseAsync(BlobClient blobClient, TimeSpan leasePeriod, string proposedLeaseId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.BlobLeaseDistributedLockManager/<ReleaseLeaseAsync>d__16")]
private static Task ReleaseLeaseAsync(BlobLeaseClient blobLeaseClient, string leaseId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.BlobLeaseDistributedLockManager/<TryCreateAsync>d__17")]
private Task`1<bool> TryCreateAsync(BlobClient blobClient, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.BlobLeaseDistributedLockManager/<WriteLeaseBlobMetadata>d__18")]
private static Task WriteLeaseBlobMetadata(BlobClient blobClient, string leaseId, string functionInstanceId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.BlobLeaseDistributedLockManager/<ReadLeaseBlobMetadata>d__19")]
private static Task`1<BlobProperties> ReadLeaseBlobMetadata(BlobClient blobClient, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Host.BlobStorageConcurrencyStatusRepository : object {
    private IHostIdProvider _hostIdProvider;
    private ILogger _logger;
    private IAzureBlobStorageProvider _blobStorageProvider;
    [NullableAttribute("2")]
private BlobContainerClient _blobContainerClient;
    public BlobStorageConcurrencyStatusRepository(IHostIdProvider hostIdProvider, ILoggerFactory loggerFactory, IAzureBlobStorageProvider azureStorageProvider);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.BlobStorageConcurrencyStatusRepository/<ReadAsync>d__5")]
public sealed virtual Task`1<HostConcurrencySnapshot> ReadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.BlobStorageConcurrencyStatusRepository/<WriteAsync>d__6")]
public sealed virtual Task WriteAsync(HostConcurrencySnapshot snapshot, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.BlobStorageConcurrencyStatusRepository/<GetContainerClientAsync>d__7")]
internal Task`1<BlobContainerClient> GetContainerClientAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.BlobStorageConcurrencyStatusRepository/<GetBlobPathAsync>d__8")]
internal Task`1<string> GetBlobPathAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Storage.AzureStorageProvider : object {
    private BlobServiceClientProvider _blobServiceClientProvider;
    private ILogger`1<AzureStorageProvider> _logger;
    private IConfiguration _configuration;
    private IOptionsMonitor`1<JobHostInternalStorageOptions> _storageOptions;
    public AzureStorageProvider(IConfiguration configuration, IOptionsMonitor`1<JobHostInternalStorageOptions> options, ILogger`1<AzureStorageProvider> logger, AzureComponentFactory componentFactory, AzureEventSourceLogForwarder logForwarder);
    public virtual bool TryCreateHostingBlobContainerClient(BlobContainerClient& blobContainerClient);
    public virtual bool TryCreateBlobServiceClientFromConnection(string connection, BlobServiceClient& client);
}
internal class Microsoft.Azure.WebJobs.Host.Storage.BlobServiceClientProvider : StorageClientProvider`2<BlobServiceClient, BlobClientOptions> {
    public BlobServiceClientProvider(AzureComponentFactory componentFactory, AzureEventSourceLogForwarder logForwarder);
    protected virtual BlobServiceClient CreateClient(IConfiguration configuration, TokenCredential tokenCredential, BlobClientOptions options);
}
internal class Microsoft.Azure.WebJobs.Host.Storage.DefaultDelegatingHandlerProvider : object {
    public sealed virtual DelegatingHandler Create();
}
public interface Microsoft.Azure.WebJobs.Host.Storage.IAzureBlobStorageProvider {
    public abstract virtual bool TryCreateHostingBlobContainerClient(BlobContainerClient& blobContainerClient);
    public abstract virtual bool TryCreateBlobServiceClientFromConnection(string connection, BlobServiceClient& client);
}
internal interface Microsoft.Azure.WebJobs.Host.Storage.IDelegatingHandlerProvider {
    public abstract virtual DelegatingHandler Create();
}
internal abstract class Microsoft.Azure.WebJobs.Host.Storage.StorageClientProvider`2 : object {
    private AzureComponentFactory _componentFactory;
    private AzureEventSourceLogForwarder _logForwarder;
    public StorageClientProvider`2(AzureComponentFactory componentFactory, AzureEventSourceLogForwarder logForwarder);
    public virtual TClient Create(string name, INameResolver resolver, IConfiguration configuration);
    public virtual TClient Create(string name, IConfiguration configuration);
    protected virtual TClient CreateClient(IConfiguration configuration, TokenCredential tokenCredential, TClientOptions options);
    protected bool IsConnectionStringPresent(IConfiguration configuration);
    private TClientOptions CreateClientOptions(IConfiguration configuration);
}
public class Microsoft.Azure.WebJobs.JobHostInternalStorageOptions : object {
    [CompilerGeneratedAttribute]
private string <InternalSasBlobContainer>k__BackingField;
    public string InternalSasBlobContainer { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InternalSasBlobContainer();
    [CompilerGeneratedAttribute]
public void set_InternalSasBlobContainer(string value);
}
internal class Microsoft.Azure.WebJobs.Storage.Common.WebJobsStorageDelegatingHandler : DelegatingHandler {
    private bool _isInnerHandlerConfigured;
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private void InitializeInnerHandler();
}
internal static class Microsoft.Azure.WebJobs.Storage.CommonUtility : object {
    private static string AzureWebsiteSku;
    private static string DynamicSku;
    private static Lazy`1<bool> _isDynamicSku;
    public static bool IsDynamicSku { get; }
    private static CommonUtility();
    public static bool get_IsDynamicSku();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.RuntimeStorageWebJobsBuilderExtensions : object {
    [ExtensionAttribute]
public static IWebJobsBuilder AddAzureStorageCoreServices(IWebJobsBuilder builder);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.StorageServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static void AddAzureStorageCoreServices(IServiceCollection services);
    [ExtensionAttribute]
public static void AddAzureStorageScaleServices(IServiceCollection services);
    private static IDistributedLockManager Create(IServiceProvider provider);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
