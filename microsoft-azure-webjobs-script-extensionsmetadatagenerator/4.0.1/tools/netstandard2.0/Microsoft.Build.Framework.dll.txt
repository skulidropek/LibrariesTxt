public class Microsoft.Build.Framework.AnyEventHandler : MulticastDelegate {
    public AnyEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.BuildEngineResult : ValueType {
    private bool buildResult;
    private List`1<IDictionary`2<string, ITaskItem[]>> targetOutputsPerProject;
    public bool Result { get; }
    public IList`1<IDictionary`2<string, ITaskItem[]>> TargetOutputsPerProject { get; }
    public BuildEngineResult(bool result, List`1<IDictionary`2<string, ITaskItem[]>> targetOutputsPerProject);
    public bool get_Result();
    public IList`1<IDictionary`2<string, ITaskItem[]>> get_TargetOutputsPerProject();
}
public class Microsoft.Build.Framework.BuildErrorEventArgs : LazyFormattedBuildEventArgs {
    private string subcategory;
    private string code;
    private string file;
    private string projectFile;
    private int lineNumber;
    private int columnNumber;
    private int endLineNumber;
    private int endColumnNumber;
    public string Subcategory { get; }
    public string Code { get; }
    public string File { get; }
    public string ProjectFile { get; public set; }
    public int LineNumber { get; }
    public int ColumnNumber { get; }
    public int EndLineNumber { get; }
    public int EndColumnNumber { get; }
    public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName);
    public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, DateTime eventTimestamp);
    public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, DateTime eventTimestamp, Object[] messageArgs);
    public string get_Subcategory();
    public string get_Code();
    public string get_File();
    public string get_ProjectFile();
    public void set_ProjectFile(string value);
    public int get_LineNumber();
    public int get_ColumnNumber();
    public int get_EndLineNumber();
    public int get_EndColumnNumber();
}
public class Microsoft.Build.Framework.BuildErrorEventHandler : MulticastDelegate {
    public BuildErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class Microsoft.Build.Framework.BuildEventArgs : EventArgs {
    private string message;
    private string helpKeyword;
    private string senderName;
    private DateTime timestamp;
    private int threadId;
    private BuildEventContext buildEventContext;
    public DateTime Timestamp { get; }
    public int ThreadId { get; }
    public string Message { get; protected set; }
    public string HelpKeyword { get; }
    public string SenderName { get; }
    public BuildEventContext BuildEventContext { get; public set; }
    protected BuildEventArgs(string message, string helpKeyword, string senderName);
    protected BuildEventArgs(string message, string helpKeyword, string senderName, DateTime eventTimestamp);
    public DateTime get_Timestamp();
    public int get_ThreadId();
    public virtual string get_Message();
    protected virtual void set_Message(string value);
    public string get_HelpKeyword();
    public string get_SenderName();
    public BuildEventContext get_BuildEventContext();
    public void set_BuildEventContext(BuildEventContext value);
}
public class Microsoft.Build.Framework.BuildEventContext : object {
    private int _nodeId;
    private int _targetId;
    private int _projectContextId;
    private int _taskId;
    private int _projectInstanceId;
    private int _submissionId;
    private int _evaluationId;
    public static int InvalidProjectContextId;
    public static int InvalidTaskId;
    public static int InvalidTargetId;
    public static int InvalidNodeId;
    public static int InvalidProjectInstanceId;
    public static int InvalidSubmissionId;
    public static int InvalidEvaluationId;
    public static BuildEventContext Invalid { get; }
    public int EvaluationId { get; }
    public int NodeId { get; }
    public int TargetId { get; }
    public int ProjectContextId { get; }
    public int TaskId { get; }
    public int ProjectInstanceId { get; }
    public int SubmissionId { get; }
    public long BuildRequestId { get; }
    public BuildEventContext(int nodeId, int targetId, int projectContextId, int taskId);
    public BuildEventContext(int nodeId, int projectInstanceId, int projectContextId, int targetId, int taskId);
    public BuildEventContext(int submissionId, int nodeId, int projectInstanceId, int projectContextId, int targetId, int taskId);
    public BuildEventContext(int submissionId, int nodeId, int evaluationId, int projectInstanceId, int projectContextId, int targetId, int taskId);
    public static BuildEventContext get_Invalid();
    public int get_EvaluationId();
    public int get_NodeId();
    public int get_TargetId();
    public int get_ProjectContextId();
    public int get_TaskId();
    public int get_ProjectInstanceId();
    public int get_SubmissionId();
    public long get_BuildRequestId();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(BuildEventContext left, BuildEventContext right);
    public static bool op_Inequality(BuildEventContext left, BuildEventContext right);
    private bool InternalEquals(BuildEventContext buildEventContext);
}
public class Microsoft.Build.Framework.BuildFinishedEventArgs : BuildStatusEventArgs {
    private bool succeeded;
    public bool Succeeded { get; }
    public BuildFinishedEventArgs(string message, string helpKeyword, bool succeeded);
    public BuildFinishedEventArgs(string message, string helpKeyword, bool succeeded, DateTime eventTimestamp);
    public BuildFinishedEventArgs(string message, string helpKeyword, bool succeeded, DateTime eventTimestamp, Object[] messageArgs);
    public bool get_Succeeded();
}
public class Microsoft.Build.Framework.BuildFinishedEventHandler : MulticastDelegate {
    public BuildFinishedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildFinishedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildFinishedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.BuildMessageEventArgs : LazyFormattedBuildEventArgs {
    private MessageImportance importance;
    private string subcategory;
    private string code;
    private string file;
    private string projectFile;
    private int lineNumber;
    private int columnNumber;
    private int endLineNumber;
    private int endColumnNumber;
    public MessageImportance Importance { get; }
    public string Subcategory { get; }
    public string Code { get; }
    public string File { get; }
    public int LineNumber { get; }
    public int ColumnNumber { get; }
    public int EndLineNumber { get; }
    public int EndColumnNumber { get; }
    public string ProjectFile { get; public set; }
    public BuildMessageEventArgs(string message, string helpKeyword, string senderName, MessageImportance importance);
    public BuildMessageEventArgs(string message, string helpKeyword, string senderName, MessageImportance importance, DateTime eventTimestamp);
    public BuildMessageEventArgs(string message, string helpKeyword, string senderName, MessageImportance importance, DateTime eventTimestamp, Object[] messageArgs);
    public BuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, MessageImportance importance);
    public BuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, MessageImportance importance, DateTime eventTimestamp);
    public BuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, MessageImportance importance, DateTime eventTimestamp, Object[] messageArgs);
    public MessageImportance get_Importance();
    public string get_Subcategory();
    public string get_Code();
    public string get_File();
    public int get_LineNumber();
    public int get_ColumnNumber();
    public int get_EndLineNumber();
    public int get_EndColumnNumber();
    public string get_ProjectFile();
    public void set_ProjectFile(string value);
}
public class Microsoft.Build.Framework.BuildMessageEventHandler : MulticastDelegate {
    public BuildMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.BuildStartedEventArgs : BuildStatusEventArgs {
    private IDictionary`2<string, string> environmentOnBuildStart;
    public IDictionary`2<string, string> BuildEnvironment { get; }
    public BuildStartedEventArgs(string message, string helpKeyword);
    public BuildStartedEventArgs(string message, string helpKeyword, IDictionary`2<string, string> environmentOfBuild);
    public BuildStartedEventArgs(string message, string helpKeyword, DateTime eventTimestamp);
    public BuildStartedEventArgs(string message, string helpKeyword, DateTime eventTimestamp, Object[] messageArgs);
    public IDictionary`2<string, string> get_BuildEnvironment();
}
public class Microsoft.Build.Framework.BuildStartedEventHandler : MulticastDelegate {
    public BuildStartedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildStartedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildStartedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class Microsoft.Build.Framework.BuildStatusEventArgs : LazyFormattedBuildEventArgs {
    protected BuildStatusEventArgs(string message, string helpKeyword, string senderName);
    protected BuildStatusEventArgs(string message, string helpKeyword, string senderName, DateTime eventTimestamp);
    protected BuildStatusEventArgs(string message, string helpKeyword, string senderName, DateTime eventTimestamp, Object[] messageArgs);
}
public class Microsoft.Build.Framework.BuildStatusEventHandler : MulticastDelegate {
    public BuildStatusEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildStatusEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildStatusEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.BuildWarningEventArgs : LazyFormattedBuildEventArgs {
    private string subcategory;
    private string code;
    private string file;
    private string projectFile;
    private int lineNumber;
    private int columnNumber;
    private int endLineNumber;
    private int endColumnNumber;
    public string Subcategory { get; }
    public string Code { get; }
    public string File { get; }
    public int LineNumber { get; }
    public int ColumnNumber { get; }
    public int EndLineNumber { get; }
    public int EndColumnNumber { get; }
    public string ProjectFile { get; public set; }
    public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName);
    public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, DateTime eventTimestamp);
    public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, DateTime eventTimestamp, Object[] messageArgs);
    public string get_Subcategory();
    public string get_Code();
    public string get_File();
    public int get_LineNumber();
    public int get_ColumnNumber();
    public int get_EndLineNumber();
    public int get_EndColumnNumber();
    public string get_ProjectFile();
    public void set_ProjectFile(string value);
}
public class Microsoft.Build.Framework.BuildWarningEventHandler : MulticastDelegate {
    public BuildWarningEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BuildWarningEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BuildWarningEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.CriticalBuildMessageEventArgs : BuildMessageEventArgs {
    public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName);
    public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, DateTime eventTimestamp);
    public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, DateTime eventTimestamp, Object[] messageArgs);
}
public abstract class Microsoft.Build.Framework.CustomBuildEventArgs : LazyFormattedBuildEventArgs {
    protected CustomBuildEventArgs(string message, string helpKeyword, string senderName);
    protected CustomBuildEventArgs(string message, string helpKeyword, string senderName, DateTime eventTimestamp);
    protected CustomBuildEventArgs(string message, string helpKeyword, string senderName, DateTime eventTimestamp, Object[] messageArgs);
}
public class Microsoft.Build.Framework.CustomBuildEventHandler : MulticastDelegate {
    public CustomBuildEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CustomBuildEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CustomBuildEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.ExternalProjectFinishedEventArgs : CustomBuildEventArgs {
    private string projectFile;
    private bool succeeded;
    public string ProjectFile { get; }
    public bool Succeeded { get; }
    public ExternalProjectFinishedEventArgs(string message, string helpKeyword, string senderName, string projectFile, bool succeeded);
    public ExternalProjectFinishedEventArgs(string message, string helpKeyword, string senderName, string projectFile, bool succeeded, DateTime eventTimestamp);
    public string get_ProjectFile();
    public bool get_Succeeded();
}
public class Microsoft.Build.Framework.ExternalProjectStartedEventArgs : CustomBuildEventArgs {
    private string projectFile;
    private string targetNames;
    public string ProjectFile { get; }
    public string TargetNames { get; }
    public ExternalProjectStartedEventArgs(string message, string helpKeyword, string senderName, string projectFile, string targetNames);
    public ExternalProjectStartedEventArgs(string message, string helpKeyword, string senderName, string projectFile, string targetNames, DateTime eventTimestamp);
    public string get_ProjectFile();
    public string get_TargetNames();
}
public interface Microsoft.Build.Framework.IBuildEngine {
    public bool ContinueOnError { get; }
    public int LineNumberOfTaskNode { get; }
    public int ColumnNumberOfTaskNode { get; }
    public string ProjectFileOfTaskNode { get; }
    public abstract virtual void LogErrorEvent(BuildErrorEventArgs e);
    public abstract virtual void LogWarningEvent(BuildWarningEventArgs e);
    public abstract virtual void LogMessageEvent(BuildMessageEventArgs e);
    public abstract virtual void LogCustomEvent(CustomBuildEventArgs e);
    public abstract virtual bool get_ContinueOnError();
    public abstract virtual int get_LineNumberOfTaskNode();
    public abstract virtual int get_ColumnNumberOfTaskNode();
    public abstract virtual string get_ProjectFileOfTaskNode();
    public abstract virtual bool BuildProjectFile(string projectFileName, String[] targetNames, IDictionary globalProperties, IDictionary targetOutputs);
}
public interface Microsoft.Build.Framework.IBuildEngine2 {
    public bool IsRunningMultipleNodes { get; }
    public abstract virtual bool get_IsRunningMultipleNodes();
    public abstract virtual bool BuildProjectFile(string projectFileName, String[] targetNames, IDictionary globalProperties, IDictionary targetOutputs, string toolsVersion);
    public abstract virtual bool BuildProjectFilesInParallel(String[] projectFileNames, String[] targetNames, IDictionary[] globalProperties, IDictionary[] targetOutputsPerProject, String[] toolsVersion, bool useResultsCache, bool unloadProjectsOnCompletion);
}
public interface Microsoft.Build.Framework.IBuildEngine3 {
    public abstract virtual BuildEngineResult BuildProjectFilesInParallel(String[] projectFileNames, String[] targetNames, IDictionary[] globalProperties, IList`1[] removeGlobalProperties, String[] toolsVersion, bool returnTargetOutputs);
    public abstract virtual void Yield();
    public abstract virtual void Reacquire();
}
public interface Microsoft.Build.Framework.IBuildEngine4 {
    public abstract virtual void RegisterTaskObject(object key, object obj, RegisteredTaskObjectLifetime lifetime, bool allowEarlyCollection);
    public abstract virtual object GetRegisteredTaskObject(object key, RegisteredTaskObjectLifetime lifetime);
    public abstract virtual object UnregisterTaskObject(object key, RegisteredTaskObjectLifetime lifetime);
}
public interface Microsoft.Build.Framework.IBuildEngine5 {
    public abstract virtual void LogTelemetry(string eventName, IDictionary`2<string, string> properties);
}
public interface Microsoft.Build.Framework.ICancelableTask {
    public abstract virtual void Cancel();
}
public interface Microsoft.Build.Framework.IEventRedirector {
    public abstract virtual void ForwardEvent(BuildEventArgs buildEvent);
}
public interface Microsoft.Build.Framework.IEventSource {
    [CompilerGeneratedAttribute]
public abstract virtual void add_MessageRaised(BuildMessageEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MessageRaised(BuildMessageEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ErrorRaised(BuildErrorEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ErrorRaised(BuildErrorEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_WarningRaised(BuildWarningEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_WarningRaised(BuildWarningEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BuildStarted(BuildStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BuildStarted(BuildStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_BuildFinished(BuildFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BuildFinished(BuildFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectStarted(ProjectStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectStarted(ProjectStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ProjectFinished(ProjectFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ProjectFinished(ProjectFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetStarted(TargetStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetStarted(TargetStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TargetFinished(TargetFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TargetFinished(TargetFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TaskStarted(TaskStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TaskStarted(TaskStartedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TaskFinished(TaskFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TaskFinished(TaskFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CustomEventRaised(CustomBuildEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CustomEventRaised(CustomBuildEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StatusEventRaised(BuildStatusEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StatusEventRaised(BuildStatusEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AnyEventRaised(AnyEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AnyEventRaised(AnyEventHandler value);
}
public interface Microsoft.Build.Framework.IEventSource2 {
    [CompilerGeneratedAttribute]
public abstract virtual void add_TelemetryLogged(TelemetryEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TelemetryLogged(TelemetryEventHandler value);
}
public interface Microsoft.Build.Framework.IForwardingLogger {
    public IEventRedirector BuildEventRedirector { get; public set; }
    public int NodeId { get; public set; }
    public abstract virtual IEventRedirector get_BuildEventRedirector();
    public abstract virtual void set_BuildEventRedirector(IEventRedirector value);
    public abstract virtual int get_NodeId();
    public abstract virtual void set_NodeId(int value);
}
public interface Microsoft.Build.Framework.IGeneratedTask {
    public abstract virtual void SetPropertyValue(TaskPropertyInfo property, object value);
    public abstract virtual object GetPropertyValue(TaskPropertyInfo property);
}
[ComVisibleAttribute("True")]
public interface Microsoft.Build.Framework.ILogger {
    public LoggerVerbosity Verbosity { get; public set; }
    public string Parameters { get; public set; }
    public abstract virtual LoggerVerbosity get_Verbosity();
    public abstract virtual void set_Verbosity(LoggerVerbosity value);
    public abstract virtual string get_Parameters();
    public abstract virtual void set_Parameters(string value);
    public abstract virtual void Initialize(IEventSource eventSource);
    public abstract virtual void Shutdown();
}
[ComVisibleAttribute("True")]
public interface Microsoft.Build.Framework.INodeLogger {
    public abstract virtual void Initialize(IEventSource eventSource, int nodeCount);
}
public interface Microsoft.Build.Framework.ITask {
    public IBuildEngine BuildEngine { get; public set; }
    public ITaskHost HostObject { get; public set; }
    public abstract virtual IBuildEngine get_BuildEngine();
    public abstract virtual void set_BuildEngine(IBuildEngine value);
    public abstract virtual ITaskHost get_HostObject();
    public abstract virtual void set_HostObject(ITaskHost value);
    public abstract virtual bool Execute();
}
public interface Microsoft.Build.Framework.ITaskFactory {
    public string FactoryName { get; }
    public Type TaskType { get; }
    public abstract virtual string get_FactoryName();
    public abstract virtual Type get_TaskType();
    public abstract virtual bool Initialize(string taskName, IDictionary`2<string, TaskPropertyInfo> parameterGroup, string taskBody, IBuildEngine taskFactoryLoggingHost);
    public abstract virtual TaskPropertyInfo[] GetTaskParameters();
    public abstract virtual ITask CreateTask(IBuildEngine taskFactoryLoggingHost);
    public abstract virtual void CleanupTask(ITask task);
}
public interface Microsoft.Build.Framework.ITaskFactory2 {
    public abstract virtual bool Initialize(string taskName, IDictionary`2<string, string> factoryIdentityParameters, IDictionary`2<string, TaskPropertyInfo> parameterGroup, string taskBody, IBuildEngine taskFactoryLoggingHost);
    public abstract virtual ITask CreateTask(IBuildEngine taskFactoryLoggingHost, IDictionary`2<string, string> taskIdentityParameters);
}
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("True")]
[GuidAttribute("9049A481-D0E9-414f-8F92-D4F67A0359A6")]
public interface Microsoft.Build.Framework.ITaskHost {
}
[ComVisibleAttribute("True")]
[GuidAttribute("8661674F-2148-4F71-A92A-49875511C528")]
public interface Microsoft.Build.Framework.ITaskItem {
    public string ItemSpec { get; public set; }
    public ICollection MetadataNames { get; }
    public int MetadataCount { get; }
    public abstract virtual string get_ItemSpec();
    public abstract virtual void set_ItemSpec(string value);
    public abstract virtual ICollection get_MetadataNames();
    public abstract virtual int get_MetadataCount();
    public abstract virtual string GetMetadata(string metadataName);
    public abstract virtual void SetMetadata(string metadataName, string metadataValue);
    public abstract virtual void RemoveMetadata(string metadataName);
    public abstract virtual void CopyMetadataTo(ITaskItem destinationItem);
    public abstract virtual IDictionary CloneCustomMetadata();
}
[ComVisibleAttribute("True")]
[GuidAttribute("ac6d5a59-f877-461b-88e3-b2f06fce0cb9")]
public interface Microsoft.Build.Framework.ITaskItem2 {
    public string EvaluatedIncludeEscaped { get; public set; }
    public abstract virtual string get_EvaluatedIncludeEscaped();
    public abstract virtual void set_EvaluatedIncludeEscaped(string value);
    public abstract virtual string GetMetadataValueEscaped(string metadataName);
    public abstract virtual void SetMetadataValueLiteral(string metadataName, string metadataValue);
    public abstract virtual IDictionary CloneCustomMetadataEscaped();
}
public class Microsoft.Build.Framework.LazyFormattedBuildEventArgs : BuildEventArgs {
    private Object[] arguments;
    private CultureInfo originalCulture;
    private object locker;
    public string Message { get; }
    public LazyFormattedBuildEventArgs(string message, string helpKeyword, string senderName);
    public LazyFormattedBuildEventArgs(string message, string helpKeyword, string senderName, DateTime eventTimestamp, Object[] messageArgs);
    public virtual string get_Message();
    private static string FormatString(CultureInfo culture, string unformatted, Object[] args);
}
[AttributeUsageAttribute("4")]
public class Microsoft.Build.Framework.LoadInSeparateAppDomainAttribute : Attribute {
}
public class Microsoft.Build.Framework.LoggerException : Exception {
    private string errorCode;
    private string helpKeyword;
    public string ErrorCode { get; }
    public string HelpKeyword { get; }
    public LoggerException(string message);
    public LoggerException(string message, Exception innerException);
    public LoggerException(string message, Exception innerException, string errorCode, string helpKeyword);
    public string get_ErrorCode();
    public string get_HelpKeyword();
}
[ComVisibleAttribute("True")]
public enum Microsoft.Build.Framework.LoggerVerbosity : Enum {
    public int value__;
    public static LoggerVerbosity Quiet;
    public static LoggerVerbosity Minimal;
    public static LoggerVerbosity Normal;
    public static LoggerVerbosity Detailed;
    public static LoggerVerbosity Diagnostic;
}
public enum Microsoft.Build.Framework.MessageImportance : Enum {
    public int value__;
    public static MessageImportance High;
    public static MessageImportance Normal;
    public static MessageImportance Low;
}
[AttributeUsageAttribute("128")]
public class Microsoft.Build.Framework.OutputAttribute : Attribute {
}
public class Microsoft.Build.Framework.ProjectEvaluationFinishedEventArgs : BuildStatusEventArgs {
    [CompilerGeneratedAttribute]
private string <ProjectFile>k__BackingField;
    public string ProjectFile { get; public set; }
    public ProjectEvaluationFinishedEventArgs(string message, Object[] messageArgs);
    [CompilerGeneratedAttribute]
public string get_ProjectFile();
    [CompilerGeneratedAttribute]
public void set_ProjectFile(string value);
}
public class Microsoft.Build.Framework.ProjectEvaluationStartedEventArgs : BuildStatusEventArgs {
    [CompilerGeneratedAttribute]
private string <ProjectFile>k__BackingField;
    public string ProjectFile { get; public set; }
    public ProjectEvaluationStartedEventArgs(string message, Object[] messageArgs);
    [CompilerGeneratedAttribute]
public string get_ProjectFile();
    [CompilerGeneratedAttribute]
public void set_ProjectFile(string value);
}
public class Microsoft.Build.Framework.ProjectFinishedEventArgs : BuildStatusEventArgs {
    private string projectFile;
    private bool succeeded;
    public string ProjectFile { get; }
    public bool Succeeded { get; }
    public ProjectFinishedEventArgs(string message, string helpKeyword, string projectFile, bool succeeded);
    public ProjectFinishedEventArgs(string message, string helpKeyword, string projectFile, bool succeeded, DateTime eventTimestamp);
    public string get_ProjectFile();
    public bool get_Succeeded();
}
public class Microsoft.Build.Framework.ProjectFinishedEventHandler : MulticastDelegate {
    public ProjectFinishedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ProjectFinishedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ProjectFinishedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.ProjectImportedEventArgs : BuildMessageEventArgs {
    [CompilerGeneratedAttribute]
private string <UnexpandedProject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImportedProjectFile>k__BackingField;
    public string UnexpandedProject { get; public set; }
    public string ImportedProjectFile { get; public set; }
    public ProjectImportedEventArgs(int lineNumber, int columnNumber, string message, Object[] messageArgs);
    [CompilerGeneratedAttribute]
public string get_UnexpandedProject();
    [CompilerGeneratedAttribute]
public void set_UnexpandedProject(string value);
    [CompilerGeneratedAttribute]
public string get_ImportedProjectFile();
    [CompilerGeneratedAttribute]
public void set_ImportedProjectFile(string value);
}
public class Microsoft.Build.Framework.ProjectStartedEventArgs : BuildStatusEventArgs {
    public static int InvalidProjectId;
    private int projectId;
    private BuildEventContext parentProjectBuildEventContext;
    private string projectFile;
    private string targetNames;
    private IDictionary`2<string, string> globalProperties;
    private string toolsVersion;
    private IEnumerable properties;
    private IEnumerable items;
    public int ProjectId { get; }
    public BuildEventContext ParentProjectBuildEventContext { get; }
    public string ProjectFile { get; }
    public string TargetNames { get; }
    public IDictionary`2<string, string> GlobalProperties { get; internal set; }
    public string ToolsVersion { get; internal set; }
    public IEnumerable Properties { get; }
    public IEnumerable Items { get; }
    public ProjectStartedEventArgs(string message, string helpKeyword, string projectFile, string targetNames, IEnumerable properties, IEnumerable items);
    public ProjectStartedEventArgs(int projectId, string message, string helpKeyword, string projectFile, string targetNames, IEnumerable properties, IEnumerable items, BuildEventContext parentBuildEventContext);
    public ProjectStartedEventArgs(int projectId, string message, string helpKeyword, string projectFile, string targetNames, IEnumerable properties, IEnumerable items, BuildEventContext parentBuildEventContext, IDictionary`2<string, string> globalProperties, string toolsVersion);
    public ProjectStartedEventArgs(string message, string helpKeyword, string projectFile, string targetNames, IEnumerable properties, IEnumerable items, DateTime eventTimestamp);
    public ProjectStartedEventArgs(int projectId, string message, string helpKeyword, string projectFile, string targetNames, IEnumerable properties, IEnumerable items, BuildEventContext parentBuildEventContext, DateTime eventTimestamp);
    public int get_ProjectId();
    public BuildEventContext get_ParentProjectBuildEventContext();
    public string get_ProjectFile();
    public string get_TargetNames();
    public IDictionary`2<string, string> get_GlobalProperties();
    internal void set_GlobalProperties(IDictionary`2<string, string> value);
    public string get_ToolsVersion();
    internal void set_ToolsVersion(string value);
    public IEnumerable get_Properties();
    public IEnumerable get_Items();
}
public class Microsoft.Build.Framework.ProjectStartedEventHandler : MulticastDelegate {
    public ProjectStartedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ProjectStartedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ProjectStartedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.Build.Framework.RegisteredTaskObjectLifetime : Enum {
    public int value__;
    public static RegisteredTaskObjectLifetime Build;
    public static RegisteredTaskObjectLifetime AppDomain;
}
[AttributeUsageAttribute("128")]
public class Microsoft.Build.Framework.RequiredAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Microsoft.Build.Framework.RequiredRuntimeAttribute : Attribute {
    private string _runtimeVersion;
    public string RuntimeVersion { get; }
    public RequiredRuntimeAttribute(string runtimeVersion);
    public string get_RuntimeVersion();
}
[AttributeUsageAttribute("4")]
public class Microsoft.Build.Framework.RunInMTAAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Microsoft.Build.Framework.RunInSTAAttribute : Attribute {
}
public abstract class Microsoft.Build.Framework.SdkLogger : object {
    public abstract virtual void LogMessage(string message, MessageImportance messageImportance);
}
public class Microsoft.Build.Framework.SdkReference : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MinimumVersion>k__BackingField;
    public string Name { get; }
    public string Version { get; }
    public string MinimumVersion { get; }
    public SdkReference(string name, string version, string minimumVersion);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public string get_MinimumVersion();
    public sealed virtual bool Equals(SdkReference other);
    public static bool TryParse(string sdk, SdkReference& sdkReference);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public abstract class Microsoft.Build.Framework.SdkResolver : object {
    public string Name { get; }
    public int Priority { get; }
    public abstract virtual string get_Name();
    public abstract virtual int get_Priority();
    public abstract virtual SdkResult Resolve(SdkReference sdkReference, SdkResolverContext resolverContext, SdkResultFactory factory);
}
public abstract class Microsoft.Build.Framework.SdkResolverContext : object {
    [CompilerGeneratedAttribute]
private SdkLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SolutionFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <MSBuildVersion>k__BackingField;
    public SdkLogger Logger { get; protected set; }
    public string ProjectFilePath { get; protected set; }
    public string SolutionFilePath { get; protected set; }
    public Version MSBuildVersion { get; protected set; }
    [CompilerGeneratedAttribute]
public virtual SdkLogger get_Logger();
    [CompilerGeneratedAttribute]
protected virtual void set_Logger(SdkLogger value);
    [CompilerGeneratedAttribute]
public virtual string get_ProjectFilePath();
    [CompilerGeneratedAttribute]
protected virtual void set_ProjectFilePath(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SolutionFilePath();
    [CompilerGeneratedAttribute]
protected virtual void set_SolutionFilePath(string value);
    [CompilerGeneratedAttribute]
public virtual Version get_MSBuildVersion();
    [CompilerGeneratedAttribute]
protected virtual void set_MSBuildVersion(Version value);
}
public abstract class Microsoft.Build.Framework.SdkResult : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    public bool Success { get; protected set; }
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
protected void set_Success(bool value);
}
public abstract class Microsoft.Build.Framework.SdkResultFactory : object {
    public abstract virtual SdkResult IndicateSuccess(string path, string version, IEnumerable`1<string> warnings);
    public abstract virtual SdkResult IndicateFailure(IEnumerable`1<string> errors, IEnumerable`1<string> warnings);
}
public class Microsoft.Build.Framework.TargetFinishedEventArgs : BuildStatusEventArgs {
    private string projectFile;
    private string targetFile;
    private string targetName;
    private bool succeeded;
    private IEnumerable targetOutputs;
    public string TargetName { get; }
    public bool Succeeded { get; }
    public string ProjectFile { get; }
    public string TargetFile { get; }
    public IEnumerable TargetOutputs { get; public set; }
    public TargetFinishedEventArgs(string message, string helpKeyword, string targetName, string projectFile, string targetFile, bool succeeded);
    public TargetFinishedEventArgs(string message, string helpKeyword, string targetName, string projectFile, string targetFile, bool succeeded, IEnumerable targetOutputs);
    public TargetFinishedEventArgs(string message, string helpKeyword, string targetName, string projectFile, string targetFile, bool succeeded, DateTime eventTimestamp, IEnumerable targetOutputs);
    public string get_TargetName();
    public bool get_Succeeded();
    public string get_ProjectFile();
    public string get_TargetFile();
    public IEnumerable get_TargetOutputs();
    public void set_TargetOutputs(IEnumerable value);
}
public class Microsoft.Build.Framework.TargetFinishedEventHandler : MulticastDelegate {
    public TargetFinishedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TargetFinishedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TargetFinishedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.TargetStartedEventArgs : BuildStatusEventArgs {
    private string targetName;
    private string projectFile;
    private string targetFile;
    private string parentTarget;
    public string TargetName { get; }
    public string ParentTarget { get; }
    public string ProjectFile { get; }
    public string TargetFile { get; }
    public TargetStartedEventArgs(string message, string helpKeyword, string targetName, string projectFile, string targetFile);
    public TargetStartedEventArgs(string message, string helpKeyword, string targetName, string projectFile, string targetFile, string parentTarget, DateTime eventTimestamp);
    public string get_TargetName();
    public string get_ParentTarget();
    public string get_ProjectFile();
    public string get_TargetFile();
}
public class Microsoft.Build.Framework.TargetStartedEventHandler : MulticastDelegate {
    public TargetStartedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TargetStartedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TargetStartedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.TaskCommandLineEventArgs : BuildMessageEventArgs {
    public string CommandLine { get; }
    public string TaskName { get; }
    public TaskCommandLineEventArgs(string commandLine, string taskName, MessageImportance importance);
    public TaskCommandLineEventArgs(string commandLine, string taskName, MessageImportance importance, DateTime eventTimestamp);
    public string get_CommandLine();
    public string get_TaskName();
}
public class Microsoft.Build.Framework.TaskFinishedEventArgs : BuildStatusEventArgs {
    private string taskName;
    private string projectFile;
    private string taskFile;
    private bool succeeded;
    public string TaskName { get; }
    public bool Succeeded { get; }
    public string ProjectFile { get; }
    public string TaskFile { get; }
    public TaskFinishedEventArgs(string message, string helpKeyword, string projectFile, string taskFile, string taskName, bool succeeded);
    public TaskFinishedEventArgs(string message, string helpKeyword, string projectFile, string taskFile, string taskName, bool succeeded, DateTime eventTimestamp);
    public string get_TaskName();
    public bool get_Succeeded();
    public string get_ProjectFile();
    public string get_TaskFile();
}
public class Microsoft.Build.Framework.TaskFinishedEventHandler : MulticastDelegate {
    public TaskFinishedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TaskFinishedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TaskFinishedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.TaskPropertyInfo : object {
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    public Type PropertyType { get; private set; }
    public string Name { get; private set; }
    public bool Output { get; private set; }
    public bool Required { get; private set; }
    public TaskPropertyInfo(string name, Type typeOfParameter, bool output, bool required);
    [CompilerGeneratedAttribute]
public Type get_PropertyType();
    [CompilerGeneratedAttribute]
private void set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(bool value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
private void set_Required(bool value);
}
public class Microsoft.Build.Framework.TaskStartedEventArgs : BuildStatusEventArgs {
    private string taskName;
    private string projectFile;
    private string taskFile;
    public string TaskName { get; }
    public string ProjectFile { get; }
    public string TaskFile { get; }
    public TaskStartedEventArgs(string message, string helpKeyword, string projectFile, string taskFile, string taskName);
    public TaskStartedEventArgs(string message, string helpKeyword, string projectFile, string taskFile, string taskName, DateTime eventTimestamp);
    public string get_TaskName();
    public string get_ProjectFile();
    public string get_TaskFile();
}
public class Microsoft.Build.Framework.TaskStartedEventHandler : MulticastDelegate {
    public TaskStartedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TaskStartedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TaskStartedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.Framework.TelemetryEventArgs : BuildEventArgs {
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    public string EventName { get; public set; }
    public IDictionary`2<string, string> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
public void set_EventName(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, string> value);
}
public class Microsoft.Build.Framework.TelemetryEventHandler : MulticastDelegate {
    public TelemetryEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TelemetryEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TelemetryEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Microsoft.Build.Shared.ItemMetadataNames : object {
    internal static string fusionName;
    internal static string hintPath;
    internal static string assemblyFolderKey;
    internal static string alias;
    internal static string aliases;
    internal static string parentFile;
    internal static string privateMetadata;
    internal static string copyLocal;
    internal static string isRedistRoot;
    internal static string redist;
    internal static string resolvedFrom;
    internal static string destinationSubDirectory;
    internal static string specificVersion;
    internal static string link;
    internal static string subType;
    internal static string executableExtension;
    internal static string embedInteropTypes;
    internal static string targetPath;
    internal static string dependentUpon;
    internal static string msbuildSourceProjectFile;
    internal static string msbuildSourceTargetName;
    internal static string isPrimary;
    internal static string targetFramework;
    internal static string frameworkDirectory;
    internal static string version;
    internal static string imageRuntime;
    internal static string winMDFile;
    internal static string winMDFileType;
    internal static string msbuildReferenceSourceTarget;
    internal static string msbuildReferenceGrouping;
    internal static string msbuildReferenceGroupingDisplayName;
    internal static string msbuildReferenceFromSDK;
    internal static string winmdImplmentationFile;
    internal static string projectReferenceOriginalItemSpec;
    internal static string IgnoreVersionForFrameworkReference;
    internal static string frameworkFile;
}
internal static class Microsoft.Build.Shared.MSBuildConstants : object {
    internal static string ToolsPath;
    internal static string ToolsPath64;
    internal static string SdksPath;
    internal static string TreatWarningsAsErrors;
    internal static string WarningsAsErrors;
    internal static string WarningsAsMessages;
    internal static string CurrentVisualStudioVersion;
    internal static string CurrentToolsVersion;
    internal static string MSBuildDummyGlobalPropertyHeader;
    internal static Version CurrentToolsVersionAsVersion;
    internal static string CurrentAssemblyVersion;
    internal static string CurrentAssemblyFileVersion;
    internal static string CurrentProductVersion { get; }
    private static MSBuildConstants();
    internal static string get_CurrentProductVersion();
}
internal class ThisAssembly : object {
    internal static string AssemblyVersion;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string AssemblyConfiguration;
    internal static string RootNamespace;
}
