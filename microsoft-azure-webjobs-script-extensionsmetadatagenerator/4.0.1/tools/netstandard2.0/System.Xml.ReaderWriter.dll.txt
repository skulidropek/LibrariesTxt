internal static class FxResources.System.Xml.ReaderWriter.SR : object {
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Xml_UserException { get; }
    internal static string Xml_DefaultException { get; }
    internal static string Xml_InvalidOperation { get; }
    internal static string Xml_AsyncIsRunningException { get; }
    internal static string Xml_ReaderAsyncNotSetException { get; }
    internal static string Xml_UnclosedQuote { get; }
    internal static string Xml_UnexpectedEOF { get; }
    internal static string Xml_UnexpectedEOF1 { get; }
    internal static string Xml_UnexpectedEOFInElementContent { get; }
    internal static string Xml_BadStartNameChar { get; }
    internal static string Xml_BadNameChar { get; }
    internal static string Xml_BadDecimalEntity { get; }
    internal static string Xml_BadHexEntity { get; }
    internal static string Xml_MissingByteOrderMark { get; }
    internal static string Xml_UnknownEncoding { get; }
    internal static string Xml_InternalError { get; }
    internal static string Xml_InvalidCharInThisEncoding { get; }
    internal static string Xml_ErrorPosition { get; }
    internal static string Xml_MessageWithErrorPosition { get; }
    internal static string Xml_UnexpectedTokenEx { get; }
    internal static string Xml_UnexpectedTokens2 { get; }
    internal static string Xml_ExpectingWhiteSpace { get; }
    internal static string Xml_TagMismatchEx { get; }
    internal static string Xml_UnexpectedEndTag { get; }
    internal static string Xml_UnknownNs { get; }
    internal static string Xml_BadAttributeChar { get; }
    internal static string Xml_ExpectExternalOrClose { get; }
    internal static string Xml_MissingRoot { get; }
    internal static string Xml_MultipleRoots { get; }
    internal static string Xml_InvalidRootData { get; }
    internal static string Xml_XmlDeclNotFirst { get; }
    internal static string Xml_InvalidXmlDecl { get; }
    internal static string Xml_InvalidNodeType { get; }
    internal static string Xml_InvalidPIName { get; }
    internal static string Xml_InvalidXmlSpace { get; }
    internal static string Xml_InvalidVersionNumber { get; }
    internal static string Xml_DupAttributeName { get; }
    internal static string Xml_BadDTDLocation { get; }
    internal static string Xml_ElementNotFound { get; }
    internal static string Xml_ElementNotFoundNs { get; }
    internal static string Xml_CanNotBindToReservedNamespace { get; }
    internal static string Xml_InvalidCharacter { get; }
    internal static string Xml_InvalidBinHexValue { get; }
    internal static string Xml_InvalidBinHexValueOddCount { get; }
    internal static string Xml_InvalidTextDecl { get; }
    internal static string Xml_InvalidBase64Value { get; }
    internal static string Xml_UndeclaredEntity { get; }
    internal static string Xml_RecursiveParEntity { get; }
    internal static string Xml_RecursiveGenEntity { get; }
    internal static string Xml_NotSameNametable { get; }
    internal static string Xml_NametableMismatch { get; }
    internal static string Xml_BadNamespaceDecl { get; }
    internal static string Xml_ErrorParsingEntityName { get; }
    internal static string Xml_InvalidNmToken { get; }
    internal static string Xml_EntityRefNesting { get; }
    internal static string Xml_CannotResolveEntity { get; }
    internal static string Xml_CannotResolveEntityDtdIgnored { get; }
    internal static string Xml_CannotResolveExternalSubset { get; }
    internal static string Xml_CDATAEndInText { get; }
    internal static string Xml_DtdAfterRootElement { get; }
    internal static string Xml_ReadOnlyProperty { get; }
    internal static string Xml_DtdIsProhibited { get; }
    internal static string Xml_DtdIsProhibitedEx { get; }
    internal static string Xml_ReadSubtreeNotOnElement { get; }
    internal static string Xml_DtdNotAllowedInFragment { get; }
    internal static string Xml_CannotStartDocumentOnFragment { get; }
    internal static string Xml_ErrorOpeningExternalDtd { get; }
    internal static string Xml_ErrorOpeningExternalEntity { get; }
    internal static string Xml_ReadBinaryContentNotSupported { get; }
    internal static string Xml_ReadValueChunkNotSupported { get; }
    internal static string Xml_InvalidReadContentAs { get; }
    internal static string Xml_InvalidReadElementContentAs { get; }
    internal static string Xml_MixedReadElementContentAs { get; }
    internal static string Xml_MixingReadValueChunkWithBinary { get; }
    internal static string Xml_MixingBinaryContentMethods { get; }
    internal static string Xml_MixingV1StreamingWithV2Binary { get; }
    internal static string Xml_InvalidReadValueChunk { get; }
    internal static string Xml_ReadContentAsFormatException { get; }
    internal static string Xml_DoubleBaseUri { get; }
    internal static string Xml_NotEnoughSpaceForSurrogatePair { get; }
    internal static string Xml_InvalidWhitespaceCharacter { get; }
    internal static string Xml_IncompatibleConformanceLevel { get; }
    internal static string Xml_LimitExceeded { get; }
    internal static string Xml_ClosedOrErrorReader { get; }
    internal static string Xml_CharEntityOverflow { get; }
    internal static string Xml_CannotResolveUrl { get; }
    internal static string Xml_MultipleDTDsProvided { get; }
    internal static string Xml_UnparsedEntityRef { get; }
    internal static string Xml_ExternalEntityInStandAloneDocument { get; }
    internal static string Xml_ExternalEntityInAttValue { get; }
    internal static string Xml_ExpectSubOrClose { get; }
    internal static string Xml_InvalidConditionalSection { get; }
    internal static string Xml_UnexpectedCDataEnd { get; }
    internal static string Xml_ExpectDtdMarkup { get; }
    internal static string Xml_UnclosedConditionalSection { get; }
    internal static string Xml_IncompleteDtdContent { get; }
    internal static string Xml_EnumerationRequired { get; }
    internal static string Xml_InvalidContentModel { get; }
    internal static string Xml_FragmentId { get; }
    internal static string Xml_ExpectPcData { get; }
    internal static string Xml_ExpectNoWhitespace { get; }
    internal static string Xml_InvalidAttributeType { get; }
    internal static string Xml_ExpectOp { get; }
    internal static string Xml_ExpectAttType { get; }
    internal static string Xml_ExpectExternalOrPublicId { get; }
    internal static string Xml_ExpectExternalIdOrEntityValue { get; }
    internal static string Xml_ExpectIgnoreOrInclude { get; }
    internal static string Xml_ColonInLocalName { get; }
    internal static string Xml_InvalidParEntityRef { get; }
    internal static string Xml_WriterAsyncNotSetException { get; }
    internal static string Xml_PrefixForEmptyNs { get; }
    internal static string Xml_InvalidCommentChars { get; }
    internal static string Xml_UndefNamespace { get; }
    internal static string Xml_EmptyName { get; }
    internal static string Xml_EmptyLocalName { get; }
    internal static string Xml_InvalidNameCharsDetail { get; }
    internal static string Xml_NoStartTag { get; }
    internal static string Xml_ClosedOrError { get; }
    internal static string Xml_WrongToken { get; }
    internal static string Xml_XmlPrefix { get; }
    internal static string Xml_XmlnsPrefix { get; }
    internal static string Xml_NamespaceDeclXmlXmlns { get; }
    internal static string Xml_NonWhitespace { get; }
    internal static string Xml_DupXmlDecl { get; }
    internal static string Xml_CannotWriteXmlDecl { get; }
    internal static string Xml_NoRoot { get; }
    internal static string Xml_InvalidPosition { get; }
    internal static string Xml_IncompleteEntity { get; }
    internal static string Xml_InvalidSurrogateHighChar { get; }
    internal static string Xml_InvalidSurrogateMissingLowChar { get; }
    internal static string Xml_InvalidSurrogatePairWithArgs { get; }
    internal static string Xml_RedefinePrefix { get; }
    internal static string Xml_DtdAlreadyWritten { get; }
    internal static string Xml_InvalidCharsInIndent { get; }
    internal static string Xml_IndentCharsNotWhitespace { get; }
    internal static string Xml_ConformanceLevelFragment { get; }
    internal static string Xml_SurrogatePairSplit { get; }
    internal static string XmlConvert_BadFormat { get; }
    internal static string XmlConvert_Overflow { get; }
    internal static string XmlConvert_TypeListBadMapping2 { get; }
    internal static string XmlConvert_TypeNoPrefix { get; }
    internal static string XmlConvert_TypeNoNamespace { get; }
    internal static string XmlConvert_NotOneCharString { get; }
    internal static string XmlConvert_BadUri { get; }
    internal static string Sch_InvalidDateTimeOption { get; }
    internal static string Argument_InvalidCodePageConversionIndex { get; }
    internal static string ArgumentOutOfRange_Range { get; }
    internal static string Sch_ParEntityRefNesting { get; }
    internal static string Xml_SystemPathResolverCannotOpenUri { get; }
    internal static string Enc_InvalidByteInEncoding { get; }
    internal static string Xml_UnsupportedClass { get; }
    internal static string ArgumentNull_Array { get; }
    internal static string Argument_ConversionOverflow { get; }
    internal static string ArgumentOutOfRange_Index { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_IndexCount { get; }
    internal static string Argument_EncodingConversionOverflowBytes { get; }
    internal static string ArgumentOutOfRange_IndexCountBuffer { get; }
    internal static string Argument_InvalidCharSequenceNoIndex { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Xml_UserException();
    internal static string get_Xml_DefaultException();
    internal static string get_Xml_InvalidOperation();
    internal static string get_Xml_AsyncIsRunningException();
    internal static string get_Xml_ReaderAsyncNotSetException();
    internal static string get_Xml_UnclosedQuote();
    internal static string get_Xml_UnexpectedEOF();
    internal static string get_Xml_UnexpectedEOF1();
    internal static string get_Xml_UnexpectedEOFInElementContent();
    internal static string get_Xml_BadStartNameChar();
    internal static string get_Xml_BadNameChar();
    internal static string get_Xml_BadDecimalEntity();
    internal static string get_Xml_BadHexEntity();
    internal static string get_Xml_MissingByteOrderMark();
    internal static string get_Xml_UnknownEncoding();
    internal static string get_Xml_InternalError();
    internal static string get_Xml_InvalidCharInThisEncoding();
    internal static string get_Xml_ErrorPosition();
    internal static string get_Xml_MessageWithErrorPosition();
    internal static string get_Xml_UnexpectedTokenEx();
    internal static string get_Xml_UnexpectedTokens2();
    internal static string get_Xml_ExpectingWhiteSpace();
    internal static string get_Xml_TagMismatchEx();
    internal static string get_Xml_UnexpectedEndTag();
    internal static string get_Xml_UnknownNs();
    internal static string get_Xml_BadAttributeChar();
    internal static string get_Xml_ExpectExternalOrClose();
    internal static string get_Xml_MissingRoot();
    internal static string get_Xml_MultipleRoots();
    internal static string get_Xml_InvalidRootData();
    internal static string get_Xml_XmlDeclNotFirst();
    internal static string get_Xml_InvalidXmlDecl();
    internal static string get_Xml_InvalidNodeType();
    internal static string get_Xml_InvalidPIName();
    internal static string get_Xml_InvalidXmlSpace();
    internal static string get_Xml_InvalidVersionNumber();
    internal static string get_Xml_DupAttributeName();
    internal static string get_Xml_BadDTDLocation();
    internal static string get_Xml_ElementNotFound();
    internal static string get_Xml_ElementNotFoundNs();
    internal static string get_Xml_CanNotBindToReservedNamespace();
    internal static string get_Xml_InvalidCharacter();
    internal static string get_Xml_InvalidBinHexValue();
    internal static string get_Xml_InvalidBinHexValueOddCount();
    internal static string get_Xml_InvalidTextDecl();
    internal static string get_Xml_InvalidBase64Value();
    internal static string get_Xml_UndeclaredEntity();
    internal static string get_Xml_RecursiveParEntity();
    internal static string get_Xml_RecursiveGenEntity();
    internal static string get_Xml_NotSameNametable();
    internal static string get_Xml_NametableMismatch();
    internal static string get_Xml_BadNamespaceDecl();
    internal static string get_Xml_ErrorParsingEntityName();
    internal static string get_Xml_InvalidNmToken();
    internal static string get_Xml_EntityRefNesting();
    internal static string get_Xml_CannotResolveEntity();
    internal static string get_Xml_CannotResolveEntityDtdIgnored();
    internal static string get_Xml_CannotResolveExternalSubset();
    internal static string get_Xml_CDATAEndInText();
    internal static string get_Xml_DtdAfterRootElement();
    internal static string get_Xml_ReadOnlyProperty();
    internal static string get_Xml_DtdIsProhibited();
    internal static string get_Xml_DtdIsProhibitedEx();
    internal static string get_Xml_ReadSubtreeNotOnElement();
    internal static string get_Xml_DtdNotAllowedInFragment();
    internal static string get_Xml_CannotStartDocumentOnFragment();
    internal static string get_Xml_ErrorOpeningExternalDtd();
    internal static string get_Xml_ErrorOpeningExternalEntity();
    internal static string get_Xml_ReadBinaryContentNotSupported();
    internal static string get_Xml_ReadValueChunkNotSupported();
    internal static string get_Xml_InvalidReadContentAs();
    internal static string get_Xml_InvalidReadElementContentAs();
    internal static string get_Xml_MixedReadElementContentAs();
    internal static string get_Xml_MixingReadValueChunkWithBinary();
    internal static string get_Xml_MixingBinaryContentMethods();
    internal static string get_Xml_MixingV1StreamingWithV2Binary();
    internal static string get_Xml_InvalidReadValueChunk();
    internal static string get_Xml_ReadContentAsFormatException();
    internal static string get_Xml_DoubleBaseUri();
    internal static string get_Xml_NotEnoughSpaceForSurrogatePair();
    internal static string get_Xml_InvalidWhitespaceCharacter();
    internal static string get_Xml_IncompatibleConformanceLevel();
    internal static string get_Xml_LimitExceeded();
    internal static string get_Xml_ClosedOrErrorReader();
    internal static string get_Xml_CharEntityOverflow();
    internal static string get_Xml_CannotResolveUrl();
    internal static string get_Xml_MultipleDTDsProvided();
    internal static string get_Xml_UnparsedEntityRef();
    internal static string get_Xml_ExternalEntityInStandAloneDocument();
    internal static string get_Xml_ExternalEntityInAttValue();
    internal static string get_Xml_ExpectSubOrClose();
    internal static string get_Xml_InvalidConditionalSection();
    internal static string get_Xml_UnexpectedCDataEnd();
    internal static string get_Xml_ExpectDtdMarkup();
    internal static string get_Xml_UnclosedConditionalSection();
    internal static string get_Xml_IncompleteDtdContent();
    internal static string get_Xml_EnumerationRequired();
    internal static string get_Xml_InvalidContentModel();
    internal static string get_Xml_FragmentId();
    internal static string get_Xml_ExpectPcData();
    internal static string get_Xml_ExpectNoWhitespace();
    internal static string get_Xml_InvalidAttributeType();
    internal static string get_Xml_ExpectOp();
    internal static string get_Xml_ExpectAttType();
    internal static string get_Xml_ExpectExternalOrPublicId();
    internal static string get_Xml_ExpectExternalIdOrEntityValue();
    internal static string get_Xml_ExpectIgnoreOrInclude();
    internal static string get_Xml_ColonInLocalName();
    internal static string get_Xml_InvalidParEntityRef();
    internal static string get_Xml_WriterAsyncNotSetException();
    internal static string get_Xml_PrefixForEmptyNs();
    internal static string get_Xml_InvalidCommentChars();
    internal static string get_Xml_UndefNamespace();
    internal static string get_Xml_EmptyName();
    internal static string get_Xml_EmptyLocalName();
    internal static string get_Xml_InvalidNameCharsDetail();
    internal static string get_Xml_NoStartTag();
    internal static string get_Xml_ClosedOrError();
    internal static string get_Xml_WrongToken();
    internal static string get_Xml_XmlPrefix();
    internal static string get_Xml_XmlnsPrefix();
    internal static string get_Xml_NamespaceDeclXmlXmlns();
    internal static string get_Xml_NonWhitespace();
    internal static string get_Xml_DupXmlDecl();
    internal static string get_Xml_CannotWriteXmlDecl();
    internal static string get_Xml_NoRoot();
    internal static string get_Xml_InvalidPosition();
    internal static string get_Xml_IncompleteEntity();
    internal static string get_Xml_InvalidSurrogateHighChar();
    internal static string get_Xml_InvalidSurrogateMissingLowChar();
    internal static string get_Xml_InvalidSurrogatePairWithArgs();
    internal static string get_Xml_RedefinePrefix();
    internal static string get_Xml_DtdAlreadyWritten();
    internal static string get_Xml_InvalidCharsInIndent();
    internal static string get_Xml_IndentCharsNotWhitespace();
    internal static string get_Xml_ConformanceLevelFragment();
    internal static string get_Xml_SurrogatePairSplit();
    internal static string get_XmlConvert_BadFormat();
    internal static string get_XmlConvert_Overflow();
    internal static string get_XmlConvert_TypeListBadMapping2();
    internal static string get_XmlConvert_TypeNoPrefix();
    internal static string get_XmlConvert_TypeNoNamespace();
    internal static string get_XmlConvert_NotOneCharString();
    internal static string get_XmlConvert_BadUri();
    internal static string get_Sch_InvalidDateTimeOption();
    internal static string get_Argument_InvalidCodePageConversionIndex();
    internal static string get_ArgumentOutOfRange_Range();
    internal static string get_Sch_ParEntityRefNesting();
    internal static string get_Xml_SystemPathResolverCannotOpenUri();
    internal static string get_Enc_InvalidByteInEncoding();
    internal static string get_Xml_UnsupportedClass();
    internal static string get_ArgumentNull_Array();
    internal static string get_Argument_ConversionOverflow();
    internal static string get_ArgumentOutOfRange_Index();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_IndexCount();
    internal static string get_Argument_EncodingConversionOverflowBytes();
    internal static string get_ArgumentOutOfRange_IndexCountBuffer();
    internal static string get_Argument_InvalidCharSequenceNoIndex();
    internal static Type get_ResourceType();
}
internal class System.ValueTuple`2 : ValueType {
    public T1 Item1;
    public T2 Item2;
    public ValueTuple`2(T1 item1, T2 item2);
}
internal class System.ValueTuple`3 : ValueType {
    public T1 Item1;
    public T2 Item2;
    public T3 Item3;
    public ValueTuple`3(T1 item1, T2 item2, T3 item3);
}
internal class System.ValueTuple`4 : ValueType {
    public T1 Item1;
    public T2 Item2;
    public T3 Item3;
    public T4 Item4;
    public ValueTuple`4(T1 item1, T2 item2, T3 item3, T4 item4);
}
[ExtensionAttribute]
internal static class System.Xml.AsyncHelper : object {
    public static Task`1<bool> DoneTaskTrue;
    public static Task`1<bool> DoneTaskFalse;
    public static Task`1<int> DoneTaskZero;
    private static AsyncHelper();
    [ExtensionAttribute]
public static bool IsSuccess(Task task);
    [ExtensionAttribute]
public static Task CallVoidFuncWhenFinishAsync(Task task, Action`1<TArg> func, TArg arg);
    [AsyncStateMachineAttribute("System.Xml.AsyncHelper/<CallVoidFuncWhenFinishCoreAsync>d__5`1")]
[ExtensionAttribute]
private static Task CallVoidFuncWhenFinishCoreAsync(Task task, Action`1<TArg> func, TArg arg);
    [ExtensionAttribute]
public static Task`1<bool> ReturnTrueTaskWhenFinishAsync(Task task);
    [AsyncStateMachineAttribute("System.Xml.AsyncHelper/<ReturnTrueTaskWhenFinishCoreAsync>d__7")]
[ExtensionAttribute]
private static Task`1<bool> ReturnTrueTaskWhenFinishCoreAsync(Task task);
    [ExtensionAttribute]
public static Task CallTaskFuncWhenFinishAsync(Task task, Func`2<TArg, Task> func, TArg arg);
    [AsyncStateMachineAttribute("System.Xml.AsyncHelper/<CallTaskFuncWhenFinishCoreAsync>d__9`1")]
private static Task CallTaskFuncWhenFinishCoreAsync(Task task, Func`2<TArg, Task> func, TArg arg);
    [ExtensionAttribute]
public static Task`1<bool> CallBoolTaskFuncWhenFinishAsync(Task task, Func`2<TArg, Task`1<bool>> func, TArg arg);
    [AsyncStateMachineAttribute("System.Xml.AsyncHelper/<CallBoolTaskFuncWhenFinishCoreAsync>d__11`1")]
[ExtensionAttribute]
private static Task`1<bool> CallBoolTaskFuncWhenFinishCoreAsync(Task task, Func`2<TArg, Task`1<bool>> func, TArg arg);
    [ExtensionAttribute]
public static Task`1<bool> ContinueBoolTaskFuncWhenFalseAsync(Task`1<bool> task, Func`2<TArg, Task`1<bool>> func, TArg arg);
    [AsyncStateMachineAttribute("System.Xml.AsyncHelper/<ContinueBoolTaskFuncWhenFalseCoreAsync>d__13`1")]
private static Task`1<bool> ContinueBoolTaskFuncWhenFalseCoreAsync(Task`1<bool> task, Func`2<TArg, Task`1<bool>> func, TArg arg);
}
internal class System.Xml.Base64Decoder : IncrementalReadDecoder {
    private Byte[] _buffer;
    private int _startIndex;
    private int _curIndex;
    private int _endIndex;
    private int _bits;
    private int _bitsFilled;
    private static string s_charsBase64;
    private static Byte[] s_mapBase64;
    private static int MaxValidChar;
    private static byte Invalid;
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    private static Base64Decoder();
    internal virtual int get_DecodedCount();
    internal virtual bool get_IsFull();
    [SecuritySafeCriticalAttribute]
internal virtual int Decode(Char[] chars, int startPos, int len);
    [SecuritySafeCriticalAttribute]
internal virtual int Decode(string str, int startPos, int len);
    internal virtual void Reset();
    internal virtual void SetNextOutputBuffer(Array buffer, int index, int count);
    private static Byte[] ConstructMapBase64();
    [SecurityCriticalAttribute]
private void Decode(Char* pChars, Char* pCharsEndPos, Byte* pBytes, Byte* pBytesEndPos, Int32& charsDecoded, Int32& bytesDecoded);
}
internal abstract class System.Xml.Base64Encoder : object {
    private Byte[] _leftOverBytes;
    private int _leftOverBytesCount;
    private Char[] _charsLine;
    internal static int Base64LineSize;
    internal static int LineSizeInBytes;
    internal abstract virtual void WriteChars(Char[] chars, int index, int count);
    internal void Encode(Byte[] buffer, int index, int count);
    internal void Flush();
    internal abstract virtual Task WriteCharsAsync(Char[] chars, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.Base64Encoder/<EncodeAsync>d__10")]
internal Task EncodeAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.Base64Encoder/<FlushAsync>d__11")]
internal Task FlushAsync();
}
internal class System.Xml.BinHexDecoder : IncrementalReadDecoder {
    private Byte[] _buffer;
    private int _startIndex;
    private int _curIndex;
    private int _endIndex;
    private bool _hasHalfByteCached;
    private byte _cachedHalfByte;
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    internal virtual int get_DecodedCount();
    internal virtual bool get_IsFull();
    [SecuritySafeCriticalAttribute]
internal virtual int Decode(Char[] chars, int startPos, int len);
    [SecuritySafeCriticalAttribute]
internal virtual int Decode(string str, int startPos, int len);
    internal virtual void Reset();
    internal virtual void SetNextOutputBuffer(Array buffer, int index, int count);
    [SecuritySafeCriticalAttribute]
public static Byte[] Decode(Char[] chars, bool allowOddChars);
    [SecurityCriticalAttribute]
private static void Decode(Char* pChars, Char* pCharsEndPos, Byte* pBytes, Byte* pBytesEndPos, Boolean& hasHalfByteCached, Byte& cachedHalfByte, Int32& charsDecoded, Int32& bytesDecoded);
}
internal static class System.Xml.BinHexEncoder : object {
    private static string s_hexDigits;
    private static int CharsChunkSize;
    internal static void Encode(Byte[] buffer, int index, int count, XmlWriter writer);
    internal static string Encode(Byte[] inArray, int offsetIn, int count);
    private static int Encode(Byte[] inArray, int offsetIn, int count, Char[] outArray);
    [AsyncStateMachineAttribute("System.Xml.BinHexEncoder/<EncodeAsync>d__5")]
internal static Task EncodeAsync(Byte[] buffer, int index, int count, XmlWriter writer);
}
internal static class System.Xml.Bits : object {
    private static UInt32 s_MASK_0101010101010101;
    private static UInt32 s_MASK_0011001100110011;
    private static UInt32 s_MASK_0000111100001111;
    private static UInt32 s_MASK_0000000011111111;
    private static UInt32 s_MASK_1111111111111111;
    private static Bits();
    public static int Count(UInt32 num);
    public static bool ExactlyOne(UInt32 num);
    public static int LeastPosition(UInt32 num);
}
internal class System.Xml.BitStack : object {
    private UInt32[] _bitStack;
    private int _stackPos;
    private UInt32 _curr;
    public void PushBit(bool bit);
    public bool PopBit();
    public bool PeekBit();
    private void PushCurr();
    private void PopCurr();
}
internal class System.Xml.BufferBuilder : object {
    private StringBuilder _stringBuilder;
    private Buffer[] _buffers;
    private int _buffersCount;
    private Char[] _lastBuffer;
    private int _lastBufferIndex;
    private int _length;
    private static int BufferSize;
    private static int InitialBufferArrayLength;
    private static int MaxStringBuilderLength;
    private static int DefaultSBCapacity;
    public int Length { get; public set; }
    public int get_Length();
    public void set_Length(int value);
    public void Append(char value);
    [SecuritySafeCriticalAttribute]
public void Append(Char[] value, int start, int count);
    public void Append(string value);
    [SecuritySafeCriticalAttribute]
public void Append(string value, int start, int count);
    public void Clear();
    internal void ClearBuffers();
    public virtual string ToString();
    private void CreateBuffers();
    [SecurityCriticalAttribute]
private void AppendHelper(Char* pSource, int count);
    private void AddBuffer();
    private void Recycle(Buffer& buf);
    private void SetLength(int newLength);
    [SecurityCriticalAttribute]
internal static void wstrcpy(Char* dmem, Char* smem, int charCount);
}
internal class System.Xml.CharEntityEncoderFallback : EncoderFallback {
    private CharEntityEncoderFallbackBuffer _fallbackBuffer;
    private Int32[] _textContentMarks;
    private int _endMarkPos;
    private int _curMarkPos;
    private int _startOffset;
    public int MaxCharCount { get; }
    internal int StartOffset { get; internal set; }
    public virtual EncoderFallbackBuffer CreateFallbackBuffer();
    public virtual int get_MaxCharCount();
    internal int get_StartOffset();
    internal void set_StartOffset(int value);
    internal void Reset(Int32[] textContentMarks, int endMarkPos);
    internal bool CanReplaceAt(int index);
}
internal class System.Xml.CharEntityEncoderFallbackBuffer : EncoderFallbackBuffer {
    private CharEntityEncoderFallback _parent;
    private string _charEntity;
    private int _charEntityIndex;
    public int Remaining { get; }
    internal CharEntityEncoderFallbackBuffer(CharEntityEncoderFallback parent);
    public virtual bool Fallback(char charUnknown, int index);
    public virtual bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
    public virtual char GetNextChar();
    public virtual bool MovePrevious();
    public virtual int get_Remaining();
    public virtual void Reset();
    private int SurrogateCharToUtf32(char highSurrogate, char lowSurrogate);
}
public enum System.Xml.ConformanceLevel : Enum {
    public int value__;
    public static ConformanceLevel Auto;
    public static ConformanceLevel Fragment;
    public static ConformanceLevel Document;
}
internal class System.Xml.DtdParser : object {
    private IDtdParserAdapter _readerAdapter;
    private XmlNameTable _nameTable;
    private SchemaInfo _schemaInfo;
    private XmlCharType _xmlCharType;
    private string _systemId;
    private string _publicId;
    private Char[] _chars;
    private int _charsUsed;
    private int _curPos;
    private ScanningFunction _scanningFunction;
    private ScanningFunction _nextScaningFunction;
    private ScanningFunction _savedScanningFunction;
    private bool _whitespaceSeen;
    private int _tokenStartPos;
    private int _colonPos;
    private BufferBuilder _internalSubsetValueSb;
    private int _externalEntitiesDepth;
    private int _currentEntityId;
    private bool _freeFloatingDtd;
    private bool _hasFreeFloatingInternalSubset;
    private BufferBuilder _stringBuilder;
    private int _condSectionDepth;
    private LineInfo _literalLineInfo;
    private char _literalQuoteChar;
    private string _documentBaseUri;
    private string _externalDtdBaseUri;
    private static int CondSectionEntityIdsInitialSize;
    private bool ParsingInternalSubset { get; }
    private bool IgnoreEntityReferences { get; }
    private bool SaveInternalSubsetValue { get; }
    private bool ParsingTopLevelMarkup { get; }
    private bool SupportNamespaces { get; }
    private bool Normalize { get; }
    private int LineNo { get; }
    private int LinePos { get; }
    private string BaseUriStr { get; }
    internal static IDtdParser Create();
    private void Initialize(IDtdParserAdapter readerAdapter);
    private void InitializeFreeFloatingDtd(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter);
    private sealed virtual override IDtdInfo System.Xml.IDtdParser.ParseInternalDtd(IDtdParserAdapter adapter, bool saveInternalSubset);
    private sealed virtual override IDtdInfo System.Xml.IDtdParser.ParseFreeFloatingDtd(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter);
    private bool get_ParsingInternalSubset();
    private bool get_IgnoreEntityReferences();
    private bool get_SaveInternalSubsetValue();
    private bool get_ParsingTopLevelMarkup();
    private bool get_SupportNamespaces();
    private bool get_Normalize();
    private void Parse(bool saveInternalSubset);
    private void ParseInDocumentDtd(bool saveInternalSubset);
    private void ParseFreeFloatingDtd();
    private void ParseInternalSubset();
    private void ParseExternalSubset();
    private void ParseSubset();
    private void ParseAttlistDecl();
    private void ParseAttlistType(SchemaAttDef attrDef, SchemaElementDecl elementDecl, bool ignoreErrors);
    private void ParseAttlistDefault(SchemaAttDef attrDef, bool ignoreErrors);
    private void ParseElementDecl();
    private void ParseElementOnlyContentNoValidation();
    private void ParseHowManyNoValidation();
    private void ParseElementMixedContentNoValidation();
    private void ParseEntityDecl();
    private void ParseNotationDecl();
    private void ParseComment();
    private void ParsePI();
    private void ParseCondSection();
    private void ParseExternalId(Token idTokenType, Token declType, String& publicId, String& systemId);
    private Token GetToken(bool needWhiteSpace);
    private Token ScanSubsetContent();
    private Token ScanNameExpected();
    private Token ScanQNameExpected();
    private Token ScanNmtokenExpected();
    private Token ScanDoctype1();
    private Token ScanDoctype2();
    private Token ScanClosingTag();
    private Token ScanElement1();
    private Token ScanElement2();
    private Token ScanElement3();
    private Token ScanElement4();
    private Token ScanElement5();
    private Token ScanElement6();
    private Token ScanElement7();
    private Token ScanAttlist1();
    private Token ScanAttlist2();
    private Token ScanAttlist3();
    private Token ScanAttlist4();
    private Token ScanAttlist5();
    private Token ScanAttlist6();
    private Token ScanAttlist7();
    private Token ScanLiteral(LiteralType literalType);
    private XmlQualifiedName ScanEntityName();
    private Token ScanNotation1();
    private Token ScanSystemId();
    private Token ScanEntity1();
    private Token ScanEntity2();
    private Token ScanEntity3();
    private Token ScanPublicId1();
    private Token ScanPublicId2();
    private Token ScanCondSection1();
    private Token ScanCondSection2();
    private Token ScanCondSection3();
    private void ScanName();
    private void ScanQName();
    private void ScanQName(bool isQName);
    private bool ReadDataInName();
    private void ScanNmtoken();
    private bool EatPublicKeyword();
    private bool EatSystemKeyword();
    private XmlQualifiedName GetNameQualified(bool canHavePrefix);
    private string GetNameString();
    private string GetNmtokenString();
    private string GetValue();
    private string GetValueWithStrippedSpaces();
    private int ReadData();
    private void LoadParsingBuffer();
    private void SaveParsingBuffer();
    private void SaveParsingBuffer(int internalSubsetValueEndPos);
    private bool HandleEntityReference(bool paramEntity, bool inLiteral, bool inAttribute);
    private bool HandleEntityReference(XmlQualifiedName entityName, bool paramEntity, bool inLiteral, bool inAttribute);
    private bool HandleEntityEnd(bool inLiteral);
    private SchemaEntity VerifyEntityReference(XmlQualifiedName entityName, bool paramEntity, bool mustBeDeclared, bool inAttribute);
    private bool IsAttributeValueType(Token token);
    private int get_LineNo();
    private int get_LinePos();
    private string get_BaseUriStr();
    private void OnUnexpectedError();
    private void Throw(int curPos, string res);
    private void Throw(int curPos, string res, string arg);
    private void Throw(int curPos, string res, String[] args);
    private void Throw(string res, string arg, int lineNo, int linePos);
    private void ThrowInvalidChar(int pos, string data, int invCharPos);
    private void ThrowInvalidChar(Char[] data, int length, int invCharPos);
    private void ThrowUnexpectedToken(int pos, string expectedToken);
    private void ThrowUnexpectedToken(int pos, string expectedToken1, string expectedToken2);
    private string ParseUnexpectedToken(int startPos);
    internal static string StripSpaces(string value);
}
public enum System.Xml.DtdProcessing : Enum {
    public int value__;
    public static DtdProcessing Prohibit;
    public static DtdProcessing Ignore;
    public static DtdProcessing Parse;
}
internal enum System.Xml.ExceptionType : Enum {
    public int value__;
    public static ExceptionType ArgumentException;
    public static ExceptionType XmlException;
}
internal interface System.Xml.IDtdAttributeInfo {
    public string Prefix { get; }
    public string LocalName { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public bool IsNonCDataType { get; }
    public bool IsDeclaredInExternal { get; }
    public bool IsXmlAttribute { get; }
    public abstract virtual string get_Prefix();
    public abstract virtual string get_LocalName();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
    public abstract virtual bool get_IsNonCDataType();
    public abstract virtual bool get_IsDeclaredInExternal();
    public abstract virtual bool get_IsXmlAttribute();
}
internal interface System.Xml.IDtdAttributeListInfo {
    public string Prefix { get; }
    public string LocalName { get; }
    public bool HasNonCDataAttributes { get; }
    public abstract virtual string get_Prefix();
    public abstract virtual string get_LocalName();
    public abstract virtual bool get_HasNonCDataAttributes();
    public abstract virtual IDtdAttributeInfo LookupAttribute(string prefix, string localName);
    public abstract virtual IEnumerable`1<IDtdDefaultAttributeInfo> LookupDefaultAttributes();
}
internal interface System.Xml.IDtdDefaultAttributeInfo {
    public string DefaultValueExpanded { get; }
    public object DefaultValueTyped { get; }
    public int ValueLineNumber { get; }
    public int ValueLinePosition { get; }
    public abstract virtual string get_DefaultValueExpanded();
    public abstract virtual object get_DefaultValueTyped();
    public abstract virtual int get_ValueLineNumber();
    public abstract virtual int get_ValueLinePosition();
}
internal interface System.Xml.IDtdEntityInfo {
    public string Name { get; }
    public bool IsExternal { get; }
    public bool IsDeclaredInExternal { get; }
    public bool IsUnparsedEntity { get; }
    public bool IsParameterEntity { get; }
    public string BaseUriString { get; }
    public string DeclaredUriString { get; }
    public string SystemId { get; }
    public string PublicId { get; }
    public string Text { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsExternal();
    public abstract virtual bool get_IsDeclaredInExternal();
    public abstract virtual bool get_IsUnparsedEntity();
    public abstract virtual bool get_IsParameterEntity();
    public abstract virtual string get_BaseUriString();
    public abstract virtual string get_DeclaredUriString();
    public abstract virtual string get_SystemId();
    public abstract virtual string get_PublicId();
    public abstract virtual string get_Text();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
internal interface System.Xml.IDtdInfo {
    public XmlQualifiedName Name { get; }
    public string InternalDtdSubset { get; }
    public bool HasDefaultAttributes { get; }
    public bool HasNonCDataAttributes { get; }
    public abstract virtual XmlQualifiedName get_Name();
    public abstract virtual string get_InternalDtdSubset();
    public abstract virtual bool get_HasDefaultAttributes();
    public abstract virtual bool get_HasNonCDataAttributes();
    public abstract virtual IDtdAttributeListInfo LookupAttributeList(string prefix, string localName);
    public abstract virtual IEnumerable`1<IDtdAttributeListInfo> GetAttributeLists();
    public abstract virtual IDtdEntityInfo LookupEntity(string name);
}
internal interface System.Xml.IDtdParser {
    public abstract virtual IDtdInfo ParseInternalDtd(IDtdParserAdapter adapter, bool saveInternalSubset);
    public abstract virtual IDtdInfo ParseFreeFloatingDtd(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter);
}
internal interface System.Xml.IDtdParserAdapter {
    public XmlNameTable NameTable { get; }
    public IXmlNamespaceResolver NamespaceResolver { get; }
    public Uri BaseUri { get; }
    public Char[] ParsingBuffer { get; }
    public int ParsingBufferLength { get; }
    public int CurrentPosition { get; public set; }
    public int LineNo { get; }
    public int LineStartPosition { get; }
    public bool IsEof { get; }
    public int EntityStackLength { get; }
    public bool IsEntityEolNormalized { get; }
    public abstract virtual XmlNameTable get_NameTable();
    public abstract virtual IXmlNamespaceResolver get_NamespaceResolver();
    public abstract virtual Uri get_BaseUri();
    public abstract virtual Char[] get_ParsingBuffer();
    public abstract virtual int get_ParsingBufferLength();
    public abstract virtual int get_CurrentPosition();
    public abstract virtual void set_CurrentPosition(int value);
    public abstract virtual int get_LineNo();
    public abstract virtual int get_LineStartPosition();
    public abstract virtual bool get_IsEof();
    public abstract virtual int get_EntityStackLength();
    public abstract virtual bool get_IsEntityEolNormalized();
    public abstract virtual int ReadData();
    public abstract virtual void OnNewLine(int pos);
    public abstract virtual int ParseNumericCharRef(BufferBuilder internalSubsetBuilder);
    public abstract virtual int ParseNamedCharRef(bool expand, BufferBuilder internalSubsetBuilder);
    public abstract virtual void ParsePI(BufferBuilder sb);
    public abstract virtual void ParseComment(BufferBuilder sb);
    public abstract virtual bool PushEntity(IDtdEntityInfo entity, Int32& entityId);
    public abstract virtual bool PopEntity(IDtdEntityInfo& oldEntity, Int32& newEntityId);
    public abstract virtual bool PushExternalSubset(string systemId, string publicId);
    public abstract virtual void PushInternalDtd(string baseUri, string internalDtd);
    public abstract virtual void OnSystemId(string systemId, LineInfo keywordLineInfo, LineInfo systemLiteralLineInfo);
    public abstract virtual void OnPublicId(string publicId, LineInfo keywordLineInfo, LineInfo publicLiteralLineInfo);
    public abstract virtual void Throw(Exception e);
}
internal abstract class System.Xml.IncrementalReadDecoder : object {
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    internal abstract virtual int get_DecodedCount();
    internal abstract virtual bool get_IsFull();
    internal abstract virtual void SetNextOutputBuffer(Array array, int offset, int len);
    internal abstract virtual int Decode(Char[] chars, int startPos, int len);
    internal abstract virtual int Decode(string str, int startPos, int len);
    internal abstract virtual void Reset();
}
public interface System.Xml.IXmlLineInfo {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual bool HasLineInfo();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
public interface System.Xml.IXmlNamespaceResolver {
    public abstract virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public abstract virtual string LookupNamespace(string prefix);
    public abstract virtual string LookupPrefix(string namespaceName);
}
internal class System.Xml.LineInfo : ValueType {
    internal int lineNo;
    internal int linePos;
    public LineInfo(int lineNo, int linePos);
    public void Set(int lineNo, int linePos);
}
[FlagsAttribute]
public enum System.Xml.NamespaceHandling : Enum {
    public int value__;
    public static NamespaceHandling Default;
    public static NamespaceHandling OmitDuplicates;
}
public class System.Xml.NameTable : XmlNameTable {
    private Entry[] _entries;
    private int _count;
    private int _mask;
    private int _hashCodeRandomizer;
    public virtual string Add(string key);
    public virtual string Add(Char[] key, int start, int len);
    public virtual string Get(string value);
    public virtual string Get(Char[] key, int start, int len);
    private string AddEntry(string str, int hashCode);
    private void Grow();
    private static bool TextEquals(string str1, Char[] str2, int str2Start, int str2Length);
}
public enum System.Xml.NewLineHandling : Enum {
    public int value__;
    public static NewLineHandling Replace;
    public static NewLineHandling Entitize;
    public static NewLineHandling None;
}
internal class System.Xml.ReadContentAsBinaryHelper : object {
    private XmlReader _reader;
    private State _state;
    private int _valueOffset;
    private bool _isEnd;
    private bool _canReadValueChunk;
    private Char[] _valueChunk;
    private int _valueChunkLength;
    private IncrementalReadDecoder _decoder;
    private Base64Decoder _base64Decoder;
    private BinHexDecoder _binHexDecoder;
    private static int ChunkSize;
    internal ReadContentAsBinaryHelper(XmlReader reader);
    internal static ReadContentAsBinaryHelper CreateOrReset(ReadContentAsBinaryHelper helper, XmlReader reader);
    internal int ReadContentAsBase64(Byte[] buffer, int index, int count);
    internal int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    internal int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    internal int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    internal void Finish();
    internal void Reset();
    private bool Init();
    private bool InitOnElement();
    private void InitBase64Decoder();
    private void InitBinHexDecoder();
    private int ReadContentAsBinary(Byte[] buffer, int index, int count);
    private int ReadElementContentAsBinary(Byte[] buffer, int index, int count);
    private bool MoveToNextContentNode(bool moveIfOnContentNode);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadContentAsBase64Async>d__27")]
internal Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadContentAsBinHexAsync>d__28")]
internal Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadElementContentAsBase64Async>d__29")]
internal Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadElementContentAsBinHexAsync>d__30")]
internal Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<FinishAsync>d__31")]
internal Task FinishAsync();
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<InitAsync>d__32")]
private Task`1<bool> InitAsync();
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<InitOnElementAsync>d__33")]
private Task`1<bool> InitOnElementAsync();
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadContentAsBinaryAsync>d__34")]
private Task`1<int> ReadContentAsBinaryAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadElementContentAsBinaryAsync>d__35")]
private Task`1<int> ReadElementContentAsBinaryAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<MoveToNextContentNodeAsync>d__36")]
private Task`1<bool> MoveToNextContentNodeAsync(bool moveIfOnContentNode);
}
public enum System.Xml.ReadState : Enum {
    public int value__;
    public static ReadState Initial;
    public static ReadState Interactive;
    public static ReadState Error;
    public static ReadState EndOfFile;
    public static ReadState Closed;
}
internal static class System.Xml.Ref : object {
    public static bool Equal(string strA, string strB);
    public static void Equals(object objA, object objB);
}
internal class System.Xml.SafeAsciiDecoder : Decoder {
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual void Convert(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, int charCount, bool flush, Int32& bytesUsed, Int32& charsUsed, Boolean& completed);
}
internal class System.Xml.Schema.SchemaAttDef : SchemaDeclBase {
    private string _defExpanded;
    private int _lineNum;
    private int _linePos;
    private int _valueLineNum;
    private int _valueLinePos;
    private Reserve _reserved;
    private XmlTokenizedType _tokenizedType;
    private string System.Xml.IDtdAttributeInfo.Prefix { get; }
    private string System.Xml.IDtdAttributeInfo.LocalName { get; }
    private int System.Xml.IDtdAttributeInfo.LineNumber { get; }
    private int System.Xml.IDtdAttributeInfo.LinePosition { get; }
    private bool System.Xml.IDtdAttributeInfo.IsNonCDataType { get; }
    private bool System.Xml.IDtdAttributeInfo.IsDeclaredInExternal { get; }
    private bool System.Xml.IDtdAttributeInfo.IsXmlAttribute { get; }
    private string System.Xml.IDtdDefaultAttributeInfo.DefaultValueExpanded { get; }
    private object System.Xml.IDtdDefaultAttributeInfo.DefaultValueTyped { get; }
    private int System.Xml.IDtdDefaultAttributeInfo.ValueLineNumber { get; }
    private int System.Xml.IDtdDefaultAttributeInfo.ValueLinePosition { get; }
    internal int LinePosition { get; internal set; }
    internal int LineNumber { get; internal set; }
    internal int ValueLinePosition { get; internal set; }
    internal int ValueLineNumber { get; internal set; }
    internal string DefaultValueExpanded { get; internal set; }
    internal XmlTokenizedType TokenizedType { get; internal set; }
    internal Reserve Reserved { get; internal set; }
    public SchemaAttDef(XmlQualifiedName name, string prefix);
    private sealed virtual override string System.Xml.IDtdAttributeInfo.get_Prefix();
    private sealed virtual override string System.Xml.IDtdAttributeInfo.get_LocalName();
    private sealed virtual override int System.Xml.IDtdAttributeInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IDtdAttributeInfo.get_LinePosition();
    private sealed virtual override bool System.Xml.IDtdAttributeInfo.get_IsNonCDataType();
    private sealed virtual override bool System.Xml.IDtdAttributeInfo.get_IsDeclaredInExternal();
    private sealed virtual override bool System.Xml.IDtdAttributeInfo.get_IsXmlAttribute();
    private sealed virtual override string System.Xml.IDtdDefaultAttributeInfo.get_DefaultValueExpanded();
    private sealed virtual override object System.Xml.IDtdDefaultAttributeInfo.get_DefaultValueTyped();
    private sealed virtual override int System.Xml.IDtdDefaultAttributeInfo.get_ValueLineNumber();
    private sealed virtual override int System.Xml.IDtdDefaultAttributeInfo.get_ValueLinePosition();
    internal int get_LinePosition();
    internal void set_LinePosition(int value);
    internal int get_LineNumber();
    internal void set_LineNumber(int value);
    internal int get_ValueLinePosition();
    internal void set_ValueLinePosition(int value);
    internal int get_ValueLineNumber();
    internal void set_ValueLineNumber(int value);
    internal string get_DefaultValueExpanded();
    internal void set_DefaultValueExpanded(string value);
    internal XmlTokenizedType get_TokenizedType();
    internal void set_TokenizedType(XmlTokenizedType value);
    internal Reserve get_Reserved();
    internal void set_Reserved(Reserve value);
}
internal abstract class System.Xml.Schema.SchemaDeclBase : object {
    protected XmlQualifiedName name;
    protected string prefix;
    protected bool isDeclaredInExternal;
    protected Use presence;
    internal XmlQualifiedName Name { get; internal set; }
    internal string Prefix { get; internal set; }
    internal bool IsDeclaredInExternal { get; internal set; }
    internal Use Presence { get; internal set; }
    protected SchemaDeclBase(XmlQualifiedName name, string prefix);
    internal XmlQualifiedName get_Name();
    internal void set_Name(XmlQualifiedName value);
    internal string get_Prefix();
    internal void set_Prefix(string value);
    internal bool get_IsDeclaredInExternal();
    internal void set_IsDeclaredInExternal(bool value);
    internal Use get_Presence();
    internal void set_Presence(Use value);
}
internal class System.Xml.Schema.SchemaElementDecl : SchemaDeclBase {
    private Dictionary`2<XmlQualifiedName, SchemaAttDef> _attdefs;
    private List`1<IDtdDefaultAttributeInfo> _defaultAttdefs;
    private bool _isIdDeclared;
    private bool _hasNonCDataAttribute;
    private string System.Xml.IDtdAttributeListInfo.Prefix { get; }
    private string System.Xml.IDtdAttributeListInfo.LocalName { get; }
    private bool System.Xml.IDtdAttributeListInfo.HasNonCDataAttributes { get; }
    internal bool IsIdDeclared { get; internal set; }
    internal bool HasNonCDataAttribute { get; internal set; }
    internal IList`1<IDtdDefaultAttributeInfo> DefaultAttDefs { get; }
    internal SchemaElementDecl(XmlQualifiedName name, string prefix);
    private sealed virtual override string System.Xml.IDtdAttributeListInfo.get_Prefix();
    private sealed virtual override string System.Xml.IDtdAttributeListInfo.get_LocalName();
    private sealed virtual override bool System.Xml.IDtdAttributeListInfo.get_HasNonCDataAttributes();
    private sealed virtual override IDtdAttributeInfo System.Xml.IDtdAttributeListInfo.LookupAttribute(string prefix, string localName);
    private sealed virtual override IEnumerable`1<IDtdDefaultAttributeInfo> System.Xml.IDtdAttributeListInfo.LookupDefaultAttributes();
    internal bool get_IsIdDeclared();
    internal void set_IsIdDeclared(bool value);
    internal bool get_HasNonCDataAttribute();
    internal void set_HasNonCDataAttribute(bool value);
    internal void AddAttDef(SchemaAttDef attdef);
    internal SchemaAttDef GetAttDef(XmlQualifiedName qname);
    internal IList`1<IDtdDefaultAttributeInfo> get_DefaultAttDefs();
}
internal class System.Xml.Schema.SchemaEntity : object {
    private XmlQualifiedName _qname;
    private string _url;
    private string _pubid;
    private string _text;
    private XmlQualifiedName _ndata;
    private int _lineNumber;
    private int _linePosition;
    private bool _isParameter;
    private bool _isExternal;
    private bool _parsingInProgress;
    private bool _isDeclaredInExternal;
    private string _baseURI;
    private string _declaredURI;
    private string System.Xml.IDtdEntityInfo.Name { get; }
    private bool System.Xml.IDtdEntityInfo.IsExternal { get; }
    private bool System.Xml.IDtdEntityInfo.IsDeclaredInExternal { get; }
    private bool System.Xml.IDtdEntityInfo.IsUnparsedEntity { get; }
    private bool System.Xml.IDtdEntityInfo.IsParameterEntity { get; }
    private string System.Xml.IDtdEntityInfo.BaseUriString { get; }
    private string System.Xml.IDtdEntityInfo.DeclaredUriString { get; }
    private string System.Xml.IDtdEntityInfo.SystemId { get; }
    private string System.Xml.IDtdEntityInfo.PublicId { get; }
    private string System.Xml.IDtdEntityInfo.Text { get; }
    private int System.Xml.IDtdEntityInfo.LineNumber { get; }
    private int System.Xml.IDtdEntityInfo.LinePosition { get; }
    internal XmlQualifiedName Name { get; }
    internal string Url { get; internal set; }
    internal string Pubid { get; internal set; }
    internal bool IsExternal { get; internal set; }
    internal bool DeclaredInExternal { get; internal set; }
    internal XmlQualifiedName NData { get; internal set; }
    internal string Text { get; internal set; }
    internal int Line { get; internal set; }
    internal int Pos { get; internal set; }
    internal string BaseURI { get; internal set; }
    internal bool ParsingInProgress { get; internal set; }
    internal string DeclaredURI { get; internal set; }
    internal SchemaEntity(XmlQualifiedName qname, bool isParameter);
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_Name();
    private sealed virtual override bool System.Xml.IDtdEntityInfo.get_IsExternal();
    private sealed virtual override bool System.Xml.IDtdEntityInfo.get_IsDeclaredInExternal();
    private sealed virtual override bool System.Xml.IDtdEntityInfo.get_IsUnparsedEntity();
    private sealed virtual override bool System.Xml.IDtdEntityInfo.get_IsParameterEntity();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_BaseUriString();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_DeclaredUriString();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_SystemId();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_PublicId();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_Text();
    private sealed virtual override int System.Xml.IDtdEntityInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IDtdEntityInfo.get_LinePosition();
    internal XmlQualifiedName get_Name();
    internal string get_Url();
    internal void set_Url(string value);
    internal string get_Pubid();
    internal void set_Pubid(string value);
    internal bool get_IsExternal();
    internal void set_IsExternal(bool value);
    internal bool get_DeclaredInExternal();
    internal void set_DeclaredInExternal(bool value);
    internal XmlQualifiedName get_NData();
    internal void set_NData(XmlQualifiedName value);
    internal string get_Text();
    internal void set_Text(string value);
    internal int get_Line();
    internal void set_Line(int value);
    internal int get_Pos();
    internal void set_Pos(int value);
    internal string get_BaseURI();
    internal void set_BaseURI(string value);
    internal bool get_ParsingInProgress();
    internal void set_ParsingInProgress(bool value);
    internal string get_DeclaredURI();
    internal void set_DeclaredURI(string value);
}
internal class System.Xml.Schema.SchemaInfo : object {
    private Dictionary`2<XmlQualifiedName, SchemaElementDecl> _elementDecls;
    private Dictionary`2<XmlQualifiedName, SchemaElementDecl> _undeclaredElementDecls;
    private Dictionary`2<XmlQualifiedName, SchemaEntity> _generalEntities;
    private Dictionary`2<XmlQualifiedName, SchemaEntity> _parameterEntities;
    private XmlQualifiedName _docTypeName;
    private string _internalDtdSubset;
    private bool _hasNonCDataAttributes;
    private bool _hasDefaultAttributes;
    public XmlQualifiedName DocTypeName { get; public set; }
    internal string InternalDtdSubset { get; internal set; }
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> ElementDecls { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> UndeclaredElementDecls { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaEntity> GeneralEntities { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaEntity> ParameterEntities { get; }
    private bool System.Xml.IDtdInfo.HasDefaultAttributes { get; }
    private bool System.Xml.IDtdInfo.HasNonCDataAttributes { get; }
    private XmlQualifiedName System.Xml.IDtdInfo.Name { get; }
    private string System.Xml.IDtdInfo.InternalDtdSubset { get; }
    public XmlQualifiedName get_DocTypeName();
    public void set_DocTypeName(XmlQualifiedName value);
    internal string get_InternalDtdSubset();
    internal void set_InternalDtdSubset(string value);
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> get_ElementDecls();
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> get_UndeclaredElementDecls();
    internal Dictionary`2<XmlQualifiedName, SchemaEntity> get_GeneralEntities();
    internal Dictionary`2<XmlQualifiedName, SchemaEntity> get_ParameterEntities();
    internal void Finish();
    private sealed virtual override bool System.Xml.IDtdInfo.get_HasDefaultAttributes();
    private sealed virtual override bool System.Xml.IDtdInfo.get_HasNonCDataAttributes();
    private sealed virtual override IDtdAttributeListInfo System.Xml.IDtdInfo.LookupAttributeList(string prefix, string localName);
    [IteratorStateMachineAttribute("System.Xml.Schema.SchemaInfo/<System-Xml-IDtdInfo-GetAttributeLists>d__29")]
private sealed virtual override IEnumerable`1<IDtdAttributeListInfo> System.Xml.IDtdInfo.GetAttributeLists();
    private sealed virtual override IDtdEntityInfo System.Xml.IDtdInfo.LookupEntity(string name);
    private sealed virtual override XmlQualifiedName System.Xml.IDtdInfo.get_Name();
    private sealed virtual override string System.Xml.IDtdInfo.get_InternalDtdSubset();
}
public class System.Xml.Schema.XmlSchema : object {
}
public enum System.Xml.Schema.XmlSchemaForm : Enum {
    public int value__;
    public static XmlSchemaForm None;
    public static XmlSchemaForm Qualified;
    public static XmlSchemaForm Unqualified;
}
internal class System.Xml.Schema.XmlUntypedStringConverter : object {
    private bool _listsAllowed;
    private XmlUntypedStringConverter _listItemConverter;
    private static Type s_decimalType;
    private static Type s_int32Type;
    private static Type s_int64Type;
    private static Type s_stringType;
    private static Type s_objectType;
    private static Type s_byteType;
    private static Type s_int16Type;
    private static Type s_SByteType;
    private static Type s_UInt16Type;
    private static Type s_UInt32Type;
    private static Type s_UInt64Type;
    private static Type s_doubleType;
    private static Type s_singleType;
    private static Type s_dateTimeType;
    private static Type s_dateTimeOffsetType;
    private static Type s_booleanType;
    private static Type s_byteArrayType;
    private static Type s_xmlQualifiedNameType;
    private static Type s_uriType;
    private static Type s_timeSpanType;
    private static string s_untypedStringTypeName;
    internal static XmlUntypedStringConverter Instance;
    private XmlUntypedStringConverter(bool listsAllowed);
    private static XmlUntypedStringConverter();
    internal string ToString(object value, IXmlNamespaceResolver nsResolver);
    internal object FromString(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private byte Int32ToByte(int value);
    private short Int32ToInt16(int value);
    private sbyte Int32ToSByte(int value);
    private ushort Int32ToUInt16(int value);
    private UInt32 Int64ToUInt32(long value);
    private ulong DecimalToUInt64(decimal value);
    private string Base64BinaryToString(Byte[] value);
    private Byte[] StringToBase64Binary(string value);
    private string DateTimeToString(DateTime value);
    private static DateTime StringToDateTime(string value);
    private static string DateTimeOffsetToString(DateTimeOffset value);
    private static DateTimeOffset StringToDateTimeOffset(string value);
    private string DurationToString(TimeSpan value);
    private TimeSpan StringToDuration(string value);
    private string AnyUriToString(Uri value);
    protected static string QNameToString(XmlQualifiedName qname, IXmlNamespaceResolver nsResolver);
    private static XmlQualifiedName StringToQName(string value, IXmlNamespaceResolver nsResolver);
    private string ListTypeToString(object value, IXmlNamespaceResolver nsResolver);
    private object StringToListType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    private T[] ToArray(String[] stringArray, IXmlNamespaceResolver nsResolver);
    private Exception CreateInvalidClrMappingException(Type sourceType, Type destinationType);
}
internal class System.Xml.Schema.XsdDateTime : ValueType {
    private DateTime dt;
    private UInt32 extra;
    private static UInt32 TypeMask;
    private static UInt32 KindMask;
    private static UInt32 ZoneHourMask;
    private static UInt32 ZoneMinuteMask;
    private static int TypeShift;
    private static int KindShift;
    private static int ZoneHourShift;
    private static short maxFractionDigits;
    private static int Lzyyyy;
    private static int Lzyyyy_;
    private static int Lzyyyy_MM;
    private static int Lzyyyy_MM_;
    private static int Lzyyyy_MM_dd;
    private static int Lzyyyy_MM_ddT;
    private static int LzHH;
    private static int LzHH_;
    private static int LzHH_mm;
    private static int LzHH_mm_;
    private static int LzHH_mm_ss;
    private static int Lz_;
    private static int Lz_zz;
    private static int Lz_zz_;
    private static int Lz_zz_zz;
    private static int Lz__;
    private static int Lz__mm;
    private static int Lz__mm_;
    private static int Lz__mm__;
    private static int Lz__mm_dd;
    private static int Lz___;
    private static int Lz___dd;
    private DateTimeTypeCode InternalTypeCode { get; }
    private XsdDateTimeKind InternalKind { get; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public int Hour { get; }
    public int Minute { get; }
    public int Second { get; }
    public int Fraction { get; }
    public int ZoneHour { get; }
    public int ZoneMinute { get; }
    public XsdDateTime(string text, XsdDateTimeFlags kinds);
    public XsdDateTime(DateTime dateTime, XsdDateTimeFlags kinds);
    public XsdDateTime(DateTimeOffset dateTimeOffset);
    public XsdDateTime(DateTimeOffset dateTimeOffset, XsdDateTimeFlags kinds);
    private static XsdDateTime();
    private void InitiateXsdDateTime(Parser parser);
    private DateTimeTypeCode get_InternalTypeCode();
    private XsdDateTimeKind get_InternalKind();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public int get_Hour();
    public int get_Minute();
    public int get_Second();
    public int get_Fraction();
    public int get_ZoneHour();
    public int get_ZoneMinute();
    public static DateTime op_Implicit(XsdDateTime xdt);
    public static DateTimeOffset op_Implicit(XsdDateTime xdt);
    public virtual string ToString();
    private void PrintDate(StringBuilder sb);
    private void PrintTime(StringBuilder sb);
    private void PrintZone(StringBuilder sb);
    private void IntToCharArray(Char[] text, int start, int value, int digits);
    private void ShortToCharArray(Char[] text, int start, int value);
}
[FlagsAttribute]
internal enum System.Xml.Schema.XsdDateTimeFlags : Enum {
    public int value__;
    public static XsdDateTimeFlags DateTime;
    public static XsdDateTimeFlags Time;
    public static XsdDateTimeFlags Date;
    public static XsdDateTimeFlags GYearMonth;
    public static XsdDateTimeFlags GYear;
    public static XsdDateTimeFlags GMonthDay;
    public static XsdDateTimeFlags GDay;
    public static XsdDateTimeFlags GMonth;
    public static XsdDateTimeFlags AllXsd;
}
internal class System.Xml.Schema.XsdDuration : ValueType {
    private int _years;
    private int _months;
    private int _days;
    private int _hours;
    private int _minutes;
    private int _seconds;
    private UInt32 _nanoseconds;
    private static UInt32 NegativeBit;
    public bool IsNegative { get; }
    public int Years { get; }
    public int Months { get; }
    public int Days { get; }
    public int Hours { get; }
    public int Minutes { get; }
    public int Seconds { get; }
    public int Nanoseconds { get; }
    public XsdDuration(bool isNegative, int years, int months, int days, int hours, int minutes, int seconds, int nanoseconds);
    public XsdDuration(TimeSpan timeSpan);
    public XsdDuration(TimeSpan timeSpan, DurationType durationType);
    public XsdDuration(string s);
    public XsdDuration(string s, DurationType durationType);
    public bool get_IsNegative();
    public int get_Years();
    public int get_Months();
    public int get_Days();
    public int get_Hours();
    public int get_Minutes();
    public int get_Seconds();
    public int get_Nanoseconds();
    public TimeSpan ToTimeSpan();
    public TimeSpan ToTimeSpan(DurationType durationType);
    internal Exception TryToTimeSpan(DurationType durationType, TimeSpan& result);
    public virtual string ToString();
    internal string ToString(DurationType durationType);
    internal static Exception TryParse(string s, DurationType durationType, XsdDuration& result);
    private static string TryParseDigits(string s, Int32& offset, bool eatDigits, Int32& result, Int32& numDigits);
}
internal class System.Xml.SecureStringHasher : object {
    private int _hashCodeRandomizer;
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string key);
}
public interface System.Xml.Serialization.IXmlSerializable {
    public abstract virtual XmlSchema GetSchema();
    public abstract virtual void ReadXml(XmlReader reader);
    public abstract virtual void WriteXml(XmlWriter writer);
}
[AttributeUsageAttribute("1036")]
public class System.Xml.Serialization.XmlSchemaProviderAttribute : Attribute {
    private string _methodName;
    private bool _any;
    public string MethodName { get; }
    public bool IsAny { get; public set; }
    public XmlSchemaProviderAttribute(string methodName);
    public string get_MethodName();
    public bool get_IsAny();
    public void set_IsAny(bool value);
}
internal enum System.Xml.TriState : Enum {
    public int value__;
    public static TriState Unknown;
    public static TriState False;
    public static TriState True;
}
internal class System.Xml.UTF16Decoder : Decoder {
    private bool _bigEndian;
    private int _lastByte;
    private static int CharSize;
    public UTF16Decoder(bool bigEndian);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count, bool flush);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual void Convert(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, int charCount, bool flush, Int32& bytesUsed, Int32& charsUsed, Boolean& completed);
}
internal static class System.Xml.ValidateNames : object {
    private static XmlCharType s_xmlCharType;
    private static ValidateNames();
    internal static int ParseNmtokenNoNamespaces(string s, int offset);
    internal static bool IsNmtokenNoNamespaces(string s);
    internal static int ParseNameNoNamespaces(string s, int offset);
    internal static bool IsNameNoNamespaces(string s);
    internal static int ParseNCName(string s, int offset);
    internal static int ParseNCName(string s);
    internal static string ParseNCNameThrow(string s);
    private static bool ParseNCNameInternal(string s, bool throwOnError);
    internal static int ParseQName(string s, int offset, Int32& colonOffset);
    internal static void ParseQNameThrow(string s, String& prefix, String& localName);
    internal static void ThrowInvalidName(string s, int offsetStartChar, int offsetBadChar);
}
internal enum System.Xml.WhitespaceHandling : Enum {
    public int value__;
    public static WhitespaceHandling All;
    public static WhitespaceHandling Significant;
    public static WhitespaceHandling None;
}
public enum System.Xml.WriteState : Enum {
    public int value__;
    public static WriteState Start;
    public static WriteState Prolog;
    public static WriteState Element;
    public static WriteState Attribute;
    public static WriteState Content;
    public static WriteState Closed;
    public static WriteState Error;
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.XmlAsyncCheckReader : XmlReader {
    private XmlReader _coreReader;
    private Task _lastTask;
    internal XmlReader CoreReader { get; }
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool HasAttributes { get; }
    public XmlAsyncCheckReader(XmlReader reader);
    internal XmlReader get_CoreReader();
    public static XmlAsyncCheckReader CreateAsyncCheckWrapper(XmlReader reader);
    private void CheckAsync();
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual Type get_ValueType();
    public virtual object ReadContentAsObject();
    public virtual bool ReadContentAsBoolean();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual decimal ReadContentAsDecimal();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual string ReadContentAsString();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAsObject();
    public virtual object ReadElementContentAsObject(string localName, string namespaceURI);
    public virtual bool ReadElementContentAsBoolean();
    public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI);
    public virtual DateTimeOffset ReadContentAsDateTimeOffset();
    public virtual double ReadElementContentAsDouble();
    public virtual double ReadElementContentAsDouble(string localName, string namespaceURI);
    public virtual float ReadElementContentAsFloat();
    public virtual float ReadElementContentAsFloat(string localName, string namespaceURI);
    public virtual decimal ReadElementContentAsDecimal();
    public virtual decimal ReadElementContentAsDecimal(string localName, string namespaceURI);
    public virtual int ReadElementContentAsInt();
    public virtual int ReadElementContentAsInt(string localName, string namespaceURI);
    public virtual long ReadElementContentAsLong();
    public virtual long ReadElementContentAsLong(string localName, string namespaceURI);
    public virtual string ReadElementContentAsString();
    public virtual string ReadElementContentAsString(string localName, string namespaceURI);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceURI);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual void Skip();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual bool get_CanResolveEntity();
    public virtual void ResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public virtual XmlNodeType MoveToContent();
    public virtual void ReadStartElement();
    public virtual void ReadStartElement(string name);
    public virtual void ReadStartElement(string localname, string ns);
    public virtual void ReadEndElement();
    public virtual bool IsStartElement();
    public virtual bool IsStartElement(string name);
    public virtual bool IsStartElement(string localname, string ns);
    public virtual bool ReadToFollowing(string name);
    public virtual bool ReadToFollowing(string localName, string namespaceURI);
    public virtual bool ReadToDescendant(string name);
    public virtual bool ReadToDescendant(string localName, string namespaceURI);
    public virtual bool ReadToNextSibling(string name);
    public virtual bool ReadToNextSibling(string localName, string namespaceURI);
    public virtual string ReadInnerXml();
    public virtual string ReadOuterXml();
    public virtual XmlReader ReadSubtree();
    public virtual bool get_HasAttributes();
    protected virtual void Dispose(bool disposing);
    public virtual Task`1<string> GetValueAsync();
    public virtual Task`1<object> ReadContentAsObjectAsync();
    public virtual Task`1<string> ReadContentAsStringAsync();
    public virtual Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual Task`1<object> ReadElementContentAsObjectAsync();
    public virtual Task`1<string> ReadElementContentAsStringAsync();
    public virtual Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual Task`1<bool> ReadAsync();
    public virtual Task SkipAsync();
    public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
    public virtual Task`1<XmlNodeType> MoveToContentAsync();
    public virtual Task`1<string> ReadInnerXmlAsync();
    public virtual Task`1<string> ReadOuterXmlAsync();
}
internal class System.Xml.XmlAsyncCheckReaderWithLineInfo : XmlAsyncCheckReader {
    private IXmlLineInfo _readerAsIXmlLineInfo;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XmlAsyncCheckReaderWithLineInfo(XmlReader reader);
    public virtual bool HasLineInfo();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
}
internal class System.Xml.XmlAsyncCheckReaderWithLineInfoNS : XmlAsyncCheckReaderWithLineInfo {
    private IXmlNamespaceResolver _readerAsIXmlNamespaceResolver;
    public XmlAsyncCheckReaderWithLineInfoNS(XmlReader reader);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
}
internal class System.Xml.XmlAsyncCheckReaderWithNS : XmlAsyncCheckReader {
    private IXmlNamespaceResolver _readerAsIXmlNamespaceResolver;
    public XmlAsyncCheckReaderWithNS(XmlReader reader);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
}
internal class System.Xml.XmlAsyncCheckWriter : XmlWriter {
    private XmlWriter _coreWriter;
    private Task _lastTask;
    internal XmlWriter CoreWriter { get; }
    public XmlWriterSettings Settings { get; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public XmlAsyncCheckWriter(XmlWriter writer);
    internal XmlWriter get_CoreWriter();
    private void CheckAsync();
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual WriteState get_WriteState();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(bool value);
    internal virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    public virtual void WriteAttributes(XmlReader reader, bool defattr);
    public virtual void WriteNode(XmlReader reader, bool defattr);
    protected virtual void Dispose(bool disposing);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    public virtual Task WriteEndDocumentAsync();
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    public virtual Task WriteEndElementAsync();
    public virtual Task WriteFullEndElementAsync();
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteEndAttributeAsync();
    public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCommentAsync(string text);
    public virtual Task WriteProcessingInstructionAsync(string name, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    public virtual Task WriteBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task FlushAsync();
    public virtual Task WriteNmTokenAsync(string name);
    public virtual Task WriteNameAsync(string name);
    public virtual Task WriteQualifiedNameAsync(string localName, string ns);
    public virtual Task WriteAttributesAsync(XmlReader reader, bool defattr);
    public virtual Task WriteNodeAsync(XmlReader reader, bool defattr);
}
internal class System.Xml.XmlCharCheckingReader : XmlWrappingReader {
    private State _state;
    private bool _checkCharacters;
    private bool _ignoreWhitespace;
    private bool _ignoreComments;
    private bool _ignorePis;
    private DtdProcessing _dtdProcessing;
    private XmlNodeType _lastNodeType;
    private XmlCharType _xmlCharType;
    private ReadContentAsBinaryHelper _readBinaryHelper;
    public XmlReaderSettings Settings { get; }
    public ReadState ReadState { get; }
    public bool CanReadBinaryContent { get; }
    internal XmlCharCheckingReader(XmlReader reader, bool checkCharacters, bool ignoreWhitespace, bool ignoreComments, bool ignorePis, DtdProcessing dtdProcessing);
    public virtual XmlReaderSettings get_Settings();
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual ReadState get_ReadState();
    public virtual bool ReadAttributeValue();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    private void Throw(string res, string arg);
    private void Throw(string res, String[] args);
    private void CheckWhitespace(string value);
    private void ValidateQName(string name);
    private void ValidateQName(string prefix, string localName);
    private void CheckCharacters(string value);
    private void FinishReadBinary();
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadAsync>d__36")]
public virtual Task`1<bool> ReadAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadContentAsBase64Async>d__37")]
public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadContentAsBinHexAsync>d__38")]
public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadElementContentAsBase64Async>d__39")]
public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadElementContentAsBinHexAsync>d__40")]
public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<FinishReadBinaryAsync>d__41")]
private Task FinishReadBinaryAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private bool <>n__0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__1(Byte[] buffer, int index, int count);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__2(Byte[] buffer, int index, int count);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__3(Byte[] buffer, int index, int count);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__4(Byte[] buffer, int index, int count);
}
internal class System.Xml.XmlCharCheckingReaderWithNS : XmlCharCheckingReader {
    internal IXmlNamespaceResolver readerAsNSResolver;
    internal XmlCharCheckingReaderWithNS(XmlReader reader, IXmlNamespaceResolver readerAsNSResolver, bool checkCharacters, bool ignoreWhitespace, bool ignoreComments, bool ignorePis, DtdProcessing dtdProcessing);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
}
internal class System.Xml.XmlCharCheckingWriter : XmlWrappingWriter {
    private bool _checkValues;
    private bool _checkNames;
    private bool _replaceNewLines;
    private string _newLineChars;
    private XmlCharType _xmlCharType;
    public XmlWriterSettings Settings { get; }
    internal XmlCharCheckingWriter(XmlWriter baseWriter, bool checkValues, bool checkNames, bool replaceNewLines, string newLineChars);
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteNmToken(string name);
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    private void CheckCharacters(string str);
    private void CheckCharacters(Char[] data, int offset, int len);
    private void ValidateNCName(string ncname);
    private void ValidateQName(string name);
    private string ReplaceNewLines(string str);
    private string ReplaceNewLines(Char[] data, int offset, int len);
    private string InterleaveInvalidChars(string text, char invChar1, char invChar2);
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingWriter/<WriteCDataAsync>d__32")]
public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCommentAsync(string text);
    public virtual Task WriteProcessingInstructionAsync(string name, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteNmTokenAsync(string name);
    public virtual Task WriteNameAsync(string name);
    public virtual Task WriteQualifiedNameAsync(string localName, string ns);
}
internal class System.Xml.XmlCharType : ValueType {
    internal static int SurHighStart;
    internal static int SurHighEnd;
    internal static int SurLowStart;
    internal static int SurLowEnd;
    internal static int SurMask;
    internal static int fWhitespace;
    internal static int fLetter;
    internal static int fNCStartNameSC;
    internal static int fNCNameSC;
    internal static int fCharData;
    internal static int fNCNameXml4e;
    internal static int fText;
    internal static int fAttrValue;
    private static string s_PublicIdBitmap;
    private static Byte[] s_xmlCharTypeData;
    private static Int16[] s_Indexes;
    private static IntPtr[] s_PageIndexes;
    private static Byte** s_CharProperties;
    private Byte** _charProperties;
    public static XmlCharType Instance { get; }
    private XmlCharType(Byte** charProperties);
    private static XmlCharType();
    private static Byte** InitializeCharProperties();
    public static XmlCharType get_Instance();
    public bool IsWhiteSpace(char ch);
    public bool IsNCNameSingleChar(char ch);
    public bool IsStartNCNameSingleChar(char ch);
    public bool IsNameSingleChar(char ch);
    public bool IsStartNameSingleChar(char ch);
    public bool IsCharData(char ch);
    public bool IsPubidChar(char ch);
    internal bool IsTextChar(char ch);
    internal bool IsAttributeValueChar(char ch);
    public bool IsLetter(char ch);
    public bool IsNCNameCharXml4e(char ch);
    public bool IsStartNCNameCharXml4e(char ch);
    public bool IsNameCharXml4e(char ch);
    public bool IsStartNameCharXml4e(char ch);
    public static bool IsDigit(char ch);
    internal static bool IsHighSurrogate(int ch);
    internal static bool IsLowSurrogate(int ch);
    internal static bool IsSurrogate(int ch);
    internal static int CombineSurrogateChar(int lowChar, int highChar);
    internal static void SplitSurrogateChar(int combinedChar, Char& lowChar, Char& highChar);
    internal bool IsOnlyWhitespace(string str);
    internal int IsOnlyWhitespaceWithPos(string str);
    internal int IsOnlyCharData(string str);
    internal static bool IsOnlyDigits(string str, int startPos, int len);
    internal static bool IsOnlyDigits(Char[] chars, int startPos, int len);
    internal int IsPublicId(string str);
    private static bool InRange(int value, int start, int end);
}
public static class System.Xml.XmlConvert : object {
    private static XmlCharType s_xmlCharType;
    private static int s_encodedCharLength;
    private static Regex modreq(System.Runtime.CompilerServices.IsVolatile) s_encodeCharPattern;
    private static Regex modreq(System.Runtime.CompilerServices.IsVolatile) s_decodeCharPattern;
    internal static Char[] WhitespaceChars;
    private static XmlConvert();
    public static string EncodeName(string name);
    public static string EncodeNmToken(string name);
    public static string EncodeLocalName(string name);
    public static string DecodeName(string name);
    private static string EncodeName(string name, bool first, bool local);
    private static int FromHex(char digit);
    internal static Byte[] FromBinHexString(string s);
    internal static Byte[] FromBinHexString(string s, bool allowOddCount);
    internal static string ToBinHexString(Byte[] inArray);
    public static string VerifyName(string name);
    internal static string VerifyQName(string name, ExceptionType exceptionType);
    public static string VerifyNCName(string name);
    internal static string VerifyNCName(string name, ExceptionType exceptionType);
    public static string VerifyNMTOKEN(string name);
    internal static string VerifyNMTOKEN(string name, ExceptionType exceptionType);
    public static string VerifyXmlChars(string content);
    public static string VerifyPublicId(string publicId);
    public static string VerifyWhitespace(string content);
    public static string ToString(bool value);
    public static string ToString(char value);
    public static string ToString(decimal value);
    [CLSCompliantAttribute("False")]
public static string ToString(sbyte value);
    public static string ToString(short value);
    public static string ToString(int value);
    public static string ToString(long value);
    public static string ToString(byte value);
    [CLSCompliantAttribute("False")]
public static string ToString(ushort value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong value);
    public static string ToString(float value);
    public static string ToString(double value);
    public static string ToString(TimeSpan value);
    public static string ToString(DateTime value, XmlDateTimeSerializationMode dateTimeOption);
    public static string ToString(DateTimeOffset value);
    public static string ToString(DateTimeOffset value, string format);
    public static string ToString(Guid value);
    public static bool ToBoolean(string s);
    public static char ToChar(string s);
    public static decimal ToDecimal(string s);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(string s);
    public static short ToInt16(string s);
    public static int ToInt32(string s);
    public static long ToInt64(string s);
    public static byte ToByte(string s);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(string s);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(string s);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(string s);
    public static float ToSingle(string s);
    public static double ToDouble(string s);
    public static TimeSpan ToTimeSpan(string s);
    public static DateTime ToDateTime(string s, XmlDateTimeSerializationMode dateTimeOption);
    public static DateTimeOffset ToDateTimeOffset(string s);
    public static DateTimeOffset ToDateTimeOffset(string s, string format);
    public static DateTimeOffset ToDateTimeOffset(string s, String[] formats);
    public static Guid ToGuid(string s);
    private static DateTime SwitchToLocalTime(DateTime value);
    private static DateTime SwitchToUtcTime(DateTime value);
    internal static Uri ToUri(string s);
    internal static bool StrEqual(Char[] chars, int strPos1, int strLen1, string str2);
    internal static string TrimString(string value);
    internal static string TrimStringStart(string value);
    internal static string TrimStringEnd(string value);
    internal static String[] SplitString(string value);
    internal static String[] SplitString(string value, StringSplitOptions splitStringOptions);
    internal static bool IsNegativeZero(double value);
    [SecuritySafeCriticalAttribute]
private static long DoubleToInt64Bits(double value);
    internal static void VerifyCharData(string data, ExceptionType exceptionType);
    internal static void VerifyCharData(string data, ExceptionType invCharExceptionType, ExceptionType invSurrogateExceptionType);
    internal static void VerifyCharData(Char[] data, int offset, int len, ExceptionType exceptionType);
    internal static Exception CreateException(string res, ExceptionType exceptionType);
    internal static Exception CreateException(string res, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateException(string res, string arg, ExceptionType exceptionType);
    internal static Exception CreateException(string res, string arg, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateException(string res, String[] args, ExceptionType exceptionType);
    internal static Exception CreateException(string res, String[] args, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateInvalidSurrogatePairException(char low, char hi);
    internal static Exception CreateInvalidSurrogatePairException(char low, char hi, ExceptionType exceptionType);
    internal static Exception CreateInvalidSurrogatePairException(char low, char hi, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateInvalidHighSurrogateCharException(char hi);
    internal static Exception CreateInvalidHighSurrogateCharException(char hi, ExceptionType exceptionType);
    internal static Exception CreateInvalidHighSurrogateCharException(char hi, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateInvalidCharException(Char[] data, int length, int invCharPos);
    internal static Exception CreateInvalidCharException(Char[] data, int length, int invCharPos, ExceptionType exceptionType);
    internal static Exception CreateInvalidCharException(string data, int invCharPos);
    internal static Exception CreateInvalidCharException(string data, int invCharPos, ExceptionType exceptionType);
    internal static Exception CreateInvalidCharException(char invChar, char nextChar);
    internal static Exception CreateInvalidCharException(char invChar, char nextChar, ExceptionType exceptionType);
    internal static Exception CreateInvalidNameCharException(string name, int index, ExceptionType exceptionType);
    internal static ArgumentException CreateInvalidNameArgumentException(string name, string argumentName);
}
public enum System.Xml.XmlDateTimeSerializationMode : Enum {
    public int value__;
    public static XmlDateTimeSerializationMode Local;
    public static XmlDateTimeSerializationMode Utc;
    public static XmlDateTimeSerializationMode Unspecified;
    public static XmlDateTimeSerializationMode RoundtripKind;
}
internal class System.Xml.XmlEncodedRawTextWriter : XmlRawWriter {
    private bool _useAsync;
    protected Byte[] bufBytes;
    protected Stream stream;
    protected Encoding encoding;
    protected XmlCharType xmlCharType;
    protected int bufPos;
    protected int textPos;
    protected int contentPos;
    protected int cdataPos;
    protected int attrEndPos;
    protected int bufLen;
    protected bool writeToNull;
    protected bool hadDoubleBracket;
    protected bool inAttributeValue;
    protected int bufBytesUsed;
    protected Char[] bufChars;
    protected Encoder encoder;
    protected TextWriter writer;
    protected bool trackTextContent;
    protected bool inTextContent;
    private int _lastMarkPos;
    private Int32[] _textContentMarks;
    private CharEntityEncoderFallback _charEntityFallback;
    protected NewLineHandling newLineHandling;
    protected bool closeOutput;
    protected bool omitXmlDeclaration;
    protected string newLineChars;
    protected bool checkCharacters;
    protected bool mergeCDataSections;
    protected bool autoXmlDeclaration;
    private static int BUFSIZE;
    private static int ASYNCBUFSIZE;
    private static int OVERFLOW;
    private static int INIT_MARKS_COUNT;
    public XmlWriterSettings Settings { get; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    protected XmlEncodedRawTextWriter(XmlWriterSettings settings);
    public XmlEncodedRawTextWriter(TextWriter writer, XmlWriterSettings settings);
    public XmlEncodedRawTextWriter(Stream stream, XmlWriterSettings settings);
    public virtual XmlWriterSettings get_Settings();
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string namespaceName);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    protected virtual void FlushBuffer();
    private void EncodeChars(int startOffset, int endOffset, bool writeAllToStream);
    private void FlushEncoder();
    protected void WriteAttributeTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void WriteElementTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void RawText(string s);
    protected void RawText(Char* pSrcBegin, Char* pSrcEnd);
    protected void WriteRawWithCharChecking(Char* pSrcBegin, Char* pSrcEnd);
    protected void WriteCommentOrPi(string text, int stopChar);
    protected void WriteCDataSection(string text);
    private static Char* EncodeSurrogate(Char* pSrc, Char* pSrcEnd, Char* pDst);
    private Char* InvalidXmlChar(int ch, Char* pDst, bool entitize);
    internal void EncodeChar(Char*& pSrc, Char* pSrcEnd, Char*& pDst);
    protected void ChangeTextContentMark(bool value);
    private void GrowTextContentMarks();
    protected Char* WriteNewLine(Char* pDst);
    protected static Char* LtEntity(Char* pDst);
    protected static Char* GtEntity(Char* pDst);
    protected static Char* AmpEntity(Char* pDst);
    protected static Char* QuoteEntity(Char* pDst);
    protected static Char* TabEntity(Char* pDst);
    protected static Char* LineFeedEntity(Char* pDst);
    protected static Char* CarriageReturnEntity(Char* pDst);
    private static Char* CharEntity(Char* pDst, char ch);
    protected static Char* RawStartCData(Char* pDst);
    protected static Char* RawEndCData(Char* pDst);
    protected void ValidateContentChars(string chars, string propertyName, bool allowOnlyWhitespace);
    protected void CheckAsyncCall();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteXmlDeclarationAsync>d__94")]
internal virtual Task WriteXmlDeclarationAsync(XmlStandalone standalone);
    internal virtual Task WriteXmlDeclarationAsync(string xmldecl);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteDocTypeAsync>d__96")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    private void WriteStartElementAsync_SetAttEndPos();
    internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    private void WriteStartAttribute_SetInAttribute();
    protected internal virtual Task WriteEndAttributeAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteNamespaceDeclarationAsync>d__104")]
internal virtual Task WriteNamespaceDeclarationAsync(string prefix, string namespaceName);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteStartNamespaceDeclarationAsync>d__105")]
internal virtual Task WriteStartNamespaceDeclarationAsync(string prefix);
    internal virtual Task WriteEndNamespaceDeclarationAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCDataAsync>d__107")]
public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCommentAsync>d__108")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteProcessingInstructionAsync>d__109")]
public virtual Task WriteProcessingInstructionAsync(string name, string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteEntityRefAsync>d__110")]
public virtual Task WriteEntityRefAsync(string name);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCharEntityAsync>d__111")]
public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteSurrogateCharEntityAsync>d__114")]
public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteRawAsync>d__116")]
public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteRawAsync>d__117")]
public virtual Task WriteRawAsync(string data);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<FlushAsync>d__118")]
public virtual Task FlushAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<FlushBufferAsync>d__119")]
protected virtual Task FlushBufferAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<EncodeCharsAsync>d__120")]
private Task EncodeCharsAsync(int startOffset, int endOffset, bool writeAllToStream);
    private Task FlushEncoderAsync();
    [SecuritySafeCriticalAttribute]
protected int WriteAttributeTextBlockNoFlush(Char* pSrc, Char* pSrcEnd);
    [SecuritySafeCriticalAttribute]
protected int WriteAttributeTextBlockNoFlush(Char[] chars, int index, int count);
    [SecuritySafeCriticalAttribute]
protected int WriteAttributeTextBlockNoFlush(string text, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteAttributeTextBlockAsync>d__125")]
protected Task WriteAttributeTextBlockAsync(Char[] chars, int index, int count);
    protected Task WriteAttributeTextBlockAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<_WriteAttributeTextBlockAsync>d__127")]
private Task _WriteAttributeTextBlockAsync(string text, int curIndex, int leftCount);
    [SecuritySafeCriticalAttribute]
protected int WriteElementTextBlockNoFlush(Char* pSrc, Char* pSrcEnd, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteElementTextBlockNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteElementTextBlockNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteElementTextBlockAsync>d__131")]
protected Task WriteElementTextBlockAsync(Char[] chars, int index, int count);
    protected Task WriteElementTextBlockAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<_WriteElementTextBlockAsync>d__133")]
private Task _WriteElementTextBlockAsync(bool newLine, string text, int curIndex, int leftCount);
    [SecuritySafeCriticalAttribute]
protected int RawTextNoFlush(Char* pSrcBegin, Char* pSrcEnd);
    [SecuritySafeCriticalAttribute]
protected int RawTextNoFlush(string text, int index, int count);
    protected Task RawTextAsync(string text);
    protected Task RawTextAsync(string text1, string text2, string text3, string text4);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<_RawTextAsync>d__138")]
private Task _RawTextAsync(string text1, int curIndex1, int leftCount1, string text2, string text3, string text4);
    [SecuritySafeCriticalAttribute]
protected int WriteRawWithCharCheckingNoFlush(Char* pSrcBegin, Char* pSrcEnd, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteRawWithCharCheckingNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteRawWithCharCheckingNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteRawWithCharCheckingAsync>d__142")]
protected Task WriteRawWithCharCheckingAsync(Char[] chars, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteRawWithCharCheckingAsync>d__143")]
protected Task WriteRawWithCharCheckingAsync(string text);
    [SecuritySafeCriticalAttribute]
protected int WriteCommentOrPiNoFlush(string text, int index, int count, int stopChar, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCommentOrPiAsync>d__145")]
protected Task WriteCommentOrPiAsync(string text, int stopChar);
    [SecuritySafeCriticalAttribute]
protected int WriteCDataSectionNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCDataSectionAsync>d__147")]
protected Task WriteCDataSectionAsync(string text);
}
internal class System.Xml.XmlEncodedRawTextWriterIndent : XmlEncodedRawTextWriter {
    protected int indentLevel;
    protected bool newLineOnAttributes;
    protected string indentChars;
    protected bool mixedContent;
    private BitStack _mixedContentStack;
    protected ConformanceLevel conformanceLevel;
    public XmlWriterSettings Settings { get; }
    public XmlEncodedRawTextWriterIndent(TextWriter writer, XmlWriterSettings settings);
    public XmlEncodedRawTextWriterIndent(Stream stream, XmlWriterSettings settings);
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void OnRootElement(ConformanceLevel currentConformanceLevel);
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string target, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    private void Init(XmlWriterSettings settings);
    private void WriteIndent();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteDocTypeAsync>d__31")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteStartElementAsync>d__32")]
public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteEndElementAsync>d__33")]
internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteFullEndElementAsync>d__34")]
internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteStartAttributeAsync>d__35")]
protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteCommentAsync>d__37")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteProcessingInstructionAsync>d__38")]
public virtual Task WriteProcessingInstructionAsync(string target, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteIndentAsync>d__48")]
private Task WriteIndentAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(string name, string pubid, string sysid, string subset);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__3(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__4(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__5(string text);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__6(string name, string text);
}
public class System.Xml.XmlException : Exception {
    private string _res;
    private String[] _args;
    private int _lineNumber;
    private int _linePosition;
    private string _sourceUri;
    private static int HResults_Xml;
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal string ResString { get; }
    public XmlException(string message);
    public XmlException(string message, Exception innerException);
    public XmlException(string message, Exception innerException, int lineNumber, int linePosition);
    internal XmlException(string message, Exception innerException, int lineNumber, int linePosition, string sourceUri);
    internal XmlException(string res, String[] args);
    internal XmlException(string res, String[] args, string sourceUri);
    internal XmlException(string res, string arg);
    internal XmlException(string res, string arg, string sourceUri);
    internal XmlException(string res, string arg, IXmlLineInfo lineInfo);
    internal XmlException(string res, string arg, Exception innerException, IXmlLineInfo lineInfo);
    internal XmlException(string res, string arg, IXmlLineInfo lineInfo, string sourceUri);
    internal XmlException(string res, String[] args, IXmlLineInfo lineInfo);
    internal XmlException(string res, String[] args, IXmlLineInfo lineInfo, string sourceUri);
    internal XmlException(string res, int lineNumber, int linePosition);
    internal XmlException(string res, string arg, int lineNumber, int linePosition);
    internal XmlException(string res, string arg, int lineNumber, int linePosition, string sourceUri);
    internal XmlException(string res, String[] args, int lineNumber, int linePosition);
    internal XmlException(string res, String[] args, int lineNumber, int linePosition, string sourceUri);
    internal XmlException(string res, String[] args, Exception innerException, int lineNumber, int linePosition);
    internal XmlException(string res, String[] args, Exception innerException, int lineNumber, int linePosition, string sourceUri);
    private static string FormatUserMessage(string message, int lineNumber, int linePosition);
    private static string CreateMessage(string res, String[] args, int lineNumber, int linePosition);
    internal static String[] BuildCharExceptionArgs(string data, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(Char[] data, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(Char[] data, int length, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(char invChar, char nextChar);
    public int get_LineNumber();
    public int get_LinePosition();
    internal string get_ResString();
}
public class System.Xml.XmlNamespaceManager : object {
    private NamespaceDeclaration[] _nsdecls;
    private int _lastDecl;
    private XmlNameTable _nameTable;
    private int _scopeId;
    private Dictionary`2<string, int> _hashTable;
    private bool _useHashtable;
    private string _xml;
    private string _xmlNs;
    private static int MinDeclsCountForHashtable;
    public XmlNameTable NameTable { get; }
    public string DefaultNamespace { get; }
    public XmlNamespaceManager(XmlNameTable nameTable);
    public virtual XmlNameTable get_NameTable();
    public virtual string get_DefaultNamespace();
    public virtual void PushScope();
    public virtual bool PopScope();
    public virtual void AddNamespace(string prefix, string uri);
    public virtual void RemoveNamespace(string prefix, string uri);
    public virtual IEnumerator GetEnumerator();
    public virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public virtual string LookupNamespace(string prefix);
    private int LookupNamespaceDecl(string prefix);
    public virtual string LookupPrefix(string uri);
    public virtual bool HasNamespace(string prefix);
}
public enum System.Xml.XmlNamespaceScope : Enum {
    public int value__;
    public static XmlNamespaceScope All;
    public static XmlNamespaceScope ExcludeXml;
    public static XmlNamespaceScope Local;
}
public abstract class System.Xml.XmlNameTable : object {
    public abstract virtual string Get(Char[] array, int offset, int length);
    public abstract virtual string Get(string array);
    public abstract virtual string Add(Char[] array, int offset, int length);
    public abstract virtual string Add(string array);
}
public enum System.Xml.XmlNodeType : Enum {
    public int value__;
    public static XmlNodeType None;
    public static XmlNodeType Element;
    public static XmlNodeType Attribute;
    public static XmlNodeType Text;
    public static XmlNodeType CDATA;
    public static XmlNodeType EntityReference;
    public static XmlNodeType Entity;
    public static XmlNodeType ProcessingInstruction;
    public static XmlNodeType Comment;
    public static XmlNodeType Document;
    public static XmlNodeType DocumentType;
    public static XmlNodeType DocumentFragment;
    public static XmlNodeType Notation;
    public static XmlNodeType Whitespace;
    public static XmlNodeType SignificantWhitespace;
    public static XmlNodeType EndElement;
    public static XmlNodeType EndEntity;
    public static XmlNodeType XmlDeclaration;
}
public class System.Xml.XmlParserContext : object {
    private XmlNameTable _nt;
    private XmlNamespaceManager _nsMgr;
    private string _docTypeName;
    private string _pubId;
    private string _sysId;
    private string _internalSubset;
    private string _xmlLang;
    private XmlSpace _xmlSpace;
    private string _baseURI;
    private Encoding _encoding;
    public XmlNameTable NameTable { get; public set; }
    public XmlNamespaceManager NamespaceManager { get; public set; }
    public string DocTypeName { get; public set; }
    public string PublicId { get; public set; }
    public string SystemId { get; public set; }
    public string BaseURI { get; public set; }
    public string InternalSubset { get; public set; }
    public string XmlLang { get; public set; }
    public XmlSpace XmlSpace { get; public set; }
    public Encoding Encoding { get; public set; }
    internal bool HasDtdInfo { get; }
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace, Encoding enc);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace, Encoding enc);
    public XmlNameTable get_NameTable();
    public void set_NameTable(XmlNameTable value);
    public XmlNamespaceManager get_NamespaceManager();
    public void set_NamespaceManager(XmlNamespaceManager value);
    public string get_DocTypeName();
    public void set_DocTypeName(string value);
    public string get_PublicId();
    public void set_PublicId(string value);
    public string get_SystemId();
    public void set_SystemId(string value);
    public string get_BaseURI();
    public void set_BaseURI(string value);
    public string get_InternalSubset();
    public void set_InternalSubset(string value);
    public string get_XmlLang();
    public void set_XmlLang(string value);
    public XmlSpace get_XmlSpace();
    public void set_XmlSpace(XmlSpace value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    internal bool get_HasDtdInfo();
}
public class System.Xml.XmlQualifiedName : object {
    private string _name;
    private string _ns;
    private int _hash;
    public static XmlQualifiedName Empty;
    public string Namespace { get; }
    public string Name { get; }
    public bool IsEmpty { get; }
    public XmlQualifiedName(string name);
    public XmlQualifiedName(string name, string ns);
    private static XmlQualifiedName();
    public string get_Namespace();
    public string get_Name();
    public virtual int GetHashCode();
    public bool get_IsEmpty();
    public virtual string ToString();
    public virtual bool Equals(object other);
    public static bool op_Equality(XmlQualifiedName a, XmlQualifiedName b);
    public static bool op_Inequality(XmlQualifiedName a, XmlQualifiedName b);
    public static string ToString(string name, string ns);
}
internal abstract class System.Xml.XmlRawWriter : XmlWriter {
    protected XmlRawWriterBase64Encoder base64Encoder;
    protected IXmlNamespaceResolver resolver;
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    internal IXmlNamespaceResolver NamespaceResolver { get; internal set; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual string LookupPrefix(string ns);
    public virtual WriteState get_WriteState();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteAttributes(XmlReader reader, bool defattr);
    public virtual void WriteNode(XmlReader reader, bool defattr);
    internal virtual IXmlNamespaceResolver get_NamespaceResolver();
    internal virtual void set_NamespaceResolver(IXmlNamespaceResolver value);
    internal abstract virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal abstract virtual void WriteXmlDeclaration(string xmldecl);
    internal abstract virtual void StartElementContent();
    internal virtual void OnRootElement(ConformanceLevel conformanceLevel);
    internal abstract virtual void WriteEndElement(string prefix, string localName, string ns);
    internal abstract virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void WriteQualifiedName(string prefix, string localName, string ns);
    internal abstract virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    internal virtual void WriteEndBase64();
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    public virtual Task WriteEndDocumentAsync();
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteEndElementAsync();
    public virtual Task WriteFullEndElementAsync();
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    public virtual Task WriteNmTokenAsync(string name);
    public virtual Task WriteNameAsync(string name);
    public virtual Task WriteQualifiedNameAsync(string localName, string ns);
    public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteAttributesAsync(XmlReader reader, bool defattr);
    public virtual Task WriteNodeAsync(XmlReader reader, bool defattr);
    internal virtual Task WriteXmlDeclarationAsync(XmlStandalone standalone);
    internal virtual Task WriteXmlDeclarationAsync(string xmldecl);
    internal virtual Task StartElementContentAsync();
    internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlRawWriter/<WriteQualifiedNameAsync>d__63")]
internal virtual Task WriteQualifiedNameAsync(string prefix, string localName, string ns);
    internal virtual Task WriteNamespaceDeclarationAsync(string prefix, string ns);
    internal virtual Task WriteStartNamespaceDeclarationAsync(string prefix);
    internal virtual Task WriteEndNamespaceDeclarationAsync();
    internal virtual Task WriteEndBase64Async();
}
internal class System.Xml.XmlRawWriterBase64Encoder : Base64Encoder {
    private XmlRawWriter _rawWriter;
    internal XmlRawWriterBase64Encoder(XmlRawWriter rawWriter);
    internal virtual void WriteChars(Char[] chars, int index, int count);
    internal virtual Task WriteCharsAsync(Char[] chars, int index, int count);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Xml.XmlReader : object {
    private static UInt32 s_isTextualNodeBitmap;
    private static UInt32 s_canReadContentAsBitmap;
    private static UInt32 s_hasValueBitmap;
    internal static int DefaultBufferSize;
    internal static int BiggerBufferSize;
    internal static int MaxStreamLengthForDefaultBufferSize;
    internal static int AsyncBufferSize;
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool HasAttributes { get; }
    internal bool IsDefaultInternal { get; }
    private static XmlReader();
    public virtual XmlReaderSettings get_Settings();
    public abstract virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public abstract virtual string get_LocalName();
    public abstract virtual string get_NamespaceURI();
    public abstract virtual string get_Prefix();
    public virtual bool get_HasValue();
    public abstract virtual string get_Value();
    public abstract virtual int get_Depth();
    public abstract virtual string get_BaseURI();
    public abstract virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual Type get_ValueType();
    public virtual object ReadContentAsObject();
    public virtual bool ReadContentAsBoolean();
    public virtual DateTimeOffset ReadContentAsDateTimeOffset();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual decimal ReadContentAsDecimal();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual string ReadContentAsString();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAsObject();
    public virtual object ReadElementContentAsObject(string localName, string namespaceURI);
    public virtual bool ReadElementContentAsBoolean();
    public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI);
    public virtual double ReadElementContentAsDouble();
    public virtual double ReadElementContentAsDouble(string localName, string namespaceURI);
    public virtual float ReadElementContentAsFloat();
    public virtual float ReadElementContentAsFloat(string localName, string namespaceURI);
    public virtual decimal ReadElementContentAsDecimal();
    public virtual decimal ReadElementContentAsDecimal(string localName, string namespaceURI);
    public virtual int ReadElementContentAsInt();
    public virtual int ReadElementContentAsInt(string localName, string namespaceURI);
    public virtual long ReadElementContentAsLong();
    public virtual long ReadElementContentAsLong(string localName, string namespaceURI);
    public virtual string ReadElementContentAsString();
    public virtual string ReadElementContentAsString(string localName, string namespaceURI);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);
    public abstract virtual int get_AttributeCount();
    public abstract virtual string GetAttribute(string name);
    public abstract virtual string GetAttribute(string name, string namespaceURI);
    public abstract virtual string GetAttribute(int i);
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceURI);
    public abstract virtual bool MoveToAttribute(string name);
    public abstract virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public abstract virtual bool MoveToFirstAttribute();
    public abstract virtual bool MoveToNextAttribute();
    public abstract virtual bool MoveToElement();
    public abstract virtual bool ReadAttributeValue();
    public abstract virtual bool Read();
    public abstract virtual bool get_EOF();
    public abstract virtual ReadState get_ReadState();
    public virtual void Skip();
    public abstract virtual XmlNameTable get_NameTable();
    public abstract virtual string LookupNamespace(string prefix);
    public virtual bool get_CanResolveEntity();
    public abstract virtual void ResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public virtual XmlNodeType MoveToContent();
    public virtual void ReadStartElement();
    public virtual void ReadStartElement(string name);
    public virtual void ReadStartElement(string localname, string ns);
    public virtual void ReadEndElement();
    public virtual bool IsStartElement();
    public virtual bool IsStartElement(string name);
    public virtual bool IsStartElement(string localname, string ns);
    public virtual bool ReadToFollowing(string name);
    public virtual bool ReadToFollowing(string localName, string namespaceURI);
    public virtual bool ReadToDescendant(string name);
    public virtual bool ReadToDescendant(string localName, string namespaceURI);
    public virtual bool ReadToNextSibling(string name);
    public virtual bool ReadToNextSibling(string localName, string namespaceURI);
    public static bool IsName(string str);
    public static bool IsNameToken(string str);
    public virtual string ReadInnerXml();
    private void WriteNode(XmlWriter xtw, bool defattr);
    private void WriteAttributeValue(XmlWriter xtw);
    public virtual string ReadOuterXml();
    private XmlWriter CreateWriterForInnerOuterXml(StringWriter sw);
    public virtual XmlReader ReadSubtree();
    public virtual bool get_HasAttributes();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal static bool IsTextualNode(XmlNodeType nodeType);
    internal static bool CanReadContentAs(XmlNodeType nodeType);
    internal static bool HasValueInternal(XmlNodeType nodeType);
    private bool SkipSubtree();
    internal void CheckElement(string localName, string namespaceURI);
    internal Exception CreateReadContentAsException(string methodName);
    internal Exception CreateReadElementContentAsException(string methodName);
    internal bool CanReadContentAs();
    internal static Exception CreateReadContentAsException(string methodName, XmlNodeType nodeType, IXmlLineInfo lineInfo);
    internal static Exception CreateReadElementContentAsException(string methodName, XmlNodeType nodeType, IXmlLineInfo lineInfo);
    private static string AddLineInfo(string message, IXmlLineInfo lineInfo);
    internal string InternalReadContentAsString();
    private bool SetupReadElementContentAsXxx(string methodName);
    private void FinishReadElementContentAsXxx();
    internal bool get_IsDefaultInternal();
    internal static ConformanceLevel GetV1ConformanceLevel(XmlReader reader);
    private static XmlTextReaderImpl GetXmlTextReaderImpl(XmlReader reader);
    public static XmlReader Create(string inputUri);
    public static XmlReader Create(string inputUri, XmlReaderSettings settings);
    private static XmlReader Create(string inputUri, XmlReaderSettings settings, XmlParserContext inputContext);
    public static XmlReader Create(Stream input);
    public static XmlReader Create(Stream input, XmlReaderSettings settings);
    private static XmlReader Create(Stream input, XmlReaderSettings settings, string baseUri);
    public static XmlReader Create(Stream input, XmlReaderSettings settings, XmlParserContext inputContext);
    public static XmlReader Create(TextReader input);
    public static XmlReader Create(TextReader input, XmlReaderSettings settings);
    private static XmlReader Create(TextReader input, XmlReaderSettings settings, string baseUri);
    public static XmlReader Create(TextReader input, XmlReaderSettings settings, XmlParserContext inputContext);
    public static XmlReader Create(XmlReader reader, XmlReaderSettings settings);
    internal static int CalcBufferSize(Stream input);
    public virtual Task`1<string> GetValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadContentAsObjectAsync>d__162")]
public virtual Task`1<object> ReadContentAsObjectAsync();
    public virtual Task`1<string> ReadContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadContentAsAsync>d__164")]
public virtual Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadElementContentAsObjectAsync>d__165")]
public virtual Task`1<object> ReadElementContentAsObjectAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadElementContentAsStringAsync>d__166")]
public virtual Task`1<string> ReadElementContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadElementContentAsAsync>d__167")]
public virtual Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual Task`1<bool> ReadAsync();
    public virtual Task SkipAsync();
    public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<MoveToContentAsync>d__175")]
public virtual Task`1<XmlNodeType> MoveToContentAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadInnerXmlAsync>d__176")]
public virtual Task`1<string> ReadInnerXmlAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<WriteNodeAsync>d__177")]
private Task WriteNodeAsync(XmlWriter xtw, bool defattr);
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadOuterXmlAsync>d__178")]
public virtual Task`1<string> ReadOuterXmlAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<SkipSubtreeAsync>d__179")]
private Task`1<bool> SkipSubtreeAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<InternalReadContentAsStringAsync>d__180")]
internal Task`1<string> InternalReadContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<SetupReadElementContentAsXxxAsync>d__181")]
private Task`1<bool> SetupReadElementContentAsXxxAsync(string methodName);
    private Task FinishReadElementContentAsXxxAsync();
}
public class System.Xml.XmlReaderSettings : object {
    private bool _useAsync;
    private XmlNameTable _nameTable;
    private XmlResolver _xmlResolver;
    private int _lineNumberOffset;
    private int _linePositionOffset;
    private ConformanceLevel _conformanceLevel;
    private bool _checkCharacters;
    private long _maxCharactersInDocument;
    private long _maxCharactersFromEntities;
    private bool _ignoreWhitespace;
    private bool _ignorePIs;
    private bool _ignoreComments;
    private DtdProcessing _dtdProcessing;
    private bool _closeInput;
    private bool _isReadOnly;
    public bool Async { get; public set; }
    public XmlNameTable NameTable { get; public set; }
    public int LineNumberOffset { get; public set; }
    public int LinePositionOffset { get; public set; }
    public ConformanceLevel ConformanceLevel { get; public set; }
    public bool CheckCharacters { get; public set; }
    public long MaxCharactersInDocument { get; public set; }
    public long MaxCharactersFromEntities { get; public set; }
    public bool IgnoreWhitespace { get; public set; }
    public bool IgnoreProcessingInstructions { get; public set; }
    public bool IgnoreComments { get; public set; }
    public DtdProcessing DtdProcessing { get; public set; }
    public bool CloseInput { get; public set; }
    internal bool ReadOnly { get; internal set; }
    public bool get_Async();
    public void set_Async(bool value);
    public XmlNameTable get_NameTable();
    public void set_NameTable(XmlNameTable value);
    internal XmlResolver GetXmlResolver();
    public int get_LineNumberOffset();
    public void set_LineNumberOffset(int value);
    public int get_LinePositionOffset();
    public void set_LinePositionOffset(int value);
    public ConformanceLevel get_ConformanceLevel();
    public void set_ConformanceLevel(ConformanceLevel value);
    public bool get_CheckCharacters();
    public void set_CheckCharacters(bool value);
    public long get_MaxCharactersInDocument();
    public void set_MaxCharactersInDocument(long value);
    public long get_MaxCharactersFromEntities();
    public void set_MaxCharactersFromEntities(long value);
    public bool get_IgnoreWhitespace();
    public void set_IgnoreWhitespace(bool value);
    public bool get_IgnoreProcessingInstructions();
    public void set_IgnoreProcessingInstructions(bool value);
    public bool get_IgnoreComments();
    public void set_IgnoreComments(bool value);
    public DtdProcessing get_DtdProcessing();
    public void set_DtdProcessing(DtdProcessing value);
    public bool get_CloseInput();
    public void set_CloseInput(bool value);
    public void Reset();
    public XmlReaderSettings Clone();
    internal XmlReader CreateReader(string inputUri, XmlParserContext inputContext);
    internal XmlReader CreateReader(Stream input, Uri baseUri, string baseUriString, XmlParserContext inputContext);
    internal XmlReader CreateReader(TextReader input, string baseUriString, XmlParserContext inputContext);
    internal XmlReader CreateReader(XmlReader reader);
    internal bool get_ReadOnly();
    internal void set_ReadOnly(bool value);
    private void CheckReadOnly(string propertyName);
    private void Initialize();
    private static XmlResolver CreateDefaultResolver();
    internal XmlReader AddConformanceWrapper(XmlReader baseReader);
}
internal static class System.Xml.XmlReservedNs : object {
    internal static string NsXml;
    internal static string NsXmlNs;
}
internal abstract class System.Xml.XmlResolver : object {
    public abstract virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
    public virtual bool SupportsType(Uri absoluteUri, Type type);
}
public enum System.Xml.XmlSpace : Enum {
    public int value__;
    public static XmlSpace None;
    public static XmlSpace Default;
    public static XmlSpace Preserve;
}
internal enum System.Xml.XmlStandalone : Enum {
    public int value__;
    public static XmlStandalone Omit;
    public static XmlStandalone Yes;
    public static XmlStandalone No;
}
internal class System.Xml.XmlSubtreeReader : XmlWrappingReader {
    private static int AttributeActiveStates;
    private static int NamespaceActiveStates;
    private int _initialDepth;
    private State _state;
    private XmlNamespaceManager _nsManager;
    private NodeData[] _nsAttributes;
    private int _nsAttrCount;
    private int _curNsAttr;
    private string _xmlns;
    private string _xmlnsUri;
    private int _nsIncReadOffset;
    private IncrementalReadDecoder _binDecoder;
    private bool _useCurNode;
    private NodeData _curNode;
    private NodeData _tmpNode;
    internal int InitialNamespaceAttributeCount;
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public int AttributeCount { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    private int System.Xml.IXmlLineInfo.LineNumber { get; }
    private int System.Xml.IXmlLineInfo.LinePosition { get; }
    private bool InAttributeActiveState { get; }
    private bool InNamespaceActiveState { get; }
    internal XmlSubtreeReader(XmlReader reader);
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual XmlNameTable get_NameTable();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    protected virtual void Dispose(bool disposing);
    public virtual void Skip();
    public virtual object ReadContentAsObject();
    public virtual bool ReadContentAsBoolean();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual decimal ReadContentAsDecimal();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual string ReadContentAsString();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public virtual string LookupNamespace(string prefix);
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LinePosition();
    private sealed virtual override bool System.Xml.IXmlLineInfo.HasLineInfo();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    private void ProcessNamespaces();
    private void AddNamespace(string prefix, string ns);
    private void RemoveNamespace(string prefix, string localName);
    private void MoveToNsAttribute(int index);
    private bool InitReadElementContentAsBinary(State binaryState);
    private bool FinishReadElementContentAsBinary();
    private bool FinishReadContentAsBinary();
    private bool get_InAttributeActiveState();
    private bool get_InNamespaceActiveState();
    private void SetEmptyNode();
    private void SetCurrentNode(NodeData node);
    private void InitReadContentAsType(string methodName);
    private void FinishReadContentAsType();
    private void CheckBuffer(Array buffer, int index, int count);
    public virtual Task`1<string> GetValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadAsync>d__102")]
public virtual Task`1<bool> ReadAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<SkipAsync>d__103")]
public virtual Task SkipAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsObjectAsync>d__104")]
public virtual Task`1<object> ReadContentAsObjectAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsStringAsync>d__105")]
public virtual Task`1<string> ReadContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsAsync>d__106")]
public virtual Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsBase64Async>d__107")]
public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadElementContentAsBase64Async>d__108")]
public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsBinHexAsync>d__109")]
public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadElementContentAsBinHexAsync>d__110")]
public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<InitReadElementContentAsBinaryAsync>d__112")]
private Task`1<bool> InitReadElementContentAsBinaryAsync(State binaryState);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<FinishReadElementContentAsBinaryAsync>d__113")]
private Task`1<bool> FinishReadElementContentAsBinaryAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<FinishReadContentAsBinaryAsync>d__114")]
private Task`1<bool> FinishReadContentAsBinaryAsync();
}
internal class System.Xml.XmlSystemPathResolver : XmlResolver {
    public virtual object GetEntity(Uri uri, string role, Type typeOfObjectToReturn);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
}
internal class System.Xml.XmlTextEncoder : object {
    private TextWriter _textWriter;
    private bool _inAttribute;
    private char _quoteChar;
    private StringBuilder _attrValue;
    private bool _cacheAttrValue;
    private XmlCharType _xmlCharType;
    unknown char QuoteChar {internal set; }
    internal string AttributeValue { get; }
    internal XmlTextEncoder(TextWriter textWriter);
    internal void set_QuoteChar(char value);
    internal void StartAttribute(bool cacheAttrValue);
    internal void EndAttribute();
    internal string get_AttributeValue();
    internal void WriteSurrogateChar(char lowChar, char highChar);
    [SecurityCriticalAttribute]
internal void Write(Char[] array, int offset, int count);
    internal void WriteSurrogateCharEntity(char lowChar, char highChar);
    [SecurityCriticalAttribute]
internal void Write(string text);
    [SecurityCriticalAttribute]
internal void WriteRawWithSurrogateChecking(string text);
    internal void WriteRaw(string value);
    internal void WriteRaw(Char[] array, int offset, int count);
    internal void WriteCharEntity(char ch);
    internal void WriteEntityRef(string name);
    internal void Flush();
    private void WriteStringFragment(string str, int offset, int count, Char[] helperBuffer);
    private void WriteCharEntityImpl(char ch);
    private void WriteCharEntityImpl(string strVal);
    private void WriteEntityRefImpl(string name);
}
internal class System.Xml.XmlTextReaderImpl : XmlReader {
    private static UTF8Encoding s_utf8BomThrowing;
    private bool _useAsync;
    private LaterInitParam _laterInitParam;
    private XmlCharType _xmlCharType;
    private ParsingState _ps;
    private ParsingFunction _parsingFunction;
    private ParsingFunction _nextParsingFunction;
    private ParsingFunction _nextNextParsingFunction;
    private NodeData[] _nodes;
    private NodeData _curNode;
    private int _index;
    private int _curAttrIndex;
    private int _attrCount;
    private int _attrHashtable;
    private int _attrDuplWalkCount;
    private bool _attrNeedNamespaceLookup;
    private bool _fullAttrCleanup;
    private NodeData[] _attrDuplSortingArray;
    private XmlNameTable _nameTable;
    private bool _nameTableFromSettings;
    private XmlResolver _xmlResolver;
    private bool _normalize;
    private bool _supportNamespaces;
    private WhitespaceHandling _whitespaceHandling;
    private DtdProcessing _dtdProcessing;
    private bool _ignorePIs;
    private bool _ignoreComments;
    private bool _checkCharacters;
    private int _lineNumberOffset;
    private int _linePositionOffset;
    private bool _closeInput;
    private long _maxCharactersInDocument;
    private long _maxCharactersFromEntities;
    private bool _v1Compat;
    private XmlNamespaceManager _namespaceManager;
    private string _lastPrefix;
    private XmlContext _xmlContext;
    private ParsingState[] _parsingStatesStack;
    private int _parsingStatesStackTop;
    private string _reportedBaseUri;
    private Encoding _reportedEncoding;
    private IDtdInfo _dtdInfo;
    private XmlNodeType _fragmentType;
    private XmlParserContext _fragmentParserContext;
    private IncrementalReadDecoder _incReadDecoder;
    private IncrementalReadState _incReadState;
    private LineInfo _incReadLineInfo;
    private BinHexDecoder _binHexDecoder;
    private Base64Decoder _base64Decoder;
    private bool _addDefaultAttributesAndNormalize;
    private BufferBuilder _stringBuilder;
    private bool _rootElementParsed;
    private bool _standalone;
    private int _nextEntityId;
    private ParsingMode _parsingMode;
    private ReadState _readState;
    private int _documentStartBytePos;
    private int _readValueOffset;
    private long _charactersInDocument;
    private long _charactersFromEntities;
    private Dictionary`2<IDtdEntityInfo, IDtdEntityInfo> _currentEntities;
    private XmlReader _outerReader;
    private string _xml;
    private string _xmlNs;
    private static int MaxBytesToMove;
    private static int ApproxXmlDeclLength;
    private static int NodesInitialSize;
    private static int InitialAttributesCount;
    private static int InitialParsingStateStackSize;
    private static int InitialParsingStatesDepth;
    private static int DtdChidrenInitialSize;
    private static int MaxByteSequenceLen;
    private static int MaxAttrDuplWalkCount;
    private static int MinWhitespaceLookahedCount;
    private static string XmlDeclarationBeginning;
    private ParseEndElementParseFunction _parseEndElement_NextFunc;
    private ParseTextFunction _parseText_NextFunction;
    private ParseTextState _lastParseTextState;
    private Task`1<ValueTuple`4<int, int, int, bool>> _parseText_dummyTask;
    private static UTF8Encoding UTF8BomThrowing { get; }
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public ReadState ReadState { get; }
    public bool EOF { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public int AttributeCount { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal XmlNameTable DtdParserProxy_NameTable { get; }
    internal IXmlNamespaceResolver DtdParserProxy_NamespaceResolver { get; }
    internal bool DtdParserProxy_DtdValidation { get; }
    internal bool DtdParserProxy_Normalization { get; }
    internal bool DtdParserProxy_Namespaces { get; }
    internal bool DtdParserProxy_V1CompatibilityMode { get; }
    internal Uri DtdParserProxy_BaseUri { get; }
    internal bool DtdParserProxy_IsEof { get; }
    internal Char[] DtdParserProxy_ParsingBuffer { get; }
    internal int DtdParserProxy_ParsingBufferLength { get; }
    internal int DtdParserProxy_CurrentPosition { get; internal set; }
    internal int DtdParserProxy_EntityStackLength { get; }
    internal bool DtdParserProxy_IsEntityEolNormalized { get; }
    internal int DtdParserProxy_LineNo { get; }
    internal int DtdParserProxy_LineStartPosition { get; }
    private bool IsResolverNull { get; }
    private bool InAttributeValueIterator { get; }
    private bool InEntity { get; }
    internal ConformanceLevel V1ComformanceLevel { get; }
    private XmlTextReaderImpl(XmlResolver resolver, XmlReaderSettings settings, XmlParserContext context);
    internal XmlTextReaderImpl(string uriStr, XmlReaderSettings settings, XmlParserContext context, XmlResolver uriResolver);
    internal XmlTextReaderImpl(Stream stream, Byte[] bytes, int byteCount, XmlReaderSettings settings, Uri baseUri, string baseUriStr, XmlParserContext context, bool closeInput);
    internal XmlTextReaderImpl(TextReader input, XmlReaderSettings settings, string baseUriStr, XmlParserContext context);
    private static UTF8Encoding get_UTF8BomThrowing();
    private void FinishInitUriString();
    private void FinishInitStream();
    private void FinishInitTextReader();
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual ReadState get_ReadState();
    public virtual bool get_EOF();
    public virtual XmlNameTable get_NameTable();
    public virtual bool get_CanResolveEntity();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    private void FinishInit();
    public virtual bool Read();
    protected virtual void Dispose(bool disposing);
    public virtual void Skip();
    public virtual string LookupNamespace(string prefix);
    public virtual bool ReadAttributeValue();
    public virtual void ResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    internal IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    internal string LookupPrefix(string namespaceName);
    internal XmlNameTable get_DtdParserProxy_NameTable();
    internal IXmlNamespaceResolver get_DtdParserProxy_NamespaceResolver();
    internal bool get_DtdParserProxy_DtdValidation();
    internal bool get_DtdParserProxy_Normalization();
    internal bool get_DtdParserProxy_Namespaces();
    internal bool get_DtdParserProxy_V1CompatibilityMode();
    internal Uri get_DtdParserProxy_BaseUri();
    internal bool get_DtdParserProxy_IsEof();
    internal Char[] get_DtdParserProxy_ParsingBuffer();
    internal int get_DtdParserProxy_ParsingBufferLength();
    internal int get_DtdParserProxy_CurrentPosition();
    internal void set_DtdParserProxy_CurrentPosition(int value);
    internal int get_DtdParserProxy_EntityStackLength();
    internal bool get_DtdParserProxy_IsEntityEolNormalized();
    internal void DtdParserProxy_OnNewLine(int pos);
    internal int get_DtdParserProxy_LineNo();
    internal int get_DtdParserProxy_LineStartPosition();
    internal int DtdParserProxy_ReadData();
    internal int DtdParserProxy_ParseNumericCharRef(BufferBuilder internalSubsetBuilder);
    internal int DtdParserProxy_ParseNamedCharRef(bool expand, BufferBuilder internalSubsetBuilder);
    internal void DtdParserProxy_ParsePI(BufferBuilder sb);
    internal void DtdParserProxy_ParseComment(BufferBuilder sb);
    private bool get_IsResolverNull();
    internal bool DtdParserProxy_PushEntity(IDtdEntityInfo entity, Int32& entityId);
    internal bool DtdParserProxy_PopEntity(IDtdEntityInfo& oldEntity, Int32& newEntityId);
    internal bool DtdParserProxy_PushExternalSubset(string systemId, string publicId);
    internal void DtdParserProxy_PushInternalDtd(string baseUri, string internalDtd);
    internal void DtdParserProxy_Throw(Exception e);
    internal void DtdParserProxy_OnSystemId(string systemId, LineInfo keywordLineInfo, LineInfo systemLiteralLineInfo);
    internal void DtdParserProxy_OnPublicId(string publicId, LineInfo keywordLineInfo, LineInfo publicLiteralLineInfo);
    private void Throw(int pos, string res, string arg);
    private void Throw(int pos, string res, String[] args);
    private void Throw(int pos, string res);
    private void Throw(string res);
    private void Throw(string res, int lineNo, int linePos);
    private void Throw(string res, string arg);
    private void Throw(string res, string arg, int lineNo, int linePos);
    private void Throw(string res, String[] args);
    private void Throw(string res, string arg, Exception innerException);
    private void Throw(string res, String[] args, Exception innerException);
    private void Throw(Exception e);
    private void ReThrow(Exception e, int lineNo, int linePos);
    private void ThrowWithoutLineInfo(string res);
    private void ThrowWithoutLineInfo(string res, string arg);
    private void ThrowWithoutLineInfo(string res, String[] args, Exception innerException);
    private void ThrowInvalidChar(Char[] data, int length, int invCharPos);
    private void SetErrorState();
    private bool get_InAttributeValueIterator();
    private void FinishAttributeValueIterator();
    private void InitStreamInput(Uri baseUri, Stream stream, Encoding encoding);
    private void InitStreamInput(Uri baseUri, string baseUriStr, Stream stream, Byte[] bytes, int byteCount, Encoding encoding);
    private void InitTextReaderInput(string baseUriStr, TextReader input);
    private void InitTextReaderInput(string baseUriStr, Uri baseUri, TextReader input);
    private void InitStringInput(string baseUriStr, Encoding originalEncoding, string str);
    private void ProcessDtdFromParserContext(XmlParserContext context);
    private Encoding DetectEncoding();
    private void SetupEncoding(Encoding encoding);
    private void SwitchEncoding(Encoding newEncoding);
    private Encoding CheckEncoding(string newEncodingName);
    private void UnDecodeChars();
    private void SwitchEncodingToUTF8();
    private int ReadData();
    private int GetChars(int maxCharsCount);
    private void InvalidCharRecovery(Int32& bytesCount, Int32& charsCount);
    private void Close(bool closeInput);
    private void ShiftBuffer(int sourcePos, int destPos, int count);
    private bool ParseXmlDeclaration(bool isTextDecl);
    private bool ParseDocumentContent();
    private bool ParseElementContent();
    private void ThrowUnclosedElements();
    private void ParseElement();
    private void AddDefaultAttributesAndNormalize();
    private void ParseEndElement();
    private void ThrowTagMismatch(NodeData startTag);
    private void ParseAttributes();
    private void ElementNamespaceLookup();
    private void AttributeNamespaceLookup();
    private void AttributeDuplCheck();
    private void OnDefaultNamespaceDecl(NodeData attr);
    private void OnNamespaceDecl(NodeData attr);
    private void OnXmlReservedAttribute(NodeData attr);
    private void ParseAttributeValueSlow(int curPos, char quoteChar, NodeData attr);
    private bool ParseText();
    private bool ParseText(Int32& startPos, Int32& endPos, Int32& outOrChars);
    private void FinishPartialValue();
    private void FinishOtherValueIterator();
    private void SkipPartialTextValue();
    private void FinishReadValueChunk();
    private void FinishReadContentAsBinary();
    private void FinishReadElementContentAsBinary();
    private bool ParseRootLevelWhitespace();
    private EntityType HandleEntityReference(bool isInAttributeValue, EntityExpandType expandType, Int32& charRefEndPos);
    private EntityType HandleGeneralEntityReference(string name, bool isInAttributeValue, bool pushFakeEntityIfNullResolver, int entityStartLinePos);
    private bool get_InEntity();
    private void HandleEntityEnd(bool checkEntityNesting);
    private bool ParsePI();
    private bool ParsePI(BufferBuilder piInDtdStringBuilder);
    private bool ParsePIValue(Int32& outStartPos, Int32& outEndPos);
    private bool ParseComment();
    private void ParseCData();
    private void ParseCDataOrComment(XmlNodeType type);
    private bool ParseCDataOrComment(XmlNodeType type, Int32& outStartPos, Int32& outEndPos);
    private bool ParseDoctypeDecl();
    private void ParseDtd();
    private void SkipDtd();
    private void SkipPublicOrSystemIdLiteral();
    private void SkipUntil(char stopChar, bool recognizeLiterals);
    private int EatWhitespaces(BufferBuilder sb);
    private int ParseCharRefInline(int startPos, Int32& charCount, EntityType& entityType);
    private int ParseNumericCharRef(bool expand, BufferBuilder internalSubsetBuilder, EntityType& entityType);
    private int ParseNumericCharRefInline(int startPos, bool expand, BufferBuilder internalSubsetBuilder, Int32& charCount, EntityType& entityType);
    private int ParseNamedCharRef(bool expand, BufferBuilder internalSubsetBuilder);
    private int ParseNamedCharRefInline(int startPos, bool expand, BufferBuilder internalSubsetBuilder);
    private int ParseName();
    private int ParseQName(Int32& colonPos);
    private int ParseQName(bool isQName, int startOffset, Int32& colonPos);
    private bool ReadDataInName(Int32& pos);
    private NodeData AddNode(int nodeIndex, int nodeDepth);
    private NodeData AllocNode(int nodeIndex, int nodeDepth);
    private NodeData AddAttributeNoChecks(string name, int attrDepth);
    private NodeData AddAttribute(int endNamePos, int colonPos);
    private NodeData AddAttribute(string localName, string prefix, string nameWPrefix);
    private void PopElementContext();
    private void OnNewLine(int pos);
    private void OnEof();
    private string LookupNamespace(NodeData node);
    private void AddNamespace(string prefix, string uri, NodeData attr);
    private void ResetAttributes();
    private void FullAttributeCleanup();
    private void PushXmlContext();
    private void PopXmlContext();
    private XmlNodeType GetWhitespaceType();
    private XmlNodeType GetTextNodeType(int orChars);
    private void PushExternalEntityOrSubset(string publicId, string systemId, Uri baseUri, string entityName);
    private bool OpenAndPush(Uri uri);
    private bool PushExternalEntity(IDtdEntityInfo entity);
    private void PushInternalEntity(IDtdEntityInfo entity);
    private void PopEntity();
    private void RegisterEntity(IDtdEntityInfo entity);
    private void UnregisterEntity();
    private void PushParsingState();
    private void PopParsingState();
    private void ThrowUnexpectedToken(int pos, string expectedToken);
    private void ThrowUnexpectedToken(string expectedToken1);
    private void ThrowUnexpectedToken(int pos, string expectedToken1, string expectedToken2);
    private void ThrowUnexpectedToken(string expectedToken1, string expectedToken2);
    private string ParseUnexpectedToken(int pos);
    private string ParseUnexpectedToken();
    private void ThrowExpectingWhitespace(int pos);
    private int GetIndexOfAttributeWithoutPrefix(string name);
    private int GetIndexOfAttributeWithPrefix(string name);
    private bool ZeroEndingStream(int pos);
    private void ParseDtdFromParserContext();
    private bool InitReadContentAsBinary();
    private bool InitReadElementContentAsBinary();
    private bool MoveToNextContentNode(bool moveIfOnContentNode);
    private void SetupReadContentAsBinaryState(ParsingFunction inReadBinaryFunction);
    private void SetupFromParserContext(XmlParserContext context, XmlReaderSettings settings);
    internal ConformanceLevel get_V1ComformanceLevel();
    private bool AddDefaultAttributeDtd(IDtdDefaultAttributeInfo defAttrInfo, bool definedInDtd, NodeData[] nameSortedNodeData);
    private NodeData AddDefaultAttributeInternal(string localName, string ns, string prefix, string value, int lineNo, int linePos, int valueLineNo, int valueLinePos, bool isXmlAttribute);
    private int ReadContentAsBinary(Byte[] buffer, int index, int count);
    private int ReadElementContentAsBinary(Byte[] buffer, int index, int count);
    private void InitBase64Decoder();
    private void InitBinHexDecoder();
    private bool UriEqual(Uri uri1, string uri1Str, string uri2Str, XmlResolver resolver);
    private void RegisterConsumedCharacters(long characters, bool inEntityReference);
    [SecuritySafeCriticalAttribute]
internal static void AdjustLineInfo(Char[] chars, int startPos, int endPos, bool isNormalized, LineInfo& lineInfo);
    [SecuritySafeCriticalAttribute]
internal static void AdjustLineInfo(string str, int startPos, int endPos, bool isNormalized, LineInfo& lineInfo);
    [SecurityCriticalAttribute]
internal static void AdjustLineInfo(Char* pChars, int length, bool isNormalized, LineInfo& lineInfo);
    internal static string StripSpaces(string value);
    internal static void StripSpaces(Char[] value, int index, Int32& len);
    internal static void BlockCopyChars(Char[] src, int srcOffset, Char[] dst, int dstOffset, int count);
    internal static void BlockCopy(Byte[] src, int srcOffset, Byte[] dst, int dstOffset, int count);
    private void CheckAsyncCall();
    public virtual Task`1<string> GetValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<_GetValueAsync>d__357")]
private Task`1<string> _GetValueAsync();
    private Task FinishInitAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<FinishInitUriStringAsync>d__359")]
private Task FinishInitUriStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<FinishInitStreamAsync>d__360")]
private Task FinishInitStreamAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<FinishInitTextReaderAsync>d__361")]
private Task FinishInitTextReaderAsync();
    public virtual Task`1<bool> ReadAsync();
    private Task`1<bool> ReadAsync_SwitchToInteractiveXmlDecl();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<_ReadAsync_SwitchToInteractiveXmlDecl>d__364")]
private Task`1<bool> _ReadAsync_SwitchToInteractiveXmlDecl(Task`1<bool> task);
    private Task`1<bool> ReadAsync_SwitchToInteractiveXmlDecl_Helper(bool finish);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<SkipAsync>d__366")]
public virtual Task SkipAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadContentAsBase64_AsyncHelper>d__367")]
private Task`1<int> ReadContentAsBase64_AsyncHelper(Task`1<bool> task, Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadContentAsBinHexAsync>d__369")]
public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadElementContentAsBase64Async_Helper>d__370")]
private Task`1<int> ReadElementContentAsBase64Async_Helper(Task`1<bool> task, Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadElementContentAsBinHexAsync>d__372")]
public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadValueChunkAsync>d__373")]
public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
    internal Task`1<int> DtdParserProxy_ReadDataAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<DtdParserProxy_ParseNumericCharRefAsync>d__375")]
internal Task`1<int> DtdParserProxy_ParseNumericCharRefAsync(BufferBuilder internalSubsetBuilder);
    internal Task`1<int> DtdParserProxy_ParseNamedCharRefAsync(bool expand, BufferBuilder internalSubsetBuilder);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<DtdParserProxy_ParsePIAsync>d__377")]
internal Task DtdParserProxy_ParsePIAsync(BufferBuilder sb);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<DtdParserProxy_ParseCommentAsync>d__378")]
internal Task DtdParserProxy_ParseCommentAsync(BufferBuilder sb);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<InitStreamInputAsync>d__379")]
private Task InitStreamInputAsync(Uri baseUri, string baseUriStr, Stream stream, Byte[] bytes, int byteCount, Encoding encoding);
    private Task InitTextReaderInputAsync(string baseUriStr, TextReader input);
    private Task InitTextReaderInputAsync(string baseUriStr, Uri baseUri, TextReader input);
    private Task ProcessDtdFromParserContextAsync(XmlParserContext context);
    private Task SwitchEncodingAsync(Encoding newEncoding);
    private Task SwitchEncodingToUTF8Async();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadDataAsync>d__385")]
private Task`1<int> ReadDataAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseXmlDeclarationAsync>d__386")]
private Task`1<bool> ParseXmlDeclarationAsync(bool isTextDecl);
    private Task`1<bool> ParseDocumentContentAsync();
    private Task`1<bool> ParseDocumentContentAsync_CData();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseDocumentContentAsync_ParseEntity>d__389")]
private Task`1<bool> ParseDocumentContentAsync_ParseEntity();
    private Task`1<bool> ParseDocumentContentAsync_WhiteSpace();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<_ParseDocumentContentAsync_WhiteSpace>d__391")]
private Task`1<bool> _ParseDocumentContentAsync_WhiteSpace(Task`1<bool> task);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseDocumentContentAsync_ReadData>d__392")]
private Task`1<bool> ParseDocumentContentAsync_ReadData(bool needMoreChars);
    private Task`1<bool> ParseElementContentAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseElementContent_ReadData>d__394")]
private Task`1<bool> ParseElementContent_ReadData();
    private Task ParseElementAsync();
    private Task ParseElementAsync_ContinueWithSetElement(Task`1<ValueTuple`2<int, int>> task);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<_ParseElementAsync_ContinueWithSetElement>d__397")]
private Task _ParseElementAsync_ContinueWithSetElement(Task`1<ValueTuple`2<int, int>> task);
    private Task ParseElementAsync_SetElement(int colonPos, int pos);
    private Task ParseElementAsync_NoAttributes();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseElementAsync_ReadData>d__400")]
private Task ParseElementAsync_ReadData(int pos);
    private Task ParseEndElementAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<_ParseEndElmentAsync>d__402")]
private Task _ParseEndElmentAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseEndElmentAsync_PrepareData>d__403")]
private Task ParseEndElmentAsync_PrepareData();
    private Task ParseEndElementAsync_CheckNameAndParse();
    private Task ParseEndElementAsync_Finish(int nameLen, NodeData startTagNode, LineInfo endTagLineInfo);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseEndElementAsync_Finish>d__408")]
private Task ParseEndElementAsync_Finish(Task task, int nameLen, NodeData startTagNode, LineInfo endTagLineInfo);
    private Task ParseEndElementAsync_CheckEndTag(int nameLen, NodeData startTagNode, LineInfo endTagLineInfo);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseEndElementAsync_ReadData>d__410")]
private Task ParseEndElementAsync_ReadData();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ThrowTagMismatchAsync>d__411")]
private Task ThrowTagMismatchAsync(NodeData startTag);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseAttributesAsync>d__412")]
private Task ParseAttributesAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseAttributeValueSlowAsync>d__413")]
private Task ParseAttributeValueSlowAsync(int curPos, char quoteChar, NodeData attr);
    private Task`1<bool> ParseTextAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<_ParseTextAsync>d__415")]
private Task`1<bool> _ParseTextAsync(Task`1<ValueTuple`4<int, int, int, bool>> parseTask);
    private Task`1<bool> ParseTextAsync_IgnoreNode();
    private ValueTask`1<ValueTuple`4<int, int, int, bool>> ParseTextAsync(int outOrChars);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseTextAsync_AsyncFunc>d__423")]
private Task`1<ValueTuple`4<int, int, int, bool>> ParseTextAsync_AsyncFunc(Task`1<ValueTuple`4<int, int, int, bool>> task);
    private Task`1<ValueTuple`4<int, int, int, bool>> ParseTextAsync(int outOrChars, Char[] chars, int pos, int rcount, int rpos, int orChars, char c);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseTextAsync_ParseEntity>d__425")]
private Task`1<ValueTuple`4<int, int, int, bool>> ParseTextAsync_ParseEntity(int outOrChars, Char[] chars, int pos, int rcount, int rpos, int orChars, char c);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseTextAsync_Surrogate>d__426")]
private Task`1<ValueTuple`4<int, int, int, bool>> ParseTextAsync_Surrogate(int outOrChars, Char[] chars, int pos, int rcount, int rpos, int orChars, char c);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseTextAsync_ReadData>d__427")]
private Task`1<ValueTuple`4<int, int, int, bool>> ParseTextAsync_ReadData(int outOrChars, Char[] chars, int pos, int rcount, int rpos, int orChars, char c);
    private ValueTuple`4<int, int, int, bool> ParseText_NoValue(int outOrChars, int pos);
    private ValueTuple`4<int, int, int, bool> ParseText_PartialValue(int pos, int rcount, int rpos, int orChars, char c);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<FinishPartialValueAsync>d__430")]
private Task FinishPartialValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<FinishOtherValueIteratorAsync>d__431")]
private Task FinishOtherValueIteratorAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<SkipPartialTextValueAsync>d__432")]
private Task SkipPartialTextValueAsync();
    private Task FinishReadValueChunkAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<FinishReadContentAsBinaryAsync>d__434")]
private Task FinishReadContentAsBinaryAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<FinishReadElementContentAsBinaryAsync>d__435")]
private Task FinishReadElementContentAsBinaryAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseRootLevelWhitespaceAsync>d__436")]
private Task`1<bool> ParseRootLevelWhitespaceAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<HandleEntityReferenceAsync>d__437")]
private Task`1<ValueTuple`2<int, EntityType>> HandleEntityReferenceAsync(bool isInAttributeValue, EntityExpandType expandType);
    private Task`1<bool> ParsePIAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParsePIAsync>d__439")]
private Task`1<bool> ParsePIAsync(BufferBuilder piInDtdStringBuilder);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParsePIValueAsync>d__440")]
private Task`1<ValueTuple`3<int, int, bool>> ParsePIValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseCommentAsync>d__441")]
private Task`1<bool> ParseCommentAsync();
    private Task ParseCDataAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseCDataOrCommentAsync>d__443")]
private Task ParseCDataOrCommentAsync(XmlNodeType type);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseCDataOrCommentTupleAsync>d__444")]
private Task`1<ValueTuple`3<int, int, bool>> ParseCDataOrCommentTupleAsync(XmlNodeType type);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseDoctypeDeclAsync>d__445")]
private Task`1<bool> ParseDoctypeDeclAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<SkipDtdAsync>d__446")]
private Task SkipDtdAsync();
    private Task SkipPublicOrSystemIdLiteralAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<SkipUntilAsync>d__448")]
private Task SkipUntilAsync(char stopChar, bool recognizeLiterals);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<EatWhitespacesAsync>d__449")]
private Task`1<int> EatWhitespacesAsync(BufferBuilder sb);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseNumericCharRefAsync>d__450")]
private Task`1<ValueTuple`2<EntityType, int>> ParseNumericCharRefAsync(bool expand, BufferBuilder internalSubsetBuilder);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseNamedCharRefAsync>d__451")]
private Task`1<int> ParseNamedCharRefAsync(bool expand, BufferBuilder internalSubsetBuilder);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseNameAsync>d__452")]
private Task`1<int> ParseNameAsync();
    private Task`1<ValueTuple`2<int, int>> ParseQNameAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ParseQNameAsync>d__454")]
private Task`1<ValueTuple`2<int, int>> ParseQNameAsync(bool isQName, int startOffset);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadDataInNameAsync>d__455")]
private Task`1<ValueTuple`2<int, bool>> ReadDataInNameAsync(int pos);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ZeroEndingStreamAsync>d__456")]
private Task`1<bool> ZeroEndingStreamAsync(int pos);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<InitReadContentAsBinaryAsync>d__457")]
private Task`1<bool> InitReadContentAsBinaryAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<InitReadElementContentAsBinaryAsync>d__458")]
private Task`1<bool> InitReadElementContentAsBinaryAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<MoveToNextContentNodeAsync>d__459")]
private Task`1<bool> MoveToNextContentNodeAsync(bool moveIfOnContentNode);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadContentAsBinaryAsync>d__460")]
private Task`1<int> ReadContentAsBinaryAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadElementContentAsBinaryAsync>d__461")]
private Task`1<int> ReadElementContentAsBinaryAsync(Byte[] buffer, int index, int count);
}
internal class System.Xml.XmlTextWriterBase64Encoder : Base64Encoder {
    private XmlTextEncoder _xmlTextEncoder;
    internal XmlTextWriterBase64Encoder(XmlTextEncoder xmlTextEncoder);
    internal virtual void WriteChars(Char[] chars, int index, int count);
    internal virtual Task WriteCharsAsync(Char[] chars, int index, int count);
}
internal enum System.Xml.XmlTokenizedType : Enum {
    public int value__;
    public static XmlTokenizedType CDATA;
    public static XmlTokenizedType ID;
    public static XmlTokenizedType IDREF;
    public static XmlTokenizedType IDREFS;
    public static XmlTokenizedType ENTITY;
    public static XmlTokenizedType ENTITIES;
    public static XmlTokenizedType NMTOKEN;
    public static XmlTokenizedType NMTOKENS;
    public static XmlTokenizedType NOTATION;
    public static XmlTokenizedType ENUMERATION;
    public static XmlTokenizedType QName;
    public static XmlTokenizedType NCName;
    public static XmlTokenizedType None;
}
internal class System.Xml.XmlUtf8RawTextWriter : XmlRawWriter {
    private bool _useAsync;
    protected Byte[] bufBytes;
    protected Stream stream;
    protected Encoding encoding;
    protected XmlCharType xmlCharType;
    protected int bufPos;
    protected int textPos;
    protected int contentPos;
    protected int cdataPos;
    protected int attrEndPos;
    protected int bufLen;
    protected bool writeToNull;
    protected bool hadDoubleBracket;
    protected bool inAttributeValue;
    protected NewLineHandling newLineHandling;
    protected bool closeOutput;
    protected bool omitXmlDeclaration;
    protected string newLineChars;
    protected bool checkCharacters;
    protected bool autoXmlDeclaration;
    protected bool mergeCDataSections;
    private static int BUFSIZE;
    private static int ASYNCBUFSIZE;
    private static int OVERFLOW;
    private static int INIT_MARKS_COUNT;
    public XmlWriterSettings Settings { get; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    protected XmlUtf8RawTextWriter(XmlWriterSettings settings);
    public XmlUtf8RawTextWriter(Stream stream, XmlWriterSettings settings);
    public virtual XmlWriterSettings get_Settings();
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string namespaceName);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    protected virtual void FlushBuffer();
    private void FlushEncoder();
    protected void WriteAttributeTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void WriteElementTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void RawText(string s);
    protected void RawText(Char* pSrcBegin, Char* pSrcEnd);
    protected void WriteRawWithCharChecking(Char* pSrcBegin, Char* pSrcEnd);
    protected void WriteCommentOrPi(string text, int stopChar);
    protected void WriteCDataSection(string text);
    private static bool IsSurrogateByte(byte b);
    private static Byte* EncodeSurrogate(Char* pSrc, Char* pSrcEnd, Byte* pDst);
    private Byte* InvalidXmlChar(int ch, Byte* pDst, bool entitize);
    internal void EncodeChar(Char*& pSrc, Char* pSrcEnd, Byte*& pDst);
    internal static Byte* EncodeMultibyteUTF8(int ch, Byte* pDst);
    internal static void CharToUTF8(Char*& pSrc, Char* pSrcEnd, Byte*& pDst);
    protected Byte* WriteNewLine(Byte* pDst);
    protected static Byte* LtEntity(Byte* pDst);
    protected static Byte* GtEntity(Byte* pDst);
    protected static Byte* AmpEntity(Byte* pDst);
    protected static Byte* QuoteEntity(Byte* pDst);
    protected static Byte* TabEntity(Byte* pDst);
    protected static Byte* LineFeedEntity(Byte* pDst);
    protected static Byte* CarriageReturnEntity(Byte* pDst);
    private static Byte* CharEntity(Byte* pDst, char ch);
    protected static Byte* RawStartCData(Byte* pDst);
    protected static Byte* RawEndCData(Byte* pDst);
    protected void ValidateContentChars(string chars, string propertyName, bool allowOnlyWhitespace);
    protected void CheckAsyncCall();
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteXmlDeclarationAsync>d__84")]
internal virtual Task WriteXmlDeclarationAsync(XmlStandalone standalone);
    internal virtual Task WriteXmlDeclarationAsync(string xmldecl);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteDocTypeAsync>d__86")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    private void WriteStartElementAsync_SetAttEndPos();
    internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    private void WriteStartAttribute_SetInAttribute();
    protected internal virtual Task WriteEndAttributeAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteNamespaceDeclarationAsync>d__94")]
internal virtual Task WriteNamespaceDeclarationAsync(string prefix, string namespaceName);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteStartNamespaceDeclarationAsync>d__95")]
internal virtual Task WriteStartNamespaceDeclarationAsync(string prefix);
    internal virtual Task WriteEndNamespaceDeclarationAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCDataAsync>d__97")]
public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCommentAsync>d__98")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteProcessingInstructionAsync>d__99")]
public virtual Task WriteProcessingInstructionAsync(string name, string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteEntityRefAsync>d__100")]
public virtual Task WriteEntityRefAsync(string name);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCharEntityAsync>d__101")]
public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteSurrogateCharEntityAsync>d__104")]
public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteRawAsync>d__106")]
public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteRawAsync>d__107")]
public virtual Task WriteRawAsync(string data);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<FlushAsync>d__108")]
public virtual Task FlushAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<FlushBufferAsync>d__109")]
protected virtual Task FlushBufferAsync();
    private Task FlushEncoderAsync();
    [SecuritySafeCriticalAttribute]
protected int WriteAttributeTextBlockNoFlush(Char* pSrc, Char* pSrcEnd);
    [SecuritySafeCriticalAttribute]
protected int WriteAttributeTextBlockNoFlush(Char[] chars, int index, int count);
    [SecuritySafeCriticalAttribute]
protected int WriteAttributeTextBlockNoFlush(string text, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteAttributeTextBlockAsync>d__114")]
protected Task WriteAttributeTextBlockAsync(Char[] chars, int index, int count);
    protected Task WriteAttributeTextBlockAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<_WriteAttributeTextBlockAsync>d__116")]
private Task _WriteAttributeTextBlockAsync(string text, int curIndex, int leftCount);
    [SecuritySafeCriticalAttribute]
protected int WriteElementTextBlockNoFlush(Char* pSrc, Char* pSrcEnd, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteElementTextBlockNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteElementTextBlockNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteElementTextBlockAsync>d__120")]
protected Task WriteElementTextBlockAsync(Char[] chars, int index, int count);
    protected Task WriteElementTextBlockAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<_WriteElementTextBlockAsync>d__122")]
private Task _WriteElementTextBlockAsync(bool newLine, string text, int curIndex, int leftCount);
    [SecuritySafeCriticalAttribute]
protected int RawTextNoFlush(Char* pSrcBegin, Char* pSrcEnd);
    [SecuritySafeCriticalAttribute]
protected int RawTextNoFlush(string text, int index, int count);
    protected Task RawTextAsync(string text);
    protected Task RawTextAsync(string text1, string text2, string text3, string text4);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<_RawTextAsync>d__127")]
private Task _RawTextAsync(string text, int curIndex, int leftCount, string text2, string text3, string text4);
    [SecuritySafeCriticalAttribute]
protected int WriteRawWithCharCheckingNoFlush(Char* pSrcBegin, Char* pSrcEnd, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteRawWithCharCheckingNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteRawWithCharCheckingNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteRawWithCharCheckingAsync>d__131")]
protected Task WriteRawWithCharCheckingAsync(Char[] chars, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteRawWithCharCheckingAsync>d__132")]
protected Task WriteRawWithCharCheckingAsync(string text);
    [SecuritySafeCriticalAttribute]
protected int WriteCommentOrPiNoFlush(string text, int index, int count, int stopChar, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCommentOrPiAsync>d__134")]
protected Task WriteCommentOrPiAsync(string text, int stopChar);
    [SecuritySafeCriticalAttribute]
protected int WriteCDataSectionNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCDataSectionAsync>d__136")]
protected Task WriteCDataSectionAsync(string text);
}
internal class System.Xml.XmlUtf8RawTextWriterIndent : XmlUtf8RawTextWriter {
    protected int indentLevel;
    protected bool newLineOnAttributes;
    protected string indentChars;
    protected bool mixedContent;
    private BitStack _mixedContentStack;
    protected ConformanceLevel conformanceLevel;
    public XmlWriterSettings Settings { get; }
    public XmlUtf8RawTextWriterIndent(Stream stream, XmlWriterSettings settings);
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void OnRootElement(ConformanceLevel currentConformanceLevel);
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string target, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    private void Init(XmlWriterSettings settings);
    private void WriteIndent();
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteDocTypeAsync>d__30")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteStartElementAsync>d__31")]
public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteEndElementAsync>d__32")]
internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteFullEndElementAsync>d__33")]
internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteStartAttributeAsync>d__34")]
protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteCommentAsync>d__36")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteProcessingInstructionAsync>d__37")]
public virtual Task WriteProcessingInstructionAsync(string target, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteIndentAsync>d__47")]
private Task WriteIndentAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(string name, string pubid, string sysid, string subset);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__1(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__2(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__3(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__4(string prefix, string localName, string ns);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__5(string text);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__6(string name, string text);
}
internal class System.Xml.XmlWellFormedWriter : XmlWriter {
    private XmlWriter _writer;
    private XmlRawWriter _rawWriter;
    private IXmlNamespaceResolver _predefinedNamespaces;
    private Namespace[] _nsStack;
    private int _nsTop;
    private Dictionary`2<string, int> _nsHashtable;
    private bool _useNsHashtable;
    private ElementScope[] _elemScopeStack;
    private int _elemTop;
    private AttrName[] _attrStack;
    private int _attrCount;
    private Dictionary`2<string, int> _attrHashTable;
    private SpecialAttribute _specAttr;
    private AttributeValueCache _attrValueCache;
    private string _curDeclPrefix;
    private State[] _stateTable;
    private State _currentState;
    private bool _checkCharacters;
    private bool _omitDuplNamespaces;
    private bool _writeEndDocumentOnClose;
    private ConformanceLevel _conformanceLevel;
    private bool _dtdWritten;
    private bool _xmlDeclFollows;
    private XmlCharType _xmlCharType;
    private SecureStringHasher _hasher;
    private static int ElementStackInitialSize;
    private static int NamespaceStackInitialSize;
    private static int AttributeArrayInitialSize;
    private static int MaxAttrDuplWalkCount;
    private static int MaxNamespacesWalkCount;
    internal static String[] stateName;
    internal static String[] tokenName;
    private static WriteState[] s_state2WriteState;
    private static State[] s_stateTableDocument;
    private static State[] s_stateTableAuto;
    public WriteState WriteState { get; }
    public XmlWriterSettings Settings { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    private bool SaveAttrValue { get; }
    private bool InBase64 { get; }
    private bool IsClosedOrErrorState { get; }
    internal XmlWellFormedWriter(XmlWriter writer, XmlWriterSettings settings);
    private static XmlWellFormedWriter();
    public virtual WriteState get_WriteState();
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string namespaceName);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(object value);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    private bool get_SaveAttrValue();
    private bool get_InBase64();
    private void SetSpecialAttribute(SpecialAttribute special);
    private void WriteStartDocumentImpl(XmlStandalone standalone);
    private void StartFragment();
    private void PushNamespaceImplicit(string prefix, string ns);
    private bool PushNamespaceExplicit(string prefix, string ns);
    private void AddNamespace(string prefix, string ns, NamespaceKind kind);
    private void AddToNamespaceHashtable(int namespaceIndex);
    private int LookupNamespaceIndex(string prefix);
    private void PopNamespaces(int indexFrom, int indexTo);
    private static XmlException DupAttrException(string prefix, string localName);
    private void AdvanceState(Token token);
    private void StartElementContent();
    private static string GetStateName(State state);
    internal string LookupNamespace(string prefix);
    private string LookupLocalNamespace(string prefix);
    private string GeneratePrefix();
    private void CheckNCName(string ncname);
    private static Exception InvalidCharsException(string name, int badCharIndex);
    private void ThrowInvalidStateTransition(Token token, State currentState);
    private bool get_IsClosedOrErrorState();
    private void AddAttribute(string prefix, string localName, string namespaceName);
    private void AddToAttrHashTable(int attributeIndex);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteEndDocumentAsync>d__110")]
public virtual Task WriteEndDocumentAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteDocTypeAsync>d__111")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    private Task TryReturnTask(Task task);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<_TryReturnTask>d__113")]
private Task _TryReturnTask(Task task);
    private Task SequenceRun(Task task, Func`2<TArg, Task> nextTaskFun, TArg arg);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<_SequenceRun>d__115`1")]
private Task _SequenceRun(Task task, Func`2<TArg, Task> nextTaskFun, TArg arg);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    private Task WriteStartElementAsync_NoAdvanceState(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteStartElementAsync_NoAdvanceState>d__118")]
private Task WriteStartElementAsync_NoAdvanceState(Task task, string prefix, string localName, string ns);
    private void WriteStartElementAsync_FinishWrite(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteStartElementAsync_FinishWrite>d__120")]
private Task WriteStartElementAsync_FinishWrite(Task t, string prefix, string localName, string ns);
    public virtual Task WriteEndElementAsync();
    private Task WriteEndElementAsync_NoAdvanceState();
    private Task WriteEndElementAsync_FinishWrite();
    public virtual Task WriteFullEndElementAsync();
    private Task WriteFullEndElementAsync_NoAdvanceState();
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string namespaceName);
    private Task WriteStartAttributeAsync_NoAdvanceState(string prefix, string localName, string namespaceName);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteStartAttributeAsync_NoAdvanceState>d__128")]
private Task WriteStartAttributeAsync_NoAdvanceState(Task task, string prefix, string localName, string namespaceName);
    protected internal virtual Task WriteEndAttributeAsync();
    private Task WriteEndAttributeAsync_NoAdvance();
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteEndAttributeAsync_SepcialAtt>d__131")]
private Task WriteEndAttributeAsync_SepcialAtt();
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteCDataAsync>d__132")]
public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteCommentAsync>d__133")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteProcessingInstructionAsync>d__134")]
public virtual Task WriteProcessingInstructionAsync(string name, string text);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteEntityRefAsync>d__135")]
public virtual Task WriteEntityRefAsync(string name);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteCharEntityAsync>d__136")]
public virtual Task WriteCharEntityAsync(char ch);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteSurrogateCharEntityAsync>d__137")]
public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteWhitespaceAsync>d__138")]
public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    private Task WriteStringAsync_NoAdvanceState(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteStringAsync_NoAdvanceState>d__141")]
private Task WriteStringAsync_NoAdvanceState(Task task, string text);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteCharsAsync>d__142")]
public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteRawAsync>d__143")]
public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteRawAsync>d__144")]
public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteBase64Async_NoAdvanceState>d__146")]
private Task WriteBase64Async_NoAdvanceState(Task task, Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<FlushAsync>d__147")]
public virtual Task FlushAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteQualifiedNameAsync>d__148")]
public virtual Task WriteQualifiedNameAsync(string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteBinHexAsync>d__149")]
public virtual Task WriteBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteStartDocumentImplAsync>d__150")]
private Task WriteStartDocumentImplAsync(XmlStandalone standalone);
    private Task AdvanceStateAsync_ReturnWhenFinish(Task task, State newState);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<_AdvanceStateAsync_ReturnWhenFinish>d__152")]
private Task _AdvanceStateAsync_ReturnWhenFinish(Task task, State newState);
    private Task AdvanceStateAsync_ContinueWhenFinish(Task task, State newState, Token token);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<_AdvanceStateAsync_ContinueWhenFinish>d__154")]
private Task _AdvanceStateAsync_ContinueWhenFinish(Task task, State newState, Token token);
    private Task AdvanceStateAsync(Token token);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<StartElementContentAsync_WithNS>d__156")]
private Task StartElementContentAsync_WithNS();
    private Task StartElementContentAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(Byte[] buffer, int index, int count);
}
internal class System.Xml.XmlWrappingReader : XmlReader {
    protected XmlReader reader;
    protected IXmlLineInfo readerAsIXmlLineInfo;
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public bool HasAttributes { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal XmlWrappingReader(XmlReader baseReader);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual Type get_ValueType();
    public virtual int get_AttributeCount();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual bool get_HasAttributes();
    public virtual XmlNameTable get_NameTable();
    public virtual bool get_CanResolveEntity();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    protected virtual void Dispose(bool disposing);
    public virtual void Skip();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    public virtual bool HasLineInfo();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
    public virtual Task`1<string> GetValueAsync();
    public virtual Task`1<bool> ReadAsync();
    public virtual Task SkipAsync();
}
internal class System.Xml.XmlWrappingWriter : XmlWriter {
    protected XmlWriter writer;
    public XmlWriterSettings Settings { get; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    internal XmlWrappingWriter(XmlWriter baseWriter);
    public virtual XmlWriterSettings get_Settings();
    public virtual WriteState get_WriteState();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    protected virtual void Dispose(bool disposing);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    public virtual Task WriteEndDocumentAsync();
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    public virtual Task WriteEndElementAsync();
    public virtual Task WriteFullEndElementAsync();
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteEndAttributeAsync();
    public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCommentAsync(string text);
    public virtual Task WriteProcessingInstructionAsync(string name, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    public virtual Task FlushAsync();
}
public abstract class System.Xml.XmlWriter : object {
    private Char[] _writeNodeBuffer;
    private static int WriteNodeBufferSize;
    public XmlWriterSettings Settings { get; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public virtual XmlWriterSettings get_Settings();
    public abstract virtual void WriteStartDocument();
    public abstract virtual void WriteStartDocument(bool standalone);
    public abstract virtual void WriteEndDocument();
    public abstract virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public void WriteStartElement(string localName, string ns);
    public abstract virtual void WriteStartElement(string prefix, string localName, string ns);
    public void WriteStartElement(string localName);
    public abstract virtual void WriteEndElement();
    public abstract virtual void WriteFullEndElement();
    public void WriteAttributeString(string localName, string ns, string value);
    public void WriteAttributeString(string localName, string value);
    public void WriteAttributeString(string prefix, string localName, string ns, string value);
    public void WriteStartAttribute(string localName, string ns);
    public abstract virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public void WriteStartAttribute(string localName);
    public abstract virtual void WriteEndAttribute();
    public abstract virtual void WriteCData(string text);
    public abstract virtual void WriteComment(string text);
    public abstract virtual void WriteProcessingInstruction(string name, string text);
    public abstract virtual void WriteEntityRef(string name);
    public abstract virtual void WriteCharEntity(char ch);
    public abstract virtual void WriteWhitespace(string ws);
    public abstract virtual void WriteString(string text);
    public abstract virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public abstract virtual void WriteChars(Char[] buffer, int index, int count);
    public abstract virtual void WriteRaw(Char[] buffer, int index, int count);
    public abstract virtual void WriteRaw(string data);
    public abstract virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public abstract virtual WriteState get_WriteState();
    public abstract virtual void Flush();
    public abstract virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(bool value);
    internal virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    public virtual void WriteAttributes(XmlReader reader, bool defattr);
    public virtual void WriteNode(XmlReader reader, bool defattr);
    public void WriteElementString(string localName, string value);
    public void WriteElementString(string localName, string ns, string value);
    public void WriteElementString(string prefix, string localName, string ns, string value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static XmlWriter Create(Stream output);
    public static XmlWriter Create(Stream output, XmlWriterSettings settings);
    public static XmlWriter Create(TextWriter output);
    public static XmlWriter Create(TextWriter output, XmlWriterSettings settings);
    public static XmlWriter Create(StringBuilder output);
    public static XmlWriter Create(StringBuilder output, XmlWriterSettings settings);
    public static XmlWriter Create(XmlWriter output);
    public static XmlWriter Create(XmlWriter output, XmlWriterSettings settings);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    public virtual Task WriteEndDocumentAsync();
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    public virtual Task WriteEndElementAsync();
    public virtual Task WriteFullEndElementAsync();
    public Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteAttributeStringAsyncHelper>d__77")]
private Task WriteAttributeStringAsyncHelper(Task task, string value);
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteEndAttributeAsync();
    public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCommentAsync(string text);
    public virtual Task WriteProcessingInstructionAsync(string name, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    public virtual Task WriteBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task FlushAsync();
    public virtual Task WriteNmTokenAsync(string name);
    public virtual Task WriteNameAsync(string name);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteQualifiedNameAsync>d__96")]
public virtual Task WriteQualifiedNameAsync(string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteAttributesAsync>d__97")]
public virtual Task WriteAttributesAsync(XmlReader reader, bool defattr);
    public virtual Task WriteNodeAsync(XmlReader reader, bool defattr);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteNodeAsync_CallSyncReader>d__99")]
internal Task WriteNodeAsync_CallSyncReader(XmlReader reader, bool defattr);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteNodeAsync_CallAsyncReader>d__100")]
internal Task WriteNodeAsync_CallAsyncReader(XmlReader reader, bool defattr);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteElementStringAsync>d__101")]
public Task WriteElementStringAsync(string prefix, string localName, string ns, string value);
}
public class System.Xml.XmlWriterSettings : object {
    private bool _useAsync;
    private Encoding _encoding;
    private bool _omitXmlDecl;
    private NewLineHandling _newLineHandling;
    private string _newLineChars;
    private TriState _indent;
    private string _indentChars;
    private bool _newLineOnAttributes;
    private bool _closeOutput;
    private NamespaceHandling _namespaceHandling;
    private ConformanceLevel _conformanceLevel;
    private bool _checkCharacters;
    private bool _writeEndDocumentOnClose;
    private bool _isReadOnly;
    public bool Async { get; public set; }
    public Encoding Encoding { get; public set; }
    public bool OmitXmlDeclaration { get; public set; }
    public NewLineHandling NewLineHandling { get; public set; }
    public string NewLineChars { get; public set; }
    public bool Indent { get; public set; }
    public string IndentChars { get; public set; }
    public bool NewLineOnAttributes { get; public set; }
    public bool CloseOutput { get; public set; }
    public ConformanceLevel ConformanceLevel { get; public set; }
    public bool CheckCharacters { get; public set; }
    public NamespaceHandling NamespaceHandling { get; public set; }
    public bool WriteEndDocumentOnClose { get; public set; }
    internal bool ReadOnly { get; internal set; }
    public bool get_Async();
    public void set_Async(bool value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public bool get_OmitXmlDeclaration();
    public void set_OmitXmlDeclaration(bool value);
    public NewLineHandling get_NewLineHandling();
    public void set_NewLineHandling(NewLineHandling value);
    public string get_NewLineChars();
    public void set_NewLineChars(string value);
    public bool get_Indent();
    public void set_Indent(bool value);
    public string get_IndentChars();
    public void set_IndentChars(string value);
    public bool get_NewLineOnAttributes();
    public void set_NewLineOnAttributes(bool value);
    public bool get_CloseOutput();
    public void set_CloseOutput(bool value);
    public ConformanceLevel get_ConformanceLevel();
    public void set_ConformanceLevel(ConformanceLevel value);
    public bool get_CheckCharacters();
    public void set_CheckCharacters(bool value);
    public NamespaceHandling get_NamespaceHandling();
    public void set_NamespaceHandling(NamespaceHandling value);
    public bool get_WriteEndDocumentOnClose();
    public void set_WriteEndDocumentOnClose(bool value);
    public void Reset();
    public XmlWriterSettings Clone();
    internal XmlWriter CreateWriter(Stream output);
    internal XmlWriter CreateWriter(TextWriter output);
    internal XmlWriter CreateWriter(XmlWriter output);
    internal bool get_ReadOnly();
    internal void set_ReadOnly(bool value);
    private void CheckReadOnly(string propertyName);
    private void Initialize();
    private XmlWriter AddConformanceWrapper(XmlWriter baseWriter);
}
