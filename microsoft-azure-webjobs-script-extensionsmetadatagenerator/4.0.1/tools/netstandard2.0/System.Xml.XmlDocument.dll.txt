internal static class FxResources.System.Xml.XmlDocument.SR : object {
}
internal static class System.IO.StringBuilderCache : object {
    private static int MAX_BUILDER_SIZE;
    private static int DEFAULT_CAPACITY;
    [ThreadStaticAttribute]
private static StringBuilder t_cachedInstance;
    public static StringBuilder Acquire(int capacity);
    public static void Release(StringBuilder sb);
    public static string GetStringAndRelease(StringBuilder sb);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Xdom_Node_Null_Doc { get; }
    internal static string Xdom_Node_Insert_Child { get; }
    internal static string Xdom_Node_Insert_Contain { get; }
    internal static string Xdom_Node_Insert_Path { get; }
    internal static string Xdom_Node_Insert_Context { get; }
    internal static string Xdom_Node_Insert_Location { get; }
    internal static string Xdom_Node_Insert_TypeConflict { get; }
    internal static string Xdom_Node_Remove_Contain { get; }
    internal static string Xdom_Node_Remove_Child { get; }
    internal static string Xdom_Node_Modify_ReadOnly { get; }
    internal static string Xdom_TextNode_SplitText { get; }
    internal static string Xdom_Attr_Reserved_XmlNS { get; }
    internal static string Xdom_Node_Cloning { get; }
    internal static string Xdom_DualDocumentTypeNode { get; }
    internal static string Xdom_DualDocumentElementNode { get; }
    internal static string Xdom_DualDeclarationNode { get; }
    internal static string Xdom_Import { get; }
    internal static string Xdom_Import_NullNode { get; }
    internal static string Xdom_NoRootEle { get; }
    internal static string Xdom_Attr_Name { get; }
    internal static string Xdom_AttrCol_Object { get; }
    internal static string Xdom_AttrCol_Insert { get; }
    internal static string Xdom_NamedNode_Context { get; }
    internal static string Xdom_Version { get; }
    internal static string Xdom_standalone { get; }
    internal static string Xdom_Ele_Prefix { get; }
    internal static string Xdom_Ent_Innertext { get; }
    internal static string Xdom_EntRef_SetVal { get; }
    internal static string Xdom_WS_Char { get; }
    internal static string Xdom_Node_SetVal { get; }
    internal static string Xdom_Empty_LocalName { get; }
    internal static string Xdom_Set_InnerXml { get; }
    internal static string Xdom_Attr_InUse { get; }
    internal static string Xdom_Enum_ElementList { get; }
    internal static string Xdom_Invalid_NT_String { get; }
    internal static string Xdom_InvalidCharacter_EntityReference { get; }
    internal static string Xdom_IndexOutOfRange { get; }
    internal static string Xdom_Document_Innertext { get; }
    internal static string Arg_ExpectingXmlTextReader { get; }
    internal static string Arg_CannotCreateNode { get; }
    internal static string Arg_IncompatibleParamType { get; }
    internal static string XmlNonCLSCompliantException { get; }
    internal static string Xml_UnsupportedClass { get; }
    internal static string Xml_NullResolver { get; }
    internal static string Xml_RelativeUriNotSupported { get; }
    internal static string Xml_UnexpectedNodeType { get; }
    internal static string Xml_InvalidOperation { get; }
    internal static string Xdom_Load_NoDocument { get; }
    internal static string Xdom_Load_NoReader { get; }
    internal static string Xml_UndeclaredParEntity { get; }
    internal static string Xml_EmptyName { get; }
    internal static string Xml_BadStartNameChar { get; }
    internal static string Xml_BadNameChar { get; }
    internal static string Xml_UntrustedCodeSettingResolver { get; }
    internal static string Xml_InvalidSurrogateHighChar { get; }
    internal static string Xml_InvalidSurrogateMissingLowChar { get; }
    internal static string Xml_InvalidSurrogatePairWithArgs { get; }
    internal static string Xml_NotInWriteState { get; }
    internal static string Xml_InvalidIndentation { get; }
    internal static string Xml_InvalidQuote { get; }
    internal static string Xml_NoRoot { get; }
    internal static string Xml_UndefPrefix { get; }
    internal static string Xml_NoNamespaces { get; }
    internal static string Xml_XmlnsBelongsToReservedNs { get; }
    internal static string Xml_SurrogatePairSplit { get; }
    internal static string Xml_ClosedOrError { get; }
    internal static string Xml_InvalidCDataChars { get; }
    internal static string Xml_InvalidCommentChars { get; }
    internal static string Xml_InvalidPiChars { get; }
    internal static string Xml_DupXmlDecl { get; }
    internal static string Xml_NonWhitespace { get; }
    internal static string Xml_UndefNamespace { get; }
    internal static string Xml_InvalidNameCharsDetail { get; }
    internal static string Xml_NotTheFirst { get; }
    internal static string Xml_Closed { get; }
    internal static string Xml_WrongToken { get; }
    internal static string Xml_NoStartTag { get; }
    internal static string Xml_CanNotBindToReservedNamespace { get; }
    internal static string Xml_InvalidNameChars { get; }
    internal static string Xml_PrefixForEmptyNs { get; }
    internal static string Xml_InvalidXmlSpace { get; }
    internal static string Xml_InvalidPrefix { get; }
    internal static string XmlConvert_BadFormat { get; }
    internal static string Xml_InvalidCharacter { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Xdom_Node_Null_Doc();
    internal static string get_Xdom_Node_Insert_Child();
    internal static string get_Xdom_Node_Insert_Contain();
    internal static string get_Xdom_Node_Insert_Path();
    internal static string get_Xdom_Node_Insert_Context();
    internal static string get_Xdom_Node_Insert_Location();
    internal static string get_Xdom_Node_Insert_TypeConflict();
    internal static string get_Xdom_Node_Remove_Contain();
    internal static string get_Xdom_Node_Remove_Child();
    internal static string get_Xdom_Node_Modify_ReadOnly();
    internal static string get_Xdom_TextNode_SplitText();
    internal static string get_Xdom_Attr_Reserved_XmlNS();
    internal static string get_Xdom_Node_Cloning();
    internal static string get_Xdom_DualDocumentTypeNode();
    internal static string get_Xdom_DualDocumentElementNode();
    internal static string get_Xdom_DualDeclarationNode();
    internal static string get_Xdom_Import();
    internal static string get_Xdom_Import_NullNode();
    internal static string get_Xdom_NoRootEle();
    internal static string get_Xdom_Attr_Name();
    internal static string get_Xdom_AttrCol_Object();
    internal static string get_Xdom_AttrCol_Insert();
    internal static string get_Xdom_NamedNode_Context();
    internal static string get_Xdom_Version();
    internal static string get_Xdom_standalone();
    internal static string get_Xdom_Ele_Prefix();
    internal static string get_Xdom_Ent_Innertext();
    internal static string get_Xdom_EntRef_SetVal();
    internal static string get_Xdom_WS_Char();
    internal static string get_Xdom_Node_SetVal();
    internal static string get_Xdom_Empty_LocalName();
    internal static string get_Xdom_Set_InnerXml();
    internal static string get_Xdom_Attr_InUse();
    internal static string get_Xdom_Enum_ElementList();
    internal static string get_Xdom_Invalid_NT_String();
    internal static string get_Xdom_InvalidCharacter_EntityReference();
    internal static string get_Xdom_IndexOutOfRange();
    internal static string get_Xdom_Document_Innertext();
    internal static string get_Arg_ExpectingXmlTextReader();
    internal static string get_Arg_CannotCreateNode();
    internal static string get_Arg_IncompatibleParamType();
    internal static string get_XmlNonCLSCompliantException();
    internal static string get_Xml_UnsupportedClass();
    internal static string get_Xml_NullResolver();
    internal static string get_Xml_RelativeUriNotSupported();
    internal static string get_Xml_UnexpectedNodeType();
    internal static string get_Xml_InvalidOperation();
    internal static string get_Xdom_Load_NoDocument();
    internal static string get_Xdom_Load_NoReader();
    internal static string get_Xml_UndeclaredParEntity();
    internal static string get_Xml_EmptyName();
    internal static string get_Xml_BadStartNameChar();
    internal static string get_Xml_BadNameChar();
    internal static string get_Xml_UntrustedCodeSettingResolver();
    internal static string get_Xml_InvalidSurrogateHighChar();
    internal static string get_Xml_InvalidSurrogateMissingLowChar();
    internal static string get_Xml_InvalidSurrogatePairWithArgs();
    internal static string get_Xml_NotInWriteState();
    internal static string get_Xml_InvalidIndentation();
    internal static string get_Xml_InvalidQuote();
    internal static string get_Xml_NoRoot();
    internal static string get_Xml_UndefPrefix();
    internal static string get_Xml_NoNamespaces();
    internal static string get_Xml_XmlnsBelongsToReservedNs();
    internal static string get_Xml_SurrogatePairSplit();
    internal static string get_Xml_ClosedOrError();
    internal static string get_Xml_InvalidCDataChars();
    internal static string get_Xml_InvalidCommentChars();
    internal static string get_Xml_InvalidPiChars();
    internal static string get_Xml_DupXmlDecl();
    internal static string get_Xml_NonWhitespace();
    internal static string get_Xml_UndefNamespace();
    internal static string get_Xml_InvalidNameCharsDetail();
    internal static string get_Xml_NotTheFirst();
    internal static string get_Xml_Closed();
    internal static string get_Xml_WrongToken();
    internal static string get_Xml_NoStartTag();
    internal static string get_Xml_CanNotBindToReservedNamespace();
    internal static string get_Xml_InvalidNameChars();
    internal static string get_Xml_PrefixForEmptyNs();
    internal static string get_Xml_InvalidXmlSpace();
    internal static string get_Xml_InvalidPrefix();
    internal static string get_XmlConvert_BadFormat();
    internal static string get_Xml_InvalidCharacter();
    internal static Type get_ResourceType();
}
internal abstract class System.Xml.Base64Encoder : object {
    private Byte[] leftOverBytes;
    private int leftOverBytesCount;
    private Char[] charsLine;
    internal static int Base64LineSize;
    internal static int LineSizeInBytes;
    internal abstract virtual void WriteChars(Char[] chars, int index, int count);
    internal void Encode(Byte[] buffer, int index, int count);
    internal void Flush();
}
internal static class System.Xml.BinHexEncoder : object {
    private static string s_hexDigits;
    private static int CharsChunkSize;
    internal static void Encode(Byte[] buffer, int index, int count, XmlWriter writer);
    internal static string Encode(Byte[] inArray, int offsetIn, int count);
    private static int Encode(Byte[] inArray, int offsetIn, int count, Char[] outArray);
}
[DebuggerDisplayAttribute("{ToString()}")]
internal class System.Xml.DebuggerDisplayXmlNodeProxy : ValueType {
    private XmlNode _node;
    public DebuggerDisplayXmlNodeProxy(XmlNode node);
    public virtual string ToString();
}
internal class System.Xml.DomNameTable : object {
    private XmlName[] _entries;
    private int _count;
    private int _mask;
    private XmlDocument _ownerDocument;
    private XmlNameTable _nameTable;
    private static int InitialSize;
    public DomNameTable(XmlDocument document);
    public XmlName GetName(string prefix, string localName, string ns);
    public XmlName AddName(string prefix, string localName, string ns);
    private void Grow();
}
internal class System.Xml.EmptyEnumerator : object {
    private object System.Collections.IEnumerator.Current { get; }
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
}
internal enum System.Xml.ExceptionType : Enum {
    public int value__;
    public static ExceptionType ArgumentException;
    public static ExceptionType XmlException;
}
internal enum System.Xml.Formatting : Enum {
    public int value__;
    public static Formatting None;
    public static Formatting Indented;
}
internal static class System.Xml.Ref : object {
    public static bool Equal(string strA, string strB);
    public static void Equals(object objA, object objB);
}
internal class System.Xml.SecureStringHasher : object {
    private int hashCodeRandomizer;
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string key);
}
internal static class System.Xml.ValidateNames : object {
    private static XmlCharType xmlCharType;
    private static ValidateNames();
    internal static int ParseNmtoken(string s, int offset);
    internal static int ParseNmtokenNoNamespaces(string s, int offset);
    internal static bool IsNmtokenNoNamespaces(string s);
    internal static int ParseNameNoNamespaces(string s, int offset);
    internal static bool IsNameNoNamespaces(string s);
    internal static int ParseNCName(string s, int offset);
    internal static int ParseNCName(string s);
    internal static int ParseQName(string s, int offset, Int32& colonOffset);
    internal static void ParseQNameThrow(string s, String& prefix, String& localName);
    internal static void ThrowInvalidName(string s, int offsetStartChar, int offsetBadChar);
    internal static void SplitQName(string name, String& prefix, String& lname);
}
public class System.Xml.XmlAttribute : XmlNode {
    private XmlName _name;
    private XmlLinkedNode _lastChild;
    internal int LocalNameHash { get; }
    internal XmlName XmlName { get; }
    public XmlNode ParentNode { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; public set; }
    public XmlNodeType NodeType { get; }
    public XmlDocument OwnerDocument { get; }
    public string Value { get; public set; }
    unknown string InnerText {public set; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public bool Specified { get; }
    public XmlElement OwnerElement { get; }
    unknown string InnerXml {public set; }
    public string BaseURI { get; }
    internal XmlSpace XmlSpace { get; }
    internal string XmlLang { get; }
    internal XmlAttribute(XmlName name, XmlDocument doc);
    protected internal XmlAttribute(string prefix, string localName, string namespaceURI, XmlDocument doc);
    internal int get_LocalNameHash();
    internal XmlName get_XmlName();
    public virtual XmlNode CloneNode(bool deep);
    public virtual XmlNode get_ParentNode();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlDocument get_OwnerDocument();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual void set_InnerText(string value);
    internal bool PrepareOwnerElementInElementIdAttrMap();
    internal void ResetOwnerElementInElementIdAttrMap(string oldInnerText);
    internal virtual bool get_IsContainer();
    internal virtual XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc);
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    public virtual bool get_Specified();
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual XmlNode RemoveChild(XmlNode oldChild);
    public virtual XmlNode PrependChild(XmlNode newChild);
    public virtual XmlNode AppendChild(XmlNode newChild);
    public virtual XmlElement get_OwnerElement();
    public virtual void set_InnerXml(string value);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual string get_BaseURI();
    internal virtual void SetParent(XmlNode node);
    internal virtual XmlSpace get_XmlSpace();
    internal virtual string get_XmlLang();
}
[DefaultMemberAttribute("ItemOf")]
public class System.Xml.XmlAttributeCollection : XmlNamedNodeMap {
    public XmlAttribute ItemOf { get; }
    public XmlAttribute ItemOf { get; }
    public XmlAttribute ItemOf { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private int System.Collections.ICollection.Count { get; }
    internal XmlAttributeCollection(XmlNode parent);
    public XmlAttribute get_ItemOf(int i);
    public XmlAttribute get_ItemOf(string name);
    public XmlAttribute get_ItemOf(string localName, string namespaceURI);
    internal int FindNodeOffset(XmlAttribute node);
    public virtual XmlNode SetNamedItem(XmlNode node);
    public XmlAttribute Prepend(XmlAttribute node);
    public XmlAttribute Append(XmlAttribute node);
    public XmlAttribute InsertBefore(XmlAttribute newNode, XmlAttribute refNode);
    public XmlAttribute InsertAfter(XmlAttribute newNode, XmlAttribute refNode);
    public XmlAttribute Remove(XmlAttribute node);
    public XmlAttribute RemoveAt(int i);
    public void RemoveAll();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    public void CopyTo(XmlAttribute[] array, int index);
    internal virtual XmlNode AddNode(XmlNode node);
    internal virtual XmlNode InsertNodeAt(int i, XmlNode node);
    internal virtual XmlNode RemoveNodeAt(int i);
    internal void Detach(XmlAttribute attr);
    internal void InsertParentIntoElementIdAttrMap(XmlAttribute attr);
    internal void RemoveParentFromElementIdAttrMap(XmlAttribute attr);
    internal int RemoveDuplicateAttribute(XmlAttribute attr);
    internal void ResetParentInElementIdAttrMap(string oldVal, string newVal);
    internal XmlAttribute InternalAppendAttribute(XmlAttribute node);
}
public class System.Xml.XmlCDataSection : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    protected internal XmlCDataSection(string data, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
}
public abstract class System.Xml.XmlCharacterData : XmlLinkedNode {
    private string _data;
    public string Value { get; public set; }
    public string InnerText { get; public set; }
    public string Data { get; public set; }
    public int Length { get; }
    protected internal XmlCharacterData(string data, XmlDocument doc);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_Data();
    public virtual void set_Data(string value);
    public virtual int get_Length();
    public virtual string Substring(int offset, int count);
    public virtual void AppendData(string strData);
    public virtual void InsertData(int offset, string strData);
    public virtual void DeleteData(int offset, int count);
    public virtual void ReplaceData(int offset, int count, string strData);
    internal bool CheckOnData(string data);
}
internal class System.Xml.XmlCharType : ValueType {
    internal static int SurHighStart;
    internal static int SurHighEnd;
    internal static int SurLowStart;
    internal static int SurLowEnd;
    internal static int SurMask;
    internal static int fWhitespace;
    internal static int fLetter;
    internal static int fNCStartNameSC;
    internal static int fNCNameSC;
    internal static int fCharData;
    internal static int fNCNameXml4e;
    internal static int fText;
    internal static int fAttrValue;
    private static string s_PublicIdBitmap;
    private static UInt32 CharPropertiesSize;
    internal static string s_Whitespace;
    private static string s_NCStartName;
    private static string s_NCName;
    private static string s_CharData;
    private static string s_PublicID;
    private static string s_Text;
    private static string s_AttrValue;
    private static string s_LetterXml4e;
    private static string s_NCNameXml4e;
    private static object s_Lock;
    private static Byte[] modreq(System.Runtime.CompilerServices.IsVolatile) s_CharProperties;
    internal Byte[] charProperties;
    private static object StaticLock { get; }
    public static XmlCharType Instance { get; }
    private XmlCharType(Byte[] charProperties);
    private static object get_StaticLock();
    private static void InitInstance();
    private static void SetProperties(Byte[] chProps, string ranges, byte value);
    public static XmlCharType get_Instance();
    public bool IsWhiteSpace(char ch);
    public bool IsNCNameSingleChar(char ch);
    public bool IsStartNCNameSingleChar(char ch);
    public bool IsNameSingleChar(char ch);
    public bool IsStartNameSingleChar(char ch);
    public bool IsCharData(char ch);
    public bool IsPubidChar(char ch);
    internal bool IsTextChar(char ch);
    internal bool IsAttributeValueChar(char ch);
    public bool IsLetter(char ch);
    public bool IsNCNameCharXml4e(char ch);
    public bool IsStartNCNameCharXml4e(char ch);
    public bool IsNameCharXml4e(char ch);
    public bool IsStartNameCharXml4e(char ch);
    public static bool IsDigit(char ch);
    internal static bool IsHighSurrogate(int ch);
    internal static bool IsLowSurrogate(int ch);
    internal static bool IsSurrogate(int ch);
    internal static int CombineSurrogateChar(int lowChar, int highChar);
    internal bool IsOnlyWhitespace(string str);
    internal int IsOnlyWhitespaceWithPos(string str);
    internal int IsOnlyCharData(string str);
    internal static bool IsOnlyDigits(string str, int startPos, int len);
    internal int IsPublicId(string str);
    private static bool InRange(int value, int start, int end);
}
internal class System.Xml.XmlChildEnumerator : object {
    internal XmlNode container;
    internal XmlNode child;
    internal bool isFirst;
    private object System.Collections.IEnumerator.Current { get; }
    internal XmlNode Current { get; }
    internal XmlChildEnumerator(XmlNode container);
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    internal bool MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    internal XmlNode get_Current();
}
internal class System.Xml.XmlChildNodes : XmlNodeList {
    private XmlNode _container;
    public int Count { get; }
    public XmlChildNodes(XmlNode container);
    public virtual XmlNode Item(int i);
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
}
public class System.Xml.XmlComment : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    protected internal XmlComment(string comment, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
}
internal static class System.Xml.XmlConst : object {
    internal static string ReservedNsXml;
    internal static string ReservedNsXmlNs;
    internal static string ReservedNsDataType;
    internal static string ReservedNsDataTypeAlias;
    internal static string ReservedNsDataTypeOld;
    internal static string ReservedNsMsxsl;
    internal static string ReservedNsXdr;
    internal static string ReservedNsXslDebug;
    internal static string ReservedNsXdrAlias;
    internal static string ReservedNsWdXsl;
    internal static string ReservedNsXs;
    internal static string ReservedNsXsd;
    internal static string ReservedNsXsi;
    internal static string ReservedNsXslt;
    internal static string ReservedNsExsltCommon;
    internal static string ReservedNsExsltDates;
    internal static string ReservedNsExsltMath;
    internal static string ReservedNsExsltRegExps;
    internal static string ReservedNsExsltSets;
    internal static string ReservedNsExsltStrings;
    internal static string ReservedNsXQueryFunc;
    internal static string ReservedNsXQueryDataType;
    internal static string ReservedNsCollationBase;
    internal static string ReservedNsCollCodePoint;
    internal static string ReservedNsXsltInternal;
    public static string NsXml;
    public static string NsXmlNs;
    public static string AttrLang;
    public static string AttrSpace;
    public static string AttrSpaceValueDefault;
    public static string AttrSpaceValuePreserve;
    public static string AttrXmlLang;
    public static string XmlDeclarationTag;
}
internal static class System.Xml.XmlConvertEx : object {
    private static XmlCharType xmlCharType;
    private static Char[] WhitespaceChars;
    private static XmlConvertEx();
    public static double ToXPathDouble(object o);
    public static double XPathRound(double value);
    public static string TrimString(string value);
    public static String[] SplitString(string value);
    public static Uri ToUri(string s);
    public static string EscapeValueForDebuggerDisplay(string value);
    public static Exception CreateInvalidSurrogatePairException(char low, char hi);
    private static Exception CreateInvalidSurrogatePairException(char low, char hi, ExceptionType exceptionType);
    private static Exception CreateInvalidSurrogatePairException(char low, char hi, ExceptionType exceptionType, int lineNo, int linePos);
    private static Exception CreateException(string res, String[] args, ExceptionType exceptionType, int lineNo, int linePos);
    private static Exception CreateException(string res, string arg, ExceptionType exceptionType, int lineNo, int linePos);
    private static Exception CreateException(string res, ExceptionType exceptionType, int lineNo, int linePos);
    public static Exception CreateInvalidCharException(string data, int invCharPos, ExceptionType exceptionType);
    public static Exception CreateInvalidHighSurrogateCharException(char hi);
    private static Exception CreateInvalidHighSurrogateCharException(char hi, ExceptionType exceptionType);
    private static Exception CreateInvalidHighSurrogateCharException(char hi, ExceptionType exceptionType, int lineNo, int linePos);
    public static void VerifyCharData(string data, ExceptionType exceptionType);
    public static void VerifyCharData(string data, ExceptionType invCharExceptionType, ExceptionType invSurrogateExceptionType);
    public static string VerifyQName(string name, ExceptionType exceptionType);
    public static string TrimStringStart(string value);
    public static string TrimStringEnd(string value);
}
public class System.Xml.XmlDeclaration : XmlLinkedNode {
    private static string YES;
    private static string NO;
    private string _version;
    private string _encoding;
    private string _standalone;
    public string Version { get; internal set; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public string Value { get; public set; }
    public string InnerText { get; public set; }
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    protected internal XmlDeclaration(string version, string encoding, string standalone, XmlDocument doc);
    public string get_Version();
    internal void set_Version(string value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public string get_Standalone();
    public void set_Standalone(string value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    private bool IsValidXmlVersion(string ver);
}
public class System.Xml.XmlDocument : XmlNode {
    private XmlImplementation _implementation;
    private DomNameTable _domNameTable;
    private XmlLinkedNode _lastChild;
    private XmlNamedNodeMap _entities;
    private Dictionary`2<string, List`1<WeakReference`1<XmlElement>>> _htElementIdMap;
    private bool _actualLoadingStatus;
    private XmlNodeChangedEventHandler _onNodeInsertingDelegate;
    private XmlNodeChangedEventHandler _onNodeInsertedDelegate;
    private XmlNodeChangedEventHandler _onNodeRemovingDelegate;
    private XmlNodeChangedEventHandler _onNodeRemovedDelegate;
    private XmlNodeChangedEventHandler _onNodeChangingDelegate;
    private XmlNodeChangedEventHandler _onNodeChangedDelegate;
    internal bool fEntRefNodesPresent;
    internal bool fCDataNodesPresent;
    private bool _preserveWhitespace;
    private bool _isLoading;
    internal string strDocumentName;
    internal string strDocumentFragmentName;
    internal string strCommentName;
    internal string strTextName;
    internal string strCDataSectionName;
    internal string strEntityName;
    internal string strID;
    internal string strXmlns;
    internal string strXml;
    internal string strSpace;
    internal string strLang;
    internal string strEmpty;
    internal string strNonSignificantWhitespaceName;
    internal string strSignificantWhitespaceName;
    internal string strReservedXmlns;
    internal string strReservedXml;
    internal string baseURI;
    internal object objLock;
    internal static EmptyEnumerator EmptyEnumerator;
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    internal XmlDocumentType DocumentType { get; }
    internal XmlDeclaration Declaration { get; }
    public XmlImplementation Implementation { get; }
    public string Name { get; }
    public string LocalName { get; }
    public XmlElement DocumentElement { get; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public XmlDocument OwnerDocument { get; }
    public XmlNameTable NameTable { get; }
    public bool PreserveWhitespace { get; public set; }
    public bool IsReadOnly { get; }
    internal XmlNamedNodeMap Entities { get; }
    internal bool IsLoading { get; internal set; }
    internal bool ActualLoadingStatus { get; }
    internal Encoding TextEncoding { get; }
    unknown string InnerText {public set; }
    public string InnerXml { get; public set; }
    internal string Standalone { get; }
    public string BaseURI { get; }
    public XmlDocument(XmlNameTable nt);
    protected internal XmlDocument(XmlImplementation imp);
    private static XmlDocument();
    internal static void CheckName(string name);
    internal XmlName AddXmlName(string prefix, string localName, string namespaceURI);
    internal XmlName GetXmlName(string prefix, string localName, string namespaceURI);
    internal XmlName AddAttrXmlName(string prefix, string localName, string namespaceURI);
    internal XmlName GetIDInfoByElement(XmlName eleName);
    private WeakReference`1<XmlElement> GetElement(List`1<WeakReference`1<XmlElement>> elementList, XmlElement elem);
    internal void AddElementWithId(string id, XmlElement elem);
    internal void RemoveElementWithId(string id, XmlElement elem);
    public virtual XmlNode CloneNode(bool deep);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    internal virtual XmlDocumentType get_DocumentType();
    internal virtual XmlDeclaration get_Declaration();
    public XmlImplementation get_Implementation();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public XmlElement get_DocumentElement();
    internal virtual bool get_IsContainer();
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    public virtual XmlDocument get_OwnerDocument();
    internal virtual bool IsValidChildType(XmlNodeType type);
    private bool HasNodeTypeInPrevSiblings(XmlNodeType nt, XmlNode refNode);
    private bool HasNodeTypeInNextSiblings(XmlNodeType nt, XmlNode refNode);
    internal virtual bool CanInsertBefore(XmlNode newChild, XmlNode refChild);
    internal virtual bool CanInsertAfter(XmlNode newChild, XmlNode refChild);
    public XmlAttribute CreateAttribute(string name);
    internal void SetDefaultNamespace(string prefix, string localName, String& namespaceURI);
    public virtual XmlCDataSection CreateCDataSection(string data);
    public virtual XmlComment CreateComment(string data);
    internal virtual XmlDocumentType CreateDocumentType(string name, string publicId, string systemId, string internalSubset);
    public virtual XmlDocumentFragment CreateDocumentFragment();
    public XmlElement CreateElement(string name);
    internal virtual XmlEntityReference CreateEntityReference(string name);
    public virtual XmlProcessingInstruction CreateProcessingInstruction(string target, string data);
    public virtual XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone);
    public virtual XmlText CreateTextNode(string text);
    public virtual XmlSignificantWhitespace CreateSignificantWhitespace(string text);
    public virtual XmlWhitespace CreateWhitespace(string text);
    public virtual XmlNodeList GetElementsByTagName(string name);
    public XmlAttribute CreateAttribute(string qualifiedName, string namespaceURI);
    public XmlElement CreateElement(string qualifiedName, string namespaceURI);
    public virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI);
    internal virtual XmlElement GetElementById(string elementId);
    public virtual XmlNode ImportNode(XmlNode node, bool deep);
    private XmlNode ImportNodeInternal(XmlNode node, bool deep);
    private void ImportAttributes(XmlNode fromElem, XmlNode toElem);
    private void ImportChildren(XmlNode fromNode, XmlNode toNode, bool deep);
    public XmlNameTable get_NameTable();
    public virtual XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI);
    internal virtual XmlAttribute CreateDefaultAttribute(string prefix, string localName, string namespaceURI);
    public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI);
    public bool get_PreserveWhitespace();
    public void set_PreserveWhitespace(bool value);
    public virtual bool get_IsReadOnly();
    internal XmlNamedNodeMap get_Entities();
    internal bool get_IsLoading();
    internal void set_IsLoading(bool value);
    internal bool get_ActualLoadingStatus();
    public virtual XmlNode CreateNode(XmlNodeType type, string prefix, string name, string namespaceURI);
    public virtual XmlNode CreateNode(string nodeTypeString, string name, string namespaceURI);
    public virtual XmlNode CreateNode(XmlNodeType type, string name, string namespaceURI);
    public virtual XmlNode ReadNode(XmlReader reader);
    internal XmlNodeType ConvertToNodeType(string nodeTypeString);
    public virtual void Load(Stream inStream);
    public virtual void Load(TextReader txtReader);
    public virtual void Load(XmlReader reader);
    public virtual void LoadXml(string xml);
    internal Encoding get_TextEncoding();
    public virtual void set_InnerText(string value);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual void Save(Stream outStream);
    public virtual void Save(TextWriter writer);
    public virtual void Save(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter xw);
    public void add_NodeInserting(XmlNodeChangedEventHandler value);
    public void remove_NodeInserting(XmlNodeChangedEventHandler value);
    public void add_NodeInserted(XmlNodeChangedEventHandler value);
    public void remove_NodeInserted(XmlNodeChangedEventHandler value);
    public void add_NodeRemoving(XmlNodeChangedEventHandler value);
    public void remove_NodeRemoving(XmlNodeChangedEventHandler value);
    public void add_NodeRemoved(XmlNodeChangedEventHandler value);
    public void remove_NodeRemoved(XmlNodeChangedEventHandler value);
    public void add_NodeChanging(XmlNodeChangedEventHandler value);
    public void remove_NodeChanging(XmlNodeChangedEventHandler value);
    public void add_NodeChanged(XmlNodeChangedEventHandler value);
    public void remove_NodeChanged(XmlNodeChangedEventHandler value);
    internal virtual XmlNodeChangedEventArgs GetEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action);
    internal XmlNodeChangedEventArgs GetInsertEventArgsForLoad(XmlNode node, XmlNode newParent);
    internal virtual void BeforeEvent(XmlNodeChangedEventArgs args);
    internal virtual void AfterEvent(XmlNodeChangedEventArgs args);
    internal XmlAttribute GetDefaultAttribute(XmlElement elem, string attrPrefix, string attrLocalname, string attrNamespaceURI);
    internal string get_Standalone();
    internal XmlEntity GetEntityNode(string name);
    public virtual string get_BaseURI();
    internal void SetBaseURI(string inBaseURI);
    internal virtual XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc);
}
public class System.Xml.XmlDocumentFragment : XmlNode {
    private XmlLinkedNode _lastChild;
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlDocument OwnerDocument { get; }
    public string InnerXml { get; public set; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    protected internal XmlDocumentFragment(XmlDocument ownerDocument);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlDocument get_OwnerDocument();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual XmlNode CloneNode(bool deep);
    internal virtual bool get_IsContainer();
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    internal virtual bool CanInsertAfter(XmlNode newChild, XmlNode refChild);
    internal virtual bool CanInsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
}
internal class System.Xml.XmlDocumentType : XmlLinkedNode {
    private string _name;
    private string _publicId;
    private string _systemId;
    private string _internalSubset;
    private XmlNamedNodeMap _entities;
    private XmlNamedNodeMap _notations;
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public bool IsReadOnly { get; }
    public XmlNamedNodeMap Entities { get; }
    public XmlNamedNodeMap Notations { get; }
    public string PublicId { get; }
    public string SystemId { get; }
    public string InternalSubset { get; }
    protected internal XmlDocumentType(string name, string publicId, string systemId, string internalSubset, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual bool get_IsReadOnly();
    public XmlNamedNodeMap get_Entities();
    public XmlNamedNodeMap get_Notations();
    public string get_PublicId();
    public string get_SystemId();
    public string get_InternalSubset();
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
}
internal class System.Xml.XmlDOMTextWriter : XmlTextWriter {
    public XmlDOMTextWriter(Stream w, Encoding encoding);
    public XmlDOMTextWriter(TextWriter w);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
}
public class System.Xml.XmlElement : XmlLinkedNode {
    private XmlName _name;
    private XmlAttributeCollection _attributes;
    private XmlLinkedNode _lastChild;
    internal XmlName XmlName { get; internal set; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; public set; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlDocument OwnerDocument { get; }
    internal bool IsContainer { get; }
    public bool IsEmpty { get; public set; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public XmlAttributeCollection Attributes { get; }
    public bool HasAttributes { get; }
    public string InnerXml { get; public set; }
    public string InnerText { get; public set; }
    public XmlNode NextSibling { get; }
    internal XmlElement(XmlName name, bool empty, XmlDocument doc);
    protected internal XmlElement(string prefix, string localName, string namespaceURI, XmlDocument doc);
    internal XmlName get_XmlName();
    internal void set_XmlName(XmlName value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlDocument get_OwnerDocument();
    internal virtual bool get_IsContainer();
    internal virtual XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc);
    public bool get_IsEmpty();
    public void set_IsEmpty(bool value);
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    public virtual XmlAttributeCollection get_Attributes();
    public virtual bool get_HasAttributes();
    public virtual string GetAttribute(string name);
    public virtual void SetAttribute(string name, string value);
    public virtual void RemoveAttribute(string name);
    public virtual XmlAttribute GetAttributeNode(string name);
    public virtual XmlAttribute SetAttributeNode(XmlAttribute newAttr);
    public virtual XmlAttribute RemoveAttributeNode(XmlAttribute oldAttr);
    public virtual XmlNodeList GetElementsByTagName(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string SetAttribute(string localName, string namespaceURI, string value);
    public virtual void RemoveAttribute(string localName, string namespaceURI);
    public virtual XmlAttribute GetAttributeNode(string localName, string namespaceURI);
    public virtual XmlAttribute SetAttributeNode(string localName, string namespaceURI);
    public virtual XmlAttribute RemoveAttributeNode(string localName, string namespaceURI);
    public virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI);
    public virtual bool HasAttribute(string name);
    public virtual bool HasAttribute(string localName, string namespaceURI);
    public virtual void WriteTo(XmlWriter w);
    private static void WriteElementTo(XmlWriter writer, XmlElement e);
    private void WriteStartElement(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual XmlNode RemoveAttributeAt(int i);
    public virtual void RemoveAllAttributes();
    public virtual void RemoveAll();
    internal void RemoveAllChildren();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual XmlNode get_NextSibling();
    internal virtual void SetParent(XmlNode node);
    internal virtual string GetXPAttribute(string localName, string ns);
}
internal class System.Xml.XmlElementList : XmlNodeList {
    private string _asterisk;
    private int _changeCount;
    private string _name;
    private string _localName;
    private string _namespaceURI;
    private XmlNode _rootNode;
    private int _curInd;
    private XmlNode _curElem;
    private bool _empty;
    private bool _atomized;
    private int _matchCount;
    private WeakReference _listener;
    internal int ChangeCount { get; }
    public int Count { get; }
    private XmlElementList(XmlNode parent);
    internal XmlElementList(XmlNode parent, string name);
    internal XmlElementList(XmlNode parent, string localName, string namespaceURI);
    protected virtual override void Finalize();
    internal void ConcurrencyCheck(XmlNodeChangedEventArgs args);
    internal int get_ChangeCount();
    private XmlNode NextElemInPreOrder(XmlNode curNode);
    private XmlNode PrevElemInPreOrder(XmlNode curNode);
    private bool IsMatch(XmlNode curNode);
    private XmlNode GetMatchingNode(XmlNode n, bool bNext);
    private XmlNode GetNthMatchingNode(XmlNode n, bool bNext, int nCount);
    public XmlNode GetNextNode(XmlNode n);
    public virtual XmlNode Item(int index);
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
    protected virtual void PrivateDisposeNodeList();
    protected virtual void Dispose(bool disposing);
}
internal class System.Xml.XmlElementListEnumerator : object {
    private XmlElementList _list;
    private XmlNode _curElem;
    private int _changeCount;
    public object Current { get; }
    public XmlElementListEnumerator(XmlElementList list);
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual object get_Current();
}
internal class System.Xml.XmlElementListListener : object {
    private WeakReference _elemList;
    private XmlDocument _doc;
    private XmlNodeChangedEventHandler _nodeChangeHandler;
    internal XmlElementListListener(XmlDocument doc, XmlElementList elemList);
    private void OnListChanged(object sender, XmlNodeChangedEventArgs args);
    internal void Unregister();
}
internal class System.Xml.XmlEmptyElementListEnumerator : object {
    public object Current { get; }
    public XmlEmptyElementListEnumerator(XmlElementList list);
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual object get_Current();
}
internal class System.Xml.XmlEntity : XmlNode {
    private string _publicId;
    private string _systemId;
    private string _notationName;
    private string _name;
    private string _unparsedReplacementStr;
    private string _baseURI;
    private XmlLinkedNode _lastChild;
    private bool _childrenFoliating;
    public bool IsReadOnly { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string InnerText { get; public set; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public XmlNodeType NodeType { get; }
    public string SystemId { get; }
    public string OuterXml { get; }
    public string InnerXml { get; public set; }
    public string BaseURI { get; }
    internal XmlEntity(string name, string strdata, string publicId, string systemId, string notationName, XmlDocument doc);
    public virtual XmlNode CloneNode(bool deep);
    public virtual bool get_IsReadOnly();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    internal virtual bool get_IsContainer();
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    public virtual XmlNodeType get_NodeType();
    public string get_SystemId();
    public virtual string get_OuterXml();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual string get_BaseURI();
    internal void SetBaseURI(string inBaseURI);
}
internal class System.Xml.XmlEntityReference : XmlLinkedNode {
    private string _name;
    private XmlLinkedNode _lastChild;
    public string Name { get; }
    public string LocalName { get; }
    public string Value { get; public set; }
    public XmlNodeType NodeType { get; }
    public bool IsReadOnly { get; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public string BaseURI { get; }
    internal string ChildBaseURI { get; }
    protected internal XmlEntityReference(string name, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual bool get_IsReadOnly();
    internal virtual bool get_IsContainer();
    internal virtual void SetParent(XmlNode node);
    internal virtual void SetParentForLoad(XmlNode node);
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual string get_BaseURI();
    private string ConstructBaseURI(string baseURI, string systemId);
    internal string get_ChildBaseURI();
}
internal class System.Xml.XmlExceptionHelper : object {
    internal static String[] BuildCharExceptionArgs(string data, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(Char[] data, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(Char[] data, int length, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(char invChar, char nextChar);
}
public class System.Xml.XmlImplementation : object {
    private XmlNameTable _nameTable;
    internal XmlNameTable NameTable { get; }
    public XmlImplementation(XmlNameTable nt);
    public bool HasFeature(string strFeature, string strVersion);
    public virtual XmlDocument CreateDocument();
    internal XmlNameTable get_NameTable();
}
public abstract class System.Xml.XmlLinkedNode : XmlNode {
    internal XmlLinkedNode next;
    public XmlNode PreviousSibling { get; }
    public XmlNode NextSibling { get; }
    internal XmlLinkedNode(XmlDocument doc);
    public virtual XmlNode get_PreviousSibling();
    public virtual XmlNode get_NextSibling();
}
internal class System.Xml.XmlLoader : object {
    private XmlDocument _doc;
    private XmlReader _reader;
    private bool _preserveWhitespace;
    internal void Load(XmlDocument doc, XmlReader reader, bool preserveWhitespace);
    private void LoadDocSequence(XmlDocument parentDoc);
    internal XmlNode ReadCurrentNode(XmlDocument doc, XmlReader reader);
    private XmlNode LoadNode(bool skipOverWhitespace);
    private XmlAttribute LoadAttributeNode();
    private XmlAttribute LoadDefaultAttribute();
    private void LoadAttributeValue(XmlNode parent, bool direct);
    private XmlEntityReference LoadEntityReferenceNode(bool direct);
    private XmlDeclaration LoadDeclarationNode();
    private XmlDocumentType LoadDocumentTypeNode();
    private XmlNode LoadNodeDirect();
    private XmlAttribute LoadAttributeNodeDirect();
    private XmlParserContext GetContext(XmlNode node);
    internal XmlNamespaceManager ParsePartialContent(XmlNode parentNode, string innerxmltext, XmlNodeType nt);
    internal void LoadInnerXmlElement(XmlElement node, string innerxmltext);
    internal void LoadInnerXmlAttribute(XmlAttribute node, string innerxmltext);
    private void RemoveDuplicateNamespace(XmlElement elem, XmlNamespaceManager mgr, bool fCheckElemAttrs);
    private string EntitizeName(string name);
    internal void ExpandEntity(XmlEntity ent);
    internal void ExpandEntityReference(XmlEntityReference eref);
    private XmlReader CreateInnerXmlReader(string xmlFragment, XmlNodeType nt, XmlParserContext context, XmlDocument doc);
    internal static Exception UnexpectedNodeType(XmlNodeType nodetype);
}
internal class System.Xml.XmlName : object {
    private string _prefix;
    private string _localName;
    private string _ns;
    private string _name;
    private int _hashCode;
    internal XmlDocument ownerDoc;
    internal XmlName next;
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public int HashCode { get; }
    public XmlDocument OwnerDocument { get; }
    public string Name { get; }
    public bool IsDefault { get; }
    public bool IsNil { get; }
    internal XmlName(string prefix, string localName, string ns, int hashCode, XmlDocument ownerDoc, XmlName next);
    public static XmlName Create(string prefix, string localName, string ns, int hashCode, XmlDocument ownerDoc, XmlName next);
    public string get_LocalName();
    public string get_NamespaceURI();
    public string get_Prefix();
    public int get_HashCode();
    public XmlDocument get_OwnerDocument();
    public string get_Name();
    public virtual bool get_IsDefault();
    public virtual bool get_IsNil();
}
public class System.Xml.XmlNamedNodeMap : object {
    internal XmlNode parent;
    internal SmallXmlNodeList nodes;
    public int Count { get; }
    internal XmlNamedNodeMap(XmlNode parent);
    public virtual XmlNode GetNamedItem(string name);
    public virtual XmlNode SetNamedItem(XmlNode node);
    public virtual XmlNode RemoveNamedItem(string name);
    public virtual int get_Count();
    public virtual XmlNode Item(int index);
    public virtual XmlNode GetNamedItem(string localName, string namespaceURI);
    public virtual XmlNode RemoveNamedItem(string localName, string namespaceURI);
    public virtual IEnumerator GetEnumerator();
    internal int FindNodeOffset(string name);
    internal int FindNodeOffset(string localName, string namespaceURI);
    internal virtual XmlNode AddNode(XmlNode node);
    internal virtual XmlNode AddNodeForLoad(XmlNode node, XmlDocument doc);
    internal virtual XmlNode RemoveNodeAt(int i);
    internal XmlNode ReplaceNodeAt(int i, XmlNode node);
    internal virtual XmlNode InsertNodeAt(int i, XmlNode node);
}
internal static class System.Xml.XmlNameHelper : object {
    public static int GetHashCode(string name);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
public abstract class System.Xml.XmlNode : object {
    internal XmlNode parentNode;
    public string Name { get; }
    public string Value { get; public set; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlNodeList ChildNodes { get; }
    public XmlNode PreviousSibling { get; }
    public XmlNode NextSibling { get; }
    public XmlAttributeCollection Attributes { get; }
    public XmlDocument OwnerDocument { get; }
    public XmlNode FirstChild { get; }
    public XmlNode LastChild { get; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public bool HasChildNodes { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; public set; }
    public string LocalName { get; }
    public bool IsReadOnly { get; }
    public string InnerText { get; public set; }
    public string OuterXml { get; }
    public string InnerXml { get; public set; }
    public string BaseURI { get; }
    internal XmlDocument Document { get; }
    public XmlElement Item { get; }
    public XmlElement Item { get; }
    internal XmlSpace XmlSpace { get; }
    internal string XmlLang { get; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    private object debuggerDisplayProxy { get; }
    internal XmlNode(XmlDocument doc);
    public abstract virtual string get_Name();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public abstract virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNodeList get_ChildNodes();
    public virtual XmlNode get_PreviousSibling();
    public virtual XmlNode get_NextSibling();
    public virtual XmlAttributeCollection get_Attributes();
    public virtual XmlDocument get_OwnerDocument();
    public virtual XmlNode get_FirstChild();
    public virtual XmlNode get_LastChild();
    internal virtual bool get_IsContainer();
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal bool AncestorNode(XmlNode node);
    internal bool IsConnected();
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual XmlNode RemoveChild(XmlNode oldChild);
    public virtual XmlNode PrependChild(XmlNode newChild);
    public virtual XmlNode AppendChild(XmlNode newChild);
    internal virtual XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc);
    internal virtual bool IsValidChildType(XmlNodeType type);
    internal virtual bool CanInsertBefore(XmlNode newChild, XmlNode refChild);
    internal virtual bool CanInsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual bool get_HasChildNodes();
    public abstract virtual XmlNode CloneNode(bool deep);
    internal virtual void CopyChildren(XmlDocument doc, XmlNode container, bool deep);
    public virtual void Normalize();
    private XmlNode NormalizeWinner(XmlNode firstNode, XmlNode secondNode);
    public virtual bool Supports(string feature, string version);
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public abstract virtual string get_LocalName();
    public virtual bool get_IsReadOnly();
    internal static bool HasReadOnlyParent(XmlNode n);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IEnumerator GetEnumerator();
    private void AppendChildText(StringBuilder builder);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_OuterXml();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual string get_BaseURI();
    public abstract virtual void WriteTo(XmlWriter w);
    public abstract virtual void WriteContentTo(XmlWriter w);
    public virtual void RemoveAll();
    internal XmlDocument get_Document();
    public virtual string GetNamespaceOfPrefix(string prefix);
    internal string GetNamespaceOfPrefixStrict(string prefix);
    public virtual string GetPrefixOfNamespace(string namespaceURI);
    internal string GetPrefixOfNamespaceStrict(string namespaceURI);
    public virtual XmlElement get_Item(string name);
    public virtual XmlElement get_Item(string localname, string ns);
    internal virtual void SetParent(XmlNode node);
    internal virtual void SetParentForLoad(XmlNode node);
    internal static void SplitName(string name, String& prefix, String& localName);
    internal virtual XmlNode FindChild(XmlNodeType type);
    internal virtual XmlNodeChangedEventArgs GetEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action);
    internal virtual void BeforeEvent(XmlNodeChangedEventArgs args);
    internal virtual void AfterEvent(XmlNodeChangedEventArgs args);
    internal virtual XmlSpace get_XmlSpace();
    internal virtual string get_XmlLang();
    internal virtual string GetXPAttribute(string localName, string namespaceURI);
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
    internal static void NestTextNodes(XmlNode prevNode, XmlNode nextNode);
    internal static void UnnestTextNodes(XmlNode prevNode, XmlNode nextNode);
    private object get_debuggerDisplayProxy();
}
public enum System.Xml.XmlNodeChangedAction : Enum {
    public int value__;
    public static XmlNodeChangedAction Insert;
    public static XmlNodeChangedAction Remove;
    public static XmlNodeChangedAction Change;
}
public class System.Xml.XmlNodeChangedEventArgs : EventArgs {
    private XmlNodeChangedAction _action;
    private XmlNode _node;
    private XmlNode _oldParent;
    private XmlNode _newParent;
    private string _oldValue;
    private string _newValue;
    public XmlNodeChangedAction Action { get; }
    public XmlNode Node { get; }
    public XmlNode OldParent { get; }
    public XmlNode NewParent { get; }
    public string OldValue { get; }
    public string NewValue { get; }
    public XmlNodeChangedEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action);
    public XmlNodeChangedAction get_Action();
    public XmlNode get_Node();
    public XmlNode get_OldParent();
    public XmlNode get_NewParent();
    public string get_OldValue();
    public string get_NewValue();
}
public class System.Xml.XmlNodeChangedEventHandler : MulticastDelegate {
    public XmlNodeChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlNodeChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XmlNodeChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("ItemOf")]
public abstract class System.Xml.XmlNodeList : object {
    public int Count { get; }
    public XmlNode ItemOf { get; }
    public abstract virtual XmlNode Item(int index);
    public abstract virtual int get_Count();
    public abstract virtual IEnumerator GetEnumerator();
    public virtual XmlNode get_ItemOf(int i);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void PrivateDisposeNodeList();
}
internal static class System.Xml.XmlParsingHelper : object {
    public static void ParseXmlDeclarationValue(string strValue, String& version, String& encoding, String& standalone);
}
public class System.Xml.XmlProcessingInstruction : XmlLinkedNode {
    private string _target;
    private string _data;
    public string Name { get; }
    public string LocalName { get; }
    public string Value { get; public set; }
    public string Target { get; }
    public string Data { get; public set; }
    public string InnerText { get; public set; }
    public XmlNodeType NodeType { get; }
    protected internal XmlProcessingInstruction(string target, string data, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public string get_Target();
    public string get_Data();
    public void set_Data(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
}
public class System.Xml.XmlSignificantWhitespace : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public string Value { get; public set; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    protected internal XmlSignificantWhitespace(string strData, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode CloneNode(bool deep);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
}
public class System.Xml.XmlText : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public string Value { get; public set; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    internal XmlText(string strData);
    protected internal XmlText(string strData, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode CloneNode(bool deep);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlText SplitText(int offset);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
}
internal class System.Xml.XmlTextEncoder : object {
    private TextWriter _textWriter;
    private bool _inAttribute;
    private char _quoteChar;
    private StringBuilder _attrValue;
    private bool _cacheAttrValue;
    private XmlCharType _xmlCharType;
    unknown char QuoteChar {internal set; }
    internal string AttributeValue { get; }
    internal XmlTextEncoder(TextWriter textWriter);
    internal void set_QuoteChar(char value);
    internal void StartAttribute(bool cacheAttrValue);
    internal void EndAttribute();
    internal string get_AttributeValue();
    internal void WriteSurrogateChar(char lowChar, char highChar);
    internal void Write(Char[] array, int offset, int count);
    internal void WriteSurrogateCharEntity(char lowChar, char highChar);
    internal void Write(string text);
    internal void WriteRawWithSurrogateChecking(string text);
    internal void WriteRaw(string value);
    internal void WriteRaw(Char[] array, int offset, int count);
    internal void WriteCharEntity(char ch);
    internal void WriteEntityRef(string name);
    internal void Flush();
    private void WriteStringFragment(string str, int offset, int count, Char[] helperBuffer);
    private void WriteCharEntityImpl(char ch);
    private void WriteCharEntityImpl(string strVal);
    private void WriteEntityRefImpl(string name);
}
[EditorBrowsableAttribute("1")]
internal class System.Xml.XmlTextWriter : XmlWriter {
    private TextWriter textWriter;
    private XmlTextEncoder xmlEncoder;
    private Encoding encoding;
    private Formatting formatting;
    private bool indented;
    private int indentation;
    private char indentChar;
    private TagInfo[] stack;
    private int top;
    private State[] stateTable;
    private State currentState;
    private Token lastToken;
    private XmlTextWriterBase64Encoder base64Encoder;
    private char quoteChar;
    private char curQuoteChar;
    private bool namespaces;
    private SpecialAttr specialAttr;
    private string prefixForXmlNs;
    private bool flush;
    private Namespace[] nsStack;
    private int nsTop;
    private Dictionary`2<string, int> nsHashtable;
    private bool useNsHashtable;
    private XmlCharType xmlCharType;
    private static int NamespaceStackInitialSize;
    private static int MaxNamespacesWalkCount;
    private static String[] stateName;
    private static String[] tokenName;
    private static State[] stateTableDefault;
    private static State[] stateTableDocument;
    public Stream BaseStream { get; }
    public bool Namespaces { get; public set; }
    public Formatting Formatting { get; public set; }
    public int Indentation { get; public set; }
    public char IndentChar { get; public set; }
    public char QuoteChar { get; public set; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public XmlTextWriter(Stream w, Encoding encoding);
    public XmlTextWriter(TextWriter w);
    private static XmlTextWriter();
    public Stream get_BaseStream();
    public bool get_Namespaces();
    public void set_Namespaces(bool value);
    public Formatting get_Formatting();
    public void set_Formatting(Formatting value);
    public int get_Indentation();
    public void set_Indentation(int value);
    public char get_IndentChar();
    public void set_IndentChar(char value);
    public char get_QuoteChar();
    public void set_QuoteChar(char value);
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual WriteState get_WriteState();
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
    private void StartDocument(int standalone);
    private void AutoComplete(Token token);
    private void AutoCompleteAll();
    private void InternalWriteEndElement(bool longFormat);
    private void WriteEndStartTag(bool empty);
    private void WriteEndAttributeQuote();
    private void Indent(bool beforeEndElement);
    private void PushNamespace(string prefix, string ns, bool declared);
    private void AddNamespace(string prefix, string ns, bool declared);
    private void AddToNamespaceHashtable(int namespaceIndex);
    private void PopNamespaces(int indexFrom, int indexTo);
    private string GeneratePrefix();
    private void InternalWriteProcessingInstruction(string name, string text);
    private int LookupNamespace(string prefix);
    private int LookupNamespaceInCurrentScope(string prefix);
    private string FindPrefix(string ns);
    private void InternalWriteName(string name, bool isNCName);
    private void ValidateName(string name, bool isNCName);
    private void HandleSpecialAttribute();
    private void VerifyPrefixXml(string prefix, string ns);
    private void PushStack();
    private void FlushEncoders();
}
internal class System.Xml.XmlTextWriterBase64Encoder : Base64Encoder {
    private XmlTextEncoder xmlTextEncoder;
    internal XmlTextWriterBase64Encoder(XmlTextEncoder xmlTextEncoder);
    internal virtual void WriteChars(Char[] chars, int index, int count);
}
internal class System.Xml.XmlUnspecifiedAttribute : XmlAttribute {
    private bool _fSpecified;
    public bool Specified { get; }
    unknown string InnerText {public set; }
    protected internal XmlUnspecifiedAttribute(string prefix, string localName, string namespaceURI, XmlDocument doc);
    public virtual bool get_Specified();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void set_InnerText(string value);
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual XmlNode RemoveChild(XmlNode oldChild);
    public virtual XmlNode AppendChild(XmlNode newChild);
    public virtual void WriteTo(XmlWriter w);
    internal void SetSpecified(bool f);
}
public class System.Xml.XmlWhitespace : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public string Value { get; public set; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    protected internal XmlWhitespace(string strData, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
}
