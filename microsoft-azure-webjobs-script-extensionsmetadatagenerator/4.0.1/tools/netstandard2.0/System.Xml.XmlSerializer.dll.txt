internal static class FxResources.System.Xml.XmlSerializer.SR : object {
}
internal class Microsoft.CSharp.CSharpCodeProvider : CodeDomProvider {
    public virtual string CreateEscapedIdentifier(string name);
    private static bool IsKeyword(string value);
    private static bool IsPrefixTwoUnderscore(string value);
}
internal abstract class System.CodeDom.Compiler.CodeDomProvider : object {
    public abstract virtual string CreateEscapedIdentifier(string name);
}
internal abstract class System.CodeDom.Compiler.CodeGenerator : object {
    public static bool IsValidLanguageIndependentIdentifier(string value);
    private static bool IsValidTypeNameOrIdentifier(string value, bool isTypeName);
    private static bool IsSpecialTypeChar(char ch, Boolean& nextMustBeStartChar);
}
internal static class System.ServiceModel.Dispatcher.XmlSchemaConstants : object {
    public static string Namespace;
    public static string InstanceNamespace;
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Xml_InvalidOperation { get; }
    internal static string Xml_InvalidNmToken { get; }
    internal static string Xml_InvalidNameChars { get; }
    internal static string XmlMissingType { get; }
    internal static string XmlSerializerUnsupportedType { get; }
    internal static string XmlSerializerUnsupportedMember { get; }
    internal static string XmlUnsupportedTypeKind { get; }
    internal static string XmlUnsupportedIDictionary { get; }
    internal static string XmlUnsupportedIDictionaryDetails { get; }
    internal static string XmlConstructorInaccessible { get; }
    internal static string XmlTypeInaccessible { get; }
    internal static string XmlTypeStatic { get; }
    internal static string XmlNoDefaultAccessors { get; }
    internal static string XmlNoAddMethod { get; }
    internal static string XmlReadOnlyPropertyError { get; }
    internal static string XmlAttributeSetAgain { get; }
    internal static string XmlReflectionError { get; }
    internal static string XmlTypeReflectionError { get; }
    internal static string XmlPropertyReflectionError { get; }
    internal static string XmlFieldReflectionError { get; }
    internal static string XmlInvalidDataTypeUsage { get; }
    internal static string XmlInvalidXsdDataType { get; }
    internal static string XmlDataTypeMismatch { get; }
    internal static string XmlIllegalTypeContext { get; }
    internal static string XmlUdeclaredXsdType { get; }
    internal static string XmlInvalidConstantAttribute { get; }
    internal static string XmlIllegalAttributesArrayAttribute { get; }
    internal static string XmlIllegalElementsArrayAttribute { get; }
    internal static string XmlIllegalArrayArrayAttribute { get; }
    internal static string XmlIllegalAttribute { get; }
    internal static string XmlIllegalType { get; }
    internal static string XmlIllegalAttrOrText { get; }
    internal static string XmlIllegalAttrOrTextInterface { get; }
    internal static string XmlIllegalAttributeFlagsArray { get; }
    internal static string XmlIllegalAnyElement { get; }
    internal static string XmlInvalidIsNullable { get; }
    internal static string XmlInvalidNotNullable { get; }
    internal static string XmlInvalidFormUnqualified { get; }
    internal static string XmlHiddenMember { get; }
    internal static string XmlInvalidXmlOverride { get; }
    internal static string XmlMissingMethodEnum { get; }
    internal static string XmlInvalidDefaultValue { get; }
    internal static string XmlUnknownNode { get; }
    internal static string XmlUnknownConstant { get; }
    internal static string XmlSerializeError { get; }
    internal static string XmlSerializeErrorDetails { get; }
    internal static string XmlUnknownType { get; }
    internal static string XmlAbstractType { get; }
    internal static string XmlMethodTypeNameConflict { get; }
    internal static string XmlCannotReconcileAccessor { get; }
    internal static string XmlCannotReconcileAttributeAccessor { get; }
    internal static string XmlCannotReconcileAccessorDefault { get; }
    internal static string XmlInvalidTypeAttributes { get; }
    internal static string XmlInvalidAttributeUse { get; }
    internal static string XmlTypesDuplicate { get; }
    internal static string XmlInvalidSerializable { get; }
    internal static string XmlInvalidUseOfType { get; }
    internal static string XmlUnxpectedType { get; }
    internal static string XmlUnknownAnyElement { get; }
    internal static string XmlInvalidReturnPosition { get; }
    internal static string XmlInvalidAttributeType { get; }
    internal static string XmlInvalidIdentifier { get; }
    internal static string XmlGenError { get; }
    internal static string XmlInvalidXmlns { get; }
    internal static string XmlCircularReference { get; }
    internal static string XmlNoSerializableMembers { get; }
    internal static string XmlReadOnlyCollection { get; }
    internal static string XmlDuplicateElementName { get; }
    internal static string XmlDuplicateAttributeName { get; }
    internal static string XmlUndefinedAlias { get; }
    internal static string XmlChoiceIdentifierType { get; }
    internal static string XmlChoiceIdentifierArrayType { get; }
    internal static string XmlChoiceIdentifierTypeEnum { get; }
    internal static string XmlChoiceIdentiferMemberMissing { get; }
    internal static string XmlChoiceIdentiferAmbiguous { get; }
    internal static string XmlChoiceIdentiferMissing { get; }
    internal static string XmlChoiceMissingValue { get; }
    internal static string XmlChoiceMissingAnyValue { get; }
    internal static string XmlChoiceMismatchChoiceException { get; }
    internal static string XmlArrayItemAmbiguousTypes { get; }
    internal static string XmlUnsupportedInterface { get; }
    internal static string XmlUnsupportedInterfaceDetails { get; }
    internal static string XmlUnsupportedRank { get; }
    internal static string XmlUnsupportedInheritance { get; }
    internal static string XmlIllegalMultipleText { get; }
    internal static string XmlIllegalMultipleTextMembers { get; }
    internal static string XmlIllegalArrayTextAttribute { get; }
    internal static string XmlIllegalTypedTextAttribute { get; }
    internal static string XmlIllegalSimpleContentExtension { get; }
    internal static string XmlInvalidCast { get; }
    internal static string XmlInvalidCastWithId { get; }
    internal static string XmlInvalidNullCast { get; }
    internal static string XmlMultipleXmlns { get; }
    internal static string XmlMultipleXmlnsMembers { get; }
    internal static string XmlXmlnsInvalidType { get; }
    internal static string XmlSoleXmlnsAttribute { get; }
    internal static string XmlConstructorHasSecurityAttributes { get; }
    internal static string XmlInvalidChoiceIdentifierValue { get; }
    internal static string XmlAnyElementDuplicate { get; }
    internal static string XmlChoiceIdDuplicate { get; }
    internal static string XmlChoiceIdentifierMismatch { get; }
    internal static string XmlNoPartialTrust { get; }
    internal static string XmlInvalidSpecifiedType { get; }
    internal static string XmlUnsupportedOpenGenericType { get; }
    internal static string XmlRpcLitElementNamespace { get; }
    internal static string XmlRpcLitElementNullable { get; }
    internal static string XmlRpcLitElements { get; }
    internal static string XmlRpcLitArrayElement { get; }
    internal static string XmlRpcLitAttributeAttributes { get; }
    internal static string XmlRpcLitAttributes { get; }
    internal static string XmlSequenceMembers { get; }
    internal static string XmlRpcLitXmlns { get; }
    internal static string XmlDuplicateNs { get; }
    internal static string XmlAnonymousInclude { get; }
    internal static string XmlGetSchemaMethodName { get; }
    internal static string XmlGetSchemaMethodMissing { get; }
    internal static string XmlGetSchemaMethodReturnType { get; }
    internal static string XmlGetSchemaEmptyTypeName { get; }
    internal static string XmlSerializableAttributes { get; }
    internal static string XmlSerializableBadDerivation { get; }
    internal static string XmlSerializableMissingClrType { get; }
    internal static string XmlMelformMapping { get; }
    internal static string XmlNotSerializable { get; }
    internal static string XmlSequenceInconsistent { get; }
    internal static string XmlSequenceUnique { get; }
    internal static string XmlSequenceHierarchy { get; }
    internal static string XmlSequenceMatch { get; }
    internal static string XmlInternalError { get; }
    internal static string XmlInternalErrorDetails { get; }
    internal static string XmlInternalErrorMethod { get; }
    internal static string Arg_NeverValueType { get; }
    internal static string SFxErrorDeserializingRequestBody { get; }
    internal static string SFxErrorDeserializingReplyBody { get; }
    internal static string SFxInvalidXmlAttributeInWrapped { get; }
    internal static string SFxInvalidXmlAttributeInBare { get; }
    internal static string SFxXmlArrayNotAllowedForMultiple { get; }
    internal static string SFxErrorSerializingBody { get; }
    internal static string SFxRpcMessageMustHaveASingleBody { get; }
    internal static string SFxBodyObjectTypeCannotBeInherited { get; }
    internal static string SFxBodyObjectTypeCannotBeInterface { get; }
    internal static string SFxKnownTypeNull { get; }
    internal static string SFxFaultTypeAnonymous { get; }
    internal static string XmlConvert_BadFormat { get; }
    internal static string XmlDisallowNegativeValues { get; }
    internal static string XmlInvalidEncodingNotEncoded1 { get; }
    internal static string XmlInvalidEncoding3 { get; }
    internal static string XmlUnexpectedType { get; }
    internal static string XmlMultipleAttributeOverrides { get; }
    internal static string XmlIllegalSoapAttribute { get; }
    internal static string XmlInvalidArrayLength { get; }
    internal static string XmlUnsupportedSoapTypeKind { get; }
    internal static string XmlUnsupportedType { get; }
    internal static string Xml_InvalidBinHexValueOddCount { get; }
    internal static string Xml_InvalidBinHexValue { get; }
    internal static string XmlS_UnknownID_1 { get; }
    internal static string XmlS_IllegalAttrType_1 { get; }
    internal static string XmlS_XmlInvalidCast_2 { get; }
    internal static string XmlS_IllegalTextType_1 { get; }
    internal static string XmlS_TwoXmlAny_2 { get; }
    internal static string XmlS_MissingEnum_1 { get; }
    internal static string XmlS_UnknownEnum_1 { get; }
    internal static string XmlS_UnknownAccessor_1 { get; }
    internal static string XmlS_TwoMappings_1 { get; }
    internal static string XmlS_TwoDefaultXmlAny { get; }
    internal static string XmlS_IllegalChoiceDirection { get; }
    internal static string XmlS_ElementAsAttribute_2 { get; }
    internal static string XmlS_AttributeAsElement_2 { get; }
    internal static string XmlS_CircularRef_1 { get; }
    internal static string XmlS_IllegalSequenceType_1 { get; }
    internal static string XmlS_NoRepeatingAccessor_2 { get; }
    internal static string XmlS_NoArrayEltAcc_2 { get; }
    internal static string XmlS_WrongXAEAType_1 { get; }
    internal static string XmlS_WrongXAAAType_1 { get; }
    internal static string XmlS_XNDANotXSN_1 { get; }
    internal static string XmlS_InvalidHref_1 { get; }
    internal static string XmlS_IllegalDataType_1 { get; }
    internal static string XmlS_DataTypeNotValid_1 { get; }
    internal static string XmlS_UnknownPrefix_1 { get; }
    internal static string XmlS_CollNoAdd_1 { get; }
    internal static string XmlS_IEnumNoAdd_3 { get; }
    internal static string XmlS_BadArrayType_1 { get; }
    internal static string XmlS_RepeatedIdentifier_1 { get; }
    internal static string XmlInvalidCharSchemaPrimitive { get; }
    internal static string UnknownConstantType { get; }
    internal static string ArrayTypeIsNotSupported { get; }
    internal static string NoConversionPossibleTo { get; }
    internal static string IsNotAssignableFrom { get; }
    internal static string XmlElementNameMismatch { get; }
    internal static string XmlNeedAttributeHere { get; }
    internal static string XmlNoAttributeHere { get; }
    internal static string XmlInvalidArrayTypeSyntax { get; }
    internal static string Xml_MissingSerializationCodeException { get; }
    internal static string Arg_RemoveArgNotFound { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Xml_InvalidOperation();
    internal static string get_Xml_InvalidNmToken();
    internal static string get_Xml_InvalidNameChars();
    internal static string get_XmlMissingType();
    internal static string get_XmlSerializerUnsupportedType();
    internal static string get_XmlSerializerUnsupportedMember();
    internal static string get_XmlUnsupportedTypeKind();
    internal static string get_XmlUnsupportedIDictionary();
    internal static string get_XmlUnsupportedIDictionaryDetails();
    internal static string get_XmlConstructorInaccessible();
    internal static string get_XmlTypeInaccessible();
    internal static string get_XmlTypeStatic();
    internal static string get_XmlNoDefaultAccessors();
    internal static string get_XmlNoAddMethod();
    internal static string get_XmlReadOnlyPropertyError();
    internal static string get_XmlAttributeSetAgain();
    internal static string get_XmlReflectionError();
    internal static string get_XmlTypeReflectionError();
    internal static string get_XmlPropertyReflectionError();
    internal static string get_XmlFieldReflectionError();
    internal static string get_XmlInvalidDataTypeUsage();
    internal static string get_XmlInvalidXsdDataType();
    internal static string get_XmlDataTypeMismatch();
    internal static string get_XmlIllegalTypeContext();
    internal static string get_XmlUdeclaredXsdType();
    internal static string get_XmlInvalidConstantAttribute();
    internal static string get_XmlIllegalAttributesArrayAttribute();
    internal static string get_XmlIllegalElementsArrayAttribute();
    internal static string get_XmlIllegalArrayArrayAttribute();
    internal static string get_XmlIllegalAttribute();
    internal static string get_XmlIllegalType();
    internal static string get_XmlIllegalAttrOrText();
    internal static string get_XmlIllegalAttrOrTextInterface();
    internal static string get_XmlIllegalAttributeFlagsArray();
    internal static string get_XmlIllegalAnyElement();
    internal static string get_XmlInvalidIsNullable();
    internal static string get_XmlInvalidNotNullable();
    internal static string get_XmlInvalidFormUnqualified();
    internal static string get_XmlHiddenMember();
    internal static string get_XmlInvalidXmlOverride();
    internal static string get_XmlMissingMethodEnum();
    internal static string get_XmlInvalidDefaultValue();
    internal static string get_XmlUnknownNode();
    internal static string get_XmlUnknownConstant();
    internal static string get_XmlSerializeError();
    internal static string get_XmlSerializeErrorDetails();
    internal static string get_XmlUnknownType();
    internal static string get_XmlAbstractType();
    internal static string get_XmlMethodTypeNameConflict();
    internal static string get_XmlCannotReconcileAccessor();
    internal static string get_XmlCannotReconcileAttributeAccessor();
    internal static string get_XmlCannotReconcileAccessorDefault();
    internal static string get_XmlInvalidTypeAttributes();
    internal static string get_XmlInvalidAttributeUse();
    internal static string get_XmlTypesDuplicate();
    internal static string get_XmlInvalidSerializable();
    internal static string get_XmlInvalidUseOfType();
    internal static string get_XmlUnxpectedType();
    internal static string get_XmlUnknownAnyElement();
    internal static string get_XmlInvalidReturnPosition();
    internal static string get_XmlInvalidAttributeType();
    internal static string get_XmlInvalidIdentifier();
    internal static string get_XmlGenError();
    internal static string get_XmlInvalidXmlns();
    internal static string get_XmlCircularReference();
    internal static string get_XmlNoSerializableMembers();
    internal static string get_XmlReadOnlyCollection();
    internal static string get_XmlDuplicateElementName();
    internal static string get_XmlDuplicateAttributeName();
    internal static string get_XmlUndefinedAlias();
    internal static string get_XmlChoiceIdentifierType();
    internal static string get_XmlChoiceIdentifierArrayType();
    internal static string get_XmlChoiceIdentifierTypeEnum();
    internal static string get_XmlChoiceIdentiferMemberMissing();
    internal static string get_XmlChoiceIdentiferAmbiguous();
    internal static string get_XmlChoiceIdentiferMissing();
    internal static string get_XmlChoiceMissingValue();
    internal static string get_XmlChoiceMissingAnyValue();
    internal static string get_XmlChoiceMismatchChoiceException();
    internal static string get_XmlArrayItemAmbiguousTypes();
    internal static string get_XmlUnsupportedInterface();
    internal static string get_XmlUnsupportedInterfaceDetails();
    internal static string get_XmlUnsupportedRank();
    internal static string get_XmlUnsupportedInheritance();
    internal static string get_XmlIllegalMultipleText();
    internal static string get_XmlIllegalMultipleTextMembers();
    internal static string get_XmlIllegalArrayTextAttribute();
    internal static string get_XmlIllegalTypedTextAttribute();
    internal static string get_XmlIllegalSimpleContentExtension();
    internal static string get_XmlInvalidCast();
    internal static string get_XmlInvalidCastWithId();
    internal static string get_XmlInvalidNullCast();
    internal static string get_XmlMultipleXmlns();
    internal static string get_XmlMultipleXmlnsMembers();
    internal static string get_XmlXmlnsInvalidType();
    internal static string get_XmlSoleXmlnsAttribute();
    internal static string get_XmlConstructorHasSecurityAttributes();
    internal static string get_XmlInvalidChoiceIdentifierValue();
    internal static string get_XmlAnyElementDuplicate();
    internal static string get_XmlChoiceIdDuplicate();
    internal static string get_XmlChoiceIdentifierMismatch();
    internal static string get_XmlNoPartialTrust();
    internal static string get_XmlInvalidSpecifiedType();
    internal static string get_XmlUnsupportedOpenGenericType();
    internal static string get_XmlRpcLitElementNamespace();
    internal static string get_XmlRpcLitElementNullable();
    internal static string get_XmlRpcLitElements();
    internal static string get_XmlRpcLitArrayElement();
    internal static string get_XmlRpcLitAttributeAttributes();
    internal static string get_XmlRpcLitAttributes();
    internal static string get_XmlSequenceMembers();
    internal static string get_XmlRpcLitXmlns();
    internal static string get_XmlDuplicateNs();
    internal static string get_XmlAnonymousInclude();
    internal static string get_XmlGetSchemaMethodName();
    internal static string get_XmlGetSchemaMethodMissing();
    internal static string get_XmlGetSchemaMethodReturnType();
    internal static string get_XmlGetSchemaEmptyTypeName();
    internal static string get_XmlSerializableAttributes();
    internal static string get_XmlSerializableBadDerivation();
    internal static string get_XmlSerializableMissingClrType();
    internal static string get_XmlMelformMapping();
    internal static string get_XmlNotSerializable();
    internal static string get_XmlSequenceInconsistent();
    internal static string get_XmlSequenceUnique();
    internal static string get_XmlSequenceHierarchy();
    internal static string get_XmlSequenceMatch();
    internal static string get_XmlInternalError();
    internal static string get_XmlInternalErrorDetails();
    internal static string get_XmlInternalErrorMethod();
    internal static string get_Arg_NeverValueType();
    internal static string get_SFxErrorDeserializingRequestBody();
    internal static string get_SFxErrorDeserializingReplyBody();
    internal static string get_SFxInvalidXmlAttributeInWrapped();
    internal static string get_SFxInvalidXmlAttributeInBare();
    internal static string get_SFxXmlArrayNotAllowedForMultiple();
    internal static string get_SFxErrorSerializingBody();
    internal static string get_SFxRpcMessageMustHaveASingleBody();
    internal static string get_SFxBodyObjectTypeCannotBeInherited();
    internal static string get_SFxBodyObjectTypeCannotBeInterface();
    internal static string get_SFxKnownTypeNull();
    internal static string get_SFxFaultTypeAnonymous();
    internal static string get_XmlConvert_BadFormat();
    internal static string get_XmlDisallowNegativeValues();
    internal static string get_XmlInvalidEncodingNotEncoded1();
    internal static string get_XmlInvalidEncoding3();
    internal static string get_XmlUnexpectedType();
    internal static string get_XmlMultipleAttributeOverrides();
    internal static string get_XmlIllegalSoapAttribute();
    internal static string get_XmlInvalidArrayLength();
    internal static string get_XmlUnsupportedSoapTypeKind();
    internal static string get_XmlUnsupportedType();
    internal static string get_Xml_InvalidBinHexValueOddCount();
    internal static string get_Xml_InvalidBinHexValue();
    internal static string get_XmlS_UnknownID_1();
    internal static string get_XmlS_IllegalAttrType_1();
    internal static string get_XmlS_XmlInvalidCast_2();
    internal static string get_XmlS_IllegalTextType_1();
    internal static string get_XmlS_TwoXmlAny_2();
    internal static string get_XmlS_MissingEnum_1();
    internal static string get_XmlS_UnknownEnum_1();
    internal static string get_XmlS_UnknownAccessor_1();
    internal static string get_XmlS_TwoMappings_1();
    internal static string get_XmlS_TwoDefaultXmlAny();
    internal static string get_XmlS_IllegalChoiceDirection();
    internal static string get_XmlS_ElementAsAttribute_2();
    internal static string get_XmlS_AttributeAsElement_2();
    internal static string get_XmlS_CircularRef_1();
    internal static string get_XmlS_IllegalSequenceType_1();
    internal static string get_XmlS_NoRepeatingAccessor_2();
    internal static string get_XmlS_NoArrayEltAcc_2();
    internal static string get_XmlS_WrongXAEAType_1();
    internal static string get_XmlS_WrongXAAAType_1();
    internal static string get_XmlS_XNDANotXSN_1();
    internal static string get_XmlS_InvalidHref_1();
    internal static string get_XmlS_IllegalDataType_1();
    internal static string get_XmlS_DataTypeNotValid_1();
    internal static string get_XmlS_UnknownPrefix_1();
    internal static string get_XmlS_CollNoAdd_1();
    internal static string get_XmlS_IEnumNoAdd_3();
    internal static string get_XmlS_BadArrayType_1();
    internal static string get_XmlS_RepeatedIdentifier_1();
    internal static string get_XmlInvalidCharSchemaPrimitive();
    internal static string get_UnknownConstantType();
    internal static string get_ArrayTypeIsNotSupported();
    internal static string get_NoConversionPossibleTo();
    internal static string get_IsNotAssignableFrom();
    internal static string get_XmlElementNameMismatch();
    internal static string get_XmlNeedAttributeHere();
    internal static string get_XmlNoAttributeHere();
    internal static string get_XmlInvalidArrayTypeSyntax();
    internal static string get_Xml_MissingSerializationCodeException();
    internal static string get_Arg_RemoveArgNotFound();
    internal static Type get_ResourceType();
}
internal class System.Xml.BinHexDecoder : IncrementalReadDecoder {
    private Byte[] _buffer;
    private int _startIndex;
    private int _curIndex;
    private int _endIndex;
    private bool _hasHalfByteCached;
    private byte _cachedHalfByte;
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    internal virtual int get_DecodedCount();
    internal virtual bool get_IsFull();
    internal virtual int Decode(Char[] chars, int startPos, int len);
    internal virtual int Decode(string str, int startPos, int len);
    internal virtual void Reset();
    internal virtual void SetNextOutputBuffer(Array buffer, int index, int count);
    public static Byte[] Decode(Char[] chars, bool allowOddChars);
    private static void Decode(Char* pChars, Char* pCharsEndPos, Byte* pBytes, Byte* pBytesEndPos, Boolean& hasHalfByteCached, Byte& cachedHalfByte, Int32& charsDecoded, Int32& bytesDecoded);
}
internal abstract class System.Xml.BinHexEncoder : object {
    private static string s_hexDigits;
    private static int CharsChunkSize;
    internal static string Encode(Byte[] inArray, int offsetIn, int count);
    private static int Encode(Byte[] inArray, int offsetIn, int count, Char[] outArray);
}
[ExtensionAttribute]
internal static class System.Xml.Extensions.ExtensionMethods : object {
    [ExtensionAttribute]
internal static void CopyTo(ValueCollection<object, object> source, Array a, int index);
    [ExtensionAttribute]
internal static bool Contains(Dictionary`2<object, object> source, object a);
    [ExtensionAttribute]
internal static string ReadElementString(XmlReader source);
    [ExtensionAttribute]
internal static string ReadString(XmlReader source);
    private static bool TypeSequenceEqual(Type[] seq1, Type[] seq2);
    private static MethodBase FilterMethodBases(MethodBase[] methodBases, Type[] parameterTypes, string methodName);
    [ExtensionAttribute]
internal static ConstructorInfo GetConstructor(Type type, BindingFlags bindingFlags, Type[] parameterTypes);
    [ExtensionAttribute]
internal static MethodInfo GetMethod(Type type, string methodName, BindingFlags bindingFlags, Type[] parameterTypes);
    internal static string ToBinHexString(Byte[] inArray);
    internal static Byte[] FromBinHexString(string s, bool allowOddCount);
    internal static Uri ToUri(string s);
}
internal abstract class System.Xml.IncrementalReadDecoder : object {
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    internal abstract virtual int get_DecodedCount();
    internal abstract virtual bool get_IsFull();
    internal abstract virtual void SetNextOutputBuffer(Array array, int offset, int len);
    internal abstract virtual int Decode(Char[] chars, int startPos, int len);
    internal abstract virtual int Decode(string str, int startPos, int len);
    internal abstract virtual void Reset();
}
internal abstract class System.Xml.Schema.XmlSchemaObject : object {
}
internal class System.Xml.Schema.XmlSchemaSet : object {
}
internal class System.Xml.Schema.XmlSchemaType : object {
    private string _name;
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
internal abstract class System.Xml.Serialization.Accessor : object {
    private string _name;
    private object _defaultValue;
    private string _ns;
    private TypeMapping _mapping;
    private bool _any;
    private string _anyNs;
    private bool _topLevelInSchema;
    private XmlSchemaForm _form;
    internal TypeMapping Mapping { get; internal set; }
    internal object Default { get; internal set; }
    internal string Name { get; internal set; }
    internal bool Any { get; internal set; }
    internal string AnyNamespaces { get; internal set; }
    internal string Namespace { get; internal set; }
    internal XmlSchemaForm Form { get; internal set; }
    internal bool IsTopLevelInSchema { get; internal set; }
    internal TypeMapping get_Mapping();
    internal void set_Mapping(TypeMapping value);
    internal object get_Default();
    internal void set_Default(object value);
    internal virtual string get_Name();
    internal virtual void set_Name(string value);
    internal bool get_Any();
    internal void set_Any(bool value);
    internal string get_AnyNamespaces();
    internal void set_AnyNamespaces(string value);
    internal string get_Namespace();
    internal void set_Namespace(string value);
    internal XmlSchemaForm get_Form();
    internal void set_Form(XmlSchemaForm value);
    internal bool get_IsTopLevelInSchema();
    internal void set_IsTopLevelInSchema(bool value);
    internal static string EscapeQName(string name);
    internal static string UnescapeName(string name);
}
internal abstract class System.Xml.Serialization.AccessorMapping : Mapping {
    private TypeDesc _typeDesc;
    private AttributeAccessor _attribute;
    private ElementAccessor[] _elements;
    private ElementAccessor[] _sortedElements;
    private TextAccessor _text;
    private ChoiceIdentifierAccessor _choiceIdentifier;
    private XmlnsAccessor _xmlns;
    private bool _ignore;
    internal bool IsAttribute { get; }
    internal bool IsText { get; }
    internal bool IsParticle { get; }
    internal TypeDesc TypeDesc { get; internal set; }
    internal AttributeAccessor Attribute { get; internal set; }
    internal ElementAccessor[] Elements { get; internal set; }
    internal ElementAccessor[] ElementsSortedByDerivation { get; }
    internal TextAccessor Text { get; internal set; }
    internal ChoiceIdentifierAccessor ChoiceIdentifier { get; internal set; }
    internal XmlnsAccessor Xmlns { get; internal set; }
    internal bool Ignore { get; internal set; }
    internal Accessor Accessor { get; }
    protected AccessorMapping(AccessorMapping mapping);
    internal bool get_IsAttribute();
    internal bool get_IsText();
    internal bool get_IsParticle();
    internal TypeDesc get_TypeDesc();
    internal void set_TypeDesc(TypeDesc value);
    internal AttributeAccessor get_Attribute();
    internal void set_Attribute(AttributeAccessor value);
    internal ElementAccessor[] get_Elements();
    internal void set_Elements(ElementAccessor[] value);
    internal static void SortMostToLeastDerived(ElementAccessor[] elements);
    internal ElementAccessor[] get_ElementsSortedByDerivation();
    internal TextAccessor get_Text();
    internal void set_Text(TextAccessor value);
    internal ChoiceIdentifierAccessor get_ChoiceIdentifier();
    internal void set_ChoiceIdentifier(ChoiceIdentifierAccessor value);
    internal XmlnsAccessor get_Xmlns();
    internal void set_Xmlns(XmlnsAccessor value);
    internal bool get_Ignore();
    internal void set_Ignore(bool value);
    internal Accessor get_Accessor();
    internal static bool ElementsMatch(ElementAccessor[] a, ElementAccessor[] b);
    internal bool Match(AccessorMapping mapping);
}
internal class System.Xml.Serialization.ArgBuilder : object {
    internal string Name;
    internal int Index;
    internal Type ArgType;
    internal ArgBuilder(string name, int index, Type argType);
}
internal class System.Xml.Serialization.ArrayMapping : TypeMapping {
    private ElementAccessor[] _elements;
    private ElementAccessor[] _sortedElements;
    private ArrayMapping _next;
    internal ElementAccessor[] Elements { get; internal set; }
    internal ElementAccessor[] ElementsSortedByDerivation { get; }
    internal ArrayMapping Next { get; internal set; }
    internal ElementAccessor[] get_Elements();
    internal void set_Elements(ElementAccessor[] value);
    internal ElementAccessor[] get_ElementsSortedByDerivation();
    internal ArrayMapping get_Next();
    internal void set_Next(ArrayMapping value);
}
internal class System.Xml.Serialization.ArrayModel : TypeModel {
    internal TypeModel Element { get; }
    internal ArrayModel(Type type, TypeDesc typeDesc, ModelScope scope);
    internal TypeModel get_Element();
}
internal class System.Xml.Serialization.AttributeAccessor : Accessor {
    private bool _isSpecial;
    private bool _isList;
    internal bool IsSpecialXmlNamespace { get; }
    internal bool IsList { get; internal set; }
    internal bool get_IsSpecialXmlNamespace();
    internal bool get_IsList();
    internal void set_IsList(bool value);
    internal void CheckSpecial();
}
internal class System.Xml.Serialization.ChoiceIdentifierAccessor : Accessor {
    private string _memberName;
    private String[] _memberIds;
    private MemberInfo _memberInfo;
    internal string MemberName { get; internal set; }
    internal String[] MemberIds { get; internal set; }
    internal MemberInfo MemberInfo { get; internal set; }
    internal string get_MemberName();
    internal void set_MemberName(string value);
    internal String[] get_MemberIds();
    internal void set_MemberIds(String[] value);
    internal MemberInfo get_MemberInfo();
    internal void set_MemberInfo(MemberInfo value);
}
internal enum System.Xml.Serialization.Cmp : Enum {
    public int value__;
    public static Cmp LessThan;
    public static Cmp EqualTo;
    public static Cmp LessThanOrEqualTo;
    public static Cmp GreaterThan;
    public static Cmp NotEqualTo;
    public static Cmp GreaterThanOrEqualTo;
}
internal class System.Xml.Serialization.CodeGenerator : object {
    internal static BindingFlags InstanceBindingFlags;
    internal static BindingFlags StaticBindingFlags;
    internal static MethodAttributes PublicMethodAttributes;
    internal static MethodAttributes PublicOverrideMethodAttributes;
    internal static MethodAttributes ProtectedOverrideMethodAttributes;
    internal static MethodAttributes PrivateMethodAttributes;
    private TypeBuilder _typeBuilder;
    private MethodBuilder _methodBuilder;
    private ILGenerator _ilGen;
    private Dictionary`2<string, ArgBuilder> _argList;
    private LocalScope _currentScope;
    private Dictionary`2<Tuple`2<Type, string>, Queue`1<LocalBuilder>> _freeLocals;
    private Stack`1<object> _blockStack;
    private Label _methodEndLabel;
    internal LocalBuilder retLocal;
    internal Label retLabel;
    private Dictionary`2<Type, LocalBuilder> _tmpLocals;
    private static OpCode[] s_branchCodes;
    private Stack`1<object> _leaveLabels;
    private static OpCode[] s_ldindOpCodes;
    private static OpCode[] s_ldelemOpCodes;
    private static OpCode[] s_stelemOpCodes;
    private static OpCode[] s_convOpCodes;
    private int _initElseIfStack;
    private IfState _elseIfState;
    private int _initIfStack;
    private Stack`1<object> _whileStack;
    internal MethodBuilder MethodBuilder { get; }
    internal LocalBuilder ReturnLocal { get; }
    internal Label ReturnLabel { get; }
    internal CodeGenerator(TypeBuilder typeBuilder);
    private static CodeGenerator();
    internal static bool IsNullableGenericType(Type type);
    internal static void AssertHasInterface(Type type, Type iType);
    internal void BeginMethod(Type returnType, string methodName, Type[] argTypes, String[] argNames, MethodAttributes methodAttributes);
    internal void BeginMethod(Type returnType, MethodBuilderInfo methodBuilderInfo, Type[] argTypes, String[] argNames, MethodAttributes methodAttributes);
    private void InitILGeneration(Type[] argTypes, String[] argNames, bool isStatic);
    internal MethodBuilder EndMethod();
    internal MethodBuilder get_MethodBuilder();
    internal ArgBuilder GetArg(string name);
    internal LocalBuilder GetLocal(string name);
    internal LocalBuilder get_ReturnLocal();
    internal Label get_ReturnLabel();
    internal LocalBuilder GetTempLocal(Type type);
    internal Type GetVariableType(object var);
    internal object GetVariable(string name);
    internal bool TryGetVariable(string name, Object& variable);
    internal void EnterScope();
    internal void ExitScope();
    private bool TryDequeueLocal(Type type, string name, LocalBuilder& local);
    internal LocalBuilder DeclareLocal(Type type, string name);
    internal LocalBuilder DeclareOrGetLocal(Type type, string name);
    internal object For(LocalBuilder local, object start, object end);
    internal void EndFor();
    internal void If();
    internal void IfNot();
    private OpCode GetBranchCode(Cmp cmp);
    internal void If(Cmp cmpOp);
    internal void If(object value1, Cmp cmpOp, object value2);
    internal void Else();
    internal void EndIf();
    internal void BeginExceptionBlock();
    internal void BeginCatchBlock(Type exception);
    internal void EndExceptionBlock();
    internal void Leave();
    internal void Call(MethodInfo methodInfo);
    internal void Call(ConstructorInfo ctor);
    internal void New(ConstructorInfo constructorInfo);
    internal void InitObj(Type valueType);
    internal void NewArray(Type elementType, object len);
    internal void LoadArrayElement(object obj, object arrayIndex);
    internal void StoreArrayElement(object obj, object arrayIndex, object value);
    private static bool IsStruct(Type objType);
    internal Type LoadMember(object obj, MemberInfo memberInfo);
    private static MethodInfo GetPropertyMethodFromBaseType(PropertyInfo propertyInfo, bool isGetter);
    internal Type LoadMember(MemberInfo memberInfo);
    internal Type LoadMemberAddress(MemberInfo memberInfo);
    internal void StoreMember(MemberInfo memberInfo);
    internal void Load(object obj);
    internal void LoadAddress(object obj);
    internal void ConvertAddress(Type source, Type target);
    internal void ConvertValue(Type source, Type target);
    internal void Castclass(Type target);
    internal void Box(Type type);
    internal void Unbox(Type type);
    private OpCode GetLdindOpCode(TypeCode typeCode);
    internal void Ldobj(Type type);
    internal void Stobj(Type type);
    internal void Ceq();
    internal void Clt();
    internal void Cne();
    internal void Ble(Label label);
    internal void Throw();
    internal void Ldtoken(Type t);
    internal void Ldc(object o);
    internal void Ldc(bool boolVar);
    internal void Ldc(int intVar);
    internal void Ldc(long l);
    internal void Ldc(float f);
    internal void Ldc(double d);
    internal void Ldstr(string strVar);
    internal void LdlocAddress(LocalBuilder localBuilder);
    internal void Ldloc(LocalBuilder localBuilder);
    internal void Ldloc(string name);
    internal void Stloc(Type type, string name);
    internal void Stloc(LocalBuilder local);
    internal void Ldloc(Type type, string name);
    internal void Ldloca(LocalBuilder localBuilder);
    internal void LdargAddress(ArgBuilder argBuilder);
    internal void Ldarg(string arg);
    internal void Ldarg(ArgBuilder arg);
    internal void Ldarg(int slot);
    internal void Ldarga(ArgBuilder argBuilder);
    internal void Ldarga(int slot);
    internal void Ldlen();
    private OpCode GetLdelemOpCode(TypeCode typeCode);
    internal void Ldelem(Type arrayElementType);
    internal void Ldelema(Type arrayElementType);
    private OpCode GetStelemOpCode(TypeCode typeCode);
    internal void Stelem(Type arrayElementType);
    internal Label DefineLabel();
    internal void MarkLabel(Label label);
    internal void Nop();
    internal void Add();
    internal void Ret();
    internal void Br(Label label);
    internal void Br_S(Label label);
    internal void Blt(Label label);
    internal void Brfalse(Label label);
    internal void Brtrue(Label label);
    internal void Pop();
    internal void Dup();
    private void InternalIf(bool negate);
    private OpCode GetConvOpCode(TypeCode typeCode);
    private void InternalConvert(Type source, Type target, bool isAddress);
    private IfState PopIfState();
    internal static AssemblyBuilder CreateAssemblyBuilder(string name);
    internal static ModuleBuilder CreateModuleBuilder(AssemblyBuilder assemblyBuilder, string name);
    internal static TypeBuilder CreateTypeBuilder(ModuleBuilder moduleBuilder, string name, TypeAttributes attributes, Type parent, Type[] interfaces);
    internal void InitElseIf();
    internal void InitIf();
    internal void AndIf(Cmp cmpOp);
    internal void AndIf();
    internal void IsInst(Type type);
    internal void Beq(Label label);
    internal void Bne(Label label);
    internal void GotoMethodEnd();
    internal void WhileBegin();
    internal void WhileEnd();
    internal void WhileBreak();
    internal void WhileContinue();
    internal void WhileBeginCondition();
    internal void WhileEndCondition();
}
internal static class System.Xml.Serialization.CodeIdentifier : object {
    internal static CodeDomProvider csharp;
    internal static int MaxIdentifierLength;
    private static CodeIdentifier();
    public static string MakePascal(string identifier);
    public static string MakeValid(string identifier);
    internal static string MakeValidInternal(string identifier);
    private static bool IsValidStart(char c);
    private static bool IsValid(char c);
    internal static void CheckValidIdentifier(string ident);
    internal static string GetCSharpName(string name);
    private static int GetCSharpName(Type t, Type[] parameters, int index, StringBuilder sb);
    internal static string GetCSharpName(Type t);
    private static void EscapeKeywords(string identifier, CodeDomProvider codeProvider, StringBuilder sb);
    private static string EscapeKeywords(string identifier, CodeDomProvider codeProvider);
}
internal class System.Xml.Serialization.CodeIdentifiers : object {
    private HashSet`1<string> _identifiers;
    public string MakeUnique(string identifier);
    public string AddUnique(string identifier, object value);
    public bool IsInUse(string identifier);
    public void Add(string identifier, object value);
}
internal class System.Xml.Serialization.ConstantMapping : Mapping {
    private string _xmlName;
    private string _name;
    private long _value;
    internal string XmlName { get; internal set; }
    internal string Name { get; internal set; }
    internal long Value { get; internal set; }
    internal string get_XmlName();
    internal void set_XmlName(string value);
    internal string get_Name();
    internal void set_Name(string value);
    internal long get_Value();
    internal void set_Value(long value);
}
internal class System.Xml.Serialization.ConstantModel : object {
    private FieldInfo _fieldInfo;
    private long _value;
    internal string Name { get; }
    internal long Value { get; }
    internal FieldInfo FieldInfo { get; }
    internal ConstantModel(FieldInfo fieldInfo, long value);
    internal string get_Name();
    internal long get_Value();
    internal FieldInfo get_FieldInfo();
}
internal class System.Xml.Serialization.ElementAccessor : Accessor {
    private bool _nullable;
    private bool _unbounded;
    internal bool IsSoap { get; }
    internal bool IsNullable { get; internal set; }
    internal bool IsUnbounded { get; internal set; }
    internal bool get_IsSoap();
    internal bool get_IsNullable();
    internal void set_IsNullable(bool value);
    internal bool get_IsUnbounded();
    internal void set_IsUnbounded(bool value);
    internal ElementAccessor Clone();
}
internal class System.Xml.Serialization.EnumMapping : PrimitiveMapping {
    private ConstantMapping[] _constants;
    private bool _isFlags;
    internal bool IsFlags { get; internal set; }
    internal ConstantMapping[] Constants { get; internal set; }
    internal bool get_IsFlags();
    internal void set_IsFlags(bool value);
    internal ConstantMapping[] get_Constants();
    internal void set_Constants(ConstantMapping[] value);
}
internal class System.Xml.Serialization.EnumModel : TypeModel {
    private ConstantModel[] _constants;
    internal ConstantModel[] Constants { get; }
    internal EnumModel(Type type, TypeDesc typeDesc, ModelScope scope);
    internal ConstantModel[] get_Constants();
    private ConstantModel GetConstantModel(FieldInfo fieldInfo);
}
internal class System.Xml.Serialization.FieldModel : object {
    private SpecifiedAccessor _checkSpecified;
    private MemberInfo _memberInfo;
    private MemberInfo _checkSpecifiedMemberInfo;
    private MethodInfo _checkShouldPersistMethodInfo;
    private bool _checkShouldPersist;
    private bool _readOnly;
    private bool _isProperty;
    private Type _fieldType;
    private string _name;
    private TypeDesc _fieldTypeDesc;
    internal string Name { get; }
    internal Type FieldType { get; }
    internal TypeDesc FieldTypeDesc { get; }
    internal bool CheckShouldPersist { get; }
    internal SpecifiedAccessor CheckSpecified { get; }
    internal MemberInfo MemberInfo { get; }
    internal MemberInfo CheckSpecifiedMemberInfo { get; }
    internal MethodInfo CheckShouldPersistMethodInfo { get; }
    internal bool ReadOnly { get; }
    internal bool IsProperty { get; }
    internal FieldModel(string name, Type fieldType, TypeDesc fieldTypeDesc, bool checkSpecified, bool checkShouldPersist);
    internal FieldModel(string name, Type fieldType, TypeDesc fieldTypeDesc, bool checkSpecified, bool checkShouldPersist, bool readOnly);
    internal FieldModel(MemberInfo memberInfo, Type fieldType, TypeDesc fieldTypeDesc);
    internal string get_Name();
    internal Type get_FieldType();
    internal TypeDesc get_FieldTypeDesc();
    internal bool get_CheckShouldPersist();
    internal SpecifiedAccessor get_CheckSpecified();
    internal MemberInfo get_MemberInfo();
    internal MemberInfo get_CheckSpecifiedMemberInfo();
    internal MethodInfo get_CheckShouldPersistMethodInfo();
    internal bool get_ReadOnly();
    internal bool get_IsProperty();
}
internal class System.Xml.Serialization.ForState : object {
    private LocalBuilder _indexVar;
    private Label _beginLabel;
    private Label _testLabel;
    private object _end;
    internal LocalBuilder Index { get; }
    internal Label BeginLabel { get; }
    internal Label TestLabel { get; }
    internal object End { get; }
    internal ForState(LocalBuilder indexVar, Label beginLabel, Label testLabel, object end);
    internal LocalBuilder get_Index();
    internal Label get_BeginLabel();
    internal Label get_TestLabel();
    internal object get_End();
}
internal static class System.Xml.Serialization.Globals : object {
    [SecurityCriticalAttribute]
private static Type s_typeOfDBNull;
    [SecurityCriticalAttribute]
private static object s_valueOfDBNull;
    internal static Type TypeOfDBNull { get; }
    internal static object ValueOfDBNull { get; }
    [SecuritySafeCriticalAttribute]
internal static Type get_TypeOfDBNull();
    [SecuritySafeCriticalAttribute]
internal static object get_ValueOfDBNull();
    internal static bool IsDBNullValue(object o);
    internal static Exception NotSupported(string msg);
    internal static bool IsValidLanguageIndependentIdentifier(string ident);
}
internal class System.Xml.Serialization.IfState : object {
    private Label _elseBegin;
    private Label _endIf;
    internal Label EndIf { get; internal set; }
    internal Label ElseBegin { get; internal set; }
    internal Label get_EndIf();
    internal void set_EndIf(Label value);
    internal Label get_ElseBegin();
    internal void set_ElseBegin(Label value);
}
internal class System.Xml.Serialization.ImportStructWorkItem : object {
    private StructModel _model;
    private StructMapping _mapping;
    internal StructModel Model { get; }
    internal StructMapping Mapping { get; }
    internal ImportStructWorkItem(StructModel model, StructMapping mapping);
    internal StructModel get_Model();
    internal StructMapping get_Mapping();
}
[DefaultMemberAttribute("Item")]
internal interface System.Xml.Serialization.INameScope {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string name, string ns);
    public abstract virtual void set_Item(string name, string ns, object value);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Serialization.LocalScope : object {
    public LocalScope parent;
    private Dictionary`2<string, LocalBuilder> _locals;
    public LocalBuilder Item { get; public set; }
    public LocalScope(LocalScope parent);
    public void Add(string key, LocalBuilder value);
    public bool ContainsKey(string key);
    public bool TryGetValue(string key, LocalBuilder& value);
    public LocalBuilder get_Item(string key);
    public void set_Item(string key, LocalBuilder value);
    public void AddToFreeLocals(Dictionary`2<Tuple`2<Type, string>, Queue`1<LocalBuilder>> freeLocals);
}
internal abstract class System.Xml.Serialization.Mapping : object {
    internal bool IsSoap { get; }
    protected Mapping(Mapping mapping);
    internal bool get_IsSoap();
}
internal class System.Xml.Serialization.MemberMapping : AccessorMapping {
    private string _name;
    private bool _checkShouldPersist;
    private SpecifiedAccessor _checkSpecified;
    private bool _isReturnValue;
    private bool _readOnly;
    private int _sequenceId;
    private MemberInfo _memberInfo;
    private MemberInfo _checkSpecifiedMemberInfo;
    private MethodInfo _checkShouldPersistMethodInfo;
    internal bool CheckShouldPersist { get; internal set; }
    internal SpecifiedAccessor CheckSpecified { get; internal set; }
    internal string Name { get; internal set; }
    internal MemberInfo MemberInfo { get; internal set; }
    internal MemberInfo CheckSpecifiedMemberInfo { get; internal set; }
    internal MethodInfo CheckShouldPersistMethodInfo { get; internal set; }
    internal bool IsReturnValue { get; internal set; }
    internal bool ReadOnly { get; internal set; }
    internal bool IsSequence { get; }
    internal int SequenceId { get; internal set; }
    private MemberMapping(MemberMapping mapping);
    internal bool get_CheckShouldPersist();
    internal void set_CheckShouldPersist(bool value);
    internal SpecifiedAccessor get_CheckSpecified();
    internal void set_CheckSpecified(SpecifiedAccessor value);
    internal string get_Name();
    internal void set_Name(string value);
    internal MemberInfo get_MemberInfo();
    internal void set_MemberInfo(MemberInfo value);
    internal MemberInfo get_CheckSpecifiedMemberInfo();
    internal void set_CheckSpecifiedMemberInfo(MemberInfo value);
    internal MethodInfo get_CheckShouldPersistMethodInfo();
    internal void set_CheckShouldPersistMethodInfo(MethodInfo value);
    internal bool get_IsReturnValue();
    internal void set_IsReturnValue(bool value);
    internal bool get_ReadOnly();
    internal void set_ReadOnly(bool value);
    internal bool get_IsSequence();
    internal int get_SequenceId();
    internal void set_SequenceId(int value);
    private string GetNullableType(TypeDesc td);
    internal MemberMapping Clone();
}
internal class System.Xml.Serialization.MemberMappingComparer : object {
    public sealed virtual int Compare(MemberMapping m1, MemberMapping m2);
}
internal class System.Xml.Serialization.MembersMapping : TypeMapping {
    private MemberMapping[] _members;
    private bool _hasWrapperElement;
    private bool _writeAccessors;
    private MemberMapping _xmlnsMember;
    internal MemberMapping[] Members { get; internal set; }
    internal MemberMapping XmlnsMember { get; internal set; }
    internal bool HasWrapperElement { get; internal set; }
    internal bool WriteAccessors { get; }
    internal MemberMapping[] get_Members();
    internal void set_Members(MemberMapping[] value);
    internal MemberMapping get_XmlnsMember();
    internal void set_XmlnsMember(MemberMapping value);
    internal bool get_HasWrapperElement();
    internal void set_HasWrapperElement(bool value);
    internal bool get_WriteAccessors();
}
internal class System.Xml.Serialization.MethodBuilderInfo : object {
    public MethodBuilder MethodBuilder;
    public Type[] ParameterTypes;
    public MethodBuilderInfo(MethodBuilder methodBuilder, Type[] parameterTypes);
    public void Validate(Type returnType, Type[] parameterTypes, MethodAttributes attributes);
}
internal class System.Xml.Serialization.ModelScope : object {
    private TypeScope _typeScope;
    private Dictionary`2<Type, TypeModel> _models;
    private Dictionary`2<Type, TypeModel> _arrayModels;
    internal TypeScope TypeScope { get; }
    internal ModelScope(TypeScope typeScope);
    internal TypeScope get_TypeScope();
    internal TypeModel GetTypeModel(Type type);
    internal TypeModel GetTypeModel(Type type, bool directReference);
    internal ArrayModel GetArrayModel(Type type);
}
internal class System.Xml.Serialization.NameKey : object {
    private string _ns;
    private string _name;
    internal NameKey(string name, string ns);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Serialization.NameTable : object {
    private Dictionary`2<NameKey, object> _table;
    internal object Item { get; internal set; }
    private object System.Xml.Serialization.INameScope.Item { get; private set; }
    internal ICollection Values { get; }
    internal void Add(string name, string ns, object value);
    internal object get_Item(string name, string ns);
    internal void set_Item(string name, string ns, object value);
    private sealed virtual override object System.Xml.Serialization.INameScope.get_Item(string name, string ns);
    private sealed virtual override void System.Xml.Serialization.INameScope.set_Item(string name, string ns, object value);
    internal ICollection get_Values();
    internal Array ToArray(Type type);
}
internal class System.Xml.Serialization.NullableMapping : TypeMapping {
    private TypeMapping _baseMapping;
    internal TypeMapping BaseMapping { get; internal set; }
    internal string DefaultElementName { get; }
    internal TypeMapping get_BaseMapping();
    internal void set_BaseMapping(TypeMapping value);
    internal virtual string get_DefaultElementName();
}
internal class System.Xml.Serialization.PrimitiveMapping : TypeMapping {
    private bool _isList;
    internal bool IsList { get; internal set; }
    internal virtual bool get_IsList();
    internal virtual void set_IsList(bool value);
}
internal class System.Xml.Serialization.PrimitiveModel : TypeModel {
    internal PrimitiveModel(Type type, TypeDesc typeDesc, ModelScope scope);
}
internal class System.Xml.Serialization.RecursionLimiter : object {
    private int _maxDepth;
    private int _depth;
    private WorkItems _deferredWorkItems;
    internal bool IsExceededLimit { get; }
    internal int Depth { get; internal set; }
    internal WorkItems DeferredWorkItems { get; }
    internal bool get_IsExceededLimit();
    internal int get_Depth();
    internal void set_Depth(int value);
    internal WorkItems get_DeferredWorkItems();
}
internal class System.Xml.Serialization.ReflectionAwareILGen : object {
    private static string hexDigits;
    private static string arrayMemberKey;
    internal void WriteReflectionInit(TypeScope scope);
    internal void ILGenForEnumLongValue(CodeGenerator ilg, string variable);
    internal string GetStringForTypeof(string typeFullName);
    internal string GetStringForMember(string obj, string memberName, TypeDesc typeDesc);
    internal SourceInfo GetSourceForMember(string obj, MemberMapping member, TypeDesc typeDesc, CodeGenerator ilg);
    internal SourceInfo GetSourceForMember(string obj, MemberMapping member, MemberInfo memberInfo, TypeDesc typeDesc, CodeGenerator ilg);
    internal void ILGenForEnumMember(CodeGenerator ilg, Type type, string memberName);
    internal string GetStringForArrayMember(string arrayName, string subscript, TypeDesc arrayTypeDesc);
    internal string GetStringForMethod(string obj, string typeFullName, string memberName);
    internal void ILGenForCreateInstance(CodeGenerator ilg, Type type, bool ctorInaccessible, bool cast);
    internal void ILGenForCreateInstance(CodeGenerator ilg, Type type, Type cast, bool nonPublic);
    internal void WriteLocalDecl(string variableName, SourceInfo initValue);
    internal void WriteCreateInstance(string source, bool ctorInaccessible, Type type, CodeGenerator ilg);
    internal void WriteInstanceOf(SourceInfo source, Type type, CodeGenerator ilg);
    internal void WriteArrayLocalDecl(string typeName, string variableName, SourceInfo initValue, TypeDesc arrayTypeDesc);
    internal void WriteTypeCompare(string variable, Type type, CodeGenerator ilg);
    internal void WriteArrayTypeCompare(string variable, Type arrayType, CodeGenerator ilg);
    internal static string GetQuotedCSharpString(string value);
    internal static string GetCSharpString(string value);
}
internal class System.Xml.Serialization.SerializableMapping : SpecialMapping {
    private Type _type;
    private bool _needSchema;
    private MethodInfo _getSchemaMethod;
    private XmlQualifiedName _xsiType;
    private XmlSchemaSet _schemas;
    private bool _any;
    private SerializableMapping _derivedMappings;
    private SerializableMapping _nextDerivedMapping;
    internal bool IsAny { get; }
    internal SerializableMapping DerivedMappings { get; }
    internal SerializableMapping NextDerivedMapping { get; }
    internal Type Type { get; internal set; }
    internal XmlQualifiedName XsiType { get; }
    internal SerializableMapping(MethodInfo getSchemaMethod, bool any, string ns);
    internal bool get_IsAny();
    internal SerializableMapping get_DerivedMappings();
    internal SerializableMapping get_NextDerivedMapping();
    internal Type get_Type();
    internal void set_Type(Type value);
    internal XmlQualifiedName get_XsiType();
    private void RetrieveSerializableSchema();
}
internal class System.Xml.Serialization.Soap : object {
    internal static string Encoding;
    internal static string UrType;
    internal static string Array;
    internal static string ArrayType;
}
internal class System.Xml.Serialization.Soap12 : object {
    internal static string Encoding;
    internal static string RpcNamespace;
    internal static string RpcResult;
}
internal class System.Xml.Serialization.SourceInfo : object {
    private static Regex s_regex;
    private static Regex s_regex2;
    public string Source;
    public string Arg;
    public MemberInfo MemberInfo;
    public Type Type;
    public CodeGenerator ILG;
    public SourceInfo(string source, string arg, MemberInfo memberInfo, Type type, CodeGenerator ilg);
    private static SourceInfo();
    public SourceInfo CastTo(TypeDesc td);
    public void LoadAddress(Type elementType);
    public void Load(Type elementType);
    private void InternalLoad(Type elementType, bool asAddress);
    private void Convert(Type sourceType, Type targetType, bool asAddress);
    private void ConvertNullableValue(Type nullableType, Type targetType);
    public static string op_Implicit(SourceInfo source);
    public static bool op_Inequality(SourceInfo a, SourceInfo b);
    public static bool op_Equality(SourceInfo a, SourceInfo b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Xml.Serialization.SpecialMapping : TypeMapping {
}
internal class System.Xml.Serialization.SpecialModel : TypeModel {
    internal SpecialModel(Type type, TypeDesc typeDesc, ModelScope scope);
}
internal enum System.Xml.Serialization.SpecifiedAccessor : Enum {
    public int value__;
    public static SpecifiedAccessor None;
    public static SpecifiedAccessor ReadOnly;
    public static SpecifiedAccessor ReadWrite;
}
internal class System.Xml.Serialization.StructMapping : TypeMapping {
    private MemberMapping[] _members;
    private StructMapping _baseMapping;
    private StructMapping _derivedMappings;
    private StructMapping _nextDerivedMapping;
    private MemberMapping _xmlnsMember;
    private bool _hasSimpleContent;
    private bool _isSequence;
    private NameTable _elements;
    private NameTable _attributes;
    internal StructMapping BaseMapping { get; internal set; }
    internal StructMapping DerivedMappings { get; }
    internal bool IsFullyInitialized { get; }
    internal NameTable LocalElements { get; }
    internal NameTable LocalAttributes { get; }
    private object System.Xml.Serialization.INameScope.Item { get; private set; }
    internal StructMapping NextDerivedMapping { get; }
    internal bool HasSimpleContent { get; }
    internal bool HasXmlnsMember { get; }
    internal MemberMapping[] Members { get; internal set; }
    internal MemberMapping XmlnsMember { get; internal set; }
    internal bool IsSequence { get; internal set; }
    internal StructMapping get_BaseMapping();
    internal void set_BaseMapping(StructMapping value);
    internal StructMapping get_DerivedMappings();
    internal bool get_IsFullyInitialized();
    internal NameTable get_LocalElements();
    internal NameTable get_LocalAttributes();
    private sealed virtual override object System.Xml.Serialization.INameScope.get_Item(string name, string ns);
    private sealed virtual override void System.Xml.Serialization.INameScope.set_Item(string name, string ns, object value);
    internal StructMapping get_NextDerivedMapping();
    internal bool get_HasSimpleContent();
    internal bool get_HasXmlnsMember();
    internal MemberMapping[] get_Members();
    internal void set_Members(MemberMapping[] value);
    internal MemberMapping get_XmlnsMember();
    internal void set_XmlnsMember(MemberMapping value);
    internal MemberMapping FindDeclaringMapping(MemberMapping member, StructMapping& declaringMapping, string parent);
    internal bool Declares(MemberMapping member, string parent);
    internal void SetContentModel(TextAccessor text, bool hasElements);
    internal bool HasExplicitSequence();
    internal void SetSequence();
    internal bool get_IsSequence();
    internal void set_IsSequence(bool value);
}
internal class System.Xml.Serialization.StructModel : TypeModel {
    internal StructModel(Type type, TypeDesc typeDesc, ModelScope scope);
    internal MemberInfo[] GetMemberInfos();
    internal FieldModel GetFieldModel(MemberInfo memberInfo);
    private void CheckSupportedMember(TypeDesc typeDesc, MemberInfo member, Type type);
    private FieldModel GetFieldModel(FieldInfo fieldInfo);
    private FieldModel GetPropertyModel(PropertyInfo propertyInfo);
    internal static bool CheckPropertyRead(PropertyInfo propertyInfo);
}
internal class System.Xml.Serialization.TempAssembly : object {
    internal static string GeneratedAssemblyNamespace;
    private Assembly _assembly;
    private XmlSerializerImplementation _contract;
    private IDictionary _writerMethods;
    private IDictionary _readerMethods;
    private TempMethodDictionary _methods;
    internal XmlSerializerImplementation Contract { get; }
    internal TempAssembly(XmlMapping[] xmlMappings, Type[] types, string defaultNamespace, string location, object evidence);
    internal XmlSerializerImplementation get_Contract();
    internal void InitAssemblyMethods(XmlMapping[] xmlMappings);
    internal static Assembly GenerateRefEmitAssembly(XmlMapping[] xmlMappings, Type[] types, string defaultNamespace, object evidence);
    private static MethodInfo GetMethodFromType(Type type, string methodName);
    internal static Type GetTypeFromAssembly(Assembly assembly, string typeName);
    internal bool CanRead(XmlMapping mapping, XmlReader xmlReader);
    private string ValidateEncodingStyle(string encodingStyle, string methodKey);
    internal object InvokeReader(XmlMapping mapping, XmlReader xmlReader, object events, string encodingStyle);
    internal void InvokeWriter(XmlMapping mapping, XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle, string id);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Serialization.TempAssemblyCache : object {
    private Dictionary`2<TempAssemblyCacheKey, TempAssembly> _cache;
    internal TempAssembly Item { get; }
    internal TempAssembly get_Item(string ns, object o);
    internal void Add(string ns, object o, TempAssembly assembly);
}
internal class System.Xml.Serialization.TempAssemblyCacheKey : object {
    private string _ns;
    private object _type;
    internal TempAssemblyCacheKey(string ns, object type);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
internal class System.Xml.Serialization.TextAccessor : Accessor {
}
internal enum System.Xml.Serialization.TypeCode : Enum {
    public int value__;
    public static TypeCode Empty;
    public static TypeCode Object;
    public static TypeCode DBNull;
    public static TypeCode Boolean;
    public static TypeCode Char;
    public static TypeCode SByte;
    public static TypeCode Byte;
    public static TypeCode Int16;
    public static TypeCode UInt16;
    public static TypeCode Int32;
    public static TypeCode UInt32;
    public static TypeCode Int64;
    public static TypeCode UInt64;
    public static TypeCode Single;
    public static TypeCode Double;
    public static TypeCode Decimal;
    public static TypeCode DateTime;
    public static TypeCode String;
}
internal class System.Xml.Serialization.TypeDesc : object {
    private string _name;
    private string _fullName;
    private string _cSharpName;
    private TypeDesc _arrayElementTypeDesc;
    private TypeDesc _arrayTypeDesc;
    private TypeDesc _nullableTypeDesc;
    private TypeKind _kind;
    private XmlSchemaType _dataType;
    private Type _type;
    private TypeDesc _baseTypeDesc;
    private TypeFlags _flags;
    private string _formatterName;
    private bool _isXsdType;
    private int _weight;
    private Exception _exception;
    internal TypeFlags Flags { get; }
    internal bool IsXsdType { get; }
    internal bool IsMappedType { get; }
    internal string Name { get; }
    internal string FullName { get; }
    internal string CSharpName { get; }
    internal XmlSchemaType DataType { get; }
    internal Type Type { get; }
    internal string FormatterName { get; }
    internal TypeKind Kind { get; }
    internal bool IsValueType { get; }
    internal bool CanBeAttributeValue { get; }
    internal bool XmlEncodingNotRequired { get; }
    internal bool CanBeElementValue { get; }
    internal bool CanBeTextValue { get; }
    internal bool IsSpecial { get; }
    internal bool HasCustomFormatter { get; }
    internal bool HasDefaultSupport { get; }
    internal bool CollapseWhitespace { get; }
    internal bool HasDefaultConstructor { get; }
    internal bool IsUnsupported { get; }
    internal bool IsGenericInterface { get; }
    internal bool IsPrivateImplementation { get; }
    internal bool CannotNew { get; }
    internal bool IsAbstract { get; }
    internal bool IsOptionalValue { get; }
    internal bool UseReflection { get; }
    internal bool IsVoid { get; }
    internal bool IsClass { get; }
    internal bool IsStructLike { get; }
    internal bool IsArrayLike { get; }
    internal bool IsCollection { get; }
    internal bool IsEnumerable { get; }
    internal bool IsArray { get; }
    internal bool IsPrimitive { get; }
    internal bool IsEnum { get; }
    internal bool IsNullable { get; }
    internal bool IsRoot { get; }
    internal bool ConstructorInaccessible { get; }
    internal Exception Exception { get; internal set; }
    internal TypeDesc ArrayElementTypeDesc { get; internal set; }
    internal int Weight { get; }
    internal TypeDesc BaseTypeDesc { get; internal set; }
    internal TypeDesc(string name, string fullName, XmlSchemaType dataType, TypeKind kind, TypeDesc baseTypeDesc, TypeFlags flags, string formatterName);
    internal TypeDesc(Type type, bool isXsdType, XmlSchemaType dataType, string formatterName, TypeFlags flags);
    internal TypeDesc(Type type, string name, string fullName, TypeKind kind, TypeDesc baseTypeDesc, TypeFlags flags, TypeDesc arrayElementTypeDesc);
    public virtual string ToString();
    internal TypeFlags get_Flags();
    internal bool get_IsXsdType();
    internal bool get_IsMappedType();
    internal string get_Name();
    internal string get_FullName();
    internal string get_CSharpName();
    internal XmlSchemaType get_DataType();
    internal Type get_Type();
    internal string get_FormatterName();
    internal TypeKind get_Kind();
    internal bool get_IsValueType();
    internal bool get_CanBeAttributeValue();
    internal bool get_XmlEncodingNotRequired();
    internal bool get_CanBeElementValue();
    internal bool get_CanBeTextValue();
    internal bool get_IsSpecial();
    internal bool get_HasCustomFormatter();
    internal bool get_HasDefaultSupport();
    internal bool get_CollapseWhitespace();
    internal bool get_HasDefaultConstructor();
    internal bool get_IsUnsupported();
    internal bool get_IsGenericInterface();
    internal bool get_IsPrivateImplementation();
    internal bool get_CannotNew();
    internal bool get_IsAbstract();
    internal bool get_IsOptionalValue();
    internal bool get_UseReflection();
    internal bool get_IsVoid();
    internal bool get_IsClass();
    internal bool get_IsStructLike();
    internal bool get_IsArrayLike();
    internal bool get_IsCollection();
    internal bool get_IsEnumerable();
    internal bool get_IsArray();
    internal bool get_IsPrimitive();
    internal bool get_IsEnum();
    internal bool get_IsNullable();
    internal bool get_IsRoot();
    internal bool get_ConstructorInaccessible();
    internal Exception get_Exception();
    internal void set_Exception(Exception value);
    internal TypeDesc GetNullableTypeDesc(Type type);
    internal void CheckSupported();
    internal void CheckNeedConstructor();
    internal TypeDesc get_ArrayElementTypeDesc();
    internal void set_ArrayElementTypeDesc(TypeDesc value);
    internal int get_Weight();
    internal TypeDesc CreateArrayTypeDesc();
    internal TypeDesc get_BaseTypeDesc();
    internal void set_BaseTypeDesc(TypeDesc value);
}
[ExtensionAttribute]
internal static class System.Xml.Serialization.TypeExtensionMethods : object {
    [ExtensionAttribute]
public static TypeCode GetTypeCode(Type type);
}
internal enum System.Xml.Serialization.TypeFlags : Enum {
    public int value__;
    public static TypeFlags None;
    public static TypeFlags Abstract;
    public static TypeFlags Reference;
    public static TypeFlags Special;
    public static TypeFlags CanBeAttributeValue;
    public static TypeFlags CanBeTextValue;
    public static TypeFlags CanBeElementValue;
    public static TypeFlags HasCustomFormatter;
    public static TypeFlags AmbiguousDataType;
    public static TypeFlags IgnoreDefault;
    public static TypeFlags HasIsEmpty;
    public static TypeFlags HasDefaultConstructor;
    public static TypeFlags XmlEncodingNotRequired;
    public static TypeFlags UseReflection;
    public static TypeFlags CollapseWhitespace;
    public static TypeFlags OptionalValue;
    public static TypeFlags CtorInaccessible;
    public static TypeFlags UsePrivateImplementation;
    public static TypeFlags GenericInterface;
    public static TypeFlags Unsupported;
}
internal enum System.Xml.Serialization.TypeKind : Enum {
    public int value__;
    public static TypeKind Root;
    public static TypeKind Primitive;
    public static TypeKind Enum;
    public static TypeKind Struct;
    public static TypeKind Class;
    public static TypeKind Array;
    public static TypeKind Collection;
    public static TypeKind Enumerable;
    public static TypeKind Void;
    public static TypeKind Node;
    public static TypeKind Attribute;
    public static TypeKind Serializable;
}
internal abstract class System.Xml.Serialization.TypeMapping : Mapping {
    private TypeDesc _typeDesc;
    private string _typeNs;
    private string _typeName;
    private bool _includeInSchema;
    internal string Namespace { get; internal set; }
    internal string TypeName { get; internal set; }
    internal TypeDesc TypeDesc { get; internal set; }
    internal bool IncludeInSchema { get; internal set; }
    internal bool IsList { get; internal set; }
    internal bool IsAnonymousType { get; }
    internal string DefaultElementName { get; }
    internal string get_Namespace();
    internal void set_Namespace(string value);
    internal string get_TypeName();
    internal void set_TypeName(string value);
    internal TypeDesc get_TypeDesc();
    internal void set_TypeDesc(TypeDesc value);
    internal bool get_IncludeInSchema();
    internal void set_IncludeInSchema(bool value);
    internal virtual bool get_IsList();
    internal virtual void set_IsList(bool value);
    internal bool get_IsAnonymousType();
    internal virtual string get_DefaultElementName();
}
internal abstract class System.Xml.Serialization.TypeModel : object {
    private TypeDesc _typeDesc;
    private Type _type;
    private ModelScope _scope;
    internal Type Type { get; }
    internal ModelScope ModelScope { get; }
    internal TypeDesc TypeDesc { get; }
    protected TypeModel(Type type, TypeDesc typeDesc, ModelScope scope);
    internal Type get_Type();
    internal ModelScope get_ModelScope();
    internal TypeDesc get_TypeDesc();
}
internal class System.Xml.Serialization.TypeScope : object {
    private Dictionary`2<Type, TypeDesc> _typeDescs;
    private Dictionary`2<Type, TypeDesc> _arrayTypeDescs;
    private List`1<TypeMapping> _typeMappings;
    private static Dictionary`2<Type, TypeDesc> s_primitiveTypes;
    private static Dictionary`2<XmlSchemaType, TypeDesc> s_primitiveDataTypes;
    private static NameTable s_primitiveNames;
    private static String[] s_unsupportedTypes;
    internal ICollection Types { get; }
    internal ICollection TypeMappings { get; }
    internal static Dictionary`2<Type, TypeDesc> PrimtiveTypes { get; }
    private static TypeScope();
    internal static bool IsKnownType(Type type);
    private static void AddPrimitive(Type type, string dataTypeName, string formatterName, TypeFlags flags);
    private static void AddNonXsdPrimitive(Type type, string dataTypeName, string ns, string formatterName, XmlQualifiedName baseTypeName, Object[] facets, TypeFlags flags);
    internal TypeDesc GetTypeDesc(string name, string ns);
    internal TypeDesc GetTypeDesc(string name, string ns, TypeFlags flags);
    internal TypeDesc GetTypeDesc(Type type);
    internal TypeDesc GetTypeDesc(Type type, MemberInfo source, bool directReference);
    internal TypeDesc GetTypeDesc(Type type, MemberInfo source, bool directReference, bool throwOnError);
    internal TypeDesc GetArrayTypeDesc(Type type);
    private TypeDesc ImportTypeDesc(Type type, MemberInfo memberInfo, bool directReference);
    internal static bool IsOptionalValue(Type type);
    internal static string TypeName(Type t);
    internal static Type GetArrayElementType(Type type, string memberInfo);
    internal static MemberMapping[] GetAllMembers(StructMapping mapping);
    internal static void GetAllMembers(StructMapping mapping, List`1<MemberMapping> list);
    internal static MemberMapping[] GetAllMembers(StructMapping mapping, Dictionary`2<string, MemberInfo> memberInfos);
    internal static MemberMapping[] GetSettableMembers(StructMapping structMapping);
    private static void GetSettableMembers(StructMapping mapping, List`1<MemberMapping> list);
    private static bool CanWriteProperty(PropertyInfo propertyInfo, TypeDesc typeDesc);
    internal static MemberMapping[] GetSettableMembers(StructMapping mapping, Dictionary`2<string, MemberInfo> memberInfos);
    private static void PopulateMemberInfos(StructMapping structMapping, MemberMapping[] memberMappings, Dictionary`2<string, MemberInfo> memberInfos);
    private static bool ShouldBeReplaced(MemberInfo memberInfoToBeReplaced, Type derivedType, MemberInfo& replacedInfo);
    private static TypeFlags GetConstructorFlags(Type type, Exception& exception);
    private static Type GetEnumeratorElementType(Type type, TypeFlags& flags);
    internal static PropertyInfo GetDefaultIndexer(Type type, string memberInfo);
    private static Type GetCollectionElementType(Type type, string memberInfo);
    internal static XmlQualifiedName ParseWsdlArrayType(string type, String& dims, XmlSchemaObject parent);
    internal ICollection get_Types();
    internal void AddTypeMapping(TypeMapping typeMapping);
    internal ICollection get_TypeMappings();
    internal static Dictionary`2<Type, TypeDesc> get_PrimtiveTypes();
}
internal class System.Xml.Serialization.UrtTypes : object {
    internal static string Namespace;
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Serialization.WorkItems : object {
    private List`1<ImportStructWorkItem> _list;
    internal ImportStructWorkItem Item { get; internal set; }
    internal int Count { get; }
    internal ImportStructWorkItem get_Item(int index);
    internal void set_Item(int index, ImportStructWorkItem value);
    internal int get_Count();
    internal void Add(ImportStructWorkItem item);
    internal bool Contains(StructMapping mapping);
    internal int IndexOf(StructMapping mapping);
    internal void RemoveAt(int index);
}
internal class System.Xml.Serialization.Wsdl : object {
    internal static string Namespace;
    internal static string ArrayType;
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlAnyAttributeAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlAnyElementAttribute : Attribute {
    private string _name;
    private string _ns;
    private int _order;
    private bool _nsSpecified;
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public int Order { get; public set; }
    internal bool NamespaceSpecified { get; }
    public XmlAnyElementAttribute(string name);
    public XmlAnyElementAttribute(string name, string ns);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public int get_Order();
    public void set_Order(int value);
    internal bool get_NamespaceSpecified();
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlAnyElementAttributes : object {
    private List`1<XmlAnyElementAttribute> _list;
    public XmlAnyElementAttribute Item { get; public set; }
    private IList List { get; }
    public int Count { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    public XmlAnyElementAttribute get_Item(int index);
    public void set_Item(int index, XmlAnyElementAttribute value);
    public int Add(XmlAnyElementAttribute value);
    public void Insert(int index, XmlAnyElementAttribute value);
    public int IndexOf(XmlAnyElementAttribute value);
    public bool Contains(XmlAnyElementAttribute value);
    public void Remove(XmlAnyElementAttribute value);
    public void CopyTo(XmlAnyElementAttribute[] array, int index);
    private IList get_List();
    public sealed virtual int get_Count();
    public sealed virtual void Clear();
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    public sealed virtual IEnumerator GetEnumerator();
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlArrayAttribute : Attribute {
    private string _elementName;
    private string _ns;
    private bool _nullable;
    private XmlSchemaForm _form;
    private int _order;
    public string ElementName { get; public set; }
    public string Namespace { get; public set; }
    public bool IsNullable { get; public set; }
    public XmlSchemaForm Form { get; public set; }
    public int Order { get; public set; }
    public XmlArrayAttribute(string elementName);
    public string get_ElementName();
    public void set_ElementName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public int get_Order();
    public void set_Order(int value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlArrayItemAttribute : Attribute {
    private string _elementName;
    private Type _type;
    private string _ns;
    private string _dataType;
    private bool _nullable;
    private bool _nullableSpecified;
    private XmlSchemaForm _form;
    private int _nestingLevel;
    public Type Type { get; public set; }
    public string ElementName { get; public set; }
    public string Namespace { get; public set; }
    public int NestingLevel { get; public set; }
    public string DataType { get; public set; }
    public bool IsNullable { get; public set; }
    internal bool IsNullableSpecified { get; }
    public XmlSchemaForm Form { get; public set; }
    public XmlArrayItemAttribute(string elementName);
    public XmlArrayItemAttribute(Type type);
    public XmlArrayItemAttribute(string elementName, Type type);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_ElementName();
    public void set_ElementName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public int get_NestingLevel();
    public void set_NestingLevel(int value);
    public string get_DataType();
    public void set_DataType(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    internal bool get_IsNullableSpecified();
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlArrayItemAttributes : object {
    private List`1<XmlArrayItemAttribute> _list;
    public XmlArrayItemAttribute Item { get; public set; }
    private IList List { get; }
    public int Count { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    public XmlArrayItemAttribute get_Item(int index);
    public void set_Item(int index, XmlArrayItemAttribute value);
    public int Add(XmlArrayItemAttribute value);
    public void Insert(int index, XmlArrayItemAttribute value);
    public int IndexOf(XmlArrayItemAttribute value);
    public bool Contains(XmlArrayItemAttribute value);
    public void Remove(XmlArrayItemAttribute value);
    public void CopyTo(XmlArrayItemAttribute[] array, int index);
    private IList get_List();
    public sealed virtual int get_Count();
    public sealed virtual void Clear();
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    public sealed virtual IEnumerator GetEnumerator();
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlAttributeAttribute : Attribute {
    private string _attributeName;
    private Type _type;
    private string _ns;
    private string _dataType;
    private XmlSchemaForm _form;
    public Type Type { get; public set; }
    public string AttributeName { get; public set; }
    public string Namespace { get; public set; }
    public string DataType { get; public set; }
    public XmlSchemaForm Form { get; public set; }
    public XmlAttributeAttribute(string attributeName);
    public XmlAttributeAttribute(Type type);
    public XmlAttributeAttribute(string attributeName, Type type);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_DataType();
    public void set_DataType(string value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
}
internal enum System.Xml.Serialization.XmlAttributeFlags : Enum {
    public int value__;
    public static XmlAttributeFlags Enum;
    public static XmlAttributeFlags Array;
    public static XmlAttributeFlags Text;
    public static XmlAttributeFlags ArrayItems;
    public static XmlAttributeFlags Elements;
    public static XmlAttributeFlags Attribute;
    public static XmlAttributeFlags Root;
    public static XmlAttributeFlags Type;
    public static XmlAttributeFlags AnyElements;
    public static XmlAttributeFlags AnyAttribute;
    public static XmlAttributeFlags ChoiceIdentifier;
    public static XmlAttributeFlags XmlnsDeclarations;
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlAttributeOverrides : object {
    private Dictionary`2<Type, Dictionary`2<string, XmlAttributes>> _types;
    public XmlAttributes Item { get; }
    public XmlAttributes Item { get; }
    public void Add(Type type, XmlAttributes attributes);
    public void Add(Type type, string member, XmlAttributes attributes);
    public XmlAttributes get_Item(Type type);
    public XmlAttributes get_Item(Type type, string member);
}
public class System.Xml.Serialization.XmlAttributes : object {
    private XmlElementAttributes _xmlElements;
    private XmlArrayItemAttributes _xmlArrayItems;
    private XmlAnyElementAttributes _xmlAnyElements;
    private XmlArrayAttribute _xmlArray;
    private XmlAttributeAttribute _xmlAttribute;
    private XmlTextAttribute _xmlText;
    private XmlEnumAttribute _xmlEnum;
    private bool _xmlIgnore;
    private bool _xmlns;
    private object _xmlDefaultValue;
    private XmlRootAttribute _xmlRoot;
    private XmlTypeAttribute _xmlType;
    private XmlAnyAttributeAttribute _xmlAnyAttribute;
    private XmlChoiceIdentifierAttribute _xmlChoiceIdentifier;
    private static Type modreq(System.Runtime.CompilerServices.IsVolatile) s_ignoreAttributeType;
    internal XmlAttributeFlags XmlFlags { get; }
    private static Type IgnoreAttribute { get; }
    public XmlElementAttributes XmlElements { get; }
    public XmlAttributeAttribute XmlAttribute { get; public set; }
    public XmlEnumAttribute XmlEnum { get; public set; }
    public XmlTextAttribute XmlText { get; public set; }
    public XmlArrayAttribute XmlArray { get; public set; }
    public XmlArrayItemAttributes XmlArrayItems { get; }
    public object XmlDefaultValue { get; public set; }
    public bool XmlIgnore { get; public set; }
    public XmlTypeAttribute XmlType { get; public set; }
    public XmlRootAttribute XmlRoot { get; public set; }
    public XmlAnyElementAttributes XmlAnyElements { get; }
    public XmlAnyAttributeAttribute XmlAnyAttribute { get; public set; }
    public XmlChoiceIdentifierAttribute XmlChoiceIdentifier { get; }
    public bool Xmlns { get; public set; }
    public XmlAttributes(MemberInfo memberInfo);
    internal XmlAttributeFlags get_XmlFlags();
    private static Type get_IgnoreAttribute();
    internal static object GetAttr(MemberInfo memberInfo, Type attrType);
    public XmlElementAttributes get_XmlElements();
    public XmlAttributeAttribute get_XmlAttribute();
    public void set_XmlAttribute(XmlAttributeAttribute value);
    public XmlEnumAttribute get_XmlEnum();
    public void set_XmlEnum(XmlEnumAttribute value);
    public XmlTextAttribute get_XmlText();
    public void set_XmlText(XmlTextAttribute value);
    public XmlArrayAttribute get_XmlArray();
    public void set_XmlArray(XmlArrayAttribute value);
    public XmlArrayItemAttributes get_XmlArrayItems();
    public object get_XmlDefaultValue();
    public void set_XmlDefaultValue(object value);
    public bool get_XmlIgnore();
    public void set_XmlIgnore(bool value);
    public XmlTypeAttribute get_XmlType();
    public void set_XmlType(XmlTypeAttribute value);
    public XmlRootAttribute get_XmlRoot();
    public void set_XmlRoot(XmlRootAttribute value);
    public XmlAnyElementAttributes get_XmlAnyElements();
    public XmlAnyAttributeAttribute get_XmlAnyAttribute();
    public void set_XmlAnyAttribute(XmlAnyAttributeAttribute value);
    public XmlChoiceIdentifierAttribute get_XmlChoiceIdentifier();
    public bool get_Xmlns();
    public void set_Xmlns(bool value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlChoiceIdentifierAttribute : Attribute {
    private string _name;
    private MemberInfo _memberInfo;
    public string MemberName { get; public set; }
    internal MemberInfo MemberInfo { get; internal set; }
    public XmlChoiceIdentifierAttribute(string name);
    public string get_MemberName();
    public void set_MemberName(string value);
    internal MemberInfo get_MemberInfo();
    internal void set_MemberInfo(MemberInfo value);
}
internal class System.Xml.Serialization.XmlCustomFormatter : object {
    private static String[] s_allDateFormats;
    private static String[] s_allTimeFormats;
    private static XmlCustomFormatter();
    internal static string FromDate(DateTime value);
    internal static string FromTime(DateTime value);
    internal static string FromDateTime(DateTime value);
    internal static string FromChar(char value);
    internal static string FromXmlName(string name);
    internal static string FromXmlNCName(string ncName);
    internal static string FromXmlNmToken(string nmToken);
    internal static string FromXmlNmTokens(string nmTokens);
    internal static void WriteArrayBase64(XmlWriter writer, Byte[] inData, int start, int count);
    internal static string FromByteArrayHex(Byte[] value);
    internal static string FromEnum(long val, String[] vals, Int64[] ids, string typeName);
    internal static DateTime ToDateTime(string value);
    internal static DateTime ToDateTime(string value, String[] formats);
    internal static DateTime ToDate(string value);
    internal static DateTime ToTime(string value);
    internal static char ToChar(string value);
    internal static string ToXmlName(string value);
    internal static string ToXmlNCName(string value);
    internal static string ToXmlNmToken(string value);
    internal static string ToXmlNmTokens(string value);
    internal static Byte[] ToByteArrayBase64(string value);
    internal static Byte[] ToByteArrayHex(string value);
    internal static long ToEnum(string val, IDictionary vals, string typeName, bool validate);
    private static string CollapseWhitespace(string value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlElementAttribute : Attribute {
    private string _elementName;
    private Type _type;
    private string _ns;
    private string _dataType;
    private bool _nullable;
    private bool _nullableSpecified;
    private XmlSchemaForm _form;
    private int _order;
    public Type Type { get; public set; }
    public string ElementName { get; public set; }
    public string Namespace { get; public set; }
    public string DataType { get; public set; }
    public bool IsNullable { get; public set; }
    internal bool IsNullableSpecified { get; }
    public XmlSchemaForm Form { get; public set; }
    public int Order { get; public set; }
    public XmlElementAttribute(string elementName);
    public XmlElementAttribute(Type type);
    public XmlElementAttribute(string elementName, Type type);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_ElementName();
    public void set_ElementName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_DataType();
    public void set_DataType(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    internal bool get_IsNullableSpecified();
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public int get_Order();
    public void set_Order(int value);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlElementAttributes : object {
    private List`1<XmlElementAttribute> _list;
    public XmlElementAttribute Item { get; public set; }
    private IList List { get; }
    public int Count { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    public XmlElementAttribute get_Item(int index);
    public void set_Item(int index, XmlElementAttribute value);
    public int Add(XmlElementAttribute value);
    public void Insert(int index, XmlElementAttribute value);
    public int IndexOf(XmlElementAttribute value);
    public bool Contains(XmlElementAttribute value);
    public void Remove(XmlElementAttribute value);
    public void CopyTo(XmlElementAttribute[] array, int index);
    private IList get_List();
    public sealed virtual int get_Count();
    public sealed virtual void Clear();
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    public sealed virtual IEnumerator GetEnumerator();
}
[AttributeUsageAttribute("256")]
public class System.Xml.Serialization.XmlEnumAttribute : Attribute {
    private string _name;
    public string Name { get; public set; }
    public XmlEnumAttribute(string name);
    public string get_Name();
    public void set_Name(string value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlIgnoreAttribute : Attribute {
}
[AttributeUsageAttribute("1100")]
public class System.Xml.Serialization.XmlIncludeAttribute : Attribute {
    private Type _type;
    public Type Type { get; public set; }
    public XmlIncludeAttribute(Type type);
    public Type get_Type();
    public void set_Type(Type value);
}
public abstract class System.Xml.Serialization.XmlMapping : object {
    private TypeScope _scope;
    private bool _generateSerializer;
    private ElementAccessor _accessor;
    private string _key;
    private bool _shallow;
    private XmlMappingAccess _access;
    internal ElementAccessor Accessor { get; }
    internal TypeScope Scope { get; }
    public string ElementName { get; }
    public string XsdElementName { get; }
    public string Namespace { get; }
    internal bool GenerateSerializer { get; internal set; }
    internal bool IsReadable { get; }
    internal bool IsWriteable { get; }
    internal bool IsSoap { get; }
    internal string Key { get; }
    internal XmlMapping(TypeScope scope, ElementAccessor accessor);
    internal XmlMapping(TypeScope scope, ElementAccessor accessor, XmlMappingAccess access);
    internal ElementAccessor get_Accessor();
    internal TypeScope get_Scope();
    public string get_ElementName();
    public string get_XsdElementName();
    public string get_Namespace();
    internal bool get_GenerateSerializer();
    internal void set_GenerateSerializer(bool value);
    internal bool get_IsReadable();
    internal bool get_IsWriteable();
    internal bool get_IsSoap();
    public void SetKey(string key);
    internal void SetKeyInternal(string key);
    internal static string GenerateKey(Type type, XmlRootAttribute root, string ns);
    internal string get_Key();
    internal void CheckShallow();
    internal static bool IsShallow(XmlMapping[] mappings);
}
[FlagsAttribute]
public enum System.Xml.Serialization.XmlMappingAccess : Enum {
    public int value__;
    public static XmlMappingAccess None;
    public static XmlMappingAccess Read;
    public static XmlMappingAccess Write;
}
public class System.Xml.Serialization.XmlMemberMapping : object {
    private MemberMapping _mapping;
    internal Accessor Accessor { get; }
    public bool Any { get; }
    public string ElementName { get; }
    public string XsdElementName { get; }
    public string Namespace { get; }
    public string MemberName { get; }
    public string TypeName { get; }
    public string TypeNamespace { get; }
    public string TypeFullName { get; }
    public bool CheckSpecified { get; }
    internal XmlMemberMapping(MemberMapping mapping);
    internal Accessor get_Accessor();
    public bool get_Any();
    public string get_ElementName();
    public string get_XsdElementName();
    public string get_Namespace();
    public string get_MemberName();
    public string get_TypeName();
    public string get_TypeNamespace();
    public string get_TypeFullName();
    public bool get_CheckSpecified();
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlMembersMapping : XmlMapping {
    private XmlMemberMapping[] _mappings;
    public string TypeName { get; }
    public string TypeNamespace { get; }
    public XmlMemberMapping Item { get; }
    public int Count { get; }
    internal XmlMembersMapping(TypeScope scope, ElementAccessor accessor, XmlMappingAccess access);
    public string get_TypeName();
    public string get_TypeNamespace();
    public XmlMemberMapping get_Item(int index);
    public int get_Count();
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlNamespaceDeclarationsAttribute : Attribute {
}
internal class System.Xml.Serialization.XmlnsAccessor : Accessor {
}
public class System.Xml.Serialization.XmlReflectionImporter : object {
    private TypeScope _typeScope;
    private XmlAttributeOverrides _attributeOverrides;
    private XmlAttributes _defaultAttributes;
    private NameTable _types;
    private NameTable _nullables;
    private NameTable _elements;
    private NameTable _xsdAttributes;
    private Dictionary`2<Type, SpecialMapping> _specials;
    private Dictionary`2<Type, TypeMapping> _anonymous;
    private StructMapping _root;
    private string _defaultNs;
    private ModelScope _modelScope;
    private int _arrayNestingLevel;
    private XmlArrayItemAttributes _savedArrayItemAttributes;
    private string _savedArrayNamespace;
    private int _choiceNum;
    public XmlReflectionImporter(string defaultNamespace);
    public XmlReflectionImporter(XmlAttributeOverrides attributeOverrides);
    public XmlReflectionImporter(XmlAttributeOverrides attributeOverrides, string defaultNamespace);
    public void IncludeTypes(MemberInfo memberInfo);
    private void IncludeTypes(MemberInfo memberInfo, RecursionLimiter limiter);
    public void IncludeType(Type type);
    private void IncludeType(Type type, RecursionLimiter limiter);
    public XmlTypeMapping ImportTypeMapping(Type type);
    public XmlTypeMapping ImportTypeMapping(Type type, string defaultNamespace);
    public XmlTypeMapping ImportTypeMapping(Type type, XmlRootAttribute root);
    public XmlTypeMapping ImportTypeMapping(Type type, XmlRootAttribute root, string defaultNamespace);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc, bool openModel);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc, bool openModel, XmlMappingAccess access);
    private XmlAttributes GetAttributes(Type type, bool canBeSimpleType);
    private XmlAttributes GetAttributes(MemberInfo memberInfo);
    private ElementAccessor ImportElement(TypeModel model, XmlRootAttribute root, string defaultNamespace, RecursionLimiter limiter);
    private static string GetMappingName(Mapping mapping);
    private ElementAccessor ReconcileLocalAccessor(ElementAccessor accessor, string ns);
    private Accessor ReconcileAccessor(Accessor accessor, NameTable accessors);
    private Exception CreateReflectionException(string context, Exception e);
    private Exception CreateTypeReflectionException(string context, Exception e);
    private Exception CreateMemberReflectionException(FieldModel model, Exception e);
    private TypeMapping ImportTypeMapping(TypeModel model, string ns, ImportContext context, string dataType, XmlAttributes a, RecursionLimiter limiter);
    private TypeMapping ImportTypeMapping(TypeModel model, string ns, ImportContext context, string dataType, XmlAttributes a, bool repeats, bool openModel, RecursionLimiter limiter);
    internal static MethodInfo GetMethodFromSchemaProvider(XmlSchemaProviderAttribute provider, Type type);
    private SpecialMapping ImportSpecialMapping(Type type, TypeDesc typeDesc, string ns, ImportContext context, RecursionLimiter limiter);
    private static string GetContextName(ImportContext context);
    private static Exception InvalidAttributeUseException(Type type);
    private static Exception UnsupportedException(TypeDesc typeDesc, ImportContext context);
    private StructMapping CreateRootMapping();
    private NullableMapping CreateNullableMapping(TypeMapping baseMapping, Type type);
    private StructMapping GetRootMapping();
    private TypeMapping GetTypeMapping(string typeName, string ns, TypeDesc typeDesc, NameTable typeLib, Type type);
    private StructMapping ImportStructLikeMapping(StructModel model, string ns, bool openModel, XmlAttributes a, RecursionLimiter limiter);
    private bool InitializeStructMembers(StructMapping mapping, StructModel model, bool openModel, string typeName, RecursionLimiter limiter);
    private static bool IsAnonymousType(XmlAttributes a, string contextNs);
    internal string XsdTypeName(Type type);
    internal string XsdTypeName(Type type, XmlAttributes a, string name);
    private static int CountAtLevel(XmlArrayItemAttributes attributes, int level);
    private void SetArrayMappingType(ArrayMapping mapping, string defaultNs, Type type);
    private ArrayMapping ImportArrayLikeMapping(ArrayModel model, string ns, RecursionLimiter limiter);
    private void CheckContext(TypeDesc typeDesc, ImportContext context);
    private PrimitiveMapping ImportPrimitiveMapping(PrimitiveModel model, ImportContext context, string dataType, bool repeats);
    private EnumMapping ImportEnumMapping(EnumModel model, string ns, bool repeats);
    private ConstantMapping ImportConstantMapping(ConstantModel model);
    private MembersMapping ImportMembersMapping(XmlReflectionMember[] xmlReflectionMembers, string ns, bool hasWrapperElement, bool rpc, bool openModel, RecursionLimiter limiter);
    private MemberMapping ImportMemberMapping(XmlReflectionMember xmlReflectionMember, string ns, XmlReflectionMember[] xmlReflectionMembers, bool rpc, bool openModel, RecursionLimiter limiter);
    internal static XmlReflectionMember FindSpecifiedMember(string memberName, XmlReflectionMember[] reflectionMembers);
    private MemberMapping ImportFieldMapping(StructModel parent, FieldModel model, XmlAttributes a, string ns, RecursionLimiter limiter);
    private Type CheckChoiceIdentifierType(Type type, bool isArrayLike, string identifierName, string memberName);
    private Type GetChoiceIdentifierType(XmlChoiceIdentifierAttribute choice, XmlReflectionMember[] xmlReflectionMembers, bool isArrayLike, string accessorName);
    private Type GetChoiceIdentifierType(XmlChoiceIdentifierAttribute choice, StructModel structModel, bool isArrayLike, string accessorName);
    private void CreateArrayElementsFromAttributes(ArrayMapping arrayMapping, XmlArrayItemAttributes attributes, Type arrayElementType, string arrayElementNs, RecursionLimiter limiter);
    private void ImportAccessorMapping(MemberMapping accessor, FieldModel model, XmlAttributes a, string ns, Type choiceIdentifierType, bool rpc, bool openModel, RecursionLimiter limiter);
    private void CheckTopLevelAttributes(XmlAttributes a, string accessorName);
    private void CheckAmbiguousChoice(XmlAttributes a, Type accessorType, string accessorName);
    private void CheckChoiceIdentifierMapping(EnumMapping choiceMapping);
    private object GetDefaultValue(TypeDesc fieldTypeDesc, Type t, XmlAttributes a);
    private static XmlArrayItemAttribute CreateArrayItemAttribute(TypeDesc typeDesc, int nestingLevel);
    private static XmlArrayAttribute CreateArrayAttribute(TypeDesc typeDesc);
    private static XmlElementAttribute CreateElementAttribute(TypeDesc typeDesc);
    private static void AddUniqueAccessor(INameScope scope, Accessor accessor);
    private static void AddUniqueAccessor(MemberMapping member, INameScope elements, INameScope attributes, bool isSequence);
    private static void CheckForm(XmlSchemaForm form, bool isQualified);
    private static void CheckNullable(bool isNullable, TypeDesc typeDesc, TypeMapping mapping);
    private static ElementAccessor CreateElementAccessor(TypeMapping mapping, string ns);
    internal static XmlTypeMapping GetTopLevelMapping(Type type, string defaultNamespace);
}
public class System.Xml.Serialization.XmlReflectionMember : object {
    private string _memberName;
    private Type _type;
    private XmlAttributes _xmlAttributes;
    private bool _isReturnValue;
    private bool _overrideIsNullable;
    public Type MemberType { get; public set; }
    public XmlAttributes XmlAttributes { get; public set; }
    public string MemberName { get; public set; }
    public bool IsReturnValue { get; public set; }
    public bool OverrideIsNullable { get; public set; }
    public Type get_MemberType();
    public void set_MemberType(Type value);
    public XmlAttributes get_XmlAttributes();
    public void set_XmlAttributes(XmlAttributes value);
    public string get_MemberName();
    public void set_MemberName(string value);
    public bool get_IsReturnValue();
    public void set_IsReturnValue(bool value);
    public bool get_OverrideIsNullable();
    public void set_OverrideIsNullable(bool value);
}
[AttributeUsageAttribute("9244")]
public class System.Xml.Serialization.XmlRootAttribute : Attribute {
    private string _elementName;
    private string _ns;
    private string _dataType;
    private bool _nullable;
    private bool _nullableSpecified;
    public string ElementName { get; public set; }
    public string Namespace { get; public set; }
    public string DataType { get; public set; }
    public bool IsNullable { get; public set; }
    internal bool IsNullableSpecified { get; }
    internal string Key { get; }
    public XmlRootAttribute(string elementName);
    public string get_ElementName();
    public void set_ElementName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_DataType();
    public void set_DataType(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    internal bool get_IsNullableSpecified();
    internal string get_Key();
}
public abstract class System.Xml.Serialization.XmlSerializationGeneratedCode : object {
    internal void Init(TempAssembly tempAssembly);
    internal void Dispose();
}
internal class System.Xml.Serialization.XmlSerializationILGen : object {
    private int _nextMethodNumber;
    private Dictionary`2<TypeMapping, string> _methodNames;
    private Dictionary`2<string, MethodBuilderInfo> _methodBuilders;
    internal Dictionary`2<string, Type> CreatedTypes;
    internal Dictionary`2<string, MemberInfo> memberInfos;
    private ReflectionAwareILGen _raCodeGen;
    private TypeScope[] _scopes;
    private TypeDesc _stringTypeDesc;
    private TypeDesc _qnameTypeDesc;
    private string _className;
    private TypeMapping[] _referencedMethods;
    private int _references;
    private HashSet`1<TypeMapping> _generatedMethods;
    private ModuleBuilder _moduleBuilder;
    private TypeAttributes _typeAttributes;
    protected TypeBuilder typeBuilder;
    protected CodeGenerator ilg;
    private static Dictionary`2<string, Regex> s_regexs;
    internal int NextMethodNumber { get; internal set; }
    internal ReflectionAwareILGen RaCodeGen { get; }
    internal TypeDesc StringTypeDesc { get; }
    internal TypeDesc QnameTypeDesc { get; }
    internal string ClassName { get; }
    internal TypeScope[] Scopes { get; }
    internal Dictionary`2<TypeMapping, string> MethodNames { get; }
    internal HashSet`1<TypeMapping> GeneratedMethods { get; }
    internal ModuleBuilder ModuleBuilder { get; internal set; }
    internal TypeAttributes TypeAttributes { get; }
    internal XmlSerializationILGen(TypeScope[] scopes, string access, string className);
    private static XmlSerializationILGen();
    internal int get_NextMethodNumber();
    internal void set_NextMethodNumber(int value);
    internal ReflectionAwareILGen get_RaCodeGen();
    internal TypeDesc get_StringTypeDesc();
    internal TypeDesc get_QnameTypeDesc();
    internal string get_ClassName();
    internal TypeScope[] get_Scopes();
    internal Dictionary`2<TypeMapping, string> get_MethodNames();
    internal HashSet`1<TypeMapping> get_GeneratedMethods();
    internal ModuleBuilder get_ModuleBuilder();
    internal void set_ModuleBuilder(ModuleBuilder value);
    internal TypeAttributes get_TypeAttributes();
    internal static Regex NewRegex(string pattern);
    internal MethodBuilder EnsureMethodBuilder(TypeBuilder typeBuilder, string methodName, MethodAttributes attributes, Type returnType, Type[] parameterTypes);
    internal MethodBuilderInfo GetMethodBuilder(string methodName);
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal void GenerateReferencedMethods();
    internal string ReferenceMapping(TypeMapping mapping);
    private TypeMapping[] EnsureArrayIndex(TypeMapping[] a, int index);
    internal string GetCSharpString(string value);
    internal FieldBuilder GenerateHashtableGetBegin(string privateName, string publicName, TypeBuilder serializerContractTypeBuilder);
    internal void GenerateHashtableGetEnd(FieldBuilder fieldBuilder);
    internal FieldBuilder GeneratePublicMethods(string privateName, string publicName, String[] methods, XmlMapping[] xmlMappings, TypeBuilder serializerContractTypeBuilder);
    internal void GenerateSupportedTypes(Type[] types, TypeBuilder serializerContractTypeBuilder);
    internal string GenerateBaseSerializer(string baseSerializer, string readerClass, string writerClass, CodeIdentifiers classes);
    internal string GenerateTypedSerializer(string readMethod, string writeMethod, XmlMapping mapping, CodeIdentifiers classes, string baseSerializer, string readerClass, string writerClass);
    private FieldBuilder GenerateTypedSerializers(Dictionary`2<string, string> serializers, TypeBuilder serializerContractTypeBuilder);
    private void GenerateGetSerializer(Dictionary`2<string, string> serializers, XmlMapping[] xmlMappings, TypeBuilder serializerContractTypeBuilder);
    internal void GenerateSerializerContract(string className, XmlMapping[] xmlMappings, Type[] types, string readerType, String[] readMethods, string writerType, String[] writerMethods, Dictionary`2<string, string> serializers);
    internal static bool IsWildcard(SpecialMapping mapping);
    internal void ILGenLoad(string source);
    internal void ILGenLoad(string source, Type type);
}
internal class System.Xml.Serialization.XmlSerializationPrimitiveReader : XmlSerializationReader {
    private string _id4_boolean;
    private string _id14_unsignedInt;
    private string _id15_unsignedLong;
    private string _id7_float;
    private string _id10_dateTime;
    private string _id6_long;
    private string _id9_decimal;
    private string _id8_double;
    private string _id17_guid;
    private string _id19_TimeSpan;
    private string _id2_Item;
    private string _id13_unsignedShort;
    private string _id18_char;
    private string _id3_int;
    private string _id12_byte;
    private string _id16_base64Binary;
    private string _id11_unsignedByte;
    private string _id5_short;
    private string _id1_string;
    private string _id1_QName;
    internal object Read_string();
    internal object Read_int();
    internal object Read_boolean();
    internal object Read_short();
    internal object Read_long();
    internal object Read_float();
    internal object Read_double();
    internal object Read_decimal();
    internal object Read_dateTime();
    internal object Read_unsignedByte();
    internal object Read_byte();
    internal object Read_unsignedShort();
    internal object Read_unsignedInt();
    internal object Read_unsignedLong();
    internal object Read_base64Binary();
    internal object Read_guid();
    internal object Read_TimeSpan();
    internal object Read_char();
    internal object Read_QName();
    protected virtual void InitCallbacks();
    protected virtual void InitIDs();
}
internal class System.Xml.Serialization.XmlSerializationPrimitiveWriter : XmlSerializationWriter {
    internal void Write_string(object o);
    internal void Write_int(object o);
    internal void Write_boolean(object o);
    internal void Write_short(object o);
    internal void Write_long(object o);
    internal void Write_float(object o);
    internal void Write_double(object o);
    internal void Write_decimal(object o);
    internal void Write_dateTime(object o);
    internal void Write_unsignedByte(object o);
    internal void Write_byte(object o);
    internal void Write_unsignedShort(object o);
    internal void Write_unsignedInt(object o);
    internal void Write_unsignedLong(object o);
    internal void Write_base64Binary(object o);
    internal void Write_guid(object o);
    internal void Write_TimeSpan(object o);
    internal void Write_char(object o);
    internal void Write_QName(object o);
    protected virtual void InitCallbacks();
}
public abstract class System.Xml.Serialization.XmlSerializationReader : XmlSerializationGeneratedCode {
    private XmlReader _r;
    private XmlDocument _d;
    private object _events;
    private bool _soap12;
    private bool _isReturnValue;
    private bool _decodeName;
    private string _schemaNsID;
    private string _schemaNs1999ID;
    private string _schemaNs2000ID;
    private string _schemaNonXsdTypesNsID;
    private string _instanceNsID;
    private string _instanceNs2000ID;
    private string _instanceNs1999ID;
    private string _soapNsID;
    private string _soap12NsID;
    private string _schemaID;
    private string _wsdlNsID;
    private string _wsdlArrayTypeID;
    private string _nullID;
    private string _nilID;
    private string _typeID;
    private string _arrayTypeID;
    private string _itemTypeID;
    private string _arraySizeID;
    private string _arrayID;
    private string _urTypeID;
    private string _stringID;
    private string _intID;
    private string _booleanID;
    private string _shortID;
    private string _longID;
    private string _floatID;
    private string _doubleID;
    private string _decimalID;
    private string _dateTimeID;
    private string _qnameID;
    private string _dateID;
    private string _timeID;
    private string _hexBinaryID;
    private string _base64BinaryID;
    private string _base64ID;
    private string _unsignedByteID;
    private string _byteID;
    private string _unsignedShortID;
    private string _unsignedIntID;
    private string _unsignedLongID;
    private string _oldDecimalID;
    private string _oldTimeInstantID;
    private string _anyURIID;
    private string _durationID;
    private string _ENTITYID;
    private string _ENTITIESID;
    private string _gDayID;
    private string _gMonthID;
    private string _gMonthDayID;
    private string _gYearID;
    private string _gYearMonthID;
    private string _IDID;
    private string _IDREFID;
    private string _IDREFSID;
    private string _integerID;
    private string _languageID;
    private string _nameID;
    private string _NCNameID;
    private string _NMTOKENID;
    private string _NMTOKENSID;
    private string _negativeIntegerID;
    private string _nonPositiveIntegerID;
    private string _nonNegativeIntegerID;
    private string _normalizedStringID;
    private string _NOTATIONID;
    private string _positiveIntegerID;
    private string _tokenID;
    private string _charID;
    private string _guidID;
    private string _timeSpanID;
    private static UInt32 s_isTextualNodeBitmap;
    protected bool DecodeName { get; protected set; }
    protected XmlReader Reader { get; }
    protected XmlDocument Document { get; }
    protected int ReaderCount { get; }
    protected bool IsReturnValue { get; protected set; }
    private static XmlSerializationReader();
    protected abstract virtual void InitIDs();
    internal void Init(XmlReader r, string encodingStyle);
    internal void Init(XmlReader r, object events, string encodingStyle, TempAssembly tempAssembly);
    protected bool get_DecodeName();
    protected void set_DecodeName(bool value);
    protected XmlReader get_Reader();
    protected XmlDocument get_Document();
    protected int get_ReaderCount();
    private void InitPrimitiveIDs();
    protected XmlQualifiedName GetXsiType();
    private bool IsPrimitiveNamespace(string ns);
    private string ReadStringValue();
    private XmlQualifiedName ReadXmlQualifiedName(bool collapseWhitespace);
    private Byte[] ReadByteArray(bool isBase64);
    protected object ReadTypedPrimitive(XmlQualifiedName type);
    private object ReadTypedPrimitive(XmlQualifiedName type, bool elementCanBeType);
    protected object ReadTypedNull(XmlQualifiedName type);
    protected bool IsXmlnsAttribute(string name);
    protected void ParseWsdlArrayType(XmlAttribute attr);
    protected bool get_IsReturnValue();
    protected void set_IsReturnValue(bool value);
    protected bool ReadNull();
    protected bool GetNullAttr();
    protected string ReadNullableString();
    protected XmlQualifiedName ReadNullableQualifiedName();
    protected XmlQualifiedName ReadElementQualifiedName();
    protected XmlDocument ReadXmlDocument(bool wrapped);
    protected string CollapseWhitespace(string value);
    protected XmlNode ReadXmlNode(bool wrapped);
    protected static Byte[] ToByteArrayBase64(string value);
    protected Byte[] ToByteArrayBase64(bool isNull);
    protected static Byte[] ToByteArrayHex(string value);
    protected Byte[] ToByteArrayHex(bool isNull);
    protected static DateTime ToDateTime(string value);
    protected static DateTime ToDate(string value);
    protected static DateTime ToTime(string value);
    protected static char ToChar(string value);
    protected static long ToEnum(string value, IDictionary h, string typeName);
    protected static string ToXmlName(string value);
    protected static string ToXmlNCName(string value);
    protected static string ToXmlNmToken(string value);
    protected static string ToXmlNmTokens(string value);
    protected XmlQualifiedName ToXmlQualifiedName(string value);
    internal XmlQualifiedName ToXmlQualifiedName(string value, bool decodeName);
    protected void UnknownNode(object o);
    protected void UnknownNode(object o, string qnames);
    private void UnknownNode(XmlNode unknownNode, object o, string qnames);
    private void GetCurrentPosition(Int32& lineNumber, Int32& linePosition);
    private string CurrentTag();
    protected Exception CreateUnknownTypeException(XmlQualifiedName type);
    protected Exception CreateReadOnlyCollectionException(string name);
    protected Exception CreateAbstractTypeException(string name, string ns);
    protected Exception CreateInaccessibleConstructorException(string typeName);
    protected Exception CreateCtorHasSecurityException(string typeName);
    protected Exception CreateUnknownNodeException();
    protected Exception CreateUnknownConstantException(string value, Type enumType);
    protected Exception CreateInvalidCastException(Type type, object value);
    protected Exception CreateInvalidCastException(Type type, object value, string id);
    protected Exception CreateBadDerivationException(string xsdDerived, string nsDerived, string xsdBase, string nsBase, string clrDerived, string clrBase);
    protected Exception CreateMissingIXmlSerializableType(string name, string ns, string clrType);
    protected Array EnsureArrayIndex(Array a, int index, Type elementType);
    protected Array ShrinkArray(Array a, int length, Type elementType, bool isNullable);
    protected virtual string ReadString();
    private static bool IsTextualNode(XmlNodeType nodeType);
    protected string ReadString(string value);
    protected string ReadString(string value, bool trim);
    protected IXmlSerializable ReadSerializable(IXmlSerializable serializable);
    protected IXmlSerializable ReadSerializable(IXmlSerializable serializable, bool wrappedAny);
    protected abstract virtual void InitCallbacks();
    protected void ReadEndElement();
    private object ReadXmlNodes(bool elementCanBeType);
    protected void CheckReaderCount(Int32& whileIterations, Int32& readerCount);
}
internal class System.Xml.Serialization.XmlSerializationReaderILGen : XmlSerializationILGen {
    private Dictionary`2<string, string> _idNames;
    private Dictionary`2<string, FieldBuilder> _idNameFields;
    private Dictionary`2<string, EnumMapping> _enums;
    private int _nextIdNumber;
    private int _nextWhileLoopIndex;
    internal Dictionary`2<string, EnumMapping> Enums { get; }
    internal XmlSerializationReaderILGen(TypeScope[] scopes, string access, string className);
    internal Dictionary`2<string, EnumMapping> get_Enums();
    internal void GenerateBegin();
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal void GenerateEnd(String[] methods, XmlMapping[] xmlMappings, Type[] types);
    internal string GenerateElement(XmlMapping xmlMapping);
    private void WriteIsStartTag(string name, string ns);
    private void WriteUnknownNode(string func, string node, ElementAccessor e, bool anyIfs);
    private void GenerateInitCallbacksMethod();
    private string GenerateMembersElement(XmlMembersMapping xmlMembersMapping);
    private string GetChoiceIdentifierSource(MemberMapping[] mappings, MemberMapping member);
    private string GetChoiceIdentifierSource(MemberMapping mapping, string parent, TypeDesc parentTypeDesc);
    private string GenerateLiteralMembersElement(XmlMembersMapping xmlMembersMapping);
    private void InitializeValueTypes(string arrayName, MemberMapping[] mappings);
    private string GenerateTypeElement(XmlTypeMapping xmlTypeMapping);
    private string NextMethodName(string name);
    private string NextIdName(string name);
    private void WritePrimitive(TypeMapping mapping, string source);
    private string MakeUnique(EnumMapping mapping, string name);
    private string WriteHashtable(EnumMapping mapping, string typeName, MethodBuilder& get_TableName);
    private void WriteEnumMethod(EnumMapping mapping);
    private void WriteDerivedTypes(StructMapping mapping, bool isTypedReturn, string returnTypeName);
    private void WriteEnumAndArrayTypes();
    private void WriteNullableMethod(NullableMapping nullableMapping);
    private void WriteStructMethod(StructMapping structMapping);
    private void WriteLiteralStructMethod(StructMapping structMapping);
    private void WriteQNameEqual(string source, string name, string ns);
    private void WriteXmlNodeEqual(string source, string name, string ns);
    private void WriteXmlNodeEqual(string source, string name, string ns, bool doAndIf);
    private void WriteID(string name);
    private void WriteAttributes(Member[] members, Member anyAttribute, string elseCall, LocalBuilder firstParam);
    private void WriteAttribute(Member member);
    private void WriteMemberBegin(Member[] members);
    private string ExpectedElements(Member[] members);
    private void WriteMemberElements(Member[] members, string elementElseString, string elseString, Member anyElement, Member anyText);
    private void WriteMemberText(Member anyText, string elseString);
    private void WriteText(Member member);
    private void WriteMemberElementsElse(Member anyElement, string elementElseString);
    private bool IsSequence(Member[] members);
    private void WriteMemberElementsIf(Member[] members, Member anyElement, string elementElseString);
    private string GetArraySource(TypeDesc typeDesc, string arrayName);
    private string GetArraySource(TypeDesc typeDesc, string arrayName, bool multiRef);
    private void WriteMemberEnd(Member[] members);
    private void WriteMemberEnd(Member[] members, bool soapRefs);
    private void WriteSourceBeginTyped(string source, TypeDesc typeDesc);
    private void WriteSourceBegin(string source);
    private void WriteSourceEnd(string source, Type elementType);
    private void WriteSourceEnd(string source, Type elementType, Type stackType);
    private void WriteArray(string source, string arrayName, ArrayMapping arrayMapping, bool readOnly, bool isNullable, int fixupIndex, int elementIndex);
    private void WriteElement(string source, string arrayName, string choiceSource, ElementAccessor element, ChoiceIdentifierAccessor choice, string checkSpecified, bool checkForNull, bool readOnly, int fixupIndex, int elementIndex);
    private void WriteDerivedSerializable(SerializableMapping head, SerializableMapping mapping, string source, bool isWrappedAny);
    private int WriteWhileNotLoopStart();
    private void WriteWhileLoopEnd(int loopIndex);
    private int WriteWhileLoopStartCheck();
    private void WriteWhileLoopEndCheck(int loopIndex);
    private void WriteParamsRead(int length);
    private void WriteCreateMapping(TypeMapping mapping, string local);
    private void WriteCatchException(Type exceptionType);
    private void WriteCatchCastException(TypeDesc typeDesc, string source, string id);
    private void WriteArrayLocalDecl(string typeName, string variableName, string initValue, TypeDesc arrayTypeDesc);
    private void WriteCreateInstance(string source, bool ctorInaccessible, Type type);
    private void WriteLocalDecl(string variableName, SourceInfo initValue);
    private void ILGenElseString(string elseString);
    private void ILGenParamsReadSource(string paramsReadSource);
    private void ILGenParamsReadSource(string paramsReadSource, bool value);
    private void ILGenElementElseString(string elementElseString);
    private void ILGenSet(string source, object value);
}
public class System.Xml.Serialization.XmlSerializationWriteCallback : MulticastDelegate {
    public XmlSerializationWriteCallback(object object, IntPtr method);
    public virtual void Invoke(object o);
    public virtual IAsyncResult BeginInvoke(object o, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.Xml.Serialization.XmlSerializationWriter : XmlSerializationGeneratedCode {
    private XmlWriter _w;
    private XmlSerializerNamespaces _namespaces;
    private int _tempNamespacePrefix;
    private HashSet`1<int> _usedPrefixes;
    private HashSet`1<object> _objectsInUse;
    private string _aliasBase;
    private bool _escapeName;
    protected bool EscapeName { get; protected set; }
    protected XmlWriter Writer { get; protected set; }
    protected IList XmlNamespaces { get; protected set; }
    internal void Init(XmlWriter w, XmlSerializerNamespaces namespaces, string encodingStyle, string idBase);
    internal void Init(XmlWriter w, XmlSerializerNamespaces namespaces, string encodingStyle, string idBase, TempAssembly tempAssembly);
    protected bool get_EscapeName();
    protected void set_EscapeName(bool value);
    protected XmlWriter get_Writer();
    protected void set_Writer(XmlWriter value);
    protected IList get_XmlNamespaces();
    protected void set_XmlNamespaces(IList value);
    protected static Byte[] FromByteArrayBase64(Byte[] value);
    protected static string FromByteArrayHex(Byte[] value);
    protected static string FromDateTime(DateTime value);
    protected static string FromDate(DateTime value);
    protected static string FromTime(DateTime value);
    protected static string FromChar(char value);
    protected static string FromEnum(long value, String[] values, Int64[] ids);
    protected static string FromEnum(long value, String[] values, Int64[] ids, string typeName);
    protected static string FromXmlName(string name);
    protected static string FromXmlNCName(string ncName);
    protected static string FromXmlNmToken(string nmToken);
    protected static string FromXmlNmTokens(string nmTokens);
    protected void WriteXsiType(string name, string ns);
    private XmlQualifiedName GetPrimitiveTypeName(Type type);
    private XmlQualifiedName GetPrimitiveTypeName(Type type, bool throwIfUnknown);
    internal static XmlQualifiedName GetPrimitiveTypeNameInternal(Type type);
    protected void WriteTypedPrimitive(string name, string ns, object o, bool xsiType);
    private string GetQualifiedName(string name, string ns);
    protected string FromXmlQualifiedName(XmlQualifiedName xmlQualifiedName);
    protected string FromXmlQualifiedName(XmlQualifiedName xmlQualifiedName, bool ignoreEmpty);
    protected void WriteStartElement(string name);
    protected void WriteStartElement(string name, string ns);
    protected void WriteStartElement(string name, string ns, bool writePrefixed);
    protected void WriteStartElement(string name, string ns, object o);
    protected void WriteStartElement(string name, string ns, object o, bool writePrefixed);
    protected void WriteStartElement(string name, string ns, object o, bool writePrefixed, XmlSerializerNamespaces xmlns);
    private HashSet`1<int> ListUsedPrefixes(Dictionary`2<string, string> nsList, string prefix);
    protected void WriteNullTagEncoded(string name);
    protected void WriteNullTagEncoded(string name, string ns);
    protected void WriteNullTagLiteral(string name);
    protected void WriteNullTagLiteral(string name, string ns);
    protected void WriteEmptyTag(string name);
    protected void WriteEmptyTag(string name, string ns);
    protected void WriteEndElement();
    protected void WriteEndElement(object o);
    protected void WriteSerializable(IXmlSerializable serializable, string name, string ns, bool isNullable);
    protected void WriteSerializable(IXmlSerializable serializable, string name, string ns, bool isNullable, bool wrapped);
    protected void WriteNullableStringEncoded(string name, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteNullableStringLiteral(string name, string ns, string value);
    protected void WriteNullableStringEncodedRaw(string name, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteNullableStringEncodedRaw(string name, string ns, Byte[] value, XmlQualifiedName xsiType);
    protected void WriteNullableStringLiteralRaw(string name, string ns, string value);
    protected void WriteNullableStringLiteralRaw(string name, string ns, Byte[] value);
    protected void WriteNullableQualifiedNameEncoded(string name, string ns, XmlQualifiedName value, XmlQualifiedName xsiType);
    protected void WriteNullableQualifiedNameLiteral(string name, string ns, XmlQualifiedName value);
    protected void WriteElementLiteral(XmlNode node, string name, string ns, bool isNullable, bool any);
    private void WriteElement(XmlNode node, string name, string ns, bool isNullable, bool any);
    protected Exception CreateUnknownTypeException(object o);
    protected Exception CreateUnknownTypeException(Type type);
    protected Exception CreateMismatchChoiceException(string value, string elementName, string enumValue);
    protected Exception CreateUnknownAnyElementException(string name, string ns);
    protected Exception CreateInvalidChoiceIdentifierValueException(string type, string identifier);
    protected Exception CreateChoiceIdentifierValueException(string value, string identifier, string name, string ns);
    protected Exception CreateInvalidEnumValueException(object value, string typeName);
    protected Exception CreateInvalidAnyTypeException(object o);
    protected Exception CreateInvalidAnyTypeException(Type type);
    protected void WriteXmlAttribute(XmlNode node);
    protected void WriteXmlAttribute(XmlNode node, object container);
    protected void WriteAttribute(string localName, string ns, string value);
    protected void WriteAttribute(string localName, string ns, Byte[] value);
    protected void WriteAttribute(string localName, string value);
    protected void WriteAttribute(string localName, Byte[] value);
    protected void WriteAttribute(string prefix, string localName, string ns, string value);
    protected void WriteValue(string value);
    protected void WriteValue(Byte[] value);
    protected void WriteStartDocument();
    protected void WriteElementString(string localName, string value);
    protected void WriteElementString(string localName, string ns, string value);
    protected void WriteElementString(string localName, string value, XmlQualifiedName xsiType);
    protected void WriteElementString(string localName, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, string value);
    protected void WriteElementStringRaw(string localName, Byte[] value);
    protected void WriteElementStringRaw(string localName, string ns, string value);
    protected void WriteElementStringRaw(string localName, string ns, Byte[] value);
    protected void WriteElementStringRaw(string localName, string value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, Byte[] value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, string ns, Byte[] value, XmlQualifiedName xsiType);
    protected void WriteElementQualifiedName(string localName, XmlQualifiedName value);
    protected void WriteElementQualifiedName(string localName, XmlQualifiedName value, XmlQualifiedName xsiType);
    protected void WriteElementQualifiedName(string localName, string ns, XmlQualifiedName value);
    protected void WriteElementQualifiedName(string localName, string ns, XmlQualifiedName value, XmlQualifiedName xsiType);
    protected abstract virtual void InitCallbacks();
    protected void TopLevelElement();
    protected void WriteNamespaceDeclarations(XmlSerializerNamespaces xmlns);
    private string NextPrefix();
}
internal class System.Xml.Serialization.XmlSerializationWriterILGen : XmlSerializationILGen {
    internal XmlSerializationWriterILGen(TypeScope[] scopes, string access, string className);
    internal void GenerateBegin();
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal Type GenerateEnd();
    internal string GenerateElement(XmlMapping xmlMapping);
    private void GenerateInitCallbacksMethod();
    private void WriteQualifiedNameElement(string name, string ns, object defaultValue, SourceInfo source, bool nullable, TypeMapping mapping);
    private void WriteEnumValue(EnumMapping mapping, SourceInfo source, Type& returnType);
    private void WritePrimitiveValue(TypeDesc typeDesc, SourceInfo source, Type& returnType);
    private void WritePrimitive(string method, string name, string ns, object defaultValue, SourceInfo source, TypeMapping mapping, bool writeXsiType, bool isElement, bool isNullable);
    private void WriteTag(string methodName, string name, string ns);
    private void WriteTag(string methodName, string name, string ns, bool writePrefixed);
    private void WriteStartElement(string name, string ns, bool writePrefixed);
    private void WriteEndElement();
    private void WriteEndElement(string source);
    private void WriteLiteralNullTag(string name, string ns);
    private void WriteEmptyTag(string name, string ns);
    private string GenerateMembersElement(XmlMembersMapping xmlMembersMapping);
    private string GenerateTypeElement(XmlTypeMapping xmlTypeMapping);
    private string NextMethodName(string name);
    private void WriteEnumMethod(EnumMapping mapping);
    private void WriteDerivedTypes(StructMapping mapping);
    private void WriteEnumAndArrayTypes();
    private void WriteStructMethod(StructMapping mapping);
    private bool CanOptimizeWriteListSequence(TypeDesc listElementTypeDesc);
    private void WriteMember(SourceInfo source, AttributeAccessor attribute, TypeDesc memberTypeDesc, string parent);
    private void WriteAttribute(SourceInfo source, AttributeAccessor attribute, string parent);
    private void WriteMember(SourceInfo source, string choiceSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc memberTypeDesc, bool writeAccessors);
    private void WriteArray(SourceInfo source, string choiceSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc arrayTypeDesc);
    private void WriteArrayItems(ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, TypeDesc arrayTypeDesc, string arrayName, string choiceName);
    private void WriteElements(SourceInfo source, string enumSource, ElementAccessor[] elements, TextAccessor text, ChoiceIdentifierAccessor choice, string arrayName, bool writeAccessors, bool isNullable);
    private void WriteText(SourceInfo source, TextAccessor text);
    private void WriteElement(SourceInfo source, ElementAccessor element, string arrayName, bool writeAccessor);
    private void WriteElementCall(string func, Type cast, SourceInfo source, string name, string ns, bool isNullable, bool isAny);
    private void WriteCheckDefault(SourceInfo source, object value, bool isNullable);
    private void WriteChoiceTypeCheck(SourceInfo source, string fullTypeName, ChoiceIdentifierAccessor choice, string enumName, TypeDesc typeDesc);
    private void WriteNullCheckBegin(string source, ElementAccessor element);
    private void WriteNamespaces(string source);
    private int FindXmlnsIndex(MemberMapping[] members);
    private void WriteLocalDecl(string variableName, string initValue, Type type);
    private void WriteArrayLocalDecl(string typeName, string variableName, SourceInfo initValue, TypeDesc arrayTypeDesc);
    private void WriteTypeCompare(string variable, Type type);
    private void WriteInstanceOf(SourceInfo source, Type type);
    private void WriteArrayTypeCompare(string variable, Type arrayType);
    private string FindChoiceEnumValue(ElementAccessor element, EnumMapping choiceMapping, Object& eValue);
}
public class System.Xml.Serialization.XmlSerializer : object {
    private TempAssembly _tempAssembly;
    private bool _typedSerializer;
    private Type _primitiveType;
    private XmlMapping _mapping;
    private object _events;
    private static TempAssemblyCache s_cache;
    private static XmlSerializerNamespaces modreq(System.Runtime.CompilerServices.IsVolatile) s_defaultNamespaces;
    private static Dictionary`2<Type, Dictionary`2<XmlSerializerMappingKey, XmlSerializer>> s_xmlSerializerTable;
    private static XmlSerializerNamespaces DefaultNamespaces { get; }
    public XmlSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace);
    public XmlSerializer(Type type, XmlRootAttribute root);
    public XmlSerializer(Type type, Type[] extraTypes);
    public XmlSerializer(Type type, XmlAttributeOverrides overrides);
    public XmlSerializer(XmlTypeMapping xmlTypeMapping);
    public XmlSerializer(Type type);
    public XmlSerializer(Type type, string defaultNamespace);
    internal XmlSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, object location, object evidence);
    private static XmlSerializer();
    private static XmlSerializerNamespaces get_DefaultNamespaces();
    internal static TempAssembly GenerateTempAssembly(XmlMapping xmlMapping);
    internal static TempAssembly GenerateTempAssembly(XmlMapping xmlMapping, Type type, string defaultNamespace);
    public void Serialize(TextWriter textWriter, object o);
    public void Serialize(TextWriter textWriter, object o, XmlSerializerNamespaces namespaces);
    public void Serialize(Stream stream, object o);
    public void Serialize(Stream stream, object o, XmlSerializerNamespaces namespaces);
    public void Serialize(XmlWriter xmlWriter, object o);
    public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces);
    internal void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle);
    internal void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle, string id);
    public object Deserialize(Stream stream);
    public object Deserialize(TextReader textReader);
    public object Deserialize(XmlReader xmlReader);
    internal object Deserialize(XmlReader xmlReader, string encodingStyle);
    internal object Deserialize(XmlReader xmlReader, string encodingStyle, object events);
    public virtual bool CanDeserialize(XmlReader xmlReader);
    public static XmlSerializer[] FromMappings(XmlMapping[] mappings);
    public static XmlSerializer[] FromMappings(XmlMapping[] mappings, Type type);
    private static XmlSerializer[] GetSerializersFromCache(XmlMapping[] mappings, Type type);
    public static XmlSerializer[] FromTypes(Type[] types);
    protected virtual XmlSerializationReader CreateReader();
    protected virtual object Deserialize(XmlSerializationReader reader);
    protected virtual XmlSerializationWriter CreateWriter();
    protected virtual void Serialize(object o, XmlSerializationWriter writer);
    internal void SetTempAssembly(TempAssembly tempAssembly, XmlMapping mapping);
    private static XmlTypeMapping GetKnownMapping(Type type, string ns);
    private void SerializePrimitive(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces);
    private object DeserializePrimitive(XmlReader xmlReader, object events);
}
public abstract class System.Xml.Serialization.XmlSerializerImplementation : object {
    public XmlSerializationReader Reader { get; }
    public XmlSerializationWriter Writer { get; }
    public IDictionary ReadMethods { get; }
    public IDictionary WriteMethods { get; }
    public IDictionary TypedSerializers { get; }
    public virtual XmlSerializationReader get_Reader();
    public virtual XmlSerializationWriter get_Writer();
    public virtual IDictionary get_ReadMethods();
    public virtual IDictionary get_WriteMethods();
    public virtual IDictionary get_TypedSerializers();
    public virtual bool CanSerialize(Type type);
    public virtual XmlSerializer GetSerializer(Type type);
}
public class System.Xml.Serialization.XmlSerializerNamespaces : object {
    private Dictionary`2<string, string> _namespaces;
    public int Count { get; }
    internal List`1<XmlQualifiedName> NamespaceList { get; }
    internal Dictionary`2<string, string> Namespaces { get; internal set; }
    public XmlSerializerNamespaces(XmlSerializerNamespaces namespaces);
    public XmlSerializerNamespaces(XmlQualifiedName[] namespaces);
    public void Add(string prefix, string ns);
    internal void AddInternal(string prefix, string ns);
    public XmlQualifiedName[] ToArray();
    public int get_Count();
    internal List`1<XmlQualifiedName> get_NamespaceList();
    internal Dictionary`2<string, string> get_Namespaces();
    internal void set_Namespaces(Dictionary`2<string, string> value);
    internal string LookupPrefix(string ns);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlTextAttribute : Attribute {
    private Type _type;
    private string _dataType;
    public Type Type { get; public set; }
    public string DataType { get; public set; }
    public XmlTextAttribute(Type type);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_DataType();
    public void set_DataType(string value);
}
[AttributeUsageAttribute("1052")]
public class System.Xml.Serialization.XmlTypeAttribute : Attribute {
    private bool _includeInSchema;
    private bool _anonymousType;
    private string _ns;
    private string _typeName;
    public bool AnonymousType { get; public set; }
    public bool IncludeInSchema { get; public set; }
    public string TypeName { get; public set; }
    public string Namespace { get; public set; }
    public XmlTypeAttribute(string typeName);
    public bool get_AnonymousType();
    public void set_AnonymousType(bool value);
    public bool get_IncludeInSchema();
    public void set_IncludeInSchema(bool value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
public class System.Xml.Serialization.XmlTypeMapping : XmlMapping {
    internal TypeMapping Mapping { get; }
    public string TypeName { get; }
    public string TypeFullName { get; }
    public string XsdTypeName { get; }
    public string XsdTypeNamespace { get; }
    internal XmlTypeMapping(TypeScope scope, ElementAccessor accessor);
    internal TypeMapping get_Mapping();
    public string get_TypeName();
    public string get_TypeFullName();
    public string get_XsdTypeName();
    public string get_XsdTypeNamespace();
}
internal class System.Xml.XmlCharType : ValueType {
    internal static int fWhitespace;
    internal static int fLetter;
    internal static int fNCStartName;
    internal static int fNCName;
    internal static int fCharData;
    internal static int fPublicId;
    internal static int fText;
    internal static int fAttrValue;
    private static UInt32 CharPropertiesSize;
    internal static string s_Whitespace;
    private static string s_Letter;
    private static string s_NCStartName;
    private static string s_NCName;
    private static string s_CharData;
    private static string s_PublicID;
    private static string s_Text;
    private static string s_AttrValue;
    private static object s_Lock;
    private static Byte[] s_CharProperties;
    internal Byte[] charProperties;
    private static object StaticLock { get; }
    internal static XmlCharType Instance { get; }
    private XmlCharType(Byte[] charProperties);
    private static object get_StaticLock();
    private static void InitInstance();
    private static void SetProperties(Byte[] chProps, string ranges, byte value);
    internal static XmlCharType get_Instance();
    public bool IsWhiteSpace(char ch);
    public bool IsLetter(char ch);
    public bool IsExtender(char ch);
    public bool IsNCNameChar(char ch);
    public bool IsStartNCNameChar(char ch);
    public bool IsCharData(char ch);
    public bool IsPubidChar(char ch);
    internal bool IsTextChar(char ch);
    internal bool IsAttributeValueChar(char ch);
    public bool IsNameChar(char ch);
    public bool IsStartNameChar(char ch);
    public bool IsDigit(char ch);
    public bool IsHexDigit(char ch);
    internal bool IsOnlyWhitespace(string str);
    internal int IsOnlyWhitespaceWithPos(string str);
    internal bool IsName(string str);
    internal bool IsNmToken(string str);
    internal int IsOnlyCharData(string str);
    internal int IsPublicId(string str);
}
internal abstract class System.Xml.XmlReservedNs : object {
    internal static string NsXml;
}
