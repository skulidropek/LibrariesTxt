public class ExtensionsMetadataGenerator.Console.Program : object {
    public static void Main(String[] args);
}
public class ExtensionsMetadataGenerator.ConsoleLogger : object {
    private static int SpacesPerIndent;
    private int _indent;
    public IDisposable Indent();
    private void PushIndent();
    private void PopIndent();
    public void LogMessage(string message);
    public void LogError(string message);
    private string Indent(string message);
}
public class ExtensionsMetadataGenerator.ExtensionReference : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HintPath>k__BackingField;
    public string Name { get; public set; }
    public string TypeName { get; public set; }
    public string HintPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    [CompilerGeneratedAttribute]
public string get_HintPath();
    [CompilerGeneratedAttribute]
public void set_HintPath(string value);
}
public class ExtensionsMetadataGenerator.ExtensionsMetadataGenerator : object {
    private static string WebJobsStartupAttributeType;
    private static string FunctionsStartupAttributeType;
    private static String[] ExcludedAssemblies;
    private static ExtensionsMetadataGenerator();
    public static void Generate(string sourcePath, string outputPath, ConsoleLogger logger);
    public static bool AssemblyShouldBeSkipped(string fileName);
    public static string GenerateExtensionsJson(IEnumerable`1<ExtensionReference> extensionReferences);
    public static bool IsWebJobsStartupAttributeType(TypeReference attributeType, ConsoleLogger logger);
    public static IEnumerable`1<ExtensionReference> GenerateExtensionReferences(string fileName, ConsoleLogger logger);
    private static string GetName(string name, TypeDefinition startupTypeDef);
    public static string GetReflectionFullName(TypeReference typeRef);
}
