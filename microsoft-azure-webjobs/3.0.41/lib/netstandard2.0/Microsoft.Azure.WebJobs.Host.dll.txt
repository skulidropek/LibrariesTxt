public class Microsoft.Azure.WebJobs.Binder : object {
    private IAttributeBindingSource _bindingSource;
    private IList`1<IValueBinder> _binders;
    private RuntimeBindingWatcher _watcher;
    private CollectingDisposable _disposable;
    private Dictionary`2<string, object> _bindingData;
    private bool _disposed;
    public Dictionary`2<string, object> BindingData { get; }
    private IWatcher Microsoft.Azure.WebJobs.Host.Bindings.IWatchable.Watcher { get; }
    internal Binder(IAttributeBindingSource bindingSource);
    public virtual Dictionary`2<string, object> get_BindingData();
    private sealed virtual override IWatcher Microsoft.Azure.WebJobs.Host.Bindings.IWatchable.get_Watcher();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Binder/<BindAsync>d__12`1")]
public virtual Task`1<TValue> BindAsync(Attribute attribute, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Binder/<BindAsync>d__13`1")]
public virtual Task`1<TValue> BindAsync(Attribute[] attributes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Binder/<Complete>d__14")]
internal Task Complete(CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public static class Microsoft.Azure.WebJobs.ConnectionStringNames : object {
    public static string Dashboard;
    public static string Storage;
    public static string InternalSasStorage;
    private static ConnectionStringNames();
}
internal class Microsoft.Azure.WebJobs.ConverterManager : object {
    private List`1<Entry> _exactConverters;
    private List`1<Entry> _openConverters;
    public static IConverterManager Identity;
    private static FuncAsyncConverter IdentityConverter;
    private static ConverterManager();
    private IEnumerable`1<Entry> GetEntries();
    internal void AddAssemblies(Action`1<Type> funcAddType);
    private void AddType(OpenType type, Action`1<Type> funcAddType);
    private static string DefaultByteArrayToString(Byte[] bytes);
    public OpenType[] GetPossibleDestinationTypesFromSource(Type typeAttribute, Type typeSource);
    private void GetPossibleDestinationTypesFromSource(List`1<OpenType> typeDestinations, Type typeAttribute, Type typeSource);
    public OpenType[] GetPossibleSourceTypesFromDestination(Type typeAttribute, Type typeDest);
    public void AddExactConverter(Func`3<TSource, CancellationToken, Task`1<TDestination>> func);
    public void AddExactConverter(Func`2<TSource, TDestination> func);
    public void AddExactConverter(Func`3<TSource, TAttribute, TDestination> func);
    public void AddConverter(FuncConverterBuilder converterBuilder);
    private void AddOpenConverter(OpenType source, OpenType dest, FuncConverterBuilder converterBuilder);
    private FuncConverterBuilder TryGetOpenConverter(Type typeSource, Type typeDest, Type typeAttribute, IEnumerable`1<Entry> converters);
    private FuncAsyncConverter TryGetConverter(Type typeSource, Type typeDest, IEnumerable`1<Entry> converters);
    public sealed virtual FuncAsyncConverter GetConverter(Type typeSource, Type typeDest);
    private FuncAsyncConverter GetComposition(Type typeSource, Type typeDest);
}
public class Microsoft.Azure.WebJobs.DefaultNameResolver : object {
    private IConfiguration _configuration;
    public DefaultNameResolver(IConfiguration configuration);
    public virtual string Resolve(string name);
}
internal class Microsoft.Azure.WebJobs.DefaultResolutionPolicy : object {
    public sealed virtual string TemplateBind(PropertyInfo propInfo, Attribute attribute, BindingTemplate template, IReadOnlyDictionary`2<string, object> bindingData);
}
[AttributeUsageAttribute("2048")]
[BindingAttribute]
public class Microsoft.Azure.WebJobs.Description.SharedMemoryAttribute : Attribute {
    private string _memoryMapName;
    private long _count;
    public string MemoryMapName { get; }
    public long Count { get; }
    public SharedMemoryAttribute(string memoryMapName, long count);
    public string get_MemoryMapName();
    public long get_Count();
}
public class Microsoft.Azure.WebJobs.ExecutionContext : object {
    [CompilerGeneratedAttribute]
private Guid <InvocationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionAppDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private RetryContext <RetryContext>k__BackingField;
    public Guid InvocationId { get; public set; }
    public string FunctionName { get; public set; }
    public string FunctionDirectory { get; public set; }
    public string FunctionAppDirectory { get; public set; }
    public RetryContext RetryContext { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_InvocationId();
    [CompilerGeneratedAttribute]
public void set_InvocationId(Guid value);
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public void set_FunctionName(string value);
    [CompilerGeneratedAttribute]
public string get_FunctionDirectory();
    [CompilerGeneratedAttribute]
public void set_FunctionDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_FunctionAppDirectory();
    [CompilerGeneratedAttribute]
public void set_FunctionAppDirectory(string value);
    [CompilerGeneratedAttribute]
public RetryContext get_RetryContext();
    [CompilerGeneratedAttribute]
public void set_RetryContext(RetryContext value);
}
public class Microsoft.Azure.WebJobs.ExponentialBackoffRetryAttribute : RetryAttribute {
    private TimeSpan _parsedMinimumInterval;
    private TimeSpan _parsedMaximumInterval;
    private static string _delayStrategyKeyName;
    [CompilerGeneratedAttribute]
private string <MinimumInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaximumInterval>k__BackingField;
    public string MinimumInterval { get; }
    public string MaximumInterval { get; }
    public ExponentialBackoffRetryAttribute(int maxRetryCount, string minimumInterval, string maximumInterval);
    private static ExponentialBackoffRetryAttribute();
    [CompilerGeneratedAttribute]
public string get_MinimumInterval();
    [CompilerGeneratedAttribute]
public string get_MaximumInterval();
    public virtual TimeSpan GetNextDelay(RetryContext context);
}
public class Microsoft.Azure.WebJobs.ExtensionInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationSectionName>k__BackingField;
    public string Name { get; }
    public string ConfigurationSectionName { get; }
    private ExtensionInfo(string name, string configurationSectionName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_ConfigurationSectionName();
    public static ExtensionInfo FromExtension();
    public static ExtensionInfo FromInstance(IExtensionConfigProvider extension);
    private static ExtensionInfo GetExtensionInfo(Type extensionType);
}
public class Microsoft.Azure.WebJobs.FixedDelayRetryAttribute : RetryAttribute {
    private IDelayStrategy _delayStrategy;
    [CompilerGeneratedAttribute]
private string <DelayInterval>k__BackingField;
    public string DelayInterval { get; }
    public FixedDelayRetryAttribute(int maxRetryCount, string delayInterval);
    [CompilerGeneratedAttribute]
public string get_DelayInterval();
    public virtual TimeSpan GetNextDelay(RetryContext context);
}
public class Microsoft.Azure.WebJobs.FuncAsyncConverter : MulticastDelegate {
    public FuncAsyncConverter(object object, IntPtr method);
    public virtual Task`1<object> Invoke(object src, Attribute attribute, ValueBindingContext context);
    public virtual IAsyncResult BeginInvoke(object src, Attribute attribute, ValueBindingContext context, AsyncCallback callback, object object);
    public virtual Task`1<object> EndInvoke(IAsyncResult result);
}
public class Microsoft.Azure.WebJobs.FuncAsyncConverter`2 : MulticastDelegate {
    public FuncAsyncConverter`2(object object, IntPtr method);
    public virtual Task`1<TDestination> Invoke(TSource src, Attribute attribute, ValueBindingContext context);
    public virtual IAsyncResult BeginInvoke(TSource src, Attribute attribute, ValueBindingContext context, AsyncCallback callback, object object);
    public virtual Task`1<TDestination> EndInvoke(IAsyncResult result);
}
public class Microsoft.Azure.WebJobs.FuncConverterBuilder : MulticastDelegate {
    public FuncConverterBuilder(object object, IntPtr method);
    public virtual FuncAsyncConverter Invoke(Type typeSource, Type typeDest);
    public virtual IAsyncResult BeginInvoke(Type typeSource, Type typeDest, AsyncCallback callback, object object);
    public virtual FuncAsyncConverter EndInvoke(IAsyncResult result);
}
public class Microsoft.Azure.WebJobs.FunctionDataCacheKey : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Id { get; private set; }
    public string Version { get; private set; }
    public FunctionDataCacheKey(string id, string version);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(string value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public static class Microsoft.Azure.WebJobs.Host.AppServicesHostingUtility : object {
    private static int BytesPerGB;
    public static long GetMemoryLimitBytes(string sku, Nullable`1<int> numCores);
    internal static float GetMemoryGBPerCore(string sku);
}
internal class Microsoft.Azure.WebJobs.Host.ArrayTriggerArgumentBinding`2 : SimpleTriggerArgumentBinding`2<TMessage, TTriggerValue> {
    private SimpleTriggerArgumentBinding`2<TMessage, TTriggerValue> _innerBinding;
    public ArrayTriggerArgumentBinding`2(ITriggerBindingStrategy`2<TMessage, TTriggerValue> triggerBindingStrategy, SimpleTriggerArgumentBinding`2<TMessage, TTriggerValue> innerBinding, IConverterManager converterManager);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.ArrayTriggerArgumentBinding`2/<BindAsync>d__2")]
public virtual Task`1<ITriggerData> BindAsync(TTriggerValue value, ValueBindingContext context);
}
public static class Microsoft.Azure.WebJobs.Host.AssemblyNameCache : object {
    private static ConcurrentDictionary`2<Assembly, AssemblyName> AssemblyToNameCache;
    private static AssemblyNameCache();
    public static AssemblyName GetName(Assembly assembly);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.AmbientBindingContext : object {
    private FunctionBindingContext _functionContext;
    private Func`1<IReadOnlyDictionary`2<string, object>> _bindingDataFactory;
    private IReadOnlyDictionary`2<string, object> _bindingData;
    public FunctionBindingContext FunctionContext { get; }
    public Guid FunctionInstanceId { get; }
    public CancellationToken FunctionCancellationToken { get; }
    public IReadOnlyDictionary`2<string, object> BindingData { get; }
    public AmbientBindingContext(FunctionBindingContext functionContext, IReadOnlyDictionary`2<string, object> bindingData);
    internal AmbientBindingContext(FunctionBindingContext functionContext, Func`1<IReadOnlyDictionary`2<string, object>> bindingDataFactory);
    public FunctionBindingContext get_FunctionContext();
    public Guid get_FunctionInstanceId();
    public CancellationToken get_FunctionCancellationToken();
    public IReadOnlyDictionary`2<string, object> get_BindingData();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.AsyncCollectorBindingProvider`2 : FluentBindingProvider`1<TAttribute> {
    private IConfiguration _configuration;
    private INameResolver _nameResolver;
    private IConverterManager _converterManager;
    private PatternMatcher _patternMatcher;
    private static Type[] _defaultTypes;
    public AsyncCollectorBindingProvider`2(IConfiguration configuration, INameResolver nameResolver, IConverterManager converterManager, PatternMatcher patternMatcher);
    private static AsyncCollectorBindingProvider`2();
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
    private CollectorBindingPattern<TAttribute, TType> GetMode(ParameterInfo parameter);
    private static Type[] MakeArray(Type[] types);
    private static void AddRulesForType(OpenType target, List`1<BindingRule> rules);
    public sealed virtual IEnumerable`1<BindingRule> GetRules();
    public sealed virtual Type GetDefaultType(Attribute attribute, FileAccess access, Type requestedType);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.AsyncCollectorValueProvider`2 : object {
    private IAsyncCollector`1<TMessage> _raw;
    private TUser _object;
    private string _invokeString;
    public BindStepOrder StepOrder { get; }
    public Type Type { get; }
    public AsyncCollectorValueProvider`2(TUser obj, IAsyncCollector`1<TMessage> raw, string invokeString);
    public sealed virtual BindStepOrder get_StepOrder();
    public sealed virtual Type get_Type();
    public sealed virtual Task`1<object> GetValueAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.AsyncCollectorValueProvider`2/<SetValueAsync>d__9")]
public sealed virtual Task SetValueAsync(object value, CancellationToken cancellationToken);
    public sealed virtual string ToInvokeString();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.AttributeCloner : object {
    public static Attribute CreateDirect(Type attributeType, JObject properties);
    private static object ApplyNameResolver(JToken originalValue, Type type);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.AttributeCloner`1 : object {
    private TAttribute _source;
    private ConstructorInfo _matchedCtor;
    private Func`3[] _ctorParamResolvers;
    private Action`2[] _propertySetters;
    private Dictionary`2<PropertyInfo, AutoResolveAttribute> _autoResolves;
    private static BindingFlags Flags;
    private IConfiguration _configuration;
    internal AttributeCloner`1(TAttribute source, IReadOnlyDictionary`2<string, Type> bindingDataContract, IConfiguration configuration, INameResolver nameResolver);
    private static AttributeCloner`1();
    private Func`3<Attribute, IReadOnlyDictionary`2<string, object>, object> GetResolver(PropertyInfo propInfo, INameResolver nameResolver, IReadOnlyDictionary`2<string, Type> contract);
    internal Func`3<Attribute, IReadOnlyDictionary`2<string, object>, object> GetAutoResolveResolver(string originalValue, AutoResolveAttribute autoResolveAttr, INameResolver nameResolver, PropertyInfo propInfo, IReadOnlyDictionary`2<string, Type> contract, Action`1<object> validator);
    internal static Func`3<Attribute, IReadOnlyDictionary`2<string, object>, object> GetConfigurationResolver(string propertyValue, string defaultValue, PropertyInfo propInfo, Action`1<object> validator, Func`2<string, string> resolveValue);
    private static Action`1<object> GetValidatorFunc(PropertyInfo propInfo, bool dontLogValues);
    internal static Func`3<Attribute, IReadOnlyDictionary`2<string, object>, object> GetBuiltinTemplateResolver(string originalValue, INameResolver nameResolver, Action`1<object> validator);
    internal static Func`3<Attribute, IReadOnlyDictionary`2<string, object>, object> GetTemplateResolver(string originalValue, AutoResolveAttribute attr, INameResolver nameResolver, PropertyInfo propInfo, IReadOnlyDictionary`2<string, Type> contract, Action`1<object> validator);
    public TAttribute GetNameResolvedAttribute();
    public string GetInvokeString(TAttribute attributeResolved);
    public TAttribute ResolveFromInvokeString(string invokeString);
    public TAttribute ResolveFromBindingData(BindingContext ctx);
    internal TAttribute New(string invokeString);
    internal TAttribute New(IDictionary`2<string, string> overrideProperties);
    internal TAttribute ResolveFromBindings(IReadOnlyDictionary`2<string, object> bindingData);
    private static string TemplateBind(IResolutionPolicy policy, PropertyInfo prop, Attribute attr, BindingTemplate template, IReadOnlyDictionary`2<string, object> bindingData, Action`1<object> validator);
    internal static IResolutionPolicy GetPolicy(Type formatterType, PropertyInfo propInfo);
}
internal abstract class Microsoft.Azure.WebJobs.Host.Bindings.BindingBase`1 : object {
    protected AttributeCloner`1<TAttribute> Cloner;
    private ParameterDescriptor _param;
    public bool FromAttribute { get; }
    public BindingBase`1(AttributeCloner`1<TAttribute> cloner, ParameterDescriptor param);
    public BindingBase`1(AttributeCloner`1<TAttribute> cloner, ParameterInfo parameterInfo);
    public sealed virtual bool get_FromAttribute();
    protected abstract virtual Task`1<IValueProvider> BuildAsync(TAttribute attrResolved, ValueBindingContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.BindingBase`1/<BindAsync>d__7")]
public sealed virtual Task`1<IValueProvider> BindAsync(BindingContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.BindingBase`1/<BindAsync>d__8")]
public sealed virtual Task`1<IValueProvider> BindAsync(object value, ValueBindingContext context);
    public sealed virtual ParameterDescriptor ToParameterDescriptor();
}
public class Microsoft.Azure.WebJobs.Host.Bindings.BindingContext : object {
    private FunctionBindingContext _functionContext;
    private Func`1<IReadOnlyDictionary`2<string, object>> _bindingDataFactory;
    private CancellationToken _cancellationToken;
    private IReadOnlyDictionary`2<string, object> _bindingData;
    private AmbientBindingContext _ambientContext;
    private ValueBindingContext _valueContext;
    public Guid FunctionInstanceId { get; }
    public CancellationToken FunctionCancellationToken { get; }
    public IReadOnlyDictionary`2<string, object> BindingData { get; }
    public CancellationToken CancellationToken { get; }
    internal AmbientBindingContext AmbientContext { get; }
    public ValueBindingContext ValueContext { get; }
    public BindingContext(ValueBindingContext valueContext, IReadOnlyDictionary`2<string, object> bindingData);
    internal BindingContext(AmbientBindingContext ambientContext, CancellationToken cancellationToken);
    internal BindingContext(ValueBindingContext valueContext, Func`1<IReadOnlyDictionary`2<string, object>> bindingDataFactory);
    public Guid get_FunctionInstanceId();
    public CancellationToken get_FunctionCancellationToken();
    public IReadOnlyDictionary`2<string, object> get_BindingData();
    public CancellationToken get_CancellationToken();
    internal AmbientBindingContext get_AmbientContext();
    public ValueBindingContext get_ValueContext();
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <get_AmbientContext>b__18_0();
}
internal static class Microsoft.Azure.WebJobs.Host.Bindings.BindingDataPathHelper : object {
    public static string ConvertParameterValueToString(object parameterValue, string format);
}
public class Microsoft.Azure.WebJobs.Host.Bindings.BindingDataProvider : object {
    private Type _type;
    private IReadOnlyDictionary`2<string, Type> _contract;
    private IEnumerable`1<PropertyHelper> _propertyHelpers;
    private BindingTemplateSource _bindingTemplateSource;
    public IReadOnlyDictionary`2<string, Type> Contract { get; }
    internal BindingDataProvider(Type type, IReadOnlyDictionary`2<string, Type> contract, IEnumerable`1<PropertyHelper> propertyHelpers);
    internal BindingDataProvider(string template, bool ignoreCase);
    public sealed virtual IReadOnlyDictionary`2<string, Type> get_Contract();
    public sealed virtual IReadOnlyDictionary`2<string, object> GetBindingData(object value);
    public static BindingDataProvider FromType(Type type);
    public static BindingDataProvider FromTemplate(string template, bool ignoreCase);
    private IReadOnlyDictionary`2<string, object> GetBindingDataFromPropertyHelpers(object value);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.BindingExceptionValueProvider : object {
    private string _message;
    private Exception _exception;
    public Exception Exception { get; }
    public Type Type { get; }
    public BindingExceptionValueProvider(string parameterName, Exception exception);
    public Exception get_Exception();
    public sealed virtual Type get_Type();
    public sealed virtual Task`1<object> GetValueAsync();
    public sealed virtual string ToInvokeString();
}
[ObsoleteAttribute("Not ready for public consumption.")]
public class Microsoft.Azure.WebJobs.Host.Bindings.BindingFactory : object {
    public static ITriggerBinding GetTriggerBinding(ITriggerBindingStrategy`2<TMessage, TTriggerValue> bindingStrategy, ParameterInfo parameter, IConverterManager converterManager, Func`3<ListenerFactoryContext, bool, Task`1<IListener>> createListener);
}
internal static class Microsoft.Azure.WebJobs.Host.Bindings.BindingFactoryHelpers : object {
    private static SimpleTriggerArgumentBinding`2<TMessage, TTriggerValue> GetDirectTriggerBinding(Type exactType, ITriggerBindingStrategy`2<TMessage, TTriggerValue> bindingStrategy, IConverterManager converterManager);
    private static SimpleTriggerArgumentBinding`2<TMessage, TTriggerValue> GetDirectTriggerBindingWorker(ITriggerBindingStrategy`2<TMessage, TTriggerValue> bindingStrategy, IConverterManager converterManager, Type userType);
    internal static ITriggerDataArgumentBinding`1<TTriggerValue> GetTriggerArgumentBinding(ITriggerBindingStrategy`2<TMessage, TTriggerValue> bindingStrategy, ParameterInfo parameter, IConverterManager converterManager, Boolean& singleDispatch);
    private static SimpleTriggerArgumentBinding`2<TMessage, TTriggerValue> GetTriggerArgumentElementBinding(Type elementType, ITriggerBindingStrategy`2<TMessage, TTriggerValue> bindingStrategy, IConverterManager converterManager);
    public static TReturn MethodInvoke(MethodInfo method, Object[] args);
}
public class Microsoft.Azure.WebJobs.Host.Bindings.BindingProviderContext : object {
    private ParameterInfo _parameter;
    private IReadOnlyDictionary`2<string, Type> _bindingDataContract;
    private CancellationToken _cancellationToken;
    private IList`1<string> _bindingErrors;
    public ParameterInfo Parameter { get; }
    public IReadOnlyDictionary`2<string, Type> BindingDataContract { get; }
    public CancellationToken CancellationToken { get; }
    public IList`1<string> BindingErrors { get; }
    public BindingProviderContext(ParameterInfo parameter, IReadOnlyDictionary`2<string, Type> bindingDataContract, CancellationToken cancellationToken);
    public ParameterInfo get_Parameter();
    public IReadOnlyDictionary`2<string, Type> get_BindingDataContract();
    public CancellationToken get_CancellationToken();
    public IList`1<string> get_BindingErrors();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.BindingRule : object {
    public static BindingRule[] Empty;
    [CompilerGeneratedAttribute]
private FilterNode <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <SourceAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <Converters>k__BackingField;
    [CompilerGeneratedAttribute]
private OpenType <UserType>k__BackingField;
    public FilterNode Filter { get; public set; }
    public Type SourceAttribute { get; public set; }
    public Type[] Converters { get; public set; }
    public OpenType UserType { get; public set; }
    private static BindingRule();
    [CompilerGeneratedAttribute]
public FilterNode get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(FilterNode value);
    [CompilerGeneratedAttribute]
public Type get_SourceAttribute();
    [CompilerGeneratedAttribute]
public void set_SourceAttribute(Type value);
    [CompilerGeneratedAttribute]
public Type[] get_Converters();
    [CompilerGeneratedAttribute]
public void set_Converters(Type[] value);
    [CompilerGeneratedAttribute]
public OpenType get_UserType();
    [CompilerGeneratedAttribute]
public void set_UserType(OpenType value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Microsoft.Azure.WebJobs.Host.Bindings.BindingTemplateExtensions : object {
    [ExtensionAttribute]
public static void ValidateContractCompatibility(BindingTemplate bindingTemplate, IReadOnlyDictionary`2<string, Type> bindingDataContract);
    [ExtensionAttribute]
[ObsoleteAttribute("Call instance method directly")]
public static string Bind(BindingTemplate bindingTemplate, IReadOnlyDictionary`2<string, object> bindingData);
    public static void ValidateContractCompatibility(IEnumerable`1<string> parameterNames, IReadOnlyDictionary`2<string, Type> bindingDataContract);
}
public enum Microsoft.Azure.WebJobs.Host.Bindings.BindStepOrder : Enum {
    public int value__;
    public static BindStepOrder Default;
    public static BindStepOrder Enqueue;
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.BindToInputBindingProvider`2 : FluentBindingProvider`1<TAttribute> {
    private IConfiguration _configuration;
    private INameResolver _nameResolver;
    private IConverterManager _converterManager;
    private PatternMatcher _patternMatcher;
    private static Type[] DefaultTypes;
    public BindToInputBindingProvider`2(IConfiguration configuration, INameResolver nameResolver, IConverterManager converterManager, PatternMatcher patternMatcher);
    private static BindToInputBindingProvider`2();
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
    [IteratorStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.BindToInputBindingProvider`2/<GetRules>d__6")]
public sealed virtual IEnumerable`1<BindingRule> GetRules();
    public sealed virtual Type GetDefaultType(Attribute attribute, FileAccess access, Type requestedType);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.BindToStreamBindingProvider`1 : FluentBindingProvider`1<TAttribute> {
    private FileAccess _access;
    private INameResolver _nameResolver;
    private IConverterManager _converterManager;
    private FuncAsyncConverter`2<TAttribute, Stream> _builder;
    private IConfiguration _configuration;
    public BindToStreamBindingProvider`1(PatternMatcher patternMatcher, FileAccess access, IConfiguration configuration, INameResolver nameResolver, IConverterManager converterManager);
    public sealed virtual Type GetDefaultType(Attribute attribute, FileAccess access, Type requestedType);
    [IteratorStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.BindToStreamBindingProvider`1/<GetRules>d__7")]
public sealed virtual IEnumerable`1<BindingRule> GetRules();
    private static void VerifyAccessOrThrow(Nullable`1<FileAccess> declaredAccess, bool isRead);
    private bool IsSupportedByRule(bool isRead);
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
    private static bool CanRead(FileAccess access);
    private static bool CanWrite(FileAccess access);
    private static PropertyInfo GetFileAccessProperty(Attribute attribute);
    private static Nullable`1<FileAccess> GetFileAccessFromAttribute(Attribute attribute);
    private static void SetFileAccessFromAttribute(Attribute attribute, FileAccess access);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.CacheAwareValueProvider : object {
    private object _value;
    private string _invokeString;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; public set; }
    public CacheAwareValueProvider(object value, Type type, string invokeString);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    public sealed virtual Task`1<object> GetValueAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.CacheAwareValueProvider/<SetValueAsync>d__8")]
public sealed virtual Task SetValueAsync(object value, CancellationToken cancellationToken);
    public sealed virtual string ToInvokeString();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Cancellation.CancellationTokenBinding : object {
    private string _parameterName;
    public bool FromAttribute { get; }
    public CancellationTokenBinding(string parameterName);
    public sealed virtual bool get_FromAttribute();
    private Task`1<IValueProvider> BindAsync(CancellationToken token, ValueBindingContext context);
    public sealed virtual Task`1<IValueProvider> BindAsync(object value, ValueBindingContext context);
    public sealed virtual Task`1<IValueProvider> BindAsync(BindingContext context);
    public sealed virtual ParameterDescriptor ToParameterDescriptor();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Cancellation.CancellationTokenBindingProvider : object {
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Cancellation.CancellationTokenValueProvider : object {
    private CancellationToken _token;
    public Type Type { get; }
    public CancellationTokenValueProvider(CancellationToken token);
    public sealed virtual Type get_Type();
    public sealed virtual Task`1<object> GetValueAsync();
    public sealed virtual string ToInvokeString();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.ClassOutputConverter`2 : object {
    private IConverter`2<TInput, TOutput> _innerConverter;
    public ClassOutputConverter`2(IConverter`2<TInput, TOutput> innerConverter);
    public sealed virtual bool TryConvert(object input, TOutput& output);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.CompositeBindingProvider : object {
    private IEnumerable`1<IBindingProvider> _providers;
    public CompositeBindingProvider(IEnumerable`1<IBindingProvider> providers);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.CompositeBindingProvider/<TryCreateAsync>d__2")]
public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
    [IteratorStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.CompositeBindingProvider/<GetRules>d__3")]
public sealed virtual IEnumerable`1<BindingRule> GetRules();
    public sealed virtual Type GetDefaultType(Attribute attribute, FileAccess access, Type requestedType);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.ConstantValueProvider : object {
    private object _value;
    private string _invokeString;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; public set; }
    public ConstantValueProvider(object value, Type type, string invokeString);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    public sealed virtual Task`1<object> GetValueAsync();
    public sealed virtual string ToInvokeString();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Data.ClassDataBinding`1 : object {
    private static IObjectToTypeConverter`1<TBindingData> Converter;
    private string _parameterName;
    private IArgumentBinding`1<TBindingData> _argumentBinding;
    public bool FromAttribute { get; }
    public ClassDataBinding`1(string parameterName, IArgumentBinding`1<TBindingData> argumentBinding);
    private static ClassDataBinding`1();
    public sealed virtual bool get_FromAttribute();
    private Task`1<IValueProvider> BindAsync(TBindingData bindingDataItem, ValueBindingContext context);
    public sealed virtual Task`1<IValueProvider> BindAsync(object value, ValueBindingContext context);
    public sealed virtual Task`1<IValueProvider> BindAsync(BindingContext context);
    public sealed virtual ParameterDescriptor ToParameterDescriptor();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Data.ClassDataBindingProvider`1 : object {
    private static IDataArgumentBindingProvider`1<TBindingData> InnerProvider;
    private static ClassDataBindingProvider`1();
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Data.CompositeArgumentBindingProvider`1 : object {
    private IEnumerable`1<IDataArgumentBindingProvider`1<TBindingData>> _providers;
    public CompositeArgumentBindingProvider`1(IDataArgumentBindingProvider`1[] providers);
    public sealed virtual IArgumentBinding`1<TBindingData> TryCreate(ParameterInfo parameter);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Data.ConverterArgumentBindingProvider`2 : object {
    private IConverter`2<TBindingData, T> _converter;
    public ConverterArgumentBindingProvider`2(IConverter`2<TBindingData, T> converter);
    public sealed virtual IArgumentBinding`1<TBindingData> TryCreate(ParameterInfo parameter);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Data.DataBindingProvider : object {
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
    private static IBindingProvider CreateTypedBindingProvider(Type bindingDataType);
}
internal interface Microsoft.Azure.WebJobs.Host.Bindings.Data.IDataArgumentBindingProvider`1 {
    public abstract virtual IArgumentBinding`1<TBindingData> TryCreate(ParameterInfo parameter);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Data.StringToTArgumentBindingProvider`1 : object {
    public sealed virtual IArgumentBinding`1<TBindingData> TryCreate(ParameterInfo parameter);
    private static IArgumentBinding`1<string> TryCreateBinding(Type itemType);
    private static IArgumentBinding`1<string> TryCreateBindingGeneric();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Data.StructDataBinding`1 : object {
    private static IObjectToTypeConverter`1<TBindingData> Converter;
    private bool _isNullable;
    private string _parameterName;
    private IArgumentBinding`1<TBindingData> _argumentBinding;
    public bool FromAttribute { get; }
    public StructDataBinding`1(string parameterName, IArgumentBinding`1<TBindingData> argumentBinding);
    private static StructDataBinding`1();
    public sealed virtual bool get_FromAttribute();
    private Task`1<IValueProvider> BindAsync(TBindingData bindingDataItem, ValueBindingContext context);
    public sealed virtual Task`1<IValueProvider> BindAsync(object value, ValueBindingContext context);
    public sealed virtual Task`1<IValueProvider> BindAsync(BindingContext context);
    public sealed virtual ParameterDescriptor ToParameterDescriptor();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Data.StructDataBindingProvider`1 : object {
    private static IDataArgumentBindingProvider`1<TBindingData> InnerProvider;
    private static StructDataBindingProvider`1();
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Data.TToStringArgumentBindingProvider`1 : object {
    public sealed virtual IArgumentBinding`1<TBindingData> TryCreate(ParameterInfo parameter);
}
internal static class Microsoft.Azure.WebJobs.Host.Bindings.DefaultAttributeInvokerDescriptor`1 : object {
    public static TAttribute FromInvokeString(AttributeCloner`1<TAttribute> cloner, string invokeString);
    public static string ToInvokeString(IDictionary`2<PropertyInfo, AutoResolveAttribute> resolvableProps, TAttribute source);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.ExecutionContextBindingProvider : object {
    private IOptions`1<ExecutionContextOptions> _options;
    public ExecutionContextBindingProvider(IOptions`1<ExecutionContextOptions> options);
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
}
public class Microsoft.Azure.WebJobs.Host.Bindings.ExecutionContextOptions : object {
    [CompilerGeneratedAttribute]
private string <AppDirectory>k__BackingField;
    public string AppDirectory { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AppDirectory();
    [CompilerGeneratedAttribute]
public void set_AppDirectory(string value);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.FilteringBindingProvider`1 : object {
    private IConfiguration _configuration;
    private INameResolver _nameResolver;
    private IBindingProvider _inner;
    private FilterNode _description;
    public FilteringBindingProvider`1(IConfiguration configuration, INameResolver nameResolver, IBindingProvider inner, FilterNode description);
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
    [IteratorStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.FilteringBindingProvider`1/<GetRules>d__6")]
public sealed virtual IEnumerable`1<BindingRule> GetRules();
    public sealed virtual Type GetDefaultType(Attribute attribute, FileAccess access, Type requestedType);
}
internal abstract class Microsoft.Azure.WebJobs.Host.Bindings.FilterNode : object {
    public abstract virtual bool Eval(Attribute attribute);
    public virtual string ToString();
    protected abstract virtual void ToString(StringBuilder sb);
    public static FilterNode And(IEnumerable`1<FilterNode> children);
    public static FilterNode And(FilterNode[] children);
    public static FilterNode NotNull(PropertyInfo property);
    public static FilterNode Null(PropertyInfo property);
    public static FilterNode IsEqual(PropertyInfo property, TValue value);
    public static FilterNode IsNotEqual(PropertyInfo property, TValue value);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.FuncArgumentBuilder`1 : MulticastDelegate {
    public FuncArgumentBuilder`1(object object, IntPtr method);
    public virtual IValueProvider Invoke(TAttribute attribute, ValueBindingContext context);
    public virtual IAsyncResult BeginInvoke(TAttribute attribute, ValueBindingContext context, AsyncCallback callback, object object);
    public virtual IValueProvider EndInvoke(IAsyncResult result);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.FunctionBinding : object {
    private FunctionDescriptor _descriptor;
    private IReadOnlyDictionary`2<string, IBinding> _bindings;
    private SingletonManager _singletonManager;
    public FunctionBinding(FunctionDescriptor descriptor, IReadOnlyDictionary`2<string, IBinding> bindings, SingletonManager singletonManager);
    internal static BindingContext NewBindingContext(ValueBindingContext context, IReadOnlyDictionary`2<string, object> existingBindingData, IDictionary`2<string, object> parameters);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.FunctionBinding/<BindAsync>d__5")]
public sealed virtual Task`1<IReadOnlyDictionary`2<string, IValueProvider>> BindAsync(ValueBindingContext context, IDictionary`2<string, object> parameters);
}
public class Microsoft.Azure.WebJobs.Host.Bindings.FunctionBindingContext : object {
    private Guid _functionInstanceId;
    private CancellationToken _functionCancellationToken;
    private IServiceProvider _functionInvocationServices;
    private static Lazy`1<IServiceProvider> _emptyServiceProvider;
    private RetryContext _retryContext;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <InstanceServices>k__BackingField;
    public Guid FunctionInstanceId { get; }
    public CancellationToken FunctionCancellationToken { get; }
    public string MethodName { get; private set; }
    public IServiceProvider InstanceServices { get; public set; }
    public RetryContext RetryContext { get; }
    public FunctionBindingContext(Guid functionInstanceId, CancellationToken functionCancellationToken, FunctionDescriptor functionDescriptor);
    public FunctionBindingContext(Guid functionInstanceId, CancellationToken functionCancellationToken, IServiceProvider functionInvocationServices, FunctionDescriptor functionDescriptor);
    public FunctionBindingContext(IFunctionInstanceEx functionInstance, CancellationToken functionCancellationToken);
    private static FunctionBindingContext();
    public Guid get_FunctionInstanceId();
    public CancellationToken get_FunctionCancellationToken();
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
private void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public IServiceProvider get_InstanceServices();
    [CompilerGeneratedAttribute]
public void set_InstanceServices(IServiceProvider value);
    public RetryContext get_RetryContext();
    public object CreateObjectInstance(Type type, Object[] parameters);
    public T CreateObjectInstance(Object[] parameters);
    private static IServiceProvider CreateEmptyServiceProvider();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.GenericCompositeBindingProvider`1 : object {
    private IEnumerable`1<IBindingProvider> _providers;
    private Action`2<TAttribute, Type> _validator;
    private IConfiguration _configuration;
    private INameResolver _nameResolver;
    public GenericCompositeBindingProvider`1(Action`2<TAttribute, Type> validator, IConfiguration configuration, INameResolver nameResolver, IBindingProvider[] providers);
    public GenericCompositeBindingProvider`1(IEnumerable`1<IBindingProvider> providers);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.GenericCompositeBindingProvider`1/<TryCreateAsync>d__6")]
public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
    public sealed virtual IEnumerable`1<BindingRule> GetRules();
    public sealed virtual Type GetDefaultType(Attribute attribute, FileAccess access, Type requestedType);
}
public interface Microsoft.Azure.WebJobs.Host.Bindings.IArgumentBinding`1 {
    public Type ValueType { get; }
    public abstract virtual Type get_ValueType();
    public abstract virtual Task`1<IValueProvider> BindAsync(TArgument value, ValueBindingContext context);
}
public interface Microsoft.Azure.WebJobs.Host.Bindings.IArgumentBindingProvider`1 {
    public abstract virtual TArgumentBinding TryCreate(ParameterInfo parameter);
}
internal interface Microsoft.Azure.WebJobs.Host.Bindings.IBindablePath`1 {
    public bool IsBound { get; }
    public IEnumerable`1<string> ParameterNames { get; }
    public abstract virtual bool get_IsBound();
    public abstract virtual IEnumerable`1<string> get_ParameterNames();
    public abstract virtual TPath Bind(IReadOnlyDictionary`2<string, object> bindingData);
    public abstract virtual string ToString();
}
public interface Microsoft.Azure.WebJobs.Host.Bindings.IBinding {
    public bool FromAttribute { get; }
    public abstract virtual bool get_FromAttribute();
    public abstract virtual Task`1<IValueProvider> BindAsync(object value, ValueBindingContext context);
    public abstract virtual Task`1<IValueProvider> BindAsync(BindingContext context);
    public abstract virtual ParameterDescriptor ToParameterDescriptor();
}
public interface Microsoft.Azure.WebJobs.Host.Bindings.IBindingDataProvider {
    public IReadOnlyDictionary`2<string, Type> Contract { get; }
    public abstract virtual IReadOnlyDictionary`2<string, Type> get_Contract();
    public abstract virtual IReadOnlyDictionary`2<string, object> GetBindingData(object value);
}
public interface Microsoft.Azure.WebJobs.Host.Bindings.IBindingProvider {
    public abstract virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
}
internal interface Microsoft.Azure.WebJobs.Host.Bindings.IBindingRuleProvider {
    public abstract virtual IEnumerable`1<BindingRule> GetRules();
    public abstract virtual Type GetDefaultType(Attribute attribute, FileAccess access, Type requestedType);
}
internal interface Microsoft.Azure.WebJobs.Host.Bindings.IFunctionBinding {
    public abstract virtual Task`1<IReadOnlyDictionary`2<string, IValueProvider>> BindAsync(ValueBindingContext context, IDictionary`2<string, object> parameters);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.ILoggerBinding : object {
    private ParameterInfo _parameter;
    private ILoggerFactory _loggerFactory;
    public bool FromAttribute { get; }
    public ILoggerBinding(ParameterInfo parameter, ILoggerFactory loggerFactory);
    public sealed virtual bool get_FromAttribute();
    public sealed virtual Task`1<IValueProvider> BindAsync(object value, ValueBindingContext context);
    public sealed virtual Task`1<IValueProvider> BindAsync(BindingContext context);
    public sealed virtual ParameterDescriptor ToParameterDescriptor();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.ILoggerBindingProvider : object {
    private ILoggerFactory _loggerFactory;
    public ILoggerBindingProvider(ILoggerFactory loggerFactory);
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.ImmutableWatcher : object {
    private ParameterLog _status;
    public ImmutableWatcher(ParameterLog status);
    public sealed virtual ParameterLog GetStatus();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Invoke.ClassInvokeBinding`1 : object {
    private static IObjectToTypeConverter`1<TValue> Converter;
    private string _parameterName;
    public bool FromAttribute { get; }
    public ClassInvokeBinding`1(string parameterName);
    private static ClassInvokeBinding`1();
    public sealed virtual bool get_FromAttribute();
    private Task`1<IValueProvider> BindAsync(TValue value, ValueBindingContext context);
    public sealed virtual Task`1<IValueProvider> BindAsync(object value, ValueBindingContext context);
    public sealed virtual Task`1<IValueProvider> BindAsync(BindingContext context);
    public sealed virtual ParameterDescriptor ToParameterDescriptor();
}
internal static class Microsoft.Azure.WebJobs.Host.Bindings.Invoke.InvokeBinding : object {
    public static IBinding Create(string parameterName, Type parameterType);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Invoke.StructInvokeBinding`1 : object {
    private static IObjectToTypeConverter`1<TValue> Converter;
    private string _parameterName;
    public bool FromAttribute { get; }
    public StructInvokeBinding`1(string parameterName);
    private static StructInvokeBinding`1();
    public sealed virtual bool get_FromAttribute();
    private Task`1<IValueProvider> BindAsync(TValue value, ValueBindingContext context);
    public sealed virtual Task`1<IValueProvider> BindAsync(object value, ValueBindingContext context);
    public sealed virtual Task`1<IValueProvider> BindAsync(BindingContext context);
    public sealed virtual ParameterDescriptor ToParameterDescriptor();
}
public interface Microsoft.Azure.WebJobs.Host.Bindings.IOrderedValueBinder {
    public BindStepOrder StepOrder { get; }
    public abstract virtual BindStepOrder get_StepOrder();
}
[ObsoleteAttribute("Not ready for public consumption.")]
public interface Microsoft.Azure.WebJobs.Host.Bindings.IResolutionPolicy {
    public abstract virtual string TemplateBind(PropertyInfo propInfo, Attribute resolvedAttribute, BindingTemplate bindingTemplate, IReadOnlyDictionary`2<string, object> bindingData);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.ItemBindingProvider`1 : object {
    private IConfiguration _configuration;
    private INameResolver _nameResolver;
    private Func`3<TAttribute, Type, Task`1<IValueBinder>> _builder;
    private OpenType _filter;
    public ItemBindingProvider`1(IConfiguration configuration, INameResolver nameResolver, Func`3<TAttribute, Type, Task`1<IValueBinder>> builder, OpenType filter);
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
}
public interface Microsoft.Azure.WebJobs.Host.Bindings.IValueBinder {
    public abstract virtual Task SetValueAsync(object value, CancellationToken cancellationToken);
}
public interface Microsoft.Azure.WebJobs.Host.Bindings.IValueProvider {
    public Type Type { get; }
    public abstract virtual Type get_Type();
    public abstract virtual Task`1<object> GetValueAsync();
    public abstract virtual string ToInvokeString();
}
[ObsoleteAttribute("Will be removed in a future release")]
public interface Microsoft.Azure.WebJobs.Host.Bindings.IWatchable {
    public IWatcher Watcher { get; }
    public abstract virtual IWatcher get_Watcher();
}
[ObsoleteAttribute("Will be removed in a future release")]
public interface Microsoft.Azure.WebJobs.Host.Bindings.IWatcher {
    public abstract virtual ParameterLog GetStatus();
}
internal static class Microsoft.Azure.WebJobs.Host.Bindings.ObjectToTypeConverterFactory : object {
    public static IObjectToTypeConverter`1<TOutput> CreateForClass();
    public static IObjectToTypeConverter`1<TOutput> CreateForStruct();
    private static IObjectToTypeConverter`1<TOutput> Create(IObjectToTypeConverter`1<TOutput> identityConverter);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.ObjectValueProvider : object {
    private object _value;
    private Type _valueType;
    public Type Type { get; }
    public ObjectValueProvider(object value, Type valueType);
    public sealed virtual Type get_Type();
    public sealed virtual Task`1<object> GetValueAsync();
    public sealed virtual string ToInvokeString();
}
[DebuggerDisplayAttribute("{GetDisplayName()}")]
public abstract class Microsoft.Azure.WebJobs.Host.Bindings.OpenType : object {
    public bool IsMatch(Type type);
    public abstract virtual bool IsMatch(Type type, OpenTypeMatchContext context);
    internal static bool IsOpenType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual string GetDisplayName();
    internal static OpenType FromType();
    internal static OpenType FromType(Type t);
}
public class Microsoft.Azure.WebJobs.Host.Bindings.OpenTypeMatchContext : object {
    internal Type _match;
    internal bool CheckArg(Type type);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.OutArrayValueProvider`1 : object {
    private IAsyncCollector`1<TMessage> _raw;
    private string _invokeString;
    public BindStepOrder StepOrder { get; }
    public Type Type { get; }
    public OutArrayValueProvider`1(IAsyncCollector`1<TMessage> raw, string invokeString);
    public sealed virtual BindStepOrder get_StepOrder();
    public sealed virtual Type get_Type();
    public sealed virtual Task`1<object> GetValueAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.OutArrayValueProvider`1/<SetValueAsync>d__8")]
public sealed virtual Task SetValueAsync(object value, CancellationToken cancellationToken);
    public sealed virtual string ToInvokeString();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.OutValueProvider`1 : object {
    private IAsyncCollector`1<TMessage> _raw;
    private string _invokeString;
    public BindStepOrder StepOrder { get; }
    public Type Type { get; }
    public OutValueProvider`1(IAsyncCollector`1<TMessage> raw, string invokeString);
    public sealed virtual BindStepOrder get_StepOrder();
    public sealed virtual Type get_Type();
    public sealed virtual Task`1<object> GetValueAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.OutValueProvider`1/<SetValueAsync>d__8")]
public sealed virtual Task SetValueAsync(object value, CancellationToken cancellationToken);
    public sealed virtual string ToInvokeString();
}
[ObsoleteAttribute("Use SystemBindingData instead")]
internal abstract class Microsoft.Azure.WebJobs.Host.Bindings.Path.BindingParameterResolver : object {
    private static Collection`1<BindingParameterResolver> _resolvers;
    public string Name { get; }
    private static BindingParameterResolver();
    public abstract virtual string get_Name();
    public static bool IsSystemParameter(string value);
    public static bool TryGetResolver(string value, BindingParameterResolver& resolver);
    public abstract virtual string Resolve(string value);
    protected string GetFormatOrNull(string value);
}
[DebuggerDisplayAttribute("{Pattern,nq}")]
public class Microsoft.Azure.WebJobs.Host.Bindings.Path.BindingTemplate : object {
    private string _pattern;
    private IReadOnlyList`1<BindingTemplateToken> _tokens;
    private bool _ignoreCase;
    public string Pattern { get; }
    internal IEnumerable`1<BindingTemplateToken> Tokens { get; }
    public IEnumerable`1<string> ParameterNames { get; }
    public bool HasParameters { get; }
    internal BindingTemplate(string pattern, IReadOnlyList`1<BindingTemplateToken> tokens, bool ignoreCase);
    public string get_Pattern();
    internal IEnumerable`1<BindingTemplateToken> get_Tokens();
    public IEnumerable`1<string> get_ParameterNames();
    public bool get_HasParameters();
    public static BindingTemplate FromString(string input, bool ignoreCase);
    public string Bind(IReadOnlyDictionary`2<string, object> parameters);
    [ObsoleteAttribute("Switch to the overload accepting a IReadOnlyDictionary<string, object>.")]
public string Bind(IReadOnlyDictionary`2<string, string> parameters);
    public virtual string ToString();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Path.BindingTemplateParser : object {
    private static string TokenRule;
    private static string ValidateGrammar;
    private static string FormattingCharacter;
    private static string ConnectingCharacter;
    private static string DecimalDigitCharacter;
    private static string CombiningCharacter;
    private static string LetterCharacter;
    private static string ExpressionCharacter;
    private static string IdentifierPartCharacter;
    private static string IdentifierPattern;
    public static IReadOnlyList`1<BindingTemplateToken> ParseTemplate(string input);
    [IteratorStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.Path.BindingTemplateParser/<GetTokens>d__11")]
public static IEnumerable`1<BindingTemplateToken> GetTokens(string input);
    internal static bool IsValidIdentifier(string identifier);
}
[DebuggerDisplayAttribute("{Pattern,nq}")]
public class Microsoft.Azure.WebJobs.Host.Bindings.Path.BindingTemplateSource : object {
    private static string EntirePatternGroupName;
    private string _pattern;
    private Regex _captureRegex;
    public string Pattern { get; }
    public IEnumerable`1<string> ParameterNames { get; }
    internal BindingTemplateSource(string pattern, Regex captureRegex);
    public string get_Pattern();
    public IEnumerable`1<string> get_ParameterNames();
    public static BindingTemplateSource FromString(string pattern, bool ignoreCase);
    public IReadOnlyDictionary`2<string, object> CreateBindingData(string actualPath);
    public virtual string ToString();
}
internal abstract class Microsoft.Azure.WebJobs.Host.Bindings.Path.BindingTemplateToken : object {
    public string ParameterName { get; }
    public string AsLiteral { get; }
    public abstract virtual string get_ParameterName();
    public abstract virtual string get_AsLiteral();
    public static BindingTemplateToken NewLiteral(string literalValue);
    public static BindingTemplateToken NewExpression(string expression);
    public abstract virtual string Evaluate(IReadOnlyDictionary`2<string, object> bindingData);
    protected abstract virtual void BuildCapturePattern(StringBuilder builder);
    internal static string BuildCapturePattern(IEnumerable`1<BindingTemplateToken> tokens);
}
internal abstract class Microsoft.Azure.WebJobs.Host.Bindings.PatternMatcher : object {
    protected Type TypeConverter { get; }
    protected abstract virtual Type get_TypeConverter();
    public static PatternMatcher New(Type typeBuilder, Object[] constructorArgs);
    public static PatternMatcher New(IAsyncConverter`2<T1, T2> instance);
    public static PatternMatcher New(IConverter`2<T1, T2> instance);
    public static PatternMatcher New(Func`3<TSource, TAttribute, TDest> func);
    public static PatternMatcher New(Func`3<TSource, ValueBindingContext, Task`1<TDest>> func);
    public static PatternMatcher New(Func`3<TSource, CancellationToken, Task`1<TDest>> func);
    public static PatternMatcher New(Func`2<TSource, TDest> func);
    public static PatternMatcher New(FuncAsyncConverter`2<TSource, TDest> func);
    public static PatternMatcher New(FuncAsyncConverter func);
    internal static PatternMatcher NewObj(object instance);
    public static FuncConverterBuilder GetBuilder(FuncAsyncConverter func);
    public static FuncConverterBuilder GetBuilder(FuncAsyncConverter`2<TSource, TDestination> func);
    public abstract virtual FuncAsyncConverter TryGetConverterFunc(Type typeSource, Type typeDest);
    public FuncAsyncConverter`2<TSource, TDestination> TryGetConverterFunc();
    public FuncConverterBuilder GetBuilder();
    private FuncAsyncConverter FindAndCreateConverter(Type typeSource, Type typeDest);
    private static FuncAsyncConverter CreateConverterFunc(bool isTask, Type typeInput, Type typeOutput, object instance);
    protected abstract virtual object GetInstance(Dictionary`2<string, Type> genericArgs);
    internal static Type ResolveGenerics(Type type, Dictionary`2<string, Type> genericArgs);
    private static bool AddGenericArg(Dictionary`2<string, Type> genericArgs, string name, Type type);
    private static bool CheckArg(Type openType, Type specificType, Dictionary`2<string, Type> genericArgs);
    [CompilerGeneratedAttribute]
private FuncAsyncConverter <GetBuilder>b__16_0(Type src, Type dest);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Runtime.AttributeBindingSource : object {
    private MemberInfo _memberInfo;
    private IBindingProvider _bindingProvider;
    private AmbientBindingContext _context;
    public AmbientBindingContext AmbientBindingContext { get; }
    public AttributeBindingSource(MemberInfo memberInfo, IBindingProvider bindingProvider, AmbientBindingContext context);
    public sealed virtual AmbientBindingContext get_AmbientBindingContext();
    public sealed virtual Task`1<IBinding> BindAsync(Attribute attribute, Attribute[] additionalAttributes, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Runtime.CollectingDisposable : object {
    private IList`1<IDisposable> _disposables;
    private bool _disposed;
    public void Add(IDisposable disposable);
    public sealed virtual void Dispose();
}
internal interface Microsoft.Azure.WebJobs.Host.Bindings.Runtime.IAttributeBindingSource {
    public AmbientBindingContext AmbientBindingContext { get; }
    public abstract virtual AmbientBindingContext get_AmbientBindingContext();
    public abstract virtual Task`1<IBinding> BindAsync(Attribute attribute, Attribute[] additionalAttributes, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Runtime.RuntimeBinding : object {
    private MemberInfo _memberInfo;
    private ParameterInfo _parameter;
    private IContextGetter`1<IBindingProvider> _bindingProviderGetter;
    public bool FromAttribute { get; }
    public RuntimeBinding(ParameterInfo parameter, IContextGetter`1<IBindingProvider> bindingProviderGetter);
    public sealed virtual bool get_FromAttribute();
    private Task`1<IValueProvider> BindAsync(IAttributeBindingSource binding, ValueBindingContext context);
    public sealed virtual Task`1<IValueProvider> BindAsync(object value, ValueBindingContext context);
    public sealed virtual Task`1<IValueProvider> BindAsync(BindingContext context);
    public sealed virtual ParameterDescriptor ToParameterDescriptor();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Runtime.RuntimeBindingProvider : object {
    private IContextGetter`1<IBindingProvider> _bindingProviderGetter;
    public RuntimeBindingProvider(IContextGetter`1<IBindingProvider> bindingProviderGetter);
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Runtime.RuntimeBindingWatcher : object {
    private object _itemsLock;
    private ICollection`1<Tuple`3<ParameterDescriptor, string, IWatchable>> _items;
    public void Add(ParameterDescriptor parameterDescriptor, string value, IWatchable watchable);
    public sealed virtual ParameterLog GetStatus();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.Runtime.RuntimeValueProvider : object {
    private Binder _binder;
    private Type _parameterType;
    private bool _disposed;
    public Type Type { get; }
    public RuntimeValueProvider(IAttributeBindingSource bindingSource, Type parameterType);
    public sealed virtual Type get_Type();
    public sealed virtual Task`1<object> GetValueAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.Runtime.RuntimeValueProvider/<SetValueAsync>d__7")]
public sealed virtual Task SetValueAsync(object value, CancellationToken cancellationToken);
    public sealed virtual string ToInvokeString();
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.StringConverterObjectToTypeConverter`1 : object {
    private IConverter`2<string, TOutput> _stringConverter;
    public StringConverterObjectToTypeConverter`1(IConverter`2<string, TOutput> stringConverter);
    public sealed virtual bool TryConvert(object input, TOutput& output);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.StructOutputConverter`2 : object {
    private bool _isNullable;
    private IConverter`2<TInput, TOutput> _innerConverter;
    public StructOutputConverter`2(IConverter`2<TInput, TOutput> innerConverter);
    public sealed virtual bool TryConvert(object input, TOutput& output);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.SyncAsyncCollectorAdapter`1 : object {
    private IAsyncCollector`1<T> _inner;
    public SyncAsyncCollectorAdapter`1(IAsyncCollector`1<T> inner);
    public sealed virtual void Add(T item);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.SystemBindingData : object {
    public static string Name;
    private static string InternalKeyName;
    private static IReadOnlyDictionary`2<string, Type> DefaultSystemContract;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public string MethodName { get; public set; }
    public DateTime UtcNow { get; }
    public Guid RandGuid { get; }
    private static SystemBindingData();
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    public DateTime get_UtcNow();
    public Guid get_RandGuid();
    internal static IReadOnlyDictionary`2<string, object> GetSystemBindingData(IReadOnlyDictionary`2<string, object> bindingData);
    internal static void ValidateStaticContract(BindingTemplate template);
    internal void AddToBindingData(Dictionary`2<string, object> bindingData);
    private static SystemBindingData GetFromData(IReadOnlyDictionary`2<string, object> bindingData);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.TextWriterTraceAdapter : TextWriter {
    private StringBuilder _text;
    private TraceWriter _traceWriter;
    public Encoding Encoding { get; }
    private TextWriterTraceAdapter(TraceWriter traceWriter);
    public virtual Encoding get_Encoding();
    public static TextWriter Synchronized(TraceWriter traceWriter);
    public virtual void Write(char value);
    private bool IsCurrentNewLine();
    public virtual void Flush();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.TraceWriterBinding : object {
    private ParameterInfo _parameter;
    private ILoggerFactory _loggerFactory;
    public bool FromAttribute { get; }
    public TraceWriterBinding(ParameterInfo parameter, ILoggerFactory loggerFactory);
    public sealed virtual bool get_FromAttribute();
    public sealed virtual Task`1<IValueProvider> BindAsync(object value, ValueBindingContext context);
    public sealed virtual Task`1<IValueProvider> BindAsync(BindingContext context);
    public sealed virtual ParameterDescriptor ToParameterDescriptor();
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.TraceWriterBindingProvider : object {
    private ILoggerFactory _loggerFactory;
    public TraceWriterBindingProvider(ILoggerFactory loggerFactory);
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.TriggerAdapterBindingProvider`2 : FluentBindingProvider`1<TAttribute> {
    private INameResolver _nameResolver;
    private IConverterManager _converterManager;
    private static Type[] _defaultTypes;
    private static Type[] _defaultBatchTypes;
    public TriggerAdapterBindingProvider`2(INameResolver nameResolver, IConverterManager converterManager);
    private static TriggerAdapterBindingProvider`2();
    public sealed virtual Type GetDefaultType(Attribute attribute, FileAccess access, Type requestedType);
    [IteratorStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.TriggerAdapterBindingProvider`2/<GetRules>d__6")]
public sealed virtual IEnumerable`1<BindingRule> GetRules();
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.TypedAsyncCollectorAdapter`3 : object {
    private IAsyncCollector`1<TDest> _inner;
    private FuncAsyncConverter`2<TSrc, TDest> _convert;
    private TAttribute _attrResolved;
    private ValueBindingContext _context;
    public TypedAsyncCollectorAdapter`3(IAsyncCollector`1<TDest> inner, FuncAsyncConverter`2<TSrc, TDest> convert, TAttribute attrResolved, ValueBindingContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.TypedAsyncCollectorAdapter`3/<AddAsync>d__5")]
public sealed virtual Task AddAsync(TSrc item, CancellationToken cancellationToken);
    public sealed virtual Task FlushAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Bindings.ValidatingWrapperBindingProvider`1 : object {
    private Action`2<TAttribute, Type> _validator;
    private IBindingProvider _inner;
    private IConfiguration _configuration;
    private INameResolver _nameResolver;
    public ValidatingWrapperBindingProvider`1(Action`2<TAttribute, Type> validator, IConfiguration configuration, INameResolver nameResolver, IBindingProvider inner);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Bindings.ValidatingWrapperBindingProvider`1/<TryCreateAsync>d__5")]
public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
}
public class Microsoft.Azure.WebJobs.Host.Bindings.ValueBindingContext : object {
    private FunctionBindingContext _functionContext;
    private CancellationToken _cancellationToken;
    private SharedMemoryMetadata _sharedMemoryMetadata;
    public FunctionBindingContext FunctionContext { get; }
    public Guid FunctionInstanceId { get; }
    public CancellationToken FunctionCancellationToken { get; }
    public CancellationToken CancellationToken { get; }
    public SharedMemoryMetadata SharedMemoryMetadata { get; public set; }
    public ValueBindingContext(FunctionBindingContext functionContext, CancellationToken cancellationToken);
    public ValueBindingContext(FunctionBindingContext functionContext, SharedMemoryMetadata sharedMemoryMetadata, CancellationToken cancellationToken);
    public FunctionBindingContext get_FunctionContext();
    public Guid get_FunctionInstanceId();
    public CancellationToken get_FunctionCancellationToken();
    public CancellationToken get_CancellationToken();
    public SharedMemoryMetadata get_SharedMemoryMetadata();
    public void set_SharedMemoryMetadata(SharedMemoryMetadata value);
}
internal class Microsoft.Azure.WebJobs.Host.ClassPropertyAccessorFactory`1 : object {
    private static ClassPropertyAccessorFactory`1<TReflected> Singleton;
    public static ClassPropertyAccessorFactory`1<TReflected> Instance { get; }
    private static ClassPropertyAccessorFactory`1();
    public static ClassPropertyAccessorFactory`1<TReflected> get_Instance();
    public sealed virtual IPropertyGetter`2<TReflected, TProperty> CreateGetter(PropertyInfo property);
    public sealed virtual IPropertySetter`2<TReflected, TProperty> CreateSetter(PropertyInfo property);
}
internal class Microsoft.Azure.WebJobs.Host.ClassPropertyGetter`2 : object {
    private PropertyGetterDelegate<TReflected, TProperty> _getter;
    private ClassPropertyGetter`2(PropertyGetterDelegate<TReflected, TProperty> getter);
    public sealed virtual TProperty GetValue(TReflected instance);
    public static ClassPropertyGetter`2<TReflected, TProperty> Create(PropertyInfo property);
}
internal class Microsoft.Azure.WebJobs.Host.ClassPropertySetter`2 : object {
    private PropertySetterDelegate<TReflected, TProperty> _setter;
    private ClassPropertySetter`2(PropertySetterDelegate<TReflected, TProperty> setter);
    public sealed virtual void SetValue(TReflected& instance, TProperty value);
    public static ClassPropertySetter`2<TReflected, TProperty> Create(PropertyInfo property);
}
public class Microsoft.Azure.WebJobs.Host.Config.ApplyConversion`2 : object {
    public TNew Value;
    public TExisting Existing;
}
internal class Microsoft.Azure.WebJobs.Host.Config.ConcurrencyOptionsSetup : object {
    public sealed virtual void Configure(ConcurrencyOptions options);
    internal static void ConfigureMemoryOptions(ConcurrencyOptions options);
    internal static void ConfigureMemoryOptions(ConcurrencyOptions options, string sku, Nullable`1<int> numCores);
}
internal class Microsoft.Azure.WebJobs.Host.Config.CoreWebJobsOptionsSetup`1 : object {
    private IConfiguration _configuration;
    public CoreWebJobsOptionsSetup`1(IConfiguration configuration);
    public sealed virtual void Configure(TOptions options);
}
public class Microsoft.Azure.WebJobs.Host.Config.DirectInvokeString : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public static DirectInvokeString None;
    public string Value { get; public set; }
    public DirectInvokeString(string value);
    private static DirectInvokeString();
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Microsoft.Azure.WebJobs.Host.Config.ExtensionConfigContext : FluentConverterRules`2<Attribute, ExtensionConfigContext> {
    private List`1<Action> _updates;
    private Dictionary`2<Type, object> _rules;
    private IConfiguration _configuration;
    private IConverterManager _converterManager;
    private IWebHookProvider _webHookProvider;
    private IExtensionRegistry _extensionRegistry;
    private INameResolver _nameResolver;
    [CompilerGeneratedAttribute]
private IExtensionConfigProvider <Current>k__BackingField;
    internal IExtensionConfigProvider Current { get; internal set; }
    internal ConverterManager ConverterManager { get; }
    public ExtensionConfigContext(IConfiguration configuration, INameResolver nameResolver, IConverterManager converterManager, IWebHookProvider webHookProvider, IExtensionRegistry extensionRegistry);
    [CompilerGeneratedAttribute]
internal IExtensionConfigProvider get_Current();
    [CompilerGeneratedAttribute]
internal void set_Current(IExtensionConfigProvider value);
    internal virtual ConverterManager get_ConverterManager();
    [ObsoleteAttribute("preview")]
public Uri GetWebhookHandler();
    private FluentBindingRule`1<TAttribute> GetOrCreate();
    public FluentBindingRule`1<TAttribute> AddBindingRule();
    internal void ApplyRules();
}
internal class Microsoft.Azure.WebJobs.Host.Config.ExtensionOptionsProvider`1 : object {
    private IOptionsMonitor`1<TOptions> _optionsMonitor;
    [CompilerGeneratedAttribute]
private ExtensionInfo <ExtensionInfo>k__BackingField;
    public ExtensionInfo ExtensionInfo { get; private set; }
    public ExtensionOptionsProvider`1(ExtensionInfo extensionInfo, IOptionsMonitor`1<TOptions> optionsMonitor);
    [CompilerGeneratedAttribute]
public sealed virtual ExtensionInfo get_ExtensionInfo();
    [CompilerGeneratedAttribute]
private void set_ExtensionInfo(ExtensionInfo value);
    public sealed virtual object GetOptions();
}
[ObsoleteAttribute("Not ready for public consumption.")]
public class Microsoft.Azure.WebJobs.Host.Config.FluentBindingRule`1 : FluentConverterRules`2<TAttribute, FluentBindingRule`1<TAttribute>> {
    private IConfiguration _configuration;
    private INameResolver _nameResolver;
    private IConverterManager _converterManager;
    private IExtensionRegistry _extensionRegistry;
    private List`1<FluentBinder<TAttribute>> _binders;
    private List`1<FilterNode> _filterDescription;
    private Func`4<TAttribute, ParameterInfo, INameResolver, ParameterDescriptor> _hook;
    private Action`2<TAttribute, Type> _validator;
    internal ConverterManager ConverterManager { get; }
    internal FluentBindingRule`1(IConfiguration configuration, INameResolver nameResolver, IConverterManager converterManager, IExtensionRegistry extensionRegistry);
    internal virtual ConverterManager get_ConverterManager();
    private static PropertyInfo ResolveProperty(string propertyName);
    private void AppendFilter(FilterNode filter);
    public FluentBindingRule`1<TAttribute> WhenIsNull(string propertyName);
    public FluentBindingRule`1<TAttribute> WhenIsNotNull(string propertyName);
    public FluentBindingRule`1<TAttribute> When(string propertyName, TValue expectedEnumValue);
    [ObsoleteAttribute("Will be removed in a future version.")]
public FluentBindingRule`1<TAttribute> SetPostResolveHook(Func`4<TAttribute, ParameterInfo, INameResolver, ParameterDescriptor> hook);
    public FluentBinder<TAttribute> BindToInput(IConverter`2<TAttribute, TType> builderInstance);
    public FluentBinder<TAttribute> BindToInput(IAsyncConverter`2<TAttribute, TType> builderInstance);
    public FluentBinder<TAttribute> BindToInput(Type builderType, Object[] constructorArgs);
    public FluentBinder<TAttribute> BindToInput(Func`3<TAttribute, ValueBindingContext, Task`1<TType>> builder);
    public FluentBinder<TAttribute> BindToInput(Func`3<TAttribute, CancellationToken, Task`1<TType>> builder);
    public FluentBinder<TAttribute> BindToInput(Func`2<TAttribute, TType> builder);
    private FluentBinder<TAttribute> BindToInput(PatternMatcher pm);
    public void BindToStream(Func`3<TAttribute, ValueBindingContext, Task`1<Stream>> builder, FileAccess fileAccess);
    public void BindToCacheObjectOrStream(Func`3<TAttribute, ValueBindingContext, Task`1<ICacheAwareWriteObject>> builder, FileAccess fileAccess);
    public void BindToCacheObjectOrStream(Func`3<TAttribute, ValueBindingContext, Task`1<ICacheAwareReadObject>> builder, FileAccess fileAccess);
    public void BindToStream(IAsyncConverter`2<TAttribute, Stream> builderInstance, FileAccess fileAccess);
    public void BindToStream(IConverter`2<TAttribute, Stream> builderInstance, FileAccess fileAccess);
    private void BindToStream(PatternMatcher patternMatcher, FileAccess fileAccess);
    public FluentBinder<TAttribute> BindToValueProvider(Func`3<TAttribute, Type, Task`1<IValueBinder>> builder);
    public FluentBinder<TAttribute> BindToValueProvider(Func`3<TAttribute, Type, Task`1<IValueBinder>> builder);
    public FluentBinder<TAttribute> Bind(IBindingProvider binder);
    public void BindToCollector(Func`2<TAttribute, IAsyncCollector`1<TMessage>> buildFromAttribute);
    public void BindToCollector(IAsyncConverter`2<TAttribute, IAsyncCollector`1<TMessage>> buildFromAttribute);
    public void BindToCollector(IConverter`2<TAttribute, IAsyncCollector`1<TMessage>> buildFromAttribute);
    public void BindToCollector(Type builderType, Object[] constructorArgs);
    private void BindToCollector(PatternMatcher pm);
    public void BindToTrigger(ITriggerBindingProvider trigger);
    public void BindToTrigger(ITriggerBindingProvider trigger);
    public void AddValidator(Action`2<TAttribute, Type> validator);
    internal void DebugDumpGraph(TextWriter output);
    private IBindingProvider CreateBinding();
    internal void ApplyRules();
}
[ObsoleteAttribute("Not ready for public consumption.")]
public abstract class Microsoft.Azure.WebJobs.Host.Config.FluentConverterRules`2 : object {
    internal ConverterManager ConverterManager { get; }
    internal abstract virtual ConverterManager get_ConverterManager();
    public TThis AddConverter(Func`2<TSource, TDestination> func);
    public TThis AddConverter(Func`3<TSource, TAttribute, TDestination> func);
    public TThis AddConverter(Func`3<TSource, CancellationToken, Task`1<TDestination>> func);
    public TThis AddConverter(FuncAsyncConverter`2<TSource, TDestination> func);
    public TThis AddOpenConverter(FuncAsyncConverter func);
    public TThis AddOpenConverter(Type typeConverter, Object[] constructorArgs);
    public TThis AddConverter(IConverter`2<TSource, TDestination> converterInstance);
    public TThis AddConverter(IAsyncConverter`2<TSource, TDestination> converterInstance);
    private TThis AddConverterBuilder(PatternMatcher patternMatcher);
    private static void VerifyNotOpenTypes();
}
public interface Microsoft.Azure.WebJobs.Host.Config.IExtensionConfigProvider {
    public abstract virtual void Initialize(ExtensionConfigContext context);
}
public interface Microsoft.Azure.WebJobs.Host.Config.IExtensionOptionsProvider {
    public ExtensionInfo ExtensionInfo { get; }
    public abstract virtual ExtensionInfo get_ExtensionInfo();
    public abstract virtual object GetOptions();
}
[ObsoleteAttribute("Not ready for public consumption.")]
public interface Microsoft.Azure.WebJobs.Host.Config.IWebHookProvider {
    public abstract virtual Uri GetUrl(IExtensionConfigProvider extension);
}
internal class Microsoft.Azure.WebJobs.Host.Config.PrimaryHostCoordinatorOptionsSetup : object {
    private IOptions`1<ConcurrencyOptions> _concurrencyOptions;
    public PrimaryHostCoordinatorOptionsSetup(IOptions`1<ConcurrencyOptions> concurrencyOptions);
    public sealed virtual void Configure(PrimaryHostCoordinatorOptions options);
}
internal class Microsoft.Azure.WebJobs.Host.Config.WebJobsExtensionConfiguration`1 : object {
    private IConfiguration _configuration;
    private Lazy`1<IConfigurationSection> _configSection;
    public IConfigurationSection ConfigurationSection { get; }
    public WebJobsExtensionConfiguration`1(IConfiguration configuration);
    private IConfigurationSection BuildConfiguration();
    public sealed virtual IConfigurationSection get_ConfigurationSection();
}
internal class Microsoft.Azure.WebJobs.Host.Config.WebJobsExtensionOptionsConfiguration`1 : object {
    private string _extensionName;
    private IConfiguration _configuration;
    private Action`3<IConfiguration, string, TOptions> _configure;
    public WebJobsExtensionOptionsConfiguration`1(IConfiguration configuration, string extensionName, Action`3<IConfiguration, string, TOptions> configure);
    public sealed virtual void Configure(TOptions options);
}
public interface Microsoft.Azure.WebJobs.Host.Configuration.IWebJobsExtensionConfiguration`1 {
    public IConfigurationSection ConfigurationSection { get; }
    public abstract virtual IConfigurationSection get_ConfigurationSection();
}
internal static class Microsoft.Azure.WebJobs.Host.Constants : object {
    public static string WebJobsConfigurationSectionName;
    public static string EnvironmentSettingName;
    public static string DevelopmentEnvironmentValue;
    public static string DynamicSku;
    public static string ElasticPremiumSku;
    public static string AzureWebsiteSku;
    public static string AzureWebJobsShutdownFile;
    public static string AzureWebsiteInstanceId;
    public static string AzureWebsiteContainerName;
    public static string DateTimeFormatString;
}
internal class Microsoft.Azure.WebJobs.Host.ContextAccessor`1 : object {
    private TValue _value;
    public TValue Value { get; }
    public sealed virtual TValue get_Value();
    public sealed virtual void SetValue(TValue value);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.AsyncConverter`2 : object {
    private IConverter`2<TInput, TOutput> _innerConverter;
    public AsyncConverter`2(IConverter`2<TInput, TOutput> innerConverter);
    public sealed virtual Task`1<TOutput> ConvertAsync(TInput input, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.ByteToStringConverter : object {
    public sealed virtual string Convert(byte input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.CharToStringConverter : object {
    public sealed virtual string Convert(char input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.CompositeAsyncObjectToTypeConverter`1 : object {
    private IEnumerable`1<IAsyncObjectToTypeConverter`1<T>> _converters;
    public CompositeAsyncObjectToTypeConverter`1(IEnumerable`1<IAsyncObjectToTypeConverter`1<T>> converters);
    public CompositeAsyncObjectToTypeConverter`1(IAsyncObjectToTypeConverter`1[] converters);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Converters.CompositeAsyncObjectToTypeConverter`1/<TryConvertAsync>d__3")]
public sealed virtual Task`1<ConversionResult`1<T>> TryConvertAsync(object value, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.CompositeObjectToTypeConverter`1 : object {
    private IEnumerable`1<IObjectToTypeConverter`1<T>> _converters;
    public CompositeObjectToTypeConverter`1(IEnumerable`1<IObjectToTypeConverter`1<T>> converters);
    public CompositeObjectToTypeConverter`1(IObjectToTypeConverter`1[] converters);
    public sealed virtual bool TryConvert(object input, T& output);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.CompositeStringToTConverterFactory : object {
    private IStringToTConverterFactory[] _factories;
    public CompositeStringToTConverterFactory(IStringToTConverterFactory[] factories);
    public sealed virtual IConverter`2<string, TOutput> TryCreate();
}
internal class Microsoft.Azure.WebJobs.Host.Converters.ConversionResult`1 : ValueType {
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    public bool Succeeded { get; public set; }
    public TResult Result { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
public void set_Succeeded(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(TResult value);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.GuidToStringConverter : object {
    public sealed virtual string Convert(Guid input);
}
internal interface Microsoft.Azure.WebJobs.Host.Converters.IAsyncObjectToTypeConverter`1 {
    public abstract virtual Task`1<ConversionResult`1<TOutput>> TryConvertAsync(object input, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.IdentityConverter`1 : object {
    public sealed virtual TValue Convert(TValue input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.IdentityStringToTConverterFactory : object {
    public sealed virtual IConverter`2<string, TOutput> TryCreate();
}
internal class Microsoft.Azure.WebJobs.Host.Converters.Int16ToStringConverter : object {
    public sealed virtual string Convert(short input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.Int32ToStringConverter : object {
    public sealed virtual string Convert(int input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.Int64ToStringConverter : object {
    public sealed virtual string Convert(long input);
}
internal interface Microsoft.Azure.WebJobs.Host.Converters.IObjectToTypeConverter`1 {
    public abstract virtual bool TryConvert(object input, TOutput& output);
}
internal interface Microsoft.Azure.WebJobs.Host.Converters.IStringToTConverterFactory {
    public abstract virtual IConverter`2<string, TOutput> TryCreate();
}
internal class Microsoft.Azure.WebJobs.Host.Converters.KnownTypesParseToStringConverterFactory : object {
    public sealed virtual IConverter`2<string, TOutput> TryCreate();
}
internal class Microsoft.Azure.WebJobs.Host.Converters.SByteToStringConverter : object {
    public sealed virtual string Convert(sbyte input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToBigIntegerConverter : object {
    public sealed virtual BigInteger Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToByteConverter : object {
    public sealed virtual byte Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToDateTimeConverter : object {
    public sealed virtual DateTime Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToDateTimeOffsetConverter : object {
    public sealed virtual DateTimeOffset Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToDecimalConverter : object {
    public sealed virtual decimal Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToDoubleConverter : object {
    public sealed virtual double Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToGuidConverter : object {
    public sealed virtual Guid Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToInt16Converter : object {
    public sealed virtual short Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToInt32Converter : object {
    public sealed virtual int Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToInt64Converter : object {
    public sealed virtual long Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToSByteConverter : object {
    public sealed virtual sbyte Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToSingleConverter : object {
    public sealed virtual float Convert(string input);
}
internal static class Microsoft.Azure.WebJobs.Host.Converters.StringToTConverterFactory : object {
    private static IStringToTConverterFactory Singleton;
    public static IStringToTConverterFactory Instance { get; }
    private static StringToTConverterFactory();
    public static IStringToTConverterFactory get_Instance();
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToTimeSpanConverter : object {
    public sealed virtual TimeSpan Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToUInt16Converter : object {
    public sealed virtual ushort Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToUInt32Converter : object {
    public sealed virtual UInt32 Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.StringToUInt64Converter : object {
    public sealed virtual ulong Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.TryParseDelegate`1 : MulticastDelegate {
    public TryParseDelegate`1(object object, IntPtr method);
    public virtual bool Invoke(string input, TOutput& result);
    public virtual IAsyncResult BeginInvoke(string input, TOutput& result, AsyncCallback callback, object object);
    public virtual bool EndInvoke(TOutput& result, IAsyncResult __result);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.TryParseStringToTConverter`1 : object {
    private TryParseDelegate`1<TOutput> _tryParseDelegate;
    public TryParseStringToTConverter`1(TryParseDelegate`1<TOutput> tryParse);
    public sealed virtual TOutput Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.TryParseStringToTConverterFactory : object {
    public sealed virtual IConverter`2<string, TOutput> TryCreate();
}
internal static class Microsoft.Azure.WebJobs.Host.Converters.TToStringConverterFactory : object {
    public static IConverter`2<TInput, string> TryCreate();
}
internal class Microsoft.Azure.WebJobs.Host.Converters.TypeConverterStringToTConverter`1 : object {
    private TypeConverter _typeConverter;
    public TypeConverterStringToTConverter`1(TypeConverter typeConverter);
    public sealed virtual TOutput Convert(string input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.TypeConverterStringToTConverterFactory : object {
    public sealed virtual IConverter`2<string, TOutput> TryCreate();
    private static TypeConverter GetTypeConverter(Type type);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.UInt16ToStringConverter : object {
    public sealed virtual string Convert(ushort input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.UInt32ToStringConverter : object {
    public sealed virtual string Convert(UInt32 input);
}
internal class Microsoft.Azure.WebJobs.Host.Converters.UInt64ToStringConverter : object {
    public sealed virtual string Convert(ulong input);
}
public class Microsoft.Azure.WebJobs.Host.DefaultExtensionRegistry : object {
    private ConcurrentDictionary`2<Type, ConcurrentBag`1<object>> _registry;
    public sealed virtual void RegisterExtension(Type type, object instance);
    public sealed virtual IEnumerable`1<object> GetExtensions(Type type);
}
public class Microsoft.Azure.WebJobs.Host.DefaultExtensionRegistryFactory : object {
    private IConfiguration _configuration;
    private IEnumerable`1<IExtensionConfigProvider> _registeredExtensions;
    private IConverterManager _converterManager;
    private IWebHookProvider _webHookProvider;
    private INameResolver _nameResolver;
    public DefaultExtensionRegistryFactory(IEnumerable`1<IExtensionConfigProvider> registeredExtensions, IConverterManager converterManager, IConfiguration configuration, INameResolver nameResolver, IWebHookProvider webHookProvider);
    public sealed virtual IExtensionRegistry Create();
}
public static class Microsoft.Azure.WebJobs.Host.Diagnostics.ExceptionFormatter : object {
    private static String[] EmtpyArray;
    private static ExceptionFormatter();
    public static string GetFormattedException(Exception exception);
    private static void GetFormattedException(StringBuilder sb, Exception exception);
    private static void GetStackForAggregateException(StringBuilder sb, Exception exception, AggregateException aggregate);
    private static void GetStackForException(StringBuilder sb, Exception exception, bool includeMessageOnly);
    private static void AddAsyncStackTrace(StringBuilder sb, Exception exception);
    private static bool ShouldShowFrame(Type declaringType);
    private static void FormatFrame(StringBuilder stringBuilder, StackFrame frame);
    private static void FormatFileName(StringBuilder stringBuilder, StackFrame frame);
    private static void FormatMethodName(StringBuilder stringBuilder, Type declaringType, Boolean& isAsync);
    private static string GetMethodFromAsyncStateMachineType(Type type);
    private static void FormatGenericArguments(StringBuilder stringBuilder, Type[] genericTypeArguments);
    private static void FormatParameters(StringBuilder stringBuilder, MethodBase method);
}
internal class Microsoft.Azure.WebJobs.Host.Dispatch.DispatchQueueHandler : object {
    private SharedQueueHandler _sharedQueue;
    private string _functionId;
    internal DispatchQueueHandler(SharedQueueHandler sharedQueue, string functionId);
    public sealed virtual Task EnqueueAsync(JObject message, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Host.Dispatch.IDispatchQueueHandler {
    public abstract virtual Task EnqueueAsync(JObject message, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Host.Dispatch.IMessageHandler {
    public abstract virtual Task`1<FunctionResult> TryExecuteAsync(JObject data, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Dispatch.InMemoryDispatchQueueHandler : object {
    private IMessageHandler _messageHandler;
    internal InMemoryDispatchQueueHandler(IMessageHandler messageHandler);
    public sealed virtual Task EnqueueAsync(JObject message, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Dispatch.SharedQueueHandler : object {
    internal static string InitErrorMessage;
    private IHostIdProvider _hostIdProvider;
    private IWebJobsExceptionHandler _exceptionHandler;
    private ILoggerFactory _loggerFactory;
    private ISharedContextProvider _sharedContextProvider;
    private ILoadBalancerQueue _queueFactory;
    private Exception _initializationEx;
    private SharedQueueExecutor _triggerExecutor;
    private State _state;
    private IListener _sharedQueuelistener;
    private IAsyncCollector`1<QueueMessage> _sharedQueueWriter;
    public SharedQueueHandler(IHostIdProvider hostIdProvider, IWebJobsExceptionHandler exceptionHandler, ILoggerFactory loggerFactory, ISharedContextProvider sharedContextProvider, ILoadBalancerQueue queueFactory);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Dispatch.SharedQueueHandler/<StopQueueAsync>d__13")]
internal Task StopQueueAsync(CancellationToken cancellationToken);
    private static string ErrorMessage(State expected, State actual);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Dispatch.SharedQueueHandler/<InitializeAsync>d__15")]
internal Task InitializeAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Dispatch.SharedQueueHandler/<StartQueueAsync>d__16")]
internal Task StartQueueAsync(CancellationToken cancellationToken);
    internal bool RegisterHandler(string functionId, IMessageHandler handler);
    internal Task EnqueueAsync(JObject message, string functionId, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.DrainModeManager : object {
    private ILogger _logger;
    private ConcurrentDictionary`2<Guid, CancellationTokenSource> _cancellationTokenSources;
    [CompilerGeneratedAttribute]
private bool <IsDrainModeEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IListener> <Listeners>k__BackingField;
    public bool IsDrainModeEnabled { get; private set; }
    public ICollection`1<IListener> Listeners { get; private set; }
    public DrainModeManager(ILogger`1<DrainModeManager> logger);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDrainModeEnabled();
    [CompilerGeneratedAttribute]
private void set_IsDrainModeEnabled(bool value);
    [CompilerGeneratedAttribute]
public ICollection`1<IListener> get_Listeners();
    [CompilerGeneratedAttribute]
private void set_Listeners(ICollection`1<IListener> value);
    public sealed virtual void RegisterListener(IListener listener);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.DrainModeManager/<EnableDrainModeAsync>d__12")]
public sealed virtual Task EnableDrainModeAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.AbortListenerFunctionExecutor : DelegatingFunctionExecutor {
    private IListenerFactory _abortListenerFactory;
    public AbortListenerFunctionExecutor(IListenerFactory abortListenerFactory, IFunctionExecutor innerExecutor);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.AbortListenerFunctionExecutor/<TryExecuteAsync>d__2")]
public virtual Task`1<IDelayedException> TryExecuteAsync(IFunctionInstance instance, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IDelayedException> <>n__0(IFunctionInstance instance, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.ActivatorInstanceFactory`1 : object {
    private Func`2<IFunctionInstanceEx, T> _createInstance;
    public ActivatorInstanceFactory`1(IJobActivator activator);
    public sealed virtual T Create(IFunctionInstanceEx functionInstance);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.BindingSource : object {
    private IFunctionBinding _binding;
    private IDictionary`2<string, object> _parameters;
    public BindingSource(IFunctionBinding binding, IDictionary`2<string, object> parameters);
    public sealed virtual Task`1<IReadOnlyDictionary`2<string, IValueProvider>> BindAsync(ValueBindingContext context);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.DefaultHostIdProvider : object {
    private ITypeLocator _typeLocator;
    private string _hostId;
    public DefaultHostIdProvider(ITypeLocator typeLocator);
    public sealed virtual Task`1<string> GetHostIdAsync(CancellationToken cancellationToken);
    private string ComputeHostId();
}
internal class Microsoft.Azure.WebJobs.Host.Executors.DefaultInstanceServicesProvider : object {
    private IServiceScopeFactory _serviceScopeFactory;
    private IServiceScope _instanceServicesScope;
    private IServiceProvider _instanceServices;
    public IServiceProvider InstanceServices { get; public set; }
    public DefaultInstanceServicesProvider(IServiceScopeFactory serviceScopeFactory);
    public sealed virtual IServiceProvider get_InstanceServices();
    public sealed virtual void set_InstanceServices(IServiceProvider value);
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.WebJobs.Host.Executors.DefaultInstanceServicesProviderFactory : object {
    private IServiceScopeFactory _serviceScopeFactory;
    public DefaultInstanceServicesProviderFactory(IServiceScopeFactory serviceScopeFactory);
    public sealed virtual IInstanceServicesProvider CreateInstanceServicesProvider(FunctionInstanceFactoryContext functionInstanceFactoryContext);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.DefaultJobActivator : object {
    private IServiceProvider _serviceProvider;
    private ConcurrentDictionary`2<Type, ObjectFactory> _factories;
    public DefaultJobActivator(IServiceProvider serviceProvider);
    public sealed virtual T CreateInstance();
    public sealed virtual T CreateInstance(IFunctionInstanceEx functionInstance);
    private T CreateInstance(IServiceProvider serviceProvider);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.DelayedException : object {
    private Exception _exception;
    public Exception Exception { get; }
    public DelayedException(Exception exception);
    public sealed virtual Exception get_Exception();
    public sealed virtual void Throw();
}
internal abstract class Microsoft.Azure.WebJobs.Host.Executors.DelegatingFunctionExecutor : object {
    private IFunctionExecutor _innerExecutor;
    private IRetryNotifier _retryNotifier;
    public DelegatingFunctionExecutor(IFunctionExecutor innerExecutor);
    public virtual Task`1<IDelayedException> TryExecuteAsync(IFunctionInstance instance, CancellationToken cancellationToken);
    public virtual void RetryPending();
    public virtual void RetryComplete();
}
internal class Microsoft.Azure.WebJobs.Host.Executors.ExceptionDispatchInfoDelayedException : object {
    private ExceptionDispatchInfo _exceptionInfo;
    public Exception Exception { get; }
    public ExceptionDispatchInfoDelayedException(ExceptionDispatchInfo exceptionInfo);
    public sealed virtual Exception get_Exception();
    public sealed virtual void Throw();
}
internal class Microsoft.Azure.WebJobs.Host.Executors.FixedHostIdProvider : object {
    private string _hostId;
    public FixedHostIdProvider(string hostId);
    public sealed virtual Task`1<string> GetHostIdAsync(CancellationToken cancellationToken);
}
public class Microsoft.Azure.WebJobs.Host.Executors.FunctionActivityStatus : object {
    [CompilerGeneratedAttribute]
private int <OutstandingInvocations>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutstandingRetries>k__BackingField;
    public int OutstandingInvocations { get; public set; }
    public int OutstandingRetries { get; public set; }
    [CompilerGeneratedAttribute]
public int get_OutstandingInvocations();
    [CompilerGeneratedAttribute]
public void set_OutstandingInvocations(int value);
    [CompilerGeneratedAttribute]
public int get_OutstandingRetries();
    [CompilerGeneratedAttribute]
public void set_OutstandingRetries(int value);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.FunctionExecutor : object {
    private IFunctionInstanceLogger _functionInstanceLogger;
    private IWebJobsExceptionHandler _exceptionHandler;
    private IAsyncCollector`1<FunctionInstanceLogEntry> _functionEventCollector;
    private ILoggerFactory _loggerFactory;
    private ILogger _resultsLogger;
    private IEnumerable`1<IFunctionFilter> _globalFunctionFilters;
    private IDrainModeManager _drainModeManager;
    private ConcurrencyManager _concurrencyManager;
    private int _outstandingInvocations;
    private int _outstandingRetries;
    private Dictionary`2<string, object> _inputBindingScope;
    private Dictionary`2<string, object> _outputBindingScope;
    private IFunctionOutputLogger _functionOutputLogger;
    private HostOutputMessage _hostOutputMessage;
    public HostOutputMessage HostOutputMessage { get; public set; }
    public FunctionExecutor(IFunctionInstanceLogger functionInstanceLogger, IFunctionOutputLogger functionOutputLogger, IWebJobsExceptionHandler exceptionHandler, IAsyncCollector`1<FunctionInstanceLogEntry> functionEventCollector, ConcurrencyManager concurrencyManager, ILoggerFactory loggerFactory, IEnumerable`1<IFunctionFilter> globalFunctionFilters, IDrainModeManager drainModeManager);
    public HostOutputMessage get_HostOutputMessage();
    public void set_HostOutputMessage(HostOutputMessage value);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.FunctionExecutor/<TryExecuteAsync>d__18")]
public sealed virtual Task`1<IDelayedException> TryExecuteAsync(IFunctionInstance functionInstance, CancellationToken cancellationToken);
    public sealed virtual FunctionActivityStatus GetStatus();
    public sealed virtual void RetryPending();
    public sealed virtual void RetryComplete();
    private FunctionInstanceLogEntry CreateInstanceLogEntry(FunctionCompletedMessage functionStartedMessage);
    private void CompleteInstanceLogEntry(FunctionInstanceLogEntry instanceLogEntry, IDictionary`2<string, string> arguments, ExceptionDispatchInfo exceptionInfo);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.FunctionExecutor/<InvokeExceptionFiltersAsync>d__24")]
private Task`1<ExceptionDispatchInfo> InvokeExceptionFiltersAsync(object jobInstance, ExceptionDispatchInfo exceptionDispatchInfo, IFunctionInstance functionInstance, IDictionary`2<string, object> properties, ILogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.FunctionExecutor/<HandleExceptionAsync>d__25")]
internal static Task HandleExceptionAsync(TimeoutAttribute timeout, ExceptionDispatchInfo exceptionInfo, IWebJobsExceptionHandler exceptionHandler);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.FunctionExecutor/<ExecuteWithLoggingAsync>d__26")]
internal Task`1<string> ExecuteWithLoggingAsync(IFunctionInstanceEx instance, FunctionStartedMessage message, FunctionInstanceLogEntry instanceLogEntry, ParameterHelper parameterHelper, ILogger logger, CancellationToken cancellationToken);
    private ExceptionDispatchInfo GetExceptionDispatchInfo(Exception invocationException, IFunctionInstanceEx functionInstance);
    internal static Timer StartFunctionTimeout(IFunctionInstance instance, TimeoutAttribute attribute, CancellationTokenSource cancellationTokenSource, ILogger logger);
    internal static void OnFunctionTimeout(Timer timer, FunctionDescriptor method, Guid instanceId, TimeSpan timeout, bool timeoutWhileDebugging, ILogger logger, CancellationTokenSource cancellationTokenSource, Func`1<bool> isDebuggerAttached);
    private static ITaskSeriesTimer StartOutputTimer(IRecurrentCommand updateCommand, IWebJobsExceptionHandler exceptionHandler);
    private static ITaskSeriesTimer StartParameterLogTimer(IRecurrentCommand updateCommand, IWebJobsExceptionHandler exceptionHandler);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.FunctionExecutor/<ExecuteWithWatchersAsync>d__32")]
internal Task ExecuteWithWatchersAsync(IFunctionInstanceEx instance, ParameterHelper parameterHelper, ILogger logger, CancellationTokenSource functionCancellationTokenSource);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.FunctionExecutor/<InvokeWithTimeoutAsync>d__33")]
internal static Task`1<object> InvokeWithTimeoutAsync(IFunctionInvoker invoker, ParameterHelper parameterHelper, CancellationTokenSource timeoutTokenSource, CancellationTokenSource functionCancellationTokenSource, bool throwOnTimeout, TimeSpan timerInterval, IFunctionInstance instance);
    [IteratorStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.FunctionExecutor/<GetFilters>d__34`1")]
private static IEnumerable`1<TFilter> GetFilters(IEnumerable`1<IFunctionFilter> globalFunctionFilters, FunctionDescriptor functionDescriptor, object instance);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.FunctionExecutor/<TryHandleTimeoutAsync>d__35")]
private static Task`1<bool> TryHandleTimeoutAsync(Task invokeTask, CancellationToken shutdownToken, bool throwOnTimeout, CancellationToken timeoutToken, TimeSpan timeoutInterval, IFunctionInstance instance, Action onTimeout);
    private FunctionCompletedMessage CreateStartedMessage(IFunctionInstance instance);
    private static void CompleteStartedMessage(FunctionStartedMessage message, IFunctionOutputDefinition outputDefinition, ParameterHelper parameterHelper);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Host.Executors.FunctionExecutorExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.FunctionExecutorExtensions/<TryExecuteAsync>d__0")]
[ExtensionAttribute]
public static Task`1<IDelayedException> TryExecuteAsync(IFunctionExecutor executor, Func`1<IFunctionInstance> instanceFactory, ILoggerFactory loggerFactory, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.FunctionInstance : object {
    private IInstanceServicesProviderFactory _instanceServicesProviderFactory;
    private IInstanceServicesProvider _instanceServicesProvider;
    private FunctionInstanceFactoryContext _instanceContext;
    [CompilerGeneratedAttribute]
private IBindingSource <BindingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IFunctionInvoker <Invoker>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionDescriptor <FunctionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private RetryContext <RetryContext>k__BackingField;
    public Guid Id { get; }
    public IDictionary`2<string, string> TriggerDetails { get; }
    public Nullable`1<Guid> ParentId { get; }
    public ExecutionReason Reason { get; }
    public IBindingSource BindingSource { get; }
    public IFunctionInvoker Invoker { get; }
    public FunctionDescriptor FunctionDescriptor { get; }
    public RetryContext RetryContext { get; public set; }
    public IServiceProvider InstanceServices { get; }
    public FunctionInstance(FunctionInstanceFactoryContext context, IBindingSource bindingSource, IFunctionInvoker invoker, FunctionDescriptor functionDescriptor, IInstanceServicesProviderFactory instanceServicesProviderFactory);
    public sealed virtual Guid get_Id();
    public sealed virtual IDictionary`2<string, string> get_TriggerDetails();
    public sealed virtual Nullable`1<Guid> get_ParentId();
    public sealed virtual ExecutionReason get_Reason();
    [CompilerGeneratedAttribute]
public sealed virtual IBindingSource get_BindingSource();
    [CompilerGeneratedAttribute]
public sealed virtual IFunctionInvoker get_Invoker();
    [CompilerGeneratedAttribute]
public sealed virtual FunctionDescriptor get_FunctionDescriptor();
    [CompilerGeneratedAttribute]
public RetryContext get_RetryContext();
    [CompilerGeneratedAttribute]
public void set_RetryContext(RetryContext value);
    public sealed virtual IServiceProvider get_InstanceServices();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Microsoft.Azure.WebJobs.Host.Executors.FunctionInstanceExtensions : object {
    [ExtensionAttribute]
public static IServiceProvider GetInstanceServices(IFunctionInstance instance);
    [ExtensionAttribute]
internal static IFunctionInvokerEx GetFunctionInvoker(IFunctionInstance instance);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.FunctionInstanceFactory : object {
    private IFunctionBinding _binding;
    private IFunctionInvoker _invoker;
    private FunctionDescriptor _descriptor;
    private IInstanceServicesProviderFactory _instanceServicesProviderFactory;
    public FunctionInstanceFactory(IFunctionBinding binding, IFunctionInvoker invoker, FunctionDescriptor descriptor, IInstanceServicesProviderFactory instanceServicesFactory);
    public sealed virtual IFunctionInstance Create(FunctionInstanceFactoryContext context);
}
public class Microsoft.Azure.WebJobs.Host.Executors.FunctionInstanceFactoryContext : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <TriggerDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionReason <ExecutionReason>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Func`1<Task`1<object>>, Task`1<object>> <InvokeHandler>k__BackingField;
    public Guid Id { get; public set; }
    public IDictionary`2<string, string> TriggerDetails { get; public set; }
    public Nullable`1<Guid> ParentId { get; public set; }
    public ExecutionReason ExecutionReason { get; public set; }
    public IDictionary`2<string, object> Parameters { get; public set; }
    public Func`2<Func`1<Task`1<object>>, Task`1<object>> InvokeHandler { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_TriggerDetails();
    [CompilerGeneratedAttribute]
public void set_TriggerDetails(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public ExecutionReason get_ExecutionReason();
    [CompilerGeneratedAttribute]
public void set_ExecutionReason(ExecutionReason value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Func`2<Func`1<Task`1<object>>, Task`1<object>> get_InvokeHandler();
    [CompilerGeneratedAttribute]
public void set_InvokeHandler(Func`2<Func`1<Task`1<object>>, Task`1<object>> value);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.FunctionInstanceFactoryContext`1 : FunctionInstanceFactoryContext {
    [CompilerGeneratedAttribute]
private TTriggerValue <TriggerValue>k__BackingField;
    public TTriggerValue TriggerValue { get; public set; }
    [CompilerGeneratedAttribute]
public TTriggerValue get_TriggerValue();
    [CompilerGeneratedAttribute]
public void set_TriggerValue(TTriggerValue value);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.FunctionInvoker`2 : object {
    private IReadOnlyList`1<string> _parameterNames;
    private IJobInstanceFactory`1<TReflected> _instanceFactory;
    private IMethodInvoker`2<TReflected, TReturnValue> _methodInvoker;
    public IJobInstanceFactory`1<TReflected> InstanceFactory { get; }
    public IReadOnlyList`1<string> ParameterNames { get; }
    public FunctionInvoker`2(IReadOnlyList`1<string> parameterNames, IJobInstanceFactory`1<TReflected> instanceFactory, IMethodInvoker`2<TReflected, TReturnValue> methodInvoker);
    public IJobInstanceFactory`1<TReflected> get_InstanceFactory();
    public sealed virtual IReadOnlyList`1<string> get_ParameterNames();
    public sealed virtual object CreateInstance();
    public sealed virtual object CreateInstance(IFunctionInstanceEx functionInstance);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.FunctionInvoker`2/<InvokeAsync>d__10")]
public sealed virtual Task`1<object> InvokeAsync(object instance, Object[] arguments);
}
internal static class Microsoft.Azure.WebJobs.Host.Executors.FunctionInvokerFactory : object {
    public static IFunctionInvoker Create(MethodInfo method, IJobActivator activator);
    private static IFunctionInvoker CreateGeneric(MethodInfo method, IJobActivator activator);
    private static IJobInstanceFactory`1<TReflected> CreateInstanceFactory(MethodInfo method, IJobActivator jobActivator);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.FunctionInvokerWrapper : object {
    private IFunctionInvoker _functionInvoker;
    public IReadOnlyList`1<string> ParameterNames { get; }
    public FunctionInvokerWrapper(IFunctionInvoker functionInvoker);
    public sealed virtual IReadOnlyList`1<string> get_ParameterNames();
    public sealed virtual object CreateInstance(IFunctionInstanceEx functionInstance);
    public sealed virtual object CreateInstance();
    public sealed virtual Task`1<object> InvokeAsync(object instance, Object[] arguments);
}
internal static class Microsoft.Azure.WebJobs.Host.Executors.FunctionOutputIntervals : object {
    public static TimeSpan InitialDelay;
    public static TimeSpan RefreshRate;
    private static FunctionOutputIntervals();
}
internal static class Microsoft.Azure.WebJobs.Host.Executors.FunctionParameterLogIntervals : object {
    public static TimeSpan InitialDelay;
    public static TimeSpan RefreshRate;
    private static FunctionParameterLogIntervals();
}
[DebuggerDisplayAttribute("Succeeded = {Succeeded}")]
public class Microsoft.Azure.WebJobs.Host.Executors.FunctionResult : object {
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public bool Succeeded { get; private set; }
    public Exception Exception { get; private set; }
    public FunctionResult(bool succeeded);
    public FunctionResult(Exception exception);
    public FunctionResult(bool succeeded, Exception exception);
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
private void set_Succeeded(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(Exception value);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.HeartbeatFunctionExecutor : DelegatingFunctionExecutor {
    private IRecurrentCommand _heartbeatCommand;
    private IWebJobsExceptionHandler _exceptionHandler;
    public HeartbeatFunctionExecutor(IRecurrentCommand heartbeatCommand, IWebJobsExceptionHandler exceptionHandler, IFunctionExecutor innerExecutor);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.HeartbeatFunctionExecutor/<TryExecuteAsync>d__3")]
public virtual Task`1<IDelayedException> TryExecuteAsync(IFunctionInstance instance, CancellationToken cancellationToken);
    private ITaskSeriesTimer CreateHeartbeatTimer(IWebJobsExceptionHandler exceptionHandler);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IDelayedException> <>n__0(IFunctionInstance instance, CancellationToken cancellationToken);
}
internal static class Microsoft.Azure.WebJobs.Host.Executors.HeartbeatIntervals : object {
    public static TimeSpan NormalSignalInterval;
    public static TimeSpan MinimumSignalInterval;
    public static TimeSpan ExpirationInterval;
    private static HeartbeatIntervals();
}
internal static class Microsoft.Azure.WebJobs.Host.Executors.HostIdValidator : object {
    private static int MaximumHostIdLength;
    public static string ValidationMessage { get; }
    public static string get_ValidationMessage();
    public static bool IsValid(string hostId);
    private static bool IsValidQueueName(string name);
    private static bool IsValidQueueName(string name, String& errorMessage);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.HostMessageExecutor : object {
    private IFunctionExecutor _innerExecutor;
    private IFunctionIndexLookup _functionLookup;
    private IFunctionInstanceLogger _functionInstanceLogger;
    private ILoggerFactory _loggerFactory;
    public HostMessageExecutor(IFunctionExecutor innerExecutor, IFunctionIndexLookup functionLookup, IFunctionInstanceLogger functionInstanceLogger, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.HostMessageExecutor/<ExecuteAsync>d__5")]
public Task`1<FunctionResult> ExecuteAsync(string value, CancellationToken cancellationToken);
    private static FunctionCompletedMessage CreateFailedMessage(CallAndOverrideMessage message);
    private IFunctionInstance CreateFunctionInstance(CallAndOverrideMessage message, IFunctionDefinition function);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.HostMessageExecutor/<ProcessCallAndOverrideMessage>d__8")]
private Task ProcessCallAndOverrideMessage(CallAndOverrideMessage message, CancellationToken cancellationToken);
    private static void ProcessAbortHostInstanceMessage();
}
public interface Microsoft.Azure.WebJobs.Host.Executors.IBindingSource {
    public abstract virtual Task`1<IReadOnlyDictionary`2<string, IValueProvider>> BindAsync(ValueBindingContext context);
}
internal interface Microsoft.Azure.WebJobs.Host.Executors.IDashboardLoggingSetup {
    public abstract virtual bool Setup(IFunctionIndex functions, IListenerFactory functionsListenerFactory, IFunctionExecutor& hostCallExecutor, IListener& listener, HostOutputMessage& hostOutputMessage, string hostId, CancellationToken shutdownToken);
}
public interface Microsoft.Azure.WebJobs.Host.Executors.IDelayedException {
    public Exception Exception { get; }
    public abstract virtual Exception get_Exception();
    public abstract virtual void Throw();
}
public interface Microsoft.Azure.WebJobs.Host.Executors.IFunctionActivityStatusProvider {
    public abstract virtual FunctionActivityStatus GetStatus();
}
public interface Microsoft.Azure.WebJobs.Host.Executors.IFunctionExecutor {
    public abstract virtual Task`1<IDelayedException> TryExecuteAsync(IFunctionInstance instance, CancellationToken cancellationToken);
}
public interface Microsoft.Azure.WebJobs.Host.Executors.IFunctionInstance {
    public Guid Id { get; }
    public IDictionary`2<string, string> TriggerDetails { get; }
    public Nullable`1<Guid> ParentId { get; }
    public ExecutionReason Reason { get; }
    public IBindingSource BindingSource { get; }
    public IFunctionInvoker Invoker { get; }
    public FunctionDescriptor FunctionDescriptor { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual IDictionary`2<string, string> get_TriggerDetails();
    public abstract virtual Nullable`1<Guid> get_ParentId();
    public abstract virtual ExecutionReason get_Reason();
    public abstract virtual IBindingSource get_BindingSource();
    public abstract virtual IFunctionInvoker get_Invoker();
    public abstract virtual FunctionDescriptor get_FunctionDescriptor();
}
public interface Microsoft.Azure.WebJobs.Host.Executors.IFunctionInstanceEx {
    public IServiceProvider InstanceServices { get; }
    public abstract virtual IServiceProvider get_InstanceServices();
}
public interface Microsoft.Azure.WebJobs.Host.Executors.IFunctionInstanceFactory {
    public abstract virtual IFunctionInstance Create(FunctionInstanceFactoryContext context);
}
public interface Microsoft.Azure.WebJobs.Host.Executors.IFunctionInvoker {
    public IReadOnlyList`1<string> ParameterNames { get; }
    public abstract virtual IReadOnlyList`1<string> get_ParameterNames();
    public abstract virtual Task`1<object> InvokeAsync(object instance, Object[] arguments);
    public abstract virtual object CreateInstance();
}
internal interface Microsoft.Azure.WebJobs.Host.Executors.IFunctionInvokerEx {
    public abstract virtual object CreateInstance(IFunctionInstanceEx functionInstance);
}
public interface Microsoft.Azure.WebJobs.Host.Executors.IHostIdProvider {
    public abstract virtual Task`1<string> GetHostIdAsync(CancellationToken cancellationToken);
}
public interface Microsoft.Azure.WebJobs.Host.Executors.IInstanceServicesProvider {
    public IServiceProvider InstanceServices { get; public set; }
    public abstract virtual IServiceProvider get_InstanceServices();
    public abstract virtual void set_InstanceServices(IServiceProvider value);
}
public interface Microsoft.Azure.WebJobs.Host.Executors.IInstanceServicesProviderFactory {
    public abstract virtual IInstanceServicesProvider CreateInstanceServicesProvider(FunctionInstanceFactoryContext functionInstance);
}
public interface Microsoft.Azure.WebJobs.Host.Executors.IJobHostContextFactory {
    public abstract virtual Task`1<JobHostContext> Create(JobHost host, CancellationToken shutdownToken, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Host.Executors.IJobInstanceFactory`1 {
    public abstract virtual T Create(IFunctionInstanceEx functionInstance);
}
public interface Microsoft.Azure.WebJobs.Host.Executors.IMethodInvoker`2 {
    public abstract virtual Task`1<TReturnValue> InvokeAsync(TReflected instance, Object[] arguments);
}
public enum Microsoft.Azure.WebJobs.Host.Executors.Internal.FunctionInvocationScope : Enum {
    public int value__;
    public static FunctionInvocationScope System;
    public static FunctionInvocationScope User;
}
[ObsoleteAttribute("Not for public consumption.")]
public static class Microsoft.Azure.WebJobs.Host.Executors.Internal.FunctionInvoker : object {
    private static AsyncLocal`1<FunctionInvocationScope> Local;
    public static FunctionInvocationScope CurrentScope { get; }
    private static FunctionInvoker();
    public static FunctionInvocationScope get_CurrentScope();
    public static Scope BeginUserScope(string memberName, string filePath, int lineNumber);
    public static Scope BeginSystemScope(string memberName, string filePath, int lineNumber);
}
internal interface Microsoft.Azure.WebJobs.Host.Executors.IRetryNotifier {
    public abstract virtual void RetryPending();
    public abstract virtual void RetryComplete();
}
public interface Microsoft.Azure.WebJobs.Host.Executors.ITriggeredFunctionExecutor {
    public abstract virtual Task`1<FunctionResult> TryExecuteAsync(TriggeredFunctionData input, CancellationToken cancellationToken);
}
public class Microsoft.Azure.WebJobs.Host.Executors.JobHostContext : object {
    private IFunctionIndexLookup _functionLookup;
    private IFunctionExecutor _executor;
    private IListener _listener;
    private IAsyncCollector`1<FunctionInstanceLogEntry> _eventCollector;
    private ILoggerFactory _loggerFactory;
    private bool _disposed;
    public IFunctionIndexLookup FunctionLookup { get; }
    public IFunctionExecutor Executor { get; }
    public IListener Listener { get; }
    public IAsyncCollector`1<FunctionInstanceLogEntry> EventCollector { get; }
    public ILoggerFactory LoggerFactory { get; }
    public JobHostContext(IFunctionIndexLookup functionLookup, IFunctionExecutor executor, IListener listener, IAsyncCollector`1<FunctionInstanceLogEntry> eventCollector, ILoggerFactory loggerFactory);
    public IFunctionIndexLookup get_FunctionLookup();
    public IFunctionExecutor get_Executor();
    public IListener get_Listener();
    public IAsyncCollector`1<FunctionInstanceLogEntry> get_EventCollector();
    public ILoggerFactory get_LoggerFactory();
    public sealed virtual void Dispose();
    private void ThrowIfDisposed();
}
internal class Microsoft.Azure.WebJobs.Host.Executors.JobHostContextFactory : object {
    private IFunctionExecutor _functionExecutor;
    private IFunctionIndexProvider _functionIndexProvider;
    private ITriggerBindingProvider _triggerBindingProvider;
    private SingletonManager _singletonManager;
    private IJobActivator _activator;
    private IHostIdProvider _hostIdProvider;
    private INameResolver _nameResolver;
    private IExtensionRegistry _extensions;
    private ILoggerFactory _loggerFactory;
    private IWebJobsExceptionHandler _exceptionHandler;
    private SharedQueueHandler _sharedQueueHandler;
    private IOptions`1<JobHostOptions> _jobHostOptions;
    private IHostInstanceLogger _hostInstanceLogger;
    private IFunctionInstanceLogger _functionInstanceLogger;
    private IFunctionOutputLogger _functionOutputLogger;
    private IConverterManager _converterManager;
    private IAsyncCollector`1<FunctionInstanceLogEntry> _eventCollector;
    private IDashboardLoggingSetup _dashboardLoggingSetup;
    private IScaleMonitorManager _monitorManager;
    private IDrainModeManager _drainModeManager;
    private IApplicationLifetime _applicationLifetime;
    private ITargetScalerManager _targetScalerManager;
    private IEnumerable`1<IListenerDecorator> _listenerDecorators;
    public JobHostContextFactory(IDashboardLoggingSetup dashboardLoggingSetup, IFunctionExecutor functionExecutor, IFunctionIndexProvider functionIndexProvider, ITriggerBindingProvider triggerBindingProvider, SingletonManager singletonManager, IJobActivator activator, IHostIdProvider hostIdProvider, INameResolver nameResolver, IExtensionRegistry extensions, ILoggerFactory loggerFactory, IWebJobsExceptionHandler exceptionHandler, SharedQueueHandler sharedQueueHandler, IOptions`1<JobHostOptions> jobHostOptions, IHostInstanceLogger hostInstanceLogger, IFunctionInstanceLogger functionInstanceLogger, IFunctionOutputLogger functionOutputLogger, IConverterManager converterManager, IAsyncCollector`1<FunctionInstanceLogEntry> eventCollector, IScaleMonitorManager monitorManager, IDrainModeManager drainModeManager, IApplicationLifetime applicationLifetime, ITargetScalerManager targetScalerManager, IEnumerable`1<IListenerDecorator> listenerDecorators);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.JobHostContextFactory/<Create>d__24")]
public sealed virtual Task`1<JobHostContext> Create(JobHost host, CancellationToken shutdownToken, CancellationToken cancellationToken);
    internal static IListener CreateHostListener(IListenerFactory allFunctionsListenerFactory, SharedQueueHandler sharedQueue, IRecurrentCommand heartbeatCommand, IWebJobsExceptionHandler exceptionHandler, CancellationToken shutdownToken);
    private static Task LogHostStartedAsync(IFunctionIndex functionIndex, HostOutputMessage hostOutputMessage, IHostInstanceLogger logger, CancellationToken cancellationToken);
    internal static Assembly GetHostAssembly(IEnumerable`1<MethodInfo> methods);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.JobHostContextFactory/<WriteSiteExtensionManifestAsync>d__28")]
private static Task WriteSiteExtensionManifestAsync(CancellationToken cancellationToken);
    internal static IFunctionExecutor CreateHostCallExecutor(IListenerFactory instanceQueueListenerFactory, IRecurrentCommand heartbeatCommand, IWebJobsExceptionHandler exceptionHandler, CancellationToken shutdownToken, IFunctionExecutor innerExecutor);
}
public static class Microsoft.Azure.WebJobs.Host.Executors.MethodInvokerFactory : object {
    public static IMethodInvoker`2<TReflected, TReturnValue> Create(MethodInfo method);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.MethodInvokerWithReturnValue`2 : object {
    private Func`3<TReflected, Object[], TReturnValue> _lambda;
    public MethodInvokerWithReturnValue`2(Func`3<TReflected, Object[], TReturnValue> lambda);
    public sealed virtual Task`1<TReturnValue> InvokeAsync(TReflected instance, Object[] arguments);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.NullDashboardLoggingSetup : object {
    private IFunctionExecutor _functionExecutor;
    private SharedQueueHandler _sharedQueueHandler;
    public NullDashboardLoggingSetup(IFunctionExecutor functionExecutor, SharedQueueHandler sharedQueueHandler);
    public sealed virtual bool Setup(IFunctionIndex functions, IListenerFactory functionsListenerFactory, IFunctionExecutor& hostCallExecutor, IListener& listener, HostOutputMessage& hostOutputMessage, string hostId, CancellationToken shutdownToken);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.NullInstanceFactory`1 : object {
    [CompilerGeneratedAttribute]
private static NullInstanceFactory`1<TReflected> <Instance>k__BackingField;
    public static NullInstanceFactory`1<TReflected> Instance { get; }
    private static NullInstanceFactory`1();
    [CompilerGeneratedAttribute]
public static NullInstanceFactory`1<TReflected> get_Instance();
    public sealed virtual TReflected Create(IFunctionInstanceEx functionInstance);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.ShutdownFunctionExecutor : DelegatingFunctionExecutor {
    private CancellationToken _shutdownToken;
    public ShutdownFunctionExecutor(CancellationToken shutdownToken, IFunctionExecutor innerExecutor);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.ShutdownFunctionExecutor/<TryExecuteAsync>d__2")]
public virtual Task`1<IDelayedException> TryExecuteAsync(IFunctionInstance instance, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IDelayedException> <>n__0(IFunctionInstance instance, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.TaskMethodInvoker`2 : object {
    private Func`3<TReflected, Object[], Task`1<TReturnType>> _lambda;
    public TaskMethodInvoker`2(Func`3<TReflected, Object[], Task`1<TReturnType>> lambda);
    public sealed virtual Task`1<TReturnType> InvokeAsync(TReflected instance, Object[] arguments);
    private static void ThrowIfWrappedTaskInstance(Task task);
    private static Type GetTaskInnerTypeOrNull(Type taskType);
}
public class Microsoft.Azure.WebJobs.Host.Executors.TriggeredFunctionData : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private object <TriggerValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <TriggerDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Func`1<Task>, Task> <InvokeHandler>k__BackingField;
    public Nullable`1<Guid> ParentId { get; public set; }
    public object TriggerValue { get; public set; }
    public IDictionary`2<string, string> TriggerDetails { get; public set; }
    [ObsoleteAttribute("Not ready for public consumption.")]
public Func`2<Func`1<Task>, Task> InvokeHandler { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public object get_TriggerValue();
    [CompilerGeneratedAttribute]
public void set_TriggerValue(object value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_TriggerDetails();
    [CompilerGeneratedAttribute]
public void set_TriggerDetails(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Func`2<Func`1<Task>, Task> get_InvokeHandler();
    [CompilerGeneratedAttribute]
public void set_InvokeHandler(Func`2<Func`1<Task>, Task> value);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.TriggeredFunctionExecutor`1 : object {
    private ILoggerFactory _loggerFactory;
    private FunctionDescriptor _descriptor;
    private ITriggeredFunctionInstanceFactory`1<TTriggerValue> _instanceFactory;
    private IFunctionExecutor _executor;
    public FunctionDescriptor Function { get; }
    public TriggeredFunctionExecutor`1(FunctionDescriptor descriptor, IFunctionExecutor executor, ITriggeredFunctionInstanceFactory`1<TTriggerValue> instanceFactory, ILoggerFactory loggerFactory);
    public FunctionDescriptor get_Function();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.TriggeredFunctionExecutor`1/<TryExecuteAsync>d__7")]
public sealed virtual Task`1<FunctionResult> TryExecuteAsync(TriggeredFunctionData input, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.VoidMethodInvoker`2 : object {
    private Action`2<TReflected, Object[]> _lambda;
    public VoidMethodInvoker`2(Action`2<TReflected, Object[]> lambda);
    public sealed virtual Task`1<TReturnValue> InvokeAsync(TReflected instance, Object[] arguments);
}
internal class Microsoft.Azure.WebJobs.Host.Executors.VoidTaskMethodInvoker`2 : object {
    private Func`3<TReflected, Object[], Task> _lambda;
    public VoidTaskMethodInvoker`2(Func`3<TReflected, Object[], Task> lambda);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Executors.VoidTaskMethodInvoker`2/<InvokeAsync>d__2")]
public sealed virtual Task`1<TReturnType> InvokeAsync(TReflected instance, Object[] arguments);
}
internal class Microsoft.Azure.WebJobs.Host.FluentBindingProvider`1 : object {
    [CompilerGeneratedAttribute]
private Func`4<TAttribute, ParameterInfo, INameResolver, ParameterDescriptor> <BuildParameterDescriptor>k__BackingField;
    protected internal Func`4<TAttribute, ParameterInfo, INameResolver, ParameterDescriptor> BuildParameterDescriptor { get; protected internal set; }
    [CompilerGeneratedAttribute]
protected internal Func`4<TAttribute, ParameterInfo, INameResolver, ParameterDescriptor> get_BuildParameterDescriptor();
    [CompilerGeneratedAttribute]
protected internal void set_BuildParameterDescriptor(Func`4<TAttribute, ParameterInfo, INameResolver, ParameterDescriptor> value);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Host.FluentBindingProviderExtensions : object {
    [ExtensionAttribute]
public static IBindingProvider SetPostResolveHook(IBindingProvider binder, Func`4<TAttribute, ParameterInfo, INameResolver, ParameterDescriptor> buildParameterDescriptor);
}
public class Microsoft.Azure.WebJobs.Host.FunctionException : RecoverableException {
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    public string MethodName { get; private set; }
    public FunctionException(string message);
    public FunctionException(string message, Exception innerException);
    public FunctionException(string message, string methodName, Exception innerException);
    protected FunctionException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
private void set_MethodName(string value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("Filters is in preview and there may be breaking changes in this area.")]
public class Microsoft.Azure.WebJobs.Host.FunctionExceptionContext : FunctionFilterContext {
    [CompilerGeneratedAttribute]
private ExceptionDispatchInfo <ExceptionDispatchInfo>k__BackingField;
    public Exception Exception { get; }
    public ExceptionDispatchInfo ExceptionDispatchInfo { get; internal set; }
    public FunctionExceptionContext(Guid functionInstanceId, string functionName, ILogger logger, ExceptionDispatchInfo exceptionDispatchInfo, IDictionary`2<string, object> properties);
    public Exception get_Exception();
    [CompilerGeneratedAttribute]
public ExceptionDispatchInfo get_ExceptionDispatchInfo();
    [CompilerGeneratedAttribute]
internal void set_ExceptionDispatchInfo(ExceptionDispatchInfo value);
}
[ObsoleteAttribute("Filters is in preview and there may be breaking changes in this area.")]
[AttributeUsageAttribute("68")]
public abstract class Microsoft.Azure.WebJobs.Host.FunctionExceptionFilterAttribute : Attribute {
    public abstract virtual Task OnExceptionAsync(FunctionExceptionContext exceptionContext, CancellationToken cancellationToken);
}
[ObsoleteAttribute("Filters is in preview and there may be breaking changes in this area.")]
public class Microsoft.Azure.WebJobs.Host.FunctionExecutedContext : FunctionInvocationContext {
    [CompilerGeneratedAttribute]
private FunctionResult <FunctionResult>k__BackingField;
    public FunctionResult FunctionResult { get; internal set; }
    public FunctionExecutedContext(IReadOnlyDictionary`2<string, object> arguments, IDictionary`2<string, object> properties, Guid functionInstanceId, string functionName, ILogger logger, FunctionResult functionResult);
    [CompilerGeneratedAttribute]
public FunctionResult get_FunctionResult();
    [CompilerGeneratedAttribute]
internal void set_FunctionResult(FunctionResult value);
}
[ObsoleteAttribute("Filters is in preview and there may be breaking changes in this area.")]
public class Microsoft.Azure.WebJobs.Host.FunctionExecutingContext : FunctionInvocationContext {
    public FunctionExecutingContext(IReadOnlyDictionary`2<string, object> arguments, IDictionary`2<string, object> properties, Guid functionInstanceId, string functionName, ILogger logger);
}
internal class Microsoft.Azure.WebJobs.Host.FunctionFilterBindingProvider : object {
    public sealed virtual Task`1<IBinding> TryCreateAsync(BindingProviderContext context);
}
[ObsoleteAttribute("Filters is in preview and there may be breaking changes in this area.")]
public abstract class Microsoft.Azure.WebJobs.Host.FunctionFilterContext : object {
    [CompilerGeneratedAttribute]
private Guid <FunctionInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IJobInvoker <Invoker>k__BackingField;
    public Guid FunctionInstanceId { get; }
    public string FunctionName { get; }
    public IDictionary`2<string, object> Properties { get; }
    public ILogger Logger { get; }
    internal IJobInvoker Invoker { get; internal set; }
    protected FunctionFilterContext(Guid functionInstanceId, string functionName, ILogger logger, IDictionary`2<string, object> properties);
    [CompilerGeneratedAttribute]
public Guid get_FunctionInstanceId();
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
internal IJobInvoker get_Invoker();
    [CompilerGeneratedAttribute]
internal void set_Invoker(IJobInvoker value);
}
[ObsoleteAttribute("Filters is in preview and there may be breaking changes in this area.")]
public abstract class Microsoft.Azure.WebJobs.Host.FunctionInvocationContext : FunctionFilterContext {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, object> <Arguments>k__BackingField;
    public IReadOnlyDictionary`2<string, object> Arguments { get; }
    protected FunctionInvocationContext(IReadOnlyDictionary`2<string, object> arguments, IDictionary`2<string, object> properties, Guid functionInstanceId, string functionName, ILogger logger);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, object> get_Arguments();
}
public class Microsoft.Azure.WebJobs.Host.FunctionInvocationException : FunctionException {
    [CompilerGeneratedAttribute]
private Guid <InstanceId>k__BackingField;
    public Guid InstanceId { get; public set; }
    public FunctionInvocationException(string message);
    public FunctionInvocationException(string message, Exception innerException);
    protected FunctionInvocationException(SerializationInfo info, StreamingContext context);
    public FunctionInvocationException(string message, Guid instanceId, string methodName, Exception innerException);
    [CompilerGeneratedAttribute]
public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(Guid value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("Filters is in preview and there may be breaking changes in this area.")]
[AttributeUsageAttribute("68")]
public abstract class Microsoft.Azure.WebJobs.Host.FunctionInvocationFilterAttribute : Attribute {
    public virtual Task OnExecutingAsync(FunctionExecutingContext executingContext, CancellationToken cancellationToken);
    public virtual Task OnExecutedAsync(FunctionExecutedContext executedContext, CancellationToken cancellationToken);
}
public class Microsoft.Azure.WebJobs.Host.FunctionMetadata : object {
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    public bool IsDisabled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public void set_IsDisabled(bool value);
}
public class Microsoft.Azure.WebJobs.Host.FunctionTimeoutException : FunctionInvocationException {
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Task <Task>k__BackingField;
    public TimeSpan Timeout { get; public set; }
    public Task Task { get; public set; }
    public FunctionTimeoutException(string message);
    public FunctionTimeoutException(string message, Exception innerException);
    protected FunctionTimeoutException(SerializationInfo info, StreamingContext context);
    public FunctionTimeoutException(string message, Guid instanceId, string methodName, TimeSpan timeout, Task task, Exception innerException);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public Task get_Task();
    [CompilerGeneratedAttribute]
public void set_Task(Task value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.Azure.WebJobs.Host.HostContainerNames : object {
    public static string Hosts;
}
internal static class Microsoft.Azure.WebJobs.Host.HostDirectoryNames : object {
    public static string BlobReceipts;
    public static string Heartbeats;
    public static string Ids;
    public static string OutputLogs;
    public static string SingletonLocks;
}
internal interface Microsoft.Azure.WebJobs.Host.Hosting.ITrackedConfigurationBuilder {
    public IConfigurationBuilder ConfigurationBuilder { get; public set; }
    public IEnumerable`1<IConfigurationSource> TrackedConfigurationSources { get; }
    public abstract virtual IConfigurationBuilder get_ConfigurationBuilder();
    public abstract virtual void set_ConfigurationBuilder(IConfigurationBuilder value);
    public abstract virtual IEnumerable`1<IConfigurationSource> get_TrackedConfigurationSources();
    public abstract virtual void ResetTracking();
}
internal interface Microsoft.Azure.WebJobs.Host.Hosting.ITrackedServiceCollection {
    public IServiceCollection ServiceCollection { get; public set; }
    public IEnumerable`1<ServiceDescriptor> TrackedCollectionChanges { get; }
    public abstract virtual IServiceCollection get_ServiceCollection();
    public abstract virtual void set_ServiceCollection(IServiceCollection value);
    public abstract virtual IEnumerable`1<ServiceDescriptor> get_TrackedCollectionChanges();
    public abstract virtual void ResetTracking();
}
internal class Microsoft.Azure.WebJobs.Host.Hosting.TrackedConfigurationBuilder : object {
    [CompilerGeneratedAttribute]
private List`1<IConfigurationSource> <_trackedChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationBuilder <ConfigurationBuilder>k__BackingField;
    private List`1<IConfigurationSource> _trackedChanges { get; private set; }
    public IConfigurationBuilder ConfigurationBuilder { get; public set; }
    public IEnumerable`1<IConfigurationSource> TrackedConfigurationSources { get; }
    public IDictionary`2<string, object> Properties { get; }
    public IList`1<IConfigurationSource> Sources { get; }
    public TrackedConfigurationBuilder(IConfigurationBuilder configBuilder);
    [CompilerGeneratedAttribute]
private List`1<IConfigurationSource> get__trackedChanges();
    [CompilerGeneratedAttribute]
private void set__trackedChanges(List`1<IConfigurationSource> value);
    [CompilerGeneratedAttribute]
public sealed virtual IConfigurationBuilder get_ConfigurationBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConfigurationBuilder(IConfigurationBuilder value);
    public sealed virtual IEnumerable`1<IConfigurationSource> get_TrackedConfigurationSources();
    public sealed virtual IDictionary`2<string, object> get_Properties();
    public sealed virtual IList`1<IConfigurationSource> get_Sources();
    public sealed virtual IConfigurationBuilder Add(IConfigurationSource source);
    public sealed virtual IConfigurationRoot Build();
    public sealed virtual void ResetTracking();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.WebJobs.Host.Hosting.TrackedServiceCollection : object {
    [CompilerGeneratedAttribute]
private List`1<ServiceDescriptor> <_trackedChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCollection <ServiceCollection>k__BackingField;
    private List`1<ServiceDescriptor> _trackedChanges { get; private set; }
    public IServiceCollection ServiceCollection { get; public set; }
    public IEnumerable`1<ServiceDescriptor> TrackedCollectionChanges { get; }
    public ServiceDescriptor Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TrackedServiceCollection(IServiceCollection serviceCollection);
    [CompilerGeneratedAttribute]
private List`1<ServiceDescriptor> get__trackedChanges();
    [CompilerGeneratedAttribute]
private void set__trackedChanges(List`1<ServiceDescriptor> value);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_ServiceCollection();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ServiceCollection(IServiceCollection value);
    public sealed virtual IEnumerable`1<ServiceDescriptor> get_TrackedCollectionChanges();
    public sealed virtual ServiceDescriptor get_Item(int index);
    public sealed virtual void set_Item(int index, ServiceDescriptor value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(ServiceDescriptor item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ServiceDescriptor item);
    public sealed virtual void CopyTo(ServiceDescriptor[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<ServiceDescriptor> GetEnumerator();
    public sealed virtual int IndexOf(ServiceDescriptor item);
    public sealed virtual void Insert(int index, ServiceDescriptor item);
    public sealed virtual bool Remove(ServiceDescriptor item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void ResetTracking();
}
internal class Microsoft.Azure.WebJobs.Host.Hosting.WebJobsExtensionBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionInfo <ExtensionInfo>k__BackingField;
    public IServiceCollection Services { get; }
    public ExtensionInfo ExtensionInfo { get; }
    public WebJobsExtensionBuilder(IServiceCollection services, ExtensionInfo extentionInfo);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
    [CompilerGeneratedAttribute]
public sealed virtual ExtensionInfo get_ExtensionInfo();
}
internal static class Microsoft.Azure.WebJobs.Host.HostQueueNames : object {
    private static string Prefix;
    private static string HostBlobTriggerQueuePrefix;
    private static string HostQueuePrefix;
    private static string HostSharedQueuePrefix;
    private static string HostSharedPoisonPrefix;
    public static string BlobTriggerPoisonQueue;
    public static string GetHostBlobTriggerQueueName(string hostId);
    internal static string GetHostSharedQueueName(string hostId);
    internal static string GetHostSharedPoisonQueueName(string hostId);
    public static string GetHostQueueName(string hostId);
    public static bool IsHostQueue(string queueName);
}
internal interface Microsoft.Azure.WebJobs.Host.IContextGetter`1 {
    public TValue Value { get; }
    public abstract virtual TValue get_Value();
}
internal interface Microsoft.Azure.WebJobs.Host.IContextSetter`1 {
    public abstract virtual void SetValue(TValue value);
}
[ObsoleteAttribute("Not ready for public consumption.")]
public interface Microsoft.Azure.WebJobs.Host.IDistributedLock {
    public string LockId { get; }
    public abstract virtual string get_LockId();
}
[ObsoleteAttribute("Not ready for public consumption.")]
public interface Microsoft.Azure.WebJobs.Host.IDistributedLockManager {
    public abstract virtual Task`1<IDistributedLock> TryLockAsync(string account, string lockId, string lockOwnerId, string proposedLeaseId, TimeSpan lockPeriod, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> RenewAsync(IDistributedLock lockHandle, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetLockOwnerAsync(string account, string lockId, CancellationToken cancellationToken);
    public abstract virtual Task ReleaseLockAsync(IDistributedLock lockHandle, CancellationToken cancellationToken);
}
public interface Microsoft.Azure.WebJobs.Host.IDrainModeManager {
    public bool IsDrainModeEnabled { get; }
    public abstract virtual bool get_IsDrainModeEnabled();
    public abstract virtual void RegisterListener(IListener listener);
    public abstract virtual Task EnableDrainModeAsync(CancellationToken cancellationToken);
}
public interface Microsoft.Azure.WebJobs.Host.IExtensionRegistry {
    public abstract virtual void RegisterExtension(Type type, object instance);
    public abstract virtual IEnumerable`1<object> GetExtensions(Type type);
}
[ExtensionAttribute]
public static class Microsoft.Azure.WebJobs.Host.IExtensionRegistryExtensions : object {
    private static Type[] ExtensionTypes;
    private static IExtensionRegistryExtensions();
    [ExtensionAttribute]
public static void RegisterBindingRules(IExtensionRegistry registry, IBindingProvider[] bindingProviders);
    [ExtensionAttribute]
public static void RegisterBindingRules(IExtensionRegistry registry, Action`2<TAttribute, Type> validator, IConfiguration configuration, INameResolver nameResolver, IBindingProvider[] bindingProviders);
    [ExtensionAttribute]
public static void RegisterExtension(IExtensionRegistry registry, TExtension extension);
    [ExtensionAttribute]
public static IEnumerable`1<TExtension> GetExtensions(IExtensionRegistry registry);
    [ExtensionAttribute]
internal static IEnumerable`1<IFunctionFilter> GetFunctionFilters(IExtensionRegistry registry);
    [ExtensionAttribute]
internal static IEnumerable`1<Assembly> GetExtensionAssemblies(IExtensionRegistry registry);
}
public interface Microsoft.Azure.WebJobs.Host.IExtensionRegistryFactory {
    public abstract virtual IExtensionRegistry Create();
}
internal interface Microsoft.Azure.WebJobs.Host.IFactory`1 {
    public abstract virtual T Create();
}
[ObsoleteAttribute("Filters is in preview and there may be breaking changes in this area.")]
public interface Microsoft.Azure.WebJobs.Host.IFunctionExceptionFilter {
    public abstract virtual Task OnExceptionAsync(FunctionExceptionContext exceptionContext, CancellationToken cancellationToken);
}
[ObsoleteAttribute("Filters is in preview and there may be breaking changes in this area.")]
public interface Microsoft.Azure.WebJobs.Host.IFunctionFilter {
}
[ObsoleteAttribute("Filters is in preview and there may be breaking changes in this area.")]
public interface Microsoft.Azure.WebJobs.Host.IFunctionInvocationFilter {
    public abstract virtual Task OnExecutingAsync(FunctionExecutingContext executingContext, CancellationToken cancellationToken);
    public abstract virtual Task OnExecutedAsync(FunctionExecutedContext executedContext, CancellationToken cancellationToken);
}
public interface Microsoft.Azure.WebJobs.Host.IHostSingletonManager {
    public abstract virtual IListener CreateHostSingletonListener(IListener innerListener, string scopeId);
}
public interface Microsoft.Azure.WebJobs.Host.IJobActivator {
    public abstract virtual T CreateInstance();
}
public interface Microsoft.Azure.WebJobs.Host.IJobActivatorEx {
    public abstract virtual T CreateInstance(IFunctionInstanceEx functionInstance);
}
[ObsoleteAttribute("Not ready for public consumption.")]
public interface Microsoft.Azure.WebJobs.Host.IJobHostMetadataProvider {
    public abstract virtual Type GetAttributeTypeFromName(string name);
    public abstract virtual Attribute GetAttribute(Type attributeType, JObject metadata);
    public abstract virtual Type GetDefaultType(Attribute attribute, FileAccess access, Type requestedType);
    public abstract virtual bool TryResolveAssembly(string assemblyName, Assembly& assembly);
    public abstract virtual FunctionMetadata GetFunctionMetadata(string functionName);
}
public interface Microsoft.Azure.WebJobs.Host.IJobHostMetadataProviderFactory {
    public abstract virtual IJobHostMetadataProvider Create();
}
internal interface Microsoft.Azure.WebJobs.Host.IJobInvoker {
    public abstract virtual Task CallAsync(string name, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Indexers.CompositeBindingProviderFactory : object {
    private IExtensionRegistry _extensions;
    private IBindingProvider[] _existingProviders;
    public CompositeBindingProviderFactory(IEnumerable`1<IBindingProvider> existingProviders, IExtensionRegistry extensions);
    public CompositeBindingProvider Create();
}
internal class Microsoft.Azure.WebJobs.Host.Indexers.DefaultTriggerBindingFactory : object {
    private IExtensionRegistry _extensions;
    public DefaultTriggerBindingFactory(IExtensionRegistry extensions);
    public ITriggerBindingProvider Create();
}
internal class Microsoft.Azure.WebJobs.Host.Indexers.DefaultTypeLocator : object {
    private static string WebJobsAssemblyName;
    private ILogger _logger;
    public DefaultTypeLocator(ILoggerFactory loggerFactory);
    private static DefaultTypeLocator();
    private static bool AssemblyReferencesSdkOrExtension(Assembly assembly, IEnumerable`1<Assembly> extensionAssemblies);
    public sealed virtual IReadOnlyList`1<Type> GetTypes();
    public static bool IsJobClass(Type type);
    private static IEnumerable`1<Assembly> GetUserAssemblies();
    private Type[] FindTypes(Assembly assembly, IEnumerable`1<Assembly> extensionAssemblies);
}
internal class Microsoft.Azure.WebJobs.Host.Indexers.FunctionDefinition : object {
    private FunctionDescriptor _descriptor;
    private IFunctionInstanceFactory _instanceFactory;
    private IListenerFactory _listenerFactory;
    public FunctionDescriptor Descriptor { get; }
    public IFunctionInstanceFactory InstanceFactory { get; }
    public IListenerFactory ListenerFactory { get; }
    public FunctionDefinition(FunctionDescriptor descriptor, IFunctionInstanceFactory instanceFactory, IListenerFactory listenerFactory);
    public sealed virtual FunctionDescriptor get_Descriptor();
    public sealed virtual IFunctionInstanceFactory get_InstanceFactory();
    public sealed virtual IListenerFactory get_ListenerFactory();
}
internal class Microsoft.Azure.WebJobs.Host.Indexers.FunctionIndex : object {
    private IDictionary`2<string, IFunctionDefinition> _functionsById;
    private IDictionary`2<MethodInfo, IFunctionDefinition> _functionsByMethod;
    private IDictionary`2<string, IFunctionDefinition> _functionsByName;
    private ICollection`1<FunctionDescriptor> _functionDescriptors;
    public sealed virtual void Add(IFunctionDefinition function, FunctionDescriptor descriptor, MethodInfo method);
    public sealed virtual IFunctionDefinition Lookup(string functionId);
    public sealed virtual IFunctionDefinition LookupByName(string name);
    public sealed virtual IFunctionDefinition Lookup(MethodInfo method);
    public sealed virtual IEnumerable`1<IFunctionDefinition> ReadAll();
    public sealed virtual IEnumerable`1<FunctionDescriptor> ReadAllDescriptors();
    public sealed virtual IEnumerable`1<MethodInfo> ReadAllMethods();
}
internal class Microsoft.Azure.WebJobs.Host.Indexers.FunctionIndexer : object {
    public static string ReturnParamName;
    private static BindingFlags PublicMethodFlags;
    private ITriggerBindingProvider _triggerBindingProvider;
    private IBindingProvider _bindingProvider;
    private IJobActivator _activator;
    private INameResolver _nameResolver;
    private IFunctionExecutor _executor;
    private SingletonManager _singletonManager;
    private ILogger _logger;
    private SharedQueueHandler _sharedQueue;
    private TimeoutAttribute _defaultTimeout;
    private IRetryStrategy _defaultRetryStrategy;
    private bool _allowPartialHostStartup;
    private IConfiguration _configuration;
    private IInstanceServicesProviderFactory _instanceServicesFactory;
    private ILoggerFactory _loggerFactory;
    public FunctionIndexer(ITriggerBindingProvider triggerBindingProvider, IBindingProvider bindingProvider, IJobActivator activator, IFunctionExecutor executor, SingletonManager singletonManager, ILoggerFactory loggerFactory, IConfiguration configuration, IInstanceServicesProviderFactory instanceServicesFactory, INameResolver nameResolver, SharedQueueHandler sharedQueue, TimeoutAttribute defaultTimeout, bool allowPartialHostStartup, IRetryStrategy defaultRetryStrategy);
    private static FunctionIndexer();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Indexers.FunctionIndexer/<IndexTypeAsync>d__17")]
public Task IndexTypeAsync(Type type, IFunctionIndexCollector index, CancellationToken cancellationToken);
    public static IEnumerable`1<MethodInfo> GetJobMethods(Type type);
    public static bool IsJobMethod(MethodInfo method);
    private static bool HasJobAttribute(CustomAttributeData attributeData);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Indexers.FunctionIndexer/<IndexMethodAsync>d__21")]
public Task IndexMethodAsync(MethodInfo method, IFunctionIndexCollector index, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Indexers.FunctionIndexer/<IndexMethodAsyncCore>d__22")]
internal Task IndexMethodAsyncCore(MethodInfo method, IFunctionIndexCollector index, CancellationToken cancellationToken);
    internal static string GetSharedListenerIdOrNull(ITriggerBinding triggerBinding);
    private bool IsUnitType(Type type);
    private FunctionDefinition CreateTriggeredFunctionDefinition(ITriggerBinding triggerBinding, string parameterName, FunctionDescriptor descriptor, IReadOnlyDictionary`2<string, IBinding> nonTriggerBindings, IFunctionInvokerEx invoker);
    internal static FunctionDescriptor FromMethod(MethodInfo method, IConfiguration configuration, IJobActivator jobActivator, INameResolver nameResolver, TimeoutAttribute defaultTimeout, IRetryStrategy defaultRetryStrategy);
    private FunctionDescriptor CreateFunctionDescriptor(MethodInfo method, string triggerParameterName, ITriggerBinding triggerBinding, IReadOnlyDictionary`2<string, IBinding> nonTriggerBindings, string sharedListenerId);
    internal static void CheckRetrySupport(ITriggerBinding triggerBinding, FunctionDescriptor descr, ILogger logger);
}
public class Microsoft.Azure.WebJobs.Host.Indexers.FunctionIndexingException : FunctionException {
    public FunctionIndexingException(string methodName, Exception innerException);
}
internal class Microsoft.Azure.WebJobs.Host.Indexers.FunctionIndexProvider : object {
    private ITypeLocator _typeLocator;
    private ITriggerBindingProvider _triggerBindingProvider;
    private CompositeBindingProvider _bindingProviderFactory;
    private IJobActivator _activator;
    private IFunctionExecutor _executor;
    private SingletonManager _singletonManager;
    private ILoggerFactory _loggerFactory;
    private SharedQueueHandler _sharedQueue;
    private TimeoutAttribute _defaultTimeout;
    private IRetryStrategy _defaultRetryStrategy;
    private bool _allowPartialHostStartup;
    private IConfiguration _configuration;
    private IInstanceServicesProviderFactory _instanceServicesFactory;
    private IFunctionIndex _index;
    public FunctionIndexProvider(ITypeLocator typeLocator, ITriggerBindingProvider triggerBindingProvider, CompositeBindingProvider bindingProviderFactory, IJobActivator activator, IFunctionExecutor executor, SingletonManager singletonManager, ILoggerFactory loggerFactory, SharedQueueHandler sharedQueue, IOptions`1<JobHostFunctionTimeoutOptions> timeoutOptions, IOptions`1<JobHostOptions> hostOptions, IConfiguration configuration, IInstanceServicesProviderFactory instanceServicesFactory, IRetryStrategy defaultRetryStrategy);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Indexers.FunctionIndexProvider/<GetAsync>d__15")]
public sealed virtual Task`1<IFunctionIndex> GetAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Indexers.FunctionIndexProvider/<CreateAsync>d__16")]
private Task`1<IFunctionIndex> CreateAsync(CancellationToken cancellationToken);
}
public interface Microsoft.Azure.WebJobs.Host.Indexers.IFunctionDefinition {
    public FunctionDescriptor Descriptor { get; }
    public IFunctionInstanceFactory InstanceFactory { get; }
    public IListenerFactory ListenerFactory { get; }
    public abstract virtual FunctionDescriptor get_Descriptor();
    public abstract virtual IFunctionInstanceFactory get_InstanceFactory();
    public abstract virtual IListenerFactory get_ListenerFactory();
}
internal interface Microsoft.Azure.WebJobs.Host.Indexers.IFunctionIndex {
    public abstract virtual IEnumerable`1<IFunctionDefinition> ReadAll();
    public abstract virtual IEnumerable`1<FunctionDescriptor> ReadAllDescriptors();
    public abstract virtual IEnumerable`1<MethodInfo> ReadAllMethods();
}
internal interface Microsoft.Azure.WebJobs.Host.Indexers.IFunctionIndexCollector {
    public abstract virtual void Add(IFunctionDefinition function, FunctionDescriptor descriptor, MethodInfo method);
}
public interface Microsoft.Azure.WebJobs.Host.Indexers.IFunctionIndexLookup {
    public abstract virtual IFunctionDefinition Lookup(string functionId);
    public abstract virtual IFunctionDefinition Lookup(MethodInfo method);
    public abstract virtual IFunctionDefinition LookupByName(string name);
}
internal interface Microsoft.Azure.WebJobs.Host.Indexers.IFunctionIndexProvider {
    public abstract virtual Task`1<IFunctionIndex> GetAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Host.Indexers.MethodInfoExtensions : object {
    [ExtensionAttribute]
public static string GetFullName(MethodInfo methodInfo);
    [ExtensionAttribute]
public static string GetShortName(MethodInfo methodInfo);
}
internal class Microsoft.Azure.WebJobs.Host.InMemoryDistributedLockManager : object {
    private Dictionary`2<string, FakeLock> _locks;
    public sealed virtual Task`1<string> GetLockOwnerAsync(string account, string lockId, CancellationToken cancellationToken);
    public sealed virtual Task ReleaseLockAsync(IDistributedLock lockHandle, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> RenewAsync(IDistributedLock lockHandle, CancellationToken cancellationToken);
    public sealed virtual Task`1<IDistributedLock> TryLockAsync(string account, string lockId, string lockOwnerId, string proposedLeaseId, TimeSpan lockPeriod, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Host.IPropertyAccessorFactory`1 {
    public abstract virtual IPropertyGetter`2<TReflected, TProperty> CreateGetter(PropertyInfo property);
    public abstract virtual IPropertySetter`2<TReflected, TProperty> CreateSetter(PropertyInfo property);
}
internal interface Microsoft.Azure.WebJobs.Host.IPropertyGetter`2 {
    public abstract virtual TProperty GetValue(TReflected instance);
}
internal interface Microsoft.Azure.WebJobs.Host.IPropertySetter`2 {
    public abstract virtual void SetValue(TReflected& instance, TProperty value);
}
public interface Microsoft.Azure.WebJobs.Host.IRetryStrategy {
    public int MaxRetryCount { get; }
    public abstract virtual int get_MaxRetryCount();
    public abstract virtual TimeSpan GetNextDelay(RetryContext context);
}
public class Microsoft.Azure.WebJobs.Host.JobHostFunctionTimeoutOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TimeoutWhileDebugging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <GracePeriod>k__BackingField;
    public TimeSpan Timeout { get; public set; }
    public bool TimeoutWhileDebugging { get; public set; }
    public bool ThrowOnTimeout { get; public set; }
    public TimeSpan GracePeriod { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_TimeoutWhileDebugging();
    [CompilerGeneratedAttribute]
public void set_TimeoutWhileDebugging(bool value);
    [CompilerGeneratedAttribute]
public bool get_ThrowOnTimeout();
    [CompilerGeneratedAttribute]
public void set_ThrowOnTimeout(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_GracePeriod();
    [CompilerGeneratedAttribute]
public void set_GracePeriod(TimeSpan value);
    internal TimeoutAttribute ToAttribute();
}
internal class Microsoft.Azure.WebJobs.Host.JobHostMetadataProvider : object {
    private IDictionary`2<string, Type> _attributeTypes;
    private Dictionary`2<string, Assembly> _resolvedAssemblies;
    private IBindingProvider _root;
    private IFunctionIndexProvider _functionIndexProvider;
    private IExtensionRegistry _extensionRegistry;
    private IBindingProvider _bindingProvider;
    private IConverterManager _converter;
    public JobHostMetadataProvider(IFunctionIndexProvider functionIndexProvider, IExtensionRegistry extensionRegistry, IBindingProvider bindingProvider, IConverterManager converter);
    internal void Initialize();
    public sealed virtual bool TryResolveAssembly(string assemblyName, Assembly& assembly);
    internal void AddAttributesFromAssembly(Assembly asm);
    [IteratorStateMachineAttribute("Microsoft.Azure.WebJobs.Host.JobHostMetadataProvider/<GetAttributesFromAssembly>d__11")]
private static IEnumerable`1<Type> GetAttributesFromAssembly(Assembly assembly);
    public void AddExtension(IExtensionConfigProvider extension);
    private void AddAssembly(Type type);
    private void AddAssembly(Assembly assembly);
    private static string GetNameFromAttribute(Type attributeType);
    public sealed virtual Type GetAttributeTypeFromName(string name);
    public sealed virtual Attribute GetAttribute(Type attributeType, JObject metadata);
    private static JObject Touchups(Type attributeType, JObject metadata);
    public sealed virtual Type GetDefaultType(Attribute attribute, FileAccess access, Type requestedType);
    public BindingRule[] GetRules();
    public void DebugDumpGraph(TextWriter output);
    internal static void DumpRule(IBindingRuleProvider root, TextWriter output);
    private void AddTypesFromGraph(IBindingRuleProvider root);
    public sealed virtual FunctionMetadata GetFunctionMetadata(string functionName);
}
internal class Microsoft.Azure.WebJobs.Host.JobHostMetadataProviderFactory : object {
    private IFunctionIndexProvider _functionIndexProvider;
    private IExtensionRegistry _extensionRegistry;
    private IBindingProvider _bindingProvider;
    private IConverterManager _converterManager;
    public JobHostMetadataProviderFactory(IFunctionIndexProvider functionIndexProvider, IExtensionRegistry extensionRegistry, CompositeBindingProvider bindingProvider, IConverterManager converterManager);
    public sealed virtual IJobHostMetadataProvider Create();
}
internal class Microsoft.Azure.WebJobs.Host.Listeners.CompositeListener : object {
    private IEnumerable`1<IListener> _listeners;
    private bool _disposed;
    public CompositeListener(IListener[] listeners);
    public CompositeListener(IEnumerable`1<IListener> listeners);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.CompositeListener/<StartAsync>d__4")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.CompositeListener/<StopAsync>d__5")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    private void ThrowIfDisposed();
    public sealed virtual IEnumerator`1<IListener> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Azure.WebJobs.Host.Listeners.CompositeListenerFactory : object {
    private IEnumerable`1<IListenerFactory> _listenerFactories;
    public CompositeListenerFactory(IListenerFactory[] listenerFactories);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.CompositeListenerFactory/<CreateAsync>d__2")]
public sealed virtual Task`1<IListener> CreateAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Listeners.FunctionListener : object {
    private TimeSpan _minRetryInterval;
    private TimeSpan _maxRetryInterval;
    private IListener _listener;
    private FunctionDescriptor _descriptor;
    private ILogger _logger;
    private SemaphoreSlim _semaphoreSlim;
    private bool _started;
    private bool _allowPartialHostStartup;
    private CancellationTokenSource _retryCancellationTokenSource;
    public FunctionListener(IListener listener, FunctionDescriptor descriptor, ILoggerFactory loggerFactory, bool allowPartialHostStartup, Nullable`1<TimeSpan> minRetryInterval, Nullable`1<TimeSpan> maxRetryInterval);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.FunctionListener/<StartAsync>d__12")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.FunctionListener/<StartAsync>d__13")]
private Task StartAsync(CancellationToken cancellationToken, bool allowRetry);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.FunctionListener/<RetryStartWithBackoffAsync>d__14")]
public Task RetryStartWithBackoffAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.FunctionListener/<StopAsync>d__15")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Listeners.FunctionListenerDecorator : object {
    private ILoggerFactory _loggerFactory;
    private IOptions`1<JobHostOptions> _jobHostOptions;
    public FunctionListenerDecorator(ILoggerFactory loggerFactory, IOptions`1<JobHostOptions> jobHostOptions);
    public sealed virtual IListener Decorate(ListenerDecoratorContext context);
}
public class Microsoft.Azure.WebJobs.Host.Listeners.FunctionListenerException : FunctionException {
    public FunctionListenerException(string methodName, Exception innerException);
}
internal class Microsoft.Azure.WebJobs.Host.Listeners.HeartbeatListener : object {
    private IRecurrentCommand _heartbeatCommand;
    private IListener _innerListener;
    private ITaskSeriesTimer _timer;
    private bool _disposed;
    public HeartbeatListener(IRecurrentCommand heartbeatCommand, IWebJobsExceptionHandler exceptionHandler, IListener innerListener);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.HeartbeatListener/<StartAsync>d__5")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.HeartbeatListener/<StopAsync>d__6")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    private ITaskSeriesTimer CreateTimer(IWebJobsExceptionHandler exceptionHandler);
}
internal class Microsoft.Azure.WebJobs.Host.Listeners.HostListenerFactory : object {
    private static MethodInfo JobActivatorCreateMethod;
    private static string IsDisabledFunctionName;
    private IEnumerable`1<IFunctionDefinition> _functionDefinitions;
    private ILoggerFactory _loggerFactory;
    private ILogger _logger;
    private Action _listenersCreatedCallback;
    private IScaleMonitorManager _monitorManager;
    private ITargetScalerManager _targetScalerManager;
    private IDrainModeManager _drainModeManager;
    private IEnumerable`1<IListenerDecorator> _listenerDecorators;
    public HostListenerFactory(IEnumerable`1<IFunctionDefinition> functionDefinitions, ILoggerFactory loggerFactory, IScaleMonitorManager monitorManager, ITargetScalerManager targetScalerManager, IEnumerable`1<IListenerDecorator> listenerDecorators, Action listenersCreatedCallback, IDrainModeManager drainModeManager);
    private static HostListenerFactory();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.HostListenerFactory/<CreateAsync>d__11")]
public sealed virtual Task`1<IListener> CreateAsync(CancellationToken cancellationToken);
    internal void RegisterScalers(IListener listener);
    internal static void RegisterScaleMonitor(IListener listener, IScaleMonitorManager monitorManager);
    internal static void RegisterTargetScaler(IListener listener, ITargetScalerManager targetScalerManager);
    internal static bool IsDisabled(MethodInfo method, INameResolver nameResolver, IJobActivator activator, IConfiguration configuration);
    internal static bool IsDisabledBySetting(string settingName, MethodInfo method, INameResolver nameResolver, IConfiguration configuration);
    internal static bool IsDisabledByProvider(Type providerType, MethodInfo jobFunction, IJobActivator activator);
    private IListener ApplyDecorators(IListener listener, IFunctionDefinition functionDefinition);
    private IListener ApplyDecorators(IEnumerable`1<IListenerDecorator> decorators, IListener listener, IFunctionDefinition functionDefinition, Type rootListenerType, bool writeLog);
}
public interface Microsoft.Azure.WebJobs.Host.Listeners.IListener {
    public abstract virtual Task StartAsync(CancellationToken cancellationToken);
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
    public abstract virtual void Cancel();
}
public interface Microsoft.Azure.WebJobs.Host.Listeners.IListenerDecorator {
    public abstract virtual IListener Decorate(ListenerDecoratorContext context);
}
public interface Microsoft.Azure.WebJobs.Host.Listeners.IListenerFactory {
    public abstract virtual Task`1<IListener> CreateAsync(CancellationToken token);
}
internal interface Microsoft.Azure.WebJobs.Host.Listeners.ISharedContextProvider {
    public abstract virtual bool TryGetValue(string key, Object& value);
    public abstract virtual void SetValue(string key, object value);
    public abstract virtual TValue GetOrCreateInstance(IFactory`1<TValue> factory);
}
internal interface Microsoft.Azure.WebJobs.Host.Listeners.ISharedListener {
    public abstract virtual void EnsureAllCanceled();
    public abstract virtual Task EnsureAllStartedAsync(CancellationToken cancellationToken);
    public abstract virtual Task EnsureAllStoppedAsync(CancellationToken cancellationToken);
    public abstract virtual void EnsureAllDisposed();
}
internal interface Microsoft.Azure.WebJobs.Host.Listeners.ITriggerExecutor`1 {
    public abstract virtual Task`1<FunctionResult> ExecuteAsync(TTriggerValue value, CancellationToken cancellationToken);
}
public class Microsoft.Azure.WebJobs.Host.Listeners.ListenerDecoratorContext : object {
    [CompilerGeneratedAttribute]
private IFunctionDefinition <FunctionDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private IListener <Listener>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ListenerType>k__BackingField;
    public IFunctionDefinition FunctionDefinition { get; }
    public IListener Listener { get; }
    public Type ListenerType { get; }
    public ListenerDecoratorContext(IFunctionDefinition functionDefinition, Type rootListenerType, IListener listener);
    [CompilerGeneratedAttribute]
public IFunctionDefinition get_FunctionDefinition();
    [CompilerGeneratedAttribute]
public IListener get_Listener();
    [CompilerGeneratedAttribute]
public Type get_ListenerType();
}
public class Microsoft.Azure.WebJobs.Host.Listeners.ListenerFactoryContext : object {
    private SharedQueueHandler _sharedQueue;
    private IDispatchQueueHandler _dispatchQueue;
    [CompilerGeneratedAttribute]
private FunctionDescriptor <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private ITriggeredFunctionExecutor <Executor>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public FunctionDescriptor Descriptor { get; private set; }
    public ITriggeredFunctionExecutor Executor { get; private set; }
    public CancellationToken CancellationToken { get; private set; }
    public ListenerFactoryContext(FunctionDescriptor descriptor, ITriggeredFunctionExecutor executor, CancellationToken cancellationToken);
    internal ListenerFactoryContext(FunctionDescriptor descriptor, ITriggeredFunctionExecutor executor, SharedQueueHandler sharedQueue, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public FunctionDescriptor get_Descriptor();
    [CompilerGeneratedAttribute]
private void set_Descriptor(FunctionDescriptor value);
    [CompilerGeneratedAttribute]
public ITriggeredFunctionExecutor get_Executor();
    [CompilerGeneratedAttribute]
private void set_Executor(ITriggeredFunctionExecutor value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
private void set_CancellationToken(CancellationToken value);
    internal IDispatchQueueHandler GetDispatchQueue(IMessageHandler handler);
}
internal class Microsoft.Azure.WebJobs.Host.Listeners.ListenerFactoryListener : object {
    private IListenerFactory _factory;
    private SharedQueueHandler _sharedQueue;
    private CancellationTokenSource _cancellationSource;
    private IListener _listener;
    private CancellationTokenRegistration _cancellationRegistration;
    private bool _disposed;
    public ListenerFactoryListener(IListenerFactory factory, SharedQueueHandler sharedQueue);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.ListenerFactoryListener/<StartAsyncCore>d__8")]
private Task StartAsyncCore(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.ListenerFactoryListener/<StopAsync>d__9")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    private void ThrowIfDisposed();
}
internal class Microsoft.Azure.WebJobs.Host.Listeners.NullListener : object {
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.WebJobs.Host.Listeners.NullListenerFactory : object {
    public sealed virtual Task`1<IListener> CreateAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Listeners.SharedContextProvider : object {
    private IDictionary`2<Type, object> _instances;
    private IDictionary`2<string, object> _items;
    public sealed virtual bool TryGetValue(string key, Object& value);
    public sealed virtual void SetValue(string key, object value);
    public sealed virtual T GetOrCreateInstance(IFactory`1<T> factory);
}
internal class Microsoft.Azure.WebJobs.Host.Listeners.ShutdownListener : object {
    private CancellationToken _shutdownToken;
    private CancellationTokenRegistration _shutdownRegistration;
    private IListener _innerListener;
    private bool _disposed;
    public ShutdownListener(CancellationToken shutdownToken, IListener innerListener);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.ShutdownListener/<StartAsync>d__5")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.WebJobs.Host.Listeners.SingletonListener : object {
    private SingletonAttribute _attribute;
    private SingletonManager _singletonManager;
    private SingletonOptions _singletonConfig;
    private IListener _innerListener;
    private ILogger _logger;
    private string _lockId;
    private RenewableLockHandle _lockHandle;
    private bool _isListening;
    [CompilerGeneratedAttribute]
private Timer <LockTimer>k__BackingField;
    internal Timer LockTimer { get; internal set; }
    public SingletonListener(FunctionDescriptor method, SingletonAttribute attribute, SingletonManager singletonManager, IListener innerListener, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
internal Timer get_LockTimer();
    [CompilerGeneratedAttribute]
internal void set_LockTimer(Timer value);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.SingletonListener/<StartAsync>d__13")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.SingletonListener/<StopAsync>d__14")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    private void OnLockTimer(object sender, ElapsedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.SingletonListener/<TryAcquireLock>d__18")]
internal Task TryAcquireLock();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Listeners.SingletonListener/<ReleaseLockAsync>d__19")]
private Task ReleaseLockAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Listeners.TimerListener : object {
    private ITaskSeriesTimer _timer;
    private bool _disposed;
    public TimerListener(ITaskSeriesTimer timer);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    private void ThrowIfDisposed();
}
internal class Microsoft.Azure.WebJobs.Host.Loggers.CompositeFunctionEventCollector : object {
    private IEnumerable`1<IAsyncCollector`1<FunctionInstanceLogEntry>> _collectors;
    public CompositeFunctionEventCollector(IAsyncCollector`1[] collectors);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Loggers.CompositeFunctionEventCollector/<AddAsync>d__2")]
public sealed virtual Task AddAsync(FunctionInstanceLogEntry item, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Loggers.CompositeFunctionEventCollector/<FlushAsync>d__3")]
public sealed virtual Task FlushAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Loggers.CompositeFunctionInstanceLogger : object {
    private IFunctionInstanceLogger[] _loggers;
    public CompositeFunctionInstanceLogger(IFunctionInstanceLogger[] loggers);
    public sealed virtual string LogFunctionStarted(FunctionStartedMessage message);
    public sealed virtual void LogFunctionCompleted(FunctionCompletedMessage message);
    public sealed virtual void DeleteLogFunctionStarted(string startedMessageId);
}
internal class Microsoft.Azure.WebJobs.Host.Loggers.FastTableLoggerProvider : object {
    private IHostInstanceLogger _hostInstanceLogger;
    private IFunctionInstanceLogger _functionLogger;
    public FastTableLoggerProvider(ILoggerFactory loggerFactory);
    private sealed virtual override Task`1<IFunctionOutputLogger> Microsoft.Azure.WebJobs.Host.Loggers.IFunctionOutputLoggerProvider.GetAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<IHostInstanceLogger> Microsoft.Azure.WebJobs.Host.Loggers.IHostInstanceLoggerProvider.GetAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<IFunctionInstanceLogger> Microsoft.Azure.WebJobs.Host.Loggers.IFunctionInstanceLoggerProvider.GetAsync(CancellationToken cancellationToken);
    private sealed virtual override Task`1<IFunctionOutputDefinition> Microsoft.Azure.WebJobs.Host.Loggers.IFunctionOutputLogger.CreateAsync(IFunctionInstance instance, CancellationToken cancellationToken);
}
[ObsoleteAttribute("Not ready for public consumption.")]
public class Microsoft.Azure.WebJobs.Host.Loggers.FunctionInstanceLogEntry : object {
    public static int MaxLogOutputLength;
    [CompilerGeneratedAttribute]
private Guid <FunctionInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TriggerReason>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Stopwatch <LiveTimer>k__BackingField;
    public Guid FunctionInstanceId { get; public set; }
    public Nullable`1<Guid> ParentId { get; public set; }
    public string FunctionName { get; public set; }
    public string LogName { get; public set; }
    public string TriggerReason { get; public set; }
    public DateTime StartTime { get; public set; }
    public Nullable`1<DateTime> EndTime { get; public set; }
    public TimeSpan Duration { get; public set; }
    public string ErrorDetails { get; public set; }
    public Exception Exception { get; public set; }
    public IDictionary`2<string, string> Arguments { get; public set; }
    public string LogOutput { get; public set; }
    [JsonIgnoreAttribute]
public IDictionary`2<string, object> Properties { get; public set; }
    [JsonIgnoreAttribute]
public Stopwatch LiveTimer { get; public set; }
    public bool IsStart { get; }
    public bool IsPostBind { get; }
    public bool IsCompleted { get; }
    [CompilerGeneratedAttribute]
public Guid get_FunctionInstanceId();
    [CompilerGeneratedAttribute]
public void set_FunctionInstanceId(Guid value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public void set_FunctionName(string value);
    [CompilerGeneratedAttribute]
public string get_LogName();
    [CompilerGeneratedAttribute]
public void set_LogName(string value);
    [CompilerGeneratedAttribute]
public string get_TriggerReason();
    [CompilerGeneratedAttribute]
public void set_TriggerReason(string value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public string get_ErrorDetails();
    [CompilerGeneratedAttribute]
public void set_ErrorDetails(string value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_LogOutput();
    [CompilerGeneratedAttribute]
public void set_LogOutput(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Stopwatch get_LiveTimer();
    [CompilerGeneratedAttribute]
public void set_LiveTimer(Stopwatch value);
    public bool get_IsStart();
    public bool get_IsPostBind();
    public bool get_IsCompleted();
}
internal class Microsoft.Azure.WebJobs.Host.Loggers.FunctionInstanceLogger : object {
    private ILoggerFactory _loggerFactory;
    public FunctionInstanceLogger(ILoggerFactory loggerFactory);
    public sealed virtual string LogFunctionStarted(FunctionStartedMessage message);
    private static void LogTemplatizedTriggerDetails(ILogger logger, FunctionStartedMessage message);
    public sealed virtual void LogFunctionCompleted(FunctionCompletedMessage message);
    public sealed virtual void DeleteLogFunctionStarted(string startedMessageId);
    private ILogger GetLogger(FunctionDescriptor descriptor);
}
public interface Microsoft.Azure.WebJobs.Host.Loggers.IEventCollectorFactory {
    public abstract virtual IAsyncCollector`1<FunctionInstanceLogEntry> Create();
}
public interface Microsoft.Azure.WebJobs.Host.Loggers.IEventCollectorProvider {
    public abstract virtual IAsyncCollector`1<FunctionInstanceLogEntry> Create();
}
internal interface Microsoft.Azure.WebJobs.Host.Loggers.IFunctionInstanceLogger {
    public abstract virtual string LogFunctionStarted(FunctionStartedMessage message);
    public abstract virtual void LogFunctionCompleted(FunctionCompletedMessage message);
    public abstract virtual void DeleteLogFunctionStarted(string startedMessageId);
}
internal interface Microsoft.Azure.WebJobs.Host.Loggers.IFunctionInstanceLoggerProvider {
    public abstract virtual Task`1<IFunctionInstanceLogger> GetAsync(CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Host.Loggers.IFunctionOutput {
    public IRecurrentCommand UpdateCommand { get; }
    public TextWriter Output { get; }
    public abstract virtual IRecurrentCommand get_UpdateCommand();
    public abstract virtual TextWriter get_Output();
    public abstract virtual Task SaveAndCloseAsync(FunctionInstanceLogEntry logEntry, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Host.Loggers.IFunctionOutputDefinition {
    public LocalBlobDescriptor OutputBlob { get; }
    public LocalBlobDescriptor ParameterLogBlob { get; }
    public abstract virtual LocalBlobDescriptor get_OutputBlob();
    public abstract virtual LocalBlobDescriptor get_ParameterLogBlob();
    public abstract virtual IFunctionOutput CreateOutput();
    public abstract virtual IRecurrentCommand CreateParameterLogUpdateCommand(IReadOnlyDictionary`2<string, IWatcher> watches, ILogger logger);
}
internal interface Microsoft.Azure.WebJobs.Host.Loggers.IFunctionOutputLogger {
    public abstract virtual Task`1<IFunctionOutputDefinition> CreateAsync(IFunctionInstance instance, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Host.Loggers.IFunctionOutputLoggerProvider {
    public abstract virtual Task`1<IFunctionOutputLogger> GetAsync(CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Host.Loggers.IFunctionParameterLog {
    public IRecurrentCommand UpdateCommand { get; }
    public abstract virtual IRecurrentCommand get_UpdateCommand();
    public abstract virtual void Close();
}
internal interface Microsoft.Azure.WebJobs.Host.Loggers.IHostInstanceLogger {
    public abstract virtual Task LogHostStartedAsync(HostStartedMessage message, CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Host.Loggers.IHostInstanceLoggerProvider {
    public abstract virtual Task`1<IHostInstanceLogger> GetAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Loggers.NullFunctionOutputDefinition : object {
    [CompilerGeneratedAttribute]
private static IFunctionOutputDefinition <Instance>k__BackingField;
    public static IFunctionOutputDefinition Instance { get; }
    public LocalBlobDescriptor OutputBlob { get; }
    public LocalBlobDescriptor ParameterLogBlob { get; }
    private static NullFunctionOutputDefinition();
    [CompilerGeneratedAttribute]
public static IFunctionOutputDefinition get_Instance();
    public sealed virtual LocalBlobDescriptor get_OutputBlob();
    public sealed virtual LocalBlobDescriptor get_ParameterLogBlob();
    public sealed virtual IFunctionOutput CreateOutput();
    public sealed virtual IRecurrentCommand CreateParameterLogUpdateCommand(IReadOnlyDictionary`2<string, IWatcher> watches, ILogger logger);
}
internal class Microsoft.Azure.WebJobs.Host.Loggers.NullFunctionOutputLogger : object {
    public sealed virtual Task`1<IFunctionOutputDefinition> CreateAsync(IFunctionInstance instance, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Loggers.NullHostInstanceLogger : object {
    public sealed virtual Task LogHostStartedAsync(HostStartedMessage message, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Microsoft.Azure.WebJobs.Host.NameResolverExtensions : object {
    [ExtensionAttribute]
public static bool TryResolveWholeString(INameResolver resolver, string resolve, String& result);
    [ExtensionAttribute]
public static string ResolveWholeString(INameResolver resolver, string resolve);
    [ExtensionAttribute]
private static string ResolveWholeStringCore(INameResolver resolver, string resolve, bool throwOnFailure);
}
internal static class Microsoft.Azure.WebJobs.Host.NativeMethods : object {
    public static IntPtr GetCurrentProcess();
    public static bool TerminateProcess(IntPtr hProcess, UInt32 uExitCode);
}
internal static class Microsoft.Azure.WebJobs.Host.ObjectDictionaryConverter : object {
    public static IDictionary`2<string, object> AsDictionary(object values);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Azure.WebJobs.Host.Properties.Resource : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BindingAssemblyConflictMessage { get; }
    internal static string CheckAzureStorageEmulatorMessage { get; }
    internal static string ExtensionInitializationMessage { get; }
    internal static string UnableToBindParameterFormat { get; }
    internal static string UnableToResolveBindingParameterFormat { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BindingAssemblyConflictMessage();
    internal static string get_CheckAzureStorageEmulatorMessage();
    internal static string get_ExtensionInitializationMessage();
    internal static string get_UnableToBindParameterFormat();
    internal static string get_UnableToResolveBindingParameterFormat();
}
internal static class Microsoft.Azure.WebJobs.Host.PropertyAccessorFactory`1 : object {
    private static IPropertyAccessorFactory`1<TReflected> Singleton;
    private static PropertyAccessorFactory`1();
    public static IPropertyGetter`2<TReflected, TProperty> CreateGetter(PropertyInfo property);
    public static IPropertySetter`2<TReflected, TProperty> CreateSetter(PropertyInfo property);
    private static IPropertyAccessorFactory`1<TReflected> GetInstance();
}
internal class Microsoft.Azure.WebJobs.Host.PropertyHelper : object {
    private static MethodInfo CallPropertyGetterOpenGenericMethod;
    private static MethodInfo CallPropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterOpenGenericMethod;
    private static MethodInfo CallNullSafePropertyGetterByReferenceOpenGenericMethod;
    private static MethodInfo CallPropertySetterOpenGenericMethod;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> PropertiesCache;
    private static ConcurrentDictionary`2<Type, PropertyHelper[]> VisiblePropertiesCache;
    private Action`2<object, object> _valueSetter;
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, object> <ValueGetter>k__BackingField;
    public PropertyInfo Property { get; }
    public string Name { get; protected set; }
    public Func`2<object, object> ValueGetter { get; }
    public Action`2<object, object> ValueSetter { get; }
    public PropertyHelper(PropertyInfo property);
    private static PropertyHelper();
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_ValueGetter();
    public Action`2<object, object> get_ValueSetter();
    public object GetValue(object instance);
    public void SetValue(object instance, object value);
    public static PropertyHelper[] GetProperties(object instance);
    public static PropertyHelper[] GetProperties(Type type);
    public static PropertyHelper[] GetVisibleProperties(object instance);
    public static PropertyHelper[] GetVisibleProperties(Type type);
    public static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo);
    public static Func`2<object, object> MakeNullSafeFastPropertyGetter(PropertyInfo propertyInfo);
    private static Func`2<object, object> MakeFastPropertyGetter(PropertyInfo propertyInfo, MethodInfo propertyGetterWrapperMethod, MethodInfo propertyGetterByRefWrapperMethod);
    private static Func`2<object, object> MakeFastPropertyGetter(Type openGenericDelegateType, MethodInfo propertyGetMethod, MethodInfo openGenericWrapperMethod);
    public static Action`2<object, object> MakeFastPropertySetter(PropertyInfo propertyInfo);
    public static IDictionary`2<string, object> ObjectToDictionary(object value);
    private static PropertyHelper CreateInstance(PropertyInfo property);
    private static object CallPropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallPropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetter(Func`2<TDeclaringType, TValue> getter, object target);
    private static object CallNullSafePropertyGetterByReference(ByRefFunc`2<TDeclaringType, TValue> getter, object target);
    private static void CallPropertySetter(Action`2<TDeclaringType, TValue> setter, object target, object value);
    protected static PropertyHelper[] GetVisibleProperties(Type type, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> allPropertiesCache, ConcurrentDictionary`2<Type, PropertyHelper[]> visiblePropertiesCache);
    protected static PropertyHelper[] GetProperties(Type type, Func`2<PropertyInfo, PropertyHelper> createPropertyHelper, ConcurrentDictionary`2<Type, PropertyHelper[]> cache);
    private static bool IsInterestingProperty(PropertyInfo property);
}
[JsonTypeNameAttribute("Abort")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.AbortHostInstanceMessage : HostMessage {
}
[JsonTypeNameAttribute("IBinder")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.BinderParameterDescriptor : ParameterDescriptor {
}
[JsonTypeNameAttribute("IBinder")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.BinderParameterLog : ParameterLog {
    [CompilerGeneratedAttribute]
private IEnumerable`1<BinderParameterLogItem> <Items>k__BackingField;
    public IEnumerable`1<BinderParameterLogItem> Items { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<BinderParameterLogItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IEnumerable`1<BinderParameterLogItem> value);
}
internal class Microsoft.Azure.WebJobs.Host.Protocols.BinderParameterLogItem : object {
    [CompilerGeneratedAttribute]
private ParameterDescriptor <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterLog <Log>k__BackingField;
    public ParameterDescriptor Descriptor { get; public set; }
    public string Value { get; public set; }
    public ParameterLog Log { get; public set; }
    [CompilerGeneratedAttribute]
public ParameterDescriptor get_Descriptor();
    [CompilerGeneratedAttribute]
public void set_Descriptor(ParameterDescriptor value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public ParameterLog get_Log();
    [CompilerGeneratedAttribute]
public void set_Log(ParameterLog value);
}
[JsonTypeNameAttribute("BindingData")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.BindingDataParameterDescriptor : ParameterDescriptor {
}
internal static class Microsoft.Azure.WebJobs.Host.Protocols.BlobMetadataKeys : object {
    public static string ParentId;
    private static BlobMetadataKeys();
}
internal static class Microsoft.Azure.WebJobs.Host.Protocols.BlobNames : object {
    public static string GetConflictFreeDateTimeBasedBlobName();
    public static string GetConflictFreeDateTimeBasedBlobName(DateTimeOffset timestamp);
    public static string CreateDateBasedBlobName(DateTimeOffset timestamp);
}
[JsonTypeNameAttribute("CallAndOverride")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.CallAndOverrideMessage : HostMessage {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionId>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionReason <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ParentId>k__BackingField;
    public Guid Id { get; public set; }
    public string FunctionId { get; public set; }
    public IDictionary`2<string, string> Arguments { get; public set; }
    public ExecutionReason Reason { get; public set; }
    public Nullable`1<Guid> ParentId { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_FunctionId();
    [CompilerGeneratedAttribute]
public void set_FunctionId(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public ExecutionReason get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(ExecutionReason value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(Nullable`1<Guid> value);
}
[JsonTypeNameAttribute("CallerSupplied")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.CallerSuppliedParameterDescriptor : ParameterDescriptor {
}
[JsonTypeNameAttribute("CancellationToken")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.CancellationTokenParameterDescriptor : ParameterDescriptor {
}
[JsonTypeNameAttribute("CloudStorageAccount")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.CloudStorageAccountParameterDescriptor : ParameterDescriptor {
    [CompilerGeneratedAttribute]
private string <AccountName>k__BackingField;
    public string AccountName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccountName();
    [CompilerGeneratedAttribute]
public void set_AccountName(string value);
}
[JsonTypeNameAttribute("ConsoleOutput")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.ConsoleOutputParameterDescriptor : ParameterDescriptor {
}
internal static class Microsoft.Azure.WebJobs.Host.Protocols.ContainerNames : object {
    private static string Prefix;
    public static string HostOutput;
    public static string HostArchive;
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Host.Protocols.DictionaryExtensions : object {
    [ExtensionAttribute]
public static void RemoveIfContainsKey(IDictionary`2<TKey, TValue> dictionary, TKey key);
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum Microsoft.Azure.WebJobs.Host.Protocols.ExecutionReason : Enum {
    public int value__;
    public static ExecutionReason AutomaticTrigger;
    public static ExecutionReason HostCall;
    public static ExecutionReason Dashboard;
}
[JsonTypeNameAttribute("FunctionCompleted")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.FunctionCompletedMessage : FunctionStartedMessage {
    [CompilerGeneratedAttribute]
private DateTimeOffset <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionFailure <Failure>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ParameterLog> <ParameterLogs>k__BackingField;
    public DateTimeOffset EndTime { get; public set; }
    [JsonIgnoreAttribute]
public bool Succeeded { get; }
    public FunctionFailure Failure { get; public set; }
    public IDictionary`2<string, ParameterLog> ParameterLogs { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeOffset get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(DateTimeOffset value);
    public bool get_Succeeded();
    [CompilerGeneratedAttribute]
public FunctionFailure get_Failure();
    [CompilerGeneratedAttribute]
public void set_Failure(FunctionFailure value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ParameterLog> get_ParameterLogs();
    [CompilerGeneratedAttribute]
public void set_ParameterLogs(IDictionary`2<string, ParameterLog> value);
    internal virtual void AddMetadata(IDictionary`2<string, string> metadata);
}
public class Microsoft.Azure.WebJobs.Host.Protocols.FunctionDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ParameterDescriptor> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private TriggerParameterDescriptor <TriggerParameterDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeoutAttribute <TimeoutAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SingletonAttribute> <SingletonAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFunctionFilter> <MethodLevelFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFunctionFilter> <ClassLevelFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private IRetryStrategy <RetryStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedListenerId>k__BackingField;
    public string Id { get; public set; }
    public string FullName { get; public set; }
    public string ShortName { get; public set; }
    public IEnumerable`1<ParameterDescriptor> Parameters { get; public set; }
    [JsonIgnoreAttribute]
public string LogName { get; public set; }
    [JsonIgnoreAttribute]
internal bool IsDisabled { get; internal set; }
    internal bool HasCancellationToken { get; internal set; }
    [JsonIgnoreAttribute]
internal TriggerParameterDescriptor TriggerParameterDescriptor { get; internal set; }
    [JsonIgnoreAttribute]
internal TimeoutAttribute TimeoutAttribute { get; internal set; }
    [JsonIgnoreAttribute]
internal IEnumerable`1<SingletonAttribute> SingletonAttributes { get; internal set; }
    [JsonIgnoreAttribute]
internal IEnumerable`1<IFunctionFilter> MethodLevelFilters { get; internal set; }
    [JsonIgnoreAttribute]
internal IEnumerable`1<IFunctionFilter> ClassLevelFilters { get; internal set; }
    [JsonIgnoreAttribute]
internal IRetryStrategy RetryStrategy { get; internal set; }
    [JsonIgnoreAttribute]
internal string SharedListenerId { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ParameterDescriptor> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IEnumerable`1<ParameterDescriptor> value);
    [CompilerGeneratedAttribute]
public string get_LogName();
    [CompilerGeneratedAttribute]
public void set_LogName(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsDisabled();
    [CompilerGeneratedAttribute]
internal void set_IsDisabled(bool value);
    [CompilerGeneratedAttribute]
internal bool get_HasCancellationToken();
    [CompilerGeneratedAttribute]
internal void set_HasCancellationToken(bool value);
    [CompilerGeneratedAttribute]
internal TriggerParameterDescriptor get_TriggerParameterDescriptor();
    [CompilerGeneratedAttribute]
internal void set_TriggerParameterDescriptor(TriggerParameterDescriptor value);
    [CompilerGeneratedAttribute]
internal TimeoutAttribute get_TimeoutAttribute();
    [CompilerGeneratedAttribute]
internal void set_TimeoutAttribute(TimeoutAttribute value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<SingletonAttribute> get_SingletonAttributes();
    [CompilerGeneratedAttribute]
internal void set_SingletonAttributes(IEnumerable`1<SingletonAttribute> value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<IFunctionFilter> get_MethodLevelFilters();
    [CompilerGeneratedAttribute]
internal void set_MethodLevelFilters(IEnumerable`1<IFunctionFilter> value);
    [CompilerGeneratedAttribute]
internal IEnumerable`1<IFunctionFilter> get_ClassLevelFilters();
    [CompilerGeneratedAttribute]
internal void set_ClassLevelFilters(IEnumerable`1<IFunctionFilter> value);
    [CompilerGeneratedAttribute]
internal IRetryStrategy get_RetryStrategy();
    [CompilerGeneratedAttribute]
internal void set_RetryStrategy(IRetryStrategy value);
    [CompilerGeneratedAttribute]
internal string get_SharedListenerId();
    [CompilerGeneratedAttribute]
internal void set_SharedListenerId(string value);
}
internal class Microsoft.Azure.WebJobs.Host.Protocols.FunctionFailure : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExceptionDetails>k__BackingField;
    [JsonIgnoreAttribute]
internal Exception Exception { get; internal set; }
    public string ExceptionType { get; public set; }
    public string ExceptionDetails { get; public set; }
    [CompilerGeneratedAttribute]
internal Exception get_Exception();
    [CompilerGeneratedAttribute]
internal void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public string get_ExceptionType();
    [CompilerGeneratedAttribute]
public void set_ExceptionType(string value);
    [CompilerGeneratedAttribute]
public string get_ExceptionDetails();
    [CompilerGeneratedAttribute]
public void set_ExceptionDetails(string value);
    internal static FunctionFailure FromException(Exception ex);
}
[JsonTypeNameAttribute("FunctionStarted")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.FunctionStartedMessage : HostOutputMessage {
    protected static string FunctionInstanceIdKey;
    [CompilerGeneratedAttribute]
private Guid <FunctionInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionDescriptor <Function>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <TriggerDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionReason <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalBlobDescriptor <OutputBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalBlobDescriptor <ParameterLogBlob>k__BackingField;
    public Guid FunctionInstanceId { get; public set; }
    public FunctionDescriptor Function { get; public set; }
    public IDictionary`2<string, string> Arguments { get; public set; }
    public Nullable`1<Guid> ParentId { get; public set; }
    public IDictionary`2<string, string> TriggerDetails { get; public set; }
    public ExecutionReason Reason { get; public set; }
    public string ReasonDetails { get; public set; }
    public DateTimeOffset StartTime { get; public set; }
    public LocalBlobDescriptor OutputBlob { get; public set; }
    public LocalBlobDescriptor ParameterLogBlob { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_FunctionInstanceId();
    [CompilerGeneratedAttribute]
public void set_FunctionInstanceId(Guid value);
    [CompilerGeneratedAttribute]
public FunctionDescriptor get_Function();
    [CompilerGeneratedAttribute]
public void set_Function(FunctionDescriptor value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_TriggerDetails();
    [CompilerGeneratedAttribute]
public void set_TriggerDetails(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public ExecutionReason get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(ExecutionReason value);
    [CompilerGeneratedAttribute]
public string get_ReasonDetails();
    [CompilerGeneratedAttribute]
public void set_ReasonDetails(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public LocalBlobDescriptor get_OutputBlob();
    [CompilerGeneratedAttribute]
public void set_OutputBlob(LocalBlobDescriptor value);
    [CompilerGeneratedAttribute]
public LocalBlobDescriptor get_ParameterLogBlob();
    [CompilerGeneratedAttribute]
public void set_ParameterLogBlob(LocalBlobDescriptor value);
    internal virtual void AddMetadata(IDictionary`2<string, string> metadata);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Host.Protocols.FunctionStartedMessageExtensions : object {
    [ExtensionAttribute]
public static string FormatReason(FunctionStartedMessage message);
}
[JsonTypeNameAttribute("FunctionStatus")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.FunctionStatusMessage : object {
    [CompilerGeneratedAttribute]
private string <FunctionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <FunctionInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <EndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private FunctionFailure <Failure>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalBlobDescriptor <OutputBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalBlobDescriptor <ParameterLogBlob>k__BackingField;
    public string FunctionId { get; public set; }
    public Guid FunctionInstanceId { get; public set; }
    public string Status { get; public set; }
    public DateTimeOffset StartTime { get; public set; }
    public DateTimeOffset EndTime { get; public set; }
    public FunctionFailure Failure { get; public set; }
    public LocalBlobDescriptor OutputBlob { get; public set; }
    public LocalBlobDescriptor ParameterLogBlob { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FunctionId();
    [CompilerGeneratedAttribute]
public void set_FunctionId(string value);
    [CompilerGeneratedAttribute]
public Guid get_FunctionInstanceId();
    [CompilerGeneratedAttribute]
public void set_FunctionInstanceId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_EndTime();
    [CompilerGeneratedAttribute]
public void set_EndTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public FunctionFailure get_Failure();
    [CompilerGeneratedAttribute]
public void set_Failure(FunctionFailure value);
    [CompilerGeneratedAttribute]
public LocalBlobDescriptor get_OutputBlob();
    [CompilerGeneratedAttribute]
public void set_OutputBlob(LocalBlobDescriptor value);
    [CompilerGeneratedAttribute]
public LocalBlobDescriptor get_ParameterLogBlob();
    [CompilerGeneratedAttribute]
public void set_ParameterLogBlob(LocalBlobDescriptor value);
}
internal class Microsoft.Azure.WebJobs.Host.Protocols.HeartbeatDescriptor : object {
    [CompilerGeneratedAttribute]
private string <SharedContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedDirectoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceBlobName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExpirationInSeconds>k__BackingField;
    public string SharedContainerName { get; public set; }
    public string SharedDirectoryName { get; public set; }
    public string InstanceBlobName { get; public set; }
    public int ExpirationInSeconds { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SharedContainerName();
    [CompilerGeneratedAttribute]
public void set_SharedContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_SharedDirectoryName();
    [CompilerGeneratedAttribute]
public void set_SharedDirectoryName(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceBlobName();
    [CompilerGeneratedAttribute]
public void set_InstanceBlobName(string value);
    [CompilerGeneratedAttribute]
public int get_ExpirationInSeconds();
    [CompilerGeneratedAttribute]
public void set_ExpirationInSeconds(int value);
}
[JsonConverterAttribute("Microsoft.Azure.WebJobs.Host.Protocols.HostMessage/HostMessageConverter")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.HostMessage : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
internal abstract class Microsoft.Azure.WebJobs.Host.Protocols.HostOutputMessage : PersistentQueueMessage {
    protected static string MessageTypeKeyName;
    [CompilerGeneratedAttribute]
private Guid <HostInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedQueueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceQueueName>k__BackingField;
    [CompilerGeneratedAttribute]
private HeartbeatDescriptor <Heartbeat>k__BackingField;
    [CompilerGeneratedAttribute]
private WebJobRunIdentifier <WebJobRunIdentifier>k__BackingField;
    public Guid HostInstanceId { get; public set; }
    public string HostDisplayName { get; public set; }
    public string SharedQueueName { get; public set; }
    public string InstanceQueueName { get; public set; }
    public HeartbeatDescriptor Heartbeat { get; public set; }
    public WebJobRunIdentifier WebJobRunIdentifier { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_HostInstanceId();
    [CompilerGeneratedAttribute]
public void set_HostInstanceId(Guid value);
    [CompilerGeneratedAttribute]
public string get_HostDisplayName();
    [CompilerGeneratedAttribute]
public void set_HostDisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_SharedQueueName();
    [CompilerGeneratedAttribute]
public void set_SharedQueueName(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceQueueName();
    [CompilerGeneratedAttribute]
public void set_InstanceQueueName(string value);
    [CompilerGeneratedAttribute]
public HeartbeatDescriptor get_Heartbeat();
    [CompilerGeneratedAttribute]
public void set_Heartbeat(HeartbeatDescriptor value);
    [CompilerGeneratedAttribute]
public WebJobRunIdentifier get_WebJobRunIdentifier();
    [CompilerGeneratedAttribute]
public void set_WebJobRunIdentifier(WebJobRunIdentifier value);
}
[JsonTypeNameAttribute("HostStarted")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.HostStartedMessage : HostOutputMessage {
    private static string HostIdKeyName;
    [CompilerGeneratedAttribute]
private IEnumerable`1<FunctionDescriptor> <Functions>k__BackingField;
    public IEnumerable`1<FunctionDescriptor> Functions { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<FunctionDescriptor> get_Functions();
    [CompilerGeneratedAttribute]
public void set_Functions(IEnumerable`1<FunctionDescriptor> value);
    internal virtual void AddMetadata(IDictionary`2<string, string> metadata);
}
internal interface Microsoft.Azure.WebJobs.Host.Protocols.IHeartbeatCommand {
    public abstract virtual Task BeatAsync(CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Host.Protocols.IPersistentQueueReader`1 {
    public abstract virtual Task`1<T> DequeueAsync();
    public abstract virtual Task DeleteAsync(T message);
    public abstract virtual Task TryMakeItemVisible(T message);
    public abstract virtual int Count(Nullable`1<int> limit);
}
internal interface Microsoft.Azure.WebJobs.Host.Protocols.IPersistentQueueWriter`1 {
    public abstract virtual Task`1<string> EnqueueAsync(T message, CancellationToken cancellationToken);
    public abstract virtual Task DeleteAsync(string messageId, CancellationToken cancellationToken);
}
internal static class Microsoft.Azure.WebJobs.Host.Protocols.JsonSerialization : object {
    private static JsonSerializerSettings JsonSerializerSettings;
    private static JsonSerializer JsonSerializer;
    public static JsonSerializerSettings Settings { get; }
    internal static JsonSerializer Serializer { get; }
    private static JsonSerialization();
    public static JsonSerializerSettings get_Settings();
    internal static JsonSerializer get_Serializer();
    internal static void ApplySettings(JsonReader reader);
    internal static void ApplySettings(JsonWriter writer);
    internal static JsonTextReader CreateJsonTextReader(TextReader reader);
    internal static JsonTextWriter CreateJsonTextWriter(TextWriter textWriter);
    public static bool IsJsonObject(string input);
    internal static JObject ParseJObject(string json);
}
internal class Microsoft.Azure.WebJobs.Host.Protocols.JsonTypeNameAttribute : Attribute {
    private string _typeName;
    public string TypeName { get; }
    public JsonTypeNameAttribute(string typeName);
    public string get_TypeName();
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Host.Protocols.JTokenExtensions : object {
    [ExtensionAttribute]
public static string ToJsonString(JToken token);
}
internal class Microsoft.Azure.WebJobs.Host.Protocols.LocalBlobDescriptor : object {
    [CompilerGeneratedAttribute]
private string <ContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobName>k__BackingField;
    public string ContainerName { get; public set; }
    public string BlobName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ContainerName();
    [CompilerGeneratedAttribute]
public void set_ContainerName(string value);
    [CompilerGeneratedAttribute]
public string get_BlobName();
    [CompilerGeneratedAttribute]
public void set_BlobName(string value);
}
internal class Microsoft.Azure.WebJobs.Host.Protocols.NullHeartbeatCommand : object {
    public sealed virtual Task BeatAsync(CancellationToken cancellationToken);
}
[JsonConverterAttribute("Microsoft.Azure.WebJobs.Host.Protocols.ParameterDescriptor/ParameterDescriptorConverter")]
public class Microsoft.Azure.WebJobs.Host.Protocols.ParameterDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ParameterDisplayHints <DisplayHints>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JToken> <ExtendedProperties>k__BackingField;
    public string Type { get; public set; }
    public string Name { get; public set; }
    public ParameterDisplayHints DisplayHints { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, JToken> ExtendedProperties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public ParameterDisplayHints get_DisplayHints();
    [CompilerGeneratedAttribute]
public void set_DisplayHints(ParameterDisplayHints value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JToken> get_ExtendedProperties();
    [CompilerGeneratedAttribute]
public void set_ExtendedProperties(Dictionary`2<string, JToken> value);
}
public class Microsoft.Azure.WebJobs.Host.Protocols.ParameterDisplayHints : object {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prompt>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    public string Description { get; public set; }
    public string Prompt { get; public set; }
    public string DefaultValue { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Prompt();
    [CompilerGeneratedAttribute]
public virtual void set_Prompt(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DefaultValue();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValue(string value);
}
[JsonConverterAttribute("Microsoft.Azure.WebJobs.Host.Protocols.ParameterLog/ParameterLogConverter")]
public class Microsoft.Azure.WebJobs.Host.Protocols.ParameterLog : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
[JsonConverterAttribute("Microsoft.Azure.WebJobs.Host.Protocols.PersistentQueueMessage/PersistentQueueMessageConverter")]
internal abstract class Microsoft.Azure.WebJobs.Host.Protocols.PersistentQueueMessage : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Blob>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BlobText>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <EnqueuedOn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PopReceipt>k__BackingField;
    public string Type { get; public set; }
    [JsonIgnoreAttribute]
internal object Blob { get; internal set; }
    [JsonIgnoreAttribute]
internal string BlobText { get; internal set; }
    [JsonIgnoreAttribute]
public DateTimeOffset EnqueuedOn { get; public set; }
    [JsonIgnoreAttribute]
public string PopReceipt { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
internal object get_Blob();
    [CompilerGeneratedAttribute]
internal void set_Blob(object value);
    [CompilerGeneratedAttribute]
internal string get_BlobText();
    [CompilerGeneratedAttribute]
internal void set_BlobText(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_EnqueuedOn();
    [CompilerGeneratedAttribute]
public void set_EnqueuedOn(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_PopReceipt();
    [CompilerGeneratedAttribute]
public void set_PopReceipt(string value);
    internal abstract virtual void AddMetadata(IDictionary`2<string, string> metadata);
}
internal class Microsoft.Azure.WebJobs.Host.Protocols.PolymorphicJsonConverter : JsonConverter {
    private string _typePropertyName;
    private IDictionary`2<string, Type> _nameToTypeMap;
    private IDictionary`2<Type, string> _typeToNameMap;
    private static ConcurrentDictionary`2<Type, NonCircularContractResolver> _nonCircularResolverCache;
    public string TypePropertyName { get; }
    public PolymorphicJsonConverter(IDictionary`2<string, Type> typeMapping);
    public PolymorphicJsonConverter(string typePropertyName, IDictionary`2<string, Type> typeMapping);
    private static PolymorphicJsonConverter();
    public string get_TypePropertyName();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public static IDictionary`2<string, Type> GetTypeMapping();
    private static IEnumerable`1<Type> GetTypesInHierarchy();
    private static string GetDeclaredTypeName(Type type);
    private string GetTypeName(Type type);
    private Type GetTypeToCreate(JToken token);
}
[JsonTypeNameAttribute("ReadBlob")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.ReadBlobParameterLog : ParameterLog {
    [CompilerGeneratedAttribute]
private long <BytesRead>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ElapsedTime>k__BackingField;
    public long BytesRead { get; public set; }
    public long Length { get; public set; }
    public TimeSpan ElapsedTime { get; public set; }
    [CompilerGeneratedAttribute]
public long get_BytesRead();
    [CompilerGeneratedAttribute]
public void set_BytesRead(long value);
    [CompilerGeneratedAttribute]
public long get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(long value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ElapsedTime();
    [CompilerGeneratedAttribute]
public void set_ElapsedTime(TimeSpan value);
}
[JsonTypeNameAttribute("ServiceBus")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.ServiceBusParameterDescriptor : ParameterDescriptor {
    [CompilerGeneratedAttribute]
private string <NamespaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueueOrTopicName>k__BackingField;
    public string NamespaceName { get; public set; }
    public string QueueOrTopicName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NamespaceName();
    [CompilerGeneratedAttribute]
public void set_NamespaceName(string value);
    [CompilerGeneratedAttribute]
public string get_QueueOrTopicName();
    [CompilerGeneratedAttribute]
public void set_QueueOrTopicName(string value);
}
[JsonTypeNameAttribute("ServiceBusTrigger")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.ServiceBusTriggerParameterDescriptor : TriggerParameterDescriptor {
    [CompilerGeneratedAttribute]
private string <NamespaceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TopicName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscriptionName>k__BackingField;
    public string NamespaceName { get; public set; }
    public string QueueName { get; public set; }
    public string TopicName { get; public set; }
    public string SubscriptionName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NamespaceName();
    [CompilerGeneratedAttribute]
public void set_NamespaceName(string value);
    [CompilerGeneratedAttribute]
public string get_QueueName();
    [CompilerGeneratedAttribute]
public void set_QueueName(string value);
    [CompilerGeneratedAttribute]
public string get_TopicName();
    [CompilerGeneratedAttribute]
public void set_TopicName(string value);
    [CompilerGeneratedAttribute]
public string get_SubscriptionName();
    [CompilerGeneratedAttribute]
public void set_SubscriptionName(string value);
    public virtual string GetTriggerReason(IDictionary`2<string, string> arguments);
}
[JsonTypeNameAttribute("Singleton")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.SingletonParameterLog : ParameterLog {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <TimeToAcquireLock>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <LockDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LockOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockAcquired>k__BackingField;
    [JsonPropertyAttribute]
public Nullable`1<TimeSpan> TimeToAcquireLock { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<TimeSpan> LockDuration { get; public set; }
    [JsonPropertyAttribute]
public string LockOwner { get; public set; }
    public bool LockAcquired { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_TimeToAcquireLock();
    [CompilerGeneratedAttribute]
public void set_TimeToAcquireLock(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_LockDuration();
    [CompilerGeneratedAttribute]
public void set_LockDuration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public string get_LockOwner();
    [CompilerGeneratedAttribute]
public void set_LockOwner(string value);
    [CompilerGeneratedAttribute]
public bool get_LockAcquired();
    [CompilerGeneratedAttribute]
public void set_LockAcquired(bool value);
}
[JsonTypeNameAttribute("Table")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.TableParameterLog : ParameterLog {
    [CompilerGeneratedAttribute]
private int <EntitiesWritten>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ElapsedWriteTime>k__BackingField;
    public int EntitiesWritten { get; public set; }
    [ObsoleteAttribute("Use the EntitiesWritten property instead.")]
public int EntitiesUpdated { get; public set; }
    public TimeSpan ElapsedWriteTime { get; public set; }
    [CompilerGeneratedAttribute]
public int get_EntitiesWritten();
    [CompilerGeneratedAttribute]
public void set_EntitiesWritten(int value);
    public int get_EntitiesUpdated();
    public void set_EntitiesUpdated(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ElapsedWriteTime();
    [CompilerGeneratedAttribute]
public void set_ElapsedWriteTime(TimeSpan value);
}
[JsonTypeNameAttribute("Text")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.TextParameterLog : ParameterLog {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Microsoft.Azure.WebJobs.Host.Protocols.TriggerParameterDescriptor : ParameterDescriptor {
    public virtual string GetTriggerReason(IDictionary`2<string, string> arguments);
}
[DebuggerDisplayAttribute("{GetKey(),nq}")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.WebJobRunIdentifier : object {
    [CompilerGeneratedAttribute]
private string <WebSiteName>k__BackingField;
    [CompilerGeneratedAttribute]
private WebJobTypes <JobType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JobName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunId>k__BackingField;
    [CompilerGeneratedAttribute]
private static WebJobRunIdentifier <Current>k__BackingField;
    public string WebSiteName { get; public set; }
    public WebJobTypes JobType { get; public set; }
    public string JobName { get; public set; }
    public string RunId { get; public set; }
    public static WebJobRunIdentifier Current { get; private set; }
    private static WebJobRunIdentifier();
    public WebJobRunIdentifier(WebJobTypes jobType, string jobName, string runId);
    public WebJobRunIdentifier(string websiteName, WebJobTypes jobType, string jobName, string runId);
    [CompilerGeneratedAttribute]
public string get_WebSiteName();
    [CompilerGeneratedAttribute]
public void set_WebSiteName(string value);
    [CompilerGeneratedAttribute]
public WebJobTypes get_JobType();
    [CompilerGeneratedAttribute]
public void set_JobType(WebJobTypes value);
    [CompilerGeneratedAttribute]
public string get_JobName();
    [CompilerGeneratedAttribute]
public void set_JobName(string value);
    [CompilerGeneratedAttribute]
public string get_RunId();
    [CompilerGeneratedAttribute]
public void set_RunId(string value);
    [CompilerGeneratedAttribute]
public static WebJobRunIdentifier get_Current();
    [CompilerGeneratedAttribute]
private static void set_Current(WebJobRunIdentifier value);
    public string GetKey();
}
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
internal enum Microsoft.Azure.WebJobs.Host.Protocols.WebJobTypes : Enum {
    public int value__;
    public static WebJobTypes Triggered;
    public static WebJobTypes Continuous;
}
internal static class Microsoft.Azure.WebJobs.Host.Protocols.WebSitesKnownKeyNames : object {
    public static string WebSiteNameKey;
    public static string JobDataPath;
    public static string JobNameKey;
    public static string JobTypeKey;
    public static string JobRunIdKey;
}
[JsonTypeNameAttribute("WriteBlob")]
internal class Microsoft.Azure.WebJobs.Host.Protocols.WriteBlobParameterLog : ParameterLog {
    [CompilerGeneratedAttribute]
private bool <WasWritten>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <BytesWritten>k__BackingField;
    public bool WasWritten { get; public set; }
    public Nullable`1<long> BytesWritten { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_WasWritten();
    [CompilerGeneratedAttribute]
public void set_WasWritten(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_BytesWritten();
    [CompilerGeneratedAttribute]
public void set_BytesWritten(Nullable`1<long> value);
}
internal class Microsoft.Azure.WebJobs.Host.Queues.Listeners.HostMessageListenerFactory : object {
    private string _queueName;
    private IWebJobsExceptionHandler _exceptionHandler;
    private ILoggerFactory _loggerFactory;
    private IFunctionIndexLookup _functionLookup;
    private IFunctionInstanceLogger _functionInstanceLogger;
    private IFunctionExecutor _executor;
    private ILoadBalancerQueue _queueFactory;
    public HostMessageListenerFactory(ILoadBalancerQueue queueFactory, string queueName, IWebJobsExceptionHandler exceptionHandler, ILoggerFactory loggerFactory, IFunctionIndexLookup functionLookup, IFunctionInstanceLogger functionInstanceLogger, IFunctionExecutor executor);
    public sealed virtual Task`1<IListener> CreateAsync(CancellationToken cancellationToken);
}
public class Microsoft.Azure.WebJobs.Host.RecoverableException : Exception {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public bool Handled { get; public set; }
    public RecoverableException(string message);
    public RecoverableException(string message, Exception innerException);
    protected RecoverableException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal void TryRecover(ILogger logger);
}
internal class Microsoft.Azure.WebJobs.Host.RenewableLockHandle : object {
    [CompilerGeneratedAttribute]
private IDistributedLock <InnerLock>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskSeriesTimer <LeaseRenewalTimer>k__BackingField;
    public IDistributedLock InnerLock { get; private set; }
    public ITaskSeriesTimer LeaseRenewalTimer { get; private set; }
    public RenewableLockHandle(IDistributedLock handle, ITaskSeriesTimer renewal);
    [CompilerGeneratedAttribute]
public IDistributedLock get_InnerLock();
    [CompilerGeneratedAttribute]
private void set_InnerLock(IDistributedLock value);
    [CompilerGeneratedAttribute]
public ITaskSeriesTimer get_LeaseRenewalTimer();
    [CompilerGeneratedAttribute]
private void set_LeaseRenewalTimer(ITaskSeriesTimer value);
}
public class Microsoft.Azure.WebJobs.Host.RetryContext : object {
    private Lazy`1<Dictionary`2<string, object>> _stateDictionary;
    [CompilerGeneratedAttribute]
private int <RetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private IFunctionInstance <Instance>k__BackingField;
    public int RetryCount { get; public set; }
    public int MaxRetryCount { get; public set; }
    public Exception Exception { get; public set; }
    public IFunctionInstance Instance { get; public set; }
    public IDictionary`2<string, object> State { get; }
    [CompilerGeneratedAttribute]
public int get_RetryCount();
    [CompilerGeneratedAttribute]
public void set_RetryCount(int value);
    [CompilerGeneratedAttribute]
public int get_MaxRetryCount();
    [CompilerGeneratedAttribute]
public void set_MaxRetryCount(int value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public IFunctionInstance get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(IFunctionInstance value);
    public IDictionary`2<string, object> get_State();
}
public class Microsoft.Azure.WebJobs.Host.Scale.AggregateScaleStatus : object {
    [CompilerGeneratedAttribute]
private ScaleVote <Vote>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TargetWorkerCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ScaleStatus> <FunctionScaleStatuses>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, TargetScalerResult> <FunctionTargetScalerResults>k__BackingField;
    public ScaleVote Vote { get; public set; }
    public Nullable`1<int> TargetWorkerCount { get; public set; }
    public IDictionary`2<string, ScaleStatus> FunctionScaleStatuses { get; public set; }
    public IDictionary`2<string, TargetScalerResult> FunctionTargetScalerResults { get; public set; }
    [CompilerGeneratedAttribute]
public ScaleVote get_Vote();
    [CompilerGeneratedAttribute]
public void set_Vote(ScaleVote value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TargetWorkerCount();
    [CompilerGeneratedAttribute]
public void set_TargetWorkerCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ScaleStatus> get_FunctionScaleStatuses();
    [CompilerGeneratedAttribute]
public void set_FunctionScaleStatuses(IDictionary`2<string, ScaleStatus> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, TargetScalerResult> get_FunctionTargetScalerResults();
    [CompilerGeneratedAttribute]
public void set_FunctionTargetScalerResults(IDictionary`2<string, TargetScalerResult> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Azure.WebJobs.Host.Scale.ConcurrencyManager : object {
    internal static int MinConsecutiveIncreaseLimit;
    internal static int MinConsecutiveDecreaseLimit;
    private ILogger _logger;
    private IOptions`1<ConcurrencyOptions> _options;
    private IConcurrencyThrottleManager _concurrencyThrottleManager;
    private bool _enabled;
    private ConcurrencyThrottleAggregateStatus _throttleStatus;
    [CompilerGeneratedAttribute]
private int <EffectiveCoresCount>k__BackingField;
    internal ConcurrentDictionary`2<string, ConcurrencyStatus> ConcurrencyStatuses;
    public bool Enabled { get; }
    internal ConcurrencyThrottleAggregateStatus ThrottleStatus { get; }
    internal int EffectiveCoresCount { get; internal set; }
    public ConcurrencyManager(IOptions`1<ConcurrencyOptions> options, ILoggerFactory loggerFactory, IConcurrencyThrottleManager concurrencyThrottleManager);
    public bool get_Enabled();
    internal virtual ConcurrencyThrottleAggregateStatus get_ThrottleStatus();
    [CompilerGeneratedAttribute]
internal int get_EffectiveCoresCount();
    [CompilerGeneratedAttribute]
internal void set_EffectiveCoresCount(int value);
    public ConcurrencyStatus GetStatus(string functionId);
    internal virtual HostConcurrencySnapshot GetSnapshot();
    internal virtual void ApplySnapshot(HostConcurrencySnapshot hostSnapshot);
    internal static int GetCoreAdjustedConcurrency(int concurrency, int otherCores, int cores);
    private bool CanIncreaseConcurrency(ConcurrencyStatus concurrencyStatus);
    private bool CanDecreaseConcurrency(ConcurrencyStatus concurrencyStatus);
    internal void FunctionStarted(string functionId);
    internal void FunctionCompleted(string functionId, TimeSpan latency);
    private ConcurrencyStatus GetFunctionConcurrencyStatus(string functionId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Host.Scale.ConcurrencyManagerService : object {
    private ILogger _logger;
    private IOptions`1<ConcurrencyOptions> _options;
    private IConcurrencyStatusRepository _statusRepository;
    private Timer _statusPersistenceTimer;
    private ConcurrencyManager _concurrencyManager;
    private IFunctionIndexProvider _functionIndexProvider;
    private IPrimaryHostStateProvider _primaryHostStateProvider;
    [NullableAttribute("2")]
private HostConcurrencySnapshot _lastSnapshot;
    private bool _disposed;
    internal Timer StatusPersistenceTimer { get; }
    public ConcurrencyManagerService(IOptions`1<ConcurrencyOptions> options, ILoggerFactory loggerFactory, ConcurrencyManager concurrencyManager, IConcurrencyStatusRepository statusRepository, IFunctionIndexProvider functionIndexProvider, IPrimaryHostStateProvider primaryHostStateProvider);
    internal Timer get_StatusPersistenceTimer();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Scale.ConcurrencyManagerService/<StartAsync>d__12")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Scale.ConcurrencyManagerService/<ApplySnapshotAsync>d__14")]
private Task ApplySnapshotAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Scale.ConcurrencyManagerService/<OnPersistenceTimer>d__15")]
internal void OnPersistenceTimer(object sender, ElapsedEventArgs e);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Scale.ConcurrencyManagerService/<OnPersistenceTimer>d__16")]
internal Task OnPersistenceTimer();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Scale.ConcurrencyManagerService/<WriteSnapshotAsync>d__17")]
internal Task WriteSnapshotAsync();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Microsoft.Azure.WebJobs.Host.Scale.ConcurrencyOptions : object {
    private int _maximumFunctionConcurrency;
    private long _totalAvaliableMemoryBytes;
    private float _memoryThreshold;
    private float _cpuThreshold;
    [CompilerGeneratedAttribute]
private bool <DynamicConcurrencyEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SnapshotPersistenceEnabled>k__BackingField;
    public bool DynamicConcurrencyEnabled { get; public set; }
    public int MaximumFunctionConcurrency { get; public set; }
    internal long TotalAvailableMemoryBytes { get; internal set; }
    internal float MemoryThreshold { get; internal set; }
    public float CPUThreshold { get; public set; }
    public bool SnapshotPersistenceEnabled { get; public set; }
    internal bool MemoryThrottleEnabled { get; }
    [CompilerGeneratedAttribute]
public bool get_DynamicConcurrencyEnabled();
    [CompilerGeneratedAttribute]
public void set_DynamicConcurrencyEnabled(bool value);
    public int get_MaximumFunctionConcurrency();
    public void set_MaximumFunctionConcurrency(int value);
    internal long get_TotalAvailableMemoryBytes();
    internal void set_TotalAvailableMemoryBytes(long value);
    internal float get_MemoryThreshold();
    internal void set_MemoryThreshold(float value);
    public float get_CPUThreshold();
    public void set_CPUThreshold(float value);
    [CompilerGeneratedAttribute]
public bool get_SnapshotPersistenceEnabled();
    [CompilerGeneratedAttribute]
public void set_SnapshotPersistenceEnabled(bool value);
    internal bool get_MemoryThrottleEnabled();
    public sealed virtual string Format();
}
public class Microsoft.Azure.WebJobs.Host.Scale.ConcurrencyStatus : object {
    internal static int DefaultFailedAdjustmentQuietWindowSeconds;
    internal static int AdjustmentRunWindowSeconds;
    internal static int DefaultMinAdjustmentFrequencySeconds;
    internal static int MaxAdjustmentDelta;
    private ConcurrencyManager _concurrencyManager;
    private object _syncLock;
    private int _adjustmentRunDirection;
    private int _adjustmentRunCount;
    private int _lastLoggedConcurrency;
    [CompilerGeneratedAttribute]
private string <FunctionId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentConcurrency>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutstandingInvocations>k__BackingField;
    [CompilerGeneratedAttribute]
private Stopwatch <LastConcurrencyAdjustmentStopwatch>k__BackingField;
    [CompilerGeneratedAttribute]
private Stopwatch <LastConcurrencyDecreaseStopwatch>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxConcurrentExecutionsSinceLastAdjustment>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InvocationsSinceLastAdjustment>k__BackingField;
    [CompilerGeneratedAttribute]
private double <TotalInvocationTimeSinceLastAdjustmentMs>k__BackingField;
    public string FunctionId { get; }
    public int CurrentConcurrency { get; internal set; }
    public int OutstandingInvocations { get; internal set; }
    public ConcurrencyThrottleAggregateStatus ThrottleStatus { get; }
    internal Stopwatch LastConcurrencyAdjustmentStopwatch { get; }
    internal Stopwatch LastConcurrencyDecreaseStopwatch { get; }
    internal int MaxConcurrentExecutionsSinceLastAdjustment { get; internal set; }
    internal int InvocationsSinceLastAdjustment { get; internal set; }
    internal double TotalInvocationTimeSinceLastAdjustmentMs { get; internal set; }
    public ConcurrencyStatus(string functionId, ConcurrencyManager concurrencyManager);
    [CompilerGeneratedAttribute]
public string get_FunctionId();
    [CompilerGeneratedAttribute]
public int get_CurrentConcurrency();
    [CompilerGeneratedAttribute]
internal void set_CurrentConcurrency(int value);
    [CompilerGeneratedAttribute]
public int get_OutstandingInvocations();
    [CompilerGeneratedAttribute]
internal void set_OutstandingInvocations(int value);
    public ConcurrencyThrottleAggregateStatus get_ThrottleStatus();
    [CompilerGeneratedAttribute]
internal Stopwatch get_LastConcurrencyAdjustmentStopwatch();
    [CompilerGeneratedAttribute]
internal Stopwatch get_LastConcurrencyDecreaseStopwatch();
    [CompilerGeneratedAttribute]
internal int get_MaxConcurrentExecutionsSinceLastAdjustment();
    [CompilerGeneratedAttribute]
internal void set_MaxConcurrentExecutionsSinceLastAdjustment(int value);
    [CompilerGeneratedAttribute]
internal int get_InvocationsSinceLastAdjustment();
    [CompilerGeneratedAttribute]
internal void set_InvocationsSinceLastAdjustment(int value);
    [CompilerGeneratedAttribute]
internal double get_TotalInvocationTimeSinceLastAdjustmentMs();
    [CompilerGeneratedAttribute]
internal void set_TotalInvocationTimeSinceLastAdjustmentMs(double value);
    public int GetAvailableInvocationCount(int pendingInvocations);
    internal void ApplySnapshot(FunctionConcurrencySnapshot snapshot);
    internal bool CanAdjustConcurrency();
    internal bool CanDecreaseConcurrency();
    internal bool CanIncreaseConcurrency(int maxDegreeOfParallelism);
    internal TimeSpan GetLatencyAdjustedInterval(TimeSpan minInterval, TimeSpan defaultInterval, int latencyMultiplier);
    internal void IncreaseConcurrency();
    internal void DecreaseConcurrency();
    internal void LogUpdates(ILogger logger);
    internal void FunctionStarted();
    internal void FunctionCompleted(TimeSpan latency);
    internal int GetNextAdjustment(int direction);
    private void AdjustConcurrency(int delta);
    private int GetAverageInvocationLatencyMS();
}
public class Microsoft.Azure.WebJobs.Host.Scale.ConcurrencyThrottleAggregateStatus : object {
    [CompilerGeneratedAttribute]
private ThrottleState <State>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ICollection`1<string> <EnabledThrottles>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConsecutiveCount>k__BackingField;
    public ThrottleState State { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<string> EnabledThrottles { get; public set; }
    public int ConsecutiveCount { get; public set; }
    [CompilerGeneratedAttribute]
public ThrottleState get_State();
    [CompilerGeneratedAttribute]
public void set_State(ThrottleState value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_EnabledThrottles();
    [CompilerGeneratedAttribute]
public void set_EnabledThrottles(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public int get_ConsecutiveCount();
    [CompilerGeneratedAttribute]
public void set_ConsecutiveCount(int value);
}
public class Microsoft.Azure.WebJobs.Host.Scale.ConcurrencyThrottleStatus : object {
    [CompilerGeneratedAttribute]
private ThrottleState <State>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ICollection`1<string> <EnabledThrottles>k__BackingField;
    public ThrottleState State { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<string> EnabledThrottles { get; public set; }
    [CompilerGeneratedAttribute]
public ThrottleState get_State();
    [CompilerGeneratedAttribute]
public void set_State(ThrottleState value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_EnabledThrottles();
    [CompilerGeneratedAttribute]
public void set_EnabledThrottles(ICollection`1<string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Host.Scale.DefaultConcurrencyThrottleManager : object {
    private TimeSpan _minUpdateInterval;
    private IEnumerable`1<IConcurrencyThrottleProvider> _throttleProviders;
    private ILogger _logger;
    private object _syncLock;
    private ThrottleState _throttleState;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> _enabledThrottles;
    private int _consecutiveCount;
    [CompilerGeneratedAttribute]
private Stopwatch <LastThrottleCheckStopwatch>k__BackingField;
    internal Stopwatch LastThrottleCheckStopwatch { get; }
    public DefaultConcurrencyThrottleManager(IEnumerable`1<IConcurrencyThrottleProvider> throttleProviders, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
internal Stopwatch get_LastThrottleCheckStopwatch();
    public sealed virtual ConcurrencyThrottleAggregateStatus GetStatus();
    private void UpdateThrottleState();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ConcurrencyThrottleStatus <UpdateThrottleState>b__12_0(IConcurrencyThrottleProvider p);
}
internal class Microsoft.Azure.WebJobs.Host.Scale.DefaultHostProcessMonitor : object {
    internal static string CpuLimitName;
    internal static string MemoryLimitName;
    internal static int MinSampleCount;
    private long _maxMemoryThresholdBytes;
    private ProcessMonitor _hostProcessMonitor;
    private List`1<ProcessMonitor> _childProcessMonitors;
    private IOptions`1<ConcurrencyOptions> _options;
    private object _syncLock;
    private bool _disposed;
    internal List`1<ProcessMonitor> ChildProcessMonitors { get; }
    public DefaultHostProcessMonitor(IOptions`1<ConcurrencyOptions> options, ProcessMonitor processMonitor);
    internal List`1<ProcessMonitor> get_ChildProcessMonitors();
    public sealed virtual void RegisterChildProcess(Process process);
    internal void RegisterChildProcessMonitor(ProcessMonitor monitor);
    public sealed virtual void UnregisterChildProcess(Process process);
    public sealed virtual HostProcessStatus GetStatus(ILogger logger);
    private HostHealthState GetMemoryStatus(ProcessStats hostProcessStats, IEnumerable`1<ProcessStats> childProcessStats, ILogger logger);
    private HostHealthState GetCpuStatus(ProcessStats hostProcessStats, IEnumerable`1<ProcessStats> childProcessStats, ILogger logger);
    private void RemoveExitedChildProcesses();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Microsoft.Azure.WebJobs.Host.Scale.FunctionConcurrencySnapshot : object {
    [CompilerGeneratedAttribute]
private int <Concurrency>k__BackingField;
    public int Concurrency { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Concurrency();
    [CompilerGeneratedAttribute]
public void set_Concurrency(int value);
    public virtual bool Equals(object obj);
    private bool Equals(FunctionConcurrencySnapshot other);
    public virtual int GetHashCode();
}
public class Microsoft.Azure.WebJobs.Host.Scale.HostConcurrencySnapshot : object {
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfCores>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, FunctionConcurrencySnapshot> <FunctionSnapshots>k__BackingField;
    public DateTime Timestamp { get; public set; }
    public int NumberOfCores { get; public set; }
    public Dictionary`2<string, FunctionConcurrencySnapshot> FunctionSnapshots { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public int get_NumberOfCores();
    [CompilerGeneratedAttribute]
public void set_NumberOfCores(int value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, FunctionConcurrencySnapshot> get_FunctionSnapshots();
    [CompilerGeneratedAttribute]
public void set_FunctionSnapshots(Dictionary`2<string, FunctionConcurrencySnapshot> value);
    public virtual bool Equals(object obj);
    private bool Equals(HostConcurrencySnapshot other);
    public virtual int GetHashCode();
}
public enum Microsoft.Azure.WebJobs.Host.Scale.HostHealthState : Enum {
    public int value__;
    public static HostHealthState Unknown;
    public static HostHealthState Overloaded;
    public static HostHealthState Ok;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Host.Scale.HostHealthThrottleProvider : object {
    private IHostProcessMonitor _hostProcessMonitor;
    public HostHealthThrottleProvider(IHostProcessMonitor hostProcessMonitor);
    public sealed virtual ConcurrencyThrottleStatus GetStatus(ILogger logger);
}
public class Microsoft.Azure.WebJobs.Host.Scale.HostProcessStatus : object {
    [CompilerGeneratedAttribute]
private HostHealthState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ExceededLimits>k__BackingField;
    public HostHealthState State { get; public set; }
    public ICollection`1<string> ExceededLimits { get; public set; }
    [CompilerGeneratedAttribute]
public HostHealthState get_State();
    [CompilerGeneratedAttribute]
public void set_State(HostHealthState value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ExceededLimits();
    [CompilerGeneratedAttribute]
public void set_ExceededLimits(ICollection`1<string> value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Azure.WebJobs.Host.Scale.IConcurrencyStatusRepository {
    public abstract virtual Task WriteAsync(HostConcurrencySnapshot snapshot, CancellationToken cancellationToken);
    public abstract virtual Task`1<HostConcurrencySnapshot> ReadAsync(CancellationToken cancellationToken);
}
public interface Microsoft.Azure.WebJobs.Host.Scale.IConcurrencyThrottleManager {
    public abstract virtual ConcurrencyThrottleAggregateStatus GetStatus();
}
[NullableContextAttribute("1")]
public interface Microsoft.Azure.WebJobs.Host.Scale.IConcurrencyThrottleProvider {
    public abstract virtual ConcurrencyThrottleStatus GetStatus(ILogger logger);
}
public interface Microsoft.Azure.WebJobs.Host.Scale.IHostProcessMonitor {
    public abstract virtual void RegisterChildProcess(Process process);
    public abstract virtual void UnregisterChildProcess(Process process);
    public abstract virtual HostProcessStatus GetStatus(ILogger logger);
}
internal class Microsoft.Azure.WebJobs.Host.Scale.InMemoryScaleMetricsRepository : object {
    private ConcurrentDictionary`2<IScaleMonitor, ConcurrentDictionary`2<ScaleMetrics, object>> _monitorMetrics;
    private ILogger _logger;
    private IOptions`1<ScaleOptions> _scaleOptions;
    public InMemoryScaleMetricsRepository(IOptions`1<ScaleOptions> scaleOptions, ILoggerFactory loggerFactory);
    public sealed virtual Task`1<IDictionary`2<IScaleMonitor, IList`1<ScaleMetrics>>> ReadMetricsAsync(IEnumerable`1<IScaleMonitor> monitors);
    public sealed virtual Task WriteMetricsAsync(IDictionary`2<IScaleMonitor, ScaleMetrics> monitorMetrics);
    internal Type GetMonitorScaleMetricsTypeOrNull(IScaleMonitor monitor);
}
public interface Microsoft.Azure.WebJobs.Host.Scale.IScaleMetricsRepository {
    public abstract virtual Task WriteMetricsAsync(IDictionary`2<IScaleMonitor, ScaleMetrics> monitorMetrics);
    public abstract virtual Task`1<IDictionary`2<IScaleMonitor, IList`1<ScaleMetrics>>> ReadMetricsAsync(IEnumerable`1<IScaleMonitor> monitors);
}
public interface Microsoft.Azure.WebJobs.Host.Scale.IScaleMonitor {
    public ScaleMonitorDescriptor Descriptor { get; }
    public abstract virtual ScaleMonitorDescriptor get_Descriptor();
    public abstract virtual Task`1<ScaleMetrics> GetMetricsAsync();
    public abstract virtual ScaleStatus GetScaleStatus(ScaleStatusContext context);
}
public interface Microsoft.Azure.WebJobs.Host.Scale.IScaleMonitor`1 {
    public abstract virtual Task`1<TMetrics> GetMetricsAsync();
    public abstract virtual ScaleStatus GetScaleStatus(ScaleStatusContext`1<TMetrics> context);
}
public interface Microsoft.Azure.WebJobs.Host.Scale.IScaleMonitorManager {
    public abstract virtual void Register(IScaleMonitor monitor);
    public abstract virtual IEnumerable`1<IScaleMonitor> GetMonitors();
}
public interface Microsoft.Azure.WebJobs.Host.Scale.IScaleMonitorProvider {
    public abstract virtual IScaleMonitor GetMonitor();
}
public interface Microsoft.Azure.WebJobs.Host.Scale.IScaleStatusProvider {
    public abstract virtual Task`1<AggregateScaleStatus> GetScaleStatusAsync(ScaleStatusContext context);
}
public interface Microsoft.Azure.WebJobs.Host.Scale.ITargetScaler {
    public TargetScalerDescriptor TargetScalerDescriptor { get; }
    public abstract virtual TargetScalerDescriptor get_TargetScalerDescriptor();
    public abstract virtual Task`1<TargetScalerResult> GetScaleResultAsync(TargetScalerContext context);
}
public interface Microsoft.Azure.WebJobs.Host.Scale.ITargetScalerManager {
    public abstract virtual void Register(ITargetScaler scaler);
    public abstract virtual IEnumerable`1<ITargetScaler> GetTargetScalers();
}
public interface Microsoft.Azure.WebJobs.Host.Scale.ITargetScalerProvider {
    public abstract virtual ITargetScaler GetTargetScaler();
}
internal class Microsoft.Azure.WebJobs.Host.Scale.NullConcurrencyStatusRepository : object {
    public sealed virtual Task`1<HostConcurrencySnapshot> ReadAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public sealed virtual Task WriteAsync(HostConcurrencySnapshot snapshot, CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Scale.NullScaleMetricsRepository : object {
    private IDictionary`2<IScaleMonitor, IList`1<ScaleMetrics>> _emptyMetrics;
    public sealed virtual Task WriteMetricsAsync(IDictionary`2<IScaleMonitor, ScaleMetrics> monitorMetrics);
    public sealed virtual Task`1<IDictionary`2<IScaleMonitor, IList`1<ScaleMetrics>>> ReadMetricsAsync(IEnumerable`1<IScaleMonitor> monitors);
}
internal class Microsoft.Azure.WebJobs.Host.Scale.ProcessMonitor : object {
    internal static int SampleHistorySize;
    internal static int DefaultSampleIntervalSeconds;
    private List`1<double> _cpuLoadHistory;
    private List`1<long> _memoryUsageHistory;
    private int _effectiveCores;
    private bool _autoStart;
    private IProcess _process;
    private Timer _timer;
    private Nullable`1<TimeSpan> _lastProcessorTime;
    private DateTime _lastSampleTime;
    private bool _disposed;
    private Nullable`1<TimeSpan> _interval;
    private object _syncLock;
    public IProcess Process { get; }
    public ProcessMonitor(Process process, Nullable`1<TimeSpan> interval);
    public ProcessMonitor(IProcess process, Nullable`1<TimeSpan> interval, Nullable`1<int> effectiveCores, bool autoStart);
    public virtual IProcess get_Process();
    internal void EnsureTimerStarted();
    public virtual ProcessStats GetStats();
    private void OnTimer(object state);
    internal void SampleProcessMetrics();
    internal void SampleProcessMetrics(TimeSpan currSampleDuration);
    internal void SampleCPULoad(TimeSpan currSampleDuration);
    internal static double CalculateCpuLoad(TimeSpan sampleDuration, TimeSpan currProcessorTime, TimeSpan lastProcessorTime, int coreCount);
    internal void SampleMemoryUsage();
    private void AddSample(List`1<T> samples, T sample);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.WebJobs.Host.Scale.ProcessStats : object {
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<double> <CpuLoadHistory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<long> <MemoryUsageHistory>k__BackingField;
    public int ProcessId { get; public set; }
    public IEnumerable`1<double> CpuLoadHistory { get; public set; }
    public IEnumerable`1<long> MemoryUsageHistory { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ProcessId();
    [CompilerGeneratedAttribute]
public void set_ProcessId(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<double> get_CpuLoadHistory();
    [CompilerGeneratedAttribute]
public void set_CpuLoadHistory(IEnumerable`1<double> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<long> get_MemoryUsageHistory();
    [CompilerGeneratedAttribute]
public void set_MemoryUsageHistory(IEnumerable`1<long> value);
}
internal class Microsoft.Azure.WebJobs.Host.Scale.ScaleManager : object {
    private IScaleMonitorManager _monitorManager;
    private ITargetScalerManager _targetScalerManager;
    private IScaleMetricsRepository _metricsRepository;
    private IConcurrencyStatusRepository _concurrencyStatusRepository;
    private ILogger _logger;
    private IConfiguration _configuration;
    private IOptions`1<ScaleOptions> _scaleOptions;
    private static HashSet`1<string> _targetScalersInError;
    public ScaleManager(IScaleMonitorManager monitorManager, ITargetScalerManager targetScalerManager, IScaleMetricsRepository metricsRepository, IConcurrencyStatusRepository concurrencyStatusRepository, IOptions`1<ScaleOptions> scaleConfiguration, ILoggerFactory loggerFactory, IConfiguration configuration);
    private static ScaleManager();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Scale.ScaleManager/<GetScaleStatusAsync>d__10")]
public sealed virtual Task`1<AggregateScaleStatus> GetScaleStatusAsync(ScaleStatusContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Scale.ScaleManager/<GetScaleMonitorsResultAsync>d__11")]
private Task`1<IDictionary`2<string, ScaleStatus>> GetScaleMonitorsResultAsync(ScaleStatusContext context, IEnumerable`1<IScaleMonitor> scaleMonitorsToProcess);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Scale.ScaleManager/<GetTargetScalersResultAsync>d__12")]
private Task`1<IDictionary`2<string, TargetScalerResult>> GetTargetScalersResultAsync(ScaleStatusContext context, IEnumerable`1<ITargetScaler> targetScalersToProcess);
    internal static ValueTuple`2<List`1<IScaleMonitor>, List`1<ITargetScaler>> GetScalersToSample(IScaleMonitorManager monitorManager, ITargetScalerManager targetScalerManager, IOptions`1<ScaleOptions> scaleOptions, IConfiguration configuration);
    internal static ScaleVote GetAggregateScaleVote(IEnumerable`1<ScaleVote> votes, ScaleStatusContext context, ILogger logger);
    private static string GetTargetScalerFunctionUniqueId(ITargetScaler scaler);
    private static string GetScaleMonitorFunctionUniqueId(IScaleMonitor monitor);
    private static string GetAssemblyName(Type type);
}
public class Microsoft.Azure.WebJobs.Host.Scale.ScaleMetrics : object {
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    public DateTime Timestamp { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
}
public class Microsoft.Azure.WebJobs.Host.Scale.ScaleMonitorDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionId>k__BackingField;
    public string Id { get; }
    public string FunctionId { get; }
    [ObsoleteAttribute("This constructor is obsolete. Use the version that takes function id instead.")]
public ScaleMonitorDescriptor(string id);
    public ScaleMonitorDescriptor(string id, string functionId);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_FunctionId();
}
internal class Microsoft.Azure.WebJobs.Host.Scale.ScaleMonitorManager : object {
    private List`1<IScaleMonitor> _monitors;
    private object _syncRoot;
    public ScaleMonitorManager(IEnumerable`1<IScaleMonitor> monitors, IEnumerable`1<IScaleMonitorProvider> monitorProviders);
    public sealed virtual void Register(IScaleMonitor monitor);
    public sealed virtual IEnumerable`1<IScaleMonitor> GetMonitors();
}
internal class Microsoft.Azure.WebJobs.Host.Scale.ScaleMonitorService : object {
    private Timer _timer;
    private IScaleStatusProvider _scaleStausProvider;
    private IScaleMetricsRepository _metricsRepository;
    private ILogger _logger;
    private IOptions`1<ScaleOptions> _scaleOptions;
    private IPrimaryHostStateProvider _primaryHostStateProvider;
    private IScaleMonitorManager _monitorManager;
    private ITargetScalerManager _targetScalerManager;
    private IConfiguration _configuration;
    private bool _disposed;
    public ScaleMonitorService(IScaleStatusProvider scaleStausProvider, IScaleMetricsRepository metricsRepository, IOptions`1<ScaleOptions> scaleOptions, IPrimaryHostStateProvider primaryHostStateProvider, IScaleMonitorManager monitorManager, ITargetScalerManager targetScalerManager, IConfiguration configuration, ILoggerFactory loggerFactory);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Scale.ScaleMonitorService/<OnTimer>d__13")]
protected virtual void OnTimer(object state);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Scale.ScaleMonitorService/<TakeMetricsSamplesAsync>d__15")]
private Task TakeMetricsSamplesAsync();
    private void SetTimerInterval(int dueTime);
    private void Dispose(bool disposing);
}
public class Microsoft.Azure.WebJobs.Host.Scale.ScaleOptions : object {
    private TimeSpan _scaleMetricsMaxAge;
    private TimeSpan _scaleMetricsSampleInterval;
    [CompilerGeneratedAttribute]
private bool <MetricsPurgeEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTargetScalingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRuntimeScalingEnabled>k__BackingField;
    public TimeSpan ScaleMetricsMaxAge { get; public set; }
    public TimeSpan ScaleMetricsSampleInterval { get; public set; }
    public bool MetricsPurgeEnabled { get; public set; }
    public bool IsTargetScalingEnabled { get; public set; }
    public bool IsRuntimeScalingEnabled { get; public set; }
    public TimeSpan get_ScaleMetricsMaxAge();
    public void set_ScaleMetricsMaxAge(TimeSpan value);
    public TimeSpan get_ScaleMetricsSampleInterval();
    public void set_ScaleMetricsSampleInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_MetricsPurgeEnabled();
    [CompilerGeneratedAttribute]
public void set_MetricsPurgeEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsTargetScalingEnabled();
    [CompilerGeneratedAttribute]
public void set_IsTargetScalingEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRuntimeScalingEnabled();
    [CompilerGeneratedAttribute]
public void set_IsRuntimeScalingEnabled(bool value);
    public sealed virtual string Format();
}
public class Microsoft.Azure.WebJobs.Host.Scale.ScaleStatus : object {
    [CompilerGeneratedAttribute]
private ScaleVote <Vote>k__BackingField;
    public ScaleVote Vote { get; public set; }
    [CompilerGeneratedAttribute]
public ScaleVote get_Vote();
    [CompilerGeneratedAttribute]
public void set_Vote(ScaleVote value);
}
public class Microsoft.Azure.WebJobs.Host.Scale.ScaleStatusContext : object {
    [CompilerGeneratedAttribute]
private int <WorkerCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ScaleMetrics> <Metrics>k__BackingField;
    public int WorkerCount { get; public set; }
    public IEnumerable`1<ScaleMetrics> Metrics { get; public set; }
    [CompilerGeneratedAttribute]
public int get_WorkerCount();
    [CompilerGeneratedAttribute]
public void set_WorkerCount(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ScaleMetrics> get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(IEnumerable`1<ScaleMetrics> value);
}
public class Microsoft.Azure.WebJobs.Host.Scale.ScaleStatusContext`1 : ScaleStatusContext {
    [CompilerGeneratedAttribute]
private IEnumerable`1<TMetrics> <Metrics>k__BackingField;
    public IEnumerable`1<TMetrics> Metrics { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<TMetrics> get_Metrics();
    [CompilerGeneratedAttribute]
public void set_Metrics(IEnumerable`1<TMetrics> value);
}
public enum Microsoft.Azure.WebJobs.Host.Scale.ScaleVote : Enum {
    public int value__;
    public static ScaleVote None;
    public static ScaleVote ScaleOut;
    public static ScaleVote ScaleIn;
}
public class Microsoft.Azure.WebJobs.Host.Scale.TargetScalerContext : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <InstanceConcurrency>k__BackingField;
    public Nullable`1<int> InstanceConcurrency { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_InstanceConcurrency();
    [CompilerGeneratedAttribute]
public void set_InstanceConcurrency(Nullable`1<int> value);
}
public class Microsoft.Azure.WebJobs.Host.Scale.TargetScalerDescriptor : object {
    [CompilerGeneratedAttribute]
private string <FunctionId>k__BackingField;
    public string FunctionId { get; }
    public TargetScalerDescriptor(string functionId);
    [CompilerGeneratedAttribute]
public string get_FunctionId();
}
internal class Microsoft.Azure.WebJobs.Host.Scale.TargetScalerManager : object {
    private List`1<ITargetScaler> _targetScalers;
    private object _syncRoot;
    public TargetScalerManager(IEnumerable`1<ITargetScaler> targetScalers, IEnumerable`1<ITargetScalerProvider> scalerProviders);
    public sealed virtual void Register(ITargetScaler targetScaler);
    public sealed virtual IEnumerable`1<ITargetScaler> GetTargetScalers();
}
public class Microsoft.Azure.WebJobs.Host.Scale.TargetScalerResult : object {
    [CompilerGeneratedAttribute]
private int <TargetWorkerCount>k__BackingField;
    public int TargetWorkerCount { get; public set; }
    [CompilerGeneratedAttribute]
public int get_TargetWorkerCount();
    [CompilerGeneratedAttribute]
public void set_TargetWorkerCount(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Azure.WebJobs.Host.Scale.ThreadPoolStarvationThrottleProvider : object {
    internal static string ThreadPoolStarvationThrottleName;
    private static int IntervalMS;
    private static double FailureThreshold;
    private ReadOnlyCollection`1<string> _exceededThrottles;
    private object _syncLock;
    private bool _disposedValue;
    [NullableAttribute("2")]
private Timer _timer;
    private int _invocations;
    private DateTime _lastCheck;
    public void OnTimer(object state);
    private void EnsureTimerStarted();
    public sealed virtual ConcurrencyThrottleStatus GetStatus(ILogger logger);
    internal void ResetInvocations();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public enum Microsoft.Azure.WebJobs.Host.Scale.ThrottleState : Enum {
    public int value__;
    public static ThrottleState Unknown;
    public static ThrottleState Enabled;
    public static ThrottleState Disabled;
}
public class Microsoft.Azure.WebJobs.Host.Scale.TriggerMetadata : object {
    private string _functionName;
    private string _type;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <Metadata>k__BackingField;
    public string FunctionName { get; }
    public string Type { get; }
    public IDictionary`2<string, object> Properties { get; }
    public JObject Metadata { get; }
    public TriggerMetadata(JObject metadata);
    public TriggerMetadata(JObject metadata, IDictionary`2<string, object> properties);
    public string get_FunctionName();
    public string get_Type();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public JObject get_Metadata();
}
[AttributeUsageAttribute("4")]
public class Microsoft.Azure.WebJobs.Host.SharedListenerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <SharedListenerId>k__BackingField;
    public string SharedListenerId { get; }
    public SharedListenerAttribute(string sharedListenerId);
    [CompilerGeneratedAttribute]
public string get_SharedListenerId();
}
internal class Microsoft.Azure.WebJobs.Host.SimpleTriggerArgumentBinding`2 : object {
    private ITriggerBindingStrategy`2<TMessage, TTriggerValue> _triggerBindingStrategy;
    private IConverterManager _converterManager;
    private FuncAsyncConverter`2<TMessage, string> _stringConverter;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    protected Dictionary`2<string, Type> Contract { get; protected set; }
    protected internal Type ElementType { get; protected internal set; }
    protected ITriggerBindingStrategy`2<TMessage, TTriggerValue> TriggerBindingStrategy { get; }
    private IReadOnlyDictionary`2<string, Type> Microsoft.Azure.WebJobs.Host.Triggers.ITriggerDataArgumentBinding<TTriggerValue>.BindingDataContract { get; }
    public Type ValueType { get; }
    public SimpleTriggerArgumentBinding`2(ITriggerBindingStrategy`2<TMessage, TTriggerValue> triggerBindingStrategy, IConverterManager converterManager, bool isSingleDispatch);
    [CompilerGeneratedAttribute]
protected Dictionary`2<string, Type> get_Contract();
    [CompilerGeneratedAttribute]
protected void set_Contract(Dictionary`2<string, Type> value);
    [CompilerGeneratedAttribute]
protected internal Type get_ElementType();
    [CompilerGeneratedAttribute]
protected internal void set_ElementType(Type value);
    protected ITriggerBindingStrategy`2<TMessage, TTriggerValue> get_TriggerBindingStrategy();
    private sealed virtual override IReadOnlyDictionary`2<string, Type> Microsoft.Azure.WebJobs.Host.Triggers.ITriggerDataArgumentBinding<TTriggerValue>.get_BindingDataContract();
    public sealed virtual Type get_ValueType();
    internal virtual Task`1<object> ConvertAsync(TMessage value, Dictionary`2<string, object> bindingData, ValueBindingContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.SimpleTriggerArgumentBinding`2/<ConvertToStringAsync>d__19")]
protected Task`1<string> ConvertToStringAsync(TMessage eventData);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.SimpleTriggerArgumentBinding`2/<BindAsync>d__20")]
public virtual Task`1<ITriggerData> BindAsync(TTriggerValue value, ValueBindingContext context);
    protected void AddToBindingContract(IBindingDataProvider provider);
    protected void AddToBindingData(IBindingDataProvider provider, Dictionary`2<string, object> bindingData, object obj);
}
internal class Microsoft.Azure.WebJobs.Host.SingletonLock : object {
    private string _lockId;
    private string _functionInstanceId;
    private SingletonAttribute _attribute;
    private SingletonManager _singletonManager;
    private RenewableLockHandle _lockHandle;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <AcquireStartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <AcquireEndTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ReleaseTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHeld>k__BackingField;
    public string Id { get; }
    public string FunctionId { get; }
    public Nullable`1<DateTime> AcquireStartTime { get; internal set; }
    public Nullable`1<DateTime> AcquireEndTime { get; internal set; }
    public Nullable`1<DateTime> ReleaseTime { get; internal set; }
    public bool IsHeld { get; private set; }
    public SingletonLock(string id, string functionInstanceId, SingletonAttribute attribute, SingletonManager manager);
    public string get_Id();
    public string get_FunctionId();
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_AcquireStartTime();
    [CompilerGeneratedAttribute]
internal void set_AcquireStartTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_AcquireEndTime();
    [CompilerGeneratedAttribute]
internal void set_AcquireEndTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ReleaseTime();
    [CompilerGeneratedAttribute]
internal void set_ReleaseTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public bool get_IsHeld();
    [CompilerGeneratedAttribute]
private void set_IsHeld(bool value);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.SingletonLock/<AcquireAsync>d__26")]
public Task AcquireAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.SingletonLock/<ReleaseAsync>d__27")]
public Task ReleaseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.SingletonLock/<GetOwnerAsync>d__28")]
public Task`1<string> GetOwnerAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.SingletonManager : object {
    private INameResolver _nameResolver;
    private SingletonOptions _options;
    private ILogger _logger;
    private ILoggerFactory _loggerFactory;
    private IDistributedLockManager _lockManager;
    private IWebJobsExceptionHandler _exceptionHandler;
    private IHostIdProvider _hostIdProvider;
    private string _hostId;
    private TimeSpan _minimumLeaseRenewalInterval;
    internal TimeSpan MinimumLeaseRenewalInterval { get; internal set; }
    internal SingletonOptions Options { get; }
    internal string HostId { get; }
    public SingletonManager(IDistributedLockManager lockManager, IOptions`1<SingletonOptions> options, IWebJobsExceptionHandler exceptionHandler, ILoggerFactory loggerFactory, IHostIdProvider hostIdProvider, INameResolver nameResolver);
    internal TimeSpan get_MinimumLeaseRenewalInterval();
    internal void set_MinimumLeaseRenewalInterval(TimeSpan value);
    internal virtual SingletonOptions get_Options();
    internal string get_HostId();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.SingletonManager/<LockAsync>d__18")]
public virtual Task`1<RenewableLockHandle> LockAsync(string lockId, string functionInstanceId, SingletonAttribute attribute, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.SingletonManager/<TryLockAsync>d__19")]
public virtual Task`1<RenewableLockHandle> TryLockAsync(string lockId, string functionInstanceId, SingletonAttribute attribute, CancellationToken cancellationToken, bool retry);
    private ITaskSeriesTimer CreateLeaseRenewalTimer(TimeSpan leasePeriod, IDistributedLock lockHandle);
    internal static TimeSpan GetLockPeriod(SingletonAttribute attribute, SingletonOptions config);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.SingletonManager/<ReleaseLockAsync>d__22")]
public virtual Task ReleaseLockAsync(RenewableLockHandle handle, CancellationToken cancellationToken);
    public string FormatLockId(FunctionDescriptor method, SingletonScope scope, string scopeId);
    public static string FormatLockId(FunctionDescriptor descr, SingletonScope scope, string hostId, string scopeId);
    public string GetBoundScopeId(string scopeId, IReadOnlyDictionary`2<string, object> bindingData);
    public static SingletonAttribute GetFunctionSingletonOrNull(FunctionDescriptor descriptor, bool isTriggered);
    public sealed virtual IListener CreateHostSingletonListener(IListener innerListener, string scopeId);
    public static SingletonAttribute GetListenerSingletonOrNull(Type listenerType, FunctionDescriptor method);
    internal static TimeSpan GetLockAcquisitionTimeout(SingletonAttribute attribute, SingletonOptions config);
    internal static void ValidateSingletonAttribute(SingletonAttribute attribute, SingletonMode mode);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.SingletonManager/<GetLockOwnerAsync>d__31")]
public virtual Task`1<string> GetLockOwnerAsync(SingletonAttribute attribute, string lockId, CancellationToken cancellationToken);
}
public class Microsoft.Azure.WebJobs.Host.SingletonOptions : object {
    private static TimeSpan MinimumLeasePeriod;
    private static TimeSpan MaximumLeasePeriod;
    private TimeSpan _lockPeriod;
    private TimeSpan _listenerLockPeriod;
    private TimeSpan _lockAcquisitionTimeout;
    private TimeSpan _lockAcquisitionPollingInterval;
    private TimeSpan _listenerLockRecoveryPollingInterval;
    public TimeSpan LockPeriod { get; public set; }
    public TimeSpan ListenerLockPeriod { get; public set; }
    public TimeSpan LockAcquisitionTimeout { get; public set; }
    public TimeSpan LockAcquisitionPollingInterval { get; public set; }
    public TimeSpan ListenerLockRecoveryPollingInterval { get; public set; }
    private static SingletonOptions();
    public TimeSpan get_LockPeriod();
    public void set_LockPeriod(TimeSpan value);
    public TimeSpan get_ListenerLockPeriod();
    public void set_ListenerLockPeriod(TimeSpan value);
    public TimeSpan get_LockAcquisitionTimeout();
    public void set_LockAcquisitionTimeout(TimeSpan value);
    public TimeSpan get_LockAcquisitionPollingInterval();
    public void set_LockAcquisitionPollingInterval(TimeSpan value);
    public TimeSpan get_ListenerLockRecoveryPollingInterval();
    public void set_ListenerLockRecoveryPollingInterval(TimeSpan value);
    private static void ValidateLockPeriod(TimeSpan value);
    public sealed virtual string Format();
}
internal class Microsoft.Azure.WebJobs.Host.SingletonValueProvider : object {
    public static string SingletonParameterName;
    private SingletonLock _singletonLock;
    private SingletonWatcher _watcher;
    private string _scopeId;
    public Type Type { get; }
    public IWatcher Watcher { get; }
    public SingletonValueProvider(FunctionDescriptor method, string scopeId, string functionInstanceId, SingletonAttribute attribute, SingletonManager singletonManager);
    public sealed virtual Type get_Type();
    public sealed virtual IWatcher get_Watcher();
    public sealed virtual Task`1<object> GetValueAsync();
    public sealed virtual string ToInvokeString();
}
internal class Microsoft.Azure.WebJobs.Host.StructPropertyAccessorFactory`1 : object {
    private static StructPropertyAccessorFactory`1<TReflected> Singleton;
    public static StructPropertyAccessorFactory`1<TReflected> Instance { get; }
    private static StructPropertyAccessorFactory`1();
    public static StructPropertyAccessorFactory`1<TReflected> get_Instance();
    public sealed virtual IPropertyGetter`2<TReflected, TProperty> CreateGetter(PropertyInfo property);
    public sealed virtual IPropertySetter`2<TReflected, TProperty> CreateSetter(PropertyInfo property);
}
internal class Microsoft.Azure.WebJobs.Host.StructPropertyGetter`2 : object {
    private PropertyGetterDelegate<TReflected, TProperty> _getter;
    private StructPropertyGetter`2(PropertyGetterDelegate<TReflected, TProperty> getter);
    public sealed virtual TProperty GetValue(TReflected instance);
    public static StructPropertyGetter`2<TReflected, TProperty> Create(PropertyInfo property);
}
internal class Microsoft.Azure.WebJobs.Host.StructPropertySetter`2 : object {
    private PropertySetterDelegate<TReflected, TProperty> _setter;
    private StructPropertySetter`2(PropertySetterDelegate<TReflected, TProperty> setter);
    public sealed virtual void SetValue(TReflected& instance, TProperty value);
    public static StructPropertySetter`2<TReflected, TProperty> Create(PropertyInfo property);
}
[AttributeUsageAttribute("4")]
public class Microsoft.Azure.WebJobs.Host.SupportsRetryAttribute : Attribute {
}
public class Microsoft.Azure.WebJobs.Host.Timers.DefaultWebJobsExceptionHandlerFactory : object {
    public sealed virtual IWebJobsExceptionHandler Create(IHost jobHost);
}
internal class Microsoft.Azure.WebJobs.Host.Timers.FixedDelayStrategy : object {
    private TimeSpan _delayInterval;
    public FixedDelayStrategy(TimeSpan delayInterval);
    public sealed virtual TimeSpan GetNextDelay(bool executionSucceeded);
    public static ITaskSeriesTimer CreateTimer(IRecurrentCommand command, TimeSpan initialInterval, TimeSpan delayInterval, IWebJobsExceptionHandler exceptionHandler);
}
internal interface Microsoft.Azure.WebJobs.Host.Timers.IDelayStrategy {
    public abstract virtual TimeSpan GetNextDelay(bool executionSucceeded);
}
internal interface Microsoft.Azure.WebJobs.Host.Timers.IRecurrentCommand {
    public abstract virtual Task`1<bool> TryExecuteAsync(CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Host.Timers.ITaskSeriesCommand {
    public abstract virtual Task`1<TaskSeriesCommandResult> ExecuteAsync(CancellationToken cancellationToken);
}
internal interface Microsoft.Azure.WebJobs.Host.Timers.ITaskSeriesTimer {
    public abstract virtual void Start();
    public abstract virtual Task StopAsync(CancellationToken cancellationToken);
    public abstract virtual void Cancel();
}
public interface Microsoft.Azure.WebJobs.Host.Timers.IWebJobsExceptionHandler {
    public abstract virtual Task OnTimeoutExceptionAsync(ExceptionDispatchInfo exceptionInfo, TimeSpan timeoutGracePeriod);
    public abstract virtual Task OnUnhandledExceptionAsync(ExceptionDispatchInfo exceptionInfo);
}
public interface Microsoft.Azure.WebJobs.Host.Timers.IWebJobsExceptionHandlerFactory {
    public abstract virtual IWebJobsExceptionHandler Create(IHost jobHost);
}
internal class Microsoft.Azure.WebJobs.Host.Timers.LinearSpeedupStrategy : object {
    private TimeSpan _normalInterval;
    private TimeSpan _minimumInterval;
    private int _failureSpeedupDivisor;
    private TimeSpan _currentInterval;
    public LinearSpeedupStrategy(TimeSpan normalInterval, TimeSpan minimumInterval);
    public LinearSpeedupStrategy(TimeSpan normalInterval, TimeSpan minimumInterval, int failureSpeedupDivisor);
    public sealed virtual TimeSpan GetNextDelay(bool executionSucceeded);
    private static TimeSpan Max(TimeSpan x, TimeSpan y);
    public static ITaskSeriesTimer CreateTimer(IRecurrentCommand command, TimeSpan normalInterval, TimeSpan minimumInterval, IWebJobsExceptionHandler exceptionHandler);
}
internal class Microsoft.Azure.WebJobs.Host.Timers.NullRecurrentCommand : object {
    public sealed virtual Task`1<bool> TryExecuteAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Host.Timers.RandomExtensions : object {
    [ExtensionAttribute]
public static double Next(Random random, double minValue, double maxValue);
}
internal class Microsoft.Azure.WebJobs.Host.Timers.RandomizedExponentialBackoffStrategy : object {
    public static double RandomizationFactor;
    private TimeSpan _minimumInterval;
    private TimeSpan _maximumInterval;
    private TimeSpan _deltaBackoff;
    private TimeSpan _currentInterval;
    private UInt32 _backoffExponent;
    private Random _random;
    public RandomizedExponentialBackoffStrategy(TimeSpan minimumInterval, TimeSpan maximumInterval);
    public RandomizedExponentialBackoffStrategy(TimeSpan minimumInterval, TimeSpan maximumInterval, TimeSpan deltaBackoff);
    public static void ValidateIntervals(TimeSpan minimumInterval, TimeSpan maximumInterval);
    public sealed virtual TimeSpan GetNextDelay(bool executionSucceeded);
}
internal class Microsoft.Azure.WebJobs.Host.Timers.RecurrentTaskSeriesCommand : object {
    private IRecurrentCommand _innerCommand;
    private IDelayStrategy _delayStrategy;
    public RecurrentTaskSeriesCommand(IRecurrentCommand innerCommand, IDelayStrategy delayStrategy);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Timers.RecurrentTaskSeriesCommand/<ExecuteAsync>d__3")]
public sealed virtual Task`1<TaskSeriesCommandResult> ExecuteAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Host.Timers.TaskSeriesCommandResult : ValueType {
    private Task _wait;
    public Task Wait { get; }
    public TaskSeriesCommandResult(Task wait);
    public Task get_Wait();
}
internal class Microsoft.Azure.WebJobs.Host.Timers.TaskSeriesTimer : object {
    private ITaskSeriesCommand _command;
    private IWebJobsExceptionHandler _exceptionHandler;
    private Task _initialWait;
    private CancellationTokenSource _cancellationTokenSource;
    private bool _started;
    private bool _stopped;
    private Task _run;
    private bool _disposed;
    public TaskSeriesTimer(ITaskSeriesCommand command, IWebJobsExceptionHandler exceptionHandler, Task initialWait);
    public sealed virtual void Start();
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Timers.TaskSeriesTimer/<StopAsyncCore>d__11")]
private Task StopAsyncCore(CancellationToken cancellationToken);
    public sealed virtual void Cancel();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Timers.TaskSeriesTimer/<RunAsync>d__14")]
private Task RunAsync(CancellationToken cancellationToken);
    private void ThrowIfDisposed();
}
public class Microsoft.Azure.WebJobs.Host.Timers.WebJobsExceptionHandler : object {
    private IHost _host;
    public WebJobsExceptionHandler(IHost host);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Timers.WebJobsExceptionHandler/<OnTimeoutExceptionAsync>d__2")]
public sealed virtual Task OnTimeoutExceptionAsync(ExceptionDispatchInfo exceptionInfo, TimeSpan timeoutGracePeriod);
    public sealed virtual Task OnUnhandledExceptionAsync(ExceptionDispatchInfo exceptionInfo);
}
[ObsoleteAttribute("Will be removed in an upcoming version. Use Microsoft.Extensions.Logging.ILogger instead.")]
public class Microsoft.Azure.WebJobs.Host.TraceEvent : object {
    private IDictionary`2<string, object> _properties;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private TraceLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public DateTime Timestamp { get; public set; }
    public TraceLevel Level { get; public set; }
    public string Source { get; public set; }
    public string Message { get; public set; }
    public Exception Exception { get; public set; }
    public IDictionary`2<string, object> Properties { get; }
    public TraceEvent(TraceLevel level, string message, string source, Exception exception);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public TraceLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(TraceLevel value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    public IDictionary`2<string, object> get_Properties();
    public virtual string ToString();
}
internal static class Microsoft.Azure.WebJobs.Host.TraceSource : object {
    private static string SdkPrefix;
    public static string Indexing;
    public static string Host;
    public static string Execution;
}
[ObsoleteAttribute("Will be removed in an upcoming version. Use Microsoft.Extensions.Logging.ILogger instead.")]
public abstract class Microsoft.Azure.WebJobs.Host.TraceWriter : object {
    [CompilerGeneratedAttribute]
private TraceLevel <Level>k__BackingField;
    public TraceLevel Level { get; public set; }
    protected TraceWriter(TraceLevel level);
    [CompilerGeneratedAttribute]
public TraceLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(TraceLevel value);
    public abstract virtual void Trace(TraceEvent traceEvent);
    public void Verbose(string message, string source);
    public void Info(string message, string source);
    public void Warning(string message, string source);
    public void Error(string message, Exception ex, string source);
    public virtual void Flush();
}
internal class Microsoft.Azure.WebJobs.Host.Triggers.CompositeTriggerBindingProvider : object {
    private IEnumerable`1<ITriggerBindingProvider> _providers;
    public CompositeTriggerBindingProvider(IEnumerable`1<ITriggerBindingProvider> providers);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Triggers.CompositeTriggerBindingProvider/<TryCreateAsync>d__2")]
public sealed virtual Task`1<ITriggerBinding> TryCreateAsync(TriggerBindingProviderContext context);
}
internal class Microsoft.Azure.WebJobs.Host.Triggers.CustomTriggerArgumentBinding`2 : SimpleTriggerArgumentBinding`2<TMessage, TTriggerValue> {
    private IBindingDataProvider _bindingDataProvider;
    private FuncAsyncConverter _converter;
    public CustomTriggerArgumentBinding`2(ITriggerBindingStrategy`2<TMessage, TTriggerValue> bindingStrategy, IConverterManager converterManager, FuncAsyncConverter converter, Type userType);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Triggers.CustomTriggerArgumentBinding`2/<ConvertAsync>d__3")]
internal virtual Task`1<object> ConvertAsync(TMessage value, Dictionary`2<string, object> bindingData, ValueBindingContext context);
}
public interface Microsoft.Azure.WebJobs.Host.Triggers.ITriggerBinding {
    public Type TriggerValueType { get; }
    public IReadOnlyDictionary`2<string, Type> BindingDataContract { get; }
    public abstract virtual Type get_TriggerValueType();
    public abstract virtual IReadOnlyDictionary`2<string, Type> get_BindingDataContract();
    public abstract virtual Task`1<ITriggerData> BindAsync(object value, ValueBindingContext context);
    public abstract virtual Task`1<IListener> CreateListenerAsync(ListenerFactoryContext context);
    public abstract virtual ParameterDescriptor ToParameterDescriptor();
}
public interface Microsoft.Azure.WebJobs.Host.Triggers.ITriggerBindingProvider {
    public abstract virtual Task`1<ITriggerBinding> TryCreateAsync(TriggerBindingProviderContext context);
}
[ObsoleteAttribute("Not ready for public consumption.")]
public interface Microsoft.Azure.WebJobs.Host.Triggers.ITriggerBindingStrategy`2 {
    public abstract virtual TTriggerValue ConvertFromString(string message);
    public abstract virtual Dictionary`2<string, Type> GetBindingContract(bool isSingleDispatch);
    public abstract virtual Dictionary`2<string, object> GetBindingData(TTriggerValue value);
    public abstract virtual TMessage BindSingle(TTriggerValue value, ValueBindingContext context);
    public abstract virtual TMessage[] BindMultiple(TTriggerValue value, ValueBindingContext context);
}
public interface Microsoft.Azure.WebJobs.Host.Triggers.ITriggerData {
    public IValueProvider ValueProvider { get; }
    public IReadOnlyDictionary`2<string, object> BindingData { get; }
    public abstract virtual IValueProvider get_ValueProvider();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_BindingData();
}
internal interface Microsoft.Azure.WebJobs.Host.Triggers.ITriggerDataArgumentBinding`1 {
    public Type ValueType { get; }
    public IReadOnlyDictionary`2<string, Type> BindingDataContract { get; }
    public abstract virtual Type get_ValueType();
    public abstract virtual IReadOnlyDictionary`2<string, Type> get_BindingDataContract();
    public abstract virtual Task`1<ITriggerData> BindAsync(TTriggerValue value, ValueBindingContext context);
}
internal interface Microsoft.Azure.WebJobs.Host.Triggers.ITriggeredFunctionBinding`1 {
    public abstract virtual Task`1<IReadOnlyDictionary`2<string, IValueProvider>> BindAsync(ValueBindingContext context, TTriggerValue value);
}
internal interface Microsoft.Azure.WebJobs.Host.Triggers.ITriggeredFunctionInstanceFactory`1 {
    public abstract virtual IFunctionInstance Create(FunctionInstanceFactoryContext`1<TTriggerValue> context);
}
internal class Microsoft.Azure.WebJobs.Host.Triggers.PocoTriggerArgumentBinding`2 : StringTriggerArgumentBinding`2<TMessage, TTriggerValue> {
    private IBindingDataProvider _bindingDataProvider;
    public PocoTriggerArgumentBinding`2(ITriggerBindingStrategy`2<TMessage, TTriggerValue> bindingStrategy, IConverterManager converterManager, Type elementType);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Triggers.PocoTriggerArgumentBinding`2/<ConvertAsync>d__2")]
internal virtual Task`1<object> ConvertAsync(TMessage value, Dictionary`2<string, object> bindingData, ValueBindingContext context);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Triggers.PocoTriggerArgumentBinding`2/<ReadObjectAsync>d__3")]
private Task`1<object> ReadObjectAsync(TMessage value);
}
internal class Microsoft.Azure.WebJobs.Host.Triggers.StrategyTriggerBinding`2 : object {
    private ITriggerBindingStrategy`2<TMessage, TTriggerValue> _triggerBindingStrategy;
    private ITriggerDataArgumentBinding`1<TTriggerValue> _argumentBinding;
    private Func`3<ListenerFactoryContext, bool, Task`1<IListener>> _createListener;
    private ParameterDescriptor _parameterDescriptor;
    private bool _singleDispatch;
    public IReadOnlyDictionary`2<string, Type> BindingDataContract { get; }
    public Type TriggerValueType { get; }
    public StrategyTriggerBinding`2(ITriggerBindingStrategy`2<TMessage, TTriggerValue> triggerBindingStrategy, ITriggerDataArgumentBinding`1<TTriggerValue> argumentBinding, Func`3<ListenerFactoryContext, bool, Task`1<IListener>> createListener, ParameterDescriptor parameterDescriptor, bool singleDispatch);
    public sealed virtual IReadOnlyDictionary`2<string, Type> get_BindingDataContract();
    public sealed virtual Type get_TriggerValueType();
    public sealed virtual Task`1<ITriggerData> BindAsync(object value, ValueBindingContext context);
    public sealed virtual Task`1<IListener> CreateListenerAsync(ListenerFactoryContext context);
    public sealed virtual ParameterDescriptor ToParameterDescriptor();
}
internal class Microsoft.Azure.WebJobs.Host.Triggers.StringTriggerArgumentBinding`2 : SimpleTriggerArgumentBinding`2<TMessage, TTriggerValue> {
    public StringTriggerArgumentBinding`2(ITriggerBindingStrategy`2<TMessage, TTriggerValue> bindingStrategy, IConverterManager converterManager);
    internal virtual Task`1<object> ConvertAsync(TMessage value, Dictionary`2<string, object> bindingData, ValueBindingContext context);
}
public class Microsoft.Azure.WebJobs.Host.Triggers.TriggerBindingProviderContext : object {
    private ParameterInfo _parameter;
    private CancellationToken _cancellationToken;
    public ParameterInfo Parameter { get; }
    public CancellationToken CancellationToken { get; }
    public TriggerBindingProviderContext(ParameterInfo parameter, CancellationToken cancellationToken);
    public ParameterInfo get_Parameter();
    public CancellationToken get_CancellationToken();
}
internal class Microsoft.Azure.WebJobs.Host.Triggers.TriggerBindingSource`1 : object {
    private ITriggeredFunctionBinding`1<TTriggerValue> _functionBinding;
    private TTriggerValue _value;
    public TriggerBindingSource`1(ITriggeredFunctionBinding`1<TTriggerValue> functionBinding, TTriggerValue value);
    public sealed virtual Task`1<IReadOnlyDictionary`2<string, IValueProvider>> BindAsync(ValueBindingContext context);
}
public class Microsoft.Azure.WebJobs.Host.Triggers.TriggerData : object {
    private IValueProvider _valueProvider;
    private IReadOnlyDictionary`2<string, object> _bindingData;
    [CompilerGeneratedAttribute]
private IValueBinder <ReturnValueProvider>k__BackingField;
    public IValueProvider ValueProvider { get; }
    public IReadOnlyDictionary`2<string, object> BindingData { get; }
    public IValueBinder ReturnValueProvider { get; public set; }
    public TriggerData(IReadOnlyDictionary`2<string, object> bindingData);
    public TriggerData(IValueProvider valueProvider, IReadOnlyDictionary`2<string, object> bindingData);
    public sealed virtual IValueProvider get_ValueProvider();
    public sealed virtual IReadOnlyDictionary`2<string, object> get_BindingData();
    [CompilerGeneratedAttribute]
public IValueBinder get_ReturnValueProvider();
    [CompilerGeneratedAttribute]
public void set_ReturnValueProvider(IValueBinder value);
}
internal class Microsoft.Azure.WebJobs.Host.Triggers.TriggeredFunctionBinding`1 : object {
    private FunctionDescriptor _descriptor;
    private string _triggerParameterName;
    private ITriggerBinding _triggerBinding;
    private IReadOnlyDictionary`2<string, IBinding> _nonTriggerBindings;
    private SingletonManager _singletonManager;
    public TriggeredFunctionBinding`1(FunctionDescriptor descriptor, string triggerParameterName, ITriggerBinding triggerBinding, IReadOnlyDictionary`2<string, IBinding> nonTriggerBindings, SingletonManager singletonManager);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Triggers.TriggeredFunctionBinding`1/<BindAsync>d__6")]
public sealed virtual Task`1<IReadOnlyDictionary`2<string, IValueProvider>> BindAsync(ValueBindingContext context, TTriggerValue value);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Triggers.TriggeredFunctionBinding`1/<BindAsync>d__7")]
public sealed virtual Task`1<IReadOnlyDictionary`2<string, IValueProvider>> BindAsync(ValueBindingContext context, IDictionary`2<string, object> parameters);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Host.Triggers.TriggeredFunctionBinding`1/<BindCoreAsync>d__8")]
private Task`1<IReadOnlyDictionary`2<string, IValueProvider>> BindCoreAsync(ValueBindingContext context, object value, IDictionary`2<string, object> parameters);
}
internal class Microsoft.Azure.WebJobs.Host.Triggers.TriggeredFunctionInstanceFactory`1 : object {
    private ITriggeredFunctionBinding`1<TTriggerValue> _binding;
    private IFunctionInvokerEx _invoker;
    private FunctionDescriptor _descriptor;
    private IInstanceServicesProviderFactory _instanceServicesProviderFactory;
    public TriggeredFunctionInstanceFactory`1(ITriggeredFunctionBinding`1<TTriggerValue> binding, IFunctionInvokerEx invoker, FunctionDescriptor descriptor, IInstanceServicesProviderFactory instanceServicesProviderFactory);
    public sealed virtual IFunctionInstance Create(FunctionInstanceFactoryContext`1<TTriggerValue> context);
    public sealed virtual IFunctionInstance Create(FunctionInstanceFactoryContext context);
    private IFunctionInvokerEx CreateInvoker(FunctionInstanceFactoryContext context);
}
internal static class Microsoft.Azure.WebJobs.Host.TypeUtility : object {
    internal static string GetFriendlyName(Type type);
    internal static bool IsNullable(Type type);
    internal static bool IsJObject(Type type);
    internal static Type UnwrapTaskType(Type type);
    internal static T GetHierarchicalAttributeOrNull(ParameterInfo parameter);
    internal static Attribute GetHierarchicalAttributeOrNull(ParameterInfo parameter, Type attributeType);
    internal static T GetHierarchicalAttributeOrNull(MethodInfo method);
    internal static Attribute GetHierarchicalAttributeOrNull(MethodInfo method, Type type);
    internal static TAttribute GetResolvedAttribute(ParameterInfo parameter);
    public static bool IsAsync(MethodInfo methodInfo);
    public static bool IsAsyncVoid(MethodInfo methodInfo);
    public static bool TryGetReturnType(MethodInfo methodInfo, Type& type);
}
internal class Microsoft.Azure.WebJobs.Host.WebJobsBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public WebJobsBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
internal static class Microsoft.Azure.WebJobs.Host.WebSitesKnownKeyNames : object {
    public static string JobDataPath;
}
internal class Microsoft.Azure.WebJobs.Hosting.DefaultStartupTypeLocator : object {
    private Assembly _entryAssembly;
    private Lazy`1<Type[]> _startupTypes;
    internal DefaultStartupTypeLocator(Assembly entryAssembly);
    public sealed virtual Type[] GetStartupTypes();
    private Type[] GetTypes();
}
public interface Microsoft.Azure.WebJobs.Hosting.IOptionsFormatter {
    public abstract virtual string Format();
}
public interface Microsoft.Azure.WebJobs.Hosting.IOptionsFormatter`1 {
    public abstract virtual string Format(TOptions options);
}
internal interface Microsoft.Azure.WebJobs.Hosting.IOptionsLoggingSource {
    public ISourceBlock`1<string> LogStream { get; }
    public abstract virtual ISourceBlock`1<string> get_LogStream();
    public abstract virtual void LogOptions(string optionLog);
}
public interface Microsoft.Azure.WebJobs.Hosting.IPrimaryHostStateProvider {
    public bool IsPrimary { get; public set; }
    public abstract virtual bool get_IsPrimary();
    public abstract virtual void set_IsPrimary(bool value);
}
public interface Microsoft.Azure.WebJobs.Hosting.IWebJobsConfigurationBuilder {
    public IConfigurationBuilder ConfigurationBuilder { get; }
    public abstract virtual IConfigurationBuilder get_ConfigurationBuilder();
}
public interface Microsoft.Azure.WebJobs.Hosting.IWebJobsConfigurationStartup {
    public abstract virtual void Configure(WebJobsBuilderContext context, IWebJobsConfigurationBuilder builder);
}
public interface Microsoft.Azure.WebJobs.Hosting.IWebJobsStartup {
    public abstract virtual void Configure(IWebJobsBuilder builder);
}
public interface Microsoft.Azure.WebJobs.Hosting.IWebJobsStartup2 {
    public abstract virtual void Configure(WebJobsBuilderContext context, IWebJobsBuilder builder);
}
public interface Microsoft.Azure.WebJobs.Hosting.IWebJobsStartupTypeLocator {
    public abstract virtual Type[] GetStartupTypes();
}
public class Microsoft.Azure.WebJobs.Hosting.JobHostService : object {
    private ILogger`1<JobHostService> _logger;
    private IJobHost _jobHost;
    public JobHostService(IJobHost jobhost, ILogger`1<JobHostService> logger);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Azure.WebJobs.Hosting.LoggerFilterOptionsFormatter : object {
    public sealed virtual string Format(LoggerFilterOptions options);
}
internal class Microsoft.Azure.WebJobs.Hosting.OptionsLoggingService : object {
    private ILogger`1<OptionsLoggingService> _logger;
    private IOptionsLoggingSource _source;
    private CancellationTokenSource _cts;
    private Task _processingTask;
    public OptionsLoggingService(IOptionsLoggingSource source, ILogger`1<OptionsLoggingService> logger);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Hosting.OptionsLoggingService/<StopAsync>d__6")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Hosting.OptionsLoggingService/<ProcessLogs>d__7")]
private Task ProcessLogs();
}
internal class Microsoft.Azure.WebJobs.Hosting.OptionsLoggingSource : object {
    private BufferBlock`1<string> _buffer;
    public ISourceBlock`1<string> LogStream { get; }
    public sealed virtual ISourceBlock`1<string> get_LogStream();
    public sealed virtual void LogOptions(string optionLog);
}
internal class Microsoft.Azure.WebJobs.Hosting.PrimaryHostCoordinator : object {
    internal static string LockBlobName;
    private Timer _timer;
    private TimeSpan _leaseTimeout;
    private IHostIdProvider _hostIdProvider;
    private TimeSpan _renewalInterval;
    private TimeSpan _leaseRetryInterval;
    private ILogger _logger;
    private IPrimaryHostStateProvider _primaryHostStateProvider;
    private string _websiteInstanceId;
    private IOptions`1<PrimaryHostCoordinatorOptions> _options;
    private IDistributedLockManager _lockManager;
    private IDistributedLock _lockHandle;
    private bool _disposed;
    private bool _processingLease;
    private DateTime _lastRenewal;
    private TimeSpan _lastRenewalLatency;
    private string _hostId;
    [CompilerGeneratedAttribute]
private bool <LeaseTimerRunning>k__BackingField;
    internal bool LeaseTimerRunning { get; private set; }
    private bool HasLease { get; }
    internal IDistributedLock LockHandle { get; internal set; }
    public PrimaryHostCoordinator(IOptions`1<PrimaryHostCoordinatorOptions> coordinatorOptions, IHostIdProvider hostIdProvider, IDistributedLockManager lockManager, IPrimaryHostStateProvider primaryHostStateProvider, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
internal bool get_LeaseTimerRunning();
    [CompilerGeneratedAttribute]
private void set_LeaseTimerRunning(bool value);
    private bool get_HasLease();
    internal IDistributedLock get_LockHandle();
    internal void set_LockHandle(IDistributedLock value);
    private void ProcessLeaseTimerTick(object state);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Hosting.PrimaryHostCoordinator/<AcquireOrRenewLeaseAsync>d__28")]
private Task AcquireOrRenewLeaseAsync();
    internal static string GetBlobName(string hostId);
    private void ProcessLeaseError(string reason);
    private void ResetLease();
    private void SetTimerInterval(TimeSpan interval, Nullable`1<TimeSpan> dueTimeout);
    private void TryReleaseLeaseIfOwned();
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void <ProcessLeaseTimerTick>b__27_0(Task t);
    [CompilerGeneratedAttribute]
private bool <ProcessLeaseTimerTick>b__27_1(Exception e);
    [CompilerGeneratedAttribute]
private Task <TryReleaseLeaseIfOwned>b__33_0();
}
public class Microsoft.Azure.WebJobs.Hosting.PrimaryHostCoordinatorOptions : object {
    private TimeSpan _leaseTimeout;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RenewalInterval>k__BackingField;
    public bool Enabled { get; public set; }
    public TimeSpan LeaseTimeout { get; public set; }
    public Nullable`1<TimeSpan> RenewalInterval { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    public TimeSpan get_LeaseTimeout();
    public void set_LeaseTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_RenewalInterval();
    [CompilerGeneratedAttribute]
public void set_RenewalInterval(Nullable`1<TimeSpan> value);
}
internal class Microsoft.Azure.WebJobs.Hosting.PrimaryHostStateProvider : object {
    [CompilerGeneratedAttribute]
private bool <IsPrimary>k__BackingField;
    public bool IsPrimary { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPrimary();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsPrimary(bool value);
}
internal class Microsoft.Azure.WebJobs.Hosting.WebJobsConfigurationBuilder : object {
    [CompilerGeneratedAttribute]
private IConfigurationBuilder <ConfigurationBuilder>k__BackingField;
    public IConfigurationBuilder ConfigurationBuilder { get; private set; }
    public WebJobsConfigurationBuilder(IConfigurationBuilder builder);
    [CompilerGeneratedAttribute]
public sealed virtual IConfigurationBuilder get_ConfigurationBuilder();
    [CompilerGeneratedAttribute]
private void set_ConfigurationBuilder(IConfigurationBuilder value);
}
internal class Microsoft.Azure.WebJobs.Hosting.WebJobsOptionsFactory`1 : object {
    private OptionsFactory`1<TOptions> _innerFactory;
    private IOptionsLoggingSource _logSource;
    private IOptionsFormatter`1<TOptions> _optionsFormatter;
    public WebJobsOptionsFactory`1(OptionsFactory`1<TOptions> innerFactory, IOptionsLoggingSource logSource);
    public WebJobsOptionsFactory`1(OptionsFactory`1<TOptions> innerFactory, IOptionsLoggingSource logSource, IOptionsFormatter`1<TOptions> optionsFormatter);
    public sealed virtual TOptions Create(string name);
}
[AttributeUsageAttribute("1")]
public class Microsoft.Azure.WebJobs.Hosting.WebJobsStartupAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <WebJobsStartupType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Type WebJobsStartupType { get; }
    public string Name { get; }
    public WebJobsStartupAttribute(Type startupType, string name);
    [CompilerGeneratedAttribute]
public Type get_WebJobsStartupType();
    [CompilerGeneratedAttribute]
public string get_Name();
}
public interface Microsoft.Azure.WebJobs.IAsyncConverter`2 {
    public abstract virtual Task`1<TOutput> ConvertAsync(TInput input, CancellationToken cancellationToken);
}
public interface Microsoft.Azure.WebJobs.ICacheAwareReadObject {
    public bool IsCacheHit { get; }
    public FunctionDataCacheKey CacheKey { get; }
    public SharedMemoryMetadata CacheObject { get; }
    public Stream BlobStream { get; }
    public abstract virtual bool get_IsCacheHit();
    public abstract virtual FunctionDataCacheKey get_CacheKey();
    public abstract virtual SharedMemoryMetadata get_CacheObject();
    public abstract virtual Stream get_BlobStream();
    public abstract virtual bool TryPutToCache(SharedMemoryMetadata cacheObject, bool isIncrementActiveReference);
}
public interface Microsoft.Azure.WebJobs.ICacheAwareWriteObject {
    public Stream BlobStream { get; }
    public abstract virtual Stream get_BlobStream();
    public abstract virtual Task`1<bool> TryPutToCacheAsync(bool isDeleteOnFailure);
}
public interface Microsoft.Azure.WebJobs.IConverter`2 {
    public abstract virtual TOutput Convert(TInput input);
}
public interface Microsoft.Azure.WebJobs.IConverterManager {
    public abstract virtual FuncAsyncConverter GetConverter(Type typeSource, Type typeDest);
}
[ExtensionAttribute]
public static class Microsoft.Azure.WebJobs.IConverterManagerExtensions : object {
    [ExtensionAttribute]
public static FuncAsyncConverter`2<TSource, TDestination> GetConverter(IConverterManager converterManager);
    [ExtensionAttribute]
internal static FuncAsyncConverter`2<TSource, TDestination> AsTyped(FuncAsyncConverter func);
    [ExtensionAttribute]
internal static bool HasConverter(IConverterManager converterManager, Type typeSource, Type typeDest);
}
public interface Microsoft.Azure.WebJobs.IFunctionDataCache {
    public bool IsEnabled { get; }
    public abstract virtual bool get_IsEnabled();
    public abstract virtual bool TryPut(FunctionDataCacheKey cacheKey, SharedMemoryMetadata sharedMemoryMeta, bool isIncrementActiveReference, bool isDeleteOnFailure);
    public abstract virtual bool TryGet(FunctionDataCacheKey cacheKey, bool isIncrementActiveReference, SharedMemoryMetadata& sharedMemoryMeta);
    public abstract virtual bool TryRemove(FunctionDataCacheKey cacheKey);
    public abstract virtual void DecrementActiveReference(FunctionDataCacheKey cacheKey);
}
public interface Microsoft.Azure.WebJobs.IJobHost {
    public abstract virtual Task CallAsync(string name, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    public abstract virtual Task StartAsync(CancellationToken cancellationToken);
    public abstract virtual Task StopAsync();
}
[ObsoleteAttribute("Not ready for public consumption.")]
public interface Microsoft.Azure.WebJobs.ILoadBalancerQueue {
    public abstract virtual IAsyncCollector`1<T> GetQueueWriter(string queueName);
    public abstract virtual IListener CreateQueueListenr(string queueName, string poisonQueueName, Func`3<string, CancellationToken, Task`1<FunctionResult>> callback);
}
public interface Microsoft.Azure.WebJobs.INameResolver {
    public abstract virtual string Resolve(string name);
}
internal class Microsoft.Azure.WebJobs.InMemoryLoadBalancerQueue : object {
    private Dictionary`2<string, Queue`1<object>> _queues;
    public sealed virtual IListener CreateQueueListenr(string queue, string poisonQueue, Func`3<string, CancellationToken, Task`1<FunctionResult>> callback);
    private Queue`1<object> GetQueue(string name);
    private void Add(string queue, T item);
    public sealed virtual IAsyncCollector`1<T> GetQueueWriter(string queueName);
}
public interface Microsoft.Azure.WebJobs.ITypeLocator {
    public abstract virtual IReadOnlyList`1<Type> GetTypes();
}
public interface Microsoft.Azure.WebJobs.IWebJobsBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
public interface Microsoft.Azure.WebJobs.IWebJobsExtensionBuilder {
    public IServiceCollection Services { get; }
    public ExtensionInfo ExtensionInfo { get; }
    public abstract virtual IServiceCollection get_Services();
    public abstract virtual ExtensionInfo get_ExtensionInfo();
}
public class Microsoft.Azure.WebJobs.JobHost : object {
    private static int StateNotStarted;
    private static int StateStarting;
    private static int StateStarted;
    private static int StateStoppingOrStopped;
    private IJobHostContextFactory _jobHostContextFactory;
    private CancellationTokenSource _shutdownTokenSource;
    private WebJobsShutdownWatcher _shutdownWatcher;
    private CancellationTokenSource _stoppingTokenSource;
    private JobHostContext _context;
    private IListener _listener;
    private Task _hostInitializationTask;
    private int _state;
    private Task _stopTask;
    private bool _disposed;
    private object _lock;
    private ILogger _logger;
    private bool HasInitialized { get; }
    internal IListener Listener { get; internal set; }
    public JobHost(IOptions`1<JobHostOptions> options, IJobHostContextFactory jobHostContextFactory);
    private bool get_HasInitialized();
    internal IListener get_Listener();
    internal void set_Listener(IListener value);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.JobHost/<StartAsyncCore>d__23")]
protected virtual Task StartAsyncCore(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.JobHost/<StopAsyncCore>d__25")]
protected virtual Task StopAsyncCore(CancellationToken cancellationToken);
    public Task CallAsync(MethodInfo method, CancellationToken cancellationToken);
    public Task CallAsync(MethodInfo method, object arguments, CancellationToken cancellationToken);
    public Task CallAsync(string method, object arguments, CancellationToken cancellationToken);
    public Task CallAsync(MethodInfo method, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    public sealed virtual Task CallAsync(string name, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.JobHost/<CallAsyncCore>d__31")]
private Task CallAsyncCore(IFunctionDefinition function, object functionKey, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    private static IFunctionInstance CreateFunctionInstance(IFunctionDefinition func, IDictionary`2<string, object> parameters);
    private void ThrowIfDisposed();
    private Task EnsureHostInitializedAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.JobHost/<InitializeHostAsync>d__37")]
private Task InitializeHostAsync(CancellationToken cancellationToken, TaskCompletionSource`1<bool> initializationTask);
    protected internal virtual void OnHostInitialized();
    protected virtual void OnHostStarted();
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.JobHost/<<CallAsync>g__CallAsyncAwaited|29_0>d")]
[CompilerGeneratedAttribute]
private Task <CallAsync>g__CallAsyncAwaited|29_0(MethodInfo method, IDictionary`2<string, object> arguments, CancellationToken cancellationToken);
}
public class Microsoft.Azure.WebJobs.JobHostOptions : object {
    [CompilerGeneratedAttribute]
private bool <UsingDevelopmentSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPartialHostStartup>k__BackingField;
    internal bool UsingDevelopmentSettings { get; internal set; }
    public bool AllowPartialHostStartup { get; public set; }
    [CompilerGeneratedAttribute]
internal bool get_UsingDevelopmentSettings();
    [CompilerGeneratedAttribute]
internal void set_UsingDevelopmentSettings(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowPartialHostStartup();
    [CompilerGeneratedAttribute]
public void set_AllowPartialHostStartup(bool value);
}
internal class Microsoft.Azure.WebJobs.Logging.EventCollectorFactory : object {
    private IEnumerable`1<IEventCollectorProvider> _providers;
    public EventCollectorFactory(IEnumerable`1<IEventCollectorProvider> providers);
    public sealed virtual IAsyncCollector`1<FunctionInstanceLogEntry> Create();
}
internal class Microsoft.Azure.WebJobs.Logging.FunctionOutputLogger : object {
    private static AsyncLocal`1<IFunctionOutput> _asyncLocalOutput;
    private bool _isUserFunction;
    public FunctionOutputLogger(string categoryName);
    private static FunctionOutputLogger();
    public sealed virtual IDisposable BeginScope(TState state);
    public static void SetOutput(IFunctionOutput output);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    protected void InvokeTextWriter(TextWriter textWriter, string formattedMessage, Exception exception);
}
internal class Microsoft.Azure.WebJobs.Logging.FunctionOutputLoggerProvider : object {
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
internal class Microsoft.Azure.WebJobs.Logging.FunctionResultAggregate : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <AverageDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MinDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Successes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Failures>k__BackingField;
    public string Name { get; public set; }
    public DateTimeOffset Timestamp { get; public set; }
    public TimeSpan AverageDuration { get; public set; }
    public TimeSpan MaxDuration { get; public set; }
    public TimeSpan MinDuration { get; public set; }
    public int Successes { get; public set; }
    public int Failures { get; public set; }
    public int Count { get; }
    public double SuccessRate { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public TimeSpan get_AverageDuration();
    [CompilerGeneratedAttribute]
public void set_AverageDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxDuration();
    [CompilerGeneratedAttribute]
public void set_MaxDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MinDuration();
    [CompilerGeneratedAttribute]
public void set_MinDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_Successes();
    [CompilerGeneratedAttribute]
public void set_Successes(int value);
    [CompilerGeneratedAttribute]
public int get_Failures();
    [CompilerGeneratedAttribute]
public void set_Failures(int value);
    public int get_Count();
    public double get_SuccessRate();
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.WebJobs.Logging.FunctionResultAggregateState : ValueType {
    public static string OriginalFormatString;
    private FunctionResultAggregate _resultAggregate;
    public KeyValuePair`2<string, object> Item { get; }
    public int Count { get; }
    public FunctionResultAggregateState(FunctionResultAggregate resultAggregate);
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
internal class Microsoft.Azure.WebJobs.Logging.FunctionResultAggregator : object {
    private ILogger _logger;
    private int _batchSize;
    private TimeSpan _batchTimeout;
    private static string FunctionNamePrefix;
    private BufferBlock`1<FunctionInstanceLogEntry> _buffer;
    private BatchBlock`1<FunctionInstanceLogEntry> _batcher;
    private Timer _windowTimer;
    private IDisposable[] _disposables;
    public FunctionResultAggregator(int batchSize, TimeSpan batchTimeout, ILoggerFactory loggerFactory);
    private void InitializeFlow(int maxBacklog, TimeSpan maxFlushInterval);
    public sealed virtual Task FlushAsync(CancellationToken cancellationToken);
    internal void Publish(IEnumerable`1<FunctionResultAggregate> results);
    public sealed virtual Task AddAsync(FunctionInstanceLogEntry result, CancellationToken cancellationToken);
    internal static IEnumerable`1<FunctionResultAggregate> Aggregate(IEnumerable`1<FunctionInstanceLogEntry> evts);
    private static string TrimDefaultClassName(string functionName);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <InitializeFlow>b__9_1(IEnumerable`1<FunctionResultAggregate> e);
    [AsyncStateMachineAttribute("Microsoft.Azure.WebJobs.Logging.FunctionResultAggregator/<<InitializeFlow>b__9_2>d")]
[CompilerGeneratedAttribute]
private void <InitializeFlow>b__9_2(object o);
}
public class Microsoft.Azure.WebJobs.Logging.FunctionResultAggregatorOptions : object {
    private int _batchSize;
    private TimeSpan _flushTimeout;
    private static int DefaultBatchSize;
    private static int MaxBatchSize;
    private static TimeSpan DefaultFlushTimeout;
    private static TimeSpan MaxFlushTimeout;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public bool IsEnabled { get; public set; }
    public int BatchSize { get; public set; }
    public TimeSpan FlushTimeout { get; public set; }
    private static FunctionResultAggregatorOptions();
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public TimeSpan get_FlushTimeout();
    public void set_FlushTimeout(TimeSpan value);
    public sealed virtual string Format();
}
internal class Microsoft.Azure.WebJobs.Logging.FunctionResultAggregatorProvider : object {
    protected FunctionResultAggregatorOptions _options;
    private ILoggerFactory _loggerFactory;
    public FunctionResultAggregatorProvider(IOptions`1<FunctionResultAggregatorOptions> options, ILoggerFactory loggerFactory);
    public virtual IAsyncCollector`1<FunctionInstanceLogEntry> Create();
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.WebJobs.Logging.FunctionResultState : ValueType {
    public static string OriginalFormatString;
    private FunctionInstanceLogEntry _logEntry;
    private bool _succeeded;
    public KeyValuePair`2<string, object> Item { get; }
    public int Count { get; }
    public FunctionResultState(FunctionInstanceLogEntry logEntry, bool succeeded);
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
public static class Microsoft.Azure.WebJobs.Logging.LogCategories : object {
    private static Regex _userFunctionRegex;
    private static Regex _functionRegex;
    public static string HostGeneral;
    public static string Startup;
    public static string Singleton;
    public static string Executor;
    public static string Aggregator;
    public static string Results;
    public static string Bindings;
    public static string Scale;
    public static string Concurrency;
    public static string BindingsAccessStats;
    private static LogCategories();
    public static string CreateFunctionCategory(string functionName);
    public static string CreateFunctionUserCategory(string functionName);
    public static string CreateTriggerCategory(string triggerName);
    public static bool IsFunctionUserCategory(string category);
    public static bool IsFunctionCategory(string category);
}
public static class Microsoft.Azure.WebJobs.Logging.LogConstants : object {
    public static string FullNameKey;
    public static string NameKey;
    public static string CountKey;
    public static string SuccessesKey;
    public static string FailuresKey;
    public static string SuccessRateKey;
    public static string AverageDurationKey;
    public static string MaxDurationKey;
    public static string MinDurationKey;
    public static string TimestampKey;
    public static string InvocationIdKey;
    public static string TriggerReasonKey;
    public static string StartTimeKey;
    public static string EndTimeKey;
    public static string DurationKey;
    public static string SucceededKey;
    public static string FormattedMessageKey;
    public static string CategoryNameKey;
    public static string CustomPropertyPrefix;
    public static string ParameterPrefix;
    public static string OriginalFormatKey;
    public static string LogLevelKey;
    public static string EventIdKey;
    public static string EventNameKey;
    public static string FunctionStartEvent;
    public static int MetricEventId;
    public static string MetricValueKey;
    public static string FunctionExecutionTimeKey;
    public static string HttpMethodKey;
    public static string HttpPathKey;
    public static string ProcessIdKey;
    public static string MessageEnqueuedTimeKey;
    public static string TriggerDetailsEndpointKey;
    public static string TriggerDetailsEntityNameKey;
}
internal class Microsoft.Azure.WebJobs.Logging.LoggerTraceWriter : TraceWriter {
    private ILogger _logger;
    private static string _originalFormat;
    public LoggerTraceWriter(ILogger logger);
    public virtual void Trace(TraceEvent traceEvent);
    internal static LogLevel GetLogLevel(TraceLevel traceLevel);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.Azure.WebJobs.Logging.MetricState : ValueType {
    public static string OriginalFormatString;
    private string _name;
    private double _value;
    private IReadOnlyList`1<KeyValuePair`2<string, object>> _properties;
    public KeyValuePair`2<string, object> Item { get; }
    public int Count { get; }
    public MetricState(string name, double value, IDictionary`2<string, object> properties);
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual int get_Count();
    public Enumerator GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
internal static class Microsoft.Azure.WebJobs.Logging.Sanitizer : object {
    public static string SecretReplacement;
    private static Char[] ValueTerminators;
    private static String[] AllowedTokens;
    internal static String[] CredentialTokens;
    private static String[] CredentialNameFragments;
    private static Sanitizer();
    internal static string Sanitize(string input);
    internal static JObject Sanitize(JObject obj, Func`2<string, bool> selector);
    private static bool IsPotentialCredential(string name);
    private static JToken Sanitize(JToken token);
    internal static bool MayContainCredentials(string input);
}
public static class Microsoft.Azure.WebJobs.Logging.ScopeKeys : object {
    public static string FunctionInvocationId;
    public static string FunctionName;
    public static string Event;
    public static string HostInstanceId;
    public static string TriggerDetails;
}
[AttributeUsageAttribute("68")]
public abstract class Microsoft.Azure.WebJobs.RetryAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <MaxRetryCount>k__BackingField;
    public int MaxRetryCount { get; }
    public RetryAttribute(int maxRetryCount);
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxRetryCount();
    public abstract virtual TimeSpan GetNextDelay(RetryContext context);
}
public class Microsoft.Azure.WebJobs.SharedMemoryMetadata : object {
    [CompilerGeneratedAttribute]
private string <MemoryMapName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    public string MemoryMapName { get; private set; }
    public long Count { get; private set; }
    public SharedMemoryMetadata(string memoryMapName, long count);
    [CompilerGeneratedAttribute]
public string get_MemoryMapName();
    [CompilerGeneratedAttribute]
private void set_MemoryMapName(string value);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(long value);
}
[ExtensionAttribute]
internal static class Microsoft.Azure.WebJobs.Utility : object {
    public static string GetInstanceId();
    internal static int GetStableHash(string value);
    public static string FlattenException(Exception ex, Func`2<string, string> sourceFormatter, bool includeSource);
    public static int GetEffectiveCoresCount();
    public static string GetWebsiteSku();
    public static bool IsConsumptionSku();
    public static bool IsVMSS();
    public static IConfigurationSection GetExtensionConfigurationSection(IConfiguration configuration);
    internal static string GetExtensionAliasFromTypeName(string typeName);
    internal static string GetFunctionName(MethodInfo methodInfo);
    internal static string GetFunctionShortName(MethodInfo methodInfo);
    [ExtensionAttribute]
public static IEnumerable`1<TElement> TakeLastN(IEnumerable`1<TElement> source, int take);
    private static string GetExtensionConfigurationSectionName();
}
public class Microsoft.Azure.WebJobs.WebJobsBuilderContext : object {
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationRootPath>k__BackingField;
    public IConfiguration Configuration { get; public set; }
    public string EnvironmentName { get; public set; }
    public string ApplicationRootPath { get; public set; }
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(IConfiguration value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentName();
    [CompilerGeneratedAttribute]
public void set_EnvironmentName(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationRootPath();
    [CompilerGeneratedAttribute]
public void set_ApplicationRootPath(string value);
}
[ExtensionAttribute]
public static class Microsoft.Azure.WebJobs.WebJobsBuilderExtensions : object {
    private static IDictionary`2<Type, object> _startupTypeMap;
    private static WebJobsBuilderExtensions();
    [ExtensionAttribute]
public static IWebJobsExtensionBuilder AddExtension(IWebJobsBuilder builder);
    [ExtensionAttribute]
public static IWebJobsExtensionBuilder AddExtension(IWebJobsBuilder builder, IExtensionConfigProvider instance);
    [ExtensionAttribute]
public static IWebJobsBuilder AddExtension(IWebJobsBuilder builder, Type extensionConfigProviderType);
    [ExtensionAttribute]
public static IWebJobsBuilder UseHostId(IWebJobsBuilder builder, string hostId);
    [ExtensionAttribute]
public static IWebJobsBuilder UseWebJobsStartup(IWebJobsBuilder builder);
    [ExtensionAttribute]
public static IWebJobsBuilder UseWebJobsStartup(IWebJobsBuilder builder, ILoggerFactory loggerFactory);
    [ExtensionAttribute]
public static IWebJobsBuilder UseWebJobsStartup(IWebJobsBuilder builder, Type startupType);
    [ExtensionAttribute]
public static IWebJobsBuilder UseWebJobsStartup(IWebJobsBuilder builder, Type startupType, ILoggerFactory loggerFactory);
    [ExtensionAttribute]
public static IWebJobsBuilder UseWebJobsStartup(IWebJobsBuilder builder, Type startupType, WebJobsBuilderContext context, ILoggerFactory loggerFactory);
    private static void ConfigureAndLogUserConfiguredServices(IWebJobsStartup startup, WebJobsBuilderContext context, IWebJobsBuilder builder, ILoggerFactory loggerFactory);
    private static void ConfigureStartup(IWebJobsStartup startup, WebJobsBuilderContext context, IWebJobsBuilder builder);
    [ExtensionAttribute]
public static IWebJobsBuilder UseExternalStartup(IWebJobsBuilder builder);
    [ExtensionAttribute]
public static IWebJobsBuilder UseExternalStartup(IWebJobsBuilder builder, ILoggerFactory loggerFactory);
    [ExtensionAttribute]
public static IWebJobsBuilder UseExternalStartup(IWebJobsBuilder builder, IWebJobsStartupTypeLocator startupTypeLocator);
    [ExtensionAttribute]
public static IWebJobsBuilder UseExternalStartup(IWebJobsBuilder builder, IWebJobsStartupTypeLocator startupTypeLocator, ILoggerFactory loggerFactory);
    [ExtensionAttribute]
public static IWebJobsBuilder UseExternalStartup(IWebJobsBuilder builder, IWebJobsStartupTypeLocator startupTypeLocator, WebJobsBuilderContext context, ILoggerFactory loggerFactory);
    [ExtensionAttribute]
public static IWebJobsBuilder AddTableLogging(IWebJobsBuilder builder, IEventCollectorFactory eventCollectorFactory);
    [ExtensionAttribute]
public static IWebJobsBuilder AddExecutionContextBinding(IWebJobsBuilder builder, Action`1<ExecutionContextOptions> configure);
    [ExtensionAttribute]
public static IWebJobsBuilder AddBuiltInBindings(IWebJobsBuilder builder);
    [ExtensionAttribute]
public static IWebJobsConfigurationBuilder UseWebJobsConfigurationStartup(IWebJobsConfigurationBuilder builder, WebJobsBuilderContext context);
    [ExtensionAttribute]
public static IWebJobsConfigurationBuilder UseWebJobsConfigurationStartup(IWebJobsConfigurationBuilder builder, WebJobsBuilderContext context, ILoggerFactory loggerFactory);
    [ExtensionAttribute]
public static IWebJobsConfigurationBuilder UseWebJobsConfigurationStartup(IWebJobsConfigurationBuilder builder, Type startupType, WebJobsBuilderContext context);
    [ExtensionAttribute]
public static IWebJobsConfigurationBuilder UseWebJobsConfigurationStartup(IWebJobsConfigurationBuilder builder, Type startupType, WebJobsBuilderContext context, ILoggerFactory loggerFactory);
    private static void ConfigureAndLogUserConfigurationProviders(IWebJobsConfigurationStartup startup, WebJobsBuilderContext context, IWebJobsConfigurationBuilder builder, ILoggerFactory loggerFactory);
    [ExtensionAttribute]
public static IWebJobsConfigurationBuilder UseExternalConfigurationStartup(IWebJobsConfigurationBuilder builder, WebJobsBuilderContext context);
    [ExtensionAttribute]
public static IWebJobsConfigurationBuilder UseExternalConfigurationStartup(IWebJobsConfigurationBuilder builder, IWebJobsStartupTypeLocator startupTypeLocator, WebJobsBuilderContext context, ILoggerFactory loggerFactory);
}
[ExtensionAttribute]
public static class Microsoft.Azure.WebJobs.WebJobsExtensionBuilderExtensions : object {
    [ExtensionAttribute]
public static IWebJobsExtensionBuilder BindOptions(IWebJobsExtensionBuilder builder);
    [ExtensionAttribute]
public static IWebJobsExtensionBuilder ConfigureOptions(IWebJobsExtensionBuilder builder, Action`2<IConfigurationSection, TOptions> configure);
    [ExtensionAttribute]
public static IWebJobsExtensionBuilder ConfigureOptions(IWebJobsExtensionBuilder builder, Action`3<IConfiguration, string, TOptions> configure);
}
[ExtensionAttribute]
public static class Microsoft.Azure.WebJobs.WebJobsServiceCollectionExtensions : object {
    private static string SingletonConfigSectionName;
    private static string ConcurrencyConfigSectionName;
    private static string ScaleConfigSectionName;
    [ExtensionAttribute]
public static IWebJobsBuilder AddWebJobs(IServiceCollection services, Action`1<JobHostOptions> configure);
    [ExtensionAttribute]
public static IWebJobsBuilder AddWebJobsScale(IServiceCollection services, Action`1<ScaleOptions> configure);
    [ExtensionAttribute]
private static void AddCommonScaleServices(IServiceCollection services);
    [ExtensionAttribute]
private static void AddOptionsLogging(IServiceCollection services);
    private static void AddListenerDecorators(IServiceCollection services);
}
public class Microsoft.Azure.WebJobs.WebJobsShutdownWatcher : object {
    private string _shutdownFile;
    private bool _ownsCancellationTokenSource;
    private CancellationTokenSource _cts;
    private FileSystemWatcher _watcher;
    public CancellationToken Token { get; }
    private WebJobsShutdownWatcher(CancellationTokenSource cancellationTokenSource, bool ownsCancellationTokenSource);
    public CancellationToken get_Token();
    private void OnChanged(object sender, FileSystemEventArgs e);
    public sealed virtual void Dispose();
    internal static WebJobsShutdownWatcher Create(CancellationTokenSource cancellationTokenSource);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.IConfigurationExtensions : object {
    private static string DefaultConfigurationRootSectionName;
    private static string ConfigurationRootSectionKey;
    private static string ExtensionsSectionKey;
    [ExtensionAttribute]
public static string GetWebJobsConnectionString(IConfiguration configuration, string connectionStringName);
    [ExtensionAttribute]
public static IConfiguration GetWebJobsRootConfiguration(IConfiguration configuration);
    [ExtensionAttribute]
public static IConfigurationSection GetWebJobsExtensionConfigurationSection(IConfiguration configuration, string extensionName);
    [ExtensionAttribute]
public static string GetWebJobsRootConfigurationPath(IConfiguration configuration);
    [ExtensionAttribute]
public static string GetWebJobsExtensionConfigurationSectionPath(IConfiguration configuration, string extensionName);
    public static string GetPrefixedConnectionStringName(string connectionStringName);
    [ExtensionAttribute]
public static string GetConnectionStringOrSetting(IConfiguration configuration, string connectionName);
    [ExtensionAttribute]
public static bool IsSettingEnabled(IConfiguration configuration, string settingName);
    [ExtensionAttribute]
public static IConfigurationSection GetWebJobsConnectionSection(IConfiguration configuration, string connectionName);
    [ExtensionAttribute]
private static IConfigurationSection GetConnectionStringOrSettingSection(IConfiguration configuration, string connectionName);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.WebJobsHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder ConfigureWebJobs(IHostBuilder builder);
    [ExtensionAttribute]
public static IHostBuilder ConfigureWebJobs(IHostBuilder builder, Action`1<IWebJobsBuilder> configure);
    [ExtensionAttribute]
public static IHostBuilder ConfigureWebJobs(IHostBuilder builder, Action`1<IWebJobsBuilder> configure, Action`1<JobHostOptions> configureOptions);
    [ExtensionAttribute]
public static IHostBuilder ConfigureWebJobs(IHostBuilder builder, Action`2<HostBuilderContext, IWebJobsBuilder> configure);
    [ExtensionAttribute]
public static IHostBuilder ConfigureWebJobs(IHostBuilder builder, Action`2<HostBuilderContext, IWebJobsBuilder> configure, Action`1<JobHostOptions> configureOptions);
    [ExtensionAttribute]
public static IHostBuilder ConfigureWebJobs(IHostBuilder builder, Action`2<HostBuilderContext, IWebJobsBuilder> configure, Action`1<JobHostOptions> configureOptions, Action`2<HostBuilderContext, IWebJobsConfigurationBuilder> configureAppConfiguration);
    [ExtensionAttribute]
public static IHostBuilder ConfigureWebJobsScale(IHostBuilder builder, Action`2<HostBuilderContext, IWebJobsBuilder> configure, Action`1<ScaleOptions> configureScaleOptions);
    [ExtensionAttribute]
private static IConfigurationBuilder TryAddDefaultConfigurationSources(IConfigurationBuilder config);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggerExtensions : object {
    private static Action`3<ILogger, int, Exception> _logFunctionRetriesFailed;
    private static Action`5<ILogger, TimeSpan, int, int, Exception> _logFunctionRetryAttempt;
    private static Action`6<ILogger, int, string, double, double, Exception> _hostProcessCpuStats;
    private static Action`4<ILogger, double, float, Exception> _hostCpuThresholdExceeded;
    private static Action`3<ILogger, double, Exception> _hostAggregateCpuLoad;
    private static Action`6<ILogger, int, string, double, double, Exception> _hostProcessMemoryUsage;
    private static Action`4<ILogger, double, double, Exception> _hostMemoryThresholdExceeded;
    private static Action`4<ILogger, double, int, Exception> _hostAggregateMemoryUsage;
    private static Action`5<ILogger, string, int, int, Exception> _hostConcurrencyStatus;
    private static Action`2<ILogger, Exception> _hostThreadStarvation;
    private static Action`3<ILogger, string, Exception> _primaryHostCoordinatorFailedToRenewLockLease;
    private static Action`4<ILogger, string, string, Exception> _primaryHostCoordinatorFailedToAcquireLockLease;
    private static Action`3<ILogger, string, Exception> _primaryHostCoordinatorReleasedLocklLease;
    private static Action`3<ILogger, string, Exception> _primaryHostCoordinatorLockLeaseAcquired;
    private static Action`4<ILogger, string, string, Exception> _functionConcurrencyDecrease;
    private static Action`3<ILogger, string, Exception> _functionConcurrencyIncrease;
    private static Action`2<ILogger, Exception> _logExitFromRetryLoop;
    private static LoggerExtensions();
    [ExtensionAttribute]
public static void PrimaryHostCoordinatorLockLeaseAcquired(ILogger logger, string websiteInstanceId);
    [ExtensionAttribute]
public static void PrimaryHostCoordinatorFailedToRenewLockLease(ILogger logger, string reason);
    [ExtensionAttribute]
public static void PrimaryHostCoordinatorFailedToAcquireLockLease(ILogger logger, string websiteInstanceId, string reason);
    [ExtensionAttribute]
public static void PrimaryHostCoordinatorReleasedLocklLease(ILogger logger, string websiteInstanceId);
    [ExtensionAttribute]
public static void HostThreadStarvation(ILogger logger);
    [ExtensionAttribute]
public static void HostConcurrencyStatus(ILogger logger, string functionId, int concurrency, int outstandingInvocations);
    [ExtensionAttribute]
public static void HostAggregateCpuLoad(ILogger logger, double aggregateCpuLoad);
    [ExtensionAttribute]
public static void HostProcessCpuStats(ILogger logger, int pid, string formattedCpuLoadHistory, double avgCpuLoad, double maxCpuLoad);
    [ExtensionAttribute]
public static void HostCpuThresholdExceeded(ILogger logger, double aggregateCpuLoad, float cpuThreshold);
    [ExtensionAttribute]
public static void HostAggregateMemoryUsage(ILogger logger, double aggregateMemoryUsage, int percentageOfMax);
    [ExtensionAttribute]
public static void HostProcessMemoryUsage(ILogger logger, int pid, string formattedMemoryUsageHistory, double avgMemoryUsage, double maxMemoryUsage);
    [ExtensionAttribute]
public static void HostMemoryThresholdExceeded(ILogger logger, double aggregateMemoryUsage, double memoryThreshold);
    [ExtensionAttribute]
public static void FunctionConcurrencyDecrease(ILogger logger, string functionId, string enabledThrottles);
    [ExtensionAttribute]
public static void FunctionConcurrencyIncrease(ILogger logger, string functionId);
    [ExtensionAttribute]
public static void LogMetric(ILogger logger, string name, double value, IDictionary`2<string, object> properties);
    [ExtensionAttribute]
internal static void LogFunctionResult(ILogger logger, FunctionInstanceLogEntry logEntry);
    [ExtensionAttribute]
internal static void LogFunctionResultAggregate(ILogger logger, FunctionResultAggregate resultAggregate);
    [ExtensionAttribute]
internal static IDisposable BeginFunctionScope(ILogger logger, IFunctionInstance functionInstance, Guid hostInstanceId);
    [ExtensionAttribute]
public static void LogFunctionRetryAttempt(ILogger logger, TimeSpan nextDelay, int attemptCount, int maxRetryCount);
    [ExtensionAttribute]
public static void LogFunctionRetriesFailed(ILogger logger, int attemptCount, IDelayedException result);
    [ExtensionAttribute]
internal static void LogExitFromRetryLoop(ILogger logger);
}
[ExtensionAttribute]
internal static class System.Collections.Generic.DictionaryExtensions : object {
    [ExtensionAttribute]
public static T GetValueOrDefault(IDictionary`2<string, object> dictionary, string key);
}
[ExtensionAttribute]
internal static class System.Collections.Generic.ReadOnlyDictionaryExtensions : object {
    [ExtensionAttribute]
public static T GetValueOrDefault(IReadOnlyDictionary`2<string, object> dictionary, string key);
}
[ExtensionAttribute]
internal static class System.ExceptionExtensions : object {
    [ExtensionAttribute]
public static string ToDetails(Exception exception);
    private static IDictionary`2<string, string> GetAdditionalDetails(Exception exception);
    [ExtensionAttribute]
public static bool IsTimeout(Exception exception);
    [ExtensionAttribute]
public static bool IsFatal(Exception exception);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
