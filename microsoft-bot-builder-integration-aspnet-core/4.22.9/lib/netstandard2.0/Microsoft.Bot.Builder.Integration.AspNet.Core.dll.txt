[ObsoleteAttribute("Use `ConfigurationBotFrameworkAuthentication` instead to configure channel.", "False")]
public class Microsoft.Bot.Builder.BotFramework.ConfigurationChannelProvider : SimpleChannelProvider {
    public static string ChannelServiceKey;
    public ConfigurationChannelProvider(IConfiguration configuration);
}
[ObsoleteAttribute("Use `ConfigurationBotFrameworkAuthentication` instead to configure credentials.", "False")]
public class Microsoft.Bot.Builder.BotFramework.ConfigurationCredentialProvider : SimpleCredentialProvider {
    public ConfigurationCredentialProvider(IConfiguration configuration);
}
[ExtensionAttribute]
public static class Microsoft.Bot.Builder.Integration.AspNet.Core.ApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder UseBotFramework(IApplicationBuilder applicationBuilder);
    [ExtensionAttribute]
public static IApplicationBuilder UseNamedPipes(IApplicationBuilder applicationBuilder, string pipeName, string audience);
    [ExtensionAttribute]
public static IApplicationBuilder UseNamedPipes(IApplicationBuilder applicationBuilder, string pipeName, string audience, string appId, string callerId);
    private static string GetBuiltinDefaultAudience(IConfiguration configuration);
}
[ObsoleteAttribute("BotFrameworkHttpAdapter is still supported in v4 but the recommended adapter is `CloudAdapter`", "False")]
public class Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpAdapter : BotFrameworkHttpAdapterBase {
    private static string AuthHeaderName;
    private static string ChannelIdHeaderName;
    public BotFrameworkHttpAdapter(ICredentialProvider credentialProvider, AuthenticationConfiguration authConfig, IChannelProvider channelProvider, RetryPolicy connectorClientRetryPolicy, HttpClient customHttpClient, IMiddleware middleware, ILogger logger);
    public BotFrameworkHttpAdapter(ICredentialProvider credentialProvider, IChannelProvider channelProvider, ILogger`1<BotFrameworkHttpAdapter> logger);
    public BotFrameworkHttpAdapter(ICredentialProvider credentialProvider, IChannelProvider channelProvider, HttpClient httpClient, ILogger`1<BotFrameworkHttpAdapter> logger);
    protected BotFrameworkHttpAdapter(IConfiguration configuration, ICredentialProvider credentialProvider, AuthenticationConfiguration authConfig, IChannelProvider channelProvider, RetryPolicy connectorClientRetryPolicy, HttpClient customHttpClient, IMiddleware middleware, ILogger logger);
    protected BotFrameworkHttpAdapter(IConfiguration configuration, ILogger`1<BotFrameworkHttpAdapter> logger);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpAdapter/<ProcessAsync>d__7")]
public sealed virtual Task ProcessAsync(HttpRequest httpRequest, HttpResponse httpResponse, IBot bot, CancellationToken cancellationToken);
    public virtual StreamingRequestHandler CreateStreamingRequestHandler(IBot bot, WebSocket socket, string audience);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpAdapter/<WriteUnauthorizedResponseAsync>d__9")]
private static Task WriteUnauthorizedResponseAsync(string headerName, HttpRequest httpRequest);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpAdapter/<ConnectWebSocketAsync>d__10")]
private Task ConnectWebSocketAsync(IBot bot, HttpRequest httpRequest, HttpResponse httpResponse, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpAdapter/<AuthenticateRequestAsync>d__11")]
private Task`1<ClaimsIdentity> AuthenticateRequestAsync(HttpRequest httpRequest);
    private string GetAudience(ClaimsIdentity claimsIdentity);
}
[ObsoleteAttribute("Use `BotFrameworkAuthentication.CreateBotFrameworkClient()` to obtain a client and perform the operations that were accomplished through `BotFrameworkHttpClient`.", "False")]
public class Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpClient : BotFrameworkClient {
    private JsonSerializerSettings _settings;
    [CompilerGeneratedAttribute]
private static ConcurrentDictionary`2<string, AppCredentials> <AppCredentialMapCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IChannelProvider <ChannelProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ICredentialProvider <CredentialProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <HttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected static ConcurrentDictionary`2<string, AppCredentials> AppCredentialMapCache { get; }
    protected IChannelProvider ChannelProvider { get; }
    protected ICredentialProvider CredentialProvider { get; }
    protected HttpClient HttpClient { get; }
    protected ILogger Logger { get; }
    public BotFrameworkHttpClient(HttpClient httpClient, ICredentialProvider credentialProvider, IChannelProvider channelProvider, ILogger logger);
    private static BotFrameworkHttpClient();
    [CompilerGeneratedAttribute]
protected static ConcurrentDictionary`2<string, AppCredentials> get_AppCredentialMapCache();
    [CompilerGeneratedAttribute]
protected IChannelProvider get_ChannelProvider();
    [CompilerGeneratedAttribute]
protected ICredentialProvider get_CredentialProvider();
    [CompilerGeneratedAttribute]
protected HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpClient/<PostActivityAsync>d__17")]
public virtual Task`1<InvokeResponse> PostActivityAsync(string fromBotId, string toBotId, Uri toUrl, Uri serviceUrl, string conversationId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpClient/<PostActivityAsync>d__18`1")]
public virtual Task`1<InvokeResponse`1<T>> PostActivityAsync(string fromBotId, string toBotId, Uri toUrl, Uri serviceUrl, string conversationId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpClient/<PostActivityAsync>d__19")]
public virtual Task`1<InvokeResponse> PostActivityAsync(string botId, Uri botEndpoint, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpClient/<PostActivityAsync>d__20`1")]
public virtual Task`1<InvokeResponse`1<T>> PostActivityAsync(string botId, Uri botEndpoint, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpClient/<BuildCredentialsAsync>d__21")]
protected virtual Task`1<AppCredentials> BuildCredentialsAsync(string appId, string oAuthScope);
    private static T GetBodyContent(string content);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpClient/<SecurePostActivityAsync>d__23`1")]
private Task`1<InvokeResponse`1<T>> SecurePostActivityAsync(Uri toUrl, Activity activity, string token, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.BotFrameworkHttpClient/<GetAppCredentialsAsync>d__24")]
private Task`1<AppCredentials> GetAppCredentialsAsync(string appId, string oAuthScope);
}
[ChannelServiceExceptionFilterAttribute]
public abstract class Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController : ControllerBase {
    private ChannelServiceHandlerBase _handler;
    protected ChannelServiceController(ChannelServiceHandlerBase handler);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController/<SendToConversationAsync>d__2")]
[HttpPostAttribute("v3/conversations/{conversationId}/activities")]
public virtual Task`1<IActionResult> SendToConversationAsync(string conversationId, Activity activity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController/<ReplyToActivityAsync>d__3")]
[HttpPostAttribute("v3/conversations/{conversationId}/activities/{activityId}")]
public virtual Task`1<IActionResult> ReplyToActivityAsync(string conversationId, string activityId, Activity activity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController/<UpdateActivityAsync>d__4")]
[HttpPutAttribute("v3/conversations/{conversationId}/activities/{activityId}")]
public virtual Task`1<IActionResult> UpdateActivityAsync(string conversationId, string activityId, Activity activity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController/<DeleteActivityAsync>d__5")]
[HttpDeleteAttribute("v3/conversations/{conversationId}/activities/{activityId}")]
public virtual Task DeleteActivityAsync(string conversationId, string activityId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController/<GetActivityMembersAsync>d__6")]
[HttpGetAttribute("v3/conversations/{conversationId}/activities/{activityId}/members")]
public virtual Task`1<IActionResult> GetActivityMembersAsync(string conversationId, string activityId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController/<CreateConversationAsync>d__7")]
[HttpPostAttribute("v3/conversations")]
public virtual Task`1<IActionResult> CreateConversationAsync(ConversationParameters parameters);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController/<GetConversationsAsync>d__8")]
[HttpGetAttribute("v3/conversations")]
public virtual Task`1<IActionResult> GetConversationsAsync(string continuationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController/<GetConversationMembersAsync>d__9")]
[HttpGetAttribute("v3/conversations/{conversationId}/members")]
public virtual Task`1<IActionResult> GetConversationMembersAsync(string conversationId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController/<GetConversationMemberAsync>d__10")]
[HttpGetAttribute("v3/conversations/{conversationId}/members/{userId}")]
public virtual Task`1<IActionResult> GetConversationMemberAsync(string userId, string conversationId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController/<GetConversationPagedMembersAsync>d__11")]
[HttpGetAttribute("v3/conversations/{conversationId}/pagedmembers")]
public virtual Task`1<IActionResult> GetConversationPagedMembersAsync(string conversationId, int pageSize, string continuationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController/<DeleteConversationMemberAsync>d__12")]
[HttpDeleteAttribute("v3/conversations/{conversationId}/members/{memberId}")]
public virtual Task DeleteConversationMemberAsync(string conversationId, string memberId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController/<SendConversationHistoryAsync>d__13")]
[HttpPostAttribute("v3/conversations/{conversationId}/activities/history")]
public virtual Task`1<IActionResult> SendConversationHistoryAsync(string conversationId, Transcript history);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceController/<UploadAttachmentAsync>d__14")]
[HttpPostAttribute("v3/conversations/{conversationId}/attachments")]
public virtual Task`1<IActionResult> UploadAttachmentAsync(string conversationId, AttachmentData attachmentUpload);
}
[AttributeUsageAttribute("4")]
internal class Microsoft.Bot.Builder.Integration.AspNet.Core.ChannelServiceExceptionFilterAttribute : Attribute {
    public sealed virtual void OnException(ExceptionContext context);
}
public class Microsoft.Bot.Builder.Integration.AspNet.Core.CloudAdapter : CloudAdapterBase {
    private ConcurrentDictionary`2<Guid, StreamingActivityProcessor> _streamingConnections;
    public CloudAdapter(BotFrameworkAuthentication botFrameworkAuthentication, ILogger logger);
    public CloudAdapter(IConfiguration configuration, IHttpClientFactory httpClientFactory, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.CloudAdapter/<ProcessAsync>d__4")]
public sealed virtual Task ProcessAsync(HttpRequest httpRequest, HttpResponse httpResponse, IBot bot, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.CloudAdapter/<ConnectNamedPipeAsync>d__5")]
public Task ConnectNamedPipeAsync(string pipeName, IBot bot, string appId, string audience, string callerId);
    protected virtual ConnectorFactory GetStreamingConnectorFactory(Activity activity);
    protected virtual StreamingConnection CreateWebSocketConnection(WebSocket socket, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.CloudAdapter/<ConnectAsync>d__8")]
private Task ConnectAsync(HttpRequest httpRequest, IBot bot, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.Integration.AspNet.Core.ConfigurationBotFrameworkAuthentication : BotFrameworkAuthentication {
    private BotFrameworkAuthentication _inner;
    public ConfigurationBotFrameworkAuthentication(IConfiguration configuration, ServiceClientCredentialsFactory credentialsFactory, AuthenticationConfiguration authConfiguration, IHttpClientFactory httpClientFactory, ILogger logger);
    public virtual string GetOriginatingAudience();
    public virtual Task`1<ClaimsIdentity> AuthenticateChannelRequestAsync(string authHeader, CancellationToken cancellationToken);
    public virtual Task`1<AuthenticateRequestResult> AuthenticateRequestAsync(Activity activity, string authHeader, CancellationToken cancellationToken);
    public virtual Task`1<AuthenticateRequestResult> AuthenticateStreamingRequestAsync(string authHeader, string channelIdHeader, CancellationToken cancellationToken);
    public virtual ConnectorFactory CreateConnectorFactory(ClaimsIdentity claimsIdentity);
    public virtual Task`1<UserTokenClient> CreateUserTokenClientAsync(ClaimsIdentity claimsIdentity, CancellationToken cancellationToken);
    public virtual BotFrameworkClient CreateBotFrameworkClient();
}
public class Microsoft.Bot.Builder.Integration.AspNet.Core.ConfigurationServiceClientCredentialFactory : ServiceClientCredentialsFactory {
    private ServiceClientCredentialsFactory _inner;
    public ConfigurationServiceClientCredentialFactory(IConfiguration configuration, HttpClient httpClient, ILogger logger);
    public virtual Task`1<bool> IsValidAppIdAsync(string appId, CancellationToken cancellationToken);
    public virtual Task`1<bool> IsAuthenticationDisabledAsync(CancellationToken cancellationToken);
    public virtual Task`1<ServiceClientCredentials> CreateCredentialsAsync(string appId, string audience, string loginEndpoint, bool validateAuthority, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.Integration.AspNet.Core.Handlers.BotMessageHandler : BotMessageHandlerBase {
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.Handlers.BotMessageHandler/<ProcessMessageRequestAsync>d__0")]
protected virtual Task`1<InvokeResponse> ProcessMessageRequestAsync(HttpRequest request, IAdapterIntegration adapter, BotCallbackHandler botCallbackHandler, CancellationToken cancellationToken);
}
public abstract class Microsoft.Bot.Builder.Integration.AspNet.Core.Handlers.BotMessageHandlerBase : object {
    public static JsonSerializer BotMessageSerializer;
    private static BotMessageHandlerBase();
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.Handlers.BotMessageHandlerBase/<HandleAsync>d__2")]
public Task HandleAsync(HttpContext httpContext);
    protected abstract virtual Task`1<InvokeResponse> ProcessMessageRequestAsync(HttpRequest request, IAdapterIntegration adapter, BotCallbackHandler botCallbackHandler, CancellationToken cancellationToken);
}
public static class Microsoft.Bot.Builder.Integration.AspNet.Core.HttpHelper : object {
    public static JsonSerializerSettings BotMessageSerializerSettings;
    public static JsonSerializer BotMessageSerializer;
    private static HttpHelper();
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.HttpHelper/<ReadRequestAsync>d__2`1")]
public static Task`1<T> ReadRequestAsync(HttpRequest request);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.HttpHelper/<WriteResponseAsync>d__3")]
public static Task WriteResponseAsync(HttpResponse response, InvokeResponse invokeResponse);
}
public interface Microsoft.Bot.Builder.Integration.AspNet.Core.IBotFrameworkHttpAdapter {
    public abstract virtual Task ProcessAsync(HttpRequest httpRequest, HttpResponse httpResponse, IBot bot, CancellationToken cancellationToken);
}
internal enum Microsoft.Bot.Builder.Integration.AspNet.Core.MicrosoftAppType : Enum {
    public int value__;
    public static MicrosoftAppType MultiTenant;
    public static MicrosoftAppType SingleTenant;
    public static MicrosoftAppType UserAssignedMsi;
}
[ExtensionAttribute]
[ObsoleteAttribute("Use `CloudAdapter` with `ConfigurationBotFrameworkAuthentication` instead to configure bot runtime.", "False")]
public static class Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddBot(IServiceCollection services, Action`1<BotFrameworkOptions> configureAction);
    [ExtensionAttribute]
public static IServiceCollection AddBot(IServiceCollection services, TBot bot, Action`1<BotFrameworkOptions> configureAction);
    [ExtensionAttribute]
public static IServiceCollection AddBot(IServiceCollection services, Func`2<IServiceProvider, TBot> botFactory, Action`1<BotFrameworkOptions> configureAction);
    [ExtensionAttribute]
public static IServiceCollection AddBotFrameworkAdapterIntegration(IServiceCollection services, Action`1<BotFrameworkOptions> configureAction);
    [ExtensionAttribute]
private static IServiceCollection TryAddBotFrameworkAdapterIntegration(IServiceCollection services);
    private static BotFrameworkAdapter BotFrameworkAdapterSingletonFactory(IServiceProvider serviceProvider);
}
[ObsoleteAttribute("Use BotFrameworkAuthentication.CreateBotFrameworkClient() to obtain a client and perform the operations that were accomplished through SkillHttpClient.")]
public class Microsoft.Bot.Builder.Integration.AspNet.Core.Skills.SkillHttpClient : BotFrameworkHttpClient {
    private SkillConversationIdFactoryBase _conversationIdFactory;
    public SkillHttpClient(HttpClient httpClient, ICredentialProvider credentialProvider, SkillConversationIdFactoryBase conversationIdFactory, IChannelProvider channelProvider, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.Skills.SkillHttpClient/<PostActivityAsync>d__2`1")]
public virtual Task`1<InvokeResponse`1<T>> PostActivityAsync(string originatingAudience, string fromBotId, BotFrameworkSkill toSkill, Uri callbackUrl, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.Skills.SkillHttpClient/<PostActivityAsync>d__3")]
public virtual Task`1<InvokeResponse> PostActivityAsync(string fromBotId, BotFrameworkSkill toSkill, Uri callbackUrl, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Integration.AspNet.Core.Skills.SkillHttpClient/<PostActivityAsync>d__4`1")]
public virtual Task`1<InvokeResponse`1<T>> PostActivityAsync(string fromBotId, BotFrameworkSkill toSkill, Uri callbackUrl, Activity activity, CancellationToken cancellationToken);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
