public class Microsoft.Bot.Builder.ActivityFactory : object {
    private static string LGType;
    private static string AdaptiveCardType;
    private static Dictionary`2<string, string> GenericCardTypeMapping;
    private static ActivityFactory();
    public static Activity FromObject(object lgResult);
    private static Activity BuildActivityFromText(string text);
    private static Activity BuildActivityFromLGStructuredResult(JObject lgJObj);
    private static Activity BuildActivity(JObject lgJObj);
    private static SuggestedActions GetSuggestions(JToken value);
    private static IList`1<CardAction> GetButtons(JToken value);
    private static IList`1<CardAction> GetCardActions(IList`1<JToken> actions);
    private static CardAction GetCardAction(JToken cardActionJtoken);
    private static IList`1<Attachment> GetAttachments(JToken value);
    private static Attachment GetAttachment(JObject lgJObj);
    private static Attachment GetNormalAttachment(JObject lgJObj);
    private static Attachment GetCardAtttachment(string type, JObject lgJObj);
    private static bool IsValidBooleanValue(JToken value, Boolean& boolResult);
    private static JToken NormalizedToMediaOrImage(JToken item);
    private static IList`1<JToken> NormalizedToList(JToken item);
    private static bool IsStringValue(JToken value, String& stringValue);
    private static string GetStructureType(JObject jObj);
}
public class Microsoft.Bot.Builder.ActivityHandler : object {
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ActivityHandler/<OnTurnAsync>d__0")]
public virtual Task OnTurnAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    protected static InvokeResponse CreateInvokeResponse(object body);
    protected virtual Task OnMessageActivityAsync(ITurnContext`1<IMessageActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnMessageUpdateActivityAsync(ITurnContext`1<IMessageUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnMessageDeleteActivityAsync(ITurnContext`1<IMessageDeleteActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnConversationUpdateActivityAsync(ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnMembersAddedAsync(IList`1<ChannelAccount> membersAdded, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnMembersRemovedAsync(IList`1<ChannelAccount> membersRemoved, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ActivityHandler/<OnMessageReactionActivityAsync>d__8")]
protected virtual Task OnMessageReactionActivityAsync(ITurnContext`1<IMessageReactionActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnReactionsAddedAsync(IList`1<MessageReaction> messageReactions, ITurnContext`1<IMessageReactionActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnReactionsRemovedAsync(IList`1<MessageReaction> messageReactions, ITurnContext`1<IMessageReactionActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnEventActivityAsync(ITurnContext`1<IEventActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTokenResponseEventAsync(ITurnContext`1<IEventActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnEventAsync(ITurnContext`1<IEventActivity> turnContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ActivityHandler/<OnInvokeActivityAsync>d__14")]
protected virtual Task`1<InvokeResponse> OnInvokeActivityAsync(ITurnContext`1<IInvokeActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnSignInInvokeAsync(ITurnContext`1<IInvokeActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task`1<AdaptiveCardInvokeResponse> OnAdaptiveCardInvokeAsync(ITurnContext`1<IInvokeActivity> turnContext, AdaptiveCardInvokeValue invokeValue, CancellationToken cancellationToken);
    protected virtual Task`1<SearchInvokeResponse> OnSearchInvokeAsync(ITurnContext`1<IInvokeActivity> turnContext, SearchInvokeValue invokeValue, CancellationToken cancellationToken);
    protected virtual Task OnEndOfConversationActivityAsync(ITurnContext`1<IEndOfConversationActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTypingActivityAsync(ITurnContext`1<ITypingActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnInstallationUpdateActivityAsync(ITurnContext`1<IInstallationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnInstallationUpdateAddAsync(ITurnContext`1<IInstallationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnInstallationUpdateRemoveAsync(ITurnContext`1<IInstallationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnCommandActivityAsync(ITurnContext`1<ICommandActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnCommandResultActivityAsync(ITurnContext`1<ICommandResultActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnUnrecognizedActivityTypeAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    private static SearchInvokeValue GetSearchInvokeValue(IInvokeActivity activity);
    private static void ValidateSearchInvokeValue(SearchInvokeValue searchInvokeValue, string channelId);
    private static AdaptiveCardInvokeValue GetAdaptiveCardInvokeValue(IInvokeActivity activity);
    private static AdaptiveCardInvokeResponse CreateAdaptiveCardInvokeErrorResponse(HttpStatusCode statusCode, string code, string message);
}
[ExtensionAttribute]
public static class Microsoft.Bot.Builder.AdapterExtensions : object {
    [ExtensionAttribute]
public static BotAdapter UseStorage(BotAdapter botAdapter, IStorage storage);
    [ExtensionAttribute]
public static BotAdapter UseBotState(BotAdapter botAdapter, BotState[] botStates);
    [ExtensionAttribute]
[ObsoleteAttribute("This method is deprecated in 4.9.  You should use the method .UseBotState() instead.")]
public static BotAdapter UseState(BotAdapter botAdapter, UserState userState, ConversationState conversationState, bool auto);
}
public class Microsoft.Bot.Builder.Adapters.TestAdapter : BotAdapter {
    private static string ExceptionExpected;
    private bool _sendTraceActivity;
    private object _conversationLock;
    private object _activeQueueLock;
    private IDictionary`2<UserTokenKey, string> _userTokens;
    private IDictionary`2<ExchangableTokenKey, string> _exchangableToken;
    private IList`1<TokenMagicCode> _magicCodes;
    private int _nextId;
    private Queue`1<TaskCompletionSource`1<IActivity>> _queuedRequests;
    [CompilerGeneratedAttribute]
private string <Locale>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue`1<Activity> <ActiveQueue>k__BackingField;
    [CompilerGeneratedAttribute]
private ConversationReference <Conversation>k__BackingField;
    public bool EnableTrace { get; public set; }
    public string Locale { get; public set; }
    public Queue`1<Activity> ActiveQueue { get; }
    public ConversationReference Conversation { get; public set; }
    public TestAdapter(string channelId, bool sendTraceActivity);
    public TestAdapter(ConversationReference conversation, bool sendTraceActivity);
    public bool get_EnableTrace();
    public void set_EnableTrace(bool value);
    [CompilerGeneratedAttribute]
public string get_Locale();
    [CompilerGeneratedAttribute]
public void set_Locale(string value);
    [CompilerGeneratedAttribute]
public Queue`1<Activity> get_ActiveQueue();
    [CompilerGeneratedAttribute]
public ConversationReference get_Conversation();
    [CompilerGeneratedAttribute]
public void set_Conversation(ConversationReference value);
    public static ConversationReference CreateConversation(string name, string user, string bot);
    public TestAdapter Use(IMiddleware middleware);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Adapters.TestAdapter/<ProcessActivityAsync>d__27")]
public Task ProcessActivityAsync(Activity activity, BotCallbackHandler callback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Adapters.TestAdapter/<ProcessActivityAsync>d__28")]
public virtual Task`1<InvokeResponse> ProcessActivityAsync(ClaimsIdentity claimsIdentity, Activity activity, BotCallbackHandler callback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Adapters.TestAdapter/<SendActivitiesAsync>d__29")]
public virtual Task`1<ResourceResponse[]> SendActivitiesAsync(ITurnContext turnContext, Activity[] activities, CancellationToken cancellationToken);
    public virtual Task`1<ResourceResponse> UpdateActivityAsync(ITurnContext turnContext, Activity activity, CancellationToken cancellationToken);
    public virtual Task DeleteActivityAsync(ITurnContext turnContext, ConversationReference reference, CancellationToken cancellationToken);
    public Task CreateConversationAsync(string channelId, BotCallbackHandler callback, CancellationToken cancellationToken);
    public IActivity GetNextReply();
    public Task`1<IActivity> GetNextReplyAsync(CancellationToken cancellationToken);
    public Activity MakeActivity(string text);
    public virtual Task SendTextToBotAsync(string userSays, BotCallbackHandler callback, CancellationToken cancellationToken);
    public void AddUserToken(string connectionName, string channelId, string userId, string token, string magicCode);
    public void AddExchangeableToken(string connectionName, string channelId, string userId, string exchangableItem, string token);
    public void ThrowOnExchangeRequest(string connectionName, string channelId, string userId, string exchangableItem);
    public virtual Task`1<TokenResponse> GetUserTokenAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string magicCode, CancellationToken cancellationToken);
    public virtual Task`1<TokenResponse> GetUserTokenAsync(ITurnContext turnContext, string connectionName, string magicCode, CancellationToken cancellationToken);
    public virtual Task`1<string> GetOauthSignInLinkAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, CancellationToken cancellationToken);
    public virtual Task`1<string> GetOauthSignInLinkAsync(ITurnContext turnContext, string connectionName, CancellationToken cancellationToken);
    public virtual Task`1<string> GetOauthSignInLinkAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string userId, string finalRedirect, CancellationToken cancellationToken);
    public virtual Task`1<string> GetOauthSignInLinkAsync(ITurnContext turnContext, string connectionName, string userId, string finalRedirect, CancellationToken cancellationToken);
    public virtual Task SignOutUserAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string userId, CancellationToken cancellationToken);
    public virtual Task SignOutUserAsync(ITurnContext turnContext, string connectionName, string userId, CancellationToken cancellationToken);
    public virtual Task`1<TokenStatus[]> GetTokenStatusAsync(ITurnContext context, AppCredentials oAuthAppCredentials, string userId, string includeFilter, CancellationToken cancellationToken);
    public virtual Task`1<TokenStatus[]> GetTokenStatusAsync(ITurnContext context, string userId, string includeFilter, CancellationToken cancellationToken);
    public virtual Task`1<Dictionary`2<string, TokenResponse>> GetAadTokensAsync(ITurnContext context, AppCredentials oAuthAppCredentials, string connectionName, String[] resourceUrls, string userId, CancellationToken cancellationToken);
    public virtual Task`1<Dictionary`2<string, TokenResponse>> GetAadTokensAsync(ITurnContext context, string connectionName, String[] resourceUrls, string userId, CancellationToken cancellationToken);
    public sealed virtual Task`1<SignInResource> GetSignInResourceAsync(ITurnContext turnContext, string connectionName, CancellationToken cancellationToken);
    public sealed virtual Task`1<SignInResource> GetSignInResourceAsync(ITurnContext turnContext, string connectionName, string userId, string finalRedirect, CancellationToken cancellationToken);
    public virtual Task`1<SignInResource> GetSignInResourceAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string userId, string finalRedirect, CancellationToken cancellationToken);
    public sealed virtual Task`1<TokenResponse> ExchangeTokenAsync(ITurnContext turnContext, string connectionName, string userId, TokenExchangeRequest exchangeRequest, CancellationToken cancellationToken);
    public sealed virtual Task`1<TokenResponse> ExchangeTokenAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string userId, TokenExchangeRequest exchangeRequest, CancellationToken cancellationToken);
    protected virtual TurnContext CreateTurnContext(Activity activity);
    private void Enqueue(Activity activity);
}
public class Microsoft.Bot.Builder.Adapters.TestFlow : object {
    private TestAdapter _adapter;
    private Task _testTask;
    private BotCallbackHandler _callback;
    public TestFlow(TestAdapter adapter, BotCallbackHandler callback);
    public TestFlow(Task task, TestFlow flow);
    public TestFlow(Func`1<Task> getTask, TestFlow flow);
    public TestFlow(TestAdapter adapter, IBot bot);
    public Task StartTestAsync();
    public TestFlow Send(string userSays);
    public TestFlow SendConversationUpdate();
    public TestFlow Send(IActivity userActivity);
    public TestFlow Delay(UInt32 ms);
    public TestFlow Delay(TimeSpan timespan);
    public TestFlow AssertReply(string expected, string description, UInt32 timeout);
    public TestFlow AssertReplyContains(string expected, string description, UInt32 timeout);
    public TestFlow AssertReply(IActivity expected, string description, UInt32 timeout);
    public TestFlow AssertReply(IActivity expected, IEqualityComparer`1<IActivity> equalityComparer, string description, UInt32 timeout);
    public TestFlow AssertReply(Action`1<IActivity> validateActivity, string description, UInt32 timeout);
    public TestFlow AssertNoReply(string description, UInt32 timeout);
    public TestFlow Test(string userSays, string expected, string description, UInt32 timeout);
    public TestFlow Test(string userSays, Activity expected, string description, UInt32 timeout);
    public TestFlow Test(string userSays, Action`1<IActivity> validateActivity, string description, UInt32 timeout);
    public TestFlow Test(IEnumerable`1<IActivity> activities, string description, UInt32 timeout);
    public TestFlow Test(IEnumerable`1<IActivity> activities, ValidateReply validateReply, string description, UInt32 timeout);
    public TestFlow AssertReplyOneOf(String[] candidates, string description, UInt32 timeout);
    private static bool IsReply(IActivity activity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Adapters.TestFlow/<<SendConversationUpdate>b__9_0>d")]
[CompilerGeneratedAttribute]
private Task <SendConversationUpdate>b__9_0();
}
public class Microsoft.Bot.Builder.Adapters.ValidateReply : MulticastDelegate {
    public ValidateReply(object object, IntPtr method);
    public virtual void Invoke(IActivity expected, IActivity actual);
    public virtual IAsyncResult BeginInvoke(IActivity expected, IActivity actual, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Bot.Builder.AllowedTypesSerializationBinder : DefaultSerializationBinder {
    [CompilerGeneratedAttribute]
private IList`1<Type> <AllowedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Type> <DeniedTypes>k__BackingField;
    public IList`1<Type> AllowedTypes { get; }
    private IList`1<Type> DeniedTypes { get; }
    public AllowedTypesSerializationBinder(IList`1<Type> allowedTypes);
    [CompilerGeneratedAttribute]
public IList`1<Type> get_AllowedTypes();
    [CompilerGeneratedAttribute]
private IList`1<Type> get_DeniedTypes();
    public virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
    public virtual Type BindToType(string assemblyName, string typeName);
    public void Verify();
    private Func`2<Type, bool> IsTypeEqualTo(Type second);
    private void ThrowDeniedTypesError(IList`1<Type> types);
    private bool IsTypeAllowed(Type serializedType);
    private void AllowType(Type type);
    private void DenyType(Type type);
}
public class Microsoft.Bot.Builder.AutoSaveStateMiddleware : object {
    [CompilerGeneratedAttribute]
private BotStateSet <BotStateSet>k__BackingField;
    public BotStateSet BotStateSet { get; public set; }
    public AutoSaveStateMiddleware(BotState[] botStates);
    public AutoSaveStateMiddleware(BotStateSet botStateSet);
    [CompilerGeneratedAttribute]
public BotStateSet get_BotStateSet();
    [CompilerGeneratedAttribute]
public void set_BotStateSet(BotStateSet value);
    public AutoSaveStateMiddleware Add(BotState botState);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.AutoSaveStateMiddleware/<OnTurnAsync>d__7")]
public sealed virtual Task OnTurnAsync(ITurnContext turnContext, NextDelegate next, CancellationToken cancellationToken);
}
public abstract class Microsoft.Bot.Builder.BotAdapter : object {
    public static string InvokeResponseKey;
    public static string BotIdentityKey;
    public static string OAuthScopeKey;
    [CompilerGeneratedAttribute]
private Func`3<ITurnContext, Exception, Task> <OnTurnError>k__BackingField;
    [CompilerGeneratedAttribute]
private MiddlewareSet <MiddlewareSet>k__BackingField;
    public Func`3<ITurnContext, Exception, Task> OnTurnError { get; public set; }
    public MiddlewareSet MiddlewareSet { get; }
    [CompilerGeneratedAttribute]
public Func`3<ITurnContext, Exception, Task> get_OnTurnError();
    [CompilerGeneratedAttribute]
public void set_OnTurnError(Func`3<ITurnContext, Exception, Task> value);
    [CompilerGeneratedAttribute]
public MiddlewareSet get_MiddlewareSet();
    public BotAdapter Use(IMiddleware middleware);
    public abstract virtual Task`1<ResourceResponse[]> SendActivitiesAsync(ITurnContext turnContext, Activity[] activities, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse> UpdateActivityAsync(ITurnContext turnContext, Activity activity, CancellationToken cancellationToken);
    public abstract virtual Task DeleteActivityAsync(ITurnContext turnContext, ConversationReference reference, CancellationToken cancellationToken);
    public virtual Task ContinueConversationAsync(string botId, ConversationReference reference, BotCallbackHandler callback, CancellationToken cancellationToken);
    public virtual Task ContinueConversationAsync(ClaimsIdentity claimsIdentity, ConversationReference reference, BotCallbackHandler callback, CancellationToken cancellationToken);
    public virtual Task ContinueConversationAsync(ClaimsIdentity claimsIdentity, ConversationReference reference, string audience, BotCallbackHandler callback, CancellationToken cancellationToken);
    public virtual Task ContinueConversationAsync(string botId, Activity continuationActivity, BotCallbackHandler callback, CancellationToken cancellationToken);
    public virtual Task ContinueConversationAsync(ClaimsIdentity claimsIdentity, Activity continuationActivity, BotCallbackHandler callback, CancellationToken cancellationToken);
    public virtual Task ContinueConversationAsync(ClaimsIdentity claimsIdentity, Activity continuationActivity, string audience, BotCallbackHandler callback, CancellationToken cancellationToken);
    public virtual Task CreateConversationAsync(string botAppId, string channelId, string serviceUrl, string audience, ConversationParameters conversationParameters, BotCallbackHandler callback, CancellationToken cancellationToken);
    public virtual Task`1<InvokeResponse> ProcessActivityAsync(ClaimsIdentity claimsIdentity, Activity activity, BotCallbackHandler callback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotAdapter/<RunPipelineAsync>d__23")]
protected Task RunPipelineAsync(ITurnContext turnContext, BotCallbackHandler callback, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.BotAssert : object {
    public static void ActivityNotNull(IActivity activity);
    public static void ContextNotNull(ITurnContext turnContext);
    public static void ConversationReferenceNotNull(ConversationReference reference);
    public static void ActivityListNotNull(IEnumerable`1<Activity> activities);
    public static void MiddlewareNotNull(IMiddleware middleware);
    public static void MiddlewareNotNull(IEnumerable`1<IMiddleware> middleware);
}
public class Microsoft.Bot.Builder.BotCallbackHandler : MulticastDelegate {
    public BotCallbackHandler(object object, IntPtr method);
    public virtual Task Invoke(ITurnContext turnContext, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(ITurnContext turnContext, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public abstract class Microsoft.Bot.Builder.BotComponent : object {
    public abstract virtual void ConfigureServices(IServiceCollection services, IConfiguration configuration);
}
public class Microsoft.Bot.Builder.BotFrameworkAdapter : BotAdapter {
    private static HttpClient DefaultHttpClient;
    private HttpClient _httpClient;
    private RetryPolicy _connectorClientRetryPolicy;
    private AppCredentials _appCredentials;
    private AuthenticationConfiguration _authConfiguration;
    private JsonSerializerSettings _settings;
    private ConcurrentDictionary`2<string, AppCredentials> _appCredentialMap;
    private ConcurrentDictionary`2<string, ConnectorClient> _connectorClients;
    private ConcurrentDictionary`2<string, OAuthClient> _oAuthClients;
    [CompilerGeneratedAttribute]
private ICredentialProvider <CredentialProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IChannelProvider <ChannelProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected ICredentialProvider CredentialProvider { get; private set; }
    protected IChannelProvider ChannelProvider { get; private set; }
    protected ILogger Logger { get; private set; }
    protected ConcurrentDictionary`2<string, AppCredentials> AppCredentialMap { get; }
    protected HttpClient HttpClient { get; }
    public BotFrameworkAdapter(ICredentialProvider credentialProvider, IChannelProvider channelProvider, RetryPolicy connectorClientRetryPolicy, HttpClient customHttpClient, IMiddleware middleware, ILogger logger);
    public BotFrameworkAdapter(ICredentialProvider credentialProvider, AuthenticationConfiguration authConfig, IChannelProvider channelProvider, RetryPolicy connectorClientRetryPolicy, HttpClient customHttpClient, IMiddleware middleware, ILogger logger);
    public BotFrameworkAdapter(AppCredentials credentials, AuthenticationConfiguration authConfig, IChannelProvider channelProvider, RetryPolicy connectorClientRetryPolicy, HttpClient customHttpClient, IMiddleware middleware, ILogger logger);
    private static BotFrameworkAdapter();
    [CompilerGeneratedAttribute]
protected ICredentialProvider get_CredentialProvider();
    [CompilerGeneratedAttribute]
private void set_CredentialProvider(ICredentialProvider value);
    [CompilerGeneratedAttribute]
protected IChannelProvider get_ChannelProvider();
    [CompilerGeneratedAttribute]
private void set_ChannelProvider(IChannelProvider value);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    protected ConcurrentDictionary`2<string, AppCredentials> get_AppCredentialMap();
    protected HttpClient get_HttpClient();
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<ContinueConversationAsync>d__28")]
public virtual Task ContinueConversationAsync(string botAppId, ConversationReference reference, BotCallbackHandler callback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<ContinueConversationAsync>d__29")]
public virtual Task ContinueConversationAsync(ClaimsIdentity claimsIdentity, ConversationReference reference, BotCallbackHandler callback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<ContinueConversationAsync>d__30")]
public virtual Task ContinueConversationAsync(ClaimsIdentity claimsIdentity, ConversationReference reference, string audience, BotCallbackHandler callback, CancellationToken cancellationToken);
    public BotFrameworkAdapter Use(IMiddleware middleware);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<ProcessActivityAsync>d__32")]
public sealed virtual Task`1<InvokeResponse> ProcessActivityAsync(string authHeader, Activity activity, BotCallbackHandler callback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<ProcessActivityAsync>d__33")]
public virtual Task`1<InvokeResponse> ProcessActivityAsync(ClaimsIdentity claimsIdentity, Activity activity, BotCallbackHandler callback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<SendActivitiesAsync>d__34")]
public virtual Task`1<ResourceResponse[]> SendActivitiesAsync(ITurnContext turnContext, Activity[] activities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<UpdateActivityAsync>d__35")]
public virtual Task`1<ResourceResponse> UpdateActivityAsync(ITurnContext turnContext, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<DeleteActivityAsync>d__36")]
public virtual Task DeleteActivityAsync(ITurnContext turnContext, ConversationReference reference, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<DeleteConversationMemberAsync>d__37")]
public virtual Task DeleteConversationMemberAsync(ITurnContext turnContext, string memberId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetActivityMembersAsync>d__38")]
public virtual Task`1<IList`1<ChannelAccount>> GetActivityMembersAsync(ITurnContext turnContext, string activityId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetConversationMembersAsync>d__39")]
public virtual Task`1<IList`1<ChannelAccount>> GetConversationMembersAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetConversationsAsync>d__40")]
public Task`1<ConversationsResult> GetConversationsAsync(string serviceUrl, MicrosoftAppCredentials credentials, string continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetConversationsAsync>d__41")]
public virtual Task`1<ConversationsResult> GetConversationsAsync(ITurnContext turnContext, string continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetUserTokenAsync>d__42")]
public virtual Task`1<TokenResponse> GetUserTokenAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string magicCode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetUserTokenAsync>d__43")]
public virtual Task`1<TokenResponse> GetUserTokenAsync(ITurnContext turnContext, string connectionName, string magicCode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetOauthSignInLinkAsync>d__44")]
public virtual Task`1<string> GetOauthSignInLinkAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetOauthSignInLinkAsync>d__45")]
public virtual Task`1<string> GetOauthSignInLinkAsync(ITurnContext turnContext, string connectionName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetOauthSignInLinkAsync>d__46")]
public virtual Task`1<string> GetOauthSignInLinkAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string userId, string finalRedirect, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetOauthSignInLinkAsync>d__47")]
public virtual Task`1<string> GetOauthSignInLinkAsync(ITurnContext turnContext, string connectionName, string userId, string finalRedirect, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<SignOutUserAsync>d__48")]
public virtual Task SignOutUserAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string userId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<SignOutUserAsync>d__49")]
public virtual Task SignOutUserAsync(ITurnContext turnContext, string connectionName, string userId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetTokenStatusAsync>d__50")]
public virtual Task`1<TokenStatus[]> GetTokenStatusAsync(ITurnContext context, AppCredentials oAuthAppCredentials, string userId, string includeFilter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetTokenStatusAsync>d__51")]
public virtual Task`1<TokenStatus[]> GetTokenStatusAsync(ITurnContext context, string userId, string includeFilter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetAadTokensAsync>d__52")]
public virtual Task`1<Dictionary`2<string, TokenResponse>> GetAadTokensAsync(ITurnContext context, AppCredentials oAuthAppCredentials, string connectionName, String[] resourceUrls, string userId, CancellationToken cancellationToken);
    public virtual Task`1<SignInResource> GetSignInResourceAsync(ITurnContext turnContext, string connectionName, CancellationToken cancellationToken);
    public virtual Task`1<SignInResource> GetSignInResourceAsync(ITurnContext turnContext, string connectionName, string userId, string finalRedirect, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetSignInResourceAsync>d__55")]
public virtual Task`1<SignInResource> GetSignInResourceAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string userId, string finalRedirect, CancellationToken cancellationToken);
    public virtual Task`1<TokenResponse> ExchangeTokenAsync(ITurnContext turnContext, string connectionName, string userId, TokenExchangeRequest exchangeRequest, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<ExchangeTokenAsync>d__57")]
public virtual Task`1<TokenResponse> ExchangeTokenAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string userId, TokenExchangeRequest exchangeRequest, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetAadTokensAsync>d__58")]
public virtual Task`1<Dictionary`2<string, TokenResponse>> GetAadTokensAsync(ITurnContext context, string connectionName, String[] resourceUrls, string userId, CancellationToken cancellationToken);
    public virtual Task CreateConversationAsync(string channelId, string serviceUrl, MicrosoftAppCredentials credentials, ConversationParameters conversationParameters, BotCallbackHandler callback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<CreateConversationAsync>d__60")]
public virtual Task CreateConversationAsync(string channelId, string serviceUrl, AppCredentials credentials, ConversationParameters conversationParameters, BotCallbackHandler callback, CancellationToken cancellationToken);
    [ObsoleteAttribute("This method is now obsolete because the ConversationReference argument is now redundant. Use the overload without this argument.")]
public virtual Task CreateConversationAsync(string channelId, string serviceUrl, MicrosoftAppCredentials credentials, ConversationParameters conversationParameters, BotCallbackHandler callback, ConversationReference reference, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<CreateConversationAsync>d__62")]
[ObsoleteAttribute("This method is now obsolete because the ConversationReference argument is now redundant. Use the overload without this argument.")]
public virtual Task CreateConversationAsync(string channelId, string serviceUrl, AppCredentials credentials, ConversationParameters conversationParameters, BotCallbackHandler callback, ConversationReference reference, CancellationToken cancellationToken);
    private sealed virtual override Task`1<IConnectorClient> Microsoft.Bot.Builder.OAuth.IConnectorClientBuilder.CreateConnectorClientAsync(string serviceUrl, ClaimsIdentity claimsIdentity, string audience, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<CreateOAuthApiClientAsync>d__64")]
protected virtual Task`1<OAuthClient> CreateOAuthApiClientAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<CreateOAuthApiClientAsync>d__65")]
protected virtual Task`1<OAuthClient> CreateOAuthApiClientAsync(ITurnContext turnContext);
    protected virtual bool CanProcessOutgoingActivity(Activity activity);
    protected virtual Task`1<ResourceResponse> ProcessOutgoingActivityAsync(ITurnContext turnContext, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<BuildCredentialsAsync>d__68")]
protected virtual Task`1<AppCredentials> BuildCredentialsAsync(string appId, string oAuthScope);
    private static string GetBotAppId(ITurnContext turnContext);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GenerateCallerIdAsync>d__70")]
private Task`1<string> GenerateCallerIdAsync(ClaimsIdentity claimsIdentity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<CreateConnectorClientAsync>d__71")]
private Task`1<IConnectorClient> CreateConnectorClientAsync(string serviceUrl, ClaimsIdentity claimsIdentity, string audience);
    private IConnectorClient CreateConnectorClient(string serviceUrl, AppCredentials appCredentials);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotFrameworkAdapter/<GetAppCredentialsAsync>d__73")]
private Task`1<AppCredentials> GetAppCredentialsAsync(string appId, string oAuthScope);
    private string GetBotFrameworkOAuthScope();
    private void LogAndThrowException(Exception ex, string source);
}
public class Microsoft.Bot.Builder.BotFrameworkHttpStatusCodeErrorDetectionStrategy : object {
    public sealed virtual bool IsTransient(Exception ex);
}
public abstract class Microsoft.Bot.Builder.BotState : object {
    private string _contextServiceKey;
    private IStorage _storage;
    public BotState(IStorage storage, string contextServiceKey);
    public sealed virtual IStatePropertyAccessor`1<T> CreateProperty(string name);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotState/<LoadAsync>d__4")]
public virtual Task LoadAsync(ITurnContext turnContext, bool force, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotState/<SaveChangesAsync>d__5")]
public virtual Task SaveChangesAsync(ITurnContext turnContext, bool force, CancellationToken cancellationToken);
    public virtual Task ClearStateAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotState/<DeleteAsync>d__7")]
public virtual Task DeleteAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    public JToken Get(ITurnContext turnContext);
    public CachedBotState GetCachedState(ITurnContext turnContext);
    protected abstract virtual string GetStorageKey(ITurnContext turnContext);
    protected Task`1<T> GetPropertyValueAsync(ITurnContext turnContext, string propertyName, CancellationToken cancellationToken);
    protected Task DeletePropertyValueAsync(ITurnContext turnContext, string propertyName, CancellationToken cancellationToken);
    protected Task SetPropertyValueAsync(ITurnContext turnContext, string propertyName, object value, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.BotStateSet : object {
    [CompilerGeneratedAttribute]
private List`1<BotState> <BotStates>k__BackingField;
    public List`1<BotState> BotStates { get; public set; }
    public BotStateSet(BotState[] botStates);
    [CompilerGeneratedAttribute]
public List`1<BotState> get_BotStates();
    [CompilerGeneratedAttribute]
public void set_BotStates(List`1<BotState> value);
    public BotStateSet Add(BotState botState);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotStateSet/<LoadAllAsync>d__6")]
public Task LoadAllAsync(ITurnContext turnContext, bool force, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.BotStateSet/<SaveAllChangesAsync>d__7")]
public Task SaveAllChangesAsync(ITurnContext turnContext, bool force, CancellationToken cancellationToken);
}
[ObsoleteAttribute("Use `CloudChannelServiceHandler` instead.", "False")]
public class Microsoft.Bot.Builder.ChannelServiceHandler : ChannelServiceHandlerBase {
    private AuthenticationConfiguration _authConfiguration;
    private ICredentialProvider _credentialProvider;
    [CompilerGeneratedAttribute]
private IChannelProvider <ChannelProvider>k__BackingField;
    protected IChannelProvider ChannelProvider { get; }
    public ChannelServiceHandler(ICredentialProvider credentialProvider, AuthenticationConfiguration authConfiguration, IChannelProvider channelProvider);
    [CompilerGeneratedAttribute]
protected IChannelProvider get_ChannelProvider();
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ChannelServiceHandler/<AuthenticateAsync>d__6")]
internal virtual Task`1<ClaimsIdentity> AuthenticateAsync(string authHeader, CancellationToken cancellationToken);
}
public abstract class Microsoft.Bot.Builder.ChannelServiceHandlerBase : object {
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ChannelServiceHandlerBase/<HandleSendToConversationAsync>d__0")]
public Task`1<ResourceResponse> HandleSendToConversationAsync(string authHeader, string conversationId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ChannelServiceHandlerBase/<HandleReplyToActivityAsync>d__1")]
public Task`1<ResourceResponse> HandleReplyToActivityAsync(string authHeader, string conversationId, string activityId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ChannelServiceHandlerBase/<HandleUpdateActivityAsync>d__2")]
public Task`1<ResourceResponse> HandleUpdateActivityAsync(string authHeader, string conversationId, string activityId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ChannelServiceHandlerBase/<HandleDeleteActivityAsync>d__3")]
public Task HandleDeleteActivityAsync(string authHeader, string conversationId, string activityId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ChannelServiceHandlerBase/<HandleGetActivityMembersAsync>d__4")]
public Task`1<IList`1<ChannelAccount>> HandleGetActivityMembersAsync(string authHeader, string conversationId, string activityId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ChannelServiceHandlerBase/<HandleCreateConversationAsync>d__5")]
public Task`1<ConversationResourceResponse> HandleCreateConversationAsync(string authHeader, ConversationParameters parameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ChannelServiceHandlerBase/<HandleGetConversationsAsync>d__6")]
public Task`1<ConversationsResult> HandleGetConversationsAsync(string authHeader, string conversationId, string continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ChannelServiceHandlerBase/<HandleGetConversationMembersAsync>d__7")]
public Task`1<IList`1<ChannelAccount>> HandleGetConversationMembersAsync(string authHeader, string conversationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ChannelServiceHandlerBase/<HandleGetConversationMemberAsync>d__8")]
public Task`1<ChannelAccount> HandleGetConversationMemberAsync(string authHeader, string userId, string conversationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ChannelServiceHandlerBase/<HandleGetConversationPagedMembersAsync>d__9")]
public Task`1<PagedMembersResult> HandleGetConversationPagedMembersAsync(string authHeader, string conversationId, Nullable`1<int> pageSize, string continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ChannelServiceHandlerBase/<HandleDeleteConversationMemberAsync>d__10")]
public Task HandleDeleteConversationMemberAsync(string authHeader, string conversationId, string memberId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ChannelServiceHandlerBase/<HandleSendConversationHistoryAsync>d__11")]
public Task`1<ResourceResponse> HandleSendConversationHistoryAsync(string authHeader, string conversationId, Transcript transcript, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ChannelServiceHandlerBase/<HandleUploadAttachmentAsync>d__12")]
public Task`1<ResourceResponse> HandleUploadAttachmentAsync(string authHeader, string conversationId, AttachmentData attachmentUpload, CancellationToken cancellationToken);
    internal abstract virtual Task`1<ClaimsIdentity> AuthenticateAsync(string authHeader, CancellationToken cancellationToken);
    protected virtual Task`1<ResourceResponse> OnSendToConversationAsync(ClaimsIdentity claimsIdentity, string conversationId, Activity activity, CancellationToken cancellationToken);
    protected virtual Task`1<ResourceResponse> OnReplyToActivityAsync(ClaimsIdentity claimsIdentity, string conversationId, string activityId, Activity activity, CancellationToken cancellationToken);
    protected virtual Task`1<ResourceResponse> OnUpdateActivityAsync(ClaimsIdentity claimsIdentity, string conversationId, string activityId, Activity activity, CancellationToken cancellationToken);
    protected virtual Task OnDeleteActivityAsync(ClaimsIdentity claimsIdentity, string conversationId, string activityId, CancellationToken cancellationToken);
    protected virtual Task`1<IList`1<ChannelAccount>> OnGetActivityMembersAsync(ClaimsIdentity claimsIdentity, string conversationId, string activityId, CancellationToken cancellationToken);
    protected virtual Task`1<ConversationResourceResponse> OnCreateConversationAsync(ClaimsIdentity claimsIdentity, ConversationParameters parameters, CancellationToken cancellationToken);
    protected virtual Task`1<ConversationsResult> OnGetConversationsAsync(ClaimsIdentity claimsIdentity, string conversationId, string continuationToken, CancellationToken cancellationToken);
    protected virtual Task`1<IList`1<ChannelAccount>> OnGetConversationMembersAsync(ClaimsIdentity claimsIdentity, string conversationId, CancellationToken cancellationToken);
    protected virtual Task`1<ChannelAccount> OnGetConversationMemberAsync(ClaimsIdentity claimsIdentity, string userId, string conversationId, CancellationToken cancellationToken);
    protected virtual Task`1<PagedMembersResult> OnGetConversationPagedMembersAsync(ClaimsIdentity claimsIdentity, string conversationId, Nullable`1<int> pageSize, string continuationToken, CancellationToken cancellationToken);
    protected virtual Task OnDeleteConversationMemberAsync(ClaimsIdentity claimsIdentity, string conversationId, string memberId, CancellationToken cancellationToken);
    protected virtual Task`1<ResourceResponse> OnSendConversationHistoryAsync(ClaimsIdentity claimsIdentity, string conversationId, Transcript transcript, CancellationToken cancellationToken);
    protected virtual Task`1<ResourceResponse> OnUploadAttachmentAsync(ClaimsIdentity claimsIdentity, string conversationId, AttachmentData attachmentUpload, CancellationToken cancellationToken);
}
public abstract class Microsoft.Bot.Builder.CloudAdapterBase : BotAdapter {
    [CompilerGeneratedAttribute]
private BotFrameworkAuthentication <BotFrameworkAuthentication>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected BotFrameworkAuthentication BotFrameworkAuthentication { get; private set; }
    protected ILogger Logger { get; private set; }
    protected CloudAdapterBase(BotFrameworkAuthentication botFrameworkAuthentication, ILogger logger);
    [CompilerGeneratedAttribute]
protected BotFrameworkAuthentication get_BotFrameworkAuthentication();
    [CompilerGeneratedAttribute]
private void set_BotFrameworkAuthentication(BotFrameworkAuthentication value);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.CloudAdapterBase/<SendActivitiesAsync>d__9")]
public virtual Task`1<ResourceResponse[]> SendActivitiesAsync(ITurnContext turnContext, Activity[] activities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.CloudAdapterBase/<UpdateActivityAsync>d__10")]
public virtual Task`1<ResourceResponse> UpdateActivityAsync(ITurnContext turnContext, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.CloudAdapterBase/<DeleteActivityAsync>d__11")]
public virtual Task DeleteActivityAsync(ITurnContext turnContext, ConversationReference reference, CancellationToken cancellationToken);
    public virtual Task ContinueConversationAsync(string botAppId, ConversationReference reference, BotCallbackHandler callback, CancellationToken cancellationToken);
    public virtual Task ContinueConversationAsync(ClaimsIdentity claimsIdentity, ConversationReference reference, BotCallbackHandler callback, CancellationToken cancellationToken);
    public virtual Task ContinueConversationAsync(ClaimsIdentity claimsIdentity, ConversationReference reference, string audience, BotCallbackHandler callback, CancellationToken cancellationToken);
    public virtual Task ContinueConversationAsync(string botAppId, Activity continuationActivity, BotCallbackHandler callback, CancellationToken cancellationToken);
    public virtual Task ContinueConversationAsync(ClaimsIdentity claimsIdentity, Activity continuationActivity, BotCallbackHandler callback, CancellationToken cancellationToken);
    public virtual Task ContinueConversationAsync(ClaimsIdentity claimsIdentity, Activity continuationActivity, string audience, BotCallbackHandler callback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.CloudAdapterBase/<CreateConversationAsync>d__18")]
public virtual Task CreateConversationAsync(string botAppId, string channelId, string serviceUrl, string audience, ConversationParameters conversationParameters, BotCallbackHandler callback, CancellationToken cancellationToken);
    protected virtual ConnectorFactory GetStreamingConnectorFactory(Activity activity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.CloudAdapterBase/<ProcessProactiveAsync>d__20")]
protected Task ProcessProactiveAsync(ClaimsIdentity claimsIdentity, Activity continuationActivity, string audience, BotCallbackHandler callback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.CloudAdapterBase/<ProcessActivityAsync>d__21")]
protected Task`1<InvokeResponse> ProcessActivityAsync(string authHeader, Activity activity, BotCallbackHandler callback, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.CloudAdapterBase/<ProcessActivityAsync>d__22")]
protected Task`1<InvokeResponse> ProcessActivityAsync(AuthenticateRequestResult authenticateRequestResult, Activity activity, BotCallbackHandler callback, CancellationToken cancellationToken);
    protected ClaimsIdentity CreateClaimsIdentity(string botAppId);
    private Activity CreateCreateActivity(ConversationResourceResponse createConversationResult, string channelId, string serviceUrl, ConversationParameters conversationParameters);
    private TurnContext CreateTurnContext(Activity activity, ClaimsIdentity claimsIdentity, string oauthScope, IConnectorClient connectorClient, UserTokenClient userTokenClient, BotCallbackHandler callback, ConnectorFactory connectorFactory);
    private void ValidateContinuationActivity(Activity continuationActivity);
    private InvokeResponse ProcessTurnResults(TurnContext turnContext);
}
public class Microsoft.Bot.Builder.CloudChannelServiceHandler : ChannelServiceHandlerBase {
    private BotFrameworkAuthentication _auth;
    public CloudChannelServiceHandler(BotFrameworkAuthentication auth);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.CloudChannelServiceHandler/<AuthenticateAsync>d__2")]
internal virtual Task`1<ClaimsIdentity> AuthenticateAsync(string authHeader, CancellationToken cancellationToken);
}
[ObsoleteAttribute("Use `BotComponent` for new components.")]
public class Microsoft.Bot.Builder.ComponentRegistration : object {
    private static ConcurrentDictionary`2<Type, ComponentRegistration> _components;
    [ObsoleteAttribute("Use resource explorer")]
public static IEnumerable`1<object> Components { get; }
    private static ComponentRegistration();
    public static IEnumerable`1<object> get_Components();
    [ObsoleteAttribute("Use resource explorer")]
public static void Add(ComponentRegistration componentRegistration);
}
public class Microsoft.Bot.Builder.ConversationState : BotState {
    public ConversationState(IStorage storage);
    protected virtual string GetStorageKey(ITurnContext turnContext);
}
public class Microsoft.Bot.Builder.DelegatingTurnContext`1 : object {
    private ITurnContext _innerTurnContext;
    private T Microsoft.Bot.Builder.ITurnContext<T>.Activity { get; }
    public BotAdapter Adapter { get; }
    public TurnContextStateCollection TurnState { get; }
    public Activity Activity { get; }
    public bool Responded { get; }
    public DelegatingTurnContext`1(ITurnContext innerTurnContext);
    private sealed virtual override T Microsoft.Bot.Builder.ITurnContext<T>.get_Activity();
    public sealed virtual BotAdapter get_Adapter();
    public sealed virtual TurnContextStateCollection get_TurnState();
    public sealed virtual Activity get_Activity();
    public sealed virtual bool get_Responded();
    public sealed virtual Task DeleteActivityAsync(string activityId, CancellationToken cancellationToken);
    public sealed virtual Task DeleteActivityAsync(ConversationReference conversationReference, CancellationToken cancellationToken);
    public sealed virtual ITurnContext OnDeleteActivity(DeleteActivityHandler handler);
    public sealed virtual ITurnContext OnSendActivities(SendActivitiesHandler handler);
    public sealed virtual ITurnContext OnUpdateActivity(UpdateActivityHandler handler);
    public sealed virtual Task`1<ResourceResponse[]> SendActivitiesAsync(IActivity[] activities, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResourceResponse> SendActivityAsync(string textReplyToSend, string speak, string inputHint, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResourceResponse> SendActivityAsync(IActivity activity, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResourceResponse> UpdateActivityAsync(IActivity activity, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.DeleteActivityHandler : MulticastDelegate {
    public DeleteActivityHandler(object object, IntPtr method);
    public virtual Task Invoke(ITurnContext turnContext, ConversationReference reference, Func`1<Task> next);
    public virtual IAsyncResult BeginInvoke(ITurnContext turnContext, ConversationReference reference, Func`1<Task> next, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public static class Microsoft.Bot.Builder.EventFactory : object {
    public static IEventActivity CreateHandoffInitiation(ITurnContext turnContext, object handoffContext, Transcript transcript);
    public static IEventActivity CreateHandoffStatus(ConversationAccount conversation, string state, string message);
    private static Activity CreateHandoffEvent(string name, object value, ConversationAccount conversation);
}
public class Microsoft.Bot.Builder.FileTranscriptLogger : object {
    private static JsonSerializerSettings _jsonSettings;
    private string _folder;
    private bool _unitTestMode;
    private HashSet`1<string> _started;
    public FileTranscriptLogger(string folder, bool unitTestMode);
    private static FileTranscriptLogger();
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.FileTranscriptLogger/<LogActivityAsync>d__5")]
public sealed virtual Task LogActivityAsync(IActivity activity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.FileTranscriptLogger/<GetTranscriptActivitiesAsync>d__6")]
public sealed virtual Task`1<PagedResult`1<IActivity>> GetTranscriptActivitiesAsync(string channelId, string conversationId, string continuationToken, DateTimeOffset startDate);
    public sealed virtual Task`1<PagedResult`1<TranscriptInfo>> ListTranscriptsAsync(string channelId, string continuationToken);
    public sealed virtual Task DeleteTranscriptAsync(string channelId, string conversationId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.FileTranscriptLogger/<LoadTranscriptAsync>d__9")]
private static Task`1<Activity[]> LoadTranscriptAsync(string transcriptFile);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.FileTranscriptLogger/<LogActivityAsync>d__10")]
private static Task LogActivityAsync(IActivity activity, string transcriptFile);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.FileTranscriptLogger/<MessageUpdateAsync>d__11")]
private static Task MessageUpdateAsync(IActivity activity, string transcriptFile);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.FileTranscriptLogger/<MessageDeleteAsync>d__12")]
private static Task MessageDeleteAsync(IActivity activity, string transcriptFile);
    private static string SanitizeString(string str, Char[] invalidChars);
    private string GetTranscriptFile(string channelId, string conversationId);
    private string GetChannelFolder(string channelId);
}
public interface Microsoft.Bot.Builder.IBot {
    public abstract virtual Task OnTurnAsync(ITurnContext turnContext, CancellationToken cancellationToken);
}
public interface Microsoft.Bot.Builder.IBotPageViewTelemetryClient {
    public abstract virtual void TrackPageView(string dialogName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
}
public interface Microsoft.Bot.Builder.IBotTelemetryClient {
    public abstract virtual void TrackAvailability(string name, DateTimeOffset timeStamp, TimeSpan duration, string runLocation, bool success, string message, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    public abstract virtual void TrackDependency(string dependencyTypeName, string target, string dependencyName, string data, DateTimeOffset startTime, TimeSpan duration, string resultCode, bool success);
    public abstract virtual void TrackEvent(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    public abstract virtual void TrackException(Exception exception, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    public abstract virtual void TrackTrace(string message, Severity severityLevel, IDictionary`2<string, string> properties);
    public abstract virtual void Flush();
}
[ExtensionAttribute]
public static class Microsoft.Bot.Builder.IBotTelemetryClientExtensions : object {
    [ExtensionAttribute]
public static void TrackDialogView(IBotTelemetryClient telemetryClient, string dialogName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
}
[ObsoleteAttribute("Use UserTokenClient instead. With CloudAdapter the UserTokenClient is available on TurnState.", "False")]
public interface Microsoft.Bot.Builder.IExtendedUserTokenProvider {
    public abstract virtual Task`1<TokenResponse> GetUserTokenAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string magicCode, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetOauthSignInLinkAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetOauthSignInLinkAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string userId, string finalRedirect, CancellationToken cancellationToken);
    public abstract virtual Task SignOutUserAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string userId, CancellationToken cancellationToken);
    public abstract virtual Task`1<TokenStatus[]> GetTokenStatusAsync(ITurnContext context, AppCredentials oAuthAppCredentials, string userId, string includeFilter, CancellationToken cancellationToken);
    public abstract virtual Task`1<Dictionary`2<string, TokenResponse>> GetAadTokensAsync(ITurnContext context, AppCredentials oAuthAppCredentials, string connectionName, String[] resourceUrls, string userId, CancellationToken cancellationToken);
    public abstract virtual Task`1<SignInResource> GetSignInResourceAsync(ITurnContext turnContext, string connectionName, CancellationToken cancellationToken);
    public abstract virtual Task`1<SignInResource> GetSignInResourceAsync(ITurnContext turnContext, string connectionName, string userId, string finalRedirect, CancellationToken cancellationToken);
    public abstract virtual Task`1<SignInResource> GetSignInResourceAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string userId, string finalRedirect, CancellationToken cancellationToken);
    public abstract virtual Task`1<TokenResponse> ExchangeTokenAsync(ITurnContext turnContext, string connectionName, string userId, TokenExchangeRequest exchangeRequest, CancellationToken cancellationToken);
    public abstract virtual Task`1<TokenResponse> ExchangeTokenAsync(ITurnContext turnContext, AppCredentials oAuthAppCredentials, string connectionName, string userId, TokenExchangeRequest exchangeRequest, CancellationToken cancellationToken);
}
public interface Microsoft.Bot.Builder.IMiddleware {
    public abstract virtual Task OnTurnAsync(ITurnContext turnContext, NextDelegate next, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Bot.Builder.InspectionActivityExtensions : object {
    [ExtensionAttribute]
public static Activity MakeCommandActivity(string command);
    [ExtensionAttribute]
public static Activity TraceActivity(JObject state);
    [ExtensionAttribute]
public static Activity TraceActivity(Activity activity, string name, string label);
    [ExtensionAttribute]
public static Activity TraceActivity(ConversationReference conversationReference);
    [ExtensionAttribute]
public static Activity TraceActivity(Exception exception);
    [ExtensionAttribute]
public static Activity CloneTraceActivity(Activity activity);
}
[ObsoleteAttribute("This class is obsolete and will be removed in a future version of the framework.", "False")]
public class Microsoft.Bot.Builder.InspectionMiddleware : InterceptionMiddleware {
    private static string Command;
    private InspectionState _inspectionState;
    private UserState _userState;
    private ConversationState _conversationState;
    private MicrosoftAppCredentials _credentials;
    private Lazy`1<HttpClient> _httpClient;
    public InspectionMiddleware(InspectionState inspectionState, UserState userState, ConversationState conversationState, MicrosoftAppCredentials credentials, ILogger`1<InspectionMiddleware> logger);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InspectionMiddleware/<ProcessCommandAsync>d__7")]
public Task`1<bool> ProcessCommandAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    protected virtual HttpClient GetHttpClient();
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InspectionMiddleware/<InboundAsync>d__9")]
protected virtual Task`1<ValueTuple`2<bool, bool>> InboundAsync(ITurnContext turnContext, Activity traceActivity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InspectionMiddleware/<OutboundAsync>d__10")]
protected virtual Task OutboundAsync(ITurnContext turnContext, IEnumerable`1<Activity> traceActivities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InspectionMiddleware/<TraceStateAsync>d__11")]
protected virtual Task TraceStateAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    private static string OpenCommand(InspectionSessionsByStatus sessions, ConversationReference conversationReference);
    private static bool AttachCommand(string attachId, InspectionSessionsByStatus sessions, string sessionId);
    private static string GetAttachId(Activity activity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InspectionMiddleware/<ProcessOpenCommandAsync>d__15")]
private Task ProcessOpenCommandAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InspectionMiddleware/<ProcessAttachCommandAsync>d__16")]
private Task ProcessAttachCommandAsync(ITurnContext turnContext, string sessionId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InspectionMiddleware/<FindSessionAsync>d__17")]
private Task`1<InspectionSession> FindSessionAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InspectionMiddleware/<InvokeSendAsync>d__18")]
private Task`1<bool> InvokeSendAsync(ITurnContext turnContext, InspectionSession session, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InspectionMiddleware/<CleanUpSessionAsync>d__19")]
private Task CleanUpSessionAsync(ITurnContext turnContext, CancellationToken cancellationToken);
}
internal class Microsoft.Bot.Builder.InspectionSession : object {
    private ConnectorClient _connectorClient;
    private ConversationReference _conversationReference;
    private ILogger _logger;
    private bool _disposed;
    public InspectionSession(ConversationReference conversationReference, MicrosoftAppCredentials credentials, HttpClient httpClient, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InspectionSession/<SendAsync>d__5")]
public Task`1<bool> SendAsync(Activity activity, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Bot.Builder.InspectionSessionsByStatus : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ConversationReference> <OpenedSessions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ConversationReference> <AttachedSessions>k__BackingField;
    public IDictionary`2<string, ConversationReference> OpenedSessions { get; }
    public IDictionary`2<string, ConversationReference> AttachedSessions { get; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ConversationReference> get_OpenedSessions();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ConversationReference> get_AttachedSessions();
}
[ObsoleteAttribute("This class is obsolete and will be removed in a future version of the framework.", "False")]
public class Microsoft.Bot.Builder.InspectionState : BotState {
    public InspectionState(IStorage storage);
    protected virtual string GetStorageKey(ITurnContext turnContext);
}
[ObsoleteAttribute("Use `CloudAdapter` with `ConfigurationBotFrameworkAuthentication` instead to configure bot runtime.", "False")]
public class Microsoft.Bot.Builder.Integration.BotFrameworkOptions : object {
    [CompilerGeneratedAttribute]
private ICredentialProvider <CredentialProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private AppCredentials <AppCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private IChannelProvider <ChannelProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<ITurnContext, Exception, Task> <OnTurnError>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IMiddleware> <Middleware>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<BotState> <State>k__BackingField;
    [CompilerGeneratedAttribute]
private RetryPolicy <ConnectorClientRetryPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <HttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private BotFrameworkPaths <Paths>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationConfiguration <AuthenticationConfiguration>k__BackingField;
    public ICredentialProvider CredentialProvider { get; public set; }
    public AppCredentials AppCredentials { get; public set; }
    public IChannelProvider ChannelProvider { get; public set; }
    public Func`3<ITurnContext, Exception, Task> OnTurnError { get; public set; }
    public IList`1<IMiddleware> Middleware { get; }
    [ObsoleteAttribute("This property is no longer used by the framework. Please see documentation for more details.")]
[EditorBrowsableAttribute("1")]
public IList`1<BotState> State { get; }
    public RetryPolicy ConnectorClientRetryPolicy { get; public set; }
    public HttpClient HttpClient { get; public set; }
    public BotFrameworkPaths Paths { get; public set; }
    public AuthenticationConfiguration AuthenticationConfiguration { get; public set; }
    [CompilerGeneratedAttribute]
public ICredentialProvider get_CredentialProvider();
    [CompilerGeneratedAttribute]
public void set_CredentialProvider(ICredentialProvider value);
    [CompilerGeneratedAttribute]
public AppCredentials get_AppCredentials();
    [CompilerGeneratedAttribute]
public void set_AppCredentials(AppCredentials value);
    [CompilerGeneratedAttribute]
public IChannelProvider get_ChannelProvider();
    [CompilerGeneratedAttribute]
public void set_ChannelProvider(IChannelProvider value);
    [CompilerGeneratedAttribute]
public Func`3<ITurnContext, Exception, Task> get_OnTurnError();
    [CompilerGeneratedAttribute]
public void set_OnTurnError(Func`3<ITurnContext, Exception, Task> value);
    [CompilerGeneratedAttribute]
public IList`1<IMiddleware> get_Middleware();
    [CompilerGeneratedAttribute]
public IList`1<BotState> get_State();
    [CompilerGeneratedAttribute]
public RetryPolicy get_ConnectorClientRetryPolicy();
    [CompilerGeneratedAttribute]
public void set_ConnectorClientRetryPolicy(RetryPolicy value);
    [CompilerGeneratedAttribute]
public HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
public void set_HttpClient(HttpClient value);
    [CompilerGeneratedAttribute]
public BotFrameworkPaths get_Paths();
    [CompilerGeneratedAttribute]
public void set_Paths(BotFrameworkPaths value);
    [CompilerGeneratedAttribute]
public AuthenticationConfiguration get_AuthenticationConfiguration();
    [CompilerGeneratedAttribute]
public void set_AuthenticationConfiguration(AuthenticationConfiguration value);
}
public class Microsoft.Bot.Builder.Integration.BotFrameworkPaths : object {
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessagesPath>k__BackingField;
    public string BasePath { get; public set; }
    public string MessagesPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
public void set_BasePath(string value);
    [CompilerGeneratedAttribute]
public string get_MessagesPath();
    [CompilerGeneratedAttribute]
public void set_MessagesPath(string value);
}
public interface Microsoft.Bot.Builder.Integration.IAdapterIntegration {
    public abstract virtual Task`1<InvokeResponse> ProcessActivityAsync(string authHeader, Activity activity, BotCallbackHandler callback, CancellationToken cancellationToken);
    public abstract virtual Task ContinueConversationAsync(string botId, ConversationReference reference, BotCallbackHandler callback, CancellationToken cancellationToken);
}
public static class Microsoft.Bot.Builder.Integration.MessageSerializerSettings : object {
    public static JsonSerializerSettings Create();
}
public class Microsoft.Bot.Builder.IntentScore : object {
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Score>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    [JsonPropertyAttribute("score")]
public Nullable`1<double> Score { get; public set; }
    [JsonExtensionDataAttribute]
public IDictionary`2<string, object> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Score();
    [CompilerGeneratedAttribute]
public void set_Score(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, object> value);
}
[ObsoleteAttribute("This class is obsolete and will be removed in a future version of the framework.", "False")]
public abstract class Microsoft.Bot.Builder.InterceptionMiddleware : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    protected ILogger Logger { get; }
    internal InterceptionMiddleware(ILogger logger);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InterceptionMiddleware/<Microsoft-Bot-Builder-IMiddleware-OnTurnAsync>d__4")]
private sealed virtual override Task Microsoft.Bot.Builder.IMiddleware.OnTurnAsync(ITurnContext turnContext, NextDelegate next, CancellationToken cancellationToken);
    protected abstract virtual Task`1<ValueTuple`2<bool, bool>> InboundAsync(ITurnContext turnContext, Activity traceActivity, CancellationToken cancellationToken);
    protected abstract virtual Task OutboundAsync(ITurnContext turnContext, IEnumerable`1<Activity> clonedActivities, CancellationToken cancellationToken);
    protected abstract virtual Task TraceStateAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InterceptionMiddleware/<InvokeInboundAsync>d__8")]
private Task`1<ValueTuple`2<bool, bool>> InvokeInboundAsync(ITurnContext turnContext, Activity traceActivity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InterceptionMiddleware/<InvokeOutboundAsync>d__9")]
private Task InvokeOutboundAsync(ITurnContext turnContext, IEnumerable`1<Activity> traceActivities, CancellationToken cancellationToken);
    private Task InvokeOutboundAsync(ITurnContext turnContext, Activity traceActivity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InterceptionMiddleware/<InvokeTraceStateAsync>d__11")]
private Task InvokeTraceStateAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.InterceptionMiddleware/<InvokeTraceExceptionAsync>d__12")]
private Task InvokeTraceExceptionAsync(ITurnContext turnContext, Activity traceActivity, CancellationToken cancellationToken);
}
public interface Microsoft.Bot.Builder.IPropertyManager {
    public abstract virtual IStatePropertyAccessor`1<T> CreateProperty(string name);
}
public interface Microsoft.Bot.Builder.IRecognizer {
    public abstract virtual Task`1<RecognizerResult> RecognizeAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    public abstract virtual Task`1<T> RecognizeAsync(ITurnContext turnContext, CancellationToken cancellationToken);
}
public interface Microsoft.Bot.Builder.IRecognizerConvert {
    public abstract virtual void Convert(object result);
}
public interface Microsoft.Bot.Builder.IStatePropertyAccessor`1 {
    public abstract virtual Task`1<T> GetAsync(ITurnContext turnContext, Func`1<T> defaultValueFactory, CancellationToken cancellationToken);
    public abstract virtual Task DeleteAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    public abstract virtual Task SetAsync(ITurnContext turnContext, T value, CancellationToken cancellationToken);
}
public interface Microsoft.Bot.Builder.IStatePropertyInfo {
    public string Name { get; }
    public abstract virtual string get_Name();
}
public interface Microsoft.Bot.Builder.IStorage {
    public abstract virtual Task`1<IDictionary`2<string, object>> ReadAsync(String[] keys, CancellationToken cancellationToken);
    public abstract virtual Task WriteAsync(IDictionary`2<string, object> changes, CancellationToken cancellationToken);
    public abstract virtual Task DeleteAsync(String[] keys, CancellationToken cancellationToken);
}
public interface Microsoft.Bot.Builder.IStoreItem {
    public string ETag { get; public set; }
    public abstract virtual string get_ETag();
    public abstract virtual void set_ETag(string value);
}
public interface Microsoft.Bot.Builder.ITranscriptLogger {
    public abstract virtual Task LogActivityAsync(IActivity activity);
}
public interface Microsoft.Bot.Builder.ITranscriptStore {
    public abstract virtual Task`1<PagedResult`1<IActivity>> GetTranscriptActivitiesAsync(string channelId, string conversationId, string continuationToken, DateTimeOffset startDate);
    public abstract virtual Task`1<PagedResult`1<TranscriptInfo>> ListTranscriptsAsync(string channelId, string continuationToken);
    public abstract virtual Task DeleteTranscriptAsync(string channelId, string conversationId);
}
public interface Microsoft.Bot.Builder.ITurnContext {
    public BotAdapter Adapter { get; }
    public TurnContextStateCollection TurnState { get; }
    public Activity Activity { get; }
    public bool Responded { get; }
    public abstract virtual BotAdapter get_Adapter();
    public abstract virtual TurnContextStateCollection get_TurnState();
    public abstract virtual Activity get_Activity();
    public abstract virtual bool get_Responded();
    public abstract virtual Task`1<ResourceResponse> SendActivityAsync(string textReplyToSend, string speak, string inputHint, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse> SendActivityAsync(IActivity activity, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse[]> SendActivitiesAsync(IActivity[] activities, CancellationToken cancellationToken);
    public abstract virtual Task`1<ResourceResponse> UpdateActivityAsync(IActivity activity, CancellationToken cancellationToken);
    public abstract virtual Task DeleteActivityAsync(string activityId, CancellationToken cancellationToken);
    public abstract virtual Task DeleteActivityAsync(ConversationReference conversationReference, CancellationToken cancellationToken);
    public abstract virtual ITurnContext OnSendActivities(SendActivitiesHandler handler);
    public abstract virtual ITurnContext OnUpdateActivity(UpdateActivityHandler handler);
    public abstract virtual ITurnContext OnDeleteActivity(DeleteActivityHandler handler);
}
public interface Microsoft.Bot.Builder.ITurnContext`1 {
    public T Activity { get; }
    public abstract virtual T get_Activity();
}
[ObsoleteAttribute("Use UserTokenClient instead. With CloudAdapter the UserTokenClient is available on TurnState.", "False")]
public interface Microsoft.Bot.Builder.IUserTokenProvider {
    public abstract virtual Task`1<TokenResponse> GetUserTokenAsync(ITurnContext turnContext, string connectionName, string magicCode, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetOauthSignInLinkAsync(ITurnContext turnContext, string connectionName, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetOauthSignInLinkAsync(ITurnContext turnContext, string connectionName, string userId, string finalRedirect, CancellationToken cancellationToken);
    public abstract virtual Task SignOutUserAsync(ITurnContext turnContext, string connectionName, string userId, CancellationToken cancellationToken);
    public abstract virtual Task`1<TokenStatus[]> GetTokenStatusAsync(ITurnContext context, string userId, string includeFilter, CancellationToken cancellationToken);
    public abstract virtual Task`1<Dictionary`2<string, TokenResponse>> GetAadTokensAsync(ITurnContext context, string connectionName, String[] resourceUrls, string userId, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.MemoryStorage : object {
    private static JsonSerializer StateJsonSerializer;
    private JsonSerializer _stateJsonSerializer;
    private Dictionary`2<string, JObject> _memory;
    private object _syncroot;
    private int _eTag;
    public MemoryStorage(JsonSerializer jsonSerializer, Dictionary`2<string, JObject> dictionary);
    public MemoryStorage(Dictionary`2<string, JObject> dictionary);
    private static MemoryStorage();
    public sealed virtual Task DeleteAsync(String[] keys, CancellationToken cancellationToken);
    public sealed virtual Task`1<IDictionary`2<string, object>> ReadAsync(String[] keys, CancellationToken cancellationToken);
    public sealed virtual Task WriteAsync(IDictionary`2<string, object> changes, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.MemoryTranscriptStore : object {
    private Dictionary`2<string, Dictionary`2<string, List`1<IActivity>>> _channels;
    public sealed virtual Task LogActivityAsync(IActivity activity);
    public sealed virtual Task`1<PagedResult`1<IActivity>> GetTranscriptActivitiesAsync(string channelId, string conversationId, string continuationToken, DateTimeOffset startDate);
    public sealed virtual Task DeleteTranscriptAsync(string channelId, string conversationId);
    public sealed virtual Task`1<PagedResult`1<TranscriptInfo>> ListTranscriptsAsync(string channelId, string continuationToken);
}
public static class Microsoft.Bot.Builder.MessageFactory : object {
    public static Activity Text(string text, string ssml, string inputHint);
    public static IMessageActivity SuggestedActions(IEnumerable`1<string> actions, string text, string ssml, string inputHint);
    public static IMessageActivity SuggestedActions(IEnumerable`1<string> actions, string text, string ssml, string inputHint, IList`1<string> toList);
    public static IMessageActivity SuggestedActions(IEnumerable`1<CardAction> cardActions, string text, string ssml, string inputHint);
    public static IMessageActivity SuggestedActions(IEnumerable`1<CardAction> cardActions, string text, string ssml, string inputHint, IList`1<string> toList);
    public static IMessageActivity Attachment(Attachment attachment, string text, string ssml, string inputHint);
    public static IMessageActivity Attachment(IEnumerable`1<Attachment> attachments, string text, string ssml, string inputHint);
    public static IMessageActivity Carousel(IEnumerable`1<Attachment> attachments, string text, string ssml, string inputHint);
    public static IMessageActivity ContentUrl(string url, string contentType, string name, string text, string ssml, string inputHint);
    private static IMessageActivity AttachmentActivity(string attachmentLayout, IEnumerable`1<Attachment> attachments, string text, string ssml, string inputHint);
    private static void SetTextAndSpeak(IMessageActivity ma, string text, string ssml, string inputHint);
}
public class Microsoft.Bot.Builder.MiddlewareSet : object {
    private IList`1<IMiddleware> _middleware;
    public MiddlewareSet Use(IMiddleware middleware);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.MiddlewareSet/<OnTurnAsync>d__2")]
public sealed virtual Task OnTurnAsync(ITurnContext turnContext, NextDelegate next, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.MiddlewareSet/<ReceiveActivityWithStatusAsync>d__3")]
public Task ReceiveActivityWithStatusAsync(ITurnContext turnContext, BotCallbackHandler callback, CancellationToken cancellationToken);
    public sealed virtual IEnumerator`1<IMiddleware> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private Task ReceiveActivityInternalAsync(ITurnContext turnContext, BotCallbackHandler callback, int nextMiddlewareIndex, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.NextDelegate : MulticastDelegate {
    public NextDelegate(object object, IntPtr method);
    public virtual Task Invoke(CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task EndInvoke(IAsyncResult result);
}
public class Microsoft.Bot.Builder.NormalizeMentionsMiddleware : object {
    [CompilerGeneratedAttribute]
private bool <RemoveRecipientMention>k__BackingField;
    public bool RemoveRecipientMention { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RemoveRecipientMention();
    [CompilerGeneratedAttribute]
public void set_RemoveRecipientMention(bool value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.NormalizeMentionsMiddleware/<OnTurnAsync>d__5")]
public sealed virtual Task OnTurnAsync(ITurnContext turnContext, NextDelegate next, CancellationToken cancellationToken);
    private void NormalizeActivity(Activity activity);
    private string RemoveAt(string text);
}
public class Microsoft.Bot.Builder.NullBotTelemetryClient : object {
    [CompilerGeneratedAttribute]
private static IBotTelemetryClient <Instance>k__BackingField;
    public static IBotTelemetryClient Instance { get; }
    private static NullBotTelemetryClient();
    [CompilerGeneratedAttribute]
public static IBotTelemetryClient get_Instance();
    public sealed virtual void Flush();
    public sealed virtual void TrackAvailability(string name, DateTimeOffset timeStamp, TimeSpan duration, string runLocation, bool success, string message, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    public sealed virtual void TrackDependency(string dependencyTypeName, string target, string dependencyName, string data, DateTimeOffset startTime, TimeSpan duration, string resultCode, bool success);
    public sealed virtual void TrackEvent(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    public sealed virtual void TrackException(Exception exception, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    public sealed virtual void TrackTrace(string message, Severity severityLevel, IDictionary`2<string, string> properties);
    public sealed virtual void TrackPageView(string dialogName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
}
public interface Microsoft.Bot.Builder.OAuth.IConnectorClientBuilder {
    public abstract virtual Task`1<IConnectorClient> CreateConnectorClientAsync(string serviceUrl, ClaimsIdentity claimsIdentity, string audience, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.PagedResult`1 : object {
    [CompilerGeneratedAttribute]
private T[] <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    public T[] Items { get; public set; }
    public string ContinuationToken { get; public set; }
    [CompilerGeneratedAttribute]
public T[] get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(T[] value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
}
public static class Microsoft.Bot.Builder.PathUtils : object {
    public static string NormalizePath(string ambiguousPath);
}
public class Microsoft.Bot.Builder.PrivateConversationState : BotState {
    public PrivateConversationState(IStorage storage);
    protected virtual string GetStorageKey(ITurnContext turnContext);
}
public abstract class Microsoft.Bot.Builder.QueueStorage : object {
    public abstract virtual Task`1<string> QueueActivityAsync(Activity activity, Nullable`1<TimeSpan> visibilityTimeout, Nullable`1<TimeSpan> timeToLive, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.RecognizerResult : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AlteredText>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IntentScore> <Intents>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <Entities>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    [JsonPropertyAttribute("text")]
public string Text { get; public set; }
    [JsonPropertyAttribute("alteredText")]
public string AlteredText { get; public set; }
    [JsonPropertyAttribute("intents")]
public IDictionary`2<string, IntentScore> Intents { get; public set; }
    [JsonPropertyAttribute("entities")]
public JObject Entities { get; public set; }
    [JsonExtensionDataAttribute]
public IDictionary`2<string, object> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_AlteredText();
    [CompilerGeneratedAttribute]
public void set_AlteredText(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IntentScore> get_Intents();
    [CompilerGeneratedAttribute]
public void set_Intents(IDictionary`2<string, IntentScore> value);
    [CompilerGeneratedAttribute]
public JObject get_Entities();
    [CompilerGeneratedAttribute]
public void set_Entities(JObject value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, object> value);
    public sealed virtual void Convert(object result);
}
[ExtensionAttribute]
public static class Microsoft.Bot.Builder.RecognizerResultExtensions : object {
    [ExtensionAttribute]
public static ValueTuple`2<string, double> GetTopScoringIntent(RecognizerResult result);
}
public class Microsoft.Bot.Builder.RegisterClassMiddleware`1 : object {
    private string _key;
    [CompilerGeneratedAttribute]
private T <Service>k__BackingField;
    public T Service { get; public set; }
    public RegisterClassMiddleware`1(T service);
    public RegisterClassMiddleware`1(T service, string key);
    [CompilerGeneratedAttribute]
public T get_Service();
    [CompilerGeneratedAttribute]
public void set_Service(T value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.RegisterClassMiddleware`1/<OnTurnAsync>d__7")]
public sealed virtual Task OnTurnAsync(ITurnContext turnContext, NextDelegate nextTurn, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.SendActivitiesHandler : MulticastDelegate {
    public SendActivitiesHandler(object object, IntPtr method);
    public virtual Task`1<ResourceResponse[]> Invoke(ITurnContext turnContext, List`1<Activity> activities, Func`1<Task`1<ResourceResponse[]>> next);
    public virtual IAsyncResult BeginInvoke(ITurnContext turnContext, List`1<Activity> activities, Func`1<Task`1<ResourceResponse[]>> next, AsyncCallback callback, object object);
    public virtual Task`1<ResourceResponse[]> EndInvoke(IAsyncResult result);
}
public class Microsoft.Bot.Builder.SetSpeakMiddleware : object {
    private string _voiceName;
    private bool _fallbackToTextForSpeak;
    public SetSpeakMiddleware(string voiceName, bool fallbackToTextForSpeak);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.SetSpeakMiddleware/<OnTurnAsync>d__3")]
public sealed virtual Task OnTurnAsync(ITurnContext turnContext, NextDelegate next, CancellationToken cancellationToken);
    private bool HasTag(string tagName, string speakText);
}
public enum Microsoft.Bot.Builder.Severity : Enum {
    public int value__;
    public static Severity Verbose;
    public static Severity Information;
    public static Severity Warning;
    public static Severity Error;
    public static Severity Critical;
}
public class Microsoft.Bot.Builder.SharePoint.SharePointActivityHandler : ActivityHandler {
    internal static T SafeCast(object value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.SharePoint.SharePointActivityHandler/<OnInvokeActivityAsync>d__1")]
protected virtual Task`1<InvokeResponse> OnInvokeActivityAsync(ITurnContext`1<IInvokeActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task`1<CardViewResponse> OnSharePointTaskGetCardViewAsync(ITurnContext`1<IInvokeActivity> turnContext, AceRequest aceRequest, CancellationToken cancellationToken);
    protected virtual Task`1<QuickViewResponse> OnSharePointTaskGetQuickViewAsync(ITurnContext`1<IInvokeActivity> turnContext, AceRequest aceRequest, CancellationToken cancellationToken);
    protected virtual Task`1<GetPropertyPaneConfigurationResponse> OnSharePointTaskGetPropertyPaneConfigurationAsync(ITurnContext`1<IInvokeActivity> turnContext, AceRequest aceRequest, CancellationToken cancellationToken);
    protected virtual Task`1<BaseHandleActionResponse> OnSharePointTaskSetPropertyPaneConfigurationAsync(ITurnContext`1<IInvokeActivity> turnContext, AceRequest aceRequest, CancellationToken cancellationToken);
    protected virtual Task`1<BaseHandleActionResponse> OnSharePointTaskHandleActionAsync(ITurnContext`1<IInvokeActivity> turnContext, AceRequest aceRequest, CancellationToken cancellationToken);
    private void ValidateSetPropertyPaneConfigurationResponse(BaseHandleActionResponse response);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<InvokeResponse> <>n__0(ITurnContext`1<IInvokeActivity> turnContext, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.SharePoint.SharePointSSOTokenExchangeMiddleware : object {
    private IStorage _storage;
    private string _oAuthConnectionName;
    public SharePointSSOTokenExchangeMiddleware(IStorage storage, string connectionName);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.SharePoint.SharePointSSOTokenExchangeMiddleware/<OnTurnAsync>d__3")]
public Task OnTurnAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.SharePoint.SharePointSSOTokenExchangeMiddleware/<DeduplicatedTokenExchangeIdAsync>d__4")]
private Task`1<bool> DeduplicatedTokenExchangeIdAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.SharePoint.SharePointSSOTokenExchangeMiddleware/<SendInvokeResponseAsync>d__5")]
private Task SendInvokeResponseAsync(ITurnContext turnContext, object body, HttpStatusCode httpStatusCode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.SharePoint.SharePointSSOTokenExchangeMiddleware/<ExchangedTokenAsync>d__6")]
private Task`1<bool> ExchangedTokenAsync(ITurnContext turnContext, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.ShowTypingMiddleware : object {
    private TimeSpan _delay;
    private TimeSpan _period;
    private ConcurrentDictionary`2<string, ValueTuple`2<Task, CancellationTokenSource>> _tasks;
    public ShowTypingMiddleware(int delay, int period);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ShowTypingMiddleware/<OnTurnAsync>d__4")]
public sealed virtual Task OnTurnAsync(ITurnContext turnContext, NextDelegate next, CancellationToken cancellationToken);
    private static bool IsSkillBot(ITurnContext turnContext);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ShowTypingMiddleware/<SendTypingAsync>d__6")]
private static Task SendTypingAsync(ITurnContext turnContext, TimeSpan delay, TimeSpan period, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ShowTypingMiddleware/<SendTypingActivityAsync>d__7")]
private static Task SendTypingActivityAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    private void StartTypingTask(ITurnContext turnContext);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ShowTypingMiddleware/<FinishTypingTaskAsync>d__9")]
private Task FinishTypingTaskAsync(ITurnContext turnContext);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ShowTypingMiddleware/<ProcessTypingAsync>d__10")]
private Task ProcessTypingAsync(ITurnContext turnContext);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.ShowTypingMiddleware/<<OnTurnAsync>b__4_0>d")]
[CompilerGeneratedAttribute]
private Task`1<ResourceResponse[]> <OnTurnAsync>b__4_0(ITurnContext ctx, List`1<Activity> activities, Func`1<Task`1<ResourceResponse[]>> nextSend);
}
public class Microsoft.Bot.Builder.Skills.BotFrameworkSkill : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppId>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <SkillEndpoint>k__BackingField;
    [JsonPropertyAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyAttribute("appId")]
public string AppId { get; public set; }
    [JsonPropertyAttribute("skillEndpoint")]
public Uri SkillEndpoint { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_AppId();
    [CompilerGeneratedAttribute]
public void set_AppId(string value);
    [CompilerGeneratedAttribute]
public Uri get_SkillEndpoint();
    [CompilerGeneratedAttribute]
public void set_SkillEndpoint(Uri value);
}
public class Microsoft.Bot.Builder.Skills.CloudSkillHandler : CloudChannelServiceHandler {
    public static string SkillConversationReferenceKey;
    private SkillHandlerImpl _inner;
    public CloudSkillHandler(BotAdapter adapter, IBot bot, SkillConversationIdFactoryBase conversationIdFactory, BotFrameworkAuthentication auth, ILogger logger);
    private static CloudSkillHandler();
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.CloudSkillHandler/<OnSendToConversationAsync>d__3")]
protected virtual Task`1<ResourceResponse> OnSendToConversationAsync(ClaimsIdentity claimsIdentity, string conversationId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.CloudSkillHandler/<OnReplyToActivityAsync>d__4")]
protected virtual Task`1<ResourceResponse> OnReplyToActivityAsync(ClaimsIdentity claimsIdentity, string conversationId, string activityId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.CloudSkillHandler/<OnDeleteActivityAsync>d__5")]
protected virtual Task OnDeleteActivityAsync(ClaimsIdentity claimsIdentity, string conversationId, string activityId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.CloudSkillHandler/<OnUpdateActivityAsync>d__6")]
protected virtual Task`1<ResourceResponse> OnUpdateActivityAsync(ClaimsIdentity claimsIdentity, string conversationId, string activityId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.CloudSkillHandler/<OnGetConversationMemberAsync>d__7")]
protected virtual Task`1<ChannelAccount> OnGetConversationMemberAsync(ClaimsIdentity claimsIdentity, string userId, string conversationId, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.Skills.SkillConversationIdFactory : SkillConversationIdFactoryBase {
    private IStorage _storage;
    public SkillConversationIdFactory(IStorage storage);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillConversationIdFactory/<CreateSkillConversationIdAsync>d__2")]
public virtual Task`1<string> CreateSkillConversationIdAsync(SkillConversationIdFactoryOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillConversationIdFactory/<GetSkillConversationReferenceAsync>d__3")]
public virtual Task`1<SkillConversationReference> GetSkillConversationReferenceAsync(string skillConversationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillConversationIdFactory/<DeleteConversationReferenceAsync>d__4")]
public virtual Task DeleteConversationReferenceAsync(string skillConversationId, CancellationToken cancellationToken);
}
public abstract class Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryBase : object {
    [ObsoleteAttribute("Method is deprecated, please use CreateSkillConversationIdAsync() with SkillConversationIdFactoryOptions instead.", "False")]
public virtual Task`1<string> CreateSkillConversationIdAsync(ConversationReference conversationReference, CancellationToken cancellationToken);
    public virtual Task`1<string> CreateSkillConversationIdAsync(SkillConversationIdFactoryOptions options, CancellationToken cancellationToken);
    [ObsoleteAttribute("Method is deprecated, please use GetSkillConversationReferenceAsync() instead.", "False")]
public virtual Task`1<ConversationReference> GetConversationReferenceAsync(string skillConversationId, CancellationToken cancellationToken);
    public virtual Task`1<SkillConversationReference> GetSkillConversationReferenceAsync(string skillConversationId, CancellationToken cancellationToken);
    public abstract virtual Task DeleteConversationReferenceAsync(string skillConversationId, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.Skills.SkillConversationIdFactoryOptions : object {
    [CompilerGeneratedAttribute]
private string <FromBotOAuthScope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FromBotId>k__BackingField;
    [CompilerGeneratedAttribute]
private Activity <Activity>k__BackingField;
    [CompilerGeneratedAttribute]
private BotFrameworkSkill <BotFrameworkSkill>k__BackingField;
    public string FromBotOAuthScope { get; public set; }
    public string FromBotId { get; public set; }
    public Activity Activity { get; public set; }
    public BotFrameworkSkill BotFrameworkSkill { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FromBotOAuthScope();
    [CompilerGeneratedAttribute]
public void set_FromBotOAuthScope(string value);
    [CompilerGeneratedAttribute]
public string get_FromBotId();
    [CompilerGeneratedAttribute]
public void set_FromBotId(string value);
    [CompilerGeneratedAttribute]
public Activity get_Activity();
    [CompilerGeneratedAttribute]
public void set_Activity(Activity value);
    [CompilerGeneratedAttribute]
public BotFrameworkSkill get_BotFrameworkSkill();
    [CompilerGeneratedAttribute]
public void set_BotFrameworkSkill(BotFrameworkSkill value);
}
public class Microsoft.Bot.Builder.Skills.SkillConversationReference : object {
    [CompilerGeneratedAttribute]
private ConversationReference <ConversationReference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OAuthScope>k__BackingField;
    public ConversationReference ConversationReference { get; public set; }
    public string OAuthScope { get; public set; }
    [CompilerGeneratedAttribute]
public ConversationReference get_ConversationReference();
    [CompilerGeneratedAttribute]
public void set_ConversationReference(ConversationReference value);
    [CompilerGeneratedAttribute]
public string get_OAuthScope();
    [CompilerGeneratedAttribute]
public void set_OAuthScope(string value);
}
[ObsoleteAttribute("Use `CloudSkillHandler` instead.", "False")]
public class Microsoft.Bot.Builder.Skills.SkillHandler : ChannelServiceHandler {
    public static string SkillConversationReferenceKey;
    private SkillHandlerImpl _inner;
    public SkillHandler(BotAdapter adapter, IBot bot, SkillConversationIdFactoryBase conversationIdFactory, ICredentialProvider credentialProvider, AuthenticationConfiguration authConfig, IChannelProvider channelProvider, ILogger logger);
    private static SkillHandler();
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillHandler/<OnSendToConversationAsync>d__3")]
protected virtual Task`1<ResourceResponse> OnSendToConversationAsync(ClaimsIdentity claimsIdentity, string conversationId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillHandler/<OnReplyToActivityAsync>d__4")]
protected virtual Task`1<ResourceResponse> OnReplyToActivityAsync(ClaimsIdentity claimsIdentity, string conversationId, string activityId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillHandler/<OnDeleteActivityAsync>d__5")]
protected virtual Task OnDeleteActivityAsync(ClaimsIdentity claimsIdentity, string conversationId, string activityId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillHandler/<OnUpdateActivityAsync>d__6")]
protected virtual Task`1<ResourceResponse> OnUpdateActivityAsync(ClaimsIdentity claimsIdentity, string conversationId, string activityId, Activity activity, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private string <.ctor>b__2_0();
}
internal class Microsoft.Bot.Builder.Skills.SkillHandlerImpl : object {
    private string _skillConversationReferenceKey;
    private BotAdapter _adapter;
    private IBot _bot;
    private SkillConversationIdFactoryBase _conversationIdFactory;
    private Func`1<string> _getOAuthScope;
    private ILogger _logger;
    internal SkillHandlerImpl(string skillConversationReferenceKey, BotAdapter adapter, IBot bot, SkillConversationIdFactoryBase conversationIdFactory, Func`1<string> getOAuthScope, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillHandlerImpl/<OnSendToConversationAsync>d__7")]
internal Task`1<ResourceResponse> OnSendToConversationAsync(ClaimsIdentity claimsIdentity, string conversationId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillHandlerImpl/<OnReplyToActivityAsync>d__8")]
internal Task`1<ResourceResponse> OnReplyToActivityAsync(ClaimsIdentity claimsIdentity, string conversationId, string activityId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillHandlerImpl/<OnDeleteActivityAsync>d__9")]
internal Task OnDeleteActivityAsync(ClaimsIdentity claimsIdentity, string conversationId, string activityId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillHandlerImpl/<OnUpdateActivityAsync>d__10")]
internal Task`1<ResourceResponse> OnUpdateActivityAsync(ClaimsIdentity claimsIdentity, string conversationId, string activityId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillHandlerImpl/<OnGetMemberAsync>d__11")]
internal Task`1<ChannelAccount> OnGetMemberAsync(ClaimsIdentity claimsIdentity, string userId, string conversationId, CancellationToken cancellationToken);
    private static void ApplySkillActivityToTurnContext(ITurnContext turnContext, Activity activity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillHandlerImpl/<GetSkillConversationReferenceAsync>d__13")]
private Task`1<SkillConversationReference> GetSkillConversationReferenceAsync(string conversationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillHandlerImpl/<ProcessActivityAsync>d__14")]
private Task`1<ResourceResponse> ProcessActivityAsync(ClaimsIdentity claimsIdentity, string conversationId, string replyToActivityId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.SkillHandlerImpl/<SendToBotAsync>d__15")]
private Task SendToBotAsync(Activity activity, ITurnContext turnContext, CancellationToken ct);
}
[ObsoleteAttribute("You should use NormalizeMentionsMiddleware instead of this class.")]
public class Microsoft.Bot.Builder.SkypeMentionNormalizeMiddleware : object {
    public static void NormalizeSkypMentionText(Activity activity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.SkypeMentionNormalizeMiddleware/<OnTurnAsync>d__2")]
public sealed virtual Task OnTurnAsync(ITurnContext turnContext, NextDelegate next, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Microsoft.Bot.Builder.StorageExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.StorageExtensions/<ReadAsync>d__0`1")]
[ExtensionAttribute]
public static Task`1<IDictionary`2<string, TStoreItem>> ReadAsync(IStorage storage, String[] keys, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase : BotFrameworkAdapter {
    private bool _disposedValue;
    [CompilerGeneratedAttribute]
private IBot <ConnectedBot>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsIdentity <ClaimsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<StreamingRequestHandler> <RequestHandlers>k__BackingField;
    protected IBot ConnectedBot { get; protected set; }
    protected ClaimsIdentity ClaimsIdentity { get; protected set; }
    protected IList`1<StreamingRequestHandler> RequestHandlers { get; protected set; }
    public BotFrameworkHttpAdapterBase(ICredentialProvider credentialProvider, AuthenticationConfiguration authConfig, IChannelProvider channelProvider, RetryPolicy connectorClientRetryPolicy, HttpClient customHttpClient, IMiddleware middleware, ILogger logger);
    public BotFrameworkHttpAdapterBase(ICredentialProvider credentialProvider, IChannelProvider channelProvider, ILogger`1<BotFrameworkHttpAdapterBase> logger);
    public BotFrameworkHttpAdapterBase(ICredentialProvider credentialProvider, IChannelProvider channelProvider, HttpClient httpClient, ILogger`1<BotFrameworkHttpAdapterBase> logger);
    [CompilerGeneratedAttribute]
protected IBot get_ConnectedBot();
    [CompilerGeneratedAttribute]
protected void set_ConnectedBot(IBot value);
    [CompilerGeneratedAttribute]
protected ClaimsIdentity get_ClaimsIdentity();
    [CompilerGeneratedAttribute]
protected void set_ClaimsIdentity(ClaimsIdentity value);
    [CompilerGeneratedAttribute]
protected IList`1<StreamingRequestHandler> get_RequestHandlers();
    [CompilerGeneratedAttribute]
protected void set_RequestHandlers(IList`1<StreamingRequestHandler> value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase/<ProcessStreamingActivityAsync>d__16")]
public sealed virtual Task`1<InvokeResponse> ProcessStreamingActivityAsync(Activity activity, BotCallbackHandler callbackHandler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase/<SendStreamingActivityAsync>d__17")]
public Task`1<ResourceResponse> SendStreamingActivityAsync(Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase/<ConnectNamedPipeAsync>d__18")]
public Task ConnectNamedPipeAsync(string pipeName, IBot bot, string audience);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual bool CanProcessOutgoingActivity(Activity activity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Streaming.BotFrameworkHttpAdapterBase/<ProcessOutgoingActivityAsync>d__22")]
protected virtual Task`1<ResourceResponse> ProcessOutgoingActivityAsync(ITurnContext turnContext, Activity activity, CancellationToken cancellationToken);
    private IConnectorClient CreateStreamingConnectorClient(Activity activity, StreamingRequestHandler requestHandler);
    private string GetAudienceFromCallerId(Activity activity);
}
public interface Microsoft.Bot.Builder.Streaming.IStreamingActivityProcessor {
    public abstract virtual Task`1<InvokeResponse> ProcessStreamingActivityAsync(Activity activity, BotCallbackHandler botCallbackHandler, CancellationToken cancellationToken);
}
internal class Microsoft.Bot.Builder.Streaming.StreamingHttpClient : HttpClient {
    private StreamingRequestHandler _requestHandler;
    private ILogger _logger;
    public StreamingHttpClient(StreamingRequestHandler requestHandler, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Streaming.StreamingHttpClient/<SendAsync>d__3")]
public virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Streaming.StreamingHttpClient/<SendAsync>d__4")]
public Task`1<ReceiveResponse> SendAsync(StreamingRequest streamingRequest, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Streaming.StreamingHttpClient/<SendRequestAsync>d__5`1")]
private Task`1<T> SendRequestAsync(StreamingRequest request, CancellationToken cancellation);
}
public class Microsoft.Bot.Builder.Streaming.StreamingRequestHandler : RequestHandler {
    private IBot _bot;
    private ILogger _logger;
    private IStreamingActivityProcessor _activityProcessor;
    private string _userAgent;
    private ConcurrentDictionary`2<string, DateTime> _conversations;
    private StreamingConnection _innerConnection;
    private bool _disposedValue;
    [CompilerGeneratedAttribute]
private string <ServiceUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Audience>k__BackingField;
    public string ServiceUrl { get; private set; }
    public string Audience { get; private set; }
    public StreamingRequestHandler(IBot bot, IStreamingActivityProcessor activityProcessor, StreamingConnection connection, string audience, ILogger logger);
    public StreamingRequestHandler(IBot bot, IStreamingActivityProcessor activityProcessor, WebSocket socket, ILogger logger);
    public StreamingRequestHandler(IBot bot, IStreamingActivityProcessor activityProcessor, WebSocket socket, string audience, ILogger logger);
    public StreamingRequestHandler(IBot bot, IStreamingActivityProcessor activityProcessor, string pipeName, ILogger logger);
    public StreamingRequestHandler(IBot bot, IStreamingActivityProcessor activityProcessor, string pipeName, string audience, ILogger logger);
    [CompilerGeneratedAttribute]
public string get_ServiceUrl();
    [CompilerGeneratedAttribute]
private void set_ServiceUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Audience();
    [CompilerGeneratedAttribute]
private void set_Audience(string value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Streaming.StreamingRequestHandler/<ListenAsync>d__20")]
public virtual Task ListenAsync();
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Streaming.StreamingRequestHandler/<ListenAsync>d__21")]
public virtual Task ListenAsync(CancellationToken cancellationToken);
    public bool HasConversation(string conversationId);
    public DateTime ConversationAddedTime(string conversationId);
    public void ForgetConversation(string conversationId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Streaming.StreamingRequestHandler/<ProcessRequestAsync>d__25")]
public virtual Task`1<StreamingResponse> ProcessRequestAsync(ReceiveRequest request, ILogger`1<RequestHandler> logger, object context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Streaming.StreamingRequestHandler/<SendActivityAsync>d__26")]
public virtual Task`1<ResourceResponse> SendActivityAsync(Activity activity, CancellationToken cancellationToken);
    public Task`1<ReceiveResponse> SendStreamingRequestAsync(StreamingRequest request, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void ServerDisconnected(object sender, DisconnectedEventArgs e);
    private static string GetUserAgent();
    private static IEnumerable`1<HttpContent> UpdateAttachmentStreams(Activity activity);
    private StreamingResponse HandleCustomPaths(ReceiveRequest request, StreamingResponse response);
}
public class Microsoft.Bot.Builder.Streaming.VersionInfo : object {
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    public string UserAgent { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
public void set_UserAgent(string value);
}
public static class Microsoft.Bot.Builder.StringUtils : object {
    public static string Ellipsis(string text, int length);
    public static string Hash(string text);
    public static string EllipsisHash(string text, int length);
    public static StringBuilder Ellipsis(StringBuilder sb, int length);
    public static StringBuilder EllipsisHash(StringBuilder sb, int length);
}
[ExtensionAttribute]
public static class Microsoft.Bot.Builder.Teams.TeamsActivityExtensions : object {
    [ExtensionAttribute]
public static string TeamsGetSelectedChannelId(IActivity activity);
    [ExtensionAttribute]
public static TeamsMeetingInfo TeamsGetMeetingInfo(IActivity activity);
    [ExtensionAttribute]
public static string TeamsGetChannelId(IActivity activity);
    [ExtensionAttribute]
public static TeamInfo TeamsGetTeamInfo(IActivity activity);
    [ExtensionAttribute]
public static void TeamsNotifyUser(IActivity activity, bool alertInMeeting, string externalResourceUrl);
    [ExtensionAttribute]
public static void TeamsNotifyUser(IActivity activity);
    [ExtensionAttribute]
public static IList`1<OnBehalfOf> TeamsGetTeamOnBehalfOf(IActivity activity);
}
public class Microsoft.Bot.Builder.Teams.TeamsActivityHandler : ActivityHandler {
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsActivityHandler/<OnInvokeActivityAsync>d__0")]
protected virtual Task`1<InvokeResponse> OnInvokeActivityAsync(ITurnContext`1<IInvokeActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task`1<InvokeResponse> OnTeamsCardActionInvokeAsync(ITurnContext`1<IInvokeActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnSignInInvokeAsync(ITurnContext`1<IInvokeActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsSigninVerifyStateAsync(ITurnContext`1<IInvokeActivity> turnContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsActivityHandler/<OnTeamsFileConsentAsync>d__4")]
protected virtual Task`1<InvokeResponse> OnTeamsFileConsentAsync(ITurnContext`1<IInvokeActivity> turnContext, FileConsentCardResponse fileConsentCardResponse, CancellationToken cancellationToken);
    protected virtual Task OnTeamsFileConsentAcceptAsync(ITurnContext`1<IInvokeActivity> turnContext, FileConsentCardResponse fileConsentCardResponse, CancellationToken cancellationToken);
    protected virtual Task OnTeamsFileConsentDeclineAsync(ITurnContext`1<IInvokeActivity> turnContext, FileConsentCardResponse fileConsentCardResponse, CancellationToken cancellationToken);
    protected virtual Task`1<MessagingExtensionResponse> OnTeamsMessagingExtensionQueryAsync(ITurnContext`1<IInvokeActivity> turnContext, MessagingExtensionQuery query, CancellationToken cancellationToken);
    protected virtual Task OnTeamsO365ConnectorCardActionAsync(ITurnContext`1<IInvokeActivity> turnContext, O365ConnectorCardActionQuery query, CancellationToken cancellationToken);
    protected virtual Task`1<MessagingExtensionResponse> OnTeamsAppBasedLinkQueryAsync(ITurnContext`1<IInvokeActivity> turnContext, AppBasedLinkQuery query, CancellationToken cancellationToken);
    protected virtual Task`1<MessagingExtensionResponse> OnTeamsAnonymousAppBasedLinkQueryAsync(ITurnContext`1<IInvokeActivity> turnContext, AppBasedLinkQuery query, CancellationToken cancellationToken);
    protected virtual Task`1<MessagingExtensionResponse> OnTeamsMessagingExtensionSelectItemAsync(ITurnContext`1<IInvokeActivity> turnContext, JObject query, CancellationToken cancellationToken);
    protected virtual Task`1<MessagingExtensionActionResponse> OnTeamsMessagingExtensionFetchTaskAsync(ITurnContext`1<IInvokeActivity> turnContext, MessagingExtensionAction action, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsActivityHandler/<OnTeamsMessagingExtensionSubmitActionDispatchAsync>d__13")]
protected virtual Task`1<MessagingExtensionActionResponse> OnTeamsMessagingExtensionSubmitActionDispatchAsync(ITurnContext`1<IInvokeActivity> turnContext, MessagingExtensionAction action, CancellationToken cancellationToken);
    protected virtual Task`1<MessagingExtensionActionResponse> OnTeamsMessagingExtensionSubmitActionAsync(ITurnContext`1<IInvokeActivity> turnContext, MessagingExtensionAction action, CancellationToken cancellationToken);
    protected virtual Task`1<MessagingExtensionActionResponse> OnTeamsMessagingExtensionBotMessagePreviewEditAsync(ITurnContext`1<IInvokeActivity> turnContext, MessagingExtensionAction action, CancellationToken cancellationToken);
    protected virtual Task`1<MessagingExtensionActionResponse> OnTeamsMessagingExtensionBotMessagePreviewSendAsync(ITurnContext`1<IInvokeActivity> turnContext, MessagingExtensionAction action, CancellationToken cancellationToken);
    protected virtual Task`1<MessagingExtensionResponse> OnTeamsMessagingExtensionConfigurationQuerySettingUrlAsync(ITurnContext`1<IInvokeActivity> turnContext, MessagingExtensionQuery query, CancellationToken cancellationToken);
    protected virtual Task OnTeamsMessagingExtensionConfigurationSettingAsync(ITurnContext`1<IInvokeActivity> turnContext, JObject settings, CancellationToken cancellationToken);
    protected virtual Task OnTeamsMessagingExtensionCardButtonClickedAsync(ITurnContext`1<IInvokeActivity> turnContext, JObject cardData, CancellationToken cancellationToken);
    protected virtual Task`1<TaskModuleResponse> OnTeamsTaskModuleFetchAsync(ITurnContext`1<IInvokeActivity> turnContext, TaskModuleRequest taskModuleRequest, CancellationToken cancellationToken);
    protected virtual Task`1<TaskModuleResponse> OnTeamsTaskModuleSubmitAsync(ITurnContext`1<IInvokeActivity> turnContext, TaskModuleRequest taskModuleRequest, CancellationToken cancellationToken);
    protected virtual Task`1<TabResponse> OnTeamsTabFetchAsync(ITurnContext`1<IInvokeActivity> turnContext, TabRequest tabRequest, CancellationToken cancellationToken);
    protected virtual Task`1<TabResponse> OnTeamsTabSubmitAsync(ITurnContext`1<IInvokeActivity> turnContext, TabSubmit tabSubmit, CancellationToken cancellationToken);
    protected virtual Task`1<ConfigResponseBase> OnTeamsConfigFetchAsync(ITurnContext`1<IInvokeActivity> turnContext, JObject configData, CancellationToken cancellationToken);
    protected virtual Task`1<ConfigResponseBase> OnTeamsConfigSubmitAsync(ITurnContext`1<IInvokeActivity> turnContext, JObject configData, CancellationToken cancellationToken);
    protected virtual Task OnConversationUpdateActivityAsync(ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsActivityHandler/<OnTeamsMembersAddedDispatchAsync>d__27")]
protected virtual Task OnTeamsMembersAddedDispatchAsync(IList`1<ChannelAccount> membersAdded, TeamInfo teamInfo, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsMembersRemovedDispatchAsync(IList`1<ChannelAccount> membersRemoved, TeamInfo teamInfo, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsMembersAddedAsync(IList`1<TeamsChannelAccount> teamsMembersAdded, TeamInfo teamInfo, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsMembersRemovedAsync(IList`1<TeamsChannelAccount> teamsMembersRemoved, TeamInfo teamInfo, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsChannelCreatedAsync(ChannelInfo channelInfo, TeamInfo teamInfo, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsChannelDeletedAsync(ChannelInfo channelInfo, TeamInfo teamInfo, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsChannelRenamedAsync(ChannelInfo channelInfo, TeamInfo teamInfo, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsChannelRestoredAsync(ChannelInfo channelInfo, TeamInfo teamInfo, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsTeamArchivedAsync(TeamInfo teamInfo, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsTeamDeletedAsync(TeamInfo teamInfo, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsTeamHardDeletedAsync(TeamInfo teamInfo, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsTeamRenamedAsync(TeamInfo teamInfo, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsTeamRestoredAsync(TeamInfo teamInfo, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsTeamUnarchivedAsync(TeamInfo teamInfo, ITurnContext`1<IConversationUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnEventActivityAsync(ITurnContext`1<IEventActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsMeetingStartAsync(MeetingStartEventDetails meeting, ITurnContext`1<IEventActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsMeetingEndAsync(MeetingEndEventDetails meeting, ITurnContext`1<IEventActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsReadReceiptAsync(ReadReceiptInfo readReceiptInfo, ITurnContext`1<IEventActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsMeetingParticipantsJoinAsync(MeetingParticipantsEventDetails meeting, ITurnContext`1<IEventActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsMeetingParticipantsLeaveAsync(MeetingParticipantsEventDetails meeting, ITurnContext`1<IEventActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnMessageUpdateActivityAsync(ITurnContext`1<IMessageUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnMessageDeleteActivityAsync(ITurnContext`1<IMessageDeleteActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsMessageEditAsync(ITurnContext`1<IMessageUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsMessageUndeleteAsync(ITurnContext`1<IMessageUpdateActivity> turnContext, CancellationToken cancellationToken);
    protected virtual Task OnTeamsMessageSoftDeleteAsync(ITurnContext`1<IMessageDeleteActivity> turnContext, CancellationToken cancellationToken);
    private static T SafeCast(object value);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<InvokeResponse> <>n__0(ITurnContext`1<IInvokeActivity> turnContext, CancellationToken cancellationToken);
}
public static class Microsoft.Bot.Builder.Teams.TeamsInfo : object {
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<GetMeetingParticipantAsync>d__0")]
public static Task`1<TeamsMeetingParticipant> GetMeetingParticipantAsync(ITurnContext turnContext, string meetingId, string participantId, string tenantId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<GetMeetingInfoAsync>d__1")]
public static Task`1<MeetingInfo> GetMeetingInfoAsync(ITurnContext turnContext, string meetingId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<GetTeamDetailsAsync>d__2")]
public static Task`1<TeamDetails> GetTeamDetailsAsync(ITurnContext turnContext, string teamId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<GetTeamChannelsAsync>d__3")]
public static Task`1<IList`1<ChannelInfo>> GetTeamChannelsAsync(ITurnContext turnContext, string teamId, CancellationToken cancellationToken);
    [ObsoleteAttribute("Microsoft Teams is deprecating the non-paged version of the getMembers API which this method uses. Please use GetPagedTeamMembersAsync instead of this API.")]
public static Task`1<IEnumerable`1<TeamsChannelAccount>> GetTeamMembersAsync(ITurnContext turnContext, string teamId, CancellationToken cancellationToken);
    [ObsoleteAttribute("Microsoft Teams is deprecating the non-paged version of the getMembers API which this method uses. Please use GetPagedTeamMembersAsync instead of this API.")]
public static Task`1<IEnumerable`1<TeamsChannelAccount>> GetMembersAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    public static Task`1<TeamsPagedMembersResult> GetPagedTeamMembersAsync(ITurnContext turnContext, string teamId, string continuationToken, Nullable`1<int> pageSize, CancellationToken cancellationToken);
    public static Task`1<TeamsPagedMembersResult> GetPagedMembersAsync(ITurnContext turnContext, Nullable`1<int> pageSize, string continuationToken, CancellationToken cancellationToken);
    public static Task`1<TeamsChannelAccount> GetTeamMemberAsync(ITurnContext turnContext, string userId, string teamId, CancellationToken cancellationToken);
    public static Task`1<TeamsChannelAccount> GetMemberAsync(ITurnContext turnContext, string userId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<SendMessageToTeamsChannelAsync>d__10")]
public static Task`1<Tuple`2<ConversationReference, string>> SendMessageToTeamsChannelAsync(ITurnContext turnContext, IActivity activity, string teamsChannelId, MicrosoftAppCredentials credentials, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<SendMessageToTeamsChannelAsync>d__11")]
public static Task`1<Tuple`2<ConversationReference, string>> SendMessageToTeamsChannelAsync(ITurnContext turnContext, IActivity activity, string teamsChannelId, string botAppId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<SendMeetingNotificationAsync>d__12")]
public static Task`1<MeetingNotificationResponse> SendMeetingNotificationAsync(ITurnContext turnContext, MeetingNotificationBase notification, string meetingId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<SendMessageToListOfUsersAsync>d__13")]
public static Task`1<string> SendMessageToListOfUsersAsync(ITurnContext turnContext, IActivity activity, List`1<TeamMember> teamsMembers, string tenantId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<SendMessageToAllUsersInTenantAsync>d__14")]
public static Task`1<string> SendMessageToAllUsersInTenantAsync(ITurnContext turnContext, IActivity activity, string tenantId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<SendMessageToAllUsersInTeamAsync>d__15")]
public static Task`1<string> SendMessageToAllUsersInTeamAsync(ITurnContext turnContext, IActivity activity, string teamId, string tenantId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<SendMessageToListOfChannelsAsync>d__16")]
public static Task`1<string> SendMessageToListOfChannelsAsync(ITurnContext turnContext, IActivity activity, List`1<TeamMember> channelsMembers, string tenantId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<GetOperationStateAsync>d__17")]
public static Task`1<BatchOperationState> GetOperationStateAsync(ITurnContext turnContext, string operationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<GetPagedFailedEntriesAsync>d__18")]
public static Task`1<BatchFailedEntriesResponse> GetPagedFailedEntriesAsync(ITurnContext turnContext, string operationId, string continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<CancelOperationAsync>d__19")]
public static Task CancelOperationAsync(ITurnContext turnContext, string operationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<GetMembersAsync>d__20")]
private static Task`1<IEnumerable`1<TeamsChannelAccount>> GetMembersAsync(IConnectorClient connectorClient, string conversationId, CancellationToken cancellationToken);
    private static IConnectorClient GetConnectorClient(ITurnContext turnContext);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<GetMemberAsync>d__22")]
private static Task`1<TeamsChannelAccount> GetMemberAsync(IConnectorClient connectorClient, string userId, string conversationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsInfo/<GetPagedMembersAsync>d__23")]
private static Task`1<TeamsPagedMembersResult> GetPagedMembersAsync(IConnectorClient connectorClient, string conversationId, string continuationToken, CancellationToken cancellationToken, Nullable`1<int> pageSize);
    private static ITeamsConnectorClient GetTeamsConnectorClient(ITurnContext turnContext);
}
public class Microsoft.Bot.Builder.Teams.TeamsSSOTokenExchangeMiddleware : object {
    private IStorage _storage;
    private string _oAuthConnectionName;
    public TeamsSSOTokenExchangeMiddleware(IStorage storage, string connectionName);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsSSOTokenExchangeMiddleware/<OnTurnAsync>d__3")]
public sealed virtual Task OnTurnAsync(ITurnContext turnContext, NextDelegate next, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsSSOTokenExchangeMiddleware/<DeduplicatedTokenExchangeIdAsync>d__4")]
private Task`1<bool> DeduplicatedTokenExchangeIdAsync(ITurnContext turnContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsSSOTokenExchangeMiddleware/<SendInvokeResponseAsync>d__5")]
private Task SendInvokeResponseAsync(ITurnContext turnContext, object body, HttpStatusCode httpStatusCode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Teams.TeamsSSOTokenExchangeMiddleware/<ExchangedTokenAsync>d__6")]
private Task`1<bool> ExchangedTokenAsync(ITurnContext turnContext, CancellationToken cancellationToken);
}
public static class Microsoft.Bot.Builder.TelemetryConstants : object {
    public static string ChannelIdProperty;
    public static string ConversationIdProperty;
    public static string ConversationNameProperty;
    public static string DialogIdProperty;
    public static string FromIdProperty;
    public static string FromNameProperty;
    public static string LocaleProperty;
    public static string RecipientIdProperty;
    public static string RecipientNameProperty;
    public static string ReplyActivityIDProperty;
    public static string TextProperty;
    public static string SpeakProperty;
    public static string UserIdProperty;
    public static string AttachmentsProperty;
    public static string ActivityTypeProperty;
    public static string ActivityIdProperty;
    private static TelemetryConstants();
}
public static class Microsoft.Bot.Builder.TelemetryLoggerConstants : object {
    public static string BotMsgReceiveEvent;
    public static string BotMsgSendEvent;
    public static string BotMsgUpdateEvent;
    public static string BotMsgDeleteEvent;
    private static TelemetryLoggerConstants();
}
public class Microsoft.Bot.Builder.TelemetryLoggerMiddleware : object {
    [CompilerGeneratedAttribute]
private bool <LogPersonalInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private IBotTelemetryClient <TelemetryClient>k__BackingField;
    public bool LogPersonalInformation { get; }
    [JsonIgnoreAttribute]
public IBotTelemetryClient TelemetryClient { get; }
    public TelemetryLoggerMiddleware(IBotTelemetryClient telemetryClient, bool logPersonalInformation);
    [CompilerGeneratedAttribute]
public bool get_LogPersonalInformation();
    [CompilerGeneratedAttribute]
public IBotTelemetryClient get_TelemetryClient();
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TelemetryLoggerMiddleware/<OnTurnAsync>d__7")]
public virtual Task OnTurnAsync(ITurnContext context, NextDelegate nextTurn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TelemetryLoggerMiddleware/<OnReceiveActivityAsync>d__8")]
protected virtual Task OnReceiveActivityAsync(Activity activity, CancellationToken cancellation);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TelemetryLoggerMiddleware/<OnSendActivityAsync>d__9")]
protected virtual Task OnSendActivityAsync(Activity activity, CancellationToken cancellation);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TelemetryLoggerMiddleware/<OnUpdateActivityAsync>d__10")]
protected virtual Task OnUpdateActivityAsync(Activity activity, CancellationToken cancellation);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TelemetryLoggerMiddleware/<OnDeleteActivityAsync>d__11")]
protected virtual Task OnDeleteActivityAsync(Activity activity, CancellationToken cancellation);
    protected Task`1<Dictionary`2<string, string>> FillReceiveEventPropertiesAsync(Activity activity, Dictionary`2<string, string> additionalProperties);
    protected Task`1<Dictionary`2<string, string>> FillSendEventPropertiesAsync(Activity activity, Dictionary`2<string, string> additionalProperties);
    protected Task`1<Dictionary`2<string, string>> FillUpdateEventPropertiesAsync(Activity activity, Dictionary`2<string, string> additionalProperties);
    protected Task`1<Dictionary`2<string, string>> FillDeleteEventPropertiesAsync(IMessageDeleteActivity activity, Dictionary`2<string, string> additionalProperties);
    private static void PopulateAdditionalChannelProperties(Activity activity, Dictionary`2<string, string> properties);
}
internal static class Microsoft.Bot.Builder.TokenResolver : object {
    private static TimeSpan PollingInterval;
    private static TokenResolver();
    public static void CheckForOAuthCards(BotAdapter adapter, ILogger logger, ITurnContext turnContext, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TokenResolver/<PollForTokenAsync>d__2")]
private static Task PollForTokenAsync(PollingHelper pollingHelper, string connectionName);
    private static Activity CreateTokenResponse(ConversationReference relatesTo, string token, string connectionName);
}
[ExtensionAttribute]
public static class Microsoft.Bot.Builder.TraceExtensions.ITurnContextExtensions : object {
    [ExtensionAttribute]
public static Task`1<ResourceResponse> TraceActivityAsync(ITurnContext turnContext, string name, object value, string valueType, string label, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.TraceTranscriptLogger : object {
    private static JsonSerializerSettings _serializationSettings;
    private bool _traceActivity;
    public TraceTranscriptLogger(bool traceActivity);
    private static TraceTranscriptLogger();
    public sealed virtual Task LogActivityAsync(IActivity activity);
}
public class Microsoft.Bot.Builder.TranscriptInfo : object {
    [CompilerGeneratedAttribute]
private string <ChannelId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Created>k__BackingField;
    public string ChannelId { get; public set; }
    public string Id { get; public set; }
    public DateTimeOffset Created { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ChannelId();
    [CompilerGeneratedAttribute]
public void set_ChannelId(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Created();
    [CompilerGeneratedAttribute]
public void set_Created(DateTimeOffset value);
}
public class Microsoft.Bot.Builder.TranscriptLoggerMiddleware : object {
    private static JsonSerializerSettings _jsonSettings;
    private ITranscriptLogger _logger;
    public TranscriptLoggerMiddleware(ITranscriptLogger transcriptLogger);
    private static TranscriptLoggerMiddleware();
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TranscriptLoggerMiddleware/<OnTurnAsync>d__3")]
public sealed virtual Task OnTurnAsync(ITurnContext turnContext, NextDelegate nextTurn, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TranscriptLoggerMiddleware/<TryLogTranscriptAsync>d__4")]
private static Task TryLogTranscriptAsync(ITranscriptLogger logger, Queue`1<IActivity> transcript);
    private static IActivity CloneActivity(IActivity activity);
    private static IActivity EnsureActivityHasId(IActivity activity);
    private static void LogActivity(Queue`1<IActivity> transcript, IActivity activity);
}
public class Microsoft.Bot.Builder.TurnContext : object {
    private static string Turn;
    private IList`1<SendActivitiesHandler> _onSendActivities;
    private IList`1<UpdateActivityHandler> _onUpdateActivity;
    private IList`1<DeleteActivityHandler> _onDeleteActivity;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private BotAdapter <Adapter>k__BackingField;
    [CompilerGeneratedAttribute]
private TurnContextStateCollection <TurnState>k__BackingField;
    [CompilerGeneratedAttribute]
private Activity <Activity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Responded>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Activity> <BufferedReplyActivities>k__BackingField;
    public BotAdapter Adapter { get; }
    public TurnContextStateCollection TurnState { get; }
    public string Locale { get; public set; }
    public Activity Activity { get; }
    public bool Responded { get; private set; }
    public List`1<Activity> BufferedReplyActivities { get; }
    public TurnContext(BotAdapter adapter, Activity activity);
    public TurnContext(ITurnContext turnContext, Activity activity);
    [CompilerGeneratedAttribute]
public sealed virtual BotAdapter get_Adapter();
    [CompilerGeneratedAttribute]
public sealed virtual TurnContextStateCollection get_TurnState();
    public string get_Locale();
    public void set_Locale(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Activity get_Activity();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Responded();
    [CompilerGeneratedAttribute]
private void set_Responded(bool value);
    [CompilerGeneratedAttribute]
public List`1<Activity> get_BufferedReplyActivities();
    public sealed virtual ITurnContext OnSendActivities(SendActivitiesHandler handler);
    public sealed virtual ITurnContext OnUpdateActivity(UpdateActivityHandler handler);
    public sealed virtual ITurnContext OnDeleteActivity(DeleteActivityHandler handler);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TurnContext/<SendActivityAsync>d__29")]
public sealed virtual Task`1<ResourceResponse> SendActivityAsync(string textReplyToSend, string speak, string inputHint, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TurnContext/<SendActivityAsync>d__30")]
public sealed virtual Task`1<ResourceResponse> SendActivityAsync(IActivity activity, CancellationToken cancellationToken);
    public sealed virtual Task`1<ResourceResponse[]> SendActivitiesAsync(IActivity[] activities, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TurnContext/<UpdateActivityAsync>d__32")]
public sealed virtual Task`1<ResourceResponse> UpdateActivityAsync(IActivity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TurnContext/<DeleteActivityAsync>d__33")]
public sealed virtual Task DeleteActivityAsync(string activityId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TurnContext/<DeleteActivityAsync>d__34")]
public sealed virtual Task DeleteActivityAsync(ConversationReference conversationReference, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TurnContext/<UpdateActivityInternalAsync>d__37")]
private Task`1<ResourceResponse> UpdateActivityInternalAsync(Activity activity, IEnumerable`1<UpdateActivityHandler> updateHandlers, Func`1<Task`1<ResourceResponse>> callAtBottom, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.TurnContext/<DeleteActivityInternalAsync>d__38")]
private Task DeleteActivityInternalAsync(ConversationReference cr, IEnumerable`1<DeleteActivityHandler> deleteHandlers, Func`1<Task> callAtBottom, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Builder.TurnContextStateCollection : Dictionary`2<string, object> {
    private bool _disposed;
    public T Get(string key);
    public T Get();
    public void Add(string key, T value);
    public void Add(T value);
    public void Set(string key, T value);
    public void Set(T value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public static class Microsoft.Bot.Builder.TurnStateConstants : object {
    public static string OAuthLoginTimeoutKey;
    public static string TokenPollingSettingsKey;
    public static TimeSpan OAuthLoginTimeoutValue;
    private static TurnStateConstants();
}
public class Microsoft.Bot.Builder.UpdateActivityHandler : MulticastDelegate {
    public UpdateActivityHandler(object object, IntPtr method);
    public virtual Task`1<ResourceResponse> Invoke(ITurnContext turnContext, Activity activity, Func`1<Task`1<ResourceResponse>> next);
    public virtual IAsyncResult BeginInvoke(ITurnContext turnContext, Activity activity, Func`1<Task`1<ResourceResponse>> next, AsyncCallback callback, object object);
    public virtual Task`1<ResourceResponse> EndInvoke(IAsyncResult result);
}
public class Microsoft.Bot.Builder.UserState : BotState {
    public UserState(IStorage storage);
    protected virtual string GetStorageKey(ITurnContext turnContext);
}
public static class Microsoft.Bot.Schema.HandoffEventNames : object {
    public static string InitiateHandoff;
    public static string HandoffStatus;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
