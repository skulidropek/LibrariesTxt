public class Microsoft.Bot.Builder.InvokeResponse : object {
    [CompilerGeneratedAttribute]
private int <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Body>k__BackingField;
    public int Status { get; public set; }
    public object Body { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(int value);
    [CompilerGeneratedAttribute]
public object get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(object value);
    public bool IsSuccessStatusCode();
}
public class Microsoft.Bot.Builder.InvokeResponse`1 : InvokeResponse {
    public T Body { get; public set; }
    public T get_Body();
    public void set_Body(T value);
}
public abstract class Microsoft.Bot.Builder.Skills.BotFrameworkClient : object {
    [AsyncStateMachineAttribute("Microsoft.Bot.Builder.Skills.BotFrameworkClient/<PostActivityAsync>d__0")]
public virtual Task`1<InvokeResponse> PostActivityAsync(string fromBotId, string toBotId, Uri toUrl, Uri serviceUrl, string conversationId, Activity activity, CancellationToken cancellationToken);
    public abstract virtual Task`1<InvokeResponse`1<T>> PostActivityAsync(string fromBotId, string toBotId, Uri toUrl, Uri serviceUrl, string conversationId, Activity activity, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.Bot.Connector.Attachments : object {
    [CompilerGeneratedAttribute]
private ConnectorClient <Client>k__BackingField;
    private static Lazy`1<HttpClient> _httpClient;
    public ConnectorClient Client { get; private set; }
    public Attachments(ConnectorClient client);
    private static Attachments();
    [CompilerGeneratedAttribute]
public sealed virtual ConnectorClient get_Client();
    [CompilerGeneratedAttribute]
private void set_Client(ConnectorClient value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Attachments/<GetAttachmentInfoWithHttpMessagesAsync>d__5")]
public sealed virtual Task`1<HttpOperationResponse`1<AttachmentInfo>> GetAttachmentInfoWithHttpMessagesAsync(string attachmentId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Attachments/<GetAttachmentWithHttpMessagesAsync>d__6")]
public sealed virtual Task`1<HttpOperationResponse`1<Stream>> GetAttachmentWithHttpMessagesAsync(string attachmentId, string viewId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public string GetAttachmentUri(string attachmentId, string viewId);
    public Task`1<Stream> GetAttachmentStreamAsync(string attachmentId, string viewId);
}
[ExtensionAttribute]
public static class Microsoft.Bot.Connector.AttachmentsExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.AttachmentsExtensions/<GetAttachmentInfoAsync>d__0")]
[ExtensionAttribute]
public static Task`1<AttachmentInfo> GetAttachmentInfoAsync(IAttachments operations, string attachmentId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.AttachmentsExtensions/<GetAttachmentAsync>d__1")]
[ExtensionAttribute]
public static Task`1<Stream> GetAttachmentAsync(IAttachments operations, string attachmentId, string viewId, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Connector.Authentication.AllowedCallersClaimsValidator : ClaimsValidator {
    private IList`1<string> _allowedCallers;
    public AllowedCallersClaimsValidator(IList`1<string> allowedCallers);
    public virtual Task ValidateClaimsAsync(IList`1<Claim> claims);
}
public class Microsoft.Bot.Connector.Authentication.AllowedSkillsClaimsValidator : ClaimsValidator {
    private IList`1<string> _allowedSkills;
    public AllowedSkillsClaimsValidator(IList`1<string> allowedSkillAppIds);
    public virtual Task ValidateClaimsAsync(IList`1<Claim> claims);
}
public abstract class Microsoft.Bot.Connector.Authentication.AppCredentials : ServiceClientCredentials {
    [ObsoleteAttribute]
internal static IDictionary`2<string, DateTime> TrustedHostNames;
    private Lazy`1<IAuthenticator> _authenticator;
    private string _oAuthScope;
    [CompilerGeneratedAttribute]
private string <MicrosoftAppId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthTenant>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <CustomHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public string MicrosoftAppId { get; public set; }
    public string ChannelAuthTenant { get; public set; }
    public string OAuthEndpoint { get; }
    public bool ValidateAuthority { get; }
    public string OAuthScope { get; }
    protected string AuthTenant { get; protected set; }
    protected HttpClient CustomHttpClient { get; protected set; }
    protected ILogger Logger { get; protected set; }
    protected string DefaultChannelAuthTenant { get; }
    protected string ToChannelFromBotOAuthScope { get; }
    protected string ToChannelFromBotLoginUrlTemplate { get; }
    public AppCredentials(string channelAuthTenant, HttpClient customHttpClient, ILogger logger);
    public AppCredentials(string channelAuthTenant, HttpClient customHttpClient, ILogger logger, string oAuthScope);
    private static AppCredentials();
    [CompilerGeneratedAttribute]
public string get_MicrosoftAppId();
    [CompilerGeneratedAttribute]
public void set_MicrosoftAppId(string value);
    public virtual string get_ChannelAuthTenant();
    public virtual void set_ChannelAuthTenant(string value);
    public virtual string get_OAuthEndpoint();
    public virtual bool get_ValidateAuthority();
    public virtual string get_OAuthScope();
    [CompilerGeneratedAttribute]
protected string get_AuthTenant();
    [CompilerGeneratedAttribute]
protected void set_AuthTenant(string value);
    [CompilerGeneratedAttribute]
protected HttpClient get_CustomHttpClient();
    [CompilerGeneratedAttribute]
protected void set_CustomHttpClient(HttpClient value);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected void set_Logger(ILogger value);
    protected virtual string get_DefaultChannelAuthTenant();
    protected virtual string get_ToChannelFromBotOAuthScope();
    protected virtual string get_ToChannelFromBotLoginUrlTemplate();
    [ObsoleteAttribute("TrustServiceUrl is not a required part of the security model.")]
public static void TrustServiceUrl(string serviceUrl);
    [ObsoleteAttribute("TrustServiceUrl is not a required part of the security model.")]
public static void TrustServiceUrl(string serviceUrl, DateTime expirationTime);
    [ObsoleteAttribute("IsTrustedServiceUrl is not a required part of the security model.")]
public static bool IsTrustedServiceUrl(string serviceUrl);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.AppCredentials/<ProcessHttpRequestAsync>d__39")]
public virtual Task ProcessHttpRequestAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.AppCredentials/<GetTokenAsync>d__40")]
public Task`1<string> GetTokenAsync(bool forceRefresh);
    protected abstract virtual Lazy`1<IAuthenticator> BuildIAuthenticator();
    private bool ShouldSetToken();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[ObsoleteAttribute("Use `ConfigurationBotFrameworkAuthentication` instead to perform AseChannel validation.", "False")]
public static class Microsoft.Bot.Connector.Authentication.AseChannelValidation : object {
    public static string ChannelId;
    public static TokenValidationParameters BetweenBotAndAseChannelTokenValidationParameters;
    private static string _metadataUrl;
    private static ICredentialProvider _credentialProvider;
    private static HttpClient _authHttpClient;
    private static AseChannelValidation();
    public static void Init(IConfiguration configuration);
    public static bool IsAseChannel(string channelId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.AseChannelValidation/<AuthenticateAseTokenAsync>d__7")]
public static Task`1<ClaimsIdentity> AuthenticateAseTokenAsync(string authHeader, HttpClient httpClient);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.AseChannelValidation/<AuthenticateAseTokenAsync>d__8")]
public static Task`1<ClaimsIdentity> AuthenticateAseTokenAsync(string authHeader, HttpClient httpClient, AuthenticationConfiguration authConfig);
}
public class Microsoft.Bot.Connector.Authentication.AuthenticateRequestResult : object {
    [CompilerGeneratedAttribute]
private string <Audience>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsIdentity <ClaimsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CallerId>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectorFactory <ConnectorFactory>k__BackingField;
    public string Audience { get; public set; }
    public ClaimsIdentity ClaimsIdentity { get; public set; }
    public string CallerId { get; public set; }
    public ConnectorFactory ConnectorFactory { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Audience();
    [CompilerGeneratedAttribute]
public void set_Audience(string value);
    [CompilerGeneratedAttribute]
public ClaimsIdentity get_ClaimsIdentity();
    [CompilerGeneratedAttribute]
public void set_ClaimsIdentity(ClaimsIdentity value);
    [CompilerGeneratedAttribute]
public string get_CallerId();
    [CompilerGeneratedAttribute]
public void set_CallerId(string value);
    [CompilerGeneratedAttribute]
public ConnectorFactory get_ConnectorFactory();
    [CompilerGeneratedAttribute]
public void set_ConnectorFactory(ConnectorFactory value);
}
public class Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration : object {
    [CompilerGeneratedAttribute]
private String[] <RequiredEndorsements>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsValidator <ClaimsValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ValidTokenIssuers>k__BackingField;
    public String[] RequiredEndorsements { get; public set; }
    public ClaimsValidator ClaimsValidator { get; public set; }
    public IEnumerable`1<string> ValidTokenIssuers { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_RequiredEndorsements();
    [CompilerGeneratedAttribute]
public void set_RequiredEndorsements(String[] value);
    [CompilerGeneratedAttribute]
public virtual ClaimsValidator get_ClaimsValidator();
    [CompilerGeneratedAttribute]
public virtual void set_ClaimsValidator(ClaimsValidator value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ValidTokenIssuers();
    [CompilerGeneratedAttribute]
public void set_ValidTokenIssuers(IEnumerable`1<string> value);
}
public static class Microsoft.Bot.Connector.Authentication.AuthenticationConstants : object {
    public static string ToChannelFromBotLoginUrl;
    public static string ToChannelFromBotLoginUrlTemplate;
    public static string DefaultChannelAuthTenant;
    public static string ToChannelFromBotOAuthScope;
    public static string ToBotFromChannelTokenIssuer;
    public static string OAuthUrl;
    public static string BotOpenIdMetadataKey;
    public static string OAuthUrlKey;
    public static string EmulateOAuthCardsKey;
    public static string ToBotFromChannelOpenIdMetadataUrl;
    public static string ToBotFromEmulatorOpenIdMetadataUrl;
    public static string ToBotFromAseChannelOpenIdMetadataUrl;
    public static string ToBotFromEnterpriseChannelOpenIdMetadataUrlFormat;
    public static string ValidTokenIssuerUrlTemplateV1;
    public static string ValidTokenIssuerUrlTemplateV2;
    public static string ValidGovernmentTokenIssuerUrlTemplateV1;
    public static string ValidGovernmentTokenIssuerUrlTemplateV2;
    public static string AuthorizedParty;
    public static string AudienceClaim;
    public static string KeyIdHeader;
    public static string VersionClaim;
    public static string AppIdClaim;
    public static string ServiceUrlClaim;
    public static string AnonymousSkillAppId;
    public static string AnonymousAuthType;
    public static string TenantIdClaim;
    public static HashSet`1<string> AllowedSigningAlgorithms;
    private static AuthenticationConstants();
}
public class Microsoft.Bot.Connector.Authentication.AuthenticatorResult : object {
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ExpiresOn>k__BackingField;
    public string AccessToken { get; public set; }
    public DateTimeOffset ExpiresOn { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiresOn();
    [CompilerGeneratedAttribute]
public void set_ExpiresOn(DateTimeOffset value);
}
public abstract class Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication : object {
    public abstract virtual Task`1<AuthenticateRequestResult> AuthenticateRequestAsync(Activity activity, string authHeader, CancellationToken cancellationToken);
    public abstract virtual Task`1<AuthenticateRequestResult> AuthenticateStreamingRequestAsync(string authHeader, string channelIdHeader, CancellationToken cancellationToken);
    public abstract virtual ConnectorFactory CreateConnectorFactory(ClaimsIdentity claimsIdentity);
    public abstract virtual Task`1<UserTokenClient> CreateUserTokenClientAsync(ClaimsIdentity claimsIdentity, CancellationToken cancellationToken);
    public virtual BotFrameworkClient CreateBotFrameworkClient();
    public virtual string GetOriginatingAudience();
    public virtual Task`1<ClaimsIdentity> AuthenticateChannelRequestAsync(string authHeader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication/<GenerateCallerIdAsync>d__7")]
protected internal Task`1<string> GenerateCallerIdAsync(ServiceClientCredentialsFactory credentialFactory, ClaimsIdentity claimsIdentity, string callerId, CancellationToken cancellationToken);
}
public static class Microsoft.Bot.Connector.Authentication.BotFrameworkAuthenticationFactory : object {
    public static BotFrameworkAuthentication Create();
    public static BotFrameworkAuthentication Create(string channelService, bool validateAuthority, string toChannelFromBotLoginUrl, string toChannelFromBotOAuthScope, string toBotFromChannelTokenIssuer, string oAuthUrl, string toBotFromChannelOpenIdMetadataUrl, string toBotFromEmulatorOpenIdMetadataUrl, string callerId, ServiceClientCredentialsFactory credentialFactory, AuthenticationConfiguration authConfiguration, IHttpClientFactory httpClientFactory, ILogger logger);
}
internal class Microsoft.Bot.Connector.Authentication.BotFrameworkClientImpl : BotFrameworkClient {
    private ServiceClientCredentialsFactory _credentialsFactory;
    private HttpClient _httpClient;
    private string _loginEndpoint;
    private ILogger _logger;
    private JsonSerializerSettings _settings;
    private bool _disposed;
    public BotFrameworkClientImpl(ServiceClientCredentialsFactory credentialsFactory, IHttpClientFactory httpClientFactory, string loginEndpoint, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.BotFrameworkClientImpl/<PostActivityAsync>d__7`1")]
public virtual Task`1<InvokeResponse`1<T>> PostActivityAsync(string fromBotId, string toBotId, Uri toUrl, Uri serviceUrl, string conversationId, Activity activity, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
internal abstract class Microsoft.Bot.Connector.Authentication.BuiltinBotFrameworkAuthentication : BotFrameworkAuthentication {
    private static HttpClient _authHttpClient;
    private string _toChannelFromBotOAuthScope;
    private string _loginEndpoint;
    private string _callerId;
    private string _channelService;
    private string _oauthEndpoint;
    private ServiceClientCredentialsFactory _credentialsFactory;
    private AuthenticationConfiguration _authConfiguration;
    private IHttpClientFactory _httpClientFactory;
    private ILogger _logger;
    protected BuiltinBotFrameworkAuthentication(string toChannelFromBotOAuthScope, string loginEndpoint, string callerId, string channelService, string oauthEndpoint, ServiceClientCredentialsFactory credentialsFactory, AuthenticationConfiguration authConfiguration, IHttpClientFactory httpClientFactory, ILogger logger);
    private static BuiltinBotFrameworkAuthentication();
    public static string GetAppId(ClaimsIdentity claimsIdentity);
    public virtual string GetOriginatingAudience();
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.BuiltinBotFrameworkAuthentication/<AuthenticateChannelRequestAsync>d__13")]
public virtual Task`1<ClaimsIdentity> AuthenticateChannelRequestAsync(string authHeader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.BuiltinBotFrameworkAuthentication/<AuthenticateRequestAsync>d__14")]
public virtual Task`1<AuthenticateRequestResult> AuthenticateRequestAsync(Activity activity, string authHeader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.BuiltinBotFrameworkAuthentication/<AuthenticateStreamingRequestAsync>d__15")]
public virtual Task`1<AuthenticateRequestResult> AuthenticateStreamingRequestAsync(string authHeader, string channelIdHeader, CancellationToken cancellationToken);
    public virtual ConnectorFactory CreateConnectorFactory(ClaimsIdentity claimsIdentity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.BuiltinBotFrameworkAuthentication/<CreateUserTokenClientAsync>d__17")]
public virtual Task`1<UserTokenClient> CreateUserTokenClientAsync(ClaimsIdentity claimsIdentity, CancellationToken cancellationToken);
    public virtual BotFrameworkClient CreateBotFrameworkClient();
    private IChannelProvider GetChannelProvider();
}
public class Microsoft.Bot.Connector.Authentication.CertificateAppCredentials : AppCredentials {
    private X509Certificate2 clientCertificate;
    private bool sendX5c;
    public CertificateAppCredentials(CertificateAppCredentialsOptions options);
    public CertificateAppCredentials(X509Certificate2 clientCertificate, string appId, string channelAuthTenant, HttpClient customHttpClient, ILogger logger);
    public CertificateAppCredentials(X509Certificate2 clientCertificate, bool sendX5c, string appId, string channelAuthTenant, HttpClient customHttpClient, ILogger logger);
    public CertificateAppCredentials(X509Certificate2 clientCertificate, string appId, string channelAuthTenant, string oAuthScope, bool sendX5c, HttpClient customHttpClient, ILogger logger);
    protected virtual Lazy`1<IAuthenticator> BuildIAuthenticator();
    private IConfidentialClientApplication CreateClientApplication(X509Certificate2 clientCertificate, string appId, bool sendX5c, HttpClient customHttpClient);
    [CompilerGeneratedAttribute]
private IAuthenticator <BuildIAuthenticator>b__6_0();
}
public class Microsoft.Bot.Connector.Authentication.CertificateAppCredentialsOptions : object {
    [CompilerGeneratedAttribute]
private X509Certificate2 <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChannelAuthTenant>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OauthScope>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpClient <CustomHttpClient>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SendX5c>k__BackingField;
    public X509Certificate2 ClientCertificate { get; public set; }
    public string AppId { get; public set; }
    public string ChannelAuthTenant { get; public set; }
    public string OauthScope { get; public set; }
    public HttpClient CustomHttpClient { get; public set; }
    public ILogger Logger { get; public set; }
    public bool SendX5c { get; public set; }
    [CompilerGeneratedAttribute]
public X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public void set_ClientCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public string get_AppId();
    [CompilerGeneratedAttribute]
public void set_AppId(string value);
    [CompilerGeneratedAttribute]
public string get_ChannelAuthTenant();
    [CompilerGeneratedAttribute]
public void set_ChannelAuthTenant(string value);
    [CompilerGeneratedAttribute]
public string get_OauthScope();
    [CompilerGeneratedAttribute]
public void set_OauthScope(string value);
    [CompilerGeneratedAttribute]
public HttpClient get_CustomHttpClient();
    [CompilerGeneratedAttribute]
public void set_CustomHttpClient(HttpClient value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public bool get_SendX5c();
    [CompilerGeneratedAttribute]
public void set_SendX5c(bool value);
}
public class Microsoft.Bot.Connector.Authentication.CertificateGovernmentAppCredentials : CertificateAppCredentials {
    protected string DefaultChannelAuthTenant { get; }
    protected string ToChannelFromBotOAuthScope { get; }
    protected string ToChannelFromBotLoginUrlTemplate { get; }
    public CertificateGovernmentAppCredentials(CertificateAppCredentialsOptions options);
    public CertificateGovernmentAppCredentials(X509Certificate2 clientCertificate, string appId, string channelAuthTenant, HttpClient customHttpClient, ILogger logger);
    public CertificateGovernmentAppCredentials(X509Certificate2 clientCertificate, bool sendX5c, string appId, string channelAuthTenant, HttpClient customHttpClient, ILogger logger);
    public CertificateGovernmentAppCredentials(X509Certificate2 clientCertificate, string appId, string channelAuthTenant, string oAuthScope, bool sendX5c, HttpClient customHttpClient, ILogger logger);
    protected virtual string get_DefaultChannelAuthTenant();
    protected virtual string get_ToChannelFromBotOAuthScope();
    protected virtual string get_ToChannelFromBotLoginUrlTemplate();
}
public class Microsoft.Bot.Connector.Authentication.CertificateServiceClientCredentialsFactory : ServiceClientCredentialsFactory {
    private X509Certificate2 _certificate;
    private string _appId;
    private string _tenantId;
    private bool _sendX5c;
    private HttpClient _httpClient;
    private ILogger _logger;
    private ConcurrentDictionary`2<string, CertificateAppCredentials> _certificateAppCredentialsByAudience;
    public CertificateServiceClientCredentialsFactory(X509Certificate2 certificate, string appId, string tenantId, HttpClient httpClient, ILogger logger, bool sendX5c);
    public virtual Task`1<bool> IsValidAppIdAsync(string appId, CancellationToken cancellationToken);
    public virtual Task`1<bool> IsAuthenticationDisabledAsync(CancellationToken cancellationToken);
    public virtual Task`1<ServiceClientCredentials> CreateCredentialsAsync(string appId, string audience, string loginEndpoint, bool validateAuthority, CancellationToken cancellationToken);
}
[ObsoleteAttribute("Use `ConfigurationBotFrameworkAuthentication` instead to perform channel validation.", "False")]
public static class Microsoft.Bot.Connector.Authentication.ChannelValidation : object {
    public static TokenValidationParameters ToBotFromChannelTokenValidationParameters;
    [CompilerGeneratedAttribute]
private static string <OpenIdMetadataUrl>k__BackingField;
    public static string OpenIdMetadataUrl { get; public set; }
    private static ChannelValidation();
    [CompilerGeneratedAttribute]
public static string get_OpenIdMetadataUrl();
    [CompilerGeneratedAttribute]
public static void set_OpenIdMetadataUrl(string value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ChannelValidation/<AuthenticateChannelToken>d__5")]
public static Task`1<ClaimsIdentity> AuthenticateChannelToken(string authHeader, ICredentialProvider credentials, HttpClient httpClient, string channelId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ChannelValidation/<AuthenticateChannelToken>d__6")]
public static Task`1<ClaimsIdentity> AuthenticateChannelToken(string authHeader, ICredentialProvider credentials, HttpClient httpClient, string channelId, AuthenticationConfiguration authConfig);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ChannelValidation/<AuthenticateChannelToken>d__7")]
public static Task`1<ClaimsIdentity> AuthenticateChannelToken(string authHeader, ICredentialProvider credentials, string serviceUrl, HttpClient httpClient, string channelId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ChannelValidation/<AuthenticateChannelToken>d__8")]
public static Task`1<ClaimsIdentity> AuthenticateChannelToken(string authHeader, ICredentialProvider credentials, string serviceUrl, HttpClient httpClient, string channelId, AuthenticationConfiguration authConfig);
}
public abstract class Microsoft.Bot.Connector.Authentication.ClaimsValidator : object {
    public abstract virtual Task ValidateClaimsAsync(IList`1<Claim> claims);
}
public abstract class Microsoft.Bot.Connector.Authentication.ConnectorFactory : object {
    public abstract virtual Task`1<IConnectorClient> CreateAsync(string serviceUrl, string audience, CancellationToken cancellationToken);
}
internal class Microsoft.Bot.Connector.Authentication.ConnectorFactoryImpl : ConnectorFactory {
    private string _appId;
    private string _toChannelFromBotOAuthScope;
    private string _loginEndpoint;
    private bool _validateAuthority;
    private ServiceClientCredentialsFactory _credentialFactory;
    private IHttpClientFactory _httpClientFactory;
    private ILogger _logger;
    public ConnectorFactoryImpl(string appId, string toChannelFromBotOAuthScope, string loginEndpoint, bool validateAuthority, ServiceClientCredentialsFactory credentialFactory, IHttpClientFactory httpClientFactory, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ConnectorFactoryImpl/<CreateAsync>d__8")]
public virtual Task`1<IConnectorClient> CreateAsync(string serviceUrl, string audience, CancellationToken cancellationToken);
}
internal class Microsoft.Bot.Connector.Authentication.ConstantHttpClientFactory : object {
    private HttpClient httpClient;
    public ConstantHttpClientFactory(HttpClient client);
    public sealed virtual HttpClient GetHttpClient();
}
internal class Microsoft.Bot.Connector.Authentication.DelegatingCredentialProvider : object {
    private ServiceClientCredentialsFactory _credentialFactory;
    public DelegatingCredentialProvider(ServiceClientCredentialsFactory credentialFactory);
    public sealed virtual Task`1<string> GetAppPasswordAsync(string appId);
    public sealed virtual Task`1<bool> IsAuthenticationDisabledAsync();
    public sealed virtual Task`1<bool> IsValidAppIdAsync(string appId);
}
[ObsoleteAttribute("Use `ConfigurationBotFrameworkAuthentication` instead to perform emulator validation.", "False")]
public static class Microsoft.Bot.Connector.Authentication.EmulatorValidation : object {
    public static TokenValidationParameters ToBotFromEmulatorTokenValidationParameters;
    private static EmulatorValidation();
    public static bool IsTokenFromEmulator(string authHeader);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.EmulatorValidation/<AuthenticateEmulatorToken>d__2")]
public static Task`1<ClaimsIdentity> AuthenticateEmulatorToken(string authHeader, ICredentialProvider credentials, IChannelProvider channelProvider, HttpClient httpClient, string channelId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.EmulatorValidation/<AuthenticateEmulatorToken>d__3")]
public static Task`1<ClaimsIdentity> AuthenticateEmulatorToken(string authHeader, ICredentialProvider credentials, IChannelProvider channelProvider, HttpClient httpClient, string channelId, AuthenticationConfiguration authConfig);
}
public class Microsoft.Bot.Connector.Authentication.EndorsementsRetriever : object {
    public static string JsonWebKeySetUri;
    private HttpClient _httpClient;
    public EndorsementsRetriever(HttpClient httpClient);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.EndorsementsRetriever/<GetConfigurationAsync>d__3")]
public sealed virtual Task`1<IDictionary`2<string, HashSet`1<string>>> GetConfigurationAsync(string address, IDocumentRetriever retriever, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.EndorsementsRetriever/<GetDocumentAsync>d__4")]
public sealed virtual Task`1<string> GetDocumentAsync(string address, CancellationToken cancellationToken);
}
public static class Microsoft.Bot.Connector.Authentication.EndorsementsValidator : object {
    public static bool Validate(string expectedEndorsement, HashSet`1<string> endorsements);
}
[ObsoleteAttribute("Use `ConfigurationBotFrameworkAuthentication` instead to perform enterprise channel validation.", "False")]
public class Microsoft.Bot.Connector.Authentication.EnterpriseChannelValidation : object {
    public static TokenValidationParameters ToBotFromEnterpriseChannelTokenValidationParameters;
    private static EnterpriseChannelValidation();
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.EnterpriseChannelValidation/<AuthenticateChannelToken>d__1")]
public static Task`1<ClaimsIdentity> AuthenticateChannelToken(string authHeader, ICredentialProvider credentials, IChannelProvider channelProvider, string serviceUrl, HttpClient httpClient, string channelId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.EnterpriseChannelValidation/<AuthenticateChannelToken>d__2")]
public static Task`1<ClaimsIdentity> AuthenticateChannelToken(string authHeader, ICredentialProvider credentials, IChannelProvider channelProvider, string serviceUrl, HttpClient httpClient, string channelId, AuthenticationConfiguration authConfig);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.EnterpriseChannelValidation/<ValidateIdentity>d__3")]
public static Task ValidateIdentity(ClaimsIdentity identity, ICredentialProvider credentials, string serviceUrl);
}
public class Microsoft.Bot.Connector.Authentication.FederatedAppCredentials : AppCredentials {
    private string _clientId;
    public FederatedAppCredentials(string appId, string clientId, string channelAuthTenant, string oAuthScope, HttpClient customHttpClient, ILogger logger);
    protected virtual Lazy`1<IAuthenticator> BuildIAuthenticator();
    [CompilerGeneratedAttribute]
private IAuthenticator <BuildIAuthenticator>b__2_0();
}
internal class Microsoft.Bot.Connector.Authentication.FederatedAuthenticator : object {
    private string _authority;
    private string _scope;
    private string _clientId;
    private ILogger _logger;
    private IConfidentialClientApplication _clientApplication;
    private ManagedIdentityClientAssertion _managedIdentityClientAssertion;
    public FederatedAuthenticator(string appId, string clientId, string authority, string scope, HttpClient customHttpClient, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.FederatedAuthenticator/<GetTokenAsync>d__7")]
public sealed virtual Task`1<AuthenticatorResult> GetTokenAsync(bool forceRefresh);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.FederatedAuthenticator/<AcquireTokenAsync>d__8")]
private Task`1<AuthenticatorResult> AcquireTokenAsync(bool forceRefresh);
    private RetryParams HandleTokenProviderException(Exception e, int retryCount);
    private IConfidentialClientApplication CreateClientApplication(string appId, HttpClient customHttpClient);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.FederatedAuthenticator/<FetchExternalTokenAsync>d__11")]
private Task`1<string> FetchExternalTokenAsync();
    [CompilerGeneratedAttribute]
private Task`1<string> <CreateClientApplication>b__10_0(AssertionRequestOptions options);
}
public class Microsoft.Bot.Connector.Authentication.FederatedServiceClientCredentialsFactory : ServiceClientCredentialsFactory {
    private string _appId;
    private string _clientId;
    private string _tenantId;
    private HttpClient _httpClient;
    private ILogger _logger;
    public FederatedServiceClientCredentialsFactory(string appId, string clientId, string tenantId, HttpClient httpClient, ILogger logger);
    public virtual Task`1<bool> IsValidAppIdAsync(string appId, CancellationToken cancellationToken);
    public virtual Task`1<bool> IsAuthenticationDisabledAsync(CancellationToken cancellationToken);
    public virtual Task`1<ServiceClientCredentials> CreateCredentialsAsync(string appId, string audience, string loginEndpoint, bool validateAuthority, CancellationToken cancellationToken);
}
public static class Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants : object {
    public static string ChannelService;
    public static string ToChannelFromBotLoginUrl;
    public static string ToChannelFromBotLoginUrlTemplate;
    public static string DefaultChannelAuthTenant;
    public static string ToChannelFromBotOAuthScope;
    public static string ToBotFromChannelTokenIssuer;
    public static string OAuthUrlGov;
    public static string ToBotFromChannelOpenIdMetadataUrl;
    public static string ToBotFromEmulatorOpenIdMetadataUrl;
    public static string ToBotFromAseChannelOpenIdMetadataUrl;
}
[ObsoleteAttribute("Use `ConfigurationBotFrameworkAuthentication` instead to perform government channel validation.", "False")]
public class Microsoft.Bot.Connector.Authentication.GovernmentChannelValidation : object {
    public static TokenValidationParameters ToBotFromGovernmentChannelTokenValidationParameters;
    [CompilerGeneratedAttribute]
private static string <OpenIdMetadataUrl>k__BackingField;
    public static string OpenIdMetadataUrl { get; public set; }
    private static GovernmentChannelValidation();
    [CompilerGeneratedAttribute]
public static string get_OpenIdMetadataUrl();
    [CompilerGeneratedAttribute]
public static void set_OpenIdMetadataUrl(string value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.GovernmentChannelValidation/<AuthenticateChannelToken>d__5")]
public static Task`1<ClaimsIdentity> AuthenticateChannelToken(string authHeader, ICredentialProvider credentials, string serviceUrl, HttpClient httpClient, string channelId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.GovernmentChannelValidation/<AuthenticateChannelToken>d__6")]
public static Task`1<ClaimsIdentity> AuthenticateChannelToken(string authHeader, ICredentialProvider credentials, string serviceUrl, HttpClient httpClient, string channelId, AuthenticationConfiguration authConfig);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.GovernmentChannelValidation/<ValidateIdentity>d__7")]
public static Task ValidateIdentity(ClaimsIdentity identity, ICredentialProvider credentials, string serviceUrl);
}
internal class Microsoft.Bot.Connector.Authentication.GovernmentCloudBotFrameworkAuthentication : BuiltinBotFrameworkAuthentication {
    public GovernmentCloudBotFrameworkAuthentication(ServiceClientCredentialsFactory credentialFactory, AuthenticationConfiguration authConfiguration, IHttpClientFactory httpClientFactory, ILogger logger);
}
public interface Microsoft.Bot.Connector.Authentication.IAuthenticator {
    public abstract virtual Task`1<AuthenticatorResult> GetTokenAsync(bool forceRefresh);
}
[ObsoleteAttribute("Use `ConfigurationBotFrameworkAuthentication` instead to configure channel.", "False")]
public interface Microsoft.Bot.Connector.Authentication.IChannelProvider {
    public abstract virtual Task`1<string> GetChannelServiceAsync();
    public abstract virtual bool IsGovernment();
    public abstract virtual bool IsPublicAzure();
}
[ObsoleteAttribute("Use `ConfigurationBotFrameworkAuthentication` instead to configure credentials.", "False")]
public interface Microsoft.Bot.Connector.Authentication.ICredentialProvider {
    public abstract virtual Task`1<bool> IsValidAppIdAsync(string appId);
    public abstract virtual Task`1<string> GetAppPasswordAsync(string appId);
    public abstract virtual Task`1<bool> IsAuthenticationDisabledAsync();
}
[ObsoleteAttribute("Use `ConfigurationBotFrameworkAuthentication` instead to configure credentials.", "False")]
public interface Microsoft.Bot.Connector.Authentication.IServiceClientCredentialProvider {
    public abstract virtual ServiceClientCredentials GetCredentials();
}
public class Microsoft.Bot.Connector.Authentication.JwtTokenExtractor : object {
    private static ConcurrentDictionary`2<string, ConfigurationManager`1<OpenIdConnectConfiguration>> _openIdMetadataCache;
    private static ConcurrentDictionary`2<string, ConfigurationManager`1<IDictionary`2<string, HashSet`1<string>>>> _endorsementsCache;
    private TokenValidationParameters _tokenValidationParameters;
    private ConfigurationManager`1<OpenIdConnectConfiguration> _openIdMetadata;
    private ConfigurationManager`1<IDictionary`2<string, HashSet`1<string>>> _endorsementsData;
    private HashSet`1<string> _allowedSigningAlgorithms;
    public JwtTokenExtractor(HttpClient httpClient, TokenValidationParameters tokenValidationParameters, string metadataUrl, HashSet`1<string> allowedSigningAlgorithms);
    public JwtTokenExtractor(HttpClient httpClient, TokenValidationParameters tokenValidationParameters, string metadataUrl, HashSet`1<string> allowedSigningAlgorithms, ConfigurationManager`1<IDictionary`2<string, HashSet`1<string>>> customEndorsementsConfig);
    private static JwtTokenExtractor();
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.JwtTokenExtractor/<GetIdentityAsync>d__8")]
public Task`1<ClaimsIdentity> GetIdentityAsync(string authorizationHeader, string channelId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.JwtTokenExtractor/<GetIdentityAsync>d__9")]
public Task`1<ClaimsIdentity> GetIdentityAsync(string authorizationHeader, string channelId, String[] requiredEndorsements);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.JwtTokenExtractor/<GetIdentityAsync>d__10")]
public Task`1<ClaimsIdentity> GetIdentityAsync(string scheme, string parameter, string channelId);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.JwtTokenExtractor/<GetIdentityAsync>d__11")]
public Task`1<ClaimsIdentity> GetIdentityAsync(string scheme, string parameter, string channelId, String[] requiredEndorsements);
    private bool HasAllowedIssuer(string jwtToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.JwtTokenExtractor/<ValidateTokenAsync>d__13")]
private Task`1<ClaimsPrincipal> ValidateTokenAsync(string jwtToken, string channelId, String[] requiredEndorsements);
}
[ObsoleteAttribute("Use `ConfigurationBotFrameworkAuthentication` instead to perform JWT token validation.", "False")]
public static class Microsoft.Bot.Connector.Authentication.JwtTokenValidation : object {
    private static HttpClient _httpClient;
    private static JwtTokenValidation();
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.JwtTokenValidation/<AuthenticateRequest>d__1")]
public static Task`1<ClaimsIdentity> AuthenticateRequest(IActivity activity, string authHeader, ICredentialProvider credentials, IChannelProvider provider, HttpClient httpClient);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.JwtTokenValidation/<AuthenticateRequest>d__2")]
public static Task`1<ClaimsIdentity> AuthenticateRequest(IActivity activity, string authHeader, ICredentialProvider credentials, IChannelProvider provider, AuthenticationConfiguration authConfig, HttpClient httpClient);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.JwtTokenValidation/<ValidateAuthHeader>d__3")]
public static Task`1<ClaimsIdentity> ValidateAuthHeader(string authHeader, ICredentialProvider credentials, IChannelProvider channelProvider, string channelId, string serviceUrl, HttpClient httpClient);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.JwtTokenValidation/<ValidateAuthHeader>d__4")]
public static Task`1<ClaimsIdentity> ValidateAuthHeader(string authHeader, ICredentialProvider credentials, IChannelProvider channelProvider, string channelId, AuthenticationConfiguration authConfig, string serviceUrl, HttpClient httpClient);
    public static string GetAppIdFromClaims(IEnumerable`1<Claim> claims);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.JwtTokenValidation/<ValidateClaimsAsync>d__6")]
internal static Task ValidateClaimsAsync(AuthenticationConfiguration authConfig, IEnumerable`1<Claim> claims);
    internal static bool IsValidTokenFormat(string authHeader);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.JwtTokenValidation/<AuthenticateTokenAsync>d__8")]
private static Task`1<ClaimsIdentity> AuthenticateTokenAsync(string authHeader, ICredentialProvider credentials, IChannelProvider channelProvider, string channelId, AuthenticationConfiguration authConfig, string serviceUrl, HttpClient httpClient);
}
public class Microsoft.Bot.Connector.Authentication.ManagedIdentityAppCredentials : AppCredentials {
    public ManagedIdentityAppCredentials(string appId, string oAuthScope, HttpClient customHttpClient, ILogger logger);
    protected virtual Lazy`1<IAuthenticator> BuildIAuthenticator();
    [CompilerGeneratedAttribute]
private IAuthenticator <BuildIAuthenticator>b__1_0();
}
public class Microsoft.Bot.Connector.Authentication.ManagedIdentityAuthenticator : object {
    private string _resource;
    private ILogger _logger;
    private IManagedIdentityApplication _clientApplication;
    public ManagedIdentityAuthenticator(string appId, string resource, HttpClient customHttpClient, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ManagedIdentityAuthenticator/<GetTokenAsync>d__4")]
public sealed virtual Task`1<AuthenticatorResult> GetTokenAsync(bool forceRefresh);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ManagedIdentityAuthenticator/<AcquireTokenAsync>d__5")]
private Task`1<AuthenticatorResult> AcquireTokenAsync(bool forceRefresh);
    private RetryParams HandleTokenProviderException(Exception e, int retryCount);
    private IManagedIdentityApplication CreateClientApplication(string appId, HttpClient customHttpClient);
}
public class Microsoft.Bot.Connector.Authentication.ManagedIdentityServiceClientCredentialsFactory : ServiceClientCredentialsFactory {
    private string _appId;
    private HttpClient _httpClient;
    private ILogger _logger;
    public ManagedIdentityServiceClientCredentialsFactory(string appId, HttpClient httpClient, ILogger logger);
    public virtual Task`1<bool> IsValidAppIdAsync(string appId, CancellationToken cancellationToken);
    public virtual Task`1<bool> IsAuthenticationDisabledAsync(CancellationToken cancellationToken);
    public virtual Task`1<ServiceClientCredentials> CreateCredentialsAsync(string appId, string audience, string loginEndpoint, bool validateAuthority, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials : AppCredentials {
    public static string MicrosoftAppTypeKey;
    public static string MicrosoftAppPasswordKey;
    public static string MicrosoftAppIdKey;
    public static string MicrosoftAppTenantIdKey;
    public static MicrosoftAppCredentials Empty;
    [CompilerGeneratedAttribute]
private string <MicrosoftAppPassword>k__BackingField;
    public string MicrosoftAppPassword { get; public set; }
    public MicrosoftAppCredentials(string appId, string password, HttpClient customHttpClient, ILogger logger, string oAuthScope);
    public MicrosoftAppCredentials(string appId, string password, string channelAuthTenant, HttpClient customHttpClient, ILogger logger, string oAuthScope);
    private static MicrosoftAppCredentials();
    [CompilerGeneratedAttribute]
public string get_MicrosoftAppPassword();
    [CompilerGeneratedAttribute]
public void set_MicrosoftAppPassword(string value);
    protected virtual Lazy`1<IAuthenticator> BuildIAuthenticator();
    private IConfidentialClientApplication CreateClientApplication(string appId, string password, HttpClient customHttpClient);
    [CompilerGeneratedAttribute]
private IAuthenticator <BuildIAuthenticator>b__11_0();
}
public class Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials : MicrosoftAppCredentials {
    public static MicrosoftGovernmentAppCredentials Empty;
    protected string DefaultChannelAuthTenant { get; }
    protected string ToChannelFromBotOAuthScope { get; }
    protected string ToChannelFromBotLoginUrlTemplate { get; }
    public MicrosoftGovernmentAppCredentials(string appId, string password, HttpClient customHttpClient, ILogger logger, string oAuthScope);
    public MicrosoftGovernmentAppCredentials(string appId, string password, string channelAuthTenant, HttpClient customHttpClient, ILogger logger, string oAuthScope);
    private static MicrosoftGovernmentAppCredentials();
    protected virtual string get_DefaultChannelAuthTenant();
    protected virtual string get_ToChannelFromBotOAuthScope();
    protected virtual string get_ToChannelFromBotLoginUrlTemplate();
}
public class Microsoft.Bot.Connector.Authentication.MsalAppCredentials : AppCredentials {
    public static MsalAppCredentials Empty;
    private static SemaphoreSlim tokenRefreshSemaphore;
    private static TimeSpan SemaphoreTimeout;
    private IConfidentialClientApplication _clientApplication;
    private ILogger _logger;
    private string _scope;
    private string _authority;
    private bool _validateAuthority;
    public MsalAppCredentials(IConfidentialClientApplication clientApplication, string appId, string authority, string scope, bool validateAuthority, ILogger logger);
    public MsalAppCredentials(string appId, string appPassword, string authority, string scope, bool validateAuthority, ILogger logger);
    public MsalAppCredentials(string appId, X509Certificate2 certificate, string authority, string scope, bool validateAuthority, ILogger logger);
    public MsalAppCredentials(string appId, X509Certificate2 certificate, bool sendX5c, string authority, string scope, bool validateAuthority, ILogger logger);
    private static MsalAppCredentials();
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.MsalAppCredentials/<Microsoft-Bot-Connector-Authentication-IAuthenticator-GetTokenAsync>d__12")]
private sealed virtual override Task`1<AuthenticatorResult> Microsoft.Bot.Connector.Authentication.IAuthenticator.GetTokenAsync(bool forceRefresh);
    protected virtual Lazy`1<IAuthenticator> BuildIAuthenticator();
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.MsalAppCredentials/<AcquireTokenAsync>d__14")]
private Task`1<AuthenticatorResult> AcquireTokenAsync(bool forceRefresh);
    private void ReleaseSemaphore();
    private RetryParams HandleMsalException(Exception ex, int ct);
    [CompilerGeneratedAttribute]
private IAuthenticator <BuildIAuthenticator>b__13_0();
}
public class Microsoft.Bot.Connector.Authentication.MsalServiceClientCredentialsFactory : ServiceClientCredentialsFactory {
    private IConfidentialClientApplication _clientApplication;
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private string <AppId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    public string AppId { get; }
    public string TenantId { get; }
    public MsalServiceClientCredentialsFactory(IConfiguration configuration, IConfidentialClientApplication clientApplication, ILogger logger);
    [CompilerGeneratedAttribute]
public string get_AppId();
    [CompilerGeneratedAttribute]
public string get_TenantId();
    public virtual Task`1<ServiceClientCredentials> CreateCredentialsAsync(string appId, string audience, string loginEndpoint, bool validateAuthority, CancellationToken cancellationToken);
    public virtual Task`1<bool> IsAuthenticationDisabledAsync(CancellationToken cancellationToken);
    public virtual Task`1<bool> IsValidAppIdAsync(string appId, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Connector.Authentication.OAuthConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateAuthority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    public string Authority { get; public set; }
    public bool ValidateAuthority { get; public set; }
    public string Scope { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public void set_Authority(string value);
    [CompilerGeneratedAttribute]
public bool get_ValidateAuthority();
    [CompilerGeneratedAttribute]
public void set_ValidateAuthority(bool value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
}
internal class Microsoft.Bot.Connector.Authentication.ParameterizedBotFrameworkAuthentication : BotFrameworkAuthentication {
    private static HttpClient _authHttpClient;
    private bool _validateAuthority;
    private string _toChannelFromBotLoginUrl;
    private string _toChannelFromBotOAuthScope;
    private string _toBotFromChannelTokenIssuer;
    private string _oAuthUrl;
    private string _toBotFromChannelOpenIdMetadataUrl;
    private string _toBotFromEmulatorOpenIdMetadataUrl;
    private string _callerId;
    private ServiceClientCredentialsFactory _credentialsFactory;
    private AuthenticationConfiguration _authConfiguration;
    private IHttpClientFactory _httpClientFactory;
    private ILogger _logger;
    public ParameterizedBotFrameworkAuthentication(bool validateAuthority, string toChannelFromBotLoginUrl, string toChannelFromBotOAuthScope, string toBotFromChannelTokenIssuer, string oAuthUrl, string toBotFromChannelOpenIdMetadataUrl, string toBotFromEmulatorOpenIdMetadataUrl, string callerId, ServiceClientCredentialsFactory credentialsFactory, AuthenticationConfiguration authConfiguration, IHttpClientFactory httpClientFactory, ILogger logger);
    private static ParameterizedBotFrameworkAuthentication();
    public virtual string GetOriginatingAudience();
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ParameterizedBotFrameworkAuthentication/<AuthenticateChannelRequestAsync>d__15")]
public virtual Task`1<ClaimsIdentity> AuthenticateChannelRequestAsync(string authHeader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ParameterizedBotFrameworkAuthentication/<AuthenticateRequestAsync>d__16")]
public virtual Task`1<AuthenticateRequestResult> AuthenticateRequestAsync(Activity activity, string authHeader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ParameterizedBotFrameworkAuthentication/<AuthenticateStreamingRequestAsync>d__17")]
public virtual Task`1<AuthenticateRequestResult> AuthenticateStreamingRequestAsync(string authHeader, string channelIdHeader, CancellationToken cancellationToken);
    public virtual ConnectorFactory CreateConnectorFactory(ClaimsIdentity claimsIdentity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ParameterizedBotFrameworkAuthentication/<CreateUserTokenClientAsync>d__19")]
public virtual Task`1<UserTokenClient> CreateUserTokenClientAsync(ClaimsIdentity claimsIdentity, CancellationToken cancellationToken);
    public virtual BotFrameworkClient CreateBotFrameworkClient();
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ParameterizedBotFrameworkAuthentication/<JwtTokenValidation_AuthenticateRequestAsync>d__21")]
private Task`1<ClaimsIdentity> JwtTokenValidation_AuthenticateRequestAsync(Activity activity, string authHeader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ParameterizedBotFrameworkAuthentication/<JwtTokenValidation_ValidateAuthHeaderAsync>d__22")]
private Task`1<ClaimsIdentity> JwtTokenValidation_ValidateAuthHeaderAsync(string authHeader, string channelId, string serviceUrl, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ParameterizedBotFrameworkAuthentication/<JwtTokenValidation_ValidateClaimsAsync>d__23")]
private Task JwtTokenValidation_ValidateClaimsAsync(IEnumerable`1<Claim> claims);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ParameterizedBotFrameworkAuthentication/<JwtTokenValidation_AuthenticateTokenAsync>d__24")]
private Task`1<ClaimsIdentity> JwtTokenValidation_AuthenticateTokenAsync(string authHeader, string channelId, string serviceUrl, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ParameterizedBotFrameworkAuthentication/<SkillValidation_AuthenticateChannelTokenAsync>d__25")]
private Task`1<ClaimsIdentity> SkillValidation_AuthenticateChannelTokenAsync(string authHeader, string channelId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ParameterizedBotFrameworkAuthentication/<SkillValidation_ValidateIdentityAsync>d__26")]
private Task SkillValidation_ValidateIdentityAsync(ClaimsIdentity identity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ParameterizedBotFrameworkAuthentication/<EmulatorValidation_AuthenticateEmulatorTokenAsync>d__27")]
private Task`1<ClaimsIdentity> EmulatorValidation_AuthenticateEmulatorTokenAsync(string authHeader, string channelId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ParameterizedBotFrameworkAuthentication/<GovernmentChannelValidation_AuthenticateChannelTokenAsync>d__28")]
private Task`1<ClaimsIdentity> GovernmentChannelValidation_AuthenticateChannelTokenAsync(string authHeader, string serviceUrl, string channelId, CancellationToken cancellationToken);
    private TokenValidationParameters GovernmentChannelValidation_GetTokenValidationParameters();
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.ParameterizedBotFrameworkAuthentication/<GovernmentChannelValidation_ValidateIdentityAsync>d__30")]
private Task GovernmentChannelValidation_ValidateIdentityAsync(ClaimsIdentity identity, string serviceUrl, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private bool <GovernmentChannelValidation_ValidateIdentityAsync>b__30_0(Claim c);
}
public class Microsoft.Bot.Connector.Authentication.PasswordServiceClientCredentialFactory : ServiceClientCredentialsFactory {
    private HttpClient _httpClient;
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private string <AppId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    public string AppId { get; public set; }
    public string Password { get; public set; }
    public string TenantId { get; }
    public PasswordServiceClientCredentialFactory(string appId, string password, string tenantId, HttpClient httpClient, ILogger logger);
    [CompilerGeneratedAttribute]
public string get_AppId();
    [CompilerGeneratedAttribute]
public void set_AppId(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    public virtual Task`1<bool> IsValidAppIdAsync(string appId, CancellationToken cancellationToken);
    public virtual Task`1<bool> IsAuthenticationDisabledAsync(CancellationToken cancellationToken);
    public virtual Task`1<ServiceClientCredentials> CreateCredentialsAsync(string appId, string oauthScope, string loginEndpoint, bool validateAuthority, CancellationToken cancellationToken);
}
internal class Microsoft.Bot.Connector.Authentication.PublicCloudBotFrameworkAuthentication : BuiltinBotFrameworkAuthentication {
    public PublicCloudBotFrameworkAuthentication(ServiceClientCredentialsFactory credentialFactory, AuthenticationConfiguration authConfiguration, IHttpClientFactory httpClientFactory, ILogger logger);
}
public static class Microsoft.Bot.Connector.Authentication.Retry : object {
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.Retry/<Run>d__0`1")]
public static Task`1<TResult> Run(Func`1<Task`1<TResult>> task, Func`3<Exception, int, RetryParams> retryExceptionHandler);
}
public class Microsoft.Bot.Connector.Authentication.RetryParams : object {
    private static int MaxRetries;
    private static TimeSpan MaxDelay;
    private static TimeSpan DefaultBackOffTime;
    [CompilerGeneratedAttribute]
private static RetryParams <StopRetrying>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RetryAfter>k__BackingField;
    public static RetryParams StopRetrying { get; }
    public bool ShouldRetry { get; public set; }
    public TimeSpan RetryAfter { get; public set; }
    public RetryParams(TimeSpan retryAfter, bool shouldRetry);
    private static RetryParams();
    [CompilerGeneratedAttribute]
public static RetryParams get_StopRetrying();
    [CompilerGeneratedAttribute]
public bool get_ShouldRetry();
    [CompilerGeneratedAttribute]
public void set_ShouldRetry(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RetryAfter();
    [CompilerGeneratedAttribute]
public void set_RetryAfter(TimeSpan value);
    public static RetryParams DefaultBackOff(int retryCount);
}
public abstract class Microsoft.Bot.Connector.Authentication.ServiceClientCredentialsFactory : object {
    public abstract virtual Task`1<bool> IsValidAppIdAsync(string appId, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> IsAuthenticationDisabledAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<ServiceClientCredentials> CreateCredentialsAsync(string appId, string audience, string loginEndpoint, bool validateAuthority, CancellationToken cancellationToken);
}
[ObsoleteAttribute("Use `ConfigurationBotFrameworkAuthentication` instead to configure channel.", "False")]
public class Microsoft.Bot.Connector.Authentication.SimpleChannelProvider : object {
    [CompilerGeneratedAttribute]
private string <ChannelService>k__BackingField;
    public string ChannelService { get; public set; }
    public SimpleChannelProvider(string channelService);
    [CompilerGeneratedAttribute]
public string get_ChannelService();
    [CompilerGeneratedAttribute]
public void set_ChannelService(string value);
    public sealed virtual Task`1<string> GetChannelServiceAsync();
    public sealed virtual bool IsGovernment();
    public sealed virtual bool IsPublicAzure();
}
[ObsoleteAttribute("Use `ConfigurationBotFrameworkAuthentication` instead to configure credentials.", "False")]
public class Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider : object {
    [CompilerGeneratedAttribute]
private string <AppId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public string AppId { get; public set; }
    public string Password { get; public set; }
    public SimpleCredentialProvider(string appId, string password);
    [CompilerGeneratedAttribute]
public string get_AppId();
    [CompilerGeneratedAttribute]
public void set_AppId(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    public sealed virtual Task`1<bool> IsValidAppIdAsync(string appId);
    public sealed virtual Task`1<string> GetAppPasswordAsync(string appId);
    public sealed virtual Task`1<bool> IsAuthenticationDisabledAsync();
}
[ObsoleteAttribute("Use `ConfigurationBotFrameworkAuthentication` instead to perform skill validation.", "False")]
public class Microsoft.Bot.Connector.Authentication.SkillValidation : object {
    public static bool IsSkillToken(string authHeader);
    public static bool IsSkillClaim(IEnumerable`1<Claim> claims);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.SkillValidation/<AuthenticateChannelToken>d__2")]
public static Task`1<ClaimsIdentity> AuthenticateChannelToken(string authHeader, ICredentialProvider credentials, IChannelProvider channelProvider, HttpClient httpClient, string channelId, AuthenticationConfiguration authConfig);
    public static ClaimsIdentity CreateAnonymousSkillClaim();
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.SkillValidation/<ValidateIdentityAsync>d__4")]
internal static Task ValidateIdentityAsync(ClaimsIdentity identity, ICredentialProvider credentials);
}
public class Microsoft.Bot.Connector.Authentication.ThrottleException : Exception {
    [CompilerGeneratedAttribute]
private RetryParams <RetryParams>k__BackingField;
    public RetryParams RetryParams { get; public set; }
    public ThrottleException(string message);
    public ThrottleException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public RetryParams get_RetryParams();
    [CompilerGeneratedAttribute]
public void set_RetryParams(RetryParams value);
}
[ExtensionAttribute]
public static class Microsoft.Bot.Connector.Authentication.TimeSpanExtensions : object {
    private static Random _random;
    private static TimeSpanExtensions();
    [ExtensionAttribute]
public static TimeSpan WithJitter(TimeSpan delay, double multiplier);
}
public abstract class Microsoft.Bot.Connector.Authentication.UserTokenClient : object {
    public abstract virtual Task`1<TokenResponse> GetUserTokenAsync(string userId, string connectionName, string channelId, string magicCode, CancellationToken cancellationToken);
    public abstract virtual Task`1<SignInResource> GetSignInResourceAsync(string connectionName, Activity activity, string finalRedirect, CancellationToken cancellationToken);
    public abstract virtual Task SignOutUserAsync(string userId, string connectionName, string channelId, CancellationToken cancellationToken);
    public abstract virtual Task`1<TokenStatus[]> GetTokenStatusAsync(string userId, string channelId, string includeFilter, CancellationToken cancellationToken);
    public abstract virtual Task`1<Dictionary`2<string, TokenResponse>> GetAadTokensAsync(string userId, string connectionName, String[] resourceUrls, string channelId, CancellationToken cancellationToken);
    public abstract virtual Task`1<TokenResponse> ExchangeTokenAsync(string userId, string connectionName, string channelId, TokenExchangeRequest exchangeRequest, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    protected static string CreateTokenExchangeState(string appId, string connectionName, Activity activity);
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Bot.Connector.Authentication.UserTokenClientImpl : UserTokenClient {
    private string _appId;
    private OAuthClient _client;
    private ILogger _logger;
    private HttpClient _httpClient;
    private bool _disposed;
    public UserTokenClientImpl(string appId, ServiceClientCredentials credentials, string oauthEndpoint, HttpClient httpClient, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.UserTokenClientImpl/<GetUserTokenAsync>d__6")]
public virtual Task`1<TokenResponse> GetUserTokenAsync(string userId, string connectionName, string channelId, string magicCode, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.UserTokenClientImpl/<GetSignInResourceAsync>d__7")]
public virtual Task`1<SignInResource> GetSignInResourceAsync(string connectionName, Activity activity, string finalRedirect, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.UserTokenClientImpl/<SignOutUserAsync>d__8")]
public virtual Task SignOutUserAsync(string userId, string connectionName, string channelId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.UserTokenClientImpl/<GetTokenStatusAsync>d__9")]
public virtual Task`1<TokenStatus[]> GetTokenStatusAsync(string userId, string channelId, string includeFilter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.UserTokenClientImpl/<GetAadTokensAsync>d__10")]
public virtual Task`1<Dictionary`2<string, TokenResponse>> GetAadTokensAsync(string userId, string connectionName, String[] resourceUrls, string channelId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Authentication.UserTokenClientImpl/<ExchangeTokenAsync>d__11")]
public virtual Task`1<TokenResponse> ExchangeTokenAsync(string userId, string connectionName, string channelId, TokenExchangeRequest exchangeRequest, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.Bot.Connector.BotSignIn : object {
    [CompilerGeneratedAttribute]
private OAuthClient <Client>k__BackingField;
    public OAuthClient Client { get; private set; }
    public BotSignIn(OAuthClient client);
    [CompilerGeneratedAttribute]
public sealed virtual OAuthClient get_Client();
    [CompilerGeneratedAttribute]
private void set_Client(OAuthClient value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.BotSignIn/<GetSignInUrlWithHttpMessagesAsync>d__5")]
public sealed virtual Task`1<HttpOperationResponse`1<string>> GetSignInUrlWithHttpMessagesAsync(string state, string codeChallenge, string emulatorUrl, string finalRedirect, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Microsoft.Bot.Connector.BotSignInExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.BotSignInExtensions/<GetSignInUrlAsync>d__0")]
[ExtensionAttribute]
public static Task`1<string> GetSignInUrlAsync(IBotSignIn operations, string state, string codeChallenge, string emulatorUrl, string finalRedirect, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.BotSignInExtensions/<GetSignInResourceAsync>d__1")]
[ExtensionAttribute]
public static Task`1<SignInResource> GetSignInResourceAsync(OAuthClient operations, string state, string codeChallenge, string emulatorUrl, string finalRedirect, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Connector.Channels : object {
    public static string Alexa;
    public static string Console;
    [ObsoleteAttribute("This channel is deprecated.")]
public static string Cortana;
    public static string Directline;
    public static string DirectlineSpeech;
    public static string Email;
    public static string Emulator;
    [ObsoleteAttribute("This channel is deprecated.")]
public static string EnterpriseChannel;
    public static string Facebook;
    public static string Groupme;
    [ObsoleteAttribute("This channel is deprecated.")]
public static string Kaizala;
    [ObsoleteAttribute("This channel is deprecated.")]
public static string Kik;
    public static string Line;
    public static string Msteams;
    public static string Skype;
    [ObsoleteAttribute("This channel is deprecated.")]
public static string Skypeforbusiness;
    public static string Slack;
    public static string Sms;
    public static string Telegram;
    public static string Webchat;
    public static string Test;
    [ObsoleteAttribute("This channel is deprecated. Use Sms instead.")]
public static string Twilio;
    public static string Telephony;
    public static string Omni;
    public static string Outlook;
    public static string M365;
}
public class Microsoft.Bot.Connector.ConnectorClient : ServiceClient`1<ConnectorClient> {
    [CompilerGeneratedAttribute]
private Uri <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <SerializationSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <DeserializationSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceClientCredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private IAttachments <Attachments>k__BackingField;
    [CompilerGeneratedAttribute]
private IConversations <Conversations>k__BackingField;
    public Uri BaseUri { get; public set; }
    public JsonSerializerSettings SerializationSettings { get; private set; }
    public JsonSerializerSettings DeserializationSettings { get; private set; }
    public ServiceClientCredentials Credentials { get; private set; }
    public IAttachments Attachments { get; private set; }
    public IConversations Conversations { get; private set; }
    public ConnectorClient(ServiceClientCredentials credentials, DelegatingHandler[] handlers);
    public ConnectorClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient);
    public ConnectorClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, DelegatingHandler[] handlers);
    public ConnectorClient(Uri baseUri, ServiceClientCredentials credentials, DelegatingHandler[] handlers);
    public ConnectorClient(Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, DelegatingHandler[] handlers);
    protected ConnectorClient(HttpClient httpClient, bool disposeHttpClient);
    protected ConnectorClient(DelegatingHandler[] handlers);
    protected ConnectorClient(HttpClientHandler rootHandler, DelegatingHandler[] handlers);
    protected ConnectorClient(Uri baseUri, DelegatingHandler[] handlers);
    protected ConnectorClient(Uri baseUri, HttpClientHandler rootHandler, DelegatingHandler[] handlers);
    public ConnectorClient(Uri baseUri, string microsoftAppId, string microsoftAppPassword, DelegatingHandler[] handlers);
    public ConnectorClient(Uri baseUri, MicrosoftAppCredentials credentials, bool addJwtTokenRefresher, DelegatingHandler[] handlers);
    public ConnectorClient(Uri baseUri, MicrosoftAppCredentials credentials, HttpClient customHttpClient, bool addJwtTokenRefresher, DelegatingHandler[] handlers);
    public ConnectorClient(Uri baseUri, ServiceClientCredentials credentials, HttpClient customHttpClient, bool disposeHttpClient);
    public ConnectorClient(Uri baseUri, ServiceClientCredentials credentials, HttpClient customHttpClient, bool addJwtTokenRefresher, DelegatingHandler[] handlers);
    public ConnectorClient(Uri baseUri, MicrosoftAppCredentials credentials, HttpClientHandler httpClientHandler, bool addJwtTokenRefresher, HttpClient customHttpClient, DelegatingHandler[] handlers);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_BaseUri();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BaseUri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual JsonSerializerSettings get_SerializationSettings();
    [CompilerGeneratedAttribute]
private void set_SerializationSettings(JsonSerializerSettings value);
    [CompilerGeneratedAttribute]
public sealed virtual JsonSerializerSettings get_DeserializationSettings();
    [CompilerGeneratedAttribute]
private void set_DeserializationSettings(JsonSerializerSettings value);
    [CompilerGeneratedAttribute]
public sealed virtual ServiceClientCredentials get_Credentials();
    [CompilerGeneratedAttribute]
private void set_Credentials(ServiceClientCredentials value);
    [CompilerGeneratedAttribute]
public virtual IAttachments get_Attachments();
    [CompilerGeneratedAttribute]
private void set_Attachments(IAttachments value);
    [CompilerGeneratedAttribute]
public virtual IConversations get_Conversations();
    [CompilerGeneratedAttribute]
private void set_Conversations(IConversations value);
    private void CustomInitialize();
    private void Initialize();
    public static string GetOsVersion();
    public static string GetArchitecture();
    public static string GetASPNetVersion();
    public static string GetClientVersion(T client);
    public static void AddDefaultRequestHeaders(HttpClient httpClient);
    private static string GetClientVersion();
}
public static class Microsoft.Bot.Connector.ConversationConstants : object {
    public static string ConversationIdHttpHeaderName;
}
public class Microsoft.Bot.Connector.Conversations : object {
    [CompilerGeneratedAttribute]
private ConnectorClient <Client>k__BackingField;
    public ConnectorClient Client { get; private set; }
    public Conversations(ConnectorClient client);
    [CompilerGeneratedAttribute]
public sealed virtual ConnectorClient get_Client();
    [CompilerGeneratedAttribute]
private void set_Client(ConnectorClient value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Conversations/<GetConversationsWithHttpMessagesAsync>d__5")]
public sealed virtual Task`1<HttpOperationResponse`1<ConversationsResult>> GetConversationsWithHttpMessagesAsync(string continuationToken, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Conversations/<CreateConversationWithHttpMessagesAsync>d__6")]
public sealed virtual Task`1<HttpOperationResponse`1<ConversationResourceResponse>> CreateConversationWithHttpMessagesAsync(ConversationParameters parameters, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Conversations/<SendToConversationWithHttpMessagesAsync>d__7")]
public sealed virtual Task`1<HttpOperationResponse`1<ResourceResponse>> SendToConversationWithHttpMessagesAsync(string conversationId, Activity activity, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Conversations/<SendConversationHistoryWithHttpMessagesAsync>d__8")]
public sealed virtual Task`1<HttpOperationResponse`1<ResourceResponse>> SendConversationHistoryWithHttpMessagesAsync(string conversationId, Transcript transcript, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Conversations/<UpdateActivityWithHttpMessagesAsync>d__9")]
public sealed virtual Task`1<HttpOperationResponse`1<ResourceResponse>> UpdateActivityWithHttpMessagesAsync(string conversationId, string activityId, Activity activity, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Conversations/<ReplyToActivityWithHttpMessagesAsync>d__10")]
public sealed virtual Task`1<HttpOperationResponse`1<ResourceResponse>> ReplyToActivityWithHttpMessagesAsync(string conversationId, string activityId, Activity activity, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Conversations/<DeleteActivityWithHttpMessagesAsync>d__11")]
public sealed virtual Task`1<HttpOperationResponse> DeleteActivityWithHttpMessagesAsync(string conversationId, string activityId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Conversations/<GetConversationMembersWithHttpMessagesAsync>d__12")]
public sealed virtual Task`1<HttpOperationResponse`1<IList`1<ChannelAccount>>> GetConversationMembersWithHttpMessagesAsync(string conversationId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Conversations/<GetConversationMemberWithHttpMessagesAsync>d__13")]
public Task`1<HttpOperationResponse`1<ChannelAccount>> GetConversationMemberWithHttpMessagesAsync(string userId, string conversationId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Conversations/<GetConversationPagedMembersWithHttpMessagesAsync>d__14")]
public sealed virtual Task`1<HttpOperationResponse`1<PagedMembersResult>> GetConversationPagedMembersWithHttpMessagesAsync(string conversationId, Nullable`1<int> pageSize, string continuationToken, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Conversations/<DeleteConversationMemberWithHttpMessagesAsync>d__15")]
public sealed virtual Task`1<HttpOperationResponse> DeleteConversationMemberWithHttpMessagesAsync(string conversationId, string memberId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Conversations/<GetActivityMembersWithHttpMessagesAsync>d__16")]
public sealed virtual Task`1<HttpOperationResponse`1<IList`1<ChannelAccount>>> GetActivityMembersWithHttpMessagesAsync(string conversationId, string activityId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Conversations/<UploadAttachmentWithHttpMessagesAsync>d__17")]
public sealed virtual Task`1<HttpOperationResponse`1<ResourceResponse>> UploadAttachmentWithHttpMessagesAsync(string conversationId, AttachmentData attachmentUpload, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Microsoft.Bot.Connector.ConversationsExtensions : object {
    [ExtensionAttribute]
public static ConversationResourceResponse CreateDirectConversation(IConversations operations, ChannelAccount bot, ChannelAccount user, Activity activity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<CreateDirectConversationAsync>d__1")]
[ExtensionAttribute]
public static Task`1<ConversationResourceResponse> CreateDirectConversationAsync(IConversations operations, ChannelAccount bot, ChannelAccount user, Activity activity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ConversationResourceResponse CreateDirectConversation(IConversations operations, string botAddress, string userAddress, Activity activity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<CreateDirectConversationAsync>d__3")]
[ExtensionAttribute]
public static Task`1<ConversationResourceResponse> CreateDirectConversationAsync(IConversations operations, string botAddress, string userAddress, Activity activity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ResourceResponse SendToConversation(IConversations operations, Activity activity);
    [ExtensionAttribute]
public static Task`1<ResourceResponse> SendToConversationAsync(IConversations operations, Activity activity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ResourceResponse ReplyToActivity(IConversations operations, Activity activity);
    [ExtensionAttribute]
public static Task`1<ResourceResponse> ReplyToActivityAsync(IConversations operations, Activity activity, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ResourceResponse UpdateActivity(IConversations operations, Activity activity);
    [ExtensionAttribute]
public static Task`1<ResourceResponse> UpdateActivityAsync(IConversations operations, Activity activity, CancellationToken cancellationToken);
    private static ConversationParameters GetDirectParameters(string botId, string userId, Activity activity);
    private static ConversationParameters GetDirectParameters(ChannelAccount bot, ChannelAccount user, Activity activity);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<GetConversationsAsync>d__12")]
[ExtensionAttribute]
public static Task`1<ConversationsResult> GetConversationsAsync(IConversations operations, string continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<CreateConversationAsync>d__13")]
[ExtensionAttribute]
public static Task`1<ConversationResourceResponse> CreateConversationAsync(IConversations operations, ConversationParameters parameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<SendToConversationAsync>d__14")]
[ExtensionAttribute]
public static Task`1<ResourceResponse> SendToConversationAsync(IConversations operations, string conversationId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<SendConversationHistoryAsync>d__15")]
[ExtensionAttribute]
public static Task`1<ResourceResponse> SendConversationHistoryAsync(IConversations operations, string conversationId, Transcript transcript, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<UpdateActivityAsync>d__16")]
[ExtensionAttribute]
public static Task`1<ResourceResponse> UpdateActivityAsync(IConversations operations, string conversationId, string activityId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<ReplyToActivityAsync>d__17")]
[ExtensionAttribute]
public static Task`1<ResourceResponse> ReplyToActivityAsync(IConversations operations, string conversationId, string activityId, Activity activity, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<DeleteActivityAsync>d__18")]
[ExtensionAttribute]
public static Task DeleteActivityAsync(IConversations operations, string conversationId, string activityId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<GetConversationMembersAsync>d__19")]
[ExtensionAttribute]
public static Task`1<IList`1<ChannelAccount>> GetConversationMembersAsync(IConversations operations, string conversationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<GetConversationPagedMembersAsync>d__20")]
[ExtensionAttribute]
public static Task`1<PagedMembersResult> GetConversationPagedMembersAsync(IConversations operations, string conversationId, Nullable`1<int> pageSize, string continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<DeleteConversationMemberAsync>d__21")]
[ExtensionAttribute]
public static Task DeleteConversationMemberAsync(IConversations operations, string conversationId, string memberId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<GetActivityMembersAsync>d__22")]
[ExtensionAttribute]
public static Task`1<IList`1<ChannelAccount>> GetActivityMembersAsync(IConversations operations, string conversationId, string activityId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<UploadAttachmentAsync>d__23")]
[ExtensionAttribute]
public static Task`1<ResourceResponse> UploadAttachmentAsync(IConversations operations, string conversationId, AttachmentData attachmentUpload, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.ConversationsExtensions/<GetConversationMemberAsync>d__24")]
[ExtensionAttribute]
public static Task`1<ChannelAccount> GetConversationMemberAsync(Conversations operations, string userId, string conversationId, CancellationToken cancellationToken);
}
public interface Microsoft.Bot.Connector.IAttachments {
    public abstract virtual Task`1<HttpOperationResponse`1<AttachmentInfo>> GetAttachmentInfoWithHttpMessagesAsync(string attachmentId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse`1<Stream>> GetAttachmentWithHttpMessagesAsync(string attachmentId, string viewId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
}
public interface Microsoft.Bot.Connector.IBotSignIn {
    public abstract virtual Task`1<HttpOperationResponse`1<string>> GetSignInUrlWithHttpMessagesAsync(string state, string codeChallenge, string emulatorUrl, string finalRedirect, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
}
public interface Microsoft.Bot.Connector.IConnectorClient {
    public Uri BaseUri { get; public set; }
    public JsonSerializerSettings SerializationSettings { get; }
    public JsonSerializerSettings DeserializationSettings { get; }
    public ServiceClientCredentials Credentials { get; }
    public IAttachments Attachments { get; }
    public IConversations Conversations { get; }
    public abstract virtual Uri get_BaseUri();
    public abstract virtual void set_BaseUri(Uri value);
    public abstract virtual JsonSerializerSettings get_SerializationSettings();
    public abstract virtual JsonSerializerSettings get_DeserializationSettings();
    public abstract virtual ServiceClientCredentials get_Credentials();
    public abstract virtual IAttachments get_Attachments();
    public abstract virtual IConversations get_Conversations();
}
public interface Microsoft.Bot.Connector.IConversations {
    public abstract virtual Task`1<HttpOperationResponse`1<ConversationsResult>> GetConversationsWithHttpMessagesAsync(string continuationToken, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse`1<ConversationResourceResponse>> CreateConversationWithHttpMessagesAsync(ConversationParameters parameters, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse`1<ResourceResponse>> SendToConversationWithHttpMessagesAsync(string conversationId, Activity activity, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse`1<ResourceResponse>> SendConversationHistoryWithHttpMessagesAsync(string conversationId, Transcript transcript, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse`1<ResourceResponse>> UpdateActivityWithHttpMessagesAsync(string conversationId, string activityId, Activity activity, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse`1<ResourceResponse>> ReplyToActivityWithHttpMessagesAsync(string conversationId, string activityId, Activity activity, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse> DeleteActivityWithHttpMessagesAsync(string conversationId, string activityId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse`1<IList`1<ChannelAccount>>> GetConversationMembersWithHttpMessagesAsync(string conversationId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse`1<PagedMembersResult>> GetConversationPagedMembersWithHttpMessagesAsync(string conversationId, Nullable`1<int> pageSize, string continuationToken, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse> DeleteConversationMemberWithHttpMessagesAsync(string conversationId, string memberId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse`1<IList`1<ChannelAccount>>> GetActivityMembersWithHttpMessagesAsync(string conversationId, string activityId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse`1<ResourceResponse>> UploadAttachmentWithHttpMessagesAsync(string conversationId, AttachmentData attachmentUpload, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
}
public interface Microsoft.Bot.Connector.IOAuthClient {
    public Uri BaseUri { get; public set; }
    public JsonSerializerSettings SerializationSettings { get; }
    public JsonSerializerSettings DeserializationSettings { get; }
    public ServiceClientCredentials Credentials { get; }
    public IBotSignIn BotSignIn { get; }
    public IUserToken UserToken { get; }
    public abstract virtual Uri get_BaseUri();
    public abstract virtual void set_BaseUri(Uri value);
    public abstract virtual JsonSerializerSettings get_SerializationSettings();
    public abstract virtual JsonSerializerSettings get_DeserializationSettings();
    public abstract virtual ServiceClientCredentials get_Credentials();
    public abstract virtual IBotSignIn get_BotSignIn();
    public abstract virtual IUserToken get_UserToken();
}
public interface Microsoft.Bot.Connector.IUserToken {
    public abstract virtual Task`1<HttpOperationResponse`1<TokenResponse>> GetTokenWithHttpMessagesAsync(string userId, string connectionName, string channelId, string code, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse`1<IDictionary`2<string, TokenResponse>>> GetAadTokensWithHttpMessagesAsync(string userId, string connectionName, AadResourceUrls aadResourceUrls, string channelId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse`1<object>> SignOutWithHttpMessagesAsync(string userId, string connectionName, string channelId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse`1<IList`1<TokenStatus>>> GetTokenStatusWithHttpMessagesAsync(string userId, string channelId, string include, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Connector.OAuthClient : ServiceClient`1<OAuthClient> {
    [CompilerGeneratedAttribute]
private Uri <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <SerializationSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <DeserializationSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceClientCredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private IBotSignIn <BotSignIn>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserToken <UserToken>k__BackingField;
    public Uri BaseUri { get; public set; }
    public JsonSerializerSettings SerializationSettings { get; private set; }
    public JsonSerializerSettings DeserializationSettings { get; private set; }
    public ServiceClientCredentials Credentials { get; private set; }
    public IBotSignIn BotSignIn { get; private set; }
    public IUserToken UserToken { get; private set; }
    public OAuthClient(ServiceClientCredentials credentials, DelegatingHandler[] handlers);
    public OAuthClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient);
    public OAuthClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, DelegatingHandler[] handlers);
    public OAuthClient(Uri baseUri, ServiceClientCredentials credentials, DelegatingHandler[] handlers);
    public OAuthClient(Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, DelegatingHandler[] handlers);
    protected OAuthClient(HttpClient httpClient, bool disposeHttpClient);
    protected OAuthClient(DelegatingHandler[] handlers);
    protected OAuthClient(HttpClientHandler rootHandler, DelegatingHandler[] handlers);
    protected OAuthClient(Uri baseUri, DelegatingHandler[] handlers);
    protected OAuthClient(Uri baseUri, HttpClientHandler rootHandler, DelegatingHandler[] handlers);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_BaseUri();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BaseUri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual JsonSerializerSettings get_SerializationSettings();
    [CompilerGeneratedAttribute]
private void set_SerializationSettings(JsonSerializerSettings value);
    [CompilerGeneratedAttribute]
public sealed virtual JsonSerializerSettings get_DeserializationSettings();
    [CompilerGeneratedAttribute]
private void set_DeserializationSettings(JsonSerializerSettings value);
    [CompilerGeneratedAttribute]
public sealed virtual ServiceClientCredentials get_Credentials();
    [CompilerGeneratedAttribute]
private void set_Credentials(ServiceClientCredentials value);
    [CompilerGeneratedAttribute]
public virtual IBotSignIn get_BotSignIn();
    [CompilerGeneratedAttribute]
private void set_BotSignIn(IBotSignIn value);
    [CompilerGeneratedAttribute]
public virtual IUserToken get_UserToken();
    [CompilerGeneratedAttribute]
private void set_UserToken(IUserToken value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.OAuthClient/<ExchangeAsyncWithHttpMessagesAsync>d__34")]
public Task`1<HttpOperationResponse`1<object>> ExchangeAsyncWithHttpMessagesAsync(string userId, string connectionName, string channelId, TokenExchangeRequest exchangeRequest, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.OAuthClient/<GetSignInResourceWithHttpMessagesAsync>d__35")]
public Task`1<HttpOperationResponse`1<SignInResource>> GetSignInResourceWithHttpMessagesAsync(string state, string codeChallenge, string emulatorUrl, string finalRedirect, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    private void Initialize();
}
public static class Microsoft.Bot.Connector.OAuthClientConfig : object {
    [CompilerGeneratedAttribute]
private static string <OAuthEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <EmulateOAuthCards>k__BackingField;
    public static string OAuthEndpoint { get; public set; }
    public static bool EmulateOAuthCards { get; public set; }
    private static OAuthClientConfig();
    [CompilerGeneratedAttribute]
public static string get_OAuthEndpoint();
    [CompilerGeneratedAttribute]
public static void set_OAuthEndpoint(string value);
    [CompilerGeneratedAttribute]
public static bool get_EmulateOAuthCards();
    [CompilerGeneratedAttribute]
public static void set_EmulateOAuthCards(bool value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.OAuthClientConfig/<SendEmulateOAuthCardsAsync>d__8")]
public static Task SendEmulateOAuthCardsAsync(OAuthClient client, bool emulateOAuthCards);
}
[ObsoleteAttribute("This class is deprecated, us OAuthClientConfig instead", "True")]
public class Microsoft.Bot.Connector.OAuthClientOld : ServiceClient`1<OAuthClientOld> {
    private ConnectorClient _client;
    private string _uri;
    private JsonSerializerSettings _settings;
    [CompilerGeneratedAttribute]
private static string <OAuthEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <EmulateOAuthCards>k__BackingField;
    public static string OAuthEndpoint { get; public set; }
    public static bool EmulateOAuthCards { get; public set; }
    public OAuthClientOld(ConnectorClient client, string uri);
    private static OAuthClientOld();
    [CompilerGeneratedAttribute]
public static string get_OAuthEndpoint();
    [CompilerGeneratedAttribute]
public static void set_OAuthEndpoint(string value);
    [CompilerGeneratedAttribute]
public static bool get_EmulateOAuthCards();
    [CompilerGeneratedAttribute]
public static void set_EmulateOAuthCards(bool value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.OAuthClientOld/<GetUserTokenAsync>d__12")]
public Task`1<TokenResponse> GetUserTokenAsync(string userId, string connectionName, string magicCode, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.OAuthClientOld/<SignOutUserAsync>d__13")]
public Task`1<bool> SignOutUserAsync(string userId, string connectionName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.OAuthClientOld/<GetSignInLinkAsync>d__14")]
public Task`1<string> GetSignInLinkAsync(string state, string finalRedirect, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.OAuthClientOld/<GetTokenStatusAsync>d__15")]
public Task`1<TokenStatus[]> GetTokenStatusAsync(string userId, string includeFilter, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.OAuthClientOld/<GetAadTokensAsync>d__16")]
public Task`1<Dictionary`2<string, TokenResponse>> GetAadTokensAsync(string userId, string connectionName, String[] resourceUrls, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.OAuthClientOld/<SendEmulateOAuthCardsAsync>d__17")]
public Task SendEmulateOAuthCardsAsync(bool emulateOAuthCards);
}
public static class Microsoft.Bot.Connector.RetryAction : object {
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.RetryAction/<RunAsync>d__0`1")]
public static Task`1<TResult> RunAsync(Func`1<Task`1<TResult>> task, Func`3<Exception, int, RetryParams> retryExceptionHandler);
}
public interface Microsoft.Bot.Connector.Teams.ITeamsConnectorClient {
    public Uri BaseUri { get; public set; }
    public JsonSerializerSettings SerializationSettings { get; }
    public JsonSerializerSettings DeserializationSettings { get; }
    public ServiceClientCredentials Credentials { get; }
    public ITeamsOperations Teams { get; }
    public abstract virtual Uri get_BaseUri();
    public abstract virtual void set_BaseUri(Uri value);
    public abstract virtual JsonSerializerSettings get_SerializationSettings();
    public abstract virtual JsonSerializerSettings get_DeserializationSettings();
    public abstract virtual ServiceClientCredentials get_Credentials();
    public abstract virtual ITeamsOperations get_Teams();
}
public interface Microsoft.Bot.Connector.Teams.ITeamsOperations {
    public abstract virtual Task`1<HttpOperationResponse`1<ConversationList>> FetchChannelListWithHttpMessagesAsync(string teamId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    public abstract virtual Task`1<HttpOperationResponse`1<TeamDetails>> FetchTeamDetailsWithHttpMessagesAsync(string teamId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Connector.Teams.TeamsConnectorClient : ServiceClient`1<TeamsConnectorClient> {
    [CompilerGeneratedAttribute]
private Uri <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <SerializationSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonSerializerSettings <DeserializationSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceClientCredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private ITeamsOperations <Teams>k__BackingField;
    public Uri BaseUri { get; public set; }
    public JsonSerializerSettings SerializationSettings { get; private set; }
    public JsonSerializerSettings DeserializationSettings { get; private set; }
    public ServiceClientCredentials Credentials { get; private set; }
    public ITeamsOperations Teams { get; private set; }
    public TeamsConnectorClient(ServiceClientCredentials credentials, DelegatingHandler[] handlers);
    public TeamsConnectorClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, DelegatingHandler[] handlers);
    public TeamsConnectorClient(Uri baseUri, ServiceClientCredentials credentials, DelegatingHandler[] handlers);
    public TeamsConnectorClient(Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, DelegatingHandler[] handlers);
    protected TeamsConnectorClient(DelegatingHandler[] handlers);
    protected TeamsConnectorClient(HttpClientHandler rootHandler, DelegatingHandler[] handlers);
    protected TeamsConnectorClient(Uri baseUri, DelegatingHandler[] handlers);
    protected TeamsConnectorClient(Uri baseUri, HttpClientHandler rootHandler, DelegatingHandler[] handlers);
    public TeamsConnectorClient(Uri baseUri, ServiceClientCredentials credentials, HttpClient customHttpClient, DelegatingHandler[] handlers);
    public TeamsConnectorClient(Uri baseUri, ServiceClientCredentials credentials, HttpClient customHttpClient, bool disposeHttpClient);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_BaseUri();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BaseUri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual JsonSerializerSettings get_SerializationSettings();
    [CompilerGeneratedAttribute]
private void set_SerializationSettings(JsonSerializerSettings value);
    [CompilerGeneratedAttribute]
public sealed virtual JsonSerializerSettings get_DeserializationSettings();
    [CompilerGeneratedAttribute]
private void set_DeserializationSettings(JsonSerializerSettings value);
    [CompilerGeneratedAttribute]
public sealed virtual ServiceClientCredentials get_Credentials();
    [CompilerGeneratedAttribute]
private void set_Credentials(ServiceClientCredentials value);
    [CompilerGeneratedAttribute]
public virtual ITeamsOperations get_Teams();
    [CompilerGeneratedAttribute]
private void set_Teams(ITeamsOperations value);
    private void Initialize();
}
public class Microsoft.Bot.Connector.Teams.TeamsOperations : object {
    private static RetryParams modreq(System.Runtime.CompilerServices.IsVolatile) currentRetryPolicy;
    [CompilerGeneratedAttribute]
private TeamsConnectorClient <Client>k__BackingField;
    public TeamsConnectorClient Client { get; private set; }
    public TeamsOperations(TeamsConnectorClient client);
    [CompilerGeneratedAttribute]
public sealed virtual TeamsConnectorClient get_Client();
    [CompilerGeneratedAttribute]
private void set_Client(TeamsConnectorClient value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperations/<FetchChannelListWithHttpMessagesAsync>d__6")]
public sealed virtual Task`1<HttpOperationResponse`1<ConversationList>> FetchChannelListWithHttpMessagesAsync(string teamId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperations/<FetchTeamDetailsWithHttpMessagesAsync>d__7")]
public sealed virtual Task`1<HttpOperationResponse`1<TeamDetails>> FetchTeamDetailsWithHttpMessagesAsync(string teamId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperations/<FetchMeetingInfoWithHttpMessagesAsync>d__8")]
public Task`1<HttpOperationResponse`1<MeetingInfo>> FetchMeetingInfoWithHttpMessagesAsync(string meetingId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperations/<FetchParticipantWithHttpMessagesAsync>d__9")]
public Task`1<HttpOperationResponse`1<TeamsMeetingParticipant>> FetchParticipantWithHttpMessagesAsync(string meetingId, string participantId, string tenantId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperations/<SendMeetingNotificationMessageAsync>d__10")]
public Task`1<HttpOperationResponse`1<MeetingNotificationResponse>> SendMeetingNotificationMessageAsync(string meetingId, MeetingNotificationBase notification, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperations/<SendMessageToListOfUsersAsync>d__11")]
public Task`1<HttpOperationResponse`1<string>> SendMessageToListOfUsersAsync(IActivity activity, List`1<TeamMember> teamsMembers, string tenantId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperations/<SendMessageToAllUsersInTenantAsync>d__12")]
public Task`1<HttpOperationResponse`1<string>> SendMessageToAllUsersInTenantAsync(IActivity activity, string tenantId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperations/<SendMessageToAllUsersInTeamAsync>d__13")]
public Task`1<HttpOperationResponse`1<string>> SendMessageToAllUsersInTeamAsync(IActivity activity, string teamId, string tenantId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperations/<SendMessageToListOfChannelsAsync>d__14")]
public Task`1<HttpOperationResponse`1<string>> SendMessageToListOfChannelsAsync(IActivity activity, List`1<TeamMember> channelsMembers, string tenantId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperations/<GetOperationStateAsync>d__15")]
public Task`1<HttpOperationResponse`1<BatchOperationState>> GetOperationStateAsync(string operationId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperations/<GetPagedFailedEntriesAsync>d__16")]
public Task`1<HttpOperationResponse`1<BatchFailedEntriesResponse>> GetPagedFailedEntriesAsync(string operationId, Dictionary`2<string, List`1<string>> customHeaders, string continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperations/<CancelOperationAsync>d__17")]
public Task`1<HttpOperationResponse> CancelOperationAsync(string operationId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    private static RetryParams HandleThrottlingException(Exception ex, int currentRetryCount);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperations/<GetResponseAsync>d__19`1")]
private Task`1<HttpOperationResponse`1<T>> GetResponseAsync(string apiUrl, string httpMethod, string invocationId, object content, Dictionary`2<string, List`1<string>> customHeaders, string continuationToken, CancellationToken cancellationToken);
    private string TraceActivity(string operationName, object content, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions/<FetchChannelListAsync>d__0")]
[ExtensionAttribute]
public static Task`1<ConversationList> FetchChannelListAsync(ITeamsOperations operations, string teamId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions/<FetchTeamDetailsAsync>d__1")]
[ExtensionAttribute]
public static Task`1<TeamDetails> FetchTeamDetailsAsync(ITeamsOperations operations, string teamId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions/<FetchMeetingInfoAsync>d__2")]
[ExtensionAttribute]
public static Task`1<MeetingInfo> FetchMeetingInfoAsync(ITeamsOperations operations, string meetingId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions/<FetchParticipantAsync>d__3")]
[ExtensionAttribute]
public static Task`1<TeamsMeetingParticipant> FetchParticipantAsync(ITeamsOperations operations, string meetingId, string participantId, string tenantId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions/<SendMeetingNotificationAsync>d__4")]
[ExtensionAttribute]
public static Task`1<MeetingNotificationResponse> SendMeetingNotificationAsync(ITeamsOperations operations, string meetingId, MeetingNotificationBase notification, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions/<SendMessageToListOfUsersAsync>d__5")]
[ExtensionAttribute]
public static Task`1<string> SendMessageToListOfUsersAsync(ITeamsOperations operations, IActivity activity, List`1<TeamMember> teamsMembers, string tenantId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions/<SendMessageToAllUsersInTenantAsync>d__6")]
[ExtensionAttribute]
public static Task`1<string> SendMessageToAllUsersInTenantAsync(ITeamsOperations operations, IActivity activity, string tenantId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions/<SendMessageToAllUsersInTeamAsync>d__7")]
[ExtensionAttribute]
public static Task`1<string> SendMessageToAllUsersInTeamAsync(ITeamsOperations operations, IActivity activity, string teamId, string tenantId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions/<SendMessageToListOfChannelsAsync>d__8")]
[ExtensionAttribute]
public static Task`1<string> SendMessageToListOfChannelsAsync(ITeamsOperations operations, IActivity activity, List`1<TeamMember> channelsMembers, string tenantId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions/<GetOperationStateAsync>d__9")]
[ExtensionAttribute]
public static Task`1<BatchOperationState> GetOperationStateAsync(ITeamsOperations operations, string operationId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions/<GetPagedFailedEntriesAsync>d__10")]
[ExtensionAttribute]
public static Task`1<BatchFailedEntriesResponse> GetPagedFailedEntriesAsync(ITeamsOperations operations, string operationId, string continuationToken, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions/<CancelOperationAsync>d__11")]
[ExtensionAttribute]
public static Task CancelOperationAsync(ITeamsOperations operations, string operationId, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Connector.UserToken : object {
    [CompilerGeneratedAttribute]
private OAuthClient <Client>k__BackingField;
    public OAuthClient Client { get; private set; }
    public UserToken(OAuthClient client);
    [CompilerGeneratedAttribute]
public sealed virtual OAuthClient get_Client();
    [CompilerGeneratedAttribute]
private void set_Client(OAuthClient value);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.UserToken/<GetTokenWithHttpMessagesAsync>d__5")]
public sealed virtual Task`1<HttpOperationResponse`1<TokenResponse>> GetTokenWithHttpMessagesAsync(string userId, string connectionName, string channelId, string code, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.UserToken/<GetAadTokensWithHttpMessagesAsync>d__6")]
public sealed virtual Task`1<HttpOperationResponse`1<IDictionary`2<string, TokenResponse>>> GetAadTokensWithHttpMessagesAsync(string userId, string connectionName, AadResourceUrls aadResourceUrls, string channelId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.UserToken/<SignOutWithHttpMessagesAsync>d__7")]
public sealed virtual Task`1<HttpOperationResponse`1<object>> SignOutWithHttpMessagesAsync(string userId, string connectionName, string channelId, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.UserToken/<GetTokenStatusWithHttpMessagesAsync>d__8")]
public sealed virtual Task`1<HttpOperationResponse`1<IList`1<TokenStatus>>> GetTokenStatusWithHttpMessagesAsync(string userId, string channelId, string include, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Microsoft.Bot.Connector.UserTokenExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.UserTokenExtensions/<GetTokenAsync>d__0")]
[ExtensionAttribute]
public static Task`1<TokenResponse> GetTokenAsync(IUserToken operations, string userId, string connectionName, string channelId, string code, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.UserTokenExtensions/<GetAadTokensAsync>d__1")]
[ExtensionAttribute]
public static Task`1<IDictionary`2<string, TokenResponse>> GetAadTokensAsync(IUserToken operations, string userId, string connectionName, AadResourceUrls aadResourceUrls, string channelId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.UserTokenExtensions/<SignOutAsync>d__2")]
[ExtensionAttribute]
public static Task`1<object> SignOutAsync(IUserToken operations, string userId, string connectionName, string channelId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.UserTokenExtensions/<GetTokenStatusAsync>d__3")]
[ExtensionAttribute]
public static Task`1<IList`1<TokenStatus>> GetTokenStatusAsync(IUserToken operations, string userId, string channelId, string include, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Bot.Connector.UserTokenExtensions/<ExchangeAsyncAsync>d__4")]
[ExtensionAttribute]
public static Task`1<object> ExchangeAsyncAsync(OAuthClient operations, string userId, string connectionName, string channelId, TokenExchangeRequest exchangeRequest, CancellationToken cancellationToken);
}
public class Microsoft.Bot.Schema.ErrorResponseException : RestException {
    [CompilerGeneratedAttribute]
private HttpRequestMessageWrapper <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpResponseMessageWrapper <Response>k__BackingField;
    [CompilerGeneratedAttribute]
private ErrorResponse <Body>k__BackingField;
    public HttpRequestMessageWrapper Request { get; public set; }
    public HttpResponseMessageWrapper Response { get; public set; }
    public ErrorResponse Body { get; public set; }
    public ErrorResponseException(string message);
    public ErrorResponseException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public HttpRequestMessageWrapper get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(HttpRequestMessageWrapper value);
    [CompilerGeneratedAttribute]
public HttpResponseMessageWrapper get_Response();
    [CompilerGeneratedAttribute]
public void set_Response(HttpResponseMessageWrapper value);
    [CompilerGeneratedAttribute]
public ErrorResponse get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(ErrorResponse value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
