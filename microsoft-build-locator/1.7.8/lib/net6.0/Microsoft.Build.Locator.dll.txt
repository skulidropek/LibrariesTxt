[FlagsAttribute]
public enum Microsoft.Build.Locator.DiscoveryType : Enum {
    public int value__;
    public static DiscoveryType DeveloperConsole;
    public static DiscoveryType VisualStudioSetup;
    public static DiscoveryType DotNetSdk;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Build.Locator.DotNetSdkLocationHelper : object {
    private static Regex VersionRegex;
    private static bool IsWindows;
    private static string ExeName;
    private static Lazy`1<IList`1<string>> s_dotnetPathCandidates;
    private static DotNetSdkLocationHelper();
    public static VisualStudioInstance GetInstance(string dotNetSdkPath, bool allowQueryAllRuntimeVersions);
    [IteratorStateMachineAttribute("Microsoft.Build.Locator.DotNetSdkLocationHelper/<GetInstances>d__5")]
public static IEnumerable`1<VisualStudioInstance> GetInstances(string workingDirectory, bool allowQueryAllRuntimes);
    [IteratorStateMachineAttribute("Microsoft.Build.Locator.DotNetSdkLocationHelper/<GetDotNetBasePaths>d__6")]
private static IEnumerable`1<string> GetDotNetBasePaths(string workingDirectory);
    private static void AddUnmanagedDllResolver();
    private static void RemoveUnmanagedDllResolver();
    private static void ModifyUnmanagedDllResolver(Action`1<AssemblyLoadContext> resolverAction);
    private static IntPtr HostFxrResolver(Assembly assembly, string libraryName);
    private static string SdkResolutionExceptionMessage(string methodName);
    private static string GetSdkFromGlobalSettings(string workingDirectory);
    private static IList`1<string> ResolveDotnetPathCandidates();
    [NullableContextAttribute("2")]
private static string GetDotnetPathFromROOT();
    [NullableContextAttribute("2")]
private static string GetCurrentProcessPath();
    [NullableContextAttribute("2")]
private static string GetDotnetPathFromPATH();
    private static String[] GetAllAvailableSDKs();
    private static string realpath(string path);
    private static string FindDotnetPathFromEnvVariable(string environmentVariable);
    private static void SetEnvironmentVariableIfEmpty(string name, string value);
    private static string ValidatePath(string dotnetPath);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static void <ResolveDotnetPathCandidates>g__AddIfValid|13_0(string path, <>c__DisplayClass13_0& );
}
public static class Microsoft.Build.Locator.MSBuildLocator : object {
    private static string MSBuildPublicKeyToken;
    private static String[] s_msBuildAssemblies;
    private static Func`3<AssemblyLoadContext, AssemblyName, Assembly> s_registeredHandler;
    [CompilerGeneratedAttribute]
private static bool <AllowQueryAllRuntimeVersions>k__BackingField;
    public static bool IsRegistered { get; }
    public static bool AllowQueryAllRuntimeVersions { get; public set; }
    public static bool CanRegister { get; }
    private static IEnumerable`1<Assembly> LoadedMsBuildAssemblies { get; }
    private static MSBuildLocator();
    public static bool get_IsRegistered();
    [CompilerGeneratedAttribute]
public static bool get_AllowQueryAllRuntimeVersions();
    [CompilerGeneratedAttribute]
public static void set_AllowQueryAllRuntimeVersions(bool value);
    public static bool get_CanRegister();
    private static IEnumerable`1<Assembly> get_LoadedMsBuildAssemblies();
    public static IEnumerable`1<VisualStudioInstance> QueryVisualStudioInstances();
    public static IEnumerable`1<VisualStudioInstance> QueryVisualStudioInstances(VisualStudioInstanceQueryOptions options);
    internal static IEnumerable`1<VisualStudioInstance> QueryVisualStudioInstances(IEnumerable`1<VisualStudioInstance> instances, VisualStudioInstanceQueryOptions options);
    public static VisualStudioInstance RegisterDefaults();
    public static void RegisterInstance(VisualStudioInstance instance);
    public static void RegisterMSBuildPath(string msbuildPath);
    public static void RegisterMSBuildPath(String[] msbuildSearchPaths);
    private static void RegisterMSBuildPathsInternally(String[] msbuildSearchPaths);
    [EditorBrowsableAttribute("1")]
public static void Unregister();
    private static void ApplyDotNetSdkEnvironmentVariables(string dotNetSdkPath);
    private static bool IsMSBuildAssembly(Assembly assembly);
    private static bool IsMSBuildAssembly(AssemblyName assemblyName);
    [IteratorStateMachineAttribute("Microsoft.Build.Locator.MSBuildLocator/<GetInstances>d__25")]
private static IEnumerable`1<VisualStudioInstance> GetInstances(VisualStudioInstanceQueryOptions options);
}
internal class Microsoft.Build.Locator.NativeMethods : object {
    internal static string HostFxrName;
    internal static int hostfxr_resolve_sdk2(string exe_dir, string working_dir, hostfxr_resolve_sdk2_flags_t flags, hostfxr_resolve_sdk2_result_fn result);
    internal static int hostfxr_get_available_sdks(string exe_dir, hostfxr_get_available_sdks_result_fn result);
    internal static IntPtr realpath(string path, IntPtr buffer);
    internal static void free(IntPtr ptr);
}
internal class Microsoft.Build.Locator.SemanticVersion : object {
    private IEnumerable`1<string> _releaseLabels;
    private Version _version;
    private string _originalValue;
    public int Major { get; }
    public int Minor { get; }
    public int Patch { get; }
    public IEnumerable`1<string> ReleaseLabels { get; }
    public string OriginalValue { get; }
    public string Release { get; }
    public bool IsPrerelease { get; }
    public SemanticVersion(Version version, IEnumerable`1<string> releaseLabels, string originalValue);
    public int get_Major();
    public int get_Minor();
    public int get_Patch();
    public IEnumerable`1<string> get_ReleaseLabels();
    public string get_OriginalValue();
    public string get_Release();
    public bool get_IsPrerelease();
    public sealed virtual int CompareTo(SemanticVersion other);
}
internal static class Microsoft.Build.Locator.SemanticVersionParser : object {
    public static bool TryParse(string value, SemanticVersion& version);
    private static bool IsLetterOrDigitOrDash(char c);
    private static bool IsValidPart(string s, bool allowLeadingZeros);
    private static bool IsValidPart(Char[] chars, bool allowLeadingZeros);
    private static ValueTuple`2<string, String[]> ParseSections(string value);
    private static Version NormalizeVersionValue(Version version);
}
internal static class Microsoft.Build.Locator.VersionComparer : object {
    public static bool Equals(SemanticVersion x, SemanticVersion y);
    public static int Compare(SemanticVersion x, SemanticVersion y);
    private static int CompareReleaseLabels(IEnumerable`1<string> version1, IEnumerable`1<string> version2);
    private static int CompareRelease(string version1, string version2);
}
public class Microsoft.Build.Locator.VisualStudioInstance : object {
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VisualStudioRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSBuildPath>k__BackingField;
    [CompilerGeneratedAttribute]
private DiscoveryType <DiscoveryType>k__BackingField;
    public Version Version { get; }
    public string VisualStudioRootPath { get; }
    public string Name { get; }
    public string MSBuildPath { get; }
    public DiscoveryType DiscoveryType { get; }
    internal VisualStudioInstance(string name, string path, Version version, DiscoveryType discoveryType);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
public string get_VisualStudioRootPath();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_MSBuildPath();
    [CompilerGeneratedAttribute]
public DiscoveryType get_DiscoveryType();
}
public class Microsoft.Build.Locator.VisualStudioInstanceQueryOptions : object {
    [CompilerGeneratedAttribute]
private DiscoveryType <DiscoveryTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAllRuntimeVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    public static VisualStudioInstanceQueryOptions Default { get; }
    public DiscoveryType DiscoveryTypes { get; public set; }
    public bool AllowAllRuntimeVersions { get; public set; }
    public string WorkingDirectory { get; public set; }
    public static VisualStudioInstanceQueryOptions get_Default();
    [CompilerGeneratedAttribute]
public DiscoveryType get_DiscoveryTypes();
    [CompilerGeneratedAttribute]
public void set_DiscoveryTypes(DiscoveryType value);
    [CompilerGeneratedAttribute]
public bool get_AllowAllRuntimeVersions();
    [CompilerGeneratedAttribute]
public void set_AllowAllRuntimeVersions(bool value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.133.12845")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
