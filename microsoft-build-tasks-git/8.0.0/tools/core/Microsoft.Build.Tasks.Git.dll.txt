[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Build.Tasks.Git.CharUtils : object {
    public static Char[] AsciiWhitespace;
    public static Char[] WhitespaceSeparators;
    private static CharUtils();
    public static bool IsHexadecimalDigit(char c);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Build.Tasks.Git.GetUntrackedFiles : RepositoryTask {
    [CompilerGeneratedAttribute]
private string <RepositoryId>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITaskItem[] <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectDirectory>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITaskItem[] <UntrackedFiles>k__BackingField;
    public string RepositoryId { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public ITaskItem[] Files { get; public set; }
    [RequiredAttribute]
public string ProjectDirectory { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputAttribute]
public ITaskItem[] UntrackedFiles { get; private set; }
    [CompilerGeneratedAttribute]
public string get_RepositoryId();
    [CompilerGeneratedAttribute]
public void set_RepositoryId(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ProjectDirectory();
    [CompilerGeneratedAttribute]
public void set_ProjectDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_UntrackedFiles();
    [CompilerGeneratedAttribute]
private void set_UntrackedFiles(ITaskItem[] value);
    protected virtual string GetRepositoryId();
    [NullableContextAttribute("1")]
protected virtual string GetInitialPath();
    [NullableContextAttribute("1")]
private protected virtual void Execute(GitRepository repository);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Build.Tasks.Git.GitConfig : object {
    public static GitConfig Empty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableDictionary`2<GitVariableName, ImmutableArray`1<string>> Variables;
    public GitConfig(ImmutableDictionary`2<GitVariableName, ImmutableArray`1<string>> variables);
    private static GitConfig();
    internal IEnumerable`1<KeyValuePair`2<string, ImmutableArray`1<string>>> EnumerateVariables();
    public ImmutableArray`1<string> GetVariableValues(string section, string name);
    public ImmutableArray`1<string> GetVariableValues(string section, string subsection, string name);
    public string GetVariableValue(string section, string name);
    public string GetVariableValue(string section, string subsection, string name);
    [NullableContextAttribute("2")]
public static bool ParseBooleanValue(string str, bool defaultValue);
    [NullableContextAttribute("2")]
public static bool TryParseBooleanValue(string str, Boolean& value);
    internal static long ParseInt64Value(string str, long defaultValue);
    [NullableContextAttribute("2")]
internal static bool TryParseInt64Value(string str, Int64& value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Build.Tasks.Git.GitEnvironment : object {
    [NullableAttribute("1")]
private static string LocalConfigurationScopeName;
    [NullableAttribute("1")]
private static string GitRepositoryConfigurationScopeName;
    [NullableAttribute("1")]
public static GitEnvironment Empty;
    [CompilerGeneratedAttribute]
private string <HomeDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XdgConfigHomeDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProgramDataDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SystemDirectory>k__BackingField;
    public string HomeDirectory { get; }
    public string XdgConfigHomeDirectory { get; }
    public string ProgramDataDirectory { get; }
    public string SystemDirectory { get; }
    public GitEnvironment(string homeDirectory, string xdgConfigHomeDirectory, string programDataDirectory, string systemDirectory);
    private static GitEnvironment();
    [CompilerGeneratedAttribute]
public string get_HomeDirectory();
    [CompilerGeneratedAttribute]
public string get_XdgConfigHomeDirectory();
    [CompilerGeneratedAttribute]
public string get_ProgramDataDirectory();
    [CompilerGeneratedAttribute]
public string get_SystemDirectory();
    [NullableContextAttribute("1")]
public static GitEnvironment Create(string configurationScope);
    [NullableContextAttribute("1")]
public static GitEnvironment CreateFromProcessEnvironment();
    internal static string FindSystemDirectory(string pathList, string unixEtcDir);
    private static string FindWindowsGitInstallation(string pathList);
    [NullableContextAttribute("1")]
internal string GetHomeDirectoryForPathExpansion(string path);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static string <CreateFromProcessEnvironment>g__getVariable|17_0(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Build.Tasks.Git.GitIgnore : object {
    private static string GitIgnoreFileName;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    private string _workingDirectoryNoSlash;
    [CompilerGeneratedAttribute]
private bool <IgnoreCase>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PatternGroup <Root>k__BackingField;
    public string WorkingDirectory { get; }
    public bool IgnoreCase { get; }
    [NullableAttribute("2")]
public PatternGroup Root { get; }
    private StringComparison PathComparison { get; }
    private IEqualityComparer`1<string> PathComparer { get; }
    internal GitIgnore(PatternGroup root, string workingDirectory, bool ignoreCase);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public bool get_IgnoreCase();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PatternGroup get_Root();
    private StringComparison get_PathComparison();
    private IEqualityComparer`1<string> get_PathComparer();
    public Matcher CreateMatcher();
    [NullableContextAttribute("2")]
internal static PatternGroup LoadFromFile(string path, PatternGroup parent);
    internal static bool TryParsePattern(string line, StringBuilder reusableBuffer, String& glob, PatternFlags& flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Build.Tasks.Git.GitOperations : object {
    private static int RemoteRepositoryRecursionLimit;
    private static string SourceControlName;
    private static string RemoteSectionName;
    private static string SubmoduleSectionName;
    private static string RemoteOriginName;
    private static string UrlSectionName;
    private static string UrlVariableName;
    [NullableContextAttribute("2")]
public static string GetRepositoryUrl(GitRepository repository, string remoteName, bool warnOnMissingRemote, Action`2<string, Object[]> logWarning);
    [NullableContextAttribute("2")]
private static string GetRepositoryUrl(GitRepository repository, string remoteName, int recursionDepth, bool warnOnMissingRemote, Action`2<string, Object[]> logWarning);
    [NullableContextAttribute("2")]
private static string GetRemoteUrl(GitRepository repository, String& remoteName, bool warnOnMissingRemote, Action`2<string, Object[]> logWarning);
    private static string ResolveUrl(Uri uri, GitEnvironment environment, string remoteName, int recursionDepth, bool warnOnMissingRemote, Action`2<string, Object[]> logWarning);
    [NullableContextAttribute("2")]
private static bool TryGetRemote(GitConfig config, String& remoteName, String& remoteUrl);
    internal static string ApplyInsteadOfUrlMapping(GitConfig config, string url);
    internal static Uri NormalizeUrl(GitRepository repository, string url);
    internal static Uri NormalizeUrl(string url, string root);
    private static bool IsWindowsAbsoluteOrDriveRelativePath(string value);
    private static bool TryParseScp(string value, Uri& uri);
    public static ITaskItem[] GetSourceRoots(GitRepository repository, string remoteName, bool warnOnMissingCommit, Action`2<string, Object[]> logWarning);
    public static ITaskItem[] GetUntrackedFiles(GitRepository repository, ITaskItem[] files, string projectDirectory);
    private static GitRepository CreateSubmoduleRepository(GitEnvironment environment, string directoryFullPath);
    internal static ITaskItem[] GetUntrackedFiles(GitRepository repository, ITaskItem[] files, string projectDirectory, Func`3<GitEnvironment, string, GitRepository> repositoryFactory);
    internal static DirectoryNode BuildDirectoryTree(GitRepository repository, Func`3<GitEnvironment, string, GitRepository> repositoryFactory);
    private static void AddTreeNode(DirectoryNode root, string workingDirectory, Lazy`1<Matcher> matcher);
    internal static Matcher GetContainingRepositoryMatcher(string fullPath, DirectoryNode root);
    internal static int BinarySearch(IReadOnlyList`1<T> list, TValue value, Func`3<T, TValue, int> compare);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Build.Tasks.Git.GitReferenceResolver : object {
    private static string PackedRefsFileName;
    private static string RefsPrefix;
    private string _commonDirectory;
    private string _gitDirectory;
    private Lazy`1<ImmutableDictionary`2<string, string>> _lazyPackedReferences;
    public GitReferenceResolver(string gitDirectory, string commonDirectory);
    private static ImmutableDictionary`2<string, string> ReadPackedReferences(string gitDirectory);
    internal static ImmutableDictionary`2<string, string> ReadPackedReferences(TextReader reader, string path);
    [NullableContextAttribute("2")]
public string ResolveHeadReference();
    public string ResolveReference(string reference);
    private string ResolveReference(string reference, HashSet`1& lazyVisitedReferences);
    internal static string ReadReferenceFromFile(string path);
    private string ResolvePackedReference(string reference);
    private static bool IsObjectId(string reference);
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, string> <.ctor>b__5_0();
    [CompilerGeneratedAttribute]
internal static Exception <ReadPackedReferences>g__invalidData|7_0(<>c__DisplayClass7_0& , <>c__DisplayClass7_1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Build.Tasks.Git.GitRepository : object {
    private static int SupportedGitRepoFormatVersion;
    private static string CommonDirFileName;
    private static string GitDirName;
    private static string GitDirPrefix;
    internal static string GitHeadFileName;
    private static string GitModulesFileName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<string> s_knownExtensions;
    [CompilerGeneratedAttribute]
private GitConfig <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommonDirectory>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private GitEnvironment <Environment>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ValueTuple`2<ImmutableArray`1<GitSubmodule>, ImmutableArray`1<string>>> _lazySubmodules;
    private Lazy`1<GitIgnore> _lazyIgnore;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<string> _lazyHeadCommitSha;
    private GitReferenceResolver _referenceResolver;
    public GitConfig Config { get; }
    public GitIgnore Ignore { get; }
    public string GitDirectory { get; }
    public string CommonDirectory { get; }
    [NullableAttribute("2")]
public string WorkingDirectory { get; }
    public GitEnvironment Environment { get; }
    internal GitRepository(GitEnvironment environment, GitConfig config, string gitDirectory, string commonDirectory, string workingDirectory);
    internal GitRepository(GitEnvironment environment, GitConfig config, string gitDirectory, string commonDirectory, string workingDirectory, ImmutableArray`1<GitSubmodule> submodules, ImmutableArray`1<string> submoduleDiagnostics, GitIgnore ignore, string headCommitSha);
    private static GitRepository();
    [CompilerGeneratedAttribute]
public GitConfig get_Config();
    public GitIgnore get_Ignore();
    [CompilerGeneratedAttribute]
public string get_GitDirectory();
    [CompilerGeneratedAttribute]
public string get_CommonDirectory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public GitEnvironment get_Environment();
    internal static GitRepository OpenRepository(string path, GitEnvironment environment);
    public static GitRepository OpenRepository(GitRepositoryLocation location, GitEnvironment environment);
    private static string GetWorkingDirectory(GitConfig config, GitRepositoryLocation location);
    [NullableContextAttribute("2")]
public string GetHeadCommitSha();
    [NullableContextAttribute("2")]
private string ReadHeadCommitSha();
    public static GitReferenceResolver GetSubmoduleReferenceResolver(string submoduleWorkingDirectoryFullPath);
    private string GetWorkingDirectory();
    [NullableContextAttribute("0")]
public ImmutableArray`1<GitSubmodule> GetSubmodules();
    public ImmutableArray`1<string> GetSubmoduleDiagnostics();
    private ValueTuple`2<ImmutableArray`1<GitSubmodule>, ImmutableArray`1<string>> ReadSubmodules();
    [NullableContextAttribute("2")]
internal GitConfig ReadSubmoduleConfig();
    [IteratorStateMachineAttribute("Microsoft.Build.Tasks.Git.GitRepository/<EnumerateSubmoduleConfig>d__41")]
internal static IEnumerable`1<ValueTuple`3<string, string, string>> EnumerateSubmoduleConfig(GitConfig submoduleConfig);
    private GitIgnore LoadIgnore();
    public static bool TryGetRepositoryLocation(string directory, GitRepositoryLocation& location);
    public static bool TryFindRepository(string directory, GitRepositoryLocation& location);
    private static bool TryGetRepositoryLocationImpl(string directory, GitRepositoryLocation& location);
    private static string ReadDotGitFile(string path);
    private static bool IsGitDirectory(string directory, String& commonDirectory);
    [CompilerGeneratedAttribute]
internal static void <ReadSubmodules>g__reportDiagnostic|39_0(string diagnostic, <>c__DisplayClass39_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.Build.Tasks.Git.GitRepositoryLocation : ValueType {
    [CompilerGeneratedAttribute]
private string <GitDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommonDirectory>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    public string GitDirectory { get; }
    public string CommonDirectory { get; }
    [NullableAttribute("2")]
public string WorkingDirectory { get; }
    internal GitRepositoryLocation(string gitDirectory, string commonDirectory, string workingDirectory);
    [CompilerGeneratedAttribute]
public string get_GitDirectory();
    [CompilerGeneratedAttribute]
public string get_CommonDirectory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_WorkingDirectory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.Build.Tasks.Git.GitSubmodule : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectoryRelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectoryFullPath>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <HeadCommitSha>k__BackingField;
    public string Name { get; }
    public string WorkingDirectoryRelativePath { get; }
    public string WorkingDirectoryFullPath { get; }
    [NullableAttribute("2")]
public string Url { get; }
    [NullableAttribute("2")]
public string HeadCommitSha { get; }
    internal GitSubmodule(string name, string workingDirectoryRelativePath, string workingDirectoryFullPath, string url, string headCommitSha);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_WorkingDirectoryRelativePath();
    [CompilerGeneratedAttribute]
public string get_WorkingDirectoryFullPath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_HeadCommitSha();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.Build.Tasks.Git.GitVariableName : ValueType {
    public static StringComparer SectionNameComparer;
    public static StringComparer SubsectionNameComparer;
    public static StringComparer VariableNameComparer;
    public string SectionName;
    public string SubsectionName;
    public string VariableName;
    public GitVariableName(string sectionName, string subsectionName, string variableName);
    private static GitVariableName();
    public bool SectionNameEquals(string name);
    public bool SubsectionNameEquals(string name);
    public bool VariableNameEquals(string name);
    public sealed virtual bool Equals(GitVariableName other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Build.Tasks.Git.Glob : object {
    internal static bool IsMatch(string pattern, string path, bool ignoreCase, bool matchWildCardWithDirectorySeparator);
    private static bool IsRangeMatch(string pattern, Int32& patternIndex, char pathChar, bool ignoreCase, bool matchWildCardWithDirectorySeparator);
    [CompilerGeneratedAttribute]
internal static bool <IsMatch>g__equal|0_0(char x, char y, <>c__DisplayClass0_0& );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Build.Tasks.Git.LocateRepository : RepositoryTask {
    [CompilerGeneratedAttribute]
private string <RemoteName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITaskItem[] <Roots>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RevisionId>k__BackingField;
    public string RemoteName { get; public set; }
    [RequiredAttribute]
public string Path { get; public set; }
    [OutputAttribute]
public string RepositoryId { get; private set; }
    [OutputAttribute]
public string WorkingDirectory { get; private set; }
    [OutputAttribute]
public string Url { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputAttribute]
public ITaskItem[] Roots { get; private set; }
    [OutputAttribute]
public string RevisionId { get; private set; }
    [CompilerGeneratedAttribute]
public string get_RemoteName();
    [CompilerGeneratedAttribute]
public void set_RemoteName(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_RepositoryId();
    [CompilerGeneratedAttribute]
private void set_RepositoryId(string value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
private void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
private void set_Url(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Roots();
    [CompilerGeneratedAttribute]
private void set_Roots(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_RevisionId();
    [CompilerGeneratedAttribute]
private void set_RevisionId(string value);
    protected virtual string GetRepositoryId();
    [NullableContextAttribute("1")]
protected virtual string GetInitialPath();
    [NullableContextAttribute("1")]
private protected virtual void Execute(GitRepository repository);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Build.Tasks.Git.PathUtils : object {
    public static char VolumeSeparatorChar;
    public static string DirectorySeparatorStr;
    private static Char[] s_slash;
    private static Char[] s_directorySeparators;
    public static bool IsUnixLikePlatform { get; }
    private static PathUtils();
    public static bool get_IsUnixLikePlatform();
    public static string EnsureTrailingSlash(string path);
    public static string TrimTrailingSlash(string path);
    public static string TrimTrailingDirectorySeparator(string path);
    public static bool HasTrailingSlash(string path);
    public static bool HasTrailingDirectorySeparator(string path);
    public static string ToPosixPath(string path);
    internal static string ToPosixDirectoryPath(string path);
    internal static bool IsPosixPath(string path);
    public static string CombinePosixPaths(string root, string relativePath);
    public static string CombinePaths(string root, string relativePath);
    public static string CombinePaths(string root, string relativePath, string separator);
    public static bool IsDirectorySeparator(char c);
    public static bool IsNormalized(string path);
    public static bool IsAbsolute(string path);
    private static bool IsDriveRootedAbsolutePath(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Build.Tasks.Git.RepositoryTask : Task {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConfigurationScope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoWarnOnMissingInfo>k__BackingField;
    [NullableAttribute("2")]
public string ConfigurationScope { get; public set; }
    public bool NoWarnOnMissingInfo { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ConfigurationScope();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ConfigurationScope(string value);
    [CompilerGeneratedAttribute]
public bool get_NoWarnOnMissingInfo();
    [CompilerGeneratedAttribute]
public void set_NoWarnOnMissingInfo(bool value);
    public sealed virtual bool Execute();
    private void ReportMissingRepositoryWarning(string initialPath);
    private protected abstract virtual void Execute(GitRepository repository);
    [NullableContextAttribute("2")]
protected abstract virtual string GetRepositoryId();
    protected abstract virtual string GetInitialPath();
    private void ExecuteImpl();
    [NullableContextAttribute("2")]
private GitRepository GetOrCreateRepositoryInstance();
    private Tuple`2<Type, string> GetCacheKey(string repositoryId);
    private bool TryGetCachedRepositoryInstance(Tuple`2<Type, string> cacheKey, bool requireCached, GitRepository& repository);
    private void CacheRepositoryInstance(Tuple`2<Type, string> cacheKey, GitRepository repository);
}
internal static class Microsoft.Build.Tasks.Git.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string PathMustBeAbsolute { get; }
    internal static string PathMustBeFilePath { get; }
    internal static string ErrorReadingGitRepositoryInformation { get; }
    internal static string UnsupportedRepositoryVersion { get; }
    internal static string UnsupportedRepositoryExtension { get; }
    internal static string PathSpecifiedInFileIsNotAbsolute { get; }
    internal static string PathSpecifiedInFileIsInvalid { get; }
    internal static string ValueOfIsNotValidPath { get; }
    internal static string InvalidModulePath { get; }
    internal static string RecursionDetectedWhileResolvingReference { get; }
    internal static string RepositoryDoesNotHaveWorkingDirectory { get; }
    internal static string InvalidFormatOfFileAtPath { get; }
    internal static string FormatOfFileIsInvalid { get; }
    internal static string InvalidReference { get; }
    internal static string ConfigurationFileRecursionExceededMaximumAllowedDepth { get; }
    internal static string SubmoduleWithoutCommit { get; }
    internal static string InvalidSubmoduleUrl { get; }
    internal static string InvalidSubmodulePath { get; }
    internal static string SourceCodeWontBeAvailableViaSourceLink { get; }
    internal static string RepositoryHasNoCommit { get; }
    internal static string RepositoryHasNoRemote { get; }
    internal static string InvalidRepositoryRemoteUrl { get; }
    internal static string UnableToLocateRepository { get; }
    internal static string RepositoryDoesNotHaveSpecifiedRemote { get; }
    internal static string ValueOfIsNotValidConfigurationScope { get; }
    internal static string HomeRelativePathsAreNotAllowed { get; }
    internal static string RepositoryUrlEvaluationExceededMaximumAllowedDepth { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_PathMustBeAbsolute();
    internal static string get_PathMustBeFilePath();
    internal static string get_ErrorReadingGitRepositoryInformation();
    internal static string get_UnsupportedRepositoryVersion();
    internal static string get_UnsupportedRepositoryExtension();
    internal static string get_PathSpecifiedInFileIsNotAbsolute();
    internal static string get_PathSpecifiedInFileIsInvalid();
    internal static string get_ValueOfIsNotValidPath();
    internal static string get_InvalidModulePath();
    internal static string get_RecursionDetectedWhileResolvingReference();
    internal static string get_RepositoryDoesNotHaveWorkingDirectory();
    internal static string get_InvalidFormatOfFileAtPath();
    internal static string get_FormatOfFileIsInvalid();
    internal static string get_InvalidReference();
    internal static string get_ConfigurationFileRecursionExceededMaximumAllowedDepth();
    internal static string get_SubmoduleWithoutCommit();
    internal static string get_InvalidSubmoduleUrl();
    internal static string get_InvalidSubmodulePath();
    internal static string get_SourceCodeWontBeAvailableViaSourceLink();
    internal static string get_RepositoryHasNoCommit();
    internal static string get_RepositoryHasNoRemote();
    internal static string get_InvalidRepositoryRemoteUrl();
    internal static string get_UnableToLocateRepository();
    internal static string get_RepositoryDoesNotHaveSpecifiedRemote();
    internal static string get_ValueOfIsNotValidConfigurationScope();
    internal static string get_HomeRelativePathsAreNotAllowed();
    internal static string get_RepositoryUrlEvaluationExceededMaximumAllowedDepth();
}
internal static class Microsoft.Build.Tasks.SourceControl.Names : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Build.Tasks.SourceControl.PathUtilities : object {
    private static Char[] s_directorySeparators;
    private static string UncPrefix;
    private static string UnixRoot;
    private static PathUtilities();
    public static String[] Split(string fullPath);
    [ExtensionAttribute]
public static bool EndsWithSeparator(string path);
    [ExtensionAttribute]
public static string EndWithSeparator(string path);
    [ExtensionAttribute]
public static string EndWithSeparator(string path, char separator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Build.Tasks.SourceControl.SequenceComparer`1 : object {
    private IComparer`1<T> _comparer;
    public SequenceComparer`1(IComparer`1<T> comparer);
    public bool StartsWith(T[] sequence, T[] prefix);
    public int Compare(T[] left, int leftLength, T[] right, int rightLength);
    public sealed virtual int Compare(T[] left, T[] right);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class System.NullableDebug : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool b);
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool b, string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class System.NullableString : object {
    public static bool IsNullOrEmpty(string str);
    public static bool IsNullOrWhiteSpace(string str);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
