internal interface Microsoft.ClearScript.V8.IV8DebugListener {
    public abstract virtual void ConnectClient();
    public abstract virtual void SendCommand(string command);
    public abstract virtual void DisconnectClient();
}
internal interface Microsoft.ClearScript.V8.IV8Object {
    public JavaScriptObjectKind ObjectKind { get; }
    public JavaScriptObjectFlags ObjectFlags { get; }
    public int IdentityHash { get; }
    public bool IsPromise { get; }
    public bool IsArray { get; }
    public bool IsShared { get; }
    public bool IsArrayBufferOrView { get; }
    public V8ArrayBufferOrViewKind ArrayBufferOrViewKind { get; }
    public abstract virtual JavaScriptObjectKind get_ObjectKind();
    public abstract virtual JavaScriptObjectFlags get_ObjectFlags();
    public abstract virtual int get_IdentityHash();
    public abstract virtual object GetProperty(string name);
    public abstract virtual bool TryGetProperty(string name, Object& value);
    public abstract virtual void SetProperty(string name, object value);
    public abstract virtual bool DeleteProperty(string name);
    public abstract virtual String[] GetPropertyNames(bool includeIndices);
    public abstract virtual object GetProperty(int index);
    public abstract virtual void SetProperty(int index, object value);
    public abstract virtual bool DeleteProperty(int index);
    public abstract virtual Int32[] GetPropertyIndices();
    public abstract virtual object Invoke(bool asConstructor, Object[] args);
    public abstract virtual object InvokeMethod(string name, Object[] args);
    public abstract virtual bool get_IsPromise();
    public abstract virtual bool get_IsArray();
    public abstract virtual bool get_IsShared();
    public abstract virtual bool get_IsArrayBufferOrView();
    public abstract virtual V8ArrayBufferOrViewKind get_ArrayBufferOrViewKind();
    public abstract virtual V8ArrayBufferOrViewInfo GetArrayBufferOrViewInfo();
    public abstract virtual void InvokeWithArrayBufferOrViewData(Action`1<IntPtr> action);
}
internal interface Microsoft.ClearScript.V8.SplitProxy.IV8SplitProxyNative {
    public abstract virtual IntPtr V8SplitProxyManaged_SetMethodTable(IntPtr pMethodTable);
    public abstract virtual string V8SplitProxyNative_GetVersion();
    public abstract virtual void V8Environment_InitializeICU(IntPtr pICUData, UInt32 size);
    public abstract virtual Ptr StdString_New(string value);
    public abstract virtual string StdString_GetValue(Ptr pString);
    public abstract virtual void StdString_SetValue(Ptr pString, string value);
    public abstract virtual void StdString_Delete(Ptr pString);
    public abstract virtual Ptr StdStringArray_New(int elementCount);
    public abstract virtual int StdStringArray_GetElementCount(Ptr pArray);
    public abstract virtual void StdStringArray_SetElementCount(Ptr pArray, int elementCount);
    public abstract virtual string StdStringArray_GetElement(Ptr pArray, int index);
    public abstract virtual void StdStringArray_SetElement(Ptr pArray, int index, string value);
    public abstract virtual void StdStringArray_Delete(Ptr pArray);
    public abstract virtual Ptr StdByteArray_New(int elementCount);
    public abstract virtual int StdByteArray_GetElementCount(Ptr pArray);
    public abstract virtual void StdByteArray_SetElementCount(Ptr pArray, int elementCount);
    public abstract virtual IntPtr StdByteArray_GetData(Ptr pArray);
    public abstract virtual void StdByteArray_Delete(Ptr pArray);
    public abstract virtual Ptr StdInt32Array_New(int elementCount);
    public abstract virtual int StdInt32Array_GetElementCount(Ptr pArray);
    public abstract virtual void StdInt32Array_SetElementCount(Ptr pArray, int elementCount);
    public abstract virtual IntPtr StdInt32Array_GetData(Ptr pArray);
    public abstract virtual void StdInt32Array_Delete(Ptr pArray);
    public abstract virtual Ptr StdUInt32Array_New(int elementCount);
    public abstract virtual int StdUInt32Array_GetElementCount(Ptr pArray);
    public abstract virtual void StdUInt32Array_SetElementCount(Ptr pArray, int elementCount);
    public abstract virtual IntPtr StdUInt32Array_GetData(Ptr pArray);
    public abstract virtual void StdUInt32Array_Delete(Ptr pArray);
    public abstract virtual Ptr StdUInt64Array_New(int elementCount);
    public abstract virtual int StdUInt64Array_GetElementCount(Ptr pArray);
    public abstract virtual void StdUInt64Array_SetElementCount(Ptr pArray, int elementCount);
    public abstract virtual IntPtr StdUInt64Array_GetData(Ptr pArray);
    public abstract virtual void StdUInt64Array_Delete(Ptr pArray);
    public abstract virtual Ptr StdPtrArray_New(int elementCount);
    public abstract virtual int StdPtrArray_GetElementCount(Ptr pArray);
    public abstract virtual void StdPtrArray_SetElementCount(Ptr pArray, int elementCount);
    public abstract virtual IntPtr StdPtrArray_GetData(Ptr pArray);
    public abstract virtual void StdPtrArray_Delete(Ptr pArray);
    public abstract virtual Ptr StdV8ValueArray_New(int elementCount);
    public abstract virtual int StdV8ValueArray_GetElementCount(Ptr pArray);
    public abstract virtual void StdV8ValueArray_SetElementCount(Ptr pArray, int elementCount);
    public abstract virtual Ptr StdV8ValueArray_GetData(Ptr pArray);
    public abstract virtual void StdV8ValueArray_Delete(Ptr pArray);
    public abstract virtual Ptr V8Value_New();
    public abstract virtual void V8Value_SetNonexistent(Ptr pV8Value);
    public abstract virtual void V8Value_SetUndefined(Ptr pV8Value);
    public abstract virtual void V8Value_SetNull(Ptr pV8Value);
    public abstract virtual void V8Value_SetBoolean(Ptr pV8Value, bool value);
    public abstract virtual void V8Value_SetNumber(Ptr pV8Value, double value);
    public abstract virtual void V8Value_SetInt32(Ptr pV8Value, int value);
    public abstract virtual void V8Value_SetUInt32(Ptr pV8Value, UInt32 value);
    public abstract virtual void V8Value_SetString(Ptr pV8Value, string value);
    public abstract virtual void V8Value_SetDateTime(Ptr pV8Value, double value);
    public abstract virtual void V8Value_SetBigInt(Ptr pV8Value, int signBit, Byte[] bytes);
    public abstract virtual void V8Value_SetV8Object(Ptr pV8Value, Handle hObject, Subtype subtype, Flags flags);
    public abstract virtual void V8Value_SetHostObject(Ptr pV8Value, IntPtr pObject);
    public abstract virtual void V8Value_Decode(Ptr pV8Value, Decoded& decoded);
    public abstract virtual void V8Value_Delete(Ptr pV8Value);
    public abstract virtual void V8CpuProfile_GetInfo(Ptr pProfile, Handle hEntity, String& name, UInt64& startTimestamp, UInt64& endTimestamp, Int32& sampleCount, Ptr& pRootNode);
    public abstract virtual bool V8CpuProfile_GetSample(Ptr pProfile, int index, UInt64& nodeId, UInt64& timestamp);
    public abstract virtual void V8CpuProfileNode_GetInfo(Ptr pNode, Handle hEntity, UInt64& nodeId, Int64& scriptId, String& scriptName, String& functionName, String& bailoutReason, Int64& lineNumber, Int64& columnNumber, UInt64& hitCount, UInt32& hitLineCount, Int32& childCount);
    public abstract virtual bool V8CpuProfileNode_GetHitLines(Ptr pNode, Int32[]& lineNumbers, UInt32[]& hitCounts);
    public abstract virtual Ptr V8CpuProfileNode_GetChildNode(Ptr pNode, int index);
    public abstract virtual Handle V8Isolate_Create(string name, int maxNewSpaceSize, int maxOldSpaceSize, double heapExpansionMultiplier, ulong maxArrayBufferAllocation, V8RuntimeFlags flags, int debugPort);
    public abstract virtual Handle V8Isolate_CreateContext(Handle hIsolate, string name, V8ScriptEngineFlags flags, int debugPort);
    public abstract virtual UIntPtr V8Isolate_GetMaxHeapSize(Handle hIsolate);
    public abstract virtual void V8Isolate_SetMaxHeapSize(Handle hIsolate, UIntPtr size);
    public abstract virtual double V8Isolate_GetHeapSizeSampleInterval(Handle hIsolate);
    public abstract virtual void V8Isolate_SetHeapSizeSampleInterval(Handle hIsolate, double milliseconds);
    public abstract virtual UIntPtr V8Isolate_GetMaxStackUsage(Handle hIsolate);
    public abstract virtual void V8Isolate_SetMaxStackUsage(Handle hIsolate, UIntPtr size);
    public abstract virtual void V8Isolate_AwaitDebuggerAndPause(Handle hIsolate);
    public abstract virtual void V8Isolate_CancelAwaitDebugger(Handle hIsolate);
    public abstract virtual Handle V8Isolate_Compile(Handle hIsolate, string resourceName, string sourceMapUrl, ulong uniqueId, DocumentKind documentKind, IntPtr pDocumentInfo, string code);
    public abstract virtual Handle V8Isolate_CompileProducingCache(Handle hIsolate, string resourceName, string sourceMapUrl, ulong uniqueId, DocumentKind documentKind, IntPtr pDocumentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public abstract virtual Handle V8Isolate_CompileConsumingCache(Handle hIsolate, string resourceName, string sourceMapUrl, ulong uniqueId, DocumentKind documentKind, IntPtr pDocumentInfo, string code, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public abstract virtual Handle V8Isolate_CompileUpdatingCache(Handle hIsolate, string resourceName, string sourceMapUrl, ulong uniqueId, DocumentKind documentKind, IntPtr pDocumentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public abstract virtual bool V8Isolate_GetEnableInterruptPropagation(Handle hIsolate);
    public abstract virtual void V8Isolate_SetEnableInterruptPropagation(Handle hIsolate, bool value);
    public abstract virtual bool V8Isolate_GetDisableHeapSizeViolationInterrupt(Handle hIsolate);
    public abstract virtual void V8Isolate_SetDisableHeapSizeViolationInterrupt(Handle hIsolate, bool value);
    public abstract virtual void V8Isolate_GetHeapStatistics(Handle hIsolate, UInt64& totalHeapSize, UInt64& totalHeapSizeExecutable, UInt64& totalPhysicalSize, UInt64& totalAvailableSize, UInt64& usedHeapSize, UInt64& heapSizeLimit, UInt64& totalExternalSize);
    public abstract virtual void V8Isolate_GetStatistics(Handle hIsolate, UInt64& scriptCount, UInt64& scriptCacheSize, UInt64& moduleCount, UInt64[]& postedTaskCounts, UInt64[]& invokedTaskCounts);
    public abstract virtual void V8Isolate_CollectGarbage(Handle hIsolate, bool exhaustive);
    public abstract virtual bool V8Isolate_BeginCpuProfile(Handle hIsolate, string name, bool recordSamples);
    public abstract virtual void V8Isolate_EndCpuProfile(Handle hIsolate, string name, IntPtr pAction);
    public abstract virtual void V8Isolate_CollectCpuProfileSample(Handle hIsolate);
    public abstract virtual UInt32 V8Isolate_GetCpuProfileSampleInterval(Handle hIsolate);
    public abstract virtual void V8Isolate_SetCpuProfileSampleInterval(Handle hIsolate, UInt32 value);
    public abstract virtual void V8Isolate_WriteHeapSnapshot(Handle hIsolate, IntPtr pStream);
    public abstract virtual UIntPtr V8Context_GetMaxIsolateHeapSize(Handle hContext);
    public abstract virtual void V8Context_SetMaxIsolateHeapSize(Handle hContext, UIntPtr size);
    public abstract virtual double V8Context_GetIsolateHeapSizeSampleInterval(Handle hContext);
    public abstract virtual void V8Context_SetIsolateHeapSizeSampleInterval(Handle hContext, double milliseconds);
    public abstract virtual UIntPtr V8Context_GetMaxIsolateStackUsage(Handle hContext);
    public abstract virtual void V8Context_SetMaxIsolateStackUsage(Handle hContext, UIntPtr size);
    public abstract virtual void V8Context_InvokeWithLock(Handle hContext, IntPtr pAction);
    public abstract virtual object V8Context_GetRootItem(Handle hContext);
    public abstract virtual void V8Context_AddGlobalItem(Handle hContext, string name, object value, bool globalMembers);
    public abstract virtual void V8Context_AwaitDebuggerAndPause(Handle hContext);
    public abstract virtual void V8Context_CancelAwaitDebugger(Handle hContext);
    public abstract virtual object V8Context_ExecuteCode(Handle hContext, string resourceName, string sourceMapUrl, ulong uniqueId, DocumentKind documentKind, IntPtr pDocumentInfo, string code, bool evaluate);
    public abstract virtual Handle V8Context_Compile(Handle hContext, string resourceName, string sourceMapUrl, ulong uniqueId, DocumentKind documentKind, IntPtr pDocumentInfo, string code);
    public abstract virtual Handle V8Context_CompileProducingCache(Handle hContext, string resourceName, string sourceMapUrl, ulong uniqueId, DocumentKind documentKind, IntPtr pDocumentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public abstract virtual Handle V8Context_CompileConsumingCache(Handle hContext, string resourceName, string sourceMapUrl, ulong uniqueId, DocumentKind documentKind, IntPtr pDocumentInfo, string code, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public abstract virtual Handle V8Context_CompileUpdatingCache(Handle hContext, string resourceName, string sourceMapUrl, ulong uniqueId, DocumentKind documentKind, IntPtr pDocumentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public abstract virtual object V8Context_ExecuteScript(Handle hContext, Handle hScript, bool evaluate);
    public abstract virtual void V8Context_Interrupt(Handle hContext);
    public abstract virtual void V8Context_CancelInterrupt(Handle hContext);
    public abstract virtual bool V8Context_GetEnableIsolateInterruptPropagation(Handle hContext);
    public abstract virtual void V8Context_SetEnableIsolateInterruptPropagation(Handle hContext, bool value);
    public abstract virtual bool V8Context_GetDisableIsolateHeapSizeViolationInterrupt(Handle hContext);
    public abstract virtual void V8Context_SetDisableIsolateHeapSizeViolationInterrupt(Handle hContext, bool value);
    public abstract virtual void V8Context_GetIsolateHeapStatistics(Handle hContext, UInt64& totalHeapSize, UInt64& totalHeapSizeExecutable, UInt64& totalPhysicalSize, UInt64& totalAvailableSize, UInt64& usedHeapSize, UInt64& heapSizeLimit, UInt64& totalExternalSize);
    public abstract virtual void V8Context_GetIsolateStatistics(Handle hContext, UInt64& scriptCount, UInt64& scriptCacheSize, UInt64& moduleCount, UInt64[]& postedTaskCounts, UInt64[]& invokedTaskCounts);
    public abstract virtual void V8Context_GetStatistics(Handle hContext, UInt64& scriptCount, UInt64& moduleCount, UInt64& moduleCacheSize);
    public abstract virtual void V8Context_CollectGarbage(Handle hContext, bool exhaustive);
    public abstract virtual void V8Context_OnAccessSettingsChanged(Handle hContext);
    public abstract virtual bool V8Context_BeginCpuProfile(Handle hContext, string name, bool recordSamples);
    public abstract virtual void V8Context_EndCpuProfile(Handle hContext, string name, IntPtr pAction);
    public abstract virtual void V8Context_CollectCpuProfileSample(Handle hContext);
    public abstract virtual UInt32 V8Context_GetCpuProfileSampleInterval(Handle hContext);
    public abstract virtual void V8Context_SetCpuProfileSampleInterval(Handle hContext, UInt32 value);
    public abstract virtual void V8Context_WriteIsolateHeapSnapshot(Handle hContext, IntPtr pStream);
    public abstract virtual object V8Object_GetNamedProperty(Handle hObject, string name);
    public abstract virtual bool V8Object_TryGetNamedProperty(Handle hObject, string name, Object& value);
    public abstract virtual void V8Object_SetNamedProperty(Handle hObject, string name, object value);
    public abstract virtual bool V8Object_DeleteNamedProperty(Handle hObject, string name);
    public abstract virtual String[] V8Object_GetPropertyNames(Handle hObject, bool includeIndices);
    public abstract virtual object V8Object_GetIndexedProperty(Handle hObject, int index);
    public abstract virtual void V8Object_SetIndexedProperty(Handle hObject, int index, object value);
    public abstract virtual bool V8Object_DeleteIndexedProperty(Handle hObject, int index);
    public abstract virtual Int32[] V8Object_GetPropertyIndices(Handle hObject);
    public abstract virtual object V8Object_Invoke(Handle hObject, bool asConstructor, Object[] args);
    public abstract virtual object V8Object_InvokeMethod(Handle hObject, string name, Object[] args);
    public abstract virtual void V8Object_GetArrayBufferOrViewInfo(Handle hObject, IV8Object& arrayBuffer, UInt64& offset, UInt64& size, UInt64& length);
    public abstract virtual void V8Object_InvokeWithArrayBufferOrViewData(Handle hObject, IntPtr pAction);
    public abstract virtual void V8DebugCallback_ConnectClient(Handle hCallback);
    public abstract virtual void V8DebugCallback_SendCommand(Handle hCallback, string command);
    public abstract virtual void V8DebugCallback_DisconnectClient(Handle hCallback);
    public abstract virtual void NativeCallback_Invoke(Handle hCallback);
    public abstract virtual void V8Entity_Release(Handle hEntity);
    public abstract virtual void V8Entity_DestroyHandle(Handle hEntity);
    public abstract virtual void HostException_Schedule(string message, object exception);
    public abstract virtual UIntPtr V8UnitTestSupport_GetTextDigest(string value);
    public abstract virtual void V8UnitTestSupport_GetStatistics(UInt64& isolateCount, UInt64& contextCount);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.NativeCallback : object {
}
internal class Microsoft.ClearScript.V8.SplitProxy.NativeCallbackImpl : object {
    private V8EntityHolder holder;
    private Handle Handle { get; }
    public NativeCallbackImpl(Handle hCallback);
    private Handle get_Handle();
    public sealed virtual void Invoke();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private void <Invoke>b__4_0(IV8SplitProxyNative instance);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.StdByteArray : object {
    public static IScope`1<Ptr> CreateScope(int elementCount);
    public static IScope`1<Ptr> CreateScope(Byte[] array);
    public static int GetElementCount(Ptr pArray);
    public static void SetElementCount(Ptr pArray, int elementCount);
    public static Byte[] ToArray(Ptr pArray);
    public static void CopyFromArray(Ptr pArray, Byte[] array);
    private static Ptr NewFromArray(IV8SplitProxyNative instance, Byte[] array);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.StdInt32Array : object {
    public static IScope`1<Ptr> CreateScope(int elementCount);
    public static IScope`1<Ptr> CreateScope(Int32[] array);
    public static int GetElementCount(Ptr pArray);
    public static void SetElementCount(Ptr pArray, int elementCount);
    public static Int32[] ToArray(Ptr pArray);
    public static void CopyFromArray(Ptr pArray, Int32[] array);
    private static Ptr NewFromArray(IV8SplitProxyNative instance, Int32[] array);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.StdPtrArray : object {
    public static IScope`1<Ptr> CreateScope(int elementCount);
    public static IScope`1<Ptr> CreateScope(IntPtr[] array);
    public static int GetElementCount(Ptr pArray);
    public static void SetElementCount(Ptr pArray, int elementCount);
    public static IntPtr[] ToArray(Ptr pArray);
    public static void CopyFromArray(Ptr pArray, IntPtr[] array);
    private static Ptr NewFromArray(IV8SplitProxyNative instance, IntPtr[] array);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.StdString : object {
    public static IScope`1<Ptr> CreateScope(string value);
    public static string GetValue(Ptr pString);
    public static void SetValue(Ptr pString, string value);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.StdStringArray : object {
    public static IScope`1<Ptr> CreateScope(int elementCount);
    public static IScope`1<Ptr> CreateScope(String[] array);
    public static int GetElementCount(Ptr pArray);
    public static void SetElementCount(Ptr pArray, int elementCount);
    public static String[] ToArray(Ptr pArray);
    public static void CopyFromArray(Ptr pArray, String[] array);
    private static Ptr NewFromArray(IV8SplitProxyNative instance, String[] array);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.StdUInt32Array : object {
    public static IScope`1<Ptr> CreateScope(int elementCount);
    public static IScope`1<Ptr> CreateScope(UInt32[] array);
    public static int GetElementCount(Ptr pArray);
    public static void SetElementCount(Ptr pArray, int elementCount);
    public static UInt32[] ToArray(Ptr pArray);
    public static void CopyFromArray(Ptr pArray, UInt32[] array);
    private static Ptr NewFromArray(IV8SplitProxyNative instance, UInt32[] array);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.StdUInt64Array : object {
    public static IScope`1<Ptr> CreateScope(int elementCount);
    public static IScope`1<Ptr> CreateScope(UInt64[] array);
    public static int GetElementCount(Ptr pArray);
    public static void SetElementCount(Ptr pArray, int elementCount);
    public static UInt64[] ToArray(Ptr pArray);
    public static void CopyFromArray(Ptr pArray, UInt64[] array);
    private static Ptr NewFromArray(IV8SplitProxyNative instance, UInt64[] array);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.StdV8ValueArray : object {
    public static IScope`1<Ptr> CreateScope(int elementCount);
    public static IScope`1<Ptr> CreateScope(Object[] array);
    public static int GetElementCount(Ptr pArray);
    public static void SetElementCount(Ptr pArray, int elementCount);
    public static Object[] ToArray(Ptr pArray);
    public static void CopyFromArray(Ptr pArray, Object[] array);
    private static Ptr NewFromArray(IV8SplitProxyNative instance, Object[] array);
    public static Ptr GetElementPtr(Ptr pV8Value, int index);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.V8Context : object {
}
internal class Microsoft.ClearScript.V8.SplitProxy.V8ContextProxyImpl : V8ContextProxy {
    private V8EntityHolder holder;
    private Handle Handle { get; }
    public UIntPtr MaxIsolateHeapSize { get; public set; }
    public TimeSpan IsolateHeapSizeSampleInterval { get; public set; }
    public UIntPtr MaxIsolateStackUsage { get; public set; }
    public bool EnableIsolateInterruptPropagation { get; public set; }
    public bool DisableIsolateHeapSizeViolationInterrupt { get; public set; }
    public UInt32 CpuProfileSampleInterval { get; public set; }
    public V8ContextProxyImpl(V8IsolateProxy isolateProxy, string name, V8ScriptEngineFlags flags, int debugPort);
    private Handle get_Handle();
    public virtual UIntPtr get_MaxIsolateHeapSize();
    public virtual void set_MaxIsolateHeapSize(UIntPtr value);
    public virtual TimeSpan get_IsolateHeapSizeSampleInterval();
    public virtual void set_IsolateHeapSizeSampleInterval(TimeSpan value);
    public virtual UIntPtr get_MaxIsolateStackUsage();
    public virtual void set_MaxIsolateStackUsage(UIntPtr value);
    public virtual void InvokeWithLock(Action action);
    public virtual object GetRootItem();
    public virtual void AddGlobalItem(string name, object item, bool globalMembers);
    public virtual void AwaitDebuggerAndPause();
    public virtual void CancelAwaitDebugger();
    public virtual object Execute(UniqueDocumentInfo documentInfo, string code, bool evaluate);
    public virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code);
    public virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public virtual object Execute(V8Script script, bool evaluate);
    public virtual void Interrupt();
    public virtual void CancelInterrupt();
    public virtual bool get_EnableIsolateInterruptPropagation();
    public virtual void set_EnableIsolateInterruptPropagation(bool value);
    public virtual bool get_DisableIsolateHeapSizeViolationInterrupt();
    public virtual void set_DisableIsolateHeapSizeViolationInterrupt(bool value);
    public virtual V8RuntimeHeapInfo GetIsolateHeapInfo();
    public virtual Statistics GetIsolateStatistics();
    public virtual Statistics GetStatistics();
    public virtual void CollectGarbage(bool exhaustive);
    public virtual void OnAccessSettingsChanged();
    public virtual bool BeginCpuProfile(string name, V8CpuProfileFlags flags);
    public virtual V8CpuProfile EndCpuProfile(string name);
    public virtual void CollectCpuProfileSample();
    public virtual UInt32 get_CpuProfileSampleInterval();
    public virtual void set_CpuProfileSampleInterval(UInt32 value);
    public virtual void WriteIsolateHeapSnapshot(Stream stream);
    public virtual void Dispose();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private UIntPtr <get_MaxIsolateHeapSize>b__5_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private TimeSpan <get_IsolateHeapSizeSampleInterval>b__8_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private UIntPtr <get_MaxIsolateStackUsage>b__11_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private object <GetRootItem>b__14_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private void <AwaitDebuggerAndPause>b__16_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private void <CancelAwaitDebugger>b__17_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private void <Interrupt>b__24_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private void <CancelInterrupt>b__25_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private bool <get_EnableIsolateInterruptPropagation>b__27_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private bool <get_DisableIsolateHeapSizeViolationInterrupt>b__30_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private void <OnAccessSettingsChanged>b__36_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private void <CollectCpuProfileSample>b__39_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private UInt32 <get_CpuProfileSampleInterval>b__41_0(IV8SplitProxyNative instance);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.V8CpuProfile : object {
    public static void ProcessProfile(Handle hEntity, Ptr pProfile, V8CpuProfile profile);
    private static Node CreateNode(Handle hEntity, Ptr pNode);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.V8DebugCallback : object {
}
internal class Microsoft.ClearScript.V8.SplitProxy.V8DebugListenerImpl : object {
    private V8EntityHolder holder;
    private Handle Handle { get; }
    public V8DebugListenerImpl(Handle hCallback);
    private Handle get_Handle();
    public sealed virtual void ConnectClient();
    public sealed virtual void SendCommand(string command);
    public sealed virtual void DisconnectClient();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private void <ConnectClient>b__4_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private void <DisconnectClient>b__6_0(IV8SplitProxyNative instance);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.V8Entity : object {
}
[IsReadOnlyAttribute]
internal class Microsoft.ClearScript.V8.SplitProxy.V8EntityHolder : ValueType {
    private string name;
    private bool registered;
    private Handle handle;
    public Handle Handle { get; }
    public V8EntityHolder(string name, Func`1<Handle> acquireHandle);
    private V8EntityHolder(string name);
    public Handle get_Handle();
    public void ReleaseEntity();
    public static void Destroy(V8EntityHolder& holder);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.V8Isolate : object {
}
internal class Microsoft.ClearScript.V8.SplitProxy.V8IsolateProxyImpl : V8IsolateProxy {
    private V8EntityHolder holder;
    private Handle Handle { get; }
    public UIntPtr MaxHeapSize { get; public set; }
    public TimeSpan HeapSizeSampleInterval { get; public set; }
    public UIntPtr MaxStackUsage { get; public set; }
    public bool EnableInterruptPropagation { get; public set; }
    public bool DisableHeapSizeViolationInterrupt { get; public set; }
    public UInt32 CpuProfileSampleInterval { get; public set; }
    public V8IsolateProxyImpl(string name, V8RuntimeConstraints constraints, V8RuntimeFlags flags, int debugPort);
    private Handle get_Handle();
    public Handle CreateContext(string name, V8ScriptEngineFlags flags, int debugPort);
    public virtual UIntPtr get_MaxHeapSize();
    public virtual void set_MaxHeapSize(UIntPtr value);
    public virtual TimeSpan get_HeapSizeSampleInterval();
    public virtual void set_HeapSizeSampleInterval(TimeSpan value);
    public virtual UIntPtr get_MaxStackUsage();
    public virtual void set_MaxStackUsage(UIntPtr value);
    public virtual void AwaitDebuggerAndPause();
    public virtual void CancelAwaitDebugger();
    public virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code);
    public virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public virtual bool get_EnableInterruptPropagation();
    public virtual void set_EnableInterruptPropagation(bool value);
    public virtual bool get_DisableHeapSizeViolationInterrupt();
    public virtual void set_DisableHeapSizeViolationInterrupt(bool value);
    public virtual V8RuntimeHeapInfo GetHeapInfo();
    public virtual Statistics GetStatistics();
    public virtual void CollectGarbage(bool exhaustive);
    public virtual bool BeginCpuProfile(string name, V8CpuProfileFlags flags);
    public virtual V8CpuProfile EndCpuProfile(string name);
    public virtual void CollectCpuProfileSample();
    public virtual UInt32 get_CpuProfileSampleInterval();
    public virtual void set_CpuProfileSampleInterval(UInt32 value);
    public virtual void WriteHeapSnapshot(Stream stream);
    public virtual void Dispose();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private UIntPtr <get_MaxHeapSize>b__6_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private TimeSpan <get_HeapSizeSampleInterval>b__9_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private UIntPtr <get_MaxStackUsage>b__12_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private void <AwaitDebuggerAndPause>b__14_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private void <CancelAwaitDebugger>b__15_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private bool <get_EnableInterruptPropagation>b__21_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private bool <get_DisableHeapSizeViolationInterrupt>b__24_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private void <CollectCpuProfileSample>b__31_0(IV8SplitProxyNative instance);
    [CompilerGeneratedAttribute]
private UInt32 <get_CpuProfileSampleInterval>b__33_0(IV8SplitProxyNative instance);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.V8Object : object {
}
internal class Microsoft.ClearScript.V8.SplitProxy.V8ObjectImpl : object {
    private V8EntityHolder holder;
    [CompilerGeneratedAttribute]
private Subtype <Subtype>k__BackingField;
    [CompilerGeneratedAttribute]
private Flags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IdentityHash>k__BackingField;
    public Handle Handle { get; }
    public Subtype Subtype { get; }
    public Flags Flags { get; }
    public JavaScriptObjectKind ObjectKind { get; }
    public JavaScriptObjectFlags ObjectFlags { get; }
    public int IdentityHash { get; }
    public bool IsPromise { get; }
    public bool IsArray { get; }
    public bool IsShared { get; }
    public bool IsArrayBufferOrView { get; }
    public V8ArrayBufferOrViewKind ArrayBufferOrViewKind { get; }
    public V8ObjectImpl(Handle hObject, Subtype subtype, Flags flags, int identityHash);
    public Handle get_Handle();
    [CompilerGeneratedAttribute]
public Subtype get_Subtype();
    [CompilerGeneratedAttribute]
public Flags get_Flags();
    public sealed virtual JavaScriptObjectKind get_ObjectKind();
    public sealed virtual JavaScriptObjectFlags get_ObjectFlags();
    [CompilerGeneratedAttribute]
public sealed virtual int get_IdentityHash();
    public sealed virtual object GetProperty(string name);
    public sealed virtual bool TryGetProperty(string name, Object& value);
    public sealed virtual void SetProperty(string name, object value);
    public sealed virtual bool DeleteProperty(string name);
    public sealed virtual String[] GetPropertyNames(bool includeIndices);
    public sealed virtual object GetProperty(int index);
    public sealed virtual void SetProperty(int index, object value);
    public sealed virtual bool DeleteProperty(int index);
    public sealed virtual Int32[] GetPropertyIndices();
    public sealed virtual object Invoke(bool asConstructor, Object[] args);
    public sealed virtual object InvokeMethod(string name, Object[] args);
    public sealed virtual bool get_IsPromise();
    public sealed virtual bool get_IsArray();
    public sealed virtual bool get_IsShared();
    public sealed virtual bool get_IsArrayBufferOrView();
    public sealed virtual V8ArrayBufferOrViewKind get_ArrayBufferOrViewKind();
    public sealed virtual V8ArrayBufferOrViewInfo GetArrayBufferOrViewInfo();
    public sealed virtual void InvokeWithArrayBufferOrViewData(Action`1<IntPtr> action);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    [CompilerGeneratedAttribute]
private Int32[] <GetPropertyIndices>b__25_0(IV8SplitProxyNative instance);
}
internal static class Microsoft.ClearScript.V8.SplitProxy.V8Script : object {
}
internal class Microsoft.ClearScript.V8.SplitProxy.V8ScriptImpl : V8Script {
    private V8EntityHolder holder;
    public Handle Handle { get; }
    public V8ScriptImpl(UniqueDocumentInfo documentInfo, UIntPtr codeDigest, Handle hScript);
    public Handle get_Handle();
    public virtual void Dispose();
    protected virtual override void Finalize();
}
internal static class Microsoft.ClearScript.V8.SplitProxy.V8SplitProxyManaged : object {
    private static IntPtr pDelegatePtrs;
    private static IntPtr pFunctionPtrs;
    private static int methodCount;
    [ThreadStaticAttribute]
public static Exception ScheduledException;
    public static IntPtr MethodTable { get; }
    public static IntPtr get_MethodTable();
    public static void Initialize();
    public static void Teardown();
    private static void ScheduleHostException(IntPtr pObject, Exception exception);
    private static void ScheduleHostException(Exception exception);
    private static UInt32 GetMaxCacheSizeForCategory(DocumentCategory category);
    private static void CreateMethodTable();
    private static void DestroyMethodTable();
    private static ValueTuple`2<IntPtr, IntPtr> GetMethodPair(T del);
    private static void ScheduleForwardingException(Ptr pException);
    private static void ScheduleInvalidOperationException(Ptr pMessage);
    private static void ScheduleScriptEngineException(Ptr pEngineName, Ptr pMessage, Ptr pStackTrace, bool isFatal, bool executionStarted, Ptr pScriptException, Ptr pInnerException);
    private static void ScheduleScriptInterruptedException(Ptr pEngineName, Ptr pMessage, Ptr pStackTrace, bool isFatal, bool executionStarted, Ptr pScriptException, Ptr pInnerException);
    private static void InvokeHostAction(IntPtr pAction);
    private static void ProcessArrayBufferOrViewData(IntPtr pData, IntPtr pAction);
    private static void ProcessCpuProfile(Ptr pProfile, IntPtr pAction);
    private static IntPtr CreateV8ObjectCache();
    private static void CacheV8Object(IntPtr pCache, IntPtr pObject, IntPtr pV8Object);
    private static IntPtr GetCachedV8Object(IntPtr pCache, IntPtr pObject);
    private static void GetAllCachedV8Objects(IntPtr pCache, Ptr pV8ObjectPtrs);
    private static bool RemoveV8ObjectCacheEntry(IntPtr pCache, IntPtr pObject);
    private static IntPtr CreateDebugAgent(Ptr pName, Ptr pVersion, int port, bool remote, Handle hCallback);
    private static void SendDebugMessage(IntPtr pAgent, Ptr pContent);
    private static void DestroyDebugAgent(IntPtr pAgent);
    private static UInt32 GetMaxScriptCacheSize();
    private static UInt32 GetMaxModuleCacheSize();
    private static IntPtr AddRefHostObject(IntPtr pObject);
    private static void ReleaseHostObject(IntPtr pObject);
    private static Invocability GetHostObjectInvocability(IntPtr pObject);
    private static void GetHostObjectNamedProperty(IntPtr pObject, Ptr pName, Ptr pValue);
    private static void GetHostObjectNamedPropertyWithCacheability(IntPtr pObject, Ptr pName, Ptr pValue, Boolean& isCacheable);
    private static void SetHostObjectNamedProperty(IntPtr pObject, Ptr pName, Ptr pValue);
    private static bool DeleteHostObjectNamedProperty(IntPtr pObject, Ptr pName);
    private static void GetHostObjectPropertyNames(IntPtr pObject, Ptr pNames);
    private static void GetHostObjectIndexedProperty(IntPtr pObject, int index, Ptr pValue);
    private static void SetHostObjectIndexedProperty(IntPtr pObject, int index, Ptr pValue);
    private static bool DeleteHostObjectIndexedProperty(IntPtr pObject, int index);
    private static void GetHostObjectPropertyIndices(IntPtr pObject, Ptr pIndices);
    private static void InvokeHostObject(IntPtr pObject, bool asConstructor, int argCount, Ptr pArgs, Ptr pResult);
    private static void InvokeHostObjectMethod(IntPtr pObject, Ptr pName, int argCount, Ptr pArgs, Ptr pResult);
    private static void GetHostObjectEnumerator(IntPtr pObject, Ptr pResult);
    private static void GetHostObjectAsyncEnumerator(IntPtr pObject, Ptr pResult);
    private static void QueueNativeCallback(Handle hCallback);
    private static IntPtr CreateNativeCallbackTimer(int dueTime, int period, Handle hCallback);
    private static bool ChangeNativeCallbackTimer(IntPtr pTimer, int dueTime, int period);
    private static void DestroyNativeCallbackTimer(IntPtr pTimer);
    private static void LoadModule(IntPtr pSourceDocumentInfo, Ptr pSpecifier, Ptr pResourceName, Ptr pSourceMapUrl, UInt64& uniqueId, DocumentKind& documentKind, Ptr pCode, IntPtr& pDocumentInfo, Ptr pExports);
    private static void CreateModuleContext(IntPtr pDocumentInfo, Ptr pNames, Ptr pValues);
    private static void WriteBytesToStream(IntPtr pStream, IntPtr pBytes, int count);
    private static V8GlobalFlags GetGlobalFlags();
}
internal static class Microsoft.ClearScript.V8.SplitProxy.V8SplitProxyNative : object {
    private static IV8SplitProxyNative instance;
    private static V8SplitProxyNative();
    public static string GetVersion();
    public static void Invoke(Action`1<IV8SplitProxyNative> action);
    public static T Invoke(Func`2<IV8SplitProxyNative, T> func);
    public static void InvokeNoThrow(Action`1<IV8SplitProxyNative> action);
    public static T InvokeNoThrow(Func`2<IV8SplitProxyNative, T> func);
    private static void ThrowScheduledException();
    private static IV8SplitProxyNative CreateInstance();
}
internal class Microsoft.ClearScript.V8.SplitProxy.V8TestProxyImpl : V8TestProxy {
    public virtual UIntPtr GetNativeDigest(string value);
    public virtual Statistics GetStatistics();
    public virtual void Dispose();
}
internal static class Microsoft.ClearScript.V8.SplitProxy.V8Value : object {
    public static int Size;
    public static IScope`1<Ptr> CreateScope();
    public static IScope`1<Ptr> CreateScope(object obj);
    public static void Set(Ptr pV8Value, object obj);
    public static object Get(Ptr pV8Value);
    private static bool TryGetBigInteger(int signBit, int wordCount, IntPtr pWords, BigInteger& result);
    private static void SetNonexistent(Ptr pV8Value);
    private static void SetUndefined(Ptr pV8Value);
    private static void SetNull(Ptr pV8Value);
    private static void SetBoolean(Ptr pV8Value, bool value);
    private static void SetNumeric(Ptr pV8Value, double value);
    private static void SetNumeric(Ptr pV8Value, int value);
    private static void SetNumeric(Ptr pV8Value, UInt32 value);
    private static void SetString(Ptr pV8Value, string value);
    private static void SetDateTime(Ptr pV8Value, DateTime value);
    private static void SetBigInt(Ptr pV8Value, BigInteger value);
    private static void SetV8Object(Ptr pV8Value, V8ObjectImpl v8ObjectImpl);
    private static void SetHostObject(Ptr pV8Value, object obj);
}
internal class Microsoft.ClearScript.V8.V8ArrayBufferOrViewInfo : object {
    [CompilerGeneratedAttribute]
private V8ArrayBufferOrViewKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private IV8Object <ArrayBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Length>k__BackingField;
    public V8ArrayBufferOrViewKind Kind { get; }
    public IV8Object ArrayBuffer { get; }
    public ulong Offset { get; }
    public ulong Size { get; }
    public ulong Length { get; }
    public V8ArrayBufferOrViewInfo(V8ArrayBufferOrViewKind kind, IV8Object arrayBuffer, ulong offset, ulong size, ulong length);
    [CompilerGeneratedAttribute]
public V8ArrayBufferOrViewKind get_Kind();
    [CompilerGeneratedAttribute]
public IV8Object get_ArrayBuffer();
    [CompilerGeneratedAttribute]
public ulong get_Offset();
    [CompilerGeneratedAttribute]
public ulong get_Size();
    [CompilerGeneratedAttribute]
public ulong get_Length();
}
internal enum Microsoft.ClearScript.V8.V8ArrayBufferOrViewKind : Enum {
    public int value__;
    public static V8ArrayBufferOrViewKind None;
    public static V8ArrayBufferOrViewKind ArrayBuffer;
    public static V8ArrayBufferOrViewKind DataView;
    public static V8ArrayBufferOrViewKind Uint8Array;
    public static V8ArrayBufferOrViewKind Uint8ClampedArray;
    public static V8ArrayBufferOrViewKind Int8Array;
    public static V8ArrayBufferOrViewKind Uint16Array;
    public static V8ArrayBufferOrViewKind Int16Array;
    public static V8ArrayBufferOrViewKind Uint32Array;
    public static V8ArrayBufferOrViewKind Int32Array;
    public static V8ArrayBufferOrViewKind BigUint64Array;
    public static V8ArrayBufferOrViewKind BigInt64Array;
    public static V8ArrayBufferOrViewKind Float32Array;
    public static V8ArrayBufferOrViewKind Float64Array;
}
public enum Microsoft.ClearScript.V8.V8CacheKind : Enum {
    public int value__;
    public static V8CacheKind None;
    [ObsoleteAttribute("V8 no longer supports parser caching. This option is now equivalent to Code.")]
public static V8CacheKind Parser;
    public static V8CacheKind Code;
}
public enum Microsoft.ClearScript.V8.V8CacheResult : Enum {
    public int value__;
    public static V8CacheResult Disabled;
    public static V8CacheResult Accepted;
    public static V8CacheResult Verified;
    public static V8CacheResult Updated;
    public static V8CacheResult UpdateFailed;
}
internal abstract class Microsoft.ClearScript.V8.V8ContextProxy : V8Proxy {
    public UIntPtr MaxIsolateHeapSize { get; public set; }
    public TimeSpan IsolateHeapSizeSampleInterval { get; public set; }
    public UIntPtr MaxIsolateStackUsage { get; public set; }
    public bool EnableIsolateInterruptPropagation { get; public set; }
    public bool DisableIsolateHeapSizeViolationInterrupt { get; public set; }
    public UInt32 CpuProfileSampleInterval { get; public set; }
    public static V8ContextProxy Create(V8IsolateProxy isolateProxy, string name, V8ScriptEngineFlags flags, int debugPort);
    public abstract virtual UIntPtr get_MaxIsolateHeapSize();
    public abstract virtual void set_MaxIsolateHeapSize(UIntPtr value);
    public abstract virtual TimeSpan get_IsolateHeapSizeSampleInterval();
    public abstract virtual void set_IsolateHeapSizeSampleInterval(TimeSpan value);
    public abstract virtual UIntPtr get_MaxIsolateStackUsage();
    public abstract virtual void set_MaxIsolateStackUsage(UIntPtr value);
    public abstract virtual void InvokeWithLock(Action action);
    public abstract virtual object GetRootItem();
    public abstract virtual void AddGlobalItem(string name, object item, bool globalMembers);
    public abstract virtual void AwaitDebuggerAndPause();
    public abstract virtual void CancelAwaitDebugger();
    public abstract virtual object Execute(UniqueDocumentInfo documentInfo, string code, bool evaluate);
    public abstract virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code);
    public abstract virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public abstract virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public abstract virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public abstract virtual object Execute(V8Script script, bool evaluate);
    public abstract virtual void Interrupt();
    public abstract virtual void CancelInterrupt();
    public abstract virtual bool get_EnableIsolateInterruptPropagation();
    public abstract virtual void set_EnableIsolateInterruptPropagation(bool value);
    public abstract virtual bool get_DisableIsolateHeapSizeViolationInterrupt();
    public abstract virtual void set_DisableIsolateHeapSizeViolationInterrupt(bool value);
    public abstract virtual V8RuntimeHeapInfo GetIsolateHeapInfo();
    public abstract virtual Statistics GetIsolateStatistics();
    public abstract virtual Statistics GetStatistics();
    public abstract virtual void CollectGarbage(bool exhaustive);
    public abstract virtual void OnAccessSettingsChanged();
    public abstract virtual bool BeginCpuProfile(string name, V8CpuProfileFlags flags);
    public abstract virtual V8CpuProfile EndCpuProfile(string name);
    public abstract virtual void CollectCpuProfileSample();
    public abstract virtual UInt32 get_CpuProfileSampleInterval();
    public abstract virtual void set_CpuProfileSampleInterval(UInt32 value);
    public abstract virtual void WriteIsolateHeapSnapshot(Stream stream);
}
public class Microsoft.ClearScript.V8.V8CpuProfile : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <StartTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <EndTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Node <RootNode>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Sample> <Samples>k__BackingField;
    public string Name { get; internal set; }
    public ulong StartTimestamp { get; internal set; }
    public ulong EndTimestamp { get; internal set; }
    public Node RootNode { get; internal set; }
    public IReadOnlyList`1<Sample> Samples { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public ulong get_StartTimestamp();
    [CompilerGeneratedAttribute]
internal void set_StartTimestamp(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_EndTimestamp();
    [CompilerGeneratedAttribute]
internal void set_EndTimestamp(ulong value);
    [CompilerGeneratedAttribute]
public Node get_RootNode();
    [CompilerGeneratedAttribute]
internal void set_RootNode(Node value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<Sample> get_Samples();
    [CompilerGeneratedAttribute]
internal void set_Samples(IReadOnlyList`1<Sample> value);
    public string ToJson();
    public void WriteJson(TextWriter writer);
    internal Node FindNode(ulong nodeId);
    private void WriteNodesJson(TextWriter writer);
    private void WriteSamplesJson(TextWriter writer);
    private void WriteTimeDeltasJson(TextWriter writer);
}
[FlagsAttribute]
public enum Microsoft.ClearScript.V8.V8CpuProfileFlags : Enum {
    public int value__;
    public static V8CpuProfileFlags None;
    public static V8CpuProfileFlags EnableSampleCollection;
}
internal class Microsoft.ClearScript.V8.V8DebugAgent : object {
    private static string faviconUrl;
    private Guid targetId;
    private string name;
    private string version;
    private int port;
    private IV8DebugListener listener;
    private TcpListener tcpListener;
    private V8DebugClient activeClient;
    private InterlockedOneWayFlag disposedFlag;
    public V8DebugAgent(string name, string version, int port, bool remote, IV8DebugListener listener);
    public void SendCommand(V8DebugClient client, string command);
    public void SendMessage(string message);
    public void OnClientFailed(V8DebugClient client);
    private void StartAcceptWebClient();
    private void OnWebClientAccepted(Task`1<Socket> task);
    private void OnWebContextCreated(Task`1<WebContext> task);
    private void HandleWebRequest(WebContext webContext);
    private void StartAcceptWebSocket(WebContext webContext);
    private void OnWebSocketAccepted(WebContext webContext, Task`1<WebSocket> task);
    private bool ConnectClient(WebSocket webSocket);
    private void DisconnectClient(ErrorCode errorCode, string message);
    public sealed virtual void Dispose();
    private static void SendWebResponse(WebContext webContext, string content, string contentType, int statusCode);
    private static string JsonEscape(object value);
    [CompilerGeneratedAttribute]
private void <OnClientFailed>b__12_0(object _);
    [CompilerGeneratedAttribute]
private void <ConnectClient>b__19_0(object _);
    [CompilerGeneratedAttribute]
private void <DisconnectClient>b__20_0(object _);
}
internal class Microsoft.ClearScript.V8.V8DebugClient : object {
    private V8DebugAgent agent;
    private WebSocket webSocket;
    private ConcurrentQueue`1<string> queue;
    private SemaphoreSlim sendSemaphore;
    private InterlockedOneWayFlag disposedFlag;
    public V8DebugClient(V8DebugAgent agent, WebSocket webSocket);
    public void Start();
    private void StartReceiveMessage();
    private void OnMessageReceived(Task`1<Message> task);
    public void SendMessage(string message);
    [AsyncStateMachineAttribute("Microsoft.ClearScript.V8.V8DebugClient/<SendMessagesAsync>d__10")]
private Task SendMessagesAsync();
    private void OnMessagesSent(Task task);
    private void OnFailed(ErrorCode errorCode, string message);
    public void Dispose(ErrorCode errorCode, string message);
    [CompilerGeneratedAttribute]
private bool <OnMessageReceived>b__8_0(Exception exception);
    [CompilerGeneratedAttribute]
private bool <OnMessagesSent>b__11_0(Exception exception);
}
[FlagsAttribute]
public enum Microsoft.ClearScript.V8.V8GlobalFlags : Enum {
    public UInt32 value__;
    public static V8GlobalFlags None;
    [ObsoleteAttribute("V8 no longer supports Top-Level Await control. The feature is always enabled.")]
public static V8GlobalFlags EnableTopLevelAwait;
    public static V8GlobalFlags DisableJITCompilation;
    public static V8GlobalFlags DisableBackgroundWork;
}
internal abstract class Microsoft.ClearScript.V8.V8IsolateProxy : V8Proxy {
    public UIntPtr MaxHeapSize { get; public set; }
    public TimeSpan HeapSizeSampleInterval { get; public set; }
    public UIntPtr MaxStackUsage { get; public set; }
    public bool EnableInterruptPropagation { get; public set; }
    public bool DisableHeapSizeViolationInterrupt { get; public set; }
    public UInt32 CpuProfileSampleInterval { get; public set; }
    public static V8IsolateProxy Create(string name, V8RuntimeConstraints constraints, V8RuntimeFlags flags, int debugPort);
    public abstract virtual UIntPtr get_MaxHeapSize();
    public abstract virtual void set_MaxHeapSize(UIntPtr value);
    public abstract virtual TimeSpan get_HeapSizeSampleInterval();
    public abstract virtual void set_HeapSizeSampleInterval(TimeSpan value);
    public abstract virtual UIntPtr get_MaxStackUsage();
    public abstract virtual void set_MaxStackUsage(UIntPtr value);
    public abstract virtual void AwaitDebuggerAndPause();
    public abstract virtual void CancelAwaitDebugger();
    public abstract virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code);
    public abstract virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public abstract virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public abstract virtual V8Script Compile(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public abstract virtual bool get_EnableInterruptPropagation();
    public abstract virtual void set_EnableInterruptPropagation(bool value);
    public abstract virtual bool get_DisableHeapSizeViolationInterrupt();
    public abstract virtual void set_DisableHeapSizeViolationInterrupt(bool value);
    public abstract virtual V8RuntimeHeapInfo GetHeapInfo();
    public abstract virtual Statistics GetStatistics();
    public abstract virtual void CollectGarbage(bool exhaustive);
    public abstract virtual bool BeginCpuProfile(string name, V8CpuProfileFlags flags);
    public abstract virtual V8CpuProfile EndCpuProfile(string name);
    public abstract virtual void CollectCpuProfileSample();
    public abstract virtual UInt32 get_CpuProfileSampleInterval();
    public abstract virtual void set_CpuProfileSampleInterval(UInt32 value);
    public abstract virtual void WriteHeapSnapshot(Stream stream);
}
internal abstract class Microsoft.ClearScript.V8.V8Proxy : object {
    private static object dataLock;
    private static IntPtr hNativeAssembly;
    private static ulong splitImplCount;
    private static bool triedToLoadNativeAssembly;
    private static bool loadedNativeAssembly;
    private static V8Proxy();
    internal static void OnEntityHolderCreated();
    internal static void OnEntityHolderDestroyed();
    private static IntPtr LoadNativeAssembly();
    private static IntPtr LoadNativeLibrary(string baseName, string platform, string architecture, string extension);
    private static void InitializeICU();
    [IteratorStateMachineAttribute("Microsoft.ClearScript.V8.V8Proxy/<GetDirPaths>d__10")]
private static IEnumerable`1<string> GetDirPaths(string platform, string architecture);
    public abstract virtual void Dispose();
    private static IntPtr LoadLibrary(string path);
    private static void FreeLibrary(IntPtr hLibrary);
    private static string GetLoadLibraryErrorMessage();
}
internal static class Microsoft.ClearScript.V8.V8ProxyHelpers : object {
    public static IntPtr AddRefHostObject(IntPtr pObject);
    public static IntPtr AddRefHostObject(object obj);
    public static void ReleaseHostObject(IntPtr pObject);
    public static IScope`1<IntPtr> CreateAddRefHostObjectScope(object obj);
    public static object GetHostObject(IntPtr pObject);
    public static T GetHostObject(IntPtr pObject);
    public static object GetHostObjectProperty(IntPtr pObject, string name);
    public static object GetHostObjectProperty(object obj, string name);
    public static object GetHostObjectProperty(IntPtr pObject, string name, Boolean& isCacheable);
    public static object GetHostObjectProperty(object obj, string name, Boolean& isCacheable);
    public static void SetHostObjectProperty(IntPtr pObject, string name, object value);
    public static void SetHostObjectProperty(object obj, string name, object value);
    public static bool DeleteHostObjectProperty(IntPtr pObject, string name);
    public static bool DeleteHostObjectProperty(object obj, string name);
    public static String[] GetHostObjectPropertyNames(IntPtr pObject);
    public static String[] GetHostObjectPropertyNames(object obj);
    public static object GetHostObjectProperty(IntPtr pObject, int index);
    public static object GetHostObjectProperty(object obj, int index);
    public static void SetHostObjectProperty(IntPtr pObject, int index, object value);
    public static void SetHostObjectProperty(object obj, int index, object value);
    public static bool DeleteHostObjectProperty(IntPtr pObject, int index);
    public static bool DeleteHostObjectProperty(object obj, int index);
    public static Int32[] GetHostObjectPropertyIndices(IntPtr pObject);
    public static Int32[] GetHostObjectPropertyIndices(object obj);
    public static object InvokeHostObject(IntPtr pObject, bool asConstructor, Object[] args);
    public static object InvokeHostObject(object obj, bool asConstructor, Object[] args);
    public static object InvokeHostObjectMethod(IntPtr pObject, string name, Object[] args);
    public static object InvokeHostObjectMethod(object obj, string name, Object[] args);
    public static Invocability GetHostObjectInvocability(IntPtr pObject);
    public static Invocability GetHostObjectInvocability(object obj);
    public static object GetHostObjectEnumerator(IntPtr pObject);
    public static object GetHostObjectEnumerator(object obj);
    public static object GetHostObjectAsyncEnumerator(IntPtr pObject);
    public static object GetHostObjectAsyncEnumerator(object obj);
    public static object MarshalExceptionToScript(IntPtr pSource, Exception exception);
    public static object MarshalExceptionToScript(object source, Exception exception);
    public static Exception MarshalExceptionToHost(object exception);
    public static string LoadModule(IntPtr pSourceDocumentInfo, string specifier, UniqueDocumentInfo& documentInfo, Object& exports);
    public static IDictionary`2<string, object> CreateModuleContext(IntPtr pDocumentInfo);
}
public class Microsoft.ClearScript.V8.V8Runtime : object {
    private static IUniqueNameManager nameManager;
    private DocumentSettings documentSettings;
    private DocumentSettings defaultDocumentSettings;
    private V8IsolateProxy proxy;
    private InterlockedOneWayFlag disposedFlag;
    [CompilerGeneratedAttribute]
private static EventHandler`1<V8RuntimeDebuggerEventArgs> DebuggerConnected;
    [CompilerGeneratedAttribute]
private static EventHandler`1<V8RuntimeDebuggerEventArgs> DebuggerDisconnected;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FormatCode>k__BackingField;
    internal UniqueFileNameManager DocumentNameManager;
    internal HostItemCollateral HostItemCollateral;
    public string Name { get; }
    public bool FormatCode { get; public set; }
    public UIntPtr MaxHeapSize { get; public set; }
    public TimeSpan HeapSizeSampleInterval { get; public set; }
    public UIntPtr MaxStackUsage { get; public set; }
    public DocumentSettings DocumentSettings { get; public set; }
    public bool EnableInterruptPropagation { get; public set; }
    public V8RuntimeViolationPolicy HeapSizeViolationPolicy { get; public set; }
    public UInt32 CpuProfileSampleInterval { get; public set; }
    internal V8IsolateProxy IsolateProxy { get; }
    public V8Runtime(string name);
    public V8Runtime(V8RuntimeConstraints constraints);
    public V8Runtime(string name, V8RuntimeConstraints constraints);
    public V8Runtime(V8RuntimeFlags flags);
    public V8Runtime(V8RuntimeFlags flags, int debugPort);
    public V8Runtime(string name, V8RuntimeFlags flags);
    public V8Runtime(string name, V8RuntimeFlags flags, int debugPort);
    public V8Runtime(V8RuntimeConstraints constraints, V8RuntimeFlags flags);
    public V8Runtime(V8RuntimeConstraints constraints, V8RuntimeFlags flags, int debugPort);
    public V8Runtime(string name, V8RuntimeConstraints constraints, V8RuntimeFlags flags);
    public V8Runtime(string name, V8RuntimeConstraints constraints, V8RuntimeFlags flags, int debugPort);
    private static V8Runtime();
    [CompilerGeneratedAttribute]
public static void add_DebuggerConnected(EventHandler`1<V8RuntimeDebuggerEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_DebuggerConnected(EventHandler`1<V8RuntimeDebuggerEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_DebuggerDisconnected(EventHandler`1<V8RuntimeDebuggerEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_DebuggerDisconnected(EventHandler`1<V8RuntimeDebuggerEventArgs> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_FormatCode();
    [CompilerGeneratedAttribute]
public void set_FormatCode(bool value);
    public UIntPtr get_MaxHeapSize();
    public void set_MaxHeapSize(UIntPtr value);
    public TimeSpan get_HeapSizeSampleInterval();
    public void set_HeapSizeSampleInterval(TimeSpan value);
    public UIntPtr get_MaxStackUsage();
    public void set_MaxStackUsage(UIntPtr value);
    public DocumentSettings get_DocumentSettings();
    public void set_DocumentSettings(DocumentSettings value);
    public bool get_EnableInterruptPropagation();
    public void set_EnableInterruptPropagation(bool value);
    public V8RuntimeViolationPolicy get_HeapSizeViolationPolicy();
    public void set_HeapSizeViolationPolicy(V8RuntimeViolationPolicy value);
    public V8ScriptEngine CreateScriptEngine();
    public V8ScriptEngine CreateScriptEngine(string engineName);
    public V8ScriptEngine CreateScriptEngine(V8ScriptEngineFlags flags);
    public V8ScriptEngine CreateScriptEngine(V8ScriptEngineFlags flags, int debugPort);
    public V8ScriptEngine CreateScriptEngine(string engineName, V8ScriptEngineFlags flags);
    public V8ScriptEngine CreateScriptEngine(string engineName, V8ScriptEngineFlags flags, int debugPort);
    public V8Script Compile(string code);
    public V8Script Compile(string documentName, string code);
    public V8Script Compile(DocumentInfo documentInfo, string code);
    public V8Script Compile(string code, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public V8Script Compile(string documentName, string code, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public V8Script Compile(DocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public V8Script Compile(string code, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public V8Script Compile(string documentName, string code, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public V8Script Compile(DocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public V8Script Compile(string code, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public V8Script Compile(string documentName, string code, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public V8Script Compile(DocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public V8Script CompileDocument(string specifier);
    public V8Script CompileDocument(string specifier, DocumentCategory category);
    public V8Script CompileDocument(string specifier, DocumentCategory category, DocumentContextCallback contextCallback);
    public V8Script CompileDocument(string specifier, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public V8Script CompileDocument(string specifier, DocumentCategory category, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public V8Script CompileDocument(string specifier, DocumentCategory category, DocumentContextCallback contextCallback, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public V8Script CompileDocument(string specifier, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public V8Script CompileDocument(string specifier, DocumentCategory category, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public V8Script CompileDocument(string specifier, DocumentCategory category, DocumentContextCallback contextCallback, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public V8Script CompileDocument(string specifier, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public V8Script CompileDocument(string specifier, DocumentCategory category, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public V8Script CompileDocument(string specifier, DocumentCategory category, DocumentContextCallback contextCallback, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public V8RuntimeHeapInfo GetHeapInfo();
    public void CollectGarbage(bool exhaustive);
    public bool BeginCpuProfile(string name);
    public bool BeginCpuProfile(string name, V8CpuProfileFlags flags);
    public V8CpuProfile EndCpuProfile(string name);
    public void CollectCpuProfileSample();
    public UInt32 get_CpuProfileSampleInterval();
    public void set_CpuProfileSampleInterval(UInt32 value);
    public void WriteHeapSnapshot(Stream stream);
    internal static void OnDebuggerConnected(V8RuntimeDebuggerEventArgs args);
    internal static void OnDebuggerDisconnected(V8RuntimeDebuggerEventArgs args);
    internal V8IsolateProxy get_IsolateProxy();
    internal Statistics GetStatistics();
    private void VerifyNotDisposed();
    private V8Script CompileInternal(UniqueDocumentInfo documentInfo, string code);
    private V8Script CompileInternal(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes);
    private V8Script CompileInternal(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    private V8Script CompileInternal(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public sealed virtual void Dispose();
}
public class Microsoft.ClearScript.V8.V8RuntimeConstraints : object {
    [CompilerGeneratedAttribute]
private int <MaxNewSpaceSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxOldSpaceSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxExecutableSize>k__BackingField;
    [CompilerGeneratedAttribute]
private double <HeapExpansionMultiplier>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <MaxArrayBufferAllocation>k__BackingField;
    public int MaxNewSpaceSize { get; public set; }
    public int MaxOldSpaceSize { get; public set; }
    [ObsoleteAttribute("Executable code now occupies the old object heap. See MaxOldSpaceSize.")]
public int MaxExecutableSize { get; public set; }
    [ObsoleteAttribute("Use MaxNewSpaceSize instead.")]
public int MaxYoungSpaceSize { get; public set; }
    public double HeapExpansionMultiplier { get; public set; }
    public ulong MaxArrayBufferAllocation { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxNewSpaceSize();
    [CompilerGeneratedAttribute]
public void set_MaxNewSpaceSize(int value);
    [CompilerGeneratedAttribute]
public int get_MaxOldSpaceSize();
    [CompilerGeneratedAttribute]
public void set_MaxOldSpaceSize(int value);
    [CompilerGeneratedAttribute]
public int get_MaxExecutableSize();
    [CompilerGeneratedAttribute]
public void set_MaxExecutableSize(int value);
    public int get_MaxYoungSpaceSize();
    public void set_MaxYoungSpaceSize(int value);
    [CompilerGeneratedAttribute]
public double get_HeapExpansionMultiplier();
    [CompilerGeneratedAttribute]
public void set_HeapExpansionMultiplier(double value);
    [CompilerGeneratedAttribute]
public ulong get_MaxArrayBufferAllocation();
    [CompilerGeneratedAttribute]
public void set_MaxArrayBufferAllocation(ulong value);
}
public class Microsoft.ClearScript.V8.V8RuntimeDebuggerEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    public string Name { get; }
    public int Port { get; }
    internal V8RuntimeDebuggerEventArgs(string name, int port);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_Port();
}
[FlagsAttribute]
public enum Microsoft.ClearScript.V8.V8RuntimeFlags : Enum {
    public int value__;
    public static V8RuntimeFlags None;
    public static V8RuntimeFlags EnableDebugging;
    public static V8RuntimeFlags EnableRemoteDebugging;
    public static V8RuntimeFlags EnableDynamicModuleImports;
}
public class Microsoft.ClearScript.V8.V8RuntimeHeapInfo : object {
    [CompilerGeneratedAttribute]
private ulong <TotalHeapSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TotalHeapSizeExecutable>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TotalPhysicalSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TotalAvailableSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <UsedHeapSize>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <HeapSizeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <TotalExternalSize>k__BackingField;
    public ulong TotalHeapSize { get; internal set; }
    public ulong TotalHeapSizeExecutable { get; internal set; }
    public ulong TotalPhysicalSize { get; internal set; }
    public ulong TotalAvailableSize { get; internal set; }
    public ulong UsedHeapSize { get; internal set; }
    public ulong HeapSizeLimit { get; internal set; }
    public ulong TotalExternalSize { get; internal set; }
    [CompilerGeneratedAttribute]
public ulong get_TotalHeapSize();
    [CompilerGeneratedAttribute]
internal void set_TotalHeapSize(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_TotalHeapSizeExecutable();
    [CompilerGeneratedAttribute]
internal void set_TotalHeapSizeExecutable(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_TotalPhysicalSize();
    [CompilerGeneratedAttribute]
internal void set_TotalPhysicalSize(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_TotalAvailableSize();
    [CompilerGeneratedAttribute]
internal void set_TotalAvailableSize(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_UsedHeapSize();
    [CompilerGeneratedAttribute]
internal void set_UsedHeapSize(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_HeapSizeLimit();
    [CompilerGeneratedAttribute]
internal void set_HeapSizeLimit(ulong value);
    [CompilerGeneratedAttribute]
public ulong get_TotalExternalSize();
    [CompilerGeneratedAttribute]
internal void set_TotalExternalSize(ulong value);
}
public enum Microsoft.ClearScript.V8.V8RuntimeViolationPolicy : Enum {
    public int value__;
    public static V8RuntimeViolationPolicy Interrupt;
    public static V8RuntimeViolationPolicy Exception;
}
public abstract class Microsoft.ClearScript.V8.V8Script : object {
    [CompilerGeneratedAttribute]
private UniqueDocumentInfo <UniqueDocumentInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private UIntPtr <CodeDigest>k__BackingField;
    [ObsoleteAttribute("Use DocumentInfo instead.")]
public string Name { get; }
    public DocumentInfo DocumentInfo { get; }
    internal UniqueDocumentInfo UniqueDocumentInfo { get; }
    internal UIntPtr CodeDigest { get; }
    internal V8Script(UniqueDocumentInfo documentInfo, UIntPtr codeDigest);
    public string get_Name();
    public DocumentInfo get_DocumentInfo();
    [CompilerGeneratedAttribute]
internal UniqueDocumentInfo get_UniqueDocumentInfo();
    [CompilerGeneratedAttribute]
internal UIntPtr get_CodeDigest();
    public abstract virtual void Dispose();
}
public class Microsoft.ClearScript.V8.V8ScriptEngine : ScriptEngine {
    private static DocumentInfo initScriptInfo;
    private V8Runtime runtime;
    private bool usingPrivateRuntime;
    private V8ScriptEngineFlags engineFlags;
    private V8ContextProxy proxy;
    private V8ScriptItem script;
    private InterlockedOneWayFlag disposedFlag;
    private static int continuationInterval;
    private bool inContinuationTimerScope;
    private Nullable`1<bool> awaitDebuggerAndPause;
    private List`1<string> documentNames;
    private bool suppressInstanceMethodEnumeration;
    private bool suppressExtensionMethodEnumeration;
    private CommonJSManager commonJSManager;
    private JsonModuleManager jsonDocumentManager;
    [CompilerGeneratedAttribute]
private IUniqueNameManager <DocumentNameManager>k__BackingField;
    [CompilerGeneratedAttribute]
private HostItemCollateral <HostItemCollateral>k__BackingField;
    private static string initScript;
    public UIntPtr MaxRuntimeHeapSize { get; public set; }
    public TimeSpan RuntimeHeapSizeSampleInterval { get; public set; }
    public UIntPtr MaxRuntimeStackUsage { get; public set; }
    public bool SuppressInstanceMethodEnumeration { get; public set; }
    public bool SuppressExtensionMethodEnumeration { get; public set; }
    public bool EnableRuntimeInterruptPropagation { get; public set; }
    public V8RuntimeViolationPolicy RuntimeHeapSizeViolationPolicy { get; public set; }
    public UInt32 CpuProfileSampleInterval { get; public set; }
    internal CommonJSManager CommonJSManager { get; }
    internal JsonModuleManager JsonModuleManager { get; }
    public string FileNameExtension { get; }
    [DynamicAttribute]
public object Script { get; }
    public ScriptObject Global { get; }
    internal IUniqueNameManager DocumentNameManager { get; }
    internal bool EnumerateInstanceMethods { get; }
    internal bool EnumerateExtensionMethods { get; }
    internal bool UseCaseInsensitiveMemberBinding { get; }
    internal HostItemCollateral HostItemCollateral { get; }
    private UInt32 Microsoft.ClearScript.JavaScript.IJavaScriptEngine.BaseLanguageVersion { get; }
    private CommonJSManager Microsoft.ClearScript.JavaScript.IJavaScriptEngine.CommonJSManager { get; }
    private JsonModuleManager Microsoft.ClearScript.JavaScript.IJavaScriptEngine.JsonModuleManager { get; }
    public V8ScriptEngine(string name);
    public V8ScriptEngine(V8RuntimeConstraints constraints);
    public V8ScriptEngine(string name, V8RuntimeConstraints constraints);
    public V8ScriptEngine(V8ScriptEngineFlags flags);
    public V8ScriptEngine(V8ScriptEngineFlags flags, int debugPort);
    public V8ScriptEngine(string name, V8ScriptEngineFlags flags);
    public V8ScriptEngine(string name, V8ScriptEngineFlags flags, int debugPort);
    public V8ScriptEngine(V8RuntimeConstraints constraints, V8ScriptEngineFlags flags);
    public V8ScriptEngine(V8RuntimeConstraints constraints, V8ScriptEngineFlags flags, int debugPort);
    public V8ScriptEngine(string name, V8RuntimeConstraints constraints, V8ScriptEngineFlags flags);
    public V8ScriptEngine(string name, V8RuntimeConstraints constraints, V8ScriptEngineFlags flags, int debugPort);
    internal V8ScriptEngine(V8Runtime runtime, string name, V8RuntimeConstraints constraints, V8ScriptEngineFlags flags, int debugPort);
    private static V8ScriptEngine();
    public void CancelAwaitDebugger();
    public UIntPtr get_MaxRuntimeHeapSize();
    public void set_MaxRuntimeHeapSize(UIntPtr value);
    public TimeSpan get_RuntimeHeapSizeSampleInterval();
    public void set_RuntimeHeapSizeSampleInterval(TimeSpan value);
    public UIntPtr get_MaxRuntimeStackUsage();
    public void set_MaxRuntimeStackUsage(UIntPtr value);
    public bool get_SuppressInstanceMethodEnumeration();
    public void set_SuppressInstanceMethodEnumeration(bool value);
    public bool get_SuppressExtensionMethodEnumeration();
    public void set_SuppressExtensionMethodEnumeration(bool value);
    public bool get_EnableRuntimeInterruptPropagation();
    public void set_EnableRuntimeInterruptPropagation(bool value);
    public V8RuntimeViolationPolicy get_RuntimeHeapSizeViolationPolicy();
    public void set_RuntimeHeapSizeViolationPolicy(V8RuntimeViolationPolicy value);
    public V8Script Compile(string code);
    public V8Script Compile(string documentName, string code);
    public V8Script Compile(DocumentInfo documentInfo, string code);
    public V8Script Compile(string code, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public V8Script Compile(string documentName, string code, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public V8Script Compile(DocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public V8Script Compile(string code, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public V8Script Compile(string documentName, string code, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public V8Script Compile(DocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public V8Script Compile(string code, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public V8Script Compile(string documentName, string code, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public V8Script Compile(DocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public V8Script CompileDocument(string specifier);
    public V8Script CompileDocument(string specifier, DocumentCategory category);
    public V8Script CompileDocument(string specifier, DocumentCategory category, DocumentContextCallback contextCallback);
    public V8Script CompileDocument(string specifier, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public V8Script CompileDocument(string specifier, DocumentCategory category, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public V8Script CompileDocument(string specifier, DocumentCategory category, DocumentContextCallback contextCallback, V8CacheKind cacheKind, Byte[]& cacheBytes);
    public V8Script CompileDocument(string specifier, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public V8Script CompileDocument(string specifier, DocumentCategory category, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public V8Script CompileDocument(string specifier, DocumentCategory category, DocumentContextCallback contextCallback, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    public V8Script CompileDocument(string specifier, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public V8Script CompileDocument(string specifier, DocumentCategory category, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public V8Script CompileDocument(string specifier, DocumentCategory category, DocumentContextCallback contextCallback, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    public object Evaluate(V8Script script);
    public void Execute(V8Script script);
    public void CancelInterrupt();
    public V8RuntimeHeapInfo GetRuntimeHeapInfo();
    public bool BeginCpuProfile(string name);
    public bool BeginCpuProfile(string name, V8CpuProfileFlags flags);
    public V8CpuProfile EndCpuProfile(string name);
    public void CollectCpuProfileSample();
    public UInt32 get_CpuProfileSampleInterval();
    public void set_CpuProfileSampleInterval(UInt32 value);
    public void WriteRuntimeHeapSnapshot(Stream stream);
    internal Statistics GetRuntimeStatistics();
    internal Statistics GetStatistics();
    internal bool Equals(V8ScriptItem left, V8ScriptItem right);
    internal CommonJSManager get_CommonJSManager();
    internal JsonModuleManager get_JsonModuleManager();
    private object GetRootItem();
    private void VerifyNotDisposed();
    private object Execute(V8Script script, bool evaluate);
    private V8Script CompileInternal(UniqueDocumentInfo documentInfo, string code);
    private V8Script CompileInternal(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes);
    private V8Script CompileInternal(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[] cacheBytes, Boolean& cacheAccepted);
    private V8Script CompileInternal(UniqueDocumentInfo documentInfo, string code, V8CacheKind cacheKind, Byte[]& cacheBytes, V8CacheResult& cacheResult);
    private object ExecuteInternal(UniqueDocumentInfo documentInfo, string code, bool evaluate);
    private object ExecuteInternal(V8Script script, bool evaluate);
    private bool ShouldAwaitDebuggerAndPause(DocumentInfo documentInfo);
    private void OnContinuationTimer(Timer timer);
    private object CreatePromise(Action`2<object, object> executor);
    private void CompletePromise(Task`1<T> task, object resolve, object reject);
    private void CompletePromise(Task task, object resolve, object reject);
    private void TryConvertValueTaskToPromise(object obj, Action`1<object> setResult);
    public virtual string get_FileNameExtension();
    public virtual object get_Script();
    public virtual ScriptObject get_Global();
    public virtual string ExecuteCommand(string command);
    public virtual string GetStackTrace();
    public virtual void Interrupt();
    public virtual void CollectGarbage(bool exhaustive);
    [CompilerGeneratedAttribute]
internal virtual IUniqueNameManager get_DocumentNameManager();
    internal virtual bool get_EnumerateInstanceMethods();
    internal virtual bool get_EnumerateExtensionMethods();
    internal virtual bool get_UseCaseInsensitiveMemberBinding();
    internal virtual void AddHostItem(string itemName, HostItemFlags flags, object item);
    internal virtual object MarshalToScript(object obj, HostItemFlags flags);
    internal virtual object MarshalToHost(object obj, bool preserveHostTarget);
    internal virtual object Execute(UniqueDocumentInfo documentInfo, string code, bool evaluate);
    internal virtual object ExecuteRaw(UniqueDocumentInfo documentInfo, string code, bool evaluate);
    [CompilerGeneratedAttribute]
internal virtual HostItemCollateral get_HostItemCollateral();
    internal virtual void OnAccessSettingsChanged();
    internal virtual void ScriptInvoke(Action action);
    internal virtual T ScriptInvoke(Func`1<T> func);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override UInt32 Microsoft.ClearScript.JavaScript.IJavaScriptEngine.get_BaseLanguageVersion();
    private sealed virtual override CommonJSManager Microsoft.ClearScript.JavaScript.IJavaScriptEngine.get_CommonJSManager();
    private sealed virtual override JsonModuleManager Microsoft.ClearScript.JavaScript.IJavaScriptEngine.get_JsonModuleManager();
    private sealed virtual override object Microsoft.ClearScript.JavaScript.IJavaScriptEngine.CreatePromiseForTask(Task`1<T> task);
    private sealed virtual override object Microsoft.ClearScript.JavaScript.IJavaScriptEngine.CreatePromiseForTask(Task task);
    private sealed virtual override Task`1<object> Microsoft.ClearScript.JavaScript.IJavaScriptEngine.CreateTaskForPromise(ScriptObject promise);
    internal void EnableDocumentNameTracking();
    internal IEnumerable`1<string> GetDocumentNames();
    private void CompletePromise(ValueTask`1<T> valueTask, object resolve, object reject);
    private void CompletePromise(ValueTask valueTask, object resolve, object reject);
    private static void WaitForValueTask(ValueTask valueTask);
    private sealed virtual override object Microsoft.ClearScript.JavaScript.IJavaScriptEngine.CreatePromiseForValueTask(ValueTask`1<T> valueTask);
    private sealed virtual override object Microsoft.ClearScript.JavaScript.IJavaScriptEngine.CreatePromiseForValueTask(ValueTask valueTask);
    [CompilerGeneratedAttribute]
private Statistics <GetStatistics>b__87_0();
    [CompilerGeneratedAttribute]
private object <GetRootItem>b__93_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private string <>n__0(string command);
    [CompilerGeneratedAttribute]
private void <OnAccessSettingsChanged>b__135_0();
}
[FlagsAttribute]
public enum Microsoft.ClearScript.V8.V8ScriptEngineFlags : Enum {
    public int value__;
    public static V8ScriptEngineFlags None;
    public static V8ScriptEngineFlags EnableDebugging;
    public static V8ScriptEngineFlags DisableGlobalMembers;
    public static V8ScriptEngineFlags EnableRemoteDebugging;
    public static V8ScriptEngineFlags AwaitDebuggerAndPauseOnStart;
    public static V8ScriptEngineFlags EnableDateTimeConversion;
    public static V8ScriptEngineFlags EnableDynamicModuleImports;
    public static V8ScriptEngineFlags MarshalUnsafeLongAsBigInt;
    public static V8ScriptEngineFlags MarshalAllLongAsBigInt;
    public static V8ScriptEngineFlags EnableTaskPromiseConversion;
    public static V8ScriptEngineFlags EnableValueTaskPromiseConversion;
    public static V8ScriptEngineFlags UseCaseInsensitiveMemberBinding;
    public static V8ScriptEngineFlags EnableStringifyEnhancements;
    public static V8ScriptEngineFlags HideHostExceptions;
    public static V8ScriptEngineFlags UseSynchronizationContexts;
    public static V8ScriptEngineFlags AddPerformanceObject;
    public static V8ScriptEngineFlags SetTimerResolution;
}
internal abstract class Microsoft.ClearScript.V8.V8ScriptItem : ScriptItem {
    private V8ScriptEngine engine;
    private IV8Object target;
    private V8ScriptItem holder;
    private InterlockedOneWayFlag disposedFlag;
    public bool IsPromise { get; }
    public bool IsShared { get; }
    public ScriptEngine Engine { get; }
    public JavaScriptObjectKind Kind { get; }
    public JavaScriptObjectFlags Flags { get; }
    private V8ScriptItem(V8ScriptEngine engine, IV8Object target);
    public static object Wrap(V8ScriptEngine engine, object obj);
    public bool get_IsPromise();
    public bool get_IsShared();
    public object InvokeMethod(bool marshalResult, string name, Object[] args);
    private void VerifyNotDisposed();
    protected virtual bool TryBindAndInvoke(DynamicMetaObjectBinder binder, Object[] args, Object& result);
    public virtual String[] GetPropertyNames();
    public virtual Int32[] GetPropertyIndices();
    public virtual object GetProperty(string name, Object[] args);
    public virtual void SetProperty(string name, Object[] args);
    public virtual bool DeleteProperty(string name);
    public virtual object GetProperty(int index);
    public virtual void SetProperty(int index, object value);
    public virtual bool DeleteProperty(int index);
    public virtual object Invoke(bool asConstructor, Object[] args);
    public virtual object InvokeMethod(string name, Object[] args);
    public virtual ScriptEngine get_Engine();
    public virtual object Unwrap();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual JavaScriptObjectKind get_Kind();
    public sealed virtual JavaScriptObjectFlags get_Flags();
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
private String[] <GetPropertyNames>b__13_0();
    [CompilerGeneratedAttribute]
private Int32[] <GetPropertyIndices>b__14_0();
}
public static class Microsoft.ClearScript.V8.V8Settings : object {
    [CompilerGeneratedAttribute]
private static bool <EnableTopLevelAwait>k__BackingField;
    [CompilerGeneratedAttribute]
private static V8GlobalFlags <GlobalFlags>k__BackingField;
    [ObsoleteAttribute("V8 no longer supports Top-Level Await control. The feature is always enabled.")]
public static bool EnableTopLevelAwait { get; public set; }
    public static V8GlobalFlags GlobalFlags { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_EnableTopLevelAwait();
    [CompilerGeneratedAttribute]
public static void set_EnableTopLevelAwait(bool value);
    [CompilerGeneratedAttribute]
public static V8GlobalFlags get_GlobalFlags();
    [CompilerGeneratedAttribute]
public static void set_GlobalFlags(V8GlobalFlags value);
}
internal abstract class Microsoft.ClearScript.V8.V8TestProxy : V8Proxy {
    public static V8TestProxy Create();
    public abstract virtual UIntPtr GetNativeDigest(string value);
    public abstract virtual Statistics GetStatistics();
}
