[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicAvoidEmptyInterfacesFixer : AvoidEmptyInterfacesFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicCollectionsShouldImplementGenericInterfaceFixer : CollectionsShouldImplementGenericInterfaceFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicDeclareTypesInNamespacesFixer : DeclareTypesInNamespacesFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicDoNotHideBaseClassMethodsFixer : DoNotHideBaseClassMethodsFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicEnumsShouldHaveZeroValueFixer : EnumsShouldHaveZeroValueFixer {
    protected virtual SyntaxNode GetParentNodeOrSelfToFix(SyntaxNode nodeToFix);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicEnumStorageShouldBeInt32Fixer : EnumStorageShouldBeInt32Fixer {
    protected virtual SyntaxNode GetTargetNode(SyntaxNode node);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicIdentifiersShouldHaveCorrectPrefixFixer : IdentifiersShouldHaveCorrectPrefixFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicIdentifiersShouldHaveCorrectSuffixFixer : IdentifiersShouldHaveCorrectSuffixFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicIdentifiersShouldNotContainUnderscoresFixer : IdentifiersShouldNotContainUnderscoresFixer {
    protected virtual string GetNewName(string name);
    protected virtual SyntaxNode GetDeclarationNode(SyntaxNode node);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicIdentifiersShouldNotHaveIncorrectSuffixFixer : IdentifiersShouldNotHaveIncorrectSuffixFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicIdentifiersShouldNotMatchKeywordsFixer : IdentifiersShouldNotMatchKeywordsFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicImplementIDisposableCorrectlyFixer : ImplementIDisposableCorrectlyFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicImplementStandardExceptionConstructorsAnalyzer : ImplementStandardExceptionConstructorsAnalyzer {
    protected virtual string GetConstructorSignatureStringAndExceptionTypeParameter(ISymbol symbol);
    protected virtual string GetConstructorSignatureStringTypeParameter(ISymbol symbol);
    protected virtual string GetConstructorSignatureNoParameter(ISymbol symbol);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicMarkAssembliesWithAssemblyVersionFixer : MarkAssembliesWithAssemblyVersionFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicMarkAssembliesWithClsCompliantFixer : MarkAssembliesWithClsCompliantFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicMovePInvokesToNativeMethodsClassFixer : MovePInvokesToNativeMethodsClassFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicOverrideEqualsAndOperatorEqualsOnValueTypesFixer : OverrideEqualsAndOperatorEqualsOnValueTypesFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicOverrideEqualsOnOverloadingOperatorEqualsAnalyzer : DiagnosticAnalyzer {
    internal static string RuleId;
    internal static DiagnosticDescriptor Rule;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> _SupportedDiagnostics;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static BasicOverrideEqualsOnOverloadingOperatorEqualsAnalyzer();
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicOverrideEqualsOnOverloadingOperatorEqualsFixer : OverrideEqualsOnOverloadingOperatorEqualsFixer {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> _FixableDiagnosticIds;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicOverrideGetHashCodeOnOverridingEqualsAnalyzer : DiagnosticAnalyzer {
    internal static string RuleId;
    internal static DiagnosticDescriptor Rule;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<DiagnosticDescriptor> _SupportedDiagnostics;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static BasicOverrideGetHashCodeOnOverridingEqualsAnalyzer();
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicOverrideGetHashCodeOnOverridingEqualsFixer : OverrideGetHashCodeOnOverridingEqualsFixer {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<string> _FixableDiagnosticIds;
    public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicPassSystemUriObjectsInsteadOfStringsAnalyzer : PassSystemUriObjectsInsteadOfStringsAnalyzer {
    protected virtual SyntaxNode GetInvocationExpression(SyntaxNode invocationNode);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicPropertyNamesShouldNotMatchGetMethodsFixer : PropertyNamesShouldNotMatchGetMethodsFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicTypeNamesShouldNotMatchNamespacesFixer : TypeNamesShouldNotMatchNamespacesFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicUseEventsWhereAppropriateFixer : UseEventsWhereAppropriateFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicUsePreferredTermsAnalyzer : UsePreferredTermsAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicUsePreferredTermsFixer : UsePreferredTermsFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiDesignGuidelines.BasicUsePropertiesWhereAppropriateFixer : UsePropertiesWhereAppropriateFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiReview.BasicAvoidCallingProblematicMethodsAnalyzer : AvoidCallingProblematicMethodsAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.ApiReview.BasicAvoidCallingProblematicMethodsFixer : AvoidCallingProblematicMethodsFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.Documentation.BasicAvoidUsingCrefTagsWithAPrefixAnalyzer : AvoidUsingCrefTagsWithAPrefixAnalyzer {
    public virtual void Initialize(AnalysisContext context);
    private static void AnalyzeXmlAttribute(SyntaxNodeAnalysisContext context);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.Documentation.BasicAvoidUsingCrefTagsWithAPrefixFixer : AvoidUsingCrefTagsWithAPrefixFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.Maintainability.BasicAvoidDeadConditionalCode : AvoidDeadConditionalCode {
    protected virtual bool IsSwitchArmExpressionWithWhenClause(SyntaxNode node);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.Maintainability.BasicAvoidUninstantiatedInternalClasses : AvoidUninstantiatedInternalClassesAnalyzer {
    public virtual void RegisterLanguageSpecificChecks(CompilationStartAnalysisContext context, ConcurrentDictionary`2<INamedTypeSymbol, object> instantiatedTypes);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.Maintainability.BasicAvoidUninstantiatedInternalClassesFixer : AvoidUninstantiatedInternalClassesFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.Maintainability.BasicUseNameofInPlaceOfStringAnalyzer : UseNameofInPlaceOfStringAnalyzer {
    protected virtual bool IsApplicableToLanguageVersion(ParseOptions options);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.Maintainability.BasicVariableNamesShouldNotMatchFieldNamesAnalyzer : VariableNamesShouldNotMatchFieldNamesAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.Maintainability.BasicVariableNamesShouldNotMatchFieldNamesFixer : VariableNamesShouldNotMatchFieldNamesFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.CodeQuality.VisualBasic.Analyzers.QualityGuidelines.BasicAvoidMultipleEnumerationsAnalyzer : AvoidMultipleEnumerations {
    protected virtual bool IsExpressionOfForEachStatement(SyntaxNode syntax);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.QualityGuidelines.BasicDoNotInitializeUnnecessarilyAnalyzer : DoNotInitializeUnnecessarilyAnalyzer {
    protected virtual bool IsNullSuppressed(IOperation op);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.QualityGuidelines.BasicMarkMembersAsStaticFixer : MarkMembersAsStaticFixer {
    protected virtual IEnumerable`1<SyntaxNode> GetTypeArguments(SyntaxNode node);
    protected virtual SyntaxNode GetExpressionOfInvocation(SyntaxNode invocation);
    protected virtual SyntaxNode GetSyntaxNodeToReplace(IMemberReferenceOperation memberReference);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.QualityGuidelines.BasicPreferJaggedArraysOverMultidimensionalFixer : PreferJaggedArraysOverMultidimensionalFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.QualityGuidelines.BasicUseLiteralsWhereAppropriate : UseLiteralsWhereAppropriateAnalyzer {
    protected virtual bool IsConstantInterpolatedStringSupported(ParseOptions compilation);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeQuality.VisualBasic.Analyzers.QualityGuidelines.BasicUseLiteralsWhereAppropriateFixer : UseLiteralsWhereAppropriateFixer {
    protected virtual SyntaxNode GetFieldDeclaration(SyntaxNode syntaxNode);
    protected virtual bool IsStaticKeyword(SyntaxToken syntaxToken);
    protected virtual bool IsReadonlyKeyword(SyntaxToken syntaxToken);
    protected virtual SyntaxToken GetConstKeywordToken();
    protected virtual SyntaxTokenList GetModifiers(SyntaxNode fieldSyntax);
    protected virtual SyntaxNode WithModifiers(SyntaxNode fieldSyntax, SyntaxTokenList modifiers);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.InteropServices.BasicMarkBooleanPInvokeArgumentsWithMarshalAsAnalyzer : MarkBooleanPInvokeArgumentsWithMarshalAsAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.InteropServices.BasicMarkBooleanPInvokeArgumentsWithMarshalAsFixer : MarkBooleanPInvokeArgumentsWithMarshalAsFixer {
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.InteropServices.BasicSpecifyMarshalingForPInvokeStringArgumentsFixer : SpecifyMarshalingForPInvokeStringArgumentsFixer {
    protected virtual bool IsAttribute(SyntaxNode node);
    protected virtual SyntaxNode FindNamedArgument(IReadOnlyList`1<SyntaxNode> arguments, string argumentName);
    protected virtual bool IsDeclareStatement(SyntaxNode node);
    [AsyncStateMachineAttribute("Microsoft.NetCore.VisualBasic.Analyzers.InteropServices.BasicSpecifyMarshalingForPInvokeStringArgumentsFixer/VB$StateMachine_4_FixDeclareStatementAsync")]
protected virtual Task`1<Document> FixDeclareStatementAsync(Document document, SyntaxNode node, CancellationToken cancellationToken);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.InteropServices.BasicUseManagedEquivalentsOfWin32ApiAnalyzer : UseManagedEquivalentsOfWin32ApiAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.InteropServices.BasicUseManagedEquivalentsOfWin32ApiFixer : UseManagedEquivalentsOfWin32ApiFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicDoNotGuardDictionaryRemoveByContainsKeyFixer : DoNotGuardDictionaryRemoveByContainsKeyFixer {
    protected virtual bool SyntaxSupportedByFixer(SyntaxNode conditionalSyntax);
    protected virtual Document ReplaceConditionWithChild(Document document, SyntaxNode root, SyntaxNode conditionalOperationNode, SyntaxNode childOperationNode);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicDoNotGuardSetAddOrRemoveByContainsFixer : DoNotGuardSetAddOrRemoveByContainsFixer {
    protected virtual bool SyntaxSupportedByFixer(SyntaxNode conditionalSyntax, SyntaxNode childStatementSyntax);
    protected virtual Document ReplaceConditionWithChild(Document document, SyntaxNode root, SyntaxNode conditionalOperationNode, SyntaxNode childOperationNode);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicDoNotUseCountWhenAnyCanBeUsedFixer : DoNotUseCountWhenAnyCanBeUsedFixer {
    protected virtual bool TryGetFixer(SyntaxNode node, string operation, bool isAsync, SyntaxNode& expression, IEnumerable`1& arguments);
    private static bool TryGetExpressionAndInvocationArguments(ExpressionSyntax sourceExpression, bool isAsync, SyntaxNode& expression, IEnumerable`1& arguments);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicPreferDictionaryTryMethodsOverContainsKeyGuardFixer : PreferDictionaryTryMethodsOverContainsKeyGuardFixer {
    [AsyncStateMachineAttribute("Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicPreferDictionaryTryMethodsOverContainsKeyGuardFixer/VB$StateMachine_1_RegisterCodeFixesAsync")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicPreferDictionaryTryMethodsOverContainsKeyGuardFixer/VB$StateMachine_2_GetTryGetValueActionAsync")]
private static Task`1<CodeAction> GetTryGetValueActionAsync(SyntaxNode root, Diagnostic diagnostic, Document document, MemberAccessExpressionSyntax containsKeyAccess, InvocationExpressionSyntax containsKeyInvocation, CancellationToken cancellationToken);
    private static CodeAction GetTryAddAction(SyntaxNode root, Diagnostic diagnostic, Document document, MemberAccessExpressionSyntax containsKeyAccess, InvocationExpressionSyntax containsKeyInvocation);
    private static ITypeSymbol GetDictionaryValueType(SemanticModel semanticModel, SyntaxNode dictionary);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicPreferHashDataOverComputeHashFixer : PreferHashDataOverComputeHashFixer {
    private static BasicPreferHashDataOverComputeHashFixAllProvider s_fixAllProvider;
    private static BasicPreferHashDataOverComputeHashFixHelper s_helper;
    protected PreferHashDataOverComputeHashFixHelper Helper { get; }
    private static BasicPreferHashDataOverComputeHashFixer();
    public virtual FixAllProvider GetFixAllProvider();
    protected virtual PreferHashDataOverComputeHashFixHelper get_Helper();
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicPreferIsEmptyOverCountFixer : PreferIsEmptyOverCountFixer {
    protected virtual SyntaxNode GetObjectExpressionFromOperation(SyntaxNode node, string operationKey);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicPreferLengthCountIsEmptyOverAnyFixer : PreferLengthCountIsEmptyOverAnyFixer {
    protected virtual SyntaxNode ReplaceAnyWithIsEmpty(SyntaxNode root, SyntaxNode node);
    protected virtual SyntaxNode ReplaceAnyWithLength(SyntaxNode root, SyntaxNode node);
    protected virtual SyntaxNode ReplaceAnyWithCount(SyntaxNode root, SyntaxNode node);
    private static SyntaxNode ReplaceAnyWithPropertyCheck(SyntaxNode root, SyntaxNode node, string propertyName);
    private static BinaryExpressionSyntax GetBinaryExpression(ExpressionSyntax expression, string member, SyntaxKind expressionKind);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicRecommendCaseInsensitiveStringComparisonFixer : RecommendCaseInsensitiveStringComparisonFixer {
    protected virtual IEnumerable`1<SyntaxNode> GetNewArgumentsForInvocation(SyntaxGenerator generator, string caseChangingApproachValue, IInvocationOperation mainInvocationOperation, INamedTypeSymbol stringComparisonType, string leftOffendingMethod, string rightOffendingMethod, SyntaxNode& mainInvocationInstance);
    protected virtual IEnumerable`1<SyntaxNode> GetNewArgumentsForBinary(SyntaxGenerator generator, SyntaxNode rightNode, SyntaxNode typeMemberAccess);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicUsePropertyInsteadOfCountMethodWhenAvailableFixer : UsePropertyInsteadOfCountMethodWhenAvailableFixer {
    protected virtual bool TryGetExpression(SyntaxNode invocationNode, SyntaxNode& memberAccessNode, SyntaxNode& nameNode);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicUseStartsWithInsteadOfIndexOfComparisonWithZeroCodeFix : UseStartsWithInsteadOfIndexOfComparisonWithZeroCodeFix {
    protected virtual SyntaxNode AppendElasticMarker(SyntaxNode replacement);
    protected virtual SyntaxNode HandleCharStringComparisonOverload(SyntaxGenerator generator, SyntaxNode instance, SyntaxNode[] arguments, bool shouldNegate);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicUseStringContainsCharOverloadWithSingleCharactersFixer : UseStringContainsCharOverloadWithSingleCharactersCodeFix {
    protected virtual bool TryGetArgumentName(SyntaxNode violatingNode, String& argumentName);
    protected virtual bool TryGetLiteralValueFromNode(SyntaxNode violatingNode, Char& charLiteral);
    private static bool TryGetCharFromLiteralExpressionSyntax(LiteralExpressionSyntax sourceLiteralExpressionSyntax, Char& parsedCharLiteral);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicUseStringMethodCharOverloadWithSingleCharacters : UseStringMethodCharOverloadWithSingleCharacters {
    protected virtual SyntaxNode GetArgumentList(SyntaxNode argumentNode);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicUseStringMethodCharOverloadWithSingleCharactersFixer : UseStringMethodCharOverloadWithSingleCharactersFixer {
    protected virtual bool TryGetChar(SemanticModel model, SyntaxNode argumentListNode, Char& c);
    protected virtual CodeAction CreateCodeAction(Document document, SyntaxNode argumentListNode, char sourceCharLiteral);
    private static bool TryGetCharFromLiteralExpressionSyntax(LiteralExpressionSyntax sourceLiteralExpressionSyntax, Char& parsedCharLiteral);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Resources.BasicMarkAssembliesWithNeutralResourcesLanguageAnalyzer : MarkAssembliesWithNeutralResourcesLanguageAnalyzer {
    protected virtual void RegisterAttributeAnalyzer(CompilationStartAnalysisContext context, Action onResourceFound, INamedTypeSymbol generatedCode);
    private static bool CheckBasicAttribute(AttributeSyntax attribute);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicAvoidZeroLengthArrayAllocationsAnalyzer : AvoidZeroLengthArrayAllocationsAnalyzer {
    protected virtual bool IsAttributeSyntax(SyntaxNode node);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicCallGCSuppressFinalizeCorrectlyFixer : CallGCSuppressFinalizeCorrectlyFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicDataSetDataTableInIFormatterSerializableObjectGraphAnalyzer : DataSetDataTableInIFormatterSerializableObjectGraphAnalyzer {
    protected virtual string ToString(TypedConstant typedConstant);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicDataSetDataTableInSerializableObjectGraphAnalyzer : DataSetDataTableInSerializableObjectGraphAnalyzer {
    protected virtual string ToString(TypedConstant typedConstant);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicDataSetDataTableInSerializableTypeAnalyzer : DataSetDataTableInSerializableTypeAnalyzer {
    protected virtual string ToString(TypedConstant typedConstant);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicDataSetDataTableInWebSerializableObjectGraphAnalyzer : DataSetDataTableInWebSerializableObjectGraphAnalyzer {
    protected virtual string ToString(TypedConstant typedConstant);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicDetectPreviewFeatureAnalyzer : DetectPreviewFeatureAnalyzer {
    private static bool IsSyntaxToken(SyntaxToken identifier, ISymbol previewInterfaceSymbol);
    private static TypeSyntax GetElementTypeForNullableAndArrayTypeNodes(TypeSyntax parameterType);
    private bool IsIdentifierNameSyntax(TypeSyntax identifier, ISymbol previewInterfaceSymbol);
    private bool TryMatchGenericSyntaxNodeWithGivenSymbol(GenericNameSyntax genericName, ISymbol previewReturnTypeSymbol, SyntaxNode& syntaxNode);
    private bool TryGetPreviewInterfaceNodeForClassOrStructImplementingPreviewInterface(SyntaxList`1<InheritsStatementSyntax> baseListTypes, ISymbol previewInterfaceSymbol, SyntaxNode& previewInterfaceNode);
    private bool TryGetPreviewInterfaceNodeForClassOrStructImplementingPreviewInterface(TypeSyntax baseType, ISymbol previewInterfaceSymbol, SyntaxNode& previewInterfaceNode);
    private bool TryGetPreviewInterfaceNodeForClassOrStructImplementingPreviewInterface(SyntaxList`1<ImplementsStatementSyntax> baseListTypes, ISymbol previewInterfaceSymbol, SyntaxNode& previewInterfaceNode);
    protected virtual SyntaxNode GetPreviewInterfaceNodeForTypeImplementingPreviewInterface(ISymbol typeSymbol, ISymbol previewInterfaceSymbol);
    protected virtual SyntaxNode GetConstraintSyntaxNodeForTypeConstrainedByPreviewTypes(ISymbol typeOrMethodSymbol, ISymbol previewInterfaceConstraintSymbol);
    private SyntaxNode GetSyntaxNodeFromTypeConstraints(TypeParameterListSyntax typeParameters, ISymbol previewSymbol);
    private SyntaxNode GetTypeConstraints(ConstraintSyntax constraint, ISymbol previewSymbol);
    private SyntaxNode TryGetNodeFromAsClauseForMethodOrProperty(AsClauseSyntax asClause, ISymbol previewReturnTypeSymbol);
    protected virtual SyntaxNode GetPreviewReturnTypeSyntaxNodeForMethodOrProperty(ISymbol methodOrPropertySymbol, ISymbol previewReturnTypeSymbol);
    private static SyntaxNode GetSyntaxNodeFromImplementsClause(ImplementsClauseSyntax implementsClause, ISymbol previewSymbol);
    protected virtual SyntaxNode GetPreviewImplementsClauseSyntaxNodeForMethodOrProperty(ISymbol methodOrPropertySymbol, ISymbol previewSymbol);
    protected virtual SyntaxNode GetPreviewParameterSyntaxNodeForMethod(IMethodSymbol methodSymbol, ISymbol parameterSymbol);
    protected virtual SyntaxNode GetPreviewSyntaxNodeForFieldsOrEvents(ISymbol fieldOrEventSymbol, ISymbol previewSymbol);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicDisposableTypesShouldDeclareFinalizerFixer : DisposableTypesShouldDeclareFinalizerFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicDisposeMethodsShouldCallBaseClassDisposeFixer : DisposeMethodsShouldCallBaseClassDisposeFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicDoNotUseEnumerableMethodsOnIndexableCollectionsInsteadUseTheCollectionDirectlyFixer : DoNotUseEnumerableMethodsOnIndexableCollectionsInsteadUseTheCollectionDirectlyFixer {
    private protected virtual SyntaxNode AdjustSyntaxNode(SyntaxNode syntaxNode);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicDoNotUseTimersThatPreventPowerStateChangesAnalyzer : DoNotUseTimersThatPreventPowerStateChangesAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicDoNotUseTimersThatPreventPowerStateChangesFixer : DoNotUseTimersThatPreventPowerStateChangesFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicForwardCancellationTokenToInvocationsAnalyzer : ForwardCancellationTokenToInvocationsAnalyzer {
    protected virtual SyntaxNode GetInvocationMethodNameNode(SyntaxNode invocationNode);
    protected virtual bool ArgumentsImplicitOrNamed(INamedTypeSymbol cancellationTokenType, ImmutableArray`1<IArgumentOperation> arguments);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicForwardCancellationTokenToInvocationsFixer : ForwardCancellationTokenToInvocationsFixer`1<ArgumentSyntax> {
    protected virtual bool TryGetInvocation(SemanticModel model, SyntaxNode node, CancellationToken ct, IInvocationOperation& invocation);
    protected virtual bool IsArgumentNamed(IArgumentOperation argumentOperation);
    protected virtual SyntaxNode GetConditionalOperationInvocationExpression(SyntaxNode invocationNode);
    protected virtual bool TryGetExpressionAndArguments(SyntaxNode invocationNode, SyntaxNode& expression, ImmutableArray`1& arguments);
    protected virtual SyntaxNode GetTypeSyntaxForArray(IArrayTypeSymbol type);
    protected virtual IEnumerable`1<SyntaxNode> GetExpressions(ImmutableArray`1<ArgumentSyntax> newArguments);
    protected virtual SyntaxNode GetArrayCreationExpression(SyntaxGenerator generator, SyntaxNode typeSyntax, IEnumerable`1<SyntaxNode> expressions);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicMarkAllNonSerializableFieldsFixer : MarkAllNonSerializableFieldsFixer {
    protected virtual SyntaxNode GetFieldDeclarationNode(SyntaxNode node);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicNormalizeStringsToUppercaseFixer : NormalizeStringsToUppercaseFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicPreferAsSpanOverSubstringFixer : PreferAsSpanOverSubstringFixer {
    private protected virtual void ReplaceNonConditionalInvocationMethodName(SyntaxEditor editor, SyntaxNode memberInvocation, string newName);
    private protected virtual void ReplaceNamedArgumentName(SyntaxEditor editor, SyntaxNode invocation, string oldArgumentName, string newArgumentName);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicPreferDictionaryContainsMethods : PreferDictionaryContainsMethods {
    private protected virtual bool TryGetPropertyReferenceOperation(IInvocationOperation containsInvocation, IPropertySymbol& propertySymbol);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicPreferDictionaryContainsMethodsFixer : PreferDictionaryContainsMethodsFixer {
    [AsyncStateMachineAttribute("Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicPreferDictionaryContainsMethodsFixer/VB$StateMachine_1_RegisterCodeFixesAsync")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicPreferStreamAsyncMemoryOverloadsFixer : PreferStreamAsyncMemoryOverloadsFixer {
    protected virtual SyntaxNode GetArgumentByPositionOrName(IInvocationOperation invocation, int index, string name, Boolean& isNamed);
    protected virtual bool IsPassingZeroAndBufferLength(SemanticModel model, SyntaxNode bufferValueNode, SyntaxNode offsetValueNode, SyntaxNode countValueNode);
    protected virtual SyntaxNode GetNodeWithNullability(IInvocationOperation invocation);
    protected virtual SyntaxNode GetNamedArgument(SyntaxGenerator generator, SyntaxNode node, bool isNamed, string newName);
    protected virtual SyntaxNode GetNamedMemberInvocation(SyntaxGenerator generator, SyntaxNode node, string memberName);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicProvideDeserializationMethodsForOptionalFieldsAnalyzer : ProvideDeserializationMethodsForOptionalFieldsAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicProvideDeserializationMethodsForOptionalFieldsFixer : ProvideDeserializationMethodsForOptionalFieldsFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicSpecifyCultureForToLowerAndToUpperAnalyzer : SpecifyCultureForToLowerAndToUpperAnalyzer {
    protected virtual Location GetMethodNameLocation(SyntaxNode node);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicSpecifyCultureForToLowerAndToUpperFixer : SpecifyCultureForToLowerAndToUpperFixerBase {
    protected virtual bool ShouldFix(SyntaxNode node);
    [AsyncStateMachineAttribute("Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicSpecifyCultureForToLowerAndToUpperFixer/VB$StateMachine_2_SpecifyCurrentCultureAsync")]
protected virtual Task`1<Document> SpecifyCurrentCultureAsync(Document document, SyntaxGenerator generator, SyntaxNode root, SyntaxNode node, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicSpecifyCultureForToLowerAndToUpperFixer/VB$StateMachine_3_SpecifyCurrentCultureWhenTheresNoArgumentListAsync")]
private static Task`1<Document> SpecifyCurrentCultureWhenTheresNoArgumentListAsync(Document document, SyntaxGenerator generator, SyntaxNode root, MemberAccessExpressionSyntax memberAccess, SyntaxNode nodeToReplace, CancellationToken cancellationToken);
    protected virtual Task`1<Document> UseInvariantVersionAsync(Document document, SyntaxGenerator generator, SyntaxNode root, SyntaxNode node);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicSpecifyCultureInfoFixer : SpecifyCultureInfoFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicSpecifyIFormatProviderFixer : SpecifyIFormatProviderFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicSpecifyStringComparisonFixer : SpecifyStringComparisonFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicTestForEmptyStringsUsingStringLengthFixer : TestForEmptyStringsUsingStringLengthFixer {
    protected virtual SyntaxNode GetExpression(SyntaxNode node);
    protected virtual bool IsEqualsOperator(SyntaxNode node);
    protected virtual bool IsNotEqualsOperator(SyntaxNode node);
    protected virtual SyntaxNode GetLeftOperand(SyntaxNode binaryExpressionSyntax);
    protected virtual SyntaxNode GetRightOperand(SyntaxNode binaryExpressionSyntax);
    protected virtual bool IsFixableBinaryExpression(SyntaxNode node);
    protected virtual bool IsFixableInvocationExpression(SyntaxNode node);
    protected virtual SyntaxNode GetInvocationTarget(SyntaxNode node);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicTestForNaNCorrectlyFixer : TestForNaNCorrectlyFixer {
    protected virtual SyntaxNode GetBinaryExpression(SyntaxNode node);
    protected virtual bool IsEqualsOperator(SyntaxNode node);
    protected virtual bool IsNotEqualsOperator(SyntaxNode node);
    protected virtual SyntaxNode GetLeftOperand(SyntaxNode binaryExpressionSyntax);
    protected virtual SyntaxNode GetRightOperand(SyntaxNode binaryExpressionSyntax);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicUseOrdinalStringComparisonAnalyzer : UseOrdinalStringComparisonAnalyzer {
    protected virtual Location GetMethodNameLocation(SyntaxNode invocationNode);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicUseOrdinalStringComparisonFixer : UseOrdinalStringComparisonFixerBase {
    protected virtual bool IsInArgumentContext(SyntaxNode node);
    protected virtual Task`1<Document> FixArgumentAsync(Document document, SyntaxGenerator generator, SyntaxNode root, SyntaxNode argument);
    protected virtual bool IsInIdentifierNameContext(SyntaxNode node);
    [AsyncStateMachineAttribute("Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicUseOrdinalStringComparisonFixer/VB$StateMachine_4_FixIdentifierNameAsync")]
protected virtual Task`1<Document> FixIdentifierNameAsync(Document document, SyntaxGenerator generator, SyntaxNode root, SyntaxNode identifier, CancellationToken cancellationToken);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicUseSpanBasedStringConcat : UseSpanBasedStringConcat {
    private protected virtual bool TryGetTopMostConcatOperation(IBinaryOperation binaryOperation, IBinaryOperation& rootBinaryOperation);
    private protected virtual IOperation WalkDownBuiltInImplicitConversionOnConcatOperand(IOperation operand);
    private static bool IsStringConcatOperation(IBinaryOperation operation);
    private static IOperation WalkUpImplicitConversionToObject(IOperation operation);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicUseSpanBasedStringConcatFixer : UseSpanBasedStringConcatFixer {
    private protected virtual SyntaxNode ReplaceInvocationMethodName(SyntaxGenerator generator, SyntaxNode invocationSyntax, string newName);
    private protected virtual IOperation WalkDownBuiltInImplicitConversionOnConcatOperand(IOperation operand);
    private protected virtual bool IsNamedArgument(IArgumentOperation argumentOperation);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Tasks.BasicDoNotCreateTasksWithoutPassingATaskSchedulerFixer : DoNotCreateTasksWithoutPassingATaskSchedulerFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetFramework.VisualBasic.Analyzers.BasicAvoidDuplicateAcceleratorsAnalyzer : AvoidDuplicateAcceleratorsAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetFramework.VisualBasic.Analyzers.BasicAvoidDuplicateAcceleratorsFixer : AvoidDuplicateAcceleratorsFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetFramework.VisualBasic.Analyzers.BasicCallBaseClassMethodsOnISerializableTypesAnalyzer : CallBaseClassMethodsOnISerializableTypesAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetFramework.VisualBasic.Analyzers.BasicCallBaseClassMethodsOnISerializableTypesFixer : CallBaseClassMethodsOnISerializableTypesFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetFramework.VisualBasic.Analyzers.BasicDoNotMarkServicedComponentsWithWebMethodAnalyzer : DoNotMarkServicedComponentsWithWebMethodAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetFramework.VisualBasic.Analyzers.BasicDoNotMarkServicedComponentsWithWebMethodFixer : DoNotMarkServicedComponentsWithWebMethodFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetFramework.VisualBasic.Analyzers.BasicSetLocaleForDataTypesAnalyzer : SetLocaleForDataTypesAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetFramework.VisualBasic.Analyzers.BasicSetLocaleForDataTypesFixer : SetLocaleForDataTypesFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetFramework.VisualBasic.Analyzers.BasicTypesShouldNotExtendCertainBaseTypesFixer : TypesShouldNotExtendCertainBaseTypesFixer {
}
[Embedded]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.Conversions : object {
    private static object GetEnumValue(object Value);
    public static string ToString(int Value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 Value);
    public static string ToString(long Value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong Value);
    public static string ToString(float Value);
    public static string ToString(double Value);
    public static string ToString(DateTime Value);
    public static string ToString(decimal Value);
    public static string ToString(object Value);
    public static string ToString(bool Value);
    public static string ToString(byte Value);
    public static string ToString(char Value);
    internal static CultureInfo GetCultureInfo();
}
[Embedded]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.EmbeddedOperators : object {
    public static int CompareString(string Left, string Right, bool TextCompare);
}
[Embedded]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.ProjectData : object {
    public static void SetProjectError(Exception ex);
    public static void ClearProjectError();
}
[Embedded]
[AttributeUsageAttribute("7")]
[EditorBrowsableAttribute("1")]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualBasic.Embedded : Attribute {
}
[CompilerGeneratedAttribute]
[DebuggerDisplayAttribute("<generated method>")]
internal class VB$AnonymousDelegate_0`2 : MulticastDelegate {
    public VB$AnonymousDelegate_0`2(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(TArg0 ct, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual TResult EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual TResult Invoke(TArg0 ct);
}
