[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Analyzer.Utilities.DocumentBasedFixAllProvider : FixAllProvider {
    protected string CodeActionTitle { get; }
    protected abstract virtual string get_CodeActionTitle();
    public virtual Task`1<CodeAction> GetFixAsync(FixAllContext fixAllContext);
    protected abstract virtual Task`1<SyntaxNode> FixAllInDocumentAsync(FixAllContext fixAllContext, Document document, ImmutableArray`1<Diagnostic> diagnostics);
    [AsyncStateMachineAttribute("Analyzer.Utilities.DocumentBasedFixAllProvider/<GetDocumentFixesAsync>d__4")]
private Task`1<Document> GetDocumentFixesAsync(FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("Analyzer.Utilities.DocumentBasedFixAllProvider/<GetSolutionFixesAsync>d__5")]
private Task`1<Solution> GetSolutionFixesAsync(FixAllContext fixAllContext, ImmutableArray`1<Document> documents);
    private Task`1<Solution> GetProjectFixesAsync(FixAllContext fixAllContext, Project project);
    private Task`1<Solution> GetSolutionFixesAsync(FixAllContext fixAllContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Analyzer.Utilities.FixAllContextHelper : object {
    [AsyncStateMachineAttribute("Analyzer.Utilities.FixAllContextHelper/<GetDocumentDiagnosticsToFixAsync>d__0")]
public static Task`1<ImmutableDictionary`2<Document, ImmutableArray`1<Diagnostic>>> GetDocumentDiagnosticsToFixAsync(FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("Analyzer.Utilities.FixAllContextHelper/<GetProjectDiagnosticsToFixAsync>d__1")]
public static Task`1<ImmutableDictionary`2<Project, ImmutableArray`1<Diagnostic>>> GetProjectDiagnosticsToFixAsync(FixAllContext fixAllContext);
    [AsyncStateMachineAttribute("Analyzer.Utilities.FixAllContextHelper/<GetAllDiagnosticsAsync>d__2")]
private static Task`1<ImmutableArray`1<Diagnostic>> GetAllDiagnosticsAsync(FixAllContext fixAllContext, Project project);
    [AsyncStateMachineAttribute("Analyzer.Utilities.FixAllContextHelper/<GetDocumentDiagnosticsToFixAsync>d__3")]
private static Task`1<ImmutableDictionary`2<Document, ImmutableArray`1<Diagnostic>>> GetDocumentDiagnosticsToFixAsync(ImmutableArray`1<Diagnostic> diagnostics, ImmutableArray`1<Project> projects, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Analyzer.Utilities.FixAllContextHelper/<GetTreeToDocumentMapAsync>d__4")]
private static Task`1<ImmutableDictionary`2<SyntaxTree, Document>> GetTreeToDocumentMapAsync(ImmutableArray`1<Project> projects, CancellationToken cancellationToken);
    private static Document GetReportedDocument(Diagnostic diagnostic, ImmutableDictionary`2<SyntaxTree, Document> treeToDocumentsMap);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.SyntaxGeneratorExtensions : object {
    private static string LeftIdentifierName;
    private static string RightIdentifierName;
    private static string ReferenceEqualsMethodName;
    private static string EqualsMethodName;
    private static string CompareToMethodName;
    private static string SystemNotImplementedExceptionTypeName;
    [ExtensionAttribute]
public static SyntaxNode DefaultOperatorEqualityDeclaration(SyntaxGenerator generator, INamedTypeSymbol containingType);
    [ExtensionAttribute]
public static SyntaxNode TypeExpressionForStaticMemberAccess(SyntaxGenerator generator, INamedTypeSymbol typeSymbol);
    [ExtensionAttribute]
public static SyntaxNode DefaultOperatorInequalityDeclaration(SyntaxGenerator generator, INamedTypeSymbol containingType);
    [ExtensionAttribute]
public static SyntaxNode DefaultOperatorLessThanDeclaration(SyntaxGenerator generator, INamedTypeSymbol containingType);
    [ExtensionAttribute]
public static SyntaxNode DefaultOperatorLessThanOrEqualDeclaration(SyntaxGenerator generator, INamedTypeSymbol containingType);
    [ExtensionAttribute]
public static SyntaxNode DefaultOperatorGreaterThanDeclaration(SyntaxGenerator generator, INamedTypeSymbol containingType);
    [ExtensionAttribute]
public static SyntaxNode DefaultOperatorGreaterThanOrEqualDeclaration(SyntaxGenerator generator, INamedTypeSymbol containingType);
    [ExtensionAttribute]
private static SyntaxNode ComparisonOperatorDeclaration(SyntaxGenerator generator, OperatorKind operatorKind, INamedTypeSymbol containingType, SyntaxNode[] statements);
    [ExtensionAttribute]
public static SyntaxNode DefaultEqualsOverrideDeclaration(SyntaxGenerator generator, Compilation compilation, INamedTypeSymbol containingType);
    [ExtensionAttribute]
public static SyntaxNode DefaultGetHashCodeOverrideDeclaration(SyntaxGenerator generator, Compilation compilation);
    [IteratorStateMachineAttribute("Analyzer.Utilities.SyntaxGeneratorExtensions/<DefaultMethodBody>d__16")]
[ExtensionAttribute]
public static IEnumerable`1<SyntaxNode> DefaultMethodBody(SyntaxGenerator generator, Compilation compilation);
    [ExtensionAttribute]
public static SyntaxNode DefaultMethodStatement(SyntaxGenerator generator, Compilation compilation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static SyntaxNode TryGetContainingDeclaration(SyntaxGenerator generator, SyntaxNode node, DeclarationKind kind);
    [CompilerGeneratedAttribute]
internal static SyntaxNode <TypeExpressionForStaticMemberAccess>g__QualifiedNameToMemberAccess|7_0(int qualifiedNameSyntaxKind, int memberAccessExpressionSyntaxKind, SyntaxNode expression, SyntaxGenerator generator);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.SyntaxNodeExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Optional`1<SyntaxAnnotation> s_addImportsAnnotation;
    private static SyntaxAnnotation AddImportsAnnotation { get; }
    private static SyntaxAnnotation get_AddImportsAnnotation();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static SyntaxNode WithAddImportsAnnotation(SyntaxNode syntaxNode);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeAnalysis.PublicApiAnalyzers.AnnotatePublicApiFix : CodeFixProvider {
    private static char ObliviousMarker;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    private static SourceText AnnotateSymbolNamesInSourceText(SourceText sourceText, Dictionary`2<string, string> changes);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.PublicApiAnalyzers.AnnotatePublicApiFix/<<RegisterCodeFixesAsync>g__GetFix|5_0>d")]
[CompilerGeneratedAttribute]
internal static Task`1<Solution> <RegisterCodeFixesAsync>g__GetFix|5_0(TextDocument publicSurfaceAreaDocument, string oldSymbolName, string newSymbolName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeAnalysis.PublicApiAnalyzers.DeclarePublicApiFix : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.PublicApiAnalyzers.DeclarePublicApiFix/<GetUnshippedPublicApiFiles>d__5")]
private static IEnumerable`1<TextDocument> GetUnshippedPublicApiFiles(Project project, bool isPublic);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.PublicApiAnalyzers.DeclarePublicApiFix/<GetFixAsync>d__6")]
private static Task`1<Solution> GetFixAsync(TextDocument surfaceAreaDocument, bool isPublic, Project project, string newSymbolName, ImmutableHashSet`1<string> siblingSymbolNamesToRemove, CancellationToken cancellationToken);
    private static Solution AddPublicApiFiles(Project project, SourceText unshippedText, bool isPublic);
    private static SourceText AddSymbolNamesToSourceText(SourceText sourceText, IEnumerable`1<string> newSymbolNames);
    private static SourceText RemoveSymbolNamesFromSourceText(SourceText sourceText, ImmutableHashSet`1<string> linesToRemove);
    internal static List`1<string> GetLinesFromSourceText(SourceText sourceText);
    [CompilerGeneratedAttribute]
internal static Project <AddPublicApiFiles>g__AddAdditionalDocument|7_0(Project project, string name, SourceText text);
    [CompilerGeneratedAttribute]
internal static void <AddSymbolNamesToSourceText>g__insertInList|8_0(List`1<string> list, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.CodeAnalysis.PublicApiAnalyzers.NullableEnablePublicApiFix : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <FixableDiagnosticIds>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.PublicApiAnalyzers.NullableEnablePublicApiFix/<GetFixAsync>d__5")]
private static Task`1<Solution> GetFixAsync(TextDocument surfaceAreaDocument, CancellationToken cancellationToken);
    private static SourceText AddNullableEnable(SourceText sourceText);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.PublicApiAnalyzers.PublicApiFixHelpers : object {
    private static Char[] SemicolonSplit;
    private static string ApiDocEquivalenceKeyPrefix;
    private static PublicApiFixHelpers();
    [ExtensionAttribute]
internal static void Deconstruct(KeyValuePair`2<TKey, TValue> kv, TKey& key, TValue& value);
    [ExtensionAttribute]
internal static string CreateEquivalenceKey(DocumentId doc, bool isPublic);
    [ExtensionAttribute]
internal static DocumentId CreateDocIdFromEquivalenceKey(FixAllContext fixAllContext, Boolean& isPublic);
    [ExtensionAttribute]
internal static TextDocument GetPublicApiDocument(Project project, string name);
    [ExtensionAttribute]
internal static TextDocument GetShippedDocument(Project project, bool isPublic);
    [ExtensionAttribute]
internal static string GetEndOfFileText(SourceText sourceText, string endOfLine);
    [ExtensionAttribute]
internal static string GetEndOfLine(SourceText sourceText);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
