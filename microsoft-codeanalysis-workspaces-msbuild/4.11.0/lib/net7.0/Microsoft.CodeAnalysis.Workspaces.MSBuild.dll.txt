[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.CodeAnalysis.GlobalAssemblyCacheLocation : object {
    public static ImmutableArray`1<string> s_rootLocations;
    public static ImmutableArray`1<string> RootLocations { get; }
    private static int GetCachePath(ASM_CACHE id, Byte* path, Int32& length);
    public static ImmutableArray`1<string> get_RootLocations();
    private static string GetLocation(ASM_CACHE gacId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.CodeAnalysis.Host.Mef.MSBuildMefHostServices : object {
    public static MefHostServices DefaultServices { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ImmutableArray`1<Assembly> DefaultAssemblies { get; }
    public static MefHostServices get_DefaultServices();
    public static ImmutableArray`1<Assembly> get_DefaultAssemblies();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.BuildHostProcessManager : object {
    private ImmutableDictionary`2<string, string> _globalMSBuildProperties;
    [NullableAttribute("2")]
private ILoggerFactory _loggerFactory;
    [NullableAttribute("2")]
private ILogger _logger;
    [NullableAttribute("2")]
private string _binaryLogPath;
    private SemaphoreSlim _gate;
    private Dictionary`2<BuildHostProcessKind, BuildHostProcess> _processes;
    private static XmlReaderSettings s_xmlSettings;
    [NullableContextAttribute("2")]
public BuildHostProcessManager(ImmutableDictionary`2<string, string> globalMSBuildProperties, string binaryLogPath, ILoggerFactory loggerFactory);
    private static BuildHostProcessManager();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.BuildHostProcessManager/<GetBuildHostWithFallbackAsync>d__7")]
public Task`1<RemoteBuildHost> GetBuildHostWithFallbackAsync(string projectFilePath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.BuildHostProcessManager/<GetBuildHostWithFallbackAsync>d__8")]
public Task`1<ValueTuple`2<RemoteBuildHost, BuildHostProcessKind>> GetBuildHostWithFallbackAsync(BuildHostProcessKind buildHostKind, string projectOrSolutionFilePath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.BuildHostProcessManager/<GetBuildHostAsync>d__9")]
public Task`1<RemoteBuildHost> GetBuildHostAsync(BuildHostProcessKind buildHostKind, CancellationToken cancellationToken);
    private void BuildHostProcess_Disconnected(object sender, EventArgs e);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.BuildHostProcessManager/<DisposeAsync>d__11")]
public sealed virtual ValueTask DisposeAsync();
    private ProcessStartInfo CreateDotNetCoreBuildHostStartInfo();
    internal static string GetNetCoreBuildHostPath();
    private ProcessStartInfo CreateDotNetFrameworkBuildHostStartInfo();
    private ProcessStartInfo CreateMonoBuildHostStartInfo();
    private static string GetDotNetFrameworkBuildHostPath();
    private static void AssertBuildHostExists(string buildHostPath);
    private void AppendBuildHostCommandLineArgumentsConfigureProcess(ProcessStartInfo processStartInfo);
    private static void AddArgument(ProcessStartInfo processStartInfo, string argument);
    public static BuildHostProcessKind GetKindForProject(string projectFilePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
internal class Microsoft.CodeAnalysis.MSBuild.DiagnosticLogItem : object {
    [CompilerGeneratedAttribute]
private DiagnosticLogItemKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    [DataMemberAttribute]
public DiagnosticLogItemKind Kind { get; }
    [DataMemberAttribute]
public string Message { get; }
    [DataMemberAttribute]
public string ProjectFilePath { get; }
    public DiagnosticLogItem(DiagnosticLogItemKind kind, string message, string projectFilePath);
    [CompilerGeneratedAttribute]
public DiagnosticLogItemKind get_Kind();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_ProjectFilePath();
    public virtual string ToString();
}
internal enum Microsoft.CodeAnalysis.MSBuild.DiagnosticLogItemKind : Enum {
    public int value__;
    public static DiagnosticLogItemKind Error;
    public static DiagnosticLogItemKind Warning;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.DiagnosticReporter : object {
    internal ImmutableList`1<WorkspaceDiagnostic> Diagnostics;
    private Workspace _workspace;
    public DiagnosticReporter(Workspace workspace);
    public void Report(DiagnosticReportingMode mode, string message, Func`2<string, Exception> createException);
    internal void AddDiagnostic(WorkspaceDiagnostic diagnostic);
    public void Report(WorkspaceDiagnostic diagnostic);
    public void Report(IEnumerable`1<DiagnosticLogItem> log);
    private static string GetMSBuildFailedMessage(string projectFilePath, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.DiagnosticReporterLoggerProvider : object {
    private DiagnosticReporter _reporter;
    private DiagnosticReporterLoggerProvider(DiagnosticReporter reporter);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
    public static ILoggerFactory CreateLoggerFactoryForDiagnosticReporter(DiagnosticReporter reporter);
}
internal enum Microsoft.CodeAnalysis.MSBuild.DiagnosticReportingMode : Enum {
    public int value__;
    public static DiagnosticReportingMode Throw;
    public static DiagnosticReportingMode Log;
    public static DiagnosticReportingMode Ignore;
}
[IsReadOnlyAttribute]
internal class Microsoft.CodeAnalysis.MSBuild.DiagnosticReportingOptions : ValueType {
    [CompilerGeneratedAttribute]
private DiagnosticReportingMode <OnPathFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticReportingMode <OnLoaderFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticReportingOptions <IgnoreAll>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticReportingOptions <ThrowForAll>k__BackingField;
    public DiagnosticReportingMode OnPathFailure { get; }
    public DiagnosticReportingMode OnLoaderFailure { get; }
    public static DiagnosticReportingOptions IgnoreAll { get; }
    public static DiagnosticReportingOptions ThrowForAll { get; }
    public DiagnosticReportingOptions(DiagnosticReportingMode onPathFailure, DiagnosticReportingMode onLoaderFailure);
    private static DiagnosticReportingOptions();
    [CompilerGeneratedAttribute]
public DiagnosticReportingMode get_OnPathFailure();
    [CompilerGeneratedAttribute]
public DiagnosticReportingMode get_OnLoaderFailure();
    [CompilerGeneratedAttribute]
public static DiagnosticReportingOptions get_IgnoreAll();
    [CompilerGeneratedAttribute]
public static DiagnosticReportingOptions get_ThrowForAll();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
internal class Microsoft.CodeAnalysis.MSBuild.DocumentFileInfo : object {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogicalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLinked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGenerated>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <Folders>k__BackingField;
    [DataMemberAttribute]
public string FilePath { get; }
    [DataMemberAttribute]
public string LogicalPath { get; }
    [DataMemberAttribute]
public bool IsLinked { get; }
    [DataMemberAttribute]
public bool IsGenerated { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public ImmutableArray`1<string> Folders { get; }
    public DocumentFileInfo(string filePath, string logicalPath, bool isLinked, bool isGenerated, ImmutableArray`1<string> folders);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public string get_LogicalPath();
    [CompilerGeneratedAttribute]
public bool get_IsLinked();
    [CompilerGeneratedAttribute]
public bool get_IsGenerated();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_Folders();
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeAnalysis.MSBuild.IBuildHost {
    public abstract virtual bool HasUsableMSBuild(string projectOrSolutionFilePath);
    public abstract virtual ImmutableArray`1<ValueTuple`2<string, string>> GetProjectsInSolution(string solutionFilePath);
    public abstract virtual Task`1<int> LoadProjectFileAsync(string projectFilePath, string languageName, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> TryGetProjectOutputPathAsync(string projectFilePath, CancellationToken cancellationToken);
    public abstract virtual Task ShutdownAsync();
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeAnalysis.MSBuild.IProjectFile {
    public abstract virtual ImmutableArray`1<DiagnosticLogItem> GetDiagnosticLogItems();
    public abstract virtual Task`1<ImmutableArray`1<ProjectFileInfo>> GetProjectFileInfosAsync(CancellationToken cancellationToken);
    public abstract virtual void AddDocument(string filePath, string logicalPath);
    public abstract virtual void RemoveDocument(string filePath);
    public abstract virtual void AddMetadataReference(string metadataReferenceIdentity, ImmutableArray`1<string> aliases, string hintPath);
    public abstract virtual void RemoveMetadataReference(string shortAssemblyName, string fullAssemblyName, string filePath);
    public abstract virtual void AddProjectReference(string projectName, ProjectFileReference reference);
    public abstract virtual void RemoveProjectReference(string projectName, string projectFilePath);
    public abstract virtual void AddAnalyzerReference(string fullPath);
    public abstract virtual void RemoveAnalyzerReference(string fullPath);
    public abstract virtual void Save();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.MSBuild.JsonSettings : object {
    public static Encoding StreamEncoding;
    public static JsonSerializerSettings SingleLineSerializerSettings;
    private static JsonSettings();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.MSBuild.MonoMSBuildDiscovery : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static IEnumerable`1<string> s_searchPaths;
    private static string s_monoRuntimeExecutablePath;
    private static string s_monoLibDirPath;
    private static string s_monoMSBuildDirectory;
    [NullableContextAttribute("1")]
private static IEnumerable`1<string> GetSearchPaths();
    [NullableContextAttribute("1")]
private static IntPtr Unix_realpath(string path, IntPtr buffer);
    private static void Unix_free(IntPtr ptr);
    [NullableContextAttribute("1")]
private static string RealPath(string path);
    private static string GetMonoRuntimeExecutablePath();
    private static string GetMonoLibDirPath();
    public static string GetMonoMSBuildDirectory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader : object {
    private SolutionServices _solutionServices;
    private DiagnosticReporter _diagnosticReporter;
    private ILoggerFactory _loggerFactory;
    private PathResolver _pathResolver;
    private ProjectFileExtensionRegistry _projectFileExtensionRegistry;
    private NonReentrantLock _dataGuard;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadMetadataForReferencedProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipUnrecognizedProjects>k__BackingField;
    public ImmutableDictionary`2<string, string> Properties { get; private set; }
    public bool LoadMetadataForReferencedProjects { get; public set; }
    public bool SkipUnrecognizedProjects { get; public set; }
    internal MSBuildProjectLoader(SolutionServices solutionServices, DiagnosticReporter diagnosticReporter, ILoggerFactory loggerFactory, ProjectFileExtensionRegistry projectFileExtensionRegistry, ImmutableDictionary`2<string, string> properties);
    public MSBuildProjectLoader(Workspace workspace, ImmutableDictionary`2<string, string> properties);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(ImmutableDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_LoadMetadataForReferencedProjects();
    [CompilerGeneratedAttribute]
public void set_LoadMetadataForReferencedProjects(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipUnrecognizedProjects();
    [CompilerGeneratedAttribute]
public void set_SkipUnrecognizedProjects(bool value);
    public void AssociateFileExtensionWithLanguage(string projectFileExtension, string language);
    [NullableContextAttribute("2")]
private void SetSolutionProperties(string solutionFilePath);
    private DiagnosticReportingMode GetReportingModeForUnrecognizedProjects();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader/<LoadSolutionInfoAsync>d__23")]
public Task`1<SolutionInfo> LoadSolutionInfoAsync(string solutionFilePath, IProgress`1<ProjectLoadProgress> progress, ILogger msbuildLogger, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader/<LoadProjectInfoAsync>d__24")]
public Task`1<ImmutableArray`1<ProjectInfo>> LoadProjectInfoAsync(string projectFilePath, ProjectMap projectMap, IProgress`1<ProjectLoadProgress> progress, ILogger msbuildLogger, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace : Workspace {
    private NonReentrantLock _serializationLock;
    private MSBuildProjectLoader _loader;
    private ILoggerFactory _loggerFactory;
    private ProjectFileExtensionRegistry _projectFileExtensionRegistry;
    private DiagnosticReporter _reporter;
    [NullableAttribute("2")]
private BuildHostProcessManager _applyChangesBuildHostProcessManager;
    [NullableAttribute("2")]
private RemoteProjectFile _applyChangesProjectFile;
    [NullableAttribute("2")]
private static string s_frameworkRoot;
    public ImmutableDictionary`2<string, string> Properties { get; }
    public ImmutableList`1<WorkspaceDiagnostic> Diagnostics { get; }
    public bool LoadMetadataForReferencedProjects { get; public set; }
    public bool SkipUnrecognizedProjects { get; public set; }
    private static string FrameworkRoot { get; }
    private MSBuildWorkspace(HostServices hostServices, ImmutableDictionary`2<string, string> properties);
    public static MSBuildWorkspace Create();
    public static MSBuildWorkspace Create(IDictionary`2<string, string> properties);
    public static MSBuildWorkspace Create(HostServices hostServices);
    public static MSBuildWorkspace Create(IDictionary`2<string, string> properties, HostServices hostServices);
    public ImmutableDictionary`2<string, string> get_Properties();
    public ImmutableList`1<WorkspaceDiagnostic> get_Diagnostics();
    protected internal virtual void OnWorkspaceFailed(WorkspaceDiagnostic diagnostic);
    public bool get_LoadMetadataForReferencedProjects();
    public void set_LoadMetadataForReferencedProjects(bool value);
    public bool get_SkipUnrecognizedProjects();
    public void set_SkipUnrecognizedProjects(bool value);
    public void AssociateFileExtensionWithLanguage(string projectFileExtension, string language);
    public void CloseSolution();
    private static string GetAbsolutePath(string path, string baseDirectoryPath);
    public Task`1<Solution> OpenSolutionAsync(string solutionFilePath, IProgress`1<ProjectLoadProgress> progress, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace/<OpenSolutionAsync>d__25")]
public Task`1<Solution> OpenSolutionAsync(string solutionFilePath, ILogger msbuildLogger, IProgress`1<ProjectLoadProgress> progress, CancellationToken cancellationToken);
    public Task`1<Project> OpenProjectAsync(string projectFilePath, IProgress`1<ProjectLoadProgress> progress, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace/<OpenProjectAsync>d__27")]
public Task`1<Project> OpenProjectAsync(string projectFilePath, ILogger msbuildLogger, IProgress`1<ProjectLoadProgress> progress, CancellationToken cancellationToken);
    public virtual bool CanApplyChange(ApplyChangesKind feature);
    private static bool HasProjectFileChanges(ProjectChanges changes);
    public virtual bool TryApplyChanges(Solution newSolution);
    internal virtual bool TryApplyChanges(Solution newSolution, IProgress`1<CodeAnalysisProgress> progressTracker);
    protected virtual void ApplyProjectChanges(ProjectChanges projectChanges);
    protected virtual void ApplyDocumentTextChanged(DocumentId documentId, SourceText text);
    protected virtual void ApplyAdditionalDocumentTextChanged(DocumentId documentId, SourceText text);
    private static Encoding DetermineEncoding(SourceText text, TextDocument document);
    protected virtual void ApplyDocumentAdded(DocumentInfo info, SourceText text);
    private void SaveDocumentText(DocumentId id, string fullPath, SourceText newText, Encoding encoding);
    protected virtual void ApplyDocumentRemoved(DocumentId documentId);
    private void DeleteDocumentFile(DocumentId documentId, string fullPath);
    private static bool IsInGAC(string filePath);
    private static string get_FrameworkRoot();
    private static bool IsFrameworkReferenceAssembly(string filePath);
    protected virtual void ApplyMetadataReferenceAdded(ProjectId projectId, MetadataReference metadataReference);
    protected virtual void ApplyMetadataReferenceRemoved(ProjectId projectId, MetadataReference metadataReference);
    private AssemblyIdentity GetAssemblyIdentity(ProjectId projectId, MetadataReference metadataReference);
    protected virtual void ApplyProjectReferenceAdded(ProjectId projectId, ProjectReference projectReference);
    protected virtual void ApplyProjectReferenceRemoved(ProjectId projectId, ProjectReference projectReference);
    protected virtual void ApplyAnalyzerReferenceAdded(ProjectId projectId, AnalyzerReference analyzerReference);
    protected virtual void ApplyAnalyzerReferenceRemoved(ProjectId projectId, AnalyzerReference analyzerReference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
internal class Microsoft.CodeAnalysis.MSBuild.PackageReference : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionRange>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string VersionRange { get; public set; }
    public PackageReference(string Name, string VersionRange);
    [CompilerGeneratedAttribute]
protected PackageReference(PackageReference original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_VersionRange();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_VersionRange(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(PackageReference left, PackageReference right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(PackageReference left, PackageReference right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(PackageReference other);
    [CompilerGeneratedAttribute]
public virtual PackageReference <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, String& VersionRange);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.PathResolver : object {
    private DiagnosticReporter _diagnosticReporter;
    public PathResolver(DiagnosticReporter diagnosticReporter);
    public bool TryGetAbsoluteSolutionPath(string path, string baseDirectory, DiagnosticReportingMode reportingMode, String& absolutePath);
    public bool TryGetAbsoluteProjectPath(string path, string baseDirectory, DiagnosticReportingMode reportingMode, String& absolutePath);
    private static string GetAbsolutePath(string path, string baseDirectory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.ProjectFileExtensionRegistry : object {
    private SolutionServices _solutionServices;
    private DiagnosticReporter _diagnosticReporter;
    private Dictionary`2<string, string> _extensionToLanguageMap;
    private NonReentrantLock _dataGuard;
    public ProjectFileExtensionRegistry(SolutionServices solutionServices, DiagnosticReporter diagnosticReporter);
    public void AssociateFileExtensionWithLanguage(string fileExtension, string language);
    [NullableContextAttribute("2")]
public bool TryGetLanguageNameFromProjectPath(string projectFilePath, DiagnosticReportingMode mode, String& languageName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
internal class Microsoft.CodeAnalysis.MSBuild.ProjectFileInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsEmpty>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputRefFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateOutputFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkIdentifier>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <CommandLineArgs>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DocumentFileInfo> <Documents>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DocumentFileInfo> <AdditionalDocuments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DocumentFileInfo> <AnalyzerConfigDocuments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<ProjectFileReference> <ProjectReferences>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <ProjectCapabilities>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <ContentFilePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectAssetsFilePath>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<PackageReference> <PackageReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkVersion>k__BackingField;
    [DataMemberAttribute]
public bool IsEmpty { get; }
    [NullableAttribute("1")]
[DataMemberAttribute]
public string Language { get; }
    [DataMemberAttribute]
public string FilePath { get; }
    [DataMemberAttribute]
public string OutputFilePath { get; }
    [DataMemberAttribute]
public string OutputRefFilePath { get; }
    [DataMemberAttribute]
public string IntermediateOutputFilePath { get; }
    [DataMemberAttribute]
public string DefaultNamespace { get; }
    [DataMemberAttribute]
public string TargetFramework { get; }
    [DataMemberAttribute]
public string TargetFrameworkIdentifier { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public ImmutableArray`1<string> CommandLineArgs { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public ImmutableArray`1<DocumentFileInfo> Documents { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public ImmutableArray`1<DocumentFileInfo> AdditionalDocuments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public ImmutableArray`1<DocumentFileInfo> AnalyzerConfigDocuments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public ImmutableArray`1<ProjectFileReference> ProjectReferences { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public ImmutableArray`1<string> ProjectCapabilities { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public ImmutableArray`1<string> ContentFilePaths { get; }
    [DataMemberAttribute]
public string ProjectAssetsFilePath { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public ImmutableArray`1<PackageReference> PackageReferences { get; }
    [DataMemberAttribute]
public string TargetFrameworkVersion { get; }
    public ProjectFileInfo(bool isEmpty, string language, string filePath, string outputFilePath, string outputRefFilePath, string intermediateOutputFilePath, string defaultNamespace, string targetFramework, string targetFrameworkIdentifier, string targetFrameworkVersion, string projectAssetsFilePath, ImmutableArray`1<string> commandLineArgs, ImmutableArray`1<DocumentFileInfo> documents, ImmutableArray`1<DocumentFileInfo> additionalDocuments, ImmutableArray`1<DocumentFileInfo> analyzerConfigDocuments, ImmutableArray`1<ProjectFileReference> projectReferences, ImmutableArray`1<PackageReference> packageReferences, ImmutableArray`1<string> projectCapabilities, ImmutableArray`1<string> contentFilePaths);
    [CompilerGeneratedAttribute]
public bool get_IsEmpty();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public string get_OutputFilePath();
    [CompilerGeneratedAttribute]
public string get_OutputRefFilePath();
    [CompilerGeneratedAttribute]
public string get_IntermediateOutputFilePath();
    [CompilerGeneratedAttribute]
public string get_DefaultNamespace();
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkIdentifier();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_CommandLineArgs();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<DocumentFileInfo> get_Documents();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<DocumentFileInfo> get_AdditionalDocuments();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<DocumentFileInfo> get_AnalyzerConfigDocuments();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<ProjectFileReference> get_ProjectReferences();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_ProjectCapabilities();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_ContentFilePaths();
    [CompilerGeneratedAttribute]
public string get_ProjectAssetsFilePath();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<PackageReference> get_PackageReferences();
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkVersion();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static ProjectFileInfo Create(string language, string filePath, string outputFilePath, string outputRefFilePath, string intermediateOutputFilePath, string defaultNamespace, string targetFramework, string targetFrameworkIdentifier, string targetFrameworkVersion, string projectAssetsFilePath, ImmutableArray`1<string> commandLineArgs, ImmutableArray`1<DocumentFileInfo> documents, ImmutableArray`1<DocumentFileInfo> additionalDocuments, ImmutableArray`1<DocumentFileInfo> analyzerConfigDocuments, ImmutableArray`1<ProjectFileReference> projectReferences, ImmutableArray`1<PackageReference> packageReferences, ImmutableArray`1<string> projectCapabilities, ImmutableArray`1<string> contentFilePaths);
    [NullableContextAttribute("1")]
public static ProjectFileInfo CreateEmpty(string language, string filePath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DataContractAttribute]
internal class Microsoft.CodeAnalysis.MSBuild.ProjectFileReference : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <Aliases>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReferenceOutputAssembly>k__BackingField;
    [DataMemberAttribute]
public string Path { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DataMemberAttribute]
public ImmutableArray`1<string> Aliases { get; }
    [DataMemberAttribute]
public bool ReferenceOutputAssembly { get; }
    public ProjectFileReference(string path, ImmutableArray`1<string> aliases, bool referenceOutputAssembly);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_Aliases();
    [CompilerGeneratedAttribute]
public bool get_ReferenceOutputAssembly();
}
public enum Microsoft.CodeAnalysis.MSBuild.ProjectLoadOperation : Enum {
    public int value__;
    public static ProjectLoadOperation Evaluate;
    public static ProjectLoadOperation Build;
    public static ProjectLoadOperation Resolve;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.CodeAnalysis.MSBuild.ProjectLoadProgress : ValueType {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectLoadOperation <Operation>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ElapsedTime>k__BackingField;
    public string FilePath { get; }
    public ProjectLoadOperation Operation { get; }
    [NullableAttribute("2")]
public string TargetFramework { get; }
    public TimeSpan ElapsedTime { get; }
    internal ProjectLoadProgress(string filePath, ProjectLoadOperation operation, string targetFramework, TimeSpan elapsedTime);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public ProjectLoadOperation get_Operation();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public TimeSpan get_ElapsedTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeAnalysis.MSBuild.ProjectMap : object {
    private Dictionary`2<string, HashSet`1<ProjectId>> _projectPathToProjectIdsMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, ImmutableArray`1<ProjectInfo>> _projectPathToProjectInfosMap;
    private Dictionary`2<ProjectId, string> _projectIdToOutputFilePathMap;
    private Dictionary`2<ProjectId, string> _projectIdToOutputRefFilePathMap;
    public static ProjectMap Create();
    public static ProjectMap Create(Solution solution);
    public void Add(Project project);
    [NullableContextAttribute("2")]
private void Add(ProjectId projectId, string projectPath, string outputFilePath, string outputRefFilePath);
    internal void AddProjectInfo(ProjectInfo projectInfo);
    [NullableContextAttribute("2")]
private ProjectId CreateProjectId(string projectPath, string outputFilePath, string outputRefFilePath);
    internal ProjectId GetOrCreateProjectId(string projectPath);
    internal ProjectId GetOrCreateProjectId(ProjectFileInfo projectFileInfo);
    [NullableContextAttribute("2")]
private bool TryFindOutputFileRefPathInProjectIdSet(string outputRefFilePath, HashSet`1<ProjectId> set, ProjectId& result);
    [NullableContextAttribute("2")]
private bool TryFindOutputFilePathInProjectIdSet(string outputFilePath, HashSet`1<ProjectId> set, ProjectId& result);
    [NullableContextAttribute("2")]
private static bool TryFindPathInProjectIdSet(string path, Func`2<ProjectId, string> getPathById, HashSet`1<ProjectId> set, ProjectId& result);
    internal string GetOutputRefFilePathById(ProjectId projectId);
    internal string GetOutputFilePathById(ProjectId projectId);
    internal bool TryGetIdsByProjectPath(string projectPath, HashSet`1& ids);
    internal bool TryGetOutputFilePathById(ProjectId id, String& outputFilePath);
    internal bool TryGetOutputRefFilePathById(ProjectId id, String& outputRefFilePath);
    internal bool TryGetProjectInfosByProjectPath(string projectPath, ImmutableArray`1& projectInfos);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.RemoteBuildHost : object {
    private RpcClient _client;
    private static int BuildHostTargetObject;
    public RemoteBuildHost(RpcClient client);
    public Task`1<bool> HasUsableMSBuildAsync(string projectOrSolutionFilePath, CancellationToken cancellationToken);
    public Task`1<ImmutableArray`1<ValueTuple`2<string, string>>> GetProjectsInSolutionAsync(string solutionFilePath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.RemoteBuildHost/<LoadProjectFileAsync>d__5")]
public Task`1<RemoteProjectFile> LoadProjectFileAsync(string projectFilePath, string languageName, CancellationToken cancellationToken);
    public Task`1<string> TryGetProjectOutputPathAsync(string projectFilePath, CancellationToken cancellationToken);
    public Task ShutdownAsync(CancellationToken cancellationToken);
}
internal class Microsoft.CodeAnalysis.MSBuild.RemoteInvocationException : Exception {
    [NullableContextAttribute("2")]
public RemoteInvocationException(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.RemoteProjectFile : object {
    private RpcClient _client;
    private int _remoteProjectFileTargetObject;
    public RemoteProjectFile(RpcClient client, int remoteProjectFileTargetObject);
    public Task`1<ImmutableArray`1<DiagnosticLogItem>> GetDiagnosticLogItemsAsync(CancellationToken cancellationToken);
    public Task`1<ImmutableArray`1<ProjectFileInfo>> GetProjectFileInfosAsync(CancellationToken cancellationToken);
    public Task AddDocumentAsync(string filePath, string logicalPath, CancellationToken cancellationToken);
    public Task RemoveDocumentAsync(string filePath, CancellationToken cancellationToken);
    public Task AddMetadataReferenceAsync(string metadataReferenceIdentity, ImmutableArray`1<string> aliases, string hintPath, CancellationToken cancellationToken);
    public Task RemoveMetadataReferenceAsync(string shortAssemblyName, string fullAssemblyName, string filePath, CancellationToken cancellationToken);
    public Task AddProjectReferenceAsync(string projectName, ProjectFileReference projectFileReference, CancellationToken cancellationToken);
    public Task RemoveProjectReferenceAsync(string projectName, string projectFilePath, CancellationToken cancellationToken);
    public Task AddAnalyzerReferenceAsync(string fullPath, CancellationToken cancellationToken);
    public Task RemoveAnalyzerReferenceAsync(string fullPath, CancellationToken cancellationToken);
    public Task SaveAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
internal class Microsoft.CodeAnalysis.MSBuild.Request : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TargetObject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<JToken> <Parameters>k__BackingField;
    public int Id { get; public set; }
    public int TargetObject { get; public set; }
    [RequiredMemberAttribute]
public string Method { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredMemberAttribute]
public ImmutableArray`1<JToken> Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_TargetObject();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TargetObject(int value);
    [CompilerGeneratedAttribute]
public string get_Method();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Method(string value);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<JToken> get_Parameters();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Parameters(ImmutableArray`1<JToken> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.Response : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exception>k__BackingField;
    public int Id { get; public set; }
    public JToken Value { get; public set; }
    public string Exception { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(int value);
    [CompilerGeneratedAttribute]
public JToken get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(JToken value);
    [CompilerGeneratedAttribute]
public string get_Exception();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Exception(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.RpcClient : object {
    private TextWriter _sendingStream;
    private SemaphoreSlim _sendingStreamSemaphore;
    private TextReader _receivingStream;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<int, ValueTuple`2<TaskCompletionSource`1<object>, Type>> _outstandingRequests;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _nextRequestId;
    private CancellationTokenSource _shutdownTokenSource;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler Disconnected;
    public RpcClient(Stream sendingStream, Stream receivingStream);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_Disconnected(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_Disconnected(EventHandler value);
    public void Start();
    public void Shutdown();
    public Task InvokeAsync(int targetObject, string methodName, List`1<object> parameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.RpcClient/<InvokeNullableAsync>d__13`1")]
public Task`1<T> InvokeNullableAsync(int targetObject, string methodName, List`1<object> parameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.RpcClient/<InvokeAsync>d__14`1")]
public Task`1<T> InvokeAsync(int targetObject, string methodName, List`1<object> parameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.RpcClient/<InvokeCoreAsync>d__15")]
private Task`1<object> InvokeCoreAsync(int targetObject, string methodName, List`1<object> parameters, Type expectedReturnType, CancellationToken cancellationToken);
    internal TestAccessor GetTestAccessor();
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.RpcClient/<<Start>b__10_0>d")]
[CompilerGeneratedAttribute]
private Task <Start>b__10_0();
}
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.MSBuild.TextReaderExtensions : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.TextReaderExtensions/<TryReadLineOrReturnNullIfCancelledAsync>d__0")]
[ExtensionAttribute]
public static Task`1<string> TryReadLineOrReturnNullIfCancelledAsync(TextReader streamReader, CancellationToken cancellationToken);
}
internal static class Microsoft.CodeAnalysis.MSBuild.WorkspaceMSBuildResources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Duplicate_project_discovered_and_skipped_0 { get; }
    internal static string Failed_to_load_solution_filter_0 { get; }
    internal static string Found_project_reference_without_a_matching_metadata_reference_0 { get; }
    internal static string Found_project_with_the_same_file_path_and_output_path_as_another_project_0 { get; }
    internal static string Invalid_0_specified_1 { get; }
    internal static string Msbuild_failed_when_processing_the_file_0 { get; }
    internal static string Msbuild_failed_when_processing_the_file_0_with_message_1 { get; }
    internal static string Path_for_document_0_was_null { get; }
    internal static string Project_already_added { get; }
    internal static string Project_does_not_have_a_path { get; }
    internal static string Project_path_for_0_was_null { get; }
    internal static string Unable_to_add_metadata_reference_0 { get; }
    internal static string Unable_to_find_0 { get; }
    internal static string Unable_to_find_a_0_for_1 { get; }
    internal static string Unable_to_remove_metadata_reference_0 { get; }
    internal static string Unresolved_metadata_reference_removed_from_project_0 { get; }
    internal static string Path_for_additional_document_0_was_null { get; }
    internal static string The_build_host_could_not_be_found_at_0 { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_Duplicate_project_discovered_and_skipped_0();
    internal static string get_Failed_to_load_solution_filter_0();
    internal static string get_Found_project_reference_without_a_matching_metadata_reference_0();
    internal static string get_Found_project_with_the_same_file_path_and_output_path_as_another_project_0();
    internal static string get_Invalid_0_specified_1();
    internal static string get_Msbuild_failed_when_processing_the_file_0();
    internal static string get_Msbuild_failed_when_processing_the_file_0_with_message_1();
    internal static string get_Path_for_document_0_was_null();
    internal static string get_Project_already_added();
    internal static string get_Project_does_not_have_a_path();
    internal static string get_Project_path_for_0_was_null();
    internal static string get_Unable_to_add_metadata_reference_0();
    internal static string get_Unable_to_find_0();
    internal static string get_Unable_to_find_a_0_for_1();
    internal static string get_Unable_to_remove_metadata_reference_0();
    internal static string get_Unresolved_metadata_reference_removed_from_project_0();
    internal static string get_Path_for_additional_document_0_was_null();
    internal static string get_The_build_host_could_not_be_found_at_0();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
