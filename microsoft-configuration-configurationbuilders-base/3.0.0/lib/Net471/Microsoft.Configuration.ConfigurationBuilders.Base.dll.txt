public class Microsoft.Configuration.ConfigurationBuilders.AppSettingsSectionHandler : SectionHandler`1<AppSettingsSection> {
    public virtual void InsertOrUpdate(string newKey, string newValue, string oldKey, object oldItem);
    [IteratorStateMachineAttribute("Microsoft.Configuration.ConfigurationBuilders.AppSettingsSectionHandler/<KeysValuesAndState>d__1")]
public virtual IEnumerable`1<Tuple`3<string, string, object>> KeysValuesAndState();
    public virtual string TryGetOriginalCase(string requestedKey);
}
public class Microsoft.Configuration.ConfigurationBuilders.ConnectionStringsSectionHandler : SectionHandler`1<ConnectionStringsSection> {
    public virtual void InsertOrUpdate(string newKey, string newValue, string oldKey, object oldItem);
    [IteratorStateMachineAttribute("Microsoft.Configuration.ConfigurationBuilders.ConnectionStringsSectionHandler/<KeysValuesAndState>d__1")]
public virtual IEnumerable`1<Tuple`3<string, string, object>> KeysValuesAndState();
    public virtual string TryGetOriginalCase(string requestedKey);
}
public class Microsoft.Configuration.ConfigurationBuilders.ConnectionStringsSectionHandler2 : SectionHandler`1<ConnectionStringsSection> {
    private static string connStrNameTag;
    private static string providerNameTag;
    public virtual void InsertOrUpdate(string newKey, string newValue, string oldKey, object oldItem);
    [IteratorStateMachineAttribute("Microsoft.Configuration.ConfigurationBuilders.ConnectionStringsSectionHandler2/<KeysValuesAndState>d__4")]
public virtual IEnumerable`1<Tuple`3<string, string, object>> KeysValuesAndState();
    public virtual string TryGetOriginalCase(string requestedKey);
    private ValueTuple`2<string, string> SplitTag(string key);
}
internal interface Microsoft.Configuration.ConfigurationBuilders.ISectionHandler {
    public abstract virtual void InsertOrUpdate(string newKey, string newValue, string oldKey, object oldItem);
    public abstract virtual IEnumerable`1<Tuple`3<string, string, object>> KeysValuesAndState();
    public abstract virtual string TryGetOriginalCase(string requestedKey);
}
public abstract class Microsoft.Configuration.ConfigurationBuilders.KeyValueConfigBuilder : ConfigurationBuilder {
    public static string modeTag;
    public static string prefixTag;
    public static string stripPrefixTag;
    public static string tokenPatternTag;
    public static string optionalTag;
    public static string enabledTag;
    public static string escapeTag;
    public static string charMapTag;
    public static string recursionGuardTag;
    private NameValueCollection _config;
    private IDictionary`2<string, string> _cachedValues;
    private bool _lazyInitializeStarted;
    private bool _lazyInitialized;
    private bool _greedyInitialized;
    private KeyValueMode _mode;
    private string _keyPrefix;
    private bool _stripPrefix;
    private KeyValueEnabled _enabled;
    private bool _escapeValues;
    private string _tokenPattern;
    private RecursionGuardValues _recur;
    private Dictionary`2<string, string> _characterMap;
    private ConfigurationSection _currentSection;
    public KeyValueMode Mode { get; }
    public string KeyPrefix { get; }
    private bool StripPrefix { get; }
    [ObsoleteAttribute("Please use the 'Enabled' flag instead to specify optional builders.")]
public bool Optional { get; protected set; }
    public bool IsOptional { get; }
    public KeyValueEnabled Enabled { get; protected set; }
    public bool EscapeValues { get; protected set; }
    public string TokenPattern { get; protected set; }
    public RecursionGuardValues Recursion { get; private set; }
    public Dictionary`2<string, string> CharacterMap { get; protected set; }
    protected ConfigurationSection CurrentSection { get; }
    public KeyValueMode get_Mode();
    public string get_KeyPrefix();
    private bool get_StripPrefix();
    public bool get_Optional();
    protected void set_Optional(bool value);
    public bool get_IsOptional();
    public KeyValueEnabled get_Enabled();
    protected void set_Enabled(KeyValueEnabled value);
    public bool get_EscapeValues();
    protected void set_EscapeValues(bool value);
    public string get_TokenPattern();
    protected void set_TokenPattern(string value);
    public RecursionGuardValues get_Recursion();
    private void set_Recursion(RecursionGuardValues value);
    public Dictionary`2<string, string> get_CharacterMap();
    protected void set_CharacterMap(Dictionary`2<string, string> value);
    protected ConfigurationSection get_CurrentSection();
    public abstract virtual string GetValue(string key);
    public abstract virtual ICollection`1<KeyValuePair`2<string, string>> GetAllValues(string prefix);
    public virtual string MapKey(string key);
    public virtual bool ValidateKey(string key);
    public virtual string UpdateKey(string rawKey);
    public virtual void Initialize(string name, NameValueCollection config);
    protected virtual void LazyInitialize(string name, NameValueCollection config);
    protected string UpdateConfigSettingWithAppSettings(string configName);
    protected void EnsureGreedyInitialized();
    public virtual ConfigurationSection ProcessConfigurationSection(ConfigurationSection configSection);
    private void EnsureInitialized();
    private string ExpandTokens(string rawString);
    private string GetValueInternal(string key);
    private string TrimPrefix(string fullString, string prefix);
    private string EscapeValue(string original);
    private Dictionary`2<string, string> ParseCharacterMap(string stringMap);
    [CompilerGeneratedAttribute]
private string <UpdateConfigSettingWithAppSettings>b__58_0(Match m);
    [CompilerGeneratedAttribute]
private string <ExpandTokens>b__62_0(Match m);
}
public class Microsoft.Configuration.ConfigurationBuilders.KeyValueConfigBuilderException : Exception {
    internal KeyValueConfigBuilderException(string msg, Exception inner);
}
public class Microsoft.Configuration.ConfigurationBuilders.KeyValueConfigurationErrorsException : ConfigurationErrorsException {
    internal KeyValueConfigurationErrorsException(string msg, Exception inner);
}
public enum Microsoft.Configuration.ConfigurationBuilders.KeyValueEnabled : Enum {
    public int value__;
    public static KeyValueEnabled Enabled;
    public static KeyValueEnabled Disabled;
    public static KeyValueEnabled Optional;
    public static KeyValueEnabled True;
    public static KeyValueEnabled False;
}
internal class Microsoft.Configuration.ConfigurationBuilders.KeyValueExceptionHelper : object {
    public static Exception CreateKVCException(string msg, Exception ex, ConfigurationBuilder cb);
    public static bool IsKeyValueConfigException(Exception ex);
}
public enum Microsoft.Configuration.ConfigurationBuilders.KeyValueMode : Enum {
    public int value__;
    public static KeyValueMode Strict;
    public static KeyValueMode Greedy;
    public static KeyValueMode Token;
}
internal class Microsoft.Configuration.ConfigurationBuilders.RecursionGuard : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static AsyncLocal`1<Stack`1<ValueTuple`2<string, string>>> sectionsEntered;
    internal bool ShouldStop;
    private string sectionName;
    private string builderName;
    internal RecursionGuard(ConfigurationBuilder configBuilder, string sectionName, RecursionGuardValues behavior);
    private static RecursionGuard();
    public sealed virtual void Dispose();
    private static Nullable`1<ValueTuple`2<string, string>> FindSection(Stack`1<ValueTuple`2<string, string>> stack, string section);
}
public enum Microsoft.Configuration.ConfigurationBuilders.RecursionGuardValues : Enum {
    public int value__;
    public static RecursionGuardValues Throw;
    public static RecursionGuardValues Stop;
    public static RecursionGuardValues Allow;
}
public abstract class Microsoft.Configuration.ConfigurationBuilders.SectionHandler`1 : ProviderBase {
    [CompilerGeneratedAttribute]
private T <ConfigSection>k__BackingField;
    public T ConfigSection { get; private set; }
    [CompilerGeneratedAttribute]
public T get_ConfigSection();
    [CompilerGeneratedAttribute]
private void set_ConfigSection(T value);
    [ObsoleteAttribute]
public virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    [IteratorStateMachineAttribute("Microsoft.Configuration.ConfigurationBuilders.SectionHandler`1/<KeysValuesAndState>d__5")]
public virtual IEnumerable`1<Tuple`3<string, string, object>> KeysValuesAndState();
    public abstract virtual void InsertOrUpdate(string newKey, string newValue, string oldKey, object oldItem);
    public virtual string TryGetOriginalCase(string requestedKey);
    private void Initialize(string name, T configSection, NameValueCollection config);
}
public class Microsoft.Configuration.ConfigurationBuilders.SectionHandlersSection : ConfigurationSection {
    private static string handlerSectionName;
    [ConfigurationPropertyAttribute]
public ProviderSettingsCollection Handlers { get; }
    private static SectionHandlersSection();
    public ProviderSettingsCollection get_Handlers();
    protected virtual void InitializeDefault();
    internal static ISectionHandler GetSectionHandler(T configSection);
    private static SectionHandlersSection GetSectionHandlersSection(ConfigurationSection currentSection);
}
public class Microsoft.Configuration.ConfigurationBuilders.Utils : object {
    private static Nullable`1<bool> s_isAspNet;
    private static Type s_hostingEnvironmentType;
    private static bool IsAspNet { get; }
    public static string MapPath(string path, ConfigurationSection configSection);
    private static bool get_IsAspNet();
    private static string ServerMapPath(string path);
}
