public class Microsoft.Deployment.Compression.ArchiveException : IOException {
    public ArchiveException(string message, Exception innerException);
    public ArchiveException(string message);
    protected ArchiveException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Deployment.Compression.ArchiveFileInfo : FileSystemInfo {
    private ArchiveInfo archiveInfo;
    private string name;
    private string path;
    private bool initialized;
    private bool exists;
    private int archiveNumber;
    private FileAttributes attributes;
    private DateTime lastWriteTime;
    private long length;
    public string Name { get; }
    public string Path { get; }
    public string FullName { get; }
    public ArchiveInfo Archive { get; internal set; }
    public string ArchiveName { get; }
    public int ArchiveNumber { get; }
    public bool Exists { get; }
    public long Length { get; }
    public FileAttributes Attributes { get; }
    public DateTime LastWriteTime { get; }
    protected ArchiveFileInfo(ArchiveInfo archiveInfo, string filePath);
    protected ArchiveFileInfo(string filePath, int archiveNumber, FileAttributes attributes, DateTime lastWriteTime, long length);
    protected ArchiveFileInfo(SerializationInfo info, StreamingContext context);
    public virtual string get_Name();
    public string get_Path();
    public virtual string get_FullName();
    public ArchiveInfo get_Archive();
    internal void set_Archive(ArchiveInfo value);
    public string get_ArchiveName();
    public int get_ArchiveNumber();
    public virtual bool get_Exists();
    public long get_Length();
    public FileAttributes get_Attributes();
    public DateTime get_LastWriteTime();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
    public virtual void Delete();
    public void Refresh();
    public void CopyTo(string destFileName);
    public void CopyTo(string destFileName, bool overwrite);
    public Stream OpenRead();
    public StreamReader OpenText();
    protected virtual void Refresh(ArchiveFileInfo newFileInfo);
}
public class Microsoft.Deployment.Compression.ArchiveFileStreamContext : object {
    private IList`1<string> archiveFiles;
    private string directory;
    private IDictionary`2<string, string> files;
    private bool extractOnlyNewerFiles;
    private bool enableOffsetOpen;
    public IList`1<string> ArchiveFiles { get; }
    public string Directory { get; }
    public IDictionary`2<string, string> Files { get; }
    public bool ExtractOnlyNewerFiles { get; public set; }
    public bool EnableOffsetOpen { get; public set; }
    public ArchiveFileStreamContext(string archiveFile);
    public ArchiveFileStreamContext(string archiveFile, string directory, IDictionary`2<string, string> files);
    public ArchiveFileStreamContext(IList`1<string> archiveFiles, string directory, IDictionary`2<string, string> files);
    public IList`1<string> get_ArchiveFiles();
    public string get_Directory();
    public IDictionary`2<string, string> get_Files();
    public bool get_ExtractOnlyNewerFiles();
    public void set_ExtractOnlyNewerFiles(bool value);
    public bool get_EnableOffsetOpen();
    public void set_EnableOffsetOpen(bool value);
    public virtual string GetArchiveName(int archiveNumber);
    public virtual Stream OpenArchiveWriteStream(int archiveNumber, string archiveName, bool truncate, CompressionEngine compressionEngine);
    public virtual void CloseArchiveWriteStream(int archiveNumber, string archiveName, Stream stream);
    public virtual Stream OpenFileReadStream(string path, FileAttributes& attributes, DateTime& lastWriteTime);
    public virtual void CloseFileReadStream(string path, Stream stream);
    public virtual object GetOption(string optionName, Object[] parameters);
    public virtual Stream OpenArchiveReadStream(int archiveNumber, string archiveName, CompressionEngine compressionEngine);
    public virtual void CloseArchiveReadStream(int archiveNumber, string archiveName, Stream stream);
    public virtual Stream OpenFileWriteStream(string path, long fileSize, DateTime lastWriteTime);
    public virtual void CloseFileWriteStream(string path, Stream stream, FileAttributes attributes, DateTime lastWriteTime);
    private string TranslateFilePath(string path);
}
public abstract class Microsoft.Deployment.Compression.ArchiveInfo : FileSystemInfo {
    public DirectoryInfo Directory { get; }
    public string DirectoryName { get; }
    public long Length { get; }
    public string Name { get; }
    public bool Exists { get; }
    protected ArchiveInfo(string path);
    protected ArchiveInfo(SerializationInfo info, StreamingContext context);
    public DirectoryInfo get_Directory();
    public string get_DirectoryName();
    public long get_Length();
    public virtual string get_Name();
    public virtual bool get_Exists();
    public virtual string ToString();
    public virtual void Delete();
    public void CopyTo(string destFileName);
    public void CopyTo(string destFileName, bool overwrite);
    public void MoveTo(string destFileName);
    public bool IsValid();
    public IList`1<ArchiveFileInfo> GetFiles();
    public IList`1<ArchiveFileInfo> GetFiles(string searchPattern);
    public void Unpack(string destDirectory);
    public void Unpack(string destDirectory, EventHandler`1<ArchiveProgressEventArgs> progressHandler);
    public void UnpackFile(string fileName, string destFileName);
    public void UnpackFiles(IList`1<string> fileNames, string destDirectory, IList`1<string> destFileNames);
    public void UnpackFiles(IList`1<string> fileNames, string destDirectory, IList`1<string> destFileNames, EventHandler`1<ArchiveProgressEventArgs> progressHandler);
    public void UnpackFileSet(IDictionary`2<string, string> fileNames, string destDirectory);
    public void UnpackFileSet(IDictionary`2<string, string> fileNames, string destDirectory, EventHandler`1<ArchiveProgressEventArgs> progressHandler);
    public Stream OpenRead(string fileName);
    public StreamReader OpenText(string fileName);
    public void Pack(string sourceDirectory);
    public void Pack(string sourceDirectory, bool includeSubdirectories, CompressionLevel compLevel, EventHandler`1<ArchiveProgressEventArgs> progressHandler);
    public void PackFiles(string sourceDirectory, IList`1<string> sourceFileNames, IList`1<string> fileNames);
    public void PackFiles(string sourceDirectory, IList`1<string> sourceFileNames, IList`1<string> fileNames, CompressionLevel compLevel, EventHandler`1<ArchiveProgressEventArgs> progressHandler);
    public void PackFileSet(string sourceDirectory, IDictionary`2<string, string> fileNames);
    public void PackFileSet(string sourceDirectory, IDictionary`2<string, string> fileNames, CompressionLevel compLevel, EventHandler`1<ArchiveProgressEventArgs> progressHandler);
    internal IList`1<string> GetRelativeFilePathsInDirectoryTree(string dir, bool includeSubdirectories);
    internal ArchiveFileInfo GetFile(string path);
    protected abstract virtual CompressionEngine CreateCompressionEngine();
    private static IDictionary`2<string, string> CreateStringDictionary(IList`1<string> keys, IList`1<string> values);
    private void RecursiveGetRelativeFilePathsInDirectoryTree(string dir, string relativeDir, bool includeSubdirectories, IList`1<string> fileList);
    private IList`1<ArchiveFileInfo> InternalGetFiles(Predicate`1<string> fileFilter);
}
public class Microsoft.Deployment.Compression.ArchiveProgressEventArgs : EventArgs {
    private ArchiveProgressType progressType;
    private string currentFileName;
    private int currentFileNumber;
    private int totalFiles;
    private long currentFileBytesProcessed;
    private long currentFileTotalBytes;
    private string currentArchiveName;
    private short currentArchiveNumber;
    private short totalArchives;
    private long currentArchiveBytesProcessed;
    private long currentArchiveTotalBytes;
    private long fileBytesProcessed;
    private long totalFileBytes;
    public ArchiveProgressType ProgressType { get; }
    public string CurrentFileName { get; }
    public int CurrentFileNumber { get; }
    public int TotalFiles { get; }
    public long CurrentFileBytesProcessed { get; }
    public long CurrentFileTotalBytes { get; }
    public string CurrentArchiveName { get; }
    public int CurrentArchiveNumber { get; }
    public int TotalArchives { get; }
    public long CurrentArchiveBytesProcessed { get; }
    public long CurrentArchiveTotalBytes { get; }
    public long FileBytesProcessed { get; }
    public long TotalFileBytes { get; }
    public ArchiveProgressEventArgs(ArchiveProgressType progressType, string currentFileName, int currentFileNumber, int totalFiles, long currentFileBytesProcessed, long currentFileTotalBytes, string currentArchiveName, int currentArchiveNumber, int totalArchives, long currentArchiveBytesProcessed, long currentArchiveTotalBytes, long fileBytesProcessed, long totalFileBytes);
    public ArchiveProgressType get_ProgressType();
    public string get_CurrentFileName();
    public int get_CurrentFileNumber();
    public int get_TotalFiles();
    public long get_CurrentFileBytesProcessed();
    public long get_CurrentFileTotalBytes();
    public string get_CurrentArchiveName();
    public int get_CurrentArchiveNumber();
    public int get_TotalArchives();
    public long get_CurrentArchiveBytesProcessed();
    public long get_CurrentArchiveTotalBytes();
    public long get_FileBytesProcessed();
    public long get_TotalFileBytes();
}
public enum Microsoft.Deployment.Compression.ArchiveProgressType : Enum {
    public int value__;
    public static ArchiveProgressType StartFile;
    public static ArchiveProgressType PartialFile;
    public static ArchiveProgressType FinishFile;
    public static ArchiveProgressType StartArchive;
    public static ArchiveProgressType PartialArchive;
    public static ArchiveProgressType FinishArchive;
}
public class Microsoft.Deployment.Compression.BasicUnpackStreamContext : object {
    private Stream archiveStream;
    private Stream fileStream;
    public Stream FileStream { get; }
    public BasicUnpackStreamContext(Stream archiveStream);
    public Stream get_FileStream();
    public sealed virtual Stream OpenArchiveReadStream(int archiveNumber, string archiveName, CompressionEngine compressionEngine);
    public sealed virtual void CloseArchiveReadStream(int archiveNumber, string archiveName, Stream stream);
    public sealed virtual Stream OpenFileWriteStream(string path, long fileSize, DateTime lastWriteTime);
    public sealed virtual void CloseFileWriteStream(string path, Stream stream, FileAttributes attributes, DateTime lastWriteTime);
}
public class Microsoft.Deployment.Compression.CargoStream : Stream {
    private Stream source;
    private List`1<IDisposable> cargo;
    public Stream Source { get; }
    public IList`1<IDisposable> Cargo { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public CargoStream(Stream source, IDisposable[] cargo);
    public Stream get_Source();
    public IList`1<IDisposable> get_Cargo();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual void SetLength(long value);
    public virtual void Close();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
}
public abstract class Microsoft.Deployment.Compression.CompressionEngine : object {
    private CompressionLevel compressionLevel;
    private bool dontUseTempFiles;
    private EventHandler`1<ArchiveProgressEventArgs> Progress;
    public bool UseTempFiles { get; public set; }
    public CompressionLevel CompressionLevel { get; public set; }
    protected virtual void Finalize();
    public void add_Progress(EventHandler`1<ArchiveProgressEventArgs> value);
    public void remove_Progress(EventHandler`1<ArchiveProgressEventArgs> value);
    public bool get_UseTempFiles();
    public void set_UseTempFiles(bool value);
    public CompressionLevel get_CompressionLevel();
    public void set_CompressionLevel(CompressionLevel value);
    public sealed virtual void Dispose();
    public void Pack(IPackStreamContext streamContext, IEnumerable`1<string> files);
    public abstract virtual void Pack(IPackStreamContext streamContext, IEnumerable`1<string> files, long maxArchiveSize);
    public abstract virtual bool IsArchive(Stream stream);
    public virtual long FindArchiveOffset(Stream stream);
    public IList`1<ArchiveFileInfo> GetFileInfo(Stream stream);
    public abstract virtual IList`1<ArchiveFileInfo> GetFileInfo(IUnpackStreamContext streamContext, Predicate`1<string> fileFilter);
    public IList`1<string> GetFiles(Stream stream);
    public IList`1<string> GetFiles(IUnpackStreamContext streamContext, Predicate`1<string> fileFilter);
    public Stream Unpack(Stream stream, string path);
    public abstract virtual void Unpack(IUnpackStreamContext streamContext, Predicate`1<string> fileFilter);
    protected void OnProgress(ArchiveProgressEventArgs e);
    protected virtual void Dispose(bool disposing);
    public static void DosDateAndTimeToDateTime(short dosDate, short dosTime, DateTime& dateTime);
    public static void DateTimeToDosDateAndTime(DateTime dateTime, Int16& dosDate, Int16& dosTime);
}
public enum Microsoft.Deployment.Compression.CompressionLevel : Enum {
    public int value__;
    public static CompressionLevel None;
    public static CompressionLevel Min;
    public static CompressionLevel Normal;
    public static CompressionLevel Max;
}
public class Microsoft.Deployment.Compression.DuplicateStream : Stream {
    private Stream source;
    private long position;
    public Stream Source { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public DuplicateStream(Stream source);
    public Stream get_Source();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public static Stream OriginalStream(Stream stream);
    public virtual void Flush();
    public virtual void SetLength(long value);
    public virtual void Close();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
}
public interface Microsoft.Deployment.Compression.IPackStreamContext {
    public abstract virtual string GetArchiveName(int archiveNumber);
    public abstract virtual Stream OpenArchiveWriteStream(int archiveNumber, string archiveName, bool truncate, CompressionEngine compressionEngine);
    public abstract virtual void CloseArchiveWriteStream(int archiveNumber, string archiveName, Stream stream);
    public abstract virtual Stream OpenFileReadStream(string path, FileAttributes& attributes, DateTime& lastWriteTime);
    public abstract virtual void CloseFileReadStream(string path, Stream stream);
    public abstract virtual object GetOption(string optionName, Object[] parameters);
}
public interface Microsoft.Deployment.Compression.IUnpackStreamContext {
    public abstract virtual Stream OpenArchiveReadStream(int archiveNumber, string archiveName, CompressionEngine compressionEngine);
    public abstract virtual void CloseArchiveReadStream(int archiveNumber, string archiveName, Stream stream);
    public abstract virtual Stream OpenFileWriteStream(string path, long fileSize, DateTime lastWriteTime);
    public abstract virtual void CloseFileWriteStream(string path, Stream stream, FileAttributes attributes, DateTime lastWriteTime);
}
public class Microsoft.Deployment.Compression.OffsetStream : Stream {
    private Stream source;
    private long sourceOffset;
    public Stream Source { get; }
    public long Offset { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public OffsetStream(Stream source, long offset);
    public Stream get_Source();
    public long get_Offset();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Close();
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class Microsoft.Deployment.Compression.SafeNativeMethods : object {
    internal static bool DosDateTimeToFileTime(short wFatDate, short wFatTime, Int64& fileTime);
    internal static bool FileTimeToDosDateTime(Int64& fileTime, Int16& wFatDate, Int16& wFatTime);
}
internal static class Microsoft.Tools.WindowsInstallerXml.WixDistribution : object {
    public static string NewsUrl;
    public static string ShortProduct;
    public static string SupportUrl;
    public static string TelemetryUrlFormat;
    private static WixDistribution();
    public static string ReplacePlaceholders(string original, Assembly assembly);
    private static bool TryGetAttribute(Assembly assembly, T& attribute);
}
