public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.AppTelemetryClient : object {
    [CompilerGeneratedAttribute]
private TelemetryClient <InnerTelemetryClient>k__BackingField;
    protected TelemetryClient InnerTelemetryClient { get; }
    public AppTelemetryClient(TelemetryConfiguration telemetryConfig);
    public AppTelemetryClient(TelemetryClient telemetryClient);
    [CompilerGeneratedAttribute]
protected TelemetryClient get_InnerTelemetryClient();
    public sealed virtual void Flush();
    public virtual IOperationHolder`1<T> StartOperation(string name);
    public virtual void TrackEvent(string name, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    public virtual void TrackException(Exception exception, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics, string trackedAtMemberName);
    public virtual void TrackTrace(string message, IDictionary`2<string, string> properties);
    public virtual void TrackTrace(string message, SeverityLevel severityLevel, IDictionary`2<string, string> properties);
}
[ExtensionAttribute]
public static class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.AppTelemetryClientExtensions : object {
    [ExtensionAttribute]
public static void TrackEvent(IAppTelemetryClient telemetry, string eventName, ValueTuple`2[] properties);
    [ExtensionAttribute]
public static IOperationHolder`1<RequestTelemetry> StartRequestOperation(IAppTelemetryClient telemetry, string name);
    [ExtensionAttribute]
public static IOperationHolder`1<DependencyTelemetry> StartDependencyOperation(IAppTelemetryClient telemetry, string name);
    [ExtensionAttribute]
public static void TrackCall(IAppTelemetryClient telemetry, string name, Action action);
    [ExtensionAttribute]
public static void TrackCall(IAppTelemetryClient telemetry, string name, Action`1<DependencyTelemetry> action);
    [ExtensionAttribute]
public static TResult TrackCall(IAppTelemetryClient telemetry, string name, Func`1<TResult> func);
    [ExtensionAttribute]
public static TResult TrackCall(IAppTelemetryClient telemetry, string name, Func`2<DependencyTelemetry, TResult> func);
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.AppTelemetryConfigurationException : Exception {
    public AppTelemetryConfigurationException(string message);
    public AppTelemetryConfigurationException(string message, Exception innerException);
    protected AppTelemetryConfigurationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.AppTelemetryException : ApplicationException {
    public AppTelemetryException(string message);
    public AppTelemetryException(string message, Exception inner);
    protected AppTelemetryException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.AppTelemetryUtility : object {
    private static int MaxAutomationAgentLength;
    private static Regex ProductNameRegex;
    private static AppTelemetryUtility();
    public static string ComposeAutomationAgentStringForExecutingAssembly();
    public static string ComposeAutomationAgentString(Assembly productAssembly, string telemetryRoleName);
    public static string ComposeAutomationAgentString(string productName, string productVersion);
    public static bool TryParseAutomationAgentStringProductNameVersion(string agent, ValueTuple`3& result);
    internal static bool IsSupportedAgentProductVersion(string productVersion);
    internal static string ValidateAndSanitizeAutomationAgent(IAppTelemetryEnvironment environment);
    [ExtensionAttribute]
public static void AddCommonAppStartProperties(ISupportProperties telemetry, Assembly productAssembly, IAppTelemetryEnvironment environment);
    [ExtensionAttribute]
public static void AddCommonAppStartProperties(IDictionary`2<string, string> telemetryProperties, Assembly productAssembly, IAppTelemetryEnvironment environment);
    public static string ComposeAssemblyNameForTelemetry(Assembly assembly, bool useFileVersion);
    public static Nullable`1<bool> ParseBooleanEnvironmentVariable(string value);
}
internal class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.CheckedOperationHolder`1 : object {
    private IOperationHolder`1<T> _actualHolder;
    public T Telemetry { get; }
    public CheckedOperationHolder`1(IOperationHolder`1<T> actualHolder);
    public sealed virtual T get_Telemetry();
    public sealed virtual void Dispose();
}
public enum Microsoft.PowerPlatform.Tooling.BatchedTelemetry.CliResultCode : Enum {
    public int value__;
    public static CliResultCode Success;
    public static CliResultCode BadRequest;
    public static CliResultCode NotFound;
    public static CliResultCode Unauthorized;
    public static CliResultCode RequestTimeout;
    public static CliResultCode InternalApplicationError;
    public static CliResultCode BadGateway;
    public static CliResultCode NotImplemented;
    public static CliResultCode ServiceUnavailable;
    public static CliResultCode GatewayTimeout;
}
[ExtensionAttribute]
public static class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.CliResultCodeExtensions : object {
    [ExtensionAttribute]
public static string ToIntString(CliResultCode code);
    [ExtensionAttribute]
public static bool IsSuccessful(CliResultCode code);
    [ExtensionAttribute]
public static void ApplyResultCode(RequestTelemetry telemetry, CliResultCode code);
    [ExtensionAttribute]
public static void ApplyResultCode(DependencyTelemetry telemetry, CliResultCode code);
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.AppInsightsResource : object {
    private string _dataBoundary;
    [CompilerGeneratedAttribute]
private string <InstrumentationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    public string InstrumentationKey { get; }
    public string ConnectionString { get; }
    public string DataBoundary { get; public set; }
    public AppInsightsResource(string connectionString);
    [CompilerGeneratedAttribute]
public string get_InstrumentationKey();
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    public string get_DataBoundary();
    public void set_DataBoundary(string value);
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.AppInsightsResourceProvider : object {
    private Dictionary`2<string, AppInsightsResource> _resourcesByDataBoundary;
    [CompilerGeneratedAttribute]
private AppInsightsResource <DefaultResource>k__BackingField;
    public AppInsightsResource DefaultResource { get; }
    public AppInsightsResourceProvider(AppInsightsResource defaultResource, AppInsightsResource[] additionalResources);
    [CompilerGeneratedAttribute]
public AppInsightsResource get_DefaultResource();
    public AppInsightsResource GetAppInsightsResourceForDataBoundary(IAppTelemetryEnvironment environment);
    public virtual AppInsightsResource GetAppInsightsResourceForDataBoundary(string dataBoundary);
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.AppOperationCorrelationTelemetryInitializer : object {
    private IAppTelemetryEnvironment _environment;
    public AppOperationCorrelationTelemetryInitializer(IAppTelemetryEnvironment environment);
    public sealed virtual void Initialize(ITelemetry telemetry);
}
public static class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.AppTelemetryConfigUtility : object {
    public static string DefaultPowerAppsCliAppDataFolderPath;
    public static string DefaultTelemetryCacheFolderPath;
    public static string DefaultTelemetryUserSettingsFileName;
    private static AppTelemetryConfigUtility();
    public static TelemetryConfiguration CreateTelemetryConfigForClientApp(AppInsightsResourceProvider appInsightsResourceProvider, ITelemetryChannel telemetryChannel, string roleName, Assembly productAssembly, Guid sessionId, IAppTelemetryEnvironment environment, ITelemetryUserSettings userSettings, TryMapAgentToSyntheticSource tryMapAgentToSyntheticSource);
    public static ITelemetryUserSettings GetUserSettingsFromSharedInstall();
    public static BatchedTelemetryChannel CreateBatchedTelemetryChannelForClientApp(IAppTelemetryEnvironment environment, Assembly productAssembly, string telemetryCacheFolderPath);
    public static AppTelemetryEnvironment CreateGlobalTelemetryEnvironment(Func`2<string, string> getEnvironmentVariable);
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.AppTelemetryEnvironment : object {
    public static IAppTelemetryEnvironment Default;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <OptOut>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeveloperMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AutomationAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacyTelemetrySource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceParent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TraceState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataBoundary>k__BackingField;
    public Nullable`1<bool> OptOut { get; public set; }
    public Nullable`1<bool> DeveloperMode { get; public set; }
    public string AutomationAgent { get; public set; }
    public string LegacyTelemetrySource { get; public set; }
    public string TraceParent { get; public set; }
    public string TraceState { get; public set; }
    public string DataBoundary { get; public set; }
    private static AppTelemetryEnvironment();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_OptOut();
    [CompilerGeneratedAttribute]
public void set_OptOut(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DeveloperMode();
    [CompilerGeneratedAttribute]
public void set_DeveloperMode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AutomationAgent();
    [CompilerGeneratedAttribute]
public void set_AutomationAgent(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LegacyTelemetrySource();
    [CompilerGeneratedAttribute]
public void set_LegacyTelemetrySource(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TraceParent();
    [CompilerGeneratedAttribute]
public void set_TraceParent(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TraceState();
    [CompilerGeneratedAttribute]
public void set_TraceState(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DataBoundary();
    [CompilerGeneratedAttribute]
public void set_DataBoundary(string value);
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.ClientAppTelemetryInitializer : object {
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComponentVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserUniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperatingSystem>k__BackingField;
    public string RoleName { get; }
    public string RoleInstance { get; }
    public string ComponentVersion { get; }
    public string UserUniqueId { get; }
    public string SessionId { get; }
    public string OperatingSystem { get; }
    public ClientAppTelemetryInitializer(string roleName, Assembly productAssembly, Guid userUniqueId, Guid sessionId, string roleInstance);
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public string get_RoleInstance();
    [CompilerGeneratedAttribute]
public string get_ComponentVersion();
    [CompilerGeneratedAttribute]
public string get_UserUniqueId();
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public string get_OperatingSystem();
    public sealed virtual void Initialize(ITelemetry telemetry);
}
public interface Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.IAppTelemetryEnvironment {
    public Nullable`1<bool> OptOut { get; }
    public string DataBoundary { get; }
    public Nullable`1<bool> DeveloperMode { get; }
    public string AutomationAgent { get; }
    public string LegacyTelemetrySource { get; }
    public string TraceParent { get; }
    public string TraceState { get; }
    public abstract virtual Nullable`1<bool> get_OptOut();
    public abstract virtual string get_DataBoundary();
    public abstract virtual Nullable`1<bool> get_DeveloperMode();
    public abstract virtual string get_AutomationAgent();
    public abstract virtual string get_LegacyTelemetrySource();
    public abstract virtual string get_TraceParent();
    public abstract virtual string get_TraceState();
}
public interface Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.ITelemetryUserSettings {
    public Guid UniqueId { get; }
    public bool TelemetryEnabled { get; }
    public abstract virtual Guid get_UniqueId();
    public abstract virtual bool get_TelemetryEnabled();
}
public interface Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.ITelemetryUserSettingsProvider {
    public abstract virtual ITelemetryUserSettings GetCurrent();
    public abstract virtual void SetConfigValueTelemetryEnabled(bool telemetryEnabled);
}
internal static class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.MultiProcessIO : object {
    public static string FileReadAllTextWithRetries(string filePath, TimeSpan maxAttemptDuration, TimeSpan retrySleep);
    public static FileStream CreateExclusiveFileStreamWithRetries(string filePath, FileAccess fileAccess, FileMode fileMode, TimeSpan maxAttemptDuration, TimeSpan retrySleep);
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.SyntheticSourceTelemetryInitializer : object {
    [CompilerGeneratedAttribute]
private string <SyntheticSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacyTelemetrySource>k__BackingField;
    public string SyntheticSource { get; }
    public string LegacyTelemetrySource { get; }
    public SyntheticSourceTelemetryInitializer(IAppTelemetryEnvironment environment, TryMapAgentToSyntheticSource tryMapAgentToSyntheticSource, string syntheticSource);
    [CompilerGeneratedAttribute]
public string get_SyntheticSource();
    [CompilerGeneratedAttribute]
public string get_LegacyTelemetrySource();
    public sealed virtual void Initialize(ITelemetry telemetry);
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.TelemetryUserSettings : object {
    [CompilerGeneratedAttribute]
private Guid <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TelemetryEnabled>k__BackingField;
    public Guid UniqueId { get; }
    public bool TelemetryEnabled { get; }
    public TelemetryUserSettings(Guid uniqueId, bool telemetryEnabled);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_UniqueId();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_TelemetryEnabled();
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.TelemetryUserSettingsFileProvider : object {
    internal static string SettingVersionId;
    private TimeSpan _acquireFileStreamMaxAttemptDuration;
    private TimeSpan _ioOperationRetrySleep;
    [CompilerGeneratedAttribute]
private string <SettingsFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <OnBeforeWriteSettingsToFile>k__BackingField;
    public string SettingsFilePath { get; }
    internal Action OnBeforeWriteSettingsToFile { get; internal set; }
    public TelemetryUserSettingsFileProvider(string settingsFilePath, Nullable`1<TimeSpan> acquireFileStreamMaxAttemptDuration, Nullable`1<TimeSpan> ioOperationRetrySleep);
    [CompilerGeneratedAttribute]
public string get_SettingsFilePath();
    public TelemetryUserSettings GetCurrent();
    [CompilerGeneratedAttribute]
internal Action get_OnBeforeWriteSettingsToFile();
    [CompilerGeneratedAttribute]
internal void set_OnBeforeWriteSettingsToFile(Action value);
    private sealed virtual override ITelemetryUserSettings Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.ITelemetryUserSettingsProvider.GetCurrent();
    public sealed virtual void SetConfigValueTelemetryEnabled(bool telemetryEnabled);
    private UserSettingsDataContract SafeLoadSettings();
    private void EnsureSettingsFileExists();
    private UserSettingsDataContract ReadSettings();
    private void WriteSettings(UserSettingsDataContract userSettings, bool allowOverwrite);
    [CompilerGeneratedAttribute]
internal static TimeSpan <.ctor>g__ValidateAndInitTimeSpan|3_0(Nullable`1<TimeSpan> value, TimeSpan defaultValue, string paramName);
}
[ExtensionAttribute]
public static class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.TelemetryUserSettingsProviderExtensions : object {
    [ExtensionAttribute]
public static ITelemetryUserSettings GetCurrentOrDefault(ITelemetryUserSettingsProvider provider);
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.TryMapAgentToSyntheticSource : MulticastDelegate {
    public TryMapAgentToSyntheticSource(object object, IntPtr method);
    public virtual bool Invoke(ValueTuple`2<string, string> agent, String& syntheticSource);
    public virtual IAsyncResult BeginInvoke(ValueTuple`2<string, string> agent, String& syntheticSource, AsyncCallback callback, object object);
    public virtual bool EndInvoke(String& syntheticSource, IAsyncResult result);
}
public enum Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.UserSettingsErrorReason : Enum {
    public int value__;
    public static UserSettingsErrorReason Unspecified;
    public static UserSettingsErrorReason InvalidFileContents;
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Extensibility.UserSettingsException : Exception {
    [CompilerGeneratedAttribute]
private UserSettingsErrorReason <Reason>k__BackingField;
    public UserSettingsErrorReason Reason { get; }
    public UserSettingsException(UserSettingsErrorReason reason);
    public UserSettingsException(UserSettingsErrorReason reason, Exception inner);
    [CompilerGeneratedAttribute]
public UserSettingsErrorReason get_Reason();
}
public interface Microsoft.PowerPlatform.Tooling.BatchedTelemetry.IAppTelemetryClient {
    public abstract virtual IOperationHolder`1<T> StartOperation(string name);
    public abstract virtual void TrackEvent(string name, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    public abstract virtual void TrackException(Exception exception, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics, string trackedAtMemberName);
    public abstract virtual void TrackTrace(string message, IDictionary`2<string, string> properties);
    public abstract virtual void TrackTrace(string message, SeverityLevel severityLevel, IDictionary`2<string, string> properties);
    public abstract virtual void Flush();
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.StartStopEventsTracker : object {
    private IAppTelemetryClient _telemetry;
    private Stopwatch _stopWatch;
    private string _stopEventName;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CliResultCode> <ResultCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <StopProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, double> <StopMetrics>k__BackingField;
    protected bool IsDisposed { get; private set; }
    public Nullable`1<bool> Success { get; public set; }
    public Nullable`1<CliResultCode> ResultCode { get; public set; }
    public long ElapsedMilliseconds { get; }
    public IDictionary`2<string, string> StopProperties { get; }
    public IDictionary`2<string, double> StopMetrics { get; }
    public StartStopEventsTracker(IAppTelemetryClient telemetry, string startEventName, string stopEventName, IDictionary`2<string, string> startProps, bool skipEventNameChecks);
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<CliResultCode> get_ResultCode();
    [CompilerGeneratedAttribute]
public void set_ResultCode(Nullable`1<CliResultCode> value);
    public long get_ElapsedMilliseconds();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_StopProperties();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, double> get_StopMetrics();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.TelemetryChannel.BatchedTelemetryChannel : object {
    private static string DefaultEndpointAddress;
    private static string BatchUploadExeFileName;
    private static string BatchUploadDllFileName;
    private TelemetryBuffer _buffer;
    private TransmissionStorage _storage;
    private Uri _endpointAddress;
    private bool _isDisposed;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeveloperMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UploaderFolderPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <UploaderMaxIdleTimeSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxWaitMillisecondsOnDisposeToDetectUploaderFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipStartUploadProcess>k__BackingField;
    [CompilerGeneratedAttribute]
private Process <LastUploadProcessStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCaptureProcessOutput>k__BackingField;
    private StringBuilder _lastUploadProcessOutputBuilder;
    public Nullable`1<bool> DeveloperMode { get; public set; }
    public string EndpointAddress { get; public set; }
    public int BatchSize { get; public set; }
    internal string StorageFolderPath { get; }
    public string UploaderFolderPath { get; public set; }
    public Nullable`1<int> UploaderMaxIdleTimeSeconds { get; public set; }
    public Nullable`1<int> MaxWaitMillisecondsOnDisposeToDetectUploaderFailure { get; public set; }
    internal bool SkipStartUploadProcess { get; internal set; }
    internal Process LastUploadProcessStarted { get; private set; }
    internal bool EnableCaptureProcessOutput { get; internal set; }
    internal string LastUploadProcessOutput { get; }
    public BatchedTelemetryChannel(string storageFolderPath);
    internal BatchedTelemetryChannel(string storageFolderPath, TelemetryBuffer buffer);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DeveloperMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeveloperMode(Nullable`1<bool> value);
    public sealed virtual string get_EndpointAddress();
    public sealed virtual void set_EndpointAddress(string value);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    internal string get_StorageFolderPath();
    [CompilerGeneratedAttribute]
public string get_UploaderFolderPath();
    [CompilerGeneratedAttribute]
public void set_UploaderFolderPath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_UploaderMaxIdleTimeSeconds();
    [CompilerGeneratedAttribute]
public void set_UploaderMaxIdleTimeSeconds(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxWaitMillisecondsOnDisposeToDetectUploaderFailure();
    [CompilerGeneratedAttribute]
public void set_MaxWaitMillisecondsOnDisposeToDetectUploaderFailure(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal bool get_SkipStartUploadProcess();
    [CompilerGeneratedAttribute]
internal void set_SkipStartUploadProcess(bool value);
    [CompilerGeneratedAttribute]
internal Process get_LastUploadProcessStarted();
    [CompilerGeneratedAttribute]
private void set_LastUploadProcessStarted(Process value);
    [CompilerGeneratedAttribute]
internal bool get_EnableCaptureProcessOutput();
    [CompilerGeneratedAttribute]
internal void set_EnableCaptureProcessOutput(bool value);
    internal string get_LastUploadProcessOutput();
    public sealed virtual void Flush();
    public sealed virtual void Send(ITelemetry item);
    private void Dispose(bool disposing);
    private void ReportIfUploadProcessHasExitedWithFailure();
    public sealed virtual void Dispose();
    internal void FlushBufferToDisk();
    private void StartUploadProcess();
    private static Process StartProcessCaptureOutput(ProcessStartInfo startInfo, StringBuilder outputBuilder);
}
internal class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.TelemetryChannel.TelemetryBuffer : object {
    private object lockObj;
    private List`1<ITelemetry> _items;
    private int _capacity;
    private int _batchSize;
    public static int DefaultCapacity;
    public static int DefaultBatchSize;
    public static ICollection`1<ITelemetry> EmptyCollection;
    public Action OnFull;
    public Action OnFlush;
    public int Count { get; }
    public int Capacity { get; public set; }
    public int BatchSize { get; public set; }
    private static TelemetryBuffer();
    public int get_Count();
    public int get_Capacity();
    public void set_Capacity(int value);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public void Enqueue(ITelemetry item);
    public virtual ICollection`1<ITelemetry> Dequeue();
}
[ExtensionAttribute]
internal static class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.TelemetryChannel.TransmissionSerializer : object {
    private static string ContentTypeHeader;
    private static string ContentEncodingHeader;
    [ExtensionAttribute]
public static void Save(Transmission transmission, Stream stream);
    public static Transmission Load(Stream stream);
}
internal class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.TelemetryChannel.TransmissionStorage : object {
    private object lockObj;
    private static string TempFileExtension;
    private static string CacheFileExtension;
    private static string SendingFileExtension;
    private static char ProcIdTimestampSeparator;
    private static HashSet`1<char> invalidPathChars;
    private static HashSet`1<char> invalidFilenameChars;
    private static int ProcessId;
    [CompilerGeneratedAttribute]
private string <StorageFolderPath>k__BackingField;
    public string StorageFolderPath { get; }
    public TransmissionStorage(string storageFolderPath);
    private static TransmissionStorage();
    [CompilerGeneratedAttribute]
public string get_StorageFolderPath();
    public void Save(Transmission transmission);
    public bool HasAnyTransmissions();
    public bool TryGetOldestTransmission(ValueTuple`2& oldest);
    public int PurgeAgedOutTransmissions();
    public void SendingCompleted(string sendingFilename);
    private FileInfo ReserveUniqueCacheFilename(string storageFolder, long timestamp);
    private void DeleteFile(string cacheFile);
    private static IEnumerable`1<FileInfo> GetOldestCacheFiles(string storageFolder, string extension);
    private static string CreateCandidateFileName(string storageFolder, long timestamp);
    private static long ParseCacheFileNameToTicks(FileInfo cacheFile);
    private static Transmission LoadTransmission(FileInfo filename);
    internal static bool IsValidPath(string path);
    private static bool IsValidFilename(string name);
    private static string GetHashedAppName();
}
public static class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.TelemetryConstants : object {
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Testing.NoopOperationHolder`1 : object {
    [CompilerGeneratedAttribute]
private T <Telemetry>k__BackingField;
    public T Telemetry { get; }
    [CompilerGeneratedAttribute]
public sealed virtual T get_Telemetry();
    public sealed virtual void Dispose();
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Testing.NoopTelemetryChannel : object {
    public static NoopTelemetryChannel Instance;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeveloperMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndpointAddress>k__BackingField;
    public Nullable`1<bool> DeveloperMode { get; public set; }
    public string EndpointAddress { get; public set; }
    private static NoopTelemetryChannel();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DeveloperMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeveloperMode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EndpointAddress();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndpointAddress(string value);
    public sealed virtual void Dispose();
    public sealed virtual void Flush();
    public sealed virtual void Send(ITelemetry item);
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Testing.NoopTelemetryClient : object {
    public static NoopTelemetryClient Instance;
    private static NoopTelemetryClient();
    public sealed virtual void Flush();
    public sealed virtual IOperationHolder`1<T> StartOperation(string name);
    public sealed virtual void TrackEvent(string name, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    public sealed virtual void TrackException(Exception exception, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics, string trackedAtMemberName);
    public sealed virtual void TrackTrace(string message, IDictionary`2<string, string> properties);
    public sealed virtual void TrackTrace(string message, SeverityLevel severityLevel, IDictionary`2<string, string> properties);
}
public class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Testing.TelemetryChannelSpy : object {
    private List`1<ITelemetry> _sentItems;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeveloperMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EndpointAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FlushedItemsCount>k__BackingField;
    public Nullable`1<bool> DeveloperMode { get; public set; }
    public string EndpointAddress { get; public set; }
    public bool IsDisposed { get; private set; }
    public int FlushedItemsCount { get; private set; }
    public int SentCount { get; }
    public IReadOnlyList`1<ITelemetry> AllSentTelemetries { get; }
    public IEnumerable`1<DependencyTelemetry> AllDependencyTelemetries { get; }
    public IEnumerable`1<EventTelemetry> AllEventTelemetries { get; }
    public IEnumerable`1<ExceptionTelemetry> AllExceptionTelemetries { get; }
    public IEnumerable`1<RequestTelemetry> AllRequestTelemetries { get; }
    public IEnumerable`1<TraceTelemetry> AllTraceTelemetries { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DeveloperMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeveloperMode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EndpointAddress();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EndpointAddress(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    [CompilerGeneratedAttribute]
public int get_FlushedItemsCount();
    [CompilerGeneratedAttribute]
private void set_FlushedItemsCount(int value);
    public int get_SentCount();
    public IReadOnlyList`1<ITelemetry> get_AllSentTelemetries();
    public IEnumerable`1<DependencyTelemetry> get_AllDependencyTelemetries();
    public IEnumerable`1<EventTelemetry> get_AllEventTelemetries();
    public IEnumerable`1<ExceptionTelemetry> get_AllExceptionTelemetries();
    public IEnumerable`1<RequestTelemetry> get_AllRequestTelemetries();
    public IEnumerable`1<TraceTelemetry> get_AllTraceTelemetries();
    public IEnumerable`1<DependencyTelemetry> DependencyTelemetries(string name, string target, string type);
    public IEnumerable`1<EventTelemetry> EventTelemetries(string name);
    public IEnumerable`1<ExceptionTelemetry> ExceptionTelemetries(string exMessageEquals, string exMessageContains, string trackedAtMember);
    public IEnumerable`1<TException> ExceptionTelemetryExceptions(string exMessageEquals, string exMessageContains);
    public IEnumerable`1<RequestTelemetry> RequestTelemetries(string name);
    public IEnumerable`1<TraceTelemetry> TraceTelemetries(SeverityLevel severity, string messageEquals, string messageContains);
    public IEnumerable`1<TraceTelemetry> TraceTelemetries(string messageEquals, string messageContains);
    protected IEnumerable`1<TraceTelemetry> TraceTelemetriesCore(Nullable`1<SeverityLevel> severity, string messageEquals, string messageContains);
    public virtual void Flush();
    public virtual void Clear();
    public virtual void Send(ITelemetry item);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public static class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Testing.TelemetryTestingUtility : object {
    public static AppTelemetryClient CreateClientWithMinimalConfig(ITelemetryChannel channel);
}
public static class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.TraceContextHelper : object {
    private static Regex TraceParentRegex;
    private static TraceContextHelper();
    public static bool TryParseTraceParent(string traceParent, ValueTuple`2& result);
}
internal class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Tracing.ApplicationNameProvider : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    private static string GetApplicationName();
}
internal static class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Tracing.BatchedTelemetryTraceSource : object {
    public static string TraceSourceName;
    private static TraceSource Singleton;
    private static BatchedTelemetryTraceSource();
    public static void TraceError(string message);
    public static void TraceError(Exception ex, string message);
    public static void TraceWarning(string message);
    public static void TraceInformation(string message);
    public static void TraceVerbose(string message);
}
internal static class Microsoft.PowerPlatform.Tooling.BatchedTelemetry.Tracing.EventSourceKeywords : object {
    public static long UserActionable;
    public static long Diagnostics;
    public static long VerboseFailure;
    public static long ErrorFailure;
    public static long ReservedUserKeywordBegin;
}
