public class Microsoft.Xrm.Tooling.Connector.AttributeData : object {
    private string attributeLabel;
    private AttributeTypeCode attributeType;
    private string schemaName;
    private string displayValue;
    private object actualValue;
    private bool isUnsupported;
    public object ActualValue { get; public set; }
    public string AttributeLabel { get; public set; }
    public AttributeTypeCode AttributeType { get; public set; }
    public string DisplayValue { get; public set; }
    public bool IsUnsupported { get; public set; }
    public string SchemaName { get; public set; }
    public object get_ActualValue();
    public void set_ActualValue(object value);
    public string get_AttributeLabel();
    public void set_AttributeLabel(string value);
    public AttributeTypeCode get_AttributeType();
    public void set_AttributeType(AttributeTypeCode value);
    public string get_DisplayValue();
    public void set_DisplayValue(string value);
    public bool get_IsUnsupported();
    public void set_IsUnsupported(bool value);
    public string get_SchemaName();
    public void set_SchemaName(string value);
}
public enum Microsoft.Xrm.Tooling.Connector.AuthenticationType : Enum {
    public int value__;
    public static AuthenticationType AD;
    public static AuthenticationType Live;
    public static AuthenticationType IFD;
    public static AuthenticationType Claims;
    public static AuthenticationType Office365;
    public static AuthenticationType OAuth;
    public static AuthenticationType Certificate;
    public static AuthenticationType ClientSecret;
    public static AuthenticationType ExternalTokenManagement;
    public static AuthenticationType InvalidConnection;
}
public class Microsoft.Xrm.Tooling.Connector.BatchItemOrganizationRequest : object {
    [CompilerGeneratedAttribute]
private OrganizationRequest <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RequestReferenceNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestDebugMessage>k__BackingField;
    public OrganizationRequest Request { get; public set; }
    public Guid RequestReferenceNumber { get; public set; }
    public string RequestDebugMessage { get; public set; }
    [CompilerGeneratedAttribute]
public OrganizationRequest get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(OrganizationRequest value);
    [CompilerGeneratedAttribute]
public Guid get_RequestReferenceNumber();
    [CompilerGeneratedAttribute]
public void set_RequestReferenceNumber(Guid value);
    [CompilerGeneratedAttribute]
public string get_RequestDebugMessage();
    [CompilerGeneratedAttribute]
public void set_RequestDebugMessage(string value);
}
internal class Microsoft.Xrm.Tooling.Connector.BatchManager : object {
    private Dictionary`2<Guid, RequestBatch> RequestBatches;
    private int MaxNumberOfBatches;
    private int MaxNumberOfRequestsInABatch;
    private CrmLogEntry logger;
    public BatchManager(CrmLogEntry traceLogger, int MaxBatches, int MaxRequestPerBatch);
    public Guid CreateNewBatch(string name, bool returnResults, bool continueOnError);
    public RequestBatch GetRequestBatchById(Guid batchId);
    public RequestBatch GetRequestBatchByName(string batchName);
    public bool AddNewRequestToBatch(Guid batchId, OrganizationRequest request, string debugMsg);
    public void RemoveBatch(Guid batchId);
}
public enum Microsoft.Xrm.Tooling.Connector.BatchStatus : Enum {
    public int value__;
    public static BatchStatus Waiting;
    public static BatchStatus Running;
    public static BatchStatus Complete;
}
public class Microsoft.Xrm.Tooling.Connector.BooleanAttributeData : AttributeData {
    [CompilerGeneratedAttribute]
private OptionMetadata[] <BooleanOptions>k__BackingField;
    public OptionMetadata[] BooleanOptions { get; public set; }
    [CompilerGeneratedAttribute]
public OptionMetadata[] get_BooleanOptions();
    [CompilerGeneratedAttribute]
public void set_BooleanOptions(OptionMetadata[] value);
}
internal class Microsoft.Xrm.Tooling.Connector.CrmConnection : object {
    internal static string sampleClientId;
    internal static string sampleRedirectUrl;
    [CompilerGeneratedAttribute]
private Uri <ServiceUri>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationType <AuthenticationType>k__BackingField;
    [CompilerGeneratedAttribute]
private PromptBehavior <PromptBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <HomeRealmUri>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientCredentials <ClientCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private UserIdentifier <UserIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DomainName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertStoreName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertThumbprint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDiscovery>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Organization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOnPremOauth>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CrmOnlineRegion>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenCacheStorePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseUniqueConnectionInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCurrentUser>k__BackingField;
    public Uri ServiceUri { get; internal set; }
    public AuthenticationType AuthenticationType { get; internal set; }
    public PromptBehavior PromptBehavior { get; internal set; }
    public Uri HomeRealmUri { get; internal set; }
    public ClientCredentials ClientCredentials { get; internal set; }
    public UserIdentifier UserIdentifier { get; internal set; }
    public string DomainName { get; internal set; }
    public string UserId { get; internal set; }
    internal string Password { get; internal set; }
    internal string CertStoreName { get; internal set; }
    internal string CertThumbprint { get; internal set; }
    internal bool SkipDiscovery { get; internal set; }
    public string ClientId { get; internal set; }
    public string ClientSecret { get; internal set; }
    public string Organization { get; internal set; }
    public bool IsOnPremOauth { get; internal set; }
    public string CrmOnlineRegion { get; internal set; }
    public Uri RedirectUri { get; internal set; }
    public string TokenCacheStorePath { get; internal set; }
    public bool UseUniqueConnectionInstance { get; internal set; }
    public bool UseCurrentUser { get; public set; }
    private CrmConnection(IDictionary`2<string, string> connection, bool replaceOffice365);
    private CrmConnection(bool replaceOffice365, string serviceUri, string userName, string password, string domain, string homeRealmUri, string authType, string requireNewInstance, string clientId, string redirectUri, string tokenCacheStorePath, string loginPrompt, string certStoreName, string certThumbprint, string skipDiscovery, string IntegratedSecurity, string clientSecret);
    private static CrmConnection();
    [CompilerGeneratedAttribute]
public Uri get_ServiceUri();
    [CompilerGeneratedAttribute]
internal void set_ServiceUri(Uri value);
    [CompilerGeneratedAttribute]
public AuthenticationType get_AuthenticationType();
    [CompilerGeneratedAttribute]
internal void set_AuthenticationType(AuthenticationType value);
    [CompilerGeneratedAttribute]
public PromptBehavior get_PromptBehavior();
    [CompilerGeneratedAttribute]
internal void set_PromptBehavior(PromptBehavior value);
    [CompilerGeneratedAttribute]
public Uri get_HomeRealmUri();
    [CompilerGeneratedAttribute]
internal void set_HomeRealmUri(Uri value);
    [CompilerGeneratedAttribute]
public ClientCredentials get_ClientCredentials();
    [CompilerGeneratedAttribute]
internal void set_ClientCredentials(ClientCredentials value);
    [CompilerGeneratedAttribute]
public UserIdentifier get_UserIdentifier();
    [CompilerGeneratedAttribute]
internal void set_UserIdentifier(UserIdentifier value);
    [CompilerGeneratedAttribute]
public string get_DomainName();
    [CompilerGeneratedAttribute]
internal void set_DomainName(string value);
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
internal void set_UserId(string value);
    [CompilerGeneratedAttribute]
internal string get_Password();
    [CompilerGeneratedAttribute]
internal void set_Password(string value);
    [CompilerGeneratedAttribute]
internal string get_CertStoreName();
    [CompilerGeneratedAttribute]
internal void set_CertStoreName(string value);
    [CompilerGeneratedAttribute]
internal string get_CertThumbprint();
    [CompilerGeneratedAttribute]
internal void set_CertThumbprint(string value);
    [CompilerGeneratedAttribute]
internal bool get_SkipDiscovery();
    [CompilerGeneratedAttribute]
internal void set_SkipDiscovery(bool value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
internal void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
internal void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public string get_Organization();
    [CompilerGeneratedAttribute]
internal void set_Organization(string value);
    [CompilerGeneratedAttribute]
public bool get_IsOnPremOauth();
    [CompilerGeneratedAttribute]
internal void set_IsOnPremOauth(bool value);
    [CompilerGeneratedAttribute]
public string get_CrmOnlineRegion();
    [CompilerGeneratedAttribute]
internal void set_CrmOnlineRegion(string value);
    [CompilerGeneratedAttribute]
public Uri get_RedirectUri();
    [CompilerGeneratedAttribute]
internal void set_RedirectUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_TokenCacheStorePath();
    [CompilerGeneratedAttribute]
internal void set_TokenCacheStorePath(string value);
    [CompilerGeneratedAttribute]
public bool get_UseUniqueConnectionInstance();
    [CompilerGeneratedAttribute]
internal void set_UseUniqueConnectionInstance(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseCurrentUser();
    [CompilerGeneratedAttribute]
public void set_UseCurrentUser(bool value);
    private bool GetValidUri(string uriSource, Uri& validUriResult);
    private void SetOrgnameAndOnlineRegion(Uri serviceUri);
    public static CrmConnection Parse(string connectionString, bool replaceOffice365);
}
public class Microsoft.Xrm.Tooling.Connector.CrmConnectionStringParsedData : object {
}
public class Microsoft.Xrm.Tooling.Connector.CrmDataTypeWrapper : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private CrmFieldType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferencedEntity>k__BackingField;
    public object Value { get; public set; }
    public CrmFieldType Type { get; public set; }
    public string ReferencedEntity { get; public set; }
    public CrmDataTypeWrapper(object data, CrmFieldType crmFieldType);
    public CrmDataTypeWrapper(object data, CrmFieldType crmFieldType, string relatedEntityName);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public CrmFieldType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(CrmFieldType value);
    [CompilerGeneratedAttribute]
public string get_ReferencedEntity();
    [CompilerGeneratedAttribute]
public void set_ReferencedEntity(string value);
}
public enum Microsoft.Xrm.Tooling.Connector.CrmFieldType : Enum {
    public int value__;
    public static CrmFieldType CrmBoolean;
    public static CrmFieldType CrmDateTime;
    public static CrmFieldType CrmDecimal;
    public static CrmFieldType CrmFloat;
    public static CrmFieldType CrmMoney;
    public static CrmFieldType CrmNumber;
    public static CrmFieldType Customer;
    public static CrmFieldType Key;
    public static CrmFieldType Lookup;
    public static CrmFieldType Picklist;
    public static CrmFieldType String;
    public static CrmFieldType UniqueIdentifier;
    public static CrmFieldType Image;
    public static CrmFieldType File;
    public static CrmFieldType Raw;
}
internal class Microsoft.Xrm.Tooling.Connector.CrmHookServiceBehavior : object {
    private CrmWebSvc _callerCrmWebSvcHandler;
    private int _maxFaultSize;
    private int _maxReceivedMessageSize;
    private string _userAgent;
    private static int MAXFAULTSIZEDEFAULT;
    private static int MAXRECVMESSAGESIZEDEFAULT;
    private static string sericeClientTag;
    public CrmHookServiceBehavior(CrmWebSvc cli);
    public sealed virtual void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    public sealed virtual void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    public sealed virtual void Validate(ServiceEndpoint endpoint);
    public sealed virtual void AfterReceiveReply(Message& reply, object correlationState);
    public sealed virtual object BeforeSendRequest(Message& request, IClientChannel channel);
    private void AddExternalHeaders(HttpRequestMessageProperty httpRequestMessage);
    private static string GetAllCookiesFromHeader(string strHeader);
    private static ArrayList ConvertCookieHeaderToArrayList(string strCookHeader);
    private static string ConvertCookieArraysToCookieString(ArrayList al);
}
[LocalizableAttribute("False")]
internal class Microsoft.Xrm.Tooling.Connector.CrmLogEntry : TraceLoggerBase {
    [CompilerGeneratedAttribute]
private ConcurrentQueue`1<Tuple`2<DateTime, string>> <Logs>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <LogRetentionDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnabledInMemoryLogCapture>k__BackingField;
    public string LastError { get; }
    public string DefaultTraceSourceName { get; }
    public ConcurrentQueue`1<Tuple`2<DateTime, string>> Logs { get; private set; }
    public TimeSpan LogRetentionDuration { get; public set; }
    public bool EnabledInMemoryLogCapture { get; public set; }
    public CrmLogEntry(string traceSourceName);
    public string get_LastError();
    public string get_DefaultTraceSourceName();
    [CompilerGeneratedAttribute]
public ConcurrentQueue`1<Tuple`2<DateTime, string>> get_Logs();
    [CompilerGeneratedAttribute]
private void set_Logs(ConcurrentQueue`1<Tuple`2<DateTime, string>> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_LogRetentionDuration();
    [CompilerGeneratedAttribute]
public void set_LogRetentionDuration(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_EnabledInMemoryLogCapture();
    [CompilerGeneratedAttribute]
public void set_EnabledInMemoryLogCapture(bool value);
    public virtual void ResetLastError();
    public void ClearLogCache();
    public virtual void Log(string message);
    public virtual void Log(string message, TraceEventType eventType);
    public virtual void Log(string message, TraceEventType eventType, Exception exception);
    public virtual void Log(Exception exception);
    private void TraceEvent(TraceEventType eventType, int id, string message);
    private void GetExceptionDetail(object objException, StringBuilder sw, int level, StringBuilder lastErrorMsg);
    private static string GenerateOrgErrorDetailsInfo(ErrorDetailCollection errorDetails);
    private static void FormatExceptionMessage(string source, string targetSite, string message, string stackTrace, StringBuilder sw, int level);
    private static void FormatOrgFaultMessage(string message, string timeOfEvent, string errorCode, string traceText, StringBuilder sw, int level);
    private static void FormatDeploymentFaultMessage(string message, string timeOfEvent, string errorCode, string traceTextList, StringBuilder sw, int level);
}
public class Microsoft.Xrm.Tooling.Connector.CrmServiceClient : object {
    private Dictionary`2<string, Dictionary`2<string, object>> _CachObject;
    private List`1<int> CRMLoadedLCIDList;
    private string CACHOBJECNAME;
    private CrmLogEntry logEntry;
    [CompilerGeneratedAttribute]
private static bool <InMemoryLogCollectionEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static TimeSpan <InMemoryLogCollectionTimeOutMinutes>k__BackingField;
    internal CrmWebSvc CrmConnectionService;
    private DynamicEntityUtility dynamicAppUtility;
    private MetadataUtility metadataUtlity;
    internal object _lockObject;
    private BatchManager _BatchManager;
    private static CrmServiceClientTokenCache _CrmServiceClientTokenCache;
    private bool _disableConnectionLocking;
    public string _sdkVersionProperty;
    private int _maxRetryCount;
    private TimeSpan _retryPauseTime;
    private TimeSpan _retryPauseTimeRunning;
    private static int RateLimitExceededErrorCode;
    private static int TimeLimitExceededErrorCode;
    private static int ConcurrencyLimitExceededErrorCode;
    [CompilerGeneratedAttribute]
private bool <IsReady>k__BackingField;
    [CompilerGeneratedAttribute]
private static IOverrideAuthHookWrapper <AuthOverrideHook>k__BackingField;
    [CompilerGeneratedAttribute]
private static IAddRequestHeaders <AddHttpRequestHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <EnableDeprecatedOnLineWSTrustFlow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BypassPluginExecution>k__BackingField;
    private bool disposedValue;
    public static bool InMemoryLogCollectionEnabled { get; public set; }
    public static TimeSpan InMemoryLogCollectionTimeOutMinutes { get; public set; }
    public int MaxRetryCount { get; public set; }
    public TimeSpan RetryPauseTime { get; public set; }
    public bool IsReady { get; private set; }
    public bool IsBatchOperationsAvailable { get; }
    public string Authority { get; }
    public string OAuthUserId { get; }
    public static TimeSpan MaxConnectionTimeout { get; public set; }
    public AuthenticationType ActiveAuthenticationType { get; }
    public OrganizationServiceProxy OrganizationServiceProxy { get; }
    public OrganizationWebProxyClient OrganizationWebProxyClient { get; }
    public string CurrentAccessToken { get; }
    public bool EnableAffinityCookie { get; public set; }
    private IOrganizationService _CrmService { get; }
    internal WhoAmIResponse _SystemUser { get; internal set; }
    public string LastCrmError { get; }
    public Exception LastCrmException { get; }
    public Uri CrmConnectOrgUriActual { get; }
    public string ConnectedOrgFriendlyName { get; }
    public string ConnectedOrgUniqueName { get; }
    public OrganizationDetail OrganizationDetail { get; }
    public EndpointCollection ConnectedOrgPublishedEndpoints { get; }
    public object ConnectionLockObject { get; }
    public Version ConnectedOrgVersion { get; }
    public Guid ConnectedOrgId { get; }
    public bool DisableCrossThreadSafeties { get; public set; }
    internal static IOverrideAuthHookWrapper AuthOverrideHook { get; public set; }
    internal static IAddRequestHeaders AddHttpRequestHeaders { get; public set; }
    public static bool EnableDeprecatedOnLineWSTrustFlow { get; public set; }
    public Guid CallerId { get; public set; }
    public Nullable`1<Guid> CallerAADObjectId { get; public set; }
    public Nullable`1<Guid> SessionTrackingId { get; public set; }
    public bool ForceServerMetadataCacheConsistency { get; public set; }
    public string SdkVersionProperty { get; }
    public Guid TenantId { get; }
    public string EnvironmentId { get; }
    public bool BypassPluginExecution { get; public set; }
    public int RecommendedDegreesOfParallelism { get; }
    public CrmServiceClient(string crmConnectionString);
    public CrmServiceClient(OrganizationServiceProxy externalOrgServiceProxy);
    public CrmServiceClient(OrganizationWebProxyClient externalOrgWebProxyClient);
    public CrmServiceClient(NetworkCredential credential, string hostName, string port, string orgName, bool useUniqueInstance, bool useSsl, OrganizationDetail orgDetail);
    public CrmServiceClient(NetworkCredential credential, AuthenticationType authType, string hostName, string port, string orgName, bool useUniqueInstance, bool useSsl, OrganizationDetail orgDetail);
    public CrmServiceClient(string userId, SecureString password, string domain, string homeRealm, string hostName, string port, string orgName, bool useUniqueInstance, bool useSsl, OrganizationDetail orgDetail);
    public CrmServiceClient(string crmUserId, SecureString crmPassword, string crmRegion, string orgName, bool useUniqueInstance, bool useSsl, OrganizationDetail orgDetail, bool isOffice365);
    public CrmServiceClient(string crmUserId, SecureString crmPassword, string crmRegion, string orgName, bool useUniqueInstance, OrganizationDetail orgDetail, UserIdentifier user, string clientId, Uri redirectUri, string tokenCachePath, OrganizationWebProxyClient externalOrgWebProxyClient, PromptBehavior promptBehavior, bool useDefaultCreds);
    public CrmServiceClient(string crmUserId, SecureString crmPassword, string domain, string homeRealm, string hostName, string port, string orgName, bool useSsl, bool useUniqueInstance, OrganizationDetail orgDetail, UserIdentifier user, string clientId, Uri redirectUri, string tokenCachePath, OrganizationWebProxyClient externalOrgWebProxyClient, PromptBehavior promptBehavior);
    public CrmServiceClient(X509Certificate2 certificate, StoreName certificateStoreName, string certificateThumbPrint, Uri instanceUrl, string orgName, bool useSsl, bool useUniqueInstance, OrganizationDetail orgDetail, string clientId, Uri redirectUri, string tokenCachePath);
    public CrmServiceClient(X509Certificate2 certificate, StoreName certificateStoreName, string certificateThumbPrint, Uri instanceUrl, bool useUniqueInstance, OrganizationDetail orgDetail, string clientId, Uri redirectUri, string tokenCachePath);
    public CrmServiceClient(Uri instanceUrl, string clientId, string clientSecret, bool useUniqueInstance, string tokenCachePath);
    public CrmServiceClient(Uri instanceUrl, string clientId, SecureString clientSecret, bool useUniqueInstance, string tokenCachePath);
    public CrmServiceClient(Uri instanceUrl, bool useUniqueInstance);
    internal CrmServiceClient(OrganizationWebProxyClient externalOrgWebProxyClient, bool isCloned);
    private static CrmServiceClient();
    [CompilerGeneratedAttribute]
public static bool get_InMemoryLogCollectionEnabled();
    [CompilerGeneratedAttribute]
public static void set_InMemoryLogCollectionEnabled(bool value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_InMemoryLogCollectionTimeOutMinutes();
    [CompilerGeneratedAttribute]
public static void set_InMemoryLogCollectionTimeOutMinutes(TimeSpan value);
    public int get_MaxRetryCount();
    public void set_MaxRetryCount(int value);
    public TimeSpan get_RetryPauseTime();
    public void set_RetryPauseTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_IsReady();
    [CompilerGeneratedAttribute]
private void set_IsReady(bool value);
    public bool get_IsBatchOperationsAvailable();
    public string get_Authority();
    public string get_OAuthUserId();
    public static TimeSpan get_MaxConnectionTimeout();
    public static void set_MaxConnectionTimeout(TimeSpan value);
    public AuthenticationType get_ActiveAuthenticationType();
    public OrganizationServiceProxy get_OrganizationServiceProxy();
    public OrganizationWebProxyClient get_OrganizationWebProxyClient();
    public string get_CurrentAccessToken();
    public bool get_EnableAffinityCookie();
    public void set_EnableAffinityCookie(bool value);
    private IOrganizationService get__CrmService();
    internal WhoAmIResponse get__SystemUser();
    internal void set__SystemUser(WhoAmIResponse value);
    public string get_LastCrmError();
    public Exception get_LastCrmException();
    public Uri get_CrmConnectOrgUriActual();
    public string get_ConnectedOrgFriendlyName();
    public string get_ConnectedOrgUniqueName();
    public OrganizationDetail get_OrganizationDetail();
    public EndpointCollection get_ConnectedOrgPublishedEndpoints();
    public object get_ConnectionLockObject();
    public Version get_ConnectedOrgVersion();
    public Guid get_ConnectedOrgId();
    public bool get_DisableCrossThreadSafeties();
    public void set_DisableCrossThreadSafeties(bool value);
    [CompilerGeneratedAttribute]
internal static IOverrideAuthHookWrapper get_AuthOverrideHook();
    [CompilerGeneratedAttribute]
public static void set_AuthOverrideHook(IOverrideAuthHookWrapper value);
    [CompilerGeneratedAttribute]
internal static IAddRequestHeaders get_AddHttpRequestHeaders();
    [CompilerGeneratedAttribute]
public static void set_AddHttpRequestHeaders(IAddRequestHeaders value);
    [CompilerGeneratedAttribute]
public static bool get_EnableDeprecatedOnLineWSTrustFlow();
    [CompilerGeneratedAttribute]
public static void set_EnableDeprecatedOnLineWSTrustFlow(bool value);
    public Guid get_CallerId();
    public void set_CallerId(Guid value);
    public Nullable`1<Guid> get_CallerAADObjectId();
    public void set_CallerAADObjectId(Nullable`1<Guid> value);
    public Nullable`1<Guid> get_SessionTrackingId();
    public void set_SessionTrackingId(Nullable`1<Guid> value);
    public bool get_ForceServerMetadataCacheConsistency();
    public void set_ForceServerMetadataCacheConsistency(bool value);
    public string get_SdkVersionProperty();
    public Guid get_TenantId();
    public string get_EnvironmentId();
    [CompilerGeneratedAttribute]
public bool get_BypassPluginExecution();
    [CompilerGeneratedAttribute]
public void set_BypassPluginExecution(bool value);
    public int get_RecommendedDegreesOfParallelism();
    private void ConnectToCrmWebService(string crmConnectionString);
    internal void CreateCRMWebServiceConnection(OrganizationServiceProxy externalOrgServiceProxy, AuthenticationType requestedAuthType, string hostName, string port, string orgName, NetworkCredential credential, string userId, SecureString password, string domain, string CrmOnlineRegion, string claimsHomeRealm, bool useSsl, bool useUniqueInstance, OrganizationDetail orgDetail, UserIdentifier user, string clientId, Uri redirectUri, PromptBehavior promptBehavior, string tokenCachePath, OrganizationWebProxyClient externalOrgWebProxyClient, string certificateThumbPrint, StoreName certificateStoreName, X509Certificate2 certificate, Uri instanceUrl, bool isCloned, bool useDefaultCreds);
    public IEnumerable`1<Tuple`2<DateTime, string>> GetAllLogs();
    public String[] GetAllLogsAsStringList();
    public CrmServiceClient Clone();
    public CrmServiceClient Clone(Assembly strongTypeAsm);
    public static OrganizationDetailCollection DiscoverOrganizations(Uri discoveryServiceUri, ClientCredentials clientCredentials, UserIdentifier user, string clientId, Uri redirectUri, string tokenCachePath, bool isOnPrem, string authority, PromptBehavior promptBehavior, bool useDefaultCreds);
    public static OrganizationDetailCollection DiscoverGlobalOrganizations(Uri discoveryServiceUri, ClientCredentials clientCredentials, UserIdentifier user, string clientId, Uri redirectUri, string tokenCachePath, bool isOnPrem, string authority, PromptBehavior promptBehavior, bool useDefaultCreds);
    public static OrganizationDetailCollection DiscoverGlobalOrganizations(Uri discoveryServiceUri, ClientCredentials clientCredentials, UserIdentifier user, string clientId, Uri redirectUri, string tokenCachePath, bool isOnPrem, string authority, UserIdentifier& foundUser, PromptBehavior promptBehavior, bool useDefaultCreds);
    public static OrganizationDetailCollection DiscoverOrganizations(Uri discoveryServiceUri, Uri homeRealmUri, ClientCredentials clientCredentials, ClientCredentials deviceCredentials);
    public static OrganizationDetailCollection DiscoverOrganizations(Uri discoveryServiceUri, Uri homeRealmUri, NetworkCredential networkCredential);
    public Guid CreateBatchOperationRequest(string batchName, bool returnResults, bool continueOnError);
    public Guid GetBatchOperationIdRequestByName(string batchName);
    public OrganizationRequest GetBatchRequestAtPosition(Guid batchId, int position);
    public void ReleaseBatchInfoById(Guid batchId);
    public RequestBatch GetBatchById(Guid batchId);
    public List`1<Dictionary`2<string, Dictionary`2<string, object>>> RetrieveBatchResponse(Guid batchId);
    public ExecuteMultipleResponse ExecuteBatch(Guid batchId);
    public Guid CreateNewRecord(string entityName, Dictionary`2<string, CrmDataTypeWrapper> valueArray, string applyToSolution, bool enabledDuplicateDetection, Guid batchId);
    public bool UpdateEntity(string entityName, string keyFieldName, Guid id, Dictionary`2<string, CrmDataTypeWrapper> fieldList, string applyToSolution, bool enabledDuplicateDetection, Guid batchId);
    public bool UpdateStateAndStatusForEntity(string entName, Guid id, string stateCode, string statusCode, Guid batchId);
    public bool UpdateStateAndStatusForEntity(string entName, Guid id, int stateCode, int statusCode, Guid batchId);
    public bool DeleteEntity(string entityType, Guid entityId, Guid batchId);
    public Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataBySearchParams(string entityName, Dictionary`2<string, string> searchParameters, LogicalSearchOperator searchOperator, List`1<string> fieldList, Guid batchId);
    public Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataBySearchParams(string entityName, List`1<CrmSearchFilter> searchParameters, LogicalSearchOperator searchOperator, List`1<string> fieldList, Guid batchId);
    public Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataBySearchParams(string entityName, List`1<CrmSearchFilter> searchParameters, LogicalSearchOperator searchOperator, List`1<string> fieldList, Dictionary`2<string, LogicalSortOrder> sortParameters, int pageCount, int pageNumber, string pageCookie, String& outPageCookie, Boolean& isMoreRecords, Guid batchId);
    public Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataByFetchSearch(string fetchXml, Guid batchId);
    public EntityCollection GetEntityDataByFetchSearchEC(string fetchXml, Guid batchId);
    public Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataByFetchSearch(string fetchXml, int pageCount, int pageNumber, string pageCookie, String& outPageCookie, Boolean& isMoreRecords, Guid batchId);
    public EntityCollection GetEntityDataByFetchSearchEC(string fetchXml, int pageCount, int pageNumber, string pageCookie, String& outPageCookie, Boolean& isMoreRecords, Guid batchId);
    public Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataByLinkedSearch(string returnEntityName, Dictionary`2<string, string> primarySearchParameters, string linkedEntityName, Dictionary`2<string, string> linkedSearchParameters, string linkedEntityLinkAttribName, string m2MEntityName, string returnEntityPrimaryId, LogicalSearchOperator searchOperator, List`1<string> fieldList, Guid batchId);
    public Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataByLinkedSearch(string returnEntityName, List`1<CrmSearchFilter> primarySearchParameters, string linkedEntityName, List`1<CrmSearchFilter> linkedSearchParameters, string linkedEntityLinkAttribName, string m2MEntityName, string returnEntityPrimaryId, LogicalSearchOperator searchOperator, List`1<string> fieldList, Guid batchId, bool isReflexiveRelationship);
    public Dictionary`2<string, object> GetEntityDataById(string searchEntity, Guid entityId, List`1<string> fieldList, Guid batchId);
    public Guid CreateAnnotation(string targetEntityTypeName, Guid targetEntityId, Dictionary`2<string, CrmDataTypeWrapper> fieldList, Guid batchId);
    public Guid CreateNewActivityEntry(string activityEntityTypeName, string regardingEntityTypeName, Guid regardingId, string subject, string description, string creatingUserId, Dictionary`2<string, CrmDataTypeWrapper> fieldList, Guid batchId);
    public bool CloseActivity(string activityEntityType, Guid activityId, string stateCode, string statusCode, Guid batchId);
    private bool UpdateStateStatusForEntity(string entName, Guid entId, string newState, string newStatus, int newStateid, int newStatusid, Guid batchId);
    public Dictionary`2<string, Dictionary`2<string, object>> GetActivitiesBy(string searchEntity, Guid entityId, List`1<string> fieldList, LogicalSearchOperator searchOperator, Dictionary`2<string, string> searchParameters, Dictionary`2<string, LogicalSortOrder> sortParameters, int pageCount, int pageNumber, string pageCookie, String& outPageCookie, Boolean& isMoreRecords, Guid batchId);
    public Dictionary`2<string, Dictionary`2<string, object>> GetActivitiesBy(string searchEntity, Guid entityId, List`1<string> fieldList, LogicalSearchOperator searchOperator, List`1<CrmSearchFilter> searchParameters, Dictionary`2<string, LogicalSortOrder> sortParameters, int pageCount, int pageNumber, string pageCookie, String& outPageCookie, Boolean& isMoreRecords, Guid batchId);
    public Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataByRollup(string searchEntity, Guid entityId, string rollupfromEntity, List`1<string> fieldList, LogicalSearchOperator searchOperator, Dictionary`2<string, string> searchParameters, Dictionary`2<string, LogicalSortOrder> sortParameters, Guid batchId);
    public Dictionary`2<string, Dictionary`2<string, object>> GetEntityDataByRollup(string searchEntity, Guid entityId, string rollupfromEntity, List`1<string> fieldList, LogicalSearchOperator searchOperator, List`1<CrmSearchFilter> searchParameters, Dictionary`2<string, LogicalSortOrder> sortParameters, int pageCount, int pageNumber, string pageCookie, String& outPageCookie, Boolean& isMoreRecords, Guid batchId);
    public T GetDataByKeyFromResultsSet(Dictionary`2<string, object> results, string key);
    public Guid ExecuteWorkflowOnEntity(string workflowName, Guid id, Guid batchId);
    public Guid SubmitImportRequest(ImportRequest importRequest, DateTime delayUntil);
    public Guid ImportDataMapToCrm(string dataMapXml, bool replaceIds, bool dataMapXmlIsFilePath);
    public Guid ImportSolutionToCrmAsync(string solutionPath, Guid& importId, bool activatePlugIns, bool overwriteUnManagedCustomizations, bool skipDependancyOnProductUpdateCheckOnInstall, bool importAsHoldingSolution, bool isInternalUpgrade, Dictionary`2<string, object> extraParameters);
    public Guid ImportSolutionAsync(Guid StageSolutionUploadId, Guid& importId, bool activatePlugIns, bool overwriteUnManagedCustomizations, bool skipDependancyOnProductUpdateCheckOnInstall, bool importAsHoldingSolution, bool isInternalUpgrade, Dictionary`2<string, object> extraParameters);
    public StageSolutionResults StageSolution(string solutionPath, MemoryStream solutionStream);
    public Guid ImportSolutionToCrm(string solutionPath, Guid& importId, bool activatePlugIns, bool overwriteUnManagedCustomizations, bool skipDependancyOnProductUpdateCheckOnInstall, bool importAsHoldingSolution, bool isInternalUpgrade, Dictionary`2<string, object> extraParameters);
    public Guid ImportSolutionToCrm(Guid StageSolutionUploadId, Guid& importId, bool activatePlugIns, bool overwriteUnManagedCustomizations, bool skipDependancyOnProductUpdateCheckOnInstall, bool importAsHoldingSolution, bool isInternalUpgrade, Dictionary`2<string, object> extraParameters);
    public Guid DeleteAndPromoteSolutionAsync(string uniqueName);
    public Guid InstallSampleDataToCrm();
    public Guid UninstallSampleDataFromCrm();
    public ImportStatus IsSampleDataInstalled();
    public bool CreateEntityAssociation(string entityName1, Guid entity1Id, string entityName2, Guid entity2Id, string relationshipName, Guid batchId);
    public bool CreateMultiEntityAssociation(string targetEntity, Guid targetEntity1Id, string sourceEntityName, List`1<Guid> sourceEntitieIds, string relationshipName, Guid batchId, bool isReflexiveRelationship);
    public bool DeleteEntityAssociation(string entityName1, Guid entity1Id, string entityName2, Guid entity2Id, string relationshipName, Guid batchId);
    public bool AssignEntityToUser(Guid userId, string entityName, Guid entityId, Guid batchId);
    public bool AddEntityToQueue(Guid entityId, string entityName, string queueName, Guid workingUserId, bool setWorkingByUser, Guid batchId);
    public bool SendSingleEmail(Guid emailid, string token, Guid batchId);
    public Guid GetMyCrmUserId();
    public Guid CloseQuote(Guid quoteId, Dictionary`2<string, CrmDataTypeWrapper> fieldList, int quoteStatusCode, Guid batchId);
    public Guid CloseOpportunity(Guid opportunityId, Dictionary`2<string, CrmDataTypeWrapper> fieldList, int opportunityStatusCode, Guid batchId);
    public Guid CloseIncident(Guid incidentId, Dictionary`2<string, CrmDataTypeWrapper> fieldList, int incidentStatusCode, Guid batchId);
    public Guid CancelSalesOrder(Guid salesOrderId, Dictionary`2<string, CrmDataTypeWrapper> fieldList, int orderStatusCode, Guid batchId);
    public Guid CloseTroubleTicket(Guid ticketId, string subject, string description, Guid batchId);
    public PickListMetaElement GetPickListElementFromMetadataEntity(string targetEntity, string attribName);
    public OptionSetMetadata GetGlobalOptionSetMetadata(string globalOptionSetName);
    public List`1<EntityMetadata> GetAllEntityMetadata(bool onlyPublished, EntityFilters filter);
    public EntityMetadata GetEntityMetadata(string entityLogicalname, EntityFilters queryFilter);
    public List`1<EntityReference> GetEntityFormIdListByType(string entityLogicalname, FormTypeId formTypeId);
    public List`1<AttributeMetadata> GetAllAttributesForEntity(string entityLogicalname);
    public AttributeMetadata GetEntityAttributeMetadataForAttribute(string entityLogicalname, string attribName);
    public string GetEntityDisplayName(string entityName, int entityTypeCode);
    public string GetEntityDisplayNamePlural(string entityName, int entityTypeCode);
    public void ResetLocalMetadataCache(string entityName);
    private string GetEntityDisplayNameImpl(string entityName, int entityTypeCode, bool getPlural);
    public string GetEntityTypeCode(string entityName);
    public string GetEntityName(int entityTypeCode);
    public bool CreateOrUpdatePickListElement(string targetEntity, string attribName, List`1<LocalizedLabel> locLabelList, int valueData, bool publishOnComplete);
    public bool PublishEntity(string entityName);
    private bool LoadCRMLCIDs();
    public static bool RemoveOAuthTokenCache(string tokenCachePath);
    private string AddPagingParametersToFetchXml(string fetchXml, int pageCount, int pageNum, string pageCookie);
    public static SecureString MakeSecureString(string pass);
    private static QueryExpression BuildQueryFilter(string entityName, List`1<CrmSearchFilter> searchParams, List`1<string> fieldList, LogicalSearchOperator searchOperator);
    private static void BuildSearchFilterListFromSearchTerms(Dictionary`2<string, string> inSearchParams, List`1<CrmSearchFilter> outSearchList);
    private static List`1<FilterExpression> BuildFilterList(List`1<CrmSearchFilter> searchParams);
    private static string GetLocalLabel(Label crmLabel);
    private Guid CreateFaxActivity(string subject, string description, string reguardingEntType, Guid reguardingGuid, string CreatingUserID);
    private static void AddDataToResultSet(Dictionary`2& resultSet, Entity dataEntity);
    private Guid GetLookupValueForEntity(string entName, string Value);
    private Guid LookupEntitiyID(string SearchValue, string ent, string IDField, string SearchField);
    private void AddValueToPropertyList(KeyValuePair`2<string, CrmDataTypeWrapper> Field, AttributeCollection PropertyList);
    private static Dictionary`2<string, Dictionary`2<string, object>> CreateResultDataSet(EntityCollection resp);
    private bool AddRequestToBatch(Guid batchId, OrganizationRequest req, string batchTagText, string successText);
    public HttpResponseMessage ExecuteCrmWebRequest(HttpMethod method, string queryString, string body, Dictionary`2<string, List`1<string>> customHeaders, string contentType);
    public OrganizationResponse ExecuteCrmOrganizationRequest(OrganizationRequest req, string logMessageTag);
    public bool ExecuteCrmEntityDeleteRequest(string entName, Guid entId, string logMessageTag);
    internal Guid ImportSolutionToCrmImpl(string solutionPath, Guid stageSolutionUploadId, Guid& importId, bool activatePlugIns, bool overwriteUnManagedCustomizations, bool skipDependancyOnProductUpdateCheckOnInstall, bool importAsHoldingSolution, bool isInternalUpgrade, bool useAsync, Dictionary`2<string, object> extraParameters);
    internal OrganizationResponse CrmCommand_Execute(OrganizationRequest req, string errorStringCheck);
    private bool ShouldRetry(OrganizationRequest req, Exception ex, int retryCount, Boolean& isThrottlingRetry);
    private void RetryRequest(OrganizationRequest req, Guid requestTrackingId, TimeSpan LockWait, Stopwatch logDt, Exception ex, string errorStringCheck, Int32& retryCount, bool isThrottled);
    private void LogFailure(OrganizationRequest req, Guid requestTrackingId, TimeSpan LockWait, Stopwatch logDt, Exception ex, string errorStringCheck, bool isTerminalFailure);
    private void LogRetry(int retryCount, OrganizationRequest req, bool isTerminalFailure, bool isThrottled);
    private void LogException(OrganizationRequest req, Exception ex, string errorStringCheck);
    [AsyncStateMachineAttribute("Microsoft.Xrm.Tooling.Connector.CrmServiceClient/<CrmCommand_WebExecute>d__243")]
internal Task`1<HttpResponseMessage> CrmCommand_WebExecute(string queryString, string body, HttpMethod method, Dictionary`2<string, List`1<string>> customHeaders, string contentType, string errorStringCheck);
    public sealed virtual void Associate(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    public sealed virtual Guid Create(Entity entity);
    public sealed virtual void Delete(string entityName, Guid id);
    public sealed virtual void Disassociate(string entityName, Guid entityId, Relationship relationship, EntityReferenceCollection relatedEntities);
    public sealed virtual OrganizationResponse Execute(OrganizationRequest request);
    public sealed virtual Entity Retrieve(string entityName, Guid id, ColumnSet columnSet);
    public sealed virtual EntityCollection RetrieveMultiple(QueryBase query);
    public sealed virtual void Update(Entity entity);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <SubmitImportRequest>b__179_1(Guid i);
}
internal class Microsoft.Xrm.Tooling.Connector.CrmServiceClientTokenCache : TokenCache {
    private CrmLogEntry logEntry;
    private static string _cacheFilePath;
    private object _fileLocker;
    private bool _UseLocalFileEncryption;
    private bool disposedValue;
    public CrmServiceClientTokenCache(string cacheFilePath);
    public bool Clear(string tokenFilePath);
    private void BeforeAccessNotification(TokenCacheNotificationArgs args);
    private void AfterAccessNotification(TokenCacheNotificationArgs args);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Microsoft.Xrm.Tooling.Connector.CrmWebSvc : object {
    private OrganizationServiceProxy _svc;
    private OrganizationServiceProxy _externalSvcProxy;
    private OrganizationWebProxyClient _svcWebClientProxy;
    private OrganizationWebProxyClient _externalWebClientProxy;
    private WhoAmIResponse user;
    private string _hostname;
    private string _port;
    private string _organization;
    private AuthenticationType _eAuthType;
    private NetworkCredential _AccessCred;
    private ClientCredentials _UserClientCred;
    private ClientCredentials _DeviceCredentials;
    private string _InternetProtocalToUse;
    private OrganizationDetail _OrgDetail;
    private Uri _ActualCrmOrgUri;
    private string _LiveID;
    private SecureString _LivePass;
    private string ExpiredLiveAuthTicket;
    private string _CrmOnlineRegion;
    private string _ClaimsuserId;
    private SecureString _Claimspassword;
    private string _HomeRealmUrl;
    private string _ServiceCACHEName;
    private static bool _ADALLoggingSet;
    private static Version _ADALAsmVersion;
    private UserIdentifier _user;
    private string _clientId;
    private Uri _redirectUri;
    private PromptBehavior _promptBehavior;
    private string _tokenCachePath;
    private AuthenticationContext _authenticationContext;
    private string _resource;
    private bool _isOnPremOAuth;
    private static string _authority;
    private static string _userId;
    private bool _isCalledbyExecuteRequest;
    private bool _isDefaultCredsLoginForOAuth;
    private bool _enableCookieRelay;
    private bool firstPass;
    private AuthenticationResult _oAuthar;
    private TimeSpan _tokenOffSetTimeSpan;
    private bool unqueInstance;
    private X509Certificate2 _certificateOfConnection;
    private string _certificateThumbprint;
    private StoreName _certificateStoreLocation;
    private Uri _targetInstanceUriToConnectTo;
    private string SoapOrgUriFormat;
    private static string _baseSoapOrgUriFormat;
    private string WebApiUriFormat;
    private static string _baseWebApiUriFormat;
    private static string _globalDiscoBaseWebAPIUriFormat;
    private static string _globlaDiscoVersion;
    private Guid _OrganizationId;
    private static TimeSpan _MaxConnectionTimeout;
    private Func`1<string> GetAccessTokenFromParent;
    private Guid _TenantId;
    private string _EnvironmentId;
    [CompilerGeneratedAttribute]
private bool <IsAClone>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <CallerAADObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <SessionTrackingId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceServerCacheConsistency>k__BackingField;
    [CompilerGeneratedAttribute]
private CrmLogEntry <logEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <isLogEntryCreatedLocaly>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <CrmConnectODataBaseUriActual>k__BackingField;
    internal bool UseExternalConnection;
    [CompilerGeneratedAttribute]
private string <ConnectedOrgFriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private EndpointCollection <ConnectedOrgPublishedEndpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <OrganizationVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IOverrideAuthHookWrapper <AuthOverrideHook>k__BackingField;
    [CompilerGeneratedAttribute]
private IAddRequestHeaders <AddHttpRequestHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentCookieCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RecommendedDegreesOfParallelism>k__BackingField;
    private bool disposedValue;
    internal bool IsAClone { get; internal set; }
    public Nullable`1<Guid> CallerAADObjectId { get; public set; }
    internal Nullable`1<Guid> SessionTrackingId { get; internal set; }
    internal bool ForceServerCacheConsistency { get; internal set; }
    private string GlobalDiscoveryAllInstancesUri { get; }
    private string GlobalDiscoveryInstanceUriFormat { get; }
    internal string ServiceCACHEName { get; }
    internal string Authority { get; }
    internal AuthenticationContext AuthContext { get; }
    internal string UserId { get; }
    internal bool CalledbyExecuteRequest { get; internal set; }
    private CrmLogEntry logEntry { get; private set; }
    public bool isLogEntryCreatedLocaly { get; public set; }
    internal NetworkCredential CrmServiceAccessCredential { get; internal set; }
    internal string InternetProtocalToUse { get; internal set; }
    internal OrganizationDetail ConnectedOrganizationDetail { get; }
    internal AuthenticationType AuthenticationTypeInUse { get; }
    internal OrganizationServiceProxy CrmSvc { get; }
    internal OrganizationWebProxyClient CrmWebClient { get; }
    internal string CustomerOrganization { get; internal set; }
    internal string CrmHostPort { get; internal set; }
    internal string CrmHostName { get; internal set; }
    internal WhoAmIResponse CrmUser { get; internal set; }
    internal Uri CrmConnectOrgUriActual { get; }
    internal Uri CrmConnectODataBaseUriActual { get; internal set; }
    internal string ConnectedOrgFriendlyName { get; private set; }
    internal EndpointCollection ConnectedOrgPublishedEndpoints { get; private set; }
    internal Version OrganizationVersion { get; private set; }
    internal Guid OrganizationId { get; internal set; }
    internal Guid TenantId { get; internal set; }
    internal string EnvironmentId { get; internal set; }
    internal IOverrideAuthHookWrapper AuthOverrideHook { get; internal set; }
    internal IAddRequestHeaders AddHttpRequestHeaders { get; internal set; }
    internal string BaseWebAPIDataFormat { get; }
    internal static TimeSpan MaxConnectionTimeout { get; internal set; }
    internal bool EnableCookieRelay { get; internal set; }
    internal string CurrentCookieCollection { get; internal set; }
    internal int RecommendedDegreesOfParallelism { get; internal set; }
    internal CrmWebSvc(OrganizationServiceProxy externalOrgSvcProxy, CrmLogEntry logSink);
    internal CrmWebSvc(OrganizationWebProxyClient externalOrgWebProxyClient, CrmLogEntry logSink);
    internal CrmWebSvc(AuthenticationType authType, string hostName, string port, string orgName, NetworkCredential providedCredential, bool useUniqueCacheName, OrganizationDetail orgDetail, CrmLogEntry logSink, Uri instanceToConnectToo);
    internal CrmWebSvc(AuthenticationType authType, string hostName, string port, string orgName, string homeRealmUrl, string userName, SecureString password, bool useUniqueCacheName, OrganizationDetail orgDetail, CrmLogEntry logSink, Uri instanceToConnectToo);
    internal CrmWebSvc(AuthenticationType authType, string orgName, string liveUserId, SecureString livePass, string crmOnlineRegion, bool useUniqueCacheName, OrganizationDetail orgDetail, Uri instanceToConnectToo, CrmLogEntry logSink);
    internal CrmWebSvc(AuthenticationType authType, string orgName, string liveUserId, SecureString livePass, string crmOnlineRegion, bool useUniqueCacheName, OrganizationDetail orgDetail, UserIdentifier user, string clientId, Uri redirectUri, PromptBehavior promptBehavior, string tokenCachePath, string hostName, string port, bool onPrem, CrmLogEntry logSink, Uri instanceToConnectToo, bool useDefaultCreds);
    internal CrmWebSvc(AuthenticationType authType, Uri instanceToConnectToo, bool useUniqueCacheName, OrganizationDetail orgDetail, string clientId, Uri redirectUri, string certThumbprint, StoreName certStoreName, X509Certificate2 certifcate, string tokenCachePath, string hostName, string port, bool onPrem, CrmLogEntry logSink);
    private static CrmWebSvc();
    [CompilerGeneratedAttribute]
internal bool get_IsAClone();
    [CompilerGeneratedAttribute]
internal void set_IsAClone(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_CallerAADObjectId();
    [CompilerGeneratedAttribute]
public void set_CallerAADObjectId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<Guid> get_SessionTrackingId();
    [CompilerGeneratedAttribute]
internal void set_SessionTrackingId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
internal bool get_ForceServerCacheConsistency();
    [CompilerGeneratedAttribute]
internal void set_ForceServerCacheConsistency(bool value);
    private string get_GlobalDiscoveryAllInstancesUri();
    private string get_GlobalDiscoveryInstanceUriFormat();
    internal string get_ServiceCACHEName();
    internal string get_Authority();
    internal AuthenticationContext get_AuthContext();
    internal string get_UserId();
    internal bool get_CalledbyExecuteRequest();
    internal void set_CalledbyExecuteRequest(bool value);
    [CompilerGeneratedAttribute]
private CrmLogEntry get_logEntry();
    [CompilerGeneratedAttribute]
private void set_logEntry(CrmLogEntry value);
    internal IEnumerable`1<Tuple`2<DateTime, string>> GetAllLogs();
    [CompilerGeneratedAttribute]
public bool get_isLogEntryCreatedLocaly();
    [CompilerGeneratedAttribute]
public void set_isLogEntryCreatedLocaly(bool value);
    internal NetworkCredential get_CrmServiceAccessCredential();
    internal void set_CrmServiceAccessCredential(NetworkCredential value);
    internal string get_InternetProtocalToUse();
    internal void set_InternetProtocalToUse(string value);
    internal OrganizationDetail get_ConnectedOrganizationDetail();
    internal AuthenticationType get_AuthenticationTypeInUse();
    internal OrganizationServiceProxy get_CrmSvc();
    internal OrganizationWebProxyClient get_CrmWebClient();
    internal string get_CustomerOrganization();
    internal void set_CustomerOrganization(string value);
    internal string get_CrmHostPort();
    internal void set_CrmHostPort(string value);
    internal string get_CrmHostName();
    internal void set_CrmHostName(string value);
    internal WhoAmIResponse get_CrmUser();
    internal void set_CrmUser(WhoAmIResponse value);
    internal Uri get_CrmConnectOrgUriActual();
    [CompilerGeneratedAttribute]
internal Uri get_CrmConnectODataBaseUriActual();
    [CompilerGeneratedAttribute]
internal void set_CrmConnectODataBaseUriActual(Uri value);
    [CompilerGeneratedAttribute]
internal string get_ConnectedOrgFriendlyName();
    [CompilerGeneratedAttribute]
private void set_ConnectedOrgFriendlyName(string value);
    [CompilerGeneratedAttribute]
internal EndpointCollection get_ConnectedOrgPublishedEndpoints();
    [CompilerGeneratedAttribute]
private void set_ConnectedOrgPublishedEndpoints(EndpointCollection value);
    [CompilerGeneratedAttribute]
internal Version get_OrganizationVersion();
    [CompilerGeneratedAttribute]
private void set_OrganizationVersion(Version value);
    internal Guid get_OrganizationId();
    internal void set_OrganizationId(Guid value);
    internal Guid get_TenantId();
    internal void set_TenantId(Guid value);
    internal string get_EnvironmentId();
    internal void set_EnvironmentId(string value);
    [CompilerGeneratedAttribute]
internal IOverrideAuthHookWrapper get_AuthOverrideHook();
    [CompilerGeneratedAttribute]
internal void set_AuthOverrideHook(IOverrideAuthHookWrapper value);
    [CompilerGeneratedAttribute]
internal IAddRequestHeaders get_AddHttpRequestHeaders();
    [CompilerGeneratedAttribute]
internal void set_AddHttpRequestHeaders(IAddRequestHeaders value);
    internal string get_BaseWebAPIDataFormat();
    internal static TimeSpan get_MaxConnectionTimeout();
    internal static void set_MaxConnectionTimeout(TimeSpan value);
    internal bool get_EnableCookieRelay();
    internal void set_EnableCookieRelay(bool value);
    [CompilerGeneratedAttribute]
internal string get_CurrentCookieCollection();
    [CompilerGeneratedAttribute]
internal void set_CurrentCookieCollection(string value);
    [CompilerGeneratedAttribute]
internal int get_RecommendedDegreesOfParallelism();
    [CompilerGeneratedAttribute]
internal void set_RecommendedDegreesOfParallelism(int value);
    public bool DoLogin(CrmWebSvc& ConnectionObject);
    public bool DoLiveIdLogin(bool forceReLogin, CrmWebSvc& ConnectionObject);
    private void GenerateCacheKeys(bool useUniqueCacheName);
    private bool IntilizeService(CrmWebSvc& ConnectionObject);
    private IOrganizationService GetCachedCRMService(CrmWebSvc& ConnectionObject);
    private IOrganizationService InitCRM2011Service();
    private IOrganizationService DoDirectLogin(bool IsOnPrem);
    private void RefreshInstanceDetails(IOrganizationService crmService, Uri uriOfInstance);
    internal WhoAmIResponse GetWhoAmIDetails(IOrganizationService crmService, Guid trackingID);
    internal void SetClonedProperties(CrmServiceClient sourceClient);
    [AsyncStateMachineAttribute("Microsoft.Xrm.Tooling.Connector.CrmWebSvc/<ExecuteHttpRequestAsync>d__192")]
internal static Task`1<HttpResponseMessage> ExecuteHttpRequestAsync(string uri, HttpMethod method, string body, Dictionary`2<string, List`1<string>> customHeaders, CancellationToken cancellationToken, CrmLogEntry logSink, Nullable`1<Guid> requestTrackingId, string contentType, Nullable`1<Guid> sessionTrackingId);
    private static UriBuilder GetUriBuilderWithVersion(Uri discoveryServiceUri);
    private static AuthenticationContext ObtainAuthenticationContext(string Authority, bool requireValidation, string tokenCachePath);
    private static AuthenticationResult ObtainAccessToken(AuthenticationContext authenticationContext, string resource, string clientId, Uri redirectUri, PromptBehavior promptBehavior, UserIdentifier user);
    private static AuthenticationResult ObtainAccessToken(AuthenticationContext authenticationContext, string resource, string clientId, ClientCredentials clientCredentials);
    private static AuthenticationResult ObtainAccessToken(AuthenticationContext authenticationContext, string resource, string clientId, X509Certificate2 clientCert);
    private static AuthenticationResult ObtainAccessToken(AuthenticationContext authenticationContext, string resource, string clientId, SecureString clientSecret);
    private static AuthenticationResult ObtainAccessTokenCurrentUser(AuthenticationContext authenticationContext, string resource, string clientId, ClientCredentials clientCredentials);
    public static OrganizationDetailCollection DiscoverOrganizations(Uri discoveryServiceUri, ClientCredentials clientCredentials, UserIdentifier user, string clientId, Uri redirectUri, PromptBehavior promptBehavior, string tokenCachePath, bool isOnPrem, string authority, UserIdentifier& userOut, CrmLogEntry logSink, bool useGlobalDisco, bool useDefaultCreds);
    public static OrganizationDetailCollection DiscoverOrganizations(Uri discoveryServiceUri, ClientCredentials clientCredentials, UserIdentifier user, string clientId, Uri redirectUri, PromptBehavior promptBehavior, string tokenCachePath, bool isOnPrem, string authority, CrmLogEntry logSink, bool useGlobalDisco, bool useDefaultCreds);
    public static OrganizationDetailCollection DiscoverOrganizations(Uri discoveryServiceUri, X509Certificate2 loginCertificate, string clientId, string tokenCachePath, bool isOnPrem, string authority, CrmLogEntry logSink, bool useDefaultCreds);
    private static OrganizationDetailCollection DiscoverOrganizations_Internal(Uri discoveryServiceUri, ClientCredentials clientCredentials, X509Certificate2 loginCertificate, UserIdentifier user, string clientId, Uri redirectUri, PromptBehavior promptBehavior, string tokenCachePath, bool isOnPrem, string authority, bool useDefaultCreds, CrmLogEntry logSink);
    private static OrganizationDetailCollection DiscoverGlobalOrganizations(Uri discoveryServiceUri, ClientCredentials clientCredentials, X509Certificate2 loginCertificate, UserIdentifier user, string clientId, Uri redirectUri, PromptBehavior promptBehavior, string tokenCachePath, bool isOnPrem, string authority, UserIdentifier& userOut, CrmLogEntry logSink, bool useGlobalDisco, bool useDefaultCreds);
    [AsyncStateMachineAttribute("Microsoft.Xrm.Tooling.Connector.CrmWebSvc/<QueryGlobalDiscovery>d__205")]
private static Task`1<OrganizationDetailCollection> QueryGlobalDiscovery(string authToken, Uri discoveryServiceUri, CrmLogEntry logSink);
    private static string ExecuteAuthenticateServiceProcess(Uri serviceUrl, ClientCredentials clientCredentials, X509Certificate2 userCert, UserIdentifier user, string clientId, Uri redirectUri, PromptBehavior promptBehavior, string tokenCachePath, bool isOnPrem, string authority, Uri& targetServiceUrl, AuthenticationContext& authContext, String& resource, UserIdentifier& userIdent, CrmLogEntry logSink, bool useDefaultCreds, SecureString clientSecret);
    private static void ProcessAdalExecption(Uri serviceUrl, ClientCredentials clientCredentials, X509Certificate2 userCert, UserIdentifier& user, string clientId, Uri redirectUri, PromptBehavior promptBehavior, string tokenCachePath, bool isOnPrem, string authority, Uri& targetServiceUrl, AuthenticationContext& authContext, String& resource, CrmLogEntry logSink, bool useDefaultCreds, String& authToken, AdalException adalEx);
    private static AuthenticationParameters GetAuthorityFromTargetService(Uri targetServiceUrl, CrmLogEntry logSink);
    private static AuthenticationParameters CreateFromResourceUrlAsync(Uri targetServiceUrl);
    private static AuthenticationParameters CreateFromUrlAsync(Uri targetServiceUrl);
    public static OrganizationDetailCollection DiscoverOrganizations(Uri discoveryServiceUri, Uri homeRealmUri, ClientCredentials clientCredentials, ClientCredentials deviceCredentials, CrmLogEntry logSink);
    public static OrganizationDetailCollection DiscoverOrganizations(Uri discoveryServiceUri, Uri homeRealmUri, NetworkCredential networkCredential, CrmLogEntry logSink);
    private static string GetErrorCode(XmlNode errorInfo);
    private static ClientCredentials GetClientCredentials(NetworkCredential networkCredential);
    private static X509Certificate2 FindCertificate(string certificateThumbprint, StoreName storeName, CrmLogEntry logSink);
    private static bool TryFindCertificatesInStore(string certificateThumbprint, StoreLocation location, StoreName certReproName, X509Certificate2Collection& certificates);
    private IOrganizationService ConnectAndInitCrmOrgService(OrganizationDetail orgdata, bool IsOnPrem, Uri homeRealmUri);
    internal void AttachWebProxyHander(OrganizationWebProxyClient proxy);
    private void WebProxyChannelFactory_Opening(object sender, EventArgs e);
    public string EncodeTo64(string strtoEncode);
    public static string DecodeFrom64(string encodedData);
    private Uri BuildOrgConnectUri(OrganizationDetail orgdata);
    private void GenerateDeviceCreds();
    private CrmOrgList FindCrmOnlineDiscoveryServer(CrmOnlineDiscoveryServers onlineServerList, bool useO365Servers);
    private void QueryOnlineServersList(ObservableCollection`1<CrmOnlineDiscoveryServer> svrs, OrganizationDetailCollection col, CrmOrgList orgsList, Uri trimToDiscoveryUri, Uri globalDiscoUriToUse);
    private OrganizationDetailCollection QueryLiveDiscoveryServer(Uri discoServer, bool useGlobal);
    private void AddOrgToOrgList(OrganizationDetailCollection organizationDetailList, string discoveryServer, Uri discoveryServerUri, CrmOrgList& orgList);
    private void AddOrgToOrgList(OrganizationDetail organizationDetail, string discoveryServer, CrmOrgList& orgList);
    private string ResolveXrmGeo(Uri orgURI);
    private void CheckForConnectionTokenTimeOut();
    internal string RefreshWebProxyClientToken();
    private static object CreateAndAuthenticateProxy(IServiceManagement`1<T> servicecfg, Uri ServiceUri, Uri homeRealm, ClientCredentials userCredentials, ClientCredentials deviceCredentials, string LogString, CrmLogEntry logSink);
    private static AuthenticationCredentials ClaimsIFDFailOverAuth(IServiceManagement`1<T> servicecfg, Uri homeRealm, ClientCredentials userCredentials, ClientCredentials deviceCredentials, int depthLevel, bool tryNetworkCred);
    private void ResetDisposedState();
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private bool <InitCRM2011Service>b__187_0(OrganizationDetail o);
    [CompilerGeneratedAttribute]
private bool <InitCRM2011Service>b__187_1(OrganizationDetail o);
}
public static class Microsoft.Xrm.Tooling.Connector.DeviceIdManager : object {
    private static Random RandomInstance;
    public static int MaxDeviceNameLength;
    public static int MaxDevicePasswordLength;
    [CompilerGeneratedAttribute]
private static bool <PersistToFile>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <PersistIfDeviceAlreadyExists>k__BackingField;
    public static bool PersistToFile { get; public set; }
    public static bool PersistIfDeviceAlreadyExists { get; public set; }
    private static DeviceIdManager();
    [CompilerGeneratedAttribute]
public static bool get_PersistToFile();
    [CompilerGeneratedAttribute]
public static void set_PersistToFile(bool value);
    [CompilerGeneratedAttribute]
public static bool get_PersistIfDeviceAlreadyExists();
    [CompilerGeneratedAttribute]
public static void set_PersistIfDeviceAlreadyExists(bool value);
    public static ClientCredentials LoadOrRegisterDevice();
    public static ClientCredentials LoadOrRegisterDevice(string deviceName, string devicePassword);
    public static ClientCredentials LoadOrRegisterDevice(Uri issuerUri);
    public static ClientCredentials LoadOrRegisterDevice(Uri issuerUri, string deviceName, string devicePassword);
    public static ClientCredentials RegisterDevice();
    public static ClientCredentials RegisterDevice(Guid applicationId);
    public static ClientCredentials RegisterDevice(Guid applicationId, Uri issuerUri);
    public static ClientCredentials RegisterDevice(Guid applicationId, string deviceName, string devicePassword);
    public static ClientCredentials RegisterDevice(Guid applicationId, Uri issuerUri, string deviceName, string devicePassword);
    public static ClientCredentials LoadDeviceCredentials();
    public static ClientCredentials LoadDeviceCredentials(Uri issuerUri);
    public static string DiscoverEnvironment(Uri issuerUri);
    private static EnvironmentConfiguration DiscoverEnvironmentInternal(Uri issuerUri);
    private static void Serialize(Stream stream, T value);
    private static T Deserialize(string operationName, Stream stream);
    private static T Deserialize(string operationName, string xml);
    private static FileInfo GetDeviceFile(EnvironmentConfiguration environment);
    private static ClientCredentials RegisterDevice(Guid applicationId, Uri issuerUri, LiveDevice device);
    private static LiveDevice GenerateDevice(string deviceName, string devicePassword);
    private static LiveDevice ReadExistingDevice(EnvironmentConfiguration environment);
    private static void WriteDevice(EnvironmentConfiguration environment, LiveDevice device);
    private static DeviceRegistrationResponse ExecuteRegistrationRequest(string url, DeviceRegistrationRequest registrationRequest);
    private static DeviceUserName GenerateDeviceUserName();
    private static string GenerateRandomString(string characterSet, int count);
}
[EditorBrowsableAttribute("1")]
[XmlRootAttribute("Authentication")]
public class Microsoft.Xrm.Tooling.Connector.DeviceRegistrationAuthentication : object {
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [XmlElementAttribute("Membername")]
public string MemberName { get; public set; }
    [XmlElementAttribute("Password")]
public string Password { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public void set_MemberName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
}
[EditorBrowsableAttribute("1")]
[XmlRootAttribute("ClientInfo")]
public class Microsoft.Xrm.Tooling.Connector.DeviceRegistrationClientInfo : object {
    [CompilerGeneratedAttribute]
private Guid <ApplicationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [XmlAttributeAttribute("name")]
public Guid ApplicationId { get; public set; }
    [XmlAttributeAttribute("version")]
public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_ApplicationId();
    [CompilerGeneratedAttribute]
public void set_ApplicationId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
public enum Microsoft.Xrm.Tooling.Connector.DeviceRegistrationErrorCode : Enum {
    public int value__;
    public static DeviceRegistrationErrorCode Unknown;
    public static DeviceRegistrationErrorCode InterfaceDisabled;
    public static DeviceRegistrationErrorCode InvalidRequestFormat;
    public static DeviceRegistrationErrorCode UnknownClientVersion;
    public static DeviceRegistrationErrorCode BlankPassword;
    public static DeviceRegistrationErrorCode MissingDeviceUserNameOrPassword;
    public static DeviceRegistrationErrorCode InvalidParameterSyntax;
    public static DeviceRegistrationErrorCode InvalidCharactersInCredentials;
    public static DeviceRegistrationErrorCode InternalError;
    public static DeviceRegistrationErrorCode DeviceAlreadyExists;
}
public class Microsoft.Xrm.Tooling.Connector.DeviceRegistrationFailedException : Exception {
    [CompilerGeneratedAttribute]
private DeviceRegistrationErrorCode <RegistrationErrorCode>k__BackingField;
    public DeviceRegistrationErrorCode RegistrationErrorCode { get; private set; }
    public DeviceRegistrationFailedException(string message);
    public DeviceRegistrationFailedException(string message, Exception innerException);
    public DeviceRegistrationFailedException(DeviceRegistrationErrorCode code, string subCode);
    public DeviceRegistrationFailedException(DeviceRegistrationErrorCode code, string subCode, Exception innerException);
    private DeviceRegistrationFailedException(SerializationInfo si, StreamingContext sc);
    [CompilerGeneratedAttribute]
public DeviceRegistrationErrorCode get_RegistrationErrorCode();
    [CompilerGeneratedAttribute]
private void set_RegistrationErrorCode(DeviceRegistrationErrorCode value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("1")]
[XmlRootAttribute("DeviceAddRequest")]
public class Microsoft.Xrm.Tooling.Connector.DeviceRegistrationRequest : object {
    [CompilerGeneratedAttribute]
private DeviceRegistrationClientInfo <ClientInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private DeviceRegistrationAuthentication <Authentication>k__BackingField;
    [XmlElementAttribute("ClientInfo")]
public DeviceRegistrationClientInfo ClientInfo { get; public set; }
    [XmlElementAttribute("Authentication")]
public DeviceRegistrationAuthentication Authentication { get; public set; }
    public DeviceRegistrationRequest(Guid applicationId, LiveDevice device);
    [CompilerGeneratedAttribute]
public DeviceRegistrationClientInfo get_ClientInfo();
    [CompilerGeneratedAttribute]
public void set_ClientInfo(DeviceRegistrationClientInfo value);
    [CompilerGeneratedAttribute]
public DeviceRegistrationAuthentication get_Authentication();
    [CompilerGeneratedAttribute]
public void set_Authentication(DeviceRegistrationAuthentication value);
}
[EditorBrowsableAttribute("1")]
[XmlRootAttribute("DeviceAddResponse")]
public class Microsoft.Xrm.Tooling.Connector.DeviceRegistrationResponse : object {
    [CompilerGeneratedAttribute]
private bool <IsSuccess>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Puid>k__BackingField;
    [CompilerGeneratedAttribute]
private DeviceRegistrationResponseError <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorSubCode>k__BackingField;
    [XmlElementAttribute("success")]
public bool IsSuccess { get; public set; }
    [XmlElementAttribute("puid")]
public string Puid { get; public set; }
    [XmlElementAttribute("Error")]
public DeviceRegistrationResponseError Error { get; public set; }
    [XmlElementAttribute("ErrorSubcode")]
public string ErrorSubCode { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsSuccess();
    [CompilerGeneratedAttribute]
public void set_IsSuccess(bool value);
    [CompilerGeneratedAttribute]
public string get_Puid();
    [CompilerGeneratedAttribute]
public void set_Puid(string value);
    [CompilerGeneratedAttribute]
public DeviceRegistrationResponseError get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(DeviceRegistrationResponseError value);
    [CompilerGeneratedAttribute]
public string get_ErrorSubCode();
    [CompilerGeneratedAttribute]
public void set_ErrorSubCode(string value);
}
[EditorBrowsableAttribute("1")]
[XmlRootAttribute("Error")]
public class Microsoft.Xrm.Tooling.Connector.DeviceRegistrationResponseError : object {
    private string _code;
    [CompilerGeneratedAttribute]
private DeviceRegistrationErrorCode <RegistrationErrorCode>k__BackingField;
    [XmlAttributeAttribute("Code")]
public string Code { get; public set; }
    [XmlIgnoreAttribute]
public DeviceRegistrationErrorCode RegistrationErrorCode { get; private set; }
    public string get_Code();
    public void set_Code(string value);
    [CompilerGeneratedAttribute]
public DeviceRegistrationErrorCode get_RegistrationErrorCode();
    [CompilerGeneratedAttribute]
private void set_RegistrationErrorCode(DeviceRegistrationErrorCode value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Xrm.Tooling.Connector.DeviceUserName : object {
    private string _encryptedPassword;
    private string _decryptedPassword;
    private bool _encryptedValueIsUpdated;
    private static string UserNamePrefix;
    [CompilerGeneratedAttribute]
private string <DeviceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserNameType>k__BackingField;
    [XmlAttributeAttribute("username")]
public string DeviceName { get; public set; }
    [XmlAttributeAttribute("type")]
public string UserNameType { get; public set; }
    [XmlElementAttribute("Pwd")]
public string EncryptedPassword { get; public set; }
    public string DeviceId { get; }
    [XmlIgnoreAttribute]
public string DecryptedPassword { get; public set; }
    private static bool IsEncryptionEnabled { get; }
    [CompilerGeneratedAttribute]
public string get_DeviceName();
    [CompilerGeneratedAttribute]
public void set_DeviceName(string value);
    [CompilerGeneratedAttribute]
public string get_UserNameType();
    [CompilerGeneratedAttribute]
public void set_UserNameType(string value);
    public string get_EncryptedPassword();
    public void set_EncryptedPassword(string value);
    public string get_DeviceId();
    public string get_DecryptedPassword();
    public void set_DecryptedPassword(string value);
    private static bool get_IsEncryptionEnabled();
    public ClientCredentials ToClientCredentials();
    private void ThrowIfNoEncryption();
    private void UpdateCredentials(string encryptedValue, string decryptedValue);
    private static string Encrypt(string value);
    private static string Decrypt(string value);
}
internal static class Microsoft.Xrm.Tooling.Connector.DynamicCrmConstants : object {
    public static String[] ServiceUri;
    public static String[] UserName;
    public static String[] Password;
    public static String[] Domain;
    public static String[] HomeRealmUri;
    public static String[] AuthType;
    public static String[] RequireNewInstance;
    public static String[] ClientId;
    public static String[] RedirectUri;
    public static String[] TokenCacheStorePath;
    public static String[] LoginPrompt;
    public static String[] CertThumbprint;
    public static String[] CertStoreName;
    public static String[] SkipDiscovery;
    public static String[] IntegratedSecurity;
    public static String[] ClientSecret;
    private static DynamicCrmConstants();
}
internal class Microsoft.Xrm.Tooling.Connector.DynamicEntityUtility : object {
    private CrmServiceClient svcAct;
    private MetadataUtility metadataUtil;
    public DynamicEntityUtility(CrmServiceClient svcActions, MetadataUtility metaUtility);
    internal List`1<AttributeData> GetAttributeDataByEntity(string entityName, String[] attributes);
    internal List`1<AttributeData> GetAttributeDataByEntity(string entityName, Guid entityId, String[] attributes);
    internal Entity RetrieveByIdAsDynamicEntity(string entityName, Guid entityId, String[] attributes);
}
public class Microsoft.Xrm.Tooling.Connector.DynamicsFileLogTraceListener : FileLogTraceListener {
    private static bool check;
    private string defBaseFileName;
    private Queue`1<string> logfiles;
    private bool _isInitialized;
    private int maxFileCount;
    private string logFileName { get; }
    public int MaxFileCount { get; }
    public DynamicsFileLogTraceListener(string name);
    private string get_logFileName();
    public int get_MaxFileCount();
    private void Initialize();
    protected static bool IsWritePermitted(string Location);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, Object[] args);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    protected virtual string FormatMessage(string message);
    protected virtual void TraceEventCustom(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    private void RollOverLogFile();
    private void HandleException(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message, Object[] args);
    protected virtual String[] GetSupportedAttributes();
    [CompilerGeneratedAttribute]
private bool <Initialize>b__11_0(FileInfo s);
}
internal static class Microsoft.Xrm.Tooling.Connector.Environs : object {
    private static object _initLock;
    [CompilerGeneratedAttribute]
private static string <FileVersion>k__BackingField;
    public static string FileVersion { get; private set; }
    private static Environs();
    [CompilerGeneratedAttribute]
public static string get_FileVersion();
    [CompilerGeneratedAttribute]
private static void set_FileVersion(string value);
}
[ExtensionAttribute]
public static class Microsoft.Xrm.Tooling.Connector.Extension : object {
    [ExtensionAttribute]
public static T ToEnum(string enumName);
    [ExtensionAttribute]
public static T ToEnum(int enumValue);
    [ExtensionAttribute]
public static IDictionary`2<string, string> ToDictionary(string connectionString);
    [ExtensionAttribute]
public static string FormatWith(string format, Object[] args);
    [ExtensionAttribute]
public static string FirstNotNullOrEmpty(IDictionary`2<TKey, string> dictionary, TKey[] keys);
}
public interface Microsoft.Xrm.Tooling.Connector.IAddRequestHeaders {
    public abstract virtual Dictionary`2<string, string> RequestAdditionalHeaders();
}
public static class Microsoft.Xrm.Tooling.Connector.ImportSolutionProperties : object {
    public static string DESIREDLAYERORDERPARAM;
    public static string ASYNCRIBBONPROCESSING;
    public static string SOLUTIONNAMEPARAM;
    public static string COMPONENTPARAMETERSPARAM;
    public static string CONVERTTOMANAGED;
    public static string TEMPLATESUFFIX;
    public static string ISTEMPLATEMODE;
    public static string USESTAGEANDUPGRADEMODE;
    private static ImportSolutionProperties();
}
public interface Microsoft.Xrm.Tooling.Connector.IOverrideAuthHookWrapper {
    public abstract virtual string GetAuthToken(Uri connectedUri);
}
[EditorBrowsableAttribute("1")]
[XmlRootAttribute("Data")]
public class Microsoft.Xrm.Tooling.Connector.LiveDevice : object {
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private DeviceUserName <User>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNode <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Expiry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClockSkew>k__BackingField;
    [XmlAttributeAttribute("version")]
public int Version { get; public set; }
    [XmlElementAttribute("User")]
public DeviceUserName User { get; public set; }
    [XmlElementAttribute("Token")]
public XmlNode Token { get; public set; }
    [XmlElementAttribute("Expiry")]
public string Expiry { get; public set; }
    [XmlElementAttribute("ClockSkew")]
public string ClockSkew { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
    [CompilerGeneratedAttribute]
public DeviceUserName get_User();
    [CompilerGeneratedAttribute]
public void set_User(DeviceUserName value);
    [CompilerGeneratedAttribute]
public XmlNode get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(XmlNode value);
    [CompilerGeneratedAttribute]
public string get_Expiry();
    [CompilerGeneratedAttribute]
public void set_Expiry(string value);
    [CompilerGeneratedAttribute]
public string get_ClockSkew();
    [CompilerGeneratedAttribute]
public void set_ClockSkew(string value);
}
internal class Microsoft.Xrm.Tooling.Connector.MetadataUtility : object {
    private Dictionary`2<string, EntityMetadata> _entityMetadataCache;
    private Dictionary`2<string, AttributeMetadata> _attributeMetadataCache;
    private Dictionary`2<string, OptionSetMetadata> _globalOptionMetadataCache;
    private Dictionary`2<int, string> _entityNameCache;
    private static object _lockObject;
    private DateTime _metadataLastValidatedAt;
    private CrmServiceClient svcAct;
    public MetadataUtility(CrmServiceClient svcActions);
    private static MetadataUtility();
    public void ClearCachedEntityMetadata(string entityName);
    public List`1<EntityMetadata> GetAllEntityMetadata(bool onlyPublished, EntityFilters filter);
    public EntityMetadata GetEntityMetadata(string entityName);
    public EntityMetadata GetEntityMetadata(EntityFilters requestType, string entityName);
    public string GetEntityLogicalName(int entityTypeCode);
    public AttributeMetadata GetAttributeMetadata(string entityName, string attributeName);
    public List`1<AttributeMetadata> GetAllAttributesMetadataByEntity(string entityName);
    public List`1<string> GetRequiredAttributesByEntity(string entityName);
    public OptionSetMetadata GetGlobalOptionSetMetadata(string optionSetName);
    private void ValidateMetadata();
}
public class Microsoft.Xrm.Tooling.Connector.Model.CrmOnlineDiscoveryServer : object {
    private string _DisplayName;
    private string _ShortName;
    private Uri _DiscoveryServer;
    private bool _RequiresRegionalDiscovery;
    private Uri _RegionalGlobalDiscovery;
    private string _GeoCode;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string DisplayName { get; public set; }
    public string ShortName { get; public set; }
    public Uri DiscoveryServer { get; public set; }
    public bool RequiresRegionalDiscovery { get; public set; }
    public Uri RegionalGlobalDiscoveryServer { get; public set; }
    public string GeoCode { get; public set; }
    public CrmOnlineDiscoveryServer(ServerInfo serverInfo);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_ShortName();
    public void set_ShortName(string value);
    public Uri get_DiscoveryServer();
    public void set_DiscoveryServer(Uri value);
    public bool get_RequiresRegionalDiscovery();
    public void set_RequiresRegionalDiscovery(bool value);
    public Uri get_RegionalGlobalDiscoveryServer();
    public void set_RegionalGlobalDiscoveryServer(Uri value);
    public string get_GeoCode();
    public void set_GeoCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void NotifyPropertyChanged(string info);
}
public class Microsoft.Xrm.Tooling.Connector.Model.CrmOnlineDiscoveryServers : object {
    private CrmLogEntry logger;
    private ObservableCollection`1<CrmOnlineDiscoveryServer> _Servers;
    private ObservableCollection`1<CrmOnlineDiscoveryServer> _OSDPServers;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    private bool disposedValue;
    public ObservableCollection`1<CrmOnlineDiscoveryServer> Servers { get; public set; }
    public ObservableCollection`1<CrmOnlineDiscoveryServer> OSDPServers { get; public set; }
    public ObservableCollection`1<CrmOnlineDiscoveryServer> get_Servers();
    public void set_Servers(ObservableCollection`1<CrmOnlineDiscoveryServer> value);
    public ObservableCollection`1<CrmOnlineDiscoveryServer> get_OSDPServers();
    public void set_OSDPServers(ObservableCollection`1<CrmOnlineDiscoveryServer> value);
    public CrmOnlineDiscoveryServer GetServerByOrgUrl(Uri orgUri);
    public CrmOnlineDiscoveryServer GetServerByShortName(string shortName, bool isO365);
    public string GetServerShortNameByDisplayName(string serverDisplayName, bool isO365);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void NotifyPropertyChanged(string info);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Microsoft.Xrm.Tooling.Connector.Model.CrmOrgByServer : object {
    private OrganizationDetail _OrgDetail;
    private string _DiscoveryServerName;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public string FriendlyName { get; }
    public string UniqueOrgName { get; }
    public string UrlHostName { get; }
    public OrganizationDetail OrgDetail { get; public set; }
    public string DiscoveryServerName { get; public set; }
    public Uri DiscoveryServer { get; }
    public string get_FriendlyName();
    public string get_UniqueOrgName();
    public string get_UrlHostName();
    public OrganizationDetail get_OrgDetail();
    public void set_OrgDetail(OrganizationDetail value);
    public string get_DiscoveryServerName();
    public void set_DiscoveryServerName(string value);
    public Uri get_DiscoveryServer();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void NotifyPropertyChanged(string info);
}
public class Microsoft.Xrm.Tooling.Connector.Model.CrmOrgList : object {
    private ObservableCollection`1<CrmOrgByServer> _orgsList;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public ObservableCollection`1<CrmOrgByServer> OrgsList { get; internal set; }
    public ObservableCollection`1<CrmOrgByServer> get_OrgsList();
    internal void set_OrgsList(ObservableCollection`1<CrmOrgByServer> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private void NotifyPropertyChanged(string info);
}
internal class Microsoft.Xrm.Tooling.Connector.Model.GlobalDiscoveryInstanceModel : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FriendlyName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastUpdated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrganizationType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StatusMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TrialExpirationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Purpose>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaType>k__BackingField;
    [JsonPropertyAttribute]
public Guid Id { get; public set; }
    [JsonPropertyAttribute]
public string UniqueName { get; public set; }
    [JsonPropertyAttribute]
public string UrlName { get; public set; }
    [JsonPropertyAttribute]
public string FriendlyName { get; public set; }
    [JsonPropertyAttribute]
public int State { get; public set; }
    [JsonPropertyAttribute]
public string Version { get; public set; }
    [JsonPropertyAttribute]
public string Url { get; public set; }
    [JsonPropertyAttribute]
public string ApiUrl { get; public set; }
    [JsonPropertyAttribute]
public string LastUpdated { get; public set; }
    [JsonPropertyAttribute]
public string Region { get; public set; }
    [JsonPropertyAttribute]
public string OrganizationType { get; public set; }
    [JsonPropertyAttribute]
public string TenantId { get; public set; }
    [JsonPropertyAttribute]
public string EnvironmentId { get; public set; }
    [JsonPropertyAttribute]
public string StatusMessage { get; public set; }
    [JsonPropertyAttribute]
public DateTime TrialExpirationDate { get; public set; }
    [JsonPropertyAttribute]
public string Purpose { get; public set; }
    [JsonPropertyAttribute]
public string SchemaType { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_UniqueName();
    [CompilerGeneratedAttribute]
public void set_UniqueName(string value);
    [CompilerGeneratedAttribute]
public string get_UrlName();
    [CompilerGeneratedAttribute]
public void set_UrlName(string value);
    [CompilerGeneratedAttribute]
public string get_FriendlyName();
    [CompilerGeneratedAttribute]
public void set_FriendlyName(string value);
    [CompilerGeneratedAttribute]
public int get_State();
    [CompilerGeneratedAttribute]
public void set_State(int value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_ApiUrl();
    [CompilerGeneratedAttribute]
public void set_ApiUrl(string value);
    [CompilerGeneratedAttribute]
public string get_LastUpdated();
    [CompilerGeneratedAttribute]
public void set_LastUpdated(string value);
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
public void set_Region(string value);
    [CompilerGeneratedAttribute]
public string get_OrganizationType();
    [CompilerGeneratedAttribute]
public void set_OrganizationType(string value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentId();
    [CompilerGeneratedAttribute]
public void set_EnvironmentId(string value);
    [CompilerGeneratedAttribute]
public string get_StatusMessage();
    [CompilerGeneratedAttribute]
public void set_StatusMessage(string value);
    [CompilerGeneratedAttribute]
public DateTime get_TrialExpirationDate();
    [CompilerGeneratedAttribute]
public void set_TrialExpirationDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Purpose();
    [CompilerGeneratedAttribute]
public void set_Purpose(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaType();
    [CompilerGeneratedAttribute]
public void set_SchemaType(string value);
}
internal class Microsoft.Xrm.Tooling.Connector.Model.GlobalDiscoveryModel : object {
    [CompilerGeneratedAttribute]
private string <context>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<GlobalDiscoveryInstanceModel> <Instances>k__BackingField;
    [JsonPropertyAttribute]
public string context { get; public set; }
    [JsonPropertyAttribute]
public IList`1<GlobalDiscoveryInstanceModel> Instances { get; public set; }
    [CompilerGeneratedAttribute]
public string get_context();
    [CompilerGeneratedAttribute]
public void set_context(string value);
    [CompilerGeneratedAttribute]
public IList`1<GlobalDiscoveryInstanceModel> get_Instances();
    [CompilerGeneratedAttribute]
public void set_Instances(IList`1<GlobalDiscoveryInstanceModel> value);
}
public class Microsoft.Xrm.Tooling.Connector.PicklistAttributeData : AttributeData {
    private OptionMetadata[] picklistOptions;
    public OptionMetadata[] PicklistOptions { get; public set; }
    public OptionMetadata[] get_PicklistOptions();
    public void set_PicklistOptions(OptionMetadata[] value);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
internal class Microsoft.Xrm.Tooling.Connector.Properties.Settings : ApplicationSettingsBase {
    private static Settings defaultInstance;
    public static Settings Default { get; }
    private static Settings();
    public static Settings get_Default();
}
public class Microsoft.Xrm.Tooling.Connector.RefreshListenerDelegate : MulticastDelegate {
    public RefreshListenerDelegate(object object, IntPtr method);
    public virtual void Invoke(List`1<TraceSourceSetting> listenerCollection);
    public virtual IAsyncResult BeginInvoke(List`1<TraceSourceSetting> listenerCollection, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Xrm.Tooling.Connector.RequestBatch : object {
    [CompilerGeneratedAttribute]
private Guid <BatchId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BatchName>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecuteMultipleSettings <BatchRequestSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BatchItemOrganizationRequest> <BatchItems>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecuteMultipleResponse <BatchResults>k__BackingField;
    [CompilerGeneratedAttribute]
private BatchStatus <Status>k__BackingField;
    public Guid BatchId { get; internal set; }
    public string BatchName { get; internal set; }
    public ExecuteMultipleSettings BatchRequestSettings { get; private set; }
    public List`1<BatchItemOrganizationRequest> BatchItems { get; public set; }
    public ExecuteMultipleResponse BatchResults { get; public set; }
    public BatchStatus Status { get; public set; }
    public RequestBatch(string batchName, bool returnResponses, bool continueOnError);
    [CompilerGeneratedAttribute]
public Guid get_BatchId();
    [CompilerGeneratedAttribute]
internal void set_BatchId(Guid value);
    [CompilerGeneratedAttribute]
public string get_BatchName();
    [CompilerGeneratedAttribute]
internal void set_BatchName(string value);
    [CompilerGeneratedAttribute]
public ExecuteMultipleSettings get_BatchRequestSettings();
    [CompilerGeneratedAttribute]
private void set_BatchRequestSettings(ExecuteMultipleSettings value);
    [CompilerGeneratedAttribute]
public List`1<BatchItemOrganizationRequest> get_BatchItems();
    [CompilerGeneratedAttribute]
public void set_BatchItems(List`1<BatchItemOrganizationRequest> value);
    [CompilerGeneratedAttribute]
public ExecuteMultipleResponse get_BatchResults();
    [CompilerGeneratedAttribute]
public void set_BatchResults(ExecuteMultipleResponse value);
    [CompilerGeneratedAttribute]
public BatchStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(BatchStatus value);
}
[ExtensionAttribute]
internal static class Microsoft.Xrm.Tooling.Connector.SecureStringExtensions : object {
    [ExtensionAttribute]
public static string ToUnsecureString(SecureString value);
}
public class Microsoft.Xrm.Tooling.Connector.ServerInfo : object {
    [CompilerGeneratedAttribute]
private string <DiscoveryServer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresRegionalDiscovery>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RegionalGlobalDiscoveryUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeoCode>k__BackingField;
    public string DiscoveryServer { get; public set; }
    public string DisplayName { get; public set; }
    public string ShortName { get; public set; }
    public bool RequiresRegionalDiscovery { get; public set; }
    public Uri RegionalGlobalDiscoveryUri { get; public set; }
    public string GeoCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DiscoveryServer();
    [CompilerGeneratedAttribute]
public void set_DiscoveryServer(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public bool get_RequiresRegionalDiscovery();
    [CompilerGeneratedAttribute]
public void set_RequiresRegionalDiscovery(bool value);
    [CompilerGeneratedAttribute]
public Uri get_RegionalGlobalDiscoveryUri();
    [CompilerGeneratedAttribute]
public void set_RegionalGlobalDiscoveryUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_GeoCode();
    [CompilerGeneratedAttribute]
public void set_GeoCode(string value);
}
public class Microsoft.Xrm.Tooling.Connector.StringAttributeData : AttributeData {
    private int maxLength;
    public int MaxLength { get; public set; }
    public int get_MaxLength();
    public void set_MaxLength(int value);
}
public class Microsoft.Xrm.Tooling.Connector.TestingHelper : object {
    private Dictionary`2<string, string> _servers;
    private Dictionary`2<string, string> _OSDPservers;
    private string _selectedOption;
    private string defaultIssuerUri;
    private static TestingHelper _instance;
    public string SelectedOption { get; public set; }
    public static TestingHelper Instance { get; }
    public string get_SelectedOption();
    public void set_SelectedOption(string value);
    public static TestingHelper get_Instance();
    public bool IsDebugEnvSelected();
    public string GetIssuerUriForSelectedEnv();
    private void Initialize();
}
public class Microsoft.Xrm.Tooling.Connector.TraceControlSettings : object {
    private static string _traceSourceName;
    [CompilerGeneratedAttribute]
private static SourceLevels <TraceLevel>k__BackingField;
    internal static Dictionary`2<string, TraceListener> RegisterdTraceListeners { get; }
    public static SourceLevels TraceLevel { get; public set; }
    private static TraceControlSettings();
    internal static Dictionary`2<string, TraceListener> get_RegisterdTraceListeners();
    [CompilerGeneratedAttribute]
public static SourceLevels get_TraceLevel();
    [CompilerGeneratedAttribute]
public static void set_TraceLevel(SourceLevels value);
    public static void CloseListeners();
    public static bool AddTraceListener(TraceListener listenerToAdd);
}
public class Microsoft.Xrm.Tooling.Connector.TraceListenerBroker : object {
    [CompilerGeneratedAttribute]
private static RefreshListenerDelegate refreshListenerObject;
    private static object logLock;
    private static TraceListenerBroker();
    [CompilerGeneratedAttribute]
private static void add_refreshListenerObject(RefreshListenerDelegate value);
    [CompilerGeneratedAttribute]
private static void remove_refreshListenerObject(RefreshListenerDelegate value);
    public static void RegisterTraceLogger(TraceLoggerBase traceLogger);
    public static void UnRegisterTraceLogger(TraceLoggerBase traceLogger);
    public static void PublishTraceListeners();
}
[LocalizableAttribute("False")]
public abstract class Microsoft.Xrm.Tooling.Connector.TraceLoggerBase : object {
    private StringBuilder _lastError;
    private string _traceSourceName;
    private Exception _lastException;
    private TraceSource _source;
    protected TraceSource Source { get; private set; }
    protected string TraceSourceName { get; protected set; }
    public StringBuilder LastError { get; }
    public Exception LastException { get; public set; }
    public SourceLevels CurrentTraceLevel { get; }
    protected TraceSource get_Source();
    private void set_Source(TraceSource value);
    protected string get_TraceSourceName();
    protected void set_TraceSourceName(string value);
    public StringBuilder get_LastError();
    public Exception get_LastException();
    public void set_LastException(Exception value);
    public SourceLevels get_CurrentTraceLevel();
    protected void Initialize();
    public abstract virtual void ResetLastError();
    public abstract virtual void Log(string message);
    public abstract virtual void Log(string message, TraceEventType eventType);
    public abstract virtual void Log(string message, TraceEventType eventType, Exception exception);
    public abstract virtual void Log(Exception exception);
    public void RefreshListeners(List`1<TraceSourceSetting> traceSourceSettingCollection);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private bool <RefreshListeners>b__24_0(TraceSourceSetting x);
}
public class Microsoft.Xrm.Tooling.Connector.TraceSourceSetting : object {
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLevels <TraceLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, TraceListener> <TraceListeners>k__BackingField;
    public string SourceName { get; public set; }
    public SourceLevels TraceLevel { get; public set; }
    public Dictionary`2<string, TraceListener> TraceListeners { get; public set; }
    public TraceSourceSetting(string sourceName, SourceLevels sourceLevels);
    [CompilerGeneratedAttribute]
public string get_SourceName();
    [CompilerGeneratedAttribute]
public void set_SourceName(string value);
    [CompilerGeneratedAttribute]
public SourceLevels get_TraceLevel();
    [CompilerGeneratedAttribute]
public void set_TraceLevel(SourceLevels value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, TraceListener> get_TraceListeners();
    [CompilerGeneratedAttribute]
public void set_TraceListeners(Dictionary`2<string, TraceListener> value);
}
public class Microsoft.Xrm.Tooling.Connector.TraceSourceSettingStore : object {
    [CompilerGeneratedAttribute]
private static List`1<TraceSourceSetting> <TraceSourceSettingsCollection>k__BackingField;
    public static List`1<TraceSourceSetting> TraceSourceSettingsCollection { get; private set; }
    private static TraceSourceSettingStore();
    [CompilerGeneratedAttribute]
public static List`1<TraceSourceSetting> get_TraceSourceSettingsCollection();
    [CompilerGeneratedAttribute]
private static void set_TraceSourceSettingsCollection(List`1<TraceSourceSetting> value);
    public static void AddTraceSettingsToStore(TraceSourceSetting listnerSettings);
    public static TraceSourceSetting GetTraceSourceSettings(string sourceName);
}
public class Microsoft.Xrm.Tooling.Connector.Utilities : object {
    private static List`1<string> _autoRetryRetrieveEntityList;
    public static Version GetFileVersion(Assembly executingAssembly);
    internal static CrmOnlineDiscoveryServer GetDiscoveryServerByUri(Uri orgUri);
    public static void GetOrgnameAndOnlineRegionFromServiceUri(Uri serviceUri, String& onlineRegion, String& organizationName, Boolean& isOnPrem);
    public static CrmOrgByServer DeterminOrgDataFromOrgInfo(CrmOrgList orgList, string organizationName);
    public static OrganizationDetail DeterminOrgDataFromOrgInfo(OrganizationDetailCollection orgList, string organizationName);
    public static CrmOnlineDiscoveryServer DeterminDiscoveryDataFromOrgDetail(Uri serviceUri, Boolean& isOnPrem, string Geo);
    public static bool IsValidOnlineHost(Uri hostUri);
    internal static bool ShouldAutoRetryRetrieveByEntityName(string queryStringToParse);
}
internal static class Microsoft.Xrm.Tooling.Connector.Utils.ADALLoggerCallBack : object {
    private static CrmLogEntry _logEntry;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <EnabledPIILogging>k__BackingField;
    public static Nullable`1<bool> EnabledPIILogging { get; public set; }
    [CompilerGeneratedAttribute]
public static Nullable`1<bool> get_EnabledPIILogging();
    [CompilerGeneratedAttribute]
public static void set_EnabledPIILogging(Nullable`1<bool> value);
    public static void Log(LogLevel level, string message, bool containsPii);
}
internal static class Microsoft.Xrm.Tooling.Connector.Utils.AppSettingsHelper : object {
    public static T GetAppSetting(string key, T defaultValue, CrmLogEntry logSink);
    private static T ConvertFromInvariantString(string value);
    public static TimeSpan GetAppSettingTimeSpan(string key, TimeSpanFromKey format, TimeSpan defaultValue, CrmLogEntry logSink);
}
public class Microsoft.Xrm.Tooling.Connector.XmlUtil : object {
    public static XmlReader CreateXmlReader(string xml);
    public static XmlReader CreateXmlReader(string xml, bool preserveWhiteSpace);
    public static XmlReader CreateXmlReader(Stream xmlStream);
    public static XmlDocument CreateXmlDocument();
    public static XmlDocument CreateXmlDocument(XmlReader reader);
    public static XmlDocument CreateXmlDocument(Stream input);
    public static XmlDocument CreateXmlDocument(string xml);
    public static XmlDocument CreateXmlDocument(string xml, bool preserveWhiteSpace);
    public static XmlWriter CreateXmlWriter(TextWriter textWriter, bool indented);
    public static XmlWriter CreateXmlWriter(string fileName, Encoding encoding, bool indented);
}
