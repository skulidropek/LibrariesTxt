[JsonObjectAttribute]
public class Microsoft.Crm.Tools.ComponentMetadata.CanvasAppMetadata : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BackgroundImageDataUri>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    public string AppVersion { get; public set; }
    public string DisplayName { get; public set; }
    public string BackgroundColor { get; public set; }
    public Uri BackgroundImageDataUri { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_AppVersion();
    [CompilerGeneratedAttribute]
public void set_AppVersion(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(string value);
    [CompilerGeneratedAttribute]
public Uri get_BackgroundImageDataUri();
    [CompilerGeneratedAttribute]
public void set_BackgroundImageDataUri(Uri value);
}
public class Microsoft.Crm.Tools.ComponentMetadata.ConnectionInstanceMetadata : object {
    [CompilerGeneratedAttribute]
private string <LogicalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectorInternalId>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <ConnectionParametersConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <ConnectionParameterSetConfig>k__BackingField;
    [JsonPropertyAttribute]
public string LogicalName { get; public set; }
    public string DisplayName { get; public set; }
    public string ConnectorInternalId { get; public set; }
    public JObject ConnectionParametersConfig { get; public set; }
    public JObject ConnectionParameterSetConfig { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LogicalName();
    [CompilerGeneratedAttribute]
public void set_LogicalName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectorInternalId();
    [CompilerGeneratedAttribute]
public void set_ConnectorInternalId(string value);
    [CompilerGeneratedAttribute]
public JObject get_ConnectionParametersConfig();
    [CompilerGeneratedAttribute]
public void set_ConnectionParametersConfig(JObject value);
    [CompilerGeneratedAttribute]
public JObject get_ConnectionParameterSetConfig();
    [CompilerGeneratedAttribute]
public void set_ConnectionParameterSetConfig(JObject value);
}
[JsonObjectAttribute]
public class Microsoft.Crm.Tools.ComponentMetadata.ConnectionReferenceMetadata : object {
    [CompilerGeneratedAttribute]
private string <LogicalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectorId>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionInstanceMetadata <ConnectionInstance>k__BackingField;
    [JsonPropertyAttribute]
public string LogicalName { get; public set; }
    public string DisplayName { get; public set; }
    public string ConnectorId { get; public set; }
    public ConnectionInstanceMetadata ConnectionInstance { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LogicalName();
    [CompilerGeneratedAttribute]
public void set_LogicalName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectorId();
    [CompilerGeneratedAttribute]
public void set_ConnectorId(string value);
    [CompilerGeneratedAttribute]
public ConnectionInstanceMetadata get_ConnectionInstance();
    [CompilerGeneratedAttribute]
public void set_ConnectionInstance(ConnectionInstanceMetadata value);
}
[JsonObjectAttribute]
public class Microsoft.Crm.Tools.ComponentMetadata.EnvironmentVariableMetadata : object {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalizableText <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalizableText <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParameterKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentSchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputControlConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LearnMoreUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalizableText <Hint>k__BackingField;
    [JsonPropertyAttribute]
public string SchemaName { get; public set; }
    public LocalizableText DisplayName { get; public set; }
    public LocalizableText Description { get; public set; }
    public Nullable`1<bool> IsRequired { get; public set; }
    public Nullable`1<int> TypeId { get; public set; }
    [JsonIgnoreAttribute]
public Nullable`1<KnownEnvironmentVariableType> KnownType { get; }
    public string DefaultValue { get; public set; }
    public string ApiId { get; public set; }
    public string ParameterKey { get; public set; }
    public string ParentSchemaName { get; public set; }
    public string ValueSchema { get; public set; }
    public string InputControlConfig { get; public set; }
    public string LearnMoreUrl { get; public set; }
    public LocalizableText Hint { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public LocalizableText get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(LocalizableText value);
    [CompilerGeneratedAttribute]
public LocalizableText get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(LocalizableText value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TypeId();
    [CompilerGeneratedAttribute]
public void set_TypeId(Nullable`1<int> value);
    public Nullable`1<KnownEnvironmentVariableType> get_KnownType();
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public string get_ApiId();
    [CompilerGeneratedAttribute]
public void set_ApiId(string value);
    [CompilerGeneratedAttribute]
public string get_ParameterKey();
    [CompilerGeneratedAttribute]
public void set_ParameterKey(string value);
    [CompilerGeneratedAttribute]
public string get_ParentSchemaName();
    [CompilerGeneratedAttribute]
public void set_ParentSchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_ValueSchema();
    [CompilerGeneratedAttribute]
public void set_ValueSchema(string value);
    [CompilerGeneratedAttribute]
public string get_InputControlConfig();
    [CompilerGeneratedAttribute]
public void set_InputControlConfig(string value);
    [CompilerGeneratedAttribute]
public string get_LearnMoreUrl();
    [CompilerGeneratedAttribute]
public void set_LearnMoreUrl(string value);
    [CompilerGeneratedAttribute]
public LocalizableText get_Hint();
    [CompilerGeneratedAttribute]
public void set_Hint(LocalizableText value);
}
public enum Microsoft.Crm.Tools.ComponentMetadata.KnownEnvironmentVariableType : Enum {
    public int value__;
    public static KnownEnvironmentVariableType String;
    public static KnownEnvironmentVariableType Number;
    public static KnownEnvironmentVariableType Boolean;
    public static KnownEnvironmentVariableType JSON;
    public static KnownEnvironmentVariableType DataSource;
    public static KnownEnvironmentVariableType Secret;
}
[JsonObjectAttribute]
public class Microsoft.Crm.Tools.ComponentMetadata.LocalizableText : object {
    [CompilerGeneratedAttribute]
private string <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<int, string> <ByLcid>k__BackingField;
    public string Default { get; public set; }
    public IDictionary`2<int, string> ByLcid { get; public set; }
    public LocalizableText(string default);
    [CompilerGeneratedAttribute]
public string get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<int, string> get_ByLcid();
    [CompilerGeneratedAttribute]
public void set_ByLcid(IDictionary`2<int, string> value);
    public bool ShouldSerializeByLcid();
    public bool HasText();
}
public static class Microsoft.Crm.Tools.ComponentMetadata.MetadataUtility : object {
    public static Nullable`1<KnownEnvironmentVariableType> ParseEnvironmentVariableTypeFromId(Nullable`1<int> typeId);
}
[JsonObjectAttribute]
public class Microsoft.Crm.Tools.ComponentMetadata.ScfMetadata : object {
    [CompilerGeneratedAttribute]
private string <ScfComponentTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string ScfComponentTypeName { get; public set; }
    public string SchemaName { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ScfComponentTypeName();
    [CompilerGeneratedAttribute]
public void set_ScfComponentTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[JsonObjectAttribute]
public class Microsoft.Crm.Tools.ComponentMetadata.SolutionMetadata : object {
    [CompilerGeneratedAttribute]
private string <UniqueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalizableText <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalizableText <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionMetadataComponents <Components>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ComponentCollection> <RawComponents>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionInformation <SolutionDescriptiveInformation>k__BackingField;
    [JsonPropertyAttribute]
public string UniqueName { get; public set; }
    [JsonPropertyAttribute]
public string Version { get; public set; }
    public LocalizableText DisplayName { get; public set; }
    public LocalizableText Description { get; public set; }
    public SolutionMetadataComponents Components { get; public set; }
    [JsonIgnoreAttribute]
public List`1<ComponentCollection> RawComponents { get; internal set; }
    [JsonIgnoreAttribute]
public SolutionInformation SolutionDescriptiveInformation { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_UniqueName();
    [CompilerGeneratedAttribute]
public void set_UniqueName(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public LocalizableText get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(LocalizableText value);
    [CompilerGeneratedAttribute]
public LocalizableText get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(LocalizableText value);
    [CompilerGeneratedAttribute]
public SolutionMetadataComponents get_Components();
    [CompilerGeneratedAttribute]
public void set_Components(SolutionMetadataComponents value);
    [CompilerGeneratedAttribute]
public List`1<ComponentCollection> get_RawComponents();
    [CompilerGeneratedAttribute]
internal void set_RawComponents(List`1<ComponentCollection> value);
    [CompilerGeneratedAttribute]
public SolutionInformation get_SolutionDescriptiveInformation();
    [CompilerGeneratedAttribute]
internal void set_SolutionDescriptiveInformation(SolutionInformation value);
}
[JsonObjectAttribute]
public class Microsoft.Crm.Tools.ComponentMetadata.SolutionMetadataComponents : object {
    [CompilerGeneratedAttribute]
private IList`1<CanvasAppMetadata> <CanvasApps>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ConnectionReferenceMetadata> <ConnectionReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<EnvironmentVariableMetadata> <EnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<WorkflowMetadata> <Workflows>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ScfMetadata> <ScfComponents>k__BackingField;
    public IList`1<CanvasAppMetadata> CanvasApps { get; public set; }
    public IList`1<ConnectionReferenceMetadata> ConnectionReferences { get; public set; }
    public IList`1<EnvironmentVariableMetadata> EnvironmentVariables { get; public set; }
    public IList`1<WorkflowMetadata> Workflows { get; public set; }
    public IList`1<ScfMetadata> ScfComponents { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<CanvasAppMetadata> get_CanvasApps();
    [CompilerGeneratedAttribute]
public void set_CanvasApps(IList`1<CanvasAppMetadata> value);
    [CompilerGeneratedAttribute]
public IList`1<ConnectionReferenceMetadata> get_ConnectionReferences();
    [CompilerGeneratedAttribute]
public void set_ConnectionReferences(IList`1<ConnectionReferenceMetadata> value);
    [CompilerGeneratedAttribute]
public IList`1<EnvironmentVariableMetadata> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
public void set_EnvironmentVariables(IList`1<EnvironmentVariableMetadata> value);
    [CompilerGeneratedAttribute]
public IList`1<WorkflowMetadata> get_Workflows();
    [CompilerGeneratedAttribute]
public void set_Workflows(IList`1<WorkflowMetadata> value);
    [CompilerGeneratedAttribute]
public IList`1<ScfMetadata> get_ScfComponents();
    [CompilerGeneratedAttribute]
public void set_ScfComponents(IList`1<ScfMetadata> value);
    public bool ShouldSerializeCanvasApps();
    public bool ShouldSerializeConnectionReferences();
    public bool ShouldSerializeEnvironmentVariables();
    public bool ShouldSerializeWorkflows();
    public bool ShouldSerializeScfComponents();
}
public enum Microsoft.Crm.Tools.ComponentMetadata.Workflow_category : Enum {
    public int value__;
    public static Workflow_category Workflow;
    public static Workflow_category Dialog;
    public static Workflow_category BusinessRule;
    public static Workflow_category Action;
    public static Workflow_category BusinessProcessFlow;
    public static Workflow_category ModernFlow;
    public static Workflow_category DesktopFlow;
}
public enum Microsoft.Crm.Tools.ComponentMetadata.Workflow_mode : Enum {
    public int value__;
    public static Workflow_mode Background;
    public static Workflow_mode Realtime;
}
public enum Microsoft.Crm.Tools.ComponentMetadata.Workflow_uiflowtype : Enum {
    public int value__;
    public static Workflow_uiflowtype Windowsrecorder_V1;
    public static Workflow_uiflowtype SeleniumIDE;
    public static Workflow_uiflowtype PowerAutomateDesktop;
    public static Workflow_uiflowtype Recording;
}
[JsonObjectAttribute]
public class Microsoft.Crm.Tools.ComponentMetadata.WorkflowMetadata : object {
    [CompilerGeneratedAttribute]
private Guid <WorkflowId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalizableText <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Workflow_category> <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Workflow_uiflowtype> <UIFlowType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Workflow_mode> <Mode>k__BackingField;
    [JsonPropertyAttribute]
public Guid WorkflowId { get; public set; }
    public string Name { get; public set; }
    public LocalizableText DisplayName { get; public set; }
    public Nullable`1<Workflow_category> Category { get; public set; }
    public Nullable`1<Workflow_uiflowtype> UIFlowType { get; public set; }
    public Nullable`1<Workflow_mode> Mode { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_WorkflowId();
    [CompilerGeneratedAttribute]
public void set_WorkflowId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public LocalizableText get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(LocalizableText value);
    [CompilerGeneratedAttribute]
public Nullable`1<Workflow_category> get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(Nullable`1<Workflow_category> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Workflow_uiflowtype> get_UIFlowType();
    [CompilerGeneratedAttribute]
public void set_UIFlowType(Nullable`1<Workflow_uiflowtype> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Workflow_mode> get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(Nullable`1<Workflow_mode> value);
}
public static class Microsoft.Crm.Tools.Logger : object {
    private static TraceSwitch traceSwitch;
    [CompilerGeneratedAttribute]
private static Collection`1<string> <AllWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private static Collection`1<string> <AllErrors>k__BackingField;
    public static Collection`1<string> AllWarnings { get; private set; }
    public static Collection`1<string> AllErrors { get; private set; }
    public static TraceLevel Level { get; public set; }
    private static Logger();
    [CompilerGeneratedAttribute]
public static Collection`1<string> get_AllWarnings();
    [CompilerGeneratedAttribute]
private static void set_AllWarnings(Collection`1<string> value);
    [CompilerGeneratedAttribute]
public static Collection`1<string> get_AllErrors();
    [CompilerGeneratedAttribute]
private static void set_AllErrors(Collection`1<string> value);
    public static TraceLevel get_Level();
    public static void set_Level(TraceLevel value);
    public static void Log(TraceLevel level, string message);
    public static void Log(TraceLevel level, string message, Object[] args);
    public static void Log(TraceLevel level, Exception exception);
    public static void Log(TraceLevel level, Exception exception, string message, Object[] args);
    public static void Message(TraceLevel level, string messageText);
    public static void Message(TraceLevel level, string messageText, Object[] args);
    public static void Message(TraceLevel level, Exception exception, string msg, Object[] args);
    private static void WriteLog(TraceLevel level, string message);
    private static void WriteMessage(TraceLevel level, string message);
}
public enum Microsoft.Crm.Tools.SolutionPackager.AllowDelete : Enum {
    public int value__;
    public static AllowDelete Yes;
    public static AllowDelete No;
    public static AllowDelete Prompt;
}
public enum Microsoft.Crm.Tools.SolutionPackager.AllowWrite : Enum {
    public int value__;
    public static AllowWrite Yes;
    public static AllowWrite No;
}
[AttributeUsageAttribute("256")]
public class Microsoft.Crm.Tools.SolutionPackager.ArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ImplicitDefaultValue>k__BackingField;
    private string shortName;
    private string longName;
    private string helpText;
    private object defaultValue;
    private ArgumentType type;
    public ArgumentType Type { get; }
    public bool DefaultShortName { get; }
    public string ShortName { get; public set; }
    public bool DefaultLongName { get; }
    public string LongName { get; public set; }
    public object DefaultValue { get; public set; }
    public string ImplicitDefaultValue { get; public set; }
    public bool HasDefaultValue { get; }
    public bool HasHelpText { get; }
    public string HelpText { get; public set; }
    public ArgumentAttribute(ArgumentType type);
    public ArgumentType get_Type();
    public bool get_DefaultShortName();
    public string get_ShortName();
    public void set_ShortName(string value);
    public bool get_DefaultLongName();
    public string get_LongName();
    public void set_LongName(string value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public string get_ImplicitDefaultValue();
    [CompilerGeneratedAttribute]
public void set_ImplicitDefaultValue(string value);
    public bool get_HasDefaultValue();
    public bool get_HasHelpText();
    public string get_HelpText();
    public void set_HelpText(string value);
}
[FlagsAttribute]
public enum Microsoft.Crm.Tools.SolutionPackager.ArgumentType : Enum {
    public int value__;
    public static ArgumentType Required;
    public static ArgumentType Unique;
    public static ArgumentType Multiple;
    public static ArgumentType AtMostOnce;
    public static ArgumentType LastOccurrenceWins;
    public static ArgumentType MultipleUnique;
    public static ArgumentType RequiresValue;
    public static ArgumentType Hidden;
    public static ArgumentType Basic;
    public static ArgumentType ImpliedDefaultValue;
}
internal class Microsoft.Crm.Tools.SolutionPackager.BasicFolderMapper : MapperBase {
    public static string ElementName;
    private static string mapAttrName;
    private static string toAttrName;
    public BasicFolderMapper(PackagerArguments arguments, XElement element);
    public virtual bool TryMapFile(string inputFile, String& mappedFile, bool checkExistance);
    public virtual void GetMappedFiles(IList`1<MappedFile> files, HashSet`1<string> legacyComponentDirectories, bool checkExistance);
}
public enum Microsoft.Crm.Tools.SolutionPackager.CommandAction : Enum {
    public int value__;
    public static CommandAction Extract;
    public static CommandAction Pack;
}
public class Microsoft.Crm.Tools.SolutionPackager.CommandLineException : Exception {
    public CommandLineException(string message);
    public CommandLineException(string message, Exception innerException);
}
[DebuggerDisplayAttribute("t:{ComponentType} n:{PrimaryName}")]
public class Microsoft.Crm.Tools.SolutionPackager.Component : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryName>k__BackingField;
    [CompilerGeneratedAttribute]
private ComponentType <ComponentType>k__BackingField;
    [CompilerGeneratedAttribute]
private XElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <ElementJson>k__BackingField;
    public Guid Id { get; public set; }
    public string PrimaryName { get; public set; }
    public ComponentType ComponentType { get; public set; }
    public XElement Element { get; public set; }
    public JObject ElementJson { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_PrimaryName();
    [CompilerGeneratedAttribute]
public void set_PrimaryName(string value);
    [CompilerGeneratedAttribute]
public ComponentType get_ComponentType();
    [CompilerGeneratedAttribute]
public void set_ComponentType(ComponentType value);
    [CompilerGeneratedAttribute]
public XElement get_Element();
    [CompilerGeneratedAttribute]
public void set_Element(XElement value);
    [CompilerGeneratedAttribute]
public JObject get_ElementJson();
    [CompilerGeneratedAttribute]
public void set_ElementJson(JObject value);
}
[DebuggerDisplayAttribute("ComponentType:{ComponentType}, ElementName:{ElementName}, Name:{Name}")]
public class Microsoft.Crm.Tools.SolutionPackager.ComponentCollection : Collection`1<Component> {
    [CompilerGeneratedAttribute]
private ComponentType <ComponentType>k__BackingField;
    [CompilerGeneratedAttribute]
private XElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <ElementJson>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public ComponentType ComponentType { get; private set; }
    public XElement Element { get; private set; }
    public JObject ElementJson { get; public set; }
    public string Name { get; private set; }
    public string ElementName { get; }
    public ComponentCollection(ComponentType componentType, XElement element, string name);
    public ComponentCollection(ComponentType componentType, JObject element, string name);
    [CompilerGeneratedAttribute]
public ComponentType get_ComponentType();
    [CompilerGeneratedAttribute]
private void set_ComponentType(ComponentType value);
    [CompilerGeneratedAttribute]
public XElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(XElement value);
    [CompilerGeneratedAttribute]
public JObject get_ElementJson();
    [CompilerGeneratedAttribute]
public void set_ElementJson(JObject value);
    public void ResyncComponentElements(IEnumerable`1<string> ignoreComponentList);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public string get_ElementName();
    public void OrderComponentsByPrimaryName();
}
public class Microsoft.Crm.Tools.SolutionPackager.ComponentConfigurationCollection : ConfigurationElementCollection {
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class Microsoft.Crm.Tools.SolutionPackager.ComponentConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("type")]
public ComponentType ComponentType { get; public set; }
    [ConfigurationPropertyAttribute("directory")]
[StringValidatorAttribute]
public string MainDirectory { get; public set; }
    [ConfigurationPropertyAttribute("file")]
public string FileName { get; public set; }
    [ConfigurationPropertyAttribute("tag")]
public string Tag { get; public set; }
    public ComponentConfigurationElement(ComponentType type, string directory, string file);
    public ComponentType get_ComponentType();
    public void set_ComponentType(ComponentType value);
    public string get_MainDirectory();
    public void set_MainDirectory(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_Tag();
    public void set_Tag(string value);
}
public class Microsoft.Crm.Tools.SolutionPackager.ComponentConfigurationManager : object {
    private Dictionary`2<ComponentType, ComponentConfigurationElement> configurationDictionary;
    private ComponentConfigurationSection configurationSection;
    public ComponentConfigurationSection ConfigurationSection { get; }
    public ComponentConfigurationSection get_ConfigurationSection();
    public ComponentConfigurationElement GetConfiguration(ComponentType type);
}
public class Microsoft.Crm.Tools.SolutionPackager.ComponentConfigurationSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("customizations")]
public string CustomizationsFile { get; public set; }
    [ConfigurationPropertyAttribute("solution")]
public string SolutionFile { get; public set; }
    [ConfigurationPropertyAttribute("components")]
public ComponentConfigurationCollection Configurations { get; }
    [ConfigurationPropertyAttribute("plugins")]
public PluginConfigurationCollection Plugins { get; }
    public string get_CustomizationsFile();
    public void set_CustomizationsFile(string value);
    public string get_SolutionFile();
    public void set_SolutionFile(string value);
    public ComponentConfigurationCollection get_Configurations();
    public PluginConfigurationCollection get_Plugins();
}
public class Microsoft.Crm.Tools.SolutionPackager.ComponentFile : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Bytes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MappedFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyName <MappedFileAssemblyName>k__BackingField;
    public string FileName { get; public set; }
    public Uri Uri { get; public set; }
    public Byte[] Bytes { get; public set; }
    public string MappedFileName { get; public set; }
    public AssemblyName MappedFileAssemblyName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public Byte[] get_Bytes();
    [CompilerGeneratedAttribute]
public void set_Bytes(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_MappedFileName();
    [CompilerGeneratedAttribute]
public void set_MappedFileName(string value);
    [CompilerGeneratedAttribute]
public AssemblyName get_MappedFileAssemblyName();
    [CompilerGeneratedAttribute]
public void set_MappedFileAssemblyName(AssemblyName value);
    public XDocument ReadAsXml();
    public JObject ReadAsJson();
    public virtual string ToString();
}
internal abstract class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessorBase : object {
    protected Context context;
    protected bool isSingleComponentElement;
    protected bool isWriteIndividualComponent;
    protected bool isFileBackedComponent;
    protected bool isCollectionComponent;
    [CompilerGeneratedAttribute]
private bool <IsDifferentInManaged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SupportedElementName>k__BackingField;
    [CompilerGeneratedAttribute]
private ComponentType <SupportedComponentType>k__BackingField;
    private LocalizationNameKeyMap locMap;
    [CompilerGeneratedAttribute]
private string <ParentTagForNestedMultiLcids>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChildTagForNestedMultiLcids>k__BackingField;
    public static string NodeNamePlaceholder;
    public List`1<LocalizableElementXPath> locableElementXPaths;
    internal static ConcurrentDictionary`2<string, XElement> Unique;
    public bool IsDifferentInManaged { get; protected set; }
    public string SupportedElementName { get; private set; }
    public ComponentType SupportedComponentType { get; private set; }
    public string ParentTagForNestedMultiLcids { get; public set; }
    public string ChildTagForNestedMultiLcids { get; public set; }
    protected ComponentProcessorBase(string elementName, ComponentType componentType);
    private static ComponentProcessorBase();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDifferentInManaged();
    [CompilerGeneratedAttribute]
protected void set_IsDifferentInManaged(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SupportedElementName();
    [CompilerGeneratedAttribute]
private void set_SupportedElementName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ComponentType get_SupportedComponentType();
    [CompilerGeneratedAttribute]
private void set_SupportedComponentType(ComponentType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ParentTagForNestedMultiLcids();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParentTagForNestedMultiLcids(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ChildTagForNestedMultiLcids();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ChildTagForNestedMultiLcids(string value);
    public sealed virtual void Initialize(Context context);
    public sealed virtual ComponentCollection CreateComponents(XElement element);
    public sealed virtual ComponentCollection CreateComponents(JObject element);
    public virtual ComponentCollection ReadFromFiles();
    public virtual void WriteToFiles(ComponentCollection components, IEnumerable`1<string> ignoreComponentList);
    protected abstract virtual Component CreateComponent(XElement element);
    protected virtual Component CreateComponent(JObject element);
    protected virtual Component CreateWorkflowImageComponent(XElement element);
    protected string GetMainDirectory(ComponentType componentType);
    protected virtual void WriteComponentFile(FileBackedComponent fileBackedComponent, IEnumerable`1<string> ignoreComponentList);
    protected virtual IEnumerable`1<XElement> GetComponentElements(XElement componentCollectionElement);
    protected virtual void AddComponentElement(XElement componentCollectionElement, XElement element);
    protected string GetLocalFileName(string componentFileName);
    private static string RemoveTopLevelFolder(string fileName);
    protected string GetComponentPath(Component component);
    protected string GetComponentPath(ComponentType componentType, string primaryName, string componentsRootName);
    protected string GetComponentPathPreferManagedIfAvailable(ComponentType componentType, string primaryName, string componentsRootName);
    protected string GetComponentPathWithPackageType(bool isManaged, ComponentType componentType, string primaryName, string componentsRootName);
    private static string ResolvePathPlaceholder(bool isManaged, string pathPart, ComponentType componentType, string primaryName, string componentsRootName);
    protected virtual bool NeedManagedFilename(XElement item);
    protected virtual void LoadComponentFiles(ComponentCollection components);
    protected ComponentFile LoadComponentFile(FileBackedComponent fileBackedComponent);
    protected void WriteCollectionToSubFolders(string folder, XElement collectionContainer, string folderNameAttribute, string itemIdAttribute);
    protected void WriteCollectionToFolder(string folder, XElement subCollection, string idElement);
    private void HandleDifferentLcidsWithSameId(string filename, XElement item, string parentElementName, string childElementName);
    private XElement preserveDifferentLcidSystemForm(XElement parentXml, XElement childXml, XElement item, string lcidFlag);
    protected void ReadCollectionFromFolder(string collectionFolder, XElement collection);
    protected void ReadCollectionFromFiles(String[] filenames, XElement subCollection);
    private XElement AddNestedSubcollection(XElement subCollection, XElement item, string parentElementName, string childElementName);
    protected virtual void ShowProcessing(Component component);
    protected virtual void ShowProcessing(string name);
    public virtual Collection`1<LocalizableElement> GetLocalizableElements(ComponentCollection components);
    protected virtual string GetElementResourceName(ComponentCollection components, LocalizableElementXPath query, XElement element);
    protected string GetRelativeElementAttribute(XElement sourceElement, string relativeAttributePath);
    public static XElement GetRelativeElement(XElement element, string relativePath);
    protected string ConstructFormula(XElement element, string formula);
    protected static XElement ReadSubComponent(string entityDirectory, string componentName);
    public virtual HashSet`1<string> GetNonShardedComponentDirNames();
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessors.AppModuleProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
    protected virtual bool NeedManagedFilename(XElement item);
    public virtual void WriteToFiles(ComponentCollection components, IEnumerable`1<string> ignoreComponentList);
    public virtual ComponentCollection ReadFromFiles();
    private XElement ReadEntityDirectory(string entityDirectory);
    private XElement ReadAppModule(string entityDirectory, string componentName);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessors.AppModuleSitemapProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
    protected virtual bool NeedManagedFilename(XElement item);
    public virtual ComponentCollection ReadFromFiles();
    private XElement ReadAppModuleMapping(string appModuleName);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessors.CanvasAppsProcessor : GenericComponentProcessor {
    private static String[] KnownCompositesDescendants;
    private static CanvasAppsProcessor();
    public virtual void WriteToFiles(ComponentCollection components, IEnumerable`1<string> ignoreComponentList);
    protected virtual void DiscoverExplicitComposites(ComponentCollection components, IEnumerable`1<string> compositeFiles);
    private void PopulateExplicitCompositeFiles(ComponentCollection components);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessors.ChannelAccessProfileProcessor : ComponentProcessorBase {
    private static string NameAttributeName;
    private static string IDFieldName;
    protected virtual Component CreateComponent(XElement element);
    public virtual ComponentCollection ReadFromFiles();
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessors.ChannelAccessProfileRulesProcessor : ComponentProcessorBase {
    private static string NameAttributeName;
    private static string IDFieldName;
    protected virtual Component CreateComponent(XElement element);
    public virtual ComponentCollection ReadFromFiles();
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessors.ComplexControlProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessors.DialogProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessors.ImportMapsProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
    public virtual ComponentCollection ReadFromFiles();
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessors.ScfProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(JObject element);
    protected virtual Component CreateComponent(XElement element);
    protected virtual string GetElementResourceName(ComponentCollection components, LocalizableElementXPath query, XElement element);
    public virtual Collection`1<LocalizableElement> GetLocalizableElements(ComponentCollection components);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessors.ServicePlanAppModulesProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessors.ServicePlanProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessors.SolutionComponentProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
    protected virtual string GetElementResourceName(ComponentCollection components, LocalizableElementXPath query, XElement element);
    public virtual Collection`1<LocalizableElement> GetLocalizableElements(ComponentCollection components);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessors.SolutionDataProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
    protected virtual bool NeedManagedFilename(XElement item);
    protected virtual void WriteComponentFile(FileBackedComponent fileBackedComponent, IEnumerable`1<string> ignoreComponentList);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ComponentProcessors.WebWizardProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
public enum Microsoft.Crm.Tools.SolutionPackager.ComponentType : Enum {
    public int value__;
    public static ComponentType Entity;
    public static ComponentType Attribute;
    public static ComponentType Relationship;
    public static ComponentType AttributePicklistValue;
    public static ComponentType AttributeLookupValue;
    public static ComponentType ViewAttribute;
    public static ComponentType LocalizedLabel;
    public static ComponentType RelationshipExtraCondition;
    public static ComponentType OptionSet;
    public static ComponentType EntityRelationship;
    public static ComponentType EntityRelationshipRole;
    public static ComponentType EntityRelationshipRelationships;
    public static ComponentType ManagedProperty;
    public static ComponentType EntityKey;
    public static ComponentType EntityKeyAttribute;
    public static ComponentType Privilege;
    public static ComponentType PrivilegeObjectTypeCode;
    public static ComponentType EntityIndex;
    public static ComponentType Role;
    public static ComponentType RolePrivileges;
    public static ComponentType DisplayString;
    public static ComponentType DisplayStringMap;
    public static ComponentType Form;
    public static ComponentType OrganizationSettings;
    public static ComponentType SavedQuery;
    public static ComponentType Workflow;
    public static ComponentType ProcessTrigger;
    public static ComponentType Report;
    public static ComponentType ReportEntity;
    public static ComponentType ReportCategory;
    public static ComponentType ReportVisibility;
    public static ComponentType ActivityMimeAttachment;
    public static ComponentType Template;
    public static ComponentType ContractTemplate;
    public static ComponentType KbArticleTemplate;
    public static ComponentType MailMergeTemplate;
    public static ComponentType EntityMap;
    public static ComponentType AttributeMap;
    public static ComponentType RibbonCommand;
    public static ComponentType RibbonContextGroup;
    public static ComponentType RibbonCustomization;
    public static ComponentType RibbonRule;
    public static ComponentType RibbonTabToCommandMap;
    public static ComponentType RibbonDiff;
    public static ComponentType SavedQueryVisualization;
    public static ComponentType SystemForm;
    public static ComponentType WebResource;
    public static ComponentType SiteMap;
    public static ComponentType ConnectionRole;
    public static ComponentType ComplexControl;
    public static ComponentType HierarchyRule;
    public static ComponentType CustomControl;
    public static ComponentType CustomControlResource;
    public static ComponentType FieldSecurityProfile;
    public static ComponentType FieldPermission;
    public static ComponentType SecuredMaskingRule;
    public static ComponentType AttributeMaskingRule;
    public static ComponentType CustomControlDefaultConfig;
    public static ComponentType AppModule;
    public static ComponentType AppModuleSiteMap;
    public static ComponentType AppModuleRibbonCommand;
    public static ComponentType AppModuleToRoleMap;
    public static ComponentType PluginType;
    public static ComponentType PluginAssembly;
    public static ComponentType SdkMessageProcessingStep;
    public static ComponentType SdkMessageProcessingStepImage;
    public static ComponentType ServiceEndpoint;
    public static ComponentType RoutingRule;
    public static ComponentType RoutingRuleItem;
    public static ComponentType SLA;
    public static ComponentType SLAItem;
    public static ComponentType ConvertRule;
    public static ComponentType ConvertRuleItem;
    public static ComponentType KnowledgeBaseRecord;
    public static ComponentType ChannelPropertyGroup;
    public static ComponentType ChannelProperty;
    public static ComponentType DependencyFeature;
    public static ComponentType SimilarityRule;
    public static ComponentType SimilarityRuleCondition;
    public static ComponentType ProfileRule;
    public static ComponentType ProfileRuleItem;
    public static ComponentType ProfileEntityAccessLevel;
    public static ComponentType ChannelAccessProfile;
    public static ComponentType MobileOfflineProfile;
    public static ComponentType MobileOfflineProfileItem;
    public static ComponentType MobileOfflineProfileItemAssociation;
    public static ComponentType RecommendationModel;
    public static ComponentType RecommendationModelMapping;
    public static ComponentType KnowledgeSearchModel;
    public static ComponentType TextAnalyticsEntityMapping;
    public static ComponentType TopicModelConfiguration;
    public static ComponentType EmailSignature;
    public static ComponentType AdvancedSimilarityRule;
    public static ComponentType EntityDataSourceMapping;
    public static ComponentType EntityDataProvider;
    public static ComponentType EntityDataSource;
    public static ComponentType AppConfig;
    public static ComponentType AppConfigInstance;
    public static ComponentType SdkMessage;
    public static ComponentType SdkMessageFilter;
    public static ComponentType SdkMessagePair;
    public static ComponentType SdkMessageRequest;
    public static ComponentType SdkMessageRequestField;
    public static ComponentType SdkMessageResponse;
    public static ComponentType SdkMessageResponseField;
    public static ComponentType ImportMap;
    public static ComponentType StoredProcedure;
    public static ComponentType WebWizard;
    public static ComponentType Dialogs;
    public static ComponentType ImportEntityMapping;
    public static ComponentType ColumnMapping;
    public static ComponentType LookUpMapping;
    public static ComponentType PickListMapping;
    public static ComponentType TransformationMapping;
    public static ComponentType TransformationParameterMapping;
    public static ComponentType ImportData;
    public static ComponentType ImportFile;
    public static ComponentType ImportLog;
    public static ComponentType OwnerMapping;
    public static ComponentType Dashboard;
    public static ComponentType NavigationSetting;
    public static ComponentType NavigationSettingItem;
    public static ComponentType GlobalSearchConfiguration;
    public static ComponentType CardType;
    public static ComponentType SolutionComponentDefinition;
    public static ComponentType CanvasApp;
    public static ComponentType Connector;
    public static ComponentType ECConnector;
    public static ComponentType EnvironmentVariableDefinition;
    public static ComponentType EnvironmentVariableValue;
    public static ComponentType AITemplate;
    public static ComponentType AIModel;
    public static ComponentType AIConfiguration;
    public static ComponentType Bot;
    public static ComponentType EntityAnalyticsConfiguration;
    public static ComponentType AttributeImageConfiguration;
    public static ComponentType EntityImageConfiguration;
    public static ComponentType Dataflow;
    public static ComponentType DataflowEntities;
    public static ComponentType DualWriteEntityMap;
    public static ComponentType DataIntegrationConnection;
    public static ComponentType ExportToDataLakeConfig;
    public static ComponentType TeamTemplate;
    public static ComponentType InteractionCentricDashboard;
    public static ComponentType SyncAttributeMappingProfile;
    public static ComponentType ComplexControls;
    public static ComponentType EntityPrivilege;
    public static ComponentType Maps;
    public static ComponentType CanvasApps;
    public static ComponentType Solution;
    public static ComponentType ServicePlans;
    public static ComponentType ServicePlanAppModules;
    public static ComponentType ScfComponent;
    public static ComponentType GenericComponent;
    public static ComponentType SolutionComponent;
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ConnectionRoleProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
    protected virtual IEnumerable`1<XElement> GetComponentElements(XElement componentCollectionElement);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ConnectorsProcessor : GenericComponentProcessor {
}
internal static class Microsoft.Crm.Tools.SolutionPackager.Constants : object {
    public static string ManagedSolutionComponentFileSuffix;
    public static string DefaultExtension;
    public static string DefaultMetadataExtension;
    public static string ResourcesFolder;
    public static string ResxName;
    public static string SourceResourceFilename;
    public static string TemplateResourceFilename;
    public static string Auto;
    public static string RibbonDiffFileName;
    public static string StoredProcExtension;
    public static string PluginFolderNameExternalFolderName;
    public static string Other;
    public static string Solution;
    public static string Customizations;
}
public class Microsoft.Crm.Tools.SolutionPackager.Context : object {
    private Nullable`1<ComponentType> _filterType;
    [ImportManyAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
private List`1<IComponentProcessor> _componentProcessors;
    [ImportAttribute("Microsoft.Crm.Tools.SolutionPackager.IGenericProcessorFactory")]
private GenericProcessorFactory _genericComponentFactory;
    private IDictionary`2<string, IComponentProcessor> _processorElementNameDictionary;
    private IDictionary`2<ComponentType, IComponentProcessor> _processorTypeDictionary;
    [CompilerGeneratedAttribute]
private CommandAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ZipFile>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <ZipFileStream>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionInformation <SolutionInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private Customizations <Customizations>k__BackingField;
    [CompilerGeneratedAttribute]
private ComponentConfigurationManager <ComponentConfigurationManager>k__BackingField;
    public SolutionPackageType PackageTypeArgument;
    public bool IsManagedPackage;
    [CompilerGeneratedAttribute]
private string <TemplateLcid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateIsoCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Localize>k__BackingField;
    public bool UseLcid;
    [CompilerGeneratedAttribute]
private AllowDelete <AllowDeletes>k__BackingField;
    [CompilerGeneratedAttribute]
private AllowWrite <AllowWrites>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseUnmanagedFileForManaged>k__BackingField;
    [CompilerGeneratedAttribute]
private PackagerArguments <InvocationArguments>k__BackingField;
    public IList`1<LocalFileProcessInfo> LocalProcessingCandidates;
    [CompilerGeneratedAttribute]
private PostProcessorCallback <LocalFilesProcessing>k__BackingField;
    public CommandAction Action { get; private set; }
    public string ZipFile { get; internal set; }
    public Stream ZipFileStream { get; internal set; }
    public string RootFolder { get; private set; }
    public SolutionInformation SolutionInformation { get; internal set; }
    public Customizations Customizations { get; internal set; }
    public ComponentConfigurationManager ComponentConfigurationManager { get; internal set; }
    public bool IsFilterApplied { get; }
    public string TemplateLcid { get; internal set; }
    public string TemplateIsoCode { get; internal set; }
    public bool Localize { get; private set; }
    public AllowDelete AllowDeletes { get; private set; }
    public AllowWrite AllowWrites { get; private set; }
    public bool UseUnmanagedFileForManaged { get; public set; }
    public PackagerArguments InvocationArguments { get; public set; }
    public PostProcessorCallback LocalFilesProcessing { get; public set; }
    public Context(PackagerArguments arguments);
    [CompilerGeneratedAttribute]
public CommandAction get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(CommandAction value);
    [CompilerGeneratedAttribute]
public string get_ZipFile();
    [CompilerGeneratedAttribute]
internal void set_ZipFile(string value);
    [CompilerGeneratedAttribute]
public Stream get_ZipFileStream();
    [CompilerGeneratedAttribute]
internal void set_ZipFileStream(Stream value);
    [CompilerGeneratedAttribute]
public string get_RootFolder();
    [CompilerGeneratedAttribute]
private void set_RootFolder(string value);
    [CompilerGeneratedAttribute]
public SolutionInformation get_SolutionInformation();
    [CompilerGeneratedAttribute]
internal void set_SolutionInformation(SolutionInformation value);
    [CompilerGeneratedAttribute]
public Customizations get_Customizations();
    [CompilerGeneratedAttribute]
internal void set_Customizations(Customizations value);
    [CompilerGeneratedAttribute]
public ComponentConfigurationManager get_ComponentConfigurationManager();
    [CompilerGeneratedAttribute]
internal void set_ComponentConfigurationManager(ComponentConfigurationManager value);
    public bool get_IsFilterApplied();
    [CompilerGeneratedAttribute]
public string get_TemplateLcid();
    [CompilerGeneratedAttribute]
internal void set_TemplateLcid(string value);
    [CompilerGeneratedAttribute]
public string get_TemplateIsoCode();
    [CompilerGeneratedAttribute]
internal void set_TemplateIsoCode(string value);
    [CompilerGeneratedAttribute]
public bool get_Localize();
    [CompilerGeneratedAttribute]
private void set_Localize(bool value);
    [CompilerGeneratedAttribute]
public AllowDelete get_AllowDeletes();
    [CompilerGeneratedAttribute]
private void set_AllowDeletes(AllowDelete value);
    [CompilerGeneratedAttribute]
public AllowWrite get_AllowWrites();
    [CompilerGeneratedAttribute]
private void set_AllowWrites(AllowWrite value);
    [CompilerGeneratedAttribute]
public bool get_UseUnmanagedFileForManaged();
    [CompilerGeneratedAttribute]
public void set_UseUnmanagedFileForManaged(bool value);
    [CompilerGeneratedAttribute]
public PackagerArguments get_InvocationArguments();
    [CompilerGeneratedAttribute]
public void set_InvocationArguments(PackagerArguments value);
    [CompilerGeneratedAttribute]
public PostProcessorCallback get_LocalFilesProcessing();
    [CompilerGeneratedAttribute]
public void set_LocalFilesProcessing(PostProcessorCallback value);
    public string ValidateLocaleId(string localeId, String& outLcid, bool returnIsoCode);
    public sealed virtual void OnImportsSatisfied();
    public IComponentProcessor GetComponentProcessor(string elementName);
    public IComponentProcessor GetComponentProcessor(ComponentType type, string elementName);
    public IComponentProcessor GetComponentProcessor(XElement element, bool haveName);
    public bool IsFilteredOut(ComponentType componentType);
}
internal static class Microsoft.Crm.Tools.SolutionPackager.CtrlManifestSchema : object {
    public static string Control;
    public static string Namespace;
    public static string Constructor;
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.CustomControlsProcessor : ComponentProcessorBase {
    private static string ManifestFileName;
    private Lazy`1<ComponentConfigurationElement> configuration;
    private ComponentConfigurationElement Configuration { get; }
    private ComponentConfigurationElement get_Configuration();
    protected virtual Component CreateComponent(XElement element);
    protected virtual void WriteComponentFile(FileBackedComponent manifestComponent, IEnumerable`1<string> ignoreComponentList);
    public virtual ComponentCollection ReadFromFiles();
    protected virtual void LoadComponentFiles(ComponentCollection controlManifestComponents);
    private IEnumerable`1<string> GetComponentFilesFromDisk(string controlManifestFile);
    private IEnumerable`1<ComponentFile> GetComponentFilesFromCustomizations(string controlManifestFile);
    private ComponentFile LoadFile(string fileName, string controlName, string controlRootPath, bool throwOnNotFound);
    private void ValidateResx(string resxFileName, string controlRootPath);
    private string GetPrimaryName(FileBackedComponent manifestComponent);
    private XElement GetControlManifest(string manifestName);
    private static string BuildPrimaryName(XElement controlElement);
    private static string EnsureRelativeDiskPath(string fileName);
    private static string GetRootedPath(string fileName);
    private static string BuildComponentFilesPath(String[] parts);
    private static XElement XElementFrom(Byte[] xmlBuffer);
    private static DiskReaderException GetReaderException(string message, Object[] args);
    [CompilerGeneratedAttribute]
private ComponentConfigurationElement <.ctor>b__4_0();
}
public class Microsoft.Crm.Tools.SolutionPackager.Customizations : object {
    private Dictionary`2<string, ComponentFile> _componentFileInternal;
    [CompilerGeneratedAttribute]
private List`1<ComponentCollection> <Components>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ComponentCollection> <ScfComponents>k__BackingField;
    [CompilerGeneratedAttribute]
private XDocument <CustomizationsXDocument>k__BackingField;
    public List`1<ComponentCollection> Components { get; private set; }
    public List`1<ComponentCollection> ScfComponents { get; private set; }
    public ReadOnlyDictionary`2<string, ComponentFile> ComponentFiles { get; }
    public XDocument CustomizationsXDocument { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<ComponentCollection> get_Components();
    [CompilerGeneratedAttribute]
private void set_Components(List`1<ComponentCollection> value);
    [CompilerGeneratedAttribute]
public List`1<ComponentCollection> get_ScfComponents();
    [CompilerGeneratedAttribute]
private void set_ScfComponents(List`1<ComponentCollection> value);
    public ReadOnlyDictionary`2<string, ComponentFile> get_ComponentFiles();
    [CompilerGeneratedAttribute]
public XDocument get_CustomizationsXDocument();
    [CompilerGeneratedAttribute]
public void set_CustomizationsXDocument(XDocument value);
    public void AddComponentFile(Uri uri, Byte[] bytes);
    public void AddComponentFile(ComponentFile componentFile);
    public bool TryGetComponentFile(string key, ComponentFile& componentFile);
    private string GetNormalizedKey(string uri);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.DashboardProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
[AttributeUsageAttribute("256")]
public class Microsoft.Crm.Tools.SolutionPackager.DefaultArgumentAttribute : ArgumentAttribute {
    public DefaultArgumentAttribute(ArgumentType type);
}
public class Microsoft.Crm.Tools.SolutionPackager.Dependant : object {
    [CompilerGeneratedAttribute]
private int <ComponentTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private ComponentType <ComponentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentSchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RequiredMissingDependency> <RequiredMissingDependencies>k__BackingField;
    public int ComponentTypeId { get; public set; }
    [JsonIgnoreAttribute]
public ComponentType ComponentType { get; public set; }
    public string SchemaName { get; public set; }
    public Nullable`1<Guid> Id { get; public set; }
    public string DisplayName { get; public set; }
    public string ParentSchemaName { get; public set; }
    public string ParentDisplayName { get; public set; }
    public IList`1<RequiredMissingDependency> RequiredMissingDependencies { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ComponentTypeId();
    [CompilerGeneratedAttribute]
public void set_ComponentTypeId(int value);
    [CompilerGeneratedAttribute]
public ComponentType get_ComponentType();
    [CompilerGeneratedAttribute]
public void set_ComponentType(ComponentType value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ParentSchemaName();
    [CompilerGeneratedAttribute]
public void set_ParentSchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_ParentDisplayName();
    [CompilerGeneratedAttribute]
public void set_ParentDisplayName(string value);
    [CompilerGeneratedAttribute]
public IList`1<RequiredMissingDependency> get_RequiredMissingDependencies();
    [CompilerGeneratedAttribute]
public void set_RequiredMissingDependencies(IList`1<RequiredMissingDependency> value);
}
public class Microsoft.Crm.Tools.SolutionPackager.DeploymentSettings.CanvasAppSettings : object {
    [CompilerGeneratedAttribute]
private Guid <AadGroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RoleName> <RoleName>k__BackingField;
    [JsonPropertyAttribute]
public Guid AadGroupId { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    public Nullable`1<RoleName> RoleName { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_AadGroupId();
    [CompilerGeneratedAttribute]
public void set_AadGroupId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<RoleName> get_RoleName();
    [CompilerGeneratedAttribute]
public void set_RoleName(Nullable`1<RoleName> value);
}
public class Microsoft.Crm.Tools.SolutionPackager.DeploymentSettings.ConnectionInstanceSettings : object {
    [CompilerGeneratedAttribute]
private string <LogicalName>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <ConnectionParametersConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <ConnectionParameterSetConfig>k__BackingField;
    [JsonPropertyAttribute]
public string LogicalName { get; public set; }
    public JObject ConnectionParametersConfig { get; public set; }
    public JObject ConnectionParameterSetConfig { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LogicalName();
    [CompilerGeneratedAttribute]
public void set_LogicalName(string value);
    [CompilerGeneratedAttribute]
public JObject get_ConnectionParametersConfig();
    [CompilerGeneratedAttribute]
public void set_ConnectionParametersConfig(JObject value);
    [CompilerGeneratedAttribute]
public JObject get_ConnectionParameterSetConfig();
    [CompilerGeneratedAttribute]
public void set_ConnectionParameterSetConfig(JObject value);
}
public class Microsoft.Crm.Tools.SolutionPackager.DeploymentSettings.ConnectionReferenceSettings : object {
    [CompilerGeneratedAttribute]
private string <LogicalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectorId>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionInstanceSettings <ConnectionInstance>k__BackingField;
    [JsonPropertyAttribute]
public string LogicalName { get; public set; }
    [JsonPropertyAttribute]
public string ConnectionId { get; public set; }
    public string ConnectorId { get; public set; }
    [JsonPropertyAttribute]
public ConnectionInstanceSettings ConnectionInstance { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LogicalName();
    [CompilerGeneratedAttribute]
public void set_LogicalName(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionId();
    [CompilerGeneratedAttribute]
public void set_ConnectionId(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectorId();
    [CompilerGeneratedAttribute]
public void set_ConnectorId(string value);
    [CompilerGeneratedAttribute]
public ConnectionInstanceSettings get_ConnectionInstance();
    [CompilerGeneratedAttribute]
public void set_ConnectionInstance(ConnectionInstanceSettings value);
}
public class Microsoft.Crm.Tools.SolutionPackager.DeploymentSettings.DeploymentSettings : object {
    [CompilerGeneratedAttribute]
private IList`1<EnvironmentVariableSettings> <EnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ConnectionReferenceSettings> <ConnectionReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<WorkflowSettings> <Workflows>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<CanvasAppSettings> <CanvasApps>k__BackingField;
    public IList`1<EnvironmentVariableSettings> EnvironmentVariables { get; public set; }
    public IList`1<ConnectionReferenceSettings> ConnectionReferences { get; public set; }
    public IList`1<WorkflowSettings> Workflows { get; public set; }
    public IList`1<CanvasAppSettings> CanvasApps { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<EnvironmentVariableSettings> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
public void set_EnvironmentVariables(IList`1<EnvironmentVariableSettings> value);
    [CompilerGeneratedAttribute]
public IList`1<ConnectionReferenceSettings> get_ConnectionReferences();
    [CompilerGeneratedAttribute]
public void set_ConnectionReferences(IList`1<ConnectionReferenceSettings> value);
    [CompilerGeneratedAttribute]
public IList`1<WorkflowSettings> get_Workflows();
    [CompilerGeneratedAttribute]
public void set_Workflows(IList`1<WorkflowSettings> value);
    [CompilerGeneratedAttribute]
public IList`1<CanvasAppSettings> get_CanvasApps();
    [CompilerGeneratedAttribute]
public void set_CanvasApps(IList`1<CanvasAppSettings> value);
}
public class Microsoft.Crm.Tools.SolutionPackager.DeploymentSettings.EnvironmentVariableSettings : object {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalizableText <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalizableText <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputControlConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LearnMoreUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private LocalizableText <Hint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsRequired>k__BackingField;
    [JsonPropertyAttribute]
public string SchemaName { get; public set; }
    [JsonPropertyAttribute]
public string Value { get; public set; }
    [JsonPropertyAttribute]
public string DefaultValue { get; public set; }
    [JsonPropertyAttribute]
public LocalizableText Name { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<int> TypeId { get; public set; }
    [JsonPropertyAttribute]
public LocalizableText Description { get; public set; }
    [JsonPropertyAttribute]
public string InputControlConfig { get; public set; }
    [JsonPropertyAttribute]
public string LearnMoreUrl { get; public set; }
    [JsonPropertyAttribute]
public LocalizableText Hint { get; public set; }
    [JsonPropertyAttribute]
public Nullable`1<bool> IsRequired { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public LocalizableText get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(LocalizableText value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TypeId();
    [CompilerGeneratedAttribute]
public void set_TypeId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public LocalizableText get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(LocalizableText value);
    [CompilerGeneratedAttribute]
public string get_InputControlConfig();
    [CompilerGeneratedAttribute]
public void set_InputControlConfig(string value);
    [CompilerGeneratedAttribute]
public string get_LearnMoreUrl();
    [CompilerGeneratedAttribute]
public void set_LearnMoreUrl(string value);
    [CompilerGeneratedAttribute]
public LocalizableText get_Hint();
    [CompilerGeneratedAttribute]
public void set_Hint(LocalizableText value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(Nullable`1<bool> value);
}
public enum Microsoft.Crm.Tools.SolutionPackager.DeploymentSettings.RoleName : Enum {
    public int value__;
    public static RoleName CanView;
    public static RoleName CanViewWithShare;
    public static RoleName CanEdit;
}
[ExtensionAttribute]
public static class Microsoft.Crm.Tools.SolutionPackager.DeploymentSettings.SolutionMetadataExtensions : object {
    [ExtensionAttribute]
public static DeploymentSettings ToDeploymentSettings(SolutionMetadata metadata);
}
public class Microsoft.Crm.Tools.SolutionPackager.DeploymentSettings.WorkflowSettings : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <WorkflowId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SystemUserId>k__BackingField;
    public string Name { get; public set; }
    [JsonPropertyAttribute]
public Guid WorkflowId { get; public set; }
    [JsonPropertyAttribute]
public string UserEmail { get; public set; }
    [JsonIgnoreAttribute]
public Guid SystemUserId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Guid get_WorkflowId();
    [CompilerGeneratedAttribute]
public void set_WorkflowId(Guid value);
    [CompilerGeneratedAttribute]
public string get_UserEmail();
    [CompilerGeneratedAttribute]
public void set_UserEmail(string value);
    [CompilerGeneratedAttribute]
public Guid get_SystemUserId();
    [CompilerGeneratedAttribute]
public void set_SystemUserId(Guid value);
}
internal class Microsoft.Crm.Tools.SolutionPackager.DiskReader : object {
    private Context context;
    private bool disposed;
    private static string EnvironmentVariableDefinitionFileName;
    public sealed virtual void Initialize(Context context);
    public sealed virtual void Load();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private void UpdateAssemblyFQN();
}
public class Microsoft.Crm.Tools.SolutionPackager.DiskReaderException : Exception {
    public DiskReaderException(string message);
}
public class Microsoft.Crm.Tools.SolutionPackager.DiskWriter : object {
    private string _rootDirectory;
    private bool _disposed;
    private Context _context;
    public static Collection`1<LocalizableElement> AllLocalizableElements;
    public DiskWriter(Context context);
    private static DiskWriter();
    public sealed virtual void Initialize(Context context);
    public sealed virtual void WriteComponents(IEnumerable`1<string> ignoreComponentList);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public sealed virtual void LocalizeComponents();
    private void LocalizeSolutionComponents(Collection`1<LocalizableElement> allLocalizableElements);
    private void WriteResxFile(Collection`1<LocalizableElement> allLocalizableElements);
}
internal static class Microsoft.Crm.Tools.SolutionPackager.ElementNames : object {
    public static string SolutionPackageVersion;
    public static string SolutionGeneratedByVersion;
    public static string SolutionGeneratedBy;
    public static string ConnectionRoles;
    public static string ConnectionRoleId;
    public static string ComplexControls;
    public static string LinkControlName;
    public static string CustomControls;
    public static string CustomControl;
    public static string FileName;
    public static string Dialogs;
    public static string DialogName;
    public static string Dashboards;
    public static string InteractionCentricDashboards;
    public static string FormId;
    public static string EntityMaps;
    public static string EntitySource;
    public static string EntityTarget;
    public static string Entities;
    public static string Entity;
    public static string Forms;
    public static string Name;
    public static string FormXml;
    public static string SavedQueries;
    public static string SavedQuery;
    public static string SavedQueryId;
    public static string SavedQueryVisualizationId;
    public static string Visualizations;
    public static string RibbonDiffXml;
    public static string Type;
    public static string SystemForm;
    public static string EntityPrivileges;
    public static string EntityPrivilege;
    public static string Privileges;
    public static string Privilege;
    public static string PrivilegeObjectTypeCodes;
    public static string PrivilegeObjectTypeCodesList;
    public static string PrivilegeId;
    public static string ObjectTypePrivilegeId;
    public static string EntityRelationships;
    public static string EntityRelationship;
    public static string EntityRelationshipType;
    public static string FirstEntityName;
    public static string ReferencedEntityName;
    public static string FieldSecurityProfiles;
    public static string OptionSets;
    public static string PluginAssemblies;
    public static string PluginFileName;
    public static string PluginAssemblyId;
    public static string PluginFullName;
    public static string PluginSourceType;
    public static string Reports;
    public static string Report;
    public static string ReportId;
    public static string ReportName;
    public static string ReportExportedFile;
    public static string LanguageCode;
    public static string ReportFileName;
    public static string ReportSignatureIdMappings;
    public static string ReportLinks;
    public static string ReportTypeCode;
    public static string Roles;
    public static string SdkMessages;
    public static string SdkMessageId;
    public static string SdkMessageName;
    public static string SdkMessageProcessingSteps;
    public static string SdkMessageProcessingStepId;
    public static string ServiceEndpoints;
    public static string ServiceEndpointId;
    public static string SiteMap;
    public static string StoredProcedures;
    public static string StoredProcedureFileName;
    public static string StoredProcedureName;
    public static string Templates;
    public static string EmailTemplates;
    public static string MailMergeTemplates;
    public static string KbArticleTemplates;
    public static string ContractTemplates;
    public static string TemplateId;
    public static string KbArticleTemplateId;
    public static string MailMergeTemplateId;
    public static string ContractTemplateId;
    public static string TeamTemplates;
    public static string TeamTemplateId;
    public static string SyncAttributeMappingProfiles;
    public static string SyncAttributeMappingProfileId;
    public static string WebWizardId;
    public static string WebWizards;
    public static string WebWizardName;
    public static string WebResources;
    public static string WebResourceName;
    public static string WebResourceId;
    public static string WebResourceFileName;
    public static string Workflows;
    public static string WorkflowId;
    public static string WorkflowName;
    public static string WorkflowXamlFileName;
    public static string WorkflowImgFileName;
    public static string DialogLanguageCode;
    public static string WorkflowJsonFileName;
    public static string SolutionManifest;
    public static string RootComponents;
    public static string RootComponent;
    public static string RootComponentId;
    public static string RootComponentBehavior;
    public static string MissingDependencies;
    public static string MissingDependency;
    public static string SchemaName;
    public static string SchemaNameId;
    public static string DisplayName;
    public static string ParentSchemaName;
    public static string ParentDisplayName;
    public static string Solution;
    public static string Package;
    public static string EmailSubject;
    public static string EmailBody;
    public static string EmailSubjectPresentation;
    public static string EmailPresentation;
    public static string EmailAttachmentFileName;
    public static string ActivityMimeAttachments;
    public static string ActivityMimeAttachment;
    public static string SolutionAttachmentsFileName;
    public static string KbArticleStructureXml;
    public static string KbArticleFormatXml;
    public static string MailMergeFileSize;
    public static string MailMergeBody;
    public static string MailMergeFileName;
    public static string Formula;
    public static string ChannelAccessProfileRules;
    public static string ChannelAccessProfiles;
    public static string ImportMapName;
    public static string ImportMap;
    public static string AppModules;
    public static string AppModule;
    public static string AppModuleComponents;
    public static string AppModuleComponent;
    public static string AppModuleSiteMaps;
    public static string AppModuleSiteMap;
    public static string UniqueName;
    public static string AppModuleSitemapUniqueName;
    public static string AppConfig;
    public static string NavigationSettings;
    public static string NavigationSetting;
    public static string NavigationSettingId;
    public static string EntityDataSources;
    public static string EntityDataSourceId;
    public static string EntityDataSourceMappings;
    public static string EntityDataSourceMappingId;
    public static string EntityDataProviders;
    public static string EntityDataProviderId;
    public static string MobileOfflineProfiles;
    public static string MobileOfflineProfileId;
    public static string MobileOfflineProfileName;
    public static string ConnectionReferences;
    public static string EnvironmentVariables;
    public static string Connectors;
    public static string Connector;
    public static string GenericComponent;
    public static string CanvasApps;
    public static string OrganizationSettings;
    public static string SolutionComponent;
    public static string ServicePlans;
    public static string ServicePlanAppModules;
    public static string SCF;
}
internal class Microsoft.Crm.Tools.SolutionPackager.EmailTemplateProcessor : SubTemplateProcessorBase {
    protected string TemplateIdElementName { get; }
    protected string SubTemplateRootDirectory { get; }
    public EmailTemplateProcessor(TemplateProcessor templateProcessor);
    protected virtual string get_TemplateIdElementName();
    protected virtual string get_SubTemplateRootDirectory();
    protected virtual void WriteSubTemplateToFiles(XElement element, string subTemplateDirectory);
    protected virtual void ReadSubTemplateFromFiles(XElement element, string subTemplateDirectory);
    private void ReadAttachments(XElement element);
    private void WriteAttachments(XElement element);
    private string GetAttachmentDiskPath(XElement attachment, string zipPath);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.EntityDataProviderProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.EntityDataSourceProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.EntityMapProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.EntityPrivilegeProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
    public virtual void WriteToFiles(ComponentCollection components, IEnumerable`1<string> ignoreComponentList);
    public virtual ComponentCollection ReadFromFiles();
    private XElement ReadPrivilegeDirectory(string privilegeDirectory);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.EntityProcessor : ComponentProcessorBase {
    private static String[] FormulaFilesExtensions;
    private static EntityProcessor();
    public virtual HashSet`1<string> GetNonShardedComponentDirNames();
    protected virtual Component CreateComponent(XElement element);
    public virtual ComponentCollection ReadFromFiles();
    public virtual void WriteToFiles(ComponentCollection components, IEnumerable`1<string> ignoreComponentList);
    private void ExtractFormulas(XElement component, string componentDir);
    private string GetFormulaPath(string componentDir, string fileName);
    protected virtual bool NeedManagedFilename(XElement item);
    private XElement ReadEntityDirectory(string entityDirectory);
    private void ReadFormulaFromFolder(string path);
    private void ReadFormXmlCollectionsFromFolder(string folder, XElement collectionContainer, string collectionNodeName, string collectionAttribute);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.EntityRelationshipProcessor : ComponentProcessorBase {
    private static string RelationshipDirectoryName;
    private static string NameAttributeName;
    private static string RelationshipFileExtension;
    public string CommentFormula;
    public string CommentFormulaM2M;
    protected virtual string GetElementResourceName(ComponentCollection components, LocalizableElementXPath query, XElement element);
    protected virtual Component CreateComponent(XElement element);
    public virtual ComponentCollection ReadFromFiles();
    public virtual void WriteToFiles(ComponentCollection components, IEnumerable`1<string> ignoreComponentList);
    private static IDictionary`2<string, XElement> ReadRelationshipFiles(string mainDirectory);
    private static void WriteRelationshipFiles(string componentsPath, XElement relationshipsElement);
    private static string GetEntityRelationshipFileName(XElement relationshipElement);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.EnvVariablesProcessor : ComponentProcessorBase {
    private static string EnvVarExtension;
    private static string EnvVarValuesFilename;
    private string LocalComponentFileDir { get; }
    private string EnvVarValuesFile { get; }
    private string get_LocalComponentFileDir();
    private string get_EnvVarValuesFile();
    protected virtual Component CreateComponent(XElement element);
    public virtual void WriteToFiles(ComponentCollection components, IEnumerable`1<string> ignoreComponentList);
    public virtual ComponentCollection ReadFromFiles();
    private void WriteValuesFile();
    private void LoadValuesFile();
    private string GetName(XElement element);
    private IEnumerable`1<ComponentFile> FindValueFiles();
}
public class Microsoft.Crm.Tools.SolutionPackager.ErrorReporter : MulticastDelegate {
    public ErrorReporter(object object, IntPtr method);
    public virtual void Invoke(string message);
    public virtual IAsyncResult BeginInvoke(string message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Crm.Tools.SolutionPackager.ExplicitCompositeFileInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <Files>k__BackingField;
    public string Name { get; }
    public HashSet`1<string> Files { get; }
    public ExplicitCompositeFileInfo(string name, IEnumerable`1<string> files);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_Files();
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.FieldSecurityProfileProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
public class Microsoft.Crm.Tools.SolutionPackager.FileBackedComponent : Component {
    private string diskFileName;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SourceType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public Nullable`1<int> SourceType { get; public set; }
    public string FileName { get; public set; }
    public string DiskFileName { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_SourceType();
    [CompilerGeneratedAttribute]
public void set_SourceType(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    public string get_DiskFileName();
    public void set_DiskFileName(string value);
}
internal abstract class Microsoft.Crm.Tools.SolutionPackager.FileMapperBase : MapperBase {
    private static string mapAttrName;
    protected static string toAttrName;
    protected static string SolutionAwareAttributeName;
    protected static string FolderWildcardSymbol;
    protected bool mapFilenameUseWildcard;
    protected bool mapFolderUsingWildcard;
    protected bool toFolderUsingWildcard;
    public FileMapperBase(PackagerArguments arguments, XElement element);
    protected void InitToFolder();
    protected bool MatchFolder(string inputFolder);
    protected bool MatchFile(string inputFile);
    public virtual bool TryMapFile(string inputFile, String& mappedFile, bool checkExistence);
}
internal class Microsoft.Crm.Tools.SolutionPackager.Filer : object {
    private static string CollectionElement;
    private Collection`1<MapperBase> _mappings;
    [CompilerGeneratedAttribute]
private static Filer <Track>k__BackingField;
    internal static Filer Track { get; private set; }
    internal IReadOnlyCollection`1<MapperBase> Mappings { get; }
    public Filer(PackagerArguments arguments);
    public static void Initialize(PackagerArguments arguments);
    [CompilerGeneratedAttribute]
internal static Filer get_Track();
    [CompilerGeneratedAttribute]
private static void set_Track(Filer value);
    internal IReadOnlyCollection`1<MapperBase> get_Mappings();
    public bool DoesFilenameMap(string filepath, bool checkExistance);
    public string MapFilename(string filepath, bool checkExistance);
    public IList`1<MappedFile> GetMappedFiles(HashSet`1<string> legacyComponentDirectories, bool checkExistence);
}
internal class Microsoft.Crm.Tools.SolutionPackager.FileToFileMapper : FileMapperBase {
    public static string ElementName;
    private string _toFilepath;
    public FileToFileMapper(PackagerArguments args, XElement element);
    public virtual void GetMappedFiles(IList`1<MappedFile> files, HashSet`1<string> legacyComponentDirectories, bool checkExistence);
}
internal class Microsoft.Crm.Tools.SolutionPackager.FileToPathMapper : FileMapperBase {
    public static string ElementName;
    private bool _solutionAware;
    public FileToPathMapper(PackagerArguments args, XElement element);
    public virtual void GetMappedFiles(IList`1<MappedFile> files, HashSet`1<string> legacyComponentDirectories, bool checkExistance);
}
internal class Microsoft.Crm.Tools.SolutionPackager.GenericComponentProcessor : ComponentProcessorBase {
    private static string MetaExtension;
    private string _compositeFilesFolder;
    protected string _extension;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ExplicitCompositeFileInfo> <ExplicitCompositeFiles>k__BackingField;
    private static HashSet`1<string> ignoreComponentsSet;
    protected string CompositeFilesFolder { get; }
    protected string Extension { get; }
    protected IDictionary`2<string, ExplicitCompositeFileInfo> ExplicitCompositeFiles { get; }
    private string LocalComponentFileDir { get; }
    public GenericComponentProcessor(string componentsName, ComponentType componentType, string compositeFilesFolder);
    private static GenericComponentProcessor();
    protected string get_CompositeFilesFolder();
    protected string get_Extension();
    [CompilerGeneratedAttribute]
protected IDictionary`2<string, ExplicitCompositeFileInfo> get_ExplicitCompositeFiles();
    private string get_LocalComponentFileDir();
    public virtual HashSet`1<string> GetNonShardedComponentDirNames();
    protected virtual Component CreateComponent(XElement element);
    public virtual void WriteToFiles(ComponentCollection components, IEnumerable`1<string> ignoreComponentList);
    public virtual ComponentCollection ReadFromFiles();
    protected virtual void LoadComponentFiles(ComponentCollection components);
    private IEnumerable`1<ComponentFile> FindAssociatedComponentFiles(string componentName);
    protected virtual void DiscoverExplicitComposites(ComponentCollection components, IEnumerable`1<string> compositeFiles);
    private IEnumerable`1<string> MatchCompositeFiles(Component component, IEnumerable`1<string> compositeFiles);
    private string BuildComponentPath(Component component);
    public static string TryExtractName(XElement element);
    private static string RelativePathBelowRoot(string rootedPath);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IGenericProcessorFactory")]
internal class Microsoft.Crm.Tools.SolutionPackager.GenericProcessorFactory : object {
    private Dictionary`2<string, IComponentProcessor> namedProcessorMap;
    private Context context;
    private Lazy`1<HashSet`1<string>> knownComponents;
    public IComponentProcessor GetProcessor(XElement element, bool haveName);
    public IComponentProcessor GetProcessor(string elementName);
    public void Initialize(Context context);
    private IComponentProcessor EnsureProcessor(string elementName);
    private HashSet`1<string> CreateKnownComponentSet();
}
internal static class Microsoft.Crm.Tools.SolutionPackager.Helper : object {
    private static Regex IsValidFileNameRegex;
    private static IDictionary`2<string, object> _iolocks;
    private static object _iolockslock;
    private static Version MinimumVersionForUseUnmanagedFileForManaged;
    private static bool denyWrite;
    private static bool clobber;
    private static List`1<string> writtenFiles;
    private static List`1<string> readOnlyFiles;
    public static List`1<string> WrittenFiles { get; }
    public static List`1<string> ReadOnlyFiles { get; }
    private static Helper();
    public static string GetElementValue(XElement element, string childName, bool throwIfNull, string default);
    public static T GetElementValue(XElement element, string childName, bool throwIfNull, Func`2<string, T> converter, T default);
    public static bool TryGetElement(XElement element, string childName, XElement& child);
    public static void SetElementValue(XElement element, string childName, string value, bool appendIfNull);
    public static string GetAttributeValue(XElement element, string attributeName, bool throwIfNull, string default);
    public static T GetAttributeValue(XElement element, string childName, bool throwIfNull, Func`2<string, T> converter, T default);
    public static string GetJsonValue(JObject element, string childName, bool throwIfNull, string default);
    public static JToken FindToken(JToken containerToken, string name);
    public static Guid GuidConverter(string value);
    public static int IntConverter(string value);
    public static bool BooleanConverter(string value);
    public static void LoadSolutionInformation(Stream solutionXml, Context context);
    private static void ExtractDependantInfo(XElement subCompoent, Dependant dep);
    private static RequiredMissingDependency ExtractRequredDependancy(XElement subCompoent);
    private static void ParseSolutionNameAndVersionString(string requiredSolutionInfo, String& solutionName, String& solutionVersion);
    public static void LoadComponentInformation(Context context);
    private static void AssertRequiredElement(string requiredValue, string xpathHint);
    public static void EnsurePathDirectory(string path);
    public static bool IsUnmodifiedComponent(XElement componentElement);
    public static string RemoveLeadingSlash(string path);
    internal static string AppendManagedFileName(string name);
    public static string CreateValidFileName(string primaryName);
    public static void SetSafety(bool denyWrite, bool clobber);
    public static bool WriteToFile(string filename, Byte[] bytes);
    public static bool WriteToFile(string filename, XElement element);
    public static bool WriteToFile(string filename, XDocument document);
    public static bool WriteToFile(string filename, string content, Encoding encoding);
    public static bool DeleteFile(string filename);
    private static void CleanFolder(string folder);
    private static void AddWrittenFile(string filename);
    public static List`1<string> get_WrittenFiles();
    private static bool VerifyReadOnly(string filename, string verb);
    private static void AddReadOnlyFile(string filename);
    public static List`1<string> get_ReadOnlyFiles();
    public static string Serialize(object objToSerialize);
    public static T Deserialize(string fileName);
    private static object GetIoLock(string filename);
}
public interface Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor {
    public string SupportedElementName { get; }
    public ComponentType SupportedComponentType { get; }
    public bool IsDifferentInManaged { get; }
    public string ParentTagForNestedMultiLcids { get; public set; }
    public string ChildTagForNestedMultiLcids { get; public set; }
    public abstract virtual string get_SupportedElementName();
    public abstract virtual ComponentType get_SupportedComponentType();
    public abstract virtual void Initialize(Context context);
    public abstract virtual ComponentCollection CreateComponents(XElement element);
    public abstract virtual ComponentCollection CreateComponents(JObject element);
    public abstract virtual ComponentCollection ReadFromFiles();
    public abstract virtual void WriteToFiles(ComponentCollection components, IEnumerable`1<string> ignoreComponentList);
    public abstract virtual bool get_IsDifferentInManaged();
    public abstract virtual Collection`1<LocalizableElement> GetLocalizableElements(ComponentCollection components);
    public abstract virtual string get_ParentTagForNestedMultiLcids();
    public abstract virtual void set_ParentTagForNestedMultiLcids(string value);
    public abstract virtual string get_ChildTagForNestedMultiLcids();
    public abstract virtual void set_ChildTagForNestedMultiLcids(string value);
    public abstract virtual HashSet`1<string> GetNonShardedComponentDirNames();
}
public interface Microsoft.Crm.Tools.SolutionPackager.IGenericProcessorFactory {
    public abstract virtual IComponentProcessor GetProcessor(string elementName);
    public abstract virtual void Initialize(Context context);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.InteractionCentricDashboardProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
public interface Microsoft.Crm.Tools.SolutionPackager.IPackagePlugin {
    public abstract virtual void BeforeRead(PluginContext pluginContext);
    public abstract virtual void AfterRead(PluginContext pluginContext);
    public abstract virtual void BeforeWrite(PluginContext pluginContext);
    public abstract virtual void AfterWrite(PluginContext pluginContext);
}
public interface Microsoft.Crm.Tools.SolutionPackager.IPackageReader {
    public abstract virtual void Initialize(Context context);
    public abstract virtual void Load();
}
public interface Microsoft.Crm.Tools.SolutionPackager.IPackageWriter {
    public abstract virtual void Initialize(Context context);
    public abstract virtual void WriteComponents(IEnumerable`1<string> ignoreComponentList);
    public abstract virtual void LocalizeComponents();
}
internal interface Microsoft.Crm.Tools.SolutionPackager.ISubComponentProcessor {
    public abstract virtual void ReadFromFiles(XElement componentElement, string componentPath);
    public abstract virtual void WriteToFiles(XElement componentElement, string componentPath);
}
internal class Microsoft.Crm.Tools.SolutionPackager.KbArticleTemplateProcessor : SubTemplateProcessorBase {
    protected string TemplateIdElementName { get; }
    protected string SubTemplateRootDirectory { get; }
    public KbArticleTemplateProcessor(TemplateProcessor templateProcessor);
    protected virtual string get_TemplateIdElementName();
    protected virtual string get_SubTemplateRootDirectory();
    protected virtual void WriteSubTemplateToFiles(XElement element, string subTemplateDirectory);
    protected virtual void ReadSubTemplateFromFiles(XElement element, string subTemplateDirectory);
}
public class Microsoft.Crm.Tools.SolutionPackager.KnownTypesBinder : SerializationBinder {
    [CompilerGeneratedAttribute]
private IList`1<Type> <KnownTypes>k__BackingField;
    public IList`1<Type> KnownTypes { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<Type> get_KnownTypes();
    [CompilerGeneratedAttribute]
public void set_KnownTypes(IList`1<Type> value);
    public virtual Type BindToType(string assemblyName, string typeName);
}
public class Microsoft.Crm.Tools.SolutionPackager.Label : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LanguageCode>k__BackingField;
    public string Value { get; public set; }
    public int LanguageCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public int get_LanguageCode();
    [CompilerGeneratedAttribute]
public void set_LanguageCode(int value);
}
public class Microsoft.Crm.Tools.SolutionPackager.LabelDictionary : Dictionary`2<int, Label> {
}
public enum Microsoft.Crm.Tools.SolutionPackager.LabelTypeCode : Enum {
    public int value__;
    public static LabelTypeCode Unknown;
    public static LabelTypeCode Entity;
    public static LabelTypeCode EntityRelationship;
}
public class Microsoft.Crm.Tools.SolutionPackager.LocalFileProcessInfo : object {
    [CompilerGeneratedAttribute]
private ComponentType <ComponentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComponentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalFileName>k__BackingField;
    public ComponentType ComponentType { get; public set; }
    public string ComponentName { get; public set; }
    public string LocalFileName { get; public set; }
    [CompilerGeneratedAttribute]
public ComponentType get_ComponentType();
    [CompilerGeneratedAttribute]
public void set_ComponentType(ComponentType value);
    [CompilerGeneratedAttribute]
public string get_ComponentName();
    [CompilerGeneratedAttribute]
public void set_ComponentName(string value);
    [CompilerGeneratedAttribute]
public string get_LocalFileName();
    [CompilerGeneratedAttribute]
public void set_LocalFileName(string value);
}
[DebuggerDisplayAttribute("{Name} {Element}")]
public class Microsoft.Crm.Tools.SolutionPackager.LocalizableElement : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private XElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocaleIdAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public string Name { get; private set; }
    public XElement Element { get; private set; }
    public string SourceAttribute { get; private set; }
    public string LocaleIdAttribute { get; private set; }
    public string Comment { get; private set; }
    public string Resource { get; public set; }
    public LocalizableElement(string name, XElement element, string sourceAttributeName, string lcidAttributeName, string comment);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public XElement get_Element();
    [CompilerGeneratedAttribute]
private void set_Element(XElement value);
    [CompilerGeneratedAttribute]
public string get_SourceAttribute();
    [CompilerGeneratedAttribute]
private void set_SourceAttribute(string value);
    [CompilerGeneratedAttribute]
public string get_LocaleIdAttribute();
    [CompilerGeneratedAttribute]
private void set_LocaleIdAttribute(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(string value);
    public string get_Resource();
    public void set_Resource(string value);
    public static int Compare(LocalizableElement left, LocalizableElement right);
}
public class Microsoft.Crm.Tools.SolutionPackager.LocalizableElementComparer : object {
    public sealed virtual bool Equals(LocalizableElement x, LocalizableElement y);
    public sealed virtual int GetHashCode(LocalizableElement obj);
}
public class Microsoft.Crm.Tools.SolutionPackager.LocalizableElementXPath : object {
    [CompilerGeneratedAttribute]
private string <XPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LcidAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueNameFormula>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommentFormula>k__BackingField;
    public string XPath { get; internal set; }
    public string ValueAttribute { get; private set; }
    public string LcidAttribute { get; private set; }
    public string UniqueNameFormula { get; private set; }
    public string CommentFormula { get; private set; }
    public LocalizableElementXPath(string query, string valueAttribute, string lcidAttribute, string uniqueNameFormula, string commentFormula);
    [CompilerGeneratedAttribute]
public string get_XPath();
    [CompilerGeneratedAttribute]
internal void set_XPath(string value);
    [CompilerGeneratedAttribute]
public string get_ValueAttribute();
    [CompilerGeneratedAttribute]
private void set_ValueAttribute(string value);
    [CompilerGeneratedAttribute]
public string get_LcidAttribute();
    [CompilerGeneratedAttribute]
private void set_LcidAttribute(string value);
    [CompilerGeneratedAttribute]
public string get_UniqueNameFormula();
    [CompilerGeneratedAttribute]
private void set_UniqueNameFormula(string value);
    [CompilerGeneratedAttribute]
public string get_CommentFormula();
    [CompilerGeneratedAttribute]
private void set_CommentFormula(string value);
    public void UpdateCommentFormula(string commentFormula);
}
public class Microsoft.Crm.Tools.SolutionPackager.LocalizationNameKeyEntry : object {
    [CompilerGeneratedAttribute]
private string <OriginalKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplacementKey>k__BackingField;
    public string OriginalKey { get; public set; }
    public string ReplacementKey { get; public set; }
    public LocalizationNameKeyEntry(string originalKey, string replacementKey);
    [CompilerGeneratedAttribute]
public string get_OriginalKey();
    [CompilerGeneratedAttribute]
public void set_OriginalKey(string value);
    [CompilerGeneratedAttribute]
public string get_ReplacementKey();
    [CompilerGeneratedAttribute]
public void set_ReplacementKey(string value);
}
public class Microsoft.Crm.Tools.SolutionPackager.LocalizationNameKeyMap : object {
    public List`1<LocalizationNameKeyEntry> KeyMapItems;
    public int ItemCount { get; }
    public int get_ItemCount();
    public string GetKeyToItemMap(string replacementKey);
    public string AddItemToKeyMap(string originalKey);
}
internal static class Microsoft.Crm.Tools.SolutionPackager.LongFilePathSupport : object {
    public static bool IsLongPath(string filename);
}
internal class Microsoft.Crm.Tools.SolutionPackager.MailMergeTemplateProcessor : SubTemplateProcessorBase {
    protected string TemplateIdElementName { get; }
    protected string SubTemplateRootDirectory { get; }
    public MailMergeTemplateProcessor(TemplateProcessor templateProcessor);
    protected virtual string get_TemplateIdElementName();
    protected virtual string get_SubTemplateRootDirectory();
    protected virtual void WriteSubTemplateToFiles(XElement element, string subTemplateDirectory);
    protected virtual void ReadSubTemplateFromFiles(XElement element, string subTemplateDirectory);
}
public class Microsoft.Crm.Tools.SolutionPackager.MappedFile : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MappedPath>k__BackingField;
    public string Path { get; public set; }
    public string MappedPath { get; public set; }
    public MappedFile(string path, string mappedPath);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_MappedPath();
    [CompilerGeneratedAttribute]
public void set_MappedPath(string value);
}
internal abstract class Microsoft.Crm.Tools.SolutionPackager.MapperBase : object {
    protected string _rootFolder;
    protected string _mapValue;
    protected string _mapFolder;
    protected string _mapFilename;
    protected string _toFolder;
    protected string _toFilename;
    public MapperBase(PackagerArguments args);
    protected void WarnIfFolderMissing(string folder);
    protected void ValidateFolderName(string folder);
    protected void ValidateFilename(string filename);
    protected string RemoveTrailingFolderSeperator(string folder);
    public string GetRootFolder(string path);
    public abstract virtual bool TryMapFile(string inputFile, String& mappedFile, bool checkExistance);
    public abstract virtual void GetMappedFiles(IList`1<MappedFile> files, HashSet`1<string> legacyComponentDirectories, bool checkExistance);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.MobileOfflineProfileProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.OptionSetProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
    public virtual Collection`1<LocalizableElement> GetLocalizableElements(ComponentCollection components);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.OrganizationSettingsProcessor : GenericComponentProcessor {
    public virtual HashSet`1<string> GetNonShardedComponentDirNames();
    protected virtual Component CreateComponent(XElement element);
}
public class Microsoft.Crm.Tools.SolutionPackager.PackagerArguments : object {
    [ArgumentAttribute("9")]
public CommandAction Action;
    [ArgumentAttribute("9")]
public string PathToZipFile;
    [ArgumentAttribute("8")]
public SolutionPackageType PackageType;
    [ArgumentAttribute("8")]
public string Folder;
    [ArgumentAttribute("8")]
public string LogFile;
    [ArgumentAttribute("8")]
public TraceLevel ErrorLevel;
    [ArgumentAttribute("24")]
public string SingleComponent;
    [ArgumentAttribute("8")]
public AllowDelete AllowDeletes;
    [ArgumentAttribute("8")]
public AllowWrite AllowWrites;
    [ArgumentAttribute("32")]
public bool Clobber;
    [ArgumentAttribute("8")]
public string MappingFile;
    [ArgumentAttribute("32")]
public bool NoLogo;
    [ArgumentAttribute("64")]
public string LocaleTemplate;
    [ArgumentAttribute("32")]
public bool Localize;
    [ArgumentAttribute("48")]
public bool UseLcid;
    [ArgumentAttribute("48")]
public bool RepackOnPackForTesting;
    [ArgumentAttribute("32")]
public bool UseUnmanagedFileForManaged;
    [ArgumentAttribute("32")]
public bool DisableTelemetry;
    [ArgumentAttribute("32")]
public bool RemapPluginTypeNames;
    [CompilerGeneratedAttribute]
private Stream <SolutionZipStream>k__BackingField;
    internal Stream SolutionZipStream { get; internal set; }
    [CompilerGeneratedAttribute]
internal Stream get_SolutionZipStream();
    [CompilerGeneratedAttribute]
internal void set_SolutionZipStream(Stream value);
    public virtual string ToString();
}
public class Microsoft.Crm.Tools.SolutionPackager.Parser : object {
    public static string NewLine;
    private static int spaceBeforeParam;
    private ArrayList arguments;
    private Hashtable argumentMap;
    private Argument defaultArgument;
    private ErrorReporter reporter;
    public bool HasDefaultArgument { get; }
    public Parser(Type argumentSpecification, ErrorReporter reporter);
    public static bool ParseArgumentsWithUsage(String[] arguments, object destination);
    public static bool ParseArguments(String[] arguments, object destination);
    public static bool ParseArguments(String[] arguments, object destination, ErrorReporter reporter);
    private static void NullErrorReporter(string message);
    private static String[] CleanAndSplitArgs(String[] cmdArgs);
    private static void AddArguments(List`1<string> result, StringBuilder sb, bool isUnPairQuote);
    public static bool ParseHelp(String[] args);
    public static string ArgumentsUsage(Type argumentType);
    public static string ArgumentsUsage(Type argumentType, int columns);
    public static int IndexOf(StringBuilder text, char value, int startIndex);
    public static int LastIndexOf(StringBuilder text, char value, int startIndex);
    private static ArgumentAttribute GetAttribute(FieldInfo field);
    private void ReportUnrecognizedArgument(string argument);
    private bool ParseArgumentList(String[] args, object destination);
    public bool Parse(String[] args, object destination);
    public string GetUsageString(int screenWidth);
    private static void AddNewLine(string newLine, StringBuilder builder, Int32& currentColumn);
    private ArgumentHelpStrings[] GetAllHelpStrings();
    private static ArgumentHelpStrings GetHelpStrings(Argument arg);
    private int NumberOfParametersToDisplay();
    public bool get_HasDefaultArgument();
    private bool LexFileArguments(string fileName, String[]& arguments);
    private static string LongName(ArgumentAttribute attribute, FieldInfo field);
    private static string ShortName(ArgumentAttribute attribute, FieldInfo field);
    private static string HelpText(ArgumentAttribute attribute, FieldInfo field);
    private static bool HasHelpText(ArgumentAttribute attribute);
    private static bool ExplicitShortName(ArgumentAttribute attribute);
    private static object DefaultValue(ArgumentAttribute attribute, FieldInfo field);
    private static Type ElementType(FieldInfo field);
    private static ArgumentType Flags(ArgumentAttribute attribute, FieldInfo field);
    private static bool IsCollectionType(Type type);
    private static bool IsValidElementType(Type type);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.PluginAssemblyProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
    protected virtual void WriteComponentFile(FileBackedComponent fileBackedComponent, IEnumerable`1<string> ignoreComponentList);
    public virtual ComponentCollection ReadFromFiles();
}
public class Microsoft.Crm.Tools.SolutionPackager.PluginConfigurationCollection : ConfigurationElementCollection {
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class Microsoft.Crm.Tools.SolutionPackager.PluginConfigurationElement : ConfigurationElement {
    private IPackagePlugin pluginInstance;
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string PluginType { get; public set; }
    public IPackagePlugin PluginInstance { get; }
    public PluginConfigurationElement(string name, string type);
    public string get_Name();
    public void set_Name(string value);
    public string get_PluginType();
    public void set_PluginType(string value);
    public IPackagePlugin get_PluginInstance();
}
public class Microsoft.Crm.Tools.SolutionPackager.PluginContext : object {
    [CompilerGeneratedAttribute]
private Context <Context>k__BackingField;
    public Context Context { get; private set; }
    internal PluginContext(Context context);
    [CompilerGeneratedAttribute]
public Context get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(Context value);
}
public class Microsoft.Crm.Tools.SolutionPackager.PluginExecutionException : Exception {
    [CompilerGeneratedAttribute]
private string <PluginName>k__BackingField;
    public string PluginName { get; public set; }
    public PluginExecutionException(string message);
    public PluginExecutionException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_PluginName();
    [CompilerGeneratedAttribute]
public void set_PluginName(string value);
}
internal class Microsoft.Crm.Tools.SolutionPackager.Plugins.LocalFilesPostProcessing : object {
    public sealed virtual void AfterRead(PluginContext pluginContext);
    public sealed virtual void AfterWrite(PluginContext pluginContext);
    public sealed virtual void BeforeRead(PluginContext pluginContext);
    public sealed virtual void BeforeWrite(PluginContext pluginContext);
    private void InvokePostProcessors(Context context);
}
internal class Microsoft.Crm.Tools.SolutionPackager.Plugins.RootComponentsValidation : object {
    private static string SiteMapId;
    private static ComponentType[] RootComponentTypes;
    private static HashSet`1<string> NotValidatableComponents;
    private static RootComponentsValidation();
    public sealed virtual void BeforeRead(PluginContext pluginContext);
    public sealed virtual void AfterRead(PluginContext pluginContext);
    public sealed virtual void BeforeWrite(PluginContext pluginContext);
    private bool CheckForSpecialWorkflowTypes(PluginContext pluginContext, List`1<ComponentInfo> redundantComponents, bool OkToPass);
    private bool CheckForTemplateTypes(List`1<ComponentInfo> redundantComponents);
    public sealed virtual void AfterWrite(PluginContext pluginContext);
    private static bool CheckAndRemoveFromRootComponents(IDictionary`2<string, ComponentInfo> rootComponents, ComponentInfo componentInfo);
    private static bool IsTemplateComponent(ComponentInfo componentInfo);
    private static bool IsSystemFormOrDashBoard(ComponentInfo componentInfo, ComponentInfo rootComponentInfo);
    private static List`1<ComponentInfo> CheckAndRemoveTemplateFromRootComponents(IDictionary`2<string, ComponentInfo> rootComponents, XElement element, string idElementName, ComponentType componentType, List`1<ComponentInfo> redundantComponents);
    private static IDictionary`2<string, ComponentInfo> GetRootComponents(SolutionInformation solution);
    private static string PrintComponentInfos(IEnumerable`1<ComponentInfo> componentInfos, int indention);
}
public class Microsoft.Crm.Tools.SolutionPackager.PostProcessorCallback : MulticastDelegate {
    public PostProcessorCallback(object object, IntPtr method);
    public virtual void Invoke(ComponentType component, CommandAction cmdAction, string componentName, string localFilename);
    public virtual IAsyncResult BeginInvoke(ComponentType component, CommandAction cmdAction, string componentName, string localFilename, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Microsoft.Crm.Tools.SolutionPackager.Properties.Resources : object {
    internal static string CustomizationsNotInRootComponents { get; }
    internal static string DuplicatedRelationshipName { get; }
    internal static string DuplicatedTemplates { get; }
    internal static string FailedToCreatePluginInstance { get; }
    internal static string InvalidComponentType { get; }
    internal static string DuplicateRootComponent { get; }
    internal static string MissingRequiredFile { get; }
    internal static string RootComponentsNotInCustomizations { get; }
    internal static string RootComponentValidationFailed { get; }
    internal static string UnknownRelationType { get; }
    internal static string UnknownTemplate { get; }
    internal static string UnsafeResxResource { get; }
    internal static string CannotFindCustomControlResFileOnDisk { get; }
    internal static string CannotFindCustomControlResFileInSolution { get; }
    internal static string get_CustomizationsNotInRootComponents();
    internal static string get_DuplicatedRelationshipName();
    internal static string get_DuplicatedTemplates();
    internal static string get_FailedToCreatePluginInstance();
    internal static string get_InvalidComponentType();
    internal static string get_DuplicateRootComponent();
    internal static string get_MissingRequiredFile();
    internal static string get_RootComponentsNotInCustomizations();
    internal static string get_RootComponentValidationFailed();
    internal static string get_UnknownRelationType();
    internal static string get_UnknownTemplate();
    internal static string get_UnsafeResxResource();
    internal static string get_CannotFindCustomControlResFileOnDisk();
    internal static string get_CannotFindCustomControlResFileInSolution();
}
public class Microsoft.Crm.Tools.SolutionPackager.PublisherInformation : object {
    [CompilerGeneratedAttribute]
private string <UniqueName>k__BackingField;
    [CompilerGeneratedAttribute]
private LabelDictionary <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private LabelDictionary <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OptionValuePrefix>k__BackingField;
    public string UniqueName { get; public set; }
    public LabelDictionary DisplayName { get; public set; }
    public LabelDictionary Description { get; public set; }
    public string Prefix { get; public set; }
    public string OptionValuePrefix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UniqueName();
    [CompilerGeneratedAttribute]
public void set_UniqueName(string value);
    [CompilerGeneratedAttribute]
public LabelDictionary get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(LabelDictionary value);
    [CompilerGeneratedAttribute]
public LabelDictionary get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(LabelDictionary value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_OptionValuePrefix();
    [CompilerGeneratedAttribute]
public void set_OptionValuePrefix(string value);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ReportProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
    protected virtual IEnumerable`1<XElement> GetComponentElements(XElement componentCollectionElement);
    private string GetReportExtraFilename(string elementName);
    public virtual void WriteToFiles(ComponentCollection components, IEnumerable`1<string> ignoreComponentList);
    public virtual ComponentCollection ReadFromFiles();
    protected virtual void LoadComponentFiles(ComponentCollection components);
}
public class Microsoft.Crm.Tools.SolutionPackager.RequiredMissingDependency : object {
    [CompilerGeneratedAttribute]
private int <ComponentTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private ComponentType <ComponentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentSchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceSolutionName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <ReferenceSolutionVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RequiredPackage> <Packages>k__BackingField;
    public int ComponentTypeId { get; public set; }
    [JsonIgnoreAttribute]
public ComponentType ComponentType { get; public set; }
    public Nullable`1<Guid> Id { get; public set; }
    public string SchemaName { get; public set; }
    public string DisplayName { get; public set; }
    public string ParentSchemaName { get; public set; }
    public string ParentDisplayName { get; public set; }
    public string ReferenceSolutionName { get; public set; }
    public Version ReferenceSolutionVersion { get; public set; }
    public IList`1<RequiredPackage> Packages { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ComponentTypeId();
    [CompilerGeneratedAttribute]
public void set_ComponentTypeId(int value);
    [CompilerGeneratedAttribute]
public ComponentType get_ComponentType();
    [CompilerGeneratedAttribute]
public void set_ComponentType(ComponentType value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ParentSchemaName();
    [CompilerGeneratedAttribute]
public void set_ParentSchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_ParentDisplayName();
    [CompilerGeneratedAttribute]
public void set_ParentDisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_ReferenceSolutionName();
    [CompilerGeneratedAttribute]
public void set_ReferenceSolutionName(string value);
    [CompilerGeneratedAttribute]
public Version get_ReferenceSolutionVersion();
    [CompilerGeneratedAttribute]
public void set_ReferenceSolutionVersion(Version value);
    [CompilerGeneratedAttribute]
public IList`1<RequiredPackage> get_Packages();
    [CompilerGeneratedAttribute]
public void set_Packages(IList`1<RequiredPackage> value);
}
public class Microsoft.Crm.Tools.SolutionPackager.RequiredPackage : object {
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <PackageVersion>k__BackingField;
    public string PackageName { get; public set; }
    public Version PackageVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public Version get_PackageVersion();
    [CompilerGeneratedAttribute]
public void set_PackageVersion(Version value);
}
public class Microsoft.Crm.Tools.SolutionPackager.ResourceDataNodeValidator : object {
    private XmlNodeList dataNodes;
    private HashSet`1<string> _allowedTypes;
    public ResourceDataNodeValidator(string resxFile);
    public IEnumerable`1<string> Validate();
}
public class Microsoft.Crm.Tools.SolutionPackager.ResxSerializer : object {
    private XmlDocument resourceDocument;
    private string resxFilePath;
    public ResxSerializer(string resxPath);
    public XmlNodeList GetAllDataNodes();
    public bool IsSupportedVersion();
    private string GetNodeValue(List`1<string> nodeNames);
    private bool IsResourceFileOnSupportedVersion(string resourceName, Version resourceVersionId);
}
public class Microsoft.Crm.Tools.SolutionPackager.ResXWriter : XmlTextWriter {
    private static string NameStr;
    private static string DataStr;
    private static string MetadataStr;
    private static string MimeTypeStr;
    private static string ValueStr;
    private static string ResHeaderStr;
    private static string VersionStr;
    private static string ResMimeTypeStr;
    private static string ReaderStr;
    private static string WriterStr;
    private static string CommentStr;
    private static string BinSerializedObjectMimeType;
    private static string ResMimeType;
    private static string Version;
    private static string ReaderValue;
    private static string WriterValue;
    private static string ResourceSchema;
    public ResXWriter(TextWriter textWriter);
    public void InitializeWriter();
    public void AddMetadata(string name, string value);
    public void AddMetadata(string name, object value);
    public void AddResxDataNode(string name, string sourceString, string comment);
    public void AddResHeader(string attributeName, string value);
    public virtual void Close();
    private string ObjectToString(object obj);
    private void CreateResHeaders();
    private Dictionary`2<string, string> CreateResHeadersDictionary();
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.RibbonCustomizationProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.RoleProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
public class Microsoft.Crm.Tools.SolutionPackager.RootComponentInformation : object {
    [CompilerGeneratedAttribute]
private Nullable`1<ComponentType> <ComponentType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ComponentTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComponentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BehaviorCode>k__BackingField;
    [JsonIgnoreAttribute]
public Nullable`1<ComponentType> ComponentType { get; public set; }
    public int ComponentTypeId { get; public set; }
    public string ComponentId { get; public set; }
    public string SchemaName { get; public set; }
    public int BehaviorCode { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<ComponentType> get_ComponentType();
    [CompilerGeneratedAttribute]
public void set_ComponentType(Nullable`1<ComponentType> value);
    [CompilerGeneratedAttribute]
public int get_ComponentTypeId();
    [CompilerGeneratedAttribute]
public void set_ComponentTypeId(int value);
    [CompilerGeneratedAttribute]
public string get_ComponentId();
    [CompilerGeneratedAttribute]
public void set_ComponentId(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public int get_BehaviorCode();
    [CompilerGeneratedAttribute]
public void set_BehaviorCode(int value);
}
internal class Microsoft.Crm.Tools.SolutionPackager.ScfBackedComponet : Component {
    [CompilerGeneratedAttribute]
private string <ComponentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string ComponentName { get; public set; }
    public string SchemaName { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ComponentName();
    [CompilerGeneratedAttribute]
public void set_ComponentName(string value);
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.SdkMessageProcessingStepProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.SdkMessageProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.ServiceEndPointProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
public class Microsoft.Crm.Tools.SolutionPackager.ShardedComponents : object {
    private HashSet`1<string> _legacyComponentDirNames;
    private string _rootFolder;
    public ShardedComponents(string rootFolderPath);
    public void AppendLegacyComponentDirectoryName(HashSet`1<string> directoryName);
    public void WriteShardedComponents(ReadOnlyDictionary`2<string, ComponentFile> componentFiles, IEnumerable`1<string> ignoreComponentList);
    public List`1<ComponentFile> GetShardedComponentFiles();
    private void AddComponentFilesFromRoot(List`1<ComponentFile> shardedCompFiles, IEnumerable`1<string> files);
    private void AddComponentFilesFromMap(List`1<ComponentFile> shardedCompFiles);
    private static string EnsureRelativeDiskPath(string fileName);
    private static List`1<string> GetTopLevelDirectoryNames(string rootFolder);
    [CompilerGeneratedAttribute]
private bool <GetShardedComponentFiles>b__5_0(string f);
    [CompilerGeneratedAttribute]
private string <GetShardedComponentFiles>b__5_1(string dir);
    [CompilerGeneratedAttribute]
private string <GetShardedComponentFiles>b__5_3(string f);
    [CompilerGeneratedAttribute]
private bool <GetShardedComponentFiles>b__5_4(string f);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.SiteMapProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
    protected virtual bool NeedManagedFilename(XElement item);
}
public class Microsoft.Crm.Tools.SolutionPackager.SolutionInformation : object {
    [CompilerGeneratedAttribute]
private bool <IsManaged>k__BackingField;
    [CompilerGeneratedAttribute]
private SolutionPackageType <PackageType>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <SolutionPackageVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <SolutionOriginatedFromVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SolutionOriginatedDeploymentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueName>k__BackingField;
    [CompilerGeneratedAttribute]
private LabelDictionary <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private LabelDictionary <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private PublisherInformation <Publisher>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<RootComponentInformation> <RootComponents>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Dependant> <RequiredDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private XDocument <SolutionXDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseLocale>k__BackingField;
    public bool IsManaged { get; internal set; }
    public SolutionPackageType PackageType { get; internal set; }
    public Version Version { get; internal set; }
    public Version SolutionPackageVersion { get; internal set; }
    public Version SolutionOriginatedFromVersion { get; internal set; }
    public string SolutionOriginatedDeploymentType { get; internal set; }
    public string UniqueName { get; internal set; }
    public LabelDictionary DisplayName { get; internal set; }
    public LabelDictionary Description { get; internal set; }
    public PublisherInformation Publisher { get; internal set; }
    public IList`1<RootComponentInformation> RootComponents { get; public set; }
    public IList`1<Dependant> RequiredDependencies { get; public set; }
    public XDocument SolutionXDocument { get; internal set; }
    public string BaseLocale { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_IsManaged();
    [CompilerGeneratedAttribute]
internal void set_IsManaged(bool value);
    [CompilerGeneratedAttribute]
public SolutionPackageType get_PackageType();
    [CompilerGeneratedAttribute]
internal void set_PackageType(SolutionPackageType value);
    [CompilerGeneratedAttribute]
public Version get_Version();
    [CompilerGeneratedAttribute]
internal void set_Version(Version value);
    [CompilerGeneratedAttribute]
public Version get_SolutionPackageVersion();
    [CompilerGeneratedAttribute]
internal void set_SolutionPackageVersion(Version value);
    [CompilerGeneratedAttribute]
public Version get_SolutionOriginatedFromVersion();
    [CompilerGeneratedAttribute]
internal void set_SolutionOriginatedFromVersion(Version value);
    [CompilerGeneratedAttribute]
public string get_SolutionOriginatedDeploymentType();
    [CompilerGeneratedAttribute]
internal void set_SolutionOriginatedDeploymentType(string value);
    [CompilerGeneratedAttribute]
public string get_UniqueName();
    [CompilerGeneratedAttribute]
internal void set_UniqueName(string value);
    [CompilerGeneratedAttribute]
public LabelDictionary get_DisplayName();
    [CompilerGeneratedAttribute]
internal void set_DisplayName(LabelDictionary value);
    [CompilerGeneratedAttribute]
public LabelDictionary get_Description();
    [CompilerGeneratedAttribute]
internal void set_Description(LabelDictionary value);
    [CompilerGeneratedAttribute]
public PublisherInformation get_Publisher();
    [CompilerGeneratedAttribute]
internal void set_Publisher(PublisherInformation value);
    [CompilerGeneratedAttribute]
public IList`1<RootComponentInformation> get_RootComponents();
    [CompilerGeneratedAttribute]
public void set_RootComponents(IList`1<RootComponentInformation> value);
    [CompilerGeneratedAttribute]
public IList`1<Dependant> get_RequiredDependencies();
    [CompilerGeneratedAttribute]
public void set_RequiredDependencies(IList`1<Dependant> value);
    [CompilerGeneratedAttribute]
public XDocument get_SolutionXDocument();
    [CompilerGeneratedAttribute]
internal void set_SolutionXDocument(XDocument value);
    [CompilerGeneratedAttribute]
public string get_BaseLocale();
    [CompilerGeneratedAttribute]
internal void set_BaseLocale(string value);
}
internal static class Microsoft.Crm.Tools.SolutionPackager.SolutionMetadataFactory : object {
    public static SolutionMetadata FromInspectContext(Context context);
    private static LocalizableText ParseLocalizableElementText(XElement xlocalized, XName childXName, string defaultAttrXName, string textAttrXName, string lcidAttrXName);
    private static IList`1<EnvironmentVariableMetadata> ComposeEnvironmentVariablesMetadata(Context context);
    private static IList`1<ConnectionReferenceMetadata> ComposeConnectionReferencesMetadata(Context context);
    private static IList`1<CanvasAppMetadata> ComposeCanvasAppsMetadata(Context context);
    private static IList`1<WorkflowMetadata> ComposeWorkflowMetadata(Context context);
    private static IList`1<ScfMetadata> ComposeScfComponetMetadata(Context context);
    private static Uri ComponentFileToDataUri(string fileUri, Context context);
}
public class Microsoft.Crm.Tools.SolutionPackager.SolutionPackager : object {
    private static IReadOnlyDictionary`2<ComponentType, string> _componentFolders;
    [CompilerGeneratedAttribute]
private Context <Context>k__BackingField;
    public List`1<string> preExistingFiles;
    public Context Context { get; private set; }
    public static IReadOnlyDictionary`2<ComponentType, string> ComponentFolders { get; }
    public SolutionPackager(PackagerArguments arguments);
    [CompilerGeneratedAttribute]
public Context get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(Context value);
    public void Run(IEnumerable`1<string> ignoreComponentList);
    public static SolutionMetadata ExtractMetadata(string path, bool isPathAFolder);
    public static SolutionMetadata ExtractMetadata(Stream solutionZipFileAsBytes);
    public static void Repack(PackagerArguments arguments);
    public static SolutionInformation InspectLocalFolder(string pathToExtractedSolution);
    public static SolutionInformation InspectZip(string pathToSolutionZip);
    public static IReadOnlyDictionary`2<ComponentType, string> get_ComponentFolders();
    private static SolutionPackager RunInspect(IPackageReader reader, PackagerArguments arguments);
    private void Run(IPackageReader reader, IPackageWriter writer, IEnumerable`1<string> ignoreComponentList);
    private void InvokePlugin(PluginConfigurationElement pluginConfig, Action`1<IPackagePlugin> action);
    private void DeleteStrayFilesAsNecessary();
    private static string ConvertToManagedName(string zipFile);
}
public enum Microsoft.Crm.Tools.SolutionPackager.SolutionPackageType : Enum {
    public int value__;
    public static SolutionPackageType Unmanaged;
    public static SolutionPackageType Managed;
    public static SolutionPackageType Both;
    public static SolutionPackageType None__;
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.StoredProcedureProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
internal abstract class Microsoft.Crm.Tools.SolutionPackager.SubTemplateProcessorBase : object {
    protected static string XmlExtension;
    protected static string StyleSheetExtension;
    [CompilerGeneratedAttribute]
private TemplateProcessor <TemplateProcessor>k__BackingField;
    protected TemplateProcessor TemplateProcessor { get; private set; }
    protected string TemplateIdElementName { get; }
    protected string SubTemplateRootDirectory { get; }
    protected SubTemplateProcessorBase(TemplateProcessor templateProcessor);
    [CompilerGeneratedAttribute]
protected TemplateProcessor get_TemplateProcessor();
    [CompilerGeneratedAttribute]
private void set_TemplateProcessor(TemplateProcessor value);
    protected abstract virtual string get_TemplateIdElementName();
    protected abstract virtual string get_SubTemplateRootDirectory();
    public sealed virtual void ReadFromFiles(XElement componentElement, string componentPath);
    public sealed virtual void WriteToFiles(XElement componentElement, string componentPath);
    protected abstract virtual void WriteSubTemplateToFiles(XElement element, string subTemplateDirectory);
    protected abstract virtual void ReadSubTemplateFromFiles(XElement element, string subTemplateDirectory);
    protected virtual string GetSubTemplateDirectory(XElement element, string componentDirectory);
    protected void WriteSubElementValueToFile(XElement element, string subElementName, string directory, string extension);
    protected void ReadSubElementValueFromFile(XElement element, string subElementName, string directory, string extension);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.SyncAttributeMappingProfileProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
    public virtual Collection`1<LocalizableElement> GetLocalizableElements(ComponentCollection components);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.TeamTemplateProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.TemplateProcessor : ComponentProcessorBase {
    private static String[] SubTemplates;
    private Dictionary`2<string, ISubComponentProcessor> subTemplateProcessors;
    internal Context Context { get; }
    private static TemplateProcessor();
    internal Context get_Context();
    protected virtual Component CreateComponent(XElement element);
    public virtual void WriteToFiles(ComponentCollection components, IEnumerable`1<string> ignoreComponentList);
    public virtual ComponentCollection ReadFromFiles();
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.WebResourceProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
}
public enum Microsoft.Crm.Tools.SolutionPackager.WebResourceType : Enum {
    public int value__;
    public static WebResourceType HTML;
    public static WebResourceType CSS;
    public static WebResourceType JScript;
    public static WebResourceType XML;
    public static WebResourceType PNG;
    public static WebResourceType JPG;
    public static WebResourceType GIF;
    public static WebResourceType Silverlight;
    public static WebResourceType XSL;
    public static WebResourceType ICO;
    public static WebResourceType RESX;
}
[ExportAttribute("Microsoft.Crm.Tools.SolutionPackager.IComponentProcessor")]
internal class Microsoft.Crm.Tools.SolutionPackager.WorkflowProcessor : ComponentProcessorBase {
    protected virtual Component CreateComponent(XElement element);
    protected virtual Component CreateWorkflowImageComponent(XElement element);
    public virtual Collection`1<LocalizableElement> GetLocalizableElements(ComponentCollection components);
    private static string GetFlowName(XElement element);
}
[ExtensionAttribute]
internal static class Microsoft.Crm.Tools.SolutionPackager.XmlExtensions : object {
    [ExtensionAttribute]
public static XElement CloneEmptyPreserveNamespace(XElement element);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> ElementsPreserveNamespace(XDocument doc);
    [ExtensionAttribute]
public static void SortRootComponents(XElement element);
    [ExtensionAttribute]
public static void SortMissingDependencies(XElement element);
    [ExtensionAttribute]
public static XElement ElementPreserveNamespace(XElement topElement, XName name, bool cloneElement);
    [IteratorStateMachineAttribute("Microsoft.Crm.Tools.SolutionPackager.XmlExtensions/<ElementsPreserveNamespace>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<XElement> ElementsPreserveNamespace(XElement topElement, XName name, bool cloneElement);
    [ExtensionAttribute]
public static void AddAndLiftNamespace(XElement parent, XElement childElement);
    [ExtensionAttribute]
public static void LiftNamespaceAttributes(XElement parent, XElement childElement);
    private static void SetNamespaceAttributes(XElement element, IEnumerable`1<XAttribute> namespaceAttributes);
    private static void ClearNamespaceAttributes(XElement element, IEnumerable`1<XAttribute> namespaceAttributes);
    private static IEnumerable`1<XAttribute> GetNamespaceAttributes(XElement element);
    [ExtensionAttribute]
public static XElement GetRequiredElement(XElement parentElement, XName name);
    [ExtensionAttribute]
public static bool HasNonEmptyAttribute(XElement element, XName name);
}
internal static class Microsoft.Crm.Tools.SolutionPackager.XUtils : object {
    public static XElement LoadElement(string filename);
    public static XDocument LoadDocument(string filename, LoadOptions loadOptions);
}
public class Microsoft.Crm.Tools.SolutionPackager.ZipReader : object {
    private bool disposed;
    private Context context;
    private string tempFolderName;
    private static string SolutionFileName;
    private static string CustomizationFileName;
    public sealed virtual void Initialize(Context context);
    public sealed virtual void Load();
    private void ProcessZipFile(ZipPackage zipPackage);
    public sealed virtual void Dispose();
    private void LoadCustomizations(Stream customizationXml, Context context);
    private void Dispose(bool disposing);
    private Byte[] GetPartBytes(PackagePart part);
}
public class Microsoft.Crm.Tools.SolutionPackager.ZipWriter : object {
    private bool _disposed;
    private Context _context;
    private Dictionary`2<string, Dictionary`2<string, string>> _availableResources;
    public sealed virtual void Initialize(Context context);
    public sealed virtual void WriteComponents(IEnumerable`1<string> ignoreComponentList);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private static void AddXDocumentPart(ZipPackage package, Uri uri, XDocument document);
    private static void AddFile(ZipPackage package, Uri uri, Byte[] data);
    public sealed virtual void LocalizeComponents();
    private void LocalizeSolutionComponents();
    private void ReplaceLocalizableElements(Collection`1<LocalizableElement> localizableElements);
    private void LoadAvailbleResources();
    private Dictionary`2<string, string> ReadResourceFile(string resourceFile);
    private LocalizationNameKeyMap ReadLocalizationKeyMapFile();
}
