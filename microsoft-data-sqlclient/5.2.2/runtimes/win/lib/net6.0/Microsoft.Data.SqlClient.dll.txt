internal static class Interop : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.Data.Common.ActivityCorrelator : object {
    [ThreadStaticAttribute]
private static ActivityId t_tlsActivity;
    internal static ActivityId Current { get; }
    internal static ActivityId get_Current();
    internal static ActivityId Next();
}
internal static class Microsoft.Data.Common.ADP : object {
    private static Task`1<bool> s_trueTask;
    private static Task`1<bool> s_falseTask;
    internal static CompareOptions DefaultCompareOptions;
    internal static int DefaultConnectionTimeout;
    internal static int InfiniteConnectionTimeout;
    internal static int MaxBufferAccessTokenExpiry;
    internal static string ColumnEncryptionSystemProviderNamePrefix;
    internal static string Command;
    internal static string Connection;
    internal static string Parameter;
    internal static string ParameterName;
    internal static string ParameterSetPosition;
    internal static int DefaultCommandTimeout;
    internal static float FailoverTimeoutStep;
    internal static int CharSize;
    private static Version s_systemDataVersion;
    private static string ONDEMAND_PREFIX;
    private static string AZURE_SYNAPSE;
    internal static String[] s_azureSqlServerEndpoints;
    internal static IntPtr s_ptrZero;
    internal static Task`1<bool> TrueTask { get; }
    internal static Task`1<bool> FalseTask { get; }
    private static ADP();
    internal static Task`1<bool> get_TrueTask();
    internal static Task`1<bool> get_FalseTask();
    internal static InvalidUdtException CreateInvalidUdtException(Type udtType, string resourceReasonName);
    private static void TraceException(string trace, Exception e);
    internal static void TraceExceptionAsReturnValue(Exception e);
    internal static void TraceExceptionWithoutRethrow(Exception e);
    internal static bool IsEmptyArray(String[] array);
    internal static bool IsNull(object value);
    internal static Exception ExceptionWithStackTrace(Exception e);
    internal static Timer UnsafeCreateTimer(TimerCallback callback, object state, int dueTime, int period);
    internal static ArgumentException Argument(string error);
    internal static ArgumentException Argument(string error, Exception inner);
    internal static ArgumentException Argument(string error, string parameter);
    internal static ArgumentNullException ArgumentNull(string parameter);
    internal static ArgumentNullException ArgumentNull(string parameter, string error);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName);
    internal static IndexOutOfRangeException IndexOutOfRange(string error);
    internal static IndexOutOfRangeException IndexOutOfRange(int value);
    internal static IndexOutOfRangeException IndexOutOfRange();
    internal static InvalidOperationException InvalidOperation(string error, Exception inner);
    internal static OverflowException Overflow(string error);
    internal static OverflowException Overflow(string error, Exception inner);
    internal static TimeoutException TimeoutException(string error, Exception inner);
    internal static TypeLoadException TypeLoad(string error);
    internal static InvalidCastException InvalidCast();
    internal static InvalidCastException InvalidCast(string error);
    internal static InvalidCastException InvalidCast(string error, Exception inner);
    internal static InvalidOperationException InvalidOperation(string error);
    internal static IOException IO(string error);
    internal static IOException IO(string error, Exception inner);
    internal static NotSupportedException NotSupported();
    internal static NotSupportedException NotSupported(string error);
    internal static InvalidOperationException DataAdapter(string error);
    private static InvalidOperationException Provider(string error);
    internal static ArgumentException InvalidMultipartName(string property, string value);
    internal static ArgumentException InvalidMultipartNameIncorrectUsageOfQuotes(string property, string value);
    internal static ArgumentException InvalidMultipartNameToManyParts(string property, string value, int limit);
    internal static ObjectDisposedException ObjectDisposed(object instance);
    internal static InvalidOperationException MethodCalledTwice(string method);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName, object value);
    internal static AuthenticationException SSLCertificateAuthenticationException(string message);
    internal static ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, string value, string method);
    internal static void CheckArgumentNull(object value, string parameterName);
    internal static bool IsCatchableExceptionType(Exception e);
    internal static bool IsCatchableOrSecurityExceptionType(Exception e);
    internal static ArgumentOutOfRangeException InvalidEnumerationValue(Type type, int value);
    internal static ArgumentOutOfRangeException InvalidCommandBehavior(CommandBehavior value);
    internal static void ValidateCommandBehavior(CommandBehavior value);
    internal static ArgumentOutOfRangeException InvalidUserDefinedTypeSerializationFormat(Format value);
    internal static ArgumentOutOfRangeException NotSupportedUserDefinedTypeSerializationFormat(Format value, string method);
    internal static ArgumentException InvalidArgumentLength(string argumentName, int limit);
    internal static ArgumentException MustBeReadOnly(string argumentName);
    internal static Exception CreateSqlException(MsalException msalException, SqlConnectionString connectionOptions, SqlInternalConnectionTds sender, string username);
    internal static bool RemoveStringQuotes(string quotePrefix, string quoteSuffix, string quotedString, String& unquotedString);
    internal static string BuildQuotedString(string quotePrefix, string quoteSuffix, string unQuotedString);
    internal static string AppendQuotedString(StringBuilder buffer, string quotePrefix, string quoteSuffix, string unQuotedString);
    internal static string BuildMultiPartName(String[] strings);
    internal static Delegate FindBuilder(MulticastDelegate mcd);
    internal static long TimerCurrent();
    internal static long TimerFromSeconds(int seconds);
    internal static long TimerFromMilliseconds(long milliseconds);
    internal static bool TimerHasExpired(long timerExpire);
    internal static long TimerRemaining(long timerExpire);
    internal static long TimerRemainingMilliseconds(long timerExpire);
    internal static long TimerRemainingSeconds(long timerExpire);
    internal static long TimerToMilliseconds(long timerValue);
    private static long TimerToSeconds(long timerValue);
    internal static string MachineName();
    internal static Transaction GetCurrentTransaction();
    internal static bool IsDirection(DbParameter value, ParameterDirection condition);
    internal static void IsNullOrSqlType(object value, Boolean& isNull, Boolean& isSqlType);
    internal static Version GetAssemblyVersion();
    internal static bool IsAzureSynapseOnDemandEndpoint(string dataSource);
    internal static bool IsAzureSqlServerEndpoint(string dataSource);
    private static bool IsEndpoint(string dataSource, string prefix);
    internal static ArgumentException SingleValuedProperty(string propertyName, string value);
    internal static ArgumentException DoubleValuedProperty(string propertyName, string value1, string value2);
    internal static ArgumentException InvalidPrefixSuffix();
    internal static ArgumentException ConnectionStringSyntax(int index);
    internal static ArgumentException KeywordNotSupported(string keyword);
    internal static Exception InvalidConnectionOptionValue(string key);
    internal static Exception InvalidConnectionOptionValue(string key, Exception inner);
    internal static Exception InvalidConnectionOptionValueLength(string key, int limit);
    internal static Exception MissingConnectionOptionValue(string key, string requiredAdditionalKey);
    internal static InvalidOperationException InvalidDataDirectory();
    internal static ArgumentException CollectionRemoveInvalidObject(Type itemType, ICollection collection);
    internal static ArgumentNullException CollectionNullValue(string parameter, Type collection, Type itemType);
    internal static IndexOutOfRangeException CollectionIndexInt32(int index, Type collection, int count);
    internal static IndexOutOfRangeException CollectionIndexString(Type itemType, string propertyName, string propertyValue, Type collection);
    internal static InvalidCastException CollectionInvalidType(Type collection, Type itemType, object invalidValue);
    internal static ArgumentException ConvertFailed(Type fromType, Type toType, Exception innerException);
    internal static ArgumentException InvalidMinMaxPoolSizeValues();
    private static string ConnectionStateMsg(ConnectionState state);
    internal static InvalidOperationException NoConnectionString();
    internal static NotImplementedException MethodNotImplemented(string methodName);
    internal static Exception StreamClosed(string method);
    internal static Exception InvalidSeekOrigin(string parameterName);
    internal static IOException ErrorReadingFromStream(Exception internalException);
    internal static ArgumentException ParametersIsNotParent(Type parameterType, ICollection collection);
    internal static ArgumentException ParametersIsParent(Type parameterType, ICollection collection);
    internal static Exception InternalError(InternalErrorCode internalError);
    internal static Exception ClosedConnectionError();
    internal static Exception ConnectionAlreadyOpen(ConnectionState state);
    internal static Exception TransactionPresent();
    internal static Exception LocalTransactionPresent();
    internal static Exception OpenConnectionPropertySet(string property, ConnectionState state);
    internal static Exception EmptyDatabaseName();
    internal static Exception InternalConnectionError(ConnectionError internalError);
    internal static Exception InvalidConnectRetryCountValue();
    internal static Exception InvalidConnectRetryIntervalValue();
    internal static Exception DataReaderClosed(string method);
    internal static ArgumentOutOfRangeException InvalidSourceBufferIndex(int maxLen, long srcOffset, string parameterName);
    internal static ArgumentOutOfRangeException InvalidDestinationBufferIndex(int maxLen, int dstOffset, string parameterName);
    internal static IndexOutOfRangeException InvalidBufferSizeOrIndex(int numBytes, int bufferIndex);
    internal static Exception InvalidDataLength(long length);
    internal static bool CompareInsensitiveInvariant(string strvalue, string strconst);
    internal static int DstCompare(string strA, string strB);
    internal static void SetCurrentTransaction(Transaction transaction);
    internal static Exception NonSeqByteAccess(long badIndex, long currIndex, string method);
    internal static Exception NegativeParameter(string parameterName);
    internal static Exception InvalidXmlMissingColumn(string collectionName, string columnName);
    internal static InvalidOperationException AsyncOperationPending();
    internal static ArgumentOutOfRangeException InvalidCommandType(CommandType value);
    internal static Exception TooManyRestrictions(string collectionName);
    internal static Exception CommandTextRequired(string method);
    internal static Exception UninitializedParameterSize(int index, Type dataType);
    internal static Exception PrepareParameterType(DbCommand cmd);
    internal static Exception PrepareParameterSize(DbCommand cmd);
    internal static Exception PrepareParameterScale(DbCommand cmd, string type);
    internal static Exception MismatchedAsyncResult(string expectedMethod, string gotMethod);
    internal static ArgumentOutOfRangeException InvalidDataRowVersion(DataRowVersion value);
    internal static ArgumentOutOfRangeException NotSupportedCommandBehavior(CommandBehavior value, string method);
    internal static ArgumentException BadParameterName(string parameterName);
    internal static Exception DeriveParametersNotSupported(IDbCommand value);
    internal static Exception NoStoredProcedureExists(string sproc);
    internal static Exception DataTableDoesNotExist(string collectionName);
    internal static ArgumentOutOfRangeException InvalidUpdateRowSource(UpdateRowSource value);
    internal static Exception QueryFailed(string collectionName, Exception e);
    internal static Exception NoColumns();
    internal static InvalidOperationException ConnectionRequired(string method);
    internal static InvalidOperationException OpenConnectionRequired(string method, ConnectionState state);
    internal static Exception OpenReaderExists(bool marsOn);
    internal static Exception OpenReaderExists(Exception e, bool marsOn);
    internal static Exception InvalidXml();
    internal static Exception InvalidXmlInvalidValue(string collectionName, string columnName);
    internal static Exception CollectionNameIsNotUnique(string collectionName);
    internal static Exception UnableToBuildCollection(string collectionName);
    internal static Exception UndefinedCollection(string collectionName);
    internal static Exception UnsupportedVersion(string collectionName);
    internal static Exception AmbiguousCollectionName(string collectionName);
    internal static Exception MissingDataSourceInformationColumn();
    internal static Exception IncorrectNumberOfDataSourceInformationRows();
    internal static Exception MissingRestrictionColumn();
    internal static Exception MissingRestrictionRow();
    internal static Exception UndefinedPopulationMechanism(string populationMechanism);
    internal static Exception PooledOpenTimeout();
    internal static Exception NonPooledOpenTimeout();
    internal static InvalidOperationException TransactionConnectionMismatch();
    internal static InvalidOperationException TransactionRequired(string method);
    internal static InvalidOperationException TransactionCompletedButNotDisposed();
    internal static Exception InvalidMetaDataValue();
    internal static InvalidOperationException NonSequentialColumnAccess(int badCol, int currCol);
    internal static ArgumentException InvalidDataType(TypeCode typecode);
    internal static ArgumentException UnknownDataType(Type dataType);
    internal static ArgumentException DbTypeNotSupported(DbType type, Type enumtype);
    internal static ArgumentException UnknownDataTypeCode(Type dataType, TypeCode typeCode);
    internal static ArgumentException InvalidOffsetValue(int value);
    internal static ArgumentException InvalidSizeValue(int value);
    internal static ArgumentException ParameterValueOutOfRange(decimal value);
    internal static ArgumentException ParameterValueOutOfRange(SqlDecimal value);
    internal static ArgumentException ParameterValueOutOfRange(string value);
    internal static ArgumentException VersionDoesNotSupportDataType(string typeName);
    internal static Exception ParameterConversionFailed(object value, Type destType, Exception inner);
    internal static Exception ParametersMappingIndex(int index, DbParameterCollection collection);
    internal static Exception ParametersSourceIndex(string parameterName, DbParameterCollection collection, Type parameterType);
    internal static Exception ParameterNull(string parameter, DbParameterCollection collection, Type parameterType);
    internal static Exception InvalidParameterType(DbParameterCollection collection, Type parameterType, object invalidValue);
    internal static Exception ParallelTransactionsNotSupported(DbConnection obj);
    internal static Exception TransactionZombied(DbTransaction obj);
    internal static InvalidOperationException InvalidMixedUsageOfSecureAndClearCredential();
    internal static ArgumentException InvalidMixedArgumentOfSecureAndClearCredential();
    internal static InvalidOperationException InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity();
    internal static ArgumentException InvalidMixedArgumentOfSecureCredentialAndIntegratedSecurity();
    internal static InvalidOperationException InvalidMixedUsageOfAccessTokenAndIntegratedSecurity();
    internal static InvalidOperationException InvalidMixedUsageOfAccessTokenAndUserIDPassword();
    internal static InvalidOperationException InvalidMixedUsageOfAccessTokenAndAuthentication();
    internal static Exception InvalidMixedUsageOfCredentialAndAccessToken();
    internal static Exception InvalidMixedUsageOfAccessTokenAndTokenCallback();
    internal static Exception InvalidMixedUsageOfAccessTokenCallbackAndAuthentication();
    internal static Exception InvalidMixedUsageOfAccessTokenCallbackAndIntegratedSecurity();
    internal static bool IsEmpty(string str);
    internal static PlatformNotSupportedException DbTypeNotSupported(string dbType);
    internal static ArgumentOutOfRangeException InvalidIsolationLevel(IsolationLevel value);
    internal static Exception IncorrectPhysicalConnectionType();
    internal static ArgumentOutOfRangeException InvalidParameterDirection(ParameterDirection value);
    internal static Exception InvalidCommandTimeout(int value, string property);
    internal static object LocalMachineRegistryValue(string subkey, string queryvalue);
}
internal class Microsoft.Data.Common.DbConnectionOptions : object {
    private static string ConnectionStringValidKeyPattern;
    private static string ConnectionStringValidValuePattern;
    private static string ConnectionStringQuoteValuePattern;
    private static string ConnectionStringQuoteOdbcValuePattern;
    internal static string DataDirectory;
    private static Regex s_connectionStringValidKeyRegex;
    private static Regex s_connectionStringValidValueRegex;
    private static Regex s_connectionStringQuoteValueRegex;
    private static Regex s_connectionStringQuoteOdbcValueRegex;
    internal bool _hasPasswordKeyword;
    internal bool _hasUserIdKeyword;
    internal NameValuePair _keyChain;
    private string _usersConnectionString;
    private Dictionary`2<string, string> _parsetable;
    internal Dictionary`2<string, string> Parsetable { get; }
    public bool IsEmpty { get; }
    internal bool HasPersistablePassword { get; }
    public DbConnectionOptions(string connectionString, Dictionary`2<string, string> synonyms);
    protected DbConnectionOptions(DbConnectionOptions connectionOptions);
    private static DbConnectionOptions();
    internal Dictionary`2<string, string> get_Parsetable();
    public bool get_IsEmpty();
    internal bool TryGetParsetableValue(string key, String& value);
    public bool ConvertValueToIntegratedSecurity();
    internal bool ConvertValueToIntegratedSecurityInternal(string stringValue);
    public int ConvertValueToInt32(string keyName, int defaultValue);
    internal static int ConvertToInt32Internal(string keyname, string stringValue);
    public string ConvertValueToString(string keyName, string defaultValue);
    public bool ContainsKey(string keyword);
    protected internal virtual string Expand();
    public string UsersConnectionString(bool hidePassword);
    internal string UsersConnectionStringForTrace();
    private string UsersConnectionString(bool hidePassword, bool forceHidePassword);
    internal bool get_HasPersistablePassword();
    public bool ConvertValueToBoolean(string keyName, bool defaultValue);
    internal static bool ConvertValueToBooleanInternal(string keyName, string stringValue);
    private static bool CompareInsensitiveInvariant(string strvalue, string strconst);
    [ConditionalAttribute("DEBUG")]
private static void DebugTraceKeyValuePair(string keyname, string keyvalue, Dictionary`2<string, string> synonyms);
    private static string GetKeyName(StringBuilder buffer);
    private static string GetKeyValue(StringBuilder buffer, bool trimWhitespace);
    internal static int GetKeyValuePair(string connectionString, int currentPosition, StringBuilder buffer, bool useOdbcRules, String& keyname, String& keyvalue);
    private static bool IsValueValidInternal(string keyvalue);
    private static bool IsKeyNameValid(string keyname);
    private static NameValuePair ParseInternal(Dictionary`2<string, string> parsetable, string connectionString, bool buildChain, Dictionary`2<string, string> synonyms, bool firstKey);
    internal NameValuePair ReplacePasswordPwd(String& constr, bool fakePassword);
    internal string ExpandAttachDbFileName(string replacementValue);
    internal static string ExpandDataDirectory(string keyword, string value);
}
internal class Microsoft.Data.Common.DbConnectionPoolKey : object {
    private string _connectionString;
    internal string ConnectionString { get; internal set; }
    internal DbConnectionPoolKey(string connectionString);
    protected DbConnectionPoolKey(DbConnectionPoolKey key);
    public virtual object Clone();
    internal virtual string get_ConnectionString();
    internal virtual void set_ConnectionString(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Microsoft.Data.Common.DbConnectionStringBuilderUtil : object {
    private static string SqlPasswordString;
    private static string ActiveDirectoryPasswordString;
    private static string ActiveDirectoryIntegratedString;
    private static string ActiveDirectoryInteractiveString;
    private static string ActiveDirectoryServicePrincipalString;
    private static string ActiveDirectoryDeviceCodeFlowString;
    internal static string ActiveDirectoryManagedIdentityString;
    internal static string ActiveDirectoryMSIString;
    internal static string ActiveDirectoryDefaultString;
    internal static string ActiveDirectoryWorkloadIdentityString;
    private static string SqlCertificateString;
    private static Dictionary`2<string, SqlConnectionIPAddressPreference> s_preferenceNames;
    private static DbConnectionStringBuilderUtil();
    internal static bool ConvertToBoolean(object value);
    internal static bool ConvertToIntegratedSecurity(object value);
    internal static int ConvertToInt32(object value);
    internal static string ConvertToString(object value);
    internal static bool TryConvertToPoolBlockingPeriod(string value, PoolBlockingPeriod& result);
    internal static bool IsValidPoolBlockingPeriodValue(PoolBlockingPeriod value);
    internal static string PoolBlockingPeriodToString(PoolBlockingPeriod value);
    internal static PoolBlockingPeriod ConvertToPoolBlockingPeriod(string keyword, object value);
    internal static bool TryConvertToApplicationIntent(string value, ApplicationIntent& result);
    internal static bool IsValidApplicationIntentValue(ApplicationIntent value);
    internal static string ApplicationIntentToString(ApplicationIntent value);
    internal static ApplicationIntent ConvertToApplicationIntent(string keyword, object value);
    internal static bool TryConvertToAuthenticationType(string value, SqlAuthenticationMethod& result);
    internal static bool TryConvertToColumnEncryptionSetting(string value, SqlConnectionColumnEncryptionSetting& result);
    internal static bool IsValidColumnEncryptionSetting(SqlConnectionColumnEncryptionSetting value);
    internal static string ColumnEncryptionSettingToString(SqlConnectionColumnEncryptionSetting value);
    internal static bool IsValidAuthenticationTypeValue(SqlAuthenticationMethod value);
    internal static string AuthenticationTypeToString(SqlAuthenticationMethod value);
    internal static SqlAuthenticationMethod ConvertToAuthenticationType(string keyword, object value);
    internal static SqlConnectionColumnEncryptionSetting ConvertToColumnEncryptionSetting(string keyword, object value);
    internal static bool TryConvertToAttestationProtocol(string value, SqlConnectionAttestationProtocol& result);
    internal static bool IsValidAttestationProtocol(SqlConnectionAttestationProtocol value);
    internal static string AttestationProtocolToString(SqlConnectionAttestationProtocol value);
    internal static SqlConnectionAttestationProtocol ConvertToAttestationProtocol(string keyword, object value);
    internal static SqlConnectionEncryptOption ConvertToSqlConnectionEncryptOption(string keyword, object value);
    internal static bool TryConvertToIPAddressPreference(string value, SqlConnectionIPAddressPreference& result);
    internal static bool IsValidIPAddressPreference(SqlConnectionIPAddressPreference value);
    internal static string IPAddressPreferenceToString(SqlConnectionIPAddressPreference value);
    internal static SqlConnectionIPAddressPreference ConvertToIPAddressPreference(string keyword, object value);
}
internal static class Microsoft.Data.Common.DbConnectionStringDefaults : object {
    internal static ApplicationIntent ApplicationIntent;
    internal static string ApplicationName;
    internal static string AttachDBFilename;
    internal static int CommandTimeout;
    internal static int ConnectTimeout;
    internal static string CurrentLanguage;
    internal static string DataSource;
    internal static SqlConnectionEncryptOption Encrypt;
    internal static string HostNameInCertificate;
    internal static string ServerCertificate;
    internal static bool Enlist;
    internal static string FailoverPartner;
    internal static string InitialCatalog;
    internal static bool IntegratedSecurity;
    internal static int LoadBalanceTimeout;
    internal static bool MultipleActiveResultSets;
    internal static bool MultiSubnetFailover;
    internal static int MaxPoolSize;
    internal static int MinPoolSize;
    internal static int PacketSize;
    internal static string Password;
    internal static bool PersistSecurityInfo;
    internal static bool Pooling;
    internal static bool TrustServerCertificate;
    internal static string TypeSystemVersion;
    internal static string UserID;
    internal static bool UserInstance;
    internal static bool Replication;
    internal static string WorkstationID;
    internal static string TransactionBinding;
    internal static int ConnectRetryCount;
    internal static int ConnectRetryInterval;
    internal static SqlAuthenticationMethod Authentication;
    internal static SqlConnectionColumnEncryptionSetting ColumnEncryptionSetting;
    internal static string EnclaveAttestationUrl;
    internal static SqlConnectionAttestationProtocol AttestationProtocol;
    internal static SqlConnectionIPAddressPreference IPAddressPreference;
    internal static PoolBlockingPeriod PoolBlockingPeriod;
    internal static string ServerSPN;
    internal static string FailoverPartnerSPN;
    private static DbConnectionStringDefaults();
}
internal static class Microsoft.Data.Common.DbConnectionStringKeywords : object {
    internal static string ApplicationIntent;
    internal static string ApplicationName;
    internal static string AttachDBFilename;
    internal static string ConnectTimeout;
    internal static string CommandTimeout;
    internal static string ConnectionReset;
    internal static string ContextConnection;
    internal static string CurrentLanguage;
    internal static string Encrypt;
    internal static string HostNameInCertificate;
    internal static string ServerCertificate;
    internal static string FailoverPartner;
    internal static string InitialCatalog;
    internal static string MultipleActiveResultSets;
    internal static string MultiSubnetFailover;
    internal static string NetworkLibrary;
    internal static string PacketSize;
    internal static string Replication;
    internal static string TransactionBinding;
    internal static string TrustServerCertificate;
    internal static string TypeSystemVersion;
    internal static string UserInstance;
    internal static string WorkstationID;
    internal static string ConnectRetryCount;
    internal static string ConnectRetryInterval;
    internal static string Authentication;
    internal static string ColumnEncryptionSetting;
    internal static string EnclaveAttestationUrl;
    internal static string AttestationProtocol;
    internal static string IPAddressPreference;
    internal static string ServerSPN;
    internal static string FailoverPartnerSPN;
    internal static string DataSource;
    internal static string IntegratedSecurity;
    internal static string Password;
    internal static string PersistSecurityInfo;
    internal static string UserID;
    internal static string Enlist;
    internal static string LoadBalanceTimeout;
    internal static string MaxPoolSize;
    internal static string Pooling;
    internal static string MinPoolSize;
    internal static string PoolBlockingPeriod;
}
internal static class Microsoft.Data.Common.DbConnectionStringSynonyms : object {
    internal static string APP;
    internal static string IPADDRESSPREFERENCE;
    internal static string APPLICATIONINTENT;
    internal static string EXTENDEDPROPERTIES;
    internal static string INITIALFILENAME;
    internal static string HOSTNAMEINCERTIFICATE;
    internal static string SERVERCERTIFICATE;
    internal static string CONNECTIONTIMEOUT;
    internal static string TIMEOUT;
    internal static string CONNECTRETRYCOUNT;
    internal static string CONNECTRETRYINTERVAL;
    internal static string LANGUAGE;
    internal static string ADDR;
    internal static string ADDRESS;
    internal static string SERVER;
    internal static string NETWORKADDRESS;
    internal static string DATABASE;
    internal static string TRUSTEDCONNECTION;
    internal static string ConnectionLifetime;
    internal static string MULTIPLEACTIVERESULTSETS;
    internal static string MULTISUBNETFAILOVER;
    internal static string NET;
    internal static string NETWORK;
    internal static string POOLBLOCKINGPERIOD;
    internal static string Pwd;
    internal static string PERSISTSECURITYINFO;
    internal static string TRUSTSERVERCERTIFICATE;
    internal static string UID;
    internal static string User;
    internal static string WSID;
    internal static string ServerSPN;
    internal static string FailoverPartnerSPN;
}
internal class Microsoft.Data.Common.MultipartIdentifier : object {
    private static int MaxParts;
    internal static int ServerIndex;
    internal static int CatalogIndex;
    internal static int SchemaIndex;
    internal static int TableIndex;
    internal static String[] ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, string property, bool ThrowOnEmptyMultipartName);
    private static void IncrementStringCount(string name, String[] ary, Int32& position, string property);
    private static bool IsWhitespace(char ch);
    internal static String[] ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, char separator, int limit, bool removequotes, string property, bool ThrowOnEmptyMultipartName);
}
internal class Microsoft.Data.Common.NameValuePair : object {
    private string _name;
    private string _value;
    [OptionalFieldAttribute]
private int _length;
    private NameValuePair _next;
    internal int Length { get; }
    internal string Name { get; }
    internal string Value { get; }
    internal NameValuePair Next { get; internal set; }
    internal NameValuePair(string name, string value, int length);
    internal int get_Length();
    internal string get_Name();
    internal string get_Value();
    internal NameValuePair get_Next();
    internal void set_Next(NameValuePair value);
}
internal static class Microsoft.Data.ExceptionBuilder : object {
    private static void TraceException(string trace, Exception e);
    internal static void TraceExceptionAsReturnValue(Exception e);
    internal static ArgumentException _Argument(string error);
    internal static Exception InvalidOffsetLength();
}
internal static class Microsoft.Data.LocalDBAPI : object {
    private static string LocalDbPrefix;
    private static string LocalDbPrefix_NP;
    private static LocalDBFormatMessageDelegate s_localDBFormatMessage;
    private static IntPtr s_userInstanceDLLHandle;
    private static object s_dllLock;
    private static UInt32 const_LOCALDB_TRUNCATE_ERR_MESSAGE;
    private static int const_ErrorMessageBufferSize;
    private static IntPtr UserInstanceDLLHandle { get; }
    private static LocalDBFormatMessageDelegate LocalDBFormatMessage { get; }
    private static LocalDBAPI();
    internal static string GetLocalDbInstanceNameFromServerName(string serverName);
    private static IntPtr LoadProcAddress();
    private static IntPtr get_UserInstanceDLLHandle();
    internal static void ReleaseDLLHandles();
    private static LocalDBFormatMessageDelegate get_LocalDBFormatMessage();
    internal static string GetLocalDBMessage(int hrCode);
    private static SqlException CreateLocalDBException(string errorMessage, string instance, int localDbError, int sniError);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class Microsoft.Data.OperationAbortedException : SystemException {
    private OperationAbortedException(string message, Exception innerException);
    private OperationAbortedException(SerializationInfo info, StreamingContext context);
    internal static OperationAbortedException Aborted(Exception inner);
}
internal abstract class Microsoft.Data.ProviderBase.DbConnectionBusy : DbConnectionClosed {
    protected DbConnectionBusy(ConnectionState state);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal abstract class Microsoft.Data.ProviderBase.DbConnectionClosed : DbConnectionInternal {
    public string ServerVersion { get; }
    protected DbConnectionClosed(ConnectionState state, bool hidePassword, bool allowSetConnectionString);
    public virtual string get_ServerVersion();
    public virtual DbTransaction BeginTransaction(IsolationLevel il);
    public virtual void ChangeDatabase(string database);
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    protected virtual void Deactivate();
    protected internal virtual DataTable GetSchema(DbConnectionFactory factory, DbConnectionPoolGroup poolGroup, DbConnection outerConnection, string collectionName, String[] restrictions);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    protected virtual void Activate(Transaction transaction);
    public virtual void EnlistTransaction(Transaction transaction);
}
internal class Microsoft.Data.ProviderBase.DbConnectionClosedBusy : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedBusy();
}
internal class Microsoft.Data.ProviderBase.DbConnectionClosedConnecting : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedConnecting();
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal class Microsoft.Data.ProviderBase.DbConnectionClosedNeverOpened : DbConnectionClosed {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedNeverOpened();
}
internal class Microsoft.Data.ProviderBase.DbConnectionClosedPreviouslyOpened : DbConnectionClosed {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedPreviouslyOpened();
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal abstract class Microsoft.Data.ProviderBase.DbConnectionFactory : object {
    private Dictionary`2<DbConnectionPoolKey, DbConnectionPoolGroup> _connectionPoolGroups;
    private List`1<DbConnectionPool> _poolsToRelease;
    private List`1<DbConnectionPoolGroup> _poolGroupsToRelease;
    private Timer _pruningTimer;
    private static int PruningDueTime;
    private static int PruningPeriod;
    private static int _objectTypeCount;
    [CompilerGeneratedAttribute]
private int <ObjectID>k__BackingField;
    private static UInt32 s_pendingOpenNonPooledNext;
    private static Task`1[] s_pendingOpenNonPooled;
    private static Task`1<DbConnectionInternal> s_completedTask;
    private static Action`2<Task`1<DbConnectionInternal>, object> s_tryGetConnectionCompletedContinuation;
    internal int ObjectID { get; }
    public DbProviderFactory ProviderFactory { get; }
    private static DbConnectionFactory();
    [CompilerGeneratedAttribute]
internal int get_ObjectID();
    public abstract virtual DbProviderFactory get_ProviderFactory();
    public void ClearAllPools();
    public void ClearPool(DbConnection connection);
    public void ClearPool(DbConnectionPoolKey key);
    internal virtual DbConnectionPoolProviderInfo CreateConnectionPoolProviderInfo(DbConnectionOptions connectionOptions);
    internal DbConnectionInternal CreateNonPooledConnection(DbConnection owningConnection, DbConnectionPoolGroup poolGroup, DbConnectionOptions userOptions);
    internal DbConnectionInternal CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    private Timer CreatePruningTimer();
    protected DbConnectionOptions FindConnectionOptions(DbConnectionPoolKey key);
    private static Task`1<DbConnectionInternal> GetCompletedTask();
    private DbConnectionPool GetConnectionPool(DbConnection owningObject, DbConnectionPoolGroup connectionPoolGroup);
    internal DbConnectionPoolGroup GetConnectionPoolGroup(DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolOptions, DbConnectionOptions& userConnectionOptions);
    private void PruneConnectionPoolGroups(object state);
    internal void QueuePoolForRelease(DbConnectionPool pool, bool clearing);
    internal void QueuePoolGroupForRelease(DbConnectionPoolGroup poolGroup);
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions);
    internal DbMetaDataFactory GetMetaDataFactory(DbConnectionPoolGroup connectionPoolGroup, DbConnectionInternal internalConnection);
    protected virtual DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory);
    protected abstract virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection);
    protected abstract virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    protected abstract virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions options);
    internal abstract virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal abstract virtual DbConnectionInternal GetInnerConnection(DbConnection connection);
    protected abstract virtual int GetObjectId(DbConnection conne);
    internal abstract virtual void PermissionDemand(DbConnection outerConnection);
    internal abstract virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal abstract virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal abstract virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal abstract virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
    internal virtual void Unload();
    internal bool TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection);
    private Task`1<DbConnectionInternal> CreateReplaceConnectionContinuation(Task`1<DbConnectionInternal> task, DbConnection owningConnection, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionPoolGroup poolGroup, CancellationTokenSource cancellationTokenSource);
    private static void TryGetConnectionCompletedContinuation(Task`1<DbConnectionInternal> task, object state);
}
internal abstract class Microsoft.Data.ProviderBase.DbConnectionInternal : object {
    internal static StateChangeEventArgs StateChangeClosed;
    internal static StateChangeEventArgs StateChangeOpen;
    private bool _allowSetConnectionString;
    private bool _hidePassword;
    private ConnectionState _state;
    private WeakReference`1<DbConnection> _owningObject;
    private DbConnectionPool _connectionPool;
    private DbReferenceCollection _referenceCollection;
    private int _pooledCount;
    private bool _connectionIsDoomed;
    private bool _cannotBePooled;
    private DateTime _createTime;
    private static int _objectTypeCount;
    internal int _objectID;
    private TransactionCompletedEventHandler _transactionCompletedEventHandler;
    private bool _isInStasis;
    private Transaction _enlistedTransaction;
    private Transaction _enlistedTransactionOriginal;
    internal bool AllowSetConnectionString { get; }
    internal bool CanBePooled { get; }
    protected internal bool IsConnectionDoomed { get; }
    internal bool IsEmancipated { get; }
    internal bool IsInPool { get; }
    protected internal DbConnection Owner { get; }
    internal DbConnectionPool Pool { get; }
    protected internal DbReferenceCollection ReferenceCollection { get; }
    public string ServerVersion { get; }
    public string ServerVersionNormalized { get; }
    public bool ShouldHidePassword { get; }
    public ConnectionState State { get; }
    protected internal Transaction EnlistedTransaction { get; protected internal set; }
    protected bool EnlistedTransactionDisposed { get; }
    internal bool IsTxRootWaitingForTxEnd { get; }
    internal int ObjectID { get; }
    protected bool UnbindOnTransactionCompletion { get; }
    protected internal bool IsNonPoolableTransactionRoot { get; }
    internal bool IsTransactionRoot { get; }
    protected bool ReadyToPrepareTransaction { get; }
    internal bool IsAccessTokenExpired { get; }
    internal DbConnectionInternal(ConnectionState state, bool hidePassword, bool allowSetConnectionString);
    private static DbConnectionInternal();
    internal bool get_AllowSetConnectionString();
    internal bool get_CanBePooled();
    protected internal bool get_IsConnectionDoomed();
    internal bool get_IsEmancipated();
    internal bool get_IsInPool();
    protected internal DbConnection get_Owner();
    internal DbConnectionPool get_Pool();
    protected internal DbReferenceCollection get_ReferenceCollection();
    public abstract virtual string get_ServerVersion();
    public virtual string get_ServerVersionNormalized();
    public bool get_ShouldHidePassword();
    public ConnectionState get_State();
    internal void AddWeakReference(object value, int tag);
    public abstract virtual DbTransaction BeginTransaction(IsolationLevel il);
    public virtual void ChangeDatabase(string value);
    internal virtual void PrepareForReplaceConnection();
    protected virtual void PrepareForCloseConnection();
    protected virtual bool ObtainAdditionalLocksForClose();
    protected virtual void ReleaseAdditionalLocksForClose(bool lockToken);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected abstract virtual void Deactivate();
    internal void DeactivateConnection();
    protected internal void DoNotPoolThisConnection();
    protected internal void DoomThisConnection();
    protected internal void UnDoomThisConnection();
    protected internal virtual DataTable GetSchema(DbConnectionFactory factory, DbConnectionPoolGroup poolGroup, DbConnection outerConnection, string collectionName, String[] restrictions);
    internal void MakeNonPooledObject(DbConnection owningObject);
    internal void MakePooledConnection(DbConnectionPool connectionPool);
    internal void NotifyWeakReference(int message);
    internal virtual void OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    protected bool TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal void PrePush(object expectedOwner);
    internal void PostPop(DbConnection newOwner);
    internal void RemoveWeakReference(object value);
    internal virtual bool IsConnectionAlive(bool throwOnException);
    protected internal Transaction get_EnlistedTransaction();
    protected internal void set_EnlistedTransaction(Transaction value);
    protected bool get_EnlistedTransactionDisposed();
    internal bool get_IsTxRootWaitingForTxEnd();
    internal int get_ObjectID();
    protected virtual bool get_UnbindOnTransactionCompletion();
    protected internal virtual bool get_IsNonPoolableTransactionRoot();
    internal virtual bool get_IsTransactionRoot();
    protected virtual bool get_ReadyToPrepareTransaction();
    internal virtual bool get_IsAccessTokenExpired();
    protected abstract virtual void Activate(Transaction transaction);
    internal void ActivateConnection(Transaction transaction);
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    internal virtual void DelegatedTransactionEnded();
    public virtual void Dispose();
    public abstract virtual void EnlistTransaction(Transaction transaction);
    protected virtual void CleanupTransactionOnCompletion(Transaction transaction);
    internal void DetachCurrentTransactionIfEnded();
    internal void DetachTransaction(Transaction transaction, bool isExplicitlyReleasing);
    internal void CleanupConnectionOnTransactionCompletion(Transaction transaction);
    private void TransactionCompletedEvent(object sender, TransactionEventArgs e);
    private void TransactionOutcomeEnlist(Transaction transaction);
    internal void SetInStasis();
    private void TerminateStasis(bool returningToPool);
}
internal class Microsoft.Data.ProviderBase.DbConnectionOpenBusy : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionOpenBusy();
}
internal class Microsoft.Data.ProviderBase.DbConnectionPool : object {
    private static int MAX_Q_SIZE;
    private static int SEMAPHORE_HANDLE;
    private static int ERROR_HANDLE;
    private static int CREATION_HANDLE;
    private static int BOGUS_HANDLE;
    private static int ERROR_WAIT_DEFAULT;
    private static Random s_random;
    private int _cleanupWait;
    private DbConnectionPoolIdentity _identity;
    private DbConnectionFactory _connectionFactory;
    private DbConnectionPoolGroup _connectionPoolGroup;
    private DbConnectionPoolGroupOptions _connectionPoolGroupOptions;
    private DbConnectionPoolProviderInfo _connectionPoolProviderInfo;
    private ConcurrentDictionary`2<DbConnectionPoolAuthenticationContextKey, DbConnectionPoolAuthenticationContext> _pooledDbAuthenticationContexts;
    private State _state;
    private ConcurrentStack`1<DbConnectionInternal> _stackOld;
    private ConcurrentStack`1<DbConnectionInternal> _stackNew;
    private ConcurrentQueue`1<PendingGetConnection> _pendingOpens;
    private int _pendingOpensWaiting;
    private WaitCallback _poolCreateRequest;
    private int _waitCount;
    private PoolWaitHandles _waitHandles;
    private Exception _resError;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _errorOccurred;
    private int _errorWait;
    private Timer _errorTimer;
    private Timer _cleanupTimer;
    private TransactedConnectionPool _transactedConnectionPool;
    private List`1<DbConnectionInternal> _objectList;
    private int _totalObjects;
    private static int _objectTypeCount;
    internal int _objectID;
    private int CreationTimeout { get; }
    internal int Count { get; }
    internal DbConnectionFactory ConnectionFactory { get; }
    internal bool ErrorOccurred { get; }
    private bool HasTransactionAffinity { get; }
    internal TimeSpan LoadBalanceTimeout { get; }
    private bool NeedToReplenish { get; }
    internal DbConnectionPoolIdentity Identity { get; }
    internal bool IsRunning { get; }
    private int MaxPoolSize { get; }
    private int MinPoolSize { get; }
    internal int ObjectID { get; }
    internal DbConnectionPoolGroup PoolGroup { get; }
    internal DbConnectionPoolGroupOptions PoolGroupOptions { get; }
    internal DbConnectionPoolProviderInfo ProviderInfo { get; }
    internal ConcurrentDictionary`2<DbConnectionPoolAuthenticationContextKey, DbConnectionPoolAuthenticationContext> AuthenticationContexts { get; }
    internal bool UseLoadBalancing { get; }
    private bool UsingIntegrateSecurity { get; }
    internal DbConnectionPool(DbConnectionFactory connectionFactory, DbConnectionPoolGroup connectionPoolGroup, DbConnectionPoolIdentity identity, DbConnectionPoolProviderInfo connectionPoolProviderInfo);
    private static DbConnectionPool();
    private bool IsBlockingPeriodEnabled();
    private int get_CreationTimeout();
    internal int get_Count();
    internal DbConnectionFactory get_ConnectionFactory();
    internal bool get_ErrorOccurred();
    private bool get_HasTransactionAffinity();
    internal TimeSpan get_LoadBalanceTimeout();
    private bool get_NeedToReplenish();
    internal DbConnectionPoolIdentity get_Identity();
    internal bool get_IsRunning();
    private int get_MaxPoolSize();
    private int get_MinPoolSize();
    internal int get_ObjectID();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal DbConnectionPoolGroupOptions get_PoolGroupOptions();
    internal DbConnectionPoolProviderInfo get_ProviderInfo();
    internal ConcurrentDictionary`2<DbConnectionPoolAuthenticationContextKey, DbConnectionPoolAuthenticationContext> get_AuthenticationContexts();
    internal bool get_UseLoadBalancing();
    private bool get_UsingIntegrateSecurity();
    private void CleanupCallback(object state);
    internal void Clear();
    private Timer CreateCleanupTimer();
    private DbConnectionInternal CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
    private void DeactivateObject(DbConnectionInternal obj);
    internal void DestroyObject(DbConnectionInternal obj);
    private void ErrorCallback(object state);
    private Exception TryCloneCachedException();
    private void WaitForPendingOpen();
    internal bool TryGetConnection(DbConnection owningObject, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal& connection);
    private bool TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, bool allowCreate, bool onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection);
    private void PrepareConnection(DbConnection owningObject, DbConnectionInternal obj, Transaction transaction);
    internal DbConnectionInternal ReplaceConnection(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
    private DbConnectionInternal GetFromGeneralPool();
    private DbConnectionInternal GetFromTransactedPool(Transaction& transaction);
    private void PoolCreateRequest(object state);
    internal void PutNewObject(DbConnectionInternal obj);
    internal void PutObject(DbConnectionInternal obj, object owningObject);
    internal void PutObjectFromTransactedPool(DbConnectionInternal obj);
    private void QueuePoolCreateRequest();
    private bool ReclaimEmancipatedObjects();
    internal void Startup();
    internal void Shutdown();
    internal void TransactionEnded(Transaction transaction, DbConnectionInternal transactedObject);
    private DbConnectionInternal UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
}
internal class Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContext : object {
    private static int STATUS_LOCKED;
    private static int STATUS_UNLOCKED;
    private Byte[] _accessToken;
    private DateTime _expirationTime;
    private int _isUpdateInProgress;
    internal Byte[] AccessToken { get; }
    internal DateTime ExpirationTime { get; }
    internal DbConnectionPoolAuthenticationContext(Byte[] accessToken, DateTime expirationTime);
    internal static DbConnectionPoolAuthenticationContext ChooseAuthenticationContextToUpdate(DbConnectionPoolAuthenticationContext context1, DbConnectionPoolAuthenticationContext context2);
    internal Byte[] get_AccessToken();
    internal DateTime get_ExpirationTime();
    internal bool LockToUpdate();
    internal void ReleaseLockToUpdate();
}
internal class Microsoft.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey : object {
    private string _stsAuthority;
    private string _servicePrincipalName;
    private int _hashCode;
    internal string StsAuthority { get; }
    internal string ServicePrincipalName { get; }
    internal DbConnectionPoolAuthenticationContextKey(string stsAuthority, string servicePrincipalName);
    internal string get_StsAuthority();
    internal string get_ServicePrincipalName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private int ComputeHashCode();
}
internal class Microsoft.Data.ProviderBase.DbConnectionPoolGroup : object {
    private DbConnectionOptions _connectionOptions;
    private DbConnectionPoolKey _poolKey;
    private DbConnectionPoolGroupOptions _poolGroupOptions;
    private ConcurrentDictionary`2<DbConnectionPoolIdentity, DbConnectionPool> _poolCollection;
    private int _state;
    private DbConnectionPoolGroupProviderInfo _providerInfo;
    private DbMetaDataFactory _metaDataFactory;
    private static int s_objectTypeCount;
    private static int PoolGroupStateActive;
    private static int PoolGroupStateIdle;
    private static int PoolGroupStateDisabled;
    [CompilerGeneratedAttribute]
private int <ObjectID>k__BackingField;
    internal DbConnectionOptions ConnectionOptions { get; }
    internal DbConnectionPoolKey PoolKey { get; }
    internal DbConnectionPoolGroupProviderInfo ProviderInfo { get; internal set; }
    internal bool IsDisabled { get; }
    internal int ObjectID { get; }
    internal DbConnectionPoolGroupOptions PoolGroupOptions { get; }
    internal DbMetaDataFactory MetaDataFactory { get; internal set; }
    internal DbConnectionPoolGroup(DbConnectionOptions connectionOptions, DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolGroupOptions);
    internal DbConnectionOptions get_ConnectionOptions();
    internal DbConnectionPoolKey get_PoolKey();
    internal DbConnectionPoolGroupProviderInfo get_ProviderInfo();
    internal void set_ProviderInfo(DbConnectionPoolGroupProviderInfo value);
    internal bool get_IsDisabled();
    [CompilerGeneratedAttribute]
internal int get_ObjectID();
    internal DbConnectionPoolGroupOptions get_PoolGroupOptions();
    internal DbMetaDataFactory get_MetaDataFactory();
    internal void set_MetaDataFactory(DbMetaDataFactory value);
    internal int Clear();
    internal DbConnectionPool GetConnectionPool(DbConnectionFactory connectionFactory);
    private bool MarkPoolGroupAsActive();
    internal bool Prune();
}
internal class Microsoft.Data.ProviderBase.DbConnectionPoolGroupOptions : object {
    private bool _poolByIdentity;
    private int _minPoolSize;
    private int _maxPoolSize;
    private int _creationTimeout;
    private TimeSpan _loadBalanceTimeout;
    private bool _hasTransactionAffinity;
    private bool _useLoadBalancing;
    public int CreationTimeout { get; }
    public bool HasTransactionAffinity { get; }
    public TimeSpan LoadBalanceTimeout { get; }
    public int MaxPoolSize { get; }
    public int MinPoolSize { get; }
    public bool PoolByIdentity { get; }
    public bool UseLoadBalancing { get; }
    public DbConnectionPoolGroupOptions(bool poolByIdentity, int minPoolSize, int maxPoolSize, int creationTimeout, int loadBalanceTimeout, bool hasTransactionAffinity);
    public int get_CreationTimeout();
    public bool get_HasTransactionAffinity();
    public TimeSpan get_LoadBalanceTimeout();
    public int get_MaxPoolSize();
    public int get_MinPoolSize();
    public bool get_PoolByIdentity();
    public bool get_UseLoadBalancing();
}
internal class Microsoft.Data.ProviderBase.DbConnectionPoolGroupProviderInfo : object {
    private DbConnectionPoolGroup _poolGroup;
    internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
}
internal class Microsoft.Data.ProviderBase.DbConnectionPoolIdentity : object {
    public static DbConnectionPoolIdentity NoIdentity;
    private string _sidString;
    private bool _isRestricted;
    private bool _isNetwork;
    private int _hashCode;
    private static DbConnectionPoolIdentity s_lastIdentity;
    internal bool IsRestricted { get; }
    private DbConnectionPoolIdentity(string sidString, bool isRestricted, bool isNetwork);
    private static DbConnectionPoolIdentity();
    internal bool get_IsRestricted();
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    internal static DbConnectionPoolIdentity GetCurrentManaged();
    internal static DbConnectionPoolIdentity GetCurrent();
    private static DbConnectionPoolIdentity GetCurrentNative();
}
internal class Microsoft.Data.ProviderBase.DbConnectionPoolProviderInfo : object {
}
internal class Microsoft.Data.ProviderBase.DbMetaDataFactory : object {
    private DataSet _metaDataCollectionsDataSet;
    private string _normalizedServerVersion;
    private string _serverVersionString;
    private static string CollectionNameKey;
    private static string PopulationMechanismKey;
    private static string PopulationStringKey;
    private static string MaximumVersionKey;
    private static string MinimumVersionKey;
    private static string DataSourceProductVersionNormalizedKey;
    private static string DataSourceProductVersionKey;
    private static string RestrictionNumberKey;
    private static string NumberOfRestrictionsKey;
    private static string RestrictionNameKey;
    private static string ParameterNameKey;
    private static string DataTableKey;
    private static string SqlCommandKey;
    private static string PrepareCollectionKey;
    protected DataSet CollectionDataSet { get; }
    protected string ServerVersion { get; }
    protected string ServerVersionNormalized { get; }
    public DbMetaDataFactory(Stream xmlStream, string serverVersion, string normalizedServerVersion);
    protected DataSet get_CollectionDataSet();
    protected string get_ServerVersion();
    protected string get_ServerVersionNormalized();
    protected DataTable CloneAndFilterCollection(string collectionName, String[] hiddenColumnNames);
    public void Dispose();
    protected virtual void Dispose(bool disposing);
    private DataTable ExecuteCommand(DataRow requestedCollectionRow, String[] restrictions, DbConnection connection);
    private DataColumn[] FilterColumns(DataTable sourceTable, String[] hiddenColumnNames, DataColumnCollection destinationColumns);
    internal DataRow FindMetaDataCollectionRow(string collectionName);
    private void FixUpVersion(DataTable dataSourceInfoTable);
    private string GetParameterName(string neededCollectionName, int neededRestrictionNumber);
    public virtual DataTable GetSchema(DbConnection connection, string collectionName, String[] restrictions);
    private bool IncludeThisColumn(DataColumn sourceColumn, String[] hiddenColumnNames);
    private void LoadDataSetFromXml(Stream XmlStream);
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
    private bool SupportedByCurrentVersion(DataRow requestedCollectionRow);
}
internal abstract class Microsoft.Data.ProviderBase.DbReferenceCollection : object {
    private static int LockPollTime;
    private static int DefaultCollectionSize;
    private CollectionEntry[] _items;
    private object _itemLock;
    private int _optimisticCount;
    private int _lastItemIndex;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isNotifying;
    public abstract virtual void Add(object value, int tag);
    protected void AddItem(object value, int tag);
    internal T FindItem(int tag, Func`2<T, bool> filterMethod);
    public void Notify(int message);
    protected abstract virtual void NotifyItem(int message, int tag, object value);
    public abstract virtual void Remove(object value);
    protected void RemoveItem(object value);
    private void TryEnterItemLock(Boolean& lockObtained);
    private void ExitItemLockIfNeeded(bool lockObtained);
}
internal class Microsoft.Data.ProviderBase.FieldNameLookup : object {
    private String[] _fieldNames;
    private int _defaultLocaleID;
    private Dictionary`2<string, int> _fieldNameLookup;
    private CompareInfo _compareInfo;
    public FieldNameLookup(String[] fieldNames, int defaultLocaleID);
    public FieldNameLookup(IDataReader reader, int defaultLocaleID);
    public int GetOrdinal(string fieldName);
    private int IndexOf(string fieldName);
    private CompareInfo GetCompareInfo();
    private int LinearIndexOf(string fieldName, CompareOptions compareOptions);
    private void GenerateLookup();
}
internal class Microsoft.Data.ProviderBase.TimeoutTimer : object {
    private long _timerExpire;
    private bool _isInfiniteTimeout;
    private long _originalTimerTicks;
    internal static long InfiniteTimeout;
    internal bool IsExpired { get; }
    internal bool IsInfinite { get; }
    public long LegacyTimerExpire { get; }
    internal long MillisecondsRemaining { get; }
    internal int MillisecondsRemainingInt { get; }
    internal static TimeoutTimer StartSecondsTimeout(int seconds);
    internal static TimeoutTimer StartMillisecondsTimeout(long milliseconds);
    internal void SetTimeoutSeconds(int seconds);
    internal void Reset();
    internal bool get_IsExpired();
    internal bool get_IsInfinite();
    public long get_LegacyTimerExpire();
    internal long get_MillisecondsRemaining();
    internal int get_MillisecondsRemainingInt();
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.Data.ResCategoryAttribute : CategoryAttribute {
    public ResCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.Data.ResDescriptionAttribute : DescriptionAttribute {
    private bool replaced;
    public string Description { get; }
    public ResDescriptionAttribute(string description);
    public virtual string get_Description();
}
internal static class Microsoft.Data.SafeNativeMethods : object {
    internal static IntPtr GetProcAddress(IntPtr HModule, string funcName);
}
public class Microsoft.Data.Sql.SqlDataSourceEnumerator : DbDataSourceEnumerator {
    private static Lazy`1<SqlDataSourceEnumerator> s_singletonInstance;
    public static SqlDataSourceEnumerator Instance { get; }
    private static SqlDataSourceEnumerator();
    public static SqlDataSourceEnumerator get_Instance();
    public virtual DataTable GetDataSources();
    private DataTable GetDataSourcesInternal();
}
internal static class Microsoft.Data.Sql.SqlDataSourceEnumeratorNativeHelper : object {
    internal static DataTable GetDataSources();
    private static DataTable ParseServerEnumString(string serverInstances);
}
[ExtensionAttribute]
internal static class Microsoft.Data.Sql.SqlDataSourceEnumeratorUtil : object {
    internal static string ServerNameCol;
    internal static string InstanceNameCol;
    internal static string IsClusteredCol;
    internal static string VersionNameCol;
    internal static string Version;
    internal static string Clustered;
    internal static int s_versionLength;
    internal static int s_clusteredLength;
    internal static String[] s_endOfServerInstanceDelimiter_Managed;
    internal static char EndOfServerInstanceDelimiter_Native;
    internal static char InstanceKeysDelimiter;
    internal static char ServerNamesAndInstanceDelimiter;
    private static SqlDataSourceEnumeratorUtil();
    internal static DataTable PrepareDataTable();
    [ExtensionAttribute]
internal static DataTable SetColumnsReadOnly(DataTable dataTable);
}
public class Microsoft.Data.Sql.SqlNotificationRequest : object {
    private string _userData;
    private string _options;
    private int _timeout;
    public string Options { get; public set; }
    public int Timeout { get; public set; }
    public string UserData { get; public set; }
    public SqlNotificationRequest(string userData, string options, int timeout);
    public string get_Options();
    public void set_Options(string value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public string get_UserData();
    public void set_UserData(string value);
}
internal class Microsoft.Data.SqlClient._ColumnMapping : object {
    internal int _sourceColumnOrdinal;
    internal _SqlMetaData _metadata;
    internal _ColumnMapping(int columnId, _SqlMetaData metadata);
}
internal class Microsoft.Data.SqlClient._SqlMetaData : SqlMetaDataPriv {
    internal string column;
    internal string baseColumn;
    internal MultiPartTableName multiPartTableName;
    internal int ordinal;
    internal byte tableNum;
    internal byte op;
    internal ushort operand;
    private _SqlMetadataFlags flags;
    internal string serverName { get; }
    internal string catalogName { get; }
    internal string schemaName { get; }
    internal string tableName { get; }
    public byte Updatability { get; public set; }
    public bool IsReadOnly { get; }
    public bool IsDifferentName { get; public set; }
    public bool IsKey { get; public set; }
    public bool IsHidden { get; public set; }
    public bool IsExpression { get; public set; }
    public bool IsIdentity { get; public set; }
    public bool IsColumnSet { get; public set; }
    internal bool Is2008DateTimeType { get; }
    internal bool IsLargeUdt { get; }
    internal _SqlMetaData(int ordinal);
    private bool HasFlag(_SqlMetadataFlags flag);
    internal string get_serverName();
    internal string get_catalogName();
    internal string get_schemaName();
    internal string get_tableName();
    public byte get_Updatability();
    public void set_Updatability(byte value);
    public bool get_IsReadOnly();
    public bool get_IsDifferentName();
    public void set_IsDifferentName(bool value);
    public bool get_IsKey();
    public void set_IsKey(bool value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public bool get_IsExpression();
    public void set_IsExpression(bool value);
    public bool get_IsIdentity();
    public void set_IsIdentity(bool value);
    public bool get_IsColumnSet();
    public void set_IsColumnSet(bool value);
    private void Set(_SqlMetadataFlags flag, bool value);
    internal bool get_Is2008DateTimeType();
    internal bool get_IsLargeUdt();
    public object Clone();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Data.SqlClient._SqlMetaDataSet : object {
    internal SqlTceCipherInfoTable cekTable;
    internal ushort id;
    internal DataTable schemaTable;
    private _SqlMetaData[] _metaDataArray;
    internal ReadOnlyCollection`1<DbColumn> dbColumnSchema;
    private int _hiddenColumnCount;
    private Int32[] _visibleColumnMap;
    internal int Length { get; }
    internal int VisibleColumnCount { get; }
    internal _SqlMetaData Item { get; internal set; }
    internal _SqlMetaDataSet(int count, SqlTceCipherInfoTable cipherTable);
    internal _SqlMetaDataSet(int count);
    private _SqlMetaDataSet(_SqlMetaDataSet original);
    internal int get_Length();
    internal int get_VisibleColumnCount();
    internal _SqlMetaData get_Item(int index);
    internal void set_Item(int index, _SqlMetaData value);
    public int GetVisibleColumnIndex(int index);
    public _SqlMetaDataSet Clone();
    private void SetupHiddenColumns();
}
internal class Microsoft.Data.SqlClient._SqlMetaDataSetCollection : object {
    private List`1<_SqlMetaDataSet> _altMetaDataSetArray;
    internal _SqlMetaDataSet metaDataSet;
    internal void SetAltMetaData(_SqlMetaDataSet altMetaDataSet);
    internal _SqlMetaDataSet GetAltMetaData(int id);
    public object Clone();
}
internal class Microsoft.Data.SqlClient._SqlRPC : object {
    internal string rpcName;
    internal ushort ProcID;
    internal ushort options;
    internal SqlParameter[] systemParams;
    internal Byte[] systemParamOptions;
    internal int systemParamCount;
    internal SqlParameterCollection userParams;
    internal Int64[] userParamMap;
    internal int userParamCount;
    internal Nullable`1<int> recordsAffected;
    internal int cumulativeRecordsAffected;
    internal int errorsIndexStart;
    internal int errorsIndexEnd;
    internal SqlErrorCollection errors;
    internal int warningsIndexStart;
    internal int warningsIndexEnd;
    internal SqlErrorCollection warnings;
    internal bool needsFetchParameterEncryptionMetadata;
    internal SqlBatchCommand batchCommand;
    internal string GetCommandTextOrRpcName();
    internal SqlParameter GetParameterByIndex(int index, Byte& options);
}
internal abstract class Microsoft.Data.SqlClient.AAsyncBaseCallContext`2 : object {
    protected TOwner _owner;
    protected TaskCompletionSource`1<TTask> _source;
    protected bool _isDisposed;
    protected void Set(TOwner owner, TaskCompletionSource`1<TTask> source);
    protected void ClearCore();
    protected abstract virtual void DisposeCore();
    protected virtual void Clear();
    protected virtual void AfterCleared(TOwner owner);
    public void Dispose();
}
internal abstract class Microsoft.Data.SqlClient.AAsyncCallContext`3 : AAsyncBaseCallContext`2<TOwner, TTask> {
    protected TDisposable _disposable;
    protected AAsyncCallContext`3(TOwner owner, TaskCompletionSource`1<TTask> source, TDisposable disposable);
    protected void Set(TOwner owner, TaskCompletionSource`1<TTask> source, TDisposable disposable);
    protected virtual void DisposeCore();
}
internal class Microsoft.Data.SqlClient.ActiveDirectoryAuthentication : object {
    internal static string AdoClientId;
    internal static string MSALGetAccessTokenFunctionName;
}
public class Microsoft.Data.SqlClient.ActiveDirectoryAuthenticationProvider : SqlAuthenticationProvider {
    private static MemoryCache s_accountPwCache;
    private static ConcurrentDictionary`2<PublicClientAppKey, IPublicClientApplication> s_pcaMap;
    private static ConcurrentDictionary`2<TokenCredentialKey, TokenCredentialData> s_tokenCredentialMap;
    private static SemaphoreSlim s_pcaMapModifierSemaphore;
    private static SemaphoreSlim s_tokenCredentialMapModifierSemaphore;
    private static int s_accountPwCacheTtlInHours;
    private static string s_nativeClientRedirectUri;
    private static string s_defaultScopeSuffix;
    private string _type;
    private SqlClientLogger _logger;
    private Func`2<DeviceCodeResult, Task> _deviceCodeFlowCallback;
    private ICustomWebUi _customWebUI;
    private string _applicationClientId;
    public ActiveDirectoryAuthenticationProvider(string applicationClientId);
    public ActiveDirectoryAuthenticationProvider(Func`2<DeviceCodeResult, Task> deviceCodeFlowCallbackMethod, string applicationClientId);
    private static ActiveDirectoryAuthenticationProvider();
    public static void ClearUserTokenCache();
    public void SetDeviceCodeFlowCallback(Func`2<DeviceCodeResult, Task> deviceCodeFlowCallbackMethod);
    public void SetAcquireAuthorizationCodeAsyncCallback(Func`4<Uri, Uri, CancellationToken, Task`1<Uri>> acquireAuthorizationCodeAsyncCallback);
    public virtual bool IsSupported(SqlAuthenticationMethod authentication);
    public virtual void BeforeLoad(SqlAuthenticationMethod authentication);
    public virtual void BeforeUnload(SqlAuthenticationMethod authentication);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.ActiveDirectoryAuthenticationProvider/<AcquireTokenAsync>d__22")]
public virtual Task`1<SqlAuthenticationToken> AcquireTokenAsync(SqlAuthenticationParameters parameters);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.ActiveDirectoryAuthenticationProvider/<TryAcquireTokenSilent>d__23")]
private static Task`1<AuthenticationResult> TryAcquireTokenSilent(IPublicClientApplication app, SqlAuthenticationParameters parameters, String[] scopes, CancellationTokenSource cts);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.ActiveDirectoryAuthenticationProvider/<AcquireTokenInteractiveDeviceFlowAsync>d__24")]
private static Task`1<AuthenticationResult> AcquireTokenInteractiveDeviceFlowAsync(IPublicClientApplication app, String[] scopes, Guid connectionId, string userId, SqlAuthenticationMethod authenticationMethod, CancellationTokenSource cts, ICustomWebUi customWebUI, Func`2<DeviceCodeResult, Task> deviceCodeFlowCallback);
    private static Task DefaultDeviceFlowCallback(DeviceCodeResult result);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.ActiveDirectoryAuthenticationProvider/<GetPublicClientAppInstanceAsync>d__27")]
private Task`1<IPublicClientApplication> GetPublicClientAppInstanceAsync(PublicClientAppKey publicClientAppKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.ActiveDirectoryAuthenticationProvider/<GetTokenAsync>d__28")]
private static Task`1<AccessToken> GetTokenAsync(TokenCredentialKey tokenCredentialKey, string secret, TokenRequestContext tokenRequestContext, CancellationToken cancellationToken);
    private static string GetAccountPwCacheKey(SqlAuthenticationParameters parameters);
    private static Byte[] GetHash(string input);
    private static bool AreEqual(Byte[] a1, Byte[] a2);
    private IPublicClientApplication CreateClientAppInstance(PublicClientAppKey publicClientAppKey);
    private static TokenCredentialData CreateTokenCredentialInstance(TokenCredentialKey tokenCredentialKey, string secret);
}
internal class Microsoft.Data.SqlClient.ActiveDirectoryAuthenticationTimeoutRetryHelper : object {
    private ActiveDirectoryAuthenticationTimeoutRetryState _state;
    private SqlFedAuthToken _token;
    private string _typeName;
    private SqlClientLogger _sqlAuthLogger;
    public ActiveDirectoryAuthenticationTimeoutRetryState State { get; public set; }
    public SqlFedAuthToken CachedToken { get; public set; }
    public ActiveDirectoryAuthenticationTimeoutRetryState get_State();
    public void set_State(ActiveDirectoryAuthenticationTimeoutRetryState value);
    public SqlFedAuthToken get_CachedToken();
    public void set_CachedToken(SqlFedAuthToken value);
    public bool CanRetryWithSqlException(SqlException sqlex);
    private static bool IsConnectTimeoutError(SqlException sqlex);
    private static string GetTokenHash(SqlFedAuthToken token);
}
internal enum Microsoft.Data.SqlClient.ActiveDirectoryAuthenticationTimeoutRetryState : Enum {
    public int value__;
    public static ActiveDirectoryAuthenticationTimeoutRetryState NotStarted;
    public static ActiveDirectoryAuthenticationTimeoutRetryState Retrying;
    public static ActiveDirectoryAuthenticationTimeoutRetryState HasLoggedIn;
}
internal class Microsoft.Data.SqlClient.AppConfigManager : object {
    private static string TypeName;
    public static T FetchConfigurationSection(string name);
}
internal class Microsoft.Data.SqlClient.AppContextSwitchOverridesSection : ConfigurationSection {
    public static string Name;
    [ConfigurationPropertyAttribute("value")]
public string Value { get; public set; }
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
}
public enum Microsoft.Data.SqlClient.ApplicationIntent : Enum {
    public int value__;
    public static ApplicationIntent ReadWrite;
    public static ApplicationIntent ReadOnly;
}
internal static class Microsoft.Data.SqlClient.AssemblyRef : object {
    internal static string SystemDrawing;
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyFull;
    internal static string SystemDesign;
}
internal static class Microsoft.Data.SqlClient.AsyncHelper : object {
    internal static Task CreateContinuationTask(Task task, Action onSuccess, Action`1<Exception> onFailure);
    internal static Task CreateContinuationTaskWithState(Task task, object state, Action`1<object> onSuccess, Action`2<Exception, object> onFailure);
    internal static Task CreateContinuationTask(Task task, Action`2<T1, T2> onSuccess, T1 arg1, T2 arg2, SqlInternalConnectionTds connectionToDoom, Action`1<Exception> onFailure);
    internal static void ContinueTask(Task task, TaskCompletionSource`1<object> completion, Action onSuccess, Action`1<Exception> onFailure, Action onCancellation, Func`2<Exception, Exception> exceptionConverter);
    internal static void ContinueTaskWithState(Task task, TaskCompletionSource`1<object> completion, object state, Action`1<object> onSuccess, Action`2<Exception, object> onFailure, Action`1<object> onCancellation, Func`2<Exception, Exception> exceptionConverter);
    internal static void WaitForCompletion(Task task, int timeout, Action onTimeout, bool rethrowExceptions);
    internal static void SetTimeoutException(TaskCompletionSource`1<object> completion, int timeout, Func`1<Exception> onFailure, CancellationToken ctoken);
    internal static void SetTimeoutExceptionWithState(TaskCompletionSource`1<object> completion, int timeout, object state, Func`2<object, Exception> onFailure, CancellationToken cancellationToken);
}
internal class Microsoft.Data.SqlClient.AttestationInfo : object {
    [CompilerGeneratedAttribute]
private UInt32 <TotalSize>k__BackingField;
    [CompilerGeneratedAttribute]
private EnclavePublicKey <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private HealthReport <HealthReport>k__BackingField;
    [CompilerGeneratedAttribute]
private EnclaveReportPackage <EnclaveReportPackage>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private EnclaveDiffieHellmanInfo <EnclaveDHInfo>k__BackingField;
    public UInt32 TotalSize { get; public set; }
    public EnclavePublicKey Identity { get; public set; }
    public HealthReport HealthReport { get; public set; }
    public EnclaveReportPackage EnclaveReportPackage { get; public set; }
    public long SessionId { get; public set; }
    public EnclaveDiffieHellmanInfo EnclaveDHInfo { get; public set; }
    public AttestationInfo(Byte[] attestationInfo);
    [CompilerGeneratedAttribute]
public UInt32 get_TotalSize();
    [CompilerGeneratedAttribute]
public void set_TotalSize(UInt32 value);
    [CompilerGeneratedAttribute]
public EnclavePublicKey get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(EnclavePublicKey value);
    [CompilerGeneratedAttribute]
public HealthReport get_HealthReport();
    [CompilerGeneratedAttribute]
public void set_HealthReport(HealthReport value);
    [CompilerGeneratedAttribute]
public EnclaveReportPackage get_EnclaveReportPackage();
    [CompilerGeneratedAttribute]
public void set_EnclaveReportPackage(EnclaveReportPackage value);
    [CompilerGeneratedAttribute]
public long get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(long value);
    [CompilerGeneratedAttribute]
public EnclaveDiffieHellmanInfo get_EnclaveDHInfo();
    [CompilerGeneratedAttribute]
public void set_EnclaveDHInfo(EnclaveDiffieHellmanInfo value);
}
internal class Microsoft.Data.SqlClient.AzureAttestationEnclaveProvider : EnclaveProviderBase {
    private static int DiffieHellmanKeySize;
    private static int AzureBasedAttestationProtocolId;
    private static int SigningKeyRetryInSec;
    private static string AttestationUrlSuffix;
    private static MemoryCache OpenIdConnectConfigurationCache;
    private static AzureAttestationEnclaveProvider();
    internal virtual void GetEnclaveSession(EnclaveSessionParameters enclaveSessionParameters, bool generateCustomData, bool isRetry, SqlEnclaveSession& sqlEnclaveSession, Int64& counter, Byte[]& customData, Int32& customDataLength);
    internal virtual SqlEnclaveAttestationParameters GetAttestationParameters(string attestationUrl, Byte[] customData, int customDataLength);
    internal virtual void CreateEnclaveSession(Byte[] attestationInfo, ECDiffieHellman clientDHKey, EnclaveSessionParameters enclaveSessionParameters, Byte[] customData, int customDataLength, SqlEnclaveSession& sqlEnclaveSession, Int64& counter);
    internal virtual void InvalidateEnclaveSession(EnclaveSessionParameters enclaveSessionParameters, SqlEnclaveSession enclaveSessionToInvalidate);
    internal Byte[] PrepareAttestationParameters(string attestationUrl, Byte[] attestNonce, int attestNonceLength);
    private void VerifyAzureAttestationInfo(string attestationUrl, EnclaveType enclaveType, string attestationToken, EnclavePublicKey enclavePublicKey, Byte[] nonce);
    private static string GetInnerMostExceptionMessage(Exception exception);
    private OpenIdConnectConfiguration GetOpenIdConfigForSigningKeys(string url, bool forceUpdate);
    private string GetAttestationInstanceUrl(string attestationUrl);
    private static ICollection`1<string> GenerateListOfIssuers(string tokenIssuerUrl);
    private bool VerifyTokenSignature(string attestationToken, string tokenIssuerUrl, ICollection`1<SecurityKey> issuerSigningKeys, Boolean& isKeySigningExpired, String& exceptionMessage);
    private Byte[] ComputeSHA256(Byte[] data);
    private void ValidateAttestationClaims(EnclaveType enclaveType, string attestationToken, EnclavePublicKey enclavePublicKey, Byte[] nonce);
    private void ValidateClaim(Dictionary`2<string, string> claims, string claimName, Byte[] actualData);
    private Byte[] GetSharedSecret(EnclavePublicKey enclavePublicKey, Byte[] nonce, EnclaveType enclaveType, EnclaveDiffieHellmanInfo enclaveDHInfo, ECDiffieHellman clientDHKey);
}
internal static class Microsoft.Data.SqlClient.BitConverterCompatible : object {
    public static int SingleToInt32Bits(float value);
    public static float Int32BitsToSingle(int value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Data.SqlClient.BulkCopySimpleResultSet : object {
    private List`1<Result> _results;
    private Result _resultSet;
    private Int32[] _indexmap;
    internal Result Item { get; }
    internal Result get_Item(int idx);
    internal void SetMetaData(_SqlMetaDataSet metadata);
    internal Int32[] CreateIndexMap();
    internal Object[] CreateRowBuffer();
}
internal enum Microsoft.Data.SqlClient.CallbackType : Enum {
    public int value__;
    public static CallbackType Read;
    public static CallbackType Write;
}
internal class Microsoft.Data.SqlClient.ColumnEncryptionKeyInfo : object {
    internal int KeyId;
    internal int DatabaseId;
    internal Byte[] DecryptedKeyBytes;
    internal Byte[] KeyIdBytes;
    internal Byte[] DatabaseIdBytes;
    internal Byte[] KeyMetadataVersionBytes;
    private static string _decryptedKeyName;
    private static string _keyMetadataVersionName;
    private static string _className;
    private static string _bytePackageName;
    private static string _serializeToBufferMethodName;
    private static string _startOffsetName;
    internal ColumnEncryptionKeyInfo(Byte[] decryptedKey, int databaseId, Byte[] keyMetadataVersion, int keyid);
    private static ColumnEncryptionKeyInfo();
    internal int GetLengthForSerialization();
    internal int SerializeToBuffer(Byte[] bytePackage, int startOffset);
}
internal class Microsoft.Data.SqlClient.ColumnMasterKeyMetadataSignatureVerificationCache : object {
    private static int _cacheSize;
    private static int _cacheTrimThreshold;
    private static string _className;
    private static string _getSignatureVerificationResultMethodName;
    private static string _addSignatureVerificationResultMethodName;
    private static string _masterkeypathArgumentName;
    private static string _keyStoreNameArgumentName;
    private static string _signatureName;
    private static string _cacheLookupKeySeparator;
    private static ColumnMasterKeyMetadataSignatureVerificationCache _signatureVerificationCache;
    private MemoryCache _cache;
    private int _inTrim;
    internal static ColumnMasterKeyMetadataSignatureVerificationCache Instance { get; }
    private static ColumnMasterKeyMetadataSignatureVerificationCache();
    internal static ColumnMasterKeyMetadataSignatureVerificationCache get_Instance();
    internal Nullable`1<bool> GetSignatureVerificationResult(string keyStoreName, string masterKeyPath, bool allowEnclaveComputations, Byte[] signature);
    internal void AddSignatureVerificationResult(string keyStoreName, string masterKeyPath, bool allowEnclaveComputations, Byte[] signature, bool result);
    private void ValidateSignatureNotNullOrEmpty(Byte[] signature, string methodName);
    private void ValidateStringArgumentNotNullOrEmpty(string stringArgValue, string stringArgName, string methodName);
    private void TrimCacheIfNeeded();
    private string GetCacheLookupKey(string masterKeyPath, bool allowEnclaveComputations, Byte[] signature, string keyStoreName);
}
public class Microsoft.Data.SqlClient.DataClassification.ColumnSensitivity : object {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<SensitivityProperty> <SensitivityProperties>k__BackingField;
    public ReadOnlyCollection`1<SensitivityProperty> SensitivityProperties { get; private set; }
    public ColumnSensitivity(IList`1<SensitivityProperty> sensitivityProperties);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<SensitivityProperty> get_SensitivityProperties();
    [CompilerGeneratedAttribute]
private void set_SensitivityProperties(ReadOnlyCollection`1<SensitivityProperty> value);
}
public class Microsoft.Data.SqlClient.DataClassification.InformationType : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Name { get; private set; }
    public string Id { get; private set; }
    public InformationType(string name, string id);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
}
public class Microsoft.Data.SqlClient.DataClassification.Label : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Name { get; private set; }
    public string Id { get; private set; }
    public Label(string name, string id);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
}
public class Microsoft.Data.SqlClient.DataClassification.SensitivityClassification : object {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<Label> <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<InformationType> <InformationTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private SensitivityRank <SensitivityRank>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<ColumnSensitivity> <ColumnSensitivities>k__BackingField;
    public ReadOnlyCollection`1<Label> Labels { get; private set; }
    public ReadOnlyCollection`1<InformationType> InformationTypes { get; private set; }
    public SensitivityRank SensitivityRank { get; private set; }
    public ReadOnlyCollection`1<ColumnSensitivity> ColumnSensitivities { get; private set; }
    public SensitivityClassification(IList`1<Label> labels, IList`1<InformationType> informationTypes, IList`1<ColumnSensitivity> columnSensitivity, SensitivityRank sensitivityRank);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<Label> get_Labels();
    [CompilerGeneratedAttribute]
private void set_Labels(ReadOnlyCollection`1<Label> value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<InformationType> get_InformationTypes();
    [CompilerGeneratedAttribute]
private void set_InformationTypes(ReadOnlyCollection`1<InformationType> value);
    [CompilerGeneratedAttribute]
public SensitivityRank get_SensitivityRank();
    [CompilerGeneratedAttribute]
private void set_SensitivityRank(SensitivityRank value);
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<ColumnSensitivity> get_ColumnSensitivities();
    [CompilerGeneratedAttribute]
private void set_ColumnSensitivities(ReadOnlyCollection`1<ColumnSensitivity> value);
}
public class Microsoft.Data.SqlClient.DataClassification.SensitivityProperty : object {
    [CompilerGeneratedAttribute]
private Label <Label>k__BackingField;
    [CompilerGeneratedAttribute]
private InformationType <InformationType>k__BackingField;
    [CompilerGeneratedAttribute]
private SensitivityRank <SensitivityRank>k__BackingField;
    public Label Label { get; private set; }
    public InformationType InformationType { get; private set; }
    public SensitivityRank SensitivityRank { get; private set; }
    public SensitivityProperty(Label label, InformationType informationType, SensitivityRank sensitivityRank);
    [CompilerGeneratedAttribute]
public Label get_Label();
    [CompilerGeneratedAttribute]
private void set_Label(Label value);
    [CompilerGeneratedAttribute]
public InformationType get_InformationType();
    [CompilerGeneratedAttribute]
private void set_InformationType(InformationType value);
    [CompilerGeneratedAttribute]
public SensitivityRank get_SensitivityRank();
    [CompilerGeneratedAttribute]
private void set_SensitivityRank(SensitivityRank value);
}
public enum Microsoft.Data.SqlClient.DataClassification.SensitivityRank : Enum {
    public int value__;
    public static SensitivityRank NOT_DEFINED;
    public static SensitivityRank NONE;
    public static SensitivityRank LOW;
    public static SensitivityRank MEDIUM;
    public static SensitivityRank HIGH;
    public static SensitivityRank CRITICAL;
}
internal abstract class Microsoft.Data.SqlClient.DataFeed : object {
}
internal enum Microsoft.Data.SqlClient.DescribeParameterEncryptionResultSet1 : Enum {
    public int value__;
    public static DescribeParameterEncryptionResultSet1 KeyOrdinal;
    public static DescribeParameterEncryptionResultSet1 DbId;
    public static DescribeParameterEncryptionResultSet1 KeyId;
    public static DescribeParameterEncryptionResultSet1 KeyVersion;
    public static DescribeParameterEncryptionResultSet1 KeyMdVersion;
    public static DescribeParameterEncryptionResultSet1 EncryptedKey;
    public static DescribeParameterEncryptionResultSet1 ProviderName;
    public static DescribeParameterEncryptionResultSet1 KeyPath;
    public static DescribeParameterEncryptionResultSet1 KeyEncryptionAlgorithm;
    public static DescribeParameterEncryptionResultSet1 IsRequestedByEnclave;
    public static DescribeParameterEncryptionResultSet1 KeySignature;
}
internal enum Microsoft.Data.SqlClient.DescribeParameterEncryptionResultSet2 : Enum {
    public int value__;
    public static DescribeParameterEncryptionResultSet2 ParameterOrdinal;
    public static DescribeParameterEncryptionResultSet2 ParameterName;
    public static DescribeParameterEncryptionResultSet2 ColumnEncryptionAlgorithm;
    public static DescribeParameterEncryptionResultSet2 ColumnEncryptionType;
    public static DescribeParameterEncryptionResultSet2 ColumnEncryptionKeyOrdinal;
    public static DescribeParameterEncryptionResultSet2 NormalizationRuleVersion;
}
internal enum Microsoft.Data.SqlClient.DescribeParameterEncryptionResultSet3 : Enum {
    public int value__;
    public static DescribeParameterEncryptionResultSet3 AttestationInfo;
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class Microsoft.Data.SqlClient.DiagnosticScope : ValueType {
    private static int CommandOperation;
    private static int ConnectionOpenOperation;
    private SqlDiagnosticListener _diagnostics;
    private int _operation;
    private string _operationName;
    private Guid _operationId;
    private object _context1;
    private object _context2;
    private Exception _exception;
    private DiagnosticScope(SqlDiagnosticListener diagnostics, int operation, Guid operationsId, string operationName, object context1, object context2);
    public void Dispose();
    public void SetException(Exception ex);
    public static DiagnosticScope CreateCommandScope(SqlDiagnosticListener diagnostics, SqlCommand command, SqlTransaction transaction, string operationName);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class Microsoft.Data.SqlClient.DiagnosticTransactionScope : ValueType {
    public static int TransactionCommit;
    public static int TransactionRollback;
    private SqlDiagnosticListener _diagnostics;
    private int _operation;
    private Guid _operationId;
    private string _operationName;
    private IsolationLevel _isolationLevel;
    private SqlConnection _connection;
    private SqlInternalTransaction _transaction;
    private string _transactionName;
    private Exception _exception;
    public DiagnosticTransactionScope(SqlDiagnosticListener diagnostics, int operation, Guid operationId, string operationName, IsolationLevel isolationLevel, SqlConnection connection, SqlInternalTransaction transaction, string transactionName);
    public void Dispose();
    public void SetException(Exception ex);
    public static DiagnosticTransactionScope CreateTransactionCommitScope(SqlDiagnosticListener diagnostics, IsolationLevel isolationLevel, SqlConnection connection, SqlInternalTransaction transaction, string operationName);
    public static DiagnosticTransactionScope CreateTransactionRollbackScope(SqlDiagnosticListener diagnostics, IsolationLevel isolationLevel, SqlConnection connection, SqlInternalTransaction transaction, string transactionName, string operationName);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class Microsoft.Data.SqlClient.DisposableTemporaryOnStack`1 : ValueType {
    private T _value;
    private bool _hasValue;
    public void Set(T value);
    public T Take();
    public void Dispose();
}
internal class Microsoft.Data.SqlClient.EnclaveDelegate : object {
    private static SqlAeadAes256CbcHmac256Factory s_sqlAeadAes256CbcHmac256Factory;
    private static EnclaveDelegate s_enclaveDelegate;
    private object _lock;
    private static ConcurrentDictionary`2<SqlConnectionAttestationProtocol, SqlColumnEncryptionEnclaveProvider> s_enclaveProviders;
    public static EnclaveDelegate Instance { get; }
    private static EnclaveDelegate();
    public static EnclaveDelegate get_Instance();
    private Byte[] GetUintBytes(string enclaveType, int intValue, string variableName);
    private List`1<ColumnEncryptionKeyInfo> GetDecryptedKeysToBeSentToEnclave(ConcurrentDictionary`2<int, SqlTceCipherInfoEntry> keysTobeSentToEnclave, string serverName, SqlConnection connection, SqlCommand command);
    private Byte[] GenerateBytePackageForKeys(long enclaveSessionCounter, Byte[] queryStringHashBytes, List`1<ColumnEncryptionKeyInfo> keys);
    private Byte[] EncryptBytePackage(Byte[] bytePackage, Byte[] sessionKey, string serverName);
    private Byte[] CombineByteArrays(Byte[] arr1, Byte[] arr2);
    private Byte[] CombineByteArrays(Byte[] arr1, Byte[] arr2, Byte[] arr3, Byte[] arr4, Byte[] arr5);
    private Byte[] ComputeQueryStringHash(string queryString);
    internal void CreateEnclaveSession(SqlConnectionAttestationProtocol attestationProtocol, string enclaveType, EnclaveSessionParameters enclaveSessionParameters, Byte[] attestationInfo, SqlEnclaveAttestationParameters attestationParameters, Byte[] customData, int customDataLength, bool isRetry);
    internal void GetEnclaveSession(SqlConnectionAttestationProtocol attestationProtocol, string enclaveType, EnclaveSessionParameters enclaveSessionParameters, bool generateCustomData, bool isRetry, SqlEnclaveSession& sqlEnclaveSession, Byte[]& customData, Int32& customDataLength);
    private void GetEnclaveSession(SqlConnectionAttestationProtocol attestationProtocol, string enclaveType, EnclaveSessionParameters enclaveSessionParameters, bool generateCustomData, bool isRetry, SqlEnclaveSession& sqlEnclaveSession, Int64& counter, Byte[]& customData, Int32& customDataLength, bool throwIfNull);
    internal void InvalidateEnclaveSession(SqlConnectionAttestationProtocol attestationProtocol, string enclaveType, EnclaveSessionParameters enclaveSessionParameters, SqlEnclaveSession enclaveSession);
    private SqlColumnEncryptionEnclaveProvider GetEnclaveProvider(SqlConnectionAttestationProtocol attestationProtocol, string enclaveType);
    internal EnclavePackage GenerateEnclavePackage(SqlConnectionAttestationProtocol attestationProtocol, ConcurrentDictionary`2<int, SqlTceCipherInfoEntry> keysToBeSentToEnclave, string queryText, string enclaveType, EnclaveSessionParameters enclaveSessionParameters, SqlConnection connection, SqlCommand command);
    internal SqlEnclaveAttestationParameters GetAttestationParameters(SqlConnectionAttestationProtocol attestationProtocol, string enclaveType, string attestationUrl, Byte[] customData, int customDataLength);
    internal Byte[] GetSerializedAttestationParameters(SqlEnclaveAttestationParameters sqlEnclaveAttestationParameters, string enclaveType);
}
internal class Microsoft.Data.SqlClient.EnclaveDiffieHellmanInfo : object {
    [CompilerGeneratedAttribute]
private Byte[] <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PublicKeySignature>k__BackingField;
    public int Size { get; }
    public Byte[] PublicKey { get; private set; }
    public Byte[] PublicKeySignature { get; private set; }
    public EnclaveDiffieHellmanInfo(Byte[] payload, int offset);
    public int get_Size();
    [CompilerGeneratedAttribute]
public Byte[] get_PublicKey();
    [CompilerGeneratedAttribute]
private void set_PublicKey(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_PublicKeySignature();
    [CompilerGeneratedAttribute]
private void set_PublicKeySignature(Byte[] value);
}
internal static class Microsoft.Data.SqlClient.EnclaveHelpers : object {
    public static Byte[] TakeBytesAndAdvance(Byte[] input, Int32& offset, int count);
}
internal class Microsoft.Data.SqlClient.EnclaveIdentity : object {
    private static int ImageEnclaveLongIdLength;
    private static int ImageEnclaveShortIdLength;
    public Byte[] OwnerId;
    public Byte[] UniqueId;
    public Byte[] AuthorId;
    public Byte[] FamilyId;
    public Byte[] ImageId;
    [CompilerGeneratedAttribute]
private UInt32 <EnclaveSvn>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SecureKernelSvn>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <PlatformSvn>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SigningLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Reserved>k__BackingField;
    public UInt32 EnclaveSvn { get; public set; }
    public UInt32 SecureKernelSvn { get; public set; }
    public UInt32 PlatformSvn { get; public set; }
    public UInt32 Flags { get; public set; }
    public UInt32 SigningLevel { get; public set; }
    public UInt32 Reserved { get; public set; }
    public static int SizeInPayload { get; }
    public EnclaveIdentity(Byte[] payload);
    [CompilerGeneratedAttribute]
public UInt32 get_EnclaveSvn();
    [CompilerGeneratedAttribute]
public void set_EnclaveSvn(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_SecureKernelSvn();
    [CompilerGeneratedAttribute]
public void set_SecureKernelSvn(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_PlatformSvn();
    [CompilerGeneratedAttribute]
public void set_PlatformSvn(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_SigningLevel();
    [CompilerGeneratedAttribute]
public void set_SigningLevel(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Reserved();
    [CompilerGeneratedAttribute]
public void set_Reserved(UInt32 value);
    public static int get_SizeInPayload();
}
internal enum Microsoft.Data.SqlClient.EnclaveIdentityFlags : Enum {
    public int value__;
    public static EnclaveIdentityFlags ENCLAVE_FLAG_NONE;
    public static EnclaveIdentityFlags ENCLAVE_FLAG_FULL_DEBUG_ENABLED;
    public static EnclaveIdentityFlags ENCLAVE_FLAG_DYNAMIC_DEBUG_ENABLED;
    public static EnclaveIdentityFlags ENCLAVE_FLAG_DYNAMIC_DEBUG_ACTIVE;
}
internal class Microsoft.Data.SqlClient.EnclavePackage : object {
    [CompilerGeneratedAttribute]
private SqlEnclaveSession <EnclaveSession>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <EnclavePackageBytes>k__BackingField;
    internal SqlEnclaveSession EnclaveSession { get; }
    internal Byte[] EnclavePackageBytes { get; }
    internal EnclavePackage(Byte[] enclavePackageBytes, SqlEnclaveSession enclaveSession);
    [CompilerGeneratedAttribute]
internal SqlEnclaveSession get_EnclaveSession();
    [CompilerGeneratedAttribute]
internal Byte[] get_EnclavePackageBytes();
}
internal abstract class Microsoft.Data.SqlClient.EnclaveProviderBase : SqlColumnEncryptionEnclaveProvider {
    private static int NonceSize;
    private static int ThreadRetryCacheTimeoutInMinutes;
    private static int LockTimeoutMaxInMilliseconds;
    private static EnclaveSessionCache SessionCache;
    private static AutoResetEvent sessionLockEvent;
    private static int lockTimeoutInMilliseconds;
    private static bool isSessionLockAcquired;
    private static object lockUpdateSessionLock;
    protected static MemoryCache ThreadRetryCache;
    private static EnclaveProviderBase();
    protected void GetEnclaveSessionHelper(EnclaveSessionParameters enclaveSessionParameters, bool shouldGenerateNonce, bool isRetry, SqlEnclaveSession& sqlEnclaveSession, Int64& counter, Byte[]& customData, Int32& customDataLength);
    protected void UpdateEnclaveSessionLockStatus(SqlEnclaveSession sqlEnclaveSession);
    protected void InvalidateEnclaveSessionHelper(EnclaveSessionParameters enclaveSessionParameters, SqlEnclaveSession enclaveSessionToInvalidate);
    protected SqlEnclaveSession GetEnclaveSessionFromCache(EnclaveSessionParameters enclaveSessionParameters, Int64& counter);
    protected SqlEnclaveSession AddEnclaveSessionToCache(EnclaveSessionParameters enclaveSessionParameters, Byte[] sharedSecret, long sessionId, Int64& counter);
}
internal class Microsoft.Data.SqlClient.EnclavePublicKey : object {
    [CompilerGeneratedAttribute]
private Byte[] <PublicKey>k__BackingField;
    public Byte[] PublicKey { get; public set; }
    public EnclavePublicKey(Byte[] payload);
    [CompilerGeneratedAttribute]
public Byte[] get_PublicKey();
    [CompilerGeneratedAttribute]
public void set_PublicKey(Byte[] value);
}
internal class Microsoft.Data.SqlClient.EnclaveReport : object {
    private static int EnclaveDataLength;
    [CompilerGeneratedAttribute]
private UInt32 <ReportSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ReportVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <EnclaveData>k__BackingField;
    [CompilerGeneratedAttribute]
private EnclaveIdentity <Identity>k__BackingField;
    public UInt32 ReportSize { get; public set; }
    public UInt32 ReportVersion { get; public set; }
    public Byte[] EnclaveData { get; public set; }
    public EnclaveIdentity Identity { get; public set; }
    public static int SizeInPayload { get; }
    public EnclaveReport(Byte[] payload);
    [CompilerGeneratedAttribute]
public UInt32 get_ReportSize();
    [CompilerGeneratedAttribute]
public void set_ReportSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ReportVersion();
    [CompilerGeneratedAttribute]
public void set_ReportVersion(UInt32 value);
    [CompilerGeneratedAttribute]
public Byte[] get_EnclaveData();
    [CompilerGeneratedAttribute]
public void set_EnclaveData(Byte[] value);
    [CompilerGeneratedAttribute]
public EnclaveIdentity get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(EnclaveIdentity value);
    public static int get_SizeInPayload();
}
internal class Microsoft.Data.SqlClient.EnclaveReportModule : object {
    private static int ImageEnclaveLongIdLength;
    private static int ImageEnclaveShortIdLength;
    [CompilerGeneratedAttribute]
private EnclaveReportModuleHeader <Header>k__BackingField;
    public Byte[] UniqueId;
    public Byte[] AuthorId;
    public Byte[] FamilyId;
    public Byte[] ImageId;
    [CompilerGeneratedAttribute]
private UInt32 <Svn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    public EnclaveReportModuleHeader Header { get; public set; }
    public UInt32 Svn { get; public set; }
    public string ModuleName { get; public set; }
    public EnclaveReportModule(Byte[] payload);
    [CompilerGeneratedAttribute]
public EnclaveReportModuleHeader get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(EnclaveReportModuleHeader value);
    [CompilerGeneratedAttribute]
public UInt32 get_Svn();
    [CompilerGeneratedAttribute]
public void set_Svn(UInt32 value);
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
public void set_ModuleName(string value);
    public int GetSizeInPayload();
}
internal class Microsoft.Data.SqlClient.EnclaveReportModuleHeader : object {
    [CompilerGeneratedAttribute]
private UInt32 <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <ModuleSize>k__BackingField;
    public UInt32 DataType { get; public set; }
    public UInt32 ModuleSize { get; public set; }
    public static int SizeInPayload { get; }
    public EnclaveReportModuleHeader(Byte[] payload);
    [CompilerGeneratedAttribute]
public UInt32 get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_ModuleSize();
    [CompilerGeneratedAttribute]
public void set_ModuleSize(UInt32 value);
    public static int get_SizeInPayload();
}
internal class Microsoft.Data.SqlClient.EnclaveReportPackage : object {
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private EnclaveReportPackageHeader <PackageHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private EnclaveReport <Report>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<EnclaveReportModule> <Modules>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ReportAsBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <SignatureBlob>k__BackingField;
    private int Size { get; private set; }
    public EnclaveReportPackageHeader PackageHeader { get; public set; }
    public EnclaveReport Report { get; public set; }
    public List`1<EnclaveReportModule> Modules { get; public set; }
    public Byte[] ReportAsBytes { get; public set; }
    public Byte[] SignatureBlob { get; public set; }
    public EnclaveReportPackage(Byte[] payload);
    [CompilerGeneratedAttribute]
private int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [CompilerGeneratedAttribute]
public EnclaveReportPackageHeader get_PackageHeader();
    [CompilerGeneratedAttribute]
public void set_PackageHeader(EnclaveReportPackageHeader value);
    [CompilerGeneratedAttribute]
public EnclaveReport get_Report();
    [CompilerGeneratedAttribute]
public void set_Report(EnclaveReport value);
    [CompilerGeneratedAttribute]
public List`1<EnclaveReportModule> get_Modules();
    [CompilerGeneratedAttribute]
public void set_Modules(List`1<EnclaveReportModule> value);
    [CompilerGeneratedAttribute]
public Byte[] get_ReportAsBytes();
    [CompilerGeneratedAttribute]
public void set_ReportAsBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_SignatureBlob();
    [CompilerGeneratedAttribute]
public void set_SignatureBlob(Byte[] value);
    public int GetSizeInPayload();
}
internal class Microsoft.Data.SqlClient.EnclaveReportPackageHeader : object {
    [CompilerGeneratedAttribute]
private UInt32 <PackageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SignatureScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SignedStatementSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <SignatureSize>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Reserved>k__BackingField;
    public UInt32 PackageSize { get; public set; }
    public UInt32 Version { get; public set; }
    public UInt32 SignatureScheme { get; public set; }
    public UInt32 SignedStatementSize { get; public set; }
    public UInt32 SignatureSize { get; public set; }
    public UInt32 Reserved { get; public set; }
    public static int SizeInPayload { get; }
    public EnclaveReportPackageHeader(Byte[] payload);
    [CompilerGeneratedAttribute]
public UInt32 get_PackageSize();
    [CompilerGeneratedAttribute]
public void set_PackageSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_SignatureScheme();
    [CompilerGeneratedAttribute]
public void set_SignatureScheme(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_SignedStatementSize();
    [CompilerGeneratedAttribute]
public void set_SignedStatementSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_SignatureSize();
    [CompilerGeneratedAttribute]
public void set_SignatureSize(UInt32 value);
    [CompilerGeneratedAttribute]
public UInt32 get_Reserved();
    [CompilerGeneratedAttribute]
public void set_Reserved(UInt32 value);
    public static int get_SizeInPayload();
}
internal class Microsoft.Data.SqlClient.EnclaveSessionCache : object {
    private MemoryCache enclaveMemoryCache;
    private object enclaveCacheLock;
    private long _counter;
    private static int enclaveCacheTimeOutInHours;
    private static EnclaveSessionCache();
    internal SqlEnclaveSession GetEnclaveSession(EnclaveSessionParameters enclaveSessionParameters, Int64& counter);
    internal void InvalidateSession(EnclaveSessionParameters enclaveSessionParameters, SqlEnclaveSession enclaveSessionToInvalidate);
    internal SqlEnclaveSession CreateSession(EnclaveSessionParameters enclaveSessionParameters, Byte[] sharedSecret, long sessionId, Int64& counter);
    private string GenerateCacheKey(EnclaveSessionParameters enclaveSessionParameters);
}
internal class Microsoft.Data.SqlClient.EnclaveSessionParameters : object {
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AttestationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    internal string ServerName { get; internal set; }
    internal string AttestationUrl { get; internal set; }
    internal string Database { get; internal set; }
    internal EnclaveSessionParameters(string serverName, string attestationUrl, string database);
    [CompilerGeneratedAttribute]
internal string get_ServerName();
    [CompilerGeneratedAttribute]
internal void set_ServerName(string value);
    [CompilerGeneratedAttribute]
internal string get_AttestationUrl();
    [CompilerGeneratedAttribute]
internal void set_AttestationUrl(string value);
    [CompilerGeneratedAttribute]
internal string get_Database();
    [CompilerGeneratedAttribute]
internal void set_Database(string value);
}
internal enum Microsoft.Data.SqlClient.EnclaveType : Enum {
    public int value__;
    public static EnclaveType None;
    public static EnclaveType Vbs;
    public static EnclaveType Sgx;
}
internal enum Microsoft.Data.SqlClient.EncryptionOptions : Enum {
    public int value__;
    public static EncryptionOptions OFF;
    public static EncryptionOptions ON;
    public static EncryptionOptions NOT_SUP;
    public static EncryptionOptions REQ;
    public static EncryptionOptions LOGIN;
}
internal static class Microsoft.Data.SqlClient.EventType : object {
    public static string INFO;
    public static string ERR;
}
internal class Microsoft.Data.SqlClient.FederatedAuthenticationFeatureExtensionData : object {
    internal FedAuthLibrary libraryType;
    internal bool fedAuthRequiredPreLoginResponse;
    internal SqlAuthenticationMethod authentication;
    internal Byte[] accessToken;
}
internal class Microsoft.Data.SqlClient.HealthReport : object {
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    private int Size { get; private set; }
    public X509Certificate2 Certificate { get; public set; }
    public HealthReport(Byte[] payload);
    [CompilerGeneratedAttribute]
private int get_Size();
    [CompilerGeneratedAttribute]
private void set_Size(int value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(X509Certificate2 value);
    public int GetSizeInPayload();
}
internal class Microsoft.Data.SqlClient.HostGuardianServiceEnclaveProvider : VirtualizationBasedSecurityEnclaveProviderBase {
    private static HttpClient s_client;
    private static string AttestationUrlSuffix;
    [CompilerGeneratedAttribute]
private UInt32 <MaxNumRetries>k__BackingField;
    private int enclaveRetrySleepInSeconds;
    public UInt32 MaxNumRetries { get; public set; }
    public int EnclaveRetrySleepInSeconds { get; public set; }
    private static HostGuardianServiceEnclaveProvider();
    [CompilerGeneratedAttribute]
public UInt32 get_MaxNumRetries();
    [CompilerGeneratedAttribute]
public void set_MaxNumRetries(UInt32 value);
    public int get_EnclaveRetrySleepInSeconds();
    public void set_EnclaveRetrySleepInSeconds(int value);
    protected virtual string GetAttestationUrl(string attestationUrl);
    protected virtual Byte[] MakeRequest(string url);
}
internal interface Microsoft.Data.SqlClient.IAppContextSwitchOverridesSection {
    public string Value { get; public set; }
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
}
internal interface Microsoft.Data.SqlClient.ISqlConfigurableRetryCommandSection {
    public string AuthorizedSqlCondition { get; public set; }
    public abstract virtual string get_AuthorizedSqlCondition();
    public abstract virtual void set_AuthorizedSqlCondition(string value);
}
internal interface Microsoft.Data.SqlClient.ISqlConfigurableRetryConnectionSection {
    public TimeSpan DeltaTime { get; public set; }
    public TimeSpan MaxTimeInterval { get; public set; }
    public TimeSpan MinTimeInterval { get; public set; }
    public int NumberOfTries { get; public set; }
    public string RetryLogicType { get; public set; }
    public string RetryMethod { get; public set; }
    public string TransientErrors { get; public set; }
    public abstract virtual TimeSpan get_DeltaTime();
    public abstract virtual void set_DeltaTime(TimeSpan value);
    public abstract virtual TimeSpan get_MaxTimeInterval();
    public abstract virtual void set_MaxTimeInterval(TimeSpan value);
    public abstract virtual TimeSpan get_MinTimeInterval();
    public abstract virtual void set_MinTimeInterval(TimeSpan value);
    public abstract virtual int get_NumberOfTries();
    public abstract virtual void set_NumberOfTries(int value);
    public abstract virtual string get_RetryLogicType();
    public abstract virtual void set_RetryLogicType(string value);
    public abstract virtual string get_RetryMethod();
    public abstract virtual void set_RetryMethod(string value);
    public abstract virtual string get_TransientErrors();
    public abstract virtual void set_TransientErrors(string value);
}
internal class Microsoft.Data.SqlClient.KeyConverter : object {
    internal static Byte[] GetECDiffieHellmanPublicKeyBlob(ECDiffieHellman ecDiffieHellman);
    internal static RSA CreateRSAFromPublicKeyBlob(Byte[] keyBlob);
    internal static ECDiffieHellman CreateECDiffieHellmanFromPublicKeyBlob(Byte[] keyBlob);
    internal static ECDiffieHellman CreateECDiffieHellman(int keySize);
    internal static Byte[] DeriveKey(ECDiffieHellman ecd, ECDiffieHellmanPublicKey publicKey);
    internal static RSA GetRSAFromCertificate(X509Certificate2 certificate);
}
internal class Microsoft.Data.SqlClient.LastIOTimer : object {
    internal long _value;
}
internal static class Microsoft.Data.SqlClient.LocalAppContextSwitches : object {
    internal static string MakeReadAsyncBlockingString;
    internal static string LegacyRowVersionNullString;
    internal static string SuppressInsecureTLSWarningString;
    internal static string UseMinimumLoginTimeoutString;
    private static Tristate s_legacyRowVersionNullBehavior;
    private static Tristate s_suppressInsecureTLSWarning;
    private static Tristate s_makeReadAsyncBlocking;
    private static Tristate s_useMinimumLoginTimeout;
    public static bool SuppressInsecureTLSWarning { get; }
    public static bool LegacyRowVersionNullBehavior { get; }
    public static bool MakeReadAsyncBlocking { get; }
    public static bool UseMinimumLoginTimeout { get; }
    private static LocalAppContextSwitches();
    public static bool get_SuppressInsecureTLSWarning();
    public static bool get_LegacyRowVersionNullBehavior();
    public static bool get_MakeReadAsyncBlocking();
    public static bool get_UseMinimumLoginTimeout();
}
internal class Microsoft.Data.SqlClient.MetaType : object {
    [DynamicallyAccessedMembersAttribute("544")]
internal Type ClassType;
    [DynamicallyAccessedMembersAttribute("544")]
internal Type SqlType;
    internal int FixedLength;
    internal bool IsFixed;
    internal bool IsLong;
    internal bool IsPlp;
    internal byte Precision;
    internal byte Scale;
    internal byte TDSType;
    internal byte NullableType;
    internal string TypeName;
    internal SqlDbType SqlDbType;
    internal DbType DbType;
    internal byte PropBytes;
    internal bool IsAnsiType;
    internal bool IsBinType;
    internal bool IsCharType;
    internal bool IsNCharType;
    internal bool IsSizeInCharacters;
    internal bool Is2008Type;
    internal bool IsVarTime;
    internal bool Is70Supported;
    internal bool Is80Supported;
    internal bool Is90Supported;
    internal bool Is100Supported;
    private static MetaType s_metaBigInt;
    private static MetaType s_metaFloat;
    private static MetaType s_metaReal;
    private static MetaType s_metaBinary;
    private static MetaType s_metaTimestamp;
    internal static MetaType MetaVarBinary;
    internal static MetaType MetaMaxVarBinary;
    private static MetaType s_metaSmallVarBinary;
    internal static MetaType MetaImage;
    private static MetaType s_metaBit;
    private static MetaType s_metaTinyInt;
    private static MetaType s_metaSmallInt;
    private static MetaType s_metaInt;
    private static MetaType s_metaChar;
    private static MetaType s_metaVarChar;
    internal static MetaType MetaMaxVarChar;
    internal static MetaType MetaText;
    private static MetaType s_metaNChar;
    internal static MetaType MetaNVarChar;
    internal static MetaType MetaMaxNVarChar;
    internal static MetaType MetaNText;
    internal static MetaType MetaDecimal;
    internal static MetaType MetaXml;
    private static MetaType s_metaDateTime;
    private static MetaType s_metaSmallDateTime;
    private static MetaType s_metaMoney;
    private static MetaType s_metaSmallMoney;
    private static MetaType s_metaUniqueId;
    private static MetaType s_metaVariant;
    internal static MetaType MetaUdt;
    private static MetaType s_metaMaxUdt;
    private static MetaType s_metaTable;
    private static MetaType s_metaSUDT;
    private static MetaType s_metaDate;
    internal static MetaType MetaTime;
    private static MetaType s_metaDateTime2;
    internal static MetaType MetaDateTimeOffset;
    public int TypeId { get; }
    public MetaType(byte precision, byte scale, int fixedLength, bool isFixed, bool isLong, bool isPlp, byte tdsType, byte nullableTdsType, string typeName, Type classType, Type sqlType, SqlDbType sqldbType, DbType dbType, byte propBytes);
    private static MetaType();
    public int get_TypeId();
    private static bool _IsAnsiType(SqlDbType type);
    private static bool _IsSizeInCharacters(SqlDbType type);
    private static bool _IsCharType(SqlDbType type);
    private static bool _IsNCharType(SqlDbType type);
    private static bool _IsBinType(SqlDbType type);
    private static bool _Is70Supported(SqlDbType type);
    private static bool _Is80Supported(SqlDbType type);
    private static bool _Is90Supported(SqlDbType type);
    private static bool _Is100Supported(SqlDbType type);
    private static bool _Is2008Type(SqlDbType type);
    internal static bool _IsVarTime(SqlDbType type);
    internal static MetaType GetMetaTypeFromSqlDbType(SqlDbType target, bool isMultiValued);
    internal static MetaType GetMetaTypeFromDbType(DbType target);
    internal static MetaType GetMaxMetaTypeFromMetaType(MetaType mt);
    internal static MetaType GetMetaTypeFromType(Type dataType);
    internal static MetaType GetMetaTypeFromValue(object value, bool streamAllowed);
    private static MetaType GetMetaTypeFromValue(Type dataType, object value, bool inferLen, bool streamAllowed);
    internal static object GetNullSqlValue(Type sqlType);
    internal static MetaType PromoteStringType(string s);
    internal static object GetComValueFromSqlVariant(object sqlVal);
    [ConditionalAttribute("DEBUG")]
private static void AssertIsUserDefinedTypeInstance(object sqlValue, string failedAssertMessage);
    internal static object GetSqlValueFromComVariant(object comVal);
    internal static SqlDbType GetSqlDbTypeFromOleDbType(short dbType, string typeName);
    internal static MetaType GetSqlDataType(int tdsType, UInt32 userType, int length);
    internal static MetaType GetDefaultMetaType();
    internal static string GetStringFromXml(XmlReader xmlreader);
    public static TdsDateTime FromDateTime(DateTime dateTime, byte cb);
    public static DateTime ToDateTime(int sqlDays, int sqlTime, int length);
    internal static int GetTimeSizeFromScale(byte scale);
}
internal class Microsoft.Data.SqlClient.MultiPartTableName : ValueType {
    private string _multipartName;
    private string _serverName;
    private string _catalogName;
    private string _schemaName;
    private string _tableName;
    internal static MultiPartTableName Null;
    internal string ServerName { get; internal set; }
    internal string CatalogName { get; internal set; }
    internal string SchemaName { get; internal set; }
    internal string TableName { get; internal set; }
    internal MultiPartTableName(String[] parts);
    internal MultiPartTableName(string multipartName);
    private static MultiPartTableName();
    internal string get_ServerName();
    internal void set_ServerName(string value);
    internal string get_CatalogName();
    internal void set_CatalogName(string value);
    internal string get_SchemaName();
    internal void set_SchemaName(string value);
    internal string get_TableName();
    internal void set_TableName(string value);
    private void ParseMultipartName();
}
internal class Microsoft.Data.SqlClient.NoneAttestationEnclaveProvider : EnclaveProviderBase {
    private static int EnclaveSessionHandleSize;
    private static int DiffieHellmanKeySize;
    private static int NoneAttestationProtocolId;
    private static NoneAttestationEnclaveProvider();
    internal virtual void GetEnclaveSession(EnclaveSessionParameters enclaveSessionParameters, bool generateCustomData, bool isRetry, SqlEnclaveSession& sqlEnclaveSession, Int64& counter, Byte[]& customData, Int32& customDataLength);
    internal virtual SqlEnclaveAttestationParameters GetAttestationParameters(string attestationUrl, Byte[] customData, int customDataLength);
    internal virtual void CreateEnclaveSession(Byte[] attestationInfo, ECDiffieHellman clientDHKey, EnclaveSessionParameters enclaveSessionParameters, Byte[] customData, int customDataLength, SqlEnclaveSession& sqlEnclaveSession, Int64& counter);
    internal virtual void InvalidateEnclaveSession(EnclaveSessionParameters enclaveSessionParameters, SqlEnclaveSession enclaveSessionToInvalidate);
}
public class Microsoft.Data.SqlClient.OnChangeEventHandler : MulticastDelegate {
    public OnChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlNotificationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlNotificationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
internal class Microsoft.Data.SqlClient.PacketHandle : ValueType {
    public static int NativePointerType;
    public static int NativePacketType;
    public static int ManagedPacketType;
    public IntPtr NativePointer;
    public SNIPacket NativePacket;
    public SNIPacket ManagedPacket;
    public int Type;
    private PacketHandle(IntPtr nativePointer, SNIPacket nativePacket, SNIPacket managedPacket, int type);
    public static PacketHandle FromManagedPacket(SNIPacket managedPacket);
    public static PacketHandle FromNativePointer(IntPtr nativePointer);
    public static PacketHandle FromNativePacket(SNIPacket nativePacket);
}
internal class Microsoft.Data.SqlClient.ParameterPeekAheadValue : object {
    internal IEnumerator`1<SqlDataRecord> Enumerator;
    internal SqlDataRecord FirstRecord;
}
internal enum Microsoft.Data.SqlClient.ParsingErrorState : Enum {
    public int value__;
    public static ParsingErrorState Undefined;
    public static ParsingErrorState FedAuthInfoLengthTooShortForCountOfInfoIds;
    public static ParsingErrorState FedAuthInfoLengthTooShortForData;
    public static ParsingErrorState FedAuthInfoFailedToReadCountOfInfoIds;
    public static ParsingErrorState FedAuthInfoFailedToReadTokenStream;
    public static ParsingErrorState FedAuthInfoInvalidOffset;
    public static ParsingErrorState FedAuthInfoFailedToReadData;
    public static ParsingErrorState FedAuthInfoDataNotUnicode;
    public static ParsingErrorState FedAuthInfoDoesNotContainStsurlAndSpn;
    public static ParsingErrorState FedAuthInfoNotReceived;
    public static ParsingErrorState FedAuthNotAcknowledged;
    public static ParsingErrorState FedAuthFeatureAckContainsExtraData;
    public static ParsingErrorState FedAuthFeatureAckUnknownLibraryType;
    public static ParsingErrorState UnrequestedFeatureAckReceived;
    public static ParsingErrorState UnknownFeatureAck;
    public static ParsingErrorState InvalidTdsTokenReceived;
    public static ParsingErrorState SessionStateLengthTooShort;
    public static ParsingErrorState SessionStateInvalidStatus;
    public static ParsingErrorState CorruptedTdsStream;
    public static ParsingErrorState ProcessSniPacketFailed;
    public static ParsingErrorState FedAuthRequiredPreLoginResponseInvalidValue;
    public static ParsingErrorState TceUnknownVersion;
    public static ParsingErrorState TceInvalidVersion;
    public static ParsingErrorState TceInvalidOrdinalIntoCipherInfoTable;
    public static ParsingErrorState DataClassificationInvalidVersion;
    public static ParsingErrorState DataClassificationNotExpected;
    public static ParsingErrorState DataClassificationInvalidLabelIndex;
    public static ParsingErrorState DataClassificationInvalidInformationTypeIndex;
}
public enum Microsoft.Data.SqlClient.PoolBlockingPeriod : Enum {
    public int value__;
    public static PoolBlockingPeriod Auto;
    public static PoolBlockingPeriod AlwaysBlock;
    public static PoolBlockingPeriod NeverBlock;
}
internal enum Microsoft.Data.SqlClient.PreLoginHandshakeStatus : Enum {
    public int value__;
    public static PreLoginHandshakeStatus Successful;
    public static PreLoginHandshakeStatus InstanceFailure;
}
internal enum Microsoft.Data.SqlClient.PreLoginOptions : Enum {
    public int value__;
    public static PreLoginOptions VERSION;
    public static PreLoginOptions ENCRYPT;
    public static PreLoginOptions INSTANCE;
    public static PreLoginOptions THREADID;
    public static PreLoginOptions MARS;
    public static PreLoginOptions TRACEID;
    public static PreLoginOptions FEDAUTHREQUIRED;
    public static PreLoginOptions NUMOPT;
    public static PreLoginOptions LASTOPT;
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Data.SqlClient.Result : object {
    private _SqlMetaDataSet _metadata;
    private List`1<Row> _rowset;
    internal int Count { get; }
    internal _SqlMetaDataSet MetaData { get; }
    internal Row Item { get; }
    internal Result(_SqlMetaDataSet metadata);
    internal int get_Count();
    internal _SqlMetaDataSet get_MetaData();
    internal Row get_Item(int index);
    internal void AddRow(Row row);
}
internal class Microsoft.Data.SqlClient.RoutingInfo : object {
    [CompilerGeneratedAttribute]
private byte <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    internal byte Protocol { get; private set; }
    internal ushort Port { get; private set; }
    internal string ServerName { get; private set; }
    internal RoutingInfo(byte protocol, ushort port, string servername);
    [CompilerGeneratedAttribute]
internal byte get_Protocol();
    [CompilerGeneratedAttribute]
private void set_Protocol(byte value);
    [CompilerGeneratedAttribute]
internal ushort get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(ushort value);
    [CompilerGeneratedAttribute]
internal string get_ServerName();
    [CompilerGeneratedAttribute]
private void set_ServerName(string value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Data.SqlClient.Row : object {
    private Object[] _dataFields;
    internal Object[] DataFields { get; }
    internal object Item { get; }
    internal Row(int rowCount);
    internal Object[] get_DataFields();
    internal object get_Item(int index);
}
internal enum Microsoft.Data.SqlClient.RunBehavior : Enum {
    public int value__;
    public static RunBehavior UntilDone;
    public static RunBehavior ReturnImmediately;
    public static RunBehavior Clean;
    public static RunBehavior Attention;
}
internal class Microsoft.Data.SqlClient.Server.BinaryOrderedUdtNormalizer : Normalizer {
    private FieldInfoEx[] _fieldsToNormalize;
    private int _size;
    private Byte[] _padBuffer;
    private object _nullInstance;
    private bool _isTopLevelUdt;
    internal bool IsNullable { get; }
    internal int Size { get; }
    internal BinaryOrderedUdtNormalizer(Type t, bool isTopLevelUdt);
    private FieldInfo[] GetFields(Type t);
    internal bool get_IsNullable();
    internal void NormalizeTopObject(object udt, Stream s);
    internal object DeNormalizeTopObject(Type t, Stream s);
    private object DeNormalizeInternal(Type t, Stream s);
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.Data.SqlClient.Server.BinarySerializeSerializer : Serializer {
    internal BinarySerializeSerializer(Type t);
    public virtual void Serialize(Stream s, object o);
    public virtual object Deserialize(Stream s);
}
internal class Microsoft.Data.SqlClient.Server.BooleanNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.Data.SqlClient.Server.ByteNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.Data.SqlClient.Server.DoubleNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.Data.SqlClient.Server.DummyStream : Stream {
    private long _size;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Position { get; public set; }
    public long Length { get; }
    private void DontDoIt();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    public virtual void SetLength(long value);
    public virtual long Seek(long value, SeekOrigin loc);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal enum Microsoft.Data.SqlClient.Server.ExtendedClrTypeCode : Enum {
    public int value__;
    public static ExtendedClrTypeCode Invalid;
    public static ExtendedClrTypeCode Boolean;
    public static ExtendedClrTypeCode Byte;
    public static ExtendedClrTypeCode Char;
    public static ExtendedClrTypeCode DateTime;
    public static ExtendedClrTypeCode DBNull;
    public static ExtendedClrTypeCode Decimal;
    public static ExtendedClrTypeCode Double;
    public static ExtendedClrTypeCode Empty;
    public static ExtendedClrTypeCode Int16;
    public static ExtendedClrTypeCode Int32;
    public static ExtendedClrTypeCode Int64;
    public static ExtendedClrTypeCode SByte;
    public static ExtendedClrTypeCode Single;
    public static ExtendedClrTypeCode String;
    public static ExtendedClrTypeCode UInt16;
    public static ExtendedClrTypeCode UInt32;
    public static ExtendedClrTypeCode UInt64;
    public static ExtendedClrTypeCode Object;
    public static ExtendedClrTypeCode ByteArray;
    public static ExtendedClrTypeCode CharArray;
    public static ExtendedClrTypeCode Guid;
    public static ExtendedClrTypeCode SqlBinary;
    public static ExtendedClrTypeCode SqlBoolean;
    public static ExtendedClrTypeCode SqlByte;
    public static ExtendedClrTypeCode SqlDateTime;
    public static ExtendedClrTypeCode SqlDouble;
    public static ExtendedClrTypeCode SqlGuid;
    public static ExtendedClrTypeCode SqlInt16;
    public static ExtendedClrTypeCode SqlInt32;
    public static ExtendedClrTypeCode SqlInt64;
    public static ExtendedClrTypeCode SqlMoney;
    public static ExtendedClrTypeCode SqlDecimal;
    public static ExtendedClrTypeCode SqlSingle;
    public static ExtendedClrTypeCode SqlString;
    public static ExtendedClrTypeCode SqlChars;
    public static ExtendedClrTypeCode SqlBytes;
    public static ExtendedClrTypeCode SqlXml;
    public static ExtendedClrTypeCode DataTable;
    public static ExtendedClrTypeCode DbDataReader;
    public static ExtendedClrTypeCode IEnumerableOfSqlDataRecord;
    public static ExtendedClrTypeCode TimeSpan;
    public static ExtendedClrTypeCode DateTimeOffset;
    public static ExtendedClrTypeCode Stream;
    public static ExtendedClrTypeCode TextReader;
    public static ExtendedClrTypeCode XmlReader;
    public static ExtendedClrTypeCode Last;
    public static ExtendedClrTypeCode First;
}
internal class Microsoft.Data.SqlClient.Server.FieldInfoEx : object {
    private int _offset;
    [CompilerGeneratedAttribute]
private FieldInfo <FieldInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Normalizer <Normalizer>k__BackingField;
    internal FieldInfo FieldInfo { get; private set; }
    internal Normalizer Normalizer { get; private set; }
    internal FieldInfoEx(FieldInfo fi, int offset, Normalizer normalizer);
    [CompilerGeneratedAttribute]
internal FieldInfo get_FieldInfo();
    [CompilerGeneratedAttribute]
private void set_FieldInfo(FieldInfo value);
    [CompilerGeneratedAttribute]
internal Normalizer get_Normalizer();
    [CompilerGeneratedAttribute]
private void set_Normalizer(Normalizer value);
    public sealed virtual int CompareTo(object other);
}
internal class Microsoft.Data.SqlClient.Server.FloatNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.Data.SqlClient.Server.IntNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal interface Microsoft.Data.SqlClient.Server.ITypedGetters {
    public abstract virtual bool IsDBNull(int ordinal);
    public abstract virtual SqlDbType GetVariantType(int ordinal);
    public abstract virtual bool GetBoolean(int ordinal);
    public abstract virtual byte GetByte(int ordinal);
    public abstract virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual char GetChar(int ordinal);
    public abstract virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual short GetInt16(int ordinal);
    public abstract virtual int GetInt32(int ordinal);
    public abstract virtual long GetInt64(int ordinal);
    public abstract virtual float GetFloat(int ordinal);
    public abstract virtual double GetDouble(int ordinal);
    public abstract virtual string GetString(int ordinal);
    public abstract virtual decimal GetDecimal(int ordinal);
    public abstract virtual DateTime GetDateTime(int ordinal);
    public abstract virtual Guid GetGuid(int ordinal);
    public abstract virtual SqlBoolean GetSqlBoolean(int ordinal);
    public abstract virtual SqlByte GetSqlByte(int ordinal);
    public abstract virtual SqlInt16 GetSqlInt16(int ordinal);
    public abstract virtual SqlInt32 GetSqlInt32(int ordinal);
    public abstract virtual SqlInt64 GetSqlInt64(int ordinal);
    public abstract virtual SqlSingle GetSqlSingle(int ordinal);
    public abstract virtual SqlDouble GetSqlDouble(int ordinal);
    public abstract virtual SqlMoney GetSqlMoney(int ordinal);
    public abstract virtual SqlDateTime GetSqlDateTime(int ordinal);
    public abstract virtual SqlDecimal GetSqlDecimal(int ordinal);
    public abstract virtual SqlString GetSqlString(int ordinal);
    public abstract virtual SqlBinary GetSqlBinary(int ordinal);
    public abstract virtual SqlGuid GetSqlGuid(int ordinal);
    public abstract virtual SqlChars GetSqlChars(int ordinal);
    public abstract virtual SqlBytes GetSqlBytes(int ordinal);
    public abstract virtual SqlXml GetSqlXml(int ordinal);
    public abstract virtual SqlBytes GetSqlBytesRef(int ordinal);
    public abstract virtual SqlChars GetSqlCharsRef(int ordinal);
    public abstract virtual SqlXml GetSqlXmlRef(int ordinal);
}
internal interface Microsoft.Data.SqlClient.Server.ITypedGettersV3 {
    public abstract virtual bool IsDBNull(SmiEventSink sink, int ordinal);
    public abstract virtual SmiMetaData GetVariantType(SmiEventSink sink, int ordinal);
    public abstract virtual bool GetBoolean(SmiEventSink sink, int ordinal);
    public abstract virtual byte GetByte(SmiEventSink sink, int ordinal);
    public abstract virtual long GetBytesLength(SmiEventSink sink, int ordinal);
    public abstract virtual int GetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual long GetCharsLength(SmiEventSink sink, int ordinal);
    public abstract virtual int GetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual string GetString(SmiEventSink sink, int ordinal);
    public abstract virtual short GetInt16(SmiEventSink sink, int ordinal);
    public abstract virtual int GetInt32(SmiEventSink sink, int ordinal);
    public abstract virtual long GetInt64(SmiEventSink sink, int ordinal);
    public abstract virtual float GetSingle(SmiEventSink sink, int ordinal);
    public abstract virtual double GetDouble(SmiEventSink sink, int ordinal);
    public abstract virtual SqlDecimal GetSqlDecimal(SmiEventSink sink, int ordinal);
    public abstract virtual DateTime GetDateTime(SmiEventSink sink, int ordinal);
    public abstract virtual Guid GetGuid(SmiEventSink sink, int ordinal);
}
internal interface Microsoft.Data.SqlClient.Server.ITypedSetters {
    public abstract virtual void SetDBNull(int ordinal);
    public abstract virtual void SetBoolean(int ordinal, bool value);
    public abstract virtual void SetByte(int ordinal, byte value);
    public abstract virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual void SetChar(int ordinal, char value);
    public abstract virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual void SetInt16(int ordinal, short value);
    public abstract virtual void SetInt32(int ordinal, int value);
    public abstract virtual void SetInt64(int ordinal, long value);
    public abstract virtual void SetFloat(int ordinal, float value);
    public abstract virtual void SetDouble(int ordinal, double value);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetString(int ordinal, string value);
    public abstract virtual void SetString(int ordinal, string value, int offset);
    public abstract virtual void SetDecimal(int ordinal, decimal value);
    public abstract virtual void SetDateTime(int ordinal, DateTime value);
    public abstract virtual void SetGuid(int ordinal, Guid value);
    public abstract virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public abstract virtual void SetSqlByte(int ordinal, SqlByte value);
    public abstract virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public abstract virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public abstract virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public abstract virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public abstract virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public abstract virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public abstract virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public abstract virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlString(int ordinal, SqlString value);
    public abstract virtual void SetSqlString(int ordinal, SqlString value, int offset);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public abstract virtual void SetSqlBinary(int ordinal, SqlBinary value, int offset);
    public abstract virtual void SetSqlGuid(int ordinal, SqlGuid value);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlChars(int ordinal, SqlChars value);
    public abstract virtual void SetSqlChars(int ordinal, SqlChars value, int offset);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlBytes(int ordinal, SqlBytes value);
    public abstract virtual void SetSqlBytes(int ordinal, SqlBytes value, int offset);
    public abstract virtual void SetSqlXml(int ordinal, SqlXml value);
}
internal interface Microsoft.Data.SqlClient.Server.ITypedSettersV3 {
    public abstract virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
    public abstract virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public abstract virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public abstract virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public abstract virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public abstract virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public abstract virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public abstract virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public abstract virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public abstract virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public abstract virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public abstract virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public abstract virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public abstract virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public abstract virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
}
internal class Microsoft.Data.SqlClient.Server.LongNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.Data.SqlClient.Server.MemoryRecordBuffer : SmiRecordBuffer {
    private SqlRecordBuffer[] _buffer;
    internal MemoryRecordBuffer(SmiMetaData[] metaData);
    public virtual bool IsDBNull(SmiEventSink sink, int ordinal);
    public virtual SmiMetaData GetVariantType(SmiEventSink sink, int ordinal);
    public virtual bool GetBoolean(SmiEventSink sink, int ordinal);
    public virtual byte GetByte(SmiEventSink sink, int ordinal);
    public virtual long GetBytesLength(SmiEventSink sink, int ordinal);
    public virtual int GetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual long GetCharsLength(SmiEventSink sink, int ordinal);
    public virtual int GetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetString(SmiEventSink sink, int ordinal);
    public virtual short GetInt16(SmiEventSink sink, int ordinal);
    public virtual int GetInt32(SmiEventSink sink, int ordinal);
    public virtual long GetInt64(SmiEventSink sink, int ordinal);
    public virtual float GetSingle(SmiEventSink sink, int ordinal);
    public virtual double GetDouble(SmiEventSink sink, int ordinal);
    public virtual SqlDecimal GetSqlDecimal(SmiEventSink sink, int ordinal);
    public virtual DateTime GetDateTime(SmiEventSink sink, int ordinal);
    public virtual Guid GetGuid(SmiEventSink sink, int ordinal);
    public virtual TimeSpan GetTimeSpan(SmiEventSink sink, int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(SmiEventSink sink, int ordinal);
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
    public virtual void SetTimeSpan(SmiEventSink sink, int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(SmiEventSink sink, int ordinal, DateTimeOffset value);
    public virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
}
internal class Microsoft.Data.SqlClient.Server.MetaDataUtilsSmi : object {
    internal static SqlDbType InvalidSqlDbType;
    internal static long InvalidMaxLength;
    private static SqlDbType[] s_extendedTypeCodeToSqlDbTypeMap;
    private static Dictionary`2<Type, ExtendedClrTypeCode> s_typeToExtendedTypeCodeMap;
    private static MetaDataUtilsSmi();
    private static Dictionary`2<Type, ExtendedClrTypeCode> CreateTypeToExtendedTypeCodeMap();
    internal static bool IsCharOrXmlType(SqlDbType type);
    internal static bool IsUnicodeType(SqlDbType type);
    internal static bool IsAnsiType(SqlDbType type);
    internal static bool IsBinaryType(SqlDbType type);
    internal static bool IsPlpFormat(SmiMetaData metaData);
    internal static ExtendedClrTypeCode DetermineExtendedTypeCodeForUseWithSqlDbType(SqlDbType dbType, bool isMultiValued, object value, Type udtType);
    internal static ExtendedClrTypeCode DetermineExtendedTypeCodeFromType(Type clrType);
    internal static ExtendedClrTypeCode DetermineExtendedTypeCode(object value);
    internal static SqlDbType InferSqlDbTypeFromTypeCode(ExtendedClrTypeCode typeCode);
    internal static SqlDbType InferSqlDbTypeFromType(Type type);
    internal static SqlDbType InferSqlDbTypeFromType_2008(Type type);
    internal static SmiExtendedMetaData SqlMetaDataToSmiExtendedMetaData(SqlMetaData source);
    internal static bool IsCompatible(SmiMetaData firstMd, SqlMetaData secondMd);
    internal static SmiExtendedMetaData SmiMetaDataFromDataColumn(DataColumn column, DataTable parent);
    internal static long AdjustMaxLength(SqlDbType dbType, long maxLength);
    internal static SmiExtendedMetaData SmiMetaDataFromSchemaTableRow(DataRow schemaRow);
}
internal class Microsoft.Data.SqlClient.Server.NormalizedSerializer : Serializer {
    private BinaryOrderedUdtNormalizer _normalizer;
    internal NormalizedSerializer(Type t);
    public virtual void Serialize(Stream s, object o);
    public virtual object Deserialize(Stream s);
}
internal abstract class Microsoft.Data.SqlClient.Server.Normalizer : object {
    protected bool _skipNormalize;
    internal int Size { get; }
    internal static Normalizer GetNormalizer(Type t);
    internal abstract virtual void Normalize(FieldInfo fi, object recvr, Stream s);
    internal abstract virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    protected void FlipAllBits(Byte[] b);
    protected object GetValue(FieldInfo fi, object obj);
    protected void SetValue(FieldInfo fi, object recvr, object value);
    internal abstract virtual int get_Size();
}
internal class Microsoft.Data.SqlClient.Server.SByteNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.Data.SqlClient.Server.SerializationHelperSql9 : object {
    private static ConcurrentDictionary`2<Type, Serializer> s_types2Serializers;
    internal static int SizeInBytes(Type t);
    internal static int SizeInBytes(object instance);
    internal static void Serialize(Stream s, object instance);
    internal static object Deserialize(Stream s, Type resultType);
    private static Format GetFormat(Type t);
    private static Serializer GetSerializer(Type t);
    internal static int GetUdtMaxLength(Type t);
    private static Object[] GetCustomAttributes(Type t);
    internal static SqlUserDefinedTypeAttribute GetUdtAttribute(Type t);
    private static Serializer GetNewSerializer(Type t);
}
internal abstract class Microsoft.Data.SqlClient.Server.Serializer : object {
    [DynamicallyAccessedMembersAttribute("1")]
protected Type _type;
    protected Serializer(Type t);
    public abstract virtual object Deserialize(Stream s);
    public abstract virtual void Serialize(Stream s, object o);
}
internal class Microsoft.Data.SqlClient.Server.ShortNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Data.SqlClient.Server.SmiDefaultFieldsProperty : SmiMetaDataProperty {
    private IList`1<bool> _defaults;
    internal bool Item { get; }
    internal SmiDefaultFieldsProperty(IList`1<bool> defaultFields);
    internal bool get_Item(int ordinal);
    [ConditionalAttribute("DEBUG")]
internal void CheckCount(int countToMatch);
    internal virtual string TraceString();
}
internal abstract class Microsoft.Data.SqlClient.Server.SmiEventSink : object {
}
internal class Microsoft.Data.SqlClient.Server.SmiEventSink_Default : SmiEventSink {
    private SqlErrorCollection _errors;
    private SqlErrorCollection _warnings;
    internal string ServerVersion { get; }
    internal bool HasMessages { get; }
    internal virtual string get_ServerVersion();
    internal bool get_HasMessages();
    protected virtual void DispatchMessages();
    protected SqlException ProcessMessages(bool ignoreWarnings);
    internal void ProcessMessagesAndThrow();
}
internal class Microsoft.Data.SqlClient.Server.SmiExtendedMetaData : SmiMetaData {
    private string _name;
    private string _typeSpecificNamePart1;
    private string _typeSpecificNamePart2;
    private string _typeSpecificNamePart3;
    internal string Name { get; }
    internal string TypeSpecificNamePart1 { get; }
    internal string TypeSpecificNamePart2 { get; }
    internal string TypeSpecificNamePart3 { get; }
    internal SmiExtendedMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3);
    internal SmiExtendedMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3);
    internal SmiExtendedMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3);
    internal string get_Name();
    internal string get_TypeSpecificNamePart1();
    internal string get_TypeSpecificNamePart2();
    internal string get_TypeSpecificNamePart3();
    internal virtual string TraceString(int indent);
}
internal class Microsoft.Data.SqlClient.Server.SmiGettersStream : Stream {
    private SmiEventSink_Default _sink;
    private ITypedGettersV3 _getters;
    private int _ordinal;
    private long _readPosition;
    private SmiMetaData _metaData;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SmiGettersStream(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class Microsoft.Data.SqlClient.Server.SmiMetaData : object {
    private SqlDbType _databaseType;
    private long _maxLength;
    private byte _precision;
    private byte _scale;
    private long _localeId;
    private SqlCompareOptions _compareOptions;
    private Type _clrType;
    private string _udtAssemblyQualifiedName;
    private bool _isMultiValued;
    private IList`1<SmiExtendedMetaData> _fieldMetaData;
    private SmiMetaDataPropertyCollection _extendedProperties;
    internal static long UnlimitedMaxLengthIndicator;
    internal static long MaxUnicodeCharacters;
    internal static long MaxANSICharacters;
    internal static long MaxBinaryLength;
    internal static int MinPrecision;
    internal static int MinScale;
    internal static int MaxTimeScale;
    internal static DateTime MaxSmallDateTime;
    internal static DateTime MinSmallDateTime;
    internal static SqlMoney MaxSmallMoney;
    internal static SqlMoney MinSmallMoney;
    internal static SqlCompareOptions DefaultStringCompareOptions;
    internal static long MaxNameLength;
    private static IList`1<SmiExtendedMetaData> s_emptyFieldList;
    private static Byte[] s_maxLenFromPrecision;
    private static Byte[] s_maxVarTimeLenOffsetFromScale;
    internal static SmiMetaData DefaultBigInt;
    internal static SmiMetaData DefaultBinary;
    internal static SmiMetaData DefaultBit;
    internal static SmiMetaData DefaultChar_NoCollation;
    internal static SmiMetaData DefaultDateTime;
    internal static SmiMetaData DefaultDecimal;
    internal static SmiMetaData DefaultFloat;
    internal static SmiMetaData DefaultImage;
    internal static SmiMetaData DefaultInt;
    internal static SmiMetaData DefaultMoney;
    internal static SmiMetaData DefaultNChar_NoCollation;
    internal static SmiMetaData DefaultNText_NoCollation;
    internal static SmiMetaData DefaultNVarChar_NoCollation;
    internal static SmiMetaData DefaultReal;
    internal static SmiMetaData DefaultUniqueIdentifier;
    internal static SmiMetaData DefaultSmallDateTime;
    internal static SmiMetaData DefaultSmallInt;
    internal static SmiMetaData DefaultSmallMoney;
    internal static SmiMetaData DefaultText_NoCollation;
    internal static SmiMetaData DefaultTimestamp;
    internal static SmiMetaData DefaultTinyInt;
    internal static SmiMetaData DefaultVarBinary;
    internal static SmiMetaData DefaultVarChar_NoCollation;
    internal static SmiMetaData DefaultVariant;
    internal static SmiMetaData DefaultXml;
    internal static SmiMetaData DefaultUdt_NoType;
    internal static SmiMetaData DefaultStructured;
    internal static SmiMetaData DefaultDate;
    internal static SmiMetaData DefaultTime;
    internal static SmiMetaData DefaultDateTime2;
    internal static SmiMetaData DefaultDateTimeOffset;
    private static SmiMetaData[] s_defaultValues;
    private static String[] s_typeNameByDatabaseType;
    internal static SmiMetaData DefaultChar { get; }
    internal static SmiMetaData DefaultNChar { get; }
    internal static SmiMetaData DefaultNText { get; }
    internal static SmiMetaData DefaultNVarChar { get; }
    internal static SmiMetaData DefaultText { get; }
    internal static SmiMetaData DefaultVarChar { get; }
    internal SqlCompareOptions CompareOptions { get; }
    internal long LocaleId { get; }
    internal long MaxLength { get; }
    internal byte Precision { get; }
    internal byte Scale { get; }
    internal SqlDbType SqlDbType { get; }
    internal Type Type { get; }
    internal Type TypeWithoutThrowing { get; }
    internal string TypeName { get; }
    internal string AssemblyQualifiedName { get; }
    internal bool IsMultiValued { get; }
    internal IList`1<SmiExtendedMetaData> FieldMetaData { get; }
    internal SmiMetaDataPropertyCollection ExtendedProperties { get; }
    internal SmiMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType);
    internal SmiMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldTypes, SmiMetaDataPropertyCollection extendedProperties);
    internal SmiMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldTypes, SmiMetaDataPropertyCollection extendedProperties);
    private SmiMetaData(SqlDbType sqlDbType, long maxLength, byte precision, byte scale, SqlCompareOptions compareOptions);
    private static SmiMetaData();
    internal static SmiMetaData get_DefaultChar();
    internal static SmiMetaData get_DefaultNChar();
    internal static SmiMetaData get_DefaultNText();
    internal static SmiMetaData get_DefaultNVarChar();
    internal static SmiMetaData get_DefaultText();
    internal static SmiMetaData get_DefaultVarChar();
    internal bool IsValidMaxLengthForCtorGivenType(SqlDbType dbType, long maxLength);
    internal SqlCompareOptions get_CompareOptions();
    internal long get_LocaleId();
    internal long get_MaxLength();
    internal byte get_Precision();
    internal byte get_Scale();
    internal SqlDbType get_SqlDbType();
    internal Type get_Type();
    internal Type get_TypeWithoutThrowing();
    internal string get_TypeName();
    internal string get_AssemblyQualifiedName();
    internal bool get_IsMultiValued();
    internal IList`1<SmiExtendedMetaData> get_FieldMetaData();
    internal SmiMetaDataPropertyCollection get_ExtendedProperties();
    internal static bool IsSupportedDbType(SqlDbType dbType);
    internal static SmiMetaData GetDefaultForType(SqlDbType dbType);
    private void SetDefaultsForType(SqlDbType dbType);
    internal string TraceString();
    internal virtual string TraceString(int indent);
}
internal abstract class Microsoft.Data.SqlClient.Server.SmiMetaDataProperty : object {
    internal abstract virtual string TraceString();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Data.SqlClient.Server.SmiMetaDataPropertyCollection : object {
    private static int SelectorCount;
    private SmiMetaDataProperty[] _properties;
    private bool _isReadOnly;
    private static SmiDefaultFieldsProperty s_emptyDefaultFields;
    private static SmiOrderProperty s_emptySortOrder;
    private static SmiUniqueKeyProperty s_emptyUniqueKey;
    internal static SmiMetaDataPropertyCollection s_emptyInstance;
    internal SmiMetaDataProperty Item { get; internal set; }
    internal bool IsReadOnly { get; }
    internal IEnumerable`1<SmiMetaDataProperty> Values { get; }
    private static SmiMetaDataPropertyCollection();
    private static SmiMetaDataPropertyCollection CreateEmptyInstance();
    internal SmiMetaDataProperty get_Item(SmiPropertySelector key);
    internal void set_Item(SmiPropertySelector key, SmiMetaDataProperty value);
    internal bool get_IsReadOnly();
    internal IEnumerable`1<SmiMetaDataProperty> get_Values();
    internal void SetReadOnly();
    private void EnsureWritable();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Data.SqlClient.Server.SmiOrderProperty : SmiMetaDataProperty {
    private IList`1<SmiColumnOrder> _columns;
    internal SmiColumnOrder Item { get; }
    internal SmiOrderProperty(IList`1<SmiColumnOrder> columnOrders);
    internal SmiColumnOrder get_Item(int ordinal);
    [ConditionalAttribute("DEBUG")]
internal void CheckCount(int countToMatch);
    internal virtual string TraceString();
}
internal class Microsoft.Data.SqlClient.Server.SmiParameterMetaData : SmiExtendedMetaData {
    private ParameterDirection _direction;
    internal ParameterDirection Direction { get; }
    internal SmiParameterMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, ParameterDirection direction);
    internal SmiParameterMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, ParameterDirection direction);
    internal ParameterDirection get_Direction();
    internal virtual string TraceString(int indent);
}
internal enum Microsoft.Data.SqlClient.Server.SmiPropertySelector : Enum {
    public int value__;
    public static SmiPropertySelector DefaultFields;
    public static SmiPropertySelector SortOrder;
    public static SmiPropertySelector UniqueKey;
}
internal class Microsoft.Data.SqlClient.Server.SmiQueryMetaData : SmiStorageMetaData {
    private bool _isReadOnly;
    private SqlBoolean _isExpression;
    private SqlBoolean _isAliased;
    private SqlBoolean _isHidden;
    internal bool IsReadOnly { get; }
    internal SqlBoolean IsExpression { get; }
    internal SqlBoolean IsAliased { get; }
    internal SqlBoolean IsHidden { get; }
    internal SmiQueryMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isReadOnly, SqlBoolean isExpression, SqlBoolean isAliased, SqlBoolean isHidden);
    internal SmiQueryMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isReadOnly, SqlBoolean isExpression, SqlBoolean isAliased, SqlBoolean isHidden);
    internal SmiQueryMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isColumnSet, bool isReadOnly, SqlBoolean isExpression, SqlBoolean isAliased, SqlBoolean isHidden);
    internal bool get_IsReadOnly();
    internal SqlBoolean get_IsExpression();
    internal SqlBoolean get_IsAliased();
    internal SqlBoolean get_IsHidden();
    internal virtual string TraceString(int indent);
}
internal abstract class Microsoft.Data.SqlClient.Server.SmiRecordBuffer : SmiTypedGetterSetter {
    internal bool CanGet { get; }
    internal bool CanSet { get; }
    internal virtual bool get_CanGet();
    internal virtual bool get_CanSet();
    public virtual void Dispose();
    public virtual bool IsDBNull(int ordinal);
    public virtual SqlDbType GetVariantType(int ordinal);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual SqlBoolean GetSqlBoolean(int ordinal);
    public virtual SqlByte GetSqlByte(int ordinal);
    public virtual SqlInt16 GetSqlInt16(int ordinal);
    public virtual SqlInt32 GetSqlInt32(int ordinal);
    public virtual SqlInt64 GetSqlInt64(int ordinal);
    public virtual SqlSingle GetSqlSingle(int ordinal);
    public virtual SqlDouble GetSqlDouble(int ordinal);
    public virtual SqlMoney GetSqlMoney(int ordinal);
    public virtual SqlDateTime GetSqlDateTime(int ordinal);
    public virtual SqlDecimal GetSqlDecimal(int ordinal);
    public virtual SqlString GetSqlString(int ordinal);
    public virtual SqlBinary GetSqlBinary(int ordinal);
    public virtual SqlGuid GetSqlGuid(int ordinal);
    public virtual SqlChars GetSqlChars(int ordinal);
    public virtual SqlBytes GetSqlBytes(int ordinal);
    public virtual SqlXml GetSqlXml(int ordinal);
    public virtual SqlXml GetSqlXmlRef(int ordinal);
    public virtual SqlBytes GetSqlBytesRef(int ordinal);
    public virtual SqlChars GetSqlCharsRef(int ordinal);
    public virtual void SetDBNull(int ordinal);
    public virtual void SetBoolean(int ordinal, bool value);
    public virtual void SetByte(int ordinal, byte value);
    public virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetChar(int ordinal, char value);
    public virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetInt16(int ordinal, short value);
    public virtual void SetInt32(int ordinal, int value);
    public virtual void SetInt64(int ordinal, long value);
    public virtual void SetFloat(int ordinal, float value);
    public virtual void SetDouble(int ordinal, double value);
    public virtual void SetString(int ordinal, string value);
    public virtual void SetString(int ordinal, string value, int offset);
    public virtual void SetDecimal(int ordinal, decimal value);
    public virtual void SetDateTime(int ordinal, DateTime value);
    public virtual void SetGuid(int ordinal, Guid value);
    public virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public virtual void SetSqlByte(int ordinal, SqlByte value);
    public virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    public virtual void SetSqlString(int ordinal, SqlString value);
    public virtual void SetSqlString(int ordinal, SqlString value, int offset);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value, int offset);
    public virtual void SetSqlGuid(int ordinal, SqlGuid value);
    public virtual void SetSqlChars(int ordinal, SqlChars value);
    public virtual void SetSqlChars(int ordinal, SqlChars value, int offset);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value, int offset);
    public virtual void SetSqlXml(int ordinal, SqlXml value);
}
internal class Microsoft.Data.SqlClient.Server.SmiSettersStream : Stream {
    private SmiEventSink_Default _sink;
    private ITypedSettersV3 _setters;
    private int _ordinal;
    private long _lengthWritten;
    private SmiMetaData _metaData;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SmiSettersStream(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class Microsoft.Data.SqlClient.Server.SmiStorageMetaData : SmiExtendedMetaData {
    private bool _allowsDBNull;
    private string _serverName;
    private string _catalogName;
    private string _schemaName;
    private string _tableName;
    private string _columnName;
    private SqlBoolean _isKey;
    private bool _isIdentity;
    private bool _isColumnSet;
    internal bool AllowsDBNull { get; }
    internal string ServerName { get; }
    internal string CatalogName { get; }
    internal string SchemaName { get; }
    internal string TableName { get; }
    internal string ColumnName { get; }
    internal SqlBoolean IsKey { get; }
    internal bool IsIdentity { get; }
    internal bool IsColumnSet { get; }
    internal SmiStorageMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity);
    internal SmiStorageMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity);
    internal SmiStorageMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isColumnSet);
    internal bool get_AllowsDBNull();
    internal string get_ServerName();
    internal string get_CatalogName();
    internal string get_SchemaName();
    internal string get_TableName();
    internal string get_ColumnName();
    internal SqlBoolean get_IsKey();
    internal bool get_IsIdentity();
    internal bool get_IsColumnSet();
    internal virtual string TraceString(int indent);
}
internal abstract class Microsoft.Data.SqlClient.Server.SmiTypedGetterSetter : object {
    internal bool CanGet { get; }
    internal bool CanSet { get; }
    internal abstract virtual bool get_CanGet();
    internal abstract virtual bool get_CanSet();
    public virtual bool IsDBNull(SmiEventSink sink, int ordinal);
    public virtual SmiMetaData GetVariantType(SmiEventSink sink, int ordinal);
    public virtual bool GetBoolean(SmiEventSink sink, int ordinal);
    public virtual byte GetByte(SmiEventSink sink, int ordinal);
    public virtual long GetBytesLength(SmiEventSink sink, int ordinal);
    public virtual int GetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual long GetCharsLength(SmiEventSink sink, int ordinal);
    public virtual int GetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetString(SmiEventSink sink, int ordinal);
    public virtual short GetInt16(SmiEventSink sink, int ordinal);
    public virtual int GetInt32(SmiEventSink sink, int ordinal);
    public virtual long GetInt64(SmiEventSink sink, int ordinal);
    public virtual float GetSingle(SmiEventSink sink, int ordinal);
    public virtual double GetDouble(SmiEventSink sink, int ordinal);
    public virtual SqlDecimal GetSqlDecimal(SmiEventSink sink, int ordinal);
    public virtual DateTime GetDateTime(SmiEventSink sink, int ordinal);
    public virtual Guid GetGuid(SmiEventSink sink, int ordinal);
    public virtual TimeSpan GetTimeSpan(SmiEventSink sink, int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(SmiEventSink sink, int ordinal);
    internal virtual SmiTypedGetterSetter GetTypedGetterSetter(SmiEventSink sink, int ordinal);
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
    public virtual void SetTimeSpan(SmiEventSink sink, int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(SmiEventSink sink, int ordinal, DateTimeOffset value);
    public virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
    internal virtual void NewElement(SmiEventSink sink);
    internal virtual void EndElements(SmiEventSink sink);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Data.SqlClient.Server.SmiUniqueKeyProperty : SmiMetaDataProperty {
    private IList`1<bool> _columns;
    internal bool Item { get; }
    internal SmiUniqueKeyProperty(IList`1<bool> columnIsKey);
    internal bool get_Item(int ordinal);
    [ConditionalAttribute("DEBUG")]
internal void CheckCount(int countToMatch);
    internal virtual string TraceString();
}
internal class Microsoft.Data.SqlClient.Server.SmiXetterAccessMap : object {
    private static bool X;
    private static bool _;
    private static Boolean[0...,0...] s_isSetterAccessValid;
    private static SmiXetterAccessMap();
    internal static bool IsSetterAccessValid(SmiMetaData metaData, SmiXetterTypeCode xetterType);
}
internal enum Microsoft.Data.SqlClient.Server.SmiXetterTypeCode : Enum {
    public int value__;
    public static SmiXetterTypeCode XetBoolean;
    public static SmiXetterTypeCode XetByte;
    public static SmiXetterTypeCode XetBytes;
    public static SmiXetterTypeCode XetChars;
    public static SmiXetterTypeCode XetString;
    public static SmiXetterTypeCode XetInt16;
    public static SmiXetterTypeCode XetInt32;
    public static SmiXetterTypeCode XetInt64;
    public static SmiXetterTypeCode XetSingle;
    public static SmiXetterTypeCode XetDouble;
    public static SmiXetterTypeCode XetSqlDecimal;
    public static SmiXetterTypeCode XetDateTime;
    public static SmiXetterTypeCode XetGuid;
    public static SmiXetterTypeCode GetVariantMetaData;
    public static SmiXetterTypeCode GetXet;
    public static SmiXetterTypeCode XetTime;
    public static SmiXetterTypeCode XetTimeSpan;
    public static SmiXetterTypeCode XetDateTimeOffset;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.SqlClient.Server.SqlDataRecord : object {
    private SmiRecordBuffer _recordBuffer;
    private SmiExtendedMetaData[] _columnSmiMetaData;
    private SmiEventSink_Default _eventSink;
    private SqlMetaData[] _columnMetaData;
    private FieldNameLookup _fieldNameLookup;
    private bool _usesStringStorageForXml;
    private static SmiMetaData s_maxNVarCharForXml;
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public SqlDataRecord(SqlMetaData[] metaData);
    private static SqlDataRecord();
    public virtual int get_FieldCount();
    public virtual string GetName(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual int GetOrdinal(string name);
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(int ordinal);
    public virtual TimeSpan GetTimeSpan(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual SqlMetaData GetSqlMetaData(int ordinal);
    public virtual Type GetSqlFieldType(int ordinal);
    public virtual object GetSqlValue(int ordinal);
    public virtual int GetSqlValues(Object[] values);
    public virtual SqlBinary GetSqlBinary(int ordinal);
    public virtual SqlBytes GetSqlBytes(int ordinal);
    public virtual SqlXml GetSqlXml(int ordinal);
    public virtual SqlBoolean GetSqlBoolean(int ordinal);
    public virtual SqlByte GetSqlByte(int ordinal);
    public virtual SqlChars GetSqlChars(int ordinal);
    public virtual SqlInt16 GetSqlInt16(int ordinal);
    public virtual SqlInt32 GetSqlInt32(int ordinal);
    public virtual SqlInt64 GetSqlInt64(int ordinal);
    public virtual SqlSingle GetSqlSingle(int ordinal);
    public virtual SqlDouble GetSqlDouble(int ordinal);
    public virtual SqlMoney GetSqlMoney(int ordinal);
    public virtual SqlDateTime GetSqlDateTime(int ordinal);
    public virtual SqlDecimal GetSqlDecimal(int ordinal);
    public virtual SqlString GetSqlString(int ordinal);
    public virtual SqlGuid GetSqlGuid(int ordinal);
    public virtual int SetValues(Object[] values);
    public virtual void SetValue(int ordinal, object value);
    public virtual void SetBoolean(int ordinal, bool value);
    public virtual void SetByte(int ordinal, byte value);
    public virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetChar(int ordinal, char value);
    public virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetInt16(int ordinal, short value);
    public virtual void SetInt32(int ordinal, int value);
    public virtual void SetInt64(int ordinal, long value);
    public virtual void SetFloat(int ordinal, float value);
    public virtual void SetDouble(int ordinal, double value);
    public virtual void SetString(int ordinal, string value);
    public virtual void SetDecimal(int ordinal, decimal value);
    public virtual void SetDateTime(int ordinal, DateTime value);
    public virtual void SetTimeSpan(int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(int ordinal, DateTimeOffset value);
    public virtual void SetDBNull(int ordinal);
    public virtual void SetGuid(int ordinal, Guid value);
    public virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public virtual void SetSqlByte(int ordinal, SqlByte value);
    public virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public virtual void SetSqlXml(int ordinal, SqlXml value);
    public virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    public virtual void SetSqlString(int ordinal, SqlString value);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public virtual void SetSqlGuid(int ordinal, SqlGuid value);
    public virtual void SetSqlChars(int ordinal, SqlChars value);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value);
    internal SmiExtendedMetaData GetSmiMetaData(int ordinal);
    internal void ThrowIfInvalidOrdinal(int ordinal);
    [EditorBrowsableAttribute("1")]
private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int ordinal);
    private Type GetFieldTypeFrameworkSpecific(int ordinal);
    private object GetValueFrameworkSpecific(int ordinal);
    private object GetSqlValueFrameworkSpecific(int ordinal);
    private SqlBytes GetSqlBytesFrameworkSpecific(int ordinal);
    private SqlXml GetSqlXmlFrameworkSpecific(int ordinal);
    private SqlChars GetSqlCharsFrameworkSpecific(int ordinal);
    private int SetValuesFrameworkSpecific(Object[] values);
    private void SetValueFrameworkSpecific(int ordinal, object value);
    private void SetTimeSpanFrameworkSpecific(int ordinal, TimeSpan value);
    private void SetDateTimeOffsetFrameworkSpecific(int ordinal, DateTimeOffset value);
}
internal static class Microsoft.Data.SqlClient.Server.SqlDataSourceEnumeratorManagedHelper : object {
    internal static DataTable GetDataSources();
    private static DataTable ParseServerEnumString(string serverInstances);
}
public class Microsoft.Data.SqlClient.Server.SqlMetaData : object {
    private static long MaxUnicodeLength;
    private static long MaxANSILength;
    private static long MaxBinaryLength;
    private static long UnlimitedMaxLength;
    private static bool DefaultUseServerDefault;
    private static bool DefaultIsUniqueKey;
    private static SortOrder DefaultColumnSortOrder;
    private static int DefaultSortOrdinal;
    private static byte MaxTimeScale;
    private static SqlCompareOptions DefaultStringCompareOptions;
    private static SqlMoney s_smallMoneyMax;
    private static SqlMoney s_smallMoneyMin;
    private static DateTime s_smallDateTimeMax;
    private static DateTime s_smallDateTimeMin;
    private static TimeSpan s_timeMin;
    private static TimeSpan s_timeMax;
    private static Byte[] s_maxLenFromPrecision;
    private static Byte[] s_maxVarTimeLenOffsetFromScale;
    private static Int64[] s_unitTicksFromScale;
    private static DbType[] s_sqlDbTypeToDbType;
    internal static SqlMetaData[] s_defaults;
    private string _name;
    private long _maxLength;
    private SqlDbType _sqlDbType;
    private byte _precision;
    private byte _scale;
    private long _locale;
    private SqlCompareOptions _compareOptions;
    private string _xmlSchemaCollectionDatabase;
    private string _xmlSchemaCollectionOwningSchema;
    private string _xmlSchemaCollectionName;
    private string _serverTypeName;
    private bool _partialLength;
    private Type _udtType;
    private bool _useServerDefault;
    private bool _isUniqueKey;
    private SortOrder _columnSortOrder;
    private int _sortOrdinal;
    public SqlCompareOptions CompareOptions { get; }
    public DbType DbType { get; }
    public bool IsUniqueKey { get; }
    public long LocaleId { get; }
    public static long Max { get; }
    public long MaxLength { get; }
    public string Name { get; }
    public byte Precision { get; }
    public byte Scale { get; }
    public SortOrder SortOrder { get; }
    public int SortOrdinal { get; }
    public SqlDbType SqlDbType { get; }
    public Type Type { get; }
    public string TypeName { get; }
    internal string ServerTypeName { get; }
    public bool UseServerDefault { get; }
    public string XmlSchemaCollectionDatabase { get; }
    public string XmlSchemaCollectionName { get; }
    public string XmlSchemaCollectionOwningSchema { get; }
    internal bool IsPartialLength { get; }
    internal string UdtTypeName { get; }
    public SqlMetaData(string name, SqlDbType dbType);
    public SqlMetaData(string name, SqlDbType dbType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType, string serverTypeName);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType, string serverTypeName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, byte precision, byte scale);
    public SqlMetaData(string name, SqlDbType dbType, byte precision, byte scale, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, string database, string owningSchema, string objectName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long locale, SqlCompareOptions compareOptions, Type userDefinedType);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, string database, string owningSchema, string objectName);
    internal SqlMetaData(string name, SqlDbType sqlDBType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, string xmlSchemaCollectionDatabase, string xmlSchemaCollectionOwningSchema, string xmlSchemaCollectionName, bool partialLength, Type udtType);
    private SqlMetaData(string name, SqlDbType sqlDbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, bool partialLength);
    private static SqlMetaData();
    public SqlCompareOptions get_CompareOptions();
    public DbType get_DbType();
    public bool get_IsUniqueKey();
    public long get_LocaleId();
    public static long get_Max();
    public long get_MaxLength();
    public string get_Name();
    public byte get_Precision();
    public byte get_Scale();
    public SortOrder get_SortOrder();
    public int get_SortOrdinal();
    public SqlDbType get_SqlDbType();
    public Type get_Type();
    public string get_TypeName();
    internal string get_ServerTypeName();
    public bool get_UseServerDefault();
    public string get_XmlSchemaCollectionDatabase();
    public string get_XmlSchemaCollectionName();
    public string get_XmlSchemaCollectionOwningSchema();
    internal bool get_IsPartialLength();
    internal string get_UdtTypeName();
    private void Construct(string name, SqlDbType dbType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void Construct(string name, SqlDbType dbType, long maxLength, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void Construct(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void Construct(string name, SqlDbType dbType, byte precision, byte scale, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void Construct(string name, SqlDbType dbType, Type userDefinedType, string serverTypeName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void Construct(string name, SqlDbType dbType, string database, string owningSchema, string objectName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void AssertNameIsValid(string name);
    private void ValidateSortOrder(SortOrder columnSortOrder, int sortOrdinal);
    public short Adjust(short value);
    public int Adjust(int value);
    public long Adjust(long value);
    public float Adjust(float value);
    public double Adjust(double value);
    public string Adjust(string value);
    public decimal Adjust(decimal value);
    public DateTime Adjust(DateTime value);
    public Guid Adjust(Guid value);
    public SqlBoolean Adjust(SqlBoolean value);
    public SqlByte Adjust(SqlByte value);
    public SqlInt16 Adjust(SqlInt16 value);
    public SqlInt32 Adjust(SqlInt32 value);
    public SqlInt64 Adjust(SqlInt64 value);
    public SqlSingle Adjust(SqlSingle value);
    public SqlDouble Adjust(SqlDouble value);
    public SqlMoney Adjust(SqlMoney value);
    public SqlDateTime Adjust(SqlDateTime value);
    public SqlDecimal Adjust(SqlDecimal value);
    public SqlString Adjust(SqlString value);
    public SqlBinary Adjust(SqlBinary value);
    public SqlGuid Adjust(SqlGuid value);
    public SqlChars Adjust(SqlChars value);
    public SqlBytes Adjust(SqlBytes value);
    public SqlXml Adjust(SqlXml value);
    public TimeSpan Adjust(TimeSpan value);
    public DateTimeOffset Adjust(DateTimeOffset value);
    public object Adjust(object value);
    public static SqlMetaData InferFromValue(object value, string name);
    public bool Adjust(bool value);
    public byte Adjust(byte value);
    public Byte[] Adjust(Byte[] value);
    public char Adjust(char value);
    public Char[] Adjust(Char[] value);
    internal static SqlMetaData GetPartialLengthMetaData(SqlMetaData md);
    private static void ThrowInvalidType();
    private void VerifyDateTimeRange(DateTime value);
    private void VerifyMoneyRange(SqlMoney value);
    private SqlDecimal InternalAdjustSqlDecimal(SqlDecimal value);
    private void VerifyTimeRange(TimeSpan value);
    private long InternalAdjustTimeTicks(long ticks);
    private static byte InferScaleFromTimeTicks(long ticks);
    private void SetDefaultsForType(SqlDbType dbType);
}
internal class Microsoft.Data.SqlClient.Server.SqlRecordBuffer : object {
    private bool _isNull;
    private StorageType _type;
    private Storage _value;
    private object _object;
    private SmiMetaData _metadata;
    private bool _isMetaSet;
    internal bool IsNull { get; }
    internal bool Boolean { get; internal set; }
    internal byte Byte { get; internal set; }
    internal DateTime DateTime { get; internal set; }
    internal DateTimeOffset DateTimeOffset { get; internal set; }
    internal double Double { get; internal set; }
    internal Guid Guid { get; internal set; }
    internal short Int16 { get; internal set; }
    internal int Int32 { get; internal set; }
    internal long Int64 { get; internal set; }
    internal float Single { get; internal set; }
    internal string String { get; internal set; }
    internal SqlDecimal SqlDecimal { get; internal set; }
    internal TimeSpan TimeSpan { get; internal set; }
    internal long BytesLength { get; internal set; }
    internal long CharsLength { get; internal set; }
    internal SmiMetaData VariantType { get; internal set; }
    internal SqlRecordBuffer(SmiMetaData metaData);
    internal bool get_IsNull();
    internal bool get_Boolean();
    internal void set_Boolean(bool value);
    internal byte get_Byte();
    internal void set_Byte(byte value);
    internal DateTime get_DateTime();
    internal void set_DateTime(DateTime value);
    internal DateTimeOffset get_DateTimeOffset();
    internal void set_DateTimeOffset(DateTimeOffset value);
    internal double get_Double();
    internal void set_Double(double value);
    internal Guid get_Guid();
    internal void set_Guid(Guid value);
    internal short get_Int16();
    internal void set_Int16(short value);
    internal int get_Int32();
    internal void set_Int32(int value);
    internal long get_Int64();
    internal void set_Int64(long value);
    internal float get_Single();
    internal void set_Single(float value);
    internal string get_String();
    internal void set_String(string value);
    internal SqlDecimal get_SqlDecimal();
    internal void set_SqlDecimal(SqlDecimal value);
    internal TimeSpan get_TimeSpan();
    internal void set_TimeSpan(TimeSpan value);
    internal long get_BytesLength();
    internal void set_BytesLength(long value);
    internal long get_CharsLength();
    internal void set_CharsLength(long value);
    internal SmiMetaData get_VariantType();
    internal void set_VariantType(SmiMetaData value);
    internal int GetBytes(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal int GetChars(long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal int SetBytes(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal int SetChars(long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal void SetNull();
    private void ConvertXmlStringToByteArray();
}
internal class Microsoft.Data.SqlClient.Server.UIntNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.Data.SqlClient.Server.ULongNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.Data.SqlClient.Server.UShortNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal static class Microsoft.Data.SqlClient.Server.ValueUtilsSmi : object {
    private static int MaxByteChunkSize;
    private static int MaxCharChunkSize;
    private static int NoLengthLimit;
    private static int DefaultBinaryBufferSize;
    private static int DefaultTextBufferSize;
    private static Object[] s_typeSpecificNullForSqlValue;
    private static DateTime s_smallDateTimeMax;
    private static DateTime s_smallDateTimeMin;
    private static TimeSpan s_timeSpanMin;
    private static TimeSpan s_timeSpanMax;
    private static bool X;
    private static bool _;
    private static Boolean[0...,0...] s_canAccessGetterDirectly;
    private static Boolean[0...,0...] s_canAccessSetterDirectly;
    private static ValueUtilsSmi();
    internal static bool IsDBNull(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    internal static bool GetBoolean(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static byte GetByte(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    private static long GetBytesConversion(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length, bool throwOnNull);
    internal static long GetBytes(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiExtendedMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length, bool throwOnNull);
    internal static long GetBytesInternal(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length, bool throwOnNull);
    internal static long GetChars(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal static DateTime GetDateTime(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static DateTimeOffset GetDateTimeOffset(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, bool gettersSupport2008DateTime);
    internal static DateTimeOffset GetDateTimeOffset(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData);
    internal static decimal GetDecimal(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static double GetDouble(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static Guid GetGuid(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static short GetInt16(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static int GetInt32(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static long GetInt64(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static float GetSingle(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlBinary GetSqlBinary(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlBoolean GetSqlBoolean(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlByte GetSqlByte(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlBytes GetSqlBytes(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, object context);
    internal static SqlChars GetSqlChars(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, object context);
    internal static SqlDateTime GetSqlDateTime(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlDecimal GetSqlDecimal(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlDouble GetSqlDouble(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlGuid GetSqlGuid(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlInt16 GetSqlInt16(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlInt32 GetSqlInt32(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlInt64 GetSqlInt64(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlMoney GetSqlMoney(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlSingle GetSqlSingle(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlString GetSqlString(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlXml GetSqlXml(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, object context);
    internal static string GetString(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static TimeSpan GetTimeSpan(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData);
    internal static object GetValue200(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData, object context);
    internal static object GetValue(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, object context);
    internal static object GetSqlValue200(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData, object context);
    internal static object GetSqlValue(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, object context);
    internal static object NullUdtInstance(SmiMetaData metaData);
    internal static void SetDBNull(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal);
    internal static void SetBoolean(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, bool value);
    internal static void SetByte(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, byte value);
    internal static long SetBytes(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal static long SetBytesLength(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long length);
    internal static long SetChars(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal static void SetDateTime(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    internal static void SetDateTimeOffset(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTimeOffset value, bool settersSupport2008DateTime);
    internal static void SetDecimal(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, decimal value);
    internal static void SetDouble(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, double value);
    internal static void SetGuid(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, Guid value);
    internal static void SetInt16(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, short value);
    internal static void SetInt32(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, int value);
    internal static void SetInt64(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long value);
    internal static void SetSingle(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, float value);
    internal static void SetSqlBinary(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBinary value);
    internal static void SetSqlBoolean(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBoolean value);
    internal static void SetSqlByte(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlByte value);
    internal static void SetSqlBytes(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBytes value);
    internal static void SetSqlChars(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlChars value);
    internal static void SetSqlDateTime(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDateTime value);
    internal static void SetSqlDecimal(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDecimal value);
    internal static void SetSqlDouble(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDouble value);
    internal static void SetSqlGuid(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlGuid value);
    internal static void SetSqlInt16(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlInt16 value);
    internal static void SetSqlInt32(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlInt32 value);
    internal static void SetSqlInt64(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlInt64 value);
    internal static void SetSqlMoney(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlMoney value);
    internal static void SetSqlSingle(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlSingle value);
    internal static void SetSqlString(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlString value);
    internal static void SetSqlXml(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlXml value);
    internal static void SetString(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, string value);
    internal static void SetTimeSpan(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, TimeSpan value, bool settersSupport2008DateTime);
    internal static void SetCompatibleValue(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, object value, ExtendedClrTypeCode typeCode, int offset);
    internal static void SetCompatibleValueV200(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, object value, ExtendedClrTypeCode typeCode, int offset, ParameterPeekAheadValue peekAhead, StorageType storageType);
    internal static void SetCompatibleValueV200(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, object value, ExtendedClrTypeCode typeCode, int offset, ParameterPeekAheadValue peekAhead);
    internal static void FillCompatibleITypedSettersFromReader(SmiEventSink_Default sink, ITypedSettersV3 setters, SmiMetaData[] metaData, SqlDataReader reader);
    internal static void FillCompatibleSettersFromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, IList`1<SmiExtendedMetaData> metaData, DbDataReader reader);
    internal static void FillCompatibleSettersFromRecord(SmiEventSink_Default sink, SmiTypedGetterSetter setters, SmiMetaData[] metaData, SqlDataRecord record, SmiDefaultFieldsProperty useDefaultValues);
    private static object GetUdt_LengthChecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    private static decimal GetDecimal_PossiblyMoney(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    private static void SetDecimal_PossiblyMoney(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, decimal value);
    private static void VerifyDateTimeRange(SqlDbType dbType, DateTime value);
    private static void VerifyTimeRange(SqlDbType dbType, TimeSpan value);
    private static void SetDateTime_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetTimeSpan_Checked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, TimeSpan value);
    private static void SetSqlDateTime_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDateTime value);
    private static void SetDateTime2_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetDate_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetSqlMoney_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlMoney value);
    private static void SetByteArray_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, Byte[] buffer, int offset);
    private static void SetCharArray_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, Char[] buffer, int offset);
    private static void SetSqlBinary_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBinary value, int offset);
    private static void SetBytes_FromRecord(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDataRecord record, int offset);
    private static void SetBytes_FromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader reader, int offset);
    private static void SetSqlBytes_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBytes value, int offset);
    private static void SetChars_FromRecord(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDataRecord record, int offset);
    private static void SetCharsOrString_FromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader reader, int offset);
    private static void SetChars_FromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader reader, int offset);
    private static void SetString_FromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader reader, int offset);
    private static void SetSqlChars_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlChars value, int offset);
    private static void SetSqlString_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlString value, int offset);
    private static void SetString_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, string value, int offset);
    private static void SetUdt_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, object value);
    private static void ThrowIfInvalidSetterAccess(SmiMetaData metaData, ExtendedClrTypeCode setterTypeCode);
    private static void ThrowIfITypedGettersIsNull(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static bool CanAccessGetterDirectly(SmiMetaData metaData, ExtendedClrTypeCode setterTypeCode);
    private static bool CanAccessSetterDirectly(SmiMetaData metaData, ExtendedClrTypeCode setterTypeCode);
    private static long PositiveMin(long first, long second);
    private static int CheckXetParameters(SqlDbType dbType, long maxLength, long actualLength, long fieldOffset, int bufferLength, int bufferOffset, int length);
    private static bool IsDBNull_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static bool GetBoolean_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static byte GetByte_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static Byte[] GetByteArray_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    internal static int GetBytes_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    private static long GetBytesLength_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static Char[] GetCharArray_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    internal static int GetChars_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    private static long GetCharsLength_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static DateTime GetDateTime_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static DateTimeOffset GetDateTimeOffset_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal);
    private static double GetDouble_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static Guid GetGuid_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static short GetInt16_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static int GetInt32_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static long GetInt64_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static float GetSingle_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static SqlBinary GetSqlBinary_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static SqlDecimal GetSqlDecimal_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static SqlMoney GetSqlMoney_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static SqlXml GetSqlXml_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, object context);
    private static string GetString_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static TimeSpan GetTimeSpan_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal);
    private static void SetBoolean_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, bool value);
    private static void SetByteArray_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, Byte[] buffer, int bufferOffset, int length);
    private static void SetStream_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metadata, StreamDataFeed feed);
    private static void SetTextReader_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metadata, TextDataFeed feed);
    private static void SetByte_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, byte value);
    private static int SetBytes_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    private static void SetCharArray_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, Char[] buffer, int bufferOffset, int length);
    private static int SetChars_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    private static void SetDBNull_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal);
    private static void SetDecimal_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, decimal value);
    private static void SetDateTime_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, DateTime value);
    private static void SetDateTime2_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetDate_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetTimeSpan_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, TimeSpan value);
    private static void SetDateTimeOffset_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, DateTimeOffset value);
    private static void SetDouble_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, double value);
    private static void SetGuid_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, Guid value);
    private static void SetInt16_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, short value);
    private static void SetInt32_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, int value);
    private static void SetInt64_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, long value);
    private static void SetSingle_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, float value);
    private static void SetSqlBinary_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlBinary value, int offset, int length);
    private static void SetSqlBoolean_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlBoolean value);
    private static void SetSqlByte_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlByte value);
    private static void SetSqlBytes_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlBytes value, int offset, long length);
    private static void SetSqlChars_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlChars value, int offset, int length);
    private static void SetSqlDateTime_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlDateTime value);
    private static void SetSqlDecimal_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlDecimal value);
    private static void SetSqlDouble_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlDouble value);
    private static void SetSqlGuid_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlGuid value);
    private static void SetSqlInt16_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlInt16 value);
    private static void SetSqlInt32_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlInt32 value);
    private static void SetSqlInt64_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlInt64 value);
    private static void SetSqlMoney_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlMoney value);
    private static void SetSqlSingle_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlSingle value);
    private static void SetSqlString_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlString value, int offset, int length);
    private static void SetSqlXml_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlXml value);
    private static void SetXmlReader_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, XmlReader xmlReader);
    private static void SetString_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, string value, int offset, int length);
    private static void SetDbDataReader_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader value);
    private static void SetIEnumerableOfSqlDataRecord_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, IEnumerable`1<SqlDataRecord> value, ParameterPeekAheadValue peekAhead);
    private static void SetDataTable_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DataTable value);
    internal static Stream CopyIntoNewSmiScratchStream(Stream source, SmiEventSink_Default sink, object context);
}
internal class Microsoft.Data.SqlClient.ServerInfo : object {
    [CompilerGeneratedAttribute]
private string <ExtendedServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResolvedServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResolvedDatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserProtocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerSPN>k__BackingField;
    private string _userServerName;
    internal string PreRoutingServerName;
    internal string ExtendedServerName { get; private set; }
    internal string ResolvedServerName { get; private set; }
    internal string ResolvedDatabaseName { get; private set; }
    internal string UserProtocol { get; private set; }
    internal string ServerSPN { get; private set; }
    internal string UserServerName { get; private set; }
    internal ServerInfo(SqlConnectionString userOptions);
    internal ServerInfo(SqlConnectionString userOptions, string serverName, string serverSPN);
    private ServerInfo(SqlConnectionString userOptions, string serverName);
    internal ServerInfo(SqlConnectionString userOptions, RoutingInfo routing, string preRoutingServerName, string serverSPN);
    [CompilerGeneratedAttribute]
internal string get_ExtendedServerName();
    [CompilerGeneratedAttribute]
private void set_ExtendedServerName(string value);
    [CompilerGeneratedAttribute]
internal string get_ResolvedServerName();
    [CompilerGeneratedAttribute]
private void set_ResolvedServerName(string value);
    [CompilerGeneratedAttribute]
internal string get_ResolvedDatabaseName();
    [CompilerGeneratedAttribute]
private void set_ResolvedDatabaseName(string value);
    [CompilerGeneratedAttribute]
internal string get_UserProtocol();
    [CompilerGeneratedAttribute]
private void set_UserProtocol(string value);
    [CompilerGeneratedAttribute]
internal string get_ServerSPN();
    [CompilerGeneratedAttribute]
private void set_ServerSPN(string value);
    internal string get_UserServerName();
    private void set_UserServerName(string value);
    internal void SetDerivedNames(string protocol, string serverName);
}
internal class Microsoft.Data.SqlClient.SessionData : object {
    internal static int _maxNumberOfSessionStates;
    internal UInt32 _tdsVersion;
    internal bool _encrypted;
    internal string _database;
    internal SqlCollation _collation;
    internal string _language;
    internal string _initialDatabase;
    internal SqlCollation _initialCollation;
    internal string _initialLanguage;
    internal byte _unrecoverableStatesCount;
    internal Dictionary`2<string, Tuple`2<string, string>> _resolvedAliases;
    internal SessionStateRecord[] _delta;
    internal bool _deltaDirty;
    internal Byte[][] _initialState;
    public SessionData(SessionData recoveryData);
    public void Reset();
    [ConditionalAttribute("DEBUG")]
public void AssertUnrecoverableStateCountIsCorrect();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
internal class Microsoft.Data.SqlClient.SessionHandle : ValueType {
    public static int NativeHandleType;
    public static int ManagedHandleType;
    public SNIHandle ManagedHandle;
    public SNIHandle NativeHandle;
    public int Type;
    public bool IsNull { get; }
    public SessionHandle(SNIHandle managedHandle, SNIHandle nativeHandle, int type);
    public bool get_IsNull();
    public static SessionHandle FromManagedSession(SNIHandle managedSessionHandle);
    public static SessionHandle FromNativeHandle(SNIHandle nativeSessionHandle);
}
internal class Microsoft.Data.SqlClient.SessionStateRecord : object {
    internal bool _recoverable;
    internal UInt32 _version;
    internal int _dataLength;
    internal Byte[] _data;
}
internal class Microsoft.Data.SqlClient.SNI.ConcurrentQueueSemaphore : object {
    private SemaphoreSlim _semaphore;
    private ConcurrentQueue`1<TaskCompletionSource`1<bool>> _queue;
    public ConcurrentQueueSemaphore(int initialCount);
    public Task WaitAsync(CancellationToken cancellationToken);
    public void Release();
}
internal class Microsoft.Data.SqlClient.SNI.DataSource : object {
    private static char CommaSeparator;
    private static char SemiColon;
    private static char BackSlashCharacter;
    private static string DefaultHostName;
    private static string DefaultSqlServerInstanceName;
    private static string PipeBeginning;
    private static string Slash;
    private static string PipeToken;
    private static string LocalDbHost;
    private static string LocalDbHost_NP;
    private static string NamedPipeInstanceNameHeader;
    private static string DefaultPipeName;
    private static string InstancePrefix;
    private static string PathSeparator;
    internal Protocol _connectionProtocol;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ResolvedPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PipeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PipeHostName>k__BackingField;
    private string _workingDataSource;
    private string _dataSourceAfterTrimmingProtocol;
    [CompilerGeneratedAttribute]
private bool <IsBadDataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSsrpRequired>k__BackingField;
    internal string ServerName { get; private set; }
    internal int Port { get; private set; }
    internal int ResolvedPort { get; internal set; }
    internal string InstanceName { get; private set; }
    internal string PipeName { get; private set; }
    internal string PipeHostName { get; private set; }
    internal bool IsBadDataSource { get; private set; }
    internal bool IsSsrpRequired { get; private set; }
    private DataSource(string dataSource);
    [CompilerGeneratedAttribute]
internal string get_ServerName();
    [CompilerGeneratedAttribute]
private void set_ServerName(string value);
    [CompilerGeneratedAttribute]
internal int get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(int value);
    [CompilerGeneratedAttribute]
internal int get_ResolvedPort();
    [CompilerGeneratedAttribute]
internal void set_ResolvedPort(int value);
    [CompilerGeneratedAttribute]
internal string get_InstanceName();
    [CompilerGeneratedAttribute]
private void set_InstanceName(string value);
    [CompilerGeneratedAttribute]
internal string get_PipeName();
    [CompilerGeneratedAttribute]
private void set_PipeName(string value);
    [CompilerGeneratedAttribute]
internal string get_PipeHostName();
    [CompilerGeneratedAttribute]
private void set_PipeHostName(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsBadDataSource();
    [CompilerGeneratedAttribute]
private void set_IsBadDataSource(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsSsrpRequired();
    [CompilerGeneratedAttribute]
private void set_IsSsrpRequired(bool value);
    private void PopulateProtocol();
    internal static string GetLocalDBInstance(string dataSource, Boolean& error);
    internal static DataSource ParseServerName(string dataSource);
    private void InferLocalServerName();
    private bool InferConnectionDetails();
    private void ReportSNIError(SNIProviders provider);
    private bool InferNamedPipesInformation();
    private static bool IsLocalHost(string serverName);
}
internal class Microsoft.Data.SqlClient.SNI.LocalDB : object {
    private static LocalDB Instance;
    private static string LocalDBInstalledVersionRegistryKey;
    private static string InstanceAPIPathValueName;
    private static string ProcLocalDBStartInstance;
    private static int MAX_LOCAL_DB_CONNECTION_STRING_SIZE;
    private IntPtr _startInstanceHandle;
    private LocalDBStartInstance localDBStartInstanceFunc;
    private SafeLibraryHandle modreq(System.Runtime.CompilerServices.IsVolatile) _sqlUserInstanceLibraryHandle;
    private static LocalDB();
    internal static string GetLocalDBConnectionString(string localDbInstance);
    internal static IntPtr GetProcAddress(string functionName);
    private string GetConnectionString(string localDbInstance);
    internal static UInt32 MapLocalDBErrorStateToCode(LocalDBErrorState errorState);
    internal static string MapLocalDBErrorStateToErrorMessage(LocalDBErrorState errorState);
    private bool LoadUserInstanceDll();
    private string GetUserInstanceDllPath(LocalDBErrorState& errorState);
}
internal class Microsoft.Data.SqlClient.SNI.SNIAsyncCallback : MulticastDelegate {
    public SNIAsyncCallback(object object, IntPtr method);
    public virtual void Invoke(SNIPacket packet, UInt32 sniErrorCode);
    public virtual IAsyncResult BeginInvoke(SNIPacket packet, UInt32 sniErrorCode, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Data.SqlClient.SNI.SNICommon : object {
    internal static int ConnTerminatedError;
    internal static int InvalidParameterError;
    internal static int ProtocolNotSupportedError;
    internal static int ConnTimeoutError;
    internal static int ConnNotUsableError;
    internal static int InvalidConnStringError;
    internal static int ErrorLocatingServerInstance;
    internal static int HandshakeFailureError;
    internal static int InternalExceptionError;
    internal static int ConnOpenFailedError;
    internal static int ErrorSpnLookup;
    internal static int LocalDBErrorCode;
    internal static int MultiSubnetFailoverWithMoreThan64IPs;
    internal static int MultiSubnetFailoverWithInstanceSpecified;
    internal static int MultiSubnetFailoverWithNonTcpProtocol;
    internal static int MaxErrorValue;
    internal static int LocalDBNoInstanceName;
    internal static int LocalDBNoInstallation;
    internal static int LocalDBInvalidConfig;
    internal static int LocalDBNoSqlUserInstanceDllPath;
    internal static int LocalDBInvalidSqlUserInstanceDllPath;
    internal static int LocalDBFailedToLoadDll;
    internal static int LocalDBBadRuntime;
    internal static bool ValidateSslServerCertificate(string targetServerName, X509Certificate cert, SslPolicyErrors policyErrors);
    internal static bool ValidateSslServerCertificate(X509Certificate clientCert, X509Certificate serverCert, SslPolicyErrors policyErrors);
    internal static IPAddress[] GetDnsIpAddresses(string serverName, TimeoutTimer timeout);
    internal static IPAddress[] GetDnsIpAddresses(string serverName);
    internal static UInt32 ReportSNIError(SNIProviders provider, UInt32 nativeError, UInt32 sniError, string errorMessage);
    internal static UInt32 ReportSNIError(SNIProviders provider, UInt32 sniError, Exception sniException, UInt32 nativeErrorCode);
    internal static UInt32 ReportSNIError(SNIError error);
}
internal class Microsoft.Data.SqlClient.SNI.SNIError : object {
    internal static UInt32 CertificateValidationErrorCode;
    public SNIProviders provider;
    public string errorMessage;
    public UInt32 nativeError;
    public UInt32 sniError;
    public string function;
    public UInt32 lineNumber;
    public Exception exception;
    public SNIError(SNIProviders provider, UInt32 nativeError, UInt32 sniErrorCode, string errorMessage);
    public SNIError(SNIProviders provider, UInt32 sniErrorCode, Exception sniException, UInt32 nativeErrorCode);
}
internal abstract class Microsoft.Data.SqlClient.SNI.SNIHandle : object {
    protected static SslProtocols s_supportedProtocols;
    protected static List`1<SslApplicationProtocol> s_tdsProtocols;
    [CompilerGeneratedAttribute]
private int <ProtocolVersion>k__BackingField;
    public UInt32 Status { get; }
    public Guid ConnectionId { get; }
    public int ReserveHeaderSize { get; }
    public int ProtocolVersion { get; }
    private static SNIHandle();
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.SNI.SNIHandle/<AuthenticateAsClientAsync>d__2")]
protected static Task AuthenticateAsClientAsync(SslStream sslStream, string serverNameIndication, X509CertificateCollection certificate, CancellationToken token);
    protected static void AuthenticateAsClient(SslStream sslStream, string serverNameIndication, X509CertificateCollection certificate);
    public abstract virtual void Dispose();
    public abstract virtual void SetAsyncCallbacks(SNIAsyncCallback receiveCallback, SNIAsyncCallback sendCallback);
    public abstract virtual void SetBufferSize(int bufferSize);
    public abstract virtual UInt32 Send(SNIPacket packet);
    public abstract virtual UInt32 SendAsync(SNIPacket packet);
    public abstract virtual UInt32 Receive(SNIPacket& packet, int timeoutInMilliseconds);
    public abstract virtual UInt32 ReceiveAsync(SNIPacket& packet);
    public abstract virtual UInt32 EnableSsl(UInt32 options);
    public abstract virtual void DisableSsl();
    public abstract virtual UInt32 CheckConnection();
    public abstract virtual UInt32 get_Status();
    public abstract virtual Guid get_ConnectionId();
    public virtual int get_ReserveHeaderSize();
    public abstract virtual SNIPacket RentPacket(int headerSize, int dataSize);
    public abstract virtual void ReturnPacket(SNIPacket packet);
    [CompilerGeneratedAttribute]
public virtual int get_ProtocolVersion();
}
internal class Microsoft.Data.SqlClient.SNI.SNILoadHandle : object {
    public static SNILoadHandle SingletonInstance;
    public EncryptionOptions _encryptionOption;
    public ThreadLocal`1<SNIError> _lastError;
    private UInt32 _status;
    public SNIError LastError { get; public set; }
    public UInt32 Status { get; }
    public EncryptionOptions Options { get; }
    public bool ClientOSEncryptionSupport { get; }
    private static SNILoadHandle();
    public SNIError get_LastError();
    public void set_LastError(SNIError value);
    public UInt32 get_Status();
    public EncryptionOptions get_Options();
    public bool get_ClientOSEncryptionSupport();
}
internal class Microsoft.Data.SqlClient.SNI.SNIMarsConnection : object {
    private Guid _connectionId;
    private Dictionary`2<int, SNIMarsHandle> _sessions;
    private Byte[] _headerBytes;
    private SNISMUXHeader _currentHeader;
    private object _sync;
    private SNIHandle _lowerHandle;
    private ushort _nextSessionId;
    private int _currentHeaderByteCount;
    private int _dataBytesLeft;
    private SNIPacket _currentPacket;
    public Guid ConnectionId { get; }
    public int ProtocolVersion { get; }
    internal object DemuxerSync { get; }
    public SNIMarsConnection(SNIHandle lowerHandle);
    public Guid get_ConnectionId();
    public int get_ProtocolVersion();
    internal object get_DemuxerSync();
    public SNIMarsHandle CreateMarsSession(object callbackObject, bool async);
    public UInt32 StartReceive();
    public UInt32 Send(SNIPacket packet);
    public UInt32 SendAsync(SNIPacket packet);
    public UInt32 ReceiveAsync(SNIPacket& packet);
    public UInt32 CheckConnection();
    public void HandleReceiveError(SNIPacket packet);
    public void HandleSendComplete(SNIPacket packet, UInt32 sniErrorCode);
    public void HandleReceiveComplete(SNIPacket packet, UInt32 sniErrorCode);
    public UInt32 EnableSsl(UInt32 options);
    public void DisableSsl();
    public SNIPacket RentPacket(int headerSize, int dataSize);
    public void ReturnPacket(SNIPacket packet);
}
internal class Microsoft.Data.SqlClient.SNI.SNIMarsHandle : SNIHandle {
    private static UInt32 ACK_THRESHOLD;
    private SNIMarsConnection _connection;
    private UInt32 _status;
    private Queue`1<SNIPacket> _receivedPacketQueue;
    private Queue`1<SNIPacket> _sendPacketQueue;
    private object _callbackObject;
    private Guid _connectionId;
    private ushort _sessionId;
    private ManualResetEventSlim _packetEvent;
    private ManualResetEventSlim _ackEvent;
    private SNISMUXHeader _currentHeader;
    private SNIAsyncCallback _handleSendCompleteCallback;
    private UInt32 _sendHighwater;
    private int _asyncReceives;
    private UInt32 _receiveHighwater;
    private UInt32 _receiveHighwaterLastAck;
    private UInt32 _sequenceNumber;
    private SNIError _connectionError;
    public Guid ConnectionId { get; }
    public UInt32 Status { get; }
    public int ReserveHeaderSize { get; }
    public int ProtocolVersion { get; }
    public SNIMarsHandle(SNIMarsConnection connection, ushort sessionId, object callbackObject, bool async);
    public virtual Guid get_ConnectionId();
    public virtual UInt32 get_Status();
    public virtual int get_ReserveHeaderSize();
    public virtual int get_ProtocolVersion();
    public virtual void Dispose();
    private void SendControlPacket(SNISMUXFlags flags);
    private void SetupSMUXHeader(int length, SNISMUXFlags flags);
    private SNIPacket SetPacketSMUXHeader(SNIPacket packet);
    public virtual UInt32 Send(SNIPacket packet);
    private UInt32 InternalSendAsync(SNIPacket packet);
    private UInt32 SendPendingPackets();
    public virtual UInt32 SendAsync(SNIPacket packet);
    public virtual UInt32 ReceiveAsync(SNIPacket& packet);
    public void HandleReceiveError(SNIPacket packet);
    public void HandleSendComplete(SNIPacket packet, UInt32 sniErrorCode);
    public void HandleAck(UInt32 highwater);
    public void HandleReceiveComplete(SNIPacket packet, SNISMUXHeader header);
    private void SendAckIfNecessary();
    public virtual UInt32 Receive(SNIPacket& packet, int timeoutInMilliseconds);
    public virtual UInt32 CheckConnection();
    public virtual void SetAsyncCallbacks(SNIAsyncCallback receiveCallback, SNIAsyncCallback sendCallback);
    public virtual void SetBufferSize(int bufferSize);
    public virtual UInt32 EnableSsl(UInt32 options);
    public virtual void DisableSsl();
    public virtual SNIPacket RentPacket(int headerSize, int dataSize);
    public virtual void ReturnPacket(SNIPacket packet);
}
internal class Microsoft.Data.SqlClient.SNI.SNINetworkStream : NetworkStream {
    private ConcurrentQueueSemaphore _writeAsyncSemaphore;
    private ConcurrentQueueSemaphore _readAsyncSemaphore;
    public SNINetworkStream(Socket socket, bool ownsSocket);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.SNI.SNINetworkStream/<ReadAsync>d__1")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.SNI.SNINetworkStream/<WriteAsync>d__3")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<int> <>n__0(Memory`1<byte> buffer, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__1(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
}
internal class Microsoft.Data.SqlClient.SNI.SNINpHandle : SNIPhysicalHandle {
    internal static string DefaultPipePath;
    private string _targetServer;
    private object _sendSync;
    private bool _tlsFirst;
    private Stream _stream;
    private NamedPipeClientStream _pipeStream;
    private SslOverTdsStream _sslOverTdsStream;
    private SslStream _sslStream;
    private SNIAsyncCallback _receiveCallback;
    private SNIAsyncCallback _sendCallback;
    private bool _validateCert;
    private UInt32 _status;
    private int _bufferSize;
    private Guid _connectionId;
    public Guid ConnectionId { get; }
    public UInt32 Status { get; }
    public int ProtocolVersion { get; }
    public SNINpHandle(string serverName, string pipeName, TimeoutTimer timeout, bool tlsFirst);
    public virtual Guid get_ConnectionId();
    public virtual UInt32 get_Status();
    public virtual int get_ProtocolVersion();
    public virtual UInt32 CheckConnection();
    public virtual void Dispose();
    public virtual UInt32 Receive(SNIPacket& packet, int timeout);
    public virtual UInt32 ReceiveAsync(SNIPacket& packet);
    public virtual UInt32 Send(SNIPacket packet);
    public virtual UInt32 SendAsync(SNIPacket packet);
    public virtual void SetAsyncCallbacks(SNIAsyncCallback receiveCallback, SNIAsyncCallback sendCallback);
    public virtual UInt32 EnableSsl(UInt32 options);
    public virtual void DisableSsl();
    private bool ValidateServerCertificate(object sender, X509Certificate cert, X509Chain chain, SslPolicyErrors policyErrors);
    public virtual void SetBufferSize(int bufferSize);
    private UInt32 ReportErrorAndReleasePacket(SNIPacket packet, Exception sniException);
    private UInt32 ReportErrorAndReleasePacket(SNIPacket packet, UInt32 nativeError, UInt32 sniError, string errorMessage);
}
internal class Microsoft.Data.SqlClient.SNI.SNIPacket : object {
    private static Action`2<Task`1<int>, object> s_readCallback;
    private int _dataLength;
    private int _dataCapacity;
    private int _dataOffset;
    private int _headerLength;
    private Byte[] _data;
    private SNIAsyncCallback _asyncIOCompletionCallback;
    [CompilerGeneratedAttribute]
private bool <IsOutOfBand>k__BackingField;
    public int DataLeft { get; }
    public bool IsOutOfBand { get; public set; }
    public int Length { get; }
    public bool IsInvalid { get; }
    public int ReservedHeaderSize { get; }
    public bool HasAsyncIOCompletionCallback { get; }
    private static SNIPacket();
    public int get_DataLeft();
    [CompilerGeneratedAttribute]
public bool get_IsOutOfBand();
    [CompilerGeneratedAttribute]
public void set_IsOutOfBand(bool value);
    public int get_Length();
    public bool get_IsInvalid();
    public int get_ReservedHeaderSize();
    public bool get_HasAsyncIOCompletionCallback();
    public void SetAsyncIOCompletionCallback(SNIAsyncCallback asyncIOCompletionCallback);
    public void InvokeAsyncIOCompletionCallback(UInt32 sniErrorCode);
    public void Allocate(int headerLength, int dataLength);
    public void GetData(Byte[] buffer, Int32& dataSize);
    public int TakeData(SNIPacket packet, int size);
    public void AppendData(Byte[] data, int size);
    public int TakeData(Byte[] buffer, int dataOffset, int size);
    public Span`1<byte> GetHeaderBuffer(int headerSize);
    public void SetHeaderActive();
    public void Release();
    public void ReadFromStream(Stream stream);
    public void ReadFromStreamAsync(Stream stream);
    private static void ReadFromStreamAsyncContinuation(Task`1<int> task, object state);
    public void WriteToStream(Stream stream);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.SNI.SNIPacket/<WriteToStreamAsync>d__36")]
public void WriteToStreamAsync(Stream stream, SNIAsyncCallback callback, SNIProviders provider);
}
internal abstract class Microsoft.Data.SqlClient.SNI.SNIPhysicalHandle : SNIHandle {
    protected static int DefaultPoolSize;
    private SqlObjectPool`1<SNIPacket> _pool;
    protected SNIPhysicalHandle(int poolSize);
    public virtual SNIPacket RentPacket(int headerSize, int dataSize);
    public virtual void ReturnPacket(SNIPacket packet);
}
internal enum Microsoft.Data.SqlClient.SNI.SNIProviders : Enum {
    public int value__;
    public static SNIProviders HTTP_PROV;
    public static SNIProviders NP_PROV;
    public static SNIProviders SESSION_PROV;
    public static SNIProviders SIGN_PROV;
    public static SNIProviders SM_PROV;
    public static SNIProviders SMUX_PROV;
    public static SNIProviders SSL_PROV;
    public static SNIProviders TCP_PROV;
    public static SNIProviders VIA_PROV;
    public static SNIProviders CTAIP_PROV;
    public static SNIProviders MAX_PROVS;
    public static SNIProviders INVALID_PROV;
}
internal class Microsoft.Data.SqlClient.SNI.SNIProxy : object {
    private static int DefaultSqlServerPort;
    private static int DefaultSqlServerDacPort;
    private static string SqlServerSpnHeader;
    private static SNIProxy s_singleton;
    internal static SNIProxy Instance { get; }
    private static SNIProxy();
    internal static SNIProxy get_Instance();
    internal static void GenSspiClientContext(SspiClientContextStatus sspiClientContextStatus, Byte[] receivedBuff, Byte[]& sendBuff, Byte[][] serverName);
    private static bool IsErrorStatus(SecurityStatusPalErrorCode errorCode);
    internal static SNIHandle CreateConnectionHandle(string fullServerName, TimeoutTimer timeout, Byte[]& instanceName, Byte[][]& spnBuffer, string serverSPN, bool flushCache, bool async, bool parallel, bool isIntegratedSecurity, SqlConnectionIPAddressPreference ipPreference, string cachedFQDN, SQLDNSInfo& pendingDNSInfo, bool tlsFirst, string hostNameInCertificate, string serverCertificateFilename);
    private static Byte[][] GetSqlServerSPNs(DataSource dataSource, string serverSPN);
    private static Byte[][] GetSqlServerSPNs(string hostNameOrAddress, string portOrInstanceName, Protocol protocol);
    private static SNITCPHandle CreateTcpHandle(DataSource details, TimeoutTimer timeout, bool parallel, SqlConnectionIPAddressPreference ipPreference, string cachedFQDN, SQLDNSInfo& pendingDNSInfo, bool tlsFirst, string hostNameInCertificate, string serverCertificateFilename);
    private static SNINpHandle CreateNpHandle(DataSource details, TimeoutTimer timeout, bool parallel, bool tlsFirst);
    internal SNIError GetLastError();
    private static string GetLocalDBDataSource(string fullServerName, Boolean& error);
}
[FlagsAttribute]
internal enum Microsoft.Data.SqlClient.SNI.SNISMUXFlags : Enum {
    public int value__;
    public static SNISMUXFlags SMUX_SYN;
    public static SNISMUXFlags SMUX_ACK;
    public static SNISMUXFlags SMUX_FIN;
    public static SNISMUXFlags SMUX_DATA;
}
internal class Microsoft.Data.SqlClient.SNI.SNISMUXHeader : object {
    public static int HEADER_LENGTH;
    public byte SMID;
    public byte flags;
    public ushort sessionId;
    public UInt32 length;
    public UInt32 sequenceNumber;
    public UInt32 highwater;
    public void Read(Byte[] bytes);
    public void Write(Span`1<byte> bytes);
}
internal class Microsoft.Data.SqlClient.SNI.SNISslStream : SslStream {
    private ConcurrentQueueSemaphore _writeAsyncSemaphore;
    private ConcurrentQueueSemaphore _readAsyncSemaphore;
    public SNISslStream(Stream innerStream, bool leaveInnerStreamOpen, RemoteCertificateValidationCallback userCertificateValidationCallback);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.SNI.SNISslStream/<ReadAsync>d__1")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.SNI.SNISslStream/<WriteAsync>d__3")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask`1<int> <>n__0(Memory`1<byte> buffer, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private ValueTask <>n__1(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
}
internal class Microsoft.Data.SqlClient.SNI.SNITCPHandle : SNIPhysicalHandle {
    private string _targetServer;
    private object _sendSync;
    private Socket _socket;
    private NetworkStream _tcpStream;
    private string _hostNameInCertificate;
    private string _serverCertificateFilename;
    private bool _tlsFirst;
    private Stream _stream;
    private SslStream _sslStream;
    private SslOverTdsStream _sslOverTdsStream;
    private SNIAsyncCallback _receiveCallback;
    private SNIAsyncCallback _sendCallback;
    private bool _validateCert;
    private int _bufferSize;
    private UInt32 _status;
    private Guid _connectionId;
    private static int MaxParallelIpAddresses;
    public Guid ConnectionId { get; }
    public UInt32 Status { get; }
    public int ProtocolVersion { get; }
    public SNITCPHandle(string serverName, int port, TimeoutTimer timeout, bool parallel, SqlConnectionIPAddressPreference ipPreference, string cachedFQDN, SQLDNSInfo& pendingDNSInfo, bool tlsFirst, string hostNameInCertificate, string serverCertificateFilename);
    public virtual void Dispose();
    public virtual Guid get_ConnectionId();
    public virtual UInt32 get_Status();
    public virtual int get_ProtocolVersion();
    private Socket TryConnectParallel(string hostName, int port, TimeoutTimer timeout, Boolean& callerReportError, string cachedFQDN, SQLDNSInfo& pendingDNSInfo);
    [IteratorStateMachineAttribute("Microsoft.Data.SqlClient.SNI.SNITCPHandle/<GetHostAddressesSortedByPreference>d__26")]
private static IEnumerable`1<IPAddress> GetHostAddressesSortedByPreference(string serverName, SqlConnectionIPAddressPreference ipPreference);
    private static Socket Connect(string serverName, int port, TimeoutTimer timeout, SqlConnectionIPAddressPreference ipPreference, string cachedFQDN, SQLDNSInfo& pendingDNSInfo);
    private static Task`1<Socket> ParallelConnectAsync(IPAddress[] serverAddresses, int port);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.SNI.SNITCPHandle/<ParallelConnectHelper>d__29")]
private static void ParallelConnectHelper(Socket socket, Task connectTask, TaskCompletionSource`1<Socket> tcs, StrongBox`1<int> pendingCompleteCount, StrongBox`1<Exception> lastError, List`1<Socket> sockets);
    public virtual UInt32 EnableSsl(UInt32 options);
    public virtual void DisableSsl();
    private bool ValidateServerCertificate(object sender, X509Certificate serverCertificate, X509Chain chain, SslPolicyErrors policyErrors);
    public virtual void SetBufferSize(int bufferSize);
    public virtual UInt32 Send(SNIPacket packet);
    public virtual UInt32 Receive(SNIPacket& packet, int timeoutInMilliseconds);
    public virtual void SetAsyncCallbacks(SNIAsyncCallback receiveCallback, SNIAsyncCallback sendCallback);
    public virtual UInt32 SendAsync(SNIPacket packet);
    public virtual UInt32 ReceiveAsync(SNIPacket& packet);
    public virtual UInt32 CheckConnection();
    private UInt32 ReportTcpSNIError(Exception sniException, UInt32 nativeErrorCode);
    private UInt32 ReportTcpSNIError(UInt32 nativeError, UInt32 sniError, string errorMessage);
    private UInt32 ReportErrorAndReleasePacket(SNIPacket packet, Exception sniException);
    private UInt32 ReportErrorAndReleasePacket(SNIPacket packet, UInt32 nativeError, UInt32 sniError, string errorMessage);
    internal static void SetKeepAliveValues(Socket& socket);
}
internal class Microsoft.Data.SqlClient.SNI.SslOverTdsStream : Stream {
    private Stream _stream;
    private Guid _connectionId;
    private int _packetBytes;
    private bool _encapsulate;
    private static int PACKET_SIZE_WITHOUT_HEADER;
    private static int PRELOGIN_PACKET_TYPE;
    public long Position { get; public set; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public SslOverTdsStream(Stream stream);
    public SslOverTdsStream(Stream stream, Guid connectionId);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int Read(Span`1<byte> buffer);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.SNI.SslOverTdsStream/<ReadAsync>d__5")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void Write(ReadOnlySpan`1<byte> buffer);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.SNI.SslOverTdsStream/<WriteAsync>d__7")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public void FinishHandshake();
    public virtual void SetLength(long value);
    public virtual void Flush();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    private static void SetupPreLoginPacketHeader(Byte[] buffer, int dataLength, int remainingLength);
}
internal class Microsoft.Data.SqlClient.SNI.SspiClientContextStatus : object {
    [CompilerGeneratedAttribute]
private SafeFreeCredentials <CredentialsHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private SafeDeleteContext <SecurityContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ContextFlagsPal <ContextFlags>k__BackingField;
    public SafeFreeCredentials CredentialsHandle { get; public set; }
    public SafeDeleteContext SecurityContext { get; public set; }
    public ContextFlagsPal ContextFlags { get; public set; }
    [CompilerGeneratedAttribute]
public SafeFreeCredentials get_CredentialsHandle();
    [CompilerGeneratedAttribute]
public void set_CredentialsHandle(SafeFreeCredentials value);
    [CompilerGeneratedAttribute]
public SafeDeleteContext get_SecurityContext();
    [CompilerGeneratedAttribute]
public void set_SecurityContext(SafeDeleteContext value);
    [CompilerGeneratedAttribute]
public ContextFlagsPal get_ContextFlags();
    [CompilerGeneratedAttribute]
public void set_ContextFlags(ContextFlagsPal value);
}
internal class Microsoft.Data.SqlClient.SNI.SSRP : object {
    private static char SemicolonSeparator;
    private static int SqlServerBrowserPort;
    private static int RecieveMAXTimeoutsForCLNT_BCAST_EX;
    private static int RecieveTimeoutsForCLNT_BCAST_EX;
    private static int ServerResponseHeaderSizeForCLNT_BCAST_EX;
    private static int ValidResponseSizeForCLNT_BCAST_EX;
    private static int FirstTimeoutForCLNT_BCAST_EX;
    private static int CLNT_BCAST_EX;
    internal static int GetPortByInstanceName(string browserHostName, string instanceName, TimeoutTimer timeout, bool allIPsInParallel, SqlConnectionIPAddressPreference ipPreference);
    private static Byte[] CreateInstanceInfoRequest(string instanceName);
    internal static int GetDacPortByInstanceName(string browserHostName, string instanceName, TimeoutTimer timeout, bool allIPsInParallel, SqlConnectionIPAddressPreference ipPreference);
    private static Byte[] CreateDacPortInfoRequest(string instanceName);
    private static Byte[] SendUDPRequest(string browserHostname, int port, Byte[] requestPacket, TimeoutTimer timeout, bool allIPsInParallel, SqlConnectionIPAddressPreference ipPreference);
    private static SsrpResult SendUDPRequest(IPAddress[] ipAddresses, int port, Byte[] requestPacket, bool allIPsInParallel);
    private static SsrpResult SendUDPRequest(IPEndPoint endPoint, Byte[] requestPacket);
    internal static string SendBroadcastUDPRequest();
    private static void SplitIPv4AndIPv6(IPAddress[] input, IPAddress[]& ipv4Addresses, IPAddress[]& ipv6Addresses);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Data.SqlClient.SNI.TdsParserStateObjectManaged : TdsParserStateObject {
    [NullableAttribute("2")]
private SNIMarsConnection _marsConnection;
    [NullableAttribute("2")]
private SNIHandle _sessionHandle;
    [NullableAttribute("2")]
private SspiClientContextStatus _sspiClientContextStatus;
    internal UInt32 Status { get; }
    internal SessionHandle SessionHandle { get; }
    protected PacketHandle EmptyReadPacket { get; }
    public TdsParserStateObjectManaged(TdsParser parser);
    internal TdsParserStateObjectManaged(TdsParser parser, TdsParserStateObject physicalConnection, bool async);
    internal virtual UInt32 get_Status();
    internal virtual SessionHandle get_SessionHandle();
    protected virtual bool CheckPacket(PacketHandle packet, TaskCompletionSource`1<object> source);
    protected virtual void CreateSessionHandle(TdsParserStateObject physicalConnection, bool async);
    internal SNIMarsHandle CreateMarsSession(object callbackObject, bool async);
    protected virtual UInt32 SNIPacketGetData(PacketHandle packet, Byte[] inBuff, UInt32& dataSize);
    internal virtual void CreatePhysicalSNIHandle(string serverName, TimeoutTimer timeout, Byte[]& instanceName, Byte[][]& spnBuffer, bool flushCache, bool async, bool parallel, SqlConnectionIPAddressPreference iPAddressPreference, string cachedFQDN, SQLDNSInfo& pendingDNSInfo, string serverSPN, bool isIntegratedSecurity, bool tlsFirst, string hostNameInCertificate, string serverCertificateFilename);
    internal virtual void AssignPendingDNSInfo(string userProtocol, string DNSCacheKey, SQLDNSInfo& pendingDNSInfo);
    internal void ReadAsyncCallback(SNIPacket packet, UInt32 error);
    internal void WriteAsyncCallback(SNIPacket packet, UInt32 sniError);
    protected virtual void RemovePacketFromPendingList(PacketHandle packet);
    internal virtual void Dispose();
    internal virtual void DisposePacketCache();
    protected virtual void FreeGcHandle(int remaining, bool release);
    internal virtual bool IsFailedHandle();
    internal virtual PacketHandle ReadSyncOverAsync(int timeoutRemaining, UInt32& error);
    protected virtual PacketHandle get_EmptyReadPacket();
    internal virtual bool IsPacketEmpty(PacketHandle packet);
    internal virtual void ReleasePacket(PacketHandle syncReadPacket);
    internal virtual UInt32 CheckConnection();
    internal virtual PacketHandle ReadAsync(SessionHandle handle, UInt32& error);
    internal virtual PacketHandle CreateAndSetAttentionPacket();
    internal virtual UInt32 WritePacket(PacketHandle packetHandle, bool sync);
    internal virtual PacketHandle AddPacketToPendingList(PacketHandle packet);
    internal virtual bool IsValidPacket(PacketHandle packet);
    internal virtual PacketHandle GetResetWritePacket(int dataSize);
    internal virtual void ClearAllWritePackets();
    internal virtual void SetPacketData(PacketHandle packet, Byte[] buffer, int bytesUsed);
    internal virtual UInt32 SniGetConnectionId(Guid& clientConnectionId);
    internal virtual UInt32 DisableSsl();
    internal virtual UInt32 EnableMars(UInt32& info);
    internal virtual UInt32 EnableSsl(UInt32& info, bool tlsFirst, string serverCertificateFilename);
    internal virtual UInt32 SetConnectionBufferSize(UInt32& unsignedPacketSize);
    internal virtual UInt32 GenerateSspiClientContext(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength, Byte[][] _sniSpnBuffer);
    internal virtual UInt32 WaitForSSLHandShakeToComplete(Int32& protocolVersion);
    private SNIHandle GetSessionSNIHandleHandleOrThrow();
    [DoesNotReturnAttribute]
private void ThrowClosedConnection();
}
internal enum Microsoft.Data.SqlClient.SniContext : Enum {
    public int value__;
    public static SniContext Undefined;
    public static SniContext Snix_Connect;
    public static SniContext Snix_PreLoginBeforeSuccessfulWrite;
    public static SniContext Snix_PreLogin;
    public static SniContext Snix_LoginSspi;
    public static SniContext Snix_ProcessSspi;
    public static SniContext Snix_Login;
    public static SniContext Snix_EnableMars;
    public static SniContext Snix_AutoEnlist;
    public static SniContext Snix_GetMarsSession;
    public static SniContext Snix_Execute;
    public static SniContext Snix_Read;
    public static SniContext Snix_Close;
    public static SniContext Snix_SendRows;
}
internal class Microsoft.Data.SqlClient.SNIErrorDetails : ValueType {
    public string errorMessage;
    public UInt32 nativeError;
    public UInt32 sniErrorNumber;
    public int provider;
    public UInt32 lineNumber;
    public string function;
    public Exception exception;
}
internal class Microsoft.Data.SqlClient.SNIHandle : SafeHandle {
    private UInt32 _status;
    private bool _fSync;
    public bool IsInvalid { get; }
    internal UInt32 Status { get; }
    internal SNIHandle(ConsumerInfo myInfo, string serverName, Byte[] spnBuffer, int timeout, Byte[]& instanceName, bool flushCache, bool fSync, bool fParallel, SqlConnectionIPAddressPreference ipPreference, SQLDNSInfo cachedDNSInfo, string hostNameInCertificate);
    internal SNIHandle(ConsumerInfo myInfo, SNIHandle parent, SqlConnectionIPAddressPreference ipPreference, SQLDNSInfo cachedDNSInfo);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    internal UInt32 get_Status();
}
internal class Microsoft.Data.SqlClient.SNILoadHandle : SafeHandle {
    internal static SNILoadHandle SingletonInstance;
    internal SqlAsyncCallbackDelegate ReadAsyncCallbackDispatcher;
    internal SqlAsyncCallbackDelegate WriteAsyncCallbackDispatcher;
    private UInt32 _sniStatus;
    private EncryptionOptions _encryptionOption;
    private Nullable`1<bool> _clientOSEncryptionSupport;
    public bool ClientOSEncryptionSupport { get; }
    public bool IsInvalid { get; }
    public UInt32 Status { get; }
    public EncryptionOptions Options { get; }
    private static SNILoadHandle();
    public bool get_ClientOSEncryptionSupport();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    public UInt32 get_Status();
    public EncryptionOptions get_Options();
    private static void ReadDispatcher(IntPtr key, IntPtr packet, UInt32 error);
    private static void WriteDispatcher(IntPtr key, IntPtr packet, UInt32 error);
}
internal static class Microsoft.Data.SqlClient.SNINativeMethodWrapper : object {
    private static string SNI;
    private static int s_sniMaxComposedSpnLength;
    private static int SniOpenTimeOut;
    internal static int SniIP6AddrStringBufferLength;
    internal static int SniMaxComposedSpnLength { get; }
    private static SNINativeMethodWrapper();
    internal static int get_SniMaxComposedSpnLength();
    internal static UInt32 SNIAddProvider(SNIHandle pConn, ProviderEnum ProvNum, UInt32& pInfo);
    internal static UInt32 SNIAddProvider(SNIHandle pConn, ProviderEnum ProvNum, AuthProviderInfo& pInfo);
    internal static UInt32 SNICheckConnection(SNIHandle pConn);
    internal static UInt32 SNIClose(IntPtr pConn);
    internal static void SNIGetLastError(SNI_Error& pErrorStruct);
    internal static void SNIPacketRelease(IntPtr pPacket);
    internal static void SNIPacketReset(SNIHandle pConn, IOType IOType, SNIPacket pPacket, ConsumerNumber ConsNum);
    internal static UInt32 SNIQueryInfo(QTypes QType, UInt32& pbQInfo);
    internal static UInt32 SNIQueryInfo(QTypes QType, IntPtr& pbQInfo);
    internal static UInt32 SNIReadAsync(SNIHandle pConn, IntPtr& ppNewPacket);
    internal static UInt32 SNIReadSyncOverAsync(SNIHandle pConn, IntPtr& ppNewPacket, int timeout);
    internal static UInt32 SNIRemoveProvider(SNIHandle pConn, ProviderEnum ProvNum);
    internal static UInt32 SNISecInitPackage(UInt32& pcbMaxToken);
    internal static UInt32 SNISetInfo(SNIHandle pConn, QTypes QType, UInt32& pbQInfo);
    internal static UInt32 SNITerminate();
    internal static UInt32 SNIWaitForSSLHandshakeToComplete(SNIHandle pConn, int dwMilliseconds, UInt32& pProtocolVersion);
    internal static UInt32 UnmanagedIsTokenRestricted(IntPtr token, Boolean& isRestricted);
    private static UInt32 GetSniMaxComposedSpnLength();
    private static UInt32 SNIGetInfoWrapper(SNIHandle pConn, QTypes QType, Guid& pbQInfo);
    private static UInt32 SNIGetInfoWrapper(SNIHandle pConn, QTypes QType, UInt16& portNum);
    private static UInt32 SNIGetPeerAddrStrWrapper(SNIHandle pConn, int bufferSize, StringBuilder addrBuffer, UInt32& addrLen);
    private static UInt32 SNIGetInfoWrapper(SNIHandle pConn, QTypes QType, ProviderEnum& provNum);
    private static UInt32 SNIInitialize(IntPtr pmo);
    private static UInt32 SNIOpenSyncExWrapper(SNI_CLIENT_CONSUMER_INFO& pClientConsumerInfo, IntPtr& ppConn);
    private static UInt32 SNIOpenWrapper(Sni_Consumer_Info& pConsumerInfo, string szConnect, SNIHandle pConn, IntPtr& ppConn, bool fSync, SqlConnectionIPAddressPreference ipPreference, SNI_DNSCache_Info& pDNSCachedInfo);
    private static IntPtr SNIPacketAllocateWrapper(SafeHandle pConn, IOType IOType);
    private static UInt32 SNIPacketGetDataWrapper(IntPtr packet, Byte[] readBuffer, UInt32 readBufferLength, UInt32& dataSize);
    private static void SNIPacketSetData(SNIPacket pPacket, Byte* pbBuf, UInt32 cbBuf);
    private static UInt32 SNISecGenClientContextWrapper(SNIHandle pConn, Byte[] pIn, UInt32 cbIn, Byte[] pOut, UInt32& pcbOut, Boolean& pfDone, Byte* szServerInfo, UInt32 cbServerInfo, string pwszUserName, string pwszPassword);
    private static UInt32 SNIWriteAsyncWrapper(SNIHandle pConn, SNIPacket pPacket);
    private static UInt32 SNIWriteSyncOverAsync(SNIHandle pConn, SNIPacket pPacket);
    internal static IntPtr SNIServerEnumOpen();
    internal static void SNIServerEnumClose(IntPtr packet);
    internal static int SNIServerEnumRead(IntPtr packet, Char[] readBuffer, int bufferLength, Boolean& more);
    internal static UInt32 SniGetConnectionId(SNIHandle pConn, Guid& connId);
    internal static UInt32 SniGetProviderNumber(SNIHandle pConn, ProviderEnum& provNum);
    internal static UInt32 SniGetConnectionPort(SNIHandle pConn, UInt16& portNum);
    internal static UInt32 SniGetConnectionIPString(SNIHandle pConn, String& connIPStr);
    internal static UInt32 SNIInitialize();
    internal static UInt32 SNIOpenMarsSession(ConsumerInfo consumerInfo, SNIHandle parent, IntPtr& pConn, bool fSync, SqlConnectionIPAddressPreference ipPreference, SQLDNSInfo cachedDNSInfo);
    internal static UInt32 SNIOpenSyncEx(ConsumerInfo consumerInfo, string constring, IntPtr& pConn, Byte[] spnBuffer, Byte[] instanceName, bool fOverrideCache, bool fSync, int timeout, bool fParallel, SqlConnectionIPAddressPreference ipPreference, SQLDNSInfo cachedDNSInfo, string hostNameInCertificate);
    internal static void SNIPacketAllocate(SafeHandle pConn, IOType IOType, IntPtr& pPacket);
    internal static UInt32 SNIPacketGetData(IntPtr packet, Byte[] readBuffer, UInt32& dataSize);
    internal static void SNIPacketSetData(SNIPacket packet, Byte[] data, int length);
    internal static UInt32 SNISecGenClientContext(SNIHandle pConnectionObject, Byte[] inBuff, UInt32 receivedLength, Byte[] OutBuff, UInt32& sendLength, Byte[] serverUserName);
    internal static UInt32 SNIWritePacket(SNIHandle pConn, SNIPacket packet, bool sync);
    private static void MarshalConsumerInfo(ConsumerInfo consumerInfo, Sni_Consumer_Info& native_consumerInfo);
}
internal class Microsoft.Data.SqlClient.SNIPacket : SafeHandle {
    public bool IsInvalid { get; }
    internal SNIPacket(SafeHandle sniHandle);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
public enum Microsoft.Data.SqlClient.SortOrder : Enum {
    public int value__;
    public static SortOrder Unspecified;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
internal static class Microsoft.Data.SqlClient.SQL : object {
    internal static Byte[] AttentionHeader;
    internal static int SqlDependencyTimeoutDefault;
    internal static int SqlDependencyServerTimeout;
    internal static string SqlNotificationServiceDefault;
    internal static string SqlNotificationStoredProcedureDefault;
    private static SQL();
    internal static Exception CannotGetDTCAddress();
    internal static Exception InvalidInternalPacketSize(string str);
    internal static Exception InvalidPacketSize();
    internal static Exception InvalidPacketSizeValue();
    internal static Exception InvalidSSPIPacketSize();
    internal static Exception AuthenticationAndIntegratedSecurity();
    internal static Exception IntegratedWithPassword();
    internal static Exception InteractiveWithPassword();
    internal static Exception DeviceFlowWithUsernamePassword();
    internal static Exception NonInteractiveWithPassword(string authenticationMode);
    internal static Exception SettingIntegratedWithCredential();
    internal static Exception SettingInteractiveWithCredential();
    internal static Exception SettingDeviceFlowWithCredential();
    internal static Exception SettingNonInteractiveWithCredential(string authenticationMode);
    internal static Exception SettingCredentialWithIntegratedArgument();
    internal static Exception SettingCredentialWithInteractiveArgument();
    internal static Exception SettingCredentialWithDeviceFlowArgument();
    internal static Exception SettingCredentialWithNonInteractiveArgument(string authenticationMode);
    internal static Exception SettingCredentialWithIntegratedInvalid();
    internal static Exception SettingCredentialWithInteractiveInvalid();
    internal static Exception SettingCredentialWithDeviceFlowInvalid();
    internal static Exception SettingCredentialWithNonInteractiveInvalid(string authenticationMode);
    internal static Exception NullEmptyTransactionName();
    internal static Exception UserInstanceFailoverNotCompatible();
    internal static Exception CredentialsNotProvided(SqlAuthenticationMethod auth);
    internal static Exception ParsingErrorLibraryType(ParsingErrorState state, int libraryType);
    internal static Exception InvalidSQLServerVersionUnknown();
    internal static Exception SynchronousCallMayNotPend();
    internal static Exception SocketDidNotThrow();
    internal static Exception ConnectionLockedForBcpEvent();
    internal static Exception InstanceFailure();
    internal static Exception ChangePasswordArgumentMissing(string argumentName);
    internal static Exception ChangePasswordConflictsWithSSPI();
    internal static Exception ChangePasswordRequires2005();
    internal static Exception ChangePasswordUseOfUnallowedKey(string key);
    internal static Exception GlobalizationInvariantModeNotSupported();
    internal static Exception GlobalTransactionsNotEnabled();
    internal static Exception UnknownSysTxIsolationLevel(IsolationLevel isolationLevel);
    internal static Exception InvalidPartnerConfiguration(string server, string database);
    internal static Exception BatchedUpdateColumnEncryptionSettingMismatch();
    internal static Exception MARSUnsupportedOnConnection();
    internal static Exception CannotModifyPropertyAsyncOperationInProgress(string property);
    internal static Exception NonLocalSSEInstance();
    internal static Exception UnsupportedAuthentication(string authentication);
    internal static Exception UnsupportedSqlAuthenticationMethod(SqlAuthenticationMethod authentication);
    internal static Exception UnsupportedAuthenticationSpecified(SqlAuthenticationMethod authentication);
    internal static Exception CannotCreateAuthProvider(string authentication, string type, Exception e);
    internal static Exception CannotCreateSqlAuthInitializer(string type, Exception e);
    internal static Exception CannotInitializeAuthProvider(string type, Exception e);
    internal static Exception UnsupportedAuthenticationByProvider(string authentication, string type);
    internal static Exception CannotFindAuthProvider(string authentication);
    internal static Exception CannotGetAuthProviderConfig(Exception e);
    internal static Exception ParameterCannotBeEmpty(string paramName);
    internal static Exception ParameterDirectionInvalidForOptimizedBinding(string paramName);
    internal static Exception ActiveDirectoryInteractiveTimeout();
    internal static Exception ActiveDirectoryDeviceFlowTimeout();
    internal static Exception ActiveDirectoryTokenRetrievingTimeout(string authenticaton, string errorCode, Exception exception);
    internal static ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, int value);
    internal static ArgumentOutOfRangeException NotSupportedCommandType(CommandType value);
    internal static ArgumentOutOfRangeException NotSupportedIsolationLevel(IsolationLevel value);
    internal static Exception OperationCancelled();
    internal static Exception PendingBeginXXXExists();
    internal static ArgumentOutOfRangeException InvalidSqlDependencyTimeout(string param);
    internal static Exception NonXmlResult();
    internal static Exception InvalidUdt3PartNameFormat();
    internal static Exception InvalidParameterTypeNameFormat();
    internal static Exception InvalidParameterNameLength(string value);
    internal static Exception PrecisionValueOutOfRange(byte precision);
    internal static Exception ScaleValueOutOfRange(byte scale);
    internal static Exception TimeScaleValueOutOfRange(byte scale);
    internal static Exception InvalidSqlDbType(SqlDbType value);
    internal static Exception UnsupportedTVPOutputParameter(ParameterDirection direction, string paramName);
    internal static Exception DBNullNotSupportedForTVPValues(string paramName);
    internal static Exception UnexpectedTypeNameForNonStructParams(string paramName);
    internal static Exception ParameterInvalidVariant(string paramName);
    internal static Exception MustSetTypeNameForParam(string paramType, string paramName);
    internal static Exception NullSchemaTableDataTypeNotSupported(string columnName);
    internal static Exception InvalidSchemaTableOrdinals();
    internal static Exception EnumeratedRecordMetaDataChanged(string fieldName, int recordNumber);
    internal static Exception EnumeratedRecordFieldCountChanged(int recordNumber);
    internal static Exception InvalidTDSVersion();
    internal static Exception ParsingError();
    internal static Exception ParsingError(ParsingErrorState state);
    internal static Exception ParsingError(ParsingErrorState state, Exception innerException);
    internal static Exception ParsingErrorValue(ParsingErrorState state, int value);
    internal static Exception ParsingErrorFeatureId(ParsingErrorState state, int featureId);
    internal static Exception ParsingErrorToken(ParsingErrorState state, int token);
    internal static Exception ParsingErrorLength(ParsingErrorState state, int length);
    internal static Exception ParsingErrorStatus(ParsingErrorState state, int status);
    internal static Exception ParsingErrorOffset(ParsingErrorState state, int offset);
    internal static Exception MoneyOverflow(string moneyValue);
    internal static Exception SmallDateTimeOverflow(string datetime);
    internal static Exception SNIPacketAllocationFailure();
    internal static Exception TimeOverflow(string time);
    internal static Exception InvalidRead();
    internal static Exception NonBlobColumn(string columnName);
    internal static Exception NonCharColumn(string columnName);
    internal static Exception StreamNotSupportOnColumnType(string columnName);
    internal static Exception StreamNotSupportOnEncryptedColumn(string columnName);
    internal static Exception SequentialAccessNotSupportedOnEncryptedColumn(string columnName);
    internal static Exception TextReaderNotSupportOnColumnType(string columnName);
    internal static Exception XmlReaderNotSupportOnColumnType(string columnName);
    internal static Exception UDTUnexpectedResult(string exceptionText);
    internal static Exception DateTimeOverflow();
    internal static Exception SqlCommandHasExistingSqlNotificationRequest();
    internal static Exception SqlDepDefaultOptionsButNoStart();
    internal static Exception SqlDependencyDatabaseBrokerDisabled();
    internal static Exception SqlDependencyEventNoDuplicate();
    internal static Exception SqlDependencyDuplicateStart();
    internal static Exception SqlDependencyIdMismatch();
    internal static Exception SqlDependencyNoMatchingServerStart();
    internal static Exception SqlDependencyNoMatchingServerDatabaseStart();
    internal static Exception CannotCompleteDelegatedTransactionWithOpenResults(SqlInternalConnectionTds internalConnection, bool marsOn);
    internal static TransactionPromotionException PromotionFailed(Exception inner);
    internal static Exception UnexpectedUdtTypeNameForNonUdtParams();
    internal static Exception MustSetUdtTypeNameForUdtParams();
    internal static Exception UDTInvalidSqlType(string typeName);
    internal static Exception UDTInvalidSize(int maxSize, int maxSupportedSize);
    internal static Exception InvalidSqlDbTypeForConstructor(SqlDbType type);
    internal static Exception NameTooLong(string parameterName);
    internal static Exception InvalidSortOrder(SortOrder order);
    internal static Exception MustSpecifyBothSortOrderAndOrdinal(SortOrder order, int ordinal);
    internal static Exception UnsupportedColumnTypeForSqlProvider(string columnName, string typeName);
    internal static Exception InvalidColumnMaxLength(string columnName, long maxLength);
    internal static Exception InvalidColumnPrecScale();
    internal static Exception NotEnoughColumnsInStructuredType();
    internal static Exception DuplicateSortOrdinal(int sortOrdinal);
    internal static Exception MissingSortOrdinal(int sortOrdinal);
    internal static Exception SortOrdinalGreaterThanFieldCount(int columnOrdinal, int sortOrdinal);
    internal static Exception IEnumerableOfSqlDataRecordHasNoRows();
    internal static Exception BulkLoadMappingInaccessible();
    internal static Exception BulkLoadMappingsNamesOrOrdinalsOnly();
    internal static Exception BulkLoadCannotConvertValue(Type sourcetype, MetaType metatype, int ordinal, int rowNumber, bool isEncrypted, string columnName, string value, Exception e);
    internal static Exception BulkLoadNonMatchingColumnMapping();
    internal static Exception BulkLoadNonMatchingColumnName(string columnName);
    internal static Exception BulkLoadNonMatchingColumnName(string columnName, Exception e);
    internal static Exception BulkLoadNullEmptyColumnName(string paramName);
    internal static Exception BulkLoadUnspecifiedSortOrder();
    internal static Exception BulkLoadInvalidOrderHint();
    internal static Exception BulkLoadOrderHintInvalidColumn(string columnName);
    internal static Exception BulkLoadOrderHintDuplicateColumn(string columnName);
    internal static Exception BulkLoadStringTooLong(string tableName, string columnName, string truncatedValue);
    internal static Exception BulkLoadInvalidVariantValue();
    internal static Exception BulkLoadInvalidTimeout(int timeout);
    internal static Exception BulkLoadExistingTransaction();
    internal static Exception BulkLoadNoCollation();
    internal static Exception BulkLoadConflictingTransactionOption();
    internal static Exception BulkLoadLcidMismatch(int sourceLcid, string sourceColumnName, int destinationLcid, string destinationColumnName);
    internal static Exception InvalidOperationInsideEvent();
    internal static Exception BulkLoadMissingDestinationTable();
    internal static Exception BulkLoadInvalidDestinationTable(string tableName, Exception inner);
    internal static Exception BulkLoadBulkLoadNotAllowDBNull(string columnName);
    internal static Exception BulkLoadPendingOperation();
    internal static Exception InvalidTableDerivedPrecisionForTvp(string columnName, byte precision);
    internal static Exception ConnectionDoomed();
    internal static Exception OpenResultCountExceeded();
    internal static Exception UnsupportedSysTxForGlobalTransactions();
    internal static Exception MultiSubnetFailoverWithFailoverPartner(bool serverProvidedFailoverPartner, SqlInternalConnectionTds internalConnection);
    internal static Exception MultiSubnetFailoverWithMoreThan64IPs();
    internal static Exception MultiSubnetFailoverWithInstanceSpecified();
    internal static Exception MultiSubnetFailoverWithNonTcpProtocol();
    internal static Exception ROR_FailoverNotSupportedConnString();
    internal static Exception ROR_FailoverNotSupportedServer(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_RecursiveRoutingNotSupported(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_UnexpectedRoutingInfo(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_InvalidRoutingInfo(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_TimeoutAfterRoutingInfo(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_ReconnectTimeout();
    internal static SqlException CR_ReconnectionCancelled();
    internal static Exception CR_NextAttemptWillExceedQueryTimeout(SqlException innerException, Guid connectionId);
    internal static Exception CR_EncryptionChanged(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_AllAttemptsFailed(SqlException innerException, Guid connectionId);
    internal static SqlException CR_NoCRAckAtReconnection(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_TDSVersionNotPreserved(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_UnrecoverableServer(Guid connectionId);
    internal static SqlException CR_UnrecoverableClient(Guid connectionId);
    internal static Exception StreamWriteNotSupported();
    internal static Exception StreamReadNotSupported();
    internal static Exception StreamSeekNotSupported();
    internal static SqlNullValueException SqlNullValue();
    internal static Exception SubclassMustOverride();
    internal static Exception UnsupportedKeyword(string keyword);
    internal static Exception NetworkLibraryKeywordNotSupported();
    internal static Exception UnsupportedFeatureAndToken(SqlInternalConnectionTds internalConnection, string token);
    internal static Exception BatchedUpdatesNotAvailableOnContextConnection();
    internal static Exception Azure_ManagedIdentityException(string msg);
    internal static Exception InvalidKeyEncryptionAlgorithm(string encryptionAlgorithm, string validEncryptionAlgorithm, bool isSystemOp);
    internal static Exception NullKeyEncryptionAlgorithm(bool isSystemOp);
    internal static Exception EmptyColumnEncryptionKey();
    internal static Exception NullColumnEncryptionKey();
    internal static Exception EmptyEncryptedColumnEncryptionKey();
    internal static Exception NullEncryptedColumnEncryptionKey();
    internal static Exception LargeCertificatePathLength(int actualLength, int maxLength, bool isSystemOp);
    internal static Exception NullCertificatePath(String[] validLocations, bool isSystemOp);
    internal static Exception NullCspKeyPath(bool isSystemOp);
    internal static Exception NullCngKeyPath(bool isSystemOp);
    internal static Exception InvalidCertificatePath(string actualCertificatePath, String[] validLocations, bool isSystemOp);
    internal static Exception InvalidCspPath(string masterKeyPath, bool isSystemOp);
    internal static Exception InvalidCngPath(string masterKeyPath, bool isSystemOp);
    internal static Exception EmptyCspName(string masterKeyPath, bool isSystemOp);
    internal static Exception EmptyCngName(string masterKeyPath, bool isSystemOp);
    internal static Exception EmptyCspKeyId(string masterKeyPath, bool isSystemOp);
    internal static Exception EmptyCngKeyId(string masterKeyPath, bool isSystemOp);
    internal static Exception InvalidCspName(string cspName, string masterKeyPath, bool isSystemOp);
    internal static Exception InvalidCspKeyIdentifier(string keyIdentifier, string masterKeyPath, bool isSystemOp);
    internal static Exception InvalidCngKey(string masterKeyPath, string cngProviderName, string keyIdentifier, bool isSystemOp);
    internal static Exception InvalidCertificateLocation(string certificateLocation, string certificatePath, String[] validLocations, bool isSystemOp);
    internal static Exception InvalidCertificateStore(string certificateStore, string certificatePath, string validCertificateStore, bool isSystemOp);
    internal static Exception EmptyCertificateThumbprint(string certificatePath, bool isSystemOp);
    internal static Exception CertificateNotFound(string thumbprint, string certificateLocation, string certificateStore, bool isSystemOp);
    internal static Exception InvalidAlgorithmVersionInEncryptedCEK(byte actual, byte expected);
    internal static Exception InvalidCiphertextLengthInEncryptedCEK(int actual, int expected, string certificateName);
    internal static Exception InvalidCiphertextLengthInEncryptedCEKCsp(int actual, int expected, string masterKeyPath);
    internal static Exception InvalidCiphertextLengthInEncryptedCEKCng(int actual, int expected, string masterKeyPath);
    internal static Exception InvalidSignatureInEncryptedCEK(int actual, int expected, string masterKeyPath);
    internal static Exception InvalidSignatureInEncryptedCEKCsp(int actual, int expected, string masterKeyPath);
    internal static Exception InvalidSignatureInEncryptedCEKCng(int actual, int expected, string masterKeyPath);
    internal static Exception InvalidCertificateSignature(string certificatePath);
    internal static Exception InvalidSignature(string masterKeyPath);
    internal static Exception CertificateWithNoPrivateKey(string keyPath, bool isSystemOp);
    internal static Exception NullPlainText();
    internal static Exception NullCipherText();
    internal static Exception NullColumnEncryptionAlgorithm(string supportedAlgorithms);
    internal static Exception NullColumnEncryptionKeySysErr();
    internal static Exception InvalidKeySize(string algorithmName, int actualKeylength, int expectedLength);
    internal static Exception InvalidEncryptionType(string algorithmName, SqlClientEncryptionType encryptionType, SqlClientEncryptionType[] validEncryptionTypes);
    internal static Exception InvalidCipherTextSize(int actualSize, int minimumSize);
    internal static Exception InvalidAlgorithmVersion(byte actual, byte expected);
    internal static Exception InvalidAuthenticationTag();
    internal static Exception UnexpectedDescribeParamFormatParameterMetadata();
    internal static Exception UnexpectedDescribeParamFormatAttestationInfo(string enclaveType);
    internal static Exception InvalidEncryptionKeyOrdinalEnclaveMetadata(int ordinal, int maxOrdinal);
    internal static Exception InvalidEncryptionKeyOrdinalParameterMetadata(int ordinal, int maxOrdinal);
    public static Exception MultipleRowsReturnedForAttestationInfo();
    internal static Exception ParamEncryptionMetadataMissing(string paramName, string procedureName);
    internal static Exception ProcEncryptionMetadataMissing(string procedureName);
    internal static Exception UnableToVerifyColumnMasterKeySignature(Exception innerException);
    internal static Exception ColumnMasterKeySignatureVerificationFailed(string cmkPath);
    internal static Exception InvalidKeyStoreProviderName(string providerName, List`1<string> systemProviders, List`1<string> customProviders);
    internal static Exception ParamInvalidForceColumnEncryptionSetting(string paramName, string procedureName);
    internal static Exception ParamUnExpectedEncryptionMetadata(string paramName, string procedureName);
    internal static Exception ColumnMasterKeySignatureNotFound(string cmkPath);
    internal static Exception ExceptionWhenGeneratingEnclavePackage(Exception innerException);
    internal static Exception FailedToEncryptRegisterRulesBytePackage(Exception innerException);
    internal static Exception InvalidKeyIdUnableToCastToUnsignedShort(int keyId, Exception innerException);
    internal static Exception InvalidDatabaseIdUnableToCastToUnsignedInt(int databaseId, Exception innerException);
    internal static Exception InvalidAttestationParameterUnableToConvertToUnsignedInt(string variableName, int intValue, string enclaveType, Exception innerException);
    internal static Exception OffsetOutOfBounds(string argument, string type, string method);
    internal static Exception InsufficientBuffer(string argument, string type, string method);
    internal static Exception ColumnEncryptionKeysNotFound();
    internal static Exception AttestationInfoNotReturnedFromSqlServer(string enclaveType, string enclaveAttestationUrl);
    internal static SqlException AttestationFailed(string errorMessage, Exception innerException);
    internal static Exception NullArgumentInConstructorInternal(string argumentName, string objectUnderConstruction);
    internal static Exception EmptyArgumentInConstructorInternal(string argumentName, string objectUnderConstruction);
    internal static Exception NullArgumentInternal(string argumentName, string type, string method);
    internal static Exception EmptyArgumentInternal(string argumentName, string type, string method);
    internal static Exception CannotGetSqlColumnEncryptionEnclaveProviderConfig(Exception innerException);
    internal static Exception CannotCreateSqlColumnEncryptionEnclaveProvider(string providerName, string type, Exception innerException);
    internal static Exception SqlColumnEncryptionEnclaveProviderNameCannotBeEmpty();
    internal static Exception NoAttestationUrlSpecifiedForEnclaveBasedQuerySpDescribe(string enclaveType);
    internal static Exception NoAttestationUrlSpecifiedForEnclaveBasedQueryGeneratingEnclavePackage(string enclaveType);
    internal static Exception EnclaveTypeNullForEnclaveBasedQuery();
    internal static Exception EnclaveProvidersNotConfiguredForEnclaveBasedQuery();
    internal static Exception EnclaveProviderNotFound(string enclaveType);
    internal static Exception NullEnclaveSessionReturnedFromProvider(string enclaveType, string attestationUrl);
    internal static Exception GetExceptionArray(string serverName, string errorMessage, Exception e);
    internal static Exception ColumnDecryptionFailed(string columnName, string serverName, Exception e);
    internal static Exception ParamEncryptionFailed(string paramName, string serverName, Exception e);
    internal static Exception ParamDecryptionFailed(string paramName, string serverName, Exception e);
    internal static Exception UnknownColumnEncryptionAlgorithm(string algorithmName, string supportedAlgorithms);
    internal static Exception UnknownColumnEncryptionAlgorithmId(int algoId, string supportAlgorithmIds);
    internal static Exception UnsupportedNormalizationVersion(byte version);
    internal static Exception UnrecognizedKeyStoreProviderName(string providerName, List`1<string> systemProviders, List`1<string> customProviders);
    internal static Exception InvalidDataTypeForEncryptedParameter(string parameterName, int actualDataType, int expectedDataType);
    internal static Exception KeyDecryptionFailed(string providerName, string keyHex, Exception e);
    internal static Exception UntrustedKeyPath(string keyPath, string serverName);
    internal static Exception UnsupportedDatatypeEncryption(string dataType);
    internal static Exception ThrowDecryptionFailed(string keyStr, string valStr, Exception e);
    internal static Exception NullEnclaveSessionDuringQueryExecution(string enclaveType, string enclaveAttestationUrl);
    internal static Exception NullEnclavePackageForEnclaveBasedQuery(string enclaveType, string enclaveAttestationUrl);
    internal static Exception EnclaveProviderNotFound(string enclaveType, string attestationProtocol);
    internal static Exception EnclaveTypeNotSupported(string enclaveType);
    internal static Exception AttestationProtocolNotSupportEnclaveType(string attestationProtocolStr, string enclaveType);
    internal static Exception AttestationProtocolNotSpecifiedForGeneratingEnclavePackage();
    internal static Exception TceNotSupported();
    internal static Exception EnclaveComputationsNotSupported();
    internal static Exception AttestationURLNotSupported();
    internal static Exception AttestationProtocolNotSupported();
    internal static Exception EnclaveTypeNotReturned();
    internal static Exception CanOnlyCallOnce();
    internal static Exception NullCustomKeyStoreProviderDictionary();
    internal static Exception InvalidCustomKeyStoreProviderName(string providerName, string prefix);
    internal static Exception NullProviderValue(string providerName);
    internal static Exception EmptyProviderName();
    internal static string GetSNIErrorMessage(int sniError);
    [IteratorStateMachineAttribute("Microsoft.Data.SqlClient.SQL/<Map>d__300`1")]
private static IEnumerable`1<string> Map(IEnumerable`1<T> source, Func`2<T, string> selector);
}
internal class Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Algorithm : SqlClientEncryptionAlgorithm {
    internal static string AlgorithmName;
    private static int _KeySizeInBytes;
    private static int _BlockSizeInBytes;
    private static int _MinimumCipherTextLengthInBytesNoAuthenticationTag;
    private static int _MinimumCipherTextLengthInBytesWithAuthenticationTag;
    private static CipherMode _cipherMode;
    private static PaddingMode _paddingMode;
    private bool _isDeterministic;
    private byte _algorithmVersion;
    private SqlAeadAes256CbcHmac256EncryptionKey _columnEncryptionKey;
    private ConcurrentQueue`1<Aes> _cryptoProviderPool;
    private static Byte[] _version;
    private static Byte[] _versionSize;
    internal SqlAeadAes256CbcHmac256Algorithm(SqlAeadAes256CbcHmac256EncryptionKey encryptionKey, SqlClientEncryptionType encryptionType, byte algorithmVersion);
    private static SqlAeadAes256CbcHmac256Algorithm();
    internal virtual Byte[] EncryptData(Byte[] plainText);
    protected Byte[] EncryptData(Byte[] plainText, bool hasAuthenticationTag);
    internal virtual Byte[] DecryptData(Byte[] cipherText);
    protected Byte[] DecryptData(Byte[] cipherText, bool hasAuthenticationTag);
    private Byte[] DecryptData(Byte[] iv, Byte[] cipherText, int offset, int count);
    private Byte[] PrepareAuthenticationTag(Byte[] iv, Byte[] cipherText, int offset, int length);
}
internal class Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256EncryptionKey : SqlClientSymmetricKey {
    internal static int KeySize;
    private static string _encryptionKeySaltFormat;
    private static string _macKeySaltFormat;
    private static string _ivKeySaltFormat;
    private SqlClientSymmetricKey _encryptionKey;
    private SqlClientSymmetricKey _macKey;
    private SqlClientSymmetricKey _ivKey;
    private string _algorithmName;
    internal Byte[] EncryptionKey { get; }
    internal Byte[] MACKey { get; }
    internal Byte[] IVKey { get; }
    internal SqlAeadAes256CbcHmac256EncryptionKey(Byte[] rootKey, string algorithmName);
    internal Byte[] get_EncryptionKey();
    internal Byte[] get_MACKey();
    internal Byte[] get_IVKey();
}
internal class Microsoft.Data.SqlClient.SqlAeadAes256CbcHmac256Factory : SqlClientEncryptionAlgorithmFactory {
    private ConcurrentDictionary`2<string, SqlAeadAes256CbcHmac256Algorithm> _encryptionAlgorithms;
    internal virtual SqlClientEncryptionAlgorithm Create(SqlClientSymmetricKey encryptionKey, SqlClientEncryptionType encryptionType, string encryptionAlgorithm);
}
internal class Microsoft.Data.SqlClient.SqlAppContextSwitchManager : object {
    private static string TypeName;
    internal static void ApplyContextSwitches(IAppContextSwitchOverridesSection appContextSwitches);
    private static bool ApplySwitchValues(String[] switches);
}
public abstract class Microsoft.Data.SqlClient.SqlAuthenticationInitializer : object {
    public abstract virtual void Initialize();
}
public enum Microsoft.Data.SqlClient.SqlAuthenticationMethod : Enum {
    public int value__;
    public static SqlAuthenticationMethod NotSpecified;
    public static SqlAuthenticationMethod SqlPassword;
    public static SqlAuthenticationMethod ActiveDirectoryPassword;
    public static SqlAuthenticationMethod ActiveDirectoryIntegrated;
    public static SqlAuthenticationMethod ActiveDirectoryInteractive;
    public static SqlAuthenticationMethod ActiveDirectoryServicePrincipal;
    public static SqlAuthenticationMethod ActiveDirectoryDeviceCodeFlow;
    public static SqlAuthenticationMethod ActiveDirectoryManagedIdentity;
    public static SqlAuthenticationMethod ActiveDirectoryMSI;
    public static SqlAuthenticationMethod ActiveDirectoryDefault;
    public static SqlAuthenticationMethod ActiveDirectoryWorkloadIdentity;
}
public class Microsoft.Data.SqlClient.SqlAuthenticationParameters : object {
    [CompilerGeneratedAttribute]
private SqlAuthenticationMethod <AuthenticationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Authority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConnectionTimeout>k__BackingField;
    public SqlAuthenticationMethod AuthenticationMethod { get; }
    public string Resource { get; }
    public string Authority { get; }
    public string UserId { get; }
    public string Password { get; }
    public Guid ConnectionId { get; }
    public string ServerName { get; }
    public string DatabaseName { get; }
    public int ConnectionTimeout { get; }
    protected SqlAuthenticationParameters(SqlAuthenticationMethod authenticationMethod, string serverName, string databaseName, string resource, string authority, string userId, string password, Guid connectionId, int connectionTimeout);
    [CompilerGeneratedAttribute]
public SqlAuthenticationMethod get_AuthenticationMethod();
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public Guid get_ConnectionId();
    [CompilerGeneratedAttribute]
public string get_ServerName();
    [CompilerGeneratedAttribute]
public string get_DatabaseName();
    [CompilerGeneratedAttribute]
public int get_ConnectionTimeout();
}
public abstract class Microsoft.Data.SqlClient.SqlAuthenticationProvider : object {
    public static SqlAuthenticationProvider GetProvider(SqlAuthenticationMethod authenticationMethod);
    public static bool SetProvider(SqlAuthenticationMethod authenticationMethod, SqlAuthenticationProvider provider);
    public virtual void BeforeLoad(SqlAuthenticationMethod authenticationMethod);
    public virtual void BeforeUnload(SqlAuthenticationMethod authenticationMethod);
    public abstract virtual bool IsSupported(SqlAuthenticationMethod authenticationMethod);
    public abstract virtual Task`1<SqlAuthenticationToken> AcquireTokenAsync(SqlAuthenticationParameters parameters);
}
internal class Microsoft.Data.SqlClient.SqlAuthenticationProviderManager : object {
    private SqlAuthenticationInitializer _initializer;
    private static string ActiveDirectoryPassword;
    private static string ActiveDirectoryIntegrated;
    private static string ActiveDirectoryInteractive;
    private static string ActiveDirectoryServicePrincipal;
    private static string ActiveDirectoryDeviceCodeFlow;
    private static string ActiveDirectoryManagedIdentity;
    private static string ActiveDirectoryMSI;
    private static string ActiveDirectoryDefault;
    private static string ActiveDirectoryWorkloadIdentity;
    private IReadOnlyCollection`1<SqlAuthenticationMethod> _authenticationsWithAppSpecifiedProvider;
    private ConcurrentDictionary`2<SqlAuthenticationMethod, SqlAuthenticationProvider> _providers;
    private SqlClientLogger _sqlAuthLogger;
    private string _applicationClientId;
    public static SqlAuthenticationProviderManager Instance;
    private static SqlAuthenticationProviderManager();
    public SqlAuthenticationProviderManager(SqlAuthenticationProviderConfigurationSection configSection);
    private static T FetchConfigurationSection(string name);
    private static SqlAuthenticationMethod AuthenticationEnumFromString(string authentication);
    private static void SetDefaultAuthProviders(SqlAuthenticationProviderManager instance);
    public SqlAuthenticationProvider GetProvider(SqlAuthenticationMethod authenticationMethod);
    public bool SetProvider(SqlAuthenticationMethod authenticationMethod, SqlAuthenticationProvider provider);
    private static string GetProviderType(SqlAuthenticationProvider provider);
}
public class Microsoft.Data.SqlClient.SqlAuthenticationToken : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <ExpiresOn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessToken>k__BackingField;
    public DateTimeOffset ExpiresOn { get; }
    public string AccessToken { get; }
    public SqlAuthenticationToken(string accessToken, DateTimeOffset expiresOn);
    internal SqlAuthenticationToken(Byte[] accessToken, DateTimeOffset expiresOn);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiresOn();
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    internal SqlFedAuthToken ToSqlFedAuthToken();
    internal static string AccessTokenStringFromBytes(Byte[] bytes);
    internal static Byte[] AccessTokenBytesFromString(string token);
}
public class Microsoft.Data.SqlClient.SqlBatch : DbBatch {
    private SqlCommand _batchCommand;
    private List`1<SqlBatchCommand> _commands;
    private SqlBatchCommandCollection _providerCommands;
    public int Timeout { get; public set; }
    protected DbBatchCommandCollection DbBatchCommands { get; }
    public SqlBatchCommandCollection BatchCommands { get; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbTransaction DbTransaction { get; protected set; }
    public List`1<SqlBatchCommand> Commands { get; }
    public SqlConnection Connection { get; public set; }
    public SqlTransaction Transaction { get; public set; }
    public SqlBatch(SqlConnection connection, SqlTransaction transaction);
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    protected virtual DbBatchCommandCollection get_DbBatchCommands();
    public SqlBatchCommandCollection get_BatchCommands();
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual void Cancel();
    public virtual int ExecuteNonQuery();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public virtual object ExecuteScalar();
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public virtual void Prepare();
    public virtual Task PrepareAsync(CancellationToken cancellationToken);
    public virtual void Dispose();
    public List`1<SqlBatchCommand> get_Commands();
    public SqlConnection get_Connection();
    public void set_Connection(SqlConnection value);
    public SqlTransaction get_Transaction();
    public void set_Transaction(SqlTransaction value);
    public SqlDataReader ExecuteReader();
    public Task`1<SqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    protected virtual DbBatchCommand CreateDbBatchCommand();
    private void CheckDisposed();
    private void SetupBatchCommandExecute();
}
public class Microsoft.Data.SqlClient.SqlBatchCommand : DbBatchCommand {
    private string _text;
    private CommandType _type;
    private SqlParameterCollection _parameters;
    private CommandBehavior _behavior;
    private int _recordsAffected;
    private SqlCommandColumnEncryptionSetting _encryptionSetting;
    public string CommandText { get; public set; }
    public CommandType CommandType { get; public set; }
    public CommandBehavior CommandBehavior { get; public set; }
    public int RecordsAffected { get; }
    protected DbParameterCollection DbParameterCollection { get; }
    public SqlParameterCollection Parameters { get; internal set; }
    public SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { get; public set; }
    public SqlBatchCommand(string commandText, CommandType commandType, IEnumerable`1<SqlParameter> parameters, SqlCommandColumnEncryptionSetting columnEncryptionSetting);
    internal SqlBatchCommand(string commandText, SqlParameterCollection parameterCollection, CommandType commandType, SqlCommandColumnEncryptionSetting columnEncryptionSetting);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public CommandBehavior get_CommandBehavior();
    public void set_CommandBehavior(CommandBehavior value);
    public virtual int get_RecordsAffected();
    protected virtual DbParameterCollection get_DbParameterCollection();
    public SqlParameterCollection get_Parameters();
    internal void set_Parameters(SqlParameterCollection value);
    public SqlCommandColumnEncryptionSetting get_ColumnEncryptionSetting();
    public void set_ColumnEncryptionSetting(SqlCommandColumnEncryptionSetting value);
    private void SetCommandType(CommandType value);
    internal void SetRecordAffected(int value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.SqlClient.SqlBatchCommandCollection : DbBatchCommandCollection {
    private List`1<SqlBatchCommand> _list;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private SqlBatchCommand System.Collections.Generic.IList<Microsoft.Data.SqlClient.SqlBatchCommand>.Item { get; private set; }
    public SqlBatchCommand Item { get; public set; }
    internal SqlBatchCommandCollection(List`1<SqlBatchCommand> batchCommands);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    private sealed virtual override IEnumerator`1<SqlBatchCommand> System.Collections.Generic.IEnumerable<Microsoft.Data.SqlClient.SqlBatchCommand>.GetEnumerator();
    public virtual IEnumerator`1<DbBatchCommand> GetEnumerator();
    public sealed virtual void Add(SqlBatchCommand item);
    public virtual void Add(DbBatchCommand item);
    public virtual void Clear();
    public sealed virtual bool Contains(SqlBatchCommand item);
    public virtual bool Contains(DbBatchCommand item);
    public sealed virtual void CopyTo(SqlBatchCommand[] array, int arrayIndex);
    public virtual void CopyTo(DbBatchCommand[] array, int arrayIndex);
    public sealed virtual int IndexOf(SqlBatchCommand item);
    public virtual int IndexOf(DbBatchCommand item);
    public sealed virtual void Insert(int index, SqlBatchCommand item);
    public virtual void Insert(int index, DbBatchCommand item);
    public sealed virtual bool Remove(SqlBatchCommand item);
    public virtual bool Remove(DbBatchCommand item);
    public virtual void RemoveAt(int index);
    private sealed virtual override SqlBatchCommand System.Collections.Generic.IList<Microsoft.Data.SqlClient.SqlBatchCommand>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.Data.SqlClient.SqlBatchCommand>.set_Item(int index, SqlBatchCommand value);
    public SqlBatchCommand get_Item(int index);
    public void set_Item(int index, SqlBatchCommand value);
    protected virtual DbBatchCommand GetBatchCommand(int index);
    protected virtual void SetBatchCommand(int index, DbBatchCommand batchCommand);
}
internal class Microsoft.Data.SqlClient.SqlBuffer : object {
    private bool _isNull;
    private StorageType _type;
    private Storage _value;
    private object _object;
    private static String[] s_sql2008DateTimeOffsetFormatByScale;
    private static String[] s_sql2008DateTime2FormatByScale;
    private static String[] s_sql2008TimeFormatByScale;
    private static object s_cachedTrueObject;
    private static object s_cachedFalseObject;
    internal bool IsEmpty { get; }
    internal bool IsNull { get; }
    internal StorageType VariantInternalStorageType { get; }
    internal bool Boolean { get; internal set; }
    internal byte Byte { get; internal set; }
    internal Byte[] ByteArray { get; }
    internal DateTime DateTime { get; }
    internal decimal Decimal { get; }
    internal double Double { get; internal set; }
    internal Guid Guid { get; internal set; }
    internal short Int16 { get; internal set; }
    internal int Int32 { get; internal set; }
    internal long Int64 { get; internal set; }
    internal float Single { get; internal set; }
    internal string String { get; }
    internal string Sql2008DateTimeString { get; }
    internal SqlString Sql2008DateTimeSqlString { get; }
    internal TimeSpan Time { get; }
    internal TimeOnly TimeOnly { get; }
    internal DateOnly DateOnly { get; }
    internal DateTimeOffset DateTimeOffset { get; }
    internal SqlBinary SqlBinary { get; internal set; }
    internal SqlBoolean SqlBoolean { get; }
    internal SqlByte SqlByte { get; }
    internal SqlCachedBuffer SqlCachedBuffer { get; internal set; }
    internal SqlXml SqlXml { get; internal set; }
    internal SqlDateTime SqlDateTime { get; }
    internal SqlDecimal SqlDecimal { get; }
    internal SqlDouble SqlDouble { get; }
    internal SqlGuid SqlGuid { get; internal set; }
    internal SqlInt16 SqlInt16 { get; }
    internal SqlInt32 SqlInt32 { get; }
    internal SqlInt64 SqlInt64 { get; }
    internal SqlMoney SqlMoney { get; }
    internal SqlSingle SqlSingle { get; }
    internal SqlString SqlString { get; }
    internal object SqlValue { get; }
    internal object Value { get; }
    private SqlBuffer(SqlBuffer value);
    private static SqlBuffer();
    internal bool get_IsEmpty();
    internal bool get_IsNull();
    internal StorageType get_VariantInternalStorageType();
    internal bool get_Boolean();
    internal void set_Boolean(bool value);
    internal byte get_Byte();
    internal void set_Byte(byte value);
    internal Byte[] get_ByteArray();
    internal DateTime get_DateTime();
    internal decimal get_Decimal();
    private static int FindTrailingZerosAndPrec(UInt32 data1, UInt32 data2, UInt32 data3, UInt32 data4, byte scale, Int32& valuablePrecision);
    private static void SqlDecimalDivBy(Span`1<UInt32> data, Int32& len, UInt32 divisor, UInt32& remainder);
    internal double get_Double();
    internal void set_Double(double value);
    internal Guid get_Guid();
    internal void set_Guid(Guid value);
    internal short get_Int16();
    internal void set_Int16(short value);
    internal int get_Int32();
    internal void set_Int32(int value);
    internal long get_Int64();
    internal void set_Int64(long value);
    internal float get_Single();
    internal void set_Single(float value);
    internal string get_String();
    internal string get_Sql2008DateTimeString();
    internal SqlString get_Sql2008DateTimeSqlString();
    internal TimeSpan get_Time();
    internal TimeOnly get_TimeOnly();
    internal DateOnly get_DateOnly();
    internal DateTimeOffset get_DateTimeOffset();
    private static long GetTicksFromDateTime2Info(DateTime2Info dateTime2Info);
    internal SqlBinary get_SqlBinary();
    internal void set_SqlBinary(SqlBinary value);
    internal SqlBoolean get_SqlBoolean();
    internal SqlByte get_SqlByte();
    internal SqlCachedBuffer get_SqlCachedBuffer();
    internal void set_SqlCachedBuffer(SqlCachedBuffer value);
    internal SqlXml get_SqlXml();
    internal void set_SqlXml(SqlXml value);
    internal SqlDateTime get_SqlDateTime();
    internal SqlDecimal get_SqlDecimal();
    internal SqlDouble get_SqlDouble();
    internal SqlGuid get_SqlGuid();
    internal void set_SqlGuid(SqlGuid value);
    internal SqlInt16 get_SqlInt16();
    internal SqlInt32 get_SqlInt32();
    internal SqlInt64 get_SqlInt64();
    internal SqlMoney get_SqlMoney();
    internal SqlSingle get_SqlSingle();
    internal SqlString get_SqlString();
    internal object get_SqlValue();
    internal object get_Value();
    internal Type GetTypeFromStorageType(bool isSqlType);
    internal static SqlBuffer[] CreateBufferArray(int length);
    internal static SqlBuffer[] CloneBufferArray(SqlBuffer[] values);
    internal static void Clear(SqlBuffer[] values);
    internal void Clear();
    internal void SetToDateTime(int daypart, int timepart);
    internal void SetToDecimal(byte precision, byte scale, bool positive, Int32[] bits);
    internal void SetToMoney(long value);
    internal void SetToNullOfType(StorageType storageType);
    internal void SetToString(string value);
    internal void SetToDate(ReadOnlySpan`1<byte> bytes);
    internal void SetToTime(ReadOnlySpan`1<byte> bytes, byte scale, byte denormalizedScale);
    internal void SetToTime(TimeSpan timeSpan, byte scale);
    internal void SetToDateTime2(ReadOnlySpan`1<byte> bytes, byte scale, byte denormalizedScale);
    internal void SetToDateTimeOffset(ReadOnlySpan`1<byte> bytes, byte scale, byte denormalizedScale);
    internal void SetToDateTimeOffset(DateTimeOffset dateTimeOffset, byte scale);
    private static void FillInTimeInfo(TimeInfo& timeInfo, ReadOnlySpan`1<byte> timeBytes, byte scale, byte denormalizedScale);
    private static int GetDateFromByteArray(ReadOnlySpan`1<byte> buf);
    private void ThrowIfNull();
    internal T ByteAs();
    internal T BooleanAs();
    internal T Int32As();
    internal T Int16As();
    internal T Int64As();
    internal T DoubleAs();
    internal T SingleAs();
}
public class Microsoft.Data.SqlClient.SqlBulkCopy : object {
    private static int MetaDataResultId;
    private static int CollationResultId;
    private static int CollationId;
    private static int MAX_LENGTH;
    private static int DefaultCommandTimeout;
    [CompilerGeneratedAttribute]
private SqlRowsCopiedEventHandler SqlRowsCopied;
    private bool _enableStreaming;
    private int _batchSize;
    private bool _ownConnection;
    private SqlBulkCopyOptions _copyOptions;
    private int _timeout;
    private string _destinationTableName;
    private long _rowsCopied;
    private int _notifyAfter;
    private int _rowsUntilNotification;
    private bool _insideRowsCopiedEvent;
    private object _rowSource;
    private SqlDataReader _sqlDataReaderRowSource;
    private DbDataReader _dbDataReaderRowSource;
    private DataTable _dataTableSource;
    private SqlBulkCopyColumnMappingCollection _columnMappings;
    private SqlBulkCopyColumnMappingCollection _localColumnMappings;
    private SqlConnection _connection;
    private SqlTransaction _internalTransaction;
    private SqlTransaction _externalTransaction;
    private ValueSourceType _rowSourceType;
    private DataRow _currentRow;
    private int _currentRowLength;
    private DataRowState _rowStateToSkip;
    private IEnumerator _rowEnumerator;
    private TdsParser _parser;
    private TdsParserStateObject _stateObj;
    private List`1<_ColumnMapping> _sortedColumnMappings;
    private static int s_objectTypeCount;
    internal int _objectID;
    private int _savedBatchSize;
    private bool _hasMoreRowToCopy;
    private bool _isAsyncBulkCopy;
    private bool _isBulkCopyingInProgress;
    private SyncAsyncLock _parserLock;
    private SourceColumnMetadata[] _currentRowMetadata;
    [CompilerGeneratedAttribute]
private SqlBulkCopyColumnOrderHintCollection <ColumnOrderHints>k__BackingField;
    private int RowNumber { get; }
    public int BatchSize { get; public set; }
    public int BulkCopyTimeout { get; public set; }
    public bool EnableStreaming { get; public set; }
    public SqlBulkCopyColumnMappingCollection ColumnMappings { get; }
    public SqlBulkCopyColumnOrderHintCollection ColumnOrderHints { get; }
    public string DestinationTableName { get; public set; }
    public int NotifyAfter { get; public set; }
    internal int ObjectID { get; }
    public int RowsCopied { get; }
    public long RowsCopied64 { get; }
    internal SqlStatistics Statistics { get; }
    public SqlBulkCopy(SqlConnection connection);
    public SqlBulkCopy(SqlConnection connection, SqlBulkCopyOptions copyOptions, SqlTransaction externalTransaction);
    public SqlBulkCopy(string connectionString);
    public SqlBulkCopy(string connectionString, SqlBulkCopyOptions copyOptions);
    [CompilerGeneratedAttribute]
public void add_SqlRowsCopied(SqlRowsCopiedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_SqlRowsCopied(SqlRowsCopiedEventHandler value);
    private int get_RowNumber();
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public int get_BulkCopyTimeout();
    public void set_BulkCopyTimeout(int value);
    public bool get_EnableStreaming();
    public void set_EnableStreaming(bool value);
    public SqlBulkCopyColumnMappingCollection get_ColumnMappings();
    [CompilerGeneratedAttribute]
public SqlBulkCopyColumnOrderHintCollection get_ColumnOrderHints();
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public int get_NotifyAfter();
    public void set_NotifyAfter(int value);
    internal int get_ObjectID();
    public int get_RowsCopied();
    public long get_RowsCopied64();
    internal SqlStatistics get_Statistics();
    private sealed virtual override void System.IDisposable.Dispose();
    private bool IsCopyOption(SqlBulkCopyOptions copyOption);
    private string CreateInitialQuery();
    private Task`1<BulkCopySimpleResultSet> CreateAndExecuteInitialQueryAsync(BulkCopySimpleResultSet& result);
    private string AnalyzeTargetAndCreateUpdateBulkCommand(BulkCopySimpleResultSet internalResults);
    private string TryGetOrderHintText(HashSet`1<string> destColumnNames);
    private Task SubmitUpdateBulkCommand(string TDSCommand);
    private void WriteMetaData(BulkCopySimpleResultSet internalResults);
    public void Close();
    private void Dispose(bool disposing);
    private object GetValueFromSourceRow(int destRowIndex, Boolean& isSqlType, Boolean& isDataFeed, Boolean& isNull);
    private Task ReadFromRowSourceAsync(CancellationToken cts);
    private bool ReadFromRowSource();
    private SourceColumnMetadata GetColumnMetadata(int ordinal);
    private void CreateOrValidateConnection(string method);
    private void RunParser(BulkCopySimpleResultSet bulkCopyHandler);
    private void RunParserReliably(BulkCopySimpleResultSet bulkCopyHandler);
    private void CommitTransaction();
    private void AbortTransaction();
    private void AppendColumnNameAndTypeName(StringBuilder query, string columnName, string typeName);
    private string UnquotedName(string name);
    private object ValidateBulkCopyVariant(object value);
    private object ConvertValue(object value, _SqlMetaData metadata, bool isNull, Boolean& isSqlType, Boolean& coercedToDataFeed);
    public void WriteToServer(DbDataReader reader);
    public void WriteToServer(IDataReader reader);
    public void WriteToServer(DataTable table);
    public void WriteToServer(DataTable table, DataRowState rowState);
    public void WriteToServer(DataRow[] rows);
    public Task WriteToServerAsync(DataRow[] rows);
    public Task WriteToServerAsync(DataRow[] rows, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DbDataReader reader);
    public Task WriteToServerAsync(DbDataReader reader, CancellationToken cancellationToken);
    public Task WriteToServerAsync(IDataReader reader);
    public Task WriteToServerAsync(IDataReader reader, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DataTable table);
    public Task WriteToServerAsync(DataTable table, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DataTable table, DataRowState rowState);
    public Task WriteToServerAsync(DataTable table, DataRowState rowState, CancellationToken cancellationToken);
    private Task WriteRowSourceToServerAsync(int columnCount, CancellationToken ctoken);
    private void WriteRowSourceToServerCommon(int columnCount);
    internal void OnConnectionClosed();
    private bool FireRowsCopiedEvent(long rowsCopied);
    private Task ReadWriteColumnValueAsync(int col);
    private Task`1<T> RegisterForConnectionCloseNotification(Task`1<T> outerTask);
    private Task CopyColumnsAsync(int col, TaskCompletionSource`1<object> source);
    private void CopyColumnsAsyncSetupContinuation(TaskCompletionSource`1<object> source, Task task, int i);
    private void CheckAndRaiseNotification();
    private Task CheckForCancellation(CancellationToken cts, TaskCompletionSource`1<object> tcs);
    private Task CopyRowsAsync(int rowsSoFar, int totalRows, CancellationToken cts, TaskCompletionSource`1<object> source);
    private Task CopyBatchesAsync(BulkCopySimpleResultSet internalResults, string updateBulkCommandText, CancellationToken cts, TaskCompletionSource`1<object> source);
    private Task CopyBatchesAsyncContinued(BulkCopySimpleResultSet internalResults, string updateBulkCommandText, CancellationToken cts, TaskCompletionSource`1<object> source);
    private Task CopyBatchesAsyncContinuedOnSuccess(BulkCopySimpleResultSet internalResults, string updateBulkCommandText, CancellationToken cts, TaskCompletionSource`1<object> source);
    private void CopyBatchesAsyncContinuedOnError(bool cleanupParser);
    private void CleanUpStateObject(bool isCancelRequested);
    private void WriteToServerInternalRestContinuedAsync(BulkCopySimpleResultSet internalResults, CancellationToken cts, TaskCompletionSource`1<object> source);
    private void WriteToServerInternalRestAsync(CancellationToken cts, TaskCompletionSource`1<object> source);
    private Task WriteToServerInternalAsync(CancellationToken ctoken);
    [CompilerGeneratedAttribute]
private BulkCopySimpleResultSet <CreateAndExecuteInitialQueryAsync>b__83_0(Task t);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private void <SubmitUpdateBulkCommand>b__86_0(Task t);
}
public class Microsoft.Data.SqlClient.SqlBulkCopyColumnMapping : object {
    internal string _destinationColumnName;
    internal int _destinationColumnOrdinal;
    internal string _sourceColumnName;
    internal int _sourceColumnOrdinal;
    internal int _internalDestinationColumnOrdinal;
    internal int _internalSourceColumnOrdinal;
    public string DestinationColumn { get; public set; }
    public int DestinationOrdinal { get; public set; }
    public string SourceColumn { get; public set; }
    public int SourceOrdinal { get; public set; }
    public SqlBulkCopyColumnMapping(string sourceColumn, string destinationColumn);
    public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, string destinationColumn);
    public SqlBulkCopyColumnMapping(string sourceColumn, int destinationOrdinal);
    public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, int destinationOrdinal);
    public string get_DestinationColumn();
    public void set_DestinationColumn(string value);
    public int get_DestinationOrdinal();
    public void set_DestinationOrdinal(int value);
    public string get_SourceColumn();
    public void set_SourceColumn(string value);
    public int get_SourceOrdinal();
    public void set_SourceOrdinal(int value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.SqlClient.SqlBulkCopyColumnMappingCollection : CollectionBase {
    private MappingSchema _mappingSchema;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    internal bool ReadOnly { get; internal set; }
    public SqlBulkCopyColumnMapping Item { get; }
    [CompilerGeneratedAttribute]
internal bool get_ReadOnly();
    [CompilerGeneratedAttribute]
internal void set_ReadOnly(bool value);
    public SqlBulkCopyColumnMapping get_Item(int index);
    public SqlBulkCopyColumnMapping Add(SqlBulkCopyColumnMapping bulkCopyColumnMapping);
    public SqlBulkCopyColumnMapping Add(string sourceColumn, string destinationColumn);
    public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, string destinationColumn);
    public SqlBulkCopyColumnMapping Add(string sourceColumn, int destinationColumnIndex);
    public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, int destinationColumnIndex);
    private void AssertWriteAccess();
    public void Clear();
    public bool Contains(SqlBulkCopyColumnMapping value);
    public void CopyTo(SqlBulkCopyColumnMapping[] array, int index);
    internal void CreateDefaultMapping(int columnCount);
    public int IndexOf(SqlBulkCopyColumnMapping value);
    public void Insert(int index, SqlBulkCopyColumnMapping value);
    public void Remove(SqlBulkCopyColumnMapping value);
    public void RemoveAt(int index);
    internal void ValidateCollection();
}
public class Microsoft.Data.SqlClient.SqlBulkCopyColumnOrderHint : object {
    private string _columnName;
    private SortOrder _sortOrder;
    [CompilerGeneratedAttribute]
private EventHandler`1<string> NameChanging;
    public string Column { get; public set; }
    public SortOrder SortOrder { get; public set; }
    public SqlBulkCopyColumnOrderHint(string column, SortOrder sortOrder);
    [CompilerGeneratedAttribute]
internal void add_NameChanging(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
internal void remove_NameChanging(EventHandler`1<string> value);
    public string get_Column();
    public void set_Column(string value);
    public SortOrder get_SortOrder();
    public void set_SortOrder(SortOrder value);
    private void OnNameChanging(string newName);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.SqlClient.SqlBulkCopyColumnOrderHintCollection : CollectionBase {
    private HashSet`1<string> _columnNames;
    public SqlBulkCopyColumnOrderHint Item { get; }
    public SqlBulkCopyColumnOrderHint get_Item(int index);
    public SqlBulkCopyColumnOrderHint Add(SqlBulkCopyColumnOrderHint columnOrderHint);
    public SqlBulkCopyColumnOrderHint Add(string column, SortOrder sortOrder);
    protected virtual void OnClear();
    public bool Contains(SqlBulkCopyColumnOrderHint value);
    public void CopyTo(SqlBulkCopyColumnOrderHint[] array, int index);
    public int IndexOf(SqlBulkCopyColumnOrderHint value);
    public void Insert(int index, SqlBulkCopyColumnOrderHint columnOrderHint);
    public void Remove(SqlBulkCopyColumnOrderHint columnOrderHint);
    protected virtual void OnRemove(int index, object value);
    private void ColumnNameChanging(object sender, string newName);
    private void RegisterColumnName(SqlBulkCopyColumnOrderHint orderHint, string columnName);
    private void UnregisterColumnName(SqlBulkCopyColumnOrderHint orderHint, string columnName);
}
[FlagsAttribute]
public enum Microsoft.Data.SqlClient.SqlBulkCopyOptions : Enum {
    public int value__;
    public static SqlBulkCopyOptions Default;
    public static SqlBulkCopyOptions KeepIdentity;
    public static SqlBulkCopyOptions CheckConstraints;
    public static SqlBulkCopyOptions TableLock;
    public static SqlBulkCopyOptions KeepNulls;
    public static SqlBulkCopyOptions FireTriggers;
    public static SqlBulkCopyOptions UseInternalTransaction;
    public static SqlBulkCopyOptions AllowEncryptedValueModifications;
}
internal class Microsoft.Data.SqlClient.SqlCachedBuffer : object {
    public static SqlCachedBuffer Null;
    private static int MaxChunkSize;
    private List`1<Byte[]> _cachedBytes;
    internal List`1<Byte[]> CachedBytes { get; }
    public bool IsNull { get; }
    private SqlCachedBuffer(List`1<Byte[]> cachedBytes);
    private static SqlCachedBuffer();
    internal List`1<Byte[]> get_CachedBytes();
    internal static bool TryCreate(SqlMetaDataPriv metadata, TdsParser parser, TdsParserStateObject stateObj, SqlCachedBuffer& buffer);
    private static void AddByteOrderMark(Byte[] byteArr, List`1<Byte[]> cachedBytes);
    internal Stream ToStream();
    public virtual string ToString();
    internal SqlString ToSqlString();
    internal SqlXml ToSqlXml();
    internal XmlReader ToXmlReader();
    public sealed virtual bool get_IsNull();
}
internal class Microsoft.Data.SqlClient.SqlCachedStream : Stream {
    private int _currentPosition;
    private int _currentArrayIndex;
    private List`1<Byte[]> _cachedBytes;
    private long _totalLength;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    private long TotalLength { get; }
    internal SqlCachedStream(SqlCachedBuffer sqlBuf);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    private void SetInternalPosition(long lPos, string argumentName);
    private long get_TotalLength();
}
internal class Microsoft.Data.SqlClient.SqlCipherMetadata : object {
    private SqlTceCipherInfoEntry _sqlTceCipherInfoEntry;
    private byte _cipherAlgorithmId;
    private string _cipherAlgorithmName;
    private byte _encryptionType;
    private byte _normalizationRuleVersion;
    private SqlClientEncryptionAlgorithm _sqlClientEncryptionAlgorithm;
    private SqlEncryptionKeyInfo _sqlEncryptionKeyInfo;
    private ushort _ordinal;
    internal SqlTceCipherInfoEntry EncryptionInfo { get; internal set; }
    internal byte CipherAlgorithmId { get; }
    internal string CipherAlgorithmName { get; }
    internal byte EncryptionType { get; }
    internal byte NormalizationRuleVersion { get; }
    internal SqlClientEncryptionAlgorithm CipherAlgorithm { get; internal set; }
    internal SqlEncryptionKeyInfo EncryptionKeyInfo { get; internal set; }
    internal ushort CekTableOrdinal { get; }
    internal SqlCipherMetadata(SqlTceCipherInfoEntry sqlTceCipherInfoEntry, ushort ordinal, byte cipherAlgorithmId, string cipherAlgorithmName, byte encryptionType, byte normalizationRuleVersion);
    internal SqlTceCipherInfoEntry get_EncryptionInfo();
    internal void set_EncryptionInfo(SqlTceCipherInfoEntry value);
    internal byte get_CipherAlgorithmId();
    internal string get_CipherAlgorithmName();
    internal byte get_EncryptionType();
    internal byte get_NormalizationRuleVersion();
    internal SqlClientEncryptionAlgorithm get_CipherAlgorithm();
    internal void set_CipherAlgorithm(SqlClientEncryptionAlgorithm value);
    internal SqlEncryptionKeyInfo get_EncryptionKeyInfo();
    internal void set_EncryptionKeyInfo(SqlEncryptionKeyInfo value);
    internal ushort get_CekTableOrdinal();
    internal bool IsAlgorithmInitialized();
}
[ExtensionAttribute]
internal static class Microsoft.Data.SqlClient.SqlClientDiagnosticListenerExtensions : object {
    public static string DiagnosticListenerName;
    private static string SqlClientPrefix;
    public static string SqlBeforeExecuteCommand;
    public static string SqlAfterExecuteCommand;
    public static string SqlErrorExecuteCommand;
    public static string SqlBeforeOpenConnection;
    public static string SqlAfterOpenConnection;
    public static string SqlErrorOpenConnection;
    public static string SqlBeforeCloseConnection;
    public static string SqlAfterCloseConnection;
    public static string SqlErrorCloseConnection;
    public static string SqlBeforeCommitTransaction;
    public static string SqlAfterCommitTransaction;
    public static string SqlErrorCommitTransaction;
    public static string SqlBeforeRollbackTransaction;
    public static string SqlAfterRollbackTransaction;
    public static string SqlErrorRollbackTransaction;
    [ExtensionAttribute]
public static Guid WriteCommandBefore(SqlDiagnosticListener this, SqlCommand sqlCommand, SqlTransaction transaction, string operation);
    [ExtensionAttribute]
public static void WriteCommandAfter(SqlDiagnosticListener this, Guid operationId, SqlCommand sqlCommand, SqlTransaction transaction, string operation);
    [ExtensionAttribute]
public static void WriteCommandError(SqlDiagnosticListener this, Guid operationId, SqlCommand sqlCommand, SqlTransaction transaction, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteConnectionOpenBefore(SqlDiagnosticListener this, SqlConnection sqlConnection, string operation);
    [ExtensionAttribute]
public static void WriteConnectionOpenAfter(SqlDiagnosticListener this, Guid operationId, SqlConnection sqlConnection, string operation);
    [ExtensionAttribute]
public static void WriteConnectionOpenError(SqlDiagnosticListener this, Guid operationId, SqlConnection sqlConnection, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteConnectionCloseBefore(SqlDiagnosticListener this, SqlConnection sqlConnection, string operation);
    [ExtensionAttribute]
public static void WriteConnectionCloseAfter(SqlDiagnosticListener this, Guid operationId, Guid clientConnectionId, SqlConnection sqlConnection, string operation);
    [ExtensionAttribute]
public static void WriteConnectionCloseError(SqlDiagnosticListener this, Guid operationId, Guid clientConnectionId, SqlConnection sqlConnection, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteTransactionCommitBefore(SqlDiagnosticListener this, IsolationLevel isolationLevel, SqlConnection connection, SqlInternalTransaction transaction, string operation);
    [ExtensionAttribute]
public static void WriteTransactionCommitAfter(SqlDiagnosticListener this, Guid operationId, IsolationLevel isolationLevel, SqlConnection connection, SqlInternalTransaction transaction, string operation);
    [ExtensionAttribute]
public static void WriteTransactionCommitError(SqlDiagnosticListener this, Guid operationId, IsolationLevel isolationLevel, SqlConnection connection, SqlInternalTransaction transaction, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteTransactionRollbackBefore(SqlDiagnosticListener this, IsolationLevel isolationLevel, SqlConnection connection, SqlInternalTransaction transaction, string transactionName, string operation);
    [ExtensionAttribute]
public static void WriteTransactionRollbackAfter(SqlDiagnosticListener this, Guid operationId, IsolationLevel isolationLevel, SqlConnection connection, SqlInternalTransaction transaction, string transactionName, string operation);
    [ExtensionAttribute]
public static void WriteTransactionRollbackError(SqlDiagnosticListener this, Guid operationId, IsolationLevel isolationLevel, SqlConnection connection, SqlInternalTransaction transaction, Exception ex, string transactionName, string operation);
    [ExtensionAttribute]
public static DiagnosticScope CreateCommandScope(SqlDiagnosticListener this, SqlCommand command, SqlTransaction transaction, string operationName);
    [ExtensionAttribute]
public static DiagnosticTransactionScope CreateTransactionCommitScope(SqlDiagnosticListener this, IsolationLevel isolationLevel, SqlConnection connection, SqlInternalTransaction transaction, string operationName);
    [ExtensionAttribute]
public static DiagnosticTransactionScope CreateTransactionRollbackScope(SqlDiagnosticListener this, IsolationLevel isolationLevel, SqlConnection connection, SqlInternalTransaction transaction, string transactionName, string operationName);
}
internal abstract class Microsoft.Data.SqlClient.SqlClientEncryptionAlgorithm : object {
    internal abstract virtual Byte[] EncryptData(Byte[] plainText);
    internal abstract virtual Byte[] DecryptData(Byte[] cipherText);
}
internal abstract class Microsoft.Data.SqlClient.SqlClientEncryptionAlgorithmFactory : object {
    internal abstract virtual SqlClientEncryptionAlgorithm Create(SqlClientSymmetricKey encryptionKey, SqlClientEncryptionType encryptionType, string encryptionAlgorithm);
}
internal class Microsoft.Data.SqlClient.SqlClientEncryptionAlgorithmFactoryList : object {
    private ConcurrentDictionary`2<string, SqlClientEncryptionAlgorithmFactory> _encryptionAlgoFactoryList;
    private static SqlClientEncryptionAlgorithmFactoryList _singletonInstance;
    private static SqlClientEncryptionAlgorithmFactoryList();
    internal static SqlClientEncryptionAlgorithmFactoryList GetInstance();
    internal string GetRegisteredCipherAlgorithmNames();
    internal void GetAlgorithm(SqlClientSymmetricKey key, byte type, string algorithmName, SqlClientEncryptionAlgorithm& encryptionAlgorithm);
}
internal enum Microsoft.Data.SqlClient.SqlClientEncryptionType : Enum {
    public int value__;
    public static SqlClientEncryptionType PlainText;
    public static SqlClientEncryptionType Deterministic;
    public static SqlClientEncryptionType Randomized;
}
[EventSourceAttribute]
internal class Microsoft.Data.SqlClient.SqlClientEventSource : SqlClientEventSourceBase {
    internal static SqlClientEventSource Log;
    private static string NullStr;
    private static string SqlCommand_ClassName;
    private static long s_nextScopeId;
    private static long s_nextNotificationScopeId;
    private static long s_nextPoolerScopeId;
    private static long s_nextSNIScopeId;
    private static int BeginExecuteEventId;
    private static int EndExecuteEventId;
    private static int TraceEventId;
    private static int ScopeEnterId;
    private static int ScopeExitId;
    private static int NotificationScopeEnterId;
    private static int NotificationScopeExitId;
    private static int NotificationTraceId;
    private static int PoolerScopeEnterId;
    private static int PoolerScopeExitId;
    private static int PoolerTraceId;
    private static int AdvancedTraceId;
    private static int AdvancedScopeEnterId;
    private static int AdvancedScopeExitId;
    private static int AdvancedTraceBinId;
    private static int AdvancedTraceErrorId;
    private static int CorrelationTraceId;
    private static int StateDumpEventId;
    private static int SNITraceEventId;
    private static int SNIScopeEnterId;
    private static int SNIScopeExitId;
    private PollingCounter _activeHardConnections;
    private IncrementingPollingCounter _hardConnectsPerSecond;
    private IncrementingPollingCounter _hardDisconnectsPerSecond;
    private PollingCounter _activeSoftConnections;
    private IncrementingPollingCounter _softConnects;
    private IncrementingPollingCounter _softDisconnects;
    private PollingCounter _numberOfNonPooledConnections;
    private PollingCounter _numberOfPooledConnections;
    private PollingCounter _numberOfActiveConnectionPoolGroups;
    private PollingCounter _numberOfInactiveConnectionPoolGroups;
    private PollingCounter _numberOfActiveConnectionPools;
    private PollingCounter _numberOfInactiveConnectionPools;
    private PollingCounter _numberOfActiveConnections;
    private PollingCounter _numberOfFreeConnections;
    private PollingCounter _numberOfStasisConnections;
    private IncrementingPollingCounter _numberOfReclaimedConnections;
    private long _activeHardConnectionsCounter;
    private long _hardConnectsCounter;
    private long _hardDisconnectsCounter;
    private long _activeSoftConnectionsCounter;
    private long _softConnectsCounter;
    private long _softDisconnectsCounter;
    private long _nonPooledConnectionsCounter;
    private long _pooledConnectionsCounter;
    private long _activeConnectionPoolGroupsCounter;
    private long _inactiveConnectionPoolGroupsCounter;
    private long _activeConnectionPoolsCounter;
    private long _inactiveConnectionPoolsCounter;
    private long _activeConnectionsCounter;
    private long _freeConnectionsCounter;
    private long _stasisConnectionsCounter;
    private long _reclaimedConnectionsCounter;
    private static SqlClientEventSource();
    [NonEventAttribute]
internal bool IsExecutionTraceEnabled();
    [NonEventAttribute]
internal bool IsTraceEnabled();
    [NonEventAttribute]
internal bool IsScopeEnabled();
    [NonEventAttribute]
internal bool IsNotificationTraceEnabled();
    [NonEventAttribute]
internal bool IsNotificationScopeEnabled();
    [NonEventAttribute]
internal bool IsPoolerTraceEnabled();
    [NonEventAttribute]
internal bool IsPoolerScopeEnabled();
    [NonEventAttribute]
internal bool IsAdvancedTraceOn();
    [NonEventAttribute]
internal bool IsCorrelationEnabled();
    [NonEventAttribute]
internal bool IsStateDumpEnabled();
    [NonEventAttribute]
internal bool IsSNITraceEnabled();
    [NonEventAttribute]
internal bool IsSNIScopeEnabled();
    private string GetFormattedMessage(string className, string memberName, string eventType, string message);
    [NonEventAttribute]
internal void TraceEvent(string message, T0 args0, T1 args1);
    [NonEventAttribute]
internal void TraceEvent(string message, T0 args0, T1 args1, T2 args2);
    [NonEventAttribute]
internal void TraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3);
    [NonEventAttribute]
internal void TryTraceEvent(string message);
    [NonEventAttribute]
internal void TryTraceEvent(string message, T0 args0);
    [NonEventAttribute]
internal void TryTraceEvent(string message, T0 args0, T1 args1);
    [NonEventAttribute]
internal void TryTraceEvent(string message, T0 args0, T1 args1, T2 args2);
    [NonEventAttribute]
internal void TryTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3);
    [NonEventAttribute]
internal void TryTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3, T4 args4);
    [NonEventAttribute]
internal void TryTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3, T4 args4, T5 args5);
    [NonEventAttribute]
internal void TryTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3, T4 args4, T5 args5, T6 arg6);
    [NonEventAttribute]
internal long TryScopeEnterEvent(string className, string memberName);
    [NonEventAttribute]
internal long TryScopeEnterEvent(string message, T0 args0);
    [NonEventAttribute]
internal long TryScopeEnterEvent(string message, T0 args0, T1 args1);
    [NonEventAttribute]
internal long TryScopeEnterEvent(string message, T0 args0, T1 args1, T2 args2);
    [NonEventAttribute]
internal long TryScopeEnterEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3);
    [NonEventAttribute]
internal void TryScopeLeaveEvent(long scopeId);
    [NonEventAttribute]
internal void TryBeginExecuteEvent(int objectId, string dataSource, string database, string commandText, Nullable`1<Guid> connectionId, string memberName);
    [NonEventAttribute]
internal void TryEndExecuteEvent(int objectId, int compositeState, int sqlExceptionNumber, Nullable`1<Guid> connectionId, string memberName);
    [NonEventAttribute]
internal void NotificationTraceEvent(string message, T0 args0, T1 args1);
    [NonEventAttribute]
internal void TryNotificationTraceEvent(string message);
    [NonEventAttribute]
internal void TryNotificationTraceEvent(string message, T0 args0);
    [NonEventAttribute]
internal void TryNotificationTraceEvent(string message, T0 args0, T1 args1);
    [NonEventAttribute]
internal void TryNotificationTraceEvent(string message, T0 args0, T1 args1, T2 args2);
    [NonEventAttribute]
internal void TryNotificationTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3);
    [NonEventAttribute]
internal long TryNotificationScopeEnterEvent(string message, T0 args0);
    [NonEventAttribute]
internal long TryNotificationScopeEnterEvent(string message, T0 args0, T1 args1);
    [NonEventAttribute]
internal long TryNotificationScopeEnterEvent(string message, T0 args0, T1 args1, T2 args2);
    [NonEventAttribute]
internal long TryNotificationScopeEnterEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3);
    [NonEventAttribute]
internal void TryNotificationScopeLeaveEvent(long scopeId);
    [NonEventAttribute]
internal void TryPoolerTraceEvent(string message, T0 args0);
    [NonEventAttribute]
internal void TryPoolerTraceEvent(string message, T0 args0, T1 args1);
    [NonEventAttribute]
internal void TryPoolerTraceEvent(string message, T0 args0, T1 args1, T2 args2);
    [NonEventAttribute]
internal void TryPoolerTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3);
    [NonEventAttribute]
internal long TryPoolerScopeEnterEvent(string message, T0 args0);
    [NonEventAttribute]
internal void TryPoolerScopeLeaveEvent(long scopeId);
    [NonEventAttribute]
internal void AdvancedTraceEvent(string message, T0 args0);
    [NonEventAttribute]
internal void AdvancedTraceEvent(string message, T0 args0, T1 args1);
    [NonEventAttribute]
internal void AdvancedTraceEvent(string message, T0 args0, T1 args1, T2 args2);
    [NonEventAttribute]
internal void AdvancedTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3);
    [NonEventAttribute]
internal void TryAdvancedTraceEvent(string message);
    [NonEventAttribute]
internal void TryAdvancedTraceEvent(string message, T0 args0);
    [NonEventAttribute]
internal void TryAdvancedTraceEvent(string message, T0 args0, T1 args1);
    [NonEventAttribute]
internal void TryAdvancedTraceEvent(string message, T0 args0, T1 args1, T2 args2);
    [NonEventAttribute]
internal void TryAdvancedTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3);
    [NonEventAttribute]
internal void TryAdvancedTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3, T4 args4);
    [NonEventAttribute]
internal void TryAdvancedTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3, T4 args4, T5 args5);
    [NonEventAttribute]
internal void TryAdvancedTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3, T4 args4, T5 args5, T6 args6, T7 args7);
    [NonEventAttribute]
internal void TryAdvancedTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3, T4 args4, T5 args5, T6 args6);
    [NonEventAttribute]
internal long TryAdvancedScopeEnterEvent(string message, T0 args0);
    [NonEventAttribute]
internal void TryAdvanceScopeLeave(long scopeId);
    [NonEventAttribute]
internal void TryAdvancedTraceBinEvent(string message, T0 args0, T1 args1, T2 args);
    [NonEventAttribute]
internal void TryAdvancedTraceErrorEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3, T4 args4);
    [NonEventAttribute]
internal void TryCorrelationTraceEvent(string message, T0 args0);
    [NonEventAttribute]
internal void TryCorrelationTraceEvent(string message, T0 args0, T1 args1);
    [NonEventAttribute]
internal void TryCorrelationTraceEvent(string message, T0 args0, T1 args1, T2 args2);
    [NonEventAttribute]
internal void TryCorrelationTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3);
    [NonEventAttribute]
internal void TryCorrelationTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3, T4 args4);
    [NonEventAttribute]
internal void TryCorrelationTraceEvent(string message, T0 args0, T1 args1, T2 args2, T3 args3, T4 args4, T5 args5);
    [NonEventAttribute]
internal void StateDumpEvent(string message, T0 args0, T1 args1);
    [NonEventAttribute]
internal void TrySNITraceEvent(string className, string eventType, string message, string memberName);
    [NonEventAttribute]
internal void TrySNITraceEvent(string className, string eventType, string message, T0 args0, string memberName);
    [NonEventAttribute]
internal void TrySNITraceEvent(string className, string eventType, string message, T0 args0, T1 args1, string memberName);
    [NonEventAttribute]
internal void TrySNITraceEvent(string className, string eventType, string message, T0 args0, T1 args1, T2 args2, string memberName);
    [NonEventAttribute]
internal void TrySNITraceEvent(string className, string eventType, string message, T0 args0, T1 args1, T2 args2, T3 args3, string memberName);
    [NonEventAttribute]
internal void TrySNITraceEvent(string className, string eventType, string message, T0 args0, T1 args1, T2 args2, T3 args3, T4 args4, string memberName);
    [NonEventAttribute]
internal void TrySNITraceEvent(string className, string eventType, string message, T0 args0, T1 args1, T2 args2, T3 args3, T4 args4, T5 args5, string memberName);
    [NonEventAttribute]
internal long TrySNIScopeEnterEvent(string className, string memberName);
    [NonEventAttribute]
internal void TrySNIScopeLeaveEvent(long scopeId);
    [EventAttribute("1")]
internal void BeginExecute(int objectId, string dataSource, string database, string commandText, string message);
    [EventAttribute("2")]
internal void EndExecute(int objectId, int compositestate, int sqlExceptionNumber, string message);
    [EventAttribute("3")]
internal void Trace(string message);
    [EventAttribute("4")]
internal long ScopeEnter(string message);
    [EventAttribute("5")]
internal void ScopeLeave(string message);
    [EventAttribute("8")]
internal void NotificationTrace(string message);
    [EventAttribute("6")]
internal long NotificationScopeEnter(string message);
    [EventAttribute("7")]
internal void NotificationScopeLeave(string message);
    [EventAttribute("11")]
internal void PoolerTrace(string message);
    [EventAttribute("9")]
internal long PoolerScopeEnter(string message);
    [EventAttribute("10")]
internal void PoolerScopeLeave(string message);
    [EventAttribute("12")]
internal void AdvancedTrace(string message);
    [EventAttribute("13")]
internal long AdvancedScopeEnter(string message);
    [EventAttribute("14")]
internal void AdvancedScopeLeave(string message);
    [EventAttribute("15")]
internal void AdvancedTraceBin(string message);
    [EventAttribute("16")]
internal void AdvancedTraceError(string message);
    [EventAttribute("17")]
internal void CorrelationTrace(string message);
    [EventAttribute("18")]
internal void StateDump(string message);
    [EventAttribute("19")]
internal void SNITrace(string message);
    [EventAttribute("20")]
internal long SNIScopeEnter(string message);
    [EventAttribute("21")]
internal void SNIScopeLeave(string message);
    protected virtual void EventCommandMethodCall(EventCommandEventArgs command);
    [NonEventAttribute]
internal virtual void HardConnectRequest();
    [NonEventAttribute]
internal virtual void HardDisconnectRequest();
    [NonEventAttribute]
internal virtual void SoftConnectRequest();
    [NonEventAttribute]
internal virtual void SoftDisconnectRequest();
    [NonEventAttribute]
internal virtual void EnterNonPooledConnection();
    [NonEventAttribute]
internal virtual void ExitNonPooledConnection();
    [NonEventAttribute]
internal virtual void EnterPooledConnection();
    [NonEventAttribute]
internal virtual void ExitPooledConnection();
    [NonEventAttribute]
internal virtual void EnterActiveConnectionPoolGroup();
    [NonEventAttribute]
internal virtual void ExitActiveConnectionPoolGroup();
    [NonEventAttribute]
internal virtual void EnterInactiveConnectionPoolGroup();
    [NonEventAttribute]
internal virtual void ExitInactiveConnectionPoolGroup();
    [NonEventAttribute]
internal virtual void EnterActiveConnectionPool();
    [NonEventAttribute]
internal virtual void ExitActiveConnectionPool();
    [NonEventAttribute]
internal virtual void EnterInactiveConnectionPool();
    [NonEventAttribute]
internal virtual void ExitInactiveConnectionPool();
    [NonEventAttribute]
internal virtual void EnterActiveConnection();
    [NonEventAttribute]
internal virtual void ExitActiveConnection();
    [NonEventAttribute]
internal virtual void EnterFreeConnection();
    [NonEventAttribute]
internal virtual void ExitFreeConnection();
    [NonEventAttribute]
internal virtual void EnterStasisConnection();
    [NonEventAttribute]
internal virtual void ExitStasisConnection();
    [NonEventAttribute]
internal virtual void ReclaimedConnectionRequest();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_0();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_1();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_2();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_3();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_4();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_5();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_6();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_7();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_8();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_9();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_10();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_11();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_12();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_13();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_14();
    [CompilerGeneratedAttribute]
private double <EventCommandMethodCall>b__166_15();
}
internal abstract class Microsoft.Data.SqlClient.SqlClientEventSourceBase : EventSource {
    protected virtual void OnEventCommand(EventCommandEventArgs command);
    protected virtual void EventCommandMethodCall(EventCommandEventArgs command);
    internal virtual void HardConnectRequest();
    internal virtual void HardDisconnectRequest();
    internal virtual void SoftConnectRequest();
    internal virtual void SoftDisconnectRequest();
    internal virtual void EnterNonPooledConnection();
    internal virtual void ExitNonPooledConnection();
    internal virtual void EnterPooledConnection();
    internal virtual void ExitPooledConnection();
    internal virtual void EnterActiveConnectionPoolGroup();
    internal virtual void ExitActiveConnectionPoolGroup();
    internal virtual void EnterInactiveConnectionPoolGroup();
    internal virtual void ExitInactiveConnectionPoolGroup();
    internal virtual void EnterActiveConnectionPool();
    internal virtual void ExitActiveConnectionPool();
    internal virtual void EnterInactiveConnectionPool();
    internal virtual void ExitInactiveConnectionPool();
    internal virtual void EnterActiveConnection();
    internal virtual void ExitActiveConnection();
    internal virtual void EnterFreeConnection();
    internal virtual void ExitFreeConnection();
    internal virtual void EnterStasisConnection();
    internal virtual void ExitStasisConnection();
    internal virtual void ReclaimedConnectionRequest();
}
public class Microsoft.Data.SqlClient.SqlClientFactory : DbProviderFactory {
    public static SqlClientFactory Instance;
    public bool CanCreateBatch { get; }
    private static SqlClientFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public virtual bool get_CanCreateBatch();
    public virtual DbBatch CreateBatch();
    public virtual DbBatchCommand CreateBatchCommand();
}
public class Microsoft.Data.SqlClient.SqlClientLogger : object {
    public bool IsLoggingEnabled { get; }
    public void LogInfo(string type, string method, string message);
    public void LogWarning(string type, string method, string message);
    public void LogError(string type, string method, string message);
    public bool LogAssert(bool value, string type, string method, string message);
    public bool get_IsLoggingEnabled();
}
public static class Microsoft.Data.SqlClient.SqlClientMetaDataCollectionNames : object {
    public static string Columns;
    public static string Databases;
    public static string ForeignKeys;
    public static string IndexColumns;
    public static string Indexes;
    public static string ProcedureParameters;
    public static string Procedures;
    public static string Tables;
    public static string UserDefinedTypes;
    public static string Users;
    public static string ViewColumns;
    public static string Views;
    public static string AllColumns;
    public static string ColumnSetColumns;
    public static string StructuredTypeMembers;
    private static SqlClientMetaDataCollectionNames();
}
internal class Microsoft.Data.SqlClient.SqlClientSymmetricKey : object {
    protected Byte[] _rootKey;
    internal Byte[] RootKey { get; }
    internal SqlClientSymmetricKey(Byte[] rootKey);
    internal virtual Byte[] get_RootKey();
    internal virtual string GetKeyHash();
    internal virtual int Length();
}
internal class Microsoft.Data.SqlClient.SqlCollation : object {
    private static UInt32 IgnoreCase;
    private static UInt32 IgnoreNonSpace;
    private static UInt32 IgnoreWidth;
    private static UInt32 IgnoreKanaType;
    private static UInt32 BinarySort;
    internal static UInt32 MaskLcid;
    private static int LcidVersionBitOffset;
    private static UInt32 MaskLcidVersion;
    private static UInt32 MaskCompareOpt;
    internal UInt32 _info;
    internal byte _sortId;
    internal int LCID { get; }
    internal SqlCompareOptions SqlCompareOptions { get; }
    internal bool IsUTF8 { get; }
    public SqlCollation(UInt32 info, byte sortId);
    internal int get_LCID();
    internal SqlCompareOptions get_SqlCompareOptions();
    internal bool get_IsUTF8();
    internal string TraceString();
    private static int FirstSupportedCollationVersion(int lcid);
    internal static bool Equals(SqlCollation a, SqlCollation b);
    internal static bool Equals(SqlCollation collation, UInt32 info, byte sortId);
    public static SqlCollation FromLCIDAndSort(int lcid, SqlCompareOptions sqlCompareOptions);
}
public class Microsoft.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider : SqlColumnEncryptionKeyStoreProvider {
    public static string ProviderName;
    internal static string RSAEncryptionAlgorithmWithOAEP;
    private static string _certLocationLocalMachine;
    private static string _certLocationCurrentUser;
    private static string _myCertificateStore;
    private static string _certificatePathFormat;
    private static string _hashingAlgorithm;
    private Byte[] _version;
    public virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
    public virtual Byte[] SignColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations);
    public virtual bool VerifyColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations, Byte[] signature);
    private Byte[] ComputeMasterKeyMetadataHash(string masterKeyPath, bool allowEnclaveComputations, bool isSystemOp);
    private void ValidateEncryptionAlgorithm(string encryptionAlgorithm, bool isSystemOp);
    private void ValidateCertificatePathLength(string masterKeyPath, bool isSystemOp);
    private String[] GetValidCertificateLocations();
    private void ValidateNonEmptyCertificatePath(string masterKeyPath, bool isSystemOp);
    private X509Certificate2 GetCertificateByPath(string keyPath, bool isSystemOp);
    private X509Certificate2 GetCertificate(StoreLocation storeLocation, StoreName storeName, string masterKeyPath, string thumbprint, bool isSystemOp);
    private Byte[] RSAEncrypt(Byte[] plainText, X509Certificate2 certificate);
    private Byte[] RSADecrypt(Byte[] cipherText, X509Certificate2 certificate);
    private Byte[] RSASignHashedData(Byte[] dataToSign, X509Certificate2 certificate);
    private bool RSAVerifySignature(Byte[] dataToVerify, Byte[] signature, X509Certificate2 certificate);
}
public class Microsoft.Data.SqlClient.SqlColumnEncryptionCngProvider : SqlColumnEncryptionKeyStoreProvider {
    public static string ProviderName;
    private static string RSAEncryptionAlgorithmWithOAEP;
    private Byte[] _version;
    public virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
    public virtual Byte[] SignColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations);
    public virtual bool VerifyColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations, Byte[] signature);
    private void ValidateEncryptionAlgorithm(string encryptionAlgorithm, bool isSystemOp);
    private void ValidateNonEmptyKeyPath(string masterKeyPath, bool isSystemOp);
    private Byte[] RSAEncrypt(RSACng rsaCngProvider, Byte[] columnEncryptionKey);
    private Byte[] RSADecrypt(RSACng rsaCngProvider, Byte[] encryptedColumnEncryptionKey);
    private Byte[] RSASignHashedData(Byte[] dataToSign, RSACng rsaCngProvider);
    private bool RSAVerifySignature(Byte[] dataToVerify, Byte[] signature, RSACng rsaCngProvider);
    private int GetKeySize(RSACng rsaCngProvider);
    private RSACng CreateRSACngProvider(string keyPath, bool isSystemOp);
    private void GetCngProviderAndKeyId(string keyPath, bool isSystemOp, String& cngProvider, String& keyIdentifier);
}
public class Microsoft.Data.SqlClient.SqlColumnEncryptionCspProvider : SqlColumnEncryptionKeyStoreProvider {
    public static string ProviderName;
    private static string RSAEncryptionAlgorithmWithOAEP;
    private static string HashingAlgorithm;
    private Byte[] _version;
    public virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
    public virtual Byte[] SignColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations);
    public virtual bool VerifyColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations, Byte[] signature);
    private void ValidateEncryptionAlgorithm(string encryptionAlgorithm, bool isSystemOp);
    private void ValidateNonEmptyCSPKeyPath(string masterKeyPath, bool isSystemOp);
    private Byte[] RSAEncrypt(RSACryptoServiceProvider rscp, Byte[] columnEncryptionKey);
    private Byte[] RSADecrypt(RSACryptoServiceProvider rscp, Byte[] encryptedColumnEncryptionKey);
    private Byte[] RSASignHashedData(Byte[] dataToSign, RSACryptoServiceProvider rscp);
    private bool RSAVerifySignature(Byte[] dataToVerify, Byte[] signature, RSACryptoServiceProvider rscp);
    private int GetKeySize(RSACryptoServiceProvider rscp);
    private RSACryptoServiceProvider CreateRSACryptoProvider(string keyPath, bool isSystemOp);
    private void GetCspProviderAndKeyName(string keyPath, bool isSystemOp, String& cspProviderName, String& keyIdentifier);
    private int GetProviderType(string providerName, string keyPath, bool isSystemOp);
}
internal abstract class Microsoft.Data.SqlClient.SqlColumnEncryptionEnclaveProvider : object {
    internal abstract virtual void CreateEnclaveSession(Byte[] enclaveAttestationInfo, ECDiffieHellman clientDiffieHellmanKey, EnclaveSessionParameters enclaveSessionParameters, Byte[] customData, int customDataLength, SqlEnclaveSession& sqlEnclaveSession, Int64& counter);
    internal abstract virtual void GetEnclaveSession(EnclaveSessionParameters enclaveSessionParameters, bool generateCustomData, bool isRetry, SqlEnclaveSession& sqlEnclaveSession, Int64& counter, Byte[]& customData, Int32& customDataLength);
    internal abstract virtual SqlEnclaveAttestationParameters GetAttestationParameters(string attestationUrl, Byte[] customData, int customDataLength);
    internal abstract virtual void InvalidateEnclaveSession(EnclaveSessionParameters enclaveSessionParameters, SqlEnclaveSession enclaveSession);
}
internal class Microsoft.Data.SqlClient.SqlColumnEncryptionInputParameterInfo : object {
    private SmiParameterMetaData _smiParameterMetadata;
    private SqlCipherMetadata _cipherMetadata;
    private Byte[] _serializedWireFormat;
    internal SmiParameterMetaData ParameterMetadata { get; }
    internal Byte[] SerializedWireFormat { get; }
    internal SqlColumnEncryptionInputParameterInfo(SmiParameterMetaData smiParameterMetadata, SqlCipherMetadata cipherMetadata);
    internal SmiParameterMetaData get_ParameterMetadata();
    internal Byte[] get_SerializedWireFormat();
    private Byte[] SerializeToWriteFormat();
    private void SerializeIntIntoBuffer(int value, Byte[] buffer, Int32& offset);
}
public abstract class Microsoft.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider : object {
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <ColumnEncryptionKeyCacheTtl>k__BackingField;
    public Nullable`1<TimeSpan> ColumnEncryptionKeyCacheTtl { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Nullable`1<TimeSpan> get_ColumnEncryptionKeyCacheTtl();
    [CompilerGeneratedAttribute]
public virtual void set_ColumnEncryptionKeyCacheTtl(Nullable`1<TimeSpan> value);
    public abstract virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public abstract virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
    public virtual Byte[] SignColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations);
    public virtual bool VerifyColumnMasterKeyMetadata(string masterKeyPath, bool allowEnclaveComputations, Byte[] signature);
}
[DefaultEventAttribute("RecordsAffected")]
[ToolboxItemAttribute("True")]
[DesignerCategoryAttribute("")]
public class Microsoft.Data.SqlClient.SqlCommand : DbCommand {
    private static int _objectTypeCount;
    private static int MaxRPCNameLength;
    internal int ObjectID;
    private string _commandText;
    private CommandType _commandType;
    private Nullable`1<int> _commandTimeout;
    private UpdateRowSource _updatedRowSource;
    private bool _designTimeInvisible;
    private bool _wasBatchModeColumnEncryptionSettingSetOnce;
    private SqlCommandColumnEncryptionSetting _columnEncryptionSetting;
    internal SqlDependency _sqlDep;
    private static SqlDiagnosticListener s_diagnosticListener;
    private bool _parentOperationStarted;
    internal static Action`1<object> s_cancelIgnoreFailure;
    private static object s_cachedInvalidPrepareHandle;
    private bool _inPrepare;
    private object _prepareHandle;
    private bool _hiddenPrepare;
    private int _preparedConnectionCloseCount;
    private int _preparedConnectionReconnectCount;
    private SqlParameterCollection _parameters;
    private SqlConnection _activeConnection;
    private bool _dirty;
    private EXECTYPE _execType;
    private _SqlRPC[] _rpcArrayOf1;
    private _SqlRPC _rpcForEncryption;
    private _SqlMetaDataSet _cachedMetaData;
    internal ConcurrentDictionary`2<int, SqlTceCipherInfoEntry> keysToBeSentToEnclave;
    internal bool requiresEnclaveComputations;
    internal EnclavePackage enclavePackage;
    private SqlEnclaveAttestationParameters enclaveAttestationParameters;
    private Byte[] customData;
    private int customDataLength;
    private TaskCompletionSource`1<object> _reconnectionCompletionSource;
    private IReadOnlyDictionary`2<string, SqlColumnEncryptionKeyStoreProvider> _customColumnEncryptionKeyStoreProviders;
    private CachedAsyncState _cachedAsyncState;
    internal int _rowsAffected;
    private int _rowsAffectedBySpDescribeParameterEncryption;
    private SqlNotificationRequest _notification;
    private SqlTransaction _transaction;
    private StatementCompletedEventHandler _statementCompletedEventHandler;
    private TdsParserStateObject _stateObj;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _pendingCancel;
    private bool _batchRPCMode;
    private List`1<_SqlRPC> _RPCList;
    private _SqlRPC[] _sqlRPCParameterEncryptionReqArray;
    private int _currentlyExecutingBatch;
    private SqlRetryLogicBaseProvider _retryLogicProvider;
    private int _currentlyExecutingDescribeParameterEncryptionRPC;
    [CompilerGeneratedAttribute]
private bool <IsDescribeParameterEncryptionRPCCurrentlyInProgress>k__BackingField;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _internalEndExecuteInitiated;
    [CompilerGeneratedAttribute]
private bool <CachingQueryMetadataPostponed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableOptimizedParameterBinding>k__BackingField;
    internal static String[] PreSql2008ProcParamsNames;
    internal static String[] Sql2008ProcParamsNames;
    private bool ShouldCacheEncryptionMetadata { get; }
    internal bool InPrepare { get; }
    internal bool IsColumnEncryptionEnabled { get; }
    internal bool ShouldUseEnclaveBasedWorkflow { get; }
    internal bool HasColumnEncryptionKeyStoreProvidersRegistered { get; }
    private CachedAsyncState cachedAsyncState { get; }
    internal bool IsDescribeParameterEncryptionRPCCurrentlyInProgress { get; private set; }
    internal bool CachingQueryMetadataPostponed { get; internal set; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("Data")]
[ResDescriptionAttribute("Connection used by the command.")]
public SqlConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    private SqlInternalConnectionTds InternalTdsConnection { get; }
    private bool IsProviderRetriable { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlRetryLogicBaseProvider RetryLogicProvider { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ResCategoryAttribute("Notification")]
[ResDescriptionAttribute("Notification values used by Microsoft SQL Server.")]
public SqlNotificationRequest Notification { get; public set; }
    internal SqlStatistics Statistics { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("The transaction used by the command.")]
public SqlTransaction Transaction { get; public set; }
    protected DbTransaction DbTransaction { get; protected set; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("Data")]
[ResDescriptionAttribute("Command text to execute.")]
public string CommandText { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ResCategoryAttribute("Data")]
[ResDescriptionAttribute("Column encryption setting for the command. Overrides the connection level default.")]
public SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { get; }
    [ResCategoryAttribute("Data")]
[ResDescriptionAttribute("Time to wait for command to execute.")]
public int CommandTimeout { get; public set; }
    private int DefaultCommandTimeout { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("Data")]
[ResDescriptionAttribute("How to interpret the CommandText.")]
public CommandType CommandType { get; public set; }
    [DefaultValueAttribute("True")]
[DesignOnlyAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool DesignTimeVisible { get; public set; }
    public bool EnableOptimizedParameterBinding { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[ResCategoryAttribute("Data")]
[ResDescriptionAttribute("The parameters collection.")]
public SqlParameterCollection Parameters { get; }
    protected DbParameterCollection DbParameterCollection { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResCategoryAttribute("Update")]
[ResDescriptionAttribute("When used by a DataAdapter.Update, how command results are applied to the current DataRow.")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    internal _SqlMetaDataSet MetaData { get; }
    internal TdsParserStateObject StateObject { get; }
    private bool IsPrepared { get; }
    private bool IsUserPrepared { get; }
    internal bool IsDirty { get; internal set; }
    internal int RowsAffectedByDescribeParameterEncryption { get; internal set; }
    internal int InternalRecordsAffected { get; internal set; }
    public SqlCommand(string cmdText);
    public SqlCommand(string cmdText, SqlConnection connection);
    public SqlCommand(string cmdText, SqlConnection connection, SqlTransaction transaction);
    public SqlCommand(string cmdText, SqlConnection connection, SqlTransaction transaction, SqlCommandColumnEncryptionSetting columnEncryptionSetting);
    private SqlCommand(SqlCommand from);
    private static SqlCommand();
    private bool get_ShouldCacheEncryptionMetadata();
    internal bool get_InPrepare();
    internal bool get_IsColumnEncryptionEnabled();
    internal bool get_ShouldUseEnclaveBasedWorkflow();
    internal bool get_HasColumnEncryptionKeyStoreProvidersRegistered();
    private CachedAsyncState get_cachedAsyncState();
    [CompilerGeneratedAttribute]
internal bool get_IsDescribeParameterEncryptionRPCCurrentlyInProgress();
    [CompilerGeneratedAttribute]
private void set_IsDescribeParameterEncryptionRPCCurrentlyInProgress(bool value);
    [CompilerGeneratedAttribute]
internal bool get_CachingQueryMetadataPostponed();
    [CompilerGeneratedAttribute]
internal void set_CachingQueryMetadataPostponed(bool value);
    public SqlConnection get_Connection();
    public void set_Connection(SqlConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    private SqlInternalConnectionTds get_InternalTdsConnection();
    private bool get_IsProviderRetriable();
    public SqlRetryLogicBaseProvider get_RetryLogicProvider();
    public void set_RetryLogicProvider(SqlRetryLogicBaseProvider value);
    public SqlNotificationRequest get_Notification();
    public void set_Notification(SqlNotificationRequest value);
    internal SqlStatistics get_Statistics();
    public SqlTransaction get_Transaction();
    public void set_Transaction(SqlTransaction value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public SqlCommandColumnEncryptionSetting get_ColumnEncryptionSetting();
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public void ResetCommandTimeout();
    private int get_DefaultCommandTimeout();
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableOptimizedParameterBinding();
    [CompilerGeneratedAttribute]
public void set_EnableOptimizedParameterBinding(bool value);
    public SqlParameterCollection get_Parameters();
    protected virtual DbParameterCollection get_DbParameterCollection();
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public void add_StatementCompleted(StatementCompletedEventHandler value);
    public void remove_StatementCompleted(StatementCompletedEventHandler value);
    internal void OnStatementCompleted(int recordCount);
    private void PropertyChanging();
    public virtual void Prepare();
    private void InternalPrepare();
    internal void Unprepare();
    public virtual void Cancel();
    public SqlParameter CreateParameter();
    protected virtual DbParameter CreateDbParameter();
    protected virtual void Dispose(bool disposing);
    private SqlDataReader RunExecuteReaderWithRetry(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, string method);
    public virtual object ExecuteScalar();
    private object CompleteExecuteScalar(SqlDataReader ds, bool returnLastResult);
    private Task InternalExecuteNonQueryWithRetry(bool sendToPipe, int timeout, Boolean& usedCache, bool asyncWrite, bool inRetry, string methodName);
    public virtual int ExecuteNonQuery();
    public IAsyncResult BeginExecuteNonQuery();
    public IAsyncResult BeginExecuteNonQuery(AsyncCallback callback, object stateObject);
    private IAsyncResult BeginExecuteNonQueryAsync(AsyncCallback callback, object stateObject);
    private IAsyncResult BeginExecuteNonQueryInternal(CommandBehavior behavior, AsyncCallback callback, object stateObject, int timeout, bool inRetry, bool asyncWrite);
    private void BeginExecuteNonQueryInternalReadStage(TaskCompletionSource`1<object> completion);
    private void VerifyEndExecuteState(Task completionTask, string endMethod, bool fullCheckForColumnEncryption);
    private void WaitForAsyncResults(IAsyncResult asyncResult, bool isInternal);
    public int EndExecuteNonQuery(IAsyncResult asyncResult);
    private void ThrowIfReconnectionHasBeenCanceled();
    public int EndExecuteNonQueryAsync(IAsyncResult asyncResult);
    private int EndExecuteNonQueryInternal(IAsyncResult asyncResult);
    private object InternalEndExecuteNonQuery(IAsyncResult asyncResult, bool isInternal, string endMethod);
    private Task InternalExecuteNonQuery(TaskCompletionSource`1<object> completion, bool sendToPipe, int timeout, Boolean& usedCache, bool asyncWrite, bool inRetry, string methodName);
    public XmlReader ExecuteXmlReader();
    public IAsyncResult BeginExecuteXmlReader();
    public IAsyncResult BeginExecuteXmlReader(AsyncCallback callback, object stateObject);
    private IAsyncResult BeginExecuteXmlReaderAsync(AsyncCallback callback, object stateObject);
    private IAsyncResult BeginExecuteXmlReaderInternal(CommandBehavior behavior, AsyncCallback callback, object stateObject, int timeout, bool inRetry, bool asyncWrite);
    private void BeginExecuteXmlReaderInternalReadStage(TaskCompletionSource`1<object> completion);
    public XmlReader EndExecuteXmlReader(IAsyncResult asyncResult);
    private XmlReader EndExecuteXmlReaderAsync(IAsyncResult asyncResult);
    private XmlReader EndExecuteXmlReaderInternal(IAsyncResult asyncResult);
    private XmlReader CompleteXmlReader(SqlDataReader ds, bool isAsync);
    public IAsyncResult BeginExecuteReader();
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject);
    public IAsyncResult BeginExecuteReader(CommandBehavior behavior);
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject, CommandBehavior behavior);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public SqlDataReader ExecuteReader();
    public SqlDataReader ExecuteReader(CommandBehavior behavior);
    public SqlDataReader EndExecuteReader(IAsyncResult asyncResult);
    internal SqlDataReader EndExecuteReaderAsync(IAsyncResult asyncResult);
    private SqlDataReader EndExecuteReaderInternal(IAsyncResult asyncResult);
    private void CleanupExecuteReaderAsync(Task`1<SqlDataReader> task, TaskCompletionSource`1<SqlDataReader> source, Guid operationId);
    private IAsyncResult BeginExecuteReaderInternal(CommandBehavior behavior, AsyncCallback callback, object stateObject, int timeout, bool inRetry, bool asyncWrite);
    private bool TriggerInternalEndAndRetryIfNecessary(CommandBehavior behavior, object stateObject, int timeout, bool usedCache, bool inRetry, bool asyncWrite, TaskCompletionSource`1<object> globalCompletion, TaskCompletionSource`1<object> localCompletion, Func`5<SqlCommand, IAsyncResult, bool, string, object> endFunc, Func`8<SqlCommand, CommandBehavior, AsyncCallback, object, int, bool, bool, IAsyncResult> retryFunc, string endMethod);
    private void CreateLocalCompletionTask(CommandBehavior behavior, object stateObject, int timeout, bool usedCache, bool asyncWrite, TaskCompletionSource`1<object> globalCompletion, TaskCompletionSource`1<object> localCompletion, Func`5<SqlCommand, IAsyncResult, bool, string, object> endFunc, Func`8<SqlCommand, CommandBehavior, AsyncCallback, object, int, bool, bool, IAsyncResult> retryFunc, string endMethod, long firstAttemptStart);
    private void InvalidateEnclaveSession();
    private EnclaveSessionParameters GetEnclaveSessionParameters();
    private void BeginExecuteReaderInternalReadStage(TaskCompletionSource`1<object> completion);
    private SqlDataReader InternalEndExecuteReader(IAsyncResult asyncResult, bool isInternal, string endMethod);
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    private Task`1<int> InternalExecuteNonQueryWithRetryAsync(CancellationToken cancellationToken);
    private Task`1<int> InternalExecuteNonQueryAsync(CancellationToken cancellationToken);
    private void CleanupAfterExecuteNonQueryAsync(Task`1<int> task, TaskCompletionSource`1<int> source, Guid operationId);
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<SqlDataReader> ExecuteReaderAsync();
    public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    public Task`1<SqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    private Task`1<SqlDataReader> InternalExecuteReaderWithRetryAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    private Task`1<SqlDataReader> InternalExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    private void SetCachedCommandExecuteReaderAsyncContext(ExecuteReaderAsyncCallContext instance);
    private void SetCachedCommandExecuteNonQueryAsyncContext(ExecuteNonQueryAsyncCallContext instance);
    private void SetCachedCommandExecuteXmlReaderContext(ExecuteXmlReaderAsyncCallContext instance);
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    private Task`1<object> InternalExecuteScalarAsync(CancellationToken cancellationToken);
    internal Task`1<object> ExecuteScalarBatchAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.SqlCommand/<ExecuteScalarUntilEndAsync>d__208")]
private Task`1<object> ExecuteScalarUntilEndAsync(SqlDataReader reader, CancellationToken cancellationToken);
    public Task`1<XmlReader> ExecuteXmlReaderAsync();
    public Task`1<XmlReader> ExecuteXmlReaderAsync(CancellationToken cancellationToken);
    private Task`1<XmlReader> InternalExecuteXmlReaderWithRetryAsync(CancellationToken cancellationToken);
    private Task`1<XmlReader> InternalExecuteXmlReaderAsync(CancellationToken cancellationToken);
    private void CleanupAfterExecuteXmlReaderAsync(Task`1<XmlReader> task, TaskCompletionSource`1<XmlReader> source, Guid operationId);
    public void RegisterColumnEncryptionKeyStoreProvidersOnCommand(IDictionary`2<string, SqlColumnEncryptionKeyStoreProvider> customProviders);
    private void ValidateCustomProviders(IDictionary`2<string, SqlColumnEncryptionKeyStoreProvider> customProviders);
    internal bool TryGetColumnEncryptionKeyStoreProvider(string providerName, SqlColumnEncryptionKeyStoreProvider& columnKeyStoreProvider);
    internal List`1<string> GetColumnEncryptionCustomKeyStoreProvidersNames();
    private static string UnquoteProcedurePart(string part);
    private static string UnquoteProcedureName(string name, Object& groupNumber);
    internal void DeriveParameters();
    private ParameterDirection ParameterDirectionFromOleDbDirection(short oledbDirection);
    internal _SqlMetaDataSet get_MetaData();
    private void CheckNotificationStateAndAutoEnlist();
    private Task RunExecuteNonQueryTds(string methodName, bool isAsync, int timeout, bool asyncWrite);
    private void RunExecuteNonQueryTdsSetupReconnnectContinuation(string methodName, bool isAsync, int timeout, bool asyncWrite, Task reconnectTask, long reconnectionStart, TaskCompletionSource`1<object> completion);
    private void ResetEncryptionState();
    private void PrepareTransparentEncryptionFinallyBlock(bool closeDataReader, bool clearDataStructures, bool decrementAsyncCount, bool wasDescribeParameterEncryptionNeeded, ReadOnlyDictionary`2<_SqlRPC, _SqlRPC> describeParameterEncryptionRpcOriginalRpcMap, SqlDataReader describeParameterEncryptionDataReader);
    private void PrepareForTransparentEncryption(CommandBehavior cmdBehavior, bool returnStream, bool isAsync, int timeout, TaskCompletionSource`1<object> completion, Task& returnTask, bool asyncWrite, Boolean& usedCache, bool inRetry);
    private SqlDataReader GetParameterEncryptionDataReader(Task& returnTask, Task fetchInputParameterEncryptionInfoTask, SqlDataReader describeParameterEncryptionDataReader, ReadOnlyDictionary`2<_SqlRPC, _SqlRPC> describeParameterEncryptionRpcOriginalRpcMap, bool describeParameterEncryptionNeeded, bool inRetry);
    private SqlDataReader GetParameterEncryptionDataReaderAsync(Task& returnTask, SqlDataReader describeParameterEncryptionDataReader, ReadOnlyDictionary`2<_SqlRPC, _SqlRPC> describeParameterEncryptionRpcOriginalRpcMap, bool describeParameterEncryptionNeeded, bool inRetry);
    private SqlDataReader TryFetchInputParameterEncryptionInfo(int timeout, bool isAsync, bool asyncWrite, Boolean& inputParameterEncryptionNeeded, Task& task, ReadOnlyDictionary`2& describeParameterEncryptionRpcOriginalRpcMap, bool isRetry);
    private SqlParameter GetSqlParameterWithQueryText(string queryText);
    private void PrepareDescribeParameterEncryptionRequest(_SqlRPC originalRpcRequest, _SqlRPC& describeParameterEncryptionRequest, Byte[] attestationParameters);
    private void ReadDescribeEncryptionParameterResults(SqlDataReader ds, ReadOnlyDictionary`2<_SqlRPC, _SqlRPC> describeParameterEncryptionRpcOriginalRpcMap, bool isRetry);
    internal SqlDataReader RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, string method);
    internal SqlDataReader RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, TaskCompletionSource`1<object> completion, int timeout, Task& task, Boolean& usedCache, bool asyncWrite, bool inRetry, string method);
    private SqlDataReader RunExecuteReaderTdsWithTransparentParameterEncryption(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, bool isAsync, int timeout, Task& task, bool asyncWrite, bool inRetry, SqlDataReader ds, bool describeParameterEncryptionRequest, Task describeParameterEncryptionTask);
    private void GenerateEnclavePackage();
    private SqlDataReader RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, bool isAsync, int timeout, Task& task, bool asyncWrite, bool inRetry, SqlDataReader ds, bool describeParameterEncryptionRequest);
    private Task RunExecuteReaderTdsSetupContinuation(RunBehavior runBehavior, SqlDataReader ds, string optionSettings, Task writeTask);
    private void RunExecuteReaderTdsSetupReconnectContinuation(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, bool isAsync, int timeout, bool asyncWrite, bool inRetry, SqlDataReader ds, Task reconnectTask, long reconnectionStart, TaskCompletionSource`1<object> completion);
    private SqlDataReader CompleteAsyncExecuteReader(bool isInternal, bool forDescribeParameterEncryption);
    private void FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, string resetOptionsString, bool isInternal, bool forDescribeParameterEncryption, bool shouldCacheForAlwaysEncrypted);
    private Task`1<T> RegisterForConnectionCloseNotification(Task`1<T> outerTask);
    private void ValidateCommand(bool isAsync, string method);
    private void ValidateAsyncCommand();
    private void GetStateObject(TdsParser parser);
    private void ReliablePutStateObject();
    private void PutStateObject();
    internal void OnDoneDescribeParameterEncryptionProc(TdsParserStateObject stateObj);
    internal void OnDoneProc(TdsParserStateObject stateObject);
    private static void OnDone(TdsParserStateObject stateObj, int index, IList`1<_SqlRPC> rpcList, int rowsAffected);
    internal void OnReturnStatus(int status);
    internal void OnReturnValue(SqlReturnValue rec, TdsParserStateObject stateObj);
    private SqlParameterCollection GetCurrentParameterCollection();
    private SqlParameter GetParameterForOutputValueExtraction(SqlParameterCollection parameters, string paramName, int paramCount);
    private void GetRPCObject(int systemParamCount, int userParamCount, _SqlRPC& rpc, bool forSpDescribeParameterEncryption);
    private void SetUpRPCParameters(_SqlRPC rpc, bool inSchema, SqlParameterCollection parameters);
    private _SqlRPC BuildPrepExec(CommandBehavior behavior);
    private static bool ShouldSendParameter(SqlParameter p, bool includeReturnValue);
    private static int CountSendableParameters(SqlParameterCollection parameters);
    private static int GetParameterCount(SqlParameterCollection parameters);
    private void BuildRPC(bool inSchema, SqlParameterCollection parameters, _SqlRPC& rpc);
    private _SqlRPC BuildExecute(bool inSchema);
    private void BuildExecuteSql(CommandBehavior behavior, string commandText, SqlParameterCollection parameters, _SqlRPC& rpc);
    private SqlParameter BuildStoredProcedureStatementForColumnEncryption(string storedProcedureName, SqlParameterCollection parameters);
    internal string BuildParamList(TdsParser parser, SqlParameterCollection parameters, bool includeReturnValue);
    private static string ParseAndQuoteIdentifier(string identifier, bool isUdtTypeName);
    private static string QuoteIdentifier(ReadOnlySpan`1<string> strings);
    private string GetSetOptionsString(CommandBehavior behavior);
    private string GetResetOptionsString(CommandBehavior behavior);
    private string GetCommandText(CommandBehavior behavior);
    internal void CheckThrowSNIException();
    internal void OnConnectionClosed();
    internal TdsParserStateObject get_StateObject();
    private bool get_IsPrepared();
    private bool get_IsUserPrepared();
    internal bool get_IsDirty();
    internal void set_IsDirty(bool value);
    internal int get_RowsAffectedByDescribeParameterEncryption();
    internal void set_RowsAffectedByDescribeParameterEncryption(int value);
    internal int get_InternalRecordsAffected();
    internal void set_InternalRecordsAffected(int value);
    private void ClearDescribeParameterEncryptionRequests();
    internal void ClearBatchCommand();
    internal void SetBatchRPCMode(bool value, int commandCount);
    internal void SetBatchRPCModeReadyToExecute();
    private void SetColumnEncryptionSetting(SqlCommandColumnEncryptionSetting newColumnEncryptionSetting);
    internal void AddBatchCommand(SqlBatchCommand batchCommand);
    internal Nullable`1<int> GetRecordsAffected(int commandIndex);
    internal SqlBatchCommand GetCurrentBatchCommand();
    internal SqlBatchCommand GetBatchCommand(int index);
    internal int GetCurrentBatchIndex();
    internal SqlException GetErrors(int commandIndex);
    internal static void CancelIgnoreFailureCallback(object state);
    internal void CancelIgnoreFailure();
    private void NotifyDependency();
    private sealed virtual override object System.ICloneable.Clone();
    public SqlCommand Clone();
    private void WriteBeginExecuteEvent();
    private void WriteEndExecuteEvent(bool success, Nullable`1<int> sqlExceptionNumber, bool synchronous);
}
[DesignerCategoryAttribute("")]
public class Microsoft.Data.SqlClient.SqlCommandBuilder : DbCommandBuilder {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public CatalogLocation CatalogLocation { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string CatalogSeparator { get; public set; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("Update")]
[ResDescriptionAttribute("The DataAdapter for which to automatically generate SqlCommands")]
public SqlDataAdapter DataAdapter { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string QuotePrefix { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string QuoteSuffix { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string SchemaSeparator { get; public set; }
    public SqlCommandBuilder(SqlDataAdapter adapter);
    public virtual CatalogLocation get_CatalogLocation();
    public virtual void set_CatalogLocation(CatalogLocation value);
    public virtual string get_CatalogSeparator();
    public virtual void set_CatalogSeparator(string value);
    public SqlDataAdapter get_DataAdapter();
    public void set_DataAdapter(SqlDataAdapter value);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public virtual string get_SchemaSeparator();
    public virtual void set_SchemaSeparator(string value);
    private void SqlRowUpdatingHandler(object sender, SqlRowUpdatingEventArgs ruevent);
    public SqlCommand GetInsertCommand();
    public SqlCommand GetInsertCommand(bool useColumnsForParameterNames);
    public SqlCommand GetUpdateCommand();
    public SqlCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public SqlCommand GetDeleteCommand();
    public SqlCommand GetDeleteCommand(bool useColumnsForParameterNames);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    private void ConsistentQuoteDelimiters(string quotePrefix, string quoteSuffix);
    public static void DeriveParameters(SqlCommand command);
    protected virtual DataTable GetSchemaTable(DbCommand srcCommand);
    protected virtual DbCommand InitializeCommand(DbCommand command);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
}
public enum Microsoft.Data.SqlClient.SqlCommandColumnEncryptionSetting : Enum {
    public int value__;
    public static SqlCommandColumnEncryptionSetting UseConnectionSetting;
    public static SqlCommandColumnEncryptionSetting Enabled;
    public static SqlCommandColumnEncryptionSetting ResultSetOnly;
    public static SqlCommandColumnEncryptionSetting Disabled;
}
internal class Microsoft.Data.SqlClient.SqlCommandSet : object {
    private static string SqlIdentifierPattern;
    private static Regex s_sqlIdentifierParser;
    private static int s_objectTypeCount;
    internal int _objectID;
    private SqlCommand _batchCommand;
    private List`1<SqlBatchCommand> _commandList;
    private SqlCommand BatchCommand { get; }
    internal int CommandCount { get; }
    private List`1<SqlBatchCommand> CommandList { get; }
    unknown int CommandTimeout {internal set; }
    internal SqlConnection Connection { get; internal set; }
    unknown SqlTransaction Transaction {internal set; }
    internal int ObjectID { get; }
    private static SqlCommandSet();
    private SqlCommand get_BatchCommand();
    internal int get_CommandCount();
    private List`1<SqlBatchCommand> get_CommandList();
    internal void set_CommandTimeout(int value);
    internal SqlConnection get_Connection();
    internal void set_Connection(SqlConnection value);
    internal void set_Transaction(SqlTransaction value);
    internal int get_ObjectID();
    internal void Append(SqlCommand command);
    internal static void BuildStoredProcedureName(StringBuilder builder, string part);
    internal void Clear();
    internal void Dispose();
    internal int ExecuteNonQuery();
    internal SqlParameter GetParameter(int commandIndex, int parameterIndex);
    internal bool GetBatchedAffected(int commandIdentifier, Int32& recordsAffected, Exception& error);
    internal int GetParameterCount(int commandIndex);
    private void ValidateCommandBehavior(string method, CommandBehavior behavior);
}
internal class Microsoft.Data.SqlClient.SqlConfigurableRetryCommandSection : SqlConfigurableRetryConnectionSection {
    public static string Name;
    [ConfigurationPropertyAttribute("authorizedSqlCondition")]
public string AuthorizedSqlCondition { get; public set; }
    public sealed virtual string get_AuthorizedSqlCondition();
    public sealed virtual void set_AuthorizedSqlCondition(string value);
}
internal class Microsoft.Data.SqlClient.SqlConfigurableRetryConnectionSection : ConfigurationSection {
    public static string Name;
    [ConfigurationPropertyAttribute("retryLogicType")]
public string RetryLogicType { get; public set; }
    [ConfigurationPropertyAttribute("retryMethod")]
public string RetryMethod { get; public set; }
    [ConfigurationPropertyAttribute("numberOfTries")]
[IntegerValidatorAttribute]
public int NumberOfTries { get; public set; }
    [ConfigurationPropertyAttribute("deltaTime")]
[TimeSpanValidatorAttribute]
public TimeSpan DeltaTime { get; public set; }
    [ConfigurationPropertyAttribute("minTime")]
[TimeSpanValidatorAttribute]
public TimeSpan MinTimeInterval { get; public set; }
    [ConfigurationPropertyAttribute("maxTime")]
[TimeSpanValidatorAttribute]
public TimeSpan MaxTimeInterval { get; public set; }
    [ConfigurationPropertyAttribute("transientErrors")]
[RegexStringValidatorAttribute("^([ \t]*(|-)\d+(?:[ \t]*,[ \t]*(|-)\d+)*[ \t]*)*$")]
public string TransientErrors { get; public set; }
    public sealed virtual string get_RetryLogicType();
    public sealed virtual void set_RetryLogicType(string value);
    public sealed virtual string get_RetryMethod();
    public sealed virtual void set_RetryMethod(string value);
    public sealed virtual int get_NumberOfTries();
    public sealed virtual void set_NumberOfTries(int value);
    public sealed virtual TimeSpan get_DeltaTime();
    public sealed virtual void set_DeltaTime(TimeSpan value);
    public sealed virtual TimeSpan get_MinTimeInterval();
    public sealed virtual void set_MinTimeInterval(TimeSpan value);
    public sealed virtual TimeSpan get_MaxTimeInterval();
    public sealed virtual void set_MaxTimeInterval(TimeSpan value);
    public sealed virtual string get_TransientErrors();
    public sealed virtual void set_TransientErrors(string value);
}
public class Microsoft.Data.SqlClient.SqlConfigurableRetryFactory : object {
    private static object s_syncObject;
    private static HashSet`1<int> s_defaultTransientErrors;
    private static SqlConfigurableRetryFactory();
    public static SqlRetryLogicBaseProvider CreateExponentialRetryProvider(SqlRetryLogicOption retryLogicOption);
    public static SqlRetryLogicBaseProvider CreateIncrementalRetryProvider(SqlRetryLogicOption retryLogicOption);
    public static SqlRetryLogicBaseProvider CreateFixedRetryProvider(SqlRetryLogicOption retryLogicOption);
    private static SqlRetryLogicBaseProvider InternalCreateRetryProvider(SqlRetryLogicOption retryLogicOption, SqlRetryIntervalBaseEnumerator enumerator);
    public static SqlRetryLogicBaseProvider CreateNoneRetryProvider();
    internal static bool IsRetriable(SqlRetryLogicBaseProvider provider);
    private static bool TransientErrorsCondition(Exception e, IEnumerable`1<int> retriableConditions);
}
internal class Microsoft.Data.SqlClient.SqlConfigurableRetryLogicLoader : object {
    private static string TypeName;
    [CompilerGeneratedAttribute]
private SqlRetryLogicBaseProvider <ConnectionProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlRetryLogicBaseProvider <CommandProvider>k__BackingField;
    internal SqlRetryLogicBaseProvider ConnectionProvider { get; private set; }
    internal SqlRetryLogicBaseProvider CommandProvider { get; private set; }
    public SqlConfigurableRetryLogicLoader(ISqlConfigurableRetryConnectionSection connectionRetryConfigs, ISqlConfigurableRetryCommandSection commandRetryConfigs, string cnnSectionName, string cmdSectionName);
    private void AssignProviders(SqlRetryLogicBaseProvider cnnProvider, SqlRetryLogicBaseProvider cmdProvider);
    [CompilerGeneratedAttribute]
internal SqlRetryLogicBaseProvider get_ConnectionProvider();
    [CompilerGeneratedAttribute]
private void set_ConnectionProvider(SqlRetryLogicBaseProvider value);
    [CompilerGeneratedAttribute]
internal SqlRetryLogicBaseProvider get_CommandProvider();
    [CompilerGeneratedAttribute]
private void set_CommandProvider(SqlRetryLogicBaseProvider value);
    private static SqlRetryLogicBaseProvider CreateRetryLogicProvider(string sectionName, ISqlConfigurableRetryConnectionSection configSection);
    private static SqlRetryLogicBaseProvider ResolveRetryLogicProvider(string configurableRetryType, string retryMethod, SqlRetryLogicOption option);
    private static object CreateInstance(Type type, string retryMethodName, SqlRetryLogicOption option);
    private static Object[] PrepareParamValues(ParameterInfo[] parameterInfos, SqlRetryLogicOption option, string retryMethod);
    private static void OnRetryingEvent(object sender, SqlRetryingEventArgs args);
    private static ICollection`1<int> SplitErrorNumberList(string list);
    private static Type LoadType(string fullyQualifiedName);
    private static string MakeFullPath(string directory, string assemblyName, string extension);
    private static Assembly AssemblyResolver(AssemblyName arg);
    private static Type TypeResolver(Assembly arg1, string arg2, bool arg3);
    private static Assembly Default_Resolving(AssemblyLoadContext arg1, AssemblyName arg2);
}
internal class Microsoft.Data.SqlClient.SqlConfigurableRetryLogicManager : object {
    private static string TypeName;
    private static Lazy`1<SqlConfigurableRetryLogicLoader> s_loader;
    internal static SqlRetryLogicBaseProvider ConnectionProvider { get; }
    internal static SqlRetryLogicBaseProvider CommandProvider { get; }
    private static SqlConfigurableRetryLogicManager();
    internal static SqlRetryLogicBaseProvider get_ConnectionProvider();
    internal static SqlRetryLogicBaseProvider get_CommandProvider();
}
[DefaultEventAttribute("InfoMessage")]
[DesignerCategoryAttribute("")]
public class Microsoft.Data.SqlClient.SqlConnection : DbConnection {
    private bool _AsyncCommandInProgress;
    internal SqlStatistics _statistics;
    private bool _collectstats;
    private bool _fireInfoMessageEventOnUserErrors;
    private Tuple`2<TaskCompletionSource`1<DbConnectionInternal>, Task> _currentCompletion;
    private SqlCredential _credential;
    private string _connectionString;
    private int _connectRetryCount;
    private string _accessToken;
    private object _reconnectLock;
    internal Task _currentReconnectionTask;
    private Task _asyncWaitingForReconnection;
    private Guid _originalConnectionId;
    private CancellationTokenSource _reconnectionCancellationSource;
    internal SessionData _recoverySessionData;
    internal bool _suppressStateChangeForReconnection;
    private int _reconnectCount;
    private SqlRetryLogicBaseProvider _retryLogicProvider;
    private static SqlDiagnosticListener s_diagnosticListener;
    internal bool _applyTransientFaultHandling;
    private static CultureCheckState _cultureCheckState;
    private static Dictionary`2<string, SqlColumnEncryptionKeyStoreProvider> s_systemColumnEncryptionKeyStoreProviders;
    private IReadOnlyDictionary`2<string, SqlColumnEncryptionKeyStoreProvider> _customColumnEncryptionKeyStoreProviders;
    private Func`3<SqlAuthenticationParameters, CancellationToken, Task`1<SqlAuthenticationToken>> _accessTokenCallback;
    private static object s_globalCustomColumnEncryptionKeyProvidersLock;
    private static IReadOnlyDictionary`2<string, SqlColumnEncryptionKeyStoreProvider> s_globalCustomColumnEncryptionKeyStoreProviders;
    private static ConcurrentDictionary`2<string, IList`1<string>> _ColumnEncryptionTrustedMasterKeyPaths;
    private static Action`1<object> s_openAsyncCancel;
    private static Action`2<Task`1<object>, object> s_openAsyncComplete;
    [CompilerGeneratedAttribute]
private static TimeSpan <ColumnEncryptionKeyCacheTtl>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <ColumnEncryptionQueryMetadataCacheEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlInfoMessageEventHandler InfoMessage;
    [CompilerGeneratedAttribute]
private bool <ForceNewConnection>k__BackingField;
    private static DbConnectionFactory s_connectionFactory;
    private DbConnectionOptions _userConnectionOptions;
    private DbConnectionPoolGroup _poolGroup;
    private DbConnectionInternal _innerConnection;
    private int _closeCount;
    private static int _objectTypeCount;
    internal int ObjectID;
    internal bool HasColumnEncryptionKeyStoreProvidersRegistered { get; }
    private bool IsProviderRetriable { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlRetryLogicBaseProvider RetryLogicProvider { get; public set; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("Data")]
[ResDescriptionAttribute("Defines the time-to-live of entries in the column encryption key cache.")]
public static TimeSpan ColumnEncryptionKeyCacheTtl { get; public set; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("Data")]
[ResDescriptionAttribute("Defines whether query metadata caching is enabled.")]
public static bool ColumnEncryptionQueryMetadataCacheEnabled { get; public set; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("Data")]
[ResDescriptionAttribute("Dictionary object containing SQL Server names and their trusted column master key paths.")]
public static IDictionary`2<string, IList`1<string>> ColumnEncryptionTrustedMasterKeyPaths { get; }
    internal bool IsColumnEncryptionSettingEnabled { get; }
    internal string EnclaveAttestationUrl { get; }
    internal SqlConnectionAttestationProtocol AttestationProtocol { get; }
    internal SqlConnectionIPAddressPreference iPAddressPreference { get; }
    [DefaultValueAttribute("False")]
[ResCategoryAttribute("Data")]
[ResDescriptionAttribute("Collect statistics for this connection.")]
public bool StatisticsEnabled { get; public set; }
    internal bool AsyncCommandInProgress { get; internal set; }
    internal TransactionBindingEnum TransactionBinding { get; }
    internal TypeSystem TypeSystem { get; }
    internal Version TypeSystemAssemblyVersion { get; }
    internal int ConnectRetryInterval { get; }
    [DefaultValueAttribute("")]
[SettingsBindableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("Data")]
[ResDescriptionAttribute("Information used to connect to a DataSource, such as 'Data Source=x;Initial Catalog=x;Integrated Security=SSPI'.")]
public string ConnectionString { get; public set; }
    [ResDescriptionAttribute("Current connection timeout value, 'Connect Timeout=X' in the ConnectionString.")]
[ResCategoryAttribute("Current SqlServer that the connection is opened to, 'Data Source=X' in the connection string.")]
public int ConnectionTimeout { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("Current connection timeout value, 'Connect Timeout=X' in the ConnectionString.")]
public int CommandTimeout { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("Access token to use for authentication.")]
public string AccessToken { get; public set; }
    public Func`3<SqlAuthenticationParameters, CancellationToken, Task`1<SqlAuthenticationToken>> AccessTokenCallback { get; public set; }
    [ResDescriptionAttribute("Current SQL Server database, 'Initial Catalog=X' in the connection string.")]
[ResCategoryAttribute("Current SqlServer that the connection is opened to, 'Data Source=X' in the connection string.")]
public string Database { get; }
    internal string SQLDNSCachingSupportedState { get; }
    internal string SQLDNSCachingSupportedStateBeforeRedirect { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("Current SqlServer that the connection is opened to, 'Data Source=X' in the connection string.")]
[ResCategoryAttribute("Current SqlServer that the connection is opened to, 'Data Source=X' in the connection string.")]
public string DataSource { get; }
    [ResCategoryAttribute("Data")]
[ResDescriptionAttribute("Network packet size, 'Packet Size=x' in the connection string.")]
[DesignerSerializationVisibilityAttribute("0")]
public int PacketSize { get; }
    [ResCategoryAttribute("Data")]
[ResDescriptionAttribute("A guid to represent the physical connection.")]
[DesignerSerializationVisibilityAttribute("0")]
public Guid ClientConnectionId { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("Version of the SQL Server accessed by the SqlConnection.")]
public string ServerVersion { get; }
    [BrowsableAttribute("False")]
[ResDescriptionAttribute("Server Process Id (SPID) of the active connection.")]
[DesignerSerializationVisibilityAttribute("0")]
public int ServerProcessId { get; }
    [BrowsableAttribute("False")]
[ResDescriptionAttribute("The ConnectionState indicating whether the connection is open or closed.")]
[DesignerSerializationVisibilityAttribute("0")]
public ConnectionState State { get; }
    internal SqlStatistics Statistics { get; }
    [ResCategoryAttribute("Data")]
[ResDescriptionAttribute("Workstation Id, 'Workstation ID=x' in the connection string.")]
[DesignerSerializationVisibilityAttribute("0")]
public string WorkstationId { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ResDescriptionAttribute("User Id and secure password to use for authentication.")]
public SqlCredential Credential { get; public set; }
    protected DbProviderFactory DbProviderFactory { get; }
    public bool FireInfoMessageEventOnUserErrors { get; public set; }
    internal int ReconnectCount { get; }
    internal bool ForceNewConnection { get; internal set; }
    public bool CanCreateBatch { get; }
    internal bool HasLocalTransaction { get; }
    internal bool HasLocalTransactionFromAPI { get; }
    internal bool Is2008OrNewer { get; }
    internal TdsParser Parser { get; }
    internal int CloseCount { get; }
    internal DbConnectionFactory ConnectionFactory { get; }
    internal DbConnectionOptions ConnectionOptions { get; }
    internal DbConnectionInternal InnerConnection { get; }
    internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    internal DbConnectionOptions UserConnectionOptions { get; }
    public SqlConnection(string connectionString);
    public SqlConnection(string connectionString, SqlCredential credential);
    private SqlConnection(SqlConnection connection);
    private static SqlConnection();
    internal bool get_HasColumnEncryptionKeyStoreProvidersRegistered();
    private bool get_IsProviderRetriable();
    public SqlRetryLogicBaseProvider get_RetryLogicProvider();
    public void set_RetryLogicProvider(SqlRetryLogicBaseProvider value);
    [CompilerGeneratedAttribute]
public static TimeSpan get_ColumnEncryptionKeyCacheTtl();
    [CompilerGeneratedAttribute]
public static void set_ColumnEncryptionKeyCacheTtl(TimeSpan value);
    [CompilerGeneratedAttribute]
public static bool get_ColumnEncryptionQueryMetadataCacheEnabled();
    [CompilerGeneratedAttribute]
public static void set_ColumnEncryptionQueryMetadataCacheEnabled(bool value);
    public static IDictionary`2<string, IList`1<string>> get_ColumnEncryptionTrustedMasterKeyPaths();
    internal static bool TryGetSystemColumnEncryptionKeyStoreProvider(string keyStoreName, SqlColumnEncryptionKeyStoreProvider& provider);
    internal bool TryGetColumnEncryptionKeyStoreProvider(string providerName, SqlColumnEncryptionKeyStoreProvider& columnKeyStoreProvider);
    internal static List`1<string> GetColumnEncryptionSystemKeyStoreProvidersNames();
    internal List`1<string> GetColumnEncryptionCustomKeyStoreProvidersNames();
    internal bool get_IsColumnEncryptionSettingEnabled();
    public static void RegisterColumnEncryptionKeyStoreProviders(IDictionary`2<string, SqlColumnEncryptionKeyStoreProvider> customProviders);
    public void RegisterColumnEncryptionKeyStoreProvidersOnConnection(IDictionary`2<string, SqlColumnEncryptionKeyStoreProvider> customProviders);
    private static void ValidateCustomProviders(IDictionary`2<string, SqlColumnEncryptionKeyStoreProvider> customProviders);
    internal string get_EnclaveAttestationUrl();
    internal SqlConnectionAttestationProtocol get_AttestationProtocol();
    internal SqlConnectionIPAddressPreference get_iPAddressPreference();
    private void CacheConnectionStringProperties();
    public bool get_StatisticsEnabled();
    public void set_StatisticsEnabled(bool value);
    internal bool get_AsyncCommandInProgress();
    internal void set_AsyncCommandInProgress(bool value);
    private bool UsesActiveDirectoryIntegrated(SqlConnectionString opt);
    private bool UsesActiveDirectoryInteractive(SqlConnectionString opt);
    private bool UsesActiveDirectoryDeviceCodeFlow(SqlConnectionString opt);
    private bool UsesActiveDirectoryManagedIdentity(SqlConnectionString opt);
    private bool UsesActiveDirectoryMSI(SqlConnectionString opt);
    private bool UsesActiveDirectoryDefault(SqlConnectionString opt);
    private bool UsesActiveDirectoryWorkloadIdentity(SqlConnectionString opt);
    private bool UsesAuthentication(SqlConnectionString opt);
    private bool UsesIntegratedSecurity(SqlConnectionString opt);
    private bool UsesClearUserIdOrPassword(SqlConnectionString opt);
    internal TransactionBindingEnum get_TransactionBinding();
    internal TypeSystem get_TypeSystem();
    internal Version get_TypeSystemAssemblyVersion();
    internal int get_ConnectRetryInterval();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public int get_CommandTimeout();
    public string get_AccessToken();
    public void set_AccessToken(string value);
    public Func`3<SqlAuthenticationParameters, CancellationToken, Task`1<SqlAuthenticationToken>> get_AccessTokenCallback();
    public void set_AccessTokenCallback(Func`3<SqlAuthenticationParameters, CancellationToken, Task`1<SqlAuthenticationToken>> value);
    public virtual string get_Database();
    internal string get_SQLDNSCachingSupportedState();
    internal string get_SQLDNSCachingSupportedStateBeforeRedirect();
    public virtual string get_DataSource();
    public int get_PacketSize();
    public Guid get_ClientConnectionId();
    public virtual string get_ServerVersion();
    public int get_ServerProcessId();
    public virtual ConnectionState get_State();
    internal SqlStatistics get_Statistics();
    public string get_WorkstationId();
    public SqlCredential get_Credential();
    public void set_Credential(SqlCredential value);
    private void CheckAndThrowOnInvalidCombinationOfConnectionStringAndSqlCredential(SqlConnectionString connectionOptions);
    private void CheckAndThrowOnInvalidCombinationOfConnectionOptionAndAccessToken(SqlConnectionString connectionOptions);
    private void CheckAndThrowOnInvalidCombinationOfConnectionOptionAndAccessTokenCallback(SqlConnectionString connectionOptions);
    protected virtual DbProviderFactory get_DbProviderFactory();
    [CompilerGeneratedAttribute]
public void add_InfoMessage(SqlInfoMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_InfoMessage(SqlInfoMessageEventHandler value);
    public bool get_FireInfoMessageEventOnUserErrors();
    public void set_FireInfoMessageEventOnUserErrors(bool value);
    internal int get_ReconnectCount();
    [CompilerGeneratedAttribute]
internal bool get_ForceNewConnection();
    [CompilerGeneratedAttribute]
internal void set_ForceNewConnection(bool value);
    protected virtual void OnStateChange(StateChangeEventArgs stateChange);
    public SqlTransaction BeginTransaction();
    public SqlTransaction BeginTransaction(IsolationLevel iso);
    public SqlTransaction BeginTransaction(string transactionName);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public SqlTransaction BeginTransaction(IsolationLevel iso, string transactionName);
    public virtual void ChangeDatabase(string database);
    public static void ClearAllPools();
    public static void ClearPool(SqlConnection connection);
    private void CloseInnerConnection();
    public virtual void Close();
    public SqlCommand CreateCommand();
    private void DisposeMe(bool disposing);
    public virtual void Open();
    private bool TryOpenWithRetry(TaskCompletionSource`1<DbConnectionInternal> retry, SqlConnectionOverrides overrides);
    public void Open(SqlConnectionOverrides overrides);
    internal void RegisterWaitingForReconnect(Task waitingTask);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.SqlConnection/<ReconnectAsync>d__162")]
private Task ReconnectAsync(int timeout);
    internal Task ValidateAndReconnect(Action beforeDisconnect, int timeout);
    private void WaitForPendingReconnection();
    private void CancelOpenAndWait();
    private Task InternalOpenWithRetryAsync(CancellationToken cancellationToken);
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    private Task InternalOpenAsync(CancellationToken cancellationToken);
    private static void OpenAsyncComplete(Task`1<object> task, object state);
    private static void OpenAsyncCancel(object state);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    public virtual bool get_CanCreateBatch();
    protected virtual DbBatch CreateDbBatch();
    private void PrepareStatisticsForNewConnection();
    private bool TryOpen(TaskCompletionSource`1<DbConnectionInternal> retry, SqlConnectionOverrides overrides);
    internal bool get_HasLocalTransaction();
    internal bool get_HasLocalTransactionFromAPI();
    internal bool get_Is2008OrNewer();
    internal TdsParser get_Parser();
    internal void ValidateConnectionForExecute(string method, SqlCommand command);
    internal static string FixupDatabaseTransactionName(string name);
    internal void OnError(SqlException exception, bool breakConnection, Action`1<Action> wrapCloseInAction);
    internal SqlInternalConnectionTds GetOpenTdsConnection();
    internal SqlInternalConnectionTds GetOpenTdsConnection(string method);
    internal void OnInfoMessage(SqlInfoMessageEventArgs imevent);
    internal void OnInfoMessage(SqlInfoMessageEventArgs imevent, Boolean& notified);
    public static void ChangePassword(string connectionString, string newPassword);
    public static void ChangePassword(string connectionString, SqlCredential credential, SecureString newSecurePassword);
    private static void ChangePassword(string connectionString, SqlConnectionString connectionOptions, SqlCredential credential, string newPassword, SecureString newSecurePassword);
    internal Task`1<T> RegisterForConnectionCloseNotification(Task`1<T> outerTask, object value, int tag);
    public void ResetStatistics();
    public IDictionary RetrieveStatistics();
    private void UpdateStatistics();
    public IDictionary`2<string, object> RetrieveInternalInfo();
    private sealed virtual override object System.ICloneable.Clone();
    private void CopyFrom(SqlConnection connection);
    private Assembly ResolveTypeAssembly(AssemblyName asmRef, bool throwOnError);
    internal void CheckGetExtendedUDTInfo(SqlMetaDataPriv metaData, bool fThrow);
    internal object GetUdtValue(object value, SqlMetaDataPriv metaData, bool returnDBNull);
    internal Byte[] GetBytes(object o);
    internal Byte[] GetBytes(object o, Format& format, Int32& maxSize);
    private SqlUdtInfo GetInfoFromType(Type t);
    internal int get_CloseCount();
    internal DbConnectionFactory get_ConnectionFactory();
    internal DbConnectionOptions get_ConnectionOptions();
    private string ConnectionString_Get();
    private void ConnectionString_Set(DbConnectionPoolKey key);
    internal DbConnectionInternal get_InnerConnection();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
    internal DbConnectionOptions get_UserConnectionOptions();
    internal void Abort(Exception e);
    internal void AddWeakReference(object value, int tag);
    protected virtual DbCommand CreateDbCommand();
    protected virtual void Dispose(bool disposing);
    private void RepairInnerConnection();
    public virtual void EnlistTransaction(Transaction transaction);
    internal void NotifyWeakReference(int message);
    internal void PermissionDemand();
    internal void RemoveWeakReference(object value);
    internal void SetInnerConnectionEvent(DbConnectionInternal to);
    internal bool SetInnerConnectionFrom(DbConnectionInternal to, DbConnectionInternal from);
    internal void SetInnerConnectionTo(DbConnectionInternal to);
    [CompilerGeneratedAttribute]
private Task <ValidateAndReconnect>b__163_0(object state);
}
public enum Microsoft.Data.SqlClient.SqlConnectionAttestationProtocol : Enum {
    public int value__;
    public static SqlConnectionAttestationProtocol NotSpecified;
    public static SqlConnectionAttestationProtocol AAS;
    public static SqlConnectionAttestationProtocol None;
    public static SqlConnectionAttestationProtocol HGS;
}
public enum Microsoft.Data.SqlClient.SqlConnectionColumnEncryptionSetting : Enum {
    public int value__;
    public static SqlConnectionColumnEncryptionSetting Disabled;
    public static SqlConnectionColumnEncryptionSetting Enabled;
}
[TypeConverterAttribute("Microsoft.Data.SqlClient.SqlConnectionEncryptOptionConverter")]
public class Microsoft.Data.SqlClient.SqlConnectionEncryptOption : object {
    private static string TRUE;
    private static string FALSE;
    private static string STRICT;
    private static string TRUE_LOWER;
    private static string YES_LOWER;
    private static string MANDATORY_LOWER;
    private static string FALSE_LOWER;
    private static string NO_LOWER;
    private static string OPTIONAL_LOWER;
    private static string STRICT_LOWER;
    private string _value;
    private static SqlConnectionEncryptOption s_optional;
    private static SqlConnectionEncryptOption s_mandatory;
    private static SqlConnectionEncryptOption s_strict;
    public static SqlConnectionEncryptOption Optional { get; }
    public static SqlConnectionEncryptOption Mandatory { get; }
    public static SqlConnectionEncryptOption Strict { get; }
    private SqlConnectionEncryptOption(string value);
    private static SqlConnectionEncryptOption();
    public static SqlConnectionEncryptOption Parse(string value);
    internal static SqlConnectionEncryptOption Parse(bool value);
    public static bool TryParse(string value, SqlConnectionEncryptOption& result);
    public static SqlConnectionEncryptOption get_Optional();
    public static SqlConnectionEncryptOption get_Mandatory();
    public static SqlConnectionEncryptOption get_Strict();
    public static SqlConnectionEncryptOption op_Implicit(bool value);
    public static bool op_Implicit(SqlConnectionEncryptOption value);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.Data.SqlClient.SqlConnectionEncryptOptionConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class Microsoft.Data.SqlClient.SqlConnectionFactory : DbConnectionFactory {
    private static string _metaDataXml;
    public static SqlConnectionFactory SingletonInstance;
    public DbProviderFactory ProviderFactory { get; }
    private static SqlConnectionFactory();
    private void SqlConnectionFactoryAssemblyLoadContext_Unloading(AssemblyLoadContext obj);
    public virtual DbProviderFactory get_ProviderFactory();
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection);
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions);
    protected virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    internal virtual DbConnectionPoolProviderInfo CreateConnectionPoolProviderInfo(DbConnectionOptions connectionOptions);
    protected virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions connectionOptions);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    internal static SqlConnectionString FindSqlConnectionOptions(SqlConnectionPoolKey key);
    internal virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal virtual DbConnectionInternal GetInnerConnection(DbConnection connection);
    protected virtual int GetObjectId(DbConnection connection);
    internal virtual void PermissionDemand(DbConnection outerConnection);
    internal virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
    protected virtual DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory);
    private void Unload(object sender, EventArgs e);
    private void SubscribeToAssemblyLoadContextUnload();
}
internal enum Microsoft.Data.SqlClient.SqlConnectionInternalSourceType : Enum {
    public int value__;
    public static SqlConnectionInternalSourceType Principle;
    public static SqlConnectionInternalSourceType Failover;
    public static SqlConnectionInternalSourceType RoutingDestination;
}
public enum Microsoft.Data.SqlClient.SqlConnectionIPAddressPreference : Enum {
    public int value__;
    public static SqlConnectionIPAddressPreference IPv4First;
    public static SqlConnectionIPAddressPreference IPv6First;
    public static SqlConnectionIPAddressPreference UsePlatformDefault;
}
[FlagsAttribute]
public enum Microsoft.Data.SqlClient.SqlConnectionOverrides : Enum {
    public int value__;
    public static SqlConnectionOverrides None;
    public static SqlConnectionOverrides OpenWithoutRetry;
}
internal class Microsoft.Data.SqlClient.SqlConnectionPoolGroupProviderInfo : DbConnectionPoolGroupProviderInfo {
    private string _alias;
    private string _failoverPartner;
    private bool _useFailoverPartner;
    internal string FailoverPartner { get; }
    internal bool UseFailoverPartner { get; }
    internal SqlConnectionPoolGroupProviderInfo(SqlConnectionString connectionOptions);
    internal string get_FailoverPartner();
    internal bool get_UseFailoverPartner();
    internal void AliasCheck(string server);
    internal void FailoverCheck(bool actualUseFailoverPartner, SqlConnectionString userConnectionOptions, string actualFailoverPartner);
}
internal class Microsoft.Data.SqlClient.SqlConnectionPoolKey : DbConnectionPoolKey {
    private int _hashValue;
    private SqlCredential _credential;
    private string _accessToken;
    private Func`3<SqlAuthenticationParameters, CancellationToken, Task`1<SqlAuthenticationToken>> _accessTokenCallback;
    internal SqlCredential Credential { get; }
    internal string AccessToken { get; }
    internal Func`3<SqlAuthenticationParameters, CancellationToken, Task`1<SqlAuthenticationToken>> AccessTokenCallback { get; }
    internal string ConnectionString { get; internal set; }
    internal SqlConnectionPoolKey(string connectionString, SqlCredential credential, string accessToken, Func`3<SqlAuthenticationParameters, CancellationToken, Task`1<SqlAuthenticationToken>> accessTokenCallback);
    private SqlConnectionPoolKey(SqlConnectionPoolKey key);
    internal SqlCredential get_Credential();
    internal string get_AccessToken();
    internal Func`3<SqlAuthenticationParameters, CancellationToken, Task`1<SqlAuthenticationToken>> get_AccessTokenCallback();
    internal virtual string get_ConnectionString();
    internal virtual void set_ConnectionString(string value);
    public virtual object Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private void CalculateHashCode();
}
internal class Microsoft.Data.SqlClient.SqlConnectionPoolProviderInfo : DbConnectionPoolProviderInfo {
    private string _instanceName;
    internal string InstanceName { get; internal set; }
    internal string get_InstanceName();
    internal void set_InstanceName(string value);
}
internal class Microsoft.Data.SqlClient.SqlConnectionString : DbConnectionOptions {
    internal static int SynonymCount;
    internal static int DeprecatedSynonymCount;
    private static Dictionary`2<string, string> s_sqlClientSynonyms;
    private bool _integratedSecurity;
    private SqlConnectionEncryptOption _encrypt;
    private bool _trustServerCertificate;
    private bool _enlist;
    private bool _mars;
    private bool _persistSecurityInfo;
    private PoolBlockingPeriod _poolBlockingPeriod;
    private bool _pooling;
    private bool _replication;
    private bool _userInstance;
    private bool _multiSubnetFailover;
    private SqlAuthenticationMethod _authType;
    private SqlConnectionColumnEncryptionSetting _columnEncryptionSetting;
    private string _enclaveAttestationUrl;
    private SqlConnectionAttestationProtocol _attestationProtocol;
    private SqlConnectionIPAddressPreference _ipAddressPreference;
    private int _commandTimeout;
    private int _connectTimeout;
    private int _loadBalanceTimeout;
    private int _maxPoolSize;
    private int _minPoolSize;
    private int _packetSize;
    private int _connectRetryCount;
    private int _connectRetryInterval;
    private ApplicationIntent _applicationIntent;
    private string _applicationName;
    private string _attachDBFileName;
    private string _currentLanguage;
    private string _dataSource;
    private string _localDBInstance;
    private string _failoverPartner;
    private string _initialCatalog;
    private string _password;
    private string _userID;
    private string _hostNameInCertificate;
    private string _serverCertificate;
    private string _serverSPN;
    private string _failoverPartnerSPN;
    private string _workstationId;
    private TransactionBindingEnum _transactionBinding;
    private TypeSystem _typeSystemVersion;
    private Version _typeSystemAssemblyVersion;
    private static Version s_constTypeSystemAsmVersion10;
    private static Version s_constTypeSystemAsmVersion11;
    private string _expandedAttachDBFilename;
    private static Hashtable s_netlibMapping;
    internal bool IntegratedSecurity { get; }
    internal bool Asynchronous { get; }
    internal bool ConnectionReset { get; }
    internal SqlConnectionEncryptOption Encrypt { get; }
    internal string HostNameInCertificate { get; }
    internal bool TrustServerCertificate { get; }
    public string ServerCertificate { get; }
    internal bool Enlist { get; }
    internal bool MARS { get; }
    internal bool MultiSubnetFailover { get; }
    internal SqlAuthenticationMethod Authentication { get; }
    internal SqlConnectionColumnEncryptionSetting ColumnEncryptionSetting { get; }
    internal string EnclaveAttestationUrl { get; }
    internal SqlConnectionAttestationProtocol AttestationProtocol { get; }
    internal SqlConnectionIPAddressPreference IPAddressPreference { get; }
    internal bool PersistSecurityInfo { get; }
    internal bool Pooling { get; }
    internal bool Replication { get; }
    internal bool UserInstance { get; }
    internal int CommandTimeout { get; }
    internal int ConnectTimeout { get; }
    internal int LoadBalanceTimeout { get; }
    internal int MaxPoolSize { get; }
    internal int MinPoolSize { get; }
    internal int PacketSize { get; }
    internal int ConnectRetryCount { get; }
    internal int ConnectRetryInterval { get; }
    internal ApplicationIntent ApplicationIntent { get; }
    internal string ApplicationName { get; }
    internal string AttachDBFilename { get; }
    internal string CurrentLanguage { get; }
    internal string DataSource { get; }
    internal string LocalDBInstance { get; }
    internal string FailoverPartner { get; }
    internal string InitialCatalog { get; }
    internal string Password { get; }
    internal string UserID { get; }
    internal string WorkstationId { get; }
    internal PoolBlockingPeriod PoolBlockingPeriod { get; }
    internal string ServerSPN { get; }
    internal string FailoverPartnerSPN { get; }
    internal TypeSystem TypeSystemVersion { get; }
    internal Version TypeSystemAssemblyVersion { get; }
    internal TransactionBindingEnum TransactionBinding { get; }
    internal bool EnforceLocalHost { get; }
    internal SqlConnectionString(string connectionString);
    internal SqlConnectionString(SqlConnectionString connectionOptions, string dataSource, bool userInstance, Nullable`1<bool> setEnlistValue);
    private static SqlConnectionString();
    internal bool get_IntegratedSecurity();
    internal bool get_Asynchronous();
    internal bool get_ConnectionReset();
    internal SqlConnectionEncryptOption get_Encrypt();
    internal string get_HostNameInCertificate();
    internal bool get_TrustServerCertificate();
    public string get_ServerCertificate();
    internal bool get_Enlist();
    internal bool get_MARS();
    internal bool get_MultiSubnetFailover();
    internal SqlAuthenticationMethod get_Authentication();
    internal SqlConnectionColumnEncryptionSetting get_ColumnEncryptionSetting();
    internal string get_EnclaveAttestationUrl();
    internal SqlConnectionAttestationProtocol get_AttestationProtocol();
    internal SqlConnectionIPAddressPreference get_IPAddressPreference();
    internal bool get_PersistSecurityInfo();
    internal bool get_Pooling();
    internal bool get_Replication();
    internal bool get_UserInstance();
    internal int get_CommandTimeout();
    internal int get_ConnectTimeout();
    internal int get_LoadBalanceTimeout();
    internal int get_MaxPoolSize();
    internal int get_MinPoolSize();
    internal int get_PacketSize();
    internal int get_ConnectRetryCount();
    internal int get_ConnectRetryInterval();
    internal ApplicationIntent get_ApplicationIntent();
    internal string get_ApplicationName();
    internal string get_AttachDBFilename();
    internal string get_CurrentLanguage();
    internal string get_DataSource();
    internal string get_LocalDBInstance();
    internal string get_FailoverPartner();
    internal string get_InitialCatalog();
    internal string get_Password();
    internal string get_UserID();
    internal string get_WorkstationId();
    internal PoolBlockingPeriod get_PoolBlockingPeriod();
    internal string get_ServerSPN();
    internal string get_FailoverPartnerSPN();
    internal TypeSystem get_TypeSystemVersion();
    internal Version get_TypeSystemAssemblyVersion();
    internal TransactionBindingEnum get_TransactionBinding();
    internal bool get_EnforceLocalHost();
    protected internal virtual string Expand();
    private static bool CompareHostName(String& host, string name, bool fixup);
    internal static Dictionary`2<string, string> GetParseSynonyms();
    internal string ObtainWorkstationId();
    private void ValidateValueLength(string value, int limit, string key);
    internal static void VerifyLocalHostAndFixup(String& host, bool enforceLocalHost, bool fixup);
    private static string GetComputerNameDnsFullyQualified();
    internal ApplicationIntent ConvertValueToApplicationIntent();
    internal void ThrowUnsupportedIfKeywordSet(string keyword);
    internal SqlAuthenticationMethod ConvertValueToAuthenticationType();
    internal SqlConnectionColumnEncryptionSetting ConvertValueToColumnEncryptionSetting();
    internal SqlConnectionAttestationProtocol ConvertValueToAttestationProtocol();
    internal SqlConnectionIPAddressPreference ConvertValueToIPAddressPreference();
    internal PoolBlockingPeriod ConvertValueToPoolBlockingPeriod();
    internal SqlConnectionEncryptOption ConvertValueToSqlConnectionEncrypt();
    internal static Hashtable NetlibMapping();
    internal static bool ValidProtocol(string protocol);
}
[DefaultMemberAttribute("Item")]
[DefaultPropertyAttribute("Data Source")]
[TypeConverterAttribute("Microsoft.Data.SqlClient.SqlConnectionStringBuilder/SqlConnectionStringBuilderConverter")]
public class Microsoft.Data.SqlClient.SqlConnectionStringBuilder : DbConnectionStringBuilder {
    internal static int KeywordsCount;
    private static String[] s_validKeywords;
    private static Dictionary`2<string, Keywords> s_keywords;
    private ApplicationIntent _applicationIntent;
    private string _applicationName;
    private string _attachDBFilename;
    private string _currentLanguage;
    private string _dataSource;
    private string _failoverPartner;
    private string _initialCatalog;
    private string _password;
    private string _transactionBinding;
    private string _typeSystemVersion;
    private string _userID;
    private string _workstationID;
    private int _commandTimeout;
    private int _connectTimeout;
    private int _loadBalanceTimeout;
    private int _maxPoolSize;
    private int _minPoolSize;
    private int _packetSize;
    private int _connectRetryCount;
    private int _connectRetryInterval;
    private SqlConnectionEncryptOption _encrypt;
    private string _hostNameInCertificate;
    private string _serverCertificate;
    private bool _trustServerCertificate;
    private bool _enlist;
    private bool _integratedSecurity;
    private bool _multipleActiveResultSets;
    private bool _multiSubnetFailover;
    private bool _persistSecurityInfo;
    private PoolBlockingPeriod _poolBlockingPeriod;
    private bool _pooling;
    private bool _replication;
    private bool _userInstance;
    private SqlAuthenticationMethod _authentication;
    private SqlConnectionColumnEncryptionSetting _columnEncryptionSetting;
    private string _enclaveAttestationUrl;
    private SqlConnectionAttestationProtocol _attestationProtocol;
    private SqlConnectionIPAddressPreference _ipAddressPreference;
    private string _serverSPN;
    private string _failoverPartnerSPN;
    internal static int DeprecatedKeywordsCount;
    private static String[] s_notSupportedKeywords;
    private static String[] s_notSupportedNetworkLibraryKeywords;
    public object Item { get; public set; }
    [DisplayNameAttribute("Application Intent")]
[ResCategoryAttribute("Initialization")]
[ResDescriptionAttribute("Declares the application workload type when connecting to a server.")]
[RefreshPropertiesAttribute("1")]
public ApplicationIntent ApplicationIntent { get; public set; }
    [DisplayNameAttribute("Application Name")]
[ResCategoryAttribute("Context")]
[ResDescriptionAttribute("The name of the application.")]
[RefreshPropertiesAttribute("1")]
public string ApplicationName { get; public set; }
    [DisplayNameAttribute("AttachDbFilename")]
[ResCategoryAttribute("Source")]
[ResDescriptionAttribute("The name of the primary file, including the full path name, of an attachable database.")]
[EditorAttribute("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[RefreshPropertiesAttribute("1")]
public string AttachDBFilename { get; public set; }
    [DisplayNameAttribute("Command Timeout")]
[ResCategoryAttribute("Initialization")]
[ResDescriptionAttribute("Time to wait for command to execute.")]
[RefreshPropertiesAttribute("1")]
public int CommandTimeout { get; public set; }
    [DisplayNameAttribute("Connect Timeout")]
[ResCategoryAttribute("Initialization")]
[ResDescriptionAttribute("The length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error.")]
[RefreshPropertiesAttribute("1")]
public int ConnectTimeout { get; public set; }
    [DisplayNameAttribute("Current Language")]
[ResCategoryAttribute("Initialization")]
[ResDescriptionAttribute("The SQL Server Language record name.")]
[RefreshPropertiesAttribute("1")]
public string CurrentLanguage { get; public set; }
    [DisplayNameAttribute("Data Source")]
[ResCategoryAttribute("Source")]
[ResDescriptionAttribute("Indicates the name of the data source to connect to.")]
[RefreshPropertiesAttribute("1")]
public string DataSource { get; public set; }
    [DisplayNameAttribute("Server SPN")]
[ResCategoryAttribute("Source")]
[ResDescriptionAttribute("The service principal name (SPN) of the server.")]
[RefreshPropertiesAttribute("1")]
public string ServerSPN { get; public set; }
    [DisplayNameAttribute("Encrypt")]
[ResCategoryAttribute("Security")]
[ResDescriptionAttribute("When true, SQL Server uses SSL encryption for all data sent between the client and server if the server has a certificate installed.")]
[RefreshPropertiesAttribute("1")]
public SqlConnectionEncryptOption Encrypt { get; public set; }
    [DisplayNameAttribute("Host Name In Certificate")]
[ResCategoryAttribute("Security")]
[ResDescriptionAttribute("The hostname to be expected in the server's certificate when encryption is negotiated, if it's different from the default value derived from Addr/Address/Server.")]
[RefreshPropertiesAttribute("1")]
public string HostNameInCertificate { get; public set; }
    [DisplayNameAttribute("Server Certificate")]
[ResCategoryAttribute("Security")]
[ResDescriptionAttribute("The path to a certificate file to match against the SQL Server TLS/SSL certificate.")]
[RefreshPropertiesAttribute("1")]
public string ServerCertificate { get; public set; }
    [DisplayNameAttribute("Column Encryption Setting")]
[ResCategoryAttribute("Security")]
[ResDescriptionAttribute("Default column encryption setting for all the commands on the connection.")]
[RefreshPropertiesAttribute("1")]
public SqlConnectionColumnEncryptionSetting ColumnEncryptionSetting { get; public set; }
    [DisplayNameAttribute("Enclave Attestation Url")]
[ResCategoryAttribute("Security")]
[ResDescriptionAttribute("Specifies an endpoint of an enclave attestation service, which will be used to verify whether the enclave, configured in the SQL Server instance for computations on database columns encrypted using Always Encrypted, is valid and secure.")]
[RefreshPropertiesAttribute("1")]
public string EnclaveAttestationUrl { get; public set; }
    [DisplayNameAttribute("Attestation Protocol")]
[ResCategoryAttribute("Security")]
[ResDescriptionAttribute("Specifies an attestation protocol for its corresponding enclave attestation service.")]
[RefreshPropertiesAttribute("1")]
public SqlConnectionAttestationProtocol AttestationProtocol { get; public set; }
    [DisplayNameAttribute("IP Address Preference")]
[ResCategoryAttribute("Security")]
[ResDescriptionAttribute("Specifies an IP address preference when connecting to SQL instances.")]
[RefreshPropertiesAttribute("1")]
public SqlConnectionIPAddressPreference IPAddressPreference { get; public set; }
    [DisplayNameAttribute("Trust Server Certificate")]
[ResCategoryAttribute("Security")]
[ResDescriptionAttribute("When true (and encrypt=true), SQL Server uses SSL encryption for all data sent between the client and server without validating the server certificate.")]
[RefreshPropertiesAttribute("1")]
public bool TrustServerCertificate { get; public set; }
    [DisplayNameAttribute("Enlist")]
[ResCategoryAttribute("Pooling")]
[ResDescriptionAttribute("Sessions in a Component Services (or MTS, if you are using Microsoft Windows NT) environment should automatically be enlisted in a global transaction where required.")]
[RefreshPropertiesAttribute("1")]
public bool Enlist { get; public set; }
    [DisplayNameAttribute("Failover Partner")]
[ResCategoryAttribute("Source")]
[ResDescriptionAttribute("The name or network address of the instance of SQL Server that acts as a failover partner.")]
[RefreshPropertiesAttribute("1")]
public string FailoverPartner { get; public set; }
    [DisplayNameAttribute("Failover Partner SPN")]
[ResCategoryAttribute("Source")]
[ResDescriptionAttribute("The service principal name (SPN) of the failover partner.")]
[RefreshPropertiesAttribute("1")]
public string FailoverPartnerSPN { get; public set; }
    [DisplayNameAttribute("Initial Catalog")]
[ResCategoryAttribute("Source")]
[ResDescriptionAttribute("The name of the initial catalog or database in the data source.")]
[RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("Microsoft.Data.SqlClient.SqlConnectionStringBuilder/SqlInitialCatalogConverter")]
public string InitialCatalog { get; public set; }
    [DisplayNameAttribute("Integrated Security")]
[ResCategoryAttribute("Security")]
[ResDescriptionAttribute("Whether the connection is to be a secure connection or not.")]
[RefreshPropertiesAttribute("1")]
public bool IntegratedSecurity { get; public set; }
    [DisplayNameAttribute("Authentication")]
[ResCategoryAttribute("Security")]
[ResDescriptionAttribute("Specifies the method of authenticating with SQL Server.")]
[RefreshPropertiesAttribute("1")]
public SqlAuthenticationMethod Authentication { get; public set; }
    [DisplayNameAttribute("Load Balance Timeout")]
[ResCategoryAttribute("Pooling")]
[ResDescriptionAttribute("The minimum amount of time (in seconds) for this connection to live in the pool before being destroyed.")]
[RefreshPropertiesAttribute("1")]
public int LoadBalanceTimeout { get; public set; }
    [DisplayNameAttribute("Max Pool Size")]
[ResCategoryAttribute("Pooling")]
[ResDescriptionAttribute("The maximum number of connections allowed in the pool.")]
[RefreshPropertiesAttribute("1")]
public int MaxPoolSize { get; public set; }
    [DisplayNameAttribute("Connect Retry Count")]
[ResCategoryAttribute("Connection Resiliency")]
[ResDescriptionAttribute("Number of attempts to restore connection.")]
[RefreshPropertiesAttribute("1")]
public int ConnectRetryCount { get; public set; }
    [DisplayNameAttribute("Connect Retry Interval")]
[ResCategoryAttribute("Connection Resiliency")]
[ResDescriptionAttribute("Delay between attempts to restore connection.")]
[RefreshPropertiesAttribute("1")]
public int ConnectRetryInterval { get; public set; }
    [DisplayNameAttribute("Min Pool Size")]
[ResCategoryAttribute("Pooling")]
[ResDescriptionAttribute("The minimum number of connections allowed in the pool.")]
[RefreshPropertiesAttribute("1")]
public int MinPoolSize { get; public set; }
    [DisplayNameAttribute("Multiple Active Result Sets")]
[ResCategoryAttribute("Advanced")]
[ResDescriptionAttribute("When true, multiple result sets can be returned and read from one connection.")]
[RefreshPropertiesAttribute("1")]
public bool MultipleActiveResultSets { get; public set; }
    [DisplayNameAttribute("Multi Subnet Failover")]
[ResCategoryAttribute("Source")]
[ResDescriptionAttribute("If your application is connecting to a high-availability, disaster recovery (AlwaysOn) availability group (AG) on different subnets, MultiSubnetFailover=Yes configures SqlConnection to provide faster detection of and connection to the (currently) active server.")]
[RefreshPropertiesAttribute("1")]
public bool MultiSubnetFailover { get; public set; }
    [DisplayNameAttribute("Packet Size")]
[ResCategoryAttribute("Advanced")]
[ResDescriptionAttribute("Size in bytes of the network packets used to communicate with an instance of SQL Server.")]
[RefreshPropertiesAttribute("1")]
public int PacketSize { get; public set; }
    [DisplayNameAttribute("Password")]
[ResCategoryAttribute("Security")]
[ResDescriptionAttribute("Indicates the password to be used when connecting to the data source.")]
[PasswordPropertyTextAttribute("True")]
[RefreshPropertiesAttribute("1")]
public string Password { get; public set; }
    [DisplayNameAttribute("Persist Security Info")]
[ResCategoryAttribute("Security")]
[ResDescriptionAttribute("When false, security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state.")]
[RefreshPropertiesAttribute("1")]
public bool PersistSecurityInfo { get; public set; }
    [DisplayNameAttribute("Pool Blocking Period")]
[ResCategoryAttribute("Pooling")]
[ResDescriptionAttribute("Defines the blocking period behavior for a connection pool.")]
[RefreshPropertiesAttribute("1")]
public PoolBlockingPeriod PoolBlockingPeriod { get; public set; }
    [DisplayNameAttribute("Pooling")]
[ResCategoryAttribute("Pooling")]
[ResDescriptionAttribute("When true, the connection object is drawn from the appropriate pool, or if necessary, is created and added to the appropriate pool.")]
[RefreshPropertiesAttribute("1")]
public bool Pooling { get; public set; }
    [DisplayNameAttribute("Replication")]
[ResCategoryAttribute("Replication")]
[ResDescriptionAttribute("Used by SQL Server in Replication.")]
[RefreshPropertiesAttribute("1")]
public bool Replication { get; public set; }
    [DisplayNameAttribute("Transaction Binding")]
[ResCategoryAttribute("Advanced")]
[ResDescriptionAttribute("Indicates binding behavior of connection to a System.Transactions Transaction when enlisted.")]
[RefreshPropertiesAttribute("1")]
public string TransactionBinding { get; public set; }
    [DisplayNameAttribute("Type System Version")]
[ResCategoryAttribute("Advanced")]
[ResDescriptionAttribute("Indicates which server type system the provider will expose through the DataReader.")]
[RefreshPropertiesAttribute("1")]
public string TypeSystemVersion { get; public set; }
    [DisplayNameAttribute("User ID")]
[ResCategoryAttribute("Security")]
[ResDescriptionAttribute("Indicates the user ID to be used when connecting to the data source.")]
[RefreshPropertiesAttribute("1")]
public string UserID { get; public set; }
    [DisplayNameAttribute("User Instance")]
[ResCategoryAttribute("Source")]
[ResDescriptionAttribute("Indicates whether the connection will be re-directed to connect to an instance of SQL Server running under the user's account.")]
[RefreshPropertiesAttribute("1")]
public bool UserInstance { get; public set; }
    [DisplayNameAttribute("Workstation ID")]
[ResCategoryAttribute("Context")]
[ResDescriptionAttribute("The name of the workstation connecting to SQL Server.")]
[RefreshPropertiesAttribute("1")]
public string WorkstationID { get; public set; }
    public bool IsFixedSize { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public SqlConnectionStringBuilder(string connectionString);
    private static SqlConnectionStringBuilder();
    private static String[] CreateValidKeywords();
    private static Dictionary`2<string, Keywords> CreateKeywordsDictionary();
    private static bool ConvertToBoolean(object value);
    private static int ConvertToInt32(object value);
    private static bool ConvertToIntegratedSecurity(object value);
    private static SqlAuthenticationMethod ConvertToAuthenticationType(string keyword, object value);
    private static string ConvertToString(object value);
    private static ApplicationIntent ConvertToApplicationIntent(string keyword, object value);
    private static SqlConnectionColumnEncryptionSetting ConvertToColumnEncryptionSetting(string keyword, object value);
    private static SqlConnectionAttestationProtocol ConvertToAttestationProtocol(string keyword, object value);
    private static SqlConnectionEncryptOption ConvertToSqlConnectionEncryptOption(string keyword, object value);
    private static SqlConnectionIPAddressPreference ConvertToIPAddressPreference(string keyword, object value);
    private static PoolBlockingPeriod ConvertToPoolBlockingPeriod(string keyword, object value);
    private object GetAt(Keywords index);
    private Keywords GetIndex(string keyword);
    private void Reset(Keywords index);
    private void SetValue(string keyword, bool value);
    private void SetValue(string keyword, int value);
    private void SetValue(string keyword, string value);
    private void SetApplicationIntentValue(ApplicationIntent value);
    private void SetColumnEncryptionSettingValue(SqlConnectionColumnEncryptionSetting value);
    private void SetAttestationProtocolValue(SqlConnectionAttestationProtocol value);
    private void SetSqlConnectionEncryptionValue(SqlConnectionEncryptOption value);
    private void SetIPAddressPreferenceValue(SqlConnectionIPAddressPreference value);
    private void SetAuthenticationValue(SqlAuthenticationMethod value);
    private void SetPoolBlockingPeriodValue(PoolBlockingPeriod value);
    private Exception UnsupportedKeyword(string keyword);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public ApplicationIntent get_ApplicationIntent();
    public void set_ApplicationIntent(ApplicationIntent value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_AttachDBFilename();
    public void set_AttachDBFilename(string value);
    public int get_CommandTimeout();
    public void set_CommandTimeout(int value);
    public int get_ConnectTimeout();
    public void set_ConnectTimeout(int value);
    public string get_CurrentLanguage();
    public void set_CurrentLanguage(string value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public string get_ServerSPN();
    public void set_ServerSPN(string value);
    public SqlConnectionEncryptOption get_Encrypt();
    public void set_Encrypt(SqlConnectionEncryptOption value);
    public string get_HostNameInCertificate();
    public void set_HostNameInCertificate(string value);
    public string get_ServerCertificate();
    public void set_ServerCertificate(string value);
    public SqlConnectionColumnEncryptionSetting get_ColumnEncryptionSetting();
    public void set_ColumnEncryptionSetting(SqlConnectionColumnEncryptionSetting value);
    public string get_EnclaveAttestationUrl();
    public void set_EnclaveAttestationUrl(string value);
    public SqlConnectionAttestationProtocol get_AttestationProtocol();
    public void set_AttestationProtocol(SqlConnectionAttestationProtocol value);
    public SqlConnectionIPAddressPreference get_IPAddressPreference();
    public void set_IPAddressPreference(SqlConnectionIPAddressPreference value);
    public bool get_TrustServerCertificate();
    public void set_TrustServerCertificate(bool value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public string get_FailoverPartner();
    public void set_FailoverPartner(string value);
    public string get_FailoverPartnerSPN();
    public void set_FailoverPartnerSPN(string value);
    public string get_InitialCatalog();
    public void set_InitialCatalog(string value);
    public bool get_IntegratedSecurity();
    public void set_IntegratedSecurity(bool value);
    public SqlAuthenticationMethod get_Authentication();
    public void set_Authentication(SqlAuthenticationMethod value);
    public int get_LoadBalanceTimeout();
    public void set_LoadBalanceTimeout(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_ConnectRetryCount();
    public void set_ConnectRetryCount(int value);
    public int get_ConnectRetryInterval();
    public void set_ConnectRetryInterval(int value);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public bool get_MultipleActiveResultSets();
    public void set_MultipleActiveResultSets(bool value);
    public bool get_MultiSubnetFailover();
    public void set_MultiSubnetFailover(bool value);
    public int get_PacketSize();
    public void set_PacketSize(int value);
    public string get_Password();
    public void set_Password(string value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public PoolBlockingPeriod get_PoolBlockingPeriod();
    public void set_PoolBlockingPeriod(PoolBlockingPeriod value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public bool get_Replication();
    public void set_Replication(bool value);
    public string get_TransactionBinding();
    public void set_TransactionBinding(string value);
    public string get_TypeSystemVersion();
    public void set_TypeSystemVersion(string value);
    public string get_UserID();
    public void set_UserID(string value);
    public bool get_UserInstance();
    public void set_UserInstance(bool value);
    public string get_WorkstationID();
    public void set_WorkstationID(string value);
    public virtual bool get_IsFixedSize();
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    public virtual bool Remove(string keyword);
    public virtual bool ShouldSerialize(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
}
internal class Microsoft.Data.SqlClient.SqlConnectionTimeoutErrorInternal : object {
    private SqlConnectionTimeoutPhaseDuration[] _phaseDurations;
    private SqlConnectionTimeoutPhaseDuration[] _originalPhaseDurations;
    private SqlConnectionTimeoutErrorPhase _currentPhase;
    private SqlConnectionInternalSourceType _currentSourceType;
    private bool _isFailoverScenario;
    internal SqlConnectionTimeoutErrorPhase CurrentPhase { get; }
    internal SqlConnectionTimeoutErrorPhase get_CurrentPhase();
    public void SetFailoverScenario(bool useFailoverServer);
    public void SetInternalSourceType(SqlConnectionInternalSourceType sourceType);
    internal void ResetAndRestartPhase();
    internal void SetAndBeginPhase(SqlConnectionTimeoutErrorPhase timeoutErrorPhase);
    internal void EndPhase(SqlConnectionTimeoutErrorPhase timeoutErrorPhase);
    internal void SetAllCompleteMarker();
    internal string GetErrorMessage();
}
internal enum Microsoft.Data.SqlClient.SqlConnectionTimeoutErrorPhase : Enum {
    public int value__;
    public static SqlConnectionTimeoutErrorPhase Undefined;
    public static SqlConnectionTimeoutErrorPhase PreLoginBegin;
    public static SqlConnectionTimeoutErrorPhase InitializeConnection;
    public static SqlConnectionTimeoutErrorPhase SendPreLoginHandshake;
    public static SqlConnectionTimeoutErrorPhase ConsumePreLoginHandshake;
    public static SqlConnectionTimeoutErrorPhase LoginBegin;
    public static SqlConnectionTimeoutErrorPhase ProcessConnectionAuth;
    public static SqlConnectionTimeoutErrorPhase PostLogin;
    public static SqlConnectionTimeoutErrorPhase Complete;
    public static SqlConnectionTimeoutErrorPhase Count;
}
internal class Microsoft.Data.SqlClient.SqlConnectionTimeoutPhaseDuration : object {
    private Stopwatch _swDuration;
    internal void StartCapture();
    internal void StopCapture();
    internal long GetMilliSecondDuration();
}
public class Microsoft.Data.SqlClient.SqlCredential : object {
    private string _userId;
    private SecureString _password;
    public string UserId { get; }
    public SecureString Password { get; }
    public SqlCredential(string userId, SecureString password);
    public string get_UserId();
    public SecureString get_Password();
}
[DefaultEventAttribute("RowUpdated")]
[DesignerCategoryAttribute("")]
public class Microsoft.Data.SqlClient.SqlDataAdapter : DbDataAdapter {
    private static object s_eventRowUpdated;
    private static object s_eventRowUpdating;
    private SqlCommand _deleteCommand;
    private SqlCommand _insertCommand;
    private SqlCommand _selectCommand;
    private SqlCommand _updateCommand;
    private SqlCommandSet _commandSet;
    private int _updateBatchSize;
    private static int s_objectTypeCount;
    internal int _objectID;
    internal int ObjectID { get; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("Update")]
[ResDescriptionAttribute("Used during Update for deleted rows in DataSet.")]
public SqlCommand DeleteCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("Update")]
[ResDescriptionAttribute("Used during Update for new rows in DataSet.")]
public SqlCommand InsertCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("Fill")]
[ResDescriptionAttribute("Used during Fill/FillSchema.")]
public SqlCommand SelectCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    [DefaultValueAttribute("")]
[ResCategoryAttribute("Update")]
[ResDescriptionAttribute("Used during Update for modified rows in DataSet.")]
public SqlCommand UpdateCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    public int UpdateBatchSize { get; public set; }
    public SqlDataAdapter(SqlCommand selectCommand);
    public SqlDataAdapter(string selectCommandText, string selectConnectionString);
    public SqlDataAdapter(string selectCommandText, SqlConnection selectConnection);
    private SqlDataAdapter(SqlDataAdapter from);
    private static SqlDataAdapter();
    internal int get_ObjectID();
    public SqlCommand get_DeleteCommand();
    public void set_DeleteCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    public SqlCommand get_InsertCommand();
    public void set_InsertCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    public SqlCommand get_SelectCommand();
    public void set_SelectCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    public SqlCommand get_UpdateCommand();
    public void set_UpdateCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    public virtual int get_UpdateBatchSize();
    public virtual void set_UpdateBatchSize(int value);
    protected virtual int AddToBatch(IDbCommand command);
    protected virtual void ClearBatch();
    protected virtual int ExecuteBatch();
    protected virtual IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex);
    protected virtual bool GetBatchedRecordsAffected(int commandIdentifier, Int32& recordsAffected, Exception& error);
    protected virtual void InitializeBatching();
    protected virtual void TerminateBatching();
    private sealed virtual override object System.ICloneable.Clone();
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public void add_RowUpdated(SqlRowUpdatedEventHandler value);
    public void remove_RowUpdated(SqlRowUpdatedEventHandler value);
    public void add_RowUpdating(SqlRowUpdatingEventHandler value);
    public void remove_RowUpdating(SqlRowUpdatingEventHandler value);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Data.SqlClient.SqlDataReader : DbDataReader {
    internal SharedState _sharedState;
    private TdsParser _parser;
    private TdsParserStateObject _stateObj;
    private SqlCommand _command;
    private SqlConnection _connection;
    private int _defaultLCID;
    private bool _haltRead;
    private bool _metaDataConsumed;
    private bool _browseModeInfoConsumed;
    private bool _isClosed;
    private bool _isInitialized;
    private bool _hasRows;
    private ALTROWSTATUS _altRowStatus;
    private int _recordsAffected;
    private long _defaultTimeoutMilliseconds;
    private TypeSystem _typeSystem;
    private SqlStatistics _statistics;
    private SqlBuffer[] _data;
    private SqlStreamingXml _streamingXml;
    private _SqlMetaDataSet _metaData;
    private _SqlMetaDataSetCollection _altMetaDataSetCollection;
    private FieldNameLookup _fieldNameLookup;
    private CommandBehavior _commandBehavior;
    private static int s_objectTypeCount;
    private static ReadOnlyCollection`1<DbColumn> s_emptySchema;
    internal static int ObjectID;
    private MultiPartTableName[] _tableNames;
    private string _resetOptionsString;
    private int _lastColumnWithDataChunkRead;
    private long _columnDataBytesRead;
    private long _columnDataCharsRead;
    private Char[] _columnDataChars;
    private int _columnDataCharsIndex;
    private Task _currentTask;
    private Snapshot _snapshot;
    private CancellationTokenSource _cancelAsyncOnCloseTokenSource;
    private CancellationToken _cancelAsyncOnCloseToken;
    private SqlSequentialStream _currentStream;
    private SqlSequentialTextReader _currentTextReader;
    [CompilerGeneratedAttribute]
private SensitivityClassification <SensitivityClassification>k__BackingField;
    unknown bool BrowseModeInfoConsumed {internal set; }
    internal SqlCommand Command { get; }
    protected SqlConnection Connection { get; }
    public SensitivityClassification SensitivityClassification { get; internal set; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    internal bool IsInitialized { get; internal set; }
    internal _SqlMetaDataSet MetaData { get; }
    public int RecordsAffected { get; }
    unknown string ResetOptionsString {internal set; }
    private SqlStatistics Statistics { get; }
    internal MultiPartTableName[] TableNames { get; internal set; }
    public int VisibleFieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal SqlDataReader(SqlCommand command, CommandBehavior behavior);
    private static SqlDataReader();
    internal void set_BrowseModeInfoConsumed(bool value);
    internal SqlCommand get_Command();
    protected SqlConnection get_Connection();
    [CompilerGeneratedAttribute]
public SensitivityClassification get_SensitivityClassification();
    [CompilerGeneratedAttribute]
internal void set_SensitivityClassification(SensitivityClassification value);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    internal bool get_IsInitialized();
    internal void set_IsInitialized(bool value);
    internal long ColumnDataBytesRemaining();
    internal _SqlMetaDataSet get_MetaData();
    internal virtual SmiExtendedMetaData[] GetInternalSmiMetaData();
    public virtual int get_RecordsAffected();
    internal void set_ResetOptionsString(string value);
    private SqlStatistics get_Statistics();
    internal MultiPartTableName[] get_TableNames();
    internal void set_TableNames(MultiPartTableName[] value);
    public virtual int get_VisibleFieldCount();
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    internal void Bind(TdsParserStateObject stateObj);
    internal DataTable BuildSchemaTable();
    internal void Cancel(SqlCommand command);
    private bool TryCleanPartialRead();
    private void CleanPartialReadReliable();
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    private bool TryCloseInternal(bool closeReader);
    internal virtual void CloseReaderFromConnection();
    private bool TryConsumeMetaData();
    public virtual string GetDataTypeName(int i);
    private string GetDataTypeNameInternal(_SqlMetaData metaData);
    internal virtual StorageType GetVariantInternalStorageType(int i);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int i);
    private Type GetFieldTypeInternal(_SqlMetaData metaData);
    internal virtual int GetLocaleId(int i);
    public virtual string GetName(int i);
    public virtual Type GetProviderSpecificFieldType(int i);
    private Type GetProviderSpecificFieldTypeInternal(_SqlMetaData metaData);
    public virtual int GetOrdinal(string name);
    public virtual object GetProviderSpecificValue(int i);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual DataTable GetSchemaTable();
    public virtual bool GetBoolean(int i);
    public virtual XmlReader GetXmlReader(int i);
    public virtual Stream GetStream(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    internal virtual long GetBytesInternal(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    private bool TryGetBytesInternal(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length, Int64& remaining);
    internal int GetBytesInternalSequential(int i, Byte[] buffer, int index, int length, Nullable`1<long> timeoutMilliseconds);
    internal bool TryGetBytesInternalSequential(int i, Byte[] buffer, int index, int length, Int32& bytesRead);
    public virtual TextReader GetTextReader(int i);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    private long GetCharsFromPlpData(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    internal long GetStreamingXmlChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual SqlBoolean GetSqlBoolean(int i);
    public virtual SqlBinary GetSqlBinary(int i);
    public virtual SqlByte GetSqlByte(int i);
    public virtual SqlBytes GetSqlBytes(int i);
    public virtual SqlChars GetSqlChars(int i);
    public virtual SqlDateTime GetSqlDateTime(int i);
    public virtual SqlDecimal GetSqlDecimal(int i);
    public virtual SqlGuid GetSqlGuid(int i);
    public virtual SqlDouble GetSqlDouble(int i);
    public virtual SqlInt16 GetSqlInt16(int i);
    public virtual SqlInt32 GetSqlInt32(int i);
    public virtual SqlInt64 GetSqlInt64(int i);
    public virtual SqlMoney GetSqlMoney(int i);
    public virtual SqlSingle GetSqlSingle(int i);
    public virtual SqlString GetSqlString(int i);
    public virtual SqlXml GetSqlXml(int i);
    public virtual object GetSqlValue(int i);
    private object GetSqlValueInternal(int i);
    private object GetSqlValueFromSqlBufferInternal(SqlBuffer data, _SqlMetaData metaData);
    public virtual int GetSqlValues(Object[] values);
    public virtual string GetString(int i);
    public virtual T GetFieldValue(int i);
    public virtual object GetValue(int i);
    public virtual TimeSpan GetTimeSpan(int i);
    public virtual DateTimeOffset GetDateTimeOffset(int i);
    private object GetValueInternal(int i);
    private object GetValueFromSqlBufferInternal(SqlBuffer data, _SqlMetaData metaData);
    private T GetFieldValueInternal(int i, bool isAsync);
    private T GetFieldValueFromSqlBufferInternal(SqlBuffer data, _SqlMetaData metaData, bool isAsync);
    public virtual int GetValues(Object[] values);
    private MetaType GetVersionedMetaType(MetaType actualMetaType);
    private bool TryHasMoreResults(Boolean& moreResults);
    private bool TryHasMoreRows(Boolean& moreRows);
    private bool IsRowToken(byte token);
    public virtual bool IsDBNull(int i);
    protected internal bool IsCommandBehavior(CommandBehavior condition);
    public virtual bool NextResult();
    private bool TryNextResult(Boolean& more);
    public virtual bool Read();
    private bool TryReadInternal(bool setTimeout, Boolean& more);
    private void ReadColumn(int i, bool setTimeout, bool allowPartiallyReadColumn);
    private bool TryReadColumn(int i, bool setTimeout, bool allowPartiallyReadColumn, bool forStreaming);
    private bool TryReadColumnData();
    private void ReadColumnHeader(int i);
    private bool TryReadColumnHeader(int i);
    internal bool TryReadColumnInternal(int i, bool readHeaderOnly, bool forStreaming);
    private bool WillHaveEnoughData(int targetColumn, bool headerOnly);
    private bool TryResetBlobState();
    private void CloseActiveSequentialStreamAndTextReader();
    private void RestoreServerSettings(TdsParser parser, TdsParserStateObject stateObj);
    internal bool TrySetAltMetaDataSet(_SqlMetaDataSet metaDataSet, bool metaDataConsumed);
    private void ClearMetaData();
    internal bool TrySetSensitivityClassification(SensitivityClassification sensitivityClassification);
    internal bool TrySetMetaData(_SqlMetaDataSet metaData, bool moreInfo);
    private void SetTimeout(long timeoutMilliseconds);
    private bool HasActiveStreamOrTextReaderOnColumn(int columnIndex);
    private void CheckMetaDataIsReady();
    private void CheckMetaDataIsReady(int columnIndex, bool permitAsync);
    private void CheckDataIsReady();
    private void CheckHeaderIsReady(int columnIndex, bool permitAsync, string methodName);
    private void CheckDataIsReady(int columnIndex, bool allowPartiallyReadColumn, bool permitAsync, string methodName);
    [ConditionalAttribute("DEBUG")]
private void AssertReaderState(bool requireData, bool permitAsync, Nullable`1<int> columnIndex, bool enforceSequentialAccess);
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    private static Task`1<bool> NextResultAsyncExecute(Task task, object state);
    internal Task`1<int> GetBytesAsync(int columnIndex, Byte[] buffer, int index, int length, int timeout, CancellationToken cancellationToken, Int32& bytesRead);
    private static Task`1<int> GetBytesAsyncSeekExecute(Task task, object state);
    private static Task`1<int> GetBytesAsyncReadExecute(Task task, object state);
    private Task`1<int> GetBytesAsyncReadDataStage(GetBytesAsyncCallContext context, bool isContinuation, Int32& bytesRead);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    private static Task`1<bool> ReadAsyncExecute(Task task, object state);
    private void SetCachedReadAsyncCallContext(ReadAsyncCallContext instance);
    public virtual Task`1<bool> IsDBNullAsync(int i, CancellationToken cancellationToken);
    private static Task`1<bool> IsDBNullAsyncExecute(Task task, object state);
    private void SetCachedIDBNullAsyncCallContext(IsDBNullAsyncCallContext instance);
    public virtual Task`1<T> GetFieldValueAsync(int i, CancellationToken cancellationToken);
    private static Task`1<T> GetFieldValueAsyncExecute(Task task, object state);
    private Task`1<T> InvokeAsyncCall(SqlDataReaderBaseAsyncCallContext`1<T> context);
    private Task`1<T> ExecuteAsyncCall(AAsyncBaseCallContext`2<SqlDataReader, T> context);
    private Task`1<T> ContinueAsyncCall(Task task, SqlDataReaderBaseAsyncCallContext`1<T> context);
    private void CompleteAsyncCall(Task`1<T> task, SqlDataReaderBaseAsyncCallContext`1<T> context);
    private void PrepareAsyncInvocation(bool useSnapshot);
    private void CleanupAfterAsyncInvocation(bool ignoreCloseToken);
    private void CleanupAfterAsyncInvocationInternal(TdsParserStateObject stateObj, bool resetNetworkPacketTaskSource);
    private void PrepareForAsyncContinuation();
    private void SwitchToAsyncWithoutSnapshot();
    public sealed virtual ReadOnlyCollection`1<DbColumn> GetColumnSchema();
    private ReadOnlyCollection`1<DbColumn> BuildColumnSchema();
}
internal class Microsoft.Data.SqlClient.SqlDbColumn : DbColumn {
    private _SqlMetaData _metadata;
    unknown Nullable`1<bool> SqlIsAliased {internal set; }
    unknown Nullable`1<bool> SqlIsKey {internal set; }
    unknown Nullable`1<bool> SqlIsHidden {internal set; }
    unknown Nullable`1<bool> SqlIsExpression {internal set; }
    unknown Type SqlDataType {internal set; }
    unknown string SqlDataTypeName {internal set; }
    unknown Nullable`1<int> SqlNumericScale {internal set; }
    internal SqlDbColumn(_SqlMetaData md);
    private void Populate();
    internal void set_SqlIsAliased(Nullable`1<bool> value);
    internal void set_SqlIsKey(Nullable`1<bool> value);
    internal void set_SqlIsHidden(Nullable`1<bool> value);
    internal void set_SqlIsExpression(Nullable`1<bool> value);
    internal void set_SqlDataType(Type value);
    internal void set_SqlDataTypeName(string value);
    internal void set_SqlNumericScale(Nullable`1<int> value);
}
internal class Microsoft.Data.SqlClient.SqlDelegatedTransaction : object {
    private static int _objectTypeCount;
    [CompilerGeneratedAttribute]
private int <ObjectID>k__BackingField;
    private static int _globalTransactionsTokenVersionSizeInBytes;
    private SqlInternalConnection _connection;
    private IsolationLevel _isolationLevel;
    private SqlInternalTransaction _internalTransaction;
    private Transaction _atomicTransaction;
    private bool _active;
    internal int ObjectID { get; }
    internal Transaction Transaction { get; }
    internal bool IsActive { get; }
    internal SqlDelegatedTransaction(SqlInternalConnection connection, Transaction tx);
    private Guid GetGlobalTxnIdentifierFromToken();
    [CompilerGeneratedAttribute]
internal int get_ObjectID();
    internal Transaction get_Transaction();
    public sealed virtual void Initialize();
    internal bool get_IsActive();
    public sealed virtual Byte[] Promote();
    public sealed virtual void Rollback(SinglePhaseEnlistment enlistment);
    public sealed virtual void SinglePhaseCommit(SinglePhaseEnlistment enlistment);
    internal void TransactionEnded(Transaction transaction);
    private SqlInternalConnection GetValidConnection();
    private void ValidateActiveOnConnection(SqlInternalConnection connection);
}
public class Microsoft.Data.SqlClient.SqlDependency : object {
    private string _id;
    private string _options;
    private int _timeout;
    private bool _dependencyFired;
    private List`1<EventContextPair> _eventList;
    private object _eventHandlerLock;
    private DateTime _expirationTime;
    private List`1<string> _serverList;
    private static object s_startStopLock;
    private static string s_appDomainKey;
    private static Dictionary`2<string, Dictionary`2<IdentityUserNamePair, List`1<DatabaseServicePair>>> s_serverUserHash;
    private static SqlDependencyProcessDispatcher s_processDispatcher;
    private static int s_objectTypeCount;
    [CompilerGeneratedAttribute]
private int <ObjectID>k__BackingField;
    internal int ObjectID { get; }
    public bool HasChanges { get; }
    public string Id { get; }
    internal static string AppDomainKey { get; }
    internal DateTime ExpirationTime { get; }
    internal string Options { get; }
    internal static SqlDependencyProcessDispatcher ProcessDispatcher { get; }
    internal int Timeout { get; }
    public SqlDependency(SqlCommand command);
    public SqlDependency(SqlCommand command, string options, int timeout);
    private static SqlDependency();
    [CompilerGeneratedAttribute]
internal int get_ObjectID();
    public bool get_HasChanges();
    public string get_Id();
    internal static string get_AppDomainKey();
    internal DateTime get_ExpirationTime();
    internal string get_Options();
    internal static SqlDependencyProcessDispatcher get_ProcessDispatcher();
    internal int get_Timeout();
    public void add_OnChange(OnChangeEventHandler value);
    public void remove_OnChange(OnChangeEventHandler value);
    public void AddCommandDependency(SqlCommand command);
    public static bool Start(string connectionString);
    public static bool Start(string connectionString, string queue);
    internal static bool Start(string connectionString, string queue, bool useDefaults);
    public static bool Stop(string connectionString);
    public static bool Stop(string connectionString, string queue);
    internal static bool Stop(string connectionString, string queue, bool useDefaults, bool startFailed);
    private static bool AddToServerUserHash(string server, IdentityUserNamePair identityUser, DatabaseServicePair databaseService);
    private static void RemoveFromServerUserHash(string server, IdentityUserNamePair identityUser, DatabaseServicePair databaseService);
    internal static string GetDefaultComposedOptions(string server, string failoverServer, IdentityUserNamePair identityUser, string database);
    internal void AddToServerList(string server);
    internal bool ContainsServer(string server);
    internal string ComputeHashAndAddToDispatcher(SqlCommand command);
    internal void Invalidate(SqlNotificationType type, SqlNotificationInfo info, SqlNotificationSource source);
    internal void StartTimer(SqlNotificationRequest notificationRequest);
    private void AddCommandInternal(SqlCommand cmd);
    private string ComputeCommandHash(string connectionString, SqlCommand command);
    internal static string FixupServiceOrDatabaseName(string name);
}
internal class Microsoft.Data.SqlClient.SqlDependencyPerAppDomainDispatcher : MarshalByRefObject {
    internal static SqlDependencyPerAppDomainDispatcher SingletonInstance;
    internal object _instanceLock;
    private Dictionary`2<string, SqlDependency> _dependencyIdToDependencyHash;
    private Dictionary`2<string, DependencyList> _notificationIdToDependenciesHash;
    private Dictionary`2<string, string> _commandHashToNotificationId;
    private bool _sqlDependencyTimeOutTimerStarted;
    private DateTime _nextTimeout;
    private Timer _timeoutTimer;
    private static int s_objectTypeCount;
    [CompilerGeneratedAttribute]
private int <ObjectID>k__BackingField;
    internal int ObjectID { get; }
    private static SqlDependencyPerAppDomainDispatcher();
    [CompilerGeneratedAttribute]
internal int get_ObjectID();
    private void SubscribeToAppDomainUnload();
    private void SubscribeToAssemblyLoadContextUnload();
    private void UnloadEventHandler(object sender, EventArgs e);
    [ObsoleteAttribute("InitializeLifetimeService() is not supported after .Net5.0 and throws PlatformNotSupportedException.")]
public virtual object InitializeLifetimeService();
    internal void AddDependencyEntry(SqlDependency dep);
    internal string AddCommandEntry(string commandHash, SqlDependency dep);
    internal void InvalidateCommandID(SqlNotification sqlNotification);
    internal void InvalidateServer(string server, SqlNotification sqlNotification);
    internal SqlDependency LookupDependencyEntry(string id);
    private void LookupDependencyEntryWithRemove(string id);
    private List`1<SqlDependency> LookupCommandEntryWithRemove(string notificationId);
    private void RemoveDependencyFromCommandToDependenciesHash(SqlDependency dependency);
    internal void StartTimer(SqlDependency dep);
    private static void TimeoutTimerCallback(object state);
    private void SqlDependencyPerAppDomainDispatcher_Unloading(AssemblyLoadContext obj);
}
internal class Microsoft.Data.SqlClient.SqlDiagnosticListener : DiagnosticListener {
    public SqlDiagnosticListener(string name);
    private void SqlDiagnosticListener_Unloading(AssemblyLoadContext obj);
}
internal class Microsoft.Data.SqlClient.SQLDNSInfo : object {
    [CompilerGeneratedAttribute]
private string <FQDN>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddrIPv4>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddrIPv6>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Port>k__BackingField;
    public string FQDN { get; public set; }
    public string AddrIPv4 { get; public set; }
    public string AddrIPv6 { get; public set; }
    public string Port { get; public set; }
    internal SQLDNSInfo(string FQDN, string ipv4, string ipv6, string port);
    [CompilerGeneratedAttribute]
public string get_FQDN();
    [CompilerGeneratedAttribute]
public void set_FQDN(string value);
    [CompilerGeneratedAttribute]
public string get_AddrIPv4();
    [CompilerGeneratedAttribute]
public void set_AddrIPv4(string value);
    [CompilerGeneratedAttribute]
public string get_AddrIPv6();
    [CompilerGeneratedAttribute]
public void set_AddrIPv6(string value);
    [CompilerGeneratedAttribute]
public string get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(string value);
}
internal class Microsoft.Data.SqlClient.SqlEnclaveAttestationParameters : object {
    private Byte[] _input;
    [CompilerGeneratedAttribute]
private int <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private ECDiffieHellman <ClientDiffieHellmanKey>k__BackingField;
    internal int Protocol { get; private set; }
    internal ECDiffieHellman ClientDiffieHellmanKey { get; private set; }
    internal SqlEnclaveAttestationParameters(int protocol, Byte[] input, ECDiffieHellman clientDiffieHellmanKey);
    [CompilerGeneratedAttribute]
internal int get_Protocol();
    [CompilerGeneratedAttribute]
private void set_Protocol(int value);
    [CompilerGeneratedAttribute]
internal ECDiffieHellman get_ClientDiffieHellmanKey();
    [CompilerGeneratedAttribute]
private void set_ClientDiffieHellmanKey(ECDiffieHellman value);
    internal Byte[] GetInput();
}
internal class Microsoft.Data.SqlClient.SqlEnclaveSession : object {
    private static string _sessionKeyName;
    private static string _className;
    private Byte[] _sessionKey;
    [CompilerGeneratedAttribute]
private long <SessionId>k__BackingField;
    internal long SessionId { get; }
    internal SqlEnclaveSession(Byte[] sessionKey, long sessionId);
    private static SqlEnclaveSession();
    [CompilerGeneratedAttribute]
internal long get_SessionId();
    internal Byte[] GetSessionKey();
    private Byte[] Clone(Byte[] arrayToClone);
}
internal class Microsoft.Data.SqlClient.SqlEncryptionKeyInfo : object {
    internal Byte[] encryptedKey;
    internal int databaseId;
    internal int cekId;
    internal int cekVersion;
    internal Byte[] cekMdVersion;
    internal string keyPath;
    internal string keyStoreName;
    internal string algorithmName;
}
internal class Microsoft.Data.SqlClient.SqlEnvChange : object {
    internal byte _type;
    internal byte _oldLength;
    internal int _newLength;
    internal int _length;
    internal string _newValue;
    internal string _oldValue;
    internal Byte[] _newBinValue;
    internal Byte[] _oldBinValue;
    internal long _newLongValue;
    internal long _oldLongValue;
    internal SqlCollation _newCollation;
    internal SqlCollation _oldCollation;
    internal RoutingInfo _newRoutingInfo;
    internal bool _newBinRented;
    internal bool _oldBinRented;
    internal SqlEnvChange _next;
    internal void Clear();
}
public class Microsoft.Data.SqlClient.SqlError : object {
    private string _source;
    private int _number;
    private byte _state;
    private byte _errorClass;
    [OptionalFieldAttribute]
private string _server;
    private string _message;
    private string _procedure;
    private int _lineNumber;
    [OptionalFieldAttribute]
private int _win32ErrorCode;
    [OptionalFieldAttribute]
private Exception _exception;
    [OptionalFieldAttribute]
private int _batchIndex;
    public string Source { get; }
    public int Number { get; }
    public byte State { get; }
    public byte Class { get; }
    public string Server { get; }
    public string Message { get; }
    public string Procedure { get; }
    public int LineNumber { get; }
    internal int Win32ErrorCode { get; }
    internal Exception Exception { get; }
    internal int BatchIndex { get; }
    internal SqlError(int infoNumber, byte errorState, byte errorClass, string server, string errorMessage, string procedure, int lineNumber, UInt32 win32ErrorCode, Exception exception);
    internal SqlError(int infoNumber, byte errorState, byte errorClass, string server, string errorMessage, string procedure, int lineNumber, UInt32 win32ErrorCode, Exception exception, int batchIndex);
    internal SqlError(int infoNumber, byte errorState, byte errorClass, string server, string errorMessage, string procedure, int lineNumber, Exception exception);
    internal SqlError(int infoNumber, byte errorState, byte errorClass, string server, string errorMessage, string procedure, int lineNumber, Exception exception, int batchIndex);
    public virtual string ToString();
    public string get_Source();
    public int get_Number();
    public byte get_State();
    public byte get_Class();
    public string get_Server();
    public string get_Message();
    public string get_Procedure();
    public int get_LineNumber();
    internal int get_Win32ErrorCode();
    internal Exception get_Exception();
    internal int get_BatchIndex();
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class Microsoft.Data.SqlClient.SqlErrorCollection : object {
    private List`1<object> _errors;
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public SqlError Item { get; }
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(SqlError[] array, int index);
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public SqlError get_Item(int index);
    public sealed virtual IEnumerator GetEnumerator();
    internal void Add(SqlError error);
}
public class Microsoft.Data.SqlClient.SqlException : DbException {
    private static string OriginalClientConnectionIdKey;
    private static string RoutingDestinationKey;
    private static int SqlExceptionHResult;
    private SqlErrorCollection _errors;
    private Guid _clientConnectionId;
    private SqlBatchCommand _batchCommand;
    internal bool _doNotReconnect;
    public SqlErrorCollection Errors { get; }
    public Guid ClientConnectionId { get; }
    public byte Class { get; }
    public int LineNumber { get; }
    public int Number { get; }
    public string Procedure { get; }
    public string Server { get; }
    public byte State { get; }
    public string Source { get; }
    protected DbBatchCommand DbBatchCommand { get; }
    public SqlBatchCommand BatchCommand { get; internal set; }
    private SqlException(string message, SqlErrorCollection errorCollection, Exception innerException, Guid conId);
    private SqlException(SerializationInfo si, StreamingContext sc);
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    public SqlErrorCollection get_Errors();
    public Guid get_ClientConnectionId();
    public byte get_Class();
    public int get_LineNumber();
    public int get_Number();
    public string get_Procedure();
    public string get_Server();
    public byte get_State();
    public virtual string get_Source();
    protected virtual DbBatchCommand get_DbBatchCommand();
    public SqlBatchCommand get_BatchCommand();
    internal void set_BatchCommand(SqlBatchCommand value);
    public virtual string ToString();
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion);
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, SqlBatchCommand batchCommand);
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, SqlInternalConnectionTds internalConnection, Exception innerException);
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, SqlInternalConnectionTds internalConnection, Exception innerException, SqlBatchCommand batchCommand);
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, Guid conId, Exception innerException);
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, Guid conId, Exception innerException, SqlBatchCommand batchCommand);
    internal SqlException InternalClone();
}
internal class Microsoft.Data.SqlClient.SqlExponentialIntervalEnumerator : SqlRetryIntervalBaseEnumerator {
    private int internalCounter;
    private int maxRandom;
    private int minRandom;
    private Random random;
    public SqlExponentialIntervalEnumerator(TimeSpan deltaBackoffTime, TimeSpan maxTimeInterval, TimeSpan minTimeInterval);
    protected virtual TimeSpan GetNextInterval();
    public virtual void Reset();
    public virtual object Clone();
}
internal class Microsoft.Data.SqlClient.SQLFallbackDNSCache : object {
    private static SQLFallbackDNSCache _SQLFallbackDNSCache;
    private static int initialCapacity;
    private ConcurrentDictionary`2<string, SQLDNSInfo> DNSInfoCache;
    public static SQLFallbackDNSCache Instance { get; }
    private static SQLFallbackDNSCache();
    public static SQLFallbackDNSCache get_Instance();
    internal bool AddDNSInfo(SQLDNSInfo item);
    internal bool DeleteDNSInfo(string FQDN);
    internal bool GetDNSInfo(string FQDN, SQLDNSInfo& result);
    internal bool IsDuplicate(SQLDNSInfo newItem);
}
internal class Microsoft.Data.SqlClient.SqlFedAuthInfo : object {
    internal string spn;
    internal string stsurl;
    public virtual string ToString();
}
internal class Microsoft.Data.SqlClient.SqlFedAuthToken : object {
    internal UInt32 dataLen;
    internal Byte[] accessToken;
    internal long expirationFileTime;
}
internal class Microsoft.Data.SqlClient.SqlFixedIntervalEnumerator : SqlRetryIntervalBaseEnumerator {
    private int maxRandom;
    private int minRandom;
    private Random random;
    public SqlFixedIntervalEnumerator(TimeSpan gapTimeInterval, TimeSpan maxTimeInterval, TimeSpan minTimeInterval);
    protected virtual TimeSpan GetNextInterval();
    public virtual object Clone();
}
internal class Microsoft.Data.SqlClient.SqlIncrementalIntervalEnumerator : SqlRetryIntervalBaseEnumerator {
    private int maxRandom;
    private int minRandom;
    private Random random;
    public SqlIncrementalIntervalEnumerator(TimeSpan timeInterval, TimeSpan maxTimeInterval, TimeSpan minTimeInterval);
    protected virtual TimeSpan GetNextInterval();
    public virtual object Clone();
}
public class Microsoft.Data.SqlClient.SqlInfoMessageEventArgs : EventArgs {
    private SqlException _exception;
    public SqlErrorCollection Errors { get; }
    public string Message { get; }
    public string Source { get; }
    internal SqlInfoMessageEventArgs(SqlException exception);
    public SqlErrorCollection get_Errors();
    private bool ShouldSerializeErrors();
    public string get_Message();
    public string get_Source();
    public virtual string ToString();
}
public class Microsoft.Data.SqlClient.SqlInfoMessageEventHandler : MulticastDelegate {
    public SqlInfoMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlInfoMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlInfoMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal abstract class Microsoft.Data.SqlClient.SqlInternalConnection : DbConnectionInternal {
    private SqlConnectionString _connectionOptions;
    private bool _isEnlistedInTransaction;
    private Byte[] _promotedDTCToken;
    private Byte[] _whereAbouts;
    private bool _isGlobalTransaction;
    private bool _isGlobalTransactionEnabledForServer;
    private static Guid s_globalTransactionTMID;
    internal ExecuteReaderAsyncCallContext CachedCommandExecuteReaderAsyncContext;
    internal ExecuteNonQueryAsyncCallContext CachedCommandExecuteNonQueryAsyncContext;
    internal ExecuteXmlReaderAsyncCallContext CachedCommandExecuteXmlReaderAsyncContext;
    internal Snapshot CachedDataReaderSnapshot;
    internal IsDBNullAsyncCallContext CachedDataReaderIsDBNullContext;
    internal ReadAsyncCallContext CachedDataReaderReadAsyncContext;
    [CompilerGeneratedAttribute]
private string <CurrentDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentDataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlDelegatedTransaction <DelegatedTransaction>k__BackingField;
    internal string CurrentDatabase { get; internal set; }
    internal string CurrentDataSource { get; internal set; }
    internal SqlDelegatedTransaction DelegatedTransaction { get; internal set; }
    internal SqlConnection Connection { get; }
    internal SqlConnectionString ConnectionOptions { get; }
    internal SqlInternalTransaction CurrentTransaction { get; }
    internal SqlInternalTransaction AvailableInternalTransaction { get; }
    internal SqlInternalTransaction PendingTransaction { get; }
    protected internal bool IsNonPoolableTransactionRoot { get; }
    internal bool IsTransactionRoot { get; }
    internal bool HasLocalTransaction { get; }
    internal bool HasLocalTransactionFromAPI { get; }
    internal bool IsEnlistedInTransaction { get; }
    internal bool IsLockedForBulkCopy { get; }
    internal bool Is2008OrNewer { get; }
    internal Byte[] PromotedDTCToken { get; internal set; }
    internal bool IsGlobalTransaction { get; internal set; }
    internal bool IsGlobalTransactionsEnabledForServer { get; internal set; }
    internal SqlInternalConnection(SqlConnectionString connectionOptions);
    private static SqlInternalConnection();
    [CompilerGeneratedAttribute]
internal string get_CurrentDatabase();
    [CompilerGeneratedAttribute]
internal void set_CurrentDatabase(string value);
    [CompilerGeneratedAttribute]
internal string get_CurrentDataSource();
    [CompilerGeneratedAttribute]
internal void set_CurrentDataSource(string value);
    [CompilerGeneratedAttribute]
internal SqlDelegatedTransaction get_DelegatedTransaction();
    [CompilerGeneratedAttribute]
internal void set_DelegatedTransaction(SqlDelegatedTransaction value);
    internal SqlConnection get_Connection();
    internal SqlConnectionString get_ConnectionOptions();
    internal abstract virtual SqlInternalTransaction get_CurrentTransaction();
    internal virtual SqlInternalTransaction get_AvailableInternalTransaction();
    internal abstract virtual SqlInternalTransaction get_PendingTransaction();
    protected internal virtual bool get_IsNonPoolableTransactionRoot();
    internal virtual bool get_IsTransactionRoot();
    internal bool get_HasLocalTransaction();
    internal bool get_HasLocalTransactionFromAPI();
    internal bool get_IsEnlistedInTransaction();
    internal abstract virtual bool get_IsLockedForBulkCopy();
    internal abstract virtual bool get_Is2008OrNewer();
    internal Byte[] get_PromotedDTCToken();
    internal void set_PromotedDTCToken(Byte[] value);
    internal bool get_IsGlobalTransaction();
    internal void set_IsGlobalTransaction(bool value);
    internal bool get_IsGlobalTransactionsEnabledForServer();
    internal void set_IsGlobalTransactionsEnabledForServer(bool value);
    public virtual DbTransaction BeginTransaction(IsolationLevel iso);
    internal virtual SqlTransaction BeginSqlTransaction(IsolationLevel iso, string transactionName, bool shouldReconnect);
    public virtual void ChangeDatabase(string database);
    protected abstract virtual void ChangeDatabaseInternal(string database);
    protected virtual void CleanupTransactionOnCompletion(Transaction transaction);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected virtual void Deactivate();
    internal abstract virtual void DisconnectTransaction(SqlInternalTransaction internalTransaction);
    public virtual void Dispose();
    protected void Enlist(Transaction tx);
    private void EnlistNonNull(Transaction tx);
    internal void EnlistNull();
    public virtual void EnlistTransaction(Transaction transaction);
    internal abstract virtual void ExecuteTransaction(TransactionRequest transactionRequest, string name, IsolationLevel iso, SqlInternalTransaction internalTransaction, bool isDelegateControlRequest);
    internal SqlDataReader FindLiveReader(SqlCommand command);
    protected abstract virtual Byte[] GetDTCAddress();
    private static Byte[] GetTransactionCookie(Transaction transaction, Byte[] whereAbouts);
    protected virtual void InternalDeactivate();
    internal void OnError(SqlException exception, bool breakConnection, Action`1<Action> wrapCloseInAction);
    protected abstract virtual void PropagateTransactionCookie(Byte[] transactionCookie);
    internal abstract virtual void ValidateConnectionForExecute(SqlCommand command);
}
internal class Microsoft.Data.SqlClient.SqlInternalConnectionTds : SqlInternalConnection {
    internal static int MsalHttpRetryStatusCode;
    private SqlConnectionPoolGroupProviderInfo _poolGroupProviderInfo;
    private TdsParser _parser;
    private SqlLoginAck _loginAck;
    private SqlCredential _credential;
    private FederatedAuthenticationFeatureExtensionData _fedAuthFeatureExtensionData;
    private bool _sessionRecoveryRequested;
    internal bool _sessionRecoveryAcknowledged;
    internal SessionData _currentSessionData;
    private SessionData _recoverySessionData;
    internal bool _fedAuthRequired;
    internal bool _federatedAuthenticationRequested;
    internal bool _federatedAuthenticationAcknowledged;
    internal bool _federatedAuthenticationInfoRequested;
    internal bool _federatedAuthenticationInfoReceived;
    private SqlFedAuthToken _fedAuthToken;
    internal Byte[] _accessTokenInBytes;
    internal Func`3<SqlAuthenticationParameters, CancellationToken, Task`1<SqlAuthenticationToken>> _accessTokenCallback;
    private ActiveDirectoryAuthenticationTimeoutRetryHelper _activeDirectoryAuthTimeoutRetryHelper;
    private SqlAuthenticationProviderManager _sqlAuthenticationProviderManager;
    internal bool _cleanSQLDNSCaching;
    private bool _serverSupportsDNSCaching;
    private bool _SQLDNSRetryEnabled;
    private bool _DNSCachingBeforeRedirect;
    internal SQLDNSInfo pendingSQLDNSObject;
    internal byte _tceVersionSupported;
    private DbConnectionPool _dbConnectionPool;
    private DbConnectionPoolAuthenticationContext _newDbConnectionPoolAuthenticationContext;
    private DbConnectionPoolAuthenticationContextKey _dbConnectionPoolAuthenticationContextKey;
    private static TimeSpan _dbAuthenticationContextLockedRefreshTimeSpan;
    private static TimeSpan _dbAuthenticationContextUnLockedRefreshTimeSpan;
    private static HashSet`1<int> s_transientErrors;
    private bool _fConnectionOpen;
    private bool _fResetConnection;
    private string _originalDatabase;
    private string _currentFailoverPartner;
    private string _originalLanguage;
    private string _currentLanguage;
    private int _currentPacketSize;
    private int _asyncCommandCount;
    private string _instanceName;
    private DbConnectionPoolIdentity _identity;
    internal SyncAsyncLock _parserLock;
    private int _threadIdOwningParserLock;
    private SqlConnectionTimeoutErrorInternal _timeoutErrorInternal;
    internal Guid _clientConnectionId;
    private Guid _originalClientConnectionId;
    private string _routingDestination;
    private TimeoutTimer _timeout;
    [CompilerGeneratedAttribute]
private RoutingInfo <RoutingInfo>k__BackingField;
    private int accessTokenExpirationBufferTime { get; }
    internal bool IsSQLDNSCachingSupported { get; internal set; }
    internal bool IsSQLDNSRetryEnabled { get; internal set; }
    internal bool IsDNSCachingBeforeRedirectSupported { get; internal set; }
    internal SessionData CurrentSessionData { get; }
    internal SqlConnectionTimeoutErrorInternal TimeoutErrorInternal { get; }
    internal Guid ClientConnectionId { get; }
    internal Guid OriginalClientConnectionId { get; }
    internal string RoutingDestination { get; }
    internal RoutingInfo RoutingInfo { get; private set; }
    internal SqlInternalTransaction CurrentTransaction { get; }
    internal SqlInternalTransaction AvailableInternalTransaction { get; }
    internal SqlInternalTransaction PendingTransaction { get; }
    internal DbConnectionPoolIdentity Identity { get; }
    internal string InstanceName { get; }
    internal bool IsLockedForBulkCopy { get; }
    protected internal bool IsNonPoolableTransactionRoot { get; }
    internal bool Is2008OrNewer { get; }
    internal int PacketSize { get; }
    internal TdsParser Parser { get; }
    internal string ServerProvidedFailOverPartner { get; }
    internal SqlConnectionPoolGroupProviderInfo PoolGroupProviderInfo { get; }
    protected bool ReadyToPrepareTransaction { get; }
    public string ServerVersion { get; }
    public int ServerProcessId { get; }
    protected bool UnbindOnTransactionCompletion { get; }
    internal bool IsAccessTokenExpired { get; }
    internal bool IgnoreEnvChange { get; }
    internal bool ThreadHasParserLockForClose { get; internal set; }
    internal SqlInternalConnectionTds(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, object providerInfo, string newPassword, SecureString newSecurePassword, bool redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, bool applyTransientFaultHandling, string accessToken, DbConnectionPool pool, Func`3<SqlAuthenticationParameters, CancellationToken, Task`1<SqlAuthenticationToken>> accessTokenCallback);
    private static SqlInternalConnectionTds();
    private int get_accessTokenExpirationBufferTime();
    internal bool get_IsSQLDNSCachingSupported();
    internal void set_IsSQLDNSCachingSupported(bool value);
    internal bool get_IsSQLDNSRetryEnabled();
    internal void set_IsSQLDNSRetryEnabled(bool value);
    internal bool get_IsDNSCachingBeforeRedirectSupported();
    internal void set_IsDNSCachingBeforeRedirectSupported(bool value);
    internal SessionData get_CurrentSessionData();
    internal SqlConnectionTimeoutErrorInternal get_TimeoutErrorInternal();
    private bool IsTransientError(SqlException exc);
    internal Guid get_ClientConnectionId();
    internal Guid get_OriginalClientConnectionId();
    internal string get_RoutingDestination();
    [CompilerGeneratedAttribute]
internal RoutingInfo get_RoutingInfo();
    [CompilerGeneratedAttribute]
private void set_RoutingInfo(RoutingInfo value);
    internal virtual SqlInternalTransaction get_CurrentTransaction();
    internal virtual SqlInternalTransaction get_AvailableInternalTransaction();
    internal virtual SqlInternalTransaction get_PendingTransaction();
    internal DbConnectionPoolIdentity get_Identity();
    internal string get_InstanceName();
    internal virtual bool get_IsLockedForBulkCopy();
    protected internal virtual bool get_IsNonPoolableTransactionRoot();
    internal virtual bool get_Is2008OrNewer();
    internal int get_PacketSize();
    internal TdsParser get_Parser();
    internal string get_ServerProvidedFailOverPartner();
    internal SqlConnectionPoolGroupProviderInfo get_PoolGroupProviderInfo();
    protected virtual bool get_ReadyToPrepareTransaction();
    public virtual string get_ServerVersion();
    public int get_ServerProcessId();
    protected virtual bool get_UnbindOnTransactionCompletion();
    internal virtual bool get_IsAccessTokenExpired();
    protected virtual void ChangeDatabaseInternal(string database);
    public virtual void Dispose();
    internal virtual void ValidateConnectionForExecute(SqlCommand command);
    internal void CheckEnlistedTransactionBinding();
    internal virtual bool IsConnectionAlive(bool throwOnException);
    protected virtual void Activate(Transaction transaction);
    protected virtual void InternalDeactivate();
    private void ResetConnection();
    internal void DecrementAsyncCount();
    internal void IncrementAsyncCount();
    internal virtual void DisconnectTransaction(SqlInternalTransaction internalTransaction);
    internal void ExecuteTransaction(TransactionRequest transactionRequest, string name, IsolationLevel iso);
    internal virtual void ExecuteTransaction(TransactionRequest transactionRequest, string name, IsolationLevel iso, SqlInternalTransaction internalTransaction, bool isDelegateControlRequest);
    internal void ExecuteTransaction2005(TransactionRequest transactionRequest, string transactionName, IsolationLevel iso, SqlInternalTransaction internalTransaction, bool isDelegateControlRequest);
    internal virtual void DelegatedTransactionEnded();
    protected virtual Byte[] GetDTCAddress();
    protected virtual void PropagateTransactionCookie(Byte[] cookie);
    private void CompleteLogin(bool enlistOK);
    private void Login(ServerInfo server, TimeoutTimer timeout, string newPassword, SecureString newSecurePassword, SqlConnectionEncryptOption encrypt);
    private void LoginFailure();
    private void OpenLoginEnlist(TimeoutTimer timeout, SqlConnectionString connectionOptions, SqlCredential credential, string newPassword, SecureString newSecurePassword, bool redirectedUserInstance);
    private bool IsDoNotRetryConnectError(SqlException exc);
    private void LoginNoFailover(ServerInfo serverInfo, string newPassword, SecureString newSecurePassword, bool redirectedUserInstance, SqlConnectionString connectionOptions, SqlCredential credential, TimeoutTimer timeout);
    private bool AttemptRetryADAuthWithTimeoutError(SqlException sqlex, SqlConnectionString connectionOptions, TimeoutTimer timeout);
    private void LoginWithFailover(bool useFailoverHost, ServerInfo primaryServerInfo, string failoverHost, string newPassword, SecureString newSecurePassword, bool redirectedUserInstance, SqlConnectionString connectionOptions, SqlCredential credential, TimeoutTimer timeout);
    private void ResolveExtendedServerName(ServerInfo serverInfo, bool aliasLookup, SqlConnectionString options);
    private void AttemptOneLogin(ServerInfo serverInfo, string newPassword, SecureString newSecurePassword, TimeoutTimer timeout, bool withFailover);
    protected virtual bool ObtainAdditionalLocksForClose();
    protected virtual void ReleaseAdditionalLocksForClose(bool lockToken);
    internal bool GetSessionAndReconnectIfNeeded(SqlConnection parent, int timeout);
    internal void BreakConnection();
    internal bool get_IgnoreEnvChange();
    internal void OnEnvChange(SqlEnvChange rec);
    internal void OnLoginAck(SqlLoginAck rec);
    internal void OnFedAuthInfo(SqlFedAuthInfo fedAuthInfo);
    internal bool TryGetFedAuthTokenLocked(SqlFedAuthInfo fedAuthInfo, DbConnectionPoolAuthenticationContext dbConnectionPoolAuthenticationContext, SqlFedAuthToken& fedAuthToken);
    internal SqlFedAuthToken GetFedAuthToken(SqlFedAuthInfo fedAuthInfo);
    internal void OnFeatureExtAck(int featureId, Byte[] data);
    internal bool get_ThreadHasParserLockForClose();
    internal void set_ThreadHasParserLockForClose(bool value);
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    [CompilerGeneratedAttribute]
private DbConnectionPoolAuthenticationContext <OnFeatureExtAck>b__149_0(DbConnectionPoolAuthenticationContextKey key, DbConnectionPoolAuthenticationContext oldValue);
}
internal class Microsoft.Data.SqlClient.SqlInternalTransaction : object {
    internal static long NullTransactionId;
    private TransactionState _transactionState;
    private TransactionType _transactionType;
    private long _transactionId;
    private int _openResultCount;
    private SqlInternalConnection _innerConnection;
    private bool _disposing;
    private WeakReference`1<SqlTransaction> _parent;
    private static int s_objectTypeCount;
    internal int _objectID;
    [CompilerGeneratedAttribute]
private bool <RestoreBrokenConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConnectionHasBeenRestored>k__BackingField;
    internal bool RestoreBrokenConnection { get; internal set; }
    internal bool ConnectionHasBeenRestored { get; internal set; }
    internal bool HasParentTransaction { get; }
    internal bool IsAborted { get; }
    internal bool IsActive { get; }
    internal bool IsCommitted { get; }
    internal bool IsCompleted { get; }
    internal bool IsDelegated { get; }
    internal bool IsDistributed { get; }
    internal bool IsLocal { get; }
    internal bool IsOrphaned { get; }
    internal bool IsZombied { get; }
    internal int ObjectID { get; }
    internal int OpenResultsCount { get; }
    internal SqlTransaction Parent { get; }
    internal long TransactionId { get; internal set; }
    internal SqlInternalTransaction(SqlInternalConnection innerConnection, TransactionType type, SqlTransaction outerTransaction);
    internal SqlInternalTransaction(SqlInternalConnection innerConnection, TransactionType type, SqlTransaction outerTransaction, long transactionId);
    [CompilerGeneratedAttribute]
internal bool get_RestoreBrokenConnection();
    [CompilerGeneratedAttribute]
internal void set_RestoreBrokenConnection(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ConnectionHasBeenRestored();
    [CompilerGeneratedAttribute]
internal void set_ConnectionHasBeenRestored(bool value);
    internal bool get_HasParentTransaction();
    internal bool get_IsAborted();
    internal bool get_IsActive();
    internal bool get_IsCommitted();
    internal bool get_IsCompleted();
    internal bool get_IsDelegated();
    internal bool get_IsDistributed();
    internal bool get_IsLocal();
    internal bool get_IsOrphaned();
    internal bool get_IsZombied();
    internal int get_ObjectID();
    internal int get_OpenResultsCount();
    internal SqlTransaction get_Parent();
    internal long get_TransactionId();
    internal void set_TransactionId(long value);
    internal void Activate();
    private void CheckTransactionLevelAndZombie();
    internal void CloseFromConnection();
    internal void Commit();
    internal void Completed(TransactionState transactionState);
    internal int DecrementAndObtainOpenResultCount();
    internal void Dispose();
    private void Dispose(bool disposing);
    private int GetServerTransactionLevel();
    internal int IncrementAndObtainOpenResultCount();
    internal void InitParent(SqlTransaction transaction);
    internal void Rollback();
    internal void Rollback(string transactionName);
    internal void Save(string savePointName);
    internal void Zombie();
    private void ZombieParent();
    internal string TraceString();
}
internal class Microsoft.Data.SqlClient.SqlLogin : object {
    internal SqlAuthenticationMethod authentication;
    internal int timeout;
    internal bool userInstance;
    internal string hostName;
    internal string userName;
    internal string password;
    internal string applicationName;
    internal string serverName;
    internal string language;
    internal string database;
    internal string attachDBFilename;
    internal bool useReplication;
    internal string newPassword;
    internal bool useSSPI;
    internal int packetSize;
    internal bool readOnlyIntent;
    internal SqlCredential credential;
    internal SecureString newSecurePassword;
}
internal class Microsoft.Data.SqlClient.SqlLoginAck : object {
    internal byte majorVersion;
    internal byte minorVersion;
    internal short buildNum;
    internal UInt32 tdsVersion;
}
internal class Microsoft.Data.SqlClient.SQLMessage : object {
    internal static string CultureIdError();
    internal static string EncryptionNotSupportedByClient();
    internal static string EncryptionNotSupportedByServer();
    internal static string OperationCancelled();
    internal static string SevereError();
    internal static string SSPIInitializeError();
    internal static string SSPIGenerateError();
    internal static string KerberosTicketMissingError();
    internal static string Timeout();
    internal static string Timeout_PreLogin_Begin();
    internal static string Timeout_PreLogin_InitializeConnection();
    internal static string Timeout_PreLogin_SendHandshake();
    internal static string Timeout_PreLogin_ConsumeHandshake();
    internal static string Timeout_Login_Begin();
    internal static string Timeout_Login_ProcessConnectionAuth();
    internal static string Timeout_PostLogin();
    internal static string Timeout_FailoverInfo();
    internal static string Timeout_RoutingDestination();
    internal static string Duration_PreLogin_Begin(long PreLoginBeginDuration);
    internal static string Duration_PreLoginHandshake(long PreLoginBeginDuration, long PreLoginHandshakeDuration);
    internal static string Duration_Login_Begin(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration);
    internal static string Duration_Login_ProcessConnectionAuth(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration, long LoginAuthDuration);
    internal static string Duration_PostLogin(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration, long LoginAuthDuration, long PostLoginDuration);
    internal static string UserInstanceFailure();
    internal static string PreloginError();
    internal static string ExClientConnectionId();
    internal static string ExErrorNumberStateClass();
    internal static string ExOriginalClientConnectionId();
    internal static string ExRoutingDestination();
}
internal class Microsoft.Data.SqlClient.SqlMetaDataFactory : DbMetaDataFactory {
    private static string ServerVersionNormalized90;
    private static string ServerVersionNormalized10;
    public SqlMetaDataFactory(Stream XMLStream, string serverVersion, string serverVersionNormalized);
    private void addUDTsToDataTypesTable(DataTable dataTypesTable, SqlConnection connection, string ServerVersion);
    private void AddTVPsToDataTypesTable(DataTable dataTypesTable, SqlConnection connection, string ServerVersion);
    private DataTable GetDataTypesTable(SqlConnection connection);
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
}
internal class Microsoft.Data.SqlClient.SqlMetaDataPriv : object {
    internal bool isEncrypted;
    internal SqlMetaDataPriv baseTI;
    internal SqlCipherMetadata cipherMD;
    internal SqlDbType type;
    internal byte tdsType;
    internal byte precision;
    internal byte scale;
    private SqlMetaDataPrivFlags flags;
    internal int length;
    internal SqlCollation collation;
    internal int codePage;
    internal Encoding encoding;
    internal MetaType metaType;
    public SqlMetaDataUdt udt;
    public SqlMetaDataXmlSchemaCollection xmlSchemaCollection;
    internal byte NormalizationRuleVersion { get; }
    public bool IsNullable { get; public set; }
    public bool IsMultiValued { get; public set; }
    internal bool IsAlgorithmInitialized();
    internal byte get_NormalizationRuleVersion();
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public bool get_IsMultiValued();
    public void set_IsMultiValued(bool value);
    private bool HasFlag(SqlMetaDataPrivFlags flag);
    private void Set(SqlMetaDataPrivFlags flag, bool value);
    internal virtual void CopyFrom(SqlMetaDataPriv original);
}
internal class Microsoft.Data.SqlClient.SqlMetaDataUdt : object {
    [DynamicallyAccessedMembersAttribute("-1")]
internal Type Type;
    internal string DatabaseName;
    internal string SchemaName;
    internal string TypeName;
    internal string AssemblyQualifiedName;
    public void CopyFrom(SqlMetaDataUdt original);
}
internal class Microsoft.Data.SqlClient.SqlMetaDataXmlSchemaCollection : object {
    internal string Database;
    internal string OwningSchema;
    internal string Name;
    public void CopyFrom(SqlMetaDataXmlSchemaCollection original);
}
internal class Microsoft.Data.SqlClient.SqlNoneIntervalEnumerator : SqlRetryIntervalBaseEnumerator {
    protected virtual TimeSpan GetNextInterval();
    public virtual object Clone();
}
internal class Microsoft.Data.SqlClient.SqlNotification : MarshalByRefObject {
    private SqlNotificationInfo _info;
    private SqlNotificationSource _source;
    private SqlNotificationType _type;
    private string _key;
    internal SqlNotificationInfo Info { get; }
    internal string Key { get; }
    internal SqlNotificationSource Source { get; }
    internal SqlNotificationType Type { get; }
    internal SqlNotification(SqlNotificationInfo info, SqlNotificationSource source, SqlNotificationType type, string key);
    internal SqlNotificationInfo get_Info();
    internal string get_Key();
    internal SqlNotificationSource get_Source();
    internal SqlNotificationType get_Type();
}
public class Microsoft.Data.SqlClient.SqlNotificationEventArgs : EventArgs {
    private SqlNotificationType _type;
    private SqlNotificationInfo _info;
    private SqlNotificationSource _source;
    internal static SqlNotificationEventArgs s_notifyError;
    public SqlNotificationType Type { get; }
    public SqlNotificationInfo Info { get; }
    public SqlNotificationSource Source { get; }
    public SqlNotificationEventArgs(SqlNotificationType type, SqlNotificationInfo info, SqlNotificationSource source);
    private static SqlNotificationEventArgs();
    public SqlNotificationType get_Type();
    public SqlNotificationInfo get_Info();
    public SqlNotificationSource get_Source();
}
public enum Microsoft.Data.SqlClient.SqlNotificationInfo : Enum {
    public int value__;
    public static SqlNotificationInfo Truncate;
    public static SqlNotificationInfo Insert;
    public static SqlNotificationInfo Update;
    public static SqlNotificationInfo Delete;
    public static SqlNotificationInfo Drop;
    public static SqlNotificationInfo Alter;
    public static SqlNotificationInfo Restart;
    public static SqlNotificationInfo Error;
    public static SqlNotificationInfo Query;
    public static SqlNotificationInfo Invalid;
    public static SqlNotificationInfo Options;
    public static SqlNotificationInfo Isolation;
    public static SqlNotificationInfo Expired;
    public static SqlNotificationInfo Resource;
    public static SqlNotificationInfo PreviousFire;
    public static SqlNotificationInfo TemplateLimit;
    public static SqlNotificationInfo Merge;
    public static SqlNotificationInfo Unknown;
    public static SqlNotificationInfo AlreadyChanged;
}
public enum Microsoft.Data.SqlClient.SqlNotificationSource : Enum {
    public int value__;
    public static SqlNotificationSource Data;
    public static SqlNotificationSource Timeout;
    public static SqlNotificationSource Object;
    public static SqlNotificationSource Database;
    public static SqlNotificationSource System;
    public static SqlNotificationSource Statement;
    public static SqlNotificationSource Environment;
    public static SqlNotificationSource Execution;
    public static SqlNotificationSource Owner;
    public static SqlNotificationSource Unknown;
    public static SqlNotificationSource Client;
}
public enum Microsoft.Data.SqlClient.SqlNotificationType : Enum {
    public int value__;
    public static SqlNotificationType Change;
    public static SqlNotificationType Subscribe;
    public static SqlNotificationType Unknown;
}
internal class Microsoft.Data.SqlClient.SqlObjectPool`1 : object {
    private ObjectWrapper[] _items;
    private T _firstItem;
    public SqlObjectPool`1(int maximumRetained);
    public bool TryGet(T& item);
    public void Return(T item);
}
[TypeConverterAttribute("Microsoft.Data.SqlClient.SqlParameter/SqlParameterConverter")]
public class Microsoft.Data.SqlClient.SqlParameter : DbParameter {
    private MetaType _metaType;
    private SqlCollation _collation;
    private SqlMetaDataXmlSchemaCollection _xmlSchemaCollection;
    private string _udtTypeName;
    private string _typeName;
    private Exception _udtLoadError;
    private string _parameterName;
    private byte _precision;
    private byte _scale;
    private MetaType _internalMetaType;
    private SqlBuffer _sqlBufferReturnValue;
    private INullable _valueAsINullable;
    private int _actualSize;
    private object _value;
    private object _coercedValue;
    private object _parent;
    private ParameterDirection _direction;
    private int _size;
    private int _offset;
    private string _sourceColumn;
    private DataRowVersion _sourceVersion;
    private SqlParameterFlags _flags;
    [CompilerGeneratedAttribute]
private SqlCipherMetadata <CipherMetadata>k__BackingField;
    internal SqlCipherMetadata CipherMetadata { get; internal set; }
    internal bool HasReceivedMetadata { get; internal set; }
    internal byte NormalizationRuleVersion { get; }
    [BrowsableAttribute("False")]
public SqlCompareOptions CompareInfo { get; public set; }
    [ResCategoryAttribute("XML")]
public string XmlSchemaCollectionDatabase { get; public set; }
    [ResCategoryAttribute("XML")]
public string XmlSchemaCollectionOwningSchema { get; public set; }
    [ResCategoryAttribute("XML")]
public string XmlSchemaCollectionName { get; public set; }
    [DefaultValueAttribute("False")]
[ResCategoryAttribute("Data")]
public bool ForceColumnEncryption { get; public set; }
    public DbType DbType { get; public set; }
    [ResCategoryAttribute("Data")]
public string ParameterName { get; public set; }
    [BrowsableAttribute("False")]
public int LocaleId { get; public set; }
    [DefaultValueAttribute("0")]
[ResCategoryAttribute("Data")]
public byte Precision { get; public set; }
    [DefaultValueAttribute("0")]
[ResCategoryAttribute("Data")]
public byte Scale { get; public set; }
    internal byte ScaleInternal { get; internal set; }
    [RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("Data")]
[DbProviderSpecificTypePropertyAttribute("True")]
public SqlDbType SqlDbType { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object SqlValue { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public string UdtTypeName { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public string TypeName { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("Data")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Value { get; public set; }
    [RefreshPropertiesAttribute("1")]
[ResCategoryAttribute("Data")]
public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    public int Offset { get; public set; }
    [ResCategoryAttribute("Data")]
public int Size { get; public set; }
    [ResCategoryAttribute("Update")]
public string SourceColumn { get; public set; }
    [ResCategoryAttribute("DataCategory_Update")]
[ResDescriptionAttribute("When used by DataAdapter.Update, the parameter value is changed from DBNull.Value into (Int32)1 or (Int32)0 if non-null.")]
public bool SourceColumnNullMapping { get; public set; }
    [ResCategoryAttribute("Update")]
public DataRowVersion SourceVersion { get; public set; }
    private object CoercedValue { get; private set; }
    internal bool CoercedValueIsDataFeed { get; }
    internal bool CoercedValueIsSqlType { get; }
    internal SqlCollation Collation { get; internal set; }
    internal bool IsNull { get; }
    internal MetaType InternalMetaType { get; internal set; }
    internal byte PrecisionInternal { get; internal set; }
    internal bool ParameterIsSqlType { get; internal set; }
    internal bool SizeInferred { get; }
    internal INullable ValueAsINullable { get; }
    internal bool IsDerivedParameterTypeName { get; internal set; }
    public SqlParameter(string parameterName, SqlDbType dbType);
    public SqlParameter(string parameterName, object value);
    public SqlParameter(string parameterName, SqlDbType dbType, int size);
    public SqlParameter(string parameterName, SqlDbType dbType, int size, string sourceColumn);
    [EditorBrowsableAttribute("2")]
public SqlParameter(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public SqlParameter(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value, string xmlSchemaCollectionDatabase, string xmlSchemaCollectionOwningSchema, string xmlSchemaCollectionName);
    private SqlParameter(SqlParameter source);
    [CompilerGeneratedAttribute]
internal SqlCipherMetadata get_CipherMetadata();
    [CompilerGeneratedAttribute]
internal void set_CipherMetadata(SqlCipherMetadata value);
    internal bool get_HasReceivedMetadata();
    internal void set_HasReceivedMetadata(bool value);
    internal byte get_NormalizationRuleVersion();
    public SqlCompareOptions get_CompareInfo();
    public void set_CompareInfo(SqlCompareOptions value);
    public string get_XmlSchemaCollectionDatabase();
    public void set_XmlSchemaCollectionDatabase(string value);
    public string get_XmlSchemaCollectionOwningSchema();
    public void set_XmlSchemaCollectionOwningSchema(string value);
    public string get_XmlSchemaCollectionName();
    public void set_XmlSchemaCollectionName(string value);
    public bool get_ForceColumnEncryption();
    public void set_ForceColumnEncryption(bool value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual void ResetDbType();
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public int get_LocaleId();
    public void set_LocaleId(int value);
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    private bool ShouldSerializePrecision();
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    internal byte get_ScaleInternal();
    internal void set_ScaleInternal(byte value);
    private bool ShouldSerializeScale();
    public SqlDbType get_SqlDbType();
    public void set_SqlDbType(SqlDbType value);
    private bool ShouldSerializeSqlDbType();
    public void ResetSqlDbType();
    public object get_SqlValue();
    public void set_SqlValue(object value);
    public string get_UdtTypeName();
    public void set_UdtTypeName(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public int get_Offset();
    public void set_Offset(int value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    private void ResetSize();
    private bool ShouldSerializeSize();
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    [ResCategoryAttribute("Data")]
public virtual string ToString();
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    private sealed virtual override object System.ICloneable.Clone();
    private object get_CoercedValue();
    private void set_CoercedValue(object value);
    internal bool get_CoercedValueIsDataFeed();
    internal bool get_CoercedValueIsSqlType();
    internal SqlCollation get_Collation();
    internal void set_Collation(SqlCollation value);
    private bool HasFlag(SqlParameterFlags flag);
    internal bool get_IsNull();
    internal MetaType get_InternalMetaType();
    internal void set_InternalMetaType(MetaType value);
    internal byte get_PrecisionInternal();
    internal void set_PrecisionInternal(byte value);
    internal bool get_ParameterIsSqlType();
    internal void set_ParameterIsSqlType(bool value);
    internal string GetPrefixedParameterName();
    internal static void AppendPrefixedParameterName(StringBuilder builder, string rawParameterName);
    internal static bool ParameterNamesEqual(string lhs, string rhs, StringComparison comparison);
    internal bool get_SizeInferred();
    internal INullable get_ValueAsINullable();
    internal bool get_IsDerivedParameterTypeName();
    internal void set_IsDerivedParameterTypeName(bool value);
    private void CloneHelper(SqlParameter destination);
    internal void CopyTo(SqlParameter destination);
    internal object CompareExchangeParent(object value, object comparand);
    private SqlMetaDataXmlSchemaCollection EnsureXmlSchemaCollection();
    internal void FixStreamDataForNonPLP();
    private void GetActualFieldsAndProperties(List`1& fields, SmiMetaDataPropertyCollection& props, ParameterPeekAheadValue& peekAhead);
    internal byte GetActualScale();
    internal int GetActualSize();
    internal byte GetActualPrecision();
    internal object GetCoercedValue();
    internal int GetParameterSize();
    internal SmiParameterMetaData GetMetadataForTypeInfo();
    internal SmiParameterMetaData MetaDataForSmi(ParameterPeekAheadValue& peekAhead);
    [ConditionalAttribute("DEBUG")]
internal void AssertCachedPropertiesAreValid();
    [ConditionalAttribute("DEBUG")]
internal void AssertPropertiesAreValid(object value, Nullable`1<bool> isSqlType, Nullable`1<bool> isDataFeed, Nullable`1<bool> isNull);
    private SqlDbType GetMetaSqlDbTypeOnly();
    private MetaType GetMetaTypeOnly();
    internal void Prepare(SqlCommand cmd);
    private void PropertyChanging();
    private void PropertyTypeChanging();
    internal void ResetParent();
    private void SetFlag(SqlParameterFlags flag, bool value);
    internal void SetSqlBuffer(SqlBuffer buff);
    internal void SetUdtLoadError(Exception e);
    internal void Validate(int index, bool isCommandProc);
    internal MetaType ValidateTypeLengths();
    private byte ValuePrecision(object value);
    private byte ValueScale(object value);
    private int ValueSize(object value);
    private byte ValuePrecisionCore(object value);
    private byte ValueScaleCore(object value);
    private int ValueSizeCore(object value);
    internal static object CoerceValue(object value, MetaType destinationType, Boolean& coercedToDataFeed, Boolean& typeChanged, bool allowStreaming);
    private static int StringSize(object value, bool isSqlType);
    private static int BinarySize(object value, bool isSqlType);
    internal static String[] ParseTypeName(string typeName, bool isUdtTypeName);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class Microsoft.Data.SqlClient.SqlParameterCollection : DbParameterCollection {
    private List`1<SqlParameter> _items;
    private bool _isDirty;
    public SqlParameter Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqlParameter Item { get; public set; }
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private List`1<SqlParameter> InnerList { get; }
    internal bool IsDirty { get; internal set; }
    internal SqlParameterCollection(int capacity);
    public SqlParameter get_Item(int index);
    public void set_Item(int index, SqlParameter value);
    public SqlParameter get_Item(string parameterName);
    public void set_Item(string parameterName, SqlParameter value);
    public SqlParameter Add(SqlParameter value);
    public SqlParameter AddWithValue(string parameterName, object value);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size, string sourceColumn);
    public void AddRange(SqlParameter[] values);
    public virtual bool Contains(string value);
    public bool Contains(SqlParameter value);
    public void CopyTo(SqlParameter[] array, int index);
    public int IndexOf(SqlParameter value);
    public void Insert(int index, SqlParameter value);
    public void Remove(SqlParameter value);
    public virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public virtual void AddRange(Array values);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    private List`1<SqlParameter> get_InnerList();
    internal bool get_IsDirty();
    internal void set_IsDirty(bool value);
    private void RangeCheck(int index);
    private int CheckName(string parameterName);
    private void RemoveIndex(int index);
    private void Replace(int index, object newValue);
    private void Validate(int index, object value);
    private void ValidateType(object value);
}
internal class Microsoft.Data.SqlClient.SqlQueryMetadataCache : object {
    private static int CacheSize;
    private static int CacheTrimThreshold;
    private MemoryCache _cache;
    private static SqlQueryMetadataCache s_singletonInstance;
    private int _inTrim;
    private long _cacheHits;
    private long _cacheMisses;
    private static SqlQueryMetadataCache();
    internal static SqlQueryMetadataCache GetInstance();
    internal bool GetQueryMetadataIfExists(SqlCommand sqlCommand);
    internal void AddQueryMetadata(SqlCommand sqlCommand, bool ignoreQueriesWithReturnValueParams);
    internal void InvalidateCacheEntry(SqlCommand sqlCommand);
    private void IncrementCacheHits();
    private void IncrementCacheMisses();
    private ValueTuple`2<string, string> GetCacheLookupKeysFromSqlCommand(SqlCommand sqlCommand);
    private ConcurrentDictionary`2<int, SqlTceCipherInfoEntry> CreateCopyOfEnclaveKeys(ConcurrentDictionary`2<int, SqlTceCipherInfoEntry> keysToBeSentToEnclave);
}
internal class Microsoft.Data.SqlClient.SqlReferenceCollection : DbReferenceCollection {
    internal static int DataReaderTag;
    internal static int CommandTag;
    internal static int BulkCopyTag;
    private static Func`2<SqlDataReader, bool> s_hasOpenReaderFunc;
    private static FindLiveReaderContext s_cachedFindLiveReaderContext;
    private static SqlReferenceCollection();
    public virtual void Add(object value, int tag);
    internal void Deactivate();
    internal SqlDataReader FindLiveReader(SqlCommand command);
    protected virtual void NotifyItem(int message, int tag, object value);
    public virtual void Remove(object value);
    private static bool HasOpenReaderPredicate(SqlDataReader reader);
}
internal static class Microsoft.Data.SqlClient.SqlReliabilityUtil : object {
    internal static AggregateException ConfigurableRetryFail(IList`1<Exception> exceptions, SqlRetryLogicBase retryLogic, bool canceled);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string paramName, int value, int minValue, int MaxValue);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string paramName, TimeSpan value, TimeSpan minValue, TimeSpan MaxValue);
    internal static ArgumentNullException ArgumentNull(string paramName);
    internal static ArgumentOutOfRangeException InvalidMinAndMaxPair(string minParamName, TimeSpan minValue, string maxParamName, TimeSpan maxValue);
}
public class Microsoft.Data.SqlClient.SqlRetryingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <RetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Exception> <Exceptions>k__BackingField;
    public int RetryCount { get; private set; }
    public TimeSpan Delay { get; private set; }
    public bool Cancel { get; public set; }
    public IList`1<Exception> Exceptions { get; private set; }
    public SqlRetryingEventArgs(int retryCount, TimeSpan delay, IList`1<Exception> exceptions);
    [CompilerGeneratedAttribute]
public int get_RetryCount();
    [CompilerGeneratedAttribute]
private void set_RetryCount(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Delay();
    [CompilerGeneratedAttribute]
private void set_Delay(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
    [CompilerGeneratedAttribute]
public IList`1<Exception> get_Exceptions();
    [CompilerGeneratedAttribute]
private void set_Exceptions(IList`1<Exception> value);
}
public abstract class Microsoft.Data.SqlClient.SqlRetryIntervalBaseEnumerator : object {
    private TimeSpan _minValue;
    private TimeSpan _maxValue;
    [CompilerGeneratedAttribute]
private TimeSpan <GapTimeInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxTimeInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MinTimeInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Current>k__BackingField;
    public TimeSpan GapTimeInterval { get; protected set; }
    public TimeSpan MaxTimeInterval { get; protected set; }
    public TimeSpan MinTimeInterval { get; protected set; }
    public TimeSpan Current { get; protected set; }
    private object System.Collections.IEnumerator.Current { get; }
    public SqlRetryIntervalBaseEnumerator(TimeSpan timeInterval, TimeSpan maxTime, TimeSpan minTime);
    [CompilerGeneratedAttribute]
public TimeSpan get_GapTimeInterval();
    [CompilerGeneratedAttribute]
protected void set_GapTimeInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxTimeInterval();
    [CompilerGeneratedAttribute]
protected void set_MaxTimeInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MinTimeInterval();
    [CompilerGeneratedAttribute]
protected void set_MinTimeInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Current();
    [CompilerGeneratedAttribute]
protected void set_Current(TimeSpan value);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public virtual void Reset();
    protected virtual void Validate(TimeSpan timeInterval, TimeSpan maxTimeInterval, TimeSpan minTimeInterval);
    protected abstract virtual TimeSpan GetNextInterval();
    public virtual bool MoveNext();
    public virtual void Dispose();
    public virtual object Clone();
}
internal class Microsoft.Data.SqlClient.SqlRetryLogic : SqlRetryLogicBase {
    private static int counterDefaultValue;
    private static int maxAttempts;
    private static string TypeName;
    [CompilerGeneratedAttribute]
private Predicate`1<string> <PreCondition>k__BackingField;
    public Predicate`1<string> PreCondition { get; private set; }
    public SqlRetryLogic(int numberOfTries, SqlRetryIntervalBaseEnumerator enumerator, Predicate`1<Exception> transientPredicate, Predicate`1<string> preCondition);
    public SqlRetryLogic(int numberOfTries, SqlRetryIntervalBaseEnumerator enumerator, Predicate`1<Exception> transientPredicate);
    public SqlRetryLogic(SqlRetryIntervalBaseEnumerator enumerator, Predicate`1<Exception> transientPredicate);
    [CompilerGeneratedAttribute]
public Predicate`1<string> get_PreCondition();
    [CompilerGeneratedAttribute]
private void set_PreCondition(Predicate`1<string> value);
    public virtual void Reset();
    public virtual bool TryNextInterval(TimeSpan& intervalTime);
    public virtual bool RetryCondition(object sender);
    public virtual object Clone();
}
public abstract class Microsoft.Data.SqlClient.SqlRetryLogicBase : object {
    [CompilerGeneratedAttribute]
private int <NumberOfTries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlRetryIntervalBaseEnumerator <RetryIntervalEnumerator>k__BackingField;
    [CompilerGeneratedAttribute]
private Predicate`1<Exception> <TransientPredicate>k__BackingField;
    public int NumberOfTries { get; protected set; }
    public int Current { get; protected set; }
    public SqlRetryIntervalBaseEnumerator RetryIntervalEnumerator { get; protected set; }
    public Predicate`1<Exception> TransientPredicate { get; protected set; }
    [CompilerGeneratedAttribute]
public int get_NumberOfTries();
    [CompilerGeneratedAttribute]
protected void set_NumberOfTries(int value);
    [CompilerGeneratedAttribute]
public int get_Current();
    [CompilerGeneratedAttribute]
protected void set_Current(int value);
    [CompilerGeneratedAttribute]
public SqlRetryIntervalBaseEnumerator get_RetryIntervalEnumerator();
    [CompilerGeneratedAttribute]
protected void set_RetryIntervalEnumerator(SqlRetryIntervalBaseEnumerator value);
    [CompilerGeneratedAttribute]
public Predicate`1<Exception> get_TransientPredicate();
    [CompilerGeneratedAttribute]
protected void set_TransientPredicate(Predicate`1<Exception> value);
    public virtual bool RetryCondition(object sender);
    public abstract virtual bool TryNextInterval(TimeSpan& intervalTime);
    public abstract virtual void Reset();
    public virtual object Clone();
}
public abstract class Microsoft.Data.SqlClient.SqlRetryLogicBaseProvider : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<SqlRetryingEventArgs> <Retrying>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlRetryLogicBase <RetryLogic>k__BackingField;
    public EventHandler`1<SqlRetryingEventArgs> Retrying { get; public set; }
    public SqlRetryLogicBase RetryLogic { get; protected set; }
    [CompilerGeneratedAttribute]
public EventHandler`1<SqlRetryingEventArgs> get_Retrying();
    [CompilerGeneratedAttribute]
public void set_Retrying(EventHandler`1<SqlRetryingEventArgs> value);
    [CompilerGeneratedAttribute]
public SqlRetryLogicBase get_RetryLogic();
    [CompilerGeneratedAttribute]
protected void set_RetryLogic(SqlRetryLogicBase value);
    public abstract virtual TResult Execute(object sender, Func`1<TResult> function);
    public abstract virtual Task`1<TResult> ExecuteAsync(object sender, Func`1<Task`1<TResult>> function, CancellationToken cancellationToken);
    public abstract virtual Task ExecuteAsync(object sender, Func`1<Task> function, CancellationToken cancellationToken);
}
public class Microsoft.Data.SqlClient.SqlRetryLogicOption : object {
    [CompilerGeneratedAttribute]
private int <NumberOfTries>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DeltaTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MinTimeInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxTimeInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<int> <TransientErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private Predicate`1<string> <AuthorizedSqlCondition>k__BackingField;
    public int NumberOfTries { get; public set; }
    public TimeSpan DeltaTime { get; public set; }
    public TimeSpan MinTimeInterval { get; public set; }
    public TimeSpan MaxTimeInterval { get; public set; }
    public IEnumerable`1<int> TransientErrors { get; public set; }
    public Predicate`1<string> AuthorizedSqlCondition { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NumberOfTries();
    [CompilerGeneratedAttribute]
public void set_NumberOfTries(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DeltaTime();
    [CompilerGeneratedAttribute]
public void set_DeltaTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MinTimeInterval();
    [CompilerGeneratedAttribute]
public void set_MinTimeInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxTimeInterval();
    [CompilerGeneratedAttribute]
public void set_MaxTimeInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<int> get_TransientErrors();
    [CompilerGeneratedAttribute]
public void set_TransientErrors(IEnumerable`1<int> value);
    [CompilerGeneratedAttribute]
public Predicate`1<string> get_AuthorizedSqlCondition();
    [CompilerGeneratedAttribute]
public void set_AuthorizedSqlCondition(Predicate`1<string> value);
}
internal class Microsoft.Data.SqlClient.SqlRetryLogicProvider : SqlRetryLogicBaseProvider {
    private static string TypeName;
    private ConcurrentBag`1<SqlRetryLogicBase> _retryLogicPool;
    public SqlRetryLogicProvider(SqlRetryLogicBase retryLogic);
    private SqlRetryLogicBase GetRetryLogic();
    private void RetryLogicPoolAdd(SqlRetryLogicBase retryLogic);
    public virtual TResult Execute(object sender, Func`1<TResult> function);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.SqlRetryLogicProvider/<ExecuteAsync>d__6`1")]
public virtual Task`1<TResult> ExecuteAsync(object sender, Func`1<Task`1<TResult>> function, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.SqlRetryLogicProvider/<ExecuteAsync>d__7")]
public virtual Task ExecuteAsync(object sender, Func`1<Task> function, CancellationToken cancellationToken);
    private Exception CreateException(IList`1<Exception> exceptions, SqlRetryLogicBase retryLogic, bool manualCancellation);
    private void ApplyRetryingEvent(object sender, SqlRetryLogicBase retryLogic, TimeSpan intervalTime, List`1<Exception> exceptions, Exception lastException);
}
internal class Microsoft.Data.SqlClient.SqlReturnValue : SqlMetaDataPriv {
    internal string parameter;
    internal SqlBuffer value;
}
public class Microsoft.Data.SqlClient.SqlRowsCopiedEventArgs : EventArgs {
    private bool _abort;
    private long _rowsCopied;
    public bool Abort { get; public set; }
    public long RowsCopied { get; }
    public SqlRowsCopiedEventArgs(long rowsCopied);
    public bool get_Abort();
    public void set_Abort(bool value);
    public long get_RowsCopied();
}
public class Microsoft.Data.SqlClient.SqlRowsCopiedEventHandler : MulticastDelegate {
    public SqlRowsCopiedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowsCopiedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowsCopiedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Data.SqlClient.SqlRowUpdatedEventArgs : RowUpdatedEventArgs {
    public SqlCommand Command { get; }
    public SqlRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public SqlCommand get_Command();
}
public class Microsoft.Data.SqlClient.SqlRowUpdatedEventHandler : MulticastDelegate {
    public SqlRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Data.SqlClient.SqlRowUpdatingEventArgs : RowUpdatingEventArgs {
    public SqlCommand Command { get; public set; }
    protected IDbCommand BaseCommand { get; protected set; }
    public SqlRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public SqlCommand get_Command();
    public void set_Command(SqlCommand value);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
}
public class Microsoft.Data.SqlClient.SqlRowUpdatingEventHandler : MulticastDelegate {
    public SqlRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Microsoft.Data.SqlClient.SqlSecurityUtility : object {
    private static ColumnMasterKeyMetadataSignatureVerificationCache ColumnMasterKeyMetadataSignatureVerificationCache;
    private static SqlSecurityUtility();
    internal static void GetHMACWithSHA256(Byte[] plainText, Byte[] key, Byte[] hash);
    internal static string GetSHA256Hash(Byte[] input);
    internal static void GenerateRandomBytes(Byte[] randomBytes);
    internal static bool CompareBytes(Byte[] buffer1, Byte[] buffer2, int buffer2Index, int lengthToCompare);
    internal static string GetHexString(Byte[] input);
    internal static string GetCurrentFunctionName();
    private static string ValidateAndGetEncryptionAlgorithmName(byte cipherAlgorithmId, string cipherAlgorithmName);
    private static string GetRegisteredCipherAlgorithmIds();
    internal static Byte[] EncryptWithKey(Byte[] plainText, SqlCipherMetadata md, SqlConnection connection, SqlCommand command);
    internal static string GetBytesAsString(Byte[] buff, bool fLast, int countOfBytes);
    internal static Byte[] DecryptWithKey(Byte[] cipherText, SqlCipherMetadata md, SqlConnection connection, SqlCommand command);
    internal static void DecryptSymmetricKey(SqlCipherMetadata md, SqlConnection connection, SqlCommand command);
    internal static void DecryptSymmetricKey(SqlTceCipherInfoEntry sqlTceCipherInfoEntry, SqlClientSymmetricKey& sqlClientSymmetricKey, SqlEncryptionKeyInfo& encryptionkeyInfoChosen, SqlConnection connection, SqlCommand command);
    private static SqlClientSymmetricKey GetKeyFromLocalProviders(SqlEncryptionKeyInfo keyInfo, SqlConnection connection, SqlCommand command);
    internal static int GetBase64LengthFromByteLength(int byteLength);
    internal static void VerifyColumnMasterKeySignature(string keyStoreName, string keyPath, bool isEnclaveEnabled, Byte[] CMKSignature, SqlConnection connection, SqlCommand command);
    private static bool ShouldUseInstanceLevelProviderFlow(string keyStoreName, SqlConnection connection, SqlCommand command);
    private static bool InstanceLevelProvidersAreRegistered(SqlConnection connection, SqlCommand command);
    internal static void ThrowIfKeyPathIsNotTrustedForServer(string serverName, string keyPath);
    internal static bool TryGetColumnEncryptionKeyStoreProvider(string keyStoreName, SqlColumnEncryptionKeyStoreProvider& provider, SqlConnection connection, SqlCommand command);
    internal static List`1<string> GetListOfProviderNamesThatWereSearched(SqlConnection connection, SqlCommand command);
}
internal class Microsoft.Data.SqlClient.SqlSequentialStream : Stream {
    private SqlDataReader _reader;
    private int _columnIndex;
    private Task _currentTask;
    private int _readTimeout;
    private CancellationTokenSource _disposalTokenSource;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    internal int ColumnIndex { get; }
    internal SqlSequentialStream(SqlDataReader reader, int columnIndex);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    internal int get_ColumnIndex();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    internal void SetClosed();
    protected virtual void Dispose(bool disposing);
    internal static void ValidateReadParameters(Byte[] buffer, int offset, int count);
    public virtual IAsyncResult BeginRead(Byte[] array, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    public virtual int EndRead(IAsyncResult asyncResult);
}
internal class Microsoft.Data.SqlClient.SqlSequentialTextReader : TextReader {
    private SqlDataReader _reader;
    private int _columnIndex;
    private Encoding _encoding;
    private Decoder _decoder;
    private Byte[] _leftOverBytes;
    private int _peekedChar;
    private Task _currentTask;
    private CancellationTokenSource _disposalTokenSource;
    internal int ColumnIndex { get; }
    private bool IsClosed { get; }
    private bool HasPeekedChar { get; }
    internal SqlSequentialTextReader(SqlDataReader reader, int columnIndex, Encoding encoding);
    internal int get_ColumnIndex();
    public virtual int Peek();
    public virtual int Read();
    public virtual int Read(Char[] buffer, int index, int count);
    public virtual Task`1<int> ReadAsync(Char[] buffer, int index, int count);
    protected virtual void Dispose(bool disposing);
    internal void SetClosed();
    private int InternalRead(Char[] buffer, int index, int count);
    private Byte[] PrepareByteBuffer(int numberOfChars, Int32& byteBufferUsed);
    private int DecodeBytesToChars(Byte[] inBuffer, int inBufferCount, Char[] outBuffer, int outBufferOffset, int outBufferCount);
    private bool get_IsClosed();
    private bool get_HasPeekedChar();
    internal static void ValidateReadParameters(Char[] buffer, int index, int count);
}
internal static class Microsoft.Data.SqlClient.SqlServerEscapeHelper : object {
    internal static string EscapeIdentifier(string name);
    internal static void EscapeIdentifier(StringBuilder builder, string name);
    internal static string EscapeStringAsLiteral(string input);
    internal static string MakeStringLiteral(string input);
}
internal class Microsoft.Data.SqlClient.SqlStatistics : object {
    internal long _closeTimestamp;
    internal long _openTimestamp;
    internal long _startExecutionTimestamp;
    internal long _startFetchTimestamp;
    internal long _startNetworkServerTimestamp;
    internal long _buffersReceived;
    internal long _buffersSent;
    internal long _bytesReceived;
    internal long _bytesSent;
    internal long _connectionTime;
    internal long _cursorOpens;
    internal long _executionTime;
    internal long _iduCount;
    internal long _iduRows;
    internal long _networkServerTime;
    internal long _preparedExecs;
    internal long _prepares;
    internal long _selectCount;
    internal long _selectRows;
    internal long _serverRoundtrips;
    internal long _sumResultSets;
    internal long _transactions;
    internal long _unpreparedExecs;
    private bool _waitForDoneAfterRow;
    private bool _waitForReply;
    internal bool WaitForDoneAfterRow { get; internal set; }
    internal bool WaitForReply { get; }
    internal static SqlStatistics StartTimer(SqlStatistics statistics);
    internal static void StopTimer(SqlStatistics statistics);
    internal static ValueSqlStatisticsScope TimedScope(SqlStatistics statistics);
    internal bool get_WaitForDoneAfterRow();
    internal void set_WaitForDoneAfterRow(bool value);
    internal bool get_WaitForReply();
    internal void ContinueOnNewConnection();
    internal IDictionary GetDictionary();
    internal bool RequestExecutionTimer();
    internal void RequestNetworkServerTimer();
    internal void ReleaseAndUpdateExecutionTimer();
    internal void ReleaseAndUpdateNetworkServerTimer();
    internal void Reset();
    internal void SafeAdd(Int64& value, long summand);
    internal long SafeIncrement(Int64& value);
    internal void UpdateStatistics();
}
internal class Microsoft.Data.SqlClient.SqlStream : Stream {
    private SqlDataReader _reader;
    private int _columnOrdinal;
    private long _bytesCol;
    private int _bom;
    private Byte[] _bufferedData;
    private bool _processAllRows;
    private bool _advanceReader;
    private bool _readFirstRow;
    private bool _endOfColumn;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SqlStream(SqlDataReader reader, bool addByteOrderMark, bool processAllRows);
    internal SqlStream(int columnOrdinal, SqlDataReader reader, bool addByteOrderMark, bool processAllRows, bool advanceReader);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    private static bool AdvanceToNextRow(SqlDataReader reader);
    private int ReadBytes(Byte[] buffer, int offset, int count);
    internal XmlReader ToXmlReader(bool async);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class Microsoft.Data.SqlClient.SqlStreamingXml : object {
    private int _columnOrdinal;
    private SqlDataReader _reader;
    private XmlReader _xmlReader;
    private XmlWriter _xmlWriter;
    private StringWriter _strWriter;
    private long _charsRemoved;
    public int ColumnOrdinal { get; }
    public SqlStreamingXml(int i, SqlDataReader reader);
    public void Close();
    public int get_ColumnOrdinal();
    public long GetChars(long dataIndex, Char[] buffer, int bufferIndex, int length);
    private void WriteXmlElement();
}
internal class Microsoft.Data.SqlClient.SqlSymmetricKeyCache : object {
    private MemoryCache _cache;
    private static SqlSymmetricKeyCache _singletonInstance;
    private static SqlSymmetricKeyCache();
    internal static SqlSymmetricKeyCache GetInstance();
    internal SqlClientSymmetricKey GetKey(SqlEncryptionKeyInfo keyInfo, SqlConnection connection, SqlCommand command);
}
internal class Microsoft.Data.SqlClient.SqlTceCipherInfoEntry : object {
    private List`1<SqlEncryptionKeyInfo> _columnEncryptionKeyValues;
    private int _ordinal;
    private int _databaseId;
    private int _cekId;
    private int _cekVersion;
    private Byte[] _cekMdVersion;
    internal int Ordinal { get; }
    internal int DatabaseId { get; }
    internal int CekId { get; }
    internal int CekVersion { get; }
    internal Byte[] CekMdVersion { get; }
    internal List`1<SqlEncryptionKeyInfo> ColumnEncryptionKeyValues { get; }
    internal SqlTceCipherInfoEntry(int ordinal);
    internal int get_Ordinal();
    internal int get_DatabaseId();
    internal int get_CekId();
    internal int get_CekVersion();
    internal Byte[] get_CekMdVersion();
    internal List`1<SqlEncryptionKeyInfo> get_ColumnEncryptionKeyValues();
    internal void Add(Byte[] encryptedKey, int databaseId, int cekId, int cekVersion, Byte[] cekMdVersion, string keyPath, string keyStoreName, string algorithmName);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Data.SqlClient.SqlTceCipherInfoTable : object {
    private SqlTceCipherInfoEntry[] keyList;
    internal SqlTceCipherInfoEntry Item { get; internal set; }
    internal int Size { get; }
    internal SqlTceCipherInfoTable(int tabSize);
    internal SqlTceCipherInfoEntry get_Item(int index);
    internal void set_Item(int index, SqlTceCipherInfoEntry value);
    internal int get_Size();
}
public class Microsoft.Data.SqlClient.SqlTransaction : DbTransaction {
    private static int s_objectTypeCount;
    internal int _objectID;
    internal IsolationLevel _isolationLevel;
    private SqlInternalTransaction _internalTransaction;
    private SqlConnection _connection;
    private bool _isFromAPI;
    private static SqlDiagnosticListener s_diagnosticListener;
    public SqlConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    internal SqlInternalTransaction InternalTransaction { get; }
    public IsolationLevel IsolationLevel { get; }
    private bool Is2005PartialZombie { get; }
    internal bool IsZombied { get; }
    internal int ObjectID { get; }
    internal SqlStatistics Statistics { get; }
    internal SqlTransaction(SqlInternalConnection internalConnection, SqlConnection con, IsolationLevel iso, SqlInternalTransaction internalTransaction);
    private static SqlTransaction();
    public SqlConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    internal SqlInternalTransaction get_InternalTransaction();
    public virtual IsolationLevel get_IsolationLevel();
    private bool get_Is2005PartialZombie();
    internal bool get_IsZombied();
    internal int get_ObjectID();
    internal SqlStatistics get_Statistics();
    internal void Zombie();
    private void ZombieCheck();
    public virtual void Commit();
    protected virtual void Dispose(bool disposing);
    public virtual void Rollback();
    public virtual void Rollback(string transactionName);
    public virtual void Save(string savePointName);
}
internal class Microsoft.Data.SqlClient.SqlUdtInfo : object {
    internal Format SerializationFormat;
    internal bool IsByteOrdered;
    internal bool IsFixedLength;
    internal int MaxByteSize;
    internal string Name;
    internal string ValidationMethodName;
    [ThreadStaticAttribute]
private static Dictionary`2<Type, SqlUdtInfo> s_types2UdtInfo;
    private SqlUdtInfo(SqlUserDefinedTypeAttribute attr);
    internal static SqlUdtInfo GetFromType(Type target);
    internal static SqlUdtInfo TryGetFromType(Type target);
}
internal class Microsoft.Data.SqlClient.SqlUnicodeEncoding : UnicodeEncoding {
    private static SqlUnicodeEncoding s_singletonEncoding;
    public static Encoding SqlUnicodeEncodingInstance { get; }
    private static SqlUnicodeEncoding();
    public virtual Decoder GetDecoder();
    public virtual int GetMaxByteCount(int charCount);
    public static Encoding get_SqlUnicodeEncodingInstance();
}
[ExtensionAttribute]
internal static class Microsoft.Data.SqlClient.SslProtocolsHelper : object {
    [ExtensionAttribute]
private static string ToFriendlyName(SslProtocols protocol);
    [ExtensionAttribute]
public static string GetProtocolWarning(SslProtocols protocol);
}
internal class Microsoft.Data.SqlClient.StreamDataFeed : DataFeed {
    internal Stream _source;
    internal StreamDataFeed(Stream source);
}
internal static class Microsoft.Data.SqlClient.SysTxForGlobalTransactions : object {
    private static Lazy`1<MethodInfo> _enlistPromotableSinglePhase;
    private static Lazy`1<MethodInfo> _setDistributedTransactionIdentifier;
    private static Lazy`1<MethodInfo> _getPromotedToken;
    public static MethodInfo EnlistPromotableSinglePhase { get; }
    public static MethodInfo SetDistributedTransactionIdentifier { get; }
    public static MethodInfo GetPromotedToken { get; }
    private static SysTxForGlobalTransactions();
    public static MethodInfo get_EnlistPromotableSinglePhase();
    public static MethodInfo get_SetDistributedTransactionIdentifier();
    public static MethodInfo get_GetPromotedToken();
}
internal class Microsoft.Data.SqlClient.TdsDateTime : ValueType {
    public int days;
    public int time;
}
internal static class Microsoft.Data.SqlClient.TdsEnums : object {
    public static string SQL_PROVIDER_NAME;
    public static decimal SQL_SMALL_MONEY_MIN;
    public static decimal SQL_SMALL_MONEY_MAX;
    public static SqlDbType SmallVarBinary;
    public static string TCP;
    public static string NP;
    public static string RPC;
    public static string BV;
    public static string ADSP;
    public static string SPX;
    public static string VIA;
    public static string LPC;
    public static string ADMIN;
    public static string INIT_SSPI_PACKAGE;
    public static string INIT_SESSION;
    public static string CONNECTION_GET_SVR_USER;
    public static string GEN_CLIENT_CONTEXT;
    public static byte SOFTFLUSH;
    public static byte HARDFLUSH;
    public static byte IGNORE;
    public static int HEADER_LEN;
    public static int HEADER_LEN_FIELD_OFFSET;
    public static int SPID_OFFSET;
    public static int SQL2005_HEADER_LEN;
    public static int MARS_ID_OFFSET;
    public static int HEADERTYPE_QNOTIFICATION;
    public static int HEADERTYPE_MARS;
    public static int HEADERTYPE_TRACE;
    public static int SUCCEED;
    public static int FAIL;
    public static short TYPE_SIZE_LIMIT;
    public static int MIN_PACKET_SIZE;
    public static int DEFAULT_LOGIN_PACKET_SIZE;
    public static int MAX_PRELOGIN_PAYLOAD_LENGTH;
    public static int MAX_PACKET_SIZE;
    public static int MAX_SERVER_USER_NAME;
    public static byte MIN_ERROR_CLASS;
    public static byte MAX_USER_CORRECTABLE_ERROR_CLASS;
    public static byte FATAL_ERROR_CLASS;
    public static byte MT_SQL;
    public static byte MT_LOGIN;
    public static byte MT_RPC;
    public static byte MT_TOKENS;
    public static byte MT_BINARY;
    public static byte MT_ATTN;
    public static byte MT_BULK;
    public static byte MT_FEDAUTH;
    public static byte MT_CLOSE;
    public static byte MT_ERROR;
    public static byte MT_ACK;
    public static byte MT_ECHO;
    public static byte MT_LOGOUT;
    public static byte MT_TRANS;
    public static byte MT_OLEDB;
    public static byte MT_LOGIN7;
    public static byte MT_SSPI;
    public static byte MT_PRELOGIN;
    public static byte ST_EOM;
    public static byte ST_AACK;
    public static byte ST_IGNORE;
    public static byte ST_BATCH;
    public static byte ST_RESET_CONNECTION;
    public static byte ST_RESET_CONNECTION_PRESERVE_TRANSACTION;
    public static byte SQLCOLFMT;
    public static byte SQLPROCID;
    public static byte SQLCOLNAME;
    public static byte SQLTABNAME;
    public static byte SQLCOLINFO;
    public static byte SQLALTNAME;
    public static byte SQLALTFMT;
    public static byte SQLERROR;
    public static byte SQLINFO;
    public static byte SQLRETURNVALUE;
    public static byte SQLRETURNSTATUS;
    public static byte SQLRETURNTOK;
    public static byte SQLALTCONTROL;
    public static byte SQLROW;
    public static byte SQLNBCROW;
    public static byte SQLALTROW;
    public static byte SQLDONE;
    public static byte SQLDONEPROC;
    public static byte SQLDONEINPROC;
    public static byte SQLOFFSET;
    public static byte SQLORDER;
    public static byte SQLDEBUG_CMD;
    public static byte SQLLOGINACK;
    public static byte SQLFEATUREEXTACK;
    public static byte SQLSESSIONSTATE;
    public static byte SQLENVCHANGE;
    public static byte SQLSECLEVEL;
    public static byte SQLROWCRC;
    public static byte SQLCOLMETADATA;
    public static byte SQLALTMETADATA;
    public static byte SQLSSPI;
    public static byte SQLFEDAUTHINFO;
    public static byte SQLRESCOLSRCS;
    public static byte SQLDATACLASSIFICATION;
    public static byte ENV_DATABASE;
    public static byte ENV_LANG;
    public static byte ENV_CHARSET;
    public static byte ENV_PACKETSIZE;
    public static byte ENV_LOCALEID;
    public static byte ENV_COMPFLAGS;
    public static byte ENV_COLLATION;
    public static byte ENV_BEGINTRAN;
    public static byte ENV_COMMITTRAN;
    public static byte ENV_ROLLBACKTRAN;
    public static byte ENV_ENLISTDTC;
    public static byte ENV_DEFECTDTC;
    public static byte ENV_LOGSHIPNODE;
    public static byte ENV_PROMOTETRANSACTION;
    public static byte ENV_TRANSACTIONMANAGERADDRESS;
    public static byte ENV_TRANSACTIONENDED;
    public static byte ENV_SPRESETCONNECTIONACK;
    public static byte ENV_USERINSTANCE;
    public static byte ENV_ROUTING;
    public static int DONE_MORE;
    public static int DONE_ERROR;
    public static int DONE_INXACT;
    public static int DONE_PROC;
    public static int DONE_COUNT;
    public static int DONE_ATTN;
    public static int DONE_INPROC;
    public static int DONE_RPCINBATCH;
    public static int DONE_SRVERROR;
    public static int DONE_FMTSENT;
    public static byte FEATUREEXT_TERMINATOR;
    public static byte FEATUREEXT_SRECOVERY;
    public static byte FEATUREEXT_FEDAUTH;
    public static byte FEATUREEXT_TCE;
    public static byte FEATUREEXT_GLOBALTRANSACTIONS;
    public static byte FEATUREEXT_AZURESQLSUPPORT;
    public static byte FEATUREEXT_DATACLASSIFICATION;
    public static byte FEATUREEXT_UTF8SUPPORT;
    public static byte FEATUREEXT_SQLDNSCACHING;
    public static UInt32 UTF8_IN_TDSCOLLATION;
    public static byte FEDAUTHLIB_LIVEID;
    public static byte FEDAUTHLIB_SECURITYTOKEN;
    public static byte FEDAUTHLIB_MSAL;
    public static byte FEDAUTHLIB_RESERVED;
    public static byte MSALWORKFLOW_ACTIVEDIRECTORYPASSWORD;
    public static byte MSALWORKFLOW_ACTIVEDIRECTORYINTEGRATED;
    public static byte MSALWORKFLOW_ACTIVEDIRECTORYINTERACTIVE;
    public static byte MSALWORKFLOW_ACTIVEDIRECTORYSERVICEPRINCIPAL;
    public static byte MSALWORKFLOW_ACTIVEDIRECTORYDEVICECODEFLOW;
    public static byte MSALWORKFLOW_ACTIVEDIRECTORYMANAGEDIDENTITY;
    public static byte MSALWORKFLOW_ACTIVEDIRECTORYDEFAULT;
    public static byte MSALWORKFLOW_ACTIVEDIRECTORYTOKENCREDENTIAL;
    public static byte MSALWORKFLOW_ACTIVEDIRECTORYWORKLOADIDENTITY;
    public static string NTAUTHORITYANONYMOUSLOGON;
    public static byte MAX_LOG_NAME;
    public static byte MAX_PROG_NAME;
    public static byte SEC_COMP_LEN;
    public static byte MAX_PK_LEN;
    public static byte MAX_NIC_SIZE;
    public static byte SQLVARIANT_SIZE;
    public static byte VERSION_SIZE;
    public static int CLIENT_PROG_VER;
    public static int SQL2005_LOG_REC_FIXED_LEN;
    public static int TEXT_TIME_STAMP_LEN;
    public static int COLLATION_INFO_LEN;
    public static int SQL70OR2000_MAJOR;
    public static int SQL70_INCREMENT;
    public static int SQL2000_INCREMENT;
    public static int DEFAULT_MINOR;
    public static int SQL2000SP1_MAJOR;
    public static int SQL2005_MAJOR;
    public static int SQL2008_MAJOR;
    public static int SQL2012_MAJOR;
    public static int TDS8_MAJOR;
    public static string TDS8_Protocol;
    public static int SQL2000SP1_INCREMENT;
    public static int SQL2005_INCREMENT;
    public static int SQL2008_INCREMENT;
    public static int SQL2012_INCREMENT;
    public static int TDS8_INCREMENT;
    public static int SQL2000SP1_MINOR;
    public static int SQL2005_RTM_MINOR;
    public static int SQL2008_MINOR;
    public static int SQL2012_MINOR;
    public static int TDS8_MINOR;
    public static int ORDER_68000;
    public static int USE_DB_ON;
    public static int INIT_DB_FATAL;
    public static int SET_LANG_ON;
    public static int INIT_LANG_FATAL;
    public static int ODBC_ON;
    public static int SSPI_ON;
    public static int REPL_ON;
    public static int READONLY_INTENT_ON;
    public static byte SQLLenMask;
    public static byte SQLFixedLen;
    public static byte SQLVarLen;
    public static byte SQLZeroLen;
    public static byte SQLVarCnt;
    public static byte SQLDifferentName;
    public static byte SQLExpression;
    public static byte SQLKey;
    public static byte SQLHidden;
    public static byte Nullable;
    public static byte Identity;
    public static byte Updatability;
    public static byte ClrFixedLen;
    public static byte IsColumnSet;
    public static byte IsEncrypted;
    public static UInt32 VARLONGNULL;
    public static int VARNULL;
    public static int MAXSIZE;
    public static byte FIXEDNULL;
    public static ulong UDTNULL;
    public static int SQLVOID;
    public static int SQLTEXT;
    public static int SQLVARBINARY;
    public static int SQLINTN;
    public static int SQLVARCHAR;
    public static int SQLBINARY;
    public static int SQLIMAGE;
    public static int SQLCHAR;
    public static int SQLINT1;
    public static int SQLBIT;
    public static int SQLINT2;
    public static int SQLINT4;
    public static int SQLMONEY;
    public static int SQLDATETIME;
    public static int SQLFLT8;
    public static int SQLFLTN;
    public static int SQLMONEYN;
    public static int SQLDATETIMN;
    public static int SQLFLT4;
    public static int SQLMONEY4;
    public static int SQLDATETIM4;
    public static int SQLDECIMALN;
    public static int SQLNUMERICN;
    public static int SQLUNIQUEID;
    public static int SQLBIGCHAR;
    public static int SQLBIGVARCHAR;
    public static int SQLBIGBINARY;
    public static int SQLBIGVARBINARY;
    public static int SQLBITN;
    public static int SQLNCHAR;
    public static int SQLNVARCHAR;
    public static int SQLNTEXT;
    public static int SQLUDT;
    public static int AOPCNTB;
    public static int AOPSTDEV;
    public static int AOPSTDEVP;
    public static int AOPVAR;
    public static int AOPVARP;
    public static int AOPCNT;
    public static int AOPSUM;
    public static int AOPAVG;
    public static int AOPMIN;
    public static int AOPMAX;
    public static int AOPANY;
    public static int AOPNOOP;
    public static int SQLTIMESTAMP;
    public static int MAX_NUMERIC_LEN;
    public static int DEFAULT_NUMERIC_PRECISION;
    public static int SQL70_DEFAULT_NUMERIC_PRECISION;
    public static int MAX_NUMERIC_PRECISION;
    public static byte UNKNOWN_PRECISION_SCALE;
    public static int SQLINT8;
    public static int SQLVARIANT;
    public static int SQLXMLTYPE;
    public static int XMLUNICODEBOM;
    public static Byte[] XMLUNICODEBOMBYTES;
    public static int SQLTABLE;
    public static int SQLDATE;
    public static int SQLTIME;
    public static int SQLDATETIME2;
    public static int SQLDATETIMEOFFSET;
    public static int DEFAULT_VARTIME_SCALE;
    public static ulong SQL_PLP_NULL;
    public static ulong SQL_PLP_UNKNOWNLEN;
    public static int SQL_PLP_CHUNK_TERMINATOR;
    public static ushort SQL_USHORTVARMAXLEN;
    public static byte TVP_ROWCOUNT_ESTIMATE;
    public static byte TVP_ROW_TOKEN;
    public static byte TVP_END_TOKEN;
    public static ushort TVP_NOMETADATA_TOKEN;
    public static byte TVP_ORDER_UNIQUE_TOKEN;
    public static int TVP_DEFAULT_COLUMN;
    public static byte TVP_ORDERASC_FLAG;
    public static byte TVP_ORDERDESC_FLAG;
    public static byte TVP_UNIQUE_FLAG;
    public static string SP_EXECUTESQL;
    public static string SP_PREPEXEC;
    public static string SP_PREPARE;
    public static string SP_EXECUTE;
    public static string SP_UNPREPARE;
    public static string SP_PARAMS;
    public static string SP_PARAMS_MANAGED;
    public static string SP_PARAMS_MGD10;
    public static ushort RPC_PROCID_CURSOR;
    public static ushort RPC_PROCID_CURSOROPEN;
    public static ushort RPC_PROCID_CURSORPREPARE;
    public static ushort RPC_PROCID_CURSOREXECUTE;
    public static ushort RPC_PROCID_CURSORPREPEXEC;
    public static ushort RPC_PROCID_CURSORUNPREPARE;
    public static ushort RPC_PROCID_CURSORFETCH;
    public static ushort RPC_PROCID_CURSOROPTION;
    public static ushort RPC_PROCID_CURSORCLOSE;
    public static ushort RPC_PROCID_EXECUTESQL;
    public static ushort RPC_PROCID_PREPARE;
    public static ushort RPC_PROCID_EXECUTE;
    public static ushort RPC_PROCID_PREPEXEC;
    public static ushort RPC_PROCID_PREPEXECRPC;
    public static ushort RPC_PROCID_UNPREPARE;
    public static string TRANS_BEGIN;
    public static string TRANS_COMMIT;
    public static string TRANS_ROLLBACK;
    public static string TRANS_IF_ROLLBACK;
    public static string TRANS_SAVE;
    public static string TRANS_READ_COMMITTED;
    public static string TRANS_READ_UNCOMMITTED;
    public static string TRANS_REPEATABLE_READ;
    public static string TRANS_SERIALIZABLE;
    public static string TRANS_SNAPSHOT;
    public static byte SQL2000_RPCBATCHFLAG;
    public static byte SQL2005_RPCBATCHFLAG;
    public static byte RPC_RECOMPILE;
    public static byte RPC_NOMETADATA;
    public static byte RPC_PARAM_BYREF;
    public static byte RPC_PARAM_DEFAULT;
    public static byte RPC_PARAM_ENCRYPTED;
    public static string PARAM_OUTPUT;
    public static int MAX_PARAMETER_NAME_LENGTH;
    public static string FMTONLY_ON;
    public static string FMTONLY_OFF;
    public static string BROWSE_ON;
    public static string BROWSE_OFF;
    public static string TABLE;
    public static int EXEC_THRESHOLD;
    public static short TIMEOUT_EXPIRED;
    public static short ENCRYPTION_NOT_SUPPORTED;
    public static int LOGON_FAILED;
    public static int PASSWORD_EXPIRED;
    public static int IMPERSONATION_FAILED;
    public static int P_TOKENTOOLONG;
    public static int TCE_CONVERSION_ERROR_CLIENT_RETRY;
    public static int TCE_ENCLAVE_INVALID_SESSION_HANDLE;
    public static UInt32 SNI_UNINITIALIZED;
    public static UInt32 SNI_SUCCESS;
    public static UInt32 SNI_ERROR;
    public static UInt32 SNI_WAIT_TIMEOUT;
    public static UInt32 SNI_SUCCESS_IO_PENDING;
    public static short SNI_WSAECONNRESET;
    public static UInt32 SNI_QUEUE_FULL;
    public static UInt32 SNI_SSL_VALIDATE_CERTIFICATE;
    public static UInt32 SNI_SSL_USE_SCHANNEL_CACHE;
    public static UInt32 SNI_SSL_IGNORE_CHANNEL_BINDINGS;
    public static UInt32 SNI_SSL_SEND_ALPN_EXTENSION;
    public static string DEFAULT_ENGLISH_CODE_PAGE_STRING;
    public static short DEFAULT_ENGLISH_CODE_PAGE_VALUE;
    public static short CHARSET_CODE_PAGE_OFFSET;
    internal static int MAX_SERVERNAME;
    internal static ushort SELECT;
    internal static ushort INSERT;
    internal static ushort DELETE;
    internal static ushort UPDATE;
    internal static ushort ABORT;
    internal static ushort BEGINXACT;
    internal static ushort ENDXACT;
    internal static ushort BULKINSERT;
    internal static ushort OPENCURSOR;
    internal static ushort MERGE;
    internal static ushort MAXLEN_HOSTNAME;
    internal static ushort MAXLEN_CLIENTID;
    internal static ushort MAXLEN_CLIENTSECRET;
    internal static ushort MAXLEN_APPNAME;
    internal static ushort MAXLEN_SERVERNAME;
    internal static ushort MAXLEN_CLIENTINTERFACE;
    internal static ushort MAXLEN_LANGUAGE;
    internal static ushort MAXLEN_DATABASE;
    internal static ushort MAXLEN_ATTACHDBFILE;
    internal static ushort MAXLEN_NEWPASSWORD;
    public static UInt16[] CODE_PAGE_FROM_SORT_ID;
    internal static Int64[] TICKS_FROM_SCALE;
    internal static int MAX_TIME_SCALE;
    internal static int MAX_TIME_LENGTH;
    internal static int MAX_DATETIME2_LENGTH;
    internal static int WHIDBEY_DATE_LENGTH;
    internal static Int32[] WHIDBEY_TIME_LENGTH;
    internal static Int32[] WHIDBEY_DATETIME2_LENGTH;
    internal static Int32[] WHIDBEY_DATETIMEOFFSET_LENGTH;
    internal static byte DATA_CLASSIFICATION_NOT_ENABLED;
    internal static byte DATA_CLASSIFICATION_VERSION_WITHOUT_RANK_SUPPORT;
    internal static byte DATA_CLASSIFICATION_VERSION_MAX_SUPPORTED;
    internal static byte MAX_SUPPORTED_TCE_VERSION;
    internal static byte MIN_TCE_VERSION_WITH_ENCLAVE_SUPPORT;
    internal static ushort MAX_TCE_CIPHERINFO_SIZE;
    internal static long MAX_TCE_CIPHERTEXT_SIZE;
    internal static byte CustomCipherAlgorithmId;
    internal static int AEAD_AES_256_CBC_HMAC_SHA256;
    internal static string ENCLAVE_TYPE_VBS;
    internal static string ENCLAVE_TYPE_SGX;
    internal static string TCE_PARAM_CIPHERTEXT;
    internal static string TCE_PARAM_CIPHER_ALGORITHM_ID;
    internal static string TCE_PARAM_COLUMNENCRYPTION_KEY;
    internal static string TCE_PARAM_ENCRYPTION_ALGORITHM;
    internal static string TCE_PARAM_ENCRYPTIONTYPE;
    internal static string TCE_PARAM_ENCRYPTIONKEY;
    internal static string TCE_PARAM_MASTERKEY_PATH;
    internal static string TCE_PARAM_ENCRYPTED_CEK;
    internal static string TCE_PARAM_CLIENT_KEYSTORE_PROVIDERS;
    internal static string TCE_PARAM_FORCE_COLUMN_ENCRYPTION;
    private static TdsEnums();
    internal static string GetSniContextEnumName(SniContext sniContext);
}
internal class Microsoft.Data.SqlClient.TdsParameterSetter : SmiTypedGetterSetter {
    private TdsRecordBufferSetter _target;
    internal bool CanGet { get; }
    internal bool CanSet { get; }
    internal TdsParameterSetter(TdsParserStateObject stateObj, SmiMetaData md);
    internal virtual bool get_CanGet();
    internal virtual bool get_CanSet();
    internal virtual SmiTypedGetterSetter GetTypedGetterSetter(SmiEventSink sink, int ordinal);
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
}
internal class Microsoft.Data.SqlClient.TdsParser : object {
    private static int _objectTypeCount;
    private SqlClientLogger _logger;
    internal int _objectID;
    internal TdsParserStateObject _physicalStateObj;
    internal TdsParserStateObject _pMarsPhysicalConObj;
    private static int constBinBufferSize;
    private static int constTextBufferSize;
    private static string enableTruncateSwitch;
    internal TdsParserState _state;
    private string _server;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fResetConnection;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fPreserveTransaction;
    private SqlCollation _defaultCollation;
    private int _defaultCodePage;
    private int _defaultLCID;
    internal Encoding _defaultEncoding;
    private static EncryptionOptions s_sniSupportedEncryptionOption;
    private EncryptionOptions _encryptionOption;
    private SqlInternalTransaction _currentTransaction;
    private SqlInternalTransaction _pendingTransaction;
    private long _retainedTransactionId;
    private int _nonTransactedOpenResultCount;
    private SqlInternalConnectionTds _connHandler;
    private bool _fMARS;
    internal bool _loginWithFailover;
    internal AutoResetEvent _resetConnectionEvent;
    internal TdsParserSessionPool _sessionPool;
    private bool _is2005;
    private bool _is2008;
    private bool _is2012;
    private bool _is2022;
    private Byte[][] _sniSpnBuffer;
    private SqlStatistics _statistics;
    private bool _statisticsIsInTransaction;
    private static Byte[] s_nicAddress;
    private static UInt32 modreq(System.Runtime.CompilerServices.IsVolatile) s_maxSSPILength;
    private static Byte[] s_longDataHeader;
    private static object s_tdsParserLock;
    private static Byte[] s_xmlMetadataSubstituteSequence;
    private static int GUID_SIZE;
    internal bool _asyncWrite;
    [CompilerGeneratedAttribute]
private bool <IsColumnEncryptionSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <TceVersionSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AreEnclaveRetriesSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnclaveType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <isTcpProtocol>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FQDNforDNSCache>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DataClassificationVersion>k__BackingField;
    private SqlCollation _cachedCollation;
    private static ulong _indeterminateSize;
    private static string StateTraceFormatString;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_fSSPILoaded;
    internal int ObjectID { get; }
    private bool ClientOSEncryptionSupport { get; }
    internal bool IsColumnEncryptionSupported { get; internal set; }
    internal byte TceVersionSupported { get; internal set; }
    internal bool AreEnclaveRetriesSupported { get; internal set; }
    internal string EnclaveType { get; internal set; }
    internal bool isTcpProtocol { get; internal set; }
    internal string FQDNforDNSCache { get; internal set; }
    internal bool IsDataClassificationEnabled { get; }
    internal int DataClassificationVersion { get; internal set; }
    internal SqlInternalConnectionTds Connection { get; }
    private static bool EnableTruncateSwitch { get; }
    internal SqlInternalTransaction CurrentTransaction { get; internal set; }
    internal int DefaultLCID { get; }
    internal EncryptionOptions EncryptionOptions { get; internal set; }
    internal bool Is2005OrNewer { get; }
    internal bool Is2008OrNewer { get; }
    internal bool MARSOn { get; }
    internal SqlInternalTransaction PendingTransaction { get; internal set; }
    internal string Server { get; }
    internal TdsParserState State { get; internal set; }
    internal SqlStatistics Statistics { get; internal set; }
    private bool IncludeTraceHeader { get; }
    internal TdsParser(bool MARS, bool fAsynchronous);
    private static TdsParser();
    internal static void FillGuidBytes(Guid guid, Span`1<byte> buffer);
    internal static void FillDoubleBytes(double value, Span`1<byte> buffer);
    internal static void FillFloatBytes(float value, Span`1<byte> buffer);
    internal static Guid ConstructGuid(ReadOnlySpan`1<byte> bytes);
    internal int get_ObjectID();
    private bool get_ClientOSEncryptionSupport();
    [CompilerGeneratedAttribute]
internal bool get_IsColumnEncryptionSupported();
    [CompilerGeneratedAttribute]
internal void set_IsColumnEncryptionSupported(bool value);
    [CompilerGeneratedAttribute]
internal byte get_TceVersionSupported();
    [CompilerGeneratedAttribute]
internal void set_TceVersionSupported(byte value);
    [CompilerGeneratedAttribute]
internal bool get_AreEnclaveRetriesSupported();
    [CompilerGeneratedAttribute]
internal void set_AreEnclaveRetriesSupported(bool value);
    [CompilerGeneratedAttribute]
internal string get_EnclaveType();
    [CompilerGeneratedAttribute]
internal void set_EnclaveType(string value);
    [CompilerGeneratedAttribute]
internal bool get_isTcpProtocol();
    [CompilerGeneratedAttribute]
internal void set_isTcpProtocol(bool value);
    [CompilerGeneratedAttribute]
internal string get_FQDNforDNSCache();
    [CompilerGeneratedAttribute]
internal void set_FQDNforDNSCache(string value);
    internal bool get_IsDataClassificationEnabled();
    [CompilerGeneratedAttribute]
internal int get_DataClassificationVersion();
    [CompilerGeneratedAttribute]
internal void set_DataClassificationVersion(int value);
    internal SqlInternalConnectionTds get_Connection();
    private static bool get_EnableTruncateSwitch();
    internal SqlInternalTransaction get_CurrentTransaction();
    internal void set_CurrentTransaction(SqlInternalTransaction value);
    internal int get_DefaultLCID();
    internal EncryptionOptions get_EncryptionOptions();
    internal void set_EncryptionOptions(EncryptionOptions value);
    internal bool get_Is2005OrNewer();
    internal bool get_Is2008OrNewer();
    internal bool get_MARSOn();
    internal SqlInternalTransaction get_PendingTransaction();
    internal void set_PendingTransaction(SqlInternalTransaction value);
    internal string get_Server();
    internal TdsParserState get_State();
    internal void set_State(TdsParserState value);
    internal SqlStatistics get_Statistics();
    internal void set_Statistics(SqlStatistics value);
    private bool get_IncludeTraceHeader();
    internal int IncrementNonTransactedOpenResultCount();
    internal void DecrementNonTransactedOpenResultCount();
    internal void ProcessPendingAck(TdsParserStateObject stateObj);
    internal void Connect(ServerInfo serverInfo, SqlInternalConnectionTds connHandler, TimeoutTimer timeout, SqlConnectionString connectionOptions, bool withFailover);
    internal void RemoveEncryption();
    internal void EnableMars();
    internal TdsParserStateObject CreateSession();
    internal TdsParserStateObject GetSession(object owner);
    internal void PutSession(TdsParserStateObject session);
    private void SendPreLoginHandshake(Byte[] instanceName, SqlConnectionEncryptOption encrypt, bool integratedSecurity, string serverCertificateFilename);
    private void EnableSsl(UInt32 info, SqlConnectionEncryptOption encrypt, bool integratedSecurity, string serverCertificateFilename);
    private PreLoginHandshakeStatus ConsumePreLoginHandshake(SqlConnectionEncryptOption encrypt, bool trustServerCert, bool integratedSecurity, Boolean& marsCapable, Boolean& fedAuthRequired, bool tlsFirst, string serverCert);
    internal void Deactivate(bool connectionIsDoomed);
    internal void Disconnect();
    private void FireInfoMessageEvent(SqlConnection connection, SqlCommand command, TdsParserStateObject stateObj, SqlError error);
    internal void DisconnectTransaction(SqlInternalTransaction internalTransaction);
    internal void RollbackOrphanedAPITransactions();
    internal void ThrowExceptionAndWarning(TdsParserStateObject stateObj, SqlCommand command, bool callerHasConnectionLock, bool asyncClose);
    internal SqlError ProcessSNIError(TdsParserStateObject stateObj);
    internal void CheckResetConnection(TdsParserStateObject stateObj);
    internal Byte[] SerializeShort(int v, TdsParserStateObject stateObj);
    internal void WriteShort(int v, TdsParserStateObject stateObj);
    internal void WriteUnsignedShort(ushort us, TdsParserStateObject stateObj);
    internal Byte[] SerializeUnsignedInt(UInt32 i, TdsParserStateObject stateObj);
    internal void WriteUnsignedInt(UInt32 i, TdsParserStateObject stateObj);
    internal Byte[] SerializeInt(int v, TdsParserStateObject stateObj);
    internal void WriteInt(int v, TdsParserStateObject stateObj);
    internal static void WriteInt(Span`1<byte> buffer, int value);
    internal Byte[] SerializeFloat(float v);
    internal void WriteFloat(float v, TdsParserStateObject stateObj);
    internal Byte[] SerializeLong(long v, TdsParserStateObject stateObj);
    internal void WriteLong(long v, TdsParserStateObject stateObj);
    internal Byte[] SerializePartialLong(long v, int length);
    internal void WritePartialLong(long v, int length, TdsParserStateObject stateObj);
    internal void WriteUnsignedLong(ulong uv, TdsParserStateObject stateObj);
    internal Byte[] SerializeDouble(double v);
    internal void WriteDouble(double v, TdsParserStateObject stateObj);
    internal void PrepareResetConnection(bool preserveTransaction);
    internal bool Run(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj);
    internal static bool IsValidTdsToken(byte token);
    internal bool TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady);
    private static void TryRunSetupSpinWaitContinuation(TdsParserStateObject stateObj);
    private bool TryProcessEnvChange(int tokenLength, TdsParserStateObject stateObj, SqlEnvChange& sqlEnvChange);
    private bool TryReadTwoBinaryFields(SqlEnvChange env, TdsParserStateObject stateObj);
    private bool TryReadTwoStringFields(SqlEnvChange env, TdsParserStateObject stateObj);
    private bool TryProcessDone(SqlCommand cmd, SqlDataReader reader, RunBehavior& run, TdsParserStateObject stateObj);
    private void ProcessSqlStatistics(ushort curCmd, ushort status, int count);
    private bool TryProcessFeatureExtAck(TdsParserStateObject stateObj);
    private bool IsValidAttestationProtocol(SqlConnectionAttestationProtocol attestationProtocol, string enclaveType);
    private bool TryReadByteString(TdsParserStateObject stateObj, String& value);
    private bool TryReadSensitivityLabel(TdsParserStateObject stateObj, String& label, String& id);
    private bool TryReadSensitivityInformationType(TdsParserStateObject stateObj, String& informationType, String& id);
    private bool TryProcessDataClassification(TdsParserStateObject stateObj, SensitivityClassification& sensitivityClassification);
    private bool TryProcessResColSrcs(TdsParserStateObject stateObj, int tokenLength);
    private bool TryProcessSessionState(TdsParserStateObject stateObj, int length, SessionData sdata);
    private bool TryProcessLoginAck(TdsParserStateObject stateObj, SqlLoginAck& sqlLoginAck);
    private bool TryProcessFedAuthInfo(TdsParserStateObject stateObj, int tokenLen, SqlFedAuthInfo& sqlFedAuthInfo);
    internal bool TryProcessError(byte token, TdsParserStateObject stateObj, SqlCommand command, SqlError& error);
    internal bool TryProcessReturnValue(int length, TdsParserStateObject stateObj, SqlReturnValue& returnValue, SqlCommandColumnEncryptionSetting columnEncryptionSetting);
    internal bool TryProcessTceCryptoMetadata(TdsParserStateObject stateObj, SqlMetaDataPriv col, SqlTceCipherInfoTable cipherTable, SqlCommandColumnEncryptionSetting columnEncryptionSetting, bool isReturnValue);
    internal bool TryProcessCollation(TdsParserStateObject stateObj, SqlCollation& collation);
    private void WriteCollation(SqlCollation collation, TdsParserStateObject stateObj);
    internal int GetCodePage(SqlCollation collation, TdsParserStateObject stateObj);
    internal void DrainData(TdsParserStateObject stateObj);
    internal void ThrowUnsupportedCollationEncountered(TdsParserStateObject stateObj);
    internal bool TryProcessAltMetaData(int cColumns, TdsParserStateObject stateObj, _SqlMetaDataSet& metaData);
    internal bool TryReadCipherInfoEntry(TdsParserStateObject stateObj, SqlTceCipherInfoEntry& entry);
    internal bool TryProcessCipherInfoTable(TdsParserStateObject stateObj, SqlTceCipherInfoTable& cipherTable);
    internal bool TryProcessMetaData(int cColumns, TdsParserStateObject stateObj, _SqlMetaDataSet& metaData, SqlCommandColumnEncryptionSetting columnEncryptionSetting);
    private bool IsVarTimeTds(byte tdsType);
    private bool TryProcessTypeInfo(TdsParserStateObject stateObj, SqlMetaDataPriv col, UInt32 userType);
    private bool TryCommonProcessMetaData(TdsParserStateObject stateObj, _SqlMetaData col, SqlTceCipherInfoTable cipherTable, bool fColMD, SqlCommandColumnEncryptionSetting columnEncryptionSetting);
    private void WriteUDTMetaData(object value, string database, string schema, string type, TdsParserStateObject stateObj);
    internal bool TryProcessTableName(int length, TdsParserStateObject stateObj, MultiPartTableName[]& multiPartTableNames);
    private bool TryProcessOneTable(TdsParserStateObject stateObj, Int32& length, MultiPartTableName& multiPartTableName);
    private bool TryProcessColInfo(_SqlMetaDataSet columns, SqlDataReader reader, TdsParserStateObject stateObj, _SqlMetaDataSet& metaData);
    internal bool TryProcessColumnHeader(SqlMetaDataPriv col, TdsParserStateObject stateObj, int columnOrdinal, Boolean& isNull, UInt64& length);
    private bool TryProcessColumnHeaderNoNBC(SqlMetaDataPriv col, TdsParserStateObject stateObj, Boolean& isNull, UInt64& length);
    internal bool TryGetAltRowId(TdsParserStateObject stateObj, Int32& id);
    private bool TryProcessRow(_SqlMetaDataSet columns, Object[] buffer, Int32[] map, TdsParserStateObject stateObj);
    internal static bool ShouldHonorTceForRead(SqlCommandColumnEncryptionSetting columnEncryptionSetting, SqlInternalConnectionTds connection);
    internal static object GetNullSqlValue(SqlBuffer nullVal, SqlMetaDataPriv md, SqlCommandColumnEncryptionSetting columnEncryptionSetting, SqlInternalConnectionTds connection);
    internal bool TrySkipRow(_SqlMetaDataSet columns, TdsParserStateObject stateObj);
    internal bool TrySkipRow(_SqlMetaDataSet columns, int startCol, TdsParserStateObject stateObj);
    internal bool TrySkipValue(SqlMetaDataPriv md, int columnOrdinal, TdsParserStateObject stateObj);
    private bool IsNull(MetaType mt, ulong length);
    private bool TryReadSqlStringValue(SqlBuffer value, byte type, int length, Encoding encoding, bool isPlp, TdsParserStateObject stateObj);
    internal bool DeserializeUnencryptedValue(SqlBuffer value, Byte[] unencryptedBytes, SqlMetaDataPriv md, TdsParserStateObject stateObj, byte normalizationVersion);
    internal bool TryReadSqlValue(SqlBuffer value, SqlMetaDataPriv md, int length, TdsParserStateObject stateObj, SqlCommandColumnEncryptionSetting columnEncryptionOverride, string columnName, SqlCommand command);
    private bool TryReadSqlDateTime(SqlBuffer value, byte tdsType, int length, byte scale, TdsParserStateObject stateObj);
    internal bool TryReadSqlValueInternal(SqlBuffer value, byte tdsType, int length, TdsParserStateObject stateObj);
    internal bool TryReadSqlVariant(SqlBuffer value, int lenTotal, TdsParserStateObject stateObj);
    internal Task WriteSqlVariantValue(object value, int length, int offset, TdsParserStateObject stateObj, bool canAccumulate);
    internal Task WriteSqlVariantDataRowValue(object value, TdsParserStateObject stateObj, bool canAccumulate);
    internal void WriteSqlVariantHeader(int length, byte tdstype, byte propbytes, TdsParserStateObject stateObj);
    internal void WriteSqlVariantDateTime2(DateTime value, TdsParserStateObject stateObj);
    internal void WriteSqlVariantDate(DateTime value, TdsParserStateObject stateObj);
    private Byte[] SerializeSqlMoney(SqlMoney value, int length, TdsParserStateObject stateObj);
    private void WriteSqlMoney(SqlMoney value, int length, TdsParserStateObject stateObj);
    private Byte[] SerializeCurrency(decimal value, int length, TdsParserStateObject stateObj);
    private void WriteCurrency(decimal value, int length, TdsParserStateObject stateObj);
    private Byte[] SerializeDate(DateTime value);
    private void WriteDate(DateTime value, TdsParserStateObject stateObj);
    private Byte[] SerializeTime(TimeSpan value, byte scale, int length);
    private void WriteTime(TimeSpan value, byte scale, int length, TdsParserStateObject stateObj);
    private Byte[] SerializeDateTime2(DateTime value, byte scale, int length);
    private void WriteDateTime2(DateTime value, byte scale, int length, TdsParserStateObject stateObj);
    private Byte[] SerializeDateTimeOffset(DateTimeOffset value, byte scale, int length);
    private void WriteDateTimeOffset(DateTimeOffset value, byte scale, int length, TdsParserStateObject stateObj);
    private bool TryReadSqlDecimal(SqlBuffer value, int length, byte precision, byte scale, TdsParserStateObject stateObj);
    private bool TryReadDecimalBits(int length, TdsParserStateObject stateObj, Int32[]& bits);
    internal static SqlDecimal AdjustSqlDecimalScale(SqlDecimal d, int newScale);
    internal static decimal AdjustDecimalScale(decimal value, int newScale);
    internal Byte[] SerializeSqlDecimal(SqlDecimal d, TdsParserStateObject stateObj);
    internal void WriteSqlDecimal(SqlDecimal d, TdsParserStateObject stateObj);
    private Byte[] SerializeDecimal(decimal value, TdsParserStateObject stateObj);
    private void WriteDecimal(decimal value, TdsParserStateObject stateObj);
    private void WriteIdentifier(string s, TdsParserStateObject stateObj);
    private void WriteIdentifierWithShortLength(string s, TdsParserStateObject stateObj);
    private Task WriteString(string s, TdsParserStateObject stateObj, bool canAccumulate);
    internal Byte[] SerializeCharArray(Char[] carr, int length, int offset);
    internal Task WriteCharArray(Char[] carr, int length, int offset, TdsParserStateObject stateObj, bool canAccumulate);
    internal Byte[] SerializeString(string s, int length, int offset);
    internal Task WriteString(string s, int length, int offset, TdsParserStateObject stateObj, bool canAccumulate);
    private static void CopyCharsToBytes(Char[] source, int sourceOffset, Byte[] dest, int destOffset, int charLength);
    private static void CopyStringToBytes(string source, int sourceOffset, Byte[] dest, int destOffset, int charLength);
    private Task WriteEncodingChar(string s, Encoding encoding, TdsParserStateObject stateObj, bool canAccumulate);
    private Byte[] SerializeEncodingChar(string s, int numChars, int offset, Encoding encoding);
    private Task WriteEncodingChar(string s, int numChars, int offset, Encoding encoding, TdsParserStateObject stateObj, bool canAccumulate);
    internal int GetEncodingCharLength(string value, int numChars, int charOffset, Encoding encoding);
    internal bool TryGetDataLength(SqlMetaDataPriv colmeta, TdsParserStateObject stateObj, UInt64& length);
    internal bool TryGetTokenLength(byte token, TdsParserStateObject stateObj, Int32& tokenLength);
    private void ProcessAttention(TdsParserStateObject stateObj);
    private static int StateValueLength(int dataLen);
    internal int WriteSessionRecoveryFeatureRequest(SessionData reconnectData, bool write);
    internal int WriteFedAuthFeatureRequest(FederatedAuthenticationFeatureExtensionData fedAuthFeatureData, bool write);
    internal int WriteTceFeatureRequest(bool write);
    internal int WriteDataClassificationFeatureRequest(bool write);
    internal int WriteGlobalTransactionsFeatureRequest(bool write);
    internal int WriteUTF8SupportFeatureRequest(bool write);
    internal int WriteSQLDNSCachingFeatureRequest(bool write);
    internal void TdsLogin(SqlLogin rec, FeatureExtension requestedFeatures, SessionData recoverySessionData, FederatedAuthenticationFeatureExtensionData fedAuthFeatureExtensionData, SqlConnectionEncryptOption encrypt);
    private void WriteLoginData(SqlLogin rec, FeatureExtension requestedFeatures, SessionData recoverySessionData, FederatedAuthenticationFeatureExtensionData fedAuthFeatureExtensionData, SqlConnectionEncryptOption encrypt, Byte[] encryptedPassword, Byte[] encryptedChangePassword, int encryptedPasswordLengthInBytes, int encryptedChangePasswordLengthInBytes, bool useFeatureExt, string userName, int length, int featureExOffset, string clientInterfaceName, Byte[] outSSPIBuff, UInt32 outSSPILength);
    private int ApplyFeatureExData(FeatureExtension requestedFeatures, SessionData recoverySessionData, FederatedAuthenticationFeatureExtensionData fedAuthFeatureExtensionData, bool useFeatureExt, int length, bool write);
    internal void SendFedAuthToken(SqlFedAuthToken fedAuthToken);
    private void SSPIData(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength);
    private void ProcessSSPI(int receivedLength);
    private void SSPIError(string error, string procedure);
    internal Byte[] GetDTCAddress(int timeout, TdsParserStateObject stateObj);
    internal void PropagateDistributedTransaction(Byte[] buffer, int timeout, TdsParserStateObject stateObj);
    internal SqlDataReader TdsExecuteTransactionManagerRequest(Byte[] buffer, TransactionManagerRequestType request, string transactionName, TransactionManagerIsolationLevel isoLevel, int timeout, SqlInternalTransaction transaction, TdsParserStateObject stateObj, bool isDelegateControlRequest);
    internal void FailureCleanup(TdsParserStateObject stateObj, Exception e);
    internal Task TdsExecuteSQLBatch(string text, int timeout, SqlNotificationRequest notificationRequest, TdsParserStateObject stateObj, bool sync, bool callerHasConnectionLock, Byte[] enclavePackage);
    internal Task TdsExecuteRPC(SqlCommand cmd, IList`1<_SqlRPC> rpcArray, int timeout, bool inSchema, SqlNotificationRequest notificationRequest, TdsParserStateObject stateObj, bool isCommandProc, bool sync, TaskCompletionSource`1<object> completion, int startRpc, int startParam);
    private Task TDSExecuteRPCAddParameter(TdsParserStateObject stateObj, SqlParameter param, MetaType mt, byte options, SqlCommand command, bool isAnonymous);
    private void TDSExecuteRPCParameterSetupWriteCompletion(SqlCommand cmd, IList`1<_SqlRPC> rpcArray, int timeout, bool inSchema, SqlNotificationRequest notificationRequest, TdsParserStateObject stateObj, bool isCommandProc, bool sync, TaskCompletionSource`1<object> completion, int startRpc, int startParam, Task writeParamTask);
    private void TDSExecuteRPCParameterSetupFlushCompletion(TdsParserStateObject stateObj, TaskCompletionSource`1<object> completion, Task execFlushTask, bool taskReleaseConnectionLock);
    private void WriteEnclaveInfo(TdsParserStateObject stateObj, Byte[] enclavePackage);
    private void FinalizeExecuteRPC(TdsParserStateObject stateObj);
    private void TdsExecuteRPC_OnFailure(Exception exc, TdsParserStateObject stateObj);
    private void ExecuteFlushTaskCallback(Task tsk, TdsParserStateObject stateObj, TaskCompletionSource`1<object> completion, bool releaseConnectionLock);
    private void WriteParameterName(string rawParameterName, TdsParserStateObject stateObj, bool isAnonymous);
    private void WriteSmiParameter(SqlParameter param, int paramIndex, bool sendDefault, TdsParserStateObject stateObj, bool isAnonymous, bool advancedTraceIsOn);
    private void WriteSmiParameterMetaData(SmiParameterMetaData metaData, bool sendDefault, bool isAnonymous, TdsParserStateObject stateObj);
    private void WriteSmiTypeInfo(SmiExtendedMetaData metaData, TdsParserStateObject stateObj);
    private void WriteTvpTypeInfo(SmiExtendedMetaData metaData, TdsParserStateObject stateObj);
    private void WriteTvpColumnMetaData(SmiExtendedMetaData md, bool isDefault, TdsParserStateObject stateObj);
    private void WriteTvpOrderUnique(SmiExtendedMetaData metaData, TdsParserStateObject stateObj);
    internal Task WriteBulkCopyDone(TdsParserStateObject stateObj);
    internal void LoadColumnEncryptionKeys(_SqlMetaDataSet metadataCollection, SqlConnection connection, SqlCommand command);
    internal void WriteEncryptionEntries(SqlTceCipherInfoTable& cekTable, TdsParserStateObject stateObj);
    internal void WriteCekTable(_SqlMetaDataSet metadataCollection, TdsParserStateObject stateObj);
    internal void WriteTceUserTypeAndTypeInfo(SqlMetaDataPriv mdPriv, TdsParserStateObject stateObj);
    internal void WriteCryptoMetadata(_SqlMetaData md, TdsParserStateObject stateObj);
    internal void WriteBulkCopyMetaData(_SqlMetaDataSet metadataCollection, int count, TdsParserStateObject stateObj);
    internal bool ShouldEncryptValuesForBulkCopy();
    internal object EncryptColumnValue(object value, SqlMetaDataPriv metadata, string column, TdsParserStateObject stateObj, bool isDataFeed, bool isSqlType);
    internal Task WriteBulkCopyValue(object value, SqlMetaDataPriv metadata, TdsParserStateObject stateObj, bool isSqlType, bool isDataFeed, bool isNull);
    private Task WriteBulkCopyValueSetupContinuation(Task internalWriteTask, Encoding saveEncoding, SqlCollation saveCollation, int saveCodePage, int saveLCID);
    private void WriteMarsHeaderData(TdsParserStateObject stateObj, SqlInternalTransaction transaction);
    private int GetNotificationHeaderSize(SqlNotificationRequest notificationRequest);
    private void WriteQueryNotificationHeaderData(SqlNotificationRequest notificationRequest, TdsParserStateObject stateObj);
    private void WriteTraceHeaderData(TdsParserStateObject stateObj);
    private void WriteRPCBatchHeaders(TdsParserStateObject stateObj, SqlNotificationRequest notificationRequest);
    private void WriteTokenLength(byte token, int length, TdsParserStateObject stateObj);
    private bool IsBOMNeeded(MetaType type, object value);
    private Task GetTerminationTask(Task unterminatedWriteTask, object value, MetaType type, int actualLength, TdsParserStateObject stateObj, bool isDataFeed);
    private Task WriteSqlValue(object value, MetaType type, int actualLength, int codePageByteSize, int offset, TdsParserStateObject stateObj);
    private Task WriteUnterminatedSqlValue(object value, MetaType type, int actualLength, int codePageByteSize, int offset, TdsParserStateObject stateObj);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.TdsParser/<WriteXmlFeed>d__305")]
private Task WriteXmlFeed(XmlDataFeed feed, TdsParserStateObject stateObj, bool needBom, Encoding encoding, int size);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.TdsParser/<WriteTextFeed>d__306")]
private Task WriteTextFeed(TextDataFeed feed, Encoding encoding, bool needBom, TdsParserStateObject stateObj, int size);
    [AsyncStateMachineAttribute("Microsoft.Data.SqlClient.TdsParser/<WriteStreamFeed>d__307")]
private Task WriteStreamFeed(StreamDataFeed feed, TdsParserStateObject stateObj, int len);
    private Task NullIfCompletedWriteTask(Task task);
    private Task WriteValue(object value, MetaType type, byte scale, int actualLength, int encodingByteSize, int offset, TdsParserStateObject stateObj, int paramSize, bool isDataFeed);
    private Task WriteUnterminatedValue(object value, MetaType type, byte scale, int actualLength, int encodingByteSize, int offset, TdsParserStateObject stateObj, int paramSize, bool isDataFeed);
    private Task WriteEncryptionMetadata(Task terminatedWriteTask, SqlColumnEncryptionInputParameterInfo columnEncryptionParameterInfo, TdsParserStateObject stateObj);
    private void WriteEncryptionMetadata(SqlColumnEncryptionInputParameterInfo columnEncryptionParameterInfo, TdsParserStateObject stateObj);
    private Byte[] SerializeUnencryptedValue(object value, MetaType type, byte scale, int actualLength, int offset, bool isDataFeed, byte normalizationVersion, TdsParserStateObject stateObj);
    private Byte[] SerializeUnencryptedSqlValue(object value, MetaType type, int actualLength, int offset, byte normalizationVersion, TdsParserStateObject stateObj);
    internal void WriteParameterVarLen(MetaType type, int size, bool isNull, TdsParserStateObject stateObj, bool unknownLength);
    private bool TryReadPlpUnicodeCharsChunk(Char[] buff, int offst, int len, TdsParserStateObject stateObj, Int32& charsRead);
    internal int ReadPlpUnicodeChars(Char[]& buff, int offst, int len, TdsParserStateObject stateObj);
    internal bool TryReadPlpUnicodeChars(Char[]& buff, int offst, int len, TdsParserStateObject stateObj, Int32& totalCharsRead, bool supportRentedBuff, Boolean& rentedBuff);
    internal int ReadPlpAnsiChars(Char[]& buff, int offst, int len, SqlMetaDataPriv metadata, TdsParserStateObject stateObj);
    internal ulong SkipPlpValue(ulong cb, TdsParserStateObject stateObj);
    internal bool TrySkipPlpValue(ulong cb, TdsParserStateObject stateObj, UInt64& totalBytesSkipped);
    internal ulong PlpBytesLeft(TdsParserStateObject stateObj);
    internal bool TryPlpBytesLeft(TdsParserStateObject stateObj, UInt64& left);
    internal ulong PlpBytesTotalLength(TdsParserStateObject stateObj);
    private bool TryProcessUDTMetaData(SqlMetaDataPriv metaData, TdsParserStateObject stateObj);
    internal string TraceString();
    private string TraceObjectClass(object instance);
    internal void PostReadAsyncForMars();
    private void LoadSSPILibrary();
    private void WaitForSSLHandShakeToComplete(UInt32& error, Int32& protocolVersion);
    private SNIErrorDetails GetSniErrorDetails();
}
internal class Microsoft.Data.SqlClient.TdsParserSessionPool : object {
    private static int MaxInactiveCount;
    private static int s_objectTypeCount;
    private int _objectID;
    private TdsParser _parser;
    private List`1<TdsParserStateObject> _cache;
    private int _cachedCount;
    private TdsParserStateObject[] _freeStateObjects;
    private int _freeStateObjectCount;
    private bool IsDisposed { get; }
    internal int ObjectID { get; }
    internal int ActiveSessionsCount { get; }
    internal TdsParserSessionPool(TdsParser parser);
    private bool get_IsDisposed();
    internal int get_ObjectID();
    internal void Deactivate();
    internal void Dispose();
    internal TdsParserStateObject GetSession(object owner);
    internal void PutSession(TdsParserStateObject session);
    internal int get_ActiveSessionsCount();
    internal string TraceString();
}
internal enum Microsoft.Data.SqlClient.TdsParserState : Enum {
    public int value__;
    public static TdsParserState Closed;
    public static TdsParserState OpenNotLoggedIn;
    public static TdsParserState OpenLoggedIn;
    public static TdsParserState Broken;
}
internal abstract class Microsoft.Data.SqlClient.TdsParserStateObject : object {
    private static int s_objectTypeCount;
    internal int _objectID;
    private static int AttentionTimeoutSeconds;
    private static long CheckConnectionWindow;
    protected TdsParser _parser;
    private WeakReference`1<object> _owner;
    internal SharedState _readerState;
    private int _activateCount;
    private SnapshottedStateFlags _snapshottedState;
    internal int _inputHeaderLen;
    internal int _outputHeaderLen;
    internal Byte[] _outBuff;
    internal int _outBytesUsed;
    protected Byte[] _inBuff;
    internal int _inBytesUsed;
    internal int _inBytesRead;
    internal int _inBytesPacket;
    internal int _spid;
    internal byte _outputMessageType;
    internal byte _messageStatus;
    internal byte _outputPacketNumber;
    internal UInt32 _outputPacketCount;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fResetEventOwned;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fResetConnectionSent;
    internal bool _bulkCopyOpperationInProgress;
    internal bool _bulkCopyWriteTimeout;
    protected object _writePacketLockObject;
    private int _pendingCallbacks;
    private long _timeoutMilliseconds;
    private long _timeoutTime;
    private int _timeoutState;
    private int _timeoutIdentitySource;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _timeoutIdentityValue;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _attentionSent;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _attentionSending;
    private TimerCallback _onTimeoutAsync;
    internal bool _enforceTimeoutDelay;
    internal int _enforcedTimeoutDelayInMilliSeconds;
    private LastIOTimer _lastSuccessfulIOTimer;
    private SecureString[] _securePasswords;
    private Int32[] _securePasswordOffsetsInBuffer;
    private bool _cancelled;
    private static int WaitForCancellationLockPollTimeout;
    internal SqlInternalTransaction _executedUnderTransaction;
    internal ulong _longlen;
    internal ulong _longlenleft;
    internal Int32[] _decimalBits;
    internal Byte[] _bTmp;
    internal int _bTmpRead;
    internal Decoder _plpdecoder;
    internal bool _accumulateInfoEvents;
    internal List`1<SqlError> _pendingInfoEvents;
    internal Byte[] _bLongBytes;
    internal Byte[] _bIntBytes;
    internal Byte[] _bShortBytes;
    internal Byte[] _bDecimalBytes;
    private Byte[] _partialHeaderBuffer;
    internal int _partialHeaderBytesRead;
    internal _SqlMetaDataSet _cleanupMetaData;
    internal _SqlMetaDataSetCollection _cleanupAltMetaDataSetArray;
    private SniContext _sniContext;
    private bool _bcpLock;
    private NullBitmap _nullBitmapInfo;
    internal TaskCompletionSource`1<object> _networkPacketTaskSource;
    private Timer _networkPacketTimeout;
    internal bool _syncOverAsync;
    private bool _snapshotReplay;
    private StateSnapshot _snapshot;
    private StateSnapshot _cachedSnapshot;
    internal ExecutionContext _executionContext;
    internal bool _asyncReadWithoutSnapshot;
    internal SqlErrorCollection _errors;
    internal SqlErrorCollection _warnings;
    internal object _errorAndWarningsLock;
    private bool _hasErrorOrWarning;
    internal SqlErrorCollection _preAttentionErrors;
    internal SqlErrorCollection _preAttentionWarnings;
    private TaskCompletionSource`1 modreq(System.Runtime.CompilerServices.IsVolatile) _writeCompletionSource;
    protected Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _asyncWriteCount;
    private Exception modreq(System.Runtime.CompilerServices.IsVolatile) _delayedWriteAsyncCallbackException;
    private int _readingCount;
    private static ContextCallback s_readAsyncCallbackComplete;
    private WeakReference _cancellationOwner;
    internal bool HasOpenResult { get; internal set; }
    internal bool HasPendingData { get; internal set; }
    internal bool HasReceivedError { get; internal set; }
    internal bool HasReceivedAttention { get; internal set; }
    internal bool HasReceivedColumnMetadata { get; internal set; }
    internal int ObjectID { get; }
    internal bool BcpLock { get; internal set; }
    internal bool IsOrphaned { get; }
    unknown object Owner {internal set; }
    internal bool HasOwner { get; }
    internal TdsParser Parser { get; }
    internal SniContext SniContext { get; internal set; }
    internal bool TimeoutHasExpired { get; }
    internal long TimeoutTime { get; internal set; }
    public bool IsTimeoutStateExpired { get; }
    internal UInt32 Status { get; }
    internal SessionHandle SessionHandle { get; }
    internal bool HasErrorOrWarning { get; }
    internal int ErrorCount { get; }
    internal int WarningCount { get; }
    protected PacketHandle EmptyReadPacket { get; }
    internal int PreAttentionErrorCount { get; }
    internal int PreAttentionWarningCount { get; }
    internal TdsParserStateObject(TdsParser parser);
    internal TdsParserStateObject(TdsParser parser, TdsParserStateObject physicalConnection, bool async);
    private static TdsParserStateObject();
    private void SetSnapshottedState(SnapshottedStateFlags flag, bool value);
    private bool GetSnapshottedState(SnapshottedStateFlags flag);
    internal bool get_HasOpenResult();
    internal void set_HasOpenResult(bool value);
    internal bool get_HasPendingData();
    internal void set_HasPendingData(bool value);
    internal bool get_HasReceivedError();
    internal void set_HasReceivedError(bool value);
    internal bool get_HasReceivedAttention();
    internal void set_HasReceivedAttention(bool value);
    internal bool get_HasReceivedColumnMetadata();
    internal void set_HasReceivedColumnMetadata(bool value);
    internal int get_ObjectID();
    internal bool get_BcpLock();
    internal void set_BcpLock(bool value);
    internal bool get_IsOrphaned();
    internal void set_Owner(object value);
    internal bool get_HasOwner();
    internal TdsParser get_Parser();
    internal SniContext get_SniContext();
    internal void set_SniContext(SniContext value);
    internal bool get_TimeoutHasExpired();
    internal long get_TimeoutTime();
    internal void set_TimeoutTime(long value);
    internal int GetTimeoutRemaining();
    internal bool TryStartNewRow(bool isNullCompressed, int nullBitmapColumnsCount);
    internal bool TryReadChars(Char[] chars, int charsOffset, int charsCount, Int32& charsCopied);
    internal bool IsRowTokenReady();
    internal bool IsNullCompressionBitSet(int columnOrdinal);
    internal void Activate(object owner);
    internal void CancelRequest();
    public void CheckSetResetConnectionState(UInt32 error, CallbackType callbackType);
    internal void CloseSession();
    internal bool Deactivate();
    internal void RemoveOwner();
    internal void DecrementOpenResultCount();
    internal void DisposeCounters();
    internal int IncrementAndObtainOpenResultCount(SqlInternalTransaction transaction);
    internal void SetTimeoutSeconds(int timeout);
    internal void SetTimeoutMilliseconds(long timeout);
    internal void ThrowExceptionAndWarning(bool callerHasConnectionLock, bool asyncClose);
    internal Task ExecuteFlush();
    internal bool TryProcessHeader();
    internal bool TryPrepareBuffer();
    internal void ResetBuffer();
    internal void ResetPacketCounters();
    internal bool SetPacketSize(int size);
    internal bool TryPeekByte(Byte& value);
    public bool TryReadByteArray(Span`1<byte> buff, int len);
    public bool TryReadByteArray(Span`1<byte> buff, int len, Int32& totalRead);
    internal bool TryReadByte(Byte& value);
    internal bool TryReadChar(Char& value);
    internal bool TryReadInt16(Int16& value);
    internal bool TryReadInt32(Int32& value);
    internal bool TryReadInt64(Int64& value);
    internal bool TryReadUInt16(UInt16& value);
    internal bool TryReadUInt32(UInt32& value);
    internal bool TryReadSingle(Single& value);
    internal bool TryReadDouble(Double& value);
    internal bool TryReadString(int length, String& value);
    internal bool TryReadStringWithEncoding(int length, Encoding encoding, bool isPlp, String& value);
    internal ulong ReadPlpLength(bool returnPlpNullIfNull);
    internal bool TryReadPlpLength(bool returnPlpNullIfNull, UInt64& lengthLeft);
    internal int ReadPlpBytesChunk(Byte[] buff, int offset, int len);
    internal bool TryReadPlpBytes(Byte[]& buff, int offset, int len, Int32& totalBytesRead);
    internal bool TrySkipLongBytes(long num);
    internal bool TrySkipBytes(int num);
    internal bool TryReadNetworkPacket();
    internal void PrepareReplaySnapshot();
    internal void ReadSniSyncOverAsync();
    internal void OnConnectionClosed();
    public void SetTimeoutStateStopped();
    public bool get_IsTimeoutStateExpired();
    private void OnTimeoutAsync(object state);
    private bool OnTimeoutSync(bool asyncClose);
    private bool OnTimeoutCore(int expectedState, int targetState, bool asyncClose);
    internal void ReadSni(TaskCompletionSource`1<object> completion);
    internal bool IsConnectionAlive(bool throwOnException);
    internal void SetSnapshot();
    internal void ResetSnapshot();
    internal abstract virtual UInt32 DisableSsl();
    internal abstract virtual UInt32 EnableMars(UInt32& info);
    internal abstract virtual UInt32 get_Status();
    internal abstract virtual SessionHandle get_SessionHandle();
    internal void Cancel(object caller);
    private void ResetCancelAndProcessAttention();
    internal abstract virtual void CreatePhysicalSNIHandle(string serverName, TimeoutTimer timeout, Byte[]& instanceName, Byte[][]& spnBuffer, bool flushCache, bool async, bool fParallel, SqlConnectionIPAddressPreference iPAddressPreference, string cachedFQDN, SQLDNSInfo& pendingDNSInfo, string serverSPN, bool isIntegratedSecurity, bool tlsFirst, string hostNameInCertificate, string serverCertificateFilename);
    internal abstract virtual void AssignPendingDNSInfo(string userProtocol, string DNSCacheKey, SQLDNSInfo& pendingDNSInfo);
    internal abstract virtual UInt32 SniGetConnectionId(Guid& clientConnectionId);
    internal abstract virtual bool IsFailedHandle();
    protected abstract virtual void CreateSessionHandle(TdsParserStateObject physicalConnection, bool async);
    protected abstract virtual void FreeGcHandle(int remaining, bool release);
    internal abstract virtual UInt32 EnableSsl(UInt32& info, bool tlsFirst, string serverCertificateFilename);
    internal abstract virtual UInt32 WaitForSSLHandShakeToComplete(Int32& protocolVersion);
    internal abstract virtual void Dispose();
    internal abstract virtual void DisposePacketCache();
    internal abstract virtual bool IsPacketEmpty(PacketHandle readPacket);
    internal abstract virtual PacketHandle ReadSyncOverAsync(int timeoutRemaining, UInt32& error);
    internal abstract virtual PacketHandle ReadAsync(SessionHandle handle, UInt32& error);
    internal abstract virtual UInt32 CheckConnection();
    internal abstract virtual UInt32 SetConnectionBufferSize(UInt32& unsignedPacketSize);
    internal abstract virtual void ReleasePacket(PacketHandle syncReadPacket);
    protected abstract virtual UInt32 SNIPacketGetData(PacketHandle packet, Byte[] _inBuff, UInt32& dataSize);
    internal abstract virtual PacketHandle GetResetWritePacket(int dataSize);
    internal abstract virtual void ClearAllWritePackets();
    internal abstract virtual PacketHandle AddPacketToPendingList(PacketHandle packet);
    protected abstract virtual void RemovePacketFromPendingList(PacketHandle pointer);
    internal abstract virtual UInt32 GenerateSspiClientContext(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength, Byte[][] _sniSpnBuffer);
    internal int DecrementPendingCallbacks(bool release);
    internal int IncrementPendingCallbacks();
    internal void StartSession(object cancellationOwner);
    internal bool ValidateSNIConnection();
    private void ReadSniError(TdsParserStateObject stateObj, UInt32 error);
    public void ProcessSniPacket(PacketHandle packet, UInt32 error);
    private void ChangeNetworkPacketTimeout(int dueTime, int period);
    private void SetBufferSecureStrings();
    public void ReadAsyncCallback(PacketHandle packet, UInt32 error);
    public void ReadAsyncCallback(IntPtr key, PacketHandle packet, UInt32 error);
    private static void ReadAsyncCallbackComplete(object state);
    protected abstract virtual bool CheckPacket(PacketHandle packet, TaskCompletionSource`1<object> source);
    private void ReadAsyncCallbackCaptureException(TaskCompletionSource`1<object> source);
    public void WriteAsyncCallback(PacketHandle packet, UInt32 sniError);
    public void WriteAsyncCallback(IntPtr key, PacketHandle packet, UInt32 sniError);
    internal void WriteSecureString(SecureString secureString);
    internal void ResetSecurePasswordsInformation();
    internal Task WaitForAccumulatedWrites();
    internal void WriteByte(byte b);
    internal Task WriteByteSpan(ReadOnlySpan`1<byte> span, bool canAccumulate, TaskCompletionSource`1<object> completion);
    internal Task WriteByteArray(Byte[] b, int len, int offsetBuffer, bool canAccumulate, TaskCompletionSource`1<object> completion);
    private Task WriteBytes(ReadOnlySpan`1<byte> b, int len, int offsetBuffer, bool canAccumulate, TaskCompletionSource`1<object> completion, Byte[] array);
    private void WriteBytesSetupContinuation(Byte[] array, int len, TaskCompletionSource`1<object> completion, int offset, Task packetTask);
    internal Task WritePacket(byte flushMode, bool canAccumulate);
    private void CancelWritePacket();
    private Task SNIWritePacket(PacketHandle packet, UInt32& sniError, bool canAccumulate, bool callerHasConnectionLock, bool asyncClose);
    internal abstract virtual bool IsValidPacket(PacketHandle packetPointer);
    internal abstract virtual UInt32 WritePacket(PacketHandle packet, bool sync);
    internal void SendAttention(bool mustTakeWriteLock, bool asyncClose);
    internal abstract virtual PacketHandle CreateAndSetAttentionPacket();
    internal abstract virtual void SetPacketData(PacketHandle packet, Byte[] buffer, int bytesUsed);
    private Task WriteSni(bool canAccumulate);
    private void SniReadStatisticsAndTracing();
    private void SniWriteStatisticsAndTracing();
    [ConditionalAttribute("DEBUG")]
private void AssertValidState();
    internal bool get_HasErrorOrWarning();
    internal void AddError(SqlError error);
    internal int get_ErrorCount();
    internal void AddWarning(SqlError error);
    internal int get_WarningCount();
    protected abstract virtual PacketHandle get_EmptyReadPacket();
    internal int get_PreAttentionErrorCount();
    internal int get_PreAttentionWarningCount();
    internal SqlErrorCollection GetFullErrorAndWarningCollection(Boolean& broken);
    private void AddErrorsToCollection(SqlErrorCollection inCollection, SqlErrorCollection& collectionToAddTo, Boolean& broken);
    internal void StoreErrorAndWarningForAttention();
    internal void RestoreErrorAndWarningAfterAttention();
    internal void CheckThrowSNIException();
    [ConditionalAttribute("DEBUG")]
internal void AssertStateIsClean();
    internal void CloneCleanupAltMetaDataSetArray();
    [CompilerGeneratedAttribute]
private bool <DisposeCounters>b__135_0();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <ReadAsyncCallback>b__224_0(object state);
}
internal class Microsoft.Data.SqlClient.TdsParserStateObjectFactory : object {
    public static TdsParserStateObjectFactory Singleton;
    private static string UseManagedNetworkingOnWindows;
    private static bool shouldUseManagedSNI;
    public static bool UseManagedSNI { get; }
    public EncryptionOptions EncryptionOptions { get; }
    public UInt32 SNIStatus { get; }
    public bool ClientOSEncryptionSupport { get; }
    private static TdsParserStateObjectFactory();
    public static bool get_UseManagedSNI();
    public EncryptionOptions get_EncryptionOptions();
    public UInt32 get_SNIStatus();
    public bool get_ClientOSEncryptionSupport();
    public TdsParserStateObject CreateTdsParserStateObject(TdsParser parser);
    internal TdsParserStateObject CreateSessionObject(TdsParser tdsParser, TdsParserStateObject _pMarsPhysicalConObj, bool v);
}
internal class Microsoft.Data.SqlClient.TdsParserStateObjectNative : TdsParserStateObject {
    private SNIHandle _sessionHandle;
    private SNIPacket _sniPacket;
    internal SNIPacket _sniAsyncAttnPacket;
    private WritePacketCache _writePacketCache;
    private GCHandle _gcHandle;
    private Dictionary`2<IntPtr, SNIPacket> _pendingWritePackets;
    internal SNIHandle Handle { get; }
    internal UInt32 Status { get; }
    internal SessionHandle SessionHandle { get; }
    protected PacketHandle EmptyReadPacket { get; }
    public TdsParserStateObjectNative(TdsParser parser);
    internal TdsParserStateObjectNative(TdsParser parser, TdsParserStateObject physicalConnection, bool async);
    internal SNIHandle get_Handle();
    internal virtual UInt32 get_Status();
    internal virtual SessionHandle get_SessionHandle();
    protected virtual void CreateSessionHandle(TdsParserStateObject physicalConnection, bool async);
    internal virtual void AssignPendingDNSInfo(string userProtocol, string DNSCacheKey, SQLDNSInfo& pendingDNSInfo);
    private ConsumerInfo CreateConsumerInfo(bool async);
    internal virtual void CreatePhysicalSNIHandle(string serverName, TimeoutTimer timeout, Byte[]& instanceName, Byte[][]& spnBuffer, bool flushCache, bool async, bool fParallel, SqlConnectionIPAddressPreference ipPreference, string cachedFQDN, SQLDNSInfo& pendingDNSInfo, string serverSPN, bool isIntegratedSecurity, bool tlsFirst, string hostNameInCertificate, string serverCertificateFilename);
    protected virtual UInt32 SNIPacketGetData(PacketHandle packet, Byte[] _inBuff, UInt32& dataSize);
    protected virtual bool CheckPacket(PacketHandle packet, TaskCompletionSource`1<object> source);
    public void ReadAsyncCallback(IntPtr key, IntPtr packet, UInt32 error);
    public void WriteAsyncCallback(IntPtr key, IntPtr packet, UInt32 sniError);
    protected virtual void RemovePacketFromPendingList(PacketHandle ptr);
    internal virtual void Dispose();
    protected virtual void FreeGcHandle(int remaining, bool release);
    internal virtual bool IsFailedHandle();
    internal virtual PacketHandle ReadSyncOverAsync(int timeoutRemaining, UInt32& error);
    protected virtual PacketHandle get_EmptyReadPacket();
    internal virtual bool IsPacketEmpty(PacketHandle readPacket);
    internal virtual void ReleasePacket(PacketHandle syncReadPacket);
    internal virtual UInt32 CheckConnection();
    internal virtual PacketHandle ReadAsync(SessionHandle handle, UInt32& error);
    internal virtual PacketHandle CreateAndSetAttentionPacket();
    internal virtual UInt32 WritePacket(PacketHandle packet, bool sync);
    internal virtual PacketHandle AddPacketToPendingList(PacketHandle packetToAdd);
    internal virtual bool IsValidPacket(PacketHandle packetPointer);
    internal virtual PacketHandle GetResetWritePacket(int dataSize);
    internal virtual void ClearAllWritePackets();
    internal virtual void SetPacketData(PacketHandle packet, Byte[] buffer, int bytesUsed);
    internal virtual UInt32 SniGetConnectionId(Guid& clientConnectionId);
    internal virtual UInt32 DisableSsl();
    internal virtual UInt32 EnableMars(UInt32& info);
    internal virtual UInt32 EnableSsl(UInt32& info, bool tlsFirst, string serverCertificateFilename);
    internal virtual UInt32 SetConnectionBufferSize(UInt32& unsignedPacketSize);
    internal virtual UInt32 GenerateSspiClientContext(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength, Byte[][] _sniSpnBuffer);
    internal virtual UInt32 WaitForSSLHandShakeToComplete(Int32& protocolVersion);
    internal virtual void DisposePacketCache();
}
internal class Microsoft.Data.SqlClient.TdsParserStaticMethods : object {
    private static int NoProcessId;
    private static int s_currentProcessId;
    private static Byte[] s_nicAddress;
    private static TdsParserStaticMethods();
    internal static void AliasRegistryLookup(String& host, String& protocol);
    internal static Byte[] ObfuscatePassword(string password);
    internal static Byte[] ObfuscatePassword(Byte[] password);
    internal static int GetCurrentProcessIdForTdsLoginOnly();
    internal static int GetCurrentThreadIdForTdsLoginOnly();
    internal static Byte[] GetNetworkPhysicalAddressForTdsLoginOnly();
    internal static int GetTimeoutMilliseconds(long timeoutTime);
    internal static long GetTimeout(long timeoutMilliseconds);
    internal static long GetTimeoutSeconds(int timeout);
    internal static bool TimeoutHasExpired(long timeoutTime);
    internal static int NullAwareStringLength(string str);
    internal static int GetRemainingTimeout(int timeout, long start);
}
internal class Microsoft.Data.SqlClient.TdsRecordBufferSetter : SmiRecordBuffer {
    private TdsValueSetter[] _fieldSetters;
    private TdsParserStateObject _stateObj;
    private SmiMetaData _metaData;
    internal bool CanGet { get; }
    internal bool CanSet { get; }
    internal TdsRecordBufferSetter(TdsParserStateObject stateObj, SmiMetaData md);
    internal virtual bool get_CanGet();
    internal virtual bool get_CanSet();
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
    public virtual void SetTimeSpan(SmiEventSink sink, int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(SmiEventSink sink, int ordinal, DateTimeOffset value);
    public virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
    internal virtual void NewElement(SmiEventSink sink);
    internal virtual void EndElements(SmiEventSink sink);
    [ConditionalAttribute("DEBUG")]
private void CheckWritingToColumn(int ordinal);
    [ConditionalAttribute("DEBUG")]
private void SkipPossibleDefaultedColumns(int targetColumn);
    [ConditionalAttribute("DEBUG")]
internal void CheckSettingColumn(int ordinal);
}
internal class Microsoft.Data.SqlClient.TdsValueSetter : object {
    private TdsParserStateObject _stateObj;
    private SmiMetaData _metaData;
    private bool _isPlp;
    private bool _plpUnknownSent;
    private Encoder _encoder;
    private SmiMetaData _variantType;
    internal TdsValueSetter(TdsParserStateObject stateObj, SmiMetaData md);
    internal void SetDBNull();
    internal void SetBoolean(bool value);
    internal void SetByte(byte value);
    internal int SetBytes(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    private void SetBytesNoOffsetHandling(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal void SetBytesLength(long length);
    internal int SetChars(long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal void SetCharsLength(long length);
    internal void SetString(string value, int offset, int length);
    internal void SetInt16(short value);
    internal void SetInt32(int value);
    internal void SetInt64(long value);
    internal void SetSingle(float value);
    internal void SetDouble(double value);
    internal void SetSqlDecimal(SqlDecimal value);
    internal void SetDateTime(DateTime value);
    internal void SetGuid(Guid value);
    internal void SetTimeSpan(TimeSpan value);
    internal void SetDateTimeOffset(DateTimeOffset value);
    internal void SetVariantType(SmiMetaData value);
    [ConditionalAttribute("DEBUG")]
private void CheckSettingOffset(long offset);
}
internal class Microsoft.Data.SqlClient.TextDataFeed : DataFeed {
    private static UnicodeEncoding s_defaultEncoding;
    internal TextReader _source;
    internal static UnicodeEncoding DefaultEncoding { get; }
    internal TextDataFeed(TextReader source);
    internal static UnicodeEncoding get_DefaultEncoding();
}
internal enum Microsoft.Data.SqlClient.TransactionState : Enum {
    public int value__;
    public static TransactionState Pending;
    public static TransactionState Active;
    public static TransactionState Aborted;
    public static TransactionState Committed;
    public static TransactionState Unknown;
}
internal enum Microsoft.Data.SqlClient.TransactionType : Enum {
    public int value__;
    public static TransactionType LocalFromTSQL;
    public static TransactionType LocalFromAPI;
    public static TransactionType Delegated;
    public static TransactionType Distributed;
    public static TransactionType Context;
}
internal enum Microsoft.Data.SqlClient.TransparentNetworkResolutionState : Enum {
    public int value__;
    public static TransparentNetworkResolutionState DisabledMode;
    public static TransparentNetworkResolutionState SequentialMode;
    public static TransparentNetworkResolutionState ParallelMode;
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
internal class Microsoft.Data.SqlClient.TryEventScope : ValueType {
    private long _scopeId;
    public TryEventScope(long scopeID);
    public void Dispose();
    public static TryEventScope Create(string message, T0 args0);
    public static TryEventScope Create(string message, T0 args0, T1 args1);
    public static TryEventScope Create(string className, string memberName);
    public static TryEventScope Create(long scopeId);
}
[IsReadOnlyAttribute]
internal class Microsoft.Data.SqlClient.TrySNIEventScope : ValueType {
    private long _scopeId;
    public TrySNIEventScope(long scopeID);
    public sealed virtual void Dispose();
    public static TrySNIEventScope Create(string className, string memberName);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
internal class Microsoft.Data.SqlClient.ValueSqlStatisticsScope : ValueType {
    private SqlStatistics _statistics;
    public ValueSqlStatisticsScope(SqlStatistics statistics);
    public void Dispose();
}
internal abstract class Microsoft.Data.SqlClient.VirtualizationBasedSecurityEnclaveProviderBase : EnclaveProviderBase {
    private static MemoryCache rootSigningCertificateCache;
    private static int DiffieHellmanKeySize;
    private static int VsmHGSProtocolId;
    private static EnclaveIdentity ExpectedPolicy;
    private static VirtualizationBasedSecurityEnclaveProviderBase();
    internal virtual void GetEnclaveSession(EnclaveSessionParameters enclaveSessionParameters, bool generateCustomData, bool isRetry, SqlEnclaveSession& sqlEnclaveSession, Int64& counter, Byte[]& customData, Int32& customDataLength);
    internal virtual SqlEnclaveAttestationParameters GetAttestationParameters(string attestationUrl, Byte[] customData, int customDataLength);
    internal virtual void CreateEnclaveSession(Byte[] attestationInfo, ECDiffieHellman clientDHKey, EnclaveSessionParameters enclaveSessionParameters, Byte[] customData, int customDataLength, SqlEnclaveSession& sqlEnclaveSession, Int64& counter);
    internal virtual void InvalidateEnclaveSession(EnclaveSessionParameters enclaveSessionParameters, SqlEnclaveSession enclaveSessionToInvalidate);
    private void VerifyAttestationInfo(string attestationUrl, HealthReport healthReport, EnclaveReportPackage enclaveReportPackage);
    protected abstract virtual Byte[] MakeRequest(string url);
    private X509Certificate2Collection GetSigningCertificate(string attestationUrl, bool forceUpdate);
    protected abstract virtual string GetAttestationUrl(string attestationUrl);
    private bool AnyCertificatesExpired(X509Certificate2Collection certificates);
    private bool VerifyHealthReportAgainstRootCertificate(X509Certificate2Collection signingCerts, X509Certificate2 healthReportCert, X509ChainStatusFlags& chainStatus);
    private void VerifyEnclaveReportSignature(EnclaveReportPackage enclaveReportPackage, X509Certificate2 healthReportCert);
    private void VerifyEnclavePolicy(EnclaveReportPackage enclaveReportPackage);
    private void VerifyEnclavePolicyProperty(string property, Byte[] actual, Byte[] expected);
    private void VerifyEnclavePolicyProperty(string property, UInt32 actual, UInt32 expected);
    private Byte[] GetSharedSecret(EnclavePublicKey enclavePublicKey, EnclaveDiffieHellmanInfo enclaveDHInfo, ECDiffieHellman clientDHKey);
}
internal class Microsoft.Data.SqlClient.WritePacketCache : object {
    private bool _disposed;
    private Stack`1<SNIPacket> _packets;
    public SNIPacket Take(SNIHandle sniHandle);
    public void Add(SNIPacket packet);
    public void Clear();
    public sealed virtual void Dispose();
}
internal class Microsoft.Data.SqlClient.XmlDataFeed : DataFeed {
    internal XmlReader _source;
    internal XmlDataFeed(XmlReader source);
}
public class Microsoft.Data.SqlTypes.SqlFileStream : Stream {
    private static int _objectTypeCount;
    [CompilerGeneratedAttribute]
private int <ObjectID>k__BackingField;
    internal static int DefaultBufferSize;
    private static ushort IoControlCodeFunctionCode;
    private static int ERROR_MR_MID_NOT_FOUND;
    private static ushort FILE_DEVICE_FILE_SYSTEM;
    private FileStream _m_fs;
    private string _m_path;
    private Byte[] _m_txn;
    private bool _m_disposed;
    private static Byte[] s_eaNameString;
    internal int ObjectID { get; }
    public string Name { get; private set; }
    public Byte[] TransactionContext { get; private set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public SqlFileStream(string path, Byte[] transactionContext, FileAccess access);
    public SqlFileStream(string path, Byte[] transactionContext, FileAccess access, FileOptions options, long allocationSize);
    private static SqlFileStream();
    [CompilerGeneratedAttribute]
internal int get_ObjectID();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public string get_Name();
    private void set_Name(string value);
    public Byte[] get_TransactionContext();
    private void set_TransactionContext(Byte[] value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual void Flush();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    [ConditionalAttribute("DEBUG")]
private static void AssertPathFormat(string path);
    private static string GetFullPathInternal(string path);
    private void OpenSqlFileStream(string sPath, Byte[] transactionContext, FileAccess access, FileOptions options, long allocationSize);
    private static string InitializeNtPath(string path);
}
internal class Microsoft.Data.SqlTypes.SQLResource : object {
    internal static string NullString;
    internal static string MessageString;
    internal static string ArithOverflowMessage;
    internal static string DivideByZeroMessage;
    internal static string NullValueMessage;
    internal static string TruncationMessage;
    internal static string DateTimeOverflowMessage;
    internal static string ConcatDiffCollationMessage;
    internal static string CompareDiffCollationMessage;
    internal static string InvalidFlagMessage;
    internal static string NumeToDecOverflowMessage;
    internal static string ConversionOverflowMessage;
    internal static string InvalidDateTimeMessage;
    internal static string TimeZoneSpecifiedMessage;
    internal static string InvalidArraySizeMessage;
    internal static string InvalidPrecScaleMessage;
    internal static string FormatMessage;
    internal static string NotFilledMessage;
    internal static string AlreadyFilledMessage;
    internal static string ClosedXmlReaderMessage;
    private static SQLResource();
    internal static string InvalidOpStreamClosed(string method);
    internal static string InvalidOpStreamNonWritable(string method);
    internal static string InvalidOpStreamNonReadable(string method);
    internal static string InvalidOpStreamNonSeekable(string method);
}
internal static class Microsoft.Data.SqlTypes.SqlTypeWorkarounds : object {
    private static XmlReaderSettings s_defaultXmlReaderSettings;
    private static XmlReaderSettings s_defaultXmlReaderSettingsCloseInput;
    private static XmlReaderSettings s_defaultXmlReaderSettingsAsyncCloseInput;
    internal static SqlCompareOptions SqlStringValidSqlCompareOptionMask;
    private static SqlTypeWorkarounds();
    internal static XmlReader SqlXmlCreateSqlXmlReader(Stream stream, bool closeInput, bool async);
    internal static XmlReader SqlXmlCreateSqlXmlReader(TextReader textReader, bool closeInput, bool async);
    internal static DateTime SqlDateTimeToDateTime(int daypart, int timepart);
    private static Exception ThrowOverflowException();
    internal static SqlMoney SqlMoneyCtor(long value, int ignored);
    internal static long SqlMoneyToSqlInternalRepresentation(SqlMoney money);
    internal static void SqlDecimalExtractData(SqlDecimal d, UInt32& data1, UInt32& data2, UInt32& data3, UInt32& data4);
    internal static SqlBinary SqlBinaryCtor(Byte[] value, bool ignored);
}
internal class Microsoft.Data.StringsHelper : Strings {
    private static StringsHelper s_loader;
    private ResourceManager _resources;
    private static StringsHelper GetLoader();
    public static string GetResourceString(string res);
    public static string GetString(string res, Object[] args);
    private static bool UsingResourceKeys();
    public static string Format(string resourceFormat, Object[] args);
    public static string Format(string resourceFormat, object p1);
    public static string Format(string resourceFormat, object p1, object p2);
    public static string Format(string resourceFormat, object p1, object p2, object p3);
}
internal static class Microsoft.Data.Win32NativeMethods : object {
    internal static bool IsTokenRestrictedWrapper(IntPtr token);
}
internal class Microsoft.Win32.SafeHandles.SafeLibraryHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
internal class SqlDependencyProcessDispatcher : MarshalByRefObject {
    private static SqlDependencyProcessDispatcher s_staticInstance;
    private Dictionary`2<SqlConnectionContainerHashHelper, SqlConnectionContainer> _connectionContainers;
    private Dictionary`2<string, SqlDependencyPerAppDomainDispatcher> _sqlDependencyPerAppDomainDispatchers;
    private static int s_objectTypeCount;
    [CompilerGeneratedAttribute]
private int <ObjectID>k__BackingField;
    internal int ObjectID { get; }
    internal static SqlDependencyProcessDispatcher SingletonProcessDispatcher { get; }
    private SqlDependencyProcessDispatcher(object dummyVariable);
    private static SqlDependencyProcessDispatcher();
    [CompilerGeneratedAttribute]
internal int get_ObjectID();
    internal static SqlDependencyProcessDispatcher get_SingletonProcessDispatcher();
    private static SqlConnectionContainerHashHelper GetHashHelper(string connectionString, SqlConnectionStringBuilder& connectionStringBuilder, DbConnectionPoolIdentity& identity, String& user, string queue);
    [ObsoleteAttribute("InitializeLifetimeService() is not supported after .Net5.0 and throws PlatformNotSupportedException.")]
public virtual object InitializeLifetimeService();
    private void Invalidate(string server, SqlNotification sqlNotification);
    internal void QueueAppDomainUnloading(string appDomainKey);
    private void AppDomainUnloading(object state);
    internal bool StartWithDefault(string connectionString, String& server, DbConnectionPoolIdentity& identity, String& user, String& database, String& service, string appDomainKey, SqlDependencyPerAppDomainDispatcher dispatcher, Boolean& errorOccurred, Boolean& appDomainStart);
    internal bool Start(string connectionString, string queue, string appDomainKey, SqlDependencyPerAppDomainDispatcher dispatcher);
    private bool Start(string connectionString, String& server, DbConnectionPoolIdentity& identity, String& user, String& database, String& queueService, string appDomainKey, SqlDependencyPerAppDomainDispatcher dispatcher, Boolean& errorOccurred, Boolean& appDomainStart, bool useDefaults);
    internal bool Stop(string connectionString, String& server, DbConnectionPoolIdentity& identity, String& user, String& database, String& queueService, string appDomainKey, Boolean& appDomainStop);
}
internal class System.Collections.Generic.BidirectionalDictionary`2 : object {
    private Dictionary`2<T1, T2> _forward;
    private Dictionary`2<T2, T1> _backward;
    public int Count { get; }
    public BidirectionalDictionary`2(int capacity);
    public int get_Count();
    public void Add(T1 item1, T2 item2);
    public bool TryGetForward(T1 item1, T2& item2);
    public bool TryGetBackward(T2 item2, T1& item1);
    public Enumerator<T1, T2> GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<T1, T2>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<T1,T2>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.IO.PathInternal : object {
    internal static char DirectorySeparatorChar;
    internal static char AltDirectorySeparatorChar;
    internal static char VolumeSeparatorChar;
    internal static char PathSeparator;
    internal static string DirectorySeparatorCharAsString;
    internal static string ExtendedPathPrefix;
    internal static string UncPathPrefix;
    internal static string UncExtendedPrefixToInsert;
    internal static string UncExtendedPathPrefix;
    internal static string DevicePathPrefix;
    internal static string ParentDirectoryPrefix;
    internal static int MaxShortPath;
    internal static int MaxShortDirectoryPath;
    internal static int DevicePrefixLength;
    internal static int UncPrefixLength;
    internal static int UncExtendedPrefixLength;
    internal static bool IsValidDriveChar(char value);
    internal static bool EndsWithPeriodOrSpace(string path);
    internal static string EnsureExtendedPrefixIfNeeded(string path);
    internal static string EnsureExtendedPrefixOverMaxPath(string path);
    internal static string EnsureExtendedPrefix(string path);
    internal static bool IsDevice(ReadOnlySpan`1<char> path);
    internal static bool IsDeviceUNC(ReadOnlySpan`1<char> path);
    internal static bool IsExtended(ReadOnlySpan`1<char> path);
    internal static bool HasWildCardCharacters(ReadOnlySpan`1<char> path);
    internal static int GetRootLength(ReadOnlySpan`1<char> path);
    internal static bool IsPartiallyQualified(ReadOnlySpan`1<char> path);
    internal static bool IsDirectorySeparator(char c);
    internal static string NormalizeDirectorySeparators(string path);
    internal static bool IsEffectivelyEmpty(ReadOnlySpan`1<char> path);
}
internal static class System.Net.ContextFlagsAdapterPal : object {
    private static ContextFlagMapping[] s_contextFlagMapping;
    private static ContextFlagsAdapterPal();
    internal static ContextFlagsPal GetContextFlagsPalFromInterop(ContextFlags win32Flags);
    internal static ContextFlags GetInteropFromContextFlagsPal(ContextFlagsPal flags);
}
[FlagsAttribute]
internal enum System.Net.ContextFlagsPal : Enum {
    public int value__;
    public static ContextFlagsPal None;
    public static ContextFlagsPal Delegate;
    public static ContextFlagsPal MutualAuth;
    public static ContextFlagsPal ReplayDetect;
    public static ContextFlagsPal SequenceDetect;
    public static ContextFlagsPal Confidentiality;
    public static ContextFlagsPal UseSessionKey;
    public static ContextFlagsPal AllocateMemory;
    public static ContextFlagsPal Connection;
    public static ContextFlagsPal InitExtendedError;
    public static ContextFlagsPal AcceptExtendedError;
    public static ContextFlagsPal InitStream;
    public static ContextFlagsPal AcceptStream;
    public static ContextFlagsPal InitIntegrity;
    public static ContextFlagsPal AcceptIntegrity;
    public static ContextFlagsPal InitManualCredValidation;
    public static ContextFlagsPal InitUseSuppliedCreds;
    public static ContextFlagsPal InitIdentify;
    public static ContextFlagsPal AcceptIdentify;
    public static ContextFlagsPal ProxyBindings;
    public static ContextFlagsPal AllowMissingBindings;
    public static ContextFlagsPal UnverifiedTargetName;
}
internal static class System.Net.DebugThreadTracking : object {
    [ThreadStaticAttribute]
private static Stack`1<ThreadKinds> t_threadKindStack;
    private static Stack`1<ThreadKinds> ThreadKindStack { get; }
    internal static ThreadKinds CurrentThreadKind { get; }
    private static Stack`1<ThreadKinds> get_ThreadKindStack();
    internal static ThreadKinds get_CurrentThreadKind();
    internal static IDisposable SetThreadKind(ThreadKinds kind);
    internal static void SetThreadSource(ThreadKinds source);
}
internal static class System.Net.GlobalSSPI : object {
    internal static SSPIInterface SSPIAuth;
    internal static SSPIInterface SSPISecureChannel;
    private static GlobalSSPI();
}
internal class System.Net.InternalException : Exception {
    public InternalException(string message);
    public InternalException(string message, Exception innerException);
}
internal class System.Net.NegotiationInfoClass : object {
    internal string AuthenticationPackage;
    internal static string NTLM;
    internal static string Kerberos;
    internal static string Negotiate;
    internal static string Basic;
    internal NegotiationInfoClass(SafeHandle safeHandle, int negotiationState);
}
internal class System.Net.NetEventSource : EventSource {
    public static NetEventSource Log;
    private static string MissingMember;
    private static string NullInstance;
    private static string StaticMethodObject;
    private static string NoParameters;
    private static int MaxDumpSize;
    private static int EnterEventId;
    private static int ExitEventId;
    private static int AssociateEventId;
    private static int InfoEventId;
    private static int ErrorEventId;
    private static int CriticalFailureEventId;
    private static int DumpArrayEventId;
    private static int EnumerateSecurityPackagesId;
    private static int SspiPackageNotFoundId;
    private static int AcquireDefaultCredentialId;
    private static int AcquireCredentialsHandleId;
    private static int InitializeSecurityContextId;
    private static int SecurityContextInputBufferId;
    private static int SecurityContextInputBuffersId;
    private static int AcceptSecurityContextId;
    private static int OperationReturnedSomethingId;
    private static int NextAvailableEventId;
    public static bool IsEnabled { get; }
    private static NetEventSource();
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, object arg2, string memberName);
    [EventAttribute("1")]
private void Enter(string thisOrContextObject, string memberName, string parameters);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, object arg1, string memberName);
    [EventAttribute("2")]
private void Exit(string thisOrContextObject, string memberName, string result);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, object message, string memberName);
    [EventAttribute("4")]
private void Info(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, object message, string memberName);
    [EventAttribute("5")]
private void ErrorMessage(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, object message, string memberName);
    [EventAttribute("6")]
private void CriticalFailure(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, int offset, int count, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, IntPtr bufferPtr, int count, string memberName);
    [EventAttribute("7")]
private void DumpBuffer(string thisOrContextObject, string memberName, Byte[] buffer);
    [NonEventAttribute]
public static void Associate(object first, object second, string memberName);
    [NonEventAttribute]
public static void Associate(object thisOrContextObject, object first, object second, string memberName);
    [EventAttribute("3")]
private void Associate(string thisOrContextObject, string memberName, string first, string second);
    [ConditionalAttribute("DEBUG_NETEVENTSOURCE_MISUSE")]
private static void DebugValidateArg(object arg);
    [ConditionalAttribute("DEBUG_NETEVENTSOURCE_MISUSE")]
private static void DebugValidateArg(FormattableString arg);
    public static bool get_IsEnabled();
    [NonEventAttribute]
public static string IdOf(object value);
    [NonEventAttribute]
public static int GetHashCode(object value);
    [NonEventAttribute]
public static object Format(object value);
    [NonEventAttribute]
private static string Format(FormattableString s);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, string arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, Byte[] arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, int arg3, int arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, string arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, int arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, int arg4);
    [EventAttribute("8")]
public void EnumerateSecurityPackages(string securityPackage);
    [EventAttribute("9")]
public void SspiPackageNotFound(string packageName);
    [EventAttribute("10")]
public void AcquireDefaultCredential(string packageName, CredentialUse intent);
    [NonEventAttribute]
public void AcquireCredentialsHandle(string packageName, CredentialUse intent, object authdata);
    [EventAttribute("11")]
public void AcquireCredentialsHandle(string packageName, CredentialUse intent, string authdata);
    [NonEventAttribute]
public void InitializeSecurityContext(SafeFreeCredentials credential, SafeDeleteContext context, string targetName, ContextFlags inFlags);
    [EventAttribute("12")]
private void InitializeSecurityContext(string credential, string context, string targetName, ContextFlags inFlags);
    [NonEventAttribute]
public void AcceptSecurityContext(SafeFreeCredentials credential, SafeDeleteContext context, ContextFlags inFlags);
    [EventAttribute("15")]
private void AcceptSecurityContext(string credential, string context, ContextFlags inFlags);
    [EventAttribute("16")]
public void OperationReturnedSomething(string operation, SECURITY_STATUS errorCode);
    [EventAttribute("13")]
public void SecurityContextInputBuffer(string context, int inputBufferSize, int outputBufferSize, SECURITY_STATUS errorCode);
    [EventAttribute("14")]
public void SecurityContextInputBuffers(string context, int inputBuffersSize, int outputBufferSize, SECURITY_STATUS errorCode);
}
internal class System.Net.SecPkgContext_Bindings : ValueType {
    internal int BindingsLength;
    internal IntPtr Bindings;
}
internal class System.Net.SecPkgContext_ConnectionInfo : object {
    public int Protocol;
    public int DataCipherAlg;
    public int DataKeySize;
    public int DataHashAlg;
    public int DataHashKeySize;
    public int KeyExchangeAlg;
    public int KeyExchKeySize;
    internal SecPkgContext_ConnectionInfo(Byte[] nativeBuffer);
}
internal class System.Net.SecPkgContext_NegotiationInfoW : ValueType {
    internal IntPtr PackageInfo;
    internal UInt32 NegotiationState;
}
internal class System.Net.SecPkgContext_Sizes : object {
    public int cbMaxToken;
    public int cbMaxSignature;
    public int cbBlockSize;
    public int cbSecurityTrailer;
    public static int SizeOf;
    internal SecPkgContext_Sizes(Byte[] memory);
    private static SecPkgContext_Sizes();
}
internal class System.Net.SecPkgContext_StreamSizes : object {
    public int cbHeader;
    public int cbTrailer;
    public int cbMaximumMessage;
    public int cBuffers;
    public int cbBlockSize;
    public static int SizeOf;
    internal SecPkgContext_StreamSizes(Byte[] memory);
    private static SecPkgContext_StreamSizes();
}
internal static class System.Net.Security.NegotiateStreamPal : object {
    internal static int QueryMaxTokenSize(string package);
    internal static SafeFreeCredentials AcquireDefaultCredential(string package, bool isServer);
    internal static SafeFreeCredentials AcquireCredentialsHandle(string package, bool isServer, NetworkCredential credential);
    internal static string QueryContextClientSpecifiedSpn(SafeDeleteContext securityContext);
    internal static string QueryContextAuthenticationPackage(SafeDeleteContext securityContext);
    internal static SecurityStatusPal InitializeSecurityContext(SafeFreeCredentials credentialsHandle, SafeDeleteContext& securityContext, String[] spn, ContextFlagsPal requestedContextFlags, SecurityBuffer[] inSecurityBufferArray, SecurityBuffer outSecurityBuffer, ContextFlagsPal& contextFlags);
    internal static SecurityStatusPal CompleteAuthToken(SafeDeleteContext& securityContext, SecurityBuffer[] inSecurityBufferArray);
    internal static SecurityStatusPal AcceptSecurityContext(SafeFreeCredentials credentialsHandle, SafeDeleteContext& securityContext, ContextFlagsPal requestedContextFlags, SecurityBuffer[] inSecurityBufferArray, SecurityBuffer outSecurityBuffer, ContextFlagsPal& contextFlags);
    internal static Win32Exception CreateExceptionFromError(SecurityStatusPal statusCode);
    internal static int VerifySignature(SafeDeleteContext securityContext, Byte[] buffer, int offset, int count);
    internal static int MakeSignature(SafeDeleteContext securityContext, Byte[] buffer, int offset, int count, Byte[]& output);
}
internal class System.Net.Security.SafeCredentialReference : CriticalHandleMinusOneIsInvalid {
    internal SafeFreeCredentials Target;
    private SafeCredentialReference(SafeFreeCredentials target);
    internal static SafeCredentialReference CreateReference(SafeFreeCredentials target);
    protected virtual bool ReleaseHandle();
}
internal abstract class System.Net.Security.SafeDeleteContext : SafeHandle {
    internal CredHandle _handle;
    private static string dummyStr;
    private static Byte[] s_dummyBytes;
    private static IdnMapping s_idnMapping;
    protected SafeFreeCredentials _EffectiveCredential;
    public bool IsInvalid { get; }
    private static SafeDeleteContext();
    public virtual bool get_IsInvalid();
    public virtual string ToString();
    internal static int InitializeSecurityContext(SafeFreeCredentials& inCredentials, SafeDeleteContext& refContext, string targetName, ContextFlags inFlags, Endianness endianness, SecurityBuffer inSecBuffer, SecurityBuffer[] inSecBuffers, SecurityBuffer outSecBuffer, ContextFlags& outFlags);
    private static int MustRunInitializeSecurityContext(SafeFreeCredentials& inCredentials, Void* inContextPtr, Byte* targetName, ContextFlags inFlags, Endianness endianness, SecBufferDesc* inputBuffer, SafeDeleteContext outContext, SecBufferDesc& outputBuffer, ContextFlags& attributes, SafeFreeContextBuffer handleTemplate);
    internal static int AcceptSecurityContext(SafeFreeCredentials& inCredentials, SafeDeleteContext& refContext, ContextFlags inFlags, Endianness endianness, SecurityBuffer inSecBuffer, SecurityBuffer[] inSecBuffers, SecurityBuffer outSecBuffer, ContextFlags& outFlags);
    private static int MustRunAcceptSecurityContext_SECURITY(SafeFreeCredentials& inCredentials, Void* inContextPtr, SecBufferDesc* inputBuffer, ContextFlags inFlags, Endianness endianness, SafeDeleteContext outContext, SecBufferDesc& outputBuffer, ContextFlags& outFlags, SafeFreeContextBuffer handleTemplate);
    internal static int CompleteAuthToken(SafeDeleteContext& refContext, SecurityBuffer[] inSecBuffers);
    internal static int ApplyControlToken(SafeDeleteContext& refContext, SecurityBuffer[] inSecBuffers);
}
internal class System.Net.Security.SafeDeleteContext_SECURITY : SafeDeleteContext {
    protected virtual bool ReleaseHandle();
}
internal class System.Net.Security.SafeFreeCertContext : SafeHandleZeroOrMinusOneIsInvalid {
    private static UInt32 CRYPT_ACQUIRE_SILENT_FLAG;
    internal void Set(IntPtr value);
    protected virtual bool ReleaseHandle();
}
internal abstract class System.Net.Security.SafeFreeContextBuffer : SafeHandleZeroOrMinusOneIsInvalid {
    internal void Set(IntPtr value);
    internal static int EnumeratePackages(Int32& pkgnum, SafeFreeContextBuffer& pkgArray);
    internal static SafeFreeContextBuffer CreateEmptyHandle();
    public static int QueryContextAttributes(SafeDeleteContext phContext, ContextAttribute contextAttribute, Byte* buffer, SafeHandle refHandle);
    public static int SetContextAttributes(SafeDeleteContext phContext, ContextAttribute contextAttribute, Byte[] buffer);
}
internal class System.Net.Security.SafeFreeContextBuffer_SECURITY : SafeFreeContextBuffer {
    protected virtual bool ReleaseHandle();
}
internal abstract class System.Net.Security.SafeFreeContextBufferChannelBinding : ChannelBinding {
    private int _size;
    public int Size { get; }
    public bool IsInvalid { get; }
    public virtual int get_Size();
    public virtual bool get_IsInvalid();
    internal void Set(IntPtr value);
    internal static SafeFreeContextBufferChannelBinding CreateEmptyHandle();
    public static int QueryContextChannelBinding(SafeDeleteContext phContext, ContextAttribute contextAttribute, SecPkgContext_Bindings* buffer, SafeFreeContextBufferChannelBinding refHandle);
    public virtual string ToString();
}
internal class System.Net.Security.SafeFreeContextBufferChannelBinding_SECURITY : SafeFreeContextBufferChannelBinding {
    protected virtual bool ReleaseHandle();
}
internal class System.Net.Security.SafeFreeCredential_SECURITY : SafeFreeCredentials {
    protected virtual bool ReleaseHandle();
}
internal abstract class System.Net.Security.SafeFreeCredentials : SafeHandle {
    internal CredHandle _handle;
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    public static int AcquireDefaultCredential(string package, CredentialUse intent, SafeFreeCredentials& outCredential);
    public static int AcquireCredentialsHandle(string package, CredentialUse intent, SafeSspiAuthDataHandle& authdata, SafeFreeCredentials& outCredential);
    public static int AcquireCredentialsHandle(string package, CredentialUse intent, SCHANNEL_CRED& authdata, SafeFreeCredentials& outCredential);
}
internal class System.Net.Security.SafeSspiAuthDataHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
internal class System.Net.Security.SecurityBuffer : object {
    public int size;
    public SecurityBufferType type;
    public Byte[] token;
    public SafeHandle unmanagedToken;
    public int offset;
    public SecurityBuffer(Byte[] data, int offset, int size, SecurityBufferType tokentype);
    public SecurityBuffer(Byte[] data, SecurityBufferType tokentype);
    public SecurityBuffer(int size, SecurityBufferType tokentype);
    public SecurityBuffer(ChannelBinding binding);
}
internal enum System.Net.Security.SecurityBufferType : Enum {
    public int value__;
    public static SecurityBufferType SECBUFFER_EMPTY;
    public static SecurityBufferType SECBUFFER_DATA;
    public static SecurityBufferType SECBUFFER_TOKEN;
    public static SecurityBufferType SECBUFFER_PKG_PARAMS;
    public static SecurityBufferType SECBUFFER_MISSING;
    public static SecurityBufferType SECBUFFER_EXTRA;
    public static SecurityBufferType SECBUFFER_STREAM_TRAILER;
    public static SecurityBufferType SECBUFFER_STREAM_HEADER;
    public static SecurityBufferType SECBUFFER_PADDING;
    public static SecurityBufferType SECBUFFER_STREAM;
    public static SecurityBufferType SECBUFFER_CHANNEL_BINDINGS;
    public static SecurityBufferType SECBUFFER_TARGET_HOST;
    public static SecurityBufferType SECBUFFER_ALERT;
    public static SecurityBufferType SECBUFFER_APPLICATION_PROTOCOLS;
    public static SecurityBufferType SECBUFFER_READONLY;
    public static SecurityBufferType SECBUFFER_READONLY_WITH_CHECKSUM;
}
internal class System.Net.Security.SecurityContextTokenHandle : CriticalHandleZeroOrMinusOneIsInvalid {
    private int _disposed;
    internal IntPtr DangerousGetHandle();
    protected virtual bool ReleaseHandle();
}
internal class System.Net.SecurityPackageInfo : ValueType {
    internal int Capabilities;
    internal short Version;
    internal short RPCID;
    internal int MaxToken;
    internal IntPtr Name;
    internal IntPtr Comment;
}
internal class System.Net.SecurityPackageInfoClass : object {
    internal int Capabilities;
    internal short Version;
    internal short RPCID;
    internal int MaxToken;
    internal string Name;
    internal string Comment;
    internal SecurityPackageInfoClass(SafeHandle safeHandle, int index);
    public virtual string ToString();
}
internal static class System.Net.SecurityStatusAdapterPal : object {
    private static int StatusDictionarySize;
    private static BidirectionalDictionary`2<SECURITY_STATUS, SecurityStatusPalErrorCode> s_statusDictionary;
    private static SecurityStatusAdapterPal();
    internal static SecurityStatusPal GetSecurityStatusPalFromNativeInt(int win32SecurityStatus);
    internal static SecurityStatusPal GetSecurityStatusPalFromInterop(SECURITY_STATUS win32SecurityStatus, bool attachException);
    internal static SECURITY_STATUS GetInteropFromSecurityStatusPal(SecurityStatusPal status);
}
[IsReadOnlyAttribute]
internal class System.Net.SecurityStatusPal : ValueType {
    public SecurityStatusPalErrorCode ErrorCode;
    public Exception Exception;
    public SecurityStatusPal(SecurityStatusPalErrorCode errorCode, Exception exception);
    public virtual string ToString();
}
internal enum System.Net.SecurityStatusPalErrorCode : Enum {
    public int value__;
    public static SecurityStatusPalErrorCode NotSet;
    public static SecurityStatusPalErrorCode OK;
    public static SecurityStatusPalErrorCode ContinueNeeded;
    public static SecurityStatusPalErrorCode CompleteNeeded;
    public static SecurityStatusPalErrorCode CompAndContinue;
    public static SecurityStatusPalErrorCode ContextExpired;
    public static SecurityStatusPalErrorCode CredentialsNeeded;
    public static SecurityStatusPalErrorCode Renegotiate;
    public static SecurityStatusPalErrorCode OutOfMemory;
    public static SecurityStatusPalErrorCode InvalidHandle;
    public static SecurityStatusPalErrorCode Unsupported;
    public static SecurityStatusPalErrorCode TargetUnknown;
    public static SecurityStatusPalErrorCode InternalError;
    public static SecurityStatusPalErrorCode PackageNotFound;
    public static SecurityStatusPalErrorCode NotOwner;
    public static SecurityStatusPalErrorCode CannotInstall;
    public static SecurityStatusPalErrorCode InvalidToken;
    public static SecurityStatusPalErrorCode CannotPack;
    public static SecurityStatusPalErrorCode QopNotSupported;
    public static SecurityStatusPalErrorCode NoImpersonation;
    public static SecurityStatusPalErrorCode LogonDenied;
    public static SecurityStatusPalErrorCode UnknownCredentials;
    public static SecurityStatusPalErrorCode NoCredentials;
    public static SecurityStatusPalErrorCode MessageAltered;
    public static SecurityStatusPalErrorCode OutOfSequence;
    public static SecurityStatusPalErrorCode NoAuthenticatingAuthority;
    public static SecurityStatusPalErrorCode IncompleteMessage;
    public static SecurityStatusPalErrorCode IncompleteCredentials;
    public static SecurityStatusPalErrorCode BufferNotEnough;
    public static SecurityStatusPalErrorCode WrongPrincipal;
    public static SecurityStatusPalErrorCode TimeSkew;
    public static SecurityStatusPalErrorCode UntrustedRoot;
    public static SecurityStatusPalErrorCode IllegalMessage;
    public static SecurityStatusPalErrorCode CertUnknown;
    public static SecurityStatusPalErrorCode CertExpired;
    public static SecurityStatusPalErrorCode AlgorithmMismatch;
    public static SecurityStatusPalErrorCode SecurityQosFailed;
    public static SecurityStatusPalErrorCode SmartcardLogonRequired;
    public static SecurityStatusPalErrorCode UnsupportedPreauth;
    public static SecurityStatusPalErrorCode BadBinding;
    public static SecurityStatusPalErrorCode DowngradeDetected;
    public static SecurityStatusPalErrorCode ApplicationProtocolMismatch;
}
internal class System.Net.SSPIAuthType : object {
    private static SecurityPackageInfoClass[] modreq(System.Runtime.CompilerServices.IsVolatile) s_securityPackages;
    public SecurityPackageInfoClass[] SecurityPackages { get; public set; }
    public sealed virtual SecurityPackageInfoClass[] get_SecurityPackages();
    public sealed virtual void set_SecurityPackages(SecurityPackageInfoClass[] value);
    public sealed virtual int EnumerateSecurityPackages(Int32& pkgnum, SafeFreeContextBuffer& pkgArray);
    public sealed virtual int AcquireCredentialsHandle(string moduleName, CredentialUse usage, SafeSspiAuthDataHandle& authdata, SafeFreeCredentials& outCredential);
    public sealed virtual int AcquireDefaultCredential(string moduleName, CredentialUse usage, SafeFreeCredentials& outCredential);
    public sealed virtual int AcquireCredentialsHandle(string moduleName, CredentialUse usage, SCHANNEL_CRED& authdata, SafeFreeCredentials& outCredential);
    public sealed virtual int AcceptSecurityContext(SafeFreeCredentials credential, SafeDeleteContext& context, SecurityBuffer[] inputBuffers, ContextFlags inFlags, Endianness endianness, SecurityBuffer outputBuffer, ContextFlags& outFlags);
    public sealed virtual int InitializeSecurityContext(SafeFreeCredentials& credential, SafeDeleteContext& context, string targetName, ContextFlags inFlags, Endianness endianness, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, ContextFlags& outFlags);
    public sealed virtual int InitializeSecurityContext(SafeFreeCredentials credential, SafeDeleteContext& context, string targetName, ContextFlags inFlags, Endianness endianness, SecurityBuffer[] inputBuffers, SecurityBuffer outputBuffer, ContextFlags& outFlags);
    public sealed virtual int EncryptMessage(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int DecryptMessage(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int MakeSignature(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int VerifySignature(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int QueryContextChannelBinding(SafeDeleteContext context, ContextAttribute attribute, SafeFreeContextBufferChannelBinding& binding);
    public sealed virtual int QueryContextAttributes(SafeDeleteContext context, ContextAttribute attribute, Byte[] buffer, Type handleType, SafeHandle& refHandle);
    public sealed virtual int QuerySecurityContextToken(SafeDeleteContext phContext, SecurityContextTokenHandle& phToken);
    public sealed virtual int CompleteAuthToken(SafeDeleteContext& refContext, SecurityBuffer[] inputBuffers);
    private static int GetSecurityContextToken(SafeDeleteContext phContext, SecurityContextTokenHandle& safeHandle);
    public sealed virtual int ApplyControlToken(SafeDeleteContext& refContext, SecurityBuffer[] inputBuffers);
}
internal interface System.Net.SSPIInterface {
    public SecurityPackageInfoClass[] SecurityPackages { get; public set; }
    public abstract virtual SecurityPackageInfoClass[] get_SecurityPackages();
    public abstract virtual void set_SecurityPackages(SecurityPackageInfoClass[] value);
    public abstract virtual int EnumerateSecurityPackages(Int32& pkgnum, SafeFreeContextBuffer& pkgArray);
    public abstract virtual int AcquireCredentialsHandle(string moduleName, CredentialUse usage, SafeSspiAuthDataHandle& authdata, SafeFreeCredentials& outCredential);
    public abstract virtual int AcquireDefaultCredential(string moduleName, CredentialUse usage, SafeFreeCredentials& outCredential);
    public abstract virtual int AcquireCredentialsHandle(string moduleName, CredentialUse usage, SCHANNEL_CRED& authdata, SafeFreeCredentials& outCredential);
    public abstract virtual int AcceptSecurityContext(SafeFreeCredentials credential, SafeDeleteContext& context, SecurityBuffer[] inputBuffers, ContextFlags inFlags, Endianness endianness, SecurityBuffer outputBuffer, ContextFlags& outFlags);
    public abstract virtual int InitializeSecurityContext(SafeFreeCredentials& credential, SafeDeleteContext& context, string targetName, ContextFlags inFlags, Endianness endianness, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, ContextFlags& outFlags);
    public abstract virtual int InitializeSecurityContext(SafeFreeCredentials credential, SafeDeleteContext& context, string targetName, ContextFlags inFlags, Endianness endianness, SecurityBuffer[] inputBuffers, SecurityBuffer outputBuffer, ContextFlags& outFlags);
    public abstract virtual int EncryptMessage(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public abstract virtual int DecryptMessage(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public abstract virtual int MakeSignature(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public abstract virtual int VerifySignature(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public abstract virtual int QueryContextChannelBinding(SafeDeleteContext phContext, ContextAttribute attribute, SafeFreeContextBufferChannelBinding& refHandle);
    public abstract virtual int QueryContextAttributes(SafeDeleteContext phContext, ContextAttribute attribute, Byte[] buffer, Type handleType, SafeHandle& refHandle);
    public abstract virtual int QuerySecurityContextToken(SafeDeleteContext phContext, SecurityContextTokenHandle& phToken);
    public abstract virtual int CompleteAuthToken(SafeDeleteContext& refContext, SecurityBuffer[] inputBuffers);
    public abstract virtual int ApplyControlToken(SafeDeleteContext& refContext, SecurityBuffer[] inputBuffers);
}
internal class System.Net.SSPISecureChannelType : object {
    private static SecurityPackageInfoClass[] modreq(System.Runtime.CompilerServices.IsVolatile) s_securityPackages;
    public SecurityPackageInfoClass[] SecurityPackages { get; public set; }
    public sealed virtual SecurityPackageInfoClass[] get_SecurityPackages();
    public sealed virtual void set_SecurityPackages(SecurityPackageInfoClass[] value);
    public sealed virtual int EnumerateSecurityPackages(Int32& pkgnum, SafeFreeContextBuffer& pkgArray);
    public sealed virtual int AcquireCredentialsHandle(string moduleName, CredentialUse usage, SafeSspiAuthDataHandle& authdata, SafeFreeCredentials& outCredential);
    public sealed virtual int AcquireDefaultCredential(string moduleName, CredentialUse usage, SafeFreeCredentials& outCredential);
    public sealed virtual int AcquireCredentialsHandle(string moduleName, CredentialUse usage, SCHANNEL_CRED& authdata, SafeFreeCredentials& outCredential);
    public int AcceptSecurityContext(SafeFreeCredentials& credential, SafeDeleteContext& context, SecurityBuffer inputBuffer, ContextFlags inFlags, Endianness endianness, SecurityBuffer outputBuffer, ContextFlags& outFlags);
    public sealed virtual int AcceptSecurityContext(SafeFreeCredentials credential, SafeDeleteContext& context, SecurityBuffer[] inputBuffers, ContextFlags inFlags, Endianness endianness, SecurityBuffer outputBuffer, ContextFlags& outFlags);
    public sealed virtual int InitializeSecurityContext(SafeFreeCredentials& credential, SafeDeleteContext& context, string targetName, ContextFlags inFlags, Endianness endianness, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, ContextFlags& outFlags);
    public sealed virtual int InitializeSecurityContext(SafeFreeCredentials credential, SafeDeleteContext& context, string targetName, ContextFlags inFlags, Endianness endianness, SecurityBuffer[] inputBuffers, SecurityBuffer outputBuffer, ContextFlags& outFlags);
    public sealed virtual int EncryptMessage(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int DecryptMessage(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int MakeSignature(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int VerifySignature(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int QueryContextChannelBinding(SafeDeleteContext phContext, ContextAttribute attribute, SafeFreeContextBufferChannelBinding& refHandle);
    public sealed virtual int QueryContextAttributes(SafeDeleteContext phContext, ContextAttribute attribute, Byte[] buffer, Type handleType, SafeHandle& refHandle);
    public sealed virtual int QuerySecurityContextToken(SafeDeleteContext phContext, SecurityContextTokenHandle& phToken);
    public sealed virtual int CompleteAuthToken(SafeDeleteContext& refContext, SecurityBuffer[] inputBuffers);
    public sealed virtual int ApplyControlToken(SafeDeleteContext& refContext, SecurityBuffer[] inputBuffers);
}
internal static class System.Net.SSPIWrapper : object {
    internal static SecurityPackageInfoClass[] EnumerateSecurityPackages(SSPIInterface secModule);
    internal static SecurityPackageInfoClass GetVerifyPackageInfo(SSPIInterface secModule, string packageName, bool throwIfMissing);
    public static SafeFreeCredentials AcquireDefaultCredential(SSPIInterface secModule, string package, CredentialUse intent);
    public static SafeFreeCredentials AcquireCredentialsHandle(SSPIInterface secModule, string package, CredentialUse intent, SafeSspiAuthDataHandle& authdata);
    public static SafeFreeCredentials AcquireCredentialsHandle(SSPIInterface secModule, string package, CredentialUse intent, SCHANNEL_CRED scc);
    internal static int InitializeSecurityContext(SSPIInterface secModule, SafeFreeCredentials& credential, SafeDeleteContext& context, string targetName, ContextFlags inFlags, Endianness datarep, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, ContextFlags& outFlags);
    internal static int InitializeSecurityContext(SSPIInterface secModule, SafeFreeCredentials credential, SafeDeleteContext& context, string targetName, ContextFlags inFlags, Endianness datarep, SecurityBuffer[] inputBuffers, SecurityBuffer outputBuffer, ContextFlags& outFlags);
    internal static int AcceptSecurityContext(SSPIInterface secModule, SafeFreeCredentials credential, SafeDeleteContext& context, ContextFlags inFlags, Endianness datarep, SecurityBuffer[] inputBuffers, SecurityBuffer outputBuffer, ContextFlags& outFlags);
    internal static int CompleteAuthToken(SSPIInterface secModule, SafeDeleteContext& context, SecurityBuffer[] inputBuffers);
    internal static int ApplyControlToken(SSPIInterface secModule, SafeDeleteContext& context, SecurityBuffer[] inputBuffers);
    public static int QuerySecurityContextToken(SSPIInterface secModule, SafeDeleteContext context, SecurityContextTokenHandle& token);
    public static int EncryptMessage(SSPIInterface secModule, SafeDeleteContext context, SecurityBuffer[] input, UInt32 sequenceNumber);
    public static int DecryptMessage(SSPIInterface secModule, SafeDeleteContext context, SecurityBuffer[] input, UInt32 sequenceNumber);
    internal static int MakeSignature(SSPIInterface secModule, SafeDeleteContext context, SecurityBuffer[] input, UInt32 sequenceNumber);
    public static int VerifySignature(SSPIInterface secModule, SafeDeleteContext context, SecurityBuffer[] input, UInt32 sequenceNumber);
    private static int EncryptDecryptHelper(OP op, SSPIInterface secModule, SafeDeleteContext context, SecurityBuffer[] input, UInt32 sequenceNumber);
    public static SafeFreeContextBufferChannelBinding QueryContextChannelBinding(SSPIInterface secModule, SafeDeleteContext securityContext, ContextAttribute contextAttribute);
    public static object QueryContextAttributes(SSPIInterface secModule, SafeDeleteContext securityContext, ContextAttribute contextAttribute);
    public static object QueryContextAttributes(SSPIInterface secModule, SafeDeleteContext securityContext, ContextAttribute contextAttribute, Int32& errorCode);
    public static string ErrorDescription(int errorCode);
}
[FlagsAttribute]
internal enum System.Net.ThreadKinds : Enum {
    public int value__;
    public static ThreadKinds Unknown;
    public static ThreadKinds User;
    public static ThreadKinds System;
    public static ThreadKinds Sync;
    public static ThreadKinds Async;
    public static ThreadKinds Timer;
    public static ThreadKinds CompletionPort;
    public static ThreadKinds Worker;
    public static ThreadKinds Finalization;
    public static ThreadKinds Other;
    public static ThreadKinds OwnerMask;
    public static ThreadKinds SyncMask;
    public static ThreadKinds SourceMask;
    public static ThreadKinds SafeSources;
    public static ThreadKinds ThreadPool;
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
    internal static Exception ActiveIssue(string issue);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AAD_Token_Retrieving_Timeout { get; }
    internal static string ADP_AdapterMappingExceptionMessage { get; }
    internal static string ADP_Ascending { get; }
    internal static string ADP_BadParameterName { get; }
    internal static string ADP_CalledTwice { get; }
    internal static string ADP_ClosedConnectionError { get; }
    internal static string ADP_CollectionIndexInt32 { get; }
    internal static string ADP_CollectionIndexString { get; }
    internal static string ADP_CollectionInvalidType { get; }
    internal static string ADP_CollectionIsNotParent { get; }
    internal static string ADP_CollectionIsParent { get; }
    internal static string ADP_CollectionNullValue { get; }
    internal static string ADP_CollectionRemoveInvalidObject { get; }
    internal static string ADP_CollectionUniqueValue { get; }
    internal static string ADP_ColumnSchemaExpression { get; }
    internal static string ADP_ColumnSchemaMismatch { get; }
    internal static string ADP_ColumnSchemaMissing1 { get; }
    internal static string ADP_ColumnSchemaMissing2 { get; }
    internal static string ADP_CommandTextRequired { get; }
    internal static string ADP_ComputerNameEx { get; }
    internal static string ADP_ConnecitonRequired_UpdateRows { get; }
    internal static string ADP_ConnectionAlreadyOpen { get; }
    internal static string ADP_ConnectionIsDisabled { get; }
    internal static string ADP_ConnectionRequired { get; }
    internal static string ADP_ConnectionRequired_Batch { get; }
    internal static string ADP_ConnectionRequired_Clone { get; }
    internal static string ADP_ConnectionRequired_Delete { get; }
    internal static string ADP_ConnectionRequired_Fill { get; }
    internal static string ADP_ConnectionRequired_FillPage { get; }
    internal static string ADP_ConnectionRequired_FillSchema { get; }
    internal static string ADP_ConnectionRequired_Insert { get; }
    internal static string ADP_ConnectionRequired_Update { get; }
    internal static string ADP_ConnectionStateMsg { get; }
    internal static string ADP_ConnectionStateMsg_Closed { get; }
    internal static string ADP_ConnectionStateMsg_Connecting { get; }
    internal static string ADP_ConnectionStateMsg_Open { get; }
    internal static string ADP_ConnectionStateMsg_OpenExecuting { get; }
    internal static string ADP_ConnectionStateMsg_OpenFetching { get; }
    internal static string ADP_ConnectionStringSyntax { get; }
    internal static string ADP_DataAdapterExceptionMessage { get; }
    internal static string ADP_DatabaseNameTooLong { get; }
    internal static string ADP_DataReaderClosed { get; }
    internal static string ADP_DataReaderNoData { get; }
    internal static string ADP_DBConcurrencyExceptionMessage { get; }
    internal static string ADP_DbDataUpdatableRecordReadOnly { get; }
    internal static string ADP_DbRecordReadOnly { get; }
    internal static string ADP_DbTypeNotSupported { get; }
    internal static string ADP_DelegatedTransactionPresent { get; }
    internal static string ADP_DeriveParametersNotSupported { get; }
    internal static string ADP_Descending { get; }
    internal static string ADP_DoubleValuedProperty { get; }
    internal static string ADP_DynamicSQLJoinUnsupported { get; }
    internal static string ADP_DynamicSQLNestedQuote { get; }
    internal static string ADP_DynamicSQLNoKeyInfoDelete { get; }
    internal static string ADP_DynamicSQLNoKeyInfoRowVersionDelete { get; }
    internal static string ADP_DynamicSQLNoKeyInfoRowVersionUpdate { get; }
    internal static string ADP_DynamicSQLNoKeyInfoUpdate { get; }
    internal static string ADP_DynamicSQLNoTableInfo { get; }
    internal static string ADP_EmptyArray { get; }
    internal static string ADP_EmptyDatabaseName { get; }
    internal static string ADP_EmptyString { get; }
    internal static string ADP_EvenLengthLiteralValue { get; }
    internal static string ADP_FillChapterAutoIncrement { get; }
    internal static string ADP_FillRequiresSourceTableName { get; }
    internal static string ADP_FillSchemaRequiresSourceTableName { get; }
    internal static string ADP_HexDigitLiteralValue { get; }
    internal static string ADP_IncorrectAsyncResult { get; }
    internal static string ADP_InternalConnectionError { get; }
    internal static string ADP_InternalProviderError { get; }
    internal static string ADP_InvalidArgumentLength { get; }
    internal static string ADP_InvalidArgumentValue { get; }
    internal static string ADP_InvalidBufferSizeOrIndex { get; }
    internal static string ADP_InvalidCommandTimeout { get; }
    internal static string ADP_InvalidConnectionOptionValue { get; }
    internal static string ADP_InvalidConnectionOptionValueLength { get; }
    internal static string ADP_InvalidConnectTimeoutValue { get; }
    internal static string ADP_InvalidDataDirectory { get; }
    internal static string ADP_InvalidDataLength { get; }
    internal static string ADP_InvalidDataLength2 { get; }
    internal static string ADP_InvalidDataType { get; }
    internal static string ADP_InvalidDateTimeDigits { get; }
    internal static string ADP_InvalidDestinationBufferIndex { get; }
    internal static string ADP_InvalidEnumerationValue { get; }
    internal static string ADP_InvalidFormatValue { get; }
    internal static string ADP_InvalidImplicitConversion { get; }
    internal static string ADP_InvalidKey { get; }
    internal static string ADP_InvalidMaximumScale { get; }
    internal static string ADP_InvalidMaxRecords { get; }
    internal static string ADP_InvalidMetaDataValue { get; }
    internal static string ADP_InvalidMinMaxPoolSizeValues { get; }
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndAuthentication { get; }
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndContextConnection { get; }
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndCredential { get; }
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndIntegratedSecurity { get; }
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndTokenCallback { get; }
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndUserIDPassword { get; }
    internal static string ADP_InvalidMixedUsageOfAccessTokenCallbackAndIntegratedSecurity { get; }
    internal static string ADP_InvalidMixedUsageOfAuthenticationAndTokenCallback { get; }
    internal static string ADP_InvalidMixedUsageOfCredentialAndAccessToken { get; }
    internal static string ADP_InvalidMixedUsageOfSecureAndClearCredential { get; }
    internal static string ADP_InvalidMixedUsageOfSecureCredentialAndContextConnection { get; }
    internal static string ADP_InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity { get; }
    internal static string ADP_InvalidMultipartName { get; }
    internal static string ADP_InvalidMultipartNameQuoteUsage { get; }
    internal static string ADP_InvalidMultipartNameToManyParts { get; }
    internal static string ADP_InvalidOffsetValue { get; }
    internal static string ADP_InvalidPrefixSuffix { get; }
    internal static string ADP_InvalidSeekOrigin { get; }
    internal static string ADP_InvalidSizeValue { get; }
    internal static string ADP_InvalidSourceBufferIndex { get; }
    internal static string ADP_InvalidSourceColumn { get; }
    internal static string ADP_InvalidSourceTable { get; }
    internal static string ADP_InvalidStartRecord { get; }
    internal static string ADP_InvalidUDL { get; }
    internal static string ADP_InvalidValue { get; }
    internal static string ADP_InvalidXMLBadVersion { get; }
    internal static string ADP_KeywordNotSupported { get; }
    internal static string ADP_LiteralValueIsInvalid { get; }
    internal static string ADP_LocalTransactionPresent { get; }
    internal static string ADP_MismatchedAsyncResult { get; }
    internal static string ADP_MissingColumnMapping { get; }
    internal static string ADP_MissingConnectionOptionValue { get; }
    internal static string ADP_MissingDataReaderFieldType { get; }
    internal static string ADP_MissingSelectCommand { get; }
    internal static string ADP_MissingSourceCommand { get; }
    internal static string ADP_MissingSourceCommandConnection { get; }
    internal static string ADP_MissingTableMapping { get; }
    internal static string ADP_MissingTableMappingDestination { get; }
    internal static string ADP_MissingTableSchema { get; }
    internal static string ADP_MultipleReturnValue { get; }
    internal static string ADP_MustBeReadOnly { get; }
    internal static string ADP_NegativeParameter { get; }
    internal static string ADP_NoConnectionString { get; }
    internal static string ADP_NonCLSException { get; }
    internal static string ADP_NonPooledOpenTimeout { get; }
    internal static string ADP_NonSeqByteAccess { get; }
    internal static string ADP_NonSequentialColumnAccess { get; }
    internal static string ADP_NoQuoteChange { get; }
    internal static string ADP_NoStoredProcedureExists { get; }
    internal static string ADP_NotAPermissionElement { get; }
    internal static string ADP_NotRowType { get; }
    internal static string ADP_NotSupportedEnumerationValue { get; }
    internal static string ADP_NullDataSet { get; }
    internal static string ADP_NullDataTable { get; }
    internal static string ADP_NumericToDecimalOverflow { get; }
    internal static string ADP_ObsoleteKeyword { get; }
    internal static string ADP_OdbcNoTypesFromProvider { get; }
    internal static string ADP_OffsetOutOfRangeException { get; }
    internal static string ADP_OnlyOneTableForStartRecordOrMaxRecords { get; }
    internal static string ADP_OpenConnectionPropertySet { get; }
    internal static string ADP_OpenConnectionRequired { get; }
    internal static string ADP_OpenConnectionRequired_Clone { get; }
    internal static string ADP_OpenConnectionRequired_Delete { get; }
    internal static string ADP_OpenConnectionRequired_Insert { get; }
    internal static string ADP_OpenConnectionRequired_Update { get; }
    internal static string ADP_OpenReaderExists { get; }
    internal static string ADP_OpenResultSetExists { get; }
    internal static string ADP_OperationAborted { get; }
    internal static string ADP_OperationAbortedExceptionMessage { get; }
    internal static string ADP_ParallelTransactionsNotSupported { get; }
    internal static string ADP_ParameterConversionFailed { get; }
    internal static string ADP_ParameterValueOutOfRange { get; }
    internal static string ADP_PendingAsyncOperation { get; }
    internal static string ADP_PermissionTypeMismatch { get; }
    internal static string ADP_PooledOpenTimeout { get; }
    internal static string ADP_PrepareParameterScale { get; }
    internal static string ADP_PrepareParameterSize { get; }
    internal static string ADP_PrepareParameterType { get; }
    internal static string ADP_PropertyNotSupported { get; }
    internal static string ADP_QuotePrefixNotSet { get; }
    internal static string ADP_ResultsNotAllowedDuringBatch { get; }
    internal static string ADP_RowUpdatedErrors { get; }
    internal static string ADP_RowUpdatingErrors { get; }
    internal static string ADP_SingleValuedProperty { get; }
    internal static string ADP_StreamClosed { get; }
    internal static string ADP_TransactionCompleted { get; }
    internal static string ADP_TransactionCompletedButNotDisposed { get; }
    internal static string ADP_TransactionConnectionMismatch { get; }
    internal static string ADP_TransactionPresent { get; }
    internal static string ADP_TransactionRequired { get; }
    internal static string ADP_TransactionZombied { get; }
    internal static string ADP_UdlFileError { get; }
    internal static string ADP_UnableToCreateBooleanLiteral { get; }
    internal static string ADP_UninitializedParameterSize { get; }
    internal static string ADP_UnknownDataType { get; }
    internal static string ADP_UnknownDataTypeCode { get; }
    internal static string ADP_UnsupportedNativeDataTypeOleDb { get; }
    internal static string ADP_UnwantedStatementType { get; }
    internal static string ADP_UpdateConcurrencyViolation_Batch { get; }
    internal static string ADP_UpdateConcurrencyViolation_Delete { get; }
    internal static string ADP_UpdateConcurrencyViolation_Update { get; }
    internal static string ADP_UpdateMismatchRowTable { get; }
    internal static string ADP_UpdateRequiresCommandClone { get; }
    internal static string ADP_UpdateRequiresCommandDelete { get; }
    internal static string ADP_UpdateRequiresCommandInsert { get; }
    internal static string ADP_UpdateRequiresCommandSelect { get; }
    internal static string ADP_UpdateRequiresCommandUpdate { get; }
    internal static string ADP_UpdateRequiresSourceTable { get; }
    internal static string ADP_UpdateRequiresSourceTableName { get; }
    internal static string ADP_VersionDoesNotSupportDataType { get; }
    internal static string Arg_ArrayPlusOffTooSmall { get; }
    internal static string Arg_RankMultiDimNotSupported { get; }
    internal static string Arg_RemoveArgNotFound { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string AttestationTokenSignatureValidationFailed { get; }
    internal static string AZURESQL_ChinaEndpoint { get; }
    internal static string AZURESQL_GenericEndpoint { get; }
    internal static string AZURESQL_GermanEndpoint { get; }
    internal static string AZURESQL_UsGovEndpoint { get; }
    internal static string CodeGen_DuplicateTableName { get; }
    internal static string CodeGen_InvalidIdentifier { get; }
    internal static string CodeGen_NoCtor0 { get; }
    internal static string CodeGen_NoCtor1 { get; }
    internal static string CodeGen_TypeCantBeNull { get; }
    internal static string collectionChangedEventDescr { get; }
    internal static string ConfigBaseElementsOnly { get; }
    internal static string ConfigBaseNoChildNodes { get; }
    internal static string ConfigProviderInvalid { get; }
    internal static string ConfigProviderMissing { get; }
    internal static string ConfigProviderNotFound { get; }
    internal static string ConfigProviderNotInstalled { get; }
    internal static string ConfigRequiredAttributeEmpty { get; }
    internal static string ConfigRequiredAttributeMissing { get; }
    internal static string ConfigSectionsUnique { get; }
    internal static string ConfigUnrecognizedAttributes { get; }
    internal static string ConfigUnrecognizedElement { get; }
    internal static string ConstraintNameDescr { get; }
    internal static string ConstraintTableDescr { get; }
    internal static string Data_ArgumentContainsNull { get; }
    internal static string Data_ArgumentNull { get; }
    internal static string Data_ArgumentOutOfRange { get; }
    internal static string Data_CannotModifyCollection { get; }
    internal static string Data_CaseInsensitiveNameConflict { get; }
    internal static string Data_EnforceConstraints { get; }
    internal static string Data_InvalidOffsetLength { get; }
    internal static string Data_NamespaceNameConflict { get; }
    internal static string DataAdapter_AcceptChangesDuringFill { get; }
    internal static string DataAdapter_AcceptChangesDuringUpdate { get; }
    internal static string DataAdapter_ContinueUpdateOnError { get; }
    internal static string DataAdapter_FillError { get; }
    internal static string DataAdapter_FillLoadOption { get; }
    internal static string DataAdapter_MissingMappingAction { get; }
    internal static string DataAdapter_MissingSchemaAction { get; }
    internal static string DataAdapter_ReturnProviderSpecificTypes { get; }
    internal static string DataAdapter_TableMappings { get; }
    internal static string DataCategory_Action { get; }
    internal static string DataCategory_Advanced { get; }
    internal static string DataCategory_Behavior { get; }
    internal static string DataCategory_ConnectionResilency { get; }
    internal static string DataCategory_Context { get; }
    internal static string DataCategory_Data { get; }
    internal static string DataCategory_Fill { get; }
    internal static string DataCategory_InfoMessage { get; }
    internal static string DataCategory_Initialization { get; }
    internal static string DataCategory_Mapping { get; }
    internal static string DataCategory_NamedConnectionString { get; }
    internal static string DataCategory_Notification { get; }
    internal static string DataCategory_Pooling { get; }
    internal static string DataCategory_Replication { get; }
    internal static string DataCategory_Schema { get; }
    internal static string DataCategory_Security { get; }
    internal static string DataCategory_Source { get; }
    internal static string DataCategory_StateChange { get; }
    internal static string DataCategory_StatementCompleted { get; }
    internal static string DataCategory_Udt { get; }
    internal static string DataCategory_Update { get; }
    internal static string DataCategory_Xml { get; }
    internal static string DataColumn_AutoIncrementAndDefaultValue { get; }
    internal static string DataColumn_AutoIncrementAndExpression { get; }
    internal static string DataColumn_AutoIncrementCannotSetIfHasData { get; }
    internal static string DataColumn_AutoIncrementSeed { get; }
    internal static string DataColumn_CannotChangeNamespace { get; }
    internal static string DataColumn_CannotSetDateTimeModeForNonDateTimeColumns { get; }
    internal static string DataColumn_CannotSetMaxLength { get; }
    internal static string DataColumn_CannotSetMaxLength2 { get; }
    internal static string DataColumn_CannotSetToNull { get; }
    internal static string DataColumn_CannotSimpleContent { get; }
    internal static string DataColumn_CannotSimpleContentType { get; }
    internal static string DataColumn_ChangeDataType { get; }
    internal static string DataColumn_DateTimeMode { get; }
    internal static string DataColumn_DefaultValueAndAutoIncrement { get; }
    internal static string DataColumn_DefaultValueColumnDataType { get; }
    internal static string DataColumn_DefaultValueDataType { get; }
    internal static string DataColumn_DefaultValueDataType1 { get; }
    internal static string DataColumn_ExceedMaxLength { get; }
    internal static string DataColumn_ExpressionAndConstraint { get; }
    internal static string DataColumn_ExpressionAndReadOnly { get; }
    internal static string DataColumn_ExpressionAndUnique { get; }
    internal static string DataColumn_ExpressionCircular { get; }
    internal static string DataColumn_ExpressionInConstraint { get; }
    internal static string DataColumn_HasToBeStringType { get; }
    internal static string DataColumn_INullableUDTwithoutStaticNull { get; }
    internal static string DataColumn_InvalidDataColumnMapping { get; }
    internal static string DataColumn_InvalidDateTimeMode { get; }
    internal static string DataColumn_LongerThanMaxLength { get; }
    internal static string DataColumn_NameRequired { get; }
    internal static string DataColumn_NonUniqueValues { get; }
    internal static string DataColumn_NotAllowDBNull { get; }
    internal static string DataColumn_NotInAnyTable { get; }
    internal static string DataColumn_NotInTheTable { get; }
    internal static string DataColumn_NotInTheUnderlyingTable { get; }
    internal static string DataColumn_NullableTypesNotSupported { get; }
    internal static string DataColumn_NullDataType { get; }
    internal static string DataColumn_NullKeyValues { get; }
    internal static string DataColumn_NullValues { get; }
    internal static string DataColumn_OrdinalExceedMaximun { get; }
    internal static string DataColumn_ReadOnly { get; }
    internal static string DataColumn_ReadOnlyAndExpression { get; }
    internal static string DataColumn_SetAddedAndModifiedCalledOnNonUnchanged { get; }
    internal static string DataColumn_SetFailed { get; }
    internal static string DataColumn_UDTImplementsIChangeTrackingButnotIRevertible { get; }
    internal static string DataColumn_UniqueAndExpression { get; }
    internal static string DataColumnAllowNullDescr { get; }
    internal static string DataColumnAutoIncrementDescr { get; }
    internal static string DataColumnAutoIncrementSeedDescr { get; }
    internal static string DataColumnAutoIncrementStepDescr { get; }
    internal static string DataColumnCaptionDescr { get; }
    internal static string DataColumnColumnNameDescr { get; }
    internal static string DataColumnDataTableDescr { get; }
    internal static string DataColumnDataTypeDescr { get; }
    internal static string DataColumnDateTimeModeDescr { get; }
    internal static string DataColumnDefaultValueDescr { get; }
    internal static string DataColumnExpressionDescr { get; }
    internal static string DataColumnMapping_DataSetColumn { get; }
    internal static string DataColumnMapping_SourceColumn { get; }
    internal static string DataColumnMappingDescr { get; }
    internal static string DataColumnMappings_Count { get; }
    internal static string DataColumnMappings_Item { get; }
    internal static string DataColumnMaxLengthDescr { get; }
    internal static string DataColumnNamespaceDescr { get; }
    internal static string DataColumnOrdinalDescr { get; }
    internal static string DataColumnPrefixDescr { get; }
    internal static string DataColumnReadOnlyDescr { get; }
    internal static string DataColumns_Add1 { get; }
    internal static string DataColumns_Add2 { get; }
    internal static string DataColumns_Add3 { get; }
    internal static string DataColumns_Add4 { get; }
    internal static string DataColumns_AddDuplicate { get; }
    internal static string DataColumns_AddDuplicate2 { get; }
    internal static string DataColumns_AddDuplicate3 { get; }
    internal static string DataColumns_OutOfRange { get; }
    internal static string DataColumns_Remove { get; }
    internal static string DataColumns_RemoveChildKey { get; }
    internal static string DataColumns_RemoveConstraint { get; }
    internal static string DataColumns_RemoveExpression { get; }
    internal static string DataColumns_RemovePrimaryKey { get; }
    internal static string DataColumnUniqueDescr { get; }
    internal static string DataConstraint_AddFailed { get; }
    internal static string DataConstraint_AddPrimaryKeyConstraint { get; }
    internal static string DataConstraint_BadObjectPropertyAccess { get; }
    internal static string DataConstraint_CantAddConstraintToMultipleNestedTable { get; }
    internal static string DataConstraint_CascadeDelete { get; }
    internal static string DataConstraint_CascadeUpdate { get; }
    internal static string DataConstraint_ClearParentTable { get; }
    internal static string DataConstraint_Duplicate { get; }
    internal static string DataConstraint_DuplicateName { get; }
    internal static string DataConstraint_ForeignKeyViolation { get; }
    internal static string DataConstraint_ForeignTable { get; }
    internal static string DataConstraint_NeededForForeignKeyConstraint { get; }
    internal static string DataConstraint_NoName { get; }
    internal static string DataConstraint_NotInTheTable { get; }
    internal static string DataConstraint_OutOfRange { get; }
    internal static string DataConstraint_ParentValues { get; }
    internal static string DataConstraint_RemoveFailed { get; }
    internal static string DataConstraint_RemoveParentRow { get; }
    internal static string DataConstraint_UniqueViolation { get; }
    internal static string DataConstraint_Violation { get; }
    internal static string DataConstraint_ViolationValue { get; }
    internal static string DataDom_CloneNode { get; }
    internal static string DataDom_ColumnMappingChange { get; }
    internal static string DataDom_ColumnNameChange { get; }
    internal static string DataDom_ColumnNamespaceChange { get; }
    internal static string DataDom_DataSetNameChange { get; }
    internal static string DataDom_DataSetNestedRelationsChange { get; }
    internal static string DataDom_DataSetNull { get; }
    internal static string DataDom_DataSetTablesChange { get; }
    internal static string DataDom_EnforceConstraintsShouldBeOff { get; }
    internal static string DataDom_Foliation { get; }
    internal static string DataDom_MultipleDataSet { get; }
    internal static string DataDom_MultipleLoad { get; }
    internal static string DataDom_NotSupport_Clear { get; }
    internal static string DataDom_NotSupport_EntRef { get; }
    internal static string DataDom_NotSupport_GetElementById { get; }
    internal static string DataDom_TableColumnsChange { get; }
    internal static string DataDom_TableNameChange { get; }
    internal static string DataDom_TableNamespaceChange { get; }
    internal static string DataIndex_FindWithoutSortOrder { get; }
    internal static string DataIndex_KeyLength { get; }
    internal static string DataIndex_RecordStateRange { get; }
    internal static string DataKey_DuplicateColumns { get; }
    internal static string DataKey_NoColumns { get; }
    internal static string DataKey_RemovePrimaryKey { get; }
    internal static string DataKey_RemovePrimaryKey1 { get; }
    internal static string DataKey_TableMismatch { get; }
    internal static string DataKey_TooManyColumns { get; }
    internal static string DataMerge_DataTypeMismatch { get; }
    internal static string DataMerge_MissingColumnDefinition { get; }
    internal static string DataMerge_MissingConstraint { get; }
    internal static string DataMerge_MissingDefinition { get; }
    internal static string DataMerge_MissingPrimaryKeyColumnInSource { get; }
    internal static string DataMerge_PrimaryKeyColumnsMismatch { get; }
    internal static string DataMerge_PrimaryKeyMismatch { get; }
    internal static string DataMerge_ReltionKeyColumnsMismatch { get; }
    internal static string DataRelation_AlreadyExists { get; }
    internal static string DataRelation_AlreadyInOtherDataSet { get; }
    internal static string DataRelation_AlreadyInTheDataSet { get; }
    internal static string DataRelation_CaseLocaleMismatch { get; }
    internal static string DataRelation_ChildTableMismatch { get; }
    internal static string DataRelation_ColumnsTypeMismatch { get; }
    internal static string DataRelation_DataSetMismatch { get; }
    internal static string DataRelation_DoesNotExist { get; }
    internal static string DataRelation_DuplicateName { get; }
    internal static string DataRelation_ForeignDataSet { get; }
    internal static string DataRelation_ForeignRow { get; }
    internal static string DataRelation_ForeignTable { get; }
    internal static string DataRelation_GetParentRowTableMismatch { get; }
    internal static string DataRelation_InValidNamespaceInNestedRelation { get; }
    internal static string DataRelation_InValidNestedRelation { get; }
    internal static string DataRelation_KeyColumnsIdentical { get; }
    internal static string DataRelation_KeyLengthMismatch { get; }
    internal static string DataRelation_KeyZeroLength { get; }
    internal static string DataRelation_LoopInNestedRelations { get; }
    internal static string DataRelation_NoName { get; }
    internal static string DataRelation_NotInTheDataSet { get; }
    internal static string DataRelation_OutOfRange { get; }
    internal static string DataRelation_ParentOrChildColumnsDoNotHaveDataSet { get; }
    internal static string DataRelation_ParentTableMismatch { get; }
    internal static string DataRelation_RelationNestedReadOnly { get; }
    internal static string DataRelation_SetParentRowTableMismatch { get; }
    internal static string DataRelation_TableCantBeNestedInTwoTables { get; }
    internal static string DataRelation_TableNull { get; }
    internal static string DataRelation_TablesInDifferentSets { get; }
    internal static string DataRelation_TableWasRemoved { get; }
    internal static string DataRelationChildColumnsDescr { get; }
    internal static string DataRelationNested { get; }
    internal static string DataRelationParentColumnsDescr { get; }
    internal static string DataRelationRelationNameDescr { get; }
    internal static string DataRow_AlreadyDeleted { get; }
    internal static string DataRow_AlreadyInOtherCollection { get; }
    internal static string DataRow_AlreadyInTheCollection { get; }
    internal static string DataRow_AlreadyRemoved { get; }
    internal static string DataRow_BeginEditInRowChanging { get; }
    internal static string DataRow_CancelEditInRowChanging { get; }
    internal static string DataRow_DeletedRowInaccessible { get; }
    internal static string DataRow_DeleteInRowDeleting { get; }
    internal static string DataRow_EditInRowChanging { get; }
    internal static string DataRow_Empty { get; }
    internal static string DataRow_EndEditInRowChanging { get; }
    internal static string DataRow_InvalidRowBitPattern { get; }
    internal static string DataRow_InvalidVersion { get; }
    internal static string DataRow_MultipleParents { get; }
    internal static string DataRow_NoCurrentData { get; }
    internal static string DataRow_NoOriginalData { get; }
    internal static string DataRow_NoProposedData { get; }
    internal static string DataRow_NotInTheDataSet { get; }
    internal static string DataRow_NotInTheTable { get; }
    internal static string DataRow_OutOfRange { get; }
    internal static string DataRow_ParentRowNotInTheDataSet { get; }
    internal static string DataRow_RemovedFromTheTable { get; }
    internal static string DataRow_RowInsertMissing { get; }
    internal static string DataRow_RowInsertOutOfRange { get; }
    internal static string DataRow_RowInsertTwice { get; }
    internal static string DataRow_RowOutOfRange { get; }
    internal static string DataRow_ValuesArrayLength { get; }
    internal static string DataROWView_PropertyNotFound { get; }
    internal static string DataSet_CannotChangeCaseLocale { get; }
    internal static string DataSet_CannotChangeSchemaSerializationMode { get; }
    internal static string DataSet_DefaultConstraintException { get; }
    internal static string DataSet_DefaultDataException { get; }
    internal static string DataSet_DefaultDeletedRowInaccessibleException { get; }
    internal static string DataSet_DefaultDuplicateNameException { get; }
    internal static string DataSet_DefaultInRowChangingEventException { get; }
    internal static string DataSet_DefaultInvalidConstraintException { get; }
    internal static string DataSet_DefaultMissingPrimaryKeyException { get; }
    internal static string DataSet_DefaultNoNullAllowedException { get; }
    internal static string DataSet_DefaultReadOnlyException { get; }
    internal static string DataSet_DefaultRowNotInTableException { get; }
    internal static string DataSet_DefaultVersionNotFoundException { get; }
    internal static string DataSet_SetDataSetNameConflicting { get; }
    internal static string DataSet_SetNameToEmpty { get; }
    internal static string DataSet_UnsupportedSchema { get; }
    internal static string DataSetCaseSensitiveDescr { get; }
    internal static string DataSetDataSetNameDescr { get; }
    internal static string DataSetDefaultViewDescr { get; }
    internal static string DataSetDescr { get; }
    internal static string DataSetEnforceConstraintsDescr { get; }
    internal static string DataSetHasErrorsDescr { get; }
    internal static string DataSetInitializedDescr { get; }
    internal static string DataSetLocaleDescr { get; }
    internal static string DataSetMergeFailedDescr { get; }
    internal static string DataSetNamespaceDescr { get; }
    internal static string DataSetPrefixDescr { get; }
    internal static string DataSetRelationsDescr { get; }
    internal static string DataSetTablesDescr { get; }
    internal static string DataStorage_AggregateException { get; }
    internal static string DataStorage_IComparableNotDefined { get; }
    internal static string DataStorage_InvalidStorageType { get; }
    internal static string DataStorage_ProblematicChars { get; }
    internal static string DataStorage_SetInvalidDataType { get; }
    internal static string DataTable_AlreadyInOtherDataSet { get; }
    internal static string DataTable_AlreadyInTheDataSet { get; }
    internal static string DataTable_CannotAddToSimpleContent { get; }
    internal static string DataTable_CanNotRemoteDataTable { get; }
    internal static string DataTable_CanNotSerializeDataTableHierarchy { get; }
    internal static string DataTable_CanNotSerializeDataTableWithEmptyName { get; }
    internal static string DataTable_CanNotSetRemotingFormat { get; }
    internal static string DataTable_DatasetConflictingName { get; }
    internal static string DataTable_DuplicateName { get; }
    internal static string DataTable_DuplicateName2 { get; }
    internal static string DataTable_ForeignPrimaryKey { get; }
    internal static string DataTable_InConstraint { get; }
    internal static string DataTable_InRelation { get; }
    internal static string DataTable_InvalidSortString { get; }
    internal static string DataTable_MissingPrimaryKey { get; }
    internal static string DataTable_MultipleSimpleContentColumns { get; }
    internal static string DataTable_NoName { get; }
    internal static string DataTable_NotInTheDataSet { get; }
    internal static string DataTable_OutOfRange { get; }
    internal static string DataTable_SelfnestedDatasetConflictingName { get; }
    internal static string DataTable_TableNotFound { get; }
    internal static string DataTableCaseSensitiveDescr { get; }
    internal static string DataTableChildRelationsDescr { get; }
    internal static string DataTableColumnChangedDescr { get; }
    internal static string DataTableColumnChangingDescr { get; }
    internal static string DataTableColumnsDescr { get; }
    internal static string DataTableConstraintsDescr { get; }
    internal static string DataTableDataSetDescr { get; }
    internal static string DataTableDefaultViewDescr { get; }
    internal static string DataTableDisplayExpressionDescr { get; }
    internal static string DataTableHasErrorsDescr { get; }
    internal static string DataTableLocaleDescr { get; }
    internal static string DataTableMapping_ColumnMappings { get; }
    internal static string DataTableMapping_DataSetTable { get; }
    internal static string DataTableMapping_SourceTable { get; }
    internal static string DataTableMappings_Count { get; }
    internal static string DataTableMappings_Item { get; }
    internal static string DataTableMinimumCapacityDescr { get; }
    internal static string DataTableNamespaceDescr { get; }
    internal static string DataTableParentRelationsDescr { get; }
    internal static string DataTablePrefixDescr { get; }
    internal static string DataTablePrimaryKeyDescr { get; }
    internal static string DataTableReader_ArgumentContainsNullValue { get; }
    internal static string DataTableReader_CannotCreateDataReaderOnEmptyDataSet { get; }
    internal static string DataTableReader_DataTableCleared { get; }
    internal static string DataTableReader_DataTableReaderArgumentIsEmpty { get; }
    internal static string DataTableReader_InvalidDataTableReader { get; }
    internal static string DataTableReader_InvalidRowInDataTableReader { get; }
    internal static string DataTableReader_SchemaInvalidDataTableReader { get; }
    internal static string DataTableRowChangedDescr { get; }
    internal static string DataTableRowChangingDescr { get; }
    internal static string DataTableRowDeletedDescr { get; }
    internal static string DataTableRowDeletingDescr { get; }
    internal static string DataTableRowsClearedDescr { get; }
    internal static string DataTableRowsClearingDescr { get; }
    internal static string DataTableRowsDescr { get; }
    internal static string DataTableRowsNewRowDescr { get; }
    internal static string DataTableTableNameDescr { get; }
    internal static string DataView_AddExternalObject { get; }
    internal static string DataView_AddNewNotAllowNull { get; }
    internal static string DataView_CanNotBindTable { get; }
    internal static string DataView_CanNotClear { get; }
    internal static string DataView_CanNotDelete { get; }
    internal static string DataView_CanNotEdit { get; }
    internal static string DataView_CanNotSetDataSet { get; }
    internal static string DataView_CanNotSetTable { get; }
    internal static string DataView_CanNotUse { get; }
    internal static string DataView_CanNotUseDataViewManager { get; }
    internal static string DataView_CreateChildView { get; }
    internal static string DataView_GetElementIndex { get; }
    internal static string DataView_InsertExternalObject { get; }
    internal static string DataView_NotOpen { get; }
    internal static string DataView_RemoveExternalObject { get; }
    internal static string DataView_SetDataSetFailed { get; }
    internal static string DataView_SetFailed { get; }
    internal static string DataView_SetIListObject { get; }
    internal static string DataView_SetRowStateFilter { get; }
    internal static string DataView_SetTable { get; }
    internal static string DataViewAllowDeleteDescr { get; }
    internal static string DataViewAllowEditDescr { get; }
    internal static string DataViewAllowNewDescr { get; }
    internal static string DataViewApplyDefaultSortDescr { get; }
    internal static string DataViewCountDescr { get; }
    internal static string DataViewDataViewManagerDescr { get; }
    internal static string DataViewIsOpenDescr { get; }
    internal static string DataViewListChangedDescr { get; }
    internal static string DataViewManagerDataSetDescr { get; }
    internal static string DataViewManagerTableSettingsDescr { get; }
    internal static string DataViewRowFilterDescr { get; }
    internal static string DataViewRowStateFilterDescr { get; }
    internal static string DataViewSortDescr { get; }
    internal static string DataViewTableDescr { get; }
    internal static string DbCommand_CommandText { get; }
    internal static string DbCommand_CommandTimeout { get; }
    internal static string DbCommand_CommandType { get; }
    internal static string DbCommand_Connection { get; }
    internal static string DbCommand_Parameters { get; }
    internal static string DbCommand_StatementCompleted { get; }
    internal static string DbCommand_Transaction { get; }
    internal static string DbCommand_UpdatedRowSource { get; }
    internal static string DbCommandBuilder_CatalogLocation { get; }
    internal static string DbCommandBuilder_CatalogSeparator { get; }
    internal static string DbCommandBuilder_ConflictOption { get; }
    internal static string DbCommandBuilder_DataAdapter { get; }
    internal static string DbCommandBuilder_QuotePrefix { get; }
    internal static string DbCommandBuilder_QuoteSuffix { get; }
    internal static string DbCommandBuilder_SchemaLocation { get; }
    internal static string DbCommandBuilder_SchemaSeparator { get; }
    internal static string DbCommandBuilder_SetAllValues { get; }
    internal static string DbConnection_InfoMessage { get; }
    internal static string DbConnection_State { get; }
    internal static string DbConnection_StateChange { get; }
    internal static string DbConnectionString_AdoNetPooler { get; }
    internal static string DbConnectionString_ApplicationIntent { get; }
    internal static string DbConnectionString_ApplicationName { get; }
    internal static string DbConnectionString_AsynchronousProcessing { get; }
    internal static string DbConnectionString_AttachDBFilename { get; }
    internal static string DbConnectionString_Authentication { get; }
    internal static string DbConnectionString_Certificate { get; }
    internal static string DbConnectionString_ConnectionReset { get; }
    internal static string DbConnectionString_ConnectionString { get; }
    internal static string DbConnectionString_ConnectRetryCount { get; }
    internal static string DbConnectionString_ConnectRetryInterval { get; }
    internal static string DbConnectionString_ConnectTimeout { get; }
    internal static string DbConnectionString_ContextConnection { get; }
    internal static string DbConnectionString_CurrentLanguage { get; }
    internal static string DbConnectionString_DataSource { get; }
    internal static string DbConnectionString_Driver { get; }
    internal static string DbConnectionString_DSN { get; }
    internal static string DbConnectionString_Encrypt { get; }
    internal static string DbConnectionString_Enlist { get; }
    internal static string DbConnectionString_FailoverPartner { get; }
    internal static string DbConnectionString_FailoverPartnerSPN { get; }
    internal static string DbConnectionString_FileName { get; }
    internal static string DbConnectionString_HostNameInCertificate { get; }
    internal static string DbConnectionString_InitialCatalog { get; }
    internal static string DbConnectionString_IntegratedSecurity { get; }
    internal static string DbConnectionString_LoadBalanceTimeout { get; }
    internal static string DbConnectionString_MaxPoolSize { get; }
    internal static string DbConnectionString_MinPoolSize { get; }
    internal static string DbConnectionString_MultipleActiveResultSets { get; }
    internal static string DbConnectionString_MultiSubnetFailover { get; }
    internal static string DbConnectionString_NetworkLibrary { get; }
    internal static string DbConnectionString_OleDbServices { get; }
    internal static string DbConnectionString_PacketSize { get; }
    internal static string DbConnectionString_Password { get; }
    internal static string DbConnectionString_PersistSecurityInfo { get; }
    internal static string DbConnectionString_PoolBlockingPeriod { get; }
    internal static string DbConnectionString_Pooling { get; }
    internal static string DbConnectionString_Provider { get; }
    internal static string DbConnectionString_Replication { get; }
    internal static string DbConnectionString_ServerCertificate { get; }
    internal static string DbConnectionString_ServerSPN { get; }
    internal static string DbConnectionString_TransactionBinding { get; }
    internal static string DbConnectionString_TransparentNetworkIPResolution { get; }
    internal static string DbConnectionString_TrustServerCertificate { get; }
    internal static string DbConnectionString_TypeSystemVersion { get; }
    internal static string DbConnectionString_UserID { get; }
    internal static string DbConnectionString_UserInstance { get; }
    internal static string DbConnectionString_WorkstationID { get; }
    internal static string DbDataAdapter_DeleteCommand { get; }
    internal static string DbDataAdapter_InsertCommand { get; }
    internal static string DbDataAdapter_RowUpdated { get; }
    internal static string DbDataAdapter_RowUpdating { get; }
    internal static string DbDataAdapter_SelectCommand { get; }
    internal static string DbDataAdapter_UpdateBatchSize { get; }
    internal static string DbDataAdapter_UpdateCommand { get; }
    internal static string DbDataParameter_Precision { get; }
    internal static string DbDataParameter_Scale { get; }
    internal static string DbParameter_DbType { get; }
    internal static string DbParameter_Direction { get; }
    internal static string DbParameter_IsNullable { get; }
    internal static string DbParameter_Offset { get; }
    internal static string DbParameter_ParameterName { get; }
    internal static string DbParameter_Size { get; }
    internal static string DbParameter_SourceColumn { get; }
    internal static string DbParameter_SourceColumnNullMapping { get; }
    internal static string DbParameter_SourceVersion { get; }
    internal static string DbParameter_Value { get; }
    internal static string DbTable_ConflictDetection { get; }
    internal static string DbTable_Connection { get; }
    internal static string DbTable_DeleteCommand { get; }
    internal static string DbTable_InsertCommand { get; }
    internal static string DbTable_ReturnProviderSpecificTypes { get; }
    internal static string DbTable_SelectCommand { get; }
    internal static string DbTable_TableMapping { get; }
    internal static string DbTable_UpdateBatchSize { get; }
    internal static string DbTable_UpdateCommand { get; }
    internal static string EnclaveRetrySleepInSecondsValueException { get; }
    internal static string EnclaveSessionInvalidationFailed { get; }
    internal static string event_OperationReturnedSomething { get; }
    internal static string ExpiredAttestationToken { get; }
    internal static string Expr_AggregateArgument { get; }
    internal static string Expr_AggregateUnbound { get; }
    internal static string Expr_AmbiguousBinop { get; }
    internal static string Expr_ArgumentOutofRange { get; }
    internal static string Expr_ArgumentType { get; }
    internal static string Expr_ArgumentTypeInteger { get; }
    internal static string Expr_BindFailure { get; }
    internal static string Expr_ComputeNotAggregate { get; }
    internal static string Expr_DatatypeConvertion { get; }
    internal static string Expr_DatavalueConvertion { get; }
    internal static string Expr_DivideByZero { get; }
    internal static string Expr_EvalNoContext { get; }
    internal static string Expr_ExpressionTooComplex { get; }
    internal static string Expr_ExpressionUnbound { get; }
    internal static string Expr_FilterConvertion { get; }
    internal static string Expr_FunctionArgumentCount { get; }
    internal static string Expr_InvalidDate { get; }
    internal static string Expr_InvalidHoursArgument { get; }
    internal static string Expr_InvalidMinutesArgument { get; }
    internal static string Expr_InvalidName { get; }
    internal static string Expr_InvalidNameBracketing { get; }
    internal static string Expr_InvalidPattern { get; }
    internal static string Expr_InvalidString { get; }
    internal static string Expr_InvalidTimeZoneRange { get; }
    internal static string Expr_InvalidType { get; }
    internal static string Expr_InvokeArgument { get; }
    internal static string Expr_InWithoutList { get; }
    internal static string Expr_InWithoutParentheses { get; }
    internal static string Expr_IsSyntax { get; }
    internal static string Expr_LookupArgument { get; }
    internal static string Expr_MismatchKindandTimeSpan { get; }
    internal static string Expr_MissingOperand { get; }
    internal static string Expr_MissingOperandBefore { get; }
    internal static string Expr_MissingRightParen { get; }
    internal static string Expr_NonConstantArgument { get; }
    internal static string Expr_NYI { get; }
    internal static string Expr_Overflow { get; }
    internal static string Expr_Syntax { get; }
    internal static string Expr_TooManyRightParentheses { get; }
    internal static string Expr_TypeMismatch { get; }
    internal static string Expr_TypeMismatchInBinop { get; }
    internal static string Expr_UnboundName { get; }
    internal static string Expr_UndefinedFunction { get; }
    internal static string Expr_UnknownToken { get; }
    internal static string Expr_UnknownToken1 { get; }
    internal static string Expr_UnresolvedRelation { get; }
    internal static string Expr_UnsupportedOperator { get; }
    internal static string Expr_UnsupportedType { get; }
    internal static string ExtendedPropertiesDescr { get; }
    internal static string FailToCreateEnclaveSession { get; }
    internal static string FailToParseAttestationInfo { get; }
    internal static string FailToParseAttestationToken { get; }
    internal static string ForeignKeyConstraintAcceptRejectRuleDescr { get; }
    internal static string ForeignKeyConstraintChildColumnsDescr { get; }
    internal static string ForeignKeyConstraintDeleteRuleDescr { get; }
    internal static string ForeignKeyConstraintParentColumnsDescr { get; }
    internal static string ForeignKeyConstraintUpdateRuleDescr { get; }
    internal static string ForeignKeyRelatedTableDescr { get; }
    internal static string GetAttestationSigningCertificateFailedInvalidCertificate { get; }
    internal static string GetAttestationSigningCertificateRequestFailedFormat { get; }
    internal static string GetAttestationTokenSigningKeysFailed { get; }
    internal static string GetSharedSecretFailed { get; }
    internal static string GT_Disabled { get; }
    internal static string GT_UnsupportedSysTxVersion { get; }
    internal static string IEnumerableOfSqlDataRecordHasNoRows { get; }
    internal static string InvalidArgumentToBase64UrlDecoder { get; }
    internal static string InvalidArgumentToSHA256 { get; }
    internal static string InvalidAttestationToken { get; }
    internal static string InvalidClaimInAttestationToken { get; }
    internal static string InvalidSchemaTableOrdinals { get; }
    internal static string KeyConstraintColumnsDescr { get; }
    internal static string KeyConstraintIsPrimaryKeyDescr { get; }
    internal static string Load_ReadOnlyDataModified { get; }
    internal static string LocalDB_BadConfigSectionType { get; }
    internal static string LocalDB_CreateFailed { get; }
    internal static string LocalDB_FailedGetDLLHandle { get; }
    internal static string LocalDB_InvalidVersion { get; }
    internal static string LocalDB_MethodNotFound { get; }
    internal static string LocalDB_UnobtainableMessage { get; }
    internal static string LocalDBNotSupported { get; }
    internal static string MDF_AmbiguousCollectionName { get; }
    internal static string MDF_CollectionNameISNotUnique { get; }
    internal static string MDF_DataTableDoesNotExist { get; }
    internal static string MDF_IncorrectNumberOfDataSourceInformationRows { get; }
    internal static string MDF_InvalidRestrictionValue { get; }
    internal static string MDF_InvalidXml { get; }
    internal static string MDF_InvalidXmlInvalidValue { get; }
    internal static string MDF_InvalidXmlMissingColumn { get; }
    internal static string MDF_MissingDataSourceInformationColumn { get; }
    internal static string MDF_MissingRestrictionColumn { get; }
    internal static string MDF_MissingRestrictionRow { get; }
    internal static string MDF_NoColumns { get; }
    internal static string MDF_QueryFailed { get; }
    internal static string MDF_TooManyRestrictions { get; }
    internal static string MDF_UnableToBuildCollection { get; }
    internal static string MDF_UndefinedCollection { get; }
    internal static string MDF_UndefinedPopulationMechanism { get; }
    internal static string MDF_UnsupportedVersion { get; }
    internal static string MetaType_SingleValuedStructNotSupported { get; }
    internal static string MissingClaimInAttestationToken { get; }
    internal static string NamedSimpleType_InvalidDuplicateNamedSimpleTypeDelaration { get; }
    internal static string net_auth_message_not_encrypted { get; }
    internal static string net_context_buffer_too_small { get; }
    internal static string net_gssapi_operation_failed { get; }
    internal static string net_gssapi_operation_failed_detailed { get; }
    internal static string net_invalid_enum { get; }
    internal static string net_log_operation_failed_with_error { get; }
    internal static string net_MethodNotImplementedException { get; }
    internal static string net_nego_channel_binding_not_supported { get; }
    internal static string net_nego_not_supported_empty_target_with_defaultcreds { get; }
    internal static string net_nego_protection_level_not_supported { get; }
    internal static string net_nego_server_not_supported { get; }
    internal static string net_ntlm_not_possible_default_cred { get; }
    internal static string net_securitypackagesupport { get; }
    internal static string NullSchemaTableDataTypeNotSupported { get; }
    internal static string Odbc_CantAllocateEnvironmentHandle { get; }
    internal static string Odbc_CantEnableConnectionpooling { get; }
    internal static string Odbc_CantSetPropertyOnOpenConnection { get; }
    internal static string Odbc_ConnectionClosed { get; }
    internal static string Odbc_ExceptionMessage { get; }
    internal static string Odbc_ExceptionNoInfoMsg { get; }
    internal static string Odbc_FailedToGetDescriptorHandle { get; }
    internal static string ODBC_GetSchemaRestrictionRequired { get; }
    internal static string Odbc_GetTypeMapping_UnknownType { get; }
    internal static string Odbc_MDACWrongVersion { get; }
    internal static string Odbc_NegativeArgument { get; }
    internal static string Odbc_NoMappingForSqlTransactionLevel { get; }
    internal static string Odbc_NotInTransaction { get; }
    internal static string ODBC_NotSupportedEnumerationValue { get; }
    internal static string Odbc_NullData { get; }
    internal static string ODBC_ODBCCommandText { get; }
    internal static string Odbc_OpenConnectionNoOwner { get; }
    internal static string Odbc_UnknownOdbcType { get; }
    internal static string Odbc_UnknownSQLType { get; }
    internal static string Odbc_UnknownURTType { get; }
    internal static string OdbcCommandBuilder_DataAdapter { get; }
    internal static string OdbcCommandBuilder_QuotePrefix { get; }
    internal static string OdbcCommandBuilder_QuoteSuffix { get; }
    internal static string OdbcConnection_ConnectionString { get; }
    internal static string OdbcConnection_ConnectionStringTooLong { get; }
    internal static string OdbcConnection_ConnectionTimeout { get; }
    internal static string OdbcConnection_Database { get; }
    internal static string OdbcConnection_DataSource { get; }
    internal static string OdbcConnection_Driver { get; }
    internal static string OdbcConnection_ServerVersion { get; }
    internal static string OdbcParameter_OdbcType { get; }
    internal static string OleDb_AsynchronousNotSupported { get; }
    internal static string OleDb_BadAccessor { get; }
    internal static string OleDb_BadStatus_ParamAcc { get; }
    internal static string OleDb_BadStatusRowAccessor { get; }
    internal static string OleDb_CanNotDetermineDecimalSeparator { get; }
    internal static string OleDb_CantConvertValue { get; }
    internal static string OleDb_CantCreate { get; }
    internal static string OleDb_CommandParameterBadAccessor { get; }
    internal static string OleDb_CommandParameterCantConvertValue { get; }
    internal static string OleDb_CommandParameterDataOverflow { get; }
    internal static string OleDb_CommandParameterDefault { get; }
    internal static string OleDb_CommandParameterError { get; }
    internal static string OleDb_CommandParameterSignMismatch { get; }
    internal static string OleDb_CommandParameterUnavailable { get; }
    internal static string OleDb_CommandTextNotSupported { get; }
    internal static string OleDb_ConfigUnableToLoadXmlMetaDataFile { get; }
    internal static string OleDb_ConfigWrongNumberOfValues { get; }
    internal static string OleDb_ConnectionStringSyntax { get; }
    internal static string OleDb_DataOverflow { get; }
    internal static string OleDb_DBBindingGetVector { get; }
    internal static string OleDb_FailedGetDescription { get; }
    internal static string OleDb_FailedGetSource { get; }
    internal static string OleDb_Fill_EmptyRecord { get; }
    internal static string OleDb_Fill_EmptyRecordSet { get; }
    internal static string OleDb_Fill_NotADODB { get; }
    internal static string OleDb_GVtUnknown { get; }
    internal static string OleDb_IDBInfoNotSupported { get; }
    internal static string OleDb_InvalidProviderSpecified { get; }
    internal static string OleDb_InvalidRestrictionsDbInfoKeywords { get; }
    internal static string OleDb_InvalidRestrictionsDbInfoLiteral { get; }
    internal static string OleDb_InvalidRestrictionsSchemaGuids { get; }
    internal static string OleDb_ISourcesRowsetNotSupported { get; }
    internal static string OleDb_MDACNotAvailable { get; }
    internal static string OleDb_MDACWrongVersion { get; }
    internal static string OleDb_MSDASQLNotSupported { get; }
    internal static string OleDb_NoErrorInformation { get; }
    internal static string OleDb_NoErrorInformation2 { get; }
    internal static string OleDb_NoErrorMessage { get; }
    internal static string OleDb_NoProviderSpecified { get; }
    internal static string OleDb_NoProviderSupportForParameters { get; }
    internal static string OleDb_NoProviderSupportForSProcResetParameters { get; }
    internal static string OLEDB_NotSupportedEnumerationValue { get; }
    internal static string OleDb_NotSupportedSchemaTable { get; }
    internal static string OLEDB_OLEDBCommandText { get; }
    internal static string OleDb_PossiblePromptNotUserInteractive { get; }
    internal static string OleDb_PropertyBadColumn { get; }
    internal static string OleDb_PropertyBadOption { get; }
    internal static string OleDb_PropertyBadValue { get; }
    internal static string OleDb_PropertyConflicting { get; }
    internal static string OleDb_PropertyNotAllSettable { get; }
    internal static string OleDb_PropertyNotAvailable { get; }
    internal static string OleDb_PropertyNotSet { get; }
    internal static string OleDb_PropertyNotSettable { get; }
    internal static string OleDb_PropertyNotSupported { get; }
    internal static string OleDb_PropertyStatusUnknown { get; }
    internal static string OleDb_ProviderUnavailable { get; }
    internal static string OleDb_SchemaRowsetsNotSupported { get; }
    internal static string OleDb_SignMismatch { get; }
    internal static string OleDb_SVtUnknown { get; }
    internal static string OleDb_ThreadApartmentState { get; }
    internal static string OleDb_TransactionsNotSupported { get; }
    internal static string OleDb_Unavailable { get; }
    internal static string OleDb_UnexpectedStatusValue { get; }
    internal static string OleDb_UninitializedParameters { get; }
    internal static string OleDbCommandBuilder_DataAdapter { get; }
    internal static string OleDbCommandBuilder_DecimalSeparator { get; }
    internal static string OleDbCommandBuilder_QuotePrefix { get; }
    internal static string OleDbCommandBuilder_QuoteSuffix { get; }
    internal static string OleDbConnection_ConnectionString { get; }
    internal static string OleDbConnection_ConnectionTimeout { get; }
    internal static string OleDbConnection_Database { get; }
    internal static string OleDbConnection_DataSource { get; }
    internal static string OleDbConnection_Provider { get; }
    internal static string OleDbConnection_ServerVersion { get; }
    internal static string OleDbParameter_OleDbType { get; }
    internal static string propertyChangedEventDescr { get; }
    internal static string Range_Argument { get; }
    internal static string Range_NullRange { get; }
    internal static string RbTree_EnumerationBroken { get; }
    internal static string RbTree_InvalidState { get; }
    internal static string RecordManager_MinimumCapacity { get; }
    internal static string SEC_ProtocolWarning { get; }
    internal static string SNI_ERROR_1 { get; }
    internal static string SNI_ERROR_10 { get; }
    internal static string SNI_ERROR_11 { get; }
    internal static string SNI_ERROR_12 { get; }
    internal static string SNI_ERROR_13 { get; }
    internal static string SNI_ERROR_14 { get; }
    internal static string SNI_ERROR_15 { get; }
    internal static string SNI_ERROR_16 { get; }
    internal static string SNI_ERROR_17 { get; }
    internal static string SNI_ERROR_18 { get; }
    internal static string SNI_ERROR_19 { get; }
    internal static string SNI_ERROR_2 { get; }
    internal static string SNI_ERROR_20 { get; }
    internal static string SNI_ERROR_21 { get; }
    internal static string SNI_ERROR_22 { get; }
    internal static string SNI_ERROR_23 { get; }
    internal static string SNI_ERROR_24 { get; }
    internal static string SNI_ERROR_25 { get; }
    internal static string SNI_ERROR_26 { get; }
    internal static string SNI_ERROR_27 { get; }
    internal static string SNI_ERROR_28 { get; }
    internal static string SNI_ERROR_29 { get; }
    internal static string SNI_ERROR_3 { get; }
    internal static string SNI_ERROR_30 { get; }
    internal static string SNI_ERROR_31 { get; }
    internal static string SNI_ERROR_32 { get; }
    internal static string SNI_ERROR_33 { get; }
    internal static string SNI_ERROR_34 { get; }
    internal static string SNI_ERROR_35 { get; }
    internal static string SNI_ERROR_36 { get; }
    internal static string SNI_ERROR_37 { get; }
    internal static string SNI_ERROR_38 { get; }
    internal static string SNI_ERROR_39 { get; }
    internal static string SNI_ERROR_4 { get; }
    internal static string SNI_ERROR_40 { get; }
    internal static string SNI_ERROR_41 { get; }
    internal static string SNI_ERROR_42 { get; }
    internal static string SNI_ERROR_43 { get; }
    internal static string SNI_ERROR_44 { get; }
    internal static string SNI_ERROR_47 { get; }
    internal static string SNI_ERROR_48 { get; }
    internal static string SNI_ERROR_49 { get; }
    internal static string SNI_ERROR_5 { get; }
    internal static string SNI_ERROR_50 { get; }
    internal static string SNI_ERROR_51 { get; }
    internal static string SNI_ERROR_52 { get; }
    internal static string SNI_ERROR_53 { get; }
    internal static string SNI_ERROR_54 { get; }
    internal static string SNI_ERROR_55 { get; }
    internal static string SNI_ERROR_56 { get; }
    internal static string SNI_ERROR_57 { get; }
    internal static string SNI_ERROR_6 { get; }
    internal static string SNI_ERROR_7 { get; }
    internal static string SNI_ERROR_8 { get; }
    internal static string SNI_ERROR_9 { get; }
    internal static string SNI_IncorrectPhysicalConnectionType { get; }
    internal static string SNI_PlatformNotSupportedNetFx { get; }
    internal static string SNI_PN0 { get; }
    internal static string SNI_PN1 { get; }
    internal static string SNI_PN10 { get; }
    internal static string SNI_PN11 { get; }
    internal static string SNI_PN2 { get; }
    internal static string SNI_PN3 { get; }
    internal static string SNI_PN4 { get; }
    internal static string SNI_PN5 { get; }
    internal static string SNI_PN6 { get; }
    internal static string SNI_PN7 { get; }
    internal static string SNI_PN8 { get; }
    internal static string SNI_PN9 { get; }
    internal static string Snix_AutoEnlist { get; }
    internal static string Snix_Close { get; }
    internal static string Snix_Connect { get; }
    internal static string Snix_EnableMars { get; }
    internal static string Snix_Execute { get; }
    internal static string Snix_GetMarsSession { get; }
    internal static string Snix_Login { get; }
    internal static string Snix_LoginSspi { get; }
    internal static string Snix_PreLogin { get; }
    internal static string Snix_PreLoginBeforeSuccessfullWrite { get; }
    internal static string Snix_ProcessSspi { get; }
    internal static string Snix_Read { get; }
    internal static string Snix_SendRows { get; }
    internal static string SQL_ArgumentLengthMismatch { get; }
    internal static string SQL_AsyncConnectionRequired { get; }
    internal static string SQL_AsyncOperationCompleted { get; }
    internal static string SQL_AuthenticationAndIntegratedSecurity { get; }
    internal static string SQL_BatchedUpdatesNotAvailableOnContextConnection { get; }
    internal static string SQL_BulkCopyDestinationTableName { get; }
    internal static string SQL_BulkLoadCannotConvertValue { get; }
    internal static string SQL_BulkLoadCannotConvertValueWithoutRowNo { get; }
    internal static string SQL_BulkLoadConflictingTransactionOption { get; }
    internal static string SQL_BulkLoadExistingTransaction { get; }
    internal static string SQL_BulkLoadInvalidDestinationTable { get; }
    internal static string SQL_BulkLoadInvalidOperationInsideEvent { get; }
    internal static string SQL_BulkLoadInvalidOrderHint { get; }
    internal static string SQL_BulkLoadInvalidTimeout { get; }
    internal static string SQL_BulkLoadInvalidVariantValue { get; }
    internal static string Sql_BulkLoadLcidMismatch { get; }
    internal static string SQL_BulkLoadMappingInaccessible { get; }
    internal static string SQL_BulkLoadMappingsNamesOrOrdinalsOnly { get; }
    internal static string SQL_BulkLoadMissingDestinationTable { get; }
    internal static string SQL_BulkLoadNoCollation { get; }
    internal static string SQL_BulkLoadNonMatchingColumnMapping { get; }
    internal static string SQL_BulkLoadNonMatchingColumnName { get; }
    internal static string SQL_BulkLoadNotAllowDBNull { get; }
    internal static string SQL_BulkLoadOrderHintDuplicateColumn { get; }
    internal static string SQL_BulkLoadOrderHintInvalidColumn { get; }
    internal static string SQL_BulkLoadPendingOperation { get; }
    internal static string SQL_BulkLoadStringTooLong { get; }
    internal static string SQL_BulkLoadUnspecifiedSortOrder { get; }
    internal static string SQL_CannotCreateAuthInitializer { get; }
    internal static string SQL_CannotCreateAuthProvider { get; }
    internal static string SQL_CannotCreateNormalizer { get; }
    internal static string SQL_CannotFindAuthProvider { get; }
    internal static string SQL_CannotGetAuthProviderConfig { get; }
    internal static string SQL_CannotGetDTCAddress { get; }
    internal static string SQL_CannotInitializeAuthProvider { get; }
    internal static string SQL_CannotModifyPropertyAsyncOperationInProgress { get; }
    internal static string SQL_Certificate { get; }
    internal static string SQL_ChangePasswordArgumentMissing { get; }
    internal static string SQL_ChangePasswordConflictsWithSSPI { get; }
    internal static string SQL_ChangePasswordRequiresYukon { get; }
    internal static string SQL_ChangePasswordUseOfUnallowedKey { get; }
    internal static string SQL_ConnectionDoomed { get; }
    internal static string SQL_ConnectionLockedForBcpEvent { get; }
    internal static string SQL_ContextAllowsLimitedKeywords { get; }
    internal static string SQL_ContextAllowsOnlyTypeSystem2005 { get; }
    internal static string SQL_ContextConnectionIsInUse { get; }
    internal static string SQL_ContextUnavailableOutOfProc { get; }
    internal static string SQL_ContextUnavailableWhileInProc { get; }
    internal static string SQL_CredentialsNotProvided { get; }
    internal static string SQL_CTAIPNotSupportedByServer { get; }
    internal static string SQL_CultureIdError { get; }
    internal static string SQL_DbTypeNotSupportedOnThisPlatform { get; }
    internal static string SQL_DeviceFlowWithUsernamePassword { get; }
    internal static string SQL_Duration_Login_Begin { get; }
    internal static string SQL_Duration_Login_ProcessConnectionAuth { get; }
    internal static string SQL_Duration_PostLogin { get; }
    internal static string SQL_Duration_PreLogin_Begin { get; }
    internal static string SQL_Duration_PreLoginHandshake { get; }
    internal static string SQL_EncryptionNotSupportedByClient { get; }
    internal static string SQL_EncryptionNotSupportedByServer { get; }
    internal static string SQL_EnumeratedRecordFieldCountChanged { get; }
    internal static string SQL_EnumeratedRecordMetaDataChanged { get; }
    internal static string SQL_ExceedsMaxDataLength { get; }
    internal static string SQL_ExClientConnectionId { get; }
    internal static string SQL_ExErrorNumberStateClass { get; }
    internal static string SQL_ExOriginalClientConnectionId { get; }
    internal static string SQL_ExRoutingDestination { get; }
    internal static string SQL_FatalTimeout { get; }
    internal static string SQL_GlobalizationInvariantModeNotSupported { get; }
    internal static string SQL_InstanceFailure { get; }
    internal static string SQL_IntegratedWithPassword { get; }
    internal static string SQL_InteractiveWithPassword { get; }
    internal static string Sql_InternalError { get; }
    internal static string SQL_InvalidBufferSizeOrIndex { get; }
    internal static string SQL_InvalidDataLength { get; }
    internal static string SQL_InvalidInternalPacketSize { get; }
    internal static string SQL_InvalidOptionLength { get; }
    internal static string SQL_InvalidPacketSizeValue { get; }
    internal static string SQL_InvalidParameterNameLength { get; }
    internal static string SQL_InvalidParameterTypeNameFormat { get; }
    internal static string SQL_InvalidPartnerConfiguration { get; }
    internal static string SQL_InvalidRead { get; }
    internal static string SQL_InvalidServerCertificate { get; }
    internal static string SQL_InvalidSqlDbTypeWithOneAllowedType { get; }
    internal static string SQL_InvalidSQLServerVersionUnknown { get; }
    internal static string SQL_InvalidSSPIPacketSize { get; }
    internal static string SQL_InvalidTDSPacketSize { get; }
    internal static string SQL_InvalidTDSVersion { get; }
    internal static string SQL_InvalidUdt3PartNameFormat { get; }
    internal static string SQL_KerberosTicketMissingError { get; }
    internal static string SQL_MarsUnsupportedOnConnection { get; }
    internal static string Sql_MismatchedMetaDataDirectionArrayLengths { get; }
    internal static string SQL_MoneyOverflow { get; }
    internal static string SQL_MSALFailure { get; }
    internal static string SQL_MSALInnerException { get; }
    internal static string SQL_NestedTransactionScopesNotSupported { get; }
    internal static string SQL_NetworkLibraryNotSupported { get; }
    internal static string SQL_NonBlobColumn { get; }
    internal static string SQL_NonCharColumn { get; }
    internal static string SQL_NonInteractiveWithPassword { get; }
    internal static string SQL_NonLocalSSEInstance { get; }
    internal static string SQL_NonXmlResult { get; }
    internal static string SQL_NotAvailableOnContextConnection { get; }
    internal static string SQL_NotificationsNotAvailableOnContextConnection { get; }
    internal static string SQL_NotificationsRequireYukon { get; }
    internal static string SQL_NotSupportedEnumerationValue { get; }
    internal static string Sql_NullCommandText { get; }
    internal static string SQL_NullEmptyTransactionName { get; }
    internal static string SQL_OpenResultCountExceeded { get; }
    internal static string SQL_OperationCancelled { get; }
    internal static string SQL_ParameterCannotBeEmpty { get; }
    internal static string SQL_ParameterDirectionInvalidForOptimizedBinding { get; }
    internal static string SQL_ParameterInvalidVariant { get; }
    internal static string SQL_ParameterTypeNameRequired { get; }
    internal static string SQL_ParsingError { get; }
    internal static string SQL_ParsingErrorAuthLibraryType { get; }
    internal static string SQL_ParsingErrorFeatureId { get; }
    internal static string SQL_ParsingErrorLength { get; }
    internal static string SQL_ParsingErrorOffset { get; }
    internal static string SQL_ParsingErrorStatus { get; }
    internal static string SQL_ParsingErrorToken { get; }
    internal static string SQL_ParsingErrorValue { get; }
    internal static string SQL_ParsingErrorWithState { get; }
    internal static string SQL_PendingBeginXXXExists { get; }
    internal static string SQL_PipeErrorRequiresSendEnd { get; }
    internal static string SQL_PrecisionValueOutOfRange { get; }
    internal static string SQL_RemoteCertificateChainErrors { get; }
    internal static string SQL_RemoteCertificateNameMismatch { get; }
    internal static string SQL_RemoteCertificateNotAvailable { get; }
    internal static string SQL_ScaleValueOutOfRange { get; }
    internal static string SQL_SettingCredentialWithDeviceFlow { get; }
    internal static string SQL_SettingCredentialWithIntegrated { get; }
    internal static string SQL_SettingCredentialWithInteractive { get; }
    internal static string SQL_SettingCredentialWithNonInteractive { get; }
    internal static string SQL_SettingDeviceFlowWithCredential { get; }
    internal static string SQL_SettingIntegratedWithCredential { get; }
    internal static string SQL_SettingInteractiveWithCredential { get; }
    internal static string SQL_SettingNonInteractiveWithCredential { get; }
    internal static string SQL_SevereError { get; }
    internal static string SQL_SmallDateTimeOverflow { get; }
    internal static string SQL_SnapshotNotSupported { get; }
    internal static string SQL_SNIPacketAllocationFailure { get; }
    internal static string SQL_SocketDidNotThrow { get; }
    internal static string SQL_SqlCommandCommandText { get; }
    internal static string SQL_SqlRecordReadOnly { get; }
    internal static string SQL_SqlRecordReadOnly2 { get; }
    internal static string SQL_SqlResultSetClosed { get; }
    internal static string SQL_SqlResultSetClosed2 { get; }
    internal static string SQL_SqlResultSetCommandNotInSameConnection { get; }
    internal static string SQL_SqlResultSetNoAcceptableCursor { get; }
    internal static string SQL_SqlResultSetRowDeleted { get; }
    internal static string SQL_SqlResultSetRowDeleted2 { get; }
    internal static string SQL_SqlUpdatableRecordReadOnly { get; }
    internal static string SQL_SSPIGenerateError { get; }
    internal static string SQL_SSPIInitializeError { get; }
    internal static string SQL_StreamNotSupportOnColumnType { get; }
    internal static string SQL_StreamReadNotSupported { get; }
    internal static string SQL_StreamSeekNotSupported { get; }
    internal static string SQL_StreamWriteNotSupported { get; }
    internal static string SQL_TDS8_NotSupported_Netstandard2_0 { get; }
    internal static string SQL_TDSParserTableName { get; }
    internal static string SQL_TextReaderNotSupportOnColumnType { get; }
    internal static string SQL_Timeout { get; }
    internal static string SQL_Timeout_Active_Directory_DeviceFlow_Authentication { get; }
    internal static string SQL_Timeout_Active_Directory_Interactive_Authentication { get; }
    internal static string SQL_Timeout_Execution { get; }
    internal static string SQL_Timeout_FailoverInfo { get; }
    internal static string SQL_Timeout_Login_Begin { get; }
    internal static string SQL_Timeout_Login_ProcessConnectionAuth { get; }
    internal static string SQL_Timeout_PostLogin { get; }
    internal static string SQL_Timeout_PreLogin_Begin { get; }
    internal static string SQL_Timeout_PreLogin_ConsumeHandshake { get; }
    internal static string SQL_Timeout_PreLogin_InitializeConnection { get; }
    internal static string SQL_Timeout_PreLogin_SendHandshake { get; }
    internal static string SQL_Timeout_RoutingDestinationInfo { get; }
    internal static string SQL_TimeOverflow { get; }
    internal static string SQL_TimeScaleValueOutOfRange { get; }
    internal static string SQL_TooManyValues { get; }
    internal static string SQL_TypeName { get; }
    internal static string SQL_UDTTypeName { get; }
    internal static string SQL_UnexpectedSmiEvent { get; }
    internal static string SQL_UnknownSysTxIsolationLevel { get; }
    internal static string SQL_UnsupportedAuthentication { get; }
    internal static string SQL_UnsupportedAuthenticationByProvider { get; }
    internal static string SQL_UnsupportedAuthenticationSpecified { get; }
    internal static string SQL_UnsupportedFeature { get; }
    internal static string SQL_UnsupportedKeyword { get; }
    internal static string SQL_UnsupportedSqlAuthenticationMethod { get; }
    internal static string SQL_UnsupportedSysTxVersion { get; }
    internal static string SQL_UnsupportedToken { get; }
    internal static string SQL_UserInstanceFailoverNotCompatible { get; }
    internal static string SQL_UserInstanceFailure { get; }
    internal static string SQL_UserInstanceNotAvailableInProc { get; }
    internal static string SQL_WrongType { get; }
    internal static string SQL_XmlReaderNotSupportOnColumnType { get; }
    internal static string SqlAppContextSwitchManager_InvalidValue { get; }
    internal static string SqlCommand_Notification { get; }
    internal static string SqlCommand_NotificationAutoEnlist { get; }
    internal static string SqlCommandBuilder_DataAdapter { get; }
    internal static string SqlCommandBuilder_DecimalSeparator { get; }
    internal static string SqlCommandBuilder_QuotePrefix { get; }
    internal static string SqlCommandBuilder_QuoteSuffix { get; }
    internal static string SqlConnection_AccessToken { get; }
    internal static string SqlConnection_Asynchronous { get; }
    internal static string SqlConnection_ClientConnectionId { get; }
    internal static string SqlConnection_ConnectionString { get; }
    internal static string SqlConnection_ConnectionTimeout { get; }
    internal static string SqlConnection_Credential { get; }
    internal static string SqlConnection_CustomColumnEncryptionKeyStoreProviders { get; }
    internal static string SqlConnection_Database { get; }
    internal static string SqlConnection_DataSource { get; }
    internal static string SqlConnection_PacketSize { get; }
    internal static string SqlConnection_Replication { get; }
    internal static string SqlConnection_ServerProcessId { get; }
    internal static string SqlConnection_ServerVersion { get; }
    internal static string SqlConnection_StatisticsEnabled { get; }
    internal static string SqlConnection_WorkstationId { get; }
    internal static string SqlConvert_ConvertFailed { get; }
    internal static string SQLCR_AllAttemptsFailed { get; }
    internal static string SQLCR_EncryptionChanged { get; }
    internal static string SQLCR_InvalidConnectRetryCountValue { get; }
    internal static string SQLCR_InvalidConnectRetryIntervalValue { get; }
    internal static string SQLCR_NextAttemptWillExceedQueryTimeout { get; }
    internal static string SQLCR_NoCRAckAtReconnection { get; }
    internal static string SQLCR_TDSVestionNotPreserved { get; }
    internal static string SQLCR_UnrecoverableClient { get; }
    internal static string SQLCR_UnrecoverableServer { get; }
    internal static string SqlDelegatedTransaction_PromotionFailed { get; }
    internal static string SqlDependency_AddCommandDependency { get; }
    internal static string SqlDependency_DatabaseBrokerDisabled { get; }
    internal static string SqlDependency_DefaultOptionsButNoStart { get; }
    internal static string SqlDependency_Duplicate { get; }
    internal static string SqlDependency_DuplicateStart { get; }
    internal static string SqlDependency_EventNoDuplicate { get; }
    internal static string SqlDependency_HasChanges { get; }
    internal static string SqlDependency_Id { get; }
    internal static string SqlDependency_IdMismatch { get; }
    internal static string SqlDependency_InvalidTimeout { get; }
    internal static string SqlDependency_NoMatchingServerDatabaseStart { get; }
    internal static string SqlDependency_NoMatchingServerStart { get; }
    internal static string SqlDependency_OnChange { get; }
    internal static string SqlDependency_SqlDependency { get; }
    internal static string SqlDependency_UnexpectedValueOnDeserialize { get; }
    internal static string SqlFileStream_FileAlreadyInTransaction { get; }
    internal static string SqlFileStream_InvalidParameter { get; }
    internal static string SqlFileStream_InvalidPath { get; }
    internal static string SqlFileStream_NotSupported { get; }
    internal static string SqlFileStream_PathNotValidDiskResource { get; }
    internal static string SqlMetaData_InvalidSqlDbTypeForConstructorFormat { get; }
    internal static string SqlMetaData_NameTooLong { get; }
    internal static string SqlMetaData_NoMetadata { get; }
    internal static string SqlMetaData_SpecifyBothSortOrderAndOrdinal { get; }
    internal static string SqlMisc_AlreadyFilledMessage { get; }
    internal static string SqlMisc_ArithOverflowMessage { get; }
    internal static string SqlMisc_BufferInsufficientMessage { get; }
    internal static string SqlMisc_ClosedXmlReaderMessage { get; }
    internal static string SqlMisc_CompareDiffCollationMessage { get; }
    internal static string SqlMisc_ConcatDiffCollationMessage { get; }
    internal static string SqlMisc_ConversionOverflowMessage { get; }
    internal static string SqlMisc_DateTimeOverflowMessage { get; }
    internal static string SqlMisc_DivideByZeroMessage { get; }
    internal static string SqlMisc_FormatMessage { get; }
    internal static string SqlMisc_InvalidArraySizeMessage { get; }
    internal static string SqlMisc_InvalidDateTimeMessage { get; }
    internal static string SqlMisc_InvalidFirstDayMessage { get; }
    internal static string SqlMisc_InvalidFlagMessage { get; }
    internal static string SqlMisc_InvalidOpStreamClosed { get; }
    internal static string SqlMisc_InvalidOpStreamNonReadable { get; }
    internal static string SqlMisc_InvalidOpStreamNonSeekable { get; }
    internal static string SqlMisc_InvalidOpStreamNonWritable { get; }
    internal static string SqlMisc_InvalidPrecScaleMessage { get; }
    internal static string SqlMisc_LenTooLargeMessage { get; }
    internal static string SqlMisc_MessageString { get; }
    internal static string SqlMisc_NoBufferMessage { get; }
    internal static string SqlMisc_NotFilledMessage { get; }
    internal static string SqlMisc_NullString { get; }
    internal static string SqlMisc_NullValueMessage { get; }
    internal static string SqlMisc_NumeToDecOverflowMessage { get; }
    internal static string SqlMisc_SetNonZeroLenOnNullMessage { get; }
    internal static string SqlMisc_SqlTypeMessage { get; }
    internal static string SqlMisc_StreamClosedMessage { get; }
    internal static string SqlMisc_StreamErrorMessage { get; }
    internal static string SqlMisc_SubclassMustOverride { get; }
    internal static string SqlMisc_TimeZoneSpecifiedMessage { get; }
    internal static string SqlMisc_TruncationMaxDataMessage { get; }
    internal static string SqlMisc_TruncationMessage { get; }
    internal static string SqlMisc_WriteNonZeroOffsetOnNullMessage { get; }
    internal static string SqlMisc_WriteOffsetLargerThanLenMessage { get; }
    internal static string SQLMSF_FailoverPartnerNotSupported { get; }
    internal static string SQLNotify_AlreadyHasCommand { get; }
    internal static string SQLNotify_ErrorFormat { get; }
    internal static string SqlNotify_SqlDepCannotBeCreatedInProc { get; }
    internal static string SqlParameter_DBNullNotSupportedForTVP { get; }
    internal static string SqlParameter_InvalidTableDerivedPrecisionForTvp { get; }
    internal static string SqlParameter_Offset { get; }
    internal static string SqlParameter_ParameterName { get; }
    internal static string SqlParameter_SourceColumnNullMapping { get; }
    internal static string SqlParameter_SqlDbType { get; }
    internal static string SqlParameter_TypeName { get; }
    internal static string SqlParameter_UnexpectedTypeNameForNonStruct { get; }
    internal static string SqlParameter_UnsupportedTVPOutputParameter { get; }
    internal static string SqlParameter_XmlSchemaCollectionDatabase { get; }
    internal static string SqlParameter_XmlSchemaCollectionName { get; }
    internal static string SqlParameter_XmlSchemaCollectionOwningSchema { get; }
    internal static string SqlPipe_AlreadyHasAnOpenResultSet { get; }
    internal static string SqlPipe_CommandHookedUpToNonContextConnection { get; }
    internal static string SqlPipe_DoesNotHaveAnOpenResultSet { get; }
    internal static string SqlPipe_IsBusy { get; }
    internal static string SqlPipe_MessageTooLong { get; }
    internal static string SqlProvider_DuplicateSortOrdinal { get; }
    internal static string SqlProvider_InvalidDataColumnMaxLength { get; }
    internal static string SqlProvider_InvalidDataColumnType { get; }
    internal static string SqlProvider_MissingSortOrdinal { get; }
    internal static string SqlProvider_NotEnoughColumnsInStructuredType { get; }
    internal static string SqlProvider_SortOrdinalGreaterThanFieldCount { get; }
    internal static string SqlRetryLogic_InvalidMinMaxPair { get; }
    internal static string SqlRetryLogic_InvalidRange { get; }
    internal static string SqlRetryLogic_RetryCanceled { get; }
    internal static string SqlRetryLogic_RetryExceeded { get; }
    internal static string SQLROR_FailoverNotSupported { get; }
    internal static string SQLROR_InvalidRoutingInfo { get; }
    internal static string SQLROR_RecursiveRoutingNotSupported { get; }
    internal static string SQLROR_TimeoutAfterRoutingInfo { get; }
    internal static string SQLROR_UnexpectedRoutingInfo { get; }
    internal static string SQLTVP_TableTypeCanOnlyBeParameter { get; }
    internal static string SQLUDT_CantLoadAssembly { get; }
    internal static string SQLUDT_InvalidDbId { get; }
    internal static string SQLUDT_InvalidSize { get; }
    internal static string SQLUDT_InvalidSqlType { get; }
    internal static string SqlUdt_InvalidUdtMessage { get; }
    internal static string SQLUDT_InvalidUdtTypeName { get; }
    internal static string SQLUDT_InWhereClause { get; }
    internal static string SQLUDT_MaxByteSizeValue { get; }
    internal static string SQLUDT_Unexpected { get; }
    internal static string SQLUDT_UnexpectedUdtTypeName { get; }
    internal static string SqlUdtReason_CannotSupportNative { get; }
    internal static string SqlUdtReason_CannotSupportUserDefined { get; }
    internal static string SqlUdtReason_MaplessNotYetSupported { get; }
    internal static string SqlUdtReason_MultipleSerFormats { get; }
    internal static string SqlUdtReason_MultivaluedAssemblyId { get; }
    internal static string SqlUdtReason_NativeFormatExplictLayoutNotAllowed { get; }
    internal static string SqlUdtReason_NativeFormatNoFieldSupport { get; }
    internal static string SqlUdtReason_NativeUdtMaxByteSize { get; }
    internal static string SqlUdtReason_NativeUdtNotSequentialLayout { get; }
    internal static string SqlUdtReason_NonSerializableField { get; }
    internal static string SqlUdtReason_NoPublicConstructor { get; }
    internal static string SqlUdtReason_NoPublicConstructors { get; }
    internal static string SqlUdtReason_NotNullable { get; }
    internal static string SqlUdtReason_NotSerializable { get; }
    internal static string SqlUdtReason_NoUdtAttribute { get; }
    internal static string SqlUdtReason_NullPropertyMissing { get; }
    internal static string SqlUdtReason_ParseMethodMissing { get; }
    internal static string SqlUdtReason_ToStringMethodMissing { get; }
    internal static string SqlUdtReason_TypeNotPublic { get; }
    internal static string SSPIInvalidHandleType { get; }
    internal static string StrongTyping_CananotAccessDBNull { get; }
    internal static string StrongTyping_CananotRemoveRelation { get; }
    internal static string StrongTyping_CannotRemoveColumn { get; }
    internal static string TCE_AttestationInfoNotReturnedFromSQLServer { get; }
    internal static string TCE_AttestationProtocolNotSpecifiedForGeneratingEnclavePackage { get; }
    internal static string TCE_AttestationProtocolNotSupported { get; }
    internal static string TCE_AttestationProtocolNotSupportEnclaveType { get; }
    internal static string TCE_AttestationURLNotSupported { get; }
    internal static string TCE_BatchedUpdateColumnEncryptionSettingMismatch { get; }
    internal static string TCE_CannotCreateSqlColumnEncryptionEnclaveProvider { get; }
    internal static string TCE_CannotGetSqlColumnEncryptionEnclaveProviderConfig { get; }
    internal static string TCE_CanOnlyCallOnce { get; }
    internal static string TCE_CertificateNotFound { get; }
    internal static string TCE_CertificateNotFoundSysErr { get; }
    internal static string TCE_CertificateWithNoPrivateKey { get; }
    internal static string TCE_CertificateWithNoPrivateKeySysErr { get; }
    internal static string TCE_ColumnDecryptionFailed { get; }
    internal static string TCE_ColumnEncryptionKeysNotFound { get; }
    internal static string TCE_ColumnMasterKeySignatureNotFound { get; }
    internal static string TCE_ColumnMasterKeySignatureVerificationFailed { get; }
    internal static string TCE_DbConnectionString_AttestationProtocol { get; }
    internal static string TCE_DbConnectionString_ColumnEncryptionSetting { get; }
    internal static string TCE_DbConnectionString_EnclaveAttestationUrl { get; }
    internal static string TCE_DbConnectionString_IPAddressPreference { get; }
    internal static string TCE_DecryptionFailed { get; }
    internal static string TCE_EmptyArgumentInConstructorInternal { get; }
    internal static string TCE_EmptyArgumentInternal { get; }
    internal static string TCE_EmptyCertificateThumbprint { get; }
    internal static string TCE_EmptyCertificateThumbprintSysErr { get; }
    internal static string TCE_EmptyCngKeyId { get; }
    internal static string TCE_EmptyCngKeyIdSysErr { get; }
    internal static string TCE_EmptyCngName { get; }
    internal static string TCE_EmptyCngNameSysErr { get; }
    internal static string TCE_EmptyColumnEncryptionKey { get; }
    internal static string TCE_EmptyCspKeyId { get; }
    internal static string TCE_EmptyCspKeyIdSysErr { get; }
    internal static string TCE_EmptyCspName { get; }
    internal static string TCE_EmptyCspNameSysErr { get; }
    internal static string TCE_EmptyEncryptedColumnEncryptionKey { get; }
    internal static string TCE_EmptyProviderName { get; }
    internal static string TCE_EnclaveComputationsNotSupported { get; }
    internal static string TCE_EnclaveProviderNotFound { get; }
    internal static string TCE_EnclaveProvidersNotConfiguredForEnclaveBasedQuery { get; }
    internal static string TCE_EnclaveTypeNotReturned { get; }
    internal static string TCE_EnclaveTypeNotSupported { get; }
    internal static string TCE_EnclaveTypeNullForEnclaveBasedQuery { get; }
    internal static string TCE_ExceptionWhenGeneratingEnclavePackage { get; }
    internal static string TCE_FailedToEncryptRegisterRulesBytePackage { get; }
    internal static string TCE_InsufficientBuffer { get; }
    internal static string TCE_InvalidAlgorithmVersion { get; }
    internal static string TCE_InvalidAlgorithmVersionInEncryptedCEK { get; }
    internal static string TCE_InvalidAttestationParameterUnableToConvertToUnsignedInt { get; }
    internal static string TCE_InvalidAuthenticationTag { get; }
    internal static string TCE_InvalidCertificateLocation { get; }
    internal static string TCE_InvalidCertificateLocationSysErr { get; }
    internal static string TCE_InvalidCertificatePath { get; }
    internal static string TCE_InvalidCertificatePathSysErr { get; }
    internal static string TCE_InvalidCertificateSignature { get; }
    internal static string TCE_InvalidCertificateStore { get; }
    internal static string TCE_InvalidCertificateStoreSysErr { get; }
    internal static string TCE_InvalidCiphertextLengthInEncryptedCEK { get; }
    internal static string TCE_InvalidCiphertextLengthInEncryptedCEKCng { get; }
    internal static string TCE_InvalidCiphertextLengthInEncryptedCEKCsp { get; }
    internal static string TCE_InvalidCipherTextSize { get; }
    internal static string TCE_InvalidCngKey { get; }
    internal static string TCE_InvalidCngKeySysErr { get; }
    internal static string TCE_InvalidCngPath { get; }
    internal static string TCE_InvalidCngPathSysErr { get; }
    internal static string TCE_InvalidCspKeyId { get; }
    internal static string TCE_InvalidCspKeyIdSysErr { get; }
    internal static string TCE_InvalidCspName { get; }
    internal static string TCE_InvalidCspNameSysErr { get; }
    internal static string TCE_InvalidCspPath { get; }
    internal static string TCE_InvalidCspPathSysErr { get; }
    internal static string TCE_InvalidCustomKeyStoreProviderName { get; }
    internal static string TCE_InvalidDatabaseIdUnableToCastToUnsignedInt { get; }
    internal static string TCE_InvalidEncryptionKeyOrdinalEnclaveMetadata { get; }
    internal static string TCE_InvalidEncryptionKeyOrdinalParameterMetadata { get; }
    internal static string TCE_InvalidEncryptionType { get; }
    internal static string TCE_InvalidKeyEncryptionAlgorithm { get; }
    internal static string TCE_InvalidKeyEncryptionAlgorithmSysErr { get; }
    internal static string TCE_InvalidKeyIdUnableToCastToUnsignedShort { get; }
    internal static string TCE_InvalidKeySize { get; }
    internal static string TCE_InvalidKeyStoreProviderName { get; }
    internal static string TCE_InvalidSignature { get; }
    internal static string TCE_InvalidSignatureInEncryptedCEK { get; }
    internal static string TCE_InvalidSignatureInEncryptedCEKCng { get; }
    internal static string TCE_InvalidSignatureInEncryptedCEKCsp { get; }
    internal static string TCE_KeyDecryptionFailed { get; }
    internal static string TCE_KeyDecryptionFailedCertStore { get; }
    internal static string TCE_LargeCertificatePathLength { get; }
    internal static string TCE_LargeCertificatePathLengthSysErr { get; }
    internal static string TCE_MultipleRowsReturnedForAttestationInfo { get; }
    internal static string TCE_NoAttestationUrlSpecifiedForEnclaveBasedQueryGeneratingEnclavePackage { get; }
    internal static string TCE_NoAttestationUrlSpecifiedForEnclaveBasedQuerySpDescribe { get; }
    internal static string TCE_NotSupportedByServer { get; }
    internal static string TCE_NullArgumentInConstructorInternal { get; }
    internal static string TCE_NullArgumentInternal { get; }
    internal static string TCE_NullCertificatePath { get; }
    internal static string TCE_NullCertificatePathSysErr { get; }
    internal static string TCE_NullCipherText { get; }
    internal static string TCE_NullCngPath { get; }
    internal static string TCE_NullCngPathSysErr { get; }
    internal static string TCE_NullColumnEncryptionAlgorithm { get; }
    internal static string TCE_NullColumnEncryptionKey { get; }
    internal static string TCE_NullColumnEncryptionKeySysErr { get; }
    internal static string TCE_NullCspPath { get; }
    internal static string TCE_NullCspPathSysErr { get; }
    internal static string TCE_NullCustomKeyStoreProviderDictionary { get; }
    internal static string TCE_NullEnclavePackageForEnclaveBasedQuery { get; }
    internal static string TCE_NullEnclaveSessionDuringQueryExecution { get; }
    internal static string TCE_NullEnclaveSessionReturnedFromProvider { get; }
    internal static string TCE_NullEncryptedColumnEncryptionKey { get; }
    internal static string TCE_NullKeyEncryptionAlgorithm { get; }
    internal static string TCE_NullKeyEncryptionAlgorithmSysErr { get; }
    internal static string TCE_NullPlainText { get; }
    internal static string TCE_NullProviderValue { get; }
    internal static string TCE_OffsetOutOfBounds { get; }
    internal static string TCE_ParamDecryptionFailed { get; }
    internal static string TCE_ParamEncryptionFailed { get; }
    internal static string TCE_ParamEncryptionMetaDataMissing { get; }
    internal static string TCE_ParamInvalidForceColumnEncryptionSetting { get; }
    internal static string TCE_ParamUnExpectedEncryptionMetadata { get; }
    internal static string TCE_ProcEncryptionMetaDataMissing { get; }
    internal static string TCE_SequentialAccessNotSupportedOnEncryptedColumn { get; }
    internal static string TCE_SqlColumnEncryptionEnclaveProviderNameCannotBeEmpty { get; }
    internal static string TCE_SqlCommand_ColumnEncryptionSetting { get; }
    internal static string TCE_SqlConnection_ColumnEncryptionKeyCacheTtl { get; }
    internal static string TCE_SqlConnection_ColumnEncryptionQueryMetadataCacheEnabled { get; }
    internal static string TCE_SqlConnection_TrustedColumnMasterKeyPaths { get; }
    internal static string TCE_SqlParameter_ForceColumnEncryption { get; }
    internal static string TCE_StreamNotSupportOnEncryptedColumn { get; }
    internal static string TCE_UnableToEstablishSecureChannel { get; }
    internal static string TCE_UnableToVerifyColumnMasterKeySignature { get; }
    internal static string TCE_UnexpectedDescribeParamFormatAttestationInfo { get; }
    internal static string TCE_UnexpectedDescribeParamFormatParameterMetadata { get; }
    internal static string TCE_UnknownColumnEncryptionAlgorithm { get; }
    internal static string TCE_UnknownColumnEncryptionAlgorithmId { get; }
    internal static string TCE_UnrecognizedKeyStoreProviderName { get; }
    internal static string TCE_UnsupportedDatatype { get; }
    internal static string TCE_UnsupportedNormalizationVersion { get; }
    internal static string TCE_UntrustedKeyPath { get; }
    internal static string TCE_VeryLargeCiphertext { get; }
    internal static string VerifyEnclaveDebuggable { get; }
    internal static string VerifyEnclavePolicyFailedFormat { get; }
    internal static string VerifyEnclaveReportFailed { get; }
    internal static string VerifyEnclaveReportFormatFailed { get; }
    internal static string VerifyHealthCertificateChainFormat { get; }
    internal static string Xml_AttributeValues { get; }
    internal static string Xml_CannotConvert { get; }
    internal static string Xml_CanNotDeserializeObjectType { get; }
    internal static string Xml_CannotInstantiateAbstract { get; }
    internal static string Xml_CircularComplexType { get; }
    internal static string Xml_ColumnConflict { get; }
    internal static string Xml_DataTableInferenceNotSupported { get; }
    internal static string Xml_DatatypeNotDefined { get; }
    internal static string Xml_DuplicateConstraint { get; }
    internal static string Xml_DynamicWithoutXmlSerializable { get; }
    internal static string Xml_ElementTypeNotFound { get; }
    internal static string Xml_FoundEntity { get; }
    internal static string Xml_InvalidField { get; }
    internal static string Xml_InvalidKey { get; }
    internal static string Xml_InvalidPrefix { get; }
    internal static string Xml_InvalidSelector { get; }
    internal static string Xml_IsDataSetAttributeMissingInSchema { get; }
    internal static string Xml_MergeDuplicateDeclaration { get; }
    internal static string Xml_MismatchKeyLength { get; }
    internal static string Xml_MissingAttribute { get; }
    internal static string Xml_MissingRefer { get; }
    internal static string Xml_MissingSQL { get; }
    internal static string Xml_MissingTable { get; }
    internal static string Xml_MultipleParentRows { get; }
    internal static string Xml_MultipleTargetConverterEmpty { get; }
    internal static string Xml_MultipleTargetConverterError { get; }
    internal static string Xml_NestedCircular { get; }
    internal static string Xml_PolymorphismNotSupported { get; }
    internal static string Xml_RelationChildKeyMissing { get; }
    internal static string Xml_RelationChildNameMissing { get; }
    internal static string Xml_RelationParentNameMissing { get; }
    internal static string Xml_RelationTableKeyMissing { get; }
    internal static string Xml_SimpleTypeNotSupported { get; }
    internal static string Xml_TooManyIsDataSetAtributeInSchema { get; }
    internal static string Xml_UndefinedDatatype { get; }
    internal static string Xml_ValueOutOfRange { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AAD_Token_Retrieving_Timeout();
    internal static string get_ADP_AdapterMappingExceptionMessage();
    internal static string get_ADP_Ascending();
    internal static string get_ADP_BadParameterName();
    internal static string get_ADP_CalledTwice();
    internal static string get_ADP_ClosedConnectionError();
    internal static string get_ADP_CollectionIndexInt32();
    internal static string get_ADP_CollectionIndexString();
    internal static string get_ADP_CollectionInvalidType();
    internal static string get_ADP_CollectionIsNotParent();
    internal static string get_ADP_CollectionIsParent();
    internal static string get_ADP_CollectionNullValue();
    internal static string get_ADP_CollectionRemoveInvalidObject();
    internal static string get_ADP_CollectionUniqueValue();
    internal static string get_ADP_ColumnSchemaExpression();
    internal static string get_ADP_ColumnSchemaMismatch();
    internal static string get_ADP_ColumnSchemaMissing1();
    internal static string get_ADP_ColumnSchemaMissing2();
    internal static string get_ADP_CommandTextRequired();
    internal static string get_ADP_ComputerNameEx();
    internal static string get_ADP_ConnecitonRequired_UpdateRows();
    internal static string get_ADP_ConnectionAlreadyOpen();
    internal static string get_ADP_ConnectionIsDisabled();
    internal static string get_ADP_ConnectionRequired();
    internal static string get_ADP_ConnectionRequired_Batch();
    internal static string get_ADP_ConnectionRequired_Clone();
    internal static string get_ADP_ConnectionRequired_Delete();
    internal static string get_ADP_ConnectionRequired_Fill();
    internal static string get_ADP_ConnectionRequired_FillPage();
    internal static string get_ADP_ConnectionRequired_FillSchema();
    internal static string get_ADP_ConnectionRequired_Insert();
    internal static string get_ADP_ConnectionRequired_Update();
    internal static string get_ADP_ConnectionStateMsg();
    internal static string get_ADP_ConnectionStateMsg_Closed();
    internal static string get_ADP_ConnectionStateMsg_Connecting();
    internal static string get_ADP_ConnectionStateMsg_Open();
    internal static string get_ADP_ConnectionStateMsg_OpenExecuting();
    internal static string get_ADP_ConnectionStateMsg_OpenFetching();
    internal static string get_ADP_ConnectionStringSyntax();
    internal static string get_ADP_DataAdapterExceptionMessage();
    internal static string get_ADP_DatabaseNameTooLong();
    internal static string get_ADP_DataReaderClosed();
    internal static string get_ADP_DataReaderNoData();
    internal static string get_ADP_DBConcurrencyExceptionMessage();
    internal static string get_ADP_DbDataUpdatableRecordReadOnly();
    internal static string get_ADP_DbRecordReadOnly();
    internal static string get_ADP_DbTypeNotSupported();
    internal static string get_ADP_DelegatedTransactionPresent();
    internal static string get_ADP_DeriveParametersNotSupported();
    internal static string get_ADP_Descending();
    internal static string get_ADP_DoubleValuedProperty();
    internal static string get_ADP_DynamicSQLJoinUnsupported();
    internal static string get_ADP_DynamicSQLNestedQuote();
    internal static string get_ADP_DynamicSQLNoKeyInfoDelete();
    internal static string get_ADP_DynamicSQLNoKeyInfoRowVersionDelete();
    internal static string get_ADP_DynamicSQLNoKeyInfoRowVersionUpdate();
    internal static string get_ADP_DynamicSQLNoKeyInfoUpdate();
    internal static string get_ADP_DynamicSQLNoTableInfo();
    internal static string get_ADP_EmptyArray();
    internal static string get_ADP_EmptyDatabaseName();
    internal static string get_ADP_EmptyString();
    internal static string get_ADP_EvenLengthLiteralValue();
    internal static string get_ADP_FillChapterAutoIncrement();
    internal static string get_ADP_FillRequiresSourceTableName();
    internal static string get_ADP_FillSchemaRequiresSourceTableName();
    internal static string get_ADP_HexDigitLiteralValue();
    internal static string get_ADP_IncorrectAsyncResult();
    internal static string get_ADP_InternalConnectionError();
    internal static string get_ADP_InternalProviderError();
    internal static string get_ADP_InvalidArgumentLength();
    internal static string get_ADP_InvalidArgumentValue();
    internal static string get_ADP_InvalidBufferSizeOrIndex();
    internal static string get_ADP_InvalidCommandTimeout();
    internal static string get_ADP_InvalidConnectionOptionValue();
    internal static string get_ADP_InvalidConnectionOptionValueLength();
    internal static string get_ADP_InvalidConnectTimeoutValue();
    internal static string get_ADP_InvalidDataDirectory();
    internal static string get_ADP_InvalidDataLength();
    internal static string get_ADP_InvalidDataLength2();
    internal static string get_ADP_InvalidDataType();
    internal static string get_ADP_InvalidDateTimeDigits();
    internal static string get_ADP_InvalidDestinationBufferIndex();
    internal static string get_ADP_InvalidEnumerationValue();
    internal static string get_ADP_InvalidFormatValue();
    internal static string get_ADP_InvalidImplicitConversion();
    internal static string get_ADP_InvalidKey();
    internal static string get_ADP_InvalidMaximumScale();
    internal static string get_ADP_InvalidMaxRecords();
    internal static string get_ADP_InvalidMetaDataValue();
    internal static string get_ADP_InvalidMinMaxPoolSizeValues();
    internal static string get_ADP_InvalidMixedUsageOfAccessTokenAndAuthentication();
    internal static string get_ADP_InvalidMixedUsageOfAccessTokenAndContextConnection();
    internal static string get_ADP_InvalidMixedUsageOfAccessTokenAndCredential();
    internal static string get_ADP_InvalidMixedUsageOfAccessTokenAndIntegratedSecurity();
    internal static string get_ADP_InvalidMixedUsageOfAccessTokenAndTokenCallback();
    internal static string get_ADP_InvalidMixedUsageOfAccessTokenAndUserIDPassword();
    internal static string get_ADP_InvalidMixedUsageOfAccessTokenCallbackAndIntegratedSecurity();
    internal static string get_ADP_InvalidMixedUsageOfAuthenticationAndTokenCallback();
    internal static string get_ADP_InvalidMixedUsageOfCredentialAndAccessToken();
    internal static string get_ADP_InvalidMixedUsageOfSecureAndClearCredential();
    internal static string get_ADP_InvalidMixedUsageOfSecureCredentialAndContextConnection();
    internal static string get_ADP_InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity();
    internal static string get_ADP_InvalidMultipartName();
    internal static string get_ADP_InvalidMultipartNameQuoteUsage();
    internal static string get_ADP_InvalidMultipartNameToManyParts();
    internal static string get_ADP_InvalidOffsetValue();
    internal static string get_ADP_InvalidPrefixSuffix();
    internal static string get_ADP_InvalidSeekOrigin();
    internal static string get_ADP_InvalidSizeValue();
    internal static string get_ADP_InvalidSourceBufferIndex();
    internal static string get_ADP_InvalidSourceColumn();
    internal static string get_ADP_InvalidSourceTable();
    internal static string get_ADP_InvalidStartRecord();
    internal static string get_ADP_InvalidUDL();
    internal static string get_ADP_InvalidValue();
    internal static string get_ADP_InvalidXMLBadVersion();
    internal static string get_ADP_KeywordNotSupported();
    internal static string get_ADP_LiteralValueIsInvalid();
    internal static string get_ADP_LocalTransactionPresent();
    internal static string get_ADP_MismatchedAsyncResult();
    internal static string get_ADP_MissingColumnMapping();
    internal static string get_ADP_MissingConnectionOptionValue();
    internal static string get_ADP_MissingDataReaderFieldType();
    internal static string get_ADP_MissingSelectCommand();
    internal static string get_ADP_MissingSourceCommand();
    internal static string get_ADP_MissingSourceCommandConnection();
    internal static string get_ADP_MissingTableMapping();
    internal static string get_ADP_MissingTableMappingDestination();
    internal static string get_ADP_MissingTableSchema();
    internal static string get_ADP_MultipleReturnValue();
    internal static string get_ADP_MustBeReadOnly();
    internal static string get_ADP_NegativeParameter();
    internal static string get_ADP_NoConnectionString();
    internal static string get_ADP_NonCLSException();
    internal static string get_ADP_NonPooledOpenTimeout();
    internal static string get_ADP_NonSeqByteAccess();
    internal static string get_ADP_NonSequentialColumnAccess();
    internal static string get_ADP_NoQuoteChange();
    internal static string get_ADP_NoStoredProcedureExists();
    internal static string get_ADP_NotAPermissionElement();
    internal static string get_ADP_NotRowType();
    internal static string get_ADP_NotSupportedEnumerationValue();
    internal static string get_ADP_NullDataSet();
    internal static string get_ADP_NullDataTable();
    internal static string get_ADP_NumericToDecimalOverflow();
    internal static string get_ADP_ObsoleteKeyword();
    internal static string get_ADP_OdbcNoTypesFromProvider();
    internal static string get_ADP_OffsetOutOfRangeException();
    internal static string get_ADP_OnlyOneTableForStartRecordOrMaxRecords();
    internal static string get_ADP_OpenConnectionPropertySet();
    internal static string get_ADP_OpenConnectionRequired();
    internal static string get_ADP_OpenConnectionRequired_Clone();
    internal static string get_ADP_OpenConnectionRequired_Delete();
    internal static string get_ADP_OpenConnectionRequired_Insert();
    internal static string get_ADP_OpenConnectionRequired_Update();
    internal static string get_ADP_OpenReaderExists();
    internal static string get_ADP_OpenResultSetExists();
    internal static string get_ADP_OperationAborted();
    internal static string get_ADP_OperationAbortedExceptionMessage();
    internal static string get_ADP_ParallelTransactionsNotSupported();
    internal static string get_ADP_ParameterConversionFailed();
    internal static string get_ADP_ParameterValueOutOfRange();
    internal static string get_ADP_PendingAsyncOperation();
    internal static string get_ADP_PermissionTypeMismatch();
    internal static string get_ADP_PooledOpenTimeout();
    internal static string get_ADP_PrepareParameterScale();
    internal static string get_ADP_PrepareParameterSize();
    internal static string get_ADP_PrepareParameterType();
    internal static string get_ADP_PropertyNotSupported();
    internal static string get_ADP_QuotePrefixNotSet();
    internal static string get_ADP_ResultsNotAllowedDuringBatch();
    internal static string get_ADP_RowUpdatedErrors();
    internal static string get_ADP_RowUpdatingErrors();
    internal static string get_ADP_SingleValuedProperty();
    internal static string get_ADP_StreamClosed();
    internal static string get_ADP_TransactionCompleted();
    internal static string get_ADP_TransactionCompletedButNotDisposed();
    internal static string get_ADP_TransactionConnectionMismatch();
    internal static string get_ADP_TransactionPresent();
    internal static string get_ADP_TransactionRequired();
    internal static string get_ADP_TransactionZombied();
    internal static string get_ADP_UdlFileError();
    internal static string get_ADP_UnableToCreateBooleanLiteral();
    internal static string get_ADP_UninitializedParameterSize();
    internal static string get_ADP_UnknownDataType();
    internal static string get_ADP_UnknownDataTypeCode();
    internal static string get_ADP_UnsupportedNativeDataTypeOleDb();
    internal static string get_ADP_UnwantedStatementType();
    internal static string get_ADP_UpdateConcurrencyViolation_Batch();
    internal static string get_ADP_UpdateConcurrencyViolation_Delete();
    internal static string get_ADP_UpdateConcurrencyViolation_Update();
    internal static string get_ADP_UpdateMismatchRowTable();
    internal static string get_ADP_UpdateRequiresCommandClone();
    internal static string get_ADP_UpdateRequiresCommandDelete();
    internal static string get_ADP_UpdateRequiresCommandInsert();
    internal static string get_ADP_UpdateRequiresCommandSelect();
    internal static string get_ADP_UpdateRequiresCommandUpdate();
    internal static string get_ADP_UpdateRequiresSourceTable();
    internal static string get_ADP_UpdateRequiresSourceTableName();
    internal static string get_ADP_VersionDoesNotSupportDataType();
    internal static string get_Arg_ArrayPlusOffTooSmall();
    internal static string get_Arg_RankMultiDimNotSupported();
    internal static string get_Arg_RemoveArgNotFound();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_AttestationTokenSignatureValidationFailed();
    internal static string get_AZURESQL_ChinaEndpoint();
    internal static string get_AZURESQL_GenericEndpoint();
    internal static string get_AZURESQL_GermanEndpoint();
    internal static string get_AZURESQL_UsGovEndpoint();
    internal static string get_CodeGen_DuplicateTableName();
    internal static string get_CodeGen_InvalidIdentifier();
    internal static string get_CodeGen_NoCtor0();
    internal static string get_CodeGen_NoCtor1();
    internal static string get_CodeGen_TypeCantBeNull();
    internal static string get_collectionChangedEventDescr();
    internal static string get_ConfigBaseElementsOnly();
    internal static string get_ConfigBaseNoChildNodes();
    internal static string get_ConfigProviderInvalid();
    internal static string get_ConfigProviderMissing();
    internal static string get_ConfigProviderNotFound();
    internal static string get_ConfigProviderNotInstalled();
    internal static string get_ConfigRequiredAttributeEmpty();
    internal static string get_ConfigRequiredAttributeMissing();
    internal static string get_ConfigSectionsUnique();
    internal static string get_ConfigUnrecognizedAttributes();
    internal static string get_ConfigUnrecognizedElement();
    internal static string get_ConstraintNameDescr();
    internal static string get_ConstraintTableDescr();
    internal static string get_Data_ArgumentContainsNull();
    internal static string get_Data_ArgumentNull();
    internal static string get_Data_ArgumentOutOfRange();
    internal static string get_Data_CannotModifyCollection();
    internal static string get_Data_CaseInsensitiveNameConflict();
    internal static string get_Data_EnforceConstraints();
    internal static string get_Data_InvalidOffsetLength();
    internal static string get_Data_NamespaceNameConflict();
    internal static string get_DataAdapter_AcceptChangesDuringFill();
    internal static string get_DataAdapter_AcceptChangesDuringUpdate();
    internal static string get_DataAdapter_ContinueUpdateOnError();
    internal static string get_DataAdapter_FillError();
    internal static string get_DataAdapter_FillLoadOption();
    internal static string get_DataAdapter_MissingMappingAction();
    internal static string get_DataAdapter_MissingSchemaAction();
    internal static string get_DataAdapter_ReturnProviderSpecificTypes();
    internal static string get_DataAdapter_TableMappings();
    internal static string get_DataCategory_Action();
    internal static string get_DataCategory_Advanced();
    internal static string get_DataCategory_Behavior();
    internal static string get_DataCategory_ConnectionResilency();
    internal static string get_DataCategory_Context();
    internal static string get_DataCategory_Data();
    internal static string get_DataCategory_Fill();
    internal static string get_DataCategory_InfoMessage();
    internal static string get_DataCategory_Initialization();
    internal static string get_DataCategory_Mapping();
    internal static string get_DataCategory_NamedConnectionString();
    internal static string get_DataCategory_Notification();
    internal static string get_DataCategory_Pooling();
    internal static string get_DataCategory_Replication();
    internal static string get_DataCategory_Schema();
    internal static string get_DataCategory_Security();
    internal static string get_DataCategory_Source();
    internal static string get_DataCategory_StateChange();
    internal static string get_DataCategory_StatementCompleted();
    internal static string get_DataCategory_Udt();
    internal static string get_DataCategory_Update();
    internal static string get_DataCategory_Xml();
    internal static string get_DataColumn_AutoIncrementAndDefaultValue();
    internal static string get_DataColumn_AutoIncrementAndExpression();
    internal static string get_DataColumn_AutoIncrementCannotSetIfHasData();
    internal static string get_DataColumn_AutoIncrementSeed();
    internal static string get_DataColumn_CannotChangeNamespace();
    internal static string get_DataColumn_CannotSetDateTimeModeForNonDateTimeColumns();
    internal static string get_DataColumn_CannotSetMaxLength();
    internal static string get_DataColumn_CannotSetMaxLength2();
    internal static string get_DataColumn_CannotSetToNull();
    internal static string get_DataColumn_CannotSimpleContent();
    internal static string get_DataColumn_CannotSimpleContentType();
    internal static string get_DataColumn_ChangeDataType();
    internal static string get_DataColumn_DateTimeMode();
    internal static string get_DataColumn_DefaultValueAndAutoIncrement();
    internal static string get_DataColumn_DefaultValueColumnDataType();
    internal static string get_DataColumn_DefaultValueDataType();
    internal static string get_DataColumn_DefaultValueDataType1();
    internal static string get_DataColumn_ExceedMaxLength();
    internal static string get_DataColumn_ExpressionAndConstraint();
    internal static string get_DataColumn_ExpressionAndReadOnly();
    internal static string get_DataColumn_ExpressionAndUnique();
    internal static string get_DataColumn_ExpressionCircular();
    internal static string get_DataColumn_ExpressionInConstraint();
    internal static string get_DataColumn_HasToBeStringType();
    internal static string get_DataColumn_INullableUDTwithoutStaticNull();
    internal static string get_DataColumn_InvalidDataColumnMapping();
    internal static string get_DataColumn_InvalidDateTimeMode();
    internal static string get_DataColumn_LongerThanMaxLength();
    internal static string get_DataColumn_NameRequired();
    internal static string get_DataColumn_NonUniqueValues();
    internal static string get_DataColumn_NotAllowDBNull();
    internal static string get_DataColumn_NotInAnyTable();
    internal static string get_DataColumn_NotInTheTable();
    internal static string get_DataColumn_NotInTheUnderlyingTable();
    internal static string get_DataColumn_NullableTypesNotSupported();
    internal static string get_DataColumn_NullDataType();
    internal static string get_DataColumn_NullKeyValues();
    internal static string get_DataColumn_NullValues();
    internal static string get_DataColumn_OrdinalExceedMaximun();
    internal static string get_DataColumn_ReadOnly();
    internal static string get_DataColumn_ReadOnlyAndExpression();
    internal static string get_DataColumn_SetAddedAndModifiedCalledOnNonUnchanged();
    internal static string get_DataColumn_SetFailed();
    internal static string get_DataColumn_UDTImplementsIChangeTrackingButnotIRevertible();
    internal static string get_DataColumn_UniqueAndExpression();
    internal static string get_DataColumnAllowNullDescr();
    internal static string get_DataColumnAutoIncrementDescr();
    internal static string get_DataColumnAutoIncrementSeedDescr();
    internal static string get_DataColumnAutoIncrementStepDescr();
    internal static string get_DataColumnCaptionDescr();
    internal static string get_DataColumnColumnNameDescr();
    internal static string get_DataColumnDataTableDescr();
    internal static string get_DataColumnDataTypeDescr();
    internal static string get_DataColumnDateTimeModeDescr();
    internal static string get_DataColumnDefaultValueDescr();
    internal static string get_DataColumnExpressionDescr();
    internal static string get_DataColumnMapping_DataSetColumn();
    internal static string get_DataColumnMapping_SourceColumn();
    internal static string get_DataColumnMappingDescr();
    internal static string get_DataColumnMappings_Count();
    internal static string get_DataColumnMappings_Item();
    internal static string get_DataColumnMaxLengthDescr();
    internal static string get_DataColumnNamespaceDescr();
    internal static string get_DataColumnOrdinalDescr();
    internal static string get_DataColumnPrefixDescr();
    internal static string get_DataColumnReadOnlyDescr();
    internal static string get_DataColumns_Add1();
    internal static string get_DataColumns_Add2();
    internal static string get_DataColumns_Add3();
    internal static string get_DataColumns_Add4();
    internal static string get_DataColumns_AddDuplicate();
    internal static string get_DataColumns_AddDuplicate2();
    internal static string get_DataColumns_AddDuplicate3();
    internal static string get_DataColumns_OutOfRange();
    internal static string get_DataColumns_Remove();
    internal static string get_DataColumns_RemoveChildKey();
    internal static string get_DataColumns_RemoveConstraint();
    internal static string get_DataColumns_RemoveExpression();
    internal static string get_DataColumns_RemovePrimaryKey();
    internal static string get_DataColumnUniqueDescr();
    internal static string get_DataConstraint_AddFailed();
    internal static string get_DataConstraint_AddPrimaryKeyConstraint();
    internal static string get_DataConstraint_BadObjectPropertyAccess();
    internal static string get_DataConstraint_CantAddConstraintToMultipleNestedTable();
    internal static string get_DataConstraint_CascadeDelete();
    internal static string get_DataConstraint_CascadeUpdate();
    internal static string get_DataConstraint_ClearParentTable();
    internal static string get_DataConstraint_Duplicate();
    internal static string get_DataConstraint_DuplicateName();
    internal static string get_DataConstraint_ForeignKeyViolation();
    internal static string get_DataConstraint_ForeignTable();
    internal static string get_DataConstraint_NeededForForeignKeyConstraint();
    internal static string get_DataConstraint_NoName();
    internal static string get_DataConstraint_NotInTheTable();
    internal static string get_DataConstraint_OutOfRange();
    internal static string get_DataConstraint_ParentValues();
    internal static string get_DataConstraint_RemoveFailed();
    internal static string get_DataConstraint_RemoveParentRow();
    internal static string get_DataConstraint_UniqueViolation();
    internal static string get_DataConstraint_Violation();
    internal static string get_DataConstraint_ViolationValue();
    internal static string get_DataDom_CloneNode();
    internal static string get_DataDom_ColumnMappingChange();
    internal static string get_DataDom_ColumnNameChange();
    internal static string get_DataDom_ColumnNamespaceChange();
    internal static string get_DataDom_DataSetNameChange();
    internal static string get_DataDom_DataSetNestedRelationsChange();
    internal static string get_DataDom_DataSetNull();
    internal static string get_DataDom_DataSetTablesChange();
    internal static string get_DataDom_EnforceConstraintsShouldBeOff();
    internal static string get_DataDom_Foliation();
    internal static string get_DataDom_MultipleDataSet();
    internal static string get_DataDom_MultipleLoad();
    internal static string get_DataDom_NotSupport_Clear();
    internal static string get_DataDom_NotSupport_EntRef();
    internal static string get_DataDom_NotSupport_GetElementById();
    internal static string get_DataDom_TableColumnsChange();
    internal static string get_DataDom_TableNameChange();
    internal static string get_DataDom_TableNamespaceChange();
    internal static string get_DataIndex_FindWithoutSortOrder();
    internal static string get_DataIndex_KeyLength();
    internal static string get_DataIndex_RecordStateRange();
    internal static string get_DataKey_DuplicateColumns();
    internal static string get_DataKey_NoColumns();
    internal static string get_DataKey_RemovePrimaryKey();
    internal static string get_DataKey_RemovePrimaryKey1();
    internal static string get_DataKey_TableMismatch();
    internal static string get_DataKey_TooManyColumns();
    internal static string get_DataMerge_DataTypeMismatch();
    internal static string get_DataMerge_MissingColumnDefinition();
    internal static string get_DataMerge_MissingConstraint();
    internal static string get_DataMerge_MissingDefinition();
    internal static string get_DataMerge_MissingPrimaryKeyColumnInSource();
    internal static string get_DataMerge_PrimaryKeyColumnsMismatch();
    internal static string get_DataMerge_PrimaryKeyMismatch();
    internal static string get_DataMerge_ReltionKeyColumnsMismatch();
    internal static string get_DataRelation_AlreadyExists();
    internal static string get_DataRelation_AlreadyInOtherDataSet();
    internal static string get_DataRelation_AlreadyInTheDataSet();
    internal static string get_DataRelation_CaseLocaleMismatch();
    internal static string get_DataRelation_ChildTableMismatch();
    internal static string get_DataRelation_ColumnsTypeMismatch();
    internal static string get_DataRelation_DataSetMismatch();
    internal static string get_DataRelation_DoesNotExist();
    internal static string get_DataRelation_DuplicateName();
    internal static string get_DataRelation_ForeignDataSet();
    internal static string get_DataRelation_ForeignRow();
    internal static string get_DataRelation_ForeignTable();
    internal static string get_DataRelation_GetParentRowTableMismatch();
    internal static string get_DataRelation_InValidNamespaceInNestedRelation();
    internal static string get_DataRelation_InValidNestedRelation();
    internal static string get_DataRelation_KeyColumnsIdentical();
    internal static string get_DataRelation_KeyLengthMismatch();
    internal static string get_DataRelation_KeyZeroLength();
    internal static string get_DataRelation_LoopInNestedRelations();
    internal static string get_DataRelation_NoName();
    internal static string get_DataRelation_NotInTheDataSet();
    internal static string get_DataRelation_OutOfRange();
    internal static string get_DataRelation_ParentOrChildColumnsDoNotHaveDataSet();
    internal static string get_DataRelation_ParentTableMismatch();
    internal static string get_DataRelation_RelationNestedReadOnly();
    internal static string get_DataRelation_SetParentRowTableMismatch();
    internal static string get_DataRelation_TableCantBeNestedInTwoTables();
    internal static string get_DataRelation_TableNull();
    internal static string get_DataRelation_TablesInDifferentSets();
    internal static string get_DataRelation_TableWasRemoved();
    internal static string get_DataRelationChildColumnsDescr();
    internal static string get_DataRelationNested();
    internal static string get_DataRelationParentColumnsDescr();
    internal static string get_DataRelationRelationNameDescr();
    internal static string get_DataRow_AlreadyDeleted();
    internal static string get_DataRow_AlreadyInOtherCollection();
    internal static string get_DataRow_AlreadyInTheCollection();
    internal static string get_DataRow_AlreadyRemoved();
    internal static string get_DataRow_BeginEditInRowChanging();
    internal static string get_DataRow_CancelEditInRowChanging();
    internal static string get_DataRow_DeletedRowInaccessible();
    internal static string get_DataRow_DeleteInRowDeleting();
    internal static string get_DataRow_EditInRowChanging();
    internal static string get_DataRow_Empty();
    internal static string get_DataRow_EndEditInRowChanging();
    internal static string get_DataRow_InvalidRowBitPattern();
    internal static string get_DataRow_InvalidVersion();
    internal static string get_DataRow_MultipleParents();
    internal static string get_DataRow_NoCurrentData();
    internal static string get_DataRow_NoOriginalData();
    internal static string get_DataRow_NoProposedData();
    internal static string get_DataRow_NotInTheDataSet();
    internal static string get_DataRow_NotInTheTable();
    internal static string get_DataRow_OutOfRange();
    internal static string get_DataRow_ParentRowNotInTheDataSet();
    internal static string get_DataRow_RemovedFromTheTable();
    internal static string get_DataRow_RowInsertMissing();
    internal static string get_DataRow_RowInsertOutOfRange();
    internal static string get_DataRow_RowInsertTwice();
    internal static string get_DataRow_RowOutOfRange();
    internal static string get_DataRow_ValuesArrayLength();
    internal static string get_DataROWView_PropertyNotFound();
    internal static string get_DataSet_CannotChangeCaseLocale();
    internal static string get_DataSet_CannotChangeSchemaSerializationMode();
    internal static string get_DataSet_DefaultConstraintException();
    internal static string get_DataSet_DefaultDataException();
    internal static string get_DataSet_DefaultDeletedRowInaccessibleException();
    internal static string get_DataSet_DefaultDuplicateNameException();
    internal static string get_DataSet_DefaultInRowChangingEventException();
    internal static string get_DataSet_DefaultInvalidConstraintException();
    internal static string get_DataSet_DefaultMissingPrimaryKeyException();
    internal static string get_DataSet_DefaultNoNullAllowedException();
    internal static string get_DataSet_DefaultReadOnlyException();
    internal static string get_DataSet_DefaultRowNotInTableException();
    internal static string get_DataSet_DefaultVersionNotFoundException();
    internal static string get_DataSet_SetDataSetNameConflicting();
    internal static string get_DataSet_SetNameToEmpty();
    internal static string get_DataSet_UnsupportedSchema();
    internal static string get_DataSetCaseSensitiveDescr();
    internal static string get_DataSetDataSetNameDescr();
    internal static string get_DataSetDefaultViewDescr();
    internal static string get_DataSetDescr();
    internal static string get_DataSetEnforceConstraintsDescr();
    internal static string get_DataSetHasErrorsDescr();
    internal static string get_DataSetInitializedDescr();
    internal static string get_DataSetLocaleDescr();
    internal static string get_DataSetMergeFailedDescr();
    internal static string get_DataSetNamespaceDescr();
    internal static string get_DataSetPrefixDescr();
    internal static string get_DataSetRelationsDescr();
    internal static string get_DataSetTablesDescr();
    internal static string get_DataStorage_AggregateException();
    internal static string get_DataStorage_IComparableNotDefined();
    internal static string get_DataStorage_InvalidStorageType();
    internal static string get_DataStorage_ProblematicChars();
    internal static string get_DataStorage_SetInvalidDataType();
    internal static string get_DataTable_AlreadyInOtherDataSet();
    internal static string get_DataTable_AlreadyInTheDataSet();
    internal static string get_DataTable_CannotAddToSimpleContent();
    internal static string get_DataTable_CanNotRemoteDataTable();
    internal static string get_DataTable_CanNotSerializeDataTableHierarchy();
    internal static string get_DataTable_CanNotSerializeDataTableWithEmptyName();
    internal static string get_DataTable_CanNotSetRemotingFormat();
    internal static string get_DataTable_DatasetConflictingName();
    internal static string get_DataTable_DuplicateName();
    internal static string get_DataTable_DuplicateName2();
    internal static string get_DataTable_ForeignPrimaryKey();
    internal static string get_DataTable_InConstraint();
    internal static string get_DataTable_InRelation();
    internal static string get_DataTable_InvalidSortString();
    internal static string get_DataTable_MissingPrimaryKey();
    internal static string get_DataTable_MultipleSimpleContentColumns();
    internal static string get_DataTable_NoName();
    internal static string get_DataTable_NotInTheDataSet();
    internal static string get_DataTable_OutOfRange();
    internal static string get_DataTable_SelfnestedDatasetConflictingName();
    internal static string get_DataTable_TableNotFound();
    internal static string get_DataTableCaseSensitiveDescr();
    internal static string get_DataTableChildRelationsDescr();
    internal static string get_DataTableColumnChangedDescr();
    internal static string get_DataTableColumnChangingDescr();
    internal static string get_DataTableColumnsDescr();
    internal static string get_DataTableConstraintsDescr();
    internal static string get_DataTableDataSetDescr();
    internal static string get_DataTableDefaultViewDescr();
    internal static string get_DataTableDisplayExpressionDescr();
    internal static string get_DataTableHasErrorsDescr();
    internal static string get_DataTableLocaleDescr();
    internal static string get_DataTableMapping_ColumnMappings();
    internal static string get_DataTableMapping_DataSetTable();
    internal static string get_DataTableMapping_SourceTable();
    internal static string get_DataTableMappings_Count();
    internal static string get_DataTableMappings_Item();
    internal static string get_DataTableMinimumCapacityDescr();
    internal static string get_DataTableNamespaceDescr();
    internal static string get_DataTableParentRelationsDescr();
    internal static string get_DataTablePrefixDescr();
    internal static string get_DataTablePrimaryKeyDescr();
    internal static string get_DataTableReader_ArgumentContainsNullValue();
    internal static string get_DataTableReader_CannotCreateDataReaderOnEmptyDataSet();
    internal static string get_DataTableReader_DataTableCleared();
    internal static string get_DataTableReader_DataTableReaderArgumentIsEmpty();
    internal static string get_DataTableReader_InvalidDataTableReader();
    internal static string get_DataTableReader_InvalidRowInDataTableReader();
    internal static string get_DataTableReader_SchemaInvalidDataTableReader();
    internal static string get_DataTableRowChangedDescr();
    internal static string get_DataTableRowChangingDescr();
    internal static string get_DataTableRowDeletedDescr();
    internal static string get_DataTableRowDeletingDescr();
    internal static string get_DataTableRowsClearedDescr();
    internal static string get_DataTableRowsClearingDescr();
    internal static string get_DataTableRowsDescr();
    internal static string get_DataTableRowsNewRowDescr();
    internal static string get_DataTableTableNameDescr();
    internal static string get_DataView_AddExternalObject();
    internal static string get_DataView_AddNewNotAllowNull();
    internal static string get_DataView_CanNotBindTable();
    internal static string get_DataView_CanNotClear();
    internal static string get_DataView_CanNotDelete();
    internal static string get_DataView_CanNotEdit();
    internal static string get_DataView_CanNotSetDataSet();
    internal static string get_DataView_CanNotSetTable();
    internal static string get_DataView_CanNotUse();
    internal static string get_DataView_CanNotUseDataViewManager();
    internal static string get_DataView_CreateChildView();
    internal static string get_DataView_GetElementIndex();
    internal static string get_DataView_InsertExternalObject();
    internal static string get_DataView_NotOpen();
    internal static string get_DataView_RemoveExternalObject();
    internal static string get_DataView_SetDataSetFailed();
    internal static string get_DataView_SetFailed();
    internal static string get_DataView_SetIListObject();
    internal static string get_DataView_SetRowStateFilter();
    internal static string get_DataView_SetTable();
    internal static string get_DataViewAllowDeleteDescr();
    internal static string get_DataViewAllowEditDescr();
    internal static string get_DataViewAllowNewDescr();
    internal static string get_DataViewApplyDefaultSortDescr();
    internal static string get_DataViewCountDescr();
    internal static string get_DataViewDataViewManagerDescr();
    internal static string get_DataViewIsOpenDescr();
    internal static string get_DataViewListChangedDescr();
    internal static string get_DataViewManagerDataSetDescr();
    internal static string get_DataViewManagerTableSettingsDescr();
    internal static string get_DataViewRowFilterDescr();
    internal static string get_DataViewRowStateFilterDescr();
    internal static string get_DataViewSortDescr();
    internal static string get_DataViewTableDescr();
    internal static string get_DbCommand_CommandText();
    internal static string get_DbCommand_CommandTimeout();
    internal static string get_DbCommand_CommandType();
    internal static string get_DbCommand_Connection();
    internal static string get_DbCommand_Parameters();
    internal static string get_DbCommand_StatementCompleted();
    internal static string get_DbCommand_Transaction();
    internal static string get_DbCommand_UpdatedRowSource();
    internal static string get_DbCommandBuilder_CatalogLocation();
    internal static string get_DbCommandBuilder_CatalogSeparator();
    internal static string get_DbCommandBuilder_ConflictOption();
    internal static string get_DbCommandBuilder_DataAdapter();
    internal static string get_DbCommandBuilder_QuotePrefix();
    internal static string get_DbCommandBuilder_QuoteSuffix();
    internal static string get_DbCommandBuilder_SchemaLocation();
    internal static string get_DbCommandBuilder_SchemaSeparator();
    internal static string get_DbCommandBuilder_SetAllValues();
    internal static string get_DbConnection_InfoMessage();
    internal static string get_DbConnection_State();
    internal static string get_DbConnection_StateChange();
    internal static string get_DbConnectionString_AdoNetPooler();
    internal static string get_DbConnectionString_ApplicationIntent();
    internal static string get_DbConnectionString_ApplicationName();
    internal static string get_DbConnectionString_AsynchronousProcessing();
    internal static string get_DbConnectionString_AttachDBFilename();
    internal static string get_DbConnectionString_Authentication();
    internal static string get_DbConnectionString_Certificate();
    internal static string get_DbConnectionString_ConnectionReset();
    internal static string get_DbConnectionString_ConnectionString();
    internal static string get_DbConnectionString_ConnectRetryCount();
    internal static string get_DbConnectionString_ConnectRetryInterval();
    internal static string get_DbConnectionString_ConnectTimeout();
    internal static string get_DbConnectionString_ContextConnection();
    internal static string get_DbConnectionString_CurrentLanguage();
    internal static string get_DbConnectionString_DataSource();
    internal static string get_DbConnectionString_Driver();
    internal static string get_DbConnectionString_DSN();
    internal static string get_DbConnectionString_Encrypt();
    internal static string get_DbConnectionString_Enlist();
    internal static string get_DbConnectionString_FailoverPartner();
    internal static string get_DbConnectionString_FailoverPartnerSPN();
    internal static string get_DbConnectionString_FileName();
    internal static string get_DbConnectionString_HostNameInCertificate();
    internal static string get_DbConnectionString_InitialCatalog();
    internal static string get_DbConnectionString_IntegratedSecurity();
    internal static string get_DbConnectionString_LoadBalanceTimeout();
    internal static string get_DbConnectionString_MaxPoolSize();
    internal static string get_DbConnectionString_MinPoolSize();
    internal static string get_DbConnectionString_MultipleActiveResultSets();
    internal static string get_DbConnectionString_MultiSubnetFailover();
    internal static string get_DbConnectionString_NetworkLibrary();
    internal static string get_DbConnectionString_OleDbServices();
    internal static string get_DbConnectionString_PacketSize();
    internal static string get_DbConnectionString_Password();
    internal static string get_DbConnectionString_PersistSecurityInfo();
    internal static string get_DbConnectionString_PoolBlockingPeriod();
    internal static string get_DbConnectionString_Pooling();
    internal static string get_DbConnectionString_Provider();
    internal static string get_DbConnectionString_Replication();
    internal static string get_DbConnectionString_ServerCertificate();
    internal static string get_DbConnectionString_ServerSPN();
    internal static string get_DbConnectionString_TransactionBinding();
    internal static string get_DbConnectionString_TransparentNetworkIPResolution();
    internal static string get_DbConnectionString_TrustServerCertificate();
    internal static string get_DbConnectionString_TypeSystemVersion();
    internal static string get_DbConnectionString_UserID();
    internal static string get_DbConnectionString_UserInstance();
    internal static string get_DbConnectionString_WorkstationID();
    internal static string get_DbDataAdapter_DeleteCommand();
    internal static string get_DbDataAdapter_InsertCommand();
    internal static string get_DbDataAdapter_RowUpdated();
    internal static string get_DbDataAdapter_RowUpdating();
    internal static string get_DbDataAdapter_SelectCommand();
    internal static string get_DbDataAdapter_UpdateBatchSize();
    internal static string get_DbDataAdapter_UpdateCommand();
    internal static string get_DbDataParameter_Precision();
    internal static string get_DbDataParameter_Scale();
    internal static string get_DbParameter_DbType();
    internal static string get_DbParameter_Direction();
    internal static string get_DbParameter_IsNullable();
    internal static string get_DbParameter_Offset();
    internal static string get_DbParameter_ParameterName();
    internal static string get_DbParameter_Size();
    internal static string get_DbParameter_SourceColumn();
    internal static string get_DbParameter_SourceColumnNullMapping();
    internal static string get_DbParameter_SourceVersion();
    internal static string get_DbParameter_Value();
    internal static string get_DbTable_ConflictDetection();
    internal static string get_DbTable_Connection();
    internal static string get_DbTable_DeleteCommand();
    internal static string get_DbTable_InsertCommand();
    internal static string get_DbTable_ReturnProviderSpecificTypes();
    internal static string get_DbTable_SelectCommand();
    internal static string get_DbTable_TableMapping();
    internal static string get_DbTable_UpdateBatchSize();
    internal static string get_DbTable_UpdateCommand();
    internal static string get_EnclaveRetrySleepInSecondsValueException();
    internal static string get_EnclaveSessionInvalidationFailed();
    internal static string get_event_OperationReturnedSomething();
    internal static string get_ExpiredAttestationToken();
    internal static string get_Expr_AggregateArgument();
    internal static string get_Expr_AggregateUnbound();
    internal static string get_Expr_AmbiguousBinop();
    internal static string get_Expr_ArgumentOutofRange();
    internal static string get_Expr_ArgumentType();
    internal static string get_Expr_ArgumentTypeInteger();
    internal static string get_Expr_BindFailure();
    internal static string get_Expr_ComputeNotAggregate();
    internal static string get_Expr_DatatypeConvertion();
    internal static string get_Expr_DatavalueConvertion();
    internal static string get_Expr_DivideByZero();
    internal static string get_Expr_EvalNoContext();
    internal static string get_Expr_ExpressionTooComplex();
    internal static string get_Expr_ExpressionUnbound();
    internal static string get_Expr_FilterConvertion();
    internal static string get_Expr_FunctionArgumentCount();
    internal static string get_Expr_InvalidDate();
    internal static string get_Expr_InvalidHoursArgument();
    internal static string get_Expr_InvalidMinutesArgument();
    internal static string get_Expr_InvalidName();
    internal static string get_Expr_InvalidNameBracketing();
    internal static string get_Expr_InvalidPattern();
    internal static string get_Expr_InvalidString();
    internal static string get_Expr_InvalidTimeZoneRange();
    internal static string get_Expr_InvalidType();
    internal static string get_Expr_InvokeArgument();
    internal static string get_Expr_InWithoutList();
    internal static string get_Expr_InWithoutParentheses();
    internal static string get_Expr_IsSyntax();
    internal static string get_Expr_LookupArgument();
    internal static string get_Expr_MismatchKindandTimeSpan();
    internal static string get_Expr_MissingOperand();
    internal static string get_Expr_MissingOperandBefore();
    internal static string get_Expr_MissingRightParen();
    internal static string get_Expr_NonConstantArgument();
    internal static string get_Expr_NYI();
    internal static string get_Expr_Overflow();
    internal static string get_Expr_Syntax();
    internal static string get_Expr_TooManyRightParentheses();
    internal static string get_Expr_TypeMismatch();
    internal static string get_Expr_TypeMismatchInBinop();
    internal static string get_Expr_UnboundName();
    internal static string get_Expr_UndefinedFunction();
    internal static string get_Expr_UnknownToken();
    internal static string get_Expr_UnknownToken1();
    internal static string get_Expr_UnresolvedRelation();
    internal static string get_Expr_UnsupportedOperator();
    internal static string get_Expr_UnsupportedType();
    internal static string get_ExtendedPropertiesDescr();
    internal static string get_FailToCreateEnclaveSession();
    internal static string get_FailToParseAttestationInfo();
    internal static string get_FailToParseAttestationToken();
    internal static string get_ForeignKeyConstraintAcceptRejectRuleDescr();
    internal static string get_ForeignKeyConstraintChildColumnsDescr();
    internal static string get_ForeignKeyConstraintDeleteRuleDescr();
    internal static string get_ForeignKeyConstraintParentColumnsDescr();
    internal static string get_ForeignKeyConstraintUpdateRuleDescr();
    internal static string get_ForeignKeyRelatedTableDescr();
    internal static string get_GetAttestationSigningCertificateFailedInvalidCertificate();
    internal static string get_GetAttestationSigningCertificateRequestFailedFormat();
    internal static string get_GetAttestationTokenSigningKeysFailed();
    internal static string get_GetSharedSecretFailed();
    internal static string get_GT_Disabled();
    internal static string get_GT_UnsupportedSysTxVersion();
    internal static string get_IEnumerableOfSqlDataRecordHasNoRows();
    internal static string get_InvalidArgumentToBase64UrlDecoder();
    internal static string get_InvalidArgumentToSHA256();
    internal static string get_InvalidAttestationToken();
    internal static string get_InvalidClaimInAttestationToken();
    internal static string get_InvalidSchemaTableOrdinals();
    internal static string get_KeyConstraintColumnsDescr();
    internal static string get_KeyConstraintIsPrimaryKeyDescr();
    internal static string get_Load_ReadOnlyDataModified();
    internal static string get_LocalDB_BadConfigSectionType();
    internal static string get_LocalDB_CreateFailed();
    internal static string get_LocalDB_FailedGetDLLHandle();
    internal static string get_LocalDB_InvalidVersion();
    internal static string get_LocalDB_MethodNotFound();
    internal static string get_LocalDB_UnobtainableMessage();
    internal static string get_LocalDBNotSupported();
    internal static string get_MDF_AmbiguousCollectionName();
    internal static string get_MDF_CollectionNameISNotUnique();
    internal static string get_MDF_DataTableDoesNotExist();
    internal static string get_MDF_IncorrectNumberOfDataSourceInformationRows();
    internal static string get_MDF_InvalidRestrictionValue();
    internal static string get_MDF_InvalidXml();
    internal static string get_MDF_InvalidXmlInvalidValue();
    internal static string get_MDF_InvalidXmlMissingColumn();
    internal static string get_MDF_MissingDataSourceInformationColumn();
    internal static string get_MDF_MissingRestrictionColumn();
    internal static string get_MDF_MissingRestrictionRow();
    internal static string get_MDF_NoColumns();
    internal static string get_MDF_QueryFailed();
    internal static string get_MDF_TooManyRestrictions();
    internal static string get_MDF_UnableToBuildCollection();
    internal static string get_MDF_UndefinedCollection();
    internal static string get_MDF_UndefinedPopulationMechanism();
    internal static string get_MDF_UnsupportedVersion();
    internal static string get_MetaType_SingleValuedStructNotSupported();
    internal static string get_MissingClaimInAttestationToken();
    internal static string get_NamedSimpleType_InvalidDuplicateNamedSimpleTypeDelaration();
    internal static string get_net_auth_message_not_encrypted();
    internal static string get_net_context_buffer_too_small();
    internal static string get_net_gssapi_operation_failed();
    internal static string get_net_gssapi_operation_failed_detailed();
    internal static string get_net_invalid_enum();
    internal static string get_net_log_operation_failed_with_error();
    internal static string get_net_MethodNotImplementedException();
    internal static string get_net_nego_channel_binding_not_supported();
    internal static string get_net_nego_not_supported_empty_target_with_defaultcreds();
    internal static string get_net_nego_protection_level_not_supported();
    internal static string get_net_nego_server_not_supported();
    internal static string get_net_ntlm_not_possible_default_cred();
    internal static string get_net_securitypackagesupport();
    internal static string get_NullSchemaTableDataTypeNotSupported();
    internal static string get_Odbc_CantAllocateEnvironmentHandle();
    internal static string get_Odbc_CantEnableConnectionpooling();
    internal static string get_Odbc_CantSetPropertyOnOpenConnection();
    internal static string get_Odbc_ConnectionClosed();
    internal static string get_Odbc_ExceptionMessage();
    internal static string get_Odbc_ExceptionNoInfoMsg();
    internal static string get_Odbc_FailedToGetDescriptorHandle();
    internal static string get_ODBC_GetSchemaRestrictionRequired();
    internal static string get_Odbc_GetTypeMapping_UnknownType();
    internal static string get_Odbc_MDACWrongVersion();
    internal static string get_Odbc_NegativeArgument();
    internal static string get_Odbc_NoMappingForSqlTransactionLevel();
    internal static string get_Odbc_NotInTransaction();
    internal static string get_ODBC_NotSupportedEnumerationValue();
    internal static string get_Odbc_NullData();
    internal static string get_ODBC_ODBCCommandText();
    internal static string get_Odbc_OpenConnectionNoOwner();
    internal static string get_Odbc_UnknownOdbcType();
    internal static string get_Odbc_UnknownSQLType();
    internal static string get_Odbc_UnknownURTType();
    internal static string get_OdbcCommandBuilder_DataAdapter();
    internal static string get_OdbcCommandBuilder_QuotePrefix();
    internal static string get_OdbcCommandBuilder_QuoteSuffix();
    internal static string get_OdbcConnection_ConnectionString();
    internal static string get_OdbcConnection_ConnectionStringTooLong();
    internal static string get_OdbcConnection_ConnectionTimeout();
    internal static string get_OdbcConnection_Database();
    internal static string get_OdbcConnection_DataSource();
    internal static string get_OdbcConnection_Driver();
    internal static string get_OdbcConnection_ServerVersion();
    internal static string get_OdbcParameter_OdbcType();
    internal static string get_OleDb_AsynchronousNotSupported();
    internal static string get_OleDb_BadAccessor();
    internal static string get_OleDb_BadStatus_ParamAcc();
    internal static string get_OleDb_BadStatusRowAccessor();
    internal static string get_OleDb_CanNotDetermineDecimalSeparator();
    internal static string get_OleDb_CantConvertValue();
    internal static string get_OleDb_CantCreate();
    internal static string get_OleDb_CommandParameterBadAccessor();
    internal static string get_OleDb_CommandParameterCantConvertValue();
    internal static string get_OleDb_CommandParameterDataOverflow();
    internal static string get_OleDb_CommandParameterDefault();
    internal static string get_OleDb_CommandParameterError();
    internal static string get_OleDb_CommandParameterSignMismatch();
    internal static string get_OleDb_CommandParameterUnavailable();
    internal static string get_OleDb_CommandTextNotSupported();
    internal static string get_OleDb_ConfigUnableToLoadXmlMetaDataFile();
    internal static string get_OleDb_ConfigWrongNumberOfValues();
    internal static string get_OleDb_ConnectionStringSyntax();
    internal static string get_OleDb_DataOverflow();
    internal static string get_OleDb_DBBindingGetVector();
    internal static string get_OleDb_FailedGetDescription();
    internal static string get_OleDb_FailedGetSource();
    internal static string get_OleDb_Fill_EmptyRecord();
    internal static string get_OleDb_Fill_EmptyRecordSet();
    internal static string get_OleDb_Fill_NotADODB();
    internal static string get_OleDb_GVtUnknown();
    internal static string get_OleDb_IDBInfoNotSupported();
    internal static string get_OleDb_InvalidProviderSpecified();
    internal static string get_OleDb_InvalidRestrictionsDbInfoKeywords();
    internal static string get_OleDb_InvalidRestrictionsDbInfoLiteral();
    internal static string get_OleDb_InvalidRestrictionsSchemaGuids();
    internal static string get_OleDb_ISourcesRowsetNotSupported();
    internal static string get_OleDb_MDACNotAvailable();
    internal static string get_OleDb_MDACWrongVersion();
    internal static string get_OleDb_MSDASQLNotSupported();
    internal static string get_OleDb_NoErrorInformation();
    internal static string get_OleDb_NoErrorInformation2();
    internal static string get_OleDb_NoErrorMessage();
    internal static string get_OleDb_NoProviderSpecified();
    internal static string get_OleDb_NoProviderSupportForParameters();
    internal static string get_OleDb_NoProviderSupportForSProcResetParameters();
    internal static string get_OLEDB_NotSupportedEnumerationValue();
    internal static string get_OleDb_NotSupportedSchemaTable();
    internal static string get_OLEDB_OLEDBCommandText();
    internal static string get_OleDb_PossiblePromptNotUserInteractive();
    internal static string get_OleDb_PropertyBadColumn();
    internal static string get_OleDb_PropertyBadOption();
    internal static string get_OleDb_PropertyBadValue();
    internal static string get_OleDb_PropertyConflicting();
    internal static string get_OleDb_PropertyNotAllSettable();
    internal static string get_OleDb_PropertyNotAvailable();
    internal static string get_OleDb_PropertyNotSet();
    internal static string get_OleDb_PropertyNotSettable();
    internal static string get_OleDb_PropertyNotSupported();
    internal static string get_OleDb_PropertyStatusUnknown();
    internal static string get_OleDb_ProviderUnavailable();
    internal static string get_OleDb_SchemaRowsetsNotSupported();
    internal static string get_OleDb_SignMismatch();
    internal static string get_OleDb_SVtUnknown();
    internal static string get_OleDb_ThreadApartmentState();
    internal static string get_OleDb_TransactionsNotSupported();
    internal static string get_OleDb_Unavailable();
    internal static string get_OleDb_UnexpectedStatusValue();
    internal static string get_OleDb_UninitializedParameters();
    internal static string get_OleDbCommandBuilder_DataAdapter();
    internal static string get_OleDbCommandBuilder_DecimalSeparator();
    internal static string get_OleDbCommandBuilder_QuotePrefix();
    internal static string get_OleDbCommandBuilder_QuoteSuffix();
    internal static string get_OleDbConnection_ConnectionString();
    internal static string get_OleDbConnection_ConnectionTimeout();
    internal static string get_OleDbConnection_Database();
    internal static string get_OleDbConnection_DataSource();
    internal static string get_OleDbConnection_Provider();
    internal static string get_OleDbConnection_ServerVersion();
    internal static string get_OleDbParameter_OleDbType();
    internal static string get_propertyChangedEventDescr();
    internal static string get_Range_Argument();
    internal static string get_Range_NullRange();
    internal static string get_RbTree_EnumerationBroken();
    internal static string get_RbTree_InvalidState();
    internal static string get_RecordManager_MinimumCapacity();
    internal static string get_SEC_ProtocolWarning();
    internal static string get_SNI_ERROR_1();
    internal static string get_SNI_ERROR_10();
    internal static string get_SNI_ERROR_11();
    internal static string get_SNI_ERROR_12();
    internal static string get_SNI_ERROR_13();
    internal static string get_SNI_ERROR_14();
    internal static string get_SNI_ERROR_15();
    internal static string get_SNI_ERROR_16();
    internal static string get_SNI_ERROR_17();
    internal static string get_SNI_ERROR_18();
    internal static string get_SNI_ERROR_19();
    internal static string get_SNI_ERROR_2();
    internal static string get_SNI_ERROR_20();
    internal static string get_SNI_ERROR_21();
    internal static string get_SNI_ERROR_22();
    internal static string get_SNI_ERROR_23();
    internal static string get_SNI_ERROR_24();
    internal static string get_SNI_ERROR_25();
    internal static string get_SNI_ERROR_26();
    internal static string get_SNI_ERROR_27();
    internal static string get_SNI_ERROR_28();
    internal static string get_SNI_ERROR_29();
    internal static string get_SNI_ERROR_3();
    internal static string get_SNI_ERROR_30();
    internal static string get_SNI_ERROR_31();
    internal static string get_SNI_ERROR_32();
    internal static string get_SNI_ERROR_33();
    internal static string get_SNI_ERROR_34();
    internal static string get_SNI_ERROR_35();
    internal static string get_SNI_ERROR_36();
    internal static string get_SNI_ERROR_37();
    internal static string get_SNI_ERROR_38();
    internal static string get_SNI_ERROR_39();
    internal static string get_SNI_ERROR_4();
    internal static string get_SNI_ERROR_40();
    internal static string get_SNI_ERROR_41();
    internal static string get_SNI_ERROR_42();
    internal static string get_SNI_ERROR_43();
    internal static string get_SNI_ERROR_44();
    internal static string get_SNI_ERROR_47();
    internal static string get_SNI_ERROR_48();
    internal static string get_SNI_ERROR_49();
    internal static string get_SNI_ERROR_5();
    internal static string get_SNI_ERROR_50();
    internal static string get_SNI_ERROR_51();
    internal static string get_SNI_ERROR_52();
    internal static string get_SNI_ERROR_53();
    internal static string get_SNI_ERROR_54();
    internal static string get_SNI_ERROR_55();
    internal static string get_SNI_ERROR_56();
    internal static string get_SNI_ERROR_57();
    internal static string get_SNI_ERROR_6();
    internal static string get_SNI_ERROR_7();
    internal static string get_SNI_ERROR_8();
    internal static string get_SNI_ERROR_9();
    internal static string get_SNI_IncorrectPhysicalConnectionType();
    internal static string get_SNI_PlatformNotSupportedNetFx();
    internal static string get_SNI_PN0();
    internal static string get_SNI_PN1();
    internal static string get_SNI_PN10();
    internal static string get_SNI_PN11();
    internal static string get_SNI_PN2();
    internal static string get_SNI_PN3();
    internal static string get_SNI_PN4();
    internal static string get_SNI_PN5();
    internal static string get_SNI_PN6();
    internal static string get_SNI_PN7();
    internal static string get_SNI_PN8();
    internal static string get_SNI_PN9();
    internal static string get_Snix_AutoEnlist();
    internal static string get_Snix_Close();
    internal static string get_Snix_Connect();
    internal static string get_Snix_EnableMars();
    internal static string get_Snix_Execute();
    internal static string get_Snix_GetMarsSession();
    internal static string get_Snix_Login();
    internal static string get_Snix_LoginSspi();
    internal static string get_Snix_PreLogin();
    internal static string get_Snix_PreLoginBeforeSuccessfullWrite();
    internal static string get_Snix_ProcessSspi();
    internal static string get_Snix_Read();
    internal static string get_Snix_SendRows();
    internal static string get_SQL_ArgumentLengthMismatch();
    internal static string get_SQL_AsyncConnectionRequired();
    internal static string get_SQL_AsyncOperationCompleted();
    internal static string get_SQL_AuthenticationAndIntegratedSecurity();
    internal static string get_SQL_BatchedUpdatesNotAvailableOnContextConnection();
    internal static string get_SQL_BulkCopyDestinationTableName();
    internal static string get_SQL_BulkLoadCannotConvertValue();
    internal static string get_SQL_BulkLoadCannotConvertValueWithoutRowNo();
    internal static string get_SQL_BulkLoadConflictingTransactionOption();
    internal static string get_SQL_BulkLoadExistingTransaction();
    internal static string get_SQL_BulkLoadInvalidDestinationTable();
    internal static string get_SQL_BulkLoadInvalidOperationInsideEvent();
    internal static string get_SQL_BulkLoadInvalidOrderHint();
    internal static string get_SQL_BulkLoadInvalidTimeout();
    internal static string get_SQL_BulkLoadInvalidVariantValue();
    internal static string get_Sql_BulkLoadLcidMismatch();
    internal static string get_SQL_BulkLoadMappingInaccessible();
    internal static string get_SQL_BulkLoadMappingsNamesOrOrdinalsOnly();
    internal static string get_SQL_BulkLoadMissingDestinationTable();
    internal static string get_SQL_BulkLoadNoCollation();
    internal static string get_SQL_BulkLoadNonMatchingColumnMapping();
    internal static string get_SQL_BulkLoadNonMatchingColumnName();
    internal static string get_SQL_BulkLoadNotAllowDBNull();
    internal static string get_SQL_BulkLoadOrderHintDuplicateColumn();
    internal static string get_SQL_BulkLoadOrderHintInvalidColumn();
    internal static string get_SQL_BulkLoadPendingOperation();
    internal static string get_SQL_BulkLoadStringTooLong();
    internal static string get_SQL_BulkLoadUnspecifiedSortOrder();
    internal static string get_SQL_CannotCreateAuthInitializer();
    internal static string get_SQL_CannotCreateAuthProvider();
    internal static string get_SQL_CannotCreateNormalizer();
    internal static string get_SQL_CannotFindAuthProvider();
    internal static string get_SQL_CannotGetAuthProviderConfig();
    internal static string get_SQL_CannotGetDTCAddress();
    internal static string get_SQL_CannotInitializeAuthProvider();
    internal static string get_SQL_CannotModifyPropertyAsyncOperationInProgress();
    internal static string get_SQL_Certificate();
    internal static string get_SQL_ChangePasswordArgumentMissing();
    internal static string get_SQL_ChangePasswordConflictsWithSSPI();
    internal static string get_SQL_ChangePasswordRequiresYukon();
    internal static string get_SQL_ChangePasswordUseOfUnallowedKey();
    internal static string get_SQL_ConnectionDoomed();
    internal static string get_SQL_ConnectionLockedForBcpEvent();
    internal static string get_SQL_ContextAllowsLimitedKeywords();
    internal static string get_SQL_ContextAllowsOnlyTypeSystem2005();
    internal static string get_SQL_ContextConnectionIsInUse();
    internal static string get_SQL_ContextUnavailableOutOfProc();
    internal static string get_SQL_ContextUnavailableWhileInProc();
    internal static string get_SQL_CredentialsNotProvided();
    internal static string get_SQL_CTAIPNotSupportedByServer();
    internal static string get_SQL_CultureIdError();
    internal static string get_SQL_DbTypeNotSupportedOnThisPlatform();
    internal static string get_SQL_DeviceFlowWithUsernamePassword();
    internal static string get_SQL_Duration_Login_Begin();
    internal static string get_SQL_Duration_Login_ProcessConnectionAuth();
    internal static string get_SQL_Duration_PostLogin();
    internal static string get_SQL_Duration_PreLogin_Begin();
    internal static string get_SQL_Duration_PreLoginHandshake();
    internal static string get_SQL_EncryptionNotSupportedByClient();
    internal static string get_SQL_EncryptionNotSupportedByServer();
    internal static string get_SQL_EnumeratedRecordFieldCountChanged();
    internal static string get_SQL_EnumeratedRecordMetaDataChanged();
    internal static string get_SQL_ExceedsMaxDataLength();
    internal static string get_SQL_ExClientConnectionId();
    internal static string get_SQL_ExErrorNumberStateClass();
    internal static string get_SQL_ExOriginalClientConnectionId();
    internal static string get_SQL_ExRoutingDestination();
    internal static string get_SQL_FatalTimeout();
    internal static string get_SQL_GlobalizationInvariantModeNotSupported();
    internal static string get_SQL_InstanceFailure();
    internal static string get_SQL_IntegratedWithPassword();
    internal static string get_SQL_InteractiveWithPassword();
    internal static string get_Sql_InternalError();
    internal static string get_SQL_InvalidBufferSizeOrIndex();
    internal static string get_SQL_InvalidDataLength();
    internal static string get_SQL_InvalidInternalPacketSize();
    internal static string get_SQL_InvalidOptionLength();
    internal static string get_SQL_InvalidPacketSizeValue();
    internal static string get_SQL_InvalidParameterNameLength();
    internal static string get_SQL_InvalidParameterTypeNameFormat();
    internal static string get_SQL_InvalidPartnerConfiguration();
    internal static string get_SQL_InvalidRead();
    internal static string get_SQL_InvalidServerCertificate();
    internal static string get_SQL_InvalidSqlDbTypeWithOneAllowedType();
    internal static string get_SQL_InvalidSQLServerVersionUnknown();
    internal static string get_SQL_InvalidSSPIPacketSize();
    internal static string get_SQL_InvalidTDSPacketSize();
    internal static string get_SQL_InvalidTDSVersion();
    internal static string get_SQL_InvalidUdt3PartNameFormat();
    internal static string get_SQL_KerberosTicketMissingError();
    internal static string get_SQL_MarsUnsupportedOnConnection();
    internal static string get_Sql_MismatchedMetaDataDirectionArrayLengths();
    internal static string get_SQL_MoneyOverflow();
    internal static string get_SQL_MSALFailure();
    internal static string get_SQL_MSALInnerException();
    internal static string get_SQL_NestedTransactionScopesNotSupported();
    internal static string get_SQL_NetworkLibraryNotSupported();
    internal static string get_SQL_NonBlobColumn();
    internal static string get_SQL_NonCharColumn();
    internal static string get_SQL_NonInteractiveWithPassword();
    internal static string get_SQL_NonLocalSSEInstance();
    internal static string get_SQL_NonXmlResult();
    internal static string get_SQL_NotAvailableOnContextConnection();
    internal static string get_SQL_NotificationsNotAvailableOnContextConnection();
    internal static string get_SQL_NotificationsRequireYukon();
    internal static string get_SQL_NotSupportedEnumerationValue();
    internal static string get_Sql_NullCommandText();
    internal static string get_SQL_NullEmptyTransactionName();
    internal static string get_SQL_OpenResultCountExceeded();
    internal static string get_SQL_OperationCancelled();
    internal static string get_SQL_ParameterCannotBeEmpty();
    internal static string get_SQL_ParameterDirectionInvalidForOptimizedBinding();
    internal static string get_SQL_ParameterInvalidVariant();
    internal static string get_SQL_ParameterTypeNameRequired();
    internal static string get_SQL_ParsingError();
    internal static string get_SQL_ParsingErrorAuthLibraryType();
    internal static string get_SQL_ParsingErrorFeatureId();
    internal static string get_SQL_ParsingErrorLength();
    internal static string get_SQL_ParsingErrorOffset();
    internal static string get_SQL_ParsingErrorStatus();
    internal static string get_SQL_ParsingErrorToken();
    internal static string get_SQL_ParsingErrorValue();
    internal static string get_SQL_ParsingErrorWithState();
    internal static string get_SQL_PendingBeginXXXExists();
    internal static string get_SQL_PipeErrorRequiresSendEnd();
    internal static string get_SQL_PrecisionValueOutOfRange();
    internal static string get_SQL_RemoteCertificateChainErrors();
    internal static string get_SQL_RemoteCertificateNameMismatch();
    internal static string get_SQL_RemoteCertificateNotAvailable();
    internal static string get_SQL_ScaleValueOutOfRange();
    internal static string get_SQL_SettingCredentialWithDeviceFlow();
    internal static string get_SQL_SettingCredentialWithIntegrated();
    internal static string get_SQL_SettingCredentialWithInteractive();
    internal static string get_SQL_SettingCredentialWithNonInteractive();
    internal static string get_SQL_SettingDeviceFlowWithCredential();
    internal static string get_SQL_SettingIntegratedWithCredential();
    internal static string get_SQL_SettingInteractiveWithCredential();
    internal static string get_SQL_SettingNonInteractiveWithCredential();
    internal static string get_SQL_SevereError();
    internal static string get_SQL_SmallDateTimeOverflow();
    internal static string get_SQL_SnapshotNotSupported();
    internal static string get_SQL_SNIPacketAllocationFailure();
    internal static string get_SQL_SocketDidNotThrow();
    internal static string get_SQL_SqlCommandCommandText();
    internal static string get_SQL_SqlRecordReadOnly();
    internal static string get_SQL_SqlRecordReadOnly2();
    internal static string get_SQL_SqlResultSetClosed();
    internal static string get_SQL_SqlResultSetClosed2();
    internal static string get_SQL_SqlResultSetCommandNotInSameConnection();
    internal static string get_SQL_SqlResultSetNoAcceptableCursor();
    internal static string get_SQL_SqlResultSetRowDeleted();
    internal static string get_SQL_SqlResultSetRowDeleted2();
    internal static string get_SQL_SqlUpdatableRecordReadOnly();
    internal static string get_SQL_SSPIGenerateError();
    internal static string get_SQL_SSPIInitializeError();
    internal static string get_SQL_StreamNotSupportOnColumnType();
    internal static string get_SQL_StreamReadNotSupported();
    internal static string get_SQL_StreamSeekNotSupported();
    internal static string get_SQL_StreamWriteNotSupported();
    internal static string get_SQL_TDS8_NotSupported_Netstandard2_0();
    internal static string get_SQL_TDSParserTableName();
    internal static string get_SQL_TextReaderNotSupportOnColumnType();
    internal static string get_SQL_Timeout();
    internal static string get_SQL_Timeout_Active_Directory_DeviceFlow_Authentication();
    internal static string get_SQL_Timeout_Active_Directory_Interactive_Authentication();
    internal static string get_SQL_Timeout_Execution();
    internal static string get_SQL_Timeout_FailoverInfo();
    internal static string get_SQL_Timeout_Login_Begin();
    internal static string get_SQL_Timeout_Login_ProcessConnectionAuth();
    internal static string get_SQL_Timeout_PostLogin();
    internal static string get_SQL_Timeout_PreLogin_Begin();
    internal static string get_SQL_Timeout_PreLogin_ConsumeHandshake();
    internal static string get_SQL_Timeout_PreLogin_InitializeConnection();
    internal static string get_SQL_Timeout_PreLogin_SendHandshake();
    internal static string get_SQL_Timeout_RoutingDestinationInfo();
    internal static string get_SQL_TimeOverflow();
    internal static string get_SQL_TimeScaleValueOutOfRange();
    internal static string get_SQL_TooManyValues();
    internal static string get_SQL_TypeName();
    internal static string get_SQL_UDTTypeName();
    internal static string get_SQL_UnexpectedSmiEvent();
    internal static string get_SQL_UnknownSysTxIsolationLevel();
    internal static string get_SQL_UnsupportedAuthentication();
    internal static string get_SQL_UnsupportedAuthenticationByProvider();
    internal static string get_SQL_UnsupportedAuthenticationSpecified();
    internal static string get_SQL_UnsupportedFeature();
    internal static string get_SQL_UnsupportedKeyword();
    internal static string get_SQL_UnsupportedSqlAuthenticationMethod();
    internal static string get_SQL_UnsupportedSysTxVersion();
    internal static string get_SQL_UnsupportedToken();
    internal static string get_SQL_UserInstanceFailoverNotCompatible();
    internal static string get_SQL_UserInstanceFailure();
    internal static string get_SQL_UserInstanceNotAvailableInProc();
    internal static string get_SQL_WrongType();
    internal static string get_SQL_XmlReaderNotSupportOnColumnType();
    internal static string get_SqlAppContextSwitchManager_InvalidValue();
    internal static string get_SqlCommand_Notification();
    internal static string get_SqlCommand_NotificationAutoEnlist();
    internal static string get_SqlCommandBuilder_DataAdapter();
    internal static string get_SqlCommandBuilder_DecimalSeparator();
    internal static string get_SqlCommandBuilder_QuotePrefix();
    internal static string get_SqlCommandBuilder_QuoteSuffix();
    internal static string get_SqlConnection_AccessToken();
    internal static string get_SqlConnection_Asynchronous();
    internal static string get_SqlConnection_ClientConnectionId();
    internal static string get_SqlConnection_ConnectionString();
    internal static string get_SqlConnection_ConnectionTimeout();
    internal static string get_SqlConnection_Credential();
    internal static string get_SqlConnection_CustomColumnEncryptionKeyStoreProviders();
    internal static string get_SqlConnection_Database();
    internal static string get_SqlConnection_DataSource();
    internal static string get_SqlConnection_PacketSize();
    internal static string get_SqlConnection_Replication();
    internal static string get_SqlConnection_ServerProcessId();
    internal static string get_SqlConnection_ServerVersion();
    internal static string get_SqlConnection_StatisticsEnabled();
    internal static string get_SqlConnection_WorkstationId();
    internal static string get_SqlConvert_ConvertFailed();
    internal static string get_SQLCR_AllAttemptsFailed();
    internal static string get_SQLCR_EncryptionChanged();
    internal static string get_SQLCR_InvalidConnectRetryCountValue();
    internal static string get_SQLCR_InvalidConnectRetryIntervalValue();
    internal static string get_SQLCR_NextAttemptWillExceedQueryTimeout();
    internal static string get_SQLCR_NoCRAckAtReconnection();
    internal static string get_SQLCR_TDSVestionNotPreserved();
    internal static string get_SQLCR_UnrecoverableClient();
    internal static string get_SQLCR_UnrecoverableServer();
    internal static string get_SqlDelegatedTransaction_PromotionFailed();
    internal static string get_SqlDependency_AddCommandDependency();
    internal static string get_SqlDependency_DatabaseBrokerDisabled();
    internal static string get_SqlDependency_DefaultOptionsButNoStart();
    internal static string get_SqlDependency_Duplicate();
    internal static string get_SqlDependency_DuplicateStart();
    internal static string get_SqlDependency_EventNoDuplicate();
    internal static string get_SqlDependency_HasChanges();
    internal static string get_SqlDependency_Id();
    internal static string get_SqlDependency_IdMismatch();
    internal static string get_SqlDependency_InvalidTimeout();
    internal static string get_SqlDependency_NoMatchingServerDatabaseStart();
    internal static string get_SqlDependency_NoMatchingServerStart();
    internal static string get_SqlDependency_OnChange();
    internal static string get_SqlDependency_SqlDependency();
    internal static string get_SqlDependency_UnexpectedValueOnDeserialize();
    internal static string get_SqlFileStream_FileAlreadyInTransaction();
    internal static string get_SqlFileStream_InvalidParameter();
    internal static string get_SqlFileStream_InvalidPath();
    internal static string get_SqlFileStream_NotSupported();
    internal static string get_SqlFileStream_PathNotValidDiskResource();
    internal static string get_SqlMetaData_InvalidSqlDbTypeForConstructorFormat();
    internal static string get_SqlMetaData_NameTooLong();
    internal static string get_SqlMetaData_NoMetadata();
    internal static string get_SqlMetaData_SpecifyBothSortOrderAndOrdinal();
    internal static string get_SqlMisc_AlreadyFilledMessage();
    internal static string get_SqlMisc_ArithOverflowMessage();
    internal static string get_SqlMisc_BufferInsufficientMessage();
    internal static string get_SqlMisc_ClosedXmlReaderMessage();
    internal static string get_SqlMisc_CompareDiffCollationMessage();
    internal static string get_SqlMisc_ConcatDiffCollationMessage();
    internal static string get_SqlMisc_ConversionOverflowMessage();
    internal static string get_SqlMisc_DateTimeOverflowMessage();
    internal static string get_SqlMisc_DivideByZeroMessage();
    internal static string get_SqlMisc_FormatMessage();
    internal static string get_SqlMisc_InvalidArraySizeMessage();
    internal static string get_SqlMisc_InvalidDateTimeMessage();
    internal static string get_SqlMisc_InvalidFirstDayMessage();
    internal static string get_SqlMisc_InvalidFlagMessage();
    internal static string get_SqlMisc_InvalidOpStreamClosed();
    internal static string get_SqlMisc_InvalidOpStreamNonReadable();
    internal static string get_SqlMisc_InvalidOpStreamNonSeekable();
    internal static string get_SqlMisc_InvalidOpStreamNonWritable();
    internal static string get_SqlMisc_InvalidPrecScaleMessage();
    internal static string get_SqlMisc_LenTooLargeMessage();
    internal static string get_SqlMisc_MessageString();
    internal static string get_SqlMisc_NoBufferMessage();
    internal static string get_SqlMisc_NotFilledMessage();
    internal static string get_SqlMisc_NullString();
    internal static string get_SqlMisc_NullValueMessage();
    internal static string get_SqlMisc_NumeToDecOverflowMessage();
    internal static string get_SqlMisc_SetNonZeroLenOnNullMessage();
    internal static string get_SqlMisc_SqlTypeMessage();
    internal static string get_SqlMisc_StreamClosedMessage();
    internal static string get_SqlMisc_StreamErrorMessage();
    internal static string get_SqlMisc_SubclassMustOverride();
    internal static string get_SqlMisc_TimeZoneSpecifiedMessage();
    internal static string get_SqlMisc_TruncationMaxDataMessage();
    internal static string get_SqlMisc_TruncationMessage();
    internal static string get_SqlMisc_WriteNonZeroOffsetOnNullMessage();
    internal static string get_SqlMisc_WriteOffsetLargerThanLenMessage();
    internal static string get_SQLMSF_FailoverPartnerNotSupported();
    internal static string get_SQLNotify_AlreadyHasCommand();
    internal static string get_SQLNotify_ErrorFormat();
    internal static string get_SqlNotify_SqlDepCannotBeCreatedInProc();
    internal static string get_SqlParameter_DBNullNotSupportedForTVP();
    internal static string get_SqlParameter_InvalidTableDerivedPrecisionForTvp();
    internal static string get_SqlParameter_Offset();
    internal static string get_SqlParameter_ParameterName();
    internal static string get_SqlParameter_SourceColumnNullMapping();
    internal static string get_SqlParameter_SqlDbType();
    internal static string get_SqlParameter_TypeName();
    internal static string get_SqlParameter_UnexpectedTypeNameForNonStruct();
    internal static string get_SqlParameter_UnsupportedTVPOutputParameter();
    internal static string get_SqlParameter_XmlSchemaCollectionDatabase();
    internal static string get_SqlParameter_XmlSchemaCollectionName();
    internal static string get_SqlParameter_XmlSchemaCollectionOwningSchema();
    internal static string get_SqlPipe_AlreadyHasAnOpenResultSet();
    internal static string get_SqlPipe_CommandHookedUpToNonContextConnection();
    internal static string get_SqlPipe_DoesNotHaveAnOpenResultSet();
    internal static string get_SqlPipe_IsBusy();
    internal static string get_SqlPipe_MessageTooLong();
    internal static string get_SqlProvider_DuplicateSortOrdinal();
    internal static string get_SqlProvider_InvalidDataColumnMaxLength();
    internal static string get_SqlProvider_InvalidDataColumnType();
    internal static string get_SqlProvider_MissingSortOrdinal();
    internal static string get_SqlProvider_NotEnoughColumnsInStructuredType();
    internal static string get_SqlProvider_SortOrdinalGreaterThanFieldCount();
    internal static string get_SqlRetryLogic_InvalidMinMaxPair();
    internal static string get_SqlRetryLogic_InvalidRange();
    internal static string get_SqlRetryLogic_RetryCanceled();
    internal static string get_SqlRetryLogic_RetryExceeded();
    internal static string get_SQLROR_FailoverNotSupported();
    internal static string get_SQLROR_InvalidRoutingInfo();
    internal static string get_SQLROR_RecursiveRoutingNotSupported();
    internal static string get_SQLROR_TimeoutAfterRoutingInfo();
    internal static string get_SQLROR_UnexpectedRoutingInfo();
    internal static string get_SQLTVP_TableTypeCanOnlyBeParameter();
    internal static string get_SQLUDT_CantLoadAssembly();
    internal static string get_SQLUDT_InvalidDbId();
    internal static string get_SQLUDT_InvalidSize();
    internal static string get_SQLUDT_InvalidSqlType();
    internal static string get_SqlUdt_InvalidUdtMessage();
    internal static string get_SQLUDT_InvalidUdtTypeName();
    internal static string get_SQLUDT_InWhereClause();
    internal static string get_SQLUDT_MaxByteSizeValue();
    internal static string get_SQLUDT_Unexpected();
    internal static string get_SQLUDT_UnexpectedUdtTypeName();
    internal static string get_SqlUdtReason_CannotSupportNative();
    internal static string get_SqlUdtReason_CannotSupportUserDefined();
    internal static string get_SqlUdtReason_MaplessNotYetSupported();
    internal static string get_SqlUdtReason_MultipleSerFormats();
    internal static string get_SqlUdtReason_MultivaluedAssemblyId();
    internal static string get_SqlUdtReason_NativeFormatExplictLayoutNotAllowed();
    internal static string get_SqlUdtReason_NativeFormatNoFieldSupport();
    internal static string get_SqlUdtReason_NativeUdtMaxByteSize();
    internal static string get_SqlUdtReason_NativeUdtNotSequentialLayout();
    internal static string get_SqlUdtReason_NonSerializableField();
    internal static string get_SqlUdtReason_NoPublicConstructor();
    internal static string get_SqlUdtReason_NoPublicConstructors();
    internal static string get_SqlUdtReason_NotNullable();
    internal static string get_SqlUdtReason_NotSerializable();
    internal static string get_SqlUdtReason_NoUdtAttribute();
    internal static string get_SqlUdtReason_NullPropertyMissing();
    internal static string get_SqlUdtReason_ParseMethodMissing();
    internal static string get_SqlUdtReason_ToStringMethodMissing();
    internal static string get_SqlUdtReason_TypeNotPublic();
    internal static string get_SSPIInvalidHandleType();
    internal static string get_StrongTyping_CananotAccessDBNull();
    internal static string get_StrongTyping_CananotRemoveRelation();
    internal static string get_StrongTyping_CannotRemoveColumn();
    internal static string get_TCE_AttestationInfoNotReturnedFromSQLServer();
    internal static string get_TCE_AttestationProtocolNotSpecifiedForGeneratingEnclavePackage();
    internal static string get_TCE_AttestationProtocolNotSupported();
    internal static string get_TCE_AttestationProtocolNotSupportEnclaveType();
    internal static string get_TCE_AttestationURLNotSupported();
    internal static string get_TCE_BatchedUpdateColumnEncryptionSettingMismatch();
    internal static string get_TCE_CannotCreateSqlColumnEncryptionEnclaveProvider();
    internal static string get_TCE_CannotGetSqlColumnEncryptionEnclaveProviderConfig();
    internal static string get_TCE_CanOnlyCallOnce();
    internal static string get_TCE_CertificateNotFound();
    internal static string get_TCE_CertificateNotFoundSysErr();
    internal static string get_TCE_CertificateWithNoPrivateKey();
    internal static string get_TCE_CertificateWithNoPrivateKeySysErr();
    internal static string get_TCE_ColumnDecryptionFailed();
    internal static string get_TCE_ColumnEncryptionKeysNotFound();
    internal static string get_TCE_ColumnMasterKeySignatureNotFound();
    internal static string get_TCE_ColumnMasterKeySignatureVerificationFailed();
    internal static string get_TCE_DbConnectionString_AttestationProtocol();
    internal static string get_TCE_DbConnectionString_ColumnEncryptionSetting();
    internal static string get_TCE_DbConnectionString_EnclaveAttestationUrl();
    internal static string get_TCE_DbConnectionString_IPAddressPreference();
    internal static string get_TCE_DecryptionFailed();
    internal static string get_TCE_EmptyArgumentInConstructorInternal();
    internal static string get_TCE_EmptyArgumentInternal();
    internal static string get_TCE_EmptyCertificateThumbprint();
    internal static string get_TCE_EmptyCertificateThumbprintSysErr();
    internal static string get_TCE_EmptyCngKeyId();
    internal static string get_TCE_EmptyCngKeyIdSysErr();
    internal static string get_TCE_EmptyCngName();
    internal static string get_TCE_EmptyCngNameSysErr();
    internal static string get_TCE_EmptyColumnEncryptionKey();
    internal static string get_TCE_EmptyCspKeyId();
    internal static string get_TCE_EmptyCspKeyIdSysErr();
    internal static string get_TCE_EmptyCspName();
    internal static string get_TCE_EmptyCspNameSysErr();
    internal static string get_TCE_EmptyEncryptedColumnEncryptionKey();
    internal static string get_TCE_EmptyProviderName();
    internal static string get_TCE_EnclaveComputationsNotSupported();
    internal static string get_TCE_EnclaveProviderNotFound();
    internal static string get_TCE_EnclaveProvidersNotConfiguredForEnclaveBasedQuery();
    internal static string get_TCE_EnclaveTypeNotReturned();
    internal static string get_TCE_EnclaveTypeNotSupported();
    internal static string get_TCE_EnclaveTypeNullForEnclaveBasedQuery();
    internal static string get_TCE_ExceptionWhenGeneratingEnclavePackage();
    internal static string get_TCE_FailedToEncryptRegisterRulesBytePackage();
    internal static string get_TCE_InsufficientBuffer();
    internal static string get_TCE_InvalidAlgorithmVersion();
    internal static string get_TCE_InvalidAlgorithmVersionInEncryptedCEK();
    internal static string get_TCE_InvalidAttestationParameterUnableToConvertToUnsignedInt();
    internal static string get_TCE_InvalidAuthenticationTag();
    internal static string get_TCE_InvalidCertificateLocation();
    internal static string get_TCE_InvalidCertificateLocationSysErr();
    internal static string get_TCE_InvalidCertificatePath();
    internal static string get_TCE_InvalidCertificatePathSysErr();
    internal static string get_TCE_InvalidCertificateSignature();
    internal static string get_TCE_InvalidCertificateStore();
    internal static string get_TCE_InvalidCertificateStoreSysErr();
    internal static string get_TCE_InvalidCiphertextLengthInEncryptedCEK();
    internal static string get_TCE_InvalidCiphertextLengthInEncryptedCEKCng();
    internal static string get_TCE_InvalidCiphertextLengthInEncryptedCEKCsp();
    internal static string get_TCE_InvalidCipherTextSize();
    internal static string get_TCE_InvalidCngKey();
    internal static string get_TCE_InvalidCngKeySysErr();
    internal static string get_TCE_InvalidCngPath();
    internal static string get_TCE_InvalidCngPathSysErr();
    internal static string get_TCE_InvalidCspKeyId();
    internal static string get_TCE_InvalidCspKeyIdSysErr();
    internal static string get_TCE_InvalidCspName();
    internal static string get_TCE_InvalidCspNameSysErr();
    internal static string get_TCE_InvalidCspPath();
    internal static string get_TCE_InvalidCspPathSysErr();
    internal static string get_TCE_InvalidCustomKeyStoreProviderName();
    internal static string get_TCE_InvalidDatabaseIdUnableToCastToUnsignedInt();
    internal static string get_TCE_InvalidEncryptionKeyOrdinalEnclaveMetadata();
    internal static string get_TCE_InvalidEncryptionKeyOrdinalParameterMetadata();
    internal static string get_TCE_InvalidEncryptionType();
    internal static string get_TCE_InvalidKeyEncryptionAlgorithm();
    internal static string get_TCE_InvalidKeyEncryptionAlgorithmSysErr();
    internal static string get_TCE_InvalidKeyIdUnableToCastToUnsignedShort();
    internal static string get_TCE_InvalidKeySize();
    internal static string get_TCE_InvalidKeyStoreProviderName();
    internal static string get_TCE_InvalidSignature();
    internal static string get_TCE_InvalidSignatureInEncryptedCEK();
    internal static string get_TCE_InvalidSignatureInEncryptedCEKCng();
    internal static string get_TCE_InvalidSignatureInEncryptedCEKCsp();
    internal static string get_TCE_KeyDecryptionFailed();
    internal static string get_TCE_KeyDecryptionFailedCertStore();
    internal static string get_TCE_LargeCertificatePathLength();
    internal static string get_TCE_LargeCertificatePathLengthSysErr();
    internal static string get_TCE_MultipleRowsReturnedForAttestationInfo();
    internal static string get_TCE_NoAttestationUrlSpecifiedForEnclaveBasedQueryGeneratingEnclavePackage();
    internal static string get_TCE_NoAttestationUrlSpecifiedForEnclaveBasedQuerySpDescribe();
    internal static string get_TCE_NotSupportedByServer();
    internal static string get_TCE_NullArgumentInConstructorInternal();
    internal static string get_TCE_NullArgumentInternal();
    internal static string get_TCE_NullCertificatePath();
    internal static string get_TCE_NullCertificatePathSysErr();
    internal static string get_TCE_NullCipherText();
    internal static string get_TCE_NullCngPath();
    internal static string get_TCE_NullCngPathSysErr();
    internal static string get_TCE_NullColumnEncryptionAlgorithm();
    internal static string get_TCE_NullColumnEncryptionKey();
    internal static string get_TCE_NullColumnEncryptionKeySysErr();
    internal static string get_TCE_NullCspPath();
    internal static string get_TCE_NullCspPathSysErr();
    internal static string get_TCE_NullCustomKeyStoreProviderDictionary();
    internal static string get_TCE_NullEnclavePackageForEnclaveBasedQuery();
    internal static string get_TCE_NullEnclaveSessionDuringQueryExecution();
    internal static string get_TCE_NullEnclaveSessionReturnedFromProvider();
    internal static string get_TCE_NullEncryptedColumnEncryptionKey();
    internal static string get_TCE_NullKeyEncryptionAlgorithm();
    internal static string get_TCE_NullKeyEncryptionAlgorithmSysErr();
    internal static string get_TCE_NullPlainText();
    internal static string get_TCE_NullProviderValue();
    internal static string get_TCE_OffsetOutOfBounds();
    internal static string get_TCE_ParamDecryptionFailed();
    internal static string get_TCE_ParamEncryptionFailed();
    internal static string get_TCE_ParamEncryptionMetaDataMissing();
    internal static string get_TCE_ParamInvalidForceColumnEncryptionSetting();
    internal static string get_TCE_ParamUnExpectedEncryptionMetadata();
    internal static string get_TCE_ProcEncryptionMetaDataMissing();
    internal static string get_TCE_SequentialAccessNotSupportedOnEncryptedColumn();
    internal static string get_TCE_SqlColumnEncryptionEnclaveProviderNameCannotBeEmpty();
    internal static string get_TCE_SqlCommand_ColumnEncryptionSetting();
    internal static string get_TCE_SqlConnection_ColumnEncryptionKeyCacheTtl();
    internal static string get_TCE_SqlConnection_ColumnEncryptionQueryMetadataCacheEnabled();
    internal static string get_TCE_SqlConnection_TrustedColumnMasterKeyPaths();
    internal static string get_TCE_SqlParameter_ForceColumnEncryption();
    internal static string get_TCE_StreamNotSupportOnEncryptedColumn();
    internal static string get_TCE_UnableToEstablishSecureChannel();
    internal static string get_TCE_UnableToVerifyColumnMasterKeySignature();
    internal static string get_TCE_UnexpectedDescribeParamFormatAttestationInfo();
    internal static string get_TCE_UnexpectedDescribeParamFormatParameterMetadata();
    internal static string get_TCE_UnknownColumnEncryptionAlgorithm();
    internal static string get_TCE_UnknownColumnEncryptionAlgorithmId();
    internal static string get_TCE_UnrecognizedKeyStoreProviderName();
    internal static string get_TCE_UnsupportedDatatype();
    internal static string get_TCE_UnsupportedNormalizationVersion();
    internal static string get_TCE_UntrustedKeyPath();
    internal static string get_TCE_VeryLargeCiphertext();
    internal static string get_VerifyEnclaveDebuggable();
    internal static string get_VerifyEnclavePolicyFailedFormat();
    internal static string get_VerifyEnclaveReportFailed();
    internal static string get_VerifyEnclaveReportFormatFailed();
    internal static string get_VerifyHealthCertificateChainFormat();
    internal static string get_Xml_AttributeValues();
    internal static string get_Xml_CannotConvert();
    internal static string get_Xml_CanNotDeserializeObjectType();
    internal static string get_Xml_CannotInstantiateAbstract();
    internal static string get_Xml_CircularComplexType();
    internal static string get_Xml_ColumnConflict();
    internal static string get_Xml_DataTableInferenceNotSupported();
    internal static string get_Xml_DatatypeNotDefined();
    internal static string get_Xml_DuplicateConstraint();
    internal static string get_Xml_DynamicWithoutXmlSerializable();
    internal static string get_Xml_ElementTypeNotFound();
    internal static string get_Xml_FoundEntity();
    internal static string get_Xml_InvalidField();
    internal static string get_Xml_InvalidKey();
    internal static string get_Xml_InvalidPrefix();
    internal static string get_Xml_InvalidSelector();
    internal static string get_Xml_IsDataSetAttributeMissingInSchema();
    internal static string get_Xml_MergeDuplicateDeclaration();
    internal static string get_Xml_MismatchKeyLength();
    internal static string get_Xml_MissingAttribute();
    internal static string get_Xml_MissingRefer();
    internal static string get_Xml_MissingSQL();
    internal static string get_Xml_MissingTable();
    internal static string get_Xml_MultipleParentRows();
    internal static string get_Xml_MultipleTargetConverterEmpty();
    internal static string get_Xml_MultipleTargetConverterError();
    internal static string get_Xml_NestedCircular();
    internal static string get_Xml_PolymorphismNotSupported();
    internal static string get_Xml_RelationChildKeyMissing();
    internal static string get_Xml_RelationChildNameMissing();
    internal static string get_Xml_RelationParentNameMissing();
    internal static string get_Xml_RelationTableKeyMissing();
    internal static string get_Xml_SimpleTypeNotSupported();
    internal static string get_Xml_TooManyIsDataSetAtributeInSchema();
    internal static string get_Xml_UndefinedDatatype();
    internal static string get_Xml_ValueOutOfRange();
}
internal static class System.ThisAssembly : object {
    internal static string InformationalVersion;
}
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
    private static void InvokeCallbackWhenTaskCompletes(Task antecedent, AsyncCallback callback, IAsyncResult asyncResult);
}
