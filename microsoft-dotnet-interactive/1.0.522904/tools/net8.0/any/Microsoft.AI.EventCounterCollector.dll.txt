internal static class AssemblyInfo : object {
    public static string PublicKey;
    public static string MoqPublicKey;
}
internal class Microsoft.ApplicationInsights.Common.ApplicationNameProvider : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    private static string GetApplicationName();
}
internal class Microsoft.ApplicationInsights.Common.AppMapCorrelationEventSource : EventSource {
    public static AppMapCorrelationEventSource Log;
    private ApplicationNameProvider applicationNameProvider;
    private static AppMapCorrelationEventSource();
    [EventAttribute("1")]
public void FetchAppIdFailed(string exception, string appDomainName);
    [EventAttribute("2")]
public void SetCrossComponentCorrelationHeaderFailed(string exception, string appDomainName);
    [EventAttribute("3")]
public void GetCrossComponentCorrelationHeaderFailed(string exception, string appDomainName);
    [EventAttribute("4")]
public void GetComponentRoleNameHeaderFailed(string exception, string appDomainName);
    [EventAttribute("5")]
public void UnknownError(string exception, string appDomainName);
    [EventAttribute("6")]
public void FetchAppIdFailedWithResponseCode(string httpStatusCode, string appDomainName);
}
internal static class Microsoft.ApplicationInsights.Common.ArrayExtensions : object {
    internal static T[] Empty();
}
[ExtensionAttribute]
public static class Microsoft.ApplicationInsights.Common.ConditionalWeakTableExtensions : object {
    [ExtensionAttribute]
public static void AddIfNotExists(ConditionalWeakTable`2<TKey, TValue> conditionalWeakTable, TKey key, TValue value);
}
internal class Microsoft.ApplicationInsights.Common.ExceptionUtilities : object {
    internal static string GetExceptionDetailString(Exception ex);
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Common.GuidExtensions : object {
    [ExtensionAttribute]
public static string ToStringInvariant(Guid guid, string format);
}
internal static class Microsoft.ApplicationInsights.Common.HeadersUtilities : object {
    public static string GetHeaderKeyValue(IEnumerable`1<string> headerValues, string keyName);
    public static IDictionary`2<string, string> GetHeaderDictionary(IEnumerable`1<string> headerValues);
    public static IEnumerable`1<string> UpdateHeaderWithKeyValue(IEnumerable`1<string> headerValues, string keyName, string keyValue);
    public static string SanitizeString(string input);
    private static string TrimSubstring(string value, int startIndex, int endIndex);
}
internal static class Microsoft.ApplicationInsights.Common.Internal.ExperimentalConstants : object {
    public static string DeferRequestTrackingProperties;
}
internal static class Microsoft.ApplicationInsights.Common.Internal.InjectionGuardConstants : object {
    public static int AppIdMaxLength;
    public static int RequestHeaderMaxLength;
    public static int ContextHeaderKeyMaxLength;
    public static int ContextHeaderValueMaxLength;
    public static int TraceParentHeaderMaxLength;
    public static int TraceStateHeaderMaxLength;
    public static int TraceStateMaxPairs;
    public static int QuickPulseResponseHeaderMaxLength;
}
internal static class Microsoft.ApplicationInsights.Common.Internal.StringUtilities : object {
    public static string EnforceMaxLength(string input, int maxLength);
    [ObsoleteAttribute("Use System.Diagnostics.ActivityTraceId.CreateRandom().ToHexString() instead.")]
public static string GenerateTraceId();
    [ObsoleteAttribute("Use System.Diagnostics.ActivitySpanId.CreateRandom().ToHexString() instead.")]
public static string GenerateSpanId();
    [ObsoleteAttribute("Obsolete, use spanId instead")]
public static string FormatRequestId(string traceId, string spanId);
}
internal class Microsoft.ApplicationInsights.Common.PropertyFetcher : object {
    private string propertyName;
    private PropertyFetch modreq(System.Runtime.CompilerServices.IsVolatile) innerFetcher;
    public PropertyFetcher(string propertyName);
    public object Fetch(object obj);
}
internal static class Microsoft.ApplicationInsights.Common.RequestResponseHeaders : object {
    public static string RequestContextHeader;
    public static string RequestContextCorrelationSourceKey;
    public static string RequestContextCorrelationTargetKey;
    public static string StandardParentIdHeader;
    public static string StandardRootIdHeader;
    public static string RequestIdHeader;
    public static string CorrelationContextHeader;
    public static string AccessControlExposeHeadersHeader;
}
internal class Microsoft.ApplicationInsights.Common.SdkVersionUtils : object {
    internal static string GetSdkVersion(string versionPrefix);
}
[ExtensionAttribute]
internal static class Microsoft.ApplicationInsights.Common.WebHeaderCollectionExtensions : object {
    private static string KeyValuePairSeparator;
    private static int CorrelationContextHeaderMaxLength;
    private static int CorrelationContextMaxPairs;
    [ExtensionAttribute]
public static string GetNameValueHeaderValue(NameValueCollection headers, string headerName, string keyName);
    [ExtensionAttribute]
public static IDictionary`2<string, string> GetNameValueCollectionFromHeader(NameValueCollection headers, string headerName);
    [ExtensionAttribute]
public static void SetNameValueHeaderValue(NameValueCollection headers, string headerName, string keyName, string value);
    [ExtensionAttribute]
public static void SetHeaderFromNameValueCollection(NameValueCollection headers, string headerName, IEnumerable`1<KeyValuePair`2<string, string>> keyValuePairs);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetHeaderValue(NameValueCollection headers, string headerName, int maxStringLength, int maxItems);
    [ExtensionAttribute]
public static void ReadActivityBaggage(NameValueCollection headers, Activity activity);
    private static string FormatKeyValueHeader(string key, string value);
}
public class Microsoft.ApplicationInsights.Extensibility.EventCounterCollector.EventCounterCollectionModule : object {
    private int refreshInternalInSecs;
    private TelemetryClient client;
    private EventCounterListener eventCounterListener;
    private bool disposed;
    [CompilerGeneratedAttribute]
private IList`1<EventCounterCollectionRequest> <Counters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseEventSourceNameAsMetricsNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInitialized>k__BackingField;
    public IList`1<EventCounterCollectionRequest> Counters { get; private set; }
    public bool UseEventSourceNameAsMetricsNamespace { get; public set; }
    internal bool IsInitialized { get; private set; }
    internal EventCounterCollectionModule(int refreshIntervalInSecs);
    [CompilerGeneratedAttribute]
public IList`1<EventCounterCollectionRequest> get_Counters();
    [CompilerGeneratedAttribute]
private void set_Counters(IList`1<EventCounterCollectionRequest> value);
    [CompilerGeneratedAttribute]
public bool get_UseEventSourceNameAsMetricsNamespace();
    [CompilerGeneratedAttribute]
public void set_UseEventSourceNameAsMetricsNamespace(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    public sealed virtual void Dispose();
    public sealed virtual void Initialize(TelemetryConfiguration configuration);
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.ApplicationInsights.Extensibility.EventCounterCollector.EventCounterCollectionRequest : object {
    [CompilerGeneratedAttribute]
private string <EventSourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventCounterName>k__BackingField;
    public string EventSourceName { get; public set; }
    public string EventCounterName { get; public set; }
    public EventCounterCollectionRequest(string eventSourceName, string eventCounterName);
    [CompilerGeneratedAttribute]
public string get_EventSourceName();
    [CompilerGeneratedAttribute]
public void set_EventSourceName(string value);
    [CompilerGeneratedAttribute]
public string get_EventCounterName();
    [CompilerGeneratedAttribute]
public void set_EventCounterName(string value);
}
[EventSourceAttribute]
internal class Microsoft.ApplicationInsights.Extensibility.EventCounterCollector.Implementation.EventCounterCollectorEventSource : EventSource {
    private ApplicationNameProvider applicationNameProvider;
    [CompilerGeneratedAttribute]
private static EventCounterCollectorEventSource <Log>k__BackingField;
    public static EventCounterCollectorEventSource Log { get; }
    private static EventCounterCollectorEventSource();
    [CompilerGeneratedAttribute]
public static EventCounterCollectorEventSource get_Log();
    [EventAttribute("1")]
public void ModuleIsBeingInitializedEvent(int count, string applicationName);
    [EventAttribute("2")]
public void ModuleInitializedSuccess(string applicationName);
    [EventAttribute("3")]
public void EventCounterCollectorError(string stage, string exceptionMessage, string applicationName);
    [EventAttribute("4")]
public void EventCounterIntervalZero(string counterName, string applicationName);
    [EventAttribute("5")]
public void EventCounterInitializeSuccess(string applicationName);
    [EventAttribute("6")]
public void EnabledEventSource(string eventSourceName, string applicationName);
    [EventAttribute("7")]
public void NotEnabledEventSource(string eventSourceName, string applicationName);
    [EventAttribute("8")]
public void IgnoreEventWrittenAsNotInitialized(string eventSourceName, string applicationName);
    [EventAttribute("9")]
public void IgnoreEventWrittenAsEventSourceNotInConfiguredList(string eventSourceName, string applicationName);
    [EventAttribute("10")]
public void IgnoreEventWrittenAsEventPayloadNotParseable(string eventSourceName, string applicationName);
    [EventAttribute("11")]
public void EventCounterCollectorWarning(string stage, string exceptionMessage, string applicationName);
    [EventAttribute("12")]
public void EventCounterCollectorNoCounterConfigured(string applicationName);
    [EventAttribute("13")]
public void IgnoreEventWrittenAsCounterNotInConfiguredList(string eventSourceName, string counterName, string applicationName);
    [EventAttribute("14")]
public void EventCounterRefreshIntervalLessThanConfigured(double actualInterval, int configuredInterval, string applicationName);
}
internal class Microsoft.ApplicationInsights.Extensibility.EventCounterCollector.Implementation.EventCounterListener : EventListener {
    private static object LockObj;
    private string refreshIntervalInSecs;
    private int refreshInternalInSecInt;
    private EventLevel level;
    private bool isInitialized;
    private bool useEventSourceNameAsMetricsNamespace;
    private TelemetryClient telemetryClient;
    private Dictionary`2<string, string> refreshIntervalDictionary;
    private ConcurrentQueue`1<EventSource> allEventSourcesCreated;
    private IDictionary`2<string, ICollection`1<string>> countersToCollect;
    public EventCounterListener(TelemetryClient telemetryClient, IList`1<EventCounterCollectionRequest> eventCounterCollectionRequests, int refreshIntervalSecs, bool useEventSourceNameAsMetricsNamespace);
    private static EventCounterListener();
    protected virtual void OnEventSourceCreated(EventSource eventSource);
    protected virtual void OnEventWritten(EventWrittenEventArgs eventData);
    private void EnableIfRequired(EventSource eventSource);
    private void ExtractAndPostMetric(string eventSourceName, IDictionary`2<string, object> eventPayload);
}
[EditorBrowsableAttribute("1")]
internal static class Microsoft.ApplicationInsights.W3C.Internal.W3CConstants : object {
    public static string TraceParentHeader;
    public static string TraceStateHeader;
    [ObsoleteAttribute("Dot not use.")]
public static string ApplicationIdTraceStateField;
    [ObsoleteAttribute("Dot not use.")]
public static string AzureTracestateNamespace;
    [ObsoleteAttribute("Dot not use.")]
public static char TracestateAzureSeparator;
    internal static string LegacyRootPropertyIdKey;
}
internal static class Microsoft.ApplicationInsights.W3C.Internal.W3CUtilities : object {
    internal static string GetRootId(string legacyId);
    internal static bool TryGetTraceId(string legacyId, ReadOnlySpan`1& traceId);
}
