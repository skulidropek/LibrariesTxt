[CompilationMappingAttribute("7")]
public static class FsAutoComplete.DocumentationFormatter : object {
    [CompilationMappingAttribute("9")]
public static string nl { get; }
    public static int maxPadding { get; }
    [CompilationMappingAttribute("9")]
public static FSharpDisplayContext lastDisplayContext { get; public set; }
    public static string get_nl();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static int get_maxPadding();
    public static FSharpDisplayContext get_lastDisplayContext();
    public static void set_lastDisplayContext(FSharpDisplayContext value);
    public static Tuple`6<a[], b[], c[], d[], e[], f[]> emptyTypeTip();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static string op_PlusPlus(string a, string b);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Tuple`2<string, int> formatShowDocumentationLink(string name, string xmlDocSig, string assemblyName);
    internal static Tuple`2<string, int> combineParts@39(IEnumerable`1<Tuple`2<string, int>> parts);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Tuple`2<string, int> formatType(FSharpDisplayContext displayContext, FSharpType typ);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Tuple`2<string, int> format(FSharpDisplayContext displayContext, FSharpType typ);
    internal static string asGenericParamName@122-1(FSharpGenericParameter param);
    internal static string memberConstraint@128-2(bool includeMemberConstraintTypes, FSharpDisplayContext displayContext, FSharpGenericParameter param, FSharpGenericParameterMemberConstraint c);
    internal static string delegateConstraint@168-3(FSharpDisplayContext displayContext, FSharpGenericParameterDelegateConstraint tc);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string formatGenericParameter(bool includeMemberConstraintTypes, FSharpDisplayContext displayContext, FSharpGenericParameter param);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Tuple`2<string, int> formatParameter(FSharpDisplayContext displayContext, FSharpParameter p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getUnioncaseSignature(FSharpDisplayContext displayContext, FSharpUnionCase unionCase);
    internal static string formatName@323-1(string indent, int padding, FSharpParameter parameter);
    [CompilerGeneratedAttribute]
internal static int func2@1-1(FSharpList`1<int> list);
    internal static string parameterTypeWithPadding@360(FSharpDisplayContext displayContext, int maxLength, FSharpParameter p, int length);
    internal static FSharpFunc`2<FSharpParameter, string> formatParameterPadded@364-2(FSharpDisplayContext displayContext, string indent, string retTypeConstraint, int padLength, int maxLength, int length);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getFuncSignatureWithIdent(FSharpDisplayContext displayContext, FSharpMemberOrFunctionOrValue func, int ident);
    internal static string formatName@480-2(FSharpParameter parameter);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getFuncSignatureForTypeSignature(FSharpDisplayContext displayContext, FSharpMemberOrFunctionOrValue func, bool getter, bool setter);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getFuncSignature(FSharpDisplayContext f, FSharpMemberOrFunctionOrValue c);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getValSignature(FSharpDisplayContext displayContext, FSharpMemberOrFunctionOrValue v);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getFieldSignature(FSharpDisplayContext displayContext, FSharpField field);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getAPCaseSignature(FSharpDisplayContext displayContext, FSharpActivePatternCase apc);
    [CompilerGeneratedAttribute]
internal static string func2@1-2(object value);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getAttributeSignature(a displayContext, FSharpAttribute attr);
    internal static string typeName@602(FSharpEntity fse);
    internal static string enumtip@613-3(FSharpEntity fse, Unit unitVar0);
    internal static string uniontip@627-2(FSharpDisplayContext displayContext, FSharpEntity fse, Unit unitVar0);
    internal static string delegateTip@633-1(FSharpDisplayContext displayContext, FSharpEntity fse, Unit unitVar0);
    internal static int modifierScore@667(FSharpMemberOrFunctionOrValue f);
    internal static Tuple`6<String[], String[], String[], String[], String[], String[]> typeTip@640-1(FSharpDisplayContext displayContext, FSharpEntity fse, Unit unitVar0);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Tuple`2<string, Tuple`6<String[], String[], String[], String[], String[], String[]>> getEntitySignature(FSharpDisplayContext displayContext, FSharpEntity fse);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string FSharpSymbol.get_SafeFullName(FSharpSymbol );
    public static string footerForType(FSharpSymbolUse entity);
    public static string footerForType'(FSharpSymbol entity);
    public static string compiledNameType(FSharpSymbolUse entity);
    public static string compiledNameType'(FSharpSymbol entity);
    public static FSharpOption`1<Tuple`3<Tuple`2<string, Tuple`6<String[], String[], String[], String[], String[], String[]>>, string, string>> getTooltipDetailsFromSymbolUse(FSharpSymbolUse symbol);
    public static FSharpOption`1<Tuple`3<Tuple`2<string, Tuple`6<String[], String[], String[], String[], String[], String[]>>, string, string>> getTooltipDetailsFromSymbol(FSharpSymbol symbol);
}
[CompilationMappingAttribute("34")]
internal class FsAutoComplete.DraftToken : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal SymbolKind Kind@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal FSharpTokenInfo Token@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal int RightColumn@;
    [CompilationMappingAttribute("4", "0")]
internal SymbolKind Kind { get; }
    [CompilationMappingAttribute("4", "1")]
internal FSharpTokenInfo Token { get; }
    [CompilationMappingAttribute("4", "2")]
internal int RightColumn { get; }
    [DynamicDependencyAttribute("1632", "FsAutoComplete.DraftToken")]
internal DraftToken(SymbolKind kind, FSharpTokenInfo token, int rightColumn);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal SymbolKind get_Kind();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal FSharpTokenInfo get_Token();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal int get_RightColumn();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(DraftToken obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static DraftToken Create(SymbolKind kind, FSharpTokenInfo token);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DraftToken obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute("7")]
public static class FsAutoComplete.InteractiveDirectives : object {
    [CompilationMappingAttribute("9")]
internal static Regex loadRegex { get; }
    [CompilationMappingAttribute("9")]
internal static Regex standardStringRegex { get; }
    [CompilationMappingAttribute("9")]
internal static Regex verbatimStringRegex { get; }
    [CompilationMappingAttribute("9")]
internal static Regex tripleStringRegex { get; }
    internal static string unescapeStandardString(string s);
    internal static Regex get_loadRegex();
    internal static Regex get_standardStringRegex();
    internal static Regex get_verbatimStringRegex();
    internal static Regex get_tripleStringRegex();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpOption`1<string> tryParseStringFromStart(string s, int index);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<string> tryParseLoad(string line, int column);
}
[CompilationMappingAttribute("7")]
public static class FsAutoComplete.KeywordList : object {
    [CompilationMappingAttribute("9")]
public static IDictionary`2<string, string> keywordDescriptions { get; }
    [CompilationMappingAttribute("9")]
public static IDictionary`2<string, ToolTipText> keywordTooltips { get; }
    [CompilationMappingAttribute("9")]
public static IDictionary`2<string, string> hashDirectives { get; }
    [CompilationMappingAttribute("9")]
internal static FSharpList`1<Tuple`2<string, string>> arg@1 { get; }
    public static IDictionary`2<string, string> get_keywordDescriptions();
    public static IDictionary`2<string, ToolTipText> get_keywordTooltips();
    public static IDictionary`2<string, string> get_hashDirectives();
    internal static FSharpList`1<Tuple`2<string, string>> get_arg@1();
}
[CompilationMappingAttribute("7")]
public static class FsAutoComplete.Lexer : object {
    internal static FSharpList`1<FSharpTokenInfo> loop@50-10(FSharpLineTokenizer lineTokenizer, FSharpTokenizerLexState lexState, FSharpList`1<FSharpTokenInfo> acc);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpList`1<FSharpTokenInfo> tokenizeLine(String[] args, string lineStr);
    internal static bool isIdentifier(FSharpTokenInfo t);
    internal static bool isOperator(FSharpTokenInfo t);
    internal static bool isKeyword(FSharpTokenInfo t);
    internal static bool isPunctuation(FSharpTokenInfo t);
    internal static FSharpChoice`4<Unit, Unit, Unit, Unit> |GenericTypeParameterPrefix|StaticallyResolvedTypeParameterPrefix|ActivePattern|Other|(FSharpTokenInfo token, string lineStr);
    [CompilerGeneratedAttribute]
internal static DraftToken draftToken$cont@149(FSharpOption`1<DraftToken> lastToken, FSharpTokenInfo token, Unit unitVar);
    [CompilerGeneratedAttribute]
internal static Tuple`2<FSharpList`1<DraftToken>, FSharpOption`1<DraftToken>> fixTokens$cont@142(string lineStr, FSharpOption`1<DraftToken> lastToken, FSharpList`1<DraftToken> acc, FSharpTokenInfo token, Unit unitVar);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpList`1<DraftToken> fixTokens(string lineStr, FSharpList`1<FSharpTokenInfo> tokens);
    internal static FSharpOption`1<int> tryFindStartColumn@207(FSharpList`1<DraftToken> tokens);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpOption`1<LexerSymbol> getSymbolFromTokens(FSharpList`1<FSharpTokenInfo> tokens, int line, int col, string lineStr, SymbolLookupKind lookupKind);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<LexerSymbol> getSymbol(int line, int col, string lineStr, SymbolLookupKind lookupKind, String[] args);
    internal static FSharpOption`1<Tuple`2<int, String[]>> tryGetLexerSymbolIslands(LexerSymbol sym);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<Tuple`2<int, String[]>> findIdents(int col, string lineStr, SymbolLookupKind lookupType);
    public static FSharpOption`1<Tuple`2<int, String[]>> findLongIdents(int col, string lineStr);
    public static Tuple`2<FSharpList`1<string>, string> findLongIdentsAndResidue(int col, string lineStr);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<Tuple`2<int, String[]>> findClosestIdent(int col, string lineStr);
}
[CompilationMappingAttribute("2")]
public class FsAutoComplete.LexerSymbol : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal SymbolKind Kind@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal int Line@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal int LeftColumn@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal int RightColumn@;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
internal string Text@;
    [CompilationMappingAttribute("4", "0")]
public SymbolKind Kind { get; }
    [CompilationMappingAttribute("4", "1")]
public int Line { get; }
    [CompilationMappingAttribute("4", "2")]
public int LeftColumn { get; }
    [CompilationMappingAttribute("4", "3")]
public int RightColumn { get; }
    [CompilationMappingAttribute("4", "4")]
public string Text { get; }
    [DynamicDependencyAttribute("1632", "FsAutoComplete.LexerSymbol")]
public LexerSymbol(SymbolKind kind, int line, int leftColumn, int rightColumn, string text);
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public SymbolKind get_Kind();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_LeftColumn();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_RightColumn();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(LexerSymbol obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(LexerSymbol obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute("3")]
public class FsAutoComplete.ParseAndCheckResults : object {
    internal FSharpParseFileResults parseResults;
    internal EntityCache entityCache;
    internal FSharpCheckFileResults checkResults;
    public SemanticClassificationItem[] GetSemanticClassification { get; }
    public ParsedInput GetAST { get; }
    public FSharpCheckFileResults GetCheckResults { get; }
    public FSharpParseFileResults GetParseResults { get; }
    public ParseAndCheckResults(FSharpParseFileResults parseResults, FSharpCheckFileResults checkResults, EntityCache entityCache);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public FSharpResult`2<ToolTipText, string> TryGetToolTip(Position pos, string lineStr);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public FSharpResult`2<FSharpOption`1<Tuple`4<ToolTipText, string, string, FSharpOption`1<string>>>, string> TryGetToolTipEnhanced(Position pos, string lineStr);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public FSharpResult`2<Tuple`5<FSharpOption`1<ToolTipText>, FSharpOption`1<Tuple`2<string, string>>, Tuple`2<string, Tuple`6<String[], String[], String[], String[], String[], String[]>>, string, string>, string> TryGetFormattedDocumentation(Position pos, string lineStr);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public FSharpResult`2<Tuple`6<string, string, FSharpXmlDoc, Tuple`2<string, Tuple`6<String[], String[], String[], String[], String[], String[]>>, string, string>, string> TryGetFormattedDocumentationForSymbol(string xmlSig, string assembly);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public FSharpOption`1<FSharpSymbolUse> TryGetSymbolUse(Position pos, string lineStr);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public FSharpResult`2<Tuple`2<FSharpSymbolUse, FSharpSymbolUse[]>, string> TryGetSymbolUseAndUsages(Position pos, string lineStr);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public FSharpResult`2<Tuple`3<string, FSharpList`1<FSharpList`1<Tuple`2<string, string>>>, FSharpList`1<string>>, string> TryGetSignatureData(Position pos, string lineStr);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public FSharpResult`2<string, string> TryGetF1Help(Position pos, string lineStr);
    public FSharpList`1<AssemblySymbol> GetAllEntities(bool publicOnly);
    public IEnumerable`1<FSharpSymbolUse> GetAllSymbolUsesInFile();
    public SemanticClassificationItem[] get_GetSemanticClassification();
    public ParsedInput get_GetAST();
    public FSharpCheckFileResults get_GetCheckResults();
    public FSharpParseFileResults get_GetParseResults();
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
public static class FsAutoComplete.Patterns : object {
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
public static class FsAutoComplete.PrintParameter : object {
    public static FSharpFunc`2<string, Unit> print(StringBuilder sb);
}
[CompilationMappingAttribute("7")]
public static class FsAutoComplete.SignatureFormatter : object {
    [CompilationMappingAttribute("9")]
public static string nl { get; }
    public static int maxPadding { get; }
    [CompilationMappingAttribute("9")]
internal static FSharpSet`1<string> measureTypeNames { get; }
    [CompilationMappingAttribute("9")]
internal static FSharpList`1<string> elements@1 { get; }
    public static string get_nl();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public static int get_maxPadding();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static string op_PlusPlus(string a, string b);
    public static bool entityIsArray(FSharpEntity entity);
    internal static FSharpSet`1<string> get_measureTypeNames();
    internal static FSharpList`1<string> get_elements@1();
    internal static bool isMeasureType(FSharpEntity t);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string formatFSharpType(FSharpDisplayContext context, FSharpType typ);
    internal static string asGenericParamName@92(FSharpGenericParameter param);
    internal static string memberConstraint@98(bool includeMemberConstraintTypes, FSharpDisplayContext displayContext, FSharpGenericParameter param, FSharpGenericParameterMemberConstraint c);
    internal static string delegateConstraint@138(FSharpDisplayContext displayContext, FSharpGenericParameterDelegateConstraint tc);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string formatGenericParameter(bool includeMemberConstraintTypes, FSharpDisplayContext displayContext, FSharpGenericParameter param);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getUnioncaseSignature(FSharpDisplayContext displayContext, FSharpUnionCase unionCase);
    internal static string safeParameterName@271(FSharpParameter p);
    internal static string formatParameter@293(FSharpDisplayContext displayContext, FSharpParameter p);
    [CompilerGeneratedAttribute]
internal static int func2@1(FSharpList`1<int> list);
    internal static FSharpFunc`2<FSharpParameter, string> formatParameterPadded@331(FSharpDisplayContext displayContext, string indent, string retTypeConstraint, int padLength, int maxLength, int length);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getFuncSignatureWithIdent(FSharpDisplayContext displayContext, FSharpMemberOrFunctionOrValue func, int ident);
    internal static string formatName@452(FSharpParameter parameter);
    internal static string formatParameter@478-1(FSharpDisplayContext displayContext, FSharpParameter p);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getFuncSignatureForTypeSignature(FSharpDisplayContext displayContext, FSharpMemberOrFunctionOrValue func, int overloads, bool getter, bool setter);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getFuncSignature(FSharpDisplayContext f, FSharpMemberOrFunctionOrValue c);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getValSignature(FSharpDisplayContext displayContext, FSharpMemberOrFunctionOrValue v);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getFieldSignature(FSharpDisplayContext displayContext, FSharpField field);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getAPCaseSignature(FSharpDisplayContext displayContext, FSharpActivePatternCase apc);
    internal static string enumtip@590(FSharpEntity fse, Unit unitVar0);
    internal static string uniontip@600(FSharpDisplayContext displayContext, FSharpEntity fse, Unit unitVar0);
    internal static string delegateTip@606(FSharpDisplayContext displayContext, FSharpEntity fse, Unit unitVar0);
    internal static string typeTip@613(FSharpDisplayContext displayContext, FSharpEntity fse, Unit unitVar0);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string getEntitySignature(FSharpDisplayContext displayContext, FSharpEntity fse);
    internal static string formatFooter@717(string fullName, string assyName);
    public static string footerForType(FSharpSymbolUse entity);
    public static FSharpOption`1<Tuple`2<string, string>> getTooltipDetailsFromSymbolUse(FSharpSymbolUse symbol);
}
[DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
[CompilationMappingAttribute("1")]
public class FsAutoComplete.SymbolKind : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal int _tag;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static SymbolKind _unique_Ident;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static SymbolKind _unique_Operator;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static SymbolKind _unique_GenericTypeParameter;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static SymbolKind _unique_StaticallyResolvedTypeParameter;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static SymbolKind _unique_ActivePattern;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static SymbolKind _unique_Keyword;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static SymbolKind _unique_Dot;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static SymbolKind _unique_Other;
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public int Tag { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static SymbolKind Ident { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsIdent { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static SymbolKind Operator { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsOperator { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static SymbolKind GenericTypeParameter { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsGenericTypeParameter { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static SymbolKind StaticallyResolvedTypeParameter { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsStaticallyResolvedTypeParameter { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static SymbolKind ActivePattern { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsActivePattern { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static SymbolKind Keyword { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsKeyword { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static SymbolKind Dot { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsDot { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static SymbolKind Other { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsOther { get; }
    private static SymbolKind();
    [DynamicDependencyAttribute("2016", "FsAutoComplete.SymbolKind")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal SymbolKind(int _tag);
    [CompilationMappingAttribute("8", "0")]
public static SymbolKind get_Ident();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsIdent();
    [CompilationMappingAttribute("8", "1")]
public static SymbolKind get_Operator();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsOperator();
    [CompilationMappingAttribute("8", "2")]
public static SymbolKind get_GenericTypeParameter();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsGenericTypeParameter();
    [CompilationMappingAttribute("8", "3")]
public static SymbolKind get_StaticallyResolvedTypeParameter();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsStaticallyResolvedTypeParameter();
    [CompilationMappingAttribute("8", "4")]
public static SymbolKind get_ActivePattern();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsActivePattern();
    [CompilationMappingAttribute("8", "5")]
public static SymbolKind get_Keyword();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsKeyword();
    [CompilationMappingAttribute("8", "6")]
public static SymbolKind get_Dot();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsDot();
    [CompilationMappingAttribute("8", "7")]
public static SymbolKind get_Other();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsOther();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal object __DebugDisplay();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(SymbolKind obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(SymbolKind obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[RequireQualifiedAccessAttribute]
[DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
[CompilationMappingAttribute("1")]
public class FsAutoComplete.SymbolLookupKind : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal int _tag;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static SymbolLookupKind _unique_Fuzzy;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static SymbolLookupKind _unique_ByLongIdent;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static SymbolLookupKind _unique_Simple;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static SymbolLookupKind _unique_ForCompletion;
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public int Tag { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static SymbolLookupKind Fuzzy { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsFuzzy { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static SymbolLookupKind ByLongIdent { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsByLongIdent { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static SymbolLookupKind Simple { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsSimple { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static SymbolLookupKind ForCompletion { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsForCompletion { get; }
    private static SymbolLookupKind();
    [DynamicDependencyAttribute("2016", "FsAutoComplete.SymbolLookupKind")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal SymbolLookupKind(int _tag);
    [CompilationMappingAttribute("8", "0")]
public static SymbolLookupKind get_Fuzzy();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsFuzzy();
    [CompilationMappingAttribute("8", "1")]
public static SymbolLookupKind get_ByLongIdent();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsByLongIdent();
    [CompilationMappingAttribute("8", "2")]
public static SymbolLookupKind get_Simple();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsSimple();
    [CompilationMappingAttribute("8", "3")]
public static SymbolLookupKind get_ForCompletion();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsForCompletion();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal object __DebugDisplay();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(SymbolLookupKind obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(SymbolLookupKind obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
[CompilationMappingAttribute("7")]
public static class FsAutoComplete.TipFormatter : object {
    [CompilationMappingAttribute("9")]
internal static ConcurrentDictionary`2<string, FSharpMap`2<string, XmlDocMember>> xmlDocCache { get; }
    [CompilationMappingAttribute("9")]
public static FSharpFunc`2<TaggedText[], string> formatUntaggedTexts { get; }
    [CompilationMappingAttribute("9")]
public static FSharpFunc`2<TaggedText[], string> formatTaggedTexts { get; }
    public static string nl();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpMap`2<string, XmlDocMember> readXmlDoc(XmlReader reader, int indentationSize, FSharpMap`2<string, XmlDocMember> acc);
    internal static ConcurrentDictionary`2<string, FSharpMap`2<string, XmlDocMember>> get_xmlDocCache();
    internal static FSharpOption`1<string> exists@854(string filePath, bool tryAgain);
    internal static FSharpOption`1<FSharpMap`2<string, XmlDocMember>> getXmlDoc(string dllFile);
    internal static int findIndentationSize@911(FSharpList`1<string> lines);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static string buildFormatComment(FSharpXmlDoc cmt, FormatCommentStyle formatStyle, FSharpOption`1<string> typeDoc);
    public static string formatTaggedText(TaggedText t);
    public static string formatUntaggedText(TaggedText t);
    public static FSharpFunc`2<TaggedText[], string> get_formatUntaggedTexts();
    [CompilerGeneratedAttribute]
internal static String[] func1@1(TaggedText[] array);
    public static FSharpFunc`2<TaggedText[], string> get_formatTaggedTexts();
    [CompilerGeneratedAttribute]
internal static String[] func1@1-1(TaggedText[] array);
    public static string formatGenericParameters(FSharpList`1<TaggedText[]> typeMappings);
    internal static Tuple`2<string, string> makeTooltip@1018(ToolTipElementData tipElement);
    public static Tuple`2<string, string> formatCompletionItemTip(ToolTipText _arg1);
    public static Tuple`2<string, string> formatPlainTip(ToolTipText _arg1);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpList`1<FSharpList`1<Tuple`3<string, string, string>>> formatTipEnhanced(ToolTipText _arg1, string signature, string footer, FSharpOption`1<string> typeDoc, FormatCommentStyle formatCommentStyle);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpList`1<FSharpList`1<Tuple`8<string, String[], String[], String[], String[], String[], String[], Tuple`3<string, string, string>>>> formatDocumentation(ToolTipText _arg2, string signature, Tuple`6<String[], String[], String[], String[], String[], String[]> _arg1_1, string footer, string cn);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpList`1<FSharpList`1<Tuple`8<string, String[], String[], String[], String[], String[], String[], Tuple`3<string, string, string>>>> formatDocumentationFromXmlSig(string xmlSig, string assembly, string signature, Tuple`6<String[], String[], String[], String[], String[], String[]> _arg1_1, string footer, string cn);
    internal static string getSignature@1113(TaggedText[] t);
    public static string extractSignature(ToolTipText _arg1);
    public static FSharpList`1<string> extractGenericParameters(ToolTipText _arg1);
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
public static class FsAutoComplete.TypedAstExtensionHelpers : object {
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<string> FSharpEntity.TryGetFullName(FSharpEntity );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<string> FSharpEntity.TryGetFullDisplayName(FSharpEntity );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<string> FSharpEntity.TryGetFullCompiledName(FSharpEntity );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IEnumerable`1<FSharpEntity> FSharpEntity.get_PublicNestedEntities(FSharpEntity );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IList`1<FSharpMemberOrFunctionOrValue> FSharpEntity.get_TryGetMembersFunctionsAndValues(FSharpEntity );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<string> FSharpEntity.TryGetFullNameWithUnderScoreTypes(FSharpEntity );
    internal static FSharpEntity realEntity@132(FSharpEntity s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpEntity FSharpEntity.UnAnnotate(FSharpEntity );
    internal static int loop@141-9(FSharpEntity ent, int l);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static int FSharpEntity.InheritanceDepth(FSharpEntity );
    internal static FSharpList`1<FSharpType> allBaseTypes@150(FSharpEntity entity);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpList`1<FSharpType> FSharpEntity.get_AllBaseTypes(FSharpEntity );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<FSharpType> FSharpMemberOrFunctionOrValue.get_FullTypeSafe(FSharpMemberOrFunctionOrValue );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<string> FSharpMemberOrFunctionOrValue.TryGetFullDisplayName(FSharpMemberOrFunctionOrValue );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool FSharpMemberOrFunctionOrValue.get_IsConstructor(FSharpMemberOrFunctionOrValue );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool FSharpMemberOrFunctionOrValue.get_IsOperatorOrActivePattern(FSharpMemberOrFunctionOrValue );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpOption`1<FSharpEntity> FSharpMemberOrFunctionOrValue.get_EnclosingEntitySafe(FSharpMemberOrFunctionOrValue );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IEnumerable`1<FSharpEntity> FSharpAssemblySignature.TryGetEntities(FSharpAssemblySignature );
    internal static FSharpChoice`7<FSharpMemberOrFunctionOrValue, FSharpEntity, FSharpGenericParameter, FSharpUnionCase, FSharpField, FSharpParameter, FSharpActivePatternCase> |MFV|Entity|GenericParameter|UnionCase|Field|Parameter|ActivePattern|(FSharpSymbol s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpSymbol FSharpSymbol.GetAbbreviatedParent(FSharpSymbol );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool FSharpSymbol.get_IsPrivateToFile(FSharpSymbol );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool FSharpSymbol.get_IsInternalToProject(FSharpSymbol );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static string FSharpSymbol.get_XmlDocSig(FSharpSymbol );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static FSharpXmlDoc FSharpSymbol.get_XmlDoc(FSharpSymbol );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static bool FSharpGenericParameterMemberConstraint.get_IsProperty(FSharpGenericParameterMemberConstraint );
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
public static class FsAutoComplete.TypedAstUtils : object {
    [CompilationMappingAttribute("9")]
internal static Regex UnnamedUnionFieldRegex { get; }
    public static bool isSymbolLocalForProject(FSharpSymbol symbol);
    public static FSharpOption`1<FSharpEntity> getTypeIfConstructor(FSharpSymbol symbol);
    public static bool isAttribute(FSharpAttribute attribute);
    public static bool hasAttribute(IEnumerable`1<FSharpAttribute> attributes);
    public static FSharpOption`1<FSharpAttribute> tryGetAttribute(IEnumerable`1<FSharpAttribute> attributes);
    public static bool hasModuleSuffixAttribute(FSharpEntity entity);
    public static bool isOperator(string name);
    internal static Regex get_UnnamedUnionFieldRegex();
    public static bool isUnnamedUnionCaseField(FSharpField field);
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
internal static class FsAutoComplete.Utils : object {
    [CompilationMappingAttribute("9")]
internal static AsyncMaybeBuilder asyncMaybe { get; }
    [CompilationMappingAttribute("9")]
internal static MaybeBuilder maybe { get; }
    internal static bool isAScript(string fileName);
    internal static bool isSignatureFile(string fileName);
    internal static bool isFsharpFile(string fileName);
    internal static bool isFileWithFSharp(string fileName);
    internal static string normalizePath(string file);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static string combinePaths(string path1, string path2);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static string op_LessDivideGreater(string path1, string path2);
    internal static FSharpParsingOptions projectOptionsToParseOptions(FSharpProjectOptions checkOptions);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpOption`1<value> ConcurrentDictionary`2.TryFind(ConcurrentDictionary`2<key, value> x, key key);
    internal static string Path.GetFullPathSafe.Static(string path);
    internal static string Path.GetFileNameSafe.Static(string path);
    internal static string Path.FilePathToUri.Static(string filePath);
    internal static bool isWindowsStyleDriveLetterMatch@650(string s);
    internal static string Path.FileUriToLocalPath.Static(string uriString);
    internal static a debug(PrintfFormat`4<a, Unit, string, Unit> msg);
    internal static a fail(PrintfFormat`4<a, Unit, string, Unit> msg);
    internal static AsyncMaybeBuilder get_asyncMaybe();
    internal static MaybeBuilder get_maybe();
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpOption`1<string> chooseByPrefix(string prefix, string s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpOption`1<string> chooseByPrefix2(FSharpList`1<string> prefixes, string s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpOption`1<Tuple`2<string, string>> splitByPrefix(string prefix, string s);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpOption`1<Tuple`2<string, string>> splitByPrefix2(FSharpList`1<string> prefixes, string s);
    internal static FSharpAsync`1<b> loop@755-3(FSharpFunc`2<a, FSharpAsync`1<Unit>> fn, FSharpRef`1<Debounce`1<a>> x, FSharpMailboxProcessor`1<a> agent, int ida, int idb, FSharpOption`1<a> arg);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static FSharpXmlDoc FSharpSymbol.get_XDoc(FSharpSymbol );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static string FSharpSymbol.get_XSig(FSharpSymbol );
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static Range FSharpSymbol.get_DefinitionRange(FSharpSymbol );
}
[CompilationMappingAttribute("3")]
public class Microsoft.DotNet.Interactive.FSharp.FSharpKernel : Kernel {
    internal FSharpRef`1<FSharpKernel> this;
    internal static object lockObj;
    internal Lazy`1<FSharpScript> script;
    internal CancellationTokenSource cancellationTokenSource;
    internal ConcurrentDictionary`2<string, XmlDocument> xmlDocuments;
    internal static int init@34-1;
    [DefaultValueAttribute]
public string workingDirectory;
    internal int init@34;
    private static FSharpKernel();
    public FSharpList`1<KernelValue> GetValues();
    public Type getValueType(string name);
    public bool handleTryGetValue(string name, a& value);
    public void AddAssemblyReferencesAndPackageRoots(IEnumerable`1<string> assemblyReferences, IEnumerable`1<string> packageRoots);
    private virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestCompletions>.HandleAsync(RequestCompletions command, KernelInvocationContext context);
    private virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestDiagnostics>.HandleAsync(RequestDiagnostics command, KernelInvocationContext context);
    private virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestHoverText>.HandleAsync(RequestHoverText command, KernelInvocationContext context);
    private virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestValueInfos>.HandleAsync(RequestValueInfos command, KernelInvocationContext context);
    private virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.RequestValue>.HandleAsync(RequestValue command, KernelInvocationContext context);
    private virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.SendValue>.HandleAsync(SendValue command, KernelInvocationContext context);
    private virtual override Task Microsoft.DotNet.Interactive.IKernelCommandHandler<Microsoft.DotNet.Interactive.Commands.SubmitCode>.HandleAsync(SubmitCode command, KernelInvocationContext context);
    [CompilerGeneratedAttribute]
internal FSharpScript createScript();
    [CompilerGeneratedAttribute]
internal string getKindString(FSharpGlyph glyph);
    [CompilerGeneratedAttribute]
internal string getFilterText(DeclarationListItem declarationItem);
    [CompilerGeneratedAttribute]
internal FSharpOption`1<XmlDocument> tryGetXmlDocument(string xmlFile);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal FSharpOption`1<string> tryGetDocumentationByXmlFileAndKey(string xmlFile, string key);
    [CompilerGeneratedAttribute]
internal FSharpOption`1<string> tryGetDocumentationByToolTipElementData(FSharpList`1<ToolTipElementData> dataList);
    [CompilerGeneratedAttribute]
internal Task`1<string> getDocumentation(DeclarationListItem declarationItem);
    [CompilerGeneratedAttribute]
internal Task`1<CompletionItem> getCompletionItem(DeclarationListItem declarationItem);
    [CompilerGeneratedAttribute]
internal Diagnostic getDiagnostic(FSharpDiagnostic error);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal Task`1<Unit> handleSubmitCode(SubmitCode codeSubmission, KernelInvocationContext context);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal Task`1<Unit> handleRequestCompletions(RequestCompletions requestCompletions, KernelInvocationContext context);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal Task`1<Unit> handleRequestHoverText(RequestHoverText requestHoverText, KernelInvocationContext context);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal Task`1<Unit> handleRequestDiagnostics(RequestDiagnostics requestDiagnostics, KernelInvocationContext context);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal Task`1<Unit> handleRequestValueValueInfos(RequestValueInfos requestValueInfos, KernelInvocationContext context);
    [CompilationArgumentCountsAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
internal Task`1<Unit> handleRequestValue(RequestValue requestValue, KernelInvocationContext context);
}
[AbstractClassAttribute]
[ExtensionAttribute]
[SealedAttribute]
[CompilationMappingAttribute("3")]
public static class Microsoft.DotNet.Interactive.FSharp.FSharpKernelExtensions : object {
    [ExtensionAttribute]
public static FSharpKernel UseDefaultFormatting(FSharpKernel kernel);
    [ExtensionAttribute]
public static FSharpKernel UseKernelHelpers(FSharpKernel kernel);
    [CompilerGeneratedAttribute]
internal static string referenceAssemblyContaining(Type typ);
    [CompilerGeneratedAttribute]
internal static string openNamespaceContaining(Type typ);
    [CompilerGeneratedAttribute]
internal static string openType(Type typ);
}
[AutoOpenAttribute]
[CompilationMappingAttribute("7")]
public static class Microsoft.DotNet.Interactive.FSharp.FSharpKernelHelpers.DisplayFunctions : object {
    public static DisplayedValue display(object value);
    public static IHtmlContent HTML(string value);
    public static void CSS(string styles);
    public static void Javascript(string content);
}
[CompilationMappingAttribute("7")]
public static class Microsoft.DotNet.Interactive.FSharp.FSharpKernelHelpers.Html : object {
}
[CompilationMappingAttribute("3")]
internal interface Microsoft.DotNet.Interactive.FSharp.FSharpKernelHelpers.IMarker {
}
[CompilationMappingAttribute("3")]
public class Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.FSharpScript : object {
    internal FsiEvaluationSession fsi;
    public IEvent`2<FSharpHandler`1<Tuple`3<object, Type, string>>, Tuple`3<object, Type, string>> ValueBound { get; }
    public FsiEvaluationSession Fsi { get; }
    public FSharpScript(FSharpOption`1<String[]> additionalArgs, FSharpOption`1<bool> quiet, FSharpOption`1<LangVersion> langVersion);
    public IEvent`2<FSharpHandler`1<Tuple`3<object, Type, string>>, Tuple`3<object, Type, string>> get_ValueBound();
    public FsiEvaluationSession get_Fsi();
    public Tuple`2<FSharpResult`2<FSharpOption`1<FsiValue>, Exception>, FSharpDiagnostic[]> Eval(string code, FSharpOption`1<CancellationToken> cancellationToken);
    public Task`1<DeclarationListItem[]> GetCompletionItems(string text, int line, int column);
    private virtual override void System.IDisposable.Dispose();
}
[RequireQualifiedAccessAttribute]
[DebuggerDisplayAttribute("{__DebugDisplay(),nq}")]
[CompilationMappingAttribute("1")]
public class Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion : object {
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal int _tag;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static LangVersion _unique_V47;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static LangVersion _unique_V50;
    [DebuggerBrowsableAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal static LangVersion _unique_Preview;
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public int Tag { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static LangVersion V47 { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsV47 { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static LangVersion V50 { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsV50 { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public static LangVersion Preview { get; }
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[DebuggerBrowsableAttribute("0")]
public bool IsPreview { get; }
    private static LangVersion();
    [DynamicDependencyAttribute("2016", "Microsoft.DotNet.Interactive.FSharp.ScriptHelpers.LangVersion")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal LangVersion(int _tag);
    [CompilationMappingAttribute("8", "0")]
public static LangVersion get_V47();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsV47();
    [CompilationMappingAttribute("8", "1")]
public static LangVersion get_V50();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsV50();
    [CompilationMappingAttribute("8", "2")]
public static LangVersion get_Preview();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public bool get_IsPreview();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
public int get_Tag();
    [CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal object __DebugDisplay();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(LangVersion obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual int CompareTo(object obj, IComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode(IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj, IEqualityComparer comp);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(LangVersion obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(object obj);
}
