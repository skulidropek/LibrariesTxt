[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.DotNet.Interactive.PackageManagement.KernelExtensions : object {
    [ExtensionAttribute]
public static T UseNugetDirective(T kernel, Func`3<T, IReadOnlyList`1<ResolvedPackageReference>, Task> onResolvePackageReferences, bool forceRestore);
    private static Command i(Lazy`1<PackageRestoreContext> lazyPackageRestoreContext);
    private static Command r(Lazy`1<PackageRestoreContext> lazyPackageRestoreContext);
    private static bool EndsInDirectorySeparator(string path);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PackageManagement.KernelExtensions/<Restore>d__4`1")]
private static Task Restore(KernelInvocationContext context, Lazy`1<PackageRestoreContext> lazyPackageRestoreContext, Func`3<T, IReadOnlyList`1<ResolvedPackageReference>, Task> registerResolvedPackageReferences);
    [CompilerGeneratedAttribute]
internal static Task <r>g__HandleAddPackageReference|2_1(PackageReferenceOrFileInfo package, KernelInvocationContext context, Lazy`1<PackageRestoreContext> packageRestoreContext);
    [CompilerGeneratedAttribute]
internal static string <r>g__GenerateErrorMessage|2_5(PackageReference requested, PackageReference existing);
}
public class Microsoft.DotNet.Interactive.PackageManagement.PackageRestoreContext : object {
    private static string restoreTfm;
    private ConcurrentDictionary`2<string, PackageReference> _requestedPackageReferences;
    private ConcurrentDictionary`2<string, ResolvedPackageReference> _resolvedPackageReferences;
    private ConcurrentDictionary`2<string, string> _requestedRestoreSources;
    private ConcurrentDictionary`2<string, string> _resolvedRestoreSources;
    private DependencyProvider _dependencyProvider;
    public IEnumerable`1<string> RestoreSources { get; }
    public IEnumerable`1<PackageReference> RequestedPackageReferences { get; }
    public IEnumerable`1<ResolvedPackageReference> ResolvedPackageReferences { get; }
    public PackageRestoreContext(bool forceRestore);
    [IteratorStateMachineAttribute("Microsoft.DotNet.Interactive.PackageManagement.PackageRestoreContext/<AssemblyProbingPaths>d__7")]
private IEnumerable`1<string> AssemblyProbingPaths();
    [IteratorStateMachineAttribute("Microsoft.DotNet.Interactive.PackageManagement.PackageRestoreContext/<NativeProbingRoots>d__8")]
private IEnumerable`1<string> NativeProbingRoots();
    public void TryAddRestoreSource(string source);
    public PackageReference GetOrAddPackageReference(string packageName, string packageVersion);
    public IEnumerable`1<string> get_RestoreSources();
    public IEnumerable`1<PackageReference> get_RequestedPackageReferences();
    public IEnumerable`1<ResolvedPackageReference> get_ResolvedPackageReferences();
    public ResolvedPackageReference GetResolvedPackageReference(string packageName);
    [IteratorStateMachineAttribute("Microsoft.DotNet.Interactive.PackageManagement.PackageRestoreContext/<GetPackageManagerLines>d__18")]
private IEnumerable`1<Tuple`2<string, string>> GetPackageManagerLines();
    private bool TryGetPackageAndVersionFromPackageRoot(DirectoryInfo packageRoot, PackageReference& packageReference);
    [IteratorStateMachineAttribute("Microsoft.DotNet.Interactive.PackageManagement.PackageRestoreContext/<GetAssemblyPathsForPackage>d__20")]
private IEnumerable`1<FileInfo> GetAssemblyPathsForPackage(DirectoryInfo root, IEnumerable`1<FileInfo> resolutions);
    [IteratorStateMachineAttribute("Microsoft.DotNet.Interactive.PackageManagement.PackageRestoreContext/<GetResolvedPackageReferences>d__21")]
private IEnumerable`1<ResolvedPackageReference> GetResolvedPackageReferences(IEnumerable`1<FileInfo> resolutions, IEnumerable`1<DirectoryInfo> packageRoots);
    private void OnAssemblyLoad(object sender, AssemblyLoadEventArgs args);
    private IResolveDependenciesResult Resolve(IEnumerable`1<Tuple`2<string, string>> packageManagerTextLines, string executionTfm, ResolvingErrorReport reportError);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Interactive.PackageManagement.PackageRestoreContext/<RestoreAsync>d__24")]
public Task`1<PackageRestoreResult> RestoreAsync();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private PackageReference <GetOrAddPackageReference>g__AppendPathSeparator|10_0(PackageReference resolved, <>c__DisplayClass10_0& );
}
public class Microsoft.DotNet.Interactive.PackageManagement.PackageRestoreResult : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ResolvedPackageReference> <ResolvedReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <Errors>k__BackingField;
    public IReadOnlyList`1<ResolvedPackageReference> ResolvedReferences { get; }
    public bool Succeeded { get; }
    public IReadOnlyCollection`1<string> Errors { get; }
    public PackageRestoreResult(bool succeeded, IEnumerable`1<PackageReference> requestedPackages, IReadOnlyList`1<ResolvedPackageReference> resolvedReferences, IReadOnlyCollection`1<string> errors);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ResolvedPackageReference> get_ResolvedReferences();
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_Errors();
}
[ExtensionAttribute]
internal static class Microsoft.DotNet.Interactive.Utility.InvocationContextExtensions : object {
    [ExtensionAttribute]
public static T GetService(InvocationContext context);
}
[DebuggerStepThroughAttribute]
internal class Pocket.CompositeDisposable : object {
    private bool isDisposed;
    private List`1<IDisposable> disposables;
    public void Add(IDisposable disposable);
    public void Add(Action dispose);
    public sealed virtual void Dispose();
    public sealed virtual IEnumerator`1<IDisposable> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DebuggerStepThroughAttribute]
internal class Pocket.ConfirmationLogger : OperationLogger {
    public ConfirmationLogger(string operationName, string category, string message, Func`1<ValueTuple`2[]> exitArgs, bool logOnStart, Object[] args);
    public void Fail(Exception exception, string message, Object[] args);
    public void Succeed(string message, Object[] args);
    public virtual void Dispose();
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class Pocket.Discover : object {
    [ExtensionAttribute]
public static IEnumerable`1<Type> Concrete(IEnumerable`1<Type> types);
    public static IEnumerable`1<Type> ConcreteTypes();
    [ExtensionAttribute]
public static IEnumerable`1<Type> DerivedFrom(IEnumerable`1<Type> types, Type type);
    [ExtensionAttribute]
public static IEnumerable`1<Type> ImplementingOpenGenericInterfaces(IEnumerable`1<Type> source, Type[] interfaces);
    public static IEnumerable`1<Type> Types();
    [ExtensionAttribute]
public static IEnumerable`1<Type> Types(IEnumerable`1<Assembly> assemblies);
}
[DebuggerStepThroughAttribute]
internal static class Pocket.Disposable : object {
    private static IDisposable empty;
    [CompilerGeneratedAttribute]
private static IDisposable <Empty>k__BackingField;
    public static IDisposable Empty { get; }
    private static Disposable();
    public static IDisposable Create(Action dispose);
    [CompilerGeneratedAttribute]
public static IDisposable get_Empty();
}
[ExtensionAttribute]
internal static class Pocket.Format : object {
    [ExtensionAttribute]
public static ValueTuple`2<string, ValueTuple`2[]> Evaluate(ValueTuple`8& e);
    [ExtensionAttribute]
public static string ToLogString(ValueTuple`8& e);
    [ExtensionAttribute]
internal static string ToLogString(object value);
    [ExtensionAttribute]
private static string IfNotEmpty(string value, string prefix, string suffix);
    private static string LogLevelString(LogLevel logLevel, bool isStartOfOperation, bool isEndOfOperation, Nullable`1<bool> isOperationSuccessful, Nullable`1<TimeSpan> duration);
    [CompilerGeneratedAttribute]
internal static string <LogLevelString>g__symbol|5_0(<>c__DisplayClass5_0& );
}
[DebuggerStepThroughAttribute]
internal class Pocket.Formatter : object {
    private static ConcurrentDictionary`2<string, Formatter> cache;
    private static bool stopCaching;
    private static int cacheCount;
    private static Regex tokenRegex;
    private string template;
    private List`1<Action`2<StringBuilder, object>> argumentFormatters;
    private List`1<string> tokens;
    [CompilerGeneratedAttribute]
private static int <CacheLimit>k__BackingField;
    public IReadOnlyList`1<string> Tokens { get; }
    public static int CacheCount { get; }
    public static int CacheLimit { get; public set; }
    private static Formatter();
    public Formatter(string template);
    public IReadOnlyList`1<string> get_Tokens();
    public FormatterResult Format(IReadOnlyList`1<object> args, IList`1<ValueTuple`2<string, object>> knownProperties);
    public FormatterResult Format(Object[] args);
    public static int get_CacheCount();
    [CompilerGeneratedAttribute]
public static int get_CacheLimit();
    [CompilerGeneratedAttribute]
public static void set_CacheLimit(int value);
    public static Formatter Parse(string template);
    [CompilerGeneratedAttribute]
internal static void <Format>g__TryAppendComma|11_0(<>c__DisplayClass11_0& , <>c__DisplayClass11_1& );
    [CompilerGeneratedAttribute]
internal static Formatter <Parse>g__CreateFormatter|19_0(string t);
}
[DebuggerStepThroughAttribute]
internal class Pocket.LogEntry : object {
    [CompilerGeneratedAttribute]
private bool <IsStartOfOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsOperationSuccessful>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEndOfOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <OperationDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationLogger <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TimestampUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageTemplate>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<string, object>> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Args>k__BackingField;
    public bool IsStartOfOperation { get; }
    public Nullable`1<bool> IsOperationSuccessful { get; }
    public bool IsEndOfOperation { get; }
    public Nullable`1<TimeSpan> OperationDuration { get; }
    public string OperationName { get; }
    public string Category { get; }
    public OperationLogger Operation { get; }
    public DateTime TimestampUtc { get; }
    public LogLevel LogLevel { get; }
    public Exception Exception { get; }
    public string OperationId { get; }
    public string MessageTemplate { get; public set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<string, object>> Properties { get; public set; }
    public Object[] Args { get; public set; }
    public LogEntry(LogLevel logLevel, string messageTemplate, Exception exception, string category, string operationName, OperationLogger operation, Object[] args);
    [CompilerGeneratedAttribute]
public bool get_IsStartOfOperation();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsOperationSuccessful();
    [CompilerGeneratedAttribute]
public bool get_IsEndOfOperation();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_OperationDuration();
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public OperationLogger get_Operation();
    [CompilerGeneratedAttribute]
public DateTime get_TimestampUtc();
    [CompilerGeneratedAttribute]
public LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public string get_OperationId();
    [CompilerGeneratedAttribute]
public string get_MessageTemplate();
    [CompilerGeneratedAttribute]
public void set_MessageTemplate(string value);
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`2<string, object>> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(List`1<ValueTuple`2<string, object>> value);
    [CompilerGeneratedAttribute]
public Object[] get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(Object[] value);
    public void AddProperty(ValueTuple`2<string, object> property);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Pocket.LogEvents : object {
    public static IDisposable Enrich(Action`1<Action`1<ValueTuple`2<string, object>>> onEnrich, Assembly[] searchInAssemblies);
    public static LoggerSubscription Subscribe(Action`1<ValueTuple`8<string, Object[], List`1<ValueTuple`2<string, object>>, byte, DateTime, Exception, string, ValueTuple`2<string, ValueTuple`5<string, bool, bool, Nullable`1<bool>, Nullable`1<TimeSpan>>>>> onEntryPosted, Assembly[] searchInAssemblies);
    private static void SubscribeLoggers(IEnumerable`1<Type> pocketLoggerTypes, LoggerSubscription subscription, Action`1<T> onEntryPosted);
    [ExtensionAttribute]
private static Action`1<T> Catch(Action`1<T> publish);
    [ExtensionAttribute]
private static IEnumerable`1<Type> PocketLoggers(IEnumerable`1<Type> types);
}
[DebuggerStepThroughAttribute]
internal class Pocket.Logger : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Action`1<Action`1<ValueTuple`2<string, object>>> Enrich;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Action`1<ValueTuple`8<string, Object[], List`1<ValueTuple`2<string, object>>, byte, DateTime, Exception, string, ValueTuple`2<string, ValueTuple`5<string, bool, bool, Nullable`1<bool>, Nullable`1<TimeSpan>>>>> Posted;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private static Logger <Log>k__BackingField;
    public string Category { get; }
    public static Logger Log { get; }
    public Logger(string category);
    private static Logger();
    [CompilerGeneratedAttribute]
public static void add_Enrich(Action`1<Action`1<ValueTuple`2<string, object>>> value);
    [CompilerGeneratedAttribute]
public static void remove_Enrich(Action`1<Action`1<ValueTuple`2<string, object>>> value);
    [CompilerGeneratedAttribute]
public static void add_Posted(Action`1<ValueTuple`8<string, Object[], List`1<ValueTuple`2<string, object>>, byte, DateTime, Exception, string, ValueTuple`2<string, ValueTuple`5<string, bool, bool, Nullable`1<bool>, Nullable`1<TimeSpan>>>>> value);
    [CompilerGeneratedAttribute]
public static void remove_Posted(Action`1<ValueTuple`8<string, Object[], List`1<ValueTuple`2<string, object>>, byte, DateTime, Exception, string, ValueTuple`2<string, ValueTuple`5<string, bool, bool, Nullable`1<bool>, Nullable`1<TimeSpan>>>>> value);
    public virtual void Post(LogEntry entry);
    protected internal void Post(string message, LogLevel logLevel, string operationName, Exception exception, Object[] args, ValueTuple`2[]& properties);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public static Logger get_Log();
}
[DebuggerStepThroughAttribute]
internal class Pocket.Logger`1 : Logger {
    [CompilerGeneratedAttribute]
private static Logger <Log>k__BackingField;
    public static Logger Log { get; }
    private static Logger`1();
    [CompilerGeneratedAttribute]
public static Logger get_Log();
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Pocket.LoggerExtensions : object {
    [ExtensionAttribute]
public static TLogger Trace(TLogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static TLogger Trace(TLogger logger, Object[] args);
    [ExtensionAttribute]
public static TLogger Info(TLogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static TLogger Info(TLogger logger, Object[] args);
    [ExtensionAttribute]
public static TLogger Warning(TLogger logger, string message, Exception exception, Object[] args);
    [ExtensionAttribute]
public static TLogger Warning(TLogger logger, Exception exception);
    [ExtensionAttribute]
public static TLogger Warning(TLogger logger, Object[] args);
    [ExtensionAttribute]
public static TLogger Error(TLogger logger, string message, Exception exception, Object[] args);
    [ExtensionAttribute]
public static TLogger Error(TLogger logger, Exception exception);
    [ExtensionAttribute]
public static TLogger Error(TLogger logger, Object[] args);
    [ExtensionAttribute]
public static OperationLogger OnEnterAndExit(Logger logger, string name, Func`1<ValueTuple`2[]> exitArgs, object arg);
    [ExtensionAttribute]
public static OperationLogger OnEnterAndExit(Logger logger, string name, Func`1<ValueTuple`2[]> exitArgs, Object[] args);
    [ExtensionAttribute]
public static OperationLogger OnExit(Logger logger, string name, Func`1<ValueTuple`2[]> exitArgs, object arg);
    [ExtensionAttribute]
public static OperationLogger OnExit(Logger logger, string name, Func`1<ValueTuple`2[]> exitArgs, Object[] args);
    [ExtensionAttribute]
public static ConfirmationLogger ConfirmOnExit(Logger logger, string name, Func`1<ValueTuple`2[]> exitArgs, object arg);
    [ExtensionAttribute]
public static ConfirmationLogger ConfirmOnExit(Logger logger, string name, Func`1<ValueTuple`2[]> exitArgs, Object[] args);
    [ExtensionAttribute]
public static ConfirmationLogger OnEnterAndConfirmOnExit(Logger logger, string name, Func`1<ValueTuple`2[]> exitArgs, object arg);
    [ExtensionAttribute]
public static ConfirmationLogger OnEnterAndConfirmOnExit(Logger logger, string name, Func`1<ValueTuple`2[]> exitArgs, Object[] args);
    [ExtensionAttribute]
public static void Event(Logger logger, string name);
    [ExtensionAttribute]
public static void Event(Logger logger, string name, ValueTuple`2[] metrics);
    [ExtensionAttribute]
public static void Event(Logger logger, string name, ValueTuple`2[] properties);
    [ExtensionAttribute]
public static void Event(Logger logger, ValueTuple`2[]& metrics, ValueTuple`2[]& properties, string name);
}
internal class Pocket.LoggerSubscription : object {
    private CompositeDisposable disposables;
    [CompilerGeneratedAttribute]
private List`1<Type> <DiscoveredLoggerTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, bool> <OnFormatLogEntry>k__BackingField;
    public List`1<Type> DiscoveredLoggerTypes { get; }
    public Action`2<string, bool> OnFormatLogEntry { get; public set; }
    public void Add(Type pocketLoggerType, IDisposable unsubscribe);
    [CompilerGeneratedAttribute]
public List`1<Type> get_DiscoveredLoggerTypes();
    [CompilerGeneratedAttribute]
public Action`2<string, bool> get_OnFormatLogEntry();
    [CompilerGeneratedAttribute]
public void set_OnFormatLogEntry(Action`2<string, bool> value);
    public sealed virtual void Dispose();
}
internal enum Pocket.LogLevel : Enum {
    public byte value__;
    public static LogLevel Telemetry;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Information;
    public static LogLevel Warning;
    public static LogLevel Error;
    public static LogLevel Critical;
}
[DebuggerStepThroughAttribute]
internal class Pocket.OperationLogger : Logger {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<ValueTuple`2[]> exitArgs;
    private LogEntry initialEntry;
    private bool disposed;
    private Activity activity;
    [CompilerGeneratedAttribute]
private bool <IsComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStarting>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSuccessful>k__BackingField;
    public string Id { get; }
    public string Name { get; }
    public TimeSpan Duration { get; }
    public bool IsComplete { get; private set; }
    public bool IsStarting { get; }
    public Nullable`1<bool> IsSuccessful { get; protected set; }
    public OperationLogger(string operationName, string category, string message, Func`1<ValueTuple`2[]> exitArgs, bool logOnStart, Object[] args);
    public string get_Id();
    public string get_Name();
    public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public bool get_IsComplete();
    [CompilerGeneratedAttribute]
private void set_IsComplete(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStarting();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsSuccessful();
    [CompilerGeneratedAttribute]
protected void set_IsSuccessful(Nullable`1<bool> value);
    public virtual void Post(LogEntry entry);
    protected void Complete(string message, Exception exception, Object[] args);
    public virtual void Dispose();
    protected virtual void Finalize();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
