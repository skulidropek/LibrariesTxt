public class Microsoft.DotNet.Interactive.Telemetry.BuildInfo : object {
    [CompilerGeneratedAttribute]
private string <AssemblyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BuildDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyInformationalVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    public string AssemblyVersion { get; public set; }
    public string BuildDate { get; public set; }
    public string AssemblyInformationalVersion { get; public set; }
    public string AssemblyName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AssemblyVersion();
    [CompilerGeneratedAttribute]
public void set_AssemblyVersion(string value);
    [CompilerGeneratedAttribute]
public string get_BuildDate();
    [CompilerGeneratedAttribute]
public void set_BuildDate(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyInformationalVersion();
    [CompilerGeneratedAttribute]
public void set_AssemblyInformationalVersion(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    public static BuildInfo GetBuildInfo(Assembly assembly);
}
internal class Microsoft.DotNet.Interactive.Telemetry.DockerContainerDetectorForTelemetry : object {
    public sealed virtual IsDockerContainerResult IsDockerContainer();
    private static bool ReadProcToDetectDockerInLinux();
}
public class Microsoft.DotNet.Interactive.Telemetry.FakeFirstTimeUseNoticeSentinel : object {
    [CompilerGeneratedAttribute]
private bool <SentinelExists>k__BackingField;
    public bool SentinelExists { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SentinelExists();
    [CompilerGeneratedAttribute]
public void set_SentinelExists(bool value);
    public sealed virtual void CreateIfNotExists();
    public sealed virtual bool Exists();
}
public class Microsoft.DotNet.Interactive.Telemetry.FirstTimeUseNoticeSentinel : object {
    public static string SkipFirstTimeExperienceEnvironmentVariableName;
    private string _sentinel;
    private string _folderPath;
    private Func`2<string, bool> _fileExists;
    private Func`2<string, bool> _directoryExists;
    private Action`1<string> _createDirectory;
    private Action`1<string> _createEmptyFile;
    private string SentinelPath { get; }
    public FirstTimeUseNoticeSentinel(string productVersion);
    public FirstTimeUseNoticeSentinel(string productVersion, string folderPath, Func`2<string, bool> fileExists, Func`2<string, bool> directoryExists, Action`1<string> createDirectory, Action`1<string> createEmptyFile);
    private string get_SentinelPath();
    public sealed virtual bool Exists();
    public sealed virtual void CreateIfNotExists();
}
public interface Microsoft.DotNet.Interactive.Telemetry.IDockerContainerDetector {
    public abstract virtual IsDockerContainerResult IsDockerContainer();
}
public interface Microsoft.DotNet.Interactive.Telemetry.IFirstTimeUseNoticeSentinel {
    public abstract virtual bool Exists();
    public abstract virtual void CreateIfNotExists();
}
public enum Microsoft.DotNet.Interactive.Telemetry.IsDockerContainerResult : Enum {
    public int value__;
    public static IsDockerContainerResult True;
    public static IsDockerContainerResult False;
    public static IsDockerContainerResult Unknown;
}
public interface Microsoft.DotNet.Interactive.Telemetry.IUserLevelCacheWriter {
    public abstract virtual string RunWithCache(string cacheKey, Func`1<string> getValueToCache);
}
internal static class Microsoft.DotNet.Interactive.Telemetry.MacAddressGetter : object {
    private static string InvalidMacAddress;
    private static string MacRegex;
    private static string ZeroRegex;
    private static int ErrorFileNotFound;
    public static string GetMacAddress();
    private static string GetMacAddressCore();
    private static string ParseMACAddress(string shelloutput);
    private static string GetIpCommandOutput();
    private static string GetShellOutMacAddressOutput();
    private static string GetMacAddressByNetworkInterface();
    private static List`1<string> GetMacAddressesByNetworkInterface();
}
public class Microsoft.DotNet.Interactive.Telemetry.NothingUserLevelCacheWriter : object {
    public sealed virtual string RunWithCache(string cacheKey, Func`1<string> getValueToCache);
}
internal static class Microsoft.DotNet.Interactive.Telemetry.Paths : object {
    private static string DotnetHomeVariableName;
    private static string DotnetProfileDirectoryName;
    private static string ToolsShimFolderName;
    [CompilerGeneratedAttribute]
private static string <DotnetToolsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <UserProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <NugetCache>k__BackingField;
    public static string InstallDirectory;
    public static string DotnetUserProfileFolderPath { get; }
    public static string DotnetHomePath { get; }
    public static string DotnetToolsPath { get; }
    public static string UserProfile { get; }
    public static string NugetCache { get; }
    private static Paths();
    public static string get_DotnetUserProfileFolderPath();
    public static string get_DotnetHomePath();
    [CompilerGeneratedAttribute]
public static string get_DotnetToolsPath();
    [CompilerGeneratedAttribute]
public static string get_UserProfile();
    [CompilerGeneratedAttribute]
public static string get_NugetCache();
}
[ExtensionAttribute]
internal static class Microsoft.DotNet.Interactive.Telemetry.ProcessStartInfoExtensions : object {
    [ExtensionAttribute]
public static int ExecuteAndCaptureOutput(ProcessStartInfo startInfo, String& stdOut, String& stdErr);
}
[ExtensionAttribute]
public static class Microsoft.DotNet.Interactive.Telemetry.Sha256Hasher : object {
    [ExtensionAttribute]
public static string ToSha256Hash(string text);
    [ExtensionAttribute]
public static string ToSha256HashWithNormalizedCasing(string text);
    private static string HashInFormat(SHA256 sha256, string text);
}
public class Microsoft.DotNet.Interactive.Telemetry.StartupTelemetryEventBuilder : object {
    private Func`2<string, string> _hash;
    private HashSet`1<string> _clearTextProperties;
    private static CommandRule[] Rules { get; }
    public StartupTelemetryEventBuilder(Func`2<string, string> hash);
    public IEnumerable`1<TelemetryEvent> GetTelemetryEventsFrom(ParseResult parseResult);
    private TelemetryEvent CreateEntry(IEnumerable`1<KeyValuePair`2<string, string>> entryItems);
    private static CommandRuleItem Option(string option, String[] values, string entryKey);
    private static CommandRuleItem Arg(string value, TokenType type, string entryKey, bool isOptional);
    private static CommandRuleItem Ignore(TokenType type, bool isOptional);
    private static CommandRule[] get_Rules();
    private static string GetFrontendName(DirectiveCollection directives, CommandResult commandResult);
    [CompilerGeneratedAttribute]
internal static Token <GetTelemetryEventsFrom>g__NextToken|3_10(<>c__DisplayClass3_1& );
}
public class Microsoft.DotNet.Interactive.Telemetry.StreamForwarder : object {
    private static Char[] s_ignoreCharacters;
    private static char s_flushBuilderCharacter;
    private StringBuilder _builder;
    private StringWriter _capture;
    public string CapturedOutput { get; }
    private static StreamForwarder();
    public string get_CapturedOutput();
    public StreamForwarder Capture();
    public Task BeginRead(TextReader reader);
    public void Read(TextReader reader);
    private void WriteBuilder();
    private void WriteLine(string str);
    private void ThrowIfCaptureSet();
}
public class Microsoft.DotNet.Interactive.Telemetry.TelemetryCommonProperties : object {
    private string _productVersion;
    private IUserLevelCacheWriter _userLevelCacheWriter;
    private IDockerContainerDetector _dockerContainerDetector;
    private Func`2<string, string> _hasher;
    private Func`1<string> _getMACAddress;
    private static string OSVersion;
    private static string OSPlatform;
    private static string RuntimeId;
    private static string ProductVersion;
    private static string DockerContainer;
    private static string MachineId;
    private static string KernelVersion;
    private static string MachineIdCacheKey;
    private static string IsDockerContainerCacheKey;
    public TelemetryCommonProperties(string productVersion, Func`2<string, string> hasher, Func`1<string> getMACAddress, IDockerContainerDetector dockerContainerDetector, IUserLevelCacheWriter userLevelCacheWriter);
    public Dictionary`2<string, string> GetTelemetryCommonProperties();
    private string GetMachineId();
    private string IsDockerContainer();
    private static string GetKernelVersion();
    [CompilerGeneratedAttribute]
private string <GetMachineId>b__16_0();
    [CompilerGeneratedAttribute]
private string <IsDockerContainer>b__17_0();
}
public class Microsoft.DotNet.Interactive.Telemetry.TelemetryEvent : object {
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, double> <Metrics>k__BackingField;
    public string EventName { get; }
    public IDictionary`2<string, string> Properties { get; }
    public IDictionary`2<string, double> Metrics { get; }
    public TelemetryEvent(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, double> get_Metrics();
}
public class Microsoft.DotNet.Interactive.Telemetry.TelemetrySender : object {
    private IFirstTimeUseNoticeSentinel _firstTimeUseNoticeSentinel;
    private string _eventsNamespace;
    private TelemetryClient _client;
    private Dictionary`2<string, string> _commonProperties;
    private Dictionary`2<string, double> _commonMetrics;
    private Task _trackEventTask;
    private bool _enabled;
    private static string DefaultAppInsightsConnectionString;
    public static string TelemetryOptOutEnvironmentVariableName;
    public static string WelcomeMessage;
    public static bool SkipFirstTimeExperience { get; }
    public static bool IsRunningInDockerContainer { get; }
    public TelemetrySender(string productVersion, IFirstTimeUseNoticeSentinel firstTimeUseNoticeSentinel, string eventsNamespace, string appInsightsConnectionString);
    public static bool get_SkipFirstTimeExperience();
    public static bool get_IsRunningInDockerContainer();
    private static bool GetEnvironmentVariableAsBool(string name);
    public void TrackEvent(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> measurements);
    public Task FlushedAsync();
    public void TrackStartupEvent(ParseResult parseResult, StartupTelemetryEventBuilder eventBuilder);
    protected virtual void DoTrackEvent(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> metrics);
    private Dictionary`2<string, double> GetEventMetrics(IDictionary`2<string, double> measurements);
    private Dictionary`2<string, string> GetEventProperties(IDictionary`2<string, string> properties);
    public bool FirstTimeUseNoticeSentinelExists();
    public void CreateFirstTimeUseNoticeSentinelIfNotExists();
    public IDisposable SubscribeToPocketLogger(Assembly assembly);
    [CompilerGeneratedAttribute]
private void <SubscribeToPocketLogger>b__24_0(ValueTuple`8<string, Object[], List`1<ValueTuple`2<string, object>>, byte, DateTime, Exception, string, ValueTuple`2<string, ValueTuple`5<string, bool, bool, Nullable`1<bool>, Nullable`1<TimeSpan>>>> e);
}
public class Microsoft.DotNet.Interactive.Telemetry.UserLevelCacheWriter : object {
    private string _productVersion;
    private string _dotnetTryUserProfileFolderPath;
    private Func`2<string, bool> _fileExists;
    private Func`2<string, bool> _directoryExists;
    private Action`1<string> _createDirectory;
    private Action`2<string, string> _writeAllText;
    private Func`2<string, string> _readAllText;
    public UserLevelCacheWriter(string productVersion);
    public UserLevelCacheWriter(string productVersion, string dotnetTryUserProfileFolderPath, Func`2<string, bool> fileExists, Func`2<string, bool> directoryExists, Action`1<string> createDirectory, Action`2<string, string> writeAllText, Func`2<string, string> readAllText);
    public sealed virtual string RunWithCache(string cacheKey, Func`1<string> getValueToCache);
    private string GetCacheFilePath(string cacheKey);
}
[DebuggerStepThroughAttribute]
internal class Pocket.CompositeDisposable : object {
    private bool isDisposed;
    private List`1<IDisposable> disposables;
    public void Add(IDisposable disposable);
    public void Add(Action dispose);
    public sealed virtual void Dispose();
    public sealed virtual IEnumerator`1<IDisposable> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DebuggerStepThroughAttribute]
internal class Pocket.ConfirmationLogger : OperationLogger {
    public ConfirmationLogger(string operationName, string category, string message, Func`1<ValueTuple`2[]> exitArgs, bool logOnStart, Object[] args);
    public void Fail(Exception exception, string message, Object[] args);
    public void Succeed(string message, Object[] args);
    public virtual void Dispose();
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class Pocket.Discover : object {
    [ExtensionAttribute]
public static IEnumerable`1<Type> Concrete(IEnumerable`1<Type> types);
    public static IEnumerable`1<Type> ConcreteTypes();
    [ExtensionAttribute]
public static IEnumerable`1<Type> DerivedFrom(IEnumerable`1<Type> types, Type type);
    [ExtensionAttribute]
public static IEnumerable`1<Type> ImplementingOpenGenericInterfaces(IEnumerable`1<Type> source, Type[] interfaces);
    public static IEnumerable`1<Type> Types();
    [ExtensionAttribute]
public static IEnumerable`1<Type> Types(IEnumerable`1<Assembly> assemblies);
}
[DebuggerStepThroughAttribute]
internal static class Pocket.Disposable : object {
    private static IDisposable empty;
    [CompilerGeneratedAttribute]
private static IDisposable <Empty>k__BackingField;
    public static IDisposable Empty { get; }
    private static Disposable();
    public static IDisposable Create(Action dispose);
    [CompilerGeneratedAttribute]
public static IDisposable get_Empty();
}
[ExtensionAttribute]
internal static class Pocket.Format : object {
    [ExtensionAttribute]
public static ValueTuple`2<string, ValueTuple`2[]> Evaluate(ValueTuple`8& e);
    [ExtensionAttribute]
public static string ToLogString(ValueTuple`8& e);
    [ExtensionAttribute]
internal static string ToLogString(object value);
    [ExtensionAttribute]
private static string IfNotEmpty(string value, string prefix, string suffix);
    private static string LogLevelString(LogLevel logLevel, bool isStartOfOperation, bool isEndOfOperation, Nullable`1<bool> isOperationSuccessful, Nullable`1<TimeSpan> duration);
    [CompilerGeneratedAttribute]
internal static string <LogLevelString>g__symbol|5_0(<>c__DisplayClass5_0& );
}
[DebuggerStepThroughAttribute]
internal class Pocket.Formatter : object {
    private static ConcurrentDictionary`2<string, Formatter> cache;
    private static bool stopCaching;
    private static int cacheCount;
    private static Regex tokenRegex;
    private string template;
    private List`1<Action`2<StringBuilder, object>> argumentFormatters;
    private List`1<string> tokens;
    [CompilerGeneratedAttribute]
private static int <CacheLimit>k__BackingField;
    public IReadOnlyList`1<string> Tokens { get; }
    public static int CacheCount { get; }
    public static int CacheLimit { get; public set; }
    private static Formatter();
    public Formatter(string template);
    public IReadOnlyList`1<string> get_Tokens();
    public FormatterResult Format(IReadOnlyList`1<object> args, IList`1<ValueTuple`2<string, object>> knownProperties);
    public FormatterResult Format(Object[] args);
    public static int get_CacheCount();
    [CompilerGeneratedAttribute]
public static int get_CacheLimit();
    [CompilerGeneratedAttribute]
public static void set_CacheLimit(int value);
    public static Formatter Parse(string template);
    [CompilerGeneratedAttribute]
internal static void <Format>g__TryAppendComma|11_0(<>c__DisplayClass11_0& , <>c__DisplayClass11_1& );
    [CompilerGeneratedAttribute]
internal static Formatter <Parse>g__CreateFormatter|19_0(string t);
}
[DebuggerStepThroughAttribute]
internal class Pocket.LogEntry : object {
    [CompilerGeneratedAttribute]
private bool <IsStartOfOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsOperationSuccessful>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEndOfOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <OperationDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private OperationLogger <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TimestampUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageTemplate>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<string, object>> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Object[] <Args>k__BackingField;
    public bool IsStartOfOperation { get; }
    public Nullable`1<bool> IsOperationSuccessful { get; }
    public bool IsEndOfOperation { get; }
    public Nullable`1<TimeSpan> OperationDuration { get; }
    public string OperationName { get; }
    public string Category { get; }
    public OperationLogger Operation { get; }
    public DateTime TimestampUtc { get; }
    public LogLevel LogLevel { get; }
    public Exception Exception { get; }
    public string OperationId { get; }
    public string MessageTemplate { get; public set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<string, object>> Properties { get; public set; }
    public Object[] Args { get; public set; }
    public LogEntry(LogLevel logLevel, string messageTemplate, Exception exception, string category, string operationName, OperationLogger operation, Object[] args);
    [CompilerGeneratedAttribute]
public bool get_IsStartOfOperation();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsOperationSuccessful();
    [CompilerGeneratedAttribute]
public bool get_IsEndOfOperation();
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_OperationDuration();
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public OperationLogger get_Operation();
    [CompilerGeneratedAttribute]
public DateTime get_TimestampUtc();
    [CompilerGeneratedAttribute]
public LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public string get_OperationId();
    [CompilerGeneratedAttribute]
public string get_MessageTemplate();
    [CompilerGeneratedAttribute]
public void set_MessageTemplate(string value);
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`2<string, object>> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(List`1<ValueTuple`2<string, object>> value);
    [CompilerGeneratedAttribute]
public Object[] get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(Object[] value);
    public void AddProperty(ValueTuple`2<string, object> property);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Pocket.LogEvents : object {
    public static IDisposable Enrich(Action`1<Action`1<ValueTuple`2<string, object>>> onEnrich, Assembly[] searchInAssemblies);
    public static LoggerSubscription Subscribe(Action`1<ValueTuple`8<string, Object[], List`1<ValueTuple`2<string, object>>, byte, DateTime, Exception, string, ValueTuple`2<string, ValueTuple`5<string, bool, bool, Nullable`1<bool>, Nullable`1<TimeSpan>>>>> onEntryPosted, Assembly[] searchInAssemblies);
    private static void SubscribeLoggers(IEnumerable`1<Type> pocketLoggerTypes, LoggerSubscription subscription, Action`1<T> onEntryPosted);
    [ExtensionAttribute]
private static Action`1<T> Catch(Action`1<T> publish);
    [ExtensionAttribute]
private static IEnumerable`1<Type> PocketLoggers(IEnumerable`1<Type> types);
}
[DebuggerStepThroughAttribute]
internal class Pocket.Logger : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Action`1<Action`1<ValueTuple`2<string, object>>> Enrich;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private static Action`1<ValueTuple`8<string, Object[], List`1<ValueTuple`2<string, object>>, byte, DateTime, Exception, string, ValueTuple`2<string, ValueTuple`5<string, bool, bool, Nullable`1<bool>, Nullable`1<TimeSpan>>>>> Posted;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private static Logger <Log>k__BackingField;
    public string Category { get; }
    public static Logger Log { get; }
    public Logger(string category);
    private static Logger();
    [CompilerGeneratedAttribute]
public static void add_Enrich(Action`1<Action`1<ValueTuple`2<string, object>>> value);
    [CompilerGeneratedAttribute]
public static void remove_Enrich(Action`1<Action`1<ValueTuple`2<string, object>>> value);
    [CompilerGeneratedAttribute]
public static void add_Posted(Action`1<ValueTuple`8<string, Object[], List`1<ValueTuple`2<string, object>>, byte, DateTime, Exception, string, ValueTuple`2<string, ValueTuple`5<string, bool, bool, Nullable`1<bool>, Nullable`1<TimeSpan>>>>> value);
    [CompilerGeneratedAttribute]
public static void remove_Posted(Action`1<ValueTuple`8<string, Object[], List`1<ValueTuple`2<string, object>>, byte, DateTime, Exception, string, ValueTuple`2<string, ValueTuple`5<string, bool, bool, Nullable`1<bool>, Nullable`1<TimeSpan>>>>> value);
    public virtual void Post(LogEntry entry);
    protected internal void Post(string message, LogLevel logLevel, string operationName, Exception exception, Object[] args, ValueTuple`2[]& properties);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public static Logger get_Log();
}
[DebuggerStepThroughAttribute]
internal class Pocket.Logger`1 : Logger {
    [CompilerGeneratedAttribute]
private static Logger <Log>k__BackingField;
    public static Logger Log { get; }
    private static Logger`1();
    [CompilerGeneratedAttribute]
public static Logger get_Log();
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Pocket.LoggerExtensions : object {
    [ExtensionAttribute]
public static TLogger Trace(TLogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static TLogger Info(TLogger logger, string message, Object[] args);
    [ExtensionAttribute]
public static TLogger Warning(TLogger logger, string message, Exception exception, Object[] args);
    [ExtensionAttribute]
public static TLogger Warning(TLogger logger, Exception exception);
    [ExtensionAttribute]
public static TLogger Error(TLogger logger, string message, Exception exception, Object[] args);
    [ExtensionAttribute]
public static TLogger Error(TLogger logger, Exception exception);
    [ExtensionAttribute]
public static OperationLogger OnEnterAndExit(Logger logger, string name, Func`1<ValueTuple`2[]> exitArgs);
    [ExtensionAttribute]
public static OperationLogger OnExit(Logger logger, string name, Func`1<ValueTuple`2[]> exitArgs);
    [ExtensionAttribute]
public static ConfirmationLogger ConfirmOnExit(Logger logger, string name, Func`1<ValueTuple`2[]> exitArgs);
    [ExtensionAttribute]
public static ConfirmationLogger OnEnterAndConfirmOnExit(Logger logger, string name, Func`1<ValueTuple`2[]> exitArgs);
    [ExtensionAttribute]
public static void Event(Logger logger, string name);
    [ExtensionAttribute]
public static void Event(Logger logger, string name, ValueTuple`2[] metrics);
    [ExtensionAttribute]
public static void Event(Logger logger, string name, ValueTuple`2[] properties);
    [ExtensionAttribute]
public static void Event(Logger logger, ValueTuple`2[]& metrics, ValueTuple`2[]& properties, string name);
}
internal class Pocket.LoggerSubscription : object {
    private CompositeDisposable disposables;
    [CompilerGeneratedAttribute]
private List`1<Type> <DiscoveredLoggerTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<string, bool> <OnFormatLogEntry>k__BackingField;
    public List`1<Type> DiscoveredLoggerTypes { get; }
    public Action`2<string, bool> OnFormatLogEntry { get; public set; }
    public void Add(Type pocketLoggerType, IDisposable unsubscribe);
    [CompilerGeneratedAttribute]
public List`1<Type> get_DiscoveredLoggerTypes();
    [CompilerGeneratedAttribute]
public Action`2<string, bool> get_OnFormatLogEntry();
    [CompilerGeneratedAttribute]
public void set_OnFormatLogEntry(Action`2<string, bool> value);
    public sealed virtual void Dispose();
}
internal enum Pocket.LogLevel : Enum {
    public byte value__;
    public static LogLevel Telemetry;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Information;
    public static LogLevel Warning;
    public static LogLevel Error;
    public static LogLevel Critical;
}
[DebuggerStepThroughAttribute]
internal class Pocket.OperationLogger : Logger {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<ValueTuple`2[]> exitArgs;
    private LogEntry initialEntry;
    private bool disposed;
    private Activity activity;
    [CompilerGeneratedAttribute]
private bool <IsComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStarting>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsSuccessful>k__BackingField;
    public string Id { get; }
    public string Name { get; }
    public TimeSpan Duration { get; }
    public bool IsComplete { get; private set; }
    public bool IsStarting { get; }
    public Nullable`1<bool> IsSuccessful { get; protected set; }
    public OperationLogger(string operationName, string category, string message, Func`1<ValueTuple`2[]> exitArgs, bool logOnStart, Object[] args);
    public string get_Id();
    public string get_Name();
    public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public bool get_IsComplete();
    [CompilerGeneratedAttribute]
private void set_IsComplete(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsStarting();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsSuccessful();
    [CompilerGeneratedAttribute]
protected void set_IsSuccessful(Nullable`1<bool> value);
    public virtual void Post(LogEntry entry);
    protected void Complete(string message, Exception exception, Object[] args);
    public virtual void Dispose();
    protected virtual void Finalize();
}
