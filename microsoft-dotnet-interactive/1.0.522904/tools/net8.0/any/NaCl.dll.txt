[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class NaCl.Curve25519 : object {
    public static int ScalarLength;
    [NullableContextAttribute("0")]
public static void ScalarMultiplication(Span`1<byte> q, ReadOnlySpan`1<byte> n, ReadOnlySpan`1<byte> p);
    [NullableContextAttribute("0")]
public static Byte[] ScalarMultiplication(ReadOnlySpan`1<byte> n, ReadOnlySpan`1<byte> p);
    public static Byte[] ScalarMultiplication(Byte[] n, Byte[] p);
    public static void ScalarMultiplication(Byte[] q, Byte[] n, Byte[] p);
    public static void ScalarMultiplication(Byte[] q, int qOffset, Byte[] n, int nOffset, Byte[] p, int pOffset);
    [NullableContextAttribute("0")]
public static void ScalarMultiplicationBase(Span`1<byte> q, Span`1<byte> n);
    public static void ScalarMultiplicationBase(Byte[] q, Byte[] n);
    public static void ScalarMultiplicationBase(Byte[] q, int qOffset, Byte[] n, int nOffset);
    [NullableContextAttribute("0")]
public static Byte[] ScalarMultiplicationBase(Span`1<byte> n);
    public static Byte[] ScalarMultiplicationBase(Byte[] n);
}
public class NaCl.Curve25519XSalsa20Poly1305 : XSalsa20Poly1305 {
    public static int SecretKeyLength;
    public static int PublicKeyLength;
    public Curve25519XSalsa20Poly1305(ReadOnlySpan`1<byte> secretKey, ReadOnlySpan`1<byte> publicKey);
    public static void KeyPair(Span`1<byte> secretKey, Span`1<byte> publicKey);
    [NullableContextAttribute("1")]
public static void KeyPair(Byte[] secretKey, Byte[] publicKey);
    [NullableContextAttribute("1")]
public static void KeyPair(Byte[]& secretKey, Byte[]& publicKey);
    public static ValueTuple`2<Byte[], Byte[]> KeyPair();
}
internal static class NaCl.Internal.Common : object {
    [NullableContextAttribute("1")]
public static UInt32 Load32(Byte[] src, int offset);
    public static UInt32 Load32(ReadOnlySpan`1<byte> src, int offset);
    [NullableContextAttribute("1")]
public static void Store(Byte[] dst, int offset, UInt32 w);
    public static void Store(Span`1<byte> dst, int offset, UInt32 w);
    public static UInt32 RotateLeft(UInt32& x, Int32& b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class NaCl.Internal.Constants : object {
    public static Byte[] Sigma;
    public static Byte[] N;
    public static UInt32[] MinUsp;
    private static Constants();
}
internal static class NaCl.Internal.Fe25519 : object {
    public static int ArraySize;
    public static void Zero(Span`1<int> h);
    public static void One(Span`1<int> h);
    public static void Copy(Span`1<int> h, Span`1<int> f);
    private static long Load3(ReadOnlySpan`1<byte> input);
    private static long Load4(ReadOnlySpan`1<byte> input);
    public static void FromBytes(Span`1<int> h, ReadOnlySpan`1<byte> s);
    public static void CSwap(Span`1<int> f, Span`1<int> g, int b);
    public static void Sub(Span`1<int> h, Span`1<int> f, Span`1<int> g);
    public static void Add(Span`1<int> h, Span`1<int> f, Span`1<int> g);
    public static void Mul(Span`1<int> h, Span`1<int> f, Span`1<int> g);
    public static void Sq(Span`1<int> h, Span`1<int> f);
    public static void Mul121666(Span`1<int> h, Span`1<int> f);
    public static void Invert(Span`1<int> output, Span`1<int> z);
    private static void Reduce(Span`1<int> h, Span`1<int> f);
    public static void ToBytes(Span`1<byte> s, Span`1<int> h);
}
internal class NaCl.Internal.HSalsa20 : object {
    private static int Rounds;
    public static int BlockLength;
    public static void Transform(Span`1<byte> output, ReadOnlySpan`1<byte> input, ReadOnlySpan`1<byte> k, ReadOnlySpan`1<byte> c);
}
internal static class NaCl.Internal.SafeComparison : object {
    public static bool Verify16(ReadOnlySpan`1<byte> x, ReadOnlySpan`1<byte> y);
    public static bool Verify32(Span`1<byte> x, Span`1<byte> y);
}
internal static class NaCl.Internal.Salsa20 : object {
    private static int Rounds;
    public static int KeyLength;
    [NullableContextAttribute("1")]
public static void Transform(Byte[] output, Byte[] input, Byte[] k, Byte[] c);
    public static void Transform(Span`1<byte> output, ReadOnlySpan`1<byte> input, ReadOnlySpan`1<byte> k, ReadOnlySpan`1<byte> c);
}
internal static class NaCl.Internal.StreamSalsa20 : object {
    public static int KeyLength;
    public static void Transform(Span`1<byte> c, ReadOnlySpan`1<byte> n, ReadOnlySpan`1<byte> k);
}
internal static class NaCl.Internal.StreamSalsa20Xor : object {
    public static void Transform(Span`1<byte> c, ReadOnlySpan`1<byte> m, ReadOnlySpan`1<byte> n, ReadOnlySpan`1<byte> k, ulong ic);
}
public class NaCl.Poly1305 : object {
    private static int BlockLength;
    public static int KeyLength;
    public static int TagLength;
    [NullableAttribute("1")]
private UInt32[] r;
    [NullableAttribute("1")]
private UInt32[] h;
    [NullableAttribute("1")]
private UInt32[] pad;
    private int leftover;
    [NullableAttribute("1")]
private Byte[] buffer;
    private bool final;
    public Poly1305(ReadOnlySpan`1<byte> key);
    public sealed virtual void Dispose();
    public void Reset();
    public void SetKey(ReadOnlySpan`1<byte> key);
    [NullableContextAttribute("1")]
public void SetKey(Byte[] key, int offset);
    private void Initialize();
    private void Blocks(ReadOnlySpan`1<byte> m, int count);
    public void Final(Span`1<byte> tag);
    public void Update(ReadOnlySpan`1<byte> bytes);
    [NullableContextAttribute("1")]
public void Update(Byte[] bytes, int offset, int count);
    [NullableContextAttribute("1")]
public Byte[] Final();
    public bool Verify(ReadOnlySpan`1<byte> tag, ReadOnlySpan`1<byte> input);
    [NullableContextAttribute("1")]
public bool Verify(Byte[] tag, int tagOffset, Byte[] input, int inputOffset, int inputCount);
}
public class NaCl.XSalsa20 : object {
    public static int KeyLength;
    public static int NonceLength;
    [NullableAttribute("1")]
private Byte[] key;
    public XSalsa20(ReadOnlySpan`1<byte> key);
    [NullableContextAttribute("1")]
public XSalsa20(Byte[] key);
    public sealed virtual void Dispose();
    public void Transform(Span`1<byte> output, ReadOnlySpan`1<byte> input, ReadOnlySpan`1<byte> nonce);
    [NullableContextAttribute("1")]
public void Transform(Byte[] output, int outputOffset, Byte[] input, int inputOffset, int inputCount, Byte[] nonce, int nonceOffset);
}
public class NaCl.XSalsa20Poly1305 : object {
    private static int ZeroBytesLength;
    public static int KeyLength;
    public static int TagLength;
    public static int NonceLength;
    [NullableAttribute("1")]
private Poly1305 poly1305;
    [NullableAttribute("1")]
internal Byte[] key;
    public XSalsa20Poly1305(ReadOnlySpan`1<byte> key);
    [NullableContextAttribute("1")]
public XSalsa20Poly1305(Byte[] key);
    public void Encrypt(Span`1<byte> cipher, Span`1<byte> mac, ReadOnlySpan`1<byte> message, ReadOnlySpan`1<byte> nonce);
    [NullableContextAttribute("1")]
public void Encrypt(Byte[] cipher, int cipherOffset, Byte[] mac, int macOffset, Byte[] message, int messageOffset, int messageCount, Byte[] nonce, int nonceOffset);
    public void Encrypt(Span`1<byte> cipher, ReadOnlySpan`1<byte> message, ReadOnlySpan`1<byte> nonce);
    [NullableContextAttribute("1")]
public void Encrypt(Byte[] cipher, int cipherOffset, Byte[] message, int messageOffset, int messageCount, Byte[] nonce, int nonceOffset);
    public bool TryDecrypt(Span`1<byte> message, ReadOnlySpan`1<byte> cipher, ReadOnlySpan`1<byte> mac, ReadOnlySpan`1<byte> nonce);
    [NullableContextAttribute("1")]
public bool TryDecrypt(Byte[] message, int messageOffset, Byte[] cipher, int cipherOffset, int cipherCount, Byte[] mac, int macOffset, Byte[] nonce, int nonceOffset);
    public bool TryDecrypt(Span`1<byte> message, ReadOnlySpan`1<byte> cipher, ReadOnlySpan`1<byte> nonce);
    [NullableContextAttribute("1")]
public bool TryDecrypt(Byte[] message, int messageOffset, Byte[] cipher, int cipherOffset, int cipherCount, Byte[] nonce, int nonceOffset);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
internal static class NetMQ.Utils.ArrayExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void Clear(T[] array);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
