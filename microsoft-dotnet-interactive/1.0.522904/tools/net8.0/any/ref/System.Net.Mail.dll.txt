[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Mail.AlternateView : AttachmentBase {
    [NullableAttribute("2")]
public Uri BaseUri { get; public set; }
    public LinkedResourceCollection LinkedResources { get; }
    public AlternateView(Stream contentStream);
    public AlternateView(Stream contentStream, ContentType contentType);
    public AlternateView(Stream contentStream, string mediaType);
    public AlternateView(string fileName);
    public AlternateView(string fileName, ContentType contentType);
    public AlternateView(string fileName, string mediaType);
    [NullableContextAttribute("2")]
public Uri get_BaseUri();
    [NullableContextAttribute("2")]
public void set_BaseUri(Uri value);
    public LinkedResourceCollection get_LinkedResources();
    public static AlternateView CreateAlternateViewFromString(string content);
    public static AlternateView CreateAlternateViewFromString(string content, ContentType contentType);
    public static AlternateView CreateAlternateViewFromString(string content, Encoding contentEncoding, string mediaType);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Net.Mail.AlternateViewCollection : Collection`1<AlternateView> {
    protected virtual void ClearItems();
    public sealed virtual void Dispose();
    protected virtual void InsertItem(int index, AlternateView item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, AlternateView item);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.Mail.Attachment : AttachmentBase {
    public ContentDisposition ContentDisposition { get; }
    public string Name { get; public set; }
    public Encoding NameEncoding { get; public set; }
    [NullableContextAttribute("1")]
public Attachment(Stream contentStream, ContentType contentType);
    [NullableContextAttribute("1")]
public Attachment(Stream contentStream, string name);
    public Attachment(Stream contentStream, string name, string mediaType);
    [NullableContextAttribute("1")]
public Attachment(string fileName);
    [NullableContextAttribute("1")]
public Attachment(string fileName, ContentType contentType);
    [NullableContextAttribute("1")]
public Attachment(string fileName, string mediaType);
    public ContentDisposition get_ContentDisposition();
    public string get_Name();
    public void set_Name(string value);
    public Encoding get_NameEncoding();
    public void set_NameEncoding(Encoding value);
    [NullableContextAttribute("1")]
public static Attachment CreateAttachmentFromString(string content, ContentType contentType);
    [NullableContextAttribute("1")]
public static Attachment CreateAttachmentFromString(string content, string name);
    public static Attachment CreateAttachmentFromString(string content, string name, Encoding contentEncoding, string mediaType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Net.Mail.AttachmentBase : object {
    public string ContentId { get; public set; }
    public Stream ContentStream { get; }
    public ContentType ContentType { get; public set; }
    public TransferEncoding TransferEncoding { get; public set; }
    protected AttachmentBase(Stream contentStream);
    protected AttachmentBase(Stream contentStream, ContentType contentType);
    protected AttachmentBase(Stream contentStream, string mediaType);
    protected AttachmentBase(string fileName);
    protected AttachmentBase(string fileName, ContentType contentType);
    protected AttachmentBase(string fileName, string mediaType);
    public string get_ContentId();
    public void set_ContentId(string value);
    public Stream get_ContentStream();
    public ContentType get_ContentType();
    public void set_ContentType(ContentType value);
    public TransferEncoding get_TransferEncoding();
    public void set_TransferEncoding(TransferEncoding value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Net.Mail.AttachmentCollection : Collection`1<Attachment> {
    protected virtual void ClearItems();
    public sealed virtual void Dispose();
    protected virtual void InsertItem(int index, Attachment item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, Attachment item);
}
[FlagsAttribute]
public enum System.Net.Mail.DeliveryNotificationOptions : Enum {
    public int value__;
    public static DeliveryNotificationOptions None;
    public static DeliveryNotificationOptions OnSuccess;
    public static DeliveryNotificationOptions OnFailure;
    public static DeliveryNotificationOptions Delay;
    public static DeliveryNotificationOptions Never;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Mail.LinkedResource : AttachmentBase {
    [NullableAttribute("2")]
public Uri ContentLink { get; public set; }
    public LinkedResource(Stream contentStream);
    public LinkedResource(Stream contentStream, ContentType contentType);
    public LinkedResource(Stream contentStream, string mediaType);
    public LinkedResource(string fileName);
    public LinkedResource(string fileName, ContentType contentType);
    public LinkedResource(string fileName, string mediaType);
    [NullableContextAttribute("2")]
public Uri get_ContentLink();
    [NullableContextAttribute("2")]
public void set_ContentLink(Uri value);
    public static LinkedResource CreateLinkedResourceFromString(string content);
    public static LinkedResource CreateLinkedResourceFromString(string content, ContentType contentType);
    public static LinkedResource CreateLinkedResourceFromString(string content, Encoding contentEncoding, string mediaType);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Net.Mail.LinkedResourceCollection : Collection`1<LinkedResource> {
    protected virtual void ClearItems();
    public sealed virtual void Dispose();
    protected virtual void InsertItem(int index, LinkedResource item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, LinkedResource item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Mail.MailAddress : object {
    public string Address { get; }
    public string DisplayName { get; }
    public string Host { get; }
    public string User { get; }
    public MailAddress(string address);
    public MailAddress(string address, string displayName);
    [NullableContextAttribute("2")]
public MailAddress(string address, string displayName, Encoding displayNameEncoding);
    public string get_Address();
    public string get_DisplayName();
    public string get_Host();
    public string get_User();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool TryCreate(string address, MailAddress& result);
    [NullableContextAttribute("2")]
public static bool TryCreate(string address, string displayName, MailAddress& result);
    [NullableContextAttribute("2")]
public static bool TryCreate(string address, string displayName, Encoding displayNameEncoding, MailAddress& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class System.Net.Mail.MailAddressCollection : Collection`1<MailAddress> {
    public void Add(string addresses);
    protected virtual void InsertItem(int index, MailAddress item);
    protected virtual void SetItem(int index, MailAddress item);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Mail.MailMessage : object {
    public AlternateViewCollection AlternateViews { get; }
    public AttachmentCollection Attachments { get; }
    public MailAddressCollection Bcc { get; }
    public string Body { get; public set; }
    [NullableAttribute("2")]
public Encoding BodyEncoding { get; public set; }
    public TransferEncoding BodyTransferEncoding { get; public set; }
    public MailAddressCollection CC { get; }
    public DeliveryNotificationOptions DeliveryNotificationOptions { get; public set; }
    [NullableAttribute("2")]
public MailAddress From { get; public set; }
    public NameValueCollection Headers { get; }
    [NullableAttribute("2")]
public Encoding HeadersEncoding { get; public set; }
    public bool IsBodyHtml { get; public set; }
    public MailPriority Priority { get; public set; }
    [NullableAttribute("2")]
[ObsoleteAttribute("ReplyTo has been deprecated. Use ReplyToList instead, which can accept multiple addresses.")]
public MailAddress ReplyTo { get; public set; }
    public MailAddressCollection ReplyToList { get; }
    [NullableAttribute("2")]
public MailAddress Sender { get; public set; }
    public string Subject { get; public set; }
    [NullableAttribute("2")]
public Encoding SubjectEncoding { get; public set; }
    public MailAddressCollection To { get; }
    public MailMessage(MailAddress from, MailAddress to);
    public MailMessage(string from, string to);
    public MailMessage(string from, string to, string subject, string body);
    public AlternateViewCollection get_AlternateViews();
    public AttachmentCollection get_Attachments();
    public MailAddressCollection get_Bcc();
    public string get_Body();
    public void set_Body(string value);
    [NullableContextAttribute("2")]
public Encoding get_BodyEncoding();
    [NullableContextAttribute("2")]
public void set_BodyEncoding(Encoding value);
    public TransferEncoding get_BodyTransferEncoding();
    public void set_BodyTransferEncoding(TransferEncoding value);
    public MailAddressCollection get_CC();
    public DeliveryNotificationOptions get_DeliveryNotificationOptions();
    public void set_DeliveryNotificationOptions(DeliveryNotificationOptions value);
    [NullableContextAttribute("2")]
public MailAddress get_From();
    [NullableContextAttribute("2")]
public void set_From(MailAddress value);
    public NameValueCollection get_Headers();
    [NullableContextAttribute("2")]
public Encoding get_HeadersEncoding();
    [NullableContextAttribute("2")]
public void set_HeadersEncoding(Encoding value);
    public bool get_IsBodyHtml();
    public void set_IsBodyHtml(bool value);
    public MailPriority get_Priority();
    public void set_Priority(MailPriority value);
    [NullableContextAttribute("2")]
public MailAddress get_ReplyTo();
    [NullableContextAttribute("2")]
public void set_ReplyTo(MailAddress value);
    public MailAddressCollection get_ReplyToList();
    [NullableContextAttribute("2")]
public MailAddress get_Sender();
    [NullableContextAttribute("2")]
public void set_Sender(MailAddress value);
    public string get_Subject();
    public void set_Subject(string value);
    [NullableContextAttribute("2")]
public Encoding get_SubjectEncoding();
    [NullableContextAttribute("2")]
public void set_SubjectEncoding(Encoding value);
    public MailAddressCollection get_To();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public enum System.Net.Mail.MailPriority : Enum {
    public int value__;
    public static MailPriority Normal;
    public static MailPriority Low;
    public static MailPriority High;
}
public class System.Net.Mail.SendCompletedEventHandler : MulticastDelegate {
    public SendCompletedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, AsyncCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AsyncCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
public class System.Net.Mail.SmtpClient : object {
    [NullableAttribute("1")]
public X509CertificateCollection ClientCertificates { get; }
    public ICredentialsByHost Credentials { get; public set; }
    public SmtpDeliveryFormat DeliveryFormat { get; public set; }
    public SmtpDeliveryMethod DeliveryMethod { get; public set; }
    public bool EnableSsl { get; public set; }
    public string Host { get; public set; }
    public string PickupDirectoryLocation { get; public set; }
    public int Port { get; public set; }
    [NullableAttribute("1")]
public ServicePoint ServicePoint { get; }
    public string TargetName { get; public set; }
    public int Timeout { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public SmtpClient(string host);
    public SmtpClient(string host, int port);
    [NullableContextAttribute("1")]
public X509CertificateCollection get_ClientCertificates();
    public ICredentialsByHost get_Credentials();
    public void set_Credentials(ICredentialsByHost value);
    public SmtpDeliveryFormat get_DeliveryFormat();
    public void set_DeliveryFormat(SmtpDeliveryFormat value);
    public SmtpDeliveryMethod get_DeliveryMethod();
    public void set_DeliveryMethod(SmtpDeliveryMethod value);
    public bool get_EnableSsl();
    public void set_EnableSsl(bool value);
    public string get_Host();
    public void set_Host(string value);
    public string get_PickupDirectoryLocation();
    public void set_PickupDirectoryLocation(string value);
    public int get_Port();
    public void set_Port(int value);
    [NullableContextAttribute("1")]
public ServicePoint get_ServicePoint();
    public string get_TargetName();
    public void set_TargetName(string value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public bool get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(bool value);
    public void add_SendCompleted(SendCompletedEventHandler value);
    public void remove_SendCompleted(SendCompletedEventHandler value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("1")]
protected void OnSendCompleted(AsyncCompletedEventArgs e);
    [NullableContextAttribute("1")]
public void Send(MailMessage message);
    [NullableContextAttribute("1")]
public void Send(string from, string recipients, string subject, string body);
    [NullableContextAttribute("1")]
public void SendAsync(MailMessage message, object userToken);
    public void SendAsync(string from, string recipients, string subject, string body, object userToken);
    public void SendAsyncCancel();
    [NullableContextAttribute("1")]
public Task SendMailAsync(MailMessage message);
    [NullableContextAttribute("1")]
public Task SendMailAsync(MailMessage message, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public Task SendMailAsync(string from, string recipients, string subject, string body);
    [NullableContextAttribute("1")]
public Task SendMailAsync(string from, string recipients, string subject, string body, CancellationToken cancellationToken);
}
public enum System.Net.Mail.SmtpDeliveryFormat : Enum {
    public int value__;
    public static SmtpDeliveryFormat SevenBit;
    public static SmtpDeliveryFormat International;
}
public enum System.Net.Mail.SmtpDeliveryMethod : Enum {
    public int value__;
    public static SmtpDeliveryMethod Network;
    public static SmtpDeliveryMethod SpecifiedPickupDirectory;
    public static SmtpDeliveryMethod PickupDirectoryFromIis;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.Mail.SmtpException : Exception {
    public SmtpStatusCode StatusCode { get; public set; }
    public SmtpException(SmtpStatusCode statusCode);
    public SmtpException(SmtpStatusCode statusCode, string message);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected SmtpException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public SmtpException(string message);
    public SmtpException(string message, Exception innerException);
    public SmtpStatusCode get_StatusCode();
    public void set_StatusCode(SmtpStatusCode value);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.Mail.SmtpFailedRecipientException : SmtpException {
    public string FailedRecipient { get; }
    public SmtpFailedRecipientException(SmtpStatusCode statusCode, string failedRecipient);
    public SmtpFailedRecipientException(SmtpStatusCode statusCode, string failedRecipient, string serverResponse);
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected SmtpFailedRecipientException(SerializationInfo info, StreamingContext context);
    public SmtpFailedRecipientException(string message);
    public SmtpFailedRecipientException(string message, Exception innerException);
    public SmtpFailedRecipientException(string message, string failedRecipient, Exception innerException);
    public string get_FailedRecipient();
    [NullableContextAttribute("1")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Mail.SmtpFailedRecipientsException : SmtpFailedRecipientException {
    public SmtpFailedRecipientException[] InnerExceptions { get; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected SmtpFailedRecipientsException(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("2")]
public SmtpFailedRecipientsException(string message);
    [NullableContextAttribute("2")]
public SmtpFailedRecipientsException(string message, Exception innerException);
    public SmtpFailedRecipientsException(string message, SmtpFailedRecipientException[] innerExceptions);
    public SmtpFailedRecipientException[] get_InnerExceptions();
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public enum System.Net.Mail.SmtpStatusCode : Enum {
    public int value__;
    public static SmtpStatusCode GeneralFailure;
    public static SmtpStatusCode SystemStatus;
    public static SmtpStatusCode HelpMessage;
    public static SmtpStatusCode ServiceReady;
    public static SmtpStatusCode ServiceClosingTransmissionChannel;
    public static SmtpStatusCode Ok;
    public static SmtpStatusCode UserNotLocalWillForward;
    public static SmtpStatusCode CannotVerifyUserWillAttemptDelivery;
    public static SmtpStatusCode StartMailInput;
    public static SmtpStatusCode ServiceNotAvailable;
    public static SmtpStatusCode MailboxBusy;
    public static SmtpStatusCode LocalErrorInProcessing;
    public static SmtpStatusCode InsufficientStorage;
    public static SmtpStatusCode ClientNotPermitted;
    public static SmtpStatusCode CommandUnrecognized;
    public static SmtpStatusCode SyntaxError;
    public static SmtpStatusCode CommandNotImplemented;
    public static SmtpStatusCode BadCommandSequence;
    public static SmtpStatusCode CommandParameterNotImplemented;
    public static SmtpStatusCode MustIssueStartTlsFirst;
    public static SmtpStatusCode MailboxUnavailable;
    public static SmtpStatusCode UserNotLocalTryAlternatePath;
    public static SmtpStatusCode ExceededStorageAllocation;
    public static SmtpStatusCode MailboxNameNotAllowed;
    public static SmtpStatusCode TransactionFailed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Mime.ContentDisposition : object {
    public DateTime CreationDate { get; public set; }
    public string DispositionType { get; public set; }
    [NullableAttribute("2")]
public string FileName { get; public set; }
    public bool Inline { get; public set; }
    public DateTime ModificationDate { get; public set; }
    public StringDictionary Parameters { get; }
    public DateTime ReadDate { get; public set; }
    public long Size { get; public set; }
    public ContentDisposition(string disposition);
    public DateTime get_CreationDate();
    public void set_CreationDate(DateTime value);
    public string get_DispositionType();
    public void set_DispositionType(string value);
    [NullableContextAttribute("2")]
public string get_FileName();
    [NullableContextAttribute("2")]
public void set_FileName(string value);
    public bool get_Inline();
    public void set_Inline(bool value);
    public DateTime get_ModificationDate();
    public void set_ModificationDate(DateTime value);
    public StringDictionary get_Parameters();
    public DateTime get_ReadDate();
    public void set_ReadDate(DateTime value);
    public long get_Size();
    public void set_Size(long value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object rparam);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Mime.ContentType : object {
    [NullableAttribute("2")]
public string Boundary { get; public set; }
    [NullableAttribute("2")]
public string CharSet { get; public set; }
    public string MediaType { get; public set; }
    public string Name { get; public set; }
    public StringDictionary Parameters { get; }
    public ContentType(string contentType);
    [NullableContextAttribute("2")]
public string get_Boundary();
    [NullableContextAttribute("2")]
public void set_Boundary(string value);
    [NullableContextAttribute("2")]
public string get_CharSet();
    [NullableContextAttribute("2")]
public void set_CharSet(string value);
    public string get_MediaType();
    public void set_MediaType(string value);
    public string get_Name();
    public void set_Name(string value);
    public StringDictionary get_Parameters();
    [NullableContextAttribute("2")]
public virtual bool Equals(object rparam);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Net.Mime.DispositionTypeNames : object {
    public static string Attachment;
    public static string Inline;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Net.Mime.MediaTypeNames : object {
}
public enum System.Net.Mime.TransferEncoding : Enum {
    public int value__;
    public static TransferEncoding Unknown;
    public static TransferEncoding QuotedPrintable;
    public static TransferEncoding Base64;
    public static TransferEncoding SevenBit;
    public static TransferEncoding EightBit;
}
