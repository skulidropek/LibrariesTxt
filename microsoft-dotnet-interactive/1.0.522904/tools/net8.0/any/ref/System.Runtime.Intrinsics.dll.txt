[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.Arm.AdvSimd : ArmBase {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<ushort> Abs(Vector128`1<short> value);
    public static Vector128`1<UInt32> Abs(Vector128`1<int> value);
    public static Vector128`1<byte> Abs(Vector128`1<sbyte> value);
    public static Vector128`1<float> Abs(Vector128`1<float> value);
    public static Vector64`1<ushort> Abs(Vector64`1<short> value);
    public static Vector64`1<UInt32> Abs(Vector64`1<int> value);
    public static Vector64`1<byte> Abs(Vector64`1<sbyte> value);
    public static Vector64`1<float> Abs(Vector64`1<float> value);
    public static Vector128`1<float> AbsoluteCompareGreaterThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<float> AbsoluteCompareGreaterThan(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> AbsoluteCompareGreaterThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<float> AbsoluteCompareGreaterThanOrEqual(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> AbsoluteCompareLessThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<float> AbsoluteCompareLessThan(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> AbsoluteCompareLessThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<float> AbsoluteCompareLessThanOrEqual(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<byte> AbsoluteDifference(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<ushort> AbsoluteDifference(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<UInt32> AbsoluteDifference(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<byte> AbsoluteDifference(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> AbsoluteDifference(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> AbsoluteDifference(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> AbsoluteDifference(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> AbsoluteDifference(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<ushort> AbsoluteDifference(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<UInt32> AbsoluteDifference(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<byte> AbsoluteDifference(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> AbsoluteDifference(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> AbsoluteDifference(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> AbsoluteDifference(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> AbsoluteDifferenceAdd(Vector128`1<byte> addend, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> AbsoluteDifferenceAdd(Vector128`1<short> addend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> AbsoluteDifferenceAdd(Vector128`1<int> addend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> AbsoluteDifferenceAdd(Vector128`1<sbyte> addend, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> AbsoluteDifferenceAdd(Vector128`1<ushort> addend, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> AbsoluteDifferenceAdd(Vector128`1<UInt32> addend, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> AbsoluteDifferenceAdd(Vector64`1<byte> addend, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> AbsoluteDifferenceAdd(Vector64`1<short> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> AbsoluteDifferenceAdd(Vector64`1<int> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> AbsoluteDifferenceAdd(Vector64`1<sbyte> addend, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> AbsoluteDifferenceAdd(Vector64`1<ushort> addend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> AbsoluteDifferenceAdd(Vector64`1<UInt32> addend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> AbsoluteDifferenceWideningLower(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<UInt32> AbsoluteDifferenceWideningLower(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<ulong> AbsoluteDifferenceWideningLower(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<ushort> AbsoluteDifferenceWideningLower(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<UInt32> AbsoluteDifferenceWideningLower(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> AbsoluteDifferenceWideningLower(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<short> AbsoluteDifferenceWideningLowerAndAdd(Vector128`1<short> addend, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<int> AbsoluteDifferenceWideningLowerAndAdd(Vector128`1<int> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> AbsoluteDifferenceWideningLowerAndAdd(Vector128`1<long> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<ushort> AbsoluteDifferenceWideningLowerAndAdd(Vector128`1<ushort> addend, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<UInt32> AbsoluteDifferenceWideningLowerAndAdd(Vector128`1<UInt32> addend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> AbsoluteDifferenceWideningLowerAndAdd(Vector128`1<ulong> addend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> AbsoluteDifferenceWideningUpper(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<UInt32> AbsoluteDifferenceWideningUpper(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ulong> AbsoluteDifferenceWideningUpper(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<ushort> AbsoluteDifferenceWideningUpper(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<UInt32> AbsoluteDifferenceWideningUpper(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<ulong> AbsoluteDifferenceWideningUpper(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<short> AbsoluteDifferenceWideningUpperAndAdd(Vector128`1<short> addend, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<int> AbsoluteDifferenceWideningUpperAndAdd(Vector128`1<int> addend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<long> AbsoluteDifferenceWideningUpperAndAdd(Vector128`1<long> addend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<ushort> AbsoluteDifferenceWideningUpperAndAdd(Vector128`1<ushort> addend, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<UInt32> AbsoluteDifferenceWideningUpperAndAdd(Vector128`1<UInt32> addend, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<ulong> AbsoluteDifferenceWideningUpperAndAdd(Vector128`1<ulong> addend, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<short> AbsSaturate(Vector128`1<short> value);
    public static Vector128`1<int> AbsSaturate(Vector128`1<int> value);
    public static Vector128`1<sbyte> AbsSaturate(Vector128`1<sbyte> value);
    public static Vector64`1<short> AbsSaturate(Vector64`1<short> value);
    public static Vector64`1<int> AbsSaturate(Vector64`1<int> value);
    public static Vector64`1<sbyte> AbsSaturate(Vector64`1<sbyte> value);
    public static Vector64`1<double> AbsScalar(Vector64`1<double> value);
    public static Vector64`1<float> AbsScalar(Vector64`1<float> value);
    public static Vector128`1<byte> Add(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Add(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Add(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> Add(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> Add(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> Add(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> Add(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Add(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> Add(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> Add(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> Add(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> Add(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> Add(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> Add(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> Add(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> Add(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<sbyte> AddHighNarrowingLower(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector64`1<short> AddHighNarrowingLower(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector64`1<int> AddHighNarrowingLower(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector64`1<byte> AddHighNarrowingLower(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector64`1<ushort> AddHighNarrowingLower(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<UInt32> AddHighNarrowingLower(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> AddHighNarrowingUpper(Vector64`1<byte> lower, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<short> AddHighNarrowingUpper(Vector64`1<short> lower, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> AddHighNarrowingUpper(Vector64`1<int> lower, Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> AddHighNarrowingUpper(Vector64`1<sbyte> lower, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> AddHighNarrowingUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<UInt32> AddHighNarrowingUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> AddPairwise(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> AddPairwise(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> AddPairwise(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> AddPairwise(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> AddPairwise(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> AddPairwise(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> AddPairwise(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> AddPairwiseWidening(Vector128`1<byte> value);
    public static Vector128`1<int> AddPairwiseWidening(Vector128`1<short> value);
    public static Vector128`1<long> AddPairwiseWidening(Vector128`1<int> value);
    public static Vector128`1<short> AddPairwiseWidening(Vector128`1<sbyte> value);
    public static Vector128`1<UInt32> AddPairwiseWidening(Vector128`1<ushort> value);
    public static Vector128`1<ulong> AddPairwiseWidening(Vector128`1<UInt32> value);
    public static Vector64`1<ushort> AddPairwiseWidening(Vector64`1<byte> value);
    public static Vector64`1<int> AddPairwiseWidening(Vector64`1<short> value);
    public static Vector64`1<short> AddPairwiseWidening(Vector64`1<sbyte> value);
    public static Vector64`1<UInt32> AddPairwiseWidening(Vector64`1<ushort> value);
    public static Vector128`1<short> AddPairwiseWideningAndAdd(Vector128`1<short> addend, Vector128`1<sbyte> value);
    public static Vector128`1<int> AddPairwiseWideningAndAdd(Vector128`1<int> addend, Vector128`1<short> value);
    public static Vector128`1<long> AddPairwiseWideningAndAdd(Vector128`1<long> addend, Vector128`1<int> value);
    public static Vector128`1<ushort> AddPairwiseWideningAndAdd(Vector128`1<ushort> addend, Vector128`1<byte> value);
    public static Vector128`1<UInt32> AddPairwiseWideningAndAdd(Vector128`1<UInt32> addend, Vector128`1<ushort> value);
    public static Vector128`1<ulong> AddPairwiseWideningAndAdd(Vector128`1<ulong> addend, Vector128`1<UInt32> value);
    public static Vector64`1<short> AddPairwiseWideningAndAdd(Vector64`1<short> addend, Vector64`1<sbyte> value);
    public static Vector64`1<int> AddPairwiseWideningAndAdd(Vector64`1<int> addend, Vector64`1<short> value);
    public static Vector64`1<ushort> AddPairwiseWideningAndAdd(Vector64`1<ushort> addend, Vector64`1<byte> value);
    public static Vector64`1<UInt32> AddPairwiseWideningAndAdd(Vector64`1<UInt32> addend, Vector64`1<ushort> value);
    public static Vector64`1<long> AddPairwiseWideningAndAddScalar(Vector64`1<long> addend, Vector64`1<int> value);
    public static Vector64`1<ulong> AddPairwiseWideningAndAddScalar(Vector64`1<ulong> addend, Vector64`1<UInt32> value);
    public static Vector64`1<long> AddPairwiseWideningScalar(Vector64`1<int> value);
    public static Vector64`1<ulong> AddPairwiseWideningScalar(Vector64`1<UInt32> value);
    public static Vector64`1<sbyte> AddRoundedHighNarrowingLower(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector64`1<short> AddRoundedHighNarrowingLower(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector64`1<int> AddRoundedHighNarrowingLower(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector64`1<byte> AddRoundedHighNarrowingLower(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector64`1<ushort> AddRoundedHighNarrowingLower(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<UInt32> AddRoundedHighNarrowingLower(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> AddRoundedHighNarrowingUpper(Vector64`1<byte> lower, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<short> AddRoundedHighNarrowingUpper(Vector64`1<short> lower, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> AddRoundedHighNarrowingUpper(Vector64`1<int> lower, Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> AddRoundedHighNarrowingUpper(Vector64`1<sbyte> lower, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> AddRoundedHighNarrowingUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<UInt32> AddRoundedHighNarrowingUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> AddSaturate(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> AddSaturate(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> AddSaturate(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> AddSaturate(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> AddSaturate(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> AddSaturate(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> AddSaturate(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> AddSaturate(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> AddSaturate(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> AddSaturate(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> AddSaturate(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> AddSaturate(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> AddSaturate(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> AddSaturate(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<long> AddSaturateScalar(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<ulong> AddSaturateScalar(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector64`1<double> AddScalar(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<long> AddScalar(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<float> AddScalar(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ulong> AddScalar(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<short> AddWideningLower(Vector128`1<short> left, Vector64`1<sbyte> right);
    public static Vector128`1<int> AddWideningLower(Vector128`1<int> left, Vector64`1<short> right);
    public static Vector128`1<long> AddWideningLower(Vector128`1<long> left, Vector64`1<int> right);
    public static Vector128`1<ushort> AddWideningLower(Vector128`1<ushort> left, Vector64`1<byte> right);
    public static Vector128`1<UInt32> AddWideningLower(Vector128`1<UInt32> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> AddWideningLower(Vector128`1<ulong> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> AddWideningLower(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<int> AddWideningLower(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> AddWideningLower(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> AddWideningLower(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<UInt32> AddWideningLower(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> AddWideningLower(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> AddWideningUpper(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<int> AddWideningUpper(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<short> AddWideningUpper(Vector128`1<short> left, Vector128`1<sbyte> right);
    public static Vector128`1<int> AddWideningUpper(Vector128`1<int> left, Vector128`1<short> right);
    public static Vector128`1<long> AddWideningUpper(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> AddWideningUpper(Vector128`1<long> left, Vector128`1<int> right);
    public static Vector128`1<short> AddWideningUpper(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> AddWideningUpper(Vector128`1<ushort> left, Vector128`1<byte> right);
    public static Vector128`1<UInt32> AddWideningUpper(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> AddWideningUpper(Vector128`1<UInt32> left, Vector128`1<ushort> right);
    public static Vector128`1<ulong> AddWideningUpper(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> AddWideningUpper(Vector128`1<ulong> left, Vector128`1<UInt32> right);
    public static Vector128`1<byte> And(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> And(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> And(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> And(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> And(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> And(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> And(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> And(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> And(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> And(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> And(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<double> And(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<short> And(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> And(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<long> And(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<sbyte> And(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> And(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> And(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> And(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<ulong> And(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<byte> BitwiseClear(Vector128`1<byte> value, Vector128`1<byte> mask);
    public static Vector128`1<double> BitwiseClear(Vector128`1<double> value, Vector128`1<double> mask);
    public static Vector128`1<short> BitwiseClear(Vector128`1<short> value, Vector128`1<short> mask);
    public static Vector128`1<int> BitwiseClear(Vector128`1<int> value, Vector128`1<int> mask);
    public static Vector128`1<long> BitwiseClear(Vector128`1<long> value, Vector128`1<long> mask);
    public static Vector128`1<sbyte> BitwiseClear(Vector128`1<sbyte> value, Vector128`1<sbyte> mask);
    public static Vector128`1<float> BitwiseClear(Vector128`1<float> value, Vector128`1<float> mask);
    public static Vector128`1<ushort> BitwiseClear(Vector128`1<ushort> value, Vector128`1<ushort> mask);
    public static Vector128`1<UInt32> BitwiseClear(Vector128`1<UInt32> value, Vector128`1<UInt32> mask);
    public static Vector128`1<ulong> BitwiseClear(Vector128`1<ulong> value, Vector128`1<ulong> mask);
    public static Vector64`1<byte> BitwiseClear(Vector64`1<byte> value, Vector64`1<byte> mask);
    public static Vector64`1<double> BitwiseClear(Vector64`1<double> value, Vector64`1<double> mask);
    public static Vector64`1<short> BitwiseClear(Vector64`1<short> value, Vector64`1<short> mask);
    public static Vector64`1<int> BitwiseClear(Vector64`1<int> value, Vector64`1<int> mask);
    public static Vector64`1<long> BitwiseClear(Vector64`1<long> value, Vector64`1<long> mask);
    public static Vector64`1<sbyte> BitwiseClear(Vector64`1<sbyte> value, Vector64`1<sbyte> mask);
    public static Vector64`1<float> BitwiseClear(Vector64`1<float> value, Vector64`1<float> mask);
    public static Vector64`1<ushort> BitwiseClear(Vector64`1<ushort> value, Vector64`1<ushort> mask);
    public static Vector64`1<UInt32> BitwiseClear(Vector64`1<UInt32> value, Vector64`1<UInt32> mask);
    public static Vector64`1<ulong> BitwiseClear(Vector64`1<ulong> value, Vector64`1<ulong> mask);
    public static Vector128`1<byte> BitwiseSelect(Vector128`1<byte> select, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> BitwiseSelect(Vector128`1<double> select, Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> BitwiseSelect(Vector128`1<short> select, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> BitwiseSelect(Vector128`1<int> select, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> BitwiseSelect(Vector128`1<long> select, Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> BitwiseSelect(Vector128`1<sbyte> select, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> BitwiseSelect(Vector128`1<float> select, Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> BitwiseSelect(Vector128`1<ushort> select, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> BitwiseSelect(Vector128`1<UInt32> select, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> BitwiseSelect(Vector128`1<ulong> select, Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> BitwiseSelect(Vector64`1<byte> select, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<double> BitwiseSelect(Vector64`1<double> select, Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<short> BitwiseSelect(Vector64`1<short> select, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> BitwiseSelect(Vector64`1<int> select, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<long> BitwiseSelect(Vector64`1<long> select, Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<sbyte> BitwiseSelect(Vector64`1<sbyte> select, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> BitwiseSelect(Vector64`1<float> select, Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> BitwiseSelect(Vector64`1<ushort> select, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> BitwiseSelect(Vector64`1<UInt32> select, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<ulong> BitwiseSelect(Vector64`1<ulong> select, Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<float> Ceiling(Vector128`1<float> value);
    public static Vector64`1<float> Ceiling(Vector64`1<float> value);
    public static Vector64`1<double> CeilingScalar(Vector64`1<double> value);
    public static Vector64`1<float> CeilingScalar(Vector64`1<float> value);
    public static Vector128`1<byte> CompareEqual(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareEqual(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareEqual(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareEqual(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> CompareEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> CompareEqual(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> CompareEqual(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> CompareEqual(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> CompareEqual(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> CompareEqual(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> CompareEqual(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> CompareEqual(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> CompareEqual(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> CompareEqual(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> CompareGreaterThan(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareGreaterThan(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareGreaterThan(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareGreaterThan(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> CompareGreaterThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> CompareGreaterThan(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> CompareGreaterThan(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> CompareGreaterThan(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> CompareGreaterThan(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> CompareGreaterThan(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> CompareGreaterThan(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> CompareGreaterThan(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> CompareGreaterThan(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> CompareGreaterThan(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> CompareGreaterThanOrEqual(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareGreaterThanOrEqual(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareGreaterThanOrEqual(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareGreaterThanOrEqual(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> CompareGreaterThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> CompareGreaterThanOrEqual(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> CompareGreaterThanOrEqual(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> CompareGreaterThanOrEqual(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> CompareGreaterThanOrEqual(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> CompareGreaterThanOrEqual(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> CompareGreaterThanOrEqual(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> CompareGreaterThanOrEqual(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> CompareGreaterThanOrEqual(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> CompareGreaterThanOrEqual(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> CompareLessThan(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareLessThan(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareLessThan(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareLessThan(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> CompareLessThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> CompareLessThan(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> CompareLessThan(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> CompareLessThan(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> CompareLessThan(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> CompareLessThan(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> CompareLessThan(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> CompareLessThan(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> CompareLessThan(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> CompareLessThan(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> CompareLessThanOrEqual(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareLessThanOrEqual(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareLessThanOrEqual(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareLessThanOrEqual(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> CompareLessThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> CompareLessThanOrEqual(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> CompareLessThanOrEqual(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> CompareLessThanOrEqual(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> CompareLessThanOrEqual(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> CompareLessThanOrEqual(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> CompareLessThanOrEqual(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> CompareLessThanOrEqual(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> CompareLessThanOrEqual(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> CompareLessThanOrEqual(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> CompareTest(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareTest(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareTest(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareTest(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> CompareTest(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> CompareTest(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> CompareTest(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> CompareTest(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> CompareTest(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> CompareTest(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> CompareTest(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> CompareTest(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> CompareTest(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> CompareTest(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<int> ConvertToInt32RoundAwayFromZero(Vector128`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundAwayFromZero(Vector64`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundAwayFromZeroScalar(Vector64`1<float> value);
    public static Vector128`1<int> ConvertToInt32RoundToEven(Vector128`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToEven(Vector64`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToEvenScalar(Vector64`1<float> value);
    public static Vector128`1<int> ConvertToInt32RoundToNegativeInfinity(Vector128`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToNegativeInfinity(Vector64`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToNegativeInfinityScalar(Vector64`1<float> value);
    public static Vector128`1<int> ConvertToInt32RoundToPositiveInfinity(Vector128`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToPositiveInfinity(Vector64`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToPositiveInfinityScalar(Vector64`1<float> value);
    public static Vector128`1<int> ConvertToInt32RoundToZero(Vector128`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToZero(Vector64`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToZeroScalar(Vector64`1<float> value);
    public static Vector128`1<float> ConvertToSingle(Vector128`1<int> value);
    public static Vector128`1<float> ConvertToSingle(Vector128`1<UInt32> value);
    public static Vector64`1<float> ConvertToSingle(Vector64`1<int> value);
    public static Vector64`1<float> ConvertToSingle(Vector64`1<UInt32> value);
    public static Vector64`1<float> ConvertToSingleScalar(Vector64`1<int> value);
    public static Vector64`1<float> ConvertToSingleScalar(Vector64`1<UInt32> value);
    public static Vector128`1<UInt32> ConvertToUInt32RoundAwayFromZero(Vector128`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundAwayFromZero(Vector64`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundAwayFromZeroScalar(Vector64`1<float> value);
    public static Vector128`1<UInt32> ConvertToUInt32RoundToEven(Vector128`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToEven(Vector64`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToEvenScalar(Vector64`1<float> value);
    public static Vector128`1<UInt32> ConvertToUInt32RoundToNegativeInfinity(Vector128`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToNegativeInfinity(Vector64`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToNegativeInfinityScalar(Vector64`1<float> value);
    public static Vector128`1<UInt32> ConvertToUInt32RoundToPositiveInfinity(Vector128`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToPositiveInfinity(Vector64`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToPositiveInfinityScalar(Vector64`1<float> value);
    public static Vector128`1<UInt32> ConvertToUInt32RoundToZero(Vector128`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToZero(Vector64`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToZeroScalar(Vector64`1<float> value);
    public static Vector64`1<double> DivideScalar(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> DivideScalar(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<byte> DuplicateSelectedScalarToVector128(Vector128`1<byte> value, byte index);
    public static Vector128`1<short> DuplicateSelectedScalarToVector128(Vector128`1<short> value, byte index);
    public static Vector128`1<int> DuplicateSelectedScalarToVector128(Vector128`1<int> value, byte index);
    public static Vector128`1<sbyte> DuplicateSelectedScalarToVector128(Vector128`1<sbyte> value, byte index);
    public static Vector128`1<float> DuplicateSelectedScalarToVector128(Vector128`1<float> value, byte index);
    public static Vector128`1<ushort> DuplicateSelectedScalarToVector128(Vector128`1<ushort> value, byte index);
    public static Vector128`1<UInt32> DuplicateSelectedScalarToVector128(Vector128`1<UInt32> value, byte index);
    public static Vector128`1<byte> DuplicateSelectedScalarToVector128(Vector64`1<byte> value, byte index);
    public static Vector128`1<short> DuplicateSelectedScalarToVector128(Vector64`1<short> value, byte index);
    public static Vector128`1<int> DuplicateSelectedScalarToVector128(Vector64`1<int> value, byte index);
    public static Vector128`1<sbyte> DuplicateSelectedScalarToVector128(Vector64`1<sbyte> value, byte index);
    public static Vector128`1<float> DuplicateSelectedScalarToVector128(Vector64`1<float> value, byte index);
    public static Vector128`1<ushort> DuplicateSelectedScalarToVector128(Vector64`1<ushort> value, byte index);
    public static Vector128`1<UInt32> DuplicateSelectedScalarToVector128(Vector64`1<UInt32> value, byte index);
    public static Vector64`1<byte> DuplicateSelectedScalarToVector64(Vector128`1<byte> value, byte index);
    public static Vector64`1<short> DuplicateSelectedScalarToVector64(Vector128`1<short> value, byte index);
    public static Vector64`1<int> DuplicateSelectedScalarToVector64(Vector128`1<int> value, byte index);
    public static Vector64`1<sbyte> DuplicateSelectedScalarToVector64(Vector128`1<sbyte> value, byte index);
    public static Vector64`1<float> DuplicateSelectedScalarToVector64(Vector128`1<float> value, byte index);
    public static Vector64`1<ushort> DuplicateSelectedScalarToVector64(Vector128`1<ushort> value, byte index);
    public static Vector64`1<UInt32> DuplicateSelectedScalarToVector64(Vector128`1<UInt32> value, byte index);
    public static Vector64`1<byte> DuplicateSelectedScalarToVector64(Vector64`1<byte> value, byte index);
    public static Vector64`1<short> DuplicateSelectedScalarToVector64(Vector64`1<short> value, byte index);
    public static Vector64`1<int> DuplicateSelectedScalarToVector64(Vector64`1<int> value, byte index);
    public static Vector64`1<sbyte> DuplicateSelectedScalarToVector64(Vector64`1<sbyte> value, byte index);
    public static Vector64`1<float> DuplicateSelectedScalarToVector64(Vector64`1<float> value, byte index);
    public static Vector64`1<ushort> DuplicateSelectedScalarToVector64(Vector64`1<ushort> value, byte index);
    public static Vector64`1<UInt32> DuplicateSelectedScalarToVector64(Vector64`1<UInt32> value, byte index);
    public static Vector128`1<byte> DuplicateToVector128(byte value);
    public static Vector128`1<short> DuplicateToVector128(short value);
    public static Vector128`1<int> DuplicateToVector128(int value);
    public static Vector128`1<sbyte> DuplicateToVector128(sbyte value);
    public static Vector128`1<float> DuplicateToVector128(float value);
    public static Vector128`1<ushort> DuplicateToVector128(ushort value);
    public static Vector128`1<UInt32> DuplicateToVector128(UInt32 value);
    public static Vector64`1<byte> DuplicateToVector64(byte value);
    public static Vector64`1<short> DuplicateToVector64(short value);
    public static Vector64`1<int> DuplicateToVector64(int value);
    public static Vector64`1<sbyte> DuplicateToVector64(sbyte value);
    public static Vector64`1<float> DuplicateToVector64(float value);
    public static Vector64`1<ushort> DuplicateToVector64(ushort value);
    public static Vector64`1<UInt32> DuplicateToVector64(UInt32 value);
    public static byte Extract(Vector128`1<byte> vector, byte index);
    public static double Extract(Vector128`1<double> vector, byte index);
    public static short Extract(Vector128`1<short> vector, byte index);
    public static int Extract(Vector128`1<int> vector, byte index);
    public static long Extract(Vector128`1<long> vector, byte index);
    public static sbyte Extract(Vector128`1<sbyte> vector, byte index);
    public static float Extract(Vector128`1<float> vector, byte index);
    public static ushort Extract(Vector128`1<ushort> vector, byte index);
    public static UInt32 Extract(Vector128`1<UInt32> vector, byte index);
    public static ulong Extract(Vector128`1<ulong> vector, byte index);
    public static byte Extract(Vector64`1<byte> vector, byte index);
    public static short Extract(Vector64`1<short> vector, byte index);
    public static int Extract(Vector64`1<int> vector, byte index);
    public static sbyte Extract(Vector64`1<sbyte> vector, byte index);
    public static float Extract(Vector64`1<float> vector, byte index);
    public static ushort Extract(Vector64`1<ushort> vector, byte index);
    public static UInt32 Extract(Vector64`1<UInt32> vector, byte index);
    public static Vector64`1<sbyte> ExtractNarrowingLower(Vector128`1<short> value);
    public static Vector64`1<short> ExtractNarrowingLower(Vector128`1<int> value);
    public static Vector64`1<int> ExtractNarrowingLower(Vector128`1<long> value);
    public static Vector64`1<byte> ExtractNarrowingLower(Vector128`1<ushort> value);
    public static Vector64`1<ushort> ExtractNarrowingLower(Vector128`1<UInt32> value);
    public static Vector64`1<UInt32> ExtractNarrowingLower(Vector128`1<ulong> value);
    public static Vector64`1<sbyte> ExtractNarrowingSaturateLower(Vector128`1<short> value);
    public static Vector64`1<short> ExtractNarrowingSaturateLower(Vector128`1<int> value);
    public static Vector64`1<int> ExtractNarrowingSaturateLower(Vector128`1<long> value);
    public static Vector64`1<byte> ExtractNarrowingSaturateLower(Vector128`1<ushort> value);
    public static Vector64`1<ushort> ExtractNarrowingSaturateLower(Vector128`1<UInt32> value);
    public static Vector64`1<UInt32> ExtractNarrowingSaturateLower(Vector128`1<ulong> value);
    public static Vector64`1<byte> ExtractNarrowingSaturateUnsignedLower(Vector128`1<short> value);
    public static Vector64`1<ushort> ExtractNarrowingSaturateUnsignedLower(Vector128`1<int> value);
    public static Vector64`1<UInt32> ExtractNarrowingSaturateUnsignedLower(Vector128`1<long> value);
    public static Vector128`1<byte> ExtractNarrowingSaturateUnsignedUpper(Vector64`1<byte> lower, Vector128`1<short> value);
    public static Vector128`1<ushort> ExtractNarrowingSaturateUnsignedUpper(Vector64`1<ushort> lower, Vector128`1<int> value);
    public static Vector128`1<UInt32> ExtractNarrowingSaturateUnsignedUpper(Vector64`1<UInt32> lower, Vector128`1<long> value);
    public static Vector128`1<byte> ExtractNarrowingSaturateUpper(Vector64`1<byte> lower, Vector128`1<ushort> value);
    public static Vector128`1<short> ExtractNarrowingSaturateUpper(Vector64`1<short> lower, Vector128`1<int> value);
    public static Vector128`1<int> ExtractNarrowingSaturateUpper(Vector64`1<int> lower, Vector128`1<long> value);
    public static Vector128`1<sbyte> ExtractNarrowingSaturateUpper(Vector64`1<sbyte> lower, Vector128`1<short> value);
    public static Vector128`1<ushort> ExtractNarrowingSaturateUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> value);
    public static Vector128`1<UInt32> ExtractNarrowingSaturateUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> value);
    public static Vector128`1<byte> ExtractNarrowingUpper(Vector64`1<byte> lower, Vector128`1<ushort> value);
    public static Vector128`1<short> ExtractNarrowingUpper(Vector64`1<short> lower, Vector128`1<int> value);
    public static Vector128`1<int> ExtractNarrowingUpper(Vector64`1<int> lower, Vector128`1<long> value);
    public static Vector128`1<sbyte> ExtractNarrowingUpper(Vector64`1<sbyte> lower, Vector128`1<short> value);
    public static Vector128`1<ushort> ExtractNarrowingUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> value);
    public static Vector128`1<UInt32> ExtractNarrowingUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> value);
    public static Vector128`1<byte> ExtractVector128(Vector128`1<byte> upper, Vector128`1<byte> lower, byte index);
    public static Vector128`1<double> ExtractVector128(Vector128`1<double> upper, Vector128`1<double> lower, byte index);
    public static Vector128`1<short> ExtractVector128(Vector128`1<short> upper, Vector128`1<short> lower, byte index);
    public static Vector128`1<int> ExtractVector128(Vector128`1<int> upper, Vector128`1<int> lower, byte index);
    public static Vector128`1<long> ExtractVector128(Vector128`1<long> upper, Vector128`1<long> lower, byte index);
    public static Vector128`1<sbyte> ExtractVector128(Vector128`1<sbyte> upper, Vector128`1<sbyte> lower, byte index);
    public static Vector128`1<float> ExtractVector128(Vector128`1<float> upper, Vector128`1<float> lower, byte index);
    public static Vector128`1<ushort> ExtractVector128(Vector128`1<ushort> upper, Vector128`1<ushort> lower, byte index);
    public static Vector128`1<UInt32> ExtractVector128(Vector128`1<UInt32> upper, Vector128`1<UInt32> lower, byte index);
    public static Vector128`1<ulong> ExtractVector128(Vector128`1<ulong> upper, Vector128`1<ulong> lower, byte index);
    public static Vector64`1<byte> ExtractVector64(Vector64`1<byte> upper, Vector64`1<byte> lower, byte index);
    public static Vector64`1<short> ExtractVector64(Vector64`1<short> upper, Vector64`1<short> lower, byte index);
    public static Vector64`1<int> ExtractVector64(Vector64`1<int> upper, Vector64`1<int> lower, byte index);
    public static Vector64`1<sbyte> ExtractVector64(Vector64`1<sbyte> upper, Vector64`1<sbyte> lower, byte index);
    public static Vector64`1<float> ExtractVector64(Vector64`1<float> upper, Vector64`1<float> lower, byte index);
    public static Vector64`1<ushort> ExtractVector64(Vector64`1<ushort> upper, Vector64`1<ushort> lower, byte index);
    public static Vector64`1<UInt32> ExtractVector64(Vector64`1<UInt32> upper, Vector64`1<UInt32> lower, byte index);
    public static Vector128`1<float> Floor(Vector128`1<float> value);
    public static Vector64`1<float> Floor(Vector64`1<float> value);
    public static Vector64`1<double> FloorScalar(Vector64`1<double> value);
    public static Vector64`1<float> FloorScalar(Vector64`1<float> value);
    public static Vector128`1<byte> FusedAddHalving(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> FusedAddHalving(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> FusedAddHalving(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> FusedAddHalving(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> FusedAddHalving(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> FusedAddHalving(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> FusedAddHalving(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> FusedAddHalving(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> FusedAddHalving(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> FusedAddHalving(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> FusedAddHalving(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> FusedAddHalving(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> FusedAddRoundedHalving(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> FusedAddRoundedHalving(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> FusedAddRoundedHalving(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> FusedAddRoundedHalving(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> FusedAddRoundedHalving(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> FusedAddRoundedHalving(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> FusedAddRoundedHalving(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> FusedAddRoundedHalving(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> FusedAddRoundedHalving(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> FusedAddRoundedHalving(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> FusedAddRoundedHalving(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> FusedAddRoundedHalving(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<float> FusedMultiplyAdd(Vector128`1<float> addend, Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<float> FusedMultiplyAdd(Vector64`1<float> addend, Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<double> FusedMultiplyAddNegatedScalar(Vector64`1<double> addend, Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> FusedMultiplyAddNegatedScalar(Vector64`1<float> addend, Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<double> FusedMultiplyAddScalar(Vector64`1<double> addend, Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> FusedMultiplyAddScalar(Vector64`1<float> addend, Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> FusedMultiplySubtract(Vector128`1<float> minuend, Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<float> FusedMultiplySubtract(Vector64`1<float> minuend, Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<double> FusedMultiplySubtractNegatedScalar(Vector64`1<double> minuend, Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> FusedMultiplySubtractNegatedScalar(Vector64`1<float> minuend, Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<double> FusedMultiplySubtractScalar(Vector64`1<double> minuend, Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> FusedMultiplySubtractScalar(Vector64`1<float> minuend, Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<byte> FusedSubtractHalving(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> FusedSubtractHalving(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> FusedSubtractHalving(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> FusedSubtractHalving(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> FusedSubtractHalving(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> FusedSubtractHalving(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> FusedSubtractHalving(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> FusedSubtractHalving(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> FusedSubtractHalving(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> FusedSubtractHalving(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> FusedSubtractHalving(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> FusedSubtractHalving(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> Insert(Vector128`1<byte> vector, byte index, byte data);
    public static Vector128`1<double> Insert(Vector128`1<double> vector, byte index, double data);
    public static Vector128`1<short> Insert(Vector128`1<short> vector, byte index, short data);
    public static Vector128`1<int> Insert(Vector128`1<int> vector, byte index, int data);
    public static Vector128`1<long> Insert(Vector128`1<long> vector, byte index, long data);
    public static Vector128`1<sbyte> Insert(Vector128`1<sbyte> vector, byte index, sbyte data);
    public static Vector128`1<float> Insert(Vector128`1<float> vector, byte index, float data);
    public static Vector128`1<ushort> Insert(Vector128`1<ushort> vector, byte index, ushort data);
    public static Vector128`1<UInt32> Insert(Vector128`1<UInt32> vector, byte index, UInt32 data);
    public static Vector128`1<ulong> Insert(Vector128`1<ulong> vector, byte index, ulong data);
    public static Vector64`1<byte> Insert(Vector64`1<byte> vector, byte index, byte data);
    public static Vector64`1<short> Insert(Vector64`1<short> vector, byte index, short data);
    public static Vector64`1<int> Insert(Vector64`1<int> vector, byte index, int data);
    public static Vector64`1<sbyte> Insert(Vector64`1<sbyte> vector, byte index, sbyte data);
    public static Vector64`1<float> Insert(Vector64`1<float> vector, byte index, float data);
    public static Vector64`1<ushort> Insert(Vector64`1<ushort> vector, byte index, ushort data);
    public static Vector64`1<UInt32> Insert(Vector64`1<UInt32> vector, byte index, UInt32 data);
    public static Vector128`1<double> InsertScalar(Vector128`1<double> result, byte resultIndex, Vector64`1<double> value);
    public static Vector128`1<long> InsertScalar(Vector128`1<long> result, byte resultIndex, Vector64`1<long> value);
    public static Vector128`1<ulong> InsertScalar(Vector128`1<ulong> result, byte resultIndex, Vector64`1<ulong> value);
    public static Vector128`1<short> LeadingSignCount(Vector128`1<short> value);
    public static Vector128`1<int> LeadingSignCount(Vector128`1<int> value);
    public static Vector128`1<sbyte> LeadingSignCount(Vector128`1<sbyte> value);
    public static Vector64`1<short> LeadingSignCount(Vector64`1<short> value);
    public static Vector64`1<int> LeadingSignCount(Vector64`1<int> value);
    public static Vector64`1<sbyte> LeadingSignCount(Vector64`1<sbyte> value);
    public static Vector128`1<byte> LeadingZeroCount(Vector128`1<byte> value);
    public static Vector128`1<short> LeadingZeroCount(Vector128`1<short> value);
    public static Vector128`1<int> LeadingZeroCount(Vector128`1<int> value);
    public static Vector128`1<sbyte> LeadingZeroCount(Vector128`1<sbyte> value);
    public static Vector128`1<ushort> LeadingZeroCount(Vector128`1<ushort> value);
    public static Vector128`1<UInt32> LeadingZeroCount(Vector128`1<UInt32> value);
    public static Vector64`1<byte> LeadingZeroCount(Vector64`1<byte> value);
    public static Vector64`1<short> LeadingZeroCount(Vector64`1<short> value);
    public static Vector64`1<int> LeadingZeroCount(Vector64`1<int> value);
    public static Vector64`1<sbyte> LeadingZeroCount(Vector64`1<sbyte> value);
    public static Vector64`1<ushort> LeadingZeroCount(Vector64`1<ushort> value);
    public static Vector64`1<UInt32> LeadingZeroCount(Vector64`1<UInt32> value);
    public static Vector128`1<byte> LoadAndInsertScalar(Vector128`1<byte> value, byte index, Byte* address);
    public static Vector128`1<double> LoadAndInsertScalar(Vector128`1<double> value, byte index, Double* address);
    public static Vector128`1<short> LoadAndInsertScalar(Vector128`1<short> value, byte index, Int16* address);
    public static Vector128`1<int> LoadAndInsertScalar(Vector128`1<int> value, byte index, Int32* address);
    public static Vector128`1<long> LoadAndInsertScalar(Vector128`1<long> value, byte index, Int64* address);
    public static Vector128`1<sbyte> LoadAndInsertScalar(Vector128`1<sbyte> value, byte index, SByte* address);
    public static Vector128`1<float> LoadAndInsertScalar(Vector128`1<float> value, byte index, Single* address);
    public static Vector128`1<ushort> LoadAndInsertScalar(Vector128`1<ushort> value, byte index, UInt16* address);
    public static Vector128`1<UInt32> LoadAndInsertScalar(Vector128`1<UInt32> value, byte index, UInt32* address);
    public static Vector128`1<ulong> LoadAndInsertScalar(Vector128`1<ulong> value, byte index, UInt64* address);
    public static Vector64`1<byte> LoadAndInsertScalar(Vector64`1<byte> value, byte index, Byte* address);
    public static Vector64`1<short> LoadAndInsertScalar(Vector64`1<short> value, byte index, Int16* address);
    public static Vector64`1<int> LoadAndInsertScalar(Vector64`1<int> value, byte index, Int32* address);
    public static Vector64`1<sbyte> LoadAndInsertScalar(Vector64`1<sbyte> value, byte index, SByte* address);
    public static Vector64`1<float> LoadAndInsertScalar(Vector64`1<float> value, byte index, Single* address);
    public static Vector64`1<ushort> LoadAndInsertScalar(Vector64`1<ushort> value, byte index, UInt16* address);
    public static Vector64`1<UInt32> LoadAndInsertScalar(Vector64`1<UInt32> value, byte index, UInt32* address);
    public static Vector128`1<byte> LoadAndReplicateToVector128(Byte* address);
    public static Vector128`1<short> LoadAndReplicateToVector128(Int16* address);
    public static Vector128`1<int> LoadAndReplicateToVector128(Int32* address);
    public static Vector128`1<sbyte> LoadAndReplicateToVector128(SByte* address);
    public static Vector128`1<float> LoadAndReplicateToVector128(Single* address);
    public static Vector128`1<ushort> LoadAndReplicateToVector128(UInt16* address);
    public static Vector128`1<UInt32> LoadAndReplicateToVector128(UInt32* address);
    public static Vector64`1<byte> LoadAndReplicateToVector64(Byte* address);
    public static Vector64`1<short> LoadAndReplicateToVector64(Int16* address);
    public static Vector64`1<int> LoadAndReplicateToVector64(Int32* address);
    public static Vector64`1<sbyte> LoadAndReplicateToVector64(SByte* address);
    public static Vector64`1<float> LoadAndReplicateToVector64(Single* address);
    public static Vector64`1<ushort> LoadAndReplicateToVector64(UInt16* address);
    public static Vector64`1<UInt32> LoadAndReplicateToVector64(UInt32* address);
    public static Vector128`1<byte> LoadVector128(Byte* address);
    public static Vector128`1<double> LoadVector128(Double* address);
    public static Vector128`1<short> LoadVector128(Int16* address);
    public static Vector128`1<int> LoadVector128(Int32* address);
    public static Vector128`1<long> LoadVector128(Int64* address);
    public static Vector128`1<sbyte> LoadVector128(SByte* address);
    public static Vector128`1<float> LoadVector128(Single* address);
    public static Vector128`1<ushort> LoadVector128(UInt16* address);
    public static Vector128`1<UInt32> LoadVector128(UInt32* address);
    public static Vector128`1<ulong> LoadVector128(UInt64* address);
    public static Vector64`1<byte> LoadVector64(Byte* address);
    public static Vector64`1<double> LoadVector64(Double* address);
    public static Vector64`1<short> LoadVector64(Int16* address);
    public static Vector64`1<int> LoadVector64(Int32* address);
    public static Vector64`1<long> LoadVector64(Int64* address);
    public static Vector64`1<sbyte> LoadVector64(SByte* address);
    public static Vector64`1<float> LoadVector64(Single* address);
    public static Vector64`1<ushort> LoadVector64(UInt16* address);
    public static Vector64`1<UInt32> LoadVector64(UInt32* address);
    public static Vector64`1<ulong> LoadVector64(UInt64* address);
    public static Vector128`1<byte> Max(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Max(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Max(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> Max(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> Max(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> Max(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Max(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> Max(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> Max(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> Max(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> Max(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> Max(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> Max(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> Max(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<float> MaxNumber(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<float> MaxNumber(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<double> MaxNumberScalar(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> MaxNumberScalar(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<byte> MaxPairwise(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> MaxPairwise(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MaxPairwise(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> MaxPairwise(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> MaxPairwise(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> MaxPairwise(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> MaxPairwise(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> Min(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Min(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Min(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> Min(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> Min(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> Min(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Min(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> Min(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> Min(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> Min(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> Min(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> Min(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> Min(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> Min(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<float> MinNumber(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<float> MinNumber(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<double> MinNumberScalar(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> MinNumberScalar(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<byte> MinPairwise(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> MinPairwise(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MinPairwise(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> MinPairwise(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> MinPairwise(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> MinPairwise(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> MinPairwise(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> Multiply(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Multiply(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Multiply(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> Multiply(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> Multiply(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> Multiply(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Multiply(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> Multiply(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> Multiply(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> Multiply(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> Multiply(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> Multiply(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> Multiply(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> Multiply(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> MultiplyAdd(Vector128`1<byte> addend, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> MultiplyAdd(Vector128`1<short> addend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> MultiplyAdd(Vector128`1<int> addend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> MultiplyAdd(Vector128`1<sbyte> addend, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> MultiplyAdd(Vector128`1<ushort> addend, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> MultiplyAdd(Vector128`1<UInt32> addend, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> MultiplyAdd(Vector64`1<byte> addend, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> MultiplyAdd(Vector64`1<short> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyAdd(Vector64`1<int> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> MultiplyAdd(Vector64`1<sbyte> addend, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> MultiplyAdd(Vector64`1<ushort> addend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> MultiplyAdd(Vector64`1<UInt32> addend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<short> MultiplyAddByScalar(Vector128`1<short> addend, Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<int> MultiplyAddByScalar(Vector128`1<int> addend, Vector128`1<int> left, Vector64`1<int> right);
    public static Vector128`1<ushort> MultiplyAddByScalar(Vector128`1<ushort> addend, Vector128`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<UInt32> MultiplyAddByScalar(Vector128`1<UInt32> addend, Vector128`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<short> MultiplyAddByScalar(Vector64`1<short> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyAddByScalar(Vector64`1<int> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<ushort> MultiplyAddByScalar(Vector64`1<ushort> addend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> MultiplyAddByScalar(Vector64`1<UInt32> addend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<short> MultiplyAddBySelectedScalar(Vector128`1<short> addend, Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<short> MultiplyAddBySelectedScalar(Vector128`1<short> addend, Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyAddBySelectedScalar(Vector128`1<int> addend, Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyAddBySelectedScalar(Vector128`1<int> addend, Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<ushort> MultiplyAddBySelectedScalar(Vector128`1<ushort> addend, Vector128`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<ushort> MultiplyAddBySelectedScalar(Vector128`1<ushort> addend, Vector128`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyAddBySelectedScalar(Vector128`1<UInt32> addend, Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyAddBySelectedScalar(Vector128`1<UInt32> addend, Vector128`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector64`1<short> MultiplyAddBySelectedScalar(Vector64`1<short> addend, Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector64`1<short> MultiplyAddBySelectedScalar(Vector64`1<short> addend, Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector64`1<int> MultiplyAddBySelectedScalar(Vector64`1<int> addend, Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector64`1<int> MultiplyAddBySelectedScalar(Vector64`1<int> addend, Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector64`1<ushort> MultiplyAddBySelectedScalar(Vector64`1<ushort> addend, Vector64`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector64`1<ushort> MultiplyAddBySelectedScalar(Vector64`1<ushort> addend, Vector64`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector64`1<UInt32> MultiplyAddBySelectedScalar(Vector64`1<UInt32> addend, Vector64`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector64`1<UInt32> MultiplyAddBySelectedScalar(Vector64`1<UInt32> addend, Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<short> MultiplyByScalar(Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<int> MultiplyByScalar(Vector128`1<int> left, Vector64`1<int> right);
    public static Vector128`1<float> MultiplyByScalar(Vector128`1<float> left, Vector64`1<float> right);
    public static Vector128`1<ushort> MultiplyByScalar(Vector128`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<UInt32> MultiplyByScalar(Vector128`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<short> MultiplyByScalar(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyByScalar(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<float> MultiplyByScalar(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> MultiplyByScalar(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> MultiplyByScalar(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<short> MultiplyBySelectedScalar(Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<short> MultiplyBySelectedScalar(Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalar(Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalar(Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<float> MultiplyBySelectedScalar(Vector128`1<float> left, Vector128`1<float> right, byte rightIndex);
    public static Vector128`1<float> MultiplyBySelectedScalar(Vector128`1<float> left, Vector64`1<float> right, byte rightIndex);
    public static Vector128`1<ushort> MultiplyBySelectedScalar(Vector128`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<ushort> MultiplyBySelectedScalar(Vector128`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalar(Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalar(Vector128`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector64`1<short> MultiplyBySelectedScalar(Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector64`1<short> MultiplyBySelectedScalar(Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector64`1<int> MultiplyBySelectedScalar(Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector64`1<int> MultiplyBySelectedScalar(Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector64`1<float> MultiplyBySelectedScalar(Vector64`1<float> left, Vector128`1<float> right, byte rightIndex);
    public static Vector64`1<float> MultiplyBySelectedScalar(Vector64`1<float> left, Vector64`1<float> right, byte rightIndex);
    public static Vector64`1<ushort> MultiplyBySelectedScalar(Vector64`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector64`1<ushort> MultiplyBySelectedScalar(Vector64`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector64`1<UInt32> MultiplyBySelectedScalar(Vector64`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector64`1<UInt32> MultiplyBySelectedScalar(Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningLower(Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningLower(Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningLower(Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningLower(Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningLower(Vector64`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningLower(Vector64`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningLower(Vector64`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningLower(Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<int> addend, Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<int> addend, Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<long> addend, Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<long> addend, Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<UInt32> addend, Vector64`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<UInt32> addend, Vector64`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<ulong> addend, Vector64`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<ulong> addend, Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<int> minuend, Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<int> minuend, Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<long> minuend, Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<long> minuend, Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<UInt32> minuend, Vector64`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<UInt32> minuend, Vector64`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<ulong> minuend, Vector64`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<ulong> minuend, Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningUpper(Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningUpper(Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningUpper(Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningUpper(Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningUpper(Vector128`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningUpper(Vector128`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningUpper(Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningUpper(Vector128`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<int> addend, Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<int> addend, Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<long> addend, Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<long> addend, Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<UInt32> addend, Vector128`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<UInt32> addend, Vector128`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<ulong> addend, Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<ulong> addend, Vector128`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<int> minuend, Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<int> minuend, Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<long> minuend, Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<long> minuend, Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<UInt32> minuend, Vector128`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<UInt32> minuend, Vector128`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<ulong> minuend, Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<ulong> minuend, Vector128`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<short> MultiplyDoublingByScalarSaturateHigh(Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<int> MultiplyDoublingByScalarSaturateHigh(Vector128`1<int> left, Vector64`1<int> right);
    public static Vector64`1<short> MultiplyDoublingByScalarSaturateHigh(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyDoublingByScalarSaturateHigh(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> MultiplyDoublingBySelectedScalarSaturateHigh(Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<short> MultiplyDoublingBySelectedScalarSaturateHigh(Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingBySelectedScalarSaturateHigh(Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingBySelectedScalarSaturateHigh(Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector64`1<short> MultiplyDoublingBySelectedScalarSaturateHigh(Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector64`1<short> MultiplyDoublingBySelectedScalarSaturateHigh(Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector64`1<int> MultiplyDoublingBySelectedScalarSaturateHigh(Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector64`1<int> MultiplyDoublingBySelectedScalarSaturateHigh(Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<short> MultiplyDoublingSaturateHigh(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> MultiplyDoublingSaturateHigh(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector64`1<short> MultiplyDoublingSaturateHigh(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyDoublingSaturateHigh(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningLowerAndAddSaturate(Vector128`1<int> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningLowerAndAddSaturate(Vector128`1<long> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningLowerAndSubtractSaturate(Vector128`1<int> minuend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningLowerAndSubtractSaturate(Vector128`1<long> minuend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningLowerByScalarAndAddSaturate(Vector128`1<int> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningLowerByScalarAndAddSaturate(Vector128`1<long> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningLowerByScalarAndSubtractSaturate(Vector128`1<int> minuend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningLowerByScalarAndSubtractSaturate(Vector128`1<long> minuend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(Vector128`1<int> addend, Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(Vector128`1<int> addend, Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(Vector128`1<long> addend, Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(Vector128`1<long> addend, Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(Vector128`1<int> minuend, Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(Vector128`1<int> minuend, Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(Vector128`1<long> minuend, Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(Vector128`1<long> minuend, Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateLower(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateLower(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateLowerByScalar(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateLowerByScalar(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateLowerBySelectedScalar(Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateLowerBySelectedScalar(Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateLowerBySelectedScalar(Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateLowerBySelectedScalar(Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateUpper(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateUpper(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateUpperByScalar(Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateUpperByScalar(Vector128`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateUpperBySelectedScalar(Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateUpperBySelectedScalar(Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateUpperBySelectedScalar(Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateUpperBySelectedScalar(Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningUpperAndAddSaturate(Vector128`1<int> addend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningUpperAndAddSaturate(Vector128`1<long> addend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningUpperAndSubtractSaturate(Vector128`1<int> minuend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningUpperAndSubtractSaturate(Vector128`1<long> minuend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningUpperByScalarAndAddSaturate(Vector128`1<int> addend, Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningUpperByScalarAndAddSaturate(Vector128`1<long> addend, Vector128`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningUpperByScalarAndSubtractSaturate(Vector128`1<int> minuend, Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningUpperByScalarAndSubtractSaturate(Vector128`1<long> minuend, Vector128`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(Vector128`1<int> addend, Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(Vector128`1<int> addend, Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(Vector128`1<long> addend, Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(Vector128`1<long> addend, Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(Vector128`1<int> minuend, Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(Vector128`1<int> minuend, Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(Vector128`1<long> minuend, Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(Vector128`1<long> minuend, Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<short> MultiplyRoundedDoublingByScalarSaturateHigh(Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<int> MultiplyRoundedDoublingByScalarSaturateHigh(Vector128`1<int> left, Vector64`1<int> right);
    public static Vector64`1<short> MultiplyRoundedDoublingByScalarSaturateHigh(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyRoundedDoublingByScalarSaturateHigh(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<short> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector64`1<short> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector64`1<short> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector64`1<int> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector64`1<int> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<short> MultiplyRoundedDoublingSaturateHigh(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> MultiplyRoundedDoublingSaturateHigh(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector64`1<short> MultiplyRoundedDoublingSaturateHigh(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyRoundedDoublingSaturateHigh(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<double> MultiplyScalar(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> MultiplyScalar(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<float> MultiplyScalarBySelectedScalar(Vector64`1<float> left, Vector128`1<float> right, byte rightIndex);
    public static Vector64`1<float> MultiplyScalarBySelectedScalar(Vector64`1<float> left, Vector64`1<float> right, byte rightIndex);
    public static Vector128`1<byte> MultiplySubtract(Vector128`1<byte> minuend, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> MultiplySubtract(Vector128`1<short> minuend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> MultiplySubtract(Vector128`1<int> minuend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> MultiplySubtract(Vector128`1<sbyte> minuend, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> MultiplySubtract(Vector128`1<ushort> minuend, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> MultiplySubtract(Vector128`1<UInt32> minuend, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> MultiplySubtract(Vector64`1<byte> minuend, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> MultiplySubtract(Vector64`1<short> minuend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplySubtract(Vector64`1<int> minuend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> MultiplySubtract(Vector64`1<sbyte> minuend, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> MultiplySubtract(Vector64`1<ushort> minuend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> MultiplySubtract(Vector64`1<UInt32> minuend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<short> MultiplySubtractByScalar(Vector128`1<short> minuend, Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<int> MultiplySubtractByScalar(Vector128`1<int> minuend, Vector128`1<int> left, Vector64`1<int> right);
    public static Vector128`1<ushort> MultiplySubtractByScalar(Vector128`1<ushort> minuend, Vector128`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<UInt32> MultiplySubtractByScalar(Vector128`1<UInt32> minuend, Vector128`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<short> MultiplySubtractByScalar(Vector64`1<short> minuend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplySubtractByScalar(Vector64`1<int> minuend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<ushort> MultiplySubtractByScalar(Vector64`1<ushort> minuend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> MultiplySubtractByScalar(Vector64`1<UInt32> minuend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<short> MultiplySubtractBySelectedScalar(Vector128`1<short> minuend, Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<short> MultiplySubtractBySelectedScalar(Vector128`1<short> minuend, Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplySubtractBySelectedScalar(Vector128`1<int> minuend, Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplySubtractBySelectedScalar(Vector128`1<int> minuend, Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<ushort> MultiplySubtractBySelectedScalar(Vector128`1<ushort> minuend, Vector128`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<ushort> MultiplySubtractBySelectedScalar(Vector128`1<ushort> minuend, Vector128`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplySubtractBySelectedScalar(Vector128`1<UInt32> minuend, Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplySubtractBySelectedScalar(Vector128`1<UInt32> minuend, Vector128`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector64`1<short> MultiplySubtractBySelectedScalar(Vector64`1<short> minuend, Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector64`1<short> MultiplySubtractBySelectedScalar(Vector64`1<short> minuend, Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector64`1<int> MultiplySubtractBySelectedScalar(Vector64`1<int> minuend, Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector64`1<int> MultiplySubtractBySelectedScalar(Vector64`1<int> minuend, Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector64`1<ushort> MultiplySubtractBySelectedScalar(Vector64`1<ushort> minuend, Vector64`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector64`1<ushort> MultiplySubtractBySelectedScalar(Vector64`1<ushort> minuend, Vector64`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector64`1<UInt32> MultiplySubtractBySelectedScalar(Vector64`1<UInt32> minuend, Vector64`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector64`1<UInt32> MultiplySubtractBySelectedScalar(Vector64`1<UInt32> minuend, Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<ushort> MultiplyWideningLower(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<int> MultiplyWideningLower(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyWideningLower(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> MultiplyWideningLower(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<UInt32> MultiplyWideningLower(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> MultiplyWideningLower(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<short> MultiplyWideningLowerAndAdd(Vector128`1<short> addend, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<int> MultiplyWideningLowerAndAdd(Vector128`1<int> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyWideningLowerAndAdd(Vector128`1<long> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<ushort> MultiplyWideningLowerAndAdd(Vector128`1<ushort> addend, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<UInt32> MultiplyWideningLowerAndAdd(Vector128`1<UInt32> addend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> MultiplyWideningLowerAndAdd(Vector128`1<ulong> addend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<short> MultiplyWideningLowerAndSubtract(Vector128`1<short> minuend, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<int> MultiplyWideningLowerAndSubtract(Vector128`1<int> minuend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyWideningLowerAndSubtract(Vector128`1<long> minuend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<ushort> MultiplyWideningLowerAndSubtract(Vector128`1<ushort> minuend, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<UInt32> MultiplyWideningLowerAndSubtract(Vector128`1<UInt32> minuend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> MultiplyWideningLowerAndSubtract(Vector128`1<ulong> minuend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> MultiplyWideningUpper(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<int> MultiplyWideningUpper(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<long> MultiplyWideningUpper(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<short> MultiplyWideningUpper(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<UInt32> MultiplyWideningUpper(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<ulong> MultiplyWideningUpper(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<short> MultiplyWideningUpperAndAdd(Vector128`1<short> addend, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<int> MultiplyWideningUpperAndAdd(Vector128`1<int> addend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<long> MultiplyWideningUpperAndAdd(Vector128`1<long> addend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<ushort> MultiplyWideningUpperAndAdd(Vector128`1<ushort> addend, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<UInt32> MultiplyWideningUpperAndAdd(Vector128`1<UInt32> addend, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<ulong> MultiplyWideningUpperAndAdd(Vector128`1<ulong> addend, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<short> MultiplyWideningUpperAndSubtract(Vector128`1<short> minuend, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<int> MultiplyWideningUpperAndSubtract(Vector128`1<int> minuend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<long> MultiplyWideningUpperAndSubtract(Vector128`1<long> minuend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<ushort> MultiplyWideningUpperAndSubtract(Vector128`1<ushort> minuend, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<UInt32> MultiplyWideningUpperAndSubtract(Vector128`1<UInt32> minuend, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<ulong> MultiplyWideningUpperAndSubtract(Vector128`1<ulong> minuend, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<short> Negate(Vector128`1<short> value);
    public static Vector128`1<int> Negate(Vector128`1<int> value);
    public static Vector128`1<sbyte> Negate(Vector128`1<sbyte> value);
    public static Vector128`1<float> Negate(Vector128`1<float> value);
    public static Vector64`1<short> Negate(Vector64`1<short> value);
    public static Vector64`1<int> Negate(Vector64`1<int> value);
    public static Vector64`1<sbyte> Negate(Vector64`1<sbyte> value);
    public static Vector64`1<float> Negate(Vector64`1<float> value);
    public static Vector128`1<short> NegateSaturate(Vector128`1<short> value);
    public static Vector128`1<int> NegateSaturate(Vector128`1<int> value);
    public static Vector128`1<sbyte> NegateSaturate(Vector128`1<sbyte> value);
    public static Vector64`1<short> NegateSaturate(Vector64`1<short> value);
    public static Vector64`1<int> NegateSaturate(Vector64`1<int> value);
    public static Vector64`1<sbyte> NegateSaturate(Vector64`1<sbyte> value);
    public static Vector64`1<double> NegateScalar(Vector64`1<double> value);
    public static Vector64`1<float> NegateScalar(Vector64`1<float> value);
    public static Vector128`1<byte> Not(Vector128`1<byte> value);
    public static Vector128`1<double> Not(Vector128`1<double> value);
    public static Vector128`1<short> Not(Vector128`1<short> value);
    public static Vector128`1<int> Not(Vector128`1<int> value);
    public static Vector128`1<long> Not(Vector128`1<long> value);
    public static Vector128`1<sbyte> Not(Vector128`1<sbyte> value);
    public static Vector128`1<float> Not(Vector128`1<float> value);
    public static Vector128`1<ushort> Not(Vector128`1<ushort> value);
    public static Vector128`1<UInt32> Not(Vector128`1<UInt32> value);
    public static Vector128`1<ulong> Not(Vector128`1<ulong> value);
    public static Vector64`1<byte> Not(Vector64`1<byte> value);
    public static Vector64`1<double> Not(Vector64`1<double> value);
    public static Vector64`1<short> Not(Vector64`1<short> value);
    public static Vector64`1<int> Not(Vector64`1<int> value);
    public static Vector64`1<long> Not(Vector64`1<long> value);
    public static Vector64`1<sbyte> Not(Vector64`1<sbyte> value);
    public static Vector64`1<float> Not(Vector64`1<float> value);
    public static Vector64`1<ushort> Not(Vector64`1<ushort> value);
    public static Vector64`1<UInt32> Not(Vector64`1<UInt32> value);
    public static Vector64`1<ulong> Not(Vector64`1<ulong> value);
    public static Vector128`1<byte> Or(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> Or(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> Or(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Or(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> Or(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> Or(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> Or(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> Or(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Or(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> Or(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> Or(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<double> Or(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<short> Or(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> Or(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<long> Or(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<sbyte> Or(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> Or(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> Or(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> Or(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<ulong> Or(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<byte> OrNot(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> OrNot(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> OrNot(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> OrNot(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> OrNot(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> OrNot(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> OrNot(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> OrNot(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> OrNot(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> OrNot(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> OrNot(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<double> OrNot(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<short> OrNot(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> OrNot(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<long> OrNot(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<sbyte> OrNot(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> OrNot(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> OrNot(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> OrNot(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<ulong> OrNot(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<byte> PolynomialMultiply(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<sbyte> PolynomialMultiply(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector64`1<byte> PolynomialMultiply(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<sbyte> PolynomialMultiply(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<ushort> PolynomialMultiplyWideningLower(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<short> PolynomialMultiplyWideningLower(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<ushort> PolynomialMultiplyWideningUpper(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> PolynomialMultiplyWideningUpper(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> PopCount(Vector128`1<byte> value);
    public static Vector128`1<sbyte> PopCount(Vector128`1<sbyte> value);
    public static Vector64`1<byte> PopCount(Vector64`1<byte> value);
    public static Vector64`1<sbyte> PopCount(Vector64`1<sbyte> value);
    public static Vector128`1<float> ReciprocalEstimate(Vector128`1<float> value);
    public static Vector128`1<UInt32> ReciprocalEstimate(Vector128`1<UInt32> value);
    public static Vector64`1<float> ReciprocalEstimate(Vector64`1<float> value);
    public static Vector64`1<UInt32> ReciprocalEstimate(Vector64`1<UInt32> value);
    public static Vector128`1<float> ReciprocalSquareRootEstimate(Vector128`1<float> value);
    public static Vector128`1<UInt32> ReciprocalSquareRootEstimate(Vector128`1<UInt32> value);
    public static Vector64`1<float> ReciprocalSquareRootEstimate(Vector64`1<float> value);
    public static Vector64`1<UInt32> ReciprocalSquareRootEstimate(Vector64`1<UInt32> value);
    public static Vector128`1<float> ReciprocalSquareRootStep(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<float> ReciprocalSquareRootStep(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> ReciprocalStep(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<float> ReciprocalStep(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<int> ReverseElement16(Vector128`1<int> value);
    public static Vector128`1<long> ReverseElement16(Vector128`1<long> value);
    public static Vector128`1<UInt32> ReverseElement16(Vector128`1<UInt32> value);
    public static Vector128`1<ulong> ReverseElement16(Vector128`1<ulong> value);
    public static Vector64`1<int> ReverseElement16(Vector64`1<int> value);
    public static Vector64`1<long> ReverseElement16(Vector64`1<long> value);
    public static Vector64`1<UInt32> ReverseElement16(Vector64`1<UInt32> value);
    public static Vector64`1<ulong> ReverseElement16(Vector64`1<ulong> value);
    public static Vector128`1<long> ReverseElement32(Vector128`1<long> value);
    public static Vector128`1<ulong> ReverseElement32(Vector128`1<ulong> value);
    public static Vector64`1<long> ReverseElement32(Vector64`1<long> value);
    public static Vector64`1<ulong> ReverseElement32(Vector64`1<ulong> value);
    public static Vector128`1<short> ReverseElement8(Vector128`1<short> value);
    public static Vector128`1<int> ReverseElement8(Vector128`1<int> value);
    public static Vector128`1<long> ReverseElement8(Vector128`1<long> value);
    public static Vector128`1<ushort> ReverseElement8(Vector128`1<ushort> value);
    public static Vector128`1<UInt32> ReverseElement8(Vector128`1<UInt32> value);
    public static Vector128`1<ulong> ReverseElement8(Vector128`1<ulong> value);
    public static Vector64`1<short> ReverseElement8(Vector64`1<short> value);
    public static Vector64`1<int> ReverseElement8(Vector64`1<int> value);
    public static Vector64`1<long> ReverseElement8(Vector64`1<long> value);
    public static Vector64`1<ushort> ReverseElement8(Vector64`1<ushort> value);
    public static Vector64`1<UInt32> ReverseElement8(Vector64`1<UInt32> value);
    public static Vector64`1<ulong> ReverseElement8(Vector64`1<ulong> value);
    public static Vector128`1<float> RoundAwayFromZero(Vector128`1<float> value);
    public static Vector64`1<float> RoundAwayFromZero(Vector64`1<float> value);
    public static Vector64`1<double> RoundAwayFromZeroScalar(Vector64`1<double> value);
    public static Vector64`1<float> RoundAwayFromZeroScalar(Vector64`1<float> value);
    public static Vector128`1<float> RoundToNearest(Vector128`1<float> value);
    public static Vector64`1<float> RoundToNearest(Vector64`1<float> value);
    public static Vector64`1<double> RoundToNearestScalar(Vector64`1<double> value);
    public static Vector64`1<float> RoundToNearestScalar(Vector64`1<float> value);
    public static Vector128`1<float> RoundToNegativeInfinity(Vector128`1<float> value);
    public static Vector64`1<float> RoundToNegativeInfinity(Vector64`1<float> value);
    public static Vector64`1<double> RoundToNegativeInfinityScalar(Vector64`1<double> value);
    public static Vector64`1<float> RoundToNegativeInfinityScalar(Vector64`1<float> value);
    public static Vector128`1<float> RoundToPositiveInfinity(Vector128`1<float> value);
    public static Vector64`1<float> RoundToPositiveInfinity(Vector64`1<float> value);
    public static Vector64`1<double> RoundToPositiveInfinityScalar(Vector64`1<double> value);
    public static Vector64`1<float> RoundToPositiveInfinityScalar(Vector64`1<float> value);
    public static Vector128`1<float> RoundToZero(Vector128`1<float> value);
    public static Vector64`1<float> RoundToZero(Vector64`1<float> value);
    public static Vector64`1<double> RoundToZeroScalar(Vector64`1<double> value);
    public static Vector64`1<float> RoundToZeroScalar(Vector64`1<float> value);
    public static Vector128`1<short> ShiftArithmetic(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftArithmetic(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftArithmetic(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftArithmetic(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector64`1<short> ShiftArithmetic(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftArithmetic(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftArithmetic(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector128`1<short> ShiftArithmeticRounded(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftArithmeticRounded(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftArithmeticRounded(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftArithmeticRounded(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector64`1<short> ShiftArithmeticRounded(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftArithmeticRounded(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftArithmeticRounded(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector128`1<short> ShiftArithmeticRoundedSaturate(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftArithmeticRoundedSaturate(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftArithmeticRoundedSaturate(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftArithmeticRoundedSaturate(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector64`1<short> ShiftArithmeticRoundedSaturate(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftArithmeticRoundedSaturate(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftArithmeticRoundedSaturate(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector64`1<long> ShiftArithmeticRoundedSaturateScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector64`1<long> ShiftArithmeticRoundedScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector128`1<short> ShiftArithmeticSaturate(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftArithmeticSaturate(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftArithmeticSaturate(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftArithmeticSaturate(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector64`1<short> ShiftArithmeticSaturate(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftArithmeticSaturate(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftArithmeticSaturate(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector64`1<long> ShiftArithmeticSaturateScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector64`1<long> ShiftArithmeticScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector128`1<byte> ShiftLeftAndInsert(Vector128`1<byte> left, Vector128`1<byte> right, byte shift);
    public static Vector128`1<short> ShiftLeftAndInsert(Vector128`1<short> left, Vector128`1<short> right, byte shift);
    public static Vector128`1<int> ShiftLeftAndInsert(Vector128`1<int> left, Vector128`1<int> right, byte shift);
    public static Vector128`1<long> ShiftLeftAndInsert(Vector128`1<long> left, Vector128`1<long> right, byte shift);
    public static Vector128`1<sbyte> ShiftLeftAndInsert(Vector128`1<sbyte> left, Vector128`1<sbyte> right, byte shift);
    public static Vector128`1<ushort> ShiftLeftAndInsert(Vector128`1<ushort> left, Vector128`1<ushort> right, byte shift);
    public static Vector128`1<UInt32> ShiftLeftAndInsert(Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte shift);
    public static Vector128`1<ulong> ShiftLeftAndInsert(Vector128`1<ulong> left, Vector128`1<ulong> right, byte shift);
    public static Vector64`1<byte> ShiftLeftAndInsert(Vector64`1<byte> left, Vector64`1<byte> right, byte shift);
    public static Vector64`1<short> ShiftLeftAndInsert(Vector64`1<short> left, Vector64`1<short> right, byte shift);
    public static Vector64`1<int> ShiftLeftAndInsert(Vector64`1<int> left, Vector64`1<int> right, byte shift);
    public static Vector64`1<sbyte> ShiftLeftAndInsert(Vector64`1<sbyte> left, Vector64`1<sbyte> right, byte shift);
    public static Vector64`1<ushort> ShiftLeftAndInsert(Vector64`1<ushort> left, Vector64`1<ushort> right, byte shift);
    public static Vector64`1<UInt32> ShiftLeftAndInsert(Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte shift);
    public static Vector64`1<long> ShiftLeftAndInsertScalar(Vector64`1<long> left, Vector64`1<long> right, byte shift);
    public static Vector64`1<ulong> ShiftLeftAndInsertScalar(Vector64`1<ulong> left, Vector64`1<ulong> right, byte shift);
    public static Vector128`1<byte> ShiftLeftLogical(Vector128`1<byte> value, byte count);
    public static Vector128`1<short> ShiftLeftLogical(Vector128`1<short> value, byte count);
    public static Vector128`1<long> ShiftLeftLogical(Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftLeftLogical(Vector128`1<sbyte> value, byte count);
    public static Vector128`1<ushort> ShiftLeftLogical(Vector128`1<ushort> value, byte count);
    public static Vector128`1<UInt32> ShiftLeftLogical(Vector128`1<UInt32> value, byte count);
    public static Vector128`1<ulong> ShiftLeftLogical(Vector128`1<ulong> value, byte count);
    public static Vector64`1<byte> ShiftLeftLogical(Vector64`1<byte> value, byte count);
    public static Vector64`1<short> ShiftLeftLogical(Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftLeftLogical(Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftLeftLogical(Vector64`1<sbyte> value, byte count);
    public static Vector64`1<ushort> ShiftLeftLogical(Vector64`1<ushort> value, byte count);
    public static Vector64`1<UInt32> ShiftLeftLogical(Vector64`1<UInt32> value, byte count);
    public static Vector128`1<byte> ShiftLeftLogicalSaturate(Vector128`1<byte> value, byte count);
    public static Vector128`1<short> ShiftLeftLogicalSaturate(Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftLeftLogicalSaturate(Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftLeftLogicalSaturate(Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftLeftLogicalSaturate(Vector128`1<sbyte> value, byte count);
    public static Vector128`1<ushort> ShiftLeftLogicalSaturate(Vector128`1<ushort> value, byte count);
    public static Vector128`1<UInt32> ShiftLeftLogicalSaturate(Vector128`1<UInt32> value, byte count);
    public static Vector128`1<ulong> ShiftLeftLogicalSaturate(Vector128`1<ulong> value, byte count);
    public static Vector64`1<byte> ShiftLeftLogicalSaturate(Vector64`1<byte> value, byte count);
    public static Vector64`1<short> ShiftLeftLogicalSaturate(Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftLeftLogicalSaturate(Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftLeftLogicalSaturate(Vector64`1<sbyte> value, byte count);
    public static Vector64`1<ushort> ShiftLeftLogicalSaturate(Vector64`1<ushort> value, byte count);
    public static Vector64`1<UInt32> ShiftLeftLogicalSaturate(Vector64`1<UInt32> value, byte count);
    public static Vector64`1<long> ShiftLeftLogicalSaturateScalar(Vector64`1<long> value, byte count);
    public static Vector64`1<ulong> ShiftLeftLogicalSaturateScalar(Vector64`1<ulong> value, byte count);
    public static Vector128`1<ushort> ShiftLeftLogicalSaturateUnsigned(Vector128`1<short> value, byte count);
    public static Vector128`1<UInt32> ShiftLeftLogicalSaturateUnsigned(Vector128`1<int> value, byte count);
    public static Vector128`1<ulong> ShiftLeftLogicalSaturateUnsigned(Vector128`1<long> value, byte count);
    public static Vector128`1<byte> ShiftLeftLogicalSaturateUnsigned(Vector128`1<sbyte> value, byte count);
    public static Vector64`1<ushort> ShiftLeftLogicalSaturateUnsigned(Vector64`1<short> value, byte count);
    public static Vector64`1<UInt32> ShiftLeftLogicalSaturateUnsigned(Vector64`1<int> value, byte count);
    public static Vector64`1<byte> ShiftLeftLogicalSaturateUnsigned(Vector64`1<sbyte> value, byte count);
    public static Vector64`1<ulong> ShiftLeftLogicalSaturateUnsignedScalar(Vector64`1<long> value, byte count);
    public static Vector64`1<long> ShiftLeftLogicalScalar(Vector64`1<long> value, byte count);
    public static Vector64`1<ulong> ShiftLeftLogicalScalar(Vector64`1<ulong> value, byte count);
    public static Vector128`1<ushort> ShiftLeftLogicalWideningLower(Vector64`1<byte> value, byte count);
    public static Vector128`1<int> ShiftLeftLogicalWideningLower(Vector64`1<short> value, byte count);
    public static Vector128`1<long> ShiftLeftLogicalWideningLower(Vector64`1<int> value, byte count);
    public static Vector128`1<short> ShiftLeftLogicalWideningLower(Vector64`1<sbyte> value, byte count);
    public static Vector128`1<UInt32> ShiftLeftLogicalWideningLower(Vector64`1<ushort> value, byte count);
    public static Vector128`1<ulong> ShiftLeftLogicalWideningLower(Vector64`1<UInt32> value, byte count);
    public static Vector128`1<ushort> ShiftLeftLogicalWideningUpper(Vector128`1<byte> value, byte count);
    public static Vector128`1<int> ShiftLeftLogicalWideningUpper(Vector128`1<short> value, byte count);
    public static Vector128`1<long> ShiftLeftLogicalWideningUpper(Vector128`1<int> value, byte count);
    public static Vector128`1<short> ShiftLeftLogicalWideningUpper(Vector128`1<sbyte> value, byte count);
    public static Vector128`1<UInt32> ShiftLeftLogicalWideningUpper(Vector128`1<ushort> value, byte count);
    public static Vector128`1<ulong> ShiftLeftLogicalWideningUpper(Vector128`1<UInt32> value, byte count);
    public static Vector128`1<byte> ShiftLogical(Vector128`1<byte> value, Vector128`1<sbyte> count);
    public static Vector128`1<short> ShiftLogical(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftLogical(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftLogical(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftLogical(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector128`1<ushort> ShiftLogical(Vector128`1<ushort> value, Vector128`1<short> count);
    public static Vector128`1<UInt32> ShiftLogical(Vector128`1<UInt32> value, Vector128`1<int> count);
    public static Vector128`1<ulong> ShiftLogical(Vector128`1<ulong> value, Vector128`1<long> count);
    public static Vector64`1<byte> ShiftLogical(Vector64`1<byte> value, Vector64`1<sbyte> count);
    public static Vector64`1<short> ShiftLogical(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftLogical(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftLogical(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector64`1<ushort> ShiftLogical(Vector64`1<ushort> value, Vector64`1<short> count);
    public static Vector64`1<UInt32> ShiftLogical(Vector64`1<UInt32> value, Vector64`1<int> count);
    public static Vector128`1<byte> ShiftLogicalRounded(Vector128`1<byte> value, Vector128`1<sbyte> count);
    public static Vector128`1<short> ShiftLogicalRounded(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftLogicalRounded(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftLogicalRounded(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftLogicalRounded(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector128`1<ushort> ShiftLogicalRounded(Vector128`1<ushort> value, Vector128`1<short> count);
    public static Vector128`1<UInt32> ShiftLogicalRounded(Vector128`1<UInt32> value, Vector128`1<int> count);
    public static Vector128`1<ulong> ShiftLogicalRounded(Vector128`1<ulong> value, Vector128`1<long> count);
    public static Vector64`1<byte> ShiftLogicalRounded(Vector64`1<byte> value, Vector64`1<sbyte> count);
    public static Vector64`1<short> ShiftLogicalRounded(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftLogicalRounded(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftLogicalRounded(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector64`1<ushort> ShiftLogicalRounded(Vector64`1<ushort> value, Vector64`1<short> count);
    public static Vector64`1<UInt32> ShiftLogicalRounded(Vector64`1<UInt32> value, Vector64`1<int> count);
    public static Vector128`1<byte> ShiftLogicalRoundedSaturate(Vector128`1<byte> value, Vector128`1<sbyte> count);
    public static Vector128`1<short> ShiftLogicalRoundedSaturate(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftLogicalRoundedSaturate(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftLogicalRoundedSaturate(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftLogicalRoundedSaturate(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector128`1<ushort> ShiftLogicalRoundedSaturate(Vector128`1<ushort> value, Vector128`1<short> count);
    public static Vector128`1<UInt32> ShiftLogicalRoundedSaturate(Vector128`1<UInt32> value, Vector128`1<int> count);
    public static Vector128`1<ulong> ShiftLogicalRoundedSaturate(Vector128`1<ulong> value, Vector128`1<long> count);
    public static Vector64`1<byte> ShiftLogicalRoundedSaturate(Vector64`1<byte> value, Vector64`1<sbyte> count);
    public static Vector64`1<short> ShiftLogicalRoundedSaturate(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftLogicalRoundedSaturate(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftLogicalRoundedSaturate(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector64`1<ushort> ShiftLogicalRoundedSaturate(Vector64`1<ushort> value, Vector64`1<short> count);
    public static Vector64`1<UInt32> ShiftLogicalRoundedSaturate(Vector64`1<UInt32> value, Vector64`1<int> count);
    public static Vector64`1<long> ShiftLogicalRoundedSaturateScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector64`1<ulong> ShiftLogicalRoundedSaturateScalar(Vector64`1<ulong> value, Vector64`1<long> count);
    public static Vector64`1<long> ShiftLogicalRoundedScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector64`1<ulong> ShiftLogicalRoundedScalar(Vector64`1<ulong> value, Vector64`1<long> count);
    public static Vector128`1<byte> ShiftLogicalSaturate(Vector128`1<byte> value, Vector128`1<sbyte> count);
    public static Vector128`1<short> ShiftLogicalSaturate(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftLogicalSaturate(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftLogicalSaturate(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftLogicalSaturate(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector128`1<ushort> ShiftLogicalSaturate(Vector128`1<ushort> value, Vector128`1<short> count);
    public static Vector128`1<UInt32> ShiftLogicalSaturate(Vector128`1<UInt32> value, Vector128`1<int> count);
    public static Vector128`1<ulong> ShiftLogicalSaturate(Vector128`1<ulong> value, Vector128`1<long> count);
    public static Vector64`1<byte> ShiftLogicalSaturate(Vector64`1<byte> value, Vector64`1<sbyte> count);
    public static Vector64`1<short> ShiftLogicalSaturate(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftLogicalSaturate(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftLogicalSaturate(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector64`1<ushort> ShiftLogicalSaturate(Vector64`1<ushort> value, Vector64`1<short> count);
    public static Vector64`1<UInt32> ShiftLogicalSaturate(Vector64`1<UInt32> value, Vector64`1<int> count);
    public static Vector64`1<long> ShiftLogicalSaturateScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector64`1<ulong> ShiftLogicalSaturateScalar(Vector64`1<ulong> value, Vector64`1<long> count);
    public static Vector64`1<long> ShiftLogicalScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector64`1<ulong> ShiftLogicalScalar(Vector64`1<ulong> value, Vector64`1<long> count);
    public static Vector128`1<byte> ShiftRightAndInsert(Vector128`1<byte> left, Vector128`1<byte> right, byte shift);
    public static Vector128`1<short> ShiftRightAndInsert(Vector128`1<short> left, Vector128`1<short> right, byte shift);
    public static Vector128`1<int> ShiftRightAndInsert(Vector128`1<int> left, Vector128`1<int> right, byte shift);
    public static Vector128`1<long> ShiftRightAndInsert(Vector128`1<long> left, Vector128`1<long> right, byte shift);
    public static Vector128`1<sbyte> ShiftRightAndInsert(Vector128`1<sbyte> left, Vector128`1<sbyte> right, byte shift);
    public static Vector128`1<ushort> ShiftRightAndInsert(Vector128`1<ushort> left, Vector128`1<ushort> right, byte shift);
    public static Vector128`1<UInt32> ShiftRightAndInsert(Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte shift);
    public static Vector128`1<ulong> ShiftRightAndInsert(Vector128`1<ulong> left, Vector128`1<ulong> right, byte shift);
    public static Vector64`1<byte> ShiftRightAndInsert(Vector64`1<byte> left, Vector64`1<byte> right, byte shift);
    public static Vector64`1<short> ShiftRightAndInsert(Vector64`1<short> left, Vector64`1<short> right, byte shift);
    public static Vector64`1<int> ShiftRightAndInsert(Vector64`1<int> left, Vector64`1<int> right, byte shift);
    public static Vector64`1<sbyte> ShiftRightAndInsert(Vector64`1<sbyte> left, Vector64`1<sbyte> right, byte shift);
    public static Vector64`1<ushort> ShiftRightAndInsert(Vector64`1<ushort> left, Vector64`1<ushort> right, byte shift);
    public static Vector64`1<UInt32> ShiftRightAndInsert(Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte shift);
    public static Vector64`1<long> ShiftRightAndInsertScalar(Vector64`1<long> left, Vector64`1<long> right, byte shift);
    public static Vector64`1<ulong> ShiftRightAndInsertScalar(Vector64`1<ulong> left, Vector64`1<ulong> right, byte shift);
    public static Vector128`1<short> ShiftRightArithmetic(Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightArithmetic(Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightArithmetic(Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightArithmetic(Vector128`1<sbyte> value, byte count);
    public static Vector64`1<short> ShiftRightArithmetic(Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightArithmetic(Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightArithmetic(Vector64`1<sbyte> value, byte count);
    public static Vector128`1<short> ShiftRightArithmeticAdd(Vector128`1<short> addend, Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightArithmeticAdd(Vector128`1<int> addend, Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightArithmeticAdd(Vector128`1<long> addend, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightArithmeticAdd(Vector128`1<sbyte> addend, Vector128`1<sbyte> value, byte count);
    public static Vector64`1<short> ShiftRightArithmeticAdd(Vector64`1<short> addend, Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightArithmeticAdd(Vector64`1<int> addend, Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightArithmeticAdd(Vector64`1<sbyte> addend, Vector64`1<sbyte> value, byte count);
    public static Vector64`1<long> ShiftRightArithmeticAddScalar(Vector64`1<long> addend, Vector64`1<long> value, byte count);
    public static Vector64`1<sbyte> ShiftRightArithmeticNarrowingSaturateLower(Vector128`1<short> value, byte count);
    public static Vector64`1<short> ShiftRightArithmeticNarrowingSaturateLower(Vector128`1<int> value, byte count);
    public static Vector64`1<int> ShiftRightArithmeticNarrowingSaturateLower(Vector128`1<long> value, byte count);
    public static Vector64`1<byte> ShiftRightArithmeticNarrowingSaturateUnsignedLower(Vector128`1<short> value, byte count);
    public static Vector64`1<ushort> ShiftRightArithmeticNarrowingSaturateUnsignedLower(Vector128`1<int> value, byte count);
    public static Vector64`1<UInt32> ShiftRightArithmeticNarrowingSaturateUnsignedLower(Vector128`1<long> value, byte count);
    public static Vector128`1<byte> ShiftRightArithmeticNarrowingSaturateUnsignedUpper(Vector64`1<byte> lower, Vector128`1<short> value, byte count);
    public static Vector128`1<ushort> ShiftRightArithmeticNarrowingSaturateUnsignedUpper(Vector64`1<ushort> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<UInt32> ShiftRightArithmeticNarrowingSaturateUnsignedUpper(Vector64`1<UInt32> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<short> ShiftRightArithmeticNarrowingSaturateUpper(Vector64`1<short> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftRightArithmeticNarrowingSaturateUpper(Vector64`1<int> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightArithmeticNarrowingSaturateUpper(Vector64`1<sbyte> lower, Vector128`1<short> value, byte count);
    public static Vector128`1<short> ShiftRightArithmeticRounded(Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightArithmeticRounded(Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightArithmeticRounded(Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightArithmeticRounded(Vector128`1<sbyte> value, byte count);
    public static Vector64`1<short> ShiftRightArithmeticRounded(Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightArithmeticRounded(Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightArithmeticRounded(Vector64`1<sbyte> value, byte count);
    public static Vector128`1<short> ShiftRightArithmeticRoundedAdd(Vector128`1<short> addend, Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightArithmeticRoundedAdd(Vector128`1<int> addend, Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightArithmeticRoundedAdd(Vector128`1<long> addend, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightArithmeticRoundedAdd(Vector128`1<sbyte> addend, Vector128`1<sbyte> value, byte count);
    public static Vector64`1<short> ShiftRightArithmeticRoundedAdd(Vector64`1<short> addend, Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightArithmeticRoundedAdd(Vector64`1<int> addend, Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightArithmeticRoundedAdd(Vector64`1<sbyte> addend, Vector64`1<sbyte> value, byte count);
    public static Vector64`1<long> ShiftRightArithmeticRoundedAddScalar(Vector64`1<long> addend, Vector64`1<long> value, byte count);
    public static Vector64`1<sbyte> ShiftRightArithmeticRoundedNarrowingSaturateLower(Vector128`1<short> value, byte count);
    public static Vector64`1<short> ShiftRightArithmeticRoundedNarrowingSaturateLower(Vector128`1<int> value, byte count);
    public static Vector64`1<int> ShiftRightArithmeticRoundedNarrowingSaturateLower(Vector128`1<long> value, byte count);
    public static Vector64`1<byte> ShiftRightArithmeticRoundedNarrowingSaturateUnsignedLower(Vector128`1<short> value, byte count);
    public static Vector64`1<ushort> ShiftRightArithmeticRoundedNarrowingSaturateUnsignedLower(Vector128`1<int> value, byte count);
    public static Vector64`1<UInt32> ShiftRightArithmeticRoundedNarrowingSaturateUnsignedLower(Vector128`1<long> value, byte count);
    public static Vector128`1<byte> ShiftRightArithmeticRoundedNarrowingSaturateUnsignedUpper(Vector64`1<byte> lower, Vector128`1<short> value, byte count);
    public static Vector128`1<ushort> ShiftRightArithmeticRoundedNarrowingSaturateUnsignedUpper(Vector64`1<ushort> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<UInt32> ShiftRightArithmeticRoundedNarrowingSaturateUnsignedUpper(Vector64`1<UInt32> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<short> ShiftRightArithmeticRoundedNarrowingSaturateUpper(Vector64`1<short> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftRightArithmeticRoundedNarrowingSaturateUpper(Vector64`1<int> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightArithmeticRoundedNarrowingSaturateUpper(Vector64`1<sbyte> lower, Vector128`1<short> value, byte count);
    public static Vector64`1<long> ShiftRightArithmeticRoundedScalar(Vector64`1<long> value, byte count);
    public static Vector64`1<long> ShiftRightArithmeticScalar(Vector64`1<long> value, byte count);
    public static Vector128`1<byte> ShiftRightLogical(Vector128`1<byte> value, byte count);
    public static Vector128`1<short> ShiftRightLogical(Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightLogical(Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightLogical(Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogical(Vector128`1<sbyte> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogical(Vector128`1<ushort> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogical(Vector128`1<UInt32> value, byte count);
    public static Vector128`1<ulong> ShiftRightLogical(Vector128`1<ulong> value, byte count);
    public static Vector64`1<byte> ShiftRightLogical(Vector64`1<byte> value, byte count);
    public static Vector64`1<short> ShiftRightLogical(Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightLogical(Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogical(Vector64`1<sbyte> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogical(Vector64`1<ushort> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogical(Vector64`1<UInt32> value, byte count);
    public static Vector128`1<byte> ShiftRightLogicalAdd(Vector128`1<byte> addend, Vector128`1<byte> value, byte count);
    public static Vector128`1<short> ShiftRightLogicalAdd(Vector128`1<short> addend, Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightLogicalAdd(Vector128`1<int> addend, Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightLogicalAdd(Vector128`1<long> addend, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogicalAdd(Vector128`1<sbyte> addend, Vector128`1<sbyte> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogicalAdd(Vector128`1<ushort> addend, Vector128`1<ushort> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogicalAdd(Vector128`1<UInt32> addend, Vector128`1<UInt32> value, byte count);
    public static Vector128`1<ulong> ShiftRightLogicalAdd(Vector128`1<ulong> addend, Vector128`1<ulong> value, byte count);
    public static Vector64`1<byte> ShiftRightLogicalAdd(Vector64`1<byte> addend, Vector64`1<byte> value, byte count);
    public static Vector64`1<short> ShiftRightLogicalAdd(Vector64`1<short> addend, Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightLogicalAdd(Vector64`1<int> addend, Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogicalAdd(Vector64`1<sbyte> addend, Vector64`1<sbyte> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogicalAdd(Vector64`1<ushort> addend, Vector64`1<ushort> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogicalAdd(Vector64`1<UInt32> addend, Vector64`1<UInt32> value, byte count);
    public static Vector64`1<long> ShiftRightLogicalAddScalar(Vector64`1<long> addend, Vector64`1<long> value, byte count);
    public static Vector64`1<ulong> ShiftRightLogicalAddScalar(Vector64`1<ulong> addend, Vector64`1<ulong> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogicalNarrowingLower(Vector128`1<short> value, byte count);
    public static Vector64`1<short> ShiftRightLogicalNarrowingLower(Vector128`1<int> value, byte count);
    public static Vector64`1<int> ShiftRightLogicalNarrowingLower(Vector128`1<long> value, byte count);
    public static Vector64`1<byte> ShiftRightLogicalNarrowingLower(Vector128`1<ushort> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogicalNarrowingLower(Vector128`1<UInt32> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogicalNarrowingLower(Vector128`1<ulong> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogicalNarrowingSaturateLower(Vector128`1<short> value, byte count);
    public static Vector64`1<short> ShiftRightLogicalNarrowingSaturateLower(Vector128`1<int> value, byte count);
    public static Vector64`1<int> ShiftRightLogicalNarrowingSaturateLower(Vector128`1<long> value, byte count);
    public static Vector64`1<byte> ShiftRightLogicalNarrowingSaturateLower(Vector128`1<ushort> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogicalNarrowingSaturateLower(Vector128`1<UInt32> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogicalNarrowingSaturateLower(Vector128`1<ulong> value, byte count);
    public static Vector128`1<byte> ShiftRightLogicalNarrowingSaturateUpper(Vector64`1<byte> lower, Vector128`1<ushort> value, byte count);
    public static Vector128`1<short> ShiftRightLogicalNarrowingSaturateUpper(Vector64`1<short> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftRightLogicalNarrowingSaturateUpper(Vector64`1<int> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogicalNarrowingSaturateUpper(Vector64`1<sbyte> lower, Vector128`1<short> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogicalNarrowingSaturateUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogicalNarrowingSaturateUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> value, byte count);
    public static Vector128`1<byte> ShiftRightLogicalNarrowingUpper(Vector64`1<byte> lower, Vector128`1<ushort> value, byte count);
    public static Vector128`1<short> ShiftRightLogicalNarrowingUpper(Vector64`1<short> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftRightLogicalNarrowingUpper(Vector64`1<int> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogicalNarrowingUpper(Vector64`1<sbyte> lower, Vector128`1<short> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogicalNarrowingUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogicalNarrowingUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> value, byte count);
    public static Vector128`1<byte> ShiftRightLogicalRounded(Vector128`1<byte> value, byte count);
    public static Vector128`1<short> ShiftRightLogicalRounded(Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightLogicalRounded(Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightLogicalRounded(Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogicalRounded(Vector128`1<sbyte> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogicalRounded(Vector128`1<ushort> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogicalRounded(Vector128`1<UInt32> value, byte count);
    public static Vector128`1<ulong> ShiftRightLogicalRounded(Vector128`1<ulong> value, byte count);
    public static Vector64`1<byte> ShiftRightLogicalRounded(Vector64`1<byte> value, byte count);
    public static Vector64`1<short> ShiftRightLogicalRounded(Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightLogicalRounded(Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogicalRounded(Vector64`1<sbyte> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogicalRounded(Vector64`1<ushort> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogicalRounded(Vector64`1<UInt32> value, byte count);
    public static Vector128`1<byte> ShiftRightLogicalRoundedAdd(Vector128`1<byte> addend, Vector128`1<byte> value, byte count);
    public static Vector128`1<short> ShiftRightLogicalRoundedAdd(Vector128`1<short> addend, Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightLogicalRoundedAdd(Vector128`1<int> addend, Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightLogicalRoundedAdd(Vector128`1<long> addend, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogicalRoundedAdd(Vector128`1<sbyte> addend, Vector128`1<sbyte> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogicalRoundedAdd(Vector128`1<ushort> addend, Vector128`1<ushort> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogicalRoundedAdd(Vector128`1<UInt32> addend, Vector128`1<UInt32> value, byte count);
    public static Vector128`1<ulong> ShiftRightLogicalRoundedAdd(Vector128`1<ulong> addend, Vector128`1<ulong> value, byte count);
    public static Vector64`1<byte> ShiftRightLogicalRoundedAdd(Vector64`1<byte> addend, Vector64`1<byte> value, byte count);
    public static Vector64`1<short> ShiftRightLogicalRoundedAdd(Vector64`1<short> addend, Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightLogicalRoundedAdd(Vector64`1<int> addend, Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogicalRoundedAdd(Vector64`1<sbyte> addend, Vector64`1<sbyte> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogicalRoundedAdd(Vector64`1<ushort> addend, Vector64`1<ushort> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogicalRoundedAdd(Vector64`1<UInt32> addend, Vector64`1<UInt32> value, byte count);
    public static Vector64`1<long> ShiftRightLogicalRoundedAddScalar(Vector64`1<long> addend, Vector64`1<long> value, byte count);
    public static Vector64`1<ulong> ShiftRightLogicalRoundedAddScalar(Vector64`1<ulong> addend, Vector64`1<ulong> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogicalRoundedNarrowingLower(Vector128`1<short> value, byte count);
    public static Vector64`1<short> ShiftRightLogicalRoundedNarrowingLower(Vector128`1<int> value, byte count);
    public static Vector64`1<int> ShiftRightLogicalRoundedNarrowingLower(Vector128`1<long> value, byte count);
    public static Vector64`1<byte> ShiftRightLogicalRoundedNarrowingLower(Vector128`1<ushort> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogicalRoundedNarrowingLower(Vector128`1<UInt32> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogicalRoundedNarrowingLower(Vector128`1<ulong> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogicalRoundedNarrowingSaturateLower(Vector128`1<short> value, byte count);
    public static Vector64`1<short> ShiftRightLogicalRoundedNarrowingSaturateLower(Vector128`1<int> value, byte count);
    public static Vector64`1<int> ShiftRightLogicalRoundedNarrowingSaturateLower(Vector128`1<long> value, byte count);
    public static Vector64`1<byte> ShiftRightLogicalRoundedNarrowingSaturateLower(Vector128`1<ushort> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogicalRoundedNarrowingSaturateLower(Vector128`1<UInt32> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogicalRoundedNarrowingSaturateLower(Vector128`1<ulong> value, byte count);
    public static Vector128`1<byte> ShiftRightLogicalRoundedNarrowingSaturateUpper(Vector64`1<byte> lower, Vector128`1<ushort> value, byte count);
    public static Vector128`1<short> ShiftRightLogicalRoundedNarrowingSaturateUpper(Vector64`1<short> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftRightLogicalRoundedNarrowingSaturateUpper(Vector64`1<int> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogicalRoundedNarrowingSaturateUpper(Vector64`1<sbyte> lower, Vector128`1<short> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogicalRoundedNarrowingSaturateUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogicalRoundedNarrowingSaturateUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> value, byte count);
    public static Vector128`1<byte> ShiftRightLogicalRoundedNarrowingUpper(Vector64`1<byte> lower, Vector128`1<ushort> value, byte count);
    public static Vector128`1<short> ShiftRightLogicalRoundedNarrowingUpper(Vector64`1<short> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftRightLogicalRoundedNarrowingUpper(Vector64`1<int> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogicalRoundedNarrowingUpper(Vector64`1<sbyte> lower, Vector128`1<short> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogicalRoundedNarrowingUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogicalRoundedNarrowingUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> value, byte count);
    public static Vector64`1<long> ShiftRightLogicalRoundedScalar(Vector64`1<long> value, byte count);
    public static Vector64`1<ulong> ShiftRightLogicalRoundedScalar(Vector64`1<ulong> value, byte count);
    public static Vector64`1<long> ShiftRightLogicalScalar(Vector64`1<long> value, byte count);
    public static Vector64`1<ulong> ShiftRightLogicalScalar(Vector64`1<ulong> value, byte count);
    public static Vector128`1<int> SignExtendWideningLower(Vector64`1<short> value);
    public static Vector128`1<long> SignExtendWideningLower(Vector64`1<int> value);
    public static Vector128`1<short> SignExtendWideningLower(Vector64`1<sbyte> value);
    public static Vector128`1<int> SignExtendWideningUpper(Vector128`1<short> value);
    public static Vector128`1<long> SignExtendWideningUpper(Vector128`1<int> value);
    public static Vector128`1<short> SignExtendWideningUpper(Vector128`1<sbyte> value);
    public static Vector64`1<double> SqrtScalar(Vector64`1<double> value);
    public static Vector64`1<float> SqrtScalar(Vector64`1<float> value);
    public static void Store(Byte* address, Vector128`1<byte> source);
    public static void Store(Byte* address, Vector64`1<byte> source);
    public static void Store(Double* address, Vector128`1<double> source);
    public static void Store(Double* address, Vector64`1<double> source);
    public static void Store(Int16* address, Vector128`1<short> source);
    public static void Store(Int16* address, Vector64`1<short> source);
    public static void Store(Int32* address, Vector128`1<int> source);
    public static void Store(Int32* address, Vector64`1<int> source);
    public static void Store(Int64* address, Vector128`1<long> source);
    public static void Store(Int64* address, Vector64`1<long> source);
    public static void Store(SByte* address, Vector128`1<sbyte> source);
    public static void Store(SByte* address, Vector64`1<sbyte> source);
    public static void Store(Single* address, Vector128`1<float> source);
    public static void Store(Single* address, Vector64`1<float> source);
    public static void Store(UInt16* address, Vector128`1<ushort> source);
    public static void Store(UInt16* address, Vector64`1<ushort> source);
    public static void Store(UInt32* address, Vector128`1<UInt32> source);
    public static void Store(UInt32* address, Vector64`1<UInt32> source);
    public static void Store(UInt64* address, Vector128`1<ulong> source);
    public static void Store(UInt64* address, Vector64`1<ulong> source);
    public static void StoreSelectedScalar(Byte* address, Vector128`1<byte> value, byte index);
    public static void StoreSelectedScalar(Byte* address, Vector64`1<byte> value, byte index);
    public static void StoreSelectedScalar(Double* address, Vector128`1<double> value, byte index);
    public static void StoreSelectedScalar(Int16* address, Vector128`1<short> value, byte index);
    public static void StoreSelectedScalar(Int16* address, Vector64`1<short> value, byte index);
    public static void StoreSelectedScalar(Int32* address, Vector128`1<int> value, byte index);
    public static void StoreSelectedScalar(Int32* address, Vector64`1<int> value, byte index);
    public static void StoreSelectedScalar(Int64* address, Vector128`1<long> value, byte index);
    public static void StoreSelectedScalar(SByte* address, Vector128`1<sbyte> value, byte index);
    public static void StoreSelectedScalar(SByte* address, Vector64`1<sbyte> value, byte index);
    public static void StoreSelectedScalar(Single* address, Vector128`1<float> value, byte index);
    public static void StoreSelectedScalar(Single* address, Vector64`1<float> value, byte index);
    public static void StoreSelectedScalar(UInt16* address, Vector128`1<ushort> value, byte index);
    public static void StoreSelectedScalar(UInt16* address, Vector64`1<ushort> value, byte index);
    public static void StoreSelectedScalar(UInt32* address, Vector128`1<UInt32> value, byte index);
    public static void StoreSelectedScalar(UInt32* address, Vector64`1<UInt32> value, byte index);
    public static void StoreSelectedScalar(UInt64* address, Vector128`1<ulong> value, byte index);
    public static Vector128`1<byte> Subtract(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Subtract(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Subtract(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> Subtract(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> Subtract(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> Subtract(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> Subtract(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Subtract(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> Subtract(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> Subtract(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> Subtract(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> Subtract(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> Subtract(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> Subtract(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> Subtract(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> Subtract(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<sbyte> SubtractHighNarrowingLower(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector64`1<short> SubtractHighNarrowingLower(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector64`1<int> SubtractHighNarrowingLower(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector64`1<byte> SubtractHighNarrowingLower(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector64`1<ushort> SubtractHighNarrowingLower(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<UInt32> SubtractHighNarrowingLower(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> SubtractHighNarrowingUpper(Vector64`1<byte> lower, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<short> SubtractHighNarrowingUpper(Vector64`1<short> lower, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> SubtractHighNarrowingUpper(Vector64`1<int> lower, Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> SubtractHighNarrowingUpper(Vector64`1<sbyte> lower, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> SubtractHighNarrowingUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<UInt32> SubtractHighNarrowingUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<sbyte> SubtractRoundedHighNarrowingLower(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector64`1<short> SubtractRoundedHighNarrowingLower(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector64`1<int> SubtractRoundedHighNarrowingLower(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector64`1<byte> SubtractRoundedHighNarrowingLower(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector64`1<ushort> SubtractRoundedHighNarrowingLower(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<UInt32> SubtractRoundedHighNarrowingLower(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> SubtractRoundedHighNarrowingUpper(Vector64`1<byte> lower, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<short> SubtractRoundedHighNarrowingUpper(Vector64`1<short> lower, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> SubtractRoundedHighNarrowingUpper(Vector64`1<int> lower, Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> SubtractRoundedHighNarrowingUpper(Vector64`1<sbyte> lower, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> SubtractRoundedHighNarrowingUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<UInt32> SubtractRoundedHighNarrowingUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> SubtractSaturate(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> SubtractSaturate(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> SubtractSaturate(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> SubtractSaturate(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> SubtractSaturate(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> SubtractSaturate(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> SubtractSaturate(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> SubtractSaturate(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> SubtractSaturate(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> SubtractSaturate(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> SubtractSaturate(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> SubtractSaturate(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> SubtractSaturate(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> SubtractSaturate(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<long> SubtractSaturateScalar(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<ulong> SubtractSaturateScalar(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector64`1<double> SubtractScalar(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<long> SubtractScalar(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<float> SubtractScalar(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ulong> SubtractScalar(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<short> SubtractWideningLower(Vector128`1<short> left, Vector64`1<sbyte> right);
    public static Vector128`1<int> SubtractWideningLower(Vector128`1<int> left, Vector64`1<short> right);
    public static Vector128`1<long> SubtractWideningLower(Vector128`1<long> left, Vector64`1<int> right);
    public static Vector128`1<ushort> SubtractWideningLower(Vector128`1<ushort> left, Vector64`1<byte> right);
    public static Vector128`1<UInt32> SubtractWideningLower(Vector128`1<UInt32> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> SubtractWideningLower(Vector128`1<ulong> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> SubtractWideningLower(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<int> SubtractWideningLower(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> SubtractWideningLower(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> SubtractWideningLower(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<UInt32> SubtractWideningLower(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> SubtractWideningLower(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> SubtractWideningUpper(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<int> SubtractWideningUpper(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<short> SubtractWideningUpper(Vector128`1<short> left, Vector128`1<sbyte> right);
    public static Vector128`1<int> SubtractWideningUpper(Vector128`1<int> left, Vector128`1<short> right);
    public static Vector128`1<long> SubtractWideningUpper(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> SubtractWideningUpper(Vector128`1<long> left, Vector128`1<int> right);
    public static Vector128`1<short> SubtractWideningUpper(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> SubtractWideningUpper(Vector128`1<ushort> left, Vector128`1<byte> right);
    public static Vector128`1<UInt32> SubtractWideningUpper(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> SubtractWideningUpper(Vector128`1<UInt32> left, Vector128`1<ushort> right);
    public static Vector128`1<ulong> SubtractWideningUpper(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> SubtractWideningUpper(Vector128`1<ulong> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> VectorTableLookup(Vector128`1<byte> table, Vector64`1<byte> byteIndexes);
    public static Vector64`1<sbyte> VectorTableLookup(Vector128`1<sbyte> table, Vector64`1<sbyte> byteIndexes);
    public static Vector64`1<byte> VectorTableLookup(ValueTuple`2<Vector128`1<byte>, Vector128`1<byte>> table, Vector64`1<byte> byteIndexes);
    public static Vector64`1<sbyte> VectorTableLookup(ValueTuple`2<Vector128`1<sbyte>, Vector128`1<sbyte>> table, Vector64`1<sbyte> byteIndexes);
    public static Vector64`1<byte> VectorTableLookup(ValueTuple`3<Vector128`1<byte>, Vector128`1<byte>, Vector128`1<byte>> table, Vector64`1<byte> byteIndexes);
    public static Vector64`1<sbyte> VectorTableLookup(ValueTuple`3<Vector128`1<sbyte>, Vector128`1<sbyte>, Vector128`1<sbyte>> table, Vector64`1<sbyte> byteIndexes);
    public static Vector64`1<byte> VectorTableLookup(ValueTuple`4<Vector128`1<byte>, Vector128`1<byte>, Vector128`1<byte>, Vector128`1<byte>> table, Vector64`1<byte> byteIndexes);
    public static Vector64`1<sbyte> VectorTableLookup(ValueTuple`4<Vector128`1<sbyte>, Vector128`1<sbyte>, Vector128`1<sbyte>, Vector128`1<sbyte>> table, Vector64`1<sbyte> byteIndexes);
    public static Vector64`1<byte> VectorTableLookupExtension(Vector64`1<byte> defaultValues, Vector128`1<byte> table, Vector64`1<byte> byteIndexes);
    public static Vector64`1<sbyte> VectorTableLookupExtension(Vector64`1<sbyte> defaultValues, Vector128`1<sbyte> table, Vector64`1<sbyte> byteIndexes);
    public static Vector64`1<byte> VectorTableLookupExtension(Vector64`1<byte> defaultValues, ValueTuple`2<Vector128`1<byte>, Vector128`1<byte>> table, Vector64`1<byte> byteIndexes);
    public static Vector64`1<sbyte> VectorTableLookupExtension(Vector64`1<sbyte> defaultValues, ValueTuple`2<Vector128`1<sbyte>, Vector128`1<sbyte>> table, Vector64`1<sbyte> byteIndexes);
    public static Vector64`1<byte> VectorTableLookupExtension(Vector64`1<byte> defaultValues, ValueTuple`3<Vector128`1<byte>, Vector128`1<byte>, Vector128`1<byte>> table, Vector64`1<byte> byteIndexes);
    public static Vector64`1<sbyte> VectorTableLookupExtension(Vector64`1<sbyte> defaultValues, ValueTuple`3<Vector128`1<sbyte>, Vector128`1<sbyte>, Vector128`1<sbyte>> table, Vector64`1<sbyte> byteIndexes);
    public static Vector64`1<byte> VectorTableLookupExtension(Vector64`1<byte> defaultValues, ValueTuple`4<Vector128`1<byte>, Vector128`1<byte>, Vector128`1<byte>, Vector128`1<byte>> table, Vector64`1<byte> byteIndexes);
    public static Vector64`1<sbyte> VectorTableLookupExtension(Vector64`1<sbyte> defaultValues, ValueTuple`4<Vector128`1<sbyte>, Vector128`1<sbyte>, Vector128`1<sbyte>, Vector128`1<sbyte>> table, Vector64`1<sbyte> byteIndexes);
    public static Vector128`1<byte> Xor(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> Xor(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> Xor(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Xor(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> Xor(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> Xor(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> Xor(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> Xor(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Xor(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> Xor(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> Xor(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<double> Xor(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<short> Xor(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> Xor(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<long> Xor(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<sbyte> Xor(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> Xor(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> Xor(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> Xor(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<ulong> Xor(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<ushort> ZeroExtendWideningLower(Vector64`1<byte> value);
    public static Vector128`1<int> ZeroExtendWideningLower(Vector64`1<short> value);
    public static Vector128`1<long> ZeroExtendWideningLower(Vector64`1<int> value);
    public static Vector128`1<short> ZeroExtendWideningLower(Vector64`1<sbyte> value);
    public static Vector128`1<UInt32> ZeroExtendWideningLower(Vector64`1<ushort> value);
    public static Vector128`1<ulong> ZeroExtendWideningLower(Vector64`1<UInt32> value);
    public static Vector128`1<ushort> ZeroExtendWideningUpper(Vector128`1<byte> value);
    public static Vector128`1<int> ZeroExtendWideningUpper(Vector128`1<short> value);
    public static Vector128`1<long> ZeroExtendWideningUpper(Vector128`1<int> value);
    public static Vector128`1<short> ZeroExtendWideningUpper(Vector128`1<sbyte> value);
    public static Vector128`1<UInt32> ZeroExtendWideningUpper(Vector128`1<ushort> value);
    public static Vector128`1<ulong> ZeroExtendWideningUpper(Vector128`1<UInt32> value);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.Arm.Aes : ArmBase {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<byte> Decrypt(Vector128`1<byte> value, Vector128`1<byte> roundKey);
    public static Vector128`1<byte> Encrypt(Vector128`1<byte> value, Vector128`1<byte> roundKey);
    public static Vector128`1<byte> InverseMixColumns(Vector128`1<byte> value);
    public static Vector128`1<byte> MixColumns(Vector128`1<byte> value);
    public static Vector128`1<long> PolynomialMultiplyWideningLower(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector128`1<ulong> PolynomialMultiplyWideningLower(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<long> PolynomialMultiplyWideningUpper(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> PolynomialMultiplyWideningUpper(Vector128`1<ulong> left, Vector128`1<ulong> right);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.Arm.ArmBase : object {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static int LeadingZeroCount(int value);
    public static int LeadingZeroCount(UInt32 value);
    public static int ReverseElementBits(int value);
    public static UInt32 ReverseElementBits(UInt32 value);
    public static void Yield();
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.Arm.Crc32 : ArmBase {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static UInt32 ComputeCrc32(UInt32 crc, byte data);
    public static UInt32 ComputeCrc32(UInt32 crc, ushort data);
    public static UInt32 ComputeCrc32(UInt32 crc, UInt32 data);
    public static UInt32 ComputeCrc32C(UInt32 crc, byte data);
    public static UInt32 ComputeCrc32C(UInt32 crc, ushort data);
    public static UInt32 ComputeCrc32C(UInt32 crc, UInt32 data);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.Arm.Dp : AdvSimd {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<int> DotProduct(Vector128`1<int> addend, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<UInt32> DotProduct(Vector128`1<UInt32> addend, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector64`1<int> DotProduct(Vector64`1<int> addend, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<UInt32> DotProduct(Vector64`1<UInt32> addend, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<int> DotProductBySelectedQuadruplet(Vector128`1<int> addend, Vector128`1<sbyte> left, Vector128`1<sbyte> right, byte rightScaledIndex);
    public static Vector128`1<int> DotProductBySelectedQuadruplet(Vector128`1<int> addend, Vector128`1<sbyte> left, Vector64`1<sbyte> right, byte rightScaledIndex);
    public static Vector128`1<UInt32> DotProductBySelectedQuadruplet(Vector128`1<UInt32> addend, Vector128`1<byte> left, Vector128`1<byte> right, byte rightScaledIndex);
    public static Vector128`1<UInt32> DotProductBySelectedQuadruplet(Vector128`1<UInt32> addend, Vector128`1<byte> left, Vector64`1<byte> right, byte rightScaledIndex);
    public static Vector64`1<int> DotProductBySelectedQuadruplet(Vector64`1<int> addend, Vector64`1<sbyte> left, Vector128`1<sbyte> right, byte rightScaledIndex);
    public static Vector64`1<int> DotProductBySelectedQuadruplet(Vector64`1<int> addend, Vector64`1<sbyte> left, Vector64`1<sbyte> right, byte rightScaledIndex);
    public static Vector64`1<UInt32> DotProductBySelectedQuadruplet(Vector64`1<UInt32> addend, Vector64`1<byte> left, Vector128`1<byte> right, byte rightScaledIndex);
    public static Vector64`1<UInt32> DotProductBySelectedQuadruplet(Vector64`1<UInt32> addend, Vector64`1<byte> left, Vector64`1<byte> right, byte rightScaledIndex);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.Arm.Rdm : AdvSimd {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<short> MultiplyRoundedDoublingAndAddSaturateHigh(Vector128`1<short> addend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> MultiplyRoundedDoublingAndAddSaturateHigh(Vector128`1<int> addend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector64`1<short> MultiplyRoundedDoublingAndAddSaturateHigh(Vector64`1<short> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyRoundedDoublingAndAddSaturateHigh(Vector64`1<int> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> MultiplyRoundedDoublingAndSubtractSaturateHigh(Vector128`1<short> minuend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> MultiplyRoundedDoublingAndSubtractSaturateHigh(Vector128`1<int> minuend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector64`1<short> MultiplyRoundedDoublingAndSubtractSaturateHigh(Vector64`1<short> minuend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyRoundedDoublingAndSubtractSaturateHigh(Vector64`1<int> minuend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(Vector128`1<short> addend, Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<short> MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(Vector128`1<short> addend, Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(Vector128`1<int> addend, Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(Vector128`1<int> addend, Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector64`1<short> MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(Vector64`1<short> addend, Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector64`1<short> MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(Vector64`1<short> addend, Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector64`1<int> MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(Vector64`1<int> addend, Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector64`1<int> MultiplyRoundedDoublingBySelectedScalarAndAddSaturateHigh(Vector64`1<int> addend, Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<short> MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(Vector128`1<short> minuend, Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<short> MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(Vector128`1<short> minuend, Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(Vector128`1<int> minuend, Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(Vector128`1<int> minuend, Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector64`1<short> MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(Vector64`1<short> minuend, Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector64`1<short> MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(Vector64`1<short> minuend, Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector64`1<int> MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(Vector64`1<int> minuend, Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector64`1<int> MultiplyRoundedDoublingBySelectedScalarAndSubtractSaturateHigh(Vector64`1<int> minuend, Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.Arm.Sha1 : ArmBase {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector64`1<UInt32> FixedRotate(Vector64`1<UInt32> hash_e);
    public static Vector128`1<UInt32> HashUpdateChoose(Vector128`1<UInt32> hash_abcd, Vector64`1<UInt32> hash_e, Vector128`1<UInt32> wk);
    public static Vector128`1<UInt32> HashUpdateMajority(Vector128`1<UInt32> hash_abcd, Vector64`1<UInt32> hash_e, Vector128`1<UInt32> wk);
    public static Vector128`1<UInt32> HashUpdateParity(Vector128`1<UInt32> hash_abcd, Vector64`1<UInt32> hash_e, Vector128`1<UInt32> wk);
    public static Vector128`1<UInt32> ScheduleUpdate0(Vector128`1<UInt32> w0_3, Vector128`1<UInt32> w4_7, Vector128`1<UInt32> w8_11);
    public static Vector128`1<UInt32> ScheduleUpdate1(Vector128`1<UInt32> tw0_3, Vector128`1<UInt32> w12_15);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.Arm.Sha256 : ArmBase {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<UInt32> HashUpdate1(Vector128`1<UInt32> hash_abcd, Vector128`1<UInt32> hash_efgh, Vector128`1<UInt32> wk);
    public static Vector128`1<UInt32> HashUpdate2(Vector128`1<UInt32> hash_efgh, Vector128`1<UInt32> hash_abcd, Vector128`1<UInt32> wk);
    public static Vector128`1<UInt32> ScheduleUpdate0(Vector128`1<UInt32> w0_3, Vector128`1<UInt32> w4_7);
    public static Vector128`1<UInt32> ScheduleUpdate1(Vector128`1<UInt32> w0_3, Vector128`1<UInt32> w8_11, Vector128`1<UInt32> w12_15);
}
[ExtensionAttribute]
public static class System.Runtime.Intrinsics.Vector128 : object {
    public static bool IsHardwareAccelerated { get; }
    public static bool get_IsHardwareAccelerated();
    [NullableContextAttribute("2")]
public static Vector128`1<T> Abs(Vector128`1<T> vector);
    [NullableContextAttribute("2")]
public static Vector128`1<T> Add(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static Vector128`1<T> AndNot(Vector128`1<T> left, Vector128`1<T> right);
    [ExtensionAttribute]
public static Vector128`1<byte> AsByte(Vector128`1<T> vector);
    [ExtensionAttribute]
public static Vector128`1<double> AsDouble(Vector128`1<T> vector);
    [ExtensionAttribute]
public static Vector128`1<short> AsInt16(Vector128`1<T> vector);
    [ExtensionAttribute]
public static Vector128`1<int> AsInt32(Vector128`1<T> vector);
    [ExtensionAttribute]
public static Vector128`1<long> AsInt64(Vector128`1<T> vector);
    [ExtensionAttribute]
public static Vector128`1<IntPtr> AsNInt(Vector128`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector128`1<UIntPtr> AsNUInt(Vector128`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector128`1<sbyte> AsSByte(Vector128`1<T> vector);
    [ExtensionAttribute]
public static Vector128`1<float> AsSingle(Vector128`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector128`1<ushort> AsUInt16(Vector128`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector128`1<UInt32> AsUInt32(Vector128`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector128`1<ulong> AsUInt64(Vector128`1<T> vector);
    [ExtensionAttribute]
public static Vector128`1<float> AsVector128(Vector2 value);
    [ExtensionAttribute]
public static Vector128`1<float> AsVector128(Vector3 value);
    [ExtensionAttribute]
public static Vector128`1<float> AsVector128(Vector4 value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector128`1<T> AsVector128(Vector`1<T> value);
    [ExtensionAttribute]
public static Vector2 AsVector2(Vector128`1<float> value);
    [ExtensionAttribute]
public static Vector3 AsVector3(Vector128`1<float> value);
    [ExtensionAttribute]
public static Vector4 AsVector4(Vector128`1<float> value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector`1<T> AsVector(Vector128`1<T> value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector128`1<TTo> As(Vector128`1<TFrom> vector);
    [NullableContextAttribute("2")]
public static Vector128`1<T> BitwiseAnd(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static Vector128`1<T> BitwiseOr(Vector128`1<T> left, Vector128`1<T> right);
    public static Vector128`1<double> Ceiling(Vector128`1<double> vector);
    public static Vector128`1<float> Ceiling(Vector128`1<float> vector);
    [NullableContextAttribute("2")]
public static Vector128`1<T> ConditionalSelect(Vector128`1<T> condition, Vector128`1<T> left, Vector128`1<T> right);
    public static Vector128`1<double> ConvertToDouble(Vector128`1<long> vector);
    [CLSCompliantAttribute("False")]
public static Vector128`1<double> ConvertToDouble(Vector128`1<ulong> vector);
    public static Vector128`1<int> ConvertToInt32(Vector128`1<float> vector);
    public static Vector128`1<long> ConvertToInt64(Vector128`1<double> vector);
    public static Vector128`1<float> ConvertToSingle(Vector128`1<int> vector);
    [CLSCompliantAttribute("False")]
public static Vector128`1<float> ConvertToSingle(Vector128`1<UInt32> vector);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UInt32> ConvertToUInt32(Vector128`1<float> vector);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ulong> ConvertToUInt64(Vector128`1<double> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void CopyTo(Vector128`1<T> vector, Span`1<T> destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void CopyTo(Vector128`1<T> vector, T[] destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void CopyTo(Vector128`1<T> vector, T[] destination, int startIndex);
    public static Vector128`1<byte> Create(byte value);
    public static Vector128`1<byte> Create(byte e0, byte e1, byte e2, byte e3, byte e4, byte e5, byte e6, byte e7, byte e8, byte e9, byte e10, byte e11, byte e12, byte e13, byte e14, byte e15);
    public static Vector128`1<double> Create(double value);
    public static Vector128`1<double> Create(double e0, double e1);
    public static Vector128`1<short> Create(short value);
    public static Vector128`1<short> Create(short e0, short e1, short e2, short e3, short e4, short e5, short e6, short e7);
    public static Vector128`1<int> Create(int value);
    public static Vector128`1<int> Create(int e0, int e1, int e2, int e3);
    public static Vector128`1<long> Create(long value);
    public static Vector128`1<long> Create(long e0, long e1);
    public static Vector128`1<IntPtr> Create(IntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UIntPtr> Create(UIntPtr value);
    public static Vector128`1<byte> Create(Vector64`1<byte> lower, Vector64`1<byte> upper);
    public static Vector128`1<double> Create(Vector64`1<double> lower, Vector64`1<double> upper);
    public static Vector128`1<short> Create(Vector64`1<short> lower, Vector64`1<short> upper);
    public static Vector128`1<int> Create(Vector64`1<int> lower, Vector64`1<int> upper);
    public static Vector128`1<long> Create(Vector64`1<long> lower, Vector64`1<long> upper);
    public static Vector128`1<IntPtr> Create(Vector64`1<IntPtr> lower, Vector64`1<IntPtr> upper);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UIntPtr> Create(Vector64`1<UIntPtr> lower, Vector64`1<UIntPtr> upper);
    [CLSCompliantAttribute("False")]
public static Vector128`1<sbyte> Create(Vector64`1<sbyte> lower, Vector64`1<sbyte> upper);
    public static Vector128`1<float> Create(Vector64`1<float> lower, Vector64`1<float> upper);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ushort> Create(Vector64`1<ushort> lower, Vector64`1<ushort> upper);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UInt32> Create(Vector64`1<UInt32> lower, Vector64`1<UInt32> upper);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ulong> Create(Vector64`1<ulong> lower, Vector64`1<ulong> upper);
    [CLSCompliantAttribute("False")]
public static Vector128`1<sbyte> Create(sbyte value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<sbyte> Create(sbyte e0, sbyte e1, sbyte e2, sbyte e3, sbyte e4, sbyte e5, sbyte e6, sbyte e7, sbyte e8, sbyte e9, sbyte e10, sbyte e11, sbyte e12, sbyte e13, sbyte e14, sbyte e15);
    public static Vector128`1<float> Create(float value);
    public static Vector128`1<float> Create(float e0, float e1, float e2, float e3);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ushort> Create(ushort value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ushort> Create(ushort e0, ushort e1, ushort e2, ushort e3, ushort e4, ushort e5, ushort e6, ushort e7);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UInt32> Create(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UInt32> Create(UInt32 e0, UInt32 e1, UInt32 e2, UInt32 e3);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ulong> Create(ulong value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ulong> Create(ulong e0, ulong e1);
    public static Vector128`1<byte> CreateScalar(byte value);
    public static Vector128`1<double> CreateScalar(double value);
    public static Vector128`1<short> CreateScalar(short value);
    public static Vector128`1<int> CreateScalar(int value);
    public static Vector128`1<long> CreateScalar(long value);
    public static Vector128`1<IntPtr> CreateScalar(IntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UIntPtr> CreateScalar(UIntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<sbyte> CreateScalar(sbyte value);
    public static Vector128`1<float> CreateScalar(float value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ushort> CreateScalar(ushort value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UInt32> CreateScalar(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ulong> CreateScalar(ulong value);
    [NullableContextAttribute("1")]
public static Vector128`1<T> CreateScalar(T value);
    public static Vector128`1<byte> CreateScalarUnsafe(byte value);
    public static Vector128`1<double> CreateScalarUnsafe(double value);
    public static Vector128`1<short> CreateScalarUnsafe(short value);
    public static Vector128`1<int> CreateScalarUnsafe(int value);
    public static Vector128`1<long> CreateScalarUnsafe(long value);
    public static Vector128`1<IntPtr> CreateScalarUnsafe(IntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UIntPtr> CreateScalarUnsafe(UIntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<sbyte> CreateScalarUnsafe(sbyte value);
    public static Vector128`1<float> CreateScalarUnsafe(float value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ushort> CreateScalarUnsafe(ushort value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UInt32> CreateScalarUnsafe(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ulong> CreateScalarUnsafe(ulong value);
    [NullableContextAttribute("1")]
public static Vector128`1<T> CreateScalarUnsafe(T value);
    [NullableContextAttribute("2")]
public static Vector128`1<T> Create(ReadOnlySpan`1<T> values);
    [NullableContextAttribute("2")]
public static Vector128`1<T> Create(Vector64`1<T> lower, Vector64`1<T> upper);
    [NullableContextAttribute("1")]
public static Vector128`1<T> Create(T value);
    [NullableContextAttribute("1")]
public static Vector128`1<T> Create(T[] values);
    [NullableContextAttribute("1")]
public static Vector128`1<T> Create(T[] values, int index);
    [NullableContextAttribute("2")]
public static Vector128`1<T> Divide(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("1")]
public static Vector128`1<T> Divide(Vector128`1<T> left, T right);
    [NullableContextAttribute("1")]
public static T Dot(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static bool EqualsAll(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static bool EqualsAny(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static Vector128`1<T> Equals(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static UInt32 ExtractMostSignificantBits(Vector128`1<T> vector);
    public static Vector128`1<double> Floor(Vector128`1<double> vector);
    public static Vector128`1<float> Floor(Vector128`1<float> vector);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T GetElement(Vector128`1<T> vector, int index);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector64`1<T> GetLower(Vector128`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector64`1<T> GetUpper(Vector128`1<T> vector);
    [NullableContextAttribute("2")]
public static bool GreaterThanAll(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static bool GreaterThanAny(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static bool GreaterThanOrEqualAll(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static bool GreaterThanOrEqualAny(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static Vector128`1<T> GreaterThanOrEqual(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static Vector128`1<T> GreaterThan(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanAll(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanAny(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanOrEqualAll(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanOrEqualAny(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static Vector128`1<T> LessThanOrEqual(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static Vector128`1<T> LessThan(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Vector128`1<T> Load(T* source);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Vector128`1<T> LoadAligned(T* source);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Vector128`1<T> LoadAlignedNonTemporal(T* source);
    [NullableContextAttribute("1")]
public static Vector128`1<T> LoadUnsafe(T& source);
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static Vector128`1<T> LoadUnsafe(T& source, UIntPtr elementOffset);
    [NullableContextAttribute("2")]
public static Vector128`1<T> Max(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static Vector128`1<T> Min(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("2")]
public static Vector128`1<T> Multiply(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("1")]
public static Vector128`1<T> Multiply(Vector128`1<T> left, T right);
    [NullableContextAttribute("1")]
public static Vector128`1<T> Multiply(T left, Vector128`1<T> right);
    public static Vector128`1<float> Narrow(Vector128`1<double> lower, Vector128`1<double> upper);
    [CLSCompliantAttribute("False")]
public static Vector128`1<sbyte> Narrow(Vector128`1<short> lower, Vector128`1<short> upper);
    public static Vector128`1<short> Narrow(Vector128`1<int> lower, Vector128`1<int> upper);
    public static Vector128`1<int> Narrow(Vector128`1<long> lower, Vector128`1<long> upper);
    [CLSCompliantAttribute("False")]
public static Vector128`1<byte> Narrow(Vector128`1<ushort> lower, Vector128`1<ushort> upper);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ushort> Narrow(Vector128`1<UInt32> lower, Vector128`1<UInt32> upper);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UInt32> Narrow(Vector128`1<ulong> lower, Vector128`1<ulong> upper);
    [NullableContextAttribute("2")]
public static Vector128`1<T> Negate(Vector128`1<T> vector);
    [NullableContextAttribute("2")]
public static Vector128`1<T> OnesComplement(Vector128`1<T> vector);
    public static Vector128`1<byte> ShiftLeft(Vector128`1<byte> vector, int shiftCount);
    public static Vector128`1<short> ShiftLeft(Vector128`1<short> vector, int shiftCount);
    public static Vector128`1<int> ShiftLeft(Vector128`1<int> vector, int shiftCount);
    public static Vector128`1<long> ShiftLeft(Vector128`1<long> vector, int shiftCount);
    public static Vector128`1<IntPtr> ShiftLeft(Vector128`1<IntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UIntPtr> ShiftLeft(Vector128`1<UIntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector128`1<sbyte> ShiftLeft(Vector128`1<sbyte> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ushort> ShiftLeft(Vector128`1<ushort> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UInt32> ShiftLeft(Vector128`1<UInt32> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ulong> ShiftLeft(Vector128`1<ulong> vector, int shiftCount);
    public static Vector128`1<short> ShiftRightArithmetic(Vector128`1<short> vector, int shiftCount);
    public static Vector128`1<int> ShiftRightArithmetic(Vector128`1<int> vector, int shiftCount);
    public static Vector128`1<long> ShiftRightArithmetic(Vector128`1<long> vector, int shiftCount);
    public static Vector128`1<IntPtr> ShiftRightArithmetic(Vector128`1<IntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector128`1<sbyte> ShiftRightArithmetic(Vector128`1<sbyte> vector, int shiftCount);
    public static Vector128`1<byte> ShiftRightLogical(Vector128`1<byte> vector, int shiftCount);
    public static Vector128`1<short> ShiftRightLogical(Vector128`1<short> vector, int shiftCount);
    public static Vector128`1<int> ShiftRightLogical(Vector128`1<int> vector, int shiftCount);
    public static Vector128`1<long> ShiftRightLogical(Vector128`1<long> vector, int shiftCount);
    public static Vector128`1<IntPtr> ShiftRightLogical(Vector128`1<IntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UIntPtr> ShiftRightLogical(Vector128`1<UIntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector128`1<sbyte> ShiftRightLogical(Vector128`1<sbyte> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ushort> ShiftRightLogical(Vector128`1<ushort> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UInt32> ShiftRightLogical(Vector128`1<UInt32> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ulong> ShiftRightLogical(Vector128`1<ulong> vector, int shiftCount);
    public static Vector128`1<byte> Shuffle(Vector128`1<byte> vector, Vector128`1<byte> indices);
    [CLSCompliantAttribute("False")]
public static Vector128`1<sbyte> Shuffle(Vector128`1<sbyte> vector, Vector128`1<sbyte> indices);
    public static Vector128`1<short> Shuffle(Vector128`1<short> vector, Vector128`1<short> indices);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ushort> Shuffle(Vector128`1<ushort> vector, Vector128`1<ushort> indices);
    public static Vector128`1<int> Shuffle(Vector128`1<int> vector, Vector128`1<int> indices);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UInt32> Shuffle(Vector128`1<UInt32> vector, Vector128`1<UInt32> indices);
    public static Vector128`1<float> Shuffle(Vector128`1<float> vector, Vector128`1<int> indices);
    public static Vector128`1<long> Shuffle(Vector128`1<long> vector, Vector128`1<long> indices);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ulong> Shuffle(Vector128`1<ulong> vector, Vector128`1<ulong> indices);
    public static Vector128`1<double> Shuffle(Vector128`1<double> vector, Vector128`1<long> indices);
    [NullableContextAttribute("2")]
public static Vector128`1<T> Sqrt(Vector128`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void Store(Vector128`1<T> source, T* destination);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void StoreAligned(Vector128`1<T> source, T* destination);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void StoreAlignedNonTemporal(Vector128`1<T> source, T* destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void StoreUnsafe(Vector128`1<T> source, T& destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void StoreUnsafe(Vector128`1<T> source, T& destination, UIntPtr elementOffset);
    [NullableContextAttribute("2")]
public static Vector128`1<T> Subtract(Vector128`1<T> left, Vector128`1<T> right);
    [NullableContextAttribute("1")]
public static T Sum(Vector128`1<T> vector);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T ToScalar(Vector128`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector256`1<T> ToVector256Unsafe(Vector128`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector256`1<T> ToVector256(Vector128`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool TryCopyTo(Vector128`1<T> vector, Span`1<T> destination);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector128`1<ushort>, Vector128`1<ushort>> Widen(Vector128`1<byte> source);
    public static ValueTuple`2<Vector128`1<int>, Vector128`1<int>> Widen(Vector128`1<short> source);
    public static ValueTuple`2<Vector128`1<long>, Vector128`1<long>> Widen(Vector128`1<int> source);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector128`1<short>, Vector128`1<short>> Widen(Vector128`1<sbyte> source);
    public static ValueTuple`2<Vector128`1<double>, Vector128`1<double>> Widen(Vector128`1<float> source);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector128`1<UInt32>, Vector128`1<UInt32>> Widen(Vector128`1<ushort> source);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector128`1<ulong>, Vector128`1<ulong>> Widen(Vector128`1<UInt32> source);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ushort> WidenLower(Vector128`1<byte> source);
    public static Vector128`1<int> WidenLower(Vector128`1<short> source);
    public static Vector128`1<long> WidenLower(Vector128`1<int> source);
    [CLSCompliantAttribute("False")]
public static Vector128`1<short> WidenLower(Vector128`1<sbyte> source);
    public static Vector128`1<double> WidenLower(Vector128`1<float> source);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UInt32> WidenLower(Vector128`1<ushort> source);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ulong> WidenLower(Vector128`1<UInt32> source);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ushort> WidenUpper(Vector128`1<byte> source);
    public static Vector128`1<int> WidenUpper(Vector128`1<short> source);
    public static Vector128`1<long> WidenUpper(Vector128`1<int> source);
    [CLSCompliantAttribute("False")]
public static Vector128`1<short> WidenUpper(Vector128`1<sbyte> source);
    public static Vector128`1<double> WidenUpper(Vector128`1<float> source);
    [CLSCompliantAttribute("False")]
public static Vector128`1<UInt32> WidenUpper(Vector128`1<ushort> source);
    [CLSCompliantAttribute("False")]
public static Vector128`1<ulong> WidenUpper(Vector128`1<UInt32> source);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Vector128`1<T> WithElement(Vector128`1<T> vector, int index, T value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector128`1<T> WithLower(Vector128`1<T> vector, Vector64`1<T> value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector128`1<T> WithUpper(Vector128`1<T> vector, Vector64`1<T> value);
    [NullableContextAttribute("2")]
public static Vector128`1<T> Xor(Vector128`1<T> left, Vector128`1<T> right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class System.Runtime.Intrinsics.Vector128`1 : ValueType {
    private int _dummyPrimitive;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Vector128`1<T> AllBitsSet { get; }
    public static int Count { get; }
    public static bool IsSupported { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Vector128`1<T> One { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Vector128`1<T> Zero { get; }
    public T Item { get; }
    public static Vector128`1<T> get_AllBitsSet();
    public static int get_Count();
    public static bool get_IsSupported();
    public static Vector128`1<T> get_One();
    public static Vector128`1<T> get_Zero();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Vector128`1<T> other);
    public virtual int GetHashCode();
    public T get_Item(int index);
    public static Vector128`1<T> op_Addition(Vector128`1<T> left, Vector128`1<T> right);
    public static Vector128`1<T> op_BitwiseAnd(Vector128`1<T> left, Vector128`1<T> right);
    public static Vector128`1<T> op_BitwiseOr(Vector128`1<T> left, Vector128`1<T> right);
    public static Vector128`1<T> op_Division(Vector128`1<T> left, Vector128`1<T> right);
    public static Vector128`1<T> op_Division(Vector128`1<T> left, T right);
    public static bool op_Equality(Vector128`1<T> left, Vector128`1<T> right);
    public static Vector128`1<T> op_ExclusiveOr(Vector128`1<T> left, Vector128`1<T> right);
    public static bool op_Inequality(Vector128`1<T> left, Vector128`1<T> right);
    public static Vector128`1<T> op_LeftShift(Vector128`1<T> value, int shiftCount);
    public static Vector128`1<T> op_Multiply(Vector128`1<T> left, Vector128`1<T> right);
    public static Vector128`1<T> op_Multiply(Vector128`1<T> left, T right);
    public static Vector128`1<T> op_Multiply(T left, Vector128`1<T> right);
    public static Vector128`1<T> op_OnesComplement(Vector128`1<T> vector);
    public static Vector128`1<T> op_RightShift(Vector128`1<T> value, int shiftCount);
    public static Vector128`1<T> op_Subtraction(Vector128`1<T> left, Vector128`1<T> right);
    public static Vector128`1<T> op_UnaryNegation(Vector128`1<T> vector);
    public static Vector128`1<T> op_UnaryPlus(Vector128`1<T> value);
    public static Vector128`1<T> op_UnsignedRightShift(Vector128`1<T> value, int shiftCount);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class System.Runtime.Intrinsics.Vector256 : object {
    public static bool IsHardwareAccelerated { get; }
    public static bool get_IsHardwareAccelerated();
    [NullableContextAttribute("2")]
public static Vector256`1<T> Abs(Vector256`1<T> vector);
    [NullableContextAttribute("2")]
public static Vector256`1<T> Add(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static Vector256`1<T> AndNot(Vector256`1<T> left, Vector256`1<T> right);
    [ExtensionAttribute]
public static Vector256`1<byte> AsByte(Vector256`1<T> vector);
    [ExtensionAttribute]
public static Vector256`1<double> AsDouble(Vector256`1<T> vector);
    [ExtensionAttribute]
public static Vector256`1<short> AsInt16(Vector256`1<T> vector);
    [ExtensionAttribute]
public static Vector256`1<int> AsInt32(Vector256`1<T> vector);
    [ExtensionAttribute]
public static Vector256`1<long> AsInt64(Vector256`1<T> vector);
    [ExtensionAttribute]
public static Vector256`1<IntPtr> AsNInt(Vector256`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector256`1<UIntPtr> AsNUInt(Vector256`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector256`1<sbyte> AsSByte(Vector256`1<T> vector);
    [ExtensionAttribute]
public static Vector256`1<float> AsSingle(Vector256`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector256`1<ushort> AsUInt16(Vector256`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector256`1<UInt32> AsUInt32(Vector256`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector256`1<ulong> AsUInt64(Vector256`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector256`1<T> AsVector256(Vector`1<T> value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector`1<T> AsVector(Vector256`1<T> value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector256`1<TTo> As(Vector256`1<TFrom> vector);
    [NullableContextAttribute("2")]
public static Vector256`1<T> BitwiseAnd(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static Vector256`1<T> BitwiseOr(Vector256`1<T> left, Vector256`1<T> right);
    public static Vector256`1<double> Ceiling(Vector256`1<double> vector);
    public static Vector256`1<float> Ceiling(Vector256`1<float> vector);
    [NullableContextAttribute("2")]
public static Vector256`1<T> ConditionalSelect(Vector256`1<T> condition, Vector256`1<T> left, Vector256`1<T> right);
    public static Vector256`1<double> ConvertToDouble(Vector256`1<long> vector);
    [CLSCompliantAttribute("False")]
public static Vector256`1<double> ConvertToDouble(Vector256`1<ulong> vector);
    public static Vector256`1<int> ConvertToInt32(Vector256`1<float> vector);
    public static Vector256`1<long> ConvertToInt64(Vector256`1<double> vector);
    public static Vector256`1<float> ConvertToSingle(Vector256`1<int> vector);
    [CLSCompliantAttribute("False")]
public static Vector256`1<float> ConvertToSingle(Vector256`1<UInt32> vector);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UInt32> ConvertToUInt32(Vector256`1<float> vector);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ulong> ConvertToUInt64(Vector256`1<double> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void CopyTo(Vector256`1<T> vector, Span`1<T> destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void CopyTo(Vector256`1<T> vector, T[] destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void CopyTo(Vector256`1<T> vector, T[] destination, int startIndex);
    public static Vector256`1<byte> Create(byte value);
    public static Vector256`1<byte> Create(byte e0, byte e1, byte e2, byte e3, byte e4, byte e5, byte e6, byte e7, byte e8, byte e9, byte e10, byte e11, byte e12, byte e13, byte e14, byte e15, byte e16, byte e17, byte e18, byte e19, byte e20, byte e21, byte e22, byte e23, byte e24, byte e25, byte e26, byte e27, byte e28, byte e29, byte e30, byte e31);
    public static Vector256`1<double> Create(double value);
    public static Vector256`1<double> Create(double e0, double e1, double e2, double e3);
    public static Vector256`1<short> Create(short value);
    public static Vector256`1<short> Create(short e0, short e1, short e2, short e3, short e4, short e5, short e6, short e7, short e8, short e9, short e10, short e11, short e12, short e13, short e14, short e15);
    public static Vector256`1<int> Create(int value);
    public static Vector256`1<int> Create(int e0, int e1, int e2, int e3, int e4, int e5, int e6, int e7);
    public static Vector256`1<long> Create(long value);
    public static Vector256`1<long> Create(long e0, long e1, long e2, long e3);
    public static Vector256`1<IntPtr> Create(IntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UIntPtr> Create(UIntPtr value);
    public static Vector256`1<byte> Create(Vector128`1<byte> lower, Vector128`1<byte> upper);
    public static Vector256`1<double> Create(Vector128`1<double> lower, Vector128`1<double> upper);
    public static Vector256`1<short> Create(Vector128`1<short> lower, Vector128`1<short> upper);
    public static Vector256`1<int> Create(Vector128`1<int> lower, Vector128`1<int> upper);
    public static Vector256`1<long> Create(Vector128`1<long> lower, Vector128`1<long> upper);
    public static Vector256`1<IntPtr> Create(Vector128`1<IntPtr> lower, Vector128`1<IntPtr> upper);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UIntPtr> Create(Vector128`1<UIntPtr> lower, Vector128`1<UIntPtr> upper);
    [CLSCompliantAttribute("False")]
public static Vector256`1<sbyte> Create(Vector128`1<sbyte> lower, Vector128`1<sbyte> upper);
    public static Vector256`1<float> Create(Vector128`1<float> lower, Vector128`1<float> upper);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ushort> Create(Vector128`1<ushort> lower, Vector128`1<ushort> upper);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UInt32> Create(Vector128`1<UInt32> lower, Vector128`1<UInt32> upper);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ulong> Create(Vector128`1<ulong> lower, Vector128`1<ulong> upper);
    [CLSCompliantAttribute("False")]
public static Vector256`1<sbyte> Create(sbyte value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<sbyte> Create(sbyte e0, sbyte e1, sbyte e2, sbyte e3, sbyte e4, sbyte e5, sbyte e6, sbyte e7, sbyte e8, sbyte e9, sbyte e10, sbyte e11, sbyte e12, sbyte e13, sbyte e14, sbyte e15, sbyte e16, sbyte e17, sbyte e18, sbyte e19, sbyte e20, sbyte e21, sbyte e22, sbyte e23, sbyte e24, sbyte e25, sbyte e26, sbyte e27, sbyte e28, sbyte e29, sbyte e30, sbyte e31);
    public static Vector256`1<float> Create(float value);
    public static Vector256`1<float> Create(float e0, float e1, float e2, float e3, float e4, float e5, float e6, float e7);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ushort> Create(ushort value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ushort> Create(ushort e0, ushort e1, ushort e2, ushort e3, ushort e4, ushort e5, ushort e6, ushort e7, ushort e8, ushort e9, ushort e10, ushort e11, ushort e12, ushort e13, ushort e14, ushort e15);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UInt32> Create(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UInt32> Create(UInt32 e0, UInt32 e1, UInt32 e2, UInt32 e3, UInt32 e4, UInt32 e5, UInt32 e6, UInt32 e7);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ulong> Create(ulong value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ulong> Create(ulong e0, ulong e1, ulong e2, ulong e3);
    public static Vector256`1<byte> CreateScalar(byte value);
    public static Vector256`1<double> CreateScalar(double value);
    public static Vector256`1<short> CreateScalar(short value);
    public static Vector256`1<int> CreateScalar(int value);
    public static Vector256`1<long> CreateScalar(long value);
    public static Vector256`1<IntPtr> CreateScalar(IntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UIntPtr> CreateScalar(UIntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<sbyte> CreateScalar(sbyte value);
    public static Vector256`1<float> CreateScalar(float value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ushort> CreateScalar(ushort value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UInt32> CreateScalar(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ulong> CreateScalar(ulong value);
    [NullableContextAttribute("1")]
public static Vector256`1<T> CreateScalar(T value);
    public static Vector256`1<byte> CreateScalarUnsafe(byte value);
    public static Vector256`1<double> CreateScalarUnsafe(double value);
    public static Vector256`1<short> CreateScalarUnsafe(short value);
    public static Vector256`1<int> CreateScalarUnsafe(int value);
    public static Vector256`1<long> CreateScalarUnsafe(long value);
    public static Vector256`1<IntPtr> CreateScalarUnsafe(IntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UIntPtr> CreateScalarUnsafe(UIntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<sbyte> CreateScalarUnsafe(sbyte value);
    public static Vector256`1<float> CreateScalarUnsafe(float value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ushort> CreateScalarUnsafe(ushort value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UInt32> CreateScalarUnsafe(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ulong> CreateScalarUnsafe(ulong value);
    [NullableContextAttribute("1")]
public static Vector256`1<T> CreateScalarUnsafe(T value);
    [NullableContextAttribute("2")]
public static Vector256`1<T> Create(ReadOnlySpan`1<T> values);
    [NullableContextAttribute("2")]
public static Vector256`1<T> Create(Vector128`1<T> lower, Vector128`1<T> upper);
    [NullableContextAttribute("1")]
public static Vector256`1<T> Create(T value);
    [NullableContextAttribute("1")]
public static Vector256`1<T> Create(T[] values);
    [NullableContextAttribute("1")]
public static Vector256`1<T> Create(T[] values, int index);
    [NullableContextAttribute("2")]
public static Vector256`1<T> Divide(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("1")]
public static Vector256`1<T> Divide(Vector256`1<T> left, T right);
    [NullableContextAttribute("1")]
public static T Dot(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static bool EqualsAll(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static bool EqualsAny(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static Vector256`1<T> Equals(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static UInt32 ExtractMostSignificantBits(Vector256`1<T> vector);
    public static Vector256`1<double> Floor(Vector256`1<double> vector);
    public static Vector256`1<float> Floor(Vector256`1<float> vector);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T GetElement(Vector256`1<T> vector, int index);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector128`1<T> GetLower(Vector256`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector128`1<T> GetUpper(Vector256`1<T> vector);
    [NullableContextAttribute("2")]
public static bool GreaterThanAll(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static bool GreaterThanAny(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static bool GreaterThanOrEqualAll(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static bool GreaterThanOrEqualAny(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static Vector256`1<T> GreaterThanOrEqual(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static Vector256`1<T> GreaterThan(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanAll(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanAny(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanOrEqualAll(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanOrEqualAny(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static Vector256`1<T> LessThanOrEqual(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static Vector256`1<T> LessThan(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Vector256`1<T> Load(T* source);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Vector256`1<T> LoadAligned(T* source);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Vector256`1<T> LoadAlignedNonTemporal(T* source);
    [NullableContextAttribute("1")]
public static Vector256`1<T> LoadUnsafe(T& source);
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static Vector256`1<T> LoadUnsafe(T& source, UIntPtr elementOffset);
    [NullableContextAttribute("2")]
public static Vector256`1<T> Max(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static Vector256`1<T> Min(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("2")]
public static Vector256`1<T> Multiply(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("1")]
public static Vector256`1<T> Multiply(Vector256`1<T> left, T right);
    [NullableContextAttribute("1")]
public static Vector256`1<T> Multiply(T left, Vector256`1<T> right);
    public static Vector256`1<float> Narrow(Vector256`1<double> lower, Vector256`1<double> upper);
    [CLSCompliantAttribute("False")]
public static Vector256`1<sbyte> Narrow(Vector256`1<short> lower, Vector256`1<short> upper);
    public static Vector256`1<short> Narrow(Vector256`1<int> lower, Vector256`1<int> upper);
    public static Vector256`1<int> Narrow(Vector256`1<long> lower, Vector256`1<long> upper);
    [CLSCompliantAttribute("False")]
public static Vector256`1<byte> Narrow(Vector256`1<ushort> lower, Vector256`1<ushort> upper);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ushort> Narrow(Vector256`1<UInt32> lower, Vector256`1<UInt32> upper);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UInt32> Narrow(Vector256`1<ulong> lower, Vector256`1<ulong> upper);
    [NullableContextAttribute("2")]
public static Vector256`1<T> Negate(Vector256`1<T> vector);
    [NullableContextAttribute("2")]
public static Vector256`1<T> OnesComplement(Vector256`1<T> vector);
    public static Vector256`1<byte> ShiftLeft(Vector256`1<byte> vector, int shiftCount);
    public static Vector256`1<short> ShiftLeft(Vector256`1<short> vector, int shiftCount);
    public static Vector256`1<int> ShiftLeft(Vector256`1<int> vector, int shiftCount);
    public static Vector256`1<long> ShiftLeft(Vector256`1<long> vector, int shiftCount);
    public static Vector256`1<IntPtr> ShiftLeft(Vector256`1<IntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UIntPtr> ShiftLeft(Vector256`1<UIntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector256`1<sbyte> ShiftLeft(Vector256`1<sbyte> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ushort> ShiftLeft(Vector256`1<ushort> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UInt32> ShiftLeft(Vector256`1<UInt32> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ulong> ShiftLeft(Vector256`1<ulong> vector, int shiftCount);
    public static Vector256`1<short> ShiftRightArithmetic(Vector256`1<short> vector, int shiftCount);
    public static Vector256`1<int> ShiftRightArithmetic(Vector256`1<int> vector, int shiftCount);
    public static Vector256`1<long> ShiftRightArithmetic(Vector256`1<long> vector, int shiftCount);
    public static Vector256`1<IntPtr> ShiftRightArithmetic(Vector256`1<IntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector256`1<sbyte> ShiftRightArithmetic(Vector256`1<sbyte> vector, int shiftCount);
    public static Vector256`1<byte> ShiftRightLogical(Vector256`1<byte> vector, int shiftCount);
    public static Vector256`1<short> ShiftRightLogical(Vector256`1<short> vector, int shiftCount);
    public static Vector256`1<int> ShiftRightLogical(Vector256`1<int> vector, int shiftCount);
    public static Vector256`1<long> ShiftRightLogical(Vector256`1<long> vector, int shiftCount);
    public static Vector256`1<IntPtr> ShiftRightLogical(Vector256`1<IntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UIntPtr> ShiftRightLogical(Vector256`1<UIntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector256`1<sbyte> ShiftRightLogical(Vector256`1<sbyte> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ushort> ShiftRightLogical(Vector256`1<ushort> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UInt32> ShiftRightLogical(Vector256`1<UInt32> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ulong> ShiftRightLogical(Vector256`1<ulong> vector, int shiftCount);
    public static Vector256`1<byte> Shuffle(Vector256`1<byte> vector, Vector256`1<byte> indices);
    [CLSCompliantAttribute("False")]
public static Vector256`1<sbyte> Shuffle(Vector256`1<sbyte> vector, Vector256`1<sbyte> indices);
    public static Vector256`1<short> Shuffle(Vector256`1<short> vector, Vector256`1<short> indices);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ushort> Shuffle(Vector256`1<ushort> vector, Vector256`1<ushort> indices);
    public static Vector256`1<int> Shuffle(Vector256`1<int> vector, Vector256`1<int> indices);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UInt32> Shuffle(Vector256`1<UInt32> vector, Vector256`1<UInt32> indices);
    public static Vector256`1<float> Shuffle(Vector256`1<float> vector, Vector256`1<int> indices);
    public static Vector256`1<long> Shuffle(Vector256`1<long> vector, Vector256`1<long> indices);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ulong> Shuffle(Vector256`1<ulong> vector, Vector256`1<ulong> indices);
    public static Vector256`1<double> Shuffle(Vector256`1<double> vector, Vector256`1<long> indices);
    [NullableContextAttribute("2")]
public static Vector256`1<T> Sqrt(Vector256`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void Store(Vector256`1<T> source, T* destination);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void StoreAligned(Vector256`1<T> source, T* destination);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void StoreAlignedNonTemporal(Vector256`1<T> source, T* destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void StoreUnsafe(Vector256`1<T> source, T& destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void StoreUnsafe(Vector256`1<T> source, T& destination, UIntPtr elementOffset);
    [NullableContextAttribute("2")]
public static Vector256`1<T> Subtract(Vector256`1<T> left, Vector256`1<T> right);
    [NullableContextAttribute("1")]
public static T Sum(Vector256`1<T> vector);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T ToScalar(Vector256`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector512`1<T> ToVector512Unsafe(Vector256`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector512`1<T> ToVector512(Vector256`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool TryCopyTo(Vector256`1<T> vector, Span`1<T> destination);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector256`1<ushort>, Vector256`1<ushort>> Widen(Vector256`1<byte> source);
    public static ValueTuple`2<Vector256`1<int>, Vector256`1<int>> Widen(Vector256`1<short> source);
    public static ValueTuple`2<Vector256`1<long>, Vector256`1<long>> Widen(Vector256`1<int> source);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector256`1<short>, Vector256`1<short>> Widen(Vector256`1<sbyte> source);
    public static ValueTuple`2<Vector256`1<double>, Vector256`1<double>> Widen(Vector256`1<float> source);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector256`1<UInt32>, Vector256`1<UInt32>> Widen(Vector256`1<ushort> source);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector256`1<ulong>, Vector256`1<ulong>> Widen(Vector256`1<UInt32> source);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ushort> WidenLower(Vector256`1<byte> source);
    public static Vector256`1<int> WidenLower(Vector256`1<short> source);
    public static Vector256`1<long> WidenLower(Vector256`1<int> source);
    [CLSCompliantAttribute("False")]
public static Vector256`1<short> WidenLower(Vector256`1<sbyte> source);
    public static Vector256`1<double> WidenLower(Vector256`1<float> source);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UInt32> WidenLower(Vector256`1<ushort> source);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ulong> WidenLower(Vector256`1<UInt32> source);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ushort> WidenUpper(Vector256`1<byte> source);
    public static Vector256`1<int> WidenUpper(Vector256`1<short> source);
    public static Vector256`1<long> WidenUpper(Vector256`1<int> source);
    [CLSCompliantAttribute("False")]
public static Vector256`1<short> WidenUpper(Vector256`1<sbyte> source);
    public static Vector256`1<double> WidenUpper(Vector256`1<float> source);
    [CLSCompliantAttribute("False")]
public static Vector256`1<UInt32> WidenUpper(Vector256`1<ushort> source);
    [CLSCompliantAttribute("False")]
public static Vector256`1<ulong> WidenUpper(Vector256`1<UInt32> source);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Vector256`1<T> WithElement(Vector256`1<T> vector, int index, T value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector256`1<T> WithLower(Vector256`1<T> vector, Vector128`1<T> value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector256`1<T> WithUpper(Vector256`1<T> vector, Vector128`1<T> value);
    [NullableContextAttribute("2")]
public static Vector256`1<T> Xor(Vector256`1<T> left, Vector256`1<T> right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class System.Runtime.Intrinsics.Vector256`1 : ValueType {
    private int _dummyPrimitive;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Vector256`1<T> AllBitsSet { get; }
    public static int Count { get; }
    public static bool IsSupported { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Vector256`1<T> One { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Vector256`1<T> Zero { get; }
    public T Item { get; }
    public static Vector256`1<T> get_AllBitsSet();
    public static int get_Count();
    public static bool get_IsSupported();
    public static Vector256`1<T> get_One();
    public static Vector256`1<T> get_Zero();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Vector256`1<T> other);
    public virtual int GetHashCode();
    public T get_Item(int index);
    public static Vector256`1<T> op_Addition(Vector256`1<T> left, Vector256`1<T> right);
    public static Vector256`1<T> op_BitwiseAnd(Vector256`1<T> left, Vector256`1<T> right);
    public static Vector256`1<T> op_BitwiseOr(Vector256`1<T> left, Vector256`1<T> right);
    public static Vector256`1<T> op_Division(Vector256`1<T> left, Vector256`1<T> right);
    public static Vector256`1<T> op_Division(Vector256`1<T> left, T right);
    public static bool op_Equality(Vector256`1<T> left, Vector256`1<T> right);
    public static Vector256`1<T> op_ExclusiveOr(Vector256`1<T> left, Vector256`1<T> right);
    public static bool op_Inequality(Vector256`1<T> left, Vector256`1<T> right);
    public static Vector256`1<T> op_LeftShift(Vector256`1<T> value, int shiftCount);
    public static Vector256`1<T> op_Multiply(Vector256`1<T> left, Vector256`1<T> right);
    public static Vector256`1<T> op_Multiply(Vector256`1<T> left, T right);
    public static Vector256`1<T> op_Multiply(T left, Vector256`1<T> right);
    public static Vector256`1<T> op_OnesComplement(Vector256`1<T> vector);
    public static Vector256`1<T> op_RightShift(Vector256`1<T> value, int shiftCount);
    public static Vector256`1<T> op_Subtraction(Vector256`1<T> left, Vector256`1<T> right);
    public static Vector256`1<T> op_UnaryNegation(Vector256`1<T> vector);
    public static Vector256`1<T> op_UnaryPlus(Vector256`1<T> value);
    public static Vector256`1<T> op_UnsignedRightShift(Vector256`1<T> value, int shiftCount);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class System.Runtime.Intrinsics.Vector512 : object {
    public static bool IsHardwareAccelerated { get; }
    public static bool get_IsHardwareAccelerated();
    [NullableContextAttribute("2")]
public static Vector512`1<T> Abs(Vector512`1<T> vector);
    [NullableContextAttribute("2")]
public static Vector512`1<T> Add(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static Vector512`1<T> AndNot(Vector512`1<T> left, Vector512`1<T> right);
    [ExtensionAttribute]
public static Vector512`1<byte> AsByte(Vector512`1<T> vector);
    [ExtensionAttribute]
public static Vector512`1<double> AsDouble(Vector512`1<T> vector);
    [ExtensionAttribute]
public static Vector512`1<short> AsInt16(Vector512`1<T> vector);
    [ExtensionAttribute]
public static Vector512`1<int> AsInt32(Vector512`1<T> vector);
    [ExtensionAttribute]
public static Vector512`1<long> AsInt64(Vector512`1<T> vector);
    [ExtensionAttribute]
public static Vector512`1<IntPtr> AsNInt(Vector512`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector512`1<UIntPtr> AsNUInt(Vector512`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector512`1<sbyte> AsSByte(Vector512`1<T> vector);
    [ExtensionAttribute]
public static Vector512`1<float> AsSingle(Vector512`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector512`1<ushort> AsUInt16(Vector512`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector512`1<UInt32> AsUInt32(Vector512`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector512`1<ulong> AsUInt64(Vector512`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector512`1<T> AsVector512(Vector`1<T> value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector`1<T> AsVector(Vector512`1<T> value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector512`1<TTo> As(Vector512`1<TFrom> vector);
    [NullableContextAttribute("2")]
public static Vector512`1<T> BitwiseAnd(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static Vector512`1<T> BitwiseOr(Vector512`1<T> left, Vector512`1<T> right);
    public static Vector512`1<double> Ceiling(Vector512`1<double> vector);
    public static Vector512`1<float> Ceiling(Vector512`1<float> vector);
    [NullableContextAttribute("2")]
public static Vector512`1<T> ConditionalSelect(Vector512`1<T> condition, Vector512`1<T> left, Vector512`1<T> right);
    public static Vector512`1<double> ConvertToDouble(Vector512`1<long> vector);
    [CLSCompliantAttribute("False")]
public static Vector512`1<double> ConvertToDouble(Vector512`1<ulong> vector);
    public static Vector512`1<int> ConvertToInt32(Vector512`1<float> vector);
    public static Vector512`1<long> ConvertToInt64(Vector512`1<double> vector);
    public static Vector512`1<float> ConvertToSingle(Vector512`1<int> vector);
    [CLSCompliantAttribute("False")]
public static Vector512`1<float> ConvertToSingle(Vector512`1<UInt32> vector);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UInt32> ConvertToUInt32(Vector512`1<float> vector);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ulong> ConvertToUInt64(Vector512`1<double> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void CopyTo(Vector512`1<T> vector, Span`1<T> destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void CopyTo(Vector512`1<T> vector, T[] destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void CopyTo(Vector512`1<T> vector, T[] destination, int startIndex);
    public static Vector512`1<byte> Create(byte value);
    public static Vector512`1<byte> Create(byte e0, byte e1, byte e2, byte e3, byte e4, byte e5, byte e6, byte e7, byte e8, byte e9, byte e10, byte e11, byte e12, byte e13, byte e14, byte e15, byte e16, byte e17, byte e18, byte e19, byte e20, byte e21, byte e22, byte e23, byte e24, byte e25, byte e26, byte e27, byte e28, byte e29, byte e30, byte e31, byte e32, byte e33, byte e34, byte e35, byte e36, byte e37, byte e38, byte e39, byte e40, byte e41, byte e42, byte e43, byte e44, byte e45, byte e46, byte e47, byte e48, byte e49, byte e50, byte e51, byte e52, byte e53, byte e54, byte e55, byte e56, byte e57, byte e58, byte e59, byte e60, byte e61, byte e62, byte e63);
    public static Vector512`1<double> Create(double value);
    public static Vector512`1<double> Create(double e0, double e1, double e2, double e3, double e4, double e5, double e6, double e7);
    public static Vector512`1<short> Create(short value);
    public static Vector512`1<short> Create(short e0, short e1, short e2, short e3, short e4, short e5, short e6, short e7, short e8, short e9, short e10, short e11, short e12, short e13, short e14, short e15, short e16, short e17, short e18, short e19, short e20, short e21, short e22, short e23, short e24, short e25, short e26, short e27, short e28, short e29, short e30, short e31);
    public static Vector512`1<int> Create(int value);
    public static Vector512`1<int> Create(int e0, int e1, int e2, int e3, int e4, int e5, int e6, int e7, int e8, int e9, int e10, int e11, int e12, int e13, int e14, int e15);
    public static Vector512`1<long> Create(long value);
    public static Vector512`1<long> Create(long e0, long e1, long e2, long e3, long e4, long e5, long e6, long e7);
    public static Vector512`1<IntPtr> Create(IntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UIntPtr> Create(UIntPtr value);
    public static Vector512`1<byte> Create(Vector256`1<byte> lower, Vector256`1<byte> upper);
    public static Vector512`1<double> Create(Vector256`1<double> lower, Vector256`1<double> upper);
    public static Vector512`1<short> Create(Vector256`1<short> lower, Vector256`1<short> upper);
    public static Vector512`1<int> Create(Vector256`1<int> lower, Vector256`1<int> upper);
    public static Vector512`1<long> Create(Vector256`1<long> lower, Vector256`1<long> upper);
    public static Vector512`1<IntPtr> Create(Vector256`1<IntPtr> lower, Vector256`1<IntPtr> upper);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UIntPtr> Create(Vector256`1<UIntPtr> lower, Vector256`1<UIntPtr> upper);
    [CLSCompliantAttribute("False")]
public static Vector512`1<sbyte> Create(Vector256`1<sbyte> lower, Vector256`1<sbyte> upper);
    public static Vector512`1<float> Create(Vector256`1<float> lower, Vector256`1<float> upper);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ushort> Create(Vector256`1<ushort> lower, Vector256`1<ushort> upper);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UInt32> Create(Vector256`1<UInt32> lower, Vector256`1<UInt32> upper);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ulong> Create(Vector256`1<ulong> lower, Vector256`1<ulong> upper);
    [CLSCompliantAttribute("False")]
public static Vector512`1<sbyte> Create(sbyte value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<sbyte> Create(sbyte e0, sbyte e1, sbyte e2, sbyte e3, sbyte e4, sbyte e5, sbyte e6, sbyte e7, sbyte e8, sbyte e9, sbyte e10, sbyte e11, sbyte e12, sbyte e13, sbyte e14, sbyte e15, sbyte e16, sbyte e17, sbyte e18, sbyte e19, sbyte e20, sbyte e21, sbyte e22, sbyte e23, sbyte e24, sbyte e25, sbyte e26, sbyte e27, sbyte e28, sbyte e29, sbyte e30, sbyte e31, sbyte e32, sbyte e33, sbyte e34, sbyte e35, sbyte e36, sbyte e37, sbyte e38, sbyte e39, sbyte e40, sbyte e41, sbyte e42, sbyte e43, sbyte e44, sbyte e45, sbyte e46, sbyte e47, sbyte e48, sbyte e49, sbyte e50, sbyte e51, sbyte e52, sbyte e53, sbyte e54, sbyte e55, sbyte e56, sbyte e57, sbyte e58, sbyte e59, sbyte e60, sbyte e61, sbyte e62, sbyte e63);
    public static Vector512`1<float> Create(float value);
    public static Vector512`1<float> Create(float e0, float e1, float e2, float e3, float e4, float e5, float e6, float e7, float e8, float e9, float e10, float e11, float e12, float e13, float e14, float e15);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ushort> Create(ushort value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ushort> Create(ushort e0, ushort e1, ushort e2, ushort e3, ushort e4, ushort e5, ushort e6, ushort e7, ushort e8, ushort e9, ushort e10, ushort e11, ushort e12, ushort e13, ushort e14, ushort e15, ushort e16, ushort e17, ushort e18, ushort e19, ushort e20, ushort e21, ushort e22, ushort e23, ushort e24, ushort e25, ushort e26, ushort e27, ushort e28, ushort e29, ushort e30, ushort e31);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UInt32> Create(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UInt32> Create(UInt32 e0, UInt32 e1, UInt32 e2, UInt32 e3, UInt32 e4, UInt32 e5, UInt32 e6, UInt32 e7, UInt32 e8, UInt32 e9, UInt32 e10, UInt32 e11, UInt32 e12, UInt32 e13, UInt32 e14, UInt32 e15);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ulong> Create(ulong value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ulong> Create(ulong e0, ulong e1, ulong e2, ulong e3, ulong e4, ulong e5, ulong e6, ulong e7);
    public static Vector512`1<byte> CreateScalar(byte value);
    public static Vector512`1<double> CreateScalar(double value);
    public static Vector512`1<short> CreateScalar(short value);
    public static Vector512`1<int> CreateScalar(int value);
    public static Vector512`1<long> CreateScalar(long value);
    public static Vector512`1<IntPtr> CreateScalar(IntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UIntPtr> CreateScalar(UIntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<sbyte> CreateScalar(sbyte value);
    public static Vector512`1<float> CreateScalar(float value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ushort> CreateScalar(ushort value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UInt32> CreateScalar(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ulong> CreateScalar(ulong value);
    [NullableContextAttribute("1")]
public static Vector512`1<T> CreateScalar(T value);
    public static Vector512`1<byte> CreateScalarUnsafe(byte value);
    public static Vector512`1<double> CreateScalarUnsafe(double value);
    public static Vector512`1<short> CreateScalarUnsafe(short value);
    public static Vector512`1<int> CreateScalarUnsafe(int value);
    public static Vector512`1<long> CreateScalarUnsafe(long value);
    public static Vector512`1<IntPtr> CreateScalarUnsafe(IntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UIntPtr> CreateScalarUnsafe(UIntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<sbyte> CreateScalarUnsafe(sbyte value);
    public static Vector512`1<float> CreateScalarUnsafe(float value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ushort> CreateScalarUnsafe(ushort value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UInt32> CreateScalarUnsafe(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ulong> CreateScalarUnsafe(ulong value);
    [NullableContextAttribute("1")]
public static Vector512`1<T> CreateScalarUnsafe(T value);
    [NullableContextAttribute("2")]
public static Vector512`1<T> Create(ReadOnlySpan`1<T> values);
    [NullableContextAttribute("2")]
public static Vector512`1<T> Create(Vector256`1<T> lower, Vector256`1<T> upper);
    [NullableContextAttribute("1")]
public static Vector512`1<T> Create(T value);
    [NullableContextAttribute("1")]
public static Vector512`1<T> Create(T[] values);
    [NullableContextAttribute("1")]
public static Vector512`1<T> Create(T[] values, int index);
    [NullableContextAttribute("2")]
public static Vector512`1<T> Divide(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("1")]
public static Vector512`1<T> Divide(Vector512`1<T> left, T right);
    [NullableContextAttribute("1")]
public static T Dot(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static bool EqualsAll(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static bool EqualsAny(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static Vector512`1<T> Equals(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static ulong ExtractMostSignificantBits(Vector512`1<T> vector);
    public static Vector512`1<double> Floor(Vector512`1<double> vector);
    public static Vector512`1<float> Floor(Vector512`1<float> vector);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T GetElement(Vector512`1<T> vector, int index);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector256`1<T> GetLower(Vector512`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector256`1<T> GetUpper(Vector512`1<T> vector);
    [NullableContextAttribute("2")]
public static bool GreaterThanAll(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static bool GreaterThanAny(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static bool GreaterThanOrEqualAll(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static bool GreaterThanOrEqualAny(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static Vector512`1<T> GreaterThanOrEqual(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static Vector512`1<T> GreaterThan(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanAll(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanAny(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanOrEqualAll(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanOrEqualAny(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static Vector512`1<T> LessThanOrEqual(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static Vector512`1<T> LessThan(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Vector512`1<T> Load(T* source);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Vector512`1<T> LoadAligned(T* source);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Vector512`1<T> LoadAlignedNonTemporal(T* source);
    [NullableContextAttribute("1")]
public static Vector512`1<T> LoadUnsafe(T& source);
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static Vector512`1<T> LoadUnsafe(T& source, UIntPtr elementOffset);
    [NullableContextAttribute("2")]
public static Vector512`1<T> Max(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static Vector512`1<T> Min(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("2")]
public static Vector512`1<T> Multiply(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("1")]
public static Vector512`1<T> Multiply(Vector512`1<T> left, T right);
    [NullableContextAttribute("1")]
public static Vector512`1<T> Multiply(T left, Vector512`1<T> right);
    public static Vector512`1<float> Narrow(Vector512`1<double> lower, Vector512`1<double> upper);
    [CLSCompliantAttribute("False")]
public static Vector512`1<sbyte> Narrow(Vector512`1<short> lower, Vector512`1<short> upper);
    public static Vector512`1<short> Narrow(Vector512`1<int> lower, Vector512`1<int> upper);
    public static Vector512`1<int> Narrow(Vector512`1<long> lower, Vector512`1<long> upper);
    [CLSCompliantAttribute("False")]
public static Vector512`1<byte> Narrow(Vector512`1<ushort> lower, Vector512`1<ushort> upper);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ushort> Narrow(Vector512`1<UInt32> lower, Vector512`1<UInt32> upper);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UInt32> Narrow(Vector512`1<ulong> lower, Vector512`1<ulong> upper);
    [NullableContextAttribute("2")]
public static Vector512`1<T> Negate(Vector512`1<T> vector);
    [NullableContextAttribute("2")]
public static Vector512`1<T> OnesComplement(Vector512`1<T> vector);
    public static Vector512`1<byte> ShiftLeft(Vector512`1<byte> vector, int shiftCount);
    public static Vector512`1<short> ShiftLeft(Vector512`1<short> vector, int shiftCount);
    public static Vector512`1<int> ShiftLeft(Vector512`1<int> vector, int shiftCount);
    public static Vector512`1<long> ShiftLeft(Vector512`1<long> vector, int shiftCount);
    public static Vector512`1<IntPtr> ShiftLeft(Vector512`1<IntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UIntPtr> ShiftLeft(Vector512`1<UIntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector512`1<sbyte> ShiftLeft(Vector512`1<sbyte> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ushort> ShiftLeft(Vector512`1<ushort> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UInt32> ShiftLeft(Vector512`1<UInt32> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ulong> ShiftLeft(Vector512`1<ulong> vector, int shiftCount);
    public static Vector512`1<short> ShiftRightArithmetic(Vector512`1<short> vector, int shiftCount);
    public static Vector512`1<int> ShiftRightArithmetic(Vector512`1<int> vector, int shiftCount);
    public static Vector512`1<long> ShiftRightArithmetic(Vector512`1<long> vector, int shiftCount);
    public static Vector512`1<IntPtr> ShiftRightArithmetic(Vector512`1<IntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector512`1<sbyte> ShiftRightArithmetic(Vector512`1<sbyte> vector, int shiftCount);
    public static Vector512`1<byte> ShiftRightLogical(Vector512`1<byte> vector, int shiftCount);
    public static Vector512`1<short> ShiftRightLogical(Vector512`1<short> vector, int shiftCount);
    public static Vector512`1<int> ShiftRightLogical(Vector512`1<int> vector, int shiftCount);
    public static Vector512`1<long> ShiftRightLogical(Vector512`1<long> vector, int shiftCount);
    public static Vector512`1<IntPtr> ShiftRightLogical(Vector512`1<IntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UIntPtr> ShiftRightLogical(Vector512`1<UIntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector512`1<sbyte> ShiftRightLogical(Vector512`1<sbyte> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ushort> ShiftRightLogical(Vector512`1<ushort> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UInt32> ShiftRightLogical(Vector512`1<UInt32> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ulong> ShiftRightLogical(Vector512`1<ulong> vector, int shiftCount);
    public static Vector512`1<byte> Shuffle(Vector512`1<byte> vector, Vector512`1<byte> indices);
    [CLSCompliantAttribute("False")]
public static Vector512`1<sbyte> Shuffle(Vector512`1<sbyte> vector, Vector512`1<sbyte> indices);
    public static Vector512`1<short> Shuffle(Vector512`1<short> vector, Vector512`1<short> indices);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ushort> Shuffle(Vector512`1<ushort> vector, Vector512`1<ushort> indices);
    public static Vector512`1<int> Shuffle(Vector512`1<int> vector, Vector512`1<int> indices);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UInt32> Shuffle(Vector512`1<UInt32> vector, Vector512`1<UInt32> indices);
    public static Vector512`1<float> Shuffle(Vector512`1<float> vector, Vector512`1<int> indices);
    public static Vector512`1<long> Shuffle(Vector512`1<long> vector, Vector512`1<long> indices);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ulong> Shuffle(Vector512`1<ulong> vector, Vector512`1<ulong> indices);
    public static Vector512`1<double> Shuffle(Vector512`1<double> vector, Vector512`1<long> indices);
    [NullableContextAttribute("2")]
public static Vector512`1<T> Sqrt(Vector512`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void Store(Vector512`1<T> source, T* destination);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void StoreAligned(Vector512`1<T> source, T* destination);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void StoreAlignedNonTemporal(Vector512`1<T> source, T* destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void StoreUnsafe(Vector512`1<T> source, T& destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void StoreUnsafe(Vector512`1<T> source, T& destination, UIntPtr elementOffset);
    [NullableContextAttribute("2")]
public static Vector512`1<T> Subtract(Vector512`1<T> left, Vector512`1<T> right);
    [NullableContextAttribute("1")]
public static T Sum(Vector512`1<T> vector);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T ToScalar(Vector512`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool TryCopyTo(Vector512`1<T> vector, Span`1<T> destination);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector512`1<ushort>, Vector512`1<ushort>> Widen(Vector512`1<byte> source);
    public static ValueTuple`2<Vector512`1<int>, Vector512`1<int>> Widen(Vector512`1<short> source);
    public static ValueTuple`2<Vector512`1<long>, Vector512`1<long>> Widen(Vector512`1<int> source);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector512`1<short>, Vector512`1<short>> Widen(Vector512`1<sbyte> source);
    public static ValueTuple`2<Vector512`1<double>, Vector512`1<double>> Widen(Vector512`1<float> source);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector512`1<UInt32>, Vector512`1<UInt32>> Widen(Vector512`1<ushort> source);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector512`1<ulong>, Vector512`1<ulong>> Widen(Vector512`1<UInt32> source);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ushort> WidenLower(Vector512`1<byte> source);
    public static Vector512`1<int> WidenLower(Vector512`1<short> source);
    public static Vector512`1<long> WidenLower(Vector512`1<int> source);
    [CLSCompliantAttribute("False")]
public static Vector512`1<short> WidenLower(Vector512`1<sbyte> source);
    public static Vector512`1<double> WidenLower(Vector512`1<float> source);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UInt32> WidenLower(Vector512`1<ushort> source);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ulong> WidenLower(Vector512`1<UInt32> source);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ushort> WidenUpper(Vector512`1<byte> source);
    public static Vector512`1<int> WidenUpper(Vector512`1<short> source);
    public static Vector512`1<long> WidenUpper(Vector512`1<int> source);
    [CLSCompliantAttribute("False")]
public static Vector512`1<short> WidenUpper(Vector512`1<sbyte> source);
    public static Vector512`1<double> WidenUpper(Vector512`1<float> source);
    [CLSCompliantAttribute("False")]
public static Vector512`1<UInt32> WidenUpper(Vector512`1<ushort> source);
    [CLSCompliantAttribute("False")]
public static Vector512`1<ulong> WidenUpper(Vector512`1<UInt32> source);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Vector512`1<T> WithElement(Vector512`1<T> vector, int index, T value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector512`1<T> WithLower(Vector512`1<T> vector, Vector256`1<T> value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector512`1<T> WithUpper(Vector512`1<T> vector, Vector256`1<T> value);
    [NullableContextAttribute("2")]
public static Vector512`1<T> Xor(Vector512`1<T> left, Vector512`1<T> right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class System.Runtime.Intrinsics.Vector512`1 : ValueType {
    private int _dummyPrimitive;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Vector512`1<T> AllBitsSet { get; }
    public static int Count { get; }
    public static bool IsSupported { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Vector512`1<T> One { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Vector512`1<T> Zero { get; }
    public T Item { get; }
    public static Vector512`1<T> get_AllBitsSet();
    public static int get_Count();
    public static bool get_IsSupported();
    public static Vector512`1<T> get_One();
    public static Vector512`1<T> get_Zero();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Vector512`1<T> other);
    public virtual int GetHashCode();
    public T get_Item(int index);
    public static Vector512`1<T> op_Addition(Vector512`1<T> left, Vector512`1<T> right);
    public static Vector512`1<T> op_BitwiseAnd(Vector512`1<T> left, Vector512`1<T> right);
    public static Vector512`1<T> op_BitwiseOr(Vector512`1<T> left, Vector512`1<T> right);
    public static Vector512`1<T> op_Division(Vector512`1<T> left, Vector512`1<T> right);
    public static Vector512`1<T> op_Division(Vector512`1<T> left, T right);
    public static bool op_Equality(Vector512`1<T> left, Vector512`1<T> right);
    public static Vector512`1<T> op_ExclusiveOr(Vector512`1<T> left, Vector512`1<T> right);
    public static bool op_Inequality(Vector512`1<T> left, Vector512`1<T> right);
    public static Vector512`1<T> op_LeftShift(Vector512`1<T> value, int shiftCount);
    public static Vector512`1<T> op_Multiply(Vector512`1<T> left, Vector512`1<T> right);
    public static Vector512`1<T> op_Multiply(Vector512`1<T> left, T right);
    public static Vector512`1<T> op_Multiply(T left, Vector512`1<T> right);
    public static Vector512`1<T> op_OnesComplement(Vector512`1<T> vector);
    public static Vector512`1<T> op_RightShift(Vector512`1<T> value, int shiftCount);
    public static Vector512`1<T> op_Subtraction(Vector512`1<T> left, Vector512`1<T> right);
    public static Vector512`1<T> op_UnaryNegation(Vector512`1<T> vector);
    public static Vector512`1<T> op_UnaryPlus(Vector512`1<T> value);
    public static Vector512`1<T> op_UnsignedRightShift(Vector512`1<T> value, int shiftCount);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class System.Runtime.Intrinsics.Vector64 : object {
    public static bool IsHardwareAccelerated { get; }
    public static bool get_IsHardwareAccelerated();
    [NullableContextAttribute("2")]
public static Vector64`1<T> Abs(Vector64`1<T> vector);
    [NullableContextAttribute("2")]
public static Vector64`1<T> Add(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static Vector64`1<T> AndNot(Vector64`1<T> left, Vector64`1<T> right);
    [ExtensionAttribute]
public static Vector64`1<byte> AsByte(Vector64`1<T> vector);
    [ExtensionAttribute]
public static Vector64`1<double> AsDouble(Vector64`1<T> vector);
    [ExtensionAttribute]
public static Vector64`1<short> AsInt16(Vector64`1<T> vector);
    [ExtensionAttribute]
public static Vector64`1<int> AsInt32(Vector64`1<T> vector);
    [ExtensionAttribute]
public static Vector64`1<long> AsInt64(Vector64`1<T> vector);
    [ExtensionAttribute]
public static Vector64`1<IntPtr> AsNInt(Vector64`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector64`1<UIntPtr> AsNUInt(Vector64`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector64`1<sbyte> AsSByte(Vector64`1<T> vector);
    [ExtensionAttribute]
public static Vector64`1<float> AsSingle(Vector64`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector64`1<ushort> AsUInt16(Vector64`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector64`1<UInt32> AsUInt32(Vector64`1<T> vector);
    [ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static Vector64`1<ulong> AsUInt64(Vector64`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector64`1<TTo> As(Vector64`1<TFrom> vector);
    [NullableContextAttribute("2")]
public static Vector64`1<T> BitwiseAnd(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static Vector64`1<T> BitwiseOr(Vector64`1<T> left, Vector64`1<T> right);
    public static Vector64`1<double> Ceiling(Vector64`1<double> vector);
    public static Vector64`1<float> Ceiling(Vector64`1<float> vector);
    [NullableContextAttribute("2")]
public static Vector64`1<T> ConditionalSelect(Vector64`1<T> condition, Vector64`1<T> left, Vector64`1<T> right);
    public static Vector64`1<double> ConvertToDouble(Vector64`1<long> vector);
    [CLSCompliantAttribute("False")]
public static Vector64`1<double> ConvertToDouble(Vector64`1<ulong> vector);
    public static Vector64`1<int> ConvertToInt32(Vector64`1<float> vector);
    public static Vector64`1<long> ConvertToInt64(Vector64`1<double> vector);
    public static Vector64`1<float> ConvertToSingle(Vector64`1<int> vector);
    [CLSCompliantAttribute("False")]
public static Vector64`1<float> ConvertToSingle(Vector64`1<UInt32> vector);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UInt32> ConvertToUInt32(Vector64`1<float> vector);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ulong> ConvertToUInt64(Vector64`1<double> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void CopyTo(Vector64`1<T> vector, Span`1<T> destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void CopyTo(Vector64`1<T> vector, T[] destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void CopyTo(Vector64`1<T> vector, T[] destination, int startIndex);
    public static Vector64`1<byte> Create(byte value);
    public static Vector64`1<byte> Create(byte e0, byte e1, byte e2, byte e3, byte e4, byte e5, byte e6, byte e7);
    public static Vector64`1<double> Create(double value);
    public static Vector64`1<short> Create(short value);
    public static Vector64`1<short> Create(short e0, short e1, short e2, short e3);
    public static Vector64`1<int> Create(int value);
    public static Vector64`1<int> Create(int e0, int e1);
    public static Vector64`1<long> Create(long value);
    public static Vector64`1<IntPtr> Create(IntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UIntPtr> Create(UIntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<sbyte> Create(sbyte value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<sbyte> Create(sbyte e0, sbyte e1, sbyte e2, sbyte e3, sbyte e4, sbyte e5, sbyte e6, sbyte e7);
    public static Vector64`1<float> Create(float value);
    public static Vector64`1<float> Create(float e0, float e1);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ushort> Create(ushort value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ushort> Create(ushort e0, ushort e1, ushort e2, ushort e3);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UInt32> Create(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UInt32> Create(UInt32 e0, UInt32 e1);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ulong> Create(ulong value);
    public static Vector64`1<byte> CreateScalar(byte value);
    public static Vector64`1<double> CreateScalar(double value);
    public static Vector64`1<short> CreateScalar(short value);
    public static Vector64`1<int> CreateScalar(int value);
    public static Vector64`1<long> CreateScalar(long value);
    public static Vector64`1<IntPtr> CreateScalar(IntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UIntPtr> CreateScalar(UIntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<sbyte> CreateScalar(sbyte value);
    public static Vector64`1<float> CreateScalar(float value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ushort> CreateScalar(ushort value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UInt32> CreateScalar(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ulong> CreateScalar(ulong value);
    [NullableContextAttribute("1")]
public static Vector64`1<T> CreateScalar(T value);
    public static Vector64`1<byte> CreateScalarUnsafe(byte value);
    public static Vector64`1<double> CreateScalarUnsafe(double value);
    public static Vector64`1<short> CreateScalarUnsafe(short value);
    public static Vector64`1<int> CreateScalarUnsafe(int value);
    public static Vector64`1<long> CreateScalarUnsafe(long value);
    public static Vector64`1<IntPtr> CreateScalarUnsafe(IntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UIntPtr> CreateScalarUnsafe(UIntPtr value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<sbyte> CreateScalarUnsafe(sbyte value);
    public static Vector64`1<float> CreateScalarUnsafe(float value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ushort> CreateScalarUnsafe(ushort value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UInt32> CreateScalarUnsafe(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ulong> CreateScalarUnsafe(ulong value);
    [NullableContextAttribute("1")]
public static Vector64`1<T> CreateScalarUnsafe(T value);
    [NullableContextAttribute("2")]
public static Vector64`1<T> Create(ReadOnlySpan`1<T> values);
    [NullableContextAttribute("1")]
public static Vector64`1<T> Create(T value);
    [NullableContextAttribute("1")]
public static Vector64`1<T> Create(T[] values);
    [NullableContextAttribute("1")]
public static Vector64`1<T> Create(T[] values, int index);
    [NullableContextAttribute("2")]
public static Vector64`1<T> Divide(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("1")]
public static Vector64`1<T> Divide(Vector64`1<T> left, T right);
    [NullableContextAttribute("1")]
public static T Dot(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static bool EqualsAll(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static bool EqualsAny(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static Vector64`1<T> Equals(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static UInt32 ExtractMostSignificantBits(Vector64`1<T> vector);
    public static Vector64`1<double> Floor(Vector64`1<double> vector);
    public static Vector64`1<float> Floor(Vector64`1<float> vector);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T GetElement(Vector64`1<T> vector, int index);
    [NullableContextAttribute("2")]
public static bool GreaterThanAll(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static bool GreaterThanAny(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static bool GreaterThanOrEqualAll(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static bool GreaterThanOrEqualAny(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static Vector64`1<T> GreaterThanOrEqual(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static Vector64`1<T> GreaterThan(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanAll(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanAny(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanOrEqualAll(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static bool LessThanOrEqualAny(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static Vector64`1<T> LessThanOrEqual(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static Vector64`1<T> LessThan(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Vector64`1<T> Load(T* source);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Vector64`1<T> LoadAligned(T* source);
    [NullableContextAttribute("2")]
[CLSCompliantAttribute("False")]
public static Vector64`1<T> LoadAlignedNonTemporal(T* source);
    [NullableContextAttribute("1")]
public static Vector64`1<T> LoadUnsafe(T& source);
    [NullableContextAttribute("1")]
[CLSCompliantAttribute("False")]
public static Vector64`1<T> LoadUnsafe(T& source, UIntPtr elementOffset);
    [NullableContextAttribute("2")]
public static Vector64`1<T> Max(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static Vector64`1<T> Min(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("2")]
public static Vector64`1<T> Multiply(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("1")]
public static Vector64`1<T> Multiply(Vector64`1<T> left, T right);
    [NullableContextAttribute("1")]
public static Vector64`1<T> Multiply(T left, Vector64`1<T> right);
    public static Vector64`1<float> Narrow(Vector64`1<double> lower, Vector64`1<double> upper);
    [CLSCompliantAttribute("False")]
public static Vector64`1<sbyte> Narrow(Vector64`1<short> lower, Vector64`1<short> upper);
    public static Vector64`1<short> Narrow(Vector64`1<int> lower, Vector64`1<int> upper);
    public static Vector64`1<int> Narrow(Vector64`1<long> lower, Vector64`1<long> upper);
    [CLSCompliantAttribute("False")]
public static Vector64`1<byte> Narrow(Vector64`1<ushort> lower, Vector64`1<ushort> upper);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ushort> Narrow(Vector64`1<UInt32> lower, Vector64`1<UInt32> upper);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UInt32> Narrow(Vector64`1<ulong> lower, Vector64`1<ulong> upper);
    [NullableContextAttribute("2")]
public static Vector64`1<T> Negate(Vector64`1<T> vector);
    [NullableContextAttribute("2")]
public static Vector64`1<T> OnesComplement(Vector64`1<T> vector);
    public static Vector64`1<byte> ShiftLeft(Vector64`1<byte> vector, int shiftCount);
    public static Vector64`1<short> ShiftLeft(Vector64`1<short> vector, int shiftCount);
    public static Vector64`1<int> ShiftLeft(Vector64`1<int> vector, int shiftCount);
    public static Vector64`1<long> ShiftLeft(Vector64`1<long> vector, int shiftCount);
    public static Vector64`1<IntPtr> ShiftLeft(Vector64`1<IntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UIntPtr> ShiftLeft(Vector64`1<UIntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector64`1<sbyte> ShiftLeft(Vector64`1<sbyte> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ushort> ShiftLeft(Vector64`1<ushort> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UInt32> ShiftLeft(Vector64`1<UInt32> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ulong> ShiftLeft(Vector64`1<ulong> vector, int shiftCount);
    public static Vector64`1<short> ShiftRightArithmetic(Vector64`1<short> vector, int shiftCount);
    public static Vector64`1<int> ShiftRightArithmetic(Vector64`1<int> vector, int shiftCount);
    public static Vector64`1<long> ShiftRightArithmetic(Vector64`1<long> vector, int shiftCount);
    public static Vector64`1<IntPtr> ShiftRightArithmetic(Vector64`1<IntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector64`1<sbyte> ShiftRightArithmetic(Vector64`1<sbyte> vector, int shiftCount);
    public static Vector64`1<byte> ShiftRightLogical(Vector64`1<byte> vector, int shiftCount);
    public static Vector64`1<short> ShiftRightLogical(Vector64`1<short> vector, int shiftCount);
    public static Vector64`1<int> ShiftRightLogical(Vector64`1<int> vector, int shiftCount);
    public static Vector64`1<long> ShiftRightLogical(Vector64`1<long> vector, int shiftCount);
    public static Vector64`1<IntPtr> ShiftRightLogical(Vector64`1<IntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UIntPtr> ShiftRightLogical(Vector64`1<UIntPtr> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector64`1<sbyte> ShiftRightLogical(Vector64`1<sbyte> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ushort> ShiftRightLogical(Vector64`1<ushort> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UInt32> ShiftRightLogical(Vector64`1<UInt32> vector, int shiftCount);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ulong> ShiftRightLogical(Vector64`1<ulong> vector, int shiftCount);
    public static Vector64`1<byte> Shuffle(Vector64`1<byte> vector, Vector64`1<byte> indices);
    [CLSCompliantAttribute("False")]
public static Vector64`1<sbyte> Shuffle(Vector64`1<sbyte> vector, Vector64`1<sbyte> indices);
    public static Vector64`1<short> Shuffle(Vector64`1<short> vector, Vector64`1<short> indices);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ushort> Shuffle(Vector64`1<ushort> vector, Vector64`1<ushort> indices);
    public static Vector64`1<int> Shuffle(Vector64`1<int> vector, Vector64`1<int> indices);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UInt32> Shuffle(Vector64`1<UInt32> vector, Vector64`1<UInt32> indices);
    public static Vector64`1<float> Shuffle(Vector64`1<float> vector, Vector64`1<int> indices);
    [NullableContextAttribute("2")]
public static Vector64`1<T> Sqrt(Vector64`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void Store(Vector64`1<T> source, T* destination);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void StoreAligned(Vector64`1<T> source, T* destination);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void StoreAlignedNonTemporal(Vector64`1<T> source, T* destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void StoreUnsafe(Vector64`1<T> source, T& destination);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static void StoreUnsafe(Vector64`1<T> source, T& destination, UIntPtr elementOffset);
    [NullableContextAttribute("2")]
public static Vector64`1<T> Subtract(Vector64`1<T> left, Vector64`1<T> right);
    [NullableContextAttribute("1")]
public static T Sum(Vector64`1<T> vector);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static T ToScalar(Vector64`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector128`1<T> ToVector128Unsafe(Vector64`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Vector128`1<T> ToVector128(Vector64`1<T> vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool TryCopyTo(Vector64`1<T> vector, Span`1<T> destination);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector64`1<ushort>, Vector64`1<ushort>> Widen(Vector64`1<byte> source);
    public static ValueTuple`2<Vector64`1<int>, Vector64`1<int>> Widen(Vector64`1<short> source);
    public static ValueTuple`2<Vector64`1<long>, Vector64`1<long>> Widen(Vector64`1<int> source);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector64`1<short>, Vector64`1<short>> Widen(Vector64`1<sbyte> source);
    public static ValueTuple`2<Vector64`1<double>, Vector64`1<double>> Widen(Vector64`1<float> source);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector64`1<UInt32>, Vector64`1<UInt32>> Widen(Vector64`1<ushort> source);
    [CLSCompliantAttribute("False")]
public static ValueTuple`2<Vector64`1<ulong>, Vector64`1<ulong>> Widen(Vector64`1<UInt32> source);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ushort> WidenLower(Vector64`1<byte> source);
    public static Vector64`1<int> WidenLower(Vector64`1<short> source);
    public static Vector64`1<long> WidenLower(Vector64`1<int> source);
    [CLSCompliantAttribute("False")]
public static Vector64`1<short> WidenLower(Vector64`1<sbyte> source);
    public static Vector64`1<double> WidenLower(Vector64`1<float> source);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UInt32> WidenLower(Vector64`1<ushort> source);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ulong> WidenLower(Vector64`1<UInt32> source);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ushort> WidenUpper(Vector64`1<byte> source);
    public static Vector64`1<int> WidenUpper(Vector64`1<short> source);
    public static Vector64`1<long> WidenUpper(Vector64`1<int> source);
    [CLSCompliantAttribute("False")]
public static Vector64`1<short> WidenUpper(Vector64`1<sbyte> source);
    public static Vector64`1<double> WidenUpper(Vector64`1<float> source);
    [CLSCompliantAttribute("False")]
public static Vector64`1<UInt32> WidenUpper(Vector64`1<ushort> source);
    [CLSCompliantAttribute("False")]
public static Vector64`1<ulong> WidenUpper(Vector64`1<UInt32> source);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Vector64`1<T> WithElement(Vector64`1<T> vector, int index, T value);
    [NullableContextAttribute("2")]
public static Vector64`1<T> Xor(Vector64`1<T> left, Vector64`1<T> right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class System.Runtime.Intrinsics.Vector64`1 : ValueType {
    private int _dummyPrimitive;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Vector64`1<T> AllBitsSet { get; }
    public static int Count { get; }
    public static bool IsSupported { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Vector64`1<T> One { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static Vector64`1<T> Zero { get; }
    public T Item { get; }
    public static Vector64`1<T> get_AllBitsSet();
    public static int get_Count();
    public static bool get_IsSupported();
    public static Vector64`1<T> get_One();
    public static Vector64`1<T> get_Zero();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Vector64`1<T> other);
    public virtual int GetHashCode();
    public T get_Item(int index);
    public static Vector64`1<T> op_Addition(Vector64`1<T> left, Vector64`1<T> right);
    public static Vector64`1<T> op_BitwiseAnd(Vector64`1<T> left, Vector64`1<T> right);
    public static Vector64`1<T> op_BitwiseOr(Vector64`1<T> left, Vector64`1<T> right);
    public static Vector64`1<T> op_Division(Vector64`1<T> left, Vector64`1<T> right);
    public static Vector64`1<T> op_Division(Vector64`1<T> left, T right);
    public static bool op_Equality(Vector64`1<T> left, Vector64`1<T> right);
    public static Vector64`1<T> op_ExclusiveOr(Vector64`1<T> left, Vector64`1<T> right);
    public static bool op_Inequality(Vector64`1<T> left, Vector64`1<T> right);
    public static Vector64`1<T> op_LeftShift(Vector64`1<T> value, int shiftCount);
    public static Vector64`1<T> op_Multiply(Vector64`1<T> left, Vector64`1<T> right);
    public static Vector64`1<T> op_Multiply(Vector64`1<T> left, T right);
    public static Vector64`1<T> op_Multiply(T left, Vector64`1<T> right);
    public static Vector64`1<T> op_OnesComplement(Vector64`1<T> vector);
    public static Vector64`1<T> op_RightShift(Vector64`1<T> value, int shiftCount);
    public static Vector64`1<T> op_Subtraction(Vector64`1<T> left, Vector64`1<T> right);
    public static Vector64`1<T> op_UnaryNegation(Vector64`1<T> vector);
    public static Vector64`1<T> op_UnaryPlus(Vector64`1<T> value);
    public static Vector64`1<T> op_UnsignedRightShift(Vector64`1<T> value, int shiftCount);
    public virtual string ToString();
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.Wasm.PackedSimd : object {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<sbyte> Splat(sbyte value);
    public static Vector128`1<byte> Splat(byte value);
    public static Vector128`1<short> Splat(short value);
    public static Vector128`1<ushort> Splat(ushort value);
    public static Vector128`1<int> Splat(int value);
    public static Vector128`1<UInt32> Splat(UInt32 value);
    public static Vector128`1<long> Splat(long value);
    public static Vector128`1<ulong> Splat(ulong value);
    public static Vector128`1<float> Splat(float value);
    public static Vector128`1<double> Splat(double value);
    public static Vector128`1<IntPtr> Splat(IntPtr value);
    public static Vector128`1<UIntPtr> Splat(UIntPtr value);
    public static int ExtractScalar(Vector128`1<sbyte> value, byte index);
    public static UInt32 ExtractScalar(Vector128`1<byte> value, byte index);
    public static int ExtractScalar(Vector128`1<short> value, byte index);
    public static UInt32 ExtractScalar(Vector128`1<ushort> value, byte index);
    public static int ExtractScalar(Vector128`1<int> value, byte index);
    public static UInt32 ExtractScalar(Vector128`1<UInt32> value, byte index);
    public static long ExtractScalar(Vector128`1<long> value, byte index);
    public static ulong ExtractScalar(Vector128`1<ulong> value, byte index);
    public static float ExtractScalar(Vector128`1<float> value, byte index);
    public static double ExtractScalar(Vector128`1<double> value, byte index);
    public static IntPtr ExtractScalar(Vector128`1<IntPtr> value, byte index);
    public static UIntPtr ExtractScalar(Vector128`1<UIntPtr> value, byte index);
    public static Vector128`1<sbyte> ReplaceScalar(Vector128`1<sbyte> vector, byte imm, int value);
    public static Vector128`1<byte> ReplaceScalar(Vector128`1<byte> vector, byte imm, UInt32 value);
    public static Vector128`1<short> ReplaceScalar(Vector128`1<short> vector, byte imm, int value);
    public static Vector128`1<ushort> ReplaceScalar(Vector128`1<ushort> vector, byte imm, UInt32 value);
    public static Vector128`1<int> ReplaceScalar(Vector128`1<int> vector, byte imm, int value);
    public static Vector128`1<int> ReplaceScalar(Vector128`1<UInt32> vector, byte imm, UInt32 value);
    public static Vector128`1<long> ReplaceScalar(Vector128`1<long> vector, byte imm, long value);
    public static Vector128`1<ulong> ReplaceScalar(Vector128`1<ulong> vector, byte imm, ulong value);
    public static Vector128`1<float> ReplaceScalar(Vector128`1<float> vector, byte imm, float value);
    public static Vector128`1<double> ReplaceScalar(Vector128`1<double> vector, byte imm, double value);
    public static Vector128`1<IntPtr> ReplaceScalar(Vector128`1<IntPtr> vector, byte imm, IntPtr value);
    public static Vector128`1<UIntPtr> ReplaceScalar(Vector128`1<UIntPtr> vector, byte imm, UIntPtr value);
    public static Vector128`1<sbyte> Swizzle(Vector128`1<sbyte> vector, Vector128`1<sbyte> indices);
    public static Vector128`1<byte> Swizzle(Vector128`1<byte> vector, Vector128`1<byte> indices);
    public static Vector128`1<sbyte> Add(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> Add(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Add(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> Add(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> Add(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> Add(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<long> Add(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> Add(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<IntPtr> Add(Vector128`1<IntPtr> left, Vector128`1<IntPtr> right);
    public static Vector128`1<UIntPtr> Add(Vector128`1<UIntPtr> left, Vector128`1<UIntPtr> right);
    public static Vector128`1<sbyte> Subtract(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> Subtract(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Subtract(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> Subtract(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> Subtract(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> Subtract(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<long> Subtract(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> Subtract(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<IntPtr> Subtract(Vector128`1<IntPtr> left, Vector128`1<IntPtr> right);
    public static Vector128`1<UIntPtr> Subtract(Vector128`1<UIntPtr> left, Vector128`1<UIntPtr> right);
    public static Vector128`1<short> Multiply(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> Multiply(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> Multiply(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> Multiply(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<long> Multiply(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> Multiply(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<IntPtr> Multiply(Vector128`1<IntPtr> left, Vector128`1<IntPtr> right);
    public static Vector128`1<UIntPtr> Multiply(Vector128`1<UIntPtr> left, Vector128`1<UIntPtr> right);
    public static Vector128`1<int> Dot(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<sbyte> Negate(Vector128`1<sbyte> value);
    public static Vector128`1<byte> Negate(Vector128`1<byte> value);
    public static Vector128`1<short> Negate(Vector128`1<short> value);
    public static Vector128`1<ushort> Negate(Vector128`1<ushort> value);
    public static Vector128`1<int> Negate(Vector128`1<int> value);
    public static Vector128`1<UInt32> Negate(Vector128`1<UInt32> value);
    public static Vector128`1<long> Negate(Vector128`1<long> value);
    public static Vector128`1<ulong> Negate(Vector128`1<ulong> value);
    public static Vector128`1<IntPtr> Negate(Vector128`1<IntPtr> value);
    public static Vector128`1<UIntPtr> Negate(Vector128`1<UIntPtr> value);
    public static Vector128`1<short> MultiplyWideningLower(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> MultiplyWideningLower(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<int> MultiplyWideningLower(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<UInt32> MultiplyWideningLower(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<long> MultiplyWideningLower(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<ulong> MultiplyWideningLower(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<short> MultiplyWideningUpper(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> MultiplyWideningUpper(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<int> MultiplyWideningUpper(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<UInt32> MultiplyWideningUpper(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<long> MultiplyWideningUpper(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<ulong> MultiplyWideningUpper(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<short> AddPairwiseWidening(Vector128`1<sbyte> value);
    public static Vector128`1<ushort> AddPairwiseWidening(Vector128`1<byte> value);
    public static Vector128`1<int> AddPairwiseWidening(Vector128`1<short> value);
    public static Vector128`1<UInt32> AddPairwiseWidening(Vector128`1<ushort> value);
    public static Vector128`1<sbyte> AddSaturate(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> AddSaturate(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> AddSaturate(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> AddSaturate(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<sbyte> SubtractSaturate(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> SubtractSaturate(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> SubtractSaturate(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> SubtractSaturate(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<short> MultiplyRoundedSaturateQ15(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<sbyte> Min(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> Min(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Min(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> Min(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> Min(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> Min(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<sbyte> Max(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> Max(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Max(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> Max(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> Max(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> Max(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<byte> AverageRounded(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<ushort> AverageRounded(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<sbyte> Abs(Vector128`1<sbyte> value);
    public static Vector128`1<short> Abs(Vector128`1<short> value);
    public static Vector128`1<int> Abs(Vector128`1<int> value);
    public static Vector128`1<long> Abs(Vector128`1<long> value);
    public static Vector128`1<IntPtr> Abs(Vector128`1<IntPtr> value);
    public static Vector128`1<sbyte> ShiftLeft(Vector128`1<sbyte> value, int count);
    public static Vector128`1<byte> ShiftLeft(Vector128`1<byte> value, int count);
    public static Vector128`1<short> ShiftLeft(Vector128`1<short> value, int count);
    public static Vector128`1<ushort> ShiftLeft(Vector128`1<ushort> value, int count);
    public static Vector128`1<int> ShiftLeft(Vector128`1<int> value, int count);
    public static Vector128`1<UInt32> ShiftLeft(Vector128`1<UInt32> value, int count);
    public static Vector128`1<long> ShiftLeft(Vector128`1<long> value, int count);
    public static Vector128`1<ulong> ShiftLeft(Vector128`1<ulong> value, int count);
    public static Vector128`1<IntPtr> ShiftLeft(Vector128`1<IntPtr> value, int count);
    public static Vector128`1<UIntPtr> ShiftLeft(Vector128`1<UIntPtr> value, int count);
    public static Vector128`1<sbyte> ShiftRightArithmetic(Vector128`1<sbyte> value, int count);
    public static Vector128`1<byte> ShiftRightArithmetic(Vector128`1<byte> value, int count);
    public static Vector128`1<short> ShiftRightArithmetic(Vector128`1<short> value, int count);
    public static Vector128`1<ushort> ShiftRightArithmetic(Vector128`1<ushort> value, int count);
    public static Vector128`1<int> ShiftRightArithmetic(Vector128`1<int> value, int count);
    public static Vector128`1<UInt32> ShiftRightArithmetic(Vector128`1<UInt32> value, int count);
    public static Vector128`1<long> ShiftRightArithmetic(Vector128`1<long> value, int count);
    public static Vector128`1<ulong> ShiftRightArithmetic(Vector128`1<ulong> value, int count);
    public static Vector128`1<IntPtr> ShiftRightArithmetic(Vector128`1<IntPtr> value, int count);
    public static Vector128`1<UIntPtr> ShiftRightArithmetic(Vector128`1<UIntPtr> value, int count);
    public static Vector128`1<sbyte> ShiftRightLogical(Vector128`1<sbyte> value, int count);
    public static Vector128`1<byte> ShiftRightLogical(Vector128`1<byte> value, int count);
    public static Vector128`1<short> ShiftRightLogical(Vector128`1<short> value, int count);
    public static Vector128`1<ushort> ShiftRightLogical(Vector128`1<ushort> value, int count);
    public static Vector128`1<int> ShiftRightLogical(Vector128`1<int> value, int count);
    public static Vector128`1<UInt32> ShiftRightLogical(Vector128`1<UInt32> value, int count);
    public static Vector128`1<long> ShiftRightLogical(Vector128`1<long> value, int count);
    public static Vector128`1<ulong> ShiftRightLogical(Vector128`1<ulong> value, int count);
    public static Vector128`1<IntPtr> ShiftRightLogical(Vector128`1<IntPtr> value, int count);
    public static Vector128`1<UIntPtr> ShiftRightLogical(Vector128`1<UIntPtr> value, int count);
    public static Vector128`1<sbyte> And(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> And(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> And(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> And(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> And(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> And(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<long> And(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> And(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<float> And(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> And(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<IntPtr> And(Vector128`1<IntPtr> left, Vector128`1<IntPtr> right);
    public static Vector128`1<UIntPtr> And(Vector128`1<UIntPtr> left, Vector128`1<UIntPtr> right);
    public static Vector128`1<sbyte> Or(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> Or(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Or(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> Or(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> Or(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> Or(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<long> Or(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> Or(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<float> Or(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> Or(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<IntPtr> Or(Vector128`1<IntPtr> left, Vector128`1<IntPtr> right);
    public static Vector128`1<UIntPtr> Or(Vector128`1<UIntPtr> left, Vector128`1<UIntPtr> right);
    public static Vector128`1<sbyte> Xor(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> Xor(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Xor(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> Xor(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> Xor(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> Xor(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<long> Xor(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> Xor(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<float> Xor(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> Xor(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<IntPtr> Xor(Vector128`1<IntPtr> left, Vector128`1<IntPtr> right);
    public static Vector128`1<UIntPtr> Xor(Vector128`1<UIntPtr> left, Vector128`1<UIntPtr> right);
    public static Vector128`1<sbyte> Not(Vector128`1<sbyte> value);
    public static Vector128`1<byte> Not(Vector128`1<byte> value);
    public static Vector128`1<short> Not(Vector128`1<short> value);
    public static Vector128`1<ushort> Not(Vector128`1<ushort> value);
    public static Vector128`1<int> Not(Vector128`1<int> value);
    public static Vector128`1<UInt32> Not(Vector128`1<UInt32> value);
    public static Vector128`1<long> Not(Vector128`1<long> value);
    public static Vector128`1<ulong> Not(Vector128`1<ulong> value);
    public static Vector128`1<float> Not(Vector128`1<float> value);
    public static Vector128`1<double> Not(Vector128`1<double> value);
    public static Vector128`1<IntPtr> Not(Vector128`1<IntPtr> value);
    public static Vector128`1<UIntPtr> Not(Vector128`1<UIntPtr> value);
    public static Vector128`1<sbyte> AndNot(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> AndNot(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> AndNot(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> AndNot(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> AndNot(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> AndNot(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<long> AndNot(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> AndNot(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<float> AndNot(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> AndNot(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<IntPtr> AndNot(Vector128`1<IntPtr> left, Vector128`1<IntPtr> right);
    public static Vector128`1<UIntPtr> AndNot(Vector128`1<UIntPtr> left, Vector128`1<UIntPtr> right);
    public static Vector128`1<sbyte> BitwiseSelect(Vector128`1<sbyte> left, Vector128`1<sbyte> right, Vector128`1<sbyte> select);
    public static Vector128`1<byte> BitwiseSelect(Vector128`1<byte> left, Vector128`1<byte> right, Vector128`1<byte> select);
    public static Vector128`1<short> BitwiseSelect(Vector128`1<short> left, Vector128`1<short> right, Vector128`1<short> select);
    public static Vector128`1<ushort> BitwiseSelect(Vector128`1<ushort> left, Vector128`1<ushort> right, Vector128`1<ushort> select);
    public static Vector128`1<int> BitwiseSelect(Vector128`1<int> left, Vector128`1<int> right, Vector128`1<int> select);
    public static Vector128`1<UInt32> BitwiseSelect(Vector128`1<UInt32> left, Vector128`1<UInt32> right, Vector128`1<UInt32> select);
    public static Vector128`1<long> BitwiseSelect(Vector128`1<long> left, Vector128`1<long> right, Vector128`1<long> select);
    public static Vector128`1<ulong> BitwiseSelect(Vector128`1<ulong> left, Vector128`1<ulong> right, Vector128`1<ulong> select);
    public static Vector128`1<float> BitwiseSelect(Vector128`1<float> left, Vector128`1<float> right, Vector128`1<float> select);
    public static Vector128`1<double> BitwiseSelect(Vector128`1<double> left, Vector128`1<double> right, Vector128`1<double> select);
    public static Vector128`1<IntPtr> BitwiseSelect(Vector128`1<IntPtr> left, Vector128`1<IntPtr> right, Vector128`1<IntPtr> select);
    public static Vector128`1<UIntPtr> BitwiseSelect(Vector128`1<UIntPtr> left, Vector128`1<UIntPtr> right, Vector128`1<UIntPtr> select);
    public static Vector128`1<byte> PopCount(Vector128`1<byte> value);
    public static bool AnyTrue(Vector128`1<sbyte> value);
    public static bool AnyTrue(Vector128`1<byte> value);
    public static bool AnyTrue(Vector128`1<short> value);
    public static bool AnyTrue(Vector128`1<ushort> value);
    public static bool AnyTrue(Vector128`1<int> value);
    public static bool AnyTrue(Vector128`1<UInt32> value);
    public static bool AnyTrue(Vector128`1<long> value);
    public static bool AnyTrue(Vector128`1<ulong> value);
    public static bool AnyTrue(Vector128`1<float> value);
    public static bool AnyTrue(Vector128`1<double> value);
    public static bool AnyTrue(Vector128`1<IntPtr> value);
    public static bool AnyTrue(Vector128`1<UIntPtr> value);
    public static bool AllTrue(Vector128`1<sbyte> value);
    public static bool AllTrue(Vector128`1<byte> value);
    public static bool AllTrue(Vector128`1<short> value);
    public static bool AllTrue(Vector128`1<ushort> value);
    public static bool AllTrue(Vector128`1<int> value);
    public static bool AllTrue(Vector128`1<UInt32> value);
    public static bool AllTrue(Vector128`1<long> value);
    public static bool AllTrue(Vector128`1<ulong> value);
    public static bool AllTrue(Vector128`1<IntPtr> value);
    public static bool AllTrue(Vector128`1<UIntPtr> value);
    public static int Bitmask(Vector128`1<sbyte> value);
    public static int Bitmask(Vector128`1<byte> value);
    public static int Bitmask(Vector128`1<short> value);
    public static int Bitmask(Vector128`1<ushort> value);
    public static int Bitmask(Vector128`1<int> value);
    public static int Bitmask(Vector128`1<UInt32> value);
    public static int Bitmask(Vector128`1<long> value);
    public static int Bitmask(Vector128`1<ulong> value);
    public static int Bitmask(Vector128`1<IntPtr> value);
    public static int Bitmask(Vector128`1<UIntPtr> value);
    public static Vector128`1<sbyte> CompareEqual(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> CompareEqual(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareEqual(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> CompareEqual(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> CompareEqual(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> CompareEqual(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<long> CompareEqual(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> CompareEqual(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<float> CompareEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> CompareEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<IntPtr> CompareEqual(Vector128`1<IntPtr> left, Vector128`1<IntPtr> right);
    public static Vector128`1<UIntPtr> CompareEqual(Vector128`1<UIntPtr> left, Vector128`1<UIntPtr> right);
    public static Vector128`1<sbyte> CompareNotEqual(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> CompareNotEqual(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareNotEqual(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> CompareNotEqual(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> CompareNotEqual(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> CompareNotEqual(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<long> CompareNotEqual(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> CompareNotEqual(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<float> CompareNotEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> CompareNotEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<IntPtr> CompareNotEqual(Vector128`1<IntPtr> left, Vector128`1<IntPtr> right);
    public static Vector128`1<UIntPtr> CompareNotEqual(Vector128`1<UIntPtr> left, Vector128`1<UIntPtr> right);
    public static Vector128`1<sbyte> CompareLessThan(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> CompareLessThan(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareLessThan(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> CompareLessThan(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> CompareLessThan(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> CompareLessThan(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<long> CompareLessThan(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> CompareLessThan(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<float> CompareLessThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> CompareLessThan(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<IntPtr> CompareLessThan(Vector128`1<IntPtr> left, Vector128`1<IntPtr> right);
    public static Vector128`1<UIntPtr> CompareLessThan(Vector128`1<UIntPtr> left, Vector128`1<UIntPtr> right);
    public static Vector128`1<sbyte> CompareLessThanOrEqual(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> CompareLessThanOrEqual(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareLessThanOrEqual(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> CompareLessThanOrEqual(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> CompareLessThanOrEqual(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> CompareLessThanOrEqual(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<long> CompareLessThanOrEqual(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> CompareLessThanOrEqual(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<float> CompareLessThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> CompareLessThanOrEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<IntPtr> CompareLessThanOrEqual(Vector128`1<IntPtr> left, Vector128`1<IntPtr> right);
    public static Vector128`1<UIntPtr> CompareLessThanOrEqual(Vector128`1<UIntPtr> left, Vector128`1<UIntPtr> right);
    public static Vector128`1<sbyte> CompareGreaterThan(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> CompareGreaterThan(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareGreaterThan(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> CompareGreaterThan(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> CompareGreaterThan(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> CompareGreaterThan(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<long> CompareGreaterThan(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> CompareGreaterThan(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<float> CompareGreaterThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> CompareGreaterThan(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<IntPtr> CompareGreaterThan(Vector128`1<IntPtr> left, Vector128`1<IntPtr> right);
    public static Vector128`1<UIntPtr> CompareGreaterThan(Vector128`1<UIntPtr> left, Vector128`1<UIntPtr> right);
    public static Vector128`1<sbyte> CompareGreaterThanOrEqual(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<byte> CompareGreaterThanOrEqual(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareGreaterThanOrEqual(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> CompareGreaterThanOrEqual(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<int> CompareGreaterThanOrEqual(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> CompareGreaterThanOrEqual(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<long> CompareGreaterThanOrEqual(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> CompareGreaterThanOrEqual(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<float> CompareGreaterThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> CompareGreaterThanOrEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<IntPtr> CompareGreaterThanOrEqual(Vector128`1<IntPtr> left, Vector128`1<IntPtr> right);
    public static Vector128`1<UIntPtr> CompareGreaterThanOrEqual(Vector128`1<UIntPtr> left, Vector128`1<UIntPtr> right);
    public static Vector128`1<sbyte> LoadVector128(SByte* address);
    public static Vector128`1<byte> LoadVector128(Byte* address);
    public static Vector128`1<short> LoadVector128(Int16* address);
    public static Vector128`1<ushort> LoadVector128(UInt16* address);
    public static Vector128`1<int> LoadVector128(Int32* address);
    public static Vector128`1<UInt32> LoadVector128(UInt32* address);
    public static Vector128`1<long> LoadVector128(Int64* address);
    public static Vector128`1<ulong> LoadVector128(UInt64* address);
    public static Vector128`1<float> LoadVector128(Single* address);
    public static Vector128`1<double> LoadVector128(Double* address);
    public static Vector128`1<IntPtr> LoadVector128(IntPtr* address);
    public static Vector128`1<UIntPtr> LoadVector128(UIntPtr* address);
    public static Vector128`1<int> LoadScalarVector128(Int32* address);
    public static Vector128`1<UInt32> LoadScalarVector128(UInt32* address);
    public static Vector128`1<long> LoadScalarVector128(Int64* address);
    public static Vector128`1<ulong> LoadScalarVector128(UInt64* address);
    public static Vector128`1<float> LoadScalarVector128(Single* address);
    public static Vector128`1<double> LoadScalarVector128(Double* address);
    public static Vector128`1<IntPtr> LoadScalarVector128(IntPtr* address);
    public static Vector128`1<UIntPtr> LoadScalarVector128(UIntPtr* address);
    public static Vector128`1<sbyte> LoadScalarAndSplatVector128(SByte* address);
    public static Vector128`1<byte> LoadScalarAndSplatVector128(Byte* address);
    public static Vector128`1<short> LoadScalarAndSplatVector128(Int16* address);
    public static Vector128`1<ushort> LoadScalarAndSplatVector128(UInt16* address);
    public static Vector128`1<int> LoadScalarAndSplatVector128(Int32* address);
    public static Vector128`1<UInt32> LoadScalarAndSplatVector128(UInt32* address);
    public static Vector128`1<long> LoadScalarAndSplatVector128(Int64* address);
    public static Vector128`1<ulong> LoadScalarAndSplatVector128(UInt64* address);
    public static Vector128`1<float> LoadScalarAndSplatVector128(Single* address);
    public static Vector128`1<double> LoadScalarAndSplatVector128(Double* address);
    public static Vector128`1<IntPtr> LoadScalarAndSplatVector128(IntPtr* address);
    public static Vector128`1<UIntPtr> LoadScalarAndSplatVector128(UIntPtr* address);
    public static Vector128`1<sbyte> LoadScalarAndInsert(SByte* address, Vector128`1<sbyte> vector, byte index);
    public static Vector128`1<byte> LoadScalarAndInsert(Byte* address, Vector128`1<byte> vector, byte index);
    public static Vector128`1<short> LoadScalarAndInsert(Int16* address, Vector128`1<short> vector, byte index);
    public static Vector128`1<ushort> LoadScalarAndInsert(UInt16* address, Vector128`1<ushort> vector, byte index);
    public static Vector128`1<int> LoadScalarAndInsert(Int32* address, Vector128`1<int> vector, byte index);
    public static Vector128`1<UInt32> LoadScalarAndInsert(UInt32* address, Vector128`1<UInt32> vector, byte index);
    public static Vector128`1<long> LoadScalarAndInsert(Int64* address, Vector128`1<long> vector, byte index);
    public static Vector128`1<ulong> LoadScalarAndInsert(UInt64* address, Vector128`1<ulong> vector, byte index);
    public static Vector128`1<float> LoadScalarAndInsert(Single* address, Vector128`1<float> vector, byte index);
    public static Vector128`1<double> LoadScalarAndInsert(Double* address, Vector128`1<double> vector, byte index);
    public static Vector128`1<IntPtr> LoadScalarAndInsert(IntPtr* address, Vector128`1<IntPtr> vector, byte index);
    public static Vector128`1<UIntPtr> LoadScalarAndInsert(UIntPtr* address, Vector128`1<UIntPtr> vector, byte index);
    public static Vector128`1<short> LoadWideningVector128(SByte* address);
    public static Vector128`1<ushort> LoadWideningVector128(Byte* address);
    public static Vector128`1<int> LoadWideningVector128(Int16* address);
    public static Vector128`1<UInt32> LoadWideningVector128(UInt16* address);
    public static Vector128`1<long> LoadWideningVector128(Int32* address);
    public static Vector128`1<ulong> LoadWideningVector128(UInt32* address);
    public static void Store(SByte* address, Vector128`1<sbyte> source);
    public static void Store(Byte* address, Vector128`1<byte> source);
    public static void Store(Int16* address, Vector128`1<short> source);
    public static void Store(UInt16* address, Vector128`1<ushort> source);
    public static void Store(Int32* address, Vector128`1<int> source);
    public static void Store(UInt32* address, Vector128`1<UInt32> source);
    public static void Store(Int64* address, Vector128`1<long> source);
    public static void Store(UInt64* address, Vector128`1<ulong> source);
    public static void Store(Single* address, Vector128`1<float> source);
    public static void Store(Double* address, Vector128`1<double> source);
    public static void Store(IntPtr* address, Vector128`1<IntPtr> source);
    public static void Store(UIntPtr* address, Vector128`1<UIntPtr> source);
    public static void StoreSelectedScalar(SByte* address, Vector128`1<sbyte> source, byte index);
    public static void StoreSelectedScalar(Byte* address, Vector128`1<byte> source, byte index);
    public static void StoreSelectedScalar(Int16* address, Vector128`1<short> source, byte index);
    public static void StoreSelectedScalar(UInt16* address, Vector128`1<ushort> source, byte index);
    public static void StoreSelectedScalar(Int32* address, Vector128`1<int> source, byte index);
    public static void StoreSelectedScalar(UInt32* address, Vector128`1<UInt32> source, byte index);
    public static void StoreSelectedScalar(Int64* address, Vector128`1<long> source, byte index);
    public static void StoreSelectedScalar(UInt64* address, Vector128`1<ulong> source, byte index);
    public static void StoreSelectedScalar(Single* address, Vector128`1<float> source, byte index);
    public static void StoreSelectedScalar(Double* address, Vector128`1<double> source, byte index);
    public static void StoreSelectedScalar(IntPtr* address, Vector128`1<IntPtr> source, byte index);
    public static void StoreSelectedScalar(UIntPtr* address, Vector128`1<UIntPtr> source, byte index);
    public static Vector128`1<float> Negate(Vector128`1<float> value);
    public static Vector128`1<double> Negate(Vector128`1<double> value);
    public static Vector128`1<float> Abs(Vector128`1<float> value);
    public static Vector128`1<double> Abs(Vector128`1<double> value);
    public static Vector128`1<float> Min(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> Min(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<float> Max(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> Max(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<float> PseudoMin(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> PseudoMin(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<float> PseudoMax(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> PseudoMax(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<float> Add(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> Add(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<float> Subtract(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> Subtract(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<float> Divide(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> Divide(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<float> Multiply(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> Multiply(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<float> Sqrt(Vector128`1<float> value);
    public static Vector128`1<double> Sqrt(Vector128`1<double> value);
    public static Vector128`1<float> Ceiling(Vector128`1<float> value);
    public static Vector128`1<double> Ceiling(Vector128`1<double> value);
    public static Vector128`1<float> Floor(Vector128`1<float> value);
    public static Vector128`1<double> Floor(Vector128`1<double> value);
    public static Vector128`1<float> Truncate(Vector128`1<float> value);
    public static Vector128`1<double> Truncate(Vector128`1<double> value);
    public static Vector128`1<float> RoundToNearest(Vector128`1<float> value);
    public static Vector128`1<double> RoundToNearest(Vector128`1<double> value);
    public static Vector128`1<float> ConvertToSingle(Vector128`1<int> value);
    public static Vector128`1<float> ConvertToSingle(Vector128`1<UInt32> value);
    public static Vector128`1<float> ConvertToSingle(Vector128`1<double> value);
    public static Vector128`1<double> ConvertToDoubleLower(Vector128`1<int> value);
    public static Vector128`1<double> ConvertToDoubleLower(Vector128`1<UInt32> value);
    public static Vector128`1<double> ConvertToDoubleLower(Vector128`1<float> value);
    public static Vector128`1<int> ConvertToInt32Saturate(Vector128`1<float> value);
    public static Vector128`1<UInt32> ConvertToUInt32Saturate(Vector128`1<float> value);
    public static Vector128`1<int> ConvertToInt32Saturate(Vector128`1<double> value);
    public static Vector128`1<UInt32> ConvertToUInt32Saturate(Vector128`1<double> value);
    public static Vector128`1<sbyte> ConvertNarrowingSaturateSigned(Vector128`1<short> lower, Vector128`1<short> upper);
    public static Vector128`1<short> ConvertNarrowingSaturateSigned(Vector128`1<int> lower, Vector128`1<int> upper);
    public static Vector128`1<byte> ConvertNarrowingSaturateUnsigned(Vector128`1<short> lower, Vector128`1<short> upper);
    public static Vector128`1<ushort> ConvertNarrowingSaturateUnsigned(Vector128`1<int> lower, Vector128`1<int> upper);
    public static Vector128`1<short> SignExtendWideningLower(Vector128`1<sbyte> value);
    public static Vector128`1<ushort> SignExtendWideningLower(Vector128`1<byte> value);
    public static Vector128`1<int> SignExtendWideningLower(Vector128`1<short> value);
    public static Vector128`1<UInt32> SignExtendWideningLower(Vector128`1<ushort> value);
    public static Vector128`1<long> SignExtendWideningLower(Vector128`1<int> value);
    public static Vector128`1<ulong> SignExtendWideningLower(Vector128`1<UInt32> value);
    public static Vector128`1<short> SignExtendWideningUpper(Vector128`1<sbyte> value);
    public static Vector128`1<ushort> SignExtendWideningUpper(Vector128`1<byte> value);
    public static Vector128`1<int> SignExtendWideningUpper(Vector128`1<short> value);
    public static Vector128`1<UInt32> SignExtendWideningUpper(Vector128`1<ushort> value);
    public static Vector128`1<long> SignExtendWideningUpper(Vector128`1<int> value);
    public static Vector128`1<ulong> SignExtendWideningUpper(Vector128`1<UInt32> value);
    public static Vector128`1<short> ZeroExtendWideningLower(Vector128`1<sbyte> value);
    public static Vector128`1<ushort> ZeroExtendWideningLower(Vector128`1<byte> value);
    public static Vector128`1<int> ZeroExtendWideningLower(Vector128`1<short> value);
    public static Vector128`1<UInt32> ZeroExtendWideningLower(Vector128`1<ushort> value);
    public static Vector128`1<long> ZeroExtendWideningLower(Vector128`1<int> value);
    public static Vector128`1<ulong> ZeroExtendWideningLower(Vector128`1<UInt32> value);
    public static Vector128`1<short> ZeroExtendWideningUpper(Vector128`1<sbyte> value);
    public static Vector128`1<ushort> ZeroExtendWideningUpper(Vector128`1<byte> value);
    public static Vector128`1<int> ZeroExtendWideningUpper(Vector128`1<short> value);
    public static Vector128`1<UInt32> ZeroExtendWideningUpper(Vector128`1<ushort> value);
    public static Vector128`1<long> ZeroExtendWideningUpper(Vector128`1<int> value);
    public static Vector128`1<ulong> ZeroExtendWideningUpper(Vector128`1<UInt32> value);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Aes : Sse2 {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<byte> Decrypt(Vector128`1<byte> value, Vector128`1<byte> roundKey);
    public static Vector128`1<byte> DecryptLast(Vector128`1<byte> value, Vector128`1<byte> roundKey);
    public static Vector128`1<byte> Encrypt(Vector128`1<byte> value, Vector128`1<byte> roundKey);
    public static Vector128`1<byte> EncryptLast(Vector128`1<byte> value, Vector128`1<byte> roundKey);
    public static Vector128`1<byte> InverseMixColumns(Vector128`1<byte> value);
    public static Vector128`1<byte> KeygenAssist(Vector128`1<byte> value, byte control);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Avx : Sse42 {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector256`1<double> Add(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> Add(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> AddSubtract(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> AddSubtract(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> And(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> And(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> AndNot(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> AndNot(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> Blend(Vector256`1<double> left, Vector256`1<double> right, byte control);
    public static Vector256`1<float> Blend(Vector256`1<float> left, Vector256`1<float> right, byte control);
    public static Vector256`1<double> BlendVariable(Vector256`1<double> left, Vector256`1<double> right, Vector256`1<double> mask);
    public static Vector256`1<float> BlendVariable(Vector256`1<float> left, Vector256`1<float> right, Vector256`1<float> mask);
    public static Vector128`1<float> BroadcastScalarToVector128(Single* source);
    public static Vector256`1<double> BroadcastScalarToVector256(Double* source);
    public static Vector256`1<float> BroadcastScalarToVector256(Single* source);
    public static Vector256`1<double> BroadcastVector128ToVector256(Double* address);
    public static Vector256`1<float> BroadcastVector128ToVector256(Single* address);
    public static Vector256`1<double> Ceiling(Vector256`1<double> value);
    public static Vector256`1<float> Ceiling(Vector256`1<float> value);
    public static Vector128`1<double> Compare(Vector128`1<double> left, Vector128`1<double> right, FloatComparisonMode mode);
    public static Vector128`1<float> Compare(Vector128`1<float> left, Vector128`1<float> right, FloatComparisonMode mode);
    public static Vector256`1<double> Compare(Vector256`1<double> left, Vector256`1<double> right, FloatComparisonMode mode);
    public static Vector256`1<float> Compare(Vector256`1<float> left, Vector256`1<float> right, FloatComparisonMode mode);
    public static Vector256`1<double> CompareEqual(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> CompareEqual(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> CompareGreaterThan(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> CompareGreaterThan(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> CompareGreaterThanOrEqual(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> CompareGreaterThanOrEqual(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> CompareLessThan(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> CompareLessThan(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> CompareLessThanOrEqual(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> CompareLessThanOrEqual(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> CompareNotEqual(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> CompareNotEqual(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> CompareNotGreaterThan(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> CompareNotGreaterThan(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> CompareNotGreaterThanOrEqual(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> CompareNotGreaterThanOrEqual(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> CompareNotLessThan(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> CompareNotLessThan(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> CompareNotLessThanOrEqual(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> CompareNotLessThanOrEqual(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> CompareOrdered(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> CompareOrdered(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector128`1<double> CompareScalar(Vector128`1<double> left, Vector128`1<double> right, FloatComparisonMode mode);
    public static Vector128`1<float> CompareScalar(Vector128`1<float> left, Vector128`1<float> right, FloatComparisonMode mode);
    public static Vector256`1<double> CompareUnordered(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> CompareUnordered(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector128`1<int> ConvertToVector128Int32(Vector256`1<double> value);
    public static Vector128`1<int> ConvertToVector128Int32WithTruncation(Vector256`1<double> value);
    public static Vector128`1<float> ConvertToVector128Single(Vector256`1<double> value);
    public static Vector256`1<double> ConvertToVector256Double(Vector128`1<int> value);
    public static Vector256`1<double> ConvertToVector256Double(Vector128`1<float> value);
    public static Vector256`1<int> ConvertToVector256Int32(Vector256`1<float> value);
    public static Vector256`1<int> ConvertToVector256Int32WithTruncation(Vector256`1<float> value);
    public static Vector256`1<float> ConvertToVector256Single(Vector256`1<int> value);
    public static Vector256`1<double> Divide(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> Divide(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<float> DotProduct(Vector256`1<float> left, Vector256`1<float> right, byte control);
    public static Vector256`1<double> DuplicateEvenIndexed(Vector256`1<double> value);
    public static Vector256`1<float> DuplicateEvenIndexed(Vector256`1<float> value);
    public static Vector256`1<float> DuplicateOddIndexed(Vector256`1<float> value);
    public static Vector128`1<byte> ExtractVector128(Vector256`1<byte> value, byte index);
    public static Vector128`1<double> ExtractVector128(Vector256`1<double> value, byte index);
    public static Vector128`1<short> ExtractVector128(Vector256`1<short> value, byte index);
    public static Vector128`1<int> ExtractVector128(Vector256`1<int> value, byte index);
    public static Vector128`1<long> ExtractVector128(Vector256`1<long> value, byte index);
    public static Vector128`1<sbyte> ExtractVector128(Vector256`1<sbyte> value, byte index);
    public static Vector128`1<float> ExtractVector128(Vector256`1<float> value, byte index);
    public static Vector128`1<ushort> ExtractVector128(Vector256`1<ushort> value, byte index);
    public static Vector128`1<UInt32> ExtractVector128(Vector256`1<UInt32> value, byte index);
    public static Vector128`1<ulong> ExtractVector128(Vector256`1<ulong> value, byte index);
    public static Vector256`1<double> Floor(Vector256`1<double> value);
    public static Vector256`1<float> Floor(Vector256`1<float> value);
    public static Vector256`1<double> HorizontalAdd(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> HorizontalAdd(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> HorizontalSubtract(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> HorizontalSubtract(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<byte> InsertVector128(Vector256`1<byte> value, Vector128`1<byte> data, byte index);
    public static Vector256`1<double> InsertVector128(Vector256`1<double> value, Vector128`1<double> data, byte index);
    public static Vector256`1<short> InsertVector128(Vector256`1<short> value, Vector128`1<short> data, byte index);
    public static Vector256`1<int> InsertVector128(Vector256`1<int> value, Vector128`1<int> data, byte index);
    public static Vector256`1<long> InsertVector128(Vector256`1<long> value, Vector128`1<long> data, byte index);
    public static Vector256`1<sbyte> InsertVector128(Vector256`1<sbyte> value, Vector128`1<sbyte> data, byte index);
    public static Vector256`1<float> InsertVector128(Vector256`1<float> value, Vector128`1<float> data, byte index);
    public static Vector256`1<ushort> InsertVector128(Vector256`1<ushort> value, Vector128`1<ushort> data, byte index);
    public static Vector256`1<UInt32> InsertVector128(Vector256`1<UInt32> value, Vector128`1<UInt32> data, byte index);
    public static Vector256`1<ulong> InsertVector128(Vector256`1<ulong> value, Vector128`1<ulong> data, byte index);
    public static Vector256`1<byte> LoadAlignedVector256(Byte* address);
    public static Vector256`1<double> LoadAlignedVector256(Double* address);
    public static Vector256`1<short> LoadAlignedVector256(Int16* address);
    public static Vector256`1<int> LoadAlignedVector256(Int32* address);
    public static Vector256`1<long> LoadAlignedVector256(Int64* address);
    public static Vector256`1<sbyte> LoadAlignedVector256(SByte* address);
    public static Vector256`1<float> LoadAlignedVector256(Single* address);
    public static Vector256`1<ushort> LoadAlignedVector256(UInt16* address);
    public static Vector256`1<UInt32> LoadAlignedVector256(UInt32* address);
    public static Vector256`1<ulong> LoadAlignedVector256(UInt64* address);
    public static Vector256`1<byte> LoadDquVector256(Byte* address);
    public static Vector256`1<short> LoadDquVector256(Int16* address);
    public static Vector256`1<int> LoadDquVector256(Int32* address);
    public static Vector256`1<long> LoadDquVector256(Int64* address);
    public static Vector256`1<sbyte> LoadDquVector256(SByte* address);
    public static Vector256`1<ushort> LoadDquVector256(UInt16* address);
    public static Vector256`1<UInt32> LoadDquVector256(UInt32* address);
    public static Vector256`1<ulong> LoadDquVector256(UInt64* address);
    public static Vector256`1<byte> LoadVector256(Byte* address);
    public static Vector256`1<double> LoadVector256(Double* address);
    public static Vector256`1<short> LoadVector256(Int16* address);
    public static Vector256`1<int> LoadVector256(Int32* address);
    public static Vector256`1<long> LoadVector256(Int64* address);
    public static Vector256`1<sbyte> LoadVector256(SByte* address);
    public static Vector256`1<float> LoadVector256(Single* address);
    public static Vector256`1<ushort> LoadVector256(UInt16* address);
    public static Vector256`1<UInt32> LoadVector256(UInt32* address);
    public static Vector256`1<ulong> LoadVector256(UInt64* address);
    public static Vector128`1<double> MaskLoad(Double* address, Vector128`1<double> mask);
    public static Vector256`1<double> MaskLoad(Double* address, Vector256`1<double> mask);
    public static Vector128`1<float> MaskLoad(Single* address, Vector128`1<float> mask);
    public static Vector256`1<float> MaskLoad(Single* address, Vector256`1<float> mask);
    public static void MaskStore(Double* address, Vector128`1<double> mask, Vector128`1<double> source);
    public static void MaskStore(Double* address, Vector256`1<double> mask, Vector256`1<double> source);
    public static void MaskStore(Single* address, Vector128`1<float> mask, Vector128`1<float> source);
    public static void MaskStore(Single* address, Vector256`1<float> mask, Vector256`1<float> source);
    public static Vector256`1<double> Max(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> Max(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> Min(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> Min(Vector256`1<float> left, Vector256`1<float> right);
    public static int MoveMask(Vector256`1<double> value);
    public static int MoveMask(Vector256`1<float> value);
    public static Vector256`1<double> Multiply(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> Multiply(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> Or(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> Or(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector128`1<double> Permute(Vector128`1<double> value, byte control);
    public static Vector128`1<float> Permute(Vector128`1<float> value, byte control);
    public static Vector256`1<double> Permute(Vector256`1<double> value, byte control);
    public static Vector256`1<float> Permute(Vector256`1<float> value, byte control);
    public static Vector256`1<byte> Permute2x128(Vector256`1<byte> left, Vector256`1<byte> right, byte control);
    public static Vector256`1<double> Permute2x128(Vector256`1<double> left, Vector256`1<double> right, byte control);
    public static Vector256`1<short> Permute2x128(Vector256`1<short> left, Vector256`1<short> right, byte control);
    public static Vector256`1<int> Permute2x128(Vector256`1<int> left, Vector256`1<int> right, byte control);
    public static Vector256`1<long> Permute2x128(Vector256`1<long> left, Vector256`1<long> right, byte control);
    public static Vector256`1<sbyte> Permute2x128(Vector256`1<sbyte> left, Vector256`1<sbyte> right, byte control);
    public static Vector256`1<float> Permute2x128(Vector256`1<float> left, Vector256`1<float> right, byte control);
    public static Vector256`1<ushort> Permute2x128(Vector256`1<ushort> left, Vector256`1<ushort> right, byte control);
    public static Vector256`1<UInt32> Permute2x128(Vector256`1<UInt32> left, Vector256`1<UInt32> right, byte control);
    public static Vector256`1<ulong> Permute2x128(Vector256`1<ulong> left, Vector256`1<ulong> right, byte control);
    public static Vector128`1<double> PermuteVar(Vector128`1<double> left, Vector128`1<long> control);
    public static Vector128`1<float> PermuteVar(Vector128`1<float> left, Vector128`1<int> control);
    public static Vector256`1<double> PermuteVar(Vector256`1<double> left, Vector256`1<long> control);
    public static Vector256`1<float> PermuteVar(Vector256`1<float> left, Vector256`1<int> control);
    public static Vector256`1<float> Reciprocal(Vector256`1<float> value);
    public static Vector256`1<float> ReciprocalSqrt(Vector256`1<float> value);
    public static Vector256`1<double> RoundCurrentDirection(Vector256`1<double> value);
    public static Vector256`1<float> RoundCurrentDirection(Vector256`1<float> value);
    public static Vector256`1<double> RoundToNearestInteger(Vector256`1<double> value);
    public static Vector256`1<float> RoundToNearestInteger(Vector256`1<float> value);
    public static Vector256`1<double> RoundToNegativeInfinity(Vector256`1<double> value);
    public static Vector256`1<float> RoundToNegativeInfinity(Vector256`1<float> value);
    public static Vector256`1<double> RoundToPositiveInfinity(Vector256`1<double> value);
    public static Vector256`1<float> RoundToPositiveInfinity(Vector256`1<float> value);
    public static Vector256`1<double> RoundToZero(Vector256`1<double> value);
    public static Vector256`1<float> RoundToZero(Vector256`1<float> value);
    public static Vector256`1<double> Shuffle(Vector256`1<double> value, Vector256`1<double> right, byte control);
    public static Vector256`1<float> Shuffle(Vector256`1<float> value, Vector256`1<float> right, byte control);
    public static Vector256`1<double> Sqrt(Vector256`1<double> value);
    public static Vector256`1<float> Sqrt(Vector256`1<float> value);
    public static void Store(Byte* address, Vector256`1<byte> source);
    public static void Store(Double* address, Vector256`1<double> source);
    public static void Store(Int16* address, Vector256`1<short> source);
    public static void Store(Int32* address, Vector256`1<int> source);
    public static void Store(Int64* address, Vector256`1<long> source);
    public static void Store(SByte* address, Vector256`1<sbyte> source);
    public static void Store(Single* address, Vector256`1<float> source);
    public static void Store(UInt16* address, Vector256`1<ushort> source);
    public static void Store(UInt32* address, Vector256`1<UInt32> source);
    public static void Store(UInt64* address, Vector256`1<ulong> source);
    public static void StoreAligned(Byte* address, Vector256`1<byte> source);
    public static void StoreAligned(Double* address, Vector256`1<double> source);
    public static void StoreAligned(Int16* address, Vector256`1<short> source);
    public static void StoreAligned(Int32* address, Vector256`1<int> source);
    public static void StoreAligned(Int64* address, Vector256`1<long> source);
    public static void StoreAligned(SByte* address, Vector256`1<sbyte> source);
    public static void StoreAligned(Single* address, Vector256`1<float> source);
    public static void StoreAligned(UInt16* address, Vector256`1<ushort> source);
    public static void StoreAligned(UInt32* address, Vector256`1<UInt32> source);
    public static void StoreAligned(UInt64* address, Vector256`1<ulong> source);
    public static void StoreAlignedNonTemporal(Byte* address, Vector256`1<byte> source);
    public static void StoreAlignedNonTemporal(Double* address, Vector256`1<double> source);
    public static void StoreAlignedNonTemporal(Int16* address, Vector256`1<short> source);
    public static void StoreAlignedNonTemporal(Int32* address, Vector256`1<int> source);
    public static void StoreAlignedNonTemporal(Int64* address, Vector256`1<long> source);
    public static void StoreAlignedNonTemporal(SByte* address, Vector256`1<sbyte> source);
    public static void StoreAlignedNonTemporal(Single* address, Vector256`1<float> source);
    public static void StoreAlignedNonTemporal(UInt16* address, Vector256`1<ushort> source);
    public static void StoreAlignedNonTemporal(UInt32* address, Vector256`1<UInt32> source);
    public static void StoreAlignedNonTemporal(UInt64* address, Vector256`1<ulong> source);
    public static Vector256`1<double> Subtract(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> Subtract(Vector256`1<float> left, Vector256`1<float> right);
    public static bool TestC(Vector128`1<double> left, Vector128`1<double> right);
    public static bool TestC(Vector128`1<float> left, Vector128`1<float> right);
    public static bool TestC(Vector256`1<byte> left, Vector256`1<byte> right);
    public static bool TestC(Vector256`1<double> left, Vector256`1<double> right);
    public static bool TestC(Vector256`1<short> left, Vector256`1<short> right);
    public static bool TestC(Vector256`1<int> left, Vector256`1<int> right);
    public static bool TestC(Vector256`1<long> left, Vector256`1<long> right);
    public static bool TestC(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static bool TestC(Vector256`1<float> left, Vector256`1<float> right);
    public static bool TestC(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static bool TestC(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static bool TestC(Vector256`1<ulong> left, Vector256`1<ulong> right);
    public static bool TestNotZAndNotC(Vector128`1<double> left, Vector128`1<double> right);
    public static bool TestNotZAndNotC(Vector128`1<float> left, Vector128`1<float> right);
    public static bool TestNotZAndNotC(Vector256`1<byte> left, Vector256`1<byte> right);
    public static bool TestNotZAndNotC(Vector256`1<double> left, Vector256`1<double> right);
    public static bool TestNotZAndNotC(Vector256`1<short> left, Vector256`1<short> right);
    public static bool TestNotZAndNotC(Vector256`1<int> left, Vector256`1<int> right);
    public static bool TestNotZAndNotC(Vector256`1<long> left, Vector256`1<long> right);
    public static bool TestNotZAndNotC(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static bool TestNotZAndNotC(Vector256`1<float> left, Vector256`1<float> right);
    public static bool TestNotZAndNotC(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static bool TestNotZAndNotC(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static bool TestNotZAndNotC(Vector256`1<ulong> left, Vector256`1<ulong> right);
    public static bool TestZ(Vector128`1<double> left, Vector128`1<double> right);
    public static bool TestZ(Vector128`1<float> left, Vector128`1<float> right);
    public static bool TestZ(Vector256`1<byte> left, Vector256`1<byte> right);
    public static bool TestZ(Vector256`1<double> left, Vector256`1<double> right);
    public static bool TestZ(Vector256`1<short> left, Vector256`1<short> right);
    public static bool TestZ(Vector256`1<int> left, Vector256`1<int> right);
    public static bool TestZ(Vector256`1<long> left, Vector256`1<long> right);
    public static bool TestZ(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static bool TestZ(Vector256`1<float> left, Vector256`1<float> right);
    public static bool TestZ(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static bool TestZ(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static bool TestZ(Vector256`1<ulong> left, Vector256`1<ulong> right);
    public static Vector256`1<double> UnpackHigh(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> UnpackHigh(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> UnpackLow(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> UnpackLow(Vector256`1<float> left, Vector256`1<float> right);
    public static Vector256`1<double> Xor(Vector256`1<double> left, Vector256`1<double> right);
    public static Vector256`1<float> Xor(Vector256`1<float> left, Vector256`1<float> right);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Avx2 : Avx {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector256`1<ushort> Abs(Vector256`1<short> value);
    public static Vector256`1<UInt32> Abs(Vector256`1<int> value);
    public static Vector256`1<byte> Abs(Vector256`1<sbyte> value);
    public static Vector256`1<byte> Add(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<short> Add(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> Add(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<long> Add(Vector256`1<long> left, Vector256`1<long> right);
    public static Vector256`1<sbyte> Add(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static Vector256`1<ushort> Add(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<UInt32> Add(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static Vector256`1<ulong> Add(Vector256`1<ulong> left, Vector256`1<ulong> right);
    public static Vector256`1<byte> AddSaturate(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<short> AddSaturate(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<sbyte> AddSaturate(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static Vector256`1<ushort> AddSaturate(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<byte> AlignRight(Vector256`1<byte> left, Vector256`1<byte> right, byte mask);
    public static Vector256`1<short> AlignRight(Vector256`1<short> left, Vector256`1<short> right, byte mask);
    public static Vector256`1<int> AlignRight(Vector256`1<int> left, Vector256`1<int> right, byte mask);
    public static Vector256`1<long> AlignRight(Vector256`1<long> left, Vector256`1<long> right, byte mask);
    public static Vector256`1<sbyte> AlignRight(Vector256`1<sbyte> left, Vector256`1<sbyte> right, byte mask);
    public static Vector256`1<ushort> AlignRight(Vector256`1<ushort> left, Vector256`1<ushort> right, byte mask);
    public static Vector256`1<UInt32> AlignRight(Vector256`1<UInt32> left, Vector256`1<UInt32> right, byte mask);
    public static Vector256`1<ulong> AlignRight(Vector256`1<ulong> left, Vector256`1<ulong> right, byte mask);
    public static Vector256`1<byte> And(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<short> And(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> And(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<long> And(Vector256`1<long> left, Vector256`1<long> right);
    public static Vector256`1<sbyte> And(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static Vector256`1<ushort> And(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<UInt32> And(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static Vector256`1<ulong> And(Vector256`1<ulong> left, Vector256`1<ulong> right);
    public static Vector256`1<byte> AndNot(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<short> AndNot(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> AndNot(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<long> AndNot(Vector256`1<long> left, Vector256`1<long> right);
    public static Vector256`1<sbyte> AndNot(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static Vector256`1<ushort> AndNot(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<UInt32> AndNot(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static Vector256`1<ulong> AndNot(Vector256`1<ulong> left, Vector256`1<ulong> right);
    public static Vector256`1<byte> Average(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<ushort> Average(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector128`1<int> Blend(Vector128`1<int> left, Vector128`1<int> right, byte control);
    public static Vector128`1<UInt32> Blend(Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte control);
    public static Vector256`1<short> Blend(Vector256`1<short> left, Vector256`1<short> right, byte control);
    public static Vector256`1<int> Blend(Vector256`1<int> left, Vector256`1<int> right, byte control);
    public static Vector256`1<ushort> Blend(Vector256`1<ushort> left, Vector256`1<ushort> right, byte control);
    public static Vector256`1<UInt32> Blend(Vector256`1<UInt32> left, Vector256`1<UInt32> right, byte control);
    public static Vector256`1<byte> BlendVariable(Vector256`1<byte> left, Vector256`1<byte> right, Vector256`1<byte> mask);
    public static Vector256`1<short> BlendVariable(Vector256`1<short> left, Vector256`1<short> right, Vector256`1<short> mask);
    public static Vector256`1<int> BlendVariable(Vector256`1<int> left, Vector256`1<int> right, Vector256`1<int> mask);
    public static Vector256`1<long> BlendVariable(Vector256`1<long> left, Vector256`1<long> right, Vector256`1<long> mask);
    public static Vector256`1<sbyte> BlendVariable(Vector256`1<sbyte> left, Vector256`1<sbyte> right, Vector256`1<sbyte> mask);
    public static Vector256`1<ushort> BlendVariable(Vector256`1<ushort> left, Vector256`1<ushort> right, Vector256`1<ushort> mask);
    public static Vector256`1<UInt32> BlendVariable(Vector256`1<UInt32> left, Vector256`1<UInt32> right, Vector256`1<UInt32> mask);
    public static Vector256`1<ulong> BlendVariable(Vector256`1<ulong> left, Vector256`1<ulong> right, Vector256`1<ulong> mask);
    public static Vector128`1<byte> BroadcastScalarToVector128(Byte* source);
    public static Vector128`1<short> BroadcastScalarToVector128(Int16* source);
    public static Vector128`1<int> BroadcastScalarToVector128(Int32* source);
    public static Vector128`1<long> BroadcastScalarToVector128(Int64* source);
    public static Vector128`1<byte> BroadcastScalarToVector128(Vector128`1<byte> value);
    public static Vector128`1<double> BroadcastScalarToVector128(Vector128`1<double> value);
    public static Vector128`1<short> BroadcastScalarToVector128(Vector128`1<short> value);
    public static Vector128`1<int> BroadcastScalarToVector128(Vector128`1<int> value);
    public static Vector128`1<long> BroadcastScalarToVector128(Vector128`1<long> value);
    public static Vector128`1<sbyte> BroadcastScalarToVector128(Vector128`1<sbyte> value);
    public static Vector128`1<float> BroadcastScalarToVector128(Vector128`1<float> value);
    public static Vector128`1<ushort> BroadcastScalarToVector128(Vector128`1<ushort> value);
    public static Vector128`1<UInt32> BroadcastScalarToVector128(Vector128`1<UInt32> value);
    public static Vector128`1<ulong> BroadcastScalarToVector128(Vector128`1<ulong> value);
    public static Vector128`1<sbyte> BroadcastScalarToVector128(SByte* source);
    public static Vector128`1<ushort> BroadcastScalarToVector128(UInt16* source);
    public static Vector128`1<UInt32> BroadcastScalarToVector128(UInt32* source);
    public static Vector128`1<ulong> BroadcastScalarToVector128(UInt64* source);
    public static Vector256`1<byte> BroadcastScalarToVector256(Byte* source);
    public static Vector256`1<short> BroadcastScalarToVector256(Int16* source);
    public static Vector256`1<int> BroadcastScalarToVector256(Int32* source);
    public static Vector256`1<long> BroadcastScalarToVector256(Int64* source);
    public static Vector256`1<byte> BroadcastScalarToVector256(Vector128`1<byte> value);
    public static Vector256`1<double> BroadcastScalarToVector256(Vector128`1<double> value);
    public static Vector256`1<short> BroadcastScalarToVector256(Vector128`1<short> value);
    public static Vector256`1<int> BroadcastScalarToVector256(Vector128`1<int> value);
    public static Vector256`1<long> BroadcastScalarToVector256(Vector128`1<long> value);
    public static Vector256`1<sbyte> BroadcastScalarToVector256(Vector128`1<sbyte> value);
    public static Vector256`1<float> BroadcastScalarToVector256(Vector128`1<float> value);
    public static Vector256`1<ushort> BroadcastScalarToVector256(Vector128`1<ushort> value);
    public static Vector256`1<UInt32> BroadcastScalarToVector256(Vector128`1<UInt32> value);
    public static Vector256`1<ulong> BroadcastScalarToVector256(Vector128`1<ulong> value);
    public static Vector256`1<sbyte> BroadcastScalarToVector256(SByte* source);
    public static Vector256`1<ushort> BroadcastScalarToVector256(UInt16* source);
    public static Vector256`1<UInt32> BroadcastScalarToVector256(UInt32* source);
    public static Vector256`1<ulong> BroadcastScalarToVector256(UInt64* source);
    public static Vector256`1<byte> BroadcastVector128ToVector256(Byte* address);
    public static Vector256`1<short> BroadcastVector128ToVector256(Int16* address);
    public static Vector256`1<int> BroadcastVector128ToVector256(Int32* address);
    public static Vector256`1<long> BroadcastVector128ToVector256(Int64* address);
    public static Vector256`1<sbyte> BroadcastVector128ToVector256(SByte* address);
    public static Vector256`1<ushort> BroadcastVector128ToVector256(UInt16* address);
    public static Vector256`1<UInt32> BroadcastVector128ToVector256(UInt32* address);
    public static Vector256`1<ulong> BroadcastVector128ToVector256(UInt64* address);
    public static Vector256`1<byte> CompareEqual(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<short> CompareEqual(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> CompareEqual(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<long> CompareEqual(Vector256`1<long> left, Vector256`1<long> right);
    public static Vector256`1<sbyte> CompareEqual(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static Vector256`1<ushort> CompareEqual(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<UInt32> CompareEqual(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static Vector256`1<ulong> CompareEqual(Vector256`1<ulong> left, Vector256`1<ulong> right);
    public static Vector256`1<short> CompareGreaterThan(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> CompareGreaterThan(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<long> CompareGreaterThan(Vector256`1<long> left, Vector256`1<long> right);
    public static Vector256`1<sbyte> CompareGreaterThan(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static int ConvertToInt32(Vector256`1<int> value);
    public static UInt32 ConvertToUInt32(Vector256`1<UInt32> value);
    public static Vector256`1<short> ConvertToVector256Int16(Byte* address);
    public static Vector256`1<short> ConvertToVector256Int16(Vector128`1<byte> value);
    public static Vector256`1<short> ConvertToVector256Int16(Vector128`1<sbyte> value);
    public static Vector256`1<short> ConvertToVector256Int16(SByte* address);
    public static Vector256`1<int> ConvertToVector256Int32(Byte* address);
    public static Vector256`1<int> ConvertToVector256Int32(Int16* address);
    public static Vector256`1<int> ConvertToVector256Int32(Vector128`1<byte> value);
    public static Vector256`1<int> ConvertToVector256Int32(Vector128`1<short> value);
    public static Vector256`1<int> ConvertToVector256Int32(Vector128`1<sbyte> value);
    public static Vector256`1<int> ConvertToVector256Int32(Vector128`1<ushort> value);
    public static Vector256`1<int> ConvertToVector256Int32(SByte* address);
    public static Vector256`1<int> ConvertToVector256Int32(UInt16* address);
    public static Vector256`1<long> ConvertToVector256Int64(Byte* address);
    public static Vector256`1<long> ConvertToVector256Int64(Int16* address);
    public static Vector256`1<long> ConvertToVector256Int64(Int32* address);
    public static Vector256`1<long> ConvertToVector256Int64(Vector128`1<byte> value);
    public static Vector256`1<long> ConvertToVector256Int64(Vector128`1<short> value);
    public static Vector256`1<long> ConvertToVector256Int64(Vector128`1<int> value);
    public static Vector256`1<long> ConvertToVector256Int64(Vector128`1<sbyte> value);
    public static Vector256`1<long> ConvertToVector256Int64(Vector128`1<ushort> value);
    public static Vector256`1<long> ConvertToVector256Int64(Vector128`1<UInt32> value);
    public static Vector256`1<long> ConvertToVector256Int64(SByte* address);
    public static Vector256`1<long> ConvertToVector256Int64(UInt16* address);
    public static Vector256`1<long> ConvertToVector256Int64(UInt32* address);
    public static Vector128`1<byte> ExtractVector128(Vector256`1<byte> value, byte index);
    public static Vector128`1<short> ExtractVector128(Vector256`1<short> value, byte index);
    public static Vector128`1<int> ExtractVector128(Vector256`1<int> value, byte index);
    public static Vector128`1<long> ExtractVector128(Vector256`1<long> value, byte index);
    public static Vector128`1<sbyte> ExtractVector128(Vector256`1<sbyte> value, byte index);
    public static Vector128`1<ushort> ExtractVector128(Vector256`1<ushort> value, byte index);
    public static Vector128`1<UInt32> ExtractVector128(Vector256`1<UInt32> value, byte index);
    public static Vector128`1<ulong> ExtractVector128(Vector256`1<ulong> value, byte index);
    public static Vector128`1<double> GatherMaskVector128(Vector128`1<double> source, Double* baseAddress, Vector128`1<int> index, Vector128`1<double> mask, byte scale);
    public static Vector128`1<double> GatherMaskVector128(Vector128`1<double> source, Double* baseAddress, Vector128`1<long> index, Vector128`1<double> mask, byte scale);
    public static Vector128`1<int> GatherMaskVector128(Vector128`1<int> source, Int32* baseAddress, Vector128`1<int> index, Vector128`1<int> mask, byte scale);
    public static Vector128`1<int> GatherMaskVector128(Vector128`1<int> source, Int32* baseAddress, Vector128`1<long> index, Vector128`1<int> mask, byte scale);
    public static Vector128`1<int> GatherMaskVector128(Vector128`1<int> source, Int32* baseAddress, Vector256`1<long> index, Vector128`1<int> mask, byte scale);
    public static Vector128`1<long> GatherMaskVector128(Vector128`1<long> source, Int64* baseAddress, Vector128`1<int> index, Vector128`1<long> mask, byte scale);
    public static Vector128`1<long> GatherMaskVector128(Vector128`1<long> source, Int64* baseAddress, Vector128`1<long> index, Vector128`1<long> mask, byte scale);
    public static Vector128`1<float> GatherMaskVector128(Vector128`1<float> source, Single* baseAddress, Vector128`1<int> index, Vector128`1<float> mask, byte scale);
    public static Vector128`1<float> GatherMaskVector128(Vector128`1<float> source, Single* baseAddress, Vector128`1<long> index, Vector128`1<float> mask, byte scale);
    public static Vector128`1<float> GatherMaskVector128(Vector128`1<float> source, Single* baseAddress, Vector256`1<long> index, Vector128`1<float> mask, byte scale);
    public static Vector128`1<UInt32> GatherMaskVector128(Vector128`1<UInt32> source, UInt32* baseAddress, Vector128`1<int> index, Vector128`1<UInt32> mask, byte scale);
    public static Vector128`1<UInt32> GatherMaskVector128(Vector128`1<UInt32> source, UInt32* baseAddress, Vector128`1<long> index, Vector128`1<UInt32> mask, byte scale);
    public static Vector128`1<UInt32> GatherMaskVector128(Vector128`1<UInt32> source, UInt32* baseAddress, Vector256`1<long> index, Vector128`1<UInt32> mask, byte scale);
    public static Vector128`1<ulong> GatherMaskVector128(Vector128`1<ulong> source, UInt64* baseAddress, Vector128`1<int> index, Vector128`1<ulong> mask, byte scale);
    public static Vector128`1<ulong> GatherMaskVector128(Vector128`1<ulong> source, UInt64* baseAddress, Vector128`1<long> index, Vector128`1<ulong> mask, byte scale);
    public static Vector256`1<double> GatherMaskVector256(Vector256`1<double> source, Double* baseAddress, Vector128`1<int> index, Vector256`1<double> mask, byte scale);
    public static Vector256`1<double> GatherMaskVector256(Vector256`1<double> source, Double* baseAddress, Vector256`1<long> index, Vector256`1<double> mask, byte scale);
    public static Vector256`1<int> GatherMaskVector256(Vector256`1<int> source, Int32* baseAddress, Vector256`1<int> index, Vector256`1<int> mask, byte scale);
    public static Vector256`1<long> GatherMaskVector256(Vector256`1<long> source, Int64* baseAddress, Vector128`1<int> index, Vector256`1<long> mask, byte scale);
    public static Vector256`1<long> GatherMaskVector256(Vector256`1<long> source, Int64* baseAddress, Vector256`1<long> index, Vector256`1<long> mask, byte scale);
    public static Vector256`1<float> GatherMaskVector256(Vector256`1<float> source, Single* baseAddress, Vector256`1<int> index, Vector256`1<float> mask, byte scale);
    public static Vector256`1<UInt32> GatherMaskVector256(Vector256`1<UInt32> source, UInt32* baseAddress, Vector256`1<int> index, Vector256`1<UInt32> mask, byte scale);
    public static Vector256`1<ulong> GatherMaskVector256(Vector256`1<ulong> source, UInt64* baseAddress, Vector128`1<int> index, Vector256`1<ulong> mask, byte scale);
    public static Vector256`1<ulong> GatherMaskVector256(Vector256`1<ulong> source, UInt64* baseAddress, Vector256`1<long> index, Vector256`1<ulong> mask, byte scale);
    public static Vector128`1<double> GatherVector128(Double* baseAddress, Vector128`1<int> index, byte scale);
    public static Vector128`1<double> GatherVector128(Double* baseAddress, Vector128`1<long> index, byte scale);
    public static Vector128`1<int> GatherVector128(Int32* baseAddress, Vector128`1<int> index, byte scale);
    public static Vector128`1<int> GatherVector128(Int32* baseAddress, Vector128`1<long> index, byte scale);
    public static Vector128`1<int> GatherVector128(Int32* baseAddress, Vector256`1<long> index, byte scale);
    public static Vector128`1<long> GatherVector128(Int64* baseAddress, Vector128`1<int> index, byte scale);
    public static Vector128`1<long> GatherVector128(Int64* baseAddress, Vector128`1<long> index, byte scale);
    public static Vector128`1<float> GatherVector128(Single* baseAddress, Vector128`1<int> index, byte scale);
    public static Vector128`1<float> GatherVector128(Single* baseAddress, Vector128`1<long> index, byte scale);
    public static Vector128`1<float> GatherVector128(Single* baseAddress, Vector256`1<long> index, byte scale);
    public static Vector128`1<UInt32> GatherVector128(UInt32* baseAddress, Vector128`1<int> index, byte scale);
    public static Vector128`1<UInt32> GatherVector128(UInt32* baseAddress, Vector128`1<long> index, byte scale);
    public static Vector128`1<UInt32> GatherVector128(UInt32* baseAddress, Vector256`1<long> index, byte scale);
    public static Vector128`1<ulong> GatherVector128(UInt64* baseAddress, Vector128`1<int> index, byte scale);
    public static Vector128`1<ulong> GatherVector128(UInt64* baseAddress, Vector128`1<long> index, byte scale);
    public static Vector256`1<double> GatherVector256(Double* baseAddress, Vector128`1<int> index, byte scale);
    public static Vector256`1<double> GatherVector256(Double* baseAddress, Vector256`1<long> index, byte scale);
    public static Vector256`1<int> GatherVector256(Int32* baseAddress, Vector256`1<int> index, byte scale);
    public static Vector256`1<long> GatherVector256(Int64* baseAddress, Vector128`1<int> index, byte scale);
    public static Vector256`1<long> GatherVector256(Int64* baseAddress, Vector256`1<long> index, byte scale);
    public static Vector256`1<float> GatherVector256(Single* baseAddress, Vector256`1<int> index, byte scale);
    public static Vector256`1<UInt32> GatherVector256(UInt32* baseAddress, Vector256`1<int> index, byte scale);
    public static Vector256`1<ulong> GatherVector256(UInt64* baseAddress, Vector128`1<int> index, byte scale);
    public static Vector256`1<ulong> GatherVector256(UInt64* baseAddress, Vector256`1<long> index, byte scale);
    public static Vector256`1<short> HorizontalAdd(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> HorizontalAdd(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<short> HorizontalAddSaturate(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<short> HorizontalSubtract(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> HorizontalSubtract(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<short> HorizontalSubtractSaturate(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<byte> InsertVector128(Vector256`1<byte> value, Vector128`1<byte> data, byte index);
    public static Vector256`1<short> InsertVector128(Vector256`1<short> value, Vector128`1<short> data, byte index);
    public static Vector256`1<int> InsertVector128(Vector256`1<int> value, Vector128`1<int> data, byte index);
    public static Vector256`1<long> InsertVector128(Vector256`1<long> value, Vector128`1<long> data, byte index);
    public static Vector256`1<sbyte> InsertVector128(Vector256`1<sbyte> value, Vector128`1<sbyte> data, byte index);
    public static Vector256`1<ushort> InsertVector128(Vector256`1<ushort> value, Vector128`1<ushort> data, byte index);
    public static Vector256`1<UInt32> InsertVector128(Vector256`1<UInt32> value, Vector128`1<UInt32> data, byte index);
    public static Vector256`1<ulong> InsertVector128(Vector256`1<ulong> value, Vector128`1<ulong> data, byte index);
    public static Vector256`1<byte> LoadAlignedVector256NonTemporal(Byte* address);
    public static Vector256`1<short> LoadAlignedVector256NonTemporal(Int16* address);
    public static Vector256`1<int> LoadAlignedVector256NonTemporal(Int32* address);
    public static Vector256`1<long> LoadAlignedVector256NonTemporal(Int64* address);
    public static Vector256`1<sbyte> LoadAlignedVector256NonTemporal(SByte* address);
    public static Vector256`1<ushort> LoadAlignedVector256NonTemporal(UInt16* address);
    public static Vector256`1<UInt32> LoadAlignedVector256NonTemporal(UInt32* address);
    public static Vector256`1<ulong> LoadAlignedVector256NonTemporal(UInt64* address);
    public static Vector128`1<int> MaskLoad(Int32* address, Vector128`1<int> mask);
    public static Vector256`1<int> MaskLoad(Int32* address, Vector256`1<int> mask);
    public static Vector128`1<long> MaskLoad(Int64* address, Vector128`1<long> mask);
    public static Vector256`1<long> MaskLoad(Int64* address, Vector256`1<long> mask);
    public static Vector128`1<UInt32> MaskLoad(UInt32* address, Vector128`1<UInt32> mask);
    public static Vector256`1<UInt32> MaskLoad(UInt32* address, Vector256`1<UInt32> mask);
    public static Vector128`1<ulong> MaskLoad(UInt64* address, Vector128`1<ulong> mask);
    public static Vector256`1<ulong> MaskLoad(UInt64* address, Vector256`1<ulong> mask);
    public static void MaskStore(Int32* address, Vector128`1<int> mask, Vector128`1<int> source);
    public static void MaskStore(Int32* address, Vector256`1<int> mask, Vector256`1<int> source);
    public static void MaskStore(Int64* address, Vector128`1<long> mask, Vector128`1<long> source);
    public static void MaskStore(Int64* address, Vector256`1<long> mask, Vector256`1<long> source);
    public static void MaskStore(UInt32* address, Vector128`1<UInt32> mask, Vector128`1<UInt32> source);
    public static void MaskStore(UInt32* address, Vector256`1<UInt32> mask, Vector256`1<UInt32> source);
    public static void MaskStore(UInt64* address, Vector128`1<ulong> mask, Vector128`1<ulong> source);
    public static void MaskStore(UInt64* address, Vector256`1<ulong> mask, Vector256`1<ulong> source);
    public static Vector256`1<byte> Max(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<short> Max(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> Max(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<sbyte> Max(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static Vector256`1<ushort> Max(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<UInt32> Max(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static Vector256`1<byte> Min(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<short> Min(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> Min(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<sbyte> Min(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static Vector256`1<ushort> Min(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<UInt32> Min(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static int MoveMask(Vector256`1<byte> value);
    public static int MoveMask(Vector256`1<sbyte> value);
    public static Vector256`1<ushort> MultipleSumAbsoluteDifferences(Vector256`1<byte> left, Vector256`1<byte> right, byte mask);
    public static Vector256`1<long> Multiply(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<ulong> Multiply(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static Vector256`1<short> MultiplyAddAdjacent(Vector256`1<byte> left, Vector256`1<sbyte> right);
    public static Vector256`1<int> MultiplyAddAdjacent(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<short> MultiplyHigh(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<ushort> MultiplyHigh(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<short> MultiplyHighRoundScale(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<short> MultiplyLow(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> MultiplyLow(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<ushort> MultiplyLow(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<UInt32> MultiplyLow(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static Vector256`1<byte> Or(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<short> Or(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> Or(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<long> Or(Vector256`1<long> left, Vector256`1<long> right);
    public static Vector256`1<sbyte> Or(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static Vector256`1<ushort> Or(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<UInt32> Or(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static Vector256`1<ulong> Or(Vector256`1<ulong> left, Vector256`1<ulong> right);
    public static Vector256`1<sbyte> PackSignedSaturate(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<short> PackSignedSaturate(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<byte> PackUnsignedSaturate(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<ushort> PackUnsignedSaturate(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<byte> Permute2x128(Vector256`1<byte> left, Vector256`1<byte> right, byte control);
    public static Vector256`1<short> Permute2x128(Vector256`1<short> left, Vector256`1<short> right, byte control);
    public static Vector256`1<int> Permute2x128(Vector256`1<int> left, Vector256`1<int> right, byte control);
    public static Vector256`1<long> Permute2x128(Vector256`1<long> left, Vector256`1<long> right, byte control);
    public static Vector256`1<sbyte> Permute2x128(Vector256`1<sbyte> left, Vector256`1<sbyte> right, byte control);
    public static Vector256`1<ushort> Permute2x128(Vector256`1<ushort> left, Vector256`1<ushort> right, byte control);
    public static Vector256`1<UInt32> Permute2x128(Vector256`1<UInt32> left, Vector256`1<UInt32> right, byte control);
    public static Vector256`1<ulong> Permute2x128(Vector256`1<ulong> left, Vector256`1<ulong> right, byte control);
    public static Vector256`1<double> Permute4x64(Vector256`1<double> value, byte control);
    public static Vector256`1<long> Permute4x64(Vector256`1<long> value, byte control);
    public static Vector256`1<ulong> Permute4x64(Vector256`1<ulong> value, byte control);
    public static Vector256`1<int> PermuteVar8x32(Vector256`1<int> left, Vector256`1<int> control);
    public static Vector256`1<float> PermuteVar8x32(Vector256`1<float> left, Vector256`1<int> control);
    public static Vector256`1<UInt32> PermuteVar8x32(Vector256`1<UInt32> left, Vector256`1<UInt32> control);
    public static Vector256`1<short> ShiftLeftLogical(Vector256`1<short> value, byte count);
    public static Vector256`1<short> ShiftLeftLogical(Vector256`1<short> value, Vector128`1<short> count);
    public static Vector256`1<int> ShiftLeftLogical(Vector256`1<int> value, byte count);
    public static Vector256`1<int> ShiftLeftLogical(Vector256`1<int> value, Vector128`1<int> count);
    public static Vector256`1<long> ShiftLeftLogical(Vector256`1<long> value, byte count);
    public static Vector256`1<long> ShiftLeftLogical(Vector256`1<long> value, Vector128`1<long> count);
    public static Vector256`1<ushort> ShiftLeftLogical(Vector256`1<ushort> value, byte count);
    public static Vector256`1<ushort> ShiftLeftLogical(Vector256`1<ushort> value, Vector128`1<ushort> count);
    public static Vector256`1<UInt32> ShiftLeftLogical(Vector256`1<UInt32> value, byte count);
    public static Vector256`1<UInt32> ShiftLeftLogical(Vector256`1<UInt32> value, Vector128`1<UInt32> count);
    public static Vector256`1<ulong> ShiftLeftLogical(Vector256`1<ulong> value, byte count);
    public static Vector256`1<ulong> ShiftLeftLogical(Vector256`1<ulong> value, Vector128`1<ulong> count);
    public static Vector256`1<byte> ShiftLeftLogical128BitLane(Vector256`1<byte> value, byte numBytes);
    public static Vector256`1<short> ShiftLeftLogical128BitLane(Vector256`1<short> value, byte numBytes);
    public static Vector256`1<int> ShiftLeftLogical128BitLane(Vector256`1<int> value, byte numBytes);
    public static Vector256`1<long> ShiftLeftLogical128BitLane(Vector256`1<long> value, byte numBytes);
    public static Vector256`1<sbyte> ShiftLeftLogical128BitLane(Vector256`1<sbyte> value, byte numBytes);
    public static Vector256`1<ushort> ShiftLeftLogical128BitLane(Vector256`1<ushort> value, byte numBytes);
    public static Vector256`1<UInt32> ShiftLeftLogical128BitLane(Vector256`1<UInt32> value, byte numBytes);
    public static Vector256`1<ulong> ShiftLeftLogical128BitLane(Vector256`1<ulong> value, byte numBytes);
    public static Vector128`1<int> ShiftLeftLogicalVariable(Vector128`1<int> value, Vector128`1<UInt32> count);
    public static Vector128`1<long> ShiftLeftLogicalVariable(Vector128`1<long> value, Vector128`1<ulong> count);
    public static Vector128`1<UInt32> ShiftLeftLogicalVariable(Vector128`1<UInt32> value, Vector128`1<UInt32> count);
    public static Vector128`1<ulong> ShiftLeftLogicalVariable(Vector128`1<ulong> value, Vector128`1<ulong> count);
    public static Vector256`1<int> ShiftLeftLogicalVariable(Vector256`1<int> value, Vector256`1<UInt32> count);
    public static Vector256`1<long> ShiftLeftLogicalVariable(Vector256`1<long> value, Vector256`1<ulong> count);
    public static Vector256`1<UInt32> ShiftLeftLogicalVariable(Vector256`1<UInt32> value, Vector256`1<UInt32> count);
    public static Vector256`1<ulong> ShiftLeftLogicalVariable(Vector256`1<ulong> value, Vector256`1<ulong> count);
    public static Vector256`1<short> ShiftRightArithmetic(Vector256`1<short> value, byte count);
    public static Vector256`1<short> ShiftRightArithmetic(Vector256`1<short> value, Vector128`1<short> count);
    public static Vector256`1<int> ShiftRightArithmetic(Vector256`1<int> value, byte count);
    public static Vector256`1<int> ShiftRightArithmetic(Vector256`1<int> value, Vector128`1<int> count);
    public static Vector128`1<int> ShiftRightArithmeticVariable(Vector128`1<int> value, Vector128`1<UInt32> count);
    public static Vector256`1<int> ShiftRightArithmeticVariable(Vector256`1<int> value, Vector256`1<UInt32> count);
    public static Vector256`1<short> ShiftRightLogical(Vector256`1<short> value, byte count);
    public static Vector256`1<short> ShiftRightLogical(Vector256`1<short> value, Vector128`1<short> count);
    public static Vector256`1<int> ShiftRightLogical(Vector256`1<int> value, byte count);
    public static Vector256`1<int> ShiftRightLogical(Vector256`1<int> value, Vector128`1<int> count);
    public static Vector256`1<long> ShiftRightLogical(Vector256`1<long> value, byte count);
    public static Vector256`1<long> ShiftRightLogical(Vector256`1<long> value, Vector128`1<long> count);
    public static Vector256`1<ushort> ShiftRightLogical(Vector256`1<ushort> value, byte count);
    public static Vector256`1<ushort> ShiftRightLogical(Vector256`1<ushort> value, Vector128`1<ushort> count);
    public static Vector256`1<UInt32> ShiftRightLogical(Vector256`1<UInt32> value, byte count);
    public static Vector256`1<UInt32> ShiftRightLogical(Vector256`1<UInt32> value, Vector128`1<UInt32> count);
    public static Vector256`1<ulong> ShiftRightLogical(Vector256`1<ulong> value, byte count);
    public static Vector256`1<ulong> ShiftRightLogical(Vector256`1<ulong> value, Vector128`1<ulong> count);
    public static Vector256`1<byte> ShiftRightLogical128BitLane(Vector256`1<byte> value, byte numBytes);
    public static Vector256`1<short> ShiftRightLogical128BitLane(Vector256`1<short> value, byte numBytes);
    public static Vector256`1<int> ShiftRightLogical128BitLane(Vector256`1<int> value, byte numBytes);
    public static Vector256`1<long> ShiftRightLogical128BitLane(Vector256`1<long> value, byte numBytes);
    public static Vector256`1<sbyte> ShiftRightLogical128BitLane(Vector256`1<sbyte> value, byte numBytes);
    public static Vector256`1<ushort> ShiftRightLogical128BitLane(Vector256`1<ushort> value, byte numBytes);
    public static Vector256`1<UInt32> ShiftRightLogical128BitLane(Vector256`1<UInt32> value, byte numBytes);
    public static Vector256`1<ulong> ShiftRightLogical128BitLane(Vector256`1<ulong> value, byte numBytes);
    public static Vector128`1<int> ShiftRightLogicalVariable(Vector128`1<int> value, Vector128`1<UInt32> count);
    public static Vector128`1<long> ShiftRightLogicalVariable(Vector128`1<long> value, Vector128`1<ulong> count);
    public static Vector128`1<UInt32> ShiftRightLogicalVariable(Vector128`1<UInt32> value, Vector128`1<UInt32> count);
    public static Vector128`1<ulong> ShiftRightLogicalVariable(Vector128`1<ulong> value, Vector128`1<ulong> count);
    public static Vector256`1<int> ShiftRightLogicalVariable(Vector256`1<int> value, Vector256`1<UInt32> count);
    public static Vector256`1<long> ShiftRightLogicalVariable(Vector256`1<long> value, Vector256`1<ulong> count);
    public static Vector256`1<UInt32> ShiftRightLogicalVariable(Vector256`1<UInt32> value, Vector256`1<UInt32> count);
    public static Vector256`1<ulong> ShiftRightLogicalVariable(Vector256`1<ulong> value, Vector256`1<ulong> count);
    public static Vector256`1<byte> Shuffle(Vector256`1<byte> value, Vector256`1<byte> mask);
    public static Vector256`1<int> Shuffle(Vector256`1<int> value, byte control);
    public static Vector256`1<sbyte> Shuffle(Vector256`1<sbyte> value, Vector256`1<sbyte> mask);
    public static Vector256`1<UInt32> Shuffle(Vector256`1<UInt32> value, byte control);
    public static Vector256`1<short> ShuffleHigh(Vector256`1<short> value, byte control);
    public static Vector256`1<ushort> ShuffleHigh(Vector256`1<ushort> value, byte control);
    public static Vector256`1<short> ShuffleLow(Vector256`1<short> value, byte control);
    public static Vector256`1<ushort> ShuffleLow(Vector256`1<ushort> value, byte control);
    public static Vector256`1<short> Sign(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> Sign(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<sbyte> Sign(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static Vector256`1<byte> Subtract(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<short> Subtract(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> Subtract(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<long> Subtract(Vector256`1<long> left, Vector256`1<long> right);
    public static Vector256`1<sbyte> Subtract(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static Vector256`1<ushort> Subtract(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<UInt32> Subtract(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static Vector256`1<ulong> Subtract(Vector256`1<ulong> left, Vector256`1<ulong> right);
    public static Vector256`1<byte> SubtractSaturate(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<short> SubtractSaturate(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<sbyte> SubtractSaturate(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static Vector256`1<ushort> SubtractSaturate(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<ushort> SumAbsoluteDifferences(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<byte> UnpackHigh(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<short> UnpackHigh(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> UnpackHigh(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<long> UnpackHigh(Vector256`1<long> left, Vector256`1<long> right);
    public static Vector256`1<sbyte> UnpackHigh(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static Vector256`1<ushort> UnpackHigh(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<UInt32> UnpackHigh(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static Vector256`1<ulong> UnpackHigh(Vector256`1<ulong> left, Vector256`1<ulong> right);
    public static Vector256`1<byte> UnpackLow(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<short> UnpackLow(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> UnpackLow(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<long> UnpackLow(Vector256`1<long> left, Vector256`1<long> right);
    public static Vector256`1<sbyte> UnpackLow(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static Vector256`1<ushort> UnpackLow(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<UInt32> UnpackLow(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static Vector256`1<ulong> UnpackLow(Vector256`1<ulong> left, Vector256`1<ulong> right);
    public static Vector256`1<byte> Xor(Vector256`1<byte> left, Vector256`1<byte> right);
    public static Vector256`1<short> Xor(Vector256`1<short> left, Vector256`1<short> right);
    public static Vector256`1<int> Xor(Vector256`1<int> left, Vector256`1<int> right);
    public static Vector256`1<long> Xor(Vector256`1<long> left, Vector256`1<long> right);
    public static Vector256`1<sbyte> Xor(Vector256`1<sbyte> left, Vector256`1<sbyte> right);
    public static Vector256`1<ushort> Xor(Vector256`1<ushort> left, Vector256`1<ushort> right);
    public static Vector256`1<UInt32> Xor(Vector256`1<UInt32> left, Vector256`1<UInt32> right);
    public static Vector256`1<ulong> Xor(Vector256`1<ulong> left, Vector256`1<ulong> right);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Avx512BW : Avx512F {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector512`1<ushort> Abs(Vector512`1<short> value);
    public static Vector512`1<byte> Abs(Vector512`1<sbyte> value);
    public static Vector512`1<byte> Add(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> Add(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<sbyte> Add(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> Add(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<byte> AddSaturate(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> AddSaturate(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<sbyte> AddSaturate(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> AddSaturate(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<sbyte> AlignRight(Vector512`1<sbyte> left, Vector512`1<sbyte> right, byte mask);
    public static Vector512`1<byte> AlignRight(Vector512`1<byte> left, Vector512`1<byte> right, byte mask);
    public static Vector512`1<byte> Average(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<ushort> Average(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<byte> BlendVariable(Vector512`1<byte> left, Vector512`1<byte> right, Vector512`1<byte> mask);
    public static Vector512`1<short> BlendVariable(Vector512`1<short> left, Vector512`1<short> right, Vector512`1<short> mask);
    public static Vector512`1<sbyte> BlendVariable(Vector512`1<sbyte> left, Vector512`1<sbyte> right, Vector512`1<sbyte> mask);
    public static Vector512`1<ushort> BlendVariable(Vector512`1<ushort> left, Vector512`1<ushort> right, Vector512`1<ushort> mask);
    public static Vector512`1<byte> BroadcastScalarToVector512(Vector128`1<byte> value);
    public static Vector512`1<short> BroadcastScalarToVector512(Vector128`1<short> value);
    public static Vector512`1<sbyte> BroadcastScalarToVector512(Vector128`1<sbyte> value);
    public static Vector512`1<ushort> BroadcastScalarToVector512(Vector128`1<ushort> value);
    public static Vector512`1<byte> CompareEqual(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> CompareEqual(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<sbyte> CompareEqual(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> CompareEqual(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<byte> CompareGreaterThan(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> CompareGreaterThan(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<sbyte> CompareGreaterThan(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> CompareGreaterThan(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<byte> CompareGreaterThanOrEqual(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> CompareGreaterThanOrEqual(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<sbyte> CompareGreaterThanOrEqual(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> CompareGreaterThanOrEqual(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<byte> CompareLessThan(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> CompareLessThan(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<sbyte> CompareLessThan(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> CompareLessThan(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<byte> CompareLessThanOrEqual(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> CompareLessThanOrEqual(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<sbyte> CompareLessThanOrEqual(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> CompareLessThanOrEqual(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<byte> CompareNotEqual(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> CompareNotEqual(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<sbyte> CompareNotEqual(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> CompareNotEqual(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector256`1<byte> ConvertToVector256Byte(Vector512`1<short> value);
    public static Vector256`1<byte> ConvertToVector256Byte(Vector512`1<ushort> value);
    public static Vector256`1<byte> ConvertToVector256ByteWithSaturation(Vector512`1<ushort> value);
    public static Vector256`1<sbyte> ConvertToVector256SByte(Vector512`1<short> value);
    public static Vector256`1<sbyte> ConvertToVector256SByte(Vector512`1<ushort> value);
    public static Vector256`1<sbyte> ConvertToVector256SByteWithSaturation(Vector512`1<short> value);
    public static Vector512`1<short> ConvertToVector512Int16(Vector256`1<sbyte> value);
    public static Vector512`1<short> ConvertToVector512Int16(Vector256`1<byte> value);
    public static Vector512`1<ushort> ConvertToVector512UInt16(Vector256`1<sbyte> value);
    public static Vector512`1<ushort> ConvertToVector512UInt16(Vector256`1<byte> value);
    public static Vector512`1<byte> LoadVector512(Byte* address);
    public static Vector512`1<short> LoadVector512(Int16* address);
    public static Vector512`1<sbyte> LoadVector512(SByte* address);
    public static Vector512`1<ushort> LoadVector512(UInt16* address);
    public static Vector512`1<byte> Max(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> Max(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<sbyte> Max(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> Max(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<byte> Min(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> Min(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<sbyte> Min(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> Min(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<int> MultiplyAddAdjacent(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<short> MultiplyAddAdjacent(Vector512`1<byte> left, Vector512`1<sbyte> right);
    public static Vector512`1<short> MultiplyHigh(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<ushort> MultiplyHigh(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<short> MultiplyHighRoundScale(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<short> MultiplyLow(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<ushort> MultiplyLow(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<sbyte> PackSignedSaturate(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<short> PackSignedSaturate(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<byte> PackUnsignedSaturate(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<ushort> PackUnsignedSaturate(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<short> PermuteVar32x16(Vector512`1<short> left, Vector512`1<short> control);
    public static Vector512`1<ushort> PermuteVar32x16(Vector512`1<ushort> left, Vector512`1<ushort> control);
    public static Vector512`1<short> PermuteVar32x16x2(Vector512`1<short> lower, Vector512`1<short> indices, Vector512`1<short> upper);
    public static Vector512`1<ushort> PermuteVar32x16x2(Vector512`1<ushort> lower, Vector512`1<ushort> indices, Vector512`1<ushort> upper);
    public static Vector512`1<short> ShiftLeftLogical(Vector512`1<short> value, byte count);
    public static Vector512`1<short> ShiftLeftLogical(Vector512`1<short> value, Vector128`1<short> count);
    public static Vector512`1<ushort> ShiftLeftLogical(Vector512`1<ushort> value, byte count);
    public static Vector512`1<ushort> ShiftLeftLogical(Vector512`1<ushort> value, Vector128`1<ushort> count);
    public static Vector512`1<byte> ShiftLeftLogical128BitLane(Vector512`1<byte> value, byte numBytes);
    public static Vector512`1<sbyte> ShiftLeftLogical128BitLane(Vector512`1<sbyte> value, byte numBytes);
    public static Vector512`1<short> ShiftLeftLogicalVariable(Vector512`1<short> value, Vector512`1<ushort> count);
    public static Vector512`1<ushort> ShiftLeftLogicalVariable(Vector512`1<ushort> value, Vector512`1<ushort> count);
    public static Vector512`1<short> ShiftRightArithmetic(Vector512`1<short> value, byte count);
    public static Vector512`1<short> ShiftRightArithmetic(Vector512`1<short> value, Vector128`1<short> count);
    public static Vector512`1<short> ShiftRightArithmeticVariable(Vector512`1<short> value, Vector512`1<ushort> count);
    public static Vector512`1<short> ShiftRightLogical(Vector512`1<short> value, byte count);
    public static Vector512`1<short> ShiftRightLogical(Vector512`1<short> value, Vector128`1<short> count);
    public static Vector512`1<ushort> ShiftRightLogical(Vector512`1<ushort> value, byte count);
    public static Vector512`1<ushort> ShiftRightLogical(Vector512`1<ushort> value, Vector128`1<ushort> count);
    public static Vector512`1<byte> ShiftRightLogical128BitLane(Vector512`1<byte> value, byte numBytes);
    public static Vector512`1<sbyte> ShiftRightLogical128BitLane(Vector512`1<sbyte> value, byte numBytes);
    public static Vector512`1<short> ShiftRightLogicalVariable(Vector512`1<short> value, Vector512`1<ushort> count);
    public static Vector512`1<ushort> ShiftRightLogicalVariable(Vector512`1<ushort> value, Vector512`1<ushort> count);
    public static Vector512`1<sbyte> Shuffle(Vector512`1<sbyte> value, Vector512`1<sbyte> mask);
    public static Vector512`1<byte> Shuffle(Vector512`1<byte> value, Vector512`1<byte> mask);
    public static Vector512`1<short> ShuffleHigh(Vector512`1<short> value, byte control);
    public static Vector512`1<ushort> ShuffleHigh(Vector512`1<ushort> value, byte control);
    public static Vector512`1<short> ShuffleLow(Vector512`1<short> value, byte control);
    public static Vector512`1<ushort> ShuffleLow(Vector512`1<ushort> value, byte control);
    public static void Store(Byte* address, Vector512`1<byte> source);
    public static void Store(Int16* address, Vector512`1<short> source);
    public static void Store(SByte* address, Vector512`1<sbyte> source);
    public static void Store(UInt16* address, Vector512`1<ushort> source);
    public static Vector512`1<byte> Subtract(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> Subtract(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<sbyte> Subtract(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> Subtract(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<byte> SubtractSaturate(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> SubtractSaturate(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<sbyte> SubtractSaturate(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> SubtractSaturate(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<ushort> SumAbsoluteDifferences(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<ushort> SumAbsoluteDifferencesInBlock32(Vector512`1<byte> left, Vector512`1<byte> right, byte control);
    public static Vector512`1<byte> UnpackHigh(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> UnpackHigh(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<sbyte> UnpackHigh(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> UnpackHigh(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<byte> UnpackLow(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> UnpackLow(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<sbyte> UnpackLow(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> UnpackLow(Vector512`1<ushort> left, Vector512`1<ushort> right);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Avx512CD : Avx512F {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector512`1<int> DetectConflicts(Vector512`1<int> value);
    public static Vector512`1<long> DetectConflicts(Vector512`1<long> value);
    public static Vector512`1<UInt32> DetectConflicts(Vector512`1<UInt32> value);
    public static Vector512`1<ulong> DetectConflicts(Vector512`1<ulong> value);
    public static Vector512`1<int> LeadingZeroCount(Vector512`1<int> value);
    public static Vector512`1<long> LeadingZeroCount(Vector512`1<long> value);
    public static Vector512`1<UInt32> LeadingZeroCount(Vector512`1<UInt32> value);
    public static Vector512`1<ulong> LeadingZeroCount(Vector512`1<ulong> value);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Avx512DQ : Avx512F {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector512`1<double> And(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<float> And(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<double> AndNot(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<float> AndNot(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<int> BroadcastPairScalarToVector512(Vector128`1<int> value);
    public static Vector512`1<UInt32> BroadcastPairScalarToVector512(Vector128`1<UInt32> value);
    public static Vector512`1<float> BroadcastPairScalarToVector512(Vector128`1<float> value);
    public static Vector512`1<double> BroadcastVector128ToVector512(Double* address);
    public static Vector512`1<long> BroadcastVector128ToVector512(Int64* address);
    public static Vector512`1<ulong> BroadcastVector128ToVector512(UInt64* address);
    public static Vector512`1<int> BroadcastVector256ToVector512(Int32* address);
    public static Vector512`1<float> BroadcastVector256ToVector512(Single* address);
    public static Vector512`1<UInt32> BroadcastVector256ToVector512(UInt32* address);
    public static Vector256`1<float> ConvertToVector256Single(Vector512`1<long> value);
    public static Vector256`1<float> ConvertToVector256Single(Vector512`1<ulong> value);
    public static Vector512`1<double> ConvertToVector512Double(Vector512`1<long> value);
    public static Vector512`1<double> ConvertToVector512Double(Vector512`1<ulong> value);
    public static Vector512`1<long> ConvertToVector512Int64(Vector512`1<double> value);
    public static Vector512`1<long> ConvertToVector512Int64(Vector256`1<float> value);
    public static Vector512`1<long> ConvertToVector512Int64WithTruncation(Vector512`1<double> value);
    public static Vector512`1<long> ConvertToVector512Int64WithTruncation(Vector256`1<float> value);
    public static Vector512`1<ulong> ConvertToVector512UInt64(Vector512`1<double> value);
    public static Vector512`1<ulong> ConvertToVector512UInt64(Vector256`1<float> value);
    public static Vector512`1<ulong> ConvertToVector512UInt64WithTruncation(Vector512`1<double> value);
    public static Vector512`1<ulong> ConvertToVector512UInt64WithTruncation(Vector256`1<float> value);
    public static Vector128`1<double> ExtractVector128(Vector512`1<double> value, byte index);
    public static Vector128`1<long> ExtractVector128(Vector512`1<long> value, byte index);
    public static Vector128`1<ulong> ExtractVector128(Vector512`1<ulong> value, byte index);
    public static Vector256`1<int> ExtractVector256(Vector512`1<int> value, byte index);
    public static Vector256`1<float> ExtractVector256(Vector512`1<float> value, byte index);
    public static Vector256`1<UInt32> ExtractVector256(Vector512`1<UInt32> value, byte index);
    public static Vector512`1<double> InsertVector128(Vector512`1<double> value, Vector128`1<double> data, byte index);
    public static Vector512`1<long> InsertVector128(Vector512`1<long> value, Vector128`1<long> data, byte index);
    public static Vector512`1<ulong> InsertVector128(Vector512`1<ulong> value, Vector128`1<ulong> data, byte index);
    public static Vector512`1<int> InsertVector256(Vector512`1<int> value, Vector256`1<int> data, byte index);
    public static Vector512`1<float> InsertVector256(Vector512`1<float> value, Vector256`1<float> data, byte index);
    public static Vector512`1<UInt32> InsertVector256(Vector512`1<UInt32> value, Vector256`1<UInt32> data, byte index);
    public static Vector512`1<long> MultiplyLow(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<ulong> MultiplyLow(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<double> Or(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<float> Or(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<double> Range(Vector512`1<double> left, Vector512`1<double> right, byte control);
    public static Vector512`1<float> Range(Vector512`1<float> left, Vector512`1<float> right, byte control);
    public static Vector128`1<double> RangeScalar(Vector128`1<double> left, Vector128`1<double> right, byte control);
    public static Vector128`1<float> RangeScalar(Vector128`1<float> left, Vector128`1<float> right, byte control);
    public static Vector512`1<double> Reduce(Vector512`1<double> value, byte control);
    public static Vector512`1<float> Reduce(Vector512`1<float> value, byte control);
    public static Vector128`1<double> ReduceScalar(Vector128`1<double> value, byte control);
    public static Vector128`1<float> ReduceScalar(Vector128`1<float> value, byte control);
    public static Vector128`1<double> ReduceScalar(Vector128`1<double> upper, Vector128`1<double> value, byte control);
    public static Vector128`1<float> ReduceScalar(Vector128`1<float> upper, Vector128`1<float> value, byte control);
    public static Vector512`1<double> Xor(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<float> Xor(Vector512`1<float> left, Vector512`1<float> right);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Avx512F : Avx2 {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector512`1<UInt32> Abs(Vector512`1<int> value);
    public static Vector512`1<ulong> Abs(Vector512`1<long> value);
    public static Vector512`1<double> Add(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<int> Add(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> Add(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<float> Add(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<UInt32> Add(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> Add(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<int> AlignRight32(Vector512`1<int> left, Vector512`1<int> right, byte mask);
    public static Vector512`1<UInt32> AlignRight32(Vector512`1<UInt32> left, Vector512`1<UInt32> right, byte mask);
    public static Vector512`1<long> AlignRight64(Vector512`1<long> left, Vector512`1<long> right, byte mask);
    public static Vector512`1<ulong> AlignRight64(Vector512`1<ulong> left, Vector512`1<ulong> right, byte mask);
    public static Vector512`1<byte> And(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> And(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<int> And(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> And(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<sbyte> And(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> And(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<UInt32> And(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> And(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<byte> AndNot(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> AndNot(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<int> AndNot(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> AndNot(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<sbyte> AndNot(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> AndNot(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<UInt32> AndNot(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> AndNot(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<double> BlendVariable(Vector512`1<double> left, Vector512`1<double> right, Vector512`1<double> mask);
    public static Vector512`1<int> BlendVariable(Vector512`1<int> left, Vector512`1<int> right, Vector512`1<int> mask);
    public static Vector512`1<long> BlendVariable(Vector512`1<long> left, Vector512`1<long> right, Vector512`1<long> mask);
    public static Vector512`1<float> BlendVariable(Vector512`1<float> left, Vector512`1<float> right, Vector512`1<float> mask);
    public static Vector512`1<UInt32> BlendVariable(Vector512`1<UInt32> left, Vector512`1<UInt32> right, Vector512`1<UInt32> mask);
    public static Vector512`1<ulong> BlendVariable(Vector512`1<ulong> left, Vector512`1<ulong> right, Vector512`1<ulong> mask);
    public static Vector512`1<double> BroadcastScalarToVector512(Vector128`1<double> value);
    public static Vector512`1<int> BroadcastScalarToVector512(Vector128`1<int> value);
    public static Vector512`1<long> BroadcastScalarToVector512(Vector128`1<long> value);
    public static Vector512`1<float> BroadcastScalarToVector512(Vector128`1<float> value);
    public static Vector512`1<UInt32> BroadcastScalarToVector512(Vector128`1<UInt32> value);
    public static Vector512`1<ulong> BroadcastScalarToVector512(Vector128`1<ulong> value);
    public static Vector512`1<int> BroadcastVector128ToVector512(Int32* address);
    public static Vector512`1<float> BroadcastVector128ToVector512(Single* address);
    public static Vector512`1<UInt32> BroadcastVector128ToVector512(UInt32* address);
    public static Vector512`1<double> BroadcastVector256ToVector512(Double* address);
    public static Vector512`1<long> BroadcastVector256ToVector512(Int64* address);
    public static Vector512`1<ulong> BroadcastVector256ToVector512(UInt64* address);
    public static Vector512`1<double> Compare(Vector512`1<double> left, Vector512`1<double> right, FloatComparisonMode mode);
    public static Vector512`1<float> Compare(Vector512`1<float> left, Vector512`1<float> right, FloatComparisonMode mode);
    public static Vector512`1<double> CompareEqual(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<int> CompareEqual(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> CompareEqual(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<float> CompareEqual(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<UInt32> CompareEqual(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> CompareEqual(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<double> CompareGreaterThan(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<int> CompareGreaterThan(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> CompareGreaterThan(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<float> CompareGreaterThan(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<UInt32> CompareGreaterThan(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> CompareGreaterThan(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<double> CompareGreaterThanOrEqual(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<int> CompareGreaterThanOrEqual(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> CompareGreaterThanOrEqual(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<float> CompareGreaterThanOrEqual(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<UInt32> CompareGreaterThanOrEqual(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> CompareGreaterThanOrEqual(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<double> CompareLessThan(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<int> CompareLessThan(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> CompareLessThan(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<float> CompareLessThan(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<UInt32> CompareLessThan(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> CompareLessThan(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<double> CompareLessThanOrEqual(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<int> CompareLessThanOrEqual(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> CompareLessThanOrEqual(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<float> CompareLessThanOrEqual(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<UInt32> CompareLessThanOrEqual(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> CompareLessThanOrEqual(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<double> CompareNotEqual(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<int> CompareNotEqual(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> CompareNotEqual(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<float> CompareNotEqual(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<UInt32> CompareNotEqual(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> CompareNotEqual(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<double> CompareNotGreaterThan(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<float> CompareNotGreaterThan(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<double> CompareNotGreaterThanOrEqual(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<float> CompareNotGreaterThanOrEqual(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<double> CompareNotLessThan(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<float> CompareNotLessThan(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<double> CompareNotLessThanOrEqual(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<float> CompareNotLessThanOrEqual(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<double> CompareOrdered(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<float> CompareOrdered(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<double> CompareUnordered(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<float> CompareUnordered(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector128`1<double> ConvertScalarToVector128Double(Vector128`1<double> upper, UInt32 value);
    public static Vector128`1<float> ConvertScalarToVector128Single(Vector128`1<float> upper, UInt32 value);
    public static UInt32 ConvertToUInt32(Vector128`1<double> value);
    public static UInt32 ConvertToUInt32(Vector128`1<float> value);
    public static UInt32 ConvertToUInt32WithTruncation(Vector128`1<double> value);
    public static UInt32 ConvertToUInt32WithTruncation(Vector128`1<float> value);
    public static Vector128`1<byte> ConvertToVector128Byte(Vector512`1<int> value);
    public static Vector128`1<byte> ConvertToVector128Byte(Vector512`1<long> value);
    public static Vector128`1<byte> ConvertToVector128Byte(Vector512`1<UInt32> value);
    public static Vector128`1<byte> ConvertToVector128Byte(Vector512`1<ulong> value);
    public static Vector128`1<byte> ConvertToVector128ByteWithSaturation(Vector512`1<UInt32> value);
    public static Vector128`1<byte> ConvertToVector128ByteWithSaturation(Vector512`1<ulong> value);
    public static Vector128`1<short> ConvertToVector128Int16(Vector512`1<long> value);
    public static Vector128`1<short> ConvertToVector128Int16(Vector512`1<ulong> value);
    public static Vector128`1<short> ConvertToVector128Int16WithSaturation(Vector512`1<long> value);
    public static Vector128`1<sbyte> ConvertToVector128SByte(Vector512`1<int> value);
    public static Vector128`1<sbyte> ConvertToVector128SByte(Vector512`1<long> value);
    public static Vector128`1<sbyte> ConvertToVector128SByte(Vector512`1<UInt32> value);
    public static Vector128`1<sbyte> ConvertToVector128SByte(Vector512`1<ulong> value);
    public static Vector128`1<sbyte> ConvertToVector128SByteWithSaturation(Vector512`1<int> value);
    public static Vector128`1<sbyte> ConvertToVector128SByteWithSaturation(Vector512`1<long> value);
    public static Vector128`1<ushort> ConvertToVector128UInt16(Vector512`1<long> value);
    public static Vector128`1<ushort> ConvertToVector128UInt16(Vector512`1<ulong> value);
    public static Vector128`1<ushort> ConvertToVector128UInt16WithSaturation(Vector512`1<ulong> value);
    public static Vector256`1<short> ConvertToVector256Int16(Vector512`1<int> value);
    public static Vector256`1<short> ConvertToVector256Int16(Vector512`1<UInt32> value);
    public static Vector256`1<short> ConvertToVector256Int16WithSaturation(Vector512`1<int> value);
    public static Vector256`1<int> ConvertToVector256Int32(Vector512`1<double> value);
    public static Vector256`1<int> ConvertToVector256Int32(Vector512`1<long> value);
    public static Vector256`1<int> ConvertToVector256Int32(Vector512`1<ulong> value);
    public static Vector256`1<int> ConvertToVector256Int32WithSaturation(Vector512`1<long> value);
    public static Vector256`1<int> ConvertToVector256Int32WithTruncation(Vector512`1<double> value);
    public static Vector256`1<float> ConvertToVector256Single(Vector512`1<double> value);
    public static Vector256`1<ushort> ConvertToVector256UInt16(Vector512`1<int> value);
    public static Vector256`1<ushort> ConvertToVector256UInt16(Vector512`1<UInt32> value);
    public static Vector256`1<ushort> ConvertToVector256UInt16WithSaturation(Vector512`1<UInt32> value);
    public static Vector256`1<UInt32> ConvertToVector256UInt32(Vector512`1<double> value);
    public static Vector256`1<UInt32> ConvertToVector256UInt32(Vector512`1<long> value);
    public static Vector256`1<UInt32> ConvertToVector256UInt32(Vector512`1<ulong> value);
    public static Vector256`1<UInt32> ConvertToVector256UInt32WithSaturation(Vector512`1<ulong> value);
    public static Vector256`1<UInt32> ConvertToVector256UInt32WithTruncation(Vector512`1<double> value);
    public static Vector512`1<double> ConvertToVector512Double(Vector256`1<int> value);
    public static Vector512`1<double> ConvertToVector512Double(Vector256`1<float> value);
    public static Vector512`1<double> ConvertToVector512Double(Vector256`1<UInt32> value);
    public static Vector512`1<int> ConvertToVector512Int32(Vector128`1<byte> value);
    public static Vector512`1<int> ConvertToVector512Int32(Vector256`1<short> value);
    public static Vector512`1<int> ConvertToVector512Int32(Vector128`1<sbyte> value);
    public static Vector512`1<int> ConvertToVector512Int32(Vector512`1<float> value);
    public static Vector512`1<int> ConvertToVector512Int32(Vector256`1<ushort> value);
    public static Vector512`1<int> ConvertToVector512Int32WithTruncation(Vector512`1<float> value);
    public static Vector512`1<long> ConvertToVector512Int64(Vector128`1<byte> value);
    public static Vector512`1<long> ConvertToVector512Int64(Vector128`1<short> value);
    public static Vector512`1<long> ConvertToVector512Int64(Vector256`1<int> value);
    public static Vector512`1<long> ConvertToVector512Int64(Vector128`1<sbyte> value);
    public static Vector512`1<long> ConvertToVector512Int64(Vector128`1<ushort> value);
    public static Vector512`1<long> ConvertToVector512Int64(Vector256`1<UInt32> value);
    public static Vector512`1<float> ConvertToVector512Single(Vector512`1<int> value);
    public static Vector512`1<float> ConvertToVector512Single(Vector512`1<UInt32> value);
    public static Vector512`1<UInt32> ConvertToVector512UInt32(Vector128`1<byte> value);
    public static Vector512`1<UInt32> ConvertToVector512UInt32(Vector256`1<short> value);
    public static Vector512`1<UInt32> ConvertToVector512UInt32(Vector128`1<sbyte> value);
    public static Vector512`1<UInt32> ConvertToVector512UInt32(Vector512`1<float> value);
    public static Vector512`1<UInt32> ConvertToVector512UInt32(Vector256`1<ushort> value);
    public static Vector512`1<UInt32> ConvertToVector512UInt32WithTruncation(Vector512`1<float> value);
    public static Vector512`1<ulong> ConvertToVector512UInt64(Vector128`1<byte> value);
    public static Vector512`1<ulong> ConvertToVector512UInt64(Vector128`1<short> value);
    public static Vector512`1<ulong> ConvertToVector512UInt64(Vector256`1<int> value);
    public static Vector512`1<ulong> ConvertToVector512UInt64(Vector128`1<sbyte> value);
    public static Vector512`1<ulong> ConvertToVector512UInt64(Vector128`1<ushort> value);
    public static Vector512`1<ulong> ConvertToVector512UInt64(Vector256`1<UInt32> value);
    public static Vector512`1<float> Divide(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<double> Divide(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<float> DuplicateEvenIndexed(Vector512`1<float> value);
    public static Vector512`1<double> DuplicateEvenIndexed(Vector512`1<double> value);
    public static Vector512`1<float> DuplicateOddIndexed(Vector512`1<float> value);
    public static Vector128`1<byte> ExtractVector128(Vector512`1<byte> value, byte index);
    public static Vector128`1<double> ExtractVector128(Vector512`1<double> value, byte index);
    public static Vector128`1<short> ExtractVector128(Vector512`1<short> value, byte index);
    public static Vector128`1<int> ExtractVector128(Vector512`1<int> value, byte index);
    public static Vector128`1<long> ExtractVector128(Vector512`1<long> value, byte index);
    public static Vector128`1<sbyte> ExtractVector128(Vector512`1<sbyte> value, byte index);
    public static Vector128`1<float> ExtractVector128(Vector512`1<float> value, byte index);
    public static Vector128`1<ushort> ExtractVector128(Vector512`1<ushort> value, byte index);
    public static Vector128`1<UInt32> ExtractVector128(Vector512`1<UInt32> value, byte index);
    public static Vector128`1<ulong> ExtractVector128(Vector512`1<ulong> value, byte index);
    public static Vector256`1<byte> ExtractVector256(Vector512`1<byte> value, byte index);
    public static Vector256`1<double> ExtractVector256(Vector512`1<double> value, byte index);
    public static Vector256`1<short> ExtractVector256(Vector512`1<short> value, byte index);
    public static Vector256`1<int> ExtractVector256(Vector512`1<int> value, byte index);
    public static Vector256`1<long> ExtractVector256(Vector512`1<long> value, byte index);
    public static Vector256`1<sbyte> ExtractVector256(Vector512`1<sbyte> value, byte index);
    public static Vector256`1<float> ExtractVector256(Vector512`1<float> value, byte index);
    public static Vector256`1<ushort> ExtractVector256(Vector512`1<ushort> value, byte index);
    public static Vector256`1<UInt32> ExtractVector256(Vector512`1<UInt32> value, byte index);
    public static Vector256`1<ulong> ExtractVector256(Vector512`1<ulong> value, byte index);
    public static Vector512`1<double> Fixup(Vector512`1<double> left, Vector512`1<double> right, Vector512`1<long> table, byte control);
    public static Vector512`1<float> Fixup(Vector512`1<float> left, Vector512`1<float> right, Vector512`1<int> table, byte control);
    public static Vector128`1<double> FixupScalar(Vector128`1<double> left, Vector128`1<double> right, Vector128`1<long> table, byte control);
    public static Vector128`1<float> FixupScalar(Vector128`1<float> left, Vector128`1<float> right, Vector128`1<int> table, byte control);
    public static Vector512`1<double> FusedMultiplyAdd(Vector512`1<double> a, Vector512`1<double> b, Vector512`1<double> c);
    public static Vector512`1<float> FusedMultiplyAdd(Vector512`1<float> a, Vector512`1<float> b, Vector512`1<float> c);
    public static Vector512`1<double> FusedMultiplyAddNegated(Vector512`1<double> a, Vector512`1<double> b, Vector512`1<double> c);
    public static Vector512`1<float> FusedMultiplyAddNegated(Vector512`1<float> a, Vector512`1<float> b, Vector512`1<float> c);
    public static Vector512`1<double> FusedMultiplyAddSubtract(Vector512`1<double> a, Vector512`1<double> b, Vector512`1<double> c);
    public static Vector512`1<float> FusedMultiplyAddSubtract(Vector512`1<float> a, Vector512`1<float> b, Vector512`1<float> c);
    public static Vector512`1<double> FusedMultiplySubtract(Vector512`1<double> a, Vector512`1<double> b, Vector512`1<double> c);
    public static Vector512`1<float> FusedMultiplySubtract(Vector512`1<float> a, Vector512`1<float> b, Vector512`1<float> c);
    public static Vector512`1<double> FusedMultiplySubtractAdd(Vector512`1<double> a, Vector512`1<double> b, Vector512`1<double> c);
    public static Vector512`1<float> FusedMultiplySubtractAdd(Vector512`1<float> a, Vector512`1<float> b, Vector512`1<float> c);
    public static Vector512`1<double> FusedMultiplySubtractNegated(Vector512`1<double> a, Vector512`1<double> b, Vector512`1<double> c);
    public static Vector512`1<float> FusedMultiplySubtractNegated(Vector512`1<float> a, Vector512`1<float> b, Vector512`1<float> c);
    public static Vector512`1<double> GetExponent(Vector512`1<double> value);
    public static Vector512`1<float> GetExponent(Vector512`1<float> value);
    public static Vector128`1<double> GetExponentScalar(Vector128`1<double> value);
    public static Vector128`1<float> GetExponentScalar(Vector128`1<float> value);
    public static Vector128`1<double> GetExponentScalar(Vector128`1<double> upper, Vector128`1<double> value);
    public static Vector128`1<float> GetExponentScalar(Vector128`1<float> upper, Vector128`1<float> value);
    public static Vector512`1<double> GetMantissa(Vector512`1<double> value, byte control);
    public static Vector512`1<float> GetMantissa(Vector512`1<float> value, byte control);
    public static Vector128`1<float> GetMantissaScalar(Vector128`1<float> value, byte control);
    public static Vector128`1<double> GetMantissaScalar(Vector128`1<double> value, byte control);
    public static Vector128`1<float> GetMantissaScalar(Vector128`1<float> upper, Vector128`1<float> value, byte control);
    public static Vector128`1<double> GetMantissaScalar(Vector128`1<double> upper, Vector128`1<double> value, byte control);
    public static Vector512`1<byte> InsertVector128(Vector512`1<byte> value, Vector128`1<byte> data, byte index);
    public static Vector512`1<double> InsertVector128(Vector512`1<double> value, Vector128`1<double> data, byte index);
    public static Vector512`1<short> InsertVector128(Vector512`1<short> value, Vector128`1<short> data, byte index);
    public static Vector512`1<int> InsertVector128(Vector512`1<int> value, Vector128`1<int> data, byte index);
    public static Vector512`1<long> InsertVector128(Vector512`1<long> value, Vector128`1<long> data, byte index);
    public static Vector512`1<sbyte> InsertVector128(Vector512`1<sbyte> value, Vector128`1<sbyte> data, byte index);
    public static Vector512`1<float> InsertVector128(Vector512`1<float> value, Vector128`1<float> data, byte index);
    public static Vector512`1<ushort> InsertVector128(Vector512`1<ushort> value, Vector128`1<ushort> data, byte index);
    public static Vector512`1<UInt32> InsertVector128(Vector512`1<UInt32> value, Vector128`1<UInt32> data, byte index);
    public static Vector512`1<ulong> InsertVector128(Vector512`1<ulong> value, Vector128`1<ulong> data, byte index);
    public static Vector512`1<byte> InsertVector256(Vector512`1<byte> value, Vector256`1<byte> data, byte index);
    public static Vector512`1<double> InsertVector256(Vector512`1<double> value, Vector256`1<double> data, byte index);
    public static Vector512`1<short> InsertVector256(Vector512`1<short> value, Vector256`1<short> data, byte index);
    public static Vector512`1<int> InsertVector256(Vector512`1<int> value, Vector256`1<int> data, byte index);
    public static Vector512`1<long> InsertVector256(Vector512`1<long> value, Vector256`1<long> data, byte index);
    public static Vector512`1<sbyte> InsertVector256(Vector512`1<sbyte> value, Vector256`1<sbyte> data, byte index);
    public static Vector512`1<float> InsertVector256(Vector512`1<float> value, Vector256`1<float> data, byte index);
    public static Vector512`1<ushort> InsertVector256(Vector512`1<ushort> value, Vector256`1<ushort> data, byte index);
    public static Vector512`1<UInt32> InsertVector256(Vector512`1<UInt32> value, Vector256`1<UInt32> data, byte index);
    public static Vector512`1<ulong> InsertVector256(Vector512`1<ulong> value, Vector256`1<ulong> data, byte index);
    public static Vector512`1<byte> LoadAlignedVector512(Byte* address);
    public static Vector512`1<double> LoadAlignedVector512(Double* address);
    public static Vector512`1<short> LoadAlignedVector512(Int16* address);
    public static Vector512`1<int> LoadAlignedVector512(Int32* address);
    public static Vector512`1<long> LoadAlignedVector512(Int64* address);
    public static Vector512`1<sbyte> LoadAlignedVector512(SByte* address);
    public static Vector512`1<float> LoadAlignedVector512(Single* address);
    public static Vector512`1<ushort> LoadAlignedVector512(UInt16* address);
    public static Vector512`1<UInt32> LoadAlignedVector512(UInt32* address);
    public static Vector512`1<ulong> LoadAlignedVector512(UInt64* address);
    public static Vector512`1<byte> LoadAlignedVector512NonTemporal(Byte* address);
    public static Vector512`1<short> LoadAlignedVector512NonTemporal(Int16* address);
    public static Vector512`1<int> LoadAlignedVector512NonTemporal(Int32* address);
    public static Vector512`1<long> LoadAlignedVector512NonTemporal(Int64* address);
    public static Vector512`1<sbyte> LoadAlignedVector512NonTemporal(SByte* address);
    public static Vector512`1<ushort> LoadAlignedVector512NonTemporal(UInt16* address);
    public static Vector512`1<UInt32> LoadAlignedVector512NonTemporal(UInt32* address);
    public static Vector512`1<ulong> LoadAlignedVector512NonTemporal(UInt64* address);
    public static Vector512`1<byte> LoadVector512(Byte* address);
    public static Vector512`1<double> LoadVector512(Double* address);
    public static Vector512`1<short> LoadVector512(Int16* address);
    public static Vector512`1<int> LoadVector512(Int32* address);
    public static Vector512`1<long> LoadVector512(Int64* address);
    public static Vector512`1<sbyte> LoadVector512(SByte* address);
    public static Vector512`1<float> LoadVector512(Single* address);
    public static Vector512`1<ushort> LoadVector512(UInt16* address);
    public static Vector512`1<UInt32> LoadVector512(UInt32* address);
    public static Vector512`1<ulong> LoadVector512(UInt64* address);
    public static Vector512`1<double> Max(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<int> Max(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> Max(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<float> Max(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<UInt32> Max(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> Max(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<double> Min(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<int> Min(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> Min(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<float> Min(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<UInt32> Min(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> Min(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<long> Multiply(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<ulong> Multiply(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<float> Multiply(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<double> Multiply(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<int> MultiplyLow(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<UInt32> MultiplyLow(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<byte> Or(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> Or(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<int> Or(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> Or(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<sbyte> Or(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> Or(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<UInt32> Or(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> Or(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<double> Permute2x64(Vector512`1<double> value, byte control);
    public static Vector512`1<float> Permute4x32(Vector512`1<float> value, byte control);
    public static Vector512`1<double> Permute4x64(Vector512`1<double> value, byte control);
    public static Vector512`1<long> Permute4x64(Vector512`1<long> value, byte control);
    public static Vector512`1<ulong> Permute4x64(Vector512`1<ulong> value, byte control);
    public static Vector512`1<double> PermuteVar2x64(Vector512`1<double> left, Vector512`1<long> control);
    public static Vector512`1<float> PermuteVar4x32(Vector512`1<float> left, Vector512`1<int> control);
    public static Vector512`1<double> PermuteVar8x64(Vector512`1<double> value, Vector512`1<long> control);
    public static Vector512`1<long> PermuteVar8x64(Vector512`1<long> value, Vector512`1<long> control);
    public static Vector512`1<ulong> PermuteVar8x64(Vector512`1<ulong> value, Vector512`1<ulong> control);
    public static Vector512`1<double> PermuteVar8x64x2(Vector512`1<double> lower, Vector512`1<long> indices, Vector512`1<double> upper);
    public static Vector512`1<long> PermuteVar8x64x2(Vector512`1<long> lower, Vector512`1<long> indices, Vector512`1<long> upper);
    public static Vector512`1<ulong> PermuteVar8x64x2(Vector512`1<ulong> lower, Vector512`1<ulong> indices, Vector512`1<ulong> upper);
    public static Vector512`1<int> PermuteVar16x32(Vector512`1<int> left, Vector512`1<int> control);
    public static Vector512`1<float> PermuteVar16x32(Vector512`1<float> left, Vector512`1<int> control);
    public static Vector512`1<UInt32> PermuteVar16x32(Vector512`1<UInt32> left, Vector512`1<UInt32> control);
    public static Vector512`1<int> PermuteVar16x32x2(Vector512`1<int> lower, Vector512`1<int> indices, Vector512`1<int> upper);
    public static Vector512`1<float> PermuteVar16x32x2(Vector512`1<float> lower, Vector512`1<int> indices, Vector512`1<float> upper);
    public static Vector512`1<UInt32> PermuteVar16x32x2(Vector512`1<UInt32> lower, Vector512`1<UInt32> indices, Vector512`1<UInt32> upper);
    public static Vector512`1<double> Reciprocal14(Vector512`1<double> value);
    public static Vector512`1<float> Reciprocal14(Vector512`1<float> value);
    public static Vector128`1<double> Reciprocal14Scalar(Vector128`1<double> value);
    public static Vector128`1<float> Reciprocal14Scalar(Vector128`1<float> value);
    public static Vector128`1<double> Reciprocal14Scalar(Vector128`1<double> upper, Vector128`1<double> value);
    public static Vector128`1<float> Reciprocal14Scalar(Vector128`1<float> upper, Vector128`1<float> value);
    public static Vector512`1<double> ReciprocalSqrt14(Vector512`1<double> value);
    public static Vector512`1<float> ReciprocalSqrt14(Vector512`1<float> value);
    public static Vector128`1<double> ReciprocalSqrt14Scalar(Vector128`1<double> value);
    public static Vector128`1<float> ReciprocalSqrt14Scalar(Vector128`1<float> value);
    public static Vector128`1<double> ReciprocalSqrt14Scalar(Vector128`1<double> upper, Vector128`1<double> value);
    public static Vector128`1<float> ReciprocalSqrt14Scalar(Vector128`1<float> upper, Vector128`1<float> value);
    public static Vector512`1<int> RotateLeft(Vector512`1<int> value, byte count);
    public static Vector512`1<long> RotateLeft(Vector512`1<long> value, byte count);
    public static Vector512`1<UInt32> RotateLeft(Vector512`1<UInt32> value, byte count);
    public static Vector512`1<ulong> RotateLeft(Vector512`1<ulong> value, byte count);
    public static Vector512`1<int> RotateLeftVariable(Vector512`1<int> value, Vector512`1<UInt32> count);
    public static Vector512`1<long> RotateLeftVariable(Vector512`1<long> value, Vector512`1<ulong> count);
    public static Vector512`1<UInt32> RotateLeftVariable(Vector512`1<UInt32> value, Vector512`1<UInt32> count);
    public static Vector512`1<ulong> RotateLeftVariable(Vector512`1<ulong> value, Vector512`1<ulong> count);
    public static Vector512`1<int> RotateRight(Vector512`1<int> value, byte count);
    public static Vector512`1<long> RotateRight(Vector512`1<long> value, byte count);
    public static Vector512`1<UInt32> RotateRight(Vector512`1<UInt32> value, byte count);
    public static Vector512`1<ulong> RotateRight(Vector512`1<ulong> value, byte count);
    public static Vector512`1<int> RotateRightVariable(Vector512`1<int> value, Vector512`1<UInt32> count);
    public static Vector512`1<long> RotateRightVariable(Vector512`1<long> value, Vector512`1<ulong> count);
    public static Vector512`1<UInt32> RotateRightVariable(Vector512`1<UInt32> value, Vector512`1<UInt32> count);
    public static Vector512`1<ulong> RotateRightVariable(Vector512`1<ulong> value, Vector512`1<ulong> count);
    public static Vector512`1<double> RoundScale(Vector512`1<double> value, byte control);
    public static Vector512`1<float> RoundScale(Vector512`1<float> value, byte control);
    public static Vector128`1<double> RoundScaleScalar(Vector128`1<double> value, byte control);
    public static Vector128`1<float> RoundScaleScalar(Vector128`1<float> value, byte control);
    public static Vector128`1<double> RoundScaleScalar(Vector128`1<double> upper, Vector128`1<double> value, byte control);
    public static Vector128`1<float> RoundScaleScalar(Vector128`1<float> upper, Vector128`1<float> value, byte control);
    public static Vector512`1<double> Scale(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<float> Scale(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector128`1<double> ScaleScalar(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<float> ScaleScalar(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector512`1<int> ShiftLeftLogical(Vector512`1<int> value, byte count);
    public static Vector512`1<int> ShiftLeftLogical(Vector512`1<int> value, Vector128`1<int> count);
    public static Vector512`1<long> ShiftLeftLogical(Vector512`1<long> value, byte count);
    public static Vector512`1<long> ShiftLeftLogical(Vector512`1<long> value, Vector128`1<long> count);
    public static Vector512`1<UInt32> ShiftLeftLogical(Vector512`1<UInt32> value, byte count);
    public static Vector512`1<UInt32> ShiftLeftLogical(Vector512`1<UInt32> value, Vector128`1<UInt32> count);
    public static Vector512`1<ulong> ShiftLeftLogical(Vector512`1<ulong> value, byte count);
    public static Vector512`1<ulong> ShiftLeftLogical(Vector512`1<ulong> value, Vector128`1<ulong> count);
    public static Vector512`1<int> ShiftLeftLogicalVariable(Vector512`1<int> value, Vector512`1<UInt32> count);
    public static Vector512`1<long> ShiftLeftLogicalVariable(Vector512`1<long> value, Vector512`1<ulong> count);
    public static Vector512`1<UInt32> ShiftLeftLogicalVariable(Vector512`1<UInt32> value, Vector512`1<UInt32> count);
    public static Vector512`1<ulong> ShiftLeftLogicalVariable(Vector512`1<ulong> value, Vector512`1<ulong> count);
    public static Vector512`1<int> ShiftRightArithmetic(Vector512`1<int> value, byte count);
    public static Vector512`1<int> ShiftRightArithmetic(Vector512`1<int> value, Vector128`1<int> count);
    public static Vector512`1<long> ShiftRightArithmetic(Vector512`1<long> value, byte count);
    public static Vector512`1<long> ShiftRightArithmetic(Vector512`1<long> value, Vector128`1<long> count);
    public static Vector512`1<int> ShiftRightArithmeticVariable(Vector512`1<int> value, Vector512`1<UInt32> count);
    public static Vector512`1<long> ShiftRightArithmeticVariable(Vector512`1<long> value, Vector512`1<ulong> count);
    public static Vector512`1<int> ShiftRightLogical(Vector512`1<int> value, byte count);
    public static Vector512`1<int> ShiftRightLogical(Vector512`1<int> value, Vector128`1<int> count);
    public static Vector512`1<long> ShiftRightLogical(Vector512`1<long> value, byte count);
    public static Vector512`1<long> ShiftRightLogical(Vector512`1<long> value, Vector128`1<long> count);
    public static Vector512`1<UInt32> ShiftRightLogical(Vector512`1<UInt32> value, byte count);
    public static Vector512`1<UInt32> ShiftRightLogical(Vector512`1<UInt32> value, Vector128`1<UInt32> count);
    public static Vector512`1<ulong> ShiftRightLogical(Vector512`1<ulong> value, byte count);
    public static Vector512`1<ulong> ShiftRightLogical(Vector512`1<ulong> value, Vector128`1<ulong> count);
    public static Vector512`1<int> ShiftRightLogicalVariable(Vector512`1<int> value, Vector512`1<UInt32> count);
    public static Vector512`1<long> ShiftRightLogicalVariable(Vector512`1<long> value, Vector512`1<ulong> count);
    public static Vector512`1<UInt32> ShiftRightLogicalVariable(Vector512`1<UInt32> value, Vector512`1<UInt32> count);
    public static Vector512`1<ulong> ShiftRightLogicalVariable(Vector512`1<ulong> value, Vector512`1<ulong> count);
    public static Vector512`1<double> Shuffle(Vector512`1<double> value, Vector512`1<double> right, byte control);
    public static Vector512`1<int> Shuffle(Vector512`1<int> value, byte control);
    public static Vector512`1<float> Shuffle(Vector512`1<float> value, Vector512`1<float> right, byte control);
    public static Vector512`1<UInt32> Shuffle(Vector512`1<UInt32> value, byte control);
    public static Vector512`1<double> Shuffle4x128(Vector512`1<double> left, Vector512`1<double> right, byte control);
    public static Vector512`1<int> Shuffle4x128(Vector512`1<int> left, Vector512`1<int> right, byte control);
    public static Vector512`1<long> Shuffle4x128(Vector512`1<long> left, Vector512`1<long> right, byte control);
    public static Vector512`1<float> Shuffle4x128(Vector512`1<float> left, Vector512`1<float> right, byte control);
    public static Vector512`1<UInt32> Shuffle4x128(Vector512`1<UInt32> left, Vector512`1<UInt32> right, byte control);
    public static Vector512`1<ulong> Shuffle4x128(Vector512`1<ulong> left, Vector512`1<ulong> right, byte control);
    public static Vector512`1<float> Sqrt(Vector512`1<float> value);
    public static Vector512`1<double> Sqrt(Vector512`1<double> value);
    public static void Store(Byte* address, Vector512`1<byte> source);
    public static void Store(Double* address, Vector512`1<double> source);
    public static void Store(Int16* address, Vector512`1<short> source);
    public static void Store(Int32* address, Vector512`1<int> source);
    public static void Store(Int64* address, Vector512`1<long> source);
    public static void Store(SByte* address, Vector512`1<sbyte> source);
    public static void Store(Single* address, Vector512`1<float> source);
    public static void Store(UInt16* address, Vector512`1<ushort> source);
    public static void Store(UInt32* address, Vector512`1<UInt32> source);
    public static void Store(UInt64* address, Vector512`1<ulong> source);
    public static void StoreAligned(Byte* address, Vector512`1<byte> source);
    public static void StoreAligned(Double* address, Vector512`1<double> source);
    public static void StoreAligned(Int16* address, Vector512`1<short> source);
    public static void StoreAligned(Int32* address, Vector512`1<int> source);
    public static void StoreAligned(Int64* address, Vector512`1<long> source);
    public static void StoreAligned(SByte* address, Vector512`1<sbyte> source);
    public static void StoreAligned(Single* address, Vector512`1<float> source);
    public static void StoreAligned(UInt16* address, Vector512`1<ushort> source);
    public static void StoreAligned(UInt32* address, Vector512`1<UInt32> source);
    public static void StoreAligned(UInt64* address, Vector512`1<ulong> source);
    public static void StoreAlignedNonTemporal(Byte* address, Vector512`1<byte> source);
    public static void StoreAlignedNonTemporal(Double* address, Vector512`1<double> source);
    public static void StoreAlignedNonTemporal(Int16* address, Vector512`1<short> source);
    public static void StoreAlignedNonTemporal(Int32* address, Vector512`1<int> source);
    public static void StoreAlignedNonTemporal(Int64* address, Vector512`1<long> source);
    public static void StoreAlignedNonTemporal(SByte* address, Vector512`1<sbyte> source);
    public static void StoreAlignedNonTemporal(Single* address, Vector512`1<float> source);
    public static void StoreAlignedNonTemporal(UInt16* address, Vector512`1<ushort> source);
    public static void StoreAlignedNonTemporal(UInt32* address, Vector512`1<UInt32> source);
    public static void StoreAlignedNonTemporal(UInt64* address, Vector512`1<ulong> source);
    public static Vector512`1<double> Subtract(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<int> Subtract(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> Subtract(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<float> Subtract(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<UInt32> Subtract(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> Subtract(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<byte> TernaryLogic(Vector512`1<byte> a, Vector512`1<byte> b, Vector512`1<byte> c, byte control);
    public static Vector512`1<double> TernaryLogic(Vector512`1<double> a, Vector512`1<double> b, Vector512`1<double> c, byte control);
    public static Vector512`1<int> TernaryLogic(Vector512`1<int> a, Vector512`1<int> b, Vector512`1<int> c, byte control);
    public static Vector512`1<short> TernaryLogic(Vector512`1<short> a, Vector512`1<short> b, Vector512`1<short> c, byte control);
    public static Vector512`1<long> TernaryLogic(Vector512`1<long> a, Vector512`1<long> b, Vector512`1<long> c, byte control);
    public static Vector512`1<sbyte> TernaryLogic(Vector512`1<sbyte> a, Vector512`1<sbyte> b, Vector512`1<sbyte> c, byte control);
    public static Vector512`1<float> TernaryLogic(Vector512`1<float> a, Vector512`1<float> b, Vector512`1<float> c, byte control);
    public static Vector512`1<ushort> TernaryLogic(Vector512`1<ushort> a, Vector512`1<ushort> b, Vector512`1<ushort> c, byte control);
    public static Vector512`1<UInt32> TernaryLogic(Vector512`1<UInt32> a, Vector512`1<UInt32> b, Vector512`1<UInt32> c, byte control);
    public static Vector512`1<ulong> TernaryLogic(Vector512`1<ulong> a, Vector512`1<ulong> b, Vector512`1<ulong> c, byte control);
    public static Vector512`1<double> UnpackHigh(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<int> UnpackHigh(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> UnpackHigh(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<float> UnpackHigh(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<UInt32> UnpackHigh(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> UnpackHigh(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<double> UnpackLow(Vector512`1<double> left, Vector512`1<double> right);
    public static Vector512`1<int> UnpackLow(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> UnpackLow(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<float> UnpackLow(Vector512`1<float> left, Vector512`1<float> right);
    public static Vector512`1<UInt32> UnpackLow(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> UnpackLow(Vector512`1<ulong> left, Vector512`1<ulong> right);
    public static Vector512`1<byte> Xor(Vector512`1<byte> left, Vector512`1<byte> right);
    public static Vector512`1<short> Xor(Vector512`1<short> left, Vector512`1<short> right);
    public static Vector512`1<int> Xor(Vector512`1<int> left, Vector512`1<int> right);
    public static Vector512`1<long> Xor(Vector512`1<long> left, Vector512`1<long> right);
    public static Vector512`1<sbyte> Xor(Vector512`1<sbyte> left, Vector512`1<sbyte> right);
    public static Vector512`1<ushort> Xor(Vector512`1<ushort> left, Vector512`1<ushort> right);
    public static Vector512`1<UInt32> Xor(Vector512`1<UInt32> left, Vector512`1<UInt32> right);
    public static Vector512`1<ulong> Xor(Vector512`1<ulong> left, Vector512`1<ulong> right);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Avx512Vbmi : Avx512BW {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector512`1<byte> PermuteVar64x8(Vector512`1<byte> left, Vector512`1<byte> control);
    public static Vector512`1<sbyte> PermuteVar64x8(Vector512`1<sbyte> left, Vector512`1<sbyte> control);
    public static Vector512`1<byte> PermuteVar64x8x2(Vector512`1<byte> lower, Vector512`1<byte> indices, Vector512`1<byte> upper);
    public static Vector512`1<sbyte> PermuteVar64x8x2(Vector512`1<sbyte> lower, Vector512`1<sbyte> indices, Vector512`1<sbyte> upper);
}
[CLSCompliantAttribute("False")]
[RequiresPreviewFeaturesAttribute("AvxVnni is in preview.")]
public abstract class System.Runtime.Intrinsics.X86.AvxVnni : Avx2 {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<int> MultiplyWideningAndAdd(Vector128`1<int> addend, Vector128`1<byte> left, Vector128`1<sbyte> right);
    public static Vector128`1<int> MultiplyWideningAndAdd(Vector128`1<int> addend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector256`1<int> MultiplyWideningAndAdd(Vector256`1<int> addend, Vector256`1<byte> left, Vector256`1<sbyte> right);
    public static Vector256`1<int> MultiplyWideningAndAdd(Vector256`1<int> addend, Vector256`1<short> left, Vector256`1<short> right);
    public static Vector128`1<int> MultiplyWideningAndAddSaturate(Vector128`1<int> addend, Vector128`1<byte> left, Vector128`1<sbyte> right);
    public static Vector128`1<int> MultiplyWideningAndAddSaturate(Vector128`1<int> addend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector256`1<int> MultiplyWideningAndAddSaturate(Vector256`1<int> addend, Vector256`1<byte> left, Vector256`1<sbyte> right);
    public static Vector256`1<int> MultiplyWideningAndAddSaturate(Vector256`1<int> addend, Vector256`1<short> left, Vector256`1<short> right);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Bmi1 : X86Base {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static UInt32 AndNot(UInt32 left, UInt32 right);
    public static UInt32 BitFieldExtract(UInt32 value, byte start, byte length);
    public static UInt32 BitFieldExtract(UInt32 value, ushort control);
    public static UInt32 ExtractLowestSetBit(UInt32 value);
    public static UInt32 GetMaskUpToLowestSetBit(UInt32 value);
    public static UInt32 ResetLowestSetBit(UInt32 value);
    public static UInt32 TrailingZeroCount(UInt32 value);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Bmi2 : X86Base {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static UInt32 MultiplyNoFlags(UInt32 left, UInt32 right);
    public static UInt32 MultiplyNoFlags(UInt32 left, UInt32 right, UInt32* low);
    public static UInt32 ParallelBitDeposit(UInt32 value, UInt32 mask);
    public static UInt32 ParallelBitExtract(UInt32 value, UInt32 mask);
    public static UInt32 ZeroHighBits(UInt32 value, UInt32 index);
}
public enum System.Runtime.Intrinsics.X86.FloatComparisonMode : Enum {
    public byte value__;
    public static FloatComparisonMode OrderedEqualNonSignaling;
    public static FloatComparisonMode OrderedLessThanSignaling;
    public static FloatComparisonMode OrderedLessThanOrEqualSignaling;
    public static FloatComparisonMode UnorderedNonSignaling;
    public static FloatComparisonMode UnorderedNotEqualNonSignaling;
    public static FloatComparisonMode UnorderedNotLessThanSignaling;
    public static FloatComparisonMode UnorderedNotLessThanOrEqualSignaling;
    public static FloatComparisonMode OrderedNonSignaling;
    public static FloatComparisonMode UnorderedEqualNonSignaling;
    public static FloatComparisonMode UnorderedNotGreaterThanOrEqualSignaling;
    public static FloatComparisonMode UnorderedNotGreaterThanSignaling;
    public static FloatComparisonMode OrderedFalseNonSignaling;
    public static FloatComparisonMode OrderedNotEqualNonSignaling;
    public static FloatComparisonMode OrderedGreaterThanOrEqualSignaling;
    public static FloatComparisonMode OrderedGreaterThanSignaling;
    public static FloatComparisonMode UnorderedTrueNonSignaling;
    public static FloatComparisonMode OrderedEqualSignaling;
    public static FloatComparisonMode OrderedLessThanNonSignaling;
    public static FloatComparisonMode OrderedLessThanOrEqualNonSignaling;
    public static FloatComparisonMode UnorderedSignaling;
    public static FloatComparisonMode UnorderedNotEqualSignaling;
    public static FloatComparisonMode UnorderedNotLessThanNonSignaling;
    public static FloatComparisonMode UnorderedNotLessThanOrEqualNonSignaling;
    public static FloatComparisonMode OrderedSignaling;
    public static FloatComparisonMode UnorderedEqualSignaling;
    public static FloatComparisonMode UnorderedNotGreaterThanOrEqualNonSignaling;
    public static FloatComparisonMode UnorderedNotGreaterThanNonSignaling;
    public static FloatComparisonMode OrderedFalseSignaling;
    public static FloatComparisonMode OrderedNotEqualSignaling;
    public static FloatComparisonMode OrderedGreaterThanOrEqualNonSignaling;
    public static FloatComparisonMode OrderedGreaterThanNonSignaling;
    public static FloatComparisonMode UnorderedTrueSignaling;
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Fma : Avx {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<double> MultiplyAdd(Vector128`1<double> a, Vector128`1<double> b, Vector128`1<double> c);
    public static Vector128`1<float> MultiplyAdd(Vector128`1<float> a, Vector128`1<float> b, Vector128`1<float> c);
    public static Vector256`1<double> MultiplyAdd(Vector256`1<double> a, Vector256`1<double> b, Vector256`1<double> c);
    public static Vector256`1<float> MultiplyAdd(Vector256`1<float> a, Vector256`1<float> b, Vector256`1<float> c);
    public static Vector128`1<double> MultiplyAddNegated(Vector128`1<double> a, Vector128`1<double> b, Vector128`1<double> c);
    public static Vector128`1<float> MultiplyAddNegated(Vector128`1<float> a, Vector128`1<float> b, Vector128`1<float> c);
    public static Vector256`1<double> MultiplyAddNegated(Vector256`1<double> a, Vector256`1<double> b, Vector256`1<double> c);
    public static Vector256`1<float> MultiplyAddNegated(Vector256`1<float> a, Vector256`1<float> b, Vector256`1<float> c);
    public static Vector128`1<double> MultiplyAddNegatedScalar(Vector128`1<double> a, Vector128`1<double> b, Vector128`1<double> c);
    public static Vector128`1<float> MultiplyAddNegatedScalar(Vector128`1<float> a, Vector128`1<float> b, Vector128`1<float> c);
    public static Vector128`1<double> MultiplyAddScalar(Vector128`1<double> a, Vector128`1<double> b, Vector128`1<double> c);
    public static Vector128`1<float> MultiplyAddScalar(Vector128`1<float> a, Vector128`1<float> b, Vector128`1<float> c);
    public static Vector128`1<double> MultiplyAddSubtract(Vector128`1<double> a, Vector128`1<double> b, Vector128`1<double> c);
    public static Vector128`1<float> MultiplyAddSubtract(Vector128`1<float> a, Vector128`1<float> b, Vector128`1<float> c);
    public static Vector256`1<double> MultiplyAddSubtract(Vector256`1<double> a, Vector256`1<double> b, Vector256`1<double> c);
    public static Vector256`1<float> MultiplyAddSubtract(Vector256`1<float> a, Vector256`1<float> b, Vector256`1<float> c);
    public static Vector128`1<double> MultiplySubtract(Vector128`1<double> a, Vector128`1<double> b, Vector128`1<double> c);
    public static Vector128`1<float> MultiplySubtract(Vector128`1<float> a, Vector128`1<float> b, Vector128`1<float> c);
    public static Vector256`1<double> MultiplySubtract(Vector256`1<double> a, Vector256`1<double> b, Vector256`1<double> c);
    public static Vector256`1<float> MultiplySubtract(Vector256`1<float> a, Vector256`1<float> b, Vector256`1<float> c);
    public static Vector128`1<double> MultiplySubtractAdd(Vector128`1<double> a, Vector128`1<double> b, Vector128`1<double> c);
    public static Vector128`1<float> MultiplySubtractAdd(Vector128`1<float> a, Vector128`1<float> b, Vector128`1<float> c);
    public static Vector256`1<double> MultiplySubtractAdd(Vector256`1<double> a, Vector256`1<double> b, Vector256`1<double> c);
    public static Vector256`1<float> MultiplySubtractAdd(Vector256`1<float> a, Vector256`1<float> b, Vector256`1<float> c);
    public static Vector128`1<double> MultiplySubtractNegated(Vector128`1<double> a, Vector128`1<double> b, Vector128`1<double> c);
    public static Vector128`1<float> MultiplySubtractNegated(Vector128`1<float> a, Vector128`1<float> b, Vector128`1<float> c);
    public static Vector256`1<double> MultiplySubtractNegated(Vector256`1<double> a, Vector256`1<double> b, Vector256`1<double> c);
    public static Vector256`1<float> MultiplySubtractNegated(Vector256`1<float> a, Vector256`1<float> b, Vector256`1<float> c);
    public static Vector128`1<double> MultiplySubtractNegatedScalar(Vector128`1<double> a, Vector128`1<double> b, Vector128`1<double> c);
    public static Vector128`1<float> MultiplySubtractNegatedScalar(Vector128`1<float> a, Vector128`1<float> b, Vector128`1<float> c);
    public static Vector128`1<double> MultiplySubtractScalar(Vector128`1<double> a, Vector128`1<double> b, Vector128`1<double> c);
    public static Vector128`1<float> MultiplySubtractScalar(Vector128`1<float> a, Vector128`1<float> b, Vector128`1<float> c);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Lzcnt : X86Base {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static UInt32 LeadingZeroCount(UInt32 value);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Pclmulqdq : Sse2 {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<long> CarrylessMultiply(Vector128`1<long> left, Vector128`1<long> right, byte control);
    public static Vector128`1<ulong> CarrylessMultiply(Vector128`1<ulong> left, Vector128`1<ulong> right, byte control);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Popcnt : Sse42 {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static UInt32 PopCount(UInt32 value);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Sse : X86Base {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<float> Add(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> AddScalar(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> And(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> AndNot(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareGreaterThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareGreaterThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareLessThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareLessThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareNotEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareNotGreaterThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareNotGreaterThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareNotLessThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareNotLessThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareOrdered(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareScalarEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareScalarGreaterThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareScalarGreaterThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareScalarLessThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareScalarLessThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareScalarNotEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareScalarNotGreaterThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareScalarNotGreaterThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareScalarNotLessThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareScalarNotLessThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareScalarOrdered(Vector128`1<float> left, Vector128`1<float> right);
    public static bool CompareScalarOrderedEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static bool CompareScalarOrderedGreaterThan(Vector128`1<float> left, Vector128`1<float> right);
    public static bool CompareScalarOrderedGreaterThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static bool CompareScalarOrderedLessThan(Vector128`1<float> left, Vector128`1<float> right);
    public static bool CompareScalarOrderedLessThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static bool CompareScalarOrderedNotEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareScalarUnordered(Vector128`1<float> left, Vector128`1<float> right);
    public static bool CompareScalarUnorderedEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static bool CompareScalarUnorderedGreaterThan(Vector128`1<float> left, Vector128`1<float> right);
    public static bool CompareScalarUnorderedGreaterThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static bool CompareScalarUnorderedLessThan(Vector128`1<float> left, Vector128`1<float> right);
    public static bool CompareScalarUnorderedLessThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static bool CompareScalarUnorderedNotEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> CompareUnordered(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> ConvertScalarToVector128Single(Vector128`1<float> upper, int value);
    public static int ConvertToInt32(Vector128`1<float> value);
    public static int ConvertToInt32WithTruncation(Vector128`1<float> value);
    public static Vector128`1<float> Divide(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> DivideScalar(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> LoadAlignedVector128(Single* address);
    public static Vector128`1<float> LoadHigh(Vector128`1<float> lower, Single* address);
    public static Vector128`1<float> LoadLow(Vector128`1<float> upper, Single* address);
    public static Vector128`1<float> LoadScalarVector128(Single* address);
    public static Vector128`1<float> LoadVector128(Single* address);
    public static Vector128`1<float> Max(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> MaxScalar(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> Min(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> MinScalar(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> MoveHighToLow(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> MoveLowToHigh(Vector128`1<float> left, Vector128`1<float> right);
    public static int MoveMask(Vector128`1<float> value);
    public static Vector128`1<float> MoveScalar(Vector128`1<float> upper, Vector128`1<float> value);
    public static Vector128`1<float> Multiply(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> MultiplyScalar(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> Or(Vector128`1<float> left, Vector128`1<float> right);
    public static void Prefetch0(Void* address);
    public static void Prefetch1(Void* address);
    public static void Prefetch2(Void* address);
    public static void PrefetchNonTemporal(Void* address);
    public static Vector128`1<float> Reciprocal(Vector128`1<float> value);
    public static Vector128`1<float> ReciprocalScalar(Vector128`1<float> value);
    public static Vector128`1<float> ReciprocalScalar(Vector128`1<float> upper, Vector128`1<float> value);
    public static Vector128`1<float> ReciprocalSqrt(Vector128`1<float> value);
    public static Vector128`1<float> ReciprocalSqrtScalar(Vector128`1<float> value);
    public static Vector128`1<float> ReciprocalSqrtScalar(Vector128`1<float> upper, Vector128`1<float> value);
    public static Vector128`1<float> Shuffle(Vector128`1<float> left, Vector128`1<float> right, byte control);
    public static Vector128`1<float> Sqrt(Vector128`1<float> value);
    public static Vector128`1<float> SqrtScalar(Vector128`1<float> value);
    public static Vector128`1<float> SqrtScalar(Vector128`1<float> upper, Vector128`1<float> value);
    public static void Store(Single* address, Vector128`1<float> source);
    public static void StoreAligned(Single* address, Vector128`1<float> source);
    public static void StoreAlignedNonTemporal(Single* address, Vector128`1<float> source);
    public static void StoreFence();
    public static void StoreHigh(Single* address, Vector128`1<float> source);
    public static void StoreLow(Single* address, Vector128`1<float> source);
    public static void StoreScalar(Single* address, Vector128`1<float> source);
    public static Vector128`1<float> Subtract(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> SubtractScalar(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> UnpackHigh(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> UnpackLow(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<float> Xor(Vector128`1<float> left, Vector128`1<float> right);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Sse2 : Sse {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<byte> Add(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> Add(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> Add(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Add(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> Add(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> Add(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> Add(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Add(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> Add(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> AddSaturate(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> AddSaturate(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<sbyte> AddSaturate(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> AddSaturate(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<double> AddScalar(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<byte> And(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> And(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> And(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> And(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> And(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> And(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> And(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> And(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> And(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> AndNot(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> AndNot(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> AndNot(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> AndNot(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> AndNot(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> AndNot(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> AndNot(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> AndNot(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> AndNot(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> Average(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<ushort> Average(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<byte> CompareEqual(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> CompareEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> CompareEqual(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareEqual(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareEqual(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> CompareEqual(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> CompareEqual(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<double> CompareGreaterThan(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> CompareGreaterThan(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareGreaterThan(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareGreaterThan(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<double> CompareGreaterThanOrEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareLessThan(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> CompareLessThan(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareLessThan(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareLessThan(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<double> CompareLessThanOrEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareNotEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareNotGreaterThan(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareNotGreaterThanOrEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareNotLessThan(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareNotLessThanOrEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareOrdered(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareScalarEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareScalarGreaterThan(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareScalarGreaterThanOrEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareScalarLessThan(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareScalarLessThanOrEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareScalarNotEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareScalarNotGreaterThan(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareScalarNotGreaterThanOrEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareScalarNotLessThan(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareScalarNotLessThanOrEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareScalarOrdered(Vector128`1<double> left, Vector128`1<double> right);
    public static bool CompareScalarOrderedEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static bool CompareScalarOrderedGreaterThan(Vector128`1<double> left, Vector128`1<double> right);
    public static bool CompareScalarOrderedGreaterThanOrEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static bool CompareScalarOrderedLessThan(Vector128`1<double> left, Vector128`1<double> right);
    public static bool CompareScalarOrderedLessThanOrEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static bool CompareScalarOrderedNotEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareScalarUnordered(Vector128`1<double> left, Vector128`1<double> right);
    public static bool CompareScalarUnorderedEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static bool CompareScalarUnorderedGreaterThan(Vector128`1<double> left, Vector128`1<double> right);
    public static bool CompareScalarUnorderedGreaterThanOrEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static bool CompareScalarUnorderedLessThan(Vector128`1<double> left, Vector128`1<double> right);
    public static bool CompareScalarUnorderedLessThanOrEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static bool CompareScalarUnorderedNotEqual(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> CompareUnordered(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> ConvertScalarToVector128Double(Vector128`1<double> upper, int value);
    public static Vector128`1<double> ConvertScalarToVector128Double(Vector128`1<double> upper, Vector128`1<float> value);
    public static Vector128`1<int> ConvertScalarToVector128Int32(int value);
    public static Vector128`1<float> ConvertScalarToVector128Single(Vector128`1<float> upper, Vector128`1<double> value);
    public static Vector128`1<UInt32> ConvertScalarToVector128UInt32(UInt32 value);
    public static int ConvertToInt32(Vector128`1<double> value);
    public static int ConvertToInt32(Vector128`1<int> value);
    public static int ConvertToInt32WithTruncation(Vector128`1<double> value);
    public static UInt32 ConvertToUInt32(Vector128`1<UInt32> value);
    public static Vector128`1<double> ConvertToVector128Double(Vector128`1<int> value);
    public static Vector128`1<double> ConvertToVector128Double(Vector128`1<float> value);
    public static Vector128`1<int> ConvertToVector128Int32(Vector128`1<double> value);
    public static Vector128`1<int> ConvertToVector128Int32(Vector128`1<float> value);
    public static Vector128`1<int> ConvertToVector128Int32WithTruncation(Vector128`1<double> value);
    public static Vector128`1<int> ConvertToVector128Int32WithTruncation(Vector128`1<float> value);
    public static Vector128`1<float> ConvertToVector128Single(Vector128`1<double> value);
    public static Vector128`1<float> ConvertToVector128Single(Vector128`1<int> value);
    public static Vector128`1<double> Divide(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<double> DivideScalar(Vector128`1<double> left, Vector128`1<double> right);
    public static ushort Extract(Vector128`1<ushort> value, byte index);
    public static Vector128`1<short> Insert(Vector128`1<short> value, short data, byte index);
    public static Vector128`1<ushort> Insert(Vector128`1<ushort> value, ushort data, byte index);
    public static Vector128`1<byte> LoadAlignedVector128(Byte* address);
    public static Vector128`1<double> LoadAlignedVector128(Double* address);
    public static Vector128`1<short> LoadAlignedVector128(Int16* address);
    public static Vector128`1<int> LoadAlignedVector128(Int32* address);
    public static Vector128`1<long> LoadAlignedVector128(Int64* address);
    public static Vector128`1<sbyte> LoadAlignedVector128(SByte* address);
    public static Vector128`1<ushort> LoadAlignedVector128(UInt16* address);
    public static Vector128`1<UInt32> LoadAlignedVector128(UInt32* address);
    public static Vector128`1<ulong> LoadAlignedVector128(UInt64* address);
    public static void LoadFence();
    public static Vector128`1<double> LoadHigh(Vector128`1<double> lower, Double* address);
    public static Vector128`1<double> LoadLow(Vector128`1<double> upper, Double* address);
    public static Vector128`1<double> LoadScalarVector128(Double* address);
    public static Vector128`1<int> LoadScalarVector128(Int32* address);
    public static Vector128`1<long> LoadScalarVector128(Int64* address);
    public static Vector128`1<UInt32> LoadScalarVector128(UInt32* address);
    public static Vector128`1<ulong> LoadScalarVector128(UInt64* address);
    public static Vector128`1<byte> LoadVector128(Byte* address);
    public static Vector128`1<double> LoadVector128(Double* address);
    public static Vector128`1<short> LoadVector128(Int16* address);
    public static Vector128`1<int> LoadVector128(Int32* address);
    public static Vector128`1<long> LoadVector128(Int64* address);
    public static Vector128`1<sbyte> LoadVector128(SByte* address);
    public static Vector128`1<ushort> LoadVector128(UInt16* address);
    public static Vector128`1<UInt32> LoadVector128(UInt32* address);
    public static Vector128`1<ulong> LoadVector128(UInt64* address);
    public static void MaskMove(Vector128`1<byte> source, Vector128`1<byte> mask, Byte* address);
    public static void MaskMove(Vector128`1<sbyte> source, Vector128`1<sbyte> mask, SByte* address);
    public static Vector128`1<byte> Max(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> Max(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> Max(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<double> MaxScalar(Vector128`1<double> left, Vector128`1<double> right);
    public static void MemoryFence();
    public static Vector128`1<byte> Min(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> Min(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> Min(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<double> MinScalar(Vector128`1<double> left, Vector128`1<double> right);
    public static int MoveMask(Vector128`1<byte> value);
    public static int MoveMask(Vector128`1<double> value);
    public static int MoveMask(Vector128`1<sbyte> value);
    public static Vector128`1<double> MoveScalar(Vector128`1<double> upper, Vector128`1<double> value);
    public static Vector128`1<long> MoveScalar(Vector128`1<long> value);
    public static Vector128`1<ulong> MoveScalar(Vector128`1<ulong> value);
    public static Vector128`1<double> Multiply(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<ulong> Multiply(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<int> MultiplyAddAdjacent(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<short> MultiplyHigh(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> MultiplyHigh(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<short> MultiplyLow(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> MultiplyLow(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<double> MultiplyScalar(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<byte> Or(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> Or(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> Or(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Or(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> Or(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> Or(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> Or(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Or(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> Or(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<sbyte> PackSignedSaturate(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<short> PackSignedSaturate(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<byte> PackUnsignedSaturate(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<short> ShiftLeftLogical(Vector128`1<short> value, byte count);
    public static Vector128`1<short> ShiftLeftLogical(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftLeftLogical(Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftLeftLogical(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftLeftLogical(Vector128`1<long> value, byte count);
    public static Vector128`1<long> ShiftLeftLogical(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<ushort> ShiftLeftLogical(Vector128`1<ushort> value, byte count);
    public static Vector128`1<ushort> ShiftLeftLogical(Vector128`1<ushort> value, Vector128`1<ushort> count);
    public static Vector128`1<UInt32> ShiftLeftLogical(Vector128`1<UInt32> value, byte count);
    public static Vector128`1<UInt32> ShiftLeftLogical(Vector128`1<UInt32> value, Vector128`1<UInt32> count);
    public static Vector128`1<ulong> ShiftLeftLogical(Vector128`1<ulong> value, byte count);
    public static Vector128`1<ulong> ShiftLeftLogical(Vector128`1<ulong> value, Vector128`1<ulong> count);
    public static Vector128`1<byte> ShiftLeftLogical128BitLane(Vector128`1<byte> value, byte numBytes);
    public static Vector128`1<short> ShiftLeftLogical128BitLane(Vector128`1<short> value, byte numBytes);
    public static Vector128`1<int> ShiftLeftLogical128BitLane(Vector128`1<int> value, byte numBytes);
    public static Vector128`1<long> ShiftLeftLogical128BitLane(Vector128`1<long> value, byte numBytes);
    public static Vector128`1<sbyte> ShiftLeftLogical128BitLane(Vector128`1<sbyte> value, byte numBytes);
    public static Vector128`1<ushort> ShiftLeftLogical128BitLane(Vector128`1<ushort> value, byte numBytes);
    public static Vector128`1<UInt32> ShiftLeftLogical128BitLane(Vector128`1<UInt32> value, byte numBytes);
    public static Vector128`1<ulong> ShiftLeftLogical128BitLane(Vector128`1<ulong> value, byte numBytes);
    public static Vector128`1<short> ShiftRightArithmetic(Vector128`1<short> value, byte count);
    public static Vector128`1<short> ShiftRightArithmetic(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftRightArithmetic(Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftRightArithmetic(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<short> ShiftRightLogical(Vector128`1<short> value, byte count);
    public static Vector128`1<short> ShiftRightLogical(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftRightLogical(Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftRightLogical(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftRightLogical(Vector128`1<long> value, byte count);
    public static Vector128`1<long> ShiftRightLogical(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<ushort> ShiftRightLogical(Vector128`1<ushort> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogical(Vector128`1<ushort> value, Vector128`1<ushort> count);
    public static Vector128`1<UInt32> ShiftRightLogical(Vector128`1<UInt32> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogical(Vector128`1<UInt32> value, Vector128`1<UInt32> count);
    public static Vector128`1<ulong> ShiftRightLogical(Vector128`1<ulong> value, byte count);
    public static Vector128`1<ulong> ShiftRightLogical(Vector128`1<ulong> value, Vector128`1<ulong> count);
    public static Vector128`1<byte> ShiftRightLogical128BitLane(Vector128`1<byte> value, byte numBytes);
    public static Vector128`1<short> ShiftRightLogical128BitLane(Vector128`1<short> value, byte numBytes);
    public static Vector128`1<int> ShiftRightLogical128BitLane(Vector128`1<int> value, byte numBytes);
    public static Vector128`1<long> ShiftRightLogical128BitLane(Vector128`1<long> value, byte numBytes);
    public static Vector128`1<sbyte> ShiftRightLogical128BitLane(Vector128`1<sbyte> value, byte numBytes);
    public static Vector128`1<ushort> ShiftRightLogical128BitLane(Vector128`1<ushort> value, byte numBytes);
    public static Vector128`1<UInt32> ShiftRightLogical128BitLane(Vector128`1<UInt32> value, byte numBytes);
    public static Vector128`1<ulong> ShiftRightLogical128BitLane(Vector128`1<ulong> value, byte numBytes);
    public static Vector128`1<double> Shuffle(Vector128`1<double> left, Vector128`1<double> right, byte control);
    public static Vector128`1<int> Shuffle(Vector128`1<int> value, byte control);
    public static Vector128`1<UInt32> Shuffle(Vector128`1<UInt32> value, byte control);
    public static Vector128`1<short> ShuffleHigh(Vector128`1<short> value, byte control);
    public static Vector128`1<ushort> ShuffleHigh(Vector128`1<ushort> value, byte control);
    public static Vector128`1<short> ShuffleLow(Vector128`1<short> value, byte control);
    public static Vector128`1<ushort> ShuffleLow(Vector128`1<ushort> value, byte control);
    public static Vector128`1<double> Sqrt(Vector128`1<double> value);
    public static Vector128`1<double> SqrtScalar(Vector128`1<double> value);
    public static Vector128`1<double> SqrtScalar(Vector128`1<double> upper, Vector128`1<double> value);
    public static void Store(Byte* address, Vector128`1<byte> source);
    public static void Store(Double* address, Vector128`1<double> source);
    public static void Store(Int16* address, Vector128`1<short> source);
    public static void Store(Int32* address, Vector128`1<int> source);
    public static void Store(Int64* address, Vector128`1<long> source);
    public static void Store(SByte* address, Vector128`1<sbyte> source);
    public static void Store(UInt16* address, Vector128`1<ushort> source);
    public static void Store(UInt32* address, Vector128`1<UInt32> source);
    public static void Store(UInt64* address, Vector128`1<ulong> source);
    public static void StoreAligned(Byte* address, Vector128`1<byte> source);
    public static void StoreAligned(Double* address, Vector128`1<double> source);
    public static void StoreAligned(Int16* address, Vector128`1<short> source);
    public static void StoreAligned(Int32* address, Vector128`1<int> source);
    public static void StoreAligned(Int64* address, Vector128`1<long> source);
    public static void StoreAligned(SByte* address, Vector128`1<sbyte> source);
    public static void StoreAligned(UInt16* address, Vector128`1<ushort> source);
    public static void StoreAligned(UInt32* address, Vector128`1<UInt32> source);
    public static void StoreAligned(UInt64* address, Vector128`1<ulong> source);
    public static void StoreAlignedNonTemporal(Byte* address, Vector128`1<byte> source);
    public static void StoreAlignedNonTemporal(Double* address, Vector128`1<double> source);
    public static void StoreAlignedNonTemporal(Int16* address, Vector128`1<short> source);
    public static void StoreAlignedNonTemporal(Int32* address, Vector128`1<int> source);
    public static void StoreAlignedNonTemporal(Int64* address, Vector128`1<long> source);
    public static void StoreAlignedNonTemporal(SByte* address, Vector128`1<sbyte> source);
    public static void StoreAlignedNonTemporal(UInt16* address, Vector128`1<ushort> source);
    public static void StoreAlignedNonTemporal(UInt32* address, Vector128`1<UInt32> source);
    public static void StoreAlignedNonTemporal(UInt64* address, Vector128`1<ulong> source);
    public static void StoreHigh(Double* address, Vector128`1<double> source);
    public static void StoreLow(Double* address, Vector128`1<double> source);
    public static void StoreNonTemporal(Int32* address, int value);
    public static void StoreNonTemporal(UInt32* address, UInt32 value);
    public static void StoreScalar(Double* address, Vector128`1<double> source);
    public static void StoreScalar(Int32* address, Vector128`1<int> source);
    public static void StoreScalar(Int64* address, Vector128`1<long> source);
    public static void StoreScalar(UInt32* address, Vector128`1<UInt32> source);
    public static void StoreScalar(UInt64* address, Vector128`1<ulong> source);
    public static Vector128`1<byte> Subtract(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> Subtract(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> Subtract(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Subtract(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> Subtract(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> Subtract(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> Subtract(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Subtract(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> Subtract(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> SubtractSaturate(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> SubtractSaturate(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<sbyte> SubtractSaturate(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> SubtractSaturate(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<double> SubtractScalar(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<ushort> SumAbsoluteDifferences(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<byte> UnpackHigh(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> UnpackHigh(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> UnpackHigh(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> UnpackHigh(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> UnpackHigh(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> UnpackHigh(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> UnpackHigh(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> UnpackHigh(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> UnpackHigh(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> UnpackLow(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> UnpackLow(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> UnpackLow(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> UnpackLow(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> UnpackLow(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> UnpackLow(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> UnpackLow(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> UnpackLow(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> UnpackLow(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> Xor(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> Xor(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> Xor(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Xor(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> Xor(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> Xor(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> Xor(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Xor(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> Xor(Vector128`1<ulong> left, Vector128`1<ulong> right);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Sse3 : Sse2 {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<double> AddSubtract(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<float> AddSubtract(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> HorizontalAdd(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<float> HorizontalAdd(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> HorizontalSubtract(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<float> HorizontalSubtract(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<double> LoadAndDuplicateToVector128(Double* address);
    public static Vector128`1<byte> LoadDquVector128(Byte* address);
    public static Vector128`1<short> LoadDquVector128(Int16* address);
    public static Vector128`1<int> LoadDquVector128(Int32* address);
    public static Vector128`1<long> LoadDquVector128(Int64* address);
    public static Vector128`1<sbyte> LoadDquVector128(SByte* address);
    public static Vector128`1<ushort> LoadDquVector128(UInt16* address);
    public static Vector128`1<UInt32> LoadDquVector128(UInt32* address);
    public static Vector128`1<ulong> LoadDquVector128(UInt64* address);
    public static Vector128`1<double> MoveAndDuplicate(Vector128`1<double> source);
    public static Vector128`1<float> MoveHighAndDuplicate(Vector128`1<float> source);
    public static Vector128`1<float> MoveLowAndDuplicate(Vector128`1<float> source);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Sse41 : Ssse3 {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<double> Blend(Vector128`1<double> left, Vector128`1<double> right, byte control);
    public static Vector128`1<short> Blend(Vector128`1<short> left, Vector128`1<short> right, byte control);
    public static Vector128`1<float> Blend(Vector128`1<float> left, Vector128`1<float> right, byte control);
    public static Vector128`1<ushort> Blend(Vector128`1<ushort> left, Vector128`1<ushort> right, byte control);
    public static Vector128`1<byte> BlendVariable(Vector128`1<byte> left, Vector128`1<byte> right, Vector128`1<byte> mask);
    public static Vector128`1<double> BlendVariable(Vector128`1<double> left, Vector128`1<double> right, Vector128`1<double> mask);
    public static Vector128`1<short> BlendVariable(Vector128`1<short> left, Vector128`1<short> right, Vector128`1<short> mask);
    public static Vector128`1<int> BlendVariable(Vector128`1<int> left, Vector128`1<int> right, Vector128`1<int> mask);
    public static Vector128`1<long> BlendVariable(Vector128`1<long> left, Vector128`1<long> right, Vector128`1<long> mask);
    public static Vector128`1<sbyte> BlendVariable(Vector128`1<sbyte> left, Vector128`1<sbyte> right, Vector128`1<sbyte> mask);
    public static Vector128`1<float> BlendVariable(Vector128`1<float> left, Vector128`1<float> right, Vector128`1<float> mask);
    public static Vector128`1<ushort> BlendVariable(Vector128`1<ushort> left, Vector128`1<ushort> right, Vector128`1<ushort> mask);
    public static Vector128`1<UInt32> BlendVariable(Vector128`1<UInt32> left, Vector128`1<UInt32> right, Vector128`1<UInt32> mask);
    public static Vector128`1<ulong> BlendVariable(Vector128`1<ulong> left, Vector128`1<ulong> right, Vector128`1<ulong> mask);
    public static Vector128`1<double> Ceiling(Vector128`1<double> value);
    public static Vector128`1<float> Ceiling(Vector128`1<float> value);
    public static Vector128`1<double> CeilingScalar(Vector128`1<double> value);
    public static Vector128`1<double> CeilingScalar(Vector128`1<double> upper, Vector128`1<double> value);
    public static Vector128`1<float> CeilingScalar(Vector128`1<float> value);
    public static Vector128`1<float> CeilingScalar(Vector128`1<float> upper, Vector128`1<float> value);
    public static Vector128`1<long> CompareEqual(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<ulong> CompareEqual(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<short> ConvertToVector128Int16(Byte* address);
    public static Vector128`1<short> ConvertToVector128Int16(Vector128`1<byte> value);
    public static Vector128`1<short> ConvertToVector128Int16(Vector128`1<sbyte> value);
    public static Vector128`1<short> ConvertToVector128Int16(SByte* address);
    public static Vector128`1<int> ConvertToVector128Int32(Byte* address);
    public static Vector128`1<int> ConvertToVector128Int32(Int16* address);
    public static Vector128`1<int> ConvertToVector128Int32(Vector128`1<byte> value);
    public static Vector128`1<int> ConvertToVector128Int32(Vector128`1<short> value);
    public static Vector128`1<int> ConvertToVector128Int32(Vector128`1<sbyte> value);
    public static Vector128`1<int> ConvertToVector128Int32(Vector128`1<ushort> value);
    public static Vector128`1<int> ConvertToVector128Int32(SByte* address);
    public static Vector128`1<int> ConvertToVector128Int32(UInt16* address);
    public static Vector128`1<long> ConvertToVector128Int64(Byte* address);
    public static Vector128`1<long> ConvertToVector128Int64(Int16* address);
    public static Vector128`1<long> ConvertToVector128Int64(Int32* address);
    public static Vector128`1<long> ConvertToVector128Int64(Vector128`1<byte> value);
    public static Vector128`1<long> ConvertToVector128Int64(Vector128`1<short> value);
    public static Vector128`1<long> ConvertToVector128Int64(Vector128`1<int> value);
    public static Vector128`1<long> ConvertToVector128Int64(Vector128`1<sbyte> value);
    public static Vector128`1<long> ConvertToVector128Int64(Vector128`1<ushort> value);
    public static Vector128`1<long> ConvertToVector128Int64(Vector128`1<UInt32> value);
    public static Vector128`1<long> ConvertToVector128Int64(SByte* address);
    public static Vector128`1<long> ConvertToVector128Int64(UInt16* address);
    public static Vector128`1<long> ConvertToVector128Int64(UInt32* address);
    public static Vector128`1<double> DotProduct(Vector128`1<double> left, Vector128`1<double> right, byte control);
    public static Vector128`1<float> DotProduct(Vector128`1<float> left, Vector128`1<float> right, byte control);
    public static byte Extract(Vector128`1<byte> value, byte index);
    public static int Extract(Vector128`1<int> value, byte index);
    public static float Extract(Vector128`1<float> value, byte index);
    public static UInt32 Extract(Vector128`1<UInt32> value, byte index);
    public static Vector128`1<double> Floor(Vector128`1<double> value);
    public static Vector128`1<float> Floor(Vector128`1<float> value);
    public static Vector128`1<double> FloorScalar(Vector128`1<double> value);
    public static Vector128`1<double> FloorScalar(Vector128`1<double> upper, Vector128`1<double> value);
    public static Vector128`1<float> FloorScalar(Vector128`1<float> value);
    public static Vector128`1<float> FloorScalar(Vector128`1<float> upper, Vector128`1<float> value);
    public static Vector128`1<byte> Insert(Vector128`1<byte> value, byte data, byte index);
    public static Vector128`1<int> Insert(Vector128`1<int> value, int data, byte index);
    public static Vector128`1<sbyte> Insert(Vector128`1<sbyte> value, sbyte data, byte index);
    public static Vector128`1<float> Insert(Vector128`1<float> value, Vector128`1<float> data, byte index);
    public static Vector128`1<UInt32> Insert(Vector128`1<UInt32> value, UInt32 data, byte index);
    public static Vector128`1<byte> LoadAlignedVector128NonTemporal(Byte* address);
    public static Vector128`1<short> LoadAlignedVector128NonTemporal(Int16* address);
    public static Vector128`1<int> LoadAlignedVector128NonTemporal(Int32* address);
    public static Vector128`1<long> LoadAlignedVector128NonTemporal(Int64* address);
    public static Vector128`1<sbyte> LoadAlignedVector128NonTemporal(SByte* address);
    public static Vector128`1<ushort> LoadAlignedVector128NonTemporal(UInt16* address);
    public static Vector128`1<UInt32> LoadAlignedVector128NonTemporal(UInt32* address);
    public static Vector128`1<ulong> LoadAlignedVector128NonTemporal(UInt64* address);
    public static Vector128`1<int> Max(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> Max(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> Max(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Max(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<int> Min(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> Min(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> Min(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Min(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ushort> MinHorizontal(Vector128`1<ushort> value);
    public static Vector128`1<ushort> MultipleSumAbsoluteDifferences(Vector128`1<byte> left, Vector128`1<byte> right, byte mask);
    public static Vector128`1<long> Multiply(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> MultiplyLow(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<UInt32> MultiplyLow(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ushort> PackUnsignedSaturate(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<double> RoundCurrentDirection(Vector128`1<double> value);
    public static Vector128`1<float> RoundCurrentDirection(Vector128`1<float> value);
    public static Vector128`1<double> RoundCurrentDirectionScalar(Vector128`1<double> value);
    public static Vector128`1<double> RoundCurrentDirectionScalar(Vector128`1<double> upper, Vector128`1<double> value);
    public static Vector128`1<float> RoundCurrentDirectionScalar(Vector128`1<float> value);
    public static Vector128`1<float> RoundCurrentDirectionScalar(Vector128`1<float> upper, Vector128`1<float> value);
    public static Vector128`1<double> RoundToNearestInteger(Vector128`1<double> value);
    public static Vector128`1<float> RoundToNearestInteger(Vector128`1<float> value);
    public static Vector128`1<double> RoundToNearestIntegerScalar(Vector128`1<double> value);
    public static Vector128`1<double> RoundToNearestIntegerScalar(Vector128`1<double> upper, Vector128`1<double> value);
    public static Vector128`1<float> RoundToNearestIntegerScalar(Vector128`1<float> value);
    public static Vector128`1<float> RoundToNearestIntegerScalar(Vector128`1<float> upper, Vector128`1<float> value);
    public static Vector128`1<double> RoundToNegativeInfinity(Vector128`1<double> value);
    public static Vector128`1<float> RoundToNegativeInfinity(Vector128`1<float> value);
    public static Vector128`1<double> RoundToNegativeInfinityScalar(Vector128`1<double> value);
    public static Vector128`1<double> RoundToNegativeInfinityScalar(Vector128`1<double> upper, Vector128`1<double> value);
    public static Vector128`1<float> RoundToNegativeInfinityScalar(Vector128`1<float> value);
    public static Vector128`1<float> RoundToNegativeInfinityScalar(Vector128`1<float> upper, Vector128`1<float> value);
    public static Vector128`1<double> RoundToPositiveInfinity(Vector128`1<double> value);
    public static Vector128`1<float> RoundToPositiveInfinity(Vector128`1<float> value);
    public static Vector128`1<double> RoundToPositiveInfinityScalar(Vector128`1<double> value);
    public static Vector128`1<double> RoundToPositiveInfinityScalar(Vector128`1<double> upper, Vector128`1<double> value);
    public static Vector128`1<float> RoundToPositiveInfinityScalar(Vector128`1<float> value);
    public static Vector128`1<float> RoundToPositiveInfinityScalar(Vector128`1<float> upper, Vector128`1<float> value);
    public static Vector128`1<double> RoundToZero(Vector128`1<double> value);
    public static Vector128`1<float> RoundToZero(Vector128`1<float> value);
    public static Vector128`1<double> RoundToZeroScalar(Vector128`1<double> value);
    public static Vector128`1<double> RoundToZeroScalar(Vector128`1<double> upper, Vector128`1<double> value);
    public static Vector128`1<float> RoundToZeroScalar(Vector128`1<float> value);
    public static Vector128`1<float> RoundToZeroScalar(Vector128`1<float> upper, Vector128`1<float> value);
    public static bool TestC(Vector128`1<byte> left, Vector128`1<byte> right);
    public static bool TestC(Vector128`1<short> left, Vector128`1<short> right);
    public static bool TestC(Vector128`1<int> left, Vector128`1<int> right);
    public static bool TestC(Vector128`1<long> left, Vector128`1<long> right);
    public static bool TestC(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static bool TestC(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static bool TestC(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static bool TestC(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static bool TestNotZAndNotC(Vector128`1<byte> left, Vector128`1<byte> right);
    public static bool TestNotZAndNotC(Vector128`1<short> left, Vector128`1<short> right);
    public static bool TestNotZAndNotC(Vector128`1<int> left, Vector128`1<int> right);
    public static bool TestNotZAndNotC(Vector128`1<long> left, Vector128`1<long> right);
    public static bool TestNotZAndNotC(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static bool TestNotZAndNotC(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static bool TestNotZAndNotC(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static bool TestNotZAndNotC(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static bool TestZ(Vector128`1<byte> left, Vector128`1<byte> right);
    public static bool TestZ(Vector128`1<short> left, Vector128`1<short> right);
    public static bool TestZ(Vector128`1<int> left, Vector128`1<int> right);
    public static bool TestZ(Vector128`1<long> left, Vector128`1<long> right);
    public static bool TestZ(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static bool TestZ(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static bool TestZ(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static bool TestZ(Vector128`1<ulong> left, Vector128`1<ulong> right);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Sse42 : Sse41 {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<long> CompareGreaterThan(Vector128`1<long> left, Vector128`1<long> right);
    public static UInt32 Crc32(UInt32 crc, byte data);
    public static UInt32 Crc32(UInt32 crc, ushort data);
    public static UInt32 Crc32(UInt32 crc, UInt32 data);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.Ssse3 : Sse3 {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static Vector128`1<ushort> Abs(Vector128`1<short> value);
    public static Vector128`1<UInt32> Abs(Vector128`1<int> value);
    public static Vector128`1<byte> Abs(Vector128`1<sbyte> value);
    public static Vector128`1<byte> AlignRight(Vector128`1<byte> left, Vector128`1<byte> right, byte mask);
    public static Vector128`1<short> AlignRight(Vector128`1<short> left, Vector128`1<short> right, byte mask);
    public static Vector128`1<int> AlignRight(Vector128`1<int> left, Vector128`1<int> right, byte mask);
    public static Vector128`1<long> AlignRight(Vector128`1<long> left, Vector128`1<long> right, byte mask);
    public static Vector128`1<sbyte> AlignRight(Vector128`1<sbyte> left, Vector128`1<sbyte> right, byte mask);
    public static Vector128`1<ushort> AlignRight(Vector128`1<ushort> left, Vector128`1<ushort> right, byte mask);
    public static Vector128`1<UInt32> AlignRight(Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte mask);
    public static Vector128`1<ulong> AlignRight(Vector128`1<ulong> left, Vector128`1<ulong> right, byte mask);
    public static Vector128`1<short> HorizontalAdd(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> HorizontalAdd(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<short> HorizontalAddSaturate(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<short> HorizontalSubtract(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> HorizontalSubtract(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<short> HorizontalSubtractSaturate(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<short> MultiplyAddAdjacent(Vector128`1<byte> left, Vector128`1<sbyte> right);
    public static Vector128`1<short> MultiplyHighRoundScale(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<byte> Shuffle(Vector128`1<byte> value, Vector128`1<byte> mask);
    public static Vector128`1<sbyte> Shuffle(Vector128`1<sbyte> value, Vector128`1<sbyte> mask);
    public static Vector128`1<short> Sign(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Sign(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> Sign(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.X86Base : object {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static ValueTuple`4<int, int, int, int> CpuId(int functionId, int subFunctionId);
    [RequiresPreviewFeaturesAttribute("DivRem is in preview.")]
public static ValueTuple`2<UInt32, UInt32> DivRem(UInt32 lower, UInt32 upper, UInt32 divisor);
    [RequiresPreviewFeaturesAttribute("DivRem is in preview.")]
public static ValueTuple`2<int, int> DivRem(UInt32 lower, int upper, int divisor);
    [RequiresPreviewFeaturesAttribute("DivRem is in preview.")]
public static ValueTuple`2<UIntPtr, UIntPtr> DivRem(UIntPtr lower, UIntPtr upper, UIntPtr divisor);
    [RequiresPreviewFeaturesAttribute("DivRem is in preview.")]
public static ValueTuple`2<IntPtr, IntPtr> DivRem(UIntPtr lower, IntPtr upper, IntPtr divisor);
    public static void Pause();
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Intrinsics.X86.X86Serialize : X86Base {
    public static bool IsSupported { get; }
    public static bool get_IsSupported();
    public static void Serialize();
}
