public class System.Text.ASCIIEncoding : Encoding {
    public bool IsSingleByte { get; }
    public virtual bool get_IsSingleByte();
    [CLSCompliantAttribute("False")]
public virtual int GetByteCount(Char* chars, int count);
    [NullableContextAttribute("1")]
public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(ReadOnlySpan`1<char> chars);
    [NullableContextAttribute("1")]
public virtual int GetByteCount(string chars);
    [CLSCompliantAttribute("False")]
public virtual int GetBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
    [NullableContextAttribute("1")]
public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetBytes(ReadOnlySpan`1<char> chars, Span`1<byte> bytes);
    [NullableContextAttribute("1")]
public virtual int GetBytes(string chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    [CLSCompliantAttribute("False")]
public virtual int GetCharCount(Byte* bytes, int count);
    [NullableContextAttribute("1")]
public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetCharCount(ReadOnlySpan`1<byte> bytes);
    [CLSCompliantAttribute("False")]
public virtual int GetChars(Byte* bytes, int byteCount, Char* chars, int charCount);
    [NullableContextAttribute("1")]
public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetChars(ReadOnlySpan`1<byte> bytes, Span`1<char> chars);
    [NullableContextAttribute("1")]
public virtual Decoder GetDecoder();
    [NullableContextAttribute("1")]
public virtual Encoder GetEncoder();
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    [NullableContextAttribute("1")]
public virtual string GetString(Byte[] bytes, int byteIndex, int byteCount);
    public virtual bool TryGetBytes(ReadOnlySpan`1<char> chars, Span`1<byte> bytes, Int32& bytesWritten);
    public virtual bool TryGetChars(ReadOnlySpan`1<byte> bytes, Span`1<char> chars, Int32& charsWritten);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Text.UnicodeEncoding : Encoding {
    public static int CharSize;
    [NullableAttribute("0")]
public ReadOnlySpan`1<byte> Preamble { get; }
    public UnicodeEncoding(bool bigEndian, bool byteOrderMark);
    public UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);
    [NullableContextAttribute("0")]
public virtual ReadOnlySpan`1<byte> get_Preamble();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public virtual int GetByteCount(Char* chars, int count);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(string s);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public virtual int GetBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetBytes(string s, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public virtual int GetCharCount(Byte* bytes, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public virtual int GetChars(Byte* bytes, int byteCount, Char* chars, int charCount);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual Decoder GetDecoder();
    public virtual Encoder GetEncoder();
    public virtual int GetHashCode();
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual Byte[] GetPreamble();
    public virtual string GetString(Byte[] bytes, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Text.UTF32Encoding : Encoding {
    [NullableAttribute("0")]
public ReadOnlySpan`1<byte> Preamble { get; }
    public UTF32Encoding(bool bigEndian, bool byteOrderMark);
    public UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);
    [NullableContextAttribute("0")]
public virtual ReadOnlySpan`1<byte> get_Preamble();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public virtual int GetByteCount(Char* chars, int count);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(string s);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public virtual int GetBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetBytes(string s, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public virtual int GetCharCount(Byte* bytes, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public virtual int GetChars(Byte* bytes, int byteCount, Char* chars, int charCount);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual Decoder GetDecoder();
    public virtual Encoder GetEncoder();
    public virtual int GetHashCode();
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual Byte[] GetPreamble();
    public virtual string GetString(Byte[] bytes, int index, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Text.UTF7Encoding : Encoding {
    [ObsoleteAttribute("The UTF-7 encoding is insecure and should not be used. Consider using UTF-8 instead.")]
public UTF7Encoding(bool allowOptionals);
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public virtual int GetByteCount(Char* chars, int count);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(string s);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public virtual int GetBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetBytes(string s, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public virtual int GetCharCount(Byte* bytes, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    [NullableContextAttribute("0")]
[CLSCompliantAttribute("False")]
public virtual int GetChars(Byte* bytes, int byteCount, Char* chars, int charCount);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual Decoder GetDecoder();
    public virtual Encoder GetEncoder();
    public virtual int GetHashCode();
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual string GetString(Byte[] bytes, int index, int count);
}
public class System.Text.UTF8Encoding : Encoding {
    public ReadOnlySpan`1<byte> Preamble { get; }
    public UTF8Encoding(bool encoderShouldEmitUTF8Identifier);
    public UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);
    public virtual ReadOnlySpan`1<byte> get_Preamble();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    [CLSCompliantAttribute("False")]
public virtual int GetByteCount(Char* chars, int count);
    [NullableContextAttribute("1")]
public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(ReadOnlySpan`1<char> chars);
    [NullableContextAttribute("1")]
public virtual int GetByteCount(string chars);
    [CLSCompliantAttribute("False")]
public virtual int GetBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
    [NullableContextAttribute("1")]
public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetBytes(ReadOnlySpan`1<char> chars, Span`1<byte> bytes);
    [NullableContextAttribute("1")]
public virtual int GetBytes(string s, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    [CLSCompliantAttribute("False")]
public virtual int GetCharCount(Byte* bytes, int count);
    [NullableContextAttribute("1")]
public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetCharCount(ReadOnlySpan`1<byte> bytes);
    [CLSCompliantAttribute("False")]
public virtual int GetChars(Byte* bytes, int byteCount, Char* chars, int charCount);
    [NullableContextAttribute("1")]
public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetChars(ReadOnlySpan`1<byte> bytes, Span`1<char> chars);
    [NullableContextAttribute("1")]
public virtual Decoder GetDecoder();
    [NullableContextAttribute("1")]
public virtual Encoder GetEncoder();
    public virtual int GetHashCode();
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    [NullableContextAttribute("1")]
public virtual Byte[] GetPreamble();
    [NullableContextAttribute("1")]
public virtual string GetString(Byte[] bytes, int index, int count);
    public virtual bool TryGetBytes(ReadOnlySpan`1<char> chars, Span`1<byte> bytes, Int32& bytesWritten);
    public virtual bool TryGetChars(ReadOnlySpan`1<byte> bytes, Span`1<char> chars, Int32& charsWritten);
}
