internal static class FxResources.System.Data.SqlClient.SR : object {
}
internal static class Interop : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.SqlServer.Server.BinaryOrderedUdtNormalizer : Normalizer {
    internal FieldInfoEx[] FieldsToNormalize;
    private int _size;
    private Byte[] _padBuffer;
    internal object NullInstance;
    private bool _isTopLevelUdt;
    internal bool IsNullable { get; }
    internal int Size { get; }
    internal BinaryOrderedUdtNormalizer(Type t, bool isTopLevelUdt);
    private FieldInfo[] GetFields(Type t);
    internal bool get_IsNullable();
    internal void NormalizeTopObject(object udt, Stream s);
    internal object DeNormalizeTopObject(Type t, Stream s);
    private object DeNormalizeInternal(Type t, Stream s);
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.BinarySerializeSerializer : Serializer {
    internal BinarySerializeSerializer(Type t);
    public virtual void Serialize(Stream s, object o);
    public virtual object Deserialize(Stream s);
}
internal class Microsoft.SqlServer.Server.BooleanNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.ByteNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
public enum Microsoft.SqlServer.Server.DataAccessKind : Enum {
    public int value__;
    public static DataAccessKind None;
    public static DataAccessKind Read;
}
internal class Microsoft.SqlServer.Server.DoubleNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.DummyStream : Stream {
    private long _size;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Position { get; public set; }
    public long Length { get; }
    private void DontDoIt();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    public virtual void SetLength(long value);
    public virtual long Seek(long value, SeekOrigin loc);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal enum Microsoft.SqlServer.Server.ExtendedClrTypeCode : Enum {
    public int value__;
    public static ExtendedClrTypeCode Invalid;
    public static ExtendedClrTypeCode Boolean;
    public static ExtendedClrTypeCode Byte;
    public static ExtendedClrTypeCode Char;
    public static ExtendedClrTypeCode DateTime;
    public static ExtendedClrTypeCode DBNull;
    public static ExtendedClrTypeCode Decimal;
    public static ExtendedClrTypeCode Double;
    public static ExtendedClrTypeCode Empty;
    public static ExtendedClrTypeCode Int16;
    public static ExtendedClrTypeCode Int32;
    public static ExtendedClrTypeCode Int64;
    public static ExtendedClrTypeCode SByte;
    public static ExtendedClrTypeCode Single;
    public static ExtendedClrTypeCode String;
    public static ExtendedClrTypeCode UInt16;
    public static ExtendedClrTypeCode UInt32;
    public static ExtendedClrTypeCode UInt64;
    public static ExtendedClrTypeCode Object;
    public static ExtendedClrTypeCode ByteArray;
    public static ExtendedClrTypeCode CharArray;
    public static ExtendedClrTypeCode Guid;
    public static ExtendedClrTypeCode SqlBinary;
    public static ExtendedClrTypeCode SqlBoolean;
    public static ExtendedClrTypeCode SqlByte;
    public static ExtendedClrTypeCode SqlDateTime;
    public static ExtendedClrTypeCode SqlDouble;
    public static ExtendedClrTypeCode SqlGuid;
    public static ExtendedClrTypeCode SqlInt16;
    public static ExtendedClrTypeCode SqlInt32;
    public static ExtendedClrTypeCode SqlInt64;
    public static ExtendedClrTypeCode SqlMoney;
    public static ExtendedClrTypeCode SqlDecimal;
    public static ExtendedClrTypeCode SqlSingle;
    public static ExtendedClrTypeCode SqlString;
    public static ExtendedClrTypeCode SqlChars;
    public static ExtendedClrTypeCode SqlBytes;
    public static ExtendedClrTypeCode SqlXml;
    public static ExtendedClrTypeCode DataTable;
    public static ExtendedClrTypeCode DbDataReader;
    public static ExtendedClrTypeCode IEnumerableOfSqlDataRecord;
    public static ExtendedClrTypeCode TimeSpan;
    public static ExtendedClrTypeCode DateTimeOffset;
    public static ExtendedClrTypeCode Stream;
    public static ExtendedClrTypeCode TextReader;
    public static ExtendedClrTypeCode XmlReader;
    public static ExtendedClrTypeCode Last;
    public static ExtendedClrTypeCode First;
}
internal class Microsoft.SqlServer.Server.FieldInfoEx : object {
    internal int Offset;
    internal FieldInfo FieldInfo;
    internal Normalizer Normalizer;
    internal FieldInfoEx(FieldInfo fi, int offset, Normalizer normalizer);
    public sealed virtual int CompareTo(object other);
}
internal class Microsoft.SqlServer.Server.FloatNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
public enum Microsoft.SqlServer.Server.Format : Enum {
    public int value__;
    public static Format Unknown;
    public static Format Native;
    public static Format UserDefined;
}
public interface Microsoft.SqlServer.Server.IBinarySerialize {
    public abstract virtual void Read(BinaryReader r);
    public abstract virtual void Write(BinaryWriter w);
}
internal class Microsoft.SqlServer.Server.IntNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
public class Microsoft.SqlServer.Server.InvalidUdtException : SystemException {
    private static int InvalidUdtHResult;
    internal InvalidUdtException(string message);
    internal InvalidUdtException(string message, Exception innerException);
    private InvalidUdtException(SerializationInfo si, StreamingContext sc);
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    internal static InvalidUdtException Create(Type udtType, string resourceReason);
}
internal interface Microsoft.SqlServer.Server.ITypedGetters {
    public abstract virtual bool IsDBNull(int ordinal);
    public abstract virtual SqlDbType GetVariantType(int ordinal);
    public abstract virtual bool GetBoolean(int ordinal);
    public abstract virtual byte GetByte(int ordinal);
    public abstract virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual char GetChar(int ordinal);
    public abstract virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual short GetInt16(int ordinal);
    public abstract virtual int GetInt32(int ordinal);
    public abstract virtual long GetInt64(int ordinal);
    public abstract virtual float GetFloat(int ordinal);
    public abstract virtual double GetDouble(int ordinal);
    public abstract virtual string GetString(int ordinal);
    public abstract virtual decimal GetDecimal(int ordinal);
    public abstract virtual DateTime GetDateTime(int ordinal);
    public abstract virtual Guid GetGuid(int ordinal);
    public abstract virtual SqlBoolean GetSqlBoolean(int ordinal);
    public abstract virtual SqlByte GetSqlByte(int ordinal);
    public abstract virtual SqlInt16 GetSqlInt16(int ordinal);
    public abstract virtual SqlInt32 GetSqlInt32(int ordinal);
    public abstract virtual SqlInt64 GetSqlInt64(int ordinal);
    public abstract virtual SqlSingle GetSqlSingle(int ordinal);
    public abstract virtual SqlDouble GetSqlDouble(int ordinal);
    public abstract virtual SqlMoney GetSqlMoney(int ordinal);
    public abstract virtual SqlDateTime GetSqlDateTime(int ordinal);
    public abstract virtual SqlDecimal GetSqlDecimal(int ordinal);
    public abstract virtual SqlString GetSqlString(int ordinal);
    public abstract virtual SqlBinary GetSqlBinary(int ordinal);
    public abstract virtual SqlGuid GetSqlGuid(int ordinal);
    public abstract virtual SqlChars GetSqlChars(int ordinal);
    public abstract virtual SqlBytes GetSqlBytes(int ordinal);
    public abstract virtual SqlXml GetSqlXml(int ordinal);
    public abstract virtual SqlBytes GetSqlBytesRef(int ordinal);
    public abstract virtual SqlChars GetSqlCharsRef(int ordinal);
    public abstract virtual SqlXml GetSqlXmlRef(int ordinal);
}
internal interface Microsoft.SqlServer.Server.ITypedGettersV3 {
    public abstract virtual bool IsDBNull(SmiEventSink sink, int ordinal);
    public abstract virtual SmiMetaData GetVariantType(SmiEventSink sink, int ordinal);
    public abstract virtual bool GetBoolean(SmiEventSink sink, int ordinal);
    public abstract virtual byte GetByte(SmiEventSink sink, int ordinal);
    public abstract virtual long GetBytesLength(SmiEventSink sink, int ordinal);
    public abstract virtual int GetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual long GetCharsLength(SmiEventSink sink, int ordinal);
    public abstract virtual int GetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual string GetString(SmiEventSink sink, int ordinal);
    public abstract virtual short GetInt16(SmiEventSink sink, int ordinal);
    public abstract virtual int GetInt32(SmiEventSink sink, int ordinal);
    public abstract virtual long GetInt64(SmiEventSink sink, int ordinal);
    public abstract virtual float GetSingle(SmiEventSink sink, int ordinal);
    public abstract virtual double GetDouble(SmiEventSink sink, int ordinal);
    public abstract virtual SqlDecimal GetSqlDecimal(SmiEventSink sink, int ordinal);
    public abstract virtual DateTime GetDateTime(SmiEventSink sink, int ordinal);
    public abstract virtual Guid GetGuid(SmiEventSink sink, int ordinal);
}
internal interface Microsoft.SqlServer.Server.ITypedSetters {
    public abstract virtual void SetDBNull(int ordinal);
    public abstract virtual void SetBoolean(int ordinal, bool value);
    public abstract virtual void SetByte(int ordinal, byte value);
    public abstract virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual void SetChar(int ordinal, char value);
    public abstract virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual void SetInt16(int ordinal, short value);
    public abstract virtual void SetInt32(int ordinal, int value);
    public abstract virtual void SetInt64(int ordinal, long value);
    public abstract virtual void SetFloat(int ordinal, float value);
    public abstract virtual void SetDouble(int ordinal, double value);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetString(int ordinal, string value);
    public abstract virtual void SetString(int ordinal, string value, int offset);
    public abstract virtual void SetDecimal(int ordinal, decimal value);
    public abstract virtual void SetDateTime(int ordinal, DateTime value);
    public abstract virtual void SetGuid(int ordinal, Guid value);
    public abstract virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public abstract virtual void SetSqlByte(int ordinal, SqlByte value);
    public abstract virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public abstract virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public abstract virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public abstract virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public abstract virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public abstract virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public abstract virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public abstract virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlString(int ordinal, SqlString value);
    public abstract virtual void SetSqlString(int ordinal, SqlString value, int offset);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public abstract virtual void SetSqlBinary(int ordinal, SqlBinary value, int offset);
    public abstract virtual void SetSqlGuid(int ordinal, SqlGuid value);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlChars(int ordinal, SqlChars value);
    public abstract virtual void SetSqlChars(int ordinal, SqlChars value, int offset);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlBytes(int ordinal, SqlBytes value);
    public abstract virtual void SetSqlBytes(int ordinal, SqlBytes value, int offset);
    public abstract virtual void SetSqlXml(int ordinal, SqlXml value);
}
internal interface Microsoft.SqlServer.Server.ITypedSettersV3 {
    public abstract virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
    public abstract virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public abstract virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public abstract virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public abstract virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public abstract virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public abstract virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public abstract virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public abstract virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public abstract virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public abstract virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public abstract virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public abstract virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public abstract virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public abstract virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
}
internal class Microsoft.SqlServer.Server.LongNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.MemoryRecordBuffer : SmiRecordBuffer {
    private SqlRecordBuffer[] _buffer;
    internal MemoryRecordBuffer(SmiMetaData[] metaData);
    public virtual bool IsDBNull(SmiEventSink sink, int ordinal);
    public virtual SmiMetaData GetVariantType(SmiEventSink sink, int ordinal);
    public virtual bool GetBoolean(SmiEventSink sink, int ordinal);
    public virtual byte GetByte(SmiEventSink sink, int ordinal);
    public virtual long GetBytesLength(SmiEventSink sink, int ordinal);
    public virtual int GetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual long GetCharsLength(SmiEventSink sink, int ordinal);
    public virtual int GetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetString(SmiEventSink sink, int ordinal);
    public virtual short GetInt16(SmiEventSink sink, int ordinal);
    public virtual int GetInt32(SmiEventSink sink, int ordinal);
    public virtual long GetInt64(SmiEventSink sink, int ordinal);
    public virtual float GetSingle(SmiEventSink sink, int ordinal);
    public virtual double GetDouble(SmiEventSink sink, int ordinal);
    public virtual SqlDecimal GetSqlDecimal(SmiEventSink sink, int ordinal);
    public virtual DateTime GetDateTime(SmiEventSink sink, int ordinal);
    public virtual Guid GetGuid(SmiEventSink sink, int ordinal);
    public virtual TimeSpan GetTimeSpan(SmiEventSink sink, int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(SmiEventSink sink, int ordinal);
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
    public virtual void SetTimeSpan(SmiEventSink sink, int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(SmiEventSink sink, int ordinal, DateTimeOffset value);
    public virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
}
internal class Microsoft.SqlServer.Server.MetaDataUtilsSmi : object {
    internal static SqlDbType InvalidSqlDbType;
    internal static long InvalidMaxLength;
    private static SqlDbType[] s_extendedTypeCodeToSqlDbTypeMap;
    private static Dictionary`2<Type, ExtendedClrTypeCode> s_typeToExtendedTypeCodeMap;
    private static MetaDataUtilsSmi();
    private static Dictionary`2<Type, ExtendedClrTypeCode> CreateTypeToExtendedTypeCodeMap();
    internal static bool IsCharOrXmlType(SqlDbType type);
    internal static bool IsUnicodeType(SqlDbType type);
    internal static bool IsAnsiType(SqlDbType type);
    internal static bool IsBinaryType(SqlDbType type);
    internal static bool IsPlpFormat(SmiMetaData metaData);
    internal static ExtendedClrTypeCode DetermineExtendedTypeCodeForUseWithSqlDbType(SqlDbType dbType, bool isMultiValued, object value, Type udtType);
    internal static ExtendedClrTypeCode DetermineExtendedTypeCodeFromType(Type clrType);
    internal static ExtendedClrTypeCode DetermineExtendedTypeCode(object value);
    internal static SqlDbType InferSqlDbTypeFromTypeCode(ExtendedClrTypeCode typeCode);
    internal static SqlDbType InferSqlDbTypeFromType(Type type);
    internal static SqlDbType InferSqlDbTypeFromType_Katmai(Type type);
    internal static SqlMetaData SmiExtendedMetaDataToSqlMetaData(SmiExtendedMetaData source);
    internal static SmiExtendedMetaData SqlMetaDataToSmiExtendedMetaData(SqlMetaData source);
    internal static bool IsCompatible(SmiMetaData firstMd, SqlMetaData secondMd);
    internal static SmiExtendedMetaData SmiMetaDataFromDataColumn(DataColumn column, DataTable parent);
    internal static long AdjustMaxLength(SqlDbType dbType, long maxLength);
    internal static SmiExtendedMetaData SmiMetaDataFromSchemaTableRow(DataRow schemaRow);
}
internal class Microsoft.SqlServer.Server.NormalizedSerializer : Serializer {
    private BinaryOrderedUdtNormalizer _normalizer;
    private bool _isFixedSize;
    private int _maxSize;
    internal NormalizedSerializer(Type t);
    public virtual void Serialize(Stream s, object o);
    public virtual object Deserialize(Stream s);
}
internal abstract class Microsoft.SqlServer.Server.Normalizer : object {
    protected bool _skipNormalize;
    internal int Size { get; }
    internal static Normalizer GetNormalizer(Type t);
    internal abstract virtual void Normalize(FieldInfo fi, object recvr, Stream s);
    internal abstract virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    protected void FlipAllBits(Byte[] b);
    protected object GetValue(FieldInfo fi, object obj);
    protected void SetValue(FieldInfo fi, object recvr, object value);
    internal abstract virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.SByteNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.SerializationHelperSql9 : object {
    [ThreadStaticAttribute]
private static Hashtable s_types2Serializers;
    internal static int SizeInBytes(Type t);
    internal static int SizeInBytes(object instance);
    internal static void Serialize(Stream s, object instance);
    internal static object Deserialize(Stream s, Type resultType);
    private static Format GetFormat(Type t);
    private static Serializer GetSerializer(Type t);
    internal static int GetUdtMaxLength(Type t);
    private static Object[] GetCustomAttributes(Type t);
    internal static SqlUserDefinedTypeAttribute GetUdtAttribute(Type t);
    private static Serializer GetNewSerializer(Type t);
}
internal abstract class Microsoft.SqlServer.Server.Serializer : object {
    protected Type _type;
    protected Serializer(Type t);
    public abstract virtual object Deserialize(Stream s);
    public abstract virtual void Serialize(Stream s, object o);
}
internal class Microsoft.SqlServer.Server.ShortNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Server.SmiDefaultFieldsProperty : SmiMetaDataProperty {
    private IList`1<bool> _defaults;
    internal bool Item { get; }
    internal SmiDefaultFieldsProperty(IList`1<bool> defaultFields);
    internal bool get_Item(int ordinal);
    [ConditionalAttribute("DEBUG")]
internal void CheckCount(int countToMatch);
}
internal abstract class Microsoft.SqlServer.Server.SmiEventSink : object {
}
internal class Microsoft.SqlServer.Server.SmiEventSink_Default : SmiEventSink {
    private SqlErrorCollection _errors;
    private SqlErrorCollection _warnings;
    internal bool HasMessages { get; }
    internal string ServerVersion { get; }
    internal bool get_HasMessages();
    internal virtual string get_ServerVersion();
    protected virtual void DispatchMessages();
    protected SqlException ProcessMessages(bool ignoreWarnings);
    internal void ProcessMessagesAndThrow();
}
internal class Microsoft.SqlServer.Server.SmiExtendedMetaData : SmiMetaData {
    private string _name;
    private string _typeSpecificNamePart1;
    private string _typeSpecificNamePart2;
    private string _typeSpecificNamePart3;
    internal string Name { get; }
    internal string TypeSpecificNamePart1 { get; }
    internal string TypeSpecificNamePart2 { get; }
    internal string TypeSpecificNamePart3 { get; }
    internal SmiExtendedMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3);
    internal SmiExtendedMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3);
    internal SmiExtendedMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3);
    internal string get_Name();
    internal string get_TypeSpecificNamePart1();
    internal string get_TypeSpecificNamePart2();
    internal string get_TypeSpecificNamePart3();
}
internal class Microsoft.SqlServer.Server.SmiGettersStream : Stream {
    private SmiEventSink_Default _sink;
    private ITypedGettersV3 _getters;
    private int _ordinal;
    private long _readPosition;
    private SmiMetaData _metaData;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SmiGettersStream(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class Microsoft.SqlServer.Server.SmiMetaData : object {
    private SqlDbType _databaseType;
    private long _maxLength;
    private byte _precision;
    private byte _scale;
    private long _localeId;
    private SqlCompareOptions _compareOptions;
    private Type _clrType;
    private string _udtAssemblyQualifiedName;
    private bool _isMultiValued;
    private IList`1<SmiExtendedMetaData> _fieldMetaData;
    private SmiMetaDataPropertyCollection _extendedProperties;
    internal static long UnlimitedMaxLengthIndicator;
    internal static long MaxUnicodeCharacters;
    internal static long MaxANSICharacters;
    internal static long MaxBinaryLength;
    internal static int MinPrecision;
    internal static int MinScale;
    internal static int MaxTimeScale;
    internal static DateTime MaxSmallDateTime;
    internal static DateTime MinSmallDateTime;
    internal static SqlMoney MaxSmallMoney;
    internal static SqlMoney MinSmallMoney;
    internal static SqlCompareOptions DefaultStringCompareOptions;
    internal static long MaxNameLength;
    private static IList`1<SmiExtendedMetaData> s_emptyFieldList;
    private static Byte[] s_maxLenFromPrecision;
    private static Byte[] s_maxVarTimeLenOffsetFromScale;
    internal static SmiMetaData DefaultBigInt;
    internal static SmiMetaData DefaultBinary;
    internal static SmiMetaData DefaultBit;
    internal static SmiMetaData DefaultChar_NoCollation;
    internal static SmiMetaData DefaultDateTime;
    internal static SmiMetaData DefaultDecimal;
    internal static SmiMetaData DefaultFloat;
    internal static SmiMetaData DefaultImage;
    internal static SmiMetaData DefaultInt;
    internal static SmiMetaData DefaultMoney;
    internal static SmiMetaData DefaultNChar_NoCollation;
    internal static SmiMetaData DefaultNText_NoCollation;
    internal static SmiMetaData DefaultNVarChar_NoCollation;
    internal static SmiMetaData DefaultReal;
    internal static SmiMetaData DefaultUniqueIdentifier;
    internal static SmiMetaData DefaultSmallDateTime;
    internal static SmiMetaData DefaultSmallInt;
    internal static SmiMetaData DefaultSmallMoney;
    internal static SmiMetaData DefaultText_NoCollation;
    internal static SmiMetaData DefaultTimestamp;
    internal static SmiMetaData DefaultTinyInt;
    internal static SmiMetaData DefaultVarBinary;
    internal static SmiMetaData DefaultVarChar_NoCollation;
    internal static SmiMetaData DefaultVariant;
    internal static SmiMetaData DefaultXml;
    internal static SmiMetaData DefaultUdt_NoType;
    internal static SmiMetaData DefaultStructured;
    internal static SmiMetaData DefaultDate;
    internal static SmiMetaData DefaultTime;
    internal static SmiMetaData DefaultDateTime2;
    internal static SmiMetaData DefaultDateTimeOffset;
    private static SmiMetaData[] s_defaultValues;
    private static String[] s_typeNameByDatabaseType;
    internal static SmiMetaData DefaultChar { get; }
    internal static SmiMetaData DefaultNChar { get; }
    internal static SmiMetaData DefaultNText { get; }
    internal static SmiMetaData DefaultNVarChar { get; }
    internal static SmiMetaData DefaultText { get; }
    internal static SmiMetaData DefaultVarChar { get; }
    internal SqlCompareOptions CompareOptions { get; }
    internal long LocaleId { get; }
    internal long MaxLength { get; }
    internal byte Precision { get; }
    internal byte Scale { get; }
    internal SqlDbType SqlDbType { get; }
    internal Type Type { get; }
    internal Type TypeWithoutThrowing { get; }
    internal string TypeName { get; }
    internal string AssemblyQualifiedName { get; }
    internal bool IsMultiValued { get; }
    internal IList`1<SmiExtendedMetaData> FieldMetaData { get; }
    internal SmiMetaDataPropertyCollection ExtendedProperties { get; }
    internal SmiMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType);
    internal SmiMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldTypes, SmiMetaDataPropertyCollection extendedProperties);
    internal SmiMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldTypes, SmiMetaDataPropertyCollection extendedProperties);
    private SmiMetaData(SqlDbType sqlDbType, long maxLength, byte precision, byte scale, SqlCompareOptions compareOptions);
    private static SmiMetaData();
    internal static SmiMetaData get_DefaultChar();
    internal static SmiMetaData get_DefaultNChar();
    internal static SmiMetaData get_DefaultNText();
    internal static SmiMetaData get_DefaultNVarChar();
    internal static SmiMetaData get_DefaultText();
    internal static SmiMetaData get_DefaultVarChar();
    internal bool IsValidMaxLengthForCtorGivenType(SqlDbType dbType, long maxLength);
    internal SqlCompareOptions get_CompareOptions();
    internal long get_LocaleId();
    internal long get_MaxLength();
    internal byte get_Precision();
    internal byte get_Scale();
    internal SqlDbType get_SqlDbType();
    internal Type get_Type();
    internal Type get_TypeWithoutThrowing();
    internal string get_TypeName();
    internal string get_AssemblyQualifiedName();
    internal bool get_IsMultiValued();
    internal IList`1<SmiExtendedMetaData> get_FieldMetaData();
    internal SmiMetaDataPropertyCollection get_ExtendedProperties();
    internal static bool IsSupportedDbType(SqlDbType dbType);
    internal static SmiMetaData GetDefaultForType(SqlDbType dbType);
    private void SetDefaultsForType(SqlDbType dbType);
}
internal abstract class Microsoft.SqlServer.Server.SmiMetaDataProperty : object {
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection : object {
    private static int SelectorCount;
    private SmiMetaDataProperty[] _properties;
    private bool _isReadOnly;
    private static SmiDefaultFieldsProperty s_emptyDefaultFields;
    private static SmiOrderProperty s_emptySortOrder;
    private static SmiUniqueKeyProperty s_emptyUniqueKey;
    internal static SmiMetaDataPropertyCollection EmptyInstance;
    internal SmiMetaDataProperty Item { get; internal set; }
    internal bool IsReadOnly { get; }
    private static SmiMetaDataPropertyCollection();
    private static SmiMetaDataPropertyCollection CreateEmptyInstance();
    internal SmiMetaDataProperty get_Item(SmiPropertySelector key);
    internal void set_Item(SmiPropertySelector key, SmiMetaDataProperty value);
    internal bool get_IsReadOnly();
    internal void SetReadOnly();
    private void EnsureWritable();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Server.SmiOrderProperty : SmiMetaDataProperty {
    private IList`1<SmiColumnOrder> _columns;
    internal SmiColumnOrder Item { get; }
    internal SmiOrderProperty(IList`1<SmiColumnOrder> columnOrders);
    internal SmiColumnOrder get_Item(int ordinal);
    [ConditionalAttribute("DEBUG")]
internal void CheckCount(int countToMatch);
}
internal class Microsoft.SqlServer.Server.SmiParameterMetaData : SmiExtendedMetaData {
    private ParameterDirection _direction;
    internal ParameterDirection Direction { get; }
    internal SmiParameterMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, ParameterDirection direction);
    internal SmiParameterMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, ParameterDirection direction);
    internal ParameterDirection get_Direction();
}
internal enum Microsoft.SqlServer.Server.SmiPropertySelector : Enum {
    public int value__;
    public static SmiPropertySelector DefaultFields;
    public static SmiPropertySelector SortOrder;
    public static SmiPropertySelector UniqueKey;
}
internal class Microsoft.SqlServer.Server.SmiQueryMetaData : SmiStorageMetaData {
    private bool _isReadOnly;
    private SqlBoolean _isExpression;
    private SqlBoolean _isAliased;
    private SqlBoolean _isHidden;
    internal bool IsReadOnly { get; }
    internal SqlBoolean IsExpression { get; }
    internal SqlBoolean IsAliased { get; }
    internal SqlBoolean IsHidden { get; }
    internal SmiQueryMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isReadOnly, SqlBoolean isExpression, SqlBoolean isAliased, SqlBoolean isHidden);
    internal SmiQueryMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isReadOnly, SqlBoolean isExpression, SqlBoolean isAliased, SqlBoolean isHidden);
    internal SmiQueryMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isColumnSet, bool isReadOnly, SqlBoolean isExpression, SqlBoolean isAliased, SqlBoolean isHidden);
    internal bool get_IsReadOnly();
    internal SqlBoolean get_IsExpression();
    internal SqlBoolean get_IsAliased();
    internal SqlBoolean get_IsHidden();
}
internal abstract class Microsoft.SqlServer.Server.SmiRecordBuffer : SmiTypedGetterSetter {
    internal bool CanGet { get; }
    internal bool CanSet { get; }
    internal virtual bool get_CanGet();
    internal virtual bool get_CanSet();
    public virtual void Dispose();
    public virtual bool IsDBNull(int ordinal);
    public virtual SqlDbType GetVariantType(int ordinal);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual SqlBoolean GetSqlBoolean(int ordinal);
    public virtual SqlByte GetSqlByte(int ordinal);
    public virtual SqlInt16 GetSqlInt16(int ordinal);
    public virtual SqlInt32 GetSqlInt32(int ordinal);
    public virtual SqlInt64 GetSqlInt64(int ordinal);
    public virtual SqlSingle GetSqlSingle(int ordinal);
    public virtual SqlDouble GetSqlDouble(int ordinal);
    public virtual SqlMoney GetSqlMoney(int ordinal);
    public virtual SqlDateTime GetSqlDateTime(int ordinal);
    public virtual SqlDecimal GetSqlDecimal(int ordinal);
    public virtual SqlString GetSqlString(int ordinal);
    public virtual SqlBinary GetSqlBinary(int ordinal);
    public virtual SqlGuid GetSqlGuid(int ordinal);
    public virtual SqlChars GetSqlChars(int ordinal);
    public virtual SqlBytes GetSqlBytes(int ordinal);
    public virtual SqlXml GetSqlXml(int ordinal);
    public virtual SqlXml GetSqlXmlRef(int ordinal);
    public virtual SqlBytes GetSqlBytesRef(int ordinal);
    public virtual SqlChars GetSqlCharsRef(int ordinal);
    public virtual void SetDBNull(int ordinal);
    public virtual void SetBoolean(int ordinal, bool value);
    public virtual void SetByte(int ordinal, byte value);
    public virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetChar(int ordinal, char value);
    public virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetInt16(int ordinal, short value);
    public virtual void SetInt32(int ordinal, int value);
    public virtual void SetInt64(int ordinal, long value);
    public virtual void SetFloat(int ordinal, float value);
    public virtual void SetDouble(int ordinal, double value);
    public virtual void SetString(int ordinal, string value);
    public virtual void SetString(int ordinal, string value, int offset);
    public virtual void SetDecimal(int ordinal, decimal value);
    public virtual void SetDateTime(int ordinal, DateTime value);
    public virtual void SetGuid(int ordinal, Guid value);
    public virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public virtual void SetSqlByte(int ordinal, SqlByte value);
    public virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    public virtual void SetSqlString(int ordinal, SqlString value);
    public virtual void SetSqlString(int ordinal, SqlString value, int offset);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value, int offset);
    public virtual void SetSqlGuid(int ordinal, SqlGuid value);
    public virtual void SetSqlChars(int ordinal, SqlChars value);
    public virtual void SetSqlChars(int ordinal, SqlChars value, int offset);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value, int offset);
    public virtual void SetSqlXml(int ordinal, SqlXml value);
}
internal class Microsoft.SqlServer.Server.SmiSettersStream : Stream {
    private SmiEventSink_Default _sink;
    private ITypedSettersV3 _setters;
    private int _ordinal;
    private long _lengthWritten;
    private SmiMetaData _metaData;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SmiSettersStream(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class Microsoft.SqlServer.Server.SmiStorageMetaData : SmiExtendedMetaData {
    private bool _allowsDBNull;
    private string _serverName;
    private string _catalogName;
    private string _schemaName;
    private string _tableName;
    private string _columnName;
    private SqlBoolean _isKey;
    private bool _isIdentity;
    private bool _isColumnSet;
    internal bool AllowsDBNull { get; }
    internal string ServerName { get; }
    internal string CatalogName { get; }
    internal string SchemaName { get; }
    internal string TableName { get; }
    internal string ColumnName { get; }
    internal SqlBoolean IsKey { get; }
    internal bool IsIdentity { get; }
    internal bool IsColumnSet { get; }
    internal SmiStorageMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity);
    internal SmiStorageMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity);
    internal SmiStorageMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, string udtAssemblyQualifiedName, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isColumnSet);
    internal bool get_AllowsDBNull();
    internal string get_ServerName();
    internal string get_CatalogName();
    internal string get_SchemaName();
    internal string get_TableName();
    internal string get_ColumnName();
    internal SqlBoolean get_IsKey();
    internal bool get_IsIdentity();
    internal bool get_IsColumnSet();
}
internal abstract class Microsoft.SqlServer.Server.SmiTypedGetterSetter : object {
    internal bool CanGet { get; }
    internal bool CanSet { get; }
    internal abstract virtual bool get_CanGet();
    internal abstract virtual bool get_CanSet();
    public virtual bool IsDBNull(SmiEventSink sink, int ordinal);
    public virtual SmiMetaData GetVariantType(SmiEventSink sink, int ordinal);
    public virtual bool GetBoolean(SmiEventSink sink, int ordinal);
    public virtual byte GetByte(SmiEventSink sink, int ordinal);
    public virtual long GetBytesLength(SmiEventSink sink, int ordinal);
    public virtual int GetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual long GetCharsLength(SmiEventSink sink, int ordinal);
    public virtual int GetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetString(SmiEventSink sink, int ordinal);
    public virtual short GetInt16(SmiEventSink sink, int ordinal);
    public virtual int GetInt32(SmiEventSink sink, int ordinal);
    public virtual long GetInt64(SmiEventSink sink, int ordinal);
    public virtual float GetSingle(SmiEventSink sink, int ordinal);
    public virtual double GetDouble(SmiEventSink sink, int ordinal);
    public virtual SqlDecimal GetSqlDecimal(SmiEventSink sink, int ordinal);
    public virtual DateTime GetDateTime(SmiEventSink sink, int ordinal);
    public virtual Guid GetGuid(SmiEventSink sink, int ordinal);
    public virtual TimeSpan GetTimeSpan(SmiEventSink sink, int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(SmiEventSink sink, int ordinal);
    internal virtual SmiTypedGetterSetter GetTypedGetterSetter(SmiEventSink sink, int ordinal);
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
    public virtual void SetTimeSpan(SmiEventSink sink, int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(SmiEventSink sink, int ordinal, DateTimeOffset value);
    public virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
    internal virtual void NewElement(SmiEventSink sink);
    internal virtual void EndElements(SmiEventSink sink);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Server.SmiUniqueKeyProperty : SmiMetaDataProperty {
    private IList`1<bool> _columns;
    internal bool Item { get; }
    internal SmiUniqueKeyProperty(IList`1<bool> columnIsKey);
    internal bool get_Item(int ordinal);
    [ConditionalAttribute("DEBUG")]
internal void CheckCount(int countToMatch);
}
internal class Microsoft.SqlServer.Server.SmiXetterAccessMap : object {
    private static bool X;
    private static bool _;
    private static Boolean[0...,0...] s_isSetterAccessValid;
    private static SmiXetterAccessMap();
    internal static bool IsSetterAccessValid(SmiMetaData metaData, SmiXetterTypeCode xetterType);
}
internal enum Microsoft.SqlServer.Server.SmiXetterTypeCode : Enum {
    public int value__;
    public static SmiXetterTypeCode XetBoolean;
    public static SmiXetterTypeCode XetByte;
    public static SmiXetterTypeCode XetBytes;
    public static SmiXetterTypeCode XetChars;
    public static SmiXetterTypeCode XetString;
    public static SmiXetterTypeCode XetInt16;
    public static SmiXetterTypeCode XetInt32;
    public static SmiXetterTypeCode XetInt64;
    public static SmiXetterTypeCode XetSingle;
    public static SmiXetterTypeCode XetDouble;
    public static SmiXetterTypeCode XetSqlDecimal;
    public static SmiXetterTypeCode XetDateTime;
    public static SmiXetterTypeCode XetGuid;
    public static SmiXetterTypeCode GetVariantMetaData;
    public static SmiXetterTypeCode GetXet;
    public static SmiXetterTypeCode XetTime;
    public static SmiXetterTypeCode XetTimeSpan;
    public static SmiXetterTypeCode XetDateTimeOffset;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Server.SqlDataRecord : object {
    private SmiRecordBuffer _recordBuffer;
    private SmiExtendedMetaData[] _columnSmiMetaData;
    private SmiEventSink_Default _eventSink;
    private SqlMetaData[] _columnMetaData;
    private FieldNameLookup _fieldNameLookup;
    private bool _usesStringStorageForXml;
    private static SmiMetaData s_maxNVarCharForXml;
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal SmiRecordBuffer RecordBuffer { get; }
    public SqlDataRecord(SqlMetaData[] metaData);
    internal SqlDataRecord(SmiRecordBuffer recordBuffer, SmiExtendedMetaData[] metaData);
    private static SqlDataRecord();
    public virtual int get_FieldCount();
    public virtual string GetName(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual int GetOrdinal(string name);
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(int ordinal);
    public virtual TimeSpan GetTimeSpan(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual SqlMetaData GetSqlMetaData(int ordinal);
    public virtual Type GetSqlFieldType(int ordinal);
    public virtual object GetSqlValue(int ordinal);
    public virtual int GetSqlValues(Object[] values);
    public virtual SqlBinary GetSqlBinary(int ordinal);
    public virtual SqlBytes GetSqlBytes(int ordinal);
    public virtual SqlXml GetSqlXml(int ordinal);
    public virtual SqlBoolean GetSqlBoolean(int ordinal);
    public virtual SqlByte GetSqlByte(int ordinal);
    public virtual SqlChars GetSqlChars(int ordinal);
    public virtual SqlInt16 GetSqlInt16(int ordinal);
    public virtual SqlInt32 GetSqlInt32(int ordinal);
    public virtual SqlInt64 GetSqlInt64(int ordinal);
    public virtual SqlSingle GetSqlSingle(int ordinal);
    public virtual SqlDouble GetSqlDouble(int ordinal);
    public virtual SqlMoney GetSqlMoney(int ordinal);
    public virtual SqlDateTime GetSqlDateTime(int ordinal);
    public virtual SqlDecimal GetSqlDecimal(int ordinal);
    public virtual SqlString GetSqlString(int ordinal);
    public virtual SqlGuid GetSqlGuid(int ordinal);
    public virtual int SetValues(Object[] values);
    public virtual void SetValue(int ordinal, object value);
    public virtual void SetBoolean(int ordinal, bool value);
    public virtual void SetByte(int ordinal, byte value);
    public virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetChar(int ordinal, char value);
    public virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetInt16(int ordinal, short value);
    public virtual void SetInt32(int ordinal, int value);
    public virtual void SetInt64(int ordinal, long value);
    public virtual void SetFloat(int ordinal, float value);
    public virtual void SetDouble(int ordinal, double value);
    public virtual void SetString(int ordinal, string value);
    public virtual void SetDecimal(int ordinal, decimal value);
    public virtual void SetDateTime(int ordinal, DateTime value);
    public virtual void SetTimeSpan(int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(int ordinal, DateTimeOffset value);
    public virtual void SetDBNull(int ordinal);
    public virtual void SetGuid(int ordinal, Guid value);
    public virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public virtual void SetSqlByte(int ordinal, SqlByte value);
    public virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public virtual void SetSqlXml(int ordinal, SqlXml value);
    public virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    public virtual void SetSqlString(int ordinal, SqlString value);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public virtual void SetSqlGuid(int ordinal, SqlGuid value);
    public virtual void SetSqlChars(int ordinal, SqlChars value);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value);
    internal SmiRecordBuffer get_RecordBuffer();
    internal SqlMetaData[] InternalGetMetaData();
    internal SmiExtendedMetaData[] InternalGetSmiMetaData();
    internal SmiExtendedMetaData GetSmiMetaData(int ordinal);
    internal void ThrowIfInvalidOrdinal(int ordinal);
    private void EnsureSubclassOverride();
    private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int ordinal);
}
[AttributeUsageAttribute("10624")]
public class Microsoft.SqlServer.Server.SqlFacetAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IsFixedLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxSize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    public bool IsFixedLength { get; public set; }
    public int MaxSize { get; public set; }
    public int Precision { get; public set; }
    public int Scale { get; public set; }
    public bool IsNullable { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsFixedLength();
    [CompilerGeneratedAttribute]
public void set_IsFixedLength(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxSize();
    [CompilerGeneratedAttribute]
public void set_MaxSize(int value);
    [CompilerGeneratedAttribute]
public int get_Precision();
    [CompilerGeneratedAttribute]
public void set_Precision(int value);
    [CompilerGeneratedAttribute]
public int get_Scale();
    [CompilerGeneratedAttribute]
public void set_Scale(int value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
}
[AttributeUsageAttribute("64")]
public class Microsoft.SqlServer.Server.SqlFunctionAttribute : Attribute {
    private bool _isDeterministic;
    private DataAccessKind _dataAccess;
    private SystemDataAccessKind _systemDataAccess;
    private bool _isPrecise;
    private string _name;
    private string _tableDefinition;
    private string _fillRowMethodName;
    public bool IsDeterministic { get; public set; }
    public DataAccessKind DataAccess { get; public set; }
    public SystemDataAccessKind SystemDataAccess { get; public set; }
    public bool IsPrecise { get; public set; }
    public string Name { get; public set; }
    public string TableDefinition { get; public set; }
    public string FillRowMethodName { get; public set; }
    public bool get_IsDeterministic();
    public void set_IsDeterministic(bool value);
    public DataAccessKind get_DataAccess();
    public void set_DataAccess(DataAccessKind value);
    public SystemDataAccessKind get_SystemDataAccess();
    public void set_SystemDataAccess(SystemDataAccessKind value);
    public bool get_IsPrecise();
    public void set_IsPrecise(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_TableDefinition();
    public void set_TableDefinition(string value);
    public string get_FillRowMethodName();
    public void set_FillRowMethodName(string value);
}
public class Microsoft.SqlServer.Server.SqlMetaData : object {
    private string _strName;
    private long _lMaxLength;
    private SqlDbType _sqlDbType;
    private byte _bPrecision;
    private byte _bScale;
    private long _lLocale;
    private SqlCompareOptions _eCompareOptions;
    private string _xmlSchemaCollectionDatabase;
    private string _xmlSchemaCollectionOwningSchema;
    private string _xmlSchemaCollectionName;
    private string _serverTypeName;
    private bool _bPartialLength;
    private Type _udtType;
    private bool _useServerDefault;
    private bool _isUniqueKey;
    private SortOrder _columnSortOrder;
    private int _sortOrdinal;
    private static long x_lMax;
    private static long x_lServerMaxUnicode;
    private static long x_lServerMaxANSI;
    private static long x_lServerMaxBinary;
    private static bool x_defaultUseServerDefault;
    private static bool x_defaultIsUniqueKey;
    private static SortOrder x_defaultColumnSortOrder;
    private static int x_defaultSortOrdinal;
    private static SqlCompareOptions x_eDefaultStringCompareOptions;
    private static Byte[] s_maxLenFromPrecision;
    private static byte MaxTimeScale;
    private static Byte[] s_maxVarTimeLenOffsetFromScale;
    private static DateTime s_dtSmallMax;
    private static DateTime s_dtSmallMin;
    private static SqlMoney s_smSmallMax;
    private static SqlMoney s_smSmallMin;
    private static TimeSpan s_timeMin;
    private static TimeSpan s_timeMax;
    private static Int64[] s_unitTicksFromScale;
    private static DbType[] sxm_rgSqlDbTypeToDbType;
    internal static SqlMetaData[] sxm_rgDefaults;
    public SqlCompareOptions CompareOptions { get; }
    public DbType DbType { get; }
    public bool IsUniqueKey { get; }
    public long LocaleId { get; }
    public static long Max { get; }
    public long MaxLength { get; }
    public string Name { get; }
    public byte Precision { get; }
    public byte Scale { get; }
    public SortOrder SortOrder { get; }
    public int SortOrdinal { get; }
    public SqlDbType SqlDbType { get; }
    public Type Type { get; }
    public string TypeName { get; }
    internal string ServerTypeName { get; }
    public bool UseServerDefault { get; }
    public string XmlSchemaCollectionDatabase { get; }
    public string XmlSchemaCollectionName { get; }
    public string XmlSchemaCollectionOwningSchema { get; }
    internal bool IsPartialLength { get; }
    internal string UdtTypeName { get; }
    public SqlMetaData(string name, SqlDbType dbType);
    public SqlMetaData(string name, SqlDbType dbType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType, string serverTypeName);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType, string serverTypeName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, byte precision, byte scale);
    public SqlMetaData(string name, SqlDbType dbType, byte precision, byte scale, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, string database, string owningSchema, string objectName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long locale, SqlCompareOptions compareOptions, Type userDefinedType);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, string database, string owningSchema, string objectName);
    internal SqlMetaData(string name, SqlDbType sqlDBType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, string xmlSchemaCollectionDatabase, string xmlSchemaCollectionOwningSchema, string xmlSchemaCollectionName, bool partialLength, Type udtType);
    private SqlMetaData(string name, SqlDbType sqlDbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, bool partialLength);
    private static SqlMetaData();
    public SqlCompareOptions get_CompareOptions();
    public DbType get_DbType();
    public bool get_IsUniqueKey();
    public long get_LocaleId();
    public static long get_Max();
    public long get_MaxLength();
    public string get_Name();
    public byte get_Precision();
    public byte get_Scale();
    public SortOrder get_SortOrder();
    public int get_SortOrdinal();
    public SqlDbType get_SqlDbType();
    public Type get_Type();
    public string get_TypeName();
    internal string get_ServerTypeName();
    public bool get_UseServerDefault();
    public string get_XmlSchemaCollectionDatabase();
    public string get_XmlSchemaCollectionName();
    public string get_XmlSchemaCollectionOwningSchema();
    internal bool get_IsPartialLength();
    internal string get_UdtTypeName();
    private void Construct(string name, SqlDbType dbType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void Construct(string name, SqlDbType dbType, long maxLength, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void Construct(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void Construct(string name, SqlDbType dbType, byte precision, byte scale, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void Construct(string name, SqlDbType dbType, Type userDefinedType, string serverTypeName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void Construct(string name, SqlDbType dbType, string database, string owningSchema, string objectName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void AssertNameIsValid(string name);
    private void ValidateSortOrder(SortOrder columnSortOrder, int sortOrdinal);
    public short Adjust(short value);
    public int Adjust(int value);
    public long Adjust(long value);
    public float Adjust(float value);
    public double Adjust(double value);
    public string Adjust(string value);
    public decimal Adjust(decimal value);
    public DateTime Adjust(DateTime value);
    public Guid Adjust(Guid value);
    public SqlBoolean Adjust(SqlBoolean value);
    public SqlByte Adjust(SqlByte value);
    public SqlInt16 Adjust(SqlInt16 value);
    public SqlInt32 Adjust(SqlInt32 value);
    public SqlInt64 Adjust(SqlInt64 value);
    public SqlSingle Adjust(SqlSingle value);
    public SqlDouble Adjust(SqlDouble value);
    public SqlMoney Adjust(SqlMoney value);
    public SqlDateTime Adjust(SqlDateTime value);
    public SqlDecimal Adjust(SqlDecimal value);
    public SqlString Adjust(SqlString value);
    public SqlBinary Adjust(SqlBinary value);
    public SqlGuid Adjust(SqlGuid value);
    public SqlChars Adjust(SqlChars value);
    public SqlBytes Adjust(SqlBytes value);
    public SqlXml Adjust(SqlXml value);
    public TimeSpan Adjust(TimeSpan value);
    public DateTimeOffset Adjust(DateTimeOffset value);
    public object Adjust(object value);
    public static SqlMetaData InferFromValue(object value, string name);
    public bool Adjust(bool value);
    public byte Adjust(byte value);
    public Byte[] Adjust(Byte[] value);
    public char Adjust(char value);
    public Char[] Adjust(Char[] value);
    internal static SqlMetaData GetPartialLengthMetaData(SqlMetaData md);
    private static void ThrowInvalidType();
    private void VerifyDateTimeRange(DateTime value);
    private void VerifyMoneyRange(SqlMoney value);
    private SqlDecimal InternalAdjustSqlDecimal(SqlDecimal value);
    private void VerifyTimeRange(TimeSpan value);
    private long InternalAdjustTimeTicks(long ticks);
    private static byte InferScaleFromTimeTicks(long ticks);
    private void SetDefaultsForType(SqlDbType dbType);
}
[AttributeUsageAttribute("64")]
public class Microsoft.SqlServer.Server.SqlMethodAttribute : SqlFunctionAttribute {
    private bool _isCalledOnNullInputs;
    private bool _isMutator;
    private bool _shouldInvokeIfReceiverIsNull;
    public bool OnNullCall { get; public set; }
    public bool IsMutator { get; public set; }
    public bool InvokeIfReceiverIsNull { get; public set; }
    public bool get_OnNullCall();
    public void set_OnNullCall(bool value);
    public bool get_IsMutator();
    public void set_IsMutator(bool value);
    public bool get_InvokeIfReceiverIsNull();
    public void set_InvokeIfReceiverIsNull(bool value);
}
internal class Microsoft.SqlServer.Server.SqlRecordBuffer : object {
    private bool _isNull;
    private StorageType _type;
    private Storage _value;
    private object _object;
    private SmiMetaData _metadata;
    private bool _isMetaSet;
    internal bool IsNull { get; }
    internal bool Boolean { get; internal set; }
    internal byte Byte { get; internal set; }
    internal DateTime DateTime { get; internal set; }
    internal DateTimeOffset DateTimeOffset { get; internal set; }
    internal double Double { get; internal set; }
    internal Guid Guid { get; internal set; }
    internal short Int16 { get; internal set; }
    internal int Int32 { get; internal set; }
    internal long Int64 { get; internal set; }
    internal float Single { get; internal set; }
    internal string String { get; internal set; }
    internal SqlDecimal SqlDecimal { get; internal set; }
    internal TimeSpan TimeSpan { get; internal set; }
    internal long BytesLength { get; internal set; }
    internal long CharsLength { get; internal set; }
    internal SmiMetaData VariantType { get; internal set; }
    internal SqlRecordBuffer(SmiMetaData metaData);
    internal bool get_IsNull();
    internal bool get_Boolean();
    internal void set_Boolean(bool value);
    internal byte get_Byte();
    internal void set_Byte(byte value);
    internal DateTime get_DateTime();
    internal void set_DateTime(DateTime value);
    internal DateTimeOffset get_DateTimeOffset();
    internal void set_DateTimeOffset(DateTimeOffset value);
    internal double get_Double();
    internal void set_Double(double value);
    internal Guid get_Guid();
    internal void set_Guid(Guid value);
    internal short get_Int16();
    internal void set_Int16(short value);
    internal int get_Int32();
    internal void set_Int32(int value);
    internal long get_Int64();
    internal void set_Int64(long value);
    internal float get_Single();
    internal void set_Single(float value);
    internal string get_String();
    internal void set_String(string value);
    internal SqlDecimal get_SqlDecimal();
    internal void set_SqlDecimal(SqlDecimal value);
    internal TimeSpan get_TimeSpan();
    internal void set_TimeSpan(TimeSpan value);
    internal long get_BytesLength();
    internal void set_BytesLength(long value);
    internal long get_CharsLength();
    internal void set_CharsLength(long value);
    internal SmiMetaData get_VariantType();
    internal void set_VariantType(SmiMetaData value);
    internal int GetBytes(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal int GetChars(long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal int SetBytes(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal int SetChars(long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal void SetNull();
    private void ConvertXmlStringToByteArray();
}
[AttributeUsageAttribute("12")]
public class Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute : Attribute {
    private int _maxByteSize;
    private bool _isInvariantToDup;
    private bool _isInvariantToNulls;
    private bool _isInvariantToOrder;
    private bool _isNullIfEmpty;
    private Format _format;
    private string _name;
    public static int MaxByteSizeValue;
    public int MaxByteSize { get; public set; }
    public bool IsInvariantToDuplicates { get; public set; }
    public bool IsInvariantToNulls { get; public set; }
    public bool IsInvariantToOrder { get; public set; }
    public bool IsNullIfEmpty { get; public set; }
    public Format Format { get; }
    public string Name { get; public set; }
    public SqlUserDefinedAggregateAttribute(Format format);
    public int get_MaxByteSize();
    public void set_MaxByteSize(int value);
    public bool get_IsInvariantToDuplicates();
    public void set_IsInvariantToDuplicates(bool value);
    public bool get_IsInvariantToNulls();
    public void set_IsInvariantToNulls(bool value);
    public bool get_IsInvariantToOrder();
    public void set_IsInvariantToOrder(bool value);
    public bool get_IsNullIfEmpty();
    public void set_IsNullIfEmpty(bool value);
    public Format get_Format();
    public string get_Name();
    public void set_Name(string value);
}
[AttributeUsageAttribute("12")]
public class Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute : Attribute {
    private int _maxByteSize;
    private bool _isFixedLength;
    private bool _isByteOrdered;
    private Format _format;
    private string _name;
    internal static int YukonMaxByteSizeValue;
    private string _validationMethodName;
    public int MaxByteSize { get; public set; }
    public bool IsFixedLength { get; public set; }
    public bool IsByteOrdered { get; public set; }
    public Format Format { get; }
    public string ValidationMethodName { get; public set; }
    public string Name { get; public set; }
    public SqlUserDefinedTypeAttribute(Format format);
    public int get_MaxByteSize();
    public void set_MaxByteSize(int value);
    public bool get_IsFixedLength();
    public void set_IsFixedLength(bool value);
    public bool get_IsByteOrdered();
    public void set_IsByteOrdered(bool value);
    public Format get_Format();
    public string get_ValidationMethodName();
    public void set_ValidationMethodName(string value);
    public string get_Name();
    public void set_Name(string value);
}
public enum Microsoft.SqlServer.Server.SystemDataAccessKind : Enum {
    public int value__;
    public static SystemDataAccessKind None;
    public static SystemDataAccessKind Read;
}
internal class Microsoft.SqlServer.Server.UIntNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.ULongNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal class Microsoft.SqlServer.Server.UShortNormalizer : Normalizer {
    internal int Size { get; }
    internal virtual void Normalize(FieldInfo fi, object obj, Stream s);
    internal virtual void DeNormalize(FieldInfo fi, object recvr, Stream s);
    internal virtual int get_Size();
}
internal static class Microsoft.SqlServer.Server.ValueUtilsSmi : object {
    private static int __maxByteChunkSize;
    private static int __maxCharChunkSize;
    private static int NoLengthLimit;
    private static int constBinBufferSize;
    private static int constTextBufferSize;
    private static Object[] s_typeSpecificNullForSqlValue;
    private static DateTime s_dtSmallMax;
    private static DateTime s_dtSmallMin;
    private static TimeSpan s_timeMin;
    private static TimeSpan s_timeMax;
    private static bool X;
    private static bool _;
    private static Boolean[0...,0...] s_canAccessGetterDirectly;
    private static Boolean[0...,0...] s_canAccessSetterDirectly;
    private static ValueUtilsSmi();
    internal static bool IsDBNull(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    internal static bool GetBoolean(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static byte GetByte(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    private static long GetBytesConversion(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length, bool throwOnNull);
    internal static long GetBytes(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiExtendedMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length, bool throwOnNull);
    internal static long GetBytesInternal(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length, bool throwOnNull);
    internal static long GetChars(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal static DateTime GetDateTime(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static DateTimeOffset GetDateTimeOffset(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, bool gettersSupportKatmaiDateTime);
    internal static DateTimeOffset GetDateTimeOffset(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData);
    internal static decimal GetDecimal(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static double GetDouble(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static Guid GetGuid(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static short GetInt16(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static int GetInt32(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static long GetInt64(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static float GetSingle(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlBinary GetSqlBinary(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlBoolean GetSqlBoolean(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlByte GetSqlByte(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlBytes GetSqlBytes(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlChars GetSqlChars(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlDateTime GetSqlDateTime(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlDecimal GetSqlDecimal(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlDouble GetSqlDouble(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlGuid GetSqlGuid(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlInt16 GetSqlInt16(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlInt32 GetSqlInt32(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlInt64 GetSqlInt64(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlMoney GetSqlMoney(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlSingle GetSqlSingle(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlString GetSqlString(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlXml GetSqlXml(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static string GetString(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static TimeSpan GetTimeSpan(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData);
    internal static object GetValue200(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData);
    internal static object GetValue(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static object GetSqlValue200(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData);
    internal static object GetSqlValue(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static object NullUdtInstance(SmiMetaData metaData);
    internal static void SetDBNull(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, bool value);
    internal static void SetBoolean(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, bool value);
    internal static void SetByte(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, byte value);
    internal static long SetBytes(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal static long SetBytesLength(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long length);
    internal static long SetChars(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal static void SetDateTime(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    internal static void SetDateTimeOffset(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTimeOffset value);
    internal static void SetDecimal(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, decimal value);
    internal static void SetDouble(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, double value);
    internal static void SetGuid(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, Guid value);
    internal static void SetInt16(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, short value);
    internal static void SetInt32(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, int value);
    internal static void SetInt64(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long value);
    internal static void SetSingle(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, float value);
    internal static void SetSqlBinary(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBinary value);
    internal static void SetSqlBoolean(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBoolean value);
    internal static void SetSqlByte(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlByte value);
    internal static void SetSqlBytes(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBytes value);
    internal static void SetSqlChars(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlChars value);
    internal static void SetSqlDateTime(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDateTime value);
    internal static void SetSqlDecimal(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDecimal value);
    internal static void SetSqlDouble(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDouble value);
    internal static void SetSqlGuid(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlGuid value);
    internal static void SetSqlInt16(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlInt16 value);
    internal static void SetSqlInt32(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlInt32 value);
    internal static void SetSqlInt64(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlInt64 value);
    internal static void SetSqlMoney(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlMoney value);
    internal static void SetSqlSingle(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlSingle value);
    internal static void SetSqlString(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlString value);
    internal static void SetSqlXml(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlXml value);
    internal static void SetString(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, string value);
    internal static void SetTimeSpan(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, TimeSpan value);
    internal static void SetCompatibleValue(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, object value, ExtendedClrTypeCode typeCode, int offset);
    internal static void SetCompatibleValueV200(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, object value, ExtendedClrTypeCode typeCode, int offset, int length, ParameterPeekAheadValue peekAhead, StorageType storageType);
    internal static void SetCompatibleValueV200(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, object value, ExtendedClrTypeCode typeCode, int offset, int length, ParameterPeekAheadValue peekAhead);
    private static void SetDataTable_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DataTable value);
    internal static void FillCompatibleITypedSettersFromReader(SmiEventSink_Default sink, ITypedSettersV3 setters, SmiMetaData[] metaData, SqlDataReader reader);
    internal static void FillCompatibleSettersFromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, IList`1<SmiExtendedMetaData> metaData, DbDataReader reader);
    internal static void FillCompatibleSettersFromRecord(SmiEventSink_Default sink, SmiTypedGetterSetter setters, SmiMetaData[] metaData, SqlDataRecord record, SmiDefaultFieldsProperty useDefaultValues);
    internal static Stream CopyIntoNewSmiScratchStream(Stream source, SmiEventSink_Default sink);
    private static object GetUdt_LengthChecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    private static decimal GetDecimal_PossiblyMoney(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    private static void SetDecimal_PossiblyMoney(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, decimal value);
    private static void VerifyDateTimeRange(SqlDbType dbType, DateTime value);
    private static void VerifyTimeRange(SqlDbType dbType, TimeSpan value);
    private static void SetDateTime_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetTimeSpan_Checked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, TimeSpan value);
    private static void SetSqlDateTime_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDateTime value);
    private static void SetDateTime2_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetDate_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetSqlMoney_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlMoney value);
    private static void SetByteArray_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, Byte[] buffer, int offset);
    private static void SetCharArray_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, Char[] buffer, int offset);
    private static void SetSqlBinary_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBinary value, int offset);
    private static void SetBytes_FromRecord(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDataRecord record, int offset);
    private static void SetBytes_FromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader reader, int offset);
    private static void SetSqlBytes_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBytes value, int offset);
    private static void SetChars_FromRecord(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDataRecord record, int offset);
    private static void SetCharsOrString_FromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader reader, int offset);
    private static void SetChars_FromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader reader, int offset);
    private static void SetString_FromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader reader, int offset);
    private static void SetSqlChars_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlChars value, int offset);
    private static void SetSqlString_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlString value, int offset);
    private static void SetString_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, string value, int offset);
    private static void SetUdt_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, object value);
    private static void ThrowIfInvalidSetterAccess(SmiMetaData metaData, ExtendedClrTypeCode setterTypeCode);
    private static void ThrowIfITypedGettersIsNull(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static bool CanAccessGetterDirectly(SmiMetaData metaData, ExtendedClrTypeCode setterTypeCode);
    private static bool CanAccessSetterDirectly(SmiMetaData metaData, ExtendedClrTypeCode setterTypeCode);
    private static long PositiveMin(long first, long second);
    private static int CheckXetParameters(SqlDbType dbType, long maxLength, long actualLength, long fieldOffset, int bufferLength, int bufferOffset, int length);
    private static bool IsDBNull_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static bool GetBoolean_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static byte GetByte_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static Byte[] GetByteArray_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    internal static int GetBytes_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    private static long GetBytesLength_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static Char[] GetCharArray_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    internal static int GetChars_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    private static long GetCharsLength_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static DateTime GetDateTime_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static DateTimeOffset GetDateTimeOffset_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal);
    private static double GetDouble_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static Guid GetGuid_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static short GetInt16_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static int GetInt32_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static long GetInt64_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static float GetSingle_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static SqlBinary GetSqlBinary_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static SqlDecimal GetSqlDecimal_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static SqlMoney GetSqlMoney_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static SqlXml GetSqlXml_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static string GetString_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static TimeSpan GetTimeSpan_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal);
    private static void SetBoolean_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, bool value);
    private static void SetByteArray_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, Byte[] buffer, int bufferOffset, int length);
    private static void SetStream_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metadata, StreamDataFeed feed);
    private static void SetTextReader_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metadata, TextDataFeed feed);
    private static void SetByte_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, byte value);
    private static int SetBytes_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    private static void SetCharArray_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, Char[] buffer, int bufferOffset, int length);
    private static int SetChars_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    private static void SetDBNull_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal);
    private static void SetDecimal_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, decimal value);
    private static void SetDateTime_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, DateTime value);
    private static void SetDateTime2_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetDate_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetTimeSpan_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, TimeSpan value);
    private static void SetDateTimeOffset_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, DateTimeOffset value);
    private static void SetDouble_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, double value);
    private static void SetGuid_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, Guid value);
    private static void SetInt16_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, short value);
    private static void SetInt32_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, int value);
    private static void SetInt64_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, long value);
    private static void SetSingle_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, float value);
    private static void SetSqlBinary_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlBinary value, int offset, int length);
    private static void SetSqlBoolean_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlBoolean value);
    private static void SetSqlByte_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlByte value);
    private static void SetSqlBytes_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlBytes value, int offset, long length);
    private static void SetSqlChars_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlChars value, int offset, int length);
    private static void SetSqlDateTime_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlDateTime value);
    private static void SetSqlDecimal_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlDecimal value);
    private static void SetSqlDouble_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlDouble value);
    private static void SetSqlGuid_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlGuid value);
    private static void SetSqlInt16_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlInt16 value);
    private static void SetSqlInt32_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlInt32 value);
    private static void SetSqlInt64_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlInt64 value);
    private static void SetSqlMoney_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlMoney value);
    private static void SetSqlSingle_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlSingle value);
    private static void SetSqlString_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlString value, int offset, int length);
    private static void SetSqlXml_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlXml value);
    private static void SetXmlReader_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, XmlReader xmlReader);
    private static void SetString_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, string value, int offset, int length);
    private static void SetDbDataReader_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader value);
    private static void SetIEnumerableOfSqlDataRecord_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, IEnumerable`1<SqlDataRecord> value, ParameterPeekAheadValue peekAhead);
}
internal class Microsoft.Win32.SafeHandles.SafeLibraryHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
internal class SqlDependencyProcessDispatcher : MarshalByRefObject {
    private static SqlDependencyProcessDispatcher s_staticInstance;
    private Dictionary`2<SqlConnectionContainerHashHelper, SqlConnectionContainer> _connectionContainers;
    private Dictionary`2<string, SqlDependencyPerAppDomainDispatcher> _sqlDependencyPerAppDomainDispatchers;
    internal static SqlDependencyProcessDispatcher SingletonProcessDispatcher { get; }
    private SqlDependencyProcessDispatcher(object dummyVariable);
    private static SqlDependencyProcessDispatcher();
    internal static SqlDependencyProcessDispatcher get_SingletonProcessDispatcher();
    private static SqlConnectionContainerHashHelper GetHashHelper(string connectionString, SqlConnectionStringBuilder& connectionStringBuilder, DbConnectionPoolIdentity& identity, String& user, string queue);
    public virtual object InitializeLifetimeService();
    private void Invalidate(string server, SqlNotification sqlNotification);
    internal void QueueAppDomainUnloading(string appDomainKey);
    private void AppDomainUnloading(object state);
    internal bool StartWithDefault(string connectionString, String& server, DbConnectionPoolIdentity& identity, String& user, String& database, String& service, string appDomainKey, SqlDependencyPerAppDomainDispatcher dispatcher, Boolean& errorOccurred, Boolean& appDomainStart);
    internal bool Start(string connectionString, string queue, string appDomainKey, SqlDependencyPerAppDomainDispatcher dispatcher);
    private bool Start(string connectionString, String& server, DbConnectionPoolIdentity& identity, String& user, String& database, String& queueService, string appDomainKey, SqlDependencyPerAppDomainDispatcher dispatcher, Boolean& errorOccurred, Boolean& appDomainStart, bool useDefaults);
    internal bool Stop(string connectionString, String& server, DbConnectionPoolIdentity& identity, String& user, String& database, String& queueService, string appDomainKey, Boolean& appDomainStop);
}
internal class System.Collections.Generic.BidirectionalDictionary`2 : object {
    private Dictionary`2<T1, T2> _forward;
    private Dictionary`2<T2, T1> _backward;
    public int Count { get; }
    public BidirectionalDictionary`2(int capacity);
    public int get_Count();
    public void Add(T1 item1, T2 item2);
    public bool TryGetForward(T1 item1, T2& item2);
    public bool TryGetBackward(T2 item2, T1& item1);
    public Enumerator<T1, T2> GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<T1, T2>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<T1,T2>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Data.Common.ActivityCorrelator : object {
    [ThreadStaticAttribute]
private static ActivityId t_tlsActivity;
    internal static ActivityId Current { get; }
    internal static ActivityId get_Current();
    internal static ActivityId Next();
}
internal static class System.Data.Common.ADP : object {
    private static Task`1<bool> _trueTask;
    private static Task`1<bool> _falseTask;
    internal static CompareOptions DefaultCompareOptions;
    internal static int DefaultConnectionTimeout;
    private static Type s_stackOverflowType;
    private static Type s_outOfMemoryType;
    private static Type s_threadAbortType;
    private static Type s_nullReferenceType;
    private static Type s_accessViolationType;
    private static Type s_securityType;
    internal static string Connection;
    internal static string Command;
    internal static string Parameter;
    internal static string ParameterName;
    internal static string ParameterSetPosition;
    internal static int DefaultCommandTimeout;
    internal static float FailoverTimeoutStep;
    internal static string StrEmpty;
    internal static int CharSize;
    private static Version s_systemDataVersion;
    internal static String[] AzureSqlServerEndpoints;
    internal static Task`1<bool> TrueTask { get; }
    internal static Task`1<bool> FalseTask { get; }
    private static ADP();
    internal static Task`1<bool> get_TrueTask();
    internal static Task`1<bool> get_FalseTask();
    internal static void TraceExceptionAsReturnValue(Exception e);
    internal static void TraceExceptionWithoutRethrow(Exception e);
    internal static ArgumentException Argument(string error);
    internal static ArgumentException Argument(string error, Exception inner);
    internal static ArgumentException Argument(string error, string parameter);
    internal static ArgumentNullException ArgumentNull(string parameter);
    internal static ArgumentNullException ArgumentNull(string parameter, string error);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName);
    internal static IndexOutOfRangeException IndexOutOfRange(string error);
    internal static InvalidCastException InvalidCast(string error);
    internal static InvalidCastException InvalidCast(string error, Exception inner);
    internal static InvalidOperationException InvalidOperation(string error);
    internal static NotSupportedException NotSupported();
    internal static NotSupportedException NotSupported(string error);
    internal static bool RemoveStringQuotes(string quotePrefix, string quoteSuffix, string quotedString, String& unquotedString);
    internal static ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, string value, string method);
    internal static InvalidOperationException DataAdapter(string error);
    private static InvalidOperationException Provider(string error);
    internal static ArgumentException InvalidMultipartName(string property, string value);
    internal static ArgumentException InvalidMultipartNameIncorrectUsageOfQuotes(string property, string value);
    internal static ArgumentException InvalidMultipartNameToManyParts(string property, string value, int limit);
    internal static void CheckArgumentNull(object value, string parameterName);
    internal static bool IsCatchableExceptionType(Exception e);
    internal static bool IsCatchableOrSecurityExceptionType(Exception e);
    internal static ArgumentOutOfRangeException InvalidEnumerationValue(Type type, int value);
    internal static ArgumentException ConnectionStringSyntax(int index);
    internal static ArgumentException KeywordNotSupported(string keyword);
    internal static ArgumentException ConvertFailed(Type fromType, Type toType, Exception innerException);
    internal static Exception InvalidConnectionOptionValue(string key);
    internal static Exception InvalidConnectionOptionValue(string key, Exception inner);
    internal static ArgumentException CollectionRemoveInvalidObject(Type itemType, ICollection collection);
    internal static ArgumentNullException CollectionNullValue(string parameter, Type collection, Type itemType);
    internal static IndexOutOfRangeException CollectionIndexInt32(int index, Type collection, int count);
    internal static IndexOutOfRangeException CollectionIndexString(Type itemType, string propertyName, string propertyValue, Type collection);
    internal static InvalidCastException CollectionInvalidType(Type collection, Type itemType, object invalidValue);
    private static string ConnectionStateMsg(ConnectionState state);
    internal static Exception StreamClosed(string method);
    internal static string BuildQuotedString(string quotePrefix, string quoteSuffix, string unQuotedString);
    internal static string AppendQuotedString(StringBuilder buffer, string quotePrefix, string quoteSuffix, string unQuotedString);
    internal static ArgumentException ParametersIsNotParent(Type parameterType, ICollection collection);
    internal static ArgumentException ParametersIsParent(Type parameterType, ICollection collection);
    internal static Exception InternalError(InternalErrorCode internalError);
    internal static Exception DataReaderClosed(string method);
    internal static ArgumentOutOfRangeException InvalidSourceBufferIndex(int maxLen, long srcOffset, string parameterName);
    internal static ArgumentOutOfRangeException InvalidDestinationBufferIndex(int maxLen, int dstOffset, string parameterName);
    internal static IndexOutOfRangeException InvalidBufferSizeOrIndex(int numBytes, int bufferIndex);
    internal static Exception InvalidDataLength(long length);
    internal static bool CompareInsensitiveInvariant(string strvalue, string strconst);
    internal static int DstCompare(string strA, string strB);
    internal static bool IsEmptyArray(String[] array);
    internal static bool IsNull(object value);
    internal static Exception InvalidSeekOrigin(string parameterName);
    internal static void SetCurrentTransaction(Transaction transaction);
    internal static Timer UnsafeCreateTimer(TimerCallback callback, object state, int dueTime, int period);
    internal static Exception ExceptionWithStackTrace(Exception e);
    internal static IndexOutOfRangeException IndexOutOfRange(int value);
    internal static IndexOutOfRangeException IndexOutOfRange();
    internal static TimeoutException TimeoutException(string error);
    internal static InvalidOperationException InvalidOperation(string error, Exception inner);
    internal static OverflowException Overflow(string error);
    internal static OverflowException Overflow(string error, Exception inner);
    internal static TypeLoadException TypeLoad(string error);
    internal static PlatformNotSupportedException DbTypeNotSupported(string dbType);
    internal static InvalidCastException InvalidCast();
    internal static IOException IO(string error);
    internal static IOException IO(string error, Exception inner);
    internal static ObjectDisposedException ObjectDisposed(object instance);
    internal static Exception DataTableDoesNotExist(string collectionName);
    internal static InvalidOperationException MethodCalledTwice(string method);
    internal static ArgumentOutOfRangeException InvalidCommandType(CommandType value);
    internal static ArgumentOutOfRangeException InvalidIsolationLevel(IsolationLevel value);
    internal static ArgumentOutOfRangeException InvalidParameterDirection(ParameterDirection value);
    internal static Exception TooManyRestrictions(string collectionName);
    internal static ArgumentOutOfRangeException InvalidUpdateRowSource(UpdateRowSource value);
    internal static ArgumentException InvalidMinMaxPoolSizeValues();
    internal static InvalidOperationException NoConnectionString();
    internal static Exception MethodNotImplemented(string methodName);
    internal static Exception QueryFailed(string collectionName, Exception e);
    internal static Exception InvalidConnectionOptionValueLength(string key, int limit);
    internal static Exception MissingConnectionOptionValue(string key, string requiredAdditionalKey);
    internal static Exception PooledOpenTimeout();
    internal static Exception NonPooledOpenTimeout();
    internal static InvalidOperationException TransactionConnectionMismatch();
    internal static InvalidOperationException TransactionRequired(string method);
    internal static Exception CommandTextRequired(string method);
    internal static Exception NoColumns();
    internal static InvalidOperationException ConnectionRequired(string method);
    internal static InvalidOperationException OpenConnectionRequired(string method, ConnectionState state);
    internal static Exception OpenReaderExists();
    internal static Exception OpenReaderExists(Exception e);
    internal static Exception NonSeqByteAccess(long badIndex, long currIndex, string method);
    internal static Exception InvalidXml();
    internal static Exception NegativeParameter(string parameterName);
    internal static Exception InvalidXmlMissingColumn(string collectionName, string columnName);
    internal static Exception InvalidMetaDataValue();
    internal static InvalidOperationException NonSequentialColumnAccess(int badCol, int currCol);
    internal static Exception InvalidXmlInvalidValue(string collectionName, string columnName);
    internal static Exception CollectionNameIsNotUnique(string collectionName);
    internal static Exception InvalidCommandTimeout(int value, string property);
    internal static Exception UninitializedParameterSize(int index, Type dataType);
    internal static Exception UnableToBuildCollection(string collectionName);
    internal static Exception PrepareParameterType(DbCommand cmd);
    internal static Exception UndefinedCollection(string collectionName);
    internal static Exception UnsupportedVersion(string collectionName);
    internal static Exception AmbigousCollectionName(string collectionName);
    internal static Exception PrepareParameterSize(DbCommand cmd);
    internal static Exception PrepareParameterScale(DbCommand cmd, string type);
    internal static Exception MissingDataSourceInformationColumn();
    internal static Exception IncorrectNumberOfDataSourceInformationRows();
    internal static Exception MismatchedAsyncResult(string expectedMethod, string gotMethod);
    internal static Exception ClosedConnectionError();
    internal static Exception ConnectionAlreadyOpen(ConnectionState state);
    internal static Exception TransactionPresent();
    internal static Exception LocalTransactionPresent();
    internal static Exception OpenConnectionPropertySet(string property, ConnectionState state);
    internal static Exception EmptyDatabaseName();
    internal static Exception MissingRestrictionColumn();
    internal static Exception InternalConnectionError(ConnectionError internalError);
    internal static Exception InvalidConnectRetryCountValue();
    internal static Exception MissingRestrictionRow();
    internal static Exception InvalidConnectRetryIntervalValue();
    internal static InvalidOperationException AsyncOperationPending();
    internal static IOException ErrorReadingFromStream(Exception internalException);
    internal static ArgumentException InvalidDataType(TypeCode typecode);
    internal static ArgumentException UnknownDataType(Type dataType);
    internal static ArgumentException DbTypeNotSupported(DbType type, Type enumtype);
    internal static ArgumentException UnknownDataTypeCode(Type dataType, TypeCode typeCode);
    internal static ArgumentException InvalidOffsetValue(int value);
    internal static ArgumentException InvalidSizeValue(int value);
    internal static ArgumentException ParameterValueOutOfRange(decimal value);
    internal static ArgumentException ParameterValueOutOfRange(SqlDecimal value);
    internal static ArgumentException VersionDoesNotSupportDataType(string typeName);
    internal static Exception ParameterConversionFailed(object value, Type destType, Exception inner);
    internal static Exception ParametersMappingIndex(int index, DbParameterCollection collection);
    internal static Exception ParametersSourceIndex(string parameterName, DbParameterCollection collection, Type parameterType);
    internal static Exception ParameterNull(string parameter, DbParameterCollection collection, Type parameterType);
    internal static Exception UndefinedPopulationMechanism(string populationMechanism);
    internal static Exception InvalidParameterType(DbParameterCollection collection, Type parameterType, object invalidValue);
    internal static Exception ParallelTransactionsNotSupported(DbConnection obj);
    internal static Exception TransactionZombied(DbTransaction obj);
    internal static Delegate FindBuilder(MulticastDelegate mcd);
    internal static void TimerCurrent(Int64& ticks);
    internal static long TimerCurrent();
    internal static long TimerFromSeconds(int seconds);
    internal static long TimerFromMilliseconds(long milliseconds);
    internal static bool TimerHasExpired(long timerExpire);
    internal static long TimerRemaining(long timerExpire);
    internal static long TimerRemainingMilliseconds(long timerExpire);
    internal static long TimerRemainingSeconds(long timerExpire);
    internal static long TimerToMilliseconds(long timerValue);
    private static long TimerToSeconds(long timerValue);
    internal static string MachineName();
    internal static Transaction GetCurrentTransaction();
    internal static bool IsDirection(DbParameter value, ParameterDirection condition);
    internal static void IsNullOrSqlType(object value, Boolean& isNull, Boolean& isSqlType);
    internal static Version GetAssemblyVersion();
    internal static bool IsAzureSqlServerEndpoint(string dataSource);
    internal static ArgumentOutOfRangeException InvalidDataRowVersion(DataRowVersion value);
    internal static ArgumentException SingleValuedProperty(string propertyName, string value);
    internal static ArgumentException DoubleValuedProperty(string propertyName, string value1, string value2);
    internal static ArgumentException InvalidPrefixSuffix();
    internal static ArgumentOutOfRangeException InvalidCommandBehavior(CommandBehavior value);
    internal static void ValidateCommandBehavior(CommandBehavior value);
    internal static ArgumentOutOfRangeException NotSupportedCommandBehavior(CommandBehavior value, string method);
    internal static ArgumentException BadParameterName(string parameterName);
    internal static Exception DeriveParametersNotSupported(IDbCommand value);
    internal static Exception NoStoredProcedureExists(string sproc);
    internal static InvalidOperationException TransactionCompletedButNotDisposed();
    internal static ArgumentOutOfRangeException InvalidUserDefinedTypeSerializationFormat(Format value);
    internal static ArgumentOutOfRangeException NotSupportedUserDefinedTypeSerializationFormat(Format value, string method);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName, object value);
    internal static ArgumentException InvalidArgumentLength(string argumentName, int limit);
    internal static ArgumentException MustBeReadOnly(string argumentName);
    internal static InvalidOperationException InvalidMixedUsageOfSecureAndClearCredential();
    internal static ArgumentException InvalidMixedArgumentOfSecureAndClearCredential();
    internal static InvalidOperationException InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity();
    internal static ArgumentException InvalidMixedArgumentOfSecureCredentialAndIntegratedSecurity();
    internal static InvalidOperationException InvalidMixedUsageOfAccessTokenAndIntegratedSecurity();
    internal static InvalidOperationException InvalidMixedUsageOfAccessTokenAndUserIDPassword();
    internal static Exception InvalidMixedUsageOfCredentialAndAccessToken();
}
internal class System.Data.Common.DbConnectionOptions : object {
    private static string ConnectionStringValidKeyPattern;
    private static string ConnectionStringValidValuePattern;
    private static string ConnectionStringQuoteValuePattern;
    private static string ConnectionStringQuoteOdbcValuePattern;
    internal static string DataDirectory;
    private static Regex s_connectionStringValidKeyRegex;
    private static Regex s_connectionStringValidValueRegex;
    private static Regex s_connectionStringQuoteValueRegex;
    private static Regex s_connectionStringQuoteOdbcValueRegex;
    private string _usersConnectionString;
    private Dictionary`2<string, string> _parsetable;
    internal NameValuePair _keyChain;
    internal bool _hasPasswordKeyword;
    public bool IsEmpty { get; }
    internal bool HasPersistablePassword { get; }
    public DbConnectionOptions(string connectionString, Dictionary`2<string, string> synonyms);
    protected DbConnectionOptions(DbConnectionOptions connectionOptions);
    private static DbConnectionOptions();
    public bool get_IsEmpty();
    internal bool TryGetParsetableValue(string key, String& value);
    public bool ConvertValueToIntegratedSecurity();
    internal bool ConvertValueToIntegratedSecurityInternal(string stringValue);
    public int ConvertValueToInt32(string keyName, int defaultValue);
    internal static int ConvertToInt32Internal(string keyname, string stringValue);
    public string ConvertValueToString(string keyName, string defaultValue);
    public bool ContainsKey(string keyword);
    public string UsersConnectionString(bool hidePassword);
    private string UsersConnectionString(bool hidePassword, bool forceHidePassword);
    internal bool get_HasPersistablePassword();
    public bool ConvertValueToBoolean(string keyName, bool defaultValue);
    internal static bool ConvertValueToBooleanInternal(string keyName, string stringValue);
    private static bool CompareInsensitiveInvariant(string strvalue, string strconst);
    private static string GetKeyName(StringBuilder buffer);
    private static string GetKeyValue(StringBuilder buffer, bool trimWhitespace);
    internal static int GetKeyValuePair(string connectionString, int currentPosition, StringBuilder buffer, bool useOdbcRules, String& keyname, String& keyvalue);
    private static bool IsValueValidInternal(string keyvalue);
    private static bool IsKeyNameValid(string keyname);
    private static NameValuePair ParseInternal(Dictionary`2<string, string> parsetable, string connectionString, bool buildChain, Dictionary`2<string, string> synonyms, bool firstKey);
    internal NameValuePair ReplacePasswordPwd(String& constr, bool fakePassword);
}
internal class System.Data.Common.DbConnectionPoolKey : object {
    private string _connectionString;
    internal string ConnectionString { get; internal set; }
    internal DbConnectionPoolKey(string connectionString);
    protected DbConnectionPoolKey(DbConnectionPoolKey key);
    public virtual object Clone();
    internal virtual string get_ConnectionString();
    internal virtual void set_ConnectionString(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class System.Data.Common.DbConnectionStringBuilderUtil : object {
    private static string ApplicationIntentReadWriteString;
    private static string ApplicationIntentReadOnlyString;
    internal static bool ConvertToBoolean(object value);
    internal static bool ConvertToIntegratedSecurity(object value);
    internal static int ConvertToInt32(object value);
    internal static string ConvertToString(object value);
    internal static bool TryConvertToApplicationIntent(string value, ApplicationIntent& result);
    internal static bool IsValidApplicationIntentValue(ApplicationIntent value);
    internal static string ApplicationIntentToString(ApplicationIntent value);
    internal static ApplicationIntent ConvertToApplicationIntent(string keyword, object value);
    internal static bool TryConvertToPoolBlockingPeriod(string value, PoolBlockingPeriod& result);
    internal static bool IsValidPoolBlockingPeriodValue(PoolBlockingPeriod value);
    internal static string PoolBlockingPeriodToString(PoolBlockingPeriod value);
    internal static PoolBlockingPeriod ConvertToPoolBlockingPeriod(string keyword, object value);
}
internal static class System.Data.Common.DbConnectionStringDefaults : object {
    internal static ApplicationIntent ApplicationIntent;
    internal static string ApplicationName;
    internal static string AttachDBFilename;
    internal static int ConnectTimeout;
    internal static string CurrentLanguage;
    internal static string DataSource;
    internal static bool Encrypt;
    internal static bool Enlist;
    internal static string FailoverPartner;
    internal static string InitialCatalog;
    internal static bool IntegratedSecurity;
    internal static int LoadBalanceTimeout;
    internal static bool MultipleActiveResultSets;
    internal static bool MultiSubnetFailover;
    internal static int MaxPoolSize;
    internal static int MinPoolSize;
    internal static int PacketSize;
    internal static string Password;
    internal static bool PersistSecurityInfo;
    internal static bool Pooling;
    internal static bool TrustServerCertificate;
    internal static string TypeSystemVersion;
    internal static string UserID;
    internal static bool UserInstance;
    internal static bool Replication;
    internal static string WorkstationID;
    internal static string TransactionBinding;
    internal static int ConnectRetryCount;
    internal static int ConnectRetryInterval;
    internal static PoolBlockingPeriod PoolBlockingPeriod;
}
internal static class System.Data.Common.DbConnectionStringKeywords : object {
    internal static string ApplicationIntent;
    internal static string ApplicationName;
    internal static string AsynchronousProcessing;
    internal static string AttachDBFilename;
    internal static string ConnectTimeout;
    internal static string ConnectionReset;
    internal static string ContextConnection;
    internal static string CurrentLanguage;
    internal static string Encrypt;
    internal static string FailoverPartner;
    internal static string InitialCatalog;
    internal static string MultipleActiveResultSets;
    internal static string MultiSubnetFailover;
    internal static string NetworkLibrary;
    internal static string PacketSize;
    internal static string Replication;
    internal static string TransactionBinding;
    internal static string TrustServerCertificate;
    internal static string TypeSystemVersion;
    internal static string UserInstance;
    internal static string WorkstationID;
    internal static string ConnectRetryCount;
    internal static string ConnectRetryInterval;
    internal static string DataSource;
    internal static string IntegratedSecurity;
    internal static string Password;
    internal static string Driver;
    internal static string PersistSecurityInfo;
    internal static string UserID;
    internal static string Enlist;
    internal static string LoadBalanceTimeout;
    internal static string MaxPoolSize;
    internal static string Pooling;
    internal static string MinPoolSize;
    internal static string PoolBlockingPeriod;
}
internal static class System.Data.Common.DbConnectionStringSynonyms : object {
    internal static string Async;
    internal static string APP;
    internal static string EXTENDEDPROPERTIES;
    internal static string INITIALFILENAME;
    internal static string CONNECTIONTIMEOUT;
    internal static string TIMEOUT;
    internal static string LANGUAGE;
    internal static string ADDR;
    internal static string ADDRESS;
    internal static string SERVER;
    internal static string NETWORKADDRESS;
    internal static string DATABASE;
    internal static string TRUSTEDCONNECTION;
    internal static string ConnectionLifetime;
    internal static string NET;
    internal static string NETWORK;
    internal static string Pwd;
    internal static string PERSISTSECURITYINFO;
    internal static string UID;
    internal static string User;
    internal static string WSID;
}
internal class System.Data.Common.MultipartIdentifier : object {
    private static int MaxParts;
    internal static int ServerIndex;
    internal static int CatalogIndex;
    internal static int SchemaIndex;
    internal static int TableIndex;
    internal static String[] ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, string property, bool ThrowOnEmptyMultipartName);
    private static void IncrementStringCount(string name, String[] ary, Int32& position, string property);
    private static bool IsWhitespace(char ch);
    internal static String[] ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, char separator, int limit, bool removequotes, string property, bool ThrowOnEmptyMultipartName);
}
internal class System.Data.Common.NameValuePair : object {
    private string _name;
    private string _value;
    private int _length;
    private NameValuePair _next;
    internal int Length { get; }
    internal string Name { get; }
    internal string Value { get; }
    internal NameValuePair Next { get; internal set; }
    internal NameValuePair(string name, string value, int length);
    internal int get_Length();
    internal string get_Name();
    internal string get_Value();
    internal NameValuePair get_Next();
    internal void set_Next(NameValuePair value);
}
internal static class System.Data.ExceptionBuilder : object {
    internal static void TraceExceptionAsReturnValue(Exception e);
    internal static ArgumentException _Argument(string error);
    public static Exception InvalidOffsetLength();
}
internal static class System.Data.LocalDBAPI : object {
    private static string const_localDbPrefix;
    private static LocalDBFormatMessageDelegate s_localDBFormatMessage;
    private static IntPtr s_userInstanceDLLHandle;
    private static object s_dllLock;
    private static UInt32 const_LOCALDB_TRUNCATE_ERR_MESSAGE;
    private static int const_ErrorMessageBufferSize;
    private static IntPtr UserInstanceDLLHandle { get; }
    private static LocalDBFormatMessageDelegate LocalDBFormatMessage { get; }
    private static LocalDBAPI();
    internal static string GetLocalDbInstanceNameFromServerName(string serverName);
    private static IntPtr LoadProcAddress();
    private static IntPtr get_UserInstanceDLLHandle();
    internal static void ReleaseDLLHandles();
    private static LocalDBFormatMessageDelegate get_LocalDBFormatMessage();
    internal static string GetLocalDBMessage(int hrCode);
    private static SqlException CreateLocalDBException(string errorMessage, string instance, int localDbError, int sniError);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.OperationAbortedException : SystemException {
    private OperationAbortedException(string message, Exception innerException);
    private OperationAbortedException(SerializationInfo info, StreamingContext context);
    internal static OperationAbortedException Aborted(Exception inner);
}
internal class System.Data.ProviderBase.BasicFieldNameLookup : object {
    private Dictionary`2<string, int> _fieldNameLookup;
    private String[] _fieldNames;
    private CompareInfo _compareInfo;
    public BasicFieldNameLookup(String[] fieldNames);
    public BasicFieldNameLookup(ReadOnlyCollection`1<string> columnNames);
    public BasicFieldNameLookup(IDataReader reader);
    public int GetOrdinal(string fieldName);
    public int IndexOfName(string fieldName);
    public int IndexOf(string fieldName);
    protected virtual CompareInfo GetCompareInfo();
    private int LinearIndexOf(string fieldName, CompareOptions compareOptions);
    private void GenerateLookup();
}
internal abstract class System.Data.ProviderBase.DbConnectionBusy : DbConnectionClosed {
    protected DbConnectionBusy(ConnectionState state);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal abstract class System.Data.ProviderBase.DbConnectionClosed : DbConnectionInternal {
    public string ServerVersion { get; }
    protected DbConnectionClosed(ConnectionState state, bool hidePassword, bool allowSetConnectionString);
    public virtual string get_ServerVersion();
    public virtual DbTransaction BeginTransaction(IsolationLevel il);
    public virtual void ChangeDatabase(string database);
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    protected virtual void Deactivate();
    protected internal virtual DataTable GetSchema(DbConnectionFactory factory, DbConnectionPoolGroup poolGroup, DbConnection outerConnection, string collectionName, String[] restrictions);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    protected virtual void Activate(Transaction transaction);
    public virtual void EnlistTransaction(Transaction transaction);
}
internal class System.Data.ProviderBase.DbConnectionClosedBusy : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedBusy();
}
internal class System.Data.ProviderBase.DbConnectionClosedConnecting : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedConnecting();
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal class System.Data.ProviderBase.DbConnectionClosedNeverOpened : DbConnectionClosed {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedNeverOpened();
}
internal class System.Data.ProviderBase.DbConnectionClosedPreviouslyOpened : DbConnectionClosed {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedPreviouslyOpened();
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal abstract class System.Data.ProviderBase.DbConnectionFactory : object {
    private Dictionary`2<DbConnectionPoolKey, DbConnectionPoolGroup> _connectionPoolGroups;
    private List`1<DbConnectionPool> _poolsToRelease;
    private List`1<DbConnectionPoolGroup> _poolGroupsToRelease;
    private Timer _pruningTimer;
    private static int PruningDueTime;
    private static int PruningPeriod;
    private static UInt32 s_pendingOpenNonPooledNext;
    private static Task`1[] s_pendingOpenNonPooled;
    private static Task`1<DbConnectionInternal> s_completedTask;
    public DbProviderFactory ProviderFactory { get; }
    private static DbConnectionFactory();
    public abstract virtual DbProviderFactory get_ProviderFactory();
    public void ClearAllPools();
    public void ClearPool(DbConnection connection);
    public void ClearPool(DbConnectionPoolKey key);
    internal virtual DbConnectionPoolProviderInfo CreateConnectionPoolProviderInfo(DbConnectionOptions connectionOptions);
    internal DbConnectionInternal CreateNonPooledConnection(DbConnection owningConnection, DbConnectionPoolGroup poolGroup, DbConnectionOptions userOptions);
    internal DbConnectionInternal CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    private Timer CreatePruningTimer();
    protected DbConnectionOptions FindConnectionOptions(DbConnectionPoolKey key);
    private static Task`1<DbConnectionInternal> GetCompletedTask();
    private DbConnectionPool GetConnectionPool(DbConnection owningObject, DbConnectionPoolGroup connectionPoolGroup);
    internal DbConnectionPoolGroup GetConnectionPoolGroup(DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolOptions, DbConnectionOptions& userConnectionOptions);
    private void PruneConnectionPoolGroups(object state);
    internal void QueuePoolForRelease(DbConnectionPool pool, bool clearing);
    internal void QueuePoolGroupForRelease(DbConnectionPoolGroup poolGroup);
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions);
    internal DbMetaDataFactory GetMetaDataFactory(DbConnectionPoolGroup connectionPoolGroup, DbConnectionInternal internalConnection);
    protected virtual DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory);
    protected abstract virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection);
    protected abstract virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    protected abstract virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions options);
    internal abstract virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal abstract virtual DbConnectionInternal GetInnerConnection(DbConnection connection);
    internal abstract virtual void PermissionDemand(DbConnection outerConnection);
    internal abstract virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal abstract virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal abstract virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal abstract virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
    internal bool TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection);
}
internal abstract class System.Data.ProviderBase.DbConnectionInternal : object {
    internal static StateChangeEventArgs StateChangeClosed;
    internal static StateChangeEventArgs StateChangeOpen;
    private bool _allowSetConnectionString;
    private bool _hidePassword;
    private ConnectionState _state;
    private WeakReference _owningObject;
    private DbConnectionPool _connectionPool;
    private DbReferenceCollection _referenceCollection;
    private int _pooledCount;
    private bool _connectionIsDoomed;
    private bool _cannotBePooled;
    private DateTime _createTime;
    private bool _isInStasis;
    private Transaction _enlistedTransaction;
    private Transaction _enlistedTransactionOriginal;
    internal bool AllowSetConnectionString { get; }
    internal bool CanBePooled { get; }
    protected internal bool IsConnectionDoomed { get; }
    internal bool IsEmancipated { get; }
    internal bool IsInPool { get; }
    protected internal object Owner { get; }
    internal DbConnectionPool Pool { get; }
    protected internal DbReferenceCollection ReferenceCollection { get; }
    public string ServerVersion { get; }
    public string ServerVersionNormalized { get; }
    public bool ShouldHidePassword { get; }
    public ConnectionState State { get; }
    protected internal Transaction EnlistedTransaction { get; protected internal set; }
    protected bool EnlistedTransactionDisposed { get; }
    internal bool IsTxRootWaitingForTxEnd { get; }
    protected bool UnbindOnTransactionCompletion { get; }
    protected internal bool IsNonPoolableTransactionRoot { get; }
    internal bool IsTransactionRoot { get; }
    protected bool ReadyToPrepareTransaction { get; }
    internal DbConnectionInternal(ConnectionState state, bool hidePassword, bool allowSetConnectionString);
    private static DbConnectionInternal();
    internal bool get_AllowSetConnectionString();
    internal bool get_CanBePooled();
    protected internal bool get_IsConnectionDoomed();
    internal bool get_IsEmancipated();
    internal bool get_IsInPool();
    protected internal object get_Owner();
    internal DbConnectionPool get_Pool();
    protected internal DbReferenceCollection get_ReferenceCollection();
    public abstract virtual string get_ServerVersion();
    public virtual string get_ServerVersionNormalized();
    public bool get_ShouldHidePassword();
    public ConnectionState get_State();
    internal void AddWeakReference(object value, int tag);
    public abstract virtual DbTransaction BeginTransaction(IsolationLevel il);
    public virtual void ChangeDatabase(string value);
    internal virtual void PrepareForReplaceConnection();
    protected virtual void PrepareForCloseConnection();
    protected virtual object ObtainAdditionalLocksForClose();
    protected virtual void ReleaseAdditionalLocksForClose(object lockToken);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected abstract virtual void Deactivate();
    internal void DeactivateConnection();
    protected internal void DoNotPoolThisConnection();
    protected internal void DoomThisConnection();
    protected internal virtual DataTable GetSchema(DbConnectionFactory factory, DbConnectionPoolGroup poolGroup, DbConnection outerConnection, string collectionName, String[] restrictions);
    internal void MakeNonPooledObject(object owningObject);
    internal void MakePooledConnection(DbConnectionPool connectionPool);
    internal void NotifyWeakReference(int message);
    internal virtual void OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    protected bool TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal void PrePush(object expectedOwner);
    internal void PostPop(object newOwner);
    internal void RemoveWeakReference(object value);
    internal virtual bool IsConnectionAlive(bool throwOnException);
    protected internal Transaction get_EnlistedTransaction();
    protected internal void set_EnlistedTransaction(Transaction value);
    protected bool get_EnlistedTransactionDisposed();
    internal bool get_IsTxRootWaitingForTxEnd();
    protected virtual bool get_UnbindOnTransactionCompletion();
    protected internal virtual bool get_IsNonPoolableTransactionRoot();
    internal virtual bool get_IsTransactionRoot();
    protected virtual bool get_ReadyToPrepareTransaction();
    protected abstract virtual void Activate(Transaction transaction);
    internal void ActivateConnection(Transaction transaction);
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    internal virtual void DelegatedTransactionEnded();
    public virtual void Dispose();
    public abstract virtual void EnlistTransaction(Transaction transaction);
    protected virtual void CleanupTransactionOnCompletion(Transaction transaction);
    internal void DetachCurrentTransactionIfEnded();
    internal void DetachTransaction(Transaction transaction, bool isExplicitlyReleasing);
    internal void CleanupConnectionOnTransactionCompletion(Transaction transaction);
    private void TransactionCompletedEvent(object sender, TransactionEventArgs e);
    private void TransactionOutcomeEnlist(Transaction transaction);
    internal void SetInStasis();
    private void TerminateStasis(bool returningToPool);
}
internal class System.Data.ProviderBase.DbConnectionOpenBusy : DbConnectionBusy {
    internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionOpenBusy();
}
internal class System.Data.ProviderBase.DbConnectionPool : object {
    private static int MAX_Q_SIZE;
    private static int SEMAPHORE_HANDLE;
    private static int ERROR_HANDLE;
    private static int CREATION_HANDLE;
    private static int BOGUS_HANDLE;
    private static int ERROR_WAIT_DEFAULT;
    private static Random s_random;
    private int _cleanupWait;
    private DbConnectionPoolIdentity _identity;
    private DbConnectionFactory _connectionFactory;
    private DbConnectionPoolGroup _connectionPoolGroup;
    private DbConnectionPoolGroupOptions _connectionPoolGroupOptions;
    private DbConnectionPoolProviderInfo _connectionPoolProviderInfo;
    private State _state;
    private ConcurrentStack`1<DbConnectionInternal> _stackOld;
    private ConcurrentStack`1<DbConnectionInternal> _stackNew;
    private ConcurrentQueue`1<PendingGetConnection> _pendingOpens;
    private int _pendingOpensWaiting;
    private WaitCallback _poolCreateRequest;
    private int _waitCount;
    private PoolWaitHandles _waitHandles;
    private Exception _resError;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _errorOccurred;
    private int _errorWait;
    private Timer _errorTimer;
    private Timer _cleanupTimer;
    private TransactedConnectionPool _transactedConnectionPool;
    private List`1<DbConnectionInternal> _objectList;
    private int _totalObjects;
    private int CreationTimeout { get; }
    internal int Count { get; }
    internal DbConnectionFactory ConnectionFactory { get; }
    internal bool ErrorOccurred { get; }
    private bool HasTransactionAffinity { get; }
    internal TimeSpan LoadBalanceTimeout { get; }
    private bool NeedToReplenish { get; }
    internal DbConnectionPoolIdentity Identity { get; }
    internal bool IsRunning { get; }
    private int MaxPoolSize { get; }
    private int MinPoolSize { get; }
    internal DbConnectionPoolGroup PoolGroup { get; }
    internal DbConnectionPoolGroupOptions PoolGroupOptions { get; }
    internal DbConnectionPoolProviderInfo ProviderInfo { get; }
    internal bool UseLoadBalancing { get; }
    private bool UsingIntegrateSecurity { get; }
    internal DbConnectionPool(DbConnectionFactory connectionFactory, DbConnectionPoolGroup connectionPoolGroup, DbConnectionPoolIdentity identity, DbConnectionPoolProviderInfo connectionPoolProviderInfo);
    private static DbConnectionPool();
    private int get_CreationTimeout();
    internal int get_Count();
    internal DbConnectionFactory get_ConnectionFactory();
    internal bool get_ErrorOccurred();
    private bool get_HasTransactionAffinity();
    internal TimeSpan get_LoadBalanceTimeout();
    private bool get_NeedToReplenish();
    internal DbConnectionPoolIdentity get_Identity();
    internal bool get_IsRunning();
    private int get_MaxPoolSize();
    private int get_MinPoolSize();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal DbConnectionPoolGroupOptions get_PoolGroupOptions();
    internal DbConnectionPoolProviderInfo get_ProviderInfo();
    internal bool get_UseLoadBalancing();
    private bool get_UsingIntegrateSecurity();
    private void CleanupCallback(object state);
    internal void Clear();
    private Timer CreateCleanupTimer();
    private DbConnectionInternal CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
    private void CheckPoolBlockingPeriod(Exception e);
    private void DeactivateObject(DbConnectionInternal obj);
    internal void DestroyObject(DbConnectionInternal obj);
    private void ErrorCallback(object state);
    private Exception TryCloneCachedException();
    private void WaitForPendingOpen();
    internal bool TryGetConnection(DbConnection owningObject, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal& connection);
    private bool TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, bool allowCreate, bool onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection);
    private void PrepareConnection(DbConnection owningObject, DbConnectionInternal obj, Transaction transaction);
    internal DbConnectionInternal ReplaceConnection(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
    private DbConnectionInternal GetFromGeneralPool();
    private DbConnectionInternal GetFromTransactedPool(Transaction& transaction);
    private void PoolCreateRequest(object state);
    internal void PutNewObject(DbConnectionInternal obj);
    internal void PutObject(DbConnectionInternal obj, object owningObject);
    internal void PutObjectFromTransactedPool(DbConnectionInternal obj);
    private void QueuePoolCreateRequest();
    private bool ReclaimEmancipatedObjects();
    internal void Startup();
    internal void Shutdown();
    internal void TransactionEnded(Transaction transaction, DbConnectionInternal transactedObject);
    private DbConnectionInternal UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
    private bool IsBlockingPeriodEnabled();
}
internal class System.Data.ProviderBase.DbConnectionPoolGroup : object {
    private DbConnectionOptions _connectionOptions;
    private DbConnectionPoolKey _poolKey;
    private DbConnectionPoolGroupOptions _poolGroupOptions;
    private ConcurrentDictionary`2<DbConnectionPoolIdentity, DbConnectionPool> _poolCollection;
    private int _state;
    private DbConnectionPoolGroupProviderInfo _providerInfo;
    private DbMetaDataFactory _metaDataFactory;
    private static int PoolGroupStateActive;
    private static int PoolGroupStateIdle;
    private static int PoolGroupStateDisabled;
    internal DbConnectionOptions ConnectionOptions { get; }
    internal DbConnectionPoolKey PoolKey { get; }
    internal DbConnectionPoolGroupProviderInfo ProviderInfo { get; internal set; }
    internal bool IsDisabled { get; }
    internal DbConnectionPoolGroupOptions PoolGroupOptions { get; }
    internal DbMetaDataFactory MetaDataFactory { get; internal set; }
    internal DbConnectionPoolGroup(DbConnectionOptions connectionOptions, DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolGroupOptions);
    internal DbConnectionOptions get_ConnectionOptions();
    internal DbConnectionPoolKey get_PoolKey();
    internal DbConnectionPoolGroupProviderInfo get_ProviderInfo();
    internal void set_ProviderInfo(DbConnectionPoolGroupProviderInfo value);
    internal bool get_IsDisabled();
    internal DbConnectionPoolGroupOptions get_PoolGroupOptions();
    internal DbMetaDataFactory get_MetaDataFactory();
    internal void set_MetaDataFactory(DbMetaDataFactory value);
    internal int Clear();
    internal DbConnectionPool GetConnectionPool(DbConnectionFactory connectionFactory);
    private bool MarkPoolGroupAsActive();
    internal bool Prune();
}
internal class System.Data.ProviderBase.DbConnectionPoolGroupOptions : object {
    private bool _poolByIdentity;
    private int _minPoolSize;
    private int _maxPoolSize;
    private int _creationTimeout;
    private TimeSpan _loadBalanceTimeout;
    private bool _hasTransactionAffinity;
    private bool _useLoadBalancing;
    public int CreationTimeout { get; }
    public bool HasTransactionAffinity { get; }
    public TimeSpan LoadBalanceTimeout { get; }
    public int MaxPoolSize { get; }
    public int MinPoolSize { get; }
    public bool PoolByIdentity { get; }
    public bool UseLoadBalancing { get; }
    public DbConnectionPoolGroupOptions(bool poolByIdentity, int minPoolSize, int maxPoolSize, int creationTimeout, int loadBalanceTimeout, bool hasTransactionAffinity);
    public int get_CreationTimeout();
    public bool get_HasTransactionAffinity();
    public TimeSpan get_LoadBalanceTimeout();
    public int get_MaxPoolSize();
    public int get_MinPoolSize();
    public bool get_PoolByIdentity();
    public bool get_UseLoadBalancing();
}
internal class System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo : object {
    private DbConnectionPoolGroup _poolGroup;
    internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
}
internal class System.Data.ProviderBase.DbConnectionPoolIdentity : object {
    public static DbConnectionPoolIdentity NoIdentity;
    private string _sidString;
    private bool _isRestricted;
    private bool _isNetwork;
    private int _hashCode;
    private static DbConnectionPoolIdentity s_lastIdentity;
    internal bool IsRestricted { get; }
    private DbConnectionPoolIdentity(string sidString, bool isRestricted, bool isNetwork);
    private static DbConnectionPoolIdentity();
    internal bool get_IsRestricted();
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    internal static DbConnectionPoolIdentity GetCurrentManaged();
    internal static DbConnectionPoolIdentity GetCurrent();
    private static DbConnectionPoolIdentity GetCurrentNative();
}
internal class System.Data.ProviderBase.DbConnectionPoolProviderInfo : object {
}
internal class System.Data.ProviderBase.DbMetaDataFactory : object {
    private DataSet _metaDataCollectionsDataSet;
    private string _normalizedServerVersion;
    private string _serverVersionString;
    private static string _collectionName;
    private static string _populationMechanism;
    private static string _populationString;
    private static string _maximumVersion;
    private static string _minimumVersion;
    private static string _dataSourceProductVersionNormalized;
    private static string _dataSourceProductVersion;
    private static string _restrictionDefault;
    private static string _restrictionNumber;
    private static string _numberOfRestrictions;
    private static string _restrictionName;
    private static string _parameterName;
    private static string _dataTable;
    private static string _sqlCommand;
    private static string _prepareCollection;
    protected DataSet CollectionDataSet { get; }
    protected string ServerVersion { get; }
    protected string ServerVersionNormalized { get; }
    public DbMetaDataFactory(Stream xmlStream, string serverVersion, string normalizedServerVersion);
    protected DataSet get_CollectionDataSet();
    protected string get_ServerVersion();
    protected string get_ServerVersionNormalized();
    protected DataTable CloneAndFilterCollection(string collectionName, String[] hiddenColumnNames);
    public void Dispose();
    protected virtual void Dispose(bool disposing);
    private DataTable ExecuteCommand(DataRow requestedCollectionRow, String[] restrictions, DbConnection connection);
    private DataColumn[] FilterColumns(DataTable sourceTable, String[] hiddenColumnNames, DataColumnCollection destinationColumns);
    internal DataRow FindMetaDataCollectionRow(string collectionName);
    private void FixUpVersion(DataTable dataSourceInfoTable);
    private string GetParameterName(string neededCollectionName, int neededRestrictionNumber);
    public virtual DataTable GetSchema(DbConnection connection, string collectionName, String[] restrictions);
    private bool IncludeThisColumn(DataColumn sourceColumn, String[] hiddenColumnNames);
    private void LoadDataSetFromXml(Stream XmlStream);
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
    private bool SupportedByCurrentVersion(DataRow requestedCollectionRow);
}
internal abstract class System.Data.ProviderBase.DbReferenceCollection : object {
    private static int LockPollTime;
    private static int DefaultCollectionSize;
    private CollectionEntry[] _items;
    private object _itemLock;
    private int _optimisticCount;
    private int _lastItemIndex;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isNotifying;
    public abstract virtual void Add(object value, int tag);
    protected void AddItem(object value, int tag);
    internal T FindItem(int tag, Func`2<T, bool> filterMethod);
    public void Notify(int message);
    protected abstract virtual void NotifyItem(int message, int tag, object value);
    public abstract virtual void Remove(object value);
    protected void RemoveItem(object value);
    private void TryEnterItemLock(Boolean& lockObtained);
    private void ExitItemLockIfNeeded(bool lockObtained);
}
internal class System.Data.ProviderBase.FieldNameLookup : BasicFieldNameLookup {
    private int _defaultLocaleID;
    public FieldNameLookup(String[] fieldNames, int defaultLocaleID);
    public FieldNameLookup(ReadOnlyCollection`1<string> columnNames, int defaultLocaleID);
    public FieldNameLookup(IDataReader reader, int defaultLocaleID);
    protected virtual CompareInfo GetCompareInfo();
}
internal class System.Data.ProviderBase.TimeoutTimer : object {
    private long _timerExpire;
    private bool _isInfiniteTimeout;
    internal static long InfiniteTimeout;
    internal bool IsExpired { get; }
    internal bool IsInfinite { get; }
    internal long LegacyTimerExpire { get; }
    internal long MillisecondsRemaining { get; }
    private static TimeoutTimer();
    internal static TimeoutTimer StartSecondsTimeout(int seconds);
    internal static TimeoutTimer StartMillisecondsTimeout(long milliseconds);
    internal void SetTimeoutSeconds(int seconds);
    internal bool get_IsExpired();
    internal bool get_IsInfinite();
    internal long get_LegacyTimerExpire();
    internal long get_MillisecondsRemaining();
}
internal static class System.Data.SafeNativeMethods : object {
    internal static IntPtr GetProcAddress(IntPtr HModule, string funcName);
}
public class System.Data.Sql.SqlNotificationRequest : object {
    private string _userData;
    private string _options;
    private int _timeout;
    public string Options { get; public set; }
    public int Timeout { get; public set; }
    public string UserData { get; public set; }
    public SqlNotificationRequest(string userData, string options, int timeout);
    public string get_Options();
    public void set_Options(string value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public string get_UserData();
    public void set_UserData(string value);
}
internal class System.Data.SqlClient._ColumnMapping : object {
    internal int _sourceColumnOrdinal;
    internal _SqlMetaData _metadata;
    internal _ColumnMapping(int columnId, _SqlMetaData metadata);
}
internal class System.Data.SqlClient._SqlMetaData : SqlMetaDataPriv {
    internal string column;
    internal string baseColumn;
    internal MultiPartTableName multiPartTableName;
    internal int ordinal;
    internal byte tableNum;
    internal byte op;
    internal ushort operand;
    private _SqlMetadataFlags flags;
    internal string serverName { get; }
    internal string catalogName { get; }
    internal string schemaName { get; }
    internal string tableName { get; }
    public byte Updatability { get; public set; }
    public bool IsReadOnly { get; }
    public bool IsDifferentName { get; public set; }
    public bool IsKey { get; public set; }
    public bool IsHidden { get; public set; }
    public bool IsExpression { get; public set; }
    public bool IsIdentity { get; public set; }
    public bool IsColumnSet { get; public set; }
    internal bool IsNewKatmaiDateTimeType { get; }
    internal bool IsLargeUdt { get; }
    internal _SqlMetaData(int ordinal);
    internal string get_serverName();
    internal string get_catalogName();
    internal string get_schemaName();
    internal string get_tableName();
    public byte get_Updatability();
    public void set_Updatability(byte value);
    public bool get_IsReadOnly();
    public bool get_IsDifferentName();
    public void set_IsDifferentName(bool value);
    public bool get_IsKey();
    public void set_IsKey(bool value);
    public bool get_IsHidden();
    public void set_IsHidden(bool value);
    public bool get_IsExpression();
    public void set_IsExpression(bool value);
    public bool get_IsIdentity();
    public void set_IsIdentity(bool value);
    public bool get_IsColumnSet();
    public void set_IsColumnSet(bool value);
    private void Set(_SqlMetadataFlags flag, bool value);
    internal bool get_IsNewKatmaiDateTimeType();
    internal bool get_IsLargeUdt();
    public object Clone();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.SqlClient._SqlMetaDataSet : object {
    internal ushort id;
    internal Int32[] indexMap;
    internal int visibleColumns;
    internal DataTable schemaTable;
    private _SqlMetaData[] _metaDataArray;
    internal ReadOnlyCollection`1<DbColumn> dbColumnSchema;
    internal int Length { get; }
    internal _SqlMetaData Item { get; internal set; }
    internal _SqlMetaDataSet(int count);
    private _SqlMetaDataSet(_SqlMetaDataSet original);
    internal int get_Length();
    internal _SqlMetaData get_Item(int index);
    internal void set_Item(int index, _SqlMetaData value);
    public object Clone();
}
internal class System.Data.SqlClient._SqlMetaDataSetCollection : object {
    private List`1<_SqlMetaDataSet> _altMetaDataSetArray;
    internal _SqlMetaDataSet metaDataSet;
    internal void SetAltMetaData(_SqlMetaDataSet altMetaDataSet);
    internal _SqlMetaDataSet GetAltMetaData(int id);
    public object Clone();
}
internal class System.Data.SqlClient._SqlRPC : object {
    internal string rpcName;
    internal ushort ProcID;
    internal ushort options;
    internal SqlParameter[] systemParams;
    internal Byte[] systemParamOptions;
    internal int systemParamCount;
    internal SqlParameterCollection userParams;
    internal Int64[] userParamMap;
    internal int userParamCount;
    internal Nullable`1<int> recordsAffected;
    internal int cumulativeRecordsAffected;
    internal int errorsIndexStart;
    internal int errorsIndexEnd;
    internal SqlErrorCollection errors;
    internal int warningsIndexStart;
    internal int warningsIndexEnd;
    internal SqlErrorCollection warnings;
    internal SqlParameter GetParameterByIndex(int index, Byte& options);
}
public enum System.Data.SqlClient.ApplicationIntent : Enum {
    public int value__;
    public static ApplicationIntent ReadWrite;
    public static ApplicationIntent ReadOnly;
}
internal static class System.Data.SqlClient.AsyncHelper : object {
    internal static Task CreateContinuationTask(Task task, Action onSuccess, Action`1<Exception> onFailure);
    internal static Task CreateContinuationTaskWithState(Task task, object state, Action`1<object> onSuccess, Action`2<Exception, object> onFailure);
    internal static Task CreateContinuationTask(Task task, Action`2<T1, T2> onSuccess, T1 arg1, T2 arg2, Action`1<Exception> onFailure);
    internal static void ContinueTask(Task task, TaskCompletionSource`1<object> completion, Action onSuccess, Action`1<Exception> onFailure, Action onCancellation, Func`2<Exception, Exception> exceptionConverter);
    internal static void ContinueTaskWithState(Task task, TaskCompletionSource`1<object> completion, object state, Action`1<object> onSuccess, Action`2<Exception, object> onFailure, Action`1<object> onCancellation, Func`2<Exception, Exception> exceptionConverter);
    internal static void WaitForCompletion(Task task, int timeout, Action onTimeout, bool rethrowExceptions);
    internal static void SetTimeoutException(TaskCompletionSource`1<object> completion, int timeout, Func`1<Exception> exc, CancellationToken ctoken);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.SqlClient.BulkCopySimpleResultSet : object {
    private List`1<Result> _results;
    private Result _resultSet;
    private Int32[] _indexmap;
    internal Result Item { get; }
    internal Result get_Item(int idx);
    internal void SetMetaData(_SqlMetaDataSet metadata);
    internal Int32[] CreateIndexMap();
    internal Object[] CreateRowBuffer();
}
internal enum System.Data.SqlClient.CallbackType : Enum {
    public int value__;
    public static CallbackType Read;
    public static CallbackType Write;
}
internal abstract class System.Data.SqlClient.DataFeed : object {
}
internal enum System.Data.SqlClient.EncryptionOptions : Enum {
    public int value__;
    public static EncryptionOptions OFF;
    public static EncryptionOptions ON;
    public static EncryptionOptions NOT_SUP;
    public static EncryptionOptions REQ;
    public static EncryptionOptions LOGIN;
}
internal class System.Data.SqlClient.FederatedAuthenticationFeatureExtensionData : ValueType {
    internal FedAuthLibrary libraryType;
    internal bool fedAuthRequiredPreLoginResponse;
    internal Byte[] accessToken;
}
internal class System.Data.SqlClient.LastIOTimer : object {
    internal long _value;
}
internal class System.Data.SqlClient.MetaType : object {
    internal Type ClassType;
    internal Type SqlType;
    internal int FixedLength;
    internal bool IsFixed;
    internal bool IsLong;
    internal bool IsPlp;
    internal byte Precision;
    internal byte Scale;
    internal byte TDSType;
    internal byte NullableType;
    internal string TypeName;
    internal SqlDbType SqlDbType;
    internal DbType DbType;
    internal byte PropBytes;
    internal bool IsAnsiType;
    internal bool IsBinType;
    internal bool IsCharType;
    internal bool IsNCharType;
    internal bool IsSizeInCharacters;
    internal bool IsNewKatmaiType;
    internal bool IsVarTime;
    internal bool Is70Supported;
    internal bool Is80Supported;
    internal bool Is90Supported;
    internal bool Is100Supported;
    private static MetaType s_metaBigInt;
    private static MetaType s_metaFloat;
    private static MetaType s_metaReal;
    private static MetaType s_metaBinary;
    private static MetaType s_metaTimestamp;
    internal static MetaType MetaVarBinary;
    internal static MetaType MetaMaxVarBinary;
    private static MetaType s_metaSmallVarBinary;
    internal static MetaType MetaImage;
    private static MetaType s_metaBit;
    private static MetaType s_metaTinyInt;
    private static MetaType s_metaSmallInt;
    private static MetaType s_metaInt;
    private static MetaType s_metaChar;
    private static MetaType s_metaVarChar;
    internal static MetaType MetaMaxVarChar;
    internal static MetaType MetaText;
    private static MetaType s_metaNChar;
    internal static MetaType MetaNVarChar;
    internal static MetaType MetaMaxNVarChar;
    internal static MetaType MetaNText;
    internal static MetaType MetaDecimal;
    internal static MetaType MetaXml;
    private static MetaType s_metaDateTime;
    private static MetaType s_metaSmallDateTime;
    private static MetaType s_metaMoney;
    private static MetaType s_metaSmallMoney;
    private static MetaType s_metaUniqueId;
    private static MetaType s_metaVariant;
    internal static MetaType MetaUdt;
    private static MetaType s_metaMaxUdt;
    private static MetaType s_metaTable;
    private static MetaType s_metaSUDT;
    private static MetaType s_metaDate;
    internal static MetaType MetaTime;
    private static MetaType s_metaDateTime2;
    internal static MetaType MetaDateTimeOffset;
    public int TypeId { get; }
    public MetaType(byte precision, byte scale, int fixedLength, bool isFixed, bool isLong, bool isPlp, byte tdsType, byte nullableTdsType, string typeName, Type classType, Type sqlType, SqlDbType sqldbType, DbType dbType, byte propBytes);
    private static MetaType();
    public int get_TypeId();
    private static bool _IsAnsiType(SqlDbType type);
    private static bool _IsSizeInCharacters(SqlDbType type);
    private static bool _IsCharType(SqlDbType type);
    private static bool _IsNCharType(SqlDbType type);
    private static bool _IsBinType(SqlDbType type);
    private static bool _Is70Supported(SqlDbType type);
    private static bool _Is80Supported(SqlDbType type);
    private static bool _Is90Supported(SqlDbType type);
    private static bool _Is100Supported(SqlDbType type);
    private static bool _IsNewKatmaiType(SqlDbType type);
    internal static bool _IsVarTime(SqlDbType type);
    internal static MetaType GetMetaTypeFromSqlDbType(SqlDbType target, bool isMultiValued);
    internal static MetaType GetMetaTypeFromDbType(DbType target);
    internal static MetaType GetMaxMetaTypeFromMetaType(MetaType mt);
    internal static MetaType GetMetaTypeFromType(Type dataType);
    internal static MetaType GetMetaTypeFromValue(object value, bool streamAllowed);
    private static MetaType GetMetaTypeFromValue(Type dataType, object value, bool inferLen, bool streamAllowed);
    internal static object GetNullSqlValue(Type sqlType);
    internal static MetaType PromoteStringType(string s);
    internal static object GetComValueFromSqlVariant(object sqlVal);
    [ConditionalAttribute("DEBUG")]
private static void AssertIsUserDefinedTypeInstance(object sqlValue, string failedAssertMessage);
    internal static object GetSqlValueFromComVariant(object comVal);
    internal static SqlDbType GetSqlDbTypeFromOleDbType(short dbType, string typeName);
    internal static MetaType GetSqlDataType(int tdsType, UInt32 userType, int length);
    internal static MetaType GetDefaultMetaType();
    internal static string GetStringFromXml(XmlReader xmlreader);
    public static TdsDateTime FromDateTime(DateTime dateTime, byte cb);
    public static DateTime ToDateTime(int sqlDays, int sqlTime, int length);
    internal static int GetTimeSizeFromScale(byte scale);
}
internal class System.Data.SqlClient.MultiPartTableName : ValueType {
    private string _multipartName;
    private string _serverName;
    private string _catalogName;
    private string _schemaName;
    private string _tableName;
    internal static MultiPartTableName Null;
    internal string ServerName { get; internal set; }
    internal string CatalogName { get; internal set; }
    internal string SchemaName { get; internal set; }
    internal string TableName { get; internal set; }
    internal MultiPartTableName(String[] parts);
    internal MultiPartTableName(string multipartName);
    private static MultiPartTableName();
    internal string get_ServerName();
    internal void set_ServerName(string value);
    internal string get_CatalogName();
    internal void set_CatalogName(string value);
    internal string get_SchemaName();
    internal void set_SchemaName(string value);
    internal string get_TableName();
    internal void set_TableName(string value);
    private void ParseMultipartName();
}
public class System.Data.SqlClient.OnChangeEventHandler : MulticastDelegate {
    public OnChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlNotificationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlNotificationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
internal class System.Data.SqlClient.PacketHandle : ValueType {
    public static int NativePointerType;
    public static int NativePacketType;
    public static int ManagedPacketType;
    public IntPtr NativePointer;
    public SNIPacket NativePacket;
    public SNIPacket ManagedPacket;
    public int Type;
    private PacketHandle(IntPtr nativePointer, SNIPacket nativePacket, SNIPacket managedPacket, int type);
    public static PacketHandle FromManagedPacket(SNIPacket managedPacket);
    public static PacketHandle FromNativePointer(IntPtr nativePointer);
    public static PacketHandle FromNativePacket(SNIPacket nativePacket);
}
internal class System.Data.SqlClient.ParameterPeekAheadValue : object {
    internal IEnumerator`1<SqlDataRecord> Enumerator;
    internal SqlDataRecord FirstRecord;
}
internal enum System.Data.SqlClient.ParsingErrorState : Enum {
    public int value__;
    public static ParsingErrorState Undefined;
    public static ParsingErrorState FedAuthInfoLengthTooShortForCountOfInfoIds;
    public static ParsingErrorState FedAuthInfoLengthTooShortForData;
    public static ParsingErrorState FedAuthInfoFailedToReadCountOfInfoIds;
    public static ParsingErrorState FedAuthInfoFailedToReadTokenStream;
    public static ParsingErrorState FedAuthInfoInvalidOffset;
    public static ParsingErrorState FedAuthInfoFailedToReadData;
    public static ParsingErrorState FedAuthInfoDataNotUnicode;
    public static ParsingErrorState FedAuthInfoDoesNotContainStsurlAndSpn;
    public static ParsingErrorState FedAuthInfoNotReceived;
    public static ParsingErrorState FedAuthNotAcknowledged;
    public static ParsingErrorState FedAuthFeatureAckContainsExtraData;
    public static ParsingErrorState FedAuthFeatureAckUnknownLibraryType;
    public static ParsingErrorState UnrequestedFeatureAckReceived;
    public static ParsingErrorState UnknownFeatureAck;
    public static ParsingErrorState InvalidTdsTokenReceived;
    public static ParsingErrorState SessionStateLengthTooShort;
    public static ParsingErrorState SessionStateInvalidStatus;
    public static ParsingErrorState CorruptedTdsStream;
    public static ParsingErrorState ProcessSniPacketFailed;
    public static ParsingErrorState FedAuthRequiredPreLoginResponseInvalidValue;
}
public enum System.Data.SqlClient.PoolBlockingPeriod : Enum {
    public int value__;
    public static PoolBlockingPeriod Auto;
    public static PoolBlockingPeriod AlwaysBlock;
    public static PoolBlockingPeriod NeverBlock;
}
internal enum System.Data.SqlClient.PreLoginHandshakeStatus : Enum {
    public int value__;
    public static PreLoginHandshakeStatus Successful;
    public static PreLoginHandshakeStatus InstanceFailure;
}
internal enum System.Data.SqlClient.PreLoginOptions : Enum {
    public int value__;
    public static PreLoginOptions VERSION;
    public static PreLoginOptions ENCRYPT;
    public static PreLoginOptions INSTANCE;
    public static PreLoginOptions THREADID;
    public static PreLoginOptions MARS;
    public static PreLoginOptions TRACEID;
    public static PreLoginOptions FEDAUTHREQUIRED;
    public static PreLoginOptions NUMOPT;
    public static PreLoginOptions LASTOPT;
}
[DefaultMemberAttribute("Item")]
internal class System.Data.SqlClient.Result : object {
    private _SqlMetaDataSet _metadata;
    private List`1<Row> _rowset;
    internal int Count { get; }
    internal _SqlMetaDataSet MetaData { get; }
    internal Row Item { get; }
    internal Result(_SqlMetaDataSet metadata);
    internal int get_Count();
    internal _SqlMetaDataSet get_MetaData();
    internal Row get_Item(int index);
    internal void AddRow(Row row);
}
internal class System.Data.SqlClient.RoutingInfo : object {
    [CompilerGeneratedAttribute]
private byte <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    internal byte Protocol { get; private set; }
    internal ushort Port { get; private set; }
    internal string ServerName { get; private set; }
    internal RoutingInfo(byte protocol, ushort port, string servername);
    [CompilerGeneratedAttribute]
internal byte get_Protocol();
    [CompilerGeneratedAttribute]
private void set_Protocol(byte value);
    [CompilerGeneratedAttribute]
internal ushort get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(ushort value);
    [CompilerGeneratedAttribute]
internal string get_ServerName();
    [CompilerGeneratedAttribute]
private void set_ServerName(string value);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.SqlClient.Row : object {
    private Object[] _dataFields;
    internal Object[] DataFields { get; }
    internal object Item { get; }
    internal Row(int rowCount);
    internal Object[] get_DataFields();
    internal object get_Item(int index);
}
internal enum System.Data.SqlClient.RunBehavior : Enum {
    public int value__;
    public static RunBehavior UntilDone;
    public static RunBehavior ReturnImmediately;
    public static RunBehavior Clean;
    public static RunBehavior Attention;
}
internal class System.Data.SqlClient.ServerInfo : object {
    [CompilerGeneratedAttribute]
private string <ExtendedServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResolvedServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResolvedDatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserProtocol>k__BackingField;
    private string _userServerName;
    internal string PreRoutingServerName;
    internal string ExtendedServerName { get; private set; }
    internal string ResolvedServerName { get; private set; }
    internal string ResolvedDatabaseName { get; private set; }
    internal string UserProtocol { get; private set; }
    internal string UserServerName { get; private set; }
    internal ServerInfo(SqlConnectionString userOptions);
    internal ServerInfo(SqlConnectionString userOptions, string serverName);
    internal ServerInfo(SqlConnectionString userOptions, RoutingInfo routing, string preRoutingServerName);
    [CompilerGeneratedAttribute]
internal string get_ExtendedServerName();
    [CompilerGeneratedAttribute]
private void set_ExtendedServerName(string value);
    [CompilerGeneratedAttribute]
internal string get_ResolvedServerName();
    [CompilerGeneratedAttribute]
private void set_ResolvedServerName(string value);
    [CompilerGeneratedAttribute]
internal string get_ResolvedDatabaseName();
    [CompilerGeneratedAttribute]
private void set_ResolvedDatabaseName(string value);
    [CompilerGeneratedAttribute]
internal string get_UserProtocol();
    [CompilerGeneratedAttribute]
private void set_UserProtocol(string value);
    internal string get_UserServerName();
    private void set_UserServerName(string value);
    internal void SetDerivedNames(string protocol, string serverName);
}
internal class System.Data.SqlClient.SessionData : object {
    internal static int _maxNumberOfSessionStates;
    internal UInt32 _tdsVersion;
    internal bool _encrypted;
    internal string _database;
    internal SqlCollation _collation;
    internal string _language;
    internal string _initialDatabase;
    internal SqlCollation _initialCollation;
    internal string _initialLanguage;
    internal byte _unrecoverableStatesCount;
    internal Dictionary`2<string, Tuple`2<string, string>> _resolvedAliases;
    internal SessionStateRecord[] _delta;
    internal bool _deltaDirty;
    internal Byte[][] _initialState;
    public SessionData(SessionData recoveryData);
    public void Reset();
    [ConditionalAttribute("DEBUG")]
public void AssertUnrecoverableStateCountIsCorrect();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
internal class System.Data.SqlClient.SessionHandle : ValueType {
    public static int NativeHandleType;
    public static int ManagedHandleType;
    public SNIHandle ManagedHandle;
    public SNIHandle NativeHandle;
    public int Type;
    public bool IsNull { get; }
    public SessionHandle(SNIHandle managedHandle, SNIHandle nativeHandle, int type);
    public bool get_IsNull();
    public static SessionHandle FromManagedSession(SNIHandle managedSessionHandle);
    public static SessionHandle FromNativeHandle(SNIHandle nativeSessionHandle);
}
internal class System.Data.SqlClient.SessionStateRecord : object {
    internal bool _recoverable;
    internal UInt32 _version;
    internal int _dataLength;
    internal Byte[] _data;
}
internal class System.Data.SqlClient.SNI.DataSource : object {
    private static char CommaSeparator;
    private static char BackSlashSeparator;
    private static string DefaultHostName;
    private static string DefaultSqlServerInstanceName;
    private static string PipeBeginning;
    private static string PipeToken;
    private static string LocalDbHost;
    private static string NamedPipeInstanceNameHeader;
    private static string DefaultPipeName;
    internal Protocol ConnectionProtocol;
    [CompilerGeneratedAttribute]
private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PipeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PipeHostName>k__BackingField;
    private string _workingDataSource;
    private string _dataSourceAfterTrimmingProtocol;
    [CompilerGeneratedAttribute]
private bool <IsBadDataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSsrpRequired>k__BackingField;
    internal string ServerName { get; private set; }
    internal int Port { get; private set; }
    public string InstanceName { get; internal set; }
    public string PipeName { get; internal set; }
    public string PipeHostName { get; internal set; }
    internal bool IsBadDataSource { get; private set; }
    internal bool IsSsrpRequired { get; private set; }
    private DataSource(string dataSource);
    [CompilerGeneratedAttribute]
internal string get_ServerName();
    [CompilerGeneratedAttribute]
private void set_ServerName(string value);
    [CompilerGeneratedAttribute]
internal int get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_InstanceName();
    [CompilerGeneratedAttribute]
internal void set_InstanceName(string value);
    [CompilerGeneratedAttribute]
public string get_PipeName();
    [CompilerGeneratedAttribute]
internal void set_PipeName(string value);
    [CompilerGeneratedAttribute]
public string get_PipeHostName();
    [CompilerGeneratedAttribute]
internal void set_PipeHostName(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsBadDataSource();
    [CompilerGeneratedAttribute]
private void set_IsBadDataSource(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsSsrpRequired();
    [CompilerGeneratedAttribute]
private void set_IsSsrpRequired(bool value);
    private void PopulateProtocol();
    public static string GetLocalDBInstance(string dataSource, Boolean& error);
    public static DataSource ParseServerName(string dataSource);
    private void InferLocalServerName();
    private bool InferConnectionDetails();
    private void ReportSNIError(SNIProviders provider);
    private bool InferNamedPipesInformation();
    private static bool IsLocalHost(string serverName);
}
internal class System.Data.SqlClient.SNI.LocalDB : object {
    private static LocalDB Instance;
    private static string LocalDBInstalledVersionRegistryKey;
    private static string InstanceAPIPathValueName;
    private static string ProcLocalDBStartInstance;
    private static int MAX_LOCAL_DB_CONNECTION_STRING_SIZE;
    private IntPtr _startInstanceHandle;
    private LocalDBStartInstance localDBStartInstanceFunc;
    private SafeLibraryHandle modreq(System.Runtime.CompilerServices.IsVolatile) _sqlUserInstanceLibraryHandle;
    private static LocalDB();
    internal static string GetLocalDBConnectionString(string localDbInstance);
    internal static IntPtr GetProcAddress(string functionName);
    private string GetConnectionString(string localDbInstance);
    internal static UInt32 MapLocalDBErrorStateToCode(LocalDBErrorState errorState);
    private bool LoadUserInstanceDll();
    private string GetUserInstanceDllPath(LocalDBErrorState& errorState);
}
internal class System.Data.SqlClient.SNI.SNIAsyncCallback : MulticastDelegate {
    public SNIAsyncCallback(object object, IntPtr method);
    public virtual void Invoke(SNIPacket packet, UInt32 sniErrorCode);
    public virtual IAsyncResult BeginInvoke(SNIPacket packet, UInt32 sniErrorCode, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.SqlClient.SNI.SNICommon : object {
    internal static int ConnTerminatedError;
    internal static int InvalidParameterError;
    internal static int ProtocolNotSupportedError;
    internal static int ConnTimeoutError;
    internal static int ConnNotUsableError;
    internal static int InvalidConnStringError;
    internal static int HandshakeFailureError;
    internal static int InternalExceptionError;
    internal static int ConnOpenFailedError;
    internal static int ErrorSpnLookup;
    internal static int LocalDBErrorCode;
    internal static int MultiSubnetFailoverWithMoreThan64IPs;
    internal static int MultiSubnetFailoverWithInstanceSpecified;
    internal static int MultiSubnetFailoverWithNonTcpProtocol;
    internal static int MaxErrorValue;
    internal static int LocalDBNoInstanceName;
    internal static int LocalDBNoInstallation;
    internal static int LocalDBInvalidConfig;
    internal static int LocalDBNoSqlUserInstanceDllPath;
    internal static int LocalDBInvalidSqlUserInstanceDllPath;
    internal static int LocalDBFailedToLoadDll;
    internal static int LocalDBBadRuntime;
    internal static bool ValidateSslServerCertificate(string targetServerName, object sender, X509Certificate cert, X509Chain chain, SslPolicyErrors policyErrors);
    internal static UInt32 ReportSNIError(SNIProviders provider, UInt32 nativeError, UInt32 sniError, string errorMessage);
    internal static UInt32 ReportSNIError(SNIProviders provider, UInt32 sniError, Exception sniException);
    internal static UInt32 ReportSNIError(SNIError error);
}
internal class System.Data.SqlClient.SNI.SNIError : object {
    public SNIProviders provider;
    public string errorMessage;
    public UInt32 nativeError;
    public UInt32 sniError;
    public string function;
    public UInt32 lineNumber;
    public Exception exception;
    public SNIError(SNIProviders provider, UInt32 nativeError, UInt32 sniErrorCode, string errorMessage);
    public SNIError(SNIProviders provider, UInt32 sniErrorCode, Exception sniException);
}
internal abstract class System.Data.SqlClient.SNI.SNIHandle : object {
    public UInt32 Status { get; }
    public Guid ConnectionId { get; }
    public int ReserveHeaderSize { get; }
    public abstract virtual void Dispose();
    public abstract virtual void SetAsyncCallbacks(SNIAsyncCallback receiveCallback, SNIAsyncCallback sendCallback);
    public abstract virtual void SetBufferSize(int bufferSize);
    public abstract virtual UInt32 Send(SNIPacket packet);
    public abstract virtual UInt32 SendAsync(SNIPacket packet, bool disposePacketAfterSendAsync, SNIAsyncCallback callback);
    public abstract virtual UInt32 Receive(SNIPacket& packet, int timeoutInMilliseconds);
    public abstract virtual UInt32 ReceiveAsync(SNIPacket& packet);
    public abstract virtual UInt32 EnableSsl(UInt32 options);
    public abstract virtual void DisableSsl();
    public abstract virtual UInt32 CheckConnection();
    public abstract virtual UInt32 get_Status();
    public abstract virtual Guid get_ConnectionId();
    public virtual int get_ReserveHeaderSize();
}
internal class System.Data.SqlClient.SNI.SNILoadHandle : object {
    public static SNILoadHandle SingletonInstance;
    public EncryptionOptions _encryptionOption;
    public ThreadLocal`1<SNIError> _lastError;
    private UInt32 _status;
    public SNIError LastError { get; public set; }
    public UInt32 Status { get; }
    public EncryptionOptions Options { get; }
    private static SNILoadHandle();
    public SNIError get_LastError();
    public void set_LastError(SNIError value);
    public UInt32 get_Status();
    public EncryptionOptions get_Options();
}
internal class System.Data.SqlClient.SNI.SNIMarsConnection : object {
    private Guid _connectionId;
    private Dictionary`2<int, SNIMarsHandle> _sessions;
    private Byte[] _headerBytes;
    private SNISMUXHeader _currentHeader;
    private SNIHandle _lowerHandle;
    private ushort _nextSessionId;
    private int _currentHeaderByteCount;
    private int _dataBytesLeft;
    private SNIPacket _currentPacket;
    public Guid ConnectionId { get; }
    public SNIMarsConnection(SNIHandle lowerHandle);
    public Guid get_ConnectionId();
    public SNIMarsHandle CreateMarsSession(object callbackObject, bool async);
    public UInt32 StartReceive();
    public UInt32 Send(SNIPacket packet);
    public UInt32 SendAsync(SNIPacket packet, SNIAsyncCallback callback);
    public UInt32 ReceiveAsync(SNIPacket& packet);
    public UInt32 CheckConnection();
    public void HandleReceiveError(SNIPacket packet);
    public void HandleSendComplete(SNIPacket packet, UInt32 sniErrorCode);
    public void HandleReceiveComplete(SNIPacket packet, UInt32 sniErrorCode);
    public UInt32 EnableSsl(UInt32 options);
    public void DisableSsl();
}
internal class System.Data.SqlClient.SNI.SNIMarsHandle : SNIHandle {
    private static UInt32 ACK_THRESHOLD;
    private SNIMarsConnection _connection;
    private UInt32 _status;
    private Queue`1<SNIPacket> _receivedPacketQueue;
    private Queue`1<SNIMarsQueuedPacket> _sendPacketQueue;
    private object _callbackObject;
    private Guid _connectionId;
    private ushort _sessionId;
    private ManualResetEventSlim _packetEvent;
    private ManualResetEventSlim _ackEvent;
    private SNISMUXHeader _currentHeader;
    private UInt32 _sendHighwater;
    private int _asyncReceives;
    private UInt32 _receiveHighwater;
    private UInt32 _receiveHighwaterLastAck;
    private UInt32 _sequenceNumber;
    private SNIError _connectionError;
    public Guid ConnectionId { get; }
    public UInt32 Status { get; }
    public int ReserveHeaderSize { get; }
    public SNIMarsHandle(SNIMarsConnection connection, ushort sessionId, object callbackObject, bool async);
    public virtual Guid get_ConnectionId();
    public virtual UInt32 get_Status();
    public virtual int get_ReserveHeaderSize();
    public virtual void Dispose();
    private void SendControlPacket(SNISMUXFlags flags);
    private void SetupSMUXHeader(int length, SNISMUXFlags flags);
    private SNIPacket SetPacketSMUXHeader(SNIPacket packet);
    public virtual UInt32 Send(SNIPacket packet);
    private UInt32 InternalSendAsync(SNIPacket packet, SNIAsyncCallback callback);
    private UInt32 SendPendingPackets();
    public virtual UInt32 SendAsync(SNIPacket packet, bool disposePacketAfterSendAsync, SNIAsyncCallback callback);
    public virtual UInt32 ReceiveAsync(SNIPacket& packet);
    public void HandleReceiveError(SNIPacket packet);
    public void HandleSendComplete(SNIPacket packet, UInt32 sniErrorCode);
    public void HandleAck(UInt32 highwater);
    public void HandleReceiveComplete(SNIPacket packet, SNISMUXHeader header);
    private void SendAckIfNecessary();
    public virtual UInt32 Receive(SNIPacket& packet, int timeoutInMilliseconds);
    public virtual UInt32 CheckConnection();
    public virtual void SetAsyncCallbacks(SNIAsyncCallback receiveCallback, SNIAsyncCallback sendCallback);
    public virtual void SetBufferSize(int bufferSize);
    public virtual UInt32 EnableSsl(UInt32 options);
    public virtual void DisableSsl();
}
internal class System.Data.SqlClient.SNI.SNIMarsQueuedPacket : object {
    private SNIPacket _packet;
    private SNIAsyncCallback _callback;
    public SNIPacket Packet { get; public set; }
    public SNIAsyncCallback Callback { get; public set; }
    public SNIMarsQueuedPacket(SNIPacket packet, SNIAsyncCallback callback);
    public SNIPacket get_Packet();
    public void set_Packet(SNIPacket value);
    public SNIAsyncCallback get_Callback();
    public void set_Callback(SNIAsyncCallback value);
}
internal class System.Data.SqlClient.SNI.SNINpHandle : SNIHandle {
    internal static string DefaultPipePath;
    private static int MAX_PIPE_INSTANCES;
    private string _targetServer;
    private object _callbackObject;
    private Stream _stream;
    private NamedPipeClientStream _pipeStream;
    private SslOverTdsStream _sslOverTdsStream;
    private SslStream _sslStream;
    private SNIAsyncCallback _receiveCallback;
    private SNIAsyncCallback _sendCallback;
    private bool _validateCert;
    private UInt32 _status;
    private int _bufferSize;
    private Guid _connectionId;
    public Guid ConnectionId { get; }
    public UInt32 Status { get; }
    public SNINpHandle(string serverName, string pipeName, long timerExpire, object callbackObject);
    public virtual Guid get_ConnectionId();
    public virtual UInt32 get_Status();
    public virtual UInt32 CheckConnection();
    public virtual void Dispose();
    public virtual UInt32 Receive(SNIPacket& packet, int timeout);
    public virtual UInt32 ReceiveAsync(SNIPacket& packet);
    public virtual UInt32 Send(SNIPacket packet);
    public virtual UInt32 SendAsync(SNIPacket packet, bool disposePacketAfterSendAsync, SNIAsyncCallback callback);
    public virtual void SetAsyncCallbacks(SNIAsyncCallback receiveCallback, SNIAsyncCallback sendCallback);
    public virtual UInt32 EnableSsl(UInt32 options);
    public virtual void DisableSsl();
    private bool ValidateServerCertificate(object sender, X509Certificate cert, X509Chain chain, SslPolicyErrors policyErrors);
    public virtual void SetBufferSize(int bufferSize);
    private UInt32 ReportErrorAndReleasePacket(SNIPacket packet, Exception sniException);
    private UInt32 ReportErrorAndReleasePacket(SNIPacket packet, UInt32 nativeError, UInt32 sniError, string errorMessage);
}
internal class System.Data.SqlClient.SNI.SNIPacket : object {
    private int _dataLength;
    private int _dataCapacity;
    private int _dataOffset;
    private int _headerLength;
    private Byte[] _data;
    private SNIAsyncCallback _completionCallback;
    public int DataLeft { get; }
    public int Length { get; }
    public bool IsInvalid { get; }
    public int ReservedHeaderSize { get; }
    public SNIPacket(int headerSize, int dataSize);
    public void Dispose();
    public int get_DataLeft();
    public int get_Length();
    public bool get_IsInvalid();
    public int get_ReservedHeaderSize();
    public void SetCompletionCallback(SNIAsyncCallback completionCallback);
    public void InvokeCompletionCallback(UInt32 sniErrorCode);
    private void Allocate(int headerLength, int dataLength);
    public void GetData(Byte[] buffer, Int32& dataSize);
    public int TakeData(SNIPacket packet, int size);
    public void AppendData(Byte[] data, int size);
    public int TakeData(Byte[] buffer, int dataOffset, int size);
    public Span`1<byte> GetHeaderBuffer(int headerSize);
    public void SetHeaderActive();
    public void Release();
    public void ReadFromStreamAsync(Stream stream, SNIAsyncCallback callback);
    public void ReadFromStream(Stream stream);
    [AsyncStateMachineAttribute("System.Data.SqlClient.SNI.SNIPacket/<WriteToStreamAsync>d__28")]
public void WriteToStreamAsync(Stream stream, SNIAsyncCallback callback, SNIProviders provider, bool disposeAfterWriteAsync);
    public void WriteToStream(Stream stream);
}
internal enum System.Data.SqlClient.SNI.SNIProviders : Enum {
    public int value__;
    public static SNIProviders HTTP_PROV;
    public static SNIProviders NP_PROV;
    public static SNIProviders SESSION_PROV;
    public static SNIProviders SIGN_PROV;
    public static SNIProviders SM_PROV;
    public static SNIProviders SMUX_PROV;
    public static SNIProviders SSL_PROV;
    public static SNIProviders TCP_PROV;
    public static SNIProviders MAX_PROVS;
    public static SNIProviders INVALID_PROV;
}
internal class System.Data.SqlClient.SNI.SNIProxy : object {
    private static int DefaultSqlServerPort;
    private static int DefaultSqlServerDacPort;
    private static string SqlServerSpnHeader;
    public static SNIProxy Singleton;
    private static SNIProxy();
    public void Terminate();
    public UInt32 EnableSsl(SNIHandle handle, UInt32 options);
    public UInt32 DisableSsl(SNIHandle handle);
    public void GenSspiClientContext(SspiClientContextStatus sspiClientContextStatus, Byte[] receivedBuff, Byte[]& sendBuff, Byte[] serverName);
    private static bool IsErrorStatus(SecurityStatusPalErrorCode errorCode);
    public UInt32 InitializeSspiPackage(UInt32& maxLength);
    public UInt32 SetConnectionBufferSize(SNIHandle handle, UInt32 bufferSize);
    public UInt32 PacketGetData(SNIPacket packet, Byte[] inBuff, UInt32& dataSize);
    public UInt32 ReadSyncOverAsync(SNIHandle handle, SNIPacket& packet, int timeout);
    public UInt32 GetConnectionId(SNIHandle handle, Guid& clientConnectionId);
    public UInt32 WritePacket(SNIHandle handle, SNIPacket packet, bool sync);
    public SNIHandle CreateConnectionHandle(object callbackObject, string fullServerName, bool ignoreSniOpenTimeout, long timerExpire, Byte[]& instanceName, Byte[]& spnBuffer, bool flushCache, bool async, bool parallel, bool isIntegratedSecurity);
    private static Byte[] GetSqlServerSPN(DataSource dataSource);
    private static Byte[] GetSqlServerSPN(string hostNameOrAddress, string portOrInstanceName);
    private SNITCPHandle CreateTcpHandle(DataSource details, long timerExpire, object callbackObject, bool parallel);
    private SNINpHandle CreateNpHandle(DataSource details, long timerExpire, object callbackObject, bool parallel);
    public UInt32 ReadAsync(SNIHandle handle, SNIPacket& packet);
    public void PacketSetData(SNIPacket packet, Byte[] data, int length);
    public void PacketRelease(SNIPacket packet);
    public UInt32 CheckConnection(SNIHandle handle);
    public SNIError GetLastError();
    private string GetLocalDBDataSource(string fullServerName, Boolean& error);
}
[FlagsAttribute]
internal enum System.Data.SqlClient.SNI.SNISMUXFlags : Enum {
    public int value__;
    public static SNISMUXFlags SMUX_SYN;
    public static SNISMUXFlags SMUX_ACK;
    public static SNISMUXFlags SMUX_FIN;
    public static SNISMUXFlags SMUX_DATA;
}
internal class System.Data.SqlClient.SNI.SNISMUXHeader : object {
    public static int HEADER_LENGTH;
    public byte SMID;
    public byte flags;
    public ushort sessionId;
    public UInt32 length;
    public UInt32 sequenceNumber;
    public UInt32 highwater;
    public void Read(Byte[] bytes);
    public void Write(Span`1<byte> bytes);
}
internal class System.Data.SqlClient.SNI.SNITcpHandle : object {
    internal static void SetKeepAliveValues(Socket& socket);
}
internal class System.Data.SqlClient.SNI.SNITCPHandle : SNIHandle {
    private string _targetServer;
    private object _callbackObject;
    private Socket _socket;
    private NetworkStream _tcpStream;
    private Stream _stream;
    private SslStream _sslStream;
    private SslOverTdsStream _sslOverTdsStream;
    private SNIAsyncCallback _receiveCallback;
    private SNIAsyncCallback _sendCallback;
    private bool _validateCert;
    private int _bufferSize;
    private UInt32 _status;
    private Guid _connectionId;
    private static int MaxParallelIpAddresses;
    public Guid ConnectionId { get; }
    public UInt32 Status { get; }
    public SNITCPHandle(string serverName, int port, long timerExpire, object callbackObject, bool parallel);
    public virtual void Dispose();
    public virtual Guid get_ConnectionId();
    public virtual UInt32 get_Status();
    private static Socket Connect(string serverName, int port, TimeSpan timeout);
    private static Task`1<Socket> ParallelConnectAsync(IPAddress[] serverAddresses, int port);
    [AsyncStateMachineAttribute("System.Data.SqlClient.SNI.SNITCPHandle/<ParallelConnectHelper>d__22")]
private static void ParallelConnectHelper(Socket socket, Task connectTask, TaskCompletionSource`1<Socket> tcs, StrongBox`1<int> pendingCompleteCount, StrongBox`1<Exception> lastError, List`1<Socket> sockets);
    public virtual UInt32 EnableSsl(UInt32 options);
    public virtual void DisableSsl();
    private bool ValidateServerCertificate(object sender, X509Certificate cert, X509Chain chain, SslPolicyErrors policyErrors);
    public virtual void SetBufferSize(int bufferSize);
    public virtual UInt32 Send(SNIPacket packet);
    public virtual UInt32 Receive(SNIPacket& packet, int timeoutInMilliseconds);
    public virtual void SetAsyncCallbacks(SNIAsyncCallback receiveCallback, SNIAsyncCallback sendCallback);
    public virtual UInt32 SendAsync(SNIPacket packet, bool disposePacketAfterSendAsync, SNIAsyncCallback callback);
    public virtual UInt32 ReceiveAsync(SNIPacket& packet);
    public virtual UInt32 CheckConnection();
    private UInt32 ReportTcpSNIError(Exception sniException);
    private UInt32 ReportTcpSNIError(UInt32 nativeError, UInt32 sniError, string errorMessage);
    private UInt32 ReportErrorAndReleasePacket(SNIPacket packet, Exception sniException);
    private UInt32 ReportErrorAndReleasePacket(SNIPacket packet, UInt32 nativeError, UInt32 sniError, string errorMessage);
}
internal class System.Data.SqlClient.SNI.SslOverTdsStream : Stream {
    private Stream _stream;
    private int _packetBytes;
    private bool _encapsulate;
    private static int PACKET_SIZE_WITHOUT_HEADER;
    private static int PRELOGIN_PACKET_TYPE;
    public long Position { get; public set; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public SslOverTdsStream(Stream stream);
    public void FinishHandshake();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken token);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken token);
    [AsyncStateMachineAttribute("System.Data.SqlClient.SNI.SslOverTdsStream/<ReadInternal>d__11")]
private Task`1<int> ReadInternal(Byte[] buffer, int offset, int count, CancellationToken token, bool async);
    [AsyncStateMachineAttribute("System.Data.SqlClient.SNI.SslOverTdsStream/<WriteInternal>d__12")]
private Task WriteInternal(Byte[] buffer, int offset, int count, CancellationToken token, bool async);
    public virtual void SetLength(long value);
    public virtual void Flush();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
}
internal class System.Data.SqlClient.SNI.SspiClientContextStatus : object {
    [CompilerGeneratedAttribute]
private SafeFreeCredentials <CredentialsHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private SafeDeleteContext <SecurityContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ContextFlagsPal <ContextFlags>k__BackingField;
    public SafeFreeCredentials CredentialsHandle { get; public set; }
    public SafeDeleteContext SecurityContext { get; public set; }
    public ContextFlagsPal ContextFlags { get; public set; }
    [CompilerGeneratedAttribute]
public SafeFreeCredentials get_CredentialsHandle();
    [CompilerGeneratedAttribute]
public void set_CredentialsHandle(SafeFreeCredentials value);
    [CompilerGeneratedAttribute]
public SafeDeleteContext get_SecurityContext();
    [CompilerGeneratedAttribute]
public void set_SecurityContext(SafeDeleteContext value);
    [CompilerGeneratedAttribute]
public ContextFlagsPal get_ContextFlags();
    [CompilerGeneratedAttribute]
public void set_ContextFlags(ContextFlagsPal value);
}
internal class System.Data.SqlClient.SNI.SSRP : object {
    private static char SemicolonSeparator;
    private static int SqlServerBrowserPort;
    internal static int GetPortByInstanceName(string browserHostName, string instanceName);
    private static Byte[] CreateInstanceInfoRequest(string instanceName);
    internal static int GetDacPortByInstanceName(string browserHostName, string instanceName);
    private static Byte[] CreateDacPortInfoRequest(string instanceName);
    private static Byte[] SendUDPRequest(string browserHostname, int port, Byte[] requestPacket);
}
internal class System.Data.SqlClient.SNI.TdsParserStateObjectManaged : TdsParserStateObject {
    private SNIMarsConnection _marsConnection;
    private SNIHandle _sessionHandle;
    private SspiClientContextStatus _sspiClientContextStatus;
    internal SNIHandle Handle { get; }
    internal UInt32 Status { get; }
    internal SessionHandle SessionHandle { get; }
    protected PacketHandle EmptyReadPacket { get; }
    public TdsParserStateObjectManaged(TdsParser parser);
    internal TdsParserStateObjectManaged(TdsParser parser, TdsParserStateObject physicalConnection, bool async);
    internal SNIHandle get_Handle();
    internal virtual UInt32 get_Status();
    internal virtual SessionHandle get_SessionHandle();
    protected virtual bool CheckPacket(PacketHandle packet, TaskCompletionSource`1<object> source);
    protected virtual void CreateSessionHandle(TdsParserStateObject physicalConnection, bool async);
    internal SNIMarsHandle CreateMarsSession(object callbackObject, bool async);
    protected virtual UInt32 SNIPacketGetData(PacketHandle packet, Byte[] _inBuff, UInt32& dataSize);
    internal virtual void CreatePhysicalSNIHandle(string serverName, bool ignoreSniOpenTimeout, long timerExpire, Byte[]& instanceName, Byte[]& spnBuffer, bool flushCache, bool async, bool parallel, bool isIntegratedSecurity);
    internal void ReadAsyncCallback(SNIPacket packet, UInt32 error);
    internal void WriteAsyncCallback(SNIPacket packet, UInt32 sniError);
    protected virtual void RemovePacketFromPendingList(PacketHandle packet);
    internal virtual void Dispose();
    internal virtual void DisposePacketCache();
    protected virtual void FreeGcHandle(int remaining, bool release);
    internal virtual bool IsFailedHandle();
    internal virtual PacketHandle ReadSyncOverAsync(int timeoutRemaining, UInt32& error);
    protected virtual PacketHandle get_EmptyReadPacket();
    internal virtual bool IsPacketEmpty(PacketHandle packet);
    internal virtual void ReleasePacket(PacketHandle syncReadPacket);
    internal virtual UInt32 CheckConnection();
    internal virtual PacketHandle ReadAsync(SessionHandle handle, UInt32& error);
    internal virtual PacketHandle CreateAndSetAttentionPacket();
    internal virtual UInt32 WritePacket(PacketHandle packet, bool sync);
    internal virtual PacketHandle AddPacketToPendingList(PacketHandle packet);
    internal virtual bool IsValidPacket(PacketHandle packet);
    internal virtual PacketHandle GetResetWritePacket(int dataSize);
    internal virtual void ClearAllWritePackets();
    internal virtual void SetPacketData(PacketHandle packet, Byte[] buffer, int bytesUsed);
    internal virtual UInt32 SniGetConnectionId(Guid& clientConnectionId);
    internal virtual UInt32 DisabeSsl();
    internal virtual UInt32 EnableMars(UInt32& info);
    internal virtual UInt32 EnableSsl(UInt32& info);
    internal virtual UInt32 SetConnectionBufferSize(UInt32& unsignedPacketSize);
    internal virtual UInt32 GenerateSspiClientContext(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength, Byte[] _sniSpnBuffer);
    internal virtual UInt32 WaitForSSLHandShakeToComplete();
}
internal enum System.Data.SqlClient.SniContext : Enum {
    public int value__;
    public static SniContext Undefined;
    public static SniContext Snix_Connect;
    public static SniContext Snix_PreLoginBeforeSuccessfulWrite;
    public static SniContext Snix_PreLogin;
    public static SniContext Snix_LoginSspi;
    public static SniContext Snix_ProcessSspi;
    public static SniContext Snix_Login;
    public static SniContext Snix_EnableMars;
    public static SniContext Snix_AutoEnlist;
    public static SniContext Snix_GetMarsSession;
    public static SniContext Snix_Execute;
    public static SniContext Snix_Read;
    public static SniContext Snix_Close;
    public static SniContext Snix_SendRows;
}
internal class System.Data.SqlClient.SNIErrorDetails : ValueType {
    public string errorMessage;
    public UInt32 nativeError;
    public UInt32 sniErrorNumber;
    public int provider;
    public UInt32 lineNumber;
    public string function;
    public Exception exception;
}
internal class System.Data.SqlClient.SNIHandle : SafeHandle {
    private UInt32 _status;
    private bool _fSync;
    public bool IsInvalid { get; }
    internal UInt32 Status { get; }
    internal SNIHandle(ConsumerInfo myInfo, string serverName, Byte[] spnBuffer, bool ignoreSniOpenTimeout, int timeout, Byte[]& instanceName, bool flushCache, bool fSync, bool fParallel);
    internal SNIHandle(ConsumerInfo myInfo, SNIHandle parent);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    internal UInt32 get_Status();
}
internal class System.Data.SqlClient.SNILoadHandle : SafeHandle {
    internal static SNILoadHandle SingletonInstance;
    internal SqlAsyncCallbackDelegate ReadAsyncCallbackDispatcher;
    internal SqlAsyncCallbackDelegate WriteAsyncCallbackDispatcher;
    private UInt32 _sniStatus;
    private EncryptionOptions _encryptionOption;
    public bool IsInvalid { get; }
    public UInt32 Status { get; }
    public EncryptionOptions Options { get; }
    private static SNILoadHandle();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    public UInt32 get_Status();
    public EncryptionOptions get_Options();
    private static void ReadDispatcher(IntPtr key, IntPtr packet, UInt32 error);
    private static void WriteDispatcher(IntPtr key, IntPtr packet, UInt32 error);
}
internal static class System.Data.SqlClient.SNINativeMethodWrapper : object {
    private static string SNI;
    private static int s_sniMaxComposedSpnLength;
    private static int SniOpenTimeOut;
    internal static int SniMaxComposedSpnLength { get; }
    private static SNINativeMethodWrapper();
    internal static int get_SniMaxComposedSpnLength();
    internal static UInt32 SNIAddProvider(SNIHandle pConn, ProviderEnum ProvNum, UInt32& pInfo);
    internal static UInt32 SNICheckConnection(SNIHandle pConn);
    internal static UInt32 SNIClose(IntPtr pConn);
    internal static void SNIGetLastError(SNI_Error& pErrorStruct);
    internal static void SNIPacketRelease(IntPtr pPacket);
    internal static void SNIPacketReset(SNIHandle pConn, IOType IOType, SNIPacket pPacket, ConsumerNumber ConsNum);
    internal static UInt32 SNIQueryInfo(QTypes QType, UInt32& pbQInfo);
    internal static UInt32 SNIQueryInfo(QTypes QType, IntPtr& pbQInfo);
    internal static UInt32 SNIReadAsync(SNIHandle pConn, IntPtr& ppNewPacket);
    internal static UInt32 SNIReadSyncOverAsync(SNIHandle pConn, IntPtr& ppNewPacket, int timeout);
    internal static UInt32 SNIRemoveProvider(SNIHandle pConn, ProviderEnum ProvNum);
    internal static UInt32 SNISecInitPackage(UInt32& pcbMaxToken);
    internal static UInt32 SNISetInfo(SNIHandle pConn, QTypes QType, UInt32& pbQInfo);
    internal static UInt32 SNITerminate();
    internal static UInt32 SNIWaitForSSLHandshakeToComplete(SNIHandle pConn, int dwMilliseconds);
    internal static UInt32 UnmanagedIsTokenRestricted(IntPtr token, Boolean& isRestricted);
    private static UInt32 GetSniMaxComposedSpnLength();
    private static UInt32 SNIGetInfoWrapper(SNIHandle pConn, QTypes QType, Guid& pbQInfo);
    private static UInt32 SNIInitialize(IntPtr pmo);
    private static UInt32 SNIOpenSyncExWrapper(SNI_CLIENT_CONSUMER_INFO& pClientConsumerInfo, IntPtr& ppConn);
    private static UInt32 SNIOpenWrapper(Sni_Consumer_Info& pConsumerInfo, string szConnect, SNIHandle pConn, IntPtr& ppConn, bool fSync);
    private static IntPtr SNIPacketAllocateWrapper(SafeHandle pConn, IOType IOType);
    private static UInt32 SNIPacketGetDataWrapper(IntPtr packet, Byte[] readBuffer, UInt32 readBufferLength, UInt32& dataSize);
    private static void SNIPacketSetData(SNIPacket pPacket, Byte* pbBuf, UInt32 cbBuf);
    private static UInt32 SNISecGenClientContextWrapper(SNIHandle pConn, Byte[] pIn, UInt32 cbIn, Byte[] pOut, UInt32& pcbOut, Boolean& pfDone, Byte* szServerInfo, UInt32 cbServerInfo, string pwszUserName, string pwszPassword);
    private static UInt32 SNIWriteAsyncWrapper(SNIHandle pConn, SNIPacket pPacket);
    private static UInt32 SNIWriteSyncOverAsync(SNIHandle pConn, SNIPacket pPacket);
    internal static UInt32 SniGetConnectionId(SNIHandle pConn, Guid& connId);
    internal static UInt32 SNIInitialize();
    internal static UInt32 SNIOpenMarsSession(ConsumerInfo consumerInfo, SNIHandle parent, IntPtr& pConn, bool fSync);
    internal static UInt32 SNIOpenSyncEx(ConsumerInfo consumerInfo, string constring, IntPtr& pConn, Byte[] spnBuffer, Byte[] instanceName, bool fOverrideCache, bool fSync, int timeout, bool fParallel);
    internal static void SNIPacketAllocate(SafeHandle pConn, IOType IOType, IntPtr& pPacket);
    internal static UInt32 SNIPacketGetData(IntPtr packet, Byte[] readBuffer, UInt32& dataSize);
    internal static void SNIPacketSetData(SNIPacket packet, Byte[] data, int length);
    internal static UInt32 SNISecGenClientContext(SNIHandle pConnectionObject, Byte[] inBuff, UInt32 receivedLength, Byte[] OutBuff, UInt32& sendLength, Byte[] serverUserName);
    internal static UInt32 SNIWritePacket(SNIHandle pConn, SNIPacket packet, bool sync);
    private static void MarshalConsumerInfo(ConsumerInfo consumerInfo, Sni_Consumer_Info& native_consumerInfo);
}
internal class System.Data.SqlClient.SNIPacket : SafeHandle {
    public bool IsInvalid { get; }
    internal SNIPacket(SafeHandle sniHandle);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
public enum System.Data.SqlClient.SortOrder : Enum {
    public int value__;
    public static SortOrder Unspecified;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
internal static class System.Data.SqlClient.SQL : object {
    internal static Byte[] AttentionHeader;
    internal static int SqlDependencyTimeoutDefault;
    internal static int SqlDependencyServerTimeout;
    internal static string SqlNotificationServiceDefault;
    internal static string SqlNotificationStoredProcedureDefault;
    private static SQL();
    internal static Exception CannotGetDTCAddress();
    internal static Exception InvalidInternalPacketSize(string str);
    internal static Exception InvalidPacketSize();
    internal static Exception InvalidPacketSizeValue();
    internal static Exception InvalidSSPIPacketSize();
    internal static Exception NullEmptyTransactionName();
    internal static Exception UserInstanceFailoverNotCompatible();
    internal static Exception ParsingErrorLibraryType(ParsingErrorState state, int libraryType);
    internal static Exception InvalidSQLServerVersionUnknown();
    internal static Exception SynchronousCallMayNotPend();
    internal static Exception ConnectionLockedForBcpEvent();
    internal static Exception InstanceFailure();
    internal static Exception ChangePasswordArgumentMissing(string argumentName);
    internal static Exception ChangePasswordConflictsWithSSPI();
    internal static Exception ChangePasswordRequiresYukon();
    internal static Exception ChangePasswordUseOfUnallowedKey(string key);
    internal static Exception GlobalTransactionsNotEnabled();
    internal static Exception UnknownSysTxIsolationLevel(IsolationLevel isolationLevel);
    internal static Exception InvalidPartnerConfiguration(string server, string database);
    internal static Exception MARSUnspportedOnConnection();
    internal static Exception CannotModifyPropertyAsyncOperationInProgress(string property);
    internal static Exception NonLocalSSEInstance();
    internal static ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, int value);
    internal static ArgumentOutOfRangeException NotSupportedCommandType(CommandType value);
    internal static ArgumentOutOfRangeException NotSupportedIsolationLevel(IsolationLevel value);
    internal static Exception OperationCancelled();
    internal static Exception PendingBeginXXXExists();
    internal static ArgumentOutOfRangeException InvalidSqlDependencyTimeout(string param);
    internal static Exception NonXmlResult();
    internal static Exception InvalidUdt3PartNameFormat();
    internal static Exception InvalidParameterTypeNameFormat();
    internal static Exception InvalidParameterNameLength(string value);
    internal static Exception PrecisionValueOutOfRange(byte precision);
    internal static Exception ScaleValueOutOfRange(byte scale);
    internal static Exception TimeScaleValueOutOfRange(byte scale);
    internal static Exception InvalidSqlDbType(SqlDbType value);
    internal static Exception UnsupportedTVPOutputParameter(ParameterDirection direction, string paramName);
    internal static Exception DBNullNotSupportedForTVPValues(string paramName);
    internal static Exception UnexpectedTypeNameForNonStructParams(string paramName);
    internal static Exception ParameterInvalidVariant(string paramName);
    internal static Exception MustSetTypeNameForParam(string paramType, string paramName);
    internal static Exception NullSchemaTableDataTypeNotSupported(string columnName);
    internal static Exception InvalidSchemaTableOrdinals();
    internal static Exception EnumeratedRecordMetaDataChanged(string fieldName, int recordNumber);
    internal static Exception EnumeratedRecordFieldCountChanged(int recordNumber);
    internal static Exception InvalidTDSVersion();
    internal static Exception ParsingError();
    internal static Exception ParsingError(ParsingErrorState state);
    internal static Exception ParsingErrorValue(ParsingErrorState state, int value);
    internal static Exception ParsingErrorFeatureId(ParsingErrorState state, int featureId);
    internal static Exception MoneyOverflow(string moneyValue);
    internal static Exception SmallDateTimeOverflow(string datetime);
    internal static Exception SNIPacketAllocationFailure();
    internal static Exception TimeOverflow(string time);
    internal static Exception InvalidRead();
    internal static Exception NonBlobColumn(string columnName);
    internal static Exception NonCharColumn(string columnName);
    internal static Exception StreamNotSupportOnColumnType(string columnName);
    internal static Exception TextReaderNotSupportOnColumnType(string columnName);
    internal static Exception XmlReaderNotSupportOnColumnType(string columnName);
    internal static Exception UDTUnexpectedResult(string exceptionText);
    internal static Exception SqlCommandHasExistingSqlNotificationRequest();
    internal static Exception SqlDepDefaultOptionsButNoStart();
    internal static Exception SqlDependencyDatabaseBrokerDisabled();
    internal static Exception SqlDependencyEventNoDuplicate();
    internal static Exception SqlDependencyDuplicateStart();
    internal static Exception SqlDependencyIdMismatch();
    internal static Exception SqlDependencyNoMatchingServerStart();
    internal static Exception SqlDependencyNoMatchingServerDatabaseStart();
    internal static Exception CannotCompleteDelegatedTransactionWithOpenResults(SqlInternalConnectionTds internalConnection, bool marsOn);
    internal static TransactionPromotionException PromotionFailed(Exception inner);
    internal static Exception UnexpectedUdtTypeNameForNonUdtParams();
    internal static Exception MustSetUdtTypeNameForUdtParams();
    internal static Exception UDTInvalidSqlType(string typeName);
    internal static Exception InvalidSqlDbTypeForConstructor(SqlDbType type);
    internal static Exception NameTooLong(string parameterName);
    internal static Exception InvalidSortOrder(SortOrder order);
    internal static Exception MustSpecifyBothSortOrderAndOrdinal(SortOrder order, int ordinal);
    internal static Exception UnsupportedColumnTypeForSqlProvider(string columnName, string typeName);
    internal static Exception InvalidColumnMaxLength(string columnName, long maxLength);
    internal static Exception InvalidColumnPrecScale();
    internal static Exception NotEnoughColumnsInStructuredType();
    internal static Exception DuplicateSortOrdinal(int sortOrdinal);
    internal static Exception MissingSortOrdinal(int sortOrdinal);
    internal static Exception SortOrdinalGreaterThanFieldCount(int columnOrdinal, int sortOrdinal);
    internal static Exception IEnumerableOfSqlDataRecordHasNoRows();
    internal static Exception BulkLoadMappingInaccessible();
    internal static Exception BulkLoadMappingsNamesOrOrdinalsOnly();
    internal static Exception BulkLoadCannotConvertValue(Type sourcetype, MetaType metatype, Exception e);
    internal static Exception BulkLoadNonMatchingColumnMapping();
    internal static Exception BulkLoadNonMatchingColumnName(string columnName);
    internal static Exception BulkLoadNonMatchingColumnName(string columnName, Exception e);
    internal static Exception BulkLoadStringTooLong();
    internal static Exception BulkLoadInvalidVariantValue();
    internal static Exception BulkLoadInvalidTimeout(int timeout);
    internal static Exception BulkLoadExistingTransaction();
    internal static Exception BulkLoadNoCollation();
    internal static Exception BulkLoadConflictingTransactionOption();
    internal static Exception BulkLoadLcidMismatch(int sourceLcid, string sourceColumnName, int destinationLcid, string destinationColumnName);
    internal static Exception InvalidOperationInsideEvent();
    internal static Exception BulkLoadMissingDestinationTable();
    internal static Exception BulkLoadInvalidDestinationTable(string tableName, Exception inner);
    internal static Exception BulkLoadBulkLoadNotAllowDBNull(string columnName);
    internal static Exception BulkLoadPendingOperation();
    internal static Exception InvalidTableDerivedPrecisionForTvp(string columnName, byte precision);
    internal static Exception ConnectionDoomed();
    internal static Exception OpenResultCountExceeded();
    internal static Exception UnsupportedSysTxForGlobalTransactions();
    internal static Exception MultiSubnetFailoverWithFailoverPartner(bool serverProvidedFailoverPartner, SqlInternalConnectionTds internalConnection);
    internal static Exception MultiSubnetFailoverWithMoreThan64IPs();
    internal static Exception MultiSubnetFailoverWithInstanceSpecified();
    internal static Exception MultiSubnetFailoverWithNonTcpProtocol();
    internal static Exception ROR_FailoverNotSupportedConnString();
    internal static Exception ROR_FailoverNotSupportedServer(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_RecursiveRoutingNotSupported(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_UnexpectedRoutingInfo(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_InvalidRoutingInfo(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_TimeoutAfterRoutingInfo(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_ReconnectTimeout();
    internal static SqlException CR_ReconnectionCancelled();
    internal static Exception CR_NextAttemptWillExceedQueryTimeout(SqlException innerException, Guid connectionId);
    internal static Exception CR_EncryptionChanged(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_AllAttemptsFailed(SqlException innerException, Guid connectionId);
    internal static SqlException CR_NoCRAckAtReconnection(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_TDSVersionNotPreserved(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_UnrecoverableServer(Guid connectionId);
    internal static SqlException CR_UnrecoverableClient(Guid connectionId);
    internal static Exception StreamWriteNotSupported();
    internal static Exception StreamReadNotSupported();
    internal static Exception StreamSeekNotSupported();
    internal static SqlNullValueException SqlNullValue();
    internal static Exception SubclassMustOverride();
    internal static Exception UnsupportedKeyword(string keyword);
    internal static Exception NetworkLibraryKeywordNotSupported();
    internal static Exception UnsupportedFeatureAndToken(SqlInternalConnectionTds internalConnection, string token);
    internal static Exception BatchedUpdatesNotAvailableOnContextConnection();
    internal static string GetSNIErrorMessage(int sniError);
}
internal class System.Data.SqlClient.SqlBuffer : object {
    private bool _isNull;
    private StorageType _type;
    private Storage _value;
    private object _object;
    private static String[] s_katmaiDateTimeOffsetFormatByScale;
    private static String[] s_katmaiDateTime2FormatByScale;
    private static String[] s_katmaiTimeFormatByScale;
    private static object s_cachedTrueObject;
    private static object s_cachedFalseObject;
    internal bool IsEmpty { get; }
    internal bool IsNull { get; }
    internal StorageType VariantInternalStorageType { get; }
    internal bool Boolean { get; internal set; }
    internal byte Byte { get; internal set; }
    internal Byte[] ByteArray { get; }
    internal DateTime DateTime { get; }
    internal decimal Decimal { get; }
    internal double Double { get; internal set; }
    internal Guid Guid { get; internal set; }
    internal short Int16 { get; internal set; }
    internal int Int32 { get; internal set; }
    internal long Int64 { get; internal set; }
    internal float Single { get; internal set; }
    internal string String { get; }
    internal string KatmaiDateTimeString { get; }
    internal SqlString KatmaiDateTimeSqlString { get; }
    internal TimeSpan Time { get; }
    internal DateTimeOffset DateTimeOffset { get; }
    internal SqlBinary SqlBinary { get; internal set; }
    internal SqlBoolean SqlBoolean { get; }
    internal SqlByte SqlByte { get; }
    internal SqlCachedBuffer SqlCachedBuffer { get; internal set; }
    internal SqlXml SqlXml { get; internal set; }
    internal SqlDateTime SqlDateTime { get; }
    internal SqlDecimal SqlDecimal { get; }
    internal SqlDouble SqlDouble { get; }
    internal SqlGuid SqlGuid { get; internal set; }
    internal SqlInt16 SqlInt16 { get; }
    internal SqlInt32 SqlInt32 { get; }
    internal SqlInt64 SqlInt64 { get; }
    internal SqlMoney SqlMoney { get; }
    internal SqlSingle SqlSingle { get; }
    internal SqlString SqlString { get; }
    internal object SqlValue { get; }
    internal object Value { get; }
    private SqlBuffer(SqlBuffer value);
    private static SqlBuffer();
    internal bool get_IsEmpty();
    internal bool get_IsNull();
    internal StorageType get_VariantInternalStorageType();
    internal bool get_Boolean();
    internal void set_Boolean(bool value);
    internal byte get_Byte();
    internal void set_Byte(byte value);
    internal Byte[] get_ByteArray();
    internal DateTime get_DateTime();
    internal decimal get_Decimal();
    internal double get_Double();
    internal void set_Double(double value);
    internal Guid get_Guid();
    internal void set_Guid(Guid value);
    internal short get_Int16();
    internal void set_Int16(short value);
    internal int get_Int32();
    internal void set_Int32(int value);
    internal long get_Int64();
    internal void set_Int64(long value);
    internal float get_Single();
    internal void set_Single(float value);
    internal string get_String();
    internal string get_KatmaiDateTimeString();
    internal SqlString get_KatmaiDateTimeSqlString();
    internal TimeSpan get_Time();
    internal DateTimeOffset get_DateTimeOffset();
    private static long GetTicksFromDateTime2Info(DateTime2Info dateTime2Info);
    internal SqlBinary get_SqlBinary();
    internal void set_SqlBinary(SqlBinary value);
    internal SqlBoolean get_SqlBoolean();
    internal SqlByte get_SqlByte();
    internal SqlCachedBuffer get_SqlCachedBuffer();
    internal void set_SqlCachedBuffer(SqlCachedBuffer value);
    internal SqlXml get_SqlXml();
    internal void set_SqlXml(SqlXml value);
    internal SqlDateTime get_SqlDateTime();
    internal SqlDecimal get_SqlDecimal();
    internal SqlDouble get_SqlDouble();
    internal SqlGuid get_SqlGuid();
    internal void set_SqlGuid(SqlGuid value);
    internal SqlInt16 get_SqlInt16();
    internal SqlInt32 get_SqlInt32();
    internal SqlInt64 get_SqlInt64();
    internal SqlMoney get_SqlMoney();
    internal SqlSingle get_SqlSingle();
    internal SqlString get_SqlString();
    internal object get_SqlValue();
    internal object get_Value();
    internal Type GetTypeFromStorageType(bool isSqlType);
    internal static SqlBuffer[] CreateBufferArray(int length);
    internal static SqlBuffer[] CloneBufferArray(SqlBuffer[] values);
    internal static void Clear(SqlBuffer[] values);
    internal void Clear();
    internal void SetToDateTime(int daypart, int timepart);
    internal void SetToDecimal(byte precision, byte scale, bool positive, Int32[] bits);
    internal void SetToMoney(long value);
    internal void SetToNullOfType(StorageType storageType);
    internal void SetToString(string value);
    internal void SetToDate(ReadOnlySpan`1<byte> bytes);
    internal void SetToTime(ReadOnlySpan`1<byte> bytes, byte scale);
    internal void SetToDateTime2(ReadOnlySpan`1<byte> bytes, byte scale);
    internal void SetToDateTimeOffset(ReadOnlySpan`1<byte> bytes, byte scale);
    private static void FillInTimeInfo(TimeInfo& timeInfo, ReadOnlySpan`1<byte> timeBytes, byte scale);
    private static int GetDateFromByteArray(ReadOnlySpan`1<byte> buf);
    private void ThrowIfNull();
    internal T ByteAs();
    internal T BooleanAs();
    internal T Int32As();
    internal T Int16As();
    internal T Int64As();
    internal T DoubleAs();
    internal T SingleAs();
}
public class System.Data.SqlClient.SqlBulkCopy : object {
    private static int MetaDataResultId;
    private static int CollationResultId;
    private static int CollationId;
    private static int MAX_LENGTH;
    private static int DefaultCommandTimeout;
    private bool _enableStreaming;
    private int _batchSize;
    private bool _ownConnection;
    private SqlBulkCopyOptions _copyOptions;
    private int _timeout;
    private string _destinationTableName;
    private int _rowsCopied;
    private int _notifyAfter;
    private int _rowsUntilNotification;
    private bool _insideRowsCopiedEvent;
    private object _rowSource;
    private SqlDataReader _SqlDataReaderRowSource;
    private DbDataReader _DbDataReaderRowSource;
    private DataTable _dataTableSource;
    private SqlBulkCopyColumnMappingCollection _columnMappings;
    private SqlBulkCopyColumnMappingCollection _localColumnMappings;
    private SqlConnection _connection;
    private SqlTransaction _internalTransaction;
    private SqlTransaction _externalTransaction;
    private ValueSourceType _rowSourceType;
    private DataRow _currentRow;
    private int _currentRowLength;
    private DataRowState _rowStateToSkip;
    private IEnumerator _rowEnumerator;
    private TdsParser _parser;
    private TdsParserStateObject _stateObj;
    private List`1<_ColumnMapping> _sortedColumnMappings;
    private SqlRowsCopiedEventHandler _rowsCopiedEventHandler;
    private int _savedBatchSize;
    private bool _hasMoreRowToCopy;
    private bool _isAsyncBulkCopy;
    private bool _isBulkCopyingInProgress;
    private SyncAsyncLock _parserLock;
    private SourceColumnMetadata[] _currentRowMetadata;
    public int BatchSize { get; public set; }
    public int BulkCopyTimeout { get; public set; }
    public bool EnableStreaming { get; public set; }
    public SqlBulkCopyColumnMappingCollection ColumnMappings { get; }
    public string DestinationTableName { get; public set; }
    public int NotifyAfter { get; public set; }
    internal SqlStatistics Statistics { get; }
    public SqlBulkCopy(SqlConnection connection);
    public SqlBulkCopy(SqlConnection connection, SqlBulkCopyOptions copyOptions, SqlTransaction externalTransaction);
    public SqlBulkCopy(string connectionString);
    public SqlBulkCopy(string connectionString, SqlBulkCopyOptions copyOptions);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public int get_BulkCopyTimeout();
    public void set_BulkCopyTimeout(int value);
    public bool get_EnableStreaming();
    public void set_EnableStreaming(bool value);
    public SqlBulkCopyColumnMappingCollection get_ColumnMappings();
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public int get_NotifyAfter();
    public void set_NotifyAfter(int value);
    public void add_SqlRowsCopied(SqlRowsCopiedEventHandler value);
    public void remove_SqlRowsCopied(SqlRowsCopiedEventHandler value);
    internal SqlStatistics get_Statistics();
    private sealed virtual override void System.IDisposable.Dispose();
    private bool IsCopyOption(SqlBulkCopyOptions copyOption);
    private string CreateInitialQuery();
    private Task`1<BulkCopySimpleResultSet> CreateAndExecuteInitialQueryAsync(BulkCopySimpleResultSet& result);
    private string AnalyzeTargetAndCreateUpdateBulkCommand(BulkCopySimpleResultSet internalResults);
    private Task SubmitUpdateBulkCommand(string TDSCommand);
    private void WriteMetaData(BulkCopySimpleResultSet internalResults);
    public void Close();
    private void Dispose(bool disposing);
    private object GetValueFromSourceRow(int destRowIndex, Boolean& isSqlType, Boolean& isDataFeed, Boolean& isNull);
    private Task ReadFromRowSourceAsync(CancellationToken cts);
    private bool ReadFromRowSource();
    private SourceColumnMetadata GetColumnMetadata(int ordinal);
    private void CreateOrValidateConnection(string method);
    private void RunParser(BulkCopySimpleResultSet bulkCopyHandler);
    private void RunParserReliably(BulkCopySimpleResultSet bulkCopyHandler);
    private void CommitTransaction();
    private void AbortTransaction();
    private void AppendColumnNameAndTypeName(StringBuilder query, string columnName, string typeName);
    private string UnquotedName(string name);
    private object ValidateBulkCopyVariant(object value);
    private object ConvertValue(object value, _SqlMetaData metadata, bool isNull, Boolean& isSqlType, Boolean& coercedToDataFeed);
    public void WriteToServer(DbDataReader reader);
    public void WriteToServer(IDataReader reader);
    public void WriteToServer(DataTable table);
    public void WriteToServer(DataTable table, DataRowState rowState);
    public void WriteToServer(DataRow[] rows);
    public Task WriteToServerAsync(DataRow[] rows);
    public Task WriteToServerAsync(DataRow[] rows, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DbDataReader reader);
    public Task WriteToServerAsync(DbDataReader reader, CancellationToken cancellationToken);
    public Task WriteToServerAsync(IDataReader reader);
    public Task WriteToServerAsync(IDataReader reader, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DataTable table);
    public Task WriteToServerAsync(DataTable table, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DataTable table, DataRowState rowState);
    public Task WriteToServerAsync(DataTable table, DataRowState rowState, CancellationToken cancellationToken);
    private Task WriteRowSourceToServerAsync(int columnCount, CancellationToken ctoken);
    private void WriteRowSourceToServerCommon(int columnCount);
    internal void OnConnectionClosed();
    private void OnRowsCopied(SqlRowsCopiedEventArgs value);
    private bool FireRowsCopiedEvent(long rowsCopied);
    private Task ReadWriteColumnValueAsync(int col);
    private void RegisterForConnectionCloseNotification(Task`1& outerTask);
    private Task CopyColumnsAsync(int col, TaskCompletionSource`1<object> source);
    private void CopyColumnsAsyncSetupContinuation(TaskCompletionSource`1<object> source, Task task, int i);
    private void CheckAndRaiseNotification();
    private Task CheckForCancellation(CancellationToken cts, TaskCompletionSource`1<object> tcs);
    private Task CopyRowsAsync(int rowsSoFar, int totalRows, CancellationToken cts, TaskCompletionSource`1<object> source);
    private Task CopyBatchesAsync(BulkCopySimpleResultSet internalResults, string updateBulkCommandText, CancellationToken cts, TaskCompletionSource`1<object> source);
    private Task CopyBatchesAsyncContinued(BulkCopySimpleResultSet internalResults, string updateBulkCommandText, CancellationToken cts, TaskCompletionSource`1<object> source);
    private Task CopyBatchesAsyncContinuedOnSuccess(BulkCopySimpleResultSet internalResults, string updateBulkCommandText, CancellationToken cts, TaskCompletionSource`1<object> source);
    private void CopyBatchesAsyncContinuedOnError(bool cleanupParser);
    private void CleanUpStateObject(bool isCancelRequested);
    private void WriteToServerInternalRestContinuedAsync(BulkCopySimpleResultSet internalResults, CancellationToken cts, TaskCompletionSource`1<object> source);
    private void WriteToServerInternalRestAsync(CancellationToken cts, TaskCompletionSource`1<object> source);
    private Task WriteToServerInternalAsync(CancellationToken ctoken);
    [CompilerGeneratedAttribute]
private BulkCopySimpleResultSet <CreateAndExecuteInitialQueryAsync>b__71_0(Task t);
    [CompilerGeneratedAttribute]
private void <SubmitUpdateBulkCommand>b__73_0(Task t);
    [CompilerGeneratedAttribute]
private Task`1<bool> <ReadFromRowSourceAsync>b__78_0(Task`1<bool> t);
}
public class System.Data.SqlClient.SqlBulkCopyColumnMapping : object {
    internal string _destinationColumnName;
    internal int _destinationColumnOrdinal;
    internal string _sourceColumnName;
    internal int _sourceColumnOrdinal;
    internal int _internalDestinationColumnOrdinal;
    internal int _internalSourceColumnOrdinal;
    public string DestinationColumn { get; public set; }
    public int DestinationOrdinal { get; public set; }
    public string SourceColumn { get; public set; }
    public int SourceOrdinal { get; public set; }
    public SqlBulkCopyColumnMapping(string sourceColumn, string destinationColumn);
    public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, string destinationColumn);
    public SqlBulkCopyColumnMapping(string sourceColumn, int destinationOrdinal);
    public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, int destinationOrdinal);
    public string get_DestinationColumn();
    public void set_DestinationColumn(string value);
    public int get_DestinationOrdinal();
    public void set_DestinationOrdinal(int value);
    public string get_SourceColumn();
    public void set_SourceColumn(string value);
    public int get_SourceOrdinal();
    public void set_SourceOrdinal(int value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection : CollectionBase {
    private MappingSchema _mappingSchema;
    [CompilerGeneratedAttribute]
private bool <ReadOnly>k__BackingField;
    internal bool ReadOnly { get; internal set; }
    public SqlBulkCopyColumnMapping Item { get; }
    [CompilerGeneratedAttribute]
internal bool get_ReadOnly();
    [CompilerGeneratedAttribute]
internal void set_ReadOnly(bool value);
    public SqlBulkCopyColumnMapping get_Item(int index);
    public SqlBulkCopyColumnMapping Add(SqlBulkCopyColumnMapping bulkCopyColumnMapping);
    public SqlBulkCopyColumnMapping Add(string sourceColumn, string destinationColumn);
    public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, string destinationColumn);
    public SqlBulkCopyColumnMapping Add(string sourceColumn, int destinationColumnIndex);
    public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, int destinationColumnIndex);
    private void AssertWriteAccess();
    public void Clear();
    public bool Contains(SqlBulkCopyColumnMapping value);
    public void CopyTo(SqlBulkCopyColumnMapping[] array, int index);
    internal void CreateDefaultMapping(int columnCount);
    public int IndexOf(SqlBulkCopyColumnMapping value);
    public void Insert(int index, SqlBulkCopyColumnMapping value);
    public void Remove(SqlBulkCopyColumnMapping value);
    public void RemoveAt(int index);
    internal void ValidateCollection();
}
[FlagsAttribute]
public enum System.Data.SqlClient.SqlBulkCopyOptions : Enum {
    public int value__;
    public static SqlBulkCopyOptions Default;
    public static SqlBulkCopyOptions KeepIdentity;
    public static SqlBulkCopyOptions CheckConstraints;
    public static SqlBulkCopyOptions TableLock;
    public static SqlBulkCopyOptions KeepNulls;
    public static SqlBulkCopyOptions FireTriggers;
    public static SqlBulkCopyOptions UseInternalTransaction;
}
internal class System.Data.SqlClient.SqlCachedBuffer : object {
    public static SqlCachedBuffer Null;
    private static int _maxChunkSize;
    private List`1<Byte[]> _cachedBytes;
    internal List`1<Byte[]> CachedBytes { get; }
    public bool IsNull { get; }
    private SqlCachedBuffer(List`1<Byte[]> cachedBytes);
    private static SqlCachedBuffer();
    internal List`1<Byte[]> get_CachedBytes();
    internal static bool TryCreate(SqlMetaDataPriv metadata, TdsParser parser, TdsParserStateObject stateObj, SqlCachedBuffer& buffer);
    private static void AddByteOrderMark(Byte[] byteArr, List`1<Byte[]> cachedBytes);
    internal Stream ToStream();
    public virtual string ToString();
    internal SqlString ToSqlString();
    internal SqlXml ToSqlXml();
    internal XmlReader ToXmlReader();
    public sealed virtual bool get_IsNull();
}
internal class System.Data.SqlClient.SqlCachedStream : Stream {
    private int _currentPosition;
    private int _currentArrayIndex;
    private List`1<Byte[]> _cachedBytes;
    private long _totalLength;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    private long TotalLength { get; }
    internal SqlCachedStream(SqlCachedBuffer sqlBuf);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    private void SetInternalPosition(long lPos, string argumentName);
    private long get_TotalLength();
}
[ExtensionAttribute]
internal static class System.Data.SqlClient.SqlClientDiagnosticListenerExtensions : object {
    public static string DiagnosticListenerName;
    private static string SqlClientPrefix;
    public static string SqlBeforeExecuteCommand;
    public static string SqlAfterExecuteCommand;
    public static string SqlErrorExecuteCommand;
    public static string SqlBeforeOpenConnection;
    public static string SqlAfterOpenConnection;
    public static string SqlErrorOpenConnection;
    public static string SqlBeforeCloseConnection;
    public static string SqlAfterCloseConnection;
    public static string SqlErrorCloseConnection;
    public static string SqlBeforeCommitTransaction;
    public static string SqlAfterCommitTransaction;
    public static string SqlErrorCommitTransaction;
    public static string SqlBeforeRollbackTransaction;
    public static string SqlAfterRollbackTransaction;
    public static string SqlErrorRollbackTransaction;
    [ExtensionAttribute]
public static Guid WriteCommandBefore(DiagnosticListener this, SqlCommand sqlCommand, string operation);
    [ExtensionAttribute]
public static void WriteCommandAfter(DiagnosticListener this, Guid operationId, SqlCommand sqlCommand, string operation);
    [ExtensionAttribute]
public static void WriteCommandError(DiagnosticListener this, Guid operationId, SqlCommand sqlCommand, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteConnectionOpenBefore(DiagnosticListener this, SqlConnection sqlConnection, string operation);
    [ExtensionAttribute]
public static void WriteConnectionOpenAfter(DiagnosticListener this, Guid operationId, SqlConnection sqlConnection, string operation);
    [ExtensionAttribute]
public static void WriteConnectionOpenError(DiagnosticListener this, Guid operationId, SqlConnection sqlConnection, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteConnectionCloseBefore(DiagnosticListener this, SqlConnection sqlConnection, string operation);
    [ExtensionAttribute]
public static void WriteConnectionCloseAfter(DiagnosticListener this, Guid operationId, Guid clientConnectionId, SqlConnection sqlConnection, string operation);
    [ExtensionAttribute]
public static void WriteConnectionCloseError(DiagnosticListener this, Guid operationId, Guid clientConnectionId, SqlConnection sqlConnection, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteTransactionCommitBefore(DiagnosticListener this, IsolationLevel isolationLevel, SqlConnection connection, string operation);
    [ExtensionAttribute]
public static void WriteTransactionCommitAfter(DiagnosticListener this, Guid operationId, IsolationLevel isolationLevel, SqlConnection connection, string operation);
    [ExtensionAttribute]
public static void WriteTransactionCommitError(DiagnosticListener this, Guid operationId, IsolationLevel isolationLevel, SqlConnection connection, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteTransactionRollbackBefore(DiagnosticListener this, IsolationLevel isolationLevel, SqlConnection connection, string transactionName, string operation);
    [ExtensionAttribute]
public static void WriteTransactionRollbackAfter(DiagnosticListener this, Guid operationId, IsolationLevel isolationLevel, SqlConnection connection, string transactionName, string operation);
    [ExtensionAttribute]
public static void WriteTransactionRollbackError(DiagnosticListener this, Guid operationId, IsolationLevel isolationLevel, SqlConnection connection, string transactionName, Exception ex, string operation);
}
public class System.Data.SqlClient.SqlClientFactory : DbProviderFactory {
    public static SqlClientFactory Instance;
    private static SqlClientFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
}
public static class System.Data.SqlClient.SqlClientMetaDataCollectionNames : object {
    public static string Columns;
    public static string Databases;
    public static string ForeignKeys;
    public static string IndexColumns;
    public static string Indexes;
    public static string Parameters;
    public static string ProcedureColumns;
    public static string Procedures;
    public static string Tables;
    public static string UserDefinedTypes;
    public static string Users;
    public static string ViewColumns;
    public static string Views;
    private static SqlClientMetaDataCollectionNames();
}
internal class System.Data.SqlClient.SqlCollation : object {
    private static UInt32 IgnoreCase;
    private static UInt32 IgnoreNonSpace;
    private static UInt32 IgnoreWidth;
    private static UInt32 IgnoreKanaType;
    private static UInt32 BinarySort;
    internal static UInt32 MaskLcid;
    private static int LcidVersionBitOffset;
    private static UInt32 MaskLcidVersion;
    private static UInt32 MaskCompareOpt;
    internal UInt32 info;
    internal byte sortId;
    internal int LCID { get; internal set; }
    internal SqlCompareOptions SqlCompareOptions { get; internal set; }
    private static int FirstSupportedCollationVersion(int lcid);
    internal int get_LCID();
    internal void set_LCID(int value);
    internal SqlCompareOptions get_SqlCompareOptions();
    internal void set_SqlCompareOptions(SqlCompareOptions value);
    internal static bool AreSame(SqlCollation a, SqlCollation b);
}
public class System.Data.SqlClient.SqlCommand : DbCommand {
    private string _commandText;
    private CommandType _commandType;
    private int _commandTimeout;
    private UpdateRowSource _updatedRowSource;
    private bool _designTimeInvisible;
    internal SqlDependency _sqlDep;
    private static DiagnosticListener _diagnosticListener;
    private bool _parentOperationStarted;
    private static object s_cachedInvalidPrepareHandle;
    private bool _inPrepare;
    private object _prepareHandle;
    private bool _hiddenPrepare;
    private int _preparedConnectionCloseCount;
    private int _preparedConnectionReconnectCount;
    private SqlParameterCollection _parameters;
    private SqlConnection _activeConnection;
    private bool _dirty;
    private EXECTYPE _execType;
    private _SqlRPC[] _rpcArrayOf1;
    private _SqlMetaDataSet _cachedMetaData;
    private TaskCompletionSource`1<object> _reconnectionCompletionSource;
    private CachedAsyncState _cachedAsyncState;
    internal int _rowsAffected;
    private SqlNotificationRequest _notification;
    private SqlTransaction _transaction;
    private StatementCompletedEventHandler _statementCompletedEventHandler;
    private TdsParserStateObject _stateObj;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _pendingCancel;
    private bool _batchRPCMode;
    private List`1<_SqlRPC> _RPCList;
    private _SqlRPC[] _SqlRPCBatchArray;
    private List`1<SqlParameterCollection> _parameterCollectionList;
    private int _currentlyExecutingBatch;
    internal static String[] PreKatmaiProcParamsNames;
    internal static String[] KatmaiProcParamsNames;
    internal bool InPrepare { get; }
    private CachedAsyncState cachedAsyncState { get; }
    public SqlConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    private SqlInternalConnectionTds InternalTdsConnection { get; }
    public SqlNotificationRequest Notification { get; public set; }
    internal SqlStatistics Statistics { get; }
    public SqlTransaction Transaction { get; public set; }
    protected DbTransaction DbTransaction { get; protected set; }
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public bool DesignTimeVisible { get; public set; }
    public SqlParameterCollection Parameters { get; }
    protected DbParameterCollection DbParameterCollection { get; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    internal _SqlMetaDataSet MetaData { get; }
    internal TdsParserStateObject StateObject { get; }
    private bool IsPrepared { get; }
    private bool IsUserPrepared { get; }
    internal bool IsDirty { get; internal set; }
    internal int InternalRecordsAffected { get; internal set; }
    internal bool BatchRPCMode { get; internal set; }
    public SqlCommand(string cmdText);
    public SqlCommand(string cmdText, SqlConnection connection);
    public SqlCommand(string cmdText, SqlConnection connection, SqlTransaction transaction);
    private SqlCommand(SqlCommand from);
    private static SqlCommand();
    internal bool get_InPrepare();
    private CachedAsyncState get_cachedAsyncState();
    public SqlConnection get_Connection();
    public void set_Connection(SqlConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    private SqlInternalConnectionTds get_InternalTdsConnection();
    public SqlNotificationRequest get_Notification();
    public void set_Notification(SqlNotificationRequest value);
    internal SqlStatistics get_Statistics();
    public SqlTransaction get_Transaction();
    public void set_Transaction(SqlTransaction value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public void ResetCommandTimeout();
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public SqlParameterCollection get_Parameters();
    protected virtual DbParameterCollection get_DbParameterCollection();
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public void add_StatementCompleted(StatementCompletedEventHandler value);
    public void remove_StatementCompleted(StatementCompletedEventHandler value);
    internal void OnStatementCompleted(int recordCount);
    private void PropertyChanging();
    public virtual void Prepare();
    private void InternalPrepare();
    internal void Unprepare();
    public virtual void Cancel();
    public SqlParameter CreateParameter();
    protected virtual DbParameter CreateDbParameter();
    protected virtual void Dispose(bool disposing);
    public virtual object ExecuteScalar();
    private object CompleteExecuteScalar(SqlDataReader ds, bool returnSqlValue);
    public virtual int ExecuteNonQuery();
    public IAsyncResult BeginExecuteNonQuery();
    public IAsyncResult BeginExecuteNonQuery(AsyncCallback callback, object stateObject);
    private void BeginExecuteNonQueryInternalReadStage(TaskCompletionSource`1<object> completion);
    private void VerifyEndExecuteState(Task completionTask, string endMethod);
    private void WaitForAsyncResults(IAsyncResult asyncResult);
    private void ThrowIfReconnectionHasBeenCanceled();
    public int EndExecuteNonQuery(IAsyncResult asyncResult);
    private int EndExecuteNonQueryInternal(IAsyncResult asyncResult);
    private Task InternalExecuteNonQuery(TaskCompletionSource`1<object> completion, bool sendToPipe, int timeout, bool asyncWrite, string methodName);
    public XmlReader ExecuteXmlReader();
    public IAsyncResult BeginExecuteXmlReader();
    public IAsyncResult BeginExecuteXmlReader(AsyncCallback callback, object stateObject);
    private void BeginExecuteXmlReaderInternalReadStage(TaskCompletionSource`1<object> completion);
    public XmlReader EndExecuteXmlReader(IAsyncResult asyncResult);
    private XmlReader EndExecuteXmlReaderInternal(IAsyncResult asyncResult);
    private XmlReader CompleteXmlReader(SqlDataReader ds, bool async);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public SqlDataReader ExecuteReader();
    public SqlDataReader ExecuteReader(CommandBehavior behavior);
    public SqlDataReader EndExecuteReader(IAsyncResult asyncResult);
    private SqlDataReader EndExecuteReaderInternal(IAsyncResult asyncResult);
    public IAsyncResult BeginExecuteReader();
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject);
    public IAsyncResult BeginExecuteReader(CommandBehavior behavior);
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject, CommandBehavior behavior);
    private void BeginExecuteReaderInternalReadStage(TaskCompletionSource`1<object> completion);
    private SqlDataReader InternalEndExecuteReader(IAsyncResult asyncResult, string endMethod);
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<SqlDataReader> ExecuteReaderAsync();
    public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    public Task`1<SqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public Task`1<XmlReader> ExecuteXmlReaderAsync();
    public Task`1<XmlReader> ExecuteXmlReaderAsync(CancellationToken cancellationToken);
    private static string UnquoteProcedurePart(string part);
    private static string UnquoteProcedureName(string name, Object& groupNumber);
    internal void DeriveParameters();
    private ParameterDirection ParameterDirectionFromOleDbDirection(short oledbDirection);
    internal _SqlMetaDataSet get_MetaData();
    private void CheckNotificationStateAndAutoEnlist();
    private Task RunExecuteNonQueryTds(string methodName, bool async, int timeout, bool asyncWrite);
    private void RunExecuteNonQueryTdsSetupReconnnectContinuation(string methodName, bool async, int timeout, bool asyncWrite, Task reconnectTask, long reconnectionStart, TaskCompletionSource`1<object> completion);
    internal SqlDataReader RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, string method);
    internal SqlDataReader RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, TaskCompletionSource`1<object> completion, int timeout, Task& task, bool asyncWrite, string method);
    private SqlDataReader RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, bool async, int timeout, Task& task, bool asyncWrite, SqlDataReader ds);
    private Task RunExecuteReaderTdsSetupContinuation(RunBehavior runBehavior, SqlDataReader ds, string optionSettings, Task writeTask);
    private void RunExecuteReaderTdsSetupReconnectContinuation(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, bool async, int timeout, bool asyncWrite, SqlDataReader ds, Task reconnectTask, long reconnectionStart, TaskCompletionSource`1<object> completion);
    private SqlDataReader CompleteAsyncExecuteReader();
    private void FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, string resetOptionsString);
    private void RegisterForConnectionCloseNotification(Task`1& outerTask);
    private void ValidateCommand(bool async, string method);
    private void ValidateAsyncCommand();
    private void GetStateObject(TdsParser parser);
    private void ReliablePutStateObject();
    private void PutStateObject();
    internal void OnDoneProc();
    internal void OnReturnStatus(int status);
    internal void OnReturnValue(SqlReturnValue rec, TdsParserStateObject stateObj);
    private SqlParameterCollection GetCurrentParameterCollection();
    private SqlParameter GetParameterForOutputValueExtraction(SqlParameterCollection parameters, string paramName, int paramCount);
    private void GetRPCObject(int systemParamCount, int userParamCount, _SqlRPC& rpc);
    private void SetUpRPCParameters(_SqlRPC rpc, bool inSchema, SqlParameterCollection parameters);
    private _SqlRPC BuildPrepExec(CommandBehavior behavior);
    private static bool ShouldSendParameter(SqlParameter p);
    private int CountSendableParameters(SqlParameterCollection parameters);
    private int GetParameterCount(SqlParameterCollection parameters);
    private void BuildRPC(bool inSchema, SqlParameterCollection parameters, _SqlRPC& rpc);
    private _SqlRPC BuildExecute(bool inSchema);
    private void BuildExecuteSql(CommandBehavior behavior, string commandText, SqlParameterCollection parameters, _SqlRPC& rpc);
    internal string BuildParamList(TdsParser parser, SqlParameterCollection parameters);
    private static string ParseAndQuoteIdentifier(string identifier, bool isUdtTypeName);
    private static string QuoteIdentifier(ReadOnlySpan`1<string> strings);
    private string GetSetOptionsString(CommandBehavior behavior);
    private string GetResetOptionsString(CommandBehavior behavior);
    private string GetCommandText(CommandBehavior behavior);
    internal void CheckThrowSNIException();
    internal void OnConnectionClosed();
    internal TdsParserStateObject get_StateObject();
    private bool get_IsPrepared();
    private bool get_IsUserPrepared();
    internal bool get_IsDirty();
    internal void set_IsDirty(bool value);
    internal int get_InternalRecordsAffected();
    internal void set_InternalRecordsAffected(int value);
    internal void ClearBatchCommand();
    internal bool get_BatchRPCMode();
    internal void set_BatchRPCMode(bool value);
    internal void AddBatchCommand(string commandText, SqlParameterCollection parameters, CommandType cmdType);
    internal int ExecuteBatchRPCCommand();
    internal Nullable`1<int> GetRecordsAffected(int commandIndex);
    internal SqlException GetErrors(int commandIndex);
    internal void CancelIgnoreFailure();
    private void NotifyDependency();
    private sealed virtual override object System.ICloneable.Clone();
    public SqlCommand Clone();
}
public class System.Data.SqlClient.SqlCommandBuilder : DbCommandBuilder {
    public CatalogLocation CatalogLocation { get; public set; }
    public string CatalogSeparator { get; public set; }
    public SqlDataAdapter DataAdapter { get; public set; }
    public string QuotePrefix { get; public set; }
    public string QuoteSuffix { get; public set; }
    public string SchemaSeparator { get; public set; }
    public SqlCommandBuilder(SqlDataAdapter adapter);
    public virtual CatalogLocation get_CatalogLocation();
    public virtual void set_CatalogLocation(CatalogLocation value);
    public virtual string get_CatalogSeparator();
    public virtual void set_CatalogSeparator(string value);
    public SqlDataAdapter get_DataAdapter();
    public void set_DataAdapter(SqlDataAdapter value);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public virtual string get_SchemaSeparator();
    public virtual void set_SchemaSeparator(string value);
    private void SqlRowUpdatingHandler(object sender, SqlRowUpdatingEventArgs ruevent);
    public SqlCommand GetInsertCommand();
    public SqlCommand GetInsertCommand(bool useColumnsForParameterNames);
    public SqlCommand GetUpdateCommand();
    public SqlCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public SqlCommand GetDeleteCommand();
    public SqlCommand GetDeleteCommand(bool useColumnsForParameterNames);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    private void ConsistentQuoteDelimiters(string quotePrefix, string quoteSuffix);
    public static void DeriveParameters(SqlCommand command);
    protected virtual DataTable GetSchemaTable(DbCommand srcCommand);
    protected virtual DbCommand InitializeCommand(DbCommand command);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
}
internal class System.Data.SqlClient.SqlCommandSet : object {
    private static string SqlIdentifierPattern;
    private static Regex s_sqlIdentifierParser;
    private List`1<LocalCommand> _commandList;
    private SqlCommand _batchCommand;
    private SqlCommand BatchCommand { get; }
    internal int CommandCount { get; }
    private List`1<LocalCommand> CommandList { get; }
    unknown int CommandTimeout {internal set; }
    internal SqlConnection Connection { get; internal set; }
    unknown SqlTransaction Transaction {internal set; }
    private static SqlCommandSet();
    private SqlCommand get_BatchCommand();
    internal int get_CommandCount();
    private List`1<LocalCommand> get_CommandList();
    internal void set_CommandTimeout(int value);
    internal SqlConnection get_Connection();
    internal void set_Connection(SqlConnection value);
    internal void set_Transaction(SqlTransaction value);
    internal void Append(SqlCommand command);
    internal static void BuildStoredProcedureName(StringBuilder builder, string part);
    internal void Clear();
    internal void Dispose();
    internal int ExecuteNonQuery();
    internal SqlParameter GetParameter(int commandIndex, int parameterIndex);
    internal bool GetBatchedAffected(int commandIdentifier, Int32& recordsAffected, Exception& error);
    internal int GetParameterCount(int commandIndex);
    private void ValidateCommandBehavior(string method, CommandBehavior behavior);
}
public class System.Data.SqlClient.SqlConnection : DbConnection {
    private bool _AsyncCommandInProgress;
    internal SqlStatistics _statistics;
    private bool _collectstats;
    private bool _fireInfoMessageEventOnUserErrors;
    private Tuple`2<TaskCompletionSource`1<DbConnectionInternal>, Task> _currentCompletion;
    private SqlCredential _credential;
    private string _connectionString;
    private int _connectRetryCount;
    private string _accessToken;
    private object _reconnectLock;
    internal Task _currentReconnectionTask;
    private Task _asyncWaitingForReconnection;
    private Guid _originalConnectionId;
    private CancellationTokenSource _reconnectionCancellationSource;
    internal SessionData _recoverySessionData;
    internal bool _suppressStateChangeForReconnection;
    private int _reconnectCount;
    private static DiagnosticListener s_diagnosticListener;
    internal bool _applyTransientFaultHandling;
    [CompilerGeneratedAttribute]
private SqlInfoMessageEventHandler InfoMessage;
    [CompilerGeneratedAttribute]
private bool <ForceNewConnection>k__BackingField;
    private static DbConnectionFactory s_connectionFactory;
    private DbConnectionOptions _userConnectionOptions;
    private DbConnectionPoolGroup _poolGroup;
    private DbConnectionInternal _innerConnection;
    private int _closeCount;
    public bool StatisticsEnabled { get; public set; }
    internal bool AsyncCommandInProgress { get; internal set; }
    internal TransactionBindingEnum TransactionBinding { get; }
    internal TypeSystem TypeSystem { get; }
    internal Version TypeSystemAssemblyVersion { get; }
    internal int ConnectRetryInterval { get; }
    public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public string AccessToken { get; public set; }
    public string Database { get; }
    public string DataSource { get; }
    public int PacketSize { get; }
    public Guid ClientConnectionId { get; }
    public string ServerVersion { get; }
    public ConnectionState State { get; }
    internal SqlStatistics Statistics { get; }
    public string WorkstationId { get; }
    public SqlCredential Credential { get; public set; }
    protected DbProviderFactory DbProviderFactory { get; }
    public bool FireInfoMessageEventOnUserErrors { get; public set; }
    internal int ReconnectCount { get; }
    internal bool ForceNewConnection { get; internal set; }
    internal bool HasLocalTransaction { get; }
    internal bool HasLocalTransactionFromAPI { get; }
    internal bool IsKatmaiOrNewer { get; }
    internal TdsParser Parser { get; }
    internal int CloseCount { get; }
    internal DbConnectionFactory ConnectionFactory { get; }
    internal DbConnectionOptions ConnectionOptions { get; }
    internal DbConnectionInternal InnerConnection { get; }
    internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    internal DbConnectionOptions UserConnectionOptions { get; }
    public SqlConnection(string connectionString);
    public SqlConnection(string connectionString, SqlCredential credential);
    private SqlConnection(SqlConnection connection);
    private static SqlConnection();
    private void CacheConnectionStringProperties();
    public bool get_StatisticsEnabled();
    public void set_StatisticsEnabled(bool value);
    internal bool get_AsyncCommandInProgress();
    internal void set_AsyncCommandInProgress(bool value);
    private bool UsesIntegratedSecurity(SqlConnectionString opt);
    private bool UsesClearUserIdOrPassword(SqlConnectionString opt);
    internal TransactionBindingEnum get_TransactionBinding();
    internal TypeSystem get_TypeSystem();
    internal Version get_TypeSystemAssemblyVersion();
    internal int get_ConnectRetryInterval();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public string get_AccessToken();
    public void set_AccessToken(string value);
    public virtual string get_Database();
    public virtual string get_DataSource();
    public int get_PacketSize();
    public Guid get_ClientConnectionId();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    internal SqlStatistics get_Statistics();
    public string get_WorkstationId();
    public SqlCredential get_Credential();
    public void set_Credential(SqlCredential value);
    private void CheckAndThrowOnInvalidCombinationOfConnectionStringAndSqlCredential(SqlConnectionString connectionOptions);
    private void CheckAndThrowOnInvalidCombinationOfConnectionOptionAndAccessToken(SqlConnectionString connectionOptions);
    protected virtual DbProviderFactory get_DbProviderFactory();
    [CompilerGeneratedAttribute]
public void add_InfoMessage(SqlInfoMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_InfoMessage(SqlInfoMessageEventHandler value);
    public bool get_FireInfoMessageEventOnUserErrors();
    public void set_FireInfoMessageEventOnUserErrors(bool value);
    internal int get_ReconnectCount();
    [CompilerGeneratedAttribute]
internal bool get_ForceNewConnection();
    [CompilerGeneratedAttribute]
internal void set_ForceNewConnection(bool value);
    protected virtual void OnStateChange(StateChangeEventArgs stateChange);
    public SqlTransaction BeginTransaction();
    public SqlTransaction BeginTransaction(IsolationLevel iso);
    public SqlTransaction BeginTransaction(string transactionName);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public SqlTransaction BeginTransaction(IsolationLevel iso, string transactionName);
    public virtual void ChangeDatabase(string database);
    public static void ClearAllPools();
    public static void ClearPool(SqlConnection connection);
    private void CloseInnerConnection();
    public virtual void Close();
    public SqlCommand CreateCommand();
    private void DisposeMe(bool disposing);
    public virtual void Open();
    internal void RegisterWaitingForReconnect(Task waitingTask);
    [AsyncStateMachineAttribute("System.Data.SqlClient.SqlConnection/<ReconnectAsync>d__97")]
private Task ReconnectAsync(int timeout);
    internal Task ValidateAndReconnect(Action beforeDisconnect, int timeout);
    private void WaitForPendingReconnection();
    private void CancelOpenAndWait();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    private void PrepareStatisticsForNewConnection();
    private bool TryOpen(TaskCompletionSource`1<DbConnectionInternal> retry);
    internal bool get_HasLocalTransaction();
    internal bool get_HasLocalTransactionFromAPI();
    internal bool get_IsKatmaiOrNewer();
    internal TdsParser get_Parser();
    internal void ValidateConnectionForExecute(string method, SqlCommand command);
    internal static string FixupDatabaseTransactionName(string name);
    internal void OnError(SqlException exception, bool breakConnection, Action`1<Action> wrapCloseInAction);
    internal SqlInternalConnectionTds GetOpenTdsConnection();
    internal SqlInternalConnectionTds GetOpenTdsConnection(string method);
    internal void OnInfoMessage(SqlInfoMessageEventArgs imevent);
    internal void OnInfoMessage(SqlInfoMessageEventArgs imevent, Boolean& notified);
    public static void ChangePassword(string connectionString, string newPassword);
    public static void ChangePassword(string connectionString, SqlCredential credential, SecureString newSecurePassword);
    private static void ChangePassword(string connectionString, SqlConnectionString connectionOptions, SqlCredential credential, string newPassword, SecureString newSecurePassword);
    internal void RegisterForConnectionCloseNotification(Task`1& outerTask, object value, int tag);
    public void ResetStatistics();
    public IDictionary RetrieveStatistics();
    private void UpdateStatistics();
    private sealed virtual override object System.ICloneable.Clone();
    private void CopyFrom(SqlConnection connection);
    private Assembly ResolveTypeAssembly(AssemblyName asmRef, bool throwOnError);
    internal void CheckGetExtendedUDTInfo(SqlMetaDataPriv metaData, bool fThrow);
    internal object GetUdtValue(object value, SqlMetaDataPriv metaData, bool returnDBNull);
    internal Byte[] GetBytes(object o);
    internal Byte[] GetBytes(object o, Format& format, Int32& maxSize);
    private SqlUdtInfo GetInfoFromType(Type t);
    internal int get_CloseCount();
    internal DbConnectionFactory get_ConnectionFactory();
    internal DbConnectionOptions get_ConnectionOptions();
    private string ConnectionString_Get();
    private void ConnectionString_Set(DbConnectionPoolKey key);
    internal DbConnectionInternal get_InnerConnection();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
    internal DbConnectionOptions get_UserConnectionOptions();
    internal void Abort(Exception e);
    internal void AddWeakReference(object value, int tag);
    protected virtual DbCommand CreateDbCommand();
    protected virtual void Dispose(bool disposing);
    private void RepairInnerConnection();
    public virtual void EnlistTransaction(Transaction transaction);
    internal void NotifyWeakReference(int message);
    internal void PermissionDemand();
    internal void RemoveWeakReference(object value);
    internal void SetInnerConnectionEvent(DbConnectionInternal to);
    internal bool SetInnerConnectionFrom(DbConnectionInternal to, DbConnectionInternal from);
    internal void SetInnerConnectionTo(DbConnectionInternal to);
    [CompilerGeneratedAttribute]
private Task <ValidateAndReconnect>b__98_0(object state);
}
internal class System.Data.SqlClient.SqlConnectionFactory : DbConnectionFactory {
    private static string _metaDataXml;
    public static SqlConnectionFactory SingletonInstance;
    public DbProviderFactory ProviderFactory { get; }
    private static SqlConnectionFactory();
    public virtual DbProviderFactory get_ProviderFactory();
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection);
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions);
    protected virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    internal virtual DbConnectionPoolProviderInfo CreateConnectionPoolProviderInfo(DbConnectionOptions connectionOptions);
    protected virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions connectionOptions);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    internal static SqlConnectionString FindSqlConnectionOptions(SqlConnectionPoolKey key);
    internal virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal virtual DbConnectionInternal GetInnerConnection(DbConnection connection);
    internal virtual void PermissionDemand(DbConnection outerConnection);
    internal virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
    protected virtual DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory);
}
internal enum System.Data.SqlClient.SqlConnectionInternalSourceType : Enum {
    public int value__;
    public static SqlConnectionInternalSourceType Principle;
    public static SqlConnectionInternalSourceType Failover;
    public static SqlConnectionInternalSourceType RoutingDestination;
}
internal class System.Data.SqlClient.SqlConnectionPoolGroupProviderInfo : DbConnectionPoolGroupProviderInfo {
    private string _alias;
    private string _failoverPartner;
    private bool _useFailoverPartner;
    internal string FailoverPartner { get; }
    internal bool UseFailoverPartner { get; }
    internal SqlConnectionPoolGroupProviderInfo(SqlConnectionString connectionOptions);
    internal string get_FailoverPartner();
    internal bool get_UseFailoverPartner();
    internal void AliasCheck(string server);
    internal void FailoverCheck(SqlInternalConnection connection, bool actualUseFailoverPartner, SqlConnectionString userConnectionOptions, string actualFailoverPartner);
}
internal class System.Data.SqlClient.SqlConnectionPoolKey : DbConnectionPoolKey {
    private int _hashValue;
    private SqlCredential _credential;
    private string _accessToken;
    internal string ConnectionString { get; internal set; }
    internal SqlCredential Credential { get; }
    internal string AccessToken { get; }
    internal SqlConnectionPoolKey(string connectionString, SqlCredential credential, string accessToken);
    private SqlConnectionPoolKey(SqlConnectionPoolKey key);
    public virtual object Clone();
    internal virtual string get_ConnectionString();
    internal virtual void set_ConnectionString(string value);
    internal SqlCredential get_Credential();
    internal string get_AccessToken();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private void CalculateHashCode();
}
internal class System.Data.SqlClient.SqlConnectionPoolProviderInfo : DbConnectionPoolProviderInfo {
    private string _instanceName;
    internal string InstanceName { get; internal set; }
    internal string get_InstanceName();
    internal void set_InstanceName(string value);
}
internal class System.Data.SqlClient.SqlConnectionString : DbConnectionOptions {
    internal static int SynonymCount;
    internal static int DeprecatedSynonymCount;
    private static Dictionary`2<string, string> s_sqlClientSynonyms;
    private bool _integratedSecurity;
    private bool _encrypt;
    private bool _trustServerCertificate;
    private bool _enlist;
    private bool _mars;
    private bool _persistSecurityInfo;
    private bool _pooling;
    private bool _replication;
    private bool _userInstance;
    private bool _multiSubnetFailover;
    private int _connectTimeout;
    private int _loadBalanceTimeout;
    private int _maxPoolSize;
    private int _minPoolSize;
    private int _packetSize;
    private int _connectRetryCount;
    private int _connectRetryInterval;
    private ApplicationIntent _applicationIntent;
    private string _applicationName;
    private string _attachDBFileName;
    private string _currentLanguage;
    private string _dataSource;
    private string _localDBInstance;
    private string _failoverPartner;
    private string _initialCatalog;
    private string _password;
    private string _userID;
    private string _workstationId;
    private TransactionBindingEnum _transactionBinding;
    private TypeSystem _typeSystemVersion;
    private Version _typeSystemAssemblyVersion;
    private static Version constTypeSystemAsmVersion10;
    private static Version constTypeSystemAsmVersion11;
    private PoolBlockingPeriod _poolBlockingPeriod;
    internal bool IntegratedSecurity { get; }
    internal bool Asynchronous { get; }
    internal bool ConnectionReset { get; }
    internal bool Encrypt { get; }
    internal bool TrustServerCertificate { get; }
    internal bool Enlist { get; }
    internal bool MARS { get; }
    internal bool MultiSubnetFailover { get; }
    internal bool PersistSecurityInfo { get; }
    internal bool Pooling { get; }
    internal bool Replication { get; }
    internal bool UserInstance { get; }
    internal int ConnectTimeout { get; }
    internal int LoadBalanceTimeout { get; }
    internal int MaxPoolSize { get; }
    internal int MinPoolSize { get; }
    internal int PacketSize { get; }
    internal int ConnectRetryCount { get; }
    internal int ConnectRetryInterval { get; }
    internal ApplicationIntent ApplicationIntent { get; }
    internal string ApplicationName { get; }
    internal string AttachDBFilename { get; }
    internal string CurrentLanguage { get; }
    internal string DataSource { get; }
    internal string LocalDBInstance { get; }
    internal string FailoverPartner { get; }
    internal string InitialCatalog { get; }
    internal string Password { get; }
    internal string UserID { get; }
    internal string WorkstationId { get; }
    internal TypeSystem TypeSystemVersion { get; }
    internal Version TypeSystemAssemblyVersion { get; }
    internal TransactionBindingEnum TransactionBinding { get; }
    internal PoolBlockingPeriod PoolBlockingPeriod { get; }
    internal SqlConnectionString(string connectionString);
    internal SqlConnectionString(SqlConnectionString connectionOptions, string dataSource, bool userInstance, Nullable`1<bool> setEnlistValue);
    private static SqlConnectionString();
    internal bool get_IntegratedSecurity();
    internal bool get_Asynchronous();
    internal bool get_ConnectionReset();
    internal bool get_Encrypt();
    internal bool get_TrustServerCertificate();
    internal bool get_Enlist();
    internal bool get_MARS();
    internal bool get_MultiSubnetFailover();
    internal bool get_PersistSecurityInfo();
    internal bool get_Pooling();
    internal bool get_Replication();
    internal bool get_UserInstance();
    internal int get_ConnectTimeout();
    internal int get_LoadBalanceTimeout();
    internal int get_MaxPoolSize();
    internal int get_MinPoolSize();
    internal int get_PacketSize();
    internal int get_ConnectRetryCount();
    internal int get_ConnectRetryInterval();
    internal ApplicationIntent get_ApplicationIntent();
    internal string get_ApplicationName();
    internal string get_AttachDBFilename();
    internal string get_CurrentLanguage();
    internal string get_DataSource();
    internal string get_LocalDBInstance();
    internal string get_FailoverPartner();
    internal string get_InitialCatalog();
    internal string get_Password();
    internal string get_UserID();
    internal string get_WorkstationId();
    internal TypeSystem get_TypeSystemVersion();
    internal Version get_TypeSystemAssemblyVersion();
    internal TransactionBindingEnum get_TransactionBinding();
    internal static Dictionary`2<string, string> GetParseSynonyms();
    internal string ObtainWorkstationId();
    private void ValidateValueLength(string value, int limit, string key);
    internal ApplicationIntent ConvertValueToApplicationIntent();
    internal void ThrowUnsupportedIfKeywordSet(string keyword);
    internal PoolBlockingPeriod get_PoolBlockingPeriod();
    internal PoolBlockingPeriod ConvertValueToPoolBlockingPeriod();
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlClient.SqlConnectionStringBuilder : DbConnectionStringBuilder {
    internal static int KeywordsCount;
    internal static int DeprecatedKeywordsCount;
    private static String[] s_validKeywords;
    private static Dictionary`2<string, Keywords> s_keywords;
    private ApplicationIntent _applicationIntent;
    private string _applicationName;
    private string _attachDBFilename;
    private string _currentLanguage;
    private string _dataSource;
    private string _failoverPartner;
    private string _initialCatalog;
    private string _password;
    private string _transactionBinding;
    private string _typeSystemVersion;
    private string _userID;
    private string _workstationID;
    private int _connectTimeout;
    private int _loadBalanceTimeout;
    private int _maxPoolSize;
    private int _minPoolSize;
    private int _packetSize;
    private int _connectRetryCount;
    private int _connectRetryInterval;
    private bool _encrypt;
    private bool _trustServerCertificate;
    private bool _enlist;
    private bool _integratedSecurity;
    private bool _multipleActiveResultSets;
    private bool _multiSubnetFailover;
    private bool _persistSecurityInfo;
    private bool _pooling;
    private bool _replication;
    private bool _userInstance;
    private static String[] s_notSupportedKeywords;
    private static String[] s_notSupportedNetworkLibraryKeywords;
    private PoolBlockingPeriod _poolBlockingPeriod;
    public object Item { get; public set; }
    public ApplicationIntent ApplicationIntent { get; public set; }
    public string ApplicationName { get; public set; }
    public string AttachDBFilename { get; public set; }
    public int ConnectTimeout { get; public set; }
    public string CurrentLanguage { get; public set; }
    public string DataSource { get; public set; }
    public bool Encrypt { get; public set; }
    public bool TrustServerCertificate { get; public set; }
    public bool Enlist { get; public set; }
    public string FailoverPartner { get; public set; }
    [TypeConverterAttribute("System.Data.SqlClient.SqlConnectionStringBuilder/SqlInitialCatalogConverter")]
public string InitialCatalog { get; public set; }
    public bool IntegratedSecurity { get; public set; }
    public int LoadBalanceTimeout { get; public set; }
    public int MaxPoolSize { get; public set; }
    public int ConnectRetryCount { get; public set; }
    public int ConnectRetryInterval { get; public set; }
    public int MinPoolSize { get; public set; }
    public bool MultipleActiveResultSets { get; public set; }
    public bool MultiSubnetFailover { get; public set; }
    public int PacketSize { get; public set; }
    public string Password { get; public set; }
    public bool PersistSecurityInfo { get; public set; }
    public bool Pooling { get; public set; }
    public bool Replication { get; public set; }
    public string TransactionBinding { get; public set; }
    public string TypeSystemVersion { get; public set; }
    public string UserID { get; public set; }
    public bool UserInstance { get; public set; }
    public string WorkstationID { get; public set; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public PoolBlockingPeriod PoolBlockingPeriod { get; public set; }
    public SqlConnectionStringBuilder(string connectionString);
    private static SqlConnectionStringBuilder();
    private static String[] CreateValidKeywords();
    private static Dictionary`2<string, Keywords> CreateKeywordsDictionary();
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public ApplicationIntent get_ApplicationIntent();
    public void set_ApplicationIntent(ApplicationIntent value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_AttachDBFilename();
    public void set_AttachDBFilename(string value);
    public int get_ConnectTimeout();
    public void set_ConnectTimeout(int value);
    public string get_CurrentLanguage();
    public void set_CurrentLanguage(string value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public bool get_Encrypt();
    public void set_Encrypt(bool value);
    public bool get_TrustServerCertificate();
    public void set_TrustServerCertificate(bool value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public string get_FailoverPartner();
    public void set_FailoverPartner(string value);
    public string get_InitialCatalog();
    public void set_InitialCatalog(string value);
    public bool get_IntegratedSecurity();
    public void set_IntegratedSecurity(bool value);
    public int get_LoadBalanceTimeout();
    public void set_LoadBalanceTimeout(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_ConnectRetryCount();
    public void set_ConnectRetryCount(int value);
    public int get_ConnectRetryInterval();
    public void set_ConnectRetryInterval(int value);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public bool get_MultipleActiveResultSets();
    public void set_MultipleActiveResultSets(bool value);
    public bool get_MultiSubnetFailover();
    public void set_MultiSubnetFailover(bool value);
    public int get_PacketSize();
    public void set_PacketSize(int value);
    public string get_Password();
    public void set_Password(string value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public bool get_Replication();
    public void set_Replication(bool value);
    public string get_TransactionBinding();
    public void set_TransactionBinding(string value);
    public string get_TypeSystemVersion();
    public void set_TypeSystemVersion(string value);
    public string get_UserID();
    public void set_UserID(string value);
    public bool get_UserInstance();
    public void set_UserInstance(bool value);
    public string get_WorkstationID();
    public void set_WorkstationID(string value);
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    private static bool ConvertToBoolean(object value);
    private static int ConvertToInt32(object value);
    private static bool ConvertToIntegratedSecurity(object value);
    private static string ConvertToString(object value);
    private static ApplicationIntent ConvertToApplicationIntent(string keyword, object value);
    private object GetAt(Keywords index);
    private Keywords GetIndex(string keyword);
    public virtual bool Remove(string keyword);
    private void Reset(Keywords index);
    private void SetValue(string keyword, bool value);
    private void SetValue(string keyword, int value);
    private void SetValue(string keyword, string value);
    private void SetApplicationIntentValue(ApplicationIntent value);
    public virtual bool ShouldSerialize(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
    private Exception UnsupportedKeyword(string keyword);
    private void SetPoolBlockingPeriodValue(PoolBlockingPeriod value);
    private static PoolBlockingPeriod ConvertToPoolBlockingPeriod(string keyword, object value);
    public PoolBlockingPeriod get_PoolBlockingPeriod();
    public void set_PoolBlockingPeriod(PoolBlockingPeriod value);
}
internal class System.Data.SqlClient.SqlConnectionTimeoutErrorInternal : object {
    private SqlConnectionTimeoutPhaseDuration[] _phaseDurations;
    private SqlConnectionTimeoutPhaseDuration[] _originalPhaseDurations;
    private SqlConnectionTimeoutErrorPhase _currentPhase;
    private SqlConnectionInternalSourceType _currentSourceType;
    private bool _isFailoverScenario;
    internal SqlConnectionTimeoutErrorPhase CurrentPhase { get; }
    internal SqlConnectionTimeoutErrorPhase get_CurrentPhase();
    public void SetFailoverScenario(bool useFailoverServer);
    public void SetInternalSourceType(SqlConnectionInternalSourceType sourceType);
    internal void ResetAndRestartPhase();
    internal void SetAndBeginPhase(SqlConnectionTimeoutErrorPhase timeoutErrorPhase);
    internal void EndPhase(SqlConnectionTimeoutErrorPhase timeoutErrorPhase);
    internal void SetAllCompleteMarker();
    internal string GetErrorMessage();
}
internal enum System.Data.SqlClient.SqlConnectionTimeoutErrorPhase : Enum {
    public int value__;
    public static SqlConnectionTimeoutErrorPhase Undefined;
    public static SqlConnectionTimeoutErrorPhase PreLoginBegin;
    public static SqlConnectionTimeoutErrorPhase InitializeConnection;
    public static SqlConnectionTimeoutErrorPhase SendPreLoginHandshake;
    public static SqlConnectionTimeoutErrorPhase ConsumePreLoginHandshake;
    public static SqlConnectionTimeoutErrorPhase LoginBegin;
    public static SqlConnectionTimeoutErrorPhase ProcessConnectionAuth;
    public static SqlConnectionTimeoutErrorPhase PostLogin;
    public static SqlConnectionTimeoutErrorPhase Complete;
    public static SqlConnectionTimeoutErrorPhase Count;
}
internal class System.Data.SqlClient.SqlConnectionTimeoutPhaseDuration : object {
    private Stopwatch _swDuration;
    internal void StartCapture();
    internal void StopCapture();
    internal long GetMilliSecondDuration();
}
public class System.Data.SqlClient.SqlCredential : object {
    private string _userId;
    private SecureString _password;
    public string UserId { get; }
    public SecureString Password { get; }
    public SqlCredential(string userId, SecureString password);
    public string get_UserId();
    public SecureString get_Password();
}
public class System.Data.SqlClient.SqlDataAdapter : DbDataAdapter {
    private static object EventRowUpdated;
    private static object EventRowUpdating;
    private SqlCommand _deleteCommand;
    private SqlCommand _insertCommand;
    private SqlCommand _selectCommand;
    private SqlCommand _updateCommand;
    private SqlCommandSet _commandSet;
    private int _updateBatchSize;
    public SqlCommand DeleteCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    public SqlCommand InsertCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    public SqlCommand SelectCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    public SqlCommand UpdateCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    public int UpdateBatchSize { get; public set; }
    public SqlDataAdapter(SqlCommand selectCommand);
    public SqlDataAdapter(string selectCommandText, string selectConnectionString);
    public SqlDataAdapter(string selectCommandText, SqlConnection selectConnection);
    private SqlDataAdapter(SqlDataAdapter from);
    private static SqlDataAdapter();
    public SqlCommand get_DeleteCommand();
    public void set_DeleteCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    public SqlCommand get_InsertCommand();
    public void set_InsertCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    public SqlCommand get_SelectCommand();
    public void set_SelectCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    public SqlCommand get_UpdateCommand();
    public void set_UpdateCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    public virtual int get_UpdateBatchSize();
    public virtual void set_UpdateBatchSize(int value);
    protected virtual int AddToBatch(IDbCommand command);
    protected virtual void ClearBatch();
    protected virtual int ExecuteBatch();
    protected virtual IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex);
    protected virtual bool GetBatchedRecordsAffected(int commandIdentifier, Int32& recordsAffected, Exception& error);
    protected virtual void InitializeBatching();
    protected virtual void TerminateBatching();
    private sealed virtual override object System.ICloneable.Clone();
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public void add_RowUpdated(SqlRowUpdatedEventHandler value);
    public void remove_RowUpdated(SqlRowUpdatedEventHandler value);
    public void add_RowUpdating(SqlRowUpdatingEventHandler value);
    public void remove_RowUpdating(SqlRowUpdatingEventHandler value);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlClient.SqlDataReader : DbDataReader {
    internal SharedState _sharedState;
    private TdsParser _parser;
    private TdsParserStateObject _stateObj;
    private SqlCommand _command;
    private SqlConnection _connection;
    private int _defaultLCID;
    private bool _haltRead;
    private bool _metaDataConsumed;
    private bool _browseModeInfoConsumed;
    private bool _isClosed;
    private bool _isInitialized;
    private bool _hasRows;
    private ALTROWSTATUS _altRowStatus;
    private int _recordsAffected;
    private long _defaultTimeoutMilliseconds;
    private TypeSystem _typeSystem;
    private SqlStatistics _statistics;
    private SqlBuffer[] _data;
    private SqlStreamingXml _streamingXml;
    private _SqlMetaDataSet _metaData;
    private _SqlMetaDataSetCollection _altMetaDataSetCollection;
    private FieldNameLookup _fieldNameLookup;
    private CommandBehavior _commandBehavior;
    private static int s_objectTypeCount;
    private static ReadOnlyCollection`1<DbColumn> s_emptySchema;
    internal int ObjectID;
    private MultiPartTableName[] _tableNames;
    private string _resetOptionsString;
    private int _lastColumnWithDataChunkRead;
    private long _columnDataBytesRead;
    private long _columnDataCharsRead;
    private Char[] _columnDataChars;
    private int _columnDataCharsIndex;
    private Task _currentTask;
    private Snapshot _snapshot;
    private CancellationTokenSource _cancelAsyncOnCloseTokenSource;
    private CancellationToken _cancelAsyncOnCloseToken;
    internal static Type _typeofINullable;
    private static Type s_typeofSqlString;
    private SqlSequentialStream _currentStream;
    private SqlSequentialTextReader _currentTextReader;
    unknown bool BrowseModeInfoConsumed {internal set; }
    internal SqlCommand Command { get; }
    protected SqlConnection Connection { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    internal bool IsInitialized { get; internal set; }
    internal _SqlMetaDataSet MetaData { get; }
    public int RecordsAffected { get; }
    unknown string ResetOptionsString {internal set; }
    private SqlStatistics Statistics { get; }
    internal MultiPartTableName[] TableNames { get; internal set; }
    public int VisibleFieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal SqlDataReader(SqlCommand command, CommandBehavior behavior);
    private static SqlDataReader();
    internal void set_BrowseModeInfoConsumed(bool value);
    internal SqlCommand get_Command();
    protected SqlConnection get_Connection();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    internal bool get_IsInitialized();
    internal void set_IsInitialized(bool value);
    internal long ColumnDataBytesRemaining();
    internal _SqlMetaDataSet get_MetaData();
    internal virtual SmiExtendedMetaData[] GetInternalSmiMetaData();
    public virtual int get_RecordsAffected();
    internal void set_ResetOptionsString(string value);
    private SqlStatistics get_Statistics();
    internal MultiPartTableName[] get_TableNames();
    internal void set_TableNames(MultiPartTableName[] value);
    public virtual int get_VisibleFieldCount();
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    internal void Bind(TdsParserStateObject stateObj);
    internal DataTable BuildSchemaTable();
    internal void Cancel(SqlCommand command);
    private bool TryCleanPartialRead();
    private void CleanPartialReadReliable();
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    private bool TryCloseInternal(bool closeReader);
    internal virtual void CloseReaderFromConnection();
    private bool TryConsumeMetaData();
    public virtual string GetDataTypeName(int i);
    private string GetDataTypeNameInternal(_SqlMetaData metaData);
    internal virtual StorageType GetVariantInternalStorageType(int i);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int i);
    private Type GetFieldTypeInternal(_SqlMetaData metaData);
    internal virtual int GetLocaleId(int i);
    public virtual string GetName(int i);
    public virtual Type GetProviderSpecificFieldType(int i);
    private Type GetProviderSpecificFieldTypeInternal(_SqlMetaData metaData);
    public virtual int GetOrdinal(string name);
    public virtual object GetProviderSpecificValue(int i);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual DataTable GetSchemaTable();
    public virtual bool GetBoolean(int i);
    public virtual XmlReader GetXmlReader(int i);
    public virtual Stream GetStream(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    internal virtual long GetBytesInternal(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    private bool TryGetBytesInternal(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length, Int64& remaining);
    internal int GetBytesInternalSequential(int i, Byte[] buffer, int index, int length, Nullable`1<long> timeoutMilliseconds);
    internal bool TryGetBytesInternalSequential(int i, Byte[] buffer, int index, int length, Int32& bytesRead);
    public virtual TextReader GetTextReader(int i);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    private long GetCharsFromPlpData(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    internal long GetStreamingXmlChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual SqlBoolean GetSqlBoolean(int i);
    public virtual SqlBinary GetSqlBinary(int i);
    public virtual SqlByte GetSqlByte(int i);
    public virtual SqlBytes GetSqlBytes(int i);
    public virtual SqlChars GetSqlChars(int i);
    public virtual SqlDateTime GetSqlDateTime(int i);
    public virtual SqlDecimal GetSqlDecimal(int i);
    public virtual SqlGuid GetSqlGuid(int i);
    public virtual SqlDouble GetSqlDouble(int i);
    public virtual SqlInt16 GetSqlInt16(int i);
    public virtual SqlInt32 GetSqlInt32(int i);
    public virtual SqlInt64 GetSqlInt64(int i);
    public virtual SqlMoney GetSqlMoney(int i);
    public virtual SqlSingle GetSqlSingle(int i);
    public virtual SqlString GetSqlString(int i);
    public virtual SqlXml GetSqlXml(int i);
    public virtual object GetSqlValue(int i);
    private object GetSqlValueInternal(int i);
    private object GetSqlValueFromSqlBufferInternal(SqlBuffer data, _SqlMetaData metaData);
    public virtual int GetSqlValues(Object[] values);
    public virtual string GetString(int i);
    public virtual T GetFieldValue(int i);
    public virtual object GetValue(int i);
    public virtual TimeSpan GetTimeSpan(int i);
    public virtual DateTimeOffset GetDateTimeOffset(int i);
    private object GetValueInternal(int i);
    private object GetValueFromSqlBufferInternal(SqlBuffer data, _SqlMetaData metaData);
    private T GetFieldValueInternal(int i);
    private T GetFieldValueFromSqlBufferInternal(SqlBuffer data, _SqlMetaData metaData);
    public virtual int GetValues(Object[] values);
    private MetaType GetVersionedMetaType(MetaType actualMetaType);
    private bool TryHasMoreResults(Boolean& moreResults);
    private bool TryHasMoreRows(Boolean& moreRows);
    private bool IsRowToken(byte token);
    public virtual bool IsDBNull(int i);
    protected internal bool IsCommandBehavior(CommandBehavior condition);
    public virtual bool NextResult();
    private bool TryNextResult(Boolean& more);
    public virtual bool Read();
    private bool TryReadInternal(bool setTimeout, Boolean& more);
    private void ReadColumn(int i, bool setTimeout, bool allowPartiallyReadColumn);
    private bool TryReadColumn(int i, bool setTimeout, bool allowPartiallyReadColumn);
    private bool TryReadColumnData();
    private void ReadColumnHeader(int i);
    private bool TryReadColumnHeader(int i);
    private bool TryReadColumnInternal(int i, bool readHeaderOnly);
    private bool WillHaveEnoughData(int targetColumn, bool headerOnly);
    private bool TryResetBlobState();
    private void CloseActiveSequentialStreamAndTextReader();
    private void RestoreServerSettings(TdsParser parser, TdsParserStateObject stateObj);
    internal bool TrySetAltMetaDataSet(_SqlMetaDataSet metaDataSet, bool metaDataConsumed);
    private void ClearMetaData();
    internal bool TrySetMetaData(_SqlMetaDataSet metaData, bool moreInfo);
    private void SetTimeout(long timeoutMilliseconds);
    private bool HasActiveStreamOrTextReaderOnColumn(int columnIndex);
    private void CheckMetaDataIsReady();
    private void CheckMetaDataIsReady(int columnIndex, bool permitAsync);
    private void CheckDataIsReady();
    private void CheckHeaderIsReady(int columnIndex, bool permitAsync, string methodName);
    private void CheckDataIsReady(int columnIndex, bool allowPartiallyReadColumn, bool permitAsync, string methodName);
    [ConditionalAttribute("DEBUG")]
private void AssertReaderState(bool requireData, bool permitAsync, Nullable`1<int> columnIndex, bool enforceSequentialAccess);
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    internal Task`1<int> GetBytesAsync(int i, Byte[] buffer, int index, int length, int timeout, CancellationToken cancellationToken, Int32& bytesRead);
    private Task`1<int> GetBytesAsyncReadDataStage(int i, Byte[] buffer, int index, int length, int timeout, bool isContinuation, CancellationToken cancellationToken, CancellationToken timeoutToken, Int32& bytesRead);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual Task`1<bool> IsDBNullAsync(int i, CancellationToken cancellationToken);
    public virtual Task`1<T> GetFieldValueAsync(int i, CancellationToken cancellationToken);
    private Task`1<T> ContinueRetryable(Func`2<Task, Task`1<T>> moreFunc);
    private Task`1<T> InvokeRetryable(Func`2<Task, Task`1<T>> moreFunc, TaskCompletionSource`1<T> source, IDisposable objectToDispose);
    private void CompleteRetryable(Task`1<T> task, TaskCompletionSource`1<T> source, IDisposable objectToDispose);
    private void PrepareAsyncInvocation(bool useSnapshot);
    private void CleanupAfterAsyncInvocation(bool ignoreCloseToken);
    private void CleanupAfterAsyncInvocationInternal(TdsParserStateObject stateObj, bool resetNetworkPacketTaskSource);
    private void PrepareForAsyncContinuation();
    private void SwitchToAsyncWithoutSnapshot();
    public sealed virtual ReadOnlyCollection`1<DbColumn> GetColumnSchema();
    private ReadOnlyCollection`1<DbColumn> BuildColumnSchema();
}
internal class System.Data.SqlClient.SqlDbColumn : DbColumn {
    private _SqlMetaData _metadata;
    unknown Nullable`1<bool> SqlIsAliased {internal set; }
    unknown Nullable`1<bool> SqlIsKey {internal set; }
    unknown Nullable`1<bool> SqlIsHidden {internal set; }
    unknown Nullable`1<bool> SqlIsExpression {internal set; }
    unknown Type SqlDataType {internal set; }
    unknown string SqlDataTypeName {internal set; }
    unknown Nullable`1<int> SqlNumericScale {internal set; }
    internal SqlDbColumn(_SqlMetaData md);
    private void Populate();
    internal void set_SqlIsAliased(Nullable`1<bool> value);
    internal void set_SqlIsKey(Nullable`1<bool> value);
    internal void set_SqlIsHidden(Nullable`1<bool> value);
    internal void set_SqlIsExpression(Nullable`1<bool> value);
    internal void set_SqlDataType(Type value);
    internal void set_SqlDataTypeName(string value);
    internal void set_SqlNumericScale(Nullable`1<int> value);
}
internal class System.Data.SqlClient.SqlDelegatedTransaction : object {
    private static int _objectTypeCount;
    private int _objectID;
    private static int _globalTransactionsTokenVersionSizeInBytes;
    private SqlInternalConnection _connection;
    private IsolationLevel _isolationLevel;
    private SqlInternalTransaction _internalTransaction;
    private Transaction _atomicTransaction;
    private bool _active;
    internal int ObjectID { get; }
    internal Transaction Transaction { get; }
    internal bool IsActive { get; }
    internal SqlDelegatedTransaction(SqlInternalConnection connection, Transaction tx);
    internal int get_ObjectID();
    internal Transaction get_Transaction();
    public sealed virtual void Initialize();
    internal bool get_IsActive();
    public sealed virtual Byte[] Promote();
    public sealed virtual void Rollback(SinglePhaseEnlistment enlistment);
    public sealed virtual void SinglePhaseCommit(SinglePhaseEnlistment enlistment);
    internal void TransactionEnded(Transaction transaction);
    private SqlInternalConnection GetValidConnection();
    private void ValidateActiveOnConnection(SqlInternalConnection connection);
    private Guid GetGlobalTxnIdentifierFromToken();
}
public class System.Data.SqlClient.SqlDependency : object {
    private string _id;
    private string _options;
    private int _timeout;
    private bool _dependencyFired;
    private List`1<EventContextPair> _eventList;
    private object _eventHandlerLock;
    private DateTime _expirationTime;
    private List`1<string> _serverList;
    private static object s_startStopLock;
    private static string s_appDomainKey;
    private static Dictionary`2<string, Dictionary`2<IdentityUserNamePair, List`1<DatabaseServicePair>>> s_serverUserHash;
    private static SqlDependencyProcessDispatcher s_processDispatcher;
    private static string s_assemblyName;
    private static string s_typeName;
    public bool HasChanges { get; }
    public string Id { get; }
    internal static string AppDomainKey { get; }
    internal DateTime ExpirationTime { get; }
    internal string Options { get; }
    internal static SqlDependencyProcessDispatcher ProcessDispatcher { get; }
    internal int Timeout { get; }
    public SqlDependency(SqlCommand command);
    public SqlDependency(SqlCommand command, string options, int timeout);
    private static SqlDependency();
    public bool get_HasChanges();
    public string get_Id();
    internal static string get_AppDomainKey();
    internal DateTime get_ExpirationTime();
    internal string get_Options();
    internal static SqlDependencyProcessDispatcher get_ProcessDispatcher();
    internal int get_Timeout();
    public void add_OnChange(OnChangeEventHandler value);
    public void remove_OnChange(OnChangeEventHandler value);
    public void AddCommandDependency(SqlCommand command);
    public static bool Start(string connectionString);
    public static bool Start(string connectionString, string queue);
    internal static bool Start(string connectionString, string queue, bool useDefaults);
    public static bool Stop(string connectionString);
    public static bool Stop(string connectionString, string queue);
    internal static bool Stop(string connectionString, string queue, bool useDefaults, bool startFailed);
    private static bool AddToServerUserHash(string server, IdentityUserNamePair identityUser, DatabaseServicePair databaseService);
    private static void RemoveFromServerUserHash(string server, IdentityUserNamePair identityUser, DatabaseServicePair databaseService);
    internal static string GetDefaultComposedOptions(string server, string failoverServer, IdentityUserNamePair identityUser, string database);
    internal void AddToServerList(string server);
    internal bool ContainsServer(string server);
    internal string ComputeHashAndAddToDispatcher(SqlCommand command);
    internal void Invalidate(SqlNotificationType type, SqlNotificationInfo info, SqlNotificationSource source);
    internal void StartTimer(SqlNotificationRequest notificationRequest);
    private void AddCommandInternal(SqlCommand cmd);
    private string ComputeCommandHash(string connectionString, SqlCommand command);
    internal static string FixupServiceOrDatabaseName(string name);
}
internal class System.Data.SqlClient.SqlDependencyPerAppDomainDispatcher : MarshalByRefObject {
    internal static SqlDependencyPerAppDomainDispatcher SingletonInstance;
    internal object _instanceLock;
    private Dictionary`2<string, SqlDependency> _dependencyIdToDependencyHash;
    private Dictionary`2<string, DependencyList> _notificationIdToDependenciesHash;
    private Dictionary`2<string, string> _commandHashToNotificationId;
    private bool _sqlDependencyTimeOutTimerStarted;
    private DateTime _nextTimeout;
    private Timer _timeoutTimer;
    private static SqlDependencyPerAppDomainDispatcher();
    public virtual object InitializeLifetimeService();
    internal void AddDependencyEntry(SqlDependency dep);
    internal string AddCommandEntry(string commandHash, SqlDependency dep);
    internal void InvalidateCommandID(SqlNotification sqlNotification);
    internal void InvalidateServer(string server, SqlNotification sqlNotification);
    internal SqlDependency LookupDependencyEntry(string id);
    private void LookupDependencyEntryWithRemove(string id);
    private List`1<SqlDependency> LookupCommandEntryWithRemove(string notificationId);
    private void RemoveDependencyFromCommandToDependenciesHash(SqlDependency dependency);
    internal void StartTimer(SqlDependency dep);
    private static void TimeoutTimerCallback(object state);
    private void SubscribeToAppDomainUnload();
    private void UnloadEventHandler(object sender, EventArgs e);
}
internal class System.Data.SqlClient.SqlEnvChange : object {
    internal byte type;
    internal byte oldLength;
    internal int newLength;
    internal int length;
    internal string newValue;
    internal string oldValue;
    internal Byte[] newBinValue;
    internal Byte[] oldBinValue;
    internal long newLongValue;
    internal long oldLongValue;
    internal SqlCollation newCollation;
    internal SqlCollation oldCollation;
    internal RoutingInfo newRoutingInfo;
    internal bool newBinRented;
    internal bool oldBinRented;
    internal SqlEnvChange Next;
    internal void Clear();
}
public class System.Data.SqlClient.SqlError : object {
    private string _source;
    private int _number;
    private byte _state;
    private byte _errorClass;
    private string _server;
    private string _message;
    private string _procedure;
    private int _lineNumber;
    private int _win32ErrorCode;
    private Exception _exception;
    public string Source { get; }
    public int Number { get; }
    public byte State { get; }
    public byte Class { get; }
    public string Server { get; }
    public string Message { get; }
    public string Procedure { get; }
    public int LineNumber { get; }
    internal int Win32ErrorCode { get; }
    internal Exception Exception { get; }
    internal SqlError(int infoNumber, byte errorState, byte errorClass, string server, string errorMessage, string procedure, int lineNumber, UInt32 win32ErrorCode, Exception exception);
    internal SqlError(int infoNumber, byte errorState, byte errorClass, string server, string errorMessage, string procedure, int lineNumber, Exception exception);
    public virtual string ToString();
    public string get_Source();
    public int get_Number();
    public byte get_State();
    public byte get_Class();
    public string get_Server();
    public string get_Message();
    public string get_Procedure();
    public int get_LineNumber();
    internal int get_Win32ErrorCode();
    internal Exception get_Exception();
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlClient.SqlErrorCollection : object {
    private List`1<object> _errors;
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public SqlError Item { get; }
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(SqlError[] array, int index);
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public SqlError get_Item(int index);
    public sealed virtual IEnumerator GetEnumerator();
    internal void Add(SqlError error);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.SqlClient.SqlException : DbException {
    private static string OriginalClientConnectionIdKey;
    private static string RoutingDestinationKey;
    private static int SqlExceptionHResult;
    private SqlErrorCollection _errors;
    private Guid _clientConnectionId;
    internal bool _doNotReconnect;
    public SqlErrorCollection Errors { get; }
    public Guid ClientConnectionId { get; }
    public byte Class { get; }
    public int LineNumber { get; }
    public int Number { get; }
    public string Procedure { get; }
    public string Server { get; }
    public byte State { get; }
    public string Source { get; }
    private SqlException(string message, SqlErrorCollection errorCollection, Exception innerException, Guid conId);
    private SqlException(SerializationInfo si, StreamingContext sc);
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    public SqlErrorCollection get_Errors();
    public Guid get_ClientConnectionId();
    public byte get_Class();
    public int get_LineNumber();
    public int get_Number();
    public string get_Procedure();
    public string get_Server();
    public byte get_State();
    public virtual string get_Source();
    public virtual string ToString();
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion);
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, SqlInternalConnectionTds internalConnection, Exception innerException);
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, Guid conId, Exception innerException);
    internal SqlException InternalClone();
}
public class System.Data.SqlClient.SqlInfoMessageEventArgs : EventArgs {
    private SqlException _exception;
    public SqlErrorCollection Errors { get; }
    public string Message { get; }
    public string Source { get; }
    internal SqlInfoMessageEventArgs(SqlException exception);
    public SqlErrorCollection get_Errors();
    private bool ShouldSerializeErrors();
    public string get_Message();
    public string get_Source();
    public virtual string ToString();
}
public class System.Data.SqlClient.SqlInfoMessageEventHandler : MulticastDelegate {
    public SqlInfoMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlInfoMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlInfoMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal abstract class System.Data.SqlClient.SqlInternalConnection : DbConnectionInternal {
    private SqlConnectionString _connectionOptions;
    private bool _isEnlistedInTransaction;
    private Byte[] _promotedDTCToken;
    private Byte[] _whereAbouts;
    private bool _isGlobalTransaction;
    private bool _isGlobalTransactionEnabledForServer;
    private static Guid _globalTransactionTMID;
    [CompilerGeneratedAttribute]
private string <CurrentDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentDataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlDelegatedTransaction <DelegatedTransaction>k__BackingField;
    internal string CurrentDatabase { get; internal set; }
    internal string CurrentDataSource { get; internal set; }
    internal SqlDelegatedTransaction DelegatedTransaction { get; internal set; }
    internal SqlConnection Connection { get; }
    internal SqlConnectionString ConnectionOptions { get; }
    internal SqlInternalTransaction CurrentTransaction { get; }
    internal SqlInternalTransaction AvailableInternalTransaction { get; }
    internal SqlInternalTransaction PendingTransaction { get; }
    protected internal bool IsNonPoolableTransactionRoot { get; }
    internal bool IsTransactionRoot { get; }
    internal bool HasLocalTransaction { get; }
    internal bool HasLocalTransactionFromAPI { get; }
    internal bool IsEnlistedInTransaction { get; }
    internal bool IsLockedForBulkCopy { get; }
    internal bool IsKatmaiOrNewer { get; }
    internal Byte[] PromotedDTCToken { get; internal set; }
    internal bool IsGlobalTransaction { get; internal set; }
    internal bool IsGlobalTransactionsEnabledForServer { get; internal set; }
    internal SqlInternalConnection(SqlConnectionString connectionOptions);
    private static SqlInternalConnection();
    [CompilerGeneratedAttribute]
internal string get_CurrentDatabase();
    [CompilerGeneratedAttribute]
internal void set_CurrentDatabase(string value);
    [CompilerGeneratedAttribute]
internal string get_CurrentDataSource();
    [CompilerGeneratedAttribute]
internal void set_CurrentDataSource(string value);
    [CompilerGeneratedAttribute]
internal SqlDelegatedTransaction get_DelegatedTransaction();
    [CompilerGeneratedAttribute]
internal void set_DelegatedTransaction(SqlDelegatedTransaction value);
    internal SqlConnection get_Connection();
    internal SqlConnectionString get_ConnectionOptions();
    internal abstract virtual SqlInternalTransaction get_CurrentTransaction();
    internal virtual SqlInternalTransaction get_AvailableInternalTransaction();
    internal abstract virtual SqlInternalTransaction get_PendingTransaction();
    protected internal virtual bool get_IsNonPoolableTransactionRoot();
    internal virtual bool get_IsTransactionRoot();
    internal bool get_HasLocalTransaction();
    internal bool get_HasLocalTransactionFromAPI();
    internal bool get_IsEnlistedInTransaction();
    internal abstract virtual bool get_IsLockedForBulkCopy();
    internal abstract virtual bool get_IsKatmaiOrNewer();
    internal Byte[] get_PromotedDTCToken();
    internal void set_PromotedDTCToken(Byte[] value);
    internal bool get_IsGlobalTransaction();
    internal void set_IsGlobalTransaction(bool value);
    internal bool get_IsGlobalTransactionsEnabledForServer();
    internal void set_IsGlobalTransactionsEnabledForServer(bool value);
    public virtual DbTransaction BeginTransaction(IsolationLevel iso);
    internal virtual SqlTransaction BeginSqlTransaction(IsolationLevel iso, string transactionName, bool shouldReconnect);
    public virtual void ChangeDatabase(string database);
    protected abstract virtual void ChangeDatabaseInternal(string database);
    protected virtual void CleanupTransactionOnCompletion(Transaction transaction);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected virtual void Deactivate();
    internal abstract virtual void DisconnectTransaction(SqlInternalTransaction internalTransaction);
    public virtual void Dispose();
    protected void Enlist(Transaction tx);
    private void EnlistNonNull(Transaction tx);
    internal void EnlistNull();
    public virtual void EnlistTransaction(Transaction transaction);
    internal abstract virtual void ExecuteTransaction(TransactionRequest transactionRequest, string name, IsolationLevel iso, SqlInternalTransaction internalTransaction, bool isDelegateControlRequest);
    internal SqlDataReader FindLiveReader(SqlCommand command);
    internal SqlCommand FindLiveCommand(TdsParserStateObject stateObj);
    protected abstract virtual Byte[] GetDTCAddress();
    private static Byte[] GetTransactionCookie(Transaction transaction, Byte[] whereAbouts);
    protected virtual void InternalDeactivate();
    internal void OnError(SqlException exception, bool breakConnection, Action`1<Action> wrapCloseInAction);
    protected abstract virtual void PropagateTransactionCookie(Byte[] transactionCookie);
    internal abstract virtual void ValidateConnectionForExecute(SqlCommand command);
}
internal class System.Data.SqlClient.SqlInternalConnectionTds : SqlInternalConnection {
    private SqlConnectionPoolGroupProviderInfo _poolGroupProviderInfo;
    private TdsParser _parser;
    private SqlLoginAck _loginAck;
    private SqlCredential _credential;
    private Nullable`1<FederatedAuthenticationFeatureExtensionData> _fedAuthFeatureExtensionData;
    private bool _sessionRecoveryRequested;
    internal bool _sessionRecoveryAcknowledged;
    internal SessionData _currentSessionData;
    private SessionData _recoverySessionData;
    internal bool _fedAuthRequired;
    internal bool _federatedAuthenticationRequested;
    internal bool _federatedAuthenticationAcknowledged;
    internal Byte[] _accessTokenInBytes;
    private static HashSet`1<int> s_transientErrors;
    private bool _fConnectionOpen;
    private bool _fResetConnection;
    private string _originalDatabase;
    private string _currentFailoverPartner;
    private string _originalLanguage;
    private string _currentLanguage;
    private int _currentPacketSize;
    private int _asyncCommandCount;
    private string _instanceName;
    private DbConnectionPoolIdentity _identity;
    internal SyncAsyncLock _parserLock;
    private int _threadIdOwningParserLock;
    private SqlConnectionTimeoutErrorInternal _timeoutErrorInternal;
    internal Guid _clientConnectionId;
    private RoutingInfo _routingInfo;
    private Guid _originalClientConnectionId;
    private string _routingDestination;
    private TimeoutTimer _timeout;
    internal SessionData CurrentSessionData { get; }
    internal SqlConnectionTimeoutErrorInternal TimeoutErrorInternal { get; }
    internal Guid ClientConnectionId { get; }
    internal Guid OriginalClientConnectionId { get; }
    internal string RoutingDestination { get; }
    internal SqlInternalTransaction CurrentTransaction { get; }
    internal SqlInternalTransaction AvailableInternalTransaction { get; }
    internal SqlInternalTransaction PendingTransaction { get; }
    internal DbConnectionPoolIdentity Identity { get; }
    internal string InstanceName { get; }
    internal bool IsLockedForBulkCopy { get; }
    protected internal bool IsNonPoolableTransactionRoot { get; }
    internal bool IsKatmaiOrNewer { get; }
    internal int PacketSize { get; }
    internal TdsParser Parser { get; }
    internal string ServerProvidedFailOverPartner { get; }
    internal SqlConnectionPoolGroupProviderInfo PoolGroupProviderInfo { get; }
    protected bool ReadyToPrepareTransaction { get; }
    public string ServerVersion { get; }
    protected bool UnbindOnTransactionCompletion { get; }
    internal bool IgnoreEnvChange { get; }
    internal bool ThreadHasParserLockForClose { get; internal set; }
    internal SqlInternalConnectionTds(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, object providerInfo, string newPassword, SecureString newSecurePassword, bool redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, bool applyTransientFaultHandling, string accessToken);
    private static SqlInternalConnectionTds();
    internal SessionData get_CurrentSessionData();
    internal SqlConnectionTimeoutErrorInternal get_TimeoutErrorInternal();
    private bool IsTransientError(SqlException exc);
    internal Guid get_ClientConnectionId();
    internal Guid get_OriginalClientConnectionId();
    internal string get_RoutingDestination();
    internal virtual SqlInternalTransaction get_CurrentTransaction();
    internal virtual SqlInternalTransaction get_AvailableInternalTransaction();
    internal virtual SqlInternalTransaction get_PendingTransaction();
    internal DbConnectionPoolIdentity get_Identity();
    internal string get_InstanceName();
    internal virtual bool get_IsLockedForBulkCopy();
    protected internal virtual bool get_IsNonPoolableTransactionRoot();
    internal virtual bool get_IsKatmaiOrNewer();
    internal int get_PacketSize();
    internal TdsParser get_Parser();
    internal string get_ServerProvidedFailOverPartner();
    internal SqlConnectionPoolGroupProviderInfo get_PoolGroupProviderInfo();
    protected virtual bool get_ReadyToPrepareTransaction();
    public virtual string get_ServerVersion();
    protected virtual bool get_UnbindOnTransactionCompletion();
    protected virtual void ChangeDatabaseInternal(string database);
    public virtual void Dispose();
    internal virtual void ValidateConnectionForExecute(SqlCommand command);
    internal void CheckEnlistedTransactionBinding();
    internal virtual bool IsConnectionAlive(bool throwOnException);
    protected virtual void Activate(Transaction transaction);
    protected virtual void InternalDeactivate();
    private void ResetConnection();
    internal void DecrementAsyncCount();
    internal void IncrementAsyncCount();
    internal virtual void DisconnectTransaction(SqlInternalTransaction internalTransaction);
    internal void ExecuteTransaction(TransactionRequest transactionRequest, string name, IsolationLevel iso);
    internal virtual void ExecuteTransaction(TransactionRequest transactionRequest, string name, IsolationLevel iso, SqlInternalTransaction internalTransaction, bool isDelegateControlRequest);
    internal void ExecuteTransactionYukon(TransactionRequest transactionRequest, string transactionName, IsolationLevel iso, SqlInternalTransaction internalTransaction, bool isDelegateControlRequest);
    internal virtual void DelegatedTransactionEnded();
    protected virtual Byte[] GetDTCAddress();
    protected virtual void PropagateTransactionCookie(Byte[] cookie);
    private void CompleteLogin(bool enlistOK);
    private void Login(ServerInfo server, TimeoutTimer timeout, string newPassword, SecureString newSecurePassword);
    private void LoginFailure();
    private void OpenLoginEnlist(TimeoutTimer timeout, SqlConnectionString connectionOptions, SqlCredential credential, string newPassword, SecureString newSecurePassword, bool redirectedUserInstance);
    private bool IsDoNotRetryConnectError(SqlException exc);
    private void LoginNoFailover(ServerInfo serverInfo, string newPassword, SecureString newSecurePassword, bool redirectedUserInstance, SqlConnectionString connectionOptions, SqlCredential credential, TimeoutTimer timeout);
    private void LoginWithFailover(bool useFailoverHost, ServerInfo primaryServerInfo, string failoverHost, string newPassword, SecureString newSecurePassword, bool redirectedUserInstance, SqlConnectionString connectionOptions, SqlCredential credential, TimeoutTimer timeout);
    private void ResolveExtendedServerName(ServerInfo serverInfo, bool aliasLookup, SqlConnectionString options);
    private void AttemptOneLogin(ServerInfo serverInfo, string newPassword, SecureString newSecurePassword, bool ignoreSniOpenTimeout, TimeoutTimer timeout, bool withFailover);
    protected virtual object ObtainAdditionalLocksForClose();
    protected virtual void ReleaseAdditionalLocksForClose(object lockToken);
    internal bool GetSessionAndReconnectIfNeeded(SqlConnection parent, int timeout);
    internal void BreakConnection();
    internal bool get_IgnoreEnvChange();
    internal void OnEnvChange(SqlEnvChange rec);
    internal void OnLoginAck(SqlLoginAck rec);
    internal void OnFeatureExtAck(int featureId, Byte[] data);
    internal bool get_ThreadHasParserLockForClose();
    internal void set_ThreadHasParserLockForClose(bool value);
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal class System.Data.SqlClient.SqlInternalTransaction : object {
    internal static long NullTransactionId;
    private TransactionState _transactionState;
    private TransactionType _transactionType;
    private long _transactionId;
    private int _openResultCount;
    private SqlInternalConnection _innerConnection;
    private bool _disposing;
    private WeakReference _parent;
    [CompilerGeneratedAttribute]
private bool <RestoreBrokenConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConnectionHasBeenRestored>k__BackingField;
    internal bool RestoreBrokenConnection { get; internal set; }
    internal bool ConnectionHasBeenRestored { get; internal set; }
    internal bool HasParentTransaction { get; }
    internal bool IsAborted { get; }
    internal bool IsActive { get; }
    internal bool IsCommitted { get; }
    internal bool IsCompleted { get; }
    internal bool IsDelegated { get; }
    internal bool IsDistributed { get; }
    internal bool IsLocal { get; }
    internal bool IsOrphaned { get; }
    internal bool IsZombied { get; }
    internal int OpenResultsCount { get; }
    internal SqlTransaction Parent { get; }
    internal long TransactionId { get; internal set; }
    internal SqlInternalTransaction(SqlInternalConnection innerConnection, TransactionType type, SqlTransaction outerTransaction);
    internal SqlInternalTransaction(SqlInternalConnection innerConnection, TransactionType type, SqlTransaction outerTransaction, long transactionId);
    [CompilerGeneratedAttribute]
internal bool get_RestoreBrokenConnection();
    [CompilerGeneratedAttribute]
internal void set_RestoreBrokenConnection(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ConnectionHasBeenRestored();
    [CompilerGeneratedAttribute]
internal void set_ConnectionHasBeenRestored(bool value);
    internal bool get_HasParentTransaction();
    internal bool get_IsAborted();
    internal bool get_IsActive();
    internal bool get_IsCommitted();
    internal bool get_IsCompleted();
    internal bool get_IsDelegated();
    internal bool get_IsDistributed();
    internal bool get_IsLocal();
    internal bool get_IsOrphaned();
    internal bool get_IsZombied();
    internal int get_OpenResultsCount();
    internal SqlTransaction get_Parent();
    internal long get_TransactionId();
    internal void set_TransactionId(long value);
    internal void Activate();
    private void CheckTransactionLevelAndZombie();
    internal void CloseFromConnection();
    internal void Commit();
    internal void Completed(TransactionState transactionState);
    internal int DecrementAndObtainOpenResultCount();
    internal void Dispose();
    private void Dispose(bool disposing);
    private int GetServerTransactionLevel();
    internal int IncrementAndObtainOpenResultCount();
    internal void InitParent(SqlTransaction transaction);
    internal void Rollback();
    internal void Rollback(string transactionName);
    internal void Save(string savePointName);
    internal void Zombie();
    private void ZombieParent();
}
internal class System.Data.SqlClient.SqlLogin : object {
    internal int timeout;
    internal bool userInstance;
    internal string hostName;
    internal string userName;
    internal string password;
    internal string applicationName;
    internal string serverName;
    internal string language;
    internal string database;
    internal string attachDBFilename;
    internal bool useReplication;
    internal string newPassword;
    internal bool useSSPI;
    internal int packetSize;
    internal bool readOnlyIntent;
    internal SqlCredential credential;
    internal SecureString newSecurePassword;
}
internal class System.Data.SqlClient.SqlLoginAck : object {
    internal byte majorVersion;
    internal byte minorVersion;
    internal short buildNum;
    internal UInt32 tdsVersion;
}
internal class System.Data.SqlClient.SQLMessage : object {
    internal static string CultureIdError();
    internal static string EncryptionNotSupportedByClient();
    internal static string EncryptionNotSupportedByServer();
    internal static string OperationCancelled();
    internal static string SevereError();
    internal static string SSPIInitializeError();
    internal static string SSPIGenerateError();
    internal static string SqlServerBrowserNotAccessible();
    internal static string KerberosTicketMissingError();
    internal static string Timeout();
    internal static string Timeout_PreLogin_Begin();
    internal static string Timeout_PreLogin_InitializeConnection();
    internal static string Timeout_PreLogin_SendHandshake();
    internal static string Timeout_PreLogin_ConsumeHandshake();
    internal static string Timeout_Login_Begin();
    internal static string Timeout_Login_ProcessConnectionAuth();
    internal static string Timeout_PostLogin();
    internal static string Timeout_FailoverInfo();
    internal static string Timeout_RoutingDestination();
    internal static string Duration_PreLogin_Begin(long PreLoginBeginDuration);
    internal static string Duration_PreLoginHandshake(long PreLoginBeginDuration, long PreLoginHandshakeDuration);
    internal static string Duration_Login_Begin(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration);
    internal static string Duration_Login_ProcessConnectionAuth(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration, long LoginAuthDuration);
    internal static string Duration_PostLogin(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration, long LoginAuthDuration, long PostLoginDuration);
    internal static string UserInstanceFailure();
    internal static string PreloginError();
    internal static string ExClientConnectionId();
    internal static string ExErrorNumberStateClass();
    internal static string ExOriginalClientConnectionId();
    internal static string ExRoutingDestination();
}
internal class System.Data.SqlClient.SqlMetaDataFactory : DbMetaDataFactory {
    private static string _serverVersionNormalized90;
    private static string _serverVersionNormalized90782;
    private static string _serverVersionNormalized10;
    public SqlMetaDataFactory(Stream XMLStream, string serverVersion, string serverVersionNormalized);
    private void addUDTsToDataTypesTable(DataTable dataTypesTable, SqlConnection connection, string ServerVersion);
    private void AddTVPsToDataTypesTable(DataTable dataTypesTable, SqlConnection connection, string ServerVersion);
    private DataTable GetDataTypesTable(SqlConnection connection);
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
}
internal class System.Data.SqlClient.SqlMetaDataPriv : object {
    internal SqlDbType type;
    internal byte tdsType;
    internal byte precision;
    internal byte scale;
    private SqlMetaDataPrivFlags flags;
    internal int length;
    internal SqlCollation collation;
    internal int codePage;
    internal Encoding encoding;
    internal MetaType metaType;
    public SqlMetaDataUdt udt;
    public SqlMetaDataXmlSchemaCollection xmlSchemaCollection;
    public bool IsNullable { get; public set; }
    public bool IsMultiValued { get; public set; }
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public bool get_IsMultiValued();
    public void set_IsMultiValued(bool value);
    private void Set(SqlMetaDataPrivFlags flag, bool value);
    internal virtual void CopyFrom(SqlMetaDataPriv original);
}
internal class System.Data.SqlClient.SqlMetaDataUdt : object {
    internal Type Type;
    internal string DatabaseName;
    internal string SchemaName;
    internal string TypeName;
    internal string AssemblyQualifiedName;
    public void CopyFrom(SqlMetaDataUdt original);
}
internal class System.Data.SqlClient.SqlMetaDataXmlSchemaCollection : object {
    internal string Database;
    internal string OwningSchema;
    internal string Name;
    public void CopyFrom(SqlMetaDataXmlSchemaCollection original);
}
internal class System.Data.SqlClient.SqlNotification : MarshalByRefObject {
    private SqlNotificationInfo _info;
    private SqlNotificationSource _source;
    private SqlNotificationType _type;
    private string _key;
    internal SqlNotificationInfo Info { get; }
    internal string Key { get; }
    internal SqlNotificationSource Source { get; }
    internal SqlNotificationType Type { get; }
    internal SqlNotification(SqlNotificationInfo info, SqlNotificationSource source, SqlNotificationType type, string key);
    internal SqlNotificationInfo get_Info();
    internal string get_Key();
    internal SqlNotificationSource get_Source();
    internal SqlNotificationType get_Type();
}
public class System.Data.SqlClient.SqlNotificationEventArgs : EventArgs {
    private SqlNotificationType _type;
    private SqlNotificationInfo _info;
    private SqlNotificationSource _source;
    internal static SqlNotificationEventArgs s_notifyError;
    public SqlNotificationType Type { get; }
    public SqlNotificationInfo Info { get; }
    public SqlNotificationSource Source { get; }
    public SqlNotificationEventArgs(SqlNotificationType type, SqlNotificationInfo info, SqlNotificationSource source);
    private static SqlNotificationEventArgs();
    public SqlNotificationType get_Type();
    public SqlNotificationInfo get_Info();
    public SqlNotificationSource get_Source();
}
public enum System.Data.SqlClient.SqlNotificationInfo : Enum {
    public int value__;
    public static SqlNotificationInfo Truncate;
    public static SqlNotificationInfo Insert;
    public static SqlNotificationInfo Update;
    public static SqlNotificationInfo Delete;
    public static SqlNotificationInfo Drop;
    public static SqlNotificationInfo Alter;
    public static SqlNotificationInfo Restart;
    public static SqlNotificationInfo Error;
    public static SqlNotificationInfo Query;
    public static SqlNotificationInfo Invalid;
    public static SqlNotificationInfo Options;
    public static SqlNotificationInfo Isolation;
    public static SqlNotificationInfo Expired;
    public static SqlNotificationInfo Resource;
    public static SqlNotificationInfo PreviousFire;
    public static SqlNotificationInfo TemplateLimit;
    public static SqlNotificationInfo Merge;
    public static SqlNotificationInfo Unknown;
    public static SqlNotificationInfo AlreadyChanged;
}
public enum System.Data.SqlClient.SqlNotificationSource : Enum {
    public int value__;
    public static SqlNotificationSource Data;
    public static SqlNotificationSource Timeout;
    public static SqlNotificationSource Object;
    public static SqlNotificationSource Database;
    public static SqlNotificationSource System;
    public static SqlNotificationSource Statement;
    public static SqlNotificationSource Environment;
    public static SqlNotificationSource Execution;
    public static SqlNotificationSource Owner;
    public static SqlNotificationSource Unknown;
    public static SqlNotificationSource Client;
}
public enum System.Data.SqlClient.SqlNotificationType : Enum {
    public int value__;
    public static SqlNotificationType Change;
    public static SqlNotificationType Subscribe;
    public static SqlNotificationType Unknown;
}
[TypeConverterAttribute("System.Data.SqlClient.SqlParameter/SqlParameterConverter")]
public class System.Data.SqlClient.SqlParameter : DbParameter {
    private MetaType _metaType;
    private SqlCollation _collation;
    private SqlMetaDataXmlSchemaCollection _xmlSchemaCollection;
    private string _udtTypeName;
    private string _typeName;
    private Exception _udtLoadError;
    private string _parameterName;
    private byte _precision;
    private byte _scale;
    private MetaType _internalMetaType;
    private SqlBuffer _sqlBufferReturnValue;
    private INullable _valueAsINullable;
    private int _actualSize;
    private SqlParameterFlags _flags;
    private DataRowVersion _sourceVersion;
    private object _value;
    private object _parent;
    private ParameterDirection _direction;
    private int _size;
    private int _offset;
    private string _sourceColumn;
    private object _coercedValue;
    internal SqlCollation Collation { get; internal set; }
    public SqlCompareOptions CompareInfo { get; public set; }
    public string XmlSchemaCollectionDatabase { get; public set; }
    public string XmlSchemaCollectionOwningSchema { get; public set; }
    public string XmlSchemaCollectionName { get; public set; }
    public DbType DbType { get; public set; }
    internal MetaType InternalMetaType { get; internal set; }
    internal bool IsDerivedParameterTypeName { get; internal set; }
    public int LocaleId { get; public set; }
    internal bool ParameterIsSqlType { get; internal set; }
    public string ParameterName { get; public set; }
    internal string ParameterNameFixed { get; }
    [DefaultValueAttribute("0")]
public byte Precision { get; public set; }
    internal byte PrecisionInternal { get; internal set; }
    [DefaultValueAttribute("0")]
public byte Scale { get; public set; }
    internal byte ScaleInternal { get; internal set; }
    [DbProviderSpecificTypePropertyAttribute("True")]
public SqlDbType SqlDbType { get; public set; }
    public object SqlValue { get; public set; }
    public string UdtTypeName { get; public set; }
    public string TypeName { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Value { get; public set; }
    internal INullable ValueAsINullable { get; }
    internal bool IsNull { get; }
    public DataRowVersion SourceVersion { get; public set; }
    internal bool CoercedValueIsSqlType { get; }
    internal bool CoercedValueIsDataFeed { get; }
    private object CoercedValue { get; private set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    public int Offset { get; public set; }
    public int Size { get; public set; }
    public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public SqlParameter(string parameterName, SqlDbType dbType);
    public SqlParameter(string parameterName, object value);
    public SqlParameter(string parameterName, SqlDbType dbType, int size);
    public SqlParameter(string parameterName, SqlDbType dbType, int size, string sourceColumn);
    public SqlParameter(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public SqlParameter(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value, string xmlSchemaCollectionDatabase, string xmlSchemaCollectionOwningSchema, string xmlSchemaCollectionName);
    private SqlParameter(SqlParameter source);
    internal SqlCollation get_Collation();
    internal void set_Collation(SqlCollation value);
    public SqlCompareOptions get_CompareInfo();
    public void set_CompareInfo(SqlCompareOptions value);
    public string get_XmlSchemaCollectionDatabase();
    public void set_XmlSchemaCollectionDatabase(string value);
    public string get_XmlSchemaCollectionOwningSchema();
    public void set_XmlSchemaCollectionOwningSchema(string value);
    public string get_XmlSchemaCollectionName();
    public void set_XmlSchemaCollectionName(string value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual void ResetDbType();
    internal MetaType get_InternalMetaType();
    internal void set_InternalMetaType(MetaType value);
    internal bool get_IsDerivedParameterTypeName();
    internal void set_IsDerivedParameterTypeName(bool value);
    public int get_LocaleId();
    public void set_LocaleId(int value);
    internal SmiParameterMetaData MetaDataForSmi(ParameterPeekAheadValue& peekAhead);
    internal bool get_ParameterIsSqlType();
    internal void set_ParameterIsSqlType(bool value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    internal string get_ParameterNameFixed();
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    internal byte get_PrecisionInternal();
    internal void set_PrecisionInternal(byte value);
    private bool ShouldSerializePrecision();
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    internal byte get_ScaleInternal();
    internal void set_ScaleInternal(byte value);
    private bool ShouldSerializeScale();
    public SqlDbType get_SqlDbType();
    public void set_SqlDbType(SqlDbType value);
    private bool ShouldSerializeSqlDbType();
    public void ResetSqlDbType();
    public object get_SqlValue();
    public void set_SqlValue(object value);
    public string get_UdtTypeName();
    public void set_UdtTypeName(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    internal INullable get_ValueAsINullable();
    internal bool get_IsNull();
    internal int GetActualSize();
    private sealed virtual override object System.ICloneable.Clone();
    internal static object CoerceValue(object value, MetaType destinationType, Boolean& coercedToDataFeed, Boolean& typeChanged, bool allowStreaming);
    internal void FixStreamDataForNonPLP();
    private void CloneHelper(SqlParameter destination);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    internal byte GetActualPrecision();
    internal byte GetActualScale();
    internal int GetParameterSize();
    private void GetActualFieldsAndProperties(List`1& fields, SmiMetaDataPropertyCollection& props, ParameterPeekAheadValue& peekAhead);
    internal object GetCoercedValue();
    internal bool get_CoercedValueIsSqlType();
    internal bool get_CoercedValueIsDataFeed();
    [ConditionalAttribute("DEBUG")]
internal void AssertCachedPropertiesAreValid();
    [ConditionalAttribute("DEBUG")]
internal void AssertPropertiesAreValid(object value, Nullable`1<bool> isSqlType, Nullable`1<bool> isDataFeed, Nullable`1<bool> isNull);
    private SqlDbType GetMetaSqlDbTypeOnly();
    private MetaType GetMetaTypeOnly();
    internal void Prepare(SqlCommand cmd);
    private void PropertyChanging();
    private void PropertyTypeChanging();
    internal void SetSqlBuffer(SqlBuffer buff);
    internal void SetUdtLoadError(Exception e);
    private void Set(SqlParameterFlags flag, bool value);
    internal void Validate(int index, bool isCommandProc);
    internal MetaType ValidateTypeLengths();
    private byte ValuePrecision(object value);
    private byte ValueScale(object value);
    private static int StringSize(object value, bool isSqlType);
    private static int BinarySize(object value, bool isSqlType);
    private int ValueSize(object value);
    internal static String[] ParseTypeName(string typeName, bool isUdtTypeName);
    private void EnsureXmlSchemaCollectionExists();
    private object get_CoercedValue();
    private void set_CoercedValue(object value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public int get_Offset();
    public void set_Offset(int value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    private bool ShouldSerializeSize();
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    internal object CompareExchangeParent(object value, object comparand);
    internal void ResetParent();
    public virtual string ToString();
    private byte ValuePrecisionCore(object value);
    private byte ValueScaleCore(object value);
    private int ValueSizeCore(object value);
    internal void CopyTo(SqlParameter destination);
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlClient.SqlParameterCollection : DbParameterCollection {
    private bool _isDirty;
    private static Type s_itemType;
    private List`1<SqlParameter> _items;
    internal bool IsDirty { get; internal set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public SqlParameter Item { get; public set; }
    public SqlParameter Item { get; public set; }
    public int Count { get; }
    private List`1<SqlParameter> InnerList { get; }
    public object SyncRoot { get; }
    private static SqlParameterCollection();
    internal bool get_IsDirty();
    internal void set_IsDirty(bool value);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public SqlParameter get_Item(int index);
    public void set_Item(int index, SqlParameter value);
    public SqlParameter get_Item(string parameterName);
    public void set_Item(string parameterName, SqlParameter value);
    public SqlParameter Add(SqlParameter value);
    public SqlParameter AddWithValue(string parameterName, object value);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size, string sourceColumn);
    public void AddRange(SqlParameter[] values);
    public virtual bool Contains(string value);
    public bool Contains(SqlParameter value);
    public void CopyTo(SqlParameter[] array, int index);
    public int IndexOf(SqlParameter value);
    public void Insert(int index, SqlParameter value);
    private void OnChange();
    public void Remove(SqlParameter value);
    public virtual int get_Count();
    private List`1<SqlParameter> get_InnerList();
    public virtual object get_SyncRoot();
    public virtual int Add(object value);
    public virtual void AddRange(Array values);
    private int CheckName(string parameterName);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    private static int IndexOf(IEnumerable items, string parameterName);
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    private void RangeCheck(int index);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    private void RemoveIndex(int index);
    private void Replace(int index, object newValue);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    private void Validate(int index, object value);
    private void ValidateType(object value);
}
internal class System.Data.SqlClient.SqlReferenceCollection : DbReferenceCollection {
    internal static int DataReaderTag;
    internal static int CommandTag;
    internal static int BulkCopyTag;
    public virtual void Add(object value, int tag);
    internal void Deactivate();
    internal SqlDataReader FindLiveReader(SqlCommand command);
    internal SqlCommand FindLiveCommand(TdsParserStateObject stateObj);
    protected virtual void NotifyItem(int message, int tag, object value);
    public virtual void Remove(object value);
}
internal class System.Data.SqlClient.SqlReturnValue : SqlMetaDataPriv {
    internal string parameter;
    internal SqlBuffer value;
}
public class System.Data.SqlClient.SqlRowsCopiedEventArgs : EventArgs {
    private bool _abort;
    private long _rowsCopied;
    public bool Abort { get; public set; }
    public long RowsCopied { get; }
    public SqlRowsCopiedEventArgs(long rowsCopied);
    public bool get_Abort();
    public void set_Abort(bool value);
    public long get_RowsCopied();
}
public class System.Data.SqlClient.SqlRowsCopiedEventHandler : MulticastDelegate {
    public SqlRowsCopiedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowsCopiedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowsCopiedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SqlClient.SqlRowUpdatedEventArgs : RowUpdatedEventArgs {
    public SqlCommand Command { get; }
    public SqlRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public SqlCommand get_Command();
}
public class System.Data.SqlClient.SqlRowUpdatedEventHandler : MulticastDelegate {
    public SqlRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SqlClient.SqlRowUpdatingEventArgs : RowUpdatingEventArgs {
    public SqlCommand Command { get; public set; }
    protected IDbCommand BaseCommand { get; protected set; }
    public SqlRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public SqlCommand get_Command();
    public void set_Command(SqlCommand value);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
}
public class System.Data.SqlClient.SqlRowUpdatingEventHandler : MulticastDelegate {
    public SqlRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.SqlClient.SqlSequentialStream : Stream {
    private SqlDataReader _reader;
    private int _columnIndex;
    private Task _currentTask;
    private int _readTimeout;
    private CancellationTokenSource _disposalTokenSource;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    internal int ColumnIndex { get; }
    internal SqlSequentialStream(SqlDataReader reader, int columnIndex);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    internal int get_ColumnIndex();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] array, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    internal void SetClosed();
    protected virtual void Dispose(bool disposing);
    internal static void ValidateReadParameters(Byte[] buffer, int offset, int count);
}
internal class System.Data.SqlClient.SqlSequentialTextReader : TextReader {
    private SqlDataReader _reader;
    private int _columnIndex;
    private Encoding _encoding;
    private Decoder _decoder;
    private Byte[] _leftOverBytes;
    private int _peekedChar;
    private Task _currentTask;
    private CancellationTokenSource _disposalTokenSource;
    internal int ColumnIndex { get; }
    private bool IsClosed { get; }
    private bool HasPeekedChar { get; }
    internal SqlSequentialTextReader(SqlDataReader reader, int columnIndex, Encoding encoding);
    internal int get_ColumnIndex();
    public virtual int Peek();
    public virtual int Read();
    public virtual int Read(Char[] buffer, int index, int count);
    public virtual Task`1<int> ReadAsync(Char[] buffer, int index, int count);
    protected virtual void Dispose(bool disposing);
    internal void SetClosed();
    private int InternalRead(Char[] buffer, int index, int count);
    private Byte[] PrepareByteBuffer(int numberOfChars, Int32& byteBufferUsed);
    private int DecodeBytesToChars(Byte[] inBuffer, int inBufferCount, Char[] outBuffer, int outBufferOffset, int outBufferCount);
    private bool get_IsClosed();
    private bool get_HasPeekedChar();
    internal static void ValidateReadParameters(Char[] buffer, int index, int count);
}
internal static class System.Data.SqlClient.SqlServerEscapeHelper : object {
    internal static string EscapeIdentifier(string name);
    internal static void EscapeIdentifier(StringBuilder builder, string name);
    internal static string EscapeStringAsLiteral(string input);
    internal static string MakeStringLiteral(string input);
}
internal class System.Data.SqlClient.SqlStatistics : object {
    internal long _closeTimestamp;
    internal long _openTimestamp;
    internal long _startExecutionTimestamp;
    internal long _startFetchTimestamp;
    internal long _startNetworkServerTimestamp;
    internal long _buffersReceived;
    internal long _buffersSent;
    internal long _bytesReceived;
    internal long _bytesSent;
    internal long _connectionTime;
    internal long _cursorOpens;
    internal long _executionTime;
    internal long _iduCount;
    internal long _iduRows;
    internal long _networkServerTime;
    internal long _preparedExecs;
    internal long _prepares;
    internal long _selectCount;
    internal long _selectRows;
    internal long _serverRoundtrips;
    internal long _sumResultSets;
    internal long _transactions;
    internal long _unpreparedExecs;
    private bool _waitForDoneAfterRow;
    private bool _waitForReply;
    internal bool WaitForDoneAfterRow { get; internal set; }
    internal bool WaitForReply { get; }
    internal static SqlStatistics StartTimer(SqlStatistics statistics);
    internal static void StopTimer(SqlStatistics statistics);
    internal bool get_WaitForDoneAfterRow();
    internal void set_WaitForDoneAfterRow(bool value);
    internal bool get_WaitForReply();
    internal void ContinueOnNewConnection();
    internal IDictionary GetDictionary();
    internal bool RequestExecutionTimer();
    internal void RequestNetworkServerTimer();
    internal void ReleaseAndUpdateExecutionTimer();
    internal void ReleaseAndUpdateNetworkServerTimer();
    internal void Reset();
    internal void SafeAdd(Int64& value, long summand);
    internal long SafeIncrement(Int64& value);
    internal void UpdateStatistics();
}
internal class System.Data.SqlClient.SqlStream : Stream {
    private SqlDataReader _reader;
    private int _columnOrdinal;
    private long _bytesCol;
    private int _bom;
    private Byte[] _bufferedData;
    private bool _processAllRows;
    private bool _advanceReader;
    private bool _readFirstRow;
    private bool _endOfColumn;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SqlStream(SqlDataReader reader, bool addByteOrderMark, bool processAllRows);
    internal SqlStream(int columnOrdinal, SqlDataReader reader, bool addByteOrderMark, bool processAllRows, bool advanceReader);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    private static bool AdvanceToNextRow(SqlDataReader reader);
    private int ReadBytes(Byte[] buffer, int offset, int count);
    internal XmlReader ToXmlReader(bool async);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class System.Data.SqlClient.SqlStreamingXml : object {
    private int _columnOrdinal;
    private SqlDataReader _reader;
    private XmlReader _xmlReader;
    private XmlWriter _xmlWriter;
    private StringWriter _strWriter;
    private long _charsRemoved;
    public int ColumnOrdinal { get; }
    public SqlStreamingXml(int i, SqlDataReader reader);
    public void Close();
    public int get_ColumnOrdinal();
    public long GetChars(long dataIndex, Char[] buffer, int bufferIndex, int length);
    private void WriteXmlElement();
}
public class System.Data.SqlClient.SqlTransaction : DbTransaction {
    private static DiagnosticListener s_diagnosticListener;
    internal IsolationLevel _isolationLevel;
    private SqlInternalTransaction _internalTransaction;
    private SqlConnection _connection;
    private bool _isFromAPI;
    public SqlConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    internal SqlInternalTransaction InternalTransaction { get; }
    public IsolationLevel IsolationLevel { get; }
    private bool IsYukonPartialZombie { get; }
    internal bool IsZombied { get; }
    internal SqlStatistics Statistics { get; }
    internal SqlTransaction(SqlInternalConnection internalConnection, SqlConnection con, IsolationLevel iso, SqlInternalTransaction internalTransaction);
    private static SqlTransaction();
    public SqlConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    internal SqlInternalTransaction get_InternalTransaction();
    public virtual IsolationLevel get_IsolationLevel();
    private bool get_IsYukonPartialZombie();
    internal bool get_IsZombied();
    internal SqlStatistics get_Statistics();
    public virtual void Commit();
    protected virtual void Dispose(bool disposing);
    public virtual void Rollback();
    public void Rollback(string transactionName);
    public void Save(string savePointName);
    internal void Zombie();
    private void ZombieCheck();
}
internal class System.Data.SqlClient.SqlUdtInfo : object {
    internal Format SerializationFormat;
    internal bool IsByteOrdered;
    internal bool IsFixedLength;
    internal int MaxByteSize;
    internal string Name;
    internal string ValidationMethodName;
    [ThreadStaticAttribute]
private static Dictionary`2<Type, SqlUdtInfo> s_types2UdtInfo;
    private SqlUdtInfo(SqlUserDefinedTypeAttribute attr);
    internal static SqlUdtInfo GetFromType(Type target);
    internal static SqlUdtInfo TryGetFromType(Type target);
}
internal class System.Data.SqlClient.SqlUnicodeEncoding : UnicodeEncoding {
    private static SqlUnicodeEncoding s_singletonEncoding;
    public static Encoding SqlUnicodeEncodingInstance { get; }
    private static SqlUnicodeEncoding();
    public virtual Decoder GetDecoder();
    public virtual int GetMaxByteCount(int charCount);
    public static Encoding get_SqlUnicodeEncodingInstance();
}
internal class System.Data.SqlClient.StreamDataFeed : DataFeed {
    internal Stream _source;
    internal StreamDataFeed(Stream source);
}
internal static class System.Data.SqlClient.SysTxForGlobalTransactions : object {
    private static Lazy`1<MethodInfo> _enlistPromotableSinglePhase;
    private static Lazy`1<MethodInfo> _setDistributedTransactionIdentifier;
    private static Lazy`1<MethodInfo> _getPromotedToken;
    public static MethodInfo EnlistPromotableSinglePhase { get; }
    public static MethodInfo SetDistributedTransactionIdentifier { get; }
    public static MethodInfo GetPromotedToken { get; }
    private static SysTxForGlobalTransactions();
    public static MethodInfo get_EnlistPromotableSinglePhase();
    public static MethodInfo get_SetDistributedTransactionIdentifier();
    public static MethodInfo get_GetPromotedToken();
}
internal class System.Data.SqlClient.TdsDateTime : ValueType {
    public int days;
    public int time;
}
internal static class System.Data.SqlClient.TdsEnums : object {
    public static string SQL_PROVIDER_NAME;
    public static decimal SQL_SMALL_MONEY_MIN;
    public static decimal SQL_SMALL_MONEY_MAX;
    public static SqlDbType SmallVarBinary;
    public static string TCP;
    public static string NP;
    public static string RPC;
    public static string BV;
    public static string ADSP;
    public static string SPX;
    public static string VIA;
    public static string LPC;
    public static string ADMIN;
    public static string INIT_SSPI_PACKAGE;
    public static string INIT_SESSION;
    public static string CONNECTION_GET_SVR_USER;
    public static string GEN_CLIENT_CONTEXT;
    public static byte SOFTFLUSH;
    public static byte HARDFLUSH;
    public static byte IGNORE;
    public static int HEADER_LEN;
    public static int HEADER_LEN_FIELD_OFFSET;
    public static int YUKON_HEADER_LEN;
    public static int MARS_ID_OFFSET;
    public static int HEADERTYPE_QNOTIFICATION;
    public static int HEADERTYPE_MARS;
    public static int HEADERTYPE_TRACE;
    public static int SUCCEED;
    public static int FAIL;
    public static short TYPE_SIZE_LIMIT;
    public static int MIN_PACKET_SIZE;
    public static int DEFAULT_LOGIN_PACKET_SIZE;
    public static int MAX_PRELOGIN_PAYLOAD_LENGTH;
    public static int MAX_PACKET_SIZE;
    public static int MAX_SERVER_USER_NAME;
    public static byte MIN_ERROR_CLASS;
    public static byte MAX_USER_CORRECTABLE_ERROR_CLASS;
    public static byte FATAL_ERROR_CLASS;
    public static byte MT_SQL;
    public static byte MT_LOGIN;
    public static byte MT_RPC;
    public static byte MT_TOKENS;
    public static byte MT_BINARY;
    public static byte MT_ATTN;
    public static byte MT_BULK;
    public static byte MT_OPEN;
    public static byte MT_CLOSE;
    public static byte MT_ERROR;
    public static byte MT_ACK;
    public static byte MT_ECHO;
    public static byte MT_LOGOUT;
    public static byte MT_TRANS;
    public static byte MT_OLEDB;
    public static byte MT_LOGIN7;
    public static byte MT_SSPI;
    public static byte MT_PRELOGIN;
    public static byte ST_EOM;
    public static byte ST_AACK;
    public static byte ST_IGNORE;
    public static byte ST_BATCH;
    public static byte ST_RESET_CONNECTION;
    public static byte ST_RESET_CONNECTION_PRESERVE_TRANSACTION;
    public static byte SQLCOLFMT;
    public static byte SQLPROCID;
    public static byte SQLCOLNAME;
    public static byte SQLTABNAME;
    public static byte SQLCOLINFO;
    public static byte SQLALTNAME;
    public static byte SQLALTFMT;
    public static byte SQLERROR;
    public static byte SQLINFO;
    public static byte SQLRETURNVALUE;
    public static byte SQLRETURNSTATUS;
    public static byte SQLRETURNTOK;
    public static byte SQLALTCONTROL;
    public static byte SQLROW;
    public static byte SQLNBCROW;
    public static byte SQLALTROW;
    public static byte SQLDONE;
    public static byte SQLDONEPROC;
    public static byte SQLDONEINPROC;
    public static byte SQLOFFSET;
    public static byte SQLORDER;
    public static byte SQLDEBUG_CMD;
    public static byte SQLLOGINACK;
    public static byte SQLFEATUREEXTACK;
    public static byte SQLSESSIONSTATE;
    public static byte SQLENVCHANGE;
    public static byte SQLSECLEVEL;
    public static byte SQLROWCRC;
    public static byte SQLCOLMETADATA;
    public static byte SQLALTMETADATA;
    public static byte SQLSSPI;
    public static byte ENV_DATABASE;
    public static byte ENV_LANG;
    public static byte ENV_CHARSET;
    public static byte ENV_PACKETSIZE;
    public static byte ENV_LOCALEID;
    public static byte ENV_COMPFLAGS;
    public static byte ENV_COLLATION;
    public static byte ENV_BEGINTRAN;
    public static byte ENV_COMMITTRAN;
    public static byte ENV_ROLLBACKTRAN;
    public static byte ENV_ENLISTDTC;
    public static byte ENV_DEFECTDTC;
    public static byte ENV_LOGSHIPNODE;
    public static byte ENV_PROMOTETRANSACTION;
    public static byte ENV_TRANSACTIONMANAGERADDRESS;
    public static byte ENV_TRANSACTIONENDED;
    public static byte ENV_SPRESETCONNECTIONACK;
    public static byte ENV_USERINSTANCE;
    public static byte ENV_ROUTING;
    public static int DONE_MORE;
    public static int DONE_ERROR;
    public static int DONE_INXACT;
    public static int DONE_PROC;
    public static int DONE_COUNT;
    public static int DONE_ATTN;
    public static int DONE_INPROC;
    public static int DONE_RPCINBATCH;
    public static int DONE_SRVERROR;
    public static int DONE_FMTSENT;
    public static byte FEATUREEXT_TERMINATOR;
    public static byte FEATUREEXT_SRECOVERY;
    public static byte FEATUREEXT_FEDAUTH;
    public static byte FEATUREEXT_GLOBALTRANSACTIONS;
    public static byte FEATUREEXT_UTF8SUPPORT;
    public static UInt32 UTF8_IN_TDSCOLLATION;
    public static byte FEDAUTHLIB_LIVEID;
    public static byte FEDAUTHLIB_SECURITYTOKEN;
    public static byte FEDAUTHLIB_ADAL;
    public static byte FEDAUTHLIB_RESERVED;
    public static byte MAX_LOG_NAME;
    public static byte MAX_PROG_NAME;
    public static byte SEC_COMP_LEN;
    public static byte MAX_PK_LEN;
    public static byte MAX_NIC_SIZE;
    public static byte SQLVARIANT_SIZE;
    public static byte VERSION_SIZE;
    public static int CLIENT_PROG_VER;
    public static int YUKON_LOG_REC_FIXED_LEN;
    public static int TEXT_TIME_STAMP_LEN;
    public static int COLLATION_INFO_LEN;
    public static int YUKON_MAJOR;
    public static int KATMAI_MAJOR;
    public static int DENALI_MAJOR;
    public static int YUKON_INCREMENT;
    public static int KATMAI_INCREMENT;
    public static int DENALI_INCREMENT;
    public static int YUKON_RTM_MINOR;
    public static int KATMAI_MINOR;
    public static int DENALI_MINOR;
    public static int ORDER_68000;
    public static int USE_DB_ON;
    public static int INIT_DB_FATAL;
    public static int SET_LANG_ON;
    public static int INIT_LANG_FATAL;
    public static int ODBC_ON;
    public static int SSPI_ON;
    public static int REPL_ON;
    public static int READONLY_INTENT_ON;
    public static byte SQLLenMask;
    public static byte SQLFixedLen;
    public static byte SQLVarLen;
    public static byte SQLZeroLen;
    public static byte SQLVarCnt;
    public static byte SQLDifferentName;
    public static byte SQLExpression;
    public static byte SQLKey;
    public static byte SQLHidden;
    public static byte Nullable;
    public static byte Identity;
    public static byte Updatability;
    public static byte ClrFixedLen;
    public static byte IsColumnSet;
    public static UInt32 VARLONGNULL;
    public static int VARNULL;
    public static int MAXSIZE;
    public static byte FIXEDNULL;
    public static ulong UDTNULL;
    public static int SQLVOID;
    public static int SQLTEXT;
    public static int SQLVARBINARY;
    public static int SQLINTN;
    public static int SQLVARCHAR;
    public static int SQLBINARY;
    public static int SQLIMAGE;
    public static int SQLCHAR;
    public static int SQLINT1;
    public static int SQLBIT;
    public static int SQLINT2;
    public static int SQLINT4;
    public static int SQLMONEY;
    public static int SQLDATETIME;
    public static int SQLFLT8;
    public static int SQLFLTN;
    public static int SQLMONEYN;
    public static int SQLDATETIMN;
    public static int SQLFLT4;
    public static int SQLMONEY4;
    public static int SQLDATETIM4;
    public static int SQLDECIMALN;
    public static int SQLNUMERICN;
    public static int SQLUNIQUEID;
    public static int SQLBIGCHAR;
    public static int SQLBIGVARCHAR;
    public static int SQLBIGBINARY;
    public static int SQLBIGVARBINARY;
    public static int SQLBITN;
    public static int SQLNCHAR;
    public static int SQLNVARCHAR;
    public static int SQLNTEXT;
    public static int SQLUDT;
    public static int AOPCNTB;
    public static int AOPSTDEV;
    public static int AOPSTDEVP;
    public static int AOPVAR;
    public static int AOPVARP;
    public static int AOPCNT;
    public static int AOPSUM;
    public static int AOPAVG;
    public static int AOPMIN;
    public static int AOPMAX;
    public static int AOPANY;
    public static int AOPNOOP;
    public static int SQLTIMESTAMP;
    public static int MAX_NUMERIC_LEN;
    public static int DEFAULT_NUMERIC_PRECISION;
    public static int SPHINX_DEFAULT_NUMERIC_PRECISION;
    public static int MAX_NUMERIC_PRECISION;
    public static byte UNKNOWN_PRECISION_SCALE;
    public static int SQLINT8;
    public static int SQLVARIANT;
    public static int SQLXMLTYPE;
    public static int XMLUNICODEBOM;
    public static Byte[] XMLUNICODEBOMBYTES;
    public static int SQLTABLE;
    public static int SQLDATE;
    public static int SQLTIME;
    public static int SQLDATETIME2;
    public static int SQLDATETIMEOFFSET;
    public static int DEFAULT_VARTIME_SCALE;
    public static ulong SQL_PLP_NULL;
    public static ulong SQL_PLP_UNKNOWNLEN;
    public static int SQL_PLP_CHUNK_TERMINATOR;
    public static ushort SQL_USHORTVARMAXLEN;
    public static byte TVP_ROWCOUNT_ESTIMATE;
    public static byte TVP_ROW_TOKEN;
    public static byte TVP_END_TOKEN;
    public static ushort TVP_NOMETADATA_TOKEN;
    public static byte TVP_ORDER_UNIQUE_TOKEN;
    public static int TVP_DEFAULT_COLUMN;
    public static byte TVP_ORDERASC_FLAG;
    public static byte TVP_ORDERDESC_FLAG;
    public static byte TVP_UNIQUE_FLAG;
    public static string SP_EXECUTESQL;
    public static string SP_PREPEXEC;
    public static string SP_PREPARE;
    public static string SP_EXECUTE;
    public static string SP_UNPREPARE;
    public static string SP_PARAMS;
    public static string SP_PARAMS_MANAGED;
    public static string SP_PARAMS_MGD10;
    public static ushort RPC_PROCID_CURSOR;
    public static ushort RPC_PROCID_CURSOROPEN;
    public static ushort RPC_PROCID_CURSORPREPARE;
    public static ushort RPC_PROCID_CURSOREXECUTE;
    public static ushort RPC_PROCID_CURSORPREPEXEC;
    public static ushort RPC_PROCID_CURSORUNPREPARE;
    public static ushort RPC_PROCID_CURSORFETCH;
    public static ushort RPC_PROCID_CURSOROPTION;
    public static ushort RPC_PROCID_CURSORCLOSE;
    public static ushort RPC_PROCID_EXECUTESQL;
    public static ushort RPC_PROCID_PREPARE;
    public static ushort RPC_PROCID_EXECUTE;
    public static ushort RPC_PROCID_PREPEXEC;
    public static ushort RPC_PROCID_PREPEXECRPC;
    public static ushort RPC_PROCID_UNPREPARE;
    public static string TRANS_BEGIN;
    public static string TRANS_COMMIT;
    public static string TRANS_ROLLBACK;
    public static string TRANS_IF_ROLLBACK;
    public static string TRANS_SAVE;
    public static string TRANS_READ_COMMITTED;
    public static string TRANS_READ_UNCOMMITTED;
    public static string TRANS_REPEATABLE_READ;
    public static string TRANS_SERIALIZABLE;
    public static string TRANS_SNAPSHOT;
    public static byte SHILOH_RPCBATCHFLAG;
    public static byte YUKON_RPCBATCHFLAG;
    public static byte RPC_RECOMPILE;
    public static byte RPC_NOMETADATA;
    public static byte RPC_PARAM_BYREF;
    public static byte RPC_PARAM_DEFAULT;
    public static byte RPC_PARAM_IS_LOB_COOKIE;
    public static string PARAM_OUTPUT;
    public static int MAX_PARAMETER_NAME_LENGTH;
    public static string FMTONLY_ON;
    public static string FMTONLY_OFF;
    public static string BROWSE_ON;
    public static string BROWSE_OFF;
    public static string TABLE;
    public static int EXEC_THRESHOLD;
    public static short TIMEOUT_EXPIRED;
    public static short ENCRYPTION_NOT_SUPPORTED;
    public static int LOGON_FAILED;
    public static int PASSWORD_EXPIRED;
    public static int IMPERSONATION_FAILED;
    public static int P_TOKENTOOLONG;
    public static UInt32 SNI_UNINITIALIZED;
    public static UInt32 SNI_SUCCESS;
    public static UInt32 SNI_ERROR;
    public static UInt32 SNI_WAIT_TIMEOUT;
    public static UInt32 SNI_SUCCESS_IO_PENDING;
    public static short SNI_WSAECONNRESET;
    public static UInt32 SNI_QUEUE_FULL;
    public static UInt32 SNI_SSL_VALIDATE_CERTIFICATE;
    public static UInt32 SNI_SSL_USE_SCHANNEL_CACHE;
    public static UInt32 SNI_SSL_IGNORE_CHANNEL_BINDINGS;
    public static string DEFAULT_ENGLISH_CODE_PAGE_STRING;
    public static short DEFAULT_ENGLISH_CODE_PAGE_VALUE;
    public static short CHARSET_CODE_PAGE_OFFSET;
    internal static int MAX_SERVERNAME;
    internal static ushort SELECT;
    internal static ushort INSERT;
    internal static ushort DELETE;
    internal static ushort UPDATE;
    internal static ushort ABORT;
    internal static ushort BEGINXACT;
    internal static ushort ENDXACT;
    internal static ushort BULKINSERT;
    internal static ushort OPENCURSOR;
    internal static ushort MERGE;
    internal static ushort MAXLEN_HOSTNAME;
    internal static ushort MAXLEN_USERNAME;
    internal static ushort MAXLEN_PASSWORD;
    internal static ushort MAXLEN_APPNAME;
    internal static ushort MAXLEN_SERVERNAME;
    internal static ushort MAXLEN_CLIENTINTERFACE;
    internal static ushort MAXLEN_LANGUAGE;
    internal static ushort MAXLEN_DATABASE;
    internal static ushort MAXLEN_ATTACHDBFILE;
    internal static ushort MAXLEN_NEWPASSWORD;
    public static UInt16[] CODE_PAGE_FROM_SORT_ID;
    internal static Int64[] TICKS_FROM_SCALE;
    internal static int WHIDBEY_DATE_LENGTH;
    internal static Int32[] WHIDBEY_TIME_LENGTH;
    internal static Int32[] WHIDBEY_DATETIME2_LENGTH;
    internal static Int32[] WHIDBEY_DATETIMEOFFSET_LENGTH;
    private static TdsEnums();
    internal static string GetSniContextEnumName(SniContext sniContext);
}
internal class System.Data.SqlClient.TdsParameterSetter : SmiTypedGetterSetter {
    private TdsRecordBufferSetter _target;
    internal bool CanGet { get; }
    internal bool CanSet { get; }
    internal TdsParameterSetter(TdsParserStateObject stateObj, SmiMetaData md);
    internal virtual bool get_CanGet();
    internal virtual bool get_CanSet();
    internal virtual SmiTypedGetterSetter GetTypedGetterSetter(SmiEventSink sink, int ordinal);
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
}
internal class System.Data.SqlClient.TdsParser : object {
    internal TdsParserStateObject _physicalStateObj;
    internal TdsParserStateObject _pMarsPhysicalConObj;
    private static int constBinBufferSize;
    private static int constTextBufferSize;
    internal TdsParserState _state;
    private string _server;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fResetConnection;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fPreserveTransaction;
    private SqlCollation _defaultCollation;
    private int _defaultCodePage;
    private int _defaultLCID;
    internal Encoding _defaultEncoding;
    private static EncryptionOptions s_sniSupportedEncryptionOption;
    private EncryptionOptions _encryptionOption;
    private SqlInternalTransaction _currentTransaction;
    private SqlInternalTransaction _pendingTransaction;
    private long _retainedTransactionId;
    private int _nonTransactedOpenResultCount;
    private SqlInternalConnectionTds _connHandler;
    private bool _fMARS;
    internal bool _loginWithFailover;
    internal AutoResetEvent _resetConnectionEvent;
    internal TdsParserSessionPool _sessionPool;
    private bool _isYukon;
    private bool _isKatmai;
    private bool _isDenali;
    private Byte[] _sniSpnBuffer;
    private SqlStatistics _statistics;
    private bool _statisticsIsInTransaction;
    private static Byte[] s_nicAddress;
    private static UInt32 modreq(System.Runtime.CompilerServices.IsVolatile) s_maxSSPILength;
    private static Byte[] s_longDataHeader;
    private static object s_tdsParserLock;
    private static Byte[] s_xmlMetadataSubstituteSequence;
    private static int GUID_SIZE;
    internal bool _asyncWrite;
    private static ulong _indeterminateSize;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_fSSPILoaded;
    internal SqlInternalConnectionTds Connection { get; }
    internal SqlInternalTransaction CurrentTransaction { get; internal set; }
    internal int DefaultLCID { get; }
    internal EncryptionOptions EncryptionOptions { get; internal set; }
    internal bool IsKatmaiOrNewer { get; }
    internal bool MARSOn { get; }
    internal SqlInternalTransaction PendingTransaction { get; internal set; }
    internal string Server { get; }
    internal TdsParserState State { get; internal set; }
    internal SqlStatistics Statistics { get; internal set; }
    internal TdsParser(bool MARS, bool fAsynchronous);
    private static TdsParser();
    internal SqlInternalConnectionTds get_Connection();
    internal SqlInternalTransaction get_CurrentTransaction();
    internal void set_CurrentTransaction(SqlInternalTransaction value);
    internal int get_DefaultLCID();
    internal EncryptionOptions get_EncryptionOptions();
    internal void set_EncryptionOptions(EncryptionOptions value);
    internal bool get_IsKatmaiOrNewer();
    internal bool get_MARSOn();
    internal SqlInternalTransaction get_PendingTransaction();
    internal void set_PendingTransaction(SqlInternalTransaction value);
    internal string get_Server();
    internal TdsParserState get_State();
    internal void set_State(TdsParserState value);
    internal SqlStatistics get_Statistics();
    internal void set_Statistics(SqlStatistics value);
    internal int IncrementNonTransactedOpenResultCount();
    internal void DecrementNonTransactedOpenResultCount();
    internal void ProcessPendingAck(TdsParserStateObject stateObj);
    internal void Connect(ServerInfo serverInfo, SqlInternalConnectionTds connHandler, bool ignoreSniOpenTimeout, long timerExpire, bool encrypt, bool trustServerCert, bool integratedSecurity, bool withFailover);
    internal void RemoveEncryption();
    internal void EnableMars();
    internal TdsParserStateObject CreateSession();
    internal TdsParserStateObject GetSession(object owner);
    internal void PutSession(TdsParserStateObject session);
    private void SendPreLoginHandshake(Byte[] instanceName, bool encrypt);
    private PreLoginHandshakeStatus ConsumePreLoginHandshake(bool encrypt, bool trustServerCert, bool integratedSecurity, Boolean& marsCapable, Boolean& fedAuthRequired);
    internal void Deactivate(bool connectionIsDoomed);
    internal void Disconnect();
    private void FireInfoMessageEvent(SqlConnection connection, TdsParserStateObject stateObj, SqlError error);
    internal void DisconnectTransaction(SqlInternalTransaction internalTransaction);
    internal void RollbackOrphanedAPITransactions();
    internal void ThrowExceptionAndWarning(TdsParserStateObject stateObj, bool callerHasConnectionLock, bool asyncClose);
    internal SqlError ProcessSNIError(TdsParserStateObject stateObj);
    internal void CheckResetConnection(TdsParserStateObject stateObj);
    internal void WriteShort(int v, TdsParserStateObject stateObj);
    internal void WriteUnsignedShort(ushort us, TdsParserStateObject stateObj);
    internal void WriteUnsignedInt(UInt32 i, TdsParserStateObject stateObj);
    internal void WriteInt(int v, TdsParserStateObject stateObj);
    internal void WriteFloat(float v, TdsParserStateObject stateObj);
    internal void WriteLong(long v, TdsParserStateObject stateObj);
    internal void WritePartialLong(long v, int length, TdsParserStateObject stateObj);
    internal void WriteUnsignedLong(ulong uv, TdsParserStateObject stateObj);
    internal void WriteDouble(double v, TdsParserStateObject stateObj);
    internal void PrepareResetConnection(bool preserveTransaction);
    internal bool Run(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj);
    internal static bool IsValidTdsToken(byte token);
    internal bool TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady);
    private static void TryRunSetupSpinWaitContinuation(TdsParserStateObject stateObj);
    private bool TryProcessEnvChange(int tokenLength, TdsParserStateObject stateObj, SqlEnvChange& sqlEnvChange);
    private bool TryReadTwoBinaryFields(SqlEnvChange env, TdsParserStateObject stateObj);
    private bool TryReadTwoStringFields(SqlEnvChange env, TdsParserStateObject stateObj);
    private bool TryProcessDone(SqlCommand cmd, SqlDataReader reader, RunBehavior& run, TdsParserStateObject stateObj);
    private void ProcessSqlStatistics(ushort curCmd, ushort status, int count);
    private bool TryProcessFeatureExtAck(TdsParserStateObject stateObj);
    private bool TryProcessSessionState(TdsParserStateObject stateObj, int length, SessionData sdata);
    private bool TryProcessLoginAck(TdsParserStateObject stateObj, SqlLoginAck& sqlLoginAck);
    internal bool TryProcessError(byte token, TdsParserStateObject stateObj, SqlError& error);
    internal bool TryProcessReturnValue(int length, TdsParserStateObject stateObj, SqlReturnValue& returnValue);
    internal bool TryProcessCollation(TdsParserStateObject stateObj, SqlCollation& collation);
    private void WriteCollation(SqlCollation collation, TdsParserStateObject stateObj);
    internal int GetCodePage(SqlCollation collation, TdsParserStateObject stateObj);
    internal void DrainData(TdsParserStateObject stateObj);
    internal void ThrowUnsupportedCollationEncountered(TdsParserStateObject stateObj);
    internal bool TryProcessAltMetaData(int cColumns, TdsParserStateObject stateObj, _SqlMetaDataSet& metaData);
    internal bool TryProcessMetaData(int cColumns, TdsParserStateObject stateObj, _SqlMetaDataSet& metaData);
    private bool IsVarTimeTds(byte tdsType);
    private bool TryCommonProcessMetaData(TdsParserStateObject stateObj, _SqlMetaData col);
    private void WriteUDTMetaData(object value, string database, string schema, string type, TdsParserStateObject stateObj);
    internal bool TryProcessTableName(int length, TdsParserStateObject stateObj, MultiPartTableName[]& multiPartTableNames);
    private bool TryProcessOneTable(TdsParserStateObject stateObj, Int32& length, MultiPartTableName& multiPartTableName);
    private bool TryProcessColInfo(_SqlMetaDataSet columns, SqlDataReader reader, TdsParserStateObject stateObj, _SqlMetaDataSet& metaData);
    internal bool TryProcessColumnHeader(SqlMetaDataPriv col, TdsParserStateObject stateObj, int columnOrdinal, Boolean& isNull, UInt64& length);
    private bool TryProcessColumnHeaderNoNBC(SqlMetaDataPriv col, TdsParserStateObject stateObj, Boolean& isNull, UInt64& length);
    internal bool TryGetAltRowId(TdsParserStateObject stateObj, Int32& id);
    private bool TryProcessRow(_SqlMetaDataSet columns, Object[] buffer, Int32[] map, TdsParserStateObject stateObj);
    internal object GetNullSqlValue(SqlBuffer nullVal, SqlMetaDataPriv md);
    internal bool TrySkipRow(_SqlMetaDataSet columns, TdsParserStateObject stateObj);
    internal bool TrySkipRow(_SqlMetaDataSet columns, int startCol, TdsParserStateObject stateObj);
    internal bool TrySkipValue(SqlMetaDataPriv md, int columnOrdinal, TdsParserStateObject stateObj);
    private bool IsNull(MetaType mt, ulong length);
    private bool TryReadSqlStringValue(SqlBuffer value, byte type, int length, Encoding encoding, bool isPlp, TdsParserStateObject stateObj);
    internal bool TryReadSqlValue(SqlBuffer value, SqlMetaDataPriv md, int length, TdsParserStateObject stateObj);
    private bool TryReadSqlDateTime(SqlBuffer value, byte tdsType, int length, byte scale, TdsParserStateObject stateObj);
    internal bool TryReadSqlValueInternal(SqlBuffer value, byte tdsType, int length, TdsParserStateObject stateObj);
    internal bool TryReadSqlVariant(SqlBuffer value, int lenTotal, TdsParserStateObject stateObj);
    internal Task WriteSqlVariantValue(object value, int length, int offset, TdsParserStateObject stateObj, bool canAccumulate);
    internal Task WriteSqlVariantDataRowValue(object value, TdsParserStateObject stateObj, bool canAccumulate);
    internal void WriteSqlVariantHeader(int length, byte tdstype, byte propbytes, TdsParserStateObject stateObj);
    internal void WriteSqlVariantDateTime2(DateTime value, TdsParserStateObject stateObj);
    internal void WriteSqlVariantDate(DateTime value, TdsParserStateObject stateObj);
    private void WriteSqlMoney(SqlMoney value, int length, TdsParserStateObject stateObj);
    private void WriteCurrency(decimal value, int length, TdsParserStateObject stateObj);
    private void WriteDate(DateTime value, TdsParserStateObject stateObj);
    private void WriteTime(TimeSpan value, byte scale, int length, TdsParserStateObject stateObj);
    private void WriteDateTime2(DateTime value, byte scale, int length, TdsParserStateObject stateObj);
    private void WriteDateTimeOffset(DateTimeOffset value, byte scale, int length, TdsParserStateObject stateObj);
    private bool TryReadSqlDecimal(SqlBuffer value, int length, byte precision, byte scale, TdsParserStateObject stateObj);
    private bool TryReadDecimalBits(int length, TdsParserStateObject stateObj, Int32[]& bits);
    internal static SqlDecimal AdjustSqlDecimalScale(SqlDecimal d, int newScale);
    internal static decimal AdjustDecimalScale(decimal value, int newScale);
    internal void WriteSqlDecimal(SqlDecimal d, TdsParserStateObject stateObj);
    private void WriteDecimal(decimal value, TdsParserStateObject stateObj);
    private void WriteIdentifier(string s, TdsParserStateObject stateObj);
    private void WriteIdentifierWithShortLength(string s, TdsParserStateObject stateObj);
    private Task WriteString(string s, TdsParserStateObject stateObj, bool canAccumulate);
    internal Task WriteCharArray(Char[] carr, int length, int offset, TdsParserStateObject stateObj, bool canAccumulate);
    internal Task WriteString(string s, int length, int offset, TdsParserStateObject stateObj, bool canAccumulate);
    private static void CopyCharsToBytes(Char[] source, int sourceOffset, Byte[] dest, int destOffset, int charLength);
    private static void CopyStringToBytes(string source, int sourceOffset, Byte[] dest, int destOffset, int charLength);
    private Task WriteEncodingChar(string s, Encoding encoding, TdsParserStateObject stateObj, bool canAccumulate);
    private Task WriteEncodingChar(string s, int numChars, int offset, Encoding encoding, TdsParserStateObject stateObj, bool canAccumulate);
    internal int GetEncodingCharLength(string value, int numChars, int charOffset, Encoding encoding);
    internal bool TryGetDataLength(SqlMetaDataPriv colmeta, TdsParserStateObject stateObj, UInt64& length);
    internal bool TryGetTokenLength(byte token, TdsParserStateObject stateObj, Int32& tokenLength);
    private void ProcessAttention(TdsParserStateObject stateObj);
    private static int StateValueLength(int dataLen);
    internal int WriteSessionRecoveryFeatureRequest(SessionData reconnectData, bool write);
    internal int WriteFedAuthFeatureRequest(FederatedAuthenticationFeatureExtensionData fedAuthFeatureData, bool write);
    internal int WriteGlobalTransactionsFeatureRequest(bool write);
    internal int WriteUTF8SupportFeatureRequest(bool write);
    internal void TdsLogin(SqlLogin rec, FeatureExtension requestedFeatures, SessionData recoverySessionData, Nullable`1<FederatedAuthenticationFeatureExtensionData> fedAuthFeatureExtensionData);
    private void SSPIData(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength);
    private void SNISSPIData(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength);
    private void ProcessSSPI(int receivedLength);
    private void SSPIError(string error, string procedure);
    internal Byte[] GetDTCAddress(int timeout, TdsParserStateObject stateObj);
    internal void PropagateDistributedTransaction(Byte[] buffer, int timeout, TdsParserStateObject stateObj);
    internal SqlDataReader TdsExecuteTransactionManagerRequest(Byte[] buffer, TransactionManagerRequestType request, string transactionName, TransactionManagerIsolationLevel isoLevel, int timeout, SqlInternalTransaction transaction, TdsParserStateObject stateObj, bool isDelegateControlRequest);
    internal void FailureCleanup(TdsParserStateObject stateObj, Exception e);
    internal Task TdsExecuteSQLBatch(string text, int timeout, SqlNotificationRequest notificationRequest, TdsParserStateObject stateObj, bool sync, bool callerHasConnectionLock);
    internal Task TdsExecuteRPC(_SqlRPC[] rpcArray, int timeout, bool inSchema, SqlNotificationRequest notificationRequest, TdsParserStateObject stateObj, bool isCommandProc, bool sync, TaskCompletionSource`1<object> completion, int startRpc, int startParam);
    private Task TDSExecuteRPCAddParameter(TdsParserStateObject stateObj, SqlParameter param, MetaType mt, byte options);
    private void TDSExecuteRPCParameterSetupWriteCompletion(_SqlRPC[] rpcArray, int timeout, bool inSchema, SqlNotificationRequest notificationRequest, TdsParserStateObject stateObj, bool isCommandProc, bool sync, TaskCompletionSource`1<object> completion, int startRpc, int startParam, Task writeParamTask);
    private void TDSExecuteRPCParameterSetupFlushCompletion(TdsParserStateObject stateObj, TaskCompletionSource`1<object> completion, Task execFlushTask, bool taskReleaseConnectionLock);
    private void FinalizeExecuteRPC(TdsParserStateObject stateObj);
    private void TdsExecuteRPC_OnFailure(Exception exc, TdsParserStateObject stateObj);
    private void ExecuteFlushTaskCallback(Task tsk, TdsParserStateObject stateObj, TaskCompletionSource`1<object> completion, bool releaseConnectionLock);
    private void WriteParameterName(string parameterName, TdsParserStateObject stateObj);
    private void WriteSmiParameter(SqlParameter param, int paramIndex, bool sendDefault, TdsParserStateObject stateObj);
    private void WriteSmiParameterMetaData(SmiParameterMetaData metaData, bool sendDefault, TdsParserStateObject stateObj);
    private void WriteSmiTypeInfo(SmiExtendedMetaData metaData, TdsParserStateObject stateObj);
    private void WriteTvpTypeInfo(SmiExtendedMetaData metaData, TdsParserStateObject stateObj);
    private void WriteTvpColumnMetaData(SmiExtendedMetaData md, bool isDefault, TdsParserStateObject stateObj);
    private void WriteTvpOrderUnique(SmiExtendedMetaData metaData, TdsParserStateObject stateObj);
    internal Task WriteBulkCopyDone(TdsParserStateObject stateObj);
    internal void WriteBulkCopyMetaData(_SqlMetaDataSet metadataCollection, int count, TdsParserStateObject stateObj);
    internal Task WriteBulkCopyValue(object value, SqlMetaDataPriv metadata, TdsParserStateObject stateObj, bool isSqlType, bool isDataFeed, bool isNull);
    private Task WriteBulkCopyValueSetupContinuation(Task internalWriteTask, Encoding saveEncoding, SqlCollation saveCollation, int saveCodePage, int saveLCID);
    private void WriteMarsHeaderData(TdsParserStateObject stateObj, SqlInternalTransaction transaction);
    private int GetNotificationHeaderSize(SqlNotificationRequest notificationRequest);
    private void WriteQueryNotificationHeaderData(SqlNotificationRequest notificationRequest, TdsParserStateObject stateObj);
    private void WriteRPCBatchHeaders(TdsParserStateObject stateObj, SqlNotificationRequest notificationRequest);
    private void WriteTokenLength(byte token, int length, TdsParserStateObject stateObj);
    private bool IsBOMNeeded(MetaType type, object value);
    private Task GetTerminationTask(Task unterminatedWriteTask, object value, MetaType type, int actualLength, TdsParserStateObject stateObj, bool isDataFeed);
    private Task WriteSqlValue(object value, MetaType type, int actualLength, int codePageByteSize, int offset, TdsParserStateObject stateObj);
    private Task WriteUnterminatedSqlValue(object value, MetaType type, int actualLength, int codePageByteSize, int offset, TdsParserStateObject stateObj);
    [AsyncStateMachineAttribute("System.Data.SqlClient.TdsParser/<WriteXmlFeed>d__207")]
private Task WriteXmlFeed(XmlDataFeed feed, TdsParserStateObject stateObj, bool needBom, Encoding encoding, int size);
    [AsyncStateMachineAttribute("System.Data.SqlClient.TdsParser/<WriteTextFeed>d__208")]
private Task WriteTextFeed(TextDataFeed feed, Encoding encoding, bool needBom, TdsParserStateObject stateObj, int size);
    [AsyncStateMachineAttribute("System.Data.SqlClient.TdsParser/<WriteStreamFeed>d__209")]
private Task WriteStreamFeed(StreamDataFeed feed, TdsParserStateObject stateObj, int len);
    private Task NullIfCompletedWriteTask(Task task);
    private Task WriteValue(object value, MetaType type, byte scale, int actualLength, int encodingByteSize, int offset, TdsParserStateObject stateObj, int paramSize, bool isDataFeed);
    private Task WriteUnterminatedValue(object value, MetaType type, byte scale, int actualLength, int encodingByteSize, int offset, TdsParserStateObject stateObj, int paramSize, bool isDataFeed);
    internal void WriteParameterVarLen(MetaType type, int size, bool isNull, TdsParserStateObject stateObj, bool unknownLength);
    private bool TryReadPlpUnicodeCharsChunk(Char[] buff, int offst, int len, TdsParserStateObject stateObj, Int32& charsRead);
    internal int ReadPlpUnicodeChars(Char[]& buff, int offst, int len, TdsParserStateObject stateObj);
    internal bool TryReadPlpUnicodeChars(Char[]& buff, int offst, int len, TdsParserStateObject stateObj, Int32& totalCharsRead);
    internal int ReadPlpAnsiChars(Char[]& buff, int offst, int len, SqlMetaDataPriv metadata, TdsParserStateObject stateObj);
    internal ulong SkipPlpValue(ulong cb, TdsParserStateObject stateObj);
    internal bool TrySkipPlpValue(ulong cb, TdsParserStateObject stateObj, UInt64& totalBytesSkipped);
    internal ulong PlpBytesLeft(TdsParserStateObject stateObj);
    internal bool TryPlpBytesLeft(TdsParserStateObject stateObj, UInt64& left);
    internal ulong PlpBytesTotalLength(TdsParserStateObject stateObj);
    private bool TryProcessUDTMetaData(SqlMetaDataPriv metaData, TdsParserStateObject stateObj);
    internal static void FillGuidBytes(Guid guid, Span`1<byte> buffer);
    internal static void FillDoubleBytes(double value, Span`1<byte> buffer);
    internal static void FillFloatBytes(float v, Span`1<byte> buffer);
    internal static Guid ConstructGuid(ReadOnlySpan`1<byte> bytes);
    internal void PostReadAsyncForMars();
    private void LoadSSPILibrary();
    private void WaitForSSLHandShakeToComplete(UInt32& error);
    private SNIErrorDetails GetSniErrorDetails();
    [CompilerGeneratedAttribute]
private void <TdsExecuteRPC>b__177_0(Task _);
}
internal class System.Data.SqlClient.TdsParserSessionPool : object {
    private static int MaxInactiveCount;
    private TdsParser _parser;
    private List`1<TdsParserStateObject> _cache;
    private int _cachedCount;
    private TdsParserStateObject[] _freeStateObjects;
    private int _freeStateObjectCount;
    private bool IsDisposed { get; }
    internal int ActiveSessionsCount { get; }
    internal TdsParserSessionPool(TdsParser parser);
    private bool get_IsDisposed();
    internal void Deactivate();
    internal void Dispose();
    internal TdsParserStateObject GetSession(object owner);
    internal void PutSession(TdsParserStateObject session);
    internal int get_ActiveSessionsCount();
}
internal enum System.Data.SqlClient.TdsParserState : Enum {
    public int value__;
    public static TdsParserState Closed;
    public static TdsParserState OpenNotLoggedIn;
    public static TdsParserState OpenLoggedIn;
    public static TdsParserState Broken;
}
internal abstract class System.Data.SqlClient.TdsParserStateObject : object {
    private static int AttentionTimeoutSeconds;
    private static long CheckConnectionWindow;
    protected TdsParser _parser;
    private WeakReference _owner;
    internal SharedState _readerState;
    private int _activateCount;
    internal int _inputHeaderLen;
    internal int _outputHeaderLen;
    internal Byte[] _outBuff;
    internal int _outBytesUsed;
    protected Byte[] _inBuff;
    internal int _inBytesUsed;
    internal int _inBytesRead;
    internal int _inBytesPacket;
    internal byte _outputMessageType;
    internal byte _messageStatus;
    internal byte _outputPacketNumber;
    internal UInt32 _outputPacketCount;
    internal bool _pendingData;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fResetEventOwned;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fResetConnectionSent;
    internal bool _errorTokenReceived;
    internal bool _bulkCopyOpperationInProgress;
    internal bool _bulkCopyWriteTimeout;
    protected object _writePacketLockObject;
    private int _pendingCallbacks;
    private long _timeoutMilliseconds;
    private long _timeoutTime;
    private int _timeoutState;
    private int _timeoutIdentitySource;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _timeoutIdentityValue;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _attentionSent;
    internal bool _attentionReceived;
    internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _attentionSending;
    internal bool _enforceTimeoutDelay;
    internal int _enforcedTimeoutDelayInMilliSeconds;
    private LastIOTimer _lastSuccessfulIOTimer;
    private SecureString[] _securePasswords;
    private Int32[] _securePasswordOffsetsInBuffer;
    private bool _cancelled;
    private static int _waitForCancellationLockPollTimeout;
    private WeakReference _cancellationOwner;
    internal bool _hasOpenResult;
    internal SqlInternalTransaction _executedUnderTransaction;
    internal ulong _longlen;
    internal ulong _longlenleft;
    internal Int32[] _decimalBits;
    internal Byte[] _bTmp;
    internal int _bTmpRead;
    internal Decoder _plpdecoder;
    internal bool _accumulateInfoEvents;
    internal List`1<SqlError> _pendingInfoEvents;
    private Byte[] _partialHeaderBuffer;
    internal int _partialHeaderBytesRead;
    internal _SqlMetaDataSet _cleanupMetaData;
    internal _SqlMetaDataSetCollection _cleanupAltMetaDataSetArray;
    internal bool _receivedColMetaData;
    private SniContext _sniContext;
    private bool _bcpLock;
    private NullBitmap _nullBitmapInfo;
    internal TaskCompletionSource`1<object> _networkPacketTaskSource;
    private Timer _networkPacketTimeout;
    internal bool _syncOverAsync;
    private bool _snapshotReplay;
    private StateSnapshot _snapshot;
    internal ExecutionContext _executionContext;
    internal bool _asyncReadWithoutSnapshot;
    internal SqlErrorCollection _errors;
    internal SqlErrorCollection _warnings;
    internal object _errorAndWarningsLock;
    private bool _hasErrorOrWarning;
    internal SqlErrorCollection _preAttentionErrors;
    internal SqlErrorCollection _preAttentionWarnings;
    private TaskCompletionSource`1 modreq(System.Runtime.CompilerServices.IsVolatile) _writeCompletionSource;
    protected Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _asyncWriteCount;
    private Exception modreq(System.Runtime.CompilerServices.IsVolatile) _delayedWriteAsyncCallbackException;
    private int _readingCount;
    internal bool BcpLock { get; internal set; }
    internal bool HasOpenResult { get; }
    internal bool IsOrphaned { get; }
    unknown object Owner {internal set; }
    internal bool HasOwner { get; }
    internal TdsParser Parser { get; }
    internal SniContext SniContext { get; internal set; }
    internal UInt32 Status { get; }
    internal SessionHandle SessionHandle { get; }
    internal bool TimeoutHasExpired { get; }
    internal long TimeoutTime { get; internal set; }
    public bool IsTimeoutStateExpired { get; }
    internal bool HasErrorOrWarning { get; }
    internal int ErrorCount { get; }
    internal int WarningCount { get; }
    protected PacketHandle EmptyReadPacket { get; }
    internal TdsParserStateObject(TdsParser parser);
    internal TdsParserStateObject(TdsParser parser, TdsParserStateObject physicalConnection, bool async);
    internal bool get_BcpLock();
    internal void set_BcpLock(bool value);
    internal bool get_HasOpenResult();
    internal bool get_IsOrphaned();
    internal void set_Owner(object value);
    internal abstract virtual UInt32 DisabeSsl();
    internal bool get_HasOwner();
    internal TdsParser get_Parser();
    internal abstract virtual UInt32 EnableMars(UInt32& info);
    internal SniContext get_SniContext();
    internal void set_SniContext(SniContext value);
    internal abstract virtual UInt32 get_Status();
    internal abstract virtual SessionHandle get_SessionHandle();
    internal bool get_TimeoutHasExpired();
    internal long get_TimeoutTime();
    internal void set_TimeoutTime(long value);
    internal int GetTimeoutRemaining();
    internal bool TryStartNewRow(bool isNullCompressed, int nullBitmapColumnsCount);
    internal bool IsRowTokenReady();
    internal bool IsNullCompressionBitSet(int columnOrdinal);
    internal void Activate(object owner);
    internal void Cancel(object caller);
    internal void CancelRequest();
    public void CheckSetResetConnectionState(UInt32 error, CallbackType callbackType);
    internal void CloseSession();
    private void ResetCancelAndProcessAttention();
    internal abstract virtual void CreatePhysicalSNIHandle(string serverName, bool ignoreSniOpenTimeout, long timerExpire, Byte[]& instanceName, Byte[]& spnBuffer, bool flushCache, bool async, bool fParallel, bool isIntegratedSecurity);
    internal abstract virtual UInt32 SniGetConnectionId(Guid& clientConnectionId);
    internal abstract virtual bool IsFailedHandle();
    protected abstract virtual void CreateSessionHandle(TdsParserStateObject physicalConnection, bool async);
    protected abstract virtual void FreeGcHandle(int remaining, bool release);
    internal abstract virtual UInt32 EnableSsl(UInt32& info);
    internal abstract virtual UInt32 WaitForSSLHandShakeToComplete();
    internal abstract virtual void Dispose();
    internal abstract virtual void DisposePacketCache();
    internal abstract virtual bool IsPacketEmpty(PacketHandle readPacket);
    internal abstract virtual PacketHandle ReadSyncOverAsync(int timeoutRemaining, UInt32& error);
    internal abstract virtual PacketHandle ReadAsync(SessionHandle handle, UInt32& error);
    internal abstract virtual UInt32 CheckConnection();
    internal abstract virtual UInt32 SetConnectionBufferSize(UInt32& unsignedPacketSize);
    internal abstract virtual void ReleasePacket(PacketHandle syncReadPacket);
    protected abstract virtual UInt32 SNIPacketGetData(PacketHandle packet, Byte[] _inBuff, UInt32& dataSize);
    internal abstract virtual PacketHandle GetResetWritePacket(int dataSize);
    internal abstract virtual void ClearAllWritePackets();
    internal abstract virtual PacketHandle AddPacketToPendingList(PacketHandle packet);
    protected abstract virtual void RemovePacketFromPendingList(PacketHandle pointer);
    internal abstract virtual UInt32 GenerateSspiClientContext(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength, Byte[] _sniSpnBuffer);
    internal bool Deactivate();
    internal void RemoveOwner();
    internal void DecrementOpenResultCount();
    internal int DecrementPendingCallbacks(bool release);
    internal void DisposeCounters();
    internal int IncrementAndObtainOpenResultCount(SqlInternalTransaction transaction);
    internal int IncrementPendingCallbacks();
    internal void SetTimeoutSeconds(int timeout);
    internal void SetTimeoutMilliseconds(long timeout);
    internal void StartSession(object cancellationOwner);
    internal void ThrowExceptionAndWarning(bool callerHasConnectionLock, bool asyncClose);
    internal Task ExecuteFlush();
    internal bool TryProcessHeader();
    internal bool TryPrepareBuffer();
    internal void ResetBuffer();
    internal void ResetPacketCounters();
    internal bool SetPacketSize(int size);
    internal bool TryPeekByte(Byte& value);
    public bool TryReadByteArray(Span`1<byte> buff, int len);
    public bool TryReadByteArray(Span`1<byte> buff, int len, Int32& totalRead);
    internal bool TryReadByte(Byte& value);
    internal bool TryReadChar(Char& value);
    internal bool TryReadInt16(Int16& value);
    internal bool TryReadInt32(Int32& value);
    internal bool TryReadInt64(Int64& value);
    internal bool TryReadUInt16(UInt16& value);
    internal bool TryReadUInt32(UInt32& value);
    internal bool TryReadSingle(Single& value);
    internal bool TryReadDouble(Double& value);
    internal bool TryReadString(int length, String& value);
    internal bool TryReadStringWithEncoding(int length, Encoding encoding, bool isPlp, String& value);
    internal ulong ReadPlpLength(bool returnPlpNullIfNull);
    internal bool TryReadPlpLength(bool returnPlpNullIfNull, UInt64& lengthLeft);
    internal int ReadPlpBytesChunk(Byte[] buff, int offset, int len);
    internal bool TryReadPlpBytes(Byte[]& buff, int offset, int len, Int32& totalBytesRead);
    internal bool TrySkipLongBytes(long num);
    internal bool TrySkipBytes(int num);
    internal void SetSnapshot();
    internal void ResetSnapshot();
    internal bool TryReadNetworkPacket();
    internal void PrepareReplaySnapshot();
    internal void ReadSniSyncOverAsync();
    internal void OnConnectionClosed();
    public void SetTimeoutStateStopped();
    public bool get_IsTimeoutStateExpired();
    private void OnTimeoutAsync(object state);
    private bool OnTimeoutSync(bool asyncClose);
    private bool OnTimeoutCore(int expectedState, int targetState, bool asyncClose);
    internal void ReadSni(TaskCompletionSource`1<object> completion);
    internal bool IsConnectionAlive(bool throwOnException);
    internal bool ValidateSNIConnection();
    private void ReadSniError(TdsParserStateObject stateObj, UInt32 error);
    public void ProcessSniPacket(PacketHandle packet, UInt32 error);
    private void ChangeNetworkPacketTimeout(int dueTime, int period);
    private void SetBufferSecureStrings();
    public void ReadAsyncCallback(PacketHandle packet, UInt32 error);
    public void ReadAsyncCallback(IntPtr key, PacketHandle packet, UInt32 error);
    protected abstract virtual bool CheckPacket(PacketHandle packet, TaskCompletionSource`1<object> source);
    private void ReadAsyncCallbackCaptureException(TaskCompletionSource`1<object> source);
    public void WriteAsyncCallback(PacketHandle packet, UInt32 sniError);
    public void WriteAsyncCallback(IntPtr key, PacketHandle packet, UInt32 sniError);
    internal void WriteSecureString(SecureString secureString);
    internal void ResetSecurePasswordsInformation();
    internal Task WaitForAccumulatedWrites();
    internal void WriteByte(byte b);
    internal Task WriteByteSpan(ReadOnlySpan`1<byte> span, bool canAccumulate, TaskCompletionSource`1<object> completion);
    internal Task WriteByteArray(Byte[] b, int len, int offsetBuffer, bool canAccumulate, TaskCompletionSource`1<object> completion);
    private Task WriteBytes(ReadOnlySpan`1<byte> b, int len, int offsetBuffer, bool canAccumulate, TaskCompletionSource`1<object> completion, Byte[] array);
    private void WriteBytesSetupContinuation(Byte[] array, int len, TaskCompletionSource`1<object> completion, int offset, Task packetTask);
    internal Task WritePacket(byte flushMode, bool canAccumulate);
    private void CancelWritePacket();
    private Task SNIWritePacket(PacketHandle packet, UInt32& sniError, bool canAccumulate, bool callerHasConnectionLock, bool asyncClose);
    internal abstract virtual bool IsValidPacket(PacketHandle packetPointer);
    internal abstract virtual UInt32 WritePacket(PacketHandle packet, bool sync);
    internal void SendAttention(bool mustTakeWriteLock, bool asyncClose);
    internal abstract virtual PacketHandle CreateAndSetAttentionPacket();
    internal abstract virtual void SetPacketData(PacketHandle packet, Byte[] buffer, int bytesUsed);
    private Task WriteSni(bool canAccumulate);
    private void SniReadStatisticsAndTracing();
    private void SniWriteStatisticsAndTracing();
    [ConditionalAttribute("DEBUG")]
private void AssertValidState();
    internal bool get_HasErrorOrWarning();
    internal void AddError(SqlError error);
    internal int get_ErrorCount();
    internal void AddWarning(SqlError error);
    internal int get_WarningCount();
    protected abstract virtual PacketHandle get_EmptyReadPacket();
    internal SqlErrorCollection GetFullErrorAndWarningCollection(Boolean& broken);
    private void AddErrorsToCollection(SqlErrorCollection inCollection, SqlErrorCollection& collectionToAddTo, Boolean& broken);
    internal void StoreErrorAndWarningForAttention();
    internal void RestoreErrorAndWarningAfterAttention();
    internal void CheckThrowSNIException();
    [ConditionalAttribute("DEBUG")]
internal void AssertStateIsClean();
    internal void CloneCleanupAltMetaDataSetArray();
    [CompilerGeneratedAttribute]
private bool <DisposeCounters>b__143_0();
    [CompilerGeneratedAttribute]
private void <ExecuteFlush>b__150_0();
}
internal class System.Data.SqlClient.TdsParserStateObjectFactory : object {
    private static string UseLegacyNetworkingOnWindows;
    public static TdsParserStateObjectFactory Singleton;
    [CompilerGeneratedAttribute]
private static bool <UseManagedSNI>k__BackingField;
    public static bool UseManagedSNI { get; }
    public EncryptionOptions EncryptionOptions { get; }
    public UInt32 SNIStatus { get; }
    private static TdsParserStateObjectFactory();
    [CompilerGeneratedAttribute]
public static bool get_UseManagedSNI();
    public EncryptionOptions get_EncryptionOptions();
    public UInt32 get_SNIStatus();
    public TdsParserStateObject CreateTdsParserStateObject(TdsParser parser);
    internal TdsParserStateObject CreateSessionObject(TdsParser tdsParser, TdsParserStateObject _pMarsPhysicalConObj, bool v);
}
internal class System.Data.SqlClient.TdsParserStateObjectNative : TdsParserStateObject {
    private SNIHandle _sessionHandle;
    private SNIPacket _sniPacket;
    internal SNIPacket _sniAsyncAttnPacket;
    private WritePacketCache _writePacketCache;
    private GCHandle _gcHandle;
    private Dictionary`2<IntPtr, SNIPacket> _pendingWritePackets;
    internal SNIHandle Handle { get; }
    internal UInt32 Status { get; }
    internal SessionHandle SessionHandle { get; }
    protected PacketHandle EmptyReadPacket { get; }
    public TdsParserStateObjectNative(TdsParser parser);
    internal TdsParserStateObjectNative(TdsParser parser, TdsParserStateObject physicalConnection, bool async);
    internal SNIHandle get_Handle();
    internal virtual UInt32 get_Status();
    internal virtual SessionHandle get_SessionHandle();
    protected virtual void CreateSessionHandle(TdsParserStateObject physicalConnection, bool async);
    private ConsumerInfo CreateConsumerInfo(bool async);
    internal virtual void CreatePhysicalSNIHandle(string serverName, bool ignoreSniOpenTimeout, long timerExpire, Byte[]& instanceName, Byte[]& spnBuffer, bool flushCache, bool async, bool fParallel, bool isIntegratedSecurity);
    protected virtual UInt32 SNIPacketGetData(PacketHandle packet, Byte[] _inBuff, UInt32& dataSize);
    protected virtual bool CheckPacket(PacketHandle packet, TaskCompletionSource`1<object> source);
    public void ReadAsyncCallback(IntPtr key, IntPtr packet, UInt32 error);
    public void WriteAsyncCallback(IntPtr key, IntPtr packet, UInt32 sniError);
    protected virtual void RemovePacketFromPendingList(PacketHandle ptr);
    internal virtual void Dispose();
    protected virtual void FreeGcHandle(int remaining, bool release);
    internal virtual bool IsFailedHandle();
    internal virtual PacketHandle ReadSyncOverAsync(int timeoutRemaining, UInt32& error);
    protected virtual PacketHandle get_EmptyReadPacket();
    internal virtual bool IsPacketEmpty(PacketHandle readPacket);
    internal virtual void ReleasePacket(PacketHandle syncReadPacket);
    internal virtual UInt32 CheckConnection();
    internal virtual PacketHandle ReadAsync(SessionHandle handle, UInt32& error);
    internal virtual PacketHandle CreateAndSetAttentionPacket();
    internal virtual UInt32 WritePacket(PacketHandle packet, bool sync);
    internal virtual PacketHandle AddPacketToPendingList(PacketHandle packetToAdd);
    internal virtual bool IsValidPacket(PacketHandle packetPointer);
    internal virtual PacketHandle GetResetWritePacket(int dataSize);
    internal virtual void ClearAllWritePackets();
    internal virtual void SetPacketData(PacketHandle packet, Byte[] buffer, int bytesUsed);
    internal virtual UInt32 SniGetConnectionId(Guid& clientConnectionId);
    internal virtual UInt32 DisabeSsl();
    internal virtual UInt32 EnableMars(UInt32& info);
    internal virtual UInt32 EnableSsl(UInt32& info);
    internal virtual UInt32 SetConnectionBufferSize(UInt32& unsignedPacketSize);
    internal virtual UInt32 GenerateSspiClientContext(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength, Byte[] _sniSpnBuffer);
    internal virtual UInt32 WaitForSSLHandShakeToComplete();
    internal virtual void DisposePacketCache();
}
internal class System.Data.SqlClient.TdsParserStaticMethods : object {
    private static int NoProcessId;
    private static int s_currentProcessId;
    private static Byte[] s_nicAddress;
    private static TdsParserStaticMethods();
    internal static Byte[] ObfuscatePassword(string password);
    internal static Byte[] ObfuscatePassword(Byte[] password);
    internal static int GetCurrentProcessIdForTdsLoginOnly();
    internal static int GetCurrentThreadIdForTdsLoginOnly();
    internal static Byte[] GetNetworkPhysicalAddressForTdsLoginOnly();
    internal static int GetTimeoutMilliseconds(long timeoutTime);
    internal static long GetTimeout(long timeoutMilliseconds);
    internal static bool TimeoutHasExpired(long timeoutTime);
    internal static int NullAwareStringLength(string str);
    internal static int GetRemainingTimeout(int timeout, long start);
}
internal class System.Data.SqlClient.TdsRecordBufferSetter : SmiRecordBuffer {
    private TdsValueSetter[] _fieldSetters;
    private TdsParserStateObject _stateObj;
    private SmiMetaData _metaData;
    internal bool CanGet { get; }
    internal bool CanSet { get; }
    internal TdsRecordBufferSetter(TdsParserStateObject stateObj, SmiMetaData md);
    internal virtual bool get_CanGet();
    internal virtual bool get_CanSet();
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
    public virtual void SetTimeSpan(SmiEventSink sink, int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(SmiEventSink sink, int ordinal, DateTimeOffset value);
    public virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
    internal virtual void NewElement(SmiEventSink sink);
    internal virtual void EndElements(SmiEventSink sink);
    [ConditionalAttribute("DEBUG")]
private void CheckWritingToColumn(int ordinal);
    [ConditionalAttribute("DEBUG")]
private void SkipPossibleDefaultedColumns(int targetColumn);
    [ConditionalAttribute("DEBUG")]
internal void CheckSettingColumn(int ordinal);
}
internal class System.Data.SqlClient.TdsValueSetter : object {
    private TdsParserStateObject _stateObj;
    private SmiMetaData _metaData;
    private bool _isPlp;
    private bool _plpUnknownSent;
    private Encoder _encoder;
    private SmiMetaData _variantType;
    internal TdsValueSetter(TdsParserStateObject stateObj, SmiMetaData md);
    internal void SetDBNull();
    internal void SetBoolean(bool value);
    internal void SetByte(byte value);
    internal int SetBytes(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    private void SetBytesNoOffsetHandling(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal void SetBytesLength(long length);
    internal int SetChars(long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal void SetCharsLength(long length);
    internal void SetString(string value, int offset, int length);
    internal void SetInt16(short value);
    internal void SetInt32(int value);
    internal void SetInt64(long value);
    internal void SetSingle(float value);
    internal void SetDouble(double value);
    internal void SetSqlDecimal(SqlDecimal value);
    internal void SetDateTime(DateTime value);
    internal void SetGuid(Guid value);
    internal void SetTimeSpan(TimeSpan value);
    internal void SetDateTimeOffset(DateTimeOffset value);
    internal void SetVariantType(SmiMetaData value);
    [ConditionalAttribute("DEBUG")]
private void CheckSettingOffset(long offset);
}
internal class System.Data.SqlClient.TextDataFeed : DataFeed {
    private static UnicodeEncoding s_defaultEncoding;
    internal TextReader _source;
    internal static UnicodeEncoding DefaultEncoding { get; }
    internal TextDataFeed(TextReader source);
    internal static UnicodeEncoding get_DefaultEncoding();
}
internal enum System.Data.SqlClient.TransactionState : Enum {
    public int value__;
    public static TransactionState Pending;
    public static TransactionState Active;
    public static TransactionState Aborted;
    public static TransactionState Committed;
    public static TransactionState Unknown;
}
internal enum System.Data.SqlClient.TransactionType : Enum {
    public int value__;
    public static TransactionType LocalFromTSQL;
    public static TransactionType LocalFromAPI;
    public static TransactionType Delegated;
    public static TransactionType Distributed;
    public static TransactionType Context;
}
internal class System.Data.SqlClient.WritePacketCache : object {
    private bool _disposed;
    private Stack`1<SNIPacket> _packets;
    public SNIPacket Take(SNIHandle sniHandle);
    public void Add(SNIPacket packet);
    public void Clear();
    public sealed virtual void Dispose();
}
internal class System.Data.SqlClient.XmlDataFeed : DataFeed {
    internal XmlReader _source;
    internal XmlDataFeed(XmlReader source);
}
public class System.Data.SqlTypes.SqlFileStream : Stream {
    internal static int DefaultBufferSize;
    private static ushort IoControlCodeFunctionCode;
    private static int ERROR_MR_MID_NOT_FOUND;
    private static ushort FILE_DEVICE_FILE_SYSTEM;
    private FileStream _m_fs;
    private string _m_path;
    private Byte[] _m_txn;
    private bool _m_disposed;
    private static Byte[] s_eaNameString;
    public string Name { get; private set; }
    public Byte[] TransactionContext { get; private set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    public SqlFileStream(string path, Byte[] transactionContext, FileAccess access);
    public SqlFileStream(string path, Byte[] transactionContext, FileAccess access, FileOptions options, long allocationSize);
    private static SqlFileStream();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public string get_Name();
    private void set_Name(string value);
    public Byte[] get_TransactionContext();
    private void set_TransactionContext(Byte[] value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual void Flush();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    [ConditionalAttribute("DEBUG")]
private static void AssertPathFormat(string path);
    private static string GetFullPathInternal(string path);
    private void OpenSqlFileStream(string sPath, Byte[] transactionContext, FileAccess access, FileOptions options, long allocationSize);
    private static string InitializeNtPath(string path);
}
internal static class System.Data.SqlTypes.SQLResource : object {
    internal static string NullString { get; }
    internal static string MessageString { get; }
    internal static string ArithOverflowMessage { get; }
    internal static string DivideByZeroMessage { get; }
    internal static string NullValueMessage { get; }
    internal static string TruncationMessage { get; }
    internal static string DateTimeOverflowMessage { get; }
    internal static string ConcatDiffCollationMessage { get; }
    internal static string CompareDiffCollationMessage { get; }
    internal static string InvalidFlagMessage { get; }
    internal static string NumeToDecOverflowMessage { get; }
    internal static string ConversionOverflowMessage { get; }
    internal static string InvalidDateTimeMessage { get; }
    internal static string TimeZoneSpecifiedMessage { get; }
    internal static string InvalidArraySizeMessage { get; }
    internal static string InvalidPrecScaleMessage { get; }
    internal static string FormatMessage { get; }
    internal static string NotFilledMessage { get; }
    internal static string AlreadyFilledMessage { get; }
    internal static string ClosedXmlReaderMessage { get; }
    internal static string get_NullString();
    internal static string get_MessageString();
    internal static string get_ArithOverflowMessage();
    internal static string get_DivideByZeroMessage();
    internal static string get_NullValueMessage();
    internal static string get_TruncationMessage();
    internal static string get_DateTimeOverflowMessage();
    internal static string get_ConcatDiffCollationMessage();
    internal static string get_CompareDiffCollationMessage();
    internal static string get_InvalidFlagMessage();
    internal static string get_NumeToDecOverflowMessage();
    internal static string get_ConversionOverflowMessage();
    internal static string get_InvalidDateTimeMessage();
    internal static string get_TimeZoneSpecifiedMessage();
    internal static string get_InvalidArraySizeMessage();
    internal static string get_InvalidPrecScaleMessage();
    internal static string get_FormatMessage();
    internal static string get_NotFilledMessage();
    internal static string get_AlreadyFilledMessage();
    internal static string get_ClosedXmlReaderMessage();
    internal static string InvalidOpStreamClosed(string method);
    internal static string InvalidOpStreamNonWritable(string method);
    internal static string InvalidOpStreamNonReadable(string method);
    internal static string InvalidOpStreamNonSeekable(string method);
}
internal static class System.Data.SqlTypes.SqlTypeWorkarounds : object {
    private static XmlReaderSettings s_defaultXmlReaderSettings;
    private static XmlReaderSettings s_defaultXmlReaderSettingsCloseInput;
    private static XmlReaderSettings s_defaultXmlReaderSettingsAsyncCloseInput;
    internal static SqlCompareOptions SqlStringValidSqlCompareOptionMask;
    private static SqlTypeWorkarounds();
    internal static XmlReader SqlXmlCreateSqlXmlReader(Stream stream, bool closeInput, bool async);
    internal static XmlReader SqlXmlCreateSqlXmlReader(TextReader textReader, bool closeInput, bool async);
    internal static DateTime SqlDateTimeToDateTime(int daypart, int timepart);
    internal static SqlMoney SqlMoneyCtor(long value, int ignored);
    internal static long SqlMoneyToSqlInternalRepresentation(SqlMoney money);
    internal static void SqlDecimalExtractData(SqlDecimal d, UInt32& data1, UInt32& data2, UInt32& data3, UInt32& data4);
    internal static SqlBinary SqlBinaryCtor(Byte[] value, bool ignored);
    internal static SqlGuid SqlGuidCtor(Byte[] value, bool ignored);
}
internal static class System.Data.Win32NativeMethods : object {
    internal static bool IsTokenRestrictedWrapper(IntPtr token);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
internal static class System.IO.PathInternal : object {
    internal static char DirectorySeparatorChar;
    internal static char AltDirectorySeparatorChar;
    internal static char VolumeSeparatorChar;
    internal static char PathSeparator;
    internal static string DirectorySeparatorCharAsString;
    internal static string ExtendedPathPrefix;
    internal static string UncPathPrefix;
    internal static string UncExtendedPrefixToInsert;
    internal static string UncExtendedPathPrefix;
    internal static string DevicePathPrefix;
    internal static string ParentDirectoryPrefix;
    internal static int MaxShortPath;
    internal static int MaxShortDirectoryPath;
    internal static int DevicePrefixLength;
    internal static int UncPrefixLength;
    internal static int UncExtendedPrefixLength;
    internal static bool IsValidDriveChar(char value);
    internal static bool EndsWithPeriodOrSpace(string path);
    internal static string EnsureExtendedPrefixIfNeeded(string path);
    internal static string EnsureExtendedPrefix(string path);
    internal static bool IsDevice(ReadOnlySpan`1<char> path);
    internal static bool IsDeviceUNC(ReadOnlySpan`1<char> path);
    internal static bool IsExtended(ReadOnlySpan`1<char> path);
    internal static bool HasWildCardCharacters(ReadOnlySpan`1<char> path);
    internal static int GetRootLength(ReadOnlySpan`1<char> path);
    internal static bool IsPartiallyQualified(ReadOnlySpan`1<char> path);
    internal static bool IsDirectorySeparator(char c);
    internal static string NormalizeDirectorySeparators(string path);
    internal static bool IsEffectivelyEmpty(ReadOnlySpan`1<char> path);
}
internal static class System.Net.ContextFlagsAdapterPal : object {
    private static ContextFlagMapping[] s_contextFlagMapping;
    private static ContextFlagsAdapterPal();
    internal static ContextFlagsPal GetContextFlagsPalFromInterop(ContextFlags win32Flags);
    internal static ContextFlags GetInteropFromContextFlagsPal(ContextFlagsPal flags);
}
[FlagsAttribute]
internal enum System.Net.ContextFlagsPal : Enum {
    public int value__;
    public static ContextFlagsPal None;
    public static ContextFlagsPal Delegate;
    public static ContextFlagsPal MutualAuth;
    public static ContextFlagsPal ReplayDetect;
    public static ContextFlagsPal SequenceDetect;
    public static ContextFlagsPal Confidentiality;
    public static ContextFlagsPal UseSessionKey;
    public static ContextFlagsPal AllocateMemory;
    public static ContextFlagsPal Connection;
    public static ContextFlagsPal InitExtendedError;
    public static ContextFlagsPal AcceptExtendedError;
    public static ContextFlagsPal InitStream;
    public static ContextFlagsPal AcceptStream;
    public static ContextFlagsPal InitIntegrity;
    public static ContextFlagsPal AcceptIntegrity;
    public static ContextFlagsPal InitManualCredValidation;
    public static ContextFlagsPal InitUseSuppliedCreds;
    public static ContextFlagsPal InitIdentify;
    public static ContextFlagsPal AcceptIdentify;
    public static ContextFlagsPal ProxyBindings;
    public static ContextFlagsPal AllowMissingBindings;
    public static ContextFlagsPal UnverifiedTargetName;
}
internal static class System.Net.DebugThreadTracking : object {
    [ThreadStaticAttribute]
private static Stack`1<ThreadKinds> t_threadKindStack;
    private static Stack`1<ThreadKinds> ThreadKindStack { get; }
    internal static ThreadKinds CurrentThreadKind { get; }
    private static Stack`1<ThreadKinds> get_ThreadKindStack();
    internal static ThreadKinds get_CurrentThreadKind();
    internal static IDisposable SetThreadKind(ThreadKinds kind);
    internal static void SetThreadSource(ThreadKinds source);
}
internal static class System.Net.GlobalSSPI : object {
    internal static SSPIAuthType SSPIAuth;
    internal static SSPISecureChannelType SSPISecureChannel;
    private static GlobalSSPI();
}
internal class System.Net.InternalException : Exception {
    private object _unexpectedValue;
    public string Message { get; }
    internal InternalException(object unexpectedValue);
    public virtual string get_Message();
}
internal static class System.Net.NegotiationInfoClass : object {
    internal static string NTLM;
    internal static string Kerberos;
    internal static string Negotiate;
    internal static string Basic;
    internal static string GetAuthenticationPackageName(SafeHandle safeHandle, int negotiationState);
}
internal class System.Net.NetEventSource : EventSource {
    public static NetEventSource Log;
    private static string MissingMember;
    private static string NullInstance;
    private static string StaticMethodObject;
    private static string NoParameters;
    private static int MaxDumpSize;
    private static int EnterEventId;
    private static int ExitEventId;
    private static int AssociateEventId;
    private static int InfoEventId;
    private static int ErrorEventId;
    private static int CriticalFailureEventId;
    private static int DumpArrayEventId;
    private static int EnumerateSecurityPackagesId;
    private static int SspiPackageNotFoundId;
    private static int AcquireDefaultCredentialId;
    private static int AcquireCredentialsHandleId;
    private static int InitializeSecurityContextId;
    private static int SecurityContextInputBufferId;
    private static int SecurityContextInputBuffersId;
    private static int AcceptSecuritContextId;
    private static int OperationReturnedSomethingId;
    private static int NextAvailableEventId;
    public static bool IsEnabled { get; }
    private static NetEventSource();
    [EventAttribute("8")]
public void EnumerateSecurityPackages(string securityPackage);
    [EventAttribute("9")]
public void SspiPackageNotFound(string packageName);
    [EventAttribute("10")]
public void AcquireDefaultCredential(string packageName, CredentialUse intent);
    [NonEventAttribute]
public void AcquireCredentialsHandle(string packageName, CredentialUse intent, object authdata);
    [EventAttribute("11")]
public void AcquireCredentialsHandle(string packageName, CredentialUse intent, string authdata);
    [NonEventAttribute]
public void InitializeSecurityContext(SafeFreeCredentials credential, SafeDeleteContext context, string targetName, ContextFlags inFlags);
    [EventAttribute("12")]
private void InitializeSecurityContext(string credential, string context, string targetName, ContextFlags inFlags);
    [NonEventAttribute]
public void AcceptSecurityContext(SafeFreeCredentials credential, SafeDeleteContext context, ContextFlags inFlags);
    [EventAttribute("15")]
private void AcceptSecurityContext(string credential, string context, ContextFlags inFlags);
    [EventAttribute("16")]
public void OperationReturnedSomething(string operation, SECURITY_STATUS errorCode);
    [EventAttribute("13")]
public void SecurityContextInputBuffer(string context, int inputBufferSize, int outputBufferSize, SECURITY_STATUS errorCode);
    [EventAttribute("14")]
public void SecurityContextInputBuffers(string context, int inputBuffersSize, int outputBufferSize, SECURITY_STATUS errorCode);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, object arg2, string memberName);
    [EventAttribute("1")]
private void Enter(string thisOrContextObject, string memberName, string parameters);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, object arg1, string memberName);
    [EventAttribute("2")]
private void Exit(string thisOrContextObject, string memberName, string result);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, object message, string memberName);
    [EventAttribute("4")]
private void Info(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, object message, string memberName);
    [EventAttribute("5")]
private void ErrorMessage(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, object message, string memberName);
    [EventAttribute("6")]
private void CriticalFailure(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, int offset, int count, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, IntPtr bufferPtr, int count, string memberName);
    [EventAttribute("7")]
private void DumpBuffer(string thisOrContextObject, string memberName, Byte[] buffer);
    [NonEventAttribute]
public static void Associate(object first, object second, string memberName);
    [NonEventAttribute]
public static void Associate(object thisOrContextObject, object first, object second, string memberName);
    [EventAttribute("3")]
private void Associate(string thisOrContextObject, string memberName, string first, string second);
    [ConditionalAttribute("DEBUG_NETEVENTSOURCE_MISUSE")]
private static void DebugValidateArg(object arg);
    [ConditionalAttribute("DEBUG_NETEVENTSOURCE_MISUSE")]
private static void DebugValidateArg(FormattableString arg);
    public static bool get_IsEnabled();
    [NonEventAttribute]
public static string IdOf(object value);
    [NonEventAttribute]
public static int GetHashCode(object value);
    [NonEventAttribute]
public static object Format(object value);
    [NonEventAttribute]
private static string Format(FormattableString s);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, string arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, Byte[] arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, int arg3, int arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, string arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, int arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, int arg4);
}
internal class System.Net.SecPkgContext_Bindings : ValueType {
    internal int BindingsLength;
    internal IntPtr Bindings;
}
internal class System.Net.SecPkgContext_CipherInfo : ValueType {
    private static int SZ_ALG_MAX_SIZE;
    private int dwVersion;
    private int dwProtocol;
    public int dwCipherSuite;
    private int dwBaseCipherSuite;
    [FixedBufferAttribute("System.Char", "64")]
private <szCipherSuite>e__FixedBuffer szCipherSuite;
    [FixedBufferAttribute("System.Char", "64")]
private <szCipher>e__FixedBuffer szCipher;
    private int dwCipherLen;
    private int dwCipherBlockLen;
    [FixedBufferAttribute("System.Char", "64")]
private <szHash>e__FixedBuffer szHash;
    private int dwHashLen;
    [FixedBufferAttribute("System.Char", "64")]
private <szExchange>e__FixedBuffer szExchange;
    private int dwMinExchangeLen;
    private int dwMaxExchangeLen;
    [FixedBufferAttribute("System.Char", "64")]
private <szCertificate>e__FixedBuffer szCertificate;
    private int dwKeyType;
}
internal class System.Net.SecPkgContext_ConnectionInfo : ValueType {
    public int Protocol;
    public int DataCipherAlg;
    public int DataKeySize;
    public int DataHashAlg;
    public int DataHashKeySize;
    public int KeyExchangeAlg;
    public int KeyExchKeySize;
}
internal class System.Net.SecPkgContext_NegotiationInfoW : ValueType {
    internal IntPtr PackageInfo;
    internal UInt32 NegotiationState;
}
internal class System.Net.SecPkgContext_Sizes : ValueType {
    public int cbMaxToken;
    public int cbMaxSignature;
    public int cbBlockSize;
    public int cbSecurityTrailer;
}
internal class System.Net.SecPkgContext_StreamSizes : ValueType {
    public int cbHeader;
    public int cbTrailer;
    public int cbMaximumMessage;
    public int cBuffers;
    public int cbBlockSize;
}
internal static class System.Net.Security.NegotiateStreamPal : object {
    internal static int QueryMaxTokenSize(string package);
    internal static SafeFreeCredentials AcquireDefaultCredential(string package, bool isServer);
    internal static SafeFreeCredentials AcquireCredentialsHandle(string package, bool isServer, NetworkCredential credential);
    internal static string QueryContextClientSpecifiedSpn(SafeDeleteContext securityContext);
    internal static string QueryContextAuthenticationPackage(SafeDeleteContext securityContext);
    internal static SecurityStatusPal InitializeSecurityContext(SafeFreeCredentials& credentialsHandle, SafeDeleteContext& securityContext, string spn, ContextFlagsPal requestedContextFlags, Byte[] incomingBlob, ChannelBinding channelBinding, Byte[]& resultBlob, ContextFlagsPal& contextFlags);
    internal static SecurityStatusPal CompleteAuthToken(SafeDeleteContext& securityContext, Byte[] incomingBlob);
    internal static SecurityStatusPal AcceptSecurityContext(SafeFreeCredentials credentialsHandle, SafeDeleteContext& securityContext, ContextFlagsPal requestedContextFlags, Byte[] incomingBlob, ChannelBinding channelBinding, Byte[]& resultBlob, ContextFlagsPal& contextFlags);
    internal static Win32Exception CreateExceptionFromError(SecurityStatusPal statusCode);
    internal static int VerifySignature(SafeDeleteContext securityContext, Byte[] buffer, int offset, int count);
    internal static int MakeSignature(SafeDeleteContext securityContext, Byte[] buffer, int offset, int count, Byte[]& output);
}
internal class System.Net.Security.SafeCredentialReference : CriticalHandleMinusOneIsInvalid {
    internal SafeFreeCredentials Target;
    private SafeCredentialReference(SafeFreeCredentials target);
    internal static SafeCredentialReference CreateReference(SafeFreeCredentials target);
    protected virtual bool ReleaseHandle();
}
internal abstract class System.Net.Security.SafeDeleteContext : SafeHandle {
    internal CredHandle _handle;
    private static string dummyStr;
    private static IdnMapping s_idnMapping;
    protected SafeFreeCredentials _EffectiveCredential;
    public bool IsInvalid { get; }
    private static SafeDeleteContext();
    public virtual bool get_IsInvalid();
    public virtual string ToString();
    internal static int InitializeSecurityContext(SafeFreeCredentials& inCredentials, SafeDeleteContext& refContext, string targetName, ContextFlags inFlags, Endianness endianness, ReadOnlySpan`1<SecurityBuffer> inSecBuffers, SecurityBuffer& outSecBuffer, ContextFlags& outFlags);
    private static int MustRunInitializeSecurityContext(SafeFreeCredentials& inCredentials, bool isContextAbsent, Byte* targetName, ContextFlags inFlags, Endianness endianness, SecBufferDesc* inputBuffer, SafeDeleteContext outContext, SecBufferDesc& outputBuffer, ContextFlags& attributes, SafeFreeContextBuffer handleTemplate);
    internal static int AcceptSecurityContext(SafeFreeCredentials& inCredentials, SafeDeleteContext& refContext, ContextFlags inFlags, Endianness endianness, ReadOnlySpan`1<SecurityBuffer> inSecBuffers, SecurityBuffer& outSecBuffer, ContextFlags& outFlags);
    private static int MustRunAcceptSecurityContext_SECURITY(SafeFreeCredentials& inCredentials, bool isContextAbsent, SecBufferDesc* inputBuffer, ContextFlags inFlags, Endianness endianness, SafeDeleteContext outContext, SecBufferDesc& outputBuffer, ContextFlags& outFlags, SafeFreeContextBuffer handleTemplate);
    internal static int CompleteAuthToken(SafeDeleteContext& refContext, SecurityBuffer& inSecBuffer);
    internal static int ApplyControlToken(SafeDeleteContext& refContext, SecurityBuffer& inSecBuffer);
}
internal class System.Net.Security.SafeDeleteContext_SECURITY : SafeDeleteContext {
    protected virtual bool ReleaseHandle();
}
internal class System.Net.Security.SafeFreeCertContext : SafeHandleZeroOrMinusOneIsInvalid {
    private static UInt32 CRYPT_ACQUIRE_SILENT_FLAG;
    internal void Set(IntPtr value);
    protected virtual bool ReleaseHandle();
}
internal abstract class System.Net.Security.SafeFreeContextBuffer : SafeHandleZeroOrMinusOneIsInvalid {
    internal void Set(IntPtr value);
    internal static int EnumeratePackages(Int32& pkgnum, SafeFreeContextBuffer& pkgArray);
    internal static SafeFreeContextBuffer CreateEmptyHandle();
    public static int QueryContextAttributes(SafeDeleteContext phContext, ContextAttribute contextAttribute, Byte* buffer, SafeHandle refHandle);
    public static int SetContextAttributes(SafeDeleteContext phContext, ContextAttribute contextAttribute, Byte[] buffer);
}
internal class System.Net.Security.SafeFreeContextBuffer_SECURITY : SafeFreeContextBuffer {
    protected virtual bool ReleaseHandle();
}
internal abstract class System.Net.Security.SafeFreeContextBufferChannelBinding : ChannelBinding {
    private int _size;
    public int Size { get; }
    public bool IsInvalid { get; }
    public virtual int get_Size();
    public virtual bool get_IsInvalid();
    internal void Set(IntPtr value);
    internal static SafeFreeContextBufferChannelBinding CreateEmptyHandle();
    public static int QueryContextChannelBinding(SafeDeleteContext phContext, ContextAttribute contextAttribute, SecPkgContext_Bindings* buffer, SafeFreeContextBufferChannelBinding refHandle);
    public virtual string ToString();
}
internal class System.Net.Security.SafeFreeContextBufferChannelBinding_SECURITY : SafeFreeContextBufferChannelBinding {
    protected virtual bool ReleaseHandle();
}
internal class System.Net.Security.SafeFreeCredential_SECURITY : SafeFreeCredentials {
    protected virtual bool ReleaseHandle();
}
internal abstract class System.Net.Security.SafeFreeCredentials : SafeHandle {
    internal CredHandle _handle;
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    public static int AcquireDefaultCredential(string package, CredentialUse intent, SafeFreeCredentials& outCredential);
    public static int AcquireCredentialsHandle(string package, CredentialUse intent, SafeSspiAuthDataHandle& authdata, SafeFreeCredentials& outCredential);
    public static int AcquireCredentialsHandle(string package, CredentialUse intent, SCHANNEL_CRED& authdata, SafeFreeCredentials& outCredential);
}
internal class System.Net.Security.SafeSspiAuthDataHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
internal class System.Net.Security.SecurityBuffer : ValueType {
    public int offset;
    public int size;
    public SecurityBufferType type;
    public Byte[] token;
    public SafeHandle unmanagedToken;
    public SecurityBuffer(Byte[] data, int offset, int size, SecurityBufferType tokentype);
    public SecurityBuffer(Byte[] data, SecurityBufferType tokentype);
    public SecurityBuffer(int size, SecurityBufferType tokentype);
    public SecurityBuffer(ChannelBinding binding);
}
internal enum System.Net.Security.SecurityBufferType : Enum {
    public int value__;
    public static SecurityBufferType SECBUFFER_EMPTY;
    public static SecurityBufferType SECBUFFER_DATA;
    public static SecurityBufferType SECBUFFER_TOKEN;
    public static SecurityBufferType SECBUFFER_PKG_PARAMS;
    public static SecurityBufferType SECBUFFER_MISSING;
    public static SecurityBufferType SECBUFFER_EXTRA;
    public static SecurityBufferType SECBUFFER_STREAM_TRAILER;
    public static SecurityBufferType SECBUFFER_STREAM_HEADER;
    public static SecurityBufferType SECBUFFER_PADDING;
    public static SecurityBufferType SECBUFFER_STREAM;
    public static SecurityBufferType SECBUFFER_CHANNEL_BINDINGS;
    public static SecurityBufferType SECBUFFER_TARGET_HOST;
    public static SecurityBufferType SECBUFFER_ALERT;
    public static SecurityBufferType SECBUFFER_APPLICATION_PROTOCOLS;
    public static SecurityBufferType SECBUFFER_READONLY;
    public static SecurityBufferType SECBUFFER_READONLY_WITH_CHECKSUM;
}
internal class System.Net.Security.SecurityContextTokenHandle : CriticalHandleZeroOrMinusOneIsInvalid {
    private int _disposed;
    internal IntPtr DangerousGetHandle();
    protected virtual bool ReleaseHandle();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class System.Net.Security.ThreeSecurityBuffers : ValueType {
    internal SecurityBuffer _item0;
    private SecurityBuffer _item1;
    private SecurityBuffer _item2;
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class System.Net.Security.TwoSecurityBuffers : ValueType {
    internal SecurityBuffer _item0;
    private SecurityBuffer _item1;
}
internal class System.Net.SecurityPackageInfo : ValueType {
    internal int Capabilities;
    internal short Version;
    internal short RPCID;
    internal int MaxToken;
    internal IntPtr Name;
    internal IntPtr Comment;
}
internal class System.Net.SecurityPackageInfoClass : object {
    internal int Capabilities;
    internal short Version;
    internal short RPCID;
    internal int MaxToken;
    internal string Name;
    internal string Comment;
    internal SecurityPackageInfoClass(SafeHandle safeHandle, int index);
    public virtual string ToString();
}
internal static class System.Net.SecurityStatusAdapterPal : object {
    private static int StatusDictionarySize;
    private static BidirectionalDictionary`2<SECURITY_STATUS, SecurityStatusPalErrorCode> s_statusDictionary;
    private static SecurityStatusAdapterPal();
    internal static SecurityStatusPal GetSecurityStatusPalFromNativeInt(int win32SecurityStatus);
    internal static SecurityStatusPal GetSecurityStatusPalFromInterop(SECURITY_STATUS win32SecurityStatus, bool attachException);
    internal static SECURITY_STATUS GetInteropFromSecurityStatusPal(SecurityStatusPal status);
}
[IsReadOnlyAttribute]
internal class System.Net.SecurityStatusPal : ValueType {
    public SecurityStatusPalErrorCode ErrorCode;
    public Exception Exception;
    public SecurityStatusPal(SecurityStatusPalErrorCode errorCode, Exception exception);
    public virtual string ToString();
}
internal enum System.Net.SecurityStatusPalErrorCode : Enum {
    public int value__;
    public static SecurityStatusPalErrorCode NotSet;
    public static SecurityStatusPalErrorCode OK;
    public static SecurityStatusPalErrorCode ContinueNeeded;
    public static SecurityStatusPalErrorCode CompleteNeeded;
    public static SecurityStatusPalErrorCode CompAndContinue;
    public static SecurityStatusPalErrorCode ContextExpired;
    public static SecurityStatusPalErrorCode CredentialsNeeded;
    public static SecurityStatusPalErrorCode Renegotiate;
    public static SecurityStatusPalErrorCode OutOfMemory;
    public static SecurityStatusPalErrorCode InvalidHandle;
    public static SecurityStatusPalErrorCode Unsupported;
    public static SecurityStatusPalErrorCode TargetUnknown;
    public static SecurityStatusPalErrorCode InternalError;
    public static SecurityStatusPalErrorCode PackageNotFound;
    public static SecurityStatusPalErrorCode NotOwner;
    public static SecurityStatusPalErrorCode CannotInstall;
    public static SecurityStatusPalErrorCode InvalidToken;
    public static SecurityStatusPalErrorCode CannotPack;
    public static SecurityStatusPalErrorCode QopNotSupported;
    public static SecurityStatusPalErrorCode NoImpersonation;
    public static SecurityStatusPalErrorCode LogonDenied;
    public static SecurityStatusPalErrorCode UnknownCredentials;
    public static SecurityStatusPalErrorCode NoCredentials;
    public static SecurityStatusPalErrorCode MessageAltered;
    public static SecurityStatusPalErrorCode OutOfSequence;
    public static SecurityStatusPalErrorCode NoAuthenticatingAuthority;
    public static SecurityStatusPalErrorCode IncompleteMessage;
    public static SecurityStatusPalErrorCode IncompleteCredentials;
    public static SecurityStatusPalErrorCode BufferNotEnough;
    public static SecurityStatusPalErrorCode WrongPrincipal;
    public static SecurityStatusPalErrorCode TimeSkew;
    public static SecurityStatusPalErrorCode UntrustedRoot;
    public static SecurityStatusPalErrorCode IllegalMessage;
    public static SecurityStatusPalErrorCode CertUnknown;
    public static SecurityStatusPalErrorCode CertExpired;
    public static SecurityStatusPalErrorCode DecryptFailure;
    public static SecurityStatusPalErrorCode AlgorithmMismatch;
    public static SecurityStatusPalErrorCode SecurityQosFailed;
    public static SecurityStatusPalErrorCode SmartcardLogonRequired;
    public static SecurityStatusPalErrorCode UnsupportedPreauth;
    public static SecurityStatusPalErrorCode BadBinding;
    public static SecurityStatusPalErrorCode DowngradeDetected;
    public static SecurityStatusPalErrorCode ApplicationProtocolMismatch;
}
internal class System.Net.SSPIAuthType : object {
    private static SecurityPackageInfoClass[] modreq(System.Runtime.CompilerServices.IsVolatile) s_securityPackages;
    public SecurityPackageInfoClass[] SecurityPackages { get; public set; }
    public sealed virtual SecurityPackageInfoClass[] get_SecurityPackages();
    public sealed virtual void set_SecurityPackages(SecurityPackageInfoClass[] value);
    public sealed virtual int EnumerateSecurityPackages(Int32& pkgnum, SafeFreeContextBuffer& pkgArray);
    public sealed virtual int AcquireCredentialsHandle(string moduleName, CredentialUse usage, SafeSspiAuthDataHandle& authdata, SafeFreeCredentials& outCredential);
    public sealed virtual int AcquireDefaultCredential(string moduleName, CredentialUse usage, SafeFreeCredentials& outCredential);
    public sealed virtual int AcquireCredentialsHandle(string moduleName, CredentialUse usage, SCHANNEL_CRED& authdata, SafeFreeCredentials& outCredential);
    public sealed virtual int AcceptSecurityContext(SafeFreeCredentials credential, SafeDeleteContext& context, ReadOnlySpan`1<SecurityBuffer> inputBuffers, ContextFlags inFlags, Endianness endianness, SecurityBuffer& outputBuffer, ContextFlags& outFlags);
    public sealed virtual int InitializeSecurityContext(SafeFreeCredentials& credential, SafeDeleteContext& context, string targetName, ContextFlags inFlags, Endianness endianness, ReadOnlySpan`1<SecurityBuffer> inputBuffers, SecurityBuffer& outputBuffer, ContextFlags& outFlags);
    public sealed virtual int EncryptMessage(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int DecryptMessage(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int MakeSignature(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int VerifySignature(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int QueryContextChannelBinding(SafeDeleteContext context, ContextAttribute attribute, SafeFreeContextBufferChannelBinding& binding);
    public sealed virtual int QueryContextAttributes(SafeDeleteContext context, ContextAttribute attribute, Span`1<byte> buffer, Type handleType, SafeHandle& refHandle);
    public sealed virtual int QuerySecurityContextToken(SafeDeleteContext phContext, SecurityContextTokenHandle& phToken);
    public int CompleteAuthToken(SafeDeleteContext& refContext, SecurityBuffer& inputBuffer);
    private static int GetSecurityContextToken(SafeDeleteContext phContext, SecurityContextTokenHandle& safeHandle);
    public int ApplyControlToken(SafeDeleteContext& refContext, SecurityBuffer& inputBuffers);
    private sealed virtual override int System.Net.SSPIInterface.CompleteAuthToken(SafeDeleteContext& refContext, SecurityBuffer& modreq(System.Runtime.InteropServices.InAttribute) inputBuffer);
    private sealed virtual override int System.Net.SSPIInterface.ApplyControlToken(SafeDeleteContext& refContext, SecurityBuffer& modreq(System.Runtime.InteropServices.InAttribute) inputBuffer);
}
internal interface System.Net.SSPIInterface {
    public SecurityPackageInfoClass[] SecurityPackages { get; public set; }
    public abstract virtual SecurityPackageInfoClass[] get_SecurityPackages();
    public abstract virtual void set_SecurityPackages(SecurityPackageInfoClass[] value);
    public abstract virtual int EnumerateSecurityPackages(Int32& pkgnum, SafeFreeContextBuffer& pkgArray);
    public abstract virtual int AcquireCredentialsHandle(string moduleName, CredentialUse usage, SafeSspiAuthDataHandle& authdata, SafeFreeCredentials& outCredential);
    public abstract virtual int AcquireCredentialsHandle(string moduleName, CredentialUse usage, SCHANNEL_CRED& authdata, SafeFreeCredentials& outCredential);
    public abstract virtual int AcquireDefaultCredential(string moduleName, CredentialUse usage, SafeFreeCredentials& outCredential);
    public abstract virtual int AcceptSecurityContext(SafeFreeCredentials credential, SafeDeleteContext& context, ReadOnlySpan`1<SecurityBuffer> inputBuffers, ContextFlags inFlags, Endianness endianness, SecurityBuffer& outputBuffer, ContextFlags& outFlags);
    public abstract virtual int InitializeSecurityContext(SafeFreeCredentials& credential, SafeDeleteContext& context, string targetName, ContextFlags inFlags, Endianness endianness, ReadOnlySpan`1<SecurityBuffer> inputBuffers, SecurityBuffer& outputBuffer, ContextFlags& outFlags);
    public abstract virtual int EncryptMessage(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public abstract virtual int DecryptMessage(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public abstract virtual int MakeSignature(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public abstract virtual int VerifySignature(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public abstract virtual int QueryContextChannelBinding(SafeDeleteContext phContext, ContextAttribute attribute, SafeFreeContextBufferChannelBinding& refHandle);
    public abstract virtual int QueryContextAttributes(SafeDeleteContext phContext, ContextAttribute attribute, Span`1<byte> buffer, Type handleType, SafeHandle& refHandle);
    public abstract virtual int QuerySecurityContextToken(SafeDeleteContext phContext, SecurityContextTokenHandle& phToken);
    public abstract virtual int CompleteAuthToken(SafeDeleteContext& refContext, SecurityBuffer& modreq(System.Runtime.InteropServices.InAttribute) inputBuffer);
    public abstract virtual int ApplyControlToken(SafeDeleteContext& refContext, SecurityBuffer& modreq(System.Runtime.InteropServices.InAttribute) inputBuffer);
}
internal class System.Net.SSPISecureChannelType : object {
    private static SecurityPackageInfoClass[] modreq(System.Runtime.CompilerServices.IsVolatile) s_securityPackages;
    public SecurityPackageInfoClass[] SecurityPackages { get; public set; }
    public sealed virtual SecurityPackageInfoClass[] get_SecurityPackages();
    public sealed virtual void set_SecurityPackages(SecurityPackageInfoClass[] value);
    public sealed virtual int EnumerateSecurityPackages(Int32& pkgnum, SafeFreeContextBuffer& pkgArray);
    public sealed virtual int AcquireCredentialsHandle(string moduleName, CredentialUse usage, SafeSspiAuthDataHandle& authdata, SafeFreeCredentials& outCredential);
    public sealed virtual int AcquireDefaultCredential(string moduleName, CredentialUse usage, SafeFreeCredentials& outCredential);
    public sealed virtual int AcquireCredentialsHandle(string moduleName, CredentialUse usage, SCHANNEL_CRED& authdata, SafeFreeCredentials& outCredential);
    public sealed virtual int AcceptSecurityContext(SafeFreeCredentials credential, SafeDeleteContext& context, ReadOnlySpan`1<SecurityBuffer> inputBuffers, ContextFlags inFlags, Endianness endianness, SecurityBuffer& outputBuffer, ContextFlags& outFlags);
    public sealed virtual int InitializeSecurityContext(SafeFreeCredentials& credential, SafeDeleteContext& context, string targetName, ContextFlags inFlags, Endianness endianness, ReadOnlySpan`1<SecurityBuffer> inputBuffers, SecurityBuffer& outputBuffer, ContextFlags& outFlags);
    public sealed virtual int EncryptMessage(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int DecryptMessage(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int MakeSignature(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int VerifySignature(SafeDeleteContext context, SecBufferDesc& inputOutput, UInt32 sequenceNumber);
    public sealed virtual int QueryContextChannelBinding(SafeDeleteContext phContext, ContextAttribute attribute, SafeFreeContextBufferChannelBinding& refHandle);
    public sealed virtual int QueryContextAttributes(SafeDeleteContext phContext, ContextAttribute attribute, Span`1<byte> buffer, Type handleType, SafeHandle& refHandle);
    public sealed virtual int QuerySecurityContextToken(SafeDeleteContext phContext, SecurityContextTokenHandle& phToken);
    public int CompleteAuthToken(SafeDeleteContext& refContext, SecurityBuffer& inputBuffer);
    public int ApplyControlToken(SafeDeleteContext& refContext, SecurityBuffer& inputBuffer);
    private sealed virtual override int System.Net.SSPIInterface.CompleteAuthToken(SafeDeleteContext& refContext, SecurityBuffer& modreq(System.Runtime.InteropServices.InAttribute) inputBuffer);
    private sealed virtual override int System.Net.SSPIInterface.ApplyControlToken(SafeDeleteContext& refContext, SecurityBuffer& modreq(System.Runtime.InteropServices.InAttribute) inputBuffer);
}
internal static class System.Net.SSPIWrapper : object {
    internal static SecurityPackageInfoClass[] EnumerateSecurityPackages(SSPIInterface secModule);
    internal static SecurityPackageInfoClass GetVerifyPackageInfo(SSPIInterface secModule, string packageName, bool throwIfMissing);
    public static SafeFreeCredentials AcquireDefaultCredential(SSPIInterface secModule, string package, CredentialUse intent);
    public static SafeFreeCredentials AcquireCredentialsHandle(SSPIInterface secModule, string package, CredentialUse intent, SafeSspiAuthDataHandle& authdata);
    public static SafeFreeCredentials AcquireCredentialsHandle(SSPIInterface secModule, string package, CredentialUse intent, SCHANNEL_CRED scc);
    internal static int InitializeSecurityContext(SSPIInterface secModule, SafeFreeCredentials& credential, SafeDeleteContext& context, string targetName, ContextFlags inFlags, Endianness datarep, ReadOnlySpan`1<SecurityBuffer> inputBuffers, SecurityBuffer& outputBuffer, ContextFlags& outFlags);
    internal static int AcceptSecurityContext(SSPIInterface secModule, SafeFreeCredentials credential, SafeDeleteContext& context, ContextFlags inFlags, Endianness datarep, ReadOnlySpan`1<SecurityBuffer> inputBuffers, SecurityBuffer& outputBuffer, ContextFlags& outFlags);
    internal static int CompleteAuthToken(SSPIInterface secModule, SafeDeleteContext& context, SecurityBuffer& inputBuffer);
    internal static int ApplyControlToken(SSPIInterface secModule, SafeDeleteContext& context, SecurityBuffer& inputBuffer);
    public static int QuerySecurityContextToken(SSPIInterface secModule, SafeDeleteContext context, SecurityContextTokenHandle& token);
    public static int EncryptMessage(SSPIInterface secModule, SafeDeleteContext context, Span`1<SecurityBuffer> input, UInt32 sequenceNumber);
    public static int DecryptMessage(SSPIInterface secModule, SafeDeleteContext context, Span`1<SecurityBuffer> input, UInt32 sequenceNumber);
    internal static int MakeSignature(SSPIInterface secModule, SafeDeleteContext context, Span`1<SecurityBuffer> input, UInt32 sequenceNumber);
    public static int VerifySignature(SSPIInterface secModule, SafeDeleteContext context, Span`1<SecurityBuffer> input, UInt32 sequenceNumber);
    private static int EncryptDecryptHelper(OP op, SSPIInterface secModule, SafeDeleteContext context, Span`1<SecurityBuffer> input, UInt32 sequenceNumber);
    public static SafeFreeContextBufferChannelBinding QueryContextChannelBinding(SSPIInterface secModule, SafeDeleteContext securityContext, ContextAttribute contextAttribute);
    public static bool QueryBlittableContextAttributes(SSPIInterface secModule, SafeDeleteContext securityContext, ContextAttribute contextAttribute, T& attribute);
    public static bool QueryBlittableContextAttributes(SSPIInterface secModule, SafeDeleteContext securityContext, ContextAttribute contextAttribute, Type safeHandleType, SafeHandle& sspiHandle, T& attribute);
    public static string QueryStringContextAttributes(SSPIInterface secModule, SafeDeleteContext securityContext, ContextAttribute contextAttribute);
    public static SafeFreeCertContext QueryContextAttributes_SECPKG_ATTR_REMOTE_CERT_CONTEXT(SSPIInterface secModule, SafeDeleteContext securityContext);
    public static bool QueryContextAttributes_SECPKG_ATTR_ISSUER_LIST_EX(SSPIInterface secModule, SafeDeleteContext securityContext, SecPkgContext_IssuerListInfoEx& ctx, SafeHandle& sspiHandle);
    public static string ErrorDescription(int errorCode);
}
[FlagsAttribute]
internal enum System.Net.ThreadKinds : Enum {
    public int value__;
    public static ThreadKinds Unknown;
    public static ThreadKinds User;
    public static ThreadKinds System;
    public static ThreadKinds Sync;
    public static ThreadKinds Async;
    public static ThreadKinds Timer;
    public static ThreadKinds CompletionPort;
    public static ThreadKinds Worker;
    public static ThreadKinds Finalization;
    public static ThreadKinds Other;
    public static ThreadKinds OwnerMask;
    public static ThreadKinds SyncMask;
    public static ThreadKinds SourceMask;
    public static ThreadKinds SafeSources;
    public static ThreadKinds ThreadPool;
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ADP_CollectionIndexInt32 { get; }
    internal static string ADP_CollectionIndexString { get; }
    internal static string ADP_CollectionInvalidType { get; }
    internal static string ADP_CollectionIsNotParent { get; }
    internal static string ADP_CollectionNullValue { get; }
    internal static string ADP_CollectionRemoveInvalidObject { get; }
    internal static string ADP_ConnectionAlreadyOpen { get; }
    internal static string ADP_ConnectionStateMsg_Closed { get; }
    internal static string ADP_ConnectionStateMsg_Connecting { get; }
    internal static string ADP_ConnectionStateMsg_Open { get; }
    internal static string ADP_ConnectionStateMsg_OpenExecuting { get; }
    internal static string ADP_ConnectionStateMsg_OpenFetching { get; }
    internal static string ADP_ConnectionStateMsg { get; }
    internal static string ADP_ConnectionStringSyntax { get; }
    internal static string ADP_DataReaderClosed { get; }
    internal static string ADP_InternalConnectionError { get; }
    internal static string ADP_InvalidEnumerationValue { get; }
    internal static string ADP_NotSupportedEnumerationValue { get; }
    internal static string ADP_InvalidOffsetValue { get; }
    internal static string ADP_TransactionPresent { get; }
    internal static string ADP_LocalTransactionPresent { get; }
    internal static string ADP_NoConnectionString { get; }
    internal static string ADP_OpenConnectionPropertySet { get; }
    internal static string ADP_PendingAsyncOperation { get; }
    internal static string ADP_PooledOpenTimeout { get; }
    internal static string ADP_NonPooledOpenTimeout { get; }
    internal static string ADP_SingleValuedProperty { get; }
    internal static string ADP_DoubleValuedProperty { get; }
    internal static string ADP_InvalidPrefixSuffix { get; }
    internal static string Arg_ArrayPlusOffTooSmall { get; }
    internal static string Arg_RankMultiDimNotSupported { get; }
    internal static string Arg_RemoveArgNotFound { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string Data_InvalidOffsetLength { get; }
    internal static string SqlConvert_ConvertFailed { get; }
    internal static string SQL_WrongType { get; }
    internal static string ADP_DeriveParametersNotSupported { get; }
    internal static string ADP_NoStoredProcedureExists { get; }
    internal static string ADP_InvalidConnectionOptionValue { get; }
    internal static string ADP_MissingConnectionOptionValue { get; }
    internal static string ADP_InvalidConnectionOptionValueLength { get; }
    internal static string ADP_KeywordNotSupported { get; }
    internal static string ADP_InternalProviderError { get; }
    internal static string ADP_InvalidMultipartName { get; }
    internal static string ADP_InvalidMultipartNameQuoteUsage { get; }
    internal static string ADP_InvalidMultipartNameToManyParts { get; }
    internal static string SQL_SqlCommandCommandText { get; }
    internal static string SQL_BatchedUpdatesNotAvailableOnContextConnection { get; }
    internal static string SQL_BulkCopyDestinationTableName { get; }
    internal static string SQL_TDSParserTableName { get; }
    internal static string SQL_TypeName { get; }
    internal static string SQLMSF_FailoverPartnerNotSupported { get; }
    internal static string SQL_NotSupportedEnumerationValue { get; }
    internal static string ADP_CommandTextRequired { get; }
    internal static string ADP_ConnectionRequired { get; }
    internal static string ADP_OpenConnectionRequired { get; }
    internal static string ADP_TransactionConnectionMismatch { get; }
    internal static string ADP_TransactionRequired { get; }
    internal static string ADP_OpenReaderExists { get; }
    internal static string ADP_CalledTwice { get; }
    internal static string ADP_InvalidCommandTimeout { get; }
    internal static string ADP_UninitializedParameterSize { get; }
    internal static string ADP_PrepareParameterType { get; }
    internal static string ADP_PrepareParameterSize { get; }
    internal static string ADP_PrepareParameterScale { get; }
    internal static string ADP_MismatchedAsyncResult { get; }
    internal static string ADP_ClosedConnectionError { get; }
    internal static string ADP_ConnectionIsDisabled { get; }
    internal static string ADP_EmptyDatabaseName { get; }
    internal static string ADP_InvalidSourceBufferIndex { get; }
    internal static string ADP_InvalidDestinationBufferIndex { get; }
    internal static string ADP_StreamClosed { get; }
    internal static string ADP_InvalidSeekOrigin { get; }
    internal static string ADP_NonSequentialColumnAccess { get; }
    internal static string ADP_InvalidDataType { get; }
    internal static string ADP_UnknownDataType { get; }
    internal static string ADP_UnknownDataTypeCode { get; }
    internal static string ADP_DbTypeNotSupported { get; }
    internal static string ADP_VersionDoesNotSupportDataType { get; }
    internal static string ADP_ParameterValueOutOfRange { get; }
    internal static string ADP_BadParameterName { get; }
    internal static string ADP_InvalidSizeValue { get; }
    internal static string ADP_NegativeParameter { get; }
    internal static string ADP_InvalidMetaDataValue { get; }
    internal static string ADP_ParameterConversionFailed { get; }
    internal static string ADP_ParallelTransactionsNotSupported { get; }
    internal static string ADP_TransactionZombied { get; }
    internal static string ADP_InvalidDataLength2 { get; }
    internal static string ADP_NonSeqByteAccess { get; }
    internal static string ADP_InvalidMinMaxPoolSizeValues { get; }
    internal static string SQL_InvalidPacketSizeValue { get; }
    internal static string SQL_NullEmptyTransactionName { get; }
    internal static string SQL_UserInstanceFailoverNotCompatible { get; }
    internal static string SQL_EncryptionNotSupportedByClient { get; }
    internal static string SQL_EncryptionNotSupportedByServer { get; }
    internal static string SQL_InvalidSQLServerVersionUnknown { get; }
    internal static string SQL_CannotCreateNormalizer { get; }
    internal static string SQL_CannotModifyPropertyAsyncOperationInProgress { get; }
    internal static string SQL_InstanceFailure { get; }
    internal static string SQL_InvalidPartnerConfiguration { get; }
    internal static string SQL_MarsUnsupportedOnConnection { get; }
    internal static string SQL_NonLocalSSEInstance { get; }
    internal static string SQL_PendingBeginXXXExists { get; }
    internal static string SQL_NonXmlResult { get; }
    internal static string SQL_InvalidParameterTypeNameFormat { get; }
    internal static string SQL_InvalidParameterNameLength { get; }
    internal static string SQL_PrecisionValueOutOfRange { get; }
    internal static string SQL_ScaleValueOutOfRange { get; }
    internal static string SQL_TimeScaleValueOutOfRange { get; }
    internal static string SQL_ParameterInvalidVariant { get; }
    internal static string SQL_ParameterTypeNameRequired { get; }
    internal static string SQL_InvalidInternalPacketSize { get; }
    internal static string SQL_InvalidTDSVersion { get; }
    internal static string SQL_InvalidTDSPacketSize { get; }
    internal static string SQL_ParsingError { get; }
    internal static string SQL_ConnectionLockedForBcpEvent { get; }
    internal static string SQL_SNIPacketAllocationFailure { get; }
    internal static string SQL_SmallDateTimeOverflow { get; }
    internal static string SQL_TimeOverflow { get; }
    internal static string SQL_MoneyOverflow { get; }
    internal static string SQL_CultureIdError { get; }
    internal static string SQL_OperationCancelled { get; }
    internal static string SQL_SevereError { get; }
    internal static string SQL_SSPIGenerateError { get; }
    internal static string SQL_KerberosTicketMissingError { get; }
    internal static string SQL_SqlServerBrowserNotAccessible { get; }
    internal static string SQL_InvalidSSPIPacketSize { get; }
    internal static string SQL_SSPIInitializeError { get; }
    internal static string SQL_Timeout { get; }
    internal static string SQL_Timeout_PreLogin_Begin { get; }
    internal static string SQL_Timeout_PreLogin_InitializeConnection { get; }
    internal static string SQL_Timeout_PreLogin_SendHandshake { get; }
    internal static string SQL_Timeout_PreLogin_ConsumeHandshake { get; }
    internal static string SQL_Timeout_Login_Begin { get; }
    internal static string SQL_Timeout_Login_ProcessConnectionAuth { get; }
    internal static string SQL_Timeout_PostLogin { get; }
    internal static string SQL_Timeout_FailoverInfo { get; }
    internal static string SQL_Timeout_RoutingDestinationInfo { get; }
    internal static string SQL_Duration_PreLogin_Begin { get; }
    internal static string SQL_Duration_PreLoginHandshake { get; }
    internal static string SQL_Duration_Login_Begin { get; }
    internal static string SQL_Duration_Login_ProcessConnectionAuth { get; }
    internal static string SQL_Duration_PostLogin { get; }
    internal static string SQL_UserInstanceFailure { get; }
    internal static string SQL_InvalidRead { get; }
    internal static string SQL_NonBlobColumn { get; }
    internal static string SQL_NonCharColumn { get; }
    internal static string SQL_StreamNotSupportOnColumnType { get; }
    internal static string SQL_TextReaderNotSupportOnColumnType { get; }
    internal static string SQL_XmlReaderNotSupportOnColumnType { get; }
    internal static string SqlDelegatedTransaction_PromotionFailed { get; }
    internal static string SQL_InvalidBufferSizeOrIndex { get; }
    internal static string SQL_InvalidDataLength { get; }
    internal static string SQL_BulkLoadMappingInaccessible { get; }
    internal static string SQL_BulkLoadMappingsNamesOrOrdinalsOnly { get; }
    internal static string SQL_BulkLoadCannotConvertValue { get; }
    internal static string SQL_BulkLoadNonMatchingColumnMapping { get; }
    internal static string SQL_BulkLoadNonMatchingColumnName { get; }
    internal static string SQL_BulkLoadStringTooLong { get; }
    internal static string SQL_BulkLoadInvalidTimeout { get; }
    internal static string SQL_BulkLoadInvalidVariantValue { get; }
    internal static string SQL_BulkLoadExistingTransaction { get; }
    internal static string SQL_BulkLoadNoCollation { get; }
    internal static string SQL_BulkLoadConflictingTransactionOption { get; }
    internal static string SQL_BulkLoadInvalidOperationInsideEvent { get; }
    internal static string SQL_BulkLoadMissingDestinationTable { get; }
    internal static string SQL_BulkLoadInvalidDestinationTable { get; }
    internal static string SQL_BulkLoadNotAllowDBNull { get; }
    internal static string Sql_BulkLoadLcidMismatch { get; }
    internal static string SQL_BulkLoadPendingOperation { get; }
    internal static string SQL_CannotGetDTCAddress { get; }
    internal static string SQL_ConnectionDoomed { get; }
    internal static string SQL_OpenResultCountExceeded { get; }
    internal static string SQL_StreamWriteNotSupported { get; }
    internal static string SQL_StreamReadNotSupported { get; }
    internal static string SQL_StreamSeekNotSupported { get; }
    internal static string SQL_ExClientConnectionId { get; }
    internal static string SQL_ExErrorNumberStateClass { get; }
    internal static string SQL_ExOriginalClientConnectionId { get; }
    internal static string SQL_ExRoutingDestination { get; }
    internal static string SQL_UnsupportedSysTxVersion { get; }
    internal static string SqlMisc_NullString { get; }
    internal static string SqlMisc_MessageString { get; }
    internal static string SqlMisc_ArithOverflowMessage { get; }
    internal static string SqlMisc_DivideByZeroMessage { get; }
    internal static string SqlMisc_NullValueMessage { get; }
    internal static string SqlMisc_TruncationMessage { get; }
    internal static string SqlMisc_DateTimeOverflowMessage { get; }
    internal static string SqlMisc_ConcatDiffCollationMessage { get; }
    internal static string SqlMisc_CompareDiffCollationMessage { get; }
    internal static string SqlMisc_InvalidFlagMessage { get; }
    internal static string SqlMisc_NumeToDecOverflowMessage { get; }
    internal static string SqlMisc_ConversionOverflowMessage { get; }
    internal static string SqlMisc_InvalidDateTimeMessage { get; }
    internal static string SqlMisc_TimeZoneSpecifiedMessage { get; }
    internal static string SqlMisc_InvalidArraySizeMessage { get; }
    internal static string SqlMisc_InvalidPrecScaleMessage { get; }
    internal static string SqlMisc_FormatMessage { get; }
    internal static string SqlMisc_StreamErrorMessage { get; }
    internal static string SqlMisc_TruncationMaxDataMessage { get; }
    internal static string SqlMisc_NotFilledMessage { get; }
    internal static string SqlMisc_AlreadyFilledMessage { get; }
    internal static string SqlMisc_ClosedXmlReaderMessage { get; }
    internal static string SqlMisc_InvalidOpStreamClosed { get; }
    internal static string SqlMisc_InvalidOpStreamNonWritable { get; }
    internal static string SqlMisc_InvalidOpStreamNonReadable { get; }
    internal static string SqlMisc_InvalidOpStreamNonSeekable { get; }
    internal static string SqlMisc_SubclassMustOverride { get; }
    internal static string SqlUdtReason_NoUdtAttribute { get; }
    internal static string SQLUDT_InvalidSqlType { get; }
    internal static string Sql_InternalError { get; }
    internal static string ADP_OperationAborted { get; }
    internal static string ADP_OperationAbortedExceptionMessage { get; }
    internal static string ADP_TransactionCompletedButNotDisposed { get; }
    internal static string SqlParameter_UnsupportedTVPOutputParameter { get; }
    internal static string SqlParameter_DBNullNotSupportedForTVP { get; }
    internal static string SqlParameter_UnexpectedTypeNameForNonStruct { get; }
    internal static string NullSchemaTableDataTypeNotSupported { get; }
    internal static string InvalidSchemaTableOrdinals { get; }
    internal static string SQL_EnumeratedRecordMetaDataChanged { get; }
    internal static string SQL_EnumeratedRecordFieldCountChanged { get; }
    internal static string GT_Disabled { get; }
    internal static string SQL_UnknownSysTxIsolationLevel { get; }
    internal static string SQLNotify_AlreadyHasCommand { get; }
    internal static string SqlDependency_DatabaseBrokerDisabled { get; }
    internal static string SqlDependency_DefaultOptionsButNoStart { get; }
    internal static string SqlDependency_NoMatchingServerStart { get; }
    internal static string SqlDependency_NoMatchingServerDatabaseStart { get; }
    internal static string SqlDependency_EventNoDuplicate { get; }
    internal static string SqlDependency_IdMismatch { get; }
    internal static string SqlDependency_InvalidTimeout { get; }
    internal static string SqlDependency_DuplicateStart { get; }
    internal static string SqlMetaData_InvalidSqlDbTypeForConstructorFormat { get; }
    internal static string SqlMetaData_NameTooLong { get; }
    internal static string SqlMetaData_SpecifyBothSortOrderAndOrdinal { get; }
    internal static string SqlProvider_InvalidDataColumnType { get; }
    internal static string SqlProvider_NotEnoughColumnsInStructuredType { get; }
    internal static string SqlProvider_DuplicateSortOrdinal { get; }
    internal static string SqlProvider_MissingSortOrdinal { get; }
    internal static string SqlProvider_SortOrdinalGreaterThanFieldCount { get; }
    internal static string SQLUDT_MaxByteSizeValue { get; }
    internal static string SQLUDT_Unexpected { get; }
    internal static string SQLUDT_UnexpectedUdtTypeName { get; }
    internal static string SQLUDT_InvalidUdtTypeName { get; }
    internal static string SqlUdt_InvalidUdtMessage { get; }
    internal static string SQL_UDTTypeName { get; }
    internal static string SQL_InvalidUdt3PartNameFormat { get; }
    internal static string IEnumerableOfSqlDataRecordHasNoRows { get; }
    internal static string SNI_ERROR_1 { get; }
    internal static string SNI_ERROR_2 { get; }
    internal static string SNI_ERROR_3 { get; }
    internal static string SNI_ERROR_5 { get; }
    internal static string SNI_ERROR_6 { get; }
    internal static string SNI_ERROR_7 { get; }
    internal static string SNI_ERROR_8 { get; }
    internal static string SNI_ERROR_9 { get; }
    internal static string SNI_ERROR_11 { get; }
    internal static string SNI_ERROR_12 { get; }
    internal static string SNI_ERROR_13 { get; }
    internal static string SNI_ERROR_14 { get; }
    internal static string SNI_ERROR_15 { get; }
    internal static string SNI_ERROR_16 { get; }
    internal static string SNI_ERROR_17 { get; }
    internal static string SNI_ERROR_18 { get; }
    internal static string SNI_ERROR_19 { get; }
    internal static string SNI_ERROR_20 { get; }
    internal static string SNI_ERROR_21 { get; }
    internal static string SNI_ERROR_22 { get; }
    internal static string SNI_ERROR_23 { get; }
    internal static string SNI_ERROR_24 { get; }
    internal static string SNI_ERROR_25 { get; }
    internal static string SNI_ERROR_26 { get; }
    internal static string SNI_ERROR_27 { get; }
    internal static string SNI_ERROR_28 { get; }
    internal static string SNI_ERROR_29 { get; }
    internal static string SNI_ERROR_30 { get; }
    internal static string SNI_ERROR_31 { get; }
    internal static string SNI_ERROR_32 { get; }
    internal static string SNI_ERROR_33 { get; }
    internal static string SNI_ERROR_34 { get; }
    internal static string SNI_ERROR_35 { get; }
    internal static string SNI_ERROR_36 { get; }
    internal static string SNI_ERROR_37 { get; }
    internal static string SNI_ERROR_38 { get; }
    internal static string SNI_ERROR_39 { get; }
    internal static string SNI_ERROR_40 { get; }
    internal static string SNI_ERROR_41 { get; }
    internal static string SNI_ERROR_42 { get; }
    internal static string SNI_ERROR_43 { get; }
    internal static string SNI_ERROR_44 { get; }
    internal static string SNI_ERROR_47 { get; }
    internal static string SNI_ERROR_48 { get; }
    internal static string SNI_ERROR_49 { get; }
    internal static string SNI_ERROR_50 { get; }
    internal static string SNI_ERROR_51 { get; }
    internal static string SNI_ERROR_52 { get; }
    internal static string SNI_ERROR_53 { get; }
    internal static string SNI_ERROR_54 { get; }
    internal static string SNI_ERROR_55 { get; }
    internal static string SNI_ERROR_56 { get; }
    internal static string SNI_ERROR_57 { get; }
    internal static string Snix_Connect { get; }
    internal static string Snix_PreLoginBeforeSuccessfulWrite { get; }
    internal static string Snix_PreLogin { get; }
    internal static string Snix_LoginSspi { get; }
    internal static string Snix_Login { get; }
    internal static string Snix_EnableMars { get; }
    internal static string Snix_AutoEnlist { get; }
    internal static string Snix_GetMarsSession { get; }
    internal static string Snix_Execute { get; }
    internal static string Snix_Read { get; }
    internal static string Snix_Close { get; }
    internal static string Snix_SendRows { get; }
    internal static string Snix_ProcessSspi { get; }
    internal static string LocalDB_FailedGetDLLHandle { get; }
    internal static string LocalDB_MethodNotFound { get; }
    internal static string LocalDB_UnobtainableMessage { get; }
    internal static string SQLROR_RecursiveRoutingNotSupported { get; }
    internal static string SQLROR_FailoverNotSupported { get; }
    internal static string SQLROR_UnexpectedRoutingInfo { get; }
    internal static string SQLROR_InvalidRoutingInfo { get; }
    internal static string SQLROR_TimeoutAfterRoutingInfo { get; }
    internal static string SQLCR_InvalidConnectRetryCountValue { get; }
    internal static string SQLCR_InvalidConnectRetryIntervalValue { get; }
    internal static string SQLCR_NextAttemptWillExceedQueryTimeout { get; }
    internal static string SQLCR_EncryptionChanged { get; }
    internal static string SQLCR_TDSVestionNotPreserved { get; }
    internal static string SQLCR_AllAttemptsFailed { get; }
    internal static string SQLCR_UnrecoverableServer { get; }
    internal static string SQLCR_UnrecoverableClient { get; }
    internal static string SQLCR_NoCRAckAtReconnection { get; }
    internal static string SQL_UnsupportedKeyword { get; }
    internal static string SQL_UnsupportedFeature { get; }
    internal static string SQL_UnsupportedToken { get; }
    internal static string SQL_DbTypeNotSupportedOnThisPlatform { get; }
    internal static string SQL_NetworkLibraryNotSupported { get; }
    internal static string SNI_PN0 { get; }
    internal static string SNI_PN1 { get; }
    internal static string SNI_PN2 { get; }
    internal static string SNI_PN3 { get; }
    internal static string SNI_PN4 { get; }
    internal static string SNI_PN5 { get; }
    internal static string SNI_PN6 { get; }
    internal static string SNI_PN7 { get; }
    internal static string SNI_PN8 { get; }
    internal static string SNI_PN9 { get; }
    internal static string AZURESQL_GenericEndpoint { get; }
    internal static string AZURESQL_GermanEndpoint { get; }
    internal static string AZURESQL_UsGovEndpoint { get; }
    internal static string AZURESQL_ChinaEndpoint { get; }
    internal static string net_gssapi_operation_failed_detailed { get; }
    internal static string net_gssapi_operation_failed { get; }
    internal static string net_gssapi_operation_failed_detailed_majoronly { get; }
    internal static string net_gssapi_operation_failed_majoronly { get; }
    internal static string net_gssapi_ntlm_missing_plugin { get; }
    internal static string net_ntlm_not_possible_default_cred { get; }
    internal static string net_nego_not_supported_empty_target_with_defaultcreds { get; }
    internal static string net_nego_server_not_supported { get; }
    internal static string net_nego_protection_level_not_supported { get; }
    internal static string net_context_buffer_too_small { get; }
    internal static string net_auth_message_not_encrypted { get; }
    internal static string net_securitypackagesupport { get; }
    internal static string net_log_operation_failed_with_error { get; }
    internal static string net_MethodNotImplementedException { get; }
    internal static string event_OperationReturnedSomething { get; }
    internal static string net_invalid_enum { get; }
    internal static string SSPIInvalidHandleType { get; }
    internal static string LocalDBNotSupported { get; }
    internal static string PlatformNotSupported_DataSqlClient { get; }
    internal static string SqlParameter_InvalidTableDerivedPrecisionForTvp { get; }
    internal static string SqlProvider_InvalidDataColumnMaxLength { get; }
    internal static string MDF_InvalidXmlInvalidValue { get; }
    internal static string MDF_CollectionNameISNotUnique { get; }
    internal static string MDF_InvalidXmlMissingColumn { get; }
    internal static string MDF_InvalidXml { get; }
    internal static string MDF_NoColumns { get; }
    internal static string MDF_QueryFailed { get; }
    internal static string MDF_TooManyRestrictions { get; }
    internal static string MDF_DataTableDoesNotExist { get; }
    internal static string MDF_UndefinedCollection { get; }
    internal static string MDF_UnsupportedVersion { get; }
    internal static string MDF_MissingRestrictionColumn { get; }
    internal static string MDF_MissingRestrictionRow { get; }
    internal static string MDF_IncorrectNumberOfDataSourceInformationRows { get; }
    internal static string MDF_MissingDataSourceInformationColumn { get; }
    internal static string MDF_AmbigousCollectionName { get; }
    internal static string MDF_UnableToBuildCollection { get; }
    internal static string ADP_InvalidArgumentLength { get; }
    internal static string ADP_MustBeReadOnly { get; }
    internal static string ADP_InvalidMixedUsageOfSecureAndClearCredential { get; }
    internal static string ADP_InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity { get; }
    internal static string SQL_ChangePasswordArgumentMissing { get; }
    internal static string SQL_ChangePasswordConflictsWithSSPI { get; }
    internal static string SQL_ChangePasswordRequiresYukon { get; }
    internal static string SQL_ChangePasswordUseOfUnallowedKey { get; }
    internal static string SQL_ParsingErrorWithState { get; }
    internal static string SQL_ParsingErrorValue { get; }
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndIntegratedSecurity { get; }
    internal static string ADP_InvalidMixedUsageOfAccessTokenAndUserIDPassword { get; }
    internal static string ADP_InvalidMixedUsageOfCredentialAndAccessToken { get; }
    internal static string SQL_ParsingErrorFeatureId { get; }
    internal static string SQL_ParsingErrorAuthLibraryType { get; }
    internal static string SqlFileStream_InvalidPath { get; }
    internal static string SqlFileStream_PathNotValidDiskResource { get; }
    internal static string SqlFileStream_FileAlreadyInTransaction { get; }
    internal static string SqlFileStream_InvalidParameter { get; }
    internal static string SqlFileStream_NotSupported { get; }
    internal static string GetString(string value);
    internal static string GetString(string format, Object[] args);
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ADP_CollectionIndexInt32();
    internal static string get_ADP_CollectionIndexString();
    internal static string get_ADP_CollectionInvalidType();
    internal static string get_ADP_CollectionIsNotParent();
    internal static string get_ADP_CollectionNullValue();
    internal static string get_ADP_CollectionRemoveInvalidObject();
    internal static string get_ADP_ConnectionAlreadyOpen();
    internal static string get_ADP_ConnectionStateMsg_Closed();
    internal static string get_ADP_ConnectionStateMsg_Connecting();
    internal static string get_ADP_ConnectionStateMsg_Open();
    internal static string get_ADP_ConnectionStateMsg_OpenExecuting();
    internal static string get_ADP_ConnectionStateMsg_OpenFetching();
    internal static string get_ADP_ConnectionStateMsg();
    internal static string get_ADP_ConnectionStringSyntax();
    internal static string get_ADP_DataReaderClosed();
    internal static string get_ADP_InternalConnectionError();
    internal static string get_ADP_InvalidEnumerationValue();
    internal static string get_ADP_NotSupportedEnumerationValue();
    internal static string get_ADP_InvalidOffsetValue();
    internal static string get_ADP_TransactionPresent();
    internal static string get_ADP_LocalTransactionPresent();
    internal static string get_ADP_NoConnectionString();
    internal static string get_ADP_OpenConnectionPropertySet();
    internal static string get_ADP_PendingAsyncOperation();
    internal static string get_ADP_PooledOpenTimeout();
    internal static string get_ADP_NonPooledOpenTimeout();
    internal static string get_ADP_SingleValuedProperty();
    internal static string get_ADP_DoubleValuedProperty();
    internal static string get_ADP_InvalidPrefixSuffix();
    internal static string get_Arg_ArrayPlusOffTooSmall();
    internal static string get_Arg_RankMultiDimNotSupported();
    internal static string get_Arg_RemoveArgNotFound();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_Data_InvalidOffsetLength();
    internal static string get_SqlConvert_ConvertFailed();
    internal static string get_SQL_WrongType();
    internal static string get_ADP_DeriveParametersNotSupported();
    internal static string get_ADP_NoStoredProcedureExists();
    internal static string get_ADP_InvalidConnectionOptionValue();
    internal static string get_ADP_MissingConnectionOptionValue();
    internal static string get_ADP_InvalidConnectionOptionValueLength();
    internal static string get_ADP_KeywordNotSupported();
    internal static string get_ADP_InternalProviderError();
    internal static string get_ADP_InvalidMultipartName();
    internal static string get_ADP_InvalidMultipartNameQuoteUsage();
    internal static string get_ADP_InvalidMultipartNameToManyParts();
    internal static string get_SQL_SqlCommandCommandText();
    internal static string get_SQL_BatchedUpdatesNotAvailableOnContextConnection();
    internal static string get_SQL_BulkCopyDestinationTableName();
    internal static string get_SQL_TDSParserTableName();
    internal static string get_SQL_TypeName();
    internal static string get_SQLMSF_FailoverPartnerNotSupported();
    internal static string get_SQL_NotSupportedEnumerationValue();
    internal static string get_ADP_CommandTextRequired();
    internal static string get_ADP_ConnectionRequired();
    internal static string get_ADP_OpenConnectionRequired();
    internal static string get_ADP_TransactionConnectionMismatch();
    internal static string get_ADP_TransactionRequired();
    internal static string get_ADP_OpenReaderExists();
    internal static string get_ADP_CalledTwice();
    internal static string get_ADP_InvalidCommandTimeout();
    internal static string get_ADP_UninitializedParameterSize();
    internal static string get_ADP_PrepareParameterType();
    internal static string get_ADP_PrepareParameterSize();
    internal static string get_ADP_PrepareParameterScale();
    internal static string get_ADP_MismatchedAsyncResult();
    internal static string get_ADP_ClosedConnectionError();
    internal static string get_ADP_ConnectionIsDisabled();
    internal static string get_ADP_EmptyDatabaseName();
    internal static string get_ADP_InvalidSourceBufferIndex();
    internal static string get_ADP_InvalidDestinationBufferIndex();
    internal static string get_ADP_StreamClosed();
    internal static string get_ADP_InvalidSeekOrigin();
    internal static string get_ADP_NonSequentialColumnAccess();
    internal static string get_ADP_InvalidDataType();
    internal static string get_ADP_UnknownDataType();
    internal static string get_ADP_UnknownDataTypeCode();
    internal static string get_ADP_DbTypeNotSupported();
    internal static string get_ADP_VersionDoesNotSupportDataType();
    internal static string get_ADP_ParameterValueOutOfRange();
    internal static string get_ADP_BadParameterName();
    internal static string get_ADP_InvalidSizeValue();
    internal static string get_ADP_NegativeParameter();
    internal static string get_ADP_InvalidMetaDataValue();
    internal static string get_ADP_ParameterConversionFailed();
    internal static string get_ADP_ParallelTransactionsNotSupported();
    internal static string get_ADP_TransactionZombied();
    internal static string get_ADP_InvalidDataLength2();
    internal static string get_ADP_NonSeqByteAccess();
    internal static string get_ADP_InvalidMinMaxPoolSizeValues();
    internal static string get_SQL_InvalidPacketSizeValue();
    internal static string get_SQL_NullEmptyTransactionName();
    internal static string get_SQL_UserInstanceFailoverNotCompatible();
    internal static string get_SQL_EncryptionNotSupportedByClient();
    internal static string get_SQL_EncryptionNotSupportedByServer();
    internal static string get_SQL_InvalidSQLServerVersionUnknown();
    internal static string get_SQL_CannotCreateNormalizer();
    internal static string get_SQL_CannotModifyPropertyAsyncOperationInProgress();
    internal static string get_SQL_InstanceFailure();
    internal static string get_SQL_InvalidPartnerConfiguration();
    internal static string get_SQL_MarsUnsupportedOnConnection();
    internal static string get_SQL_NonLocalSSEInstance();
    internal static string get_SQL_PendingBeginXXXExists();
    internal static string get_SQL_NonXmlResult();
    internal static string get_SQL_InvalidParameterTypeNameFormat();
    internal static string get_SQL_InvalidParameterNameLength();
    internal static string get_SQL_PrecisionValueOutOfRange();
    internal static string get_SQL_ScaleValueOutOfRange();
    internal static string get_SQL_TimeScaleValueOutOfRange();
    internal static string get_SQL_ParameterInvalidVariant();
    internal static string get_SQL_ParameterTypeNameRequired();
    internal static string get_SQL_InvalidInternalPacketSize();
    internal static string get_SQL_InvalidTDSVersion();
    internal static string get_SQL_InvalidTDSPacketSize();
    internal static string get_SQL_ParsingError();
    internal static string get_SQL_ConnectionLockedForBcpEvent();
    internal static string get_SQL_SNIPacketAllocationFailure();
    internal static string get_SQL_SmallDateTimeOverflow();
    internal static string get_SQL_TimeOverflow();
    internal static string get_SQL_MoneyOverflow();
    internal static string get_SQL_CultureIdError();
    internal static string get_SQL_OperationCancelled();
    internal static string get_SQL_SevereError();
    internal static string get_SQL_SSPIGenerateError();
    internal static string get_SQL_KerberosTicketMissingError();
    internal static string get_SQL_SqlServerBrowserNotAccessible();
    internal static string get_SQL_InvalidSSPIPacketSize();
    internal static string get_SQL_SSPIInitializeError();
    internal static string get_SQL_Timeout();
    internal static string get_SQL_Timeout_PreLogin_Begin();
    internal static string get_SQL_Timeout_PreLogin_InitializeConnection();
    internal static string get_SQL_Timeout_PreLogin_SendHandshake();
    internal static string get_SQL_Timeout_PreLogin_ConsumeHandshake();
    internal static string get_SQL_Timeout_Login_Begin();
    internal static string get_SQL_Timeout_Login_ProcessConnectionAuth();
    internal static string get_SQL_Timeout_PostLogin();
    internal static string get_SQL_Timeout_FailoverInfo();
    internal static string get_SQL_Timeout_RoutingDestinationInfo();
    internal static string get_SQL_Duration_PreLogin_Begin();
    internal static string get_SQL_Duration_PreLoginHandshake();
    internal static string get_SQL_Duration_Login_Begin();
    internal static string get_SQL_Duration_Login_ProcessConnectionAuth();
    internal static string get_SQL_Duration_PostLogin();
    internal static string get_SQL_UserInstanceFailure();
    internal static string get_SQL_InvalidRead();
    internal static string get_SQL_NonBlobColumn();
    internal static string get_SQL_NonCharColumn();
    internal static string get_SQL_StreamNotSupportOnColumnType();
    internal static string get_SQL_TextReaderNotSupportOnColumnType();
    internal static string get_SQL_XmlReaderNotSupportOnColumnType();
    internal static string get_SqlDelegatedTransaction_PromotionFailed();
    internal static string get_SQL_InvalidBufferSizeOrIndex();
    internal static string get_SQL_InvalidDataLength();
    internal static string get_SQL_BulkLoadMappingInaccessible();
    internal static string get_SQL_BulkLoadMappingsNamesOrOrdinalsOnly();
    internal static string get_SQL_BulkLoadCannotConvertValue();
    internal static string get_SQL_BulkLoadNonMatchingColumnMapping();
    internal static string get_SQL_BulkLoadNonMatchingColumnName();
    internal static string get_SQL_BulkLoadStringTooLong();
    internal static string get_SQL_BulkLoadInvalidTimeout();
    internal static string get_SQL_BulkLoadInvalidVariantValue();
    internal static string get_SQL_BulkLoadExistingTransaction();
    internal static string get_SQL_BulkLoadNoCollation();
    internal static string get_SQL_BulkLoadConflictingTransactionOption();
    internal static string get_SQL_BulkLoadInvalidOperationInsideEvent();
    internal static string get_SQL_BulkLoadMissingDestinationTable();
    internal static string get_SQL_BulkLoadInvalidDestinationTable();
    internal static string get_SQL_BulkLoadNotAllowDBNull();
    internal static string get_Sql_BulkLoadLcidMismatch();
    internal static string get_SQL_BulkLoadPendingOperation();
    internal static string get_SQL_CannotGetDTCAddress();
    internal static string get_SQL_ConnectionDoomed();
    internal static string get_SQL_OpenResultCountExceeded();
    internal static string get_SQL_StreamWriteNotSupported();
    internal static string get_SQL_StreamReadNotSupported();
    internal static string get_SQL_StreamSeekNotSupported();
    internal static string get_SQL_ExClientConnectionId();
    internal static string get_SQL_ExErrorNumberStateClass();
    internal static string get_SQL_ExOriginalClientConnectionId();
    internal static string get_SQL_ExRoutingDestination();
    internal static string get_SQL_UnsupportedSysTxVersion();
    internal static string get_SqlMisc_NullString();
    internal static string get_SqlMisc_MessageString();
    internal static string get_SqlMisc_ArithOverflowMessage();
    internal static string get_SqlMisc_DivideByZeroMessage();
    internal static string get_SqlMisc_NullValueMessage();
    internal static string get_SqlMisc_TruncationMessage();
    internal static string get_SqlMisc_DateTimeOverflowMessage();
    internal static string get_SqlMisc_ConcatDiffCollationMessage();
    internal static string get_SqlMisc_CompareDiffCollationMessage();
    internal static string get_SqlMisc_InvalidFlagMessage();
    internal static string get_SqlMisc_NumeToDecOverflowMessage();
    internal static string get_SqlMisc_ConversionOverflowMessage();
    internal static string get_SqlMisc_InvalidDateTimeMessage();
    internal static string get_SqlMisc_TimeZoneSpecifiedMessage();
    internal static string get_SqlMisc_InvalidArraySizeMessage();
    internal static string get_SqlMisc_InvalidPrecScaleMessage();
    internal static string get_SqlMisc_FormatMessage();
    internal static string get_SqlMisc_StreamErrorMessage();
    internal static string get_SqlMisc_TruncationMaxDataMessage();
    internal static string get_SqlMisc_NotFilledMessage();
    internal static string get_SqlMisc_AlreadyFilledMessage();
    internal static string get_SqlMisc_ClosedXmlReaderMessage();
    internal static string get_SqlMisc_InvalidOpStreamClosed();
    internal static string get_SqlMisc_InvalidOpStreamNonWritable();
    internal static string get_SqlMisc_InvalidOpStreamNonReadable();
    internal static string get_SqlMisc_InvalidOpStreamNonSeekable();
    internal static string get_SqlMisc_SubclassMustOverride();
    internal static string get_SqlUdtReason_NoUdtAttribute();
    internal static string get_SQLUDT_InvalidSqlType();
    internal static string get_Sql_InternalError();
    internal static string get_ADP_OperationAborted();
    internal static string get_ADP_OperationAbortedExceptionMessage();
    internal static string get_ADP_TransactionCompletedButNotDisposed();
    internal static string get_SqlParameter_UnsupportedTVPOutputParameter();
    internal static string get_SqlParameter_DBNullNotSupportedForTVP();
    internal static string get_SqlParameter_UnexpectedTypeNameForNonStruct();
    internal static string get_NullSchemaTableDataTypeNotSupported();
    internal static string get_InvalidSchemaTableOrdinals();
    internal static string get_SQL_EnumeratedRecordMetaDataChanged();
    internal static string get_SQL_EnumeratedRecordFieldCountChanged();
    internal static string get_GT_Disabled();
    internal static string get_SQL_UnknownSysTxIsolationLevel();
    internal static string get_SQLNotify_AlreadyHasCommand();
    internal static string get_SqlDependency_DatabaseBrokerDisabled();
    internal static string get_SqlDependency_DefaultOptionsButNoStart();
    internal static string get_SqlDependency_NoMatchingServerStart();
    internal static string get_SqlDependency_NoMatchingServerDatabaseStart();
    internal static string get_SqlDependency_EventNoDuplicate();
    internal static string get_SqlDependency_IdMismatch();
    internal static string get_SqlDependency_InvalidTimeout();
    internal static string get_SqlDependency_DuplicateStart();
    internal static string get_SqlMetaData_InvalidSqlDbTypeForConstructorFormat();
    internal static string get_SqlMetaData_NameTooLong();
    internal static string get_SqlMetaData_SpecifyBothSortOrderAndOrdinal();
    internal static string get_SqlProvider_InvalidDataColumnType();
    internal static string get_SqlProvider_NotEnoughColumnsInStructuredType();
    internal static string get_SqlProvider_DuplicateSortOrdinal();
    internal static string get_SqlProvider_MissingSortOrdinal();
    internal static string get_SqlProvider_SortOrdinalGreaterThanFieldCount();
    internal static string get_SQLUDT_MaxByteSizeValue();
    internal static string get_SQLUDT_Unexpected();
    internal static string get_SQLUDT_UnexpectedUdtTypeName();
    internal static string get_SQLUDT_InvalidUdtTypeName();
    internal static string get_SqlUdt_InvalidUdtMessage();
    internal static string get_SQL_UDTTypeName();
    internal static string get_SQL_InvalidUdt3PartNameFormat();
    internal static string get_IEnumerableOfSqlDataRecordHasNoRows();
    internal static string get_SNI_ERROR_1();
    internal static string get_SNI_ERROR_2();
    internal static string get_SNI_ERROR_3();
    internal static string get_SNI_ERROR_5();
    internal static string get_SNI_ERROR_6();
    internal static string get_SNI_ERROR_7();
    internal static string get_SNI_ERROR_8();
    internal static string get_SNI_ERROR_9();
    internal static string get_SNI_ERROR_11();
    internal static string get_SNI_ERROR_12();
    internal static string get_SNI_ERROR_13();
    internal static string get_SNI_ERROR_14();
    internal static string get_SNI_ERROR_15();
    internal static string get_SNI_ERROR_16();
    internal static string get_SNI_ERROR_17();
    internal static string get_SNI_ERROR_18();
    internal static string get_SNI_ERROR_19();
    internal static string get_SNI_ERROR_20();
    internal static string get_SNI_ERROR_21();
    internal static string get_SNI_ERROR_22();
    internal static string get_SNI_ERROR_23();
    internal static string get_SNI_ERROR_24();
    internal static string get_SNI_ERROR_25();
    internal static string get_SNI_ERROR_26();
    internal static string get_SNI_ERROR_27();
    internal static string get_SNI_ERROR_28();
    internal static string get_SNI_ERROR_29();
    internal static string get_SNI_ERROR_30();
    internal static string get_SNI_ERROR_31();
    internal static string get_SNI_ERROR_32();
    internal static string get_SNI_ERROR_33();
    internal static string get_SNI_ERROR_34();
    internal static string get_SNI_ERROR_35();
    internal static string get_SNI_ERROR_36();
    internal static string get_SNI_ERROR_37();
    internal static string get_SNI_ERROR_38();
    internal static string get_SNI_ERROR_39();
    internal static string get_SNI_ERROR_40();
    internal static string get_SNI_ERROR_41();
    internal static string get_SNI_ERROR_42();
    internal static string get_SNI_ERROR_43();
    internal static string get_SNI_ERROR_44();
    internal static string get_SNI_ERROR_47();
    internal static string get_SNI_ERROR_48();
    internal static string get_SNI_ERROR_49();
    internal static string get_SNI_ERROR_50();
    internal static string get_SNI_ERROR_51();
    internal static string get_SNI_ERROR_52();
    internal static string get_SNI_ERROR_53();
    internal static string get_SNI_ERROR_54();
    internal static string get_SNI_ERROR_55();
    internal static string get_SNI_ERROR_56();
    internal static string get_SNI_ERROR_57();
    internal static string get_Snix_Connect();
    internal static string get_Snix_PreLoginBeforeSuccessfulWrite();
    internal static string get_Snix_PreLogin();
    internal static string get_Snix_LoginSspi();
    internal static string get_Snix_Login();
    internal static string get_Snix_EnableMars();
    internal static string get_Snix_AutoEnlist();
    internal static string get_Snix_GetMarsSession();
    internal static string get_Snix_Execute();
    internal static string get_Snix_Read();
    internal static string get_Snix_Close();
    internal static string get_Snix_SendRows();
    internal static string get_Snix_ProcessSspi();
    internal static string get_LocalDB_FailedGetDLLHandle();
    internal static string get_LocalDB_MethodNotFound();
    internal static string get_LocalDB_UnobtainableMessage();
    internal static string get_SQLROR_RecursiveRoutingNotSupported();
    internal static string get_SQLROR_FailoverNotSupported();
    internal static string get_SQLROR_UnexpectedRoutingInfo();
    internal static string get_SQLROR_InvalidRoutingInfo();
    internal static string get_SQLROR_TimeoutAfterRoutingInfo();
    internal static string get_SQLCR_InvalidConnectRetryCountValue();
    internal static string get_SQLCR_InvalidConnectRetryIntervalValue();
    internal static string get_SQLCR_NextAttemptWillExceedQueryTimeout();
    internal static string get_SQLCR_EncryptionChanged();
    internal static string get_SQLCR_TDSVestionNotPreserved();
    internal static string get_SQLCR_AllAttemptsFailed();
    internal static string get_SQLCR_UnrecoverableServer();
    internal static string get_SQLCR_UnrecoverableClient();
    internal static string get_SQLCR_NoCRAckAtReconnection();
    internal static string get_SQL_UnsupportedKeyword();
    internal static string get_SQL_UnsupportedFeature();
    internal static string get_SQL_UnsupportedToken();
    internal static string get_SQL_DbTypeNotSupportedOnThisPlatform();
    internal static string get_SQL_NetworkLibraryNotSupported();
    internal static string get_SNI_PN0();
    internal static string get_SNI_PN1();
    internal static string get_SNI_PN2();
    internal static string get_SNI_PN3();
    internal static string get_SNI_PN4();
    internal static string get_SNI_PN5();
    internal static string get_SNI_PN6();
    internal static string get_SNI_PN7();
    internal static string get_SNI_PN8();
    internal static string get_SNI_PN9();
    internal static string get_AZURESQL_GenericEndpoint();
    internal static string get_AZURESQL_GermanEndpoint();
    internal static string get_AZURESQL_UsGovEndpoint();
    internal static string get_AZURESQL_ChinaEndpoint();
    internal static string get_net_gssapi_operation_failed_detailed();
    internal static string get_net_gssapi_operation_failed();
    internal static string get_net_gssapi_operation_failed_detailed_majoronly();
    internal static string get_net_gssapi_operation_failed_majoronly();
    internal static string get_net_gssapi_ntlm_missing_plugin();
    internal static string get_net_ntlm_not_possible_default_cred();
    internal static string get_net_nego_not_supported_empty_target_with_defaultcreds();
    internal static string get_net_nego_server_not_supported();
    internal static string get_net_nego_protection_level_not_supported();
    internal static string get_net_context_buffer_too_small();
    internal static string get_net_auth_message_not_encrypted();
    internal static string get_net_securitypackagesupport();
    internal static string get_net_log_operation_failed_with_error();
    internal static string get_net_MethodNotImplementedException();
    internal static string get_event_OperationReturnedSomething();
    internal static string get_net_invalid_enum();
    internal static string get_SSPIInvalidHandleType();
    internal static string get_LocalDBNotSupported();
    internal static string get_PlatformNotSupported_DataSqlClient();
    internal static string get_SqlParameter_InvalidTableDerivedPrecisionForTvp();
    internal static string get_SqlProvider_InvalidDataColumnMaxLength();
    internal static string get_MDF_InvalidXmlInvalidValue();
    internal static string get_MDF_CollectionNameISNotUnique();
    internal static string get_MDF_InvalidXmlMissingColumn();
    internal static string get_MDF_InvalidXml();
    internal static string get_MDF_NoColumns();
    internal static string get_MDF_QueryFailed();
    internal static string get_MDF_TooManyRestrictions();
    internal static string get_MDF_DataTableDoesNotExist();
    internal static string get_MDF_UndefinedCollection();
    internal static string get_MDF_UnsupportedVersion();
    internal static string get_MDF_MissingRestrictionColumn();
    internal static string get_MDF_MissingRestrictionRow();
    internal static string get_MDF_IncorrectNumberOfDataSourceInformationRows();
    internal static string get_MDF_MissingDataSourceInformationColumn();
    internal static string get_MDF_AmbigousCollectionName();
    internal static string get_MDF_UnableToBuildCollection();
    internal static string get_ADP_InvalidArgumentLength();
    internal static string get_ADP_MustBeReadOnly();
    internal static string get_ADP_InvalidMixedUsageOfSecureAndClearCredential();
    internal static string get_ADP_InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity();
    internal static string get_SQL_ChangePasswordArgumentMissing();
    internal static string get_SQL_ChangePasswordConflictsWithSSPI();
    internal static string get_SQL_ChangePasswordRequiresYukon();
    internal static string get_SQL_ChangePasswordUseOfUnallowedKey();
    internal static string get_SQL_ParsingErrorWithState();
    internal static string get_SQL_ParsingErrorValue();
    internal static string get_ADP_InvalidMixedUsageOfAccessTokenAndIntegratedSecurity();
    internal static string get_ADP_InvalidMixedUsageOfAccessTokenAndUserIDPassword();
    internal static string get_ADP_InvalidMixedUsageOfCredentialAndAccessToken();
    internal static string get_SQL_ParsingErrorFeatureId();
    internal static string get_SQL_ParsingErrorAuthLibraryType();
    internal static string get_SqlFileStream_InvalidPath();
    internal static string get_SqlFileStream_PathNotValidDiskResource();
    internal static string get_SqlFileStream_FileAlreadyInTransaction();
    internal static string get_SqlFileStream_InvalidParameter();
    internal static string get_SqlFileStream_NotSupported();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[DefaultMemberAttribute("Item")]
internal class System.Text.ValueStringBuilder : ValueType {
    private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public int Length { get; public set; }
    public int Capacity { get; }
    public Char& Item { get; }
    public Span`1<char> RawChars { get; }
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public ValueStringBuilder(int initialCapacity);
    public int get_Length();
    public void set_Length(int value);
    public int get_Capacity();
    public void EnsureCapacity(int capacity);
    public Char& GetPinnableReference();
    public Char& GetPinnableReference(bool terminate);
    public Char& get_Item(int index);
    public virtual string ToString();
    public Span`1<char> get_RawChars();
    public ReadOnlySpan`1<char> AsSpan(bool terminate);
    public ReadOnlySpan`1<char> AsSpan();
    public ReadOnlySpan`1<char> AsSpan(int start);
    public ReadOnlySpan`1<char> AsSpan(int start, int length);
    public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten);
    public void Insert(int index, char value, int count);
    public void Insert(int index, string s);
    public void Append(char c);
    public void Append(string s);
    private void AppendSlow(string s);
    public void Append(char c, int count);
    public void Append(Char* value, int length);
    public void Append(ReadOnlySpan`1<char> value);
    public Span`1<char> AppendSpan(int length);
    private void GrowAndAppend(char c);
    private void Grow(int additionalCapacityBeyondPos);
    public void Dispose();
}
internal static class System.ThisAssembly : object {
    internal static string InformationalVersion;
}
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
    private static void InvokeCallbackWhenTaskCompletes(Task antecedent, AsyncCallback callback, IAsyncResult asyncResult);
}
