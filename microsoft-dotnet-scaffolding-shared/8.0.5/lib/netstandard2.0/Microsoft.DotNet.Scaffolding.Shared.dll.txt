[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.DotNet.MSIdentity.Shared.ConsoleLogger : object {
    private bool _jsonOutput;
    private bool _silent;
    [CompilerGeneratedAttribute]
private string <CommandName>k__BackingField;
    private string CommandName { get; }
    public ConsoleLogger(string commandName, bool jsonOutput, bool silent);
    [CompilerGeneratedAttribute]
private string get_CommandName();
    public sealed virtual void LogMessage(string message, LogMessageType level, bool removeNewLine);
    public sealed virtual void LogJsonMessage(string state, object content, string output);
    public sealed virtual void LogMessage(string message, bool removeNewLine);
    public sealed virtual void LogFailureAndExit(string failureMessage);
}
public interface Microsoft.DotNet.MSIdentity.Shared.IConsoleLogger {
    public abstract virtual void LogMessage(string message, LogMessageType level, bool removeNewLine);
    public abstract virtual void LogMessage(string message, bool removeNewLine);
    public abstract virtual void LogJsonMessage(string state, object content, string output);
    public abstract virtual void LogFailureAndExit(string failureMessage);
}
public class Microsoft.DotNet.MSIdentity.Shared.JsonResponse : object {
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    public string Command { get; }
    public string State { get; public set; }
    public object Content { get; public set; }
    public string Output { get; public set; }
    public JsonResponse(string command, string state, object content, string output);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
    [CompilerGeneratedAttribute]
public object get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(object value);
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
public void set_Output(string value);
    public string ToJsonString();
}
public enum Microsoft.DotNet.MSIdentity.Shared.LogMessageType : Enum {
    public int value__;
    public static LogMessageType Error;
    public static LogMessageType Information;
}
internal class Microsoft.DotNet.MSIdentity.Shared.State : object {
    internal static string Success;
    internal static string Processing;
    internal static string Fail;
}
internal static class Microsoft.DotNet.Scaffolding.Shared.Cli.Utils.DotnetCommands : object {
    private static SemanticVersion MinimumDotnetVersion;
    private static DotnetCommands();
    public static void ExecuteDotnetNew(string projectPath, IList`1<string> additionalArgs, ILogger consoleLogger);
    public static void InitUserSecrets(string projectPath, IConsoleLogger consoleLogger);
    public static void SetUserSecrets(string projectPath, string key, string value, IConsoleLogger consoleLogger);
    public static void AddPackage(string packageName, string tfm, IConsoleLogger consoleLogger, string packageVersion);
    public static string GetDotnetCommandVersion(ILogger consoleLogger);
}
public static class Microsoft.DotNet.Scaffolding.Shared.CodeModifier.CodeAnalysisHelper : object {
    public static Project LoadCodeAnalysisProject(string projectFilePath, IEnumerable`1<string> files);
}
public class Microsoft.DotNet.Scaffolding.Shared.CodeModifier.CodeChange.CodeBlock : object {
    [CompilerGeneratedAttribute]
private string <Block>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Options>k__BackingField;
    public string Block { get; public set; }
    public String[] Options { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Block();
    [CompilerGeneratedAttribute]
public void set_Block(string value);
    [CompilerGeneratedAttribute]
public String[] get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(String[] value);
}
public class Microsoft.DotNet.Scaffolding.Shared.CodeModifier.CodeChange.CodeChangeOptions : object {
    [CompilerGeneratedAttribute]
private bool <MicrosoftGraph>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DownstreamApi>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMinimalApp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UsingTopLevelsStatements>k__BackingField;
    public bool MicrosoftGraph { get; public set; }
    public bool DownstreamApi { get; public set; }
    public bool IsMinimalApp { get; public set; }
    public bool UsingTopLevelsStatements { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_MicrosoftGraph();
    [CompilerGeneratedAttribute]
public void set_MicrosoftGraph(bool value);
    [CompilerGeneratedAttribute]
public bool get_DownstreamApi();
    [CompilerGeneratedAttribute]
public void set_DownstreamApi(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMinimalApp();
    [CompilerGeneratedAttribute]
public void set_IsMinimalApp(bool value);
    [CompilerGeneratedAttribute]
public bool get_UsingTopLevelsStatements();
    [CompilerGeneratedAttribute]
public void set_UsingTopLevelsStatements(bool value);
}
public class Microsoft.DotNet.Scaffolding.Shared.CodeModifier.CodeChange.CodeChangeOptionStrings : object {
    public static string IfStatement;
    public static string ElseStatement;
    public static string MicrosoftGraph;
    public static string DownstreamApi;
    public static string Skip;
    public static string NonMinimalApp;
    public static string MinimalApp;
    public static string OpenApi;
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum Microsoft.DotNet.Scaffolding.Shared.CodeModifier.CodeChange.CodeChangeType : Enum {
    public int value__;
    public static CodeChangeType Default;
    public static CodeChangeType MemberAccess;
    public static CodeChangeType Lambda;
}
public class Microsoft.DotNet.Scaffolding.Shared.CodeModifier.CodeChange.CodeFile : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Method> <Methods>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeSnippet[] <Replacements>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Usings>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeBlock[] <UsingsWithOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeBlock[] <ClassProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeBlock[] <ClassAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <GlobalVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Options>k__BackingField;
    public Dictionary`2<string, Method> Methods { get; public set; }
    public CodeSnippet[] Replacements { get; public set; }
    public string AddFilePath { get; public set; }
    public String[] Usings { get; public set; }
    public CodeBlock[] UsingsWithOptions { get; public set; }
    public string FileName { get; public set; }
    public string Extension { get; }
    public CodeBlock[] ClassProperties { get; public set; }
    public CodeBlock[] ClassAttributes { get; public set; }
    public String[] GlobalVariables { get; public set; }
    public String[] Options { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Method> get_Methods();
    [CompilerGeneratedAttribute]
public void set_Methods(Dictionary`2<string, Method> value);
    [CompilerGeneratedAttribute]
public CodeSnippet[] get_Replacements();
    [CompilerGeneratedAttribute]
public void set_Replacements(CodeSnippet[] value);
    [CompilerGeneratedAttribute]
public string get_AddFilePath();
    [CompilerGeneratedAttribute]
public void set_AddFilePath(string value);
    [CompilerGeneratedAttribute]
public String[] get_Usings();
    [CompilerGeneratedAttribute]
public void set_Usings(String[] value);
    [CompilerGeneratedAttribute]
public CodeBlock[] get_UsingsWithOptions();
    [CompilerGeneratedAttribute]
public void set_UsingsWithOptions(CodeBlock[] value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    public string get_Extension();
    [CompilerGeneratedAttribute]
public CodeBlock[] get_ClassProperties();
    [CompilerGeneratedAttribute]
public void set_ClassProperties(CodeBlock[] value);
    [CompilerGeneratedAttribute]
public CodeBlock[] get_ClassAttributes();
    [CompilerGeneratedAttribute]
public void set_ClassAttributes(CodeBlock[] value);
    [CompilerGeneratedAttribute]
public String[] get_GlobalVariables();
    [CompilerGeneratedAttribute]
public void set_GlobalVariables(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(String[] value);
}
public class Microsoft.DotNet.Scaffolding.Shared.CodeModifier.CodeChange.CodeSnippet : object {
    [CompilerGeneratedAttribute]
private string <InsertAfter>k__BackingField;
    private string _block;
    [CompilerGeneratedAttribute]
private string <CheckBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Prepend>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Replace>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <InsertBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private Formatting <LeadingTrivia>k__BackingField;
    [CompilerGeneratedAttribute]
private Formatting <TrailingTrivia>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeChangeType <CodeChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <MultiLineBlock>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ReplaceSnippet>k__BackingField;
    public string InsertAfter { get; public set; }
    public string Block { get; public set; }
    public string CheckBlock { get; public set; }
    public string Parent { get; public set; }
    public bool Prepend { get; public set; }
    public bool Replace { get; public set; }
    public String[] InsertBefore { get; public set; }
    public String[] Options { get; public set; }
    public Formatting LeadingTrivia { get; public set; }
    public Formatting TrailingTrivia { get; public set; }
    public string Parameter { get; public set; }
    public CodeChangeType CodeChangeType { get; public set; }
    public String[] MultiLineBlock { get; public set; }
    public String[] ReplaceSnippet { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InsertAfter();
    [CompilerGeneratedAttribute]
public void set_InsertAfter(string value);
    public string get_Block();
    public void set_Block(string value);
    [CompilerGeneratedAttribute]
public string get_CheckBlock();
    [CompilerGeneratedAttribute]
public void set_CheckBlock(string value);
    [CompilerGeneratedAttribute]
public string get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(string value);
    [CompilerGeneratedAttribute]
public bool get_Prepend();
    [CompilerGeneratedAttribute]
public void set_Prepend(bool value);
    [CompilerGeneratedAttribute]
public bool get_Replace();
    [CompilerGeneratedAttribute]
public void set_Replace(bool value);
    [CompilerGeneratedAttribute]
public String[] get_InsertBefore();
    [CompilerGeneratedAttribute]
public void set_InsertBefore(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(String[] value);
    [CompilerGeneratedAttribute]
public Formatting get_LeadingTrivia();
    [CompilerGeneratedAttribute]
public void set_LeadingTrivia(Formatting value);
    [CompilerGeneratedAttribute]
public Formatting get_TrailingTrivia();
    [CompilerGeneratedAttribute]
public void set_TrailingTrivia(Formatting value);
    [CompilerGeneratedAttribute]
public string get_Parameter();
    [CompilerGeneratedAttribute]
public void set_Parameter(string value);
    [CompilerGeneratedAttribute]
public CodeChangeType get_CodeChangeType();
    [CompilerGeneratedAttribute]
public void set_CodeChangeType(CodeChangeType value);
    [CompilerGeneratedAttribute]
public String[] get_MultiLineBlock();
    [CompilerGeneratedAttribute]
public void set_MultiLineBlock(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ReplaceSnippet();
    [CompilerGeneratedAttribute]
public void set_ReplaceSnippet(String[] value);
}
public class Microsoft.DotNet.Scaffolding.Shared.CodeModifier.CodeChange.Formatting : object {
    [CompilerGeneratedAttribute]
private bool <Newline>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfSpaces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Semicolon>k__BackingField;
    public bool Newline { get; public set; }
    public int NumberOfSpaces { get; public set; }
    public bool Semicolon { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Newline();
    [CompilerGeneratedAttribute]
public void set_Newline(bool value);
    [CompilerGeneratedAttribute]
public int get_NumberOfSpaces();
    [CompilerGeneratedAttribute]
public void set_NumberOfSpaces(int value);
    [CompilerGeneratedAttribute]
public bool get_Semicolon();
    [CompilerGeneratedAttribute]
public void set_Semicolon(bool value);
}
public class Microsoft.DotNet.Scaffolding.Shared.CodeModifier.CodeChange.Method : object {
    [CompilerGeneratedAttribute]
private String[] <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeBlock[] <AddParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeBlock <EditType>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeSnippet[] <CodeChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeBlock[] <Attributes>k__BackingField;
    public String[] Parameters { get; public set; }
    public CodeBlock[] AddParameters { get; public set; }
    public CodeBlock EditType { get; public set; }
    public CodeSnippet[] CodeChanges { get; public set; }
    public CodeBlock[] Attributes { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(String[] value);
    [CompilerGeneratedAttribute]
public CodeBlock[] get_AddParameters();
    [CompilerGeneratedAttribute]
public void set_AddParameters(CodeBlock[] value);
    [CompilerGeneratedAttribute]
public CodeBlock get_EditType();
    [CompilerGeneratedAttribute]
public void set_EditType(CodeBlock value);
    [CompilerGeneratedAttribute]
public CodeSnippet[] get_CodeChanges();
    [CompilerGeneratedAttribute]
public void set_CodeChanges(CodeSnippet[] value);
    [CompilerGeneratedAttribute]
public CodeBlock[] get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(CodeBlock[] value);
}
public class Microsoft.DotNet.Scaffolding.Shared.CodeModifier.CodeModifierConfig : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private CodeFile[] <Files>k__BackingField;
    public string Identifier { get; public set; }
    public CodeFile[] Files { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(string value);
    [CompilerGeneratedAttribute]
public CodeFile[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(CodeFile[] value);
}
internal class Microsoft.DotNet.Scaffolding.Shared.CodeModifier.DocumentBuilder : object {
    private DocumentEditor _documentEditor;
    private CodeFile _codeFile;
    private CompilationUnitSyntax _docRoot;
    private IConsoleLogger _consoleLogger;
    private static SyntaxTrivia SemiColonTrivia { get; }
    public DocumentBuilder(DocumentEditor documentEditor, CodeFile codeFile, IConsoleLogger consoleLogger);
    internal static BaseMethodDeclarationSyntax GetModifiedMethod(string fileName, BaseMethodDeclarationSyntax method, Method methodChanges, CodeChangeOptions options, StringBuilder output);
    private static BaseMethodDeclarationSyntax ModifyMethodAttributes(BaseMethodDeclarationSyntax method, Method methodChanges, CodeChangeOptions options);
    public CompilationUnitSyntax AddUsings(CodeChangeOptions options);
    internal static SyntaxList`1<UsingDirectiveSyntax> GetUniqueUsings(UsingDirectiveSyntax[] existingUsings, UsingDirectiveSyntax[] newUsings);
    internal static IList`1<string> FilterUsingsWithOptions(CodeFile codeFile, CodeChangeOptions options);
    public ClassDeclarationSyntax AddProperties(ClassDeclarationSyntax classDeclarationSyntax, CodeChangeOptions options);
    public ClassDeclarationSyntax AddClassAttributes(ClassDeclarationSyntax classDeclarationSyntax, CodeChangeOptions options);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.CodeModifier.DocumentBuilder/<WriteToClassFileAsync>d__12")]
public Task WriteToClassFileAsync(string filePath);
    internal static BaseMethodDeclarationSyntax AddMethodParameters(BaseMethodDeclarationSyntax originalMethod, Method methodChanges, CodeChangeOptions options);
    internal static BaseMethodDeclarationSyntax AddCodeSnippetsToMethod(string fileName, BaseMethodDeclarationSyntax originalMethod, Method methodChanges, CodeChangeOptions options, StringBuilder output);
    internal static SyntaxNode ApplyChangesToMethod(SyntaxNode root, CodeSnippet[] filteredChanges, string fileName, StringBuilder output);
    internal static MethodDeclarationSyntax GetMethodFromSyntaxRoot(CompilationUnitSyntax root, string methodIdentifier);
    internal static CodeSnippet AddLeadingTriviaSpaces(CodeSnippet snippet, int spaces);
    internal static CodeSnippet[] AddLeadingTriviaSpaces(CodeSnippet[] snippets, int spaces);
    internal static SyntaxNode ModifyMethod(SyntaxNode originalMethod, CodeSnippet codeChange, StringBuilder output);
    internal static SyntaxNode UpdateMethod(SyntaxNode originalMethod, CodeSnippet codeChange);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.CodeModifier.DocumentBuilder/<ApplyTextReplacements>d__21")]
internal static Task ApplyTextReplacements(CodeFile file, Document document, CodeChangeOptions toolOptions, IFileSystem fileSystem);
    private static SyntaxNode InsertBefore(CodeSnippet codeChange, IEnumerable`1<SyntaxNode> children, SyntaxNode originalMethod);
    private static SyntaxNode InsertAfter(CodeSnippet codeChange, IEnumerable`1<SyntaxNode> children, SyntaxNode originalMethod);
    private static SyntaxNode GetFollowingNode(String[] insertBefore, IEnumerable`1<SyntaxNode> descendantNodes);
    private static List`1<SyntaxNode> GetNodeInsertionList(CodeSnippet codeChange, SyntaxKind syntaxKind);
    private static SyntaxNode GetBlockStatement(SyntaxNode node, CodeSnippet codeChange);
    private static StatementSyntax GetStatementWithTrivia(CodeSnippet change);
    private static SyntaxTriviaList GetLeadingTrivia(Formatting codeFormatting);
    private static SyntaxTriviaList GetTrailingTrivia(Formatting codeFormatting);
    internal static SyntaxNode GetSpecifiedNode(string specifierStatement, IEnumerable`1<SyntaxNode> descendantNodes);
    internal static BaseMethodDeclarationSyntax EditMethodReturnType(BaseMethodDeclarationSyntax originalMethod, Method methodChanges, CodeChangeOptions options);
    internal static BaseMethodDeclarationSyntax AddParameters(BaseMethodDeclarationSyntax methodNode, CodeBlock[] addParameters, CodeChangeOptions toolOptions);
    private static SyntaxNode AddOrUpdateLambda(SyntaxNode originalMethod, CodeSnippet change);
    internal static SyntaxNode GetNodeWithUpdatedLambda(LambdaExpressionSyntax existingLambda, CodeSnippet change, SyntaxNode parent);
    private static LambdaExpressionSyntax UpdateLambdaParameters(LambdaExpressionSyntax existingLambda, CodeSnippet change);
    private static LambdaExpressionSyntax UpdateLambdaBlock(LambdaExpressionSyntax existingLambda, CodeSnippet change);
    internal static SyntaxNode AddLambdaToParent(SyntaxNode parent, IEnumerable`1<SyntaxNode> children, CodeSnippet change);
    internal static SyntaxNode AddExpressionToParent(SyntaxNode originalMethod, CodeSnippet change);
    internal static IEnumerable`1<SyntaxNode> GetDescendantNodes(SyntaxNode root);
    internal static UsingDirectiveSyntax[] CreateUsings(String[] usings);
    internal static SyntaxList`1<AttributeListSyntax> CreateAttributeList(CodeBlock[] attributes, SyntaxList`1<AttributeListSyntax> attributeLists, SyntaxTriviaList leadingTrivia);
    internal Document GetDocument();
    internal MemberDeclarationSyntax[] CreateClassProperties(SyntaxList`1<MemberDeclarationSyntax> members, SyntaxTriviaList leadingTrivia, SyntaxTriviaList trailingTrivia);
    internal static bool PropertyExists(string property, SyntaxList`1<MemberDeclarationSyntax> members);
    private static SyntaxTrivia get_SemiColonTrivia();
}
[ExtensionAttribute]
internal static class Microsoft.DotNet.Scaffolding.Shared.CodeModifier.ProjectExtensions : object {
    [ExtensionAttribute]
public static Project WithAllSourceFiles(Project project, IEnumerable`1<string> files);
    [ExtensionAttribute]
public static Document GetUpdatedDocument(Project project, IFileSystem fileSystem, ModelType type);
    [ExtensionAttribute]
public static Document GetDocumentFromName(Project project, string fileName, IFileSystem fileSystem);
}
public class Microsoft.DotNet.Scaffolding.Shared.ConsoleLogger : object {
    private static bool isTrace;
    private object _syncObject;
    public bool IsTracing { get; }
    private static ConsoleLogger();
    public bool get_IsTracing();
    public sealed virtual void LogMessage(string message);
    public virtual void LogMessage(string message, LogMessageLevel level);
}
public enum Microsoft.DotNet.Scaffolding.Shared.DbProvider : Enum {
    public int value__;
    public static DbProvider SqlServer;
    public static DbProvider SQLite;
    public static DbProvider CosmosDb;
    public static DbProvider Postgres;
    public static DbProvider Existing;
    public static DbProvider None;
}
public class Microsoft.DotNet.Scaffolding.Shared.DefaultFileSystem : object {
    public static DefaultFileSystem Instance;
    private static DefaultFileSystem();
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.DefaultFileSystem/<AddFileAsync>d__1")]
public sealed virtual Task AddFileAsync(string outputPath, Stream sourceStream);
    public sealed virtual void CreateDirectory(string path);
    public sealed virtual void DeleteFile(string path);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption);
    public sealed virtual bool FileExists(string path);
    public sealed virtual void MakeFileWritable(string path);
    public sealed virtual string ReadAllText(string path);
    public sealed virtual void RemoveDirectory(string path, bool recursive);
    public sealed virtual void WriteAllText(string path, string contents);
}
public static class Microsoft.DotNet.Scaffolding.Shared.EfConstants : object {
    public static string SqlServer;
    public static string SQLite;
    public static string CosmosDb;
    public static string Postgres;
    public static string AspnetNetCoreIdentityEfPackageName;
    public static string EfToolsPackageName;
    public static string SqlServerPackageName;
    public static string SqlitePackageName;
    public static string CosmosPakcageName;
    public static string PostgresPackageName;
    public static string SQLConnectionStringFormat;
    public static string SQLiteConnectionStringFormat;
    public static string CosmosDbConnectionStringFormat;
    public static string PostgresConnectionStringFormat;
    public static IDictionary`2<DbProvider, string> ConnectionStringsDict;
    public static IDictionary`2<DbProvider, string> EfPackagesDict;
    public static IDictionary`2<string, DbProvider> IdentityDbProviders;
    public static IDictionary`2<string, DbProvider> AllDbProviders;
    private static EfConstants();
}
internal static class Microsoft.DotNet.Scaffolding.Shared.EFValidationUtil : object {
    internal static void ValidateEFDependencies(IEnumerable`1<DependencyDescription> dependencies, DbProvider dataContextType);
    internal static void ValidateDependency(string packageName, IEnumerable`1<DependencyDescription> dependencies);
}
public class Microsoft.DotNet.Scaffolding.Shared.FileSystemChangeInformation : object {
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileSystemChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileContents>k__BackingField;
    public string FullPath { get; public set; }
    public string FileSystemChangeType { get; public set; }
    public string FileContents { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
public void set_FullPath(string value);
    [CompilerGeneratedAttribute]
public string get_FileSystemChangeType();
    [CompilerGeneratedAttribute]
public void set_FileSystemChangeType(string value);
    [CompilerGeneratedAttribute]
public string get_FileContents();
    [CompilerGeneratedAttribute]
public void set_FileContents(string value);
}
public class Microsoft.DotNet.Scaffolding.Shared.FileSystemChangeTracker : object {
    private static StringComparer PathComparisonType;
    private ReaderWriterLockSlim readerWriterLock;
    private Dictionary`2<string, FileSystemChangeInformation> _changes;
    public IEnumerable`1<FileSystemChangeInformation> Changes { get; }
    private static FileSystemChangeTracker();
    public sealed virtual IEnumerable`1<FileSystemChangeInformation> get_Changes();
    public sealed virtual void AddChange(FileSystemChangeInformation fileSystemChangeInfo);
    public sealed virtual void RemoveChange(FileSystemChangeInformation fileSystemChangeInfo);
    public sealed virtual void RemoveChanges(IEnumerable`1<FileSystemChangeInformation> fileSystemChanges);
    public sealed virtual void ClearChanges();
}
public class Microsoft.DotNet.Scaffolding.Shared.FileSystemChangeType : object {
    public static string AddFile;
    public static string EditFile;
    public static string DeleteFile;
    public static string AddDirectory;
    public static string RemoveDirectory;
}
public interface Microsoft.DotNet.Scaffolding.Shared.IFileSystem {
    public abstract virtual bool FileExists(string path);
    public abstract virtual bool DirectoryExists(string path);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual void MakeFileWritable(string path);
    public abstract virtual string ReadAllText(string path);
    public abstract virtual void WriteAllText(string path, string contents);
    public abstract virtual Task AddFileAsync(string outputPath, Stream sourceStream);
    public abstract virtual void CreateDirectory(string path);
    public abstract virtual void DeleteFile(string path);
    public abstract virtual void RemoveDirectory(string path, bool removeIfNotEmpty);
}
public interface Microsoft.DotNet.Scaffolding.Shared.IFileSystemChangeTracker {
    public IEnumerable`1<FileSystemChangeInformation> Changes { get; }
    public abstract virtual IEnumerable`1<FileSystemChangeInformation> get_Changes();
    public abstract virtual void AddChange(FileSystemChangeInformation info);
    public abstract virtual void RemoveChange(FileSystemChangeInformation info);
    public abstract virtual void ClearChanges();
    public abstract virtual void RemoveChanges(IEnumerable`1<FileSystemChangeInformation> subDirectoryChanges);
}
public interface Microsoft.DotNet.Scaffolding.Shared.ILogger {
    public abstract virtual void LogMessage(string message, LogMessageLevel level);
    public abstract virtual void LogMessage(string message);
}
public enum Microsoft.DotNet.Scaffolding.Shared.LogMessageLevel : Enum {
    public int value__;
    public static LogMessageLevel Information;
    public static LogMessageLevel Warning;
    public static LogMessageLevel Trace;
    public static LogMessageLevel Error;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.DotNet.Scaffolding.Shared.MessageStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddDirectoryMessage { get; }
    internal static string AddFileMessage { get; }
    internal static string AddingKeyToUserSecrets { get; }
    internal static string AddingPackage { get; }
    internal static string ContentsMessage { get; }
    internal static string DeleteFileMessage { get; }
    internal static string DirectoryNotEmpty { get; }
    internal static string DotnetRequirementNotMet { get; }
    internal static string DotnetUserSecretsError { get; }
    internal static string EditFileMessage { get; }
    internal static string EndFileSystemChangeToken { get; }
    internal static string Failed { get; }
    internal static string FailedAddPackage { get; }
    internal static string FailedDotnetNew { get; }
    internal static string InitializeUserSecrets { get; }
    internal static string InstallEfPackages { get; }
    internal static string InstallSqlPackage { get; }
    internal static string InvalidFileSystemChangeMessage { get; }
    internal static string InvalidProjectInformationMessage { get; }
    internal static string PathNotFound { get; }
    internal static string ProtocolVersionMismatch { get; }
    internal static string RemoveDirectoryMessage { get; }
    internal static string StartFileSystemChangeToken { get; }
    internal static string Success { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddDirectoryMessage();
    internal static string get_AddFileMessage();
    internal static string get_AddingKeyToUserSecrets();
    internal static string get_AddingPackage();
    internal static string get_ContentsMessage();
    internal static string get_DeleteFileMessage();
    internal static string get_DirectoryNotEmpty();
    internal static string get_DotnetRequirementNotMet();
    internal static string get_DotnetUserSecretsError();
    internal static string get_EditFileMessage();
    internal static string get_EndFileSystemChangeToken();
    internal static string get_Failed();
    internal static string get_FailedAddPackage();
    internal static string get_FailedDotnetNew();
    internal static string get_InitializeUserSecrets();
    internal static string get_InstallEfPackages();
    internal static string get_InstallSqlPackage();
    internal static string get_InvalidFileSystemChangeMessage();
    internal static string get_InvalidProjectInformationMessage();
    internal static string get_PathNotFound();
    internal static string get_ProtocolVersionMismatch();
    internal static string get_RemoveDirectoryMessage();
    internal static string get_StartFileSystemChangeToken();
    internal static string get_Success();
}
public class Microsoft.DotNet.Scaffolding.Shared.Messaging.FileSystemChangeMessageHandler : MessageHandlerBase {
    private static HashSet`1<string> _messagetypes;
    public ISet`1<string> MessageTypesHandled { get; }
    public FileSystemChangeMessageHandler(ILogger logger);
    private static FileSystemChangeMessageHandler();
    public virtual ISet`1<string> get_MessageTypesHandled();
    protected virtual bool HandleMessageInternal(IMessageSender sender, Message message);
}
public interface Microsoft.DotNet.Scaffolding.Shared.Messaging.IMessageHandler {
    public abstract virtual bool HandleMessage(IMessageSender sender, Message message);
}
public interface Microsoft.DotNet.Scaffolding.Shared.Messaging.IMessageSender {
    public abstract virtual bool Send(Message message);
    public abstract virtual Message CreateMessage(MessageType messageType, object o, int protocolVersion);
}
public class Microsoft.DotNet.Scaffolding.Shared.Messaging.Message : object {
    [CompilerGeneratedAttribute]
private string <HostId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageType>k__BackingField;
    [CompilerGeneratedAttribute]
private JToken <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProtocolVersion>k__BackingField;
    public string HostId { get; public set; }
    public string MessageType { get; public set; }
    public JToken Payload { get; public set; }
    public int ProtocolVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HostId();
    [CompilerGeneratedAttribute]
public void set_HostId(string value);
    [CompilerGeneratedAttribute]
public string get_MessageType();
    [CompilerGeneratedAttribute]
public void set_MessageType(string value);
    [CompilerGeneratedAttribute]
public JToken get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(JToken value);
    [CompilerGeneratedAttribute]
public int get_ProtocolVersion();
    [CompilerGeneratedAttribute]
public void set_ProtocolVersion(int value);
    public virtual string ToString();
}
public abstract class Microsoft.DotNet.Scaffolding.Shared.Messaging.MessageHandlerBase : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public int CurrentProtocolVersion { get; }
    protected ILogger Logger { get; }
    public ISet`1<string> MessageTypesHandled { get; }
    public MessageHandlerBase(ILogger logger);
    public virtual int get_CurrentProtocolVersion();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    public abstract virtual ISet`1<string> get_MessageTypesHandled();
    public sealed virtual bool HandleMessage(IMessageSender sender, Message message);
    protected virtual bool CanHandle(Message message);
    protected abstract virtual bool HandleMessageInternal(IMessageSender sender, Message message);
}
public class Microsoft.DotNet.Scaffolding.Shared.Messaging.MessageType : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinProtocolVersion>k__BackingField;
    public string Value { get; }
    public int MinProtocolVersion { get; }
    internal MessageType(string value, int minProtocolVersion);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public int get_MinProtocolVersion();
}
public class Microsoft.DotNet.Scaffolding.Shared.Messaging.MessageTypes : object {
    public static MessageType Scaffolding_Completed;
    public static MessageType Terminate;
    public static MessageType ProjectInfoRequest;
    public static MessageType ProjectInfoResponse;
    public static MessageType FileSystemChangeInformation;
    private static MessageTypes();
}
public class Microsoft.DotNet.Scaffolding.Shared.Messaging.ProjectInformationMessageHandler : MessageHandlerBase {
    private HashSet`1<string> _messageTypesHandled;
    private IProjectContext _projectInformation;
    public IProjectContext ProjectInformation { get; }
    public ISet`1<string> MessageTypesHandled { get; }
    public ProjectInformationMessageHandler(IProjectContext projectInformation, ILogger logger);
    public ProjectInformationMessageHandler(ILogger logger);
    public IProjectContext get_ProjectInformation();
    public virtual ISet`1<string> get_MessageTypesHandled();
    protected virtual bool HandleMessageInternal(IMessageSender sender, Message message);
    private void BuildProjectInformation(Message msg);
}
public interface Microsoft.DotNet.Scaffolding.Shared.Project.IModelTypesLocator {
    public abstract virtual IEnumerable`1<Document> GetAllDocuments();
    public abstract virtual IEnumerable`1<ModelType> GetAllTypes();
    public abstract virtual Task`1<IEnumerable`1<ITypeSymbol>> GetAllTypesAsync();
    public abstract virtual IEnumerable`1<ModelType> GetType(string typeName);
}
public class Microsoft.DotNet.Scaffolding.Shared.Project.ModelType : object {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeSymbol <TypeSymbol>k__BackingField;
    public string Namespace { get; public set; }
    public string Name { get; public set; }
    public string FullName { get; public set; }
    public string PluralName { get; }
    public ITypeSymbol TypeSymbol { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    public string get_PluralName();
    [CompilerGeneratedAttribute]
public ITypeSymbol get_TypeSymbol();
    [CompilerGeneratedAttribute]
private void set_TypeSymbol(ITypeSymbol value);
    public static ModelType FromITypeSymbol(ITypeSymbol typeSymbol);
}
public class Microsoft.DotNet.Scaffolding.Shared.Project.ModelTypesLocator : object {
    private Workspace _projectWorkspace;
    public ModelTypesLocator(Workspace projectWorkspace);
    public sealed virtual IEnumerable`1<ModelType> GetAllTypes();
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.Project.ModelTypesLocator/<GetAllTypesAsync>d__3")]
public sealed virtual Task`1<IEnumerable`1<ITypeSymbol>> GetAllTypesAsync();
    public sealed virtual IEnumerable`1<Document> GetAllDocuments();
    public sealed virtual IEnumerable`1<ModelType> GetType(string typeName);
}
internal static class Microsoft.DotNet.Scaffolding.Shared.Project.ProjectModifierHelper : object {
    internal static Char[] CodeSnippetTrimChars;
    internal static IEnumerable`1<string> CodeSnippetTrimStrings;
    internal static Char[] Parentheses;
    internal static string VarIdentifier;
    internal static string WebApplicationBuilderIdentifier;
    public static string Main;
    private static ProjectModifierHelper();
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.Project.ProjectModifierHelper/<IsMinimalApp>d__6")]
internal static Task`1<bool> IsMinimalApp(IModelTypesLocator modelTypesLocator);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.Project.ProjectModifierHelper/<IsUsingTopLevelStatements>d__7")]
internal static Task`1<bool> IsUsingTopLevelStatements(List`1<Document> documents);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.Project.ProjectModifierHelper/<IsUsingTopLevelStatements>d__8")]
internal static Task`1<bool> IsUsingTopLevelStatements(IModelTypesLocator modelTypesLocator);
    internal static String[] ProcessCsprojTfms(string csprojText);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.Project.ProjectModifierHelper/<IsMinimalApp>d__10")]
internal static Task`1<bool> IsMinimalApp(List`1<Document> documents);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.Project.ProjectModifierHelper/<GetStartupClass>d__11")]
internal static Task`1<string> GetStartupClass(List`1<Document> documents);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.Project.ProjectModifierHelper/<GetStartupClassName>d__12")]
internal static Task`1<string> GetStartupClassName(Document programDoc);
    internal static string GetClassName(string className);
    internal static BaseMethodDeclarationSyntax GetOriginalMethod(ClassDeclarationSyntax classNode, string methodName, Method methodChanges);
    internal static IDictionary`2<string, string> VerifyParameters(String[] parametersToCheck, List`1<ParameterSyntax> foundParameters);
    internal static string FormatCodeBlock(string codeBlock, IDictionary`2<string, string> parameterDict, bool trim);
    internal static string ReplaceValue(string codeBlock, string oldValue, string newValue);
    internal static CodeSnippet[] UpdateVariables(CodeSnippet[] changes, string oldValue, string newValue);
    internal static CodeSnippet UpdateVariables(CodeSnippet change, string oldValue, string newValue);
    internal static string TrimStatement(string statement);
    internal static Nullable`1<ValueTuple`2<string, string>> GetBuilderVariableIdentifierTransformation(SyntaxList`1<MemberDeclarationSyntax> members);
    internal static bool GlobalStatementExists(CompilationUnitSyntax root, GlobalStatementSyntax statement);
    internal static bool AttributeExists(string attribute, SyntaxList`1<AttributeListSyntax> attributeList);
    internal static bool StatementExists(IEnumerable`1<SyntaxNode> nodes, string statement);
    internal static bool StatementExists(SyntaxNode node, string statement);
    internal static CodeSnippet[] FilterCodeSnippets(CodeSnippet[] codeSnippets, CodeChangeOptions options);
    internal static bool FilterOptions(String[] options, CodeChangeOptions codeChangeOptions);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.Project.ProjectModifierHelper/<ModifyDocumentText>d__28")]
internal static Task`1<Document> ModifyDocumentText(Document fileDoc, IEnumerable`1<CodeSnippet> codeChanges);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.Project.ProjectModifierHelper/<UpdateDocument>d__29")]
internal static Task UpdateDocument(Document document, IFileSystem fileSystem);
    internal static CodeBlock[] FilterCodeBlocks(CodeBlock[] codeBlocks, CodeChangeOptions options);
    internal static string ProcessTfm(string tfm, Dictionary`2<string, string> csprojVariables);
}
internal static class Microsoft.DotNet.Scaffolding.Shared.Project.RoslynUtilities : object {
    public static IEnumerable`1<ITypeSymbol> GetDirectTypesInCompilation(Compilation compilation);
    public static string CreateEscapedIdentifier(string identifier);
    public static bool IsValidNamespace(string namespaceName);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.Project.RoslynUtilities/<CheckDocumentForMethodInvocationAsync>d__3")]
internal static Task`1<bool> CheckDocumentForMethodInvocationAsync(Document document, string methodName, string methodContainingType);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.Project.RoslynUtilities/<CheckDocumentForTextAsync>d__4")]
internal static Task`1<bool> CheckDocumentForTextAsync(Document document, string text);
    internal static bool SymbolMatchesType(IMethodSymbol symbol, string methodName, string methodContainingType);
    internal static bool SymbolMatchesType(IMethodSymbol symbol, string methodName, String[] methodContainingTypes);
    internal static void CollectTypes(INamespaceSymbol ns, List`1<ITypeSymbol> types);
    internal static bool IsKeyWord(string identifier);
}
public static class Microsoft.DotNet.Scaffolding.Shared.ProjectContextHelper : object {
    private static string EntityFrameworkCore;
    private static string AspNetCoreIdentity;
    private static string TargetsProperty;
    private static string PackageFoldersProperty;
    private static string DependencyProperty;
    private static string TypeProperty;
    internal static IEnumerable`1<DependencyDescription> GetPackageDependencies(string projectAssetsFile, string tfm, string tfmMoniker);
    internal static IEnumerable`1<ResolvedReference> GetScaffoldingAssemblies(IEnumerable`1<DependencyDescription> dependencies);
    internal static string GetPath(string nugetPath, Tuple`2<string, string> nameAndVersion);
    internal static Tuple`2<string, string> GetName(string fullName);
    internal static IList`1<DependencyDescription> DeserializePackages(JsonElement packages, JsonElement packageFolderPath, string targetFrameworkMoniker);
    internal static string GetXmlKeyValue(string variableKey, string xmlText);
}
public class Microsoft.DotNet.Scaffolding.Shared.ProjectModel.CommonProjectContext : object {
    [CompilerGeneratedAttribute]
private string <AssemblyFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ResolvedReference> <CompilationAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <CompilationItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ProjectCapabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DepsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <EmbededItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsClassLibrary>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<DependencyDescription> <PackageDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackagesDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ProjectReferenceInformation> <ProjectReferenceInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ProjectReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkMoniker>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeneratedImplicitNamespaceImportFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nullable>k__BackingField;
    public string AssemblyFullPath { get; public set; }
    public string AssemblyName { get; public set; }
    public IEnumerable`1<ResolvedReference> CompilationAssemblies { get; public set; }
    public IEnumerable`1<string> CompilationItems { get; public set; }
    public IEnumerable`1<string> ProjectCapabilities { get; public set; }
    public string Config { get; public set; }
    public string Configuration { get; public set; }
    public string DepsFile { get; public set; }
    public IEnumerable`1<string> EmbededItems { get; public set; }
    public bool IsClassLibrary { get; public set; }
    public IEnumerable`1<DependencyDescription> PackageDependencies { get; public set; }
    public string PackagesDirectory { get; public set; }
    public string Platform { get; public set; }
    public string ProjectFullPath { get; public set; }
    public string ProjectName { get; public set; }
    public IEnumerable`1<ProjectReferenceInformation> ProjectReferenceInformation { get; public set; }
    public IEnumerable`1<string> ProjectReferences { get; public set; }
    public string RootNamespace { get; public set; }
    public string RuntimeConfig { get; public set; }
    public string TargetDirectory { get; public set; }
    public string TargetFramework { get; public set; }
    public string TargetFrameworkMoniker { get; public set; }
    public string GeneratedImplicitNamespaceImportFile { get; public set; }
    public string Nullable { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssemblyFullPath();
    [CompilerGeneratedAttribute]
public void set_AssemblyFullPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ResolvedReference> get_CompilationAssemblies();
    [CompilerGeneratedAttribute]
public void set_CompilationAssemblies(IEnumerable`1<ResolvedReference> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_CompilationItems();
    [CompilerGeneratedAttribute]
public void set_CompilationItems(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_ProjectCapabilities();
    [CompilerGeneratedAttribute]
public void set_ProjectCapabilities(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_DepsFile();
    [CompilerGeneratedAttribute]
public void set_DepsFile(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_EmbededItems();
    [CompilerGeneratedAttribute]
public void set_EmbededItems(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsClassLibrary();
    [CompilerGeneratedAttribute]
public void set_IsClassLibrary(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<DependencyDescription> get_PackageDependencies();
    [CompilerGeneratedAttribute]
public void set_PackageDependencies(IEnumerable`1<DependencyDescription> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PackagesDirectory();
    [CompilerGeneratedAttribute]
public void set_PackagesDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProjectFullPath();
    [CompilerGeneratedAttribute]
public void set_ProjectFullPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ProjectReferenceInformation> get_ProjectReferenceInformation();
    [CompilerGeneratedAttribute]
public void set_ProjectReferenceInformation(IEnumerable`1<ProjectReferenceInformation> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_ProjectReferences();
    [CompilerGeneratedAttribute]
public void set_ProjectReferences(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RootNamespace();
    [CompilerGeneratedAttribute]
public void set_RootNamespace(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RuntimeConfig();
    [CompilerGeneratedAttribute]
public void set_RuntimeConfig(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetDirectory();
    [CompilerGeneratedAttribute]
public void set_TargetDirectory(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TargetFrameworkMoniker();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkMoniker(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_GeneratedImplicitNamespaceImportFile();
    [CompilerGeneratedAttribute]
public void set_GeneratedImplicitNamespaceImportFile(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Nullable();
    [CompilerGeneratedAttribute]
public void set_Nullable(string value);
}
public class Microsoft.DotNet.Scaffolding.Shared.ProjectModel.Dependency : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public string Name { get; }
    public string Version { get; }
    public Dependency(string name, string version);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Version();
}
public class Microsoft.DotNet.Scaffolding.Shared.ProjectModel.DependencyDescription : object {
    private List`1<Dependency> _dependencies;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Resolved>k__BackingField;
    public string TargetFramework { get; }
    public string Name { get; }
    public string Path { get; }
    public string Version { get; }
    public DependencyType Type { get; }
    public bool Resolved { get; }
    public IEnumerable`1<Dependency> Dependencies { get; }
    public DependencyDescription(string name, string version, string path, string targetFramework, DependencyType type, bool resolved);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public DependencyType get_Type();
    [CompilerGeneratedAttribute]
public bool get_Resolved();
    public IEnumerable`1<Dependency> get_Dependencies();
    public void AddDependency(Dependency dependency);
}
public enum Microsoft.DotNet.Scaffolding.Shared.ProjectModel.DependencyType : Enum {
    public int value__;
    public static DependencyType Target;
    public static DependencyType Package;
    public static DependencyType Assembly;
    public static DependencyType Project;
    public static DependencyType AnalyzerAssembly;
    public static DependencyType Unknown;
}
public interface Microsoft.DotNet.Scaffolding.Shared.ProjectModel.IProjectContext {
    public string ProjectName { get; }
    public string Configuration { get; }
    public string Platform { get; }
    public string ProjectFullPath { get; }
    public string RootNamespace { get; }
    public bool IsClassLibrary { get; }
    public string TargetFramework { get; }
    public string TargetFrameworkMoniker { get; }
    public string Config { get; }
    public string PackagesDirectory { get; }
    public string TargetDirectory { get; }
    public string AssemblyName { get; }
    public string AssemblyFullPath { get; }
    public string DepsFile { get; }
    public string RuntimeConfig { get; }
    public IEnumerable`1<string> CompilationItems { get; }
    public IEnumerable`1<string> ProjectCapabilities { get; }
    public IEnumerable`1<string> EmbededItems { get; }
    public IEnumerable`1<DependencyDescription> PackageDependencies { get; }
    public IEnumerable`1<ResolvedReference> CompilationAssemblies { get; }
    public IEnumerable`1<string> ProjectReferences { get; }
    public IEnumerable`1<ProjectReferenceInformation> ProjectReferenceInformation { get; }
    public string GeneratedImplicitNamespaceImportFile { get; }
    public string Nullable { get; }
    public abstract virtual string get_ProjectName();
    public abstract virtual string get_Configuration();
    public abstract virtual string get_Platform();
    public abstract virtual string get_ProjectFullPath();
    public abstract virtual string get_RootNamespace();
    public abstract virtual bool get_IsClassLibrary();
    public abstract virtual string get_TargetFramework();
    public abstract virtual string get_TargetFrameworkMoniker();
    public abstract virtual string get_Config();
    public abstract virtual string get_PackagesDirectory();
    public abstract virtual string get_TargetDirectory();
    public abstract virtual string get_AssemblyName();
    public abstract virtual string get_AssemblyFullPath();
    public abstract virtual string get_DepsFile();
    public abstract virtual string get_RuntimeConfig();
    public abstract virtual IEnumerable`1<string> get_CompilationItems();
    public abstract virtual IEnumerable`1<string> get_ProjectCapabilities();
    public abstract virtual IEnumerable`1<string> get_EmbededItems();
    public abstract virtual IEnumerable`1<DependencyDescription> get_PackageDependencies();
    public abstract virtual IEnumerable`1<ResolvedReference> get_CompilationAssemblies();
    public abstract virtual IEnumerable`1<string> get_ProjectReferences();
    public abstract virtual IEnumerable`1<ProjectReferenceInformation> get_ProjectReferenceInformation();
    public abstract virtual string get_GeneratedImplicitNamespaceImportFile();
    public abstract virtual string get_Nullable();
}
[ExtensionAttribute]
public static class Microsoft.DotNet.Scaffolding.Shared.ProjectModel.ProjectContextExtensions : object {
    [ExtensionAttribute]
public static DependencyDescription GetPackage(IProjectContext context, string name);
    [ExtensionAttribute]
public static IEnumerable`1<DependencyDescription> GetReferencingPackages(IProjectContext context, string name);
    [ExtensionAttribute]
public static IProjectContext AddPackageDependencies(IProjectContext projectInformation, string projectAssetsFile);
    [ExtensionAttribute]
public static IProjectContext CheckNullableVariable(IProjectContext context);
    [ExtensionAttribute]
public static bool IsBlazorWebProject(IProjectContext context);
}
internal static class Microsoft.DotNet.Scaffolding.Shared.ProjectModel.ProjectModelHelper : object {
    internal static Dictionary`2<string, string> ShortTfmDictionary;
    private static ProjectModelHelper();
    public static string GetShortTfm(string tfmMoniker);
    public static string GetProjectAssetsFile(IProjectContext projectInformation);
    internal static bool IsTfmPreRelease(string tfm);
    internal static string GetManifestResource(Assembly assembly, string shortResourceName);
}
public class Microsoft.DotNet.Scaffolding.Shared.ProjectModel.ProjectReferenceInformation : object {
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <CompilationItems>k__BackingField;
    public string FullPath { get; public set; }
    public string ProjectName { get; public set; }
    public string AssemblyName { get; public set; }
    public List`1<string> CompilationItems { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
public void set_FullPath(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_CompilationItems();
    [CompilerGeneratedAttribute]
public void set_CompilationItems(List`1<string> value);
}
public class Microsoft.DotNet.Scaffolding.Shared.ProjectModel.ResolvedReference : object {
    [CompilerGeneratedAttribute]
private string <ResolvedPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string ResolvedPath { get; }
    public string Name { get; }
    public ResolvedReference(string name, string resolvedPath);
    [CompilerGeneratedAttribute]
public string get_ResolvedPath();
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class Microsoft.DotNet.Scaffolding.Shared.SimulationModeFileSystem : object {
    private static StringComparison PathComparisonType;
    public static SimulationModeFileSystem Instance;
    [CompilerGeneratedAttribute]
private IFileSystemChangeTracker <FileSystemChangeTracker>k__BackingField;
    private IFileSystemChangeTracker FileSystemChangeTracker { get; private set; }
    public IEnumerable`1<FileSystemChangeInformation> FileSystemChanges { get; }
    private static SimulationModeFileSystem();
    [CompilerGeneratedAttribute]
private IFileSystemChangeTracker get_FileSystemChangeTracker();
    [CompilerGeneratedAttribute]
private void set_FileSystemChangeTracker(IFileSystemChangeTracker value);
    public IEnumerable`1<FileSystemChangeInformation> get_FileSystemChanges();
    public void AddMetadataMessage(string metadata);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Scaffolding.Shared.SimulationModeFileSystem/<AddFileAsync>d__10")]
public sealed virtual Task AddFileAsync(string outputPath, Stream sourceStream);
    public sealed virtual bool FileExists(string path);
    public sealed virtual void MakeFileWritable(string path);
    public sealed virtual string ReadAllText(string path);
    public sealed virtual void WriteAllText(string path, string contents);
    public sealed virtual void DeleteFile(string path);
    public sealed virtual void CreateDirectory(string path);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual void RemoveDirectory(string path, bool recursive);
    private IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern, SearchOption searchOption);
    public sealed virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption);
    private IEnumerable`1<FileSystemChangeInformation> GetChangesFromDirectory(string path, SearchOption searchOption, Func`2<FileSystemChangeInformation, bool> changeTypeFilter);
    private bool MatchesPattern(string fileName, string searchPattern);
}
[ExtensionAttribute]
internal static class Microsoft.DotNet.Scaffolding.Shared.StringUtil : object {
    [ExtensionAttribute]
public static string ToLowerInvariantFirstChar(string input);
    [ExtensionAttribute]
public static bool ContainsIgnoreCase(string input, string value);
    public static string ToPath(string namespaceName, string basePath, string projectRootNamespace);
    public static string RemovePrefix(string projectNamespace, string basePath, string prefix);
    public static string ToNamespace(string path);
    public static string GetFilePathWithoutExtension(string input);
    internal static string GetTypeNameFromNamespace(string templateName);
    internal static string NormalizeLineEndings(string text);
}
internal class Microsoft.DotNet.Scaffolding.Shared.T4Templating.CallContext : object {
    public static object LogicalGetData(string name);
}
public interface Microsoft.DotNet.Scaffolding.Shared.T4Templating.ITemplateInvoker {
    public abstract virtual string InvokeTemplate(ITextTransformation template, IDictionary`2<string, object> templateParameters);
}
public interface Microsoft.DotNet.Scaffolding.Shared.T4Templating.ITextTransformation {
    public IDictionary`2<string, object> Session { get; public set; }
    public CompilerErrorCollection Errors { get; }
    public abstract virtual IDictionary`2<string, object> get_Session();
    public abstract virtual void set_Session(IDictionary`2<string, object> value);
    public abstract virtual CompilerErrorCollection get_Errors();
    public abstract virtual void Initialize();
    public abstract virtual string TransformText();
}
public class Microsoft.DotNet.Scaffolding.Shared.T4Templating.TemplateInvoker : object {
    private ConsoleLogger _consoleLogger;
    public TemplateInvoker(ConsoleLogger consoleLogger);
    public sealed virtual string InvokeTemplate(ITextTransformation template, IDictionary`2<string, object> templateParameters);
    private string ProcessTemplate(ITextTransformation transformation);
}
public class Microsoft.DotNet.Scaffolding.Shared.T4Templating.TextTemplatingEngineHost : object {
    private static List`1<string> _noWarn;
    private IServiceProvider _serviceProvider;
    private ITextTemplatingSession _session;
    private CompilerErrorCollection _errors;
    private string _extension;
    private Encoding _outputEncoding;
    private bool _fromOutputDirective;
    [CompilerGeneratedAttribute]
private IList`1<string> <StandardAssemblyReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <StandardImports>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TemplateFile>k__BackingField;
    public ITextTemplatingSession Session { get; public set; }
    public IList`1<string> StandardAssemblyReferences { get; }
    public IList`1<string> StandardImports { get; }
    public string TemplateFile { get; public set; }
    public string Extension { get; }
    public CompilerErrorCollection Errors { get; }
    public Encoding OutputEncoding { get; }
    public TextTemplatingEngineHost(IServiceProvider serviceProvider);
    private static TextTemplatingEngineHost();
    public virtual ITextTemplatingSession get_Session();
    public virtual void set_Session(ITextTemplatingSession value);
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_StandardAssemblyReferences();
    [CompilerGeneratedAttribute]
public virtual IList`1<string> get_StandardImports();
    [CompilerGeneratedAttribute]
public virtual string get_TemplateFile();
    [CompilerGeneratedAttribute]
public virtual void set_TemplateFile(string value);
    public virtual string get_Extension();
    public virtual CompilerErrorCollection get_Errors();
    public virtual Encoding get_OutputEncoding();
    public virtual void Initialize();
    public virtual ITextTemplatingSession CreateSession();
    public virtual object GetHostOption(string optionName);
    public virtual bool LoadIncludeText(string requestFileName, String& content, String& location);
    public virtual void LogErrors(CompilerErrorCollection errors);
    public virtual AppDomain ProvideTemplatingAppDomain(string content);
    public virtual string ResolveAssemblyReference(string assemblyReference);
    public virtual Type ResolveDirectiveProcessor(string processorName);
    public virtual string ResolveParameterValue(string directiveId, string processorName, string parameterName);
    public virtual string ResolvePath(string path);
    public virtual void SetFileExtension(string extension);
    public virtual void SetOutputEncoding(Encoding encoding, bool fromOutputDirective);
    public virtual object GetService(Type serviceType);
}
public static class Microsoft.Extensions.Internal.ArgumentEscaper : object {
    public static string EscapeAndConcatenateArgArrayForProcessStart(IEnumerable`1<string> args);
    private static IEnumerable`1<string> EscapeArgArray(IEnumerable`1<string> args);
    public static string EscapeSingleArg(string arg);
    internal static bool ShouldSurroundWithQuotes(string argument);
    internal static bool IsSurroundedWithQuotes(string argument);
    internal static bool ArgumentContainsWhitespace(string argument);
}
internal class Microsoft.Extensions.Internal.Command : object {
    private Process _process;
    private bool _running;
    private Action`1<string> _stdErrorHandler;
    private Action`1<string> _stdOutHandler;
    private static ConsoleLogger _logger;
    private Command(string commandName, IEnumerable`1<string> args);
    private static Command();
    internal static Command CreateDotNet(string commandName, IEnumerable`1<string> args);
    internal static Command Create(string commandName, IEnumerable`1<string> args);
    public Command InWorkingDirectory(string workingDir);
    public Command WithEnvironmentVariable(string name, string value);
    public virtual string ToString();
    public CommandResult Execute();
    private void OnErrorReceived(object sender, DataReceivedEventArgs e);
    private void OnOutputReceived(object sender, DataReceivedEventArgs e);
    public Command OnOutputLine(Action`1<string> handler);
    public Command OnErrorLine(Action`1<string> handler);
    private void ThrowIfRunning(string memberName);
}
public class Microsoft.Extensions.Internal.CommandResult : ValueType {
    public static CommandResult Empty;
    [CompilerGeneratedAttribute]
private ProcessStartInfo <StartInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    public ProcessStartInfo StartInfo { get; }
    public int ExitCode { get; }
    public CommandResult(ProcessStartInfo startInfo, int exitCode);
    private static CommandResult();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ProcessStartInfo get_StartInfo();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_ExitCode();
}
public static class Microsoft.Extensions.Internal.DotNetMuxer : object {
    private static string MuxerName;
    [CompilerGeneratedAttribute]
private static string <MuxerPath>k__BackingField;
    public static string MuxerPath { get; }
    private static DotNetMuxer();
    [CompilerGeneratedAttribute]
public static string get_MuxerPath();
    public static string MuxerPathOrDefault();
    private static string TryFindMuxerPath();
}
internal static class Microsoft.Extensions.Internal.DotnetToolDispatcher : object {
    private static string DispatcherVersionArgumentName;
    public static string NETCoreApp;
    private static string DispatcherName;
    private static DotnetToolDispatcher();
    public static Command CreateDispatchCommand(string runtimeConfigPath, string depsFile, string dependencyToolPath, IEnumerable`1<string> dispatchArgs, string tfmMoniker, string configuration, string projectDirectory, string assemblyFullPath);
    internal static bool IsNetCoreAppFramework(string targetFrameworkMoniker);
    private static void EnsureBindingRedirects(string assemblyFullPath, string toolName);
    public static bool IsDispatcher(String[] programArgs);
    public static void EnsureValidDispatchRecipient(String[]& programArgs);
    public static void EnsureValidDispatchRecipient(String[]& programArgs, string toolName);
    internal static string ResolveDispatcherVersionArgumentValue(string toolName);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Extensions.ProjectModel.MessageStrings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ProjectPathNotGiven { get; }
    internal static string TargetLocationNotGiven { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ProjectPathNotGiven();
    internal static string get_TargetLocationNotGiven();
}
public class Microsoft.Extensions.ProjectModel.MsBuildProjectContextBuilder : object {
    private string _projectPath;
    private string _targetLocation;
    private string _configuration;
    public MsBuildProjectContextBuilder(string projectPath, string targetsLocation, string configuration);
    public IProjectContext Build();
    private Exception CreateProjectContextCreationFailedException(string _projectPath, List`1<string> errors);
}
internal class Microsoft.Extensions.ProjectModel.MsBuildProjectFinder : object {
    private string _directory;
    public MsBuildProjectFinder(string directory);
    public string FindMsBuildProject(string project);
    protected virtual Exception FileDoesNotExist(string filePath);
    protected virtual Exception MultipleProjectsFound(string directory);
    protected virtual Exception NoProjectsFound(string directory);
    protected virtual IEnumerable`1<string> FindProjectFiles(string directory);
}
public class Microsoft.VisualStudio.Web.CodeGeneration.Utils.ProjectInformation : object {
    [CompilerGeneratedAttribute]
private IProjectContext <RootProject>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IProjectContext> <DependencyProjects>k__BackingField;
    public IProjectContext RootProject { get; }
    public IEnumerable`1<IProjectContext> DependencyProjects { get; }
    public ProjectInformation(IProjectContext root, IEnumerable`1<IProjectContext> projectReferences);
    [CompilerGeneratedAttribute]
public IProjectContext get_RootProject();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IProjectContext> get_DependencyProjects();
}
public static class Microsoft.VisualStudio.Web.CodeGeneration.Utils.Requires : object {
    public static void NotNull(object o, string name);
    public static void NotNullOrEmpty(string s, string name);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
