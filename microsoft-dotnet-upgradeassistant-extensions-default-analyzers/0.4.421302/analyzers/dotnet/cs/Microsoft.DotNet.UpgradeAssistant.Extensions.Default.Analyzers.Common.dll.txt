[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class Microsoft.DotNet.UpgradeAssistant.ApplicableComponentsAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ProjectComponents <Components>k__BackingField;
    public ProjectComponents Components { get; }
    public ApplicableComponentsAttribute(ProjectComponents components);
    [CompilerGeneratedAttribute]
public ProjectComponents get_Components();
}
[ExtensionAttribute]
public static class Microsoft.DotNet.UpgradeAssistant.Extensions.Default.Analyzers.Common.AnalysisContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void RegisterSimpleMemberAccessExpression(AnalysisContext analysisContext, Action`1<SyntaxNodeAnalysisContext> analyze, Action`1<SyntaxNodeAnalysisContext> vbAnalyze);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.DotNet.UpgradeAssistant.Extensions.Default.Analyzers.Common.GeneralInvocationExpression : ValueType {
    private SyntaxNode _invocationExpression;
    public GeneralInvocationExpression(SyntaxNode syntaxNode);
    public IEnumerable`1<SyntaxNode> GetArguments();
    public sealed virtual Location GetLocation();
    public sealed virtual InvocationExpressionSyntax GetVisualBasicNode();
    public sealed virtual InvocationExpressionSyntax GetCSharpNode();
    public sealed virtual bool Equals(GeneralInvocationExpression other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(GeneralInvocationExpression left, GeneralInvocationExpression right);
    public static bool op_Inequality(GeneralInvocationExpression left, GeneralInvocationExpression right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.DotNet.UpgradeAssistant.Extensions.Default.Analyzers.Common.GeneralMemberAccessExpression : ValueType {
    private SyntaxNode _memberAccessExpression;
    public GeneralMemberAccessExpression(SyntaxNode syntaxNode);
    public string GetName();
    public bool IsChildOfInvocationExpression();
    public sealed virtual Location GetLocation();
    public SyntaxNode GetAccessedIdentifier();
    public sealed virtual MemberAccessExpressionSyntax GetVisualBasicNode();
    public sealed virtual MemberAccessExpressionSyntax GetCSharpNode();
    public sealed virtual bool Equals(GeneralMemberAccessExpression other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(GeneralMemberAccessExpression left, GeneralMemberAccessExpression right);
    public static bool op_Inequality(GeneralMemberAccessExpression left, GeneralMemberAccessExpression right);
}
[NullableContextAttribute("1")]
public interface Microsoft.DotNet.UpgradeAssistant.Extensions.Default.Analyzers.Common.IGeneralizeRoslynSyntax`2 {
    public abstract virtual Location GetLocation();
    public abstract virtual TCsharp GetCSharpNode();
    public abstract virtual TVisualBasic GetVisualBasicNode();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.DotNet.UpgradeAssistant.Extensions.Default.Analyzers.Common.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string UnknownLanguage { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_UnknownLanguage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.DotNet.UpgradeAssistant.Extensions.Default.OperationExtensions : object {
    [ExtensionAttribute]
public static bool IsVisualBasic(IOperation operation);
    [ExtensionAttribute]
public static bool IsCSharp(IOperation operation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IOperation GetEnclosingMethodOperation(IOperation operation);
    [ExtensionAttribute]
public static bool IsEnclosedMethodOperation(IOperation operation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.DotNet.UpgradeAssistant.Extensions.Default.QualifiedNameBuilder : object {
    public static SyntaxNode BuildQualifiedNameSyntax(SyntaxGenerator generator, string qualifiedName);
    public static SyntaxNode BuildMemberAccessExpression(SyntaxGenerator generator, string qualifiedName);
    private static SyntaxNode BuildRecursiveNameSyntax(SyntaxGenerator generator, ReadOnlySpan`1<string> nameSegments, Func`3<SyntaxNode, SyntaxNode, SyntaxNode> combineFunc);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.DotNet.UpgradeAssistant.Extensions.Default.SymbolExtensions : object {
    [ExtensionAttribute]
public static bool NameEquals(ISymbol symbol, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static StringComparison GetStringComparison(ISymbol symbol);
    [ExtensionAttribute]
public static StringComparer GetStringComparer(ISymbol symbol);
    [IteratorStateMachineAttribute("Microsoft.DotNet.UpgradeAssistant.Extensions.Default.SymbolExtensions/<GetAllMembers>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<ISymbol> GetAllMembers(INamedTypeSymbol symbol);
    [ExtensionAttribute]
public static bool NameEquals(IAssemblySymbol symbol, string name, bool startsWith);
    [ExtensionAttribute]
public static IParameterSymbol GetExistingParameterSymbolByType(SyntaxNode node, SemanticModel semanticModel, ITypeSymbol type, CancellationToken token);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IOperation GetParentOperationWhere(IOperation operation, Func`2<IOperation, bool> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.DotNet.UpgradeAssistant.Extensions.Default.SyntaxNodeExtensions : object {
    [ExtensionAttribute]
public static SyntaxNode AddArgumentToInvocation(SyntaxNode invocationNode, SyntaxNode argument);
    [ExtensionAttribute]
public static SyntaxNode GetSyntaxIdentifierForBaseType(SyntaxNode importOrBaseListSyntax);
    [ExtensionAttribute]
public static string GetSimpleName(SyntaxNode node);
    [ExtensionAttribute]
public static SyntaxNode GetQualifiedName(SyntaxNode node);
    [ExtensionAttribute]
public static T GetMethodDeclaration(SyntaxNode node, string methodName, String[] requiredParameterTypes);
    [ExtensionAttribute]
public static T WithWhitespaceTriviaFrom(T statement, SyntaxNode otherStatement);
    [ExtensionAttribute]
public static bool HasAccessToNamespace(SyntaxNode node, string namespaceName);
    [ExtensionAttribute]
public static CompilationUnitSyntax AddImportIfMissing(CompilationUnitSyntax documentRoot, string namespaceName);
    [ExtensionAttribute]
public static CompilationUnitSyntax AddImportIfMissing(CompilationUnitSyntax documentRoot, string namespaceName);
    [ExtensionAttribute]
private static bool RootIncludesImport(SyntaxNode documentRoot, string namespaceName);
    [ExtensionAttribute]
public static SyntaxNode GetInvocationExpression(SyntaxNode callerNode);
    [ExtensionAttribute]
public static SyntaxNode GetChildExpressionSyntax(SyntaxNode memberAccessSyntax);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static StringComparison GetStringComparison(SyntaxNode node);
    [ExtensionAttribute]
public static StringComparer GetStringComparer(SyntaxNode node);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsTypeSyntax(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsCSharp(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsBaseTypeSyntax(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsIdentifierName(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsInvocationExpression(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsMemberAccessExpression(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsNameSyntax(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsNullLiteralExpression(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsQualifiedName(SyntaxNode node);
    [ExtensionAttribute]
public static bool IsVisualBasic(SyntaxNode node);
    [CompilerGeneratedAttribute]
internal static bool <WithWhitespaceTriviaFrom>g__IsWhitespaceTrivia|5_0(SyntaxTrivia trivia);
    [CompilerGeneratedAttribute]
internal static bool <HasAccessToNamespace>g__IncludesImport|6_1(SyntaxNode node, string namespaceName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.DotNet.UpgradeAssistant.Extensions.Default.WorkspaceExtensions : object {
    [ExtensionAttribute]
public static bool TargetsAspNetCore(Compilation compilation);
    [ExtensionAttribute]
public static bool TryGetDocument(Solution sln, SyntaxTree tree, Document& document);
}
[FlagsAttribute]
public enum Microsoft.DotNet.UpgradeAssistant.ProjectComponents : Enum {
    public int value__;
    public static ProjectComponents None;
    public static ProjectComponents WindowsDesktop;
    public static ProjectComponents AspNet;
    public static ProjectComponents WinRT;
    public static ProjectComponents Wpf;
    public static ProjectComponents WinForms;
    public static ProjectComponents AspNetCore;
    public static ProjectComponents XamarinAndroid;
    public static ProjectComponents XamariniOS;
    public static ProjectComponents Maui;
    public static ProjectComponents MauiAndroid;
    public static ProjectComponents MauiiOS;
    public static ProjectComponents WinUI;
    public static ProjectComponents UWP;
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.SR : object {
    public static string Format(string str, object arg0);
    public static string Format(string str, object arg0, object arg1);
    [NullableContextAttribute("2")]
public static string Format(string str, object arg0, object arg1, object arg2);
}
