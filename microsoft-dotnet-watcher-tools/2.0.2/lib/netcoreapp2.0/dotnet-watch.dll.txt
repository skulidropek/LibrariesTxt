internal class Microsoft.DotNet.Watcher.CommandLineOptions : object {
    [CompilerGeneratedAttribute]
private string <Project>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSBuildProjectExtensionsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQuiet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVerbose>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <RemainingArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ListFiles>k__BackingField;
    public string Project { get; private set; }
    public string MSBuildProjectExtensionsPath { get; private set; }
    public bool IsHelp { get; private set; }
    public bool IsQuiet { get; private set; }
    public bool IsVerbose { get; private set; }
    public IList`1<string> RemainingArguments { get; private set; }
    public bool ListFiles { get; private set; }
    [CompilerGeneratedAttribute]
public string get_Project();
    [CompilerGeneratedAttribute]
private void set_Project(string value);
    [CompilerGeneratedAttribute]
public string get_MSBuildProjectExtensionsPath();
    [CompilerGeneratedAttribute]
private void set_MSBuildProjectExtensionsPath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsHelp();
    [CompilerGeneratedAttribute]
private void set_IsHelp(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsQuiet();
    [CompilerGeneratedAttribute]
private void set_IsQuiet(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsVerbose();
    [CompilerGeneratedAttribute]
private void set_IsVerbose(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_RemainingArguments();
    [CompilerGeneratedAttribute]
private void set_RemainingArguments(IList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_ListFiles();
    [CompilerGeneratedAttribute]
private void set_ListFiles(bool value);
    public static CommandLineOptions Parse(String[] args, IConsole console);
}
public class Microsoft.DotNet.Watcher.DotNetWatcher : object {
    private IReporter _reporter;
    private ProcessRunner _processRunner;
    public DotNetWatcher(IReporter reporter);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Watcher.DotNetWatcher/<WatchAsync>d__3")]
public Task WatchAsync(ProcessSpec processSpec, IFileSetFactory fileSetFactory, CancellationToken cancellationToken);
}
public interface Microsoft.DotNet.Watcher.IFileSet {
    public abstract virtual bool Contains(string filePath);
}
public interface Microsoft.DotNet.Watcher.IFileSetFactory {
    public abstract virtual Task`1<IFileSet> CreateAsync(CancellationToken cancellationToken);
}
internal class Microsoft.DotNet.Watcher.Internal.DotnetFileWatcher : object {
    private Func`2<string, FileSystemWatcher> _watcherFactory;
    private string _watchedDirectory;
    private FileSystemWatcher _fileSystemWatcher;
    private object _createLock;
    [CompilerGeneratedAttribute]
private EventHandler`1<string> OnFileChange;
    [CompilerGeneratedAttribute]
private EventHandler OnError;
    public bool EnableRaisingEvents { get; public set; }
    public DotnetFileWatcher(string watchedDirectory);
    internal DotnetFileWatcher(string watchedDirectory, Func`2<string, FileSystemWatcher> fileSystemWatcherFactory);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnFileChange(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnFileChange(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnError(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnError(EventHandler value);
    private static FileSystemWatcher DefaultWatcherFactory(string watchedDirectory);
    private void WatcherErrorHandler(object sender, ErrorEventArgs e);
    private void WatcherRenameHandler(object sender, RenamedEventArgs e);
    private void WatcherChangeHandler(object sender, FileSystemEventArgs e);
    private void NotifyChange(string fullPath);
    private void CreateFileSystemWatcher();
    public sealed virtual bool get_EnableRaisingEvents();
    public sealed virtual void set_EnableRaisingEvents(bool value);
    public sealed virtual void Dispose();
}
public class Microsoft.DotNet.Watcher.Internal.FileSet : object {
    private HashSet`1<string> _files;
    public int Count { get; }
    public FileSet(IEnumerable`1<string> files);
    public sealed virtual bool Contains(string filePath);
    public int get_Count();
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.DotNet.Watcher.Internal.FileSetWatcher : object {
    private FileWatcher _fileWatcher;
    private IFileSet _fileSet;
    public FileSetWatcher(IFileSet fileSet);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Watcher.Internal.FileSetWatcher/<GetChangedFileAsync>d__3")]
public Task`1<string> GetChangedFileAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
public class Microsoft.DotNet.Watcher.Internal.FileWatcher : object {
    private bool _disposed;
    private IDictionary`2<string, IFileSystemWatcher> _watchers;
    [CompilerGeneratedAttribute]
private Action`1<string> OnFileChange;
    [CompilerGeneratedAttribute]
public void add_OnFileChange(Action`1<string> value);
    [CompilerGeneratedAttribute]
public void remove_OnFileChange(Action`1<string> value);
    public void WatchDirectory(string directory);
    public void Dispose();
    private void AddDirectoryWatcher(string directory);
    private void WatcherChangedHandler(object sender, string changedPath);
    private void NotifyChange(string path);
    private void DisposeWatcher(string directory);
    private void EnsureNotDisposed();
    private static string EnsureTrailingSlash(string path);
}
public static class Microsoft.DotNet.Watcher.Internal.FileWatcherFactory : object {
    public static IFileSystemWatcher CreateWatcher(string watchedDirectory);
    public static IFileSystemWatcher CreateWatcher(string watchedDirectory, bool usePollingWatcher);
}
public interface Microsoft.DotNet.Watcher.Internal.IFileSystemWatcher {
    public bool EnableRaisingEvents { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnFileChange(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnFileChange(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnError(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnError(EventHandler value);
    public abstract virtual bool get_EnableRaisingEvents();
    public abstract virtual void set_EnableRaisingEvents(bool value);
}
public class Microsoft.DotNet.Watcher.Internal.MsBuildFileSetFactory : object {
    private static string TargetName;
    private static string ProjectExtensionFileExtension;
    private static string WatchTargetsFileName;
    private IReporter _reporter;
    private string _projectFile;
    private string _projectExtensionsPath;
    private string _watchTargetsDir;
    private OutputSink _outputSink;
    private ProcessRunner _processRunner;
    private bool _waitOnError;
    [CompilerGeneratedAttribute]
private List`1<string> <BuildFlags>k__BackingField;
    internal List`1<string> BuildFlags { get; }
    public MsBuildFileSetFactory(IReporter reporter, string projectFile, string msBuildProjectExtensionsPath, bool waitOnError);
    internal MsBuildFileSetFactory(IReporter reporter, string projectFile, string msBuildProjectExtensionsPath, OutputSink outputSink);
    [CompilerGeneratedAttribute]
internal List`1<string> get_BuildFlags();
    [AsyncStateMachineAttribute("Microsoft.DotNet.Watcher.Internal.MsBuildFileSetFactory/<CreateAsync>d__15")]
public sealed virtual Task`1<IFileSet> CreateAsync(CancellationToken cancellationToken);
    private void EnsureInitialized();
    private string FindWatchTargetsDir();
}
internal class Microsoft.DotNet.Watcher.Internal.MsBuildProjectFinder : object {
    public static string FindMsBuildProject(string searchBase, string project);
}
public class Microsoft.DotNet.Watcher.Internal.OutputCapture : object {
    private List`1<string> _lines;
    public IEnumerable`1<string> Lines { get; }
    public IEnumerable`1<string> get_Lines();
    public void AddLine(string line);
}
public class Microsoft.DotNet.Watcher.Internal.OutputSink : object {
    [CompilerGeneratedAttribute]
private OutputCapture <Current>k__BackingField;
    public OutputCapture Current { get; private set; }
    [CompilerGeneratedAttribute]
public OutputCapture get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(OutputCapture value);
    public OutputCapture StartCapture();
}
internal class Microsoft.DotNet.Watcher.Internal.PollingFileWatcher : object {
    private static TimeSpan _minRunInternal;
    private DirectoryInfo _watchedDirectory;
    private Dictionary`2<string, FileMeta> _knownEntities;
    private Dictionary`2<string, FileMeta> _tempDictionary;
    private HashSet`1<string> _changes;
    private Thread _pollingThread;
    private bool _raiseEvents;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private EventHandler`1<string> OnFileChange;
    [CompilerGeneratedAttribute]
private EventHandler OnError;
    public bool EnableRaisingEvents { get; public set; }
    public PollingFileWatcher(string watchedDirectory);
    private static PollingFileWatcher();
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnFileChange(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnFileChange(EventHandler`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnError(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnError(EventHandler value);
    public sealed virtual bool get_EnableRaisingEvents();
    public sealed virtual void set_EnableRaisingEvents(bool value);
    private void PollingLoop();
    private void CreateKnownFilesSnapshot();
    private void CheckForChangedFiles();
    private void RecordChange(FileSystemInfo fileInfo);
    private void ForeachEntityInDirectory(DirectoryInfo dirInfo, Action`1<FileSystemInfo> fileAction);
    private void NotifyChanges();
    private void EnsureNotDisposed();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <CreateKnownFilesSnapshot>b__19_0(FileSystemInfo f);
    [CompilerGeneratedAttribute]
private void <CheckForChangedFiles>b__20_0(FileSystemInfo f);
}
public class Microsoft.DotNet.Watcher.Internal.ProcessRunner : object {
    private IReporter _reporter;
    public ProcessRunner(IReporter reporter);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Watcher.Internal.ProcessRunner/<RunAsync>d__2")]
public Task`1<int> RunAsync(ProcessSpec processSpec, CancellationToken cancellationToken);
    private Process CreateProcess(ProcessSpec processSpec);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Watcher.Internal.ProcessRunner/<ConsumeStreamAsync>d__4")]
private static Task ConsumeStreamAsync(StreamReader reader, Action`1<string> consume);
}
public class Microsoft.DotNet.Watcher.PrefixConsoleReporter : ConsoleReporter {
    private object _lock;
    public PrefixConsoleReporter(IConsole console, bool verbose, bool quiet);
    protected virtual void WriteLine(TextWriter writer, string message, Nullable`1<ConsoleColor> color);
}
public class Microsoft.DotNet.Watcher.ProcessSpec : object {
    [CompilerGeneratedAttribute]
private string <Executable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputCapture <OutputCapture>k__BackingField;
    public string Executable { get; public set; }
    public string WorkingDirectory { get; public set; }
    public IDictionary`2<string, string> EnvironmentVariables { get; }
    public IEnumerable`1<string> Arguments { get; public set; }
    public OutputCapture OutputCapture { get; public set; }
    public bool IsOutputCaptured { get; }
    [CompilerGeneratedAttribute]
public string get_Executable();
    [CompilerGeneratedAttribute]
public void set_Executable(string value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public OutputCapture get_OutputCapture();
    [CompilerGeneratedAttribute]
public void set_OutputCapture(OutputCapture value);
    public string ShortDisplayName();
    public bool get_IsOutputCaptured();
}
public class Microsoft.DotNet.Watcher.Program : object {
    private IConsole _console;
    private string _workingDir;
    private CancellationTokenSource _cts;
    private IReporter _reporter;
    public Program(IConsole console, string workingDir);
    public static int Main(String[] args);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Watcher.Program/<RunAsync>d__6")]
public Task`1<int> RunAsync(String[] args);
    private void OnCancelKeyPress(object sender, ConsoleCancelEventArgs args);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Watcher.Program/<MainInternalAsync>d__8")]
private Task`1<int> MainInternalAsync(IReporter reporter, string project, string msbuildProjectExtensionsPath, ICollection`1<string> args, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.DotNet.Watcher.Program/<ListFilesAsync>d__9")]
private Task`1<int> ListFilesAsync(IReporter reporter, string project, string msbuildProjectExtensionsPath, CancellationToken cancellationToken);
    private static IReporter CreateReporter(bool verbose, bool quiet, IConsole console);
    private string NormalizePath(string path);
    public sealed virtual void Dispose();
}
internal static class Microsoft.DotNet.Watcher.Tools.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string Error_ProjectPath_NotFound { get; }
    internal static string Error_MultipleProjectsFound { get; }
    internal static string Error_NoProjectsFound { get; }
    internal static string Error_QuietAndVerboseSpecified { get; }
    private static Resources();
    internal static string get_Error_ProjectPath_NotFound();
    internal static string FormatError_ProjectPath_NotFound(object path);
    internal static string get_Error_MultipleProjectsFound();
    internal static string FormatError_MultipleProjectsFound(object projectPath);
    internal static string get_Error_NoProjectsFound();
    internal static string FormatError_NoProjectsFound(object projectPath);
    internal static string get_Error_QuietAndVerboseSpecified();
    internal static string FormatError_QuietAndVerboseSpecified();
    private static string GetString(string name, String[] formatterNames);
}
internal class Microsoft.Extensions.CommandLineUtils.AnsiConsole : object {
    private int _boldRecursion;
    private bool _useConsoleColor;
    [CompilerGeneratedAttribute]
private TextWriter <Writer>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <OriginalForegroundColor>k__BackingField;
    public TextWriter Writer { get; }
    public ConsoleColor OriginalForegroundColor { get; }
    private AnsiConsole(TextWriter writer, bool useConsoleColor);
    public static AnsiConsole GetOutput(bool useConsoleColor);
    public static AnsiConsole GetError(bool useConsoleColor);
    [CompilerGeneratedAttribute]
public TextWriter get_Writer();
    [CompilerGeneratedAttribute]
public ConsoleColor get_OriginalForegroundColor();
    private void SetColor(ConsoleColor color);
    private void SetBold(bool bold);
    public void WriteLine(string message);
}
internal static class Microsoft.Extensions.CommandLineUtils.ArgumentEscaper : object {
    public static string EscapeAndConcatenate(IEnumerable`1<string> args);
    private static string EscapeSingleArg(string arg);
    private static bool ShouldSurroundWithQuotes(string argument);
    private static bool IsSurroundedWithQuotes(string argument);
    private static bool ContainsWhitespace(string argument);
}
internal class Microsoft.Extensions.CommandLineUtils.CommandArgument : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultipleValues>k__BackingField;
    public string Name { get; public set; }
    public bool ShowInHelpText { get; public set; }
    public string Description { get; public set; }
    public List`1<string> Values { get; private set; }
    public bool MultipleValues { get; public set; }
    public string Value { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_MultipleValues();
    [CompilerGeneratedAttribute]
public void set_MultipleValues(bool value);
    public string get_Value();
}
internal class Microsoft.Extensions.CommandLineUtils.CommandLineApplication : object {
    private bool _throwOnUnexpectedArg;
    [CompilerGeneratedAttribute]
private CommandLineApplication <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtendedHelpText>k__BackingField;
    public List`1<CommandOption> Options;
    [CompilerGeneratedAttribute]
private CommandOption <OptionHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <OptionVersion>k__BackingField;
    public List`1<CommandArgument> Arguments;
    public List`1<string> RemainingArguments;
    [CompilerGeneratedAttribute]
private bool <IsShowingInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<int> <Invoke>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <LongVersionGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <ShortVersionGetter>k__BackingField;
    public List`1<CommandLineApplication> Commands;
    [CompilerGeneratedAttribute]
private bool <AllowArgumentSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Out>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Error>k__BackingField;
    public CommandLineApplication Parent { get; public set; }
    public string Name { get; public set; }
    public string FullName { get; public set; }
    public string Syntax { get; public set; }
    public string Description { get; public set; }
    public bool ShowInHelpText { get; public set; }
    public string ExtendedHelpText { get; public set; }
    public CommandOption OptionHelp { get; private set; }
    public CommandOption OptionVersion { get; private set; }
    public bool IsShowingInformation { get; protected set; }
    public Func`1<int> Invoke { get; public set; }
    public Func`1<string> LongVersionGetter { get; public set; }
    public Func`1<string> ShortVersionGetter { get; public set; }
    public bool AllowArgumentSeparator { get; public set; }
    public TextWriter Out { get; public set; }
    public TextWriter Error { get; public set; }
    public CommandLineApplication(bool throwOnUnexpectedArg);
    [CompilerGeneratedAttribute]
public CommandLineApplication get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(CommandLineApplication value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public void set_Syntax(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [CompilerGeneratedAttribute]
public string get_ExtendedHelpText();
    [CompilerGeneratedAttribute]
public void set_ExtendedHelpText(string value);
    [CompilerGeneratedAttribute]
public CommandOption get_OptionHelp();
    [CompilerGeneratedAttribute]
private void set_OptionHelp(CommandOption value);
    [CompilerGeneratedAttribute]
public CommandOption get_OptionVersion();
    [CompilerGeneratedAttribute]
private void set_OptionVersion(CommandOption value);
    [CompilerGeneratedAttribute]
public bool get_IsShowingInformation();
    [CompilerGeneratedAttribute]
protected void set_IsShowingInformation(bool value);
    [CompilerGeneratedAttribute]
public Func`1<int> get_Invoke();
    [CompilerGeneratedAttribute]
public void set_Invoke(Func`1<int> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_LongVersionGetter();
    [CompilerGeneratedAttribute]
public void set_LongVersionGetter(Func`1<string> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_ShortVersionGetter();
    [CompilerGeneratedAttribute]
public void set_ShortVersionGetter(Func`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_AllowArgumentSeparator();
    [CompilerGeneratedAttribute]
public void set_AllowArgumentSeparator(bool value);
    [CompilerGeneratedAttribute]
public TextWriter get_Out();
    [CompilerGeneratedAttribute]
public void set_Out(TextWriter value);
    [CompilerGeneratedAttribute]
public TextWriter get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(TextWriter value);
    public IEnumerable`1<CommandOption> GetOptions();
    public CommandLineApplication Command(string name, Action`1<CommandLineApplication> configuration, bool throwOnUnexpectedArg);
    public CommandOption Option(string template, string description, CommandOptionType optionType);
    public CommandOption Option(string template, string description, CommandOptionType optionType, bool inherited);
    public CommandOption Option(string template, string description, CommandOptionType optionType, Action`1<CommandOption> configuration);
    public CommandOption Option(string template, string description, CommandOptionType optionType, Action`1<CommandOption> configuration, bool inherited);
    public CommandArgument Argument(string name, string description, bool multipleValues);
    public CommandArgument Argument(string name, string description, Action`1<CommandArgument> configuration, bool multipleValues);
    public void OnExecute(Func`1<int> invoke);
    public void OnExecute(Func`1<Task`1<int>> invoke);
    public int Execute(String[] args);
    public CommandOption HelpOption(string template);
    public CommandOption VersionOption(string template, string shortFormVersion, string longFormVersion);
    public CommandOption VersionOption(string template, Func`1<string> shortFormVersionGetter, Func`1<string> longFormVersionGetter);
    public void ShowHint();
    public void ShowHelp(string commandName);
    public virtual string GetHelpText(string commandName);
    public void ShowVersion();
    public string GetFullNameAndVersion();
    public void ShowRootCommandFullNameAndVersion();
    private void HandleUnexpectedArg(CommandLineApplication command, String[] args, int index, string argTypeName);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.CommandLineUtils.CommandLineApplicationExtensions : object {
    [ExtensionAttribute]
public static CommandOption HelpOption(CommandLineApplication app);
    [ExtensionAttribute]
public static CommandOption VerboseOption(CommandLineApplication app);
    [ExtensionAttribute]
public static void OnExecute(CommandLineApplication app, Action action);
    [ExtensionAttribute]
public static void VersionOptionFromAssemblyAttributes(CommandLineApplication app, Assembly assembly);
    private static string GetInformationalVersion(Assembly assembly);
}
internal class Microsoft.Extensions.CommandLineUtils.CommandOption : object {
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LongName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SymbolName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOptionType <OptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inherited>k__BackingField;
    public string Template { get; public set; }
    public string ShortName { get; public set; }
    public string LongName { get; public set; }
    public string SymbolName { get; public set; }
    public string ValueName { get; public set; }
    public string Description { get; public set; }
    public List`1<string> Values { get; private set; }
    public CommandOptionType OptionType { get; private set; }
    public bool ShowInHelpText { get; public set; }
    public bool Inherited { get; public set; }
    public CommandOption(string template, CommandOptionType optionType);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public string get_LongName();
    [CompilerGeneratedAttribute]
public void set_LongName(string value);
    [CompilerGeneratedAttribute]
public string get_SymbolName();
    [CompilerGeneratedAttribute]
public void set_SymbolName(string value);
    [CompilerGeneratedAttribute]
public string get_ValueName();
    [CompilerGeneratedAttribute]
public void set_ValueName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(List`1<string> value);
    [CompilerGeneratedAttribute]
public CommandOptionType get_OptionType();
    [CompilerGeneratedAttribute]
private void set_OptionType(CommandOptionType value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [CompilerGeneratedAttribute]
public bool get_Inherited();
    [CompilerGeneratedAttribute]
public void set_Inherited(bool value);
    public bool TryParse(string value);
    public bool HasValue();
    public string Value();
    private bool IsEnglishLetter(char c);
}
internal enum Microsoft.Extensions.CommandLineUtils.CommandOptionType : Enum {
    public int value__;
    public static CommandOptionType MultipleValue;
    public static CommandOptionType SingleValue;
    public static CommandOptionType NoValue;
}
internal class Microsoft.Extensions.CommandLineUtils.CommandParsingException : Exception {
    [CompilerGeneratedAttribute]
private CommandLineApplication <Command>k__BackingField;
    public CommandLineApplication Command { get; }
    public CommandParsingException(CommandLineApplication command, string message);
    [CompilerGeneratedAttribute]
public CommandLineApplication get_Command();
}
internal static class Microsoft.Extensions.CommandLineUtils.DotNetMuxer : object {
    private static string MuxerName;
    [CompilerGeneratedAttribute]
private static string <MuxerPath>k__BackingField;
    public static string MuxerPath { get; }
    private static DotNetMuxer();
    [CompilerGeneratedAttribute]
public static string get_MuxerPath();
    public static string MuxerPathOrDefault();
    private static string TryFindMuxerPath();
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Internal.ProcessExtensions : object {
    private static bool _isWindows;
    private static TimeSpan _defaultTimeout;
    private static ProcessExtensions();
    [ExtensionAttribute]
public static void KillTree(Process process);
    [ExtensionAttribute]
public static void KillTree(Process process, TimeSpan timeout);
    private static void GetAllChildIdsUnix(int parentId, ISet`1<int> children, TimeSpan timeout);
    private static void KillProcessUnix(int processId, TimeSpan timeout);
    private static int RunProcessAndWaitForExit(string fileName, string arguments, TimeSpan timeout, String& stdout);
}
public static class Microsoft.Extensions.Tools.Internal.CliContext : object {
    public static bool IsGlobalVerbose();
}
public class Microsoft.Extensions.Tools.Internal.ConsoleReporter : object {
    private object _writeLock;
    [CompilerGeneratedAttribute]
private IConsole <Console>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVerbose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQuiet>k__BackingField;
    protected IConsole Console { get; }
    public bool IsVerbose { get; public set; }
    public bool IsQuiet { get; public set; }
    public ConsoleReporter(IConsole console);
    public ConsoleReporter(IConsole console, bool verbose, bool quiet);
    [CompilerGeneratedAttribute]
protected IConsole get_Console();
    [CompilerGeneratedAttribute]
public bool get_IsVerbose();
    [CompilerGeneratedAttribute]
public void set_IsVerbose(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsQuiet();
    [CompilerGeneratedAttribute]
public void set_IsQuiet(bool value);
    protected virtual void WriteLine(TextWriter writer, string message, Nullable`1<ConsoleColor> color);
    public virtual void Error(string message);
    public virtual void Warn(string message);
    public virtual void Output(string message);
    public virtual void Verbose(string message);
}
public static class Microsoft.Extensions.Tools.Internal.DebugHelper : object {
    [ConditionalAttribute("DEBUG")]
public static void HandleDebugSwitch(String[]& args);
}
internal static class Microsoft.Extensions.Tools.Internal.Ensure : object {
    public static T NotNull(T obj, string paramName);
    public static string NotNullOrEmpty(string obj, string paramName);
}
public interface Microsoft.Extensions.Tools.Internal.IConsole {
    public TextWriter Out { get; }
    public TextWriter Error { get; }
    public TextReader In { get; }
    public bool IsInputRedirected { get; }
    public bool IsOutputRedirected { get; }
    public bool IsErrorRedirected { get; }
    public ConsoleColor ForegroundColor { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_CancelKeyPress(ConsoleCancelEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CancelKeyPress(ConsoleCancelEventHandler value);
    public abstract virtual TextWriter get_Out();
    public abstract virtual TextWriter get_Error();
    public abstract virtual TextReader get_In();
    public abstract virtual bool get_IsInputRedirected();
    public abstract virtual bool get_IsOutputRedirected();
    public abstract virtual bool get_IsErrorRedirected();
    public abstract virtual ConsoleColor get_ForegroundColor();
    public abstract virtual void set_ForegroundColor(ConsoleColor value);
    public abstract virtual void ResetColor();
}
public interface Microsoft.Extensions.Tools.Internal.IReporter {
    public abstract virtual void Verbose(string message);
    public abstract virtual void Output(string message);
    public abstract virtual void Warn(string message);
    public abstract virtual void Error(string message);
}
public class Microsoft.Extensions.Tools.Internal.PhysicalConsole : object {
    [CompilerGeneratedAttribute]
private static IConsole <Singleton>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleCancelEventHandler CancelKeyPress;
    public static IConsole Singleton { get; }
    public TextWriter Error { get; }
    public TextReader In { get; }
    public TextWriter Out { get; }
    public bool IsInputRedirected { get; }
    public bool IsOutputRedirected { get; }
    public bool IsErrorRedirected { get; }
    public ConsoleColor ForegroundColor { get; public set; }
    private static PhysicalConsole();
    [CompilerGeneratedAttribute]
public static IConsole get_Singleton();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CancelKeyPress(ConsoleCancelEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CancelKeyPress(ConsoleCancelEventHandler value);
    public sealed virtual TextWriter get_Error();
    public sealed virtual TextReader get_In();
    public sealed virtual TextWriter get_Out();
    public sealed virtual bool get_IsInputRedirected();
    public sealed virtual bool get_IsOutputRedirected();
    public sealed virtual bool get_IsErrorRedirected();
    public sealed virtual ConsoleColor get_ForegroundColor();
    public sealed virtual void set_ForegroundColor(ConsoleColor value);
    public sealed virtual void ResetColor();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(object o, ConsoleCancelEventArgs e);
}
