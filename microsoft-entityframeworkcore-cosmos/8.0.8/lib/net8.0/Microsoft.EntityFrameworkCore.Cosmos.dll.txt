[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Cosmos.ChangeTracking.Internal.ListComparer`2 : ValueComparer`1<TCollection> {
    public Type Type { get; }
    public ListComparer`2(ValueComparer elementComparer, bool readOnly);
    public virtual Type get_Type();
    private static bool Compare(TCollection a, TCollection b, ValueComparer`1<TElement> elementComparer);
    private static int GetHashCode(TCollection source, ValueComparer`1<TElement> elementComparer);
    private static TCollection Snapshot(TCollection source, ValueComparer`1<TElement> elementComparer, bool readOnly);
}
public class Microsoft.EntityFrameworkCore.Cosmos.ChangeTracking.Internal.NullableEqualityComparer`1 : object {
    private IEqualityComparer`1<T> _underlyingComparer;
    public NullableEqualityComparer`1(IEqualityComparer`1<T> underlyingComparer);
    public virtual bool Equals(Nullable`1<T> x, Nullable`1<T> y);
    public virtual int GetHashCode(Nullable`1<T> obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Cosmos.ChangeTracking.Internal.NullableListComparer`2 : ValueComparer`1<TCollection> {
    public Type Type { get; }
    public NullableListComparer`2(ValueComparer elementComparer, bool readOnly);
    public virtual Type get_Type();
    private static bool Compare(TCollection a, TCollection b, ValueComparer`1<TElement> elementComparer);
    private static int GetHashCode(TCollection source, ValueComparer`1<TElement> elementComparer);
    private static TCollection Snapshot(TCollection source, ValueComparer`1<TElement> elementComparer, bool readOnly);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Cosmos.ChangeTracking.Internal.NullableSingleDimensionalArrayComparer`1 : ValueComparer`1<Nullable`1[]> {
    public Type Type { get; }
    public NullableSingleDimensionalArrayComparer`1(ValueComparer elementComparer);
    public virtual Type get_Type();
    private static bool Compare(Nullable`1[] a, Nullable`1[] b, ValueComparer`1<TElement> elementComparer);
    private static int GetHashCode(Nullable`1[] source, ValueComparer`1<TElement> elementComparer);
    private static Nullable`1[] Snapshot(Nullable`1[] source, ValueComparer`1<TElement> elementComparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Cosmos.ChangeTracking.Internal.NullableStringDictionaryComparer`2 : ValueComparer`1<TCollection> {
    public Type Type { get; }
    public NullableStringDictionaryComparer`2(ValueComparer elementComparer, bool readOnly);
    public virtual Type get_Type();
    private static bool Compare(TCollection a, TCollection b, ValueComparer`1<TElement> elementComparer);
    private static int GetHashCode(TCollection source, ValueComparer`1<TElement> elementComparer);
    private static TCollection Snapshot(TCollection source, ValueComparer`1<TElement> elementComparer, bool readOnly);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Cosmos.ChangeTracking.Internal.SingleDimensionalArrayComparer`1 : ValueComparer`1<TElement[]> {
    internal static PropertyInfo ArrayLengthProperty;
    public Type Type { get; }
    public SingleDimensionalArrayComparer`1(ValueComparer elementComparer);
    private static SingleDimensionalArrayComparer`1();
    public virtual Type get_Type();
    private static Expression`1<Func`3<TElement[], TElement[], bool>> CreateEqualsExpression(ValueComparer elementComparer);
    private static Expression`1<Func`2<TElement[], int>> CreateHashCodeExpression(ValueComparer elementComparer);
    private static Expression`1<Func`2<TElement[], TElement[]>> CreateSnapshotExpression(ValueComparer elementComparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Cosmos.ChangeTracking.Internal.StringDictionaryComparer`2 : ValueComparer`1<TCollection> {
    public Type Type { get; }
    public StringDictionaryComparer`2(ValueComparer elementComparer, bool readOnly);
    public virtual Type get_Type();
    private static bool Compare(TCollection a, TCollection b, ValueComparer`1<TElement> elementComparer);
    private static int GetHashCode(TCollection source, ValueComparer`1<TElement> elementComparer);
    private static TCollection Snapshot(TCollection source, ValueComparer`1<TElement> elementComparer, bool readOnly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Design.Internal.CosmosCSharpRuntimeAnnotationCodeGenerator : CSharpRuntimeAnnotationCodeGenerator {
    public CosmosCSharpRuntimeAnnotationCodeGenerator(CSharpRuntimeAnnotationCodeGeneratorDependencies dependencies);
    public virtual void Generate(IModel model, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IEntityType entityType, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Design.Internal.CosmosDesignTimeServices : object {
    [NullableContextAttribute("1")]
public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Cosmos.Diagnostics.Internal.CosmosLoggerExtensions : object {
    [ExtensionAttribute]
public static void ExecutingSqlQuery(IDiagnosticsLogger`1<Command> diagnostics, string containerId, string partitionKey, CosmosSqlQuery cosmosSqlQuery);
    private static string ExecutingSqlQuery(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ExecutingReadItem(IDiagnosticsLogger`1<Command> diagnostics, string containerId, string partitionKey, string resourceId);
    private static string ExecutingReadItem(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ExecutedReadNext(IDiagnosticsLogger`1<Command> diagnostics, TimeSpan elapsed, double requestCharge, string activityId, string containerId, string partitionKey, CosmosSqlQuery cosmosSqlQuery);
    private static string ExecutedReadNext(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ExecutedReadItem(IDiagnosticsLogger`1<Command> diagnostics, TimeSpan elapsed, double requestCharge, string activityId, string resourceId, string containerId, string partitionKey);
    private static string ExecutedReadItem(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ExecutedCreateItem(IDiagnosticsLogger`1<Command> diagnostics, TimeSpan elapsed, double requestCharge, string activityId, string resourceId, string containerId, string partitionKey);
    private static string ExecutedCreateItem(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ExecutedDeleteItem(IDiagnosticsLogger`1<Command> diagnostics, TimeSpan elapsed, double requestCharge, string activityId, string resourceId, string containerId, string partitionKey);
    private static string ExecutedDeleteItem(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ExecutedReplaceItem(IDiagnosticsLogger`1<Command> diagnostics, TimeSpan elapsed, double requestCharge, string activityId, string resourceId, string containerId, string partitionKey);
    private static string ExecutedReplaceItem(EventDefinitionBase definition, EventData payload);
    private static string FormatParameters(IReadOnlyList`1<ValueTuple`2<string, object>> parameters, bool shouldLogParameterValues);
    private static string FormatParameters(IReadOnlyList`1<SqlParameter> parameters, bool shouldLogParameterValues);
    private static string FormatParameter(SqlParameter parameter, bool shouldLogParameterValue);
    private static void FormatParameterValue(StringBuilder builder, object parameterValue);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Diagnostics.Internal.CosmosLoggingDefinitions : LoggingDefinitions {
    public EventDefinitionBase LogExecutingSqlQuery;
    public EventDefinitionBase LogExecutingReadItem;
    public EventDefinitionBase LogExecutedReadNext;
    public EventDefinitionBase LogExecutedReadItem;
    public EventDefinitionBase LogExecutedCreateItem;
    public EventDefinitionBase LogExecutedReplaceItem;
    public EventDefinitionBase LogExecutedDeleteItem;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Infrastructure.Internal.CosmosModelValidator : ModelValidator {
    public CosmosModelValidator(ModelValidatorDependencies dependencies);
    public virtual void Validate(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidatePrimitiveCollections(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedContainerCompatibility(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateSharedContainerCompatibility(IReadOnlyList`1<IEntityType> mappedTypes, string container, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateOnlyETagConcurrencyToken(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateKeys(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateNoMutableKeys(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateDatabaseProperties(IModel model, IDiagnosticsLogger`1<Validation> logger);
    [CompilerGeneratedAttribute]
internal static void <ValidatePrimitiveCollections>g__Validate|2_0(ITypeBase typeBase, IDiagnosticsLogger`1<Validation> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Infrastructure.Internal.CosmosOptionsExtension : object {
    private string _accountEndpoint;
    private string _accountKey;
    private TokenCredential _tokenCredential;
    private string _connectionString;
    private string _databaseName;
    private string _region;
    private IReadOnlyList`1<string> _preferredRegions;
    private Nullable`1<ConnectionMode> _connectionMode;
    private Nullable`1<bool> _limitToEndpoint;
    private Func`2<ExecutionStrategyDependencies, IExecutionStrategy> _executionStrategyFactory;
    private IWebProxy _webProxy;
    private Nullable`1<TimeSpan> _requestTimeout;
    private Nullable`1<TimeSpan> _openTcpConnectionTimeout;
    private Nullable`1<TimeSpan> _idleTcpConnectionTimeout;
    private Nullable`1<int> _gatewayModeMaxConnectionLimit;
    private Nullable`1<int> _maxTcpConnectionsPerEndpoint;
    private Nullable`1<int> _maxRequestsPerTcpConnection;
    private Nullable`1<bool> _enableContentResponseOnWrite;
    private DbContextOptionsExtensionInfo _info;
    private Func`1<HttpClient> _httpClientFactory;
    public DbContextOptionsExtensionInfo Info { get; }
    [NullableAttribute("2")]
public string AccountEndpoint { get; }
    [NullableAttribute("2")]
public string AccountKey { get; }
    [NullableAttribute("2")]
public TokenCredential TokenCredential { get; }
    [NullableAttribute("2")]
public string ConnectionString { get; }
    public string DatabaseName { get; }
    [NullableAttribute("2")]
public string Region { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<string> PreferredRegions { get; }
    public Nullable`1<bool> LimitToEndpoint { get; }
    public Nullable`1<ConnectionMode> ConnectionMode { get; }
    [NullableAttribute("2")]
public IWebProxy WebProxy { get; }
    public Nullable`1<TimeSpan> RequestTimeout { get; }
    public Nullable`1<TimeSpan> OpenTcpConnectionTimeout { get; }
    public Nullable`1<TimeSpan> IdleTcpConnectionTimeout { get; }
    public Nullable`1<int> GatewayModeMaxConnectionLimit { get; }
    public Nullable`1<int> MaxTcpConnectionsPerEndpoint { get; }
    public Nullable`1<int> MaxRequestsPerTcpConnection { get; }
    public Nullable`1<bool> EnableContentResponseOnWrite { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<ExecutionStrategyDependencies, IExecutionStrategy> ExecutionStrategyFactory { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<HttpClient> HttpClientFactory { get; }
    protected CosmosOptionsExtension(CosmosOptionsExtension copyFrom);
    public virtual DbContextOptionsExtensionInfo get_Info();
    [NullableContextAttribute("2")]
public virtual string get_AccountEndpoint();
    public virtual CosmosOptionsExtension WithAccountEndpoint(string accountEndpoint);
    [NullableContextAttribute("2")]
public virtual string get_AccountKey();
    public virtual CosmosOptionsExtension WithAccountKey(string accountKey);
    [NullableContextAttribute("2")]
public virtual TokenCredential get_TokenCredential();
    public virtual CosmosOptionsExtension WithTokenCredential(TokenCredential tokenCredential);
    [NullableContextAttribute("2")]
public virtual string get_ConnectionString();
    public virtual CosmosOptionsExtension WithConnectionString(string connectionString);
    public virtual string get_DatabaseName();
    public virtual CosmosOptionsExtension WithDatabaseName(string database);
    [NullableContextAttribute("2")]
public virtual string get_Region();
    public virtual CosmosOptionsExtension WithRegion(string region);
    public virtual IReadOnlyList`1<string> get_PreferredRegions();
    public virtual CosmosOptionsExtension WithPreferredRegions(IReadOnlyList`1<string> regions);
    public virtual Nullable`1<bool> get_LimitToEndpoint();
    public virtual CosmosOptionsExtension WithLimitToEndpoint(bool enable);
    public virtual Nullable`1<ConnectionMode> get_ConnectionMode();
    public virtual CosmosOptionsExtension WithConnectionMode(ConnectionMode connectionMode);
    [NullableContextAttribute("2")]
public virtual IWebProxy get_WebProxy();
    public virtual CosmosOptionsExtension WithWebProxy(IWebProxy proxy);
    public virtual Nullable`1<TimeSpan> get_RequestTimeout();
    public virtual CosmosOptionsExtension WithRequestTimeout(Nullable`1<TimeSpan> timeout);
    public virtual Nullable`1<TimeSpan> get_OpenTcpConnectionTimeout();
    public virtual CosmosOptionsExtension WithOpenTcpConnectionTimeout(Nullable`1<TimeSpan> timeout);
    public virtual Nullable`1<TimeSpan> get_IdleTcpConnectionTimeout();
    public virtual CosmosOptionsExtension WithIdleTcpConnectionTimeout(Nullable`1<TimeSpan> timeout);
    public virtual Nullable`1<int> get_GatewayModeMaxConnectionLimit();
    public virtual CosmosOptionsExtension WithGatewayModeMaxConnectionLimit(Nullable`1<int> connectionLimit);
    public virtual Nullable`1<int> get_MaxTcpConnectionsPerEndpoint();
    public virtual CosmosOptionsExtension WithMaxTcpConnectionsPerEndpoint(Nullable`1<int> connectionLimit);
    public virtual Nullable`1<int> get_MaxRequestsPerTcpConnection();
    public virtual CosmosOptionsExtension WithMaxRequestsPerTcpConnection(Nullable`1<int> requestLimit);
    public virtual Nullable`1<bool> get_EnableContentResponseOnWrite();
    public virtual CosmosOptionsExtension ContentResponseOnWriteEnabled(bool enabled);
    public virtual Func`2<ExecutionStrategyDependencies, IExecutionStrategy> get_ExecutionStrategyFactory();
    public virtual CosmosOptionsExtension WithExecutionStrategyFactory(Func`2<ExecutionStrategyDependencies, IExecutionStrategy> executionStrategyFactory);
    public virtual Func`1<HttpClient> get_HttpClientFactory();
    public virtual CosmosOptionsExtension WithHttpClientFactory(Func`1<HttpClient> httpClientFactory);
    protected virtual CosmosOptionsExtension Clone();
    public virtual void ApplyServices(IServiceCollection services);
    public virtual void Validate(IDbContextOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Infrastructure.Internal.CosmosSingletonOptions : object {
    [CompilerGeneratedAttribute]
private string <AccountEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccountKey>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenCredential <TokenCredential>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <PreferredRegions>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <LimitToEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ConnectionMode> <ConnectionMode>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebProxy <WebProxy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <RequestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <OpenTcpConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <IdleTcpConnectionTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <GatewayModeMaxConnectionLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxTcpConnectionsPerEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxRequestsPerTcpConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EnableContentResponseOnWrite>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<HttpClient> <HttpClientFactory>k__BackingField;
    public string AccountEndpoint { get; private set; }
    public string AccountKey { get; private set; }
    public TokenCredential TokenCredential { get; private set; }
    public string ConnectionString { get; private set; }
    public string Region { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<string> PreferredRegions { get; private set; }
    public Nullable`1<bool> LimitToEndpoint { get; private set; }
    public Nullable`1<ConnectionMode> ConnectionMode { get; private set; }
    public IWebProxy WebProxy { get; private set; }
    public Nullable`1<TimeSpan> RequestTimeout { get; private set; }
    public Nullable`1<TimeSpan> OpenTcpConnectionTimeout { get; private set; }
    public Nullable`1<TimeSpan> IdleTcpConnectionTimeout { get; private set; }
    public Nullable`1<int> GatewayModeMaxConnectionLimit { get; private set; }
    public Nullable`1<int> MaxTcpConnectionsPerEndpoint { get; private set; }
    public Nullable`1<int> MaxRequestsPerTcpConnection { get; private set; }
    public Nullable`1<bool> EnableContentResponseOnWrite { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<HttpClient> HttpClientFactory { get; private set; }
    [CompilerGeneratedAttribute]
public virtual string get_AccountEndpoint();
    [CompilerGeneratedAttribute]
private void set_AccountEndpoint(string value);
    [CompilerGeneratedAttribute]
public virtual string get_AccountKey();
    [CompilerGeneratedAttribute]
private void set_AccountKey(string value);
    [CompilerGeneratedAttribute]
public virtual TokenCredential get_TokenCredential();
    [CompilerGeneratedAttribute]
private void set_TokenCredential(TokenCredential value);
    [CompilerGeneratedAttribute]
public virtual string get_ConnectionString();
    [CompilerGeneratedAttribute]
private void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Region();
    [CompilerGeneratedAttribute]
private void set_Region(string value);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<string> get_PreferredRegions();
    [CompilerGeneratedAttribute]
private void set_PreferredRegions(IReadOnlyList`1<string> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_LimitToEndpoint();
    [CompilerGeneratedAttribute]
private void set_LimitToEndpoint(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<ConnectionMode> get_ConnectionMode();
    [CompilerGeneratedAttribute]
private void set_ConnectionMode(Nullable`1<ConnectionMode> value);
    [CompilerGeneratedAttribute]
public virtual IWebProxy get_WebProxy();
    [CompilerGeneratedAttribute]
private void set_WebProxy(IWebProxy value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<TimeSpan> get_RequestTimeout();
    [CompilerGeneratedAttribute]
private void set_RequestTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<TimeSpan> get_OpenTcpConnectionTimeout();
    [CompilerGeneratedAttribute]
private void set_OpenTcpConnectionTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<TimeSpan> get_IdleTcpConnectionTimeout();
    [CompilerGeneratedAttribute]
private void set_IdleTcpConnectionTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_GatewayModeMaxConnectionLimit();
    [CompilerGeneratedAttribute]
private void set_GatewayModeMaxConnectionLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_MaxTcpConnectionsPerEndpoint();
    [CompilerGeneratedAttribute]
private void set_MaxTcpConnectionsPerEndpoint(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_MaxRequestsPerTcpConnection();
    [CompilerGeneratedAttribute]
private void set_MaxRequestsPerTcpConnection(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_EnableContentResponseOnWrite();
    [CompilerGeneratedAttribute]
private void set_EnableContentResponseOnWrite(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public virtual Func`1<HttpClient> get_HttpClientFactory();
    [CompilerGeneratedAttribute]
private void set_HttpClientFactory(Func`1<HttpClient> value);
    [NullableContextAttribute("1")]
public virtual void Initialize(IDbContextOptions options);
    [NullableContextAttribute("1")]
public virtual void Validate(IDbContextOptions options);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Cosmos.Infrastructure.Internal.ICosmosSingletonOptions {
    public string AccountEndpoint { get; }
    public string AccountKey { get; }
    public TokenCredential TokenCredential { get; }
    public string ConnectionString { get; }
    public string Region { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<string> PreferredRegions { get; }
    public Nullable`1<bool> LimitToEndpoint { get; }
    public Nullable`1<ConnectionMode> ConnectionMode { get; }
    public IWebProxy WebProxy { get; }
    public Nullable`1<TimeSpan> RequestTimeout { get; }
    public Nullable`1<TimeSpan> OpenTcpConnectionTimeout { get; }
    public Nullable`1<TimeSpan> IdleTcpConnectionTimeout { get; }
    public Nullable`1<int> GatewayModeMaxConnectionLimit { get; }
    public Nullable`1<int> MaxTcpConnectionsPerEndpoint { get; }
    public Nullable`1<int> MaxRequestsPerTcpConnection { get; }
    public Nullable`1<bool> EnableContentResponseOnWrite { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<HttpClient> HttpClientFactory { get; }
    public abstract virtual string get_AccountEndpoint();
    public abstract virtual string get_AccountKey();
    public abstract virtual TokenCredential get_TokenCredential();
    public abstract virtual string get_ConnectionString();
    public abstract virtual string get_Region();
    public abstract virtual IReadOnlyList`1<string> get_PreferredRegions();
    public abstract virtual Nullable`1<bool> get_LimitToEndpoint();
    public abstract virtual Nullable`1<ConnectionMode> get_ConnectionMode();
    public abstract virtual IWebProxy get_WebProxy();
    public abstract virtual Nullable`1<TimeSpan> get_RequestTimeout();
    public abstract virtual Nullable`1<TimeSpan> get_OpenTcpConnectionTimeout();
    public abstract virtual Nullable`1<TimeSpan> get_IdleTcpConnectionTimeout();
    public abstract virtual Nullable`1<int> get_GatewayModeMaxConnectionLimit();
    public abstract virtual Nullable`1<int> get_MaxTcpConnectionsPerEndpoint();
    public abstract virtual Nullable`1<int> get_MaxRequestsPerTcpConnection();
    public abstract virtual Nullable`1<bool> get_EnableContentResponseOnWrite();
    public abstract virtual Func`1<HttpClient> get_HttpClientFactory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Cosmos.Internal.CosmosResources : object {
    private static ResourceManager _resourceManager;
    private static CosmosResources();
    public static EventDefinition`6<string, string, string, string, string, string> LogExecutedCreateItem(IDiagnosticsLogger logger);
    public static EventDefinition`6<string, string, string, string, string, string> LogExecutedDeleteItem(IDiagnosticsLogger logger);
    public static EventDefinition`6<string, string, string, string, string, string> LogExecutedReadItem(IDiagnosticsLogger logger);
    public static FallbackEventDefinition LogExecutedReadNext(IDiagnosticsLogger logger);
    public static EventDefinition`6<string, string, string, string, string, string> LogExecutedReplaceItem(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogExecutingReadItem(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, string, string, string, string> LogExecutingSqlQuery(IDiagnosticsLogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Cosmos.Internal.CosmosStrings : object {
    private static ResourceManager _resourceManager;
    public static string CanConnectNotSupported { get; }
    public static string ConnectionStringConflictingConfiguration { get; }
    public static string CosmosNotInUse { get; }
    public static string InvalidResourceId { get; }
    public static string MissingOrderingInSelectExpression { get; }
    public static string NoSubqueryPushdown { get; }
    public static string OffsetRequiresLimit { get; }
    public static string OnlyConstantsAndParametersAllowedInContains { get; }
    public static string PartitionKeyMissing { get; }
    public static string ResourceIdMissing { get; }
    public static string ReverseAfterSkipTakeNotSupported { get; }
    public static string TransactionsNotSupported { get; }
    public static string VisitChildrenMustBeOverridden { get; }
    private static CosmosStrings();
    [NullableContextAttribute("2")]
public static string AnalyticalTTLMismatch(object ttl1, object entityType1, object entityType2, object ttl2, object container);
    public static string get_CanConnectNotSupported();
    public static string CannotTranslateNonConstantNewArrayExpression(object newArrayExpression);
    public static string get_ConnectionStringConflictingConfiguration();
    [NullableContextAttribute("2")]
public static string ContainerContainingPropertyConflict(object entityType, object container, object property);
    public static string get_CosmosNotInUse();
    [NullableContextAttribute("2")]
public static string DefaultTTLMismatch(object ttl1, object entityType1, object entityType2, object ttl2, object container);
    [NullableContextAttribute("2")]
public static string DuplicateDiscriminatorValue(object entityType1, object discriminatorValue, object entityType2, object container);
    [NullableContextAttribute("2")]
public static string ETagNonStringStoreType(object property, object entityType, object propertyType);
    [NullableContextAttribute("2")]
public static string IdNonStringStoreType(object idProperty, object entityType, object propertyType);
    [NullableContextAttribute("2")]
public static string InvalidDerivedTypeInEntityProjection(object derivedType, object entityType);
    [NullableContextAttribute("2")]
public static string InvalidFromSqlArguments(object expressionType, object valueType);
    public static string get_InvalidResourceId();
    [NullableContextAttribute("2")]
public static string JsonPropertyCollision(object property1, object property2, object entityType, object storeName);
    public static string get_MissingOrderingInSelectExpression();
    [NullableContextAttribute("2")]
public static string NavigationPropertyIsNotAnEmbeddedEntity(object entityType, object navigationName);
    [NullableContextAttribute("2")]
public static string NoDiscriminatorProperty(object entityType, object container);
    [NullableContextAttribute("2")]
public static string NoDiscriminatorValue(object entityType, object container);
    [NullableContextAttribute("2")]
public static string NoIdKey(object entityType, object idProperty);
    public static string NoIdProperty(object entityType);
    public static string NonEmbeddedIncludeNotSupported(object navigation);
    [NullableContextAttribute("2")]
public static string NonETagConcurrencyToken(object entityType, object property);
    [NullableContextAttribute("2")]
public static string NoPartitionKey(object entityType, object container);
    [NullableContextAttribute("2")]
public static string NoPartitionKeyKey(object entityType, object partitionKey, object idProperty);
    [NullableContextAttribute("2")]
public static string NoReadItemQueryString(object resourceId, object partitionKey);
    public static string get_NoSubqueryPushdown();
    public static string NullTypeMappingInSqlTree(object sqlExpression);
    public static string get_OffsetRequiresLimit();
    [NullableContextAttribute("2")]
public static string OneOfTwoValuesMustBeSet(object param1, object param2);
    public static string get_OnlyConstantsAndParametersAllowedInContains();
    [NullableContextAttribute("2")]
public static string OrphanedNestedDocument(object entityType, object missingEntityType);
    [NullableContextAttribute("2")]
public static string OrphanedNestedDocumentSensitive(object entityType, object missingEntityType, object keyValue);
    [NullableContextAttribute("2")]
public static string OwnedTypeDifferentContainer(object entityType, object owner, object container);
    [NullableContextAttribute("2")]
public static string PartitionKeyMismatch(object partitionKey1, object partitionKey2);
    public static string get_PartitionKeyMissing();
    [NullableContextAttribute("2")]
public static string PartitionKeyMissingProperty(object entityType, object property);
    [NullableContextAttribute("2")]
public static string PartitionKeyNonStringStoreType(object property, object entityType, object propertyType);
    [NullableContextAttribute("2")]
public static string PartitionKeyStoreNameMismatch(object property1, object entityType1, object storeName1, object property2, object entityType2, object storeName2);
    [NullableContextAttribute("2")]
public static string PrimitiveCollectionsNotSupported(object entityType, object property);
    public static string get_ResourceIdMissing();
    public static string get_ReverseAfterSkipTakeNotSupported();
    [NullableContextAttribute("2")]
public static string ThroughputMismatch(object throughput1, object entityType1, object entityType2, object throughput2, object container);
    [NullableContextAttribute("2")]
public static string ThroughputTypeMismatch(object manualEntityType, object autoscaleEntityType, object container);
    public static string get_TransactionsNotSupported();
    [NullableContextAttribute("2")]
public static string UnableToBindMemberToEntityProjection(object memberType, object member, object entityType);
    [NullableContextAttribute("2")]
public static string UnsupportedOperatorForSqlExpression(object nodeType, object expressionType);
    public static string UpdateConflict(object itemId);
    public static string UpdateStoreException(object itemId);
    public static string get_VisitChildrenMustBeOverridden();
    private static string GetString(string name, String[] formatterNames);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.ETagPropertyConvention : object {
    [NullableContextAttribute("1")]
public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Metadata.Conventions.Internal.CosmosConventionSetBuilder : ProviderConventionSetBuilder {
    public CosmosConventionSetBuilder(ProviderConventionSetBuilderDependencies dependencies);
    public virtual ConventionSet CreateConventionSet();
    public static ModelBuilder CreateModelBuilder();
    private static IServiceScope CreateServiceScope();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Cosmos.Metadata.Internal.CosmosAnnotationNames : object {
    public static string Prefix;
    public static string ContainerName;
    public static string PropertyName;
    public static string PartitionKeyName;
    public static string ETagName;
    public static string AnalyticalStoreTimeToLive;
    public static string DefaultTimeToLive;
    public static string Throughput;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Cosmos.Metadata.Internal.CosmosEntityTypeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsDocumentRoot(IReadOnlyEntityType entityType);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Cosmos.Metadata.Internal.CosmosNavigationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsEmbedded(IReadOnlyNavigation navigation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Cosmos.Metadata.Internal.CosmosPropertyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsOrdinalKeyProperty(IReadOnlyProperty property);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosDateTimeMemberTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public CosmosDateTimeMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosEqualsTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public CosmosEqualsTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosMathTranslator : object {
    private static Dictionary`2<MethodInfo, string> SupportedMethodTranslations;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public CosmosMathTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static CosmosMathTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosMemberTranslatorProvider : object {
    private List`1<IMemberTranslator> _plugins;
    private List`1<IMemberTranslator> _translators;
    public CosmosMemberTranslatorProvider(ISqlExpressionFactory sqlExpressionFactory, IEnumerable`1<IMemberTranslatorPlugin> plugins);
    public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
    protected virtual void AddTranslators(IEnumerable`1<IMemberTranslator> translators);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosMethodCallTranslatorProvider : object {
    private List`1<IMethodCallTranslator> _plugins;
    private List`1<IMethodCallTranslator> _translators;
    public CosmosMethodCallTranslatorProvider(ISqlExpressionFactory sqlExpressionFactory, IEnumerable`1<IMethodCallTranslatorPlugin> plugins);
    public virtual SqlExpression Translate(IModel model, SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    protected virtual void AddTranslators(IEnumerable`1<IMethodCallTranslator> translators);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosProjectionBindingExpressionVisitor : ExpressionVisitor {
    private static MethodInfo GetParameterValueMethodInfo;
    private CosmosSqlTranslatingExpressionVisitor _sqlTranslator;
    private IModel _model;
    private SelectExpression _selectExpression;
    private bool _clientEval;
    private Dictionary`2<ProjectionMember, Expression> _projectionMapping;
    private Stack`1<ProjectionMember> _projectionMembers;
    private Dictionary`2<ParameterExpression, CollectionShaperExpression> _collectionShaperMapping;
    private Stack`1<INavigation> _includedNavigations;
    public CosmosProjectionBindingExpressionVisitor(IModel model, CosmosSqlTranslatingExpressionVisitor sqlTranslator);
    private static CosmosProjectionBindingExpressionVisitor();
    public virtual Expression Translate(SelectExpression selectExpression, Expression expression);
    public virtual Expression Visit(Expression expression);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    protected virtual Expression VisitConditional(ConditionalExpression conditionalExpression);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual ElementInit VisitElementInit(ElementInit elementInit);
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment memberAssignment);
    protected virtual Expression VisitMemberInit(MemberInitExpression memberInitExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual Expression VisitNew(NewExpression newExpression);
    protected virtual Expression VisitNewArray(NewArrayExpression newArrayExpression);
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
    private void VerifySelectExpression(ProjectionBindingExpression projectionBindingExpression);
    private static Expression MatchTypes(Expression expression, Type targetType);
    [UsedImplicitlyAttribute]
private static T GetParameterValue(QueryContext queryContext, string parameterName);
    [CompilerGeneratedAttribute]
private Expression <VisitElementInit>b__15_0(Expression e);
    [CompilerGeneratedAttribute]
internal static Expression <VisitMember>g__NullSafeUpdate|16_0(Expression expression, <>c__DisplayClass16_0& );
    [CompilerGeneratedAttribute]
private Expression <VisitNewArray>b__21_0(Expression e);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitor : QueryableMethodTranslatingExpressionVisitor {
    private QueryCompilationContext _queryCompilationContext;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IMemberTranslatorProvider _memberTranslatorProvider;
    private IMethodCallTranslatorProvider _methodCallTranslatorProvider;
    private CosmosSqlTranslatingExpressionVisitor _sqlTranslator;
    private CosmosProjectionBindingExpressionVisitor _projectionBindingExpressionVisitor;
    public CosmosQueryableMethodTranslatingExpressionVisitor(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, QueryCompilationContext queryCompilationContext, ISqlExpressionFactory sqlExpressionFactory, IMemberTranslatorProvider memberTranslatorProvider, IMethodCallTranslatorProvider methodCallTranslatorProvider);
    protected CosmosQueryableMethodTranslatingExpressionVisitor(CosmosQueryableMethodTranslatingExpressionVisitor parentVisitor);
    public virtual Expression Visit(Expression expression);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor();
    public virtual ShapedQueryExpression TranslateSubquery(Expression expression);
    protected virtual ShapedQueryExpression CreateShapedQueryExpression(IEntityType entityType);
    private static ShapedQueryExpression CreateShapedQueryExpression(IEntityType entityType, Expression queryExpression);
    protected virtual ShapedQueryExpression TranslateAll(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateAny(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateAverage(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateCast(ShapedQueryExpression source, Type resultType);
    protected virtual ShapedQueryExpression TranslateConcat(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected virtual ShapedQueryExpression TranslateContains(ShapedQueryExpression source, Expression item);
    protected virtual ShapedQueryExpression TranslateCount(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateDefaultIfEmpty(ShapedQueryExpression source, Expression defaultValue);
    protected virtual ShapedQueryExpression TranslateDistinct(ShapedQueryExpression source);
    protected virtual ShapedQueryExpression TranslateElementAtOrDefault(ShapedQueryExpression source, Expression index, bool returnDefault);
    protected virtual ShapedQueryExpression TranslateExcept(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected virtual ShapedQueryExpression TranslateFirstOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    protected virtual ShapedQueryExpression TranslateGroupBy(ShapedQueryExpression source, LambdaExpression keySelector, LambdaExpression elementSelector, LambdaExpression resultSelector);
    protected virtual ShapedQueryExpression TranslateGroupJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    protected virtual ShapedQueryExpression TranslateIntersect(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected virtual ShapedQueryExpression TranslateJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    protected virtual ShapedQueryExpression TranslateLastOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    protected virtual ShapedQueryExpression TranslateLeftJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    protected virtual ShapedQueryExpression TranslateLongCount(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateMax(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateMin(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateOfType(ShapedQueryExpression source, Type resultType);
    protected virtual ShapedQueryExpression TranslateOrderBy(ShapedQueryExpression source, LambdaExpression keySelector, bool ascending);
    protected virtual ShapedQueryExpression TranslateReverse(ShapedQueryExpression source);
    protected virtual ShapedQueryExpression TranslateSelect(ShapedQueryExpression source, LambdaExpression selector);
    protected virtual ShapedQueryExpression TranslateSelectMany(ShapedQueryExpression source, LambdaExpression collectionSelector, LambdaExpression resultSelector);
    protected virtual ShapedQueryExpression TranslateSelectMany(ShapedQueryExpression source, LambdaExpression selector);
    protected virtual ShapedQueryExpression TranslateSingleOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    protected virtual ShapedQueryExpression TranslateSkip(ShapedQueryExpression source, Expression count);
    protected virtual ShapedQueryExpression TranslateSkipWhile(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateSum(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected virtual ShapedQueryExpression TranslateTake(ShapedQueryExpression source, Expression count);
    protected virtual ShapedQueryExpression TranslateTakeWhile(ShapedQueryExpression source, LambdaExpression predicate);
    protected virtual ShapedQueryExpression TranslateThenBy(ShapedQueryExpression source, LambdaExpression keySelector, bool ascending);
    protected virtual ShapedQueryExpression TranslateUnion(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected virtual ShapedQueryExpression TranslateWhere(ShapedQueryExpression source, LambdaExpression predicate);
    private SqlExpression TranslateExpression(Expression expression);
    private SqlExpression TranslateLambdaExpression(ShapedQueryExpression shapedQueryExpression, LambdaExpression lambdaExpression);
    private static Expression RemapLambdaBody(Expression shaperBody, LambdaExpression lambdaExpression);
    private static ShapedQueryExpression AggregateResultShaper(ShapedQueryExpression source, Expression projection, bool throwOnNullResult, Type resultType);
    [CompilerGeneratedAttribute]
internal static bool <Visit>g__ExtractPartitionKeyFromPredicate|8_0(IEntityType entityType, Expression joinCondition, ICollection`1<IProperty> properties, ICollection`1<string> parameterNames);
    [CompilerGeneratedAttribute]
internal static bool <Visit>g__TryGetPartitionKeyProperty|8_1(IEntityType entityType, IProperty& partitionKeyProperty);
    [CompilerGeneratedAttribute]
private Expression <TranslateWhere>g__TryExtractPartitionKey|49_0(Expression expression, IEntityType entityType, Expression& updatedPredicate, <>c__DisplayClass49_0& );
    [CompilerGeneratedAttribute]
private Expression <TranslateWhere>g__GetPartitionKeyValue|49_1(BinaryExpression binaryExpression, IEntityType entityType, <>c__DisplayClass49_0& );
    [CompilerGeneratedAttribute]
private bool <TranslateWhere>g__IsPartitionKeyPropertyAccess|49_2(Expression expression, IEntityType entityType, <>c__DisplayClass49_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryableMethodTranslatingExpressionVisitorFactory : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IMemberTranslatorProvider _memberTranslatorProvider;
    private IMethodCallTranslatorProvider _methodCallTranslatorProvider;
    [CompilerGeneratedAttribute]
private QueryableMethodTranslatingExpressionVisitorDependencies <Dependencies>k__BackingField;
    protected QueryableMethodTranslatingExpressionVisitorDependencies Dependencies { get; }
    public CosmosQueryableMethodTranslatingExpressionVisitorFactory(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, ISqlExpressionFactory sqlExpressionFactory, IMemberTranslatorProvider memberTranslatorProvider, IMethodCallTranslatorProvider methodCallTranslatorProvider);
    [CompilerGeneratedAttribute]
protected virtual QueryableMethodTranslatingExpressionVisitorDependencies get_Dependencies();
    public virtual QueryableMethodTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryCompilationContext : QueryCompilationContext {
    [CompilerGeneratedAttribute]
private string <PartitionKeyFromExtension>k__BackingField;
    public string PartitionKeyFromExtension { get; internal set; }
    [NullableContextAttribute("1")]
public CosmosQueryCompilationContext(QueryCompilationContextDependencies dependencies, bool async);
    [CompilerGeneratedAttribute]
public virtual string get_PartitionKeyFromExtension();
    [CompilerGeneratedAttribute]
internal virtual void set_PartitionKeyFromExtension(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryCompilationContextFactory : object {
    [CompilerGeneratedAttribute]
private QueryCompilationContextDependencies <Dependencies>k__BackingField;
    protected QueryCompilationContextDependencies Dependencies { get; }
    public CosmosQueryCompilationContextFactory(QueryCompilationContextDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual QueryCompilationContextDependencies get_Dependencies();
    public virtual QueryCompilationContext Create(bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryContext : QueryContext {
    [CompilerGeneratedAttribute]
private ICosmosClientWrapper <CosmosClient>k__BackingField;
    public ICosmosClientWrapper CosmosClient { get; }
    public CosmosQueryContext(QueryContextDependencies dependencies, ICosmosClientWrapper cosmosClient);
    [CompilerGeneratedAttribute]
public virtual ICosmosClientWrapper get_CosmosClient();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryContextFactory : object {
    private ICosmosClientWrapper _cosmosClient;
    [CompilerGeneratedAttribute]
private QueryContextDependencies <Dependencies>k__BackingField;
    protected QueryContextDependencies Dependencies { get; }
    public CosmosQueryContextFactory(QueryContextDependencies dependencies, ICosmosClientWrapper cosmosClient);
    [CompilerGeneratedAttribute]
protected virtual QueryContextDependencies get_Dependencies();
    public virtual QueryContext Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryMetadataExtractingExpressionVisitor : ExpressionVisitor {
    private CosmosQueryCompilationContext _cosmosQueryCompilationContext;
    public CosmosQueryMetadataExtractingExpressionVisitor(CosmosQueryCompilationContext cosmosQueryCompilationContext);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryTranslationPostprocessor : QueryTranslationPostprocessor {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public CosmosQueryTranslationPostprocessor(QueryTranslationPostprocessorDependencies dependencies, ISqlExpressionFactory sqlExpressionFactory, QueryCompilationContext queryCompilationContext);
    public virtual Expression Process(Expression query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryTranslationPostprocessorFactory : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [CompilerGeneratedAttribute]
private QueryTranslationPostprocessorDependencies <Dependencies>k__BackingField;
    protected QueryTranslationPostprocessorDependencies Dependencies { get; }
    public CosmosQueryTranslationPostprocessorFactory(QueryTranslationPostprocessorDependencies dependencies, ISqlExpressionFactory sqlExpressionFactory);
    [CompilerGeneratedAttribute]
protected virtual QueryTranslationPostprocessorDependencies get_Dependencies();
    public virtual QueryTranslationPostprocessor Create(QueryCompilationContext queryCompilationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryTranslationPreprocessor : QueryTranslationPreprocessor {
    private CosmosQueryCompilationContext _queryCompilationContext;
    public CosmosQueryTranslationPreprocessor(QueryTranslationPreprocessorDependencies dependencies, CosmosQueryCompilationContext cosmosQueryCompilationContext);
    public virtual Expression NormalizeQueryableMethod(Expression query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosQueryTranslationPreprocessorFactory : object {
    [CompilerGeneratedAttribute]
private QueryTranslationPreprocessorDependencies <Dependencies>k__BackingField;
    protected QueryTranslationPreprocessorDependencies Dependencies { get; }
    public CosmosQueryTranslationPreprocessorFactory(QueryTranslationPreprocessorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual QueryTranslationPreprocessorDependencies get_Dependencies();
    public virtual QueryTranslationPreprocessor Create(QueryCompilationContext queryCompilationContext);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosRandomTranslator : object {
    private static MethodInfo MethodInfo;
    private ISqlExpressionFactory _sqlExpressionFactory;
    public CosmosRandomTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static CosmosRandomTranslator();
    public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosRegexTranslator : object {
    private static MethodInfo IsMatch;
    private static MethodInfo IsMatchWithRegexOptions;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public CosmosRegexTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static CosmosRegexTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosShapedQueryCompilingExpressionVisitor : ShapedQueryCompilingExpressionVisitor {
    private static bool _useOldBehavior32363;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IQuerySqlGeneratorFactory _querySqlGeneratorFactory;
    private Type _contextType;
    private bool _threadSafetyChecksEnabled;
    private string _partitionKeyFromExtension;
    public CosmosShapedQueryCompilingExpressionVisitor(ShapedQueryCompilingExpressionVisitorDependencies dependencies, CosmosQueryCompilationContext cosmosQueryCompilationContext, ISqlExpressionFactory sqlExpressionFactory, IQuerySqlGeneratorFactory querySqlGeneratorFactory);
    private static CosmosShapedQueryCompilingExpressionVisitor();
    protected virtual Expression VisitShapedQuery(ShapedQueryExpression shapedQueryExpression);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosShapedQueryCompilingExpressionVisitorFactory : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IQuerySqlGeneratorFactory _querySqlGeneratorFactory;
    [CompilerGeneratedAttribute]
private ShapedQueryCompilingExpressionVisitorDependencies <Dependencies>k__BackingField;
    protected ShapedQueryCompilingExpressionVisitorDependencies Dependencies { get; }
    public CosmosShapedQueryCompilingExpressionVisitorFactory(ShapedQueryCompilingExpressionVisitorDependencies dependencies, ISqlExpressionFactory sqlExpressionFactory, IQuerySqlGeneratorFactory querySqlGeneratorFactory);
    [CompilerGeneratedAttribute]
protected virtual ShapedQueryCompilingExpressionVisitorDependencies get_Dependencies();
    public virtual ShapedQueryCompilingExpressionVisitor Create(QueryCompilationContext queryCompilationContext);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosSqlTranslatingExpressionVisitor : ExpressionVisitor {
    private static string RuntimeParameterPrefix;
    private static MethodInfo ParameterValueExtractorMethod;
    private static MethodInfo ParameterListValueExtractorMethod;
    private static MethodInfo ConcatMethodInfo;
    private static MethodInfo StringEqualsWithStringComparison;
    private static MethodInfo StringEqualsWithStringComparisonStatic;
    private static MethodInfo GetTypeMethodInfo;
    private QueryCompilationContext _queryCompilationContext;
    private IModel _model;
    private ISqlExpressionFactory _sqlExpressionFactory;
    private IMemberTranslatorProvider _memberTranslatorProvider;
    private SqlTypeMappingVerifyingExpressionVisitor _sqlVerifyingExpressionVisitor;
    private IMethodCallTranslatorProvider _methodCallTranslatorProvider;
    [CompilerGeneratedAttribute]
private string <TranslationErrorDetails>k__BackingField;
    public string TranslationErrorDetails { get; private set; }
    public CosmosSqlTranslatingExpressionVisitor(QueryCompilationContext queryCompilationContext, ISqlExpressionFactory sqlExpressionFactory, IMemberTranslatorProvider memberTranslatorProvider, IMethodCallTranslatorProvider methodCallTranslatorProvider);
    private static CosmosSqlTranslatingExpressionVisitor();
    [CompilerGeneratedAttribute]
public virtual string get_TranslationErrorDetails();
    [CompilerGeneratedAttribute]
private void set_TranslationErrorDetails(string value);
    protected virtual void AddTranslationErrorDetails(string details);
    public virtual SqlExpression Translate(Expression expression);
    private SqlExpression TranslateInternal(Expression expression);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    protected virtual Expression VisitConditional(ConditionalExpression conditionalExpression);
    protected virtual Expression VisitConstant(ConstantExpression constantExpression);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitInvocation(InvocationExpression invocationExpression);
    protected virtual Expression VisitLambda(Expression`1<T> lambdaExpression);
    protected virtual Expression VisitListInit(ListInitExpression listInitExpression);
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    protected virtual Expression VisitMemberInit(MemberInitExpression memberInitExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual Expression VisitNew(NewExpression newExpression);
    protected virtual Expression VisitNewArray(NewArrayExpression newArrayExpression);
    protected virtual Expression VisitParameter(ParameterExpression parameterExpression);
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression typeBinaryExpression);
    private Expression TryBindMember(Expression source, MemberIdentity member);
    private static Expression TryRemoveImplicitConvert(Expression expression);
    private bool TryRewriteContainsEntity(Expression source, Expression item, Expression& result);
    private bool TryRewriteEntityEquality(ExpressionType nodeType, Expression left, Expression right, bool equalsMethod, Expression& result);
    private Expression CreatePropertyAccessExpression(Expression target, IProperty property);
    private static T ParameterValueExtractor(QueryContext context, string baseParameterName, IProperty property);
    private static List`1<TProperty> ParameterListValueExtractor(QueryContext context, string baseParameterName, IProperty property);
    private static bool IsNullSqlConstantExpression(Expression expression);
    private static bool TryEvaluateToConstant(Expression expression, SqlConstantExpression& sqlConstantExpression);
    private static bool CanEvaluate(Expression expression);
    [DebuggerStepThroughAttribute]
private static bool TranslationFailed(Expression original, Expression translation, SqlExpression& castTranslation);
    [CompilerGeneratedAttribute]
private Expression <VisitBinary>g__ProcessGetType|21_0(EntityReferenceExpression entityReferenceExpression, Type comparisonType, bool match);
    [CompilerGeneratedAttribute]
private bool <VisitBinary>g__IsGetTypeMethodCall|21_1(Expression expression, EntityReferenceExpression& entityReferenceExpression);
    [CompilerGeneratedAttribute]
internal static bool <VisitBinary>g__IsTypeConstant|21_2(Expression expression, Type& type);
    [CompilerGeneratedAttribute]
internal static bool <VisitBinary>g__TryUnwrapConvertToObject|21_3(Expression expression, Expression& operand);
    [CompilerGeneratedAttribute]
private Expression <VisitMethodCall>g__TranslateContains|30_0(Expression untranslatedItem, Expression untranslatedCollection);
    [CompilerGeneratedAttribute]
internal static Expression <VisitMethodCall>g__RemoveObjectConvert|30_1(Expression expression);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosStringMemberTranslator : object {
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public CosmosStringMemberTranslator(ISqlExpressionFactory sqlExpressionFactory);
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosStringMethodTranslator : object {
    private static MethodInfo IndexOfMethodInfo;
    private static MethodInfo IndexOfMethodInfoWithStartingPosition;
    private static MethodInfo ReplaceMethodInfo;
    private static MethodInfo ContainsMethodInfo;
    private static MethodInfo StartsWithMethodInfo;
    private static MethodInfo EndsWithMethodInfo;
    private static MethodInfo ToLowerMethodInfo;
    private static MethodInfo ToUpperMethodInfo;
    private static MethodInfo TrimStartMethodInfoWithoutArgs;
    private static MethodInfo TrimEndMethodInfoWithoutArgs;
    private static MethodInfo TrimMethodInfoWithoutArgs;
    private static MethodInfo TrimStartMethodInfoWithCharArrayArg;
    private static MethodInfo TrimEndMethodInfoWithCharArrayArg;
    private static MethodInfo TrimMethodInfoWithCharArrayArg;
    private static MethodInfo SubstringMethodInfoWithOneArg;
    private static MethodInfo SubstringMethodInfoWithTwoArgs;
    private static MethodInfo FirstOrDefaultMethodInfoWithoutArgs;
    private static MethodInfo LastOrDefaultMethodInfoWithoutArgs;
    private static MethodInfo StringConcatWithTwoArguments;
    private static MethodInfo StringConcatWithThreeArguments;
    private static MethodInfo StringConcatWithFourArguments;
    private static MethodInfo StringComparisonWithComparisonTypeArgumentInstance;
    private static MethodInfo StringComparisonWithComparisonTypeArgumentStatic;
    private ISqlExpressionFactory _sqlExpressionFactory;
    [NullableContextAttribute("1")]
public CosmosStringMethodTranslator(ISqlExpressionFactory sqlExpressionFactory);
    private static CosmosStringMethodTranslator();
    [NullableContextAttribute("1")]
public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
    private SqlExpression TranslateSystemFunction(string function, Type returnType, SqlExpression[] arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.CosmosValueConverterCompensatingExpressionVisitor : ExpressionVisitor {
    private ISqlExpressionFactory _sqlExpressionFactory;
    public CosmosValueConverterCompensatingExpressionVisitor(ISqlExpressionFactory sqlExpressionFactory);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    private Expression VisitShapedQueryExpression(ShapedQueryExpression shapedQueryExpression);
    private Expression VisitSelect(SelectExpression selectExpression);
    private Expression VisitSqlConditional(SqlConditionalExpression sqlConditionalExpression);
    private SqlExpression TryCompensateForBoolWithValueConverter(SqlExpression sqlExpression);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.EntityProjectionExpression : Expression {
    private Dictionary`2<IProperty, IAccessExpression> _propertyExpressionsMap;
    private Dictionary`2<INavigation, IAccessExpression> _navigationExpressionsMap;
    [CompilerGeneratedAttribute]
private Expression <AccessExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public Expression AccessExpression { get; }
    public IEntityType EntityType { get; }
    public string Name { get; }
    public EntityProjectionExpression(IEntityType entityType, Expression accessExpression);
    public sealed virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    [CompilerGeneratedAttribute]
public virtual Expression get_AccessExpression();
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual Expression Update(Expression accessExpression);
    public virtual Expression BindProperty(IProperty property, bool clientEval);
    public virtual Expression BindNavigation(INavigation navigation, bool clientEval);
    public virtual Expression BindMember(string name, Type entityType, bool clientEval, IPropertyBase& propertyBase);
    public virtual Expression BindMember(MemberInfo memberInfo, Type entityType, bool clientEval, IPropertyBase& propertyBase);
    private Expression BindMember(MemberIdentity member, Type entityClrType, bool clientEval, IPropertyBase& propertyBase);
    public virtual EntityProjectionExpression UpdateEntityType(IEntityType derivedType);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(EntityProjectionExpression entityProjectionExpression);
    public virtual int GetHashCode();
}
public static class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ExpressionExtensions : object {
    [NullableContextAttribute("1")]
public static CoreTypeMapping InferTypeMapping(Expression[] expressions);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.FromSqlExpression : RootReferenceExpression {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Arguments>k__BackingField;
    public string Alias { get; }
    public string Sql { get; }
    public Expression Arguments { get; }
    public Type Type { get; }
    public FromSqlExpression(IEntityType entityType, string alias, string sql, Expression arguments);
    public virtual string get_Alias();
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    [CompilerGeneratedAttribute]
public virtual Expression get_Arguments();
    public virtual FromSqlExpression Update(Expression arguments);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual Type get_Type();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(FromSqlExpression fromSqlExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.FromSqlQueryRootExpression : EntityQueryRootExpression {
    [CompilerGeneratedAttribute]
private string <Sql>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Argument>k__BackingField;
    public string Sql { get; }
    public Expression Argument { get; }
    public FromSqlQueryRootExpression(IAsyncQueryProvider queryProvider, IEntityType entityType, string sql, Expression argument);
    public FromSqlQueryRootExpression(IEntityType entityType, string sql, Expression argument);
    [CompilerGeneratedAttribute]
public virtual string get_Sql();
    [CompilerGeneratedAttribute]
public virtual Expression get_Argument();
    public virtual Expression DetachQueryProvider();
    public virtual EntityQueryRootExpression UpdateEntityType(IEntityType entityType);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(FromSqlQueryRootExpression queryRootExpression);
    public virtual int GetHashCode();
}
public interface Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IAccessExpression {
    public string Name { get; }
    public abstract virtual string get_Name();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMemberTranslator {
    public abstract virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMemberTranslatorPlugin {
    public IEnumerable`1<IMemberTranslator> Translators { get; }
    public abstract virtual IEnumerable`1<IMemberTranslator> get_Translators();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMemberTranslatorProvider {
    public abstract virtual SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMethodCallTranslator {
    public abstract virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMethodCallTranslatorPlugin {
    public IEnumerable`1<IMethodCallTranslator> Translators { get; }
    public abstract virtual IEnumerable`1<IMethodCallTranslator> get_Translators();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IMethodCallTranslatorProvider {
    public abstract virtual SqlExpression Translate(IModel model, SqlExpression instance, MethodInfo method, IReadOnlyList`1<SqlExpression> arguments, IDiagnosticsLogger`1<Query> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.InExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlExpression> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlParameterExpression <ValuesParameter>k__BackingField;
    public SqlExpression Item { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<SqlExpression> Values { get; }
    [NullableAttribute("2")]
public SqlParameterExpression ValuesParameter { get; }
    public InExpression(SqlExpression item, IReadOnlyList`1<SqlExpression> values, CoreTypeMapping typeMapping);
    public InExpression(SqlExpression item, SqlParameterExpression valuesParameter, CoreTypeMapping typeMapping);
    private InExpression(SqlExpression item, IReadOnlyList`1<SqlExpression> values, SqlParameterExpression valuesParameter, CoreTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Item();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlExpression> get_Values();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual SqlParameterExpression get_ValuesParameter();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual InExpression ApplyTypeMapping(CoreTypeMapping typeMapping);
    public virtual InExpression Update(SqlExpression item, IReadOnlyList`1<SqlExpression> values);
    public virtual InExpression Update(SqlExpression item, SqlParameterExpression valuesParameter);
    public virtual InExpression Update(SqlExpression item, IReadOnlyList`1<SqlExpression> values, SqlParameterExpression valuesParameter);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(InExpression inExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IQuerySqlGeneratorFactory {
    public abstract virtual QuerySqlGenerator Create();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ISqlExpressionFactory {
    [NullableContextAttribute("2")]
public abstract virtual SqlExpression ApplyTypeMapping(SqlExpression sqlExpression, CoreTypeMapping typeMapping);
    [NullableContextAttribute("2")]
public abstract virtual SqlExpression ApplyDefaultTypeMapping(SqlExpression sqlExpression);
    public abstract virtual SqlBinaryExpression MakeBinary(ExpressionType operatorType, SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Equal(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression NotEqual(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression GreaterThan(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression GreaterThanOrEqual(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression LessThan(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression LessThanOrEqual(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression AndAlso(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression OrElse(SqlExpression left, SqlExpression right);
    public abstract virtual SqlBinaryExpression Add(SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Subtract(SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Multiply(SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Divide(SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Modulo(SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression And(SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression Or(SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public abstract virtual SqlBinaryExpression IsNull(SqlExpression operand);
    public abstract virtual SqlBinaryExpression IsNotNull(SqlExpression operand);
    public abstract virtual SqlUnaryExpression Convert(SqlExpression operand, Type type, CoreTypeMapping typeMapping);
    public abstract virtual SqlUnaryExpression Not(SqlExpression operand);
    public abstract virtual SqlUnaryExpression Negate(SqlExpression operand);
    public abstract virtual SqlFunctionExpression Function(string functionName, IEnumerable`1<SqlExpression> arguments, Type returnType, CoreTypeMapping typeMapping);
    public abstract virtual SqlConditionalExpression Condition(SqlExpression test, SqlExpression ifTrue, SqlExpression ifFalse);
    public abstract virtual InExpression In(SqlExpression item, SqlParameterExpression valuesParameter);
    public abstract virtual InExpression In(SqlExpression item, IReadOnlyList`1<SqlExpression> values);
    [NullableContextAttribute("2")]
public abstract virtual SqlConstantExpression Constant(object value, CoreTypeMapping typeMapping);
    public abstract virtual SelectExpression Select(IEntityType entityType);
    public abstract virtual SelectExpression Select(IEntityType entityType, string sql, Expression argument);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.KeyAccessExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IProperty <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <AccessExpression>k__BackingField;
    public string Name { get; }
    public IProperty Property { get; }
    public Expression AccessExpression { get; }
    public KeyAccessExpression(IProperty property, Expression accessExpression);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual IProperty get_Property();
    [CompilerGeneratedAttribute]
public virtual Expression get_AccessExpression();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual KeyAccessExpression Update(Expression outerExpression);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    private bool Equals(KeyAccessExpression keyAccessExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ObjectAccessExpression : Expression {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigation <Navigation>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <AccessExpression>k__BackingField;
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public string Name { get; }
    public INavigation Navigation { get; }
    public Expression AccessExpression { get; }
    public ObjectAccessExpression(INavigation navigation, Expression accessExpression);
    public virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual INavigation get_Navigation();
    [CompilerGeneratedAttribute]
public virtual Expression get_AccessExpression();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual ObjectAccessExpression Update(Expression outerExpression);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    private bool Equals(ObjectAccessExpression objectAccessExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ObjectArrayProjectionExpression : Expression {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigation <Navigation>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <AccessExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityProjectionExpression <InnerProjection>k__BackingField;
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public string Name { get; }
    public INavigation Navigation { get; }
    public Expression AccessExpression { get; }
    public EntityProjectionExpression InnerProjection { get; }
    public ObjectArrayProjectionExpression(INavigation navigation, Expression accessExpression, EntityProjectionExpression innerProjection);
    public sealed virtual ExpressionType get_NodeType();
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual INavigation get_Navigation();
    [CompilerGeneratedAttribute]
public virtual Expression get_AccessExpression();
    [CompilerGeneratedAttribute]
public virtual EntityProjectionExpression get_InnerProjection();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual ObjectArrayProjectionExpression Update(Expression accessExpression, EntityProjectionExpression innerProjection);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    private bool Equals(ObjectArrayProjectionExpression objectArrayProjectionExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.OrderingExpression : Expression {
    [CompilerGeneratedAttribute]
private SqlExpression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAscending>k__BackingField;
    public SqlExpression Expression { get; }
    public bool IsAscending { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public OrderingExpression(SqlExpression expression, bool ascending);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Expression();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAscending();
    public sealed virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual OrderingExpression Update(SqlExpression expression);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(OrderingExpression orderingExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ProjectionExpression : Expression {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public string Alias { get; }
    public Expression Expression { get; }
    public string Name { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public ProjectionExpression(Expression expression, string alias);
    [CompilerGeneratedAttribute]
public virtual string get_Alias();
    [CompilerGeneratedAttribute]
public virtual Expression get_Expression();
    public virtual string get_Name();
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual ProjectionExpression Update(Expression expression);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(ProjectionExpression projectionExpression);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.QuerySqlGenerator : SqlExpressionVisitor {
    private ITypeMappingSource _typeMappingSource;
    private IndentedStringBuilder _sqlBuilder;
    private IReadOnlyDictionary`2<string, object> _parameterValues;
    private List`1<SqlParameter> _sqlParameters;
    private bool _useValueProjection;
    private ParameterNameGenerator _parameterNameGenerator;
    private IDictionary`2<ExpressionType, string> _operatorMap;
    public QuerySqlGenerator(ITypeMappingSource typeMappingSource);
    public virtual CosmosSqlQuery GetSqlQuery(SelectExpression selectExpression, IReadOnlyDictionary`2<string, object> parameterValues);
    protected virtual Expression VisitEntityProjection(EntityProjectionExpression entityProjectionExpression);
    protected virtual Expression VisitObjectArrayProjection(ObjectArrayProjectionExpression objectArrayProjectionExpression);
    protected virtual Expression VisitKeyAccess(KeyAccessExpression keyAccessExpression);
    protected virtual Expression VisitObjectAccess(ObjectAccessExpression objectAccessExpression);
    protected virtual Expression VisitProjection(ProjectionExpression projectionExpression);
    protected virtual Expression VisitRootReference(RootReferenceExpression rootReferenceExpression);
    protected virtual Expression VisitSelect(SelectExpression selectExpression);
    protected virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression);
    protected virtual Expression VisitOrdering(OrderingExpression orderingExpression);
    protected virtual Expression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression);
    protected virtual Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression);
    private void GenerateList(IReadOnlyList`1<T> items, Action`1<T> generationAction, Action`1<IndentedStringBuilder> joinAction);
    protected virtual Expression VisitSqlConstant(SqlConstantExpression sqlConstantExpression);
    private static string GenerateConstant(object value, CoreTypeMapping typeMapping);
    private static JToken GenerateJToken(object value, CoreTypeMapping typeMapping);
    protected virtual Expression VisitSqlConditional(SqlConditionalExpression sqlConditionalExpression);
    protected virtual Expression VisitSqlParameter(SqlParameterExpression sqlParameterExpression);
    protected sealed virtual Expression VisitIn(InExpression inExpression);
    protected virtual void GenerateIn(InExpression inExpression, bool negated);
    protected virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    [CompilerGeneratedAttribute]
private void <VisitSelect>b__15_2(ProjectionExpression e);
    [CompilerGeneratedAttribute]
private void <VisitSelect>b__15_3(ProjectionExpression e);
    [CompilerGeneratedAttribute]
private void <VisitSelect>b__15_4(OrderingExpression e);
    [CompilerGeneratedAttribute]
private void <GenerateIn>b__27_0(SqlExpression e);
    [CompilerGeneratedAttribute]
private void <VisitSqlFunction>b__28_0(SqlExpression e);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.QuerySqlGeneratorFactory : object {
    private ITypeMappingSource _typeMappingSource;
    [NullableContextAttribute("1")]
public QuerySqlGeneratorFactory(ITypeMappingSource typeMappingSource);
    [NullableContextAttribute("1")]
public virtual QuerySqlGenerator Create();
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.ReadItemExpression : Expression {
    private static string RootAlias;
    [CompilerGeneratedAttribute]
private string <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectionExpression <ProjectionExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<IProperty, string> <PropertyParameters>k__BackingField;
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public string Container { get; }
    public ProjectionExpression ProjectionExpression { get; }
    public IEntityType EntityType { get; }
    public IDictionary`2<IProperty, string> PropertyParameters { get; }
    public ReadItemExpression(IEntityType entityType, IDictionary`2<IProperty, string> propertyParameters);
    public virtual Type get_Type();
    public virtual ExpressionType get_NodeType();
    [CompilerGeneratedAttribute]
public virtual string get_Container();
    [CompilerGeneratedAttribute]
public virtual ProjectionExpression get_ProjectionExpression();
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<IProperty, string> get_PropertyParameters();
}
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.RootReferenceExpression : Expression {
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public IEntityType EntityType { get; }
    public string Alias { get; }
    private string Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IAccessExpression.Name { get; }
    public RootReferenceExpression(IEntityType entityType, string alias);
    public sealed virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual string get_Alias();
    private sealed virtual override string Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.IAccessExpression.get_Name();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    private bool Equals(RootReferenceExpression rootReferenceExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SelectExpression : Expression {
    private static string RootAlias;
    private IDictionary`2<ProjectionMember, Expression> _projectionMapping;
    private List`1<ProjectionExpression> _projection;
    private List`1<OrderingExpression> _orderings;
    private ValueConverter _partitionKeyValueConverter;
    private Expression _partitionKeyValue;
    [CompilerGeneratedAttribute]
private string <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private RootReferenceExpression <FromExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Predicate>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Limit>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDistinct>k__BackingField;
    public string Container { get; }
    public IReadOnlyList`1<ProjectionExpression> Projection { get; }
    public RootReferenceExpression FromExpression { get; }
    public IReadOnlyList`1<OrderingExpression> Orderings { get; }
    public SqlExpression Predicate { get; private set; }
    public SqlExpression Limit { get; private set; }
    public SqlExpression Offset { get; private set; }
    public bool IsDistinct { get; private set; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public SelectExpression(IEntityType entityType);
    public SelectExpression(IEntityType entityType, string sql, Expression argument);
    public SelectExpression(List`1<ProjectionExpression> projections, RootReferenceExpression fromExpression, List`1<OrderingExpression> orderings);
    private SelectExpression(List`1<ProjectionExpression> projections, RootReferenceExpression fromExpression, List`1<OrderingExpression> orderings, string container);
    [CompilerGeneratedAttribute]
public virtual string get_Container();
    public virtual IReadOnlyList`1<ProjectionExpression> get_Projection();
    [CompilerGeneratedAttribute]
public virtual RootReferenceExpression get_FromExpression();
    public virtual IReadOnlyList`1<OrderingExpression> get_Orderings();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Predicate();
    [CompilerGeneratedAttribute]
private void set_Predicate(SqlExpression value);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Limit();
    [CompilerGeneratedAttribute]
private void set_Limit(SqlExpression value);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Offset();
    [CompilerGeneratedAttribute]
private void set_Offset(SqlExpression value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDistinct();
    [CompilerGeneratedAttribute]
private void set_IsDistinct(bool value);
    public virtual Expression GetMappedProjection(ProjectionMember projectionMember);
    public virtual void SetPartitionKey(IProperty partitionKeyProperty, Expression expression);
    public virtual string GetPartitionKey(IReadOnlyDictionary`2<string, object> parameterValues);
    public virtual void ApplyProjection();
    public virtual void ReplaceProjectionMapping(IDictionary`2<ProjectionMember, Expression> projectionMapping);
    public virtual int AddToProjection(SqlExpression sqlExpression);
    public virtual int AddToProjection(EntityProjectionExpression entityProjection);
    public virtual int AddToProjection(ObjectArrayProjectionExpression objectArrayProjection);
    private int AddToProjection(Expression expression, string alias);
    public virtual void ApplyDistinct();
    public virtual void ClearOrdering();
    public virtual void ApplyPredicate(SqlExpression expression);
    public virtual void ApplyLimit(SqlExpression sqlExpression);
    public virtual void ApplyOffset(SqlExpression sqlExpression);
    public virtual void ApplyOrdering(OrderingExpression orderingExpression);
    public virtual void AppendOrdering(OrderingExpression orderingExpression);
    public virtual void ReverseOrderings();
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual SelectExpression Update(List`1<ProjectionExpression> projections, RootReferenceExpression fromExpression, SqlExpression predicate, List`1<OrderingExpression> orderings, SqlExpression limit, SqlExpression offset);
    [CompilerGeneratedAttribute]
internal static string <GetPartitionKey>g__GetString|38_0(ValueConverter converter, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlBinaryExpression : SqlExpression {
    private static ISet`1<ExpressionType> AllowedOperators;
    [CompilerGeneratedAttribute]
private ExpressionType <OperatorType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Right>k__BackingField;
    public ExpressionType OperatorType { get; }
    public SqlExpression Left { get; }
    public SqlExpression Right { get; }
    public SqlBinaryExpression(ExpressionType operatorType, SqlExpression left, SqlExpression right, Type type, CoreTypeMapping typeMapping);
    private static SqlBinaryExpression();
    private static ExpressionType VerifyOperator(ExpressionType operatorType);
    [CompilerGeneratedAttribute]
public virtual ExpressionType get_OperatorType();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Left();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Right();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual SqlBinaryExpression Update(SqlExpression left, SqlExpression right);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlBinaryExpression sqlBinaryExpression);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
internal static bool <Print>g__RequiresBrackets|14_0(SqlExpression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConditionalExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private SqlExpression <Test>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <IfTrue>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <IfFalse>k__BackingField;
    public SqlExpression Test { get; }
    public SqlExpression IfTrue { get; }
    public SqlExpression IfFalse { get; }
    public SqlConditionalExpression(SqlExpression test, SqlExpression ifTrue, SqlExpression ifFalse);
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Test();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_IfTrue();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_IfFalse();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual SqlConditionalExpression Update(SqlExpression test, SqlExpression ifTrue, SqlExpression ifFalse);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlConditionalExpression sqlConditionalExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlConstantExpression : SqlExpression {
    private ConstantExpression _constantExpression;
    [NullableAttribute("2")]
public object Value { get; }
    public SqlConstantExpression(ConstantExpression constantExpression, CoreTypeMapping typeMapping);
    [NullableContextAttribute("2")]
public virtual object get_Value();
    public virtual SqlExpression ApplyTypeMapping(CoreTypeMapping typeMapping);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    private void Print(object value, ExpressionPrinter expressionPrinter);
    private JToken GenerateJToken(object value, CoreTypeMapping typeMapping);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlConstantExpression sqlConstantExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpression : Expression {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private CoreTypeMapping <TypeMapping>k__BackingField;
    public Type Type { get; }
    [NullableAttribute("2")]
public CoreTypeMapping TypeMapping { get; }
    public ExpressionType NodeType { get; }
    protected SqlExpression(Type type, CoreTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual CoreTypeMapping get_TypeMapping();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public sealed virtual ExpressionType get_NodeType();
    protected abstract virtual void Print(ExpressionPrinter expressionPrinter);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlExpression sqlExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionFactory : object {
    private ITypeMappingSource _typeMappingSource;
    private IModel _model;
    private CoreTypeMapping _boolTypeMapping;
    public SqlExpressionFactory(ITypeMappingSource typeMappingSource, IModel model);
    [NullableContextAttribute("2")]
public virtual SqlExpression ApplyDefaultTypeMapping(SqlExpression sqlExpression);
    [NullableContextAttribute("2")]
public virtual SqlExpression ApplyTypeMapping(SqlExpression sqlExpression, CoreTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnSqlConditional(SqlConditionalExpression sqlConditionalExpression, CoreTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnSqlUnary(SqlUnaryExpression sqlUnaryExpression, CoreTypeMapping typeMapping);
    private SqlExpression ApplyTypeMappingOnSqlBinary(SqlBinaryExpression sqlBinaryExpression, CoreTypeMapping typeMapping);
    private InExpression ApplyTypeMappingOnIn(InExpression inExpression);
    public virtual SqlBinaryExpression MakeBinary(ExpressionType operatorType, SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public virtual SqlBinaryExpression Equal(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression NotEqual(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression GreaterThan(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression GreaterThanOrEqual(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression LessThan(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression LessThanOrEqual(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression AndAlso(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression OrElse(SqlExpression left, SqlExpression right);
    public virtual SqlBinaryExpression Add(SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public virtual SqlBinaryExpression Subtract(SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public virtual SqlBinaryExpression Multiply(SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public virtual SqlBinaryExpression Divide(SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public virtual SqlBinaryExpression Modulo(SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public virtual SqlBinaryExpression And(SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    public virtual SqlBinaryExpression Or(SqlExpression left, SqlExpression right, CoreTypeMapping typeMapping);
    private SqlUnaryExpression MakeUnary(ExpressionType operatorType, SqlExpression operand, Type type, CoreTypeMapping typeMapping);
    public virtual SqlBinaryExpression IsNull(SqlExpression operand);
    public virtual SqlBinaryExpression IsNotNull(SqlExpression operand);
    public virtual SqlUnaryExpression Convert(SqlExpression operand, Type type, CoreTypeMapping typeMapping);
    public virtual SqlUnaryExpression Not(SqlExpression operand);
    public virtual SqlUnaryExpression Negate(SqlExpression operand);
    public virtual SqlFunctionExpression Function(string functionName, IEnumerable`1<SqlExpression> arguments, Type returnType, CoreTypeMapping typeMapping);
    public virtual SqlConditionalExpression Condition(SqlExpression test, SqlExpression ifTrue, SqlExpression ifFalse);
    public virtual InExpression In(SqlExpression item, IReadOnlyList`1<SqlExpression> values);
    public virtual InExpression In(SqlExpression item, SqlParameterExpression valuesParameter);
    [NullableContextAttribute("2")]
public virtual SqlConstantExpression Constant(object value, CoreTypeMapping typeMapping);
    public virtual SelectExpression Select(IEntityType entityType);
    public virtual SelectExpression Select(IEntityType entityType, string sql, Expression argument);
    private void AddDiscriminator(SelectExpression selectExpression, IEntityType entityType);
    [CompilerGeneratedAttribute]
private SqlConstantExpression <AddDiscriminator>b__39_0(IEntityType et);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlExpressionVisitor : ExpressionVisitor {
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected abstract virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression);
    protected abstract virtual Expression VisitOrdering(OrderingExpression orderingExpression);
    protected abstract virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression);
    protected abstract virtual Expression VisitIn(InExpression inExpression);
    protected abstract virtual Expression VisitSqlParameter(SqlParameterExpression sqlParameterExpression);
    protected abstract virtual Expression VisitSqlConditional(SqlConditionalExpression sqlConditionalExpression);
    protected abstract virtual Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression);
    protected abstract virtual Expression VisitSqlConstant(SqlConstantExpression sqlConstantExpression);
    protected abstract virtual Expression VisitSqlBinary(SqlBinaryExpression sqlBinaryExpression);
    protected abstract virtual Expression VisitKeyAccess(KeyAccessExpression keyAccessExpression);
    protected abstract virtual Expression VisitObjectAccess(ObjectAccessExpression objectAccessExpression);
    protected abstract virtual Expression VisitRootReference(RootReferenceExpression rootReferenceExpression);
    protected abstract virtual Expression VisitEntityProjection(EntityProjectionExpression entityProjectionExpression);
    protected abstract virtual Expression VisitObjectArrayProjection(ObjectArrayProjectionExpression objectArrayProjectionExpression);
    protected abstract virtual Expression VisitProjection(ProjectionExpression projectionExpression);
    protected abstract virtual Expression VisitSelect(SelectExpression selectExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlFunctionExpression : SqlExpression {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlExpression> <Arguments>k__BackingField;
    public string Name { get; }
    public IReadOnlyList`1<SqlExpression> Arguments { get; }
    public SqlFunctionExpression(string name, IEnumerable`1<SqlExpression> arguments, Type type, CoreTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlExpression> get_Arguments();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual SqlFunctionExpression ApplyTypeMapping(CoreTypeMapping typeMapping);
    public virtual SqlFunctionExpression Update(IReadOnlyList`1<SqlExpression> arguments);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlFunctionExpression sqlFunctionExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlParameterExpression : SqlExpression {
    private ParameterExpression _parameterExpression;
    private string _name;
    public string Name { get; }
    public SqlParameterExpression(ParameterExpression parameterExpression, CoreTypeMapping typeMapping);
    public string get_Name();
    public SqlExpression ApplyTypeMapping(CoreTypeMapping typeMapping);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlParameterExpression sqlParameterExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Query.Internal.SqlUnaryExpression : SqlExpression {
    private static ISet`1<ExpressionType> AllowedOperators;
    [CompilerGeneratedAttribute]
private ExpressionType <OperatorType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlExpression <Operand>k__BackingField;
    public ExpressionType OperatorType { get; }
    public SqlExpression Operand { get; }
    public SqlUnaryExpression(ExpressionType operatorType, SqlExpression operand, Type type, CoreTypeMapping typeMapping);
    private static SqlUnaryExpression();
    private static ExpressionType VerifyOperator(ExpressionType operatorType);
    [CompilerGeneratedAttribute]
public virtual ExpressionType get_OperatorType();
    [CompilerGeneratedAttribute]
public virtual SqlExpression get_Operand();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual SqlUnaryExpression Update(SqlExpression operand);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(SqlUnaryExpression sqlUnaryExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ByteArrayConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ContainerProperties : ValueType {
    [NullableAttribute("1")]
public string Id;
    [NullableAttribute("1")]
public string PartitionKey;
    public Nullable`1<int> AnalyticalStoreTimeToLiveInSeconds;
    public Nullable`1<int> DefaultTimeToLive;
    [NullableAttribute("2")]
public ThroughputProperties Throughput;
    [NullableContextAttribute("1")]
public ContainerProperties(string containerId, string partitionKey, Nullable`1<int> analyticalTtl, Nullable`1<int> defaultTtl, ThroughputProperties throughput);
    [NullableContextAttribute("1")]
public void Deconstruct(String& containerId, String& partitionKey, Nullable`1& analyticalTtl, Nullable`1& defaultTtl, ThroughputProperties& throughput);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ContainerProperties left, ContainerProperties right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ContainerProperties left, ContainerProperties right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ContainerProperties other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper : object {
    public static JsonSerializer Serializer;
    public static string DefaultPartitionKey;
    private ISingletonCosmosClientWrapper _singletonWrapper;
    private string _databaseId;
    private IExecutionStrategy _executionStrategy;
    private IDiagnosticsLogger`1<Command> _commandLogger;
    private Nullable`1<bool> _enableContentResponseOnWrite;
    private CosmosClient Client { get; }
    private static CosmosClientWrapper();
    public CosmosClientWrapper(ISingletonCosmosClientWrapper singletonWrapper, IDbContextOptions dbContextOptions, IExecutionStrategy executionStrategy, IDiagnosticsLogger`1<Command> commandLogger);
    private CosmosClient get_Client();
    [NullableContextAttribute("2")]
public virtual bool CreateDatabaseIfNotExists(ThroughputProperties throughput);
    private static bool CreateDatabaseIfNotExistsOnce(DbContext context, ValueTuple`2<ThroughputProperties, CosmosClientWrapper> parameters);
    public virtual Task`1<bool> CreateDatabaseIfNotExistsAsync(ThroughputProperties throughput, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper/<CreateDatabaseIfNotExistsOnceAsync>d__14")]
private static Task`1<bool> CreateDatabaseIfNotExistsOnceAsync(DbContext _, ValueTuple`2<ThroughputProperties, CosmosClientWrapper> parameters, CancellationToken cancellationToken);
    public virtual bool DeleteDatabase();
    private static bool DeleteDatabaseOnce(DbContext context, CosmosClientWrapper wrapper);
    public virtual Task`1<bool> DeleteDatabaseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper/<DeleteDatabaseOnceAsync>d__18")]
private static Task`1<bool> DeleteDatabaseOnceAsync(DbContext _, CosmosClientWrapper wrapper, CancellationToken cancellationToken);
    public virtual bool CreateContainerIfNotExists(ContainerProperties properties);
    private static bool CreateContainerIfNotExistsOnce(DbContext context, ValueTuple`2<ContainerProperties, CosmosClientWrapper> parametersTuple);
    public virtual Task`1<bool> CreateContainerIfNotExistsAsync(ContainerProperties properties, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper/<CreateContainerIfNotExistsOnceAsync>d__22")]
private static Task`1<bool> CreateContainerIfNotExistsOnceAsync(DbContext _, ValueTuple`2<ContainerProperties, CosmosClientWrapper> parametersTuple, CancellationToken cancellationToken);
    public virtual bool CreateItem(string containerId, JToken document, IUpdateEntry entry);
    private static bool CreateItemOnce(DbContext context, ValueTuple`4<string, JToken, IUpdateEntry, CosmosClientWrapper> parameters);
    public virtual Task`1<bool> CreateItemAsync(string containerId, JToken document, IUpdateEntry updateEntry, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper/<CreateItemOnceAsync>d__26")]
private static Task`1<bool> CreateItemOnceAsync(DbContext _, ValueTuple`4<string, JToken, IUpdateEntry, CosmosClientWrapper> parameters, CancellationToken cancellationToken);
    public virtual bool ReplaceItem(string collectionId, string documentId, JObject document, IUpdateEntry entry);
    private static bool ReplaceItemOnce(DbContext context, ValueTuple`5<string, string, JObject, IUpdateEntry, CosmosClientWrapper> parameters);
    public virtual Task`1<bool> ReplaceItemAsync(string collectionId, string documentId, JObject document, IUpdateEntry updateEntry, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper/<ReplaceItemOnceAsync>d__30")]
private static Task`1<bool> ReplaceItemOnceAsync(DbContext _, ValueTuple`5<string, string, JObject, IUpdateEntry, CosmosClientWrapper> parameters, CancellationToken cancellationToken);
    public virtual bool DeleteItem(string containerId, string documentId, IUpdateEntry entry);
    private static bool DeleteItemOnce(DbContext context, ValueTuple`4<string, string, IUpdateEntry, CosmosClientWrapper> parameters);
    public virtual Task`1<bool> DeleteItemAsync(string containerId, string documentId, IUpdateEntry entry, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper/<DeleteItemOnceAsync>d__34")]
private static Task`1<bool> DeleteItemOnceAsync(DbContext _, ValueTuple`4<string, string, IUpdateEntry, CosmosClientWrapper> parameters, CancellationToken cancellationToken);
    private static ItemRequestOptions CreateItemRequestOptions(IUpdateEntry entry, Nullable`1<bool> enableContentResponseOnWrite);
    private static string CreatePartitionKey(IUpdateEntry entry);
    private static void ProcessResponse(ResponseMessage response, IUpdateEntry entry);
    public virtual IEnumerable`1<JObject> ExecuteSqlQuery(string containerId, string partitionKey, CosmosSqlQuery query);
    public virtual IAsyncEnumerable`1<JObject> ExecuteSqlQueryAsync(string containerId, string partitionKey, CosmosSqlQuery query);
    public virtual JObject ExecuteReadItem(string containerId, string partitionKey, string resourceId);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosClientWrapper/<ExecuteReadItemAsync>d__41")]
public virtual Task`1<JObject> ExecuteReadItemAsync(string containerId, string partitionKey, string resourceId, CancellationToken cancellationToken);
    private static ResponseMessage CreateSingleItemQuery(DbContext context, ValueTuple`4<string, string, string, CosmosClientWrapper> parameters);
    private static Task`1<ResponseMessage> CreateSingleItemQueryAsync(DbContext _, ValueTuple`4<string, string, string, CosmosClientWrapper> parameters, CancellationToken cancellationToken);
    private static JObject JObjectFromReadItemResponseMessage(ResponseMessage responseMessage);
    public virtual FeedIterator CreateQuery(string containerId, string partitionKey, CosmosSqlQuery query);
    private static JsonTextReader CreateJsonReader(TextReader reader);
    private static bool TryReadJObject(JsonTextReader jsonReader, JObject& jObject);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosDatabaseCreator : object {
    private ICosmosClientWrapper _cosmosClient;
    private IDesignTimeModel _designTimeModel;
    private IUpdateAdapterFactory _updateAdapterFactory;
    private IDatabase _database;
    public CosmosDatabaseCreator(ICosmosClientWrapper cosmosClient, IDesignTimeModel designTimeModel, IUpdateAdapterFactory updateAdapterFactory, IDatabase database);
    public virtual bool EnsureCreated();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosDatabaseCreator/<EnsureCreatedAsync>d__6")]
public virtual Task`1<bool> EnsureCreatedAsync(CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosDatabaseCreator/<GetContainersToCreate>d__7")]
private static IEnumerable`1<ContainerProperties> GetContainersToCreate(IModel model);
    public virtual void Seed();
    public virtual Task SeedAsync(CancellationToken cancellationToken);
    private IUpdateAdapter AddSeedData();
    public virtual bool EnsureDeleted();
    public virtual Task`1<bool> EnsureDeletedAsync(CancellationToken cancellationToken);
    public virtual bool CanConnect();
    public virtual Task`1<bool> CanConnectAsync(CancellationToken cancellationToken);
    private static string GetPartitionKeyStoreName(IEntityType entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosDatabaseWrapper : Database {
    private Dictionary`2<IEntityType, DocumentSource> _documentCollections;
    private ICosmosClientWrapper _cosmosClient;
    private bool _sensitiveLoggingEnabled;
    public CosmosDatabaseWrapper(DatabaseDependencies dependencies, ICosmosClientWrapper cosmosClient, ILoggingOptions loggingOptions);
    public virtual int SaveChanges(IList`1<IUpdateEntry> entries);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosDatabaseWrapper/<SaveChangesAsync>d__5")]
public virtual Task`1<int> SaveChangesAsync(IList`1<IUpdateEntry> entries, CancellationToken cancellationToken);
    private bool Save(IUpdateEntry entry);
    private Task`1<bool> SaveAsync(IUpdateEntry entry, CancellationToken cancellationToken);
    public virtual DocumentSource GetDocumentSource(IEntityType entityType);
    private IUpdateEntry GetRootDocument(InternalEntityEntry entry);
    private Exception WrapUpdateException(Exception exception, IReadOnlyList`1<IUpdateEntry> entries);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosExecutionStrategy : ExecutionStrategy {
    public CosmosExecutionStrategy(DbContext context);
    public CosmosExecutionStrategy(ExecutionStrategyDependencies dependencies);
    public CosmosExecutionStrategy(DbContext context, int maxRetryCount);
    public CosmosExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount);
    public CosmosExecutionStrategy(DbContext context, int maxRetryCount, TimeSpan maxRetryDelay);
    public CosmosExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount, TimeSpan maxRetryDelay);
    protected virtual bool ShouldRetryOn(Exception exception);
    protected virtual Nullable`1<TimeSpan> GetNextDelay(Exception lastException);
    private static Nullable`1<TimeSpan> GetDelayFromException(Exception exception);
    [CompilerGeneratedAttribute]
internal static bool <ShouldRetryOn>g__IsTransient|6_0(HttpStatusCode statusCode);
    [CompilerGeneratedAttribute]
internal static bool <GetDelayFromException>g__TryParseMsRetryAfter|8_0(string delayString, TimeSpan& delay);
    [CompilerGeneratedAttribute]
internal static bool <GetDelayFromException>g__TryParseRetryAfter|8_1(string delayString, TimeSpan& delay);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosExecutionStrategyFactory : object {
    private Func`2<ExecutionStrategyDependencies, IExecutionStrategy> _createExecutionStrategy;
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    protected ExecutionStrategyDependencies Dependencies { get; }
    public CosmosExecutionStrategyFactory(ExecutionStrategyDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ExecutionStrategyDependencies get_Dependencies();
    protected virtual IExecutionStrategy CreateDefaultStrategy(ExecutionStrategyDependencies dependencies);
    public virtual IExecutionStrategy Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosSqlQuery : object {
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<SqlParameter> <Parameters>k__BackingField;
    public string Query { get; }
    public IReadOnlyList`1<SqlParameter> Parameters { get; }
    public CosmosSqlQuery(string query, IReadOnlyList`1<SqlParameter> parameters);
    [CompilerGeneratedAttribute]
public virtual string get_Query();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<SqlParameter> get_Parameters();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosTransactionManager : object {
    public Transaction CurrentAmbientTransaction { get; }
    public IDbContextTransaction CurrentTransaction { get; }
    public Transaction EnlistedTransaction { get; }
    [NullableContextAttribute("1")]
public virtual IDbContextTransaction BeginTransaction();
    [NullableContextAttribute("1")]
public virtual Task`1<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public virtual void CommitTransaction();
    [NullableContextAttribute("1")]
public virtual Task CommitTransactionAsync(CancellationToken cancellationToken);
    public virtual void RollbackTransaction();
    [NullableContextAttribute("1")]
public virtual Task RollbackTransactionAsync(CancellationToken cancellationToken);
    public virtual Transaction get_CurrentAmbientTransaction();
    public virtual IDbContextTransaction get_CurrentTransaction();
    public virtual Transaction get_EnlistedTransaction();
    public virtual void EnlistTransaction(Transaction transaction);
    public virtual void ResetState();
    [NullableContextAttribute("1")]
public virtual Task ResetStateAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosTypeMapping : CoreTypeMapping {
    [CompilerGeneratedAttribute]
private static CosmosTypeMapping <Default>k__BackingField;
    public static CosmosTypeMapping Default { get; }
    [NullableContextAttribute("2")]
public CosmosTypeMapping(Type clrType, ValueComparer comparer, ValueComparer keyComparer, JsonValueReaderWriter jsonValueReaderWriter);
    protected CosmosTypeMapping(CoreTypeMappingParameters parameters);
    private static CosmosTypeMapping();
    [CompilerGeneratedAttribute]
public static CosmosTypeMapping get_Default();
    [NullableContextAttribute("2")]
public virtual CoreTypeMapping WithComposedConverter(ValueConverter converter, ValueComparer comparer, ValueComparer keyComparer, CoreTypeMapping elementMapping, JsonValueReaderWriter jsonValueReaderWriter);
    protected virtual CoreTypeMapping Clone(CoreTypeMappingParameters parameters);
}
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.CosmosTypeMappingSource : TypeMappingSource {
    private Dictionary`2<Type, CosmosTypeMapping> _clrTypeMappings;
    [NullableContextAttribute("1")]
public CosmosTypeMappingSource(TypeMappingSourceDependencies dependencies);
    [NullableContextAttribute("2")]
protected virtual CoreTypeMapping FindMapping(TypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    private CoreTypeMapping FindPrimitiveMapping(TypeMappingInfo& mappingInfo);
    private CoreTypeMapping FindCollectionMapping(TypeMappingInfo& mappingInfo);
    private static ValueComparer CreateArrayComparer(CoreTypeMapping elementMapping, Type elementType);
    private static ValueComparer CreateListComparer(CoreTypeMapping elementMapping, Type elementType, Type listType, bool readOnly);
    private static ValueComparer CreateStringDictionaryComparer(CoreTypeMapping elementMapping, Type elementType, Type dictType, bool readOnly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.HttpException : Exception {
    [CompilerGeneratedAttribute]
private HttpResponseMessage <Response>k__BackingField;
    public HttpResponseMessage Response { get; }
    public HttpException(HttpResponseMessage response);
    [CompilerGeneratedAttribute]
public virtual HttpResponseMessage get_Response();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ICosmosClientWrapper {
    [NullableContextAttribute("2")]
public abstract virtual bool CreateDatabaseIfNotExists(ThroughputProperties throughput);
    public abstract virtual Task`1<bool> CreateDatabaseIfNotExistsAsync(ThroughputProperties throughput, CancellationToken cancellationToken);
    public abstract virtual bool CreateContainerIfNotExists(ContainerProperties properties);
    public abstract virtual Task`1<bool> CreateContainerIfNotExistsAsync(ContainerProperties properties, CancellationToken cancellationToken);
    public abstract virtual bool DeleteDatabase();
    public abstract virtual Task`1<bool> DeleteDatabaseAsync(CancellationToken cancellationToken);
    public abstract virtual bool CreateItem(string containerId, JToken document, IUpdateEntry entry);
    public abstract virtual bool ReplaceItem(string collectionId, string documentId, JObject document, IUpdateEntry entry);
    public abstract virtual bool DeleteItem(string containerId, string documentId, IUpdateEntry entry);
    public abstract virtual Task`1<bool> CreateItemAsync(string containerId, JToken document, IUpdateEntry updateEntry, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> ReplaceItemAsync(string collectionId, string documentId, JObject document, IUpdateEntry updateEntry, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> DeleteItemAsync(string containerId, string documentId, IUpdateEntry entry, CancellationToken cancellationToken);
    public abstract virtual FeedIterator CreateQuery(string containerId, string partitionKey, CosmosSqlQuery query);
    public abstract virtual JObject ExecuteReadItem(string containerId, string partitionKey, string resourceId);
    public abstract virtual Task`1<JObject> ExecuteReadItemAsync(string containerId, string partitionKey, string resourceId, CancellationToken cancellationToken);
    public abstract virtual IEnumerable`1<JObject> ExecuteSqlQuery(string containerId, string partitionKey, CosmosSqlQuery query);
    public abstract virtual IAsyncEnumerable`1<JObject> ExecuteSqlQueryAsync(string containerId, string partitionKey, CosmosSqlQuery query);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.ISingletonCosmosClientWrapper {
    public CosmosClient Client { get; }
    public abstract virtual CosmosClient get_Client();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.JsonCosmosSerializer : CosmosSerializer {
    private static Encoding DefaultEncoding;
    private static JsonCosmosSerializer();
    public virtual T FromStream(Stream stream);
    public virtual Stream ToStream(T input);
    private static JsonSerializer GetSerializer();
}
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.SingletonCosmosClientWrapper : object {
    private static string UserAgent;
    private CosmosClientOptions _options;
    private string _endpoint;
    private string _key;
    private string _connectionString;
    private TokenCredential _tokenCredential;
    private CosmosClient _client;
    [NullableAttribute("1")]
public CosmosClient Client { get; }
    [NullableContextAttribute("1")]
public SingletonCosmosClientWrapper(ICosmosSingletonOptions options);
    private static SingletonCosmosClientWrapper();
    [NullableContextAttribute("1")]
public virtual CosmosClient get_Client();
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal.SqlParameter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public object Value { get; }
    public SqlParameter(string name, object value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual object get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.Update.Internal.DocumentSource : object {
    private string _containerId;
    private CosmosDatabaseWrapper _database;
    private IEntityType _entityType;
    private IProperty _idProperty;
    private IProperty _jObjectProperty;
    public DocumentSource(IEntityType entityType, CosmosDatabaseWrapper database);
    public virtual string GetContainerId();
    public virtual string GetId(IUpdateEntry entry);
    public virtual JObject CreateDocument(IUpdateEntry entry);
    public virtual JObject CreateDocument(IUpdateEntry entry, Nullable`1<int> ordinal);
    public virtual JObject UpdateDocument(JObject document, IUpdateEntry entry);
    public virtual JObject UpdateDocument(JObject document, IUpdateEntry entry, Nullable`1<int> ordinal);
    private static void SetTemporaryOrdinals(IUpdateEntry entry, IForeignKey fk, object embeddedValue);
    private static IProperty FindOrdinalKeyProperty(IEntityType entityType);
    public virtual JObject GetCurrentDocument(IUpdateEntry entry);
    private static JToken ConvertPropertyValue(IProperty property, IUpdateEntry entry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Cosmos.ValueGeneration.Internal.CosmosValueGeneratorSelector : ValueGeneratorSelector {
    public CosmosValueGeneratorSelector(ValueGeneratorSelectorDependencies dependencies);
    protected virtual ValueGenerator FindForType(IProperty property, ITypeBase typeBase, Type clrType);
}
public class Microsoft.EntityFrameworkCore.Cosmos.ValueGeneration.Internal.IdValueGenerator : ValueGenerator {
    public bool GeneratesTemporaryValues { get; }
    public bool GeneratesStableValues { get; }
    public virtual bool get_GeneratesTemporaryValues();
    public virtual bool get_GeneratesStableValues();
    [NullableContextAttribute("1")]
protected virtual object NextValue(EntityEntry entry);
    private static void AppendString(StringBuilder builder, object propertyValue);
    private static StringBuilder AppendEscape(StringBuilder builder, string stringValue);
}
public class Microsoft.EntityFrameworkCore.Cosmos.ValueGeneration.Internal.IdValueGeneratorFactory : ValueGeneratorFactory {
    [NullableContextAttribute("1")]
public virtual ValueGenerator Create(IProperty property, ITypeBase entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.CosmosDatabaseFacadeExtensions : object {
    [ExtensionAttribute]
public static CosmosClient GetCosmosClient(DatabaseFacade databaseFacade);
    private static TService GetService(IInfrastructure`1<IServiceProvider> databaseFacade);
    [ExtensionAttribute]
public static string GetCosmosDatabaseId(DatabaseFacade databaseFacade);
    [ExtensionAttribute]
public static bool IsCosmos(DatabaseFacade database);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.CosmosDbContextOptionsExtensions : object {
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseCosmos(DbContextOptionsBuilder`1<TContext> optionsBuilder, string accountEndpoint, string accountKey, string databaseName, Action`1<CosmosDbContextOptionsBuilder> cosmosOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseCosmos(DbContextOptionsBuilder optionsBuilder, string accountEndpoint, string accountKey, string databaseName, Action`1<CosmosDbContextOptionsBuilder> cosmosOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseCosmos(DbContextOptionsBuilder`1<TContext> optionsBuilder, string accountEndpoint, TokenCredential tokenCredential, string databaseName, Action`1<CosmosDbContextOptionsBuilder> cosmosOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseCosmos(DbContextOptionsBuilder optionsBuilder, string accountEndpoint, TokenCredential tokenCredential, string databaseName, Action`1<CosmosDbContextOptionsBuilder> cosmosOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> UseCosmos(DbContextOptionsBuilder`1<TContext> optionsBuilder, string connectionString, string databaseName, Action`1<CosmosDbContextOptionsBuilder> cosmosOptionsAction);
    [ExtensionAttribute]
public static DbContextOptionsBuilder UseCosmos(DbContextOptionsBuilder optionsBuilder, string connectionString, string databaseName, Action`1<CosmosDbContextOptionsBuilder> cosmosOptionsAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.CosmosEntityTypeBuilderExtensions : object {
    [ExtensionAttribute]
public static EntityTypeBuilder ToContainer(EntityTypeBuilder entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> ToContainer(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder ToContainer(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetContainer(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static OwnedNavigationBuilder ToJsonProperty(OwnedNavigationBuilder entityTypeBuilder, string name);
    [ExtensionAttribute]
public static OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> ToJsonProperty(OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> entityTypeBuilder, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder ToJsonProperty(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetJsonProperty(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder HasPartitionKey(EntityTypeBuilder entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> HasPartitionKey(EntityTypeBuilder`1<TEntity> entityTypeBuilder, string name);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> HasPartitionKey(EntityTypeBuilder`1<TEntity> entityTypeBuilder, Expression`1<Func`2<TEntity, TProperty>> propertyExpression);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionEntityTypeBuilder HasPartitionKey(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetPartitionKey(IConventionEntityTypeBuilder entityTypeBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder UseETagConcurrency(EntityTypeBuilder entityTypeBuilder);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> UseETagConcurrency(EntityTypeBuilder`1<TEntity> entityTypeBuilder);
    [ExtensionAttribute]
public static EntityTypeBuilder HasAnalyticalStoreTimeToLive(EntityTypeBuilder entityTypeBuilder, Nullable`1<int> seconds);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> HasAnalyticalStoreTimeToLive(EntityTypeBuilder`1<TEntity> entityTypeBuilder, Nullable`1<int> seconds);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder HasAnalyticalStoreTimeToLive(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<int> seconds, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetAnalyticalStoreTimeToLive(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<int> seconds, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder HasDefaultTimeToLive(EntityTypeBuilder entityTypeBuilder, Nullable`1<int> seconds);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> HasDefaultTimeToLive(EntityTypeBuilder`1<TEntity> entityTypeBuilder, Nullable`1<int> seconds);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder HasDefaultTimeToLive(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<int> seconds, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetDefaultTimeToLive(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<int> seconds, bool fromDataAnnotation);
    [ExtensionAttribute]
public static EntityTypeBuilder HasManualThroughput(EntityTypeBuilder entityTypeBuilder, Nullable`1<int> throughput);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> HasManualThroughput(EntityTypeBuilder`1<TEntity> entityTypeBuilder, Nullable`1<int> throughput);
    [ExtensionAttribute]
public static EntityTypeBuilder HasAutoscaleThroughput(EntityTypeBuilder entityTypeBuilder, Nullable`1<int> throughput);
    [ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> HasAutoscaleThroughput(EntityTypeBuilder`1<TEntity> entityTypeBuilder, Nullable`1<int> throughput);
    [ExtensionAttribute]
public static IConventionEntityTypeBuilder HasThroughput(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<int> throughput, bool autoscale, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetThroughput(IConventionEntityTypeBuilder entityTypeBuilder, Nullable`1<int> throughput, bool autoscale, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.CosmosEntityTypeExtensions : object {
    [ExtensionAttribute]
public static string GetContainer(IReadOnlyEntityType entityType);
    private static string GetDefaultContainer(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetContainer(IMutableEntityType entityType, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetContainer(IConventionEntityType entityType, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetContainerConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static string GetContainingPropertyName(IReadOnlyEntityType entityType);
    private static string GetDefaultContainingPropertyName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetContainingPropertyName(IMutableEntityType entityType, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetContainingPropertyName(IConventionEntityType entityType, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetContainingPropertyNameConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static string GetPartitionKeyPropertyName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetPartitionKeyPropertyName(IMutableEntityType entityType, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetPartitionKeyPropertyName(IConventionEntityType entityType, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetPartitionKeyPropertyNameConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IReadOnlyProperty GetPartitionKeyProperty(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IMutableProperty GetPartitionKeyProperty(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IConventionProperty GetPartitionKeyProperty(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IProperty GetPartitionKeyProperty(IEntityType entityType);
    [ExtensionAttribute]
public static string GetETagPropertyName(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetETagPropertyName(IMutableEntityType entityType, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetETagPropertyName(IConventionEntityType entityType, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetETagPropertyNameConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IReadOnlyProperty GetETagProperty(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IMutableProperty GetETagProperty(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IConventionProperty GetETagProperty(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IProperty GetETagProperty(IEntityType entityType);
    [ExtensionAttribute]
public static Nullable`1<int> GetAnalyticalStoreTimeToLive(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetAnalyticalStoreTimeToLive(IMutableEntityType entityType, Nullable`1<int> seconds);
    [ExtensionAttribute]
public static Nullable`1<int> SetAnalyticalStoreTimeToLive(IConventionEntityType entityType, Nullable`1<int> seconds, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetAnalyticalStoreTimeToLiveConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static Nullable`1<int> GetDefaultTimeToLive(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetDefaultTimeToLive(IMutableEntityType entityType, Nullable`1<int> seconds);
    [ExtensionAttribute]
public static Nullable`1<int> SetDefaultTimeToLive(IConventionEntityType entityType, Nullable`1<int> seconds, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDefaultTimeToLiveConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static ThroughputProperties GetThroughput(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static void SetThroughput(IMutableEntityType entityType, Nullable`1<int> throughput, Nullable`1<bool> autoscale);
    [ExtensionAttribute]
public static Nullable`1<int> SetThroughput(IConventionEntityType entityType, Nullable`1<int> throughput, Nullable`1<bool> autoscale, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetThroughputConfigurationSource(IConventionEntityType entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.CosmosModelBuilderExtensions : object {
    [ExtensionAttribute]
public static ModelBuilder HasDefaultContainer(ModelBuilder modelBuilder, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionModelBuilder HasDefaultContainer(IConventionModelBuilder modelBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetDefaultContainer(IConventionModelBuilder modelBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static ModelBuilder HasManualThroughput(ModelBuilder modelBuilder, Nullable`1<int> throughput);
    [ExtensionAttribute]
public static ModelBuilder HasAutoscaleThroughput(ModelBuilder modelBuilder, Nullable`1<int> throughput);
    [ExtensionAttribute]
public static IConventionModelBuilder HasThroughput(IConventionModelBuilder modelBuilder, Nullable`1<int> throughput, bool autoscale, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetThroughput(IConventionModelBuilder modelBuilder, Nullable`1<int> throughput, bool autoscale, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.CosmosModelExtensions : object {
    [ExtensionAttribute]
public static string GetDefaultContainer(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetDefaultContainer(IMutableModel model, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetDefaultContainer(IConventionModel model, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDefaultContainerConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static ThroughputProperties GetThroughput(IReadOnlyModel model);
    [ExtensionAttribute]
public static void SetThroughput(IMutableModel model, Nullable`1<int> throughput, Nullable`1<bool> autoscale);
    [ExtensionAttribute]
public static Nullable`1<int> SetThroughput(IConventionModel model, Nullable`1<int> throughput, Nullable`1<bool> autoscale, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetThroughputConfigurationSource(IConventionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.CosmosPrimitiveCollectionBuilderExtensions : object {
    [ExtensionAttribute]
public static PrimitiveCollectionBuilder ToJsonProperty(PrimitiveCollectionBuilder primitiveCollectionBuilder, string name);
    [ExtensionAttribute]
public static PrimitiveCollectionBuilder`1<TProperty> ToJsonProperty(PrimitiveCollectionBuilder`1<TProperty> primitiveCollectionBuilder, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.CosmosPropertyBuilderExtensions : object {
    [ExtensionAttribute]
public static PropertyBuilder ToJsonProperty(PropertyBuilder propertyBuilder, string name);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> ToJsonProperty(PropertyBuilder`1<TProperty> propertyBuilder, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IConventionPropertyBuilder ToJsonProperty(IConventionPropertyBuilder propertyBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool CanSetJsonProperty(IConventionPropertyBuilder propertyBuilder, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static PropertyBuilder IsETagConcurrency(PropertyBuilder propertyBuilder);
    [ExtensionAttribute]
public static PropertyBuilder`1<TProperty> IsETagConcurrency(PropertyBuilder`1<TProperty> propertyBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.CosmosPropertyExtensions : object {
    private static bool _useOldBehavior31664;
    private static bool _useOldBehavior32363;
    private static CosmosPropertyExtensions();
    [ExtensionAttribute]
public static string GetJsonPropertyName(IReadOnlyProperty property);
    private static string GetDefaultJsonPropertyName(IReadOnlyProperty property);
    [ExtensionAttribute]
public static void SetJsonPropertyName(IMutableProperty property, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string SetJsonPropertyName(IConventionProperty property, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetJsonPropertyNameConfigurationSource(IConventionProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.CosmosQueryableExtensions : object {
    internal static MethodInfo WithPartitionKeyMethodInfo;
    private static CosmosQueryableExtensions();
    [ExtensionAttribute]
public static IQueryable`1<TEntity> WithPartitionKey(IQueryable`1<TEntity> source, string partitionKey);
    [ExtensionAttribute]
[StringFormatMethodAttribute("sql")]
public static IQueryable`1<TEntity> FromSqlRaw(DbSet`1<TEntity> source, string sql, Object[] parameters);
}
public static class Microsoft.EntityFrameworkCore.Diagnostics.CosmosEventId : object {
    private static string CommandPrefix;
    public static EventId ExecutingSqlQuery;
    public static EventId ExecutingReadItem;
    public static EventId ExecutedReadNext;
    public static EventId ExecutedReadItem;
    public static EventId ExecutedCreateItem;
    public static EventId ExecutedReplaceItem;
    public static EventId ExecutedDeleteItem;
    private static CosmosEventId();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.CosmosItemCommandExecutedEventData : EventData {
    [CompilerGeneratedAttribute]
private TimeSpan <Elapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RequestCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogSensitiveData>k__BackingField;
    public TimeSpan Elapsed { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ContainerId { get; }
    public string ResourceId { get; }
    [NullableAttribute("2")]
public string PartitionKey { get; }
    public bool LogSensitiveData { get; }
    public CosmosItemCommandExecutedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, TimeSpan elapsed, double requestCharge, string activityId, string containerId, string resourceId, string partitionKey, bool logSensitiveData);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_Elapsed();
    [CompilerGeneratedAttribute]
public virtual double get_RequestCharge();
    [CompilerGeneratedAttribute]
public virtual string get_ActivityId();
    [CompilerGeneratedAttribute]
public virtual string get_ContainerId();
    [CompilerGeneratedAttribute]
public virtual string get_ResourceId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_PartitionKey();
    [CompilerGeneratedAttribute]
public virtual bool get_LogSensitiveData();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.CosmosQueryEventData : EventData {
    [CompilerGeneratedAttribute]
private string <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartitionKey>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<ValueTuple`2<string, object>> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QuerySql>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogSensitiveData>k__BackingField;
    public string ContainerId { get; }
    [NullableAttribute("2")]
public string PartitionKey { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<ValueTuple`2<string, object>> Parameters { get; }
    public string QuerySql { get; }
    public bool LogSensitiveData { get; }
    public CosmosQueryEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, string containerId, string partitionKey, IReadOnlyList`1<ValueTuple`2<string, object>> parameters, string querySql, bool logSensitiveData);
    [CompilerGeneratedAttribute]
public virtual string get_ContainerId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_PartitionKey();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<ValueTuple`2<string, object>> get_Parameters();
    [CompilerGeneratedAttribute]
public virtual string get_QuerySql();
    [CompilerGeneratedAttribute]
public virtual bool get_LogSensitiveData();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.CosmosQueryExecutedEventData : EventData {
    [CompilerGeneratedAttribute]
private TimeSpan <Elapsed>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RequestCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActivityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartitionKey>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IReadOnlyList`1<ValueTuple`2<string, object>> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QuerySql>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogSensitiveData>k__BackingField;
    public TimeSpan Elapsed { get; }
    public double RequestCharge { get; }
    public string ActivityId { get; }
    public string ContainerId { get; }
    [NullableAttribute("2")]
public string PartitionKey { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<ValueTuple`2<string, object>> Parameters { get; }
    public string QuerySql { get; }
    public bool LogSensitiveData { get; }
    public CosmosQueryExecutedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, TimeSpan elapsed, double requestCharge, string activityId, string containerId, string partitionKey, IReadOnlyList`1<ValueTuple`2<string, object>> parameters, string querySql, bool logSensitiveData);
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_Elapsed();
    [CompilerGeneratedAttribute]
public virtual double get_RequestCharge();
    [CompilerGeneratedAttribute]
public virtual string get_ActivityId();
    [CompilerGeneratedAttribute]
public virtual string get_ContainerId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_PartitionKey();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<ValueTuple`2<string, object>> get_Parameters();
    [CompilerGeneratedAttribute]
public virtual string get_QuerySql();
    [CompilerGeneratedAttribute]
public virtual bool get_LogSensitiveData();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.CosmosReadItemEventData : EventData {
    [CompilerGeneratedAttribute]
private string <ContainerId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartitionKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LogSensitiveData>k__BackingField;
    public string ContainerId { get; }
    public string ResourceId { get; }
    [NullableAttribute("2")]
public string PartitionKey { get; }
    public bool LogSensitiveData { get; }
    public CosmosReadItemEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, string resourceId, string containerId, string partitionKey, bool logSensitiveData);
    [CompilerGeneratedAttribute]
public virtual string get_ContainerId();
    [CompilerGeneratedAttribute]
public virtual string get_ResourceId();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_PartitionKey();
    [CompilerGeneratedAttribute]
public virtual bool get_LogSensitiveData();
}
internal static class Microsoft.EntityFrameworkCore.EnumerableMethods : object {
    [CompilerGeneratedAttribute]
private static MethodInfo <AggregateWithSeedSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <All>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AsEnumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Cast>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Concat>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithoutArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Distinct>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAtOrDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Except>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Intersect>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Join>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <JoinWithComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OfType>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectWithOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithoutCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SequenceEqual>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SkipWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <TakeWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToArray>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToList>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ZipWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithSelectorMethods>k__BackingField;
    public static MethodInfo AggregateWithSeedSelector { get; }
    public static MethodInfo All { get; }
    public static MethodInfo AnyWithoutPredicate { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo AsEnumerable { get; }
    public static MethodInfo Cast { get; }
    public static MethodInfo Concat { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo CountWithoutPredicate { get; }
    public static MethodInfo CountWithPredicate { get; }
    public static MethodInfo DefaultIfEmptyWithoutArgument { get; }
    public static MethodInfo DefaultIfEmptyWithArgument { get; }
    public static MethodInfo Distinct { get; }
    public static MethodInfo ElementAt { get; }
    public static MethodInfo ElementAtOrDefault { get; }
    public static MethodInfo Except { get; }
    public static MethodInfo FirstWithoutPredicate { get; }
    public static MethodInfo FirstWithPredicate { get; }
    public static MethodInfo FirstOrDefaultWithoutPredicate { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    public static MethodInfo GroupByWithKeySelector { get; }
    public static MethodInfo GroupByWithKeyElementSelector { get; }
    public static MethodInfo GroupByWithKeyElementResultSelector { get; }
    public static MethodInfo GroupByWithKeyResultSelector { get; }
    public static MethodInfo GroupJoin { get; }
    public static MethodInfo Intersect { get; }
    public static MethodInfo Join { get; }
    public static MethodInfo JoinWithComparer { get; }
    public static MethodInfo LastWithoutPredicate { get; }
    public static MethodInfo LastWithPredicate { get; }
    public static MethodInfo LastOrDefaultWithoutPredicate { get; }
    public static MethodInfo LastOrDefaultWithPredicate { get; }
    public static MethodInfo LongCountWithoutPredicate { get; }
    public static MethodInfo LongCountWithPredicate { get; }
    public static MethodInfo MaxWithoutSelector { get; }
    public static MethodInfo MaxWithSelector { get; }
    public static MethodInfo MinWithoutSelector { get; }
    public static MethodInfo MinWithSelector { get; }
    public static MethodInfo OfType { get; }
    public static MethodInfo OrderBy { get; }
    public static MethodInfo OrderByDescending { get; }
    public static MethodInfo Reverse { get; }
    public static MethodInfo Select { get; }
    public static MethodInfo SelectWithOrdinal { get; }
    public static MethodInfo SelectManyWithoutCollectionSelector { get; }
    public static MethodInfo SelectManyWithCollectionSelector { get; }
    public static MethodInfo SequenceEqual { get; }
    public static MethodInfo SingleWithoutPredicate { get; }
    public static MethodInfo SingleWithPredicate { get; }
    public static MethodInfo SingleOrDefaultWithoutPredicate { get; }
    public static MethodInfo SingleOrDefaultWithPredicate { get; }
    public static MethodInfo Skip { get; }
    public static MethodInfo SkipWhile { get; }
    public static MethodInfo Take { get; }
    public static MethodInfo TakeWhile { get; }
    public static MethodInfo ThenBy { get; }
    public static MethodInfo ThenByDescending { get; }
    public static MethodInfo ToArray { get; }
    public static MethodInfo ToList { get; }
    public static MethodInfo Union { get; }
    public static MethodInfo Where { get; }
    public static MethodInfo ZipWithSelector { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithSelectorMethods { get; }
    private static EnumerableMethods();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AggregateWithSeedSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_All();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AsEnumerable();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Cast();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Concat();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Contains();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithoutArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Distinct();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAt();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAtOrDefault();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Except();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeySelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupJoin();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Intersect();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Join();
    [CompilerGeneratedAttribute]
public static MethodInfo get_JoinWithComparer();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OfType();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Reverse();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Select();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectWithOrdinal();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithoutCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SequenceEqual();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Skip();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SkipWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Take();
    [CompilerGeneratedAttribute]
public static MethodInfo get_TakeWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToArray();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToList();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Union();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Where();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ZipWithSelector();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithSelectorMethods();
    public static MethodInfo GetSumWithSelector(Type type);
    public static MethodInfo GetAverageWithSelector(Type type);
    public static MethodInfo GetMaxWithoutSelector(Type type);
    public static MethodInfo GetMaxWithSelector(Type type);
    public static MethodInfo GetMinWithoutSelector(Type type);
    public static MethodInfo GetMinWithSelector(Type type);
    [CompilerGeneratedAttribute]
internal static MethodInfo <.cctor>g__GetMethod|210_65(string name, int genericParameterCount, Func`2<Type[], Type[]> parameterGenerator, <>c__DisplayClass210_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.CosmosDbContextOptionsBuilder : object {
    private DbContextOptionsBuilder _optionsBuilder;
    private DbContextOptionsBuilder Microsoft.EntityFrameworkCore.Infrastructure.ICosmosDbContextOptionsBuilderInfrastructure.OptionsBuilder { get; }
    public CosmosDbContextOptionsBuilder(DbContextOptionsBuilder optionsBuilder);
    private sealed virtual override DbContextOptionsBuilder Microsoft.EntityFrameworkCore.Infrastructure.ICosmosDbContextOptionsBuilderInfrastructure.get_OptionsBuilder();
    public virtual CosmosDbContextOptionsBuilder ExecutionStrategy(Func`2<ExecutionStrategyDependencies, IExecutionStrategy> getExecutionStrategy);
    public virtual CosmosDbContextOptionsBuilder Region(string region);
    public virtual CosmosDbContextOptionsBuilder PreferredRegions(IReadOnlyList`1<string> regions);
    public virtual CosmosDbContextOptionsBuilder LimitToEndpoint(bool enable);
    public virtual CosmosDbContextOptionsBuilder HttpClientFactory(Func`1<HttpClient> httpClientFactory);
    public virtual CosmosDbContextOptionsBuilder ConnectionMode(ConnectionMode connectionMode);
    public virtual CosmosDbContextOptionsBuilder WebProxy(IWebProxy proxy);
    public virtual CosmosDbContextOptionsBuilder RequestTimeout(TimeSpan timeout);
    public virtual CosmosDbContextOptionsBuilder OpenTcpConnectionTimeout(TimeSpan timeout);
    public virtual CosmosDbContextOptionsBuilder IdleTcpConnectionTimeout(TimeSpan timeout);
    public virtual CosmosDbContextOptionsBuilder GatewayModeMaxConnectionLimit(int connectionLimit);
    public virtual CosmosDbContextOptionsBuilder MaxTcpConnectionsPerEndpoint(int connectionLimit);
    public virtual CosmosDbContextOptionsBuilder MaxRequestsPerTcpConnection(int requestLimit);
    public virtual CosmosDbContextOptionsBuilder ContentResponseOnWriteEnabled(bool enabled);
    protected virtual CosmosDbContextOptionsBuilder WithOption(Func`2<CosmosOptionsExtension, CosmosOptionsExtension> setAction);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.ICosmosDbContextOptionsBuilderInfrastructure {
    public DbContextOptionsBuilder OptionsBuilder { get; }
    public abstract virtual DbContextOptionsBuilder get_OptionsBuilder();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.CosmosExpressionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsLogicalNot(SqlUnaryExpression sqlUnaryExpression);
}
internal static class Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer : object {
    public static TValue EnsureInitialized(TValue& target, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, Func`3<TParam1, TParam2, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, TParam3 param3, Func`4<TParam1, TParam2, TParam3, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, Boolean& initialized, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TValue value);
    public static TValue EnsureInitialized(TValue& target, TParam param, Action`1<TParam> valueFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ContextContainerConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ContextContainerConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.CosmosDiscriminatorConvention : DiscriminatorConvention {
    public CosmosDiscriminatorConvention(ProviderConventionSetBuilderDependencies dependencies);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessForeignKeyOwnershipChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
    public virtual void ProcessForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey, IConventionContext`1<IConventionForeignKey> context);
    public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    private static void ProcessEntityType(IConventionEntityTypeBuilder entityTypeBuilder);
    public virtual void ProcessDiscriminatorPropertySet(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionContext`1<string> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    protected virtual void SetDefaultDiscriminatorValues(IEnumerable`1<IConventionEntityType> entityTypes, IConventionDiscriminatorBuilder discriminatorBuilder);
    public virtual void ProcessEntityTypeRemoved(IConventionModelBuilder modelBuilder, IConventionEntityType entityType, IConventionContext`1<IConventionEntityType> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.CosmosInversePropertyAttributeConvention : InversePropertyAttributeConvention {
    public CosmosInversePropertyAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual IConventionEntityTypeBuilder TryGetTargetEntityTypeBuilder(IConventionEntityTypeBuilder entityTypeBuilder, Type targetClrType, MemberInfo navigationMemberInfo, bool shouldCreate);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.CosmosKeyDiscoveryConvention : KeyDiscoveryConvention {
    [NullableContextAttribute("1")]
public CosmosKeyDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    [NullableContextAttribute("1")]
public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    [NullableContextAttribute("1")]
protected virtual void ProcessKeyProperties(IList`1<IConventionProperty> keyProperties, IConventionEntityType entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.CosmosManyToManyJoinEntityTypeConvention : ManyToManyJoinEntityTypeConvention {
    public CosmosManyToManyJoinEntityTypeConvention(ProviderConventionSetBuilderDependencies dependencies);
    public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessSkipNavigationForeignKeyChanged(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionForeignKey foreignKey, IConventionForeignKey oldForeignKey, IConventionContext`1<IConventionForeignKey> context);
    protected virtual void CreateJoinEntityType(string joinEntityTypeName, IConventionSkipNavigation skipNavigation);
    private void ConfigurePartitionKeyJoinEntityType(IConventionSkipNavigation skipNavigation, IConventionEntityTypeBuilder joinEntityTypeBuilder);
    private void CreateSkipNavigationForeignKey(IConventionSkipNavigation skipNavigation, IConventionEntityTypeBuilder joinEntityTypeBuilder, IConventionProperty partitionKeyProperty);
    private void ProcessJoinPartitionKey(IConventionSkipNavigation skipNavigation);
    private static bool ShouldSharePartitionKey(IConventionSkipNavigation skipNavigation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.CosmosRelationshipDiscoveryConvention : RelationshipDiscoveryConvention {
    public CosmosRelationshipDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual Nullable`1<bool> ShouldBeOwned(Type targetType, IConventionModel model);
    public static bool ShouldBeOwnedType(Type targetType, IConventionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.CosmosRuntimeModelConvention : RuntimeModelConvention {
    public CosmosRuntimeModelConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessModelAnnotations(Dictionary`2<string, object> annotations, IModel model, RuntimeModel runtimeModel, bool runtime);
    protected virtual void ProcessEntityTypeAnnotations(Dictionary`2<string, object> annotations, IEntityType entityType, RuntimeEntityType runtimeEntityType, bool runtime);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.CosmosValueGenerationConvention : ValueGenerationConvention {
    private static bool _useOldBehavior31664;
    [NullableContextAttribute("1")]
public CosmosValueGenerationConvention(ProviderConventionSetBuilderDependencies dependencies);
    private static CosmosValueGenerationConvention();
    [NullableContextAttribute("1")]
public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    [NullableContextAttribute("1")]
protected virtual Nullable`1<ValueGenerated> GetValueGenerated(IConventionProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.StoreKeyConvention : object {
    [EntityFrameworkInternalAttribute]
public static string IdPropertyJsonName;
    [EntityFrameworkInternalAttribute]
public static string DefaultIdPropertyName;
    [EntityFrameworkInternalAttribute]
public static string JObjectPropertyName;
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public StoreKeyConvention(ProviderConventionSetBuilderDependencies dependencies);
    private static StoreKeyConvention();
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    private static void ProcessIdProperty(IConventionEntityTypeBuilder entityTypeBuilder);
    private static void ProcessJObjectProperty(IConventionEntityTypeBuilder entityTypeBuilder);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessForeignKeyOwnershipChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
    public virtual void ProcessForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey, IConventionContext`1<IConventionForeignKey> context);
    public virtual void ProcessKeyAdded(IConventionKeyBuilder keyBuilder, IConventionContext`1<IConventionKeyBuilder> context);
    public virtual void ProcessKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey key, IConventionContext`1<IConventionKey> context);
    public virtual void ProcessEntityTypePrimaryKeyChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey newPrimaryKey, IConventionKey previousPrimaryKey, IConventionContext`1<IConventionKey> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
    public virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.CollectionShaperExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Projection>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <InnerShaper>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationBase <Navigation>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    public Expression Projection { get; }
    public Expression InnerShaper { get; }
    [NullableAttribute("2")]
public INavigationBase Navigation { get; }
    public Type ElementType { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public CollectionShaperExpression(Expression projection, Expression innerShaper, INavigationBase navigation, Type elementType);
    [CompilerGeneratedAttribute]
public virtual Expression get_Projection();
    [CompilerGeneratedAttribute]
public virtual Expression get_InnerShaper();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual INavigationBase get_Navigation();
    [CompilerGeneratedAttribute]
public virtual Type get_ElementType();
    public sealed virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual CollectionShaperExpression Update(Expression projection, Expression innerShaper);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
}
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    public static IReadOnlyList`1<string> HasNoEmptyElements(IReadOnlyList`1<string> value, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void DebugAssert(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
[DoesNotReturnAttribute]
public static void DebugFail(string message);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue GetOrAddNew(IDictionary`2<TKey, TValue> source, TKey key);
    [ExtensionAttribute]
public static TValue Find(IReadOnlyDictionary`2<TKey, TValue> source, TKey key);
    [ExtensionAttribute]
public static bool TryGetAndRemove(IDictionary`2<TKey, TValue> source, TKey key, TReturn& value);
    [ExtensionAttribute]
public static void Remove(IDictionary`2<TKey, TValue> source, Func`3<TKey, TValue, bool> predicate);
    [ExtensionAttribute]
public static void Remove(IDictionary`2<TKey, TValue> source, Func`4<TKey, TValue, TState, bool> predicate, TState state);
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DisposableExtensions : object {
    [ExtensionAttribute]
public static ValueTask DisposeAsyncIfAvailable(IDisposable disposable);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByOrdinal(IEnumerable`1<TSource> source, Func`2<TSource, string> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<T> Distinct(IEnumerable`1<T> source, Func`3<T, T, bool> comparer);
    [ExtensionAttribute]
public static string Join(IEnumerable`1<object> source, string separator);
    [ExtensionAttribute]
public static bool StructuralSequenceEqual(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static bool StartsWith(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> source, T item);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> source, T item, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static T FirstOr(IEnumerable`1<T> source, T alternate);
    [ExtensionAttribute]
public static T FirstOr(IEnumerable`1<T> source, Func`2<T, bool> predicate, T alternate);
    [ExtensionAttribute]
public static bool Any(IEnumerable source);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Utilities.EnumerableExtensions/<ToListAsync>d__11`1")]
[ExtensionAttribute]
public static Task`1<List`1<TSource>> ToListAsync(IAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static List`1<TSource> ToList(IEnumerable source);
    [ExtensionAttribute]
public static string Format(IEnumerable`1<string> strings);
}
internal abstract class Microsoft.EntityFrameworkCore.Utilities.Graph`1 : object {
    public IEnumerable`1<TVertex> Vertices { get; }
    public abstract virtual IEnumerable`1<TVertex> get_Vertices();
    public abstract virtual void Clear();
    public abstract virtual IEnumerable`1<TVertex> GetOutgoingNeighbors(TVertex from);
    public abstract virtual IEnumerable`1<TVertex> GetIncomingNeighbors(TVertex to);
    public ISet`1<TVertex> GetUnreachableVertices(IReadOnlyList`1<TVertex> roots);
}
internal static class Microsoft.EntityFrameworkCore.Utilities.HashHelpers : object {
    internal static Int32[] SizeOneIntArray;
    public static int HashCollisionThreshold;
    public static int MaxPrimeArrayLength;
    public static int HashPrime;
    public static Int32[] primes;
    private static HashHelpers();
    internal static int PowerOf2(int v);
    public static bool IsPrime(int candidate);
    public static int GetPrime(int min);
    public static int ExpandPrime(int oldSize);
}
internal class Microsoft.EntityFrameworkCore.Utilities.Multigraph`2 : Graph`1<TVertex> {
    private IComparer`1<TVertex> _secondarySortComparer;
    private HashSet`1<TVertex> _vertices;
    private Dictionary`2<TVertex, Dictionary`2<TVertex, object>> _successorMap;
    private Dictionary`2<TVertex, Dictionary`2<TVertex, object>> _predecessorMap;
    public IEnumerable`1<TVertex> Vertices { get; }
    public Multigraph`2(IComparer`1<TVertex> secondarySortComparer);
    public Multigraph`2(Comparison`1<TVertex> secondarySortComparer);
    public IEnumerable`1<TEdge> GetEdges(TVertex from, TVertex to);
    public void AddVertex(TVertex vertex);
    public void AddVertices(IEnumerable`1<TVertex> vertices);
    public void AddEdge(TVertex from, TVertex to, TEdge payload, bool requiresBatchingBoundary);
    public virtual void Clear();
    public IReadOnlyList`1<TVertex> TopologicalSort();
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> tryBreakEdge);
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`2<IEnumerable`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle);
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> tryBreakEdge, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    protected virtual string ToString(TVertex vertex);
    public IReadOnlyList`1<List`1<TVertex>> BatchingTopologicalSort();
    public IReadOnlyList`1<List`1<TVertex>> BatchingTopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> canBreakEdges, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    private IReadOnlyList`1<List`1<TVertex>> TopologicalSortCore(bool withBatching, Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> canBreakEdges, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    private void ThrowCycle(List`1<TVertex> cycle, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    public virtual IEnumerable`1<TVertex> get_Vertices();
    public virtual IEnumerable`1<TVertex> GetOutgoingNeighbors(TVertex from);
    public virtual IEnumerable`1<TVertex> GetIncomingNeighbors(TVertex to);
    [CompilerGeneratedAttribute]
private string <ThrowCycle>b__20_0(TVertex e);
}
[IsReadOnlyAttribute]
internal class Microsoft.EntityFrameworkCore.Utilities.SharedStopwatch : ValueType {
    private static Stopwatch Stopwatch;
    private TimeSpan _started;
    public TimeSpan Elapsed { get; }
    private SharedStopwatch(TimeSpan started);
    private static SharedStopwatch();
    public TimeSpan get_Elapsed();
    public static SharedStopwatch StartNew();
    private static SharedStopwatch StartNewCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.CosmosServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddCosmos(IServiceCollection serviceCollection, string connectionString, string databaseName, Action`1<CosmosDbContextOptionsBuilder> cosmosOptionsAction, Action`1<DbContextOptionsBuilder> optionsAction);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static IServiceCollection AddEntityFrameworkCosmos(IServiceCollection serviceCollection);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Linq.Expressions.ExpressionExtensions : object {
    [ExtensionAttribute]
public static bool IsNullConstantExpression(Expression expression);
    [ExtensionAttribute]
public static LambdaExpression UnwrapLambdaFromQuote(Expression expression);
    [ExtensionAttribute]
public static Expression UnwrapTypeConversion(Expression expression, Type& convertedType);
    private static Expression RemoveConvert(Expression expression);
    [ExtensionAttribute]
public static T GetConstantValue(Expression expression);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Linq.Expressions.ExpressionVisitorExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyList`1<Expression> Visit(ExpressionVisitor visitor, IReadOnlyList`1<Expression> nodes);
    [ExtensionAttribute]
public static IReadOnlyList`1<T> VisitAndConvert(ExpressionVisitor visitor, IReadOnlyList`1<T> nodes, string callerName);
    [ExtensionAttribute]
public static IReadOnlyList`1<T> Visit(ExpressionVisitor visitor, IReadOnlyList`1<T> nodes, Func`2<T, T> elementVisitor);
}
[ExtensionAttribute]
internal static class System.Reflection.EntityFrameworkMemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsSameAs(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [ExtensionAttribute]
public static bool IsOverriddenBy(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [ExtensionAttribute]
public static string GetSimpleMemberName(MemberInfo member);
    [ExtensionAttribute]
public static bool IsReallyVirtual(MethodInfo method);
}
[ExtensionAttribute]
internal static class System.Reflection.MethodInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsContainsMethod(MethodInfo method);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsCandidateProperty(MemberInfo memberInfo, bool needsWrite, bool publicOnly);
    [ExtensionAttribute]
public static bool IsIndexerProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindGetterProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindSetterProperty(PropertyInfo propertyInfo);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, string> BuiltInTypeNames;
    private static Dictionary`2<Type, object> CommonTypeDictionary;
    private static MethodInfo GenerateDefaultValueConstantMethod;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableValueType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static bool IsValidEntityType(Type type);
    [ExtensionAttribute]
public static bool IsValidComplexType(Type type);
    [ExtensionAttribute]
public static bool IsScalarType(Type type);
    [ExtensionAttribute]
public static bool IsPropertyBagType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type, bool nullable);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static bool IsSignedInteger(Type type);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
public static bool IsInstantiable(Type type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [ExtensionAttribute]
public static bool IsCompatibleWith(Type propertyType, Type fieldType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetGenericTypeImplementations>d__20")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__21")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [ExtensionAttribute]
public static List`1<Type> GetBaseTypesAndInterfacesInclusive(Type type);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetTypesInHierarchy>d__23")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetDeclaredInterfaces(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__26")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__27")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Gets all types from the given assembly - unsafe for trimming")]
public static IEnumerable`1<TypeInfo> GetConstructibleTypes(Assembly assembly);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Gets all types from the given assembly - unsafe for trimming")]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
    [ExtensionAttribute]
public static string DisplayName(Type type, bool fullName, bool compilable);
    private static void ProcessType(StringBuilder builder, Type type, bool fullName, bool compilable);
    private static void ProcessArrayType(StringBuilder builder, Type type, bool fullName, bool compilable);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, bool fullName, bool compilable);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetNamespaces>d__37")]
[ExtensionAttribute]
public static IEnumerable`1<string> GetNamespaces(Type type);
    [ExtensionAttribute]
public static ConstantExpression GetDefaultValueConstant(Type type);
    private static ConstantExpression GenerateDefaultValueConstant();
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2070")]
internal static IEnumerable`1<Type> <GetDeclaredInterfaces>g__GetInterfacesSuppressed|24_0(Type type);
}
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Func`3<StringBuilder, T, bool> joinFunc, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static void AppendBytes(StringBuilder builder, Byte[] bytes);
}
