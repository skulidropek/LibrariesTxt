[DynamicLinqTypeAttribute]
public static class Microsoft.EntityFrameworkCore.DynamicLinq.DynamicFunctions : object {
}
public class Microsoft.EntityFrameworkCore.DynamicLinq.EFCoreType : ValueType {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.DynamicLinq.EFDynamicQueryableWithFormattableStringExtensions : object {
    private static string ParseFormattableString(FormattableString predicate, Object[]& args);
    [ExtensionAttribute]
public static Task`1<bool> AllInterpolatedAsync(IQueryable source, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<bool> AllInterpolatedAsync(IQueryable source, FormattableString predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AnyInterpolatedAsync(IQueryable source, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<bool> AnyInterpolatedAsync(IQueryable source, FormattableString predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageInterpolatedAsync(IQueryable source, FormattableString selector);
    [ExtensionAttribute]
public static Task`1<double> AverageInterpolatedAsync(IQueryable source, FormattableString selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CountInterpolatedAsync(IQueryable source, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<int> CountInterpolatedAsync(IQueryable source, CancellationToken cancellationToken, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<object> FirstInterpolatedAsync(IQueryable source, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<object> FirstInterpolatedAsync(IQueryable source, CancellationToken cancellationToken, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<object> FirstOrDefaultInterpolatedAsync(IQueryable source, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<object> FirstOrDefaultInterpolatedAsync(IQueryable source, CancellationToken cancellationToken, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<object> LastInterpolatedAsync(IQueryable source, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<object> LastInterpolatedAsync(IQueryable source, CancellationToken cancellationToken, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<object> LastOrDefaultInterpolatedAsync(IQueryable source, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<object> LastOrDefaultInterpolatedAsync(IQueryable source, CancellationToken cancellationToken, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<long> LongCountInterpolatedAsync(IQueryable source, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<long> LongCountInterpolatedAsync(IQueryable source, CancellationToken cancellationToken, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<object> SingleOrDefaultInterpolatedAsync(IQueryable source, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<object> SingleOrDefaultInterpolatedAsync(IQueryable source, CancellationToken cancellationToken, FormattableString predicate);
    [ExtensionAttribute]
public static Task`1<object> SumInterpolatedAsync(IQueryable source, FormattableString selector);
    [ExtensionAttribute]
public static Task`1<object> SumInterpolatedAsync(IQueryable source, CancellationToken cancellationToken, FormattableString selector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.DynamicLinq.EntityFrameworkDynamicQueryableExtensions : object {
    private static TraceSource TraceSource;
    private static MethodInfo _AllPredicate;
    private static MethodInfo _any;
    private static MethodInfo _anyPredicate;
    private static MethodInfo _averageForDouble;
    private static MethodInfo _averagePredicateForDouble;
    private static MethodInfo _count;
    private static MethodInfo _countPredicate;
    private static MethodInfo _first;
    private static MethodInfo _firstPredicate;
    private static MethodInfo _firstOrDefault;
    private static MethodInfo _firstOrDefaultPredicate;
    private static MethodInfo _last;
    private static MethodInfo _lastPredicate;
    private static MethodInfo _lastOrDefault;
    private static MethodInfo _lastOrDefaultPredicate;
    private static MethodInfo _longCount;
    private static MethodInfo _longCountPredicate;
    private static MethodInfo _singleOrDefault;
    private static MethodInfo _singleOrDefaultPredicate;
    private static MethodInfo _executeAsyncMethod;
    private static MethodInfo _executeAsyncMethodWithExpression;
    private static EntityFrameworkDynamicQueryableExtensions();
    [ExtensionAttribute]
public static Task`1<bool> AllAsync(IQueryable source, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<bool> AllAsync(IQueryable source, string predicate, CancellationToken cancellationToken, Object[] args);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IQueryable source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IQueryable source, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IQueryable source, string predicate, CancellationToken cancellationToken, Object[] args);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable source, string selector, Object[] args);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable source, string selector, CancellationToken cancellationToken, Object[] args);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IQueryable source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IQueryable source, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IQueryable source, CancellationToken cancellationToken, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<object> FirstAsync(IQueryable source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> FirstAsync(IQueryable source, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<object> FirstAsync(IQueryable source, CancellationToken cancellationToken, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<object> FirstOrDefaultAsync(IQueryable source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> FirstOrDefaultAsync(IQueryable source, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<object> FirstOrDefaultAsync(IQueryable source, CancellationToken cancellationToken, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<object> LastAsync(IQueryable source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> LastAsync(IQueryable source, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<object> LastAsync(IQueryable source, CancellationToken cancellationToken, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<object> LastOrDefaultAsync(IQueryable source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> LastOrDefaultAsync(IQueryable source, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<object> LastOrDefaultAsync(IQueryable source, CancellationToken cancellationToken, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IQueryable source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IQueryable source, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IQueryable source, CancellationToken cancellationToken, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<object> SingleOrDefaultAsync(IQueryable source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> SingleOrDefaultAsync(IQueryable source, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<object> SingleOrDefaultAsync(IQueryable source, CancellationToken cancellationToken, string predicate, Object[] args);
    [ExtensionAttribute]
public static Task`1<object> SumAsync(IQueryable source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<object> SumAsync(IQueryable source, string selector, Object[] args);
    [ExtensionAttribute]
public static Task`1<object> SumAsync(IQueryable source, CancellationToken cancellationToken, string selector, Object[] args);
    private static Task`1<object> ExecuteDynamicAsync(MethodInfo operatorMethodInfo, IQueryable source, CancellationToken cancellationToken);
    private static Task`1<TResult> ExecuteAsync(MethodInfo operatorMethodInfo, IQueryable source, CancellationToken cancellationToken);
    private static Task`1<TResult> ExecuteAsync(MethodInfo operatorMethodInfo, IQueryable source, LambdaExpression expression, CancellationToken cancellationToken);
    private static Task`1<object> ExecuteDynamicAsync(MethodInfo operatorMethodInfo, IQueryable source, Expression expression, CancellationToken cancellationToken);
    private static Task`1<TResult> ExecuteAsync(MethodInfo operatorMethodInfo, IQueryable source, Expression expression, CancellationToken cancellationToken);
    private static MethodInfo GetMethod(string name, int parameterCount, Func`2<MethodInfo, bool> predicate);
    private static MethodInfo GetMethod(string name, Type returnType, int parameterCount, Func`2<MethodInfo, bool> predicate);
    private static MethodInfo GetMethod(string name, int parameterCount, Func`2<MethodInfo, bool> predicate);
    private static IQueryable CastSource(IQueryable source, MethodInfo operatorMethodInfo);
    private static Task`1<TResult> ExecuteAsync(IAsyncQueryProvider provider, Expression expression, CancellationToken cancellationToken);
    private static Expression OptimizeExpression(Expression expression);
}
[ExtensionAttribute]
internal static class System.Linq.Dynamic.Core.Extensions.LinqExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<T> WhereNotNull(IEnumerable`1<T> sequence);
}
[ExtensionAttribute]
internal static class System.Linq.Dynamic.Core.Extensions.TokenIdExtensions : object {
    [ExtensionAttribute]
internal static bool IsEqualityOperator(TokenId tokenId);
    [ExtensionAttribute]
internal static bool IsComparisonOperator(TokenId tokenId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Linq.Dynamic.Core.Res : object {
    public static string AmbiguousConstructorInvocation;
    public static string AmbiguousIndexerInvocation;
    public static string AmbiguousMethodInvocation;
    public static string ArgsIncompatibleWithLambda;
    public static string BinaryCharExpected;
    public static string BothTypesConvertToOther;
    public static string CannotConvertValue;
    public static string CannotIndexMultiDimArray;
    public static string CloseBracketExpected;
    public static string CloseBracketOrCommaExpected;
    public static string CloseParenOrCommaExpected;
    public static string CloseParenOrOperatorExpected;
    public static string ColonExpected;
    public static string DigitExpected;
    public static string DotExpected;
    public static string DotOrOpenParenExpected;
    public static string DotOrOpenParenOrStringLiteralExpected;
    public static string DynamicExpandoObjectIsNotSupported;
    public static string DuplicateIdentifier;
    public static string EnumTypeNotFound;
    public static string EnumValueExpected;
    public static string EnumValueNotDefined;
    public static string ExpressionExpected;
    public static string ExpressionTypeMismatch;
    public static string FirstExprMustBeBool;
    public static string FunctionRequiresOneArg;
    public static string FunctionRequiresOneNotNullArg;
    public static string FunctionRequiresNotNullArgOfType;
    public static string FunctionRequiresOneOrTwoArgs;
    public static string HexCharExpected;
    public static string IQueryableProviderNotAsync;
    public static string IdentifierExpected;
    public static string IdentifierImplementingInterfaceExpected;
    public static string IifRequiresThreeArgs;
    public static string IncompatibleOperand;
    public static string IncompatibleOperands;
    public static string IncompatibleTypes;
    public static string InvalidBinaryIntegerLiteral;
    public static string InvalidCharacter;
    public static string InvalidCharacterLiteral;
    public static string InvalidIndex;
    public static string InvalidIntegerLiteral;
    public static string InvalidIntegerQualifier;
    public static string InvalidRealLiteral;
    public static string InvalidStringQuoteCharacter;
    public static string InvalidStringLength;
    public static string IsNullRequiresTwoArgs;
    public static string MethodIsVoid;
    public static string MethodsAreInaccessible;
    public static string MinusCannotBeAppliedToUnsignedInteger;
    public static string MissingAsClause;
    public static string NeitherTypeConvertsToOther;
    public static string NewOperatorIsNotAllowed;
    public static string NoApplicableIndexer;
    public static string NoApplicableMethod;
    public static string NoItInScope;
    public static string NoMatchingConstructor;
    public static string NoParentInScope;
    public static string NoRootInScope;
    public static string NullPropagationRequiresCorrectArgs;
    public static string NullPropagationRequiresValidExpression;
    public static string OpenBracketExpected;
    public static string OpenCurlyParenExpected;
    public static string OpenParenExpected;
    public static string OpenParenOrIdentifierExpected;
    public static string OutKeywordRequiresDiscard;
    public static string ParseExceptionFormat;
    public static string SyntaxError;
    public static string TokenExpected;
    public static string TypeHasNoNullableForm;
    public static string TypeNotFound;
    public static string UnexpectedUnclosedString;
    public static string UnexpectedUnrecognizedEscapeSequence;
    public static string UnknownIdentifier;
    public static string UnknownPropertyOrField;
    public static string UnterminatedStringLiteral;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerStepThroughAttribute]
internal static class System.Linq.Dynamic.Core.Validation.Check : object {
    public static T Condition(T value, Predicate`1<T> predicate, string parameterName);
    public static T NotNull(T value, string parameterName);
    public static T NotNull(T value, string parameterName, string propertyName);
    public static IEnumerable`1<T> NotNullOrEmpty(IEnumerable`1<T> value, string parameterName);
    [NullableContextAttribute("2")]
public static string NotEmpty(string value, string parameterName);
    [NullableContextAttribute("2")]
public static string NotNullOrEmpty(string value, string parameterName);
    [NullableContextAttribute("2")]
public static string NotNullOrWhiteSpace(string value, string parameterName);
    public static IEnumerable`1<T> HasNoNulls(IEnumerable`1<T> value, string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.Linq.Dynamic.Core.Validation.CoreStrings : object {
    public static string ArgumentPropertyNull(string property, string argument);
    public static string ArgumentIsEmpty(string argumentName);
    public static string CollectionArgumentIsEmpty(string argumentName);
}
internal class System.Linq.Dynamic.Core.Validation.ValidatedNotNullAttribute : Attribute {
}
[ExtensionAttribute]
internal static class System.Linq.Expressions.LambdaExpressionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Type GetReturnType(LambdaExpression lambdaExpression);
}
[ExtensionAttribute]
internal static class System.Reflection.CustomIntrospectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Type[] GetGenericTypeArguments(TypeInfo typeInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reflection.CustomTypeBuilderExtensions : object {
    [ExtensionAttribute]
public static Type CreateType(TypeBuilder tb);
    [ExtensionAttribute]
public static PropertyBuilder DefineProperty(TypeBuilder tb, string name, PropertyAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes);
    [ExtensionAttribute]
public static Type AsType(TypeBuilder builder);
    [ExtensionAttribute]
public static Type AsType(GenericTypeParameterBuilder builder);
}
[ExtensionAttribute]
internal static class System.StringExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
}
