internal class Microsoft.Exchange.BuildVersionInfo : object {
    public static int ProductMajor;
    public static int ProductMinor;
    public static int BuildMajor;
    public static int BuildMinor;
    public static string FileVersion;
    public static string AssemblyVersion;
    public static string VProductMajor;
    public static string Product;
}
internal class Microsoft.Exchange.WebServices.Auth.ExchangeResourceManager : ResourceManager {
    private static HybridDictionary resourceManagers;
    private static object lockObject;
    public string BaseName { get; }
    public string AssemblyName { get; }
    private ExchangeResourceManager(string baseName, Assembly assembly);
    private static ExchangeResourceManager();
    public virtual string get_BaseName();
    public string get_AssemblyName();
    public static ExchangeResourceManager GetResourceManager(string baseName, Assembly assembly);
    public virtual string GetString(string name);
    public virtual string GetString(string name, CultureInfo culture);
}
internal interface Microsoft.Exchange.WebServices.Auth.ILocalizedString {
    public LocalizedString LocalizedString { get; }
    public abstract virtual LocalizedString get_LocalizedString();
}
internal class Microsoft.Exchange.WebServices.Auth.LocalizedString : ValueType {
    public static LocalizedString Empty;
    private string Id;
    private Object[] Inserts;
    private ExchangeResourceManager ResourceManager;
    private LocalizedString Microsoft.Exchange.WebServices.Auth.ILocalizedString.LocalizedString { get; }
    public bool IsEmpty { get; }
    public int BaseId { get; }
    public LocalizedString(string id, ExchangeResourceManager resourceManager, Object[] inserts);
    public LocalizedString(string value);
    private LocalizedString(string format, Object[] inserts);
    private LocalizedString(SerializationInfo info, StreamingContext context);
    private static LocalizedString();
    private sealed virtual override LocalizedString Microsoft.Exchange.WebServices.Auth.ILocalizedString.get_LocalizedString();
    public bool get_IsEmpty();
    public int get_BaseId();
    public static bool op_Equality(LocalizedString s1, LocalizedString s2);
    public static bool op_Inequality(LocalizedString s1, LocalizedString s2);
    public static string op_Implicit(LocalizedString value);
    public static LocalizedString Join(object separator, Object[] value);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
    public string ToString(IFormatProvider formatProvider);
    private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LocalizedString obj);
    private static object TranslateObject(object badObject, IFormatProvider formatProvider);
}
internal static class Microsoft.Exchange.WebServices.Auth.Strings : object {
    private static Dictionary`2<UInt32, string> stringIDs;
    private static ExchangeResourceManager ResourceManager;
    public static LocalizedString MalformedUrlBadHost { get; }
    public static LocalizedString RequiresValidation { get; }
    public static LocalizedString MalformedUrl { get; }
    public static LocalizedString InvalidSet { get; }
    public static LocalizedString MetadataAccessFailure { get; }
    public static LocalizedString NotASet { get; }
    public static LocalizedString MissingUrl { get; }
    public static LocalizedString MalformedJson { get; }
    public static LocalizedString MissingField { get; }
    public static LocalizedString MalformedUrlBadScheme { get; }
    public static LocalizedString InvalidTokenSignatureException { get; }
    public static LocalizedString InvalidToken { get; }
    public static LocalizedString MalformedField { get; }
    public static LocalizedString InvalidTokenVersion { get; }
    public static LocalizedString InvalidTokenFieldCount { get; }
    public static LocalizedString NoMatchingKey { get; }
    public static LocalizedString MissingTokenVersion { get; }
    private static Strings();
    public static LocalizedString get_MalformedUrlBadHost();
    public static LocalizedString get_RequiresValidation();
    public static LocalizedString get_MalformedUrl();
    public static LocalizedString get_InvalidSet();
    public static LocalizedString get_MetadataAccessFailure();
    public static LocalizedString get_NotASet();
    public static LocalizedString get_MissingUrl();
    public static LocalizedString get_MalformedJson();
    public static LocalizedString get_MissingField();
    public static LocalizedString get_MalformedUrlBadScheme();
    public static LocalizedString get_InvalidTokenSignatureException();
    public static LocalizedString get_InvalidToken();
    public static LocalizedString get_MalformedField();
    public static LocalizedString get_InvalidTokenVersion();
    public static LocalizedString get_InvalidTokenFieldCount();
    public static LocalizedString get_NoMatchingKey();
    public static LocalizedString get_MissingTokenVersion();
    public static LocalizedString GetLocalizedString(IDs key);
}
public class Microsoft.Exchange.WebServices.Auth.Validation.AppIdentityToken : AuthToken {
    private ITokenDecoder token;
    private IMetaDocumentRetriever retriever;
    private PublicKeyInfo keyinfo;
    private string uniqueUserId;
    private Nullable`1<DateTime> expiration;
    private string version;
    private ClaimsIdentityCollection claims;
    public PublicKeyInfo PublicKeyInfo { get; }
    public string UniqueUserIdentification { get; }
    public DateTime ExpirationDate { get; }
    public string Version { get; }
    public ClaimsIdentityCollection Claims { get; }
    internal AppIdentityToken(ITokenDecoder tokenDecoder, IMetaDocumentRetriever metaDocumentRetriever);
    public PublicKeyInfo get_PublicKeyInfo();
    public string get_UniqueUserIdentification();
    public DateTime get_ExpirationDate();
    public string get_Version();
    public ClaimsIdentityCollection get_Claims();
    public void Validate(Uri extensionServiceHost);
    public void Validate(Uri extensionServiceHost, string catchedKey);
    private void ProcessToken(Uri extensionServiceHost, string key);
    private void PopulateIdentityToken(SecurityToken token, string key);
}
public abstract class Microsoft.Exchange.WebServices.Auth.Validation.AuthToken : object {
    public static AuthToken Parse(string token);
}
internal class Microsoft.Exchange.WebServices.Auth.Validation.Base64EncodedTokenDecoder : object {
    private static string VersionField;
    private static string AcceptedVersion;
    private static string MetaUrlField;
    private static string ExchangeUidField;
    private static string ThumbprintField;
    private Uri authenticationUrl;
    private String[] rawToken;
    private JsonDecoder header;
    private JsonDecoder payload;
    public Uri AuthenticationKeyUrl { get; }
    public string ExchangeUserId { get; }
    public string Version { get; }
    public string Thumbprint { get; }
    public string RawToken { get; }
    internal Base64EncodedTokenDecoder(string token);
    public sealed virtual Uri get_AuthenticationKeyUrl();
    public sealed virtual string get_ExchangeUserId();
    public sealed virtual string get_Version();
    public sealed virtual string get_Thumbprint();
    public sealed virtual string get_RawToken();
    private String[] ExtractDelimitedToken(string rawToken);
    private string DecodeSection(string section);
    private void ValidateVersion(string expectedVersion);
    private Uri ValidateMetaDocumentUrl();
}
internal class Microsoft.Exchange.WebServices.Auth.Validation.CallerIdentityTokenHandler : JsonWebSecurityTokenHandler {
    internal CallerIdentityTokenHandler(Uri extensionServiceHost, string key);
    public virtual ClaimsIdentityCollection ValidateToken(SecurityToken token);
}
internal class Microsoft.Exchange.WebServices.Auth.Validation.HttpMetaDocumentRetriever : object {
    private static HttpMetaDocumentRetriever singleton;
    internal static HttpMetaDocumentRetriever Instance { get; }
    private static HttpMetaDocumentRetriever();
    internal static HttpMetaDocumentRetriever get_Instance();
    public sealed virtual void GetData(Uri url, bool bypassCache, String& publicKeyDocument);
}
public interface Microsoft.Exchange.WebServices.Auth.Validation.IMetaDocumentRetriever {
    public abstract virtual void GetData(Uri url, bool bypassCache, String& publicKeyDocument);
}
public class Microsoft.Exchange.WebServices.Auth.Validation.InvalidTokenAudienceException : TokenValidationException {
    public InvalidTokenAudienceException(string message);
}
public class Microsoft.Exchange.WebServices.Auth.Validation.InvalidTokenFormatException : TokenValidationException {
    public InvalidTokenFormatException(string message);
}
public class Microsoft.Exchange.WebServices.Auth.Validation.InvalidTokenSignatureException : TokenValidationException {
    public InvalidTokenSignatureException(string message);
}
public class Microsoft.Exchange.WebServices.Auth.Validation.InvalidTokenVersionException : InvalidTokenFormatException {
    public InvalidTokenVersionException(string message);
}
internal interface Microsoft.Exchange.WebServices.Auth.Validation.ITokenDecoder {
    public string RawToken { get; }
    public string ExchangeUserId { get; }
    public string Version { get; }
    public string Thumbprint { get; }
    public Uri AuthenticationKeyUrl { get; }
    public abstract virtual string get_RawToken();
    public abstract virtual string get_ExchangeUserId();
    public abstract virtual string get_Version();
    public abstract virtual string get_Thumbprint();
    public abstract virtual Uri get_AuthenticationKeyUrl();
}
internal class Microsoft.Exchange.WebServices.Auth.Validation.JsonDecoder : object {
    private Dictionary`2<string, string> fields;
    private Dictionary`2<string, IList> embeddedLists;
    internal JsonDecoder(string jsonContent);
    private JsonDecoder(Dictionary`2<string, object> jsonDictionary);
    public string GetField(string name);
    public string GetField(string name, bool mustExist);
    public List`1<string> GetFields();
    public List`1<JsonDecoder> GetChildObjects(string fieldName);
    private static void RunWithJavaScriptSerializerExceptionHandler(Action action);
    private void UnpackJsonPayload(string keyPrefix, string jsonContent);
    private void UnpackJsonPayload(string keyPrefix, Dictionary`2<string, object> dictionary);
}
internal class Microsoft.Exchange.WebServices.Auth.Validation.MalformedContentException : TokenValidationException {
    public MalformedContentException(Exception innerException);
    public MalformedContentException(string message, string fieldName);
}
public class Microsoft.Exchange.WebServices.Auth.Validation.MetadataAccessException : TokenValidationException {
    public MetadataAccessException(string details);
}
internal class Microsoft.Exchange.WebServices.Auth.Validation.MissingFieldException : TokenValidationException {
    public MissingFieldException(string fieldName);
}
internal class Microsoft.Exchange.WebServices.Auth.Validation.PublicKey : object {
    public string Usage;
    public string Type;
    public string Value;
    public string Thumbprint;
    internal PublicKey(string type, string value, string usage, string thumbprint);
}
internal class Microsoft.Exchange.WebServices.Auth.Validation.PublicKeyDocumentDecoder : object {
    private static string KeysField;
    private static string KeyUsageField;
    private static string KeyThumbprintField;
    private static string KeyTypeField;
    private static string KeyValueField;
    private List`1<PublicKey> keys;
    public List`1<PublicKey> Keys { get; }
    internal PublicKeyDocumentDecoder(string publicKeyDocument);
    public List`1<PublicKey> get_Keys();
}
public class Microsoft.Exchange.WebServices.Auth.Validation.PublicKeyInfo : object {
    public string Key;
    public string Value;
    internal PublicKeyInfo(string key, string value);
}
public class Microsoft.Exchange.WebServices.Auth.Validation.TokenExpiredException : TokenValidationException {
    public TokenExpiredException(string message);
}
public class Microsoft.Exchange.WebServices.Auth.Validation.TokenRequiresValidationException : TokenValidationException {
}
public abstract class Microsoft.Exchange.WebServices.Auth.Validation.TokenValidationException : Exception {
    public TokenValidationException(string message, Exception innerException);
    public TokenValidationException(string message);
}
