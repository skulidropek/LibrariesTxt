internal class Microsoft.Extensions.ApiDescription.Tool.CommandException : Exception {
    public CommandException(string message);
    public CommandException(string message, Exception innerException);
}
internal abstract class Microsoft.Extensions.ApiDescription.Tool.Commands.CommandBase : object {
    private IConsole _console;
    [CompilerGeneratedAttribute]
private bool <IsQuiet>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVerbose>k__BackingField;
    [CompilerGeneratedAttribute]
private IReporter <Reporter>k__BackingField;
    public bool IsQuiet { get; private set; }
    public bool IsVerbose { get; private set; }
    protected IReporter Reporter { get; private set; }
    protected CommandBase(IConsole console);
    [CompilerGeneratedAttribute]
public bool get_IsQuiet();
    [CompilerGeneratedAttribute]
private void set_IsQuiet(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsVerbose();
    [CompilerGeneratedAttribute]
private void set_IsVerbose(bool value);
    [CompilerGeneratedAttribute]
protected IReporter get_Reporter();
    [CompilerGeneratedAttribute]
private void set_Reporter(IReporter value);
    public virtual void Configure(CommandLineApplication command);
    protected virtual void Validate();
    protected virtual int Execute();
}
internal class Microsoft.Extensions.ApiDescription.Tool.Commands.GetDocumentCommand : ProjectCommandBase {
    private CommandOption _fileListPath;
    private CommandOption _output;
    public GetDocumentCommand(IConsole console);
    public virtual void Configure(CommandLineApplication command);
    protected virtual void Validate();
    protected virtual int Execute();
}
public class Microsoft.Extensions.ApiDescription.Tool.Commands.GetDocumentCommandContext : object {
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileListPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReporter <Reporter>k__BackingField;
    public string AssemblyName { get; public set; }
    public string AssemblyPath { get; public set; }
    public string FileListPath { get; public set; }
    public string OutputDirectory { get; public set; }
    public string ProjectName { get; public set; }
    public IReporter Reporter { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyPath();
    [CompilerGeneratedAttribute]
public void set_AssemblyPath(string value);
    [CompilerGeneratedAttribute]
public string get_FileListPath();
    [CompilerGeneratedAttribute]
public void set_FileListPath(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public IReporter get_Reporter();
    [CompilerGeneratedAttribute]
public void set_Reporter(IReporter value);
}
internal class Microsoft.Extensions.ApiDescription.Tool.Commands.GetDocumentCommandWorker : object {
    private static string DefaultDocumentName;
    private static string DocumentService;
    private static string DotString;
    private static string InvalidFilenameString;
    private static string JsonExtension;
    private static string UnderscoreString;
    private static Char[] InvalidFilenameCharacters;
    private static Encoding UTF8EncodingWithoutBOM;
    private static string GetDocumentsMethodName;
    private static Object[] GetDocumentsArguments;
    private static Type[] GetDocumentsParameterTypes;
    private static Type GetDocumentsReturnType;
    private static string GenerateMethodName;
    private static Type[] GenerateMethodParameterTypes;
    private static Type GenerateMethodReturnType;
    private GetDocumentCommandContext _context;
    private IReporter _reporter;
    public GetDocumentCommandWorker(GetDocumentCommandContext context);
    private static GetDocumentCommandWorker();
    public int Process();
    private bool GetDocuments(IServiceProvider services);
    private string GetDocument(string documentName, string projectName, string outputDirectory, MethodInfo generateMethod, object service);
    private static string GetDocumentPath(string documentName, string projectName, string outputDirectory);
    private MethodInfo GetMethod(string methodName, Type type, Type[] parameterTypes, Type returnType);
    private object InvokeMethod(MethodInfo method, object instance, Object[] arguments);
    [CompilerGeneratedAttribute]
internal static void <Process>g__ConfigureHostBuilder|18_0(object hostBuilder);
}
internal class Microsoft.Extensions.ApiDescription.Tool.Commands.HelpCommandBase : CommandBase {
    public HelpCommandBase(IConsole console);
    public virtual void Configure(CommandLineApplication command);
}
internal abstract class Microsoft.Extensions.ApiDescription.Tool.Commands.ProjectCommandBase : HelpCommandBase {
    [CompilerGeneratedAttribute]
private CommandOption <AssemblyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <ToolsDirectory>k__BackingField;
    public CommandOption AssemblyPath { get; private set; }
    public CommandOption ProjectName { get; private set; }
    public CommandOption ToolsDirectory { get; private set; }
    public ProjectCommandBase(IConsole console);
    [CompilerGeneratedAttribute]
public CommandOption get_AssemblyPath();
    [CompilerGeneratedAttribute]
private void set_AssemblyPath(CommandOption value);
    [CompilerGeneratedAttribute]
public CommandOption get_ProjectName();
    [CompilerGeneratedAttribute]
private void set_ProjectName(CommandOption value);
    [CompilerGeneratedAttribute]
public CommandOption get_ToolsDirectory();
    [CompilerGeneratedAttribute]
private void set_ToolsDirectory(CommandOption value);
    public virtual void Configure(CommandLineApplication command);
    protected virtual void Validate();
}
internal class Microsoft.Extensions.ApiDescription.Tool.Program : ProgramBase {
    public Program(IConsole console);
    private static int Main(String[] args);
}
internal abstract class Microsoft.Extensions.ApiDescription.Tool.ProgramBase : object {
    private IConsole _console;
    private IReporter _reporter;
    public ProgramBase(IConsole console);
    protected static IConsole GetConsole();
    protected int Run(String[] args, CommandBase command, bool throwOnUnexpectedArg);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.ApiDescription.Tool.ReporterExtensions : object {
    [CompilerGeneratedAttribute]
private static bool <PrefixOutput>k__BackingField;
    public static bool PrefixOutput { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_PrefixOutput();
    [CompilerGeneratedAttribute]
public static void set_PrefixOutput(bool value);
    [ExtensionAttribute]
public static void WriteError(IReporter reporter, string message);
    [ExtensionAttribute]
public static void WriteWarning(IReporter reporter, string message);
    [ExtensionAttribute]
public static void WriteInformation(IReporter reporter, string message);
    [ExtensionAttribute]
public static void WriteVerbose(IReporter reporter, string message);
    private static string Prefix(string prefix, string value);
}
internal static class Microsoft.Extensions.ApiDescription.Tool.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string AssemblyDescription { get; }
    internal static string MissingOption { get; }
    internal static string OutputDescription { get; }
    internal static string PrefixDescription { get; }
    internal static string VerboseDescription { get; }
    internal static string ToolsDirectoryDescription { get; }
    internal static string GeneratingDocument { get; }
    internal static string MissingEntryPoint { get; }
    internal static string ServiceTypeNotFound { get; }
    internal static string MethodNotFound { get; }
    internal static string ServiceNotFound { get; }
    internal static string MethodReturnedNull { get; }
    internal static string MethodReturnTypeUnsupported { get; }
    internal static string MethodTimedOut { get; }
    internal static string MethodIsStatic { get; }
    internal static string MethodsNotFound { get; }
    internal static string WritingDocument { get; }
    internal static string MethodWroteNoContent { get; }
    internal static string CommandFullName { get; }
    internal static string FileListDescription { get; }
    internal static string ProjectDescription { get; }
    internal static string ServiceProviderNotFound { get; }
    internal static string DocumentsNotFound { get; }
    internal static string QuietAndVerboseSpecified { get; }
    internal static string QuietDescription { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_AssemblyDescription();
    internal static string get_MissingOption();
    internal static string FormatMissingOption(object p0);
    internal static string get_OutputDescription();
    internal static string get_PrefixDescription();
    internal static string get_VerboseDescription();
    internal static string get_ToolsDirectoryDescription();
    internal static string get_GeneratingDocument();
    internal static string FormatGeneratingDocument(object p0);
    internal static string get_MissingEntryPoint();
    internal static string FormatMissingEntryPoint(object p0);
    internal static string get_ServiceTypeNotFound();
    internal static string FormatServiceTypeNotFound(object p0);
    internal static string get_MethodNotFound();
    internal static string FormatMethodNotFound(object p0, object p1);
    internal static string get_ServiceNotFound();
    internal static string FormatServiceNotFound(object p0);
    internal static string get_MethodReturnedNull();
    internal static string FormatMethodReturnedNull(object p0, object p1, object p2);
    internal static string get_MethodReturnTypeUnsupported();
    internal static string FormatMethodReturnTypeUnsupported(object p0, object p1, object p2, object p3);
    internal static string get_MethodTimedOut();
    internal static string FormatMethodTimedOut(object p0, object p1, object p2);
    internal static string get_MethodIsStatic();
    internal static string FormatMethodIsStatic(object p0, object p1);
    internal static string get_MethodsNotFound();
    internal static string FormatMethodsNotFound(object p0, object p1, object p2, object p3);
    internal static string get_WritingDocument();
    internal static string FormatWritingDocument(object p0, object p1);
    internal static string get_MethodWroteNoContent();
    internal static string FormatMethodWroteNoContent(object p0, object p1, object p2);
    internal static string get_CommandFullName();
    internal static string get_FileListDescription();
    internal static string get_ProjectDescription();
    internal static string get_ServiceProviderNotFound();
    internal static string FormatServiceProviderNotFound(object p0, object p1, object p2, object p3, object p4);
    internal static string get_DocumentsNotFound();
    internal static string get_QuietAndVerboseSpecified();
    internal static string get_QuietDescription();
}
internal class Microsoft.Extensions.CommandLineUtils.AnsiConsole : object {
    private int _boldRecursion;
    private bool _useConsoleColor;
    [CompilerGeneratedAttribute]
private TextWriter <Writer>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <OriginalForegroundColor>k__BackingField;
    public TextWriter Writer { get; }
    public ConsoleColor OriginalForegroundColor { get; }
    private AnsiConsole(TextWriter writer, bool useConsoleColor);
    public static AnsiConsole GetOutput(bool useConsoleColor);
    public static AnsiConsole GetError(bool useConsoleColor);
    [CompilerGeneratedAttribute]
public TextWriter get_Writer();
    [CompilerGeneratedAttribute]
public ConsoleColor get_OriginalForegroundColor();
    private static void SetColor(ConsoleColor color);
    private void SetBold(bool bold);
    public void WriteLine(string message);
}
internal class Microsoft.Extensions.CommandLineUtils.CommandArgument : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultipleValues>k__BackingField;
    public string Name { get; public set; }
    public bool ShowInHelpText { get; public set; }
    public string Description { get; public set; }
    public List`1<string> Values { get; private set; }
    public bool MultipleValues { get; public set; }
    public string Value { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_MultipleValues();
    [CompilerGeneratedAttribute]
public void set_MultipleValues(bool value);
    public string get_Value();
}
internal class Microsoft.Extensions.CommandLineUtils.CommandLineApplication : object {
    private bool _throwOnUnexpectedArg;
    private bool _continueAfterUnexpectedArg;
    private bool _treatUnmatchedOptionsAsArguments;
    [CompilerGeneratedAttribute]
private CommandLineApplication <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtendedHelpText>k__BackingField;
    public List`1<CommandOption> Options;
    [CompilerGeneratedAttribute]
private CommandOption <OptionHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <OptionVersion>k__BackingField;
    public List`1<CommandArgument> Arguments;
    public List`1<string> RemainingArguments;
    [CompilerGeneratedAttribute]
private bool <IsShowingInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<int> <Invoke>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <LongVersionGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <ShortVersionGetter>k__BackingField;
    public List`1<CommandLineApplication> Commands;
    [CompilerGeneratedAttribute]
private bool <AllowArgumentSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Out>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Error>k__BackingField;
    public CommandLineApplication Parent { get; public set; }
    public string Name { get; public set; }
    public string FullName { get; public set; }
    public string Syntax { get; public set; }
    public string Description { get; public set; }
    public bool ShowInHelpText { get; public set; }
    public string ExtendedHelpText { get; public set; }
    public CommandOption OptionHelp { get; private set; }
    public CommandOption OptionVersion { get; private set; }
    public bool IsShowingInformation { get; private set; }
    public Func`1<int> Invoke { get; public set; }
    public Func`1<string> LongVersionGetter { get; public set; }
    public Func`1<string> ShortVersionGetter { get; public set; }
    public bool AllowArgumentSeparator { get; public set; }
    public TextWriter Out { get; public set; }
    public TextWriter Error { get; public set; }
    public CommandLineApplication(bool throwOnUnexpectedArg, bool continueAfterUnexpectedArg, bool treatUnmatchedOptionsAsArguments);
    [CompilerGeneratedAttribute]
public CommandLineApplication get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(CommandLineApplication value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public void set_Syntax(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [CompilerGeneratedAttribute]
public string get_ExtendedHelpText();
    [CompilerGeneratedAttribute]
public void set_ExtendedHelpText(string value);
    [CompilerGeneratedAttribute]
public CommandOption get_OptionHelp();
    [CompilerGeneratedAttribute]
private void set_OptionHelp(CommandOption value);
    [CompilerGeneratedAttribute]
public CommandOption get_OptionVersion();
    [CompilerGeneratedAttribute]
private void set_OptionVersion(CommandOption value);
    [CompilerGeneratedAttribute]
public bool get_IsShowingInformation();
    [CompilerGeneratedAttribute]
private void set_IsShowingInformation(bool value);
    [CompilerGeneratedAttribute]
public Func`1<int> get_Invoke();
    [CompilerGeneratedAttribute]
public void set_Invoke(Func`1<int> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_LongVersionGetter();
    [CompilerGeneratedAttribute]
public void set_LongVersionGetter(Func`1<string> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_ShortVersionGetter();
    [CompilerGeneratedAttribute]
public void set_ShortVersionGetter(Func`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_AllowArgumentSeparator();
    [CompilerGeneratedAttribute]
public void set_AllowArgumentSeparator(bool value);
    [CompilerGeneratedAttribute]
public TextWriter get_Out();
    [CompilerGeneratedAttribute]
public void set_Out(TextWriter value);
    [CompilerGeneratedAttribute]
public TextWriter get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(TextWriter value);
    public IEnumerable`1<CommandOption> GetOptions();
    public CommandLineApplication Command(string name, Action`1<CommandLineApplication> configuration, bool throwOnUnexpectedArg);
    public CommandOption Option(string template, string description, CommandOptionType optionType);
    public CommandOption Option(string template, string description, CommandOptionType optionType, bool inherited);
    public CommandOption Option(string template, string description, CommandOptionType optionType, Action`1<CommandOption> configuration);
    public CommandOption Option(string template, string description, CommandOptionType optionType, Action`1<CommandOption> configuration, bool inherited);
    public CommandArgument Argument(string name, string description, bool multipleValues);
    public CommandArgument Argument(string name, string description, Action`1<CommandArgument> configuration, bool multipleValues);
    public void OnExecute(Func`1<int> invoke);
    public void OnExecute(Func`1<Task`1<int>> invoke);
    public int Execute(String[] args);
    public CommandOption HelpOption(string template);
    public CommandOption VersionOption(string template, string shortFormVersion, string longFormVersion);
    public CommandOption VersionOption(string template, Func`1<string> shortFormVersionGetter, Func`1<string> longFormVersionGetter);
    public void ShowHint();
    public void ShowHelp(string commandName);
    public string GetHelpText(string commandName);
    public void ShowVersion();
    public string GetFullNameAndVersion();
    public void ShowRootCommandFullNameAndVersion();
    private bool HandleUnexpectedArg(CommandLineApplication command, String[] args, int index, string argTypeName, bool ignoreContinueAfterUnexpectedArg);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.CommandLineUtils.CommandLineApplicationExtensions : object {
    [ExtensionAttribute]
public static CommandOption HelpOption(CommandLineApplication app);
    [ExtensionAttribute]
public static CommandOption VerboseOption(CommandLineApplication app);
    [ExtensionAttribute]
public static void OnExecute(CommandLineApplication app, Action action);
    [ExtensionAttribute]
public static CommandOption Option(CommandLineApplication command, string template, string description);
    [ExtensionAttribute]
public static void VersionOptionFromAssemblyAttributes(CommandLineApplication app);
    [ExtensionAttribute]
public static void VersionOptionFromAssemblyAttributes(CommandLineApplication app, Assembly assembly);
    private static string GetInformationalVersion(Assembly assembly);
}
internal class Microsoft.Extensions.CommandLineUtils.CommandOption : object {
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LongName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SymbolName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOptionType <OptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inherited>k__BackingField;
    public string Template { get; public set; }
    public string ShortName { get; public set; }
    public string LongName { get; public set; }
    public string SymbolName { get; public set; }
    public string ValueName { get; public set; }
    public string Description { get; public set; }
    public List`1<string> Values { get; private set; }
    public CommandOptionType OptionType { get; private set; }
    public bool ShowInHelpText { get; public set; }
    public bool Inherited { get; public set; }
    public CommandOption(string template, CommandOptionType optionType);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public string get_LongName();
    [CompilerGeneratedAttribute]
public void set_LongName(string value);
    [CompilerGeneratedAttribute]
public string get_SymbolName();
    [CompilerGeneratedAttribute]
public void set_SymbolName(string value);
    [CompilerGeneratedAttribute]
public string get_ValueName();
    [CompilerGeneratedAttribute]
public void set_ValueName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(List`1<string> value);
    [CompilerGeneratedAttribute]
public CommandOptionType get_OptionType();
    [CompilerGeneratedAttribute]
private void set_OptionType(CommandOptionType value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [CompilerGeneratedAttribute]
public bool get_Inherited();
    [CompilerGeneratedAttribute]
public void set_Inherited(bool value);
    public bool TryParse(string value);
    public bool HasValue();
    public string Value();
    private static bool IsEnglishLetter(char c);
}
internal enum Microsoft.Extensions.CommandLineUtils.CommandOptionType : Enum {
    public int value__;
    public static CommandOptionType MultipleValue;
    public static CommandOptionType SingleValue;
    public static CommandOptionType NoValue;
}
internal class Microsoft.Extensions.CommandLineUtils.CommandParsingException : Exception {
    [CompilerGeneratedAttribute]
private CommandLineApplication <Command>k__BackingField;
    public CommandLineApplication Command { get; }
    public CommandParsingException(CommandLineApplication command, string message);
    [CompilerGeneratedAttribute]
public CommandLineApplication get_Command();
}
internal static class Microsoft.Extensions.CommandLineUtils.DotNetMuxer : object {
    private static string MuxerName;
    [CompilerGeneratedAttribute]
private static string <MuxerPath>k__BackingField;
    public static string MuxerPath { get; }
    private static DotNetMuxer();
    [CompilerGeneratedAttribute]
public static string get_MuxerPath();
    public static string MuxerPathOrDefault();
    internal static string TryFindMuxerPath(string mainModule);
}
internal class Microsoft.Extensions.Hosting.HostFactoryResolver : object {
    private static BindingFlags DeclaredOnlyLookup;
    public static string BuildWebHost;
    public static string CreateWebHostBuilder;
    public static string CreateHostBuilder;
    private static string TimeoutEnvironmentKey;
    private static TimeSpan s_defaultWaitTimeout;
    private static HostFactoryResolver();
    private static TimeSpan SetupDefaultTimeout();
    public static Func`2<String[], TWebHost> ResolveWebHostFactory(Assembly assembly);
    public static Func`2<String[], TWebHostBuilder> ResolveWebHostBuilderFactory(Assembly assembly);
    public static Func`2<String[], THostBuilder> ResolveHostBuilderFactory(Assembly assembly);
    public static Func`2<String[], object> ResolveHostFactory(Assembly assembly, Nullable`1<TimeSpan> waitTimeout, bool stopApplication, Action`1<object> configureHostBuilder, Action`1<Exception> entrypointCompleted);
    private static Func`2<String[], T> ResolveFactory(Assembly assembly, string name);
    private static bool IsFactory(MethodInfo factory);
    public static Func`2<String[], IServiceProvider> ResolveServiceProviderFactory(Assembly assembly, Nullable`1<TimeSpan> waitTimeout);
    private static object Build(object builder);
    private static IServiceProvider GetServiceProvider(object host);
    [CompilerGeneratedAttribute]
internal static bool <ResolveServiceProviderFactory>g__IsApplicationNameArg|13_4(string arg);
}
public static class Microsoft.Extensions.Tools.Internal.CliContext : object {
    public static bool IsGlobalVerbose();
}
public class Microsoft.Extensions.Tools.Internal.ConsoleReporter : object {
    private object _writeLock;
    [CompilerGeneratedAttribute]
private IConsole <Console>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVerbose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQuiet>k__BackingField;
    protected IConsole Console { get; }
    public bool IsVerbose { get; public set; }
    public bool IsQuiet { get; public set; }
    public ConsoleReporter(IConsole console);
    public ConsoleReporter(IConsole console, bool verbose, bool quiet);
    [CompilerGeneratedAttribute]
protected IConsole get_Console();
    [CompilerGeneratedAttribute]
public bool get_IsVerbose();
    [CompilerGeneratedAttribute]
public void set_IsVerbose(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsQuiet();
    [CompilerGeneratedAttribute]
public void set_IsQuiet(bool value);
    protected virtual void WriteLine(TextWriter writer, string message, Nullable`1<ConsoleColor> color);
    public virtual void Error(string message);
    public virtual void Warn(string message);
    public virtual void Output(string message);
    public virtual void Verbose(string message);
}
public static class Microsoft.Extensions.Tools.Internal.DebugHelper : object {
    [ConditionalAttribute("DEBUG")]
public static void HandleDebugSwitch(String[]& args);
}
internal static class Microsoft.Extensions.Tools.Internal.Ensure : object {
    public static T NotNull(T obj, string paramName);
    public static string NotNullOrEmpty(string obj, string paramName);
}
public interface Microsoft.Extensions.Tools.Internal.IConsole {
    public TextWriter Out { get; }
    public TextWriter Error { get; }
    public TextReader In { get; }
    public bool IsInputRedirected { get; }
    public bool IsOutputRedirected { get; }
    public bool IsErrorRedirected { get; }
    public ConsoleColor ForegroundColor { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_CancelKeyPress(ConsoleCancelEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CancelKeyPress(ConsoleCancelEventHandler value);
    public abstract virtual TextWriter get_Out();
    public abstract virtual TextWriter get_Error();
    public abstract virtual TextReader get_In();
    public abstract virtual bool get_IsInputRedirected();
    public abstract virtual bool get_IsOutputRedirected();
    public abstract virtual bool get_IsErrorRedirected();
    public abstract virtual ConsoleColor get_ForegroundColor();
    public abstract virtual void set_ForegroundColor(ConsoleColor value);
    public abstract virtual void ResetColor();
}
public interface Microsoft.Extensions.Tools.Internal.IReporter {
    public abstract virtual void Verbose(string message);
    public abstract virtual void Output(string message);
    public abstract virtual void Warn(string message);
    public abstract virtual void Error(string message);
}
public class Microsoft.Extensions.Tools.Internal.NullReporter : object {
    [CompilerGeneratedAttribute]
private static IReporter <Singleton>k__BackingField;
    public static IReporter Singleton { get; }
    private static NullReporter();
    [CompilerGeneratedAttribute]
public static IReporter get_Singleton();
    public sealed virtual void Verbose(string message);
    public sealed virtual void Output(string message);
    public sealed virtual void Warn(string message);
    public sealed virtual void Error(string message);
}
public class Microsoft.Extensions.Tools.Internal.PhysicalConsole : object {
    [CompilerGeneratedAttribute]
private static IConsole <Singleton>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleCancelEventHandler CancelKeyPress;
    public static IConsole Singleton { get; }
    public TextWriter Error { get; }
    public TextReader In { get; }
    public TextWriter Out { get; }
    public bool IsInputRedirected { get; }
    public bool IsOutputRedirected { get; }
    public bool IsErrorRedirected { get; }
    public ConsoleColor ForegroundColor { get; public set; }
    private static PhysicalConsole();
    [CompilerGeneratedAttribute]
public static IConsole get_Singleton();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CancelKeyPress(ConsoleCancelEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CancelKeyPress(ConsoleCancelEventHandler value);
    public sealed virtual TextWriter get_Error();
    public sealed virtual TextReader get_In();
    public sealed virtual TextWriter get_Out();
    public sealed virtual bool get_IsInputRedirected();
    public sealed virtual bool get_IsOutputRedirected();
    public sealed virtual bool get_IsErrorRedirected();
    public sealed virtual ConsoleColor get_ForegroundColor();
    public sealed virtual void set_ForegroundColor(ConsoleColor value);
    public sealed virtual void ResetColor();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(object o, ConsoleCancelEventArgs e);
}
