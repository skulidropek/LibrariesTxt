internal static class Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper : object {
    [NullableContextAttribute("2")]
public static void ThrowIfNull(object argument, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Shared.ObjectDisposedThrowHelper : object {
    public static void ThrowIf(bool condition, object instance);
    public static void ThrowIf(bool condition, Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache : object {
    private static string SetScript;
    private static string SetScriptPreExtendedSetCommand;
    private static string AbsoluteExpirationKey;
    private static string SlidingExpirationKey;
    private static string DataKey;
    private static RedisValue[] _hashMembersAbsoluteExpirationSlidingExpirationData;
    private static RedisValue[] _hashMembersAbsoluteExpirationSlidingExpiration;
    private static long NotPresent;
    private static Version ServerVersionWithExtendedSetCommand;
    private IDatabase modreq(System.Runtime.CompilerServices.IsVolatile) _cache;
    private bool _disposed;
    private string _setScript;
    private RedisCacheOptions _options;
    private RedisKey _instancePrefix;
    private ILogger _logger;
    private SemaphoreSlim _connectionLock;
    private long _lastConnectTicks;
    private long _firstErrorTimeTicks;
    private long _previousErrorTimeTicks;
    private TimeSpan ReconnectMinInterval;
    private TimeSpan ReconnectErrorThreshold;
    public RedisCache(IOptions`1<RedisCacheOptions> optionsAccessor);
    internal RedisCache(IOptions`1<RedisCacheOptions> optionsAccessor, ILogger logger);
    private static RedisCache();
    private static RedisValue[] GetHashFields(bool getData);
    private static DateTimeOffset ReadTimeTicks(Int64& field);
    private static void WriteTimeTicks(Int64& field, DateTimeOffset value);
    public sealed virtual Byte[] Get(string key);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache/<GetAsync>d__27")]
public sealed virtual Task`1<Byte[]> GetAsync(string key, CancellationToken token);
    public sealed virtual void Set(string key, Byte[] value, DistributedCacheEntryOptions options);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache/<SetAsync>d__29")]
public sealed virtual Task SetAsync(string key, Byte[] value, DistributedCacheEntryOptions options, CancellationToken token);
    public sealed virtual void Refresh(string key);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache/<RefreshAsync>d__31")]
public sealed virtual Task RefreshAsync(string key, CancellationToken token);
    [MemberNotNullAttribute("_cache")]
private IDatabase Connect();
    private ValueTask`1<IDatabase> ConnectAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache/<ConnectSlowAsync>d__34")]
private ValueTask`1<IDatabase> ConnectSlowAsync(CancellationToken token);
    private void PrepareConnection(IConnectionMultiplexer connection);
    private void ValidateServerFeatures(IConnectionMultiplexer connection);
    private void TryRegisterProfiler(IConnectionMultiplexer connection);
    private void TryAddSuffix(IConnectionMultiplexer connection);
    private Byte[] GetAndRefresh(string key, bool getData);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache/<GetAndRefreshAsync>d__40")]
private Task`1<Byte[]> GetAndRefreshAsync(string key, bool getData, CancellationToken token);
    public sealed virtual void Remove(string key);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache/<RemoveAsync>d__42")]
public sealed virtual Task RemoveAsync(string key, CancellationToken token);
    private static void MapMetadata(RedisValue[] results, Nullable`1& absoluteExpiration, Nullable`1& slidingExpiration);
    private void Refresh(IDatabase cache, string key, Nullable`1<DateTimeOffset> absExpr, Nullable`1<TimeSpan> sldExpr);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Caching.StackExchangeRedis.RedisCache/<RefreshAsync>d__45")]
private Task RefreshAsync(IDatabase cache, string key, Nullable`1<DateTimeOffset> absExpr, Nullable`1<TimeSpan> sldExpr, CancellationToken token);
    private static Nullable`1<long> GetExpirationInSeconds(DateTimeOffset creationTime, Nullable`1<DateTimeOffset> absoluteExpiration, DistributedCacheEntryOptions options);
    private static Nullable`1<DateTimeOffset> GetAbsoluteExpiration(DateTimeOffset creationTime, DistributedCacheEntryOptions options);
    public sealed virtual void Dispose();
    private void CheckDisposed();
    private void OnRedisError(Exception exception, IDatabase cache);
    private static void ReleaseConnection(IDatabase cache);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Caching.StackExchangeRedis.RedisCacheImpl : RedisCache {
    public RedisCacheImpl(IOptions`1<RedisCacheOptions> optionsAccessor, ILogger`1<RedisCache> logger);
    public RedisCacheImpl(IOptions`1<RedisCacheOptions> optionsAccessor);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Caching.StackExchangeRedis.RedisCacheOptions : object {
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfigurationOptions <ConfigurationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<Task`1<IConnectionMultiplexer>> <ConnectionMultiplexerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<ProfilingSession> <ProfilingSession>k__BackingField;
    private Nullable`1<bool> _useForceReconnect;
    public string Configuration { get; public set; }
    public ConfigurationOptions ConfigurationOptions { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<Task`1<IConnectionMultiplexer>> ConnectionMultiplexerFactory { get; public set; }
    public string InstanceName { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`1<ProfilingSession> ProfilingSession { get; public set; }
    [NullableAttribute("1")]
private RedisCacheOptions Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Caching.StackExchangeRedis.RedisCacheOptions>.Value { get; }
    internal bool UseForceReconnect { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public ConfigurationOptions get_ConfigurationOptions();
    [CompilerGeneratedAttribute]
public void set_ConfigurationOptions(ConfigurationOptions value);
    [CompilerGeneratedAttribute]
public Func`1<Task`1<IConnectionMultiplexer>> get_ConnectionMultiplexerFactory();
    [CompilerGeneratedAttribute]
public void set_ConnectionMultiplexerFactory(Func`1<Task`1<IConnectionMultiplexer>> value);
    [CompilerGeneratedAttribute]
public string get_InstanceName();
    [CompilerGeneratedAttribute]
public void set_InstanceName(string value);
    [CompilerGeneratedAttribute]
public Func`1<ProfilingSession> get_ProfilingSession();
    [CompilerGeneratedAttribute]
public void set_ProfilingSession(Func`1<ProfilingSession> value);
    private sealed virtual override RedisCacheOptions Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Caching.StackExchangeRedis.RedisCacheOptions>.get_Value();
    internal bool get_UseForceReconnect();
    internal void set_UseForceReconnect(bool value);
    [NullableContextAttribute("1")]
internal ConfigurationOptions GetConfiguredOptions();
    [CompilerGeneratedAttribute]
internal static bool <get_UseForceReconnect>g__GetDefaultValue|24_0();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.StackExchangeRedisCacheServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddStackExchangeRedisCache(IServiceCollection services, Action`1<RedisCacheOptions> setupAction);
}
