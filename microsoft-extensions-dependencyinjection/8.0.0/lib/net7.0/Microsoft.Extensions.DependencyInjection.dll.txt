internal static class FxResources.Microsoft.Extensions.DependencyInjection.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.Extensions.DependencyInjection.CallSiteJsonFormatter : CallSiteVisitor`2<CallSiteFormatterContext, object> {
    internal static CallSiteJsonFormatter Instance;
    private static CallSiteJsonFormatter();
    public string Format(ServiceCallSite callSite);
    protected virtual object VisitConstructor(ConstructorCallSite constructorCallSite, CallSiteFormatterContext argument);
    protected virtual object VisitCallSiteMain(ServiceCallSite callSite, CallSiteFormatterContext argument);
    protected virtual object VisitConstant(ConstantCallSite constantCallSite, CallSiteFormatterContext argument);
    protected virtual object VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, CallSiteFormatterContext argument);
    protected virtual object VisitIEnumerable(IEnumerableCallSite enumerableCallSite, CallSiteFormatterContext argument);
    protected virtual object VisitFactory(FactoryCallSite factoryCallSite, CallSiteFormatterContext argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.DependencyInjection.DefaultServiceProviderFactory : object {
    private ServiceProviderOptions _options;
    public DefaultServiceProviderFactory(ServiceProviderOptions options);
    public sealed virtual IServiceCollection CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(IServiceCollection containerBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[EventSourceAttribute]
internal class Microsoft.Extensions.DependencyInjection.DependencyInjectionEventSource : EventSource {
    public static DependencyInjectionEventSource Log;
    private static int MaxChunkSize;
    private List`1<WeakReference`1<ServiceProvider>> _providers;
    private static DependencyInjectionEventSource();
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
[EventAttribute("1")]
private void CallSiteBuilt(string serviceType, string callSite, int chunkIndex, int chunkCount, int serviceProviderHashCode);
    [EventAttribute("2")]
public void ServiceResolved(string serviceType, int serviceProviderHashCode);
    [EventAttribute("3")]
public void ExpressionTreeGenerated(string serviceType, int nodeCount, int serviceProviderHashCode);
    [EventAttribute("4")]
public void DynamicMethodBuilt(string serviceType, int methodSize, int serviceProviderHashCode);
    [EventAttribute("5")]
public void ScopeDisposed(int serviceProviderHashCode, int scopedServicesResolved, int disposableServices);
    [NullableContextAttribute("2")]
[EventAttribute("6")]
public void ServiceRealizationFailed(string exceptionMessage, int serviceProviderHashCode);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
[EventAttribute("7")]
private void ServiceProviderBuilt(int serviceProviderHashCode, int singletonServices, int scopedServices, int transientServices, int closedGenericsServices, int openGenericsServices);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
[EventAttribute("8")]
private void ServiceProviderDescriptors(int serviceProviderHashCode, string descriptors, int chunkIndex, int chunkCount);
    [NonEventAttribute]
public void ServiceResolved(ServiceProvider provider, Type serviceType);
    [NonEventAttribute]
public void CallSiteBuilt(ServiceProvider provider, Type serviceType, ServiceCallSite callSite);
    [NonEventAttribute]
public void DynamicMethodBuilt(ServiceProvider provider, Type serviceType, int methodSize);
    [NonEventAttribute]
public void ServiceRealizationFailed(Exception exception, int serviceProviderHashCode);
    [NonEventAttribute]
public void ServiceProviderBuilt(ServiceProvider provider);
    [NonEventAttribute]
public void ServiceProviderDisposed(ServiceProvider provider);
    [NonEventAttribute]
private void WriteServiceProviderBuilt(ServiceProvider provider);
    [NonEventAttribute]
private static void AppendServiceDescriptor(StringBuilder builder, ServiceDescriptor descriptor);
    protected virtual void OnEventCommand(EventCommandEventArgs command);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.DependencyInjection.DependencyInjectionEventSourceExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ExpressionTreeGenerated(DependencyInjectionEventSource source, ServiceProvider provider, Type serviceType, Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions : object {
    [ExtensionAttribute]
public static ServiceProvider BuildServiceProvider(IServiceCollection services);
    [ExtensionAttribute]
public static ServiceProvider BuildServiceProvider(IServiceCollection services, bool validateScopes);
    [ExtensionAttribute]
public static ServiceProvider BuildServiceProvider(IServiceCollection services, ServiceProviderOptions options);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain : object {
    private Dictionary`2<ServiceIdentifier, ChainItemInfo> _callSiteChain;
    public void CheckCircularDependency(ServiceIdentifier serviceIdentifier);
    public void Remove(ServiceIdentifier serviceIdentifier);
    [NullableContextAttribute("2")]
public void Add(ServiceIdentifier serviceIdentifier, Type implementationType);
    private string CreateCircularDependencyExceptionMessage(ServiceIdentifier serviceIdentifier);
    private void AppendResolutionPath(StringBuilder builder, ServiceIdentifier currentlyResolving);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory : object {
    private static int DefaultSlot;
    private ServiceDescriptor[] _descriptors;
    private ConcurrentDictionary`2<ServiceCacheKey, ServiceCallSite> _callSiteCache;
    private Dictionary`2<ServiceIdentifier, ServiceDescriptorCacheItem> _descriptorLookup;
    private ConcurrentDictionary`2<ServiceIdentifier, object> _callSiteLocks;
    private StackGuard _stackGuard;
    internal ServiceDescriptor[] Descriptors { get; }
    public CallSiteFactory(ICollection`1<ServiceDescriptor> descriptors);
    internal ServiceDescriptor[] get_Descriptors();
    private void Populate();
    private static void ValidateTrimmingAnnotations(Type serviceType, Type[] serviceTypeGenericArguments, Type implementationType, Type[] implementationTypeGenericArguments);
    private static DynamicallyAccessedMemberTypes GetDynamicallyAccessedMemberTypes(Type serviceGenericType);
    private static bool AreCompatible(DynamicallyAccessedMemberTypes serviceDynamicallyAccessedMembers, DynamicallyAccessedMemberTypes implementationDynamicallyAccessedMembers);
    internal Nullable`1<int> GetSlot(ServiceDescriptor serviceDescriptor);
    internal ServiceCallSite GetCallSite(ServiceIdentifier serviceIdentifier, CallSiteChain callSiteChain);
    internal ServiceCallSite GetCallSite(ServiceDescriptor serviceDescriptor, CallSiteChain callSiteChain);
    private ServiceCallSite CreateCallSite(ServiceIdentifier serviceIdentifier, CallSiteChain callSiteChain);
    private ServiceCallSite TryCreateExact(ServiceIdentifier serviceIdentifier, CallSiteChain callSiteChain);
    private ServiceCallSite TryCreateOpenGeneric(ServiceIdentifier serviceIdentifier, CallSiteChain callSiteChain);
    private ServiceCallSite TryCreateEnumerable(ServiceIdentifier serviceIdentifier, CallSiteChain callSiteChain);
    private static CallSiteResultCacheLocation GetCommonCacheLocation(CallSiteResultCacheLocation locationA, CallSiteResultCacheLocation locationB);
    private ServiceCallSite TryCreateExact(ServiceDescriptor descriptor, ServiceIdentifier serviceIdentifier, CallSiteChain callSiteChain, int slot);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2055:MakeGenericType")]
[UnconditionalSuppressMessageAttribute("AotAnalysis", "IL3050:RequiresDynamicCode")]
private ServiceCallSite TryCreateOpenGeneric(ServiceDescriptor descriptor, ServiceIdentifier serviceIdentifier, CallSiteChain callSiteChain, int slot, bool throwOnConstraintViolation);
    private ConstructorCallSite CreateConstructorCallSite(ResultCache lifetime, ServiceIdentifier serviceIdentifier, Type implementationType, CallSiteChain callSiteChain);
    private ServiceCallSite[] CreateArgumentCallSites(ServiceIdentifier serviceIdentifier, Type implementationType, CallSiteChain callSiteChain, ParameterInfo[] parameters, bool throwIfCallSiteNotFound);
    private static void VerifyOpenGenericAotCompatibility(Type serviceType, Type[] genericTypeArguments);
    public void Add(ServiceIdentifier serviceIdentifier, ServiceCallSite serviceCallSite);
    public sealed virtual bool IsService(Type serviceType);
    public sealed virtual bool IsKeyedService(Type serviceType, object key);
    internal bool IsService(ServiceIdentifier serviceIdentifier);
    private static bool KeysMatch(object key1, object key2);
    [CompilerGeneratedAttribute]
internal static void <TryCreateEnumerable>g__AddCallSite|19_1(ServiceCallSite callSite, int index, <>c__DisplayClass19_0& , <>c__DisplayClass19_1& );
}
internal enum Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteKind : Enum {
    public int value__;
    public static CallSiteKind Factory;
    public static CallSiteKind Constructor;
    public static CallSiteKind Constant;
    public static CallSiteKind IEnumerable;
    public static CallSiteKind ServiceProvider;
}
internal enum Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteResultCacheLocation : Enum {
    public int value__;
    public static CallSiteResultCacheLocation Root;
    public static CallSiteResultCacheLocation Scope;
    public static CallSiteResultCacheLocation Dispose;
    public static CallSiteResultCacheLocation None;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver : CallSiteVisitor`2<RuntimeResolverContext, object> {
    [CompilerGeneratedAttribute]
private static CallSiteRuntimeResolver <Instance>k__BackingField;
    public static CallSiteRuntimeResolver Instance { get; }
    private static CallSiteRuntimeResolver();
    [CompilerGeneratedAttribute]
public static CallSiteRuntimeResolver get_Instance();
    public object Resolve(ServiceCallSite callSite, ServiceProviderEngineScope scope);
    protected virtual object VisitDisposeCache(ServiceCallSite transientCallSite, RuntimeResolverContext context);
    protected virtual object VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context);
    protected virtual object VisitRootCache(ServiceCallSite callSite, RuntimeResolverContext context);
    protected virtual object VisitScopeCache(ServiceCallSite callSite, RuntimeResolverContext context);
    private object VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType);
    protected virtual object VisitConstant(ConstantCallSite constantCallSite, RuntimeResolverContext context);
    protected virtual object VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, RuntimeResolverContext context);
    protected virtual object VisitIEnumerable(IEnumerableCallSite enumerableCallSite, RuntimeResolverContext context);
    protected virtual object VisitFactory(FactoryCallSite factoryCallSite, RuntimeResolverContext context);
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("AotAnalysis", "IL3050:RequiresDynamicCode")]
internal static Array <VisitIEnumerable>g__CreateArray|12_0(Type elementType, int length);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteValidator : CallSiteVisitor`2<CallSiteValidatorState, Type> {
    private ConcurrentDictionary`2<ServiceCacheKey, Type> _scopedServices;
    public void ValidateCallSite(ServiceCallSite callSite);
    public void ValidateResolution(ServiceCallSite callSite, IServiceScope scope, IServiceScope rootScope);
    protected virtual Type VisitConstructor(ConstructorCallSite constructorCallSite, CallSiteValidatorState state);
    protected virtual Type VisitIEnumerable(IEnumerableCallSite enumerableCallSite, CallSiteValidatorState state);
    protected virtual Type VisitRootCache(ServiceCallSite singletonCallSite, CallSiteValidatorState state);
    protected virtual Type VisitScopeCache(ServiceCallSite scopedCallSite, CallSiteValidatorState state);
    protected virtual Type VisitConstant(ConstantCallSite constantCallSite, CallSiteValidatorState state);
    protected virtual Type VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, CallSiteValidatorState state);
    protected virtual Type VisitFactory(FactoryCallSite factoryCallSite, CallSiteValidatorState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2 : object {
    private StackGuard _stackGuard;
    protected virtual TResult VisitCallSite(ServiceCallSite callSite, TArgument argument);
    protected virtual TResult VisitCallSiteMain(ServiceCallSite callSite, TArgument argument);
    protected virtual TResult VisitNoCache(ServiceCallSite callSite, TArgument argument);
    protected virtual TResult VisitDisposeCache(ServiceCallSite callSite, TArgument argument);
    protected virtual TResult VisitRootCache(ServiceCallSite callSite, TArgument argument);
    protected virtual TResult VisitScopeCache(ServiceCallSite callSite, TArgument argument);
    protected abstract virtual TResult VisitConstructor(ConstructorCallSite constructorCallSite, TArgument argument);
    protected abstract virtual TResult VisitConstant(ConstantCallSite constantCallSite, TArgument argument);
    protected abstract virtual TResult VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, TArgument argument);
    protected abstract virtual TResult VisitIEnumerable(IEnumerableCallSite enumerableCallSite, TArgument argument);
    protected abstract virtual TResult VisitFactory(FactoryCallSite factoryCallSite, TArgument argument);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Extensions.DependencyInjection.ServiceLookup.CompiledServiceProviderEngine : ServiceProviderEngine {
    [CompilerGeneratedAttribute]
private ILEmitResolverBuilder <ResolverBuilder>k__BackingField;
    public ILEmitResolverBuilder ResolverBuilder { get; }
    [RequiresDynamicCodeAttribute("Creates DynamicMethods")]
public CompiledServiceProviderEngine(ServiceProvider provider);
    [CompilerGeneratedAttribute]
public ILEmitResolverBuilder get_ResolverBuilder();
    public virtual Func`2<ServiceProviderEngineScope, object> RealizeService(ServiceCallSite callSite);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstantCallSite : ServiceCallSite {
    private Type _serviceType;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    [NullableAttribute("2")]
internal object DefaultValue { get; }
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public ConstantCallSite(Type serviceType, object defaultValue);
    [NullableContextAttribute("2")]
internal object get_DefaultValue();
    public virtual Type get_ServiceType();
    public virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public virtual CallSiteKind get_Kind();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite : ServiceCallSite {
    [CompilerGeneratedAttribute]
private ConstructorInfo <ConstructorInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceCallSite[] <ParameterCallSites>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    internal ConstructorInfo ConstructorInfo { get; }
    internal ServiceCallSite[] ParameterCallSites { get; }
    public Type ServiceType { get; }
    [NullableAttribute("2")]
public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public ConstructorCallSite(ResultCache cache, Type serviceType, ConstructorInfo constructorInfo);
    public ConstructorCallSite(ResultCache cache, Type serviceType, ConstructorInfo constructorInfo, ServiceCallSite[] parameterCallSites);
    [CompilerGeneratedAttribute]
internal ConstructorInfo get_ConstructorInfo();
    [CompilerGeneratedAttribute]
internal ServiceCallSite[] get_ParameterCallSites();
    [CompilerGeneratedAttribute]
public virtual Type get_ServiceType();
    [NullableContextAttribute("2")]
public virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public virtual CallSiteKind get_Kind();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine : CompiledServiceProviderEngine {
    private ServiceProvider _serviceProvider;
    [RequiresDynamicCodeAttribute("Creates DynamicMethods")]
public DynamicServiceProviderEngine(ServiceProvider serviceProvider);
    public virtual Func`2<ServiceProviderEngineScope, object> RealizeService(ServiceCallSite callSite);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Func`2<ServiceProviderEngineScope, object> <>n__0(ServiceCallSite callSite);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ExpressionResolverBuilder : CallSiteVisitor`2<object, Expression> {
    private static ParameterExpression ScopeParameter;
    private static ParameterExpression ResolvedServices;
    private static ParameterExpression Sync;
    private static BinaryExpression ResolvedServicesVariableAssignment;
    private static BinaryExpression SyncVariableAssignment;
    private static ParameterExpression CaptureDisposableParameter;
    private static LambdaExpression CaptureDisposable;
    private static ConstantExpression CallSiteRuntimeResolverInstanceExpression;
    private ServiceProviderEngineScope _rootScope;
    private ConcurrentDictionary`2<ServiceCacheKey, Func`2<ServiceProviderEngineScope, object>> _scopeResolverCache;
    private Func`3<ServiceCacheKey, ServiceCallSite, Func`2<ServiceProviderEngineScope, object>> _buildTypeDelegate;
    public ExpressionResolverBuilder(ServiceProvider serviceProvider);
    private static ExpressionResolverBuilder();
    public Func`2<ServiceProviderEngineScope, object> Build(ServiceCallSite callSite);
    public Func`2<ServiceProviderEngineScope, object> BuildNoCache(ServiceCallSite callSite);
    private Expression`1<Func`2<ServiceProviderEngineScope, object>> BuildExpression(ServiceCallSite callSite);
    protected virtual Expression VisitRootCache(ServiceCallSite singletonCallSite, object context);
    protected virtual Expression VisitConstant(ConstantCallSite constantCallSite, object context);
    protected virtual Expression VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, object context);
    protected virtual Expression VisitFactory(FactoryCallSite factoryCallSite, object context);
    protected virtual Expression VisitIEnumerable(IEnumerableCallSite callSite, object context);
    protected virtual Expression VisitDisposeCache(ServiceCallSite callSite, object context);
    private static Expression TryCaptureDisposable(ServiceCallSite callSite, ParameterExpression scope, Expression service);
    protected virtual Expression VisitConstructor(ConstructorCallSite callSite, object context);
    private static Expression Convert(Expression expression, Type type, bool forceValueTypeConversion);
    protected virtual Expression VisitScopeCache(ServiceCallSite callSite, object context);
    private ConditionalExpression BuildScopedExpression(ServiceCallSite callSite);
    public static Expression GetCaptureDisposable(ParameterExpression scope);
    [CompilerGeneratedAttribute]
private Func`2<ServiceProviderEngineScope, object> <.ctor>b__11_0(ServiceCacheKey key, ServiceCallSite cs);
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("AotAnalysis", "IL3050:RequiresDynamicCode")]
internal static MethodInfo <VisitIEnumerable>g__GetArrayEmptyMethodInfo|19_0(Type elementType);
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("AotAnalysis", "IL3050:RequiresDynamicCode")]
internal static NewArrayExpression <VisitIEnumerable>g__NewArrayInit|19_1(Type elementType, IEnumerable`1<Expression> expr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ExpressionsServiceProviderEngine : ServiceProviderEngine {
    private ExpressionResolverBuilder _expressionResolverBuilder;
    public ExpressionsServiceProviderEngine(ServiceProvider serviceProvider);
    public virtual Func`2<ServiceProviderEngineScope, object> RealizeService(ServiceCallSite callSite);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.FactoryCallSite : ServiceCallSite {
    [CompilerGeneratedAttribute]
private Func`2<IServiceProvider, object> <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    public Func`2<IServiceProvider, object> Factory { get; }
    public Type ServiceType { get; }
    [NullableAttribute("2")]
public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public FactoryCallSite(ResultCache cache, Type serviceType, Func`2<IServiceProvider, object> factory);
    public FactoryCallSite(ResultCache cache, Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> factory);
    [CompilerGeneratedAttribute]
public Func`2<IServiceProvider, object> get_Factory();
    [CompilerGeneratedAttribute]
public virtual Type get_ServiceType();
    [NullableContextAttribute("2")]
public virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public virtual CallSiteKind get_Kind();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.IEnumerableCallSite : ServiceCallSite {
    [CompilerGeneratedAttribute]
private Type <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceCallSite[] <ServiceCallSites>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    internal Type ItemType { get; }
    internal ServiceCallSite[] ServiceCallSites { get; }
    [UnconditionalSuppressMessageAttribute("AotAnalysis", "IL3050:RequiresDynamicCode")]
public Type ServiceType { get; }
    [UnconditionalSuppressMessageAttribute("AotAnalysis", "IL3050:RequiresDynamicCode")]
public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public IEnumerableCallSite(ResultCache cache, Type itemType, ServiceCallSite[] serviceCallSites);
    [CompilerGeneratedAttribute]
internal Type get_ItemType();
    [CompilerGeneratedAttribute]
internal ServiceCallSite[] get_ServiceCallSites();
    public virtual Type get_ServiceType();
    public virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public virtual CallSiteKind get_Kind();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiresDynamicCodeAttribute("Creates DynamicMethods")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitResolverBuilder : CallSiteVisitor`2<ILEmitResolverBuilderContext, object> {
    private static MethodInfo ResolvedServicesGetter;
    private static MethodInfo ScopeLockGetter;
    private static MethodInfo ScopeIsRootScope;
    private static MethodInfo CallSiteRuntimeResolverResolveMethod;
    private static MethodInfo CallSiteRuntimeResolverInstanceField;
    private static FieldInfo FactoriesField;
    private static FieldInfo ConstantsField;
    private static MethodInfo GetTypeFromHandleMethod;
    private static ConstructorInfo CacheKeyCtor;
    private ServiceProviderEngineScope _rootScope;
    private ConcurrentDictionary`2<ServiceCacheKey, GeneratedMethod> _scopeResolverCache;
    private Func`3<ServiceCacheKey, ServiceCallSite, GeneratedMethod> _buildTypeDelegate;
    public ILEmitResolverBuilder(ServiceProvider serviceProvider);
    private static ILEmitResolverBuilder();
    public Func`2<ServiceProviderEngineScope, object> Build(ServiceCallSite callSite);
    private GeneratedMethod BuildType(ServiceCallSite callSite);
    private GeneratedMethod BuildTypeNoCache(ServiceCallSite callSite);
    protected virtual object VisitDisposeCache(ServiceCallSite transientCallSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitConstructor(ConstructorCallSite constructorCallSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitRootCache(ServiceCallSite callSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitScopeCache(ServiceCallSite scopedCallSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitConstant(ConstantCallSite constantCallSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitIEnumerable(IEnumerableCallSite enumerableCallSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitFactory(FactoryCallSite factoryCallSite, ILEmitResolverBuilderContext argument);
    private static void AddConstant(ILEmitResolverBuilderContext argument, object value);
    private static void AddCacheKey(ILEmitResolverBuilderContext argument, ServiceCacheKey key);
    private ILEmitResolverBuilderRuntimeContext GenerateMethodBody(ServiceCallSite callSite, ILGenerator generator);
    private static void BeginCaptureDisposable(ILEmitResolverBuilderContext argument);
    private static void EndCaptureDisposable(ILEmitResolverBuilderContext argument);
    [CompilerGeneratedAttribute]
private GeneratedMethod <.ctor>b__14_0(ServiceCacheKey key, ServiceCallSite cs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitResolverBuilderContext : object {
    [CompilerGeneratedAttribute]
private ILGenerator <Generator>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <Constants>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`2<IServiceProvider, object>> <Factories>k__BackingField;
    public ILGenerator Generator { get; }
    [NullableAttribute("2")]
public List`1<object> Constants { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<Func`2<IServiceProvider, object>> Factories { get; public set; }
    public ILEmitResolverBuilderContext(ILGenerator generator);
    [CompilerGeneratedAttribute]
public ILGenerator get_Generator();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public List`1<object> get_Constants();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Constants(List`1<object> value);
    [CompilerGeneratedAttribute]
public List`1<Func`2<IServiceProvider, object>> get_Factories();
    [CompilerGeneratedAttribute]
public void set_Factories(List`1<Func`2<IServiceProvider, object>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitServiceProviderEngine : ServiceProviderEngine {
    private ILEmitResolverBuilder _expressionResolverBuilder;
    [RequiresDynamicCodeAttribute("Creates DynamicMethods")]
public ILEmitServiceProviderEngine(ServiceProvider serviceProvider);
    public virtual Func`2<ServiceProviderEngineScope, object> RealizeService(ServiceCallSite callSite);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ResultCache : ValueType {
    [CompilerGeneratedAttribute]
private CallSiteResultCacheLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceCacheKey <Key>k__BackingField;
    public CallSiteResultCacheLocation Location { get; public set; }
    public ServiceCacheKey Key { get; public set; }
    internal ResultCache(CallSiteResultCacheLocation lifetime, ServiceCacheKey cacheKey);
    public ResultCache(ServiceLifetime lifetime, ServiceIdentifier serviceIdentifier, int slot);
    [NullableContextAttribute("1")]
public static ResultCache None(Type serviceType);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public CallSiteResultCacheLocation get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(CallSiteResultCacheLocation value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ServiceCacheKey get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(ServiceCacheKey value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext : ValueType {
    [CompilerGeneratedAttribute]
private ServiceProviderEngineScope <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeResolverLock <AcquiredLocks>k__BackingField;
    public ServiceProviderEngineScope Scope { get; public set; }
    public RuntimeResolverLock AcquiredLocks { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ServiceProviderEngineScope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(ServiceProviderEngineScope value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public RuntimeResolverLock get_AcquiredLocks();
    [CompilerGeneratedAttribute]
public void set_AcquiredLocks(RuntimeResolverLock value);
}
[FlagsAttribute]
internal enum Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock : Enum {
    public int value__;
    public static RuntimeResolverLock Scope;
    public static RuntimeResolverLock Root;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeServiceProviderEngine : ServiceProviderEngine {
    [CompilerGeneratedAttribute]
private static RuntimeServiceProviderEngine <Instance>k__BackingField;
    public static RuntimeServiceProviderEngine Instance { get; }
    private static RuntimeServiceProviderEngine();
    [CompilerGeneratedAttribute]
public static RuntimeServiceProviderEngine get_Instance();
    public virtual Func`2<ServiceProviderEngineScope, object> RealizeService(ServiceCallSite callSite);
}
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCacheKey : ValueType {
    [CompilerGeneratedAttribute]
private ServiceIdentifier <ServiceIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Slot>k__BackingField;
    public ServiceIdentifier ServiceIdentifier { get; }
    public int Slot { get; }
    [NullableContextAttribute("1")]
public ServiceCacheKey(object key, Type type, int slot);
    public ServiceCacheKey(ServiceIdentifier type, int slot);
    [CompilerGeneratedAttribute]
public ServiceIdentifier get_ServiceIdentifier();
    [CompilerGeneratedAttribute]
public int get_Slot();
    public sealed virtual bool Equals(ServiceCacheKey other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal abstract class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite : object {
    [CompilerGeneratedAttribute]
private ResultCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    [NullableAttribute("1")]
public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public ResultCache Cache { get; }
    public object Value { get; public set; }
    public object Key { get; public set; }
    public bool CaptureDisposable { get; }
    protected ServiceCallSite(ResultCache cache);
    [NullableContextAttribute("1")]
public abstract virtual Type get_ServiceType();
    public abstract virtual Type get_ImplementationType();
    public abstract virtual CallSiteKind get_Kind();
    [CompilerGeneratedAttribute]
public ResultCache get_Cache();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public object get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(object value);
    public bool get_CaptureDisposable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceDescriptorExtensions : object {
    [ExtensionAttribute]
public static bool HasImplementationInstance(ServiceDescriptor serviceDescriptor);
    [ExtensionAttribute]
public static bool HasImplementationFactory(ServiceDescriptor serviceDescriptor);
    [ExtensionAttribute]
public static bool HasImplementationType(ServiceDescriptor serviceDescriptor);
    [ExtensionAttribute]
public static object GetImplementationInstance(ServiceDescriptor serviceDescriptor);
    [ExtensionAttribute]
public static object GetImplementationFactory(ServiceDescriptor serviceDescriptor);
    [ExtensionAttribute]
public static Type GetImplementationType(ServiceDescriptor serviceDescriptor);
    [ExtensionAttribute]
public static bool TryGetImplementationType(ServiceDescriptor serviceDescriptor, Type& type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceIdentifier : ValueType {
    [CompilerGeneratedAttribute]
private object <ServiceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [NullableAttribute("2")]
public object ServiceKey { get; }
    public Type ServiceType { get; }
    public bool IsConstructedGenericType { get; }
    public ServiceIdentifier(Type serviceType);
    public ServiceIdentifier(object serviceKey, Type serviceType);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_ServiceKey();
    [CompilerGeneratedAttribute]
public Type get_ServiceType();
    public static ServiceIdentifier FromDescriptor(ServiceDescriptor serviceDescriptor);
    public static ServiceIdentifier FromServiceType(Type type);
    public sealed virtual bool Equals(ServiceIdentifier other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool get_IsConstructedGenericType();
    public ServiceIdentifier GetGenericTypeDefinition();
    [NullableContextAttribute("2")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceLookupHelpers : object {
    private static BindingFlags LookupFlags;
    private static MethodInfo ArrayEmptyMethodInfo;
    internal static MethodInfo InvokeFactoryMethodInfo;
    internal static MethodInfo CaptureDisposableMethodInfo;
    internal static MethodInfo TryGetValueMethodInfo;
    internal static MethodInfo ResolveCallSiteAndScopeMethodInfo;
    internal static MethodInfo AddMethodInfo;
    internal static MethodInfo MonitorEnterMethodInfo;
    internal static MethodInfo MonitorExitMethodInfo;
    private static ServiceLookupHelpers();
    [RequiresDynamicCodeAttribute("The code for an array of the specified type might not be available.")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2060:MakeGenericMethod")]
internal static MethodInfo GetArrayEmptyMethodInfo(Type itemType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderCallSite : ServiceCallSite {
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    [CompilerGeneratedAttribute]
public virtual Type get_ServiceType();
    [CompilerGeneratedAttribute]
public virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public virtual CallSiteKind get_Kind();
}
internal abstract class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine : object {
    [NullableContextAttribute("1")]
public abstract virtual Func`2<ServiceProviderEngineScope, object> RealizeService(ServiceCallSite callSite);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
[DebuggerTypeProxyAttribute("Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope/ServiceProviderEngineScopeDebugView")]
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope : object {
    private bool _disposed;
    private List`1<object> _disposables;
    [CompilerGeneratedAttribute]
private Dictionary`2<ServiceCacheKey, object> <ResolvedServices>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRootScope>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceProvider <RootProvider>k__BackingField;
    internal IList`1<object> Disposables { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Dictionary`2<ServiceCacheKey, object> ResolvedServices { get; }
    internal bool Disposed { get; }
    internal object Sync { get; }
    public bool IsRootScope { get; }
    internal ServiceProvider RootProvider { get; }
    public IServiceProvider ServiceProvider { get; }
    public ServiceProviderEngineScope(ServiceProvider provider, bool isRootScope);
    internal IList`1<object> get_Disposables();
    [CompilerGeneratedAttribute]
internal Dictionary`2<ServiceCacheKey, object> get_ResolvedServices();
    internal bool get_Disposed();
    internal object get_Sync();
    [CompilerGeneratedAttribute]
public bool get_IsRootScope();
    [CompilerGeneratedAttribute]
internal ServiceProvider get_RootProvider();
    public sealed virtual object GetService(Type serviceType);
    [NullableContextAttribute("2")]
public sealed virtual object GetKeyedService(Type serviceType, object serviceKey);
    public sealed virtual object GetRequiredKeyedService(Type serviceType, object serviceKey);
    public sealed virtual IServiceProvider get_ServiceProvider();
    public sealed virtual IServiceScope CreateScope();
    [NullableContextAttribute("2")]
internal object CaptureDisposable(object service);
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    private List`1<object> BeginDispose();
    internal string DebuggerToString();
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope/<<DisposeAsync>g__Await|26_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <DisposeAsync>g__Await|26_0(int i, ValueTask vt, List`1<object> toDispose);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.StackGuard : object {
    private static int MaxExecutionStackCount;
    private int _executionStackCount;
    public bool TryEnterOnCurrentStack();
    [NullableContextAttribute("1")]
public TR RunOnEmptyStack(Func`3<T1, T2, TR> action, T1 arg1, T2 arg2);
    private R RunOnEmptyStackCore(Func`2<object, R> action, object state);
}
internal static class Microsoft.Extensions.DependencyInjection.ServiceLookup.ThrowHelper : object {
    [DoesNotReturnAttribute]
internal static void ThrowObjectDisposedException();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
[DebuggerTypeProxyAttribute("Microsoft.Extensions.DependencyInjection.ServiceProvider/ServiceProviderDebugView")]
public class Microsoft.Extensions.DependencyInjection.ServiceProvider : object {
    private CallSiteValidator _callSiteValidator;
    private Func`2<ServiceIdentifier, ServiceAccessor> _createServiceAccessor;
    internal ServiceProviderEngine _engine;
    private bool _disposed;
    private ConcurrentDictionary`2<ServiceIdentifier, ServiceAccessor> _serviceAccessors;
    [CompilerGeneratedAttribute]
private CallSiteFactory <CallSiteFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceProviderEngineScope <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <VerifyOpenGenericServiceTrimmability>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <DisableDynamicEngine>k__BackingField;
    internal CallSiteFactory CallSiteFactory { get; }
    internal ServiceProviderEngineScope Root { get; }
    internal static bool VerifyOpenGenericServiceTrimmability { get; }
    internal static bool DisableDynamicEngine { get; }
    internal static bool VerifyAotCompatibility { get; }
    internal ServiceProvider(ICollection`1<ServiceDescriptor> serviceDescriptors, ServiceProviderOptions options);
    private static ServiceProvider();
    [CompilerGeneratedAttribute]
internal CallSiteFactory get_CallSiteFactory();
    [CompilerGeneratedAttribute]
internal ServiceProviderEngineScope get_Root();
    [CompilerGeneratedAttribute]
internal static bool get_VerifyOpenGenericServiceTrimmability();
    [CompilerGeneratedAttribute]
internal static bool get_DisableDynamicEngine();
    internal static bool get_VerifyAotCompatibility();
    public sealed virtual object GetService(Type serviceType);
    [NullableContextAttribute("2")]
public sealed virtual object GetKeyedService(Type serviceType, object serviceKey);
    internal object GetKeyedService(Type serviceType, object serviceKey, ServiceProviderEngineScope serviceProviderEngineScope);
    public sealed virtual object GetRequiredKeyedService(Type serviceType, object serviceKey);
    internal object GetRequiredKeyedService(Type serviceType, object serviceKey, ServiceProviderEngineScope serviceProviderEngineScope);
    internal bool IsDisposed();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    private void DisposeCore();
    private void OnCreate(ServiceCallSite callSite);
    private void OnResolve(ServiceCallSite callSite, IServiceScope scope);
    internal object GetService(ServiceIdentifier serviceIdentifier, ServiceProviderEngineScope serviceProviderEngineScope);
    private void ValidateService(ServiceDescriptor descriptor);
    private ServiceAccessor CreateServiceAccessor(ServiceIdentifier serviceIdentifier);
    internal void ReplaceServiceAccessor(ServiceCallSite callSite, Func`2<ServiceProviderEngineScope, object> accessor);
    internal IServiceScope CreateScope();
    private ServiceProviderEngine GetEngine();
    private string DebuggerToString();
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("AotAnalysis", "IL3050:RequiresDynamicCode")]
private ServiceProviderEngine <GetEngine>g__CreateDynamicEngine|36_0();
}
public class Microsoft.Extensions.DependencyInjection.ServiceProviderOptions : object {
    [NullableAttribute("1")]
internal static ServiceProviderOptions Default;
    [CompilerGeneratedAttribute]
private bool <ValidateScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateOnBuild>k__BackingField;
    public bool ValidateScopes { get; public set; }
    public bool ValidateOnBuild { get; public set; }
    private static ServiceProviderOptions();
    [CompilerGeneratedAttribute]
public bool get_ValidateScopes();
    [CompilerGeneratedAttribute]
public void set_ValidateScopes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateOnBuild();
    [CompilerGeneratedAttribute]
public void set_ValidateOnBuild(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Extensions.Internal.ParameterDefaultValue : object {
    public static bool CheckHasDefaultValue(ParameterInfo parameter, Boolean& tryToGetDefaultValue);
    public static bool TryGetDefaultValue(ParameterInfo parameter, Object& defaultValue);
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2067:UnrecognizedReflectionPattern")]
internal static object <TryGetDefaultValue>g__CreateValueType|1_0(Type t);
}
internal static class Microsoft.Extensions.Internal.TypeNameHelper : object {
    private static char DefaultNestedTypeDelimiter;
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static TypeNameHelper();
    [NullableContextAttribute("2")]
public static string GetTypeDisplayName(object item, bool fullName);
    [NullableContextAttribute("1")]
public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames, bool includeGenericParameters, char nestedTypeDelimiter);
    private static string ProcessType(StringBuilder& builder, Type type, DisplayNameOptions& options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions& options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions& options);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string AmbiguousConstructorException { get; }
    internal static string CannotResolveService { get; }
    internal static string CircularDependencyException { get; }
    internal static string UnableToActivateTypeException { get; }
    internal static string OpenGenericServiceRequiresOpenGenericImplementation { get; }
    internal static string ArityOfOpenGenericServiceNotEqualArityOfOpenGenericImplementation { get; }
    internal static string TypeCannotBeActivated { get; }
    internal static string NoConstructorMatch { get; }
    internal static string ScopedInSingletonException { get; }
    internal static string ScopedResolvedFromRootException { get; }
    internal static string DirectScopedResolvedFromRootException { get; }
    internal static string ConstantCantBeConvertedToServiceType { get; }
    internal static string ImplementationTypeCantBeConvertedToServiceType { get; }
    internal static string AsyncDisposableServiceDispose { get; }
    internal static string GetCaptureDisposableNotSupported { get; }
    internal static string InvalidServiceDescriptor { get; }
    internal static string ServiceDescriptorNotExist { get; }
    internal static string CallSiteTypeNotSupported { get; }
    internal static string TrimmingAnnotationsDoNotMatch { get; }
    internal static string TrimmingAnnotationsDoNotMatch_NewConstraint { get; }
    internal static string AotCannotCreateEnumerableValueType { get; }
    internal static string AotCannotCreateGenericValueType { get; }
    internal static string NoServiceRegistered { get; }
    internal static string InvalidServiceKeyType { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, Object[] args);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_AmbiguousConstructorException();
    internal static string get_CannotResolveService();
    internal static string get_CircularDependencyException();
    internal static string get_UnableToActivateTypeException();
    internal static string get_OpenGenericServiceRequiresOpenGenericImplementation();
    internal static string get_ArityOfOpenGenericServiceNotEqualArityOfOpenGenericImplementation();
    internal static string get_TypeCannotBeActivated();
    internal static string get_NoConstructorMatch();
    internal static string get_ScopedInSingletonException();
    internal static string get_ScopedResolvedFromRootException();
    internal static string get_DirectScopedResolvedFromRootException();
    internal static string get_ConstantCantBeConvertedToServiceType();
    internal static string get_ImplementationTypeCantBeConvertedToServiceType();
    internal static string get_AsyncDisposableServiceDispose();
    internal static string get_GetCaptureDisposableNotSupported();
    internal static string get_InvalidServiceDescriptor();
    internal static string get_ServiceDescriptorNotExist();
    internal static string get_CallSiteTypeNotSupported();
    internal static string get_TrimmingAnnotationsDoNotMatch();
    internal static string get_TrimmingAnnotationsDoNotMatch_NewConstraint();
    internal static string get_AotCannotCreateEnumerableValueType();
    internal static string get_AotCannotCreateGenericValueType();
    internal static string get_NoServiceRegistered();
    internal static string get_InvalidServiceKeyType();
}
