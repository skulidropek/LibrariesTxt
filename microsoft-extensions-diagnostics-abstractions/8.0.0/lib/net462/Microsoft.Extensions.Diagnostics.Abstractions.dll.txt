internal static class FxResources.Microsoft.Extensions.Diagnostics.Abstractions.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Diagnostics.Metrics.IMetricsBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Diagnostics.Metrics.IMetricsListener {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual void Initialize(IObservableInstrumentsSource source);
    public abstract virtual bool InstrumentPublished(Instrument instrument, Object& userState);
    public abstract virtual void MeasurementsCompleted(Instrument instrument, object userState);
    public abstract virtual MeasurementHandlers GetMeasurementHandlers();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Diagnostics.Metrics.InstrumentRule : object {
    [CompilerGeneratedAttribute]
private string <MeterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstrumentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ListenerName>k__BackingField;
    [CompilerGeneratedAttribute]
private MeterScope <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enable>k__BackingField;
    public string MeterName { get; }
    public string InstrumentName { get; }
    public string ListenerName { get; }
    public MeterScope Scopes { get; }
    public bool Enable { get; }
    public InstrumentRule(string meterName, string instrumentName, string listenerName, MeterScope scopes, bool enable);
    [CompilerGeneratedAttribute]
public string get_MeterName();
    [CompilerGeneratedAttribute]
public string get_InstrumentName();
    [CompilerGeneratedAttribute]
public string get_ListenerName();
    [CompilerGeneratedAttribute]
public MeterScope get_Scopes();
    [CompilerGeneratedAttribute]
public bool get_Enable();
}
public interface Microsoft.Extensions.Diagnostics.Metrics.IObservableInstrumentsSource {
    public abstract virtual void RecordObservableInstruments();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Diagnostics.Metrics.MeasurementHandlers : object {
    [CompilerGeneratedAttribute]
private MeasurementCallback`1<byte> <ByteHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementCallback`1<short> <ShortHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementCallback`1<int> <IntHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementCallback`1<long> <LongHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementCallback`1<float> <FloatHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementCallback`1<double> <DoubleHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private MeasurementCallback`1<decimal> <DecimalHandler>k__BackingField;
    public MeasurementCallback`1<byte> ByteHandler { get; public set; }
    public MeasurementCallback`1<short> ShortHandler { get; public set; }
    public MeasurementCallback`1<int> IntHandler { get; public set; }
    public MeasurementCallback`1<long> LongHandler { get; public set; }
    public MeasurementCallback`1<float> FloatHandler { get; public set; }
    public MeasurementCallback`1<double> DoubleHandler { get; public set; }
    public MeasurementCallback`1<decimal> DecimalHandler { get; public set; }
    [CompilerGeneratedAttribute]
public MeasurementCallback`1<byte> get_ByteHandler();
    [CompilerGeneratedAttribute]
public void set_ByteHandler(MeasurementCallback`1<byte> value);
    [CompilerGeneratedAttribute]
public MeasurementCallback`1<short> get_ShortHandler();
    [CompilerGeneratedAttribute]
public void set_ShortHandler(MeasurementCallback`1<short> value);
    [CompilerGeneratedAttribute]
public MeasurementCallback`1<int> get_IntHandler();
    [CompilerGeneratedAttribute]
public void set_IntHandler(MeasurementCallback`1<int> value);
    [CompilerGeneratedAttribute]
public MeasurementCallback`1<long> get_LongHandler();
    [CompilerGeneratedAttribute]
public void set_LongHandler(MeasurementCallback`1<long> value);
    [CompilerGeneratedAttribute]
public MeasurementCallback`1<float> get_FloatHandler();
    [CompilerGeneratedAttribute]
public void set_FloatHandler(MeasurementCallback`1<float> value);
    [CompilerGeneratedAttribute]
public MeasurementCallback`1<double> get_DoubleHandler();
    [CompilerGeneratedAttribute]
public void set_DoubleHandler(MeasurementCallback`1<double> value);
    [CompilerGeneratedAttribute]
public MeasurementCallback`1<decimal> get_DecimalHandler();
    [CompilerGeneratedAttribute]
public void set_DecimalHandler(MeasurementCallback`1<decimal> value);
}
[FlagsAttribute]
public enum Microsoft.Extensions.Diagnostics.Metrics.MeterScope : Enum {
    public int value__;
    public static MeterScope None;
    public static MeterScope Global;
    public static MeterScope Local;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderExtensions : object {
    [ExtensionAttribute]
public static IMetricsBuilder AddListener(IMetricsBuilder builder);
    [ExtensionAttribute]
public static IMetricsBuilder AddListener(IMetricsBuilder builder, IMetricsListener listener);
    [ExtensionAttribute]
public static IMetricsBuilder ClearListeners(IMetricsBuilder builder);
    [ExtensionAttribute]
public static IMetricsBuilder EnableMetrics(IMetricsBuilder builder, string meterName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IMetricsBuilder EnableMetrics(IMetricsBuilder builder, string meterName, string instrumentName, string listenerName, MeterScope scopes);
    [ExtensionAttribute]
public static MetricsOptions EnableMetrics(MetricsOptions options, string meterName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static MetricsOptions EnableMetrics(MetricsOptions options, string meterName, string instrumentName, string listenerName, MeterScope scopes);
    [ExtensionAttribute]
public static IMetricsBuilder DisableMetrics(IMetricsBuilder builder, string meterName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IMetricsBuilder DisableMetrics(IMetricsBuilder builder, string meterName, string instrumentName, string listenerName, MeterScope scopes);
    [ExtensionAttribute]
public static MetricsOptions DisableMetrics(MetricsOptions options, string meterName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static MetricsOptions DisableMetrics(MetricsOptions options, string meterName, string instrumentName, string listenerName, MeterScope scopes);
    [ExtensionAttribute]
private static IMetricsBuilder ConfigureRule(IMetricsBuilder builder, Action`1<MetricsOptions> configureOptions);
    [ExtensionAttribute]
private static MetricsOptions AddRule(MetricsOptions options, string meterName, string instrumentName, string listenerName, MeterScope scopes, bool enable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Diagnostics.Metrics.MetricsOptions : object {
    [CompilerGeneratedAttribute]
private IList`1<InstrumentRule> <Rules>k__BackingField;
    public IList`1<InstrumentRule> Rules { get; }
    [CompilerGeneratedAttribute]
public IList`1<InstrumentRule> get_Rules();
}
internal static class Microsoft.Extensions.Internal.TypeNameHelper : object {
    private static char DefaultNestedTypeDelimiter;
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static TypeNameHelper();
    public static string GetTypeDisplayName(object item, bool fullName);
    public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames, bool includeGenericParameters, char nestedTypeDelimiter);
    private static string ProcessType(StringBuilder& builder, Type type, DisplayNameOptions& options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions& options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions& options);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("28108")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
}
internal static class System.ThrowHelper : object {
    internal static void ThrowIfNull(object argument, string paramName);
    private static void Throw(string paramName);
    public static string IfNullOrWhitespace(string argument, string paramName);
}
