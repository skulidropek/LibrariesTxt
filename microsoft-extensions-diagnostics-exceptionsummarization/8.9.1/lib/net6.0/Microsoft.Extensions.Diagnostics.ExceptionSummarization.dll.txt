[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ExceptionSummarizationServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddExceptionSummarizer(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddExceptionSummarizer(IServiceCollection services, Action`1<IExceptionSummarizationBuilder> configure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Diagnostics.ExceptionSummarization.ExceptionSummarizationBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public ExceptionSummarizationBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
    public sealed virtual IExceptionSummarizationBuilder AddProvider();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Diagnostics.ExceptionSummarization.ExceptionSummarizationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IExceptionSummarizationBuilder AddHttpProvider(IExceptionSummarizationBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Diagnostics.ExceptionSummarization.ExceptionSummarizer : object {
    private static string DefaultDescription;
    private FrozenDictionary`2<Type, IExceptionSummaryProvider> _exceptionTypesToProviders;
    public ExceptionSummarizer(IEnumerable`1<IExceptionSummaryProvider> providers);
    public sealed virtual ExceptionSummary Summarize(Exception exception);
    private static ExceptionSummary BuildSummary(Exception exception, IExceptionSummaryProvider exceptionSummaryProvider, string exceptionType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.Extensions.Diagnostics.ExceptionSummarization.ExceptionSummary : ValueType {
    [CompilerGeneratedAttribute]
private string <ExceptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalDetails>k__BackingField;
    public string ExceptionType { get; }
    public string Description { get; }
    public string AdditionalDetails { get; }
    public ExceptionSummary(string exceptionType, string description, string additionalDetails);
    [CompilerGeneratedAttribute]
public string get_ExceptionType();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public string get_AdditionalDetails();
    public virtual int GetHashCode();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ExceptionSummary other);
    public static bool op_Equality(ExceptionSummary left, ExceptionSummary right);
    public static bool op_Inequality(ExceptionSummary left, ExceptionSummary right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Diagnostics.ExceptionSummarization.HttpExceptionSummaryProvider : object {
    private static int DefaultDescriptionIndex;
    private static string TaskCanceled;
    private static string TaskTimeout;
    private static FrozenDictionary`2<WebExceptionStatus, int> _webExceptionStatusMap;
    private static FrozenDictionary`2<SocketError, int> _socketErrorMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<string> _descriptions;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Type> <SupportedExceptionTypes>k__BackingField;
    public IEnumerable`1<Type> SupportedExceptionTypes { get; }
    public IReadOnlyList`1<string> Descriptions { get; }
    private static HttpExceptionSummaryProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<Type> get_SupportedExceptionTypes();
    public sealed virtual IReadOnlyList`1<string> get_Descriptions();
    public sealed virtual int Describe(Exception exception, String& additionalDetails);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Diagnostics.ExceptionSummarization.IExceptionSummarizationBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
    public abstract virtual IExceptionSummarizationBuilder AddProvider();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Diagnostics.ExceptionSummarization.IExceptionSummarizer {
    public abstract virtual ExceptionSummary Summarize(Exception exception);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Diagnostics.ExceptionSummarization.IExceptionSummaryProvider {
    public IEnumerable`1<Type> SupportedExceptionTypes { get; }
    public IReadOnlyList`1<string> Descriptions { get; }
    public abstract virtual int Describe(Exception exception, String& additionalDetails);
    public abstract virtual IEnumerable`1<Type> get_SupportedExceptionTypes();
    public abstract virtual IReadOnlyList`1<string> get_Descriptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Shared.Diagnostics.Throw : object {
    public static T IfNull(T argument, string paramName);
    public static TMember IfNullOrMemberNull(TParameter argument, TMember member, string paramName, string memberName);
    public static TMember IfMemberNull(TParameter argument, TMember member, string paramName, string memberName);
    public static string IfNullOrWhitespace(string argument, string paramName);
    public static string IfNullOrEmpty(string argument, string paramName);
    public static void IfBufferTooSmall(int bufferSize, int requiredSize, string paramName);
    [NullableContextAttribute("0")]
public static T IfOutOfRange(T argument, string paramName);
    [ExcludeFromCodeCoverageAttribute]
public static IEnumerable`1<T> IfNullOrEmpty(IEnumerable`1<T> argument, string paramName);
    [DoesNotReturnAttribute]
public static void ArgumentNullException(string paramName);
    [DoesNotReturnAttribute]
public static void ArgumentNullException(string paramName, string message);
    [DoesNotReturnAttribute]
public static void ArgumentOutOfRangeException(string paramName);
    [DoesNotReturnAttribute]
public static void ArgumentOutOfRangeException(string paramName, string message);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
public static void ArgumentOutOfRangeException(string paramName, object actualValue, string message);
    [DoesNotReturnAttribute]
public static void ArgumentException(string paramName, string message);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
public static void ArgumentException(string paramName, string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void InvalidOperationException(string message);
    [DoesNotReturnAttribute]
public static void InvalidOperationException(string message, Exception innerException);
    public static int IfLessThan(int argument, int min, string paramName);
    public static int IfGreaterThan(int argument, int max, string paramName);
    public static int IfLessThanOrEqual(int argument, int min, string paramName);
    public static int IfGreaterThanOrEqual(int argument, int max, string paramName);
    public static int IfOutOfRange(int argument, int min, int max, string paramName);
    public static int IfZero(int argument, string paramName);
    public static UInt32 IfLessThan(UInt32 argument, UInt32 min, string paramName);
    public static UInt32 IfGreaterThan(UInt32 argument, UInt32 max, string paramName);
    public static UInt32 IfLessThanOrEqual(UInt32 argument, UInt32 min, string paramName);
    public static UInt32 IfGreaterThanOrEqual(UInt32 argument, UInt32 max, string paramName);
    public static UInt32 IfOutOfRange(UInt32 argument, UInt32 min, UInt32 max, string paramName);
    public static UInt32 IfZero(UInt32 argument, string paramName);
    public static long IfLessThan(long argument, long min, string paramName);
    public static long IfGreaterThan(long argument, long max, string paramName);
    public static long IfLessThanOrEqual(long argument, long min, string paramName);
    public static long IfGreaterThanOrEqual(long argument, long max, string paramName);
    public static long IfOutOfRange(long argument, long min, long max, string paramName);
    public static long IfZero(long argument, string paramName);
    public static ulong IfLessThan(ulong argument, ulong min, string paramName);
    public static ulong IfGreaterThan(ulong argument, ulong max, string paramName);
    public static ulong IfLessThanOrEqual(ulong argument, ulong min, string paramName);
    public static ulong IfGreaterThanOrEqual(ulong argument, ulong max, string paramName);
    public static ulong IfOutOfRange(ulong argument, ulong min, ulong max, string paramName);
    public static ulong IfZero(ulong argument, string paramName);
    public static double IfLessThan(double argument, double min, string paramName);
    public static double IfGreaterThan(double argument, double max, string paramName);
    public static double IfLessThanOrEqual(double argument, double min, string paramName);
    public static double IfGreaterThanOrEqual(double argument, double max, string paramName);
    public static double IfOutOfRange(double argument, double min, double max, string paramName);
    public static double IfZero(double argument, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Shared.Text.NumericExtensions : object {
    private static int MinCachedValue;
    private static int MaxCachedValue;
    private static int NumCachedValues;
    private static String[] _cachedValues;
    private static NumericExtensions();
    [ExtensionAttribute]
public static string ToInvariantString(int value);
    [ExtensionAttribute]
public static string ToInvariantString(long value);
    private static String[] MakeCachedValues();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
