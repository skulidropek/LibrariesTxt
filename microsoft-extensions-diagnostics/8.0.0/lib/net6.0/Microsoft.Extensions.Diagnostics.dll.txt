internal static class FxResources.Microsoft.Extensions.Diagnostics.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.MetricsServiceExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddMetrics(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddMetrics(IServiceCollection services, Action`1<IMetricsBuilder> configure);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Diagnostics.Metrics.Configuration.IMetricListenerConfigurationFactory {
    public abstract virtual IConfiguration GetConfiguration(string listenerName);
}
internal class Microsoft.Extensions.Diagnostics.Metrics.Configuration.MetricListenerConfigurationFactory : object {
    private IEnumerable`1<MetricsConfiguration> _configurations;
    public MetricListenerConfigurationFactory(IEnumerable`1<MetricsConfiguration> configurations);
    public sealed virtual IConfiguration GetConfiguration(string listenerName);
}
internal class Microsoft.Extensions.Diagnostics.Metrics.Configuration.MetricsConfiguration : object {
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    public IConfiguration Configuration { get; }
    public MetricsConfiguration(IConfiguration configuration);
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
}
internal class Microsoft.Extensions.Diagnostics.Metrics.Configuration.MetricsConfigureOptions : object {
    private static string EnabledMetricsKey;
    private static string EnabledGlobalMetricsKey;
    private static string EnabledLocalMetricsKey;
    private static string DefaultKey;
    private IConfiguration _configuration;
    public MetricsConfigureOptions(IConfiguration configuration);
    public sealed virtual void Configure(MetricsOptions options);
    private void LoadConfig(MetricsOptions options);
    internal static void LoadMeterRules(MetricsOptions options, IConfigurationSection configurationSection, MeterScope scopes, string listenerName);
    internal static void LoadInstrumentRules(MetricsOptions options, IConfigurationSection meterSection, MeterScope scopes, string listenerName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Diagnostics.Metrics.ConsoleMetrics : object {
    public static string DebugListenerName { get; }
    public static string get_DebugListenerName();
}
internal class Microsoft.Extensions.Diagnostics.Metrics.DebugConsoleMetricListener : object {
    private Timer _timer;
    private int _timerStarted;
    private IObservableInstrumentsSource _source;
    internal TextWriter _textWriter;
    public string Name { get; }
    public sealed virtual string get_Name();
    public sealed virtual bool InstrumentPublished(Instrument instrument, Object& userState);
    public sealed virtual void MeasurementsCompleted(Instrument instrument, object userState);
    public sealed virtual void Initialize(IObservableInstrumentsSource source);
    public sealed virtual MeasurementHandlers GetMeasurementHandlers();
    private void MeasurementHandler(Instrument instrument, T measurement, ReadOnlySpan`1<KeyValuePair`2<string, object>> tags, object state);
    private void WriteLine(string output);
    private void OnTimer(object _);
    public sealed virtual void Dispose();
}
internal class Microsoft.Extensions.Diagnostics.Metrics.DefaultMeterFactory : object {
    private Dictionary`2<string, List`1<FactoryMeter>> _cachedMeters;
    private bool _disposed;
    public sealed virtual Meter Create(MeterOptions options);
    public sealed virtual void Dispose();
}
internal class Microsoft.Extensions.Diagnostics.Metrics.FactoryMeter : Meter {
    public FactoryMeter(string name, string version, IEnumerable`1<KeyValuePair`2<string, object>> tags, object scope);
    public void Release();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Extensions.Diagnostics.Metrics.ListenerSubscription : object {
    private MeterListener _meterListener;
    private IMetricsListener _metricsListener;
    private IMeterFactory _meterFactory;
    private Dictionary`2<Instrument, object> _instruments;
    private IList`1<InstrumentRule> _rules;
    private bool _disposed;
    internal ListenerSubscription(IMetricsListener metricsListener, IMeterFactory meterFactory);
    public void Initialize();
    private void InstrumentPublished(Instrument instrument, MeterListener _);
    private void MeasurementsCompleted(Instrument instrument, object state);
    internal void UpdateRules(IList`1<InstrumentRule> rules);
    private void RefreshInstrument(Instrument instrument);
    private InstrumentRule GetMostSpecificRule(Instrument instrument);
    internal static bool RuleMatches(InstrumentRule rule, Instrument instrument, string listenerName, IMeterFactory meterFactory);
    internal static bool IsMoreSpecific(InstrumentRule rule, InstrumentRule best, bool isLocalScope);
    public sealed virtual void RecordObservableInstruments();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <UpdateRules>b__10_0(Instrument instrument, MeterListener _);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderConfigurationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IMetricsBuilder AddConfiguration(IMetricsBuilder builder, IConfiguration configuration);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Diagnostics.Metrics.MetricsBuilderConsoleExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IMetricsBuilder AddDebugConsole(IMetricsBuilder builder);
}
internal class Microsoft.Extensions.Diagnostics.Metrics.MetricsSubscriptionManager : object {
    private ListenerSubscription[] _listeners;
    private IDisposable _changeTokenRegistration;
    private bool _disposed;
    public MetricsSubscriptionManager(IEnumerable`1<IMetricsListener> listeners, IOptionsMonitor`1<MetricsOptions> options, IMeterFactory meterFactory);
    public void Initialize();
    private void UpdateRules(MetricsOptions options);
    public void Dispose();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
internal class System.Diagnostics.BitMapper : ValueType {
    private int _maxIndex;
    private Span`1<ulong> _bitMap;
    public int MaxIndex { get; }
    public BitMapper(Span`1<ulong> bitMap);
    public int get_MaxIndex();
    private static void GetIndexAndMask(int index, Int32& bitIndex, UInt64& mask);
    public bool SetBit(int index);
    public bool IsSet(int index);
}
internal static class System.Diagnostics.DiagnosticsHelper : object {
    internal static bool CompareTags(List`1<KeyValuePair`2<string, object>> sortedTags, IEnumerable`1<KeyValuePair`2<string, object>> tags2);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string InvalidScope { get; }
    internal static string MoreThanOneWildcard { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_InvalidScope();
    internal static string get_MoreThanOneWildcard();
}
internal static class System.ThrowHelper : object {
    internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
    public static string IfNullOrWhitespace(string argument, string paramName);
}
