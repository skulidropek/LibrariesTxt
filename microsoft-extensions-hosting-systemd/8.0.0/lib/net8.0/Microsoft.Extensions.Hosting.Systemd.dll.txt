internal static class Interop : object {
}
public interface Microsoft.Extensions.Hosting.Systemd.ISystemdNotifier {
    public bool IsEnabled { get; }
    public abstract virtual void Notify(ServiceState state);
    public abstract virtual bool get_IsEnabled();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Hosting.Systemd.ServiceState : ValueType {
    private Byte[] _data;
    public static ServiceState Ready;
    public static ServiceState Stopping;
    public ServiceState(string state);
    private static ServiceState();
    public virtual string ToString();
    internal Byte[] GetData();
}
public static class Microsoft.Extensions.Hosting.Systemd.SystemdHelpers : object {
    private static Nullable`1<bool> _isSystemdService;
    public static bool IsSystemdService();
    private static bool GetIsSystemdService();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("maccatalyst")]
[UnsupportedOSPlatformAttribute("tvos")]
public class Microsoft.Extensions.Hosting.Systemd.SystemdLifetime : object {
    private CancellationTokenRegistration _applicationStartedRegistration;
    private CancellationTokenRegistration _applicationStoppingRegistration;
    [CompilerGeneratedAttribute]
private IHostApplicationLifetime <ApplicationLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostEnvironment <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ISystemdNotifier <SystemdNotifier>k__BackingField;
    private PosixSignalRegistration _sigTermRegistration;
    private IHostApplicationLifetime ApplicationLifetime { get; }
    private IHostEnvironment Environment { get; }
    private ILogger Logger { get; }
    private ISystemdNotifier SystemdNotifier { get; }
    public SystemdLifetime(IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, ISystemdNotifier systemdNotifier, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
private IHostApplicationLifetime get_ApplicationLifetime();
    [CompilerGeneratedAttribute]
private IHostEnvironment get_Environment();
    [CompilerGeneratedAttribute]
private ILogger get_Logger();
    [CompilerGeneratedAttribute]
private ISystemdNotifier get_SystemdNotifier();
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual Task WaitForStartAsync(CancellationToken cancellationToken);
    private void RegisterShutdownHandlers();
    private void OnApplicationStarted();
    private void OnApplicationStopping();
    public sealed virtual void Dispose();
    private void UnregisterShutdownHandlers();
    private void HandlePosixSignal(PosixSignalContext context);
}
[UnsupportedOSPlatformAttribute("browser")]
public class Microsoft.Extensions.Hosting.Systemd.SystemdNotifier : object {
    private static string NOTIFY_SOCKET;
    private string _socketPath;
    public bool IsEnabled { get; }
    internal SystemdNotifier(string socketPath);
    public sealed virtual bool get_IsEnabled();
    public sealed virtual void Notify(ServiceState state);
    private static string GetNotifySocketPath();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.SystemdHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder UseSystemd(IHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IServiceCollection AddSystemd(IServiceCollection services);
    private static void AddSystemdLifetime(IServiceCollection services);
}
internal static class System.ThrowHelper : object {
    internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
    public static string IfNullOrWhitespace(string argument, string paramName);
}
