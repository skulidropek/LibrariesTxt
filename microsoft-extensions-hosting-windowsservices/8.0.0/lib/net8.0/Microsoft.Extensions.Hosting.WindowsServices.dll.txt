internal static class Interop : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.WindowsServiceLifetimeHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder UseWindowsService(IHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IHostBuilder UseWindowsService(IHostBuilder hostBuilder, Action`1<WindowsServiceLifetimeOptions> configure);
    [ExtensionAttribute]
public static IServiceCollection AddWindowsService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddWindowsService(IServiceCollection services, Action`1<WindowsServiceLifetimeOptions> configure);
    private static void AddWindowsServiceLifetime(IServiceCollection services, Action`1<WindowsServiceLifetimeOptions> configure);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Hosting.WindowsServiceLifetimeOptions : object {
    [CompilerGeneratedAttribute]
private string <ServiceName>k__BackingField;
    public string ServiceName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServiceName();
    [CompilerGeneratedAttribute]
public void set_ServiceName(string value);
}
[SupportedOSPlatformAttribute("windows")]
internal static class Microsoft.Extensions.Hosting.WindowsServices.Internal.Win32 : object {
    internal static Process GetParentProcess();
}
public static class Microsoft.Extensions.Hosting.WindowsServices.WindowsServiceHelpers : object {
    [SupportedOSPlatformGuardAttribute("windows")]
public static bool IsWindowsService();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SupportedOSPlatformAttribute("windows")]
public class Microsoft.Extensions.Hosting.WindowsServices.WindowsServiceLifetime : ServiceBase {
    private TaskCompletionSource`1<object> _delayStart;
    private TaskCompletionSource`1<object> _serviceDispatcherStopped;
    private ManualResetEventSlim _delayStop;
    private HostOptions _hostOptions;
    private bool _serviceStopRequested;
    [CompilerGeneratedAttribute]
private IHostApplicationLifetime <ApplicationLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostEnvironment <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private IHostApplicationLifetime ApplicationLifetime { get; }
    private IHostEnvironment Environment { get; }
    private ILogger Logger { get; }
    public WindowsServiceLifetime(IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, ILoggerFactory loggerFactory, IOptions`1<HostOptions> optionsAccessor);
    public WindowsServiceLifetime(IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, ILoggerFactory loggerFactory, IOptions`1<HostOptions> optionsAccessor, IOptions`1<WindowsServiceLifetimeOptions> windowsServiceOptionsAccessor);
    [CompilerGeneratedAttribute]
private IHostApplicationLifetime get_ApplicationLifetime();
    [CompilerGeneratedAttribute]
private IHostEnvironment get_Environment();
    [CompilerGeneratedAttribute]
private ILogger get_Logger();
    public sealed virtual Task WaitForStartAsync(CancellationToken cancellationToken);
    private void Run();
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.WindowsServices.WindowsServiceLifetime/<StopAsync>d__18")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    protected virtual void OnStart(String[] args);
    protected virtual void OnStop();
    protected virtual void OnShutdown();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private void <WaitForStartAsync>b__16_0();
    [CompilerGeneratedAttribute]
private void <WaitForStartAsync>b__16_1();
    [CompilerGeneratedAttribute]
private void <WaitForStartAsync>b__16_2();
}
internal static class System.ThrowHelper : object {
    internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
    public static string IfNullOrWhitespace(string argument, string paramName);
}
