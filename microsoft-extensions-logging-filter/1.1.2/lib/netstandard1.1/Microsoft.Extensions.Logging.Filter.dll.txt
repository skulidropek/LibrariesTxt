public class Microsoft.Extensions.Logging.Filter.Internal.FilterLogger : object {
    private ILogger _innerLogger;
    private string _categoryName;
    private IFilterLoggerSettings _settings;
    private Func`2<LogLevel, bool> _filter;
    public FilterLogger(ILogger innerLogger, string categoryName, IFilterLoggerSettings settings);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual IDisposable BeginScope(TState state);
    private Func`2<LogLevel, bool> GetFilter();
    [IteratorStateMachineAttribute("Microsoft.Extensions.Logging.Filter.Internal.FilterLogger/<GetKeyPrefixes>d__9")]
private IEnumerable`1<string> GetKeyPrefixes(string name);
}
public class Microsoft.Extensions.Logging.Filter.Internal.FilterLoggerFactory : object {
    private ILoggerFactory _innerLoggerFactory;
    private IFilterLoggerSettings _settings;
    public FilterLoggerFactory(ILoggerFactory innerLoggerFactory, IFilterLoggerSettings settings);
    public sealed virtual void AddProvider(ILoggerProvider provider);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
public class Microsoft.Extensions.Logging.Filter.Internal.FilterLoggerProvider : object {
    private ILoggerProvider _innerLoggerProvider;
    private IFilterLoggerSettings _settings;
    public FilterLoggerProvider(ILoggerProvider innerLoggerProvider, IFilterLoggerSettings settings);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.FilterLoggerFactoryExtensions : object {
    [ExtensionAttribute]
public static ILoggerFactory WithFilter(ILoggerFactory loggerFactory, IFilterLoggerSettings settings);
}
public class Microsoft.Extensions.Logging.FilterLoggerSettings : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, LogLevel> <Switches>k__BackingField;
    private IChangeToken Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken { get; }
    public IDictionary`2<string, LogLevel> Switches { get; public set; }
    private sealed virtual override IChangeToken Microsoft.Extensions.Logging.IFilterLoggerSettings.get_ChangeToken();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, LogLevel> get_Switches();
    [CompilerGeneratedAttribute]
public void set_Switches(IDictionary`2<string, LogLevel> value);
    public void Add(string categoryName, LogLevel logLevel);
    private sealed virtual override IFilterLoggerSettings Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload();
    public sealed virtual bool TryGetSwitch(string name, LogLevel& level);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, LogLevel>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Logging.LogLevel>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public interface Microsoft.Extensions.Logging.IFilterLoggerSettings {
    public IChangeToken ChangeToken { get; }
    public abstract virtual IChangeToken get_ChangeToken();
    public abstract virtual bool TryGetSwitch(string name, LogLevel& level);
    public abstract virtual IFilterLoggerSettings Reload();
}
