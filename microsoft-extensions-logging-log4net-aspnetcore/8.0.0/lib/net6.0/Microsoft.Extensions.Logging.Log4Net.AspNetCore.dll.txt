[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.Extensions.Log4NetProviderExtensions : object {
    [ExtensionAttribute]
public static ILogger CreateLogger(ILoggerProvider self);
}
public interface Microsoft.Extensions.Logging.ILog4NetLoggingEventFactory {
    public abstract virtual LoggingEvent CreateLoggingEvent(MessageCandidate`1& modreq(System.Runtime.InteropServices.InAttribute) messageCandidate, ILogger logger, Log4NetProviderOptions options, IExternalScopeProvider scopeProvider);
}
public interface Microsoft.Extensions.Logging.ILog4NetLogLevelTranslator {
    public abstract virtual Level TranslateLogLevel(LogLevel logLevel, Log4NetProviderOptions options);
}
[IsReadOnlyAttribute]
public class Microsoft.Extensions.Logging.Log4Net.AspNetCore.Entities.MessageCandidate`1 : ValueType {
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private EventId <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private TState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<TState, Exception, string> <Formatter>k__BackingField;
    public LogLevel LogLevel { get; }
    public EventId EventId { get; }
    public TState State { get; }
    public Exception Exception { get; }
    public Func`3<TState, Exception, string> Formatter { get; }
    public MessageCandidate`1(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    [CompilerGeneratedAttribute]
public LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public EventId get_EventId();
    [CompilerGeneratedAttribute]
public TState get_State();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public Func`3<TState, Exception, string> get_Formatter();
}
public class Microsoft.Extensions.Logging.Log4Net.AspNetCore.Entities.NodeInfo : object {
    [CompilerGeneratedAttribute]
private string <XPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NodeContent>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Attributes>k__BackingField;
    public string XPath { get; public set; }
    public string NodeContent { get; public set; }
    public Dictionary`2<string, string> Attributes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_XPath();
    [CompilerGeneratedAttribute]
public void set_XPath(string value);
    [CompilerGeneratedAttribute]
public string get_NodeContent();
    [CompilerGeneratedAttribute]
public void set_NodeContent(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(Dictionary`2<string, string> value);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.Log4Net.AspNetCore.Extensions.DocumentExtensions : object {
    [ExtensionAttribute]
public static XDocument ToXDocument(XmlDocument xmlDocument);
    [ExtensionAttribute]
public static XmlDocument ToXmlDocument(XDocument xDocument);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.Log4Net.AspNetCore.Extensions.LogExtensions : object {
    [ExtensionAttribute]
public static void Critical(ILog log, object message, Exception exception);
    [ExtensionAttribute]
public static void Trace(ILog log, object message, Exception exception);
}
internal class Microsoft.Extensions.Logging.Log4Net.AspNetCore.Scope.NullScope : object {
    [CompilerGeneratedAttribute]
private static NullScope <Instance>k__BackingField;
    internal static NullScope Instance { get; }
    private static NullScope();
    [CompilerGeneratedAttribute]
internal static NullScope get_Instance();
    public sealed virtual void Dispose();
}
internal class Microsoft.Extensions.Logging.Log4Net.AspNetCore.Scope.NullScopeProvider : object {
    [CompilerGeneratedAttribute]
private static NullScopeProvider <Instance>k__BackingField;
    internal static NullScopeProvider Instance { get; }
    private static NullScopeProvider();
    [CompilerGeneratedAttribute]
internal static NullScopeProvider get_Instance();
    public sealed virtual void ForEachScope(Action`2<object, TState> callback, TState state);
    public sealed virtual IDisposable Push(object state);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.Log4NetExtensions : object {
    [ExtensionAttribute]
public static ILoggerFactory AddLog4Net(ILoggerFactory factory);
    [ExtensionAttribute]
public static ILoggerFactory AddLog4Net(ILoggerFactory factory, string log4NetConfigFile);
    [ExtensionAttribute]
public static ILoggerFactory AddLog4Net(ILoggerFactory factory, string log4NetConfigFile, bool watch);
    [ExtensionAttribute]
public static ILoggerFactory AddLog4Net(ILoggerFactory factory, Log4NetProviderOptions options);
    [ExtensionAttribute]
public static ILoggingBuilder AddLog4Net(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddLog4Net(ILoggingBuilder builder, string log4NetConfigFile);
    [ExtensionAttribute]
public static ILoggingBuilder AddLog4Net(ILoggingBuilder builder, string log4NetConfigFile, bool watch);
    [ExtensionAttribute]
public static ILoggingBuilder AddLog4Net(ILoggingBuilder builder, Log4NetProviderOptions options);
}
public class Microsoft.Extensions.Logging.Log4NetLogger : object {
    private IExternalScopeProvider externalScopeProvider;
    private ILogger logger;
    private Log4NetProviderOptions options;
    public string Name { get; }
    internal Log4NetProviderOptions Options { get; }
    public Log4NetLogger(Log4NetProviderOptions options, IExternalScopeProvider externalScopeProvider);
    public string get_Name();
    internal Log4NetProviderOptions get_Options();
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    private static void EnsureValidFormatter(Func`3<TState, Exception, string> formatter);
}
public class Microsoft.Extensions.Logging.Log4NetLoggingEventFactory : object {
    protected static string DefaultScopeProperty;
    public LoggingEvent CreateLoggingEvent(MessageCandidate`1& messageCandidate, ILogger logger, Log4NetProviderOptions options, IExternalScopeProvider scopeProvider);
    protected virtual void EnrichWithScopes(LoggingEvent loggingEvent, IExternalScopeProvider scopeProvider);
    private static string JoinOldAndNewValue(string previousValue, string newValue);
    private sealed virtual override LoggingEvent Microsoft.Extensions.Logging.ILog4NetLoggingEventFactory.CreateLoggingEvent(MessageCandidate`1& modreq(System.Runtime.InteropServices.InAttribute) messageCandidate, ILogger logger, Log4NetProviderOptions options, IExternalScopeProvider scopeProvider);
    [CompilerGeneratedAttribute]
internal static bool <EnrichWithScopes>g__FromValueTuple|2_1(<>c__DisplayClass2_0& );
}
public class Microsoft.Extensions.Logging.Log4NetLogLevelTranslator : object {
    public sealed virtual Level TranslateLogLevel(LogLevel logLevel, Log4NetProviderOptions options);
}
public class Microsoft.Extensions.Logging.Log4NetProvider : object {
    private ConcurrentDictionary`2<string, Log4NetLogger> loggers;
    private bool disposedValue;
    private ILoggerRepository loggerRepository;
    private Log4NetProviderOptions options;
    [CompilerGeneratedAttribute]
private IExternalScopeProvider <ExternalScopeProvider>k__BackingField;
    public IExternalScopeProvider ExternalScopeProvider { get; private set; }
    public Log4NetProvider(string log4NetConfigFileName);
    public Log4NetProvider(Log4NetProviderOptions options);
    [CompilerGeneratedAttribute]
public IExternalScopeProvider get_ExternalScopeProvider();
    [CompilerGeneratedAttribute]
private void set_ExternalScopeProvider(IExternalScopeProvider value);
    protected virtual override void Finalize();
    public ILogger CreateLogger();
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private static XmlDocument UpdateNodesWithOverridingValues(XmlDocument configXmlDocument, IEnumerable`1<NodeInfo> overridingNodes);
    private static void AddOrUpdateAttributes(XElement node, NodeInfo nodeInfo);
    private static XmlDocument ParseLog4NetConfigFile(string filename);
    private static Assembly GetCallingAssemblyFromStartup();
    private Log4NetLogger CreateLoggerImplementation(string name);
    private static Assembly GetLoggingReferenceAssembly();
    private void SetOptionsIfValid(Log4NetProviderOptions options);
    private Log4NetProvider ConfigureLog4NetLibrary(Assembly assembly);
    private string CreateLog4NetFilePath(Assembly assembly);
    private Log4NetProvider CreateLoggerRepository(Assembly assembly);
    public sealed virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
}
public class Microsoft.Extensions.Logging.Log4NetProviderOptions : object {
    private static string DefaultLog4NetFileName;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Log4NetConfigFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoggerRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OverrideCriticalLevelWith>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NodeInfo> <PropertyOverrides>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Watch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExternalConfigurationSetup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseWebOrAppConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private ILog4NetLoggingEventFactory <LoggingEventFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ILog4NetLogLevelTranslator <LogLevelTranslator>k__BackingField;
    public string Name { get; public set; }
    public string Log4NetConfigFileName { get; public set; }
    public string LoggerRepository { get; public set; }
    public string OverrideCriticalLevelWith { get; public set; }
    public List`1<NodeInfo> PropertyOverrides { get; public set; }
    public bool Watch { get; public set; }
    public bool ExternalConfigurationSetup { get; public set; }
    public bool UseWebOrAppConfig { get; public set; }
    public ILog4NetLoggingEventFactory LoggingEventFactory { get; public set; }
    public ILog4NetLogLevelTranslator LogLevelTranslator { get; public set; }
    public Log4NetProviderOptions(string log4NetConfigFileName);
    public Log4NetProviderOptions(string log4NetConfigFileName, bool watch);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Log4NetConfigFileName();
    [CompilerGeneratedAttribute]
public void set_Log4NetConfigFileName(string value);
    [CompilerGeneratedAttribute]
public string get_LoggerRepository();
    [CompilerGeneratedAttribute]
public void set_LoggerRepository(string value);
    [CompilerGeneratedAttribute]
public string get_OverrideCriticalLevelWith();
    [CompilerGeneratedAttribute]
public void set_OverrideCriticalLevelWith(string value);
    [CompilerGeneratedAttribute]
public List`1<NodeInfo> get_PropertyOverrides();
    [CompilerGeneratedAttribute]
public void set_PropertyOverrides(List`1<NodeInfo> value);
    [CompilerGeneratedAttribute]
public bool get_Watch();
    [CompilerGeneratedAttribute]
public void set_Watch(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExternalConfigurationSetup();
    [CompilerGeneratedAttribute]
public void set_ExternalConfigurationSetup(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseWebOrAppConfig();
    [CompilerGeneratedAttribute]
public void set_UseWebOrAppConfig(bool value);
    [CompilerGeneratedAttribute]
public ILog4NetLoggingEventFactory get_LoggingEventFactory();
    [CompilerGeneratedAttribute]
public void set_LoggingEventFactory(ILog4NetLoggingEventFactory value);
    [CompilerGeneratedAttribute]
public ILog4NetLogLevelTranslator get_LogLevelTranslator();
    [CompilerGeneratedAttribute]
public void set_LogLevelTranslator(ILog4NetLogLevelTranslator value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
