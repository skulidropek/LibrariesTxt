[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ResilienceServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddResilienceEnricher(IServiceCollection services);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Resilience.Internal.ResilienceMetricsEnricher : MeteringEnricher {
    private IOutgoingRequestContext _outgoingRequestContext;
    private IExceptionSummarizer _exceptionSummarizer;
    public ResilienceMetricsEnricher(IOutgoingRequestContext outgoingRequestContext, IExceptionSummarizer exceptionSummarizer);
    public virtual void Enrich(EnrichmentContext`2& modreq(System.Runtime.InteropServices.InAttribute) context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Extensions.Resilience.Internal.ResilienceTagNames : object {
    public static string ErrorType;
    public static string DependencyName;
    public static string RequestName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Shared.DiagnosticIds.DiagnosticIds : object {
    internal static string UrlFormat;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Shared.Diagnostics.Throw : object {
    public static T IfNull(T argument, string paramName);
    public static TMember IfNullOrMemberNull(TParameter argument, TMember member, string paramName, string memberName);
    public static TMember IfMemberNull(TParameter argument, TMember member, string paramName, string memberName);
    public static string IfNullOrWhitespace(string argument, string paramName);
    public static string IfNullOrEmpty(string argument, string paramName);
    public static void IfBufferTooSmall(int bufferSize, int requiredSize, string paramName);
    [NullableContextAttribute("0")]
public static T IfOutOfRange(T argument, string paramName);
    [ExcludeFromCodeCoverageAttribute]
public static IEnumerable`1<T> IfNullOrEmpty(IEnumerable`1<T> argument, string paramName);
    [DoesNotReturnAttribute]
public static void ArgumentNullException(string paramName);
    [DoesNotReturnAttribute]
public static void ArgumentNullException(string paramName, string message);
    [DoesNotReturnAttribute]
public static void ArgumentOutOfRangeException(string paramName);
    [DoesNotReturnAttribute]
public static void ArgumentOutOfRangeException(string paramName, string message);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
public static void ArgumentOutOfRangeException(string paramName, object actualValue, string message);
    [DoesNotReturnAttribute]
public static void ArgumentException(string paramName, string message);
    [NullableContextAttribute("2")]
[DoesNotReturnAttribute]
public static void ArgumentException(string paramName, string message, Exception innerException);
    [DoesNotReturnAttribute]
public static void InvalidOperationException(string message);
    [DoesNotReturnAttribute]
public static void InvalidOperationException(string message, Exception innerException);
    public static int IfLessThan(int argument, int min, string paramName);
    public static int IfGreaterThan(int argument, int max, string paramName);
    public static int IfLessThanOrEqual(int argument, int min, string paramName);
    public static int IfGreaterThanOrEqual(int argument, int max, string paramName);
    public static int IfOutOfRange(int argument, int min, int max, string paramName);
    public static int IfZero(int argument, string paramName);
    public static UInt32 IfLessThan(UInt32 argument, UInt32 min, string paramName);
    public static UInt32 IfGreaterThan(UInt32 argument, UInt32 max, string paramName);
    public static UInt32 IfLessThanOrEqual(UInt32 argument, UInt32 min, string paramName);
    public static UInt32 IfGreaterThanOrEqual(UInt32 argument, UInt32 max, string paramName);
    public static UInt32 IfOutOfRange(UInt32 argument, UInt32 min, UInt32 max, string paramName);
    public static UInt32 IfZero(UInt32 argument, string paramName);
    public static long IfLessThan(long argument, long min, string paramName);
    public static long IfGreaterThan(long argument, long max, string paramName);
    public static long IfLessThanOrEqual(long argument, long min, string paramName);
    public static long IfGreaterThanOrEqual(long argument, long max, string paramName);
    public static long IfOutOfRange(long argument, long min, long max, string paramName);
    public static long IfZero(long argument, string paramName);
    public static ulong IfLessThan(ulong argument, ulong min, string paramName);
    public static ulong IfGreaterThan(ulong argument, ulong max, string paramName);
    public static ulong IfLessThanOrEqual(ulong argument, ulong min, string paramName);
    public static ulong IfGreaterThanOrEqual(ulong argument, ulong max, string paramName);
    public static ulong IfOutOfRange(ulong argument, ulong min, ulong max, string paramName);
    public static ulong IfZero(ulong argument, string paramName);
    public static double IfLessThan(double argument, double min, string paramName);
    public static double IfGreaterThan(double argument, double max, string paramName);
    public static double IfLessThanOrEqual(double argument, double min, string paramName);
    public static double IfGreaterThanOrEqual(double argument, double max, string paramName);
    public static double IfOutOfRange(double argument, double min, double max, string paramName);
    public static double IfZero(double argument, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Polly.ResilienceContextExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ResiliencePropertyKey`1<RequestMetadata> _requestMetadataKey;
    private static ResilienceContextExtensions();
    [ExtensionAttribute]
public static void SetRequestMetadata(ResilienceContext context, RequestMetadata requestMetadata);
    [ExtensionAttribute]
public static RequestMetadata GetRequestMetadata(ResilienceContext context);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
