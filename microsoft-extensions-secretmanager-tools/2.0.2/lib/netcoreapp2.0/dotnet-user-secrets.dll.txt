internal class Microsoft.Extensions.CommandLineUtils.AnsiConsole : object {
    private int _boldRecursion;
    private bool _useConsoleColor;
    [CompilerGeneratedAttribute]
private TextWriter <Writer>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleColor <OriginalForegroundColor>k__BackingField;
    public TextWriter Writer { get; }
    public ConsoleColor OriginalForegroundColor { get; }
    private AnsiConsole(TextWriter writer, bool useConsoleColor);
    public static AnsiConsole GetOutput(bool useConsoleColor);
    public static AnsiConsole GetError(bool useConsoleColor);
    [CompilerGeneratedAttribute]
public TextWriter get_Writer();
    [CompilerGeneratedAttribute]
public ConsoleColor get_OriginalForegroundColor();
    private void SetColor(ConsoleColor color);
    private void SetBold(bool bold);
    public void WriteLine(string message);
}
internal static class Microsoft.Extensions.CommandLineUtils.ArgumentEscaper : object {
    public static string EscapeAndConcatenate(IEnumerable`1<string> args);
    private static string EscapeSingleArg(string arg);
    private static bool ShouldSurroundWithQuotes(string argument);
    private static bool IsSurroundedWithQuotes(string argument);
    private static bool ContainsWhitespace(string argument);
}
internal class Microsoft.Extensions.CommandLineUtils.CommandArgument : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultipleValues>k__BackingField;
    public string Name { get; public set; }
    public bool ShowInHelpText { get; public set; }
    public string Description { get; public set; }
    public List`1<string> Values { get; private set; }
    public bool MultipleValues { get; public set; }
    public string Value { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_MultipleValues();
    [CompilerGeneratedAttribute]
public void set_MultipleValues(bool value);
    public string get_Value();
}
internal class Microsoft.Extensions.CommandLineUtils.CommandLineApplication : object {
    private bool _throwOnUnexpectedArg;
    [CompilerGeneratedAttribute]
private CommandLineApplication <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Syntax>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtendedHelpText>k__BackingField;
    public List`1<CommandOption> Options;
    [CompilerGeneratedAttribute]
private CommandOption <OptionHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOption <OptionVersion>k__BackingField;
    public List`1<CommandArgument> Arguments;
    public List`1<string> RemainingArguments;
    [CompilerGeneratedAttribute]
private bool <IsShowingInformation>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<int> <Invoke>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <LongVersionGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <ShortVersionGetter>k__BackingField;
    public List`1<CommandLineApplication> Commands;
    [CompilerGeneratedAttribute]
private bool <AllowArgumentSeparator>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Out>k__BackingField;
    [CompilerGeneratedAttribute]
private TextWriter <Error>k__BackingField;
    public CommandLineApplication Parent { get; public set; }
    public string Name { get; public set; }
    public string FullName { get; public set; }
    public string Syntax { get; public set; }
    public string Description { get; public set; }
    public bool ShowInHelpText { get; public set; }
    public string ExtendedHelpText { get; public set; }
    public CommandOption OptionHelp { get; private set; }
    public CommandOption OptionVersion { get; private set; }
    public bool IsShowingInformation { get; protected set; }
    public Func`1<int> Invoke { get; public set; }
    public Func`1<string> LongVersionGetter { get; public set; }
    public Func`1<string> ShortVersionGetter { get; public set; }
    public bool AllowArgumentSeparator { get; public set; }
    public TextWriter Out { get; public set; }
    public TextWriter Error { get; public set; }
    public CommandLineApplication(bool throwOnUnexpectedArg);
    [CompilerGeneratedAttribute]
public CommandLineApplication get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(CommandLineApplication value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_Syntax();
    [CompilerGeneratedAttribute]
public void set_Syntax(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [CompilerGeneratedAttribute]
public string get_ExtendedHelpText();
    [CompilerGeneratedAttribute]
public void set_ExtendedHelpText(string value);
    [CompilerGeneratedAttribute]
public CommandOption get_OptionHelp();
    [CompilerGeneratedAttribute]
private void set_OptionHelp(CommandOption value);
    [CompilerGeneratedAttribute]
public CommandOption get_OptionVersion();
    [CompilerGeneratedAttribute]
private void set_OptionVersion(CommandOption value);
    [CompilerGeneratedAttribute]
public bool get_IsShowingInformation();
    [CompilerGeneratedAttribute]
protected void set_IsShowingInformation(bool value);
    [CompilerGeneratedAttribute]
public Func`1<int> get_Invoke();
    [CompilerGeneratedAttribute]
public void set_Invoke(Func`1<int> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_LongVersionGetter();
    [CompilerGeneratedAttribute]
public void set_LongVersionGetter(Func`1<string> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_ShortVersionGetter();
    [CompilerGeneratedAttribute]
public void set_ShortVersionGetter(Func`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_AllowArgumentSeparator();
    [CompilerGeneratedAttribute]
public void set_AllowArgumentSeparator(bool value);
    [CompilerGeneratedAttribute]
public TextWriter get_Out();
    [CompilerGeneratedAttribute]
public void set_Out(TextWriter value);
    [CompilerGeneratedAttribute]
public TextWriter get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(TextWriter value);
    public IEnumerable`1<CommandOption> GetOptions();
    public CommandLineApplication Command(string name, Action`1<CommandLineApplication> configuration, bool throwOnUnexpectedArg);
    public CommandOption Option(string template, string description, CommandOptionType optionType);
    public CommandOption Option(string template, string description, CommandOptionType optionType, bool inherited);
    public CommandOption Option(string template, string description, CommandOptionType optionType, Action`1<CommandOption> configuration);
    public CommandOption Option(string template, string description, CommandOptionType optionType, Action`1<CommandOption> configuration, bool inherited);
    public CommandArgument Argument(string name, string description, bool multipleValues);
    public CommandArgument Argument(string name, string description, Action`1<CommandArgument> configuration, bool multipleValues);
    public void OnExecute(Func`1<int> invoke);
    public void OnExecute(Func`1<Task`1<int>> invoke);
    public int Execute(String[] args);
    public CommandOption HelpOption(string template);
    public CommandOption VersionOption(string template, string shortFormVersion, string longFormVersion);
    public CommandOption VersionOption(string template, Func`1<string> shortFormVersionGetter, Func`1<string> longFormVersionGetter);
    public void ShowHint();
    public void ShowHelp(string commandName);
    public virtual string GetHelpText(string commandName);
    public void ShowVersion();
    public string GetFullNameAndVersion();
    public void ShowRootCommandFullNameAndVersion();
    private void HandleUnexpectedArg(CommandLineApplication command, String[] args, int index, string argTypeName);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.CommandLineUtils.CommandLineApplicationExtensions : object {
    [ExtensionAttribute]
public static CommandOption HelpOption(CommandLineApplication app);
    [ExtensionAttribute]
public static CommandOption VerboseOption(CommandLineApplication app);
    [ExtensionAttribute]
public static void OnExecute(CommandLineApplication app, Action action);
    [ExtensionAttribute]
public static void VersionOptionFromAssemblyAttributes(CommandLineApplication app, Assembly assembly);
    private static string GetInformationalVersion(Assembly assembly);
}
internal class Microsoft.Extensions.CommandLineUtils.CommandOption : object {
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LongName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SymbolName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandOptionType <OptionType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowInHelpText>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inherited>k__BackingField;
    public string Template { get; public set; }
    public string ShortName { get; public set; }
    public string LongName { get; public set; }
    public string SymbolName { get; public set; }
    public string ValueName { get; public set; }
    public string Description { get; public set; }
    public List`1<string> Values { get; private set; }
    public CommandOptionType OptionType { get; private set; }
    public bool ShowInHelpText { get; public set; }
    public bool Inherited { get; public set; }
    public CommandOption(string template, CommandOptionType optionType);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    [CompilerGeneratedAttribute]
public string get_ShortName();
    [CompilerGeneratedAttribute]
public void set_ShortName(string value);
    [CompilerGeneratedAttribute]
public string get_LongName();
    [CompilerGeneratedAttribute]
public void set_LongName(string value);
    [CompilerGeneratedAttribute]
public string get_SymbolName();
    [CompilerGeneratedAttribute]
public void set_SymbolName(string value);
    [CompilerGeneratedAttribute]
public string get_ValueName();
    [CompilerGeneratedAttribute]
public void set_ValueName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(List`1<string> value);
    [CompilerGeneratedAttribute]
public CommandOptionType get_OptionType();
    [CompilerGeneratedAttribute]
private void set_OptionType(CommandOptionType value);
    [CompilerGeneratedAttribute]
public bool get_ShowInHelpText();
    [CompilerGeneratedAttribute]
public void set_ShowInHelpText(bool value);
    [CompilerGeneratedAttribute]
public bool get_Inherited();
    [CompilerGeneratedAttribute]
public void set_Inherited(bool value);
    public bool TryParse(string value);
    public bool HasValue();
    public string Value();
    private bool IsEnglishLetter(char c);
}
internal enum Microsoft.Extensions.CommandLineUtils.CommandOptionType : Enum {
    public int value__;
    public static CommandOptionType MultipleValue;
    public static CommandOptionType SingleValue;
    public static CommandOptionType NoValue;
}
internal class Microsoft.Extensions.CommandLineUtils.CommandParsingException : Exception {
    [CompilerGeneratedAttribute]
private CommandLineApplication <Command>k__BackingField;
    public CommandLineApplication Command { get; }
    public CommandParsingException(CommandLineApplication command, string message);
    [CompilerGeneratedAttribute]
public CommandLineApplication get_Command();
}
internal static class Microsoft.Extensions.CommandLineUtils.DotNetMuxer : object {
    private static string MuxerName;
    [CompilerGeneratedAttribute]
private static string <MuxerPath>k__BackingField;
    public static string MuxerPath { get; }
    private static DotNetMuxer();
    [CompilerGeneratedAttribute]
public static string get_MuxerPath();
    public static string MuxerPathOrDefault();
    private static string TryFindMuxerPath();
}
public class Microsoft.Extensions.SecretManager.Tools.CommandLineOptions : object {
    [CompilerGeneratedAttribute]
private ICommand <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVerbose>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Project>k__BackingField;
    public ICommand Command { get; public set; }
    public string Configuration { get; private set; }
    public string Id { get; private set; }
    public bool IsHelp { get; private set; }
    public bool IsVerbose { get; private set; }
    public string Project { get; private set; }
    [CompilerGeneratedAttribute]
public ICommand get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(ICommand value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
private void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public bool get_IsHelp();
    [CompilerGeneratedAttribute]
private void set_IsHelp(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsVerbose();
    [CompilerGeneratedAttribute]
private void set_IsVerbose(bool value);
    [CompilerGeneratedAttribute]
public string get_Project();
    [CompilerGeneratedAttribute]
private void set_Project(string value);
    public static CommandLineOptions Parse(String[] args, IConsole console);
}
internal class Microsoft.Extensions.SecretManager.Tools.Internal.ClearCommand : object {
    public static void Configure(CommandLineApplication command, CommandLineOptions options);
    public sealed virtual void Execute(CommandContext context);
}
public class Microsoft.Extensions.SecretManager.Tools.Internal.CommandContext : object {
    [CompilerGeneratedAttribute]
private IConsole <Console>k__BackingField;
    [CompilerGeneratedAttribute]
private IReporter <Reporter>k__BackingField;
    [CompilerGeneratedAttribute]
private SecretsStore <SecretStore>k__BackingField;
    public IConsole Console { get; }
    public IReporter Reporter { get; }
    public SecretsStore SecretStore { get; }
    public CommandContext(SecretsStore store, IReporter reporter, IConsole console);
    [CompilerGeneratedAttribute]
public IConsole get_Console();
    [CompilerGeneratedAttribute]
public IReporter get_Reporter();
    [CompilerGeneratedAttribute]
public SecretsStore get_SecretStore();
}
public interface Microsoft.Extensions.SecretManager.Tools.Internal.ICommand {
    public abstract virtual void Execute(CommandContext context);
}
internal class Microsoft.Extensions.SecretManager.Tools.Internal.ListCommand : object {
    private bool _jsonOutput;
    public ListCommand(bool jsonOutput);
    public static void Configure(CommandLineApplication command, CommandLineOptions options);
    public sealed virtual void Execute(CommandContext context);
    private void ReportJson(CommandContext context);
}
internal class Microsoft.Extensions.SecretManager.Tools.Internal.MsBuildProjectFinder : object {
    private string _directory;
    public MsBuildProjectFinder(string directory);
    public string FindMsBuildProject(string project);
}
public class Microsoft.Extensions.SecretManager.Tools.Internal.ProjectIdResolver : object {
    private static string DefaultConfig;
    private IReporter _reporter;
    private string _workingDirectory;
    public ProjectIdResolver(IReporter reporter, string workingDirectory);
    public string Resolve(string project, string configuration);
    private void EnsureProjectExtensionTargetsExist(string projectFile);
    private static void TryDelete(string file);
}
public class Microsoft.Extensions.SecretManager.Tools.Internal.ReadableJsonConfigurationProvider : JsonConfigurationProvider {
    public IDictionary`2<string, string> CurrentData { get; }
    public IDictionary`2<string, string> get_CurrentData();
}
internal class Microsoft.Extensions.SecretManager.Tools.Internal.RemoveCommand : object {
    private string _keyName;
    public RemoveCommand(string keyName);
    public static void Configure(CommandLineApplication command, CommandLineOptions options);
    public sealed virtual void Execute(CommandContext context);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Extensions.SecretManager.Tools.Internal.SecretsStore : object {
    private string _secretsFilePath;
    private IDictionary`2<string, string> _secrets;
    public string Item { get; }
    public int Count { get; }
    public SecretsStore(string userSecretsId, IReporter reporter);
    public string get_Item(string key);
    public int get_Count();
    public bool ContainsKey(string key);
    public IEnumerable`1<KeyValuePair`2<string, string>> AsEnumerable();
    public void Clear();
    public void Set(string key, string value);
    public void Remove(string key);
    public virtual void Save();
    protected virtual IDictionary`2<string, string> Load(string userSecretsId);
}
internal class Microsoft.Extensions.SecretManager.Tools.Internal.SetCommand : object {
    public static void Configure(CommandLineApplication command, CommandLineOptions options, IConsole console);
}
public class Microsoft.Extensions.SecretManager.Tools.Program : object {
    private IConsole _console;
    private string _workingDirectory;
    public Program(IConsole console, string workingDirectory);
    public static int Main(String[] args);
    public bool TryRun(String[] args, Int32& returnCode);
    internal int RunInternal(String[] args);
    private IReporter CreateReporter(bool verbose);
    internal string ResolveId(CommandLineOptions options, IReporter reporter);
}
internal static class Microsoft.Extensions.SecretManager.Tools.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string Error_Command_Failed { get; }
    internal static string Error_MissingArgument { get; }
    internal static string Error_Missing_Secret { get; }
    internal static string Error_MultipleProjectsFound { get; }
    internal static string Error_No_Secrets_Found { get; }
    internal static string Error_NoProjectsFound { get; }
    internal static string Error_ProjectMissingId { get; }
    internal static string Error_ProjectPath_NotFound { get; }
    internal static string Error_ProjectFailedToLoad { get; }
    internal static string Message_Project_File_Path { get; }
    internal static string Message_Saved_Secret { get; }
    internal static string Message_Saved_Secrets { get; }
    internal static string Message_Secret_File_Path { get; }
    internal static string Message_Secret_Value_Format { get; }
    private static Resources();
    internal static string get_Error_Command_Failed();
    internal static string FormatError_Command_Failed(object message);
    internal static string get_Error_MissingArgument();
    internal static string FormatError_MissingArgument(object name);
    internal static string get_Error_Missing_Secret();
    internal static string FormatError_Missing_Secret(object key);
    internal static string get_Error_MultipleProjectsFound();
    internal static string FormatError_MultipleProjectsFound(object projectPath);
    internal static string get_Error_No_Secrets_Found();
    internal static string FormatError_No_Secrets_Found();
    internal static string get_Error_NoProjectsFound();
    internal static string FormatError_NoProjectsFound(object projectPath);
    internal static string get_Error_ProjectMissingId();
    internal static string FormatError_ProjectMissingId(object project);
    internal static string get_Error_ProjectPath_NotFound();
    internal static string FormatError_ProjectPath_NotFound(object path);
    internal static string get_Error_ProjectFailedToLoad();
    internal static string FormatError_ProjectFailedToLoad(object project);
    internal static string get_Message_Project_File_Path();
    internal static string FormatMessage_Project_File_Path(object project);
    internal static string get_Message_Saved_Secret();
    internal static string FormatMessage_Saved_Secret(object key, object value);
    internal static string get_Message_Saved_Secrets();
    internal static string FormatMessage_Saved_Secrets(object number);
    internal static string get_Message_Secret_File_Path();
    internal static string FormatMessage_Secret_File_Path(object secretsFilePath);
    internal static string get_Message_Secret_Value_Format();
    internal static string FormatMessage_Secret_Value_Format(object key, object value);
    private static string GetString(string name, String[] formatterNames);
}
public static class Microsoft.Extensions.Tools.Internal.CliContext : object {
    public static bool IsGlobalVerbose();
}
public class Microsoft.Extensions.Tools.Internal.ConsoleReporter : object {
    private object _writeLock;
    [CompilerGeneratedAttribute]
private IConsole <Console>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVerbose>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQuiet>k__BackingField;
    protected IConsole Console { get; }
    public bool IsVerbose { get; public set; }
    public bool IsQuiet { get; public set; }
    public ConsoleReporter(IConsole console);
    public ConsoleReporter(IConsole console, bool verbose, bool quiet);
    [CompilerGeneratedAttribute]
protected IConsole get_Console();
    [CompilerGeneratedAttribute]
public bool get_IsVerbose();
    [CompilerGeneratedAttribute]
public void set_IsVerbose(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsQuiet();
    [CompilerGeneratedAttribute]
public void set_IsQuiet(bool value);
    protected virtual void WriteLine(TextWriter writer, string message, Nullable`1<ConsoleColor> color);
    public virtual void Error(string message);
    public virtual void Warn(string message);
    public virtual void Output(string message);
    public virtual void Verbose(string message);
}
public static class Microsoft.Extensions.Tools.Internal.DebugHelper : object {
    [ConditionalAttribute("DEBUG")]
public static void HandleDebugSwitch(String[]& args);
}
internal static class Microsoft.Extensions.Tools.Internal.Ensure : object {
    public static T NotNull(T obj, string paramName);
    public static string NotNullOrEmpty(string obj, string paramName);
}
public interface Microsoft.Extensions.Tools.Internal.IConsole {
    public TextWriter Out { get; }
    public TextWriter Error { get; }
    public TextReader In { get; }
    public bool IsInputRedirected { get; }
    public bool IsOutputRedirected { get; }
    public bool IsErrorRedirected { get; }
    public ConsoleColor ForegroundColor { get; public set; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_CancelKeyPress(ConsoleCancelEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CancelKeyPress(ConsoleCancelEventHandler value);
    public abstract virtual TextWriter get_Out();
    public abstract virtual TextWriter get_Error();
    public abstract virtual TextReader get_In();
    public abstract virtual bool get_IsInputRedirected();
    public abstract virtual bool get_IsOutputRedirected();
    public abstract virtual bool get_IsErrorRedirected();
    public abstract virtual ConsoleColor get_ForegroundColor();
    public abstract virtual void set_ForegroundColor(ConsoleColor value);
    public abstract virtual void ResetColor();
}
public interface Microsoft.Extensions.Tools.Internal.IReporter {
    public abstract virtual void Verbose(string message);
    public abstract virtual void Output(string message);
    public abstract virtual void Warn(string message);
    public abstract virtual void Error(string message);
}
public class Microsoft.Extensions.Tools.Internal.PhysicalConsole : object {
    [CompilerGeneratedAttribute]
private static IConsole <Singleton>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleCancelEventHandler CancelKeyPress;
    public static IConsole Singleton { get; }
    public TextWriter Error { get; }
    public TextReader In { get; }
    public TextWriter Out { get; }
    public bool IsInputRedirected { get; }
    public bool IsOutputRedirected { get; }
    public bool IsErrorRedirected { get; }
    public ConsoleColor ForegroundColor { get; public set; }
    private static PhysicalConsole();
    [CompilerGeneratedAttribute]
public static IConsole get_Singleton();
    [CompilerGeneratedAttribute]
public sealed virtual void add_CancelKeyPress(ConsoleCancelEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CancelKeyPress(ConsoleCancelEventHandler value);
    public sealed virtual TextWriter get_Error();
    public sealed virtual TextReader get_In();
    public sealed virtual TextWriter get_Out();
    public sealed virtual bool get_IsInputRedirected();
    public sealed virtual bool get_IsOutputRedirected();
    public sealed virtual bool get_IsErrorRedirected();
    public sealed virtual ConsoleColor get_ForegroundColor();
    public sealed virtual void set_ForegroundColor(ConsoleColor value);
    public sealed virtual void ResetColor();
    [CompilerGeneratedAttribute]
private void <.ctor>b__0_0(object o, ConsoleCancelEventArgs e);
}
