[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Gen.Logging.Emission.Emitter : EmitterBase {
    private static string LoggerMessageHelperType;
    private StringBuilderPool _sbPool;
    private Dictionary`2<string, string> _classificationMap;
    private static Char[] _specialCharsForXmlDocumentation;
    private static Emitter();
    public string Emit(IEnumerable`1<LoggingType> logTypes, CancellationToken cancellationToken);
    private void GenType(LoggingType lt);
    private void GenAttributeClassifications(LoggingType lt);
    private void GenLogMethod(LoggingMethod lm);
    private string MakeClassificationValue(HashSet`1<string> classificationTypes);
    private void GenParameters(LoggingMethod lm);
    private string PropertyChainToString(IEnumerable`1<LoggingProperty> propertyChain, LoggingProperty leafProperty, string separator, string nonNullSeparator, bool omitReferenceName);
    internal static string EscapeMessageString(string s);
    internal static string EscapeMessageStringForXmlDocumentation(string s);
    internal static string GetLoggerMethodLogLevel(LoggingMethod lm);
    internal static string GetLoggerMethodLogLevelForXmlDocumentation(LoggingMethod lm);
    internal static string EncodeTypeName(string typeName);
    internal static string PickUniqueName(string baseName, IEnumerable`1<string> potentialConflicts);
    [CompilerGeneratedAttribute]
internal static int <GenLogMethod>g__GetNonRandomizedHashCode|6_1(string s);
    [CompilerGeneratedAttribute]
internal static bool <GenLogMethod>g__ShouldStringifyParameter|6_2(LoggingMethodParameter p);
    [CompilerGeneratedAttribute]
internal static bool <GenLogMethod>g__ShouldStringifyProperty|6_3(LoggingProperty p);
    [CompilerGeneratedAttribute]
internal static string <GenLogMethod>g__ConvertParameterToString|6_4(LoggingMethodParameter lp, string arg);
    [CompilerGeneratedAttribute]
internal static string <GenLogMethod>g__ConvertPropertyToString|6_5(LoggingProperty lp, string arg);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<string, string> <GenLogMethod>g__GetException|6_6(LoggingMethod lm);
    [CompilerGeneratedAttribute]
internal static bool <GenLogMethod>g__NeedsASlot|6_7(LoggingMethodParameter p);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<string, bool> <GenLogMethod>g__GetLogger|6_10(LoggingMethod lm);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Gen.Logging.Emission.StringBuilderPool : object {
    private Stack`1<StringBuilder> _builders;
    public StringBuilder GetStringBuilder();
    public void ReturnStringBuilder(StringBuilder sb);
}
[GeneratorAttribute]
public class Microsoft.Gen.Logging.LoggingGenerator : object {
    public sealed virtual void Initialize(IncrementalGeneratorInitializationContext context);
    [NullableContextAttribute("1")]
private static void HandleAnnotatedTypes(Compilation compilation, ImmutableArray`1<TypeDeclarationSyntax> types, SourceProductionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Name}")]
internal class Microsoft.Gen.Logging.Model.LoggingMethod : object {
    public List`1<LoggingMethodParameter> Parameters;
    public List`1<string> Templates;
    public string Name;
    public string Message;
    public Nullable`1<int> Level;
    public Nullable`1<int> EventId;
    [NullableAttribute("2")]
public string EventName;
    public bool SkipEnabledCheck;
    public bool IsExtensionMethod;
    public bool IsStatic;
    public string Modifiers;
    public string LoggerMember;
    public bool LoggerMemberNullable;
    public bool HasXmlDocumentation;
    public LoggingMethodParameter GetParameterForTemplate(string templateName);
    public List`1<string> GetTemplatesForParameter(LoggingMethodParameter lp);
    public List`1<string> GetTemplatesForParameter(string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{ParameterName}")]
internal class Microsoft.Gen.Logging.Model.LoggingMethodParameter : object {
    public string ParameterName;
    public string TagName;
    public string Type;
    [NullableAttribute("2")]
public string Qualifier;
    public bool NeedsAtSign;
    public bool IsLogger;
    public bool IsException;
    public bool IsLogLevel;
    public bool IsEnumerable;
    public bool IsNullable;
    public bool IsReference;
    public bool ImplementsIConvertible;
    public bool ImplementsIFormattable;
    public bool ImplementsISpanFormattable;
    public bool HasCustomToString;
    public bool SkipNullProperties;
    public bool OmitReferenceName;
    public bool UsedAsTemplate;
    public HashSet`1<string> ClassificationAttributeTypes;
    public List`1<LoggingProperty> Properties;
    [NullableAttribute("2")]
public TagProvider TagProvider;
    public string ParameterNameWithAtIfNeeded { get; }
    public string PotentiallyNullableType { get; }
    public bool IsNormalParameter { get; }
    public bool HasDataClassification { get; }
    public bool HasProperties { get; }
    public bool HasTagProvider { get; }
    public bool PotentiallyNull { get; }
    public bool IsStringifiable { get; }
    public string get_ParameterNameWithAtIfNeeded();
    public string get_PotentiallyNullableType();
    public bool get_IsNormalParameter();
    public bool get_HasDataClassification();
    public bool get_HasProperties();
    public bool get_HasTagProvider();
    public bool get_PotentiallyNull();
    public bool get_IsStringifiable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Gen.Logging.Model.LoggingMethodParameterExtensions : object {
    [ExtensionAttribute]
internal static void TraverseParameterPropertiesTransitively(LoggingMethodParameter parameter, Action`2<IEnumerable`1<LoggingProperty>, LoggingProperty> callback);
    private static void TraverseParameterPropertiesTransitively(LinkedList`1<LoggingProperty> propertyChain, IReadOnlyCollection`1<LoggingProperty> propertiesToLog, Action`2<IEnumerable`1<LoggingProperty>, LoggingProperty> callback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{PropertyName}")]
internal class Microsoft.Gen.Logging.Model.LoggingProperty : object {
    public string PropertyName;
    public string TagName;
    public string Type;
    public HashSet`1<string> ClassificationAttributeTypes;
    public bool NeedsAtSign;
    public bool IsNullable;
    public bool IsReference;
    public bool IsEnumerable;
    public bool ImplementsIConvertible;
    public bool ImplementsIFormattable;
    public bool ImplementsISpanFormattable;
    public bool HasCustomToString;
    public List`1<LoggingProperty> Properties;
    public bool OmitReferenceName;
    [NullableAttribute("2")]
public TagProvider TagProvider;
    public bool HasDataClassification { get; }
    public bool HasProperties { get; }
    public bool HasTagProvider { get; }
    public string PropertyNameWithAt { get; }
    public bool PotentiallyNull { get; }
    public bool IsStringifiable { get; }
    public bool get_HasDataClassification();
    public bool get_HasProperties();
    public bool get_HasTagProvider();
    public string get_PropertyNameWithAt();
    public bool get_PotentiallyNull();
    public bool get_IsStringifiable();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{Name}")]
internal class Microsoft.Gen.Logging.Model.LoggingType : object {
    public List`1<LoggingMethod> Methods;
    public List`1<string> AllMembers;
    public string Keyword;
    public string Namespace;
    public string Name;
    [NullableAttribute("2")]
public LoggingType Parent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Gen.Logging.Model.TagProvider : object {
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContainingType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string MethodName { get; public set; }
    public string ContainingType { get; public set; }
    public TagProvider(string MethodName, string ContainingType);
    [CompilerGeneratedAttribute]
private TagProvider(TagProvider original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MethodName(string value);
    [CompilerGeneratedAttribute]
public string get_ContainingType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ContainingType(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TagProvider left, TagProvider right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TagProvider left, TagProvider right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TagProvider other);
    [CompilerGeneratedAttribute]
public TagProvider <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& MethodName, String& ContainingType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Gen.Logging.Parsing.AttributeProcessors : object {
    private static string MessageProperty;
    private static string EventNameProperty;
    private static string EventIdProperty;
    private static string LevelProperty;
    private static string SkipEnabledCheckProperty;
    private static string SkipNullProperties;
    private static string OmitReferenceName;
    private static string Transitive;
    private static int LogLevelError;
    private static int LogLevelCritical;
    public static ValueTuple`5<Nullable`1<int>, Nullable`1<int>, string, string, bool> ExtractLoggerMessageAttributeValues(AttributeData attr, SymbolHolder symbols);
    [NullableContextAttribute("0")]
public static ValueTuple`3<bool, bool, bool> ExtractLogPropertiesAttributeValues(AttributeData attr);
    public static ValueTuple`3<bool, ITypeSymbol, string> ExtractTagProviderAttributeValues(AttributeData attr);
    public static string ExtractTagNameAttributeValues(AttributeData attr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Gen.Logging.Parsing.DiagDescriptors : DiagDescriptorsBase {
    private static string Category;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ShouldntMentionLogLevelInMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <MissingRequiredType>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ShouldntReuseEventIds>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LoggingMethodMustReturnVoid>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <MissingLoggerParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LoggingMethodShouldBeStatic>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LoggingMethodMustBePartial>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LoggingMethodIsGeneric>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <RedundantQualifierInMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ShouldntMentionExceptionInMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <TemplateHasNoCorrespondingParameter>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ParameterHasNoCorrespondingTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LoggingMethodHasBody>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <MissingLogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ShouldntMentionLoggerInMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <MissingLoggerMember>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <MultipleLoggerMembers>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <CantUseDataClassificationWithLogPropertiesOrTagProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <InvalidTypeToLogProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LogPropertiesInvalidUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LogPropertiesParameterSkipped>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LogPropertiesCycleDetected>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <TagProviderMethodNotFound>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <TagProviderMethodInaccessible>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <TagProviderMethodInvalidSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LoggingMethodParameterRefKind>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <TagProviderWithRedaction>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ShouldntReuseEventNames>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LogPropertiesHiddenPropertyDetected>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <TagNameCollision>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <EmptyLoggingMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <TemplateStartsWithAtSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <CantMixAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <TagProviderInvalidUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <InvalidAttributeUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <RecordTypeSensitiveArgumentIsInTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <DefaultToString>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <MalformedFormatStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <PrimaryConstructorParameterLoggerHidden>k__BackingField;
    public static DiagnosticDescriptor ShouldntMentionLogLevelInMessage { get; }
    public static DiagnosticDescriptor MissingRequiredType { get; }
    public static DiagnosticDescriptor ShouldntReuseEventIds { get; }
    public static DiagnosticDescriptor LoggingMethodMustReturnVoid { get; }
    public static DiagnosticDescriptor MissingLoggerParameter { get; }
    public static DiagnosticDescriptor LoggingMethodShouldBeStatic { get; }
    public static DiagnosticDescriptor LoggingMethodMustBePartial { get; }
    public static DiagnosticDescriptor LoggingMethodIsGeneric { get; }
    public static DiagnosticDescriptor RedundantQualifierInMessage { get; }
    public static DiagnosticDescriptor ShouldntMentionExceptionInMessage { get; }
    public static DiagnosticDescriptor TemplateHasNoCorrespondingParameter { get; }
    public static DiagnosticDescriptor ParameterHasNoCorrespondingTemplate { get; }
    public static DiagnosticDescriptor LoggingMethodHasBody { get; }
    public static DiagnosticDescriptor MissingLogLevel { get; }
    public static DiagnosticDescriptor ShouldntMentionLoggerInMessage { get; }
    public static DiagnosticDescriptor MissingLoggerMember { get; }
    public static DiagnosticDescriptor MultipleLoggerMembers { get; }
    public static DiagnosticDescriptor CantUseDataClassificationWithLogPropertiesOrTagProvider { get; }
    public static DiagnosticDescriptor InvalidTypeToLogProperties { get; }
    public static DiagnosticDescriptor LogPropertiesInvalidUsage { get; }
    public static DiagnosticDescriptor LogPropertiesParameterSkipped { get; }
    public static DiagnosticDescriptor LogPropertiesCycleDetected { get; }
    public static DiagnosticDescriptor TagProviderMethodNotFound { get; }
    public static DiagnosticDescriptor TagProviderMethodInaccessible { get; }
    public static DiagnosticDescriptor TagProviderMethodInvalidSignature { get; }
    public static DiagnosticDescriptor LoggingMethodParameterRefKind { get; }
    public static DiagnosticDescriptor TagProviderWithRedaction { get; }
    public static DiagnosticDescriptor ShouldntReuseEventNames { get; }
    public static DiagnosticDescriptor LogPropertiesHiddenPropertyDetected { get; }
    public static DiagnosticDescriptor TagNameCollision { get; }
    public static DiagnosticDescriptor EmptyLoggingMethod { get; }
    public static DiagnosticDescriptor TemplateStartsWithAtSymbol { get; }
    public static DiagnosticDescriptor CantMixAttributes { get; }
    public static DiagnosticDescriptor TagProviderInvalidUsage { get; }
    public static DiagnosticDescriptor InvalidAttributeUsage { get; }
    public static DiagnosticDescriptor RecordTypeSensitiveArgumentIsInTemplate { get; }
    public static DiagnosticDescriptor DefaultToString { get; }
    public static DiagnosticDescriptor MalformedFormatStrings { get; }
    public static DiagnosticDescriptor PrimaryConstructorParameterLoggerHidden { get; }
    private static DiagDescriptors();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ShouldntMentionLogLevelInMessage();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_MissingRequiredType();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ShouldntReuseEventIds();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LoggingMethodMustReturnVoid();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_MissingLoggerParameter();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LoggingMethodShouldBeStatic();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LoggingMethodMustBePartial();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LoggingMethodIsGeneric();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_RedundantQualifierInMessage();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ShouldntMentionExceptionInMessage();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_TemplateHasNoCorrespondingParameter();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ParameterHasNoCorrespondingTemplate();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LoggingMethodHasBody();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_MissingLogLevel();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ShouldntMentionLoggerInMessage();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_MissingLoggerMember();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_MultipleLoggerMembers();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_CantUseDataClassificationWithLogPropertiesOrTagProvider();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_InvalidTypeToLogProperties();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LogPropertiesInvalidUsage();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LogPropertiesParameterSkipped();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LogPropertiesCycleDetected();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_TagProviderMethodNotFound();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_TagProviderMethodInaccessible();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_TagProviderMethodInvalidSignature();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LoggingMethodParameterRefKind();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_TagProviderWithRedaction();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ShouldntReuseEventNames();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LogPropertiesHiddenPropertyDetected();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_TagNameCollision();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_EmptyLoggingMethod();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_TemplateStartsWithAtSymbol();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_CantMixAttributes();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_TagProviderInvalidUsage();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_InvalidAttributeUsage();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_RecordTypeSensitiveArgumentIsInTemplate();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_DefaultToString();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_MalformedFormatStrings();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_PrimaryConstructorParameterLoggerHidden();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Gen.Logging.Parsing.Parser : object {
    private CancellationToken _cancellationToken;
    private Compilation _compilation;
    private Action`1<Diagnostic> _reportDiagnostic;
    private bool _failedMethod;
    private static HashSet`1<TypeKind> _allowedTypeKinds;
    public Parser(Compilation compilation, Action`1<Diagnostic> reportDiagnostic, CancellationToken cancellationToken);
    private static Parser();
    public IReadOnlyList`1<LoggingType> GetLogTypes(IEnumerable`1<TypeDeclarationSyntax> types);
    private static bool HasXmlDocumentation(MethodDeclarationSyntax method);
    private static List`1<INamedTypeSymbol> GetDataClassificationAttributes(ISymbol symbol, SymbolHolder symbols);
    private void CheckTagNamesAreUnique(LoggingMethod lm, Dictionary`2<LoggingMethodParameter, IParameterSymbol> parameterSymbols);
    private LoggingMethodParameter ProcessParameter(LoggingMethod lm, IParameterSymbol paramSymbol, SymbolHolder symbols, MethodParsingState& parsingState);
    private Location GetLoggerMessageAttribute(MethodDeclarationSyntax methodSyntax, SemanticModel sm, SymbolHolder symbols);
    private ValueTuple`3<string, ISymbol, bool> FindLoggerMember(SemanticModel sm, TypeDeclarationSyntax classDec, ITypeSymbol loggerSymbol);
    [NullableContextAttribute("2")]
private void Diag(DiagnosticDescriptor desc, Location location, Object[] messageArgs);
    internal bool ProcessLogPropertiesForParameter(AttributeData logPropertiesAttribute, LoggingMethod lm, LoggingMethodParameter lp, IParameterSymbol paramSymbol, SymbolHolder symbols, Boolean& foundDataClassificationAttributes);
    internal bool RecordHasSensitivePublicMembers(ITypeSymbol type, SymbolHolder symbols);
    private static bool RecordHasSensitivePublicMembers(ITypeSymbol type, HashSet`1<ITypeSymbol> typesChain, SymbolHolder symbols, CancellationToken token);
    private bool ProcessTagProviderForParameter(AttributeData tagProviderAttribute, LoggingMethodParameter lp, IParameterSymbol paramSymbol, SymbolHolder symbols);
    private bool ProcessTagProviderForProperty(AttributeData tagProviderAttribute, LoggingProperty lp, IPropertySymbol propSymbol, SymbolHolder symbols);
    private IMethodSymbol ValidateTagProvider(ITypeSymbol providerType, string providerMethodName, ITypeSymbol tagCollectorType, ITypeSymbol complexObjType, Location attrLocation);
    [CompilerGeneratedAttribute]
internal static bool <GetLogTypes>g__IsAllowedKind|5_4(SyntaxKind kind);
    [CompilerGeneratedAttribute]
private ValueTuple`2<LoggingMethod, bool> <GetLogTypes>g__ProcessMethod|5_0(MethodDeclarationSyntax method, IMethodSymbol methodSymbol, Location attrLoc, <>c__DisplayClass5_0& );
    [CompilerGeneratedAttribute]
internal static string <ProcessLogPropertiesForParameter>g__GetPropertyIdentifier|15_0(IPropertySymbol property, CancellationToken token);
    [CompilerGeneratedAttribute]
private List`1<LoggingProperty> <ProcessLogPropertiesForParameter>g__GetTypePropertiesToLog|15_1(ITypeSymbol type, ISet`1<ITypeSymbol> typesChain, SymbolHolder symbols, bool transitive, Boolean& foundDataClassificationAttributes, <>c__DisplayClass15_0& );
    [CompilerGeneratedAttribute]
private bool <ProcessLogPropertiesForParameter>g__CanLogProperties|15_2(ISymbol sym, ITypeSymbol symType, SymbolHolder symbols, bool silent, <>c__DisplayClass15_0& );
    [CompilerGeneratedAttribute]
internal static bool <ValidateTagProvider>g__IsParameterCountValid|21_0(IMethodSymbol method);
    [CompilerGeneratedAttribute]
private bool <ValidateTagProvider>g__IsAssignableTo|21_1(ITypeSymbol type, ITypeSymbol target);
    [CompilerGeneratedAttribute]
internal static bool <ValidateTagProvider>g__IsProviderMethodVisible|21_2(ISymbol symbol);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Gen.Logging.Parsing.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CantMixAttributesMessage { get; }
    internal static string CantMixAttributesTitle { get; }
    internal static string CantUseDataClassificationWithLogPropertiesOrTagProviderMessage { get; }
    internal static string CantUseDataClassificationWithLogPropertiesOrTagProviderTitle { get; }
    internal static string DefaultToStringMessage { get; }
    internal static string DefaultToStringTitle { get; }
    internal static string EmptyLoggingMethodMessage { get; }
    internal static string EmptyLoggingMethodTitle { get; }
    internal static string InvalidAttributeUsageMessage { get; }
    internal static string InvalidAttributeUsageTitle { get; }
    internal static string InvalidTypeToLogPropertiesMessage { get; }
    internal static string InvalidTypeToLogPropertiesTitle { get; }
    internal static string LoggingMethodHasBodyMessage { get; }
    internal static string LoggingMethodHasBodyTitle { get; }
    internal static string LoggingMethodIsGenericMessage { get; }
    internal static string LoggingMethodIsGenericTitle { get; }
    internal static string LoggingMethodMustBePartialMessage { get; }
    internal static string LoggingMethodMustBePartialTitle { get; }
    internal static string LoggingMethodMustReturnVoidMessage { get; }
    internal static string LoggingMethodMustReturnVoidTitle { get; }
    internal static string LoggingMethodParameterRefKindMessage { get; }
    internal static string LoggingMethodParameterRefKindTitle { get; }
    internal static string LoggingMethodShouldBeStaticMessage { get; }
    internal static string LoggingMethodShouldBeStaticTitle { get; }
    internal static string LogPropertiesCycleDetectedMessage { get; }
    internal static string LogPropertiesCycleDetectedTitle { get; }
    internal static string LogPropertiesHiddenPropertyDetectedMessage { get; }
    internal static string LogPropertiesHiddenPropertyDetectedTitle { get; }
    internal static string LogPropertiesInvalidUsageMessage { get; }
    internal static string LogPropertiesInvalidUsageTitle { get; }
    internal static string LogPropertiesParameterSkippedMessage { get; }
    internal static string LogPropertiesParameterSkippedTitle { get; }
    internal static string MalformedFormatStringsMessage { get; }
    internal static string MalformedFormatStringsTitle { get; }
    internal static string MissingLoggerMemberMessage { get; }
    internal static string MissingLoggerMemberTitle { get; }
    internal static string MissingLoggerParameterMessage { get; }
    internal static string MissingLoggerParameterTitle { get; }
    internal static string MissingLogLevelMessage { get; }
    internal static string MissingLogLevelTitle { get; }
    internal static string MissingRequiredTypeMessage { get; }
    internal static string MissingRequiredTypeTitle { get; }
    internal static string MultipleLoggerMembersMessage { get; }
    internal static string MultipleLoggerMembersTitle { get; }
    internal static string ParameterHasNoCorrespondingTemplateMessage { get; }
    internal static string ParameterHasNoCorrespondingTemplateTitle { get; }
    internal static string PrimaryConstructorParameterLoggerHiddenMessage { get; }
    internal static string PrimaryConstructorParameterLoggerHiddenTitle { get; }
    internal static string RecordTypeSensitiveArgumentIsInTemplateMessage { get; }
    internal static string RecordTypeSensitiveArgumentIsInTemplateTitle { get; }
    internal static string RedundantQualifierInMessageMessage { get; }
    internal static string RedundantQualifierInMessageTitle { get; }
    internal static string ShouldntMentionExceptionInMessageMessage { get; }
    internal static string ShouldntMentionExceptionInMessageTitle { get; }
    internal static string ShouldntMentionLoggerInMessageMessage { get; }
    internal static string ShouldntMentionLoggerInMessageTitle { get; }
    internal static string ShouldntMentionLogLevelInMessageMessage { get; }
    internal static string ShouldntMentionLogLevelInMessageTitle { get; }
    internal static string ShouldntReuseEventIdsMessage { get; }
    internal static string ShouldntReuseEventIdsTitle { get; }
    internal static string ShouldntReuseEventNamesMessage { get; }
    internal static string ShouldntReuseEventNamesTitle { get; }
    internal static string TagNameCollisionMessage { get; }
    internal static string TagNameCollisionTitle { get; }
    internal static string TagProviderInvalidUsageMessage { get; }
    internal static string TagProviderInvalidUsageTitle { get; }
    internal static string TagProviderMethodInaccessibleMessage { get; }
    internal static string TagProviderMethodInaccessibleTitle { get; }
    internal static string TagProviderMethodInvalidSignatureMessage { get; }
    internal static string TagProviderMethodInvalidSignatureTitle { get; }
    internal static string TagProviderMethodNotFoundMessage { get; }
    internal static string TagProviderMethodNotFoundTitle { get; }
    internal static string TagProviderWithRedactionMessage { get; }
    internal static string TagProviderWithRedactionTitle { get; }
    internal static string TemplateHasNoCorrespondingParameterMessage { get; }
    internal static string TemplateHasNoCorrespondingParameterTitle { get; }
    internal static string TemplateStartsWithAtSymbolMessage { get; }
    internal static string TemplateStartsWithAtSymbolTitle { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CantMixAttributesMessage();
    internal static string get_CantMixAttributesTitle();
    internal static string get_CantUseDataClassificationWithLogPropertiesOrTagProviderMessage();
    internal static string get_CantUseDataClassificationWithLogPropertiesOrTagProviderTitle();
    internal static string get_DefaultToStringMessage();
    internal static string get_DefaultToStringTitle();
    internal static string get_EmptyLoggingMethodMessage();
    internal static string get_EmptyLoggingMethodTitle();
    internal static string get_InvalidAttributeUsageMessage();
    internal static string get_InvalidAttributeUsageTitle();
    internal static string get_InvalidTypeToLogPropertiesMessage();
    internal static string get_InvalidTypeToLogPropertiesTitle();
    internal static string get_LoggingMethodHasBodyMessage();
    internal static string get_LoggingMethodHasBodyTitle();
    internal static string get_LoggingMethodIsGenericMessage();
    internal static string get_LoggingMethodIsGenericTitle();
    internal static string get_LoggingMethodMustBePartialMessage();
    internal static string get_LoggingMethodMustBePartialTitle();
    internal static string get_LoggingMethodMustReturnVoidMessage();
    internal static string get_LoggingMethodMustReturnVoidTitle();
    internal static string get_LoggingMethodParameterRefKindMessage();
    internal static string get_LoggingMethodParameterRefKindTitle();
    internal static string get_LoggingMethodShouldBeStaticMessage();
    internal static string get_LoggingMethodShouldBeStaticTitle();
    internal static string get_LogPropertiesCycleDetectedMessage();
    internal static string get_LogPropertiesCycleDetectedTitle();
    internal static string get_LogPropertiesHiddenPropertyDetectedMessage();
    internal static string get_LogPropertiesHiddenPropertyDetectedTitle();
    internal static string get_LogPropertiesInvalidUsageMessage();
    internal static string get_LogPropertiesInvalidUsageTitle();
    internal static string get_LogPropertiesParameterSkippedMessage();
    internal static string get_LogPropertiesParameterSkippedTitle();
    internal static string get_MalformedFormatStringsMessage();
    internal static string get_MalformedFormatStringsTitle();
    internal static string get_MissingLoggerMemberMessage();
    internal static string get_MissingLoggerMemberTitle();
    internal static string get_MissingLoggerParameterMessage();
    internal static string get_MissingLoggerParameterTitle();
    internal static string get_MissingLogLevelMessage();
    internal static string get_MissingLogLevelTitle();
    internal static string get_MissingRequiredTypeMessage();
    internal static string get_MissingRequiredTypeTitle();
    internal static string get_MultipleLoggerMembersMessage();
    internal static string get_MultipleLoggerMembersTitle();
    internal static string get_ParameterHasNoCorrespondingTemplateMessage();
    internal static string get_ParameterHasNoCorrespondingTemplateTitle();
    internal static string get_PrimaryConstructorParameterLoggerHiddenMessage();
    internal static string get_PrimaryConstructorParameterLoggerHiddenTitle();
    internal static string get_RecordTypeSensitiveArgumentIsInTemplateMessage();
    internal static string get_RecordTypeSensitiveArgumentIsInTemplateTitle();
    internal static string get_RedundantQualifierInMessageMessage();
    internal static string get_RedundantQualifierInMessageTitle();
    internal static string get_ShouldntMentionExceptionInMessageMessage();
    internal static string get_ShouldntMentionExceptionInMessageTitle();
    internal static string get_ShouldntMentionLoggerInMessageMessage();
    internal static string get_ShouldntMentionLoggerInMessageTitle();
    internal static string get_ShouldntMentionLogLevelInMessageMessage();
    internal static string get_ShouldntMentionLogLevelInMessageTitle();
    internal static string get_ShouldntReuseEventIdsMessage();
    internal static string get_ShouldntReuseEventIdsTitle();
    internal static string get_ShouldntReuseEventNamesMessage();
    internal static string get_ShouldntReuseEventNamesTitle();
    internal static string get_TagNameCollisionMessage();
    internal static string get_TagNameCollisionTitle();
    internal static string get_TagProviderInvalidUsageMessage();
    internal static string get_TagProviderInvalidUsageTitle();
    internal static string get_TagProviderMethodInaccessibleMessage();
    internal static string get_TagProviderMethodInaccessibleTitle();
    internal static string get_TagProviderMethodInvalidSignatureMessage();
    internal static string get_TagProviderMethodInvalidSignatureTitle();
    internal static string get_TagProviderMethodNotFoundMessage();
    internal static string get_TagProviderMethodNotFoundTitle();
    internal static string get_TagProviderWithRedactionMessage();
    internal static string get_TagProviderWithRedactionTitle();
    internal static string get_TemplateHasNoCorrespondingParameterMessage();
    internal static string get_TemplateHasNoCorrespondingParameterTitle();
    internal static string get_TemplateStartsWithAtSymbolMessage();
    internal static string get_TemplateStartsWithAtSymbolTitle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Gen.Logging.Parsing.SymbolHolder : object {
    [CompilerGeneratedAttribute]
private Compilation <Compilation>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <LoggerMessageAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <LogPropertiesAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <TagProviderAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <TagNameAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <LogPropertyIgnoreAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ITagCollectorSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ILoggerSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <LogLevelSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ExceptionSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<INamedTypeSymbol> <IgnorePropertiesSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <EnumerableSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <FormatProviderSymbol>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private INamedTypeSymbol <SpanFormattableSymbol>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private INamedTypeSymbol <DataClassificationAttribute>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private INamedTypeSymbol <NoDataClassificationAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public Compilation Compilation { get; public set; }
    public INamedTypeSymbol LoggerMessageAttribute { get; public set; }
    public INamedTypeSymbol LogPropertiesAttribute { get; public set; }
    public INamedTypeSymbol TagProviderAttribute { get; public set; }
    public INamedTypeSymbol TagNameAttribute { get; public set; }
    public INamedTypeSymbol LogPropertyIgnoreAttribute { get; public set; }
    public INamedTypeSymbol ITagCollectorSymbol { get; public set; }
    public INamedTypeSymbol ILoggerSymbol { get; public set; }
    public INamedTypeSymbol LogLevelSymbol { get; public set; }
    public INamedTypeSymbol ExceptionSymbol { get; public set; }
    public HashSet`1<INamedTypeSymbol> IgnorePropertiesSymbols { get; public set; }
    public INamedTypeSymbol EnumerableSymbol { get; public set; }
    public INamedTypeSymbol FormatProviderSymbol { get; public set; }
    [NullableAttribute("2")]
public INamedTypeSymbol SpanFormattableSymbol { get; public set; }
    [NullableAttribute("2")]
public INamedTypeSymbol DataClassificationAttribute { get; public set; }
    [NullableAttribute("2")]
public INamedTypeSymbol NoDataClassificationAttribute { get; public set; }
    public SymbolHolder(Compilation Compilation, INamedTypeSymbol LoggerMessageAttribute, INamedTypeSymbol LogPropertiesAttribute, INamedTypeSymbol TagProviderAttribute, INamedTypeSymbol TagNameAttribute, INamedTypeSymbol LogPropertyIgnoreAttribute, INamedTypeSymbol ITagCollectorSymbol, INamedTypeSymbol ILoggerSymbol, INamedTypeSymbol LogLevelSymbol, INamedTypeSymbol ExceptionSymbol, HashSet`1<INamedTypeSymbol> IgnorePropertiesSymbols, INamedTypeSymbol EnumerableSymbol, INamedTypeSymbol FormatProviderSymbol, INamedTypeSymbol SpanFormattableSymbol, INamedTypeSymbol DataClassificationAttribute, INamedTypeSymbol NoDataClassificationAttribute);
    [CompilerGeneratedAttribute]
private SymbolHolder(SymbolHolder original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Compilation get_Compilation();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Compilation(Compilation value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_LoggerMessageAttribute();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LoggerMessageAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_LogPropertiesAttribute();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LogPropertiesAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_TagProviderAttribute();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TagProviderAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_TagNameAttribute();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TagNameAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_LogPropertyIgnoreAttribute();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LogPropertyIgnoreAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ITagCollectorSymbol();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ITagCollectorSymbol(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ILoggerSymbol();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ILoggerSymbol(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_LogLevelSymbol();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LogLevelSymbol(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ExceptionSymbol();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExceptionSymbol(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public HashSet`1<INamedTypeSymbol> get_IgnorePropertiesSymbols();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IgnorePropertiesSymbols(HashSet`1<INamedTypeSymbol> value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_EnumerableSymbol();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EnumerableSymbol(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_FormatProviderSymbol();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FormatProviderSymbol(INamedTypeSymbol value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public INamedTypeSymbol get_SpanFormattableSymbol();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SpanFormattableSymbol(INamedTypeSymbol value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public INamedTypeSymbol get_DataClassificationAttribute();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DataClassificationAttribute(INamedTypeSymbol value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public INamedTypeSymbol get_NoDataClassificationAttribute();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NoDataClassificationAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SymbolHolder left, SymbolHolder right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SymbolHolder left, SymbolHolder right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(SymbolHolder other);
    [CompilerGeneratedAttribute]
public SymbolHolder <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Compilation& Compilation, INamedTypeSymbol& LoggerMessageAttribute, INamedTypeSymbol& LogPropertiesAttribute, INamedTypeSymbol& TagProviderAttribute, INamedTypeSymbol& TagNameAttribute, INamedTypeSymbol& LogPropertyIgnoreAttribute, INamedTypeSymbol& ITagCollectorSymbol, INamedTypeSymbol& ILoggerSymbol, INamedTypeSymbol& LogLevelSymbol, INamedTypeSymbol& ExceptionSymbol, HashSet`1& IgnorePropertiesSymbols, INamedTypeSymbol& EnumerableSymbol, INamedTypeSymbol& FormatProviderSymbol, INamedTypeSymbol& SpanFormattableSymbol, INamedTypeSymbol& DataClassificationAttribute, INamedTypeSymbol& NoDataClassificationAttribute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Gen.Logging.Parsing.SymbolLoader : object {
    internal static string LoggerMessageAttribute;
    internal static string LogPropertiesAttribute;
    internal static string TagProviderAttribute;
    internal static string TagNameAttribute;
    internal static string LogPropertyIgnoreAttribute;
    internal static string ITagCollectorType;
    internal static string ILoggerType;
    internal static string LogLevelType;
    internal static string ExceptionType;
    internal static string DataClassificationAttribute;
    internal static string NoDataClassificationAttribute;
    internal static string IEnrichmentPropertyBag;
    internal static string IFormatProviderType;
    internal static string ISpanFormattableType;
    private static String[] _ignored;
    private static SymbolLoader();
    internal static SymbolHolder LoadSymbols(Compilation compilation, Action`3<DiagnosticDescriptor, Location, Object[]> diagCallback);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Gen.Logging.Parsing.TemplateProcessor : object {
    private static int WrongBraceFound;
    private static int NoBracesFound;
    private static Char[] _formatDelimiters;
    private static TemplateProcessor();
    internal static bool ExtractTemplates(string message, List`1<string> templates);
    [NullableContextAttribute("2")]
internal static string MapTemplates(string message, Func`2<string, string> mapTemplate);
    internal static int FindIndexOfAny(string message, Char[] chars, int startIndex, int endIndex);
    private static int FindBraceIndex(string message, char searchedBrace, int startIndex, int endIndex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Gen.Logging.Parsing.TypeSymbolExtensions : object {
    [ExtensionAttribute]
internal static bool IsEnumerable(ITypeSymbol sym, SymbolHolder symbols);
    [ExtensionAttribute]
internal static bool ImplementsIConvertible(ITypeSymbol sym, SymbolHolder symbols);
    [ExtensionAttribute]
internal static bool ImplementsIFormattable(ITypeSymbol sym, SymbolHolder symbols);
    [ExtensionAttribute]
internal static bool ImplementsISpanFormattable(ITypeSymbol sym, SymbolHolder symbols);
    [ExtensionAttribute]
internal static bool IsSpecialType(ITypeSymbol typeSymbol, SymbolHolder symbols);
    [ExtensionAttribute]
internal static bool HasCustomToString(ITypeSymbol type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Gen.Shared.ClassDeclarationSyntaxReceiver : object {
    [CompilerGeneratedAttribute]
private ICollection`1<ClassDeclarationSyntax> <ClassDeclarations>k__BackingField;
    public ICollection`1<ClassDeclarationSyntax> ClassDeclarations { get; }
    internal static ISyntaxReceiver Create();
    [CompilerGeneratedAttribute]
public ICollection`1<ClassDeclarationSyntax> get_ClassDeclarations();
    public sealed virtual void OnVisitSyntaxNode(SyntaxNode syntaxNode);
}
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Gen.Shared.DiagDescriptorsBase : object {
    [NullableContextAttribute("1")]
protected static DiagnosticDescriptor Make(string id, string title, string messageFormat, string category, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Gen.Shared.EmitterBase : object {
    private static int DefaultStringBuilderCapacity;
    private static int IndentChars;
    private StringBuilder _sb;
    private String[] _padding;
    private int _indent;
    public EmitterBase(bool emitPreamble);
    protected void OutOpenBrace();
    protected void OutCloseBrace();
    protected void OutCloseBraceWithExtra(string extra);
    protected void OutIndent();
    protected string GetPaddingString(byte indent);
    protected void OutLn();
    protected void OutLn(string line);
    protected void OutPP(string line);
    protected void OutEnumeration(IEnumerable`1<string> e);
    protected void Out(string text);
    protected void Out(char ch);
    protected void Indent();
    protected void Unindent();
    protected void OutGeneratedCodeAttribute();
    protected string Capture();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Gen.Shared.GeneratorUtilities : object {
    private static string CompilationOutputPath;
    private static string CurrentProjectPath;
    [CompilerGeneratedAttribute]
private static string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <CurrentVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <GeneratedCodeAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <FilePreamble>k__BackingField;
    public static string AssemblyName { get; }
    public static string CurrentVersion { get; }
    public static string GeneratedCodeAttribute { get; }
    public static string FilePreamble { get; }
    private static GeneratorUtilities();
    [CompilerGeneratedAttribute]
public static string get_AssemblyName();
    [CompilerGeneratedAttribute]
public static string get_CurrentVersion();
    [CompilerGeneratedAttribute]
public static string get_GeneratedCodeAttribute();
    [CompilerGeneratedAttribute]
public static string get_FilePreamble();
    [ExcludeFromCodeCoverageAttribute]
public static void Initialize(IncrementalGeneratorInitializationContext context, HashSet`1<string> fullyQualifiedAttributeNames, Action`3<Compilation, IEnumerable`1<SyntaxNode>, SourceProductionContext> process);
    [ExcludeFromCodeCoverageAttribute]
public static void Initialize(IncrementalGeneratorInitializationContext context, HashSet`1<string> fullyQualifiedAttributeNames, Func`2<SyntaxNode, SyntaxNode> transform, Action`3<Compilation, IEnumerable`1<SyntaxNode>, SourceProductionContext> process);
    public static bool ShouldGenerateReport(GeneratorExecutionContext context, string msBuildProperty);
    public static bool TryRetrieveOptionsValue(AnalyzerConfigOptions options, string name, String& value);
    public static string GetDefaultReportOutputPath(AnalyzerConfigOptions options);
    [CompilerGeneratedAttribute]
internal static bool <Initialize>g__Predicate|15_5(SyntaxNode node, HashSet`1<string> shortAttributeNames);
    [CompilerGeneratedAttribute]
internal static SyntaxNode <Initialize>g__Filter|15_6(GeneratorSyntaxContext context, HashSet`1<string> fullyQualifiedAttributeNames, Func`2<SyntaxNode, SyntaxNode> transform, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static string <Initialize>g__GetAttributeDisplayName|15_7(INamedTypeSymbol attributeType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Gen.Shared.ParserUtilities : object {
    [NullableContextAttribute("2")]
internal static AttributeData GetSymbolAttributeAnnotationOrDefault(ISymbol attribute, ISymbol symbol);
    internal static bool PropertyHasModifier(ISymbol property, SyntaxKind modifierToSearch, CancellationToken token);
    [ExtensionAttribute]
internal static Location GetLocation(ISymbol symbol);
    internal static bool IsBaseOrIdentity(ITypeSymbol source, ITypeSymbol dest, Compilation comp);
    [ExtensionAttribute]
internal static bool ImplementsInterface(ITypeSymbol type, ITypeSymbol interfaceType);
    [ExtensionAttribute]
internal static bool IsNullableOfT(ITypeSymbol type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Gen.Shared.RoslynExtensions : object {
    [ExtensionAttribute]
public static INamedTypeSymbol GetBestTypeByMetadataName(Compilation compilation, string fullyQualifiedMetadataName);
    [ExtensionAttribute]
public static INamedTypeSymbol GetBestTypeByMetadataName(Compilation compilation, Type type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ImmutableArray`1<T> ToImmutableArray(ReadOnlySpan`1<T> span);
    [ExtensionAttribute]
public static SimpleNameSyntax GetUnqualifiedName(NameSyntax name);
    [ExtensionAttribute]
private static SymbolVisibility GetResultantVisibility(ISymbol symbol);
    [ExtensionAttribute]
internal static bool HasAttributeSuffix(string name, bool isCaseSensitive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Gen.Shared.StringBuilderPool : object {
    private Stack`1<StringBuilder> _builders;
    public StringBuilder GetStringBuilder();
    public void ReturnStringBuilder(StringBuilder sb);
}
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Gen.Shared.SymbolHelpers : object {
    [NullableContextAttribute("1")]
public static string GetFullNamespace(ISymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Gen.Shared.TypeDeclarationSyntaxReceiver : object {
    [CompilerGeneratedAttribute]
private ICollection`1<TypeDeclarationSyntax> <TypeDeclarations>k__BackingField;
    public ICollection`1<TypeDeclarationSyntax> TypeDeclarations { get; }
    internal static ISyntaxReceiver Create();
    [CompilerGeneratedAttribute]
public ICollection`1<TypeDeclarationSyntax> get_TypeDeclarations();
    public sealed virtual void OnVisitSyntaxNode(SyntaxNode syntaxNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Shared.DiagnosticIds.DiagnosticIds : object {
    internal static string UrlFormat;
}
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
