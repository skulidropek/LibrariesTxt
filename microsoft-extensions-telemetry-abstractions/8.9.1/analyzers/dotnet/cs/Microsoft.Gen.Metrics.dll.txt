[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Gen.Metrics.DiagDescriptors : DiagDescriptorsBase {
    private static string Category;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorInvalidMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorInvalidParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorInvalidMetricName>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorMetricNameReuse>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorInvalidMethodReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorMissingMeter>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorNotPartialMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorMethodIsGeneric>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorMethodHasBody>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorInvalidTagNames>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorNotStaticMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorDuplicateTagName>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorInvalidTagNameType>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorTooManyTagNames>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorInvalidAttributeGenericType>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorInvalidMethodReturnTypeLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorInvalidMethodReturnTypeArity>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorGaugeNotSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorXmlNotLoadedCorrectly>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ErrorTagTypeCycleDetected>k__BackingField;
    public static DiagnosticDescriptor ErrorInvalidMethodName { get; }
    public static DiagnosticDescriptor ErrorInvalidParameterName { get; }
    public static DiagnosticDescriptor ErrorInvalidMetricName { get; }
    public static DiagnosticDescriptor ErrorMetricNameReuse { get; }
    public static DiagnosticDescriptor ErrorInvalidMethodReturnType { get; }
    public static DiagnosticDescriptor ErrorMissingMeter { get; }
    public static DiagnosticDescriptor ErrorNotPartialMethod { get; }
    public static DiagnosticDescriptor ErrorMethodIsGeneric { get; }
    public static DiagnosticDescriptor ErrorMethodHasBody { get; }
    public static DiagnosticDescriptor ErrorInvalidTagNames { get; }
    public static DiagnosticDescriptor ErrorNotStaticMethod { get; }
    public static DiagnosticDescriptor ErrorDuplicateTagName { get; }
    public static DiagnosticDescriptor ErrorInvalidTagNameType { get; }
    public static DiagnosticDescriptor ErrorTooManyTagNames { get; }
    public static DiagnosticDescriptor ErrorInvalidAttributeGenericType { get; }
    public static DiagnosticDescriptor ErrorInvalidMethodReturnTypeLocation { get; }
    public static DiagnosticDescriptor ErrorInvalidMethodReturnTypeArity { get; }
    public static DiagnosticDescriptor ErrorGaugeNotSupported { get; }
    public static DiagnosticDescriptor ErrorXmlNotLoadedCorrectly { get; }
    public static DiagnosticDescriptor ErrorTagTypeCycleDetected { get; }
    private static DiagDescriptors();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorInvalidMethodName();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorInvalidParameterName();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorInvalidMetricName();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorMetricNameReuse();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorInvalidMethodReturnType();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorMissingMeter();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorNotPartialMethod();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorMethodIsGeneric();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorMethodHasBody();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorInvalidTagNames();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorNotStaticMethod();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorDuplicateTagName();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorInvalidTagNameType();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorTooManyTagNames();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorInvalidAttributeGenericType();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorInvalidMethodReturnTypeLocation();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorInvalidMethodReturnTypeArity();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorGaugeNotSupported();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorXmlNotLoadedCorrectly();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ErrorTagTypeCycleDetected();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Gen.Metrics.Emitter : EmitterBase {
    private static Regex _regex;
    private static Emitter();
    public string EmitMetrics(IReadOnlyList`1<MetricType> metricTypes, CancellationToken cancellationToken);
    private static string GetSanitizedParamName(string paramName);
    private void GenTypeByNamespace(string nspace, IEnumerable`1<MetricType> metricTypes, CancellationToken cancellationToken);
    private void GenType(MetricType metricType, string nspace);
    private void GenInstrumentCreateMethods(MetricType metricType, string nspace);
    private void GenInstrumentClass(MetricMethod metricMethod);
    private void GenInstrumentCreateMethod(MetricMethod metricMethod, string nspace);
    private void GenTagList(MetricMethod metricMethod);
    private void GenTagsParameters(MetricMethod metricMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Gen.Metrics.Exceptions.TransitiveTypeCycleException : Exception {
    [CompilerGeneratedAttribute]
private ISymbol <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <NamedType>k__BackingField;
    public ISymbol Parent { get; }
    public INamedTypeSymbol NamedType { get; }
    public TransitiveTypeCycleException(ISymbol parent, INamedTypeSymbol namedType);
    [CompilerGeneratedAttribute]
public ISymbol get_Parent();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_NamedType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Gen.Metrics.MetricFactoryEmitter : EmitterBase {
    public string Emit(IReadOnlyList`1<MetricType> metricClasses, CancellationToken cancellationToken);
    private static string GetStringWithFirstCharLowercase(string str);
    private static string GetMetricDictionaryName(MetricMethod metricMethod);
    private void GenMetricFactoryByNamespace(string nspace, IEnumerable`1<MetricType> metricClasses, CancellationToken cancellationToken);
    private void GenMetricFactory(MetricType metricType, string nspace);
    private void GenMetricFactoryMethods(MetricMethod metricMethod, string nspace);
}
[GeneratorAttribute]
public class Microsoft.Gen.Metrics.MetricsGenerator : object {
    [NullableAttribute("1")]
private static HashSet`1<string> _attributeNames;
    private static MetricsGenerator();
    public sealed virtual void Initialize(IncrementalGeneratorInitializationContext context);
    [NullableContextAttribute("1")]
private static void HandleAnnotatedTypes(Compilation compilation, IEnumerable`1<SyntaxNode> nodes, SourceProductionContext context);
}
internal enum Microsoft.Gen.Metrics.Model.InstrumentKind : Enum {
    public int value__;
    public static InstrumentKind None;
    public static InstrumentKind Counter;
    public static InstrumentKind Histogram;
    public static InstrumentKind Gauge;
    public static InstrumentKind CounterT;
    public static InstrumentKind HistogramT;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Gen.Metrics.Model.MetricMethod : object {
    public List`1<MetricParameter> AllParameters;
    public HashSet`1<string> TagKeys;
    public Dictionary`2<string, string> TagDescriptionDictionary;
    [NullableAttribute("2")]
public string Name;
    [NullableAttribute("2")]
public string MetricName;
    [NullableAttribute("2")]
public string XmlDefinition;
    public bool IsExtensionMethod;
    public string Modifiers;
    public string MetricTypeModifiers;
    public string MetricTypeName;
    public InstrumentKind InstrumentKind;
    public string GenericType;
    public List`1<StrongTypeConfig> StrongTypeConfigs;
    [NullableAttribute("2")]
public string StrongTypeObjectName;
    public bool IsTagTypeClass;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Gen.Metrics.Model.MetricParameter : object {
    public string Name;
    public string Type;
    public bool IsMeter;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Gen.Metrics.Model.MetricType : object {
    public List`1<MetricMethod> Methods;
    public string Namespace;
    public string Name;
    public string Constraints;
    public string Modifiers;
    public string Keyword;
    [NullableAttribute("2")]
public MetricType Parent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Gen.Metrics.Model.StrongTypeConfig : object {
    public string Path;
    public string Name;
    public string TagName;
    [CompilerGeneratedAttribute]
private StrongTypeMetricObjectType <StrongTypeMetricObjectType>k__BackingField;
    public StrongTypeMetricObjectType StrongTypeMetricObjectType { get; public set; }
    [CompilerGeneratedAttribute]
public StrongTypeMetricObjectType get_StrongTypeMetricObjectType();
    [CompilerGeneratedAttribute]
public void set_StrongTypeMetricObjectType(StrongTypeMetricObjectType value);
}
internal enum Microsoft.Gen.Metrics.Model.StrongTypeMetricObjectType : Enum {
    public int value__;
    public static StrongTypeMetricObjectType String;
    public static StrongTypeMetricObjectType Enum;
    public static StrongTypeMetricObjectType Class;
    public static StrongTypeMetricObjectType Struct;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Gen.Metrics.Parser : object {
    private static int MaxTagNames;
    private static Regex _regex;
    private static Regex _regexTagNames;
    private static SymbolDisplayFormat _typeSymbolFormat;
    private static SymbolDisplayFormat _genericTypeSymbolFormat;
    private static HashSet`1<SpecialType> _allowedGenericAttributeTypeArgs;
    private CancellationToken _cancellationToken;
    private Compilation _compilation;
    private Action`1<Diagnostic> _reportDiagnostic;
    private StringBuilderPool _builders;
    public Parser(Compilation compilation, Action`1<Diagnostic> reportDiagnostic, CancellationToken cancellationToken);
    private static Parser();
    public IReadOnlyList`1<MetricType> GetMetricClasses(IEnumerable`1<TypeDeclarationSyntax> types);
    private static void UpdateMetricKeywordIfRequired(TypeDeclarationSyntax typeDeclaration, MetricType metricType);
    private static bool AreTagNamesValid(MetricMethod metricMethod);
    private static ITypeSymbol GetGenericType(INamedTypeSymbol symbol);
    private static ValueTuple`2<InstrumentKind, ITypeSymbol> GetInstrumentType(INamedTypeSymbol methodAttributeSymbol, SymbolHolder symbols);
    private static bool TryGetTagNameFromAttribute(ISymbol symbol, SymbolHolder symbols, String& tagName);
    private ValueTuple`3<string, HashSet`1<string>, Dictionary`2<string, string>> ExtractAttributeParameters(AttributeData attribute, SemanticModel semanticModel);
    private string GetSymbolXmlCommentSummary(ISymbol symbol);
    private void GetTagDescription(AttributeArgumentSyntax arg, SemanticModel semanticModel, Dictionary`2<string, string> tagDescriptionDictionary);
    private ValueTuple`2<MetricMethod, bool> ProcessMethodAttribute(TypeDeclarationSyntax typeDeclaration, MethodDeclarationSyntax methodSyntax, IMethodSymbol methodSymbol, AttributeData methodAttribute, SymbolHolder symbols, HashSet`1<string> metricNames, SemanticModel semanticModel);
    private bool CheckMethodReturnType(IMethodSymbol methodSymbol);
    private void Diag(DiagnosticDescriptor desc, Location location);
    [NullableContextAttribute("2")]
private void Diag(DiagnosticDescriptor desc, Location location, Object[] messageArgs);
    private StrongTypeAttributeParameters ExtractStrongTypeAttributeParameters(TypedConstant constructorArg, KeyValuePair`2<string, TypedConstant> namedArgument, SymbolHolder symbols);
    private List`1<StrongTypeConfig> BuildTagConfigs(ISymbol member, ISet`1<ITypeSymbol> typesChain, HashSet`1<string> tagHashSet, Dictionary`2<string, string> tagDescriptionDictionary, SymbolHolder symbols, StringBuilder stringBuilder);
    private List`1<StrongTypeConfig> WalkObjectModel(ISymbol parentSymbol, ISet`1<ITypeSymbol> typesChain, INamedTypeSymbol namedTypeSymbol, StringBuilder stringBuilder, HashSet`1<string> tagHashSet, Dictionary`2<string, string> tagDescriptionDictionary, SymbolHolder symbols, bool isClass);
    private List`1<StrongTypeConfig> GetParentTagConfigs(ITypeSymbol symbol, HashSet`1<string> tagHashSet, Dictionary`2<string, string> tagDescriptionDictionary, SymbolHolder symbols);
    [CompilerGeneratedAttribute]
internal static bool <GetMetricClasses>g__IsAllowedKind|11_2(SyntaxKind kind);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Gen.Metrics.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ErrorDuplicateTagNameMessage { get; }
    internal static string ErrorDuplicateTagNameTitle { get; }
    internal static string ErrorGaugeNotSupportedMessage { get; }
    internal static string ErrorGaugeNotSupportedTitle { get; }
    internal static string ErrorInvalidAttributeGenericTypeMessage { get; }
    internal static string ErrorInvalidAttributeGenericTypeTitle { get; }
    internal static string ErrorInvalidMethodNameMessage { get; }
    internal static string ErrorInvalidMethodNameTitle { get; }
    internal static string ErrorInvalidMethodReturnTypeArityMessage { get; }
    internal static string ErrorInvalidMethodReturnTypeArityTitle { get; }
    internal static string ErrorInvalidMethodReturnTypeLocationMessage { get; }
    internal static string ErrorInvalidMethodReturnTypeLocationTitle { get; }
    internal static string ErrorInvalidMethodReturnTypeMessage { get; }
    internal static string ErrorInvalidMethodReturnTypeTitle { get; }
    internal static string ErrorInvalidMetricNameMessage { get; }
    internal static string ErrorInvalidMetricNameTitle { get; }
    internal static string ErrorInvalidParameterNameMessage { get; }
    internal static string ErrorInvalidParameterNameTitle { get; }
    internal static string ErrorInvalidTagNamesMessage { get; }
    internal static string ErrorInvalidTagNamesTitle { get; }
    internal static string ErrorInvalidTagTypeMessage { get; }
    internal static string ErrorInvalidTagTypeTitle { get; }
    internal static string ErrorMethodHasBodyMessage { get; }
    internal static string ErrorMethodHasBodyTitle { get; }
    internal static string ErrorMethodIsGenericMessage { get; }
    internal static string ErrorMethodIsGenericTitle { get; }
    internal static string ErrorMetricNameReuseMessage { get; }
    internal static string ErrorMetricNameReuseTitle { get; }
    internal static string ErrorMissingMeterMessage { get; }
    internal static string ErrorMissingMeterTitle { get; }
    internal static string ErrorNotPartialMethodMessage { get; }
    internal static string ErrorNotPartialMethodTitle { get; }
    internal static string ErrorNotStaticMethodMessage { get; }
    internal static string ErrorNotStaticMethodTitle { get; }
    internal static string ErrorTagTypeCycleDetectedMessage { get; }
    internal static string ErrorTagTypeCycleDetectedTitle { get; }
    internal static string ErrorTooManyTagNamesMessage { get; }
    internal static string ErrorTooManyTagNamesTitle { get; }
    internal static string ErrorXmlNotLoadedCorrectlyMessage { get; }
    internal static string ErrorXmlNotLoadedCorrectlyTitle { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ErrorDuplicateTagNameMessage();
    internal static string get_ErrorDuplicateTagNameTitle();
    internal static string get_ErrorGaugeNotSupportedMessage();
    internal static string get_ErrorGaugeNotSupportedTitle();
    internal static string get_ErrorInvalidAttributeGenericTypeMessage();
    internal static string get_ErrorInvalidAttributeGenericTypeTitle();
    internal static string get_ErrorInvalidMethodNameMessage();
    internal static string get_ErrorInvalidMethodNameTitle();
    internal static string get_ErrorInvalidMethodReturnTypeArityMessage();
    internal static string get_ErrorInvalidMethodReturnTypeArityTitle();
    internal static string get_ErrorInvalidMethodReturnTypeLocationMessage();
    internal static string get_ErrorInvalidMethodReturnTypeLocationTitle();
    internal static string get_ErrorInvalidMethodReturnTypeMessage();
    internal static string get_ErrorInvalidMethodReturnTypeTitle();
    internal static string get_ErrorInvalidMetricNameMessage();
    internal static string get_ErrorInvalidMetricNameTitle();
    internal static string get_ErrorInvalidParameterNameMessage();
    internal static string get_ErrorInvalidParameterNameTitle();
    internal static string get_ErrorInvalidTagNamesMessage();
    internal static string get_ErrorInvalidTagNamesTitle();
    internal static string get_ErrorInvalidTagTypeMessage();
    internal static string get_ErrorInvalidTagTypeTitle();
    internal static string get_ErrorMethodHasBodyMessage();
    internal static string get_ErrorMethodHasBodyTitle();
    internal static string get_ErrorMethodIsGenericMessage();
    internal static string get_ErrorMethodIsGenericTitle();
    internal static string get_ErrorMetricNameReuseMessage();
    internal static string get_ErrorMetricNameReuseTitle();
    internal static string get_ErrorMissingMeterMessage();
    internal static string get_ErrorMissingMeterTitle();
    internal static string get_ErrorNotPartialMethodMessage();
    internal static string get_ErrorNotPartialMethodTitle();
    internal static string get_ErrorNotStaticMethodMessage();
    internal static string get_ErrorNotStaticMethodTitle();
    internal static string get_ErrorTagTypeCycleDetectedMessage();
    internal static string get_ErrorTagTypeCycleDetectedTitle();
    internal static string get_ErrorTooManyTagNamesMessage();
    internal static string get_ErrorTooManyTagNamesTitle();
    internal static string get_ErrorXmlNotLoadedCorrectlyMessage();
    internal static string get_ErrorXmlNotLoadedCorrectlyTitle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Gen.Metrics.StrongTypeAttributeParameters : object {
    public string MetricNameFromAttribute;
    public HashSet`1<string> TagHashSet;
    public Dictionary`2<string, string> TagDescriptionDictionary;
    public List`1<StrongTypeConfig> StrongTypeConfigs;
    public string StrongTypeObjectName;
    public bool IsClass;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Gen.Metrics.SymbolHolder : object {
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <MeterSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <CounterAttribute>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private INamedTypeSymbol <CounterOfTAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <HistogramAttribute>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private INamedTypeSymbol <HistogramOfTAttribute>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private INamedTypeSymbol <GaugeAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <LongTypeSymbol>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private INamedTypeSymbol <TagNameAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public INamedTypeSymbol MeterSymbol { get; public set; }
    public INamedTypeSymbol CounterAttribute { get; public set; }
    [NullableAttribute("2")]
public INamedTypeSymbol CounterOfTAttribute { get; public set; }
    public INamedTypeSymbol HistogramAttribute { get; public set; }
    [NullableAttribute("2")]
public INamedTypeSymbol HistogramOfTAttribute { get; public set; }
    [NullableAttribute("2")]
public INamedTypeSymbol GaugeAttribute { get; public set; }
    public INamedTypeSymbol LongTypeSymbol { get; public set; }
    [NullableAttribute("2")]
public INamedTypeSymbol TagNameAttribute { get; public set; }
    public SymbolHolder(INamedTypeSymbol MeterSymbol, INamedTypeSymbol CounterAttribute, INamedTypeSymbol CounterOfTAttribute, INamedTypeSymbol HistogramAttribute, INamedTypeSymbol HistogramOfTAttribute, INamedTypeSymbol GaugeAttribute, INamedTypeSymbol LongTypeSymbol, INamedTypeSymbol TagNameAttribute);
    [CompilerGeneratedAttribute]
private SymbolHolder(SymbolHolder original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_MeterSymbol();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MeterSymbol(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_CounterAttribute();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CounterAttribute(INamedTypeSymbol value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public INamedTypeSymbol get_CounterOfTAttribute();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CounterOfTAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_HistogramAttribute();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HistogramAttribute(INamedTypeSymbol value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public INamedTypeSymbol get_HistogramOfTAttribute();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HistogramOfTAttribute(INamedTypeSymbol value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public INamedTypeSymbol get_GaugeAttribute();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_GaugeAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_LongTypeSymbol();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LongTypeSymbol(INamedTypeSymbol value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public INamedTypeSymbol get_TagNameAttribute();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TagNameAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(SymbolHolder left, SymbolHolder right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(SymbolHolder left, SymbolHolder right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(SymbolHolder other);
    [CompilerGeneratedAttribute]
public SymbolHolder <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(INamedTypeSymbol& MeterSymbol, INamedTypeSymbol& CounterAttribute, INamedTypeSymbol& CounterOfTAttribute, INamedTypeSymbol& HistogramAttribute, INamedTypeSymbol& HistogramOfTAttribute, INamedTypeSymbol& GaugeAttribute, INamedTypeSymbol& LongTypeSymbol, INamedTypeSymbol& TagNameAttribute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Gen.Metrics.SymbolLoader : object {
    internal static string CounterTAttribute;
    internal static string HistogramTAttribute;
    internal static string GaugeAttribute;
    internal static string CounterAttribute;
    internal static string HistogramAttribute;
    internal static string TagNameAttribute;
    internal static string MeterClass;
    internal static SymbolHolder LoadSymbols(Compilation compilation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Gen.Shared.ClassDeclarationSyntaxReceiver : object {
    [CompilerGeneratedAttribute]
private ICollection`1<ClassDeclarationSyntax> <ClassDeclarations>k__BackingField;
    public ICollection`1<ClassDeclarationSyntax> ClassDeclarations { get; }
    internal static ISyntaxReceiver Create();
    [CompilerGeneratedAttribute]
public ICollection`1<ClassDeclarationSyntax> get_ClassDeclarations();
    public sealed virtual void OnVisitSyntaxNode(SyntaxNode syntaxNode);
}
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Gen.Shared.DiagDescriptorsBase : object {
    [NullableContextAttribute("1")]
protected static DiagnosticDescriptor Make(string id, string title, string messageFormat, string category, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Gen.Shared.EmitterBase : object {
    private static int DefaultStringBuilderCapacity;
    private static int IndentChars;
    private StringBuilder _sb;
    private String[] _padding;
    private int _indent;
    public EmitterBase(bool emitPreamble);
    protected void OutOpenBrace();
    protected void OutCloseBrace();
    protected void OutCloseBraceWithExtra(string extra);
    protected void OutIndent();
    protected string GetPaddingString(byte indent);
    protected void OutLn();
    protected void OutLn(string line);
    protected void OutPP(string line);
    protected void OutEnumeration(IEnumerable`1<string> e);
    protected void Out(string text);
    protected void Out(char ch);
    protected void Indent();
    protected void Unindent();
    protected void OutGeneratedCodeAttribute();
    protected string Capture();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Gen.Shared.GeneratorUtilities : object {
    private static string CompilationOutputPath;
    private static string CurrentProjectPath;
    [CompilerGeneratedAttribute]
private static string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <CurrentVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <GeneratedCodeAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <FilePreamble>k__BackingField;
    public static string AssemblyName { get; }
    public static string CurrentVersion { get; }
    public static string GeneratedCodeAttribute { get; }
    public static string FilePreamble { get; }
    private static GeneratorUtilities();
    [CompilerGeneratedAttribute]
public static string get_AssemblyName();
    [CompilerGeneratedAttribute]
public static string get_CurrentVersion();
    [CompilerGeneratedAttribute]
public static string get_GeneratedCodeAttribute();
    [CompilerGeneratedAttribute]
public static string get_FilePreamble();
    [ExcludeFromCodeCoverageAttribute]
public static void Initialize(IncrementalGeneratorInitializationContext context, HashSet`1<string> fullyQualifiedAttributeNames, Action`3<Compilation, IEnumerable`1<SyntaxNode>, SourceProductionContext> process);
    [ExcludeFromCodeCoverageAttribute]
public static void Initialize(IncrementalGeneratorInitializationContext context, HashSet`1<string> fullyQualifiedAttributeNames, Func`2<SyntaxNode, SyntaxNode> transform, Action`3<Compilation, IEnumerable`1<SyntaxNode>, SourceProductionContext> process);
    public static bool ShouldGenerateReport(GeneratorExecutionContext context, string msBuildProperty);
    public static bool TryRetrieveOptionsValue(AnalyzerConfigOptions options, string name, String& value);
    public static string GetDefaultReportOutputPath(AnalyzerConfigOptions options);
    [CompilerGeneratedAttribute]
internal static bool <Initialize>g__Predicate|15_5(SyntaxNode node, HashSet`1<string> shortAttributeNames);
    [CompilerGeneratedAttribute]
internal static SyntaxNode <Initialize>g__Filter|15_6(GeneratorSyntaxContext context, HashSet`1<string> fullyQualifiedAttributeNames, Func`2<SyntaxNode, SyntaxNode> transform, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static string <Initialize>g__GetAttributeDisplayName|15_7(INamedTypeSymbol attributeType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Gen.Shared.ParserUtilities : object {
    [NullableContextAttribute("2")]
internal static AttributeData GetSymbolAttributeAnnotationOrDefault(ISymbol attribute, ISymbol symbol);
    internal static bool PropertyHasModifier(ISymbol property, SyntaxKind modifierToSearch, CancellationToken token);
    [ExtensionAttribute]
internal static Location GetLocation(ISymbol symbol);
    internal static bool IsBaseOrIdentity(ITypeSymbol source, ITypeSymbol dest, Compilation comp);
    [ExtensionAttribute]
internal static bool ImplementsInterface(ITypeSymbol type, ITypeSymbol interfaceType);
    [ExtensionAttribute]
internal static bool IsNullableOfT(ITypeSymbol type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Gen.Shared.RoslynExtensions : object {
    [ExtensionAttribute]
public static INamedTypeSymbol GetBestTypeByMetadataName(Compilation compilation, string fullyQualifiedMetadataName);
    [ExtensionAttribute]
public static INamedTypeSymbol GetBestTypeByMetadataName(Compilation compilation, Type type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ImmutableArray`1<T> ToImmutableArray(ReadOnlySpan`1<T> span);
    [ExtensionAttribute]
public static SimpleNameSyntax GetUnqualifiedName(NameSyntax name);
    [ExtensionAttribute]
private static SymbolVisibility GetResultantVisibility(ISymbol symbol);
    [ExtensionAttribute]
internal static bool HasAttributeSuffix(string name, bool isCaseSensitive);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Gen.Shared.StringBuilderPool : object {
    private Stack`1<StringBuilder> _builders;
    public StringBuilder GetStringBuilder();
    public void ReturnStringBuilder(StringBuilder sb);
}
[ExcludeFromCodeCoverageAttribute]
internal static class Microsoft.Gen.Shared.SymbolHelpers : object {
    [NullableContextAttribute("1")]
public static string GetFullNamespace(ISymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExcludeFromCodeCoverageAttribute]
internal class Microsoft.Gen.Shared.TypeDeclarationSyntaxReceiver : object {
    [CompilerGeneratedAttribute]
private ICollection`1<TypeDeclarationSyntax> <TypeDeclarations>k__BackingField;
    public ICollection`1<TypeDeclarationSyntax> TypeDeclarations { get; }
    internal static ISyntaxReceiver Create();
    [CompilerGeneratedAttribute]
public ICollection`1<TypeDeclarationSyntax> get_TypeDeclarations();
    public sealed virtual void OnVisitSyntaxNode(SyntaxNode syntaxNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Shared.DiagnosticIds.DiagnosticIds : object {
    internal static string UrlFormat;
}
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
