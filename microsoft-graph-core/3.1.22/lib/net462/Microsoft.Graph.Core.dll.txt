[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.Graph.AsyncMonitor`1 : object {
    private AsyncOperationStatus asyncOperationStatus;
    private IBaseClient client;
    internal string monitorUrl;
    private IAsyncParseNodeFactory parseNodeFactory;
    public AsyncMonitor`1(IBaseClient client, string monitorUrl, IParseNodeFactory parseNodeFactory);
    [AsyncStateMachineAttribute("Microsoft.Graph.AsyncMonitor`1/<PollForOperationCompletionAsync>d__5")]
public sealed virtual Task`1<T> PollForOperationCompletionAsync(IProgress`1<AsyncOperationStatus> progress, CancellationToken cancellationToken);
}
public class Microsoft.Graph.AsyncOperationStatus : object {
    [CompilerGeneratedAttribute]
private string <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <PercentageComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    public string Operation { get; public set; }
    public Nullable`1<double> PercentageComplete { get; public set; }
    public string Status { get; public set; }
    public IDictionary`2<string, object> AdditionalData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_PercentageComplete();
    [CompilerGeneratedAttribute]
public void set_PercentageComplete(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public string get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AdditionalData(IDictionary`2<string, object> value);
    public sealed virtual IDictionary`2<string, Action`1<IParseNode>> GetFieldDeserializers();
    public sealed virtual void Serialize(ISerializationWriter writer);
    [CompilerGeneratedAttribute]
private void <GetFieldDeserializers>b__16_0(IParseNode n);
    [CompilerGeneratedAttribute]
private void <GetFieldDeserializers>b__16_1(IParseNode n);
    [CompilerGeneratedAttribute]
private void <GetFieldDeserializers>b__16_2(IParseNode n);
}
public class Microsoft.Graph.Authentication.AzureIdentityAccessTokenProvider : AzureIdentityAccessTokenProvider {
    public AzureIdentityAccessTokenProvider(TokenCredential credential, String[] allowedHosts, ObservabilityOptions observabilityOptions, bool isCaeEnabled, String[] scopes);
    [ObsoleteAttribute("This constructor is obsolete and will be removed in a future version. Use the constructor that takes an isCaeEnabled parameter instead.")]
public AzureIdentityAccessTokenProvider(TokenCredential credential, String[] allowedHosts, ObservabilityOptions observabilityOptions, String[] scopes);
}
public class Microsoft.Graph.Authentication.AzureIdentityAuthenticationProvider : BaseBearerTokenAuthenticationProvider {
    public AzureIdentityAuthenticationProvider(TokenCredential credential, String[] allowedHosts, ObservabilityOptions observabilityOptions, bool isCaeEnabled, String[] scopes);
    [ObsoleteAttribute("Use the constructor that takes an isCaeEnabled parameter instead.")]
public AzureIdentityAuthenticationProvider(TokenCredential credential, String[] allowedHosts, ObservabilityOptions observabilityOptions, String[] scopes);
}
public class Microsoft.Graph.BaseGraphRequestAdapter : HttpClientRequestAdapter {
    public BaseGraphRequestAdapter(IAuthenticationProvider authenticationProvider, GraphClientOptions graphClientOptions, IParseNodeFactory parseNodeFactory, ISerializationWriterFactory serializationWriterFactory, HttpClient httpClient);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Graph.BatchRequestContent : HttpContent {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, BatchRequestStep> <BatchRequestSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestAdapter <RequestAdapter>k__BackingField;
    public IReadOnlyDictionary`2<string, BatchRequestStep> BatchRequestSteps { get; private set; }
    public IRequestAdapter RequestAdapter { get; public set; }
    [ObsoleteAttribute("Please use the BatchRequestContentCollection for making batch requests as it supports handling more than 20 requests and provides a similar API experience.")]
public BatchRequestContent(IBaseClient baseClient);
    [ObsoleteAttribute("Please use the BatchRequestContentCollection for making batch requests as it supports handling more than 20 requests and provides a similar API experience.")]
public BatchRequestContent(IBaseClient baseClient, BatchRequestStep[] batchRequestSteps);
    [ObsoleteAttribute("Please use the BatchRequestContentCollection for making batch requests as it supports handling more than 20 requests and provides a similar API experience.")]
public BatchRequestContent(IRequestAdapter requestAdapter, BatchRequestStep[] batchRequestSteps);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, BatchRequestStep> get_BatchRequestSteps();
    [CompilerGeneratedAttribute]
private void set_BatchRequestSteps(IReadOnlyDictionary`2<string, BatchRequestStep> value);
    [CompilerGeneratedAttribute]
public IRequestAdapter get_RequestAdapter();
    [CompilerGeneratedAttribute]
public void set_RequestAdapter(IRequestAdapter value);
    [ObsoleteAttribute("Please use the BatchRequestContentCollection for making batch requests as it supports handling more than 20 requests and provides a similar API experience.")]
public bool AddBatchRequestStep(BatchRequestStep batchRequestStep);
    [ObsoleteAttribute("Please use the BatchRequestContentCollection for making batch requests as it supports handling more than 20 requests and provides a similar API experience.")]
public string AddBatchRequestStep(HttpRequestMessage httpRequestMessage);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchRequestContent/<AddBatchRequestStepAsync>d__13")]
[ObsoleteAttribute("Please use the BatchRequestContentCollection for making batch requests as it supports handling more than 20 requests and provides a similar API experience.")]
public Task`1<string> AddBatchRequestStepAsync(RequestInformation requestInformation, string requestId);
    public bool RemoveBatchRequestStepWithId(string requestId);
    public BatchRequestContent NewBatchWithFailedRequests(Dictionary`2<string, HttpStatusCode> responseStatusCodes);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchRequestContent/<GetBatchRequestContentAsync>d__16")]
internal Task`1<Stream> GetBatchRequestContentAsync(CancellationToken cancellationToken);
    private bool ContainsCorrespondingRequestId(IList`1<string> dependsOn);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchRequestContent/<WriteBatchRequestStepAsync>d__18")]
private Task WriteBatchRequestStepAsync(BatchRequestStep batchRequestStep, Utf8JsonWriter writer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchRequestContent/<GetRequestContentAsync>d__19")]
private static Task`1<MemoryStream> GetRequestContentAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    private string GetHeaderValuesAsString(IEnumerable`1<string> headerValues);
    private string GetRelativeUrl(Uri requestUri);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchRequestContent/<SerializeToStreamAsync>d__22")]
protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected virtual bool TryComputeLength(Int64& length);
    [CompilerGeneratedAttribute]
private bool <ContainsCorrespondingRequestId>b__17_0(string requestId);
}
public class Microsoft.Graph.BatchRequestContentCollection : object {
    private IRequestAdapter requestAdapter;
    private HashSet`1<BatchRequestContent> batchRequests;
    private int batchRequestLimit;
    private BatchRequestContent currentRequest;
    private bool readOnly;
    public IReadOnlyDictionary`2<string, BatchRequestStep> BatchRequestSteps { get; }
    public BatchRequestContentCollection(IBaseClient baseClient, int batchRequestLimit);
    public BatchRequestContentCollection(IRequestAdapter requestAdapter, int batchRequestLimit);
    private void ValidateReadOnly();
    private void SetupCurrentRequest();
    public bool AddBatchRequestStep(BatchRequestStep batchRequestStep);
    public string AddBatchRequestStep(HttpRequestMessage httpRequestMessage);
    public Task`1<string> AddBatchRequestStepAsync(RequestInformation requestInformation, string requestId);
    public bool RemoveBatchRequestStepWithId(string requestId);
    internal IEnumerable`1<BatchRequestContent> GetBatchRequestsForExecution();
    public IReadOnlyDictionary`2<string, BatchRequestStep> get_BatchRequestSteps();
    public BatchRequestContentCollection NewBatchWithFailedRequests(Dictionary`2<string, HttpStatusCode> responseStatusCodes);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Graph.BatchRequestContentSteps : object {
    private Dictionary`2<string, BatchRequestStep> _steps;
    private List`1<string> _requestIds;
    public BatchRequestStep Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<BatchRequestStep> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,Microsoft.Graph.BatchRequestStep>.Keys { get; }
    private IEnumerable`1<BatchRequestStep> System.Collections.Generic.IReadOnlyDictionary<System.String,Microsoft.Graph.BatchRequestStep>.Values { get; }
    public sealed virtual BatchRequestStep get_Item(string key);
    public sealed virtual void set_Item(string key, BatchRequestStep value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<BatchRequestStep> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,Microsoft.Graph.BatchRequestStep>.get_Keys();
    private sealed virtual override IEnumerable`1<BatchRequestStep> System.Collections.Generic.IReadOnlyDictionary<System.String,Microsoft.Graph.BatchRequestStep>.get_Values();
    public sealed virtual void Add(string key, BatchRequestStep value);
    public sealed virtual void Add(KeyValuePair`2<string, BatchRequestStep> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, BatchRequestStep> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, BatchRequestStep>> GetEnumerator();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool Remove(KeyValuePair`2<string, BatchRequestStep> item);
    public sealed virtual bool TryGetValue(string key, BatchRequestStep& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Graph.BatchRequestStep : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpRequestMessage <Request>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <DependsOn>k__BackingField;
    public string RequestId { get; private set; }
    public HttpRequestMessage Request { get; private set; }
    public List`1<string> DependsOn { get; public set; }
    public BatchRequestStep(string requestId, HttpRequestMessage httpRequestMessage, List`1<string> dependsOn);
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
private void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public HttpRequestMessage get_Request();
    [CompilerGeneratedAttribute]
private void set_Request(HttpRequestMessage value);
    [CompilerGeneratedAttribute]
public List`1<string> get_DependsOn();
    [CompilerGeneratedAttribute]
public void set_DependsOn(List`1<string> value);
}
public class Microsoft.Graph.BatchResponseContent : object {
    private JsonDocument jBatchResponseObject;
    private HttpResponseMessage batchResponseMessage;
    private Dictionary`2<string, ParsableFactory`1<IParsable>> apiErrorMappings;
    public BatchResponseContent(HttpResponseMessage httpResponseMessage, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMappings);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContent/<GetResponsesAsync>d__4")]
public Task`1<Dictionary`2<string, HttpResponseMessage>> GetResponsesAsync();
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContent/<GetResponsesStatusCodesAsync>d__5")]
public Task`1<Dictionary`2<string, HttpStatusCode>> GetResponsesStatusCodesAsync();
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContent/<GetResponseByIdAsync>d__6")]
public Task`1<HttpResponseMessage> GetResponseByIdAsync(string requestId);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContent/<GetResponseByIdAsync>d__7`1")]
public Task`1<T> GetResponseByIdAsync(string requestId, IResponseHandler responseHandler);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContent/<GetResponseStreamByIdAsync>d__8")]
public Task`1<Stream> GetResponseStreamByIdAsync(string requestId);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContent/<GetNextLinkAsync>d__9")]
[ObsoleteAttribute("This method is deprecated as a batch response does not contain a next link", "True")]
public Task`1<string> GetNextLinkAsync();
    public static bool IsSuccessStatusCode(HttpStatusCode statusCode);
    private HttpResponseMessage GetResponseMessageFromJObject(JsonElement jResponseItem);
    private HttpStatusCode GetStatusCodeFromJObject(JsonElement jResponseItem);
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContent/<GetBatchResponseContentAsync>d__13")]
private Task`1<JsonDocument> GetBatchResponseContentAsync();
}
public class Microsoft.Graph.BatchResponseContentCollection : object {
    private List`1<KeyedBatchResponseContent> batchResponses;
    internal void AddResponse(IEnumerable`1<string> keys, BatchResponseContent content);
    private BatchResponseContent GetBatchResponseContaining(string requestId);
    public Task`1<HttpResponseMessage> GetResponseByIdAsync(string requestId);
    public Task`1<T> GetResponseByIdAsync(string requestId, IResponseHandler responseHandler);
    public Task`1<Stream> GetResponseStreamByIdAsync(string requestId);
    [ObsoleteAttribute("use GetResponsesStatusCodesAsync and then GetResponseByIdAsync")]
public Task`1<Dictionary`2<string, HttpResponseMessage>> GetResponsesAsync();
    [AsyncStateMachineAttribute("Microsoft.Graph.BatchResponseContentCollection/<GetResponsesStatusCodesAsync>d__8")]
public Task`1<Dictionary`2<string, HttpStatusCode>> GetResponsesStatusCodesAsync();
}
public class Microsoft.Graph.ClientException : ApiException {
    public ClientException(string message, Exception innerException);
}
internal class Microsoft.Graph.Core.Models.UploadSession : object {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ExpirationDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <NextExpectedRanges>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UploadUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    public Nullable`1<DateTimeOffset> ExpirationDateTime { get; public set; }
    public List`1<string> NextExpectedRanges { get; public set; }
    public string UploadUrl { get; public set; }
    public IDictionary`2<string, object> AdditionalData { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTimeOffset> get_ExpirationDateTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExpirationDateTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_NextExpectedRanges();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NextExpectedRanges(List`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UploadUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UploadUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AdditionalData(IDictionary`2<string, object> value);
    public sealed virtual IDictionary`2<string, Action`1<IParseNode>> GetFieldDeserializers();
    public sealed virtual void Serialize(ISerializationWriter writer);
    public static UploadSession CreateFromDiscriminatorValue(IParseNode parseNode);
    [CompilerGeneratedAttribute]
private void <GetFieldDeserializers>b__16_0(IParseNode n);
    [CompilerGeneratedAttribute]
private void <GetFieldDeserializers>b__16_1(IParseNode n);
    [CompilerGeneratedAttribute]
private void <GetFieldDeserializers>b__16_2(IParseNode n);
}
public class Microsoft.Graph.Core.Requests.BatchRequestBuilder : object {
    [CompilerGeneratedAttribute]
private string <UrlTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestAdapter <RequestAdapter>k__BackingField;
    internal string UrlTemplate { get; internal set; }
    internal IRequestAdapter RequestAdapter { get; internal set; }
    public BatchRequestBuilder(IRequestAdapter requestAdapter);
    [CompilerGeneratedAttribute]
internal string get_UrlTemplate();
    [CompilerGeneratedAttribute]
internal void set_UrlTemplate(string value);
    [CompilerGeneratedAttribute]
internal IRequestAdapter get_RequestAdapter();
    [CompilerGeneratedAttribute]
internal void set_RequestAdapter(IRequestAdapter value);
    [AsyncStateMachineAttribute("Microsoft.Graph.Core.Requests.BatchRequestBuilder/<PostAsync>d__9")]
public Task`1<BatchResponseContent> PostAsync(BatchRequestContent batchRequestContent, CancellationToken cancellationToken, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMappings);
    [AsyncStateMachineAttribute("Microsoft.Graph.Core.Requests.BatchRequestBuilder/<PostAsync>d__10")]
public Task`1<BatchResponseContentCollection> PostAsync(BatchRequestContentCollection batchRequestContentCollection, CancellationToken cancellationToken, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMappings);
    [AsyncStateMachineAttribute("Microsoft.Graph.Core.Requests.BatchRequestBuilder/<ToPostRequestInformationAsync>d__11")]
public Task`1<RequestInformation> ToPostRequestInformationAsync(BatchRequestContent batchRequestContent, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Graph.Core.Requests.BatchRequestBuilder/<ThrowIfFailedResponseAsync>d__12")]
private static Task ThrowIfFailedResponseAsync(HttpResponseMessage httpResponseMessage, CancellationToken cancellationToken);
}
public static class Microsoft.Graph.CoreConstants : object {
    public static int PollingIntervalInMs;
}
public class Microsoft.Graph.DeltaResponseHandler`1 : object {
    private IAsyncParseNodeFactory parseNodeFactory;
    public DeltaResponseHandler`1(IParseNodeFactory parseNodeFactory);
    [AsyncStateMachineAttribute("Microsoft.Graph.DeltaResponseHandler`1/<HandleResponseAsync>d__2`2")]
public sealed virtual Task`1<ModelType> HandleResponseAsync(NativeResponseType response, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMappings);
    [AsyncStateMachineAttribute("Microsoft.Graph.DeltaResponseHandler`1/<GetResponseStringAsync>d__3")]
private Task`1<string> GetResponseStringAsync(HttpResponseMessage hrm);
    [AsyncStateMachineAttribute("Microsoft.Graph.DeltaResponseHandler`1/<GetResponseBodyWithChangelistAsync>d__4")]
private Task`1<string> GetResponseBodyWithChangelistAsync(string deltaResponseBody);
    [AsyncStateMachineAttribute("Microsoft.Graph.DeltaResponseHandler`1/<DiscoverChangedPropertiesAsync>d__5")]
private Task`1<JsonDocument> DiscoverChangedPropertiesAsync(JsonElement responseItem);
    [AsyncStateMachineAttribute("Microsoft.Graph.DeltaResponseHandler`1/<GetObjectPropertiesAsync>d__6")]
private Task GetObjectPropertiesAsync(JsonElement changedObject, List`1<string> changes, string parentName);
    private string AddOrReplacePropertyToObject(JsonElement jsonElement, string propertyName, NewItemType newItem);
}
internal static class Microsoft.Graph.ErrorConstants : object {
}
public static class Microsoft.Graph.ExpressionExtractHelper : object {
    public static string ExtractMembers(Expression`1<Func`2<T, object>> expression, String& error);
    private static string ProcessSimpleMemberExpression(MemberExpression memberExpression, String& error);
    private static string GetMemberWireName(MemberInfo member);
}
[FlagsAttribute]
public enum Microsoft.Graph.FeatureFlag : Enum {
    public int value__;
    public static FeatureFlag None;
    public static FeatureFlag RedirectHandler;
    public static FeatureFlag RetryHandler;
    public static FeatureFlag AuthHandler;
    public static FeatureFlag DefaultHttpProvider;
    public static FeatureFlag LoggingHandler;
    public static FeatureFlag ServiceDiscoveryHandler;
    public static FeatureFlag CompressionHandler;
    public static FeatureFlag ConnectionPoolManager;
    public static FeatureFlag LongRunningOperationHandler;
    public static FeatureFlag BatchRequestContext;
    public static FeatureFlag PageIteratorTask;
    public static FeatureFlag FileUploadTask;
}
public static class Microsoft.Graph.GraphClientFactory : object {
    private static TimeSpan defaultTimeout;
    private static Dictionary`2<string, string> cloudList;
    public static string Global_Cloud;
    public static string USGOV_Cloud;
    public static string USGOV_DOD_Cloud;
    public static string China_Cloud;
    public static string Germany_Cloud;
    private static GraphClientFactory();
    public static HttpClient Create(GraphClientOptions graphClientOptions, string version, string nationalCloud, IWebProxy proxy, HttpMessageHandler finalHandler);
    public static HttpClient Create(IEnumerable`1<DelegatingHandler> handlers, string version, string nationalCloud, IWebProxy proxy, HttpMessageHandler finalHandler, bool disposeHandler);
    public static IList`1<DelegatingHandler> CreateDefaultHandlers(GraphClientOptions graphClientOptions);
    public static HttpMessageHandler CreatePipeline(IEnumerable`1<DelegatingHandler> handlers, HttpMessageHandler finalHandler);
    internal static ValueTuple`2<HttpMessageHandler, FeatureFlag> CreatePipelineWithFeatureFlags(IEnumerable`1<DelegatingHandler> handlers, HttpMessageHandler finalHandler);
    internal static HttpMessageHandler GetNativePlatformHttpHandler(IWebProxy proxy);
    private static FeatureFlag GetHandlerFeatureFlag(DelegatingHandler delegatingHandler);
    private static Uri DetermineBaseAddress(string nationalCloud, string version);
}
public class Microsoft.Graph.GraphClientOptions : object {
    [CompilerGeneratedAttribute]
private string <GraphServiceTargetVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GraphServiceLibraryClientVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GraphCoreClientVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GraphProductPrefix>k__BackingField;
    public string GraphServiceTargetVersion { get; public set; }
    public string GraphServiceLibraryClientVersion { get; public set; }
    public string GraphCoreClientVersion { get; public set; }
    public string GraphProductPrefix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_GraphServiceTargetVersion();
    [CompilerGeneratedAttribute]
public void set_GraphServiceTargetVersion(string value);
    [CompilerGeneratedAttribute]
public string get_GraphServiceLibraryClientVersion();
    [CompilerGeneratedAttribute]
public void set_GraphServiceLibraryClientVersion(string value);
    [CompilerGeneratedAttribute]
public string get_GraphCoreClientVersion();
    [CompilerGeneratedAttribute]
public void set_GraphCoreClientVersion(string value);
    [CompilerGeneratedAttribute]
public string get_GraphProductPrefix();
    [CompilerGeneratedAttribute]
public void set_GraphProductPrefix(string value);
}
public class Microsoft.Graph.GraphRequestContext : object {
    [CompilerGeneratedAttribute]
private string <ClientRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private FeatureFlag <FeatureUsage>k__BackingField;
    public string ClientRequestId { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public FeatureFlag FeatureUsage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientRequestId();
    [CompilerGeneratedAttribute]
public void set_ClientRequestId(string value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public FeatureFlag get_FeatureUsage();
    [CompilerGeneratedAttribute]
public void set_FeatureUsage(FeatureFlag value);
}
public class Microsoft.Graph.GraphResponse : object {
    private HttpResponseMessage httpResponseMessage;
    public RequestInformation RequestInformation;
    public HttpStatusCode StatusCode { get; }
    public HttpContent Content { get; }
    public HttpResponseHeaders HttpHeaders { get; }
    public GraphResponse(RequestInformation requestInformation, HttpResponseMessage httpResponseMessage);
    public HttpStatusCode get_StatusCode();
    public HttpContent get_Content();
    public HttpResponseHeaders get_HttpHeaders();
    public HttpResponseMessage ToHttpResponseMessage();
    public sealed virtual void Dispose();
}
public class Microsoft.Graph.GraphResponse`1 : GraphResponse {
    public GraphResponse`1(RequestInformation requestInformation, HttpResponseMessage httpResponseMessage);
    [AsyncStateMachineAttribute("Microsoft.Graph.GraphResponse`1/<GetResponseObjectAsync>d__1")]
public Task`1<T> GetResponseObjectAsync(IResponseHandler responseHandler, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMappings);
}
public class Microsoft.Graph.GraphTelemetryHandler : DelegatingHandler {
    private static Version assemblyVersion;
    private static string SdkVersionHeaderValue;
    private GraphClientOptions graphClientOptions;
    public GraphTelemetryHandler(GraphClientOptions graphClientOptions);
    private static GraphTelemetryHandler();
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage httpRequest, CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class Microsoft.Graph.HttpClientExtensions : object {
    [ExtensionAttribute]
internal static void SetFeatureFlag(HttpClient httpClient, FeatureFlag featureFlag);
    [ExtensionAttribute]
internal static bool ContainsFeatureFlag(HttpClient httpClient, FeatureFlag featureFlag);
}
public enum Microsoft.Graph.HttpMethods : Enum {
    public int value__;
    public static HttpMethods GET;
    public static HttpMethods POST;
    public static HttpMethods PATCH;
    public static HttpMethods PUT;
    public static HttpMethods DELETE;
    public static HttpMethods HEAD;
    public static HttpMethods CONNECT;
    public static HttpMethods OPTIONS;
    public static HttpMethods TRACE;
}
[ExtensionAttribute]
public static class Microsoft.Graph.HttpRequestMessageExtensions : object {
    [ExtensionAttribute]
internal static FeatureFlag GetFeatureFlags(HttpRequestMessage httpRequestMessage);
    [ExtensionAttribute]
public static GraphRequestContext GetRequestContext(HttpRequestMessage httpRequestMessage);
}
public interface Microsoft.Graph.IAsyncMonitor`1 {
    public abstract virtual Task`1<T> PollForOperationCompletionAsync(IProgress`1<AsyncOperationStatus> progress, CancellationToken cancellationToken);
}
public interface Microsoft.Graph.IBaseClient {
    public IRequestAdapter RequestAdapter { get; public set; }
    public BatchRequestBuilder Batch { get; }
    public abstract virtual IRequestAdapter get_RequestAdapter();
    public abstract virtual void set_RequestAdapter(IRequestAdapter value);
    public abstract virtual BatchRequestBuilder get_Batch();
}
public interface Microsoft.Graph.IDecryptableContent {
    public string Data { get; public set; }
    public string DataKey { get; public set; }
    public string DataSignature { get; public set; }
    public string EncryptionCertificateId { get; public set; }
    public string EncryptionCertificateThumbprint { get; public set; }
    public abstract virtual string get_Data();
    public abstract virtual void set_Data(string value);
    public abstract virtual string get_DataKey();
    public abstract virtual void set_DataKey(string value);
    public abstract virtual string get_DataSignature();
    public abstract virtual void set_DataSignature(string value);
    public abstract virtual string get_EncryptionCertificateId();
    public abstract virtual void set_EncryptionCertificateId(string value);
    public abstract virtual string get_EncryptionCertificateThumbprint();
    public abstract virtual void set_EncryptionCertificateThumbprint(string value);
}
[ExtensionAttribute]
public static class Microsoft.Graph.IDecryptableContentExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Graph.IDecryptableContentExtensions/<DecryptAsync>d__0`1")]
[ExtensionAttribute]
public static Task`1<T> DecryptAsync(IDecryptableContent encryptedContent, Func`3<string, string, Task`1<X509Certificate2>> certificateProvider);
    [AsyncStateMachineAttribute("Microsoft.Graph.IDecryptableContentExtensions/<DecryptAsync>d__1")]
[ExtensionAttribute]
public static Task`1<string> DecryptAsync(IDecryptableContent encryptedContent, Func`3<string, string, Task`1<X509Certificate2>> certificateProvider);
    private static Byte[] AesDecrypt(Byte[] dataToDecrypt, Byte[] key);
}
public interface Microsoft.Graph.IEncryptableSubscription {
    public string EncryptionCertificate { get; public set; }
    public abstract virtual string get_EncryptionCertificate();
    public abstract virtual void set_EncryptionCertificate(string value);
}
[ExtensionAttribute]
public static class Microsoft.Graph.IEncryptableSubscriptionExtensions : object {
    [ExtensionAttribute]
public static void AddPublicEncryptionCertificate(IEncryptableSubscription subscription, X509Certificate2 certificate);
}
public interface Microsoft.Graph.IEncryptedContentBearer`1 {
    public T EncryptedContent { get; public set; }
    public abstract virtual T get_EncryptedContent();
    public abstract virtual void set_EncryptedContent(T value);
}
public interface Microsoft.Graph.ITokenValidable`2 {
    public List`1<string> ValidationTokens { get; public set; }
    public List`1<T1> Value { get; public set; }
    public abstract virtual List`1<string> get_ValidationTokens();
    public abstract virtual void set_ValidationTokens(List`1<string> value);
    public abstract virtual List`1<T1> get_Value();
    public abstract virtual void set_Value(List`1<T1> value);
}
[ExtensionAttribute]
public static class Microsoft.Graph.ITokenValidableExtension : object {
    [AsyncStateMachineAttribute("Microsoft.Graph.ITokenValidableExtension/<AreTokensValid>d__0`2")]
[ExtensionAttribute]
[ObsoleteAttribute("This method is obsolete. Use the async version instead.")]
[EditorBrowsableAttribute("1")]
public static Task`1<bool> AreTokensValid(ITokenValidable`2<T1, T2> collection, IEnumerable`1<Guid> tenantIds, IEnumerable`1<Guid> appIds, string wellKnownUri, IEnumerable`1<string> issuerFormats);
    [AsyncStateMachineAttribute("Microsoft.Graph.ITokenValidableExtension/<AreTokensValidAsync>d__1`2")]
[ExtensionAttribute]
public static Task`1<bool> AreTokensValidAsync(ITokenValidable`2<T1, T2> collection, IEnumerable`1<Guid> tenantIds, IEnumerable`1<Guid> appIds, string wellKnownUri, IEnumerable`1<string> issuerFormats);
    private static bool IsTokenValid(string token, JwtSecurityTokenHandler handler, OpenIdConnectConfiguration openIdConfig, IEnumerable`1<string> issuersToValidate, IEnumerable`1<string> appIds);
}
public interface Microsoft.Graph.IUploadSession {
    public Nullable`1<DateTimeOffset> ExpirationDateTime { get; public set; }
    public List`1<string> NextExpectedRanges { get; public set; }
    public string UploadUrl { get; public set; }
    public abstract virtual Nullable`1<DateTimeOffset> get_ExpirationDateTime();
    public abstract virtual void set_ExpirationDateTime(Nullable`1<DateTimeOffset> value);
    public abstract virtual List`1<string> get_NextExpectedRanges();
    public abstract virtual void set_NextExpectedRanges(List`1<string> value);
    public abstract virtual string get_UploadUrl();
    public abstract virtual void set_UploadUrl(string value);
}
internal class Microsoft.Graph.KeyedBatchResponseContent : object {
    internal HashSet`1<string> Keys;
    internal BatchResponseContent Response;
    public KeyedBatchResponseContent(HashSet`1<string> keys, BatchResponseContent response);
}
public class Microsoft.Graph.LargeFileUploadTask`1 : object {
    private static int DefaultMaxSliceSize;
    [CompilerGeneratedAttribute]
private IUploadSession <Session>k__BackingField;
    private IRequestAdapter _requestAdapter;
    private Stream _uploadStream;
    private int _maxSliceSize;
    private List`1<Tuple`2<long, long>> _rangesRemaining;
    private IUploadSession Session { get; private set; }
    private long TotalUploadLength { get; }
    [ObsoleteAttribute("Use the overload that takes in IUploadSession instead.")]
[EditorBrowsableAttribute("1")]
public LargeFileUploadTask`1(IParsable uploadSession, Stream uploadStream, int maxSliceSize, IRequestAdapter requestAdapter);
    public LargeFileUploadTask`1(IUploadSession uploadSession, Stream uploadStream, int maxSliceSize, IRequestAdapter requestAdapter);
    [CompilerGeneratedAttribute]
private IUploadSession get_Session();
    [CompilerGeneratedAttribute]
private void set_Session(IUploadSession value);
    private long get_TotalUploadLength();
    internal static IUploadSession ExtractSessionFromParsable(IParsable uploadSession);
    private static BaseGraphRequestAdapter InitializeAdapter(string uploadUrl);
    [AsyncStateMachineAttribute("Microsoft.Graph.LargeFileUploadTask`1/<UploadSliceAsync>d__15")]
private Task`1<UploadResult`1<T>> UploadSliceAsync(UploadSliceRequestBuilder`1<T> uploadSliceRequestBuilder, ICollection`1<Exception> exceptionTrackingList, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("Microsoft.Graph.LargeFileUploadTask`1/<GetUploadSliceRequests>d__16")]
internal IEnumerable`1<UploadSliceRequestBuilder`1<T>> GetUploadSliceRequests();
    [AsyncStateMachineAttribute("Microsoft.Graph.LargeFileUploadTask`1/<UploadAsync>d__17")]
public Task`1<UploadResult`1<T>> UploadAsync(IProgress`1<long> progress, int maxTries, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Graph.LargeFileUploadTask`1/<ResumeAsync>d__18")]
public Task`1<UploadResult`1<T>> ResumeAsync(IProgress`1<long> progress, int maxTries, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Graph.LargeFileUploadTask`1/<UpdateSessionStatusAsync>d__19")]
public Task`1<IUploadSession> UpdateSessionStatusAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Graph.LargeFileUploadTask`1/<DeleteSessionAsync>d__20")]
public Task DeleteSessionAsync(CancellationToken cancellationToken);
    private List`1<Tuple`2<long, long>> GetRangesRemaining(IUploadSession session);
    private long NextSliceSize(long rangeBegin, long rangeEnd);
    private static void ThrowIfUploadCancelled(ICollection`1<Exception> trackedExceptions, CancellationToken cancellationToken);
}
public class Microsoft.Graph.PageIterator`2 : object {
    private IRequestAdapter _requestAdapter;
    private TCollectionPage _currentPage;
    private Queue`1<TEntity> _pageItemQueue;
    private Func`2<TEntity, bool> _processPageItemCallback;
    private Func`2<TEntity, Task`1<bool>> _asyncProcessPageItemCallback;
    private Func`2<RequestInformation, RequestInformation> _requestConfigurator;
    private Dictionary`2<string, ParsableFactory`1<IParsable>> _errorMapping;
    [CompilerGeneratedAttribute]
private string <Deltalink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nextlink>k__BackingField;
    [CompilerGeneratedAttribute]
private PagingState <State>k__BackingField;
    public string Deltalink { get; private set; }
    public string Nextlink { get; private set; }
    public PagingState State { get; public set; }
    internal bool IsProcessPageItemCallbackAsync { get; }
    [CompilerGeneratedAttribute]
public string get_Deltalink();
    [CompilerGeneratedAttribute]
private void set_Deltalink(string value);
    [CompilerGeneratedAttribute]
public string get_Nextlink();
    [CompilerGeneratedAttribute]
private void set_Nextlink(string value);
    [CompilerGeneratedAttribute]
public PagingState get_State();
    [CompilerGeneratedAttribute]
public void set_State(PagingState value);
    internal bool get_IsProcessPageItemCallbackAsync();
    public static PageIterator`2<TEntity, TCollectionPage> CreatePageIterator(IBaseClient client, TCollectionPage page, Func`2<TEntity, bool> callback, Func`2<RequestInformation, RequestInformation> requestConfigurator, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMapping);
    public static PageIterator`2<TEntity, TCollectionPage> CreatePageIterator(IRequestAdapter requestAdapter, TCollectionPage page, Func`2<TEntity, bool> callback, Func`2<RequestInformation, RequestInformation> requestConfigurator, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMapping);
    public static PageIterator`2<TEntity, TCollectionPage> CreatePageIterator(IBaseClient client, TCollectionPage page, Func`2<TEntity, Task`1<bool>> asyncCallback, Func`2<RequestInformation, RequestInformation> requestConfigurator, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMapping);
    public static PageIterator`2<TEntity, TCollectionPage> CreatePageIterator(IRequestAdapter requestAdapter, TCollectionPage page, Func`2<TEntity, Task`1<bool>> asyncCallback, Func`2<RequestInformation, RequestInformation> requestConfigurator, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMapping);
    [AsyncStateMachineAttribute("Microsoft.Graph.PageIterator`2/<IntrapageIterateAsync>d__25")]
private Task`1<bool> IntrapageIterateAsync();
    [AsyncStateMachineAttribute("Microsoft.Graph.PageIterator`2/<InterpageIterateAsync>d__26")]
private Task InterpageIterateAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Graph.PageIterator`2/<IterateAsync>d__27")]
public Task IterateAsync();
    [AsyncStateMachineAttribute("Microsoft.Graph.PageIterator`2/<IterateAsync>d__28")]
public Task IterateAsync(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Graph.PageIterator`2/<ResumeAsync>d__29")]
public Task ResumeAsync();
    [AsyncStateMachineAttribute("Microsoft.Graph.PageIterator`2/<ResumeAsync>d__30")]
public Task ResumeAsync(CancellationToken token);
    private static List`1<TEntity> ExtractEntityListFromParsable(TCollectionPage parsableCollection);
    private static string ExtractNextLinkFromParsable(TCollectionPage parsableCollection, string nextLinkPropertyName);
}
public enum Microsoft.Graph.PagingState : Enum {
    public int value__;
    public static PagingState NotStarted;
    public static PagingState Paused;
    public static PagingState IntrapageIteration;
    public static PagingState InterpageIteration;
    public static PagingState Delta;
    public static PagingState Complete;
}
[ExtensionAttribute]
public static class Microsoft.Graph.ParseNodeExtensions : object {
    [ExtensionAttribute]
internal static string GetErrorMessage(IParseNode responseParseNode);
}
internal class Microsoft.Graph.ReadOnlySubStream : Stream {
    private long _startInSuperStream;
    private long _positionInSuperStream;
    private long _endInSuperStream;
    private Stream _superStream;
    private bool _canRead;
    private bool _canSeek;
    private bool _isDisposed;
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public ReadOnlySubStream(Stream superStream, long startPosition, long maxLength);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    private void ThrowIfDisposed();
    private void ThrowIfCantRead();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.Graph.ReferenceRequestBody : object {
    [CompilerGeneratedAttribute]
private string <ODataId>k__BackingField;
    [JsonPropertyNameAttribute("@odata.id")]
public string ODataId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ODataId();
    [CompilerGeneratedAttribute]
public void set_ODataId(string value);
}
public class Microsoft.Graph.ResponseHandler`1 : object {
    private IAsyncParseNodeFactory _jsonParseNodeFactory;
    public ResponseHandler`1(IParseNodeFactory parseNodeFactory);
    [AsyncStateMachineAttribute("Microsoft.Graph.ResponseHandler`1/<HandleResponseAsync>d__2`2")]
public sealed virtual Task`1<ModelType> HandleResponseAsync(NativeResponseType response, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMappings);
    [AsyncStateMachineAttribute("Microsoft.Graph.ResponseHandler`1/<ValidateSuccessfulResponseAsync>d__3")]
private Task ValidateSuccessfulResponseAsync(HttpResponseMessage httpResponseMessage, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMapping);
}
public class Microsoft.Graph.ServiceException : ApiException {
    [CompilerGeneratedAttribute]
private HttpResponseHeaders <ResponseHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawResponseBody>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <AdditionalData>k__BackingField;
    public HttpResponseHeaders ResponseHeaders { get; private set; }
    public string RawResponseBody { get; private set; }
    public IDictionary`2<string, object> AdditionalData { get; public set; }
    public ServiceException(string message, Exception innerException);
    public ServiceException(string message, HttpResponseHeaders responseHeaders, int statusCode, Exception innerException);
    public ServiceException(string message, HttpResponseHeaders responseHeaders, int statusCode, string rawResponseBody, Exception innerException);
    [CompilerGeneratedAttribute]
public HttpResponseHeaders get_ResponseHeaders();
    [CompilerGeneratedAttribute]
private void set_ResponseHeaders(HttpResponseHeaders value);
    [CompilerGeneratedAttribute]
public string get_RawResponseBody();
    [CompilerGeneratedAttribute]
private void set_RawResponseBody(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AdditionalData(IDictionary`2<string, object> value);
    public bool IsMatch(string errorCode);
    public virtual string ToString();
    public sealed virtual IDictionary`2<string, Action`1<IParseNode>> GetFieldDeserializers();
    public sealed virtual void Serialize(ISerializationWriter writer);
    [CompilerGeneratedAttribute]
private void <GetFieldDeserializers>b__17_0(IParseNode n);
    [CompilerGeneratedAttribute]
private void <GetFieldDeserializers>b__17_1(IParseNode n);
}
public static class Microsoft.Graph.StringHelper : object {
    public static string ConvertTypeToTitleCase(string typeString);
    public static string ConvertTypeToLowerCamelCase(string typeString);
    public static string ConvertIdentifierToLowerCamelCase(string identifierString);
}
internal class Microsoft.Graph.UploadResponseHandler : object {
    private IAsyncParseNodeFactory _parseNodeFactory;
    public UploadResponseHandler(IParseNodeFactory parseNodeFactory);
    [AsyncStateMachineAttribute("Microsoft.Graph.UploadResponseHandler/<HandleResponseAsync>d__2`1")]
public Task`1<UploadResult`1<T>> HandleResponseAsync(HttpResponseMessage response);
}
public class Microsoft.Graph.UploadResult`1 : object {
    public IUploadSession UploadSession;
    public T ItemResponse;
    public Uri Location;
    public bool UploadSucceeded { get; }
    public bool get_UploadSucceeded();
}
internal class Microsoft.Graph.UploadSessionRequestBuilder : object {
    private UploadResponseHandler responseHandler;
    private IRequestAdapter requestAdapter;
    private string urlTemplate;
    public UploadSessionRequestBuilder(IUploadSession uploadSession, IRequestAdapter requestAdapter);
    [AsyncStateMachineAttribute("Microsoft.Graph.UploadSessionRequestBuilder/<DeleteAsync>d__4")]
public Task DeleteAsync(CancellationToken cancellationToken);
    public RequestInformation ToDeleteRequestInformation();
    [AsyncStateMachineAttribute("Microsoft.Graph.UploadSessionRequestBuilder/<GetAsync>d__6")]
public Task`1<IUploadSession> GetAsync(CancellationToken cancellationToken);
    public RequestInformation ToGetRequestInformation();
}
internal class Microsoft.Graph.UploadSliceRequestBuilder`1 : object {
    private UploadResponseHandler ResponseHandler;
    private IRequestAdapter RequestAdapter;
    private string UrlTemplate;
    [CompilerGeneratedAttribute]
private long <RangeBegin>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RangeEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalSessionLength>k__BackingField;
    private static string binaryContentType;
    public long RangeBegin { get; private set; }
    public long RangeEnd { get; private set; }
    public long TotalSessionLength { get; private set; }
    public int RangeLength { get; }
    public UploadSliceRequestBuilder`1(string sessionUrl, IRequestAdapter requestAdapter, long rangeBegin, long rangeEnd, long totalSessionLength);
    [CompilerGeneratedAttribute]
public long get_RangeBegin();
    [CompilerGeneratedAttribute]
private void set_RangeBegin(long value);
    [CompilerGeneratedAttribute]
public long get_RangeEnd();
    [CompilerGeneratedAttribute]
private void set_RangeEnd(long value);
    [CompilerGeneratedAttribute]
public long get_TotalSessionLength();
    [CompilerGeneratedAttribute]
private void set_TotalSessionLength(long value);
    public int get_RangeLength();
    [AsyncStateMachineAttribute("Microsoft.Graph.UploadSliceRequestBuilder`1/<PutAsync>d__18")]
public Task`1<UploadResult`1<T>> PutAsync(Stream stream, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use CreatePutRequestInformation instead")]
[EditorBrowsableAttribute("1")]
public RequestInformation CreatePutRequestInformationAsync(Stream stream);
    public RequestInformation CreatePutRequestInformation(Stream stream);
}
public static class Microsoft.Graph.UrlHelper : object {
    public static IDictionary`2<string, string> GetQueryOptions(Uri resultUri);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
