[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.Base64EncodedCertificateLoader : object {
    public CredentialSource CredentialSource { get; }
    public sealed virtual CredentialSource get_CredentialSource();
    public sealed virtual Task LoadIfNeededAsync(CredentialDescription credentialDescription, CredentialSourceLoaderParameters credentialSourceLoaderParameters);
    internal static X509Certificate2 LoadFromBase64Encoded(string certificateBase64, X509KeyStorageFlags x509KeyStorageFlags);
    internal static X509Certificate2 LoadFromBase64Encoded(string certificateBase64, string password, X509KeyStorageFlags x509KeyStorageFlags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Identity.Web.CertificateConstants : object {
    internal static string MediaTypePksc12;
    internal static string PersonalUserCertificateStorePath;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.CertificateDescription : CredentialDescription {
    [CompilerGeneratedAttribute]
private X509KeyStorageFlags <X509KeyStorageFlags>k__BackingField;
    public X509KeyStorageFlags X509KeyStorageFlags { get; public set; }
    internal string Container { get; internal set; }
    internal string ReferenceOrValue { get; internal set; }
    public X509Certificate2 Certificate { get; protected internal set; }
    public CertificateSource SourceType { get; public set; }
    [NullableContextAttribute("1")]
public CertificateDescription(CredentialDescription credentialDescription);
    [NullableContextAttribute("1")]
public static CertificateDescription FromCertificate(X509Certificate2 x509certificate2);
    [NullableContextAttribute("1")]
public static CertificateDescription FromKeyVault(string keyVaultUrl, string keyVaultCertificateName);
    [NullableContextAttribute("1")]
public static CertificateDescription FromBase64Encoded(string base64EncodedValue);
    [NullableContextAttribute("1")]
public static CertificateDescription FromBase64Encoded(string base64EncodedValue, string password);
    [NullableContextAttribute("1")]
public static CertificateDescription FromPath(string path, string password);
    [NullableContextAttribute("1")]
public static CertificateDescription FromStoreWithThumbprint(string certificateThumbprint, StoreLocation certificateStoreLocation, StoreName certificateStoreName);
    [NullableContextAttribute("1")]
public static CertificateDescription FromStoreWithDistinguishedName(string certificateDistinguishedName, StoreLocation certificateStoreLocation, StoreName certificateStoreName);
    [CompilerGeneratedAttribute]
public X509KeyStorageFlags get_X509KeyStorageFlags();
    [CompilerGeneratedAttribute]
public void set_X509KeyStorageFlags(X509KeyStorageFlags value);
    internal string get_Container();
    internal void set_Container(string value);
    internal string get_ReferenceOrValue();
    internal void set_ReferenceOrValue(string value);
    public X509Certificate2 get_Certificate();
    protected internal void set_Certificate(X509Certificate2 value);
    public CertificateSource get_SourceType();
    public void set_SourceType(CertificateSource value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Identity.Web.CertificateErrorMessage : object {
    public static string ClientSecretAndCertficateNull;
    public static string BothClientSecretAndCertificateProvided;
    public static string ClientCertificatesHaveExpiredOrCannotBeLoaded;
    public static string InvalidBase64UrlString;
    public static string OnlyPkcs12IsSupported;
    public static string IncorrectNumberOfUriSegments;
    public static string InvalidCertificateStorePath;
    public static string FromStoreWithThumprintIsObsolete;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.CertificateLoaderHelper : object {
    private static Lazy`1<X509KeyStorageFlags> s_x509KeyStorageFlagsLazy;
    private static CertificateLoaderHelper();
    internal static X509KeyStorageFlags DetermineX509KeyStorageFlag(CredentialDescription credentialDescription);
    internal static X509KeyStorageFlags DetermineX509KeyStorageFlag();
    private static X509KeyStorageFlags DetermineX509KeyStorageFlagLazy();
    internal static void ParseStoreLocationAndName(string storeDescription, StoreLocation& certificateStoreLocation, StoreName& certificateStoreName);
    internal static X509Certificate2 FindCertificateByCriterium(X509Store x509Store, X509FindType identifierCriterium, string certificateIdentifier);
}
public enum Microsoft.Identity.Web.CertificateSource : Enum {
    public int value__;
    public static CertificateSource Certificate;
    public static CertificateSource KeyVault;
    public static CertificateSource Base64Encoded;
    public static CertificateSource Path;
    public static CertificateSource StoreWithThumbprint;
    public static CertificateSource StoreWithDistinguishedName;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.DefaultCertificateLoader : DefaultCredentialsLoader {
    [NullableAttribute("2")]
public static string UserAssignedManagedIdentityClientId { get; public set; }
    public DefaultCertificateLoader(ILogger`1<DefaultCertificateLoader> logger);
    [NullableContextAttribute("2")]
public static string get_UserAssignedManagedIdentityClientId();
    [NullableContextAttribute("2")]
public static void set_UserAssignedManagedIdentityClientId(string value);
    public static X509Certificate2 LoadFirstCertificate(IEnumerable`1<CertificateDescription> certificateDescriptions);
    public static IEnumerable`1<X509Certificate2> LoadAllCertificates(IEnumerable`1<CertificateDescription> certificateDescriptions);
    [IteratorStateMachineAttribute("Microsoft.Identity.Web.DefaultCertificateLoader/<LoadCertificates>d__7")]
private IEnumerable`1<X509Certificate2> LoadCertificates(IEnumerable`1<CertificateDescription> certificateDescriptions);
    public static void ResetCertificates(IEnumerable`1<CertificateDescription> certificateDescriptions);
    public static void ResetCertificates(IEnumerable`1<CredentialDescription> credentialDescription);
    public sealed virtual void LoadIfNeeded(CertificateDescription certificateDescription);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.DefaultCredentialsLoader : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ILogger`1<DefaultCredentialsLoader> _logger;
    private ConcurrentDictionary`2<string, SemaphoreSlim> _loadingSemaphores;
    [CompilerGeneratedAttribute]
private IDictionary`2<CredentialSource, ICredentialSourceLoader> <CredentialSourceLoaders>k__BackingField;
    public IDictionary`2<CredentialSource, ICredentialSourceLoader> CredentialSourceLoaders { get; }
    public DefaultCredentialsLoader(ILogger`1<DefaultCredentialsLoader> logger);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<CredentialSource, ICredentialSourceLoader> get_CredentialSourceLoaders();
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.DefaultCredentialsLoader/<LoadCredentialsIfNeededAsync>d__7")]
public sealed virtual Task LoadCredentialsIfNeededAsync(CredentialDescription credentialDescription, CredentialSourceLoaderParameters parameters);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.DefaultCredentialsLoader/<LoadFirstValidCredentialsAsync>d__8")]
public sealed virtual Task`1<CredentialDescription> LoadFirstValidCredentialsAsync(IEnumerable`1<CredentialDescription> credentialDescriptions, CredentialSourceLoaderParameters parameters);
    public sealed virtual void ResetCredentials(IEnumerable`1<CredentialDescription> credentialDescriptions);
}
internal class Microsoft.Identity.Web.FromPathCertificateLoader : object {
    public CredentialSource CredentialSource { get; }
    public sealed virtual CredentialSource get_CredentialSource();
    [NullableContextAttribute("1")]
public sealed virtual Task LoadIfNeededAsync(CredentialDescription credentialDescription, CredentialSourceLoaderParameters _);
    [NullableContextAttribute("1")]
private static X509Certificate2 LoadFromPath(string certificateFileName, string password);
}
[NullableContextAttribute("1")]
public interface Microsoft.Identity.Web.ICertificateLoader {
    public abstract virtual void LoadIfNeeded(CertificateDescription certificateDescription);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.KeyVaultCertificateLoader : object {
    [CompilerGeneratedAttribute]
private static string <UserAssignedManagedIdentityClientId>k__BackingField;
    public CredentialSource CredentialSource { get; }
    public static string UserAssignedManagedIdentityClientId { get; public set; }
    public sealed virtual CredentialSource get_CredentialSource();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Identity.Web.KeyVaultCertificateLoader/<LoadIfNeededAsync>d__2")]
public sealed virtual Task LoadIfNeededAsync(CredentialDescription credentialDescription, CredentialSourceLoaderParameters _);
    [CompilerGeneratedAttribute]
public static string get_UserAssignedManagedIdentityClientId();
    [CompilerGeneratedAttribute]
public static void set_UserAssignedManagedIdentityClientId(string value);
    [NullableContextAttribute("1")]
internal static Task`1<X509Certificate2> LoadFromKeyVault(string keyVaultUrl, string certificateName, string managedIdentityClientId, X509KeyStorageFlags x509KeyStorageFlags);
}
internal class Microsoft.Identity.Web.SignedAssertionFilePathCredentialsLoader : object {
    [NullableAttribute("2")]
private ILogger _logger;
    public CredentialSource CredentialSource { get; }
    [NullableContextAttribute("2")]
public SignedAssertionFilePathCredentialsLoader(ILogger logger);
    public sealed virtual CredentialSource get_CredentialSource();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Identity.Web.SignedAssertionFilePathCredentialsLoader/<LoadIfNeededAsync>d__4")]
public sealed virtual Task LoadIfNeededAsync(CredentialDescription credentialDescription, CredentialSourceLoaderParameters credentialSourceLoaderParameters);
}
internal class Microsoft.Identity.Web.SignedAssertionFromManagedIdentityCredentialLoader : object {
    public CredentialSource CredentialSource { get; }
    public sealed virtual CredentialSource get_CredentialSource();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Identity.Web.SignedAssertionFromManagedIdentityCredentialLoader/<LoadIfNeededAsync>d__2")]
public sealed virtual Task LoadIfNeededAsync(CredentialDescription credentialDescription, CredentialSourceLoaderParameters credentialSourceLoaderParameters);
}
internal class Microsoft.Identity.Web.StoreWithDistinguishedNameCertificateLoader : object {
    public CredentialSource CredentialSource { get; }
    public sealed virtual CredentialSource get_CredentialSource();
    [NullableContextAttribute("1")]
public sealed virtual Task LoadIfNeededAsync(CredentialDescription credentialDescription, CredentialSourceLoaderParameters _);
    [NullableContextAttribute("1")]
private static X509Certificate2 LoadFromStoreWithDistinguishedName(string certificateSubjectDistinguishedName, string storeDescription);
}
internal class Microsoft.Identity.Web.StoreWithThumbprintCertificateLoader : object {
    public CredentialSource CredentialSource { get; }
    public sealed virtual CredentialSource get_CredentialSource();
    [NullableContextAttribute("1")]
public sealed virtual Task LoadIfNeededAsync(CredentialDescription credentialDescription, CredentialSourceLoaderParameters _);
    [NullableContextAttribute("1")]
private static X509Certificate2 LoadFromStoreWithThumbprint(string certificateThumbprint, string storeDescription);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
