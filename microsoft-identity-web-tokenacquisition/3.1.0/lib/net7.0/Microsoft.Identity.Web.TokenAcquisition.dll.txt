[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Microsoft.Identity.Web.TokenAcquirerFactory.GetDefaultInstance(String).")]
public static class Microsoft.Identity.Web.ApplicationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseTokenAcquirerFactory(IApplicationBuilder applicationBuilder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.AuthCodeRedemptionParameters : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <Scopes>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <AuthCode>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <AuthenticationScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CodeVerifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserFlow>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tenant>k__BackingField;
    [NullableAttribute("1")]
public IEnumerable`1<string> Scopes { get; public set; }
    [NullableAttribute("1")]
public string AuthCode { get; public set; }
    [NullableAttribute("1")]
public string AuthenticationScheme { get; public set; }
    public string ClientInfo { get; public set; }
    public string CodeVerifier { get; public set; }
    public string UserFlow { get; public set; }
    public string Tenant { get; public set; }
    public AuthCodeRedemptionParameters(IEnumerable`1<string> scopes, string authCode, string authScheme, string clientInfo, string codeVerifier, string userFlow, string tenant);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Scopes();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Scopes(IEnumerable`1<string> value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_AuthCode();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_AuthCode(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_AuthenticationScheme();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_AuthenticationScheme(string value);
    [CompilerGeneratedAttribute]
public string get_ClientInfo();
    [CompilerGeneratedAttribute]
public void set_ClientInfo(string value);
    [CompilerGeneratedAttribute]
public string get_CodeVerifier();
    [CompilerGeneratedAttribute]
public void set_CodeVerifier(string value);
    [CompilerGeneratedAttribute]
public string get_UserFlow();
    [CompilerGeneratedAttribute]
public void set_UserFlow(string value);
    [CompilerGeneratedAttribute]
public string get_Tenant();
    [CompilerGeneratedAttribute]
public void set_Tenant(string value);
}
internal class Microsoft.Identity.Web.CiamAuthorityHelper : object {
    [NullableContextAttribute("1")]
internal static void BuildCiamAuthorityIfNeeded(MicrosoftIdentityApplicationOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Identity.Web.ClaimConstants : object {
    public static string Name;
    public static string ObjectId;
    public static string Oid;
    public static string PreferredUserName;
    public static string TenantId;
    public static string Tid;
    public static string ClientInfo;
    public static string UniqueObjectIdentifier;
    public static string UniqueTenantIdentifier;
    public static string Scope;
    public static string Scp;
    public static string Roles;
    public static string Role;
    public static string Sub;
    public static string Acr;
    public static string UserFlow;
    public static string Tfp;
    public static string NameIdentifierId;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.ClientInfo : object {
    [CompilerGeneratedAttribute]
private string <UniqueObjectIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueTenantIdentifier>k__BackingField;
    [JsonPropertyNameAttribute("uid")]
public string UniqueObjectIdentifier { get; public set; }
    [JsonPropertyNameAttribute("utid")]
public string UniqueTenantIdentifier { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UniqueObjectIdentifier();
    [CompilerGeneratedAttribute]
public void set_UniqueObjectIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_UniqueTenantIdentifier();
    [CompilerGeneratedAttribute]
public void set_UniqueTenantIdentifier(string value);
    [RequiresUnreferencedCodeAttribute("Calls Microsoft.Identity.Web.ClientInfo.DeserializeFromJson(byte[]).")]
public static ClientInfo CreateFromJson(string clientInfo);
    [RequiresUnreferencedCodeAttribute("Calls System.Text.Json.JsonSerializer.Deserialize<TValue>(ReadOnlySpan<Byte>, JsonSerializerOptions).")]
internal static ClientInfo DeserializeFromJson(Byte[] jsonByteArray);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Identity.Web.ConfidentialClientApplicationBuilderExtension : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use WithClientCredentialsAsync instead.", "False")]
public static ConfidentialClientApplicationBuilder WithClientCredentials(ConfidentialClientApplicationBuilder builder, IEnumerable`1<CredentialDescription> clientCredentials, ILogger logger, ICredentialsLoader credentialsLoader, CredentialSourceLoaderParameters credentialSourceLoaderParameters);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.ConfidentialClientApplicationBuilderExtension/<WithClientCredentialsAsync>d__1")]
[ExtensionAttribute]
public static Task`1<ConfidentialClientApplicationBuilder> WithClientCredentialsAsync(ConfidentialClientApplicationBuilder builder, IEnumerable`1<CredentialDescription> clientCredentials, ILogger logger, ICredentialsLoader credentialsLoader, CredentialSourceLoaderParameters credentialSourceLoaderParameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.ConfidentialClientApplicationOptionsMerger : object {
    private IMergedOptionsStore _mergedOptionsMonitor;
    public ConfidentialClientApplicationOptionsMerger(IMergedOptionsStore mergedOptions);
    public sealed virtual void PostConfigure(string name, ConfidentialClientApplicationOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Identity.Web.Constants : object {
    public static string LoginHint;
    public static string DomainHint;
    public static string Claims;
    public static string Bearer;
    public static string AzureAd;
    public static string AzureAdB2C;
    public static string Scope;
    public static string Policy;
    public static string SpaAuthCode;
    public static string ResetPasswordPath;
    public static string ErrorPath;
    public static string ReturnUrl;
    internal static string TenantDiscoveryEndpoint;
    internal static string ApiVersion;
    internal static string Metadata;
    internal static string PreferredNetwork;
    internal static string PreferredCache;
    internal static string Aliases;
    internal static string AzureADIssuerMetadataUrl;
    internal static string FallbackAuthority;
    internal static string OidcEndpoint;
    internal static string Version;
    internal static string V1;
    internal static string V2;
    internal static string MsaTenantId;
    internal static string Consumers;
    internal static string Organizations;
    internal static string Common;
    internal static string ClientInfo;
    internal static string One;
    internal static string MediaTypePksc12;
    internal static string PersonalUserCertificateStorePath;
    internal static string UserAgent;
    internal static string JwtSecurityTokenUsedToCallWebApi;
    internal static string PreferredUserName;
    internal static string NameClaim;
    internal static string Consent;
    internal static string ConsentUrl;
    internal static string Scopes;
    internal static string ProposedAction;
    internal static string Authorization;
    internal static string ApplicationJson;
    internal static string ISessionStore;
    internal static string True;
    internal static string InvalidClient;
    internal static string InvalidKeyError;
    internal static string SignedAssertionInvalidTimeRange;
    internal static string CertificateHasBeenRevoked;
    internal static string CertificateIsOutsideValidityWindow;
    internal static string CiamAuthoritySuffix;
    internal static string TestSlice;
    internal static string BlazorChallengeUri;
    internal static string UserReadScope;
    internal static string GraphBaseUrlV1;
    internal static string DefaultGraphScope;
    internal static string TelemetryHeaderKey;
    internal static string IDWebSku;
    internal static string XReturnUrl;
    internal static string XRequestedWith;
    internal static string XmlHttpRequest;
    internal static string RequiredScopesSetting;
    internal static string LoginHintParameter;
    internal static string DomainHintParameter;
    internal static string XAnchorMailbox;
    internal static string Upn;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.DefaultAuthorizationHeaderProvider : object {
    private ITokenAcquisition _tokenAcquisition;
    public DefaultAuthorizationHeaderProvider(ITokenAcquisition tokenAcquisition);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.DefaultAuthorizationHeaderProvider/<CreateAuthorizationHeaderForUserAsync>d__2")]
public sealed virtual Task`1<string> CreateAuthorizationHeaderForUserAsync(IEnumerable`1<string> scopes, AuthorizationHeaderProviderOptions downstreamApiOptions, ClaimsPrincipal claimsPrincipal, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.DefaultAuthorizationHeaderProvider/<CreateAuthorizationHeaderForAppAsync>d__3")]
public sealed virtual Task`1<string> CreateAuthorizationHeaderForAppAsync(string scopes, AuthorizationHeaderProviderOptions downstreamApiOptions, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.DefaultAuthorizationHeaderProvider/<CreateAuthorizationHeaderAsync>d__4")]
public sealed virtual Task`1<string> CreateAuthorizationHeaderAsync(IEnumerable`1<string> scopes, AuthorizationHeaderProviderOptions downstreamApiOptions, ClaimsPrincipal claimsPrincipal, CancellationToken cancellationToken);
    private static TokenAcquisitionOptions CreateTokenAcquisitionOptionsFromApiOptions(AuthorizationHeaderProviderOptions downstreamApiOptions, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.DefaultTokenAcquirerFactoryImplementation : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private ConcurrentDictionary`2<string, ITokenAcquirer> _authSchemes;
    private IServiceProvider ServiceProvider { get; private set; }
    public DefaultTokenAcquirerFactoryImplementation(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private void set_ServiceProvider(IServiceProvider value);
    public ITokenAcquirer GetTokenAcquirer(string authority, string clientId, IEnumerable`1<CredentialDescription> clientCredentials, string region);
    public sealed virtual ITokenAcquirer GetTokenAcquirer(IdentityApplicationOptions IdentityApplicationOptions);
    public sealed virtual ITokenAcquirer GetTokenAcquirer(string authenticationScheme);
    private ITokenAcquirer MakeTokenAcquirer(string authenticationScheme);
    private void CheckServiceProviderNotNull();
    [NullableContextAttribute("2")]
public static string GetKey(string authority, string clientId, string region);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Identity.Web.ErrorCodes : object {
    public static string B2CPasswordResetErrorCode;
    public static string B2CForgottenPassword;
    public static string AccessDenied;
}
public enum Microsoft.Identity.Web.Experimental.CerticateObserverAction : Enum {
    public int value__;
    public static CerticateObserverAction Selected;
    public static CerticateObserverAction Deselected;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.Experimental.CertificateChangeEventArg : object {
    [CompilerGeneratedAttribute]
private CerticateObserverAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <Certificate>k__BackingField;
    [CompilerGeneratedAttribute]
private CredentialDescription <CredentialDescription>k__BackingField;
    public CerticateObserverAction Action { get; public set; }
    public X509Certificate2 Certificate { get; public set; }
    public CredentialDescription CredentialDescription { get; public set; }
    [CompilerGeneratedAttribute]
public CerticateObserverAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(CerticateObserverAction value);
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    [CompilerGeneratedAttribute]
public void set_Certificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
public CredentialDescription get_CredentialDescription();
    [CompilerGeneratedAttribute]
public void set_CredentialDescription(CredentialDescription value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Identity.Web.Experimental.ICertificatesObserver {
    public abstract virtual void OnClientCertificateChanged(CertificateChangeEventArg e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.Extensibility.BaseAuthorizationHeaderProvider : object {
    private IAuthorizationHeaderProvider _headerProvider;
    public BaseAuthorizationHeaderProvider(IServiceProvider serviceProvider);
    public virtual Task`1<string> CreateAuthorizationHeaderForUserAsync(IEnumerable`1<string> scopes, AuthorizationHeaderProviderOptions authorizationHeaderProviderOptions, ClaimsPrincipal claimsPrincipal, CancellationToken cancellationToken);
    public virtual Task`1<string> CreateAuthorizationHeaderForAppAsync(string scopes, AuthorizationHeaderProviderOptions downstreamApiOptions, CancellationToken cancellationToken);
    public virtual Task`1<string> CreateAuthorizationHeaderAsync(IEnumerable`1<string> scopes, AuthorizationHeaderProviderOptions authorizationHeaderProviderOptions, ClaimsPrincipal claimsPrincipal, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.Hosts.DefaultTokenAcquisitionHost : object {
    private IOptionsMonitor`1<MicrosoftIdentityOptions> _microsoftIdentityOptionsMonitor;
    private IMergedOptionsStore _mergedOptionsMonitor;
    private IOptionsMonitor`1<ConfidentialClientApplicationOptions> _ccaOptionsMonitor;
    private IOptionsMonitor`1<MicrosoftIdentityApplicationOptions> _MicrosoftIdentityApplicationOptionsMonitor;
    public DefaultTokenAcquisitionHost(IOptionsMonitor`1<MicrosoftIdentityOptions> optionsMonitor, IMergedOptionsStore mergedOptionsMonitor, IOptionsMonitor`1<ConfidentialClientApplicationOptions> ccaOptionsMonitor, IOptionsMonitor`1<MicrosoftIdentityApplicationOptions> microsoftIdentityApplicationOptionsMonitor);
    [NullableContextAttribute("2")]
public sealed virtual Task`1<ClaimsPrincipal> GetAuthenticatedUserAsync(ClaimsPrincipal user);
    public sealed virtual string GetCurrentRedirectUri(MergedOptions mergedOptions);
    public sealed virtual string GetEffectiveAuthenticationScheme(string authenticationScheme);
    public sealed virtual MergedOptions GetOptions(string authenticationScheme, String& effectiveAuthenticationScheme);
    [NullableContextAttribute("2")]
public sealed virtual SecurityToken GetTokenUsedToCallWebAPI();
    [NullableContextAttribute("2")]
public sealed virtual ClaimsPrincipal GetUserFromRequest();
    public sealed virtual void SetHttpResponse(HttpStatusCode statusCode, string wwwAuthenticate);
    public sealed virtual void SetSession(string key, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Identity.Web.HttpContextExtensions : object {
    [ExtensionAttribute]
internal static void StoreTokenUsedToCallWebAPI(HttpContext httpContext, SecurityToken token);
    [ExtensionAttribute]
internal static SecurityToken GetTokenUsedToCallWebAPI(HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Identity.Web.IdHelper : object {
    private static Lazy`1<string> s_idWebVersion;
    private static IdHelper();
    public static string CreateTelemetryInfo();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Identity.Web.IDWebErrorMessage : object {
    public static string HttpContextIsNull;
    public static string HttpContextAndHttpResponseAreNull;
    public static string ProvideEitherScopeKeySectionOrScopes;
    public static string ScopeKeySectionIsProvidedButNotPresentInTheServicesCollection;
    public static string NoScopesProvided;
    public static string ConfigurationOptionRequired;
    public static string ScopesNotConfiguredInConfigurationOrViaDelegate;
    public static string MissingRequiredScopesForAuthorizationFilter;
    public static string ClientCertificatesHaveExpiredOrCannotBeLoaded;
    public static string NeitherScopeOrRolesClaimFoundInToken;
    public static string MissingRoles;
    public static string MissingScopes;
    public static string UnauthenticatedUser;
    public static string BlazorServerBaseUriNotSet;
    public static string BlazorServerUserNotSet;
    public static string CalledApiScopesAreNull;
    public static string ScopesRequiredToCallMicrosoftGraph;
    public static string IssuerMetadataUrlIsRequired;
    public static string NoMetadataDocumentRetrieverProvided;
    public static string IssuerDoesNotMatchValidIssuers;
    public static string B2CTfpIssuerNotSupported;
    public static string TenantIdClaimNotPresentInToken;
    public static string ClientInfoReturnedFromServerIsNull;
    public static string TokenIsNotJwtToken;
    public static string ClientCredentialScopeParameterShouldEndInDotDefault;
    public static string ClientCredentialTenantShouldBeTenanted;
    public static string ExceptionAcquiringTokenForConfidentialClient;
    public static string MicrosoftIdentityWebChallengeUserException;
    public static string ProvidedAuthenticationSchemeIsIncorrect;
    public static string InvalidAssertion;
    public static string InvalidSubAssertion;
    public static string InvalidBase64UrlString;
    public static string OnlyPkcs12IsSupported;
    public static string IncorrectNumberOfUriSegments;
    public static string InvalidCertificateStorePath;
    public static string AadIssuerValidatorGetIssuerValidatorIsObsolete;
    public static string InitializeAsyncIsObsolete;
    public static string FromStoreWithThumprintIsObsolete;
    public static string AadIssuerValidatorIsObsolete;
    public static string WithClientCredentialsIsObsolete;
}
[NullableContextAttribute("1")]
internal interface Microsoft.Identity.Web.IMergedOptionsStore {
    public abstract virtual MergedOptions Get(string name);
}
public static class Microsoft.Identity.Web.Internal.WebApiBuilders : object {
    [NullableContextAttribute("1")]
[RequiresUnreferencedCodeAttribute("Calls Bind, Configure with Unspecified Configuration and ServiceCollection.")]
public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder EnableTokenAcquisition(Action`1<ConfidentialClientApplicationOptions> configureConfidentialClientApplicationOptions, string authenticationScheme, IServiceCollection services, IConfigurationSection configuration);
}
[NullableContextAttribute("1")]
public interface Microsoft.Identity.Web.ITokenAcquisition {
    [NullableContextAttribute("2")]
public virtual Task`1<string> GetAccessTokenForUserAsync(IEnumerable`1<string> scopes, string tenantId, string userFlow, ClaimsPrincipal user, TokenAcquisitionOptions tokenAcquisitionOptions);
    [NullableContextAttribute("2")]
public abstract virtual Task`1<string> GetAccessTokenForUserAsync(IEnumerable`1<string> scopes, string authenticationScheme, string tenantId, string userFlow, ClaimsPrincipal user, TokenAcquisitionOptions tokenAcquisitionOptions);
    [NullableContextAttribute("2")]
public virtual Task`1<AuthenticationResult> GetAuthenticationResultForUserAsync(IEnumerable`1<string> scopes, string tenantId, string userFlow, ClaimsPrincipal user, TokenAcquisitionOptions tokenAcquisitionOptions);
    [NullableContextAttribute("2")]
public abstract virtual Task`1<AuthenticationResult> GetAuthenticationResultForUserAsync(IEnumerable`1<string> scopes, string authenticationScheme, string tenantId, string userFlow, ClaimsPrincipal user, TokenAcquisitionOptions tokenAcquisitionOptions);
    public virtual Task`1<string> GetAccessTokenForAppAsync(string scope, string tenant, TokenAcquisitionOptions tokenAcquisitionOptions);
    [NullableContextAttribute("2")]
public abstract virtual Task`1<string> GetAccessTokenForAppAsync(string scope, string authenticationScheme, string tenant, TokenAcquisitionOptions tokenAcquisitionOptions);
    public virtual Task`1<AuthenticationResult> GetAuthenticationResultForAppAsync(string scope, string tenant, TokenAcquisitionOptions tokenAcquisitionOptions);
    [NullableContextAttribute("2")]
public abstract virtual Task`1<AuthenticationResult> GetAuthenticationResultForAppAsync(string scope, string authenticationScheme, string tenant, TokenAcquisitionOptions tokenAcquisitionOptions);
    public virtual void ReplyForbiddenWithWwwAuthenticateHeader(IEnumerable`1<string> scopes, MsalUiRequiredException msalServiceException, HttpResponse httpResponse);
    public abstract virtual void ReplyForbiddenWithWwwAuthenticateHeader(IEnumerable`1<string> scopes, MsalUiRequiredException msalServiceException, string authenticationScheme, HttpResponse httpResponse);
    public abstract virtual string GetEffectiveAuthenticationScheme(string authenticationScheme);
    public abstract virtual Task ReplyForbiddenWithWwwAuthenticateHeaderAsync(IEnumerable`1<string> scopes, MsalUiRequiredException msalServiceException, HttpResponse httpResponse);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Identity.Web.ITokenAcquisitionHost {
    public abstract virtual MergedOptions GetOptions(string authenticationScheme, String& effectiveAuthenticationScheme);
    public abstract virtual void SetSession(string key, string value);
    public abstract virtual string GetEffectiveAuthenticationScheme(string authenticationScheme);
    public abstract virtual string GetCurrentRedirectUri(MergedOptions mergedOptions);
    [NullableContextAttribute("2")]
public abstract virtual SecurityToken GetTokenUsedToCallWebAPI();
    [NullableContextAttribute("2")]
public abstract virtual Task`1<ClaimsPrincipal> GetAuthenticatedUserAsync(ClaimsPrincipal user);
    [NullableContextAttribute("2")]
public abstract virtual ClaimsPrincipal GetUserFromRequest();
    public abstract virtual void SetHttpResponse(HttpStatusCode statusCode, string wwwAuthenticate);
}
[NullableContextAttribute("1")]
internal interface Microsoft.Identity.Web.ITokenAcquisitionInternal {
    [RequiresUnreferencedCodeAttribute("Calls Microsoft.Identity.Web.TokenAcquisition.AddAccountToCacheFromAuthorizationCodeAsync(AuthCodeRedemptionParameters)")]
public abstract virtual Task AddAccountToCacheFromAuthorizationCodeAsync(AuthorizationCodeReceivedContext context, IEnumerable`1<string> scopes, string authenticationScheme);
    public abstract virtual Task RemoveAccountAsync(ClaimsPrincipal user, string authenticationScheme);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.JwtBearerOptionsMerger : object {
    private IMergedOptionsStore _mergedOptionsMonitor;
    public JwtBearerOptionsMerger(IMergedOptionsStore mergedOptions);
    public sealed virtual void PostConfigure(string name, JwtBearerOptions options);
    private static void UpdateOptionsMetadata(JwtBearerOptions options, MergedOptions mergedOptions);
}
internal static class Microsoft.Identity.Web.LoggingEventId : object {
    public static EventId SessionCache;
    public static EventId SessionCacheKeyNotFound;
    public static EventId TokenAcquisitionError;
    public static EventId TokenAcquisitionMsalAuthenticationResultTime;
    public static EventId NotUsingManagedIdentity;
    public static EventId UsingManagedIdentity;
    public static EventId UsingPodIdentityFile;
    public static EventId UsingCertThumbprint;
    public static EventId UsingSignedAssertionFromVault;
    private static LoggingEventId();
}
internal class Microsoft.Identity.Web.LoggingOptions : object {
    [CompilerGeneratedAttribute]
private bool <EnablePiiLogging>k__BackingField;
    public bool EnablePiiLogging { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnablePiiLogging();
    [CompilerGeneratedAttribute]
public void set_EnablePiiLogging(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Identity.Web.LogMessages : object {
    public static string MissingRoles;
    public static string MissingScopes;
    public static string ExceptionOccurredWhenAddingAnAccountToTheCacheFromAuthCode;
    public static string ErrorAcquiringTokenForDownstreamWebApi;
    public static string MethodBegin;
    public static string MethodEnd;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.MergedOptions : MicrosoftIdentityOptions {
    private ConfidentialClientApplicationOptions _confidentialClientApplicationOptions;
    [CompilerGeneratedAttribute]
private AadAuthorityAudience <AadAuthorityAudience>k__BackingField;
    [CompilerGeneratedAttribute]
private AzureCloudInstance <AzureCloudInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureRegion>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <ClientCapabilities>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnablePiiLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultPlatformLoggingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectUri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableCacheSynchronization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MergedWithCca>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveAuthority>k__BackingField;
    [NullableAttribute("1")]
public ConfidentialClientApplicationOptions ConfidentialClientApplicationOptions { get; }
    public AadAuthorityAudience AadAuthorityAudience { get; public set; }
    public AzureCloudInstance AzureCloudInstance { get; public set; }
    public string AzureRegion { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<string> ClientCapabilities { get; public set; }
    public string ClientName { get; public set; }
    public string ClientVersion { get; public set; }
    public string Component { get; public set; }
    public bool EnablePiiLogging { get; public set; }
    public bool IsDefaultPlatformLoggingEnabled { get; public set; }
    public LogLevel LogLevel { get; public set; }
    public string RedirectUri { get; public set; }
    public bool EnableCacheSynchronization { get; public set; }
    internal bool MergedWithCca { get; internal set; }
    internal bool PreserveAuthority { get; internal set; }
    [NullableContextAttribute("1")]
public ConfidentialClientApplicationOptions get_ConfidentialClientApplicationOptions();
    [CompilerGeneratedAttribute]
public AadAuthorityAudience get_AadAuthorityAudience();
    [CompilerGeneratedAttribute]
public void set_AadAuthorityAudience(AadAuthorityAudience value);
    [CompilerGeneratedAttribute]
public AzureCloudInstance get_AzureCloudInstance();
    [CompilerGeneratedAttribute]
public void set_AzureCloudInstance(AzureCloudInstance value);
    [CompilerGeneratedAttribute]
public string get_AzureRegion();
    [CompilerGeneratedAttribute]
public void set_AzureRegion(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ClientCapabilities();
    [CompilerGeneratedAttribute]
public void set_ClientCapabilities(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ClientName();
    [CompilerGeneratedAttribute]
public void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public string get_ClientVersion();
    [CompilerGeneratedAttribute]
public void set_ClientVersion(string value);
    [CompilerGeneratedAttribute]
public string get_Component();
    [CompilerGeneratedAttribute]
public void set_Component(string value);
    [CompilerGeneratedAttribute]
public bool get_EnablePiiLogging();
    [CompilerGeneratedAttribute]
public void set_EnablePiiLogging(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultPlatformLoggingEnabled();
    [CompilerGeneratedAttribute]
public void set_IsDefaultPlatformLoggingEnabled(bool value);
    [CompilerGeneratedAttribute]
public LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public void set_LogLevel(LogLevel value);
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(string value);
    [CompilerGeneratedAttribute]
public bool get_EnableCacheSynchronization();
    [CompilerGeneratedAttribute]
public void set_EnableCacheSynchronization(bool value);
    [CompilerGeneratedAttribute]
internal bool get_MergedWithCca();
    [CompilerGeneratedAttribute]
internal void set_MergedWithCca(bool value);
    [CompilerGeneratedAttribute]
internal bool get_PreserveAuthority();
    [CompilerGeneratedAttribute]
internal void set_PreserveAuthority(bool value);
    [NullableContextAttribute("1")]
internal static void UpdateMergedOptionsFromMicrosoftIdentityOptions(MicrosoftIdentityOptions microsoftIdentityOptions, MergedOptions mergedOptions);
    [NullableContextAttribute("1")]
internal static void UpdateMergedOptionsFromConfidentialClientApplicationOptions(ConfidentialClientApplicationOptions confidentialClientApplicationOptions, MergedOptions mergedOptions);
    [NullableContextAttribute("1")]
internal static void UpdateConfidentialClientApplicationOptionsFromMergedOptions(MergedOptions mergedOptions, ConfidentialClientApplicationOptions confidentialClientApplicationOptions);
    [NullableContextAttribute("1")]
internal static void ParseAuthorityIfNecessary(MergedOptions mergedOptions);
    [NullableContextAttribute("1")]
internal static void UpdateMergedOptionsFromJwtBearerOptions(JwtBearerOptions jwtBearerOptions, MergedOptions mergedOptions);
    public void PrepareAuthorityInstanceForMsal();
    [NullableContextAttribute("1")]
public static void UpdateMergedOptionsFromMicrosoftIdentityApplicationOptions(MicrosoftIdentityApplicationOptions microsoftIdentityApplicationOptions, MergedOptions mergedOptions);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.Identity.Web.MergedOptions/<ComputeFromLegacyClientCredentials>d__66")]
private static IEnumerable`1<CredentialDescription> ComputeFromLegacyClientCredentials(MicrosoftIdentityOptions microsoftIdentityOptions);
    [NullableContextAttribute("1")]
private static IEnumerable`1<CredentialDescription> ComputeFromLegacyTokenDecryptCredentials(MicrosoftIdentityOptions microsoftIdentityOptions);
}
internal class Microsoft.Identity.Web.MergedOptionsStore : object {
    [NullableAttribute("1")]
private ConcurrentDictionary`2<string, MergedOptions> _options;
    [NullableContextAttribute("1")]
public sealed virtual MergedOptions Get(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder : MicrosoftIdentityBaseAuthenticationBuilder {
    [RequiresUnreferencedCodeAttribute("Calls Microsoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.MicrosoftIdentityBaseAuthenticationBuilder(IServiceCollection, IConfigurationSection)")]
internal MicrosoftIdentityAppCallsWebApiAuthenticationBuilder(IServiceCollection services, IConfigurationSection configurationSection);
    public MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddInMemoryTokenCaches(Action`1<MsalMemoryTokenCacheOptions> configureOptions, Action`1<MemoryCacheOptions> memoryCacheOptions);
    public MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddDistributedTokenCaches();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.MicrosoftIdentityApplicationOptionsMerger : object {
    private IMergedOptionsStore _mergedOptionsMonitor;
    public MicrosoftIdentityApplicationOptionsMerger(IMergedOptionsStore mergedOptions);
    public sealed virtual void PostConfigure(string name, MicrosoftIdentityApplicationOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IConfigurationSection <ConfigurationSection>k__BackingField;
    public IServiceCollection Services { get; private set; }
    [NullableAttribute("2")]
protected IConfigurationSection ConfigurationSection { get; protected set; }
    [RequiresUnreferencedCodeAttribute("Calls Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(IConfiguration, Object).")]
protected MicrosoftIdentityBaseAuthenticationBuilder(IServiceCollection services, IConfigurationSection configurationSection);
    internal static void SetIdentityModelLogger(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public IServiceCollection get_Services();
    [CompilerGeneratedAttribute]
private void set_Services(IServiceCollection value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected IConfigurationSection get_ConfigurationSection();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_ConfigurationSection(IConfigurationSection value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.MicrosoftIdentityOptions : OpenIdConnectOptions {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Domain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EditProfilePolicyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SignUpSignInPolicyId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResetPasswordPolicyId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LegacyCacheCompatibilityEnabled>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<CertificateDescription> <ClientCertificates>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<CertificateDescription> <TokenDecryptionCertificates>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<CredentialDescription> <ClientCredentials>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<CredentialDescription> <TokenDecryptionCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SendX5C>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithSpaAuthCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowWebApiToBeAuthorizedByACL>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAssignedManagedIdentityClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private CertificatelessOptions <ClientCredentialsUsingManagedIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PathString> <ResetPasswordPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PathString> <ErrorPath>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, string> <ExtraQueryParameters>k__BackingField;
    [NullableAttribute("1")]
public string Instance { get; public set; }
    public string TenantId { get; public set; }
    public string Domain { get; public set; }
    public string EditProfilePolicyId { get; public set; }
    public string SignUpSignInPolicyId { get; public set; }
    public string ResetPasswordPolicyId { get; public set; }
    public string DefaultUserFlow { get; }
    public bool LegacyCacheCompatibilityEnabled { get; public set; }
    internal bool IsB2C { get; }
    internal bool HasClientCredentials { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<CertificateDescription> ClientCertificates { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<CertificateDescription> TokenDecryptionCertificates { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<CredentialDescription> ClientCredentials { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<CredentialDescription> TokenDecryptionCredentials { get; public set; }
    public bool SendX5C { get; public set; }
    public bool WithSpaAuthCode { get; public set; }
    public bool AllowWebApiToBeAuthorizedByACL { get; public set; }
    public string UserAssignedManagedIdentityClientId { get; public set; }
    public CertificatelessOptions ClientCredentialsUsingManagedIdentity { get; public set; }
    public Nullable`1<PathString> ResetPasswordPath { get; public set; }
    public Nullable`1<PathString> ErrorPath { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> ExtraQueryParameters { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Instance();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Instance(string value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public string get_Domain();
    [CompilerGeneratedAttribute]
public void set_Domain(string value);
    [CompilerGeneratedAttribute]
public string get_EditProfilePolicyId();
    [CompilerGeneratedAttribute]
public void set_EditProfilePolicyId(string value);
    [CompilerGeneratedAttribute]
public string get_SignUpSignInPolicyId();
    [CompilerGeneratedAttribute]
public void set_SignUpSignInPolicyId(string value);
    [CompilerGeneratedAttribute]
public string get_ResetPasswordPolicyId();
    [CompilerGeneratedAttribute]
public void set_ResetPasswordPolicyId(string value);
    public string get_DefaultUserFlow();
    [CompilerGeneratedAttribute]
public bool get_LegacyCacheCompatibilityEnabled();
    [CompilerGeneratedAttribute]
public void set_LegacyCacheCompatibilityEnabled(bool value);
    internal bool get_IsB2C();
    internal bool get_HasClientCredentials();
    [CompilerGeneratedAttribute]
public IEnumerable`1<CertificateDescription> get_ClientCertificates();
    [CompilerGeneratedAttribute]
public void set_ClientCertificates(IEnumerable`1<CertificateDescription> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<CertificateDescription> get_TokenDecryptionCertificates();
    [CompilerGeneratedAttribute]
public void set_TokenDecryptionCertificates(IEnumerable`1<CertificateDescription> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<CredentialDescription> get_ClientCredentials();
    [CompilerGeneratedAttribute]
public void set_ClientCredentials(IEnumerable`1<CredentialDescription> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<CredentialDescription> get_TokenDecryptionCredentials();
    [CompilerGeneratedAttribute]
public void set_TokenDecryptionCredentials(IEnumerable`1<CredentialDescription> value);
    [CompilerGeneratedAttribute]
public bool get_SendX5C();
    [CompilerGeneratedAttribute]
public void set_SendX5C(bool value);
    [CompilerGeneratedAttribute]
public bool get_WithSpaAuthCode();
    [CompilerGeneratedAttribute]
public void set_WithSpaAuthCode(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowWebApiToBeAuthorizedByACL();
    [CompilerGeneratedAttribute]
public void set_AllowWebApiToBeAuthorizedByACL(bool value);
    [CompilerGeneratedAttribute]
public string get_UserAssignedManagedIdentityClientId();
    [CompilerGeneratedAttribute]
public void set_UserAssignedManagedIdentityClientId(string value);
    [CompilerGeneratedAttribute]
public CertificatelessOptions get_ClientCredentialsUsingManagedIdentity();
    [CompilerGeneratedAttribute]
public void set_ClientCredentialsUsingManagedIdentity(CertificatelessOptions value);
    [CompilerGeneratedAttribute]
public Nullable`1<PathString> get_ResetPasswordPath();
    [CompilerGeneratedAttribute]
public void set_ResetPasswordPath(Nullable`1<PathString> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PathString> get_ErrorPath();
    [CompilerGeneratedAttribute]
public void set_ErrorPath(Nullable`1<PathString> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ExtraQueryParameters();
    [CompilerGeneratedAttribute]
public void set_ExtraQueryParameters(IDictionary`2<string, string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.MicrosoftIdentityOptionsMerger : object {
    private IMergedOptionsStore _mergedOptionsMonitor;
    public MicrosoftIdentityOptionsMerger(IMergedOptionsStore mergedOptions);
    public sealed virtual void PostConfigure(string name, MicrosoftIdentityOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.MicrosoftIdentityWebChallengeUserException : Exception {
    [CompilerGeneratedAttribute]
private MsalUiRequiredException <MsalUiRequiredException>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Scopes>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Userflow>k__BackingField;
    public MsalUiRequiredException MsalUiRequiredException { get; public set; }
    public String[] Scopes { get; public set; }
    [NullableAttribute("2")]
public string Userflow { get; public set; }
    public MicrosoftIdentityWebChallengeUserException(MsalUiRequiredException msalUiRequiredException, String[] scopes, string userflow);
    [CompilerGeneratedAttribute]
public MsalUiRequiredException get_MsalUiRequiredException();
    [CompilerGeneratedAttribute]
public void set_MsalUiRequiredException(MsalUiRequiredException value);
    [CompilerGeneratedAttribute]
public String[] get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(String[] value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Userflow();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Userflow(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.MsalAspNetCoreHttpClientFactory : object {
    private IHttpClientFactory _httpClientFactory;
    public MsalAspNetCoreHttpClientFactory(IHttpClientFactory httpClientFactory);
    public sealed virtual HttpClient GetHttpClient();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Identity.Web.MsAuth10AtPop : object {
    [ExtensionAttribute]
internal static AcquireTokenForClientParameterBuilder WithAtPop(AcquireTokenForClientParameterBuilder builder, X509Certificate2 clientCertificate, string popPublicKey, string jwkClaim, string clientId, bool sendX5C);
    private static string GetSignedClientAssertion(X509Certificate2 certificate, string audience, string jwkClaim, string clientId, bool sendX5C);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Identity.Web.OidcConstants : object {
    public static string AdditionalClaims;
    public static string ScopeOfflineAccess;
    public static string ScopeProfile;
    public static string ScopeOpenId;
    public static string PolicyKey;
}
[ExtensionAttribute]
public static class Microsoft.Identity.Web.PrincipalExtensionsForSecurityTokens : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static SecurityToken GetBootstrapToken(IPrincipal claimsPrincipal);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Identity.Web.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddTokenAcquisition(IServiceCollection services, bool isTokenAcquisitionSingleton);
    private static bool HasImplementationType(IServiceCollection services, Type implementationType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.TokenAcquirer : object {
    private ITokenAcquisition _tokenAcquisition;
    [NullableAttribute("2")]
private string _authenticationScheme;
    public TokenAcquirer(ITokenAcquisition tokenAcquisition, string authenticationScheme);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquirer/<Microsoft-Identity-Abstractions-ITokenAcquirer-GetTokenForUserAsync>d__3")]
private sealed virtual override Task`1<AcquireTokenResult> Microsoft.Identity.Abstractions.ITokenAcquirer.GetTokenForUserAsync(IEnumerable`1<string> scopes, AcquireTokenOptions tokenAcquisitionOptions, ClaimsPrincipal user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquirer/<Microsoft-Identity-Abstractions-ITokenAcquirer-GetTokenForAppAsync>d__4")]
private sealed virtual override Task`1<AcquireTokenResult> Microsoft.Identity.Abstractions.ITokenAcquirer.GetTokenForAppAsync(string scope, AcquireTokenOptions tokenAcquisitionOptions, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
private static TokenAcquisitionOptions GetEffectiveTokenAcquisitionOptions(AcquireTokenOptions tokenAcquisitionOptions, string authenticationScheme, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.TokenAcquirerFactory : object {
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private ServiceCollection _services;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private static TokenAcquirerFactory <defaultInstance>k__BackingField;
    private ITokenAcquirerFactory implementation;
    public IConfiguration Configuration { get; protected set; }
    [NullableAttribute("2")]
public IServiceProvider ServiceProvider { get; protected internal set; }
    public ServiceCollection Services { get; private set; }
    [NullableAttribute("2")]
private static TokenAcquirerFactory defaultInstance { get; private set; }
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
protected void set_Configuration(IConfiguration value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected internal void set_ServiceProvider(IServiceProvider value);
    public ServiceCollection get_Services();
    private void set_Services(ServiceCollection value);
    [RequiresUnreferencedCodeAttribute("Calls Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(IConfiguration, Object).")]
public static T GetDefaultInstance(string configSection);
    [RequiresUnreferencedCodeAttribute("Calls Microsoft.Extensions.Configuration.ConfigurationBinder.Bind(IConfiguration, Object).")]
public static TokenAcquirerFactory GetDefaultInstance(string configSection);
    public IServiceProvider Build();
    protected virtual void PreBuild();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private static TokenAcquirerFactory get_defaultInstance();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private static void set_defaultInstance(TokenAcquirerFactory value);
    internal static void ResetDefaultInstance();
    private IConfiguration ReadConfiguration();
    protected virtual string DefineConfiguration(IConfigurationBuilder builder);
    public ITokenAcquirer GetTokenAcquirer(string authority, string clientId, IEnumerable`1<CredentialDescription> clientCredentials, string region);
    public sealed virtual ITokenAcquirer GetTokenAcquirer(IdentityApplicationOptions applicationIdentityOptions);
    public sealed virtual ITokenAcquirer GetTokenAcquirer(string optionName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.TokenAcquisition : object {
    protected IMsalTokenCacheProvider _tokenCacheProvider;
    private SemaphoreSlim _applicationSync;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, IConfidentialClientApplication> _applicationsByAuthorityClientId;
    private bool _retryClientCertificate;
    protected IMsalHttpClientFactory _httpClientFactory;
    protected ILogger _logger;
    protected IServiceProvider _serviceProvider;
    protected ITokenAcquisitionHost _tokenAcquisitionHost;
    protected ICredentialsLoader _credentialsLoader;
    [NullableAttribute("2")]
protected ICertificatesObserver _certificatesObserver;
    private String[] _scopesRequestedByMsal;
    private HashSet`1<string> _metaTenantIdentifiers;
    private ConcurrentDictionary`2<string, IManagedIdentityApplication> _managedIdentityApplicationsByClientId;
    private SemaphoreSlim _managedIdSemaphore;
    private static string SystemAssignedManagedIdentityKey;
    public TokenAcquisition(IMsalTokenCacheProvider tokenCacheProvider, ITokenAcquisitionHost tokenAcquisitionHost, IHttpClientFactory httpClientFactory, ILogger`1<TokenAcquisition> logger, IServiceProvider serviceProvider, ICredentialsLoader credentialsLoader);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisition/<AddAccountToCacheFromAuthorizationCodeAsync>d__13")]
[RequiresUnreferencedCodeAttribute("Calls Microsoft.Identity.Web.ClientInfo.CreateFromJson(String)")]
public Task`1<AcquireTokenResult> AddAccountToCacheFromAuthorizationCodeAsync(AuthCodeRedemptionParameters authCodeRedemptionParameters);
    private static string GetApplicationKey(MergedOptions mergedOptions);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisition/<GetAuthenticationResultForUserAsync>d__15")]
public sealed virtual Task`1<AuthenticationResult> GetAuthenticationResultForUserAsync(IEnumerable`1<string> scopes, string authenticationScheme, string tenantId, string userFlow, ClaimsPrincipal user, TokenAcquisitionOptions tokenAcquisitionOptions);
    [NullableContextAttribute("2")]
private void LogAuthResult(AuthenticationResult authenticationResult);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisition/<GetAuthenticationResultForAppAsync>d__17")]
public sealed virtual Task`1<AuthenticationResult> GetAuthenticationResultForAppAsync(string scope, string authenticationScheme, string tenant, TokenAcquisitionOptions tokenAcquisitionOptions);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisition/<GetAccessTokenForAppAsync>d__18")]
public sealed virtual Task`1<string> GetAccessTokenForAppAsync(string scope, string authenticationScheme, string tenant, TokenAcquisitionOptions tokenAcquisitionOptions);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisition/<GetAccessTokenForUserAsync>d__19")]
public sealed virtual Task`1<string> GetAccessTokenForUserAsync(IEnumerable`1<string> scopes, string authenticationScheme, string tenantId, string userFlow, ClaimsPrincipal user, TokenAcquisitionOptions tokenAcquisitionOptions);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisition/<RemoveAccountAsync>d__20")]
public sealed virtual Task RemoveAccountAsync(ClaimsPrincipal user, string authenticationScheme);
    private bool IsInvalidClientCertificateOrSignedAssertionError(MsalServiceException exMsal);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisition/<GetOrBuildConfidentialClientApplicationAsync>d__22")]
internal Task`1<IConfidentialClientApplication> GetOrBuildConfidentialClientApplicationAsync(MergedOptions mergedOptions);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisition/<BuildConfidentialClientApplicationAsync>d__23")]
private Task`1<IConfidentialClientApplication> BuildConfidentialClientApplicationAsync(MergedOptions mergedOptions);
    private void NotifyCertificateSelection(MergedOptions mergedOptions, IConfidentialClientApplication app, CerticateObserverAction action);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisition/<GetAuthenticationResultForWebApiToCallDownstreamApiAsync>d__25")]
private ValueTask`1<AuthenticationResult> GetAuthenticationResultForWebApiToCallDownstreamApiAsync(IConfidentialClientApplication application, string tenantId, IEnumerable`1<string> scopes, TokenAcquisitionOptions tokenAcquisitionOptions, MergedOptions mergedOptions, ClaimsPrincipal userHint);
    private static void CheckAssertionsForInjectionAttempt(string assertion, string subAssertion);
    [NullableContextAttribute("2")]
private static string GetActualToken(SecurityToken validatedToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisition/<GetAuthenticationResultForWebAppWithAccountFromCacheAsync>d__28")]
private ValueTask`1<AuthenticationResult> GetAuthenticationResultForWebAppWithAccountFromCacheAsync(IConfidentialClientApplication application, ClaimsPrincipal claimsPrincipal, IEnumerable`1<string> scopes, string tenantId, MergedOptions mergedOptions, string userFlow, TokenAcquisitionOptions tokenAcquisitionOptions);
    private Task`1<AuthenticationResult> GetAuthenticationResultForWebAppWithAccountFromCacheAsync(IConfidentialClientApplication application, IAccount account, IEnumerable`1<string> scopes, string tenantId, MergedOptions mergedOptions, string userFlow, TokenAcquisitionOptions tokenAcquisitionOptions);
    internal static Dictionary`2<string, string> MergeExtraQueryParameters(MergedOptions mergedOptions, TokenAcquisitionOptions tokenAcquisitionOptions);
    protected static bool AcceptedTokenVersionMismatch(MsalUiRequiredException msalServiceException);
    public sealed virtual string GetEffectiveAuthenticationScheme(string authenticationScheme);
    private void Log(LogLevel level, string message, bool containsPii);
    private Nullable`1<LogLevel> ConvertMicrosoftExtensionsLogLevelToMsal(ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisition/<GetOrBuildManagedIdentityApplication>d__39")]
internal Task`1<IManagedIdentityApplication> GetOrBuildManagedIdentityApplication(MergedOptions mergedOptions, ManagedIdentityOptions managedIdentityOptions);
    private IManagedIdentityApplication BuildManagedIdentityApplication(ManagedIdentityId managedIdentityId, bool enablePiiLogging);
    internal static string GetCacheKeyForManagedId(ManagedIdentityOptions managedIdOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.TokenAcquisitionAspNetCore : TokenAcquisition {
    public TokenAcquisitionAspNetCore(IMsalTokenCacheProvider tokenCacheProvider, IHttpClientFactory httpClientFactory, ILogger`1<TokenAcquisition> logger, ITokenAcquisitionHost tokenAcquisitionHost, IServiceProvider serviceProvider, ICredentialsLoader credentialsLoader);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisitionAspNetCore/<ReplyForbiddenWithWwwAuthenticateHeaderAsync>d__1")]
public sealed virtual Task ReplyForbiddenWithWwwAuthenticateHeaderAsync(IEnumerable`1<string> scopes, MsalUiRequiredException msalServiceException, HttpResponse httpResponse);
    public sealed virtual void ReplyForbiddenWithWwwAuthenticateHeader(IEnumerable`1<string> scopes, MsalUiRequiredException msalServiceException, string authenticationScheme, HttpResponse httpResponse);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisitionAspNetCore/<ReplyForbiddenWithWwwAuthenticateHeaderAsync>d__3")]
private Task ReplyForbiddenWithWwwAuthenticateHeaderAsync(IEnumerable`1<string> scopes, MsalUiRequiredException msalServiceException, string authenticationScheme, HttpResponse httpResponse);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisitionAspNetCore/<AddAccountToCacheFromAuthorizationCodeAsync>d__4")]
[RequiresUnreferencedCodeAttribute("Calls Microsoft.Identity.Web.TokenAcquisition.AddAccountToCacheFromAuthorizationCodeAsync(AuthCodeRedemptionParameters)")]
public sealed virtual Task AddAccountToCacheFromAuthorizationCodeAsync(AuthorizationCodeReceivedContext context, IEnumerable`1<string> scopes, string authenticationScheme);
    private void CheckParameters(AuthorizationCodeReceivedContext context, IEnumerable`1<string> scopes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.TokenAcquisitionAspnetCoreHost : object {
    private IHttpContextAccessor _httpContextAccessor;
    private IMergedOptionsStore _mergedOptionsMonitor;
    private IServiceProvider _serviceProvider;
    [NullableAttribute("2")]
private HttpContext CurrentHttpContext { get; }
    public TokenAcquisitionAspnetCoreHost(IHttpContextAccessor httpContextAccessor, IMergedOptionsStore mergedOptionsMonitor, IServiceProvider serviceProvider);
    [NullableContextAttribute("2")]
private HttpContext get_CurrentHttpContext();
    public sealed virtual MergedOptions GetOptions(string authenticationScheme, String& effectiveAuthenticationScheme);
    public sealed virtual void SetSession(string key, string value);
    public sealed virtual string GetEffectiveAuthenticationScheme(string authenticationScheme);
    public sealed virtual string GetCurrentRedirectUri(MergedOptions mergedOptions);
    private string BuildCurrentUriFromRequest(HttpContext httpContext, HttpRequest request, MergedOptions mergedOptions);
    public sealed virtual void SetHttpResponse(HttpStatusCode statusCode, string wwwAuthenticate);
    [NullableContextAttribute("2")]
public sealed virtual SecurityToken GetTokenUsedToCallWebAPI();
    [NullableContextAttribute("2")]
public sealed virtual ClaimsPrincipal GetUserFromRequest();
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisitionAspnetCoreHost/<GetAuthenticatedUserAsync>d__14")]
public sealed virtual Task`1<ClaimsPrincipal> GetAuthenticatedUserAsync(ClaimsPrincipal user);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.TokenAcquisitionOptions : AcquireTokenOptions {
    [CompilerGeneratedAttribute]
private PoPAuthenticationConfiguration <PoPConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public PoPAuthenticationConfiguration PoPConfiguration { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    [CompilerGeneratedAttribute]
public PoPAuthenticationConfiguration get_PoPConfiguration();
    [CompilerGeneratedAttribute]
public void set_PoPConfiguration(PoPAuthenticationConfiguration value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    [NullableContextAttribute("1")]
public TokenAcquisitionOptions Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Identity.Web.Util.Base64UrlHelpers : object {
    private static char Base64PadCharacter;
    private static char Base64Character62;
    private static char Base64Character63;
    private static char Base64UrlCharacter62;
    private static char Base64UrlCharacter63;
    private static Char[] s_base64Table;
    private static Base64UrlHelpers();
    [NullableContextAttribute("2")]
public static string Encode(string arg);
    private static string Encode(Byte[] inArray, int offset, int length);
    [NullableContextAttribute("2")]
public static string Encode(Byte[] inArray);
    [NullableContextAttribute("2")]
internal static string EncodeString(string str);
    [NullableContextAttribute("2")]
public static Byte[] DecodeBytes(string str);
    private static Byte[] UnsafeDecode(string str);
    public static string Decode(string arg);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
