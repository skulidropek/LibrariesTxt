[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.AadIssuerValidatorOptions : object {
    [CompilerGeneratedAttribute]
private string <HttpClientName>k__BackingField;
    public string HttpClientName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HttpClientName();
    [CompilerGeneratedAttribute]
public void set_HttpClientName(string value);
}
[ExtensionAttribute]
public static class Microsoft.Identity.Web.AccountExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ClaimsPrincipal ToClaimsPrincipal(IAccount account);
}
internal static class Microsoft.Identity.Web.AppContextSwitches : object {
    [NullableAttribute("1")]
internal static string UseClaimsIdentityTypeSwitchName;
    private static Nullable`1<bool> s_useClaimsIdentityType;
    internal static bool UseClaimsIdentityType { get; }
    internal static bool get_UseClaimsIdentityType();
    internal static void ResetState();
}
[ExtensionAttribute]
public static class Microsoft.Identity.Web.AppServicesAuthenticationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static AuthenticationBuilder AddAppServicesAuthentication(AuthenticationBuilder builder);
}
public static class Microsoft.Identity.Web.AppServicesAuthenticationDefaults : object {
    [NullableAttribute("1")]
public static string AuthenticationScheme;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.Identity.Web.AppServicesAuthenticationHandler : AuthenticationHandler`1<AppServicesAuthenticationOptions> {
    public AppServicesAuthenticationHandler(IOptionsMonitor`1<AppServicesAuthenticationOptions> options, ILoggerFactory logger, UrlEncoder encoder);
    protected virtual Task`1<AuthenticateResult> HandleAuthenticateAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Identity.Web.AppServicesAuthenticationInformation : object {
    internal static string AppServicesAuthEnabledEnvironmentVariable;
    internal static string AppServicesAuthOpenIdIssuerEnvironmentVariable;
    internal static string AppServicesAuthClientIdEnvironmentVariable;
    internal static string AppServicesAuthClientSecretEnvironmentVariable;
    internal static string AppServicesAuthClientSecretSettingName;
    internal static string AppServicesAuthLogoutPathEnvironmentVariable;
    internal static string AppServicesAuthIdentityProviderEnvironmentVariable;
    internal static string AppServicesAuthAzureActiveDirectory;
    internal static string AppServicesAuthAAD;
    internal static string AppServicesAuthIdTokenHeader;
    internal static string AppServicesWebSiteAuthApiPrefix;
    private static string AppServicesAuthIdpTokenHeader;
    internal static string AppServicesAuthDebugHeadersEnvironmentVariable;
    public static bool IsAppServicesAadAuthenticationEnabled { get; }
    [NullableAttribute("2")]
public static string LogoutUrl { get; }
    [NullableAttribute("2")]
internal static string ClientId { get; }
    [NullableAttribute("2")]
internal static string ClientSecret { get; }
    [NullableAttribute("2")]
internal static string Issuer { get; }
    public static bool get_IsAppServicesAadAuthenticationEnabled();
    [NullableContextAttribute("2")]
public static string get_LogoutUrl();
    [NullableContextAttribute("2")]
internal static string get_ClientId();
    [NullableContextAttribute("2")]
internal static string get_ClientSecret();
    [NullableContextAttribute("2")]
internal static string get_Issuer();
    internal static string GetIdToken(IDictionary`2<string, StringValues> headers);
    internal static string GetIdp(IDictionary`2<string, StringValues> headers);
    internal static ClaimsPrincipal GetUser(IDictionary`2<string, StringValues> headers);
}
public class Microsoft.Identity.Web.AppServicesAuthenticationOptions : AuthenticationSchemeOptions {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.AppServicesAuthenticationTokenAcquisition : object {
    private object _applicationSyncObj;
    [NullableAttribute("2")]
private IConfidentialClientApplication _application;
    private IHttpContextAccessor _httpContextAccessor;
    private IMsalHttpClientFactory _httpClientFactory;
    private IMsalTokenCacheProvider _tokenCacheProvider;
    [NullableAttribute("2")]
private HttpContext CurrentHttpContext { get; }
    public AppServicesAuthenticationTokenAcquisition(IMsalTokenCacheProvider tokenCacheProvider, IHttpContextAccessor httpContextAccessor, IHttpClientFactory httpClientFactory);
    [NullableContextAttribute("2")]
private HttpContext get_CurrentHttpContext();
    private IConfidentialClientApplication GetOrCreateApplication();
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.Identity.Web.AppServicesAuthenticationTokenAcquisition/<GetAccessTokenForAppAsync>d__10")]
public sealed virtual Task`1<string> GetAccessTokenForAppAsync(string scope, string authenticationScheme, string tenant, TokenAcquisitionOptions tokenAcquisitionOptions);
    [NullableContextAttribute("2")]
public sealed virtual Task`1<string> GetAccessTokenForUserAsync(IEnumerable`1<string> scopes, string authenticationScheme, string tenantId, string userFlow, ClaimsPrincipal user, TokenAcquisitionOptions tokenAcquisitionOptions);
    private string GetAccessToken(IHeaderDictionary headers);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.Identity.Web.AppServicesAuthenticationTokenAcquisition/<GetAuthenticationResultForUserAsync>d__13")]
public sealed virtual Task`1<AuthenticationResult> GetAuthenticationResultForUserAsync(IEnumerable`1<string> scopes, string authenticationScheme, string tenantId, string userFlow, ClaimsPrincipal user, TokenAcquisitionOptions tokenAcquisitionOptions);
    public sealed virtual Task ReplyForbiddenWithWwwAuthenticateHeaderAsync(IEnumerable`1<string> scopes, MsalUiRequiredException msalServiceException, HttpResponse httpResponse);
    public sealed virtual void ReplyForbiddenWithWwwAuthenticateHeader(IEnumerable`1<string> scopes, MsalUiRequiredException msalServiceException, string authenticationScheme, HttpResponse httpResponse);
    [NullableContextAttribute("2")]
public sealed virtual Task`1<AuthenticationResult> GetAuthenticationResultForAppAsync(string scope, string authenticationScheme, string tenant, TokenAcquisitionOptions tokenAcquisitionOptions);
    public sealed virtual string GetEffectiveAuthenticationScheme(string authenticationScheme);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Identity.Web.AuthorityHelpers : object {
    internal static string BuildAuthority(MicrosoftIdentityOptions options);
    internal static string EnsureAuthorityIsV2(string authority);
    internal static string BuildCiamAuthorityIfNeeded(string authority, Boolean& preserveAuthority);
    internal static string GetAuthorityWithoutQueryIfNeeded(MicrosoftIdentityOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.AuthorizeForScopesAttribute : ExceptionFilterAttribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ScopeKeySection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserFlow>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationScheme>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Scopes { get; public set; }
    public string ScopeKeySection { get; public set; }
    public string UserFlow { get; public set; }
    public string AuthenticationScheme { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(String[] value);
    [CompilerGeneratedAttribute]
public string get_ScopeKeySection();
    [CompilerGeneratedAttribute]
public void set_ScopeKeySection(string value);
    [CompilerGeneratedAttribute]
public string get_UserFlow();
    [CompilerGeneratedAttribute]
public void set_UserFlow(string value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationScheme();
    [CompilerGeneratedAttribute]
public void set_AuthenticationScheme(string value);
    [NullableContextAttribute("1")]
public virtual void OnException(ExceptionContext context);
    [NullableContextAttribute("1")]
internal static MsalUiRequiredException FindMsalUiRequiredExceptionIfAny(Exception exception);
    [NullableContextAttribute("1")]
private static bool IsAjaxRequest(HttpRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers : object {
    private ILoginErrorAccessor _errorAccessor;
    private Dictionary`2<string, string> _userFlowToIssuerAddress;
    [CompilerGeneratedAttribute]
private string <SchemeName>k__BackingField;
    [CompilerGeneratedAttribute]
private MicrosoftIdentityOptions <Options>k__BackingField;
    public string SchemeName { get; }
    public MicrosoftIdentityOptions Options { get; }
    public AzureADB2COpenIDConnectEventHandlers(string schemeName, MicrosoftIdentityOptions options, ILoginErrorAccessor errorAccessor);
    [CompilerGeneratedAttribute]
public string get_SchemeName();
    [CompilerGeneratedAttribute]
public MicrosoftIdentityOptions get_Options();
    public Task OnRedirectToIdentityProvider(RedirectContext context);
    public Task OnRemoteFailure(RemoteFailureContext context);
    private string BuildIssuerAddress(RedirectContext context, string defaultUserFlow, string userFlow);
}
[ExtensionAttribute]
public static class Microsoft.Identity.Web.AzureFunctionsAuthenticationHttpContextExtension : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Identity.Web.AzureFunctionsAuthenticationHttpContextExtension/<AuthenticateAzureFunctionAsync>d__0")]
[ExtensionAttribute]
public static Task`1<ValueTuple`2<bool, IActionResult>> AuthenticateAzureFunctionAsync(HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Identity.Web.ClaimsPrincipalFactory : object {
    public static ClaimsPrincipal FromHomeTenantIdAndHomeObjectId(string homeTenantId, string homeObjectId);
    public static ClaimsPrincipal FromTenantIdAndObjectId(string tenantId, string objectId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Identity.Web.CookiePolicyOptionsExtensions : object {
    private static int Two;
    private static int SixtySeven;
    private static int FiftyOne;
    private static int Thirteen;
    private static int Twelve;
    private static int Ten;
    private static int Fourteen;
    [ExtensionAttribute]
public static CookiePolicyOptions HandleSameSiteCookieCompatibility(CookiePolicyOptions options);
    [ExtensionAttribute]
public static CookiePolicyOptions HandleSameSiteCookieCompatibility(CookiePolicyOptions options, Func`2<string, bool> disallowsSameSiteNone);
    private static void CheckSameSite(HttpContext httpContext, CookieOptions options, Func`2<string, bool> disallowsSameSiteNone);
    public static bool DisallowsSameSiteNone(string userAgent);
    [CompilerGeneratedAttribute]
internal static bool <DisallowsSameSiteNone>g__HasWebKitSameSiteBug|10_0(<>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static bool <DisallowsSameSiteNone>g__DropsUnrecognizedSameSiteCookies|10_1(<>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static bool <DisallowsSameSiteNone>g__IsIosVersion|10_2(int major, <>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static bool <DisallowsSameSiteNone>g__IsMacosxVersion|10_3(int major, int minor, <>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static bool <DisallowsSameSiteNone>g__IsSafari|10_4(<>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static bool <DisallowsSameSiteNone>g__IsMacEmbeddedBrowser|10_5(<>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static bool <DisallowsSameSiteNone>g__IsChromiumBased|10_6(<>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static bool <DisallowsSameSiteNone>g__IsChromiumVersionAtLeast|10_7(int major, <>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static bool <DisallowsSameSiteNone>g__IsUcBrowser|10_8(<>c__DisplayClass10_0& );
    [CompilerGeneratedAttribute]
internal static bool <DisallowsSameSiteNone>g__IsUcBrowserVersionAtLeast|10_9(int major, int minor, int build, <>c__DisplayClass10_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.DefaultMicrosoftIdentityAuthenticationDelegatingHandlerFactory : object {
    private IServiceProvider _serviceProvider;
    public DefaultMicrosoftIdentityAuthenticationDelegatingHandlerFactory(IServiceProvider serviceProvider);
    public sealed virtual DelegatingHandler CreateAppHandler(string serviceName);
    public sealed virtual DelegatingHandler CreateUserHandler(string serviceName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Use DownstreamApi in Microsoft.Identity.Abstractions, implemented in Microsoft.Identity.Web.DownstreamApi.See aka.ms/id-web-downstream-api-v2 for migration details.", "False")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Identity.Web.DownstreamWebApi : object {
    private ITokenAcquisition _tokenAcquisition;
    private HttpClient _httpClient;
    private IOptionsMonitor`1<DownstreamWebApiOptions> _namedDownstreamWebApiOptions;
    private IOptionsMonitor`1<MicrosoftIdentityOptions> _microsoftIdentityOptionsMonitor;
    public DownstreamWebApi(ITokenAcquisition tokenAcquisition, IOptionsMonitor`1<DownstreamWebApiOptions> namedDownstreamWebApiOptions, HttpClient httpClient, IOptionsMonitor`1<MicrosoftIdentityOptions> microsoftIdentityOptionsMonitor);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.Identity.Web.DownstreamWebApi/<CallWebApiForUserAsync>d__5")]
public sealed virtual Task`1<HttpResponseMessage> CallWebApiForUserAsync(string serviceName, string authenticationScheme, Action`1<DownstreamWebApiOptions> calledDownstreamWebApiOptionsOverride, ClaimsPrincipal user, StringContent content);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.DownstreamWebApi/<CallWebApiForUserAsync>d__6`2")]
[RequiresUnreferencedCodeAttribute("Calls System.Text.Json.JsonSerializer.Serialize<TValue>(TValue, JsonSerializerOptions).")]
public sealed virtual Task`1<TOutput> CallWebApiForUserAsync(string serviceName, TInput input, string authenticationScheme, Action`1<DownstreamWebApiOptions> downstreamWebApiOptionsOverride, ClaimsPrincipal user);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.DownstreamWebApi/<CallWebApiForAppAsync>d__7")]
public sealed virtual Task`1<HttpResponseMessage> CallWebApiForAppAsync(string serviceName, string authenticationScheme, Action`1<DownstreamWebApiOptions> downstreamWebApiOptionsOverride, StringContent content);
    internal DownstreamWebApiOptions MergeOptions(string optionsInstanceName, Action`1<DownstreamWebApiOptions> calledApiOptionsOverride);
    private static void CreateProofOfPossessionConfiguration(DownstreamWebApiOptions effectiveOptions, string apiUrl);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Identity.Web.DownstreamWebApiExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use AddDownstreamApi in Microsoft.Identity.Abstractions, implemented in Microsoft.Identity.Web.DownstreamApi.See aka.ms/id-web-downstream-api-v2 for migration details.", "False")]
[EditorBrowsableAttribute("1")]
public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddDownstreamWebApi(MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, string serviceName, IConfiguration configuration);
    [ExtensionAttribute]
[ObsoleteAttribute("Use AddDownstreamApi in Microsoft.Identity.Abstractions, implemented in Microsoft.Identity.Web.DownstreamApi.See aka.ms/id-web-downstream-api-v2 for migration details.", "False")]
[EditorBrowsableAttribute("1")]
public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddDownstreamWebApi(MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, string serviceName, Action`1<DownstreamWebApiOptions> configureOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Identity.Web.DownstreamWebApiGenericExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.DownstreamWebApiGenericExtensions/<GetForUserAsync>d__0`1")]
[ExtensionAttribute]
[ObsoleteAttribute("Use IDownstreamApi.GetForUserAsync in Microsoft.Identity.Abstractions, implemented in Microsoft.Identity.Web.DownstreamApi.See aka.ms/id-web-downstream-api-v2 for migration details.", "False")]
[EditorBrowsableAttribute("1")]
[RequiresUnreferencedCodeAttribute("Calls Microsoft.Identity.Web.DownstreamWebApiGenericExtensions.ConvertToOutput<TOutput>(TInput).")]
public static Task`1<TOutput> GetForUserAsync(IDownstreamWebApi downstreamWebApi, string serviceName, string relativePath, Action`1<DownstreamWebApiOptions> downstreamWebApiOptionsOverride, ClaimsPrincipal user, string authenticationScheme);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.DownstreamWebApiGenericExtensions/<GetForUserAsync>d__1`1")]
[ExtensionAttribute]
[ObsoleteAttribute("Use IDownstreamApi.GetForUserAsync in Microsoft.Identity.Abstractions, implemented in Microsoft.Identity.Web.DownstreamApi.See aka.ms/id-web-downstream-api-v2 for migration details.", "False")]
[EditorBrowsableAttribute("1")]
[RequiresUnreferencedCodeAttribute("Calls Microsoft.Identity.Web.DownstreamWebApiGenericExtensions.ConvertFromInput<TInput>(TInput).")]
public static Task GetForUserAsync(IDownstreamWebApi downstreamWebApi, string serviceName, TInput inputData, Action`1<DownstreamWebApiOptions> downstreamWebApiOptionsOverride, ClaimsPrincipal user, string authenticationScheme);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.DownstreamWebApiGenericExtensions/<PostForUserAsync>d__2`2")]
[ExtensionAttribute]
[ObsoleteAttribute("Use IDownstreamApi.PostForUserAsync in Microsoft.Identity.Abstractions, implemented in Microsoft.Identity.Web.DownstreamApi.See aka.ms/id-web-downstream-api-v2 for migration details.", "False")]
[EditorBrowsableAttribute("1")]
[RequiresUnreferencedCodeAttribute("Calls Microsoft.Identity.Web.DownstreamWebApiGenericExtensions.ConvertToOutput<TOutput>(TInput).")]
public static Task`1<TOutput> PostForUserAsync(IDownstreamWebApi downstreamWebApi, string serviceName, string relativePath, TInput inputData, Action`1<DownstreamWebApiOptions> downstreamWebApiOptionsOverride, ClaimsPrincipal user, string authenticationScheme);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.DownstreamWebApiGenericExtensions/<PutForUserAsync>d__3`1")]
[ExtensionAttribute]
[ObsoleteAttribute("Use IDownstreamApi.PutForUserAsync in Microsoft.Identity.Abstractions, implemented in Microsoft.Identity.Web.DownstreamApi.See aka.ms/id-web-downstream-api-v2 for migration details.", "False")]
[EditorBrowsableAttribute("1")]
[RequiresUnreferencedCodeAttribute("Calls Microsoft.Identity.Web.DownstreamWebApiGenericExtensions.ConvertFromInput<TInput>(TInput).")]
public static Task PutForUserAsync(IDownstreamWebApi downstreamWebApi, string serviceName, string relativePath, TInput inputData, Action`1<DownstreamWebApiOptions> downstreamWebApiOptionsOverride, ClaimsPrincipal user, string authenticationScheme);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.DownstreamWebApiGenericExtensions/<PutForUserAsync>d__4`2")]
[ExtensionAttribute]
[ObsoleteAttribute("Use IDownstreamApi.PutForUserAsync in Microsoft.Identity.Abstractions, implemented in Microsoft.Identity.Web.DownstreamApi.See aka.ms/id-web-downstream-api-v2 for migration details.", "False")]
[EditorBrowsableAttribute("1")]
[RequiresUnreferencedCodeAttribute("Calls Microsoft.Identity.Web.DownstreamWebApiGenericExtensions.ConvertToOutput<TOutput>(TInput).")]
public static Task`1<TOutput> PutForUserAsync(IDownstreamWebApi downstreamWebApi, string serviceName, string relativePath, TInput inputData, Action`1<DownstreamWebApiOptions> downstreamWebApiOptionsOverride, ClaimsPrincipal user, string authenticationScheme);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.DownstreamWebApiGenericExtensions/<CallWebApiForUserAsync>d__5`1")]
[ExtensionAttribute]
[ObsoleteAttribute("Use IDownstreamApi.CallWebApiForUserAsync in Microsoft.Identity.Abstractions, implemented in Microsoft.Identity.Web.DownstreamApi.See aka.ms/id-web-downstream-api-v2 for migration details.", "False")]
[EditorBrowsableAttribute("1")]
[RequiresUnreferencedCodeAttribute("Calls Microsoft.Identity.Web.DownstreamWebApiGenericExtensions.ConvertToOutput<TOutput>(TInput).")]
public static Task`1<TOutput> CallWebApiForUserAsync(IDownstreamWebApi downstreamWebApi, string serviceName, Action`1<DownstreamWebApiOptions> downstreamWebApiOptionsOverride, ClaimsPrincipal user, string authenticationScheme);
    [RequiresUnreferencedCodeAttribute("Calls System.Text.Json.JsonSerializer.Serialize<TValue>(TValue, JsonSerializerOptions).")]
private static StringContent ConvertFromInput(TInput input);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.DownstreamWebApiGenericExtensions/<ConvertToOutput>d__7`1")]
[RequiresUnreferencedCodeAttribute("Calls System.Text.Json.JsonSerializer.Deserialize<TValue>(String, JsonSerializerOptions).")]
private static Task`1<TOutput> ConvertToOutput(HttpResponseMessage response);
    private static Action`1<DownstreamWebApiOptions> PrepareOptions(string relativePath, Action`1<DownstreamWebApiOptions> downstreamWebApiOptionsOverride, HttpMethod httpMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.DownstreamWebApiOptions : MicrosoftIdentityAuthenticationBaseOptions {
    [CompilerGeneratedAttribute]
private string <BaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpMethod <HttpMethod>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<HttpRequestMessage> <CustomizeHttpRequestMessage>k__BackingField;
    public string BaseUrl { get; public set; }
    public string RelativePath { get; public set; }
    public HttpMethod HttpMethod { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<HttpRequestMessage> CustomizeHttpRequestMessage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BaseUrl();
    [CompilerGeneratedAttribute]
public void set_BaseUrl(string value);
    [CompilerGeneratedAttribute]
public string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
    [CompilerGeneratedAttribute]
public HttpMethod get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(HttpMethod value);
    [CompilerGeneratedAttribute]
public Action`1<HttpRequestMessage> get_CustomizeHttpRequestMessage();
    [CompilerGeneratedAttribute]
public void set_CustomizeHttpRequestMessage(Action`1<HttpRequestMessage> value);
    public DownstreamWebApiOptions Clone();
    public string GetApiUrl();
    private sealed virtual override object System.ICloneable.Clone();
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Web.Extensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool ContainsAny(string searchFor, String[] stringCollection);
}
[NullableContextAttribute("2")]
public interface Microsoft.Identity.Web.IAuthRequiredScopeMetadata {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] AcceptedScope { get; }
    public string RequiredScopesConfigurationKey { get; }
    public abstract virtual String[] get_AcceptedScope();
    public abstract virtual string get_RequiredScopesConfigurationKey();
}
[NullableContextAttribute("2")]
public interface Microsoft.Identity.Web.IAuthRequiredScopeOrAppPermissionMetadata {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] AcceptedAppPermission { get; }
    public string RequiredAppPermissionsConfigurationKey { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] AcceptedScope { get; }
    public string RequiredScopesConfigurationKey { get; }
    public abstract virtual String[] get_AcceptedAppPermission();
    public abstract virtual string get_RequiredAppPermissionsConfigurationKey();
    public abstract virtual String[] get_AcceptedScope();
    public abstract virtual string get_RequiredScopesConfigurationKey();
}
[NullableContextAttribute("1")]
[ObsoleteAttribute("Use IDownstreamApi in Microsoft.Identity.Abstractions, implemented in Microsoft.Identity.Web.DownstreamApi.See aka.ms/id-web-downstream-api-v2 for migration details.", "False")]
[EditorBrowsableAttribute("1")]
public interface Microsoft.Identity.Web.IDownstreamWebApi {
    public virtual Task`1<HttpResponseMessage> CallWebApiForUserAsync(string serviceName, Action`1<DownstreamWebApiOptions> calledDownstreamWebApiOptionsOverride, ClaimsPrincipal user, StringContent content);
    [NullableContextAttribute("2")]
public abstract virtual Task`1<HttpResponseMessage> CallWebApiForUserAsync(string serviceName, string authenticationScheme, Action`1<DownstreamWebApiOptions> calledDownstreamWebApiOptionsOverride, ClaimsPrincipal user, StringContent content);
    [RequiresUnreferencedCodeAttribute("Calls System.Text.Json.JsonSerializer.Serialize<TValue>(TValue, JsonSerializerOptions).")]
public virtual Task`1<TOutput> CallWebApiForUserAsync(string serviceName, TInput input, Action`1<DownstreamWebApiOptions> downstreamWebApiOptionsOverride, ClaimsPrincipal user);
    [RequiresUnreferencedCodeAttribute("Calls System.Text.Json.JsonSerializer.Serialize<TValue>(TValue, JsonSerializerOptions).")]
public abstract virtual Task`1<TOutput> CallWebApiForUserAsync(string serviceName, TInput input, string authenticationScheme, Action`1<DownstreamWebApiOptions> downstreamWebApiOptionsOverride, ClaimsPrincipal user);
    public virtual Task`1<HttpResponseMessage> CallWebApiForAppAsync(string serviceName, Action`1<DownstreamWebApiOptions> downstreamWebApiOptionsOverride, StringContent content);
    public abstract virtual Task`1<HttpResponseMessage> CallWebApiForAppAsync(string serviceName, string authenticationScheme, Action`1<DownstreamWebApiOptions> downstreamWebApiOptionsOverride, StringContent content);
}
[NullableContextAttribute("1")]
public interface Microsoft.Identity.Web.ILoginErrorAccessor {
    public bool IsEnabled { get; }
    public abstract virtual string GetMessage(HttpContext context);
    public abstract virtual void SetMessage(HttpContext context, string message);
    public abstract virtual bool get_IsEnabled();
}
[NullableContextAttribute("1")]
public interface Microsoft.Identity.Web.IMicrosoftIdentityAuthenticationDelegatingHandlerFactory {
    public abstract virtual DelegatingHandler CreateAppHandler(string serviceName);
    public abstract virtual DelegatingHandler CreateUserHandler(string serviceName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Identity.Web.IncrementalConsentAndConditionalAccessHelper : object {
    public static bool CanBeSolvedByReSignInOfUser(MsalUiRequiredException ex);
    public static AuthenticationProperties BuildAuthenticationProperties(String[] scopes, MsalUiRequiredException ex, ClaimsPrincipal user, string userflow);
}
internal class Microsoft.Identity.Web.MergedOptionsValidation : object {
    [NullableContextAttribute("1")]
public static void Validate(MergedOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.MicrosoftIdentityAppAuthenticationMessageHandler : MicrosoftIdentityAuthenticationBaseMessageHandler {
    public MicrosoftIdentityAppAuthenticationMessageHandler(ITokenAcquisition tokenAcquisition, IOptionsMonitor`1<MicrosoftIdentityAuthenticationMessageHandlerOptions> namedMessageHandlerOptions, string serviceName);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.MicrosoftIdentityAppAuthenticationMessageHandler/<SendAsync>d__1")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilderExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddSessionTokenCaches(MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.MicrosoftIdentityAuthenticationBaseMessageHandler : DelegatingHandler {
    private IOptionsMonitor`1<MicrosoftIdentityAuthenticationMessageHandlerOptions> _namedMessageHandlerOptions;
    [NullableAttribute("2")]
private string _serviceName;
    [CompilerGeneratedAttribute]
private ITokenAcquisition <TokenAcquisition>k__BackingField;
    protected ITokenAcquisition TokenAcquisition { get; }
    protected MicrosoftIdentityAuthenticationBaseMessageHandler(ITokenAcquisition tokenAcquisition, IOptionsMonitor`1<MicrosoftIdentityAuthenticationMessageHandlerOptions> namedMessageHandlerOptions, string serviceName);
    [CompilerGeneratedAttribute]
protected ITokenAcquisition get_TokenAcquisition();
    protected MicrosoftIdentityAuthenticationMessageHandlerOptions GetOptionsForRequest(HttpRequestMessage request);
    internal static void CreateProofOfPossessionConfiguration(MicrosoftIdentityAuthenticationMessageHandlerOptions options, Uri apiUri, HttpMethod method);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions : object {
    [CompilerGeneratedAttribute]
private string <Scopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tenant>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserFlow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsProofOfPossessionRequest>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private TokenAcquisitionOptions <TokenAcquisitionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationScheme>k__BackingField;
    public string Scopes { get; public set; }
    public string Tenant { get; public set; }
    public string UserFlow { get; public set; }
    public bool IsProofOfPossessionRequest { get; public set; }
    [NullableAttribute("1")]
public TokenAcquisitionOptions TokenAcquisitionOptions { get; public set; }
    public string AuthenticationScheme { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(string value);
    [CompilerGeneratedAttribute]
public string get_Tenant();
    [CompilerGeneratedAttribute]
public void set_Tenant(string value);
    [CompilerGeneratedAttribute]
public string get_UserFlow();
    [CompilerGeneratedAttribute]
public void set_UserFlow(string value);
    [CompilerGeneratedAttribute]
public bool get_IsProofOfPossessionRequest();
    [CompilerGeneratedAttribute]
public void set_IsProofOfPossessionRequest(bool value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public TokenAcquisitionOptions get_TokenAcquisitionOptions();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_TokenAcquisitionOptions(TokenAcquisitionOptions value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationScheme();
    [CompilerGeneratedAttribute]
public void set_AuthenticationScheme(string value);
    [NullableContextAttribute("1")]
public String[] GetScopes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Identity.Web.MicrosoftIdentityAuthenticationMessageHandlerHttpClientBuilderExtensions : object {
    [ExtensionAttribute]
public static IHttpClientBuilder AddMicrosoftIdentityUserAuthenticationHandler(IHttpClientBuilder builder, string serviceName, IConfiguration configuration);
    [ExtensionAttribute]
public static IHttpClientBuilder AddMicrosoftIdentityUserAuthenticationHandler(IHttpClientBuilder builder, string serviceName, Action`1<MicrosoftIdentityAuthenticationMessageHandlerOptions> configureOptions);
    [ExtensionAttribute]
public static IHttpClientBuilder AddMicrosoftIdentityAppAuthenticationHandler(IHttpClientBuilder builder, string serviceName, IConfiguration configuration);
    [ExtensionAttribute]
public static IHttpClientBuilder AddMicrosoftIdentityAppAuthenticationHandler(IHttpClientBuilder builder, string serviceName, Action`1<MicrosoftIdentityAuthenticationMessageHandlerOptions> configureOptions);
    [ExtensionAttribute]
private static void AddMicrosoftIdentityAuthenticationHandlerCore(IHttpClientBuilder builder, Func`2<IMicrosoftIdentityAuthenticationDelegatingHandlerFactory, DelegatingHandler> configureHandler);
}
public class Microsoft.Identity.Web.MicrosoftIdentityAuthenticationMessageHandlerOptions : MicrosoftIdentityAuthenticationBaseOptions {
    [NullableContextAttribute("1")]
public MicrosoftIdentityAuthenticationMessageHandlerOptions Clone();
    [NullableContextAttribute("1")]
private sealed virtual override object System.ICloneable.Clone();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Identity.Web.MicrosoftIdentityBlazorServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServerSideBlazorBuilder AddMicrosoftIdentityConsentHandler(IServerSideBlazorBuilder builder);
    [ExtensionAttribute]
public static IServiceCollection AddMicrosoftIdentityConsentHandler(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler : object {
    [NullableAttribute("2")]
private ClaimsPrincipal _user;
    [NullableAttribute("2")]
private string _baseUri;
    [NullableAttribute("2")]
private IHttpContextAccessor _httpContextAccessor;
    [CompilerGeneratedAttribute]
private bool <IsBlazorServer>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationManager <NavigationManager>k__BackingField;
    public bool IsBlazorServer { get; public set; }
    public ClaimsPrincipal User { get; public set; }
    [NullableAttribute("2")]
public string BaseUri { get; public set; }
    internal NavigationManager NavigationManager { get; internal set; }
    public MicrosoftIdentityConsentAndConditionalAccessHandler(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public bool get_IsBlazorServer();
    [CompilerGeneratedAttribute]
public void set_IsBlazorServer(bool value);
    public ClaimsPrincipal get_User();
    public void set_User(ClaimsPrincipal value);
    [NullableContextAttribute("2")]
public string get_BaseUri();
    [NullableContextAttribute("2")]
public void set_BaseUri(string value);
    private static string CreateBaseUri(HttpRequest request);
    public void HandleException(Exception exception);
    [NullableContextAttribute("2")]
public void ChallengeUser(String[] scopes, string claims, string userflow);
    [CompilerGeneratedAttribute]
internal NavigationManager get_NavigationManager();
    [CompilerGeneratedAttribute]
internal void set_NavigationManager(NavigationManager value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.MicrosoftIdentityServiceHandler : CircuitHandler {
    [CompilerGeneratedAttribute]
private MicrosoftIdentityConsentAndConditionalAccessHandler <Service>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationStateProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private NavigationManager <Manager>k__BackingField;
    public MicrosoftIdentityConsentAndConditionalAccessHandler Service { get; }
    public AuthenticationStateProvider Provider { get; }
    public NavigationManager Manager { get; }
    public MicrosoftIdentityServiceHandler(MicrosoftIdentityConsentAndConditionalAccessHandler service, AuthenticationStateProvider provider, NavigationManager manager);
    [CompilerGeneratedAttribute]
public MicrosoftIdentityConsentAndConditionalAccessHandler get_Service();
    [CompilerGeneratedAttribute]
public AuthenticationStateProvider get_Provider();
    [CompilerGeneratedAttribute]
public NavigationManager get_Manager();
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.MicrosoftIdentityServiceHandler/<OnCircuitOpenedAsync>d__10")]
public virtual Task OnCircuitOpenedAsync(Circuit circuit, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0(Circuit circuit, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.MicrosoftIdentityUserAuthenticationMessageHandler : MicrosoftIdentityAuthenticationBaseMessageHandler {
    private IOptionsMonitor`1<MicrosoftIdentityOptions> _microsoftIdentityOptions;
    public MicrosoftIdentityUserAuthenticationMessageHandler(ITokenAcquisition tokenAcquisition, IOptionsMonitor`1<MicrosoftIdentityAuthenticationMessageHandlerOptions> namedMessageHandlerOptions, IOptionsMonitor`1<MicrosoftIdentityOptions> microsoftIdentityOptions, string serviceName);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.MicrosoftIdentityUserAuthenticationMessageHandler/<SendAsync>d__2")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.MicrosoftIdentityWebApiAuthenticationBuilder : MicrosoftIdentityBaseAuthenticationBuilder {
    [CompilerGeneratedAttribute]
private string <JwtBearerAuthenticationScheme>k__BackingField;
    private string JwtBearerAuthenticationScheme { get; private set; }
    internal MicrosoftIdentityWebApiAuthenticationBuilder(IServiceCollection services, string jwtBearerAuthenticationScheme, Action`1<JwtBearerOptions> configureJwtBearerOptions, Action`1<MicrosoftIdentityOptions> configureMicrosoftIdentityOptions, IConfigurationSection configurationSection);
    [CompilerGeneratedAttribute]
private string get_JwtBearerAuthenticationScheme();
    [CompilerGeneratedAttribute]
private void set_JwtBearerAuthenticationScheme(string value);
    public MicrosoftIdentityAppCallsWebApiAuthenticationBuilder EnableTokenAcquisitionToCallDownstreamApi(Action`1<ConfidentialClientApplicationOptions> configureConfidentialClientApplicationOptions);
    internal static void CallsWebApiImplementation(IServiceCollection services, string jwtBearerAuthenticationScheme, Action`1<ConfidentialClientApplicationOptions> configureConfidentialClientApplicationOptions, IConfigurationSection configurationSection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Identity.Web.MicrosoftIdentityWebApiAuthenticationBuilderExtensions : object {
    [ExtensionAttribute]
public static MicrosoftIdentityWebApiAuthenticationBuilderWithConfiguration AddMicrosoftIdentityWebApi(AuthenticationBuilder builder, IConfiguration configuration, string configSectionName, string jwtBearerScheme, bool subscribeToJwtBearerMiddlewareDiagnosticsEvents);
    [ExtensionAttribute]
public static MicrosoftIdentityWebApiAuthenticationBuilderWithConfiguration AddMicrosoftIdentityWebApi(AuthenticationBuilder builder, IConfigurationSection configurationSection, string jwtBearerScheme, bool subscribeToJwtBearerMiddlewareDiagnosticsEvents);
    [ExtensionAttribute]
public static MicrosoftIdentityWebApiAuthenticationBuilder AddMicrosoftIdentityWebApi(AuthenticationBuilder builder, Action`1<JwtBearerOptions> configureJwtBearerOptions, Action`1<MicrosoftIdentityOptions> configureMicrosoftIdentityOptions, string jwtBearerScheme, bool subscribeToJwtBearerMiddlewareDiagnosticsEvents);
    private static void AddMicrosoftIdentityWebApiImplementation(AuthenticationBuilder builder, Action`1<JwtBearerOptions> configureJwtBearerOptions, string jwtBearerScheme, bool subscribeToJwtBearerMiddlewareDiagnosticsEvents);
    internal static void ChainOnTokenValidatedEventForClaimsValidation(JwtBearerEvents events, string jwtBearerScheme);
    private static bool HasImplementationType(IServiceCollection services, Type implementationType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.MicrosoftIdentityWebApiAuthenticationBuilderWithConfiguration : MicrosoftIdentityWebApiAuthenticationBuilder {
    internal MicrosoftIdentityWebApiAuthenticationBuilderWithConfiguration(IServiceCollection services, string jwtBearerAuthenticationScheme, Action`1<JwtBearerOptions> configureJwtBearerOptions, Action`1<MicrosoftIdentityOptions> configureMicrosoftIdentityOptions, IConfigurationSection configurationSection);
    public MicrosoftIdentityAppCallsWebApiAuthenticationBuilder EnableTokenAcquisitionToCallDownstreamApi();
    [CompilerGeneratedAttribute]
private void <EnableTokenAcquisitionToCallDownstreamApi>b__1_0(ConfidentialClientApplicationOptions options);
}
[ExtensionAttribute]
public static class Microsoft.Identity.Web.MicrosoftIdentityWebApiServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static MicrosoftIdentityWebApiAuthenticationBuilderWithConfiguration AddMicrosoftIdentityWebApiAuthentication(IServiceCollection services, IConfiguration configuration, string configSectionName, string jwtBearerScheme, bool subscribeToJwtBearerMiddlewareDiagnosticsEvents);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.MicrosoftIdentityWebAppAuthenticationBuilder : MicrosoftIdentityBaseAuthenticationBuilder {
    [CompilerGeneratedAttribute]
private Action`1<MicrosoftIdentityOptions> <ConfigureMicrosoftIdentityOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpenIdConnectScheme>k__BackingField;
    private Action`1<MicrosoftIdentityOptions> ConfigureMicrosoftIdentityOptions { get; private set; }
    public string OpenIdConnectScheme { get; private set; }
    internal MicrosoftIdentityWebAppAuthenticationBuilder(IServiceCollection services, string openIdConnectScheme, Action`1<MicrosoftIdentityOptions> configureMicrosoftIdentityOptions, IConfigurationSection configurationSection);
    [CompilerGeneratedAttribute]
private Action`1<MicrosoftIdentityOptions> get_ConfigureMicrosoftIdentityOptions();
    [CompilerGeneratedAttribute]
private void set_ConfigureMicrosoftIdentityOptions(Action`1<MicrosoftIdentityOptions> value);
    [CompilerGeneratedAttribute]
public string get_OpenIdConnectScheme();
    [CompilerGeneratedAttribute]
private void set_OpenIdConnectScheme(string value);
    public MicrosoftIdentityAppCallsWebApiAuthenticationBuilder EnableTokenAcquisitionToCallDownstreamApi(IEnumerable`1<string> initialScopes);
    public MicrosoftIdentityAppCallsWebApiAuthenticationBuilder EnableTokenAcquisitionToCallDownstreamApi(Action`1<ConfidentialClientApplicationOptions> configureConfidentialClientApplicationOptions, IEnumerable`1<string> initialScopes);
    [RequiresUnreferencedCodeAttribute("Calls Microsoft.Identity.Web.ClientInfo.CreateFromJson(string).")]
internal static void WebAppCallsWebApiImplementation(IServiceCollection services, IEnumerable`1<string> initialScopes, Action`1<MicrosoftIdentityOptions> configureMicrosoftIdentityOptions, string openIdConnectScheme, Action`1<ConfidentialClientApplicationOptions> configureConfidentialClientApplicationOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Identity.Web.MicrosoftIdentityWebAppAuthenticationBuilderExtensions : object {
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Calls a trim-incompatible AddMicrosoftIdentityWebApp.")]
public static MicrosoftIdentityWebAppAuthenticationBuilderWithConfiguration AddMicrosoftIdentityWebApp(AuthenticationBuilder builder, IConfiguration configuration, string configSectionName, string openIdConnectScheme, string cookieScheme, bool subscribeToOpenIdConnectMiddlewareDiagnosticsEvents, string displayName);
    [ExtensionAttribute]
public static MicrosoftIdentityWebAppAuthenticationBuilderWithConfiguration AddMicrosoftIdentityWebApp(AuthenticationBuilder builder, IConfigurationSection configurationSection, string openIdConnectScheme, string cookieScheme, bool subscribeToOpenIdConnectMiddlewareDiagnosticsEvents, string displayName);
    [ExtensionAttribute]
public static MicrosoftIdentityWebAppAuthenticationBuilder AddMicrosoftIdentityWebApp(AuthenticationBuilder builder, Action`1<MicrosoftIdentityOptions> configureMicrosoftIdentityOptions, Action`1<CookieAuthenticationOptions> configureCookieAuthenticationOptions, string openIdConnectScheme, string cookieScheme, bool subscribeToOpenIdConnectMiddlewareDiagnosticsEvents, string displayName);
    [ExtensionAttribute]
private static MicrosoftIdentityWebAppAuthenticationBuilderWithConfiguration AddMicrosoftIdentityWebAppWithConfiguration(AuthenticationBuilder builder, Action`1<MicrosoftIdentityOptions> configureMicrosoftIdentityOptions, Action`1<CookieAuthenticationOptions> configureCookieAuthenticationOptions, string openIdConnectScheme, string cookieScheme, bool subscribeToOpenIdConnectMiddlewareDiagnosticsEvents, string displayName, IConfigurationSection configurationSection);
    [ExtensionAttribute]
private static MicrosoftIdentityWebAppAuthenticationBuilder AddMicrosoftWebAppWithoutConfiguration(AuthenticationBuilder builder, Action`1<MicrosoftIdentityOptions> configureMicrosoftIdentityOptions, Action`1<CookieAuthenticationOptions> configureCookieAuthenticationOptions, string openIdConnectScheme, string cookieScheme, bool subscribeToOpenIdConnectMiddlewareDiagnosticsEvents, string displayName);
    private static void AddMicrosoftIdentityWebAppInternal(AuthenticationBuilder builder, Action`1<MicrosoftIdentityOptions> configureMicrosoftIdentityOptions, Action`1<CookieAuthenticationOptions> configureCookieAuthenticationOptions, string openIdConnectScheme, string cookieScheme, bool subscribeToOpenIdConnectMiddlewareDiagnosticsEvents, string displayName);
    internal static void PopulateOpenIdOptionsFromMergedOptions(OpenIdConnectOptions options, MergedOptions mergedOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.MicrosoftIdentityWebAppAuthenticationBuilderWithConfiguration : MicrosoftIdentityWebAppAuthenticationBuilder {
    internal MicrosoftIdentityWebAppAuthenticationBuilderWithConfiguration(IServiceCollection services, string openIdConnectScheme, Action`1<MicrosoftIdentityOptions> configureMicrosoftIdentityOptions, IConfigurationSection configurationSection);
    public MicrosoftIdentityAppCallsWebApiAuthenticationBuilder EnableTokenAcquisitionToCallDownstreamApi(IEnumerable`1<string> initialScopes);
    [CompilerGeneratedAttribute]
private void <EnableTokenAcquisitionToCallDownstreamApi>b__1_0(ConfidentialClientApplicationOptions options);
}
[ExtensionAttribute]
public static class Microsoft.Identity.Web.MicrosoftIdentityWebAppServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static MicrosoftIdentityWebAppAuthenticationBuilderWithConfiguration AddMicrosoftIdentityWebAppAuthentication(IServiceCollection services, IConfiguration configuration, string configSectionName, string openIdConnectScheme, string cookieScheme, bool subscribeToOpenIdConnectMiddlewareDiagnosticsEvents, string displayName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Identity.Web.PolicyBuilderExtensions : object {
    [ExtensionAttribute]
public static AuthorizationPolicyBuilder RequireScope(AuthorizationPolicyBuilder authorizationPolicyBuilder, String[] allowedValues);
    [ExtensionAttribute]
public static AuthorizationPolicyBuilder RequireScope(AuthorizationPolicyBuilder authorizationPolicyBuilder, IEnumerable`1<string> allowedValues);
    [ExtensionAttribute]
public static AuthorizationPolicyBuilder RequireScopeOrAppPermission(AuthorizationPolicyBuilder authorizationPolicyBuilder, IEnumerable`1<string> allowedScopeValues, IEnumerable`1<string> allowedAppPermissionValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Identity.Web.RequiredScopeExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddRequiredScopeAuthorization(IServiceCollection services);
    [ExtensionAttribute]
public static TBuilder RequireScope(TBuilder endpointConventionBuilder, String[] scope);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Identity.Web.RequiredScopeOrAppPermissionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddRequiredScopeOrAppPermissionAuthorization(IServiceCollection services);
    [ExtensionAttribute]
public static TBuilder RequireScopeOrAppPermission(TBuilder endpointConventionBuilder, String[] scope, String[] appPermission);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.RequireScopeOptions : object {
    private AuthorizationPolicy _defaultPolicy;
    public sealed virtual void PostConfigure(string name, AuthorizationOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.RequireScopeOrAppPermissionOptions : object {
    private AuthorizationPolicy _defaultPolicy;
    public sealed virtual void PostConfigure(string name, AuthorizationOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Identity.Web.Resource.IJwtBearerMiddlewareDiagnostics {
    public abstract virtual JwtBearerEvents Subscribe(JwtBearerEvents events);
}
[NullableContextAttribute("1")]
public interface Microsoft.Identity.Web.Resource.IOpenIdConnectMiddlewareDiagnostics {
    public abstract virtual void Subscribe(OpenIdConnectEvents events);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.Resource.JwtBearerMiddlewareDiagnostics : object {
    private ILogger _logger;
    private Func`2<AuthenticationFailedContext, Task> _onAuthenticationFailed;
    private Func`2<MessageReceivedContext, Task> _onMessageReceived;
    private Func`2<TokenValidatedContext, Task> _onTokenValidated;
    private Func`2<JwtBearerChallengeContext, Task> _onChallenge;
    public JwtBearerMiddlewareDiagnostics(ILogger`1<JwtBearerMiddlewareDiagnostics> logger);
    public sealed virtual JwtBearerEvents Subscribe(JwtBearerEvents events);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.Resource.JwtBearerMiddlewareDiagnostics/<OnMessageReceivedAsync>d__7")]
private Task OnMessageReceivedAsync(MessageReceivedContext context);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.Resource.JwtBearerMiddlewareDiagnostics/<OnAuthenticationFailedAsync>d__8")]
private Task OnAuthenticationFailedAsync(AuthenticationFailedContext context);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.Resource.JwtBearerMiddlewareDiagnostics/<OnTokenValidatedAsync>d__9")]
private Task OnTokenValidatedAsync(TokenValidatedContext context);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.Resource.JwtBearerMiddlewareDiagnostics/<OnChallengeAsync>d__10")]
private Task OnChallengeAsync(JwtBearerChallengeContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.Resource.MicrosoftIdentityIssuerValidatorFactory : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private HttpClient <HttpClient>k__BackingField;
    [NullableAttribute("2")]
private HttpClient HttpClient { get; }
    public MicrosoftIdentityIssuerValidatorFactory(IOptions`1<AadIssuerValidatorOptions> aadIssuerValidatorOptions, IHttpClientFactory httpClientFactory);
    private static HttpClient GetHttpClient(IOptions`1<AadIssuerValidatorOptions> aadIssuerValidatorOptions, IHttpClientFactory httpClientFactory);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private HttpClient get_HttpClient();
    public AadIssuerValidator GetAadIssuerValidator(string aadAuthority);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics : object {
    private ILogger _logger;
    private Func`2<RedirectContext, Task> _onRedirectToIdentityProvider;
    private Func`2<MessageReceivedContext, Task> _onMessageReceived;
    private Func`2<AuthorizationCodeReceivedContext, Task> _onAuthorizationCodeReceived;
    private Func`2<TokenResponseReceivedContext, Task> _onTokenResponseReceived;
    private Func`2<TokenValidatedContext, Task> _onTokenValidated;
    private Func`2<UserInformationReceivedContext, Task> _onUserInformationReceived;
    private Func`2<AuthenticationFailedContext, Task> _onAuthenticationFailed;
    private Func`2<RemoteSignOutContext, Task> _onRemoteSignOut;
    private Func`2<RedirectContext, Task> _onRedirectToIdentityProviderForSignOut;
    private Func`2<RemoteSignOutContext, Task> _onSignedOutCallbackRedirect;
    public OpenIdConnectMiddlewareDiagnostics(ILogger`1<OpenIdConnectMiddlewareDiagnostics> logger);
    public sealed virtual void Subscribe(OpenIdConnectEvents events);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics/<OnRedirectToIdentityProviderAsync>d__13")]
private Task OnRedirectToIdentityProviderAsync(RedirectContext context);
    private void DisplayProtocolMessage(OpenIdConnectMessage message);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics/<OnMessageReceivedAsync>d__15")]
private Task OnMessageReceivedAsync(MessageReceivedContext context);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics/<OnAuthorizationCodeReceivedAsync>d__16")]
private Task OnAuthorizationCodeReceivedAsync(AuthorizationCodeReceivedContext context);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics/<OnTokenResponseReceivedAsync>d__17")]
private Task OnTokenResponseReceivedAsync(TokenResponseReceivedContext context);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics/<OnTokenValidatedAsync>d__18")]
private Task OnTokenValidatedAsync(TokenValidatedContext context);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics/<OnUserInformationReceivedAsync>d__19")]
private Task OnUserInformationReceivedAsync(UserInformationReceivedContext context);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics/<OnAuthenticationFailedAsync>d__20")]
private Task OnAuthenticationFailedAsync(AuthenticationFailedContext context);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics/<OnRedirectToIdentityProviderForSignOutAsync>d__21")]
private Task OnRedirectToIdentityProviderForSignOutAsync(RedirectContext context);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics/<OnRemoteSignOutAsync>d__22")]
private Task OnRemoteSignOutAsync(RemoteSignOutContext context);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics/<OnSignedOutCallbackRedirectAsync>d__23")]
private Task OnSignedOutCallbackRedirectAsync(RemoteSignOutContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.Resource.RegisterValidAudience : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsB2C>k__BackingField;
    private string ClientId { get; private set; }
    private bool IsB2C { get; private set; }
    [CompilerGeneratedAttribute]
private string get_ClientId();
    [CompilerGeneratedAttribute]
private void set_ClientId(string value);
    [CompilerGeneratedAttribute]
private bool get_IsB2C();
    [CompilerGeneratedAttribute]
private void set_IsB2C(bool value);
    [NullableContextAttribute("1")]
public void RegisterAudienceValidation(TokenValidationParameters validationParameters, MicrosoftIdentityOptions microsoftIdentityOptions);
    [NullableContextAttribute("1")]
internal bool ValidateAudience(IEnumerable`1<string> audiences, SecurityToken securityToken, TokenValidationParameters validationParameters);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
public class Microsoft.Identity.Web.Resource.RequiredScopeAttribute : Attribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <AcceptedScope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequiredScopesConfigurationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReusable>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] AcceptedScope { get; public set; }
    public string RequiredScopesConfigurationKey { get; public set; }
    public bool IsReusable { get; public set; }
    [NullableContextAttribute("1")]
public RequiredScopeAttribute(String[] acceptedScopes);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_AcceptedScope();
    [CompilerGeneratedAttribute]
public void set_AcceptedScope(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RequiredScopesConfigurationKey();
    [CompilerGeneratedAttribute]
public void set_RequiredScopesConfigurationKey(string value);
    [CompilerGeneratedAttribute]
public bool get_IsReusable();
    [CompilerGeneratedAttribute]
public void set_IsReusable(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("68")]
public class Microsoft.Identity.Web.Resource.RequiredScopeOrAppPermissionAttribute : Attribute {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <AcceptedScope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequiredScopesConfigurationKey>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <AcceptedAppPermission>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequiredAppPermissionsConfigurationKey>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] AcceptedScope { get; public set; }
    public string RequiredScopesConfigurationKey { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] AcceptedAppPermission { get; public set; }
    public string RequiredAppPermissionsConfigurationKey { get; public set; }
    [NullableContextAttribute("1")]
public RequiredScopeOrAppPermissionAttribute(String[] acceptedScopes, String[] acceptedAppPermissions);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_AcceptedScope();
    [CompilerGeneratedAttribute]
public void set_AcceptedScope(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RequiredScopesConfigurationKey();
    [CompilerGeneratedAttribute]
public void set_RequiredScopesConfigurationKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_AcceptedAppPermission();
    [CompilerGeneratedAttribute]
public void set_AcceptedAppPermission(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RequiredAppPermissionsConfigurationKey();
    [CompilerGeneratedAttribute]
public void set_RequiredAppPermissionsConfigurationKey(string value);
}
[ExtensionAttribute]
public static class Microsoft.Identity.Web.Resource.RolesRequiredHttpContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ValidateAppRole(HttpContext context, String[] acceptedRoles);
}
[ExtensionAttribute]
public static class Microsoft.Identity.Web.Resource.ScopesRequiredHttpContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void VerifyUserHasAnyAcceptedScope(HttpContext context, String[] acceptedScopes);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.Identity.Web.ScopeAuthorizationHandler : AuthorizationHandler`1<ScopeAuthorizationRequirement> {
    private IConfiguration _configuration;
    public ScopeAuthorizationHandler(IConfiguration configuration);
    protected virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, ScopeAuthorizationRequirement requirement);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.ScopeAuthorizationRequirement : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllowedValues>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequiredScopesConfigurationKey>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<string> AllowedValues { get; }
    public string RequiredScopesConfigurationKey { get; public set; }
    public ScopeAuthorizationRequirement(IEnumerable`1<string> allowedValues);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AllowedValues();
    [CompilerGeneratedAttribute]
public string get_RequiredScopesConfigurationKey();
    [CompilerGeneratedAttribute]
public void set_RequiredScopesConfigurationKey(string value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.Identity.Web.ScopeOrAppPermissionAuthorizationHandler : AuthorizationHandler`1<ScopeOrAppPermissionAuthorizationRequirement> {
    private IConfiguration _configuration;
    public ScopeOrAppPermissionAuthorizationHandler(IConfiguration configuration);
    protected virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, ScopeOrAppPermissionAuthorizationRequirement requirement);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.ScopeOrAppPermissionAuthorizationRequirement : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <ScopeAllowedValues>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<string> <AppPermissionAllowedValues>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequiredScopesConfigurationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequiredAppPermissionsConfigurationKey>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<string> ScopeAllowedValues { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<string> AppPermissionAllowedValues { get; }
    public string RequiredScopesConfigurationKey { get; public set; }
    public string RequiredAppPermissionsConfigurationKey { get; public set; }
    public ScopeOrAppPermissionAuthorizationRequirement(IEnumerable`1<string> scopeAllowedValues, IEnumerable`1<string> appPermissionAllowedValues);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ScopeAllowedValues();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AppPermissionAllowedValues();
    [CompilerGeneratedAttribute]
public string get_RequiredScopesConfigurationKey();
    [CompilerGeneratedAttribute]
public void set_RequiredScopesConfigurationKey(string value);
    [CompilerGeneratedAttribute]
public string get_RequiredAppPermissionsConfigurationKey();
    [CompilerGeneratedAttribute]
public void set_RequiredAppPermissionsConfigurationKey(string value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Identity.Web.TempDataLoginErrorAccessor : object {
    private static string Name;
    private ITempDataDictionaryFactory _factory;
    [NullableAttribute("2")]
private ITempDataDictionary _tempData;
    public bool IsEnabled { get; }
    private TempDataLoginErrorAccessor(ITempDataDictionaryFactory factory);
    public static ILoginErrorAccessor Create(ITempDataDictionaryFactory factory, bool isDevelopment);
    public sealed virtual bool get_IsEnabled();
    public sealed virtual string GetMessage(HttpContext context);
    public sealed virtual void SetMessage(HttpContext context, string message);
}
[ObsoleteAttribute("Rather use TokenAcquirerAppTokenCredential")]
public class Microsoft.Identity.Web.TokenAcquisitionAppTokenCredential : TokenCredential {
    [NullableAttribute("1")]
private ITokenAcquisition _tokenAcquisition;
    [NullableContextAttribute("1")]
public TokenAcquisitionAppTokenCredential(ITokenAcquisition tokenAcquisition);
    public virtual AccessToken GetToken(TokenRequestContext requestContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisitionAppTokenCredential/<GetTokenAsync>d__3")]
public virtual ValueTask`1<AccessToken> GetTokenAsync(TokenRequestContext requestContext, CancellationToken cancellationToken);
}
[ObsoleteAttribute("Rather use TokenAcquirerTokenCredential")]
public class Microsoft.Identity.Web.TokenAcquisitionTokenCredential : TokenCredential {
    [NullableAttribute("1")]
private ITokenAcquisition _tokenAcquisition;
    [NullableContextAttribute("1")]
public TokenAcquisitionTokenCredential(ITokenAcquisition tokenAcquisition);
    public virtual AccessToken GetToken(TokenRequestContext requestContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenAcquisitionTokenCredential/<GetTokenAsync>d__3")]
public virtual ValueTask`1<AccessToken> GetTokenAsync(TokenRequestContext requestContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider : MsalAbstractTokenCacheProvider {
    private ILogger _logger;
    private ISession _session;
    private ReaderWriterLockSlim _sessionLock;
    public MsalSessionTokenCacheProvider(ISession session, ILogger`1<MsalSessionTokenCacheProvider> logger);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider/<ReadCacheBytesAsync>d__3")]
protected virtual Task`1<Byte[]> ReadCacheBytesAsync(string cacheKey);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider/<ReadCacheBytesAsync>d__4")]
protected virtual Task`1<Byte[]> ReadCacheBytesAsync(string cacheKey, CacheSerializerHints cacheSerializerHints);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider/<WriteCacheBytesAsync>d__5")]
protected virtual Task WriteCacheBytesAsync(string cacheKey, Byte[] bytes);
    [AsyncStateMachineAttribute("Microsoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider/<RemoveKeyAsync>d__6")]
protected virtual Task RemoveKeyAsync(string cacheKey);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Identity.Web.TokenCacheProviders.Session.SessionTokenCacheProviderExtension : object {
    [ExtensionAttribute]
public static IServiceCollection AddSessionAppTokenCache(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddSessionPerUserTokenCache(IServiceCollection services);
    private static IServiceCollection CreateSessionTokenCache(IServiceCollection services);
}
