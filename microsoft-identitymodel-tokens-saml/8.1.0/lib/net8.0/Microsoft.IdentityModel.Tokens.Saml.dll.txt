public class Microsoft.IdentityModel.Tokens.Saml.AuthenticationInformation : object {
    [CompilerGeneratedAttribute]
private string <IPAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <AuthenticationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <AuthenticationInstant>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SamlAuthorityBinding> <AuthorityBindings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DnsName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <NotOnOrAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Session>k__BackingField;
    public string IPAddress { get; public set; }
    public Uri AuthenticationMethod { get; private set; }
    public DateTime AuthenticationInstant { get; public set; }
    public ICollection`1<SamlAuthorityBinding> AuthorityBindings { get; }
    public string DnsName { get; public set; }
    public Nullable`1<DateTime> NotOnOrAfter { get; public set; }
    public string Session { get; public set; }
    public AuthenticationInformation(Uri authenticationMethod, DateTime authenticationInstant);
    [CompilerGeneratedAttribute]
public string get_IPAddress();
    [CompilerGeneratedAttribute]
public void set_IPAddress(string value);
    [CompilerGeneratedAttribute]
public Uri get_AuthenticationMethod();
    [CompilerGeneratedAttribute]
private void set_AuthenticationMethod(Uri value);
    [CompilerGeneratedAttribute]
public DateTime get_AuthenticationInstant();
    [CompilerGeneratedAttribute]
public void set_AuthenticationInstant(DateTime value);
    [CompilerGeneratedAttribute]
public ICollection`1<SamlAuthorityBinding> get_AuthorityBindings();
    [CompilerGeneratedAttribute]
public string get_DnsName();
    [CompilerGeneratedAttribute]
public void set_DnsName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_NotOnOrAfter();
    [CompilerGeneratedAttribute]
public void set_NotOnOrAfter(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_Session();
    [CompilerGeneratedAttribute]
public void set_Session(string value);
}
public static class Microsoft.IdentityModel.Tokens.Saml.ClaimProperties : object {
    public static string Namespace;
    public static string SamlNameIdentifierFormat;
    public static string SamlNameIdentifierNameQualifier;
    public static string SamlNameIdentifierSPNameQualifier;
    public static string SamlNameIdentifierSPProvidedId;
    public static string SamlSubjectConfirmationMethod;
    public static string SamlSubjectConfirmationData;
    public static string SamlSubjectKeyInfo;
}
internal static class Microsoft.IdentityModel.Tokens.Saml.LogMessages : object {
    internal static string IDX11400;
    internal static string IDX11401;
    internal static string IDX11312;
    internal static string IDX11313;
    internal static string IDX11314;
    internal static string IDX11100;
    internal static string IDX11102;
    internal static string IDX11104;
    internal static string IDX11107;
    internal static string IDX11108;
    internal static string IDX11110;
    internal static string IDX11111;
    internal static string IDX11112;
    internal static string IDX11114;
    internal static string IDX11115;
    internal static string IDX11116;
    internal static string IDX11117;
    internal static string IDX11118;
    internal static string IDX11120;
    internal static string IDX11121;
    internal static string IDX11122;
    internal static string IDX11123;
    internal static string IDX11124;
    internal static string IDX11125;
    internal static string IDX11126;
    internal static string IDX11127;
    internal static string IDX11128;
    internal static string IDX11129;
    internal static string IDX11130;
    internal static string IDX11131;
    internal static string IDX11132;
    internal static string IDX11133;
    internal static string IDX11134;
    internal static string IDX11135;
    internal static string IDX11136;
    internal static string IDX11137;
    internal static string IDX11501;
    internal static string IDX11502;
    internal static string IDX11503;
    internal static string IDX11504;
    internal static string IDX11505;
    internal static string IDX11506;
    internal static string IDX11507;
    internal static string IDX11508;
    internal static string IDX11509;
    internal static string IDX11510;
    internal static string IDX11511;
    internal static string IDX11512;
    internal static string IDX11513;
    internal static string IDX11514;
    internal static string IDX11515;
    internal static string IDX11516;
    internal static string IDX11517;
    internal static string IDX11518;
    internal static string IDX11521;
    internal static string IDX11522;
    internal static string IDX11523;
    internal static string IDX11800;
    internal static string IDX11900;
    internal static string IDX11901;
    internal static string IDX11902;
    internal static string IDX11950;
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlAction : object {
    private Uri _namespace;
    private string _value;
    public Uri Namespace { get; public set; }
    public string Value { get; public set; }
    public SamlAction(string value);
    public SamlAction(string value, Uri namespace);
    public Uri get_Namespace();
    public void set_Namespace(Uri value);
    public string get_Value();
    public void set_Value(string value);
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlAdvice : object {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <AssertionIdReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SamlAssertion> <Assertions>k__BackingField;
    public ICollection`1<string> AssertionIdReferences { get; }
    public ICollection`1<SamlAssertion> Assertions { get; }
    public SamlAdvice(IEnumerable`1<string> references);
    public SamlAdvice(IEnumerable`1<SamlAssertion> assertions);
    public SamlAdvice(IEnumerable`1<string> references, IEnumerable`1<SamlAssertion> assertions);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_AssertionIdReferences();
    [CompilerGeneratedAttribute]
public ICollection`1<SamlAssertion> get_Assertions();
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlAssertion : object {
    private string _assertionId;
    private string _canonicalString;
    private string _issuer;
    private DateTime _issueInstant;
    [CompilerGeneratedAttribute]
private SamlAdvice <Advice>k__BackingField;
    [CompilerGeneratedAttribute]
private SamlConditions <Conditions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InclusiveNamespacesPrefixList>k__BackingField;
    [CompilerGeneratedAttribute]
private Signature <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private SigningCredentials <SigningCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<SamlStatement> <Statements>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlTokenStream <XmlTokenStream>k__BackingField;
    public SamlAdvice Advice { get; public set; }
    public string AssertionId { get; public set; }
    public SamlConditions Conditions { get; public set; }
    public string InclusiveNamespacesPrefixList { get; public set; }
    public string Issuer { get; public set; }
    public DateTime IssueInstant { get; public set; }
    public string MajorVersion { get; }
    public string MinorVersion { get; }
    public Signature Signature { get; public set; }
    public string CanonicalString { get; internal set; }
    public SigningCredentials SigningCredentials { get; public set; }
    public IList`1<SamlStatement> Statements { get; }
    internal XmlTokenStream XmlTokenStream { get; internal set; }
    public SamlAssertion(string assertionId, string issuer, DateTime issueInstant, SamlConditions samlConditions, SamlAdvice samlAdvice, IEnumerable`1<SamlStatement> samlStatements);
    [CompilerGeneratedAttribute]
public SamlAdvice get_Advice();
    [CompilerGeneratedAttribute]
public void set_Advice(SamlAdvice value);
    public string get_AssertionId();
    public void set_AssertionId(string value);
    [CompilerGeneratedAttribute]
public SamlConditions get_Conditions();
    [CompilerGeneratedAttribute]
public void set_Conditions(SamlConditions value);
    [CompilerGeneratedAttribute]
public string get_InclusiveNamespacesPrefixList();
    [CompilerGeneratedAttribute]
public void set_InclusiveNamespacesPrefixList(string value);
    public string get_Issuer();
    public void set_Issuer(string value);
    public DateTime get_IssueInstant();
    public void set_IssueInstant(DateTime value);
    public string get_MajorVersion();
    public string get_MinorVersion();
    [CompilerGeneratedAttribute]
public Signature get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(Signature value);
    public string get_CanonicalString();
    internal void set_CanonicalString(string value);
    [CompilerGeneratedAttribute]
public SigningCredentials get_SigningCredentials();
    [CompilerGeneratedAttribute]
public void set_SigningCredentials(SigningCredentials value);
    [CompilerGeneratedAttribute]
public IList`1<SamlStatement> get_Statements();
    [CompilerGeneratedAttribute]
internal XmlTokenStream get_XmlTokenStream();
    [CompilerGeneratedAttribute]
internal void set_XmlTokenStream(XmlTokenStream value);
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlAttribute : object {
    private string _attributeValueXsiType;
    private string _name;
    private string _nameSpace;
    private string _originalIssuer;
    [CompilerGeneratedAttribute]
private string <ClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Values>k__BackingField;
    public string AttributeValueXsiType { get; public set; }
    public string ClaimType { get; public set; }
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public string OriginalIssuer { get; public set; }
    public ICollection`1<string> Values { get; }
    public SamlAttribute(string ns, string name, string value);
    public SamlAttribute(string ns, string name, IEnumerable`1<string> values);
    public string get_AttributeValueXsiType();
    public void set_AttributeValueXsiType(string value);
    [CompilerGeneratedAttribute]
public string get_ClaimType();
    [CompilerGeneratedAttribute]
public void set_ClaimType(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_OriginalIssuer();
    public void set_OriginalIssuer(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Values();
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer : object {
    public sealed virtual bool Equals(AttributeKey x, AttributeKey y);
    public sealed virtual int GetHashCode(AttributeKey obj);
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlAttributeStatement : SamlSubjectStatement {
    [CompilerGeneratedAttribute]
private ICollection`1<SamlAttribute> <Attributes>k__BackingField;
    public ICollection`1<SamlAttribute> Attributes { get; }
    public SamlAttributeStatement(SamlSubject samlSubject, SamlAttribute attribute);
    public SamlAttributeStatement(SamlSubject samlSubject, IEnumerable`1<SamlAttribute> attributes);
    [CompilerGeneratedAttribute]
public ICollection`1<SamlAttribute> get_Attributes();
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlAudienceRestrictionCondition : SamlCondition {
    [CompilerGeneratedAttribute]
private ICollection`1<Uri> <Audiences>k__BackingField;
    public ICollection`1<Uri> Audiences { get; }
    public SamlAudienceRestrictionCondition(Uri audience);
    public SamlAudienceRestrictionCondition(IEnumerable`1<Uri> audiences);
    [CompilerGeneratedAttribute]
public ICollection`1<Uri> get_Audiences();
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlAuthenticationStatement : SamlSubjectStatement {
    private string _authenticationMethod;
    [CompilerGeneratedAttribute]
private DateTime <AuthenticationInstant>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SamlAuthorityBinding> <AuthorityBindings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DnsAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IPAddress>k__BackingField;
    public DateTime AuthenticationInstant { get; public set; }
    public string AuthenticationMethod { get; public set; }
    public ICollection`1<SamlAuthorityBinding> AuthorityBindings { get; }
    public string DnsAddress { get; public set; }
    public string IPAddress { get; public set; }
    public SamlAuthenticationStatement(SamlSubject samlSubject, string authenticationMethod, DateTime authenticationInstant, string dnsAddress, string ipAddress, IEnumerable`1<SamlAuthorityBinding> authorityBindings);
    [CompilerGeneratedAttribute]
public DateTime get_AuthenticationInstant();
    [CompilerGeneratedAttribute]
public void set_AuthenticationInstant(DateTime value);
    public string get_AuthenticationMethod();
    public void set_AuthenticationMethod(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<SamlAuthorityBinding> get_AuthorityBindings();
    [CompilerGeneratedAttribute]
public string get_DnsAddress();
    [CompilerGeneratedAttribute]
public void set_DnsAddress(string value);
    [CompilerGeneratedAttribute]
public string get_IPAddress();
    [CompilerGeneratedAttribute]
public void set_IPAddress(string value);
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlAuthorityBinding : object {
    private XmlQualifiedName _authorityKind;
    private string _binding;
    private string _location;
    public XmlQualifiedName AuthorityKind { get; public set; }
    public string Binding { get; public set; }
    public string Location { get; public set; }
    public SamlAuthorityBinding(XmlQualifiedName authorityKind, string binding, string location);
    public XmlQualifiedName get_AuthorityKind();
    public void set_AuthorityKind(XmlQualifiedName value);
    public string get_Binding();
    public void set_Binding(string value);
    public string get_Location();
    public void set_Location(string value);
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlAuthorizationDecisionStatement : SamlSubjectStatement {
    private string _decision;
    private string _resource;
    [CompilerGeneratedAttribute]
private ICollection`1<SamlAction> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private SamlEvidence <Evidence>k__BackingField;
    public string Decision { get; public set; }
    public ICollection`1<SamlAction> Actions { get; }
    public static string ClaimType { get; }
    public SamlEvidence Evidence { get; public set; }
    public string Resource { get; public set; }
    public SamlAuthorizationDecisionStatement(SamlSubject subject, string resource, string decision, IEnumerable`1<SamlAction> actions);
    public SamlAuthorizationDecisionStatement(SamlSubject subject, string resource, string decision, IEnumerable`1<SamlAction> actions, SamlEvidence evidence);
    public string get_Decision();
    public void set_Decision(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<SamlAction> get_Actions();
    public static string get_ClaimType();
    [CompilerGeneratedAttribute]
public SamlEvidence get_Evidence();
    [CompilerGeneratedAttribute]
public void set_Evidence(SamlEvidence value);
    public string get_Resource();
    public void set_Resource(string value);
    private void CheckObjectValidity();
}
public abstract class Microsoft.IdentityModel.Tokens.Saml.SamlCondition : object {
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlConditions : object {
    [CompilerGeneratedAttribute]
private ICollection`1<SamlCondition> <Conditions>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NotBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <NotOnOrAfter>k__BackingField;
    public ICollection`1<SamlCondition> Conditions { get; }
    public DateTime NotBefore { get; public set; }
    public DateTime NotOnOrAfter { get; public set; }
    public SamlConditions(DateTime notBefore, DateTime notOnOrAfter);
    public SamlConditions(DateTime notBefore, DateTime notOnOrAfter, IEnumerable`1<SamlCondition> conditions);
    [CompilerGeneratedAttribute]
public ICollection`1<SamlCondition> get_Conditions();
    [CompilerGeneratedAttribute]
public DateTime get_NotBefore();
    [CompilerGeneratedAttribute]
public void set_NotBefore(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_NotOnOrAfter();
    [CompilerGeneratedAttribute]
public void set_NotOnOrAfter(DateTime value);
}
public static class Microsoft.IdentityModel.Tokens.Saml.SamlConstants : object {
    public static string BearerConfirmationMethod;
    public static string DefaultActionNamespace;
    public static string MajorVersionValue;
    public static string MinorVersionValue;
    public static string Namespace;
    public static string NamespaceAttributePrefix;
    public static string OasisWssSamlTokenProfile11;
    public static string Prefix;
    public static string Saml11Namespace;
    public static string Statement;
    public static string SubjectStatement;
    public static string UserName;
    public static string UserNameNamespace;
    public static string UnspecifiedAuthenticationMethod;
    internal static string ClaimType2009Namespace;
    internal static string MsIdentityNamespaceUri;
    public static String[] AcceptedDateTimeFormats;
    public static string AssertionIdPrefix;
    public static string GeneratedDateTimeFormat;
    private static SamlConstants();
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlDoNotCacheCondition : SamlCondition {
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlEvidence : object {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <AssertionIDReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<SamlAssertion> <Assertions>k__BackingField;
    public ICollection`1<string> AssertionIDReferences { get; }
    public ICollection`1<SamlAssertion> Assertions { get; }
    public SamlEvidence(IEnumerable`1<string> assertionIDReferences);
    public SamlEvidence(IEnumerable`1<SamlAssertion> assertions);
    public SamlEvidence(IEnumerable`1<string> assertionIDReferences, IEnumerable`1<SamlAssertion> assertions);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_AssertionIDReferences();
    [CompilerGeneratedAttribute]
public ICollection`1<SamlAssertion> get_Assertions();
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlSecurityToken : SecurityToken {
    [CompilerGeneratedAttribute]
private SamlAssertion <Assertion>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityKey <SigningKey>k__BackingField;
    public SamlAssertion Assertion { get; }
    public string Id { get; }
    public string Issuer { get; }
    public SecurityKey SecurityKey { get; }
    public SecurityKey SigningKey { get; public set; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public SamlSecurityToken(SamlAssertion assertion);
    [CompilerGeneratedAttribute]
public SamlAssertion get_Assertion();
    public virtual string get_Id();
    public virtual string get_Issuer();
    public virtual SecurityKey get_SecurityKey();
    [CompilerGeneratedAttribute]
public virtual SecurityKey get_SigningKey();
    [CompilerGeneratedAttribute]
public virtual void set_SigningKey(SecurityKey value);
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlSecurityTokenException : SecurityTokenException {
    public SamlSecurityTokenException(string message);
    public SamlSecurityTokenException(string message, Exception innerException);
    protected SamlSecurityTokenException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlSecurityTokenHandler : SecurityTokenHandler {
    internal static string Actor;
    private static string _className;
    private IEqualityComparer`1<SamlSubject> _samlSubjectEqualityComparer;
    private SamlSerializer _serializer;
    public bool CanValidateToken { get; }
    public bool CanWriteToken { get; }
    public IEqualityComparer`1<SamlSubject> SamlSubjectEqualityComparer { get; public set; }
    public SamlSerializer Serializer { get; public set; }
    public Type TokenType { get; }
    public virtual bool get_CanValidateToken();
    public virtual bool get_CanWriteToken();
    public IEqualityComparer`1<SamlSubject> get_SamlSubjectEqualityComparer();
    public void set_SamlSubjectEqualityComparer(IEqualityComparer`1<SamlSubject> value);
    public SamlSerializer get_Serializer();
    public void set_Serializer(SamlSerializer value);
    public virtual Type get_TokenType();
    protected virtual void AddActorToAttributes(ICollection`1<SamlAttribute> attributes, ClaimsIdentity subject);
    public virtual bool CanReadToken(string securityToken);
    public virtual bool CanReadToken(XmlReader reader);
    protected virtual ICollection`1<SamlAttribute> ConsolidateAttributes(ICollection`1<SamlAttribute> attributes);
    protected virtual SamlAdvice CreateAdvice(SecurityTokenDescriptor tokenDescriptor);
    protected virtual SamlAttribute CreateAttribute(Claim claim);
    protected virtual SamlAttributeStatement CreateAttributeStatement(SamlSubject subject, SecurityTokenDescriptor tokenDescriptor);
    protected virtual SamlAuthenticationStatement CreateAuthenticationStatement(SamlSubject subject, AuthenticationInformation authenticationInformation);
    public virtual SamlAuthorizationDecisionStatement CreateAuthorizationDecisionStatement(SecurityTokenDescriptor tokenDescriptor);
    protected virtual IEnumerable`1<ClaimsIdentity> CreateClaimsIdentities(SamlSecurityToken samlToken, string issuer, TokenValidationParameters validationParameters);
    protected virtual SamlConditions CreateConditions(SecurityTokenDescriptor tokenDescriptor);
    private static SamlAudienceRestrictionCondition CreateAudienceRestrictionCondition(IList`1<string> audiences);
    private static SamlCondition CreateAudienceRestrictionCondition(string audience, IList`1<string> audiences);
    protected virtual ICollection`1<SamlStatement> CreateStatements(SecurityTokenDescriptor tokenDescriptor, AuthenticationInformation authenticationInformation);
    protected virtual SamlSubject CreateSubject(SecurityTokenDescriptor tokenDescriptor);
    public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor);
    public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor, AuthenticationInformation authenticationInformation);
    protected virtual string CreateXmlStringFromAttributes(ICollection`1<SamlAttribute> attributes);
    protected virtual void ProcessAttributeStatement(SamlAttributeStatement statement, ClaimsIdentity identity, string issuer);
    protected virtual void ProcessAuthenticationStatement(SamlAuthenticationStatement statement, ClaimsIdentity identity, string issuer);
    protected virtual void ProcessAuthorizationDecisionStatement(SamlAuthorizationDecisionStatement statement, ClaimsIdentity identity, string issuer);
    protected virtual void ProcessCustomSubjectStatement(SamlStatement statement, ClaimsIdentity identity, string issuer);
    protected virtual IEnumerable`1<ClaimsIdentity> ProcessStatements(SamlSecurityToken samlToken, string issuer, TokenValidationParameters validationParameters);
    protected virtual void ProcessSubject(SamlSubject subject, ClaimsIdentity identity, string issuer);
    public virtual SecurityToken ReadToken(string token);
    public virtual SamlSecurityToken ReadSamlToken(string token);
    public virtual SecurityToken ReadToken(XmlReader reader);
    public virtual SamlSecurityToken ReadSamlToken(XmlReader reader);
    public virtual SecurityToken ReadToken(XmlReader reader, TokenValidationParameters validationParameters);
    protected virtual SecurityKey ResolveIssuerSigningKey(string token, SamlSecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual void SetDelegateFromAttribute(SamlAttribute attribute, ClaimsIdentity subject, string issuer);
    protected virtual void ValidateAudience(IEnumerable`1<string> audiences, SecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual void ValidateConditions(SamlSecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual string ValidateIssuer(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual void ValidateIssuerSecurityKey(SecurityKey securityKey, SecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual void ValidateLifetime(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual SamlSecurityToken ValidateSignature(string token, TokenValidationParameters validationParameters);
    private SamlSecurityToken ValidateSignature(SamlSecurityToken samlToken, string token, TokenValidationParameters validationParameters);
    protected virtual void ValidateIssuerSecurityKey(SecurityKey key, SamlSecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual void ValidateTokenReplay(Nullable`1<DateTime> expiration, string token, TokenValidationParameters validationParameters);
    public virtual ClaimsPrincipal ValidateToken(XmlReader reader, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Tokens.Saml.SamlSecurityTokenHandler/<ValidateTokenAsync>d__57")]
public virtual Task`1<TokenValidationResult> ValidateTokenAsync(string token, TokenValidationParameters validationParameters);
    public virtual ClaimsPrincipal ValidateToken(string token, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
    private ClaimsPrincipal ValidateToken(SamlSecurityToken samlToken, string token, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
    public virtual string WriteToken(SecurityToken token);
    public virtual void WriteToken(XmlWriter writer, SecurityToken token);
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlSecurityTokenReadException : SamlSecurityTokenException {
    public SamlSecurityTokenReadException(string message);
    public SamlSecurityTokenReadException(string message, Exception innerException);
    protected SamlSecurityTokenReadException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlSecurityTokenWriteException : SamlSecurityTokenException {
    public SamlSecurityTokenWriteException(string message);
    public SamlSecurityTokenWriteException(string message, Exception innerException);
    protected SamlSecurityTokenWriteException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlSerializer : object {
    private DSigSerializer _dsigSerializer;
    private string _prefix;
    public DSigSerializer DSigSerializer { get; public set; }
    public string Prefix { get; public set; }
    public DSigSerializer get_DSigSerializer();
    public void set_DSigSerializer(DSigSerializer value);
    public string get_Prefix();
    public void set_Prefix(string value);
    internal static bool CanCreateValidUri(string uriString, UriKind uriKind);
    internal static bool IsAssertionIdValid(string assertionId);
    internal static Exception LogReadException(string format, Object[] args);
    internal static Exception LogReadException(string format, Exception inner, Object[] args);
    internal static Exception LogWriteException(string format, Object[] args);
    internal static Exception LogWriteException(string format, Exception inner, Object[] args);
    protected virtual SamlAction ReadAction(XmlDictionaryReader reader);
    protected virtual SamlAdvice ReadAdvice(XmlDictionaryReader reader);
    public virtual SamlAssertion ReadAssertion(XmlReader reader);
    public virtual SamlAttribute ReadAttribute(XmlDictionaryReader reader);
    protected virtual SamlAttributeStatement ReadAttributeStatement(XmlDictionaryReader reader);
    protected virtual SamlAudienceRestrictionCondition ReadAudienceRestrictionCondition(XmlDictionaryReader reader);
    protected virtual SamlAuthenticationStatement ReadAuthenticationStatement(XmlDictionaryReader reader);
    protected virtual SamlAuthorityBinding ReadAuthorityBinding(XmlDictionaryReader reader);
    protected virtual SamlAuthorizationDecisionStatement ReadAuthorizationDecisionStatement(XmlDictionaryReader reader);
    protected virtual SamlCondition ReadCondition(XmlDictionaryReader reader);
    protected virtual SamlConditions ReadConditions(XmlDictionaryReader reader);
    protected virtual SamlDoNotCacheCondition ReadDoNotCacheCondition(XmlDictionaryReader reader);
    protected virtual SamlEvidence ReadEvidence(XmlDictionaryReader reader);
    protected virtual SamlStatement ReadStatement(XmlDictionaryReader reader);
    protected virtual SamlSubject ReadSubject(XmlDictionaryReader reader);
    protected virtual void WriteAction(XmlWriter writer, SamlAction action);
    protected virtual void WriteAdvice(XmlWriter writer, SamlAdvice advice);
    public virtual void WriteAssertion(XmlWriter writer, SamlAssertion assertion);
    public virtual void WriteAttribute(XmlWriter writer, SamlAttribute attribute);
    protected virtual void WriteAttributeStatement(XmlWriter writer, SamlAttributeStatement statement);
    protected virtual void WriteAudienceRestrictionCondition(XmlWriter writer, SamlAudienceRestrictionCondition audienceRestriction);
    protected virtual void WriteAuthenticationStatement(XmlWriter writer, SamlAuthenticationStatement statement);
    protected virtual void WriteAuthorityBinding(XmlWriter writer, SamlAuthorityBinding authorityBinding);
    protected virtual void WriteAuthorizationDecisionStatement(XmlWriter writer, SamlAuthorizationDecisionStatement statement);
    protected virtual void WriteCondition(XmlWriter writer, SamlCondition condition);
    protected virtual void WriteConditions(XmlWriter writer, SamlConditions conditions);
    protected virtual void WriteDoNotCacheCondition(XmlWriter writer, SamlDoNotCacheCondition condition);
    protected virtual void WriteEvidence(XmlWriter writer, SamlEvidence evidence);
    protected virtual void WriteStatement(XmlWriter writer, SamlStatement statement);
    protected virtual void WriteSubject(XmlWriter writer, SamlSubject subject);
}
public abstract class Microsoft.IdentityModel.Tokens.Saml.SamlStatement : object {
}
public class Microsoft.IdentityModel.Tokens.Saml.SamlSubject : object {
    private SecurityKey _securityKey;
    private KeyInfo _keyInfo;
    [CompilerGeneratedAttribute]
private string <ConfirmationData>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ConfirmationMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameQualifier>k__BackingField;
    public string ConfirmationData { get; public set; }
    public ICollection`1<string> ConfirmationMethods { get; }
    public SecurityKey Key { get; public set; }
    public KeyInfo KeyInfo { get; public set; }
    public string Name { get; public set; }
    public static string NameClaimType { get; }
    public string NameFormat { get; public set; }
    public string NameQualifier { get; public set; }
    public SamlSubject(string nameFormat, string nameQualifier, string name);
    public SamlSubject(string nameFormat, string nameQualifier, string name, IEnumerable`1<string> confirmations, string confirmationData);
    [CompilerGeneratedAttribute]
public string get_ConfirmationData();
    [CompilerGeneratedAttribute]
public void set_ConfirmationData(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ConfirmationMethods();
    public SecurityKey get_Key();
    public void set_Key(SecurityKey value);
    public KeyInfo get_KeyInfo();
    public void set_KeyInfo(KeyInfo value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public static string get_NameClaimType();
    [CompilerGeneratedAttribute]
public string get_NameFormat();
    [CompilerGeneratedAttribute]
public void set_NameFormat(string value);
    [CompilerGeneratedAttribute]
public string get_NameQualifier();
    [CompilerGeneratedAttribute]
public void set_NameQualifier(string value);
    private void CheckObjectValidity();
}
internal class Microsoft.IdentityModel.Tokens.Saml.SamlSubjectEqualityComparer : EqualityComparer`1<SamlSubject> {
    public virtual bool Equals(SamlSubject subject1, SamlSubject subject2);
    public virtual int GetHashCode(SamlSubject subject);
}
public abstract class Microsoft.IdentityModel.Tokens.Saml.SamlSubjectStatement : SamlStatement {
    private SamlSubject _subject;
    public SamlSubject Subject { get; public set; }
    public virtual SamlSubject get_Subject();
    public virtual void set_Subject(SamlSubject value);
}
internal class Microsoft.IdentityModel.Tokens.Saml.SamlTokenUtilities : object {
    internal static SecurityKey ResolveTokenSigningKey(KeyInfo tokenKeyInfo, TokenValidationParameters validationParameters);
    internal static IEnumerable`1<Claim> CreateClaimsFromDictionary(IDictionary`2<string, object> claimsCollection);
    internal static IEnumerable`1<Claim> GetAllClaims(IDictionary`2<string, object> claims, IEnumerable`1<Claim> subjectClaims);
    internal static string GetXsiTypeForValue(object value);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Tokens.Saml.SamlTokenUtilities/<PopulateValidationParametersWithCurrentConfigurationAsync>d__4")]
internal static Task`1<TokenValidationParameters> PopulateValidationParametersWithCurrentConfigurationAsync(TokenValidationParameters validationParameters);
}
internal class Microsoft.IdentityModel.Tokens.Saml2.AbsoluteUriCollection : Collection`1<Uri> {
    protected virtual void InsertItem(int index, Uri item);
    protected virtual void SetItem(int index, Uri item);
}
public class Microsoft.IdentityModel.Tokens.Saml2.AuthenticationInformation : object {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <AuthenticationMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <AuthenticationInstant>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DnsName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <NotOnOrAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Session>k__BackingField;
    public string Address { get; public set; }
    public Uri AuthenticationMethod { get; private set; }
    public DateTime AuthenticationInstant { get; public set; }
    public string DnsName { get; public set; }
    public Nullable`1<DateTime> NotOnOrAfter { get; public set; }
    public string Session { get; public set; }
    public AuthenticationInformation(Uri authenticationMethod, DateTime authenticationInstant);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public Uri get_AuthenticationMethod();
    [CompilerGeneratedAttribute]
private void set_AuthenticationMethod(Uri value);
    [CompilerGeneratedAttribute]
public DateTime get_AuthenticationInstant();
    [CompilerGeneratedAttribute]
public void set_AuthenticationInstant(DateTime value);
    [CompilerGeneratedAttribute]
public string get_DnsName();
    [CompilerGeneratedAttribute]
public void set_DnsName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_NotOnOrAfter();
    [CompilerGeneratedAttribute]
public void set_NotOnOrAfter(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_Session();
    [CompilerGeneratedAttribute]
public void set_Session(string value);
}
public static class Microsoft.IdentityModel.Tokens.Saml2.ClaimProperties : object {
    public static string Namespace;
    public static string SamlAttributeFriendlyName;
    public static string SamlAttributeNameFormat;
    public static string SamlNameIdentifierFormat;
    public static string SamlNameIdentifierNameQualifier;
    public static string SamlNameIdentifierSPNameQualifier;
    public static string SamlNameIdentifierSPProvidedId;
}
internal static class Microsoft.IdentityModel.Tokens.Saml2.LogMessages : object {
    internal static string IDX13400;
    internal static string IDX13001;
    internal static string IDX13002;
    internal static string IDX13509;
    internal static string IDX13510;
    internal static string IDX13511;
    internal static string IDX13512;
    internal static string IDX13513;
    internal static string IDX13514;
    internal static string IDX13515;
    internal static string IDX13516;
    internal static string IDX13102;
    internal static string IDX13103;
    internal static string IDX13104;
    internal static string IDX13105;
    internal static string IDX13106;
    internal static string IDX13107;
    internal static string IDX13108;
    internal static string IDX13109;
    internal static string IDX13110;
    internal static string IDX13117;
    internal static string IDX13118;
    internal static string IDX13119;
    internal static string IDX13120;
    internal static string IDX13121;
    internal static string IDX13122;
    internal static string IDX13124;
    internal static string IDX13125;
    internal static string IDX13126;
    internal static string IDX13127;
    internal static string IDX13128;
    internal static string IDX13129;
    internal static string IDX13130;
    internal static string IDX13133;
    internal static string IDX13136;
    internal static string IDX13137;
    internal static string IDX13138;
    internal static string IDX13139;
    internal static string IDX13140;
    internal static string IDX13141;
    internal static string IDX13313;
    internal static string IDX13312;
    internal static string IDX13314;
    internal static string IDX13142;
    internal static string IDX13149;
    internal static string IDX13150;
    internal static string IDX13151;
    internal static string IDX13300;
    internal static string IDX13302;
    internal static string IDX13303;
    internal static string IDX13304;
    internal static string IDX13305;
    internal static string IDX13306;
    internal static string IDX13310;
    internal static string IDX13900;
    internal static string IDX13901;
    internal static string IDX13902;
    internal static string IDX13950;
    internal static string IDX13951;
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Action : object {
    private Uri _namespace;
    private string _value;
    public Uri Namespace { get; public set; }
    public string Value { get; public set; }
    public Saml2Action(string value, Uri namespace);
    public Uri get_Namespace();
    public void set_Namespace(Uri value);
    public string get_Value();
    public void set_Value(string value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Advice : object {
    [CompilerGeneratedAttribute]
private ICollection`1<Saml2Id> <AssertionIdReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Saml2Assertion> <Assertions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Uri> <AssertionUriReferences>k__BackingField;
    public ICollection`1<Saml2Id> AssertionIdReferences { get; }
    public ICollection`1<Saml2Assertion> Assertions { get; }
    public ICollection`1<Uri> AssertionUriReferences { get; }
    [CompilerGeneratedAttribute]
public ICollection`1<Saml2Id> get_AssertionIdReferences();
    [CompilerGeneratedAttribute]
public ICollection`1<Saml2Assertion> get_Assertions();
    [CompilerGeneratedAttribute]
public ICollection`1<Uri> get_AssertionUriReferences();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Assertion : object {
    private string _canonicalString;
    private Saml2Id _id;
    private DateTime _issueInstant;
    private Saml2NameIdentifier _issuer;
    [CompilerGeneratedAttribute]
private Signature <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private Saml2Advice <Advice>k__BackingField;
    [CompilerGeneratedAttribute]
private Saml2Conditions <Conditions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InclusiveNamespacesPrefixList>k__BackingField;
    [CompilerGeneratedAttribute]
private SigningCredentials <SigningCredentials>k__BackingField;
    [CompilerGeneratedAttribute]
private Saml2Subject <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Saml2Statement> <Statements>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlTokenStream <XmlTokenStream>k__BackingField;
    public Signature Signature { get; public set; }
    public Saml2Advice Advice { get; public set; }
    public Saml2Conditions Conditions { get; public set; }
    public string CanonicalString { get; internal set; }
    public Saml2Id Id { get; public set; }
    public DateTime IssueInstant { get; public set; }
    public Saml2NameIdentifier Issuer { get; public set; }
    public string InclusiveNamespacesPrefixList { get; public set; }
    public SigningCredentials SigningCredentials { get; public set; }
    public Saml2Subject Subject { get; public set; }
    public ICollection`1<Saml2Statement> Statements { get; }
    public string Version { get; }
    internal XmlTokenStream XmlTokenStream { get; internal set; }
    public Saml2Assertion(Saml2NameIdentifier issuer);
    [CompilerGeneratedAttribute]
public Signature get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(Signature value);
    [CompilerGeneratedAttribute]
public Saml2Advice get_Advice();
    [CompilerGeneratedAttribute]
public void set_Advice(Saml2Advice value);
    [CompilerGeneratedAttribute]
public Saml2Conditions get_Conditions();
    [CompilerGeneratedAttribute]
public void set_Conditions(Saml2Conditions value);
    public string get_CanonicalString();
    internal void set_CanonicalString(string value);
    public Saml2Id get_Id();
    public void set_Id(Saml2Id value);
    public DateTime get_IssueInstant();
    public void set_IssueInstant(DateTime value);
    public Saml2NameIdentifier get_Issuer();
    public void set_Issuer(Saml2NameIdentifier value);
    [CompilerGeneratedAttribute]
public string get_InclusiveNamespacesPrefixList();
    [CompilerGeneratedAttribute]
public void set_InclusiveNamespacesPrefixList(string value);
    [CompilerGeneratedAttribute]
public SigningCredentials get_SigningCredentials();
    [CompilerGeneratedAttribute]
public void set_SigningCredentials(SigningCredentials value);
    [CompilerGeneratedAttribute]
public Saml2Subject get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(Saml2Subject value);
    [CompilerGeneratedAttribute]
public ICollection`1<Saml2Statement> get_Statements();
    public string get_Version();
    [CompilerGeneratedAttribute]
internal XmlTokenStream get_XmlTokenStream();
    [CompilerGeneratedAttribute]
internal void set_XmlTokenStream(XmlTokenStream value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Attribute : object {
    private string _attributeValueXsiType;
    private string _friendlyName;
    private string _name;
    private Uri _nameFormat;
    [CompilerGeneratedAttribute]
private string <OriginalIssuer>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Values>k__BackingField;
    public string FriendlyName { get; public set; }
    public string Name { get; public set; }
    public Uri NameFormat { get; public set; }
    public string OriginalIssuer { get; public set; }
    public string AttributeValueXsiType { get; public set; }
    public ICollection`1<string> Values { get; }
    public Saml2Attribute(string name);
    public Saml2Attribute(string name, string value);
    public Saml2Attribute(string name, IEnumerable`1<string> values);
    public string get_FriendlyName();
    public void set_FriendlyName(string value);
    public string get_Name();
    public void set_Name(string value);
    public Uri get_NameFormat();
    public void set_NameFormat(Uri value);
    [CompilerGeneratedAttribute]
public string get_OriginalIssuer();
    [CompilerGeneratedAttribute]
public void set_OriginalIssuer(string value);
    public string get_AttributeValueXsiType();
    public void set_AttributeValueXsiType(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Values();
}
internal class Microsoft.IdentityModel.Tokens.Saml2.Saml2AttributeKeyComparer : object {
    public static Saml2AttributeKeyComparer Instance;
    private static Saml2AttributeKeyComparer();
    public sealed virtual bool Equals(AttributeKey x, AttributeKey y);
    public sealed virtual int GetHashCode(AttributeKey obj);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2AttributeStatement : Saml2Statement {
    [CompilerGeneratedAttribute]
private ICollection`1<Saml2Attribute> <Attributes>k__BackingField;
    public ICollection`1<Saml2Attribute> Attributes { get; }
    public Saml2AttributeStatement(Saml2Attribute attribute);
    public Saml2AttributeStatement(IEnumerable`1<Saml2Attribute> attributes);
    [CompilerGeneratedAttribute]
public ICollection`1<Saml2Attribute> get_Attributes();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2AudienceRestriction : object {
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Audiences>k__BackingField;
    public ICollection`1<string> Audiences { get; }
    public Saml2AudienceRestriction(string audience);
    public Saml2AudienceRestriction(IEnumerable`1<string> audiences);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Audiences();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationContext : object {
    private Uri _classReference;
    private Uri _declarationReference;
    [CompilerGeneratedAttribute]
private ICollection`1<Uri> <AuthenticatingAuthorities>k__BackingField;
    public ICollection`1<Uri> AuthenticatingAuthorities { get; }
    public Uri ClassReference { get; public set; }
    public Uri DeclarationReference { get; public set; }
    public Saml2AuthenticationContext(Uri classReference);
    public Saml2AuthenticationContext(Uri classReference, Uri declarationReference);
    [CompilerGeneratedAttribute]
public ICollection`1<Uri> get_AuthenticatingAuthorities();
    public Uri get_ClassReference();
    public void set_ClassReference(Uri value);
    public Uri get_DeclarationReference();
    public void set_DeclarationReference(Uri value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement : Saml2Statement {
    private Saml2AuthenticationContext _authnContext;
    private DateTime _authnInstant;
    private string _sessionIndex;
    private Nullable`1<DateTime> _sessionNotOnOrAfter;
    [CompilerGeneratedAttribute]
private Saml2SubjectLocality <SubjectLocality>k__BackingField;
    public Saml2AuthenticationContext AuthenticationContext { get; public set; }
    public DateTime AuthenticationInstant { get; public set; }
    public string SessionIndex { get; public set; }
    public Nullable`1<DateTime> SessionNotOnOrAfter { get; public set; }
    public Saml2SubjectLocality SubjectLocality { get; public set; }
    public Saml2AuthenticationStatement(Saml2AuthenticationContext authenticationContext);
    public Saml2AuthenticationStatement(Saml2AuthenticationContext authenticationContext, DateTime authenticationInstant);
    public Saml2AuthenticationContext get_AuthenticationContext();
    public void set_AuthenticationContext(Saml2AuthenticationContext value);
    public DateTime get_AuthenticationInstant();
    public void set_AuthenticationInstant(DateTime value);
    public string get_SessionIndex();
    public void set_SessionIndex(string value);
    public Nullable`1<DateTime> get_SessionNotOnOrAfter();
    public void set_SessionNotOnOrAfter(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Saml2SubjectLocality get_SubjectLocality();
    [CompilerGeneratedAttribute]
public void set_SubjectLocality(Saml2SubjectLocality value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2AuthorizationDecisionStatement : Saml2Statement {
    internal static Uri EmptyResource;
    private string _decision;
    private Uri _resource;
    [CompilerGeneratedAttribute]
private ICollection`1<Saml2Action> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private Saml2Evidence <Evidence>k__BackingField;
    public ICollection`1<Saml2Action> Actions { get; }
    public string Decision { get; public set; }
    public Saml2Evidence Evidence { get; public set; }
    public Uri Resource { get; public set; }
    public Saml2AuthorizationDecisionStatement(Uri resource, string decision);
    public Saml2AuthorizationDecisionStatement(Uri resource, string decision, IEnumerable`1<Saml2Action> actions);
    private static Saml2AuthorizationDecisionStatement();
    [CompilerGeneratedAttribute]
public ICollection`1<Saml2Action> get_Actions();
    public string get_Decision();
    public void set_Decision(string value);
    [CompilerGeneratedAttribute]
public Saml2Evidence get_Evidence();
    [CompilerGeneratedAttribute]
public void set_Evidence(Saml2Evidence value);
    public Uri get_Resource();
    public void set_Resource(Uri value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Conditions : object {
    private Nullable`1<DateTime> _notBefore;
    private Nullable`1<DateTime> _notOnOrAfter;
    [CompilerGeneratedAttribute]
private ICollection`1<Saml2AudienceRestriction> <AudienceRestrictions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OneTimeUse>k__BackingField;
    [CompilerGeneratedAttribute]
private Saml2ProxyRestriction <ProxyRestriction>k__BackingField;
    public ICollection`1<Saml2AudienceRestriction> AudienceRestrictions { get; }
    public Nullable`1<DateTime> NotBefore { get; public set; }
    public Nullable`1<DateTime> NotOnOrAfter { get; public set; }
    public bool OneTimeUse { get; public set; }
    public Saml2ProxyRestriction ProxyRestriction { get; public set; }
    public Saml2Conditions(IEnumerable`1<Saml2AudienceRestriction> audienceRestrictions);
    [CompilerGeneratedAttribute]
public ICollection`1<Saml2AudienceRestriction> get_AudienceRestrictions();
    public Nullable`1<DateTime> get_NotBefore();
    public void set_NotBefore(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_NotOnOrAfter();
    public void set_NotOnOrAfter(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public bool get_OneTimeUse();
    [CompilerGeneratedAttribute]
public void set_OneTimeUse(bool value);
    [CompilerGeneratedAttribute]
public Saml2ProxyRestriction get_ProxyRestriction();
    [CompilerGeneratedAttribute]
public void set_ProxyRestriction(Saml2ProxyRestriction value);
}
public static class Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants : object {
    public static string Namespace;
    public static string OasisWssSaml2TokenProfile11;
    public static string Prefix;
    public static string Saml2TokenProfile11;
    public static string Version;
    public static String[] AcceptedDateTimeFormats;
    internal static string ClaimType2009Namespace;
    internal static string ClaimValueTypeSerializationPrefix;
    internal static string ClaimValueTypeSerializationPrefixWithColon;
    internal static string GeneratedDateTimeFormat;
    internal static string MsIdentityNamespaceUri;
    private static Saml2Constants();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Evidence : object {
    private List`1<Saml2Id> _assertionIdReferences;
    private List`1<Saml2Assertion> _assertions;
    private AbsoluteUriCollection _assertionUriReferences;
    public ICollection`1<Saml2Id> AssertionIdReferences { get; }
    public ICollection`1<Saml2Assertion> Assertions { get; }
    public ICollection`1<Uri> AssertionUriReferences { get; }
    public Saml2Evidence(Saml2Assertion assertion);
    public Saml2Evidence(Saml2Id idReference);
    public Saml2Evidence(Uri uriReference);
    public ICollection`1<Saml2Id> get_AssertionIdReferences();
    public ICollection`1<Saml2Assertion> get_Assertions();
    public ICollection`1<Uri> get_AssertionUriReferences();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Id : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; }
    public Saml2Id(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2NameIdentifier : object {
    private Uri _format;
    private string _nameQualifier;
    private string _serviceProviderPointNameQualifier;
    private string _serviceProviderdId;
    private string _value;
    [CompilerGeneratedAttribute]
private EncryptingCredentials <EncryptingCredentials>k__BackingField;
    public EncryptingCredentials EncryptingCredentials { get; public set; }
    public Uri Format { get; public set; }
    public string NameQualifier { get; public set; }
    public string SPNameQualifier { get; public set; }
    public string SPProvidedId { get; public set; }
    public string Value { get; public set; }
    public Saml2NameIdentifier(string name);
    public Saml2NameIdentifier(string name, Uri format);
    [CompilerGeneratedAttribute]
public EncryptingCredentials get_EncryptingCredentials();
    [CompilerGeneratedAttribute]
public void set_EncryptingCredentials(EncryptingCredentials value);
    public Uri get_Format();
    public void set_Format(Uri value);
    public string get_NameQualifier();
    public void set_NameQualifier(string value);
    public string get_SPNameQualifier();
    public void set_SPNameQualifier(string value);
    public string get_SPProvidedId();
    public void set_SPProvidedId(string value);
    public string get_Value();
    public void set_Value(string value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2ProxyRestriction : object {
    private Collection`1<Uri> _audiences;
    private Nullable`1<int> _count;
    public ICollection`1<Uri> Audiences { get; }
    public Nullable`1<int> Count { get; public set; }
    public ICollection`1<Uri> get_Audiences();
    public Nullable`1<int> get_Count();
    public void set_Count(Nullable`1<int> value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityToken : SecurityToken {
    [CompilerGeneratedAttribute]
private Saml2Assertion <Assertion>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityKey <SigningKey>k__BackingField;
    public Saml2Assertion Assertion { get; }
    public string Id { get; }
    public string Issuer { get; }
    public SecurityKey SecurityKey { get; }
    public SecurityKey SigningKey { get; public set; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public Saml2SecurityToken(Saml2Assertion assertion);
    [CompilerGeneratedAttribute]
public Saml2Assertion get_Assertion();
    public virtual string get_Id();
    public virtual string get_Issuer();
    public virtual SecurityKey get_SecurityKey();
    [CompilerGeneratedAttribute]
public virtual SecurityKey get_SigningKey();
    [CompilerGeneratedAttribute]
public virtual void set_SigningKey(SecurityKey value);
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityTokenException : SecurityTokenException {
    public Saml2SecurityTokenException(string message);
    public Saml2SecurityTokenException(string message, Exception innerException);
    protected Saml2SecurityTokenException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityTokenHandler : SecurityTokenHandler {
    private static string _actor;
    private static string _className;
    private Saml2Serializer _serializer;
    private string _actorClaimName;
    public static string DefaultActorClaimName;
    public Saml2Serializer Serializer { get; public set; }
    public string ActorClaimName { get; public set; }
    public bool CanValidateToken { get; }
    public Type TokenType { get; }
    public bool CanWriteToken { get; }
    private static Saml2SecurityTokenHandler();
    public Saml2Serializer get_Serializer();
    public void set_Serializer(Saml2Serializer value);
    public string get_ActorClaimName();
    public void set_ActorClaimName(string value);
    public virtual bool get_CanValidateToken();
    public virtual Type get_TokenType();
    public virtual bool get_CanWriteToken();
    public virtual bool CanReadToken(string token);
    public virtual bool CanReadToken(XmlReader reader);
    public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor);
    public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor, AuthenticationInformation authenticationInformation);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityTokenHandler/<ValidateTokenAsync>d__21")]
public virtual Task`1<TokenValidationResult> ValidateTokenAsync(string token, TokenValidationParameters validationParameters);
    public virtual ClaimsPrincipal ValidateToken(XmlReader reader, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
    public virtual ClaimsPrincipal ValidateToken(string token, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
    private ClaimsPrincipal ValidateToken(Saml2SecurityToken samlToken, string token, TokenValidationParameters validationParameters, SecurityToken& validatedToken);
    protected virtual void ValidateSubject(Saml2SecurityToken samlToken, TokenValidationParameters validationParameters);
    protected virtual void ValidateIssuerSecurityKey(SecurityKey key, Saml2SecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual void ValidateLifetime(Nullable`1<DateTime> notBefore, Nullable`1<DateTime> expires, SecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual void ValidateTokenReplay(Nullable`1<DateTime> expirationTime, string securityToken, TokenValidationParameters validationParameters);
    protected virtual void ValidateConfirmationData(Saml2SecurityToken samlToken, TokenValidationParameters validationParameters, Saml2SubjectConfirmationData confirmationData);
    protected virtual Saml2SecurityToken ValidateSignature(string token, TokenValidationParameters validationParameters);
    private Saml2SecurityToken ValidateSignature(Saml2SecurityToken samlToken, string token, TokenValidationParameters validationParameters);
    protected virtual SecurityKey ResolveIssuerSigningKey(string token, Saml2SecurityToken samlToken, TokenValidationParameters validationParameters);
    public virtual SecurityToken ReadToken(string token);
    public virtual Saml2SecurityToken ReadSaml2Token(string token);
    public virtual SecurityToken ReadToken(XmlReader reader);
    public virtual Saml2SecurityToken ReadSaml2Token(XmlReader reader);
    public virtual SecurityToken ReadToken(XmlReader reader, TokenValidationParameters validationParameters);
    internal static bool IsSaml2Assertion(XmlReader reader);
    protected virtual Saml2Conditions CreateConditions(SecurityTokenDescriptor tokenDescriptor);
    protected virtual Saml2Advice CreateAdvice(SecurityTokenDescriptor tokenDescriptor);
    protected virtual Saml2NameIdentifier CreateIssuerNameIdentifier(SecurityTokenDescriptor tokenDescriptor);
    protected virtual Saml2Attribute CreateAttribute(Claim claim);
    protected virtual Saml2AttributeStatement CreateAttributeStatement(SecurityTokenDescriptor tokenDescriptor);
    protected virtual ICollection`1<Saml2Attribute> ConsolidateAttributes(ICollection`1<Saml2Attribute> attributes);
    protected string CreateActorString(ClaimsIdentity actor);
    private string CreateXmlStringFromAttributes(IEnumerable`1<Saml2Attribute> attributes);
    protected virtual IEnumerable`1<Saml2Statement> CreateStatements(SecurityTokenDescriptor tokenDescriptor);
    protected virtual IEnumerable`1<Saml2Statement> CreateStatements(SecurityTokenDescriptor tokenDescriptor, AuthenticationInformation authenticationInformation);
    protected virtual Saml2AuthenticationStatement CreateAuthenticationStatement(AuthenticationInformation authenticationInformation);
    public virtual Saml2AuthorizationDecisionStatement CreateAuthorizationDecisionStatement(SecurityTokenDescriptor tokenDescriptor);
    protected virtual Saml2Subject CreateSubject(SecurityTokenDescriptor tokenDescriptor);
    protected virtual void ValidateConditions(Saml2SecurityToken samlToken, TokenValidationParameters validationParameters);
    protected virtual void ValidateOneTimeUseCondition(Saml2SecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual void SetClaimsIdentityActorFromAttribute(Saml2Attribute attribute, ClaimsIdentity identity, string issuer);
    protected virtual void ProcessStatements(ICollection`1<Saml2Statement> statements, ClaimsIdentity identity, string issuer);
    protected virtual void ProcessSubject(Saml2Subject subject, ClaimsIdentity identity, string issuer);
    protected virtual void ProcessAttributeStatement(Saml2AttributeStatement statement, ClaimsIdentity identity, string issuer);
    protected virtual void ProcessAuthenticationStatement(Saml2AuthenticationStatement statement, ClaimsIdentity identity, string issuer);
    protected virtual void ProcessAuthorizationDecisionStatement(Saml2AuthorizationDecisionStatement statement, ClaimsIdentity identity, string issuer);
    protected virtual ClaimsIdentity CreateClaimsIdentity(Saml2SecurityToken samlToken, string issuer, TokenValidationParameters validationParameters);
    protected virtual void ValidateAudience(IEnumerable`1<string> audiences, SecurityToken securityToken, TokenValidationParameters validationParameters);
    protected virtual string ValidateIssuer(string issuer, SecurityToken securityToken, TokenValidationParameters validationParameters);
    public virtual string WriteToken(SecurityToken securityToken);
    public virtual void WriteToken(XmlWriter writer, SecurityToken securityToken);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityTokenReadException : Saml2SecurityTokenException {
    public Saml2SecurityTokenReadException(string message);
    public Saml2SecurityTokenReadException(string message, Exception innerException);
    protected Saml2SecurityTokenReadException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityTokenWriteException : Saml2SecurityTokenException {
    public Saml2SecurityTokenWriteException(string message);
    public Saml2SecurityTokenWriteException(string message, Exception innerException);
    protected Saml2SecurityTokenWriteException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Serializer : object {
    private DSigSerializer _dsigSerializer;
    private string _prefix;
    public DSigSerializer DSigSerializer { get; public set; }
    public string Prefix { get; public set; }
    public DSigSerializer get_DSigSerializer();
    public void set_DSigSerializer(DSigSerializer value);
    public string get_Prefix();
    public void set_Prefix(string value);
    internal static bool CanCreateValidUri(string uriString, UriKind uriKind);
    protected virtual Saml2Action ReadAction(XmlDictionaryReader reader);
    protected virtual Saml2Advice ReadAdvice(XmlDictionaryReader reader);
    public virtual Saml2Assertion ReadAssertion(XmlReader reader);
    public virtual Saml2Attribute ReadAttribute(XmlDictionaryReader reader);
    protected virtual Saml2AttributeStatement ReadAttributeStatement(XmlDictionaryReader reader);
    protected virtual string ReadAttributeValue(XmlDictionaryReader reader, Saml2Attribute attribute);
    protected virtual Saml2AudienceRestriction ReadAudienceRestriction(XmlDictionaryReader reader);
    protected virtual Saml2AuthenticationContext ReadAuthenticationContext(XmlDictionaryReader reader);
    protected virtual Saml2AuthenticationStatement ReadAuthenticationStatement(XmlDictionaryReader reader);
    protected virtual Saml2AuthorizationDecisionStatement ReadAuthorizationDecisionStatement(XmlDictionaryReader reader);
    protected virtual Saml2Conditions ReadConditions(XmlDictionaryReader reader);
    protected virtual Saml2NameIdentifier ReadEncryptedId(XmlDictionaryReader reader);
    protected virtual Saml2Evidence ReadEvidence(XmlDictionaryReader reader);
    protected virtual Saml2NameIdentifier ReadIssuer(XmlDictionaryReader reader);
    protected virtual Saml2NameIdentifier ReadNameId(XmlDictionaryReader reader);
    internal static Saml2NameIdentifier ReadNameIdType(XmlDictionaryReader reader);
    protected virtual Saml2ProxyRestriction ReadProxyRestriction(XmlDictionaryReader reader);
    protected virtual Saml2Statement ReadStatement(XmlDictionaryReader reader);
    protected virtual Saml2Subject ReadSubject(XmlDictionaryReader reader);
    protected virtual Saml2SubjectConfirmation ReadSubjectConfirmation(XmlDictionaryReader reader);
    protected virtual Saml2SubjectConfirmationData ReadSubjectConfirmationData(XmlDictionaryReader reader);
    protected virtual Saml2NameIdentifier ReadNameIdentifier(XmlDictionaryReader reader, string parentElement);
    protected virtual Saml2SubjectLocality ReadSubjectLocality(XmlDictionaryReader reader);
    protected virtual void WriteAction(XmlWriter writer, Saml2Action action);
    protected virtual void WriteAdvice(XmlWriter writer, Saml2Advice advice);
    public virtual void WriteAssertion(XmlWriter writer, Saml2Assertion assertion);
    public virtual void WriteAttribute(XmlWriter writer, Saml2Attribute attribute);
    protected virtual void WriteAttributeStatement(XmlWriter writer, Saml2AttributeStatement statement);
    protected virtual void WriteAudienceRestriction(XmlWriter writer, Saml2AudienceRestriction audienceRestriction);
    protected virtual void WriteAuthenticationContext(XmlWriter writer, Saml2AuthenticationContext authenticationContext);
    protected virtual void WriteAuthenticationStatement(XmlWriter writer, Saml2AuthenticationStatement statement);
    protected virtual void WriteAuthorizationDecisionStatement(XmlWriter writer, Saml2AuthorizationDecisionStatement statement);
    protected virtual void WriteConditions(XmlWriter writer, Saml2Conditions conditions);
    protected virtual void WriteEvidence(XmlWriter writer, Saml2Evidence evidence);
    protected virtual void WriteIssuer(XmlWriter writer, Saml2NameIdentifier nameIdentifier);
    protected virtual void WriteNameId(XmlWriter writer, Saml2NameIdentifier nameIdentifier);
    protected virtual void WriteNameIdType(XmlWriter writer, Saml2NameIdentifier nameIdentifier);
    protected virtual void WriteProxyRestriction(XmlWriter writer, Saml2ProxyRestriction proxyRestriction);
    protected virtual void WriteStatement(XmlWriter writer, Saml2Statement statement);
    protected virtual void WriteSubject(XmlWriter writer, Saml2Subject subject);
    protected virtual void WriteSubjectConfirmation(XmlWriter writer, Saml2SubjectConfirmation subjectConfirmation);
    protected virtual void WriteSubjectConfirmationData(XmlWriter writer, Saml2SubjectConfirmationData subjectConfirmationData);
    protected virtual void WriteSubjectLocality(XmlWriter writer, Saml2SubjectLocality subjectLocality);
    internal static void ReadEmptyContentElement(XmlDictionaryReader reader);
    internal static Saml2Id ReadSimpleNCNameElement(XmlDictionaryReader reader, string name);
    internal static Uri ReadSimpleUriElement(XmlDictionaryReader reader, string element, UriKind kind, bool requireUri);
    internal static Exception LogReadException(string message);
    internal static Exception LogReadException(string message, Exception ex);
    internal static Exception LogReadException(string format, Object[] args);
    internal static Exception LogReadException(string format, Exception inner, Object[] args);
    internal static Exception LogWriteException(string message);
    internal static Exception LogWriteException(string message, Exception ex);
    internal static Exception LogWriteException(string format, Object[] args);
    internal static Exception LogWriteException(string format, Exception inner, Object[] args);
}
public abstract class Microsoft.IdentityModel.Tokens.Saml2.Saml2Statement : object {
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Subject : object {
    private Collection`1<Saml2SubjectConfirmation> _subjectConfirmations;
    [CompilerGeneratedAttribute]
private Saml2NameIdentifier <NameId>k__BackingField;
    public Saml2NameIdentifier NameId { get; public set; }
    public ICollection`1<Saml2SubjectConfirmation> SubjectConfirmations { get; }
    public Saml2Subject(Saml2NameIdentifier nameId);
    public Saml2Subject(Saml2SubjectConfirmation subjectConfirmation);
    [CompilerGeneratedAttribute]
public Saml2NameIdentifier get_NameId();
    [CompilerGeneratedAttribute]
public void set_NameId(Saml2NameIdentifier value);
    public ICollection`1<Saml2SubjectConfirmation> get_SubjectConfirmations();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2SubjectConfirmation : object {
    private Uri _method;
    [CompilerGeneratedAttribute]
private Saml2NameIdentifier <NameIdentifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Saml2SubjectConfirmationData <SubjectConfirmationData>k__BackingField;
    public Uri Method { get; public set; }
    public Saml2NameIdentifier NameIdentifier { get; public set; }
    public Saml2SubjectConfirmationData SubjectConfirmationData { get; public set; }
    public Saml2SubjectConfirmation(Uri method);
    public Saml2SubjectConfirmation(Uri method, Saml2SubjectConfirmationData subjectConfirmationData);
    public Uri get_Method();
    public void set_Method(Uri value);
    [CompilerGeneratedAttribute]
public Saml2NameIdentifier get_NameIdentifier();
    [CompilerGeneratedAttribute]
public void set_NameIdentifier(Saml2NameIdentifier value);
    [CompilerGeneratedAttribute]
public Saml2SubjectConfirmationData get_SubjectConfirmationData();
    [CompilerGeneratedAttribute]
public void set_SubjectConfirmationData(Saml2SubjectConfirmationData value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2SubjectConfirmationData : object {
    private string _address;
    private Collection`1<KeyInfo> _keyInfos;
    private Nullable`1<DateTime> _notBefore;
    private Nullable`1<DateTime> _notOnOrAfter;
    private Uri _recipient;
    [CompilerGeneratedAttribute]
private Saml2Id <InResponseTo>k__BackingField;
    public string Address { get; public set; }
    public Saml2Id InResponseTo { get; public set; }
    public ICollection`1<KeyInfo> KeyInfos { get; }
    public Nullable`1<DateTime> NotBefore { get; public set; }
    public Nullable`1<DateTime> NotOnOrAfter { get; public set; }
    public Uri Recipient { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    [CompilerGeneratedAttribute]
public Saml2Id get_InResponseTo();
    [CompilerGeneratedAttribute]
public void set_InResponseTo(Saml2Id value);
    public ICollection`1<KeyInfo> get_KeyInfos();
    public Nullable`1<DateTime> get_NotBefore();
    public void set_NotBefore(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_NotOnOrAfter();
    public void set_NotOnOrAfter(Nullable`1<DateTime> value);
    public Uri get_Recipient();
    public void set_Recipient(Uri value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2SubjectLocality : object {
    private string _address;
    private string _dnsName;
    public string Address { get; public set; }
    public string DnsName { get; public set; }
    public Saml2SubjectLocality(string address, string dnsName);
    public string get_Address();
    public void set_Address(string value);
    public string get_DnsName();
    public void set_DnsName(string value);
}
