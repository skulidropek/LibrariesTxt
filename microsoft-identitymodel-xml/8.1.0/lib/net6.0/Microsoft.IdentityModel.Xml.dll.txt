[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public abstract class Microsoft.IdentityModel.Xml.CanonicalizingTransfrom : object {
    [CompilerGeneratedAttribute]
private bool <IncludeComments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InclusiveNamespacesPrefixList>k__BackingField;
    public string Algorithm { get; }
    public bool IncludeComments { get; public set; }
    public string InclusiveNamespacesPrefixList { get; public set; }
    public abstract virtual string get_Algorithm();
    [CompilerGeneratedAttribute]
public bool get_IncludeComments();
    [CompilerGeneratedAttribute]
public void set_IncludeComments(bool value);
    [CompilerGeneratedAttribute]
public string get_InclusiveNamespacesPrefixList();
    [CompilerGeneratedAttribute]
public void set_InclusiveNamespacesPrefixList(string value);
    public abstract virtual Byte[] ProcessAndDigest(XmlTokenStream tokenStream, HashAlgorithm hashAlg);
    internal static string GetString(XmlTokenStream tokenStream, bool includeComments, String[] inclusiveNamespacesPrefixList);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryReader : XmlDictionaryReader {
    private XmlDictionaryReader _innerReader;
    protected XmlDictionaryReader InnerReader { get; protected set; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public bool IsEmptyElement { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public ReadState ReadState { get; }
    public string Value { get; }
    public Type ValueType { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    protected XmlDictionaryReader UseInnerReader { get; }
    protected XmlDictionaryReader get_InnerReader();
    protected void set_InnerReader(XmlDictionaryReader value);
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespace);
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual bool get_CanReadBinaryContent();
    public virtual bool get_CanReadValueChunk();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public virtual bool get_IsEmptyElement();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual ReadState get_ReadState();
    public virtual string get_Value();
    public virtual Type get_ValueType();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public virtual void Close();
    public virtual string GetAttribute(int i);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespace);
    public sealed virtual bool HasLineInfo();
    public virtual string LookupNamespace(string prefix);
    public virtual void MoveToAttribute(int index);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string namespace);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool Read();
    public virtual bool ReadAttributeValue();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual UniqueId ReadContentAsUniqueId();
    public virtual void ResolveEntity();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    protected XmlDictionaryReader get_UseInnerReader();
}
public class Microsoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter : XmlDictionaryWriter {
    private XmlDictionaryWriter _innerWriter;
    private XmlDictionaryWriter _internalWriter;
    private XmlDictionaryWriter _tracingWriter;
    protected XmlDictionaryWriter TracingWriter { get; protected set; }
    protected XmlDictionaryWriter InnerWriter { get; protected set; }
    internal XmlDictionaryWriter InternalWriter { get; internal set; }
    public WriteState WriteState { get; }
    protected XmlDictionaryWriter UseInnerWriter { get; }
    protected XmlDictionaryWriter get_TracingWriter();
    protected void set_TracingWriter(XmlDictionaryWriter value);
    protected XmlDictionaryWriter get_InnerWriter();
    protected void set_InnerWriter(XmlDictionaryWriter value);
    internal XmlDictionaryWriter get_InternalWriter();
    internal void set_InternalWriter(XmlDictionaryWriter value);
    public virtual void Flush();
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteCData(string text);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteComment(string text);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteEndAttribute();
    public virtual void WriteEndDocument();
    public virtual void WriteEndElement();
    public virtual void WriteEntityRef(string name);
    public virtual void WriteFullEndElement();
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteStartAttribute(string prefix, string localName, string namespace);
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteStartElement(string prefix, string localName, string namespace);
    public virtual WriteState get_WriteState();
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteXmlAttribute(string localName, string value);
    public virtual void WriteXmlnsAttribute(string prefix, string namespace);
    public virtual string LookupPrefix(string namespace);
    protected XmlDictionaryWriter get_UseInnerWriter();
}
public class Microsoft.IdentityModel.Xml.DSigElement : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Id { get; public set; }
    public string Prefix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
}
public class Microsoft.IdentityModel.Xml.DSigSerializer : object {
    private static DSigSerializer _default;
    private int _maximumReferenceTransforms;
    private TransformFactory _transformFactory;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public static DSigSerializer Default { get; public set; }
    [DefaultValueAttribute("10")]
public int MaximumReferenceTransforms { get; public set; }
    public string Prefix { get; public set; }
    public TransformFactory TransformFactory { get; public set; }
    private static DSigSerializer();
    public static DSigSerializer get_Default();
    public static void set_Default(DSigSerializer value);
    public int get_MaximumReferenceTransforms();
    public void set_MaximumReferenceTransforms(int value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
    public virtual KeyInfo ReadKeyInfo(XmlReader reader);
    protected virtual KeyInfo CreateKeyInfo(XmlReader reader);
    protected virtual bool TryReadKeyInfoType(XmlReader reader, KeyInfo& keyInfo);
    protected virtual bool TryReadKeyValueType(XmlReader reader, KeyInfo& keyInfo);
    protected virtual bool TryReadRSAKeyValue(XmlReader reader, RSAKeyValue& value);
    protected virtual bool TryReadKeyName(XmlReader reader, String& name);
    protected virtual bool TryReadRetrievalMethod(XmlReader reader, String& method);
    protected virtual bool TryReadX509Data(XmlReader reader, X509Data& data);
    private static IssuerSerial ReadIssuerSerial(XmlReader reader);
    public virtual Signature ReadSignature(XmlReader reader);
    public virtual SignedInfo ReadSignedInfo(XmlReader reader);
    public virtual IEnumerable`1<Reference> ReadReferences(XmlReader reader);
    public virtual Reference ReadReference(XmlReader reader);
    public virtual void ReadTransforms(XmlReader reader, Reference reference);
    public virtual string ReadSignatureMethod(XmlReader reader);
    public virtual string ReadCanonicalizationMethod(XmlReader reader);
    public virtual void WriteKeyInfo(XmlWriter writer, KeyInfo keyInfo);
    public virtual void WriteReference(XmlWriter writer, Reference reference);
    public virtual void WriteSignature(XmlWriter writer, Signature signature);
    public virtual void WriteSignedInfo(XmlWriter writer, SignedInfo signedInfo);
    public TransformFactory get_TransformFactory();
    public void set_TransformFactory(TransformFactory value);
}
public class Microsoft.IdentityModel.Xml.EnvelopedSignatureReader : DelegatingXmlDictionaryReader {
    private DSigSerializer _dsigSerializer;
    private int _elementCount;
    private XmlTokenStreamReader _tokenStreamReader;
    private IXmlElementReader _xmlElementReader;
    [CompilerGeneratedAttribute]
private Signature <Signature>k__BackingField;
    public DSigSerializer Serializer { get; public set; }
    public Signature Signature { get; protected set; }
    internal XmlTokenStream XmlTokenStream { get; }
    public EnvelopedSignatureReader(XmlReader reader);
    public EnvelopedSignatureReader(XmlReader reader, IXmlElementReader xmlElementReader);
    public DSigSerializer get_Serializer();
    public void set_Serializer(DSigSerializer value);
    protected virtual void OnEndOfRootElement();
    public virtual bool Read();
    [CompilerGeneratedAttribute]
public Signature get_Signature();
    [CompilerGeneratedAttribute]
protected void set_Signature(Signature value);
    internal XmlTokenStream get_XmlTokenStream();
}
public class Microsoft.IdentityModel.Xml.EnvelopedSignatureTransform : Transform {
    public string Algorithm { get; }
    public virtual string get_Algorithm();
    public virtual XmlTokenStream Process(XmlTokenStream tokenStream);
}
public class Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter : DelegatingXmlDictionaryWriter {
    public static string SignaturePlaceholder;
    private MemoryStream _canonicalStream;
    private bool _disposed;
    private DSigSerializer _dsigSerializer;
    private int _elementCount;
    private string _inclusiveNamespacesPrefixList;
    private XmlWriter _originalWriter;
    private string _referenceUri;
    private bool _signaturePlaceholderWritten;
    private SigningCredentials _signingCredentials;
    private MemoryStream _internalStream;
    private object _signatureLock;
    public DSigSerializer DSigSerializer { get; public set; }
    public EnvelopedSignatureWriter(XmlWriter writer, SigningCredentials signingCredentials, string referenceId);
    public EnvelopedSignatureWriter(XmlWriter writer, SigningCredentials signingCredentials, string referenceId, string inclusivePrefixList);
    private static EnvelopedSignatureWriter();
    public DSigSerializer get_DSigSerializer();
    public void set_DSigSerializer(DSigSerializer value);
    private void OnEndRootElement();
    private Signature CreateSignature();
    public void WriteSignature();
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartElement(string prefix, string localName, string namespace);
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.IdentityModel.Xml.ExclusiveCanonicalizationTransform : CanonicalizingTransfrom {
    public string Algorithm { get; }
    public ExclusiveCanonicalizationTransform(bool includeComments);
    public virtual string get_Algorithm();
    public virtual Byte[] ProcessAndDigest(XmlTokenStream tokenStream, HashAlgorithm hash);
}
public class Microsoft.IdentityModel.Xml.IssuerSerial : object {
    [CompilerGeneratedAttribute]
private string <IssuerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerialNumber>k__BackingField;
    public string IssuerName { get; }
    public string SerialNumber { get; }
    public IssuerSerial(string issuerName, string serialNumber);
    [CompilerGeneratedAttribute]
public string get_IssuerName();
    [CompilerGeneratedAttribute]
public string get_SerialNumber();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface Microsoft.IdentityModel.Xml.IXmlElementReader {
    public IList`1<object> Items { get; }
    public abstract virtual bool CanRead(XmlReader reader);
    public abstract virtual void Read(XmlReader reader);
    public abstract virtual IList`1<object> get_Items();
}
public class Microsoft.IdentityModel.Xml.KeyInfo : DSigElement {
    [CompilerGeneratedAttribute]
private string <KeyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RetrievalMethodUri>k__BackingField;
    [CompilerGeneratedAttribute]
private RSAKeyValue <RSAKeyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<X509Data> <X509Data>k__BackingField;
    public string KeyName { get; public set; }
    public string RetrievalMethodUri { get; public set; }
    public RSAKeyValue RSAKeyValue { get; public set; }
    public ICollection`1<X509Data> X509Data { get; }
    public KeyInfo(X509Certificate2 certificate);
    public KeyInfo(SecurityKey key);
    [CompilerGeneratedAttribute]
public string get_KeyName();
    [CompilerGeneratedAttribute]
public void set_KeyName(string value);
    [CompilerGeneratedAttribute]
public string get_RetrievalMethodUri();
    [CompilerGeneratedAttribute]
public void set_RetrievalMethodUri(string value);
    [CompilerGeneratedAttribute]
public RSAKeyValue get_RSAKeyValue();
    [CompilerGeneratedAttribute]
public void set_RSAKeyValue(RSAKeyValue value);
    [CompilerGeneratedAttribute]
public ICollection`1<X509Data> get_X509Data();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal bool MatchesKey(SecurityKey key);
    private bool Matches(X509SecurityKey key);
    private bool Matches(RsaSecurityKey key);
    private bool Matches(JsonWebKey key);
}
internal static class Microsoft.IdentityModel.Xml.LogMessages : object {
    internal static string IDX30011;
    internal static string IDX30013;
    internal static string IDX30015;
    internal static string IDX30016;
    internal static string IDX30017;
    internal static string IDX30019;
    internal static string IDX30020;
    internal static string IDX30022;
    internal static string IDX30024;
    internal static string IDX30025;
    internal static string IDX30026;
    internal static string IDX30027;
    internal static string IDX30028;
    internal static string IDX30029;
    internal static string IDX30100;
    internal static string IDX30105;
    internal static string IDX30107;
    internal static string IDX30108;
    internal static string IDX30200;
    internal static string IDX30201;
    internal static string IDX30202;
    internal static string IDX30203;
    internal static string IDX30204;
    internal static string IDX30206;
    internal static string IDX30207;
    internal static string IDX30208;
    internal static string IDX30209;
    internal static string IDX30210;
    internal static string IDX30211;
    internal static string IDX30212;
    internal static string IDX30213;
    internal static string IDX30300;
    internal static string IDX30401;
    internal static string IDX30403;
    internal static string IDX30404;
    internal static string IDX30405;
    internal static string IDX30406;
    internal static string IDX30500;
    internal static string IDX30501;
    internal static string IDX30600;
}
public class Microsoft.IdentityModel.Xml.Reference : DSigElement {
    private CanonicalizingTransfrom _canonicalizingTransfrom;
    private string _digestMethod;
    private string _digestValue;
    private XmlTokenStream _tokenStream;
    [CompilerGeneratedAttribute]
private IList`1<Transform> <Transforms>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    public CanonicalizingTransfrom CanonicalizingTransfrom { get; public set; }
    public string DigestMethod { get; public set; }
    public string DigestValue { get; public set; }
    public XmlTokenStream TokenStream { get; public set; }
    public IList`1<Transform> Transforms { get; }
    public string Type { get; public set; }
    public string Uri { get; public set; }
    public Reference(Transform transform, CanonicalizingTransfrom canonicalizingTransfrom);
    public CanonicalizingTransfrom get_CanonicalizingTransfrom();
    public void set_CanonicalizingTransfrom(CanonicalizingTransfrom value);
    public string get_DigestMethod();
    public void set_DigestMethod(string value);
    public string get_DigestValue();
    public void set_DigestValue(string value);
    public XmlTokenStream get_TokenStream();
    public void set_TokenStream(XmlTokenStream value);
    [CompilerGeneratedAttribute]
public IList`1<Transform> get_Transforms();
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    public void Verify(CryptoProviderFactory cryptoProviderFactory);
    private static Byte[] ProcessAndDigest(XmlTokenStream tokenStream, HashAlgorithm hash);
    protected Byte[] ComputeDigest(CryptoProviderFactory cryptoProviderFactory);
}
public class Microsoft.IdentityModel.Xml.RSAKeyValue : object {
    [CompilerGeneratedAttribute]
private string <Modulus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exponent>k__BackingField;
    public string Modulus { get; }
    public string Exponent { get; }
    public RSAKeyValue(string modulus, string exponent);
    [CompilerGeneratedAttribute]
public string get_Modulus();
    [CompilerGeneratedAttribute]
public string get_Exponent();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.IdentityModel.Xml.Signature : DSigElement {
    private string _signatureValue;
    private SignedInfo _signedInfo;
    [CompilerGeneratedAttribute]
private KeyInfo <KeyInfo>k__BackingField;
    public KeyInfo KeyInfo { get; public set; }
    public string SignatureValue { get; public set; }
    public SignedInfo SignedInfo { get; public set; }
    public Signature(SignedInfo signedInfo);
    [CompilerGeneratedAttribute]
public KeyInfo get_KeyInfo();
    [CompilerGeneratedAttribute]
public void set_KeyInfo(KeyInfo value);
    public string get_SignatureValue();
    public void set_SignatureValue(string value);
    public SignedInfo get_SignedInfo();
    public void set_SignedInfo(SignedInfo value);
    public void Verify(SecurityKey key);
    public void Verify(SecurityKey key, CryptoProviderFactory cryptoProviderFactory);
}
public class Microsoft.IdentityModel.Xml.SignedInfo : DSigElement {
    private DSigSerializer _dsigSerializer;
    private string _canonicalizationMethod;
    private string _signatureMethod;
    [CompilerGeneratedAttribute]
private MemoryStream <CanonicalStream>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Reference> <References>k__BackingField;
    internal MemoryStream CanonicalStream { get; internal set; }
    public string CanonicalizationMethod { get; public set; }
    public IList`1<Reference> References { get; }
    public string SignatureMethod { get; public set; }
    public SignedInfo(Reference reference);
    [CompilerGeneratedAttribute]
internal MemoryStream get_CanonicalStream();
    [CompilerGeneratedAttribute]
internal void set_CanonicalStream(MemoryStream value);
    public string get_CanonicalizationMethod();
    public void set_CanonicalizationMethod(string value);
    [CompilerGeneratedAttribute]
public IList`1<Reference> get_References();
    public string get_SignatureMethod();
    public void set_SignatureMethod(string value);
    public void Verify(CryptoProviderFactory cryptoProviderFactory);
    public void GetCanonicalBytes(Stream stream);
}
public abstract class Microsoft.IdentityModel.Xml.Transform : object {
    public string Algorithm { get; }
    public abstract virtual XmlTokenStream Process(XmlTokenStream tokenStream);
    public abstract virtual string get_Algorithm();
}
public class Microsoft.IdentityModel.Xml.TransformFactory : object {
    [CompilerGeneratedAttribute]
private static TransformFactory <Default>k__BackingField;
    public static TransformFactory Default { get; }
    private static TransformFactory();
    [CompilerGeneratedAttribute]
public static TransformFactory get_Default();
    public virtual bool IsSupportedTransform(string transform);
    public virtual bool IsSupportedCanonicalizingTransfrom(string transform);
    public virtual Transform GetTransform(string transform);
    public virtual CanonicalizingTransfrom GetCanonicalizingTransform(string transform);
}
public class Microsoft.IdentityModel.Xml.X509Data : object {
    [CompilerGeneratedAttribute]
private IssuerSerial <IssuerSerial>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SKI>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Certificates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CRL>k__BackingField;
    public IssuerSerial IssuerSerial { get; public set; }
    public string SKI { get; public set; }
    public string SubjectName { get; public set; }
    public ICollection`1<string> Certificates { get; }
    public string CRL { get; public set; }
    public X509Data(X509Certificate2 certificate);
    public X509Data(IEnumerable`1<X509Certificate2> certificates);
    [CompilerGeneratedAttribute]
public IssuerSerial get_IssuerSerial();
    [CompilerGeneratedAttribute]
public void set_IssuerSerial(IssuerSerial value);
    [CompilerGeneratedAttribute]
public string get_SKI();
    [CompilerGeneratedAttribute]
public void set_SKI(string value);
    [CompilerGeneratedAttribute]
public string get_SubjectName();
    [CompilerGeneratedAttribute]
public void set_SubjectName(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_Certificates();
    [CompilerGeneratedAttribute]
public string get_CRL();
    [CompilerGeneratedAttribute]
public void set_CRL(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.IdentityModel.Xml.XmlException : Exception {
    public XmlException(string message);
    public XmlException(string message, Exception innerException);
    protected XmlException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Xml.XmlReadException : XmlException {
    public XmlReadException(string message);
    public XmlReadException(string message, Exception innerException);
    protected XmlReadException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.IdentityModel.Xml.XmlSignatureConstants : object {
    public static string ExclusiveC14nInclusiveNamespaces;
    public static string ExclusiveC14nNamespace;
    public static string ExclusiveC14nPrefix;
    public static string Namespace;
    public static string PreferredPrefix;
    public static string SecurityJan2004Namespace;
    public static string SecurityJan2004Prefix;
    public static string TransformationParameters;
    public static string XmlNamespace;
    public static string XmlNamespaceNamespace;
    public static string XmlNamepspacePrefix;
    public static string XmlSchemaNamespace;
}
internal class Microsoft.IdentityModel.Xml.XmlToken : object {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNodeType <NodeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public bool IsEmptyElement { get; public set; }
    public string Prefix { get; private set; }
    public string LocalName { get; private set; }
    public string Namespace { get; private set; }
    public XmlNodeType NodeType { get; private set; }
    public string Value { get; private set; }
    public XmlToken(XmlNodeType nodeType, string value);
    public XmlToken(XmlNodeType nodeType, string prefix, string localName, string namespace, string value);
    public XmlToken(XmlNodeType nodeType, string prefix, string localName, string namespace, bool isEmptyElement);
    public bool get_IsEmptyElement();
    public void set_IsEmptyElement(bool value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_LocalName();
    [CompilerGeneratedAttribute]
private void set_LocalName(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public XmlNodeType get_NodeType();
    [CompilerGeneratedAttribute]
private void set_NodeType(XmlNodeType value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
public class Microsoft.IdentityModel.Xml.XmlTokenStream : object {
    private List`1<XmlToken> _xmlTokens;
    private string _excludedElement;
    private string _excludedElementNamespace;
    [CompilerGeneratedAttribute]
private int <SignatureElement>k__BackingField;
    internal int SignatureElement { get; internal set; }
    internal ReadOnlyCollection`1<XmlToken> XmlTokens { get; }
    [CompilerGeneratedAttribute]
internal int get_SignatureElement();
    [CompilerGeneratedAttribute]
internal void set_SignatureElement(int value);
    public void Add(XmlNodeType type, string value);
    public void AddAttribute(string prefix, string localName, string namespace, string value);
    public void AddElement(string prefix, string localName, string namespace, bool isEmptyElement);
    public void SetElementExclusion(string element, string namespace);
    public void WriteTo(XmlWriter writer);
    internal ReadOnlyCollection`1<XmlToken> get_XmlTokens();
}
public class Microsoft.IdentityModel.Xml.XmlTokenStreamReader : DelegatingXmlDictionaryReader {
    private int _depth;
    private bool _recordDone;
    private XmlTokenStreamReader _innerTokenStreamReader;
    [CompilerGeneratedAttribute]
private XmlTokenStream <TokenStream>k__BackingField;
    public XmlTokenStream TokenStream { get; }
    internal XmlDictionaryReader XmlDictionaryReader { get; }
    public XmlTokenStreamReader(XmlDictionaryReader reader);
    [CompilerGeneratedAttribute]
public XmlTokenStream get_TokenStream();
    internal XmlDictionaryReader get_XmlDictionaryReader();
    internal bool Read(bool recordSignaturePosition);
    public virtual bool Read();
    private void Record();
    private void Record(bool recordSignaturePosition);
}
internal class Microsoft.IdentityModel.Xml.XmlTokenStreamWriter : object {
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlTokenStream <TokenStream>k__BackingField;
    public int Count { get; }
    public int Position { get; private set; }
    public IList`1<XmlToken> Tokens { get; }
    public XmlTokenStream TokenStream { get; private set; }
    public XmlNodeType NodeType { get; }
    public bool IsEmptyElement { get; }
    public string Prefix { get; }
    public string LocalName { get; }
    public string Namespace { get; }
    public string Value { get; }
    public XmlTokenStreamWriter(XmlTokenStream tokenStream);
    public int get_Count();
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(int value);
    public IList`1<XmlToken> get_Tokens();
    [CompilerGeneratedAttribute]
public XmlTokenStream get_TokenStream();
    [CompilerGeneratedAttribute]
private void set_TokenStream(XmlTokenStream value);
    public XmlNodeType get_NodeType();
    public bool get_IsEmptyElement();
    public string get_Prefix();
    public string get_LocalName();
    public string get_Namespace();
    public string get_Value();
    public bool MoveToFirst();
    public bool MoveToFirstAttribute();
    public bool MoveToNext();
    public bool MoveToNextAttribute();
    public void WriteTo(XmlWriter writer);
    public void WriteTo(XmlWriter writer, string excludedElement, string excludedNamespace);
    internal void WriteAndReplaceSignature(XmlWriter writer, Signature signature, DSigSerializer dSigSerializer);
}
public static class Microsoft.IdentityModel.Xml.XmlUtil : object {
    private static Dictionary`2<byte, string> _hexDictionary;
    private static XmlUtil();
    public static void CheckReaderOnEntry(XmlReader reader, string element);
    public static void CheckReaderOnEntry(XmlReader reader, string element, string namespace);
    public static bool IsStartElement(XmlReader reader, string element, ICollection`1<string> namespaceList);
    public static bool EqualsQName(XmlQualifiedName qualifiedName, string name, string namespace);
    internal static string GenerateHexString(Byte[] bytes);
    public static XmlQualifiedName GetXsiTypeAsQualifiedName(XmlReader reader);
    public static bool IsNil(XmlReader reader);
    public static string NormalizeEmptyString(string string);
    internal static Exception OnRequiredAttributeMissing(string element, string attribute);
    public static XmlQualifiedName ResolveQName(XmlReader reader, string qualifiedString);
    public static void ValidateXsiType(XmlReader reader, string expectedTypeName, string expectedTypeNamespace);
    public static void ValidateXsiType(XmlReader reader, string expectedTypeName, string expectedTypeNamespace, bool requireDeclaration);
    public static Exception LogReadException(string format, Object[] args);
    public static Exception LogReadException(string format, Exception inner, Object[] args);
    public static Exception LogValidationException(string format, Object[] args);
    public static Exception LogValidationException(string format, Exception inner, Object[] args);
    public static Exception LogWriteException(string format, Object[] args);
    public static Exception LogWriteException(string format, Exception inner, Object[] args);
    internal static String[] TokenizeInclusiveNamespacesPrefixList(string inclusiveNamespacesPrefixList);
}
public class Microsoft.IdentityModel.Xml.XmlValidationException : XmlException {
    public XmlValidationException(string message);
    public XmlValidationException(string message, Exception innerException);
    protected XmlValidationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Xml.XmlWriteException : XmlException {
    public XmlWriteException(string message);
    public XmlWriteException(string message, Exception innerException);
    protected XmlWriteException(SerializationInfo info, StreamingContext context);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
