internal class Microsoft.IdentityModel.BoundedCache`1 : object {
    private Dictionary`2<string, ExpirableItem`1<T, T>> _items;
    private int _capacity;
    private TimeSpan _purgeInterval;
    private ReaderWriterLock _readWriteLock;
    private DateTime _lastPurgeTime;
    protected ReaderWriterLock CacheLock { get; }
    public int Capacity { get; public set; }
    protected Dictionary`2<string, ExpirableItem`1<T, T>> Items { get; }
    public TimeSpan PurgeInterval { get; public set; }
    public BoundedCache`1(int capacity, TimeSpan purgeInterval);
    public BoundedCache`1(int capacity, TimeSpan purgeInterval, IEqualityComparer`1<string> keyComparer);
    protected ReaderWriterLock get_CacheLock();
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual void Clear();
    private void EnforceQuota();
    public virtual int IncreaseCapacity(int size);
    protected Dictionary`2<string, ExpirableItem`1<T, T>> get_Items();
    private void Purge();
    public TimeSpan get_PurgeInterval();
    public void set_PurgeInterval(TimeSpan value);
    public virtual bool TryAdd(string key, T item, DateTime expirationTime);
    public virtual bool TryFind(string key);
    public virtual bool TryGet(string key, T& item);
    public virtual bool TryRemove(string key);
}
internal class Microsoft.IdentityModel.ByteArrayComparer : object {
    private static ByteArrayComparer _instance;
    public static ByteArrayComparer Instance { get; }
    private static ByteArrayComparer();
    public static ByteArrayComparer get_Instance();
    public sealed virtual bool Equals(Byte[] x, Byte[] y);
    public sealed virtual int GetHashCode(Byte[] obj);
}
public class Microsoft.IdentityModel.Claims.AuthenticationInformation : object {
    private string _address;
    private Collection`1<AuthenticationContext> _authContexts;
    private string _dnsName;
    private Nullable`1<DateTime> _notOnOrAfter;
    private string _session;
    public string Address { get; public set; }
    public Collection`1<AuthenticationContext> AuthorizationContexts { get; }
    public string DnsName { get; public set; }
    public Nullable`1<DateTime> NotOnOrAfter { get; public set; }
    public string Session { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    public Collection`1<AuthenticationContext> get_AuthorizationContexts();
    public string get_DnsName();
    public void set_DnsName(string value);
    public Nullable`1<DateTime> get_NotOnOrAfter();
    public void set_NotOnOrAfter(Nullable`1<DateTime> value);
    public string get_Session();
    public void set_Session(string value);
}
public static class Microsoft.IdentityModel.Claims.AuthenticationMethods : object {
    public static string Namespace;
    public static string HardwareToken;
    public static string Kerberos;
    public static string Password;
    public static string Pgp;
    public static string SecureRemotePassword;
    public static string Signature;
    public static string Smartcard;
    public static string SmartcardPki;
    public static string Spki;
    public static string TlsClient;
    public static string Unspecified;
    public static string Windows;
    public static string Xkms;
    public static string X509;
}
internal static class Microsoft.IdentityModel.Claims.AuthenticationTypeMaps : object {
    public static Mapping[] Saml11;
    public static Mapping[] Saml2;
    private static AuthenticationTypeMaps();
    public static string Denormalize(string normalizedAuthenticationMethod, Mapping[] mappingTable);
    public static string Normalize(string unnormalizedAuthenticationMethod, Mapping[] mappingTable);
}
public static class Microsoft.IdentityModel.Claims.AuthenticationTypes : object {
    public static string Basic;
    public static string Federation;
    public static string Kerberos;
    public static string Negotiate;
    public static string Password;
    public static string Signature;
    public static string Windows;
    public static string X509;
}
public class Microsoft.IdentityModel.Claims.AuthorizationContext : object {
    private Collection`1<Claim> _action;
    private Collection`1<Claim> _resource;
    private IClaimsPrincipal _principal;
    public Collection`1<Claim> Action { get; }
    public Collection`1<Claim> Resource { get; }
    public IClaimsPrincipal Principal { get; }
    public AuthorizationContext(IClaimsPrincipal principal, string resource, string action);
    public AuthorizationContext(IClaimsPrincipal principal, Collection`1<Claim> resource, Collection`1<Claim> action);
    public Collection`1<Claim> get_Action();
    public Collection`1<Claim> get_Resource();
    public IClaimsPrincipal get_Principal();
}
public class Microsoft.IdentityModel.Claims.Claim : object {
    private string _issuer;
    private string _originalIssuer;
    private Dictionary`2<string, string> _properties;
    private IClaimsIdentity _subject;
    private string _type;
    private string _value;
    private string _valueType;
    public string ClaimType { get; }
    public string Issuer { get; }
    public string OriginalIssuer { get; }
    public IDictionary`2<string, string> Properties { get; }
    public IClaimsIdentity Subject { get; }
    public string Value { get; }
    public string ValueType { get; }
    public Claim(string claimType, string value);
    public Claim(string claimType, string value, string valueType);
    public Claim(string claimType, string value, string valueType, string issuer);
    public Claim(string claimType, string value, string valueType, string issuer, string originalIssuer);
    public Claim(Claim claim, string issuer);
    public virtual string get_ClaimType();
    public virtual string get_Issuer();
    public virtual string get_OriginalIssuer();
    public virtual IDictionary`2<string, string> get_Properties();
    public virtual IClaimsIdentity get_Subject();
    public virtual string get_Value();
    public virtual string get_ValueType();
    private void AssignClaimFromStringResourceSysClaim(Claim claim);
    private void AssignClaimFromSysClaim(Claim claim);
    public virtual Claim Copy();
    public virtual void SetSubject(IClaimsIdentity subject);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.IdentityModel.Claims.ClaimCollection : object {
    private List`1<Claim> _claims;
    private IClaimsIdentity _subject;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, Claim> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Action`1<Claim> CS$<>9__CachedAnonymousMethodDelegate3;
    public Claim Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ClaimCollection(IClaimsIdentity subject);
    public void AddRange(IEnumerable`1<Claim> collection);
    public ClaimCollection CopyWithSubject(IClaimsIdentity subject);
    public void CopyRange(IEnumerable`1<Claim> collection);
    public bool Exists(Predicate`1<Claim> match);
    public ICollection`1<Claim> FindAll(Predicate`1<Claim> match);
    public sealed virtual int IndexOf(Claim item);
    public sealed virtual void Insert(int index, Claim item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual Claim get_Item(int index);
    public sealed virtual void set_Item(int index, Claim value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(Claim item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(Claim item);
    public sealed virtual void CopyTo(Claim[] array, int arrayIndex);
    public sealed virtual bool Remove(Claim item);
    public sealed virtual IEnumerator`1<Claim> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private static Claim <CopyRange>b__0(Claim claim);
    [CompilerGeneratedAttribute]
private static void <Clear>b__2(Claim claim);
}
internal class Microsoft.IdentityModel.Claims.ClaimFactoryPolicy : object {
    private ReadOnlyCollection`1<ClaimSet> _claimSets;
    private DateTime _expirationTime;
    private string _id;
    public ClaimSet Issuer { get; }
    public string Id { get; }
    public ClaimFactoryPolicy(ReadOnlyCollection`1<ClaimSet> claimSets);
    public ClaimFactoryPolicy(ReadOnlyCollection`1<ClaimSet> claimSets, DateTime expirationTime);
    public sealed virtual ClaimSet get_Issuer();
    public sealed virtual bool Evaluate(EvaluationContext evaluationContext, Object& state);
    public sealed virtual string get_Id();
}
public static class Microsoft.IdentityModel.Claims.ClaimProperties : object {
    public static string Namespace;
    public static string SamlAttributeDisplayName;
    public static string SamlAttributeNameFormat;
    public static string SamlNameIdentifierFormat;
    public static string SamlNameIdentifierNameQualifier;
    public static string SamlNameIdentifierSpNameQualifier;
    public static string SamlNameIdentifierSpProvidedId;
}
public class Microsoft.IdentityModel.Claims.ClaimsAuthenticationManager : object {
    public virtual IClaimsPrincipal Authenticate(string resourceName, IClaimsPrincipal incomingPrincipal);
}
public class Microsoft.IdentityModel.Claims.ClaimsAuthorizationManager : object {
    public virtual bool CheckAccess(AuthorizationContext context);
}
public class Microsoft.IdentityModel.Claims.ClaimsIdentity : object {
    public static string DefaultNameClaimType;
    public static string DefaultIssuer;
    private string _authenticationType;
    private ClaimCollection _claims;
    private IClaimsIdentity _actor;
    private string _label;
    private string _nameClaimType;
    private string _roleClaimType;
    private SecurityToken _bootstrapToken;
    private string _bootstrapTokenString;
    public string AuthenticationType { get; }
    public bool IsAuthenticated { get; }
    public string Name { get; }
    public IClaimsIdentity Actor { get; public set; }
    public ClaimCollection Claims { get; }
    public string Label { get; public set; }
    public string NameClaimType { get; public set; }
    public string RoleClaimType { get; public set; }
    public SecurityToken BootstrapToken { get; public set; }
    public static IClaimsIdentity AnonymousIdentity { get; }
    public ClaimsIdentity(IIdentity identity);
    public ClaimsIdentity(IEnumerable`1<Claim> claims);
    public ClaimsIdentity(IEnumerable`1<Claim> claims, SecurityToken bootstrapToken);
    public ClaimsIdentity(string authenticationType);
    public ClaimsIdentity(X509Certificate2 certificate, string issuer);
    public ClaimsIdentity(X509Certificate2 certificate, string issuer, string authenticationType);
    public ClaimsIdentity(IEnumerable`1<Claim> claims, string authenticationType);
    public ClaimsIdentity(IEnumerable`1<Claim> claims, string authenticationType, SecurityToken bootstrapToken);
    public ClaimsIdentity(string authenticationType, string nameClaimType, string roleClaimType);
    public ClaimsIdentity(IEnumerable`1<Claim> claims, string authenticationType, string nameClaimType, string roleClaimType);
    public ClaimsIdentity(IEnumerable`1<Claim> claims, string authenticationType, string nameClaimType, string roleClaimType, SecurityToken bootstrapToken);
    protected ClaimsIdentity(SerializationInfo info, StreamingContext context);
    internal ClaimsIdentity(ClaimSet claimSet);
    internal ClaimsIdentity(ClaimSet claimSet, string authenticationType);
    internal ClaimsIdentity(ClaimSet claimSet, string authenticationType, string nameClaimType, string roleClaimType);
    public sealed virtual string get_AuthenticationType();
    public sealed virtual bool get_IsAuthenticated();
    public virtual string ToString();
    public sealed virtual string get_Name();
    public sealed virtual IClaimsIdentity get_Actor();
    public sealed virtual void set_Actor(IClaimsIdentity value);
    public sealed virtual ClaimCollection get_Claims();
    public sealed virtual string get_Label();
    public sealed virtual void set_Label(string value);
    public sealed virtual string get_NameClaimType();
    public sealed virtual void set_NameClaimType(string value);
    public sealed virtual string get_RoleClaimType();
    public sealed virtual void set_RoleClaimType(string value);
    public sealed virtual SecurityToken get_BootstrapToken();
    public sealed virtual void set_BootstrapToken(SecurityToken value);
    public sealed virtual IClaimsIdentity Copy();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public static IClaimsIdentity get_AnonymousIdentity();
    public static IEnumerable`1<Claim> GetClaimsFromCertificate(X509Certificate2 certificate, string issuer);
    internal static IClaimsIdentity CreateFromIdentity(IIdentity identity);
    private bool NameClaimPredicate(Claim c);
    private bool IsCircular(IClaimsIdentity subject);
    private void Deserialize(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.IdentityModel.Claims.ClaimsIdentityCollection : object {
    private List`1<IClaimsIdentity> _collection;
    public IClaimsIdentity Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ClaimsIdentityCollection(IEnumerable`1<IClaimsIdentity> subjects);
    public ClaimsIdentityCollection Copy();
    public void AddRange(IEnumerable`1<IClaimsIdentity> collection);
    public sealed virtual IClaimsIdentity get_Item(int index);
    public sealed virtual void set_Item(int index, IClaimsIdentity value);
    public sealed virtual int IndexOf(IClaimsIdentity item);
    public sealed virtual void Insert(int index, IClaimsIdentity item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Add(IClaimsIdentity item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(IClaimsIdentity item);
    public sealed virtual void CopyTo(IClaimsIdentity[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(IClaimsIdentity item);
    public sealed virtual IEnumerator`1<IClaimsIdentity> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.IdentityModel.Claims.ClaimsIdentitySerializer : object {
    public static string ActorKey;
    public static string AuthenticationTypeKey;
    public static string BootstrapTokenKey;
    public static string ClaimsKey;
    public static string LabelKey;
    public static string NameClaimTypeKey;
    public static string RoleClaimTypeKey;
    private SerializationInfo _info;
    private StreamingContext _context;
    public ClaimsIdentitySerializer(SerializationInfo info, StreamingContext context);
    public static SecurityToken DeserializeBootstrapTokenFromString(string bootstrapTokenString);
    public IClaimsIdentity DeserializeActor();
    public void SerializeActor(IClaimsIdentity actor);
    public string DeserializeAuthenticationType();
    public void SerializeAuthenticationType(string authenticationType);
    public string GetSerializedBootstrapTokenString();
    public void SerializeBootstrapToken(SecurityToken bootstrapToken);
    public void DeserializeClaims(ClaimCollection claims);
    public void SerializeClaims(IEnumerable`1<Claim> claims);
    public string DeserializeLabel();
    public void SerializeLabel(string label);
    public string DeserializeNameClaimType();
    public void SerializeNameClaimType(string nameClaimType);
    public string DeserializeRoleClaimType();
    public void SerializeRoleClaimType(string roleClaimType);
    private void DeserializeClaimsFromString(ClaimCollection claims, string claimsString);
    private string SerializeActorToString(IClaimsIdentity actor);
    private string SerializeBootstrapTokenToString(SecurityToken bootstrapToken);
    private string SerializeClaimsToString(IEnumerable`1<Claim> claims);
}
public class Microsoft.IdentityModel.Claims.ClaimsPrincipal : object {
    private ClaimsIdentityCollection _identities;
    public static IClaimsPrincipal AnonymousPrincipal { get; }
    public ClaimsIdentityCollection Identities { get; }
    public IIdentity Identity { get; }
    public ClaimsPrincipal(IPrincipal principal);
    public ClaimsPrincipal(IEnumerable`1<IClaimsIdentity> identities);
    public ClaimsPrincipal(ClaimsIdentityCollection identityCollection);
    public static IClaimsPrincipal CreateFromPrincipal(IPrincipal principal);
    public static IClaimsPrincipal CreateFromPrincipal(IPrincipal principal, string windowsIssuerName);
    public static IClaimsPrincipal get_AnonymousPrincipal();
    public static IClaimsPrincipal CreateFromIdentities(ClaimsIdentityCollection identities);
    public static IClaimsPrincipal CreateFromIdentities(ClaimsIdentityCollection identities, string windowsIssuerName);
    public static IClaimsPrincipal CreateFromIdentity(IIdentity identity);
    public static IClaimsPrincipal CreateFromIdentity(IIdentity identity, string windowsIssuerName);
    public static IClaimsPrincipal CreateFromHttpContext(HttpContext httpContext);
    public static IClaimsPrincipal CreateFromHttpContext(HttpContext httpContext, bool clientCertificateAuthenticationEnabled);
    public static IClaimsIdentity SelectPrimaryIdentity(ClaimsIdentityCollection identities);
    public sealed virtual ClaimsIdentityCollection get_Identities();
    public sealed virtual IClaimsPrincipal Copy();
    public virtual IIdentity get_Identity();
    public sealed virtual bool IsInRole(string role);
}
public class Microsoft.IdentityModel.Claims.ClaimsPrincipalPermission : object {
    private List`1<ResourceAction> _resourceActions;
    public ClaimsPrincipalPermission(string resource, string action);
    private ClaimsPrincipalPermission(IEnumerable`1<ResourceAction> resourceActions);
    public static void CheckAccess(string resource, string action);
    private void ThrowSecurityException();
    public sealed virtual IPermission Copy();
    public sealed virtual void Demand();
    public sealed virtual IPermission Intersect(IPermission target);
    public sealed virtual bool IsSubsetOf(IPermission target);
    public sealed virtual IPermission Union(IPermission target);
    public sealed virtual void FromXml(SecurityElement e);
    public sealed virtual SecurityElement ToXml();
    public sealed virtual bool IsUnrestricted();
}
[AttributeUsageAttribute("68")]
public class Microsoft.IdentityModel.Claims.ClaimsPrincipalPermissionAttribute : CodeAccessSecurityAttribute {
    private string _resource;
    private string _operation;
    public string Operation { get; public set; }
    public string Resource { get; public set; }
    public ClaimsPrincipalPermissionAttribute(SecurityAction action);
    public string get_Operation();
    public void set_Operation(string value);
    public string get_Resource();
    public void set_Resource(string value);
    public virtual IPermission CreatePermission();
}
internal class Microsoft.IdentityModel.Claims.ClaimsSerializer : object {
    private SessionDictionary _sd;
    public ClaimsSerializer(SessionDictionary sessionDictionary);
    public void ReadClaims(XmlDictionaryReader dictionaryReader, ClaimCollection claims);
    private void ReadClaimProperties(XmlDictionaryReader dictionaryReader, IDictionary`2<string, string> properties);
    public void WriteClaims(XmlDictionaryWriter dictionaryWriter, IEnumerable`1<Claim> claims);
    private void WriteClaimProperties(XmlDictionaryWriter dictionaryWriter, IDictionary`2<string, string> properties);
}
public static class Microsoft.IdentityModel.Claims.ClaimTypes : object {
    public static string ClaimTypeNamespace;
    public static string AuthenticationInstant;
    public static string AuthenticationMethod;
    public static string CookiePath;
    public static string DenyOnlyPrimarySid;
    public static string DenyOnlyPrimaryGroupSid;
    public static string Dsa;
    public static string Expiration;
    public static string Expired;
    public static string GroupSid;
    public static string IsPersistent;
    public static string PrimaryGroupSid;
    public static string PrimarySid;
    public static string Role;
    public static string SerialNumber;
    public static string UserData;
    public static string Version;
    public static string WindowsAccountName;
    public static string ClaimType2005Namespace;
    public static string Anonymous;
    public static string Authentication;
    public static string AuthorizationDecision;
    public static string Country;
    public static string DateOfBirth;
    public static string Dns;
    public static string DenyOnlySid;
    public static string Email;
    public static string Gender;
    public static string GivenName;
    public static string Hash;
    public static string HomePhone;
    public static string Locality;
    public static string MobilePhone;
    public static string Name;
    public static string NameIdentifier;
    public static string OtherPhone;
    public static string PostalCode;
    public static string PPID;
    public static string Rsa;
    public static string Sid;
    public static string Spn;
    public static string StateOrProvince;
    public static string StreetAddress;
    public static string Surname;
    public static string System;
    public static string Thumbprint;
    public static string Upn;
    public static string Uri;
    public static string Webpage;
    public static string X500DistinguishedName;
    public static string ClaimType2009Namespace;
    public static string Actor;
}
public static class Microsoft.IdentityModel.Claims.ClaimValueTypes : object {
    private static string XmlSchemaNamespace;
    public static string Base64Binary;
    public static string Boolean;
    public static string Date;
    public static string Datetime;
    public static string Double;
    public static string HexBinary;
    public static string Integer;
    public static string String;
    public static string Time;
    private static string XmlSignatureConstantsNamespace;
    public static string DsaKeyValue;
    public static string KeyInfo;
    public static string RsaKeyValue;
    private static string XQueryOperatorsNameSpace;
    public static string DaytimeDuration;
    public static string YearMonthDuration;
    private static string Xacml10Namespace;
    public static string Rfc822Name;
    public static string X500Name;
}
public interface Microsoft.IdentityModel.Claims.IClaimsIdentity {
    public ClaimCollection Claims { get; }
    public IClaimsIdentity Actor { get; public set; }
    public string Label { get; public set; }
    public string NameClaimType { get; public set; }
    public string RoleClaimType { get; public set; }
    public SecurityToken BootstrapToken { get; public set; }
    public abstract virtual ClaimCollection get_Claims();
    public abstract virtual IClaimsIdentity get_Actor();
    public abstract virtual void set_Actor(IClaimsIdentity value);
    public abstract virtual string get_Label();
    public abstract virtual void set_Label(string value);
    public abstract virtual string get_NameClaimType();
    public abstract virtual void set_NameClaimType(string value);
    public abstract virtual string get_RoleClaimType();
    public abstract virtual void set_RoleClaimType(string value);
    public abstract virtual SecurityToken get_BootstrapToken();
    public abstract virtual void set_BootstrapToken(SecurityToken value);
    public abstract virtual IClaimsIdentity Copy();
}
public interface Microsoft.IdentityModel.Claims.IClaimsPrincipal {
    public ClaimsIdentityCollection Identities { get; }
    public abstract virtual ClaimsIdentityCollection get_Identities();
    public abstract virtual IClaimsPrincipal Copy();
}
public class Microsoft.IdentityModel.Claims.RsaClaimsIdentity : ClaimsIdentity {
    public RsaClaimsIdentity(IEnumerable`1<Claim> claims, string authenticationType);
    protected RsaClaimsIdentity(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Claims.SessionDictionary : XmlDictionary {
    private static SessionDictionary instance;
    private XmlDictionaryString _claim;
    private XmlDictionaryString _sct;
    private XmlDictionaryString _issuer;
    private XmlDictionaryString _originalIssuer;
    private XmlDictionaryString _issuerRef;
    private XmlDictionaryString _claimCollection;
    private XmlDictionaryString _actor;
    private XmlDictionaryString _claimProperty;
    private XmlDictionaryString _claimProperties;
    private XmlDictionaryString _value;
    private XmlDictionaryString _valueType;
    private XmlDictionaryString _label;
    private XmlDictionaryString _claimPropertyName;
    private XmlDictionaryString _claimPropertyValue;
    private XmlDictionaryString _type;
    private XmlDictionaryString _subjectId;
    private XmlDictionaryString _contextId;
    private XmlDictionaryString _anonymousIssued;
    private XmlDictionaryString _selfIssued;
    private XmlDictionaryString _authenticationType;
    private XmlDictionaryString _nameClaimType;
    private XmlDictionaryString _roleClaimType;
    private XmlDictionaryString _version;
    private XmlDictionaryString _scVersion;
    private XmlDictionaryString _emptyString;
    private XmlDictionaryString _nullValue;
    private XmlDictionaryString _key;
    private XmlDictionaryString _effectiveTime;
    private XmlDictionaryString _expiryTime;
    private XmlDictionaryString _keyGeneration;
    private XmlDictionaryString _keyEffectiveTime;
    private XmlDictionaryString _keyExpiryTime;
    private XmlDictionaryString _sessionId;
    private XmlDictionaryString _id;
    private XmlDictionaryString _validFrom;
    private XmlDictionaryString _validTo;
    private XmlDictionaryString _sesionToken;
    private XmlDictionaryString _sesionTokenCookie;
    private XmlDictionaryString _bootStrapToken;
    private XmlDictionaryString _context;
    private XmlDictionaryString _claimsPrincipal;
    private XmlDictionaryString _windowsPrincipal;
    private XmlDictionaryString _windowsIdentity;
    private XmlDictionaryString _identity;
    private XmlDictionaryString _identities;
    private XmlDictionaryString _windowsLogonName;
    private XmlDictionaryString _persistentTrue;
    private XmlDictionaryString _sctAuthorizationPolicy;
    private XmlDictionaryString _right;
    private XmlDictionaryString _endpointId;
    private XmlDictionaryString _windowsSidClaim;
    private XmlDictionaryString _denyOnlySidClaim;
    private XmlDictionaryString _x500DistinguishedNameClaim;
    private XmlDictionaryString _x509ThumbprintClaim;
    private XmlDictionaryString _nameClaim;
    private XmlDictionaryString _dnsClaim;
    private XmlDictionaryString _rsaClaim;
    private XmlDictionaryString _mailAddressClaim;
    private XmlDictionaryString _systemClaim;
    private XmlDictionaryString _hashClaim;
    private XmlDictionaryString _spnClaim;
    private XmlDictionaryString _upnClaim;
    private XmlDictionaryString _urlClaim;
    private XmlDictionaryString _sid;
    private XmlDictionaryString _sessionModeTrue;
    public static SessionDictionary Instance { get; }
    public XmlDictionaryString PersistentTrue { get; }
    public XmlDictionaryString WindowsLogonName { get; }
    public XmlDictionaryString ClaimsPrincipal { get; }
    public XmlDictionaryString WindowsPrincipal { get; }
    public XmlDictionaryString AnonymousIssued { get; }
    public XmlDictionaryString WindowsIdentity { get; }
    public XmlDictionaryString Identity { get; }
    public XmlDictionaryString Identities { get; }
    public XmlDictionaryString SessionId { get; }
    public XmlDictionaryString SessionModeTrue { get; }
    public XmlDictionaryString ValidFrom { get; }
    public XmlDictionaryString ValidTo { get; }
    public XmlDictionaryString EffectiveTime { get; }
    public XmlDictionaryString ExpiryTime { get; }
    public XmlDictionaryString KeyEffectiveTime { get; }
    public XmlDictionaryString KeyExpiryTime { get; }
    public XmlDictionaryString Claim { get; }
    public XmlDictionaryString SelfIssued { get; }
    public XmlDictionaryString Issuer { get; }
    public XmlDictionaryString OriginalIssuer { get; }
    public XmlDictionaryString IssuerRef { get; }
    public XmlDictionaryString ClaimCollection { get; }
    public XmlDictionaryString Actor { get; }
    public XmlDictionaryString ClaimProperties { get; }
    public XmlDictionaryString ClaimProperty { get; }
    public XmlDictionaryString Value { get; }
    public XmlDictionaryString ValueType { get; }
    public XmlDictionaryString Label { get; }
    public XmlDictionaryString Type { get; }
    public XmlDictionaryString SubjectId { get; }
    public XmlDictionaryString ClaimPropertyName { get; }
    public XmlDictionaryString ClaimPropertyValue { get; }
    public XmlDictionaryString AuthenticationType { get; }
    public XmlDictionaryString NameClaimType { get; }
    public XmlDictionaryString RoleClaimType { get; }
    public XmlDictionaryString NullValue { get; }
    public XmlDictionaryString SecurityContextToken { get; }
    public XmlDictionaryString Version { get; }
    public XmlDictionaryString SecureConversationVersion { get; }
    public XmlDictionaryString EmptyString { get; }
    public XmlDictionaryString Key { get; }
    public XmlDictionaryString KeyGeneration { get; }
    public XmlDictionaryString Id { get; }
    public XmlDictionaryString ContextId { get; }
    public XmlDictionaryString SessionToken { get; }
    public XmlDictionaryString SessionTokenCookie { get; }
    public XmlDictionaryString BootstrapToken { get; }
    public XmlDictionaryString Context { get; }
    public XmlDictionaryString SctAuthorizationPolicy { get; }
    public XmlDictionaryString Right { get; }
    public XmlDictionaryString EndpointId { get; }
    public XmlDictionaryString WindowsSidClaim { get; }
    public XmlDictionaryString DenyOnlySidClaim { get; }
    public XmlDictionaryString X500DistinguishedNameClaim { get; }
    public XmlDictionaryString X509ThumbprintClaim { get; }
    public XmlDictionaryString NameClaim { get; }
    public XmlDictionaryString DnsClaim { get; }
    public XmlDictionaryString RsaClaim { get; }
    public XmlDictionaryString MailAddressClaim { get; }
    public XmlDictionaryString SystemClaim { get; }
    public XmlDictionaryString HashClaim { get; }
    public XmlDictionaryString SpnClaim { get; }
    public XmlDictionaryString UpnClaim { get; }
    public XmlDictionaryString UrlClaim { get; }
    public XmlDictionaryString Sid { get; }
    private static SessionDictionary();
    public static SessionDictionary get_Instance();
    public XmlDictionaryString get_PersistentTrue();
    public XmlDictionaryString get_WindowsLogonName();
    public XmlDictionaryString get_ClaimsPrincipal();
    public XmlDictionaryString get_WindowsPrincipal();
    public XmlDictionaryString get_AnonymousIssued();
    public XmlDictionaryString get_WindowsIdentity();
    public XmlDictionaryString get_Identity();
    public XmlDictionaryString get_Identities();
    public XmlDictionaryString get_SessionId();
    public XmlDictionaryString get_SessionModeTrue();
    public XmlDictionaryString get_ValidFrom();
    public XmlDictionaryString get_ValidTo();
    public XmlDictionaryString get_EffectiveTime();
    public XmlDictionaryString get_ExpiryTime();
    public XmlDictionaryString get_KeyEffectiveTime();
    public XmlDictionaryString get_KeyExpiryTime();
    public XmlDictionaryString get_Claim();
    public XmlDictionaryString get_SelfIssued();
    public XmlDictionaryString get_Issuer();
    public XmlDictionaryString get_OriginalIssuer();
    public XmlDictionaryString get_IssuerRef();
    public XmlDictionaryString get_ClaimCollection();
    public XmlDictionaryString get_Actor();
    public XmlDictionaryString get_ClaimProperties();
    public XmlDictionaryString get_ClaimProperty();
    public XmlDictionaryString get_Value();
    public XmlDictionaryString get_ValueType();
    public XmlDictionaryString get_Label();
    public XmlDictionaryString get_Type();
    public XmlDictionaryString get_SubjectId();
    public XmlDictionaryString get_ClaimPropertyName();
    public XmlDictionaryString get_ClaimPropertyValue();
    public XmlDictionaryString get_AuthenticationType();
    public XmlDictionaryString get_NameClaimType();
    public XmlDictionaryString get_RoleClaimType();
    public XmlDictionaryString get_NullValue();
    public XmlDictionaryString get_SecurityContextToken();
    public XmlDictionaryString get_Version();
    public XmlDictionaryString get_SecureConversationVersion();
    public XmlDictionaryString get_EmptyString();
    public XmlDictionaryString get_Key();
    public XmlDictionaryString get_KeyGeneration();
    public XmlDictionaryString get_Id();
    public XmlDictionaryString get_ContextId();
    public XmlDictionaryString get_SessionToken();
    public XmlDictionaryString get_SessionTokenCookie();
    public XmlDictionaryString get_BootstrapToken();
    public XmlDictionaryString get_Context();
    public XmlDictionaryString get_SctAuthorizationPolicy();
    public XmlDictionaryString get_Right();
    public XmlDictionaryString get_EndpointId();
    public XmlDictionaryString get_WindowsSidClaim();
    public XmlDictionaryString get_DenyOnlySidClaim();
    public XmlDictionaryString get_X500DistinguishedNameClaim();
    public XmlDictionaryString get_X509ThumbprintClaim();
    public XmlDictionaryString get_NameClaim();
    public XmlDictionaryString get_DnsClaim();
    public XmlDictionaryString get_RsaClaim();
    public XmlDictionaryString get_MailAddressClaim();
    public XmlDictionaryString get_SystemClaim();
    public XmlDictionaryString get_HashClaim();
    public XmlDictionaryString get_SpnClaim();
    public XmlDictionaryString get_UpnClaim();
    public XmlDictionaryString get_UrlClaim();
    public XmlDictionaryString get_Sid();
}
public class Microsoft.IdentityModel.Claims.WindowsClaimsIdentity : WindowsIdentity {
    private IClaimsIdentity _actor;
    private bool _claimsInitialized;
    private bool _nameInitialized;
    private ClaimCollection _claims;
    private string _label;
    private string _roleClaimType;
    private string _nameClaimType;
    private SecurityToken _bootstrapToken;
    private string _bootstrapTokenString;
    private string _issuerName;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public IClaimsIdentity Actor { get; public set; }
    public ClaimCollection Claims { get; }
    public string Label { get; public set; }
    public string NameClaimType { get; public set; }
    public string Name { get; }
    public string RoleClaimType { get; public set; }
    public SecurityToken BootstrapToken { get; public set; }
    public WindowsClaimsIdentity(IntPtr userToken, string authenticationType);
    public WindowsClaimsIdentity(IntPtr userToken);
    public WindowsClaimsIdentity(IntPtr userToken, string authenticationType, string issuerName);
    internal WindowsClaimsIdentity(WindowsIdentity identity, string authenticationType);
    internal WindowsClaimsIdentity(WindowsIdentity identity, string authenticationType, string issuerName);
    internal WindowsClaimsIdentity(WindowsIdentity identity);
    protected WindowsClaimsIdentity(SerializationInfo info, StreamingContext context);
    private static WindowsIdentity GetValidWindowsIdentity(WindowsIdentity identity);
    private static IntPtr GetValidToken(IntPtr token);
    public static WindowsClaimsIdentity GetCurrent();
    internal static WindowsClaimsIdentity GetCurrent(string authenticationType);
    public static WindowsClaimsIdentity CreateFromUpn(string upn, string authenticationType, bool useWindowsTokenService);
    public static WindowsClaimsIdentity CreateFromUpn(string upn, string authenticationType, bool useWindowsTokenService, string issuerName);
    public static WindowsClaimsIdentity CreateFromCertificate(X509Certificate2 certificate, bool useWindowsTokenService);
    public static WindowsClaimsIdentity CreateFromCertificate(X509Certificate2 certificate, bool useWindowsTokenService, string issuerName);
    public static WindowsClaimsIdentity CertificateLogon(X509Certificate2 x509Certificate);
    public sealed virtual IClaimsIdentity get_Actor();
    public sealed virtual void set_Actor(IClaimsIdentity value);
    public sealed virtual ClaimCollection get_Claims();
    public sealed virtual string get_Label();
    public sealed virtual void set_Label(string value);
    public sealed virtual string get_NameClaimType();
    public sealed virtual void set_NameClaimType(string value);
    public virtual string get_Name();
    public sealed virtual string get_RoleClaimType();
    public sealed virtual void set_RoleClaimType(string value);
    private bool NameClaimPredicate(Claim c);
    public sealed virtual SecurityToken get_BootstrapToken();
    public sealed virtual void set_BootstrapToken(SecurityToken value);
    public sealed virtual IClaimsIdentity Copy();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
    protected virtual void Dispose(bool disposing);
    protected Claim CreatePrimarySidClaim();
    protected ICollection`1<Claim> GetGroupSidClaims();
    private void InitializeName();
    private void InitializeClaims();
    private bool IsCircular(IClaimsIdentity subject);
    private void Deserialize(SerializationInfo info, StreamingContext context);
    private static SafeHGlobalHandle GetTokenInformation(IntPtr tokenHandle, TokenInformationClass tokenInformationClass, UInt32& dwLength);
    [CompilerGeneratedAttribute]
private static bool <GetObjectData>b__0(Claim c);
}
public class Microsoft.IdentityModel.Claims.WindowsClaimsPrincipal : WindowsPrincipal {
    private ClaimsIdentityCollection _identities;
    private bool _disposed;
    public ClaimsIdentityCollection Identities { get; }
    public IIdentity Identity { get; }
    public WindowsClaimsPrincipal(WindowsClaimsIdentity identity);
    public WindowsClaimsPrincipal(WindowsIdentity identity);
    public WindowsClaimsPrincipal(WindowsIdentity identity, string issuerName);
    private static string GetValidAuthenticationType(WindowsIdentity identity);
    public static IClaimsPrincipal CreateFromWindowsIdentity(WindowsIdentity identity);
    public static IClaimsPrincipal CreateFromWindowsIdentity(WindowsIdentity identity, string issuerName);
    public sealed virtual ClaimsIdentityCollection get_Identities();
    public sealed virtual IClaimsPrincipal Copy();
    public virtual IIdentity get_Identity();
    public virtual bool IsInRole(string role);
    public virtual bool IsInRole(SecurityIdentifier sid);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.IdentityModel.Configuration.ApplicationServiceConfigurationElement : ConfigurationElementInterceptor {
}
public class Microsoft.IdentityModel.Configuration.AudienceUriElement : ConfigurationElement {
    private static string DefaultValue;
    [ConfigurationPropertyAttribute("value")]
[StringValidatorAttribute]
public string Value { get; public set; }
    public bool IsConfigured { get; }
    public string get_Value();
    public void set_Value(string value);
    public bool get_IsConfigured();
}
[ConfigurationCollectionAttribute]
public class Microsoft.IdentityModel.Configuration.AudienceUriElementCollection : ConfigurationElementCollection {
    private static AudienceUriMode DefaultAudienceUriMode;
    [TypeConverterAttribute("Microsoft.IdentityModel.Configuration.AudienceUriModeConverter")]
[ConfigurationPropertyAttribute]
public AudienceUriMode Mode { get; public set; }
    public bool IsConfigured { get; }
    protected virtual void Init();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public AudienceUriMode get_Mode();
    public void set_Mode(AudienceUriMode value);
    public bool get_IsConfigured();
}
public class Microsoft.IdentityModel.Configuration.AudienceUriModeConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public enum Microsoft.IdentityModel.Configuration.CompressionMode : Enum {
    public int value__;
    public static CompressionMode Default;
    public static CompressionMode Deflate;
    public static CompressionMode None;
}
public class Microsoft.IdentityModel.Configuration.ConfigurationElementInterceptor : ConfigurationElement {
    private XmlDocument elementXml;
    public XmlElement ElementAsXml { get; }
    public XmlNodeList ChildNodes { get; }
    protected virtual void DeserializeElement(XmlReader reader, bool serializeCollectionKey);
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
    protected virtual bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader);
    protected virtual void Reset(ConfigurationElement parentElement);
    public XmlElement get_ElementAsXml();
    public XmlNodeList get_ChildNodes();
    private void Reset(ConfigurationElementInterceptor parentElement);
}
internal static class Microsoft.IdentityModel.Configuration.ConfigurationStrings : object {
    public static string Add;
    public static string ApplicationService;
    public static string AudienceUris;
    public static string AudienceUriMode;
    public static string Capacity;
    public static string CertificateReference;
    public static string ClaimsAuthenticationManager;
    public static string ClaimsAuthorizationManager;
    public static string Clear;
    public static string Compression;
    public static string CookieTransforms;
    public static string DefaultCollectionName;
    public static string DefaultConfigurationElementName;
    public static string DefaultServiceName;
    public static string DetectReplayedTokens;
    public static string Enabled;
    public static string ExpirationPeriod;
    public static string FederatedAuthentication;
    public static string IssuerNameRegistry;
    public static string IssuerTokenResolver;
    public static string IssuerCertificateRevocationMode;
    public static string IssuerCertificateTrustedStoreLocation;
    public static string IssuerCertificateValidationMode;
    public static string IssuerCertificateValidator;
    public static string KerberosTokenHandlerRequirement;
    public static string Lifetime;
    public static string MapToWindows;
    public static string MaximumClockSkew;
    public static string MembershipProviderName;
    public static string Mode;
    public static string Service;
    public static string MicrosoftIdentityModel;
    public static string Name;
    public static string NameClaimType;
    public static string PersistentSessionLifetime;
    public static string Protection;
    public static string PurgeInterval;
    public static string Remove;
    public static string RoleClaimType;
    public static string ReplayCache;
    public static string ServiceCertificate;
    public static string SamlSecurityTokenRequirement;
    public static string SaveBootstrapTokens;
    public static string ServiceTokenResolver;
    public static string SecurityTokenHandlers;
    public static string SessionTokenRequirement;
    public static string SecurityTokenCacheType;
    public static string SecurityTokenCacheSize;
    public static string Thumbprint;
    public static string TokenReplayDetection;
    public static string TransientSessionLifetime;
    public static string TrustedIssuers;
    public static string Type;
    public static string UserNameSecurityTokenHandlerRequirement;
    public static string UseWindowsTokenService;
    public static string Value;
    public static string WindowsClaimsIdentity;
    public static string X509CertificateRevocationMode;
    public static string X509CertificateValidation;
    public static string X509CertificateValidationMode;
    public static string X509CertificateValidationModeChainTrust;
    public static string X509CertificateValidationModeCustom;
    public static string X509CertificateValidationModeNone;
    public static string X509CertificateValidationModePeerTrust;
    public static string X509CertificateValidationModePeerOrChainTrust;
    public static string X509CertificateValidator;
    public static string X509RevocationModeNoCheck;
    public static string X509RevocationModeOnline;
    public static string X509RevocationModeOffline;
    public static string X509SecurityTokenHandlerRequirement;
    public static string X509TrustedStoreLocation;
    public static string X509TrustedStoreLocationCurrentUser;
    public static string X509TrustedStoreLocationLocalMachine;
}
public class Microsoft.IdentityModel.Configuration.ConfigureServiceHostBehaviorExtensionElement : BehaviorExtensionElement {
    private string _serviceName;
    public Type BehaviorType { get; }
    public virtual Type get_BehaviorType();
    protected virtual object CreateBehavior();
    protected virtual void DeserializeElement(XmlReader reader, bool serializeCollectionKey);
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
}
public class Microsoft.IdentityModel.Configuration.CustomTypeElement : ConfigurationElementInterceptor {
    public bool IsConfigured { get; }
    [ConfigurationPropertyAttribute("type")]
[TypeConverterAttribute("Microsoft.IdentityModel.Configuration.TypeNameConverter")]
public Type TypeName { get; public set; }
    internal CustomTypeElement(Type typeName);
    public static T Resolve(CustomTypeElement customTypeElement, Object[] arguments);
    public bool get_IsConfigured();
    public Type get_TypeName();
    public void set_TypeName(Type value);
}
public class Microsoft.IdentityModel.Configuration.MicrosoftIdentityModelSection : ConfigurationSection {
    public static string SectionName;
    public static MicrosoftIdentityModelSection Current { get; }
    public static ServiceElement DefaultServiceElement { get; }
    [ConfigurationPropertyAttribute]
public ServiceElementCollection ServiceElements { get; }
    public bool IsConfigured { get; }
    public static MicrosoftIdentityModelSection get_Current();
    public static ServiceElement get_DefaultServiceElement();
    public ServiceElementCollection get_ServiceElements();
    public bool get_IsConfigured();
}
public enum Microsoft.IdentityModel.Configuration.ProtectionMode : Enum {
    public int value__;
    public static ProtectionMode Default;
    public static ProtectionMode Dpapi;
    public static ProtectionMode Rsa;
    public static ProtectionMode None;
}
public class Microsoft.IdentityModel.Configuration.SecurityTokenHandlerConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("audienceUris")]
public AudienceUriElementCollection AudienceUriElements { get; public set; }
    [ConfigurationPropertyAttribute("certificateValidation")]
public X509CertificateValidationCustomTypeElement CertificateValidationElement { get; public set; }
    [ConfigurationPropertyAttribute("issuerNameRegistry")]
public CustomTypeElement IssuerNameRegistry { get; public set; }
    [ConfigurationPropertyAttribute("issuerTokenResolver")]
public CustomTypeElement IssuerTokenResolver { get; public set; }
    [ConfigurationPropertyAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("saveBootstrapTokens")]
public string SaveBootstrapTokens { get; public set; }
    [ConfigurationPropertyAttribute("maximumClockSkew")]
public ValueTypeElement MaximumClockSkew { get; public set; }
    [ConfigurationPropertyAttribute("serviceTokenResolver")]
public CustomTypeElement ServiceTokenResolver { get; public set; }
    [ConfigurationPropertyAttribute("tokenReplayDetection")]
public TokenReplayDetectionElement TokenReplayDetectionElement { get; public set; }
    public bool IsConfigured { get; }
    protected virtual void Init();
    public AudienceUriElementCollection get_AudienceUriElements();
    public void set_AudienceUriElements(AudienceUriElementCollection value);
    public X509CertificateValidationCustomTypeElement get_CertificateValidationElement();
    public void set_CertificateValidationElement(X509CertificateValidationCustomTypeElement value);
    public CustomTypeElement get_IssuerNameRegistry();
    public void set_IssuerNameRegistry(CustomTypeElement value);
    public CustomTypeElement get_IssuerTokenResolver();
    public void set_IssuerTokenResolver(CustomTypeElement value);
    public string get_Name();
    public void set_Name(string value);
    public string get_SaveBootstrapTokens();
    public void set_SaveBootstrapTokens(string value);
    public ValueTypeElement get_MaximumClockSkew();
    public void set_MaximumClockSkew(ValueTypeElement value);
    public CustomTypeElement get_ServiceTokenResolver();
    public void set_ServiceTokenResolver(CustomTypeElement value);
    public TokenReplayDetectionElement get_TokenReplayDetectionElement();
    public void set_TokenReplayDetectionElement(TokenReplayDetectionElement value);
    public bool get_IsConfigured();
}
[ConfigurationCollectionAttribute]
public class Microsoft.IdentityModel.Configuration.SecurityTokenHandlerElementCollection : ConfigurationElementCollection {
    [ConfigurationPropertyAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("securityTokenHandlerConfiguration")]
public SecurityTokenHandlerConfigurationElement HandlerConfiguration { get; public set; }
    public bool IsConfigured { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    protected virtual void Init();
    public string get_Name();
    public void set_Name(string value);
    public SecurityTokenHandlerConfigurationElement get_HandlerConfiguration();
    public void set_HandlerConfiguration(SecurityTokenHandlerConfigurationElement value);
    public bool get_IsConfigured();
}
[ConfigurationCollectionAttribute]
public class Microsoft.IdentityModel.Configuration.SecurityTokenHandlerSetElementCollection : ConfigurationElementCollection {
    public bool IsConfigured { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public bool get_IsConfigured();
}
public class Microsoft.IdentityModel.Configuration.SecurityTokenServiceConfiguration : ServiceConfiguration {
    internal static int DefaultKeySizeInBitsConstant;
    private string _tokenIssuerName;
    private SigningCredentials _signingCredentials;
    private TimeSpan _defaultTokenLifetime;
    private TimeSpan _maximumTokenLifetime;
    private string _defaultTokenType;
    private int _defaultSymmetricKeySizeInBits;
    private int _defaultMaxSymmetricKeySizeInBits;
    private Collection`1<ServiceHostEndpointConfiguration> _endpoints;
    private Type _securityTokenServiceType;
    private WSTrust13RequestSerializer _wsTrust13RequestSerializer;
    private WSTrust13ResponseSerializer _wsTrust13ResponseSerializer;
    private WSTrustFeb2005RequestSerializer _wsTrustFeb2005RequestSerializer;
    private WSTrustFeb2005ResponseSerializer _wsTrustFeb2005ResponseSerializer;
    public Type SecurityTokenService { get; public set; }
    public int DefaultSymmetricKeySizeInBits { get; public set; }
    public int DefaultMaxSymmetricKeySizeInBits { get; public set; }
    public TimeSpan DefaultTokenLifetime { get; public set; }
    public string DefaultTokenType { get; public set; }
    public TimeSpan MaximumTokenLifetime { get; public set; }
    public SigningCredentials SigningCredentials { get; public set; }
    public string TokenIssuerName { get; public set; }
    public Collection`1<ServiceHostEndpointConfiguration> TrustEndpoints { get; }
    public WSTrust13RequestSerializer WSTrust13RequestSerializer { get; public set; }
    public WSTrust13ResponseSerializer WSTrust13ResponseSerializer { get; public set; }
    public WSTrustFeb2005RequestSerializer WSTrustFeb2005RequestSerializer { get; public set; }
    public WSTrustFeb2005ResponseSerializer WSTrustFeb2005ResponseSerializer { get; public set; }
    public SecurityTokenServiceConfiguration(bool loadConfig);
    public SecurityTokenServiceConfiguration(string issuerName);
    public SecurityTokenServiceConfiguration(string issuerName, bool loadConfig);
    public SecurityTokenServiceConfiguration(string issuerName, SigningCredentials signingCredentials);
    public SecurityTokenServiceConfiguration(string issuerName, SigningCredentials signingCredentials, bool loadConfig);
    public SecurityTokenServiceConfiguration(string issuerName, SigningCredentials signingCredentials, string serviceName);
    public Type get_SecurityTokenService();
    public void set_SecurityTokenService(Type value);
    public virtual SecurityTokenService CreateSecurityTokenService();
    public int get_DefaultSymmetricKeySizeInBits();
    public void set_DefaultSymmetricKeySizeInBits(int value);
    public int get_DefaultMaxSymmetricKeySizeInBits();
    public void set_DefaultMaxSymmetricKeySizeInBits(int value);
    public TimeSpan get_DefaultTokenLifetime();
    public void set_DefaultTokenLifetime(TimeSpan value);
    public string get_DefaultTokenType();
    public void set_DefaultTokenType(string value);
    public TimeSpan get_MaximumTokenLifetime();
    public void set_MaximumTokenLifetime(TimeSpan value);
    public SigningCredentials get_SigningCredentials();
    public void set_SigningCredentials(SigningCredentials value);
    public string get_TokenIssuerName();
    public void set_TokenIssuerName(string value);
    public Collection`1<ServiceHostEndpointConfiguration> get_TrustEndpoints();
    public WSTrust13RequestSerializer get_WSTrust13RequestSerializer();
    public void set_WSTrust13RequestSerializer(WSTrust13RequestSerializer value);
    public WSTrust13ResponseSerializer get_WSTrust13ResponseSerializer();
    public void set_WSTrust13ResponseSerializer(WSTrust13ResponseSerializer value);
    public WSTrustFeb2005RequestSerializer get_WSTrustFeb2005RequestSerializer();
    public void set_WSTrustFeb2005RequestSerializer(WSTrustFeb2005RequestSerializer value);
    public WSTrustFeb2005ResponseSerializer get_WSTrustFeb2005ResponseSerializer();
    public void set_WSTrustFeb2005ResponseSerializer(WSTrustFeb2005ResponseSerializer value);
}
public class Microsoft.IdentityModel.Configuration.ServiceCertificateElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("certificateReference")]
public CertificateReferenceElement CertificateReference { get; public set; }
    public bool IsConfigured { get; }
    public CertificateReferenceElement get_CertificateReference();
    public void set_CertificateReference(CertificateReferenceElement value);
    internal X509Certificate2 GetCertificate();
    public bool get_IsConfigured();
}
public class Microsoft.IdentityModel.Configuration.ServiceConfiguration : object {
    internal static string ServiceConfigurationKey;
    public static string DefaultServiceName;
    public static TimeSpan DefaultMaxClockSkew;
    public static X509CertificateValidationMode DefaultCertificateValidationMode;
    public static X509RevocationMode DefaultRevocationMode;
    public static StoreLocation DefaultTrustedStoreLocation;
    private X509CertificateValidationMode _certificateValidationMode;
    private ClaimsAuthenticationManager _claimsAuthenticationManager;
    private ClaimsAuthorizationManager _claimsAuthorizationManager;
    private bool _disableWsdl;
    private ExceptionMapper _exceptionMapper;
    private bool _isInitialized;
    private X509RevocationMode _revocationMode;
    private SecurityTokenHandlerCollectionManager _securityTokenHandlerCollectionManager;
    private string _serviceName;
    private X509Certificate2 _serviceCertificate;
    private TimeSpan _serviceMaxClockSkew;
    private SecurityTokenHandlerConfiguration _serviceHandlerConfiguration;
    private StoreLocation _trustedStoreLocation;
    public AudienceRestriction AudienceRestriction { get; public set; }
    public X509CertificateValidationMode CertificateValidationMode { get; public set; }
    public X509CertificateValidator CertificateValidator { get; public set; }
    public ClaimsAuthenticationManager ClaimsAuthenticationManager { get; public set; }
    public ClaimsAuthorizationManager ClaimsAuthorizationManager { get; public set; }
    public bool DetectReplayedTokens { get; public set; }
    public bool DisableWsdl { get; public set; }
    public bool IsInitialized { get; protected set; }
    public TimeSpan MaxClockSkew { get; public set; }
    public string Name { get; }
    public IssuerNameRegistry IssuerNameRegistry { get; public set; }
    public ExceptionMapper ExceptionMapper { get; public set; }
    public SecurityTokenResolver IssuerTokenResolver { get; public set; }
    public X509RevocationMode RevocationMode { get; public set; }
    public X509Certificate2 ServiceCertificate { get; public set; }
    public SecurityTokenResolver ServiceTokenResolver { get; public set; }
    public bool SaveBootstrapTokens { get; public set; }
    public SecurityTokenHandlerCollectionManager SecurityTokenHandlerCollectionManager { get; }
    public SecurityTokenHandlerCollection SecurityTokenHandlers { get; }
    public TokenReplayCache TokenReplayCache { get; public set; }
    public TimeSpan TokenReplayCacheExpirationPeriod { get; public set; }
    public StoreLocation TrustedStoreLocation { get; public set; }
    public ServiceConfiguration(bool loadConfig);
    public ServiceConfiguration(string serviceConfigurationName);
    private static ServiceConfiguration();
    internal static ServiceConfiguration GetCurrent();
    public AudienceRestriction get_AudienceRestriction();
    public void set_AudienceRestriction(AudienceRestriction value);
    public X509CertificateValidationMode get_CertificateValidationMode();
    public void set_CertificateValidationMode(X509CertificateValidationMode value);
    public X509CertificateValidator get_CertificateValidator();
    public void set_CertificateValidator(X509CertificateValidator value);
    public ClaimsAuthenticationManager get_ClaimsAuthenticationManager();
    public void set_ClaimsAuthenticationManager(ClaimsAuthenticationManager value);
    public ClaimsAuthorizationManager get_ClaimsAuthorizationManager();
    public void set_ClaimsAuthorizationManager(ClaimsAuthorizationManager value);
    public bool get_DetectReplayedTokens();
    public void set_DetectReplayedTokens(bool value);
    public bool get_DisableWsdl();
    public void set_DisableWsdl(bool value);
    public virtual bool get_IsInitialized();
    protected virtual void set_IsInitialized(bool value);
    private static SecurityTokenResolver GetServiceTokenResolver(ServiceElement element);
    private static SecurityTokenResolver GetIssuerTokenResolver(ServiceElement element);
    private static ClaimsAuthenticationManager GetClaimsAuthenticationManager(ServiceElement element);
    private static IssuerNameRegistry GetIssuerNameRegistry(ServiceElement element);
    private static X509Certificate2 GetServiceCertificate(ServiceElement element);
    public SecurityTokenResolver CreateAggregateTokenResolver();
    public virtual void Initialize();
    protected void LoadConfiguration(ServiceElement element);
    protected SecurityTokenHandlerCollectionManager LoadHandlers(ServiceElement serviceElement);
    protected SecurityTokenHandlerConfiguration LoadHandlerConfiguration(ServiceElement element);
    protected SecurityTokenHandlerConfiguration LoadHandlerConfiguration(SecurityTokenHandlerConfiguration baseConfiguration, SecurityTokenHandlerConfigurationElement element);
    public TimeSpan get_MaxClockSkew();
    public void set_MaxClockSkew(TimeSpan value);
    public string get_Name();
    public IssuerNameRegistry get_IssuerNameRegistry();
    public void set_IssuerNameRegistry(IssuerNameRegistry value);
    public ExceptionMapper get_ExceptionMapper();
    public void set_ExceptionMapper(ExceptionMapper value);
    public SecurityTokenResolver get_IssuerTokenResolver();
    public void set_IssuerTokenResolver(SecurityTokenResolver value);
    public X509RevocationMode get_RevocationMode();
    public void set_RevocationMode(X509RevocationMode value);
    public X509Certificate2 get_ServiceCertificate();
    public void set_ServiceCertificate(X509Certificate2 value);
    public SecurityTokenResolver get_ServiceTokenResolver();
    public void set_ServiceTokenResolver(SecurityTokenResolver value);
    public bool get_SaveBootstrapTokens();
    public void set_SaveBootstrapTokens(bool value);
    public SecurityTokenHandlerCollectionManager get_SecurityTokenHandlerCollectionManager();
    public SecurityTokenHandlerCollection get_SecurityTokenHandlers();
    public TokenReplayCache get_TokenReplayCache();
    public void set_TokenReplayCache(TokenReplayCache value);
    public TimeSpan get_TokenReplayCacheExpirationPeriod();
    public void set_TokenReplayCacheExpirationPeriod(TimeSpan value);
    public StoreLocation get_TrustedStoreLocation();
    public void set_TrustedStoreLocation(StoreLocation value);
}
public class Microsoft.IdentityModel.Configuration.ServiceElement : ConfigurationElement {
    [ConfigurationPropertyAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("audienceUris")]
public AudienceUriElementCollection AudienceUriElements { get; public set; }
    [ConfigurationPropertyAttribute("certificateValidation")]
public X509CertificateValidationElement CertificateValidationElement { get; public set; }
    [ConfigurationPropertyAttribute("claimsAuthenticationManager")]
public CustomTypeElement ClaimsAuthenticationManager { get; public set; }
    [ConfigurationPropertyAttribute("claimsAuthorizationManager")]
public CustomTypeElement ClaimsAuthorizationManager { get; public set; }
    [ConfigurationPropertyAttribute("federatedAuthentication")]
public FederatedAuthenticationElement FederatedAuthentication { get; public set; }
    [ConfigurationPropertyAttribute("issuerNameRegistry")]
public CustomTypeElement IssuerNameRegistry { get; public set; }
    [ConfigurationPropertyAttribute("issuerTokenResolver")]
public CustomTypeElement IssuerTokenResolver { get; public set; }
    [ConfigurationPropertyAttribute("maximumClockSkew")]
public ValueTypeElement MaximumClockSkew { get; public set; }
    [ConfigurationPropertyAttribute("saveBootstrapTokens")]
public string SaveBootstrapTokens { get; public set; }
    [ConfigurationPropertyAttribute("serviceCertificate")]
public ServiceCertificateElement ServiceCertificate { get; public set; }
    [ConfigurationPropertyAttribute("serviceTokenResolver")]
public CustomTypeElement ServiceTokenResolver { get; public set; }
    [ConfigurationPropertyAttribute("tokenReplayDetection")]
public TokenReplayDetectionElement TokenReplayDetectionElement { get; public set; }
    [ConfigurationPropertyAttribute]
public SecurityTokenHandlerSetElementCollection SecurityTokenHandlerSets { get; }
    [ConfigurationPropertyAttribute("applicationService")]
internal ApplicationServiceConfigurationElement ApplicationService { get; internal set; }
    public bool IsConfigured { get; }
    public string get_Name();
    public void set_Name(string value);
    public AudienceUriElementCollection get_AudienceUriElements();
    public void set_AudienceUriElements(AudienceUriElementCollection value);
    public X509CertificateValidationElement get_CertificateValidationElement();
    public void set_CertificateValidationElement(X509CertificateValidationElement value);
    public CustomTypeElement get_ClaimsAuthenticationManager();
    public void set_ClaimsAuthenticationManager(CustomTypeElement value);
    public CustomTypeElement get_ClaimsAuthorizationManager();
    public void set_ClaimsAuthorizationManager(CustomTypeElement value);
    public FederatedAuthenticationElement get_FederatedAuthentication();
    public void set_FederatedAuthentication(FederatedAuthenticationElement value);
    public CustomTypeElement get_IssuerNameRegistry();
    public void set_IssuerNameRegistry(CustomTypeElement value);
    public CustomTypeElement get_IssuerTokenResolver();
    public void set_IssuerTokenResolver(CustomTypeElement value);
    public ValueTypeElement get_MaximumClockSkew();
    public void set_MaximumClockSkew(ValueTypeElement value);
    public string get_SaveBootstrapTokens();
    public void set_SaveBootstrapTokens(string value);
    public ServiceCertificateElement get_ServiceCertificate();
    public void set_ServiceCertificate(ServiceCertificateElement value);
    public CustomTypeElement get_ServiceTokenResolver();
    public void set_ServiceTokenResolver(CustomTypeElement value);
    public TokenReplayDetectionElement get_TokenReplayDetectionElement();
    public void set_TokenReplayDetectionElement(TokenReplayDetectionElement value);
    public SecurityTokenHandlerSetElementCollection get_SecurityTokenHandlerSets();
    internal ApplicationServiceConfigurationElement get_ApplicationService();
    internal void set_ApplicationService(ApplicationServiceConfigurationElement value);
    public bool get_IsConfigured();
}
[ConfigurationCollectionAttribute]
public class Microsoft.IdentityModel.Configuration.ServiceElementCollection : ConfigurationElementCollection {
    protected bool ThrowOnDuplicate { get; }
    public bool IsConfigured { get; }
    protected virtual bool get_ThrowOnDuplicate();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public ServiceElement GetElement(string name);
    public bool get_IsConfigured();
}
public class Microsoft.IdentityModel.Configuration.ServiceHostEndpointConfiguration : object {
    private string _address;
    private Binding _binding;
    private Type _contractType;
    public string Address { get; }
    public Binding Binding { get; }
    public Type Contract { get; }
    public ServiceHostEndpointConfiguration(Type contractType, Binding binding, string address);
    public string get_Address();
    public Binding get_Binding();
    public Type get_Contract();
}
public class Microsoft.IdentityModel.Configuration.StoreLocationConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class Microsoft.IdentityModel.Configuration.TokenReplayDetectionElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("purgeInterval")]
public string PurgeInterval { get; public set; }
    [ConfigurationPropertyAttribute("capacity")]
public string Capacity { get; public set; }
    [ConfigurationPropertyAttribute("enabled")]
public string Enabled { get; public set; }
    [ConfigurationPropertyAttribute("expirationPeriod")]
public string ExpirationPeriod { get; public set; }
    [ConfigurationPropertyAttribute("replayCache")]
public CustomTypeElement CustomType { get; public set; }
    public bool IsConfigured { get; }
    public string get_PurgeInterval();
    public void set_PurgeInterval(string value);
    public string get_Capacity();
    public void set_Capacity(string value);
    public string get_Enabled();
    public void set_Enabled(string value);
    public string get_ExpirationPeriod();
    public void set_ExpirationPeriod(string value);
    public CustomTypeElement get_CustomType();
    public void set_CustomType(CustomTypeElement value);
    public bool get_IsConfigured();
}
public class Microsoft.IdentityModel.Configuration.TypeNameConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class Microsoft.IdentityModel.Configuration.ValueTypeElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("value")]
public string Value { get; public set; }
    public bool IsConfigured { get; }
    public string get_Value();
    public void set_Value(string value);
    public bool get_IsConfigured();
}
public class Microsoft.IdentityModel.Configuration.X509CertificateValidationCustomTypeElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("certificateValidator")]
public CustomTypeElement CustomType { get; public set; }
    public bool IsConfigured { get; }
    public CustomTypeElement get_CustomType();
    public void set_CustomType(CustomTypeElement value);
    public bool get_IsConfigured();
}
public class Microsoft.IdentityModel.Configuration.X509CertificateValidationElement : ConfigurationElement {
    private static X509CertificateValidationMode DefaultX509CertificateValidationMode;
    private static X509RevocationMode DefaultX509RevocationMode;
    private static StoreLocation DefaultStoreLocation;
    [ConfigurationPropertyAttribute]
[TypeConverterAttribute("Microsoft.IdentityModel.Configuration.X509CertificateValidationModeConverter")]
public X509CertificateValidationMode ValidationMode { get; public set; }
    [TypeConverterAttribute("Microsoft.IdentityModel.Configuration.X509RevocationModeConverter")]
[ConfigurationPropertyAttribute("revocationMode")]
public X509RevocationMode RevocationMode { get; public set; }
    [ConfigurationPropertyAttribute("trustedStoreLocation")]
[TypeConverterAttribute("Microsoft.IdentityModel.Configuration.StoreLocationConverter")]
public StoreLocation TrustedStoreLocation { get; public set; }
    [ConfigurationPropertyAttribute("certificateValidator")]
public CustomTypeElement CustomType { get; public set; }
    public bool IsConfigured { get; }
    public X509CertificateValidationMode get_ValidationMode();
    public void set_ValidationMode(X509CertificateValidationMode value);
    public X509RevocationMode get_RevocationMode();
    public void set_RevocationMode(X509RevocationMode value);
    public StoreLocation get_TrustedStoreLocation();
    public void set_TrustedStoreLocation(StoreLocation value);
    public CustomTypeElement get_CustomType();
    public void set_CustomType(CustomTypeElement value);
    public bool get_IsConfigured();
}
public class Microsoft.IdentityModel.Configuration.X509CertificateValidationModeConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class Microsoft.IdentityModel.Configuration.X509RevocationModeConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
internal static class Microsoft.IdentityModel.CryptoUtil : object {
    private static string _fipsPolicyRegistryKey;
    public static int WindowsVistaMajorNumber;
    private static object _syncObject;
    private static FIPS_ALGORTITHM_POLICY _fipsPolicyState;
    private static RandomNumberGenerator _random;
    private static CryptoUtil();
    public static bool AreEqual(Byte[] a, Byte[] b);
    public static int CeilingDivide(int dividend, int divisor);
    internal static void CloseInvalidOutSafeHandle(SafeHandle handle);
    public static void GenerateRandomBytes(Byte[] data);
    public static Byte[] GenerateRandomBytes(int sizeInBits);
    public static Byte[] CreateSignatureForSha256(AsymmetricSignatureFormatter formatter, HashAlgorithm hash);
    public static bool VerifySignatureForSha256(AsymmetricSignatureDeformatter deformatter, HashAlgorithm hash, Byte[] signatureValue);
    public static AsymmetricSignatureFormatter GetSignatureFormatterForSha256(AsymmetricSecurityKey key);
    public static AsymmetricSignatureFormatter GetSignatureFormatterForSha256(RSACryptoServiceProvider rsaProvider);
    public static AsymmetricSignatureDeformatter GetSignatureDeFormatterForSha256(AsymmetricSecurityKey key);
    public static AsymmetricSignatureDeformatter GetSignatureDeFormatterForSha256(RSACryptoServiceProvider rsaProvider);
    public static void ValidateBufferBounds(Array buffer, int offset, int count);
    [SecuritySafeCriticalAttribute]
private static FIPS_ALGORTITHM_POLICY GetFipsAlgorithmPolicyKeyFromRegistry();
    public static void ResetAllCertificates(X509Certificate2Collection certificates);
}
internal class Microsoft.IdentityModel.DateTimeFormats : object {
    internal static String[] Accepted;
    internal static string Generated;
    private static DateTimeFormats();
}
internal static class Microsoft.IdentityModel.DateTimeUtil : object {
    public static DateTime Add(DateTime time, TimeSpan timespan);
    public static DateTime AddNonNegative(DateTime time, TimeSpan timespan);
    public static DateTime GetMaxValue(DateTimeKind kind);
    public static DateTime GetMinValue(DateTimeKind kind);
    public static Nullable`1<DateTime> ToUniversalTime(Nullable`1<DateTime> value);
    public static DateTime ToUniversalTime(DateTime value);
}
internal enum Microsoft.IdentityModel.DesiredAccess : Enum {
    public UInt32 value__;
    public static DesiredAccess TOKEN_READ;
    public static DesiredAccess TOKEN_IMPERSONATE;
}
internal class Microsoft.IdentityModel.Diagnostics.AuthorizeTraceRecord : TraceRecord {
    internal static string ElementName;
    internal static string _eventId;
    private IClaimsPrincipal _claimsPrincipal;
    private string _url;
    private string _action;
    public string EventId { get; }
    public AuthorizeTraceRecord(IClaimsPrincipal claimsPrincipal, HttpRequest request);
    public AuthorizeTraceRecord(IClaimsPrincipal claimsPrincipal, string url, string action);
    public virtual string get_EventId();
    public virtual void WriteTo(XmlWriter writer);
}
internal class Microsoft.IdentityModel.Diagnostics.ChunkedCookieHandlerTraceRecord : TraceRecord {
    internal static string ElementName;
    internal static string _eventId;
    private Action _action;
    private HttpCookie _cookie;
    private string _cookiePath;
    public string EventId { get; }
    public ChunkedCookieHandlerTraceRecord(Action action, HttpCookie cookie, string cookiePath);
    public virtual string get_EventId();
    public virtual void WriteTo(XmlWriter writer);
}
internal class Microsoft.IdentityModel.Diagnostics.ClaimsPrincipalTraceRecord : TraceRecord {
    internal static string ElementName;
    internal static string _eventId;
    private IClaimsPrincipal _claimsPrincipal;
    public string EventId { get; }
    public ClaimsPrincipalTraceRecord(IClaimsPrincipal claimsPrincipal);
    public virtual string get_EventId();
    public virtual void WriteTo(XmlWriter writer);
    private void WriteClaimsIdentity(IClaimsIdentity ci, XmlWriter writer);
}
internal class Microsoft.IdentityModel.Diagnostics.DeflateCookieTraceRecord : TraceRecord {
    internal static string ElementName;
    internal static string _eventId;
    private int _originalSize;
    private int _deflatedSize;
    public string EventId { get; }
    public DeflateCookieTraceRecord(int originalSize, int deflatedSize);
    public virtual string get_EventId();
    public virtual void WriteTo(XmlWriter writer);
}
internal static class Microsoft.IdentityModel.Diagnostics.DiagnosticStrings : object {
    public static string DiagnosticsNamespace;
    public static string TraceRecordVersion;
    public static string TraceDescription;
    public static string Action;
    public static string AppDomain;
    public static string ComputedDigestTagBase64;
    public static string DataTag;
    public static string DataItemsTag;
    public static string DescriptionTag;
    public static string DeflateCookieAfterDeflatingTag;
    public static string DeflateCookieOriginalSizeTag;
    public static string DomainTag;
    public static string EventLogTag;
    public static string ExceptionTag;
    public static string ExceptionTypeTag;
    public static string ExceptionStringTag;
    public static string ExpiresTag;
    public static string ExtendedDataTag;
    public static string HttpOnlyTag;
    public static string InnerExceptionTag;
    public static string KeyTag;
    public static string MessageTag;
    public static string NameTag;
    public static string NamespaceTag;
    public static string NativeErrorCodeTag;
    public static string PathTag;
    public static string ProcessId;
    public static string ProcessName;
    public static string ReferenceAreEqual;
    public static string ReferenceDigestTagBase64;
    public static string ReferenceUri;
    public static string SecureTag;
    public static string SeverityTag;
    public static string SourceTag;
    public static string StackTraceTag;
    public static string TraceCodeTag;
    public static string TraceRecordTag;
    public static string ValueTag;
}
internal class Microsoft.IdentityModel.Diagnostics.DictionaryTraceRecord : TraceRecord {
    private IDictionary _dictionary;
    public string EventId { get; }
    public DictionaryTraceRecord(IDictionary dictionary);
    public virtual string get_EventId();
    public virtual void WriteTo(XmlWriter xml);
}
internal class Microsoft.IdentityModel.Diagnostics.HashTraceRecord : TraceRecord {
    internal static string ElementName;
    internal static string _eventId;
    private static Char[] hexDigits;
    private Byte[] _octets;
    private Byte[] _untranslatedOctets;
    private string _hash;
    public string EventId { get; }
    public HashTraceRecord(string hash, Byte[] octets, Byte[] untranslatedOctets);
    private static HashTraceRecord();
    public virtual string get_EventId();
    public virtual void WriteTo(XmlWriter writer);
    private void WriteBytes(Byte[] bytes, string startElementName, XmlWriter writer);
}
internal class Microsoft.IdentityModel.Diagnostics.PassiveMessageTraceRecord : TraceRecord {
    internal static string ElementName;
    internal static string _eventId;
    private IDictionary`2<string, string> _dictionary;
    public string EventId { get; }
    public PassiveMessageTraceRecord(IDictionary`2<string, string> dictionary);
    public virtual string get_EventId();
    public virtual void WriteTo(XmlWriter writer);
}
internal class Microsoft.IdentityModel.Diagnostics.PlainXmlWriter : XmlWriter {
    private TraceXPathNavigator _navigator;
    private bool _writingAttribute;
    private string _currentAttributeName;
    private string _currentAttributePrefix;
    private string _currentAttributeNs;
    private string _currentAttributeText;
    public TraceXPathNavigator Navigator { get; }
    public WriteState WriteState { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public TraceXPathNavigator get_Navigator();
    public virtual void WriteBase64(Byte[] buffer, int offset, int count);
    public virtual void WriteCData(string text);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteComment(string text);
    public static void WriteDecoded(string startElement, string wresult, XmlWriter writer);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteEndAttribute();
    public virtual void WriteEndElement();
    public virtual void WriteEndDocument();
    public virtual void WriteEntityRef(string name);
    public virtual void WriteFullEndElement();
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteRaw(string data);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual WriteState get_WriteState();
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteWhitespace(string ws);
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
}
internal class Microsoft.IdentityModel.Diagnostics.ReferenceTraceRecord : TraceRecord {
    internal static string ElementName;
    internal static string _eventId;
    private bool _areEqual;
    private Byte[] _computedDigest;
    private Byte[] _referenceDigest;
    private string _uri;
    public string EventId { get; }
    public ReferenceTraceRecord(bool areEqual, Byte[] computedDigest, Byte[] referenceDigest, string uri);
    public virtual string get_EventId();
    public virtual void WriteTo(XmlWriter writer);
}
internal class Microsoft.IdentityModel.Diagnostics.TokenTraceRecord : TraceRecord {
    internal static string ElementName;
    internal static string _eventId;
    private SecurityToken _securityToken;
    public string EventId { get; }
    public TokenTraceRecord(SecurityToken securityToken);
    public virtual string get_EventId();
    private void WriteSessionToken(XmlWriter writer, SessionSecurityToken sessionToken);
    private static SessionSecurityTokenHandler GetOrCreateSessionSecurityTokenHandler();
    private static string GenerateSessionIdFromCookie(Byte[] cookie);
    public virtual void WriteTo(XmlWriter writer);
}
internal enum Microsoft.IdentityModel.Diagnostics.TraceCode : Enum {
    public int value__;
    public static TraceCode Diagnostics;
    public static TraceCode AppDomainUnload;
    public static TraceCode EventLog;
    public static TraceCode HandledException;
    public static TraceCode UnhandledException;
}
internal abstract class Microsoft.IdentityModel.Diagnostics.TraceRecord : object {
    protected static string EventIdBase;
    protected static string ElementName;
    internal static string _eventId;
    public string EventId { get; }
    public virtual string get_EventId();
    public abstract virtual void WriteTo(XmlWriter writer);
}
[DebuggerDisplayAttribute("TraceXPathNavigator")]
internal class Microsoft.IdentityModel.Diagnostics.TraceXPathNavigator : XPathNavigator {
    private bool _closed;
    private TraceNode _current;
    private ElementNode _root;
    private XPathNodeType _state;
    public string BaseURI { get; }
    private CommentNode CurrentComment { get; }
    private ElementNode CurrentElement { get; }
    private ProcessingInstructionNode CurrentProcessingInstruction { get; }
    [DebuggerDisplayAttribute("")]
public string LocalName { get; }
    public bool IsEmptyElement { get; }
    [DebuggerDisplayAttribute("")]
public string Name { get; }
    [DebuggerDisplayAttribute("")]
public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    [DebuggerDisplayAttribute("")]
public XPathNodeType NodeType { get; }
    [DebuggerDisplayAttribute("")]
public string Prefix { get; }
    [DebuggerDisplayAttribute("")]
public string Value { get; }
    public WriteState WriteState { get; }
    public void AddAttribute(string name, string value, string xmlns, string prefix);
    public void AddComment(string text);
    public void AddElement(string prefix, string name, string xmlns);
    public void AddProcessingInstruction(string name, string text);
    public void AddText(string value);
    public virtual string get_BaseURI();
    public void CloseElement();
    public virtual XPathNavigator Clone();
    private CommentNode get_CurrentComment();
    private ElementNode get_CurrentElement();
    private ProcessingInstructionNode get_CurrentProcessingInstruction();
    public virtual string get_LocalName();
    public virtual string LookupPrefix(string ns);
    private string LookupPrefix(string ns, ElementNode node);
    public virtual bool get_IsEmptyElement();
    public virtual bool IsSamePosition(XPathNavigator other);
    public virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToId(string id);
    public virtual bool MoveToNext();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToParent();
    public virtual bool MoveToPrevious();
    public virtual void MoveToRoot();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual string ToString();
    public virtual string get_Value();
    public WriteState get_WriteState();
}
internal class Microsoft.IdentityModel.Diagnostics.WSFedMessageTraceRecord : TraceRecord {
    internal static string ElementName;
    internal static string _eventId;
    private WSFederationMessage _wsFederationMessage;
    public string EventId { get; }
    public WSFedMessageTraceRecord(WSFederationMessage wsFederationMessage);
    public virtual string get_EventId();
    public virtual void WriteTo(XmlWriter writer);
}
internal static class Microsoft.IdentityModel.DiagnosticUtil : object {
    public static bool IsFatal(Exception exception);
}
internal static class Microsoft.IdentityModel.EmptyReadOnlyCollection`1 : object {
    public static ReadOnlyCollection`1<T> Instance;
    private static EmptyReadOnlyCollection`1();
}
public class Microsoft.IdentityModel.ExceptionMapper : object {
    internal static string SoapSenderFaultCode;
    private Dictionary`2<Type, ConstructorInfo> _exceptionMap;
    public Dictionary`2<Type, ConstructorInfo> ExceptionMap { get; }
    public Dictionary`2<Type, ConstructorInfo> get_ExceptionMap();
    public virtual FaultException FromException(Exception ex);
    public virtual FaultException FromException(Exception ex, string soapNamespace, string trustNamespace);
    public virtual bool HandleSecurityTokenProcessingException(Exception ex);
}
internal enum Microsoft.IdentityModel.EXTENDED_NAME_FORMAT : Enum {
    public int value__;
    public static EXTENDED_NAME_FORMAT NameUnknown;
    public static EXTENDED_NAME_FORMAT NameFullyQualifiedDN;
    public static EXTENDED_NAME_FORMAT NameSamCompatible;
    public static EXTENDED_NAME_FORMAT NameDisplay;
    public static EXTENDED_NAME_FORMAT NameUniqueId;
    public static EXTENDED_NAME_FORMAT NameCanonical;
    public static EXTENDED_NAME_FORMAT NameUserPrincipalName;
    public static EXTENDED_NAME_FORMAT NameCanonicalEx;
    public static EXTENDED_NAME_FORMAT NameServicePrincipalName;
    public static EXTENDED_NAME_FORMAT NameDnsDomainName;
}
internal class Microsoft.IdentityModel.KERB_CERTIFICATE_S4U_LOGON : ValueType {
    internal KERB_LOGON_SUBMIT_TYPE MessageType;
    internal UInt32 Flags;
    internal UNICODE_INTPTR_STRING UserPrincipalName;
    internal UNICODE_INTPTR_STRING DomainName;
    internal UInt32 CertificateLength;
    internal IntPtr Certificate;
    internal static int Size;
    private static KERB_CERTIFICATE_S4U_LOGON();
}
internal enum Microsoft.IdentityModel.KERB_LOGON_SUBMIT_TYPE : Enum {
    public int value__;
    public static KERB_LOGON_SUBMIT_TYPE KerbInteractiveLogon;
    public static KERB_LOGON_SUBMIT_TYPE KerbSmartCardLogon;
    public static KERB_LOGON_SUBMIT_TYPE KerbWorkstationUnlockLogon;
    public static KERB_LOGON_SUBMIT_TYPE KerbSmartCardUnlockLogon;
    public static KERB_LOGON_SUBMIT_TYPE KerbProxyLogon;
    public static KERB_LOGON_SUBMIT_TYPE KerbTicketLogon;
    public static KERB_LOGON_SUBMIT_TYPE KerbTicketUnlockLogon;
    public static KERB_LOGON_SUBMIT_TYPE KerbS4ULogon;
    public static KERB_LOGON_SUBMIT_TYPE KerbCertificateLogon;
    public static KERB_LOGON_SUBMIT_TYPE KerbCertificateS4ULogon;
    public static KERB_LOGON_SUBMIT_TYPE KerbCertificateUnlockLogon;
}
public static class Microsoft.IdentityModel.KeyGenerator : object {
    private static int _maxKeyIterations;
    private static RandomNumberGenerator _random;
    private static KeyGenerator();
    public static Byte[] ComputeCombinedKey(Byte[] requestorEntropy, Byte[] issuerEntropy, int keySizeInBits);
    public static SecurityKeyIdentifier GetSecurityKeyIdentifier(Byte[] secret, EncryptingCredentials wrappingCredentials);
    public static Byte[] GenerateSymmetricKey(int keySizeInBits);
    public static Byte[] GenerateSymmetricKey(int keySizeInBits, Byte[] senderEntropy, Byte[]& receiverEntropy);
    public static Byte[] GenerateDESKey(int keySizeInBits);
    public static Byte[] GenerateDESKey(int keySizeInBits, Byte[] senderEntropy, Byte[]& receiverEntropy);
    private static int ValidateKeySizeInBytes(int keySizeInBits);
}
internal class Microsoft.IdentityModel.LUID : ValueType {
    internal UInt32 LowPart;
    internal UInt32 HighPart;
}
internal class Microsoft.IdentityModel.LUID_AND_ATTRIBUTES : ValueType {
    internal LUID Luid;
    internal UInt32 Attributes;
}
public class Microsoft.IdentityModel.MruSecurityTokenCache : SecurityTokenCache {
    public static int DefaultTokenCacheSize;
    private Dictionary`2<object, CacheEntry> _items;
    private int _maximumSize;
    private CacheEntry _mruEntry;
    private LinkedList`1<object> _mruList;
    private int _sizeAfterPurge;
    private object _syncRoot;
    public int MaximumSize { get; }
    internal Dictionary`2<object, CacheEntry> Items { get; }
    public MruSecurityTokenCache(int maximumSize);
    public MruSecurityTokenCache(int maximumSize, IEqualityComparer`1<object> comparer);
    public MruSecurityTokenCache(int sizeAfterPurge, int maximumSize);
    public MruSecurityTokenCache(int sizeAfterPurge, int maximumSize, IEqualityComparer`1<object> comparer);
    public int get_MaximumSize();
    public virtual void ClearEntries();
    public virtual bool TryRemoveEntry(object key);
    public virtual bool TryRemoveAllEntries(object key);
    public virtual bool TryAddEntry(object key, SecurityToken value);
    public virtual bool TryGetEntry(object key, SecurityToken& value);
    public virtual bool TryGetAllEntries(object key, IList`1& tokens);
    public virtual bool TryReplaceEntry(object key, SecurityToken newValue);
    internal Dictionary`2<object, CacheEntry> get_Items();
    private void Add(object key, SecurityToken value);
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class Microsoft.IdentityModel.NativeMethods : object {
    private static string ADVAPI32;
    private static string KERNEL32;
    private static string SECUR32;
    internal static UInt32 STATUS_ACCOUNT_RESTRICTION;
    internal static UInt32 KERB_CERTIFICATE_S4U_LOGON_FLAG_CHECK_LOGONHOURS;
    internal static int ERROR_ACCESS_DENIED;
    internal static int ERROR_BAD_LENGTH;
    internal static int ERROR_INSUFFICIENT_BUFFER;
    internal static UInt32 SE_GROUP_ENABLED;
    internal static UInt32 SE_GROUP_USE_FOR_DENY_ONLY;
    internal static UInt32 SE_GROUP_LOGON_ID;
    internal static Byte[] LsaSourceName;
    internal static Byte[] LsaKerberosName;
    private static NativeMethods();
    private static Byte[] GetLsaName(string name);
    internal static bool LogonUser(string lpszUserName, string lpszDomain, string lpszPassword, UInt32 dwLogonType, UInt32 dwLogonProvider, SafeCloseHandle& phToken);
    internal static bool GetTokenInformation(IntPtr tokenHandle, UInt32 tokenInformationClass, SafeHGlobalHandle tokenInformation, UInt32 tokenInformationLength, UInt32& returnLength);
    internal static bool LookupPrivilegeValueW(string lpSystemName, string lpName, LUID& Luid);
    [ReliabilityContractAttribute("3", "2")]
internal static bool AdjustTokenPrivileges(SafeCloseHandle tokenHandle, bool disableAllPrivileges, TOKEN_PRIVILEGE& newState, UInt32 bufferLength, TOKEN_PRIVILEGE& previousState, UInt32& returnLength);
    [ReliabilityContractAttribute("3", "2")]
internal static bool RevertToSelf();
    internal static bool OpenProcessToken(IntPtr processToken, TokenAccessLevels desiredAccess, SafeCloseHandle& tokenHandle);
    internal static bool OpenThreadToken(IntPtr threadHandle, TokenAccessLevels desiredAccess, bool openAsSelf, SafeCloseHandle& tokenHandle);
    internal static IntPtr GetCurrentProcess();
    internal static IntPtr GetCurrentThread();
    internal static bool DuplicateTokenEx(SafeCloseHandle existingTokenHandle, TokenAccessLevels desiredAccess, IntPtr tokenAttributes, SECURITY_IMPERSONATION_LEVEL impersonationLevel, TokenType tokenType, SafeCloseHandle& duplicateTokenHandle);
    [ReliabilityContractAttribute("3", "2")]
internal static bool SetThreadToken(IntPtr threadHandle, SafeCloseHandle threadToken);
    internal static int LsaRegisterLogonProcess(UNICODE_INTPTR_STRING& logonProcessName, SafeLsaLogonProcessHandle& lsaHandle, IntPtr& securityMode);
    internal static int LsaConnectUntrusted(SafeLsaLogonProcessHandle& lsaHandle);
    internal static int LsaNtStatusToWinError(int status);
    internal static int LsaLookupAuthenticationPackage(SafeLsaLogonProcessHandle lsaHandle, UNICODE_INTPTR_STRING& packageName, UInt32& authenticationPackage);
    internal static bool AllocateLocallyUniqueId(LUID& Luid);
    [ReliabilityContractAttribute("3", "2")]
internal static int LsaFreeReturnBuffer(IntPtr handle);
    internal static int LsaLogonUser(SafeLsaLogonProcessHandle LsaHandle, UNICODE_INTPTR_STRING& OriginName, SecurityLogonType LogonType, UInt32 AuthenticationPackage, IntPtr AuthenticationInformation, UInt32 AuthenticationInformationLength, IntPtr LocalGroups, TOKEN_SOURCE& SourceContext, SafeLsaReturnBufferHandle& ProfileBuffer, UInt32& ProfileBufferLength, LUID& LogonId, SafeCloseHandle& Token, QUOTA_LIMITS& Quotas, Int32& SubStatus);
    [ReliabilityContractAttribute("3", "2")]
internal static int LsaDeregisterLogonProcess(IntPtr handle);
    internal static bool TranslateName(string input, EXTENDED_NAME_FORMAT inputFormat, EXTENDED_NAME_FORMAT outputFormat, StringBuilder outputString, UInt32& size);
    internal static bool ImpersonateAnonymousToken(IntPtr threadHandle);
    internal static bool SetThreadToken(IntPtr pThreadHandle, IntPtr token);
}
public abstract class Microsoft.IdentityModel.OpenObject : object {
    private Dictionary`2<string, object> _properties;
    public Dictionary`2<string, object> Properties { get; }
    public Dictionary`2<string, object> get_Properties();
}
internal class Microsoft.IdentityModel.Privilege : object {
    public static string SeAuditPrivilege;
    public static string SeTcbPrivilege;
    private static UInt32 SE_PRIVILEGE_DISABLED;
    private static UInt32 SE_PRIVILEGE_ENABLED_BY_DEFAULT;
    private static UInt32 SE_PRIVILEGE_ENABLED;
    private static UInt32 SE_PRIVILEGE_USED_FOR_ACCESS;
    private static int ERROR_SUCCESS;
    private static int ERROR_NO_TOKEN;
    private static int ERROR_NOT_ALL_ASSIGNED;
    private static Dictionary`2<string, LUID> _luids;
    private string _privilege;
    private LUID _luid;
    private bool _needToRevert;
    private bool _initialEnabled;
    private bool _isImpersonating;
    private SafeCloseHandle _threadToken;
    public Privilege(string privilege);
    private static Privilege();
    public void Enable();
    [ReliabilityContractAttribute("3", "2")]
public int Revert();
    private SafeCloseHandle GetThreadToken();
    private void EnableTokenPrivilege(SafeCloseHandle threadToken);
    private void SetThreadToken(SafeCloseHandle threadToken);
    private static LUID LuidFromPrivilege(string privilege);
}
public static class Microsoft.IdentityModel.ProductConstants : object {
    public static string Prefix;
    public static string NamespaceUri;
    public static string ClaimValueTypeSerializationPrefix;
    public static string ClaimValueTypeSerializationPrefixWithColon;
}
public class Microsoft.IdentityModel.Protocols.FederationException : Exception {
    public FederationException(string message);
    public FederationException(string message, Exception inner);
    protected FederationException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.IdentityModel.Protocols.RequestFaultException : FaultException {
    protected RequestFaultException(FaultReason reason, FaultCode code);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.AlreadySignedInFaultException : RequestFaultException {
    public AlreadySignedInFaultException(string soapNamespace);
    public AlreadySignedInFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.AttributeRequestMessage : WSFederationMessage {
    public string Attribute { get; public set; }
    public string AttributePtr { get; public set; }
    public string Reply { get; public set; }
    public string Result { get; public set; }
    public string ResultPtr { get; public set; }
    public AttributeRequestMessage(Uri baseUrl);
    public string get_Attribute();
    public void set_Attribute(string value);
    public string get_AttributePtr();
    public void set_AttributePtr(string value);
    public string get_Reply();
    public void set_Reply(string value);
    public string get_Result();
    public void set_Result(string value);
    public string get_ResultPtr();
    public void set_ResultPtr(string value);
    protected virtual void Validate();
    public virtual void Write(TextWriter writer);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.IssuerNameNotSupportedFaultException : RequestFaultException {
    public IssuerNameNotSupportedFaultException(string soapNamespace);
    public IssuerNameNotSupportedFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.ApplicationServiceDescriptor : WebServiceDescriptor {
    private Collection`1<EndpointAddress> _endpoints;
    private Collection`1<EndpointAddress> _passiveRequestorEndpoints;
    public ICollection`1<EndpointAddress> Endpoints { get; }
    public ICollection`1<EndpointAddress> PassiveRequestorEndpoints { get; }
    public ICollection`1<EndpointAddress> get_Endpoints();
    public ICollection`1<EndpointAddress> get_PassiveRequestorEndpoints();
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.ContactPerson : object {
    private ContactType _type;
    private string _company;
    private string _givenName;
    private string _surname;
    private Collection`1<string> _emailAddresses;
    private Collection`1<string> _telephoneNumbers;
    public string Company { get; public set; }
    public ICollection`1<string> EmailAddresses { get; }
    public string GivenName { get; public set; }
    public string Surname { get; public set; }
    public ICollection`1<string> TelephoneNumbers { get; }
    public ContactType Type { get; public set; }
    public ContactPerson(ContactType contactType);
    public string get_Company();
    public void set_Company(string value);
    public ICollection`1<string> get_EmailAddresses();
    public string get_GivenName();
    public void set_GivenName(string value);
    public string get_Surname();
    public void set_Surname(string value);
    public ICollection`1<string> get_TelephoneNumbers();
    public ContactType get_Type();
    public void set_Type(ContactType value);
}
public enum Microsoft.IdentityModel.Protocols.WSFederation.Metadata.ContactType : Enum {
    public int value__;
    public static ContactType Unspecified;
    public static ContactType Technical;
    public static ContactType Support;
    public static ContactType Administrative;
    public static ContactType Billing;
    public static ContactType Other;
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.EncryptionMethod : object {
    private Uri _algorithm;
    public Uri Algorithm { get; public set; }
    public EncryptionMethod(Uri algorithm);
    public Uri get_Algorithm();
    public void set_Algorithm(Uri value);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.EntitiesDescriptor : MetadataBase {
    private Collection`1<EntitiesDescriptor> _entityGroupCollection;
    private Collection`1<EntityDescriptor> _entityCollection;
    private string _name;
    public ICollection`1<EntityDescriptor> ChildEntities { get; }
    public ICollection`1<EntitiesDescriptor> ChildEntityGroups { get; }
    public string Name { get; public set; }
    public EntitiesDescriptor(Collection`1<EntitiesDescriptor> entityGroupList);
    public EntitiesDescriptor(Collection`1<EntityDescriptor> entityList);
    public EntitiesDescriptor(Collection`1<EntityDescriptor> entityList, Collection`1<EntitiesDescriptor> entityGroupList);
    public ICollection`1<EntityDescriptor> get_ChildEntities();
    public ICollection`1<EntitiesDescriptor> get_ChildEntityGroups();
    public string get_Name();
    public void set_Name(string value);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.EntityDescriptor : MetadataBase {
    private Collection`1<ContactPerson> _contacts;
    private EntityId _entityId;
    private string _federationId;
    private Organization _organization;
    private Collection`1<RoleDescriptor> _roleDescriptors;
    public ICollection`1<ContactPerson> Contacts { get; }
    public EntityId EntityId { get; public set; }
    public string FederationId { get; public set; }
    public Organization Organization { get; public set; }
    public ICollection`1<RoleDescriptor> RoleDescriptors { get; }
    public EntityDescriptor(EntityId entityId);
    public ICollection`1<ContactPerson> get_Contacts();
    public EntityId get_EntityId();
    public void set_EntityId(EntityId value);
    public string get_FederationId();
    public void set_FederationId(string value);
    public Organization get_Organization();
    public void set_Organization(Organization value);
    public ICollection`1<RoleDescriptor> get_RoleDescriptors();
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.EntityId : object {
    private static int MaximumLength;
    private string _id;
    public string Id { get; public set; }
    public EntityId(string id);
    public string get_Id();
    public void set_Id(string value);
}
public static class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.FederationMetadataConstants : object {
    public static string Namespace;
    public static string Prefix;
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.IdentityProviderSingleSignOnDescriptor : SingleSignOnDescriptor {
    private bool _wantAuthenticationRequestsSigned;
    private Collection`1<ProtocolEndpoint> _singleSignOnServices;
    private Collection`1<Saml2Attribute> _supportedAttributes;
    public ICollection`1<ProtocolEndpoint> SingleSignOnServices { get; }
    public ICollection`1<Saml2Attribute> SupportedAttributes { get; }
    public bool WantAuthenticationRequestsSigned { get; public set; }
    public ICollection`1<ProtocolEndpoint> get_SingleSignOnServices();
    public ICollection`1<Saml2Attribute> get_SupportedAttributes();
    public bool get_WantAuthenticationRequestsSigned();
    public void set_WantAuthenticationRequestsSigned(bool value);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.IndexedProtocolEndpoint : ProtocolEndpoint {
    private int _index;
    private Nullable`1<bool> _isDefault;
    public int Index { get; public set; }
    public Nullable`1<bool> IsDefault { get; public set; }
    public IndexedProtocolEndpoint(int index, Uri binding, Uri location);
    public int get_Index();
    public void set_Index(int value);
    public Nullable`1<bool> get_IsDefault();
    public void set_IsDefault(Nullable`1<bool> value);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.IndexedProtocolEndpointDictionary : SortedList`2<int, IndexedProtocolEndpoint> {
    public IndexedProtocolEndpoint Default { get; }
    public IndexedProtocolEndpoint get_Default();
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.KeyDescriptor : object {
    private SecurityKeyIdentifier _ski;
    private KeyType _use;
    private Collection`1<EncryptionMethod> _encryptionMethods;
    public SecurityKeyIdentifier KeyInfo { get; public set; }
    public KeyType Use { get; public set; }
    public ICollection`1<EncryptionMethod> EncryptionMethods { get; }
    public KeyDescriptor(SecurityKeyIdentifier ski);
    public SecurityKeyIdentifier get_KeyInfo();
    public void set_KeyInfo(SecurityKeyIdentifier value);
    public KeyType get_Use();
    public void set_Use(KeyType value);
    public ICollection`1<EncryptionMethod> get_EncryptionMethods();
}
public enum Microsoft.IdentityModel.Protocols.WSFederation.Metadata.KeyType : Enum {
    public int value__;
    public static KeyType Unspecified;
    public static KeyType Signing;
    public static KeyType Encryption;
}
public abstract class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.LocalizedEntry : object {
    private CultureInfo _language;
    public CultureInfo Language { get; public set; }
    protected LocalizedEntry(CultureInfo language);
    public CultureInfo get_Language();
    public void set_Language(CultureInfo value);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.LocalizedEntryCollection`1 : KeyedCollection`2<CultureInfo, T> {
    protected virtual CultureInfo GetKeyForItem(T item);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.LocalizedName : LocalizedEntry {
    private string _name;
    public string Name { get; public set; }
    public LocalizedName(string name, CultureInfo language);
    public string get_Name();
    public void set_Name(string value);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.LocalizedUri : LocalizedEntry {
    private Uri _uri;
    public Uri Uri { get; public set; }
    public LocalizedUri(Uri uri, CultureInfo language);
    public Uri get_Uri();
    public void set_Uri(Uri value);
}
public abstract class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.MetadataBase : object {
    private SigningCredentials _signingCredentials;
    public SigningCredentials SigningCredentials { get; public set; }
    public SigningCredentials get_SigningCredentials();
    public void set_SigningCredentials(SigningCredentials value);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.MetadataSerializationException : Exception {
    public MetadataSerializationException(string message);
    public MetadataSerializationException(string message, Exception innerException);
    protected MetadataSerializationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.MetadataSerializer : object {
    public static string LanguagePrefix;
    public static string LanguageLocalname;
    public static string LanguageAttribute;
    public static string LanguageNamespaceUri;
    private static string _uriReference;
    private SecurityTokenSerializer _tokenSerializer;
    public SecurityTokenSerializer SecurityTokenSerializer { get; }
    public MetadataSerializer(SecurityTokenSerializer tokenSerializer);
    protected virtual ApplicationServiceDescriptor CreateApplicationServiceInstance();
    protected virtual ContactPerson CreateContactPersonInstance();
    protected virtual ProtocolEndpoint CreateProtocolEndpointInstance();
    protected virtual EntitiesDescriptor CreateEntitiesDescriptorInstance();
    protected virtual EntityDescriptor CreateEntityDescriptorInstance();
    protected virtual IdentityProviderSingleSignOnDescriptor CreateIdentityProviderSingleSignOnDescriptorInstance();
    protected virtual IndexedProtocolEndpoint CreateIndexedProtocolEndpointInstance();
    protected virtual KeyDescriptor CreateKeyDescriptorInstance();
    protected virtual LocalizedName CreateLocalizedNameInstance();
    protected virtual LocalizedUri CreateLocalizedUriInstance();
    protected virtual Organization CreateOrganizationInstance();
    protected virtual SecurityTokenServiceDescriptor CreateSecurityTokenServiceDescriptorInstance();
    protected virtual ServiceProviderSingleSignOnDescriptor CreateServiceProviderSingleSignOnDescriptorInstance();
    protected virtual AddressingVersion GetAddressingVersion(string namespaceUri);
    private static ContactType GetContactPersonType(string conactType, Boolean& found);
    private static KeyType GetKeyDescriptorType(string keyType);
    protected virtual ApplicationServiceDescriptor ReadApplicationServiceDescriptor(XmlReader reader);
    protected virtual ContactPerson ReadContactPerson(XmlReader reader);
    protected virtual void ReadCustomAttributes(XmlReader reader, T target);
    protected virtual bool ReadCustomElement(XmlReader reader, T target);
    protected virtual void ReadCustomRoleDescriptor(string xsiType, XmlReader reader, EntityDescriptor entityDescriptor);
    protected virtual DisplayClaim ReadDisplayClaim(XmlReader reader);
    protected virtual EntitiesDescriptor ReadEntitiesDescriptor(XmlReader reader, SecurityTokenResolver tokenResolver);
    protected virtual EntityDescriptor ReadEntityDescriptor(XmlReader inputReader, SecurityTokenResolver tokenResolver);
    protected virtual IdentityProviderSingleSignOnDescriptor ReadIdentityProviderSingleSignOnDescriptor(XmlReader reader);
    protected virtual IndexedProtocolEndpoint ReadIndexedProtocolEndpoint(XmlReader reader);
    protected virtual KeyDescriptor ReadKeyDescriptor(XmlReader reader);
    protected virtual LocalizedName ReadLocalizedName(XmlReader reader);
    protected virtual LocalizedUri ReadLocalizedUri(XmlReader reader);
    public MetadataBase ReadMetadata(Stream stream);
    public MetadataBase ReadMetadata(XmlReader reader);
    public MetadataBase ReadMetadata(XmlReader reader, SecurityTokenResolver tokenResolver);
    protected virtual MetadataBase ReadMetadataCore(XmlReader reader, SecurityTokenResolver tokenResolver);
    protected virtual Organization ReadOrganization(XmlReader reader);
    protected virtual ProtocolEndpoint ReadProtocolEndpoint(XmlReader reader);
    protected virtual void ReadRoleDescriptorAttributes(XmlReader reader, RoleDescriptor roleDescriptor);
    protected virtual bool ReadRoleDescriptorElement(XmlReader reader, RoleDescriptor roleDescriptor);
    protected virtual SecurityTokenServiceDescriptor ReadSecurityTokenServiceDescriptor(XmlReader reader);
    protected virtual ServiceProviderSingleSignOnDescriptor ReadServiceProviderSingleSignOnDescriptor(XmlReader reader);
    protected virtual void ReadSingleSignOnDescriptorAttributes(XmlReader reader, SingleSignOnDescriptor roleDescriptor);
    protected virtual bool ReadSingleSignOnDescriptorElement(XmlReader reader, SingleSignOnDescriptor ssoDescriptor);
    protected virtual void ReadWebServiceDescriptorAttributes(XmlReader reader, WebServiceDescriptor roleDescriptor);
    public virtual bool ReadWebServiceDescriptorElement(XmlReader reader, WebServiceDescriptor roleDescriptor);
    public SecurityTokenSerializer get_SecurityTokenSerializer();
    protected virtual void WriteApplicationServiceDescriptor(XmlWriter writer, ApplicationServiceDescriptor appService);
    protected virtual void WriteContactPerson(XmlWriter writer, ContactPerson contactPerson);
    protected virtual void WriteCustomAttributes(XmlWriter writer, T source);
    protected virtual void WriteCustomElements(XmlWriter writer, T source);
    protected virtual void WriteProtocolEndpoint(XmlWriter writer, ProtocolEndpoint endpoint, XmlQualifiedName element);
    protected virtual void WriteDisplayClaim(XmlWriter writer, DisplayClaim claim);
    protected virtual void WriteEntitiesDescriptor(XmlWriter inputWriter, EntitiesDescriptor entitiesDescriptor);
    protected virtual void WriteEntityDescriptor(XmlWriter inputWriter, EntityDescriptor entityDescriptor);
    protected virtual void WriteIdentityProviderSingleSignOnDescriptor(XmlWriter writer, IdentityProviderSingleSignOnDescriptor idpssoDescriptor);
    protected virtual void WriteIndexedProtocolEndpoint(XmlWriter writer, IndexedProtocolEndpoint indexedEP, XmlQualifiedName element);
    protected virtual void WriteKeyDescriptor(XmlWriter writer, KeyDescriptor keyDescriptor);
    protected virtual void WriteLocalizedName(XmlWriter writer, LocalizedName name, XmlQualifiedName element);
    protected virtual void WriteLocalizedUri(XmlWriter writer, LocalizedUri uri, XmlQualifiedName element);
    public void WriteMetadata(Stream stream, MetadataBase metadata);
    public void WriteMetadata(XmlWriter writer, MetadataBase metadata);
    protected virtual void WriteMetadataCore(XmlWriter writer, MetadataBase metadataBase);
    protected virtual void WriteOrganization(XmlWriter writer, Organization organization);
    protected virtual void WriteRoleDescriptorAttributes(XmlWriter writer, RoleDescriptor roleDescriptor);
    protected virtual void WriteRoleDescriptorElements(XmlWriter writer, RoleDescriptor roleDescriptor);
    protected virtual void WriteSecurityTokenServiceDescriptor(XmlWriter writer, SecurityTokenServiceDescriptor securityTokenServiceDescriptor);
    protected virtual void WriteServiceProviderSingleSignOnDescriptor(XmlWriter writer, ServiceProviderSingleSignOnDescriptor spssoDescriptor);
    protected virtual void WriteSingleSignOnDescriptorAttributes(XmlWriter writer, SingleSignOnDescriptor ssoDescriptor);
    protected virtual void WriteSingleSignOnDescriptorElements(XmlWriter writer, SingleSignOnDescriptor ssoDescriptor);
    protected virtual void WriteWebServiceDescriptorAttributes(XmlWriter writer, WebServiceDescriptor wsDescriptor);
    protected virtual void WriteWebServiceDescriptorElements(XmlWriter writer, WebServiceDescriptor wsDescriptor);
    protected virtual Saml2Attribute ReadAttribute(XmlReader reader);
    protected virtual void WriteAttribute(XmlWriter writer, Saml2Attribute data);
    private static Exception TryWrapReadException(XmlReader reader, Exception inner);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.Organization : object {
    private LocalizedEntryCollection`1<LocalizedName> _displayNames;
    private LocalizedEntryCollection`1<LocalizedName> _names;
    private LocalizedEntryCollection`1<LocalizedUri> _urls;
    public LocalizedEntryCollection`1<LocalizedName> DisplayNames { get; }
    public LocalizedEntryCollection`1<LocalizedName> Names { get; }
    public LocalizedEntryCollection`1<LocalizedUri> Urls { get; }
    public Organization(LocalizedEntryCollection`1<LocalizedName> names, LocalizedEntryCollection`1<LocalizedName> displayNames, LocalizedEntryCollection`1<LocalizedUri> urls);
    public LocalizedEntryCollection`1<LocalizedName> get_DisplayNames();
    public LocalizedEntryCollection`1<LocalizedName> get_Names();
    public LocalizedEntryCollection`1<LocalizedUri> get_Urls();
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.ProtocolEndpoint : object {
    private Uri _binding;
    private Uri _location;
    private Uri _responseLocation;
    public Uri Binding { get; public set; }
    public Uri Location { get; public set; }
    public Uri ResponseLocation { get; public set; }
    public ProtocolEndpoint(Uri binding, Uri location);
    public Uri get_Binding();
    public void set_Binding(Uri value);
    public Uri get_Location();
    public void set_Location(Uri value);
    public Uri get_ResponseLocation();
    public void set_ResponseLocation(Uri value);
}
public abstract class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.RoleDescriptor : object {
    private Collection`1<ContactPerson> _contacts;
    private Uri _errorUrl;
    private Collection`1<KeyDescriptor> _keys;
    private Organization _organization;
    private Collection`1<Uri> _protocolsSupported;
    private DateTime _validUntil;
    public ICollection`1<ContactPerson> Contacts { get; }
    public Uri ErrorUrl { get; public set; }
    public ICollection`1<KeyDescriptor> Keys { get; }
    public Organization Organization { get; public set; }
    public ICollection`1<Uri> ProtocolsSupported { get; }
    public DateTime ValidUntil { get; public set; }
    protected RoleDescriptor(Collection`1<Uri> protocolsSupported);
    public ICollection`1<ContactPerson> get_Contacts();
    public Uri get_ErrorUrl();
    public void set_ErrorUrl(Uri value);
    public ICollection`1<KeyDescriptor> get_Keys();
    public Organization get_Organization();
    public void set_Organization(Organization value);
    public ICollection`1<Uri> get_ProtocolsSupported();
    public DateTime get_ValidUntil();
    public void set_ValidUntil(DateTime value);
}
public static class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.Saml2MetadataConstants : object {
    public static string Namespace;
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.SecurityTokenServiceDescriptor : WebServiceDescriptor {
    private Collection`1<EndpointAddress> _securityTokenServiceEndpoints;
    private Collection`1<EndpointAddress> _passiveRequestorEndpoints;
    public Collection`1<EndpointAddress> SecurityTokenServiceEndpoints { get; }
    public Collection`1<EndpointAddress> PassiveRequestorEndpoints { get; }
    public Collection`1<EndpointAddress> get_SecurityTokenServiceEndpoints();
    public Collection`1<EndpointAddress> get_PassiveRequestorEndpoints();
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.ServiceProviderSingleSignOnDescriptor : SingleSignOnDescriptor {
    private bool _authenticationRequestsSigned;
    private bool _wantAssertionsSigned;
    private IndexedProtocolEndpointDictionary _assertionConsumingServices;
    public IndexedProtocolEndpointDictionary AssertionConsumerService { get; }
    public bool AuthenticationRequestsSigned { get; public set; }
    public bool WantAssertionsSigned { get; public set; }
    public ServiceProviderSingleSignOnDescriptor(IndexedProtocolEndpointDictionary collection);
    public IndexedProtocolEndpointDictionary get_AssertionConsumerService();
    public bool get_AuthenticationRequestsSigned();
    public void set_AuthenticationRequestsSigned(bool value);
    public bool get_WantAssertionsSigned();
    public void set_WantAssertionsSigned(bool value);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.SingleSignOnDescriptor : RoleDescriptor {
    private IndexedProtocolEndpointDictionary _artifactResolutionServices;
    private Collection`1<ProtocolEndpoint> _singleLogoutServices;
    private Collection`1<Uri> _nameIdFormats;
    public ICollection`1<Uri> NameIdentifierFormats { get; }
    public IndexedProtocolEndpointDictionary ArtifactResolutionServices { get; }
    public Collection`1<ProtocolEndpoint> SingleLogoutServices { get; }
    public ICollection`1<Uri> get_NameIdentifierFormats();
    public IndexedProtocolEndpointDictionary get_ArtifactResolutionServices();
    public Collection`1<ProtocolEndpoint> get_SingleLogoutServices();
}
public abstract class Microsoft.IdentityModel.Protocols.WSFederation.Metadata.WebServiceDescriptor : RoleDescriptor {
    private Collection`1<DisplayClaim> _claimTypesOffered;
    private Collection`1<DisplayClaim> _claimTypesRequested;
    private string _serviceDisplayName;
    private string _serviceDescription;
    private Collection`1<EndpointAddress> _targetScopes;
    private Collection`1<Uri> _tokenTypesOffered;
    public ICollection`1<DisplayClaim> ClaimTypesOffered { get; }
    public ICollection`1<DisplayClaim> ClaimTypesRequested { get; }
    public string ServiceDescription { get; public set; }
    public string ServiceDisplayName { get; public set; }
    public ICollection`1<EndpointAddress> TargetScopes { get; }
    public ICollection`1<Uri> TokenTypesOffered { get; }
    public ICollection`1<DisplayClaim> get_ClaimTypesOffered();
    public ICollection`1<DisplayClaim> get_ClaimTypesRequested();
    public string get_ServiceDescription();
    public void set_ServiceDescription(string value);
    public string get_ServiceDisplayName();
    public void set_ServiceDisplayName(string value);
    public ICollection`1<EndpointAddress> get_TargetScopes();
    public ICollection`1<Uri> get_TokenTypesOffered();
}
public class Microsoft.IdentityModel.Protocols.WSFederation.NeedFresherCredentialsFaultException : RequestFaultException {
    public NeedFresherCredentialsFaultException(string soapNamespace);
    public NeedFresherCredentialsFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.NoMatchInScopeFaultException : RequestFaultException {
    public NoMatchInScopeFaultException(string soapNamespace);
    public NoMatchInScopeFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.NoPseudonymInScopeFaultException : RequestFaultException {
    public NoPseudonymInScopeFaultException(string soapNamespace);
    public NoPseudonymInScopeFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.NotSignedInFaultException : RequestFaultException {
    public NotSignedInFaultException(string soapNamespace);
    public NotSignedInFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.PseudonymRequestMessage : WSFederationMessage {
    public string Pseudonym { get; public set; }
    public string PseudonymPtr { get; public set; }
    public string Reply { get; public set; }
    public string Result { get; public set; }
    public string ResultPtr { get; public set; }
    public PseudonymRequestMessage(Uri baseUrl);
    public string get_Pseudonym();
    public void set_Pseudonym(string value);
    public string get_PseudonymPtr();
    public void set_PseudonymPtr(string value);
    public string get_Reply();
    public void set_Reply(string value);
    public string get_Result();
    public void set_Result(string value);
    public string get_ResultPtr();
    public void set_ResultPtr(string value);
    protected virtual void Validate();
    public virtual void Write(TextWriter writer);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.RstParameterNotAcceptedFaultException : RequestFaultException {
    public RstParameterNotAcceptedFaultException(string soapNamespace);
    public RstParameterNotAcceptedFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.SignInRequestMessage : WSFederationMessage {
    public string RequestUrl { get; }
    public string Federation { get; public set; }
    public string Reply { get; public set; }
    public string CurrentTime { get; public set; }
    public string Freshness { get; public set; }
    public string HomeRealm { get; public set; }
    public string AuthenticationType { get; public set; }
    public string Policy { get; public set; }
    public string Resource { get; public set; }
    public string Realm { get; public set; }
    public string Request { get; public set; }
    public string RequestPtr { get; public set; }
    public SignInRequestMessage(Uri baseUrl, string realm);
    internal SignInRequestMessage(Uri baseUrl);
    public SignInRequestMessage(Uri baseUrl, string realm, string reply);
    public string get_RequestUrl();
    protected virtual void Validate();
    public virtual void Write(TextWriter writer);
    public string get_Federation();
    public void set_Federation(string value);
    public string get_Reply();
    public void set_Reply(string value);
    public string get_CurrentTime();
    public void set_CurrentTime(string value);
    public string get_Freshness();
    public void set_Freshness(string value);
    public string get_HomeRealm();
    public void set_HomeRealm(string value);
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    public string get_Policy();
    public void set_Policy(string value);
    public string get_Resource();
    public void set_Resource(string value);
    public string get_Realm();
    public void set_Realm(string value);
    public string get_Request();
    public void set_Request(string value);
    public string get_RequestPtr();
    public void set_RequestPtr(string value);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.SignInResponseMessage : WSFederationMessage {
    public string Result { get; public set; }
    public string ResultPtr { get; public set; }
    public SignInResponseMessage(Uri baseUrl, string result);
    public SignInResponseMessage(Uri baseUrl, Uri resultPtr);
    public SignInResponseMessage(Uri baseUrl, RequestSecurityTokenResponse response, WSFederationSerializer federationSerializer, WSTrustSerializationContext context);
    protected virtual void Validate();
    public virtual void Write(TextWriter writer);
    public string get_Result();
    public void set_Result(string value);
    public string get_ResultPtr();
    public void set_ResultPtr(string value);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.SignOutCleanupRequestMessage : WSFederationMessage {
    public string Reply { get; public set; }
    public SignOutCleanupRequestMessage(Uri baseUrl);
    public SignOutCleanupRequestMessage(Uri baseUrl, string reply);
    protected virtual void Validate();
    public virtual void Write(TextWriter writer);
    public string get_Reply();
    public void set_Reply(string value);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.SignOutRequestMessage : WSFederationMessage {
    public string Reply { get; public set; }
    public SignOutRequestMessage(Uri baseUrl);
    public SignOutRequestMessage(Uri baseUrl, string reply);
    protected virtual void Validate();
    public virtual void Write(TextWriter writer);
    public string get_Reply();
    public void set_Reply(string value);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.UnsupportedClaimsDialectFaultException : RequestFaultException {
    public UnsupportedClaimsDialectFaultException(string soapNamespace);
    public UnsupportedClaimsDialectFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSFederation.UnsupportedEncodingFaultException : RequestFaultException {
    public UnsupportedEncodingFaultException(string soapNamespace);
    public UnsupportedEncodingFaultException(string soapNamespace, FaultReason reason);
}
public static class Microsoft.IdentityModel.Protocols.WSFederation.WSAuthorizationConstants : object {
    public static string Prefix;
    public static string Namespace;
    public static string Dialect;
    public static string Action;
}
public static class Microsoft.IdentityModel.Protocols.WSFederation.WSFederationConstants : object {
    public static string Namespace;
}
public abstract class Microsoft.IdentityModel.Protocols.WSFederation.WSFederationMessage : object {
    private Dictionary`2<string, string> _parameters;
    private Uri _baseUri;
    public IDictionary`2<string, string> Parameters { get; }
    public string Context { get; public set; }
    public string Encoding { get; public set; }
    public string Action { get; public set; }
    public Uri BaseUri { get; public set; }
    protected WSFederationMessage(Uri baseUrl, string action);
    public IDictionary`2<string, string> get_Parameters();
    public static WSFederationMessage CreateFromUri(Uri requestUri);
    public static bool TryCreateFromUri(Uri requestUri, WSFederationMessage& fedMsg);
    public static WSFederationMessage CreateFromFormPost(HttpRequest request);
    public string get_Context();
    public void set_Context(string value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public string get_Action();
    public void set_Action(string value);
    public Uri get_BaseUri();
    public void set_BaseUri(Uri value);
    protected virtual void Validate();
    public abstract virtual void Write(TextWriter writer);
    public static WSFederationMessage CreateFromNameValueCollection(Uri baseUrl, NameValueCollection collection);
    private static void PopulateMessage(WSFederationMessage message, NameValueCollection collection);
    public static NameValueCollection ParseQueryString(Uri data);
    public string GetParameter(string parameter);
    public void SetParameter(string parameter, string value);
    public void SetUriParameter(string parameter, string value);
    public void RemoveParameter(string parameter);
    public static Uri GetBaseUrl(Uri uri);
    public virtual string WriteQueryString();
    public virtual string WriteFormPost();
}
public class Microsoft.IdentityModel.Protocols.WSFederation.WSFederationMessageException : Exception {
    public WSFederationMessageException(string message);
    public WSFederationMessageException(string message, Exception inner);
    protected WSFederationMessageException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.IdentityModel.Protocols.WSFederation.WSFederationMetadataConstants : object {
    public static string Namespace;
    public static string Prefix;
    public static string WSTransferAction;
    public static string WSTransferResponseAction;
    public static string FederationMetadataHandler;
}
public class Microsoft.IdentityModel.Protocols.WSFederation.WSFederationSerializer : object {
    private WSTrustRequestSerializer _requestSerializer;
    private WSTrustResponseSerializer _responseSerializer;
    public WSFederationSerializer(XmlDictionaryReader reader);
    public WSFederationSerializer(WSTrustRequestSerializer requestSerializer, WSTrustResponseSerializer responseSerializer);
    public virtual RequestSecurityToken CreateRequest(WSFederationMessage message, WSTrustSerializationContext context);
    public virtual RequestSecurityTokenResponse CreateResponse(WSFederationMessage message, WSTrustSerializationContext context);
    public virtual string GetReferencedRequest(string wreqptr);
    public virtual string GetReferencedResult(string wresultptr);
    public virtual string GetRequestAsString(RequestSecurityToken request, WSTrustSerializationContext context);
    public virtual string GetResponseAsString(RequestSecurityTokenResponse response, WSTrustSerializationContext context);
    public virtual bool CanReadRequest(string trustMessage);
    public virtual bool CanReadResponse(string trustMessage);
}
public enum Microsoft.IdentityModel.Protocols.WSIdentity.AppliesToOption : Enum {
    public int value__;
    public static AppliesToOption NotAllowed;
    public static AppliesToOption Required;
    public static AppliesToOption Optional;
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.CardImage : object {
    private Byte[] _image;
    private string _mimeType;
    public Bitmap BitmapImage { get; }
    public string MimeType { get; }
    public CardImage(Byte[] image, string mimeType);
    public CardImage(string fileName);
    public static CardImage CreateFromByteArray(Byte[] image);
    public static CardImage CreateFromImage(Image image);
    public Bitmap get_BitmapImage();
    private static string GetMimeType(ImageFormat format);
    public Byte[] GetImage();
    private void InitializeFromImage(Image bitmapImage);
    internal static bool IsValidMimeType(string mimeType);
    private static bool IsSupportedImageFormat(ImageFormat format);
    public string get_MimeType();
}
public enum Microsoft.IdentityModel.Protocols.WSIdentity.CardSignatureFormatType : Enum {
    public int value__;
    public static CardSignatureFormatType None;
    public static CardSignatureFormatType Enveloping;
    public static CardSignatureFormatType Enveloped;
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.DisplayClaim : object {
    private static Dictionary`2<string, string> _claimDescriptionMap;
    private static Dictionary`2<string, string> _claimTagMap;
    private string _claimType;
    private string _displayTag;
    private string _displayValue;
    private string _description;
    private bool _optional;
    public string ClaimType { get; }
    public string DisplayTag { get; public set; }
    public string DisplayValue { get; public set; }
    public string Description { get; public set; }
    public bool Optional { get; public set; }
    public DisplayClaim(string claimType);
    public DisplayClaim(string claimType, string displayTag, string description);
    public DisplayClaim(string claimType, string displayTag, string description, string displayValue);
    public DisplayClaim(string claimType, string displayTag, string description, string displayValue, bool optional);
    private static DisplayClaim();
    private static Dictionary`2<string, string> PopulateClaimTagMap();
    private static Dictionary`2<string, string> PopulateClaimDescriptionMap();
    private static string ClaimTagForClaimType(string claimType);
    private static string ClaimDescriptionForClaimType(string claimType);
    public static DisplayClaim CreateDisplayClaimFromClaimType(string claimType);
    public string get_ClaimType();
    public string get_DisplayTag();
    public void set_DisplayTag(string value);
    public string get_DisplayValue();
    public void set_DisplayValue(string value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_Optional();
    public void set_Optional(bool value);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.DisplayClaimCollection : Collection`1<DisplayClaim> {
    public DisplayClaimCollection(IEnumerable`1<DisplayClaim> collection);
    public void AddRange(IEnumerable`1<DisplayClaim> collection);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.DisplayToken : object {
    private string _language;
    private DisplayClaimCollection _displayClaims;
    public DisplayClaimCollection DisplayClaims { get; }
    public string Language { get; }
    public DisplayToken(string language, IEnumerable`1<DisplayClaim> displayClaims);
    public DisplayClaimCollection get_DisplayClaims();
    public string get_Language();
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.EkuPolicy : object {
    private Collection`1<Oid> _oids;
    public Collection`1<Oid> Oids { get; }
    public EkuPolicy(IEnumerable`1<Oid> oids);
    public Collection`1<Oid> get_Oids();
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.FailedRequiredClaimsFaultException : RequestFaultException {
    public FailedRequiredClaimsFaultException(string soapNamespace);
    public FailedRequiredClaimsFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.InformationCard : object {
    public static long DefaultCardVersion;
    private Dictionary`2<string, object> _properties;
    private CardImage _cardImage;
    private InformationCardReference _cardReference;
    private Uri _cardType;
    private string _cardName;
    private string _issuer;
    private string _issuerName;
    private PrivacyNotice _privacyNotice;
    private Nullable`1<AppliesToOption> _appliesToOptions;
    private Collection`1<string> _tokenTypeCollections;
    private DisplayClaimCollection _displayClaimCollection;
    private TokenServiceCollection _tokenServiceCollection;
    private Nullable`1<DateTime> _timeExpires;
    private Nullable`1<DateTime> _timeIssued;
    private string _language;
    private SigningCredentials _signingCredentials;
    private Nullable`1<bool> _requireStrongRecipientIdentity;
    private Collection`1<IssuerInformation> _issuerInfo;
    public Nullable`1<AppliesToOption> AppliesToOption { get; public set; }
    public CardImage CardImage { get; public set; }
    public string CardName { get; public set; }
    public Uri CardType { get; public set; }
    public InformationCardReference InformationCardReference { get; public set; }
    public string Issuer { get; public set; }
    public string IssuerName { get; public set; }
    public Collection`1<IssuerInformation> IssuerInformation { get; }
    public string Language { get; public set; }
    public PrivacyNotice PrivacyNotice { get; public set; }
    public Dictionary`2<string, object> Properties { get; }
    public Nullable`1<bool> RequireStrongRecipientIdentity { get; public set; }
    public DisplayClaimCollection SupportedClaimTypeList { get; }
    public Collection`1<string> SupportedTokenTypeList { get; }
    public TokenServiceCollection TokenServiceList { get; }
    public Nullable`1<DateTime> TimeExpires { get; public set; }
    public Nullable`1<DateTime> TimeIssued { get; public set; }
    public SigningCredentials SigningCredentials { get; public set; }
    public InformationCard(string issuer);
    public InformationCard(X509Certificate2 certificate, string issuer);
    public InformationCard(SigningCredentials signingCredentials, string issuer);
    public InformationCard(X509Certificate2 certificate, string issuer, InformationCardReference reference, DateTime timeIssued);
    public InformationCard(SigningCredentials signingCredentials, string issuer, InformationCardReference reference, DateTime timeIssued);
    public Nullable`1<AppliesToOption> get_AppliesToOption();
    public void set_AppliesToOption(Nullable`1<AppliesToOption> value);
    public CardImage get_CardImage();
    public void set_CardImage(CardImage value);
    public string get_CardName();
    public void set_CardName(string value);
    public Uri get_CardType();
    public void set_CardType(Uri value);
    public InformationCardReference get_InformationCardReference();
    public void set_InformationCardReference(InformationCardReference value);
    public string get_Issuer();
    public void set_Issuer(string value);
    public string get_IssuerName();
    public void set_IssuerName(string value);
    public Collection`1<IssuerInformation> get_IssuerInformation();
    public string get_Language();
    public void set_Language(string value);
    public PrivacyNotice get_PrivacyNotice();
    public void set_PrivacyNotice(PrivacyNotice value);
    public Dictionary`2<string, object> get_Properties();
    public Nullable`1<bool> get_RequireStrongRecipientIdentity();
    public void set_RequireStrongRecipientIdentity(Nullable`1<bool> value);
    public DisplayClaimCollection get_SupportedClaimTypeList();
    public Collection`1<string> get_SupportedTokenTypeList();
    public TokenServiceCollection get_TokenServiceList();
    public Nullable`1<DateTime> get_TimeExpires();
    public void set_TimeExpires(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_TimeIssued();
    public void set_TimeIssued(Nullable`1<DateTime> value);
    public SigningCredentials get_SigningCredentials();
    public void set_SigningCredentials(SigningCredentials value);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.InformationCardException : Exception {
    public InformationCardException(string message);
    public InformationCardException(string message, Exception inner);
    protected InformationCardException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.InformationCardReference : object {
    private string _cardId;
    private long _cardVersion;
    public string CardId { get; }
    public long CardVersion { get; public set; }
    public InformationCardReference(string cardId, long cardVersion);
    public string get_CardId();
    public long get_CardVersion();
    public void set_CardVersion(long value);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.InformationCardRefreshRequiredException : Exception {
    public InformationCardRefreshRequiredException(string message);
    public InformationCardRefreshRequiredException(string message, Exception exception);
    protected InformationCardRefreshRequiredException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.InformationCardRefreshRequiredFaultException : RequestFaultException {
    public InformationCardRefreshRequiredFaultException(string soapNamespace);
    public InformationCardRefreshRequiredFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.InformationCardSerializer : object {
    private bool _allowUnknownElements;
    private SecurityTokenSerializer _tokenSerializer;
    private WSTrustConstantsAdapter _trustConstants;
    public bool AllowUnknownElements { get; public set; }
    public SecurityTokenSerializer SecurityTokenSerializer { get; }
    public InformationCardSerializer(SecurityTokenSerializer securityTokenSerializer);
    public bool get_AllowUnknownElements();
    public void set_AllowUnknownElements(bool value);
    public void WriteCard(Stream stream, InformationCard card);
    public void WriteCard(XmlWriter writer, InformationCard card);
    public InformationCard ReadCard(Stream stream);
    public InformationCard ReadCard(XmlReader reader);
    public InformationCard ReadCard(XmlReader reader, SecurityTokenResolver signingTokenResolver);
    public SecurityTokenSerializer get_SecurityTokenSerializer();
    private static void VerifyPPIDValidBase64String(string ppid);
    private static T GetTypedValue(object value, string contextString);
    protected virtual InformationCard CreateCard(string issuer, SigningCredentials signingCredentials);
    protected virtual void ReadAdditionalElements(XmlDictionaryReader reader, InformationCard card);
    protected virtual PrivacyNotice ReadPrivacyNotice(XmlDictionaryReader reader);
    protected virtual DisplayClaimCollection ReadSupportedClaimList(XmlDictionaryReader reader);
    protected virtual TokenServiceCollection ReadTokenServiceList(XmlDictionaryReader reader);
    protected virtual IUserCredential ReadUnrecognizedUserCredential(XmlDictionaryReader reader);
    protected virtual IUserCredential ReadX509UserCredential(XmlDictionaryReader reader);
    protected virtual void WriteAdditionalElements(XmlDictionaryWriter writer, InformationCard card);
    protected virtual void WritePrivacyNotice(XmlDictionaryWriter writer, InformationCard card);
    protected virtual void WriteSupportedClaimTypeList(XmlDictionaryWriter writer, InformationCard card);
    protected virtual void WriteUnrecognizedUserCredential(XmlDictionaryWriter writer, IUserCredential credential);
    protected virtual void WriteX509UserCredential(XmlDictionaryWriter writer, IUserCredential credential);
    protected virtual void WriteTokenServiceList(XmlDictionaryWriter writer, InformationCard card);
    private void WriteCardProperties(XmlDictionaryWriter writer, InformationCard card);
    private void WriteEkuPolicy(XmlDictionaryWriter writer, EkuPolicy ekuPolicy);
    private void WriteUserCredential(XmlDictionaryWriter writer, IUserCredential credential);
    private void WriteX509Principal(XmlDictionaryWriter writer, X509Principal x509Principal);
    private void WriteX509SecurityKeyIdentifierClause(XmlDictionaryWriter writer, SecurityKeyIdentifierClause keyIdentifierClause);
    private void WriteX509SubjectAndIssuer(XmlDictionaryWriter writer, X509SubjectAndIssuer x509SubjectAndIssuer);
    private InformationCard ReadCardProperties(XmlDictionaryReader reader, SigningCredentials signingCredentials);
    private EkuPolicy ReadEkuPolicy(XmlDictionaryReader reader);
    private IUserCredential ReadUserCredential(XmlDictionaryReader reader);
    private X509Principal ReadX509Principal(XmlDictionaryReader reader);
    private SecurityKeyIdentifierClause ReadX509SecurityKeyIdentifierClause(XmlDictionaryReader reader);
    private X509SubjectAndIssuer ReadX509SubjectAndIssuer(XmlDictionaryReader reader);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.InternalErrorException : Exception {
    public InternalErrorException(string message);
    public InternalErrorException(string message, Exception exception);
    protected InternalErrorException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.InternalErrorFaultException : RequestFaultException {
    public InternalErrorFaultException(string soapNamespace);
    public InternalErrorFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.InvalidInputException : Exception {
    public InvalidInputException(string message);
    public InvalidInputException(string message, Exception exception);
    protected InvalidInputException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.InvalidInputFaultException : RequestFaultException {
    public InvalidInputFaultException(string soapNamespace);
    public InvalidInputFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.InvalidProofKeyFaultException : RequestFaultException {
    public InvalidProofKeyFaultException(string soapNamespace);
    public InvalidProofKeyFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.IssuerInformation : object {
    private string _key;
    private string _value;
    public string Key { get; }
    public string Value { get; }
    public IssuerInformation(string key, string value);
    public string get_Key();
    public string get_Value();
}
public interface Microsoft.IdentityModel.Protocols.WSIdentity.IUserCredential {
    public UserCredentialType CredentialType { get; }
    public abstract virtual UserCredentialType get_CredentialType();
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.KerberosCredential : object {
    public UserCredentialType CredentialType { get; }
    public sealed virtual UserCredentialType get_CredentialType();
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.MissingAppliesToFaultException : RequestFaultException {
    public MissingAppliesToFaultException(string soapNamespace);
    public MissingAppliesToFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.PrivacyNotice : object {
    private long _version;
    private string _location;
    public string Location { get; }
    public long Version { get; }
    public PrivacyNotice(string privacyNoticeLocation);
    public PrivacyNotice(string privacyNoticeLocation, long version);
    public string get_Location();
    public long get_Version();
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.RequestInformationCards : object {
    private Uri _cardIdentifier;
    private CardSignatureFormatType _cardSignatureFormat;
    private Uri _cardType;
    private Uri _issuer;
    private SecurityTokenElement _onBehalfOf;
    public Uri CardIdentifier { get; public set; }
    public CardSignatureFormatType CardSignatureFormat { get; public set; }
    public Uri CardType { get; public set; }
    public Uri Issuer { get; public set; }
    public SecurityTokenElement OnBehalfOf { get; public set; }
    public Uri get_CardIdentifier();
    public void set_CardIdentifier(Uri value);
    public CardSignatureFormatType get_CardSignatureFormat();
    public void set_CardSignatureFormat(CardSignatureFormatType value);
    public Uri get_CardType();
    public void set_CardType(Uri value);
    public Uri get_Issuer();
    public void set_Issuer(Uri value);
    public SecurityTokenElement get_OnBehalfOf();
    public void set_OnBehalfOf(SecurityTokenElement value);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.RequestInformationCardsResponse : object {
    private Collection`1<string> _informationCards;
    public Collection`1<string> InformationCards { get; }
    public RequestInformationCardsResponse(IEnumerable`1<string> informationCards);
    public Collection`1<string> get_InformationCards();
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.RequestInformationCardsResponseSerializer : object {
    public virtual RequestInformationCardsResponse ReadXml(XmlReader reader);
    public virtual void WriteXml(Stream stream, RequestInformationCardsResponse response);
    public virtual void WriteXml(XmlWriter writer, RequestInformationCardsResponse response);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.RequestInformationCardsSerializer : object {
    private WSTrustSerializationContext _trustSerializationContext;
    public RequestInformationCardsSerializer(WSTrustSerializationContext trustSerializationContext);
    public virtual RequestInformationCards ReadXml(XmlReader reader);
    public virtual void WriteXml(Stream stream, RequestInformationCards request);
    public virtual void WriteXml(XmlWriter writer, RequestInformationCards request);
    private CardSignatureFormatType ReadCardSignatureFormat(XmlDictionaryReader reader);
    private static Uri ReadElementUri(XmlDictionaryReader reader, string localName, string ns);
    private static XmlElement ReadInnerXml(XmlReader reader);
    private static XmlElement ReadInnerXml(XmlReader reader, bool onStartElement);
    private static void WriteTokenElement(SecurityTokenElement tokenElement, string usage, WSTrustSerializationContext context, XmlWriter writer);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.SelfIssuedCredentials : object {
    private string _ppid;
    public string PPID { get; }
    public UserCredentialType CredentialType { get; }
    public SelfIssuedCredentials(string ppid);
    public string get_PPID();
    public sealed virtual UserCredentialType get_CredentialType();
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.TokenService : object {
    private TokenServiceEndpoint _endpoint;
    private IUserCredential _userCredential;
    private static IUserCredential _defaultUserCredential;
    public static IUserCredential DefaultUserCredential { get; }
    public static UserCredentialType DefaultUserCredentialType { get; }
    internal X509Certificate2Collection Certificates { get; }
    public string DisplayCredentialHint { get; }
    public EndpointAddress Address { get; }
    public MetadataSet MetadataSet { get; }
    public MetadataReference MetadataReference { get; }
    public IUserCredential UserCredential { get; }
    public TokenService(TokenServiceEndpoint endpoint);
    public TokenService(EndpointAddress endpointAddress);
    public TokenService(EndpointAddress endpointAddress, IUserCredential userCredential);
    public TokenService(EndpointAddress endpointAddress, IUserCredential userCredential, string displayCredentialHint);
    public TokenService(TokenServiceEndpoint endpoint, IUserCredential userCredential);
    private static TokenService();
    public static IUserCredential get_DefaultUserCredential();
    public static UserCredentialType get_DefaultUserCredentialType();
    internal X509Certificate2Collection get_Certificates();
    public string get_DisplayCredentialHint();
    public EndpointAddress get_Address();
    public MetadataSet get_MetadataSet();
    public MetadataReference get_MetadataReference();
    public IUserCredential get_UserCredential();
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.TokenServiceCollection : KeyedCollection`2<string, TokenService> {
    public TokenServiceCollection(IEnumerable`1<TokenService> collection);
    public void AddRange(IEnumerable`1<TokenService> collection);
    protected virtual string GetKeyForItem(TokenService item);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.TokenServiceEndpoint : object {
    private EndpointAddress _endpointAddress;
    private UserCredentialType _userCredentialType;
    private string _displayCredentialHint;
    private SecurityKeyIdentifier _encryptingCredentials;
    private MetadataSet _mexSet;
    private MetadataReference _metadataReference;
    private X509Certificate2Collection _certificates;
    internal X509Certificate2Collection Certificates { get; }
    public string DisplayCredentialHint { get; public set; }
    public EndpointAddress Address { get; }
    public MetadataSet MetadataSet { get; }
    public MetadataReference MetadataReference { get; }
    public SecurityKeyIdentifier EncryptingCredentials { get; public set; }
    public UserCredentialType UserCredentialType { get; }
    public TokenServiceEndpoint(string address);
    public TokenServiceEndpoint(EndpointAddress endpointAddress);
    public TokenServiceEndpoint(EndpointAddress endpointAddress, UserCredentialType userCredentialType);
    public TokenServiceEndpoint(EndpointAddress endpointAddress, UserCredentialType userCredentialType, string displayCredentialHint);
    public TokenServiceEndpoint(string address, string mexAddress);
    public TokenServiceEndpoint(string address, string mexAddress, X509Certificate2 certificate);
    public TokenServiceEndpoint(string address, string mexAddress, UserCredentialType userCredentialType);
    public TokenServiceEndpoint(string address, string mexAddress, UserCredentialType userCredentialType, X509Certificate2 certificate);
    public TokenServiceEndpoint(string address, string mexAddress, UserCredentialType userCredentialType, X509Certificate2 certificate, string displayCredentialHint);
    internal X509Certificate2Collection get_Certificates();
    public string get_DisplayCredentialHint();
    public void set_DisplayCredentialHint(string value);
    public EndpointAddress get_Address();
    public MetadataSet get_MetadataSet();
    public MetadataReference get_MetadataReference();
    public SecurityKeyIdentifier get_EncryptingCredentials();
    public void set_EncryptingCredentials(SecurityKeyIdentifier value);
    public UserCredentialType get_UserCredentialType();
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.UnauthorizedRequestException : Exception {
    public UnauthorizedRequestException(string message);
    public UnauthorizedRequestException(string message, Exception exception);
    protected UnauthorizedRequestException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.UnauthorizedRequestFaultException : RequestFaultException {
    public UnauthorizedRequestFaultException(string soapNamespace);
    public UnauthorizedRequestFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.UnknownInformationCardReferenceException : Exception {
    public UnknownInformationCardReferenceException(string message);
    public UnknownInformationCardReferenceException(string message, Exception exception);
    protected UnknownInformationCardReferenceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.UnknownInformationCardReferenceFaultException : RequestFaultException {
    public UnknownInformationCardReferenceFaultException(string soapNamespace);
    public UnknownInformationCardReferenceFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.UnsupportedSignatureFormatException : Exception {
    public UnsupportedSignatureFormatException(string message);
    public UnsupportedSignatureFormatException(string message, Exception exception);
    protected UnsupportedSignatureFormatException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.UnsupportedSignatureFormatFaultException : RequestFaultException {
    public UnsupportedSignatureFormatFaultException(string soapNamespace);
    public UnsupportedSignatureFormatFaultException(string soapNamespace, FaultReason reason);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.UserCredentialCollection : KeyedCollection`2<UserCredentialType, IUserCredential> {
    public UserCredentialCollection(UserNamePasswordCredential userName);
    public UserCredentialCollection(X509CertificateCredential x509Certificate);
    public UserCredentialCollection(SelfIssuedCredentials selfIssuedCredential);
    public UserCredentialCollection(UserNamePasswordCredential userName, X509CertificateCredential x509Certificate, SelfIssuedCredentials selfIssuedCredential);
    public UserCredentialCollection(IEnumerable`1<IUserCredential> collection);
    protected virtual UserCredentialType GetKeyForItem(IUserCredential item);
    public void AddRange(IEnumerable`1<IUserCredential> collection);
}
public enum Microsoft.IdentityModel.Protocols.WSIdentity.UserCredentialType : Enum {
    public int value__;
    public static UserCredentialType None;
    public static UserCredentialType KerberosV5Credential;
    public static UserCredentialType SelfIssuedCredential;
    public static UserCredentialType UserNamePasswordCredential;
    public static UserCredentialType X509V3Credential;
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.UserNamePasswordCredential : object {
    private string _userName;
    public string UserName { get; }
    public UserCredentialType CredentialType { get; }
    public UserNamePasswordCredential(string userName);
    public string get_UserName();
    public sealed virtual UserCredentialType get_CredentialType();
}
public static class Microsoft.IdentityModel.Protocols.WSIdentity.WSIdentity2007Constants : object {
    public static string Namespace;
    public static string Prefix;
    public static int MinEntryNameLength;
    public static int MaxEntryNameLength;
    public static int MinEntryValueLength;
    public static int MaxEntryValueLength;
}
public static class Microsoft.IdentityModel.Protocols.WSIdentity.WSIdentityConstants : object {
    public static string Namespace;
    public static string Prefix;
    public static string OasisNamespace;
    public static string OasisPrefix;
    public static string Dialect;
    public static string InformationCardMimeType;
    public static string AnonymousIssuer;
    public static string SelfIssuer;
    public static string SignatureObjectId;
    public static int MaxCardImageLength;
    public static int MaxCardNameLength;
    public static int MinDescriptionLength;
    public static int MaxDescriptionLength;
    public static int MaxDisplayCredentialsHintLength;
    public static int MinDisplayTagLength;
    public static int MaxDisplayTagLength;
    public static int MaxIssuerNameLength;
    public static int MaxPrivatePersonalIdentifierLength;
    public static int MaxSupportedClaimTypeCount;
    public static int MaxSupportedTokenTypeCount;
    public static int MaxTokenServiceCount;
    public static int MaxUsernameLength;
    public static int MinCardNameLength;
    public static int MinCardVersion;
    public static int MinIssuerNameLength;
    public static long MaxCardVersion;
    public static int MinCardPrivacyNoticeVersion;
    public static long MaxCardPrivacyNoticeVersion;
    public static int FriendlyPPIDLength;
    public static string FriendlyPPIDAlphabets;
    public static char FriendlyPPIDSeparator;
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.X509CertificateCredential : object {
    private SecurityKeyIdentifierClause _x509IdentifierClause;
    private X509Principal _x509Principal;
    private X509SubjectAndIssuer _x509SubjectAndIssuer;
    private string _x509SubjectName;
    public X509Principal X509Principal { get; }
    public SecurityKeyIdentifierClause X509SecurityTokenIdentifierClause { get; }
    public X509SubjectAndIssuer X509SubjectAndIssuer { get; }
    public string X509SubjectName { get; }
    public UserCredentialType CredentialType { get; }
    public X509CertificateCredential(X509Certificate2 certificate);
    public X509CertificateCredential(SecurityKeyIdentifierClause x509IdentifierClause);
    public X509CertificateCredential(X509Principal x509Principal);
    public X509CertificateCredential(X509SubjectAndIssuer x509SubjectAndIssuer);
    public X509CertificateCredential(string x509SubjectName);
    public X509Principal get_X509Principal();
    public SecurityKeyIdentifierClause get_X509SecurityTokenIdentifierClause();
    public X509SubjectAndIssuer get_X509SubjectAndIssuer();
    public string get_X509SubjectName();
    public sealed virtual UserCredentialType get_CredentialType();
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.X509Principal : object {
    private EkuPolicy _ekuPolicy;
    private string _principalName;
    public EkuPolicy EkuPolicy { get; public set; }
    public string PrincipalName { get; public set; }
    public X509Principal(string principalName);
    public X509Principal(string principalName, EkuPolicy ekuPolicy);
    public EkuPolicy get_EkuPolicy();
    public void set_EkuPolicy(EkuPolicy value);
    public string get_PrincipalName();
    public void set_PrincipalName(string value);
}
public class Microsoft.IdentityModel.Protocols.WSIdentity.X509SubjectAndIssuer : object {
    private EkuPolicy _ekuPolicy;
    private string _x509Issuer;
    private string _x509Subject;
    public EkuPolicy EkuPolicy { get; public set; }
    public string X509Issuer { get; public set; }
    public string X509Subject { get; public set; }
    public X509SubjectAndIssuer(string x509Subject, string x509Issuer);
    public X509SubjectAndIssuer(string x509Subject, string x509Issuer, EkuPolicy ekuPolicy);
    public EkuPolicy get_EkuPolicy();
    public void set_EkuPolicy(EkuPolicy value);
    public string get_X509Issuer();
    public void set_X509Issuer(string value);
    public string get_X509Subject();
    public void set_X509Subject(string value);
}
public static class Microsoft.IdentityModel.Protocols.WSMetadataExchangeConstants : object {
    public static string Namespace;
}
public class Microsoft.IdentityModel.Protocols.WSTrust.AuthenticationBadElementsFaultException : RequestFaultException {
    public AuthenticationBadElementsFaultException(string soapNamespace, string trustNamespace);
    public AuthenticationBadElementsFaultException(string soapNamespace, string trustNamespace, FaultReason reason);
    private static string GetFaultSubCodeName(string trustNamespace);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.BadRequestFaultException : RequestFaultException {
    public BadRequestFaultException(string soapNamespace, string trustNamespace);
    public BadRequestFaultException(string soapNamespace, string trustNamespace, FaultReason reason);
    private static string GetFaultSubCodeName(string trustNamespace);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.Bindings.CertificateWSTrustBinding : WSTrustBindingBase {
    public CertificateWSTrustBinding(SecurityMode securityMode);
    protected virtual SecurityBindingElement CreateSecurityBindingElement();
    protected virtual void ApplyTransportSecurity(HttpTransportBindingElement transport);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.Bindings.IssuedTokenWSTrustBinding : WSTrustBindingBase {
    private SecurityKeyType _keyType;
    private SecurityAlgorithmSuite _algorithmSuite;
    private string _tokenType;
    private Binding _issuerBinding;
    private EndpointAddress _issuerAddress;
    private Collection`1<ClaimTypeRequirement> _claimTypeRequirements;
    private EndpointAddress _issuerMetadataAddress;
    public Binding IssuerBinding { get; public set; }
    public EndpointAddress IssuerAddress { get; public set; }
    public EndpointAddress IssuerMetadataAddress { get; public set; }
    public SecurityKeyType KeyType { get; public set; }
    public SecurityAlgorithmSuite AlgorithmSuite { get; public set; }
    public string TokenType { get; public set; }
    public Collection`1<ClaimTypeRequirement> ClaimTypeRequirement { get; }
    public IssuedTokenWSTrustBinding(Binding issuerBinding, EndpointAddress issuerAddress);
    public IssuedTokenWSTrustBinding(Binding issuerBinding, EndpointAddress issuerAddress, EndpointAddress issuerMetadataAddress);
    public IssuedTokenWSTrustBinding(Binding issuerBinding, EndpointAddress issuerAddress, SecurityMode mode, TrustVersion trustVersion, EndpointAddress issuerMetadataAddress);
    public IssuedTokenWSTrustBinding(Binding issuerBinding, EndpointAddress issuerAddress, string tokenType, IEnumerable`1<ClaimTypeRequirement> claimTypeRequirements);
    public IssuedTokenWSTrustBinding(Binding issuerBinding, EndpointAddress issuerAddress, SecurityKeyType keyType, SecurityAlgorithmSuite algorithmSuite, string tokenType, IEnumerable`1<ClaimTypeRequirement> claimTypeRequirements);
    public IssuedTokenWSTrustBinding(Binding issuerBinding, EndpointAddress issuerAddress, SecurityMode mode, TrustVersion version, SecurityKeyType keyType, SecurityAlgorithmSuite algorithmSuite, string tokenType, IEnumerable`1<ClaimTypeRequirement> claimTypeRequirements, EndpointAddress issuerMetadataAddress);
    public Binding get_IssuerBinding();
    public void set_IssuerBinding(Binding value);
    public EndpointAddress get_IssuerAddress();
    public void set_IssuerAddress(EndpointAddress value);
    public EndpointAddress get_IssuerMetadataAddress();
    public void set_IssuerMetadataAddress(EndpointAddress value);
    public SecurityKeyType get_KeyType();
    public void set_KeyType(SecurityKeyType value);
    public SecurityAlgorithmSuite get_AlgorithmSuite();
    public void set_AlgorithmSuite(SecurityAlgorithmSuite value);
    public string get_TokenType();
    public void set_TokenType(string value);
    public Collection`1<ClaimTypeRequirement> get_ClaimTypeRequirement();
    protected virtual SecurityBindingElement CreateSecurityBindingElement();
    private void AddAlgorithmParameters(SecurityAlgorithmSuite algorithmSuite, TrustVersion trustVersion, SecurityKeyType keyType, IssuedSecurityTokenParameters& issuedParameters);
    protected virtual void ApplyTransportSecurity(HttpTransportBindingElement transport);
    private XmlElement CreateSignWithElement(string signatureAlgorithm);
    private XmlElement CreateEncryptionAlgorithmElement(string encryptionAlgorithm);
    private XmlElement CreateCanonicalizationAlgorithmElement(string canonicalizationAlgorithm);
    private XmlElement CreateEncryptWithElement(string encryptionAlgorithm);
    private static XmlElement CreateKeyWrapAlgorithmElement(string keyWrapAlgorithm);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.Bindings.KerberosWSTrustBinding : WSTrustBindingBase {
    public KerberosWSTrustBinding(SecurityMode mode);
    protected virtual SecurityBindingElement CreateSecurityBindingElement();
    protected virtual void ApplyTransportSecurity(HttpTransportBindingElement transport);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.Bindings.UserNameWSTrustBinding : WSTrustBindingBase {
    private HttpClientCredentialType _clientCredentialType;
    public HttpClientCredentialType ClientCredentialType { get; public set; }
    public UserNameWSTrustBinding(SecurityMode securityMode);
    public UserNameWSTrustBinding(SecurityMode mode, HttpClientCredentialType clientCredentialType);
    public HttpClientCredentialType get_ClientCredentialType();
    public void set_ClientCredentialType(HttpClientCredentialType value);
    private static bool IsHttpClientCredentialTypeDefined(HttpClientCredentialType value);
    protected virtual SecurityBindingElement CreateSecurityBindingElement();
    protected virtual void ApplyTransportSecurity(HttpTransportBindingElement transport);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.Bindings.WindowsWSTrustBinding : WSTrustBindingBase {
    public WindowsWSTrustBinding(SecurityMode securityMode);
    protected virtual SecurityBindingElement CreateSecurityBindingElement();
    protected virtual void ApplyTransportSecurity(HttpTransportBindingElement transport);
}
public abstract class Microsoft.IdentityModel.Protocols.WSTrust.Bindings.WSTrustBindingBase : Binding {
    private SecurityMode _securityMode;
    private TrustVersion _trustVersion;
    private bool _enableRsaProofKeys;
    public bool EnableRsaProofKeys { get; public set; }
    public SecurityMode SecurityMode { get; public set; }
    public TrustVersion TrustVersion { get; public set; }
    public string Scheme { get; }
    protected WSTrustBindingBase(SecurityMode securityMode);
    protected WSTrustBindingBase(SecurityMode securityMode, TrustVersion trustVersion);
    public bool get_EnableRsaProofKeys();
    public void set_EnableRsaProofKeys(bool value);
    public SecurityMode get_SecurityMode();
    public void set_SecurityMode(SecurityMode value);
    public TrustVersion get_TrustVersion();
    public void set_TrustVersion(TrustVersion value);
    public virtual string get_Scheme();
    public virtual BindingElementCollection CreateBindingElements();
    protected abstract virtual SecurityBindingElement CreateSecurityBindingElement();
    protected virtual MessageEncodingBindingElement CreateEncodingBindingElement();
    protected static void ValidateSecurityMode(SecurityMode securityMode);
    protected void ValidateTrustVersion(TrustVersion trustVersion);
    protected virtual HttpTransportBindingElement CreateTransportBindingElement();
    protected abstract virtual void ApplyTransportSecurity(HttpTransportBindingElement transport);
    protected virtual SecurityBindingElement ApplyMessageSecurity(SecurityBindingElement securityBindingElement);
}
internal class Microsoft.IdentityModel.Protocols.WSTrust.Bindings.WSTrustBindingConstants : object {
    public static int MaxBinaryContentLength;
    public static long MaxMessageSizeInBytes;
    public static int MaxStringContentLength;
}
[ExtensionAttribute]
public static class Microsoft.IdentityModel.Protocols.WSTrust.ChannelFactoryOperations : object {
    [ExtensionAttribute]
public static T CreateChannelActingAs(ChannelFactory`1<T> factory, SecurityToken actAs);
    [ExtensionAttribute]
public static T CreateChannelActingAs(ChannelFactory`1<T> factory, EndpointAddress address, SecurityToken actAs);
    [ExtensionAttribute]
public static T CreateChannelActingAs(ChannelFactory`1<T> factory, EndpointAddress address, Uri via, SecurityToken actAs);
    [ExtensionAttribute]
public static T CreateChannelOnBehalfOf(ChannelFactory`1<T> factory, SecurityToken onBehalfOf);
    [ExtensionAttribute]
public static T CreateChannelOnBehalfOf(ChannelFactory`1<T> factory, EndpointAddress address, SecurityToken onBehalfOf);
    [ExtensionAttribute]
public static T CreateChannelOnBehalfOf(ChannelFactory`1<T> factory, EndpointAddress address, Uri via, SecurityToken onBehalfOf);
    [ExtensionAttribute]
public static T CreateChannelWithIssuedToken(ChannelFactory`1<T> factory, SecurityToken issuedToken);
    [ExtensionAttribute]
public static T CreateChannelWithIssuedToken(ChannelFactory`1<T> factory, EndpointAddress address, SecurityToken issuedToken);
    [ExtensionAttribute]
public static T CreateChannelWithIssuedToken(ChannelFactory`1<T> factory, EndpointAddress address, Uri via, SecurityToken issuedToken);
    internal static void VerifyChannelFactory(ChannelFactory`1<T> channelFactory);
    public static T CreateChannelWithParameters(ChannelFactory`1<T> factory, FederatedClientCredentialsParameters parameters);
    public static T CreateChannelWithParameters(ChannelFactory`1<T> factory, EndpointAddress address, FederatedClientCredentialsParameters parameters);
    public static T CreateChannelWithParameters(ChannelFactory`1<T> factory, EndpointAddress address, Uri via, FederatedClientCredentialsParameters parameters);
    [ExtensionAttribute]
public static void ConfigureChannelFactory(ChannelFactory`1<T> channelFactory);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.DispatchContext : object {
    private IClaimsPrincipal _principal;
    private string _requestAction;
    private WSTrustMessage _requestMessage;
    private string _responseAction;
    private RequestSecurityTokenResponse _responseMessage;
    private SecurityTokenService _securityTokenService;
    private string _trustNamespace;
    public IClaimsPrincipal Principal { get; public set; }
    public string RequestAction { get; public set; }
    public WSTrustMessage RequestMessage { get; public set; }
    public string ResponseAction { get; public set; }
    public RequestSecurityTokenResponse ResponseMessage { get; public set; }
    public SecurityTokenService SecurityTokenService { get; public set; }
    public string TrustNamespace { get; public set; }
    public IClaimsPrincipal get_Principal();
    public void set_Principal(IClaimsPrincipal value);
    public string get_RequestAction();
    public void set_RequestAction(string value);
    public WSTrustMessage get_RequestMessage();
    public void set_RequestMessage(WSTrustMessage value);
    public string get_ResponseAction();
    public void set_ResponseAction(string value);
    public RequestSecurityTokenResponse get_ResponseMessage();
    public void set_ResponseMessage(RequestSecurityTokenResponse value);
    public SecurityTokenService get_SecurityTokenService();
    public void set_SecurityTokenService(SecurityTokenService value);
    public string get_TrustNamespace();
    public void set_TrustNamespace(string value);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.Entropy : ProtectedKey {
    public Entropy(int entropySizeInBits);
    public Entropy(Byte[] secret);
    public Entropy(Byte[] secret, EncryptingCredentials wrappingCredentials);
    public Entropy(ProtectedKey protectedKey);
    private static Byte[] GetKeyBytesFromProtectedKey(ProtectedKey protectedKey);
    private static EncryptingCredentials GetWrappingCredentialsFromProtectedKey(ProtectedKey protectedKey);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.ExpiredDataFaultException : RequestFaultException {
    public ExpiredDataFaultException(string soapNamespace, string trustNamespace);
    public ExpiredDataFaultException(string soapNamespace, string trustNamespace, FaultReason reason);
    private static string GetFaultSubCodeName(string trustNamespace);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.FailedAuthenticationFaultException : RequestFaultException {
    public FailedAuthenticationFaultException(string soapNamespace, string trustNamespace);
    public FailedAuthenticationFaultException(string soapNamespace, string trustNamespace, FaultReason reason);
    private static string GetFaultSubCodeName(string trustNamespace);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.FederatedClientCredentials : ClientCredentials {
    private SecurityTokenHandlerCollectionManager _securityTokenHandlerCollectionManager;
    public SecurityTokenHandlerCollectionManager SecurityTokenHandlerCollectionManager { get; }
    public FederatedClientCredentials(SecurityTokenHandlerCollectionManager securityTokenHandlerCollectionManager);
    public FederatedClientCredentials(ClientCredentials other);
    public FederatedClientCredentials(ClientCredentials other, SecurityTokenHandlerCollectionManager securityTokenHandlerCollectionManager);
    public SecurityTokenHandlerCollectionManager get_SecurityTokenHandlerCollectionManager();
    protected virtual ClientCredentials CloneCore();
    public virtual SecurityTokenManager CreateSecurityTokenManager();
    private static SecurityTokenHandlerCollectionManager GetSecurityTokenHandlerCollectionManagerForCredentials(ClientCredentials other);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.FederatedClientCredentialsParameters : object {
    private SecurityToken _actAs;
    private SecurityToken _onBehalfOf;
    private SecurityToken _issuedSecurityToken;
    public SecurityToken ActAs { get; public set; }
    public SecurityToken OnBehalfOf { get; public set; }
    public SecurityToken IssuedSecurityToken { get; public set; }
    public SecurityToken get_ActAs();
    public void set_ActAs(SecurityToken value);
    public SecurityToken get_OnBehalfOf();
    public void set_OnBehalfOf(SecurityToken value);
    public SecurityToken get_IssuedSecurityToken();
    public void set_IssuedSecurityToken(SecurityToken value);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.FederatedClientCredentialsSecurityTokenManager : ClientCredentialsSecurityTokenManager {
    private FederatedClientCredentials _federatedClientCredentials;
    public FederatedClientCredentialsSecurityTokenManager(FederatedClientCredentials federatedClientCredentials);
    public virtual SecurityTokenProvider CreateSecurityTokenProvider(SecurityTokenRequirement tokenRequirement);
    public virtual SecurityTokenSerializer CreateSecurityTokenSerializer(SecurityTokenVersion version);
    internal static FederatedClientCredentialsParameters FindIssuedTokenClientCredentialsParameters(SecurityTokenRequirement tokenRequirement);
    internal static bool IsNegoOrSCTIssuedToken(SecurityTokenRequirement tokenRequirement);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.FederatedSecurityTokenProvider : IssuedSecurityTokenProvider {
    private FederatedClientCredentialsParameters _additionalParameters;
    private SecurityTokenHandlerCollectionManager _securityTokenHandlerCollectionManager;
    internal FederatedClientCredentialsParameters AdditionalParameters { get; internal set; }
    public FederatedSecurityTokenProvider(FederatedClientCredentialsParameters federatedClientCredentialsParameters, IssuedSecurityTokenProvider federatedSecurityTokenProvider);
    public FederatedSecurityTokenProvider(FederatedClientCredentialsParameters federatedClientCredentialsParameters, IssuedSecurityTokenProvider federatedSecurityTokenProvider, SecurityTokenHandlerCollectionManager securityTokenHandlerCollectionManager);
    internal FederatedClientCredentialsParameters get_AdditionalParameters();
    internal void set_AdditionalParameters(FederatedClientCredentialsParameters value);
    internal void CloneBase(IssuedSecurityTokenProvider issuedSecurityTokenProvider);
    protected virtual IAsyncResult BeginGetTokenCore(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual SecurityToken GetTokenCore(TimeSpan timeout);
    private void SetupParameters();
    private bool TokenRequestParameterExists(string localName, string xmlNamespace);
    private XmlElement CreateXmlTokenElement(SecurityToken token, string prefix, string name, string ns, string usage);
    private void WriteToken(XmlWriter xmlWriter, SecurityToken token, string usage);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.InvalidRequestFaultException : RequestFaultException {
    public InvalidRequestFaultException(string soapNamespace, string trustNamespace);
    public InvalidRequestFaultException(string soapNamespace, string trustNamespace, FaultReason reason);
    private static string GetFaultSubCodeName(string trustNamespace);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.InvalidScopeFaultException : RequestFaultException {
    public InvalidScopeFaultException(string soapNamespace, string trustNamespace);
    public InvalidScopeFaultException(string soapNamespace, string trustNamespace, FaultReason reason);
    private static string GetFaultSubCodeName(string trustNamespace);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.InvalidSecurityTokenFaultException : RequestFaultException {
    public InvalidSecurityTokenFaultException(string soapNamespace, string trustNamespace);
    public InvalidSecurityTokenFaultException(string soapNamespace, string trustNamespace, FaultReason reason);
    private static string GetFaultSubCodeName(string trustNamespace);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.InvalidTimeRangeFaultException : RequestFaultException {
    public InvalidTimeRangeFaultException(string soapNamespace, string trustNamespace);
    public InvalidTimeRangeFaultException(string soapNamespace, string trustNamespace, FaultReason reason);
    private static string GetFaultSubCodeName(string trustNamespace);
}
[ServiceContractAttribute]
public interface Microsoft.IdentityModel.Protocols.WSTrust.IWSTrust13AsyncContract {
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrust13Cancel(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrust13Cancel(IAsyncResult ar);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrust13Issue(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrust13Issue(IAsyncResult ar);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrust13Renew(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrust13Renew(IAsyncResult ar);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrust13Validate(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrust13Validate(IAsyncResult ar);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrust13CancelResponse(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrust13CancelResponse(IAsyncResult ar);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrust13IssueResponse(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrust13IssueResponse(IAsyncResult ar);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrust13RenewResponse(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrust13RenewResponse(IAsyncResult ar);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrust13ValidateResponse(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrust13ValidateResponse(IAsyncResult ar);
}
[ServiceContractAttribute]
public interface Microsoft.IdentityModel.Protocols.WSTrust.IWSTrust13SyncContract {
    [OperationContractAttribute]
public abstract virtual Message ProcessTrust13Cancel(Message message);
    [OperationContractAttribute]
public abstract virtual Message ProcessTrust13Issue(Message message);
    [OperationContractAttribute]
public abstract virtual Message ProcessTrust13Renew(Message message);
    [OperationContractAttribute]
public abstract virtual Message ProcessTrust13Validate(Message message);
    [OperationContractAttribute]
public abstract virtual Message ProcessTrust13CancelResponse(Message message);
    [OperationContractAttribute]
public abstract virtual Message ProcessTrust13IssueResponse(Message message);
    [OperationContractAttribute]
public abstract virtual Message ProcessTrust13RenewResponse(Message message);
    [OperationContractAttribute]
public abstract virtual Message ProcessTrust13ValidateResponse(Message message);
}
[ServiceContractAttribute]
[ComVisibleAttribute("False")]
public interface Microsoft.IdentityModel.Protocols.WSTrust.IWSTrustChannelContract {
    public abstract virtual RequestSecurityTokenResponse Cancel(RequestSecurityToken request);
    public abstract virtual IAsyncResult BeginCancel(RequestSecurityToken request, AsyncCallback callback, object state);
    public abstract virtual void EndCancel(IAsyncResult result, RequestSecurityTokenResponse& response);
    public abstract virtual SecurityToken Issue(RequestSecurityToken request);
    public abstract virtual SecurityToken Issue(RequestSecurityToken request, RequestSecurityTokenResponse& response);
    public abstract virtual IAsyncResult BeginIssue(RequestSecurityToken request, AsyncCallback callback, object asyncState);
    public abstract virtual SecurityToken EndIssue(IAsyncResult result, RequestSecurityTokenResponse& response);
    public abstract virtual RequestSecurityTokenResponse Renew(RequestSecurityToken request);
    public abstract virtual IAsyncResult BeginRenew(RequestSecurityToken request, AsyncCallback callback, object state);
    public abstract virtual void EndRenew(IAsyncResult result, RequestSecurityTokenResponse& response);
    public abstract virtual RequestSecurityTokenResponse Validate(RequestSecurityToken request);
    public abstract virtual IAsyncResult BeginValidate(RequestSecurityToken request, AsyncCallback callback, object state);
    public abstract virtual void EndValidate(IAsyncResult result, RequestSecurityTokenResponse& response);
}
[ServiceContractAttribute]
public interface Microsoft.IdentityModel.Protocols.WSTrust.IWSTrustContract {
    [OperationContractAttribute]
public abstract virtual Message Cancel(Message message);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginCancel(Message message, AsyncCallback callback, object asyncState);
    public abstract virtual Message EndCancel(IAsyncResult asyncResult);
    [OperationContractAttribute]
public abstract virtual Message Issue(Message message);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginIssue(Message message, AsyncCallback callback, object asyncState);
    public abstract virtual Message EndIssue(IAsyncResult asyncResult);
    [OperationContractAttribute]
public abstract virtual Message Renew(Message message);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginRenew(Message message, AsyncCallback callback, object asyncState);
    public abstract virtual Message EndRenew(IAsyncResult asyncResult);
    [OperationContractAttribute]
public abstract virtual Message Validate(Message message);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginValidate(Message message, AsyncCallback callback, object asyncState);
    public abstract virtual Message EndValidate(IAsyncResult asyncResult);
}
[ServiceContractAttribute]
public interface Microsoft.IdentityModel.Protocols.WSTrust.IWSTrustFeb2005AsyncContract {
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrustFeb2005Cancel(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrustFeb2005Cancel(IAsyncResult ar);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrustFeb2005Issue(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrustFeb2005Issue(IAsyncResult ar);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrustFeb2005Renew(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrustFeb2005Renew(IAsyncResult ar);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrustFeb2005Validate(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrustFeb2005Validate(IAsyncResult ar);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrustFeb2005CancelResponse(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrustFeb2005CancelResponse(IAsyncResult ar);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrustFeb2005IssueResponse(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrustFeb2005IssueResponse(IAsyncResult ar);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrustFeb2005RenewResponse(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrustFeb2005RenewResponse(IAsyncResult ar);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTrustFeb2005ValidateResponse(Message request, AsyncCallback callback, object state);
    public abstract virtual Message EndTrustFeb2005ValidateResponse(IAsyncResult ar);
}
[ServiceContractAttribute]
public interface Microsoft.IdentityModel.Protocols.WSTrust.IWSTrustFeb2005SyncContract {
    [OperationContractAttribute]
public abstract virtual Message ProcessTrustFeb2005Cancel(Message message);
    [OperationContractAttribute]
public abstract virtual Message ProcessTrustFeb2005Issue(Message message);
    [OperationContractAttribute]
public abstract virtual Message ProcessTrustFeb2005Renew(Message message);
    [OperationContractAttribute]
public abstract virtual Message ProcessTrustFeb2005Validate(Message message);
    [OperationContractAttribute]
public abstract virtual Message ProcessTrustFeb2005CancelResponse(Message message);
    [OperationContractAttribute]
public abstract virtual Message ProcessTrustFeb2005IssueResponse(Message message);
    [OperationContractAttribute]
public abstract virtual Message ProcessTrustFeb2005RenewResponse(Message message);
    [OperationContractAttribute]
public abstract virtual Message ProcessTrustFeb2005ValidateResponse(Message message);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.Lifetime : object {
    private Nullable`1<DateTime> _created;
    private Nullable`1<DateTime> _expires;
    public Nullable`1<DateTime> Created { get; public set; }
    public Nullable`1<DateTime> Expires { get; public set; }
    public Lifetime(DateTime created, DateTime expires);
    public Lifetime(Nullable`1<DateTime> created, Nullable`1<DateTime> expires);
    public Nullable`1<DateTime> get_Created();
    public void set_Created(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_Expires();
    public void set_Expires(Nullable`1<DateTime> value);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.ProtectedKey : object {
    private Byte[] _secret;
    private EncryptingCredentials _wrappingCredentials;
    public EncryptingCredentials WrappingCredentials { get; }
    public ProtectedKey(Byte[] secret);
    public ProtectedKey(Byte[] secret, EncryptingCredentials wrappingCredentials);
    public Byte[] GetKeyBytes();
    public EncryptingCredentials get_WrappingCredentials();
}
public class Microsoft.IdentityModel.Protocols.WSTrust.Renewing : object {
    private bool _allowRenewal;
    private bool _okForRenewalAfterExpiration;
    public bool AllowRenewal { get; public set; }
    public bool OkForRenewalAfterExpiration { get; public set; }
    public Renewing(bool allowRenewal, bool okForRenewalAfterExpiration);
    public bool get_AllowRenewal();
    public void set_AllowRenewal(bool value);
    public bool get_OkForRenewalAfterExpiration();
    public void set_OkForRenewalAfterExpiration(bool value);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.RenewNeededFaultException : RequestFaultException {
    public RenewNeededFaultException(string soapNamespace, string trustNamespace);
    public RenewNeededFaultException(string soapNamespace, string trustNamespace, FaultReason reason);
    private static string GetFaultSubCodeName(string trustNamespace);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.RequestClaim : object {
    private string _claimType;
    private bool _isOptional;
    private string _value;
    public string ClaimType { get; }
    public bool IsOptional { get; public set; }
    public string Value { get; public set; }
    public RequestClaim(string claimType);
    public RequestClaim(string claimType, bool isOptional);
    public RequestClaim(string claimType, bool isOptional, string value);
    public string get_ClaimType();
    public bool get_IsOptional();
    public void set_IsOptional(bool value);
    public string get_Value();
    public void set_Value(string value);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.RequestClaimCollection : Collection`1<RequestClaim> {
    private string _dialect;
    public string Dialect { get; public set; }
    public string get_Dialect();
    public void set_Dialect(string value);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.RequestedProofToken : object {
    private string _computedKeyAlgorithm;
    private ProtectedKey _keys;
    public string ComputedKeyAlgorithm { get; }
    public ProtectedKey ProtectedKey { get; }
    public RequestedProofToken(string computedKeyAlgorithm);
    public RequestedProofToken(Byte[] secret);
    public RequestedProofToken(Byte[] secret, EncryptingCredentials wrappingCredentials);
    public RequestedProofToken(ProtectedKey protectedKey);
    public string get_ComputedKeyAlgorithm();
    public ProtectedKey get_ProtectedKey();
}
public class Microsoft.IdentityModel.Protocols.WSTrust.RequestedSecurityToken : object {
    private XmlElement _tokenAsXml;
    private SecurityToken _requestedToken;
    public XmlElement SecurityTokenXml { get; }
    public SecurityToken SecurityToken { get; }
    public RequestedSecurityToken(SecurityToken token);
    public RequestedSecurityToken(XmlElement tokenAsXml);
    public virtual XmlElement get_SecurityTokenXml();
    public SecurityToken get_SecurityToken();
}
public class Microsoft.IdentityModel.Protocols.WSTrust.RequestFailedFaultException : RequestFaultException {
    public RequestFailedFaultException(string soapNamespace, string trustNamespace);
    public RequestFailedFaultException(string soapNamespace, string trustNamespace, FaultReason reason);
    private static string GetFaultSubCodeName(string trustNamespace);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.RequestSecurityToken : WSTrustMessage {
    private AdditionalContext _additionalContext;
    private RequestClaimCollection _claims;
    private string _computedKeyAlgorithm;
    private Renewing _renewing;
    private SecurityTokenElement _renewTarget;
    private bool _requestDisplayToken;
    private string _displayTokenLanguage;
    private InformationCardReference _informationCardReference;
    private string _clientPseudonym;
    private SecurityTokenElement _proofEncryption;
    private RequestSecurityToken _secondaryParameters;
    private SecurityTokenElement _onBehalfOf;
    private EndpointAddress _onBehalfOfIssuer;
    private SecurityTokenElement _actAs;
    private SecurityTokenElement _delegateTo;
    private Nullable`1<bool> _forwardable;
    private Nullable`1<bool> _delegatable;
    private SecurityTokenElement _cancelTarget;
    private SecurityTokenElement _validateTarget;
    private Participants _participants;
    private SecurityTokenElement _encryption;
    public RequestClaimCollection Claims { get; }
    public string ClientPseudonym { get; public set; }
    public SecurityTokenElement Encryption { get; public set; }
    public string ComputedKeyAlgorithm { get; public set; }
    public Nullable`1<bool> Delegatable { get; public set; }
    public SecurityTokenElement DelegateTo { get; public set; }
    public bool RequestDisplayToken { get; public set; }
    public string DisplayTokenLanguage { get; public set; }
    public Nullable`1<bool> Forwardable { get; public set; }
    public InformationCardReference InformationCardReference { get; public set; }
    public SecurityTokenElement OnBehalfOf { get; public set; }
    public Participants Participants { get; public set; }
    public EndpointAddress Issuer { get; public set; }
    public AdditionalContext AdditionalContext { get; public set; }
    public SecurityTokenElement ActAs { get; public set; }
    public SecurityTokenElement CancelTarget { get; public set; }
    public SecurityTokenElement ProofEncryption { get; public set; }
    public Renewing Renewing { get; public set; }
    public SecurityTokenElement RenewTarget { get; public set; }
    public RequestSecurityToken SecondaryParameters { get; public set; }
    public SecurityTokenElement ValidateTarget { get; public set; }
    public RequestSecurityToken(string requestType);
    public RequestSecurityToken(string requestType, string keyType);
    public RequestClaimCollection get_Claims();
    public string get_ClientPseudonym();
    public void set_ClientPseudonym(string value);
    public SecurityTokenElement get_Encryption();
    public void set_Encryption(SecurityTokenElement value);
    public string get_ComputedKeyAlgorithm();
    public void set_ComputedKeyAlgorithm(string value);
    public Nullable`1<bool> get_Delegatable();
    public void set_Delegatable(Nullable`1<bool> value);
    public SecurityTokenElement get_DelegateTo();
    public void set_DelegateTo(SecurityTokenElement value);
    public bool get_RequestDisplayToken();
    public void set_RequestDisplayToken(bool value);
    public string get_DisplayTokenLanguage();
    public void set_DisplayTokenLanguage(string value);
    public Nullable`1<bool> get_Forwardable();
    public void set_Forwardable(Nullable`1<bool> value);
    public InformationCardReference get_InformationCardReference();
    public void set_InformationCardReference(InformationCardReference value);
    public SecurityTokenElement get_OnBehalfOf();
    public void set_OnBehalfOf(SecurityTokenElement value);
    public Participants get_Participants();
    public void set_Participants(Participants value);
    public EndpointAddress get_Issuer();
    public void set_Issuer(EndpointAddress value);
    public AdditionalContext get_AdditionalContext();
    public void set_AdditionalContext(AdditionalContext value);
    public SecurityTokenElement get_ActAs();
    public void set_ActAs(SecurityTokenElement value);
    public SecurityTokenElement get_CancelTarget();
    public void set_CancelTarget(SecurityTokenElement value);
    public SecurityTokenElement get_ProofEncryption();
    public void set_ProofEncryption(SecurityTokenElement value);
    public Renewing get_Renewing();
    public void set_Renewing(Renewing value);
    public SecurityTokenElement get_RenewTarget();
    public void set_RenewTarget(SecurityTokenElement value);
    public RequestSecurityToken get_SecondaryParameters();
    public void set_SecondaryParameters(RequestSecurityToken value);
    public SecurityTokenElement get_ValidateTarget();
    public void set_ValidateTarget(SecurityTokenElement value);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse : WSTrustMessage {
    private SecurityKeyIdentifierClause _requestedAttachedReference;
    private DisplayToken _requestedDisplayToken;
    private RequestedProofToken _requestedProofToken;
    private RequestedSecurityToken _requestedSecurityToken;
    private SecurityKeyIdentifierClause _requestedUnattachedReference;
    private bool _requestedTokenCancelled;
    private Status _status;
    private bool _isFinal;
    public bool IsFinal { get; public set; }
    public SecurityKeyIdentifierClause RequestedAttachedReference { get; public set; }
    public DisplayToken RequestedDisplayToken { get; public set; }
    public RequestedSecurityToken RequestedSecurityToken { get; public set; }
    public RequestedProofToken RequestedProofToken { get; public set; }
    public SecurityKeyIdentifierClause RequestedUnattachedReference { get; public set; }
    public bool RequestedTokenCancelled { get; public set; }
    public Status Status { get; public set; }
    public RequestSecurityTokenResponse(WSTrustMessage message);
    public bool get_IsFinal();
    public void set_IsFinal(bool value);
    public SecurityKeyIdentifierClause get_RequestedAttachedReference();
    public void set_RequestedAttachedReference(SecurityKeyIdentifierClause value);
    public DisplayToken get_RequestedDisplayToken();
    public void set_RequestedDisplayToken(DisplayToken value);
    public RequestedSecurityToken get_RequestedSecurityToken();
    public void set_RequestedSecurityToken(RequestedSecurityToken value);
    public RequestedProofToken get_RequestedProofToken();
    public void set_RequestedProofToken(RequestedProofToken value);
    public SecurityKeyIdentifierClause get_RequestedUnattachedReference();
    public void set_RequestedUnattachedReference(SecurityKeyIdentifierClause value);
    public bool get_RequestedTokenCancelled();
    public void set_RequestedTokenCancelled(bool value);
    public Status get_Status();
    public void set_Status(Status value);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.SimpleSecurityTokenProvider : SecurityTokenProvider {
    private SecurityToken _securityToken;
    public SimpleSecurityTokenProvider(SecurityToken token, SecurityTokenRequirement tokenRequirement);
    protected virtual SecurityToken GetTokenCore(TimeSpan timeout);
    private static GenericXmlSecurityToken WrapWithAuthPolicy(GenericXmlSecurityToken issuedToken, SecurityTokenRequirement tokenRequirement);
    private static ReadOnlyCollection`1<IAuthorizationPolicy> GetServiceAuthorizationPolicies(EndpointIdentity endpointIdentity);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.Status : object {
    private string _code;
    private string _reason;
    public string Code { get; public set; }
    public string Reason { get; public set; }
    public Status(string code, string reason);
    public string get_Code();
    public void set_Code(string value);
    public string get_Reason();
    public void set_Reason(string value);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.UnableToRenewFaultException : RequestFaultException {
    public UnableToRenewFaultException(string soapNamespace, string trustNamespace);
    public UnableToRenewFaultException(string soapNamespace, string trustNamespace, FaultReason reason);
    private static string GetFaultSubCodeName(string trustNamespace);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.UseKey : object {
    private SecurityToken _token;
    private SecurityKeyIdentifier _ski;
    public SecurityToken Token { get; }
    public SecurityKeyIdentifier SecurityKeyIdentifier { get; }
    public UseKey(SecurityKeyIdentifier ski);
    public UseKey(SecurityToken token);
    public UseKey(SecurityKeyIdentifier ski, SecurityToken token);
    public SecurityToken get_Token();
    public SecurityKeyIdentifier get_SecurityKeyIdentifier();
}
public static class Microsoft.IdentityModel.Protocols.WSTrust.WSPolicyConstants : object {
    public static string NamespaceURI;
    public static string Prefix;
}
public static class Microsoft.IdentityModel.Protocols.WSTrust.WSTrust13Constants : object {
    public static string NamespaceURI;
    public static string Prefix;
    public static string SchemaLocation;
    public static string Schema;
}
internal class Microsoft.IdentityModel.Protocols.WSTrust.WSTrust13ConstantsAdapter : WSTrustConstantsAdapter {
    private static WSTrust13ConstantsAdapter _instance;
    private static WSTrust13ElementNames _trust13ElementNames;
    private static WSTrust13Actions _trust13ActionNames;
    private static WSTrust13ComputedKeyAlgorithm _trust13ComputedKeyAlgorithm;
    private static WSTrust13KeyTypes _trust13KeyTypes;
    private static WSTrust13RequestTypes _trust13RequestTypes;
    internal static WSTrust13ConstantsAdapter Instance { get; }
    internal WSTrustActions Actions { get; }
    internal WSTrustComputedKeyAlgorithm ComputedKeyAlgorithm { get; }
    internal WSTrustElementNames Elements { get; }
    internal WSTrustKeyTypes KeyTypes { get; }
    internal WSTrustRequestTypes RequestTypes { get; }
    internal static WSTrust13ConstantsAdapter get_Instance();
    internal virtual WSTrustActions get_Actions();
    internal virtual WSTrustComputedKeyAlgorithm get_ComputedKeyAlgorithm();
    internal virtual WSTrustElementNames get_Elements();
    internal virtual WSTrustKeyTypes get_KeyTypes();
    internal virtual WSTrustRequestTypes get_RequestTypes();
}
public class Microsoft.IdentityModel.Protocols.WSTrust.WSTrust13RequestSerializer : WSTrustRequestSerializer {
    public virtual RequestSecurityToken ReadXml(XmlReader reader, WSTrustSerializationContext context);
    public virtual void ReadXmlElement(XmlReader reader, RequestSecurityToken rst, WSTrustSerializationContext context);
    protected virtual RequestSecurityToken ReadSecondaryParameters(XmlReader reader, WSTrustSerializationContext context);
    public virtual void WriteKnownRequestElement(RequestSecurityToken rst, XmlWriter writer, WSTrustSerializationContext context);
    public virtual void WriteXml(RequestSecurityToken request, XmlWriter writer, WSTrustSerializationContext context);
    public virtual void WriteXmlElement(XmlWriter writer, string elementName, object elementValue, RequestSecurityToken rst, WSTrustSerializationContext context);
    public virtual bool CanRead(XmlReader reader);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.WSTrust13ResponseSerializer : WSTrustResponseSerializer {
    public virtual RequestSecurityTokenResponse ReadXml(XmlReader reader, WSTrustSerializationContext context);
    public virtual void ReadXmlElement(XmlReader reader, RequestSecurityTokenResponse rstr, WSTrustSerializationContext context);
    public virtual void WriteKnownResponseElement(RequestSecurityTokenResponse rstr, XmlWriter writer, WSTrustSerializationContext context);
    public virtual void WriteXml(RequestSecurityTokenResponse response, XmlWriter writer, WSTrustSerializationContext context);
    public virtual void WriteXmlElement(XmlWriter writer, string elementName, object elementValue, RequestSecurityTokenResponse rstr, WSTrustSerializationContext context);
    public virtual bool CanRead(XmlReader reader);
}
public static class Microsoft.IdentityModel.Protocols.WSTrust.WSTrust14Constants : object {
    public static string NamespaceURI;
    public static string Prefix;
}
public class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustChannel : object {
    private static int DefaultKeySizeInBits;
    private static int FaultMaxBufferSize;
    private WSTrustChannelFactory _factory;
    private IChannel _innerChannel;
    private IWSTrustChannelContract _innerContract;
    private MessageVersion _messageVersion;
    private TrustVersion _trustVersion;
    private WSTrustSerializationContext _context;
    private WSTrustRequestSerializer _wsTrustRequestSerializer;
    private WSTrustResponseSerializer _wsTrustResponseSerializer;
    public IChannel Channel { get; protected set; }
    public WSTrustChannelFactory ChannelFactory { get; protected set; }
    public IWSTrustChannelContract Contract { get; protected set; }
    public TrustVersion TrustVersion { get; protected set; }
    public WSTrustSerializationContext WSTrustSerializationContext { get; protected set; }
    public WSTrustRequestSerializer WSTrustRequestSerializer { get; protected set; }
    public WSTrustResponseSerializer WSTrustResponseSerializer { get; protected set; }
    public CommunicationState State { get; }
    public WSTrustChannel(WSTrustChannelFactory factory, IWSTrustChannelContract inner, TrustVersion trustVersion, WSTrustSerializationContext context, WSTrustRequestSerializer requestSerializer, WSTrustResponseSerializer responseSerializer);
    public IChannel get_Channel();
    protected void set_Channel(IChannel value);
    public WSTrustChannelFactory get_ChannelFactory();
    protected void set_ChannelFactory(WSTrustChannelFactory value);
    public IWSTrustChannelContract get_Contract();
    protected void set_Contract(IWSTrustChannelContract value);
    public TrustVersion get_TrustVersion();
    protected void set_TrustVersion(TrustVersion value);
    public WSTrustSerializationContext get_WSTrustSerializationContext();
    protected void set_WSTrustSerializationContext(WSTrustSerializationContext value);
    public WSTrustRequestSerializer get_WSTrustRequestSerializer();
    protected void set_WSTrustRequestSerializer(WSTrustRequestSerializer value);
    public WSTrustResponseSerializer get_WSTrustResponseSerializer();
    protected void set_WSTrustResponseSerializer(WSTrustResponseSerializer value);
    protected virtual Message CreateRequest(RequestSecurityToken request, string requestType);
    protected virtual RequestSecurityTokenResponse ReadResponse(Message response);
    protected static string GetRequestAction(string requestType, TrustVersion trustVersion);
    public virtual SecurityToken GetTokenFromResponse(RequestSecurityToken request, RequestSecurityTokenResponse response);
    internal static SecurityToken GetUseKeySecurityToken(UseKey useKey, string requestKeyType);
    internal static ProofKeyType GetKeyType(string keyType);
    internal static bool IsPsha1(string algorithm);
    internal static SecurityToken ComputeProofKey(RequestSecurityToken request, RequestSecurityTokenResponse response);
    internal static SecurityToken GetProofKey(RequestSecurityToken request, RequestSecurityTokenResponse response);
    public sealed virtual T GetProperty();
    public sealed virtual void Abort();
    public sealed virtual IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginClose(AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginOpen(AsyncCallback callback, object state);
    public sealed virtual void Close(TimeSpan timeout);
    public sealed virtual void Close();
    public sealed virtual void add_Closed(EventHandler value);
    public sealed virtual void remove_Closed(EventHandler value);
    public sealed virtual void add_Closing(EventHandler value);
    public sealed virtual void remove_Closing(EventHandler value);
    public sealed virtual void EndClose(IAsyncResult result);
    public sealed virtual void EndOpen(IAsyncResult result);
    public sealed virtual void add_Faulted(EventHandler value);
    public sealed virtual void remove_Faulted(EventHandler value);
    public sealed virtual void Open(TimeSpan timeout);
    public sealed virtual void Open();
    public sealed virtual void add_Opened(EventHandler value);
    public sealed virtual void remove_Opened(EventHandler value);
    public sealed virtual void add_Opening(EventHandler value);
    public sealed virtual void remove_Opening(EventHandler value);
    public sealed virtual CommunicationState get_State();
    public virtual RequestSecurityTokenResponse Cancel(RequestSecurityToken rst);
    public virtual SecurityToken Issue(RequestSecurityToken rst);
    public virtual SecurityToken Issue(RequestSecurityToken rst, RequestSecurityTokenResponse& rstr);
    public virtual RequestSecurityTokenResponse Renew(RequestSecurityToken rst);
    public virtual RequestSecurityTokenResponse Validate(RequestSecurityToken rst);
    private IAsyncResult BeginOperation(Operations operation, string requestType, RequestSecurityToken rst, AsyncCallback callback, object state);
    private RequestSecurityTokenResponse EndOperation(IAsyncResult result, WSTrustChannelAsyncResult& tcar);
    public sealed virtual IAsyncResult BeginCancel(RequestSecurityToken rst, AsyncCallback callback, object state);
    public sealed virtual void EndCancel(IAsyncResult result, RequestSecurityTokenResponse& rstr);
    public sealed virtual IAsyncResult BeginIssue(RequestSecurityToken rst, AsyncCallback callback, object asyncState);
    public sealed virtual SecurityToken EndIssue(IAsyncResult result, RequestSecurityTokenResponse& rstr);
    public sealed virtual IAsyncResult BeginRenew(RequestSecurityToken rst, AsyncCallback callback, object state);
    public sealed virtual void EndRenew(IAsyncResult result, RequestSecurityTokenResponse& rstr);
    public sealed virtual IAsyncResult BeginValidate(RequestSecurityToken rst, AsyncCallback callback, object state);
    public sealed virtual void EndValidate(IAsyncResult result, RequestSecurityTokenResponse& rstr);
    public sealed virtual Message Cancel(Message message);
    public sealed virtual IAsyncResult BeginCancel(Message message, AsyncCallback callback, object asyncState);
    public sealed virtual Message EndCancel(IAsyncResult asyncResult);
    public sealed virtual Message Issue(Message message);
    public sealed virtual IAsyncResult BeginIssue(Message message, AsyncCallback callback, object asyncState);
    public sealed virtual Message EndIssue(IAsyncResult asyncResult);
    public sealed virtual Message Renew(Message message);
    public sealed virtual IAsyncResult BeginRenew(Message message, AsyncCallback callback, object asyncState);
    public sealed virtual Message EndRenew(IAsyncResult asyncResult);
    public sealed virtual Message Validate(Message message);
    public sealed virtual IAsyncResult BeginValidate(Message message, AsyncCallback callback, object asyncState);
    public sealed virtual Message EndValidate(IAsyncResult asyncResult);
}
[ComVisibleAttribute("False")]
public class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustChannelFactory : ChannelFactory`1<IWSTrustChannelContract> {
    private object _factoryLock;
    private bool _locked;
    private WSTrustChannelLockedProperties _lockedProperties;
    private TrustVersion _trustVersion;
    private SecurityTokenResolver _securityTokenResolver;
    private SecurityTokenResolver _useKeyTokenResolver;
    private SecurityTokenHandlerCollectionManager _securityTokenHandlerCollectionManager;
    private WSTrustRequestSerializer _wsTrustRequestSerializer;
    private WSTrustResponseSerializer _wsTrustResponseSerializer;
    public TrustVersion TrustVersion { get; public set; }
    public SecurityTokenHandlerCollectionManager SecurityTokenHandlerCollectionManager { get; public set; }
    public SecurityTokenResolver SecurityTokenResolver { get; public set; }
    public SecurityTokenResolver UseKeyTokenResolver { get; public set; }
    public WSTrustRequestSerializer WSTrustRequestSerializer { get; public set; }
    public WSTrustResponseSerializer WSTrustResponseSerializer { get; public set; }
    public WSTrustChannelFactory(string endpointConfigurationName);
    public WSTrustChannelFactory(Binding binding);
    public WSTrustChannelFactory(ServiceEndpoint endpoint);
    public WSTrustChannelFactory(string endpointConfigurationName, EndpointAddress remoteAddress);
    public WSTrustChannelFactory(Binding binding, EndpointAddress remoteAddress);
    public WSTrustChannelFactory(Binding binding, string remoteAddress);
    public TrustVersion get_TrustVersion();
    public void set_TrustVersion(TrustVersion value);
    public SecurityTokenHandlerCollectionManager get_SecurityTokenHandlerCollectionManager();
    public void set_SecurityTokenHandlerCollectionManager(SecurityTokenHandlerCollectionManager value);
    public SecurityTokenResolver get_SecurityTokenResolver();
    public void set_SecurityTokenResolver(SecurityTokenResolver value);
    public SecurityTokenResolver get_UseKeyTokenResolver();
    public void set_UseKeyTokenResolver(SecurityTokenResolver value);
    public WSTrustRequestSerializer get_WSTrustRequestSerializer();
    public void set_WSTrustRequestSerializer(WSTrustRequestSerializer value);
    public WSTrustResponseSerializer get_WSTrustResponseSerializer();
    public void set_WSTrustResponseSerializer(WSTrustResponseSerializer value);
    public virtual IWSTrustChannelContract CreateChannel(EndpointAddress address, Uri via);
    protected virtual WSTrustChannel CreateTrustChannel(IWSTrustChannelContract innerChannel, TrustVersion trustVersion, WSTrustSerializationContext context, WSTrustRequestSerializer requestSerializer, WSTrustResponseSerializer responseSerializer);
    private WSTrustChannelLockedProperties GetLockedProperties();
    private WSTrustRequestSerializer GetRequestSerializer(TrustVersion trustVersion);
    private WSTrustResponseSerializer GetResponseSerializer(TrustVersion trustVersion);
    private TrustVersion GetTrustVersion();
    protected virtual WSTrustSerializationContext CreateSerializationContext();
}
internal abstract class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustConstantsAdapter : object {
    internal static WSTrustAttributeNames _attributeNames;
    internal static WSTrustElementNames _elementNames;
    internal static FaultCodeValues _faultCodes;
    internal string NamespaceURI;
    internal string Prefix;
    internal WSTrustActions Actions { get; }
    internal WSTrustAttributeNames Attributes { get; }
    internal WSTrustComputedKeyAlgorithm ComputedKeyAlgorithm { get; }
    internal WSTrustElementNames Elements { get; }
    internal FaultCodeValues FaultCodes { get; }
    internal WSTrustRequestTypes RequestTypes { get; }
    internal WSTrustKeyTypes KeyTypes { get; }
    internal static WSTrustFeb2005ConstantsAdapter TrustFeb2005 { get; }
    internal static WSTrust13ConstantsAdapter Trust13 { get; }
    internal abstract virtual WSTrustActions get_Actions();
    internal virtual WSTrustAttributeNames get_Attributes();
    internal abstract virtual WSTrustComputedKeyAlgorithm get_ComputedKeyAlgorithm();
    internal virtual WSTrustElementNames get_Elements();
    internal virtual FaultCodeValues get_FaultCodes();
    internal abstract virtual WSTrustRequestTypes get_RequestTypes();
    internal abstract virtual WSTrustKeyTypes get_KeyTypes();
    internal static WSTrustFeb2005ConstantsAdapter get_TrustFeb2005();
    internal static WSTrust13ConstantsAdapter get_Trust13();
    internal static WSTrustConstantsAdapter GetConstantsAdapter(string ns);
}
public static class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustFeb2005Constants : object {
    public static string NamespaceURI;
    public static string Prefix;
    public static string SchemaLocation;
    public static string Schema;
}
internal class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ConstantsAdapter : WSTrustConstantsAdapter {
    private static WSTrustFeb2005ConstantsAdapter _instance;
    private static WSTrustFeb2005Actions _trustFeb2005Actions;
    private static WSTrustFeb2005ComputedKeyAlgorithm _trustFeb2005ComputedKeyAlgorithm;
    private static WSTrustFeb2005KeyTypes _trustFeb2005KeyTypes;
    private static WSTrustFeb2005RequestTypes _trustFeb2005RequestTypes;
    internal static WSTrustFeb2005ConstantsAdapter Instance { get; }
    internal WSTrustActions Actions { get; }
    internal WSTrustComputedKeyAlgorithm ComputedKeyAlgorithm { get; }
    internal WSTrustKeyTypes KeyTypes { get; }
    internal WSTrustRequestTypes RequestTypes { get; }
    internal static WSTrustFeb2005ConstantsAdapter get_Instance();
    internal virtual WSTrustActions get_Actions();
    internal virtual WSTrustComputedKeyAlgorithm get_ComputedKeyAlgorithm();
    internal virtual WSTrustKeyTypes get_KeyTypes();
    internal virtual WSTrustRequestTypes get_RequestTypes();
}
public class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustFeb2005RequestSerializer : WSTrustRequestSerializer {
    public virtual RequestSecurityToken ReadXml(XmlReader reader, WSTrustSerializationContext context);
    public virtual void ReadXmlElement(XmlReader reader, RequestSecurityToken rst, WSTrustSerializationContext context);
    public virtual void WriteKnownRequestElement(RequestSecurityToken rst, XmlWriter writer, WSTrustSerializationContext context);
    public virtual void WriteXml(RequestSecurityToken request, XmlWriter writer, WSTrustSerializationContext context);
    public virtual void WriteXmlElement(XmlWriter writer, string elementName, object elementValue, RequestSecurityToken rst, WSTrustSerializationContext context);
    public virtual bool CanRead(XmlReader reader);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustFeb2005ResponseSerializer : WSTrustResponseSerializer {
    public virtual RequestSecurityTokenResponse ReadXml(XmlReader reader, WSTrustSerializationContext context);
    public virtual void ReadXmlElement(XmlReader reader, RequestSecurityTokenResponse rstr, WSTrustSerializationContext context);
    public virtual void WriteKnownResponseElement(RequestSecurityTokenResponse rstr, XmlWriter writer, WSTrustSerializationContext context);
    public virtual void WriteXml(RequestSecurityTokenResponse response, XmlWriter writer, WSTrustSerializationContext context);
    public virtual void WriteXmlElement(XmlWriter writer, string elementName, object elementValue, RequestSecurityTokenResponse rstr, WSTrustSerializationContext context);
    public virtual bool CanRead(XmlReader reader);
}
public abstract class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustMessage : OpenObject {
    private bool _allowPostdating;
    private EndpointAddress _appliesTo;
    private string _replyTo;
    private string _authenticationType;
    private string _canonicalizationAlgorithm;
    private string _context;
    private string _encryptionAlgorithm;
    private Entropy _entropy;
    private string _issuedTokenEncryptionAlgorithm;
    private string _keyWrapAlgorithm;
    private string _issuedTokenSignatureAlgorithm;
    private Nullable`1<int> _keySizeInBits;
    private string _keyType;
    private Lifetime _lifetime;
    private string _requestType;
    private string _signatureAlgorithm;
    private string _tokenType;
    private UseKey _useKey;
    private BinaryExchange _binaryExchange;
    public bool AllowPostdating { get; public set; }
    public EndpointAddress AppliesTo { get; public set; }
    public BinaryExchange BinaryExchange { get; public set; }
    public string ReplyTo { get; public set; }
    public string AuthenticationType { get; public set; }
    public string CanonicalizationAlgorithm { get; public set; }
    public string Context { get; public set; }
    public string EncryptionAlgorithm { get; public set; }
    public Entropy Entropy { get; public set; }
    public string EncryptWith { get; public set; }
    public string SignWith { get; public set; }
    public Nullable`1<int> KeySizeInBits { get; public set; }
    public string KeyType { get; public set; }
    public string KeyWrapAlgorithm { get; public set; }
    public Lifetime Lifetime { get; public set; }
    public string RequestType { get; public set; }
    public string SignatureAlgorithm { get; public set; }
    public string TokenType { get; public set; }
    public UseKey UseKey { get; public set; }
    public bool get_AllowPostdating();
    public void set_AllowPostdating(bool value);
    public EndpointAddress get_AppliesTo();
    public void set_AppliesTo(EndpointAddress value);
    public BinaryExchange get_BinaryExchange();
    public void set_BinaryExchange(BinaryExchange value);
    public string get_ReplyTo();
    public void set_ReplyTo(string value);
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    public string get_CanonicalizationAlgorithm();
    public void set_CanonicalizationAlgorithm(string value);
    public string get_Context();
    public void set_Context(string value);
    public string get_EncryptionAlgorithm();
    public void set_EncryptionAlgorithm(string value);
    public Entropy get_Entropy();
    public void set_Entropy(Entropy value);
    public string get_EncryptWith();
    public void set_EncryptWith(string value);
    public string get_SignWith();
    public void set_SignWith(string value);
    public Nullable`1<int> get_KeySizeInBits();
    public void set_KeySizeInBits(Nullable`1<int> value);
    public string get_KeyType();
    public void set_KeyType(string value);
    public string get_KeyWrapAlgorithm();
    public void set_KeyWrapAlgorithm(string value);
    public Lifetime get_Lifetime();
    public void set_Lifetime(Lifetime value);
    public string get_RequestType();
    public void set_RequestType(string value);
    public string get_SignatureAlgorithm();
    public void set_SignatureAlgorithm(string value);
    public string get_TokenType();
    public void set_TokenType(string value);
    public UseKey get_UseKey();
    public void set_UseKey(UseKey value);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustRequestBodyWriter : BodyWriter {
    private WSTrustSerializationContext _serializationContext;
    private RequestSecurityToken _requestSecurityToken;
    private WSTrustRequestSerializer _serializer;
    public WSTrustRequestBodyWriter(RequestSecurityToken requestSecurityToken, WSTrustRequestSerializer serializer, WSTrustSerializationContext serializationContext);
    protected virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustRequestProcessingErrorEventArgs : EventArgs {
    private Exception _exception;
    private string _requestType;
    public Exception Exception { get; }
    public string RequestType { get; }
    public WSTrustRequestProcessingErrorEventArgs(string requestType, Exception exception);
    public Exception get_Exception();
    public string get_RequestType();
}
public abstract class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustRequestSerializer : object {
    public abstract virtual RequestSecurityToken ReadXml(XmlReader reader, WSTrustSerializationContext context);
    public abstract virtual void ReadXmlElement(XmlReader reader, RequestSecurityToken rst, WSTrustSerializationContext context);
    public abstract virtual void WriteKnownRequestElement(RequestSecurityToken rst, XmlWriter writer, WSTrustSerializationContext context);
    protected virtual void ReadCustomElement(XmlReader reader, WSTrustSerializationContext context);
    public abstract virtual void WriteXml(RequestSecurityToken request, XmlWriter writer, WSTrustSerializationContext context);
    public abstract virtual void WriteXmlElement(XmlWriter writer, string elementName, object elementValue, RequestSecurityToken rst, WSTrustSerializationContext context);
    public virtual RequestSecurityToken CreateRequestSecurityToken();
    public virtual void Validate(RequestSecurityToken rst);
    public abstract virtual bool CanRead(XmlReader reader);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustResponseBodyWriter : BodyWriter {
    private WSTrustResponseSerializer _serializer;
    private RequestSecurityTokenResponse _rstr;
    private WSTrustSerializationContext _context;
    public WSTrustResponseBodyWriter(RequestSecurityTokenResponse rstr, WSTrustResponseSerializer serializer, WSTrustSerializationContext context);
    protected virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
}
public abstract class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustResponseSerializer : object {
    public abstract virtual RequestSecurityTokenResponse ReadXml(XmlReader reader, WSTrustSerializationContext context);
    public abstract virtual void ReadXmlElement(XmlReader reader, RequestSecurityTokenResponse rstr, WSTrustSerializationContext context);
    public abstract virtual void WriteKnownResponseElement(RequestSecurityTokenResponse rstr, XmlWriter writer, WSTrustSerializationContext context);
    public abstract virtual void WriteXml(RequestSecurityTokenResponse response, XmlWriter writer, WSTrustSerializationContext context);
    public abstract virtual void WriteXmlElement(XmlWriter writer, string elementName, object elementValue, RequestSecurityTokenResponse rstr, WSTrustSerializationContext context);
    public virtual RequestSecurityTokenResponse CreateInstance();
    public virtual void Validate(RequestSecurityTokenResponse rstr);
    public abstract virtual bool CanRead(XmlReader reader);
}
public class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustSerializationContext : object {
    private SecurityTokenResolver _securityTokenResolver;
    private SecurityTokenResolver _useKeyTokenResolver;
    private SecurityTokenHandlerCollectionManager _securityTokenHandlerCollectionManager;
    private SecurityTokenSerializer _securityTokenSerializer;
    public SecurityTokenResolver TokenResolver { get; public set; }
    public SecurityTokenResolver UseKeyTokenResolver { get; public set; }
    public SecurityTokenSerializer SecurityTokenSerializer { get; public set; }
    public SecurityTokenHandlerCollectionManager SecurityTokenHandlerCollectionManager { get; public set; }
    public SecurityTokenHandlerCollection SecurityTokenHandlers { get; }
    public WSTrustSerializationContext(SecurityTokenHandlerCollectionManager securityTokenHandlerCollectionManager);
    public WSTrustSerializationContext(SecurityTokenHandlerCollectionManager securityTokenHandlerCollectionManager, SecurityTokenResolver securityTokenResolver, SecurityTokenResolver useKeyTokenResolver);
    public SecurityTokenResolver get_TokenResolver();
    public void set_TokenResolver(SecurityTokenResolver value);
    public SecurityTokenResolver get_UseKeyTokenResolver();
    public void set_UseKeyTokenResolver(SecurityTokenResolver value);
    public SecurityTokenSerializer get_SecurityTokenSerializer();
    public void set_SecurityTokenSerializer(SecurityTokenSerializer value);
    public SecurityTokenHandlerCollectionManager get_SecurityTokenHandlerCollectionManager();
    public void set_SecurityTokenHandlerCollectionManager(SecurityTokenHandlerCollectionManager value);
    public SecurityTokenHandlerCollection get_SecurityTokenHandlers();
}
public class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustSerializationException : Exception {
    public WSTrustSerializationException(string message);
    public WSTrustSerializationException(string message, Exception inner);
    protected WSTrustSerializationException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustSerializationHelper : object {
    public static RequestSecurityToken CreateRequest(XmlReader reader, WSTrustSerializationContext context, WSTrustRequestSerializer requestSerializer, WSTrustConstantsAdapter trustConstants);
    public static void ReadRSTXml(XmlReader reader, RequestSecurityToken rst, WSTrustSerializationContext context, WSTrustConstantsAdapter trustConstants);
    public static void WriteRequest(RequestSecurityToken rst, XmlWriter writer, WSTrustSerializationContext context, WSTrustRequestSerializer requestSerializer, WSTrustConstantsAdapter trustConstants);
    public static void WriteKnownRequestElement(RequestSecurityToken rst, XmlWriter writer, WSTrustSerializationContext context, WSTrustRequestSerializer requestSerializer, WSTrustConstantsAdapter trustConstants);
    public static void WriteRSTXml(XmlWriter writer, string elementName, object elementValue, WSTrustSerializationContext context, WSTrustConstantsAdapter trustConstants);
    private static void WriteTokenElement(SecurityTokenElement tokenElement, string usage, WSTrustSerializationContext context, XmlWriter writer);
    public static RequestSecurityTokenResponse CreateResponse(XmlReader reader, WSTrustSerializationContext context, WSTrustResponseSerializer responseSerializer, WSTrustConstantsAdapter trustConstants);
    public static void ReadRSTRXml(XmlReader reader, RequestSecurityTokenResponse rstr, WSTrustSerializationContext context, WSTrustConstantsAdapter trustConstants);
    public static void WriteResponse(RequestSecurityTokenResponse response, XmlWriter writer, WSTrustSerializationContext context, WSTrustResponseSerializer responseSerializer, WSTrustConstantsAdapter trustConstants);
    public static void WriteKnownResponseElement(RequestSecurityTokenResponse rstr, XmlWriter writer, WSTrustSerializationContext context, WSTrustResponseSerializer responseSerializer, WSTrustConstantsAdapter trustConstants);
    public static void WriteRSTRXml(XmlWriter writer, string elementName, object elementValue, WSTrustSerializationContext context, WSTrustConstantsAdapter trustConstants);
    public static string ReadComputedKeyAlgorithm(XmlReader reader, WSTrustConstantsAdapter trustConstants);
    public static void WriteComputedKeyAlgorithm(XmlWriter writer, string elementName, string computedKeyAlgorithm, WSTrustConstantsAdapter trustConstants);
    public static Status ReadStatus(XmlReader reader, WSTrustConstantsAdapter trustConstants);
    public static BinaryExchange ReadBinaryExchange(XmlReader reader, WSTrustConstantsAdapter trustConstants);
    public static void WriteBinaryExchange(XmlWriter writer, BinaryExchange binaryExchange, WSTrustConstantsAdapter trustConstants);
    public static void WriteStatus(XmlWriter writer, Status status, WSTrustConstantsAdapter trustConstants);
    public static ProtectedKey ReadProtectedKey(XmlReader reader, WSTrustSerializationContext context, WSTrustConstantsAdapter trustConstants);
    public static void WriteProtectedKey(XmlWriter writer, ProtectedKey protectedKey, WSTrustSerializationContext context, WSTrustConstantsAdapter trustConstants);
    public static string ReadRequestType(XmlReader reader, WSTrustConstantsAdapter trustConstants);
    public static void WriteRequestType(XmlWriter writer, string requestType, WSTrustConstantsAdapter trustConstants);
    public static Lifetime ReadLifetime(XmlReader reader, WSTrustConstantsAdapter trustConstants);
    public static void WriteLifetime(XmlWriter writer, Lifetime lifetime, WSTrustConstantsAdapter trustConstants);
    public static EndpointAddress ReadOnBehalfOfIssuer(XmlReader reader, WSTrustConstantsAdapter trustConstants);
    public static void WriteOnBehalfOfIssuer(XmlWriter writer, EndpointAddress issuer, WSTrustConstantsAdapter trustConstants);
    public static EndpointAddress ReadAppliesTo(XmlReader reader, WSTrustConstantsAdapter trustConstants);
    public static void WriteAppliesTo(XmlWriter writer, EndpointAddress appliesTo, WSTrustConstantsAdapter trustConstants);
    public static string ReadKeyType(XmlReader reader, WSTrustConstantsAdapter trustConstants);
    public static void WriteKeyType(XmlWriter writer, string keyType, WSTrustConstantsAdapter trustConstants);
    public static DisplayToken ReadRequestedDisplayToken(XmlReader reader, WSTrustConstantsAdapter trustConstants);
    public static void WriteRequestedDisplayToken(XmlWriter writer, DisplayToken requestedDisplayToken, WSTrustConstantsAdapter trustConstants);
    public static XmlElement ReadInnerXml(XmlReader reader);
    public static XmlElement ReadInnerXml(XmlReader reader, bool onStartElement);
    public static BinarySecretSecurityToken ReadBinarySecretSecurityToken(XmlReader reader, WSTrustConstantsAdapter trustConstants);
    public static void WriteBinarySecretSecurityToken(XmlWriter writer, BinarySecretSecurityToken token, WSTrustConstantsAdapter trustConstants);
    private static string GetRequestClaimNamespace(string dialect);
    private static string GetRequestClaimPrefix(string dialect);
}
[ServiceBehaviorAttribute]
[AspNetCompatibilityRequirementsAttribute]
public class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustServiceContract : object {
    private static string soap11Namespace;
    private static string soap12Namespace;
    private SecurityTokenServiceConfiguration _securityTokenServiceConfiguration;
    private EventHandler`1<WSTrustRequestProcessingErrorEventArgs> _requestFailed;
    public SecurityTokenServiceConfiguration SecurityTokenServiceConfiguration { get; }
    public WSTrustServiceContract(SecurityTokenServiceConfiguration securityTokenServiceConfiguration);
    private void add__requestFailed(EventHandler`1<WSTrustRequestProcessingErrorEventArgs> value);
    private void remove__requestFailed(EventHandler`1<WSTrustRequestProcessingErrorEventArgs> value);
    public void add_RequestFailed(EventHandler`1<WSTrustRequestProcessingErrorEventArgs> value);
    public void remove_RequestFailed(EventHandler`1<WSTrustRequestProcessingErrorEventArgs> value);
    protected virtual SecurityTokenResolver GetSecurityHeaderTokenResolver(RequestContext requestContext);
    protected virtual SecurityTokenResolver GetRstSecurityTokenResolver();
    protected virtual WSTrustSerializationContext CreateSerializationContext();
    protected virtual IAsyncResult BeginDispatchRequest(DispatchContext dispatchContext, AsyncCallback asyncCallback, object asyncState);
    protected virtual DispatchContext EndDispatchRequest(IAsyncResult ar);
    protected virtual void DispatchRequest(DispatchContext dispatchContext);
    protected virtual Message ProcessCore(Message requestMessage, WSTrustRequestSerializer requestSerializer, WSTrustResponseSerializer responseSerializer, string requestAction, string responseAction, string trustNamespace);
    protected virtual DispatchContext CreateDispatchContext(Message requestMessage, string requestAction, string responseAction, string trustNamespace, WSTrustRequestSerializer requestSerializer, WSTrustResponseSerializer responseSerializer, WSTrustSerializationContext serializationContext);
    protected virtual void ValidateDispatchContext(DispatchContext dispatchContext);
    private static bool IsValidRSTAction(DispatchContext dispatchContext);
    private static bool IsValidRSTRAction(DispatchContext dispatchContext);
    private SecurityTokenService CreateSTS();
    protected virtual IAsyncResult BeginProcessCore(Message requestMessage, WSTrustRequestSerializer requestSerializer, WSTrustResponseSerializer responseSerializer, string requestAction, string responseAction, string trustNamespace, AsyncCallback callback, object state);
    protected virtual Message EndProcessCore(IAsyncResult ar, string requestAction, string responseAction, string trustNamespace);
    protected virtual bool HandleException(Exception ex, string trustNamespace, string action, EnvelopeVersion requestEnvelopeVersion);
    public sealed virtual Message ProcessTrust13Cancel(Message message);
    public sealed virtual Message ProcessTrust13Issue(Message message);
    public sealed virtual Message ProcessTrust13Renew(Message message);
    public sealed virtual Message ProcessTrust13Validate(Message message);
    public sealed virtual Message ProcessTrust13CancelResponse(Message message);
    public sealed virtual Message ProcessTrust13IssueResponse(Message message);
    public sealed virtual Message ProcessTrust13RenewResponse(Message message);
    public sealed virtual Message ProcessTrust13ValidateResponse(Message message);
    public sealed virtual Message ProcessTrustFeb2005Cancel(Message message);
    public sealed virtual Message ProcessTrustFeb2005Issue(Message message);
    public sealed virtual Message ProcessTrustFeb2005Renew(Message message);
    public sealed virtual Message ProcessTrustFeb2005Validate(Message message);
    public sealed virtual Message ProcessTrustFeb2005CancelResponse(Message message);
    public sealed virtual Message ProcessTrustFeb2005IssueResponse(Message message);
    public sealed virtual Message ProcessTrustFeb2005RenewResponse(Message message);
    public sealed virtual Message ProcessTrustFeb2005ValidateResponse(Message message);
    public SecurityTokenServiceConfiguration get_SecurityTokenServiceConfiguration();
    public sealed virtual IAsyncResult BeginTrust13Cancel(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrust13Cancel(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrust13Issue(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrust13Issue(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrust13Renew(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrust13Renew(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrust13Validate(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrust13Validate(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrust13CancelResponse(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrust13CancelResponse(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrust13IssueResponse(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrust13IssueResponse(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrust13RenewResponse(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrust13RenewResponse(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrust13ValidateResponse(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrust13ValidateResponse(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrustFeb2005Cancel(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrustFeb2005Cancel(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrustFeb2005Issue(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrustFeb2005Issue(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrustFeb2005Renew(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrustFeb2005Renew(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrustFeb2005Validate(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrustFeb2005Validate(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrustFeb2005CancelResponse(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrustFeb2005CancelResponse(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrustFeb2005IssueResponse(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrustFeb2005IssueResponse(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrustFeb2005RenewResponse(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrustFeb2005RenewResponse(IAsyncResult ar);
    public sealed virtual IAsyncResult BeginTrustFeb2005ValidateResponse(Message request, AsyncCallback callback, object state);
    public sealed virtual Message EndTrustFeb2005ValidateResponse(IAsyncResult ar);
    public sealed virtual void AddBindingParameters(ContractDescription contractDescription, ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyClientBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    public sealed virtual void ApplyDispatchBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime);
    public sealed virtual void Validate(ContractDescription contractDescription, ServiceEndpoint endpoint);
    public virtual void ExportContract(WsdlExporter exporter, WsdlContractConversionContext context);
    public virtual void ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context);
    protected virtual void IncludeNamespace(WsdlEndpointConversionContext context, string prefix, string ns);
    protected virtual void ImportSchema(WsdlExporter exporter, WsdlEndpointConversionContext context, string ns);
    private static XmlSchema GetXmlSchema(WsdlExporter exporter, string ns);
    protected virtual void FixMessageElement(ServiceDescription serviceDescription, PortType portType, WsdlEndpointConversionContext context, string operationName, XmlQualifiedName inputMessageElement, XmlQualifiedName outputMessageElement);
}
public static class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustServiceContractConstants : object {
    public static string ServiceBehaviorName;
    public static string Namespace;
}
public class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustServiceHost : ServiceHost {
    private WSTrustServiceContract _serviceContract;
    public WSTrustServiceContract ServiceContract { get; }
    public SecurityTokenServiceConfiguration SecurityTokenServiceConfiguration { get; }
    public WSTrustServiceHost(SecurityTokenServiceConfiguration securityTokenServiceConfiguration, Uri[] baseAddresses);
    public WSTrustServiceHost(WSTrustServiceContract serviceContract, Uri[] baseAddresses);
    public WSTrustServiceContract get_ServiceContract();
    public SecurityTokenServiceConfiguration get_SecurityTokenServiceConfiguration();
    protected virtual void ConfigureMetadata();
    protected virtual void ApplyConfiguration();
    protected virtual void InitializeRuntime();
    protected virtual void InitializeSecurityTokenManager();
}
public class Microsoft.IdentityModel.Protocols.WSTrust.WSTrustServiceHostFactory : ServiceHostFactory {
    public virtual ServiceHostBase CreateServiceHost(string constructorString, Uri[] baseAddresses);
    protected virtual SecurityTokenServiceConfiguration CreateSecurityTokenServiceConfiguration(string constructorString);
}
public static class Microsoft.IdentityModel.Protocols.WSTrust.WSUtilityConstants : object {
    public static string NamespaceURI;
    public static string Prefix;
}
internal class Microsoft.IdentityModel.Protocols.XmlEncryption.CipherDataElement : object {
    private Byte[] _iv;
    private Byte[] _cipherText;
    public Byte[] CipherValue { get; public set; }
    public Byte[] get_CipherValue();
    public void set_CipherValue(Byte[] value);
    public void ReadXml(XmlDictionaryReader reader);
    public void SetCipherValueFragments(Byte[] iv, Byte[] cipherText);
    public void WriteXml(XmlWriter writer);
}
internal class Microsoft.IdentityModel.Protocols.XmlEncryption.EncryptedDataElement : EncryptedTypeElement {
    public EncryptedDataElement(SecurityTokenSerializer tokenSerializer);
    public static bool CanReadFrom(XmlReader reader);
    public Byte[] Decrypt(SymmetricAlgorithm algorithm);
    public void Encrypt(SymmetricAlgorithm algorithm, Byte[] buffer, int offset, int length);
    private static Byte[] ExtractIVAndDecrypt(SymmetricAlgorithm algorithm, Byte[] cipherText, int offset, int count);
    private static void GenerateIVAndEncrypt(SymmetricAlgorithm algorithm, Byte[] plainText, int offset, int length, Byte[]& iv, Byte[]& cipherText);
    public virtual void ReadExtensions(XmlDictionaryReader reader);
    public virtual void ReadXml(XmlDictionaryReader reader);
    public virtual void WriteXml(XmlWriter writer, SecurityTokenSerializer securityTokenSerializer);
}
internal class Microsoft.IdentityModel.Protocols.XmlEncryption.EncryptedKeyElement : EncryptedTypeElement {
    private string _carriedName;
    private string _recipient;
    private List`1<string> _keyReferences;
    private List`1<string> _dataReferences;
    public string CarriedName { get; }
    public IList`1<string> DataReferences { get; }
    public IList`1<string> KeyReferences { get; }
    public EncryptedKeyElement(SecurityTokenSerializer keyInfoSerializer);
    public string get_CarriedName();
    public IList`1<string> get_DataReferences();
    public IList`1<string> get_KeyReferences();
    public virtual void ReadExtensions(XmlDictionaryReader reader);
    public virtual void ReadXml(XmlDictionaryReader reader);
    public EncryptedKeyIdentifierClause GetClause();
}
internal abstract class Microsoft.IdentityModel.Protocols.XmlEncryption.EncryptedTypeElement : object {
    private KeyInfo _keyInfo;
    private EncryptionMethodElement _encryptionMethod;
    private CipherDataElement _cipherData;
    private List`1<string> _properties;
    private SecurityTokenSerializer _keyInfoSerializer;
    private string _id;
    private string _type;
    private string _mimeType;
    private string _encoding;
    public string Algorithm { get; public set; }
    public string Id { get; public set; }
    public EncryptionMethodElement EncryptionMethod { get; public set; }
    public CipherDataElement CipherData { get; public set; }
    public SecurityKeyIdentifier KeyIdentifier { get; public set; }
    public SecurityTokenSerializer TokenSerializer { get; }
    public string Type { get; public set; }
    public EncryptedTypeElement(SecurityTokenSerializer keyInfoSerializer);
    public string get_Algorithm();
    public void set_Algorithm(string value);
    public string get_Id();
    public void set_Id(string value);
    public EncryptionMethodElement get_EncryptionMethod();
    public void set_EncryptionMethod(EncryptionMethodElement value);
    public CipherDataElement get_CipherData();
    public void set_CipherData(CipherDataElement value);
    public SecurityKeyIdentifier get_KeyIdentifier();
    public void set_KeyIdentifier(SecurityKeyIdentifier value);
    public abstract virtual void ReadExtensions(XmlDictionaryReader reader);
    public SecurityTokenSerializer get_TokenSerializer();
    public string get_Type();
    public void set_Type(string value);
    public virtual void ReadXml(XmlDictionaryReader reader);
}
internal class Microsoft.IdentityModel.Protocols.XmlEncryption.EncryptionMethodElement : object {
    private string _algorithm;
    private string _parameters;
    public string Algorithm { get; public set; }
    public string Parameters { get; public set; }
    public string get_Algorithm();
    public void set_Algorithm(string value);
    public string get_Parameters();
    public void set_Parameters(string value);
    public void ReadXml(XmlDictionaryReader reader);
    public void WriteXml(XmlWriter writer);
}
public static class Microsoft.IdentityModel.Protocols.XmlEncryption.XmlEncryptionConstants : object {
    public static string Namespace;
    public static string Prefix;
}
public class Microsoft.IdentityModel.Protocols.XmlSignature.AsymmetricSignatureOperatorsDelegate : MulticastDelegate {
    public AsymmetricSignatureOperatorsDelegate(object object, IntPtr method);
    public virtual void Invoke(AsymmetricSecurityKey asymmetricKey, string algorithm, AsymmetricSignatureFormatter& asymmetricSignatureFormatter, HashAlgorithm& hash);
    public virtual IAsyncResult BeginInvoke(AsymmetricSecurityKey asymmetricKey, string algorithm, AsymmetricSignatureFormatter& asymmetricSignatureFormatter, HashAlgorithm& hash, AsyncCallback callback, object object);
    public virtual void EndInvoke(AsymmetricSignatureFormatter& asymmetricSignatureFormatter, HashAlgorithm& hash, IAsyncResult result);
}
internal class Microsoft.IdentityModel.Protocols.XmlSignature.CanonicalizationDriver : object {
    private bool _closeReadersAfterProcessing;
    private XmlReader _reader;
    private String[] _inclusivePrefixes;
    private bool _includeComments;
    public bool CloseReadersAfterProcessing { get; public set; }
    public bool IncludeComments { get; public set; }
    public bool get_CloseReadersAfterProcessing();
    public void set_CloseReadersAfterProcessing(bool value);
    public bool get_IncludeComments();
    public void set_IncludeComments(bool value);
    public String[] GetInclusivePrefixes();
    public void Reset();
    public void SetInclusivePrefixes(String[] inclusivePrefixes);
    public void SetInput(XmlReader reader);
    public Byte[] GetBytes();
    public MemoryStream GetMemoryStream();
    public void WriteTo(HashAlgorithm hashAlgorithm);
    public void WriteTo(Stream canonicalStream);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.IdentityModel.Protocols.XmlSignature.DelegatingXmlDictionaryReader : XmlDictionaryReader {
    private XmlDictionaryReader _innerReader;
    protected XmlDictionaryReader InnerReader { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public bool IsEmptyElement { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public char QuoteChar { get; }
    public ReadState ReadState { get; }
    public string Value { get; }
    public Type ValueType { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    protected void InitializeInnerReader(XmlDictionaryReader innerReader);
    protected XmlDictionaryReader get_InnerReader();
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceURI);
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public virtual bool get_IsEmptyElement();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual char get_QuoteChar();
    public virtual ReadState get_ReadState();
    public virtual string get_Value();
    public virtual Type get_ValueType();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public virtual void Close();
    public virtual string GetAttribute(int i);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string LookupNamespace(string prefix);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool Read();
    public virtual bool ReadAttributeValue();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual UniqueId ReadContentAsUniqueId();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public virtual void ResolveEntity();
}
public class Microsoft.IdentityModel.Protocols.XmlSignature.DelegatingXmlDictionaryWriter : XmlDictionaryWriter {
    private XmlDictionaryWriter _innerWriter;
    private XmlWriter _tracingWriter;
    public static AsymmetricSignatureOperatorsDelegate GetAsymmetricSignatureOperators;
    protected XmlDictionaryWriter InnerWriter { get; }
    public WriteState WriteState { get; }
    public bool CanCanonicalize { get; }
    private static DelegatingXmlDictionaryWriter();
    protected void InitializeInnerWriter(XmlDictionaryWriter innerWriter);
    protected void InitializeTracingWriter(XmlWriter tracingWriter);
    protected XmlDictionaryWriter get_InnerWriter();
    public virtual void Close();
    public virtual void Flush();
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteCData(string text);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteComment(string text);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteEndAttribute();
    public virtual void WriteEndDocument();
    public virtual void WriteEndElement();
    public virtual void WriteEntityRef(string name);
    public virtual void WriteFullEndElement();
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual WriteState get_WriteState();
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteXmlAttribute(string localName, string value);
    public virtual void WriteXmlnsAttribute(string prefix, string namespaceUri);
    public virtual string LookupPrefix(string ns);
    public virtual bool get_CanCanonicalize();
    public virtual void StartCanonicalization(Stream stream, bool includeComments, String[] inclusivePrefixes);
    public virtual void EndCanonicalization();
}
public class Microsoft.IdentityModel.Protocols.XmlSignature.EmptySecurityKeyIdentifierClause : SecurityKeyIdentifierClause {
    private object _context;
    public object Context { get; }
    public EmptySecurityKeyIdentifierClause(object context);
    public object get_Context();
}
public class Microsoft.IdentityModel.Protocols.XmlSignature.EnvelopedSignatureReader : DelegatingXmlDictionaryReader {
    private bool _automaticallyReadSignature;
    private int _elementCount;
    private bool _resolveIntrinsicSigningKeys;
    private bool _requireSignature;
    private SigningCredentials _signingCredentials;
    private SecurityTokenResolver _signingTokenResolver;
    private SignedXml _signedXml;
    private SecurityTokenSerializer _tokenSerializer;
    private WrappedReader _wrappedReader;
    private bool _disposed;
    public SigningCredentials SigningCredentials { get; }
    internal XmlTokenStream XmlTokens { get; }
    public EnvelopedSignatureReader(XmlReader reader, SecurityTokenSerializer securityTokenSerializer);
    public EnvelopedSignatureReader(XmlReader reader, SecurityTokenSerializer securityTokenSerializer, SecurityTokenResolver signingTokenResolver);
    public EnvelopedSignatureReader(XmlReader reader, SecurityTokenSerializer securityTokenSerializer, SecurityTokenResolver signingTokenResolver, bool requireSignature, bool automaticallyReadSignature, bool resolveIntrinsicSigningKeys);
    private void OnEndOfRootElement();
    public SigningCredentials get_SigningCredentials();
    internal XmlTokenStream get_XmlTokens();
    public virtual bool Read();
    private void ReadSignature();
    private void ResolveSigningCredentials();
    public bool TryReadSignature();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.IdentityModel.Protocols.XmlSignature.EnvelopedSignatureTransform : Transform {
    private string _prefix;
    public string Algorithm { get; }
    public virtual string get_Algorithm();
    public virtual object Process(object input);
    public virtual Byte[] ProcessAndDigest(object input, string digestAlgorithm);
    public virtual void ReadFrom(XmlDictionaryReader reader);
    public virtual void WriteTo(XmlDictionaryWriter writer);
}
public class Microsoft.IdentityModel.Protocols.XmlSignature.EnvelopedSignatureWriter : DelegatingXmlDictionaryWriter {
    private XmlWriter _innerWriter;
    private SigningCredentials _signingCreds;
    private string _referenceId;
    private SecurityTokenSerializer _tokenSerializer;
    private HashStream _hashStream;
    private HashAlgorithm _hashAlgorithm;
    private int _elementCount;
    private MemoryStream _signatureFragment;
    private MemoryStream _endFragment;
    private bool _hasSignatureBeenMarkedForInsert;
    private MemoryStream _writerStream;
    private MemoryStream _preCanonicalTracingStream;
    private bool _disposed;
    public EnvelopedSignatureWriter(XmlWriter innerWriter, SigningCredentials signingCredentials, string referenceId, SecurityTokenSerializer securityTokenSerializer);
    private void ComputeSignature();
    private void OnEndRootElement();
    public void WriteSignature();
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.IdentityModel.Protocols.XmlSignature.EnvelopingSignatureReader : DelegatingXmlDictionaryReader {
    private SignedXml _signedXml;
    private SigningCredentials _signingCredentials;
    private bool _disposed;
    public SigningCredentials SigningCredentials { get; }
    public EnvelopingSignatureReader(XmlReader innerReader, SecurityTokenSerializer securityTokenSerializer);
    public EnvelopingSignatureReader(XmlReader innerReader, SecurityTokenSerializer securityTokenSerializer, SecurityTokenResolver signingTokenResolver);
    public SigningCredentials get_SigningCredentials();
    private void OnEndOfRootElement();
    public virtual bool Read();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.IdentityModel.Protocols.XmlSignature.EnvelopingSignatureWriter : DelegatingXmlDictionaryWriter {
    private SigningCredentials _signingCreds;
    private XmlDictionaryWriter _innerWriter;
    private HashStream _hashStream;
    private HashAlgorithm _hashAlgorithm;
    private MemoryStream _writerStream;
    private MemoryStream _preCanonicalTracingStream;
    private string _objectId;
    private SecurityTokenSerializer _tokenSerializer;
    private int _elementCount;
    private bool _disposed;
    public EnvelopingSignatureWriter(XmlWriter innerWriter, SigningCredentials signingCredentials, string objectId, SecurityTokenSerializer securityTokenSerializer);
    private void OnEndRootElement();
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    protected virtual void Dispose(bool disposing);
}
public static class Microsoft.IdentityModel.Protocols.XmlSignature.ExclusiveC14NConstants : object {
    public static string Namespace;
    public static string Prefix;
}
internal class Microsoft.IdentityModel.Protocols.XmlSignature.ExclusiveCanonicalizationTransform : Transform {
    private bool _includeComments;
    private string _inclusiveNamespacesPrefixList;
    private String[] _inclusivePrefixes;
    private string _inclusiveListElementPrefix;
    private string _prefix;
    private bool _isCanonicalizationMethod;
    public string Algorithm { get; }
    public bool IncludeComments { get; }
    public string InclusiveNamespacesPrefixList { get; public set; }
    public bool NeedsInclusiveContext { get; }
    public ExclusiveCanonicalizationTransform(bool isCanonicalizationMethod);
    protected ExclusiveCanonicalizationTransform(bool isCanonicalizationMethod, bool includeComments);
    public virtual string get_Algorithm();
    public bool get_IncludeComments();
    public string get_InclusiveNamespacesPrefixList();
    public void set_InclusiveNamespacesPrefixList(string value);
    public virtual bool get_NeedsInclusiveContext();
    public String[] GetInclusivePrefixes();
    private CanonicalizationDriver GetConfiguredDriver();
    public virtual object Process(object input);
    public virtual Byte[] ProcessAndDigest(object input, string digestAlgorithm);
    public void ProcessAndDigest(object input, HashAlgorithm hash);
    private void ProcessReaderInput(XmlReader reader, HashStream hashStream);
    public virtual void ReadFrom(XmlDictionaryReader reader);
    public virtual void WriteTo(XmlDictionaryWriter writer);
    private static String[] TokenizeInclusivePrefixList(string prefixList);
}
internal class Microsoft.IdentityModel.Protocols.XmlSignature.HashStream : Stream {
    private HashAlgorithm _hash;
    private long _length;
    private bool _hashNeedsReset;
    private MemoryStream _logStream;
    private TraceEventType _traceEventType;
    private bool _disposed;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public HashAlgorithm Hash { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public HashStream(HashAlgorithm hash);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public HashAlgorithm get_Hash();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public void FlushHash();
    public void FlushHash(MemoryStream preCanonicalBytes);
    public Byte[] FlushHashAndGetValue();
    public Byte[] FlushHashAndGetValue(MemoryStream preCanonicalBytes);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public void Reset();
    public void Reset(HashAlgorithm hash);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long length);
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.IdentityModel.Protocols.XmlSignature.KeyInfo : object {
    private SecurityTokenSerializer _keyInfoSerializer;
    private SecurityKeyIdentifier _ski;
    private string _retrieval;
    public string RetrievalMethod { get; }
    public SecurityKeyIdentifier KeyIdentifier { get; public set; }
    public KeyInfo(SecurityTokenSerializer keyInfoSerializer);
    public string get_RetrievalMethod();
    public SecurityKeyIdentifier get_KeyIdentifier();
    public void set_KeyIdentifier(SecurityKeyIdentifier value);
    public virtual void ReadXml(XmlDictionaryReader reader);
}
internal class Microsoft.IdentityModel.Protocols.XmlSignature.PreDigestedSignedInfo : SignedInfo {
    private static int InitialReferenceArraySize;
    private bool _addEnvelopedSignatureTransform;
    private int _count;
    private string _digestMethod;
    private ReferenceEntry[] _references;
    public bool AddEnvelopedSignatureTransform { get; public set; }
    public string DigestMethod { get; public set; }
    public int ReferenceCount { get; }
    public PreDigestedSignedInfo(string canonicalizationMethod, string digestMethod, string signatureMethod);
    public bool get_AddEnvelopedSignatureTransform();
    public void set_AddEnvelopedSignatureTransform(bool value);
    public string get_DigestMethod();
    public void set_DigestMethod(string value);
    public virtual int get_ReferenceCount();
    public void AddReference(string id, Byte[] digest);
    protected virtual void ComputeHash(HashStream hashStream);
    public virtual void ComputeReferenceDigests();
    public virtual void ReadFrom(XmlDictionaryReader reader, TransformFactory transformFactory);
    public virtual void EnsureAllReferencesVerified();
    public virtual bool EnsureDigestValidityIfIdMatches(string id, object resolvedXmlSource);
    public virtual void WriteTo(XmlDictionaryWriter writer);
}
internal class Microsoft.IdentityModel.Protocols.XmlSignature.Reference : object {
    private string _digestMethodElementAlgorithm;
    private DigestValueElement _digestValueElement;
    private string _id;
    private string _prefix;
    private object _resolvedXmlSource;
    private TransformChain _transformChain;
    private string _type;
    private string _uri;
    private bool _verified;
    private string _referredId;
    public string DigestMethod { get; public set; }
    public string Id { get; public set; }
    public TransformChain TransformChain { get; }
    public int TransformCount { get; }
    public string Type { get; public set; }
    public string Uri { get; public set; }
    public bool Verified { get; }
    public Byte[] DigestValue { get; public set; }
    public Reference(string uri);
    public Reference(string uri, object resolvedXmlSource);
    public string get_DigestMethod();
    public void set_DigestMethod(string value);
    public string get_Id();
    public void set_Id(string value);
    public TransformChain get_TransformChain();
    public int get_TransformCount();
    public string get_Type();
    public void set_Type(string value);
    public string get_Uri();
    public void set_Uri(string value);
    public bool get_Verified();
    public void AddTransform(Transform transform);
    public void EnsureDigestValidity(string id, Byte[] computedDigest);
    public void EnsureDigestValidity(string id, object resolvedXmlSource);
    public bool EnsureDigestValidityIfIdMatches(string id, Byte[] computedDigest);
    public bool EnsureDigestValidityIfIdMatches(string id, object resolvedXmlSource);
    public string ExtractReferredId();
    public bool CheckDigest();
    public void ComputeAndSetDigest();
    public Byte[] ComputeDigest();
    public Byte[] get_DigestValue();
    public void set_DigestValue(Byte[] value);
    public void ReadFrom(XmlDictionaryReader reader, TransformFactory transformFactory);
    public void SetResolvedXmlSource(object resolvedXmlSource);
    public void WriteTo(XmlDictionaryWriter writer);
}
internal class Microsoft.IdentityModel.Protocols.XmlSignature.Signature : object {
    private SignedXml _signedXml;
    private string _id;
    private SecurityKeyIdentifier _keyIdentifier;
    private string _prefix;
    private SignatureValueElement _signatureValueElement;
    private SignedInfo _signedInfo;
    private List`1<Stream> _signedObjects;
    private bool _disposed;
    public string Id { get; public set; }
    public SecurityKeyIdentifier KeyIdentifier { get; public set; }
    public SignedInfo SignedInfo { get; }
    public IList`1<Stream> SignedObjects { get; }
    public Signature(SignedXml signedXml, SignedInfo signedInfo);
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public string get_Id();
    public void set_Id(string value);
    public SecurityKeyIdentifier get_KeyIdentifier();
    public void set_KeyIdentifier(SecurityKeyIdentifier value);
    public SignedInfo get_SignedInfo();
    public IList`1<Stream> get_SignedObjects();
    public XmlDictionaryReader GetSignedObjectReader(int index);
    public Byte[] GetSignatureBytes();
    public void ReadFrom(XmlDictionaryReader reader);
    public void SetSignatureValue(Byte[] signatureValue);
    public void WriteTo(XmlDictionaryWriter writer);
}
public class Microsoft.IdentityModel.Protocols.XmlSignature.SignatureVerificationFailedException : SecurityTokenException {
    public SignatureVerificationFailedException(string message);
    public SignatureVerificationFailedException(string message, Exception inner);
    protected SignatureVerificationFailedException(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.IdentityModel.Protocols.XmlSignature.SignedInfo : object {
    private ExclusiveCanonicalizationTransform _canonicalizationMethodElement;
    private string _id;
    private string _signatureMethodAlgorithm;
    private MemoryStream _canonicalStream;
    private MemoryStream _bufferedStream;
    private List`1<Reference> _references;
    private Dictionary`2<string, string> _context;
    private string _prefix;
    private string _defaultNamespace;
    private bool _sendSide;
    private bool _disposed;
    public int ReferenceCount { get; }
    public Reference Item { get; }
    protected MemoryStream CanonicalStream { get; protected set; }
    protected bool SendSide { get; protected set; }
    public string CanonicalizationMethod { get; public set; }
    public string Id { get; public set; }
    public string SignatureMethod { get; public set; }
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual int get_ReferenceCount();
    public Reference get_Item(int index);
    public void AddReference(Reference reference);
    protected MemoryStream get_CanonicalStream();
    protected void set_CanonicalStream(MemoryStream value);
    protected bool get_SendSide();
    protected void set_SendSide(bool value);
    public string get_CanonicalizationMethod();
    public void set_CanonicalizationMethod(string value);
    public string get_Id();
    public void set_Id(string value);
    public string get_SignatureMethod();
    public void set_SignatureMethod(string value);
    public void ComputeHash(HashAlgorithm algorithm);
    protected virtual void ComputeHash(HashStream hashStream);
    public virtual void ComputeReferenceDigests();
    protected String[] GetInclusivePrefixes();
    protected virtual string GetNamespaceForInclusivePrefix(string prefix);
    public virtual void EnsureAllReferencesVerified();
    public void EnsureDigestValidity(string id, object resolvedXmlSource);
    public virtual bool EnsureDigestValidityIfIdMatches(string id, object resolvedXmlSource);
    protected void ReadCanonicalizationMethod(XmlDictionaryReader reader);
    public virtual void ReadFrom(XmlDictionaryReader reader, TransformFactory transformFactory);
    protected void ReadSignatureMethod(XmlDictionaryReader reader);
    protected void WriteCanonicalizationMethod(XmlDictionaryWriter writer);
    protected void WriteSignatureMethod(XmlDictionaryWriter writer);
    public virtual void WriteTo(XmlDictionaryWriter writer);
}
internal class Microsoft.IdentityModel.Protocols.XmlSignature.SignedXml : object {
    private SecurityTokenSerializer _tokenSerializer;
    private Signature _signature;
    private TransformFactory _transformFactory;
    private bool _disposed;
    public string Id { get; public set; }
    public SecurityTokenSerializer SecurityTokenSerializer { get; }
    public Signature Signature { get; }
    public TransformFactory TransformFactory { get; public set; }
    public SignedXml(SecurityTokenSerializer securityTokenSerializer);
    internal SignedXml(SignedInfo signedInfo, SecurityTokenSerializer securityTokenSerializer);
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public string get_Id();
    public void set_Id(string value);
    public SecurityTokenSerializer get_SecurityTokenSerializer();
    public Signature get_Signature();
    public TransformFactory get_TransformFactory();
    public void set_TransformFactory(TransformFactory value);
    private void ComputeSignature(HashAlgorithm hash, AsymmetricSignatureFormatter formatter, string signatureMethod);
    private void ComputeSignature(KeyedHashAlgorithm hash);
    public void ComputeSignature(SecurityKey signingKey);
    public void CompleteSignatureVerification();
    public void EnsureDigestValidity(string id, object resolvedXmlSource);
    public Byte[] GetSignatureValue();
    public void ReadFrom(XmlDictionaryReader reader);
    private void VerifySignature(KeyedHashAlgorithm hash);
    private void VerifySignature(HashAlgorithm hash, AsymmetricSignatureDeformatter deformatter, string signatureMethod);
    public void StartSignatureVerification(SecurityKey verificationKey);
    public void WriteTo(XmlDictionaryWriter writer);
}
internal abstract class Microsoft.IdentityModel.Protocols.XmlSignature.Transform : object {
    public string Algorithm { get; }
    public bool NeedsInclusiveContext { get; }
    public abstract virtual string get_Algorithm();
    public virtual bool get_NeedsInclusiveContext();
    public abstract virtual object Process(object input);
    public abstract virtual Byte[] ProcessAndDigest(object input, string digestAlgorithm);
    public abstract virtual void ReadFrom(XmlDictionaryReader reader);
    public abstract virtual void WriteTo(XmlDictionaryWriter writer);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.IdentityModel.Protocols.XmlSignature.TransformChain : object {
    private string _prefix;
    private IList`1<Transform> _transforms;
    public int TransformCount { get; }
    public Transform Item { get; }
    public bool NeedsInclusiveContext { get; }
    public int get_TransformCount();
    public Transform get_Item(int index);
    public bool get_NeedsInclusiveContext();
    public void Add(Transform transform);
    public void ReadFrom(XmlDictionaryReader reader, TransformFactory transformFactory);
    public Byte[] TransformToDigest(object data, string digestMethod);
    public void WriteTo(XmlDictionaryWriter writer);
}
internal class Microsoft.IdentityModel.Protocols.XmlSignature.TransformFactory : object {
    private static TransformFactory _instance;
    internal static TransformFactory Instance { get; }
    private static TransformFactory();
    internal static TransformFactory get_Instance();
    public virtual Transform CreateTransform(string transformAlgorithmUri);
}
internal class Microsoft.IdentityModel.Protocols.XmlSignature.WrappedReader : DelegatingXmlDictionaryReader {
    private XmlTokenStream _xmlTokens;
    private MemoryStream _contentStream;
    private TextReader _contentReader;
    private bool _recordDone;
    private int _depth;
    private bool _disposed;
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XmlTokenStream XmlTokens { get; }
    public WrappedReader(XmlDictionaryReader reader);
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public XmlTokenStream get_XmlTokens();
    public virtual void Close();
    public sealed virtual bool HasLineInfo();
    public virtual void MoveToAttribute(int index);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    private void OnEndOfContent();
    public virtual bool Read();
    private int ReadBinaryContent(Byte[] buffer, int offset, int count, bool isBase64);
    public virtual int ReadContentAsBase64(Byte[] buffer, int offset, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int offset, int count);
    public virtual int ReadValueChunk(Char[] chars, int offset, int count);
    private void Record();
    protected virtual void Dispose(bool disposing);
}
public static class Microsoft.IdentityModel.Protocols.XmlSignature.XmlSignatureConstants : object {
    public static string Namespace;
    public static string Prefix;
}
internal class Microsoft.IdentityModel.Protocols.XmlSignature.XmlTokenStream : object {
    private int _count;
    private XmlTokenEntry[] _entries;
    private string _excludedElement;
    private Nullable`1<int> _excludedElementDepth;
    private string _excludedElementNamespace;
    public XmlTokenStream(int initialSize);
    public XmlTokenStream(XmlTokenStream other);
    public void Add(XmlNodeType nodeType, string value);
    public void AddAttribute(string prefix, string localName, string namespaceUri, string value);
    public void AddElement(string prefix, string localName, string namespaceUri, bool isEmptyElement);
    private void EnsureCapacityToAdd();
    public void SetElementExclusion(string excludedElement, string excludedElementNamespace);
    public void SetElementExclusion(string excludedElement, string excludedElementNamespace, Nullable`1<int> excludedElementDepth);
    public XmlTokenStream Trim();
    public XmlTokenStreamWriter GetWriter();
}
internal class Microsoft.IdentityModel.QUOTA_LIMITS : ValueType {
    internal IntPtr PagedPoolLimit;
    internal IntPtr NonPagedPoolLimit;
    internal IntPtr MinimumWorkingSetSize;
    internal IntPtr MaximumWorkingSetSize;
    internal IntPtr PagefileLimit;
    internal IntPtr TimeLimit;
}
internal class Microsoft.IdentityModel.SafeCertChainHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal static SafeCertChainHandle InvalidHandle { get; }
    private SafeCertChainHandle(IntPtr handle);
    internal static SafeCertChainHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.IdentityModel.SafeCertContextHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal static SafeCertContextHandle InvalidHandle { get; }
    private SafeCertContextHandle(IntPtr handle);
    internal static SafeCertContextHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.IdentityModel.SafeCertStoreHandle : SafeHandleZeroOrMinusOneIsInvalid {
    public static SafeCertStoreHandle InvalidHandle { get; }
    private SafeCertStoreHandle(IntPtr handle);
    public static SafeCertStoreHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.IdentityModel.SafeCloseHandle : SafeHandleZeroOrMinusOneIsInvalid {
    private static string KERNEL32;
    internal SafeCloseHandle(IntPtr handle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
    [ReliabilityContractAttribute("3", "2")]
[SuppressUnmanagedCodeSecurityAttribute]
private static bool CloseHandle(IntPtr handle);
}
internal class Microsoft.IdentityModel.SafeHGlobalHandle : SafeHandleZeroOrMinusOneIsInvalid {
    public static SafeHGlobalHandle InvalidHandle { get; }
    private SafeHGlobalHandle(IntPtr handle);
    protected virtual bool ReleaseHandle();
    public static SafeHGlobalHandle get_InvalidHandle();
    public static SafeHGlobalHandle AllocHGlobal(string s);
    public static SafeHGlobalHandle AllocHGlobal(Byte[] bytes);
    public static SafeHGlobalHandle AllocHGlobal(UInt32 cb);
    public static SafeHGlobalHandle AllocHGlobal(int cb);
}
internal class Microsoft.IdentityModel.SafeLsaLogonProcessHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal static SafeLsaLogonProcessHandle InvalidHandle { get; }
    internal SafeLsaLogonProcessHandle(IntPtr handle);
    internal static SafeLsaLogonProcessHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.IdentityModel.SafeLsaReturnBufferHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal static SafeLsaReturnBufferHandle InvalidHandle { get; }
    internal SafeLsaReturnBufferHandle(IntPtr handle);
    internal static SafeLsaReturnBufferHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
internal enum Microsoft.IdentityModel.SECURITY_IMPERSONATION_LEVEL : Enum {
    public int value__;
    public static SECURITY_IMPERSONATION_LEVEL Anonymous;
    public static SECURITY_IMPERSONATION_LEVEL Identification;
    public static SECURITY_IMPERSONATION_LEVEL Impersonation;
    public static SECURITY_IMPERSONATION_LEVEL Delegation;
}
internal enum Microsoft.IdentityModel.SecurityLogonType : Enum {
    public int value__;
    public static SecurityLogonType Interactive;
    public static SecurityLogonType Network;
    public static SecurityLogonType Batch;
    public static SecurityLogonType Service;
    public static SecurityLogonType Proxy;
    public static SecurityLogonType Unlock;
}
public class Microsoft.IdentityModel.SecurityTokenService.AdditionalContext : object {
    private List`1<ContextItem> _contextItems;
    public IList`1<ContextItem> Items { get; }
    public AdditionalContext(IEnumerable`1<ContextItem> items);
    public IList`1<ContextItem> get_Items();
}
public class Microsoft.IdentityModel.SecurityTokenService.AlreadySignedInException : RequestException {
    public AlreadySignedInException(string message);
    public AlreadySignedInException(string message, Exception innerException);
    protected AlreadySignedInException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.AuthenticationBadElementsException : RequestException {
    public AuthenticationBadElementsException(string message);
    public AuthenticationBadElementsException(string message, Exception innerException);
    protected AuthenticationBadElementsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.BadRequestException : RequestException {
    public BadRequestException(string message);
    public BadRequestException(string message, Exception innerException);
    protected BadRequestException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.BinaryExchange : object {
    private Byte[] _binaryData;
    private Uri _valueType;
    private Uri _encodingType;
    public Byte[] BinaryData { get; }
    public Uri ValueType { get; }
    public Uri EncodingType { get; }
    public BinaryExchange(Byte[] binaryData, Uri valueType);
    public BinaryExchange(Byte[] binaryData, Uri valueType, Uri encodingType);
    public Byte[] get_BinaryData();
    public Uri get_ValueType();
    public Uri get_EncodingType();
}
public static class Microsoft.IdentityModel.SecurityTokenService.ComputedKeyAlgorithms : object {
    public static string Psha1;
}
public class Microsoft.IdentityModel.SecurityTokenService.ContextItem : object {
    private Uri _name;
    private Uri _scope;
    private string _value;
    public Uri Name { get; public set; }
    public Uri Scope { get; public set; }
    public string Value { get; public set; }
    public ContextItem(Uri name);
    public ContextItem(Uri name, string value);
    public ContextItem(Uri name, string value, Uri scope);
    public Uri get_Name();
    public void set_Name(Uri value);
    public Uri get_Scope();
    public void set_Scope(Uri value);
    public string get_Value();
    public void set_Value(string value);
}
public class Microsoft.IdentityModel.SecurityTokenService.EncryptedKeyEncryptingCredentials : EncryptingCredentials {
    private EncryptingCredentials _wrappingCredentials;
    private Byte[] _keyBytes;
    public EncryptingCredentials WrappingCredentials { get; }
    public EncryptedKeyEncryptingCredentials(X509Certificate2 certificate);
    public EncryptedKeyEncryptingCredentials(X509Certificate2 certificate, string keyWrappingAlgorithm, int keySizeInBits, string encryptionAlgorithm);
    public EncryptedKeyEncryptingCredentials(EncryptingCredentials wrappingCredentials, int keySizeInBits, string encryptionAlgorithm);
    public EncryptingCredentials get_WrappingCredentials();
}
public class Microsoft.IdentityModel.SecurityTokenService.EncryptingCredentials : object {
    private string _algorithm;
    private SecurityKey _key;
    private SecurityKeyIdentifier _keyIdentifier;
    public string Algorithm { get; public set; }
    public SecurityKey SecurityKey { get; public set; }
    public SecurityKeyIdentifier SecurityKeyIdentifier { get; public set; }
    public EncryptingCredentials(SecurityKey key, SecurityKeyIdentifier keyIdentifier, string algorithm);
    public string get_Algorithm();
    public void set_Algorithm(string value);
    public SecurityKey get_SecurityKey();
    public void set_SecurityKey(SecurityKey value);
    public SecurityKeyIdentifier get_SecurityKeyIdentifier();
    public void set_SecurityKeyIdentifier(SecurityKeyIdentifier value);
}
public class Microsoft.IdentityModel.SecurityTokenService.ExpiredDataException : RequestException {
    public ExpiredDataException(string message);
    public ExpiredDataException(string message, Exception innerException);
    protected ExpiredDataException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.FailedAuthenticationException : RequestException {
    public FailedAuthenticationException(string message);
    public FailedAuthenticationException(string message, Exception innerException);
    protected FailedAuthenticationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.FailedRequiredClaimsException : Exception {
    public FailedRequiredClaimsException(string message);
    public FailedRequiredClaimsException(string message, Exception innerException);
    protected FailedRequiredClaimsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.InvalidProofKeyException : Exception {
    public InvalidProofKeyException(string message);
    public InvalidProofKeyException(string message, Exception exception);
    protected InvalidProofKeyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.InvalidRequestException : RequestException {
    public InvalidRequestException(string message);
    public InvalidRequestException(string message, Exception innerException);
    protected InvalidRequestException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.InvalidScopeException : RequestException {
    private static string ScopeProperty;
    private string _address;
    public string Scope { get; }
    public InvalidScopeException(string address);
    public InvalidScopeException(string message, Exception exception);
    protected InvalidScopeException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_Scope();
}
public class Microsoft.IdentityModel.SecurityTokenService.InvalidSecurityTokenException : RequestException {
    public InvalidSecurityTokenException(string message);
    public InvalidSecurityTokenException(string message, Exception exception);
    protected InvalidSecurityTokenException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.InvalidTimeRangeException : RequestException {
    public InvalidTimeRangeException(string message);
    public InvalidTimeRangeException(string message, Exception exception);
    protected InvalidTimeRangeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.IssuerNameNotSupportedException : RequestException {
    public IssuerNameNotSupportedException(string message);
    public IssuerNameNotSupportedException(string message, Exception exception);
    protected IssuerNameNotSupportedException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.IdentityModel.SecurityTokenService.KeyTypes : object {
    public static string Symmetric;
    public static string Asymmetric;
    public static string Bearer;
}
public class Microsoft.IdentityModel.SecurityTokenService.MissingAppliesToException : Exception {
    public MissingAppliesToException(string message);
    public MissingAppliesToException(string message, Exception exception);
    protected MissingAppliesToException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.NeedFresherCredentialsException : RequestException {
    public NeedFresherCredentialsException(string message);
    public NeedFresherCredentialsException(string message, Exception exception);
    protected NeedFresherCredentialsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.NoMatchInScopeException : RequestException {
    public NoMatchInScopeException(string message);
    public NoMatchInScopeException(string message, Exception exception);
    protected NoMatchInScopeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.NoPseudonymInScopeException : RequestException {
    public NoPseudonymInScopeException(string message);
    public NoPseudonymInScopeException(string message, Exception exception);
    protected NoPseudonymInScopeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.NotSignedInException : RequestException {
    public NotSignedInException(string message);
    public NotSignedInException(string message, Exception exception);
    protected NotSignedInException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.Participants : object {
    private EndpointAddress _primary;
    private List`1<EndpointAddress> _participant;
    public EndpointAddress Primary { get; public set; }
    public List`1<EndpointAddress> Participant { get; }
    public EndpointAddress get_Primary();
    public void set_Primary(EndpointAddress value);
    public List`1<EndpointAddress> get_Participant();
}
public class Microsoft.IdentityModel.SecurityTokenService.RenewNeededException : RequestException {
    public RenewNeededException(string message);
    public RenewNeededException(string message, Exception exception);
    protected RenewNeededException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.IdentityModel.SecurityTokenService.RequestException : Exception {
    protected RequestException(string message);
    protected RequestException(string message, Exception innerException);
    protected RequestException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.RequestFailedException : RequestException {
    public RequestFailedException(string message);
    public RequestFailedException(string message, Exception innerException);
    protected RequestFailedException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.IdentityModel.SecurityTokenService.RequestTypes : object {
    public static string Cancel;
    public static string Issue;
    public static string Renew;
    public static string Validate;
    public static string IssueCard;
    public static string GetMetadata;
}
public class Microsoft.IdentityModel.SecurityTokenService.RstParameterNotAcceptedException : RequestException {
    public RstParameterNotAcceptedException(string message);
    public RstParameterNotAcceptedException(string message, Exception exception);
    protected RstParameterNotAcceptedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.Scope : object {
    private string _appliesToAddress;
    private string _replyToAddress;
    private EncryptingCredentials _encryptingCredentials;
    private SigningCredentials _signingCredentials;
    private bool _symmetricKeyEncryptionRequired;
    private bool _tokenEncryptionRequired;
    private Dictionary`2<string, object> _properties;
    public string AppliesToAddress { get; public set; }
    public EncryptingCredentials EncryptingCredentials { get; public set; }
    public string ReplyToAddress { get; public set; }
    public SigningCredentials SigningCredentials { get; public set; }
    public bool SymmetricKeyEncryptionRequired { get; public set; }
    public bool TokenEncryptionRequired { get; public set; }
    public Dictionary`2<string, object> Properties { get; }
    public Scope(string appliesToAddress);
    public Scope(string appliesToAddress, SigningCredentials signingCredentials);
    public Scope(string appliesToAddress, EncryptingCredentials encryptingCredentials);
    public Scope(string appliesToAddress, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials);
    public virtual string get_AppliesToAddress();
    public virtual void set_AppliesToAddress(string value);
    public virtual EncryptingCredentials get_EncryptingCredentials();
    public virtual void set_EncryptingCredentials(EncryptingCredentials value);
    public virtual string get_ReplyToAddress();
    public virtual void set_ReplyToAddress(string value);
    public virtual SigningCredentials get_SigningCredentials();
    public virtual void set_SigningCredentials(SigningCredentials value);
    public virtual bool get_SymmetricKeyEncryptionRequired();
    public virtual void set_SymmetricKeyEncryptionRequired(bool value);
    public virtual bool get_TokenEncryptionRequired();
    public virtual void set_TokenEncryptionRequired(bool value);
    public virtual Dictionary`2<string, object> get_Properties();
}
public abstract class Microsoft.IdentityModel.SecurityTokenService.SecurityTokenService : object {
    private SecurityTokenServiceConfiguration _securityTokenServiceConfiguration;
    private IClaimsPrincipal _principal;
    private RequestSecurityToken _request;
    private SecurityTokenDescriptor _tokenDescriptor;
    [CompilerGeneratedAttribute]
private Scope <Scope>k__BackingField;
    public SecurityTokenServiceConfiguration SecurityTokenServiceConfiguration { get; }
    public IClaimsPrincipal Principal { get; public set; }
    public RequestSecurityToken Request { get; public set; }
    public Scope Scope { get; public set; }
    protected SecurityTokenDescriptor SecurityTokenDescriptor { get; protected set; }
    protected SecurityTokenService(SecurityTokenServiceConfiguration securityTokenServiceConfiguration);
    public virtual IAsyncResult BeginCancel(IClaimsPrincipal principal, RequestSecurityToken request, AsyncCallback callback, object state);
    protected virtual IAsyncResult BeginGetScope(IClaimsPrincipal principal, RequestSecurityToken request, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginIssue(IClaimsPrincipal principal, RequestSecurityToken request, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginRenew(IClaimsPrincipal principal, RequestSecurityToken request, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginValidate(IClaimsPrincipal principal, RequestSecurityToken request, AsyncCallback callback, object state);
    public virtual RequestSecurityTokenResponse Cancel(IClaimsPrincipal principal, RequestSecurityToken request);
    protected virtual SecurityTokenDescriptor CreateSecurityTokenDescriptor(RequestSecurityToken request, Scope scope);
    protected virtual string GetIssuerName();
    private string GetValidIssuerName();
    protected virtual ProofDescriptor GetProofToken(RequestSecurityToken request, Scope scope);
    protected virtual EncryptingCredentials GetRequestorProofEncryptingCredentials(RequestSecurityToken request);
    protected virtual Lifetime GetTokenLifetime(Lifetime requestLifetime);
    private void VerifyComputedLifetime(DateTime created, DateTime expires);
    protected virtual RequestSecurityTokenResponse GetResponse(RequestSecurityToken request, SecurityTokenDescriptor tokenDescriptor);
    public virtual RequestSecurityTokenResponse EndCancel(IAsyncResult result);
    protected virtual Scope EndGetScope(IAsyncResult result);
    public virtual RequestSecurityTokenResponse EndIssue(IAsyncResult result);
    public virtual RequestSecurityTokenResponse EndRenew(IAsyncResult result);
    public virtual RequestSecurityTokenResponse EndValidate(IAsyncResult result);
    protected abstract virtual Scope GetScope(IClaimsPrincipal principal, RequestSecurityToken request);
    protected abstract virtual IClaimsIdentity GetOutputClaimsIdentity(IClaimsPrincipal principal, RequestSecurityToken request, Scope scope);
    protected virtual IAsyncResult BeginGetOutputClaimsIdentity(IClaimsPrincipal principal, RequestSecurityToken request, Scope scope, AsyncCallback callback, object state);
    protected virtual IClaimsIdentity EndGetOutputClaimsIdentity(IAsyncResult result);
    public virtual RequestSecurityTokenResponse Issue(IClaimsPrincipal principal, RequestSecurityToken request);
    protected virtual DisplayToken GetDisplayToken(string requestedDisplayTokenLanguage, IClaimsIdentity subject);
    protected virtual SecurityTokenHandler GetSecurityTokenHandler(string requestedTokenType);
    private void OnGetScopeComplete(IAsyncResult result);
    private void OnGetOutputClaimsIdentityComplete(IAsyncResult result);
    public SecurityTokenServiceConfiguration get_SecurityTokenServiceConfiguration();
    public IClaimsPrincipal get_Principal();
    public void set_Principal(IClaimsPrincipal value);
    public RequestSecurityToken get_Request();
    public void set_Request(RequestSecurityToken value);
    [CompilerGeneratedAttribute]
public Scope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(Scope value);
    protected SecurityTokenDescriptor get_SecurityTokenDescriptor();
    protected void set_SecurityTokenDescriptor(SecurityTokenDescriptor value);
    public virtual RequestSecurityTokenResponse Renew(IClaimsPrincipal principal, RequestSecurityToken request);
    public virtual RequestSecurityTokenResponse Validate(IClaimsPrincipal principal, RequestSecurityToken request);
    protected virtual void ValidateRequest(RequestSecurityToken request);
    private static bool IsKnownType(string keyType);
}
public class Microsoft.IdentityModel.SecurityTokenService.UnableToRenewException : RequestException {
    public UnableToRenewException(string message);
    public UnableToRenewException(string message, Exception exception);
    protected UnableToRenewException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.UnsupportedClaimsDialectException : RequestException {
    public UnsupportedClaimsDialectException(string message);
    public UnsupportedClaimsDialectException(string message, Exception innerException);
    protected UnsupportedClaimsDialectException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.UnsupportedEncodingException : RequestException {
    public UnsupportedEncodingException(string message);
    public UnsupportedEncodingException(string message, Exception exception);
    protected UnsupportedEncodingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.SecurityTokenService.UnsupportedTokenTypeBadRequestException : BadRequestException {
    private static string TokenTypeProperty;
    private string _tokenType;
    public string TokenType { get; public set; }
    public UnsupportedTokenTypeBadRequestException(string tokenType);
    public UnsupportedTokenTypeBadRequestException(string message, Exception exception);
    protected UnsupportedTokenTypeBadRequestException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_TokenType();
    public void set_TokenType(string value);
}
public class Microsoft.IdentityModel.SecurityTokenService.X509EncryptingCredentials : EncryptingCredentials {
    private X509Certificate2 _certificate;
    public X509Certificate2 Certificate { get; }
    public X509EncryptingCredentials(X509Certificate2 certificate);
    public X509EncryptingCredentials(X509Certificate2 certificate, string keyWrappingAlgorithm);
    public X509EncryptingCredentials(X509Certificate2 certificate, SecurityKeyIdentifier ski);
    public X509EncryptingCredentials(X509Certificate2 certificate, SecurityKeyIdentifier ski, string keyWrappingAlgorithm);
    internal X509EncryptingCredentials(X509SecurityToken token);
    internal X509EncryptingCredentials(X509SecurityToken token, string keyWrappingAlgorithm);
    internal X509EncryptingCredentials(X509SecurityToken token, SecurityKeyIdentifier ski, string keyWrappingAlgorithm);
    public X509Certificate2 get_Certificate();
}
public class Microsoft.IdentityModel.SecurityTokenService.X509SigningCredentials : SigningCredentials {
    private X509Certificate2 _certificate;
    public X509Certificate2 Certificate { get; }
    public X509SigningCredentials(X509Certificate2 certificate);
    public X509SigningCredentials(X509Certificate2 certificate, string signatureAlgorithm, string digestAlgorithm);
    public X509SigningCredentials(X509Certificate2 certificate, SecurityKeyIdentifier ski);
    public X509SigningCredentials(X509Certificate2 certificate, SecurityKeyIdentifier ski, string signatureAlgorithm, string digestAlgorithm);
    internal X509SigningCredentials(X509SecurityToken token, SecurityKeyIdentifier ski, string signatureAlgorithm, string digestAlgorithm);
    public X509Certificate2 get_Certificate();
}
public static class Microsoft.IdentityModel.SessionConstants : object {
    public static string Namespace;
    public static string TokenTypeURI;
    public static int DefaultDerivedKeyLength;
}
internal class Microsoft.IdentityModel.SID_AND_ATTRIBUTES : ValueType {
    internal IntPtr Sid;
    internal UInt32 Attributes;
    internal static long SizeOf;
    private static SID_AND_ATTRIBUTES();
}
internal class Microsoft.IdentityModel.SR : object {
    public static string ID0001;
    public static string ID0002;
    public static string ID0003;
    public static string ID0005;
    public static string ID0006;
    public static string ID0007;
    public static string ID0008;
    public static string ID0009;
    public static string ID0010;
    public static string ID0011;
    public static string ID0012;
    public static string ID0013;
    public static string ID0014;
    public static string ID0015;
    public static string ID0016;
    public static string ID0017;
    public static string ID0018;
    public static string ID0019;
    public static string ID0020;
    public static string ID0021;
    public static string ID0022;
    public static string ID1001;
    public static string ID1002;
    public static string ID1003;
    public static string ID1004;
    public static string ID1005;
    public static string ID1012;
    public static string ID1013;
    public static string ID1014;
    public static string ID1016;
    public static string ID1020;
    public static string ID1022;
    public static string ID1024;
    public static string ID1025;
    public static string ID1027;
    public static string ID1028;
    public static string ID1029;
    public static string ID1030;
    public static string ID1032;
    public static string ID1033;
    public static string ID1034;
    public static string ID1035;
    public static string ID1036;
    public static string ID1037;
    public static string ID1038;
    public static string ID1039;
    public static string ID1043;
    public static string ID1044;
    public static string ID1045;
    public static string ID1046;
    public static string ID1047;
    public static string ID1048;
    public static string ID1050;
    public static string ID1052;
    public static string ID1053;
    public static string ID1054;
    public static string ID1055;
    public static string ID1056;
    public static string ID1057;
    public static string ID1058;
    public static string ID1059;
    public static string ID1060;
    public static string ID1061;
    public static string ID1062;
    public static string ID1063;
    public static string ID1064;
    public static string ID1065;
    public static string ID1066;
    public static string ID1067;
    public static string ID1068;
    public static string ID1069;
    public static string ID1070;
    public static string ID1071;
    public static string ID1072;
    public static string ID1073;
    public static string ID1074;
    public static string ID2000;
    public static string ID2001;
    public static string ID2002;
    public static string ID2003;
    public static string ID2004;
    public static string ID2005;
    public static string ID2007;
    public static string ID2008;
    public static string ID2009;
    public static string ID2010;
    public static string ID2011;
    public static string ID2012;
    public static string ID2013;
    public static string ID2014;
    public static string ID2015;
    public static string ID2016;
    public static string ID2017;
    public static string ID2018;
    public static string ID2027;
    public static string ID2028;
    public static string ID2029;
    public static string ID2030;
    public static string ID2037;
    public static string ID2039;
    public static string ID2041;
    public static string ID2042;
    public static string ID2043;
    public static string ID2044;
    public static string ID2045;
    public static string ID2046;
    public static string ID2047;
    public static string ID2048;
    public static string ID2049;
    public static string ID2050;
    public static string ID2051;
    public static string ID2052;
    public static string ID2053;
    public static string ID2055;
    public static string ID2056;
    public static string ID2057;
    public static string ID2058;
    public static string ID2059;
    public static string ID2064;
    public static string ID2069;
    public static string ID2070;
    public static string ID2072;
    public static string ID2073;
    public static string ID2074;
    public static string ID2075;
    public static string ID2076;
    public static string ID2077;
    public static string ID2078;
    public static string ID2079;
    public static string ID2080;
    public static string ID2081;
    public static string ID2082;
    public static string ID2083;
    public static string ID2084;
    public static string ID2085;
    public static string ID2086;
    public static string ID2087;
    public static string ID2088;
    public static string ID2089;
    public static string ID2090;
    public static string ID2091;
    public static string ID2092;
    public static string ID2093;
    public static string ID2094;
    public static string ID2095;
    public static string ID2096;
    public static string ID2097;
    public static string ID2098;
    public static string ID2099;
    public static string ID2100;
    public static string ID2101;
    public static string ID2102;
    public static string ID2103;
    public static string ID2104;
    public static string ID3000;
    public static string ID3001;
    public static string ID3002;
    public static string ID3003;
    public static string ID3004;
    public static string ID3005;
    public static string ID3006;
    public static string ID3007;
    public static string ID3009;
    public static string ID3010;
    public static string ID3011;
    public static string ID3012;
    public static string ID3013;
    public static string ID3014;
    public static string ID3015;
    public static string ID3016;
    public static string ID3017;
    public static string ID3019;
    public static string ID3020;
    public static string ID3021;
    public static string ID3022;
    public static string ID3023;
    public static string ID3024;
    public static string ID3025;
    public static string ID3026;
    public static string ID3027;
    public static string ID3029;
    public static string ID3030;
    public static string ID3031;
    public static string ID3032;
    public static string ID3033;
    public static string ID3034;
    public static string ID3035;
    public static string ID3037;
    public static string ID3039;
    public static string ID3040;
    public static string ID3041;
    public static string ID3042;
    public static string ID3043;
    public static string ID3044;
    public static string ID3045;
    public static string ID3046;
    public static string ID3047;
    public static string ID3049;
    public static string ID3050;
    public static string ID3051;
    public static string ID3052;
    public static string ID3053;
    public static string ID3054;
    public static string ID3057;
    public static string ID3059;
    public static string ID3060;
    public static string ID3061;
    public static string ID3062;
    public static string ID3063;
    public static string ID3064;
    public static string ID3065;
    public static string ID3066;
    public static string ID3067;
    public static string ID3068;
    public static string ID3069;
    public static string ID3070;
    public static string ID3074;
    public static string ID3079;
    public static string ID3080;
    public static string ID3082;
    public static string ID3087;
    public static string ID3089;
    public static string ID3091;
    public static string ID3092;
    public static string ID3094;
    public static string ID3095;
    public static string ID3096;
    public static string ID3097;
    public static string ID3098;
    public static string ID3112;
    public static string ID3113;
    public static string ID3114;
    public static string ID3115;
    public static string ID3116;
    public static string ID3117;
    public static string ID3123;
    public static string ID3124;
    public static string ID3125;
    public static string ID3126;
    public static string ID3127;
    public static string ID3128;
    public static string ID3129;
    public static string ID3130;
    public static string ID3135;
    public static string ID3136;
    public static string ID3137;
    public static string ID3138;
    public static string ID3139;
    public static string ID3140;
    public static string ID3141;
    public static string ID3142;
    public static string ID3143;
    public static string ID3144;
    public static string ID3146;
    public static string ID3147;
    public static string ID3148;
    public static string ID3149;
    public static string ID3150;
    public static string ID3151;
    public static string ID3152;
    public static string ID3153;
    public static string ID3154;
    public static string ID3155;
    public static string ID3156;
    public static string ID3157;
    public static string ID3158;
    public static string ID3159;
    public static string ID3160;
    public static string ID3161;
    public static string ID3162;
    public static string ID3163;
    public static string ID3164;
    public static string ID3165;
    public static string ID3166;
    public static string ID3171;
    public static string ID3172;
    public static string ID3173;
    public static string ID3174;
    public static string ID3175;
    public static string ID3176;
    public static string ID3177;
    public static string ID3178;
    public static string ID3179;
    public static string ID3180;
    public static string ID3181;
    public static string ID3182;
    public static string ID3183;
    public static string ID3184;
    public static string ID3185;
    public static string ID3186;
    public static string ID3187;
    public static string ID3188;
    public static string ID3189;
    public static string ID3190;
    public static string ID3191;
    public static string ID3192;
    public static string ID3193;
    public static string ID3194;
    public static string ID3195;
    public static string ID3196;
    public static string ID3197;
    public static string ID3198;
    public static string ID3199;
    public static string ID3200;
    public static string ID3201;
    public static string ID3202;
    public static string ID3203;
    public static string ID3204;
    public static string ID3205;
    public static string ID3206;
    public static string ID3207;
    public static string ID3208;
    public static string ID3209;
    public static string ID3210;
    public static string ID3211;
    public static string ID3212;
    public static string ID3215;
    public static string ID3216;
    public static string ID3217;
    public static string ID3218;
    public static string ID3219;
    public static string ID3220;
    public static string ID3221;
    public static string ID3222;
    public static string ID3223;
    public static string ID3224;
    public static string ID3225;
    public static string ID3226;
    public static string ID3227;
    public static string ID3228;
    public static string ID3233;
    public static string ID3234;
    public static string ID3235;
    public static string ID3236;
    public static string ID3237;
    public static string ID3238;
    public static string ID3239;
    public static string ID3240;
    public static string ID3241;
    public static string ID3242;
    public static string ID3243;
    public static string ID3244;
    public static string ID3245;
    public static string ID3246;
    public static string ID3247;
    public static string ID3248;
    public static string ID3249;
    public static string ID3250;
    public static string ID3251;
    public static string ID3252;
    public static string ID3253;
    public static string ID3254;
    public static string ID3255;
    public static string ID3256;
    public static string ID3257;
    public static string ID3258;
    public static string ID3259;
    public static string ID3260;
    public static string ID3261;
    public static string ID3262;
    public static string ID3263;
    public static string ID3264;
    public static string ID3265;
    public static string ID3266;
    public static string ID3267;
    public static string ID3268;
    public static string ID3269;
    public static string ID3270;
    public static string ID3272;
    public static string ID3273;
    public static string ID3274;
    public static string ID3275;
    public static string ID3276;
    public static string ID3277;
    public static string ID3278;
    public static string ID3279;
    public static string ID3280;
    public static string ID3281;
    public static string ID3282;
    public static string ID3283;
    public static string ID3284;
    public static string ID3285;
    public static string ID3286;
    public static string ID3287;
    public static string ID4001;
    public static string ID4002;
    public static string ID4003;
    public static string ID4004;
    public static string ID4005;
    public static string ID4007;
    public static string ID4008;
    public static string ID4010;
    public static string ID4011;
    public static string ID4013;
    public static string ID4014;
    public static string ID4020;
    public static string ID4022;
    public static string ID4023;
    public static string ID4024;
    public static string ID4025;
    public static string ID4028;
    public static string ID4029;
    public static string ID4030;
    public static string ID4031;
    public static string ID4034;
    public static string ID4035;
    public static string ID4036;
    public static string ID4037;
    public static string ID4038;
    public static string ID4039;
    public static string ID4040;
    public static string ID4041;
    public static string ID4046;
    public static string ID4050;
    public static string ID4051;
    public static string ID4052;
    public static string ID4053;
    public static string ID4056;
    public static string ID4058;
    public static string ID4059;
    public static string ID4060;
    public static string ID4061;
    public static string ID4062;
    public static string ID4063;
    public static string ID4064;
    public static string ID4065;
    public static string ID4066;
    public static string ID4067;
    public static string ID4068;
    public static string ID4069;
    public static string ID4070;
    public static string ID4071;
    public static string ID4072;
    public static string ID4073;
    public static string ID4075;
    public static string ID4076;
    public static string ID4077;
    public static string ID4078;
    public static string ID4079;
    public static string ID4080;
    public static string ID4081;
    public static string ID4082;
    public static string ID4083;
    public static string ID4084;
    public static string ID4085;
    public static string ID4086;
    public static string ID4087;
    public static string ID4088;
    public static string ID4089;
    public static string ID4090;
    public static string ID4091;
    public static string ID4092;
    public static string ID4093;
    public static string ID4094;
    public static string ID4095;
    public static string ID4096;
    public static string ID4097;
    public static string ID4098;
    public static string ID4099;
    public static string ID4200;
    public static string ID4201;
    public static string ID4202;
    public static string ID4203;
    public static string ID4204;
    public static string ID4205;
    public static string ID4206;
    public static string ID4207;
    public static string ID4208;
    public static string ID4209;
    public static string ID4210;
    public static string ID4211;
    public static string ID4212;
    public static string ID4213;
    public static string ID4216;
    public static string ID4217;
    public static string ID4218;
    public static string ID4220;
    public static string ID4221;
    public static string ID4222;
    public static string ID4223;
    public static string ID4224;
    public static string ID4225;
    public static string ID4227;
    public static string ID4229;
    public static string ID4230;
    public static string ID4232;
    public static string ID4234;
    public static string ID4237;
    public static string ID4239;
    public static string ID4240;
    public static string ID4242;
    public static string ID4243;
    public static string ID4244;
    public static string ID4245;
    public static string ID4248;
    public static string ID4249;
    public static string ID4250;
    public static string ID4251;
    public static string ID4252;
    public static string ID4254;
    public static string ID4255;
    public static string ID4256;
    public static string ID4257;
    public static string ID4258;
    public static string ID4259;
    public static string ID4260;
    public static string ID4261;
    public static string ID4262;
    public static string ID4263;
    public static string ID4264;
    public static string ID4265;
    public static string ID4266;
    public static string ID4267;
    public static string ID4268;
    public static string ID4269;
    public static string ID4270;
    public static string ID4271;
    public static string ID4272;
    public static string ID4273;
    public static string ID4274;
    public static string ID4275;
    public static string ID4276;
    public static string ID4277;
    public static string ID4278;
    public static string ID4279;
    public static string ID4280;
    public static string ID4281;
    public static string ID4282;
    public static string ID4283;
    public static string ID4284;
    public static string ID4285;
    public static string ID4286;
    public static string ID4287;
    public static string ID4289;
    public static string ID4290;
    public static string ID4291;
    public static string ID4100;
    public static string ID4101;
    public static string ID4102;
    public static string ID4104;
    public static string ID4105;
    public static string ID4106;
    public static string ID4107;
    public static string ID4108;
    public static string ID4110;
    public static string ID4111;
    public static string ID4112;
    public static string ID4113;
    public static string ID4114;
    public static string ID4115;
    public static string ID4116;
    public static string ID4117;
    public static string ID4118;
    public static string ID4119;
    public static string ID4120;
    public static string ID4121;
    public static string ID4122;
    public static string ID4123;
    public static string ID4124;
    public static string ID4125;
    public static string ID4126;
    public static string ID4127;
    public static string ID4128;
    public static string ID4129;
    public static string ID4130;
    public static string ID4131;
    public static string ID4132;
    public static string ID4133;
    public static string ID4134;
    public static string ID4136;
    public static string ID4138;
    public static string ID4139;
    public static string ID4140;
    public static string ID4141;
    public static string ID4142;
    public static string ID4147;
    public static string ID4148;
    public static string ID4149;
    public static string ID4150;
    public static string ID4151;
    public static string ID4152;
    public static string ID4153;
    public static string ID4154;
    public static string ID4157;
    public static string ID4158;
    public static string ID4159;
    public static string ID4160;
    public static string ID4161;
    public static string ID4162;
    public static string ID4172;
    public static string ID4173;
    public static string ID4174;
    public static string ID4175;
    public static string ID4176;
    public static string ID4177;
    public static string ID4178;
    public static string ID4179;
    public static string ID4180;
    public static string ID4181;
    public static string ID4182;
    public static string ID4183;
    public static string ID4184;
    public static string ID4185;
    public static string ID4187;
    public static string ID4188;
    public static string ID4189;
    public static string ID4190;
    public static string ID4191;
    public static string ID4192;
    public static string ID4193;
    public static string ID5001;
    public static string ID5002;
    public static string ID5003;
    public static string ID5004;
    public static string ID5005;
    public static string ID5007;
    public static string ID5008;
    public static string ID5014;
    public static string ID5015;
    public static string ID5016;
    public static string ID5020;
    public static string ID5022;
    public static string ID5023;
    public static string ID5024;
    public static string ID6000;
    public static string ID6001;
    public static string ID6002;
    public static string ID6003;
    public static string ID6004;
    public static string ID6005;
    public static string ID6006;
    public static string ID6007;
    public static string ID6008;
    public static string ID6009;
    public static string ID6010;
    public static string ID6011;
    public static string ID6012;
    public static string ID6013;
    public static string ID6014;
    public static string ID6015;
    public static string ID6016;
    public static string ID6017;
    public static string ID6018;
    public static string ID6019;
    public static string ID6020;
    public static string ID6021;
    public static string ID6022;
    public static string ID6023;
    public static string ID6024;
    public static string ID6025;
    public static string ID6027;
    public static string ID6028;
    public static string ID6029;
    public static string ID6030;
    public static string ID6031;
    public static string ID6033;
    public static string ID6034;
    public static string ID6035;
    public static string ID6036;
    public static string ID6037;
    public static string ID6038;
    public static string ID6039;
    public static string ID6040;
    public static string ID6041;
    public static string ID6042;
    public static string ID6043;
    public static string ID6044;
    public static string ID6045;
    public static string ID6046;
    public static string ID6047;
    public static string ID6048;
    public static string ID7000;
    public static string ID7001;
    public static string ID7002;
    public static string ID7004;
    public static string ID7006;
    public static string ID7005;
    public static string ID7007;
    public static string ID7008;
    public static string ID7009;
    public static string ID7010;
    public static string ID7011;
    public static string ID7012;
    public static string ID7013;
    public static string ID7015;
    public static string ID7017;
    public static string ID7018;
    public static string ID7019;
    public static string ID7021;
    public static string ID7022;
    public static string ID7023;
    public static string ID7024;
    public static string ID7025;
    public static string ID7026;
    public static string ID7027;
    public static string ID7028;
    public static string NoCert;
    public static string GivenNameText;
    public static string SurnameText;
    public static string EmailAddressText;
    public static string StreetAddressText;
    public static string LocalityText;
    public static string StateOrProvinceText;
    public static string PostalCodeText;
    public static string CountryText;
    public static string HomePhoneText;
    public static string OtherPhoneText;
    public static string MobilePhoneText;
    public static string DateOfBirthText;
    public static string GenderText;
    public static string PPIDText;
    public static string WebPageText;
    public static string NameText;
    public static string RoleText;
    public static string GivenNameDescription;
    public static string SurnameDescription;
    public static string EmailAddressDescription;
    public static string StreetAddressDescription;
    public static string LocalityDescription;
    public static string StateOrProvinceDescription;
    public static string PostalCodeDescription;
    public static string CountryDescription;
    public static string HomePhoneDescription;
    public static string OtherPhoneDescription;
    public static string MobilePhoneDescription;
    public static string DateOfBirthDescription;
    public static string GenderDescription;
    public static string PPIDDescription;
    public static string WebPageDescription;
    public static string NameDescription;
    public static string RoleDescription;
    public static string Category_Action;
    public static string Category_Appearance;
    public static string Category_Behavior;
    public static string Category_FederatedPassive;
    public static string Category_Layout;
    public static string Category_Styles;
    public static string SignIn_RedirectingToIdentityProvider;
    public static string SignIn_SignedIn;
    public static string SignIn_TokenReceived;
    public static string SignIn_TokenValidated;
    public static string SignIn_SessionTokenCreated;
    public static string SignIn_DefaultErrorText;
    public static string SignIn_DefaultSignInText;
    public static string SignIn_DefaultTitleText;
    public static string SignIn_TitleText;
    public static string SignIn_DestinationPageUrl;
    public static string SignIn_SignInError;
    public static string SignIn_ErrorAction;
    public static string SignIn_ErrorText;
    public static string SignIn_Orientation;
    public static string SignIn_RequireHttps;
    public static string SignIn_SignInImageUrl;
    public static string SignIn_SignInButtonStyle;
    public static string SignIn_SignInButtonType;
    public static string SignIn_SignInText;
    public static string SignIn_SignInContext;
    public static string SignIn_BorderPadding;
    public static string SignIn_TitleTextStyle;
    public static string SignIn_ErrorTextStyle;
    public static string SignIn_VisibleWhenSignedIn;
    public static string SignIn_AutoSignIn;
    public static string SignIn_SignInMode;
    public static string SignIn_DefaultRememberMeText;
    public static string SignIn_DisplayRememberMe;
    public static string SignIn_RememberMeSet;
    public static string SignIn_RememberMeText;
    public static string SignIn_CheckBoxStyle;
    public static string SignIn_ShowButtonImage;
    public static string SignIn_InvokeFedUtil;
    public static string SignIn_InvokeFedUtilError;
    public static string SignIn_InvokeFedUtilErrorConfigProperty;
    public static string SignIn_InvokeFedUtilErrorGeneric;
    public static string SimpleButton_OnClientClick;
    public static string SignInStatus_SignInText;
    public static string SignInStatus_SignOutPageUrl;
    public static string SignInStatus_SignOutAction;
    public static string SignInStatus_SignOutText;
    public static string SignInStatus_SignedOut;
    public static string SignInStatus_SigningOut;
    public static string SignInStatus_SignOutError;
    public static string SignInStatus_DefaultSignInText;
    public static string SignInStatus_DefaultSignOutText;
    public static string SignInStatus_SignInButtonType;
    public static string SignInStatus_SignInImageUrl;
    public static string SignInStatus_SignOutImageUrl;
    public static string SignInStatus_SignedOutView;
    public static string SignInStatus_SignedInView;
    public static string FederatedPassiveSignIn_HomeRealm;
    public static string FederatedPassiveSignIn_Issuer;
    public static string FederatedPassiveSignIn_Realm;
    public static string FederatedPassiveSignIn_Reply;
    public static string FederatedPassiveSignIn_Resource;
    public static string FederatedPassiveSignIn_Request;
    public static string FederatedPassiveSignIn_RequestPtr;
    public static string FederatedPassiveSignIn_Freshness;
    public static string FederatedPassiveSignIn_AuthenticationType;
    public static string FederatedPassiveSignIn_Policy;
    public static string FederatedPassiveSignIn_SignInQueryString;
    public static string FederatedPassiveSignIn_UseFederationPropertiesFromConfiguration;
    public static string FederatedPassiveSignIn_PropertySetWarning;
    public static string FederatedPassiveSignIn_UseFederationPropertiesSet;
    public static string FederatedPassiveSignIn_Property_Information;
    public static string WebControls_Views;
    public static string WebControls_ViewsDescription;
    public static string HtmlPostTitle;
    public static string HtmlPostNoScriptButtonText;
    public static string HtmlPostNoScriptMessage;
    public static string EventLogTraceFailedWithExceptionMessage;
    public static string EventLogTraceFailedWithoutExceptionMessage;
    public static string TraceUnhandledException;
    public static string TraceHandledException;
    public static string TraceAppDomainUnload;
    public static string TracePassiveOperationProcessRequest;
    public static string TraceDigestOfReference;
    public static string TraceUnableToWriteToken;
    public static string TraceValidateToken;
    public static string TraceSetPrincipalFromSessionToken;
    public static string TraceSetPrincipalOnEvaluationContext;
    public static string TraceResponseRedirect;
    public static string TraceResponseRedirectNotTrusted;
    public static string TraceOnEndRequestRedirect;
    public static string TraceAuthorize;
    public static string TraceOnAuthorizeRequestFailed;
    public static string TraceOnAuthorizeRequestSucceed;
    public static string TraceGetReturnUrlFromResponse;
    public static string TraceRedirectArgsSignInRequestMessageRequestUrl;
    public static string TraceSignInWithResponseMessage;
    public static string TraceChunkedCookieHandlerWriting;
    public static string TraceChunkedCookieHandlerReading;
    public static string TraceChunkedCookieHandlerDeleting;
    public static string ID8000;
    public static string ID8001;
    public static string ID8002;
    public static string ID8003;
    public static string ID8004;
    public static string ID8005;
    public static string ID8006;
    public static string ID8007;
    public static string ID8008;
    public static string ID8012;
    public static string ID8013;
    public static string ID8020;
    public static string ID8021;
    public static string ID8022;
    public static string ID8023;
    public static string ID8024;
    private static ResourceManager s_instance;
    private static object s_syncRoot;
    private static ResourceManager Instance { get; }
    private static SR();
    private static ResourceManager get_Instance();
    public static string GetString(string name, Object[] args);
}
internal static class Microsoft.IdentityModel.StringUtil : object {
    public static string OptimizeString(string value);
}
public class Microsoft.IdentityModel.Threading.AsynchronousOperationException : Exception {
    public AsynchronousOperationException(string message);
    public AsynchronousOperationException(string message, Exception innerException);
    public AsynchronousOperationException(Exception innerException);
    protected AsynchronousOperationException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.IdentityModel.Threading.AsyncResult : object {
    private AsyncCallback _callback;
    private bool _completed;
    private bool _completedSync;
    private bool _disposed;
    private bool _endCalled;
    private Exception _exception;
    private ManualResetEvent _event;
    private object _state;
    private object _thisLock;
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    protected AsyncResult(object state);
    protected AsyncResult(AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
    protected virtual void Finalize();
    protected void Complete(bool completedSynchronously);
    protected void Complete(bool completedSynchronously, Exception exception);
    protected virtual void Dispose(bool isExplicitDispose);
    public sealed virtual object get_AsyncState();
    public virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    public sealed virtual void Dispose();
}
public class Microsoft.IdentityModel.Threading.TypedAsyncResult`1 : AsyncResult {
    private T _result;
    public T Result { get; }
    public TypedAsyncResult`1(object state);
    public TypedAsyncResult`1(AsyncCallback callback, object state);
    public void Complete(T result, bool completedSynchronously);
    public void Complete(T result, bool completedSynchronously, Exception exception);
    public static T End(IAsyncResult result);
    public T get_Result();
}
internal class Microsoft.IdentityModel.TOKEN_GROUPS : ValueType {
    internal UInt32 GroupCount;
    internal SID_AND_ATTRIBUTES Groups;
}
internal class Microsoft.IdentityModel.TOKEN_PRIMARY_GROUP : ValueType {
    internal IntPtr PrimaryGroup;
}
internal class Microsoft.IdentityModel.TOKEN_PRIVILEGE : ValueType {
    internal UInt32 PrivilegeCount;
    internal LUID_AND_ATTRIBUTES Privilege;
    internal static UInt32 Size;
    private static TOKEN_PRIVILEGE();
}
internal class Microsoft.IdentityModel.TOKEN_SOURCE : ValueType {
    private static int TOKEN_SOURCE_LENGTH;
    internal Char[] Name;
    internal LUID SourceIdentifier;
}
internal enum Microsoft.IdentityModel.TokenInformationClass : Enum {
    public UInt32 value__;
    public static TokenInformationClass TokenUser;
    public static TokenInformationClass TokenGroups;
    public static TokenInformationClass TokenPrivileges;
    public static TokenInformationClass TokenOwner;
    public static TokenInformationClass TokenPrimaryGroup;
    public static TokenInformationClass TokenDefaultDacl;
    public static TokenInformationClass TokenSource;
    public static TokenInformationClass TokenType;
    public static TokenInformationClass TokenImpersonationLevel;
    public static TokenInformationClass TokenStatistics;
    public static TokenInformationClass TokenRestrictedSids;
    public static TokenInformationClass TokenSessionId;
    public static TokenInformationClass TokenGroupsAndPrivileges;
    public static TokenInformationClass TokenSessionReference;
    public static TokenInformationClass TokenSandBoxInert;
}
public class Microsoft.IdentityModel.Tokens.AggregateTokenResolver : SecurityTokenResolver {
    private List`1<SecurityTokenResolver> _tokenResolvers;
    public ReadOnlyCollection`1<SecurityTokenResolver> TokenResolvers { get; }
    public AggregateTokenResolver(IEnumerable`1<SecurityTokenResolver> tokenResolvers);
    public ReadOnlyCollection`1<SecurityTokenResolver> get_TokenResolvers();
    protected virtual bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityKey& key);
    protected virtual bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, SecurityToken& token);
    protected virtual bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityToken& token);
    private void AddNonEmptyResolvers(IEnumerable`1<SecurityTokenResolver> resolvers);
}
public class Microsoft.IdentityModel.Tokens.AsymmetricProofDescriptor : ProofDescriptor {
    private SecurityKeyIdentifier _keyIdentifier;
    public SecurityKeyIdentifier KeyIdentifier { get; }
    public AsymmetricProofDescriptor(RSA rsaAlgorithm);
    public AsymmetricProofDescriptor(SecurityKeyIdentifier keyIdentifier);
    public virtual void ApplyTo(RequestSecurityTokenResponse response);
    public virtual SecurityKeyIdentifier get_KeyIdentifier();
}
public class Microsoft.IdentityModel.Tokens.AudienceRestriction : object {
    private AudienceUriMode _audienceMode;
    private Collection`1<Uri> _audience;
    public AudienceUriMode AudienceMode { get; public set; }
    public Collection`1<Uri> AllowedAudienceUris { get; }
    public AudienceRestriction(AudienceUriMode audienceMode);
    public AudienceUriMode get_AudienceMode();
    public void set_AudienceMode(AudienceUriMode value);
    public Collection`1<Uri> get_AllowedAudienceUris();
}
public class Microsoft.IdentityModel.Tokens.AudienceUriValidationFailedException : SecurityTokenValidationException {
    public AudienceUriValidationFailedException(string message);
    public AudienceUriValidationFailedException(string message, Exception inner);
    protected AudienceUriValidationFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.AuthenticationContext : object {
    private Collection`1<string> _authorities;
    private string _contextClass;
    private string _contextDeclaration;
    public Collection`1<string> Authorities { get; }
    public string ContextClass { get; public set; }
    public string ContextDeclaration { get; public set; }
    public Collection`1<string> get_Authorities();
    public string get_ContextClass();
    public void set_ContextClass(string value);
    public string get_ContextDeclaration();
    public void set_ContextDeclaration(string value);
}
public class Microsoft.IdentityModel.Tokens.AuthorizationPolicy : object {
    public static string PrincipalKey;
    public static string IdentitiesKey;
    private ClaimsIdentityCollection _identityCollection;
    private ClaimSet _issuer;
    private string _id;
    public ClaimsIdentityCollection IdentityCollection { get; }
    public ClaimSet Issuer { get; }
    public string Id { get; }
    public AuthorizationPolicy(IClaimsIdentity identity);
    public AuthorizationPolicy(ClaimsIdentityCollection identityCollection);
    public ClaimsIdentityCollection get_IdentityCollection();
    public sealed virtual bool Evaluate(EvaluationContext evaluationContext, Object& state);
    public sealed virtual ClaimSet get_Issuer();
    public sealed virtual string get_Id();
}
internal class Microsoft.IdentityModel.Tokens.ClaimStringValueComparer : object {
    public sealed virtual bool Equals(Claim claim1, Claim claim2);
    public sealed virtual int GetHashCode(Claim claim);
}
public class Microsoft.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry : IssuerNameRegistry {
    private Dictionary`2<string, string> _configuredTrustedIssuers;
    public IDictionary`2<string, string> ConfiguredTrustedIssuers { get; }
    public ConfigurationBasedIssuerNameRegistry(XmlNodeList customConfiguration);
    public virtual string GetIssuerName(SecurityToken securityToken);
    public IDictionary`2<string, string> get_ConfiguredTrustedIssuers();
    public void AddTrustedIssuer(string certificateThumbprint, string name);
}
public class Microsoft.IdentityModel.Tokens.ConfigureServiceHostServiceBehavior : object {
    private string _serviceName;
    public ConfigureServiceHostServiceBehavior(string serviceName);
    public sealed virtual void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    public sealed virtual void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
}
public class Microsoft.IdentityModel.Tokens.DefaultTokenReplayCache : TokenReplayCache {
    private BoundedCache`1<SecurityToken> _internalCache;
    public int Capacity { get; public set; }
    public TimeSpan PurgeInterval { get; public set; }
    public DefaultTokenReplayCache(int capacity, TimeSpan purgeInterval);
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual void Clear();
    public virtual int IncreaseCapacity(int size);
    public virtual TimeSpan get_PurgeInterval();
    public virtual void set_PurgeInterval(TimeSpan value);
    public virtual bool TryAdd(string key, SecurityToken securityToken, DateTime expirationTime);
    public virtual bool TryFind(string key);
    public virtual bool TryGet(string key, SecurityToken& securityToken);
    public virtual bool TryRemove(string key);
}
internal static class Microsoft.IdentityModel.Tokens.EmptySecurityTokenResolver : object {
    private static SecurityTokenResolver _instance;
    public static SecurityTokenResolver Instance { get; }
    private static EmptySecurityTokenResolver();
    public static SecurityTokenResolver get_Instance();
}
public class Microsoft.IdentityModel.Tokens.EncryptedSecurityToken : SecurityToken {
    private EncryptingCredentials _encryptingCredentials;
    private SecurityToken _realToken;
    public EncryptingCredentials EncryptingCredentials { get; }
    public string Id { get; }
    public ReadOnlyCollection`1<SecurityKey> SecurityKeys { get; }
    public SecurityToken Token { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public EncryptedSecurityToken(SecurityToken token, EncryptingCredentials encryptingCredentials);
    public virtual bool CanCreateKeyIdentifierClause();
    public virtual T CreateKeyIdentifierClause();
    public EncryptingCredentials get_EncryptingCredentials();
    public virtual string get_Id();
    public virtual bool MatchesKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause);
    public virtual SecurityKey ResolveKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause);
    public virtual ReadOnlyCollection`1<SecurityKey> get_SecurityKeys();
    public SecurityToken get_Token();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
}
public class Microsoft.IdentityModel.Tokens.EncryptedSecurityTokenHandler : SecurityTokenHandler {
    private static String[] _tokenTypeIdentifiers;
    private SecurityTokenSerializer _keyInfoSerializer;
    private object _syncObject;
    public bool CanWriteToken { get; }
    public SecurityTokenSerializer KeyInfoSerializer { get; public set; }
    public Type TokenType { get; }
    private static EncryptedSecurityTokenHandler();
    public virtual bool CanReadKeyIdentifierClause(XmlReader reader);
    public virtual bool CanReadToken(XmlReader reader);
    public virtual bool get_CanWriteToken();
    public SecurityTokenSerializer get_KeyInfoSerializer();
    public void set_KeyInfoSerializer(SecurityTokenSerializer value);
    public virtual SecurityToken ReadToken(XmlReader reader);
    public virtual SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader);
    [ConditionalAttribute("DEBUG")]
private static void DebugEncryptedTokenClearText(Byte[] bytes, Encoding encoding);
    public virtual Type get_TokenType();
    public virtual String[] GetTokenTypeIdentifiers();
    public virtual void WriteToken(XmlWriter writer, SecurityToken token);
}
public class Microsoft.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException : SecurityTokenException {
    public EncryptedTokenDecryptionFailedException(string message);
    public EncryptedTokenDecryptionFailedException(string message, Exception inner);
    protected EncryptedTokenDecryptionFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.EndpointAuthorizationPolicy : object {
    private string _endpointId;
    private string _id;
    public string EndpointId { get; }
    private ClaimSet System.IdentityModel.Policy.IAuthorizationPolicy.Issuer { get; }
    private string System.IdentityModel.Policy.IAuthorizationComponent.Id { get; }
    public EndpointAuthorizationPolicy(string endpointId);
    public string get_EndpointId();
    private sealed virtual override bool System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(EvaluationContext evaluationContext, Object& state);
    private sealed virtual override ClaimSet System.IdentityModel.Policy.IAuthorizationPolicy.get_Issuer();
    private sealed virtual override string System.IdentityModel.Policy.IAuthorizationComponent.get_Id();
}
public class Microsoft.IdentityModel.Tokens.FailedAuthenticationException : Exception {
    public FailedAuthenticationException(string message);
    public FailedAuthenticationException(string message, Exception exception);
    protected FailedAuthenticationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.FailedAuthenticationFaultException : FaultException {
    public FailedAuthenticationFaultException(FaultReason reason);
}
public class Microsoft.IdentityModel.Tokens.FailedCheckException : Exception {
    public FailedCheckException(string message);
    public FailedCheckException(string message, Exception exception);
    protected FailedCheckException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.FailedCheckFaultException : FaultException {
    public FailedCheckFaultException(FaultReason reason);
}
public class Microsoft.IdentityModel.Tokens.FederatedSecurityTokenManager : ServiceCredentialsSecurityTokenManager {
    private static string ListenUriProperty;
    private static Assembly AssemblyName;
    private static BindingFlags SetPropertyFlags;
    private static BindingFlags GetPropertyFlags;
    private static Type MessageSecurityTokenVersionType;
    private static SecurityTokenCache DefaultTokenCache;
    private static ReadOnlyCollection`1<CookieTransform> DefaultCookieTransforms;
    private ClaimsAuthenticationManager _claimsAuthenticationManager;
    private ExceptionMapper _exceptionMapper;
    private SecurityTokenResolver _defaultTokenResolver;
    private SecurityTokenHandlerCollection _securityTokenHandlerCollection;
    private object _syncObject;
    private ReadOnlyCollection`1<CookieTransform> _cookieTransforms;
    private SecurityTokenCache _tokenCache;
    public SecurityTokenHandlerCollection SecurityTokenHandlers { get; }
    public ExceptionMapper ExceptionMapper { get; public set; }
    public FederatedSecurityTokenManager(ServiceCredentials parentCredentials, SecurityTokenHandlerCollection securityTokenHandlerCollection);
    public FederatedSecurityTokenManager(ServiceCredentials parentCredentials, SecurityTokenHandlerCollection securityTokenHandlerCollection, ClaimsAuthenticationManager claimsAuthenticationManager);
    private static FederatedSecurityTokenManager();
    public SecurityTokenHandlerCollection get_SecurityTokenHandlers();
    public ExceptionMapper get_ExceptionMapper();
    public void set_ExceptionMapper(ExceptionMapper value);
    public virtual SecurityTokenAuthenticator CreateSecurityTokenAuthenticator(SecurityTokenRequirement tokenRequirement, SecurityTokenResolver& outOfBandTokenResolver);
    private SecurityTokenAuthenticator SetupSecureConversationWrapper(RecipientServiceModelSecurityTokenRequirement tokenRequirement, SessionSecurityTokenHandler tokenHandler, SecurityTokenResolver& outOfBandTokenResolver);
    private static void SetWrappedTokenCache(WrappedTokenCache wrappedTokenCache, SecurityTokenAuthenticator sta, WrappedSessionSecurityTokenAuthenticator wssta, SctClaimsHandler claimsHandler);
    public virtual SecurityTokenSerializer CreateSecurityTokenSerializer(SecurityTokenVersion version);
    protected SecurityTokenResolver GetDefaultOutOfBandTokenResolver();
    internal static SecurityVersion GetSecurityVersion(SecurityTokenVersion tokenVersion);
    private SecurityTokenAuthenticator CreateInnerSecurityTokenAuthenticator(SecurityTokenRequirement tokenRequirement, SecurityTokenResolver& outOfBandTokenResolver);
    private SecurityTokenAuthenticator CreateSamlSecurityTokenAuthenticator(SecurityTokenRequirement tokenRequirement, SecurityTokenResolver& outOfBandTokenResolver);
    public static string GetNormalizedEndpointId(SecurityTokenRequirement tokenRequirement);
}
public class Microsoft.IdentityModel.Tokens.FederatedServiceCredentials : ServiceCredentials {
    private bool _saveBootstrapTokenInSession;
    private ServiceConfiguration _configuration;
    public ClaimsAuthenticationManager ClaimsAuthenticationManager { get; public set; }
    public ExceptionMapper ExceptionMapper { get; public set; }
    public ClaimsAuthorizationManager ClaimsAuthorizationManager { get; public set; }
    public TimeSpan MaxClockSkew { get; }
    public bool SaveBootstrapTokens { get; }
    public SecurityTokenHandlerCollectionManager SecurityTokenHandlerCollectionManager { get; }
    public SecurityTokenHandlerCollection SecurityTokenHandlers { get; }
    internal ServiceConfiguration ServiceConfiguration { get; }
    public FederatedServiceCredentials(ServiceCredentials innerServiceCredentials);
    public FederatedServiceCredentials(ServiceConfiguration configuration);
    public FederatedServiceCredentials(ServiceCredentials innerServiceCredentials, ServiceConfiguration configuration);
    protected FederatedServiceCredentials(FederatedServiceCredentials other);
    protected virtual ServiceCredentials CloneCore();
    public virtual SecurityTokenManager CreateSecurityTokenManager();
    public static void ConfigureServiceHost(ServiceHostBase serviceHost);
    public static void ConfigureServiceHost(ServiceHostBase serviceHost, string serviceName);
    public static void ConfigureServiceHost(ServiceHostBase serviceHost, ServiceConfiguration configuration);
    public ClaimsAuthenticationManager get_ClaimsAuthenticationManager();
    public void set_ClaimsAuthenticationManager(ClaimsAuthenticationManager value);
    public ExceptionMapper get_ExceptionMapper();
    public void set_ExceptionMapper(ExceptionMapper value);
    public ClaimsAuthorizationManager get_ClaimsAuthorizationManager();
    public void set_ClaimsAuthorizationManager(ClaimsAuthorizationManager value);
    public TimeSpan get_MaxClockSkew();
    public bool get_SaveBootstrapTokens();
    public SecurityTokenHandlerCollectionManager get_SecurityTokenHandlerCollectionManager();
    public SecurityTokenHandlerCollection get_SecurityTokenHandlers();
    internal ServiceConfiguration get_ServiceConfiguration();
}
public class Microsoft.IdentityModel.Tokens.IdentityModelServiceAuthorizationManager : ServiceAuthorizationManager {
    protected static ReadOnlyCollection`1<IAuthorizationPolicy> AnonymousAuthorizationPolicy;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate7;
    private static IdentityModelServiceAuthorizationManager();
    protected virtual ReadOnlyCollection`1<IAuthorizationPolicy> GetAuthorizationPolicies(OperationContext operationContext);
    internal static AuthorizationPolicy TransformAuthorizationPolicies(ReadOnlyCollection`1<IAuthorizationPolicy> baseAuthorizationPolicies, ClaimsAuthenticationManager authnManager, SecurityTokenHandlerCollection securityTokenHandlerCollection, bool includeTransportTokens);
    private static ClaimsIdentityCollection GetTransportTokenIdentities(SecurityToken transportToken, ClaimsAuthenticationManager authnManager);
    private static void EliminateTransportTokenPolicy(SecurityToken transportToken, ClaimsIdentityCollection tranportTokenIdentities, List`1<IAuthorizationPolicy> baseAuthorizationPolicies);
    private static bool DoesPolicyMatchTransportToken(SecurityToken transportToken, ClaimsIdentityCollection tranportTokenIdentities, IAuthorizationPolicy authPolicy);
    private static ClaimsIdentityCollection ConvertToIDFxIdentities(IList`1<IAuthorizationPolicy> authorizationPolicies, ClaimsAuthenticationManager authnManager, SecurityTokenHandlerCollection securityTokenHandlerCollection);
    private static IClaimsIdentity ConvertToIDFxIdentity(IList`1<ClaimSet> claimSets, SecurityTokenHandlerConfiguration securityTokenHandlerConfiguration);
    private static FederatedServiceCredentials GetFederatedServiceCredentials();
    private static void AddAuthenticationMethod(IClaimsIdentity claimsIdentity, string authenticationMethod);
    private static void AddAuthenticationInstantClaim(IClaimsIdentity claimsIdentity, string authenticationInstant);
    private static void AddAuthenticationInstantClaim(IClaimsIdentity claimsIdentity, string authenticationInstant, string issuerName);
    internal static IClaimsIdentity MergeClaims(IClaimsIdentity identity1, IClaimsIdentity identity2);
    protected virtual bool CheckAccessCore(OperationContext operationContext);
    [CompilerGeneratedAttribute]
private static bool <AddAuthenticationMethod>b__4(Claim claim);
    [CompilerGeneratedAttribute]
private static bool <AddAuthenticationInstantClaim>b__6(Claim claim);
}
public class Microsoft.IdentityModel.Tokens.InvalidSecurityException : Exception {
    public InvalidSecurityException(string message);
    public InvalidSecurityException(string message, Exception exception);
    protected InvalidSecurityException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.InvalidSecurityFaultException : FaultException {
    public InvalidSecurityFaultException(FaultReason reason);
}
public class Microsoft.IdentityModel.Tokens.InvalidSecurityTokenException : Exception {
    public InvalidSecurityTokenException(string message);
    public InvalidSecurityTokenException(string message, Exception exception);
    protected InvalidSecurityTokenException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.InvalidSecurityTokenFaultException : FaultException {
    public InvalidSecurityTokenFaultException(FaultReason reason);
}
public abstract class Microsoft.IdentityModel.Tokens.IssuerNameRegistry : object {
    public abstract virtual string GetIssuerName(SecurityToken securityToken);
    public virtual string GetIssuerName(SecurityToken securityToken, string requestedIssuerName);
    public virtual string GetWindowsIssuerName();
}
public class Microsoft.IdentityModel.Tokens.IssuerTokenResolver : SecurityTokenResolver {
    public static StoreName DefaultStoreName;
    public static StoreLocation DefaultStoreLocation;
    private SecurityTokenResolver _wrappedTokenResolver;
    internal static IssuerTokenResolver DefaultInstance;
    public SecurityTokenResolver WrappedTokenResolver { get; }
    public IssuerTokenResolver(SecurityTokenResolver wrappedTokenResolver);
    private static IssuerTokenResolver();
    public SecurityTokenResolver get_WrappedTokenResolver();
    protected virtual bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityKey& key);
    protected virtual bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, SecurityToken& token);
    protected virtual bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityToken& token);
}
public class Microsoft.IdentityModel.Tokens.KerberosSecurityTokenHandler : SecurityTokenHandler {
    private static String[] _tokenTypeIdentifiers;
    public bool CanValidateToken { get; }
    public Type TokenType { get; }
    private static KerberosSecurityTokenHandler();
    public virtual bool get_CanValidateToken();
    public virtual Type get_TokenType();
    public virtual String[] GetTokenTypeIdentifiers();
    public virtual ClaimsIdentityCollection ValidateToken(SecurityToken token);
}
public class Microsoft.IdentityModel.Tokens.MembershipUserNameSecurityTokenHandler : UserNameSecurityTokenHandler {
    private MembershipProvider _provider;
    public bool CanValidateToken { get; }
    public MembershipProvider MembershipProvider { get; public set; }
    public MembershipUserNameSecurityTokenHandler(MembershipProvider provider);
    public MembershipUserNameSecurityTokenHandler(XmlNodeList customConfigElements);
    public virtual bool get_CanValidateToken();
    public MembershipProvider get_MembershipProvider();
    public void set_MembershipProvider(MembershipProvider value);
    public virtual ClaimsIdentityCollection ValidateToken(SecurityToken token);
}
public class Microsoft.IdentityModel.Tokens.MessageExpiredException : Exception {
    public MessageExpiredException(string message);
    public MessageExpiredException(string message, Exception exception);
    protected MessageExpiredException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.MessageExpiredFaultException : FaultException {
    public MessageExpiredFaultException(FaultReason reason);
}
internal class Microsoft.IdentityModel.Tokens.NoOpSecurityStateEncoder : SecurityStateEncoder {
    protected virtual Byte[] EncodeSecurityState(Byte[] data);
    protected virtual Byte[] DecodeSecurityState(Byte[] data);
}
public abstract class Microsoft.IdentityModel.Tokens.ProofDescriptor : object {
    public SecurityKeyIdentifier KeyIdentifier { get; }
    public abstract virtual void ApplyTo(RequestSecurityTokenResponse response);
    public abstract virtual SecurityKeyIdentifier get_KeyIdentifier();
}
public class Microsoft.IdentityModel.Tokens.RsaSecurityTokenHandler : SecurityTokenHandler {
    private static String[] _tokenTypeIdentifiers;
    public bool CanValidateToken { get; }
    public bool CanWriteToken { get; }
    public Type TokenType { get; }
    private static RsaSecurityTokenHandler();
    public virtual bool CanReadToken(XmlReader reader);
    public virtual bool get_CanValidateToken();
    public virtual bool get_CanWriteToken();
    public virtual String[] GetTokenTypeIdentifiers();
    public virtual SecurityToken ReadToken(XmlReader reader);
    public virtual Type get_TokenType();
    public virtual ClaimsIdentityCollection ValidateToken(SecurityToken token);
    public virtual void WriteToken(XmlWriter writer, SecurityToken token);
}
public class Microsoft.IdentityModel.Tokens.Saml11.Saml11Assertion : SamlAssertion {
    private XmlTokenStream _sourceData;
    private SecurityToken _issuerToken;
    public bool CanWriteSourceData { get; }
    public SecurityToken IssuerToken { get; public set; }
    public Saml11Assertion(string assertionId, string issuer, DateTime issueInstant, SamlConditions samlConditions, SamlAdvice samlAdvice, IEnumerable`1<SamlStatement> samlStatements);
    public virtual bool get_CanWriteSourceData();
    public virtual void CaptureSourceData(EnvelopedSignatureReader reader);
    public virtual void WriteSourceData(XmlWriter writer);
    public SecurityToken get_IssuerToken();
    public void set_IssuerToken(SecurityToken value);
}
public class Microsoft.IdentityModel.Tokens.Saml11.Saml11Attribute : SamlAttribute {
    private string _originalIssuer;
    private string _attributeValueXsiType;
    public string OriginalIssuer { get; public set; }
    public string AttributeValueXsiType { get; public set; }
    public Saml11Attribute(string attributeNamespace, string attributeName, IEnumerable`1<string> attributeValues);
    public string get_OriginalIssuer();
    public void set_OriginalIssuer(string value);
    public string get_AttributeValueXsiType();
    public void set_AttributeValueXsiType(string value);
}
public static class Microsoft.IdentityModel.Tokens.Saml11.Saml11Constants : object {
    public static string AssertionIdPrefix;
    public static string Namespace;
    public static string Prefix;
    public static int MajorVersion;
    public static int MinorVersion;
}
public class Microsoft.IdentityModel.Tokens.Saml11.Saml11SecurityKeyIdentifierClause : SecurityKeyIdentifierClause {
    private SamlAssertion _assertion;
    public SamlAssertion Assertion { get; }
    public Saml11SecurityKeyIdentifierClause(SamlAssertion assertion);
    public SamlAssertion get_Assertion();
}
public class Microsoft.IdentityModel.Tokens.Saml11.Saml11SecurityTokenHandler : SecurityTokenHandler {
    public static string Namespace;
    public static string BearerConfirmationMethod;
    public static string UnspecifiedAuthenticationMethod;
    public static string Assertion;
    private static string Attribute;
    private static string Actor;
    private static DateTime WCFMinValue;
    private static DateTime WCFMaxValue;
    private static String[] _tokenTypeIdentifiers;
    private SamlSecurityTokenRequirement _samlSecurityTokenRequirement;
    private SecurityTokenSerializer _keyInfoSerializer;
    private object _syncObject;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public bool CanValidateToken { get; }
    public X509CertificateValidator CertificateValidator { get; public set; }
    public bool CanWriteToken { get; }
    public SecurityTokenSerializer KeyInfoSerializer { get; public set; }
    public Type TokenType { get; }
    public SamlSecurityTokenRequirement SamlSecurityTokenRequirement { get; public set; }
    public Saml11SecurityTokenHandler(SamlSecurityTokenRequirement samlSecurityTokenRequirement);
    public Saml11SecurityTokenHandler(XmlNodeList customConfigElements);
    private static Saml11SecurityTokenHandler();
    public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor);
    protected virtual EncryptingCredentials GetEncryptingCredentials(SecurityTokenDescriptor tokenDescriptor);
    protected virtual SigningCredentials GetSigningCredentials(SecurityTokenDescriptor tokenDescriptor);
    protected virtual SamlAdvice CreateAdvice(SecurityTokenDescriptor tokenDescriptor);
    protected virtual SamlAssertion CreateAssertion(string issuer, SamlConditions conditions, SamlAdvice advice, IEnumerable`1<SamlStatement> statements);
    public virtual SecurityKeyIdentifierClause CreateSecurityTokenReference(SecurityToken token, bool attached);
    protected virtual SamlConditions CreateConditions(Lifetime tokenLifetime, string relyingPartyAddress, SecurityTokenDescriptor tokenDescriptor);
    protected virtual IEnumerable`1<SamlStatement> CreateStatements(SecurityTokenDescriptor tokenDescriptor);
    protected virtual SamlAuthenticationStatement CreateAuthenticationStatement(SamlSubject samlSubject, AuthenticationInformation authInfo, SecurityTokenDescriptor tokenDescriptor);
    protected virtual SamlAttributeStatement CreateAttributeStatement(SamlSubject samlSubject, IClaimsIdentity subject, SecurityTokenDescriptor tokenDescriptor);
    protected virtual ICollection`1<SamlAttribute> CollectAttributeValues(ICollection`1<SamlAttribute> attributes);
    protected virtual void AddDelegateToAttributes(IClaimsIdentity subject, ICollection`1<SamlAttribute> attributes, SecurityTokenDescriptor tokenDescriptor);
    protected virtual SamlSubject CreateSamlSubject(SecurityTokenDescriptor tokenDescriptor);
    protected virtual string CreateXmlStringFromAttributes(IEnumerable`1<SamlAttribute> attributes);
    protected virtual SamlAttribute CreateAttribute(Claim claim, SecurityTokenDescriptor tokenDescriptor);
    public virtual bool get_CanValidateToken();
    public X509CertificateValidator get_CertificateValidator();
    public void set_CertificateValidator(X509CertificateValidator value);
    protected virtual void DetectReplayedTokens(SecurityToken token);
    protected virtual DateTime GetCacheExpirationTime(SamlSecurityToken token);
    protected virtual void ValidateConditions(SamlConditions conditions, bool enforceAudienceRestriction);
    public virtual ClaimsIdentityCollection ValidateToken(SecurityToken token);
    protected virtual string FindUpn(IClaimsIdentity claimsIdentity);
    protected virtual IClaimsIdentity CreateClaims(SamlSecurityToken samlSecurityToken);
    protected virtual string DenormalizeAuthenticationType(string normalizedAuthenticationType);
    protected virtual string NormalizeAuthenticationType(string saml11AuthenticationMethod);
    protected virtual void ProcessStatement(IList`1<SamlStatement> statements, IClaimsIdentity subject, string issuer);
    protected virtual void ProcessAttributeStatement(SamlAttributeStatement samlStatement, IClaimsIdentity subject, string issuer);
    private static Claim GetClaim(IClaimsIdentity subject, string claimType);
    protected virtual void ProcessSamlSubject(SamlSubject samlSubject, IClaimsIdentity subject, string issuer);
    protected virtual void ProcessAuthenticationStatement(SamlAuthenticationStatement samlStatement, IClaimsIdentity subject, string issuer);
    protected virtual void ProcessAuthorizationDecisionStatement(SamlAuthorizationDecisionStatement samlStatement, IClaimsIdentity subject, string issuer);
    protected virtual void SetDelegateFromAttribute(SamlAttribute attribute, IClaimsIdentity subject, string issuer);
    public virtual bool CanReadToken(XmlReader reader);
    public virtual SecurityToken ReadToken(XmlReader reader);
    protected virtual SamlAction ReadAction(XmlReader reader);
    protected virtual void WriteAction(XmlWriter writer, SamlAction action);
    protected virtual SamlAdvice ReadAdvice(XmlReader reader);
    protected virtual void WriteAdvice(XmlWriter writer, SamlAdvice advice);
    protected virtual Saml11Assertion ReadAssertion(XmlReader reader);
    protected virtual void WriteAssertion(XmlWriter writer, SamlAssertion assertion);
    protected virtual SamlConditions ReadConditions(XmlReader reader);
    protected virtual void WriteConditions(XmlWriter writer, SamlConditions conditions);
    protected virtual SamlCondition ReadCondition(XmlReader reader);
    protected virtual void WriteCondition(XmlWriter writer, SamlCondition condition);
    protected virtual SamlAudienceRestrictionCondition ReadAudienceRestrictionCondition(XmlReader reader);
    protected virtual void WriteAudienceRestrictionCondition(XmlWriter writer, SamlAudienceRestrictionCondition condition);
    protected virtual SamlDoNotCacheCondition ReadDoNotCacheCondition(XmlReader reader);
    protected virtual void WriteDoNotCacheCondition(XmlWriter writer, SamlDoNotCacheCondition condition);
    protected virtual SamlStatement ReadStatement(XmlReader reader);
    protected virtual void WriteStatement(XmlWriter writer, SamlStatement statement);
    protected virtual SamlSubject ReadSubject(XmlReader reader);
    protected virtual void WriteSubject(XmlWriter writer, SamlSubject subject);
    protected virtual SecurityKeyIdentifier ReadSubjectKeyInfo(XmlReader reader);
    protected virtual void WriteSubjectKeyInfo(XmlWriter writer, SecurityKeyIdentifier subjectSki);
    protected virtual SamlAttributeStatement ReadAttributeStatement(XmlReader reader);
    protected virtual void WriteAttributeStatement(XmlWriter writer, SamlAttributeStatement statement);
    protected virtual SamlAttribute ReadAttribute(XmlReader reader);
    protected virtual string ReadAttributeValue(XmlReader reader, SamlAttribute attribute);
    protected virtual void WriteAttribute(XmlWriter writer, SamlAttribute attribute);
    protected virtual void WriteAttributeValue(XmlWriter writer, string value, SamlAttribute attribute);
    protected virtual SamlAuthenticationStatement ReadAuthenticationStatement(XmlReader reader);
    protected virtual void WriteAuthenticationStatement(XmlWriter writer, SamlAuthenticationStatement statement);
    protected virtual SamlAuthorityBinding ReadAuthorityBinding(XmlReader reader);
    protected virtual void WriteAuthorityBinding(XmlWriter writer, SamlAuthorityBinding authorityBinding);
    public virtual bool get_CanWriteToken();
    public virtual void WriteToken(XmlWriter writer, SecurityToken token);
    protected virtual SamlAuthorizationDecisionStatement ReadAuthorizationDecisionStatement(XmlReader reader);
    protected virtual void WriteAuthorizationDecisionStatement(XmlWriter writer, SamlAuthorizationDecisionStatement statement);
    protected virtual SamlEvidence ReadEvidence(XmlReader reader);
    protected virtual void WriteEvidence(XmlWriter writer, SamlEvidence evidence);
    protected virtual SecurityKey ResolveSubjectKeyIdentifier(SecurityKeyIdentifier subjectKeyIdentifier);
    protected virtual SecurityToken ResolveIssuerToken(Saml11Assertion assertion, SecurityTokenResolver issuerResolver);
    protected virtual bool TryResolveIssuerToken(Saml11Assertion assertion, SecurityTokenResolver issuerResolver, SecurityToken& token);
    protected virtual SecurityKeyIdentifier ReadSigningKeyInfo(XmlReader reader, SamlAssertion assertion);
    protected virtual void WriteSigningKeyInfo(XmlWriter writer, SecurityKeyIdentifier signingKeyIdentifier);
    private void ValidateStatements(IList`1<SamlStatement> statements);
    public virtual String[] GetTokenTypeIdentifiers();
    public SecurityTokenSerializer get_KeyInfoSerializer();
    public void set_KeyInfoSerializer(SecurityTokenSerializer value);
    public virtual Type get_TokenType();
    public SamlSecurityTokenRequirement get_SamlSecurityTokenRequirement();
    public void set_SamlSecurityTokenRequirement(SamlSecurityTokenRequirement value);
    [CompilerGeneratedAttribute]
private static bool <CreateAuthenticationStatement>b__0(Claim c);
    [CompilerGeneratedAttribute]
private static bool <CreateAuthenticationStatement>b__1(Claim c);
}
internal class Microsoft.IdentityModel.Tokens.Saml2.AbsoluteUriCollection : Collection`1<Uri> {
    protected virtual void InsertItem(int index, Uri item);
    protected virtual void SetItem(int index, Uri item);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Action : object {
    private Uri _namespace;
    private string _value;
    public Uri Namespace { get; public set; }
    public string Value { get; public set; }
    public Saml2Action(string value, Uri actionNamespace);
    public Uri get_Namespace();
    public void set_Namespace(Uri value);
    public string get_Value();
    public void set_Value(string value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Advice : object {
    private Collection`1<Saml2Id> _assertionIdReferences;
    private Collection`1<Saml2Assertion> _assertions;
    private AbsoluteUriCollection _assertionUriReferences;
    public Collection`1<Saml2Id> AssertionIdReferences { get; }
    public Collection`1<Saml2Assertion> Assertions { get; }
    public Collection`1<Uri> AssertionUriReferences { get; }
    public Collection`1<Saml2Id> get_AssertionIdReferences();
    public Collection`1<Saml2Assertion> get_Assertions();
    public Collection`1<Uri> get_AssertionUriReferences();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Assertion : object {
    private Saml2Advice _advice;
    private Saml2Conditions _conditions;
    private EncryptingCredentials _encryptingCredentials;
    private Collection`1<EncryptedKeyIdentifierClause> _externalEncryptedKeys;
    private Saml2Id _id;
    private DateTime _issueInstant;
    private Saml2NameIdentifier _issuer;
    private SigningCredentials _signingCredentials;
    private XmlTokenStream _sourceData;
    private Collection`1<Saml2Statement> _statements;
    private Saml2Subject _subject;
    private string _version;
    public Saml2Advice Advice { get; public set; }
    public bool CanWriteSourceData { get; }
    public Saml2Conditions Conditions { get; public set; }
    public EncryptingCredentials EncryptingCredentials { get; public set; }
    public Collection`1<EncryptedKeyIdentifierClause> ExternalEncryptedKeys { get; }
    public Saml2Id Id { get; public set; }
    public DateTime IssueInstant { get; public set; }
    public Saml2NameIdentifier Issuer { get; public set; }
    public SigningCredentials SigningCredentials { get; public set; }
    public Saml2Subject Subject { get; public set; }
    public Collection`1<Saml2Statement> Statements { get; }
    public string Version { get; }
    public Saml2Assertion(Saml2NameIdentifier issuer);
    public Saml2Advice get_Advice();
    public void set_Advice(Saml2Advice value);
    public virtual bool get_CanWriteSourceData();
    public virtual void CaptureSourceData(EnvelopedSignatureReader reader);
    public Saml2Conditions get_Conditions();
    public void set_Conditions(Saml2Conditions value);
    public EncryptingCredentials get_EncryptingCredentials();
    public void set_EncryptingCredentials(EncryptingCredentials value);
    public Collection`1<EncryptedKeyIdentifierClause> get_ExternalEncryptedKeys();
    public Saml2Id get_Id();
    public void set_Id(Saml2Id value);
    public DateTime get_IssueInstant();
    public void set_IssueInstant(DateTime value);
    public Saml2NameIdentifier get_Issuer();
    public void set_Issuer(Saml2NameIdentifier value);
    public SigningCredentials get_SigningCredentials();
    public void set_SigningCredentials(SigningCredentials value);
    public Saml2Subject get_Subject();
    public void set_Subject(Saml2Subject value);
    public Collection`1<Saml2Statement> get_Statements();
    public string get_Version();
    public virtual void WriteSourceData(XmlWriter writer);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2AssertionKeyIdentifierClause : SecurityKeyIdentifierClause {
    private string _assertionId;
    public string AssertionId { get; }
    [ObsoleteAttribute("Use AssertionId property instead")]
public string Id { get; }
    public Saml2AssertionKeyIdentifierClause(string id);
    public Saml2AssertionKeyIdentifierClause(string id, Byte[] derivationNonce, int derivationLength);
    public string get_AssertionId();
    public string get_Id();
    public virtual bool Matches(SecurityKeyIdentifierClause keyIdentifierClause);
    public static bool Matches(string assertionId, SecurityKeyIdentifierClause keyIdentifierClause);
    public virtual string ToString();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Attribute : object {
    private string _friendlyName;
    private string _name;
    private Uri _nameFormat;
    private Collection`1<string> _values;
    private string _originalIssuer;
    private string _attributeValueXsiType;
    public string FriendlyName { get; public set; }
    public string Name { get; public set; }
    public Uri NameFormat { get; public set; }
    public string OriginalIssuer { get; public set; }
    public string AttributeValueXsiType { get; public set; }
    public Collection`1<string> Values { get; }
    public Saml2Attribute(string name);
    public Saml2Attribute(string name, string value);
    public Saml2Attribute(string name, IEnumerable`1<string> values);
    public string get_FriendlyName();
    public void set_FriendlyName(string value);
    public string get_Name();
    public void set_Name(string value);
    public Uri get_NameFormat();
    public void set_NameFormat(Uri value);
    public string get_OriginalIssuer();
    public void set_OriginalIssuer(string value);
    public string get_AttributeValueXsiType();
    public void set_AttributeValueXsiType(string value);
    public Collection`1<string> get_Values();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2AttributeStatement : Saml2Statement {
    private Collection`1<Saml2Attribute> _attributes;
    public Collection`1<Saml2Attribute> Attributes { get; }
    public Saml2AttributeStatement(Saml2Attribute attribute);
    public Saml2AttributeStatement(IEnumerable`1<Saml2Attribute> attributes);
    public Collection`1<Saml2Attribute> get_Attributes();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2AudienceRestriction : object {
    private Collection`1<Uri> _audiences;
    public Collection`1<Uri> Audiences { get; }
    public Saml2AudienceRestriction(Uri audience);
    public Saml2AudienceRestriction(IEnumerable`1<Uri> audiences);
    public Collection`1<Uri> get_Audiences();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationContext : object {
    private Collection`1<Uri> _authenticatingAuthorities;
    private Uri _classReference;
    private Uri _declarationReference;
    public Collection`1<Uri> AuthenticatingAuthorities { get; }
    public Uri ClassReference { get; public set; }
    public Uri DeclarationReference { get; public set; }
    public Saml2AuthenticationContext(Uri classReference);
    public Saml2AuthenticationContext(Uri classReference, Uri declarationReference);
    public Collection`1<Uri> get_AuthenticatingAuthorities();
    public Uri get_ClassReference();
    public void set_ClassReference(Uri value);
    public Uri get_DeclarationReference();
    public void set_DeclarationReference(Uri value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement : Saml2Statement {
    private Saml2AuthenticationContext _authnContext;
    private DateTime _authnInstant;
    private string _sessionIndex;
    private Nullable`1<DateTime> _sessionNotOnOrAfter;
    private Saml2SubjectLocality _subjectLocality;
    public Saml2AuthenticationContext AuthenticationContext { get; public set; }
    public DateTime AuthenticationInstant { get; public set; }
    public string SessionIndex { get; public set; }
    public Nullable`1<DateTime> SessionNotOnOrAfter { get; public set; }
    public Saml2SubjectLocality SubjectLocality { get; public set; }
    public Saml2AuthenticationStatement(Saml2AuthenticationContext authenticationContext);
    public Saml2AuthenticationStatement(Saml2AuthenticationContext authenticationContext, DateTime authenticationInstant);
    public Saml2AuthenticationContext get_AuthenticationContext();
    public void set_AuthenticationContext(Saml2AuthenticationContext value);
    public DateTime get_AuthenticationInstant();
    public void set_AuthenticationInstant(DateTime value);
    public string get_SessionIndex();
    public void set_SessionIndex(string value);
    public Nullable`1<DateTime> get_SessionNotOnOrAfter();
    public void set_SessionNotOnOrAfter(Nullable`1<DateTime> value);
    public Saml2SubjectLocality get_SubjectLocality();
    public void set_SubjectLocality(Saml2SubjectLocality value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2AuthorizationDecisionStatement : Saml2Statement {
    public static Uri EmptyResource;
    private Collection`1<Saml2Action> _actions;
    private Saml2Evidence _evidence;
    private SamlAccessDecision _decision;
    private Uri _resource;
    public Collection`1<Saml2Action> Actions { get; }
    public SamlAccessDecision Decision { get; public set; }
    public Saml2Evidence Evidence { get; public set; }
    public Uri Resource { get; public set; }
    public Saml2AuthorizationDecisionStatement(Uri resource, SamlAccessDecision decision);
    public Saml2AuthorizationDecisionStatement(Uri resource, SamlAccessDecision decision, IEnumerable`1<Saml2Action> actions);
    private static Saml2AuthorizationDecisionStatement();
    public Collection`1<Saml2Action> get_Actions();
    public SamlAccessDecision get_Decision();
    public void set_Decision(SamlAccessDecision value);
    public Saml2Evidence get_Evidence();
    public void set_Evidence(Saml2Evidence value);
    public Uri get_Resource();
    public void set_Resource(Uri value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Conditions : object {
    private Collection`1<Saml2AudienceRestriction> _audienceRestrictions;
    private Nullable`1<DateTime> _notBefore;
    private Nullable`1<DateTime> _notOnOrAfter;
    private bool _oneTimeUse;
    private Saml2ProxyRestriction _proxyRestriction;
    public Collection`1<Saml2AudienceRestriction> AudienceRestrictions { get; }
    public Nullable`1<DateTime> NotBefore { get; public set; }
    public Nullable`1<DateTime> NotOnOrAfter { get; public set; }
    public bool OneTimeUse { get; public set; }
    public Saml2ProxyRestriction ProxyRestriction { get; public set; }
    public Collection`1<Saml2AudienceRestriction> get_AudienceRestrictions();
    public Nullable`1<DateTime> get_NotBefore();
    public void set_NotBefore(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_NotOnOrAfter();
    public void set_NotOnOrAfter(Nullable`1<DateTime> value);
    public bool get_OneTimeUse();
    public void set_OneTimeUse(bool value);
    public Saml2ProxyRestriction get_ProxyRestriction();
    public void set_ProxyRestriction(Saml2ProxyRestriction value);
}
public static class Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants : object {
    public static string Prefix;
    public static string Namespace;
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Evidence : object {
    private Collection`1<Saml2Id> _assertionIdReferences;
    private Collection`1<Saml2Assertion> _assertions;
    private AbsoluteUriCollection _assertionUriReferences;
    public Collection`1<Saml2Id> AssertionIdReferences { get; }
    public Collection`1<Saml2Assertion> Assertions { get; }
    public Collection`1<Uri> AssertionUriReferences { get; }
    public Saml2Evidence(Saml2Assertion assertion);
    public Saml2Evidence(Saml2Id idReference);
    public Saml2Evidence(Uri uriReference);
    public Collection`1<Saml2Id> get_AssertionIdReferences();
    public Collection`1<Saml2Assertion> get_Assertions();
    public Collection`1<Uri> get_AssertionUriReferences();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Id : object {
    private string _value;
    public string Value { get; }
    public Saml2Id(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string get_Value();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2NameIdentifier : object {
    private Uri _format;
    private string _nameQualifier;
    private string _spNameQualifier;
    private string _spProvidedId;
    private string _value;
    private EncryptingCredentials _encryptingCredentials;
    private Collection`1<EncryptedKeyIdentifierClause> _externalEncryptedKeys;
    public EncryptingCredentials EncryptingCredentials { get; public set; }
    public Collection`1<EncryptedKeyIdentifierClause> ExternalEncryptedKeys { get; }
    public Uri Format { get; public set; }
    public string NameQualifier { get; public set; }
    public string SPNameQualifier { get; public set; }
    public string SPProvidedId { get; public set; }
    public string Value { get; public set; }
    public Saml2NameIdentifier(string name);
    public Saml2NameIdentifier(string name, Uri format);
    public EncryptingCredentials get_EncryptingCredentials();
    public void set_EncryptingCredentials(EncryptingCredentials value);
    public Collection`1<EncryptedKeyIdentifierClause> get_ExternalEncryptedKeys();
    public Uri get_Format();
    public void set_Format(Uri value);
    public string get_NameQualifier();
    public void set_NameQualifier(string value);
    public string get_SPNameQualifier();
    public void set_SPNameQualifier(string value);
    public string get_SPProvidedId();
    public void set_SPProvidedId(string value);
    public string get_Value();
    public void set_Value(string value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2ProxyRestriction : object {
    private Collection`1<Uri> _audiences;
    private Nullable`1<int> _count;
    public Collection`1<Uri> Audiences { get; }
    public Nullable`1<int> Count { get; public set; }
    public Collection`1<Uri> get_Audiences();
    public Nullable`1<int> get_Count();
    public void set_Count(Nullable`1<int> value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityKeyIdentifierClause : SecurityKeyIdentifierClause {
    private Saml2Assertion _assertion;
    public Saml2Assertion Assertion { get; }
    public Saml2SecurityKeyIdentifierClause(Saml2Assertion assertion);
    public Saml2Assertion get_Assertion();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityToken : SecurityToken {
    private Saml2Assertion _assertion;
    private ReadOnlyCollection`1<SecurityKey> _keys;
    private SecurityToken _issuerToken;
    public Saml2Assertion Assertion { get; }
    public string Id { get; }
    public SecurityToken IssuerToken { get; }
    public ReadOnlyCollection`1<SecurityKey> SecurityKeys { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public Saml2SecurityToken(Saml2Assertion assertion);
    public Saml2SecurityToken(Saml2Assertion assertion, ReadOnlyCollection`1<SecurityKey> keys, SecurityToken issuerToken);
    public Saml2Assertion get_Assertion();
    public virtual bool CanCreateKeyIdentifierClause();
    public virtual T CreateKeyIdentifierClause();
    public virtual bool MatchesKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause);
    public virtual string get_Id();
    public SecurityToken get_IssuerToken();
    public virtual ReadOnlyCollection`1<SecurityKey> get_SecurityKeys();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityTokenHandler : SecurityTokenHandler {
    public static string TokenProfile11ValueType;
    private static string Actor;
    private static string Attribute;
    private static String[] _tokenTypeIdentifiers;
    private SamlSecurityTokenRequirement _samlSecurityTokenRequirement;
    private SecurityTokenSerializer _keyInfoSerializer;
    private object _syncObject;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public X509CertificateValidator CertificateValidator { get; public set; }
    public bool CanValidateToken { get; }
    public Type TokenType { get; }
    public SecurityTokenSerializer KeyInfoSerializer { get; public set; }
    public bool CanWriteToken { get; }
    public SamlSecurityTokenRequirement SamlSecurityTokenRequirement { get; public set; }
    public Saml2SecurityTokenHandler(SamlSecurityTokenRequirement samlSecurityTokenRequirement);
    public Saml2SecurityTokenHandler(XmlNodeList customConfigElements);
    private static Saml2SecurityTokenHandler();
    public X509CertificateValidator get_CertificateValidator();
    public void set_CertificateValidator(X509CertificateValidator value);
    public virtual SecurityKeyIdentifierClause CreateSecurityTokenReference(SecurityToken token, bool attached);
    protected virtual Saml2Conditions CreateConditions(Lifetime tokenLifetime, string relyingPartyAddress, SecurityTokenDescriptor tokenDescriptor);
    protected virtual Saml2Advice CreateAdvice(SecurityTokenDescriptor tokenDescriptor);
    protected virtual Saml2NameIdentifier CreateIssuerNameIdentifier(SecurityTokenDescriptor tokenDescriptor);
    protected virtual Saml2Attribute CreateAttribute(Claim claim, SecurityTokenDescriptor tokenDescriptor);
    protected virtual Saml2AttributeStatement CreateAttributeStatement(IClaimsIdentity subject, SecurityTokenDescriptor tokenDescriptor);
    protected virtual ICollection`1<Saml2Attribute> CollectAttributeValues(ICollection`1<Saml2Attribute> attributes);
    protected virtual void AddDelegateToAttributes(IClaimsIdentity subject, ICollection`1<Saml2Attribute> attributes, SecurityTokenDescriptor tokenDescriptor);
    protected virtual string CreateXmlStringFromAttributes(IEnumerable`1<Saml2Attribute> attributes);
    protected virtual IEnumerable`1<Saml2Statement> CreateStatements(SecurityTokenDescriptor tokenDescriptor);
    protected virtual Saml2AuthenticationStatement CreateAuthenticationStatement(AuthenticationInformation authInfo, SecurityTokenDescriptor tokenDescriptor);
    protected virtual Saml2Subject CreateSamlSubject(SecurityTokenDescriptor tokenDescriptor);
    public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor);
    protected virtual EncryptingCredentials GetEncryptingCredentials(SecurityTokenDescriptor tokenDescriptor);
    protected virtual SigningCredentials GetSigningCredentials(SecurityTokenDescriptor tokenDescriptor);
    public virtual bool get_CanValidateToken();
    public virtual Type get_TokenType();
    public virtual String[] GetTokenTypeIdentifiers();
    public SecurityTokenSerializer get_KeyInfoSerializer();
    public void set_KeyInfoSerializer(SecurityTokenSerializer value);
    protected virtual void ValidateConditions(Saml2Conditions conditions, bool enforceAudienceRestriction);
    public virtual ClaimsIdentityCollection ValidateToken(SecurityToken token);
    protected virtual string FindUpn(IClaimsIdentity claimsIdentity);
    protected virtual string DenormalizeAuthenticationType(string normalizedAuthenticationType);
    protected virtual void DetectReplayedTokens(SecurityToken token);
    protected virtual DateTime GetCacheExpirationTime(Saml2SecurityToken token);
    protected virtual string NormalizeAuthenticationContextClassReference(string saml2AuthenticationContextClassReference);
    protected virtual void ProcessSamlSubject(Saml2Subject assertionSubject, IClaimsIdentity subject, string issuer);
    protected virtual void ProcessAttributeStatement(Saml2AttributeStatement statement, IClaimsIdentity subject, string issuer);
    protected virtual void SetDelegateFromAttribute(Saml2Attribute attribute, IClaimsIdentity subject, string issuer);
    protected virtual void ProcessAuthenticationStatement(Saml2AuthenticationStatement statement, IClaimsIdentity subject, string issuer);
    protected virtual void ProcessAuthorizationDecisionStatement(Saml2AuthorizationDecisionStatement statement, IClaimsIdentity subject, string issuer);
    protected virtual void ProcessStatement(Collection`1<Saml2Statement> statements, IClaimsIdentity subject, string issuer);
    protected virtual IClaimsIdentity CreateClaims(Saml2SecurityToken samlToken);
    public virtual bool get_CanWriteToken();
    public virtual void WriteToken(XmlWriter writer, SecurityToken token);
    public virtual bool CanReadToken(XmlReader reader);
    public virtual bool CanReadKeyIdentifierClause(XmlReader reader);
    public virtual bool CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause securityKeyIdentifierClause);
    internal static bool IsSaml2KeyIdentifierClause(XmlReader reader);
    internal static bool IsSaml2Assertion(XmlReader reader);
    public virtual SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader);
    protected virtual void ValidateConfirmationData(Saml2SubjectConfirmationData confirmationData);
    protected virtual ReadOnlyCollection`1<SecurityKey> ResolveSecurityKeys(Saml2Assertion assertion, SecurityTokenResolver resolver);
    protected virtual SecurityToken ResolveIssuerToken(Saml2Assertion assertion, SecurityTokenResolver issuerResolver);
    protected virtual bool TryResolveIssuerToken(Saml2Assertion assertion, SecurityTokenResolver issuerResolver, SecurityToken& token);
    public virtual SecurityToken ReadToken(XmlReader reader);
    public SamlSecurityTokenRequirement get_SamlSecurityTokenRequirement();
    public void set_SamlSecurityTokenRequirement(SamlSecurityTokenRequirement value);
    public virtual void WriteKeyIdentifierClause(XmlWriter writer, SecurityKeyIdentifierClause securityKeyIdentifierClause);
    private static void ReadEmptyContentElement(XmlReader reader);
    private static Saml2Id ReadSimpleNCNameElement(XmlReader reader);
    private static Uri ReadSimpleUriElement(XmlReader reader);
    private static Uri ReadSimpleUriElement(XmlReader reader, UriKind kind);
    private static Uri ReadSimpleUriElement(XmlReader reader, UriKind kind, bool allowLaxReading);
    protected virtual Saml2NameIdentifier ReadSubjectID(XmlReader reader, string parentElement);
    private static Exception TryWrapReadException(XmlReader reader, Exception inner);
    protected virtual Saml2Action ReadAction(XmlReader reader);
    protected virtual void WriteAction(XmlWriter writer, Saml2Action data);
    protected virtual Saml2Advice ReadAdvice(XmlReader reader);
    protected virtual void WriteAdvice(XmlWriter writer, Saml2Advice data);
    private static XmlDictionaryReader CreatePlaintextReaderFromEncryptedData(XmlDictionaryReader reader, SecurityTokenResolver serviceTokenResolver, SecurityTokenSerializer keyInfoSerializer, Collection`1<EncryptedKeyIdentifierClause> clauses, EncryptingCredentials& encryptingCredentials);
    protected virtual Saml2Assertion ReadAssertion(XmlReader reader);
    protected virtual void WriteAssertion(XmlWriter writer, Saml2Assertion data);
    protected virtual Saml2Attribute ReadAttribute(XmlReader reader);
    protected virtual string ReadAttributeValue(XmlReader reader, Saml2Attribute attribute);
    protected virtual void WriteAttribute(XmlWriter writer, Saml2Attribute data);
    protected virtual void WriteAttributeValue(XmlWriter writer, string value, Saml2Attribute attribute);
    protected virtual Saml2AttributeStatement ReadAttributeStatement(XmlReader reader);
    protected virtual void WriteAttributeStatement(XmlWriter writer, Saml2AttributeStatement data);
    protected virtual Saml2AudienceRestriction ReadAudienceRestriction(XmlReader reader);
    protected virtual void WriteAudienceRestriction(XmlWriter writer, Saml2AudienceRestriction data);
    protected virtual Saml2AuthenticationContext ReadAuthenticationContext(XmlReader reader);
    protected virtual void WriteAuthenticationContext(XmlWriter writer, Saml2AuthenticationContext data);
    protected virtual Saml2AuthenticationStatement ReadAuthenticationStatement(XmlReader reader);
    protected virtual void WriteAuthenticationStatement(XmlWriter writer, Saml2AuthenticationStatement data);
    protected virtual Saml2AuthorizationDecisionStatement ReadAuthorizationDecisionStatement(XmlReader reader);
    protected virtual void WriteAuthorizationDecisionStatement(XmlWriter writer, Saml2AuthorizationDecisionStatement data);
    protected virtual Saml2Conditions ReadConditions(XmlReader reader);
    protected virtual void WriteConditions(XmlWriter writer, Saml2Conditions data);
    protected virtual Saml2Evidence ReadEvidence(XmlReader reader);
    protected virtual void WriteEvidence(XmlWriter writer, Saml2Evidence data);
    protected virtual Saml2NameIdentifier ReadIssuer(XmlReader reader);
    protected virtual void WriteIssuer(XmlWriter writer, Saml2NameIdentifier data);
    protected virtual SecurityKeyIdentifier ReadSubjectKeyInfo(XmlReader reader);
    protected virtual SecurityKeyIdentifier ReadSigningKeyInfo(XmlReader reader, Saml2Assertion assertion);
    protected virtual void WriteSubjectKeyInfo(XmlWriter writer, SecurityKeyIdentifier data);
    protected virtual void WriteSigningKeyInfo(XmlWriter writer, SecurityKeyIdentifier signingKeyIdentifier);
    protected virtual Saml2NameIdentifier ReadNameID(XmlReader reader);
    protected virtual void WriteNameID(XmlWriter writer, Saml2NameIdentifier data);
    protected virtual Saml2NameIdentifier ReadNameIDType(XmlReader reader);
    protected virtual Saml2NameIdentifier ReadEncryptedId(XmlReader reader);
    protected virtual void WriteNameIDType(XmlWriter writer, Saml2NameIdentifier data);
    protected virtual Saml2ProxyRestriction ReadProxyRestriction(XmlReader reader);
    protected virtual void WriteProxyRestriction(XmlWriter writer, Saml2ProxyRestriction data);
    protected virtual Saml2Statement ReadStatement(XmlReader reader);
    protected virtual void WriteStatement(XmlWriter writer, Saml2Statement data);
    protected virtual Saml2Subject ReadSubject(XmlReader reader);
    protected virtual void WriteSubject(XmlWriter writer, Saml2Subject data);
    protected virtual Saml2SubjectConfirmation ReadSubjectConfirmation(XmlReader reader);
    protected virtual void WriteSubjectConfirmation(XmlWriter writer, Saml2SubjectConfirmation data);
    protected virtual Saml2SubjectConfirmationData ReadSubjectConfirmationData(XmlReader reader);
    protected virtual void WriteSubjectConfirmationData(XmlWriter writer, Saml2SubjectConfirmationData data);
    protected virtual Saml2SubjectLocality ReadSubjectLocality(XmlReader reader);
    protected virtual void WriteSubjectLocality(XmlWriter writer, Saml2SubjectLocality data);
    [CompilerGeneratedAttribute]
private static bool <CreateAuthenticationStatement>b__0(Claim c);
    [CompilerGeneratedAttribute]
private static bool <CreateAuthenticationStatement>b__1(Claim c);
}
public abstract class Microsoft.IdentityModel.Tokens.Saml2.Saml2Statement : object {
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2Subject : object {
    private Saml2NameIdentifier _nameId;
    private Collection`1<Saml2SubjectConfirmation> _subjectConfirmations;
    public Saml2NameIdentifier NameId { get; public set; }
    public Collection`1<Saml2SubjectConfirmation> SubjectConfirmations { get; }
    public Saml2Subject(Saml2NameIdentifier nameId);
    public Saml2Subject(Saml2SubjectConfirmation subjectConfirmation);
    public Saml2NameIdentifier get_NameId();
    public void set_NameId(Saml2NameIdentifier value);
    public Collection`1<Saml2SubjectConfirmation> get_SubjectConfirmations();
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2SubjectConfirmation : object {
    private Saml2SubjectConfirmationData _data;
    private Uri _method;
    private Saml2NameIdentifier _nameId;
    public Uri Method { get; public set; }
    public Saml2NameIdentifier NameIdentifier { get; public set; }
    public Saml2SubjectConfirmationData SubjectConfirmationData { get; public set; }
    public Saml2SubjectConfirmation(Uri method);
    public Saml2SubjectConfirmation(Uri method, Saml2SubjectConfirmationData data);
    public Uri get_Method();
    public void set_Method(Uri value);
    public Saml2NameIdentifier get_NameIdentifier();
    public void set_NameIdentifier(Saml2NameIdentifier value);
    public Saml2SubjectConfirmationData get_SubjectConfirmationData();
    public void set_SubjectConfirmationData(Saml2SubjectConfirmationData value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2SubjectConfirmationData : object {
    private string _address;
    private Saml2Id _inResponseTo;
    private Collection`1<SecurityKeyIdentifier> _keyIdentifiers;
    private Nullable`1<DateTime> _notBefore;
    private Nullable`1<DateTime> _notOnOrAfter;
    private Uri _recipient;
    public string Address { get; public set; }
    public Saml2Id InResponseTo { get; public set; }
    public Collection`1<SecurityKeyIdentifier> KeyIdentifiers { get; }
    public Nullable`1<DateTime> NotBefore { get; public set; }
    public Nullable`1<DateTime> NotOnOrAfter { get; public set; }
    public Uri Recipient { get; public set; }
    public string get_Address();
    public void set_Address(string value);
    public Saml2Id get_InResponseTo();
    public void set_InResponseTo(Saml2Id value);
    public Collection`1<SecurityKeyIdentifier> get_KeyIdentifiers();
    public Nullable`1<DateTime> get_NotBefore();
    public void set_NotBefore(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_NotOnOrAfter();
    public void set_NotOnOrAfter(Nullable`1<DateTime> value);
    public Uri get_Recipient();
    public void set_Recipient(Uri value);
}
public class Microsoft.IdentityModel.Tokens.Saml2.Saml2SubjectLocality : object {
    private string _address;
    private string _dnsName;
    public string Address { get; public set; }
    public string DnsName { get; public set; }
    public Saml2SubjectLocality(string address, string dnsName);
    public string get_Address();
    public void set_Address(string value);
    public string get_DnsName();
    public void set_DnsName(string value);
}
internal class Microsoft.IdentityModel.Tokens.Saml2.WrappedSaml2AssertionKeyIdentifierClause : SamlAssertionKeyIdentifierClause {
    private Saml2AssertionKeyIdentifierClause _clause;
    public bool CanCreateKey { get; }
    public Saml2AssertionKeyIdentifierClause WrappedClause { get; }
    public WrappedSaml2AssertionKeyIdentifierClause(Saml2AssertionKeyIdentifierClause clause);
    public virtual bool get_CanCreateKey();
    public virtual SecurityKey CreateKey();
    public virtual bool Matches(SecurityKeyIdentifierClause keyIdentifierClause);
    public Saml2AssertionKeyIdentifierClause get_WrappedClause();
}
internal class Microsoft.IdentityModel.Tokens.SamlAttributeKeyComparer : object {
    public sealed virtual bool Equals(AttributeKey x, AttributeKey y);
    public sealed virtual int GetHashCode(AttributeKey obj);
}
public class Microsoft.IdentityModel.Tokens.SamlSecurityTokenRequirement : object {
    private static X509RevocationMode DefaultRevocationMode;
    private static X509CertificateValidationMode DefaultValidationMode;
    private static StoreLocation DefaultStoreLocation;
    private string _nameClaimType;
    private string _roleClaimType;
    private bool _mapToWindows;
    private bool _useWindowsTokenService;
    private X509CertificateValidator _certificateValidator;
    public X509CertificateValidator CertificateValidator { get; public set; }
    public string NameClaimType { get; public set; }
    public string RoleClaimType { get; public set; }
    public bool MapToWindows { get; public set; }
    public bool UseWindowsTokenService { get; public set; }
    public SamlSecurityTokenRequirement(XmlElement element);
    private static SamlSecurityTokenRequirement();
    public X509CertificateValidator get_CertificateValidator();
    public void set_CertificateValidator(X509CertificateValidator value);
    public string get_NameClaimType();
    public void set_NameClaimType(string value);
    public string get_RoleClaimType();
    public void set_RoleClaimType(string value);
    public bool get_MapToWindows();
    public void set_MapToWindows(bool value);
    public bool get_UseWindowsTokenService();
    public void set_UseWindowsTokenService(bool value);
    public virtual bool ShouldEnforceAudienceRestriction(AudienceUriMode audienceUriMode, SecurityToken token);
    public virtual void ValidateAudienceRestriction(IList`1<Uri> allowedAudienceUris, IList`1<Uri> tokenAudiences);
}
internal class Microsoft.IdentityModel.Tokens.SctAuthorizationPolicy : object {
    private ClaimSet _issuer;
    private string _id;
    private ClaimSet System.IdentityModel.Policy.IAuthorizationPolicy.Issuer { get; }
    private string System.IdentityModel.Policy.IAuthorizationComponent.Id { get; }
    internal SctAuthorizationPolicy(Claim claim);
    private sealed virtual override bool System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(EvaluationContext evaluationContext, Object& state);
    private sealed virtual override ClaimSet System.IdentityModel.Policy.IAuthorizationPolicy.get_Issuer();
    private sealed virtual override string System.IdentityModel.Policy.IAuthorizationComponent.get_Id();
}
internal class Microsoft.IdentityModel.Tokens.SctClaimsHandler : object {
    private static Type s_type;
    private static Assembly s_assembly;
    private BindingFlags setFieldFlags;
    private ClaimsAuthenticationManager _claimsAuthenticationManager;
    private SecurityTokenHandlerCollection _securityTokenHandlerCollection;
    private string _endpointId;
    public string EndpointId { get; }
    public SecurityTokenHandlerCollection SecurityTokenHandlerCollection { get; }
    public SctClaimsHandler(ClaimsAuthenticationManager claimsAuthenticationManager, SecurityTokenHandlerCollection securityTokenHandlerCollection, string endpointId);
    public string get_EndpointId();
    public SecurityTokenHandlerCollection get_SecurityTokenHandlerCollection();
    internal void SetPrincipalBootstrapTokensAndBindIdfxAuthPolicy(SecurityContextSecurityToken sct);
    private bool ContainsEndpointAuthPolicy(ReadOnlyCollection`1<IAuthorizationPolicy> policies);
    private Claim GetPrimaryIdentityClaim(AuthorizationContext authContext);
    private void ReplaceAuthPolicies(SecurityContextSecurityToken sct, ReadOnlyCollection`1<IAuthorizationPolicy> policies);
    public void OnTokenIssued(SecurityToken issuedToken, EndpointAddress tokenRequestor);
    public void OnTokenRenewed(SecurityToken issuedToken, SecurityToken oldToken);
}
internal static class Microsoft.IdentityModel.Tokens.SecurityAlgorithm : object {
    internal static string Sha1Digest;
    internal static string Sha256Digest;
    internal static string HmacSha1Signature;
    internal static string RsaSha1Signature;
    internal static string RsaSha256Signature;
    internal static string Aes256Encryption;
    internal static string RsaOaepKeyWrap;
    internal static int DefaultSymmetricKeyLength;
    internal static string DefaultEncryptionAlgorithm;
    internal static string DefaultAsymmetricKeyWrapAlgorithm;
    internal static string DefaultAsymmetricSignatureAlgorithm;
    internal static string DefaultDigestAlgorithm;
}
public class Microsoft.IdentityModel.Tokens.SecurityKeyElement : SecurityKey {
    private SecurityKey _securityKey;
    private object _keyLock;
    private SecurityTokenResolver _securityTokenResolver;
    private SecurityKeyIdentifier _securityKeyIdentifier;
    public int KeySize { get; }
    public SecurityKeyElement(SecurityKeyIdentifierClause securityKeyIdentifierClause, SecurityTokenResolver securityTokenResolver);
    public SecurityKeyElement(SecurityKeyIdentifier securityKeyIdentifier, SecurityTokenResolver securityTokenResolver);
    private void Initialize(SecurityKeyIdentifier securityKeyIdentifier, SecurityTokenResolver securityTokenResolver);
    public virtual Byte[] DecryptKey(string algorithm, Byte[] keyData);
    public virtual Byte[] EncryptKey(string algorithm, Byte[] keyData);
    public virtual bool IsAsymmetricAlgorithm(string algorithm);
    public virtual bool IsSupportedAlgorithm(string algorithm);
    public virtual bool IsSymmetricAlgorithm(string algorithm);
    public virtual int get_KeySize();
    private void ResolveKey();
}
public abstract class Microsoft.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer : object {
    public abstract virtual bool CanReadKeyIdentifierClause(XmlReader reader);
    public abstract virtual bool CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause securityKeyIdentifierClause);
    public abstract virtual SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader);
    public abstract virtual void WriteKeyIdentifierClause(XmlWriter writer, SecurityKeyIdentifierClause securityKeyIdentifierClause);
}
internal class Microsoft.IdentityModel.Tokens.SecurityTokenAuthenticatorAdapter : SecurityTokenAuthenticator {
    private SecurityTokenHandler _securityTokenHandler;
    private SecurityTokenRequirement _securityTokenRequirement;
    private ClaimsAuthenticationManager _claimsAuthenticationManager;
    private ExceptionMapper _exceptionMapper;
    public SecurityTokenAuthenticatorAdapter(SecurityTokenHandler securityTokenHandler, SecurityTokenRequirement securityTokenRequirement, ClaimsAuthenticationManager claimsAuthenticationManager, ExceptionMapper exceptionMapper);
    protected virtual bool CanValidateTokenCore(SecurityToken token);
    protected sealed virtual ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token);
}
public abstract class Microsoft.IdentityModel.Tokens.SecurityTokenCache : object {
    private SecurityTokenHandler _owner;
    public SecurityTokenHandler Owner { get; public set; }
    public abstract virtual void ClearEntries();
    public abstract virtual bool TryRemoveEntry(object key);
    public abstract virtual bool TryRemoveAllEntries(object key);
    public abstract virtual bool TryAddEntry(object key, SecurityToken value);
    public SecurityTokenHandler get_Owner();
    public void set_Owner(SecurityTokenHandler value);
    public abstract virtual bool TryGetEntry(object key, SecurityToken& value);
    public abstract virtual bool TryGetAllEntries(object key, IList`1& tokens);
    public abstract virtual bool TryReplaceEntry(object key, SecurityToken newValue);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenCacheKey : object {
    private UniqueId _contextId;
    private UniqueId _keyGeneration;
    private string _endpointId;
    private bool _isSessionMode;
    private bool _canIgnoreContextId;
    private bool _canIgnoreKeyGeneration;
    private bool _canIgnoreEndpointId;
    public UniqueId ContextId { get; }
    public UniqueId KeyGeneration { get; }
    public string EndpointId { get; }
    public bool CanIgnoreContextId { get; public set; }
    public bool CanIgnoreKeyGeneration { get; public set; }
    public bool CanIgnoreEndpointId { get; public set; }
    public bool IsSessionMode { get; }
    public SecurityTokenCacheKey(string endpointId, UniqueId contextId, UniqueId keyGeneration, bool isSessionMode);
    public UniqueId get_ContextId();
    public UniqueId get_KeyGeneration();
    public string get_EndpointId();
    public bool get_CanIgnoreContextId();
    public void set_CanIgnoreContextId(bool value);
    public bool get_CanIgnoreKeyGeneration();
    public void set_CanIgnoreKeyGeneration(bool value);
    public bool get_CanIgnoreEndpointId();
    public void set_CanIgnoreEndpointId(bool value);
    public bool get_IsSessionMode();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(SecurityTokenCacheKey a, SecurityTokenCacheKey b);
    public static bool op_Inequality(SecurityTokenCacheKey a, SecurityTokenCacheKey b);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor : object {
    private SecurityKeyIdentifierClause _attachedReference;
    private AuthenticationInformation _authenticationInfo;
    private string _tokenIssuerName;
    private ProofDescriptor _proofDescriptor;
    private IClaimsIdentity _subject;
    private SecurityToken _token;
    private string _tokenType;
    private SecurityKeyIdentifierClause _unattachedReference;
    private Lifetime _lifetime;
    private DisplayToken _displayToken;
    private string _appliesToAddress;
    private string _replyToAddress;
    private EncryptingCredentials _encryptingCredentials;
    private SigningCredentials _signingCredentials;
    private Dictionary`2<string, object> _properties;
    public string AppliesToAddress { get; public set; }
    public string ReplyToAddress { get; public set; }
    public EncryptingCredentials EncryptingCredentials { get; public set; }
    public SigningCredentials SigningCredentials { get; public set; }
    public SecurityKeyIdentifierClause AttachedReference { get; public set; }
    public AuthenticationInformation AuthenticationInfo { get; public set; }
    public string TokenIssuerName { get; public set; }
    public ProofDescriptor Proof { get; public set; }
    public Dictionary`2<string, object> Properties { get; }
    public SecurityToken Token { get; public set; }
    public string TokenType { get; public set; }
    public SecurityKeyIdentifierClause UnattachedReference { get; public set; }
    public Lifetime Lifetime { get; public set; }
    public DisplayToken DisplayToken { get; public set; }
    public IClaimsIdentity Subject { get; public set; }
    public void AddAuthenticationClaims(string authType);
    public void AddAuthenticationClaims(string authType, DateTime time);
    public virtual void ApplyTo(RequestSecurityTokenResponse response);
    public string get_AppliesToAddress();
    public void set_AppliesToAddress(string value);
    public string get_ReplyToAddress();
    public void set_ReplyToAddress(string value);
    public EncryptingCredentials get_EncryptingCredentials();
    public void set_EncryptingCredentials(EncryptingCredentials value);
    public SigningCredentials get_SigningCredentials();
    public void set_SigningCredentials(SigningCredentials value);
    public SecurityKeyIdentifierClause get_AttachedReference();
    public void set_AttachedReference(SecurityKeyIdentifierClause value);
    public AuthenticationInformation get_AuthenticationInfo();
    public void set_AuthenticationInfo(AuthenticationInformation value);
    public string get_TokenIssuerName();
    public void set_TokenIssuerName(string value);
    public ProofDescriptor get_Proof();
    public void set_Proof(ProofDescriptor value);
    public Dictionary`2<string, object> get_Properties();
    public SecurityToken get_Token();
    public void set_Token(SecurityToken value);
    public string get_TokenType();
    public void set_TokenType(string value);
    public SecurityKeyIdentifierClause get_UnattachedReference();
    public void set_UnattachedReference(SecurityKeyIdentifierClause value);
    public Lifetime get_Lifetime();
    public void set_Lifetime(Lifetime value);
    public DisplayToken get_DisplayToken();
    public void set_DisplayToken(DisplayToken value);
    public IClaimsIdentity get_Subject();
    public void set_Subject(IClaimsIdentity value);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenElement : object {
    private SecurityToken _securityToken;
    private XmlElement _securityTokenXml;
    private SecurityTokenHandlerCollection _securityTokenHandlers;
    private ClaimsIdentityCollection _subject;
    public XmlElement SecurityTokenXml { get; }
    public SecurityTokenElement(SecurityToken securityToken);
    public SecurityTokenElement(XmlElement securityTokenXml, SecurityTokenHandlerCollection securityTokenHandlers);
    public XmlElement get_SecurityTokenXml();
    public SecurityToken GetSecurityToken();
    public ClaimsIdentityCollection GetSubject();
    protected virtual ClaimsIdentityCollection CreateSubject(XmlElement securityTokenXml, SecurityTokenHandlerCollection securityTokenHandlers);
    protected virtual SecurityToken ReadSecurityToken(XmlElement securityTokenXml, SecurityTokenHandlerCollection securityTokenHandlers);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException : SecurityTokenValidationException {
    public SecurityTokenExpiredException(string message);
    public SecurityTokenExpiredException(string message, Exception inner);
    protected SecurityTokenExpiredException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.IdentityModel.Tokens.SecurityTokenHandler : object {
    private SecurityTokenHandlerCollection _collection;
    private SecurityTokenHandlerConfiguration _configuration;
    public SecurityTokenHandlerConfiguration Configuration { get; public set; }
    public SecurityTokenHandlerCollection ContainingCollection { get; public set; }
    public bool CanWriteToken { get; }
    public Type TokenType { get; }
    public bool CanValidateToken { get; }
    public SecurityTokenHandlerConfiguration get_Configuration();
    public void set_Configuration(SecurityTokenHandlerConfiguration value);
    public SecurityTokenHandlerCollection get_ContainingCollection();
    public void set_ContainingCollection(SecurityTokenHandlerCollection value);
    public virtual bool CanReadToken(XmlReader reader);
    public virtual SecurityToken ReadToken(XmlReader reader);
    public virtual SecurityToken ReadToken(XmlReader reader, SecurityTokenResolver tokenResolver);
    public virtual bool get_CanWriteToken();
    protected virtual void DetectReplayedTokens(SecurityToken token);
    public virtual void WriteToken(XmlWriter writer, SecurityToken token);
    public virtual bool CanReadKeyIdentifierClause(XmlReader reader);
    public virtual SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader);
    public virtual bool CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause securityKeyIdentifierClause);
    public virtual void WriteKeyIdentifierClause(XmlWriter writer, SecurityKeyIdentifierClause securityKeyIdentifierClause);
    public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor);
    public virtual SecurityKeyIdentifierClause CreateSecurityTokenReference(SecurityToken token, bool attached);
    public abstract virtual Type get_TokenType();
    public abstract virtual String[] GetTokenTypeIdentifiers();
    public virtual bool get_CanValidateToken();
    public virtual ClaimsIdentityCollection ValidateToken(SecurityToken token);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.IdentityModel.Tokens.SecurityTokenHandlerCollection : Collection`1<SecurityTokenHandler> {
    internal static int _defaultHandlerCollectionCount;
    private Dictionary`2<string, SecurityTokenHandler> _byIdentifier;
    private Dictionary`2<Type, SecurityTokenHandler> _byType;
    private SecurityTokenHandlerConfiguration _configuration;
    public SecurityTokenHandler Item { get; }
    public SecurityTokenHandler Item { get; }
    public SecurityTokenHandler Item { get; }
    public SecurityTokenHandlerConfiguration Configuration { get; }
    public IEnumerable`1<Type> TokenTypes { get; }
    public IEnumerable`1<string> TokenTypeIdentifiers { get; }
    public SecurityTokenHandlerCollection(SecurityTokenHandlerConfiguration configuration);
    public SecurityTokenHandlerCollection(IEnumerable`1<SecurityTokenHandler> handlers);
    public SecurityTokenHandlerCollection(IEnumerable`1<SecurityTokenHandler> handlers, SecurityTokenHandlerConfiguration configuration);
    private static SecurityTokenHandlerCollection();
    public static SecurityTokenHandlerCollection CreateDefaultSecurityTokenHandlerCollection();
    public static SecurityTokenHandlerCollection CreateDefaultSecurityTokenHandlerCollection(SecurityTokenHandlerConfiguration configuration);
    public SecurityTokenHandler get_Item(string tokenTypeIdentifier);
    public SecurityTokenHandler get_Item(SecurityToken token);
    public SecurityTokenHandler get_Item(Type tokenType);
    public SecurityTokenHandlerConfiguration get_Configuration();
    public IEnumerable`1<Type> get_TokenTypes();
    public IEnumerable`1<string> get_TokenTypeIdentifiers();
    public void AddOrReplace(SecurityTokenHandler handler);
    private void AddToDictionaries(SecurityTokenHandler handler);
    private void RemoveFromDictionaries(SecurityTokenHandler handler);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, SecurityTokenHandler item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, SecurityTokenHandler item);
    public bool CanReadToken(XmlReader reader);
    public bool CanWriteToken(SecurityToken token);
    public SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor);
    public ClaimsIdentityCollection ValidateToken(SecurityToken token);
    public SecurityToken ReadToken(XmlReader reader);
    public void WriteToken(XmlWriter writer, SecurityToken token);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager : object {
    private Dictionary`2<string, SecurityTokenHandlerCollection> _collections;
    private string _serviceName;
    public SecurityTokenHandlerCollection Item { get; public set; }
    public int Count { get; }
    public string ServiceName { get; }
    public IEnumerable`1<SecurityTokenHandlerCollection> SecurityTokenHandlerCollections { get; }
    public SecurityTokenHandlerCollectionManager(string serviceName);
    public static SecurityTokenHandlerCollectionManager CreateEmptySecurityTokenHandlerCollectionManager();
    public static SecurityTokenHandlerCollectionManager CreateDefaultSecurityTokenHandlerCollectionManager();
    public SecurityTokenHandlerCollection get_Item(string usage);
    public void set_Item(string usage, SecurityTokenHandlerCollection value);
    public bool ContainsKey(string usage);
    public int get_Count();
    public string get_ServiceName();
    public IEnumerable`1<SecurityTokenHandlerCollection> get_SecurityTokenHandlerCollections();
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenHandlerConfiguration : object {
    public static bool DefaultDetectReplayedTokens;
    public static IssuerNameRegistry DefaultIssuerNameRegistry;
    public static SecurityTokenResolver DefaultIssuerTokenResolver;
    public static TimeSpan DefaultMaxClockSkew;
    public static bool DefaultSaveBootstrapTokens;
    public static int DefaultTokenReplayCacheCapacity;
    public static TimeSpan DefaultTokenReplayCachePurgeInterval;
    public static TimeSpan DefaultTokenReplayCacheExpirationPeriod;
    public static X509CertificateValidator DefaultCertificateValidator;
    private AudienceRestriction _audienceRestriction;
    private X509CertificateValidator _certificateValidator;
    private bool _detectReplayedTokens;
    private IssuerNameRegistry _issuerNameRegistry;
    private SecurityTokenResolver _issuerTokenResolver;
    private TimeSpan _maxClockSkew;
    private bool _saveBootstrapTokens;
    private SecurityTokenResolver _serviceTokenResolver;
    private TokenReplayCache _tokenReplayCache;
    private TimeSpan _tokenReplayCacheExpirationPeriod;
    public AudienceRestriction AudienceRestriction { get; public set; }
    public X509CertificateValidator CertificateValidator { get; public set; }
    public bool DetectReplayedTokens { get; public set; }
    public IssuerNameRegistry IssuerNameRegistry { get; public set; }
    public SecurityTokenResolver IssuerTokenResolver { get; public set; }
    public TimeSpan MaxClockSkew { get; public set; }
    public bool SaveBootstrapTokens { get; public set; }
    public SecurityTokenResolver ServiceTokenResolver { get; public set; }
    public TokenReplayCache TokenReplayCache { get; public set; }
    public TimeSpan TokenReplayCacheExpirationPeriod { get; public set; }
    private static SecurityTokenHandlerConfiguration();
    public AudienceRestriction get_AudienceRestriction();
    public void set_AudienceRestriction(AudienceRestriction value);
    public X509CertificateValidator get_CertificateValidator();
    public void set_CertificateValidator(X509CertificateValidator value);
    public bool get_DetectReplayedTokens();
    public void set_DetectReplayedTokens(bool value);
    public IssuerNameRegistry get_IssuerNameRegistry();
    public void set_IssuerNameRegistry(IssuerNameRegistry value);
    public SecurityTokenResolver get_IssuerTokenResolver();
    public void set_IssuerTokenResolver(SecurityTokenResolver value);
    public TimeSpan get_MaxClockSkew();
    public void set_MaxClockSkew(TimeSpan value);
    public bool get_SaveBootstrapTokens();
    public void set_SaveBootstrapTokens(bool value);
    public SecurityTokenResolver get_ServiceTokenResolver();
    public void set_ServiceTokenResolver(SecurityTokenResolver value);
    public TokenReplayCache get_TokenReplayCache();
    public void set_TokenReplayCache(TokenReplayCache value);
    public TimeSpan get_TokenReplayCacheExpirationPeriod();
    public void set_TokenReplayCacheExpirationPeriod(TimeSpan value);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenNotYetValidException : SecurityTokenValidationException {
    public SecurityTokenNotYetValidException(string message);
    public SecurityTokenNotYetValidException(string message, Exception inner);
    protected SecurityTokenNotYetValidException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenReplayDetectedException : SecurityTokenValidationException {
    public SecurityTokenReplayDetectedException(string message);
    public SecurityTokenReplayDetectedException(string message, Exception inner);
    protected SecurityTokenReplayDetectedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenSerializerAdapter : WSSecurityTokenSerializer {
    private SecureConversationVersion _scVersion;
    private SecurityTokenHandlerCollection _securityTokenHandlers;
    private bool _mapExceptionsToSoapFaults;
    private ExceptionMapper _exceptionMapper;
    public bool MapExceptionsToSoapFaults { get; public set; }
    public SecurityTokenHandlerCollection SecurityTokenHandlers { get; }
    public ExceptionMapper ExceptionMapper { get; public set; }
    public SecurityTokenSerializerAdapter(SecurityTokenHandlerCollection securityTokenHandlerCollection);
    public SecurityTokenSerializerAdapter(SecurityTokenHandlerCollection securityTokenHandlerCollection, SecurityVersion securityVersion);
    public SecurityTokenSerializerAdapter(SecurityTokenHandlerCollection securityTokenHandlerCollection, SecurityVersion securityVersion, bool emitBspAttributes, SamlSerializer samlSerializer, SecurityStateEncoder stateEncoder, IEnumerable`1<Type> knownTypes);
    public SecurityTokenSerializerAdapter(SecurityTokenHandlerCollection securityTokenHandlerCollection, SecurityVersion securityVersion, TrustVersion trustVersion, SecureConversationVersion secureConversationVersion, bool emitBspAttributes, SamlSerializer samlSerializer, SecurityStateEncoder stateEncoder, IEnumerable`1<Type> knownTypes);
    public bool get_MapExceptionsToSoapFaults();
    public void set_MapExceptionsToSoapFaults(bool value);
    public SecurityTokenHandlerCollection get_SecurityTokenHandlers();
    public ExceptionMapper get_ExceptionMapper();
    public void set_ExceptionMapper(ExceptionMapper value);
    protected virtual bool CanReadTokenCore(XmlReader reader);
    protected virtual bool CanWriteTokenCore(SecurityToken token);
    protected virtual SecurityToken ReadTokenCore(XmlReader reader, SecurityTokenResolver tokenResolver);
    protected virtual void WriteTokenCore(XmlWriter writer, SecurityToken token);
    protected virtual bool CanReadKeyIdentifierCore(XmlReader reader);
    protected virtual SecurityKeyIdentifier ReadKeyIdentifierCore(XmlReader reader);
    protected virtual bool CanReadKeyIdentifierClauseCore(XmlReader reader);
    protected virtual bool CanWriteKeyIdentifierClauseCore(SecurityKeyIdentifierClause keyIdentifierClause);
    protected virtual SecurityKeyIdentifierClause ReadKeyIdentifierClauseCore(XmlReader reader);
    protected virtual void WriteKeyIdentifierClauseCore(XmlWriter writer, SecurityKeyIdentifierClause keyIdentifierClause);
}
internal class Microsoft.IdentityModel.Tokens.SecurityTokenSpecificationEnumerable : object {
    private SecurityMessageProperty _securityMessageProperty;
    public SecurityTokenSpecificationEnumerable(SecurityMessageProperty securityMessageProperty);
    public sealed virtual IEnumerator`1<SecurityTokenSpecification> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public static class Microsoft.IdentityModel.Tokens.SecurityTokenTypes : object {
    public static string Kerberos;
    public static string Rsa;
    public static string OasisWssSaml11TokenProfile11;
    public static string OasisWssSaml2TokenProfile11;
    public static string Saml11TokenProfile11;
    public static string Saml2TokenProfile11;
    public static string UserName;
    public static string X509Certificate;
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenUnavailableException : Exception {
    public SecurityTokenUnavailableException(string message);
    public SecurityTokenUnavailableException(string message, Exception exception);
    protected SecurityTokenUnavailableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.SecurityTokenUnavailableFaultException : FaultException {
    public SecurityTokenUnavailableFaultException(FaultReason reason);
}
public class Microsoft.IdentityModel.Tokens.SessionSecurityToken : SecurityToken {
    private SecurityContextSecurityToken _securityContextToken;
    private bool _securityContextTokenWrapper;
    private SecureConversationVersion _scVersion;
    private string _context;
    private bool _isPersistent;
    private IClaimsPrincipal _claimsPrincipal;
    private object _claimsPrincipalLock;
    private string _endpointId;
    private bool _isSessionMode;
    public IClaimsPrincipal ClaimsPrincipal { get; }
    public string Context { get; }
    public UniqueId ContextId { get; }
    public string EndpointId { get; }
    public DateTime KeyEffectiveTime { get; }
    public DateTime KeyExpirationTime { get; }
    public UniqueId KeyGeneration { get; }
    public string Id { get; }
    public bool IsPersistent { get; public set; }
    internal bool IsSecurityContextSecurityTokenWrapper { get; }
    public bool IsSessionMode { get; public set; }
    public SecureConversationVersion SecureConversationVersion { get; }
    internal SecurityContextSecurityToken SecurityContextSecurityToken { get; }
    public ReadOnlyCollection`1<SecurityKey> SecurityKeys { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public SessionSecurityToken(IClaimsPrincipal claimsPrincipal);
    public SessionSecurityToken(IClaimsPrincipal claimsPrincipal, TimeSpan lifetime);
    public SessionSecurityToken(IClaimsPrincipal claimsPrincipal, string context);
    public SessionSecurityToken(IClaimsPrincipal claimsPrincipal, string context, Nullable`1<DateTime> validFrom, Nullable`1<DateTime> validTo);
    public SessionSecurityToken(IClaimsPrincipal claimsPrincipal, string context, string endpointId, Nullable`1<DateTime> validFrom, Nullable`1<DateTime> validTo);
    public SessionSecurityToken(IClaimsPrincipal claimsPrincipal, UniqueId contextId, string context, string endpointId, TimeSpan lifetime, SymmetricSecurityKey key);
    public SessionSecurityToken(IClaimsPrincipal claimsPrincipal, UniqueId contextId, string context, string endpointId, DateTime validFrom, TimeSpan lifetime, SymmetricSecurityKey key);
    public SessionSecurityToken(IClaimsPrincipal claimsPrincipal, UniqueId contextId, string context, string endpointId, Nullable`1<DateTime> validFrom, Nullable`1<DateTime> validTo, SymmetricSecurityKey key);
    internal SessionSecurityToken(UniqueId contextId, string id, string context, Byte[] key, string endpointId, DateTime validFrom, DateTime validTo, UniqueId keyGeneration, DateTime keyEffectiveTime, DateTime keyExpirationTime, ReadOnlyCollection`1<IAuthorizationPolicy> authorizationPolicies);
    public SessionSecurityToken(SecurityContextSecurityToken securityContextToken, SecureConversationVersion version);
    public IClaimsPrincipal get_ClaimsPrincipal();
    public string get_Context();
    public UniqueId get_ContextId();
    public string get_EndpointId();
    public DateTime get_KeyEffectiveTime();
    public DateTime get_KeyExpirationTime();
    public UniqueId get_KeyGeneration();
    public virtual string get_Id();
    public bool get_IsPersistent();
    public void set_IsPersistent(bool value);
    internal bool get_IsSecurityContextSecurityTokenWrapper();
    public bool get_IsSessionMode();
    public void set_IsSessionMode(bool value);
    public SecureConversationVersion get_SecureConversationVersion();
    internal SecurityContextSecurityToken get_SecurityContextSecurityToken();
    public virtual ReadOnlyCollection`1<SecurityKey> get_SecurityKeys();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
    private string GetEndpointId(SecurityContextSecurityToken sct);
}
public class Microsoft.IdentityModel.Tokens.SessionSecurityTokenCookieSerializer : object {
    private static string SupportedVersion;
    private static string WindowsSecurityTokenStubElementName;
    private static int MaxDomainNameMapSize;
    private static Dictionary`2<string, string> DomainNameMap;
    private static Random rnd;
    private SecurityTokenHandlerCollection _bootstrapTokenHandlers;
    private bool _saveBootstrapTokens;
    private bool _useWindowsTokenService;
    private string _windowsIssuerName;
    [CompilerGeneratedAttribute]
private static OutboundClaimsFilter CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<Claim, bool> CS$<>9__CachedAnonymousMethodDelegate3;
    public SecurityTokenHandlerCollection BootstrapTokenHandler { get; }
    public SessionSecurityTokenCookieSerializer(SecurityTokenHandlerCollection bootstrapTokenHandlers, bool saveBootstrapTokens, bool useWindowsTokenService, string windowsIssuerName);
    private static SessionSecurityTokenCookieSerializer();
    public SecurityTokenHandlerCollection get_BootstrapTokenHandler();
    public virtual Byte[] Serialize(SessionSecurityToken sessionToken);
    public virtual SessionSecurityToken Deserialize(Byte[] cookie);
    protected virtual Claim DeserializeSysClaim(XmlDictionaryReader reader);
    protected virtual void SerializeSysClaim(Claim claim, XmlDictionaryWriter writer);
    protected virtual SecurityToken ReadBootstrapToken(XmlDictionaryReader dictionaryReader, SessionDictionary dictionary, IClaimsIdentity identity);
    protected virtual IClaimsPrincipal ReadPrincipal(XmlDictionaryReader dictionaryReader, SessionDictionary dictionary);
    protected virtual void ReadIdentities(XmlDictionaryReader dictionaryReader, SessionDictionary dictionary, ClaimsIdentityCollection identities);
    protected virtual IClaimsIdentity ReadIdentity(XmlDictionaryReader dictionaryReader, SessionDictionary dictionary);
    protected virtual void ReadClaims(XmlDictionaryReader dictionaryReader, SessionDictionary dictionary, ClaimCollection claims);
    protected virtual void ReadClaimProperties(XmlDictionaryReader dictionaryReader, SessionDictionary dictionary, IDictionary`2<string, string> properties);
    protected virtual void WriteBootstrapToken(XmlDictionaryWriter dictionaryWriter, SessionDictionary dictionary, SecurityToken token);
    protected virtual void WritePrincipal(XmlDictionaryWriter dictionaryWriter, SessionDictionary dictionary, IClaimsPrincipal principal);
    protected virtual void WriteIdentities(XmlDictionaryWriter dictionaryWriter, SessionDictionary dictionary, ClaimsIdentityCollection identities);
    protected virtual void WriteIdentity(XmlDictionaryWriter dictionaryWriter, SessionDictionary dictionary, IClaimsIdentity identity);
    protected virtual void WriteClaims(XmlDictionaryWriter dictionaryWriter, SessionDictionary dictionary, ClaimCollection claims, OutboundClaimsFilter outboundClaimsFilter);
    protected virtual void WriteClaimProperties(XmlDictionaryWriter dictionaryWriter, SessionDictionary dictionary, IDictionary`2<string, string> properties);
    private static bool IsNonX509Identity(WindowsClaimsIdentity windowsIdentity);
    private static void SerializeSid(SecurityIdentifier sid, SessionDictionary dictionary, XmlDictionaryWriter writer);
    private static void WriteRightAttribute(Claim claim, SessionDictionary dictionary, XmlDictionaryWriter writer);
    private static string ReadRightAttribute(XmlDictionaryReader reader, SessionDictionary dictionary);
    private static void WriteSidAttribute(SecurityIdentifier sid, SessionDictionary dictionary, XmlDictionaryWriter writer);
    private static SecurityIdentifier ReadSidAttribute(XmlDictionaryReader reader, SessionDictionary dictionary);
    protected virtual string GetUpn(string windowsLogonName);
    private static bool IsPossibleUpn(string name);
    [CompilerGeneratedAttribute]
private static bool <WriteIdentity>b__0(Claim c);
    [CompilerGeneratedAttribute]
private static bool <IsNonX509Identity>b__2(Claim claim);
}
public class Microsoft.IdentityModel.Tokens.SessionSecurityTokenHandler : SecurityTokenHandler {
    private static string DefaultCookieElementName;
    private static string DefaultCookieNamespace;
    public static TimeSpan DefaultLifetime;
    public static ReadOnlyCollection`1<CookieTransform> DefaultCookieTransforms;
    private static SecureConversationVersion DefaultVersion;
    private bool _useWindowsTokenService;
    private SecurityTokenCache _tokenCache;
    private TimeSpan _tokenLifetime;
    private ReadOnlyCollection`1<CookieTransform> _transforms;
    public string CookieElementName { get; }
    public string CookieNamespace { get; }
    public bool CanValidateToken { get; }
    public bool CanWriteToken { get; }
    public static SecureConversationVersion DefaultSecureConversationVersion { get; }
    public static TimeSpan DefaultTokenLifetime { get; }
    public static ReadOnlyCollection`1<CookieTransform> DefaultTransforms { get; }
    public bool UseWindowsTokenService { get; public set; }
    public TimeSpan TokenLifetime { get; public set; }
    public SecurityTokenCache TokenCache { get; public set; }
    public Type TokenType { get; }
    public ReadOnlyCollection`1<CookieTransform> Transforms { get; }
    public SessionSecurityTokenHandler(ReadOnlyCollection`1<CookieTransform> transforms);
    public SessionSecurityTokenHandler(ReadOnlyCollection`1<CookieTransform> transforms, SecurityTokenCache tokenCache, TimeSpan tokenLifetime);
    public SessionSecurityTokenHandler(XmlNodeList customConfigElements);
    private static SessionSecurityTokenHandler();
    public virtual string get_CookieElementName();
    public virtual string get_CookieNamespace();
    protected virtual Byte[] ApplyTransforms(Byte[] cookie, bool outbound);
    public virtual bool CanReadToken(XmlReader reader);
    public virtual bool get_CanValidateToken();
    public virtual bool get_CanWriteToken();
    public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor);
    public virtual SessionSecurityToken CreateSessionSecurityToken(IClaimsPrincipal principal, string context, string endpointId, DateTime validFrom, DateTime validTo);
    public static SecureConversationVersion get_DefaultSecureConversationVersion();
    public static TimeSpan get_DefaultTokenLifetime();
    public static ReadOnlyCollection`1<CookieTransform> get_DefaultTransforms();
    public virtual SecurityToken ReadToken(Byte[] token);
    public virtual SecurityToken ReadToken(Byte[] token, SecurityTokenResolver tokenResolver);
    public virtual SecurityToken ReadToken(XmlReader reader);
    public virtual SecurityToken ReadToken(XmlReader reader, SecurityTokenResolver tokenResolver);
    public bool get_UseWindowsTokenService();
    public void set_UseWindowsTokenService(bool value);
    public virtual TimeSpan get_TokenLifetime();
    public virtual void set_TokenLifetime(TimeSpan value);
    public virtual SessionSecurityTokenCookieSerializer CreateCookieSerializer();
    public SecurityTokenCache get_TokenCache();
    public void set_TokenCache(SecurityTokenCache value);
    public virtual String[] GetTokenTypeIdentifiers();
    public virtual Type get_TokenType();
    public ReadOnlyCollection`1<CookieTransform> get_Transforms();
    protected void SetTransforms(IEnumerable`1<CookieTransform> transforms);
    public virtual ClaimsIdentityCollection ValidateToken(SecurityToken token);
    public virtual ClaimsIdentityCollection ValidateToken(SessionSecurityToken token, string endpointId);
    protected virtual void ValidateSession(SessionSecurityToken securityToken);
    public virtual Byte[] WriteToken(SessionSecurityToken sessionToken);
    public virtual void WriteToken(XmlWriter writer, SecurityToken token);
}
public class Microsoft.IdentityModel.Tokens.SymmetricProofDescriptor : ProofDescriptor {
    private Byte[] _key;
    private int _keySizeInBits;
    private Byte[] _sourceEntropy;
    private Byte[] _targetEntropy;
    private SecurityKeyIdentifier _ski;
    private EncryptingCredentials _requestorWrappingCredentials;
    private EncryptingCredentials _targetWrappingCredentials;
    protected EncryptingCredentials RequestorEncryptingCredentials { get; }
    protected EncryptingCredentials TargetEncryptingCredentials { get; }
    public SecurityKeyIdentifier KeyIdentifier { get; }
    public SymmetricProofDescriptor(Byte[] key, EncryptingCredentials targetWrappingCredentials);
    public SymmetricProofDescriptor(EncryptingCredentials targetWrappingCredentials);
    public SymmetricProofDescriptor(int keySizeInBits, EncryptingCredentials targetWrappingCredentials);
    public SymmetricProofDescriptor(int keySizeInBits, EncryptingCredentials targetWrappingCredentials, EncryptingCredentials requestorWrappingCredentials);
    public SymmetricProofDescriptor(int keySizeInBits, EncryptingCredentials targetWrappingCredentials, EncryptingCredentials requestorWrappingCredentials, string encryptWith);
    public SymmetricProofDescriptor(int keySizeInBits, EncryptingCredentials targetWrappingCredentials, EncryptingCredentials requestorWrappingCredentials, Byte[] sourceEntropy);
    public SymmetricProofDescriptor(int keySizeInBits, EncryptingCredentials targetWrappingCredentials, EncryptingCredentials requestorWrappingCredentials, Byte[] sourceEntropy, string encryptWith);
    public Byte[] GetKeyBytes();
    protected EncryptingCredentials get_RequestorEncryptingCredentials();
    protected Byte[] GetSourceEntropy();
    protected Byte[] GetTargetEntropy();
    protected EncryptingCredentials get_TargetEncryptingCredentials();
    public virtual void ApplyTo(RequestSecurityTokenResponse response);
    public virtual SecurityKeyIdentifier get_KeyIdentifier();
}
public abstract class Microsoft.IdentityModel.Tokens.TokenReplayCache : object {
    public int Capacity { get; public set; }
    public TimeSpan PurgeInterval { get; public set; }
    public abstract virtual int get_Capacity();
    public abstract virtual void set_Capacity(int value);
    public abstract virtual void Clear();
    public abstract virtual int IncreaseCapacity(int size);
    public abstract virtual TimeSpan get_PurgeInterval();
    public abstract virtual void set_PurgeInterval(TimeSpan value);
    public abstract virtual bool TryAdd(string key, SecurityToken securityToken, DateTime expirationTime);
    public abstract virtual bool TryFind(string key);
    public abstract virtual bool TryGet(string key, SecurityToken& securityToken);
    public abstract virtual bool TryRemove(string key);
}
public class Microsoft.IdentityModel.Tokens.UnsupportedAlgorithmException : Exception {
    public UnsupportedAlgorithmException(string message);
    public UnsupportedAlgorithmException(string message, Exception exception);
    protected UnsupportedAlgorithmException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.UnsupportedAlgorithmFaultException : FaultException {
    public UnsupportedAlgorithmFaultException(FaultReason reason);
}
public class Microsoft.IdentityModel.Tokens.UnsupportedSecurityTokenException : Exception {
    public UnsupportedSecurityTokenException(string message);
    public UnsupportedSecurityTokenException(string message, Exception exception);
    protected UnsupportedSecurityTokenException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.IdentityModel.Tokens.UnsupportedSecurityTokenFaultException : FaultException {
    public UnsupportedSecurityTokenFaultException(FaultReason reason);
}
public abstract class Microsoft.IdentityModel.Tokens.UserNameSecurityTokenHandler : SecurityTokenHandler {
    private bool _retainPassword;
    public bool RetainPassword { get; public set; }
    public bool CanWriteToken { get; }
    public Type TokenType { get; }
    public virtual bool get_RetainPassword();
    public virtual void set_RetainPassword(bool value);
    public virtual bool CanReadToken(XmlReader reader);
    public virtual bool get_CanWriteToken();
    public virtual Type get_TokenType();
    public virtual String[] GetTokenTypeIdentifiers();
    public virtual SecurityToken ReadToken(XmlReader reader);
    public virtual void WriteToken(XmlWriter writer, SecurityToken token);
}
internal static class Microsoft.IdentityModel.Tokens.WindowsMappingOperations : object {
    public static string FindUpn(IClaimsIdentity claimsIdentity);
}
public class Microsoft.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler : UserNameSecurityTokenHandler {
    public bool CanValidateToken { get; }
    public virtual bool get_CanValidateToken();
    public virtual ClaimsIdentityCollection ValidateToken(SecurityToken token);
}
internal class Microsoft.IdentityModel.Tokens.WrappedRsaSecurityTokenAuthenticator : RsaSecurityTokenAuthenticator {
    private RsaSecurityTokenHandler _wrappedRsaSecurityTokenHandler;
    private SecurityTokenRequirement _securityTokenRequirement;
    private ClaimsAuthenticationManager _claimsAuthenticationManager;
    private ExceptionMapper _exceptionMapper;
    public WrappedRsaSecurityTokenAuthenticator(RsaSecurityTokenHandler wrappedRsaSecurityTokenHandler, SecurityTokenRequirement securityTokenRequirement, ClaimsAuthenticationManager claimsAuthenticationManager, ExceptionMapper exceptionMapper);
    protected virtual ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token);
}
internal class Microsoft.IdentityModel.Tokens.WrappedSaml11SecurityTokenAuthenticator : SamlSecurityTokenAuthenticator {
    private Saml11SecurityTokenHandler _wrappedSaml11SecurityTokenHandler;
    private SecurityTokenRequirement _securityTokenRequirement;
    private ClaimsAuthenticationManager _claimsAuthenticationManager;
    private ExceptionMapper _exceptionMapper;
    public WrappedSaml11SecurityTokenAuthenticator(Saml11SecurityTokenHandler saml11SecurityTokenHandler, SecurityTokenRequirement securityTokenRequirement, ClaimsAuthenticationManager claimsAuthenticationManager, ExceptionMapper exceptionMapper);
    protected virtual ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token);
}
internal class Microsoft.IdentityModel.Tokens.WrappedSaml2SecurityTokenAuthenticator : SecurityTokenAuthenticator {
    private Saml2SecurityTokenHandler _wrappedSaml2SecurityTokenHandler;
    private SecurityTokenRequirement _securityTokenRequirement;
    private ClaimsAuthenticationManager _claimsAuthenticationManager;
    private ExceptionMapper _exceptionMapper;
    public WrappedSaml2SecurityTokenAuthenticator(Saml2SecurityTokenHandler saml2SecurityTokenHandler, SecurityTokenRequirement securityTokenRequirement, ClaimsAuthenticationManager claimsAuthenticationManager, ExceptionMapper exceptionMapper);
    protected virtual bool CanValidateTokenCore(SecurityToken token);
    protected virtual ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token);
}
internal class Microsoft.IdentityModel.Tokens.WrappedSamlSecurityTokenAuthenticator : SecurityTokenAuthenticator {
    private WrappedSaml11SecurityTokenAuthenticator _wrappedSaml11SecurityTokenAuthenticator;
    private WrappedSaml2SecurityTokenAuthenticator _wrappedSaml2SecurityTokenAuthenticator;
    public WrappedSamlSecurityTokenAuthenticator(WrappedSaml11SecurityTokenAuthenticator wrappedSaml11SecurityTokenAuthenticator, WrappedSaml2SecurityTokenAuthenticator wrappedSaml2SecurityTokenAuthenticator);
    protected virtual bool CanValidateTokenCore(SecurityToken token);
    protected virtual ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token);
}
internal class Microsoft.IdentityModel.Tokens.WrappedSessionSecurityTokenAuthenticator : SecurityTokenAuthenticator {
    private SessionSecurityTokenHandler _sessionTokenHandler;
    private IIssuanceSecurityTokenAuthenticator _issuanceSecurityTokenAuthenticator;
    private ICommunicationObject _communicationObject;
    private SctClaimsHandler _sctClaimsHandler;
    private ExceptionMapper _exceptionMapper;
    public IssuedSecurityTokenHandler IssuedSecurityTokenHandler { get; public set; }
    public RenewedSecurityTokenHandler RenewedSecurityTokenHandler { get; public set; }
    public CommunicationState State { get; }
    public WrappedSessionSecurityTokenAuthenticator(SessionSecurityTokenHandler sessionTokenHandler, SecurityTokenAuthenticator wcfSessionAuthenticator, SctClaimsHandler sctClaimsHandler, ExceptionMapper exceptionMapper);
    protected virtual ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token);
    protected virtual bool CanValidateTokenCore(SecurityToken token);
    public sealed virtual IssuedSecurityTokenHandler get_IssuedSecurityTokenHandler();
    public sealed virtual void set_IssuedSecurityTokenHandler(IssuedSecurityTokenHandler value);
    public sealed virtual RenewedSecurityTokenHandler get_RenewedSecurityTokenHandler();
    public sealed virtual void set_RenewedSecurityTokenHandler(RenewedSecurityTokenHandler value);
    public sealed virtual void Abort();
    public sealed virtual IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginClose(AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginOpen(AsyncCallback callback, object state);
    public sealed virtual void Close(TimeSpan timeout);
    public sealed virtual void Close();
    public sealed virtual void add_Closed(EventHandler value);
    public sealed virtual void remove_Closed(EventHandler value);
    public sealed virtual void add_Closing(EventHandler value);
    public sealed virtual void remove_Closing(EventHandler value);
    public sealed virtual void EndClose(IAsyncResult result);
    public sealed virtual void EndOpen(IAsyncResult result);
    public sealed virtual void add_Faulted(EventHandler value);
    public sealed virtual void remove_Faulted(EventHandler value);
    public sealed virtual void Open(TimeSpan timeout);
    public sealed virtual void Open();
    public sealed virtual void add_Opened(EventHandler value);
    public sealed virtual void remove_Opened(EventHandler value);
    public sealed virtual void add_Opening(EventHandler value);
    public sealed virtual void remove_Opening(EventHandler value);
    public sealed virtual CommunicationState get_State();
}
internal class Microsoft.IdentityModel.Tokens.WrappedUserNameSecurityTokenAuthenticator : UserNameSecurityTokenAuthenticator {
    private UserNameSecurityTokenHandler _wrappedUserNameSecurityTokenHandler;
    private SecurityTokenRequirement _securityTokenRequirement;
    private ClaimsAuthenticationManager _claimsAuthenticationManager;
    private ExceptionMapper _exceptionMapper;
    public WrappedUserNameSecurityTokenAuthenticator(UserNameSecurityTokenHandler wrappedUserNameSecurityTokenHandler, SecurityTokenRequirement securityTokenRequirement, ClaimsAuthenticationManager claimsAuthenticationManager, ExceptionMapper exceptionMapper);
    protected virtual ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token);
    protected virtual ReadOnlyCollection`1<IAuthorizationPolicy> ValidateUserNamePasswordCore(string userName, string password);
}
internal class Microsoft.IdentityModel.Tokens.WrappedX509SecurityTokenAuthenticator : X509SecurityTokenAuthenticator {
    private X509SecurityTokenHandler _wrappedX509SecurityTokenHandler;
    private SecurityTokenRequirement _securityTokenRequirement;
    private ClaimsAuthenticationManager _claimsAuthenticationManager;
    private ExceptionMapper _exceptionMapper;
    public WrappedX509SecurityTokenAuthenticator(X509SecurityTokenHandler wrappedX509SecurityTokenHandler, SecurityTokenRequirement securityTokenRequirement, ClaimsAuthenticationManager claimsAuthenticationManager, ExceptionMapper exceptionMapper);
    protected virtual ReadOnlyCollection`1<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token);
    private static bool GetMapToWindowsSetting(X509SecurityTokenHandler securityTokenHandler);
}
public class Microsoft.IdentityModel.Tokens.X509CertificateStoreTokenResolver : SecurityTokenResolver {
    private string _storeName;
    private StoreLocation _storeLocation;
    public string StoreName { get; }
    public StoreLocation StoreLocation { get; }
    public X509CertificateStoreTokenResolver(StoreName storeName, StoreLocation storeLocation);
    public X509CertificateStoreTokenResolver(string storeName, StoreLocation storeLocation);
    public string get_StoreName();
    public StoreLocation get_StoreLocation();
    protected virtual bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityKey& key);
    protected virtual bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, SecurityToken& token);
    protected virtual bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityToken& token);
}
public class Microsoft.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer : SecurityKeyIdentifierClauseSerializer {
    public virtual bool CanReadKeyIdentifierClause(XmlReader reader);
    public virtual bool CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause securityKeyIdentifierClause);
    public virtual SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader);
    public virtual void WriteKeyIdentifierClause(XmlWriter writer, SecurityKeyIdentifierClause securityKeyIdentifierClause);
}
public class Microsoft.IdentityModel.Tokens.X509NTAuthChainTrustValidator : X509CertificateValidator {
    private bool _useMachineContext;
    private X509ChainPolicy _chainPolicy;
    private UInt32 _chainPolicyOID;
    public X509NTAuthChainTrustValidator(bool useMachineContext, X509ChainPolicy chainPolicy);
    public virtual void Validate(X509Certificate2 certificate);
    private static string GetChainStatusInformation(X509ChainStatus[] chainStatus);
}
public class Microsoft.IdentityModel.Tokens.X509SecurityTokenHandler : SecurityTokenHandler {
    private static X509RevocationMode DefaultRevocationMode;
    private static X509CertificateValidationMode DefaultValidationMode;
    private static StoreLocation DefaultStoreLocation;
    private bool _mapToWindows;
    private bool _useWindowsTokenService;
    private X509CertificateValidator _certificateValidator;
    private bool _writeXmlDSigDefinedClauseTypes;
    private X509DataSecurityKeyIdentifierClauseSerializer _x509DataKeyIdentifierClauseSerializer;
    public bool MapToWindows { get; public set; }
    public bool UseWindowsTokenService { get; public set; }
    public X509CertificateValidator CertificateValidator { get; public set; }
    public bool WriteXmlDSigDefinedClauseTypes { get; public set; }
    public bool CanValidateToken { get; }
    public bool CanWriteToken { get; }
    public Type TokenType { get; }
    public X509SecurityTokenHandler(X509CertificateValidator certificateValidator);
    public X509SecurityTokenHandler(bool mapToWindows);
    public X509SecurityTokenHandler(bool mapToWindows, X509CertificateValidator certificateValidator);
    public X509SecurityTokenHandler(XmlNodeList customConfigElements);
    private static X509SecurityTokenHandler();
    public bool get_MapToWindows();
    public void set_MapToWindows(bool value);
    public bool get_UseWindowsTokenService();
    public void set_UseWindowsTokenService(bool value);
    public X509CertificateValidator get_CertificateValidator();
    public void set_CertificateValidator(X509CertificateValidator value);
    public bool get_WriteXmlDSigDefinedClauseTypes();
    public void set_WriteXmlDSigDefinedClauseTypes(bool value);
    public virtual bool CanReadKeyIdentifierClause(XmlReader reader);
    public virtual bool CanReadToken(XmlReader reader);
    public virtual bool get_CanValidateToken();
    public virtual bool CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause securityKeyIdentifierClause);
    public virtual bool get_CanWriteToken();
    public virtual SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader);
    public virtual SecurityToken ReadToken(XmlReader reader);
    public virtual Type get_TokenType();
    public virtual String[] GetTokenTypeIdentifiers();
    public virtual ClaimsIdentityCollection ValidateToken(SecurityToken token);
    internal static WindowsIdentity KerberosCertificateLogon(X509Certificate2 certificate);
    public virtual void WriteKeyIdentifierClause(XmlWriter writer, SecurityKeyIdentifierClause securityKeyIdentifierClause);
    public virtual void WriteToken(XmlWriter writer, SecurityToken token);
}
internal enum Microsoft.IdentityModel.TokenType : Enum {
    public int value__;
    public static TokenType TokenPrimary;
    public static TokenType TokenImpersonation;
}
internal class Microsoft.IdentityModel.UNICODE_INTPTR_STRING : ValueType {
    internal ushort Length;
    internal ushort MaxLength;
    internal IntPtr Buffer;
    internal UNICODE_INTPTR_STRING(int length, int maximumLength, IntPtr buffer);
}
public static class Microsoft.IdentityModel.UniqueId : object {
    private static int RandomSaltSize;
    private static string NcNamePrefix;
    private static string UuidUriPrefix;
    private static string _reusableUuid;
    private static string _optimizedNcNamePrefix;
    private static UniqueId();
    public static string CreateUniqueId();
    public static string CreateUniqueId(string prefix);
    public static string CreateRandomId();
    public static string CreateRandomId(string prefix);
    public static string CreateRandomUri();
    private static string GetNextId();
    private static string GetRandomUuid();
}
internal static class Microsoft.IdentityModel.UriUtil : object {
    public static bool CanCreateValidUri(string uriString, UriKind uriKind);
    public static bool TryCreateValidUri(string uriString, UriKind uriKind, Uri& result);
}
public class Microsoft.IdentityModel.Web.AuthorizationFailedEventArgs : EventArgs {
    private bool _redirectToIdentityProvider;
    public bool RedirectToIdentityProvider { get; public set; }
    public bool get_RedirectToIdentityProvider();
    public void set_RedirectToIdentityProvider(bool value);
}
public class Microsoft.IdentityModel.Web.ChunkedCookieHandler : CookieHandler {
    public static int DefaultChunkSize;
    public static int MinimumChunkSize;
    private int _chunkSize;
    public int ChunkSize { get; }
    public ChunkedCookieHandler(int chunkSize);
    public int get_ChunkSize();
    protected virtual void DeleteCore(string name, string path, string domain, HttpContext context);
    internal void DeleteInternal(string name, string path, string domain, HttpCookieCollection requestCookies, HttpCookieCollection responseCookies);
    private IEnumerable`1<KeyValuePair`2<string, string>> GetCookieChunks(string baseName, string cookieValue);
    private IEnumerable`1<HttpCookie> GetCookieChunks(string baseName, HttpCookieCollection cookies);
    protected virtual Byte[] ReadCore(string name, HttpContext context);
    internal Byte[] ReadInternal(string name, HttpCookieCollection requestCookies);
    protected virtual void WriteCore(Byte[] value, string name, string path, string domain, DateTime expirationTime, bool secure, bool httpOnly, HttpContext context);
    internal void WriteInternal(Byte[] value, string name, string path, string domain, DateTime expirationTime, bool secure, bool httpOnly, HttpCookieCollection requestCookies, HttpCookieCollection responseCookies);
    private static string GetChunkName(string baseName, int chunkIndex);
}
public class Microsoft.IdentityModel.Web.ClaimsAuthorizationModule : object {
    private ClaimsAuthorizationManager _authorizationManager;
    public ClaimsAuthorizationManager ClaimsAuthorizationManager { get; public set; }
    protected virtual bool Authorize();
    public ClaimsAuthorizationManager get_ClaimsAuthorizationManager();
    public void set_ClaimsAuthorizationManager(ClaimsAuthorizationManager value);
    protected virtual void OnAuthorizeRequest(object sender, EventArgs args);
    public sealed virtual void Dispose();
    public sealed virtual void Init(HttpApplication context);
}
public class Microsoft.IdentityModel.Web.ClaimsPrincipalHttpModule : object {
    private bool _clientCertificateAuthenticationEnabled;
    private ClaimsAuthenticationManager _authenticationManager;
    public bool ClientCertificateAuthenticationEnabled { get; public set; }
    public ClaimsAuthenticationManager AuthenticationManager { get; public set; }
    public bool get_ClientCertificateAuthenticationEnabled();
    public void set_ClientCertificateAuthenticationEnabled(bool value);
    public ClaimsAuthenticationManager get_AuthenticationManager();
    public void set_AuthenticationManager(ClaimsAuthenticationManager value);
    protected virtual void OnPostAuthenticateRequest(object sender, EventArgs e);
    public sealed virtual void Dispose();
    public sealed virtual void Init(HttpApplication context);
}
public class Microsoft.IdentityModel.Web.Configuration.ChunkedCookieHandlerElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("chunkSize")]
public int ChunkSize { get; public set; }
    public bool IsConfigured { get; }
    public int get_ChunkSize();
    public void set_ChunkSize(int value);
    public bool get_IsConfigured();
}
internal static class Microsoft.IdentityModel.Web.Configuration.ConfigurationStrings : object {
    public static string ChunkedCookieHandler;
    public static string ChunkSize;
    public static string CookieHandler;
    public static string CustomCookieHandler;
    public static string DefaultUrl;
    public static string Domain;
    public static string Enabled;
    public static string HideFromScript;
    public static string LoginUrl;
    public static string Mode;
    public static string Name;
    public static string PassiveRedirectEnabled;
    public static string Path;
    public static string PersistentCookiesOnPassiveRedirects;
    public static string PersistentSessionLifetime;
    public static string RequireHttps;
    public static string RequireSsl;
    public static string SignInMode;
}
public class Microsoft.IdentityModel.Web.Configuration.CookieHandlerElement : ConfigurationElement {
    private static bool DefaultHideFromScript;
    private static bool DefaultRequireSsl;
    private static string MaxPersistentSessionLifetimeString;
    private static string TimeSpanZeroString;
    [ConfigurationPropertyAttribute("mode")]
public CookieHandlerMode Mode { get; public set; }
    [ConfigurationPropertyAttribute("chunkedCookieHandler")]
public ChunkedCookieHandlerElement ChunkedCookieHandler { get; public set; }
    [ConfigurationPropertyAttribute("customCookieHandler")]
public CustomTypeElement CustomCookieHandler { get; public set; }
    [ConfigurationPropertyAttribute("domain")]
public string Domain { get; public set; }
    [ConfigurationPropertyAttribute("hideFromScript")]
public bool HideFromScript { get; public set; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("path")]
public string Path { get; public set; }
    [ConfigurationPropertyAttribute("persistentSessionLifetime")]
[TimeSpanValidatorAttribute]
public TimeSpan PersistentSessionLifetime { get; public set; }
    [ConfigurationPropertyAttribute("requireSsl")]
public bool RequireSsl { get; public set; }
    public bool IsConfigured { get; }
    internal CookieHandler GetConfiguredCookieHandler();
    private void ApplyChunked(CookieHandler& handler);
    private void ApplyCustom(CookieHandler& handler);
    public CookieHandlerMode get_Mode();
    public void set_Mode(CookieHandlerMode value);
    public ChunkedCookieHandlerElement get_ChunkedCookieHandler();
    public void set_ChunkedCookieHandler(ChunkedCookieHandlerElement value);
    public CustomTypeElement get_CustomCookieHandler();
    public void set_CustomCookieHandler(CustomTypeElement value);
    public string get_Domain();
    public void set_Domain(string value);
    public bool get_HideFromScript();
    public void set_HideFromScript(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Path();
    public void set_Path(string value);
    public TimeSpan get_PersistentSessionLifetime();
    public void set_PersistentSessionLifetime(TimeSpan value);
    public bool get_RequireSsl();
    public void set_RequireSsl(bool value);
    public bool get_IsConfigured();
}
public enum Microsoft.IdentityModel.Web.Configuration.CookieHandlerMode : Enum {
    public int value__;
    public static CookieHandlerMode Default;
    public static CookieHandlerMode Chunked;
    public static CookieHandlerMode Custom;
}
public class Microsoft.IdentityModel.Web.Configuration.FederatedAuthenticationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("wsFederation")]
public WSFederationAuthenticationElement WSFederation { get; public set; }
    [ConfigurationPropertyAttribute("cookieHandler")]
public CookieHandlerElement CookieHandler { get; public set; }
    public bool IsConfigured { get; }
    public WSFederationAuthenticationElement get_WSFederation();
    public void set_WSFederation(WSFederationAuthenticationElement value);
    public CookieHandlerElement get_CookieHandler();
    public void set_CookieHandler(CookieHandlerElement value);
    public bool get_IsConfigured();
}
public class Microsoft.IdentityModel.Web.Configuration.ServiceConfigurationCreatedEventArgs : EventArgs {
    private ServiceConfiguration _serviceConfiguration;
    public ServiceConfiguration ServiceConfiguration { get; public set; }
    public ServiceConfigurationCreatedEventArgs(ServiceConfiguration config);
    public ServiceConfiguration get_ServiceConfiguration();
    public void set_ServiceConfiguration(ServiceConfiguration value);
}
public class Microsoft.IdentityModel.Web.Configuration.WSFederationAuthenticationElement : ConfigurationElement {
    private static bool DefaultPassiveRedirectEnabled;
    private static bool DefaultPersistentCookiesOnPassiveRedirects;
    private static bool DefaultRequireHttps;
    [ConfigurationPropertyAttribute("authenticationType")]
public string AuthenticationType { get; }
    [ConfigurationPropertyAttribute("freshness")]
public string Freshness { get; }
    [ConfigurationPropertyAttribute("homeRealm")]
public string HomeRealm { get; }
    [ConfigurationPropertyAttribute("issuer")]
public string Issuer { get; }
    [ConfigurationPropertyAttribute("policy")]
public string Policy { get; }
    [ConfigurationPropertyAttribute("realm")]
public string Realm { get; }
    [ConfigurationPropertyAttribute("reply")]
public string Reply { get; }
    [ConfigurationPropertyAttribute("request")]
public string Request { get; }
    [ConfigurationPropertyAttribute("requestPtr")]
public string RequestPtr { get; }
    [ConfigurationPropertyAttribute("resource")]
public string Resource { get; }
    [ConfigurationPropertyAttribute("signInQueryString")]
public string SignInQueryString { get; }
    [ConfigurationPropertyAttribute("signOutQueryString")]
public string SignOutQueryString { get; }
    [ConfigurationPropertyAttribute("signOutReply")]
public string SignOutReply { get; }
    [ConfigurationPropertyAttribute("passiveRedirectEnabled")]
public bool PassiveRedirectEnabled { get; }
    [ConfigurationPropertyAttribute("persistentCookiesOnPassiveRedirects")]
public bool PersistentCookiesOnPassiveRedirects { get; }
    [ConfigurationPropertyAttribute("requireHttps")]
public bool RequireHttps { get; }
    public bool IsConfigured { get; }
    internal void Verify();
    public string get_AuthenticationType();
    public string get_Freshness();
    public string get_HomeRealm();
    public string get_Issuer();
    public string get_Policy();
    public string get_Realm();
    public string get_Reply();
    public string get_Request();
    public string get_RequestPtr();
    public string get_Resource();
    public string get_SignInQueryString();
    public string get_SignOutQueryString();
    public string get_SignOutReply();
    public bool get_PassiveRedirectEnabled();
    public bool get_PersistentCookiesOnPassiveRedirects();
    public bool get_RequireHttps();
    public bool get_IsConfigured();
}
internal static class Microsoft.IdentityModel.Web.Controls.ControlUtil : object {
    public static string ReturnUrl;
    public static bool IsHttps(Uri url);
    public static bool IsHttps(string urlPath);
    public static void EnsureSessionAuthenticationModule();
    public static bool OnLoginPage(HttpContext context);
    public static string GetPathAndQuery(WSFederationMessage request);
    public static string GetCompleteLoginUrl(string loginUrl);
    public static string EnsureEndWithSemiColon(string value);
    public static bool IsAppRelative(string path);
    public static bool IsAppRelative(Uri basePath, string path);
    public static bool IsDangerousUrl(string s);
    public static void CopyBaseAttributesToInnerControl(WebControl control, WebControl child);
    public static void SetTableCellStyle(Control control, Style style);
    public static void SetTableCellVisible(Control control, bool visible);
    public static void CopyBorderStyles(WebControl control, Style style);
    public static void CopyStyleToInnerControl(WebControl control, Style style);
    public static Table CreateChildTable(bool convertingToTemplate);
    public static bool EnsureCrossAppRedirect(string toUri, HttpContext context, bool throwIfFail);
    internal static bool IsPathOnSameServer(string absUriOrLocalPath, Uri currentRequestUri);
    public static string GetLoginPage(HttpContext context, string extraQueryString, bool reuseReturnUrl);
    public static string RemoveQueryStringVariableFromUrl(string strUrl, string QSVar);
    internal static string GetReturnUrl(HttpContext context, bool useDefaultIfAbsent);
    public static void RemoveQSVar(String& strUrl, int posQ, string token, string sep, int lenAtStartToLeave);
    public static DialogResult MessageBoxError(string text, string caption);
    internal static void EnsureAutoSignInNotSetOnMultipleControls(Page page);
}
public class Microsoft.IdentityModel.Web.Controls.ErrorEventArgs : CancelEventArgs {
    private Exception _exception;
    public Exception Exception { get; }
    public ErrorEventArgs(Exception exception);
    public ErrorEventArgs(bool cancel, Exception exception);
    public Exception get_Exception();
}
internal class Microsoft.IdentityModel.Web.Controls.ErrorTableItemStyle : TableItemStyle {
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
[BindableAttribute("False")]
[DesignerAttribute("Microsoft.IdentityModel.Web.Controls.FederatedPassiveSignInDesigner")]
[DefaultEventAttribute("SignedIn")]
public class Microsoft.IdentityModel.Web.Controls.FederatedPassiveSignIn : SignInControl {
    private string _responseReturnUrl;
    private WSFederationAuthenticationModule _activeModule;
    private XmlDictionaryReaderQuotas _xmlDictionaryReaderQuotas;
    private bool _initialized;
    [WebCategoryAttribute("Category_FederatedPassive")]
[UrlPropertyAttribute]
[DefaultValueAttribute("")]
[WebDescriptionAttribute("FederatedPassiveSignIn_HomeRealm")]
public string HomeRealm { get; public set; }
    [WebDescriptionAttribute("FederatedPassiveSignIn_Issuer")]
[DefaultValueAttribute("")]
[WebCategoryAttribute("Category_FederatedPassive")]
[UrlPropertyAttribute]
public string Issuer { get; public set; }
    [DefaultValueAttribute("")]
[WebDescriptionAttribute("FederatedPassiveSignIn_Realm")]
[WebCategoryAttribute("Category_FederatedPassive")]
public string Realm { get; public set; }
    [WebDescriptionAttribute("FederatedPassiveSignIn_Reply")]
[DefaultValueAttribute("")]
[WebCategoryAttribute("Category_FederatedPassive")]
public string Reply { get; public set; }
    [WebCategoryAttribute("Category_FederatedPassive")]
[DefaultValueAttribute("")]
[WebDescriptionAttribute("FederatedPassiveSignIn_Resource")]
public string Resource { get; public set; }
    [DefaultValueAttribute("")]
[WebCategoryAttribute("Category_FederatedPassive")]
[WebDescriptionAttribute("FederatedPassiveSignIn_Request")]
public string Request { get; public set; }
    [WebDescriptionAttribute("FederatedPassiveSignIn_RequestPtr")]
[DefaultValueAttribute("")]
[WebCategoryAttribute("Category_FederatedPassive")]
public string RequestPtr { get; public set; }
    [WebDescriptionAttribute("FederatedPassiveSignIn_Freshness")]
[DefaultValueAttribute("")]
[WebCategoryAttribute("Category_FederatedPassive")]
public string Freshness { get; public set; }
    [DefaultValueAttribute("")]
[WebDescriptionAttribute("FederatedPassiveSignIn_AuthenticationType")]
[WebCategoryAttribute("Category_FederatedPassive")]
public string AuthenticationType { get; public set; }
    [WebDescriptionAttribute("FederatedPassiveSignIn_Policy")]
[DefaultValueAttribute("")]
[WebCategoryAttribute("Category_FederatedPassive")]
public string Policy { get; public set; }
    [DefaultValueAttribute("")]
[WebDescriptionAttribute("FederatedPassiveSignIn_SignInQueryString")]
[WebCategoryAttribute("Category_FederatedPassive")]
public string SignInQueryString { get; public set; }
    [WebCategoryAttribute("Category_FederatedPassive")]
[WebDescriptionAttribute("FederatedPassiveSignIn_UseFederationPropertiesFromConfiguration")]
[DefaultValueAttribute("False")]
[ThemeableAttribute("False")]
public bool UseFederationPropertiesFromConfiguration { get; public set; }
    public string get_HomeRealm();
    public void set_HomeRealm(string value);
    public string get_Issuer();
    public void set_Issuer(string value);
    public string get_Realm();
    public void set_Realm(string value);
    public string get_Reply();
    public void set_Reply(string value);
    public string get_Resource();
    public void set_Resource(string value);
    public string get_Request();
    public void set_Request(string value);
    public string get_RequestPtr();
    public void set_RequestPtr(string value);
    public string get_Freshness();
    public void set_Freshness(string value);
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    public string get_Policy();
    public void set_Policy(string value);
    public string get_SignInQueryString();
    public void set_SignInQueryString(string value);
    public bool get_UseFederationPropertiesFromConfiguration();
    public void set_UseFederationPropertiesFromConfiguration(bool value);
    protected virtual string GetSessionTokenContext();
    protected virtual void OnLoad(EventArgs e);
    private void RedirectingToIdentityProviderHandler(object sender, RedirectingToIdentityProviderEventArgs e);
    internal void CreateWSFederationAuthenticationModule();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual bool SignIn();
    internal bool SignInWithResponseMessage(SignInResponseMessage message);
    private void FederatedPassiveSignIn_Init(object sender, EventArgs e);
    private void OnClick(object sender, EventArgs e);
    private void RedirectToIdentityProvider();
    protected virtual string GetReturnUrl();
    private WSFederationAuthenticationElement GetFAMConfiguration();
    private string GetParameterValue(string parameterName);
    private void ShowFamConfigMessage(string propertyName);
}
internal class Microsoft.IdentityModel.Web.Controls.FederatedPassiveSignInDesigner : CompositeControlDesigner {
    private static string _wifSDKRegistryPath;
    private static string _wifSDKRegistryKey;
    private static string _fedUtilExe;
    private static string _fedUtilArgs;
    private bool _fedUtilInstalled;
    private DesignerActionListCollection _actionLists;
    public DesignerActionListCollection ActionLists { get; }
    public virtual void Initialize(IComponent component);
    public virtual DesignerActionListCollection get_ActionLists();
    private bool IsFedUtilInstalled();
}
[BindableAttribute("False")]
[DefaultEventAttribute("SigningOut")]
[DesignerAttribute("Microsoft.IdentityModel.Web.Controls.SignInStatusDesigner")]
public class Microsoft.IdentityModel.Web.Controls.FederatedPassiveSignInStatus : CompositeControl {
    private static object EventSigningOut;
    private static object EventSignedOut;
    private static object EventSignOutError;
    private LinkButton _signInLinkButton;
    private ImageButton _signInImageButton;
    private Button _signInPushButton;
    private LinkButton _signOutLinkButton;
    private ImageButton _signOutImageButton;
    private Button _signOutPushButton;
    private bool _loggedIn;
    private ServiceConfiguration _serviceConfiguration;
    [WebCategoryAttribute("Category_Appearance")]
[WebDescriptionAttribute("SignInStatus_SignInButtonType")]
[DefaultValueAttribute]
public ButtonType SignInButtonType { get; public set; }
    [DefaultValueAttribute("")]
[WebDescriptionAttribute("SignInStatus_SignInImageUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Category_Appearance")]
public string SignInImageUrl { get; public set; }
    [LocalizableAttribute("True")]
[WebDescriptionAttribute("SignInStatus_SignInText")]
[WebCategoryAttribute("Category_Appearance")]
[WebDefaultValueAttribute("SignInStatus_DefaultSignInText")]
public string SignInText { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[WebDescriptionAttribute("SignInStatus_SignOutAction")]
[WebCategoryAttribute("Category_Behavior")]
[ThemeableAttribute("False")]
public SignOutAction SignOutAction { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[WebCategoryAttribute("Category_Appearance")]
[WebDescriptionAttribute("SignInStatus_SignOutImageUrl")]
public string SignOutImageUrl { get; public set; }
    [UrlPropertyAttribute]
[WebCategoryAttribute("Category_Behavior")]
[DefaultValueAttribute("")]
[WebDescriptionAttribute("SignInStatus_SignOutPageUrl")]
[EditorAttribute("System.Web.UI.Design.UrlEditor", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
public string SignOutPageUrl { get; public set; }
    [WebDescriptionAttribute("SignInStatus_SignOutText")]
[WebCategoryAttribute("Category_Appearance")]
[LocalizableAttribute("True")]
[WebDefaultValueAttribute("SignInStatus_DefaultSignOutText")]
public string SignOutText { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ServiceConfiguration ServiceConfiguration { get; public set; }
    private static FederatedPassiveSignInStatus();
    public void add_SignedOut(EventHandler value);
    public void remove_SignedOut(EventHandler value);
    public void add_SigningOut(EventHandler`1<CancelEventArgs> value);
    public void remove_SigningOut(EventHandler`1<CancelEventArgs> value);
    public void add_SignOutError(EventHandler`1<ErrorEventArgs> value);
    public void remove_SignOutError(EventHandler`1<ErrorEventArgs> value);
    public virtual ButtonType get_SignInButtonType();
    public virtual void set_SignInButtonType(ButtonType value);
    public virtual string get_SignInImageUrl();
    public virtual void set_SignInImageUrl(string value);
    public virtual string get_SignInText();
    public virtual void set_SignInText(string value);
    public virtual SignOutAction get_SignOutAction();
    public virtual void set_SignOutAction(SignOutAction value);
    public virtual string get_SignOutImageUrl();
    public virtual void set_SignOutImageUrl(string value);
    public virtual string get_SignOutPageUrl();
    public virtual void set_SignOutPageUrl(string value);
    public virtual string get_SignOutText();
    public virtual void set_SignOutText(string value);
    public ServiceConfiguration get_ServiceConfiguration();
    public void set_ServiceConfiguration(ServiceConfiguration value);
    protected virtual void OnInit(EventArgs e);
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    protected virtual void RenderContents(HtmlTextWriter writer);
    private void SetChildProperties();
    private string ResolveSignOutPageUrl(string urlValue);
    private void SignOutClicked(object sender, CommandEventArgs e);
    private void SignOut();
    internal static string GetSignOutUrl(SignOutAction signOutAction, string signOutPageUrl);
    internal static string GetSignOutUrl(HttpRequest request, SignOutAction signOutAction, string signOutPageUrl);
    private void SignInClicked(object Source, CommandEventArgs e);
    protected virtual void OnSigningOut(CancelEventArgs e);
    protected virtual void OnSignedOut(EventArgs e);
    protected virtual void OnSignOutError(ErrorEventArgs e);
    protected virtual void SetDesignModeState(IDictionary data);
}
public abstract class Microsoft.IdentityModel.Web.Controls.SignInControl : CompositeControl {
    private static string ErrorParameterName;
    private static int ViewStateArrayLength;
    private static object EventRedirectingToIdentityProvider;
    private static object EventSecurityTokenReceived;
    private static object EventSecurityTokenValidated;
    private static object EventSessionSecurityTokenCreated;
    private static object EventSignedIn;
    private static object EventSignInError;
    private TableItemStyle _errorTextStyle;
    private TableItemStyle _titleTextStyle;
    private TableItemStyle _checkBoxStyle;
    private Style _signInButtonStyle;
    private SignInContainer _templateContainer;
    private bool _convertingToTemplate;
    private bool _renderDesignerRegion;
    private IButtonControl _signInButton;
    private ServiceConfiguration _serviceConfiguration;
    private EventHandler Click;
    protected IButtonControl SignInButton { get; protected set; }
    [WebCategoryAttribute("Category_Behavior")]
[ThemeableAttribute("False")]
[WebDescriptionAttribute("SignIn_AutoSignIn")]
[DefaultValueAttribute("False")]
public bool AutoSignIn { get; public set; }
    [WebCategoryAttribute("Category_Appearance")]
[WebDescriptionAttribute("SignIn_BorderPadding")]
[DefaultValueAttribute("1")]
public int BorderPadding { get; public set; }
    [UrlPropertyAttribute]
[DefaultValueAttribute("")]
[WebDescriptionAttribute("SignIn_DestinationPageUrl")]
[WebCategoryAttribute("Category_Behavior")]
[EditorAttribute("System.Web.UI.Design.UrlEditor", "System.Drawing.Design.UITypeEditor")]
[ThemeableAttribute("False")]
public string DestinationPageUrl { get; public set; }
    [WebDescriptionAttribute("SignIn_Orientation")]
[WebCategoryAttribute("Category_Layout")]
[DefaultValueAttribute]
public Orientation Orientation { get; public set; }
    [DefaultValueAttribute]
[WebDescriptionAttribute("SignIn_ErrorAction")]
[WebCategoryAttribute("Category_Behavior")]
[ThemeableAttribute("False")]
public LoginFailureAction ErrorAction { get; public set; }
    [WebDescriptionAttribute("SignIn_ErrorText")]
[WebCategoryAttribute("Category_Appearance")]
[WebDefaultValueAttribute("SignIn_DefaultErrorText")]
[LocalizableAttribute("True")]
public string ErrorText { get; public set; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute]
[WebDescriptionAttribute("SignIn_ErrorTextStyle")]
[WebCategoryAttribute("Category_Styles")]
public TableItemStyle ErrorTextStyle { get; }
    [WebDescriptionAttribute("SignIn_SignInButtonStyle")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute]
[WebCategoryAttribute("Category_Styles")]
[DefaultValueAttribute("")]
public Style SignInButtonStyle { get; }
    [WebCategoryAttribute("Category_Appearance")]
[WebDescriptionAttribute("SignIn_SignInImageUrl")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor", "System.Drawing.Design.UITypeEditor")]
[UrlPropertyAttribute]
[DefaultValueAttribute("")]
public string SignInImageUrl { get; public set; }
    [WebDefaultValueAttribute("SignIn_DefaultSignInText")]
[LocalizableAttribute("True")]
[WebDescriptionAttribute("SignIn_SignInText")]
[WebCategoryAttribute("Category_Appearance")]
public string SignInText { get; public set; }
    [WebCategoryAttribute("Category_Appearance")]
[WebDescriptionAttribute("SignIn_SignInButtonType")]
[DefaultValueAttribute]
public ButtonType SignInButtonType { get; public set; }
    [WebCategoryAttribute("Category_Appearance")]
[DefaultValueAttribute("True")]
[WebDescriptionAttribute("SignIn_ShowButtonImage")]
public bool ShowButtonImage { get; public set; }
    [WebCategoryAttribute("Category_Behavior")]
[WebDescriptionAttribute("SignIn_SignInContext")]
[DefaultValueAttribute("")]
public string SignInContext { get; public set; }
    [WebDescriptionAttribute("SignIn_TitleText")]
[WebCategoryAttribute("Category_Appearance")]
[LocalizableAttribute("True")]
[WebDefaultValueAttribute("SignIn_DefaultTitleText")]
public string TitleText { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[WebCategoryAttribute("Category_Styles")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute]
[WebDescriptionAttribute("SignIn_TitleTextStyle")]
[DefaultValueAttribute("")]
public TableItemStyle TitleTextStyle { get; }
    [ThemeableAttribute("False")]
[DefaultValueAttribute("True")]
[WebDescriptionAttribute("SignIn_DisplayRememberMe")]
[WebCategoryAttribute("Category_Behavior")]
public bool DisplayRememberMe { get; public set; }
    [WebDescriptionAttribute("SignIn_RememberMeSet")]
[DefaultValueAttribute("False")]
[WebCategoryAttribute("Category_Behavior")]
[ThemeableAttribute("False")]
public bool RememberMeSet { get; public set; }
    [WebCategoryAttribute("Category_Appearance")]
[WebDefaultValueAttribute("SignIn_DefaultRememberMeText")]
[WebDescriptionAttribute("SignIn_RememberMeText")]
[LocalizableAttribute("True")]
public string RememberMeText { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[NotifyParentPropertyAttribute("True")]
[PersistenceModeAttribute]
[WebDescriptionAttribute("SignIn_CheckBoxStyle")]
[WebCategoryAttribute("Category_Styles")]
public TableItemStyle CheckBoxStyle { get; }
    [WebCategoryAttribute("Category_Behavior")]
[ThemeableAttribute("False")]
[WebDescriptionAttribute("SignIn_VisibleWhenSignedIn")]
[DefaultValueAttribute("True")]
public bool VisibleWhenSignedIn { get; public set; }
    [WebDescriptionAttribute("SignIn_RequireHttps")]
[DefaultValueAttribute("True")]
[WebCategoryAttribute("Category_Behavior")]
public bool RequireHttps { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ThemeableAttribute("False")]
[WebDescriptionAttribute("SignIn_SignInMode")]
[WebCategoryAttribute("Category_Behavior")]
public SignInMode SignInMode { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ServiceConfiguration ServiceConfiguration { get; public set; }
    protected string ButtonClientId { get; }
    protected string RememberMeClientId { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
private SignInContainer TemplateContainer { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ClientSideSignInFunction { get; }
    private bool ConvertingToTemplate { get; }
    protected WebControl ActiveButton { get; }
    protected bool IsPersistentCookie { get; }
    private static SignInControl();
    protected IButtonControl get_SignInButton();
    protected void set_SignInButton(IButtonControl value);
    public void add_RedirectingToIdentityProvider(EventHandler`1<RedirectingToIdentityProviderEventArgs> value);
    public void remove_RedirectingToIdentityProvider(EventHandler`1<RedirectingToIdentityProviderEventArgs> value);
    public void add_SecurityTokenReceived(EventHandler`1<SecurityTokenReceivedEventArgs> value);
    public void remove_SecurityTokenReceived(EventHandler`1<SecurityTokenReceivedEventArgs> value);
    public void add_SecurityTokenValidated(EventHandler`1<SecurityTokenValidatedEventArgs> value);
    public void remove_SecurityTokenValidated(EventHandler`1<SecurityTokenValidatedEventArgs> value);
    public void add_SessionSecurityTokenCreated(EventHandler`1<SessionSecurityTokenCreatedEventArgs> value);
    public void remove_SessionSecurityTokenCreated(EventHandler`1<SessionSecurityTokenCreatedEventArgs> value);
    public void add_SignedIn(EventHandler value);
    public void remove_SignedIn(EventHandler value);
    public void add_SignInError(EventHandler`1<ErrorEventArgs> value);
    public void remove_SignInError(EventHandler`1<ErrorEventArgs> value);
    public virtual bool get_AutoSignIn();
    public virtual void set_AutoSignIn(bool value);
    public virtual int get_BorderPadding();
    public virtual void set_BorderPadding(int value);
    public virtual string get_DestinationPageUrl();
    public virtual void set_DestinationPageUrl(string value);
    public virtual Orientation get_Orientation();
    public virtual void set_Orientation(Orientation value);
    public virtual LoginFailureAction get_ErrorAction();
    public virtual void set_ErrorAction(LoginFailureAction value);
    public virtual string get_ErrorText();
    public virtual void set_ErrorText(string value);
    public TableItemStyle get_ErrorTextStyle();
    public Style get_SignInButtonStyle();
    public virtual string get_SignInImageUrl();
    public virtual void set_SignInImageUrl(string value);
    public virtual string get_SignInText();
    public virtual void set_SignInText(string value);
    public virtual ButtonType get_SignInButtonType();
    public virtual void set_SignInButtonType(ButtonType value);
    public virtual bool get_ShowButtonImage();
    public virtual void set_ShowButtonImage(bool value);
    public string get_SignInContext();
    public void set_SignInContext(string value);
    public virtual string get_TitleText();
    public virtual void set_TitleText(string value);
    public TableItemStyle get_TitleTextStyle();
    public virtual bool get_DisplayRememberMe();
    public virtual void set_DisplayRememberMe(bool value);
    public virtual bool get_RememberMeSet();
    public virtual void set_RememberMeSet(bool value);
    public virtual string get_RememberMeText();
    public virtual void set_RememberMeText(string value);
    public TableItemStyle get_CheckBoxStyle();
    public virtual bool get_VisibleWhenSignedIn();
    public virtual void set_VisibleWhenSignedIn(bool value);
    public bool get_RequireHttps();
    public void set_RequireHttps(bool value);
    public virtual SignInMode get_SignInMode();
    public virtual void set_SignInMode(SignInMode value);
    public ServiceConfiguration get_ServiceConfiguration();
    public void set_ServiceConfiguration(ServiceConfiguration value);
    protected string get_ButtonClientId();
    protected string get_RememberMeClientId();
    protected void add_Click(EventHandler value);
    protected void remove_Click(EventHandler value);
    private SignInContainer get_TemplateContainer();
    public virtual string get_ClientSideSignInFunction();
    private bool get_ConvertingToTemplate();
    protected WebControl get_ActiveButton();
    protected abstract virtual bool SignIn();
    protected virtual void OnInit(EventArgs e);
    private void SignInButton_Click(object sender, EventArgs e);
    protected virtual void CreateChildControls();
    protected virtual void OnPreRender(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    private void SetChildProperties();
    private void SetCommonChildProperties();
    private void SetDefaultTemplateChildProperties();
    protected virtual bool get_IsPersistentCookie();
    protected virtual string GetClientScript();
    protected virtual string GetAutoSignInScript();
    protected virtual string GetReturnUrl();
    protected virtual string GetSessionTokenContext();
    protected virtual void OnRedirectingToIdentityProvider(RedirectingToIdentityProviderEventArgs e);
    protected virtual void OnSecurityTokenReceived(SecurityTokenReceivedEventArgs e);
    protected virtual void OnSecurityTokenValidated(SecurityTokenValidatedEventArgs e);
    protected virtual void OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs e);
    protected virtual void OnSignedIn(EventArgs e);
    protected virtual void OnSignInError(ErrorEventArgs e);
    private bool HandleSignInException(Exception exception);
    private string GetRedirectUrl();
    protected virtual void SetDesignModeState(IDictionary data);
    protected virtual void LoadViewState(object savedState);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    private bool RedirectedFromFailedLogin();
}
public enum Microsoft.IdentityModel.Web.Controls.SignInMode : Enum {
    public int value__;
    public static SignInMode Session;
    public static SignInMode Single;
}
internal static class Microsoft.IdentityModel.Web.Controls.SignInModeHelper : object {
    internal static bool IsDefined(SignInMode value);
}
internal class Microsoft.IdentityModel.Web.Controls.SignInStatusDesigner : CompositeControlDesigner {
    private bool _loggedIn;
    private FederatedPassiveSignInStatus _loginStatus;
    public DesignerActionListCollection ActionLists { get; }
    protected bool UsePreviewControl { get; }
    public virtual DesignerActionListCollection get_ActionLists();
    protected virtual bool get_UsePreviewControl();
    public virtual string GetDesignTimeHtml();
    public virtual void Initialize(IComponent component);
}
public enum Microsoft.IdentityModel.Web.Controls.SignOutAction : Enum {
    public int value__;
    public static SignOutAction Refresh;
    public static SignOutAction Redirect;
    public static SignOutAction RedirectToLoginPage;
    public static SignOutAction FederatedPassiveSignOut;
}
[ParseChildrenAttribute("False")]
[DefaultPropertyAttribute("Text")]
[ControlBuilderAttribute("Microsoft.IdentityModel.Web.Controls.SimpleButtonControlBuilder")]
internal class Microsoft.IdentityModel.Web.Controls.SimpleButton : WebControl {
    private Image _img;
    private Label _label;
    [WebCategoryAttribute("Category_Appearance")]
[PersistenceModeAttribute]
[WebDescriptionAttribute("SignIn_SignInText")]
[LocalizableAttribute("True")]
[WebDefaultValueAttribute("SignIn_DefaultSignInText")]
public string Text { get; public set; }
    [WebCategoryAttribute("Category_Appearance")]
[WebDescriptionAttribute("SignIn_SignInImageUrl")]
[UrlPropertyAttribute]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor", "System.Drawing.Design.UITypeEditor")]
public string ImageUrl { get; public set; }
    [WebCategoryAttribute("Category_Behavior")]
[DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebDescriptionAttribute("SimpleButton_OnClientClick")]
public string OnClientClick { get; public set; }
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual string get_ImageUrl();
    public virtual void set_ImageUrl(string value);
    public virtual string get_OnClientClick();
    public virtual void set_OnClientClick(string value);
    protected virtual void CreateChildControls();
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void LoadViewState(object savedState);
    protected virtual void RenderContents(HtmlTextWriter writer);
}
internal class Microsoft.IdentityModel.Web.Controls.SimpleButtonControlBuilder : ControlBuilder {
    public virtual bool AllowWhitespaceLiterals();
}
[DefaultPropertyAttribute("Text")]
[ControlValuePropertyAttribute("Checked")]
internal class Microsoft.IdentityModel.Web.Controls.SimpleCheckBox : WebControl {
    [DefaultValueAttribute("False")]
[ThemeableAttribute("False")]
public bool Checked { get; public set; }
    [BindableAttribute("True")]
[LocalizableAttribute("True")]
[WebCategoryAttribute("Category_Appearance")]
[DefaultValueAttribute("")]
public string Text { get; public set; }
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public sealed virtual void add_CheckedChanged(EventHandler value);
    public sealed virtual void remove_CheckedChanged(EventHandler value);
    protected virtual void Render(HtmlTextWriter writer);
    private void RenderLabel(HtmlTextWriter writer, string text, string clientID);
    private void RenderInputTag(HtmlTextWriter writer, string clientID, string onClick);
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.IdentityModel.Web.Controls.WebCategoryAttribute : CategoryAttribute {
    public object TypeId { get; }
    public WebCategoryAttribute(string category);
    public virtual object get_TypeId();
    protected virtual string GetLocalizedString(string value);
}
internal abstract class Microsoft.IdentityModel.Web.Controls.WebControlContainer`1 : WebControl {
    internal static string DesignerRegionAttributeName;
    private static string _templateDesignerRegion;
    private bool _renderDesignerRegion;
    private TWebControl _owner;
    private bool _ownerDesignMode;
    private Table _layoutTable;
    private Table _borderTable;
    internal Table BorderTable { get; internal set; }
    protected bool ConvertingToTemplate { get; }
    internal Table LayoutTable { get; internal set; }
    internal TWebControl Owner { get; }
    internal bool RenderDesignerRegion { get; internal set; }
    private bool UsingDefaultTemplate { get; }
    public WebControlContainer`1(TWebControl owner, bool ownerDesignMode);
    internal Table get_BorderTable();
    internal void set_BorderTable(Table value);
    protected abstract virtual bool get_ConvertingToTemplate();
    internal Table get_LayoutTable();
    internal void set_LayoutTable(Table value);
    internal TWebControl get_Owner();
    internal bool get_RenderDesignerRegion();
    internal void set_RenderDesignerRegion(bool value);
    private bool get_UsingDefaultTemplate();
    public sealed virtual void Focus();
    protected virtual void Render(HtmlTextWriter writer);
    private void RenderContentsInUnitTable(HtmlTextWriter writer);
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.IdentityModel.Web.Controls.WebDefaultValueAttribute : DefaultValueAttribute {
    private Type _type;
    private bool _localized;
    public object TypeId { get; }
    public object Value { get; }
    public WebDefaultValueAttribute(string value);
    public WebDefaultValueAttribute(Type valueType, string value);
    public virtual object get_TypeId();
    public virtual object get_Value();
}
[AttributeUsageAttribute("32767")]
internal class Microsoft.IdentityModel.Web.Controls.WebDescriptionAttribute : DescriptionAttribute {
    private bool _localized;
    public string Description { get; }
    public object TypeId { get; }
    internal WebDescriptionAttribute(string description);
    public virtual string get_Description();
    public virtual object get_TypeId();
}
public abstract class Microsoft.IdentityModel.Web.CookieHandler : object {
    private static string DefaultCookieName;
    private string _domain;
    private bool _hideFromClientScript;
    private string _name;
    private string _path;
    private bool _requireSsl;
    private Nullable`1<TimeSpan> _persistentSessionLifetime;
    private static string DefaultCookiePath { get; }
    public string Domain { get; public set; }
    public bool HideFromClientScript { get; public set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    public Nullable`1<TimeSpan> PersistentSessionLifetime { get; public set; }
    public bool RequireSsl { get; public set; }
    private static string get_DefaultCookiePath();
    public void Delete();
    public void Delete(string name);
    public void Delete(HttpContext context);
    public void Delete(string name, HttpContext context);
    public void Delete(string name, string path, string domain, HttpContext context);
    protected abstract virtual void DeleteCore(string name, string path, string domain, HttpContext context);
    public string get_Domain();
    public void set_Domain(string value);
    public bool get_HideFromClientScript();
    public void set_HideFromClientScript(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Path();
    public void set_Path(string value);
    public Nullable`1<TimeSpan> get_PersistentSessionLifetime();
    public void set_PersistentSessionLifetime(Nullable`1<TimeSpan> value);
    public bool get_RequireSsl();
    public void set_RequireSsl(bool value);
    public Byte[] Read();
    public Byte[] Read(string name);
    public Byte[] Read(HttpContext context);
    public Byte[] Read(string name, HttpContext context);
    protected abstract virtual Byte[] ReadCore(string name, HttpContext context);
    public void Write(Byte[] value, bool isPersistent, DateTime tokenExpirationTime);
    public void Write(Byte[] value, string name, DateTime expirationTime);
    public void Write(Byte[] value, string name, DateTime expirationTime, HttpContext context);
    public void Write(Byte[] value, string name, string path, string domain, DateTime expirationTime, bool requiresSsl, bool hideFromClientScript, HttpContext context);
    protected abstract virtual void WriteCore(Byte[] value, string name, string path, string domain, DateTime expirationTime, bool secure, bool httpOnly, HttpContext context);
    internal static string MatchCookiePath(string targetUrl);
    internal string MatchCookiePath(Uri baseUri, Uri targetUri);
}
public abstract class Microsoft.IdentityModel.Web.CookieTransform : object {
    public abstract virtual Byte[] Decode(Byte[] encoded);
    public abstract virtual Byte[] Encode(Byte[] value);
}
public static class Microsoft.IdentityModel.Web.CredentialId : object {
    public static string CreateFriendlyPPID(string rawPPID);
}
public class Microsoft.IdentityModel.Web.DeflateCookieTransform : CookieTransform {
    private int _maxDecompressedSize;
    public int MaxDecompressedSize { get; public set; }
    public int get_MaxDecompressedSize();
    public void set_MaxDecompressedSize(int value);
    public virtual Byte[] Decode(Byte[] encoded);
    public virtual Byte[] Encode(Byte[] value);
}
public static class Microsoft.IdentityModel.Web.FederatedAuthentication : object {
    public static int DefaultMaxArrayLength;
    public static int DefaultMaxStringContentLength;
    internal static string ModulesKey;
    [ThreadStaticAttribute]
internal static IDictionary _currentItemsOverride;
    internal static ServiceConfiguration _serviceConfiguration;
    internal static object _serviceConfigurationLock;
    private static EventHandler`1<ServiceConfigurationCreatedEventArgs> ServiceConfigurationCreated;
    public static ClaimsAuthorizationModule ClaimsAuthorizationModule { get; }
    public static ClaimsPrincipalHttpModule ClaimsPrincipalHttpModule { get; }
    public static ServiceConfiguration ServiceConfiguration { get; }
    public static SessionAuthenticationModule SessionAuthenticationModule { get; }
    public static WSFederationAuthenticationModule WSFederationAuthenticationModule { get; }
    private static FederatedAuthentication();
    public static ClaimsAuthorizationModule get_ClaimsAuthorizationModule();
    public static ClaimsPrincipalHttpModule get_ClaimsPrincipalHttpModule();
    public static ServiceConfiguration get_ServiceConfiguration();
    public static SessionAuthenticationModule get_SessionAuthenticationModule();
    public static WSFederationAuthenticationModule get_WSFederationAuthenticationModule();
    public static void add_ServiceConfigurationCreated(EventHandler`1<ServiceConfigurationCreatedEventArgs> value);
    public static void remove_ServiceConfigurationCreated(EventHandler`1<ServiceConfigurationCreatedEventArgs> value);
    private static IDictionary GetCurrentContextItems();
    private static T GetHttpModule();
    private static Dictionary`2<Type, IHttpModule> GetHttpContextModuleMap();
    private static T GetHttpContextModule();
}
public class Microsoft.IdentityModel.Web.FederatedAuthenticationSessionEndingException : Exception {
    public FederatedAuthenticationSessionEndingException(string message);
    public FederatedAuthenticationSessionEndingException(string message, Exception inner);
    protected FederatedAuthenticationSessionEndingException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.IdentityModel.Web.FederatedPassiveContext : object {
    private static string ControlIdKey;
    private static string ReturnUrlKey;
    private static string SignInContextKey;
    private static string RememberMeKey;
    private string _wctx;
    private string _controlId;
    private string _signInContext;
    private string _returnUrl;
    private bool _rememberMe;
    public string ControlId { get; }
    public string SignInContext { get; }
    public string ReturnUrl { get; }
    public bool RememberMe { get; }
    public string WCtx { get; }
    public FederatedPassiveContext(string controlId, string signInContext, string returnUrl, bool rememberMe);
    public FederatedPassiveContext(string wctx);
    public string get_ControlId();
    public string get_SignInContext();
    public string get_ReturnUrl();
    public bool get_RememberMe();
    public string get_WCtx();
    private void Initialize();
}
public static class Microsoft.IdentityModel.Web.FederatedPassiveSecurityTokenServiceOperations : object {
    public static void ProcessRequest(HttpRequest request, IPrincipal principal, SecurityTokenService sts, HttpResponse response);
    public static void ProcessRequest(HttpRequest request, IPrincipal principal, SecurityTokenService sts, HttpResponse response, WSFederationSerializer federationSerializer);
    public static SignInResponseMessage ProcessSignInRequest(SignInRequestMessage requestMessage, IPrincipal principal, SecurityTokenService sts);
    public static SignInResponseMessage ProcessSignInRequest(SignInRequestMessage requestMessage, IPrincipal principal, SecurityTokenService sts, WSFederationSerializer federationSerializer);
    public static void ProcessSignInResponse(SignInResponseMessage signInResponseMessage, HttpResponse httpResponse);
    public static void ProcessSignOutRequest(WSFederationMessage requestMessage, IPrincipal principal, string reply, HttpResponse httpResponse);
    private static bool IsAuthenticatedUser(IPrincipal principal);
}
public class Microsoft.IdentityModel.Web.FederatedSessionExpiredException : FederatedAuthenticationSessionEndingException {
    private DateTime _tested;
    private DateTime _expired;
    public DateTime Expired { get; }
    public DateTime Tested { get; }
    public FederatedSessionExpiredException(DateTime tested, DateTime expired);
    public FederatedSessionExpiredException(DateTime tested, DateTime expired, Exception inner);
    public FederatedSessionExpiredException(string message);
    public FederatedSessionExpiredException(string message, Exception inner);
    protected FederatedSessionExpiredException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public DateTime get_Expired();
    public DateTime get_Tested();
}
public abstract class Microsoft.IdentityModel.Web.HttpModuleBase : object {
    private ServiceConfiguration _serviceConfiguration;
    public ServiceConfiguration ServiceConfiguration { get; public set; }
    public ServiceConfiguration get_ServiceConfiguration();
    public void set_ServiceConfiguration(ServiceConfiguration value);
    public virtual void Dispose();
    public sealed virtual void Init(HttpApplication context);
    protected abstract virtual void InitializeModule(HttpApplication context);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.IdentityModel.Web.IdentityModelWrappedXmlDictionaryReader : XmlDictionaryReader {
    private XmlReader _reader;
    private XmlDictionaryReaderQuotas _xmlDictionaryReaderQuotas;
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public bool IsEmptyElement { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public char QuoteChar { get; }
    public ReadState ReadState { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public string Value { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public Type ValueType { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XmlDictionaryReaderQuotas Quotas { get; }
    public IdentityModelWrappedXmlDictionaryReader(XmlReader reader, XmlDictionaryReaderQuotas xmlDictionaryReaderQuotas);
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual bool get_CanReadBinaryContent();
    public virtual bool get_CanReadValueChunk();
    public virtual void Close();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual string GetAttribute(int index);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceUri);
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public virtual bool get_IsEmptyElement();
    public virtual bool IsStartElement(string name);
    public virtual bool IsStartElement(string localName, string namespaceUri);
    public virtual string get_LocalName();
    public virtual string LookupNamespace(string namespaceUri);
    public virtual void MoveToAttribute(int index);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string namespaceUri);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual char get_QuoteChar();
    public virtual bool Read();
    public virtual bool ReadAttributeValue();
    public virtual string ReadElementString(string name);
    public virtual string ReadElementString(string localName, string namespaceUri);
    public virtual string ReadInnerXml();
    public virtual string ReadOuterXml();
    public virtual void ReadStartElement(string name);
    public virtual void ReadStartElement(string localName, string namespaceUri);
    public virtual void ReadEndElement();
    public virtual string ReadString();
    public virtual ReadState get_ReadState();
    public virtual void ResolveEntity();
    public virtual string get_Item(int index);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceUri);
    public virtual string get_Value();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int offset, int count);
    public virtual int ReadContentAsBase64(Byte[] buffer, int offset, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int offset, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int offset, int count);
    public virtual int ReadValueChunk(Char[] chars, int offset, int count);
    public virtual Type get_ValueType();
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual decimal ReadContentAsDecimal();
    public virtual double ReadContentAsDouble();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual float ReadContentAsFloat();
    public virtual string ReadContentAsString();
    public virtual object ReadContentAs(Type valueType, IXmlNamespaceResolver namespaceResolver);
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public virtual XmlDictionaryReaderQuotas get_Quotas();
}
public class Microsoft.IdentityModel.Web.ProtectedDataCookieTransform : CookieTransform {
    public virtual Byte[] Decode(Byte[] encoded);
    public virtual Byte[] Encode(Byte[] value);
}
public class Microsoft.IdentityModel.Web.RedirectingToIdentityProviderEventArgs : CancelEventArgs {
    private SignInRequestMessage _signInRequestMessage;
    public SignInRequestMessage SignInRequestMessage { get; public set; }
    public RedirectingToIdentityProviderEventArgs(SignInRequestMessage signInRequestMessage);
    public SignInRequestMessage get_SignInRequestMessage();
    public void set_SignInRequestMessage(SignInRequestMessage value);
}
public class Microsoft.IdentityModel.Web.RsaEncryptionCookieTransform : CookieTransform {
    private RSA _encryptionKey;
    private List`1<RSA> _decryptionKeys;
    private string _hashName;
    public RSA EncryptionKey { get; public set; }
    protected ReadOnlyCollection`1<RSA> DecryptionKeys { get; }
    public string HashName { get; public set; }
    public RsaEncryptionCookieTransform(RSA key);
    public RsaEncryptionCookieTransform(X509Certificate2 certificate);
    public virtual RSA get_EncryptionKey();
    public virtual void set_EncryptionKey(RSA value);
    protected virtual ReadOnlyCollection`1<RSA> get_DecryptionKeys();
    public string get_HashName();
    public void set_HashName(string value);
    public virtual Byte[] Decode(Byte[] encoded);
    public virtual Byte[] Encode(Byte[] value);
}
public class Microsoft.IdentityModel.Web.RsaSha1SignatureCookieTransform : RsaSignatureCookieTransform {
    public RsaSha1SignatureCookieTransform(RSA key);
    public RsaSha1SignatureCookieTransform(X509Certificate2 certificate);
}
public class Microsoft.IdentityModel.Web.RsaSignatureCookieTransform : CookieTransform {
    private RSA _signingKey;
    private List`1<RSA> _verificationKeys;
    private string _hashName;
    public string HashName { get; public set; }
    public RSA SigningKey { get; public set; }
    protected ReadOnlyCollection`1<RSA> VerificationKeys { get; }
    public RsaSignatureCookieTransform(RSA key);
    public RsaSignatureCookieTransform(X509Certificate2 certificate);
    public string get_HashName();
    public void set_HashName(string value);
    public virtual RSA get_SigningKey();
    public virtual void set_SigningKey(RSA value);
    protected virtual ReadOnlyCollection`1<RSA> get_VerificationKeys();
    public virtual Byte[] Decode(Byte[] encoded);
    public virtual Byte[] Encode(Byte[] value);
    private AsymmetricSignatureFormatter GetSignatureFormatter(RSA rsa);
    private AsymmetricSignatureDeformatter GetSignatureDeformatter(RSA rsa);
    private bool isSha256();
}
public class Microsoft.IdentityModel.Web.SecurityTokenReceivedEventArgs : CancelEventArgs {
    private SecurityToken _securityToken;
    private string _signInContext;
    public SecurityToken SecurityToken { get; public set; }
    public string SignInContext { get; }
    public SecurityTokenReceivedEventArgs(SecurityToken securityToken);
    public SecurityTokenReceivedEventArgs(SecurityToken securityToken, string signInContext);
    public SecurityToken get_SecurityToken();
    public void set_SecurityToken(SecurityToken value);
    public string get_SignInContext();
}
public class Microsoft.IdentityModel.Web.SecurityTokenValidatedEventArgs : CancelEventArgs {
    private IClaimsPrincipal _claimsPrincipal;
    public IClaimsPrincipal ClaimsPrincipal { get; public set; }
    public SecurityTokenValidatedEventArgs(IClaimsPrincipal claimsPrincipal);
    public IClaimsPrincipal get_ClaimsPrincipal();
    public void set_ClaimsPrincipal(IClaimsPrincipal value);
}
public class Microsoft.IdentityModel.Web.SessionAuthenticationModule : HttpModuleBase {
    private CookieHandler _cookieHandler;
    private object _lockObject;
    private bool _isSessionMode;
    private EventHandler`1<SessionSecurityTokenCreatedEventArgs> SessionSecurityTokenCreated;
    private EventHandler`1<SessionSecurityTokenReceivedEventArgs> SessionSecurityTokenReceived;
    private EventHandler`1<SigningOutEventArgs> SigningOut;
    private EventHandler SignedOut;
    private EventHandler`1<ErrorEventArgs> SignOutError;
    public CookieHandler CookieHandler { get; public set; }
    public SessionSecurityToken ContextSessionSecurityToken { get; internal set; }
    public bool IsSessionMode { get; public set; }
    internal static SessionAuthenticationModule Current { get; }
    public CookieHandler get_CookieHandler();
    public void set_CookieHandler(CookieHandler value);
    public virtual SessionSecurityToken get_ContextSessionSecurityToken();
    internal virtual void set_ContextSessionSecurityToken(SessionSecurityToken value);
    public bool get_IsSessionMode();
    public void set_IsSessionMode(bool value);
    private SessionSecurityTokenCreatedEventArgs RaiseSessionCreatedEvent(SessionSecurityToken sessionToken, bool reissueCookie);
    internal static SessionAuthenticationModule get_Current();
    public virtual void AuthenticateSessionSecurityToken(SessionSecurityToken sessionToken, bool writeCookie);
    public bool ContainsSessionTokenCookie(HttpCookieCollection httpCookieCollection);
    public void DeleteSessionTokenCookie();
    internal void RemoveSessionTokenFromCache(SessionSecurityToken token);
    internal Uri GetSignOutUrlFromSessionToken();
    protected virtual void InitializeModule(HttpApplication context);
    protected virtual void InitializePropertiesFromConfiguration(string serviceName);
    protected virtual void OnAuthenticateRequest(object sender, EventArgs eventArgs);
    protected virtual void OnPostAuthenticateRequest(object sender, EventArgs e);
    public virtual void SignOut();
    protected virtual void OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs args);
    protected virtual void OnSessionSecurityTokenReceived(SessionSecurityTokenReceivedEventArgs args);
    protected virtual void OnSignedOut(EventArgs e);
    protected virtual void OnSigningOut(SigningOutEventArgs e);
    protected virtual void OnSignOutError(ErrorEventArgs e);
    public SessionSecurityToken CreateSessionSecurityToken(IClaimsPrincipal principal, string context, DateTime validFrom, DateTime validTo, bool isPersistent);
    public SessionSecurityToken ReadSessionTokenFromCookie(Byte[] sessionCookie);
    private SecurityContextKeyIdentifierClause GetKeyId(Byte[] sessionCookie);
    protected virtual void SetPrincipalFromSessionToken(SessionSecurityToken sessionSecurityToken);
    public bool TryReadSessionTokenFromCookie(SessionSecurityToken& sessionToken);
    protected ClaimsIdentityCollection ValidateSessionToken(SessionSecurityToken sessionSecurityToken);
    public void WriteSessionTokenToCookie(SessionSecurityToken sessionToken);
    public void add_SessionSecurityTokenCreated(EventHandler`1<SessionSecurityTokenCreatedEventArgs> value);
    public void remove_SessionSecurityTokenCreated(EventHandler`1<SessionSecurityTokenCreatedEventArgs> value);
    public void add_SessionSecurityTokenReceived(EventHandler`1<SessionSecurityTokenReceivedEventArgs> value);
    public void remove_SessionSecurityTokenReceived(EventHandler`1<SessionSecurityTokenReceivedEventArgs> value);
    public void add_SigningOut(EventHandler`1<SigningOutEventArgs> value);
    public void remove_SigningOut(EventHandler`1<SigningOutEventArgs> value);
    public void add_SignedOut(EventHandler value);
    public void remove_SignedOut(EventHandler value);
    public void add_SignOutError(EventHandler`1<ErrorEventArgs> value);
    public void remove_SignOutError(EventHandler`1<ErrorEventArgs> value);
}
public class Microsoft.IdentityModel.Web.SessionSecurityTokenCreatedEventArgs : EventArgs {
    private SessionSecurityToken _sessionToken;
    private bool _writeSessionCookie;
    public SessionSecurityToken SessionToken { get; public set; }
    public bool WriteSessionCookie { get; public set; }
    public SessionSecurityTokenCreatedEventArgs(SessionSecurityToken sessionToken);
    public SessionSecurityToken get_SessionToken();
    public void set_SessionToken(SessionSecurityToken value);
    public bool get_WriteSessionCookie();
    public void set_WriteSessionCookie(bool value);
}
public class Microsoft.IdentityModel.Web.SessionSecurityTokenReceivedEventArgs : CancelEventArgs {
    private SessionSecurityToken _sessionToken;
    private bool _reissueCookie;
    public SessionSecurityToken SessionToken { get; public set; }
    public bool ReissueCookie { get; public set; }
    public SessionSecurityTokenReceivedEventArgs(SessionSecurityToken sessionToken);
    public SessionSecurityToken get_SessionToken();
    public void set_SessionToken(SessionSecurityToken value);
    public bool get_ReissueCookie();
    public void set_ReissueCookie(bool value);
}
internal class Microsoft.IdentityModel.Web.SessionSecurityTokenResolver : SecurityTokenResolver {
    private SecurityTokenCache _tokenCache;
    private string _endpointId;
    private bool _isSessionMode;
    internal SessionSecurityTokenResolver(SecurityTokenCache tokenCache, string endpointId, bool isSessionMode);
    protected virtual bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityKey& key);
    protected virtual bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, SecurityToken& token);
    protected virtual bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityToken& token);
}
public class Microsoft.IdentityModel.Web.SigningOutEventArgs : EventArgs {
    private static SigningOutEventArgs _ipInitiated;
    private static SigningOutEventArgs _rpInitiated;
    private bool _isIPInitiated;
    public static SigningOutEventArgs IPInitiated { get; }
    public static SigningOutEventArgs RPInitiated { get; }
    public bool IsIPInitiated { get; }
    public SigningOutEventArgs(bool isIPInitiated);
    private static SigningOutEventArgs();
    public static SigningOutEventArgs get_IPInitiated();
    public static SigningOutEventArgs get_RPInitiated();
    public bool get_IsIPInitiated();
}
internal class Microsoft.IdentityModel.Web.TokenReceiver : object {
    private ServiceConfiguration _serviceConfiguration;
    public TimeSpan ConfiguredSessionTokenLifeTime { get; }
    public TokenReceiver(ServiceConfiguration serviceConfiguration);
    public SecurityToken ReadToken(XmlReader reader);
    public SecurityToken ReadToken(string tokenXml, XmlDictionaryReaderQuotas readerQuotas);
    public IClaimsPrincipal AuthenticateToken(SecurityToken token, bool ensureBearerToken, string endpointUri);
    public TimeSpan get_ConfiguredSessionTokenLifeTime();
    public void ComputeSessionTokenLifeTime(SecurityToken securityToken, DateTime& validFrom, DateTime& validTo);
}
public class Microsoft.IdentityModel.Web.WSFederationAuthenticationModule : HttpModuleBase {
    private string _authenticationType;
    private string _freshness;
    private string _homeRealm;
    private string _issuer;
    private string _policy;
    private string _realm;
    private string _reply;
    private string _signOutReply;
    private string _request;
    private string _requestPtr;
    private string _resource;
    private string _signInContext;
    private string _signInQueryString;
    private string _signOutQueryString;
    private bool _passiveRedirectEnabled;
    private bool _persistentCookiesOnPassiveRedirects;
    private bool _requireHttps;
    private XmlDictionaryReaderQuotas _xmlDictionaryReaderQuotas;
    private static string _sessionTokenContextPrefix;
    private EventHandler`1<SecurityTokenReceivedEventArgs> SecurityTokenReceived;
    private EventHandler`1<SecurityTokenValidatedEventArgs> SecurityTokenValidated;
    private EventHandler`1<SessionSecurityTokenCreatedEventArgs> SessionSecurityTokenCreated;
    private EventHandler SignedIn;
    private EventHandler SignedOut;
    private EventHandler`1<ErrorEventArgs> SignInError;
    private EventHandler`1<SigningOutEventArgs> SigningOut;
    private EventHandler`1<ErrorEventArgs> SignOutError;
    private EventHandler`1<RedirectingToIdentityProviderEventArgs> RedirectingToIdentityProvider;
    private EventHandler`1<AuthorizationFailedEventArgs> AuthorizationFailed;
    private static Byte[] _signOutImage;
    internal static string SessionTokenContextPrefix { get; }
    public string AuthenticationType { get; public set; }
    public string Freshness { get; public set; }
    public string HomeRealm { get; public set; }
    public string Issuer { get; public set; }
    public string Realm { get; public set; }
    public string Policy { get; public set; }
    public string Reply { get; public set; }
    public string SignOutReply { get; public set; }
    public string Request { get; public set; }
    public string RequestPtr { get; public set; }
    public string Resource { get; public set; }
    public bool PassiveRedirectEnabled { get; public set; }
    public bool PersistentCookiesOnPassiveRedirects { get; public set; }
    public bool RequireHttps { get; public set; }
    public string SignInContext { get; public set; }
    public string SignInQueryString { get; public set; }
    public string SignOutQueryString { get; public set; }
    public XmlDictionaryReaderQuotas XmlDictionaryReaderQuotas { get; public set; }
    private static WSFederationAuthenticationModule();
    internal static string get_SessionTokenContextPrefix();
    public void add_SecurityTokenReceived(EventHandler`1<SecurityTokenReceivedEventArgs> value);
    public void remove_SecurityTokenReceived(EventHandler`1<SecurityTokenReceivedEventArgs> value);
    public void add_SecurityTokenValidated(EventHandler`1<SecurityTokenValidatedEventArgs> value);
    public void remove_SecurityTokenValidated(EventHandler`1<SecurityTokenValidatedEventArgs> value);
    public void add_SessionSecurityTokenCreated(EventHandler`1<SessionSecurityTokenCreatedEventArgs> value);
    public void remove_SessionSecurityTokenCreated(EventHandler`1<SessionSecurityTokenCreatedEventArgs> value);
    public void add_SignedIn(EventHandler value);
    public void remove_SignedIn(EventHandler value);
    public void add_SignedOut(EventHandler value);
    public void remove_SignedOut(EventHandler value);
    public void add_SignInError(EventHandler`1<ErrorEventArgs> value);
    public void remove_SignInError(EventHandler`1<ErrorEventArgs> value);
    public void add_SigningOut(EventHandler`1<SigningOutEventArgs> value);
    public void remove_SigningOut(EventHandler`1<SigningOutEventArgs> value);
    public void add_SignOutError(EventHandler`1<ErrorEventArgs> value);
    public void remove_SignOutError(EventHandler`1<ErrorEventArgs> value);
    public void add_RedirectingToIdentityProvider(EventHandler`1<RedirectingToIdentityProviderEventArgs> value);
    public void remove_RedirectingToIdentityProvider(EventHandler`1<RedirectingToIdentityProviderEventArgs> value);
    public void add_AuthorizationFailed(EventHandler`1<AuthorizationFailedEventArgs> value);
    public void remove_AuthorizationFailed(EventHandler`1<AuthorizationFailedEventArgs> value);
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    public string get_Freshness();
    public void set_Freshness(string value);
    public string get_HomeRealm();
    public void set_HomeRealm(string value);
    public string get_Issuer();
    public void set_Issuer(string value);
    public string get_Realm();
    public void set_Realm(string value);
    public string get_Policy();
    public void set_Policy(string value);
    public string get_Reply();
    public void set_Reply(string value);
    public string get_SignOutReply();
    public void set_SignOutReply(string value);
    public string get_Request();
    public void set_Request(string value);
    public string get_RequestPtr();
    public void set_RequestPtr(string value);
    public string get_Resource();
    public void set_Resource(string value);
    public bool get_PassiveRedirectEnabled();
    public void set_PassiveRedirectEnabled(bool value);
    public bool get_PersistentCookiesOnPassiveRedirects();
    public void set_PersistentCookiesOnPassiveRedirects(bool value);
    public bool get_RequireHttps();
    public void set_RequireHttps(bool value);
    public string get_SignInContext();
    public void set_SignInContext(string value);
    public string get_SignInQueryString();
    public void set_SignInQueryString(string value);
    public string get_SignOutQueryString();
    public void set_SignOutQueryString(string value);
    public XmlDictionaryReaderQuotas get_XmlDictionaryReaderQuotas();
    public void set_XmlDictionaryReaderQuotas(XmlDictionaryReaderQuotas value);
    public bool CanReadSignInResponse(HttpRequest request);
    public virtual bool CanReadSignInResponse(HttpRequest request, bool onPage);
    protected virtual string GetSignOutRedirectUrl(SignOutCleanupRequestMessage signOutMessage);
    private static bool IsSignOutReplySafe(Uri replyUri, Uri issuerUri);
    protected virtual string GetReturnUrlFromResponse(HttpRequest request);
    public virtual SecurityToken GetSecurityToken(HttpRequest request);
    public void VerifyProperties();
    public virtual void RedirectToIdentityProvider(string uniqueId, string returnUrl, bool persist);
    protected virtual void InitializeModule(HttpApplication context);
    protected virtual void InitializePropertiesFromConfiguration(string serviceName);
    internal void InitializePropertiesFromConfiguration(ServiceElement element);
    protected virtual void OnAuthenticateRequest(object sender, EventArgs args);
    private void SignInWithResponseMessage(HttpRequest request);
    protected virtual void OnEndRequest(object sender, EventArgs args);
    protected virtual void OnPostAuthenticateRequest(object sender, EventArgs e);
    protected virtual void OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs args);
    protected virtual void OnSignedIn(EventArgs args);
    protected virtual void OnSignedOut(EventArgs args);
    protected virtual void OnSignInError(ErrorEventArgs args);
    protected virtual void OnSigningOut(SigningOutEventArgs args);
    protected virtual void OnSignOutError(ErrorEventArgs args);
    protected virtual void OnRedirectingToIdentityProvider(RedirectingToIdentityProviderEventArgs e);
    protected virtual void OnAuthorizationFailed(AuthorizationFailedEventArgs e);
    public void SetPrincipalAndWriteSessionToken(SessionSecurityToken sessionToken, bool isSession);
    public virtual void SignOut(bool isIPRequest);
    public SignInRequestMessage CreateSignInRequest(string uniqueId, string returnUrl, bool rememberMeSet);
    protected virtual string GetReferencedResult(string resultPtr);
    private string GetResultXml(SignInResponseMessage message);
    public virtual SecurityToken GetSecurityToken(SignInResponseMessage message);
    public virtual SignInResponseMessage GetSignInResponseMessage(HttpRequest request);
    private WSFederationSerializer CreateSerializerForResultXml(string resultXml);
    public virtual string GetXmlTokenFromMessage(SignInResponseMessage message);
    public virtual string GetXmlTokenFromMessage(SignInResponseMessage message, WSFederationSerializer federationSerializer);
    public virtual bool IsSignInResponse(HttpRequest request);
    internal static SignOutCleanupRequestMessage GetSignOutCleanupMessage(HttpRequest request);
    protected virtual string GetSessionTokenContext();
    public static void FederatedSignOut(Uri signOutUrl, Uri replyUrl);
    internal static Uri GetFederationPassiveSignOutUrl(Uri signOutUrl, Uri replyUrl);
    public static string GetFederationPassiveSignOutUrl(string issuer, string signOutReply, string signOutQueryString);
}
internal enum Microsoft.IdentityModel.Win32Error : Enum {
    public int value__;
    public static Win32Error ERROR_SUCCESS;
    public static Win32Error ERROR_INSUFFICIENT_BUFFER;
    public static Win32Error ERROR_NO_TOKEN;
    public static Win32Error ERROR_NONE_MAPPED;
}
public static class Microsoft.IdentityModel.WindowsTokenService.S4UClient : object {
    private static ChannelFactory`1<IS4UService_dup> _channelFactory;
    private static S4UClient();
    public static WindowsIdentity UpnLogon(string upn);
    public static WindowsIdentity CertificateLogon(X509Certificate2 certificate);
    private static WindowsIdentity CallService(Func`2<IS4UService_dup, IntPtr> contractOperation);
}
internal class Microsoft.IdentityModel.WrappedTokenCache : SecurityTokenResolver {
    private SecurityTokenCache _tokenCache;
    private SctClaimsHandler _claimsHandler;
    private bool _isSessionMode;
    public bool IsSessionMode { get; }
    public WrappedTokenCache(SecurityTokenCache tokenCache, SctClaimsHandler sctClaimsHandler, bool isSessionMode);
    public bool get_IsSessionMode();
    public sealed virtual void AddContext(SecurityContextSecurityToken token);
    public sealed virtual void ClearContexts();
    public sealed virtual Collection`1<SecurityContextSecurityToken> GetAllContexts(UniqueId contextId);
    public sealed virtual SecurityContextSecurityToken GetContext(UniqueId contextId, UniqueId generation);
    public sealed virtual void RemoveAllContexts(UniqueId contextId);
    public sealed virtual void RemoveContext(UniqueId contextId, UniqueId generation);
    public sealed virtual bool TryAddContext(SecurityContextSecurityToken token);
    public sealed virtual void UpdateContextCachingTime(SecurityContextSecurityToken token, DateTime expirationTime);
    protected virtual bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityKey& key);
    protected virtual bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityToken& token);
    protected virtual bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, SecurityToken& token);
}
public static class Microsoft.IdentityModel.WSAddressing10Constants : object {
    public static string Prefix;
    public static string NamespaceUri;
}
public static class Microsoft.IdentityModel.WSAddressing200408Constants : object {
    public static string Prefix;
    public static string NamespaceUri;
}
public static class Microsoft.IdentityModel.WSSecureConversation13Constants : object {
    public static string Namespace;
    public static string TokenTypeURI;
    public static int DefaultDerivedKeyLength;
}
public static class Microsoft.IdentityModel.WSSecureConversationFeb2005Constants : object {
    public static string Namespace;
    public static string TokenTypeURI;
    public static int DefaultDerivedKeyLength;
}
public static class Microsoft.IdentityModel.WSSecurity10Constants : object {
    public static string FragmentBaseAddress;
    public static string Namespace;
    public static string Prefix;
    public static string Base64EncodingType;
    public static string HexBinaryEncodingType;
    public static string KerberosTokenType1510;
    public static string KerberosTokenTypeGSS;
    public static string TextEncodingType;
    public static string X509TokenType;
    public static string UPTokenPasswordTextValue;
}
public static class Microsoft.IdentityModel.WSSecurity11Constants : object {
    public static string FragmentBaseAddress;
    public static string Namespace;
    public static string Prefix;
}
public static class Microsoft.IdentityModel.WSSecurityUtilityConstants : object {
    public static string Namespace;
    public static string Prefix;
}
internal class Microsoft.IdentityModel.X509CertificateChain : object {
    public static UInt32 DefaultChainPolicyOID;
    private bool _useMachineContext;
    private X509ChainPolicy _chainPolicy;
    private UInt32 _chainPolicyOID;
    public X509ChainPolicy ChainPolicy { get; public set; }
    public X509ChainStatus[] ChainStatus { get; }
    public X509CertificateChain(bool useMachineContext);
    public X509CertificateChain(bool useMachineContext, UInt32 chainPolicyOID);
    public X509ChainPolicy get_ChainPolicy();
    public void set_ChainPolicy(X509ChainPolicy value);
    public X509ChainStatus[] get_ChainStatus();
    public bool Build(X509Certificate2 certificate);
    private static void BuildChain(IntPtr hChainEngine, IntPtr pCertContext, X509Certificate2Collection extraStore, OidCollection applicationPolicy, OidCollection certificatePolicy, X509RevocationMode revocationMode, X509RevocationFlag revocationFlag, DateTime verificationTime, TimeSpan timeout, SafeCertChainHandle& ppChainContext);
    private static SafeCertStoreHandle ExportToMemoryStore(X509Certificate2Collection collection, IntPtr pCertContext);
    private static SafeHGlobalHandle CopyOidsToUnmanagedMemory(OidCollection oids);
    private static UInt32 MapRevocationFlags(X509RevocationMode revocationMode, X509RevocationFlag revocationFlag);
}
internal class Microsoft.IdentityModel.X509CertificateValidatorEx : X509CertificateValidator {
    private X509CertificateValidationMode _certificateValidationMode;
    private X509ChainPolicy _chainPolicy;
    private X509CertificateValidator _validator;
    public X509CertificateValidatorEx(X509CertificateValidationMode certificateValidationMode, X509RevocationMode revocationMode, StoreLocation trustedStoreLocation);
    public virtual void Validate(X509Certificate2 certificate);
}
internal static class Microsoft.IdentityModel.X509Util : object {
    internal static RSA EnsureAndGetPrivateRSAKey(X509Certificate2 certificate);
    internal static X509Certificate2 ResolveCertificate(CertificateReferenceElement element);
    internal static bool TryResolveCertificate(CertificateReferenceElement element, X509Certificate2& certificate);
    internal static X509Certificate2 ResolveCertificate(StoreName storeName, StoreLocation storeLocation, X509FindType findType, object findValue);
    internal static bool TryResolveCertificate(StoreName storeName, StoreLocation storeLocation, X509FindType findType, object findValue, X509Certificate2& certificate);
    internal static string GetCertificateId(X509Certificate2 certificate);
    internal static string GetCertificateIssuerName(X509Certificate2 certificate, IssuerNameRegistry issuerNameRegistry);
    internal static X509CertificateValidator CreateCertificateValidator(X509CertificateValidationMode certificateValidationMode, X509RevocationMode revocationMode, StoreLocation trustedStoreLocation);
}
internal static class Microsoft.IdentityModel.XmlUtil : object {
    public static string LanguageNamespaceUri;
    public static string LanguagePrefix;
    public static string LanguageLocalname;
    public static string LanguageAttribute;
    public static void WriteLanguageAttribute(XmlWriter writer, string value);
    public static XmlQualifiedName GetXsiType(XmlReader reader);
    public static bool EqualsQName(XmlQualifiedName qname, string localName, string namespaceUri);
    public static bool IsNil(XmlReader reader);
    public static string NormalizeEmptyString(string s);
    public static XmlQualifiedName ResolveQName(XmlReader reader, string qstring);
    public static void ValidateXsiType(XmlReader reader, string expectedTypeName, string expectedTypeNamespace);
    public static void ValidateXsiType(XmlReader reader, string expectedTypeName, string expectedTypeNamespace, bool requireDeclaration);
    public static string SerializeSecurityKeyIdentifier(SecurityKeyIdentifier ski, SecurityTokenSerializer securityTokenSerializer);
    public static bool IsValidXmlIDValue(string val);
    public static void WriteElementStringAsUniqueId(XmlDictionaryWriter writer, XmlDictionaryString localName, XmlDictionaryString ns, string id);
    public static void WriteElementContentAsInt64(XmlDictionaryWriter writer, XmlDictionaryString localName, XmlDictionaryString ns, long value);
    public static long ReadElementContentAsInt64(XmlDictionaryReader reader);
    public static List`1<XmlElement> GetXmlElements(XmlNodeList nodeList);
}
