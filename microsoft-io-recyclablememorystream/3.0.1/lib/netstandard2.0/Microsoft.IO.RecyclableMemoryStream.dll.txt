[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.IO.RecyclableMemoryStream : MemoryStream {
    private List`1<Byte[]> blocks;
    private Guid id;
    private RecyclableMemoryStreamManager memoryManager;
    [NullableAttribute("2")]
private string tag;
    private long creationTimestamp;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<Byte[]> dirtyBuffers;
    private bool disposed;
    [NullableAttribute("2")]
private Byte[] largeBuffer;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <AllocationStack>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DisposeStack>k__BackingField;
    private long length;
    private long position;
    [NullableAttribute("2")]
private Byte[] bufferWriterTempBuffer;
    internal Guid Id { get; }
    [NullableAttribute("2")]
internal string Tag { get; }
    internal RecyclableMemoryStreamManager MemoryManager { get; }
    [NullableAttribute("2")]
internal string AllocationStack { get; }
    [NullableAttribute("2")]
internal string DisposeStack { get; private set; }
    public int Capacity { get; public set; }
    public long Capacity64 { get; public set; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    private bool Disposed { get; }
    public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager);
    public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id);
    public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, string tag);
    public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id, string tag);
    public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, string tag, long requestedSize);
    public RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id, string tag, long requestedSize);
    [NullableContextAttribute("2")]
internal RecyclableMemoryStream(RecyclableMemoryStreamManager memoryManager, Guid id, string tag, long requestedSize, Byte[] initialLargeBuffer);
    internal Guid get_Id();
    [NullableContextAttribute("2")]
internal string get_Tag();
    internal RecyclableMemoryStreamManager get_MemoryManager();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal string get_AllocationStack();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal string get_DisposeStack();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_DisposeStack(string value);
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public long get_Capacity64();
    public void set_Capacity64(long value);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual Byte[] GetBuffer();
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public sealed virtual void Advance(int count);
    private void ReturnTempBuffer(Byte[] buffer);
    [NullableContextAttribute("0")]
public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    [NullableContextAttribute("0")]
public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    [NullableContextAttribute("0")]
private ArraySegment`1<byte> GetWritableBuffer(int sizeHint);
    [NullableContextAttribute("0")]
public ReadOnlySequence`1<byte> GetReadOnlySequence();
    [NullableContextAttribute("0")]
public virtual bool TryGetBuffer(ArraySegment`1& buffer);
    [ObsoleteAttribute("This method has degraded performance vs. GetBuffer and should be avoided.")]
public virtual Byte[] ToArray();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public int SafeRead(Byte[] buffer, int offset, int count, Int64& streamPosition);
    [NullableContextAttribute("0")]
public int Read(Span`1<byte> buffer);
    [NullableContextAttribute("0")]
public int SafeRead(Span`1<byte> buffer, Int64& streamPosition);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public void Write(ReadOnlySpan`1<byte> source);
    public virtual string ToString();
    public virtual void WriteByte(byte value);
    public virtual int ReadByte();
    public int SafeReadByte(Int64& streamPosition);
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin loc);
    public virtual void WriteTo(Stream stream);
    public void WriteTo(Stream stream, long offset, long count);
    public void WriteTo(Byte[] buffer);
    public void WriteTo(Byte[] buffer, long offset, long count);
    public void WriteTo(Byte[] buffer, long offset, long count, int targetOffset);
    private bool get_Disposed();
    private void CheckDisposed();
    private void ThrowDisposedException();
    private int InternalRead(Byte[] buffer, int offset, int count, long fromPosition);
    [NullableContextAttribute("0")]
private int InternalRead(Span`1<byte> buffer, long fromPosition);
    private BlockAndOffset GetBlockAndRelativeOffset(long offset);
    private void EnsureCapacity(long newCapacity);
    private void ReleaseLargeBuffer();
    private void AssertLengthIsSmall();
    [AsyncStateMachineAttribute("Microsoft.IO.RecyclableMemoryStream/<<CopyToAsync>g__CopyToAsyncImpl|53_0>d")]
[CompilerGeneratedAttribute]
internal static Task <CopyToAsync>g__CopyToAsyncImpl|53_0(Stream destination, BlockAndOffset blockAndOffset, long count, List`1<Byte[]> blocks, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.IO.RecyclableMemoryStreamManager : object {
    internal static int MaxArrayLength;
    public static int DefaultBlockSize;
    public static int DefaultLargeBufferMultiple;
    public static int DefaultMaximumBufferSize;
    private static long DefaultMaxSmallPoolFreeBytes;
    private static long DefaultMaxLargePoolFreeBytes;
    private Int64[] largeBufferFreeSize;
    private Int64[] largeBufferInUseSize;
    private ConcurrentStack`1[] largePools;
    private ConcurrentStack`1<Byte[]> smallPool;
    private long smallPoolFreeSize;
    private long smallPoolInUseSize;
    internal Options options;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<BlockCreatedEventArgs> BlockCreated;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<LargeBufferCreatedEventArgs> LargeBufferCreated;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<StreamCreatedEventArgs> StreamCreated;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<StreamDisposedEventArgs> StreamDisposed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<StreamDoubleDisposedEventArgs> StreamDoubleDisposed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<StreamFinalizedEventArgs> StreamFinalized;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<StreamLengthEventArgs> StreamLength;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<StreamConvertedToArrayEventArgs> StreamConvertedToArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<StreamOverCapacityEventArgs> StreamOverCapacity;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<BufferDiscardedEventArgs> BufferDiscarded;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<UsageReportEventArgs> UsageReport;
    public Options Settings { get; }
    public long SmallPoolFreeSize { get; }
    public long SmallPoolInUseSize { get; }
    public long LargePoolFreeSize { get; }
    public long LargePoolInUseSize { get; }
    public long SmallBlocksFree { get; }
    public long LargeBuffersFree { get; }
    public RecyclableMemoryStreamManager(Options options);
    public Options get_Settings();
    public long get_SmallPoolFreeSize();
    public long get_SmallPoolInUseSize();
    public long get_LargePoolFreeSize();
    public long get_LargePoolInUseSize();
    public long get_SmallBlocksFree();
    public long get_LargeBuffersFree();
    internal Byte[] GetBlock();
    internal Byte[] GetLargeBuffer(long requiredSize, Guid id, string tag);
    private long RoundToLargeBufferSize(long requiredSize);
    private bool IsLargeBufferSize(int value);
    private int GetPoolIndex(long length);
    internal void ReturnLargeBuffer(Byte[] buffer, Guid id, string tag);
    internal void ReturnBlocks(List`1<Byte[]> blocks, Guid id, string tag);
    internal void ReturnBlock(Byte[] block, Guid id, string tag);
    private void ZeroOutMemoryIfEnabled(Byte[] buffer);
    internal void ReportBlockCreated();
    [NullableContextAttribute("2")]
internal void ReportLargeBufferCreated(Guid id, string tag, long requiredSize, bool pooled, string callStack);
    [NullableContextAttribute("2")]
internal void ReportBufferDiscarded(Guid id, string tag, MemoryStreamBufferType bufferType, MemoryStreamDiscardReason reason);
    [NullableContextAttribute("2")]
internal void ReportStreamCreated(Guid id, string tag, long requestedSize, long actualSize);
    [NullableContextAttribute("2")]
internal void ReportStreamDisposed(Guid id, string tag, TimeSpan lifetime, string allocationStack, string disposeStack);
    [NullableContextAttribute("2")]
internal void ReportStreamDoubleDisposed(Guid id, string tag, string allocationStack, string disposeStack1, string disposeStack2);
    [NullableContextAttribute("2")]
internal void ReportStreamFinalized(Guid id, string tag, string allocationStack);
    internal void ReportStreamLength(long bytes);
    [NullableContextAttribute("2")]
internal void ReportStreamToArray(Guid id, string tag, string stack, long length);
    [NullableContextAttribute("2")]
internal void ReportStreamOverCapacity(Guid id, string tag, long requestedCapacity, string allocationStack);
    internal void ReportUsageReport();
    public RecyclableMemoryStream GetStream();
    public RecyclableMemoryStream GetStream(Guid id);
    public RecyclableMemoryStream GetStream(string tag);
    public RecyclableMemoryStream GetStream(Guid id, string tag);
    public RecyclableMemoryStream GetStream(string tag, long requiredSize);
    public RecyclableMemoryStream GetStream(Guid id, string tag, long requiredSize);
    public RecyclableMemoryStream GetStream(Guid id, string tag, long requiredSize, bool asContiguousBuffer);
    public RecyclableMemoryStream GetStream(string tag, long requiredSize, bool asContiguousBuffer);
    public RecyclableMemoryStream GetStream(Guid id, string tag, Byte[] buffer, int offset, int count);
    public RecyclableMemoryStream GetStream(Byte[] buffer);
    public RecyclableMemoryStream GetStream(string tag, Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public RecyclableMemoryStream GetStream(Guid id, string tag, ReadOnlySpan`1<byte> buffer);
    [NullableContextAttribute("0")]
public RecyclableMemoryStream GetStream(ReadOnlySpan`1<byte> buffer);
    [NullableContextAttribute("0")]
public RecyclableMemoryStream GetStream(string tag, ReadOnlySpan`1<byte> buffer);
    [CompilerGeneratedAttribute]
public void add_BlockCreated(EventHandler`1<BlockCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BlockCreated(EventHandler`1<BlockCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_LargeBufferCreated(EventHandler`1<LargeBufferCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_LargeBufferCreated(EventHandler`1<LargeBufferCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_StreamCreated(EventHandler`1<StreamCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StreamCreated(EventHandler`1<StreamCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_StreamDisposed(EventHandler`1<StreamDisposedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StreamDisposed(EventHandler`1<StreamDisposedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_StreamDoubleDisposed(EventHandler`1<StreamDoubleDisposedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StreamDoubleDisposed(EventHandler`1<StreamDoubleDisposedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_StreamFinalized(EventHandler`1<StreamFinalizedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StreamFinalized(EventHandler`1<StreamFinalizedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_StreamLength(EventHandler`1<StreamLengthEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StreamLength(EventHandler`1<StreamLengthEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_StreamConvertedToArray(EventHandler`1<StreamConvertedToArrayEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StreamConvertedToArray(EventHandler`1<StreamConvertedToArrayEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_StreamOverCapacity(EventHandler`1<StreamOverCapacityEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StreamOverCapacity(EventHandler`1<StreamOverCapacityEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_BufferDiscarded(EventHandler`1<BufferDiscardedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BufferDiscarded(EventHandler`1<BufferDiscardedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_UsageReport(EventHandler`1<UsageReportEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UsageReport(EventHandler`1<UsageReportEventArgs> value);
    [CompilerGeneratedAttribute]
internal static Byte[] <GetLargeBuffer>g__AllocateArray|43_0(long requiredSize, bool zeroInitializeArray);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
