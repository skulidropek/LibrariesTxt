[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Kiota.Abstractions.ApiClientBuilder : object {
    [NullableContextAttribute("0")]
public static void RegisterDefaultSerializer();
    [NullableContextAttribute("0")]
public static void RegisterDefaultDeserializer();
    public static ISerializationWriterFactory EnableBackingStoreForSerializationWriterFactory(ISerializationWriterFactory original);
    public static IParseNodeFactory EnableBackingStoreForParseNodeFactory(IParseNodeFactory original);
    private static void EnableBackingStoreForParseNodeRegistry(ParseNodeFactoryRegistry registry);
    private static void EnableBackingStoreForSerializationRegistry(SerializationWriterFactoryRegistry registry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.ApiException : Exception {
    [CompilerGeneratedAttribute]
private int <ResponseStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IEnumerable`1<string>> <ResponseHeaders>k__BackingField;
    public int ResponseStatusCode { get; public set; }
    public IDictionary`2<string, IEnumerable`1<string>> ResponseHeaders { get; public set; }
    public ApiException(string message);
    public ApiException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_ResponseStatusCode();
    [CompilerGeneratedAttribute]
public void set_ResponseStatusCode(int value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IEnumerable`1<string>> get_ResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_ResponseHeaders(IDictionary`2<string, IEnumerable`1<string>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.Authentication.AllowedHostsValidator : object {
    private HashSet`1<string> _allowedHosts;
    public IEnumerable`1<string> AllowedHosts { get; public set; }
    public AllowedHostsValidator(IEnumerable`1<string> validHosts);
    [IteratorStateMachineAttribute("Microsoft.Kiota.Abstractions.Authentication.AllowedHostsValidator/<get_AllowedHosts>d__3")]
public IEnumerable`1<string> get_AllowedHosts();
    public void set_AllowedHosts(IEnumerable`1<string> value);
    public bool IsUrlHostValid(Uri uri);
    private static void ValidateHosts(IEnumerable`1<string> hostsToValidate);
}
public class Microsoft.Kiota.Abstractions.Authentication.AnonymousAuthenticationProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual Task AuthenticateRequestAsync(RequestInformation request, Dictionary`2<string, object> additionalAuthenticationContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.Authentication.ApiKeyAuthenticationProvider : object {
    private string ApiKey;
    private string ParameterName;
    private KeyLocation KeyLoc;
    private AllowedHostsValidator AllowedHostsValidator;
    private static ActivitySource _activitySource;
    public ApiKeyAuthenticationProvider(string apiKey, string parameterName, KeyLocation keyLocation, String[] allowedHosts);
    private static ApiKeyAuthenticationProvider();
    public sealed virtual Task AuthenticateRequestAsync(RequestInformation request, Dictionary`2<string, object> additionalAuthenticationContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.Authentication.BaseBearerTokenAuthenticationProvider : object {
    [CompilerGeneratedAttribute]
private IAccessTokenProvider <AccessTokenProvider>k__BackingField;
    private static string AuthorizationHeaderKey;
    private static string ClaimsKey;
    public IAccessTokenProvider AccessTokenProvider { get; private set; }
    public BaseBearerTokenAuthenticationProvider(IAccessTokenProvider accessTokenProvider);
    [CompilerGeneratedAttribute]
public IAccessTokenProvider get_AccessTokenProvider();
    [CompilerGeneratedAttribute]
private void set_AccessTokenProvider(IAccessTokenProvider value);
    [AsyncStateMachineAttribute("Microsoft.Kiota.Abstractions.Authentication.BaseBearerTokenAuthenticationProvider/<AuthenticateRequestAsync>d__7")]
public sealed virtual Task AuthenticateRequestAsync(RequestInformation request, Dictionary`2<string, object> additionalAuthenticationContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.Kiota.Abstractions.Authentication.IAccessTokenProvider {
    public AllowedHostsValidator AllowedHostsValidator { get; }
    public abstract virtual Task`1<string> GetAuthorizationTokenAsync(Uri uri, Dictionary`2<string, object> additionalAuthenticationContext, CancellationToken cancellationToken);
    public abstract virtual AllowedHostsValidator get_AllowedHostsValidator();
}
[NullableContextAttribute("1")]
public interface Microsoft.Kiota.Abstractions.Authentication.IAuthenticationProvider {
    public abstract virtual Task AuthenticateRequestAsync(RequestInformation request, Dictionary`2<string, object> additionalAuthenticationContext, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Kiota.Abstractions.BaseRequestBuilder : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <PathParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private IRequestAdapter <RequestAdapter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlTemplate>k__BackingField;
    protected Dictionary`2<string, object> PathParameters { get; protected set; }
    protected IRequestAdapter RequestAdapter { get; protected set; }
    protected string UrlTemplate { get; protected set; }
    protected BaseRequestBuilder(IRequestAdapter requestAdapter, string urlTemplate, Dictionary`2<string, object> pathParameters);
    protected BaseRequestBuilder(IRequestAdapter requestAdapter, string urlTemplate, string rawUrl);
    [CompilerGeneratedAttribute]
protected Dictionary`2<string, object> get_PathParameters();
    [CompilerGeneratedAttribute]
protected void set_PathParameters(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
protected IRequestAdapter get_RequestAdapter();
    [CompilerGeneratedAttribute]
protected void set_RequestAdapter(IRequestAdapter value);
    [CompilerGeneratedAttribute]
protected string get_UrlTemplate();
    [CompilerGeneratedAttribute]
protected void set_UrlTemplate(string value);
}
public class Microsoft.Kiota.Abstractions.Date : ValueType {
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    public DateTime DateTime { get; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public Date(DateTime dateTime);
    public Date(int year, int month, int day);
    public static Date op_Implicit(DateOnly date);
    public static DateOnly op_Implicit(Date date);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DateTime get_DateTime();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public class Microsoft.Kiota.Abstractions.DefaultQueryParameters : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Kiota.Abstractions.Extensions.IDictionaryExtensions : object {
    [ExtensionAttribute]
public static bool TryAdd(IDictionary`2<TKey, TValue> dictionary, TKey key, TValue value);
    [ExtensionAttribute]
public static TValue AddOrReplace(IDictionary`2<TKey, TValue> dictionary, TKey key, TValue value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Kiota.Abstractions.Extensions.IEnumerableExtensions : object {
    [ExtensionAttribute]
public static List`1<T> AsList(IEnumerable`1<T> e);
    [ExtensionAttribute]
public static T[] AsArray(IEnumerable`1<T> e);
    [CompilerGeneratedAttribute]
internal static T[] <AsArray>g__AllocateOnHeap|1_0(int count);
}
[ExtensionAttribute]
public static class Microsoft.Kiota.Abstractions.Extensions.StringExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string ToFirstCharacterLowerCase(string input);
}
public static class Microsoft.Kiota.Abstractions.Helpers.EnumHelpers : object {
    public static Nullable`1<T> GetEnumValue(string rawValue);
    [NullableContextAttribute("1")]
private static string ToEnumRawName(string value);
    private static ReadOnlySpan`1<char> ToEnumRawName(ReadOnlySpan`1<char> span);
    [NullableContextAttribute("2")]
public static object GetEnumValue(Type type, string rawValue);
    [NullableContextAttribute("1")]
private static bool TryGetFieldValueName(Type type, string rawValue, String& valueName);
    public static string GetEnumStringValue(T value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Kiota.Abstractions.IRequestAdapter {
    public ISerializationWriterFactory SerializationWriterFactory { get; }
    [NullableAttribute("2")]
public string BaseUrl { get; public set; }
    public abstract virtual void EnableBackingStore(IBackingStoreFactory backingStoreFactory);
    public abstract virtual ISerializationWriterFactory get_SerializationWriterFactory();
    public abstract virtual Task`1<ModelType> SendAsync(RequestInformation requestInfo, ParsableFactory`1<ModelType> factory, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMapping, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<ModelType>> SendCollectionAsync(RequestInformation requestInfo, ParsableFactory`1<ModelType> factory, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMapping, CancellationToken cancellationToken);
    public abstract virtual Task`1<ModelType> SendPrimitiveAsync(RequestInformation requestInfo, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMapping, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<ModelType>> SendPrimitiveCollectionAsync(RequestInformation requestInfo, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMapping, CancellationToken cancellationToken);
    public abstract virtual Task SendNoContentAsync(RequestInformation requestInfo, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMapping, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public abstract virtual string get_BaseUrl();
    [NullableContextAttribute("2")]
public abstract virtual void set_BaseUrl(string value);
    public abstract virtual Task`1<T> ConvertToNativeRequestAsync(RequestInformation requestInfo, CancellationToken cancellationToken);
}
public interface Microsoft.Kiota.Abstractions.IRequestOption {
}
[NullableContextAttribute("2")]
public interface Microsoft.Kiota.Abstractions.IResponseHandler {
    public abstract virtual Task`1<ModelType> HandleResponseAsync(NativeResponseType response, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMappings);
}
public enum Microsoft.Kiota.Abstractions.Method : Enum {
    public int value__;
    public static Method GET;
    public static Method POST;
    public static Method PATCH;
    public static Method DELETE;
    public static Method OPTIONS;
    public static Method PUT;
    public static Method HEAD;
    public static Method CONNECT;
    public static Method TRACE;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.MultipartBody : object {
    private Lazy`1<string> _boundary;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IRequestAdapter <RequestAdapter>k__BackingField;
    private Dictionary`2<string, Part> _parts;
    private static char DoubleQuote;
    public string Boundary { get; }
    [NullableAttribute("2")]
public IRequestAdapter RequestAdapter { get; public set; }
    public string get_Boundary();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IRequestAdapter get_RequestAdapter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_RequestAdapter(IRequestAdapter value);
    public void AddOrReplacePart(string partName, string contentType, T partValue, string fileName);
    [NullableContextAttribute("2")]
public T GetPartValue(string partName);
    public bool RemovePart(string partName);
    public sealed virtual IDictionary`2<string, Action`1<IParseNode>> GetFieldDeserializers();
    public sealed virtual void Serialize(ISerializationWriter writer);
    private static void AddNewLine(ISerializationWriter writer);
    private static void WriteSerializedContent(ISerializationWriter writer, ISerializationWriter partWriter);
}
public class Microsoft.Kiota.Abstractions.NativeResponseHandler : object {
    [NullableAttribute("2")]
public object Value;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, ParsableFactory`1<IParsable>> <ErrorMappings>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, ParsableFactory`1<IParsable>> ErrorMappings { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, ParsableFactory`1<IParsable>> get_ErrorMappings();
    [CompilerGeneratedAttribute]
public void set_ErrorMappings(Dictionary`2<string, ParsableFactory`1<IParsable>> value);
    [NullableContextAttribute("2")]
public sealed virtual Task`1<ModelType> HandleResponseAsync(NativeResponseType response, Dictionary`2<string, ParsableFactory`1<IParsable>> errorMappings);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.NativeResponseWrapper : object {
    [ObsoleteAttribute("Use CallAndGetNativeTypeAsync instead")]
[EditorBrowsableAttribute("1")]
public static Task`1<NativeResponseType> CallAndGetNativeType(Func`5<Action`1<QueryParametersType>, Action`1<IDictionary`2<string, string>>, IEnumerable`1<IRequestOption>, IResponseHandler, Task`1<ModelType>> originalCall, Action`1<QueryParametersType> q, Action`1<IDictionary`2<string, string>> h, IEnumerable`1<IRequestOption> o);
    [ObsoleteAttribute("Use CallAndGetNativeTypeAsync instead")]
[EditorBrowsableAttribute("1")]
public static Task`1<NativeResponseType> CallAndGetNativeType(Func`6<RequestBodyType, Action`1<QueryParametersType>, Action`1<IDictionary`2<string, string>>, IEnumerable`1<IRequestOption>, IResponseHandler, Task`1<ModelType>> originalCall, RequestBodyType requestBody, Action`1<QueryParametersType> q, Action`1<IDictionary`2<string, string>> h, IEnumerable`1<IRequestOption> o);
    [AsyncStateMachineAttribute("Microsoft.Kiota.Abstractions.NativeResponseWrapper/<CallAndGetNativeTypeAsync>d__2`3")]
public static Task`1<NativeResponseType> CallAndGetNativeTypeAsync(Func`6<Action`1<QueryParametersType>, Action`1<IDictionary`2<string, string>>, IEnumerable`1<IRequestOption>, IResponseHandler, CancellationToken, Task`1<ModelType>> originalCall, Action`1<QueryParametersType> q, Action`1<IDictionary`2<string, string>> h, IEnumerable`1<IRequestOption> o, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Kiota.Abstractions.NativeResponseWrapper/<CallAndGetNativeTypeAsync>d__3`4")]
public static Task`1<NativeResponseType> CallAndGetNativeTypeAsync(Func`7<RequestBodyType, Action`1<QueryParametersType>, Action`1<IDictionary`2<string, string>>, IEnumerable`1<IRequestOption>, IResponseHandler, CancellationToken, Task`1<ModelType>> originalCall, RequestBodyType requestBody, Action`1<QueryParametersType> q, Action`1<IDictionary`2<string, string>> h, IEnumerable`1<IRequestOption> o, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("384")]
public class Microsoft.Kiota.Abstractions.QueryParameterAttribute : Attribute {
    private string templateName;
    public string TemplateName { get; }
    public QueryParameterAttribute(string templateName);
    public string get_TemplateName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.RequestConfiguration`1 : object {
    [CompilerGeneratedAttribute]
private RequestHeaders <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IRequestOption> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private T <QueryParameters>k__BackingField;
    public RequestHeaders Headers { get; public set; }
    public IList`1<IRequestOption> Options { get; public set; }
    public T QueryParameters { get; public set; }
    [CompilerGeneratedAttribute]
public RequestHeaders get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(RequestHeaders value);
    [CompilerGeneratedAttribute]
public IList`1<IRequestOption> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(IList`1<IRequestOption> value);
    [CompilerGeneratedAttribute]
public T get_QueryParameters();
    [CompilerGeneratedAttribute]
public void set_QueryParameters(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.Kiota.Abstractions.RequestHeaders : object {
    private Dictionary`2<string, HashSet`1<string>> _headers;
    private HashSet`1<string> _singleValueHeaders;
    public ICollection`1<string> Keys { get; }
    public ICollection`1<IEnumerable`1<string>> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IEnumerable`1<string> Item { get; public set; }
    public void Add(string headerName, String[] headerValues);
    public bool TryAdd(string headerName, string headerValue);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<IEnumerable`1<string>> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IEnumerable`1<string> get_Item(string key);
    public sealed virtual void set_Item(string key, IEnumerable`1<string> value);
    public bool Remove(string headerName, string headerValue);
    public void AddAll(RequestHeaders headers);
    public sealed virtual void Clear();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void Add(string key, IEnumerable`1<string> value);
    public sealed virtual bool Remove(string key);
    public sealed virtual bool TryGetValue(string key, IEnumerable`1& value);
    public sealed virtual void Add(KeyValuePair`2<string, IEnumerable`1<string>> item);
    public sealed virtual bool Contains(KeyValuePair`2<string, IEnumerable`1<string>> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<string, IEnumerable`1<string>> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, IEnumerable`1<string>>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.RequestInformation : object {
    internal static string RawUrlKey;
    [NullableAttribute("2")]
private Uri _rawUri;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <UrlTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <PathParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Method <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <QueryParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private RequestHeaders <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <Content>k__BackingField;
    private Dictionary`2<string, IRequestOption> _requestOptions;
    private static string BinaryContentType;
    private static string ContentTypeHeader;
    private static ActivitySource _activitySource;
    public Uri URI { get; public set; }
    [NullableAttribute("2")]
public string UrlTemplate { get; public set; }
    public IDictionary`2<string, object> PathParameters { get; public set; }
    public Method HttpMethod { get; public set; }
    public IDictionary`2<string, object> QueryParameters { get; public set; }
    public RequestHeaders Headers { get; private set; }
    public Stream Content { get; public set; }
    public IEnumerable`1<IRequestOption> RequestOptions { get; }
    public RequestInformation(Method method, string urlTemplate, IDictionary`2<string, object> pathParameters);
    private static RequestInformation();
    public void Configure(Action`1<RequestConfiguration`1<T>> requestConfiguration);
    public void set_URI(Uri value);
    public Uri get_URI();
    private static object GetSanitizedValues(object value);
    private static object GetSanitizedValue(object value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_UrlTemplate();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_UrlTemplate(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_PathParameters();
    [CompilerGeneratedAttribute]
public void set_PathParameters(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Method get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(Method value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_QueryParameters();
    [CompilerGeneratedAttribute]
public void set_QueryParameters(IDictionary`2<string, object> value);
    public void AddQueryParameters(T source);
    private static Object[] ExpandArray(Array collection);
    private static object ReplaceEnumValueByStringRepresentation(object source);
    private static string GetEnumName(T value);
    [CompilerGeneratedAttribute]
public RequestHeaders get_Headers();
    [CompilerGeneratedAttribute]
private void set_Headers(RequestHeaders value);
    public void AddHeaders(RequestHeaders headers);
    [CompilerGeneratedAttribute]
public Stream get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(Stream value);
    public IEnumerable`1<IRequestOption> get_RequestOptions();
    public void AddRequestOptions(IEnumerable`1<IRequestOption> options);
    public void RemoveRequestOptions(IRequestOption[] options);
    [NullableContextAttribute("2")]
public T GetRequestOption();
    public void SetResponseHandler(IResponseHandler responseHandler);
    [ObsoleteAttribute("Use SetStreamContent and pass the content type instead")]
[EditorBrowsableAttribute("1")]
public void SetStreamContent(Stream content);
    public void SetStreamContent(Stream content, string contentType);
    public void SetContentFromParsable(IRequestAdapter requestAdapter, string contentType, IEnumerable`1<T> items);
    public void SetContentFromParsable(IRequestAdapter requestAdapter, string contentType, T item);
    [NullableContextAttribute("2")]
private static void SetRequestType(object result, Activity activity);
    private static ISerializationWriter GetSerializationWriter(IRequestAdapter requestAdapter, string contentType, T item);
    public void SetContentFromScalarCollection(IRequestAdapter requestAdapter, string contentType, IEnumerable`1<T> items);
    public void SetContentFromScalar(IRequestAdapter requestAdapter, string contentType, T item);
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2070:UnrecognizedReflectionPattern")]
internal static string <GetEnumName>g__GetEnumMemberValue|29_0(Type enumType, string name);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.ResponseHandlerOption : object {
    [CompilerGeneratedAttribute]
private IResponseHandler <ResponseHandler>k__BackingField;
    public IResponseHandler ResponseHandler { get; public set; }
    [CompilerGeneratedAttribute]
public IResponseHandler get_ResponseHandler();
    [CompilerGeneratedAttribute]
public void set_ResponseHandler(IResponseHandler value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Kiota.Abstractions.Serialization.IAdditionalDataHolder {
    public IDictionary`2<string, object> AdditionalData { get; public set; }
    public abstract virtual IDictionary`2<string, object> get_AdditionalData();
    public abstract virtual void set_AdditionalData(IDictionary`2<string, object> value);
}
public interface Microsoft.Kiota.Abstractions.Serialization.IAsyncParseNodeFactory {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<IParseNode> GetRootParseNodeAsync(string contentType, Stream content, CancellationToken cancellationToken);
}
public interface Microsoft.Kiota.Abstractions.Serialization.IComposedTypeWrapper {
}
[NullableContextAttribute("1")]
public interface Microsoft.Kiota.Abstractions.Serialization.IParsable {
    public abstract virtual IDictionary`2<string, Action`1<IParseNode>> GetFieldDeserializers();
    public abstract virtual void Serialize(ISerializationWriter writer);
}
[NullableContextAttribute("1")]
public interface Microsoft.Kiota.Abstractions.Serialization.IParseNode {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<IParsable> OnBeforeAssignFieldValues { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<IParsable> OnAfterAssignFieldValues { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual string GetStringValue();
    public abstract virtual IParseNode GetChildNode(string identifier);
    public abstract virtual Nullable`1<bool> GetBoolValue();
    public abstract virtual Nullable`1<byte> GetByteValue();
    public abstract virtual Nullable`1<sbyte> GetSbyteValue();
    public abstract virtual Nullable`1<int> GetIntValue();
    public abstract virtual Nullable`1<float> GetFloatValue();
    public abstract virtual Nullable`1<long> GetLongValue();
    public abstract virtual Nullable`1<double> GetDoubleValue();
    public abstract virtual Nullable`1<decimal> GetDecimalValue();
    public abstract virtual Nullable`1<Guid> GetGuidValue();
    public abstract virtual Nullable`1<DateTimeOffset> GetDateTimeOffsetValue();
    public abstract virtual Nullable`1<TimeSpan> GetTimeSpanValue();
    public abstract virtual Nullable`1<Date> GetDateValue();
    public abstract virtual Nullable`1<Time> GetTimeValue();
    public abstract virtual IEnumerable`1<T> GetCollectionOfPrimitiveValues();
    [NullableContextAttribute("0")]
public abstract virtual IEnumerable`1<Nullable`1<T>> GetCollectionOfEnumValues();
    public abstract virtual IEnumerable`1<T> GetCollectionOfObjectValues(ParsableFactory`1<T> factory);
    [NullableContextAttribute("0")]
public abstract virtual Nullable`1<T> GetEnumValue();
    public abstract virtual T GetObjectValue(ParsableFactory`1<T> factory);
    public abstract virtual Action`1<IParsable> get_OnBeforeAssignFieldValues();
    public abstract virtual void set_OnBeforeAssignFieldValues(Action`1<IParsable> value);
    public abstract virtual Action`1<IParsable> get_OnAfterAssignFieldValues();
    public abstract virtual void set_OnAfterAssignFieldValues(Action`1<IParsable> value);
    [NullableContextAttribute("2")]
public abstract virtual Byte[] GetByteArrayValue();
}
[NullableContextAttribute("1")]
public interface Microsoft.Kiota.Abstractions.Serialization.IParseNodeFactory {
    public string ValidContentType { get; }
    public abstract virtual string get_ValidContentType();
    [ObsoleteAttribute("Use GetRootParseNodeAsync instead")]
[EditorBrowsableAttribute("1")]
public abstract virtual IParseNode GetRootParseNode(string contentType, Stream content);
}
[NullableContextAttribute("2")]
public interface Microsoft.Kiota.Abstractions.Serialization.ISerializationWriter {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<IParsable> OnBeforeObjectSerialization { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<IParsable> OnAfterObjectSerialization { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<IParsable, ISerializationWriter> OnStartObjectSerialization { get; public set; }
    public abstract virtual void WriteStringValue(string key, string value);
    public abstract virtual void WriteBoolValue(string key, Nullable`1<bool> value);
    public abstract virtual void WriteByteValue(string key, Nullable`1<byte> value);
    public abstract virtual void WriteSbyteValue(string key, Nullable`1<sbyte> value);
    public abstract virtual void WriteIntValue(string key, Nullable`1<int> value);
    public abstract virtual void WriteFloatValue(string key, Nullable`1<float> value);
    public abstract virtual void WriteLongValue(string key, Nullable`1<long> value);
    public abstract virtual void WriteDoubleValue(string key, Nullable`1<double> value);
    public abstract virtual void WriteDecimalValue(string key, Nullable`1<decimal> value);
    public abstract virtual void WriteGuidValue(string key, Nullable`1<Guid> value);
    public abstract virtual void WriteDateTimeOffsetValue(string key, Nullable`1<DateTimeOffset> value);
    public abstract virtual void WriteTimeSpanValue(string key, Nullable`1<TimeSpan> value);
    public abstract virtual void WriteDateValue(string key, Nullable`1<Date> value);
    public abstract virtual void WriteTimeValue(string key, Nullable`1<Time> value);
    public abstract virtual void WriteCollectionOfPrimitiveValues(string key, IEnumerable`1<T> values);
    [NullableContextAttribute("0")]
public abstract virtual void WriteCollectionOfObjectValues(string key, IEnumerable`1<T> values);
    [NullableContextAttribute("0")]
public abstract virtual void WriteCollectionOfEnumValues(string key, IEnumerable`1<Nullable`1<T>> values);
    public abstract virtual void WriteByteArrayValue(string key, Byte[] value);
    public abstract virtual void WriteObjectValue(string key, T value, IParsable[] additionalValuesToMerge);
    [NullableContextAttribute("0")]
public abstract virtual void WriteEnumValue(string key, Nullable`1<T> value);
    public abstract virtual void WriteNullValue(string key);
    [NullableContextAttribute("1")]
public abstract virtual void WriteAdditionalData(IDictionary`2<string, object> value);
    [NullableContextAttribute("1")]
public abstract virtual Stream GetSerializedContent();
    public abstract virtual Action`1<IParsable> get_OnBeforeObjectSerialization();
    public abstract virtual void set_OnBeforeObjectSerialization(Action`1<IParsable> value);
    public abstract virtual Action`1<IParsable> get_OnAfterObjectSerialization();
    public abstract virtual void set_OnAfterObjectSerialization(Action`1<IParsable> value);
    public abstract virtual Action`2<IParsable, ISerializationWriter> get_OnStartObjectSerialization();
    public abstract virtual void set_OnStartObjectSerialization(Action`2<IParsable, ISerializationWriter> value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Kiota.Abstractions.Serialization.ISerializationWriterFactory {
    public string ValidContentType { get; }
    public abstract virtual string get_ValidContentType();
    public abstract virtual ISerializationWriter GetSerializationWriter(string contentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Kiota.Abstractions.Serialization.KiotaJsonSerializer : object {
    private static string _jsonContentType;
    [ObsoleteAttribute("Use DeserializeAsync instead")]
[EditorBrowsableAttribute("1")]
public static T Deserialize(string serializedRepresentation, ParsableFactory`1<T> parsableFactory);
    [ObsoleteAttribute("Use DeserializeAsync instead")]
[EditorBrowsableAttribute("1")]
public static T Deserialize(Stream stream, ParsableFactory`1<T> parsableFactory);
    [ObsoleteAttribute("Use DeserializeAsync instead")]
[EditorBrowsableAttribute("1")]
public static T Deserialize(Stream stream);
    [ObsoleteAttribute("Use DeserializeAsync instead")]
[EditorBrowsableAttribute("1")]
public static T Deserialize(string serializedRepresentation);
    [ObsoleteAttribute("Use DeserializeCollectionAsync instead")]
[EditorBrowsableAttribute("1")]
public static IEnumerable`1<T> DeserializeCollection(Stream stream, ParsableFactory`1<T> parsableFactory);
    [ObsoleteAttribute("Use DeserializeCollectionAsync instead")]
[EditorBrowsableAttribute("1")]
public static IEnumerable`1<T> DeserializeCollection(string serializedRepresentation, ParsableFactory`1<T> parsableFactory);
    [ObsoleteAttribute("Use DeserializeCollectionAsync instead")]
[EditorBrowsableAttribute("1")]
public static IEnumerable`1<T> DeserializeCollection(Stream stream);
    [ObsoleteAttribute("Use DeserializeCollectionAsync instead")]
[EditorBrowsableAttribute("1")]
public static IEnumerable`1<T> DeserializeCollection(string serializedRepresentation);
    public static Task`1<T> DeserializeAsync(string serializedRepresentation, ParsableFactory`1<T> parsableFactory, CancellationToken cancellationToken);
    public static Task`1<T> DeserializeAsync(Stream stream, ParsableFactory`1<T> parsableFactory, CancellationToken cancellationToken);
    public static Task`1<T> DeserializeAsync(Stream stream, CancellationToken cancellationToken);
    public static Task`1<T> DeserializeAsync(string serializedRepresentation, CancellationToken cancellationToken);
    public static Task`1<IEnumerable`1<T>> DeserializeCollectionAsync(Stream stream, ParsableFactory`1<T> parsableFactory, CancellationToken cancellationToken);
    public static Task`1<IEnumerable`1<T>> DeserializeCollectionAsync(string serializedRepresentation, ParsableFactory`1<T> parsableFactory, CancellationToken cancellationToken);
    public static Task`1<IEnumerable`1<T>> DeserializeCollectionAsync(Stream stream, CancellationToken cancellationToken);
    public static Task`1<IEnumerable`1<T>> DeserializeCollectionAsync(string serializedRepresentation, CancellationToken cancellationToken);
    public static Stream SerializeAsStream(T value, bool serializeOnlyChangedValues);
    [ObsoleteAttribute("This method is obsolete, use SerializeAsStringAsync instead")]
[EditorBrowsableAttribute("1")]
public static string SerializeAsString(T value);
    [ObsoleteAttribute("This method is obsolete, use SerializeAsStringAsync with optional CancellationToken parameter instead")]
[EditorBrowsableAttribute("1")]
public static Task`1<string> SerializeAsStringAsync(T value, CancellationToken cancellationToken);
    public static Task`1<string> SerializeAsStringAsync(T value, bool serializeOnlyChangedValues, CancellationToken cancellationToken);
    public static Stream SerializeAsStream(IEnumerable`1<T> value, bool serializeOnlyChangedValues);
    [ObsoleteAttribute("This method is obsolete, use SerializeAsStringAsync instead")]
[EditorBrowsableAttribute("1")]
public static string SerializeAsString(IEnumerable`1<T> value);
    [ObsoleteAttribute("This method is obsolete, use SerializeAsStringAsync with optional CancellationToken parameter instead")]
[EditorBrowsableAttribute("1")]
public static Task`1<string> SerializeAsStringAsync(IEnumerable`1<T> value, CancellationToken cancellationToken);
    public static Task`1<string> SerializeAsStringAsync(IEnumerable`1<T> value, bool serializeOnlyChangedValues, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Kiota.Abstractions.Serialization.KiotaSerializer : object {
    [ObsoleteAttribute("Use DeserializeAsync instead")]
[EditorBrowsableAttribute("1")]
public static T Deserialize(string contentType, string serializedRepresentation, ParsableFactory`1<T> parsableFactory);
    [ObsoleteAttribute("Use GetStreamFromStringAsync instead")]
private static Stream GetStreamFromString(string source);
    [ObsoleteAttribute("Use DeserializeAsync instead")]
[EditorBrowsableAttribute("1")]
public static T Deserialize(string contentType, Stream stream, ParsableFactory`1<T> parsableFactory);
    [ObsoleteAttribute("Use DeserializeAsync instead")]
[EditorBrowsableAttribute("1")]
public static T Deserialize(string contentType, Stream stream);
    private static ParsableFactory`1<T> GetFactoryFromType();
    [ObsoleteAttribute("Use DeserializeAsync instead")]
[EditorBrowsableAttribute("1")]
public static T Deserialize(string contentType, string serializedRepresentation);
    [ObsoleteAttribute("Use DeserializeCollectionAsync instead")]
[EditorBrowsableAttribute("1")]
public static IEnumerable`1<T> DeserializeCollection(string contentType, Stream stream, ParsableFactory`1<T> parsableFactory);
    [ObsoleteAttribute("Use DeserializeCollectionAsync instead")]
[EditorBrowsableAttribute("1")]
public static IEnumerable`1<T> DeserializeCollection(string contentType, string serializedRepresentation, ParsableFactory`1<T> parsableFactory);
    [ObsoleteAttribute("Use DeserializeCollectionAsync instead")]
[EditorBrowsableAttribute("1")]
public static IEnumerable`1<T> DeserializeCollection(string contentType, Stream stream);
    [ObsoleteAttribute("Use DeserializeCollectionAsync instead")]
[EditorBrowsableAttribute("1")]
public static IEnumerable`1<T> DeserializeCollection(string contentType, string serializedRepresentation);
    [AsyncStateMachineAttribute("Microsoft.Kiota.Abstractions.Serialization.KiotaSerializer/<DeserializeAsync>d__10`1")]
public static Task`1<T> DeserializeAsync(string contentType, string serializedRepresentation, ParsableFactory`1<T> parsableFactory, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Kiota.Abstractions.Serialization.KiotaSerializer/<GetStreamFromStringAsync>d__11")]
private static Task`1<Stream> GetStreamFromStringAsync(string source);
    [AsyncStateMachineAttribute("Microsoft.Kiota.Abstractions.Serialization.KiotaSerializer/<DeserializeAsync>d__12`1")]
public static Task`1<T> DeserializeAsync(string contentType, Stream stream, ParsableFactory`1<T> parsableFactory, CancellationToken cancellationToken);
    public static Task`1<T> DeserializeAsync(string contentType, Stream stream, CancellationToken cancellationToken);
    public static Task`1<T> DeserializeAsync(string contentType, string serializedRepresentation, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Kiota.Abstractions.Serialization.KiotaSerializer/<DeserializeCollectionAsync>d__15`1")]
public static Task`1<IEnumerable`1<T>> DeserializeCollectionAsync(string contentType, Stream stream, ParsableFactory`1<T> parsableFactory, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Kiota.Abstractions.Serialization.KiotaSerializer/<DeserializeCollectionAsync>d__16`1")]
public static Task`1<IEnumerable`1<T>> DeserializeCollectionAsync(string contentType, string serializedRepresentation, ParsableFactory`1<T> parsableFactory, CancellationToken cancellationToken);
    public static Task`1<IEnumerable`1<T>> DeserializeCollectionAsync(string contentType, Stream stream, CancellationToken cancellationToken);
    public static Task`1<IEnumerable`1<T>> DeserializeCollectionAsync(string contentType, string serializedRepresentation, CancellationToken cancellationToken);
    public static Stream SerializeAsStream(string contentType, T value, bool serializeOnlyChangedValues);
    [ObsoleteAttribute("This method is obsolete, use the async method instead")]
[EditorBrowsableAttribute("1")]
public static string SerializeAsString(string contentType, T value);
    [EditorBrowsableAttribute("1")]
public static Task`1<string> SerializeAsStringAsync(string contentType, T value, CancellationToken cancellationToken);
    public static Task`1<string> SerializeAsStringAsync(string contentType, T value, bool serializeOnlyChangedValues, CancellationToken cancellationToken);
    public static Stream SerializeAsStream(string contentType, IEnumerable`1<T> value, bool serializeOnlyChangedValues);
    [ObsoleteAttribute("This method is obsolete, use the async method instead")]
[EditorBrowsableAttribute("1")]
public static string SerializeAsString(string contentType, IEnumerable`1<T> value);
    public static Task`1<string> SerializeAsStringAsync(string contentType, IEnumerable`1<T> value, bool serializeOnlyChangedValues, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public static Task`1<string> SerializeAsStringAsync(string contentType, IEnumerable`1<T> value, CancellationToken cancellationToken);
    [ObsoleteAttribute("This method is obsolete, use the async method instead")]
private static string GetStringFromStream(Stream stream);
    [AsyncStateMachineAttribute("Microsoft.Kiota.Abstractions.Serialization.KiotaSerializer/<GetStringFromStreamAsync>d__28")]
private static Task`1<string> GetStringFromStreamAsync(Stream stream, CancellationToken cancellationToken);
    private static ISerializationWriter GetSerializationWriter(string contentType, object value, bool serializeOnlyChangedValues);
}
public class Microsoft.Kiota.Abstractions.Serialization.ParsableFactory`1 : MulticastDelegate {
    public ParsableFactory`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual T Invoke(IParseNode node);
    public virtual IAsyncResult BeginInvoke(IParseNode node, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.Serialization.ParseNodeFactoryRegistry : object {
    public static ParseNodeFactoryRegistry DefaultInstance;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, IParseNodeFactory> <ContentTypeAssociatedFactories>k__BackingField;
    internal static Regex contentTypeVendorCleanupRegex;
    public string ValidContentType { get; }
    public ConcurrentDictionary`2<string, IParseNodeFactory> ContentTypeAssociatedFactories { get; public set; }
    private static ParseNodeFactoryRegistry();
    public sealed virtual string get_ValidContentType();
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, IParseNodeFactory> get_ContentTypeAssociatedFactories();
    [CompilerGeneratedAttribute]
public void set_ContentTypeAssociatedFactories(ConcurrentDictionary`2<string, IParseNodeFactory> value);
    [ObsoleteAttribute("Use GetRootParseNodeAsync instead")]
[EditorBrowsableAttribute("1")]
public sealed virtual IParseNode GetRootParseNode(string contentType, Stream content);
    [AsyncStateMachineAttribute("Microsoft.Kiota.Abstractions.Serialization.ParseNodeFactoryRegistry/<GetRootParseNodeAsync>d__9")]
public sealed virtual Task`1<IParseNode> GetRootParseNodeAsync(string contentType, Stream content, CancellationToken cancellationToken);
    public ValueTuple`2<T, string> GetFactory(string contentType);
}
public static class Microsoft.Kiota.Abstractions.Serialization.ParseNodeHelper : object {
    [NullableContextAttribute("1")]
public static IDictionary`2<string, Action`1<IParseNode>> MergeDeserializersForIntersectionWrapper(IParsable[] targets);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Kiota.Abstractions.Serialization.ParseNodeProxyFactory : object {
    private IParseNodeFactory _concrete;
    private Action`1<IParsable> _onBefore;
    private Action`1<IParsable> _onAfter;
    public string ValidContentType { get; }
    protected ParseNodeProxyFactory(IParseNodeFactory concrete, Action`1<IParsable> onBefore, Action`1<IParsable> onAfter);
    public sealed virtual string get_ValidContentType();
    [ObsoleteAttribute("Use GetRootParseNodeAsync instead")]
[EditorBrowsableAttribute("1")]
public sealed virtual IParseNode GetRootParseNode(string contentType, Stream content);
    private void WireParseNode(IParseNode node);
    [AsyncStateMachineAttribute("Microsoft.Kiota.Abstractions.Serialization.ParseNodeProxyFactory/<GetRootParseNodeAsync>d__8")]
public sealed virtual Task`1<IParseNode> GetRootParseNodeAsync(string contentType, Stream content, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.Serialization.SerializationWriterFactoryRegistry : object {
    public static SerializationWriterFactoryRegistry DefaultInstance;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ISerializationWriterFactory> <ContentTypeAssociatedFactories>k__BackingField;
    public string ValidContentType { get; }
    public ConcurrentDictionary`2<string, ISerializationWriterFactory> ContentTypeAssociatedFactories { get; public set; }
    private static SerializationWriterFactoryRegistry();
    public sealed virtual string get_ValidContentType();
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ISerializationWriterFactory> get_ContentTypeAssociatedFactories();
    [CompilerGeneratedAttribute]
public void set_ContentTypeAssociatedFactories(ConcurrentDictionary`2<string, ISerializationWriterFactory> value);
    public sealed virtual ISerializationWriter GetSerializationWriter(string contentType);
    public ISerializationWriter GetSerializationWriter(string contentType, bool serializeOnlyChangedValues);
    private ISerializationWriterFactory GetSerializationWriterFactory(string contentType, String& actualContentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.Serialization.SerializationWriterProxyFactory : object {
    protected ISerializationWriterFactory ProxiedSerializationWriterFactory;
    private Action`1<IParsable> _onBefore;
    private Action`1<IParsable> _onAfter;
    private Action`2<IParsable, ISerializationWriter> _onStartSerialization;
    public string ValidContentType { get; }
    public SerializationWriterProxyFactory(ISerializationWriterFactory factoryToWrap, Action`1<IParsable> onBeforeSerialization, Action`1<IParsable> onAfterSerialization, Action`2<IParsable, ISerializationWriter> onStartSerialization);
    public sealed virtual string get_ValidContentType();
    public sealed virtual ISerializationWriter GetSerializationWriter(string contentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.Serialization.UntypedArray : UntypedNode {
    private IEnumerable`1<UntypedNode> _value;
    public UntypedArray(IEnumerable`1<UntypedNode> value);
    public IEnumerable`1<UntypedNode> GetValue();
}
public class Microsoft.Kiota.Abstractions.Serialization.UntypedBoolean : UntypedNode {
    private bool _value;
    public UntypedBoolean(bool value);
    public bool GetValue();
}
public class Microsoft.Kiota.Abstractions.Serialization.UntypedDecimal : UntypedNode {
    private decimal _value;
    public UntypedDecimal(decimal value);
    public decimal GetValue();
}
public class Microsoft.Kiota.Abstractions.Serialization.UntypedDouble : UntypedNode {
    private double _value;
    public UntypedDouble(double value);
    public double GetValue();
}
public class Microsoft.Kiota.Abstractions.Serialization.UntypedFloat : UntypedNode {
    private float _value;
    public UntypedFloat(float value);
    public float GetValue();
}
public class Microsoft.Kiota.Abstractions.Serialization.UntypedInteger : UntypedNode {
    private int _value;
    public UntypedInteger(int value);
    public int GetValue();
}
public class Microsoft.Kiota.Abstractions.Serialization.UntypedLong : UntypedNode {
    private long _value;
    public UntypedLong(long value);
    public long GetValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.Serialization.UntypedNode : object {
    private static IDictionary`2<string, Action`1<IParseNode>> _fieldDeserializers;
    private static UntypedNode();
    public virtual IDictionary`2<string, Action`1<IParseNode>> GetFieldDeserializers();
    public virtual void Serialize(ISerializationWriter writer);
    public static UntypedNode CreateFromDiscriminatorValue(IParseNode parseNode);
    [NullableContextAttribute("2")]
public object GetValue();
}
public class Microsoft.Kiota.Abstractions.Serialization.UntypedNull : UntypedNode {
    [NullableContextAttribute("2")]
public object GetValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.Serialization.UntypedObject : UntypedNode {
    private IDictionary`2<string, UntypedNode> _properties;
    public UntypedObject(IDictionary`2<string, UntypedNode> properties);
    public IDictionary`2<string, UntypedNode> GetValue();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.Serialization.UntypedString : UntypedNode {
    private string _value;
    public UntypedString(string value);
    public string GetValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.Store.BackingStoreFactorySingleton : object {
    [CompilerGeneratedAttribute]
private static IBackingStoreFactory <Instance>k__BackingField;
    public static IBackingStoreFactory Instance { get; public set; }
    private static BackingStoreFactorySingleton();
    [CompilerGeneratedAttribute]
public static IBackingStoreFactory get_Instance();
    [CompilerGeneratedAttribute]
public static void set_Instance(IBackingStoreFactory value);
}
public class Microsoft.Kiota.Abstractions.Store.BackingStoreParseNodeFactory : ParseNodeProxyFactory {
    [NullableContextAttribute("1")]
public BackingStoreParseNodeFactory(IParseNodeFactory concrete);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.Store.BackingStoreSerializationWriterProxyFactory : SerializationWriterProxyFactory {
    public BackingStoreSerializationWriterProxyFactory(ISerializationWriterFactory concrete);
    public ISerializationWriter GetSerializationWriter(string contentType, bool serializeOnlyChangedValues);
}
[NullableContextAttribute("1")]
public interface Microsoft.Kiota.Abstractions.Store.IBackedModel {
    public IBackingStore BackingStore { get; }
    public abstract virtual IBackingStore get_BackingStore();
}
[NullableContextAttribute("1")]
public interface Microsoft.Kiota.Abstractions.Store.IBackingStore {
    public bool InitializationCompleted { get; public set; }
    public bool ReturnOnlyChangedValues { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual T Get(string key);
    [NullableContextAttribute("2")]
public abstract virtual void Set(string key, T value);
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, object>> Enumerate();
    public abstract virtual IEnumerable`1<string> EnumerateKeysForValuesChangedToNull();
    public abstract virtual string Subscribe(Action`3<string, object, object> callback);
    public abstract virtual void Subscribe(Action`3<string, object, object> callback, string subscriptionId);
    public abstract virtual void Unsubscribe(string subscriptionId);
    public abstract virtual void Clear();
    public abstract virtual bool get_InitializationCompleted();
    public abstract virtual void set_InitializationCompleted(bool value);
    public abstract virtual bool get_ReturnOnlyChangedValues();
    public abstract virtual void set_ReturnOnlyChangedValues(bool value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Kiota.Abstractions.Store.IBackingStoreFactory {
    public abstract virtual IBackingStore CreateBackingStore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Kiota.Abstractions.Store.InMemoryBackingStore : object {
    private bool isInitializationComplete;
    private bool _returnOnlyChangedValues;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, Tuple`2<bool, object>> store;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, Action`3<string, object, object>> subscriptions;
    public bool ReturnOnlyChangedValues { get; public set; }
    public bool InitializationCompleted { get; public set; }
    public sealed virtual bool get_ReturnOnlyChangedValues();
    public sealed virtual void set_ReturnOnlyChangedValues(bool value);
    [NullableContextAttribute("2")]
public sealed virtual T Get(string key);
    [NullableContextAttribute("2")]
public sealed virtual void Set(string key, T value);
    public sealed virtual IEnumerable`1<KeyValuePair`2<string, object>> Enumerate();
    [IteratorStateMachineAttribute("Microsoft.Kiota.Abstractions.Store.InMemoryBackingStore/<EnumerateKeysForValuesChangedToNull>d__10")]
public sealed virtual IEnumerable`1<string> EnumerateKeysForValuesChangedToNull();
    public sealed virtual string Subscribe(Action`3<string, object, object> callback);
    public sealed virtual void Subscribe(Action`3<string, object, object> callback, string subscriptionId);
    public sealed virtual void Unsubscribe(string subscriptionId);
    public sealed virtual void Clear();
    public sealed virtual bool get_InitializationCompleted();
    public sealed virtual void set_InitializationCompleted(bool value);
    private void EnsureCollectionPropertyIsConsistent(string key, object storeItem);
    private void ForwardReturnOnlyChangedValuesToNestedInstances();
}
public class Microsoft.Kiota.Abstractions.Store.InMemoryBackingStoreFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual IBackingStore CreateBackingStore();
}
public class Microsoft.Kiota.Abstractions.Time : ValueType {
    [CompilerGeneratedAttribute]
private DateTime <DateTime>k__BackingField;
    public DateTime DateTime { get; }
    public int Hour { get; }
    public int Minute { get; }
    public int Second { get; }
    public Time(int hour, int minute, int second);
    public Time(DateTime dateTime);
    public static Time op_Implicit(TimeOnly time);
    public static TimeOnly op_Implicit(Time time);
    public sealed virtual bool Equals(Time other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public virtual int GetHashCode();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public DateTime get_DateTime();
    public int get_Hour();
    public int get_Minute();
    public int get_Second();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Kiota.Serialization.ParsableExtensions : object {
    [ExtensionAttribute]
public static Stream SerializeAsStream(T value, string contentType, bool serializeOnlyChangedValues);
    [AsyncStateMachineAttribute("Microsoft.Kiota.Serialization.ParsableExtensions/<SerializeAsStringAsync>d__1`1")]
[ExtensionAttribute]
public static Task`1<string> SerializeAsStringAsync(T value, string contentType, bool serializeOnlyChangedValues, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Stream SerializeAsStream(IEnumerable`1<T> value, string contentType, bool serializeOnlyChangedValues);
    [AsyncStateMachineAttribute("Microsoft.Kiota.Serialization.ParsableExtensions/<SerializeAsStringAsync>d__3`1")]
[ExtensionAttribute]
public static Task`1<string> SerializeAsStringAsync(IEnumerable`1<T> value, string contentType, bool serializeOnlyChangedValues, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Stream SerializeAsStream(T[] value, string contentType, bool serializeOnlyChangedValues);
    [AsyncStateMachineAttribute("Microsoft.Kiota.Serialization.ParsableExtensions/<SerializeAsStringAsync>d__5`1")]
[ExtensionAttribute]
public static Task`1<string> SerializeAsStringAsync(T[] value, string contentType, bool serializeOnlyChangedValues, CancellationToken cancellationToken);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
