[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class CimCmdletStrings : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CimOperationCompleted { get; }
    internal static string CimOperationNameCreateInstance { get; }
    internal static string CimOperationNameDeleteInstance { get; }
    internal static string CimOperationNameEnumerateAssociatedInstances { get; }
    internal static string CimOperationNameEnumerateClasses { get; }
    internal static string CimOperationNameEnumerateInstances { get; }
    internal static string CimOperationNameGetClass { get; }
    internal static string CimOperationNameGetInstance { get; }
    internal static string CimOperationNameInvokeMethod { get; }
    internal static string CimOperationNameModifyInstance { get; }
    internal static string CimOperationNameQueryInstances { get; }
    internal static string CimOperationNameSubscribeIndication { get; }
    internal static string CimOperationStart { get; }
    internal static string ConflictParameterWasSet { get; }
    internal static string CouldNotFindCimsessionObject { get; }
    internal static string CouldNotFindPropertyFromGivenClass { get; }
    internal static string CouldNotModifyReadonlyProperty { get; }
    internal static string DefaultStatusDescription { get; }
    internal static string DidNotResolveFile { get; }
    internal static string InvalidAuthenticationTypeWithNullCredential { get; }
    internal static string InvalidMethod { get; }
    internal static string InvalidMethodParameter { get; }
    internal static string InvalidOperation { get; }
    internal static string InvalidParameterValue { get; }
    internal static string MultipleFilesNotSupported { get; }
    internal static string NullArgument { get; }
    internal static string OperationInProgress { get; }
    internal static string ReadWriteFileNotFileSystemProvider { get; }
    internal static string UnableToAddPropertyToInstance { get; }
    internal static string UnableToResolveParameterSetName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CimOperationCompleted();
    internal static string get_CimOperationNameCreateInstance();
    internal static string get_CimOperationNameDeleteInstance();
    internal static string get_CimOperationNameEnumerateAssociatedInstances();
    internal static string get_CimOperationNameEnumerateClasses();
    internal static string get_CimOperationNameEnumerateInstances();
    internal static string get_CimOperationNameGetClass();
    internal static string get_CimOperationNameGetInstance();
    internal static string get_CimOperationNameInvokeMethod();
    internal static string get_CimOperationNameModifyInstance();
    internal static string get_CimOperationNameQueryInstances();
    internal static string get_CimOperationNameSubscribeIndication();
    internal static string get_CimOperationStart();
    internal static string get_ConflictParameterWasSet();
    internal static string get_CouldNotFindCimsessionObject();
    internal static string get_CouldNotFindPropertyFromGivenClass();
    internal static string get_CouldNotModifyReadonlyProperty();
    internal static string get_DefaultStatusDescription();
    internal static string get_DidNotResolveFile();
    internal static string get_InvalidAuthenticationTypeWithNullCredential();
    internal static string get_InvalidMethod();
    internal static string get_InvalidMethodParameter();
    internal static string get_InvalidOperation();
    internal static string get_InvalidParameterValue();
    internal static string get_MultipleFilesNotSupported();
    internal static string get_NullArgument();
    internal static string get_OperationInProgress();
    internal static string get_ReadWriteFileNotFileSystemProvider();
    internal static string get_UnableToAddPropertyToInstance();
    internal static string get_UnableToResolveParameterSetName();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.AsyncResultCompleteEventArgs : AsyncResultEventArgsBase {
    public AsyncResultCompleteEventArgs(CimSession session, IObservable`1<object> observable);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.AsyncResultErrorEventArgs : AsyncResultEventArgsBase {
    public Exception error;
    public AsyncResultErrorEventArgs(CimSession session, IObservable`1<object> observable, Exception error);
    public AsyncResultErrorEventArgs(CimSession session, IObservable`1<object> observable, Exception error, CimResultContext cimResultContext);
}
internal abstract class Microsoft.Management.Infrastructure.CimCmdlets.AsyncResultEventArgsBase : EventArgs {
    public CimSession session;
    public IObservable`1<object> observable;
    public AsyncResultType resultType;
    public CimResultContext context;
    protected AsyncResultEventArgsBase(CimSession session, IObservable`1<object> observable, AsyncResultType resultType);
    protected AsyncResultEventArgsBase(CimSession session, IObservable`1<object> observable, AsyncResultType resultType, CimResultContext cimResultContext);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.AsyncResultObjectEventArgs : AsyncResultEventArgsBase {
    public object resultObject;
    public AsyncResultObjectEventArgs(CimSession session, IObservable`1<object> observable, object resultObject);
}
public enum Microsoft.Management.Infrastructure.CimCmdlets.AsyncResultType : Enum {
    public int value__;
    public static AsyncResultType Result;
    public static AsyncResultType Exception;
    public static AsyncResultType Completion;
}
internal abstract class Microsoft.Management.Infrastructure.CimCmdlets.CimAsyncOperation : object {
    protected ManualResetEventSlim ackedEvent;
    internal static string ComputerNameArgument;
    internal static string CimSessionArgument;
    protected bool Disposed { get; }
    protected void NewCmdletActionHandler(object cimSession, CmdletActionEventArgs actionArgs);
    protected void OperationCreatedHandler(object cimSession, OperationEventArgs actionArgs);
    protected void OperationDeletedHandler(object cimSession, OperationEventArgs actionArgs);
    public void ProcessActions(CmdletOperationBase cmdletOperation);
    public void ProcessRemainActions(CmdletOperationBase cmdletOperation);
    protected bool GetActionAndRemove(CimBaseAction& action);
    protected void AddCimSessionProxy(CimSessionProxy sessionproxy);
    protected bool IsActive();
    protected CimSessionProxy CreateCimSessionProxy(CimSessionProxy originalProxy);
    protected CimSessionProxy CreateCimSessionProxy(CimSessionProxy originalProxy, bool passThru);
    protected CimSessionProxy CreateCimSessionProxy(CimSession session);
    protected CimSessionProxy CreateCimSessionProxy(CimSession session, bool passThru);
    protected CimSessionProxy CreateCimSessionProxy(string computerName);
    protected CimSessionProxy CreateCimSessionProxy(string computerName, CimInstance cimInstance);
    protected CimSessionProxy CreateCimSessionProxy(string computerName, CimInstance cimInstance, bool passThru);
    protected void SubscribeEventAndAddProxytoCache(CimSessionProxy proxy);
    protected virtual void SubscribeToCimSessionProxyEvent(CimSessionProxy proxy);
    protected object GetBaseObject(object value);
    protected object GetReferenceOrReferenceArrayObject(object value, CimType& referenceType);
    protected bool get_Disposed();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal abstract class Microsoft.Management.Infrastructure.CimCmdlets.CimBaseAction : object {
    protected XOperationContextBase Context { get; protected set; }
    public virtual void Execute(CmdletOperationBase cmdlet);
    [CompilerGeneratedAttribute]
protected XOperationContextBase get_Context();
    [CompilerGeneratedAttribute]
protected void set_Context(XOperationContextBase value);
}
public class Microsoft.Management.Infrastructure.CimCmdlets.CimBaseCommand : Cmdlet {
    internal static string AliasCN;
    internal static string AliasServerName;
    internal static string AliasOT;
    internal static string SessionSetName;
    internal static string ComputerSetName;
    internal static string ClassNameComputerSet;
    internal static string ResourceUriComputerSet;
    internal static string CimInstanceComputerSet;
    internal static string QueryComputerSet;
    internal static string ClassNameSessionSet;
    internal static string ResourceUriSessionSet;
    internal static string CimInstanceSessionSet;
    internal static string QuerySessionSet;
    internal static string CimClassComputerSet;
    internal static string CimClassSessionSet;
    internal static string ComputerNameSet;
    internal static string SessionIdSet;
    internal static string InstanceIdSet;
    internal static string NameSet;
    internal static string CimSessionSet;
    internal static string WSManParameterSet;
    internal static string DcomParameterSet;
    internal static string ProtocolNameParameterSet;
    internal static string QueryExpressionSessionSet;
    internal static string QueryExpressionComputerSet;
    internal static string CredentialParameterSet;
    internal static string CertificateParameterSet;
    internal static string AliasCimInstance;
    internal bool AtBeginProcess { get; internal set; }
    internal CimAsyncOperation AsyncOperation { get; internal set; }
    internal string ParameterSetName { get; }
    internal CmdletOperationBase CmdletOperation { get; internal set; }
    internal CimBaseCommand(Dictionary`2<string, HashSet`1<ParameterDefinitionEntry>> parameters, Dictionary`2<string, ParameterSetEntry> sets);
    internal void CheckParameterSet();
    internal void SetParameter(object value, string parameterName);
    protected virtual void StopProcessing();
    public sealed virtual void Dispose();
    protected void Dispose(bool disposing);
    protected virtual void DisposeInternal();
    internal bool get_AtBeginProcess();
    internal void set_AtBeginProcess(bool value);
    internal CimAsyncOperation get_AsyncOperation();
    internal void set_AsyncOperation(CimAsyncOperation value);
    [CompilerGeneratedAttribute]
internal string get_ParameterSetName();
    [CompilerGeneratedAttribute]
internal virtual CmdletOperationBase get_CmdletOperation();
    [CompilerGeneratedAttribute]
internal virtual void set_CmdletOperation(CmdletOperationBase value);
    [DoesNotReturnAttribute]
internal void ThrowTerminatingError(Exception exception, string operation);
    internal void ThrowInvalidAuthenticationTypeError(string operationName, string parameterName, PasswordAuthenticationMechanism authentication);
    internal void ThrowConflictParameterWasSet(string operationName, string parameterName, string conflictParameterName);
    internal void ThrowInvalidProperty(IEnumerable`1<string> propertiesList, string className, string parameterName, string operationName, IDictionary actualValue);
    internal CimCredential CreateCimCredentials(PSCredential psCredentials, PasswordAuthenticationMechanism passwordAuthentication, string operationName, string parameterName);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimGetAssociatedInstance : CimAsyncOperation {
    public void GetCimAssociatedInstance(GetCimAssociatedInstanceCommand cmdlet);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimGetCimClass : CimAsyncOperation {
    public void GetCimClass(GetCimClassCommand cmdlet);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimGetCimClassContext : XOperationContextBase {
    public string ClassName { get; public set; }
    internal string MethodName { get; }
    internal string PropertyName { get; }
    internal string QualifierName { get; }
    internal CimGetCimClassContext(string theClassName, string theMethodName, string thePropertyName, string theQualifierName);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
    [CompilerGeneratedAttribute]
internal string get_MethodName();
    [CompilerGeneratedAttribute]
internal string get_PropertyName();
    [CompilerGeneratedAttribute]
internal string get_QualifierName();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimGetInstance : CimAsyncOperation {
    public void GetCimInstance(GetCimInstanceCommand cmdlet);
    protected void GetCimInstanceInternal(CimBaseCommand cmdlet);
    protected static String[] GetComputerName(CimBaseCommand cmdlet);
    protected static string GetNamespace(CimBaseCommand cmdlet);
    protected static CimSession[] GetCimSession(CimBaseCommand cmdlet);
    protected static string GetClassName(CimBaseCommand cmdlet);
    protected static string GetQuery(CimBaseCommand cmdlet);
    internal static bool IsClassNameQuerySet(CimBaseCommand cmdlet);
    protected static string CreateQuery(CimBaseCommand cmdlet);
    protected static string GetQueryDialect(CimBaseCommand cmdlet);
    protected static CimInstance GetCimInstanceParameter(CimBaseCommand cmdlet);
    protected CimSessionProxy CreateSessionProxy(string computerName, CimBaseCommand cmdlet);
    protected CimSessionProxy CreateSessionProxy(string computerName, CimInstance cimInstance, CimBaseCommand cmdlet, bool passThru);
    protected CimSessionProxy CreateSessionProxy(CimSession session, CimBaseCommand cmdlet);
    protected CimSessionProxy CreateSessionProxy(string computerName, CimInstance cimInstance, CimBaseCommand cmdlet);
    protected CimSessionProxy CreateSessionProxy(CimSession session, CimBaseCommand cmdlet, bool passThru);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimGetSession : CimSessionBase {
    public void GetCimSession(GetCimSessionCommand cmdlet);
}
public abstract class Microsoft.Management.Infrastructure.CimCmdlets.CimIndicationEventArgs : EventArgs {
    internal object context;
    public object Context { get; }
    public object get_Context();
}
public class Microsoft.Management.Infrastructure.CimCmdlets.CimIndicationEventExceptionEventArgs : CimIndicationEventArgs {
    public Exception Exception { get; }
    public CimIndicationEventExceptionEventArgs(Exception theException);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
public class Microsoft.Management.Infrastructure.CimCmdlets.CimIndicationEventInstanceEventArgs : CimIndicationEventArgs {
    public CimInstance NewEvent { get; }
    public string MachineId { get; }
    public string Bookmark { get; }
    public CimIndicationEventInstanceEventArgs(CimSubscriptionResult result);
    public CimInstance get_NewEvent();
    public string get_MachineId();
    public string get_Bookmark();
}
public class Microsoft.Management.Infrastructure.CimCmdlets.CimIndicationWatcher : object {
    [BrowsableAttribute("False")]
public bool EnableRaisingEvents { get; public set; }
    public CimIndicationWatcher(string computerName, string theNamespace, string queryDialect, string queryExpression, UInt32 operationTimeout);
    public CimIndicationWatcher(CimSession cimSession, string theNamespace, string queryDialect, string queryExpression, UInt32 operationTimeout);
    [CompilerGeneratedAttribute]
public void add_CimIndicationArrived(EventHandler`1<CimIndicationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_CimIndicationArrived(EventHandler`1<CimIndicationEventArgs> value);
    public bool get_EnableRaisingEvents();
    public void set_EnableRaisingEvents(bool value);
    public void Start();
    public void Stop();
    internal void SetCmdlet(Cmdlet cmdlet);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimInvokeCimMethod : CimAsyncOperation {
    public void InvokeCimMethod(InvokeCimMethodCommand cmdlet);
    public void InvokeCimMethodOnCimInstance(CimInstance cimInstance, XOperationContextBase context, CmdletOperationBase operation);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimMethodResultObserver : CimResultObserver`1<CimMethodResultBase> {
    internal string MethodName { get; internal set; }
    internal string ClassName { get; internal set; }
    public CimMethodResultObserver(CimSession session, IObservable`1<object> observable);
    public CimMethodResultObserver(CimSession session, IObservable`1<object> observable, CimResultContext context);
    public virtual void OnNext(CimMethodResultBase value);
    [CompilerGeneratedAttribute]
internal string get_MethodName();
    [CompilerGeneratedAttribute]
internal void set_MethodName(string value);
    [CompilerGeneratedAttribute]
internal string get_ClassName();
    [CompilerGeneratedAttribute]
internal void set_ClassName(string value);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimNewCimInstance : CimAsyncOperation {
    public void NewCimInstance(NewCimInstanceCommand cmdlet);
    internal void GetCimInstance(CimInstance cimInstance, XOperationContextBase context);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimNewCimInstanceContext : XOperationContextBase {
    internal CimNewCimInstanceContext(CimSessionProxy theProxy, string theNamespace);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimNewSession : CimSessionBase {
    protected bool Disposed { get; }
    internal void NewCimSession(NewCimSessionCommand cmdlet, CimSessionOptions sessionOptions, CimCredential credential);
    internal void AddSessionToCache(CimSession cimSession, XOperationContextBase context, CmdletOperationBase cmdlet);
    public void ProcessActions(CmdletOperationBase cmdletOperation);
    public void ProcessRemainActions(CmdletOperationBase cmdletOperation);
    [CompilerGeneratedAttribute]
protected bool get_Disposed();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimPromptUser : CimSyncAction {
    public string Message { get; }
    public CimPromptUser(string message, CimPromptType prompt);
    public virtual void Execute(CmdletOperationBase cmdlet);
    [CompilerGeneratedAttribute]
public string get_Message();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimRegisterCimIndication : CimAsyncOperation {
    internal Cmdlet Cmdlet { get; internal set; }
    internal string TargetComputerName { get; internal set; }
    internal Exception Exception { get; }
    [CompilerGeneratedAttribute]
public void add_OnNewSubscriptionResult(EventHandler`1<CimSubscriptionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnNewSubscriptionResult(EventHandler`1<CimSubscriptionEventArgs> value);
    public void RegisterCimIndication(string computerName, string nameSpace, string queryDialect, string queryExpression, UInt32 operationTimeout);
    public void RegisterCimIndication(CimSession cimSession, string nameSpace, string queryDialect, string queryExpression, UInt32 operationTimeout);
    protected virtual void SubscribeToCimSessionProxyEvent(CimSessionProxy proxy);
    [CompilerGeneratedAttribute]
internal Cmdlet get_Cmdlet();
    [CompilerGeneratedAttribute]
internal void set_Cmdlet(Cmdlet value);
    [CompilerGeneratedAttribute]
internal string get_TargetComputerName();
    [CompilerGeneratedAttribute]
internal void set_TargetComputerName(string value);
    [CompilerGeneratedAttribute]
internal Exception get_Exception();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimRemoveCimInstance : CimGetInstance {
    public void RemoveCimInstance(RemoveCimInstanceCommand cmdlet);
    internal void RemoveCimInstance(CimInstance cimInstance, XOperationContextBase context, CmdletOperationBase cmdlet);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimRemoveCimInstanceContext : XOperationContextBase {
    internal CimRemoveCimInstanceContext(string theNamespace, CimSessionProxy theProxy);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimRemoveSession : CimSessionBase {
    internal static string RemoveCimSessionActionName;
    public void RemoveCimSession(RemoveCimSessionCommand cmdlet);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimResultContext : object {
    internal object ErrorSource { get; }
    internal CimResultContext(object ErrorSource);
    [CompilerGeneratedAttribute]
internal object get_ErrorSource();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimResultObserver`1 : object {
    protected CimSession CurrentSession { get; }
    public CimResultObserver`1(CimSession session, IObservable`1<object> observable);
    public CimResultObserver`1(CimSession session, IObservable`1<object> observable, CimResultContext cimResultContext);
    [CompilerGeneratedAttribute]
public void add_OnNewResult(EventHandler`1<AsyncResultEventArgsBase> value);
    [CompilerGeneratedAttribute]
public void remove_OnNewResult(EventHandler`1<AsyncResultEventArgsBase> value);
    public virtual void OnCompleted();
    public virtual void OnError(Exception error);
    protected void OnNextCore(object value);
    public virtual void OnNext(T value);
    [CompilerGeneratedAttribute]
protected CimSession get_CurrentSession();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimSessionBase : object {
    internal static ConcurrentDictionary`2<Guid, CimSessionState> cimSessions;
    internal static Guid defaultRunspaceId;
    internal CimSessionState sessionState;
    public static CimSessionState GetCimSessionState();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimSessionProxy : object {
    public bool Amended { get; public set; }
    public UInt32 OperationTimeout { get; public set; }
    public Uri ResourceUri { get; public set; }
    public bool EnableMethodResultStreaming { get; public set; }
    unknown bool EnablePromptUser {public set; }
    unknown SwitchParameter KeyOnly {public set; }
    unknown SwitchParameter Shallow {public set; }
    internal CimSession CimSession { get; }
    internal CimInstance TargetCimInstance { get; }
    internal bool IsTemporaryCimSession { get; }
    internal CimOperationOptions OperationOptions { get; }
    internal ProtocolType Protocol { get; }
    internal XOperationContextBase ContextObject { get; internal set; }
    internal IObjectPreProcess ObjectPreProcess { get; internal set; }
    public bool IsDisposed { get; }
    public CimSessionProxy(CimSessionProxy proxy);
    public CimSessionProxy(string computerName);
    public CimSessionProxy(string computerName, CimSessionOptions sessionOptions);
    public CimSessionProxy(string computerName, CimInstance cimInstance);
    public CimSessionProxy(string computerName, CimSessionOptions sessionOptions, CimOperationOptions operOptions);
    public CimSessionProxy(string computerName, CimOperationOptions operOptions);
    public CimSessionProxy(CimSession session);
    public CimSessionProxy(CimSession session, CimOperationOptions operOptions);
    internal static void AddCimSessionToTemporaryCache(CimSession session);
    internal static void RemoveCimSessionFromTemporaryCache(CimSession session);
    [CompilerGeneratedAttribute]
public void add_OnNewCmdletAction(EventHandler`1<CmdletActionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnNewCmdletAction(EventHandler`1<CmdletActionEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnOperationCreated(EventHandler`1<OperationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnOperationCreated(EventHandler`1<OperationEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_OnOperationDeleted(EventHandler`1<OperationEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnOperationDeleted(EventHandler`1<OperationEventArgs> value);
    public bool get_Amended();
    public void set_Amended(bool value);
    public UInt32 get_OperationTimeout();
    public void set_OperationTimeout(UInt32 value);
    public Uri get_ResourceUri();
    public void set_ResourceUri(Uri value);
    public bool get_EnableMethodResultStreaming();
    public void set_EnableMethodResultStreaming(bool value);
    public void set_EnablePromptUser(bool value);
    public void set_KeyOnly(SwitchParameter value);
    public void set_Shallow(SwitchParameter value);
    public CimSession Detach();
    protected void FireNewActionEvent(CimBaseAction action);
    internal void WriteMessage(UInt32 channel, string message);
    internal void WriteOperationStartMessage(string operation, Hashtable parameterList);
    internal void WriteOperationCompleteMessage(string operation);
    public void WriteProgress(string activity, string currentOperation, string statusDescription, UInt32 percentageCompleted, UInt32 secondsRemaining);
    public CimResponseType WriteError(CimInstance instance);
    public CimResponseType PromptUser(string message, CimPromptType prompt);
    internal void ResultEventHandler(object observer, AsyncResultEventArgsBase resultArgs);
    public void CreateInstanceAsync(string namespaceName, CimInstance instance);
    public void DeleteInstanceAsync(string namespaceName, CimInstance instance);
    public void GetInstanceAsync(string namespaceName, CimInstance instance);
    public void ModifyInstanceAsync(string namespaceName, CimInstance instance);
    public void EnumerateAssociatedInstancesAsync(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole);
    public void EnumerateInstancesAsync(string namespaceName, string className);
    public void EnumerateReferencingInstancesAsync(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole);
    public void QueryInstancesAsync(string namespaceName, string queryDialect, string queryExpression);
    public void EnumerateClassesAsync(string namespaceName);
    public void EnumerateClassesAsync(string namespaceName, string className);
    public void GetClassAsync(string namespaceName, string className);
    public void InvokeMethodAsync(string namespaceName, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters);
    public void InvokeMethodAsync(string namespaceName, string className, string methodName, CimMethodParametersCollection methodParameters);
    public void SubscribeAsync(string namespaceName, string queryDialect, string queryExpression);
    public void TestConnectionAsync();
    protected virtual bool PreNewActionEvent(CmdletActionEventArgs args);
    protected virtual void PreOperationDeleteEvent(OperationEventArgs args);
    protected virtual void PostNewActionEvent(CmdletActionEventArgs args);
    protected virtual void PostOperationCreateEvent(OperationEventArgs args);
    protected virtual void PostOperationDeleteEvent(OperationEventArgs args);
    [CompilerGeneratedAttribute]
internal CimSession get_CimSession();
    [CompilerGeneratedAttribute]
internal CimInstance get_TargetCimInstance();
    [CompilerGeneratedAttribute]
internal bool get_IsTemporaryCimSession();
    [CompilerGeneratedAttribute]
internal CimOperationOptions get_OperationOptions();
    [CompilerGeneratedAttribute]
internal ProtocolType get_Protocol();
    [CompilerGeneratedAttribute]
internal XOperationContextBase get_ContextObject();
    [CompilerGeneratedAttribute]
internal void set_ContextObject(XOperationContextBase value);
    [CompilerGeneratedAttribute]
internal IObjectPreProcess get_ObjectPreProcess();
    [CompilerGeneratedAttribute]
internal void set_ObjectPreProcess(IObjectPreProcess value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public bool get_IsDisposed();
    protected void ConsumeCimInstanceAsync(IObservable`1<CimInstance> asyncResult, CimResultContext cimResultContext);
    protected void ConsumeCimInstanceAsync(IObservable`1<CimInstance> asyncResult, bool ignoreResultObjects, CimResultContext cimResultContext);
    protected void ConsumeObjectAsync(IObservable`1<object> asyncResult, CimResultContext cimResultContext);
    protected void ConsumeCimClassAsync(IObservable`1<CimClass> asyncResult, CimResultContext cimResultContext);
    protected void ConsumeCimSubscriptionResultAsync(IObservable`1<CimSubscriptionResult> asyncResult, CimResultContext cimResultContext);
    protected void ConsumeCimInvokeMethodResultAsync(IObservable`1<CimMethodResultBase> asyncResult, string className, string methodName, CimResultContext cimResultContext);
    internal static CimSessionOptions CreateCimSessionOption(string computerName, UInt32 timeout, CimCredential credential);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimSessionProxyGetCimClass : CimSessionProxy {
    public CimSessionProxyGetCimClass(string computerName);
    public CimSessionProxyGetCimClass(CimSession session);
    protected virtual bool PreNewActionEvent(CmdletActionEventArgs args);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimSessionProxyNewCimInstance : CimSessionProxy {
    internal CimNewCimInstance NewCimInstanceOperation { get; }
    public CimSessionProxyNewCimInstance(string computerName, CimNewCimInstance operation);
    public CimSessionProxyNewCimInstance(CimSession session, CimNewCimInstance operation);
    protected virtual bool PreNewActionEvent(CmdletActionEventArgs args);
    [CompilerGeneratedAttribute]
internal CimNewCimInstance get_NewCimInstanceOperation();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimSessionProxySetCimInstance : CimSessionProxy {
    public CimSessionProxySetCimInstance(CimSessionProxy originalProxy, bool passThru);
    public CimSessionProxySetCimInstance(string computerName, CimInstance cimInstance, bool passThru);
    public CimSessionProxySetCimInstance(CimSession session, bool passThru);
    protected virtual bool PreNewActionEvent(CmdletActionEventArgs args);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimSessionProxyTestConnection : CimSessionProxy {
    public CimSessionProxyTestConnection(string computerName, CimSessionOptions sessionOptions);
    protected virtual void PreOperationDeleteEvent(OperationEventArgs args);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimSessionState : object {
    internal static string CimSessionClassName;
    internal static string CimSessionObject;
    internal static string SessionObjectPath;
    internal static string idPropName;
    internal static string instanceidPropName;
    internal static string namePropName;
    internal static string computernamePropName;
    internal static string protocolPropName;
    internal int GetSessionsCount();
    internal UInt32 GenerateSessionId();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void Cleanup();
    internal PSObject AddObjectToCache(CimSession session, UInt32 sessionId, Guid instanceId, string name, string computerName, ProtocolType protocol);
    internal string GetRemoveSessionObjectTarget(PSObject psObject);
    internal void RemoveOneSessionObjectFromCache(PSObject psObject);
    internal void RemoveOneSessionObjectFromCache(CimSession session);
    internal IEnumerable`1<PSObject> QuerySession(IEnumerable`1<UInt32> ids, IEnumerable`1& errorRecords);
    internal IEnumerable`1<PSObject> QuerySession(IEnumerable`1<Guid> instanceIds, IEnumerable`1& errorRecords);
    internal IEnumerable`1<PSObject> QuerySession(IEnumerable`1<string> nameArray, IEnumerable`1& errorRecords);
    internal IEnumerable`1<PSObject> QuerySessionByComputerName(IEnumerable`1<string> computernameArray, IEnumerable`1& errorRecords);
    internal IEnumerable`1<PSObject> QuerySession(IEnumerable`1<CimSession> cimsessions, IEnumerable`1& errorRecords);
    internal CimSessionWrapper QuerySession(CimSession cimsession);
    internal CimSession QuerySession(Guid cimSessionInstanceId);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimSessionWrapper : object {
    public UInt32 SessionId { get; }
    public Guid InstanceId { get; }
    public string Name { get; }
    public string ComputerName { get; }
    public CimSession CimSession { get; }
    public string Protocol { get; }
    internal CimSessionWrapper(UInt32 theSessionId, Guid theInstanceId, string theName, string theComputerName, CimSession theCimSession, ProtocolType theProtocol);
    [CompilerGeneratedAttribute]
public UInt32 get_SessionId();
    [CompilerGeneratedAttribute]
public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_ComputerName();
    [CompilerGeneratedAttribute]
public CimSession get_CimSession();
    public string get_Protocol();
    internal ProtocolType GetProtocolType();
    internal PSObject GetPSObject();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimSetCimInstance : CimGetInstance {
    public void SetCimInstance(SetCimInstanceCommand cmdlet);
    public void SetCimInstance(CimInstance cimInstance, CimSetCimInstanceContext context, CmdletOperationBase cmdlet);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimSetCimInstanceContext : XOperationContextBase {
    internal IDictionary Property { get; }
    internal string ParameterSetName { get; }
    internal bool PassThru { get; }
    internal CimSetCimInstanceContext(string theNamespace, IDictionary theProperty, CimSessionProxy theProxy, string theParameterSetName, bool passThru);
    [CompilerGeneratedAttribute]
internal IDictionary get_Property();
    [CompilerGeneratedAttribute]
internal string get_ParameterSetName();
    [CompilerGeneratedAttribute]
internal bool get_PassThru();
}
internal abstract class Microsoft.Management.Infrastructure.CimCmdlets.CimSubscriptionEventArgs : EventArgs {
    protected object context;
    public object Context { get; }
    public object get_Context();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimSubscriptionExceptionEventArgs : CimSubscriptionEventArgs {
    public Exception Exception { get; }
    public CimSubscriptionExceptionEventArgs(Exception theException);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimSubscriptionResultEventArgs : CimSubscriptionEventArgs {
    public CimSubscriptionResult Result { get; }
    public CimSubscriptionResultEventArgs(CimSubscriptionResult theResult);
    [CompilerGeneratedAttribute]
public CimSubscriptionResult get_Result();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimSubscriptionResultObserver : CimResultObserver`1<CimSubscriptionResult> {
    public CimSubscriptionResultObserver(CimSession session, IObservable`1<object> observable);
    public CimSubscriptionResultObserver(CimSession session, IObservable`1<object> observable, CimResultContext context);
    public virtual void OnNext(CimSubscriptionResult value);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimSyncAction : CimBaseAction {
    protected CimResponseType responseType;
    unknown CimResponseType ResponseType {internal set; }
    public virtual CimResponseType GetResponse();
    internal void set_ResponseType(CimResponseType value);
    internal virtual void OnComplete();
    protected virtual void Block();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimTestSession : CimAsyncOperation {
    internal void TestCimSession(string computerName, CimSessionProxy proxy);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimWriteError : CimSyncAction {
    internal CimInstance Error { get; }
    internal Exception Exception { get; }
    internal InvocationContext CimInvocationContext { get; }
    internal CimResultContext ResultContext { get; }
    public CimWriteError(CimInstance error, InvocationContext context);
    public CimWriteError(Exception exception, InvocationContext context, CimResultContext cimResultContext);
    public virtual void Execute(CmdletOperationBase cmdlet);
    [CompilerGeneratedAttribute]
internal CimInstance get_Error();
    [CompilerGeneratedAttribute]
internal Exception get_Exception();
    [CompilerGeneratedAttribute]
internal InvocationContext get_CimInvocationContext();
    [CompilerGeneratedAttribute]
internal CimResultContext get_ResultContext();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimWriteMessage : CimBaseAction {
    internal UInt32 Channel { get; }
    internal string Message { get; }
    public CimWriteMessage(UInt32 channel, string message);
    [CompilerGeneratedAttribute]
internal UInt32 get_Channel();
    [CompilerGeneratedAttribute]
internal string get_Message();
    public virtual void Execute(CmdletOperationBase cmdlet);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimWriteProgress : CimBaseAction {
    internal string Activity { get; }
    internal int ActivityID { get; }
    internal string CurrentOperation { get; }
    internal string StatusDescription { get; }
    internal UInt32 PercentageCompleted { get; }
    internal UInt32 SecondsRemaining { get; }
    public CimWriteProgress(string theActivity, int theActivityID, string theCurrentOperation, string theStatusDescription, UInt32 thePercentageCompleted, UInt32 theSecondsRemaining);
    public virtual void Execute(CmdletOperationBase cmdlet);
    [CompilerGeneratedAttribute]
internal string get_Activity();
    [CompilerGeneratedAttribute]
internal int get_ActivityID();
    [CompilerGeneratedAttribute]
internal string get_CurrentOperation();
    [CompilerGeneratedAttribute]
internal string get_StatusDescription();
    [CompilerGeneratedAttribute]
internal UInt32 get_PercentageCompleted();
    [CompilerGeneratedAttribute]
internal UInt32 get_SecondsRemaining();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CimWriteResultObject : CimBaseAction {
    internal object Result { get; }
    public CimWriteResultObject(object result, XOperationContextBase theContext);
    public virtual void Execute(CmdletOperationBase cmdlet);
    [CompilerGeneratedAttribute]
internal object get_Result();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CmdletActionEventArgs : EventArgs {
    public CimBaseAction Action;
    public CmdletActionEventArgs(CimBaseAction action);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CmdletOperationBase : object {
    public CmdletOperationBase(Cmdlet cmdlet);
    public virtual bool ShouldContinue(string query, string caption);
    public virtual bool ShouldContinue(string query, string caption, Boolean& yesToAll, Boolean& noToAll);
    public virtual bool ShouldProcess(string target);
    public virtual bool ShouldProcess(string target, string action);
    public virtual bool ShouldProcess(string verboseDescription, string verboseWarning, string caption);
    public virtual bool ShouldProcess(string verboseDescription, string verboseWarning, string caption, ShouldProcessReason& shouldProcessReason);
    [DoesNotReturnAttribute]
public virtual void ThrowTerminatingError(ErrorRecord errorRecord);
    public virtual void WriteCommandDetail(string text);
    public virtual void WriteDebug(string text);
    public virtual void WriteError(ErrorRecord errorRecord);
    public virtual void WriteObject(object sendToPipeline, XOperationContextBase context);
    public virtual void WriteObject(object sendToPipeline, bool enumerateCollection, XOperationContextBase context);
    public virtual void WriteProgress(ProgressRecord progressRecord);
    public virtual void WriteVerbose(string text);
    public virtual void WriteWarning(string text);
    [DoesNotReturnAttribute]
internal void ThrowTerminatingError(Exception exception, string operation);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CmdletOperationInvokeCimMethod : CmdletOperationBase {
    public CmdletOperationInvokeCimMethod(Cmdlet cmdlet, CimInvokeCimMethod theCimInvokeCimMethod);
    public virtual void WriteObject(object sendToPipeline, XOperationContextBase context);
    public virtual void WriteObject(object sendToPipeline, bool enumerateCollection, XOperationContextBase context);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CmdletOperationRemoveCimInstance : CmdletOperationBase {
    public CmdletOperationRemoveCimInstance(Cmdlet cmdlet, CimRemoveCimInstance cimRemoveCimInstance);
    public virtual void WriteObject(object sendToPipeline, XOperationContextBase context);
    public virtual void WriteObject(object sendToPipeline, bool enumerateCollection, XOperationContextBase context);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CmdletOperationSetCimInstance : CmdletOperationBase {
    public CmdletOperationSetCimInstance(Cmdlet cmdlet, CimSetCimInstance theCimSetCimInstance);
    public virtual void WriteObject(object sendToPipeline, XOperationContextBase context);
    public virtual void WriteObject(object sendToPipeline, bool enumerateCollection, XOperationContextBase context);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.CmdletOperationTestCimSession : CmdletOperationBase {
    public CmdletOperationTestCimSession(Cmdlet cmdlet, CimNewSession theCimNewSession);
    public virtual void WriteObject(object sendToPipeline, XOperationContextBase context);
}
internal static class Microsoft.Management.Infrastructure.CimCmdlets.ConstValue : object {
    internal static String[] DefaultSessionName;
    internal static string NullComputerName;
    internal static String[] NullComputerNames;
    internal static string LocalhostComputerName;
    internal static string DefaultNameSpace;
    internal static string DefaultQueryDialect;
    internal static string ShowComputerNameNoteProperty;
    internal static bool IsDefaultComputerName(string computerName);
    internal static IEnumerable`1<string> GetComputerNames(IEnumerable`1<string> computerNames);
    internal static string GetComputerName(string computerName);
    internal static string GetNamespace(string nameSpace);
    internal static string GetQueryDialectWithDefault(string queryDialect);
}
internal static class Microsoft.Management.Infrastructure.CimCmdlets.DebugHelper : object {
    internal static string logFile;
    internal static string space;
    internal static String[] spaces;
    internal static object logLock;
    internal static string runspaceStateChanged;
    internal static string classDumpInfo;
    internal static string propertyDumpInfo;
    internal static string defaultPropertyType;
    internal static string propertyValueSet;
    internal static string addParameterSetName;
    internal static string removeParameterSetName;
    internal static string currentParameterSetNameCount;
    internal static string currentParameterSetNameInCache;
    internal static string currentnonMandatoryParameterSetInCache;
    internal static string optionalParameterSetNameCount;
    internal static string finalParameterSetName;
    internal static string addToOptionalParameterSet;
    internal static string startToResolveParameterSet;
    internal static string reservedString;
    internal static bool GenerateLog { get; internal set; }
    internal static bool GenerateVerboseMessage { get; internal set; }
    [CompilerGeneratedAttribute]
internal static bool get_GenerateLog();
    [CompilerGeneratedAttribute]
internal static void set_GenerateLog(bool value);
    [CompilerGeneratedAttribute]
internal static bool get_GenerateVerboseMessage();
    [CompilerGeneratedAttribute]
internal static void set_GenerateVerboseMessage(bool value);
    internal static string GetSourceCodeInformation(bool withFileName, int depth);
    internal static void WriteLog(string message);
    internal static void WriteEmptyLine();
    internal static void WriteLog(string message, int indent, Object[] args);
    internal static void WriteLog(string message, int indent);
    internal static void WriteLogEx(string message, int indent, Object[] args);
    internal static void WriteLogEx(string message, int indent);
    internal static void WriteLogEx();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.ErrorToErrorRecord : object {
    internal static ErrorRecord ErrorRecordFromAnyException(InvocationContext context, Exception inner, CimResultContext cimResultContext);
    internal static ErrorRecord CreateFromCimException(InvocationContext context, CimException cimException, CimResultContext cimResultContext);
    internal static ErrorRecord InitializeErrorRecord(InvocationContext context, Exception exception, string errorId, ErrorCategory errorCategory, CimResultContext cimResultContext);
    internal static ErrorRecord InitializeErrorRecord(InvocationContext context, CimException cimException, CimResultContext cimResultContext);
    internal static ErrorRecord InitializeErrorRecordCore(InvocationContext context, Exception exception, string errorId, ErrorCategory errorCategory, CimResultContext cimResultContext);
    internal static ErrorCategory ConvertCimExceptionToErrorCategory(CimException cimException);
    internal static ErrorCategory ConvertCimNativeErrorCodeToErrorCategory(NativeErrorCode nativeErrorCode);
    internal static ErrorCategory ConvertCimErrorToErrorCategory(CimInstance cimError);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.FormatPartialCimInstance : object {
    internal static string PartialPSTypeName;
    public sealed virtual object Process(object resultObject);
}
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CmdletAttribute("Get", "CimAssociatedInstance")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.Management.Infrastructure.CimCmdlets.GetCimAssociatedInstanceCommand : CimBaseCommand {
    internal static string Noun;
    internal static string nameCimInstance;
    internal static string nameComputerName;
    internal static string nameCimSession;
    internal static string nameResourceUri;
    [ParameterAttribute]
public string Association { get; public set; }
    [ParameterAttribute]
public string ResultClassName { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CimInstance InputObject { get; public set; }
    internal CimInstance CimInstance { get; }
    [ParameterAttribute]
public string Namespace { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public UInt32 OperationTimeoutSec { get; public set; }
    [ParameterAttribute]
public Uri ResourceUri { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public String[] ComputerName { get; public set; }
    [ParameterAttribute]
public CimSession[] CimSession { get; public set; }
    [ParameterAttribute]
public SwitchParameter KeyOnly { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Association();
    [CompilerGeneratedAttribute]
public void set_Association(string value);
    [CompilerGeneratedAttribute]
public string get_ResultClassName();
    [CompilerGeneratedAttribute]
public void set_ResultClassName(string value);
    public CimInstance get_InputObject();
    public void set_InputObject(CimInstance value);
    [CompilerGeneratedAttribute]
internal CimInstance get_CimInstance();
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_OperationTimeoutSec();
    [CompilerGeneratedAttribute]
public void set_OperationTimeoutSec(UInt32 value);
    public Uri get_ResourceUri();
    public void set_ResourceUri(Uri value);
    public String[] get_ComputerName();
    public void set_ComputerName(String[] value);
    public CimSession[] get_CimSession();
    public void set_CimSession(CimSession[] value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_KeyOnly();
    [CompilerGeneratedAttribute]
public void set_KeyOnly(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CmdletAttribute("Get", "CimClass")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.Management.Infrastructure.CimCmdlets.GetCimClassCommand : CimBaseCommand {
    internal static string Noun;
    internal static string nameCimSession;
    internal static string nameComputerName;
    [ParameterAttribute]
public SwitchParameter Amended { get; public set; }
    [ParameterAttribute]
public string ClassName { get; public set; }
    [ParameterAttribute]
public string Namespace { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public UInt32 OperationTimeoutSec { get; public set; }
    [ParameterAttribute]
public CimSession[] CimSession { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public String[] ComputerName { get; public set; }
    [ParameterAttribute]
public string MethodName { get; public set; }
    [ParameterAttribute]
public string PropertyName { get; public set; }
    [ParameterAttribute]
public string QualifierName { get; public set; }
    [CompilerGeneratedAttribute]
public SwitchParameter get_Amended();
    [CompilerGeneratedAttribute]
public void set_Amended(SwitchParameter value);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_OperationTimeoutSec();
    [CompilerGeneratedAttribute]
public void set_OperationTimeoutSec(UInt32 value);
    public CimSession[] get_CimSession();
    public void set_CimSession(CimSession[] value);
    public String[] get_ComputerName();
    public void set_ComputerName(String[] value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_QualifierName();
    [CompilerGeneratedAttribute]
public void set_QualifierName(string value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CmdletAttribute("Get", "CimInstance")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.Management.Infrastructure.CimCmdlets.GetCimInstanceCommand : CimBaseCommand {
    internal static string nameCimInstance;
    internal static string nameCimSession;
    internal static string nameClassName;
    internal static string nameResourceUri;
    internal static string nameComputerName;
    internal static string nameFilter;
    internal static string nameKeyOnly;
    internal static string nameNamespace;
    internal static string nameOperationTimeoutSec;
    internal static string nameQuery;
    internal static string nameQueryDialect;
    internal static string nameSelectProperties;
    internal static string nameShallow;
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public CimSession[] CimSession { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public string ClassName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public Uri ResourceUri { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public String[] ComputerName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter KeyOnly { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public string Namespace { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public UInt32 OperationTimeoutSec { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CimInstance InputObject { get; public set; }
    internal CimInstance CimInstance { get; }
    [ParameterAttribute]
[ParameterAttribute]
public string Query { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public string QueryDialect { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter Shallow { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public string Filter { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Property { get; public set; }
    internal String[] SelectProperties { get; }
    public CimSession[] get_CimSession();
    public void set_CimSession(CimSession[] value);
    public string get_ClassName();
    public void set_ClassName(string value);
    public Uri get_ResourceUri();
    public void set_ResourceUri(Uri value);
    public String[] get_ComputerName();
    public void set_ComputerName(String[] value);
    public SwitchParameter get_KeyOnly();
    public void set_KeyOnly(SwitchParameter value);
    public string get_Namespace();
    public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_OperationTimeoutSec();
    [CompilerGeneratedAttribute]
public void set_OperationTimeoutSec(UInt32 value);
    public CimInstance get_InputObject();
    public void set_InputObject(CimInstance value);
    [CompilerGeneratedAttribute]
internal CimInstance get_CimInstance();
    public string get_Query();
    public void set_Query(string value);
    public string get_QueryDialect();
    public void set_QueryDialect(string value);
    public SwitchParameter get_Shallow();
    public void set_Shallow(SwitchParameter value);
    public string get_Filter();
    public void set_Filter(string value);
    public String[] get_Property();
    public void set_Property(String[] value);
    [CompilerGeneratedAttribute]
internal String[] get_SelectProperties();
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CmdletAttribute("Get", "CimSession")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.Management.Infrastructure.CimCmdlets.GetCimSessionCommand : CimBaseCommand {
    internal static string nameComputerName;
    internal static string nameId;
    internal static string nameInstanceId;
    internal static string nameName;
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public String[] ComputerName { get; public set; }
    [ParameterAttribute]
public UInt32[] Id { get; public set; }
    [ParameterAttribute]
public Guid[] InstanceId { get; public set; }
    [ParameterAttribute]
public String[] Name { get; public set; }
    public String[] get_ComputerName();
    public void set_ComputerName(String[] value);
    public UInt32[] get_Id();
    public void set_Id(UInt32[] value);
    public Guid[] get_InstanceId();
    public void set_InstanceId(Guid[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.IgnoreResultObserver : CimResultObserver`1<CimInstance> {
    public IgnoreResultObserver(CimSession session, IObservable`1<object> observable);
    public virtual void OnNext(CimInstance value);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.InvocationContext : object {
    internal string ComputerName { get; }
    internal CimInstance TargetCimInstance { get; }
    internal InvocationContext(CimSessionProxy proxy);
    internal InvocationContext(string computerName, CimInstance targetCimInstance);
    [CompilerGeneratedAttribute]
internal virtual string get_ComputerName();
    [CompilerGeneratedAttribute]
internal virtual CimInstance get_TargetCimInstance();
}
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CmdletAttribute("Invoke", "CimMethod")]
public class Microsoft.Management.Infrastructure.CimCmdlets.InvokeCimMethodCommand : CimBaseCommand {
    internal static string nameClassName;
    internal static string nameCimClass;
    internal static string nameQuery;
    internal static string nameResourceUri;
    internal static string nameQueryDialect;
    internal static string nameCimInstance;
    internal static string nameComputerName;
    internal static string nameCimSession;
    internal static string nameArguments;
    internal static string nameMethodName;
    internal static string nameNamespace;
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string ClassName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public Uri ResourceUri { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public CimClass CimClass { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public string Query { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public string QueryDialect { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CimInstance InputObject { get; public set; }
    internal CimInstance CimInstance { get; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public String[] ComputerName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public CimSession[] CimSession { get; public set; }
    [ParameterAttribute]
public IDictionary Arguments { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string MethodName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public string Namespace { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public UInt32 OperationTimeoutSec { get; public set; }
    public string get_ClassName();
    public void set_ClassName(string value);
    public Uri get_ResourceUri();
    public void set_ResourceUri(Uri value);
    public CimClass get_CimClass();
    public void set_CimClass(CimClass value);
    public string get_Query();
    public void set_Query(string value);
    public string get_QueryDialect();
    public void set_QueryDialect(string value);
    public CimInstance get_InputObject();
    public void set_InputObject(CimInstance value);
    [CompilerGeneratedAttribute]
internal CimInstance get_CimInstance();
    public String[] get_ComputerName();
    public void set_ComputerName(String[] value);
    public CimSession[] get_CimSession();
    public void set_CimSession(CimSession[] value);
    [CompilerGeneratedAttribute]
public IDictionary get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(IDictionary value);
    public string get_MethodName();
    public void set_MethodName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_OperationTimeoutSec();
    [CompilerGeneratedAttribute]
public void set_OperationTimeoutSec(UInt32 value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[ComVisibleAttribute("False")]
internal interface Microsoft.Management.Infrastructure.CimCmdlets.IObjectPreProcess {
    public abstract virtual object Process(object resultObject);
}
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CmdletAttribute("New", "CimInstance")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.Management.Infrastructure.CimCmdlets.NewCimInstanceCommand : CimBaseCommand {
    internal static string nameClassName;
    internal static string nameResourceUri;
    internal static string nameKey;
    internal static string nameCimClass;
    internal static string nameProperty;
    internal static string nameNamespace;
    internal static string nameCimSession;
    internal static string nameComputerName;
    internal static string nameClientOnly;
    [ParameterAttribute]
[ParameterAttribute]
public string ClassName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public Uri ResourceUri { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public String[] Key { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public CimClass CimClass { get; public set; }
    [ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary Property { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public string Namespace { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public UInt32 OperationTimeoutSec { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public CimSession[] CimSession { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public String[] ComputerName { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
public SwitchParameter ClientOnly { get; public set; }
    public string get_ClassName();
    public void set_ClassName(string value);
    public Uri get_ResourceUri();
    public void set_ResourceUri(Uri value);
    public String[] get_Key();
    public void set_Key(String[] value);
    public CimClass get_CimClass();
    public void set_CimClass(CimClass value);
    [CompilerGeneratedAttribute]
public IDictionary get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(IDictionary value);
    public string get_Namespace();
    public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_OperationTimeoutSec();
    [CompilerGeneratedAttribute]
public void set_OperationTimeoutSec(UInt32 value);
    public CimSession[] get_CimSession();
    public void set_CimSession(CimSession[] value);
    public String[] get_ComputerName();
    public void set_ComputerName(String[] value);
    public SwitchParameter get_ClientOnly();
    public void set_ClientOnly(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CmdletAttribute("New", "CimSession")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.Management.Infrastructure.CimCmdlets.NewCimSessionCommand : CimBaseCommand {
    internal bool operationTimeoutSet;
    [ParameterAttribute]
public PasswordAuthenticationMechanism Authentication { get; public set; }
    [ParameterAttribute]
[CredentialAttribute]
public PSCredential Credential { get; public set; }
    [ParameterAttribute]
public string CertificateThumbprint { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[ValidateNotNullOrEmptyAttribute]
public String[] ComputerName { get; public set; }
    [ParameterAttribute]
public string Name { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public UInt32 OperationTimeoutSec { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipTestConnection { get; public set; }
    [ParameterAttribute]
public UInt32 Port { get; public set; }
    [ParameterAttribute]
public CimSessionOptions SessionOption { get; public set; }
    public PasswordAuthenticationMechanism get_Authentication();
    public void set_Authentication(PasswordAuthenticationMechanism value);
    [CompilerGeneratedAttribute]
public PSCredential get_Credential();
    [CompilerGeneratedAttribute]
public void set_Credential(PSCredential value);
    [CompilerGeneratedAttribute]
public string get_CertificateThumbprint();
    [CompilerGeneratedAttribute]
public void set_CertificateThumbprint(string value);
    [CompilerGeneratedAttribute]
public String[] get_ComputerName();
    [CompilerGeneratedAttribute]
public void set_ComputerName(String[] value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public UInt32 get_OperationTimeoutSec();
    public void set_OperationTimeoutSec(UInt32 value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_SkipTestConnection();
    [CompilerGeneratedAttribute]
public void set_SkipTestConnection(SwitchParameter value);
    public UInt32 get_Port();
    public void set_Port(UInt32 value);
    [CompilerGeneratedAttribute]
public CimSessionOptions get_SessionOption();
    [CompilerGeneratedAttribute]
public void set_SessionOption(CimSessionOptions value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    internal void BuildSessionOptions(CimSessionOptions& outputOptions, CimCredential& outputCredential);
    protected virtual void DisposeInternal();
}
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CmdletAttribute("New", "CimSessionOption")]
[OutputTypeAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.Management.Infrastructure.CimCmdlets.NewCimSessionOptionCommand : CimBaseCommand {
    internal static string nameNoEncryption;
    internal static string nameSkipCACheck;
    internal static string nameSkipCNCheck;
    internal static string nameSkipRevocationCheck;
    internal static string nameEncodePortInServicePrincipalName;
    internal static string nameEncoding;
    internal static string nameHttpPrefix;
    internal static string nameMaxEnvelopeSizeKB;
    internal static string nameProxyAuthentication;
    internal static string nameProxyCertificateThumbprint;
    internal static string nameProxyCredential;
    internal static string nameProxyType;
    internal static string nameUseSsl;
    internal static string nameImpersonation;
    internal static string namePacketIntegrity;
    internal static string namePacketPrivacy;
    internal static string nameProtocol;
    [ParameterAttribute]
public SwitchParameter NoEncryption { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipCACheck { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipCNCheck { get; public set; }
    [ParameterAttribute]
public SwitchParameter SkipRevocationCheck { get; public set; }
    [ParameterAttribute]
public SwitchParameter EncodePortInServicePrincipalName { get; public set; }
    [ParameterAttribute]
public PacketEncoding Encoding { get; public set; }
    [ParameterAttribute]
public Uri HttpPrefix { get; public set; }
    [ParameterAttribute]
public UInt32 MaxEnvelopeSizeKB { get; public set; }
    [ParameterAttribute]
public PasswordAuthenticationMechanism ProxyAuthentication { get; public set; }
    [ParameterAttribute]
public string ProxyCertificateThumbprint { get; public set; }
    [ParameterAttribute]
[CredentialAttribute]
public PSCredential ProxyCredential { get; public set; }
    [ParameterAttribute]
public ProxyType ProxyType { get; public set; }
    [ParameterAttribute]
public SwitchParameter UseSsl { get; public set; }
    [ParameterAttribute]
public ImpersonationType Impersonation { get; public set; }
    [ParameterAttribute]
public SwitchParameter PacketIntegrity { get; public set; }
    [ParameterAttribute]
public SwitchParameter PacketPrivacy { get; public set; }
    [ParameterAttribute]
public ProtocolType Protocol { get; public set; }
    [ParameterAttribute]
public CultureInfo UICulture { get; public set; }
    [ParameterAttribute]
public CultureInfo Culture { get; public set; }
    public SwitchParameter get_NoEncryption();
    public void set_NoEncryption(SwitchParameter value);
    public SwitchParameter get_SkipCACheck();
    public void set_SkipCACheck(SwitchParameter value);
    public SwitchParameter get_SkipCNCheck();
    public void set_SkipCNCheck(SwitchParameter value);
    public SwitchParameter get_SkipRevocationCheck();
    public void set_SkipRevocationCheck(SwitchParameter value);
    public SwitchParameter get_EncodePortInServicePrincipalName();
    public void set_EncodePortInServicePrincipalName(SwitchParameter value);
    public PacketEncoding get_Encoding();
    public void set_Encoding(PacketEncoding value);
    public Uri get_HttpPrefix();
    public void set_HttpPrefix(Uri value);
    public UInt32 get_MaxEnvelopeSizeKB();
    public void set_MaxEnvelopeSizeKB(UInt32 value);
    public PasswordAuthenticationMechanism get_ProxyAuthentication();
    public void set_ProxyAuthentication(PasswordAuthenticationMechanism value);
    public string get_ProxyCertificateThumbprint();
    public void set_ProxyCertificateThumbprint(string value);
    public PSCredential get_ProxyCredential();
    public void set_ProxyCredential(PSCredential value);
    public ProxyType get_ProxyType();
    public void set_ProxyType(ProxyType value);
    public SwitchParameter get_UseSsl();
    public void set_UseSsl(SwitchParameter value);
    public ImpersonationType get_Impersonation();
    public void set_Impersonation(ImpersonationType value);
    public SwitchParameter get_PacketIntegrity();
    public void set_PacketIntegrity(SwitchParameter value);
    public SwitchParameter get_PacketPrivacy();
    public void set_PacketPrivacy(SwitchParameter value);
    public ProtocolType get_Protocol();
    public void set_Protocol(ProtocolType value);
    [CompilerGeneratedAttribute]
public CultureInfo get_UICulture();
    [CompilerGeneratedAttribute]
public void set_UICulture(CultureInfo value);
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
    internal DComSessionOptions CreateDComSessionOptions();
    internal WSManSessionOptions CreateWSMANSessionOptions();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.OperationEventArgs : EventArgs {
    public IDisposable operationCancellation;
    public IObservable`1<object> operation;
    public bool success;
    public OperationEventArgs(IDisposable operationCancellation, IObservable`1<object> operation, bool theSuccess);
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.ParameterBinder : object {
    internal ParameterBinder(Dictionary`2<string, HashSet`1<ParameterDefinitionEntry>> parameters, Dictionary`2<string, ParameterSetEntry> sets);
    internal void reset();
    internal void SetParameter(string parameterName, bool isBeginProcess);
    internal string GetParameterSet();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.ParameterDefinitionEntry : object {
    internal string ParameterSetName { get; }
    internal bool IsMandatory { get; }
    internal ParameterDefinitionEntry(string parameterSetName, bool mandatory);
    [CompilerGeneratedAttribute]
internal string get_ParameterSetName();
    [CompilerGeneratedAttribute]
internal bool get_IsMandatory();
}
internal class Microsoft.Management.Infrastructure.CimCmdlets.ParameterSetEntry : object {
    internal bool IsDefaultParameterSet { get; }
    internal UInt32 MandatoryParameterCount { get; }
    internal bool IsValueSet { get; internal set; }
    internal bool IsValueSetAtBeginProcess { get; internal set; }
    internal UInt32 SetMandatoryParameterCount { get; internal set; }
    internal UInt32 SetMandatoryParameterCountAtBeginProcess { get; internal set; }
    internal ParameterSetEntry(UInt32 mandatoryParameterCount);
    internal ParameterSetEntry(ParameterSetEntry toClone);
    internal ParameterSetEntry(UInt32 mandatoryParameterCount, bool isDefault);
    internal void reset();
    [CompilerGeneratedAttribute]
internal bool get_IsDefaultParameterSet();
    [CompilerGeneratedAttribute]
internal UInt32 get_MandatoryParameterCount();
    [CompilerGeneratedAttribute]
internal bool get_IsValueSet();
    [CompilerGeneratedAttribute]
internal void set_IsValueSet(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsValueSetAtBeginProcess();
    [CompilerGeneratedAttribute]
internal void set_IsValueSetAtBeginProcess(bool value);
    [CompilerGeneratedAttribute]
internal UInt32 get_SetMandatoryParameterCount();
    [CompilerGeneratedAttribute]
internal void set_SetMandatoryParameterCount(UInt32 value);
    [CompilerGeneratedAttribute]
internal UInt32 get_SetMandatoryParameterCountAtBeginProcess();
    [CompilerGeneratedAttribute]
internal void set_SetMandatoryParameterCountAtBeginProcess(UInt32 value);
}
public enum Microsoft.Management.Infrastructure.CimCmdlets.ProtocolType : Enum {
    public int value__;
    public static ProtocolType Default;
    public static ProtocolType Dcom;
    public static ProtocolType Wsman;
}
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CmdletAttribute("Register", "CimIndicationEvent")]
public class Microsoft.Management.Infrastructure.CimCmdlets.RegisterCimIndicationCommand : ObjectEventRegistrationBase {
    internal static string nameClassName;
    internal static string nameQuery;
    internal static string nameQueryDialect;
    internal static string nameCimSession;
    internal static string nameComputerName;
    [ParameterAttribute]
public string Namespace { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public string ClassName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public string Query { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public string QueryDialect { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public UInt32 OperationTimeoutSec { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public CimSession CimSession { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[ParameterAttribute]
public string ComputerName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    public string get_ClassName();
    public void set_ClassName(string value);
    public string get_Query();
    public void set_Query(string value);
    public string get_QueryDialect();
    public void set_QueryDialect(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_OperationTimeoutSec();
    [CompilerGeneratedAttribute]
public void set_OperationTimeoutSec(UInt32 value);
    public CimSession get_CimSession();
    public void set_CimSession(CimSession value);
    public string get_ComputerName();
    public void set_ComputerName(string value);
    protected virtual object GetSourceObject();
    protected virtual string GetSourceObjectEventName();
    protected virtual void EndProcessing();
}
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CmdletAttribute("Remove", "CimInstance")]
public class Microsoft.Management.Infrastructure.CimCmdlets.RemoveCimInstanceCommand : CimBaseCommand {
    internal static string nameCimSession;
    internal static string nameComputerName;
    internal static string nameResourceUri;
    internal static string nameNamespace;
    internal static string nameCimInstance;
    internal static string nameQuery;
    internal static string nameQueryDialect;
    [ParameterAttribute]
[ParameterAttribute]
public CimSession[] CimSession { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public Uri ResourceUri { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[ParameterAttribute]
public String[] ComputerName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public string Namespace { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public UInt32 OperationTimeoutSec { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CimInstance InputObject { get; public set; }
    internal CimInstance CimInstance { get; }
    [ParameterAttribute]
[ParameterAttribute]
public string Query { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public string QueryDialect { get; public set; }
    public CimSession[] get_CimSession();
    public void set_CimSession(CimSession[] value);
    public Uri get_ResourceUri();
    public void set_ResourceUri(Uri value);
    public String[] get_ComputerName();
    public void set_ComputerName(String[] value);
    public string get_Namespace();
    public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_OperationTimeoutSec();
    [CompilerGeneratedAttribute]
public void set_OperationTimeoutSec(UInt32 value);
    public CimInstance get_InputObject();
    public void set_InputObject(CimInstance value);
    [CompilerGeneratedAttribute]
internal CimInstance get_CimInstance();
    public string get_Query();
    public void set_Query(string value);
    public string get_QueryDialect();
    public void set_QueryDialect(string value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CmdletAttribute("Remove", "CimSession")]
public class Microsoft.Management.Infrastructure.CimCmdlets.RemoveCimSessionCommand : CimBaseCommand {
    internal static string nameCimSession;
    internal static string nameComputerName;
    internal static string nameId;
    internal static string nameInstanceId;
    internal static string nameName;
    [ParameterAttribute]
public CimSession[] CimSession { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public String[] ComputerName { get; public set; }
    [ParameterAttribute]
public UInt32[] Id { get; public set; }
    [ParameterAttribute]
public Guid[] InstanceId { get; public set; }
    [ParameterAttribute]
public String[] Name { get; public set; }
    public CimSession[] get_CimSession();
    public void set_CimSession(CimSession[] value);
    public String[] get_ComputerName();
    public void set_ComputerName(String[] value);
    public UInt32[] get_Id();
    public void set_Id(UInt32[] value);
    public Guid[] get_InstanceId();
    public void set_InstanceId(Guid[] value);
    public String[] get_Name();
    public void set_Name(String[] value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
}
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CmdletAttribute("Set", "CimInstance")]
public class Microsoft.Management.Infrastructure.CimCmdlets.SetCimInstanceCommand : CimBaseCommand {
    internal static string nameCimSession;
    internal static string nameComputerName;
    internal static string nameResourceUri;
    internal static string nameNamespace;
    internal static string nameCimInstance;
    internal static string nameQuery;
    internal static string nameQueryDialect;
    internal static string nameProperty;
    [ParameterAttribute]
[ParameterAttribute]
public CimSession[] CimSession { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
[ParameterAttribute]
public String[] ComputerName { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public Uri ResourceUri { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public string Namespace { get; public set; }
    [AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ParameterAttribute]
public UInt32 OperationTimeoutSec { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CimInstance InputObject { get; public set; }
    internal CimInstance CimInstance { get; }
    [ParameterAttribute]
[ParameterAttribute]
public string Query { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
public string QueryDialect { get; public set; }
    [ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[ParameterAttribute]
[AliasAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary Property { get; public set; }
    [ParameterAttribute]
[ValidateNotNullAttribute]
public SwitchParameter PassThru { get; public set; }
    public CimSession[] get_CimSession();
    public void set_CimSession(CimSession[] value);
    public String[] get_ComputerName();
    public void set_ComputerName(String[] value);
    public Uri get_ResourceUri();
    public void set_ResourceUri(Uri value);
    public string get_Namespace();
    public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_OperationTimeoutSec();
    [CompilerGeneratedAttribute]
public void set_OperationTimeoutSec(UInt32 value);
    public CimInstance get_InputObject();
    public void set_InputObject(CimInstance value);
    [CompilerGeneratedAttribute]
internal CimInstance get_CimInstance();
    public string get_Query();
    public void set_Query(string value);
    public string get_QueryDialect();
    public void set_QueryDialect(string value);
    public IDictionary get_Property();
    public void set_Property(IDictionary value);
    [CompilerGeneratedAttribute]
public SwitchParameter get_PassThru();
    [CompilerGeneratedAttribute]
public void set_PassThru(SwitchParameter value);
    protected virtual void BeginProcessing();
    protected virtual void ProcessRecord();
    protected virtual void EndProcessing();
}
internal static class Microsoft.Management.Infrastructure.CimCmdlets.ValidationHelper : object {
    public static void ValidateNoNullArgument(object obj, string argumentName);
    public static void ValidateNoNullorWhiteSpaceArgument(string obj, string argumentName);
    public static string ValidateArgumentIsValidName(string parameterName, string value);
    public static String[] ValidateArgumentIsValidName(string parameterName, String[] value);
}
internal abstract class Microsoft.Management.Infrastructure.CimCmdlets.XOperationContextBase : object {
    protected string nameSpace;
    protected CimSessionProxy proxy;
    internal string Namespace { get; }
    internal CimSessionProxy Proxy { get; }
    internal string get_Namespace();
    internal CimSessionProxy get_Proxy();
}
