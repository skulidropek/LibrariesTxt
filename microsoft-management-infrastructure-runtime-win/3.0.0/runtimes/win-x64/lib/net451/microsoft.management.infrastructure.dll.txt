public class Microsoft.Management.Infrastructure.CimClass : object {
    private CimSystemProperties _systemProperties;
    private ClassHandle _classHandle;
    private bool _disposed;
    internal ClassHandle ClassHandle { get; }
    public string CimSuperClassName { get; }
    public CimClass CimSuperClass { get; }
    public CimReadOnlyKeyedCollection`1<CimPropertyDeclaration> CimClassProperties { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> CimClassQualifiers { get; }
    public CimReadOnlyKeyedCollection`1<CimMethodDeclaration> CimClassMethods { get; }
    public CimSystemProperties CimSystemProperties { get; }
    internal CimClass(ClassHandle handle);
    internal ClassHandle get_ClassHandle();
    public string get_CimSuperClassName();
    public CimClass get_CimSuperClass();
    public CimReadOnlyKeyedCollection`1<CimPropertyDeclaration> get_CimClassProperties();
    public CimReadOnlyKeyedCollection`1<CimQualifier> get_CimClassQualifiers();
    public CimReadOnlyKeyedCollection`1<CimMethodDeclaration> get_CimClassMethods();
    public CimSystemProperties get_CimSystemProperties();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void AssertNotDisposed();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
public static class Microsoft.Management.Infrastructure.CimConverter : object {
    private static Dictionary`2<Type, CimType> _dotNetTypeToScalarCimType;
    private static Dictionary`2<Type, CimType> _dotNetTypeToArrayCimType;
    private static CimConverter();
    public static Type GetDotNetType(CimType cimType);
    private static void InitializeDotNetTypeToCimTypeDictionaries();
    public static CimType GetCimType(Type dotNetType);
    private static CimType GetCimTypeFromDotNetValue(object dotNetValue);
    internal static CimType GetCimTypeFromDotNetValueOrThrowAnException(object dotNetValue);
}
public class Microsoft.Management.Infrastructure.CimException : Exception {
    private CimInstance _errorData;
    [CompilerGeneratedAttribute]
private NativeErrorCode <NativeErrorCode>k__BackingField;
    private static string serializationId_ErrorData;
    private bool _disposed;
    public NativeErrorCode NativeErrorCode { get; private set; }
    public CimInstance ErrorData { get; }
    public string MessageId { get; }
    public string ErrorSource { get; }
    public ushort ErrorType { get; }
    public UInt32 StatusCode { get; }
    internal CimException(MiResult errorCode, string errorMessage, InstanceHandle errorDetailsHandle);
    internal CimException(MiResult errorCode, string errorMessage, InstanceHandle errorDetailsHandle, string exceptionMessage);
    public CimException(CimInstance cimError);
    public CimException(string message);
    public CimException(string message, Exception innerException);
    protected CimException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public NativeErrorCode get_NativeErrorCode();
    [CompilerGeneratedAttribute]
private void set_NativeErrorCode(NativeErrorCode value);
    private static string GetExceptionMessage(CimInstance cimError);
    private static string GetExceptionMessage(InstanceHandle errorDetailsHandle);
    private static string GetExceptionMessage(MiResult errorCode, string errorMessage, InstanceHandle errorDetailsHandle);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public CimInstance get_ErrorData();
    private bool TryGetErrorDataProperty(string propertyName, T& propertyValue);
    private static bool TryGetErrorDataProperty(CimInstance errorData, string propertyName, T& propertyValue);
    public string get_MessageId();
    public string get_ErrorSource();
    public ushort get_ErrorType();
    public UInt32 get_StatusCode();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
    internal static void ThrowIfMiResultFailure(MiResult result);
    internal static void ThrowIfMiResultFailure(MiResult result, InstanceHandle errorData);
    internal static void ThrowIfMiResultFailure(MiResult result, string errorMessage, InstanceHandle errorData);
    internal static CimException GetExceptionIfMiResultFailure(MiResult result, string errorMessage, InstanceHandle errorData);
}
[FlagsAttribute]
public enum Microsoft.Management.Infrastructure.CimFlags : Enum {
    public long value__;
    public static CimFlags None;
    public static CimFlags Class;
    public static CimFlags Method;
    public static CimFlags Property;
    public static CimFlags Parameter;
    public static CimFlags Association;
    public static CimFlags Indication;
    public static CimFlags Reference;
    public static CimFlags Any;
    public static CimFlags EnableOverride;
    public static CimFlags DisableOverride;
    public static CimFlags Restricted;
    public static CimFlags ToSubclass;
    public static CimFlags Translatable;
    public static CimFlags Key;
    public static CimFlags In;
    public static CimFlags Out;
    public static CimFlags Required;
    public static CimFlags Static;
    public static CimFlags Abstract;
    public static CimFlags Terminal;
    public static CimFlags Expensive;
    public static CimFlags Stream;
    public static CimFlags ReadOnly;
    public static CimFlags NotModified;
    public static CimFlags NullValue;
    public static CimFlags Borrow;
    public static CimFlags Adopt;
}
public class Microsoft.Management.Infrastructure.CimInstance : object {
    private SharedInstanceHandle _myHandle;
    private CimSystemProperties _systemProperties;
    private static bool bRegistryRead;
    private static bool bNotSupportedAPIBehavior;
    private static string tempFileName;
    private static object _logThreadSafetyLock;
    private static StreamWriter _streamWriter;
    private bool _disposed;
    private static string serializationId_MiXml;
    private static string serializationId_CimSessionComputerName;
    private Guid _CimSessionInstanceID;
    private string _CimSessionComputerName;
    internal InstanceHandle InstanceHandle { get; }
    public CimClass CimClass { get; }
    public CimKeyedCollection`1<CimProperty> CimInstanceProperties { get; }
    public CimSystemProperties CimSystemProperties { get; }
    internal CimInstance(InstanceHandle handle, SharedInstanceHandle parentHandle);
    public CimInstance(CimInstance cimInstanceToClone);
    public CimInstance(string className);
    public CimInstance(string className, string namespaceName);
    public CimInstance(CimClass cimClass);
    private CimInstance(SerializationInfo info, StreamingContext context);
    private static CimInstance();
    internal InstanceHandle get_InstanceHandle();
    public CimClass get_CimClass();
    public CimKeyedCollection`1<CimProperty> get_CimInstanceProperties();
    public CimSystemProperties get_CimSystemProperties();
    internal static string GetCimSystemPath(CimSystemProperties sysProperties, IEnumerator cimPropertiesEnumerator);
    internal static void NotSupportedAPIBehaviorLog(string propertyName);
    internal static object ConvertToNativeLayer(object value, CimType cimType);
    internal static object ConvertToNativeLayer(object value);
    internal static object ConvertFromNativeLayer(object value, SharedInstanceHandle sharedParentHandle, CimInstance parent, bool clone);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void AssertNotDisposed();
    public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override object System.ICloneable.Clone();
    public Guid GetCimSessionInstanceId();
    internal void SetCimSessionInstanceId(Guid instanceID);
    public string GetCimSessionComputerName();
    internal void SetCimSessionComputerName(string computerName);
    public virtual string ToString();
}
public abstract class Microsoft.Management.Infrastructure.CimMethodDeclaration : object {
    public string Name { get; }
    public CimType ReturnType { get; }
    public CimReadOnlyKeyedCollection`1<CimMethodParameterDeclaration> Parameters { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    public abstract virtual string get_Name();
    public abstract virtual CimType get_ReturnType();
    public abstract virtual CimReadOnlyKeyedCollection`1<CimMethodParameterDeclaration> get_Parameters();
    public abstract virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
    public virtual string ToString();
}
public abstract class Microsoft.Management.Infrastructure.CimMethodParameter : object {
    public string Name { get; }
    public object Value { get; public set; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual CimType get_CimType();
    public abstract virtual CimFlags get_Flags();
    public static CimMethodParameter Create(string name, object value, CimFlags flags);
    public static CimMethodParameter Create(string name, object value, CimType type, CimFlags flags);
    public virtual string ToString();
}
public abstract class Microsoft.Management.Infrastructure.CimMethodParameterDeclaration : object {
    public string Name { get; }
    public CimType CimType { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    public string ReferenceClassName { get; }
    public abstract virtual string get_Name();
    public abstract virtual CimType get_CimType();
    public abstract virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
    public abstract virtual string get_ReferenceClassName();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Management.Infrastructure.CimMethodParametersCollection : CimKeyedCollection`1<CimMethodParameter> {
    private CimInstance _backingInstance;
    private bool _disposed;
    internal InstanceHandle InstanceHandleForMethodInvocation { get; }
    public int Count { get; }
    public CimMethodParameter Item { get; }
    internal CimMethodParametersCollection(CimInstance backingInstance);
    internal InstanceHandle get_InstanceHandleForMethodInvocation();
    public virtual void Add(CimMethodParameter newParameter);
    public virtual int get_Count();
    public virtual CimMethodParameter get_Item(string parameterName);
    public virtual IEnumerator`1<CimMethodParameter> GetEnumerator();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
    [CompilerGeneratedAttribute]
private CimMethodParameterBackedByCimProperty <GetEnumerator>b__10_0(CimProperty p);
}
public class Microsoft.Management.Infrastructure.CimMethodResult : CimMethodResultBase {
    private CimMethodParametersCollection _backingMethodParametersCollection;
    private bool _disposed;
    public CimMethodParameter ReturnValue { get; }
    public CimReadOnlyKeyedCollection`1<CimMethodParameter> OutParameters { get; }
    internal CimMethodResult(CimInstance backingInstance);
    public CimMethodParameter get_ReturnValue();
    public CimReadOnlyKeyedCollection`1<CimMethodParameter> get_OutParameters();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
}
public abstract class Microsoft.Management.Infrastructure.CimMethodResultBase : object {
}
public class Microsoft.Management.Infrastructure.CimMethodStreamedResult : CimMethodResultBase {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ItemValue>k__BackingField;
    [CompilerGeneratedAttribute]
private CimType <ItemType>k__BackingField;
    public string ParameterName { get; private set; }
    public object ItemValue { get; private set; }
    public CimType ItemType { get; private set; }
    internal CimMethodStreamedResult(string parameterName, object parameterValue, CimType parameterType);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
private void set_ParameterName(string value);
    [CompilerGeneratedAttribute]
public object get_ItemValue();
    [CompilerGeneratedAttribute]
private void set_ItemValue(object value);
    [CompilerGeneratedAttribute]
public CimType get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(CimType value);
}
public abstract class Microsoft.Management.Infrastructure.CimProperty : object {
    public string Name { get; }
    public object Value { get; public set; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public bool IsValueModified { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    public abstract virtual CimType get_CimType();
    public abstract virtual CimFlags get_Flags();
    public virtual bool get_IsValueModified();
    public virtual void set_IsValueModified(bool value);
    public static CimProperty Create(string name, object value, CimFlags flags);
    public static CimProperty Create(string name, object value, CimType type, CimFlags flags);
    public virtual string ToString();
    internal static object ConvertToNativeLayer(object value, CimType cimType);
}
public abstract class Microsoft.Management.Infrastructure.CimPropertyDeclaration : object {
    public string Name { get; }
    public object Value { get; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    public string ReferenceClassName { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual CimType get_CimType();
    public abstract virtual CimFlags get_Flags();
    public abstract virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
    public abstract virtual string get_ReferenceClassName();
    public virtual string ToString();
}
public abstract class Microsoft.Management.Infrastructure.CimQualifier : object {
    public string Name { get; }
    public object Value { get; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
    public abstract virtual CimType get_CimType();
    public abstract virtual CimFlags get_Flags();
    public virtual string ToString();
}
public class Microsoft.Management.Infrastructure.CimSession : object {
    private SessionHandle _handle;
    [CompilerGeneratedAttribute]
private string <ComputerName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <InstanceId>k__BackingField;
    private object _disposeThreadSafetyLock;
    private bool _disposed;
    public string ComputerName { get; private set; }
    public Guid InstanceId { get; private set; }
    private CimSession(SessionHandle handle, string computerName);
    [CompilerGeneratedAttribute]
public string get_ComputerName();
    [CompilerGeneratedAttribute]
private void set_ComputerName(string value);
    [CompilerGeneratedAttribute]
public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
private void set_InstanceId(Guid value);
    public static CimSession Create(string computerName);
    public static CimSession Create(string computerName, CimSessionOptions sessionOptions);
    public static CimAsyncResult`1<CimSession> CreateAsync(string computerName);
    public static CimAsyncResult`1<CimSession> CreateAsync(string computerName, CimSessionOptions sessionOptions);
    public void Close();
    public CimAsyncStatus CloseAsync();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
    public CimInstance GetInstance(string namespaceName, CimInstance instanceId);
    public CimInstance GetInstance(string namespaceName, CimInstance instanceId, CimOperationOptions options);
    public CimAsyncResult`1<CimInstance> GetInstanceAsync(string namespaceName, CimInstance instanceId);
    public CimAsyncResult`1<CimInstance> GetInstanceAsync(string namespaceName, CimInstance instanceId, CimOperationOptions options);
    private OperationHandle GetInstanceCore(string namespaceName, CimInstance instanceId, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public CimInstance ModifyInstance(CimInstance instance);
    public CimInstance ModifyInstance(string namespaceName, CimInstance instance);
    public CimInstance ModifyInstance(string namespaceName, CimInstance instance, CimOperationOptions options);
    public CimAsyncResult`1<CimInstance> ModifyInstanceAsync(CimInstance instance);
    public CimAsyncResult`1<CimInstance> ModifyInstanceAsync(string namespaceName, CimInstance instance);
    public CimAsyncResult`1<CimInstance> ModifyInstanceAsync(string namespaceName, CimInstance instance, CimOperationOptions options);
    private OperationHandle ModifyInstanceCore(string namespaceName, CimInstance instance, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public CimInstance CreateInstance(string namespaceName, CimInstance instance);
    public CimInstance CreateInstance(string namespaceName, CimInstance instance, CimOperationOptions options);
    public CimAsyncResult`1<CimInstance> CreateInstanceAsync(string namespaceName, CimInstance instance);
    public CimAsyncResult`1<CimInstance> CreateInstanceAsync(string namespaceName, CimInstance instance, CimOperationOptions options);
    private OperationHandle CreateInstanceCore(string namespaceName, CimInstance instance, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public void DeleteInstance(CimInstance instance);
    public void DeleteInstance(string namespaceName, CimInstance instance);
    public void DeleteInstance(string namespaceName, CimInstance instance, CimOperationOptions options);
    public CimAsyncStatus DeleteInstanceAsync(CimInstance instance);
    public CimAsyncStatus DeleteInstanceAsync(string namespaceName, CimInstance instance);
    public CimAsyncStatus DeleteInstanceAsync(string namespaceName, CimInstance instance, CimOperationOptions options);
    private OperationHandle DeleteInstanceCore(string namespaceName, CimInstance instance, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public IEnumerable`1<CimSubscriptionResult> Subscribe(string namespaceName, string queryDialect, string queryExpression);
    public IEnumerable`1<CimSubscriptionResult> Subscribe(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions operationOptions);
    public IEnumerable`1<CimSubscriptionResult> Subscribe(string namespaceName, string queryDialect, string queryExpression, CimSubscriptionDeliveryOptions options);
    public IEnumerable`1<CimSubscriptionResult> Subscribe(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions operationOptions, CimSubscriptionDeliveryOptions options);
    public CimAsyncMultipleResults`1<CimSubscriptionResult> SubscribeAsync(string namespaceName, string queryDialect, string queryExpression);
    public CimAsyncMultipleResults`1<CimSubscriptionResult> SubscribeAsync(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions operationOptions);
    public CimAsyncMultipleResults`1<CimSubscriptionResult> SubscribeAsync(string namespaceName, string queryDialect, string queryExpression, CimSubscriptionDeliveryOptions options);
    public CimAsyncMultipleResults`1<CimSubscriptionResult> SubscribeAsync(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions operationOptions, CimSubscriptionDeliveryOptions options);
    private OperationHandle SubscribeCore(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions operationOptions, CimSubscriptionDeliveryOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public IEnumerable`1<CimInstance> EnumerateInstances(string namespaceName, string className);
    public IEnumerable`1<CimInstance> EnumerateInstances(string namespaceName, string className, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateInstancesAsync(string namespaceName, string className);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateInstancesAsync(string namespaceName, string className, CimOperationOptions options);
    private OperationHandle EnumerateInstancesCore(string namespaceName, string className, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public IEnumerable`1<CimInstance> QueryInstances(string namespaceName, string queryDialect, string queryExpression);
    public IEnumerable`1<CimInstance> QueryInstances(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimInstance> QueryInstancesAsync(string namespaceName, string queryDialect, string queryExpression);
    public CimAsyncMultipleResults`1<CimInstance> QueryInstancesAsync(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions options);
    private OperationHandle QueryInstancesCore(string namespaceName, string queryDialect, string queryExpression, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public IEnumerable`1<CimInstance> EnumerateAssociatedInstances(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole);
    public IEnumerable`1<CimInstance> EnumerateAssociatedInstances(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateAssociatedInstancesAsync(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateAssociatedInstancesAsync(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole, CimOperationOptions options);
    private OperationHandle EnumerateAssociatedInstancesCore(string namespaceName, CimInstance sourceInstance, string associationClassName, string resultClassName, string sourceRole, string resultRole, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public IEnumerable`1<CimInstance> EnumerateReferencingInstances(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole);
    public IEnumerable`1<CimInstance> EnumerateReferencingInstances(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateReferencingInstancesAsync(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole);
    public CimAsyncMultipleResults`1<CimInstance> EnumerateReferencingInstancesAsync(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole, CimOperationOptions options);
    private OperationHandle EnumerateReferencingInstancesCore(string namespaceName, CimInstance sourceInstance, string associationClassName, string sourceRole, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public CimMethodResult InvokeMethod(CimInstance instance, string methodName, CimMethodParametersCollection methodParameters);
    public CimMethodResult InvokeMethod(string namespaceName, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters);
    public CimMethodResult InvokeMethod(string namespaceName, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters, CimOperationOptions options);
    public CimAsyncResult`1<CimMethodResult> InvokeMethodAsync(CimInstance instance, string methodName, CimMethodParametersCollection methodParameters);
    public CimAsyncResult`1<CimMethodResult> InvokeMethodAsync(string namespaceName, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters);
    public CimAsyncMultipleResults`1<CimMethodResultBase> InvokeMethodAsync(string namespaceName, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters, CimOperationOptions options);
    public CimMethodResult InvokeMethod(string namespaceName, string className, string methodName, CimMethodParametersCollection methodParameters);
    public CimMethodResult InvokeMethod(string namespaceName, string className, string methodName, CimMethodParametersCollection methodParameters, CimOperationOptions options);
    public CimAsyncResult`1<CimMethodResult> InvokeMethodAsync(string namespaceName, string className, string methodName, CimMethodParametersCollection methodParameters);
    public CimAsyncMultipleResults`1<CimMethodResultBase> InvokeMethodAsync(string namespaceName, string className, string methodName, CimMethodParametersCollection methodParameters, CimOperationOptions options);
    private OperationHandle InvokeMethodCore(string namespaceName, string className, CimInstance instance, string methodName, CimMethodParametersCollection methodParameters, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public CimClass GetClass(string namespaceName, string className);
    public CimClass GetClass(string namespaceName, string className, CimOperationOptions options);
    public CimAsyncResult`1<CimClass> GetClassAsync(string namespaceName, string className);
    public CimAsyncResult`1<CimClass> GetClassAsync(string namespaceName, string className, CimOperationOptions options);
    private OperationHandle GetClassCore(string namespaceName, string className, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public IEnumerable`1<CimClass> EnumerateClasses(string namespaceName);
    public IEnumerable`1<CimClass> EnumerateClasses(string namespaceName, string className);
    public IEnumerable`1<CimClass> EnumerateClasses(string namespaceName, string className, CimOperationOptions options);
    public CimAsyncMultipleResults`1<CimClass> EnumerateClassesAsync(string namespaceName);
    public CimAsyncMultipleResults`1<CimClass> EnumerateClassesAsync(string namespaceName, string className);
    public CimAsyncMultipleResults`1<CimClass> EnumerateClassesAsync(string namespaceName, string className, CimOperationOptions options);
    private OperationHandle EnumerateClassesCore(string namespaceName, string className, CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public bool TestConnection();
    public bool TestConnection(CimInstance& instance, CimException& exception);
    public CimAsyncResult`1<CimInstance> TestConnectionAsync();
    private OperationHandle TestConnectionCore(CimOperationOptions options, CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <CloseAsync>b__15_0(IObserver`1<object> observer);
    [CompilerGeneratedAttribute]
private OperationHandle <TestConnection>b__99_0(CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
    [CompilerGeneratedAttribute]
private OperationHandle <TestConnectionAsync>b__100_0(CimAsyncCallbacksReceiverBase asyncCallbacksReceiver);
}
public enum Microsoft.Management.Infrastructure.CimSubscriptionDeliveryType : Enum {
    public int value__;
    public static CimSubscriptionDeliveryType None;
    public static CimSubscriptionDeliveryType Push;
    public static CimSubscriptionDeliveryType Pull;
}
public class Microsoft.Management.Infrastructure.CimSubscriptionResult : object {
    private CimInstance _resultInstance;
    private string _bookmark;
    private string _machineId;
    private bool _disposed;
    public string Bookmark { get; }
    public string MachineId { get; }
    public CimInstance Instance { get; }
    internal CimSubscriptionResult(InstanceHandle handle, string bookmark, string machineId);
    public string get_Bookmark();
    public string get_MachineId();
    public CimInstance get_Instance();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
}
public class Microsoft.Management.Infrastructure.CimSystemProperties : object {
    private string _namespace;
    private string _serverName;
    private string _className;
    private string _path;
    public string Namespace { get; }
    public string ServerName { get; }
    public string ClassName { get; }
    public string Path { get; }
    internal void UpdateCimSystemProperties(string systemNamespace, string serverName, string className);
    internal void UpdateSystemPath(string Path);
    public string get_Namespace();
    public string get_ServerName();
    public string get_ClassName();
    public string get_Path();
}
public enum Microsoft.Management.Infrastructure.CimType : Enum {
    public int value__;
    public static CimType Unknown;
    public static CimType Boolean;
    public static CimType UInt8;
    public static CimType SInt8;
    public static CimType UInt16;
    public static CimType SInt16;
    public static CimType UInt32;
    public static CimType SInt32;
    public static CimType UInt64;
    public static CimType SInt64;
    public static CimType Real32;
    public static CimType Real64;
    public static CimType Char16;
    public static CimType DateTime;
    public static CimType String;
    public static CimType Reference;
    public static CimType Instance;
    public static CimType BooleanArray;
    public static CimType UInt8Array;
    public static CimType SInt8Array;
    public static CimType UInt16Array;
    public static CimType SInt16Array;
    public static CimType UInt32Array;
    public static CimType SInt32Array;
    public static CimType UInt64Array;
    public static CimType SInt64Array;
    public static CimType Real32Array;
    public static CimType Real64Array;
    public static CimType Char16Array;
    public static CimType DateTimeArray;
    public static CimType StringArray;
    public static CimType ReferenceArray;
    public static CimType InstanceArray;
}
public class Microsoft.Management.Infrastructure.Generic.CimAsyncMultipleResults`1 : object {
    private IObservable`1<T> _wrappedObservable;
    internal CimAsyncMultipleResults`1(IObservable`1<T> wrappedObservable);
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
}
public class Microsoft.Management.Infrastructure.Generic.CimAsyncResult`1 : object {
    private IObservable`1<T> _wrappedObservable;
    internal CimAsyncResult`1(IObservable`1<T> wrappedObservable);
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
}
public class Microsoft.Management.Infrastructure.Generic.CimAsyncStatus : object {
    private IObservable`1<object> _wrappedObservable;
    internal CimAsyncStatus(IObservable`1<object> wrappedObservable);
    public sealed virtual IDisposable Subscribe(IObserver`1<object> observer);
}
public abstract class Microsoft.Management.Infrastructure.Generic.CimKeyedCollection`1 : CimReadOnlyKeyedCollection`1<T> {
    public abstract virtual void Add(T newItem);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.Management.Infrastructure.Generic.CimReadOnlyKeyedCollection`1 : object {
    public int Count { get; }
    public T Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual T get_Item(string itemName);
    public abstract virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class Microsoft.Management.Infrastructure.Internal.CimApplication : object {
    private static Lazy`1<ApplicationHandle> LazyHandle;
    public static ApplicationHandle Handle { get; }
    private static CimApplication();
    private static ApplicationHandle GetApplicationHandle();
    public static ApplicationHandle get_Handle();
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Internal.CimTypeExtensionMethods : object {
    [ExtensionAttribute]
public static MiType ToMiType(CimType cimType);
    [ExtensionAttribute]
public static Type ToDotNetType(CimType cimType);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Internal.ClassHandleExtensionMethods : object {
    [ExtensionAttribute]
public static ClassHandle Clone(ClassHandle handleToClone);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimClassPropertiesCollection : CimReadOnlyKeyedCollection`1<CimPropertyDeclaration> {
    private ClassHandle classHandle;
    public int Count { get; }
    public CimPropertyDeclaration Item { get; }
    internal CimClassPropertiesCollection(ClassHandle classHandle);
    public virtual int get_Count();
    public virtual CimPropertyDeclaration get_Item(string propertyName);
    public virtual IEnumerator`1<CimPropertyDeclaration> GetEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimClassPropertyOfClass : CimPropertyDeclaration {
    private ClassHandle classHandle;
    private int index;
    public string Name { get; }
    public object Value { get; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    public string ReferenceClassName { get; }
    internal CimClassPropertyOfClass(ClassHandle classHandle, int index);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
    public virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
    public virtual string get_ReferenceClassName();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimClassQualifierCollection : CimReadOnlyKeyedCollection`1<CimQualifier> {
    private ClassHandle classHandle;
    public int Count { get; }
    public CimQualifier Item { get; }
    internal CimClassQualifierCollection(ClassHandle classHandle);
    public virtual int get_Count();
    public virtual CimQualifier get_Item(string qualifierName);
    public virtual IEnumerator`1<CimQualifier> GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodDeclarationCollection : CimReadOnlyKeyedCollection`1<CimMethodDeclaration> {
    private ClassHandle classHandle;
    public int Count { get; }
    public CimMethodDeclaration Item { get; }
    internal CimMethodDeclarationCollection(ClassHandle classHandle);
    public virtual int get_Count();
    public virtual CimMethodDeclaration get_Item(string methodName);
    public virtual IEnumerator`1<CimMethodDeclaration> GetEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodDeclarationOfClass : CimMethodDeclaration {
    private ClassHandle classHandle;
    private int index;
    public string Name { get; }
    public CimType ReturnType { get; }
    public CimReadOnlyKeyedCollection`1<CimMethodParameterDeclaration> Parameters { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    internal CimMethodDeclarationOfClass(ClassHandle classHandle, int index);
    public virtual string get_Name();
    public virtual CimType get_ReturnType();
    public virtual CimReadOnlyKeyedCollection`1<CimMethodParameterDeclaration> get_Parameters();
    public virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodParameterBackedByCimProperty : CimMethodParameter {
    private CimProperty _backingProperty;
    private string _cimSessionComputerName;
    private Guid _cimSessionInstanceId;
    public string Name { get; }
    public object Value { get; public set; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    internal CimMethodParameterBackedByCimProperty(CimProperty backingProperty);
    internal CimMethodParameterBackedByCimProperty(CimProperty backingProperty, string cimSessionComputerName, Guid cimSessionInstanceId);
    private void Initialize(string cimSessionComputerName, Guid cimSessionInstanceId);
    private void ProcessPropertyValue(object objectValue);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodParameterDeclarationCollection : CimReadOnlyKeyedCollection`1<CimMethodParameterDeclaration> {
    private ClassHandle classHandle;
    private int methodIndex;
    public int Count { get; }
    public CimMethodParameterDeclaration Item { get; }
    internal CimMethodParameterDeclarationCollection(ClassHandle classHandle, int index);
    public virtual int get_Count();
    public virtual CimMethodParameterDeclaration get_Item(string parameterName);
    public virtual IEnumerator`1<CimMethodParameterDeclaration> GetEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodParameterDeclarationOfMethod : CimMethodParameterDeclaration {
    private ClassHandle classHandle;
    private int index;
    private int parameterName;
    public string Name { get; }
    public CimType CimType { get; }
    public CimReadOnlyKeyedCollection`1<CimQualifier> Qualifiers { get; }
    public string ReferenceClassName { get; }
    internal CimMethodParameterDeclarationOfMethod(ClassHandle classHandle, int index, int name);
    public virtual string get_Name();
    public virtual CimType get_CimType();
    public virtual CimReadOnlyKeyedCollection`1<CimQualifier> get_Qualifiers();
    public virtual string get_ReferenceClassName();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodParameterQualifierCollection : CimReadOnlyKeyedCollection`1<CimQualifier> {
    private ClassHandle classHandle;
    private int methodIndex;
    private int parameterName;
    public int Count { get; }
    public CimQualifier Item { get; }
    internal CimMethodParameterQualifierCollection(ClassHandle classHandle, int methodIndex, int parameterName);
    public virtual int get_Count();
    public virtual CimQualifier get_Item(string qualifierName);
    public virtual IEnumerator`1<CimQualifier> GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodQualifierCollection : CimReadOnlyKeyedCollection`1<CimQualifier> {
    private ClassHandle classHandle;
    private int methodIndex;
    public int Count { get; }
    public CimQualifier Item { get; }
    internal CimMethodQualifierCollection(ClassHandle classHandle, int index);
    public virtual int get_Count();
    public virtual CimQualifier get_Item(string methodName);
    public virtual IEnumerator`1<CimQualifier> GetEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimMethodQualifierDeclarationOfMethod : CimQualifier {
    private ClassHandle classHandle;
    private int qualifierIndex;
    private int methodIndex;
    public string Name { get; }
    public object Value { get; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    internal CimMethodQualifierDeclarationOfMethod(ClassHandle classHandle, int methodIndex, int qualifierIndex);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimPropertiesCollection : CimKeyedCollection`1<CimProperty> {
    private SharedInstanceHandle _instanceHandle;
    private CimInstance _instance;
    public int Count { get; }
    public CimProperty Item { get; }
    internal CimPropertiesCollection(SharedInstanceHandle instanceHandle, CimInstance instance);
    public virtual void Add(CimProperty newProperty);
    public virtual int get_Count();
    public virtual CimProperty get_Item(string propertyName);
    public virtual IEnumerator`1<CimProperty> GetEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimPropertyOfInstance : CimProperty {
    private SharedInstanceHandle _instanceHandle;
    private CimInstance _instance;
    private int _index;
    public string Name { get; }
    public object Value { get; public set; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public bool IsValueModified { get; public set; }
    internal CimPropertyOfInstance(SharedInstanceHandle instanceHandle, CimInstance instance, int index);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
    public virtual bool get_IsValueModified();
    public virtual void set_IsValueModified(bool value);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Management.Infrastructure.Internal.Data.CimPropertyQualifierCollection : CimReadOnlyKeyedCollection`1<CimQualifier> {
    private ClassHandle classHandle;
    private string name;
    public int Count { get; }
    public CimQualifier Item { get; }
    internal CimPropertyQualifierCollection(ClassHandle classHandle, string name);
    public virtual int get_Count();
    public virtual CimQualifier get_Item(string qualifierName);
    public virtual IEnumerator`1<CimQualifier> GetEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimPropertyStandalone : CimProperty {
    private string _name;
    private object _value;
    private CimType _cimType;
    private CimFlags _flags;
    public string Name { get; }
    public object Value { get; public set; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    public bool IsValueModified { get; public set; }
    internal CimPropertyStandalone(string name, object value, CimType cimType, CimFlags flags);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
    public virtual bool get_IsValueModified();
    public virtual void set_IsValueModified(bool value);
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimQualifierOfClass : CimQualifier {
    private ClassHandle classHandle;
    private int index;
    public string Name { get; }
    public object Value { get; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    internal CimQualifierOfClass(ClassHandle classHandle, int index);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimQualifierOfMethodParameter : CimQualifier {
    private ClassHandle classHandle;
    private int qualifierIndex;
    private int parameterName;
    private int methodIndex;
    public string Name { get; }
    public object Value { get; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    internal CimQualifierOfMethodParameter(ClassHandle classHandle, int methodIndex, int parameterName, int index);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
}
internal class Microsoft.Management.Infrastructure.Internal.Data.CimQualifierOfProperty : CimQualifier {
    private ClassHandle classHandle;
    private int index;
    private string propertyName;
    public string Name { get; }
    public object Value { get; }
    public CimType CimType { get; }
    public CimFlags Flags { get; }
    internal CimQualifierOfProperty(ClassHandle classHandle, string propertyName, int index);
    public virtual string get_Name();
    public virtual object get_Value();
    public virtual CimType get_CimType();
    public virtual CimFlags get_Flags();
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Internal.Helpers : object {
    [ExtensionAttribute]
public static void SafeInvoke(EventHandler`1<T> eventHandler, object sender, T eventArgs);
    public static void ValidateNoNullElements(IList list);
    public static string ToStringFromNameAndValue(string name, object value);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Internal.InstanceHandleExtensionMethods : object {
    [ExtensionAttribute]
public static InstanceHandle Clone(InstanceHandle handleToClone);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Internal.MiTypeExtensionMethods : object {
    [ExtensionAttribute]
public static CimType ToCimType(MiType miType);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Internal.NativeErrorCodeExtensionMethods : object {
    [ExtensionAttribute]
public static NativeErrorCode ToNativeErrorCode(MiResult miResult);
}
internal enum Microsoft.Management.Infrastructure.Internal.Operations.CancellationMode : Enum {
    public int value__;
    public static CancellationMode NoCancellationOccured;
    public static CancellationMode ThrowOperationCancelledException;
    public static CancellationMode SilentlyStopProducingResults;
    public static CancellationMode IgnoreCancellationRequests;
}
internal abstract class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncCallbacksReceiverBase : object {
    private CimOperation _operation;
    private object _operationLock;
    private List`1<Action`1<CimOperation>> _operationPendingActions;
    private object _suppressFurtherUserCallbacksLock;
    private bool _suppressFurtherUserCallbacks;
    private ExecutionContext _threadExecutionContext;
    protected CimOperation Operation { get; }
    internal void SetOperation(CimOperation operation);
    private void SupressCallbacksWhenRequestedViaCancellation(object sender, EventArgs e);
    protected void InvokeWhenOperationIsSet(Action`1<CimOperation> action);
    protected CimOperation get_Operation();
    private static void DisposeOperationWhenPossibleWorker(CimOperation cimOperation);
    protected void DisposeOperationWhenPossible();
    internal void CallUnderOriginalExecutionContext(Action action);
    internal void CallIntoUserCallback(OperationCallbackProcessingContext callbackProcessingContext, Action userCallback, bool serializeCallbacks, bool suppressFurtherUserCallbacks);
    internal abstract virtual void ReportInternalError(OperationCallbackProcessingContext callbackProcessingContext, Exception internalError);
    private void ReportInternalErrorCore(OperationCallbackProcessingContext callbackProcessingContext, Exception internalError);
    public virtual void RegisterAcceptedAsyncCallbacks(OperationCallbacks operationCallbacks, CimOperationOptions operationOptions);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncCancellationDisposable : object {
    private CimOperation _operation;
    private bool _disposed;
    private object _disposeThreadSafetyLock;
    private SecurityContext _securityContext;
    internal CimAsyncCancellationDisposable(CimOperation operation);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <Dispose>b__5_0(object _);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncClassObservable : CimAsyncObservableBase`2<CimAsyncClassObserverProxy, CimClass> {
    private bool _shortenLifetimeOfResults;
    internal CimAsyncClassObservable(CimOperationOptions operationOptions, Func`2<CimAsyncCallbacksReceiverBase, OperationHandle> operationStarter);
    internal virtual CimAsyncClassObserverProxy CreateObserverProxy(IObserver`1<CimClass> observer);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncClassObserverProxy : CimAsyncObserverProxyBase`1<CimClass> {
    private bool _shortenLifetimeOfResults;
    internal CimAsyncClassObserverProxy(IObserver`1<CimClass> observer, bool shortenLifetimeOfResults);
    internal void ClassCallback(OperationCallbackProcessingContext callbackProcessingContext, OperationHandle operationHandle, ClassHandle ClassHandle, bool moreResults, MiResult operationResult, string errorMessage, InstanceHandle errorDetailsHandle);
    public virtual void RegisterAcceptedAsyncCallbacks(OperationCallbacks operationCallbacks, CimOperationOptions operationOptions);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncDelegatedObservable`1 : object {
    private Action`1<IObserver`1<T>> _subscribe;
    internal CimAsyncDelegatedObservable`1(Action`1<IObserver`1<T>> subscribe);
    public sealed virtual IDisposable Subscribe(IObserver`1<T> observer);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncIndicationObservable : CimAsyncObservableBase`2<CimAsyncIndicationObserverProxy, CimSubscriptionResult> {
    private bool _shortenLifetimeOfResults;
    internal CimAsyncIndicationObservable(CimOperationOptions operationOptions, Func`2<CimAsyncCallbacksReceiverBase, OperationHandle> operationStarter);
    internal virtual CimAsyncIndicationObserverProxy CreateObserverProxy(IObserver`1<CimSubscriptionResult> observer);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncIndicationObserverProxy : CimAsyncObserverProxyBase`1<CimSubscriptionResult> {
    private bool _shortenLifetimeOfResults;
    internal CimAsyncIndicationObserverProxy(IObserver`1<CimSubscriptionResult> observer, bool shortenLifetimeOfResults);
    internal void IndicationResultCallback(OperationCallbackProcessingContext callbackProcessingContext, OperationHandle operationHandle, InstanceHandle instanceHandle, string bookMark, string machineID, bool moreResults, MiResult operationResult, string errorMessage, InstanceHandle errorDetailsHandle);
    public virtual void RegisterAcceptedAsyncCallbacks(OperationCallbacks operationCallbacks, CimOperationOptions operationOptions);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncInstanceObservable : CimAsyncObservableBase`2<CimAsyncInstanceObserverProxy, CimInstance> {
    private bool _shortenLifetimeOfResults;
    private Guid _CimSessionInstanceID;
    private string _CimSessionComputerName;
    internal CimAsyncInstanceObservable(CimOperationOptions operationOptions, Guid cimSessionInstanceID, string cimSessionComputerName, Func`2<CimAsyncCallbacksReceiverBase, OperationHandle> operationStarter);
    internal virtual CimAsyncInstanceObserverProxy CreateObserverProxy(IObserver`1<CimInstance> observer);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncInstanceObserverProxy : CimAsyncObserverProxyBase`1<CimInstance> {
    private bool _shortenLifetimeOfResults;
    private Guid _CimSessionInstanceID;
    private string _CimSessionComputerName;
    internal CimAsyncInstanceObserverProxy(IObserver`1<CimInstance> observer, Guid cimSessionInstanceID, string cimSessionComputerName, bool shortenLifetimeOfResults);
    internal void InstanceResultCallback(OperationCallbackProcessingContext callbackProcessingContext, OperationHandle operationHandle, InstanceHandle instanceHandle, bool moreResults, MiResult operationResult, string errorMessage, InstanceHandle errorDetailsHandle);
    public virtual void RegisterAcceptedAsyncCallbacks(OperationCallbacks operationCallbacks, CimOperationOptions operationOptions);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncMethodResultObservable : CimAsyncObservableBase`2<CimAsyncMethodResultObserverProxy, CimMethodResultBase> {
    private bool _shortenLifetimeOfResults;
    private Guid _CimSessionInstanceID;
    private string _CimSessionComputerName;
    internal CimAsyncMethodResultObservable(CimOperationOptions operationOptions, Guid cimSessionInstanceID, string cimSessionComputerName, Func`2<CimAsyncCallbacksReceiverBase, OperationHandle> operationStarter);
    internal virtual CimAsyncMethodResultObserverProxy CreateObserverProxy(IObserver`1<CimMethodResultBase> observer);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncMethodResultObserverProxy : CimAsyncObserverProxyBase`1<CimMethodResultBase> {
    private bool _shortenLifetimeOfResults;
    private Guid _CimSessionInstanceID;
    private string _CimSessionComputerName;
    internal CimAsyncMethodResultObserverProxy(IObserver`1<CimMethodResultBase> observer, Guid cimSessionInstanceID, string cimSessionComputerName, bool shortenLifetimeOfResults);
    internal void InstanceResultCallback(OperationCallbackProcessingContext callbackProcessingContext, OperationHandle operationHandle, InstanceHandle instanceHandle, bool moreResults, MiResult operationResult, string errorMessage, InstanceHandle errorDetailsHandle);
    internal void StreamedParameterCallback(OperationCallbackProcessingContext callbackProcessingContext, OperationHandle operationHandle, string parameterName, object parameterValue, MiType parameterType);
    public virtual void RegisterAcceptedAsyncCallbacks(OperationCallbacks operationCallbacks, CimOperationOptions operationOptions);
}
internal abstract class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncObservableBase`2 : object {
    private Func`2<CimAsyncCallbacksReceiverBase, OperationHandle> _operationStarter;
    private Nullable`1<CancellationToken> _cancellationToken;
    private bool _reportOperationStarted;
    internal CimAsyncObservableBase`2(CimOperationOptions operationOptions, Func`2<CimAsyncCallbacksReceiverBase, OperationHandle> operationStarter);
    internal abstract virtual TObserverProxy CreateObserverProxy(IObserver`1<TResult> observer);
    public sealed virtual IDisposable Subscribe(IObserver`1<TResult> observer);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimAsyncObserverProxyBase`1 : CimAsyncCallbacksReceiverBase {
    private IObserver`1<T> _observer;
    private bool _reportOperationStarted;
    internal CimAsyncObserverProxyBase`1(IObserver`1<T> observer);
    internal void SetReportOperationStarted(bool reportOperationStarted);
    internal void ProcessNativeCallback(OperationCallbackProcessingContext callbackProcessingContext, T currentItem, bool moreResults, MiResult operationResult, string errorMessage, InstanceHandle errorDetailsHandle);
    private void ProcessEndOfResultsWorker(OperationCallbackProcessingContext callbackProcessingContext, CimOperation cimOperation, Exception exception);
    private void OnErrorInternal(OperationCallbackProcessingContext callbackProcessingContext, Exception exception);
    private void OnCompletedInternal(OperationCallbackProcessingContext callbackProcessingContext);
    private void OnNextInternal(OperationCallbackProcessingContext callbackProcessingContext, T item);
    internal virtual void ReportInternalError(OperationCallbackProcessingContext callbackProcessingContext, Exception internalError);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimOperation : object {
    private OperationHandle _handle;
    private IDisposable _cancellationTokenRegistration;
    private object _cancellationModeLock;
    private CancellationMode _cancellationMode;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> Cancelled;
    private bool _disposed;
    internal CancellationMode CancellationMode { get; }
    internal OperationHandle Handle { get; }
    internal CimOperation(OperationHandle handle, Nullable`1<CancellationToken> cancellationToken);
    internal CancellationMode get_CancellationMode();
    internal void Cancel(CancellationMode cancellationMode);
    [CompilerGeneratedAttribute]
internal void add_Cancelled(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
internal void remove_Cancelled(EventHandler`1<EventArgs> value);
    internal void IgnoreSubsequentCancellationRequests();
    internal OperationHandle get_Handle();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0();
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncClassEnumerable : CimSyncEnumerableBase`2<CimClass, CimSyncClassEnumerator> {
    private bool _shortenLifetimeOfResults;
    internal CimSyncClassEnumerable(CimOperationOptions operationOptions, Func`2<CimAsyncCallbacksReceiverBase, OperationHandle> operationStarter);
    internal virtual CimSyncClassEnumerator CreateEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncClassEnumerator : CimSyncEnumeratorBase`1<CimClass> {
    internal CimSyncClassEnumerator(bool shortenLifetimeOfResults);
    internal virtual MiResult NativeMoveNext(OperationHandle operationHandle, CimClass& currentItem, Boolean& moreResults, MiResult& operationResult, String& errorMessage, InstanceHandle& errorDetailsHandle);
}
internal abstract class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncEnumerableBase`2 : object {
    private Nullable`1<CancellationToken> _cancellationToken;
    private Func`2<CimAsyncCallbacksReceiverBase, OperationHandle> _operationStarter;
    internal CimSyncEnumerableBase`2(CimOperationOptions operationOptions, Func`2<CimAsyncCallbacksReceiverBase, OperationHandle> operationStarter);
    internal abstract virtual TEnumerator CreateEnumerator();
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal abstract class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncEnumeratorBase`1 : CimAsyncCallbacksReceiverBase {
    private bool _moreResultsAreExpected;
    [CompilerGeneratedAttribute]
private bool <ShortenLifetimeOfResults>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Current>k__BackingField;
    private bool _disposed;
    private object _disposeThreadSafetyLock;
    private Exception _internalErrorWhileProcessingAsyncCallback;
    private object _internalErrorWhileProcessingAsyncCallbackLock;
    internal bool ShortenLifetimeOfResults { get; private set; }
    public T Current { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    internal CimSyncEnumeratorBase`1(bool shortenLifetimeOfResults);
    [CompilerGeneratedAttribute]
internal bool get_ShortenLifetimeOfResults();
    [CompilerGeneratedAttribute]
private void set_ShortenLifetimeOfResults(bool value);
    internal abstract virtual MiResult NativeMoveNext(OperationHandle operationHandle, T& currentItem, Boolean& moreResults, MiResult& operationResult, String& errorMessage, InstanceHandle& errorDetailsHandle);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(T value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void DisposeCurrentItemIfNeeded();
    internal void AssertNotDisposed();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    internal virtual void ReportInternalError(OperationCallbackProcessingContext callbackProcessingContext, Exception internalError);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncIndicationEnumerable : CimSyncEnumerableBase`2<CimSubscriptionResult, CimSyncIndicationEnumerator> {
    private bool _shortenLifetimeOfResults;
    internal CimSyncIndicationEnumerable(CimOperationOptions operationOptions, Func`2<CimAsyncCallbacksReceiverBase, OperationHandle> operationStarter);
    internal virtual CimSyncIndicationEnumerator CreateEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncIndicationEnumerator : CimSyncEnumeratorBase`1<CimSubscriptionResult> {
    internal CimSyncIndicationEnumerator(bool shortenLifetimeOfResults);
    internal virtual MiResult NativeMoveNext(OperationHandle operationHandle, CimSubscriptionResult& currentItem, Boolean& moreResults, MiResult& operationResult, String& errorMessage, InstanceHandle& errorDetailsHandle);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncInstanceEnumerable : CimSyncEnumerableBase`2<CimInstance, CimSyncInstanceEnumerator> {
    private bool _shortenLifetimeOfResults;
    private Guid _CimSessionInstanceID;
    private string _CimSessionComputerName;
    internal CimSyncInstanceEnumerable(CimOperationOptions operationOptions, Guid cimSessionInstanceID, string cimSessionComputerName, Func`2<CimAsyncCallbacksReceiverBase, OperationHandle> operationStarter);
    internal virtual CimSyncInstanceEnumerator CreateEnumerator();
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.CimSyncInstanceEnumerator : CimSyncEnumeratorBase`1<CimInstance> {
    private Guid _CimSessionInstanceID;
    private string _CimSessionComputerName;
    internal CimSyncInstanceEnumerator(Guid cimSessionInstanceID, string cimSessionComputerName, bool shortenLifetimeOfResults);
    internal virtual MiResult NativeMoveNext(OperationHandle operationHandle, CimInstance& currentItem, Boolean& moreResults, MiResult& operationResult, String& errorMessage, InstanceHandle& errorDetailsHandle);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.ConvertingObservable`2 : object {
    private IObservable`1<TWrappedType> _wrappedObservable;
    internal ConvertingObservable`2(IObservable`1<TWrappedType> wrappedObservable);
    public sealed virtual IDisposable Subscribe(IObserver`1<TTargetType> observer);
}
internal class Microsoft.Management.Infrastructure.Internal.Operations.EmptyDisposable : object {
    private static Lazy`1<EmptyDisposable> lazySingleton;
    internal static EmptyDisposable Singleton { get; }
    private static EmptyDisposable();
    public sealed virtual void Dispose();
    internal static EmptyDisposable get_Singleton();
}
internal class Microsoft.Management.Infrastructure.Internal.SharedInstanceHandle : object {
    private InstanceHandle _handle;
    private SharedInstanceHandle _parent;
    private object _numberOfReferencesLock;
    private int _numberOfReferences;
    internal InstanceHandle Handle { get; }
    internal SharedInstanceHandle(InstanceHandle handle);
    internal SharedInstanceHandle(InstanceHandle handle, SharedInstanceHandle parent);
    internal InstanceHandle get_Handle();
    internal void AddRef();
    internal void Release();
}
internal class Microsoft.Management.Infrastructure.Internal.WeakReferenceHashSet`1 : object {
    private ConcurrentDictionary`2<WeakReference, object> _underlyingCollection;
    private static int InitialCleanupTriggerSize;
    private int _cleanupTriggerSize;
    public void Add(T o);
    public void Remove(T o);
    public IEnumerable`1<T> GetSnapshotOfLiveObjects();
    private void CleanUp();
}
public enum Microsoft.Management.Infrastructure.NativeErrorCode : Enum {
    public int value__;
    public static NativeErrorCode Ok;
    public static NativeErrorCode Failed;
    public static NativeErrorCode AccessDenied;
    public static NativeErrorCode InvalidNamespace;
    public static NativeErrorCode InvalidParameter;
    public static NativeErrorCode InvalidClass;
    public static NativeErrorCode NotFound;
    public static NativeErrorCode NotSupported;
    public static NativeErrorCode ClassHasChildren;
    public static NativeErrorCode ClassHasInstances;
    public static NativeErrorCode InvalidSuperClass;
    public static NativeErrorCode AlreadyExists;
    public static NativeErrorCode NoSuchProperty;
    public static NativeErrorCode TypeMismatch;
    public static NativeErrorCode QueryLanguageNotSupported;
    public static NativeErrorCode InvalidQuery;
    public static NativeErrorCode MethodNotAvailable;
    public static NativeErrorCode MethodNotFound;
    public static NativeErrorCode NamespaceNotEmpty;
    public static NativeErrorCode InvalidEnumerationContext;
    public static NativeErrorCode InvalidOperationTimeout;
    public static NativeErrorCode PullHasBeenAbandoned;
    public static NativeErrorCode PullCannotBeAbandoned;
    public static NativeErrorCode FilteredEnumerationNotSupported;
    public static NativeErrorCode ContinuationOnErrorNotSupported;
    public static NativeErrorCode ServerLimitsExceeded;
    public static NativeErrorCode ServerIsShuttingDown;
}
public enum Microsoft.Management.Infrastructure.Options.CertificateAuthenticationMechanism : Enum {
    public int value__;
    public static CertificateAuthenticationMechanism Default;
    public static CertificateAuthenticationMechanism ClientCertificate;
    public static CertificateAuthenticationMechanism IssuerCertificate;
}
public enum Microsoft.Management.Infrastructure.Options.CimCallbackMode : Enum {
    public int value__;
    public static CimCallbackMode None;
    public static CimCallbackMode Report;
    public static CimCallbackMode Inquire;
    public static CimCallbackMode Ignore;
}
public class Microsoft.Management.Infrastructure.Options.CimCredential : object {
    private NativeCimCredentialHandle credential;
    public CimCredential(string authenticationMechanism, string certificateThumbprint);
    public CimCredential(string authenticationMechanism, string domain, string userName, SecureString password);
    public CimCredential(string authenticationMechanism);
    public CimCredential(CertificateAuthenticationMechanism authenticationMechanism, string certificateThumbprint);
    public CimCredential(PasswordAuthenticationMechanism authenticationMechanism, string domain, string userName, SecureString password);
    public CimCredential(ImpersonatedAuthenticationMechanism authenticationMechanism);
    internal NativeCimCredentialHandle GetCredential();
}
[FlagsAttribute]
public enum Microsoft.Management.Infrastructure.Options.CimOperationFlags : Enum {
    public long value__;
    public static CimOperationFlags None;
    public static CimOperationFlags NoTypeInformation;
    public static CimOperationFlags BasicTypeInformation;
    public static CimOperationFlags StandardTypeInformation;
    public static CimOperationFlags FullTypeInformation;
    public static CimOperationFlags LocalizedQualifiers;
    public static CimOperationFlags ExpensiveProperties;
    public static CimOperationFlags PolymorphismShallow;
    public static CimOperationFlags PolymorphismDeepBasePropsOnly;
    public static CimOperationFlags ReportOperationStarted;
}
public class Microsoft.Management.Infrastructure.Options.CimOperationOptions : object {
    private Lazy`1<OperationOptionsHandle> _operationOptionsHandle;
    private OperationCallbacks _operationCallback;
    private WriteMessageCallback _writeMessageCallback;
    private WriteProgressCallback _writeProgressCallback;
    private WriteErrorCallback _writeErrorCallback;
    private PromptUserCallback _promptUserCallback;
    [CompilerGeneratedAttribute]
private Nullable`1<CancellationToken> <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeysOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClassNamesOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private CimOperationFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableMethodResultStreaming>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShortenLifetimeOfResults>k__BackingField;
    private int _disposed;
    private OperationOptionsHandle OperationOptionsHandleOnDemand { get; }
    internal OperationOptionsHandle OperationOptionsHandle { get; }
    internal OperationCallbacks OperationCallback { get; }
    public TimeSpan Timeout { get; public set; }
    public Uri ResourceUriPrefix { get; public set; }
    public Uri ResourceUri { get; public set; }
    public bool UseMachineId { get; public set; }
    public CimCallbackMode WriteErrorMode { get; public set; }
    public CimCallbackMode PromptUserMode { get; public set; }
    unknown WriteMessageCallback WriteMessage {public set; }
    unknown WriteProgressCallback WriteProgress {public set; }
    unknown WriteErrorCallback WriteError {public set; }
    unknown PromptUserCallback PromptUser {public set; }
    public Nullable`1<CancellationToken> CancellationToken { get; public set; }
    public bool KeysOnly { get; public set; }
    public bool ClassNamesOnly { get; public set; }
    public CimOperationFlags Flags { get; public set; }
    public bool ReportOperationStarted { get; }
    public bool EnableMethodResultStreaming { get; public set; }
    public bool ShortenLifetimeOfResults { get; public set; }
    public bool IsDisposed { get; }
    public CimOperationOptions(bool mustUnderstand);
    public CimOperationOptions(CimOperationOptions optionsToClone);
    private OperationOptionsHandle get_OperationOptionsHandleOnDemand();
    internal OperationOptionsHandle get_OperationOptionsHandle();
    internal OperationCallbacks get_OperationCallback();
    public void set_Timeout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_ResourceUriPrefix(Uri value);
    public Uri get_ResourceUriPrefix();
    public void set_ResourceUri(Uri value);
    public Uri get_ResourceUri();
    public void set_UseMachineId(bool value);
    public bool get_UseMachineId();
    public void SetOption(string optionName, string optionValue);
    public void SetPromptUserRegularMode(CimCallbackMode callbackMode, bool automaticConfirmation);
    public void SetOption(string optionName, UInt32 optionValue);
    internal void WriteMessageCallbackInternal(OperationCallbackProcessingContext callbackProcessingContext, OperationHandle operationHandle, UInt32 channel, string message);
    private void WriteProgressCallbackInternal(OperationCallbackProcessingContext callbackProcessingContext, OperationHandle operationHandle, string activity, string currentOperation, string statusDescription, UInt32 percentageCompleted, UInt32 secondsRemaining);
    internal void WriteErrorCallbackInternal(OperationCallbackProcessingContext callbackProcessingContext, OperationHandle operationHandle, InstanceHandle instanceHandle, MIResponseType& response);
    internal void PromptUserCallbackInternal(OperationCallbackProcessingContext callbackProcessingContext, OperationHandle operationHandle, string message, MiPromptType promptType, MIResponseType& response);
    public void set_WriteErrorMode(CimCallbackMode value);
    public CimCallbackMode get_WriteErrorMode();
    public void set_PromptUserMode(CimCallbackMode value);
    public CimCallbackMode get_PromptUserMode();
    public void set_WriteMessage(WriteMessageCallback value);
    public void set_WriteProgress(WriteProgressCallback value);
    public void set_WriteError(WriteErrorCallback value);
    public void set_PromptUser(PromptUserCallback value);
    public void EnableChannel(UInt32 channelNumber);
    public void DisableChannel(UInt32 channelNumber);
    public void SetCustomOption(string optionName, bool optionValue, bool mustComply);
    public void SetCustomOption(string optionName, byte optionValue, bool mustComply);
    public void SetCustomOption(string optionName, sbyte optionValue, bool mustComply);
    public void SetCustomOption(string optionName, ushort optionValue, bool mustComply);
    public void SetCustomOption(string optionName, short optionValue, bool mustComply);
    public void SetCustomOption(string optionName, UInt32 optionValue, bool mustComply);
    public void SetCustomOption(string optionName, int optionValue, bool mustComply);
    public void SetCustomOption(string optionName, ulong optionValue, bool mustComply);
    public void SetCustomOption(string optionName, long optionValue, bool mustComply);
    public void SetCustomOption(string optionName, float optionValue, bool mustComply);
    public void SetCustomOption(string optionName, double optionValue, bool mustComply);
    public void SetCustomOption(string optionName, char optionValue, bool mustComply);
    public void SetCustomOption(string optionName, string optionValue, bool mustComply);
    public void SetCustomOption(string optionName, object optionValue, CimType cimType, bool mustComply);
    [CompilerGeneratedAttribute]
public Nullable`1<CancellationToken> get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(Nullable`1<CancellationToken> value);
    [CompilerGeneratedAttribute]
public bool get_KeysOnly();
    [CompilerGeneratedAttribute]
public void set_KeysOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClassNamesOnly();
    [CompilerGeneratedAttribute]
public void set_ClassNamesOnly(bool value);
    [CompilerGeneratedAttribute]
public CimOperationFlags get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(CimOperationFlags value);
    public bool get_ReportOperationStarted();
    [CompilerGeneratedAttribute]
public bool get_EnableMethodResultStreaming();
    [CompilerGeneratedAttribute]
public void set_EnableMethodResultStreaming(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShortenLifetimeOfResults();
    [CompilerGeneratedAttribute]
public void set_ShortenLifetimeOfResults(bool value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public bool get_IsDisposed();
    internal void AssertNotDisposed();
    private sealed virtual override object System.ICloneable.Clone();
}
public enum Microsoft.Management.Infrastructure.Options.CimPromptType : Enum {
    public int value__;
    public static CimPromptType None;
    public static CimPromptType Normal;
    public static CimPromptType Critical;
}
public enum Microsoft.Management.Infrastructure.Options.CimResponseType : Enum {
    public int value__;
    public static CimResponseType None;
    public static CimResponseType No;
    public static CimResponseType Yes;
    public static CimResponseType NoToAll;
    public static CimResponseType YesToAll;
}
public class Microsoft.Management.Infrastructure.Options.CimSessionOptions : object {
    private Lazy`1<DestinationOptionsHandle> _destinationOptionsHandle;
    [CompilerGeneratedAttribute]
private string <Protocol>k__BackingField;
    private bool _disposed;
    internal DestinationOptionsHandle DestinationOptionsHandleOnDemand { get; }
    internal DestinationOptionsHandle DestinationOptionsHandle { get; }
    internal string Protocol { get; private set; }
    public TimeSpan Timeout { get; public set; }
    public CultureInfo Culture { get; public set; }
    public CultureInfo UICulture { get; public set; }
    protected CimSessionOptions(string protocol);
    private CimSessionOptions(string protocol, bool validateProtocol);
    internal CimSessionOptions(CimSessionOptions optionsToClone);
    internal DestinationOptionsHandle get_DestinationOptionsHandleOnDemand();
    internal DestinationOptionsHandle get_DestinationOptionsHandle();
    [CompilerGeneratedAttribute]
internal string get_Protocol();
    [CompilerGeneratedAttribute]
private void set_Protocol(string value);
    public void SetCustomOption(string optionName, string optionValue);
    public void SetCustomOption(string optionName, UInt32 optionValue);
    public void AddDestinationCredentials(CimCredential credential);
    public void set_Timeout(TimeSpan value);
    public TimeSpan get_Timeout();
    public void set_Culture(CultureInfo value);
    public CultureInfo get_Culture();
    public void set_UICulture(CultureInfo value);
    public CultureInfo get_UICulture();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
    private sealed virtual override object System.ICloneable.Clone();
}
public class Microsoft.Management.Infrastructure.Options.CimSubscriptionDeliveryOptions : object {
    private SubscriptionDeliveryOptionsHandle _subscriptionDeliveryOptionsHandle;
    private bool _disposed;
    internal SubscriptionDeliveryOptionsHandle SubscriptionDeliveryOptionsHandle { get; }
    public CimSubscriptionDeliveryOptions(CimSubscriptionDeliveryType types);
    public CimSubscriptionDeliveryOptions(CimSubscriptionDeliveryOptions optionsToClone);
    internal SubscriptionDeliveryOptionsHandle get_SubscriptionDeliveryOptionsHandle();
    private void Initialize(CimSubscriptionDeliveryType types);
    public void SetString(string optionName, string optionValue, UInt32 flags);
    public void SetNumber(string optionName, UInt32 optionValue, UInt32 flags);
    public void SetDateTime(string optionName, DateTime optionValue, UInt32 flags);
    public void SetDateTime(string optionName, TimeSpan optionValue, UInt32 flags);
    public void SetInterval(string optionName, TimeSpan optionValue, UInt32 flags);
    public void AddCredentials(string optionName, CimCredential optionValue, UInt32 flags);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void AssertNotDisposed();
    private sealed virtual override object System.ICloneable.Clone();
}
public enum Microsoft.Management.Infrastructure.Options.CimWriteMessageChannel : Enum {
    public int value__;
    public static CimWriteMessageChannel Warning;
    public static CimWriteMessageChannel Verbose;
    public static CimWriteMessageChannel Debug;
}
public class Microsoft.Management.Infrastructure.Options.DComSessionOptions : CimSessionOptions {
    public bool PacketPrivacy { get; public set; }
    public bool PacketIntegrity { get; public set; }
    public ImpersonationType Impersonation { get; public set; }
    public DComSessionOptions(DComSessionOptions optionsToClone);
    public void set_PacketPrivacy(bool value);
    public bool get_PacketPrivacy();
    public void set_PacketIntegrity(bool value);
    public bool get_PacketIntegrity();
    public void set_Impersonation(ImpersonationType value);
    public ImpersonationType get_Impersonation();
}
public enum Microsoft.Management.Infrastructure.Options.ImpersonatedAuthenticationMechanism : Enum {
    public int value__;
    public static ImpersonatedAuthenticationMechanism None;
    public static ImpersonatedAuthenticationMechanism Negotiate;
    public static ImpersonatedAuthenticationMechanism Kerberos;
    public static ImpersonatedAuthenticationMechanism NtlmDomain;
}
public enum Microsoft.Management.Infrastructure.Options.ImpersonationType : Enum {
    public int value__;
    public static ImpersonationType None;
    public static ImpersonationType Default;
    public static ImpersonationType Delegate;
    public static ImpersonationType Identify;
    public static ImpersonationType Impersonate;
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Options.Internal.CimFlagsExtensionMethods : object {
    [ExtensionAttribute]
public static MiFlags ToMiFlags(CimFlags cimFlags);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Options.Internal.CimSubscriptionDeliveryOptionssExtensionMethods : object {
    [ExtensionAttribute]
internal static SubscriptionDeliveryOptionsHandle GetSubscriptionDeliveryOptionsHandle(CimSubscriptionDeliveryOptions deliveryOptions);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Options.Internal.ImpersonationTypeExtensionMethods : object {
    [ExtensionAttribute]
public static MiImpersonationType ToNativeType(ImpersonationType impersonationType);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Options.Internal.MiFlagsExtensionMethods : object {
    [ExtensionAttribute]
public static CimFlags ToCimFlags(MiFlags miFlags);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Options.Internal.OperationFlagsExtensionMethods : object {
    [ExtensionAttribute]
public static MiOperationFlags ToNative(CimOperationFlags operationFlags);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Options.Internal.OperationOptionsExtensionMethods : object {
    [ExtensionAttribute]
internal static OperationCallbacks GetOperationCallbacks(CimOperationOptions operationOptions);
    [ExtensionAttribute]
internal static OperationCallbacks GetOperationCallbacks(CimOperationOptions operationOptions, CimAsyncCallbacksReceiverBase acceptCallbacksReceiver);
    [ExtensionAttribute]
internal static MiOperationFlags GetOperationFlags(CimOperationOptions operationOptions);
    [ExtensionAttribute]
internal static OperationOptionsHandle GetOperationOptionsHandle(CimOperationOptions operationOptions);
    [ExtensionAttribute]
internal static bool GetKeysOnly(CimOperationOptions operationOptions);
    [ExtensionAttribute]
internal static bool GetClassNamesOnly(CimOperationOptions operationOptions);
    [ExtensionAttribute]
internal static Nullable`1<CancellationToken> GetCancellationToken(CimOperationOptions operationOptions);
    [ExtensionAttribute]
internal static bool GetShortenLifetimeOfResults(CimOperationOptions operationOptions);
    [ExtensionAttribute]
internal static bool GetReportOperationStarted(CimOperationOptions operationOptions);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Options.Internal.PacketEncodingExtensionMethods : object {
    [ExtensionAttribute]
public static string ToNativeType(PacketEncoding packetEncoding);
    public static PacketEncoding FromNativeType(string packetEncoding);
}
[ExtensionAttribute]
internal static class Microsoft.Management.Infrastructure.Options.Internal.ProxyTypeExtensionMethods : object {
    [ExtensionAttribute]
public static string ToNativeType(ProxyType proxyType);
    public static ProxyType FromNativeType(string proxyType);
}
public enum Microsoft.Management.Infrastructure.Options.PacketEncoding : Enum {
    public int value__;
    public static PacketEncoding Default;
    public static PacketEncoding Utf8;
    public static PacketEncoding Utf16;
}
public enum Microsoft.Management.Infrastructure.Options.PasswordAuthenticationMechanism : Enum {
    public int value__;
    public static PasswordAuthenticationMechanism Default;
    public static PasswordAuthenticationMechanism Digest;
    public static PasswordAuthenticationMechanism Negotiate;
    public static PasswordAuthenticationMechanism Basic;
    public static PasswordAuthenticationMechanism Kerberos;
    public static PasswordAuthenticationMechanism NtlmDomain;
    public static PasswordAuthenticationMechanism CredSsp;
}
public class Microsoft.Management.Infrastructure.Options.PromptUserCallback : MulticastDelegate {
    public PromptUserCallback(object object, IntPtr method);
    public virtual CimResponseType Invoke(string message, CimPromptType promptType);
    public virtual IAsyncResult BeginInvoke(string message, CimPromptType promptType, AsyncCallback callback, object object);
    public virtual CimResponseType EndInvoke(IAsyncResult result);
}
public enum Microsoft.Management.Infrastructure.Options.ProxyType : Enum {
    public int value__;
    public static ProxyType None;
    public static ProxyType WinHttp;
    public static ProxyType Auto;
    public static ProxyType InternetExplorer;
}
public class Microsoft.Management.Infrastructure.Options.WriteErrorCallback : MulticastDelegate {
    public WriteErrorCallback(object object, IntPtr method);
    public virtual CimResponseType Invoke(CimInstance cimError);
    public virtual IAsyncResult BeginInvoke(CimInstance cimError, AsyncCallback callback, object object);
    public virtual CimResponseType EndInvoke(IAsyncResult result);
}
public class Microsoft.Management.Infrastructure.Options.WriteMessageCallback : MulticastDelegate {
    public WriteMessageCallback(object object, IntPtr method);
    public virtual void Invoke(UInt32 channel, string message);
    public virtual IAsyncResult BeginInvoke(UInt32 channel, string message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Management.Infrastructure.Options.WriteProgressCallback : MulticastDelegate {
    public WriteProgressCallback(object object, IntPtr method);
    public virtual void Invoke(string activity, string currentOperation, string statusDescription, UInt32 percentageCompleted, UInt32 secondsRemaining);
    public virtual IAsyncResult BeginInvoke(string activity, string currentOperation, string statusDescription, UInt32 percentageCompleted, UInt32 secondsRemaining, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Management.Infrastructure.Options.WSManSessionOptions : CimSessionOptions {
    public UInt32 DestinationPort { get; public set; }
    public UInt32 MaxEnvelopeSize { get; public set; }
    public bool CertCACheck { get; public set; }
    public bool CertCNCheck { get; public set; }
    public bool CertRevocationCheck { get; public set; }
    public bool UseSsl { get; public set; }
    public ProxyType ProxyType { get; public set; }
    public PacketEncoding PacketEncoding { get; public set; }
    public bool NoEncryption { get; public set; }
    public bool EncodePortInServicePrincipalName { get; public set; }
    public Uri HttpUrlPrefix { get; public set; }
    public WSManSessionOptions(WSManSessionOptions optionsToClone);
    public void set_DestinationPort(UInt32 value);
    public UInt32 get_DestinationPort();
    public void set_MaxEnvelopeSize(UInt32 value);
    public UInt32 get_MaxEnvelopeSize();
    public void set_CertCACheck(bool value);
    public bool get_CertCACheck();
    public void set_CertCNCheck(bool value);
    public bool get_CertCNCheck();
    public void set_CertRevocationCheck(bool value);
    public bool get_CertRevocationCheck();
    public void set_UseSsl(bool value);
    public bool get_UseSsl();
    public void set_ProxyType(ProxyType value);
    public ProxyType get_ProxyType();
    public void set_PacketEncoding(PacketEncoding value);
    public PacketEncoding get_PacketEncoding();
    public void set_NoEncryption(bool value);
    public bool get_NoEncryption();
    public void set_EncodePortInServicePrincipalName(bool value);
    public bool get_EncodePortInServicePrincipalName();
    public void set_HttpUrlPrefix(Uri value);
    public Uri get_HttpUrlPrefix();
    public void AddProxyCredentials(CimCredential credential);
}
public class Microsoft.Management.Infrastructure.Serialization.CimDeserializer : object {
    private DeserializerHandle _myHandle;
    private bool _disposed;
    private CimDeserializer(string format, UInt32 flags);
    public static CimDeserializer Create();
    public static CimDeserializer Create(string format, UInt32 flags);
    public CimInstance DeserializeInstance(Byte[] serializedData, UInt32& offset);
    internal InstanceHandle DeserializeInstanceHandle(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> cimClasses);
    public CimInstance DeserializeInstance(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> cimClasses);
    public CimClass DeserializeClass(Byte[] serializedData, UInt32& offset);
    internal ClassHandle DeserializeClassHandle(Byte[] serializedData, UInt32& offset, CimClass parentClass, string computerName, string namespaceName);
    public CimClass DeserializeClass(Byte[] serializedData, UInt32& offset, CimClass parentClass);
    public CimClass DeserializeClass(Byte[] serializedData, UInt32& offset, CimClass parentClass, string computerName, string namespaceName);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void AssertNotDisposed();
}
internal class Microsoft.Management.Infrastructure.Serialization.CimMofDeserializer : object {
    private DeserializerHandle _myHandle;
    [CompilerGeneratedAttribute]
private MofDeserializerSchemaValidationOption <SchemaValidationOption>k__BackingField;
    private bool _disposed;
    public MofDeserializerSchemaValidationOption SchemaValidationOption { get; public set; }
    private CimMofDeserializer(string format, UInt32 flags);
    internal static ClassObjectNeededCallbackDelegate CreateClassObjectNeededCallbackDelegate(OnClassNeeded wrappedcallback);
    internal static GetIncludedFileBufferCallbackDelegate CreateGetIncludedFileBufferCallback(GetIncludedFileContent wrappedcallback);
    [CompilerGeneratedAttribute]
public MofDeserializerSchemaValidationOption get_SchemaValidationOption();
    [CompilerGeneratedAttribute]
public void set_SchemaValidationOption(MofDeserializerSchemaValidationOption value);
    private CimOperationOptions GetOperationOptions();
    public static CimMofDeserializer Create();
    public static CimMofDeserializer Create(string format, UInt32 flags);
    internal InstanceHandle[] DeserializeInstanceHandle(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> cimClasses, OnClassNeeded onClassNeededCallback, GetIncludedFileContent getIncludedFileCallback);
    public IEnumerable`1<CimInstance> DeserializeInstances(Byte[] serializedData, UInt32& offset);
    public IEnumerable`1<CimInstance> DeserializeInstances(Byte[] serializedData, UInt32& offset, OnClassNeeded onClassNeededCallback, GetIncludedFileContent getIncludedFileCallback);
    public IEnumerable`1<CimInstance> DeserializeInstances(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> cimClasses, OnClassNeeded onClassNeededCallback, GetIncludedFileContent getIncludedFileCallback);
    internal ClassHandle[] DeserializeClassHandle(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> cimClasses, string computerName, string namespaceName, OnClassNeeded onClassNeededCallback, GetIncludedFileContent getIncludedFileCallback);
    public IEnumerable`1<CimClass> DeserializeClasses(Byte[] serializedData, UInt32& offset);
    public IEnumerable`1<CimClass> DeserializeClasses(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> classes);
    public IEnumerable`1<CimClass> DeserializeClasses(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> classes, OnClassNeeded onClassNeededCallback, GetIncludedFileContent getIncludedFileCallback);
    public IEnumerable`1<CimClass> DeserializeClasses(Byte[] serializedData, UInt32& offset, IEnumerable`1<CimClass> classes, string computerName, string namespaceName, OnClassNeeded onClassNeededCallback, GetIncludedFileContent getIncludedFileCallback);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void AssertNotDisposed();
}
internal static class Microsoft.Management.Infrastructure.Serialization.CimMofSerializer : object {
    private static CimSerializer CreateCimMofSerializer(string format, UInt32 flags);
    public static CimSerializer Create();
}
public class Microsoft.Management.Infrastructure.Serialization.CimSerializer : object {
    private SerializerHandle _myHandle;
    private bool _disposed;
    private CimSerializer(string format, UInt32 flags);
    internal CimSerializer(SerializerHandle handle);
    public static CimSerializer Create();
    public static CimSerializer Create(string format, UInt32 flags);
    public bool Serialize(CimInstance cimInstance, InstanceSerializationOptions options, Byte[] buffer, UInt32& offset);
    public bool Serialize(CimClass cimClass, ClassSerializationOptions options, Byte[] buffer, UInt32& offset);
    public Byte[] Serialize(CimInstance cimInstance, InstanceSerializationOptions options);
    public Byte[] Serialize(CimClass cimClass, ClassSerializationOptions options);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void AssertNotDisposed();
}
[FlagsAttribute]
public enum Microsoft.Management.Infrastructure.Serialization.ClassSerializationOptions : Enum {
    public UInt32 value__;
    public static ClassSerializationOptions None;
    public static ClassSerializationOptions IncludeParentClasses;
}
[FlagsAttribute]
public enum Microsoft.Management.Infrastructure.Serialization.InstanceSerializationOptions : Enum {
    public UInt32 value__;
    public static InstanceSerializationOptions None;
    public static InstanceSerializationOptions IncludeClasses;
}
internal enum Microsoft.Management.Infrastructure.Serialization.MofDeserializerSchemaValidationOption : Enum {
    public int value__;
    public static MofDeserializerSchemaValidationOption Default;
    public static MofDeserializerSchemaValidationOption Strict;
    public static MofDeserializerSchemaValidationOption Loose;
    public static MofDeserializerSchemaValidationOption IgnorePropertyType;
    public static MofDeserializerSchemaValidationOption Ignore;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Management.Infrastructure.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AppDomainIsBeingUnloaded { get; }
    internal static string ArrayCannotContainNullElements { get; }
    internal static string CimClassToString { get; }
    internal static string CimInstanceNamespaceIsNull { get; }
    internal static string CimInstanceToStringFullData { get; }
    internal static string CimInstanceToStringNoCaption { get; }
    internal static string CimInstanceToStringNoKeys { get; }
    internal static string CimNameAndValueToString { get; }
    internal static string CimSessionToString { get; }
    internal static string DotNetValueToCimTypeConversionNotPossible { get; }
    internal static string UnknownError { get; }
    internal static string UnrecognizedProtocolName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AppDomainIsBeingUnloaded();
    internal static string get_ArrayCannotContainNullElements();
    internal static string get_CimClassToString();
    internal static string get_CimInstanceNamespaceIsNull();
    internal static string get_CimInstanceToStringFullData();
    internal static string get_CimInstanceToStringNoCaption();
    internal static string get_CimInstanceToStringNoKeys();
    internal static string get_CimNameAndValueToString();
    internal static string get_CimSessionToString();
    internal static string get_DotNetValueToCimTypeConversionNotPossible();
    internal static string get_UnknownError();
    internal static string get_UnrecognizedProtocolName();
}
