[NullableContextAttribute("1")]
public interface Microsoft.Maui.Accessibility.ISemanticScreenReader {
    public abstract virtual void Announce(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Accessibility.SemanticScreenReader : object {
    [NullableAttribute("2")]
private static ISemanticScreenReader defaultImplementation;
    private static ISemanticScreenReader Current { get; }
    public static ISemanticScreenReader Default { get; }
    public static void Announce(string text);
    private static ISemanticScreenReader get_Current();
    public static ISemanticScreenReader get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(ISemanticScreenReader implementation);
}
internal class Microsoft.Maui.Accessibility.SemanticScreenReaderImplementation : object {
    public sealed virtual void Announce(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Maui.ApplicationModel.AppAction : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Subtitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    public string Title { get; public set; }
    [NullableAttribute("2")]
public string Subtitle { get; public set; }
    public string Id { get; public set; }
    [NullableAttribute("2")]
internal string Icon { get; internal set; }
    public AppAction(string id, string title, string subtitle, string icon);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Subtitle();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Subtitle(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal string get_Icon();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_Icon(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Maui.ApplicationModel.AppActionEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private AppAction <AppAction>k__BackingField;
    public AppAction AppAction { get; }
    public AppActionEventArgs(AppAction appAction);
    [CompilerGeneratedAttribute]
public AppAction get_AppAction();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.ApplicationModel.AppActions : object {
    [NullableAttribute("2")]
private static IAppActions currentImplementation;
    public static bool IsSupported { get; }
    public static IAppActions Current { get; }
    public static bool get_IsSupported();
    public static Task`1<IEnumerable`1<AppAction>> GetAsync();
    public static Task SetAsync(AppAction[] actions);
    public static Task SetAsync(IEnumerable`1<AppAction> actions);
    public static void add_OnAppAction(EventHandler`1<AppActionEventArgs> value);
    public static void remove_OnAppAction(EventHandler`1<AppActionEventArgs> value);
    public static IAppActions get_Current();
    [NullableContextAttribute("2")]
internal static void SetCurrent(IAppActions implementation);
}
[ExtensionAttribute]
public static class Microsoft.Maui.ApplicationModel.AppActionsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
private static IPlatformAppActions AsPlatform(IAppActions appActions);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void PerformActionForShortcutItem(IAppActions appActions, UIApplication application, UIApplicationShortcutItem shortcutItem, UIOperationHandler completionHandler);
    [ExtensionAttribute]
internal static AppAction ToAppAction(UIApplicationShortcutItem shortcutItem);
    [ExtensionAttribute]
internal static UIApplicationShortcutItem ToShortcutItem(AppAction action);
}
internal class Microsoft.Maui.ApplicationModel.AppActionsImplementation : object {
    public static string ShortcutType;
    [CompilerGeneratedAttribute]
private EventHandler`1<AppActionEventArgs> AppActionActivated;
    public bool IsSupported { get; }
    public sealed virtual bool get_IsSupported();
    public sealed virtual Task`1<IEnumerable`1<AppAction>> GetAsync();
    public sealed virtual Task SetAsync(IEnumerable`1<AppAction> actions);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AppActionActivated(EventHandler`1<AppActionEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AppActionActivated(EventHandler`1<AppActionEventArgs> value);
    public sealed virtual void PerformActionForShortcutItem(UIApplication application, UIApplicationShortcutItem shortcutItem, UIOperationHandler completionHandler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.ApplicationModel.AppInfo : object {
    [NullableAttribute("2")]
private static IAppInfo currentImplementation;
    public static string PackageName { get; }
    public static string Name { get; }
    public static string VersionString { get; }
    public static Version Version { get; }
    public static string BuildString { get; }
    public static AppTheme RequestedTheme { get; }
    public static AppPackagingModel PackagingModel { get; }
    public static LayoutDirection RequestedLayoutDirection { get; }
    public static IAppInfo Current { get; }
    public static string get_PackageName();
    public static string get_Name();
    public static string get_VersionString();
    public static Version get_Version();
    public static string get_BuildString();
    public static void ShowSettingsUI();
    public static AppTheme get_RequestedTheme();
    public static AppPackagingModel get_PackagingModel();
    public static LayoutDirection get_RequestedLayoutDirection();
    public static IAppInfo get_Current();
    [NullableContextAttribute("2")]
internal static void SetCurrent(IAppInfo implementation);
}
internal class Microsoft.Maui.ApplicationModel.AppInfoImplementation : object {
    public AppPackagingModel PackagingModel { get; }
    public string PackageName { get; }
    public string Name { get; }
    public Version Version { get; }
    public string VersionString { get; }
    public string BuildString { get; }
    public AppTheme RequestedTheme { get; }
    public LayoutDirection RequestedLayoutDirection { get; }
    public sealed virtual AppPackagingModel get_PackagingModel();
    public sealed virtual string get_PackageName();
    public sealed virtual string get_Name();
    public sealed virtual Version get_Version();
    public sealed virtual string get_VersionString();
    public sealed virtual string get_BuildString();
    private string GetBundleValue(string key);
    [AsyncStateMachineAttribute("Microsoft.Maui.ApplicationModel.AppInfoImplementation/<ShowSettingsUI>d__13")]
public sealed virtual void ShowSettingsUI();
    public sealed virtual AppTheme get_RequestedTheme();
    public sealed virtual LayoutDirection get_RequestedLayoutDirection();
    internal static bool VerifyHasUrlScheme(string scheme);
    internal static IEnumerable`1<string> GetCFBundleURLSchemes();
    [IteratorStateMachineAttribute("Microsoft.Maui.ApplicationModel.AppInfoImplementation/<ConvertToIEnumerable>d__20`1")]
private static IEnumerable`1<T> ConvertToIEnumerable(NSArray array);
}
public enum Microsoft.Maui.ApplicationModel.AppPackagingModel : Enum {
    public int value__;
    public static AppPackagingModel Packaged;
    public static AppPackagingModel Unpackaged;
}
public enum Microsoft.Maui.ApplicationModel.AppTheme : Enum {
    public int value__;
    public static AppTheme Unspecified;
    public static AppTheme Light;
    public static AppTheme Dark;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.ApplicationModel.Browser : object {
    [NullableAttribute("2")]
private static IBrowser defaultImplementation;
    public static IBrowser Default { get; }
    public static Task`1<bool> OpenAsync(string uri);
    public static Task`1<bool> OpenAsync(string uri, BrowserLaunchMode launchMode);
    public static Task`1<bool> OpenAsync(string uri, BrowserLaunchOptions options);
    public static Task`1<bool> OpenAsync(Uri uri);
    public static Task`1<bool> OpenAsync(Uri uri, BrowserLaunchMode launchMode);
    public static Task`1<bool> OpenAsync(Uri uri, BrowserLaunchOptions options);
    public static IBrowser get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IBrowser implementation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Maui.ApplicationModel.BrowserExtensions : object {
    [ExtensionAttribute]
public static Task`1<bool> OpenAsync(IBrowser browser, string uri);
    [ExtensionAttribute]
public static Task`1<bool> OpenAsync(IBrowser browser, string uri, BrowserLaunchMode launchMode);
    [ExtensionAttribute]
public static Task`1<bool> OpenAsync(IBrowser browser, string uri, BrowserLaunchOptions options);
    [ExtensionAttribute]
public static Task`1<bool> OpenAsync(IBrowser browser, Uri uri);
    [ExtensionAttribute]
public static Task`1<bool> OpenAsync(IBrowser browser, Uri uri, BrowserLaunchMode launchMode);
}
internal class Microsoft.Maui.ApplicationModel.BrowserImplementation : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Maui.ApplicationModel.BrowserImplementation/<OpenAsync>d__0")]
public sealed virtual Task`1<bool> OpenAsync(Uri uri, BrowserLaunchOptions options);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Maui.ApplicationModel.BrowserImplementation/<LaunchSafariViewController>d__1")]
private static Task LaunchSafariViewController(Uri uri, BrowserLaunchOptions options);
}
[FlagsAttribute]
public enum Microsoft.Maui.ApplicationModel.BrowserLaunchFlags : Enum {
    public int value__;
    public static BrowserLaunchFlags None;
    public static BrowserLaunchFlags LaunchAdjacent;
    public static BrowserLaunchFlags PresentAsPageSheet;
    public static BrowserLaunchFlags PresentAsFormSheet;
}
public enum Microsoft.Maui.ApplicationModel.BrowserLaunchMode : Enum {
    public int value__;
    public static BrowserLaunchMode SystemPreferred;
    public static BrowserLaunchMode External;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Maui.ApplicationModel.BrowserLaunchOptions : object {
    [CompilerGeneratedAttribute]
private Color <PreferredToolbarColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <PreferredControlColor>k__BackingField;
    [CompilerGeneratedAttribute]
private BrowserLaunchMode <LaunchMode>k__BackingField;
    [CompilerGeneratedAttribute]
private BrowserTitleMode <TitleMode>k__BackingField;
    [CompilerGeneratedAttribute]
private BrowserLaunchFlags <Flags>k__BackingField;
    public Color PreferredToolbarColor { get; public set; }
    public Color PreferredControlColor { get; public set; }
    public BrowserLaunchMode LaunchMode { get; public set; }
    public BrowserTitleMode TitleMode { get; public set; }
    public BrowserLaunchFlags Flags { get; public set; }
    [CompilerGeneratedAttribute]
public Color get_PreferredToolbarColor();
    [CompilerGeneratedAttribute]
public void set_PreferredToolbarColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_PreferredControlColor();
    [CompilerGeneratedAttribute]
public void set_PreferredControlColor(Color value);
    [CompilerGeneratedAttribute]
public BrowserLaunchMode get_LaunchMode();
    [CompilerGeneratedAttribute]
public void set_LaunchMode(BrowserLaunchMode value);
    [CompilerGeneratedAttribute]
public BrowserTitleMode get_TitleMode();
    [CompilerGeneratedAttribute]
public void set_TitleMode(BrowserTitleMode value);
    [CompilerGeneratedAttribute]
public BrowserLaunchFlags get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(BrowserLaunchFlags value);
    internal bool HasFlag(BrowserLaunchFlags flag);
}
public enum Microsoft.Maui.ApplicationModel.BrowserTitleMode : Enum {
    public int value__;
    public static BrowserTitleMode Default;
    public static BrowserTitleMode Show;
    public static BrowserTitleMode Hide;
}
public class Microsoft.Maui.ApplicationModel.Communication.Contact : object {
    private string displayName;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NamePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GivenName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MiddleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FamilyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ContactPhone> <Phones>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ContactEmail> <Emails>k__BackingField;
    public string Id { get; public set; }
    public string DisplayName { get; private set; }
    public string NamePrefix { get; public set; }
    public string GivenName { get; public set; }
    public string MiddleName { get; public set; }
    public string FamilyName { get; public set; }
    public string NameSuffix { get; public set; }
    public List`1<ContactPhone> Phones { get; public set; }
    public List`1<ContactEmail> Emails { get; public set; }
    public Contact(string id, string namePrefix, string givenName, string middleName, string familyName, string nameSuffix, IEnumerable`1<ContactPhone> phones, IEnumerable`1<ContactEmail> email, string displayName);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    public string get_DisplayName();
    private void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_NamePrefix();
    [CompilerGeneratedAttribute]
public void set_NamePrefix(string value);
    [CompilerGeneratedAttribute]
public string get_GivenName();
    [CompilerGeneratedAttribute]
public void set_GivenName(string value);
    [CompilerGeneratedAttribute]
public string get_MiddleName();
    [CompilerGeneratedAttribute]
public void set_MiddleName(string value);
    [CompilerGeneratedAttribute]
public string get_FamilyName();
    [CompilerGeneratedAttribute]
public void set_FamilyName(string value);
    [CompilerGeneratedAttribute]
public string get_NameSuffix();
    [CompilerGeneratedAttribute]
public void set_NameSuffix(string value);
    [CompilerGeneratedAttribute]
public List`1<ContactPhone> get_Phones();
    [CompilerGeneratedAttribute]
public void set_Phones(List`1<ContactPhone> value);
    [CompilerGeneratedAttribute]
public List`1<ContactEmail> get_Emails();
    [CompilerGeneratedAttribute]
public void set_Emails(List`1<ContactEmail> value);
    public virtual string ToString();
    private string BuildDisplayName();
}
public class Microsoft.Maui.ApplicationModel.Communication.ContactEmail : object {
    [CompilerGeneratedAttribute]
private string <EmailAddress>k__BackingField;
    public string EmailAddress { get; public set; }
    public ContactEmail(string emailAddress);
    [CompilerGeneratedAttribute]
public string get_EmailAddress();
    [CompilerGeneratedAttribute]
public void set_EmailAddress(string value);
    public virtual string ToString();
}
public class Microsoft.Maui.ApplicationModel.Communication.ContactPhone : object {
    [CompilerGeneratedAttribute]
private string <PhoneNumber>k__BackingField;
    public string PhoneNumber { get; public set; }
    public ContactPhone(string phoneNumber);
    [CompilerGeneratedAttribute]
public string get_PhoneNumber();
    [CompilerGeneratedAttribute]
public void set_PhoneNumber(string value);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.ApplicationModel.Communication.Contacts : object {
    [NullableAttribute("2")]
private static IContacts defaultImplementation;
    public static IContacts Default { get; }
    public static Task`1<Contact> PickContactAsync();
    public static Task`1<IEnumerable`1<Contact>> GetAllAsync(CancellationToken cancellationToken);
    public static IContacts get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IContacts implementation);
}
internal class Microsoft.Maui.ApplicationModel.Communication.ContactsImplementation : object {
    public sealed virtual Task`1<Contact> PickContactAsync();
    public sealed virtual Task`1<IEnumerable`1<Contact>> GetAllAsync(CancellationToken cancellationToken);
    internal static Contact ConvertContact(CNContact contact);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.ApplicationModel.Communication.Email : object {
    [NullableAttribute("2")]
private static IEmail defaultImplementation;
    public static IEmail Default { get; }
    public static Task ComposeAsync();
    public static Task ComposeAsync(string subject, string body, String[] to);
    public static Task ComposeAsync(EmailMessage message);
    public static IEmail get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IEmail implementation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Maui.ApplicationModel.Communication.EmailAttachment : FileBase {
    public EmailAttachment(string fullPath);
    public EmailAttachment(string fullPath, string contentType);
    public EmailAttachment(FileBase file);
}
public enum Microsoft.Maui.ApplicationModel.Communication.EmailBodyFormat : Enum {
    public int value__;
    public static EmailBodyFormat PlainText;
    public static EmailBodyFormat Html;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Maui.ApplicationModel.Communication.EmailExtensions : object {
    [ExtensionAttribute]
public static Task ComposeAsync(IEmail email);
    [ExtensionAttribute]
public static Task ComposeAsync(IEmail email, string subject, string body, String[] to);
}
internal class Microsoft.Maui.ApplicationModel.Communication.EmailImplementation : object {
    public bool IsComposeSupported { get; }
    [NullableContextAttribute("1")]
public sealed virtual Task ComposeAsync(EmailMessage message);
    [NullableContextAttribute("1")]
internal static string GetMailToUri(EmailMessage message);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.Maui.ApplicationModel.Communication.EmailImplementation/<Parameters>d__2")]
private static IEnumerable`1<string> Parameters(EmailMessage message);
    [NullableContextAttribute("1")]
private static string Recipients(IEnumerable`1<string> addresses);
    public sealed virtual bool get_IsComposeSupported();
    private Task PlatformComposeAsync(EmailMessage message);
    private Task ComposeWithMailCompose(EmailMessage message);
    private Task ComposeWithUrl(EmailMessage message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Maui.ApplicationModel.Communication.EmailMessage : object {
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private EmailBodyFormat <BodyFormat>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <To>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <Cc>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <Bcc>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<EmailAttachment> <Attachments>k__BackingField;
    public string Subject { get; public set; }
    public string Body { get; public set; }
    public EmailBodyFormat BodyFormat { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> To { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> Cc { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<string> Bcc { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<EmailAttachment> Attachments { get; public set; }
    [NullableContextAttribute("1")]
public EmailMessage(string subject, string body, String[] to);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public EmailBodyFormat get_BodyFormat();
    [CompilerGeneratedAttribute]
public void set_BodyFormat(EmailBodyFormat value);
    [CompilerGeneratedAttribute]
public List`1<string> get_To();
    [CompilerGeneratedAttribute]
public void set_To(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Cc();
    [CompilerGeneratedAttribute]
public void set_Cc(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Bcc();
    [CompilerGeneratedAttribute]
public void set_Bcc(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<EmailAttachment> get_Attachments();
    [CompilerGeneratedAttribute]
public void set_Attachments(List`1<EmailAttachment> value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.ApplicationModel.Communication.IContacts {
    public abstract virtual Task`1<Contact> PickContactAsync();
    public abstract virtual Task`1<IEnumerable`1<Contact>> GetAllAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.ApplicationModel.Communication.IEmail {
    public bool IsComposeSupported { get; }
    public abstract virtual bool get_IsComposeSupported();
    public abstract virtual Task ComposeAsync(EmailMessage message);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.ApplicationModel.Communication.IPhoneDialer {
    public bool IsSupported { get; }
    public abstract virtual bool get_IsSupported();
    public abstract virtual void Open(string number);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.ApplicationModel.Communication.ISms {
    public bool IsComposeSupported { get; }
    public abstract virtual bool get_IsComposeSupported();
    public abstract virtual Task ComposeAsync(SmsMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.ApplicationModel.Communication.PhoneDialer : object {
    [NullableAttribute("2")]
private static IPhoneDialer defaultImplementation;
    public static bool IsSupported { get; }
    public static IPhoneDialer Default { get; }
    public static bool get_IsSupported();
    public static void Open(string number);
    public static IPhoneDialer get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IPhoneDialer implementation);
}
internal class Microsoft.Maui.ApplicationModel.Communication.PhoneDialerImplementation : object {
    public bool IsSupported { get; }
    [NullableContextAttribute("1")]
private void ValidateOpen(string number);
    public sealed virtual bool get_IsSupported();
    public sealed virtual void Open(string number);
    private static NSUrl CreateNsUrl(string number);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.ApplicationModel.Communication.Sms : object {
    [NullableAttribute("2")]
private static ISms defaultImplementation;
    private static ISms Current { get; }
    public static ISms Default { get; }
    public static Task ComposeAsync();
    public static Task ComposeAsync(SmsMessage message);
    private static ISms get_Current();
    public static ISms get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(ISms implementation);
}
internal class Microsoft.Maui.ApplicationModel.Communication.SmsImplementation : object {
    public bool IsComposeSupported { get; }
    [NullableContextAttribute("1")]
public Task ComposeAsync();
    [NullableContextAttribute("1")]
public sealed virtual Task ComposeAsync(SmsMessage message);
    public sealed virtual bool get_IsComposeSupported();
    private Task PlatformComposeAsync(SmsMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Maui.ApplicationModel.Communication.SmsMessage : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Recipients>k__BackingField;
    [NullableAttribute("2")]
public string Body { get; public set; }
    public List`1<string> Recipients { get; public set; }
    public SmsMessage(string body, string recipient);
    public SmsMessage(string body, IEnumerable`1<string> recipients);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Body();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Body(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Recipients();
    [CompilerGeneratedAttribute]
public void set_Recipients(List`1<string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.ApplicationModel.DataTransfer.Clipboard : object {
    [NullableAttribute("2")]
private static IClipboard defaultImplementation;
    public static bool HasText { get; }
    public static IClipboard Default { get; }
    public static Task SetTextAsync(string text);
    public static bool get_HasText();
    public static Task`1<string> GetTextAsync();
    public static void add_ClipboardContentChanged(EventHandler`1<EventArgs> value);
    public static void remove_ClipboardContentChanged(EventHandler`1<EventArgs> value);
    public static IClipboard get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IClipboard implementation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Maui.ApplicationModel.DataTransfer.ClipboardImplementation : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<EventArgs> ClipboardContentChangedInternal;
    [NullableAttribute("2")]
private NSObject observer;
    public bool HasText { get; }
    [CompilerGeneratedAttribute]
private void add_ClipboardContentChangedInternal(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_ClipboardContentChangedInternal(EventHandler`1<EventArgs> value);
    public sealed virtual void add_ClipboardContentChanged(EventHandler`1<EventArgs> value);
    public sealed virtual void remove_ClipboardContentChanged(EventHandler`1<EventArgs> value);
    internal void OnClipboardContentChanged();
    public sealed virtual Task SetTextAsync(string text);
    public sealed virtual bool get_HasText();
    public sealed virtual Task`1<string> GetTextAsync();
    private void StartClipboardListeners();
    private void StopClipboardListeners();
    public void ClipboardChangedObserver(NSNotification notification);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.ApplicationModel.DataTransfer.IClipboard {
    public bool HasText { get; }
    public abstract virtual bool get_HasText();
    public abstract virtual Task SetTextAsync(string text);
    public abstract virtual Task`1<string> GetTextAsync();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ClipboardContentChanged(EventHandler`1<EventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ClipboardContentChanged(EventHandler`1<EventArgs> value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.ApplicationModel.DataTransfer.IShare {
    public abstract virtual Task RequestAsync(ShareTextRequest request);
    public abstract virtual Task RequestAsync(ShareFileRequest request);
    public abstract virtual Task RequestAsync(ShareMultipleFilesRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.ApplicationModel.DataTransfer.Share : object {
    [NullableAttribute("2")]
private static IShare defaultImplementation;
    private static IShare Current { get; }
    public static IShare Default { get; }
    public static Task RequestAsync(string text);
    public static Task RequestAsync(string text, string title);
    public static Task RequestAsync(ShareTextRequest request);
    public static Task RequestAsync(ShareFileRequest request);
    public static Task RequestAsync(ShareMultipleFilesRequest request);
    private static IShare get_Current();
    public static IShare get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IShare implementation);
}
internal class Microsoft.Maui.ApplicationModel.DataTransfer.ShareActivityItemSource : UIActivityItemSource {
    private NSObject item;
    private string title;
    internal ShareActivityItemSource(NSObject item, string title);
    public virtual NSObject GetItemForActivity(UIActivityViewController activityViewController, NSString activityType);
    public virtual NSObject GetPlaceholderData(UIActivityViewController activityViewController);
    public virtual LPLinkMetadata GetLinkMetadata(UIActivityViewController activityViewController);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Maui.ApplicationModel.DataTransfer.ShareExtensions : object {
    [ExtensionAttribute]
public static Task RequestAsync(IShare share, string text);
    [ExtensionAttribute]
public static Task RequestAsync(IShare share, string text, string title);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Maui.ApplicationModel.DataTransfer.ShareFile : FileBase {
    public ShareFile(string fullPath);
    public ShareFile(string fullPath, string contentType);
    public ShareFile(FileBase file);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Maui.ApplicationModel.DataTransfer.ShareFileRequest : ShareRequestBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ShareFile <File>k__BackingField;
    [NullableAttribute("2")]
public ShareFile File { get; public set; }
    public ShareFileRequest(string title, ShareFile file);
    public ShareFileRequest(string title, FileBase file);
    public ShareFileRequest(ShareFile file);
    public ShareFileRequest(FileBase file);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ShareFile get_File();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_File(ShareFile value);
}
internal class Microsoft.Maui.ApplicationModel.DataTransfer.ShareImplementation : object {
    [NullableContextAttribute("1")]
public sealed virtual Task RequestAsync(ShareTextRequest request);
    [NullableContextAttribute("1")]
public sealed virtual Task RequestAsync(ShareFileRequest request);
    [NullableContextAttribute("1")]
public sealed virtual Task RequestAsync(ShareMultipleFilesRequest request);
    [NullableContextAttribute("1")]
private static string FileNullException(string file);
    [AsyncStateMachineAttribute("Microsoft.Maui.ApplicationModel.DataTransfer.ShareImplementation/<PlatformRequestAsync>d__4")]
private Task PlatformRequestAsync(ShareTextRequest request);
    private Task PlatformRequestAsync(ShareFileRequest request);
    [AsyncStateMachineAttribute("Microsoft.Maui.ApplicationModel.DataTransfer.ShareImplementation/<PlatformRequestAsync>d__6")]
private Task PlatformRequestAsync(ShareMultipleFilesRequest request);
    private NSObject GetShareItem(NSString obj, string title);
    private NSObject GetShareItem(NSObject obj, string title);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Maui.ApplicationModel.DataTransfer.ShareMultipleFilesRequest : ShareRequestBase {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ShareFile> <Files>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ShareFile> Files { get; public set; }
    public ShareMultipleFilesRequest(IEnumerable`1<ShareFile> files);
    public ShareMultipleFilesRequest(IEnumerable`1<FileBase> files);
    public ShareMultipleFilesRequest(string title, IEnumerable`1<ShareFile> files);
    public ShareMultipleFilesRequest(string title, IEnumerable`1<FileBase> files);
    [CompilerGeneratedAttribute]
public List`1<ShareFile> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(List`1<ShareFile> value);
    public static ShareMultipleFilesRequest op_Explicit(ShareFileRequest request);
    private static IEnumerable`1<ShareFile> ConvertList(IEnumerable`1<FileBase> files);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.Maui.ApplicationModel.DataTransfer.ShareRequestBase : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <PresentationSourceBounds>k__BackingField;
    public string Title { get; public set; }
    public Rect PresentationSourceBounds { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Rect get_PresentationSourceBounds();
    [CompilerGeneratedAttribute]
public void set_PresentationSourceBounds(Rect value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Maui.ApplicationModel.DataTransfer.ShareTextRequest : ShareRequestBase {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    public string Text { get; public set; }
    public string Subject { get; public set; }
    public string Uri { get; public set; }
    [NullableContextAttribute("1")]
public ShareTextRequest(string text);
    [NullableContextAttribute("1")]
public ShareTextRequest(string text, string title);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
}
internal static class Microsoft.Maui.ApplicationModel.ExceptionUtils : object {
    internal static NotImplementedInReferenceAssemblyException NotSupportedOrImplementedException { get; }
    internal static NotImplementedInReferenceAssemblyException get_NotSupportedOrImplementedException();
}
public class Microsoft.Maui.ApplicationModel.FeatureNotEnabledException : InvalidOperationException {
    public FeatureNotEnabledException(string message);
    public FeatureNotEnabledException(string message, Exception innerException);
}
public class Microsoft.Maui.ApplicationModel.FeatureNotSupportedException : NotSupportedException {
    public FeatureNotSupportedException(string message);
    public FeatureNotSupportedException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.ApplicationModel.IAppActions {
    public bool IsSupported { get; }
    public abstract virtual bool get_IsSupported();
    public abstract virtual Task`1<IEnumerable`1<AppAction>> GetAsync();
    public abstract virtual Task SetAsync(IEnumerable`1<AppAction> actions);
    [CompilerGeneratedAttribute]
public abstract virtual void add_AppActionActivated(EventHandler`1<AppActionEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_AppActionActivated(EventHandler`1<AppActionEventArgs> value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.ApplicationModel.IAppInfo {
    public string PackageName { get; }
    public string Name { get; }
    public string VersionString { get; }
    public Version Version { get; }
    public string BuildString { get; }
    public AppTheme RequestedTheme { get; }
    public AppPackagingModel PackagingModel { get; }
    public LayoutDirection RequestedLayoutDirection { get; }
    public abstract virtual string get_PackageName();
    public abstract virtual string get_Name();
    public abstract virtual string get_VersionString();
    public abstract virtual Version get_Version();
    public abstract virtual string get_BuildString();
    public abstract virtual void ShowSettingsUI();
    public abstract virtual AppTheme get_RequestedTheme();
    public abstract virtual AppPackagingModel get_PackagingModel();
    public abstract virtual LayoutDirection get_RequestedLayoutDirection();
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.ApplicationModel.IBrowser {
    public abstract virtual Task`1<bool> OpenAsync(Uri uri, BrowserLaunchOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.ApplicationModel.ILauncher {
    public abstract virtual Task`1<bool> CanOpenAsync(Uri uri);
    public abstract virtual Task`1<bool> OpenAsync(Uri uri);
    public abstract virtual Task`1<bool> OpenAsync(OpenFileRequest request);
    public abstract virtual Task`1<bool> TryOpenAsync(Uri uri);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.ApplicationModel.IMap {
    public abstract virtual Task OpenAsync(double latitude, double longitude, MapLaunchOptions options);
    public abstract virtual Task OpenAsync(Placemark placemark, MapLaunchOptions options);
    public abstract virtual Task`1<bool> TryOpenAsync(double latitude, double longitude, MapLaunchOptions options);
    public abstract virtual Task`1<bool> TryOpenAsync(Placemark placemark, MapLaunchOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.ApplicationModel.IPlatformAppActions {
    public abstract virtual void PerformActionForShortcutItem(UIApplication application, UIApplicationShortcutItem shortcutItem, UIOperationHandler completionHandler);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.ApplicationModel.IVersionTracking {
    public bool IsFirstLaunchEver { get; }
    public bool IsFirstLaunchForCurrentVersion { get; }
    public bool IsFirstLaunchForCurrentBuild { get; }
    public string CurrentVersion { get; }
    public string CurrentBuild { get; }
    [NullableAttribute("2")]
public string PreviousVersion { get; }
    [NullableAttribute("2")]
public string PreviousBuild { get; }
    [NullableAttribute("2")]
public string FirstInstalledVersion { get; }
    [NullableAttribute("2")]
public string FirstInstalledBuild { get; }
    public IReadOnlyList`1<string> VersionHistory { get; }
    public IReadOnlyList`1<string> BuildHistory { get; }
    public abstract virtual void Track();
    public abstract virtual bool get_IsFirstLaunchEver();
    public abstract virtual bool get_IsFirstLaunchForCurrentVersion();
    public abstract virtual bool get_IsFirstLaunchForCurrentBuild();
    public abstract virtual string get_CurrentVersion();
    public abstract virtual string get_CurrentBuild();
    [NullableContextAttribute("2")]
public abstract virtual string get_PreviousVersion();
    [NullableContextAttribute("2")]
public abstract virtual string get_PreviousBuild();
    [NullableContextAttribute("2")]
public abstract virtual string get_FirstInstalledVersion();
    [NullableContextAttribute("2")]
public abstract virtual string get_FirstInstalledBuild();
    public abstract virtual IReadOnlyList`1<string> get_VersionHistory();
    public abstract virtual IReadOnlyList`1<string> get_BuildHistory();
    public abstract virtual bool IsFirstLaunchForVersion(string version);
    public abstract virtual bool IsFirstLaunchForBuild(string build);
}
[NullableContextAttribute("2")]
public interface Microsoft.Maui.ApplicationModel.IWindowStateManager {
    public abstract virtual void Init(Func`1<UIViewController> getCurrentUIViewController);
    public abstract virtual UIViewController GetCurrentUIViewController();
    public abstract virtual UIWindow GetCurrentUIWindow();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.ApplicationModel.Launcher : object {
    [NullableAttribute("2")]
private static ILauncher defaultImplementation;
    private static ILauncher Current { get; }
    public static ILauncher Default { get; }
    public static Task`1<bool> CanOpenAsync(string uri);
    public static Task`1<bool> CanOpenAsync(Uri uri);
    public static Task`1<bool> OpenAsync(string uri);
    public static Task`1<bool> OpenAsync(Uri uri);
    public static Task`1<bool> OpenAsync(OpenFileRequest request);
    public static Task`1<bool> TryOpenAsync(string uri);
    public static Task`1<bool> TryOpenAsync(Uri uri);
    private static ILauncher get_Current();
    public static ILauncher get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(ILauncher implementation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Maui.ApplicationModel.LauncherExtensions : object {
    [ExtensionAttribute]
public static Task`1<bool> CanOpenAsync(ILauncher launcher, string uri);
    [ExtensionAttribute]
public static Task`1<bool> OpenAsync(ILauncher launcher, string uri);
    [ExtensionAttribute]
public static Task`1<bool> TryOpenAsync(ILauncher launcher, string uri);
}
internal class Microsoft.Maui.ApplicationModel.LauncherImplementation : object {
    private UIDocumentInteractionController documentController;
    [NullableContextAttribute("1")]
public sealed virtual Task`1<bool> CanOpenAsync(Uri uri);
    [NullableContextAttribute("1")]
public sealed virtual Task`1<bool> OpenAsync(Uri uri);
    [NullableContextAttribute("1")]
public sealed virtual Task`1<bool> OpenAsync(OpenFileRequest request);
    [NullableContextAttribute("1")]
public sealed virtual Task`1<bool> TryOpenAsync(Uri uri);
    private Task`1<bool> PlatformCanOpenAsync(Uri uri);
    private Task`1<bool> PlatformOpenAsync(Uri uri);
    private Task`1<bool> PlatformOpenAsync(NSUrl nativeUrl);
    private Task`1<bool> PlatformTryOpenAsync(Uri uri);
    private Task`1<bool> PlatformOpenAsync(OpenFileRequest request);
}
public enum Microsoft.Maui.ApplicationModel.LayoutDirection : Enum {
    public int value__;
    public static LayoutDirection Unknown;
    public static LayoutDirection LeftToRight;
    public static LayoutDirection RightToLeft;
}
public static class Microsoft.Maui.ApplicationModel.MainThread : object {
    public static bool IsMainThread { get; }
    private static bool PlatformIsMainThread { get; }
    public static bool get_IsMainThread();
    public static void BeginInvokeOnMainThread(Action action);
    public static Task InvokeOnMainThreadAsync(Action action);
    public static Task`1<T> InvokeOnMainThreadAsync(Func`1<T> func);
    public static Task InvokeOnMainThreadAsync(Func`1<Task> funcTask);
    public static Task`1<T> InvokeOnMainThreadAsync(Func`1<Task`1<T>> funcTask);
    [AsyncStateMachineAttribute("Microsoft.Maui.ApplicationModel.MainThread/<GetMainThreadSynchronizationContextAsync>d__7")]
public static Task`1<SynchronizationContext> GetMainThreadSynchronizationContextAsync();
    private static bool get_PlatformIsMainThread();
    private static void PlatformBeginInvokeOnMainThread(Action action);
    internal static T InvokeOnMainThread(Func`1<T> factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.ApplicationModel.Map : object {
    [NullableAttribute("2")]
private static IMap defaultImplementation;
    private static IMap Current { get; }
    public static IMap Default { get; }
    public static Task OpenAsync(Location location);
    public static Task OpenAsync(Location location, MapLaunchOptions options);
    public static Task OpenAsync(double latitude, double longitude);
    public static Task OpenAsync(double latitude, double longitude, MapLaunchOptions options);
    public static Task OpenAsync(Placemark placemark);
    public static Task OpenAsync(Placemark placemark, MapLaunchOptions options);
    public static Task`1<bool> TryOpenAsync(Location location);
    public static Task`1<bool> TryOpenAsync(Location location, MapLaunchOptions options);
    public static Task`1<bool> TryOpenAsync(double latitude, double longitude);
    public static Task`1<bool> TryOpenAsync(double latitude, double longitude, MapLaunchOptions options);
    public static Task`1<bool> TryOpenAsync(Placemark placemark);
    public static Task`1<bool> TryOpenAsync(Placemark placemark, MapLaunchOptions options);
    private static IMap get_Current();
    public static IMap get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IMap implementation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Maui.ApplicationModel.MapExtensions : object {
    [ExtensionAttribute]
public static Task OpenAsync(IMap map, Location location);
    [ExtensionAttribute]
public static Task OpenAsync(IMap map, Location location, MapLaunchOptions options);
    [ExtensionAttribute]
public static Task`1<bool> TryOpenAsync(IMap map, Location location);
    [ExtensionAttribute]
public static Task`1<bool> TryOpenAsync(IMap map, Location location, MapLaunchOptions options);
    [ExtensionAttribute]
public static Task OpenAsync(IMap map, double latitude, double longitude);
    [ExtensionAttribute]
public static Task OpenAsync(IMap map, Placemark placemark);
    [ExtensionAttribute]
public static Task`1<bool> TryOpenAsync(IMap map, double latitude, double longitude);
    [ExtensionAttribute]
public static Task`1<bool> TryOpenAsync(IMap map, Placemark placemark);
}
internal class Microsoft.Maui.ApplicationModel.MapImplementation : object {
    public sealed virtual Task OpenAsync(double latitude, double longitude, MapLaunchOptions options);
    public sealed virtual Task`1<bool> TryOpenAsync(double latitude, double longitude, MapLaunchOptions options);
    [AsyncStateMachineAttribute("Microsoft.Maui.ApplicationModel.MapImplementation/<OpenAsync>d__2")]
[UnsupportedOSPlatformAttribute("ios11.0")]
public sealed virtual Task OpenAsync(Placemark placemark, MapLaunchOptions options);
    [AsyncStateMachineAttribute("Microsoft.Maui.ApplicationModel.MapImplementation/<TryOpenAsync>d__3")]
[UnsupportedOSPlatformAttribute("ios11.0")]
public sealed virtual Task`1<bool> TryOpenAsync(Placemark placemark, MapLaunchOptions options);
    [AsyncStateMachineAttribute("Microsoft.Maui.ApplicationModel.MapImplementation/<GetPlacemarksAsync>d__4")]
[UnsupportedOSPlatformAttribute("ios11.0")]
private static Task`1<CLPlacemark[]> GetPlacemarksAsync(NSDictionary address);
    private static Task`1<bool> OpenPlacemark(MKPlacemark placemark, MapLaunchOptions options);
}
public class Microsoft.Maui.ApplicationModel.MapLaunchOptions : object {
    [CompilerGeneratedAttribute]
private NavigationMode <NavigationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public NavigationMode NavigationMode { get; public set; }
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public NavigationMode get_NavigationMode();
    [CompilerGeneratedAttribute]
public void set_NavigationMode(NavigationMode value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public enum Microsoft.Maui.ApplicationModel.NavigationMode : Enum {
    public int value__;
    public static NavigationMode None;
    public static NavigationMode Default;
    public static NavigationMode Bicycling;
    public static NavigationMode Driving;
    public static NavigationMode Transit;
    public static NavigationMode Walking;
}
internal class Microsoft.Maui.ApplicationModel.NotImplementedInReferenceAssemblyException : NotImplementedException {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Maui.ApplicationModel.OpenFileRequest : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private Rect <PresentationSourceBounds>k__BackingField;
    public string Title { get; public set; }
    public ReadOnlyFile File { get; public set; }
    public Rect PresentationSourceBounds { get; public set; }
    [NullableContextAttribute("1")]
public OpenFileRequest(string title, ReadOnlyFile file);
    [NullableContextAttribute("1")]
public OpenFileRequest(string title, FileBase file);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public ReadOnlyFile get_File();
    [CompilerGeneratedAttribute]
public void set_File(ReadOnlyFile value);
    [CompilerGeneratedAttribute]
public Rect get_PresentationSourceBounds();
    [CompilerGeneratedAttribute]
public void set_PresentationSourceBounds(Rect value);
}
public class Microsoft.Maui.ApplicationModel.PermissionException : UnauthorizedAccessException {
    public PermissionException(string message);
}
public static class Microsoft.Maui.ApplicationModel.Permissions : object {
    [CompilerGeneratedAttribute]
private static TimeSpan <LocationTimeout>k__BackingField;
    public static TimeSpan LocationTimeout { get; public set; }
    private static Permissions();
    public static Task`1<PermissionStatus> CheckStatusAsync();
    public static Task`1<PermissionStatus> RequestAsync();
    public static bool ShouldShowRationale();
    internal static void EnsureDeclared();
    [AsyncStateMachineAttribute("Microsoft.Maui.ApplicationModel.Permissions/<EnsureGrantedAsync>d__4`1")]
internal static Task EnsureGrantedAsync();
    [AsyncStateMachineAttribute("Microsoft.Maui.ApplicationModel.Permissions/<EnsureGrantedOrRestrictedAsync>d__5`1")]
internal static Task EnsureGrantedOrRestrictedAsync();
    private static PermissionStatus GetPhotoPermissionStatus(PHAccessLevel level);
    [AsyncStateMachineAttribute("Microsoft.Maui.ApplicationModel.Permissions/<RequestPhotoPermissionStatus>d__36")]
private static Task`1<PermissionStatus> RequestPhotoPermissionStatus(PHAccessLevel level);
    private static PermissionStatus Convert(PHAuthorizationStatus status);
    [SupportedOSPlatformGuardAttribute("iOS14.0")]
[SupportedOSPlatformGuardAttribute("macOS11.0")]
[SupportedOSPlatformGuardAttribute("tvOS14.0")]
private static bool CheckOSVersionForPhotos();
    public static bool IsKeyDeclaredInInfoPlist(string usageKey);
    [CompilerGeneratedAttribute]
public static TimeSpan get_LocationTimeout();
    [CompilerGeneratedAttribute]
public static void set_LocationTimeout(TimeSpan value);
}
public enum Microsoft.Maui.ApplicationModel.PermissionStatus : Enum {
    public int value__;
    public static PermissionStatus Unknown;
    public static PermissionStatus Denied;
    public static PermissionStatus Disabled;
    public static PermissionStatus Granted;
    public static PermissionStatus Restricted;
    public static PermissionStatus Limited;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.ApplicationModel.Platform : object {
    public static bool OpenUrl(UIApplication app, NSUrl url, NSDictionary options);
    public static bool ContinueUserActivity(UIApplication application, NSUserActivity userActivity, UIApplicationRestorationHandler completionHandler);
    public static void PerformActionForShortcutItem(UIApplication application, UIApplicationShortcutItem shortcutItem, UIOperationHandler completionHandler);
    public static void Init(Func`1<UIViewController> getCurrentUIViewController);
    [NullableContextAttribute("2")]
public static UIViewController GetCurrentUIViewController();
}
internal static class Microsoft.Maui.ApplicationModel.PlatformUtils : object {
    internal static int SysctlByName(string property, IntPtr output, IntPtr oldLen, IntPtr newp, UInt32 newlen);
    internal static string GetSystemLibraryProperty(string property);
    internal static void BeginInvokeOnMainThread(Action action);
}
internal class Microsoft.Maui.ApplicationModel.UIPresentationControllerDelegate : UIAdaptivePresentationControllerDelegate {
    private Action dismissHandler;
    internal UIPresentationControllerDelegate(Action dismissHandler);
    public virtual void DidDismiss(UIPresentationController presentationController);
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.Maui.ApplicationModel.Utils : object {
    internal static Version ParseVersion(string version);
    internal static CancellationToken TimeoutToken(CancellationToken cancellationToken, TimeSpan timeout);
    [AsyncStateMachineAttribute("Microsoft.Maui.ApplicationModel.Utils/<WithTimeout>d__2`1")]
internal static Task`1<T> WithTimeout(Task`1<T> task, TimeSpan timeSpan);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.ApplicationModel.VersionTracking : object {
    [NullableAttribute("2")]
private static IVersionTracking defaultImplementation;
    public static bool IsFirstLaunchEver { get; }
    public static bool IsFirstLaunchForCurrentVersion { get; }
    public static bool IsFirstLaunchForCurrentBuild { get; }
    public static string CurrentVersion { get; }
    public static string CurrentBuild { get; }
    [NullableAttribute("2")]
public static string PreviousVersion { get; }
    [NullableAttribute("2")]
public static string PreviousBuild { get; }
    [NullableAttribute("2")]
public static string FirstInstalledVersion { get; }
    [NullableAttribute("2")]
public static string FirstInstalledBuild { get; }
    public static IEnumerable`1<string> VersionHistory { get; }
    public static IEnumerable`1<string> BuildHistory { get; }
    public static IVersionTracking Default { get; }
    public static void Track();
    public static bool get_IsFirstLaunchEver();
    public static bool get_IsFirstLaunchForCurrentVersion();
    public static bool get_IsFirstLaunchForCurrentBuild();
    public static string get_CurrentVersion();
    public static string get_CurrentBuild();
    [NullableContextAttribute("2")]
public static string get_PreviousVersion();
    [NullableContextAttribute("2")]
public static string get_PreviousBuild();
    [NullableContextAttribute("2")]
public static string get_FirstInstalledVersion();
    [NullableContextAttribute("2")]
public static string get_FirstInstalledBuild();
    public static IEnumerable`1<string> get_VersionHistory();
    public static IEnumerable`1<string> get_BuildHistory();
    public static bool IsFirstLaunchForVersion(string version);
    public static bool IsFirstLaunchForBuild(string build);
    public static IVersionTracking get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IVersionTracking implementation);
    internal static void InitVersionTracking();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Maui.ApplicationModel.VersionTrackingImplementation : object {
    private static string versionsKey;
    private static string buildsKey;
    private static string sharedName;
    private IPreferences preferences;
    private IAppInfo appInfo;
    private Dictionary`2<string, List`1<string>> versionTrail;
    [CompilerGeneratedAttribute]
private bool <IsFirstLaunchEver>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFirstLaunchForCurrentVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFirstLaunchForCurrentBuild>k__BackingField;
    private string LastInstalledVersion { get; }
    private string LastInstalledBuild { get; }
    public bool IsFirstLaunchEver { get; private set; }
    public bool IsFirstLaunchForCurrentVersion { get; private set; }
    public bool IsFirstLaunchForCurrentBuild { get; private set; }
    public string CurrentVersion { get; }
    public string CurrentBuild { get; }
    [NullableAttribute("2")]
public string PreviousVersion { get; }
    [NullableAttribute("2")]
public string PreviousBuild { get; }
    [NullableAttribute("2")]
public string FirstInstalledVersion { get; }
    [NullableAttribute("2")]
public string FirstInstalledBuild { get; }
    public IReadOnlyList`1<string> VersionHistory { get; }
    public IReadOnlyList`1<string> BuildHistory { get; }
    public VersionTrackingImplementation(IPreferences preferences, IAppInfo appInfo);
    private static VersionTrackingImplementation();
    private string get_LastInstalledVersion();
    private string get_LastInstalledBuild();
    public sealed virtual void Track();
    internal void InitVersionTracking();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFirstLaunchEver();
    [CompilerGeneratedAttribute]
private void set_IsFirstLaunchEver(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFirstLaunchForCurrentVersion();
    [CompilerGeneratedAttribute]
private void set_IsFirstLaunchForCurrentVersion(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsFirstLaunchForCurrentBuild();
    [CompilerGeneratedAttribute]
private void set_IsFirstLaunchForCurrentBuild(bool value);
    public sealed virtual string get_CurrentVersion();
    public sealed virtual string get_CurrentBuild();
    [NullableContextAttribute("2")]
public sealed virtual string get_PreviousVersion();
    [NullableContextAttribute("2")]
public sealed virtual string get_PreviousBuild();
    [NullableContextAttribute("2")]
public sealed virtual string get_FirstInstalledVersion();
    [NullableContextAttribute("2")]
public sealed virtual string get_FirstInstalledBuild();
    public sealed virtual IReadOnlyList`1<string> get_VersionHistory();
    public sealed virtual IReadOnlyList`1<string> get_BuildHistory();
    public sealed virtual bool IsFirstLaunchForVersion(string version);
    public sealed virtual bool IsFirstLaunchForBuild(string build);
    public string GetStatus();
    private String[] ReadHistory(string key);
    private void WriteHistory(string key, IEnumerable`1<string> history);
    private string GetPrevious(string key);
    [CompilerGeneratedAttribute]
private bool <InitVersionTracking>b__12_0(string v);
    [CompilerGeneratedAttribute]
private bool <InitVersionTracking>b__12_1(string b);
}
internal static class Microsoft.Maui.ApplicationModel.WebUtils : object {
    internal static IDictionary`2<string, string> ParseQueryString(Uri uri);
    private static void UnpackParameters(ReadOnlySpan`1<char> query, Dictionary`2<string, string> parameters);
    internal static Uri EscapeUri(Uri uri);
    internal static bool CanHandleCallback(Uri expectedUrl, Uri callbackUrl);
    internal static NSUrl GetNativeUrl(Uri uri);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.ApplicationModel.WindowStateManager : object {
    [NullableAttribute("2")]
private static IWindowStateManager defaultImplementation;
    public static IWindowStateManager Default { get; }
    public static IWindowStateManager get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IWindowStateManager implementation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Maui.ApplicationModel.WindowStateManagerExtensions : object {
    [ExtensionAttribute]
public static UIViewController GetCurrentUIViewController(IWindowStateManager manager, bool throwOnNull);
    [ExtensionAttribute]
public static UIWindow GetCurrentUIWindow(IWindowStateManager manager, bool throwOnNull);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Maui.ApplicationModel.WindowStateManagerImplementation : object {
    private Func`1<UIViewController> getCurrentController;
    public sealed virtual void Init(Func`1<UIViewController> getCurrentUIViewController);
    public sealed virtual UIViewController GetCurrentUIViewController();
    public sealed virtual UIWindow GetCurrentUIWindow();
    private static UIWindow GetKeyWindow();
    private static UIWindow[] GetWindows();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Authentication.AppleSignInAuthenticator : object {
    [NullableAttribute("2")]
private static IAppleSignInAuthenticator defaultImplementation;
    public static IAppleSignInAuthenticator Default { get; }
    public static Task`1<WebAuthenticatorResult> AuthenticateAsync(Options options);
    public static IAppleSignInAuthenticator get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IAppleSignInAuthenticator implementation);
}
internal class Microsoft.Maui.Authentication.AppleSignInAuthenticatorImplementation : object {
    private AuthManager authManager;
    [AsyncStateMachineAttribute("Microsoft.Maui.Authentication.AppleSignInAuthenticatorImplementation/<AuthenticateAsync>d__1")]
public sealed virtual Task`1<WebAuthenticatorResult> AuthenticateAsync(Options options);
}
[SupportedOSPlatformAttribute("ios13.0")]
[SupportedOSPlatformAttribute("maccatalyst13.1")]
internal class Microsoft.Maui.Authentication.AuthManager : NSObject {
    private TaskCompletionSource`1<ASAuthorizationAppleIdCredential> tcsCredential;
    private UIWindow presentingAnchor;
    public AuthManager(UIWindow presentingWindow);
    public Task`1<ASAuthorizationAppleIdCredential> GetCredentialsAsync();
    public sealed virtual UIWindow GetPresentationAnchor(ASAuthorizationController controller);
    [ExportAttribute("authorizationController:didCompleteWithAuthorization:")]
public sealed virtual void DidComplete(ASAuthorizationController controller, ASAuthorization authorization);
    [ExportAttribute("authorizationController:didCompleteWithError:")]
public sealed virtual void DidComplete(ASAuthorizationController controller, NSError error);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Authentication.IAppleSignInAuthenticator {
    public abstract virtual Task`1<WebAuthenticatorResult> AuthenticateAsync(Options options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Authentication.IPlatformWebAuthenticatorCallback {
    public abstract virtual bool OpenUrlCallback(Uri uri);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Authentication.IWebAuthenticator {
    public abstract virtual Task`1<WebAuthenticatorResult> AuthenticateAsync(WebAuthenticatorOptions webAuthenticatorOptions);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Authentication.IWebAuthenticatorResponseDecoder {
    public abstract virtual IDictionary`2<string, string> DecodeResponse(Uri uri);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Authentication.WebAuthenticator : object {
    [NullableAttribute("2")]
private static IWebAuthenticator defaultImplementation;
    private static IWebAuthenticator Current { get; }
    public static IWebAuthenticator Default { get; }
    [UnsupportedOSPlatformAttribute("windows")]
public static Task`1<WebAuthenticatorResult> AuthenticateAsync(Uri url, Uri callbackUrl);
    [UnsupportedOSPlatformAttribute("windows")]
public static Task`1<WebAuthenticatorResult> AuthenticateAsync(WebAuthenticatorOptions webAuthenticatorOptions);
    private static IWebAuthenticator get_Current();
    public static IWebAuthenticator get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IWebAuthenticator implementation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Maui.Authentication.WebAuthenticatorExtensions : object {
    [ExtensionAttribute]
private static IPlatformWebAuthenticatorCallback AsPlatformCallback(IWebAuthenticator webAuthenticator);
    [ExtensionAttribute]
public static Task`1<WebAuthenticatorResult> AuthenticateAsync(IWebAuthenticator webAuthenticator, Uri url, Uri callbackUrl);
    [ExtensionAttribute]
public static bool OpenUrl(IWebAuthenticator webAuthenticator, Uri uri);
    [ExtensionAttribute]
public static bool OpenUrl(IWebAuthenticator webAuthenticator, UIApplication app, NSUrl url, NSDictionary options);
    [ExtensionAttribute]
public static bool ContinueUserActivity(IWebAuthenticator webAuthenticator, UIApplication application, NSUserActivity userActivity, UIApplicationRestorationHandler completionHandler);
}
internal class Microsoft.Maui.Authentication.WebAuthenticatorImplementation : object {
    private static int asWebAuthenticationSessionErrorCodeCanceledLogin;
    private static string asWebAuthenticationSessionErrorDomain;
    private static int sfAuthenticationErrorCanceledLogin;
    private static string sfAuthenticationErrorDomain;
    private TaskCompletionSource`1<WebAuthenticatorResult> tcsResponse;
    private UIViewController currentViewController;
    private Uri redirectUri;
    private WebAuthenticatorOptions currentOptions;
    private ASWebAuthenticationSession was;
    private SFAuthenticationSession sf;
    [AsyncStateMachineAttribute("Microsoft.Maui.Authentication.WebAuthenticatorImplementation/<AuthenticateAsync>d__10")]
public sealed virtual Task`1<WebAuthenticatorResult> AuthenticateAsync(WebAuthenticatorOptions webAuthenticatorOptions);
    private void ClearCookies();
    public sealed virtual bool OpenUrlCallback(Uri uri);
    private static bool VerifyHasUrlSchemeOrDoesntRequire(string scheme);
    [CompilerGeneratedAttribute]
private void <AuthenticateAsync>g__AuthSessionCallback|10_0(NSUrl cbUrl, NSError error);
    [CompilerGeneratedAttribute]
private void <AuthenticateAsync>b__10_1(SFSafariViewController svc);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Maui.Authentication.WebAuthenticatorOptions : object {
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <CallbackUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrefersEphemeralWebBrowserSession>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebAuthenticatorResponseDecoder <ResponseDecoder>k__BackingField;
    public Uri Url { get; public set; }
    public Uri CallbackUrl { get; public set; }
    public bool PrefersEphemeralWebBrowserSession { get; public set; }
    public IWebAuthenticatorResponseDecoder ResponseDecoder { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_CallbackUrl();
    [CompilerGeneratedAttribute]
public void set_CallbackUrl(Uri value);
    [CompilerGeneratedAttribute]
public bool get_PrefersEphemeralWebBrowserSession();
    [CompilerGeneratedAttribute]
public void set_PrefersEphemeralWebBrowserSession(bool value);
    [CompilerGeneratedAttribute]
public IWebAuthenticatorResponseDecoder get_ResponseDecoder();
    [CompilerGeneratedAttribute]
public void set_ResponseDecoder(IWebAuthenticatorResponseDecoder value);
}
public class Microsoft.Maui.Authentication.WebAuthenticatorResult : object {
    [CompilerGeneratedAttribute]
private Uri <CallbackUri>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Properties>k__BackingField;
    public Uri CallbackUri { get; }
    public DateTimeOffset Timestamp { get; public set; }
    public Dictionary`2<string, string> Properties { get; public set; }
    public string AccessToken { get; }
    public string RefreshToken { get; }
    public string IdToken { get; }
    public Nullable`1<DateTimeOffset> RefreshTokenExpiresIn { get; }
    public Nullable`1<DateTimeOffset> ExpiresIn { get; }
    public WebAuthenticatorResult(Uri uri);
    public WebAuthenticatorResult(Uri uri, IWebAuthenticatorResponseDecoder responseDecoder);
    public WebAuthenticatorResult(IDictionary`2<string, string> properties);
    [CompilerGeneratedAttribute]
public Uri get_CallbackUri();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(Dictionary`2<string, string> value);
    public void Put(string key, string value);
    public string Get(string key);
    public string get_AccessToken();
    public string get_RefreshToken();
    public string get_IdToken();
    public Nullable`1<DateTimeOffset> get_RefreshTokenExpiresIn();
    public Nullable`1<DateTimeOffset> get_ExpiresIn();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Devices.Battery : object {
    [NullableAttribute("2")]
private static IBattery defaultImplementation;
    public static double ChargeLevel { get; }
    public static BatteryState State { get; }
    public static BatteryPowerSource PowerSource { get; }
    public static EnergySaverStatus EnergySaverStatus { get; }
    public static IBattery Default { get; }
    public static double get_ChargeLevel();
    public static BatteryState get_State();
    public static BatteryPowerSource get_PowerSource();
    public static EnergySaverStatus get_EnergySaverStatus();
    public static void add_BatteryInfoChanged(EventHandler`1<BatteryInfoChangedEventArgs> value);
    public static void remove_BatteryInfoChanged(EventHandler`1<BatteryInfoChangedEventArgs> value);
    public static void add_EnergySaverStatusChanged(EventHandler`1<EnergySaverStatusChangedEventArgs> value);
    public static void remove_EnergySaverStatusChanged(EventHandler`1<EnergySaverStatusChangedEventArgs> value);
    public static IBattery get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IBattery implementation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Maui.Devices.BatteryImplementation : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<BatteryInfoChangedEventArgs> BatteryInfoChangedInternal;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<EnergySaverStatusChangedEventArgs> EnergySaverStatusChangedInternal;
    private static double currentLevel;
    private static BatteryPowerSource currentSource;
    private static BatteryState currentState;
    [NullableAttribute("0")]
private NSObject levelObserver;
    [NullableAttribute("0")]
private NSObject stateObserver;
    [NullableAttribute("0")]
private NSObject saverStatusObserver;
    public EnergySaverStatus EnergySaverStatus { get; }
    public double ChargeLevel { get; }
    public BatteryState State { get; }
    public BatteryPowerSource PowerSource { get; }
    [CompilerGeneratedAttribute]
private void add_BatteryInfoChangedInternal(EventHandler`1<BatteryInfoChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_BatteryInfoChangedInternal(EventHandler`1<BatteryInfoChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void add_EnergySaverStatusChangedInternal(EventHandler`1<EnergySaverStatusChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_EnergySaverStatusChangedInternal(EventHandler`1<EnergySaverStatusChangedEventArgs> value);
    public sealed virtual void add_BatteryInfoChanged(EventHandler`1<BatteryInfoChangedEventArgs> value);
    public sealed virtual void remove_BatteryInfoChanged(EventHandler`1<BatteryInfoChangedEventArgs> value);
    public sealed virtual void add_EnergySaverStatusChanged(EventHandler`1<EnergySaverStatusChangedEventArgs> value);
    public sealed virtual void remove_EnergySaverStatusChanged(EventHandler`1<EnergySaverStatusChangedEventArgs> value);
    private void SetCurrent();
    private void OnBatteryInfoChanged(double level, BatteryState state, BatteryPowerSource source);
    private void OnBatteryInfoChanged();
    private void OnBatteryInfoChanged(BatteryInfoChangedEventArgs e);
    private void OnEnergySaverChanged();
    private void OnEnergySaverChanged(EnergySaverStatus saverStatus);
    private void OnEnergySaverChanged(EnergySaverStatusChangedEventArgs e);
    private void StartEnergySaverListeners();
    private void StopEnergySaverListeners();
    [NullableContextAttribute("0")]
private void PowerChangedNotification(NSNotification notification);
    public sealed virtual EnergySaverStatus get_EnergySaverStatus();
    private void StartBatteryListeners();
    private void StopBatteryListeners();
    [NullableContextAttribute("0")]
private void BatteryInfoChangedNotification(object sender, NSNotificationEventArgs args);
    public sealed virtual double get_ChargeLevel();
    public sealed virtual BatteryState get_State();
    public sealed virtual BatteryPowerSource get_PowerSource();
}
public class Microsoft.Maui.Devices.BatteryInfoChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private double <ChargeLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private BatteryState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private BatteryPowerSource <PowerSource>k__BackingField;
    public double ChargeLevel { get; }
    public BatteryState State { get; }
    public BatteryPowerSource PowerSource { get; }
    public BatteryInfoChangedEventArgs(double level, BatteryState state, BatteryPowerSource source);
    [CompilerGeneratedAttribute]
public double get_ChargeLevel();
    [CompilerGeneratedAttribute]
public BatteryState get_State();
    [CompilerGeneratedAttribute]
public BatteryPowerSource get_PowerSource();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
public enum Microsoft.Maui.Devices.BatteryPowerSource : Enum {
    public int value__;
    public static BatteryPowerSource Unknown;
    public static BatteryPowerSource Battery;
    public static BatteryPowerSource AC;
    public static BatteryPowerSource Usb;
    public static BatteryPowerSource Wireless;
}
public enum Microsoft.Maui.Devices.BatteryState : Enum {
    public int value__;
    public static BatteryState Unknown;
    public static BatteryState Charging;
    public static BatteryState Discharging;
    public static BatteryState Full;
    public static BatteryState NotCharging;
    public static BatteryState NotPresent;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Devices.DeviceDisplay : object {
    [NullableAttribute("2")]
private static IDeviceDisplay currentImplementation;
    public static bool KeepScreenOn { get; public set; }
    public static DisplayInfo MainDisplayInfo { get; }
    public static IDeviceDisplay Current { get; }
    public static bool get_KeepScreenOn();
    public static void set_KeepScreenOn(bool value);
    public static DisplayInfo get_MainDisplayInfo();
    public static void add_MainDisplayInfoChanged(EventHandler`1<DisplayInfoChangedEventArgs> value);
    public static void remove_MainDisplayInfoChanged(EventHandler`1<DisplayInfoChangedEventArgs> value);
    public static IDeviceDisplay get_Current();
    [NullableContextAttribute("2")]
internal static void SetCurrent(IDeviceDisplay implementation);
}
internal class Microsoft.Maui.Devices.DeviceDisplayImplementation : DeviceDisplayImplementationBase {
    [NullableAttribute("2")]
private NSObject observer;
    protected virtual bool GetKeepScreenOn();
    protected virtual void SetKeepScreenOn(bool keepScreenOn);
    protected virtual DisplayInfo GetMainDisplayInfo();
    [UnsupportedOSPlatformAttribute("ios13.0")]
protected virtual void StartScreenMetricsListeners();
    protected virtual void StopScreenMetricsListeners();
    [NullableContextAttribute("1")]
private void OnMainDisplayInfoChanged(NSNotification obj);
    private static DisplayOrientation CalculateOrientation();
    private static DisplayRotation CalculateRotation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.Maui.Devices.DeviceDisplayImplementationBase : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<DisplayInfoChangedEventArgs> MainDisplayInfoChangedInternal;
    private DisplayInfo _currentMetrics;
    public DisplayInfo MainDisplayInfo { get; }
    public bool KeepScreenOn { get; public set; }
    [CompilerGeneratedAttribute]
private void add_MainDisplayInfoChangedInternal(EventHandler`1<DisplayInfoChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_MainDisplayInfoChangedInternal(EventHandler`1<DisplayInfoChangedEventArgs> value);
    public sealed virtual DisplayInfo get_MainDisplayInfo();
    public sealed virtual bool get_KeepScreenOn();
    public sealed virtual void set_KeepScreenOn(bool value);
    public sealed virtual void add_MainDisplayInfoChanged(EventHandler`1<DisplayInfoChangedEventArgs> value);
    public sealed virtual void remove_MainDisplayInfoChanged(EventHandler`1<DisplayInfoChangedEventArgs> value);
    private void SetCurrent(DisplayInfo metrics);
    protected void OnMainDisplayInfoChanged(DisplayInfoChangedEventArgs e);
    protected void OnMainDisplayInfoChanged();
    protected abstract virtual DisplayInfo GetMainDisplayInfo();
    protected abstract virtual bool GetKeepScreenOn();
    protected abstract virtual void SetKeepScreenOn(bool keepScreenOn);
    protected abstract virtual void StartScreenMetricsListeners();
    protected abstract virtual void StopScreenMetricsListeners();
}
[IsReadOnlyAttribute]
public class Microsoft.Maui.Devices.DeviceIdiom : ValueType {
    private string deviceIdiom;
    [CompilerGeneratedAttribute]
private static DeviceIdiom <Phone>k__BackingField;
    [CompilerGeneratedAttribute]
private static DeviceIdiom <Tablet>k__BackingField;
    [CompilerGeneratedAttribute]
private static DeviceIdiom <Desktop>k__BackingField;
    [CompilerGeneratedAttribute]
private static DeviceIdiom <TV>k__BackingField;
    [CompilerGeneratedAttribute]
private static DeviceIdiom <Watch>k__BackingField;
    [CompilerGeneratedAttribute]
private static DeviceIdiom <Unknown>k__BackingField;
    public static DeviceIdiom Phone { get; }
    public static DeviceIdiom Tablet { get; }
    public static DeviceIdiom Desktop { get; }
    public static DeviceIdiom TV { get; }
    public static DeviceIdiom Watch { get; }
    public static DeviceIdiom Unknown { get; }
    private DeviceIdiom(string deviceIdiom);
    private static DeviceIdiom();
    [CompilerGeneratedAttribute]
public static DeviceIdiom get_Phone();
    [CompilerGeneratedAttribute]
public static DeviceIdiom get_Tablet();
    [CompilerGeneratedAttribute]
public static DeviceIdiom get_Desktop();
    [CompilerGeneratedAttribute]
public static DeviceIdiom get_TV();
    [CompilerGeneratedAttribute]
public static DeviceIdiom get_Watch();
    [CompilerGeneratedAttribute]
public static DeviceIdiom get_Unknown();
    public static DeviceIdiom Create(string deviceIdiom);
    public sealed virtual bool Equals(DeviceIdiom other);
    internal bool Equals(string other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(DeviceIdiom left, DeviceIdiom right);
    public static bool op_Inequality(DeviceIdiom left, DeviceIdiom right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Devices.DeviceInfo : object {
    [NullableAttribute("2")]
private static IDeviceInfo currentImplementation;
    public static string Model { get; }
    public static string Manufacturer { get; }
    public static string Name { get; }
    public static string VersionString { get; }
    public static Version Version { get; }
    public static DevicePlatform Platform { get; }
    public static DeviceIdiom Idiom { get; }
    public static DeviceType DeviceType { get; }
    public static IDeviceInfo Current { get; }
    public static string get_Model();
    public static string get_Manufacturer();
    public static string get_Name();
    public static string get_VersionString();
    public static Version get_Version();
    public static DevicePlatform get_Platform();
    public static DeviceIdiom get_Idiom();
    public static DeviceType get_DeviceType();
    public static IDeviceInfo get_Current();
    [NullableContextAttribute("2")]
internal static void SetCurrent(IDeviceInfo implementation);
}
internal class Microsoft.Maui.Devices.DeviceInfoImplementation : object {
    public string Model { get; }
    public string Manufacturer { get; }
    public string Name { get; }
    public string VersionString { get; }
    public Version Version { get; }
    public DevicePlatform Platform { get; }
    public DeviceIdiom Idiom { get; }
    public DeviceType DeviceType { get; }
    public sealed virtual string get_Model();
    public sealed virtual string get_Manufacturer();
    public sealed virtual string get_Name();
    public sealed virtual string get_VersionString();
    public sealed virtual Version get_Version();
    public sealed virtual DevicePlatform get_Platform();
    public sealed virtual DeviceIdiom get_Idiom();
    public sealed virtual DeviceType get_DeviceType();
}
[IsReadOnlyAttribute]
public class Microsoft.Maui.Devices.DevicePlatform : ValueType {
    private string devicePlatform;
    [CompilerGeneratedAttribute]
private static DevicePlatform <Android>k__BackingField;
    [CompilerGeneratedAttribute]
private static DevicePlatform <iOS>k__BackingField;
    [CompilerGeneratedAttribute]
private static DevicePlatform <macOS>k__BackingField;
    [CompilerGeneratedAttribute]
private static DevicePlatform <MacCatalyst>k__BackingField;
    [CompilerGeneratedAttribute]
private static DevicePlatform <tvOS>k__BackingField;
    [CompilerGeneratedAttribute]
private static DevicePlatform <Tizen>k__BackingField;
    [CompilerGeneratedAttribute]
private static DevicePlatform <UWP>k__BackingField;
    [CompilerGeneratedAttribute]
private static DevicePlatform <WinUI>k__BackingField;
    [CompilerGeneratedAttribute]
private static DevicePlatform <watchOS>k__BackingField;
    [CompilerGeneratedAttribute]
private static DevicePlatform <Unknown>k__BackingField;
    public static DevicePlatform Android { get; }
    public static DevicePlatform iOS { get; }
    public static DevicePlatform macOS { get; }
    public static DevicePlatform MacCatalyst { get; }
    public static DevicePlatform tvOS { get; }
    public static DevicePlatform Tizen { get; }
    [ObsoleteAttribute("Use WinUI instead.")]
public static DevicePlatform UWP { get; }
    public static DevicePlatform WinUI { get; }
    public static DevicePlatform watchOS { get; }
    public static DevicePlatform Unknown { get; }
    private DevicePlatform(string devicePlatform);
    private static DevicePlatform();
    [CompilerGeneratedAttribute]
public static DevicePlatform get_Android();
    [CompilerGeneratedAttribute]
public static DevicePlatform get_iOS();
    [CompilerGeneratedAttribute]
public static DevicePlatform get_macOS();
    [CompilerGeneratedAttribute]
public static DevicePlatform get_MacCatalyst();
    [CompilerGeneratedAttribute]
public static DevicePlatform get_tvOS();
    [CompilerGeneratedAttribute]
public static DevicePlatform get_Tizen();
    [CompilerGeneratedAttribute]
public static DevicePlatform get_UWP();
    [CompilerGeneratedAttribute]
public static DevicePlatform get_WinUI();
    [CompilerGeneratedAttribute]
public static DevicePlatform get_watchOS();
    [CompilerGeneratedAttribute]
public static DevicePlatform get_Unknown();
    public static DevicePlatform Create(string devicePlatform);
    public sealed virtual bool Equals(DevicePlatform other);
    internal bool Equals(string other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(DevicePlatform left, DevicePlatform right);
    public static bool op_Inequality(DevicePlatform left, DevicePlatform right);
}
public enum Microsoft.Maui.Devices.DeviceType : Enum {
    public int value__;
    public static DeviceType Unknown;
    public static DeviceType Physical;
    public static DeviceType Virtual;
}
[IsReadOnlyAttribute]
public class Microsoft.Maui.Devices.DisplayInfo : ValueType {
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Density>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayOrientation <Orientation>k__BackingField;
    [CompilerGeneratedAttribute]
private DisplayRotation <Rotation>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RefreshRate>k__BackingField;
    public double Width { get; }
    public double Height { get; }
    public double Density { get; }
    public DisplayOrientation Orientation { get; }
    public DisplayRotation Rotation { get; }
    public float RefreshRate { get; }
    public DisplayInfo(double width, double height, double density, DisplayOrientation orientation, DisplayRotation rotation);
    public DisplayInfo(double width, double height, double density, DisplayOrientation orientation, DisplayRotation rotation, float rate);
    [CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public double get_Density();
    [CompilerGeneratedAttribute]
public DisplayOrientation get_Orientation();
    [CompilerGeneratedAttribute]
public DisplayRotation get_Rotation();
    [CompilerGeneratedAttribute]
public float get_RefreshRate();
    public static bool op_Equality(DisplayInfo left, DisplayInfo right);
    public static bool op_Inequality(DisplayInfo left, DisplayInfo right);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DisplayInfo other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.Maui.Devices.DisplayInfoChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DisplayInfo <DisplayInfo>k__BackingField;
    public DisplayInfo DisplayInfo { get; }
    public DisplayInfoChangedEventArgs(DisplayInfo displayInfo);
    [CompilerGeneratedAttribute]
public DisplayInfo get_DisplayInfo();
}
public enum Microsoft.Maui.Devices.DisplayOrientation : Enum {
    public int value__;
    public static DisplayOrientation Unknown;
    public static DisplayOrientation Portrait;
    public static DisplayOrientation Landscape;
}
public enum Microsoft.Maui.Devices.DisplayRotation : Enum {
    public int value__;
    public static DisplayRotation Unknown;
    public static DisplayRotation Rotation0;
    public static DisplayRotation Rotation90;
    public static DisplayRotation Rotation180;
    public static DisplayRotation Rotation270;
}
public enum Microsoft.Maui.Devices.EnergySaverStatus : Enum {
    public int value__;
    public static EnergySaverStatus Unknown;
    public static EnergySaverStatus On;
    public static EnergySaverStatus Off;
}
public class Microsoft.Maui.Devices.EnergySaverStatusChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private EnergySaverStatus <EnergySaverStatus>k__BackingField;
    public EnergySaverStatus EnergySaverStatus { get; }
    public EnergySaverStatusChangedEventArgs(EnergySaverStatus saverStatus);
    [CompilerGeneratedAttribute]
public EnergySaverStatus get_EnergySaverStatus();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Devices.Flashlight : object {
    [NullableAttribute("2")]
private static IFlashlight defaultImplementation;
    public static IFlashlight Default { get; }
    public static Task`1<bool> IsSupportedAsync();
    public static Task TurnOnAsync();
    public static Task TurnOffAsync();
    public static IFlashlight get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IFlashlight implementation);
}
internal class Microsoft.Maui.Devices.FlashlightImplementation : object {
    public sealed virtual Task`1<bool> IsSupportedAsync();
    public sealed virtual Task TurnOnAsync();
    public sealed virtual Task TurnOffAsync();
    private void Toggle(bool on);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Devices.HapticFeedback : object {
    [NullableAttribute("2")]
private static IHapticFeedback defaultImplementation;
    public static IHapticFeedback Default { get; }
    public static void Perform(HapticFeedbackType type);
    public static IHapticFeedback get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IHapticFeedback implementation);
}
internal class Microsoft.Maui.Devices.HapticFeedbackImplementation : object {
    public bool IsSupported { get; }
    public sealed virtual bool get_IsSupported();
    public sealed virtual void Perform(HapticFeedbackType type);
    private void Click();
    private void LongPress();
}
public enum Microsoft.Maui.Devices.HapticFeedbackType : Enum {
    public int value__;
    public static HapticFeedbackType Click;
    public static HapticFeedbackType LongPress;
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Devices.IBattery {
    public double ChargeLevel { get; }
    public BatteryState State { get; }
    public BatteryPowerSource PowerSource { get; }
    public EnergySaverStatus EnergySaverStatus { get; }
    public abstract virtual double get_ChargeLevel();
    public abstract virtual BatteryState get_State();
    public abstract virtual BatteryPowerSource get_PowerSource();
    public abstract virtual EnergySaverStatus get_EnergySaverStatus();
    [CompilerGeneratedAttribute]
public abstract virtual void add_BatteryInfoChanged(EventHandler`1<BatteryInfoChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_BatteryInfoChanged(EventHandler`1<BatteryInfoChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_EnergySaverStatusChanged(EventHandler`1<EnergySaverStatusChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EnergySaverStatusChanged(EventHandler`1<EnergySaverStatusChangedEventArgs> value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Devices.IDeviceDisplay {
    public bool KeepScreenOn { get; public set; }
    public DisplayInfo MainDisplayInfo { get; }
    public abstract virtual bool get_KeepScreenOn();
    public abstract virtual void set_KeepScreenOn(bool value);
    public abstract virtual DisplayInfo get_MainDisplayInfo();
    [CompilerGeneratedAttribute]
public abstract virtual void add_MainDisplayInfoChanged(EventHandler`1<DisplayInfoChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_MainDisplayInfoChanged(EventHandler`1<DisplayInfoChangedEventArgs> value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Devices.IDeviceInfo {
    public string Model { get; }
    public string Manufacturer { get; }
    public string Name { get; }
    public string VersionString { get; }
    public Version Version { get; }
    public DevicePlatform Platform { get; }
    public DeviceIdiom Idiom { get; }
    public DeviceType DeviceType { get; }
    public abstract virtual string get_Model();
    public abstract virtual string get_Manufacturer();
    public abstract virtual string get_Name();
    public abstract virtual string get_VersionString();
    public abstract virtual Version get_Version();
    public abstract virtual DevicePlatform get_Platform();
    public abstract virtual DeviceIdiom get_Idiom();
    public abstract virtual DeviceType get_DeviceType();
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Devices.IFlashlight {
    public abstract virtual Task`1<bool> IsSupportedAsync();
    public abstract virtual Task TurnOnAsync();
    public abstract virtual Task TurnOffAsync();
}
public interface Microsoft.Maui.Devices.IHapticFeedback {
    public bool IsSupported { get; }
    public abstract virtual bool get_IsSupported();
    public abstract virtual void Perform(HapticFeedbackType type);
}
public interface Microsoft.Maui.Devices.IVibration {
    public bool IsSupported { get; }
    public abstract virtual bool get_IsSupported();
    public abstract virtual void Vibrate();
    public abstract virtual void Vibrate(TimeSpan duration);
    public abstract virtual void Cancel();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Devices.Sensors.Accelerometer : object {
    [NullableAttribute("2")]
private static IAccelerometer defaultImplementation;
    public static bool IsSupported { get; }
    public static bool IsMonitoring { get; }
    public static IAccelerometer Default { get; }
    public static void add_ReadingChanged(EventHandler`1<AccelerometerChangedEventArgs> value);
    public static void remove_ReadingChanged(EventHandler`1<AccelerometerChangedEventArgs> value);
    public static void add_ShakeDetected(EventHandler value);
    public static void remove_ShakeDetected(EventHandler value);
    public static bool get_IsSupported();
    public static bool get_IsMonitoring();
    public static void Start(SensorSpeed sensorSpeed);
    public static void Stop();
    public static IAccelerometer get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IAccelerometer implementation);
}
public class Microsoft.Maui.Devices.Sensors.AccelerometerChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private AccelerometerData <Reading>k__BackingField;
    public AccelerometerData Reading { get; }
    public AccelerometerChangedEventArgs(AccelerometerData reading);
    [CompilerGeneratedAttribute]
public AccelerometerData get_Reading();
}
[IsReadOnlyAttribute]
public class Microsoft.Maui.Devices.Sensors.AccelerometerData : ValueType {
    [CompilerGeneratedAttribute]
private Vector3 <Acceleration>k__BackingField;
    public Vector3 Acceleration { get; }
    public AccelerometerData(double x, double y, double z);
    public AccelerometerData(float x, float y, float z);
    [CompilerGeneratedAttribute]
public Vector3 get_Acceleration();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(AccelerometerData other);
    public static bool op_Equality(AccelerometerData left, AccelerometerData right);
    public static bool op_Inequality(AccelerometerData left, AccelerometerData right);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Maui.Devices.Sensors.AccelerometerImplementation : object {
    private static double accelerationThreshold;
    private static double gravity;
    private static AccelerometerQueue queue;
    private static bool useSyncContext;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<AccelerometerChangedEventArgs> ReadingChanged;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler ShakeDetected;
    [CompilerGeneratedAttribute]
private bool <IsMonitoring>k__BackingField;
    [NullableAttribute("2")]
private static CMMotionManager motionManager;
    public bool IsMonitoring { get; private set; }
    private static CMMotionManager MotionManager { get; }
    public bool IsSupported { get; }
    private static AccelerometerImplementation();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ReadingChanged(EventHandler`1<AccelerometerChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ReadingChanged(EventHandler`1<AccelerometerChangedEventArgs> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_ShakeDetected(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_ShakeDetected(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMonitoring();
    [CompilerGeneratedAttribute]
private void set_IsMonitoring(bool value);
    public sealed virtual void Start(SensorSpeed sensorSpeed);
    public sealed virtual void Stop();
    internal void OnChanged(AccelerometerData reading);
    internal void OnChanged(AccelerometerChangedEventArgs e);
    private void ProcessShakeEvent(Vector3 acceleration);
    private static CMMotionManager get_MotionManager();
    public sealed virtual bool get_IsSupported();
    private void PlatformStart(SensorSpeed sensorSpeed);
    private void DataUpdated(CMAccelerometerData data, NSError error);
    private void PlatformStop();
    [CompilerGeneratedAttribute]
internal static long <ProcessShakeEvent>g__Nanoseconds|18_0(DateTime time);
}
internal class Microsoft.Maui.Devices.Sensors.AccelerometerQueue : object {
    private AccelerometerDataPool pool;
    private long maxWindowSize;
    private long minWindowSize;
    private int minQueueSize;
    private AccelerometerSample oldest;
    private AccelerometerSample newest;
    private int sampleCount;
    private int acceleratingCount;
    internal bool IsShaking { get; }
    internal void Add(long timestamp, bool accelerating);
    internal void Clear();
    private void Purge(long cutoff);
    internal bool get_IsShaking();
}
public enum Microsoft.Maui.Devices.Sensors.AltitudeReferenceSystem : Enum {
    public int value__;
    public static AltitudeReferenceSystem Unspecified;
    public static AltitudeReferenceSystem Terrain;
    public static AltitudeReferenceSystem Ellipsoid;
    public static AltitudeReferenceSystem Geoid;
    public static AltitudeReferenceSystem Surface;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Devices.Sensors.Barometer : object {
    [NullableAttribute("2")]
private static IBarometer defaultImplementation;
    public static bool IsSupported { get; }
    public static bool IsMonitoring { get; }
    public static IBarometer Default { get; }
    public static void add_ReadingChanged(EventHandler`1<BarometerChangedEventArgs> value);
    public static void remove_ReadingChanged(EventHandler`1<BarometerChangedEventArgs> value);
    public static bool get_IsSupported();
    public static bool get_IsMonitoring();
    public static void Start(SensorSpeed sensorSpeed);
    public static void Stop();
    public static IBarometer get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IBarometer implementation);
}
public class Microsoft.Maui.Devices.Sensors.BarometerChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private BarometerData <Reading>k__BackingField;
    public BarometerData Reading { get; }
    public BarometerChangedEventArgs(BarometerData reading);
    [CompilerGeneratedAttribute]
public BarometerData get_Reading();
}
[IsReadOnlyAttribute]
public class Microsoft.Maui.Devices.Sensors.BarometerData : ValueType {
    [CompilerGeneratedAttribute]
private double <PressureInHectopascals>k__BackingField;
    public double PressureInHectopascals { get; }
    public BarometerData(double pressure);
    [CompilerGeneratedAttribute]
public double get_PressureInHectopascals();
    public static bool op_Equality(BarometerData left, BarometerData right);
    public static bool op_Inequality(BarometerData left, BarometerData right);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(BarometerData other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
internal class Microsoft.Maui.Devices.Sensors.BarometerImplementation : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<BarometerChangedEventArgs> ReadingChanged;
    [CompilerGeneratedAttribute]
private bool <IsMonitoring>k__BackingField;
    [CompilerGeneratedAttribute]
private SensorSpeed <SensorSpeed>k__BackingField;
    private CMAltimeter altitudeManager;
    private bool UseSyncContext { get; }
    public bool IsMonitoring { get; private set; }
    private SensorSpeed SensorSpeed { get; private set; }
    public bool IsSupported { get; }
    private bool get_UseSyncContext();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ReadingChanged(EventHandler`1<BarometerChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ReadingChanged(EventHandler`1<BarometerChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMonitoring();
    [CompilerGeneratedAttribute]
private void set_IsMonitoring(bool value);
    [CompilerGeneratedAttribute]
private SensorSpeed get_SensorSpeed();
    [CompilerGeneratedAttribute]
private void set_SensorSpeed(SensorSpeed value);
    private void RaiseReadingChanged(BarometerData reading);
    public sealed virtual void Start(SensorSpeed sensorSpeed);
    public sealed virtual void Stop();
    public sealed virtual bool get_IsSupported();
    private void PlatformStart(SensorSpeed sensorSpeed);
    private void PlatformStop();
    [CompilerGeneratedAttribute]
private void <PlatformStart>g__LocationManagerUpdatedHeading|19_0(CMAltitudeData e, NSError error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Devices.Sensors.Compass : object {
    [NullableAttribute("2")]
private static ICompass defaultImplementation;
    public static bool IsSupported { get; }
    public static bool IsMonitoring { get; }
    public static bool ShouldDisplayHeadingCalibration { get; public set; }
    private static ICompass Current { get; }
    public static ICompass Default { get; }
    public static void add_ReadingChanged(EventHandler`1<CompassChangedEventArgs> value);
    public static void remove_ReadingChanged(EventHandler`1<CompassChangedEventArgs> value);
    public static bool get_IsSupported();
    public static bool get_IsMonitoring();
    public static void Start(SensorSpeed sensorSpeed);
    public static void Start(SensorSpeed sensorSpeed, bool applyLowPassFilter);
    public static void Stop();
    public static bool get_ShouldDisplayHeadingCalibration();
    public static void set_ShouldDisplayHeadingCalibration(bool value);
    private static ICompass get_Current();
    public static ICompass get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(ICompass implementation);
}
public class Microsoft.Maui.Devices.Sensors.CompassChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private CompassData <Reading>k__BackingField;
    public CompassData Reading { get; }
    public CompassChangedEventArgs(CompassData reading);
    [CompilerGeneratedAttribute]
public CompassData get_Reading();
}
[IsReadOnlyAttribute]
public class Microsoft.Maui.Devices.Sensors.CompassData : ValueType {
    [CompilerGeneratedAttribute]
private double <HeadingMagneticNorth>k__BackingField;
    public double HeadingMagneticNorth { get; }
    public CompassData(double headingMagneticNorth);
    [CompilerGeneratedAttribute]
public double get_HeadingMagneticNorth();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CompassData other);
    public static bool op_Equality(CompassData left, CompassData right);
    public static bool op_Inequality(CompassData left, CompassData right);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[ExtensionAttribute]
public static class Microsoft.Maui.Devices.Sensors.CompassExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void SetShouldDisplayHeadingCalibration(ICompass compass, bool shouldDisplay);
}
internal class Microsoft.Maui.Devices.Sensors.CompassImplementation : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<CompassChangedEventArgs> ReadingChanged;
    [CompilerGeneratedAttribute]
private bool <IsMonitoring>k__BackingField;
    [CompilerGeneratedAttribute]
private SensorSpeed <SensorSpeed>k__BackingField;
    internal static double FastestFilter;
    internal static double GameFilter;
    internal static double NormalFilter;
    internal static double UIFilter;
    [CompilerGeneratedAttribute]
private bool <ShouldDisplayHeadingCalibration>k__BackingField;
    private CLLocationManager locationManager;
    private bool UseSyncContext { get; }
    public bool IsSupported { get; }
    public bool IsMonitoring { get; private set; }
    private SensorSpeed SensorSpeed { get; private set; }
    public bool ShouldDisplayHeadingCalibration { get; public set; }
    private bool PlatformIsSupported { get; }
    private bool get_UseSyncContext();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ReadingChanged(EventHandler`1<CompassChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ReadingChanged(EventHandler`1<CompassChangedEventArgs> value);
    public sealed virtual bool get_IsSupported();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMonitoring();
    [CompilerGeneratedAttribute]
private void set_IsMonitoring(bool value);
    [CompilerGeneratedAttribute]
private SensorSpeed get_SensorSpeed();
    [CompilerGeneratedAttribute]
private void set_SensorSpeed(SensorSpeed value);
    public sealed virtual void Start(SensorSpeed sensorSpeed);
    public sealed virtual void Start(SensorSpeed sensorSpeed, bool applyLowPassFilter);
    public sealed virtual void Stop();
    internal void RaiseReadingChanged(CompassData data);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShouldDisplayHeadingCalibration();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShouldDisplayHeadingCalibration(bool value);
    private bool get_PlatformIsSupported();
    private void PlatformStart(SensorSpeed sensorSpeed, bool applyLowPassFilter);
    private bool LocationManagerShouldDisplayHeadingCalibration(CLLocationManager manager);
    private void LocationManagerUpdatedHeading(object sender, CLHeadingUpdatedEventArgs e);
    private void PlatformStop();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Maui.Devices.Sensors.ContinuousLocationListener : CLLocationManagerDelegate {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<CLLocation> <LocationHandler>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Action`1<GeolocationError> <ErrorHandler>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<CLLocation> LocationHandler { get; internal set; }
    [NullableAttribute("2")]
internal Action`1<GeolocationError> ErrorHandler { get; internal set; }
    [CompilerGeneratedAttribute]
internal Action`1<CLLocation> get_LocationHandler();
    [CompilerGeneratedAttribute]
internal void set_LocationHandler(Action`1<CLLocation> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal Action`1<GeolocationError> get_ErrorHandler();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ErrorHandler(Action`1<GeolocationError> value);
    public virtual void LocationsUpdated(CLLocationManager manager, CLLocation[] locations);
    public virtual void Failed(CLLocationManager manager, NSError error);
    public virtual void AuthorizationChanged(CLLocationManager manager, CLAuthorizationStatus status);
    public virtual bool ShouldDisplayHeadingCalibration(CLLocationManager manager);
}
public enum Microsoft.Maui.Devices.Sensors.DistanceUnits : Enum {
    public int value__;
    public static DistanceUnits Kilometers;
    public static DistanceUnits Miles;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Devices.Sensors.Geocoding : object {
    [NullableAttribute("2")]
private static IGeocoding defaultImplementation;
    private static IGeocoding Current { get; }
    public static IGeocoding Default { get; }
    public static Task`1<IEnumerable`1<Placemark>> GetPlacemarksAsync(Location location);
    public static Task`1<IEnumerable`1<Placemark>> GetPlacemarksAsync(double latitude, double longitude);
    public static Task`1<IEnumerable`1<Location>> GetLocationsAsync(string address);
    private static IGeocoding get_Current();
    public static IGeocoding get_Default();
    [NullableContextAttribute("2")]
internal static void SetCurrent(IGeocoding implementation);
}
[ExtensionAttribute]
public static class Microsoft.Maui.Devices.Sensors.GeocodingExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task`1<IEnumerable`1<Placemark>> GetPlacemarksAsync(IGeocoding geocoding, Location location);
}
internal class Microsoft.Maui.Devices.Sensors.GeocodingImplementation : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Maui.Devices.Sensors.GeocodingImplementation/<GetPlacemarksAsync>d__0")]
public sealed virtual Task`1<IEnumerable`1<Placemark>> GetPlacemarksAsync(double latitude, double longitude);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Maui.Devices.Sensors.GeocodingImplementation/<GetLocationsAsync>d__1")]
public sealed virtual Task`1<IEnumerable`1<Location>> GetLocationsAsync(string address);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Devices.Sensors.Geolocation : object {
    [NullableAttribute("2")]
private static IGeolocation defaultImplementation;
    public static bool IsListeningForeground { get; }
    private static IGeolocation Current { get; }
    public static IGeolocation Default { get; }
    public static Task`1<Location> GetLastKnownLocationAsync();
    public static Task`1<Location> GetLocationAsync();
    public static Task`1<Location> GetLocationAsync(GeolocationRequest request);
    public static Task`1<Location> GetLocationAsync(GeolocationRequest request, CancellationToken cancelToken);
    public static bool get_IsListeningForeground();
    public static void add_LocationChanged(EventHandler`1<GeolocationLocationChangedEventArgs> value);
    public static void remove_LocationChanged(EventHandler`1<GeolocationLocationChangedEventArgs> value);
    public static void add_ListeningFailed(EventHandler`1<GeolocationListeningFailedEventArgs> value);
    public static void remove_ListeningFailed(EventHandler`1<GeolocationListeningFailedEventArgs> value);
    public static Task`1<bool> StartListeningForegroundAsync(GeolocationListeningRequest request);
    public static void StopListeningForeground();
    private static IGeolocation get_Current();
    public static IGeolocation get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IGeolocation implementation);
}
public enum Microsoft.Maui.Devices.Sensors.GeolocationAccuracy : Enum {
    public int value__;
    public static GeolocationAccuracy Default;
    public static GeolocationAccuracy Lowest;
    public static GeolocationAccuracy Low;
    public static GeolocationAccuracy Medium;
    public static GeolocationAccuracy High;
    public static GeolocationAccuracy Best;
}
[ExtensionAttribute]
internal static class Microsoft.Maui.Devices.Sensors.GeolocationAccuracyExtensionMethods : object {
    [ExtensionAttribute]
internal static double PlatformDesiredAccuracy(GeolocationAccuracy desiredAccuracy);
}
public enum Microsoft.Maui.Devices.Sensors.GeolocationError : Enum {
    public int value__;
    public static GeolocationError PositionUnavailable;
    public static GeolocationError Unauthorized;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Maui.Devices.Sensors.GeolocationExtensions : object {
    [ExtensionAttribute]
public static Task`1<Location> GetLocationAsync(IGeolocation geolocation);
    [ExtensionAttribute]
public static Task`1<Location> GetLocationAsync(IGeolocation geolocation, GeolocationRequest request);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Maui.Devices.Sensors.GeolocationImplementation : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<GeolocationLocationChangedEventArgs> LocationChanged;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<GeolocationListeningFailedEventArgs> ListeningFailed;
    [NullableAttribute("2")]
private CLLocationManager listeningManager;
    public bool IsListeningForeground { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_LocationChanged(EventHandler`1<GeolocationLocationChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LocationChanged(EventHandler`1<GeolocationLocationChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListeningFailed(EventHandler`1<GeolocationListeningFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListeningFailed(EventHandler`1<GeolocationListeningFailedEventArgs> value);
    internal void OnLocationChanged(Location location);
    internal void OnLocationChanged(GeolocationLocationChangedEventArgs e);
    internal void OnLocationError(GeolocationError geolocationError);
    public sealed virtual bool get_IsListeningForeground();
    [AsyncStateMachineAttribute("Microsoft.Maui.Devices.Sensors.GeolocationImplementation/<GetLastKnownLocationAsync>d__12")]
public sealed virtual Task`1<Location> GetLastKnownLocationAsync();
    [AsyncStateMachineAttribute("Microsoft.Maui.Devices.Sensors.GeolocationImplementation/<GetLocationAsync>d__13")]
public sealed virtual Task`1<Location> GetLocationAsync(GeolocationRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Maui.Devices.Sensors.GeolocationImplementation/<StartListeningForegroundAsync>d__14")]
public sealed virtual Task`1<bool> StartListeningForegroundAsync(GeolocationListeningRequest request);
    public sealed virtual void StopListeningForeground();
}
public class Microsoft.Maui.Devices.Sensors.GeolocationListeningFailedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private GeolocationError <Error>k__BackingField;
    public GeolocationError Error { get; }
    public GeolocationListeningFailedEventArgs(GeolocationError geolocationError);
    [CompilerGeneratedAttribute]
public GeolocationError get_Error();
}
public class Microsoft.Maui.Devices.Sensors.GeolocationListeningRequest : object {
    [CompilerGeneratedAttribute]
private TimeSpan <MinimumTime>k__BackingField;
    [CompilerGeneratedAttribute]
private GeolocationAccuracy <DesiredAccuracy>k__BackingField;
    public TimeSpan MinimumTime { get; public set; }
    public GeolocationAccuracy DesiredAccuracy { get; public set; }
    internal double PlatformDesiredAccuracy { get; }
    public GeolocationListeningRequest(GeolocationAccuracy accuracy);
    public GeolocationListeningRequest(GeolocationAccuracy accuracy, TimeSpan minimumTime);
    [CompilerGeneratedAttribute]
public TimeSpan get_MinimumTime();
    [CompilerGeneratedAttribute]
public void set_MinimumTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public GeolocationAccuracy get_DesiredAccuracy();
    [CompilerGeneratedAttribute]
public void set_DesiredAccuracy(GeolocationAccuracy value);
    internal double get_PlatformDesiredAccuracy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Maui.Devices.Sensors.GeolocationLocationChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    public Location Location { get; }
    public GeolocationLocationChangedEventArgs(Location location);
    [CompilerGeneratedAttribute]
public Location get_Location();
}
public class Microsoft.Maui.Devices.Sensors.GeolocationRequest : object {
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private GeolocationAccuracy <DesiredAccuracy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequestFullAccuracy>k__BackingField;
    public TimeSpan Timeout { get; public set; }
    public GeolocationAccuracy DesiredAccuracy { get; public set; }
    public bool RequestFullAccuracy { get; public set; }
    internal double PlatformDesiredAccuracy { get; }
    public GeolocationRequest(GeolocationAccuracy accuracy);
    public GeolocationRequest(GeolocationAccuracy accuracy, TimeSpan timeout);
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public GeolocationAccuracy get_DesiredAccuracy();
    [CompilerGeneratedAttribute]
public void set_DesiredAccuracy(GeolocationAccuracy value);
    [CompilerGeneratedAttribute]
public bool get_RequestFullAccuracy();
    [CompilerGeneratedAttribute]
public void set_RequestFullAccuracy(bool value);
    [NullableContextAttribute("1")]
public virtual string ToString();
    internal double get_PlatformDesiredAccuracy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Devices.Sensors.Gyroscope : object {
    [NullableAttribute("2")]
private static IGyroscope defaultImplementation;
    public static bool IsMonitoring { get; }
    public static bool IsSupported { get; }
    private static IGyroscope Current { get; }
    public static IGyroscope Default { get; }
    public static void add_ReadingChanged(EventHandler`1<GyroscopeChangedEventArgs> value);
    public static void remove_ReadingChanged(EventHandler`1<GyroscopeChangedEventArgs> value);
    public static bool get_IsMonitoring();
    public static bool get_IsSupported();
    public static void Start(SensorSpeed sensorSpeed);
    public static void Stop();
    private static IGyroscope get_Current();
    public static IGyroscope get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IGyroscope implementation);
}
public class Microsoft.Maui.Devices.Sensors.GyroscopeChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private GyroscopeData <Reading>k__BackingField;
    public GyroscopeData Reading { get; }
    public GyroscopeChangedEventArgs(GyroscopeData reading);
    [CompilerGeneratedAttribute]
public GyroscopeData get_Reading();
}
[IsReadOnlyAttribute]
public class Microsoft.Maui.Devices.Sensors.GyroscopeData : ValueType {
    [CompilerGeneratedAttribute]
private Vector3 <AngularVelocity>k__BackingField;
    public Vector3 AngularVelocity { get; }
    public GyroscopeData(double x, double y, double z);
    public GyroscopeData(float x, float y, float z);
    [CompilerGeneratedAttribute]
public Vector3 get_AngularVelocity();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GyroscopeData other);
    public static bool op_Equality(GyroscopeData left, GyroscopeData right);
    public static bool op_Inequality(GyroscopeData left, GyroscopeData right);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Maui.Devices.Sensors.GyroscopeImplementation : object {
    [CompilerGeneratedAttribute]
private SensorSpeed <SensorSpeed>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<GyroscopeChangedEventArgs> ReadingChanged;
    [CompilerGeneratedAttribute]
private bool <IsMonitoring>k__BackingField;
    [NullableAttribute("2")]
private static CMMotionManager motionManager;
    private bool UseSyncContext { get; }
    private SensorSpeed SensorSpeed { get; private set; }
    public bool IsMonitoring { get; private set; }
    public bool IsSupported { get; }
    private static CMMotionManager MotionManager { get; }
    private bool PlatformIsSupported { get; }
    private bool get_UseSyncContext();
    [CompilerGeneratedAttribute]
private SensorSpeed get_SensorSpeed();
    [CompilerGeneratedAttribute]
private void set_SensorSpeed(SensorSpeed value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ReadingChanged(EventHandler`1<GyroscopeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ReadingChanged(EventHandler`1<GyroscopeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMonitoring();
    [CompilerGeneratedAttribute]
private void set_IsMonitoring(bool value);
    public sealed virtual bool get_IsSupported();
    public sealed virtual void Start(SensorSpeed sensorSpeed);
    public sealed virtual void Stop();
    private void RaiseReadingChanged(GyroscopeData data);
    private static CMMotionManager get_MotionManager();
    private bool get_PlatformIsSupported();
    private void PlatformStart(SensorSpeed sensorSpeed);
    private void DataUpdated(CMGyroData data, NSError error);
    private void PlatformStop();
}
[NullableContextAttribute("2")]
public interface Microsoft.Maui.Devices.Sensors.IAccelerometer {
    public bool IsSupported { get; }
    public bool IsMonitoring { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReadingChanged(EventHandler`1<AccelerometerChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReadingChanged(EventHandler`1<AccelerometerChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ShakeDetected(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ShakeDetected(EventHandler value);
    public abstract virtual bool get_IsSupported();
    public abstract virtual bool get_IsMonitoring();
    public abstract virtual void Start(SensorSpeed sensorSpeed);
    public abstract virtual void Stop();
}
public interface Microsoft.Maui.Devices.Sensors.IBarometer {
    public bool IsSupported { get; }
    public bool IsMonitoring { get; }
    public abstract virtual bool get_IsSupported();
    public abstract virtual bool get_IsMonitoring();
    public abstract virtual void Start(SensorSpeed sensorSpeed);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReadingChanged(EventHandler`1<BarometerChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReadingChanged(EventHandler`1<BarometerChangedEventArgs> value);
    public abstract virtual void Stop();
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Devices.Sensors.ICompass {
    public bool IsSupported { get; }
    public bool IsMonitoring { get; }
    public abstract virtual bool get_IsSupported();
    public abstract virtual bool get_IsMonitoring();
    public abstract virtual void Start(SensorSpeed sensorSpeed);
    public abstract virtual void Start(SensorSpeed sensorSpeed, bool applyLowPassFilter);
    public abstract virtual void Stop();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReadingChanged(EventHandler`1<CompassChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReadingChanged(EventHandler`1<CompassChangedEventArgs> value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Devices.Sensors.IGeocoding {
    public abstract virtual Task`1<IEnumerable`1<Placemark>> GetPlacemarksAsync(double latitude, double longitude);
    public abstract virtual Task`1<IEnumerable`1<Location>> GetLocationsAsync(string address);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Devices.Sensors.IGeolocation {
    public bool IsListeningForeground { get; }
    public abstract virtual Task`1<Location> GetLastKnownLocationAsync();
    public abstract virtual Task`1<Location> GetLocationAsync(GeolocationRequest request, CancellationToken cancelToken);
    public abstract virtual bool get_IsListeningForeground();
    [CompilerGeneratedAttribute]
public abstract virtual void add_LocationChanged(EventHandler`1<GeolocationLocationChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LocationChanged(EventHandler`1<GeolocationLocationChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ListeningFailed(EventHandler`1<GeolocationListeningFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ListeningFailed(EventHandler`1<GeolocationListeningFailedEventArgs> value);
    public abstract virtual Task`1<bool> StartListeningForegroundAsync(GeolocationListeningRequest request);
    public abstract virtual void StopListeningForeground();
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Devices.Sensors.IGyroscope {
    public bool IsSupported { get; }
    public bool IsMonitoring { get; }
    public abstract virtual bool get_IsSupported();
    public abstract virtual bool get_IsMonitoring();
    public abstract virtual void Start(SensorSpeed sensorSpeed);
    public abstract virtual void Stop();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReadingChanged(EventHandler`1<GyroscopeChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReadingChanged(EventHandler`1<GyroscopeChangedEventArgs> value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Devices.Sensors.IMagnetometer {
    public bool IsSupported { get; }
    public bool IsMonitoring { get; }
    public abstract virtual bool get_IsSupported();
    public abstract virtual bool get_IsMonitoring();
    public abstract virtual void Start(SensorSpeed sensorSpeed);
    public abstract virtual void Stop();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReadingChanged(EventHandler`1<MagnetometerChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReadingChanged(EventHandler`1<MagnetometerChangedEventArgs> value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Devices.Sensors.IOrientationSensor {
    public bool IsSupported { get; }
    public bool IsMonitoring { get; }
    public abstract virtual bool get_IsSupported();
    public abstract virtual bool get_IsMonitoring();
    public abstract virtual void Start(SensorSpeed sensorSpeed);
    public abstract virtual void Stop();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ReadingChanged(EventHandler`1<OrientationSensorChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ReadingChanged(EventHandler`1<OrientationSensorChangedEventArgs> value);
}
public interface Microsoft.Maui.Devices.Sensors.IPlatformCompass {
    public bool ShouldDisplayHeadingCalibration { get; public set; }
    public abstract virtual bool get_ShouldDisplayHeadingCalibration();
    public abstract virtual void set_ShouldDisplayHeadingCalibration(bool value);
}
public interface Microsoft.Maui.Devices.Sensors.IPlatformGeocoding {
}
public class Microsoft.Maui.Devices.Sensors.Location : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Latitude>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Longitude>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Altitude>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Accuracy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <VerticalAccuracy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReducedAccuracy>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Speed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<double> <Course>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFromMockProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private AltitudeReferenceSystem <AltitudeReferenceSystem>k__BackingField;
    public DateTimeOffset Timestamp { get; public set; }
    public double Latitude { get; public set; }
    public double Longitude { get; public set; }
    public Nullable`1<double> Altitude { get; public set; }
    public Nullable`1<double> Accuracy { get; public set; }
    public Nullable`1<double> VerticalAccuracy { get; public set; }
    public bool ReducedAccuracy { get; public set; }
    public Nullable`1<double> Speed { get; public set; }
    public Nullable`1<double> Course { get; public set; }
    public bool IsFromMockProvider { get; public set; }
    public AltitudeReferenceSystem AltitudeReferenceSystem { get; public set; }
    public Location(double latitude, double longitude);
    public Location(double latitude, double longitude, DateTimeOffset timestamp);
    public Location(double latitude, double longitude, double altitude);
    public Location(Location point);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public double get_Latitude();
    [CompilerGeneratedAttribute]
public void set_Latitude(double value);
    [CompilerGeneratedAttribute]
public double get_Longitude();
    [CompilerGeneratedAttribute]
public void set_Longitude(double value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Altitude();
    [CompilerGeneratedAttribute]
public void set_Altitude(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Accuracy();
    [CompilerGeneratedAttribute]
public void set_Accuracy(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_VerticalAccuracy();
    [CompilerGeneratedAttribute]
public void set_VerticalAccuracy(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public bool get_ReducedAccuracy();
    [CompilerGeneratedAttribute]
public void set_ReducedAccuracy(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Speed();
    [CompilerGeneratedAttribute]
public void set_Speed(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Course();
    [CompilerGeneratedAttribute]
public void set_Course(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public bool get_IsFromMockProvider();
    [CompilerGeneratedAttribute]
public void set_IsFromMockProvider(bool value);
    [CompilerGeneratedAttribute]
public AltitudeReferenceSystem get_AltitudeReferenceSystem();
    [CompilerGeneratedAttribute]
public void set_AltitudeReferenceSystem(AltitudeReferenceSystem value);
    public static double CalculateDistance(double latitudeStart, double longitudeStart, Location locationEnd, DistanceUnits units);
    public static double CalculateDistance(Location locationStart, double latitudeEnd, double longitudeEnd, DistanceUnits units);
    public static double CalculateDistance(Location locationStart, Location locationEnd, DistanceUnits units);
    public static double CalculateDistance(double latitudeStart, double longitudeStart, double latitudeEnd, double longitudeEnd, DistanceUnits units);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Location left, Location right);
    public static bool op_Inequality(Location left, Location right);
}
[ExtensionAttribute]
public static class Microsoft.Maui.Devices.Sensors.LocationExtensions : object {
    [ExtensionAttribute]
public static double CalculateDistance(Location locationStart, double latitudeEnd, double longitudeEnd, DistanceUnits units);
    [ExtensionAttribute]
public static double CalculateDistance(Location locationStart, Location locationEnd, DistanceUnits units);
    [ExtensionAttribute]
public static Task OpenMapsAsync(Location location, MapLaunchOptions options);
    [ExtensionAttribute]
public static Task OpenMapsAsync(Location location);
    private static CLAuthorizationStatus CLAuthorizationStatus_objc_msgSend(IntPtr receiver, IntPtr selector);
    [ExtensionAttribute]
internal static Location ToLocation(CLPlacemark placemark);
    [ExtensionAttribute]
internal static IEnumerable`1<Location> ToLocations(IEnumerable`1<CLPlacemark> placemarks);
    [ExtensionAttribute]
internal static Location ToLocation(CLLocation location, bool reducedAccuracy);
    [ExtensionAttribute]
internal static DateTimeOffset ToDateTime(NSDate timestamp);
    [ExtensionAttribute]
internal static CLAuthorizationStatus GetAuthorizationStatus(CLLocationManager locationManager);
}
internal class Microsoft.Maui.Devices.Sensors.LowPassFilter : object {
    private static int length;
    private Queue`1<float> history;
    private float sin;
    private float cos;
    internal void Add(float radians);
    internal float Average();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Devices.Sensors.Magnetometer : object {
    [NullableAttribute("2")]
private static IMagnetometer defaultImplementation;
    public static bool IsMonitoring { get; }
    public static bool IsSupported { get; }
    private static IMagnetometer Current { get; }
    public static IMagnetometer Default { get; }
    public static void add_ReadingChanged(EventHandler`1<MagnetometerChangedEventArgs> value);
    public static void remove_ReadingChanged(EventHandler`1<MagnetometerChangedEventArgs> value);
    public static bool get_IsMonitoring();
    public static bool get_IsSupported();
    public static void Start(SensorSpeed sensorSpeed);
    public static void Stop();
    private static IMagnetometer get_Current();
    public static IMagnetometer get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IMagnetometer implementation);
}
public class Microsoft.Maui.Devices.Sensors.MagnetometerChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MagnetometerData <Reading>k__BackingField;
    public MagnetometerData Reading { get; }
    public MagnetometerChangedEventArgs(MagnetometerData reading);
    [CompilerGeneratedAttribute]
public MagnetometerData get_Reading();
}
[IsReadOnlyAttribute]
public class Microsoft.Maui.Devices.Sensors.MagnetometerData : ValueType {
    [CompilerGeneratedAttribute]
private Vector3 <MagneticField>k__BackingField;
    public Vector3 MagneticField { get; }
    public MagnetometerData(double x, double y, double z);
    public MagnetometerData(float x, float y, float z);
    [CompilerGeneratedAttribute]
public Vector3 get_MagneticField();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MagnetometerData other);
    public static bool op_Equality(MagnetometerData left, MagnetometerData right);
    public static bool op_Inequality(MagnetometerData left, MagnetometerData right);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Maui.Devices.Sensors.MagnetometerImplementation : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MagnetometerChangedEventArgs> ReadingChanged;
    [CompilerGeneratedAttribute]
private bool <IsMonitoring>k__BackingField;
    [CompilerGeneratedAttribute]
private SensorSpeed <SensorSpeed>k__BackingField;
    [NullableAttribute("2")]
private static CMMotionManager motionManager;
    private bool UseSyncContext { get; }
    public bool IsMonitoring { get; private set; }
    public bool IsSupported { get; }
    private SensorSpeed SensorSpeed { get; private set; }
    private static CMMotionManager MotionManager { get; }
    private bool PlatformIsSupported { get; }
    private bool get_UseSyncContext();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ReadingChanged(EventHandler`1<MagnetometerChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ReadingChanged(EventHandler`1<MagnetometerChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMonitoring();
    [CompilerGeneratedAttribute]
private void set_IsMonitoring(bool value);
    public sealed virtual bool get_IsSupported();
    [CompilerGeneratedAttribute]
private SensorSpeed get_SensorSpeed();
    [CompilerGeneratedAttribute]
private void set_SensorSpeed(SensorSpeed value);
    public sealed virtual void Start(SensorSpeed sensorSpeed);
    public sealed virtual void Stop();
    private void RaiseReadingChanged(MagnetometerData data);
    private static CMMotionManager get_MotionManager();
    private bool get_PlatformIsSupported();
    private void PlatformStart(SensorSpeed sensorSpeed);
    private void DataUpdated(CMMagnetometerData data, NSError error);
    private void PlatformStop();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Devices.Sensors.OrientationSensor : object {
    [CompilerGeneratedAttribute]
private static bool <IsMonitoring>k__BackingField;
    [NullableAttribute("2")]
private static IOrientationSensor defaultImplementation;
    public static bool IsSupported { get; }
    public static bool IsMonitoring { get; private set; }
    private static IOrientationSensor Current { get; }
    public static IOrientationSensor Default { get; }
    public static void add_ReadingChanged(EventHandler`1<OrientationSensorChangedEventArgs> value);
    public static void remove_ReadingChanged(EventHandler`1<OrientationSensorChangedEventArgs> value);
    public static bool get_IsSupported();
    [CompilerGeneratedAttribute]
public static bool get_IsMonitoring();
    [CompilerGeneratedAttribute]
private static void set_IsMonitoring(bool value);
    public static void Start(SensorSpeed sensorSpeed);
    public static void Stop();
    private static IOrientationSensor get_Current();
    public static IOrientationSensor get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IOrientationSensor implementation);
}
public class Microsoft.Maui.Devices.Sensors.OrientationSensorChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private OrientationSensorData <Reading>k__BackingField;
    public OrientationSensorData Reading { get; }
    public OrientationSensorChangedEventArgs(OrientationSensorData reading);
    [CompilerGeneratedAttribute]
public OrientationSensorData get_Reading();
}
[IsReadOnlyAttribute]
public class Microsoft.Maui.Devices.Sensors.OrientationSensorData : ValueType {
    [CompilerGeneratedAttribute]
private Quaternion <Orientation>k__BackingField;
    public Quaternion Orientation { get; }
    public OrientationSensorData(double x, double y, double z, double w);
    public OrientationSensorData(float x, float y, float z, float w);
    [CompilerGeneratedAttribute]
public Quaternion get_Orientation();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(OrientationSensorData other);
    public static bool op_Equality(OrientationSensorData left, OrientationSensorData right);
    public static bool op_Inequality(OrientationSensorData left, OrientationSensorData right);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Maui.Devices.Sensors.OrientationSensorImplementation : object {
    [CompilerGeneratedAttribute]
private SensorSpeed <SensorSpeed>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<OrientationSensorChangedEventArgs> ReadingChanged;
    [CompilerGeneratedAttribute]
private bool <IsMonitoring>k__BackingField;
    [NullableAttribute("2")]
private static CMMotionManager motionManager;
    private bool UseSyncContext { get; }
    private SensorSpeed SensorSpeed { get; private set; }
    public bool IsSupported { get; }
    public bool IsMonitoring { get; private set; }
    private static CMMotionManager MotionManager { get; }
    private bool PlatformIsSupported { get; }
    private bool get_UseSyncContext();
    [CompilerGeneratedAttribute]
private SensorSpeed get_SensorSpeed();
    [CompilerGeneratedAttribute]
private void set_SensorSpeed(SensorSpeed value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ReadingChanged(EventHandler`1<OrientationSensorChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ReadingChanged(EventHandler`1<OrientationSensorChangedEventArgs> value);
    public sealed virtual bool get_IsSupported();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMonitoring();
    [CompilerGeneratedAttribute]
private void set_IsMonitoring(bool value);
    public sealed virtual void Start(SensorSpeed sensorSpeed);
    public sealed virtual void Stop();
    internal void RaiseReadingChanged(OrientationSensorData reading);
    private static CMMotionManager get_MotionManager();
    private bool get_PlatformIsSupported();
    private void PlatformStart(SensorSpeed sensorSpeed);
    private void DataUpdated(CMDeviceMotion data, NSError error);
    private void PlatformStop();
}
public class Microsoft.Maui.Devices.Sensors.Placemark : object {
    [CompilerGeneratedAttribute]
private Location <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CountryCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CountryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostalCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubLocality>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Thoroughfare>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubThoroughfare>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Locality>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdminArea>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubAdminArea>k__BackingField;
    public Location Location { get; public set; }
    public string CountryCode { get; public set; }
    public string CountryName { get; public set; }
    public string FeatureName { get; public set; }
    public string PostalCode { get; public set; }
    public string SubLocality { get; public set; }
    public string Thoroughfare { get; public set; }
    public string SubThoroughfare { get; public set; }
    public string Locality { get; public set; }
    public string AdminArea { get; public set; }
    public string SubAdminArea { get; public set; }
    public Placemark(Placemark placemark);
    [CompilerGeneratedAttribute]
public Location get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(Location value);
    [CompilerGeneratedAttribute]
public string get_CountryCode();
    [CompilerGeneratedAttribute]
public void set_CountryCode(string value);
    [CompilerGeneratedAttribute]
public string get_CountryName();
    [CompilerGeneratedAttribute]
public void set_CountryName(string value);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public void set_FeatureName(string value);
    [CompilerGeneratedAttribute]
public string get_PostalCode();
    [CompilerGeneratedAttribute]
public void set_PostalCode(string value);
    [CompilerGeneratedAttribute]
public string get_SubLocality();
    [CompilerGeneratedAttribute]
public void set_SubLocality(string value);
    [CompilerGeneratedAttribute]
public string get_Thoroughfare();
    [CompilerGeneratedAttribute]
public void set_Thoroughfare(string value);
    [CompilerGeneratedAttribute]
public string get_SubThoroughfare();
    [CompilerGeneratedAttribute]
public void set_SubThoroughfare(string value);
    [CompilerGeneratedAttribute]
public string get_Locality();
    [CompilerGeneratedAttribute]
public void set_Locality(string value);
    [CompilerGeneratedAttribute]
public string get_AdminArea();
    [CompilerGeneratedAttribute]
public void set_AdminArea(string value);
    [CompilerGeneratedAttribute]
public string get_SubAdminArea();
    [CompilerGeneratedAttribute]
public void set_SubAdminArea(string value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Microsoft.Maui.Devices.Sensors.PlacemarkExtensions : object {
    [ExtensionAttribute]
public static Task OpenMapsAsync(Placemark placemark, MapLaunchOptions options);
    [ExtensionAttribute]
public static Task OpenMapsAsync(Placemark placemark);
    [ExtensionAttribute]
internal static string GetEscapedAddress(Placemark placemark);
    [ExtensionAttribute]
internal static IEnumerable`1<Placemark> ToPlacemarks(IEnumerable`1<CLPlacemark> addresses);
}
public enum Microsoft.Maui.Devices.Sensors.SensorSpeed : Enum {
    public int value__;
    public static SensorSpeed Default;
    public static SensorSpeed UI;
    public static SensorSpeed Game;
    public static SensorSpeed Fastest;
}
[ExtensionAttribute]
internal static class Microsoft.Maui.Devices.Sensors.SensorSpeedExtensions : object {
    internal static UInt32 sensorIntervalDefault;
    internal static UInt32 sensorIntervalUI;
    internal static UInt32 sensorIntervalGame;
    internal static UInt32 sensorIntervalFastest;
    [ExtensionAttribute]
internal static double ToPlatform(SensorSpeed sensorSpeed);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Maui.Devices.Sensors.SingleLocationListener : CLLocationManagerDelegate {
    private bool wasRaised;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<CLLocation> <LocationHandler>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<CLLocation> LocationHandler { get; internal set; }
    [CompilerGeneratedAttribute]
internal Action`1<CLLocation> get_LocationHandler();
    [CompilerGeneratedAttribute]
internal void set_LocationHandler(Action`1<CLLocation> value);
    public virtual void LocationsUpdated(CLLocationManager manager, CLLocation[] locations);
    public virtual bool ShouldDisplayHeadingCalibration(CLLocationManager manager);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Devices.Vibration : object {
    [NullableAttribute("2")]
private static IVibration defaultImplementation;
    private static IVibration Current { get; }
    public static IVibration Default { get; }
    public static void Vibrate();
    public static void Vibrate(double duration);
    public static void Vibrate(TimeSpan duration);
    public static void Cancel();
    private static IVibration get_Current();
    public static IVibration get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IVibration implementation);
}
[ExtensionAttribute]
public static class Microsoft.Maui.Devices.VibrationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void Vibrate(IVibration vibration, double duration);
}
internal class Microsoft.Maui.Devices.VibrationImplementation : object {
    public bool IsSupported { get; }
    public sealed virtual void Vibrate();
    public sealed virtual void Vibrate(TimeSpan duration);
    public sealed virtual void Cancel();
    public sealed virtual bool get_IsSupported();
    private void PlatformVibrate();
    private void PlatformVibrate(TimeSpan duration);
    private void PlatformCancel();
}
[NullableContextAttribute("2")]
public interface Microsoft.Maui.Media.IMediaPicker {
    public bool IsCaptureSupported { get; }
    public abstract virtual bool get_IsCaptureSupported();
    public abstract virtual Task`1<FileResult> PickPhotoAsync(MediaPickerOptions options);
    public abstract virtual Task`1<FileResult> CapturePhotoAsync(MediaPickerOptions options);
    public abstract virtual Task`1<FileResult> PickVideoAsync(MediaPickerOptions options);
    public abstract virtual Task`1<FileResult> CaptureVideoAsync(MediaPickerOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Media.IPlatformScreenshot {
    public abstract virtual Task`1<IScreenshotResult> CaptureAsync(UIWindow window);
    public abstract virtual Task`1<IScreenshotResult> CaptureAsync(UIView view);
    public abstract virtual Task`1<IScreenshotResult> CaptureAsync(CALayer layer, bool skipChildren);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Media.IScreenshot {
    public bool IsCaptureSupported { get; }
    public abstract virtual bool get_IsCaptureSupported();
    public abstract virtual Task`1<IScreenshotResult> CaptureAsync();
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Media.IScreenshotResult {
    public int Width { get; }
    public int Height { get; }
    public abstract virtual int get_Width();
    public abstract virtual int get_Height();
    public abstract virtual Task`1<Stream> OpenReadAsync(ScreenshotFormat format, int quality);
    public abstract virtual Task CopyToAsync(Stream destination, ScreenshotFormat format, int quality);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Media.ITextToSpeech {
    public abstract virtual Task`1<IEnumerable`1<Locale>> GetLocalesAsync();
    public abstract virtual Task SpeakAsync(string text, SpeechOptions options, CancellationToken cancelToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Maui.Media.Locale : object {
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Country>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Language { get; }
    public string Country { get; }
    public string Name { get; }
    public string Id { get; }
    internal Locale(string language, string country, string name, string id);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public string get_Country();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Id();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Media.MediaPicker : object {
    private static IMediaPicker defaultImplementation;
    public static bool IsCaptureSupported { get; }
    [NullableAttribute("1")]
public static IMediaPicker Default { get; }
    public static bool get_IsCaptureSupported();
    public static Task`1<FileResult> PickPhotoAsync(MediaPickerOptions options);
    public static Task`1<FileResult> CapturePhotoAsync(MediaPickerOptions options);
    public static Task`1<FileResult> PickVideoAsync(MediaPickerOptions options);
    public static Task`1<FileResult> CaptureVideoAsync(MediaPickerOptions options);
    [NullableContextAttribute("1")]
public static IMediaPicker get_Default();
    internal static void SetDefault(IMediaPicker implementation);
}
internal class Microsoft.Maui.Media.MediaPickerImplementation : object {
    private static UIImagePickerController picker;
    public bool IsCaptureSupported { get; }
    public sealed virtual bool get_IsCaptureSupported();
    public sealed virtual Task`1<FileResult> PickPhotoAsync(MediaPickerOptions options);
    public sealed virtual Task`1<FileResult> CapturePhotoAsync(MediaPickerOptions options);
    public sealed virtual Task`1<FileResult> PickVideoAsync(MediaPickerOptions options);
    public sealed virtual Task`1<FileResult> CaptureVideoAsync(MediaPickerOptions options);
    [AsyncStateMachineAttribute("Microsoft.Maui.Media.MediaPickerImplementation/<PhotoAsync>d__7")]
public Task`1<FileResult> PhotoAsync(MediaPickerOptions options, bool photo, bool pickExisting);
    private static void GetFileResult(NSDictionary info, TaskCompletionSource`1<FileResult> tcs);
    private static FileResult DictionaryToMediaFile(NSDictionary info);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Maui.Media.MediaPickerOptions : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    public string Title { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Media.Screenshot : object {
    [NullableAttribute("2")]
private static IScreenshot defaultImplementation;
    public static bool IsCaptureSupported { get; }
    public static IScreenshot Default { get; }
    public static bool get_IsCaptureSupported();
    public static Task`1<IScreenshotResult> CaptureAsync();
    public static IScreenshot get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IScreenshot implementation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Maui.Media.ScreenshotExtensions : object {
    [ExtensionAttribute]
private static IPlatformScreenshot AsPlatform(IScreenshot screenshot);
    [ExtensionAttribute]
public static Task`1<IScreenshotResult> CaptureAsync(IScreenshot screenshot, UIWindow window);
    [ExtensionAttribute]
public static Task`1<IScreenshotResult> CaptureAsync(IScreenshot screenshot, UIView view);
    [ExtensionAttribute]
public static Task`1<IScreenshotResult> CaptureAsync(IScreenshot screenshot, CALayer layer, bool skipChildren);
}
public enum Microsoft.Maui.Media.ScreenshotFormat : Enum {
    public int value__;
    public static ScreenshotFormat Png;
    public static ScreenshotFormat Jpeg;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Maui.Media.ScreenshotImplementation : object {
    public bool IsCaptureSupported { get; }
    public sealed virtual bool get_IsCaptureSupported();
    public sealed virtual Task`1<IScreenshotResult> CaptureAsync();
    public sealed virtual Task`1<IScreenshotResult> CaptureAsync(UIWindow window);
    public sealed virtual Task`1<IScreenshotResult> CaptureAsync(UIView view);
    public sealed virtual Task`1<IScreenshotResult> CaptureAsync(CALayer layer, bool skipChildren);
    private static bool TryRender(UIView view, Exception& error);
    private static bool TryRender(CALayer layer, CGContext ctx, bool skipChildren, Exception& error);
    private static void HideSublayers(CALayer layer, Dictionary`2<CALayer, bool> visibilitySnapshot);
    private static void RestoreSublayers(CALayer layer, Dictionary`2<CALayer, bool> visibilitySnapshot);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Maui.Media.ScreenshotResult : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    private UIImage bmp;
    public int Width { get; }
    public int Height { get; }
    internal ScreenshotResult(UIImage bmp);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Height();
    public sealed virtual Task`1<Stream> OpenReadAsync(ScreenshotFormat format, int quality);
    public sealed virtual Task CopyToAsync(Stream destination, ScreenshotFormat format, int quality);
    private Task`1<Stream> PlatformOpenReadAsync(ScreenshotFormat format, int quality);
    private Task PlatformCopyToAsync(Stream destination, ScreenshotFormat format, int quality);
    private Task`1<Byte[]> PlatformToPixelBufferAsync();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Maui.Media.SpeechOptions : object {
    [CompilerGeneratedAttribute]
private Locale <Locale>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Pitch>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <Volume>k__BackingField;
    public Locale Locale { get; public set; }
    public Nullable`1<float> Pitch { get; public set; }
    public Nullable`1<float> Volume { get; public set; }
    [CompilerGeneratedAttribute]
public Locale get_Locale();
    [CompilerGeneratedAttribute]
public void set_Locale(Locale value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Pitch();
    [CompilerGeneratedAttribute]
public void set_Pitch(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_Volume();
    [CompilerGeneratedAttribute]
public void set_Volume(Nullable`1<float> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Media.TextToSpeech : object {
    [NullableAttribute("2")]
private static ITextToSpeech defaultImplementation;
    public static ITextToSpeech Default { get; }
    public static Task`1<IEnumerable`1<Locale>> GetLocalesAsync();
    public static Task SpeakAsync(string text, CancellationToken cancelToken);
    public static Task SpeakAsync(string text, SpeechOptions options, CancellationToken cancelToken);
    public static ITextToSpeech get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(ITextToSpeech implementation);
    internal static List`1<string> SplitSpeak(string text, int max);
}
internal class Microsoft.Maui.Media.TextToSpeechImplementation : object {
    internal static float PitchMax;
    internal static float PitchDefault;
    internal static float PitchMin;
    internal static float VolumeMax;
    internal static float VolumeDefault;
    internal static float VolumeMin;
    [NullableAttribute("2")]
private SemaphoreSlim semaphore;
    private Lazy`1<AVSpeechSynthesizer> speechSynthesizer;
    [NullableContextAttribute("1")]
public sealed virtual Task`1<IEnumerable`1<Locale>> GetLocalesAsync();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Maui.Media.TextToSpeechImplementation/<SpeakAsync>d__8")]
public sealed virtual Task SpeakAsync(string text, SpeechOptions options, CancellationToken cancelToken);
    private Task`1<IEnumerable`1<Locale>> PlatformGetLocalesAsync();
    [AsyncStateMachineAttribute("Microsoft.Maui.Media.TextToSpeechImplementation/<PlatformSpeakAsync>d__11")]
private Task PlatformSpeakAsync(string text, SpeechOptions options, CancellationToken cancelToken);
    private static AVSpeechUtterance GetSpeechUtterance(string text, SpeechOptions options);
    [AsyncStateMachineAttribute("Microsoft.Maui.Media.TextToSpeechImplementation/<SpeakUtterance>d__13")]
private Task SpeakUtterance(AVSpeechUtterance speechUtterance, CancellationToken cancelToken);
}
public static class Microsoft.Maui.Media.UnitConverters : object {
    private static double twoPi;
    private static double totalDegrees;
    private static double atmospherePascals;
    private static double degreesToRadians;
    private static double milesToKilometers;
    private static double milesToMeters;
    private static double kilometersToMiles;
    private static double celsiusToKelvin;
    private static double poundsToKg;
    private static double poundsToStones;
    private static double stonesToPounds;
    private static double kgToPounds;
    private static double meanEarthRadiusInKilometers;
    private static double internationalFootDefinition;
    private static double usSurveyFootDefinition;
    public static double FahrenheitToCelsius(double fahrenheit);
    public static double CelsiusToFahrenheit(double celsius);
    public static double CelsiusToKelvin(double celsius);
    public static double KelvinToCelsius(double kelvin);
    public static double MilesToMeters(double miles);
    public static double MilesToKilometers(double miles);
    public static double KilometersToMiles(double kilometers);
    public static double DegreesToRadians(double degrees);
    public static double RadiansToDegrees(double radians);
    public static double PoundsToKilograms(double pounds);
    public static double PoundsToStones(double pounds);
    public static double StonesToPounds(double stones);
    public static double KilogramsToPounds(double kilograms);
    public static double DegreesPerSecondToRadiansPerSecond(double degrees);
    public static double RadiansPerSecondToDegreesPerSecond(double radians);
    public static double DegreesPerSecondToHertz(double degrees);
    public static double RadiansPerSecondToHertz(double radians);
    public static double HertzToDegreesPerSecond(double hertz);
    public static double HertzToRadiansPerSecond(double hertz);
    public static double KilopascalsToHectopascals(double kpa);
    public static double HectopascalsToKilopascals(double hpa);
    public static double KilopascalsToPascals(double kpa);
    public static double HectopascalsToPascals(double hpa);
    public static double AtmospheresToPascals(double atm);
    public static double PascalsToAtmospheres(double pascals);
    public static double CoordinatesToMiles(double lat1, double lon1, double lat2, double lon2);
    public static double CoordinatesToKilometers(double lat1, double lon1, double lat2, double lon2);
    public static double MetersToInternationalFeet(double meters);
    public static double InternationalFeetToMeters(double internationalFeet);
    public static double MetersToUSSurveyFeet(double meters);
    public static double USSurveyFeetToMeters(double usFeet);
}
public enum Microsoft.Maui.Networking.ConnectionProfile : Enum {
    public int value__;
    public static ConnectionProfile Unknown;
    public static ConnectionProfile Bluetooth;
    public static ConnectionProfile Cellular;
    public static ConnectionProfile Ethernet;
    public static ConnectionProfile WiFi;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Networking.Connectivity : object {
    [NullableAttribute("2")]
private static IConnectivity currentImplementation;
    public static NetworkAccess NetworkAccess { get; }
    public static IEnumerable`1<ConnectionProfile> ConnectionProfiles { get; }
    public static IConnectivity Current { get; }
    public static NetworkAccess get_NetworkAccess();
    public static IEnumerable`1<ConnectionProfile> get_ConnectionProfiles();
    public static void add_ConnectivityChanged(EventHandler`1<ConnectivityChangedEventArgs> value);
    public static void remove_ConnectivityChanged(EventHandler`1<ConnectivityChangedEventArgs> value);
    public static IConnectivity get_Current();
    [NullableContextAttribute("2")]
internal static void SetCurrent(IConnectivity implementation);
}
public class Microsoft.Maui.Networking.ConnectivityChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private NetworkAccess <NetworkAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ConnectionProfile> <ConnectionProfiles>k__BackingField;
    public NetworkAccess NetworkAccess { get; }
    public IEnumerable`1<ConnectionProfile> ConnectionProfiles { get; }
    public ConnectivityChangedEventArgs(NetworkAccess access, IEnumerable`1<ConnectionProfile> connectionProfiles);
    [CompilerGeneratedAttribute]
public NetworkAccess get_NetworkAccess();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ConnectionProfile> get_ConnectionProfiles();
    public virtual string ToString();
}
internal class Microsoft.Maui.Networking.ConnectivityImplementation : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<ConnectivityChangedEventArgs> ConnectivityChangedInternal;
    private NetworkAccess currentAccess;
    private List`1<ConnectionProfile> currentProfiles;
    private static ReachabilityListener listener;
    public NetworkAccess NetworkAccess { get; }
    public IEnumerable`1<ConnectionProfile> ConnectionProfiles { get; }
    [CompilerGeneratedAttribute]
private void add_ConnectivityChangedInternal(EventHandler`1<ConnectivityChangedEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_ConnectivityChangedInternal(EventHandler`1<ConnectivityChangedEventArgs> value);
    public sealed virtual void add_ConnectivityChanged(EventHandler`1<ConnectivityChangedEventArgs> value);
    public sealed virtual void remove_ConnectivityChanged(EventHandler`1<ConnectivityChangedEventArgs> value);
    private void SetCurrent();
    private void OnConnectivityChanged(NetworkAccess access, IEnumerable`1<ConnectionProfile> profiles);
    private void OnConnectivityChanged();
    private void OnConnectivityChanged(ConnectivityChangedEventArgs e);
    private void StartListeners();
    private void StopListeners();
    public sealed virtual NetworkAccess get_NetworkAccess();
    [IteratorStateMachineAttribute("Microsoft.Maui.Networking.ConnectivityImplementation/<get_ConnectionProfiles>d__18")]
public sealed virtual IEnumerable`1<ConnectionProfile> get_ConnectionProfiles();
}
public interface Microsoft.Maui.Networking.IConnectivity {
    public IEnumerable`1<ConnectionProfile> ConnectionProfiles { get; }
    public NetworkAccess NetworkAccess { get; }
    public abstract virtual IEnumerable`1<ConnectionProfile> get_ConnectionProfiles();
    public abstract virtual NetworkAccess get_NetworkAccess();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConnectivityChanged(EventHandler`1<ConnectivityChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConnectivityChanged(EventHandler`1<ConnectivityChangedEventArgs> value);
}
public enum Microsoft.Maui.Networking.NetworkAccess : Enum {
    public int value__;
    public static NetworkAccess Unknown;
    public static NetworkAccess None;
    public static NetworkAccess Local;
    public static NetworkAccess ConstrainedInternet;
    public static NetworkAccess Internet;
}
internal enum Microsoft.Maui.Networking.NetworkStatus : Enum {
    public int value__;
    public static NetworkStatus NotReachable;
    public static NetworkStatus ReachableViaCarrierDataNetwork;
    public static NetworkStatus ReachableViaWiFiNetwork;
}
internal static class Microsoft.Maui.Networking.Reachability : object {
    internal static string HostName;
    internal static NetworkStatus RemoteHostStatus();
    internal static NetworkStatus InternetConnectionStatus();
    internal static IEnumerable`1<NetworkStatus> GetActiveConnectionType();
    internal static bool IsNetworkAvailable(NetworkReachabilityFlags& flags);
    internal static bool IsReachableWithoutRequiringConnection(NetworkReachabilityFlags flags);
}
internal class Microsoft.Maui.Networking.ReachabilityListener : object {
    private NetworkReachability defaultRouteReachability;
    private NetworkReachability remoteHostReachability;
    [CompilerGeneratedAttribute]
private Action ReachabilityChanged;
    [CompilerGeneratedAttribute]
internal void add_ReachabilityChanged(Action value);
    [CompilerGeneratedAttribute]
internal void remove_ReachabilityChanged(Action value);
    private sealed virtual override void System.IDisposable.Dispose();
    internal void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Maui.Networking.ReachabilityListener/<OnChange>d__8")]
private void OnChange(NetworkReachabilityFlags flags);
}
internal class Microsoft.Maui.Storage.BookmarkDataFileResult : FileResult {
    private NSData bookmark;
    internal BookmarkDataFileResult(NSUrl url);
    private void UpdateBookmark(NSUrl url, NSData newBookmark);
    internal virtual Task`1<Stream> PlatformOpenReadAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Maui.Storage.FileBase : object {
    internal static string DefaultContentType;
    [NullableAttribute("2")]
private string contentType;
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [NullableAttribute("2")]
private string fileName;
    public string FullPath { get; internal set; }
    public string ContentType { get; public set; }
    public string FileName { get; public set; }
    internal FileBase(string fullPath);
    public FileBase(FileBase file);
    internal FileBase(string fullPath, string contentType);
    [NullableContextAttribute("0")]
internal FileBase(NSUrl file);
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
internal void set_FullPath(string value);
    public string get_ContentType();
    public void set_ContentType(string value);
    internal string GetContentType();
    public string get_FileName();
    public void set_FileName(string value);
    internal string GetFileName();
    public Task`1<Stream> OpenReadAsync();
    [NullableContextAttribute("0")]
private string PlatformGetContentType(string extension);
    [NullableContextAttribute("0")]
private void PlatformInit(FileBase file);
    [NullableContextAttribute("0")]
internal virtual Task`1<Stream> PlatformOpenReadAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Maui.Storage.FileExtensions : object {
    internal static string Png;
    internal static string Jpg;
    internal static string Jpeg;
    internal static string Gif;
    internal static string Bmp;
    internal static string Avi;
    internal static string Flv;
    internal static string Gifv;
    internal static string Mp4;
    internal static string M4v;
    internal static string Mpg;
    internal static string Mpeg;
    internal static string Mp2;
    internal static string Mkv;
    internal static string Mov;
    internal static string Qt;
    internal static string Wmv;
    internal static string Pdf;
    internal static String[] AllImage { get; }
    internal static String[] AllJpeg { get; }
    internal static String[] AllVideo { get; }
    internal static String[] get_AllImage();
    internal static String[] get_AllJpeg();
    internal static String[] get_AllVideo();
    internal static string Clean(string extension, bool trimLeadingPeriod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Maui.Storage.FileMimeTypes : object {
    internal static string All;
    internal static string ImageAll;
    internal static string ImagePng;
    internal static string ImageJpg;
    internal static string VideoAll;
    internal static string EmailMessage;
    internal static string Pdf;
    internal static string TextPlain;
    internal static string OctetStream;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Storage.FilePicker : object {
    [NullableAttribute("2")]
private static IFilePicker defaultImplementation;
    public static IFilePicker Default { get; }
    [NullableContextAttribute("2")]
public static Task`1<FileResult> PickAsync(PickOptions options);
    public static Task`1<IEnumerable`1<FileResult>> PickMultipleAsync(PickOptions options);
    public static IFilePicker get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IFilePicker implementation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Maui.Storage.FilePickerFileType : object {
    public static FilePickerFileType Images;
    public static FilePickerFileType Png;
    public static FilePickerFileType Jpeg;
    public static FilePickerFileType Videos;
    public static FilePickerFileType Pdf;
    private IDictionary`2<DevicePlatform, IEnumerable`1<string>> fileTypes;
    public IEnumerable`1<string> Value { get; }
    public FilePickerFileType(IDictionary`2<DevicePlatform, IEnumerable`1<string>> fileTypes);
    private static FilePickerFileType();
    public IEnumerable`1<string> get_Value();
    protected virtual IEnumerable`1<string> GetPlatformFileType(DevicePlatform platform);
    [NullableContextAttribute("0")]
private static FilePickerFileType PlatformImageFileType();
    [NullableContextAttribute("0")]
private static FilePickerFileType PlatformPngFileType();
    [NullableContextAttribute("0")]
private static FilePickerFileType PlatformJpegFileType();
    [NullableContextAttribute("0")]
private static FilePickerFileType PlatformVideoFileType();
    [NullableContextAttribute("0")]
private static FilePickerFileType PlatformPdfFileType();
}
internal class Microsoft.Maui.Storage.FilePickerImplementation : object {
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.Maui.Storage.FilePickerImplementation/<PickAsync>d__0")]
public sealed virtual Task`1<FileResult> PickAsync(PickOptions options);
    [NullableContextAttribute("1")]
public sealed virtual Task`1<IEnumerable`1<FileResult>> PickMultipleAsync(PickOptions options);
    [AsyncStateMachineAttribute("Microsoft.Maui.Storage.FilePickerImplementation/<PlatformPickAsync>d__2")]
private Task`1<IEnumerable`1<FileResult>> PlatformPickAsync(PickOptions options, bool allowMultiple);
    [AsyncStateMachineAttribute("Microsoft.Maui.Storage.FilePickerImplementation/<GetFileResults>d__3")]
private static void GetFileResults(NSUrl[] urls, TaskCompletionSource`1<IEnumerable`1<FileResult>> tcs);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Maui.Storage.FileResult : FileBase {
    public FileResult(string fullPath);
    public FileResult(string fullPath, string contentType);
    public FileResult(FileBase file);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Storage.FileSystem : object {
    [NullableAttribute("2")]
private static IFileSystem currentImplementation;
    public static string CacheDirectory { get; }
    public static string AppDataDirectory { get; }
    public static IFileSystem Current { get; }
    public static string get_CacheDirectory();
    public static string get_AppDataDirectory();
    public static Task`1<Stream> OpenAppPackageFileAsync(string filename);
    public static Task`1<bool> AppPackageFileExistsAsync(string filename);
    public static IFileSystem get_Current();
    [NullableContextAttribute("2")]
internal static void SetCurrent(IFileSystem implementation);
}
public class Microsoft.Maui.Storage.FileSystemImplementation : object {
    [NullableAttribute("1")]
public string CacheDirectory { get; }
    [NullableAttribute("1")]
public string AppDataDirectory { get; }
    private string PlatformCacheDirectory { get; }
    private string PlatformAppDataDirectory { get; }
    [NullableContextAttribute("1")]
public sealed virtual string get_CacheDirectory();
    [NullableContextAttribute("1")]
public sealed virtual string get_AppDataDirectory();
    [NullableContextAttribute("1")]
public sealed virtual Task`1<Stream> OpenAppPackageFileAsync(string filename);
    [NullableContextAttribute("1")]
public sealed virtual Task`1<bool> AppPackageFileExistsAsync(string filename);
    private string get_PlatformCacheDirectory();
    private string get_PlatformAppDataDirectory();
    private Task`1<Stream> PlatformOpenAppPackageFileAsync(string filename);
    private Task`1<bool> PlatformAppPackageFileExistsAsync(string filename);
}
internal static class Microsoft.Maui.Storage.FileSystemUtils : object {
    [NullableContextAttribute("1")]
public static string NormalizePath(string filename);
    [AsyncStateMachineAttribute("Microsoft.Maui.Storage.FileSystemUtils/<EnsurePhysicalFileResultsAsync>d__1")]
public static Task`1<FileResult[]> EnsurePhysicalFileResultsAsync(NSUrl[] urls);
    public static string PlatformGetFullAppPackageFilePath(string filename);
    public static string GetDirectory(NSSearchPathDirectory directory);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Storage.IFilePicker {
    [NullableContextAttribute("2")]
public abstract virtual Task`1<FileResult> PickAsync(PickOptions options);
    public abstract virtual Task`1<IEnumerable`1<FileResult>> PickMultipleAsync(PickOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Storage.IFileSystem {
    public string CacheDirectory { get; }
    public string AppDataDirectory { get; }
    public abstract virtual string get_CacheDirectory();
    public abstract virtual string get_AppDataDirectory();
    public abstract virtual Task`1<Stream> OpenAppPackageFileAsync(string filename);
    public abstract virtual Task`1<bool> AppPackageFileExistsAsync(string filename);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Storage.IPlatformSecureStorage {
    public SecAccessible DefaultAccessible { get; public set; }
    public abstract virtual SecAccessible get_DefaultAccessible();
    public abstract virtual void set_DefaultAccessible(SecAccessible value);
    public abstract virtual Task SetAsync(string key, string value, SecAccessible accessible);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Storage.IPreferences {
    public abstract virtual bool ContainsKey(string key, string sharedName);
    public abstract virtual void Remove(string key, string sharedName);
    [NullableContextAttribute("2")]
public abstract virtual void Clear(string sharedName);
    public abstract virtual void Set(string key, T value, string sharedName);
    public abstract virtual T Get(string key, T defaultValue, string sharedName);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Storage.ISecureStorage {
    public abstract virtual Task`1<string> GetAsync(string key);
    public abstract virtual Task SetAsync(string key, string value);
    public abstract virtual bool Remove(string key);
    public abstract virtual void RemoveAll();
}
internal class Microsoft.Maui.Storage.KeyChain : object {
    private SecAccessible accessible;
    internal KeyChain(SecAccessible accessible);
    private SecRecord ExistingRecordForKey(string key, string service);
    internal string ValueForKey(string key, string service);
    internal void SetValueForKey(string value, string key, string service);
    internal bool Remove(string key, string service);
    internal void RemoveAll(string service);
    private SecRecord CreateRecordForNewKeyValue(string key, string value, string service);
    private bool RemoveRecord(SecRecord record);
}
internal class Microsoft.Maui.Storage.PHAssetFileResult : FileResult {
    private PHAsset phAsset;
    internal PHAssetFileResult(NSUrl url, PHAsset asset, string originalFilename);
    [UnsupportedOSPlatformAttribute("ios13.0")]
internal virtual Task`1<Stream> PlatformOpenReadAsync();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Maui.Storage.PickOptions : object {
    [CompilerGeneratedAttribute]
private string <PickerTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePickerFileType <FileTypes>k__BackingField;
    [NullableAttribute("1")]
public static PickOptions Default { get; }
    [NullableAttribute("1")]
public static PickOptions Images { get; }
    public string PickerTitle { get; public set; }
    public FilePickerFileType FileTypes { get; public set; }
    [NullableContextAttribute("1")]
public static PickOptions get_Default();
    [NullableContextAttribute("1")]
public static PickOptions get_Images();
    [CompilerGeneratedAttribute]
public string get_PickerTitle();
    [CompilerGeneratedAttribute]
public void set_PickerTitle(string value);
    [CompilerGeneratedAttribute]
public FilePickerFileType get_FileTypes();
    [CompilerGeneratedAttribute]
public void set_FileTypes(FilePickerFileType value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Storage.Preferences : object {
    [NullableAttribute("2")]
private static IPreferences defaultImplementation;
    internal static Type[] SupportedTypes;
    private static IPreferences Current { get; }
    public static IPreferences Default { get; }
    private static Preferences();
    public static bool ContainsKey(string key);
    public static void Remove(string key);
    public static void Clear();
    [NullableContextAttribute("2")]
public static string Get(string key, string defaultValue);
    public static bool Get(string key, bool defaultValue);
    public static int Get(string key, int defaultValue);
    public static double Get(string key, double defaultValue);
    public static float Get(string key, float defaultValue);
    public static long Get(string key, long defaultValue);
    public static void Set(string key, string value);
    public static void Set(string key, bool value);
    public static void Set(string key, int value);
    public static void Set(string key, double value);
    public static void Set(string key, float value);
    public static void Set(string key, long value);
    public static bool ContainsKey(string key, string sharedName);
    public static void Remove(string key, string sharedName);
    [NullableContextAttribute("2")]
public static void Clear(string sharedName);
    [NullableContextAttribute("2")]
public static string Get(string key, string defaultValue, string sharedName);
    public static bool Get(string key, bool defaultValue, string sharedName);
    public static int Get(string key, int defaultValue, string sharedName);
    public static double Get(string key, double defaultValue, string sharedName);
    public static float Get(string key, float defaultValue, string sharedName);
    public static long Get(string key, long defaultValue, string sharedName);
    [NullableContextAttribute("2")]
public static void Set(string key, string value, string sharedName);
    public static void Set(string key, bool value, string sharedName);
    public static void Set(string key, int value, string sharedName);
    public static void Set(string key, double value, string sharedName);
    public static void Set(string key, float value, string sharedName);
    public static void Set(string key, long value, string sharedName);
    public static DateTime Get(string key, DateTime defaultValue);
    public static void Set(string key, DateTime value);
    public static DateTime Get(string key, DateTime defaultValue, string sharedName);
    public static void Set(string key, DateTime value, string sharedName);
    private static IPreferences get_Current();
    internal static string GetPrivatePreferencesSharedName(string feature);
    public static IPreferences get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(IPreferences implementation);
    [NullableContextAttribute("2")]
internal static void CheckIsSupportedType();
}
internal class Microsoft.Maui.Storage.PreferencesImplementation : object {
    private static object locker;
    private static PreferencesImplementation();
    public sealed virtual bool ContainsKey(string key, string sharedName);
    public sealed virtual void Remove(string key, string sharedName);
    public sealed virtual void Clear(string sharedName);
    public sealed virtual void Set(string key, T value, string sharedName);
    public sealed virtual T Get(string key, T defaultValue, string sharedName);
    private static NSUserDefaults GetUserDefaults(string sharedName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Maui.Storage.ReadOnlyFile : FileBase {
    public ReadOnlyFile(string fullPath);
    public ReadOnlyFile(string fullPath, string contentType);
    public ReadOnlyFile(FileBase file);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Maui.Storage.SecureStorage : object {
    [NullableAttribute("2")]
private static ISecureStorage defaultImplementation;
    public static SecAccessible DefaultAccessible { get; public set; }
    private static ISecureStorage Current { get; }
    public static ISecureStorage Default { get; }
    public static Task`1<string> GetAsync(string key);
    public static Task SetAsync(string key, string value);
    public static bool Remove(string key);
    public static void RemoveAll();
    public static SecAccessible get_DefaultAccessible();
    public static void set_DefaultAccessible(SecAccessible value);
    public static Task SetAsync(string key, string value, SecAccessible accessible);
    private static ISecureStorage get_Current();
    public static ISecureStorage get_Default();
    [NullableContextAttribute("2")]
internal static void SetDefault(ISecureStorage implementation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Maui.Storage.SecureStorageExtensions : object {
    [ExtensionAttribute]
public static SecAccessible GetDefaultAccessible(ISecureStorage secureStorage);
    [ExtensionAttribute]
public static void SetDefaultAccessible(ISecureStorage secureStorage, SecAccessible accessible);
    [ExtensionAttribute]
public static Task SetAsync(ISecureStorage secureStorage, string key, string value, SecAccessible accessible);
}
internal class Microsoft.Maui.Storage.SecureStorageImplementation : object {
    [NullableAttribute("1")]
internal static string Alias;
    [CompilerGeneratedAttribute]
private SecAccessible <DefaultAccessible>k__BackingField;
    public SecAccessible DefaultAccessible { get; public set; }
    private static SecureStorageImplementation();
    [NullableContextAttribute("1")]
public sealed virtual Task`1<string> GetAsync(string key);
    [NullableContextAttribute("1")]
public sealed virtual Task SetAsync(string key, string value);
    [NullableContextAttribute("1")]
public sealed virtual bool Remove(string key);
    public sealed virtual void RemoveAll();
    [CompilerGeneratedAttribute]
public sealed virtual SecAccessible get_DefaultAccessible();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultAccessible(SecAccessible value);
    public sealed virtual Task SetAsync(string key, string value, SecAccessible accessible);
    private Task`1<string> PlatformGetAsync(string key);
    private Task PlatformSetAsync(string key, string data);
    private bool PlatformRemove(string key);
    private void PlatformRemoveAll();
}
internal class Microsoft.Maui.Storage.UIDocumentFileResult : FileResult {
    internal UIDocumentFileResult(NSUrl url);
    internal virtual Task`1<Stream> PlatformOpenReadAsync();
}
internal class Microsoft.Maui.Storage.UIImageFileResult : FileResult {
    private UIImage uiImage;
    private NSData data;
    internal UIImageFileResult(UIImage image);
    internal virtual Task`1<Stream> PlatformOpenReadAsync();
}
