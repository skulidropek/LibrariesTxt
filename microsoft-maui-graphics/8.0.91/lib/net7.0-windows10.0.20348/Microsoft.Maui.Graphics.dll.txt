[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public abstract class Microsoft.Maui.Graphics.AbstractCanvas`1 : object {
    private ICanvasStateService`1<TState> _stateService;
    private IStringSizeService _stringSizeService;
    private Stack`1<TState> _stateStack;
    private TState _currentState;
    private bool _limitStrokeScaling;
    private float _strokeLimit;
    private bool _strokeDashPatternDirty;
    [CompilerGeneratedAttribute]
private float <DisplayScale>k__BackingField;
    unknown float PlatformStrokeSize {protected set; }
    protected TState CurrentState { get; }
    unknown bool LimitStrokeScaling {public set; }
    protected bool LimitStrokeScalingEnabled { get; }
    unknown float StrokeLimit {public set; }
    unknown Color FillColor {public set; }
    unknown Color FontColor {public set; }
    unknown IFont Font {public set; }
    unknown float FontSize {public set; }
    unknown float Alpha {public set; }
    unknown bool Antialias {public set; }
    unknown BlendMode BlendMode {public set; }
    protected float AssignedStrokeLimit { get; }
    public float DisplayScale { get; public set; }
    unknown float StrokeSize {public set; }
    unknown float MiterLimit {public set; }
    unknown Color StrokeColor {public set; }
    unknown LineCap StrokeLineCap {public set; }
    unknown LineJoin StrokeLineJoin {public set; }
    unknown Single[] StrokeDashPattern {public set; }
    unknown float StrokeDashOffset {public set; }
    protected AbstractCanvas`1(ICanvasStateService`1<TState> stateService, IStringSizeService stringSizeService);
    protected abstract virtual void set_PlatformStrokeSize(float value);
    protected abstract virtual void PlatformSetStrokeDashPattern(Single[] strokePattern, float strokeDashOffset, float strokeSize);
    protected abstract virtual void PlatformDrawLine(float x1, float y1, float x2, float y2);
    protected abstract virtual void PlatformDrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed);
    protected abstract virtual void PlatformDrawRectangle(float x, float y, float width, float height);
    protected abstract virtual void PlatformDrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius);
    protected abstract virtual void PlatformDrawEllipse(float x, float y, float width, float height);
    protected abstract virtual void PlatformDrawPath(PathF path);
    protected abstract virtual void PlatformRotate(float degrees, float radians, float x, float y);
    protected abstract virtual void PlatformRotate(float degrees, float radians);
    protected abstract virtual void PlatformScale(float fx, float fy);
    protected abstract virtual void PlatformTranslate(float tx, float ty);
    protected abstract virtual void PlatformConcatenateTransform(Matrix3x2 transform);
    protected TState get_CurrentState();
    public virtual void Dispose();
    public void set_LimitStrokeScaling(bool value);
    protected bool get_LimitStrokeScalingEnabled();
    public void set_StrokeLimit(float value);
    public abstract virtual void set_FillColor(Color value);
    public abstract virtual void set_FontColor(Color value);
    public abstract virtual void set_Font(IFont value);
    public abstract virtual void set_FontSize(float value);
    public abstract virtual void set_Alpha(float value);
    public abstract virtual void set_Antialias(bool value);
    public abstract virtual void set_BlendMode(BlendMode value);
    protected float get_AssignedStrokeLimit();
    [CompilerGeneratedAttribute]
public virtual float get_DisplayScale();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayScale(float value);
    public sealed virtual void set_StrokeSize(float value);
    public abstract virtual void set_MiterLimit(float value);
    public abstract virtual void set_StrokeColor(Color value);
    public abstract virtual void set_StrokeLineCap(LineCap value);
    public abstract virtual void set_StrokeLineJoin(LineJoin value);
    public sealed virtual void set_StrokeDashPattern(Single[] value);
    public sealed virtual void set_StrokeDashOffset(float value);
    private void EnsureStrokePatternSet();
    public abstract virtual void ClipRectangle(float x, float y, float width, float height);
    public sealed virtual void DrawLine(float x1, float y1, float x2, float y2);
    public sealed virtual void DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed);
    public abstract virtual void FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise);
    public sealed virtual void DrawRectangle(float x, float y, float width, float height);
    public abstract virtual void FillRectangle(float x, float y, float width, float height);
    public sealed virtual void DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius);
    public abstract virtual void FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius);
    public sealed virtual void DrawEllipse(float x, float y, float width, float height);
    public abstract virtual void FillEllipse(float x, float y, float width, float height);
    public abstract virtual void DrawString(string value, float x, float y, HorizontalAlignment horizontalAlignment);
    public abstract virtual void DrawString(string value, float x, float y, float width, float height, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment, TextFlow textFlow, float lineSpacingAdjustment);
    public abstract virtual void DrawText(IAttributedText value, float x, float y, float width, float height);
    public sealed virtual void DrawPath(PathF path);
    public abstract virtual void FillPath(PathF path, WindingMode windingMode);
    public abstract virtual void SubtractFromClip(float x, float y, float width, float height);
    public abstract virtual void ClipPath(PathF path, WindingMode windingMode);
    public virtual void ResetState();
    public abstract virtual void SetShadow(SizeF offset, float blur, Color color);
    public abstract virtual void SetFillPaint(Paint paint, RectF rectangle);
    public abstract virtual void DrawImage(IImage image, float x, float y, float width, float height);
    public virtual bool RestoreState();
    protected virtual void StateRestored(TState state);
    public virtual void SaveState();
    public sealed virtual void Rotate(float degrees, float x, float y);
    public sealed virtual void Rotate(float degrees);
    public sealed virtual void Scale(float fx, float fy);
    public sealed virtual void Translate(float tx, float ty);
    public sealed virtual void ConcatenateTransform(Matrix3x2 transform);
    public sealed virtual SizeF GetStringSize(string value, IFont font, float fontSize);
    public sealed virtual SizeF GetStringSize(string aString, IFont font, float aFontSize, HorizontalAlignment aHorizontalAlignment, VerticalAlignment aVerticalAlignment);
}
public abstract class Microsoft.Maui.Graphics.AbstractPattern : object {
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private float <StepX>k__BackingField;
    [CompilerGeneratedAttribute]
private float <StepY>k__BackingField;
    public float Width { get; }
    public float Height { get; }
    public float StepX { get; }
    public float StepY { get; }
    protected AbstractPattern(float width, float height, float stepX, float stepY);
    protected AbstractPattern(float width, float height);
    protected AbstractPattern(float stepSize);
    [CompilerGeneratedAttribute]
public sealed virtual float get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual float get_Height();
    [CompilerGeneratedAttribute]
public sealed virtual float get_StepX();
    [CompilerGeneratedAttribute]
public sealed virtual float get_StepY();
    public abstract virtual void Draw(ICanvas canvas);
}
internal class Microsoft.Maui.Graphics.ArcFlattener : object {
    private float _cx;
    private float _cy;
    private float _diameter;
    private float _radius;
    private float _fx;
    private float _fy;
    private float _sweep;
    private float _startAngle;
    private PointF _startPoint;
    public ArcFlattener(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise);
    private PointF GetPointOnArc(float percentage);
    private static PointF GetPointAtAngle(float x, float y, float distance, float radians);
    private static PointF GetCenter(PointF point1, PointF point2);
    public PathF CreateFlattenedPath(float flatness);
}
public abstract class Microsoft.Maui.Graphics.BitmapExportContext : object {
    [CompilerGeneratedAttribute]
private int <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Dpi>k__BackingField;
    public int Width { get; }
    public int Height { get; }
    public float Dpi { get; }
    public ICanvas Canvas { get; }
    public IImage Image { get; }
    protected BitmapExportContext(int width, int height, float dpi);
    [CompilerGeneratedAttribute]
public int get_Width();
    [CompilerGeneratedAttribute]
public int get_Height();
    [CompilerGeneratedAttribute]
public float get_Dpi();
    public virtual void Dispose();
    public abstract virtual ICanvas get_Canvas();
    public abstract virtual void WriteToStream(Stream stream);
    public abstract virtual IImage get_Image();
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.BitmapExportContextExtensions : object {
    [ExtensionAttribute]
public static void WriteToFile(BitmapExportContext exportContext, string filename);
}
public enum Microsoft.Maui.Graphics.BlendMode : Enum {
    public int value__;
    public static BlendMode Normal;
    public static BlendMode Multiply;
    public static BlendMode Screen;
    public static BlendMode Overlay;
    public static BlendMode Darken;
    public static BlendMode Lighten;
    public static BlendMode ColorDodge;
    public static BlendMode ColorBurn;
    public static BlendMode SoftLight;
    public static BlendMode HardLight;
    public static BlendMode Difference;
    public static BlendMode Exclusion;
    public static BlendMode Hue;
    public static BlendMode Saturation;
    public static BlendMode Color;
    public static BlendMode Luminosity;
    public static BlendMode Clear;
    public static BlendMode Copy;
    public static BlendMode SourceIn;
    public static BlendMode SourceOut;
    public static BlendMode SourceAtop;
    public static BlendMode DestinationOver;
    public static BlendMode DestinationIn;
    public static BlendMode DestinationOut;
    public static BlendMode DestinationAtop;
    public static BlendMode Xor;
    public static BlendMode PlusDarker;
    public static BlendMode PlusLighter;
}
public static class Microsoft.Maui.Graphics.CanvasDefaults : object {
    public static Color DefaultShadowColor;
    public static SizeF DefaultShadowOffset;
    public static float DefaultShadowBlur;
    public static float DefaultMiterLimit;
    private static CanvasDefaults();
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.CanvasExtensions : object {
    [ExtensionAttribute]
public static void DrawLine(ICanvas target, PointF point1, PointF point2);
    [ExtensionAttribute]
public static void DrawRectangle(ICanvas target, Rect rect);
    [ExtensionAttribute]
public static void DrawRectangle(ICanvas target, RectF rect);
    [ExtensionAttribute]
public static void FillRectangle(ICanvas target, Rect rect);
    [ExtensionAttribute]
public static void FillRectangle(ICanvas target, RectF rect);
    [ExtensionAttribute]
public static void DrawRoundedRectangle(ICanvas target, Rect rect, double cornerRadius);
    [ExtensionAttribute]
public static void DrawRoundedRectangle(ICanvas target, RectF rect, float cornerRadius);
    [ExtensionAttribute]
public static void DrawRoundedRectangle(ICanvas target, float x, float y, float width, float height, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius);
    [ExtensionAttribute]
public static void DrawRoundedRectangle(ICanvas target, Rect rect, double topLeftCornerRadius, double topRightCornerRadius, double bottomLeftCornerRadius, double bottomRightCornerRadius);
    [ExtensionAttribute]
public static void DrawRoundedRectangle(ICanvas target, RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius);
    [ExtensionAttribute]
public static void DrawRoundedRectangle(ICanvas target, RectF rect, float xRadius, float yRadius);
    [ExtensionAttribute]
public static void FillRoundedRectangle(ICanvas target, Rect rect, double cornerRadius);
    [ExtensionAttribute]
public static void FillRoundedRectangle(ICanvas target, RectF rect, float cornerRadius);
    [ExtensionAttribute]
public static void FillRoundedRectangle(ICanvas target, float x, float y, float width, float height, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius);
    [ExtensionAttribute]
public static void FillRoundedRectangle(ICanvas target, Rect rect, double topLeftCornerRadius, double topRightCornerRadius, double bottomLeftCornerRadius, double bottomRightCornerRadius);
    [ExtensionAttribute]
public static void FillRoundedRectangle(ICanvas target, RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius);
    [ExtensionAttribute]
public static void FillRoundedRectangle(ICanvas target, RectF rect, float xRadius, float yRadius);
    [ExtensionAttribute]
public static void DrawEllipse(ICanvas target, Rect rect);
    [ExtensionAttribute]
public static void DrawEllipse(ICanvas target, RectF rect);
    [ExtensionAttribute]
public static void FillEllipse(ICanvas target, Rect rect);
    [ExtensionAttribute]
public static void FillEllipse(ICanvas target, RectF rect);
    [ExtensionAttribute]
public static void DrawPath(ICanvas target, PathF path);
    [ExtensionAttribute]
public static void FillPath(ICanvas target, PathF path);
    [ExtensionAttribute]
public static void FillPath(ICanvas target, PathF path, WindingMode windingMode);
    [ExtensionAttribute]
public static void ClipPath(ICanvas target, PathF path, WindingMode windingMode);
    [ExtensionAttribute]
public static void ClipRectangle(ICanvas target, Rect rect);
    [ExtensionAttribute]
public static void ClipRectangle(ICanvas target, RectF rect);
    [ExtensionAttribute]
public static void DrawString(ICanvas target, string value, Rect bounds, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment, TextFlow textFlow, float lineSpacingAdjustment);
    [ExtensionAttribute]
public static void DrawString(ICanvas target, string value, RectF bounds, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment, TextFlow textFlow, float lineSpacingAdjustment);
    [ExtensionAttribute]
public static void FillCircle(ICanvas target, float centerX, float centerY, float radius);
    [ExtensionAttribute]
public static void FillCircle(ICanvas target, Point center, double radius);
    [ExtensionAttribute]
public static void FillCircle(ICanvas target, PointF center, float radius);
    [ExtensionAttribute]
public static void DrawCircle(ICanvas target, float centerX, float centerY, float radius);
    [ExtensionAttribute]
public static void DrawCircle(ICanvas target, Point center, double radius);
    [ExtensionAttribute]
public static void DrawCircle(ICanvas target, PointF center, float radius);
    [ExtensionAttribute]
public static void FillArc(ICanvas canvas, float x, float y, float width, float height, float startAngle, float endAngle, Paint paint, bool clockwise);
    [ExtensionAttribute]
public static void DrawArc(ICanvas canvas, RectF bounds, float startAngle, float endAngle, bool clockwise, bool closed);
    [ExtensionAttribute]
public static void DrawArc(ICanvas canvas, Rect bounds, float startAngle, float endAngle, bool clockwise, bool closed);
    [ExtensionAttribute]
public static void FillArc(ICanvas canvas, RectF bounds, float startAngle, float endAngle, bool clockwise);
    [ExtensionAttribute]
public static void FillArc(ICanvas canvas, Rect bounds, float startAngle, float endAngle, bool clockwise);
    [ExtensionAttribute]
public static void EnableDefaultShadow(ICanvas canvas, float zoom);
    [ExtensionAttribute]
public static void ResetStroke(ICanvas canvas);
    [ExtensionAttribute]
public static void SetFillPattern(ICanvas target, IPattern pattern);
    [ExtensionAttribute]
public static void SetFillPattern(ICanvas target, IPattern pattern, Color foregroundColor);
    [ExtensionAttribute]
public static void SubtractFromClip(ICanvas target, Rect rect);
    [ExtensionAttribute]
public static void SubtractFromClip(ICanvas target, RectF rect);
    [ExtensionAttribute]
public static void SetFillPaint(ICanvas target, Paint paint, Point point1, Point point2);
    [ExtensionAttribute]
public static void SetFillPaint(ICanvas target, Paint paint, PointF point1, PointF point2);
    [ExtensionAttribute]
public static void SetFillPaint(ICanvas target, Paint paint, Rect rectangle);
    [ExtensionAttribute]
public static void SetFillPaint(ICanvas target, Paint paint, RectF rectangle);
}
public class Microsoft.Maui.Graphics.CanvasState : object {
    [CompilerGeneratedAttribute]
private Single[] <StrokeDashPattern>k__BackingField;
    [CompilerGeneratedAttribute]
private float <StrokeDashOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private float <StrokeSize>k__BackingField;
    private Matrix3x2 _transform;
    private float _scale;
    private float _scaleX;
    private float _scaleY;
    public Single[] StrokeDashPattern { get; public set; }
    public float StrokeDashOffset { get; public set; }
    public float StrokeSize { get; public set; }
    public Matrix3x2 Transform { get; public set; }
    public float Scale { get; }
    public float ScaleX { get; }
    public float ScaleY { get; }
    protected CanvasState(CanvasState prototype);
    [CompilerGeneratedAttribute]
public Single[] get_StrokeDashPattern();
    [CompilerGeneratedAttribute]
public void set_StrokeDashPattern(Single[] value);
    [CompilerGeneratedAttribute]
public float get_StrokeDashOffset();
    [CompilerGeneratedAttribute]
public void set_StrokeDashOffset(float value);
    [CompilerGeneratedAttribute]
public float get_StrokeSize();
    [CompilerGeneratedAttribute]
public void set_StrokeSize(float value);
    public Matrix3x2 get_Transform();
    public void set_Transform(Matrix3x2 value);
    public float get_Scale();
    public float get_ScaleX();
    public float get_ScaleY();
    protected virtual void TransformChanged();
    protected static float GetLengthScale(Matrix3x2 matrix);
    public virtual void Dispose();
}
[DebuggerDisplayAttribute("Red={Red}, Green={Green}, Blue={Blue}, Alpha={Alpha}")]
[TypeConverterAttribute("Microsoft.Maui.Graphics.Converters.ColorTypeConverter")]
public class Microsoft.Maui.Graphics.Color : object {
    public float Red;
    public float Green;
    public float Blue;
    public float Alpha;
    public Color(float gray);
    public Color(float red, float green, float blue);
    public Color(float red, float green, float blue, float alpha);
    public Color(byte red, byte green, byte blue);
    public Color(byte red, byte green, byte blue, byte alpha);
    public Color(int red, int green, int blue);
    public Color(int red, int green, int blue, int alpha);
    public Color(Vector4 color);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    [ObsoleteAttribute("Use ToArgbHex instead.")]
public string ToHex(bool includeAlpha);
    public string ToHex();
    public string ToArgbHex(bool includeAlpha);
    public string ToRgbaHex(bool includeAlpha);
    [ObsoleteAttribute("Use FromArgb instead.")]
public static Color FromHex(string colorAsArgbHex);
    public Paint AsPaint();
    public Color WithAlpha(float alpha);
    public Color MultiplyAlpha(float multiplyBy);
    private static string ToHex(float value);
    public int ToInt();
    public UInt32 ToUint();
    public void ToRgb(Byte& r, Byte& g, Byte& b);
    public void ToRgba(Byte& r, Byte& g, Byte& b, Byte& a);
    public float GetLuminosity();
    public Color AddLuminosity(float delta);
    public Color WithLuminosity(float luminosity);
    public float GetSaturation();
    public Color WithSaturation(float saturation);
    public float GetHue();
    public Color WithHue(float hue);
    public Color GetComplementary();
    public static Color FromHsva(float h, float s, float v, float a);
    public static Color FromUint(UInt32 argb);
    public static Color FromInt(int argb);
    public static Color FromRgb(byte red, byte green, byte blue);
    public static Color FromRgba(byte red, byte green, byte blue, byte alpha);
    public static Color FromRgb(int red, int green, int blue);
    public static Color FromRgba(int red, int green, int blue, int alpha);
    public static Color FromRgb(float red, float green, float blue);
    public static Color FromRgb(double red, double green, double blue);
    public static Color FromRgba(float r, float g, float b, float a);
    public static Color FromRgba(double r, double g, double b, double a);
    public static Color FromRgba(string colorAsHex);
    private static Color FromRgba(ReadOnlySpan`1<char> colorAsHex);
    public static Color FromArgb(string colorAsHex);
    private static Color FromArgb(ReadOnlySpan`1<char> colorAsHex);
    public static Color FromHsla(float h, float s, float l, float a);
    public static Color FromHsla(double h, double s, double l, double a);
    public static Color FromHsv(float h, float s, float v);
    public static Color FromHsva(int h, int s, int v, int a);
    public static Color FromHsv(int h, int s, int v);
    private static void ConvertToRgb(float hue, float saturation, float luminosity, Single& r, Single& g, Single& b);
    public void ToHsl(Single& h, Single& s, Single& l);
    public static Color Parse(string value);
    public static bool TryParse(string value, Color& color);
    private static bool TryParse(ReadOnlySpan`1<char> value, Color& color);
    private static Color GetNamedColor(ReadOnlySpan`1<char> value);
    private static bool TryParseFourColorRanges(ReadOnlySpan`1<char> value, ReadOnlySpan`1& quad0, ReadOnlySpan`1& quad1, ReadOnlySpan`1& quad2, ReadOnlySpan`1& quad3);
    private static bool TryParseThreeColorRanges(ReadOnlySpan`1<char> value, ReadOnlySpan`1& triplet0, ReadOnlySpan`1& triplet1, ReadOnlySpan`1& triplet2);
    private static bool TryParseColorValue(ReadOnlySpan`1<char> elem, int maxValue, bool acceptPercent, Double& value);
    private static bool TryParseOpacity(ReadOnlySpan`1<char> elem, Double& value);
    private static bool TryParseDouble(ReadOnlySpan`1<char> s, Double& value);
    private static int ParseInt(ReadOnlySpan`1<char> s);
    public static Color op_Implicit(Vector4 color);
}
public static class Microsoft.Maui.Graphics.Colors : object {
    public static Color AliceBlue;
    public static Color AntiqueWhite;
    public static Color Aqua;
    public static Color Aquamarine;
    public static Color Azure;
    public static Color Beige;
    public static Color Bisque;
    public static Color Black;
    public static Color BlanchedAlmond;
    public static Color Blue;
    public static Color BlueViolet;
    public static Color Brown;
    public static Color BurlyWood;
    public static Color CadetBlue;
    public static Color Chartreuse;
    public static Color Chocolate;
    public static Color Coral;
    public static Color CornflowerBlue;
    public static Color Cornsilk;
    public static Color Crimson;
    public static Color Cyan;
    public static Color DarkBlue;
    public static Color DarkCyan;
    public static Color DarkGoldenrod;
    public static Color DarkGray;
    public static Color DarkGreen;
    public static Color DarkGrey;
    public static Color DarkKhaki;
    public static Color DarkMagenta;
    public static Color DarkOliveGreen;
    public static Color DarkOrange;
    public static Color DarkOrchid;
    public static Color DarkRed;
    public static Color DarkSalmon;
    public static Color DarkSeaGreen;
    public static Color DarkSlateBlue;
    public static Color DarkSlateGray;
    public static Color DarkSlateGrey;
    public static Color DarkTurquoise;
    public static Color DarkViolet;
    public static Color DeepPink;
    public static Color DeepSkyBlue;
    public static Color DimGray;
    public static Color DimGrey;
    public static Color DodgerBlue;
    public static Color Firebrick;
    public static Color FloralWhite;
    public static Color ForestGreen;
    public static Color Fuchsia;
    public static Color Gainsboro;
    public static Color GhostWhite;
    public static Color Gold;
    public static Color Goldenrod;
    public static Color Gray;
    public static Color Green;
    public static Color GreenYellow;
    public static Color Grey;
    public static Color Honeydew;
    public static Color HotPink;
    public static Color IndianRed;
    public static Color Indigo;
    public static Color Ivory;
    public static Color Khaki;
    public static Color Lavender;
    public static Color LavenderBlush;
    public static Color LawnGreen;
    public static Color LemonChiffon;
    public static Color LightBlue;
    public static Color LightCoral;
    public static Color LightCyan;
    public static Color LightGoldenrodYellow;
    public static Color LightGray;
    public static Color LightGreen;
    public static Color LightGrey;
    public static Color LightPink;
    public static Color LightSalmon;
    public static Color LightSeaGreen;
    public static Color LightSkyBlue;
    public static Color LightSlateGray;
    public static Color LightSlateGrey;
    public static Color LightSteelBlue;
    public static Color LightYellow;
    public static Color Lime;
    public static Color LimeGreen;
    public static Color Linen;
    public static Color Magenta;
    public static Color Maroon;
    public static Color MediumAquamarine;
    public static Color MediumBlue;
    public static Color MediumOrchid;
    public static Color MediumPurple;
    public static Color MediumSeaGreen;
    public static Color MediumSlateBlue;
    public static Color MediumSpringGreen;
    public static Color MediumTurquoise;
    public static Color MediumVioletRed;
    public static Color MidnightBlue;
    public static Color MintCream;
    public static Color MistyRose;
    public static Color Moccasin;
    public static Color NavajoWhite;
    public static Color Navy;
    public static Color OldLace;
    public static Color Olive;
    public static Color OliveDrab;
    public static Color Orange;
    public static Color OrangeRed;
    public static Color Orchid;
    public static Color PaleGoldenrod;
    public static Color PaleGreen;
    public static Color PaleTurquoise;
    public static Color PaleVioletRed;
    public static Color PapayaWhip;
    public static Color PeachPuff;
    public static Color Peru;
    public static Color Pink;
    public static Color Plum;
    public static Color PowderBlue;
    public static Color Purple;
    public static Color Red;
    public static Color RosyBrown;
    public static Color RoyalBlue;
    public static Color SaddleBrown;
    public static Color Salmon;
    public static Color SandyBrown;
    public static Color SeaGreen;
    public static Color SeaShell;
    public static Color Sienna;
    public static Color Silver;
    public static Color SkyBlue;
    public static Color SlateBlue;
    public static Color SlateGray;
    public static Color SlateGrey;
    public static Color Snow;
    public static Color SpringGreen;
    public static Color SteelBlue;
    public static Color Tan;
    public static Color Teal;
    public static Color Thistle;
    public static Color Tomato;
    public static Color Transparent;
    public static Color Turquoise;
    public static Color Violet;
    public static Color Wheat;
    public static Color White;
    public static Color WhiteSmoke;
    public static Color Yellow;
    public static Color YellowGreen;
    private static Colors();
}
public class Microsoft.Maui.Graphics.Converters.ColorTypeConverter : TypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object fromValue);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
}
public class Microsoft.Maui.Graphics.Converters.PointFTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Microsoft.Maui.Graphics.Converters.PointTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Microsoft.Maui.Graphics.Converters.RectFTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Microsoft.Maui.Graphics.Converters.RectTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Microsoft.Maui.Graphics.Converters.SizeFTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Microsoft.Maui.Graphics.Converters.SizeTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Microsoft.Maui.Graphics.DrawingCommand : MulticastDelegate {
    public DrawingCommand(object object, IntPtr method);
    public virtual void Invoke(ICanvas canvas);
    public virtual IAsyncResult BeginInvoke(ICanvas canvas, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Maui.Graphics.Font : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private FontStyleType <StyleType>k__BackingField;
    public static Font Default { get; }
    public static Font DefaultBold { get; }
    public string Name { get; private set; }
    public int Weight { get; private set; }
    public FontStyleType StyleType { get; private set; }
    public bool IsDefault { get; }
    public Font(string name, int weight, FontStyleType styleType);
    public static Font get_Default();
    public static Font get_DefaultBold();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual int get_Weight();
    [CompilerGeneratedAttribute]
private void set_Weight(int value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public sealed virtual FontStyleType get_StyleType();
    [CompilerGeneratedAttribute]
private void set_StyleType(FontStyleType value);
    public sealed virtual bool Equals(IFont other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool get_IsDefault();
    public static bool op_Equality(Font left, Font right);
    public static bool op_Inequality(Font left, Font right);
}
public class Microsoft.Maui.Graphics.FontSource : ValueType {
    [NullableAttribute("1")]
public string Name;
    public int Weight;
    public FontStyleType FontStyleType;
    [NullableContextAttribute("1")]
public FontSource(string filename, int weight, FontStyleType fontStyleType);
    public sealed virtual bool Equals(FontSource other);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static bool op_Equality(FontSource left, FontSource right);
    public static bool op_Inequality(FontSource left, FontSource right);
}
public enum Microsoft.Maui.Graphics.FontStyleType : Enum {
    public int value__;
    public static FontStyleType Normal;
    public static FontStyleType Italic;
    public static FontStyleType Oblique;
}
public static class Microsoft.Maui.Graphics.FontWeights : object {
    public static int Default;
    public static int Thin;
    public static int ExtraLight;
    public static int UltraLight;
    public static int Light;
    public static int SemiLight;
    public static int Normal;
    public static int Regular;
    public static int Medium;
    public static int DemiBold;
    public static int SemiBold;
    public static int Bold;
    public static int ExtraBold;
    public static int UltraBold;
    public static int Black;
    public static int Heavy;
    public static int ExtraBlack;
    public static int UltraBlack;
}
public static class Microsoft.Maui.Graphics.GeometryUtil : object {
    public static float Epsilon;
    public static float GetDistance(float x1, float y1, float x2, float y2);
    public static float GetAngleAsDegrees(float x1, float y1, float x2, float y2);
    public static float DegreesToRadians(float angle);
    public static double DegreesToRadians(double angle);
    public static float RadiansToDegrees(float angle);
    public static double RadiansToDegrees(double angle);
    public static PointF RotatePoint(PointF point, float angle);
    public static PointF RotatePoint(PointF center, PointF point, float angle);
    public static float GetSweep(float angle1, float angle2, bool clockwise);
    public static PointF PolarToPoint(float angleInRadians, float fx, float fy);
    public static PointF EllipseAngleToPoint(float x, float y, float width, float height, float angleInDegrees);
    public static PointF GetOppositePoint(PointF pivot, PointF oppositePoint);
    private static bool IsBetween(float a, float b, float c);
    private static int SameSide(float x0, float y0, float x1, float y1, float px0, float py0, float px1, float py1);
    public static bool IsLineIntersectingLine(float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3);
    public static float GetFactor(float aMin, float aMax, float aValue);
    public static float GetLinearValue(float aMin, float aMax, float aFactor);
}
public abstract class Microsoft.Maui.Graphics.GradientPaint : Paint {
    private PaintGradientStop[] _gradientStops;
    public PaintGradientStop[] GradientStops { get; public set; }
    public Color StartColor { get; public set; }
    public Color EndColor { get; public set; }
    public int StartColorIndex { get; }
    public int EndColorIndex { get; }
    public bool IsTransparent { get; }
    public GradientPaint(GradientPaint source);
    public PaintGradientStop[] get_GradientStops();
    public void set_GradientStops(PaintGradientStop[] value);
    public Color get_StartColor();
    public void set_StartColor(Color value);
    public Color get_EndColor();
    public void set_EndColor(Color value);
    public int get_StartColorIndex();
    public int get_EndColorIndex();
    public virtual bool get_IsTransparent();
    public PaintGradientStop[] GetSortedStops();
    public void SetGradientStops(Single[] offsets, Color[] colors);
    public void AddOffset(float offset);
    public void AddOffset(float offset, Color color);
    public void RemoveOffset(int index);
    public Color GetColorAt(float offset);
    public Color BlendStartAndEndColors();
    public Color BlendStartAndEndColors(Color startColor, Color endColor, float factor);
    public virtual string ToString();
}
public enum Microsoft.Maui.Graphics.HorizontalAlignment : Enum {
    public int value__;
    public static HorizontalAlignment Left;
    public static HorizontalAlignment Center;
    public static HorizontalAlignment Right;
    public static HorizontalAlignment Justified;
}
public interface Microsoft.Maui.Graphics.IBitmapExportService {
    public abstract virtual BitmapExportContext CreateContext(int width, int height, float displayScale);
}
public interface Microsoft.Maui.Graphics.IBlurrableCanvas {
    public abstract virtual void SetBlur(float blurRadius);
}
public interface Microsoft.Maui.Graphics.ICanvas {
    public float DisplayScale { get; public set; }
    unknown float StrokeSize {public set; }
    unknown float MiterLimit {public set; }
    unknown Color StrokeColor {public set; }
    unknown LineCap StrokeLineCap {public set; }
    unknown LineJoin StrokeLineJoin {public set; }
    unknown Single[] StrokeDashPattern {public set; }
    unknown float StrokeDashOffset {public set; }
    unknown Color FillColor {public set; }
    unknown Color FontColor {public set; }
    unknown IFont Font {public set; }
    unknown float FontSize {public set; }
    unknown float Alpha {public set; }
    unknown bool Antialias {public set; }
    unknown BlendMode BlendMode {public set; }
    public abstract virtual float get_DisplayScale();
    public abstract virtual void set_DisplayScale(float value);
    public abstract virtual void set_StrokeSize(float value);
    public abstract virtual void set_MiterLimit(float value);
    public abstract virtual void set_StrokeColor(Color value);
    public abstract virtual void set_StrokeLineCap(LineCap value);
    public abstract virtual void set_StrokeLineJoin(LineJoin value);
    public abstract virtual void set_StrokeDashPattern(Single[] value);
    public abstract virtual void set_StrokeDashOffset(float value);
    public abstract virtual void set_FillColor(Color value);
    public abstract virtual void set_FontColor(Color value);
    public abstract virtual void set_Font(IFont value);
    public abstract virtual void set_FontSize(float value);
    public abstract virtual void set_Alpha(float value);
    public abstract virtual void set_Antialias(bool value);
    public abstract virtual void set_BlendMode(BlendMode value);
    public abstract virtual void DrawPath(PathF path);
    public abstract virtual void FillPath(PathF path, WindingMode windingMode);
    public abstract virtual void SubtractFromClip(float x, float y, float width, float height);
    public abstract virtual void ClipPath(PathF path, WindingMode windingMode);
    public abstract virtual void ClipRectangle(float x, float y, float width, float height);
    public abstract virtual void DrawLine(float x1, float y1, float x2, float y2);
    public abstract virtual void DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed);
    public abstract virtual void FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise);
    public abstract virtual void DrawRectangle(float x, float y, float width, float height);
    public abstract virtual void FillRectangle(float x, float y, float width, float height);
    public abstract virtual void DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius);
    public abstract virtual void FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius);
    public abstract virtual void DrawEllipse(float x, float y, float width, float height);
    public abstract virtual void FillEllipse(float x, float y, float width, float height);
    public abstract virtual void DrawString(string value, float x, float y, HorizontalAlignment horizontalAlignment);
    public abstract virtual void DrawString(string value, float x, float y, float width, float height, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment, TextFlow textFlow, float lineSpacingAdjustment);
    public abstract virtual void DrawText(IAttributedText value, float x, float y, float width, float height);
    public abstract virtual void Rotate(float degrees, float x, float y);
    public abstract virtual void Rotate(float degrees);
    public abstract virtual void Scale(float sx, float sy);
    public abstract virtual void Translate(float tx, float ty);
    public abstract virtual void ConcatenateTransform(Matrix3x2 transform);
    public abstract virtual void SaveState();
    public abstract virtual bool RestoreState();
    public abstract virtual void ResetState();
    public abstract virtual void SetShadow(SizeF offset, float blur, Color color);
    public abstract virtual void SetFillPaint(Paint paint, RectF rectangle);
    public abstract virtual void DrawImage(IImage image, float x, float y, float width, float height);
    public abstract virtual SizeF GetStringSize(string value, IFont font, float fontSize);
    public abstract virtual SizeF GetStringSize(string value, IFont font, float fontSize, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment);
}
public interface Microsoft.Maui.Graphics.ICanvasStateService`1 {
    public abstract virtual TState CreateNew(object context);
    public abstract virtual TState CreateCopy(TState prototype);
}
public interface Microsoft.Maui.Graphics.IDrawable {
    public abstract virtual void Draw(ICanvas canvas, RectF dirtyRect);
}
public interface Microsoft.Maui.Graphics.IFont {
    public string Name { get; }
    public int Weight { get; }
    public FontStyleType StyleType { get; }
    public abstract virtual string get_Name();
    public abstract virtual int get_Weight();
    public abstract virtual FontStyleType get_StyleType();
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.IFontExtensions : object {
    [ExtensionAttribute]
public static string GetSvgWeight(IFont font);
    [ExtensionAttribute]
public static string GetSvgStyle(IFont font);
}
public interface Microsoft.Maui.Graphics.IImage {
    public float Width { get; }
    public float Height { get; }
    public abstract virtual float get_Width();
    public abstract virtual float get_Height();
    public abstract virtual IImage Downsize(float maxWidthOrHeight, bool disposeOriginal);
    public abstract virtual IImage Downsize(float maxWidth, float maxHeight, bool disposeOriginal);
    public abstract virtual IImage Resize(float width, float height, ResizeMode resizeMode, bool disposeOriginal);
    public abstract virtual void Save(Stream stream, ImageFormat format, float quality);
    public abstract virtual Task SaveAsync(Stream stream, ImageFormat format, float quality);
    public abstract virtual IImage ToPlatformImage();
}
public interface Microsoft.Maui.Graphics.IImageLoadingService {
    public abstract virtual IImage FromStream(Stream stream, ImageFormat format);
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.ImageExtensions : object {
    [ExtensionAttribute]
public static Byte[] AsBytes(IImage target, ImageFormat format, float quality);
    [ExtensionAttribute]
public static Stream AsStream(IImage target, ImageFormat format, float quality);
    [AsyncStateMachineAttribute("Microsoft.Maui.Graphics.ImageExtensions/<AsBytesAsync>d__2")]
[ExtensionAttribute]
public static Task`1<Byte[]> AsBytesAsync(IImage target, ImageFormat format, float quality);
    [ExtensionAttribute]
public static string AsBase64(IImage target, ImageFormat format, float quality);
    [ExtensionAttribute]
public static Paint AsPaint(IImage target);
    [ExtensionAttribute]
public static void SetFillImage(ICanvas canvas, IImage image);
}
public enum Microsoft.Maui.Graphics.ImageFormat : Enum {
    public int value__;
    public static ImageFormat Png;
    public static ImageFormat Jpeg;
    public static ImageFormat Gif;
    public static ImageFormat Tiff;
    public static ImageFormat Bmp;
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.ImageLoadingServiceExtensions : object {
    [ExtensionAttribute]
public static IImage FromBytes(IImageLoadingService target, Byte[] bytes);
}
public class Microsoft.Maui.Graphics.ImagePaint : Paint {
    [CompilerGeneratedAttribute]
private IImage <Image>k__BackingField;
    public IImage Image { get; public set; }
    public bool IsTransparent { get; }
    [CompilerGeneratedAttribute]
public IImage get_Image();
    [CompilerGeneratedAttribute]
public void set_Image(IImage value);
    public virtual bool get_IsTransparent();
}
public class Microsoft.Maui.Graphics.Insets : object {
    private double _bottom;
    private double _left;
    private double _right;
    private double _top;
    public double Top { get; public set; }
    public double Left { get; public set; }
    public double Bottom { get; public set; }
    public double Right { get; public set; }
    public double Horizontal { get; }
    public double Vertical { get; }
    public Insets(double top, double left, double bottom, double right);
    public Insets(Insets insets);
    public double get_Top();
    public void set_Top(double value);
    public double get_Left();
    public void set_Left(double value);
    public double get_Bottom();
    public void set_Bottom(double value);
    public double get_Right();
    public void set_Right(double value);
    public double get_Horizontal();
    public double get_Vertical();
    public bool AllValuesAreEqualTo(double value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public string ToParsableString();
    public virtual string ToString();
    public static Insets Parse(string value);
}
public class Microsoft.Maui.Graphics.InsetsF : object {
    private float _bottom;
    private float _left;
    private float _right;
    private float _top;
    public float Top { get; public set; }
    public float Left { get; public set; }
    public float Bottom { get; public set; }
    public float Right { get; public set; }
    public float Horizontal { get; }
    public float Vertical { get; }
    public InsetsF(float top, float left, float bottom, float right);
    public InsetsF(InsetsF insets);
    public float get_Top();
    public void set_Top(float value);
    public float get_Left();
    public void set_Left(float value);
    public float get_Bottom();
    public void set_Bottom(float value);
    public float get_Right();
    public void set_Right(float value);
    public float get_Horizontal();
    public float get_Vertical();
    public bool AllValuesAreEqualTo(float value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public string ToParsableString();
    public virtual string ToString();
    public static InsetsF Parse(string value);
}
[ExtensionAttribute]
internal static class Microsoft.Maui.Graphics.InvariantExtensions : object {
    [ExtensionAttribute]
public static string ToInvariantString(char target);
    [ExtensionAttribute]
public static string ToInvariantString(int target);
    [ExtensionAttribute]
public static bool EqualsIgnoresCase(string target, string value);
}
public interface Microsoft.Maui.Graphics.IPattern {
    public float Width { get; }
    public float Height { get; }
    public float StepX { get; }
    public float StepY { get; }
    public abstract virtual float get_Width();
    public abstract virtual float get_Height();
    public abstract virtual float get_StepX();
    public abstract virtual float get_StepY();
    public abstract virtual void Draw(ICanvas canvas);
}
internal interface Microsoft.Maui.Graphics.IPdfExportService {
    public abstract virtual PdfExportContext CreateContext(float width, float height);
}
public interface Microsoft.Maui.Graphics.IPdfPage {
    public float Width { get; }
    public float Height { get; }
    public int PageNumber { get; }
    public abstract virtual float get_Width();
    public abstract virtual float get_Height();
    public abstract virtual int get_PageNumber();
    public abstract virtual void Save(Stream stream);
    public abstract virtual Task SaveAsync(Stream stream);
}
public interface Microsoft.Maui.Graphics.IPdfRenderService {
    public abstract virtual IPdfPage CreatePage(Stream stream, int pageNumber);
}
public interface Microsoft.Maui.Graphics.IPicture {
    public float X { get; }
    public float Y { get; }
    public float Width { get; }
    public float Height { get; }
    public abstract virtual void Draw(ICanvas canvas);
    public abstract virtual float get_X();
    public abstract virtual float get_Y();
    public abstract virtual float get_Width();
    public abstract virtual float get_Height();
}
public interface Microsoft.Maui.Graphics.IPictureReader {
    public abstract virtual IPicture Read(Byte[] data);
}
public interface Microsoft.Maui.Graphics.IPictureWriter {
    public abstract virtual void Save(IPicture picture, Stream stream);
    public abstract virtual Task SaveAsync(IPicture picture, Stream stream);
}
[NullableContextAttribute("1")]
public interface Microsoft.Maui.Graphics.IPlatformFonts {
    public IFont Default { get; }
    public IFont DefaultBold { get; }
    public abstract virtual IFont get_Default();
    public abstract virtual IFont get_DefaultBold();
    public abstract virtual void Register(string alias, FontSource[] sources);
    public abstract virtual object Get(IFont font);
    public abstract virtual object Get(string alias, int weight, FontStyleType fontStyleType);
}
public interface Microsoft.Maui.Graphics.IStringSizeService {
    public abstract virtual SizeF GetStringSize(string value, IFont font, float fontSize);
    public abstract virtual SizeF GetStringSize(string value, IFont font, float fontSize, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment);
}
public interface Microsoft.Maui.Graphics.ITextAttributes {
    public IFont Font { get; public set; }
    public float FontSize { get; public set; }
    public float Margin { get; public set; }
    public Color TextFontColor { get; public set; }
    public HorizontalAlignment HorizontalAlignment { get; public set; }
    public VerticalAlignment VerticalAlignment { get; public set; }
    public abstract virtual IFont get_Font();
    public abstract virtual void set_Font(IFont value);
    public abstract virtual float get_FontSize();
    public abstract virtual void set_FontSize(float value);
    public abstract virtual float get_Margin();
    public abstract virtual void set_Margin(float value);
    public abstract virtual Color get_TextFontColor();
    public abstract virtual void set_TextFontColor(Color value);
    public abstract virtual HorizontalAlignment get_HorizontalAlignment();
    public abstract virtual void set_HorizontalAlignment(HorizontalAlignment value);
    public abstract virtual VerticalAlignment get_VerticalAlignment();
    public abstract virtual void set_VerticalAlignment(VerticalAlignment value);
}
public class Microsoft.Maui.Graphics.LayoutLine : MulticastDelegate {
    public LayoutLine(object object, IntPtr method);
    public virtual void Invoke(PointF aPoint, ITextAttributes aTextual, string aText, float aAscent, float aDescent, float aLeading);
    public virtual IAsyncResult BeginInvoke(PointF aPoint, ITextAttributes aTextual, string aText, float aAscent, float aDescent, float aLeading, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Maui.Graphics.LinearGradientPaint : GradientPaint {
    [CompilerGeneratedAttribute]
private Point <StartPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private Point <EndPoint>k__BackingField;
    public Point StartPoint { get; public set; }
    public Point EndPoint { get; public set; }
    public LinearGradientPaint(GradientPaint gradientPaint);
    public LinearGradientPaint(PaintGradientStop[] gradientStops);
    public LinearGradientPaint(Point startPoint, Point endPoint);
    public LinearGradientPaint(PaintGradientStop[] gradientStops, Point startPoint, Point endPoint);
    [CompilerGeneratedAttribute]
public Point get_StartPoint();
    [CompilerGeneratedAttribute]
public void set_StartPoint(Point value);
    [CompilerGeneratedAttribute]
public Point get_EndPoint();
    [CompilerGeneratedAttribute]
public void set_EndPoint(Point value);
}
public enum Microsoft.Maui.Graphics.LineCap : Enum {
    public int value__;
    public static LineCap Butt;
    public static LineCap Round;
    public static LineCap Square;
}
public enum Microsoft.Maui.Graphics.LineJoin : Enum {
    public int value__;
    public static LineJoin Miter;
    public static LineJoin Round;
    public static LineJoin Bevel;
}
[ExtensionAttribute]
internal static class Microsoft.Maui.Graphics.Matrix3x2Extensions : object {
    [ExtensionAttribute]
public static bool IsZero(Matrix3x2& matrix);
    [ExtensionAttribute]
public static bool IsFinite(Matrix3x2& matrix);
    [ExtensionAttribute]
public static Vector2 GetScale(Matrix3x2& matrix);
    [ExtensionAttribute]
public static float GetRotation(Matrix3x2& matrix);
    [ExtensionAttribute]
public static Vector2 GetTranslation(Matrix3x2& matrix);
    [ExtensionAttribute]
public static Matrix3x2 WithScale(Matrix3x2 matrix, Vector2 scale);
    [ExtensionAttribute]
public static Matrix3x2 WithoutScale(Matrix3x2& matrix);
    [ExtensionAttribute]
public static Matrix3x2 WithRotation(Matrix3x2& matrix, float radians);
    [ExtensionAttribute]
public static Matrix3x2 WithoutRotation(Matrix3x2& matrix);
    [ExtensionAttribute]
public static Matrix3x2 WithTranslation(Matrix3x2 matrix, Vector2 translation);
    internal static Matrix3x2 CreateMatrix3x2(Vector2 scale, float rotation, Vector2 translation);
    [ExtensionAttribute]
public static float GetLengthScale(Matrix3x2& matrix);
    [ExtensionAttribute]
public static void CopyTo(Matrix3x2& matrix, Single[] dst, int offset, int count);
    [ExtensionAttribute]
public static void DeconstructScales(Matrix3x2& value, Single& scale, Single& scalex, Single& scaley);
}
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
internal static class Microsoft.Maui.Graphics.NumericExtensions : object {
    [ExtensionAttribute]
public static float Clamp(float self, float min, float max);
    [ExtensionAttribute]
public static double Clamp(double self, double min, double max);
    [ExtensionAttribute]
public static int Clamp(int self, int min, int max);
}
public abstract class Microsoft.Maui.Graphics.Paint : object {
    [CompilerGeneratedAttribute]
private Color <BackgroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <ForegroundColor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTransparent>k__BackingField;
    public Color BackgroundColor { get; public set; }
    public Color ForegroundColor { get; public set; }
    public bool IsTransparent { get; }
    [CompilerGeneratedAttribute]
public Color get_BackgroundColor();
    [CompilerGeneratedAttribute]
public void set_BackgroundColor(Color value);
    [CompilerGeneratedAttribute]
public Color get_ForegroundColor();
    [CompilerGeneratedAttribute]
public void set_ForegroundColor(Color value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsTransparent();
}
public class Microsoft.Maui.Graphics.PaintGradientStop : object {
    private Color _color;
    private float _offset;
    public Color Color { get; public set; }
    public float Offset { get; public set; }
    public PaintGradientStop(float offset, Color color);
    public PaintGradientStop(PaintGradientStop source);
    public Color get_Color();
    public void set_Color(Color value);
    public float get_Offset();
    public void set_Offset(float value);
    public sealed virtual int CompareTo(PaintGradientStop obj);
}
public class Microsoft.Maui.Graphics.PaintPattern : object {
    [CompilerGeneratedAttribute]
private IPattern <Wrapped>k__BackingField;
    [CompilerGeneratedAttribute]
private Paint <Paint>k__BackingField;
    public IPattern Wrapped { get; }
    public Paint Paint { get; public set; }
    public float Width { get; }
    public float Height { get; }
    public float StepX { get; }
    public float StepY { get; }
    public PaintPattern(IPattern pattern);
    [CompilerGeneratedAttribute]
public IPattern get_Wrapped();
    [CompilerGeneratedAttribute]
public Paint get_Paint();
    [CompilerGeneratedAttribute]
public void set_Paint(Paint value);
    public sealed virtual float get_Width();
    public sealed virtual float get_Height();
    public sealed virtual float get_StepX();
    public sealed virtual float get_StepY();
    public sealed virtual void Draw(ICanvas canvas);
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.PathArcExtensions : object {
    [ExtensionAttribute]
public static void SVGArcTo(PathF aTarget, float rx, float ry, float angle, bool largeArcFlag, bool sweepFlag, float x, float y, float lastPointX, float lastPointY);
    private static Single[] ComputeSvgArc(float rx, float ry, float angle, bool largeArcFlag, bool sweepFlag, float x, float y, float lastPointX, float lastPointY);
    [ExtensionAttribute]
public static void DrawArc(PathF aPath, float x, float y, float startAngle, float arc, float radius, float yRadius, float xAxisRotation);
}
public class Microsoft.Maui.Graphics.PathBuilder : object {
    private Stack`1<string> _commandStack;
    private bool _closeWhenDone;
    private char _lastCommand;
    private Nullable`1<PointF> _lastCurveControlPoint;
    private Nullable`1<PointF> _lastMoveTo;
    private PathF _path;
    private Nullable`1<PointF> _relativePoint;
    private bool NextBoolValue { get; }
    private float NextValue { get; }
    public static PathF Build(string definition);
    private bool get_NextBoolValue();
    private float get_NextValue();
    public static float ParseFloat(string value);
    private static string GetNumbersOnly(string value);
    public PathF BuildPath(string pathAsString);
    private bool IsCommand(char firstLetter);
    private void HandleCommand(string command);
    private void HandleCommand(char command, Nullable`1<char> previousCommand);
    private void ClosePath();
    private void MoveTo(bool isRelative);
    private void LineTo(bool isRelative);
    private void HorizontalLineTo(bool isRelative);
    private void VerticalLineTo(bool isRelative);
    private void CurveTo(bool isRelative);
    private void QuadTo(bool isRelative);
    private void ReflectiveQuadTo(bool isRelative, Nullable`1<char> previousCommand);
    private void SmoothCurveTo(bool isRelative);
    private void ArcTo(bool isRelative);
    private PointF NewPoint(float x, float y, bool isRelative, bool isReference);
    private PointF NewVerticalPoint(float y, bool isRelative, bool isReference);
    private PointF NewHorizontalPoint(float x, bool isRelative, bool isReference);
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.PathExtensions : object {
    [ExtensionAttribute]
public static string ToDefinitionString(PathF path, float ppu);
    private static void WritePoint(StringWriter writer, PointF point, float ppu);
    [ExtensionAttribute]
public static PathF AsScaledPath(PathF target, float scale);
    [ExtensionAttribute]
public static PathF AsScaledPath(PathF target, float xScale, float yScale);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Maui.Graphics.PathF : object {
    private static float K_RATIO;
    private List`1<float> _arcAngles;
    private List`1<bool> _arcClockwise;
    private List`1<PointF> _points;
    private List`1<PathOperation> _operations;
    private int _subPathCount;
    private List`1<bool> _subPathsClosed;
    private object _platformPath;
    private Nullable`1<RectF> _cachedBounds;
    public int SubPathCount { get; }
    public bool Closed { get; }
    public PointF FirstPoint { get; }
    public IEnumerable`1<PathOperation> SegmentTypes { get; }
    public IEnumerable`1<PointF> Points { get; }
    public PointF LastPoint { get; }
    public int LastPointIndex { get; }
    public PointF Item { get; }
    public int Count { get; }
    public int OperationCount { get; }
    public int SegmentCountExcludingOpenAndClose { get; }
    public object PlatformPath { get; public set; }
    public RectF Bounds { get; }
    private PathF(List`1<PointF> points, List`1<float> arcSizes, List`1<bool> arcClockwise, List`1<PathOperation> operations, int subPathCount);
    public PathF(PathF path);
    public PathF(PointF point);
    public PathF(float x, float y);
    public int get_SubPathCount();
    public bool get_Closed();
    public PointF get_FirstPoint();
    [IteratorStateMachineAttribute("Microsoft.Maui.Graphics.PathF/<get_SegmentTypes>d__21")]
public IEnumerable`1<PathOperation> get_SegmentTypes();
    [IteratorStateMachineAttribute("Microsoft.Maui.Graphics.PathF/<get_Points>d__23")]
public IEnumerable`1<PointF> get_Points();
    public PointF get_LastPoint();
    public int get_LastPointIndex();
    public PointF get_Item(int index);
    public void SetPoint(int index, float x, float y);
    public void SetPoint(int index, PointF point);
    public int get_Count();
    public int get_OperationCount();
    public int get_SegmentCountExcludingOpenAndClose();
    public PathOperation GetSegmentType(int aIndex);
    public float GetArcAngle(int aIndex);
    public void SetArcAngle(int aIndex, float aValue);
    public bool GetArcClockwise(int aIndex);
    public void SetArcClockwise(int aIndex, bool aValue);
    public PathF MoveTo(float x, float y);
    public PathF MoveTo(PointF point);
    public void Close();
    public void Open();
    public PathF LineTo(float x, float y);
    public PathF LineTo(PointF point);
    public PathF InsertLineTo(PointF point, int index);
    public PathF AddArc(float x1, float y1, float x2, float y2, float startAngle, float endAngle, bool clockwise);
    public PathF AddArc(PointF topLeft, PointF bottomRight, float startAngle, float endAngle, bool clockwise);
    public PathF QuadTo(float cx, float cy, float x, float y);
    public PathF QuadTo(PointF controlPoint, PointF point);
    public PathF InsertQuadTo(PointF controlPoint, PointF point, int index);
    public PathF CurveTo(float c1X, float c1Y, float c2X, float c2Y, float x, float y);
    public PathF CurveTo(PointF controlPoint1, PointF controlPoint2, PointF point);
    public PathF InsertCurveTo(PointF controlPoint1, PointF controlPoint2, PointF point, int index);
    public int GetSegmentPointIndex(int index);
    public PathOperation GetSegmentInfo(int segmentIndex, Int32& pointIndex, Int32& arcAngleIndex, Int32& arcClockwiseIndex);
    public int GetSegmentForPoint(int pointIndex);
    public PointF[] GetPointsForSegment(int segmentIndex);
    private void RemoveAllAfter(int pointIndex, int segmentIndex, int arcIndex, int arcClockwiseIndex);
    public void RemoveAllSegmentsAfter(int segmentIndex);
    public void RemoveSegment(int segmentIndex);
    public PathF Rotate(float angleAsDegrees, PointF pivot);
    public PointF GetRotatedPoint(int pointIndex, PointF pivotPoint, float angle);
    public void Transform(Matrix3x2 transform);
    public List`1<PathF> Separate();
    public PathF Reverse();
    public void AppendEllipse(RectF rect);
    public void AppendEllipse(float x, float y, float w, float h);
    public void AppendCircle(PointF center, float r);
    public void AppendCircle(float cx, float cy, float r);
    public void AppendRectangle(RectF rect, bool includeLast);
    public void AppendRectangle(float x, float y, float w, float h, bool includeLast);
    public void AppendRoundedRectangle(RectF rect, float cornerRadius, bool includeLast);
    public void AppendRoundedRectangle(float x, float y, float w, float h, float cornerRadius, bool includeLast);
    public void AppendRoundedRectangle(RectF rect, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius, bool includeLast);
    public void AppendRoundedRectangle(RectF rect, float xCornerRadius, float yCornerRadius);
    public void AppendRoundedRectangle(float x, float y, float w, float h, float topLeftCornerRadius, float topRightCornerRadius, float bottomLeftCornerRadius, float bottomRightCornerRadius, bool includeLast);
    private float ClampCornerRadius(float cornerRadius, float w, float h);
    public bool IsSubPathClosed(int subPathIndex);
    public object get_PlatformPath();
    public void set_PlatformPath(object value);
    public void Invalidate();
    public sealed virtual void Dispose();
    private void ReleaseNative();
    public void Move(float x, float y);
    public void MovePoint(int index, float dx, float dy);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool Equals(object obj, float epsilon);
    public RectF get_Bounds();
    public RectF GetBoundsByFlattening(float flatness);
    public PathF GetFlattenedPath(float flatness, bool includeSubPaths);
    private PathF FlattenArc(PointF topLeft, PointF bottomRight, float startAngle, float endAngle, bool clockwise, float flattness);
    private void QuadToCubic(int pointIndex, List`1<PointF> curvePoints);
    private void FlattenCubicSegment(int index, double flatness, List`1<PointF> curvePoints, List`1<PointF> flattenedPoints);
    private Vector2 DeCasteljau(List`1<PointF> curvePoints, int index, float t);
    private Vector2 GetPointAsVector(List`1<PointF> curvePoints, int index);
}
public enum Microsoft.Maui.Graphics.PathOperation : Enum {
    public int value__;
    public static PathOperation Move;
    public static PathOperation Line;
    public static PathOperation Quad;
    public static PathOperation Cubic;
    public static PathOperation Arc;
    public static PathOperation Close;
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.PatternExtensions : object {
    [ExtensionAttribute]
public static Paint AsPaint(IPattern target);
    [ExtensionAttribute]
public static Paint AsPaint(IPattern target, Color foregroundColor);
}
public class Microsoft.Maui.Graphics.PatternPaint : Paint {
    private IPattern _pattern;
    public IPattern Pattern { get; public set; }
    public bool IsTransparent { get; }
    public IPattern get_Pattern();
    public void set_Pattern(IPattern value);
    public virtual bool get_IsTransparent();
}
internal abstract class Microsoft.Maui.Graphics.PdfExportContext : object {
    private float _defaultWidth;
    private float _defaultHeight;
    private float _currentPageWidth;
    private float _currentPageHeight;
    private int _pageCount;
    public float DefaultWidth { get; }
    public float DefaultHeight { get; }
    public int PageCount { get; }
    public ICanvas Canvas { get; }
    protected PdfExportContext(float defaultWidth, float defaultHeight);
    public float get_DefaultWidth();
    public float get_DefaultHeight();
    public int get_PageCount();
    public void AddPage(float width, float height);
    public virtual void Dispose();
    protected abstract virtual void AddPageImpl(float width, float height);
    public abstract virtual ICanvas get_Canvas();
    public abstract virtual void WriteToStream(Stream stream);
}
[ExtensionAttribute]
internal static class Microsoft.Maui.Graphics.PdfExportContextExtensions : object {
    [ExtensionAttribute]
public static void WriteToFile(PdfExportContext exportContext, string filename);
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.PdfPageExtensions : object {
    [ExtensionAttribute]
public static Byte[] AsBytes(IPdfPage target);
    [ExtensionAttribute]
public static Stream AsStream(IPdfPage target);
    [AsyncStateMachineAttribute("Microsoft.Maui.Graphics.PdfPageExtensions/<AsBytesAsync>d__2")]
[ExtensionAttribute]
public static Task`1<Byte[]> AsBytesAsync(IPdfPage target);
    [ExtensionAttribute]
public static string AsBase64(IPdfPage target);
}
public class Microsoft.Maui.Graphics.PictureCanvas : object {
    private float _x;
    private float _y;
    private float _width;
    private float _height;
    private List`1<DrawingCommand> _commands;
    [CompilerGeneratedAttribute]
private float <DisplayScale>k__BackingField;
    public IPicture Picture { get; }
    public float DisplayScale { get; public set; }
    unknown float StrokeSize {public set; }
    unknown float MiterLimit {public set; }
    unknown Color StrokeColor {public set; }
    unknown LineCap StrokeLineCap {public set; }
    unknown LineJoin StrokeLineJoin {public set; }
    unknown Single[] StrokeDashPattern {public set; }
    unknown float StrokeDashOffset {public set; }
    unknown Color FillColor {public set; }
    unknown Color FontColor {public set; }
    unknown IFont Font {public set; }
    unknown float FontSize {public set; }
    unknown float Alpha {public set; }
    unknown bool Antialias {public set; }
    unknown BlendMode BlendMode {public set; }
    public PictureCanvas(float x, float y, float width, float height);
    public IPicture get_Picture();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual float get_DisplayScale();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DisplayScale(float value);
    public sealed virtual void set_StrokeSize(float value);
    public sealed virtual void set_MiterLimit(float value);
    public sealed virtual void set_StrokeColor(Color value);
    public sealed virtual void set_StrokeLineCap(LineCap value);
    public sealed virtual void set_StrokeLineJoin(LineJoin value);
    public sealed virtual void set_StrokeDashPattern(Single[] value);
    public sealed virtual void set_StrokeDashOffset(float value);
    public sealed virtual void set_FillColor(Color value);
    public sealed virtual void set_FontColor(Color value);
    public sealed virtual void set_Font(IFont value);
    public sealed virtual void set_FontSize(float value);
    public sealed virtual void set_Alpha(float value);
    public sealed virtual void set_Antialias(bool value);
    public sealed virtual void set_BlendMode(BlendMode value);
    public sealed virtual void SubtractFromClip(float x, float y, float width, float height);
    public sealed virtual void DrawLine(float x1, float y1, float x2, float y2);
    public sealed virtual void DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed);
    public sealed virtual void FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise);
    public sealed virtual void DrawRectangle(float x, float y, float width, float height);
    public sealed virtual void FillRectangle(float x, float y, float width, float height);
    public sealed virtual void DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius);
    public sealed virtual void FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius);
    public sealed virtual void DrawEllipse(float x, float y, float width, float height);
    public sealed virtual void FillEllipse(float x, float y, float width, float height);
    public sealed virtual void DrawString(string value, float x, float y, HorizontalAlignment horizontalAlignment);
    public sealed virtual void DrawString(string value, float x, float y, float width, float height, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment, TextFlow textFlow, float lineSpacingAdjustment);
    public sealed virtual void DrawText(IAttributedText value, float x, float y, float width, float height);
    public sealed virtual void DrawPath(PathF path);
    public sealed virtual void FillPath(PathF path, WindingMode windingMode);
    public sealed virtual void ClipPath(PathF path, WindingMode windingMode);
    public sealed virtual void ClipRectangle(float x, float y, float width, float height);
    public sealed virtual void Rotate(float degrees, float x, float y);
    public sealed virtual void Rotate(float degrees);
    public sealed virtual void Scale(float sx, float sy);
    public sealed virtual void Translate(float tx, float ty);
    public sealed virtual void ConcatenateTransform(Matrix3x2 transform);
    public sealed virtual void SaveState();
    public sealed virtual bool RestoreState();
    public sealed virtual void ResetState();
    public sealed virtual void SetShadow(SizeF offset, float blur, Color color);
    public void SetFillPaint(Paint paint, PointF point1, PointF point2);
    public sealed virtual void SetFillPaint(Paint paint, RectF rectangle);
    public sealed virtual SizeF GetStringSize(string value, IFont font, float fontSize);
    public sealed virtual SizeF GetStringSize(string value, IFont font, float fontSize, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment);
    public sealed virtual void DrawImage(IImage image, float x, float y, float width, float height);
}
public enum Microsoft.Maui.Graphics.PictureCommand : Enum {
    public int value__;
    public static PictureCommand DrawLine;
    public static PictureCommand DrawRectangle;
    public static PictureCommand DrawRoundedRectangle;
    public static PictureCommand DrawEllipse;
    public static PictureCommand DrawPath;
    public static PictureCommand DrawImage;
    public static PictureCommand DrawArc;
    public static PictureCommand DrawPdfPage;
    public static PictureCommand FillRectangle;
    public static PictureCommand FillRoundedRectangle;
    public static PictureCommand FillEllipse;
    public static PictureCommand FillPath;
    public static PictureCommand FillArc;
    public static PictureCommand FillPath2;
    public static PictureCommand DrawStringAtPoint;
    public static PictureCommand DrawStringInRect;
    public static PictureCommand DrawStringInPath;
    public static PictureCommand DrawTextInRect;
    public static PictureCommand StrokeSize;
    public static PictureCommand StrokeColor;
    public static PictureCommand StrokeDashPattern;
    public static PictureCommand StrokeLineCap;
    public static PictureCommand StrokeLineJoin;
    public static PictureCommand StrokeLocation;
    public static PictureCommand StrokeMiterLimit;
    public static PictureCommand LimitStrokeScaling;
    public static PictureCommand StrokeLimit;
    public static PictureCommand StrokeBrush;
    public static PictureCommand FillColor;
    public static PictureCommand FillPaint;
    public static PictureCommand FontColor;
    public static PictureCommand FontName;
    public static PictureCommand FontSize;
    public static PictureCommand Scale;
    public static PictureCommand Translate;
    public static PictureCommand Rotate;
    public static PictureCommand RotateAtPoint;
    public static PictureCommand ConcatenateTransform;
    public static PictureCommand Shadow;
    public static PictureCommand Alpha;
    public static PictureCommand BlendMode;
    public static PictureCommand SubtractFromClip;
    public static PictureCommand ClipPath;
    public static PictureCommand ClipRectangle;
    public static PictureCommand SubtractPathFromClip;
    public static PictureCommand SaveState;
    public static PictureCommand RestoreState;
    public static PictureCommand ResetState;
    public static PictureCommand SystemFont;
    public static PictureCommand BoldSystemFont;
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.PictureExtensions : object {
    [ExtensionAttribute]
public static RectF GetBounds(IPicture target);
}
public class Microsoft.Maui.Graphics.PicturePattern : AbstractPattern {
    private IPicture _picture;
    public PicturePattern(IPicture picture, float stepX, float stepY);
    public PicturePattern(IPicture picture);
    public virtual void Draw(ICanvas canvas);
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.PictureReaderExtensions : object {
    [ExtensionAttribute]
public static IPicture Read(IPictureReader target, Stream stream, string hash);
    [AsyncStateMachineAttribute("Microsoft.Maui.Graphics.PictureReaderExtensions/<ReadAsync>d__1")]
[ExtensionAttribute]
public static Task`1<IPicture> ReadAsync(IPictureReader target, Stream stream, string hash);
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.PictureWriterExtensions : object {
    [ExtensionAttribute]
public static Byte[] SaveAsBytes(IPictureWriter target, IPicture picture);
    [AsyncStateMachineAttribute("Microsoft.Maui.Graphics.PictureWriterExtensions/<SaveAsBytesAsync>d__1")]
[ExtensionAttribute]
public static Task`1<Byte[]> SaveAsBytesAsync(IPictureWriter target, IPicture picture);
    [ExtensionAttribute]
public static string SaveAsBase64(IPictureWriter target, IPicture picture);
    [ExtensionAttribute]
public static Stream SaveAsStream(IPictureWriter target, IPicture picture);
}
internal static class Microsoft.Maui.Graphics.Platform.AsyncPump : object {
    public static void Run(Func`1<Task> func);
    public static T Run(Func`1<Task`1<T>> asyncMethod);
}
[ExtensionAttribute]
internal static class Microsoft.Maui.Graphics.Platform.FontExtensions : object {
    [ExtensionAttribute]
public static FontStyle ToFontStyle(FontStyleType fontStyleType);
    [ExtensionAttribute]
public static CanvasTextFormat ToCanvasTextFormat(IFont font, float size);
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.Platform.GraphicsExtensions : object {
    [ExtensionAttribute]
internal static Color AsColor(Color color, Color defaultColor, float alpha);
    [ExtensionAttribute]
public static Color AsWindowsColor(Color color, Color defaultColor, float alpha);
    [ExtensionAttribute]
internal static Color AsColor(Color color, float alpha);
    [ExtensionAttribute]
public static Color AsWindowsColor(Color color, float alpha);
    [ExtensionAttribute]
internal static Matrix3x2 Scale(Matrix3x2 target, float sx, float sy);
    [ExtensionAttribute]
internal static Matrix3x2 Translate(Matrix3x2 target, float dx, float dy);
    [ExtensionAttribute]
internal static Matrix3x2 Rotate(Matrix3x2 target, float radians);
    [ExtensionAttribute]
internal static CanvasGeometry AsPath(PathF path, ICanvasResourceCreator creator, CanvasFilledRegionDetermination fillMode);
    [ExtensionAttribute]
public static CanvasGeometry AsCanvasGeometry(PathF path, ICanvasResourceCreator creator, CanvasFilledRegionDetermination fillMode);
    [ExtensionAttribute]
internal static CanvasGeometry AsPath(PathF path, float ox, float oy, float fx, float fy, ICanvasResourceCreator creator, CanvasFilledRegionDetermination fillMode);
    [ExtensionAttribute]
public static CanvasGeometry AsCanvasGeometry(PathF path, float ox, float oy, float fx, float fy, ICanvasResourceCreator creator, CanvasFilledRegionDetermination fillMode);
    [ExtensionAttribute]
public static CanvasGeometry AsCanvasGeometryFromSegment(PathF path, int segmentIndex, float zoom, ICanvasResourceCreator creator);
}
public class Microsoft.Maui.Graphics.Platform.PlatformBitmapExportService : object {
    public sealed virtual BitmapExportContext CreateContext(int width, int height, float displayScale);
}
public class Microsoft.Maui.Graphics.Platform.PlatformCanvas : AbstractCanvas`1<PlatformCanvasState> {
    private CanvasDrawingSession _session;
    private CanvasRenderTarget _patternContext;
    private CanvasRenderTarget _effectContext;
    private ShadowEffect _shadowEffect;
    private GaussianBlurEffect _blurEffect;
    private Size _canvasSize;
    private Vector2 _point1;
    private Vector2 _point2;
    private Vector2 _linearGradientStartPoint;
    private Vector2 _linearGradientEndPoint;
    private Vector2 _radialGradientCenter;
    private float _radialGradientRadius;
    private Rect _rect;
    private Size _size;
    private bool _bitmapPatternFills;
    public CanvasDrawingSession Session { get; public set; }
    public Size CanvasSize { get; public set; }
    public bool BitmapPatternFills { get; public set; }
    unknown float MiterLimit {public set; }
    unknown Color StrokeColor {public set; }
    unknown LineCap StrokeLineCap {public set; }
    unknown LineJoin StrokeLineJoin {public set; }
    unknown Color FillColor {public set; }
    unknown Color FontColor {public set; }
    unknown IFont Font {public set; }
    unknown float FontSize {public set; }
    unknown float Alpha {public set; }
    unknown bool Antialias {public set; }
    unknown BlendMode BlendMode {public set; }
    unknown float PlatformStrokeSize {protected set; }
    public CanvasDrawingSession get_Session();
    public void set_Session(CanvasDrawingSession value);
    public Size get_CanvasSize();
    public void set_CanvasSize(Size value);
    public bool get_BitmapPatternFills();
    public void set_BitmapPatternFills(bool value);
    public virtual void set_MiterLimit(float value);
    public virtual void set_StrokeColor(Color value);
    public virtual void set_StrokeLineCap(LineCap value);
    public virtual void set_StrokeLineJoin(LineJoin value);
    protected virtual void PlatformSetStrokeDashPattern(Single[] strokePattern, float strokeDashOffset, float strokeSize);
    public virtual void set_FillColor(Color value);
    public virtual void set_FontColor(Color value);
    public virtual void set_Font(IFont value);
    public virtual void set_FontSize(float value);
    public virtual void set_Alpha(float value);
    public virtual void set_Antialias(bool value);
    public virtual void set_BlendMode(BlendMode value);
    public virtual void FillPath(PathF path, WindingMode windingMode);
    public virtual void SubtractFromClip(float x, float y, float width, float height);
    public virtual void ClipPath(PathF path, WindingMode windingMode);
    public virtual void ClipRectangle(float x, float y, float width, float height);
    public virtual void FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise);
    public virtual void FillRectangle(float x, float y, float width, float height);
    public virtual void FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius);
    public virtual void FillEllipse(float x, float y, float width, float height);
    public virtual void DrawString(string value, float x, float y, HorizontalAlignment horizontalAlignment);
    public virtual void DrawString(string value, float x, float y, float width, float height, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment, TextFlow textFlow, float lineAdjustment);
    public virtual void DrawText(IAttributedText value, float x, float y, float width, float height);
    public virtual void SetShadow(SizeF offset, float blur, Color color);
    public virtual void SetFillPaint(Paint paint, RectF rectangle);
    private CanvasCommandList CreatePatternCommandList(IPattern pattern);
    private CanvasBitmap CreatePatternBitmap(IPattern pattern);
    public virtual void DrawImage(IImage image, float x, float y, float width, float height);
    protected virtual void set_PlatformStrokeSize(float value);
    protected virtual void PlatformDrawLine(float x1, float y1, float x2, float y2);
    protected virtual void PlatformDrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed);
    protected virtual void PlatformDrawRectangle(float x, float y, float width, float height);
    protected virtual void PlatformDrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius);
    protected virtual void PlatformDrawEllipse(float x, float y, float width, float height);
    private CanvasGeometry GetPath(PathF path, CanvasFilledRegionDetermination fillMode);
    protected virtual void PlatformDrawPath(PathF path);
    protected virtual void PlatformRotate(float degrees, float radians, float x, float y);
    protected virtual void PlatformRotate(float degrees, float radians);
    protected virtual void PlatformScale(float sx, float sy);
    protected virtual void PlatformTranslate(float tx, float ty);
    protected virtual void PlatformConcatenateTransform(Matrix3x2 transform);
    public sealed virtual void SetBlur(float blurRadius);
    public virtual void SaveState();
    protected virtual void StateRestored(PlatformCanvasState state);
    private void Draw(Action`1<CanvasDrawingSession> drawingAction);
    private CanvasRenderTarget GetOrCreatePatternContext(Size patternSize);
    private CanvasRenderTarget GetOrCreateEffectContext();
    private void DrawShadow(Action`1<CanvasDrawingSession> drawingAction);
    private void DrawBlurred(Action`1<CanvasDrawingSession> drawingAction);
    private void SetRect(float x, float y, float width, float height);
    [CompilerGeneratedAttribute]
private void <PlatformDrawRectangle>b__68_0(CanvasDrawingSession s);
}
public class Microsoft.Maui.Graphics.Platform.PlatformCanvasState : CanvasState {
    private static Single[] _emptyFloatArray;
    private PlatformCanvas _owner;
    private PlatformCanvasState _parentState;
    private float _alpha;
    private Single[] _dashes;
    private float _dashOffset;
    private ICanvasBrush _fillBrush;
    private bool _fillBrushValid;
    private CanvasSolidColorBrush _fontBrush;
    private bool _fontBrushValid;
    private float _fontSize;
    private Vector2 _linearGradientStartPoint;
    private Vector2 _linearGradientEndPoint;
    private Vector2 _radialGradientCenter;
    private float _radialGradientRadius;
    private CanvasGeometry _layerBounds;
    private CanvasGeometry _layerClipBounds;
    private CanvasGeometry _layerMask;
    private CanvasActiveLayer _layer;
    private bool _needsStrokeStyle;
    private float _scale;
    private Color _shadowColor;
    private bool _shadowColorValid;
    private Color _sourceFillColor;
    private Paint _sourceFillpaint;
    private Color _sourceFontColor;
    private Color _sourceShadowColor;
    private Color _sourceStrokeColor;
    private CanvasSolidColorBrush _strokeBrush;
    private bool _strokeBrushValid;
    private CanvasStrokeStyle _strokeStyle;
    private float _miterLimit;
    private CanvasCapStyle _lineCap;
    private CanvasLineJoin _lineJoin;
    private int _layerCount;
    private float _dpi;
    [CompilerGeneratedAttribute]
private IFont <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private float <BlurRadius>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsShadowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBlurred>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector2 <ShadowOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ShadowBlur>k__BackingField;
    [CompilerGeneratedAttribute]
private Matrix3x2 <Matrix>k__BackingField;
    public IFont Font { get; public set; }
    public float BlurRadius { get; private set; }
    public bool IsShadowed { get; private set; }
    public bool IsBlurred { get; private set; }
    public Vector2 ShadowOffset { get; private set; }
    public float ShadowBlur { get; public set; }
    public Matrix3x2 Matrix { get; private set; }
    public float FontSize { get; public set; }
    public float Dpi { get; }
    public float Alpha { get; public set; }
    unknown Color StrokeColor {public set; }
    unknown float MiterLimit {public set; }
    unknown LineCap StrokeLineCap {public set; }
    unknown LineJoin StrokeLineJoin {public set; }
    unknown Color FillColor {public set; }
    public ICanvasBrush PlatformFillBrush { get; }
    unknown Color FontColor {public set; }
    public Color ShadowColor { get; }
    public float ActualScale { get; }
    public float ActualShadowBlur { get; }
    public ICanvasBrush PlatformFontBrush { get; }
    public ICanvasBrush PlatformStrokeBrush { get; }
    public CanvasStrokeStyle PlatformStrokeStyle { get; }
    public PlatformCanvasState(PlatformCanvas owner);
    public PlatformCanvasState(PlatformCanvasState prototype);
    private static PlatformCanvasState();
    [CompilerGeneratedAttribute]
public IFont get_Font();
    [CompilerGeneratedAttribute]
public void set_Font(IFont value);
    [CompilerGeneratedAttribute]
public float get_BlurRadius();
    [CompilerGeneratedAttribute]
private void set_BlurRadius(float value);
    [CompilerGeneratedAttribute]
public bool get_IsShadowed();
    [CompilerGeneratedAttribute]
private void set_IsShadowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBlurred();
    [CompilerGeneratedAttribute]
private void set_IsBlurred(bool value);
    [CompilerGeneratedAttribute]
public Vector2 get_ShadowOffset();
    [CompilerGeneratedAttribute]
private void set_ShadowOffset(Vector2 value);
    [CompilerGeneratedAttribute]
public float get_ShadowBlur();
    [CompilerGeneratedAttribute]
public void set_ShadowBlur(float value);
    [CompilerGeneratedAttribute]
public Matrix3x2 get_Matrix();
    [CompilerGeneratedAttribute]
private void set_Matrix(Matrix3x2 value);
    public void SetToDefaults();
    public float get_FontSize();
    public void set_FontSize(float value);
    public float get_Dpi();
    public float get_Alpha();
    public void set_Alpha(float value);
    public void set_StrokeColor(Color value);
    public void set_MiterLimit(float value);
    public void set_StrokeLineCap(LineCap value);
    public void set_StrokeLineJoin(LineJoin value);
    public void SetStrokeDashPattern(Single[] pattern, float strokeDashOffset, float strokeSize);
    public void set_FillColor(Color value);
    public void SetLinearGradient(Paint aPaint, Vector2 startPoint, Vector2 endPoint);
    public void SetRadialGradient(Paint aPaint, Vector2 center, float radius);
    public void SetBitmapBrush(CanvasImageBrush bitmapBrush);
    public ICanvasBrush get_PlatformFillBrush();
    public void set_FontColor(Color value);
    public void SetShadow(SizeF offset, float blur, Color color);
    public Color get_ShadowColor();
    public void SetBlur(float aRadius);
    public float get_ActualScale();
    public float get_ActualShadowBlur();
    public Matrix3x2 AppendTranslate(float tx, float ty);
    public Matrix3x2 AppendConcatenateTransform(Matrix3x2 transform);
    public Matrix3x2 AppendScale(float tx, float ty);
    public Matrix3x2 AppendRotate(float aAngle);
    public Matrix3x2 AppendRotate(float aAngle, float x, float y);
    public void ClipPath(PathF path, WindingMode windingMode);
    public void ClipRectangle(float x, float y, float width, float height);
    public void SubtractFromClip(float x, float y, float width, float height);
    public void SaveRenderTargetState();
    public void RestoreRenderTargetState();
    public ICanvasBrush get_PlatformFontBrush();
    public ICanvasBrush get_PlatformStrokeBrush();
    public CanvasStrokeStyle get_PlatformStrokeStyle();
    private void InvalidateBrushes();
    private void ReleaseFillBrush();
    private void InvalidateStrokeStyle();
    public virtual void Dispose();
}
public class Microsoft.Maui.Graphics.Platform.PlatformCanvasStateService : object {
    public sealed virtual PlatformCanvasState CreateNew(object context);
    public sealed virtual PlatformCanvasState CreateCopy(PlatformCanvasState prototype);
}
internal class Microsoft.Maui.Graphics.Platform.PlatformGraphicsService : object {
    private static ICanvasResourceCreator _globalCreator;
    private static ThreadLocal`1<ICanvasResourceCreator> _threadLocalCreator;
    public static ICanvasResourceCreator GlobalCreator { get; public set; }
    public static ICanvasResourceCreator ThreadLocalCreator { get; public set; }
    public static ICanvasResourceCreator Creator { get; }
    private static PlatformGraphicsService();
    public static ICanvasResourceCreator get_GlobalCreator();
    public static void set_GlobalCreator(ICanvasResourceCreator value);
    public static ICanvasResourceCreator get_ThreadLocalCreator();
    public static void set_ThreadLocalCreator(ICanvasResourceCreator value);
    public static ICanvasResourceCreator get_Creator();
}
public class Microsoft.Maui.Graphics.Platform.PlatformGraphicsView : UserControl {
    private CanvasControl _canvasControl;
    private PlatformCanvas _canvas;
    private IDrawable _drawable;
    private RectF _dirty;
    public IDrawable Drawable { get; public set; }
    public IDrawable get_Drawable();
    public void set_Drawable(IDrawable value);
    public void Invalidate();
    private void UserControl_Loaded(object sender, RoutedEventArgs e);
    private void UserControl_Unloaded(object sender, RoutedEventArgs e);
    private void OnDraw(CanvasControl sender, CanvasDrawEventArgs args);
}
public class Microsoft.Maui.Graphics.Platform.PlatformImage : object {
    private ICanvasResourceCreator _creator;
    private CanvasBitmap _bitmap;
    private static RecyclableMemoryStreamManager recyclableMemoryStreamManager;
    public CanvasBitmap PlatformRepresentation { get; }
    public float Width { get; }
    public float Height { get; }
    public PlatformImage(ICanvasResourceCreator creator, CanvasBitmap bitmap);
    private static PlatformImage();
    public CanvasBitmap get_PlatformRepresentation();
    public sealed virtual void Dispose();
    public sealed virtual IImage Downsize(float maxWidthOrHeight, bool disposeOriginal);
    public sealed virtual IImage Downsize(float maxWidth, float maxHeight, bool disposeOriginal);
    public sealed virtual IImage Resize(float width, float height, ResizeMode resizeMode, bool disposeOriginal);
    public sealed virtual float get_Width();
    public sealed virtual float get_Height();
    public sealed virtual void Save(Stream stream, ImageFormat format, float quality);
    [AsyncStateMachineAttribute("Microsoft.Maui.Graphics.Platform.PlatformImage/<SaveAsync>d__15")]
public sealed virtual Task SaveAsync(Stream stream, ImageFormat format, float quality);
    public sealed virtual void Draw(ICanvas canvas, RectF dirtyRect);
    public sealed virtual IImage ToPlatformImage();
    public IImage ToImage(int width, int height, float scale);
    public static IImage FromStream(Stream stream, ImageFormat format);
}
public class Microsoft.Maui.Graphics.Platform.PlatformImageLoadingService : object {
    public sealed virtual IImage FromStream(Stream stream, ImageFormat formatHint);
}
public class Microsoft.Maui.Graphics.Platform.PlatformStringSizeService : object {
    public sealed virtual SizeF GetStringSize(string value, IFont font, float textSize);
    public sealed virtual SizeF GetStringSize(string value, IFont font, float textSize, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment);
}
[DebuggerDisplayAttribute("X={X}, Y={Y}")]
[TypeConverterAttribute("Microsoft.Maui.Graphics.Converters.PointTypeConverter")]
public class Microsoft.Maui.Graphics.Point : ValueType {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    public static Point Zero;
    public double X { get; public set; }
    public double Y { get; public set; }
    public bool IsEmpty { get; }
    public Point(double x, double y);
    public Point(Size sz);
    public Point(SizeF sz);
    public Point(Vector2 v);
    private static Point();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    public virtual string ToString();
    public virtual bool Equals(object o);
    public bool Equals(object o, double epsilon);
    public virtual int GetHashCode();
    public Point Offset(double dx, double dy);
    public Point Round();
    public bool get_IsEmpty();
    public static Size op_Explicit(Point pt);
    public static Point op_Addition(Point pt, SizeF sz);
    public static Size op_Subtraction(Point ptA, Point ptB);
    public static Point op_Subtraction(Point pt, SizeF sz);
    public static bool op_Equality(Point ptA, Point ptB);
    public static bool op_Inequality(Point ptA, Point ptB);
    public double Distance(Point other);
    public void Deconstruct(Double& x, Double& y);
    public static PointF op_Implicit(Point p);
    public static Point op_Implicit(Vector2 v);
    public static bool TryParse(string value, Point& point);
}
[DebuggerDisplayAttribute("X={X}, Y={Y}")]
[TypeConverterAttribute("Microsoft.Maui.Graphics.Converters.PointFTypeConverter")]
public class Microsoft.Maui.Graphics.PointF : ValueType {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    public static PointF Zero;
    public float X { get; public set; }
    public float Y { get; public set; }
    public bool IsEmpty { get; }
    public PointF(float x, float y);
    public PointF(SizeF sz);
    public PointF(Vector2 v);
    private static PointF();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    public virtual string ToString();
    public virtual bool Equals(object o);
    public bool Equals(object o, float epsilon);
    public virtual int GetHashCode();
    public PointF Offset(float dx, float dy);
    public PointF TransformBy(Matrix3x2& transform);
    public PointF Round();
    public bool get_IsEmpty();
    public static SizeF op_Explicit(PointF pt);
    public static PointF op_Addition(PointF pt, SizeF sz);
    public static SizeF op_Subtraction(PointF ptA, PointF ptB);
    public static PointF op_Subtraction(PointF pt, SizeF sz);
    public static bool op_Equality(PointF ptA, PointF ptB);
    public static bool op_Inequality(PointF ptA, PointF ptB);
    public float Distance(PointF other);
    public void Deconstruct(Single& x, Single& y);
    public static Point op_Implicit(PointF p);
    public static PointF op_Implicit(Vector2 v);
    public static Vector2 op_Explicit(PointF p);
    public static bool TryParse(string value, PointF& pointF);
}
public class Microsoft.Maui.Graphics.RadialGradientPaint : GradientPaint {
    [CompilerGeneratedAttribute]
private Point <Center>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Radius>k__BackingField;
    public Point Center { get; public set; }
    public double Radius { get; public set; }
    public RadialGradientPaint(GradientPaint gradientPaint);
    public RadialGradientPaint(PaintGradientStop[] gradientStops);
    public RadialGradientPaint(Point center, double radius);
    public RadialGradientPaint(PaintGradientStop[] gradientStops, Point center, double radius);
    [CompilerGeneratedAttribute]
public Point get_Center();
    [CompilerGeneratedAttribute]
public void set_Center(Point value);
    [CompilerGeneratedAttribute]
public double get_Radius();
    [CompilerGeneratedAttribute]
public void set_Radius(double value);
}
[DebuggerDisplayAttribute("X={X}, Y={Y}, Width={Width}, Height={Height}")]
[TypeConverterAttribute("Microsoft.Maui.Graphics.Converters.RectTypeConverter")]
public class Microsoft.Maui.Graphics.Rect : ValueType {
    [CompilerGeneratedAttribute]
private double <X>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public static Rect Zero;
    public double X { get; public set; }
    public double Y { get; public set; }
    public double Width { get; public set; }
    public double Height { get; public set; }
    public double Top { get; public set; }
    public double Bottom { get; public set; }
    public double Right { get; public set; }
    public double Left { get; public set; }
    public bool IsEmpty { get; }
    public Size Size { get; public set; }
    public Point Location { get; public set; }
    public Point Center { get; }
    public Rect(double x, double y, double width, double height);
    public Rect(Point loc, Size sz);
    private static Rect();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_X();
    [CompilerGeneratedAttribute]
public void set_X(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    public virtual string ToString();
    public static Rect FromLTRB(double left, double top, double right, double bottom);
    public bool Equals(Rect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Rect r1, Rect r2);
    public static bool op_Inequality(Rect r1, Rect r2);
    public bool Contains(Rect rect);
    public bool Contains(Point pt);
    public bool Contains(double x, double y);
    public bool IntersectsWith(Rect r);
    public Rect Union(Rect r);
    public static Rect Union(Rect r1, Rect r2);
    public Rect Intersect(Rect r);
    public static Rect Intersect(Rect r1, Rect r2);
    public double get_Top();
    public void set_Top(double value);
    public double get_Bottom();
    public void set_Bottom(double value);
    public double get_Right();
    public void set_Right(double value);
    public double get_Left();
    public void set_Left(double value);
    public bool get_IsEmpty();
    public Size get_Size();
    public void set_Size(Size value);
    public Point get_Location();
    public void set_Location(Point value);
    public Point get_Center();
    public Rect Inflate(Size sz);
    public Rect Inflate(double width, double height);
    public Rect Offset(double dx, double dy);
    public Rect Offset(Point dr);
    public Rect Round();
    public void Deconstruct(Double& x, Double& y, Double& width, Double& height);
    public static RectF op_Implicit(Rect rect);
    public static bool TryParse(string value, Rect& rectangle);
}
[DebuggerDisplayAttribute("X={X}, Y={Y}, Width={Width}, Height={Height}")]
[TypeConverterAttribute("Microsoft.Maui.Graphics.Converters.RectFTypeConverter")]
public class Microsoft.Maui.Graphics.RectF : ValueType {
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    public static RectF Zero;
    public float X { get; public set; }
    public float Y { get; public set; }
    public float Width { get; public set; }
    public float Height { get; public set; }
    public float Top { get; public set; }
    public float Bottom { get; public set; }
    public float Right { get; public set; }
    public float Left { get; public set; }
    public bool IsEmpty { get; }
    public SizeF Size { get; public set; }
    public PointF Location { get; public set; }
    public PointF Center { get; }
    public RectF(float x, float y, float width, float height);
    public RectF(PointF loc, SizeF sz);
    private static RectF();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_X();
    [CompilerGeneratedAttribute]
public void set_X(float value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(float value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(float value);
    public virtual string ToString();
    public static RectF FromLTRB(float left, float top, float right, float bottom);
    public bool Equals(RectF other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(RectF r1, RectF r2);
    public static bool op_Inequality(RectF r1, RectF r2);
    public bool Contains(RectF rect);
    public bool Contains(PointF pt);
    public bool Contains(float x, float y);
    public bool IntersectsWith(RectF r);
    public RectF Union(RectF r);
    public static RectF Union(RectF r1, RectF r2);
    public RectF Intersect(RectF r);
    public static RectF Intersect(RectF r1, RectF r2);
    public float get_Top();
    public void set_Top(float value);
    public float get_Bottom();
    public void set_Bottom(float value);
    public float get_Right();
    public void set_Right(float value);
    public float get_Left();
    public void set_Left(float value);
    public bool get_IsEmpty();
    public SizeF get_Size();
    public void set_Size(SizeF value);
    public PointF get_Location();
    public void set_Location(PointF value);
    public PointF get_Center();
    public RectF Inflate(SizeF sz);
    public RectF Inflate(float width, float height);
    public RectF Offset(float dx, float dy);
    public RectF Offset(PointF dr);
    public RectF Round();
    public void Deconstruct(Single& x, Single& y, Single& width, Single& height);
    public static Rect op_Implicit(RectF rect);
    public static bool TryParse(string value, RectF& rectangleF);
}
public enum Microsoft.Maui.Graphics.ResizeMode : Enum {
    public int value__;
    public static ResizeMode Fit;
    public static ResizeMode Bleed;
    public static ResizeMode Stretch;
}
public class Microsoft.Maui.Graphics.ScalingCanvas : object {
    private ICanvas _canvas;
    private IBlurrableCanvas _blurrableCanvas;
    private Stack`1<float> _scaleXStack;
    private Stack`1<float> _scaleYStack;
    private float _scaleX;
    private float _scaleY;
    public float DisplayScale { get; public set; }
    public object Wrapped { get; }
    public ICanvas ParentCanvas { get; }
    unknown float StrokeSize {public set; }
    unknown float MiterLimit {public set; }
    unknown Color StrokeColor {public set; }
    unknown LineCap StrokeLineCap {public set; }
    unknown float Alpha {public set; }
    unknown LineJoin StrokeLineJoin {public set; }
    unknown Single[] StrokeDashPattern {public set; }
    unknown float StrokeDashOffset {public set; }
    unknown Color FillColor {public set; }
    unknown Color FontColor {public set; }
    unknown IFont Font {public set; }
    unknown float FontSize {public set; }
    unknown BlendMode BlendMode {public set; }
    unknown bool Antialias {public set; }
    public ScalingCanvas(ICanvas wrapped);
    public sealed virtual float get_DisplayScale();
    public sealed virtual void set_DisplayScale(float value);
    public object get_Wrapped();
    public ICanvas get_ParentCanvas();
    public sealed virtual void set_StrokeSize(float value);
    public sealed virtual void set_MiterLimit(float value);
    public sealed virtual void set_StrokeColor(Color value);
    public sealed virtual void set_StrokeLineCap(LineCap value);
    public sealed virtual void set_Alpha(float value);
    public sealed virtual void set_StrokeLineJoin(LineJoin value);
    public sealed virtual void set_StrokeDashPattern(Single[] value);
    public sealed virtual void set_StrokeDashOffset(float value);
    public sealed virtual void set_FillColor(Color value);
    public sealed virtual void set_FontColor(Color value);
    public sealed virtual void set_Font(IFont value);
    public sealed virtual void set_FontSize(float value);
    public sealed virtual void set_BlendMode(BlendMode value);
    public sealed virtual void set_Antialias(bool value);
    public sealed virtual void SubtractFromClip(float x1, float y1, float x2, float y2);
    public sealed virtual void DrawLine(float x1, float y1, float x2, float y2);
    public sealed virtual void DrawArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise, bool closed);
    public sealed virtual void FillArc(float x, float y, float width, float height, float startAngle, float endAngle, bool clockwise);
    public sealed virtual void DrawEllipse(float x, float y, float width, float height);
    public sealed virtual void DrawImage(IImage image, float x, float y, float width, float height);
    public sealed virtual void DrawRectangle(float x, float y, float width, float height);
    public sealed virtual void DrawRoundedRectangle(float x, float y, float width, float height, float cornerRadius);
    public sealed virtual void DrawString(string value, float x, float y, HorizontalAlignment horizontalAlignment);
    public sealed virtual void DrawString(string value, float x, float y, float width, float height, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment, TextFlow textFlow, float lineSpacingAdjustment);
    public sealed virtual void DrawText(IAttributedText value, float x, float y, float width, float height);
    public sealed virtual void FillEllipse(float x, float y, float width, float height);
    public sealed virtual void FillRectangle(float x, float y, float width, float height);
    public sealed virtual void FillRoundedRectangle(float x, float y, float width, float height, float cornerRadius);
    public sealed virtual void DrawPath(PathF path);
    public sealed virtual void FillPath(PathF path, WindingMode windingMode);
    public sealed virtual void ClipPath(PathF path, WindingMode windingMode);
    public sealed virtual void ClipRectangle(float x, float y, float width, float height);
    public sealed virtual void Rotate(float degrees, float x, float y);
    public sealed virtual void SetFillPaint(Paint paint, RectF rectangle);
    public sealed virtual void Rotate(float degrees);
    public sealed virtual void Scale(float sx, float sy);
    public sealed virtual void Translate(float tx, float ty);
    public sealed virtual void ConcatenateTransform(Matrix3x2 transform);
    public sealed virtual void SaveState();
    public sealed virtual void ResetState();
    public sealed virtual bool RestoreState();
    public float GetScale();
    public sealed virtual void SetShadow(SizeF offset, float blur, Color color);
    public sealed virtual void SetBlur(float blurRadius);
    public sealed virtual SizeF GetStringSize(string value, IFont font, float fontSize);
    public sealed virtual SizeF GetStringSize(string value, IFont font, float fontSize, HorizontalAlignment horizontalAlignment, VerticalAlignment verticalAlignment);
}
[DebuggerDisplayAttribute("Width={Width}, Height={Height}")]
[TypeConverterAttribute("Microsoft.Maui.Graphics.Converters.SizeTypeConverter")]
public class Microsoft.Maui.Graphics.Size : ValueType {
    public static Size Zero;
    [CompilerGeneratedAttribute]
private double <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Height>k__BackingField;
    public bool IsZero { get; }
    [DefaultValueAttribute("0")]
public double Width { get; public set; }
    [DefaultValueAttribute("0")]
public double Height { get; public set; }
    public Size(double size);
    public Size(double width, double height);
    public Size(Vector2 vector);
    public bool get_IsZero();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(double value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public double get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(double value);
    public static Size op_Addition(Size s1, Size s2);
    public static Size op_Subtraction(Size s1, Size s2);
    public static Size op_Multiply(Size s1, double value);
    public static Size op_Division(Size s1, double value);
    public static bool op_Equality(Size s1, Size s2);
    public static bool op_Inequality(Size s1, Size s2);
    public static Point op_Explicit(Size size);
    public bool Equals(Size other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public void Deconstruct(Double& width, Double& height);
    public static SizeF op_Implicit(Size s);
    public static bool TryParse(string value, Size& size);
}
[DebuggerDisplayAttribute("Width={Width}, Height={Height}")]
[TypeConverterAttribute("Microsoft.Maui.Graphics.Converters.SizeFTypeConverter")]
public class Microsoft.Maui.Graphics.SizeF : ValueType {
    public static SizeF Zero;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    public bool IsZero { get; }
    [DefaultValueAttribute("0")]
public float Width { get; public set; }
    [DefaultValueAttribute("0")]
public float Height { get; public set; }
    public SizeF(float size);
    public SizeF(float width, float height);
    public SizeF(Vector2 vector);
    public bool get_IsZero();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(float value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public float get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(float value);
    public SizeF TransformNormalBy(Matrix3x2& transform);
    public static SizeF op_Addition(SizeF s1, SizeF s2);
    public static SizeF op_Subtraction(SizeF s1, SizeF s2);
    public static SizeF op_Multiply(SizeF s1, float value);
    public static SizeF op_Division(SizeF s1, float value);
    public static bool op_Equality(SizeF s1, SizeF s2);
    public static bool op_Inequality(SizeF s1, SizeF s2);
    public static PointF op_Explicit(SizeF size);
    public static Vector2 op_Explicit(SizeF size);
    public static SizeF op_Explicit(Vector2 size);
    public bool Equals(SizeF other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public void Deconstruct(Single& width, Single& height);
    public static Size op_Implicit(SizeF s);
    public static bool TryParse(string value, SizeF& sizeF);
}
public class Microsoft.Maui.Graphics.SolidPaint : Paint {
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    public Color Color { get; public set; }
    public bool IsTransparent { get; }
    public SolidPaint(Color color);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    public virtual bool get_IsTransparent();
    public virtual string ToString();
}
public class Microsoft.Maui.Graphics.StandardPicture : object {
    private DrawingCommand[] _commands;
    [CompilerGeneratedAttribute]
private float <X>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Y>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    public float X { get; }
    public float Y { get; }
    public float Width { get; }
    public float Height { get; }
    public string Hash { get; public set; }
    public StandardPicture(float x, float y, float width, float height, DrawingCommand[] commands, string hash);
    [CompilerGeneratedAttribute]
public sealed virtual float get_X();
    [CompilerGeneratedAttribute]
public sealed virtual float get_Y();
    [CompilerGeneratedAttribute]
public sealed virtual float get_Width();
    [CompilerGeneratedAttribute]
public sealed virtual float get_Height();
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
    public sealed virtual void Draw(ICanvas canvas);
}
public class Microsoft.Maui.Graphics.StandardTextAttributes : object {
    [CompilerGeneratedAttribute]
private IFont <Font>k__BackingField;
    [CompilerGeneratedAttribute]
private float <FontSize>k__BackingField;
    [CompilerGeneratedAttribute]
private HorizontalAlignment <HorizontalAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Margin>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <TextFontColor>k__BackingField;
    [CompilerGeneratedAttribute]
private VerticalAlignment <VerticalAlignment>k__BackingField;
    public IFont Font { get; public set; }
    public float FontSize { get; public set; }
    public HorizontalAlignment HorizontalAlignment { get; public set; }
    public float Margin { get; public set; }
    public Color TextFontColor { get; public set; }
    public VerticalAlignment VerticalAlignment { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IFont get_Font();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Font(IFont value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_FontSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FontSize(float value);
    [CompilerGeneratedAttribute]
public sealed virtual HorizontalAlignment get_HorizontalAlignment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HorizontalAlignment(HorizontalAlignment value);
    [CompilerGeneratedAttribute]
public sealed virtual float get_Margin();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Margin(float value);
    [CompilerGeneratedAttribute]
public sealed virtual Color get_TextFontColor();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TextFontColor(Color value);
    [CompilerGeneratedAttribute]
public sealed virtual VerticalAlignment get_VerticalAlignment();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VerticalAlignment(VerticalAlignment value);
}
public abstract class Microsoft.Maui.Graphics.Text.AbstractAttributedText : object {
    [CompilerGeneratedAttribute]
private bool <Optimal>k__BackingField;
    public string Text { get; }
    public IReadOnlyList`1<IAttributedTextRun> Runs { get; }
    public bool Optimal { get; protected set; }
    public abstract virtual string get_Text();
    public abstract virtual IReadOnlyList`1<IAttributedTextRun> get_Runs();
    [CompilerGeneratedAttribute]
public bool get_Optimal();
    [CompilerGeneratedAttribute]
protected void set_Optimal(bool value);
}
public class Microsoft.Maui.Graphics.Text.AttributedText : AbstractAttributedText {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IAttributedTextRun> <Runs>k__BackingField;
    public string Text { get; }
    public IReadOnlyList`1<IAttributedTextRun> Runs { get; }
    public AttributedText(string text, IReadOnlyList`1<IAttributedTextRun> runs, bool optimal);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IAttributedTextRun> get_Runs();
}
public class Microsoft.Maui.Graphics.Text.AttributedTextBlock : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextAttributes <Attributes>k__BackingField;
    public string Text { get; }
    public ITextAttributes Attributes { get; }
    public AttributedTextBlock(string text, ITextAttributes attributes);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public ITextAttributes get_Attributes();
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.Text.AttributedTextExtensions : object {
    [ExtensionAttribute]
public static IAttributedText Optimize(IAttributedText attributedText);
    [ExtensionAttribute]
internal static List`1<IAttributedTextRun> OptimizeRuns(IAttributedText attributedText);
    [ExtensionAttribute]
public static IReadOnlyList`1<IAttributedText> CreateParagraphs(IAttributedText attributedText);
    [ExtensionAttribute]
public static int CreateParagraphRun(IAttributedText text, int start, int length, IList`1<IAttributedTextRun> runs, int startIndexForSearch);
    [ExtensionAttribute]
public static IList`1<AttributedTextBlock> CreateBlocks(IAttributedText text);
}
public class Microsoft.Maui.Graphics.Text.AttributedTextRun : object {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private ITextAttributes <Attributes>k__BackingField;
    public int Start { get; }
    public int Length { get; }
    public ITextAttributes Attributes { get; }
    public AttributedTextRun(int start, int length, ITextAttributes attributes);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Start();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Length();
    [CompilerGeneratedAttribute]
public sealed virtual ITextAttributes get_Attributes();
    public virtual string ToString();
}
public class Microsoft.Maui.Graphics.Text.AttributedTextRunComparer : object {
    public static AttributedTextRunComparer Instance;
    private static AttributedTextRunComparer();
    public sealed virtual int Compare(IAttributedTextRun first, IAttributedTextRun second);
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.Text.AttributedTextRunExtensions : object {
    [ExtensionAttribute]
public static int GetEnd(IAttributedTextRun run);
    [ExtensionAttribute]
public static bool Intersects(IAttributedTextRun first, IAttributedTextRun second);
    [ExtensionAttribute]
public static bool Intersects(IAttributedTextRun first, int start, int length);
    [ExtensionAttribute]
public static bool IntersectsExactly(IAttributedTextRun first, IAttributedTextRun second);
    [ExtensionAttribute]
public static bool IntersectsExactly(IAttributedTextRun first, int start, int length);
    [ExtensionAttribute]
public static IList`1<IAttributedTextRun> CalculatedIntersections(IAttributedTextRun first, IAttributedTextRun second);
    [ExtensionAttribute]
public static void Optimize(List`1<IAttributedTextRun> runs, int textLength);
}
public class Microsoft.Maui.Graphics.Text.CountingWriter : TextWriter {
    private TextWriter _writer;
    private int _count;
    public Encoding Encoding { get; }
    public int Count { get; }
    public CountingWriter(TextWriter writer);
    public virtual Encoding get_Encoding();
    public int get_Count();
    public virtual void Write(char value);
    public virtual string ToString();
}
public interface Microsoft.Maui.Graphics.Text.IAttributedText {
    public string Text { get; }
    public IReadOnlyList`1<IAttributedTextRun> Runs { get; }
    public abstract virtual string get_Text();
    public abstract virtual IReadOnlyList`1<IAttributedTextRun> get_Runs();
}
public interface Microsoft.Maui.Graphics.Text.IAttributedTextRun {
    public int Start { get; }
    public int Length { get; }
    public ITextAttributes Attributes { get; }
    public abstract virtual int get_Start();
    public abstract virtual int get_Length();
    public abstract virtual ITextAttributes get_Attributes();
}
public interface Microsoft.Maui.Graphics.Text.ITextAttributes {
}
public enum Microsoft.Maui.Graphics.Text.MarkerType : Enum {
    public int value__;
    public static MarkerType ClosedCircle;
    public static MarkerType OpenCircle;
    public static MarkerType Hyphen;
}
public class Microsoft.Maui.Graphics.Text.MutableAttributedText : AbstractAttributedText {
    private List`1<IAttributedTextRun> _runs;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; }
    public IReadOnlyList`1<IAttributedTextRun> Runs { get; }
    public MutableAttributedText(string text);
    [CompilerGeneratedAttribute]
public virtual string get_Text();
    public virtual IReadOnlyList`1<IAttributedTextRun> get_Runs();
    public void AddRun(IAttributedTextRun run);
}
public enum Microsoft.Maui.Graphics.Text.TextAttribute : Enum {
    public int value__;
    public static TextAttribute FontName;
    public static TextAttribute FontSize;
    public static TextAttribute Bold;
    public static TextAttribute Italic;
    public static TextAttribute Underline;
    public static TextAttribute Strikethrough;
    public static TextAttribute Subscript;
    public static TextAttribute Superscript;
    public static TextAttribute Color;
    public static TextAttribute Background;
    public static TextAttribute UnorderedList;
    public static TextAttribute Marker;
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.Text.TextAttributeExtensions : object {
    public static float DefaultFontSize;
    [ExtensionAttribute]
public static string GetFontName(ITextAttributes attributes);
    [ExtensionAttribute]
public static void SetFontName(Dictionary`2<TextAttribute, string> attributes, string value);
    [ExtensionAttribute]
public static float GetFontSize(ITextAttributes attributes, Nullable`1<float> fontSize);
    [ExtensionAttribute]
public static void SetFontSize(Dictionary`2<TextAttribute, string> attributes, float value);
    [ExtensionAttribute]
public static bool GetUnderline(ITextAttributes attributes);
    [ExtensionAttribute]
public static void SetUnderline(Dictionary`2<TextAttribute, string> attributes, bool value);
    [ExtensionAttribute]
public static bool GetBold(ITextAttributes attributes);
    [ExtensionAttribute]
public static void SetBold(Dictionary`2<TextAttribute, string> attributes, bool value);
    [ExtensionAttribute]
public static bool GetItalic(ITextAttributes attributes);
    [ExtensionAttribute]
public static void SetItalic(Dictionary`2<TextAttribute, string> attributes, bool value);
    [ExtensionAttribute]
public static bool GetUnorderedList(ITextAttributes attributes);
    [ExtensionAttribute]
public static void SetUnorderedList(Dictionary`2<TextAttribute, string> attributes, bool value);
    [ExtensionAttribute]
public static MarkerType GetMarker(ITextAttributes attributes);
    [ExtensionAttribute]
public static void SetMarker(Dictionary`2<TextAttribute, string> attributes, MarkerType value);
    [ExtensionAttribute]
public static bool GetStrikethrough(ITextAttributes attributes);
    [ExtensionAttribute]
public static void SetStrikethrough(Dictionary`2<TextAttribute, string> attributes, bool value);
    [ExtensionAttribute]
public static bool GetSuperscript(ITextAttributes attributes);
    [ExtensionAttribute]
public static void SetSuperscript(Dictionary`2<TextAttribute, string> attributes, bool value);
    [ExtensionAttribute]
public static bool GetSubscript(ITextAttributes attributes);
    [ExtensionAttribute]
public static void SetSubscript(Dictionary`2<TextAttribute, string> attributes, bool value);
    [ExtensionAttribute]
public static string GetForegroundColor(ITextAttributes attributes);
    [ExtensionAttribute]
public static void SetForegroundColor(Dictionary`2<TextAttribute, string> attributes, string value);
    [ExtensionAttribute]
public static string GetBackgroundColor(ITextAttributes attributes);
    [ExtensionAttribute]
public static void SetBackgroundColor(Dictionary`2<TextAttribute, string> attributes, string value);
    [ExtensionAttribute]
public static ITextAttributes Union(IReadOnlyDictionary`2<TextAttribute, string> first, IReadOnlyDictionary`2<TextAttribute, string> second);
}
public class Microsoft.Maui.Graphics.Text.TextAttributes : Dictionary`2<TextAttribute, string> {
    public TextAttributes(IDictionary`2<TextAttribute, string> dictionary);
    public TextAttributes(IReadOnlyDictionary`2<TextAttribute, string> first, IReadOnlyDictionary`2<TextAttribute, string> second);
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.Text.TextAttributesExtensions : object {
    [ExtensionAttribute]
public static string GetAttribute(ITextAttributes attributes, TextAttribute type, string defaultValue);
    [ExtensionAttribute]
public static void SetAttribute(Dictionary`2<TextAttribute, string> attributes, TextAttribute type, string value);
    [ExtensionAttribute]
public static void RemoveAttribute(Dictionary`2<TextAttribute, string> attributes, TextAttribute type);
    [ExtensionAttribute]
public static int GetIntAttribute(ITextAttributes attributes, TextAttribute type, int defaultValue);
    [ExtensionAttribute]
public static void SetIntAttribute(Dictionary`2<TextAttribute, string> attributes, TextAttribute type, int value, int defaultValue);
    [ExtensionAttribute]
public static float GetFloatAttribute(ITextAttributes attributes, TextAttribute type, float defaultValue);
    [ExtensionAttribute]
public static void SetFloatAttribute(Dictionary`2<TextAttribute, string> attributes, TextAttribute type, float value, float defaultValue);
    [ExtensionAttribute]
public static bool GetBoolAttribute(ITextAttributes attributes, TextAttribute type, bool defaultValue);
    [ExtensionAttribute]
public static void SetBoolAttribute(Dictionary`2<TextAttribute, string> attributes, TextAttribute type, bool value, bool defaultValue);
    [ExtensionAttribute]
public static T GetEnumAttribute(ITextAttributes attributes, TextAttribute type, T defaultValue);
    [ExtensionAttribute]
public static void SetEnumAttribute(Dictionary`2<TextAttribute, string> attributes, TextAttribute type, T value, T defaultValue);
}
[ExtensionAttribute]
public static class Microsoft.Maui.Graphics.Text.TextColors : object {
    public static Dictionary`2<string, string> StandardColors;
    private static TextColors();
    [ExtensionAttribute]
public static Single[] Parse(string color);
    [ExtensionAttribute]
public static Int32[] ParseAsInts(string color);
}
internal class Microsoft.Maui.Graphics.Text.XmlAttributedTextNames : object {
    public static string AttributedText;
    public static string Content;
    public static string Encoded;
    public static string Start;
    public static string Length;
    public static string Run;
}
public class Microsoft.Maui.Graphics.Text.XmlAttributedTextReader : object {
    private XmlReader _reader;
    private StringWriter _writer;
    private List`1<IAttributedTextRun> _runs;
    private bool _inContent;
    private bool _contentEncoded;
    public IAttributedText Read(string text);
    public IAttributedText Read(TextReader reader);
    protected void ElementStarted();
    protected void ElementEnded();
    private void HandleText();
    private void ReadRun();
    private bool ReadBool(string attribute);
    private bool ParseBool(string value);
    private int ReadInt(string attribute, int defaultValue);
    private int ParseInt(string value, int defaultValue);
}
public class Microsoft.Maui.Graphics.Text.XmlAttributedTextWriter : object {
    public string Write(IAttributedText text);
    public void Write(IAttributedText attributedText, TextWriter writer);
    private void WriteRun(IAttributedTextRun run, TextWriter writer);
    private void Write(ITextAttributes currentAttributes, TextAttribute key, string defaultValue, TextWriter writer);
    private void WriteAttribute(TextWriter writer, string attribute, string value);
}
public enum Microsoft.Maui.Graphics.TextFlow : Enum {
    public int value__;
    public static TextFlow ClipBounds;
    public static TextFlow OverflowBounds;
}
public enum Microsoft.Maui.Graphics.VerticalAlignment : Enum {
    public int value__;
    public static VerticalAlignment Top;
    public static VerticalAlignment Center;
    public static VerticalAlignment Bottom;
}
public enum Microsoft.Maui.Graphics.WindingMode : Enum {
    public int value__;
    public static WindingMode NonZero;
    public static WindingMode EvenOdd;
}
[AttributeUsageAttribute("1")]
[DebuggerDisplayAttribute("{XmlNamespace}, {ClrNamespace}")]
internal class Microsoft.Maui.Graphics.XmlnsDefinitionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <XmlNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClrNamespace>k__BackingField;
    public string XmlNamespace { get; }
    public string ClrNamespace { get; }
    public XmlnsDefinitionAttribute(string xmlNamespace, string clrNamespace);
    [CompilerGeneratedAttribute]
public string get_XmlNamespace();
    [CompilerGeneratedAttribute]
public string get_ClrNamespace();
}
[AttributeUsageAttribute("1")]
public class Microsoft.Maui.Graphics.XmlnsPrefixAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <XmlNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string XmlNamespace { get; }
    public string Prefix { get; }
    public XmlnsPrefixAttribute(string xmlNamespace, string prefix);
    [CompilerGeneratedAttribute]
public string get_XmlNamespace();
    [CompilerGeneratedAttribute]
public string get_Prefix();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
