[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.ML.LightGbmExtensions : object {
    [ExtensionAttribute]
public static LightGbmRegressionTrainer LightGbm(RegressionTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, Nullable`1<int> numberOfLeaves, Nullable`1<int> minimumExampleCountPerLeaf, Nullable`1<double> learningRate, int numberOfIterations);
    [ExtensionAttribute]
public static LightGbmRegressionTrainer LightGbm(RegressionTrainers catalog, Options options);
    [ExtensionAttribute]
public static LightGbmRegressionTrainer LightGbm(RegressionTrainers catalog, Stream lightGbmModel, string featureColumnName);
    [ExtensionAttribute]
public static LightGbmBinaryTrainer LightGbm(BinaryClassificationTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, Nullable`1<int> numberOfLeaves, Nullable`1<int> minimumExampleCountPerLeaf, Nullable`1<double> learningRate, int numberOfIterations);
    [ExtensionAttribute]
public static LightGbmBinaryTrainer LightGbm(BinaryClassificationTrainers catalog, Options options);
    [ExtensionAttribute]
public static LightGbmBinaryTrainer LightGbm(BinaryClassificationTrainers catalog, Stream lightGbmModel, string featureColumnName);
    [ExtensionAttribute]
public static LightGbmRankingTrainer LightGbm(RankingTrainers catalog, string labelColumnName, string featureColumnName, string rowGroupColumnName, string exampleWeightColumnName, Nullable`1<int> numberOfLeaves, Nullable`1<int> minimumExampleCountPerLeaf, Nullable`1<double> learningRate, int numberOfIterations);
    [ExtensionAttribute]
public static LightGbmRankingTrainer LightGbm(RankingTrainers catalog, Options options);
    [ExtensionAttribute]
public static LightGbmRankingTrainer LightGbm(RankingTrainers catalog, Stream lightGbmModel, string featureColumnName);
    [ExtensionAttribute]
public static LightGbmMulticlassTrainer LightGbm(MulticlassClassificationTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, Nullable`1<int> numberOfLeaves, Nullable`1<int> minimumExampleCountPerLeaf, Nullable`1<double> learningRate, int numberOfIterations);
    [ExtensionAttribute]
public static LightGbmMulticlassTrainer LightGbm(MulticlassClassificationTrainers catalog, Options options);
    [ExtensionAttribute]
public static LightGbmMulticlassTrainer LightGbm(MulticlassClassificationTrainers catalog, Stream lightGbmModel, string featureColumnName);
}
internal class Microsoft.ML.Trainers.LightGbm.AllgatherFunction : MulticastDelegate {
    public AllgatherFunction(object object, IntPtr method);
    public virtual void Invoke(Byte[] input, int inputSize, Int32[] blockStart, Int32[] blockLen, int numBlock, Byte[] output, int outputSize);
    public virtual IAsyncResult BeginInvoke(Byte[] input, int inputSize, Int32[] blockStart, Int32[] blockLen, int numBlock, Byte[] output, int outputSize, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.ML.Trainers.LightGbm.Booster : object {
    private bool _hasValid;
    private bool _hasMetric;
    [CompilerGeneratedAttribute]
private SafeBoosterHandle <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BestIteration>k__BackingField;
    public SafeBoosterHandle Handle { get; private set; }
    public int BestIteration { get; public set; }
    public Booster(Dictionary`2<string, object> parameters, Dataset trainset, Dataset validset);
    [CompilerGeneratedAttribute]
public SafeBoosterHandle get_Handle();
    [CompilerGeneratedAttribute]
private void set_Handle(SafeBoosterHandle value);
    [CompilerGeneratedAttribute]
public int get_BestIteration();
    [CompilerGeneratedAttribute]
public void set_BestIteration(int value);
    public bool Update();
    public double EvalTrain();
    public double EvalValid();
    private double Eval(int dataIdx);
    [BestFriendAttribute]
internal string GetModelString();
    private static Double[] Str2DoubleArray(string str, char delimiter);
    private static Int32[] Str2IntArray(string str, char delimiter);
    private static UInt32[] Str2UIntArray(string str, char delimiter);
    private static bool GetIsDefaultLeft(UInt32 decisionType);
    private static bool GetIsCategoricalSplit(UInt32 decisionType);
    private static bool GetHasMissing(UInt32 decisionType);
    private static Double[] GetDefalutValue(Double[] threshold, UInt32[] decisionType);
    private static bool FindInBitset(UInt32[] bits, int start, int end, int pos);
    private static Int32[] GetCatThresholds(UInt32[] catThreshold, int lowerBound, int upperBound);
    public static int GetNumFeatures(string modelString);
    public static Dictionary`2<string, string> GetParameters(string modelString);
    public static InternalTreeEnsemble GetModel(Int32[] categoricalFeatureBoundaries, string modelString);
    public sealed virtual void Dispose();
}
public abstract class Microsoft.ML.Trainers.LightGbm.BoosterParameterBase : object {
    private protected static Dictionary`2<string, string> NameMapping;
    private protected OptionsBase BoosterOptions;
    internal string BoosterName { get; }
    public BoosterParameterBase(OptionsBase options);
    private static BoosterParameterBase();
    internal void UpdateParameters(Dictionary`2<string, object> res);
    internal abstract virtual IBoosterParameterFactory BuildFactory();
    internal abstract virtual string get_BoosterName();
}
public class Microsoft.ML.Trainers.LightGbm.DartBooster : BoosterParameterBase {
    internal static string Name;
    internal static string FriendlyName;
    internal string BoosterName { get; }
    internal DartBooster(Options options);
    internal virtual IBoosterParameterFactory BuildFactory();
    internal virtual string get_BoosterName();
}
internal class Microsoft.ML.Trainers.LightGbm.Dataset : object {
    private SafeDataSetHandle _handle;
    private int _lastPushedRowID;
    public SafeDataSetHandle Handle { get; }
    public Dataset(Double[][] sampleValuePerColumn, Int32[][] sampleIndicesPerColumn, int numCol, Int32[] sampleNonZeroCntPerColumn, int numSampleRow, int numTotalRow, string param, Single[] labels, Single[] weights, Int32[] groups);
    public Dataset(Dataset reference, int numTotalRow, Single[] labels, Single[] weights, Int32[] groups);
    public SafeDataSetHandle get_Handle();
    public sealed virtual void Dispose();
    public void PushRows(Single[] data, int numRow, int numCol, int startRowIdx);
    public void PushRows(Int32[] indPtr, Int32[] indices, Single[] data, int nIndptr, long numElem, int numCol, int startRowIdx);
    public int GetNumRows();
    public int GetNumCols();
    public void SetLabel(Single[] labels);
    public void SetWeights(Single[] weights);
    public void SetGroup(Int32[] groups);
    public void SetInitScore(Double[] initScores);
}
[BestFriendAttribute]
internal static class Microsoft.ML.Trainers.LightGbm.Defaults : object {
    public static int NumberOfIterations;
}
public class Microsoft.ML.Trainers.LightGbm.GossBooster : BoosterParameterBase {
    internal static string Name;
    internal static string FriendlyName;
    internal string BoosterName { get; }
    internal GossBooster(Options options);
    internal virtual IBoosterParameterFactory BuildFactory();
    internal virtual string get_BoosterName();
}
public class Microsoft.ML.Trainers.LightGbm.GradientBooster : BoosterParameterBase {
    internal static string Name;
    internal static string FriendlyName;
    internal string BoosterName { get; }
    internal GradientBooster(Options options);
    internal virtual IBoosterParameterFactory BuildFactory();
    internal virtual string get_BoosterName();
}
[ComponentKindAttribute("BoosterParameterFunction")]
internal interface Microsoft.ML.Trainers.LightGbm.IBoosterParameterFactory {
    public abstract virtual BoosterParameterBase CreateComponent(IHostEnvironment env);
}
internal interface Microsoft.ML.Trainers.LightGbm.IParallel {
    public abstract virtual string ParallelType();
    public abstract virtual int NumMachines();
    public abstract virtual int Rank();
    public abstract virtual ReduceScatterFunction GetReduceScatterFunction();
    public abstract virtual AllgatherFunction GetAllgatherFunction();
    public abstract virtual Dictionary`2<string, string> AdditionalParams();
}
[ComponentKindAttribute("ParallelLightGBM")]
internal interface Microsoft.ML.Trainers.LightGbm.ISupportParallel {
}
internal static class Microsoft.ML.Trainers.LightGbm.LightGbm : object {
    [EntryPointAttribute]
public static BinaryClassificationOutput TrainBinary(IHostEnvironment env, Options input);
    [EntryPointAttribute]
public static MulticlassClassificationOutput TrainMulticlass(IHostEnvironment env, Options input);
    [EntryPointAttribute]
public static RankingOutput TrainRanking(IHostEnvironment env, Options input);
    [EntryPointAttribute]
public static RegressionOutput TrainRegression(IHostEnvironment env, Options input);
}
public class Microsoft.ML.Trainers.LightGbm.LightGbmBinaryModelParameters : TreeEnsembleModelParametersBasedOnRegressionTree {
    internal static string LoaderSignature;
    internal static string RegistrationName;
    private protected UInt32 VerNumFeaturesSerialized { get; }
    private protected UInt32 VerDefaultValueSerialized { get; }
    private protected UInt32 VerCategoricalSplitSerialized { get; }
    private protected PredictionKind PredictionKind { get; }
    internal LightGbmBinaryModelParameters(IHostEnvironment env, InternalTreeEnsemble trainedEnsemble, int featureCount, string innerArgs);
    private LightGbmBinaryModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    private protected virtual UInt32 get_VerNumFeaturesSerialized();
    private protected virtual UInt32 get_VerDefaultValueSerialized();
    private protected virtual UInt32 get_VerCategoricalSplitSerialized();
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual void SaveCore(ModelSaveContext ctx);
    internal static IPredictorProducing`1<float> Create(IHostEnvironment env, ModelLoadContext ctx);
}
public class Microsoft.ML.Trainers.LightGbm.LightGbmBinaryTrainer : LightGbmTrainerBase`4<Options, float, BinaryPredictionTransformer`1<CalibratedModelParametersBase`2<LightGbmBinaryModelParameters, PlattCalibrator>>, CalibratedModelParametersBase`2<LightGbmBinaryModelParameters, PlattCalibrator>> {
    internal static string UserName;
    internal static string LoadNameValue;
    internal static string ShortName;
    internal static string Summary;
    private protected PredictionKind PredictionKind { get; }
    internal LightGbmBinaryTrainer(IHostEnvironment env, Options options);
    internal LightGbmBinaryTrainer(IHostEnvironment env, string labelColumnName, string featureColumnName, string exampleWeightColumnName, Nullable`1<int> numberOfLeaves, Nullable`1<int> minimumExampleCountPerLeaf, Nullable`1<double> learningRate, int numberOfIterations);
    internal LightGbmBinaryTrainer(IHostEnvironment env, Stream lightGbmModel, string featureColumnName);
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual CalibratedModelParametersBase`2<LightGbmBinaryModelParameters, PlattCalibrator> CreatePredictor();
    private protected virtual void CheckDataValid(IChannel ch, RoleMappedData data);
    private protected virtual void CheckAndUpdateParametersBeforeTraining(IChannel ch, RoleMappedData data, Single[] labels, Int32[] groups);
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual BinaryPredictionTransformer`1<CalibratedModelParametersBase`2<LightGbmBinaryModelParameters, PlattCalibrator>> MakeTransformer(CalibratedModelParametersBase`2<LightGbmBinaryModelParameters, PlattCalibrator> model, DataViewSchema trainSchema);
    public BinaryPredictionTransformer`1<CalibratedModelParametersBase`2<LightGbmBinaryModelParameters, PlattCalibrator>> Fit(IDataView trainData, IDataView validationData);
}
internal static class Microsoft.ML.Trainers.LightGbm.LightGbmInterfaceUtils : object {
    public static void Check(int res);
    public static string JoinParameters(Dictionary`2<string, object> parameters);
    public static string GetOptionName(string name);
    public static string GetString(IntPtr src);
}
public class Microsoft.ML.Trainers.LightGbm.LightGbmMulticlassTrainer : LightGbmTrainerBase`4<Options, VBuffer`1<float>, MulticlassPredictionTransformer`1<OneVersusAllModelParameters>, OneVersusAllModelParameters> {
    internal static string Summary;
    internal static string LoadNameValue;
    internal static string ShortName;
    private static int _minDataToUseSoftmax;
    private static double _maxNumClass;
    private int _numberOfClassesIncludingNan;
    private int _numberOfClasses;
    private protected PredictionKind PredictionKind { get; }
    internal LightGbmMulticlassTrainer(IHostEnvironment env, Options options);
    internal LightGbmMulticlassTrainer(IHostEnvironment env, string labelColumnName, string featureColumnName, string exampleWeightColumnName, Nullable`1<int> numberOfLeaves, Nullable`1<int> minimumExampleCountPerLeaf, Nullable`1<double> learningRate, int numberOfIterations);
    internal LightGbmMulticlassTrainer(IHostEnvironment env, Stream lightGbmModel, string featureColumnName);
    private protected virtual PredictionKind get_PredictionKind();
    private InternalTreeEnsemble GetBinaryEnsemble(int classID);
    private LightGbmBinaryModelParameters CreateBinaryPredictor(int classID, string innerArgs);
    private protected virtual OneVersusAllModelParameters CreatePredictor();
    private protected virtual void CheckDataValid(IChannel ch, RoleMappedData data);
    private protected virtual void InitializeBeforeTraining();
    private protected virtual void AdditionalLoadPreTrainedModel(string modelText);
    private protected virtual void ConvertNaNLabels(IChannel ch, RoleMappedData data, Single[] labels);
    private protected virtual void GetDefaultParameters(IChannel ch, int numRow, bool hasCategorical, int totalCats, bool hiddenMsg);
    private protected virtual void CheckAndUpdateParametersBeforeTraining(IChannel ch, RoleMappedData data, Single[] labels, Int32[] groups);
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual MulticlassPredictionTransformer`1<OneVersusAllModelParameters> MakeTransformer(OneVersusAllModelParameters model, DataViewSchema trainSchema);
    public MulticlassPredictionTransformer`1<OneVersusAllModelParameters> Fit(IDataView trainData, IDataView validationData);
}
public class Microsoft.ML.Trainers.LightGbm.LightGbmRankingModelParameters : TreeEnsembleModelParametersBasedOnRegressionTree {
    internal static string LoaderSignature;
    internal static string RegistrationName;
    private protected UInt32 VerNumFeaturesSerialized { get; }
    private protected UInt32 VerDefaultValueSerialized { get; }
    private protected UInt32 VerCategoricalSplitSerialized { get; }
    private protected PredictionKind PredictionKind { get; }
    internal LightGbmRankingModelParameters(IHostEnvironment env, InternalTreeEnsemble trainedEnsemble, int featureCount, string innerArgs);
    private LightGbmRankingModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    private protected virtual UInt32 get_VerNumFeaturesSerialized();
    private protected virtual UInt32 get_VerDefaultValueSerialized();
    private protected virtual UInt32 get_VerCategoricalSplitSerialized();
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual void SaveCore(ModelSaveContext ctx);
    internal static LightGbmRankingModelParameters Create(IHostEnvironment env, ModelLoadContext ctx);
}
public class Microsoft.ML.Trainers.LightGbm.LightGbmRankingTrainer : LightGbmTrainerBase`4<Options, float, RankingPredictionTransformer`1<LightGbmRankingModelParameters>, LightGbmRankingModelParameters> {
    internal static string UserName;
    internal static string LoadNameValue;
    internal static string ShortName;
    private protected PredictionKind PredictionKind { get; }
    internal LightGbmRankingTrainer(IHostEnvironment env, Options options);
    internal LightGbmRankingTrainer(IHostEnvironment env, string labelColumnName, string featureColumnName, string rowGroupIdColumnName, string weightsColumnName, Nullable`1<int> numberOfLeaves, Nullable`1<int> minimumExampleCountPerLeaf, Nullable`1<double> learningRate, int numberOfIterations);
    internal LightGbmRankingTrainer(IHostEnvironment env, Stream lightGbmModel, string featureColumnName);
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual void CheckDataValid(IChannel ch, RoleMappedData data);
    private protected virtual void CheckLabelCompatible(Column labelCol);
    private protected virtual LightGbmRankingModelParameters CreatePredictor();
    private protected virtual void CheckAndUpdateParametersBeforeTraining(IChannel ch, RoleMappedData data, Single[] labels, Int32[] groups);
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual RankingPredictionTransformer`1<LightGbmRankingModelParameters> MakeTransformer(LightGbmRankingModelParameters model, DataViewSchema trainSchema);
    public RankingPredictionTransformer`1<LightGbmRankingModelParameters> Fit(IDataView trainData, IDataView validationData);
}
public class Microsoft.ML.Trainers.LightGbm.LightGbmRegressionModelParameters : TreeEnsembleModelParametersBasedOnRegressionTree {
    internal static string LoaderSignature;
    internal static string RegistrationName;
    private protected UInt32 VerNumFeaturesSerialized { get; }
    private protected UInt32 VerDefaultValueSerialized { get; }
    private protected UInt32 VerCategoricalSplitSerialized { get; }
    private protected PredictionKind PredictionKind { get; }
    internal LightGbmRegressionModelParameters(IHostEnvironment env, InternalTreeEnsemble trainedEnsemble, int featureCount, string innerArgs);
    private LightGbmRegressionModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    private protected virtual UInt32 get_VerNumFeaturesSerialized();
    private protected virtual UInt32 get_VerDefaultValueSerialized();
    private protected virtual UInt32 get_VerCategoricalSplitSerialized();
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual void SaveCore(ModelSaveContext ctx);
    internal static LightGbmRegressionModelParameters Create(IHostEnvironment env, ModelLoadContext ctx);
}
public class Microsoft.ML.Trainers.LightGbm.LightGbmRegressionTrainer : LightGbmTrainerBase`4<Options, float, RegressionPredictionTransformer`1<LightGbmRegressionModelParameters>, LightGbmRegressionModelParameters> {
    internal static string Summary;
    internal static string LoadNameValue;
    internal static string ShortName;
    internal static string UserNameValue;
    private protected PredictionKind PredictionKind { get; }
    internal LightGbmRegressionTrainer(IHostEnvironment env, string labelColumnName, string featureColumnName, string exampleWeightColumnName, Nullable`1<int> numberOfLeaves, Nullable`1<int> minimumExampleCountPerLeaf, Nullable`1<double> learningRate, int numberOfIterations);
    internal LightGbmRegressionTrainer(IHostEnvironment env, Options options);
    internal LightGbmRegressionTrainer(IHostEnvironment env, Stream lightGbmModel, string featureColumnName);
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual LightGbmRegressionModelParameters CreatePredictor();
    private protected virtual void CheckDataValid(IChannel ch, RoleMappedData data);
    private protected virtual void CheckAndUpdateParametersBeforeTraining(IChannel ch, RoleMappedData data, Single[] labels, Int32[] groups);
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual RegressionPredictionTransformer`1<LightGbmRegressionModelParameters> MakeTransformer(LightGbmRegressionModelParameters model, DataViewSchema trainSchema);
    public RegressionPredictionTransformer`1<LightGbmRegressionModelParameters> Fit(IDataView trainData, IDataView validationData);
}
internal static class Microsoft.ML.Trainers.LightGbm.LightGbmShared : object {
    public static object LockForMultiThreadingInside;
    public static object SampleLock;
    private static LightGbmShared();
}
public abstract class Microsoft.ML.Trainers.LightGbm.LightGbmTrainerBase`4 : TrainerEstimatorBaseWithGroupId`2<TTransformer, TModel> {
    private protected TOptions LightGbmTrainerOptions;
    private protected Dictionary`2<string, object> GbmOptions;
    private protected IParallel ParallelTraining;
    private protected int FeatureCount;
    private protected InternalTreeEnsemble TrainedEnsemble;
    private static TrainerInfo _info;
    public TrainerInfo Info { get; }
    private protected LightGbmTrainerBase`4(IHostEnvironment env, string name, Column labelColumn, string featureColumnName, string exampleWeightColumnName, string rowGroupColumnName, Nullable`1<int> numberOfLeaves, Nullable`1<int> minimumExampleCountPerLeaf, Nullable`1<double> learningRate, int numberOfIterations);
    private protected LightGbmTrainerBase`4(IHostEnvironment env, string name, TOptions options, Column label);
    private static LightGbmTrainerBase`4();
    public virtual TrainerInfo get_Info();
    private protected virtual TModel TrainModelCore(TrainContext context);
    private protected virtual void InitializeBeforeTraining();
    private protected virtual void AdditionalLoadPreTrainedModel(string modelText);
    private void InitParallelTraining();
    private void DisposeParallelTraining();
    private protected virtual void CheckDataValid(IChannel ch, RoleMappedData data);
    private protected virtual void GetDefaultParameters(IChannel ch, int numRow, bool hasCategorical, int totalCats, bool hiddenMsg);
    [BestFriendAttribute]
internal Dictionary`2<string, object> GetGbmParameters();
    private Factory CreateCursorFactory(RoleMappedData data);
    private static List`1<int> GetCategoricalBoundires(Int32[] categoricalFeatures, int rawNumCol);
    private static List`1<string> ConstructCategoricalFeatureMetaData(Int32[] categoricalFeatures, int rawNumCol, CategoricalMetaData& catMetaData);
    private CategoricalMetaData<TOptions, TOutput, TTransformer, TModel> GetCategoricalMetaData(IChannel ch, RoleMappedData trainData, int numRow);
    private Dataset LoadTrainingData(IChannel ch, RoleMappedData trainData, CategoricalMetaData& catMetaData);
    private Dataset LoadValidationData(IChannel ch, Dataset dtrain, RoleMappedData validData, CategoricalMetaData<TOptions, TOutput, TTransformer, TModel> catMetaData);
    private void TrainCore(IChannel ch, IProgressChannel pch, Dataset dtrain, CategoricalMetaData<TOptions, TOutput, TTransformer, TModel> catMetaData, Dataset dvalid);
    private static double DetectDensity(Factory factory, int numRows);
    private void GetMetainfo(IChannel ch, Factory factory, Int32& numRow, Single[]& labels, Single[]& weights, Int32[]& groups);
    private protected virtual void ConvertNaNLabels(IChannel ch, RoleMappedData data, Single[] labels);
    private static bool MoveMany(FloatLabelCursor cursor, long count);
    private void GetFeatureValueDense(IChannel ch, FloatLabelCursor cursor, CategoricalMetaData<TOptions, TOutput, TTransformer, TModel> catMetaData, Random rand, ReadOnlySpan`1& featureValues);
    private void GetFeatureValueSparse(IChannel ch, FloatLabelCursor cursor, CategoricalMetaData<TOptions, TOutput, TTransformer, TModel> catMetaData, Random rand, ReadOnlySpan`1& indices, ReadOnlySpan`1& featureValues, Int32& cnt);
    private void CreateDatasetFromSamplingData(IChannel ch, Factory factory, int numRow, string param, Single[] labels, Single[] weights, Int32[] groups, CategoricalMetaData<TOptions, TOutput, TTransformer, TModel> catMetaData, Dataset& dataset);
    private void LoadDataset(IChannel ch, Factory factory, Dataset dataset, int numRow, int batchSize, CategoricalMetaData<TOptions, TOutput, TTransformer, TModel> catMetaData);
    private void CopyToArray(IChannel ch, FloatLabelCursor cursor, Single[] features, CategoricalMetaData<TOptions, TOutput, TTransformer, TModel> catMetaData, Random rand, Int32& numElem);
    private void CopyToCsr(IChannel ch, FloatLabelCursor cursor, Int32[] indices, Single[] features, CategoricalMetaData<TOptions, TOutput, TTransformer, TModel> catMetaData, Random rand, Int32& numElem);
    private static double DefaultLearningRate(int numRow, bool useCat, int totalCats);
    private static int DefaultNumLeaves(int numRow, bool useCat, int totalCats);
    private protected static int DefaultMinDataPerLeaf(int numRow, int numberOfLeaves, int numClass);
    private static int GetNumSampleRow(int numRow, int numCol);
    private protected abstract virtual TModel CreatePredictor();
    private protected abstract virtual void CheckAndUpdateParametersBeforeTraining(IChannel ch, RoleMappedData data, Single[] labels, Int32[] groups);
}
internal class Microsoft.ML.Trainers.LightGbm.ReduceFunction : MulticastDelegate {
    public ReduceFunction(object object, IntPtr method);
    public virtual void Invoke(Byte* src, Byte* output, int typeSize, int arraySize);
    public virtual IAsyncResult BeginInvoke(Byte* src, Byte* output, int typeSize, int arraySize, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.ML.Trainers.LightGbm.ReduceScatterFunction : MulticastDelegate {
    public ReduceScatterFunction(object object, IntPtr method);
    public virtual void Invoke(Byte[] input, int inputSize, int typeSize, Int32[] blockStart, Int32[] blockLen, int numBlock, Byte[] output, int outputSize, IntPtr reducer);
    public virtual IAsyncResult BeginInvoke(Byte[] input, int inputSize, int typeSize, Int32[] blockStart, Int32[] blockLen, int numBlock, Byte[] output, int outputSize, IntPtr reducer, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.ML.Trainers.LightGbm.SignatureLightGBMBooster : MulticastDelegate {
    public SignatureLightGBMBooster(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.ML.Trainers.LightGbm.SignatureParallelTrainer : MulticastDelegate {
    public SignatureParallelTrainer(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.ML.Trainers.LightGbm.SingleTrainer : object {
    private sealed virtual override AllgatherFunction Microsoft.ML.Trainers.LightGbm.IParallel.GetAllgatherFunction();
    private sealed virtual override ReduceScatterFunction Microsoft.ML.Trainers.LightGbm.IParallel.GetReduceScatterFunction();
    private sealed virtual override int Microsoft.ML.Trainers.LightGbm.IParallel.NumMachines();
    private sealed virtual override string Microsoft.ML.Trainers.LightGbm.IParallel.ParallelType();
    private sealed virtual override int Microsoft.ML.Trainers.LightGbm.IParallel.Rank();
    private sealed virtual override Dictionary`2<string, string> Microsoft.ML.Trainers.LightGbm.IParallel.AdditionalParams();
}
[ComponentAttribute]
internal class Microsoft.ML.Trainers.LightGbm.SingleTrainerFactory : object {
    public sealed virtual IParallel CreateComponent(IHostEnvironment env);
}
internal static class Microsoft.ML.Trainers.LightGbm.WrappedLightGbmInterface : object {
    private static string DllName;
    public static int AllocateArray(long len, int type, IntPtr& ret);
    public static int CopyToArray(IntPtr arr, int type, long startIdx, IntPtr src, long len);
    public static int FreeArray(IntPtr ret, int type);
    public static IntPtr GetLastError();
    public static int DatasetCreateFromSampledColumn(IntPtr sampleValuePerColumn, IntPtr sampleIndicesPerColumn, int numCol, Int32[] sampleNonZeroCntPerColumn, int numSampleRow, int numTotalRow, string parameters, SafeDataSetHandle& ret);
    public static int DatasetCreateByReference(SafeDataSetHandle reference, long numRow, SafeDataSetHandle& ret);
    private static int DatasetPushRows(SafeDataSetHandle dataset, Single[] data, CApiDType dataType, int numRow, int numCol, int startRowIdx);
    public static int DatasetPushRows(SafeDataSetHandle dataset, Single[] data, int numRow, int numCol, int startRowIdx);
    private static int DatasetPushRowsByCsr(SafeDataSetHandle dataset, Int32[] indPtr, CApiDType indPtrType, Int32[] indices, Single[] data, CApiDType dataType, long nIndPtr, long numElem, long numCol, long startRowIdx);
    public static int DatasetPushRowsByCsr(SafeDataSetHandle dataset, Int32[] indPtr, Int32[] indices, Single[] data, long nIndPtr, long numElem, long numCol, long startRowIdx);
    private static int DatasetFree(IntPtr handle);
    public static int DatasetSetField(SafeDataSetHandle handle, string field, IntPtr array, int len, CApiDType type);
    public static int DatasetGetNumData(SafeDataSetHandle handle, Int32& res);
    public static int DatasetGetNumFeature(SafeDataSetHandle handle, Int32& res);
    public static int BoosterCreate(SafeDataSetHandle trainset, string param, SafeBoosterHandle& res);
    private static int BoosterFree(IntPtr handle);
    public static int BoosterAddValidData(SafeBoosterHandle handle, SafeDataSetHandle validset);
    public static int BoosterSaveModelToString(SafeBoosterHandle handle, int startIteration, int numIteration, int featureImportanceType, int bufferLen, Int32& outLen, Byte* outStr);
    public static int BoosterUpdateOneIter(SafeBoosterHandle handle, Int32& isFinished);
    public static int BoosterGetEvalCounts(SafeBoosterHandle handle, Int32& outLen);
    public static int BoosterGetEval(SafeBoosterHandle handle, int dataIdx, Int32& outLen, Double* outResult);
    public static int BoosterPredictForMat(SafeBoosterHandle handle, IntPtr data, CApiDType dataType, int nRow, int nCol, int isRowMajor, int predictType, int startIteration, int numIteration, string parameters, Int32& outLen, Double* outResult);
    public static int NetworkInitWithFunctions(int numMachines, int rank, ReduceScatterFunction reduceScatterFuncPtr, AllgatherFunction allgatherFuncPtr);
    public static int NetworkFree();
}
internal static class Microsoft.ML.Trainers.LightGbm.WrappedLightGbmTraining : object {
    public static Booster Train(IHost host, IChannel ch, IProgressChannel pch, Dictionary`2<string, object> parameters, Dataset dtrain, Dataset dvalid, int numIteration, bool verboseEval, int earlyStoppingRound);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
