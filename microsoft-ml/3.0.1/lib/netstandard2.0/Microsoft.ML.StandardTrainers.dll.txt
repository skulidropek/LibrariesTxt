[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.ML.FactorizationMachineExtensions : object {
    [ExtensionAttribute]
public static FieldAwareFactorizationMachineTrainer FieldAwareFactorizationMachine(BinaryClassificationTrainers catalog, string featureColumnName, string labelColumnName, string exampleWeightColumnName);
    [ExtensionAttribute]
public static FieldAwareFactorizationMachineTrainer FieldAwareFactorizationMachine(BinaryClassificationTrainers catalog, String[] featureColumnNames, string labelColumnName, string exampleWeightColumnName);
    [ExtensionAttribute]
public static FieldAwareFactorizationMachineTrainer FieldAwareFactorizationMachine(BinaryClassificationTrainers catalog, Options options);
}
internal class Microsoft.ML.Numeric.BacktrackingLineSearch : object {
    private float _step;
    private float _c1;
    public BacktrackingLineSearch(float c1);
    public sealed virtual float Minimize(DiffFunc1D f, float initVal, float initDeriv);
}
internal class Microsoft.ML.Numeric.CubicInterpLineSearch : object {
    private float _step;
    private static float _minProgress;
    [CompilerGeneratedAttribute]
private int <MaxNumSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MinWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MaxStep>k__BackingField;
    public int MaxNumSteps { get; public set; }
    public float MinWindow { get; public set; }
    public float MaxStep { get; public set; }
    public CubicInterpLineSearch(int maxNumSteps);
    public CubicInterpLineSearch(float minWindow);
    [CompilerGeneratedAttribute]
public int get_MaxNumSteps();
    [CompilerGeneratedAttribute]
public void set_MaxNumSteps(int value);
    [CompilerGeneratedAttribute]
public float get_MinWindow();
    [CompilerGeneratedAttribute]
public void set_MinWindow(float value);
    [CompilerGeneratedAttribute]
public float get_MaxStep();
    [CompilerGeneratedAttribute]
public void set_MaxStep(float value);
    private static float CubicInterp(StepValueDeriv a, StepValueDeriv b);
    private static void Swap(T& a, T& b);
    public sealed virtual float Minimize(DiffFunc1D func, float initValue, float initDeriv);
    private float FindMinimum(DiffFunc1D func, float initValue, float initDeriv);
}
internal class Microsoft.ML.Numeric.DifferentiableFunction : MulticastDelegate {
    public DifferentiableFunction(object object, IntPtr method);
    public virtual float Invoke(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) input, VBuffer`1& gradient, IProgressChannelProvider progress);
    public virtual IAsyncResult BeginInvoke(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) input, VBuffer`1& gradient, IProgressChannelProvider progress, AsyncCallback callback, object object);
    public virtual float EndInvoke(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) input, VBuffer`1& gradient, IAsyncResult result);
}
internal class Microsoft.ML.Numeric.DifferentiableFunctionAggregator : object {
    private IndexedDifferentiableFunction _func;
    private int _maxIndex;
    private int _threads;
    private int _dim;
    private VBuffer`1[] _tempGrads;
    private VBuffer`1<float> _input;
    private Single[] _tempVals;
    private AutoResetEvent[] _threadFinished;
    public DifferentiableFunctionAggregator(IndexedDifferentiableFunction func, int dim, int maxIndex, int threads);
    private void Eval(object chunkIndexObj);
    public float Eval(VBuffer`1& input, VBuffer`1& gradient);
}
internal class Microsoft.ML.Numeric.DiffFunc1D : MulticastDelegate {
    public DiffFunc1D(object object, IntPtr method);
    public virtual float Invoke(float x, Single& deriv);
    public virtual IAsyncResult BeginInvoke(float x, Single& deriv, AsyncCallback callback, object object);
    public virtual float EndInvoke(Single& deriv, IAsyncResult result);
}
internal class Microsoft.ML.Numeric.DTerminate : MulticastDelegate {
    public DTerminate(object object, IntPtr method);
    public virtual bool Invoke(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) x);
    public virtual IAsyncResult BeginInvoke(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) x, AsyncCallback callback, object object);
    public virtual bool EndInvoke(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) x, IAsyncResult result);
}
internal class Microsoft.ML.Numeric.GDOptimizer : object {
    [CompilerGeneratedAttribute]
private IDiffLineSearch <LineSearch>k__BackingField;
    private int _maxSteps;
    [CompilerGeneratedAttribute]
private DTerminate <Terminate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCG>k__BackingField;
    public IDiffLineSearch LineSearch { get; public set; }
    public int MaxSteps { get; public set; }
    public DTerminate Terminate { get; public set; }
    public bool UseCG { get; public set; }
    public GDOptimizer(DTerminate terminate, IDiffLineSearch lineSearch, bool useCG, int maxSteps);
    [CompilerGeneratedAttribute]
public IDiffLineSearch get_LineSearch();
    [CompilerGeneratedAttribute]
public void set_LineSearch(IDiffLineSearch value);
    public int get_MaxSteps();
    public void set_MaxSteps(int value);
    [CompilerGeneratedAttribute]
public DTerminate get_Terminate();
    [CompilerGeneratedAttribute]
public void set_Terminate(DTerminate value);
    [CompilerGeneratedAttribute]
public bool get_UseCG();
    [CompilerGeneratedAttribute]
public void set_UseCG(bool value);
    public void Minimize(DifferentiableFunction function, VBuffer`1& initial, VBuffer`1& result);
}
internal class Microsoft.ML.Numeric.GoldenSectionSearch : object {
    private float _step;
    private static float _phi;
    [CompilerGeneratedAttribute]
private int <MaxNumSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MinWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MaxStep>k__BackingField;
    public int MaxNumSteps { get; public set; }
    public float MinWindow { get; public set; }
    public float MaxStep { get; public set; }
    public GoldenSectionSearch(int maxNumSteps);
    public GoldenSectionSearch(float minWindow);
    private static GoldenSectionSearch();
    [CompilerGeneratedAttribute]
public int get_MaxNumSteps();
    [CompilerGeneratedAttribute]
public void set_MaxNumSteps(int value);
    [CompilerGeneratedAttribute]
public float get_MinWindow();
    [CompilerGeneratedAttribute]
public void set_MinWindow(float value);
    [CompilerGeneratedAttribute]
public float get_MaxStep();
    [CompilerGeneratedAttribute]
public void set_MaxStep(float value);
    private static void Rotate(T& a, T& b, T& c);
    public sealed virtual float Minimize(DiffFunc1D f, float initVal, float initDeriv);
    public float Minimize(DiffFunc1D func);
    public sealed virtual float Minimize(Func`2<float, float> func);
    private float FindMinimum(Func`2<float, float> func);
}
internal class Microsoft.ML.Numeric.GradientCheckingMonitor : object {
    private static string _checkingMessage;
    private ITerminationCriterion _termCrit;
    private int _gradCheckInterval;
    private VBuffer`1<float> _newGrad;
    private VBuffer`1<float> _newX;
    public string FriendlyName { get; }
    public GradientCheckingMonitor(ITerminationCriterion termCrit, int gradientCheckInterval);
    public sealed virtual string get_FriendlyName();
    public sealed virtual bool Terminate(OptimizerState state, String& message);
    private float Check(OptimizerState state);
    public sealed virtual void Reset();
}
internal static class Microsoft.ML.Numeric.GradientTester : object {
    private static float Eps;
    private static Random _r;
    public static string Header;
    private static GradientTester();
    public static float Test(DifferentiableFunction f, VBuffer`1& x);
    public static float Test(DifferentiableFunction f, VBuffer`1& x, bool quiet);
    public static void TestAllCoords(DifferentiableFunction f, VBuffer`1& x);
    public static void TestCoords(DifferentiableFunction f, VBuffer`1& x, IList`1<int> coords);
    public static float Test(DifferentiableFunction f, VBuffer`1& x, VBuffer`1& dir, bool quiet, VBuffer`1& newGrad, VBuffer`1& newX);
    private static float SampleFromGaussian(Random r);
}
internal interface Microsoft.ML.Numeric.IDiffLineSearch {
    public abstract virtual float Minimize(DiffFunc1D func, float initValue, float initDeriv);
}
internal interface Microsoft.ML.Numeric.ILineSearch {
    public abstract virtual float Minimize(Func`2<float, float> func);
}
internal class Microsoft.ML.Numeric.IndexedDifferentiableFunction : MulticastDelegate {
    public IndexedDifferentiableFunction(object object, IntPtr method);
    public virtual float Invoke(int index, VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) input, VBuffer`1& gradient);
    public virtual IAsyncResult BeginInvoke(int index, VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) input, VBuffer`1& gradient, AsyncCallback callback, object object);
    public virtual float EndInvoke(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) input, VBuffer`1& gradient, IAsyncResult result);
}
internal interface Microsoft.ML.Numeric.ITerminationCriterion {
    public string FriendlyName { get; }
    public abstract virtual string get_FriendlyName();
    public abstract virtual bool Terminate(OptimizerState state, String& message);
    public abstract virtual void Reset();
}
internal class Microsoft.ML.Numeric.L1Optimizer : Optimizer {
    private int _biasCount;
    private float _l1weight;
    public L1Optimizer(IHostEnvironment env, int biasCount, float l1weight, int m, bool keepDense, ITerminationCriterion term, bool enforceNonNegativity);
    internal virtual OptimizerState MakeState(IChannel ch, IProgressChannelProvider progress, DifferentiableFunction function, VBuffer`1& initial);
    [CompilerGeneratedAttribute]
private void <MakeState>b__3_0(int ind, Single& initialVal);
}
internal class Microsoft.ML.Numeric.MeanImprovementCriterion : object {
    private float _tol;
    private float _lambda;
    private int _maxIterations;
    private float _unnormMeanImprovement;
    public float Tolerance { get; }
    public string FriendlyName { get; }
    public MeanImprovementCriterion(float tol, float lambda, int maxIterations);
    public float get_Tolerance();
    public sealed virtual string get_FriendlyName();
    public sealed virtual bool Terminate(OptimizerState state, String& message);
    public sealed virtual void Reset();
}
internal class Microsoft.ML.Numeric.MeanRelativeImprovementCriterion : object {
    private int _n;
    private float _tol;
    private int _maxIterations;
    private Queue`1<float> _pastValues;
    public float Tolerance { get; }
    public int Iters { get; }
    public string FriendlyName { get; }
    public MeanRelativeImprovementCriterion(float tol, int n, int maxIterations);
    public float get_Tolerance();
    public int get_Iters();
    public sealed virtual string get_FriendlyName();
    public sealed virtual bool Terminate(OptimizerState state, String& message);
    public virtual string ToString();
    public sealed virtual void Reset();
}
internal class Microsoft.ML.Numeric.Optimizer : object {
    protected bool EnforceNonNegativity;
    private ITerminationCriterion _staticTerm;
    protected bool KeepDense;
    protected IHostEnvironment Env;
    [CompilerGeneratedAttribute]
private int <M>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalMemoryLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Quiet>k__BackingField;
    public int M { get; }
    public long TotalMemoryLimit { get; }
    public bool Quiet { get; public set; }
    public Optimizer(IHostEnvironment env, int m, bool keepDense, ITerminationCriterion term, bool enforceNonNegativity);
    [CompilerGeneratedAttribute]
public int get_M();
    [CompilerGeneratedAttribute]
public long get_TotalMemoryLimit();
    internal virtual OptimizerState MakeState(IChannel ch, IProgressChannelProvider progress, DifferentiableFunction function, VBuffer`1& initial);
    public void Minimize(DifferentiableFunction function, VBuffer`1& initial, float tolerance, VBuffer`1& result, Single& optimum);
    public void Minimize(DifferentiableFunction function, VBuffer`1& initial, VBuffer`1& result, Single& optimum);
    public void Minimize(DifferentiableFunction function, VBuffer`1& initial, ITerminationCriterion term, VBuffer`1& result, Single& optimum);
    [CompilerGeneratedAttribute]
public bool get_Quiet();
    [CompilerGeneratedAttribute]
public void set_Quiet(bool value);
}
internal class Microsoft.ML.Numeric.RelativeNormGradient : StaticTerminationCriterion {
    private float _tol;
    public float Tolerance { get; }
    public string FriendlyName { get; }
    public RelativeNormGradient(float tol);
    public float get_Tolerance();
    public virtual string get_FriendlyName();
    public virtual bool Terminate(OptimizerState state, String& message);
    public virtual string ToString();
}
internal class Microsoft.ML.Numeric.SgdOptimizer : object {
    private int _batchSize;
    private float _momentum;
    private float _t0;
    private DTerminate _terminate;
    private bool _averaging;
    private RateScheduleType _rateSchedule;
    private int _maxSteps;
    public int BatchSize { get; public set; }
    public float Momentum { get; public set; }
    public float T0 { get; public set; }
    public bool Averaging { get; public set; }
    public RateScheduleType RateSchedule { get; public set; }
    public int MaxSteps { get; public set; }
    public SgdOptimizer(DTerminate terminate, RateScheduleType rateSchedule, bool averaging, float t0, int batchSize, float momentum, int maxSteps);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public float get_Momentum();
    public void set_Momentum(float value);
    public float get_T0();
    public void set_T0(float value);
    public bool get_Averaging();
    public void set_Averaging(bool value);
    public RateScheduleType get_RateSchedule();
    public void set_RateSchedule(RateScheduleType value);
    public int get_MaxSteps();
    public void set_MaxSteps(int value);
    public void Minimize(DStochasticGradient f, VBuffer`1& initial, VBuffer`1& result);
}
internal abstract class Microsoft.ML.Numeric.StaticTerminationCriterion : object {
    public string FriendlyName { get; }
    public abstract virtual string get_FriendlyName();
    public abstract virtual bool Terminate(OptimizerState state, String& message);
    public sealed virtual void Reset();
}
internal static class Microsoft.ML.Numeric.TerminateTester : object {
    internal static bool ShouldTerminate(VBuffer`1& x, VBuffer`1& xprev);
}
internal static class Microsoft.ML.Numeric.Test : object {
    private static VBuffer`1<float> _c1;
    private static VBuffer`1<float> _c2;
    private static VBuffer`1<float> _c3;
    private static Test();
    private static float QuadTest(float x, Single& deriv);
    private static float LogTest(float x, Single& deriv);
    private static float QuadTest2D(VBuffer`1& x, VBuffer`1& grad, IProgressChannelProvider progress);
    private static void StochasticQuadTest2D(VBuffer`1& x, VBuffer`1& grad);
    private static void CreateWrapped(VBuffer`1& vec, Single[] values);
    private static void RunTest(DiffFunc1D f);
    public static void Main(String[] argv);
}
internal class Microsoft.ML.Numeric.UpperBoundOnDistanceWithL2 : StaticTerminationCriterion {
    private float _sigmaSq;
    private float _tol;
    private float _bestBoundOnMin;
    public float Tolerance { get; }
    public string FriendlyName { get; }
    public UpperBoundOnDistanceWithL2(float sigmaSq, float tol);
    public float get_Tolerance();
    public virtual string get_FriendlyName();
    public virtual bool Terminate(OptimizerState state, String& message);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Microsoft.ML.StandardTrainersCatalog : object {
    [ExtensionAttribute]
public static SgdCalibratedTrainer SgdCalibrated(BinaryClassificationTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, int numberOfIterations, double learningRate, float l2Regularization);
    [ExtensionAttribute]
public static SgdCalibratedTrainer SgdCalibrated(BinaryClassificationTrainers catalog, Options options);
    [ExtensionAttribute]
public static SgdNonCalibratedTrainer SgdNonCalibrated(BinaryClassificationTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, IClassificationLoss lossFunction, int numberOfIterations, double learningRate, float l2Regularization);
    [ExtensionAttribute]
public static SgdNonCalibratedTrainer SgdNonCalibrated(BinaryClassificationTrainers catalog, Options options);
    [ExtensionAttribute]
public static SdcaRegressionTrainer Sdca(RegressionTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, ISupportSdcaRegressionLoss lossFunction, Nullable`1<float> l2Regularization, Nullable`1<float> l1Regularization, Nullable`1<int> maximumNumberOfIterations);
    [ExtensionAttribute]
public static SdcaRegressionTrainer Sdca(RegressionTrainers catalog, Options options);
    [ExtensionAttribute]
public static SdcaLogisticRegressionBinaryTrainer SdcaLogisticRegression(BinaryClassificationTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, Nullable`1<float> l2Regularization, Nullable`1<float> l1Regularization, Nullable`1<int> maximumNumberOfIterations);
    [ExtensionAttribute]
public static SdcaLogisticRegressionBinaryTrainer SdcaLogisticRegression(BinaryClassificationTrainers catalog, Options options);
    [ExtensionAttribute]
public static SdcaNonCalibratedBinaryTrainer SdcaNonCalibrated(BinaryClassificationTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, ISupportSdcaClassificationLoss lossFunction, Nullable`1<float> l2Regularization, Nullable`1<float> l1Regularization, Nullable`1<int> maximumNumberOfIterations);
    [ExtensionAttribute]
public static SdcaNonCalibratedBinaryTrainer SdcaNonCalibrated(BinaryClassificationTrainers catalog, Options options);
    [ExtensionAttribute]
public static SdcaMaximumEntropyMulticlassTrainer SdcaMaximumEntropy(MulticlassClassificationTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, Nullable`1<float> l2Regularization, Nullable`1<float> l1Regularization, Nullable`1<int> maximumNumberOfIterations);
    [ExtensionAttribute]
public static SdcaMaximumEntropyMulticlassTrainer SdcaMaximumEntropy(MulticlassClassificationTrainers catalog, Options options);
    [ExtensionAttribute]
public static SdcaNonCalibratedMulticlassTrainer SdcaNonCalibrated(MulticlassClassificationTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, ISupportSdcaClassificationLoss lossFunction, Nullable`1<float> l2Regularization, Nullable`1<float> l1Regularization, Nullable`1<int> maximumNumberOfIterations);
    [ExtensionAttribute]
public static SdcaNonCalibratedMulticlassTrainer SdcaNonCalibrated(MulticlassClassificationTrainers catalog, Options options);
    [ExtensionAttribute]
public static AveragedPerceptronTrainer AveragedPerceptron(BinaryClassificationTrainers catalog, string labelColumnName, string featureColumnName, IClassificationLoss lossFunction, float learningRate, bool decreaseLearningRate, float l2Regularization, int numberOfIterations);
    [ExtensionAttribute]
public static AveragedPerceptronTrainer AveragedPerceptron(BinaryClassificationTrainers catalog, Options options);
    [ExtensionAttribute]
public static OnlineGradientDescentTrainer OnlineGradientDescent(RegressionTrainers catalog, string labelColumnName, string featureColumnName, IRegressionLoss lossFunction, float learningRate, bool decreaseLearningRate, float l2Regularization, int numberOfIterations);
    [ExtensionAttribute]
public static OnlineGradientDescentTrainer OnlineGradientDescent(RegressionTrainers catalog, Options options);
    [ExtensionAttribute]
public static LbfgsLogisticRegressionBinaryTrainer LbfgsLogisticRegression(BinaryClassificationTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, float l1Regularization, float l2Regularization, float optimizationTolerance, int historySize, bool enforceNonNegativity);
    [ExtensionAttribute]
public static LbfgsLogisticRegressionBinaryTrainer LbfgsLogisticRegression(BinaryClassificationTrainers catalog, Options options);
    [ExtensionAttribute]
public static LbfgsPoissonRegressionTrainer LbfgsPoissonRegression(RegressionTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, float l1Regularization, float l2Regularization, float optimizationTolerance, int historySize, bool enforceNonNegativity);
    [ExtensionAttribute]
public static LbfgsPoissonRegressionTrainer LbfgsPoissonRegression(RegressionTrainers catalog, Options options);
    [ExtensionAttribute]
public static LbfgsMaximumEntropyMulticlassTrainer LbfgsMaximumEntropy(MulticlassClassificationTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, float l1Regularization, float l2Regularization, float optimizationTolerance, int historySize, bool enforceNonNegativity);
    [ExtensionAttribute]
public static LbfgsMaximumEntropyMulticlassTrainer LbfgsMaximumEntropy(MulticlassClassificationTrainers catalog, Options options);
    [ExtensionAttribute]
public static NaiveBayesMulticlassTrainer NaiveBayes(MulticlassClassificationTrainers catalog, string labelColumnName, string featureColumnName);
    private static ICalibratorTrainer GetCalibratorTrainerOrThrow(IExceptionContext ectx, IEstimator`1<ISingleFeaturePredictionTransformer`1<ICalibrator>> calibratorEstimator);
    [ExtensionAttribute]
public static OneVersusAllTrainer OneVersusAll(MulticlassClassificationTrainers catalog, ITrainerEstimator`2<BinaryPredictionTransformer`1<TModel>, TModel> binaryEstimator, string labelColumnName, bool imputeMissingLabelsAsNegative, IEstimator`1<ISingleFeaturePredictionTransformer`1<ICalibrator>> calibrator, int maximumCalibrationExampleCount, bool useProbabilities);
    [ExtensionAttribute]
public static PairwiseCouplingTrainer PairwiseCoupling(MulticlassClassificationTrainers catalog, ITrainerEstimator`2<ISingleFeaturePredictionTransformer`1<TModel>, TModel> binaryEstimator, string labelColumnName, bool imputeMissingLabelsAsNegative, IEstimator`1<ISingleFeaturePredictionTransformer`1<ICalibrator>> calibrator, int maximumCalibrationExampleCount);
    [ExtensionAttribute]
public static LinearSvmTrainer LinearSvm(BinaryClassificationTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, int numberOfIterations);
    [ExtensionAttribute]
public static LinearSvmTrainer LinearSvm(BinaryClassificationTrainers catalog, Options options);
    [ExtensionAttribute]
public static PriorTrainer Prior(BinaryClassificationTrainers catalog, string labelColumnName, string exampleWeightColumnName);
    [ExtensionAttribute]
public static LdSvmTrainer LdSvm(BinaryClassificationTrainers catalog, Options options);
    [ExtensionAttribute]
public static LdSvmTrainer LdSvm(BinaryClassificationTrainers catalog, string labelColumnName, string featureColumnName, string exampleWeightColumnName, int numberOfIterations, int treeDepth, bool useBias, bool useCachedData);
}
public abstract class Microsoft.ML.Trainers.AveragedLinearOptions : OnlineLinearOptions {
    [ArgumentAttribute("0")]
[TGUIAttribute]
[SweepableDiscreteParamAttribute("LearningRate", "Mono.Cecil.CustomAttributeArgument[]", "False")]
[RangeAttribute("0,0001", "1", "1", "True")]
public float LearningRate;
    [ArgumentAttribute("0")]
[TGUIAttribute]
[SweepableDiscreteParamAttribute("DecreaseLearningRate", "Mono.Cecil.CustomAttributeArgument[]", "False")]
[BooleanChoiceAttribute]
public bool DecreaseLearningRate;
    [ArgumentAttribute("0")]
public Nullable`1<long> ResetWeightsAfterXExamples;
    [ArgumentAttribute("0")]
public bool LazyUpdate;
    [ArgumentAttribute("0")]
[TGUIAttribute]
[SweepableFloatParamAttribute("L2RegularizerWeight", "0", "0,4", "-1", "-1", "False")]
[RangeAttribute("0", "32768", "0", "False")]
public float L2Regularization;
    [ArgumentAttribute("0")]
public float RecencyGain;
    [ArgumentAttribute("0")]
public bool RecencyGainMultiplicative;
    [ArgumentAttribute("0")]
public bool Averaged;
    [ArgumentAttribute("0")]
internal float AveragedTolerance;
    internal IComponentFactory`1<IScalarLoss> LossFunctionFactory { get; }
    internal abstract virtual IComponentFactory`1<IScalarLoss> get_LossFunctionFactory();
}
public abstract class Microsoft.ML.Trainers.AveragedLinearTrainer`2 : OnlineLinearTrainer`2<TTransformer, TModel> {
    private protected AveragedLinearOptions AveragedLinearTrainerOptions;
    private protected IScalarLoss LossFunction;
    private protected AveragedLinearTrainer`2(AveragedLinearOptions options, IHostEnvironment env, string name, Column label);
}
public class Microsoft.ML.Trainers.AveragedPerceptronTrainer : AveragedLinearTrainer`2<BinaryPredictionTransformer`1<LinearBinaryModelParameters>, LinearBinaryModelParameters> {
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal static string ShortName;
    internal static string Summary;
    private Options _args;
    private protected PredictionKind PredictionKind { get; }
    private protected bool NeedCalibration { get; }
    internal AveragedPerceptronTrainer(IHostEnvironment env, Options options);
    internal AveragedPerceptronTrainer(IHostEnvironment env, string labelColumnName, string featureColumnName, IClassificationLoss lossFunction, float learningRate, bool decreaseLearningRate, float l2Regularization, int numberOfIterations);
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual bool get_NeedCalibration();
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual void CheckLabels(RoleMappedData data);
    private protected virtual TrainStateBase<BinaryPredictionTransformer`1<LinearBinaryModelParameters>, LinearBinaryModelParameters> MakeState(IChannel ch, int numFeatures, LinearModelParameters predictor);
    private protected virtual BinaryPredictionTransformer`1<LinearBinaryModelParameters> MakeTransformer(LinearBinaryModelParameters model, DataViewSchema trainSchema);
    [EntryPointAttribute]
internal static BinaryClassificationOutput TrainBinary(IHostEnvironment env, Options input);
}
public class Microsoft.ML.Trainers.CoefficientStatistics : object {
    public float Estimate;
    public float StandardError;
    public float ZScore;
    public float PValue;
    public int Index;
    internal CoefficientStatistics(int featureIndex, float estimate, float stdError, float zScore, float pValue);
}
internal class Microsoft.ML.Trainers.CompensatedSum : object {
    private double _roundOffError;
    private double _sum;
    public double Sum { get; }
    public double get_Sum();
    public void Add(double summand);
}
public abstract class Microsoft.ML.Trainers.ComputeLogisticRegressionStandardDeviation : object {
    public abstract virtual VBuffer`1<float> ComputeStandardDeviation(Double[] hessian, Int32[] weightIndices, int parametersCount, int currentWeightsCount, IChannel ch, float l2Weight);
}
[BestFriendAttribute]
internal class Microsoft.ML.Trainers.DnnTrainState : object {
    public int CurrentBatchIndex;
    public int CurrentEpoch;
    public int BatchSize;
    public int BatchesPerEpoch;
}
public class Microsoft.ML.Trainers.ExponentialLRDecay : LearningRateScheduler {
    public float LearningRate;
    public int GlobalStep;
    public int DecaySteps;
    public float DecayRate;
    public bool Staircase;
    public float NumEpochsPerDecay;
    public ExponentialLRDecay(float learningRate, float numEpochsPerDecay, float decayRate, bool staircase);
    internal virtual float GetLearningRate(DnnTrainState trainstate);
}
public class Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters : ModelParametersBase`1<float> {
    internal static string LoaderSignature;
    private bool _norm;
    [CompilerGeneratedAttribute]
private int <FieldCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FeatureCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LatentDimension>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LatentDimAligned>k__BackingField;
    private Single[] _linearWeights;
    private AlignedArray _latentWeightsAligned;
    private protected PredictionKind PredictionKind { get; }
    public int FieldCount { get; }
    public int FeatureCount { get; }
    public int LatentDimension { get; }
    internal int LatentDimAligned { get; }
    internal FieldAwareFactorizationMachineModelParameters(IHostEnvironment env, bool norm, int fieldCount, int featureCount, int latentDim, Single[] linearWeights, Single[] latentWeights);
    internal FieldAwareFactorizationMachineModelParameters(IHostEnvironment env, bool norm, int fieldCount, int featureCount, int latentDim, Single[] linearWeights, AlignedArray latentWeightsAligned);
    private FieldAwareFactorizationMachineModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private protected virtual PredictionKind get_PredictionKind();
    [CompilerGeneratedAttribute]
public int get_FieldCount();
    [CompilerGeneratedAttribute]
public int get_FeatureCount();
    [CompilerGeneratedAttribute]
public int get_LatentDimension();
    [CompilerGeneratedAttribute]
internal int get_LatentDimAligned();
    private static VersionInfo GetVersionInfo();
    internal static FieldAwareFactorizationMachineModelParameters Create(IHostEnvironment env, ModelLoadContext ctx);
    private protected virtual void SaveCore(ModelSaveContext ctx);
    internal float CalculateResponse(ValueGetter`1[] getters, VBuffer`1<float> featureBuffer, Int32[] featureFieldBuffer, Int32[] featureIndexBuffer, Single[] featureValueBuffer, AlignedArray latentSum);
    private sealed virtual override ISchemaBoundMapper Microsoft.ML.Data.ISchemaBindableMapper.Bind(IHostEnvironment env, RoleMappedSchema schema);
    internal void CopyLinearWeightsTo(Single[] linearWeights);
    internal void CopyLatentWeightsTo(AlignedArray latentWeights);
    public IReadOnlyList`1<float> GetLinearWeights();
    public IReadOnlyList`1<float> GetLatentWeights();
}
public class Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer : PredictionTransformerBase`1<FieldAwareFactorizationMachineModelParameters> {
    internal static string LoaderSignature;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <FeatureColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DataViewType> <FeatureColumnTypes>k__BackingField;
    private string _thresholdColumn;
    private float _threshold;
    private IReadOnlyList`1<string> FeatureColumns { get; }
    private IReadOnlyList`1<DataViewType> FeatureColumnTypes { get; }
    internal FieldAwareFactorizationMachinePredictionTransformer(IHostEnvironment host, FieldAwareFactorizationMachineModelParameters model, DataViewSchema trainSchema, String[] featureColumns, float threshold, string thresholdColumn);
    private FieldAwareFactorizationMachinePredictionTransformer(IHostEnvironment host, ModelLoadContext ctx);
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> get_FeatureColumns();
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<DataViewType> get_FeatureColumnTypes();
    public virtual DataViewSchema GetOutputSchema(DataViewSchema inputSchema);
    private protected virtual void SaveModel(ModelSaveContext ctx);
    private RoleMappedSchema GetSchema();
    private static VersionInfo GetVersionInfo();
    internal static FieldAwareFactorizationMachinePredictionTransformer Create(IHostEnvironment env, ModelLoadContext ctx);
    [CompilerGeneratedAttribute]
private void <SaveModel>b__12_0(BinaryWriter writer);
}
internal class Microsoft.ML.Trainers.FieldAwareFactorizationMachineScalarRowMapper : object {
    private FieldAwareFactorizationMachineModelParameters _pred;
    [CompilerGeneratedAttribute]
private RoleMappedSchema <InputRoleMappedSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private DataViewSchema <OutputSchema>k__BackingField;
    private Column[] _columns;
    private List`1<int> _inputColumnIndexes;
    private IHostEnvironment _env;
    public RoleMappedSchema InputRoleMappedSchema { get; }
    public DataViewSchema OutputSchema { get; }
    public DataViewSchema InputSchema { get; }
    public ISchemaBindableMapper Bindable { get; }
    public FieldAwareFactorizationMachineScalarRowMapper(IHostEnvironment env, RoleMappedSchema schema, DataViewSchema outputSchema, FieldAwareFactorizationMachineModelParameters pred);
    [CompilerGeneratedAttribute]
public sealed virtual RoleMappedSchema get_InputRoleMappedSchema();
    [CompilerGeneratedAttribute]
public sealed virtual DataViewSchema get_OutputSchema();
    public sealed virtual DataViewSchema get_InputSchema();
    public sealed virtual ISchemaBindableMapper get_Bindable();
    private sealed virtual override DataViewRow Microsoft.ML.Data.ISchemaBoundRowMapper.GetRow(DataViewRow input, IEnumerable`1<Column> activeColumns);
    private sealed virtual override IEnumerable`1<Column> Microsoft.ML.Data.ISchemaBoundRowMapper.GetDependenciesForNewColumns(IEnumerable`1<Column> columns);
    public sealed virtual IEnumerable`1<KeyValuePair`2<ColumnRole, string>> GetInputColumnRoles();
    [CompilerGeneratedAttribute]
private bool <Microsoft.ML.Data.ISchemaBoundRowMapper.GetDependenciesForNewColumns>b__16_0(Column col);
}
public class Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer : object {
    internal static string Summary;
    internal static string UserName;
    internal static string LoadName;
    internal static string ShortName;
    private IHost _host;
    internal Column[] FeatureColumns;
    internal Column LabelColumn;
    internal Column WeightColumn;
    private static TrainerInfo _info;
    private int _latentDim;
    private int _latentDimAligned;
    private float _lambdaLinear;
    private float _lambdaLatent;
    private float _learningRate;
    private int _numIterations;
    private bool _norm;
    private bool _shuffle;
    private bool _verbose;
    private float _radius;
    private PredictionKind Microsoft.ML.ITrainer.PredictionKind { get; }
    private TrainerInfo Microsoft.ML.ITrainer.Info { get; }
    [BestFriendAttribute]
internal FieldAwareFactorizationMachineTrainer(IHostEnvironment env, Options options);
    [BestFriendAttribute]
internal FieldAwareFactorizationMachineTrainer(IHostEnvironment env, String[] featureColumnNames, string labelColumnName, string exampleWeightColumnName);
    private static FieldAwareFactorizationMachineTrainer();
    private sealed virtual override PredictionKind Microsoft.ML.ITrainer.get_PredictionKind();
    private sealed virtual override TrainerInfo Microsoft.ML.ITrainer.get_Info();
    private void Initialize(IHostEnvironment env, Options options);
    private void InitializeTrainingState(int fieldCount, int featureCount, FieldAwareFactorizationMachineModelParameters predictor, Single[]& linearWeights, AlignedArray& latentWeightsAligned, Single[]& linearAccumulatedSquaredGrads, AlignedArray& latentAccumulatedSquaredGradsAligned);
    private static float CalculateLoss(float label, float modelResponse);
    private static float CalculateLossSlope(float label, float modelResponse);
    private static double CalculateAvgLoss(IChannel ch, RoleMappedData data, bool norm, Single[] linearWeights, AlignedArray latentWeightsAligned, int latentDimAligned, AlignedArray latentSum, Int32[] featureFieldBuffer, Int32[] featureIndexBuffer, Single[] featureValueBuffer, VBuffer`1<float> buffer, Int64& badExampleCount);
    private FieldAwareFactorizationMachineModelParameters TrainCore(IChannel ch, IProgressChannel pch, RoleMappedData data, RoleMappedData validData, FieldAwareFactorizationMachineModelParameters predictor);
    private FieldAwareFactorizationMachineModelParameters Train(TrainContext context);
    private sealed virtual override IPredictor Microsoft.ML.ITrainer.Train(TrainContext context);
    private sealed virtual override FieldAwareFactorizationMachineModelParameters Microsoft.ML.ITrainer<Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters>.Train(TrainContext context);
    [EntryPointAttribute]
internal static BinaryClassificationOutput TrainBinary(IHostEnvironment env, Options input);
    public FieldAwareFactorizationMachinePredictionTransformer Fit(IDataView trainData, IDataView validationData, FieldAwareFactorizationMachineModelParameters modelParameters);
    public sealed virtual FieldAwareFactorizationMachinePredictionTransformer Fit(IDataView input);
    public sealed virtual SchemaShape GetOutputSchema(SchemaShape inputSchema);
    private Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    [CompilerGeneratedAttribute]
private void <GetOutputSchema>g__CheckColumnsCompatible|38_0(Column column, string columnRole, <>c__DisplayClass38_0& );
}
internal class Microsoft.ML.Trainers.FieldAwareFactorizationMachineUtils : object {
    internal static int GetAlignedVectorLength(int length);
    internal static bool LoadOneExampleIntoBuffer(ValueGetter`1[] getters, VBuffer`1<float> featureBuffer, bool norm, Int32& count, Int32[] fieldIndexBuffer, Int32[] featureIndexBuffer, Single[] featureValueBuffer);
}
public class Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer : LbfgsTrainerBase`3<Options, BinaryPredictionTransformer`1<CalibratedModelParametersBase`2<LinearBinaryModelParameters, PlattCalibrator>>, CalibratedModelParametersBase`2<LinearBinaryModelParameters, PlattCalibrator>> {
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal static string ShortName;
    internal static string Summary;
    private double _posWeight;
    private ModelStatisticsBase _stats;
    private protected PredictionKind PredictionKind { get; }
    internal LbfgsLogisticRegressionBinaryTrainer(IHostEnvironment env, string labelColumn, string featureColumn, string exampleWeightColumnName, float l1Regularization, float l2Regularization, float optimizationTolerance, int memorySize, bool enforceNoNegativity);
    internal LbfgsLogisticRegressionBinaryTrainer(IHostEnvironment env, Options options);
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual void CheckLabel(RoleMappedData data);
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual BinaryPredictionTransformer`1<CalibratedModelParametersBase`2<LinearBinaryModelParameters, PlattCalibrator>> MakeTransformer(CalibratedModelParametersBase`2<LinearBinaryModelParameters, PlattCalibrator> model, DataViewSchema trainSchema);
    public BinaryPredictionTransformer`1<CalibratedModelParametersBase`2<LinearBinaryModelParameters, PlattCalibrator>> Fit(IDataView trainData, LinearModelParameters modelParameters);
    private protected virtual float AccumulateOneGradient(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) feat, float label, float weight, VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) x, VBuffer`1& grad, Single[]& scratch);
    private protected virtual void ComputeTrainingStatistics(IChannel ch, Factory cursorFactory, float loss, int numParams);
    private protected virtual void ProcessPriorDistribution(float label, float weight);
    private protected virtual Optimizer InitializeOptimizer(IChannel ch, Factory cursorFactory, VBuffer`1& init, ITerminationCriterion& terminationCriterion);
    private protected virtual VBuffer`1<float> InitializeWeightsFromPredictor(IPredictor srcPredictor);
    private protected virtual CalibratedModelParametersBase`2<LinearBinaryModelParameters, PlattCalibrator> CreatePredictor();
    [EntryPointAttribute]
internal static BinaryClassificationOutput TrainBinary(IHostEnvironment env, Options input);
}
public class Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer : LbfgsTrainerBase`3<Options, MulticlassPredictionTransformer`1<MaximumEntropyModelParameters>, MaximumEntropyModelParameters> {
    internal static string Summary;
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal static string ShortName;
    private int _numClasses;
    private String[] _labelNames;
    private Double[] _prior;
    private ModelStatisticsBase _stats;
    private protected int ClassCount { get; }
    private protected PredictionKind PredictionKind { get; }
    internal LbfgsMaximumEntropyMulticlassTrainer(IHostEnvironment env, string labelColumn, string featureColumn, string weights, float l1Weight, float l2Weight, float optimizationTolerance, int memorySize, bool enforceNoNegativity);
    internal LbfgsMaximumEntropyMulticlassTrainer(IHostEnvironment env, Options options);
    private protected virtual int get_ClassCount();
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual void CheckLabel(RoleMappedData data);
    private protected virtual Optimizer InitializeOptimizer(IChannel ch, Factory cursorFactory, VBuffer`1& init, ITerminationCriterion& terminationCriterion);
    private protected virtual float AccumulateOneGradient(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) feat, float label, float weight, VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) x, VBuffer`1& grad, Single[]& scores);
    private protected virtual VBuffer`1<float> InitializeWeightsFromPredictor(IPredictor srcPredictor);
    private protected virtual MaximumEntropyModelParameters CreatePredictor();
    private protected virtual void ComputeTrainingStatistics(IChannel ch, Factory cursorFactory, float loss, int numParams);
    private protected virtual void ProcessPriorDistribution(float label, float weight);
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual MulticlassPredictionTransformer`1<MaximumEntropyModelParameters> MakeTransformer(MaximumEntropyModelParameters model, DataViewSchema trainSchema);
    public MulticlassPredictionTransformer`1<MaximumEntropyModelParameters> Fit(IDataView trainData, MaximumEntropyModelParameters modelParameters);
    [EntryPointAttribute]
internal static MulticlassClassificationOutput TrainMulticlass(IHostEnvironment env, Options input);
}
public class Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer : LbfgsTrainerBase`3<Options, RegressionPredictionTransformer`1<PoissonRegressionModelParameters>, PoissonRegressionModelParameters> {
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal static string ShortName;
    internal static string Summary;
    private double _lossNormalizer;
    private protected PredictionKind PredictionKind { get; }
    internal LbfgsPoissonRegressionTrainer(IHostEnvironment env, string labelColumn, string featureColumn, string weights, float l1Weight, float l2Weight, float optimizationTolerance, int memorySize, bool enforceNoNegativity);
    internal LbfgsPoissonRegressionTrainer(IHostEnvironment env, Options options);
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual void CheckLabel(RoleMappedData data);
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual RegressionPredictionTransformer`1<PoissonRegressionModelParameters> MakeTransformer(PoissonRegressionModelParameters model, DataViewSchema trainSchema);
    public RegressionPredictionTransformer`1<PoissonRegressionModelParameters> Fit(IDataView trainData, LinearModelParameters linearModel);
    private protected virtual VBuffer`1<float> InitializeWeightsFromPredictor(IPredictor srcPredictor);
    private protected virtual void PreTrainingProcessInstance(float label, VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) feat, float weight);
    private protected virtual float DifferentiableFunction(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) x, VBuffer`1& gradient, IProgressChannelProvider progress);
    private protected virtual float AccumulateOneGradient(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) feat, float label, float weight, VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) x, VBuffer`1& grad, Single[]& scratch);
    private protected virtual PoissonRegressionModelParameters CreatePredictor();
    private protected virtual void ComputeTrainingStatistics(IChannel ch, Factory factory, float loss, int numParams);
    private protected virtual void ProcessPriorDistribution(float label, float weight);
    [EntryPointAttribute]
internal static RegressionOutput TrainRegression(IHostEnvironment env, Options input);
}
public abstract class Microsoft.ML.Trainers.LbfgsTrainerBase`3 : TrainerEstimatorBase`2<TTransformer, TModel> {
    private static string RegisterName;
    private protected int NumFeatures;
    private protected VBuffer`1<float> CurrentWeights;
    private protected long NumGoodRows;
    private protected double WeightSum;
    private protected bool ShowTrainingStats;
    private IPredictor _srcPredictor;
    private protected TOptions LbfgsTrainerOptions;
    private protected float L2Weight;
    private protected float L1Weight;
    private protected float OptTol;
    private protected int MemorySize;
    private protected int MaxIterations;
    private protected float SgdInitializationTolerance;
    private protected bool Quiet;
    private protected float InitWtsDiameter;
    private protected bool UseThreads;
    private protected Nullable`1<int> NumThreads;
    private protected bool DenseOptimizer;
    private protected long MaxNormalizationExamples;
    private protected bool EnforceNonNegativity;
    private RoleMappedData _data;
    private Factory _cursorFactory;
    private VBuffer`1[] _features;
    private Single[] _labels;
    private Single[] _weights;
    private int _numChunks;
    private Int32[] _ranges;
    private VBuffer`1[] _localGradients;
    private Single[] _localLosses;
    private static TrainerInfo _info;
    public TrainerInfo Info { get; }
    private protected int ClassCount { get; }
    private protected int BiasCount { get; }
    private protected int WeightCount { get; }
    internal LbfgsTrainerBase`3(IHostEnvironment env, string featureColumn, Column labelColumn, string weightColumn, float l1Weight, float l2Weight, float optimizationTolerance, int memorySize, bool enforceNoNegativity);
    internal LbfgsTrainerBase`3(IHostEnvironment env, TOptions options, Column labelColumn, Action`1<TOptions> advancedSettings);
    private static LbfgsTrainerBase`3();
    public virtual TrainerInfo get_Info();
    private static TOptions ArgsInit(string featureColumn, Column labelColumn, string weightColumn, float l1Weight, float l2Weight, float optimizationTolerance, int memorySize, bool enforceNoNegativity);
    private protected virtual int get_ClassCount();
    private protected int get_BiasCount();
    private protected int get_WeightCount();
    private protected virtual Optimizer InitializeOptimizer(IChannel ch, Factory cursorFactory, VBuffer`1& init, ITerminationCriterion& terminationCriterion);
    private protected virtual VBuffer`1<float> InitializeWeightsSgd(IChannel ch, Factory cursorFactory);
    private protected abstract virtual VBuffer`1<float> InitializeWeightsFromPredictor(IPredictor srcPredictor);
    private protected abstract virtual void CheckLabel(RoleMappedData data);
    private protected virtual void PreTrainingProcessInstance(float label, VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) feat, float weight);
    private protected abstract virtual TModel CreatePredictor();
    private protected virtual TModel TrainModelCore(TrainContext context);
    private protected virtual void TrainCoreOneDal(IChannel ch, RoleMappedData data);
    private protected virtual void TrainCore(IChannel ch, RoleMappedData data);
    private protected void EnsureBiases(VBuffer`1& vec);
    private protected abstract virtual float AccumulateOneGradient(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) feat, float label, float weight, VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) xDense, VBuffer`1& grad, Single[]& scratch);
    private protected abstract virtual void ComputeTrainingStatistics(IChannel ch, Factory cursorFactory, float loss, int numParams);
    private protected abstract virtual void ProcessPriorDistribution(float label, float weight);
    private protected virtual float DifferentiableFunction(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) x, VBuffer`1& gradient, IProgressChannelProvider progress);
    private protected virtual float DifferentiableFunctionMultithreaded(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) xDense, VBuffer`1& gradient, IProgressChannel pch);
    private protected float DifferentiableFunctionComputeChunk(int ichk, VBuffer`1& xDense, VBuffer`1& grad, IProgressChannel pch);
    private protected float DifferentiableFunctionStream(Factory cursorFactory, VBuffer`1& xDense, VBuffer`1& grad, IProgressChannel pch);
    private protected VBuffer`1<float> InitializeWeights(IEnumerable`1<float> weights, IEnumerable`1<float> biases);
    [CompilerGeneratedAttribute]
private void <DifferentiableFunction>b__56_0(int ind, float v1, Single& v2);
}
public class Microsoft.ML.Trainers.LdSvmModelParameters : ModelParametersBase`1<float> {
    internal static string LoaderSignature;
    private int _numLeaf;
    private float _sigma;
    private VBuffer`1[] _w;
    private VBuffer`1[] _thetaPrime;
    private VBuffer`1[] _theta;
    private Single[] _biasW;
    private Single[] _biasTheta;
    private Single[] _biasThetaPrime;
    [CompilerGeneratedAttribute]
private DataViewType <InputType>k__BackingField;
    private protected PredictionKind PredictionKind { get; }
    public DataViewType InputType { get; }
    public DataViewType OutputType { get; }
    internal LdSvmModelParameters(IHostEnvironment env, VBuffer`1[] w, VBuffer`1[] thetaPrime, VBuffer`1[] theta, float sigma, Single[] biasW, Single[] biasTheta, Single[] biasThetaPrime, int treeDepth);
    private LdSvmModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    private void AssertValid();
    private static IPredictorProducing`1<float> Create(IHostEnvironment env, ModelLoadContext ctx);
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual void SaveCore(ModelSaveContext ctx);
    private void SaveVBufferArray(ModelSaveContext ctx, VBuffer`1[] data);
    private VBuffer`1[] LoadVBufferArray(ModelLoadContext ctx, int length, int vectorLength);
    private float Margin(VBuffer`1& src);
    [CompilerGeneratedAttribute]
public sealed virtual DataViewType get_InputType();
    public sealed virtual DataViewType get_OutputType();
    private sealed virtual override ValueMapper`2<TIn, TOut> Microsoft.ML.Data.IValueMapper.GetMapper();
    [CompilerGeneratedAttribute]
private void <Microsoft.ML.Data.IValueMapper.GetMapper>b__25_0(VBuffer`1& src, Single& dst);
}
public class Microsoft.ML.Trainers.LdSvmTrainer : TrainerEstimatorBase`2<BinaryPredictionTransformer`1<LdSvmModelParameters>, LdSvmModelParameters> {
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal static string Summary;
    private static int NumberOfSamplesForGammaUpdate;
    private Options _options;
    private static TrainerInfo _info;
    public TrainerInfo Info { get; }
    private protected PredictionKind PredictionKind { get; }
    internal LdSvmTrainer(IHostEnvironment env, Options options);
    private static LdSvmTrainer();
    public virtual TrainerInfo get_Info();
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual LdSvmModelParameters TrainModelCore(TrainContext trainContext);
    private void ComputeGradTheta(VBuffer`1& feat, Single[] gradTheta, int numLeaf, float gamma, VBuffer`1[] theta, Single[] biasTheta, Single[] pathWt, Single[] localWt, VBuffer`1[] w, Single[] biasW);
    private void UpdateGamma(int iter, int numLeaf, Single& gamma, Data data, VBuffer`1[] theta, Single[] biasTheta);
    private LdSvmModelParameters TrainCore(IChannel ch, RoleMappedData trainingData, int numLeaf, int numFeatures);
    private void InitClassifierParam(int numLeaf, int numFeatures, VBuffer`1[] tempW, VBuffer`1[] w, VBuffer`1[] theta, VBuffer`1[] thetaPrime, Single[] biasW, Single[] biasTheta, Single[] biasThetaPrime, VBuffer`1[] tempThetaPrime, VBuffer`1[] tempTheta, Single[] tempBiasW, Single[] tempBiasTheta, Single[] tempBiasThetaPrime);
    private static void CheckOptions(IExceptionContext ectx, Options options);
    private protected virtual BinaryPredictionTransformer`1<LdSvmModelParameters> MakeTransformer(LdSvmModelParameters model, DataViewSchema trainSchema);
    [EntryPointAttribute]
internal static BinaryClassificationOutput TrainBinary(IHostEnvironment env, Options input);
}
public abstract class Microsoft.ML.Trainers.LearningRateScheduler : object {
    [BestFriendAttribute]
internal abstract virtual float GetLearningRate(DnnTrainState options);
}
internal class Microsoft.ML.Trainers.LegacySdcaBinaryTrainer : SdcaBinaryTrainerBase`1<IPredictorWithFeatureWeights`1<float>> {
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal LegacySdcaBinaryTrainer(IHostEnvironment env, Options options);
    private protected virtual Column[] ComputeSdcaBinaryClassifierSchemaShape();
    private protected virtual IPredictorWithFeatureWeights`1<float> CreatePredictor(VBuffer`1[] weights, Single[] bias);
}
internal class Microsoft.ML.Trainers.LegacySgdBinaryTrainer : SgdBinaryTrainerBase`1<IPredictorWithFeatureWeights`1<float>> {
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal static string ShortName;
    internal LegacySgdBinaryTrainer(IHostEnvironment env, Options options);
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual IPredictorWithFeatureWeights`1<float> CreateModel(VBuffer`1<float> weights, float bias);
    [EntryPointAttribute]
internal static BinaryClassificationOutput TrainBinary(IHostEnvironment env, Options input);
}
public class Microsoft.ML.Trainers.LinearBinaryModelParameters : LinearModelParameters {
    internal static string LoaderSignature;
    internal static string RegistrationName;
    private static string ModelStatsSubModelFilename;
    public ModelStatisticsBase Statistics;
    private protected PredictionKind PredictionKind { get; }
    internal LinearBinaryModelParameters(IHostEnvironment env, VBuffer`1& weights, float bias, ModelStatisticsBase stats);
    private LinearBinaryModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    internal static IPredictorProducing`1<float> Create(IHostEnvironment env, ModelLoadContext ctx);
    private protected virtual void SaveCore(ModelSaveContext ctx);
    private protected virtual PredictionKind get_PredictionKind();
    private sealed virtual override IParameterMixer`1<float> Microsoft.ML.Model.IParameterMixer<System.Single>.CombineParameters(IList`1<IParameterMixer`1<float>> models);
    private protected virtual void SaveSummary(TextWriter writer, RoleMappedSchema schema);
    private sealed virtual override IList`1<KeyValuePair`2<string, object>> Microsoft.ML.Model.ICanGetSummaryInKeyValuePairs.GetSummaryInKeyValuePairs(RoleMappedSchema schema);
    private protected virtual DataViewRow GetStatsIRowOrNull(RoleMappedSchema schema);
    private protected virtual void SaveAsIni(TextWriter writer, RoleMappedSchema schema, ICalibrator calibrator);
}
public abstract class Microsoft.ML.Trainers.LinearModelParameters : ModelParametersBase`1<float> {
    [BestFriendAttribute]
private protected VBuffer`1<float> Weight;
    private VBuffer`1<float> _weightsDense;
    private object _weightsDenseLock;
    [CompilerGeneratedAttribute]
private float <Bias>k__BackingField;
    private DataViewType _inputType;
    public IReadOnlyList`1<float> Weights { get; }
    public float Bias { get; protected set; }
    private bool Microsoft.ML.Model.Pfa.ICanSavePfa.CanSavePfa { get; }
    private FeatureContributionCalculator Microsoft.ML.Trainers.ICalculateFeatureContribution.FeatureContributionCalculator { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.InputType { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.OutputType { get; }
    internal LinearModelParameters(IHostEnvironment env, string name, VBuffer`1& weights, float bias);
    private protected LinearModelParameters(IHostEnvironment env, string name, ModelLoadContext ctx);
    public IReadOnlyList`1<float> get_Weights();
    [CompilerGeneratedAttribute]
public float get_Bias();
    [CompilerGeneratedAttribute]
protected void set_Bias(float value);
    private sealed virtual override bool Microsoft.ML.Model.Pfa.ICanSavePfa.get_CanSavePfa();
    private sealed virtual override bool Microsoft.ML.Model.OnnxConverter.ICanSaveOnnx.CanSaveOnnx(OnnxContext ctx);
    private sealed virtual override FeatureContributionCalculator Microsoft.ML.Trainers.ICalculateFeatureContribution.get_FeatureContributionCalculator();
    private protected virtual bool SaveAsOnnx(OnnxContext ctx, String[] outputs, string featureColumn);
    [BestFriendAttribute]
private protected virtual void SaveCore(ModelSaveContext ctx);
    private sealed virtual override JToken Microsoft.ML.Model.Pfa.ISingleCanSavePfa.SaveAsPfa(BoundPfaContext ctx, JToken input);
    private sealed virtual override bool Microsoft.ML.Model.OnnxConverter.ISingleCanSaveOnnx.SaveAsOnnx(OnnxContext ctx, String[] outputs, string featureColumn);
    private protected virtual float Score(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) src);
    private protected virtual void GetFeatureContributions(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) features, VBuffer`1& contributions, int top, int bottom, bool normalize);
    private void EnsureWeightsDense();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_InputType();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_OutputType();
    private sealed virtual override ValueMapper`2<TIn, TOut> Microsoft.ML.Data.IValueMapper.GetMapper();
    private protected void CombineParameters(IList`1<IParameterMixer`1<float>> models, VBuffer`1& weights, Single& bias);
    private sealed virtual override void Microsoft.ML.Model.ICanSaveInTextFormat.SaveAsText(TextWriter writer, RoleMappedSchema schema);
    private sealed virtual override void Microsoft.ML.Model.ICanSaveInSourceCode.SaveAsCode(TextWriter writer, RoleMappedSchema schema);
    [BestFriendAttribute]
private protected abstract virtual void SaveSummary(TextWriter writer, RoleMappedSchema schema);
    private sealed virtual override void Microsoft.ML.Model.ICanSaveSummary.SaveSummary(TextWriter writer, RoleMappedSchema schema);
    private protected virtual DataViewRow GetSummaryIRowOrNull(RoleMappedSchema schema);
    private sealed virtual override DataViewRow Microsoft.ML.Model.ICanGetSummaryAsIRow.GetSummaryIRowOrNull(RoleMappedSchema schema);
    private protected virtual DataViewRow GetStatsIRowOrNull(RoleMappedSchema schema);
    private sealed virtual override DataViewRow Microsoft.ML.Model.ICanGetSummaryAsIRow.GetStatsIRowOrNull(RoleMappedSchema schema);
    private protected abstract virtual void SaveAsIni(TextWriter writer, RoleMappedSchema schema, ICalibrator calibrator);
    private sealed virtual override void Microsoft.ML.Model.ICanSaveInIniFormat.SaveAsIni(TextWriter writer, RoleMappedSchema schema, ICalibrator calibrator);
    private sealed virtual override void Microsoft.ML.Model.IHaveFeatureWeights.GetFeatureWeights(VBuffer`1& weights);
    private sealed virtual override ValueMapper`2<TSrc, VBuffer`1<float>> Microsoft.ML.Trainers.IFeatureContributionMapper.GetFeatureContributionMapper(int top, int bottom, bool normalize);
    [CompilerGeneratedAttribute]
private void <Microsoft.ML.Data.IValueMapper.GetMapper>b__29_0(VBuffer`1& src, Single& dst);
}
public class Microsoft.ML.Trainers.LinearModelParameterStatistics : ModelStatisticsBase {
    internal static string LoaderSignature;
    private static int CoeffStatsRefactorVersion;
    private VBuffer`1<float> _coeffStdError;
    private VBuffer`1<float> _weights;
    private float _bias;
    internal LinearModelParameterStatistics(IHostEnvironment env, long trainingExampleCount, int paramCount, float deviance, float nullDeviance, VBuffer`1& coeffStdError, VBuffer`1<float> weights, float bias);
    private LinearModelParameterStatistics(IHostEnvironment env, ModelLoadContext ctx);
    private protected virtual VersionInfo GetVersionInfo();
    private protected virtual void SaveCore(ModelSaveContext ctx);
    public CoefficientStatistics GetBiasStatisticsForValue(float bias);
    public CoefficientStatistics GetBiasStatistics();
    private void GetUnorderedCoefficientStatistics(VBuffer`1& names, VBuffer`1& estimate, VBuffer`1& stdErr, VBuffer`1& zScore, VBuffer`1& pValue, ValueGetter`1& getSlotNames);
    private List`1<CoefficientStatistics> GetUnorderedCoefficientStatistics();
    private String[] GetFeatureNames(Column featureColumn);
    public CoefficientStatistics[] GetWeightsCoefficientStatistics(int paramCountCap);
    internal virtual void SaveText(TextWriter writer, Column featureColumn, int paramCountCap);
    internal virtual void SaveSummaryInKeyValuePairs(Column featureColumn, int paramCountCap, List`1<KeyValuePair`2<string, object>> resultCollection);
    internal virtual Annotations MakeStatisticsMetadata(RoleMappedSchema schema, VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) names);
}
public class Microsoft.ML.Trainers.LinearMulticlassModelParameters : LinearMulticlassModelParametersBase {
    internal static string LoaderSignature;
    internal static string RegistrationName;
    private static VersionInfo VersionInfo { get; }
    internal LinearMulticlassModelParameters(IHostEnvironment env, VBuffer`1& weights, int numClasses, int numFeatures, String[] labelNames, ModelStatisticsBase stats);
    internal LinearMulticlassModelParameters(IHostEnvironment env, VBuffer`1[] weights, Single[] bias, int numClasses, int numFeatures, String[] labelNames, ModelStatisticsBase stats);
    private LinearMulticlassModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo get_VersionInfo();
    private protected virtual VersionInfo GetVersionInfo();
    private protected virtual void Calibrate(Span`1<float> dst);
    internal static LinearMulticlassModelParameters Create(IHostEnvironment env, ModelLoadContext ctx);
    private protected virtual void SavePostTransformAsCode(TextWriter writer, string scoresName);
    private protected virtual string GetOnnxPostTransform();
    private protected virtual JToken ApplyPfaPostTransform(JToken input);
    private protected virtual string GetTrainerName();
}
public abstract class Microsoft.ML.Trainers.LinearMulticlassModelParametersBase : ModelParametersBase`1<VBuffer`1<float>> {
    private static string ModelStatsSubModelFilename;
    private static string LabelNamesSubModelFilename;
    private protected int NumberOfClasses;
    private protected int NumberOfFeatures;
    private String[] _labelNames;
    private protected Single[] Biases;
    private protected VBuffer`1[] Weights;
    public ModelStatisticsBase Statistics;
    private VBuffer`1[] modreq(System.Runtime.CompilerServices.IsVolatile) _weightsDense;
    internal DataViewType InputType;
    internal DataViewType OutputType;
    private protected PredictionKind PredictionKind { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.InputType { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.OutputType { get; }
    private bool Microsoft.ML.Model.Pfa.ICanSavePfa.CanSavePfa { get; }
    internal LinearMulticlassModelParametersBase(IHostEnvironment env, string name, VBuffer`1& weights, int numClasses, int numFeatures, String[] labelNames, ModelStatisticsBase stats);
    internal LinearMulticlassModelParametersBase(IHostEnvironment env, string name, VBuffer`1[] weights, Single[] bias, int numClasses, int numFeatures, String[] labelNames, ModelStatisticsBase stats);
    private protected LinearMulticlassModelParametersBase(IHostEnvironment env, string name, ModelLoadContext ctx);
    private protected virtual PredictionKind get_PredictionKind();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_InputType();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_OutputType();
    private sealed virtual override bool Microsoft.ML.Model.Pfa.ICanSavePfa.get_CanSavePfa();
    private sealed virtual override bool Microsoft.ML.Model.OnnxConverter.ICanSaveOnnx.CanSaveOnnx(OnnxContext ctx);
    private protected abstract virtual VersionInfo GetVersionInfo();
    private protected virtual void SaveCore(ModelSaveContext ctx);
    private static int NonZeroCount(VBuffer`1& vector);
    private sealed virtual override ValueMapper`2<TSrc, TDst> Microsoft.ML.Data.IValueMapper.GetMapper();
    private void PredictCore(VBuffer`1& src, VBuffer`1& dst);
    private VBuffer`1[] DensifyWeights();
    private protected abstract virtual void Calibrate(Span`1<float> dst);
    private sealed virtual override IList`1<KeyValuePair`2<string, object>> Microsoft.ML.Model.ICanGetSummaryInKeyValuePairs.GetSummaryInKeyValuePairs(RoleMappedSchema schema);
    private void SaveAsTextCore(TextWriter writer, RoleMappedSchema schema);
    private protected abstract virtual string GetTrainerName();
    private sealed virtual override void Microsoft.ML.Model.ICanSaveInTextFormat.SaveAsText(TextWriter writer, RoleMappedSchema schema);
    private sealed virtual override void Microsoft.ML.Model.ICanSaveSummary.SaveSummary(TextWriter writer, RoleMappedSchema schema);
    private void SaveAsCodeCore(TextWriter writer, RoleMappedSchema schema);
    private protected abstract virtual void SavePostTransformAsCode(TextWriter writer, string scoresName);
    private sealed virtual override void Microsoft.ML.Model.ICanSaveInSourceCode.SaveAsCode(TextWriter writer, RoleMappedSchema schema);
    private JToken SaveAsPfaCore(BoundPfaContext ctx, JToken input);
    private protected abstract virtual JToken ApplyPfaPostTransform(JToken input);
    private sealed virtual override JToken Microsoft.ML.Model.Pfa.ISingleCanSavePfa.SaveAsPfa(BoundPfaContext ctx, JToken input);
    private bool SaveAsOnnxCore(OnnxContext ctx, String[] outputs, string featureColumn);
    private protected abstract virtual string GetOnnxPostTransform();
    private sealed virtual override bool Microsoft.ML.Model.OnnxConverter.ISingleCanSaveOnnx.SaveAsOnnx(OnnxContext ctx, String[] outputs, string featureColumn);
    public void GetWeights(VBuffer`1[]& weights, Int32& numClasses);
    public IEnumerable`1<float> GetBiases();
    [IteratorStateMachineAttribute("Microsoft.ML.Trainers.LinearMulticlassModelParametersBase/<DenseWeightsEnumerable>d__46")]
internal IEnumerable`1<float> DenseWeightsEnumerable();
    internal string GetLabelName(int classNumber);
    private String[] LoadLabelNames(ModelLoadContext ctx, BinaryReader reader);
    private void SaveLabelNames(ModelSaveContext ctx, BinaryWriter writer);
    private sealed virtual override IDataView Microsoft.ML.Model.ICanGetSummaryAsIDataView.GetSummaryDataView(RoleMappedSchema schema);
    private sealed virtual override DataViewRow Microsoft.ML.Model.ICanGetSummaryAsIRow.GetSummaryIRowOrNull(RoleMappedSchema schema);
    private sealed virtual override DataViewRow Microsoft.ML.Model.ICanGetSummaryAsIRow.GetStatsIRowOrNull(RoleMappedSchema schema);
    [CompilerGeneratedAttribute]
private void <Microsoft.ML.Data.IValueMapper.GetMapper>b__26_0(VBuffer`1& src, VBuffer`1& dst);
}
internal static class Microsoft.ML.Trainers.LinearPredictorUtils : object {
    private static float Epsilon;
    public static void SaveAsCode(TextWriter writer, VBuffer`1& weights, float bias, RoleMappedSchema schema, string codeVariable);
    private static string FeatureNameAsCode(string featureName, int idx);
    public static string LinearModelAsIni(VBuffer`1& weights, float bias, IPredictor predictor, RoleMappedSchema schema, PlattCalibrator calibrator);
    public static string LinearModelAsText(string userName, string loadName, string settings, VBuffer`1& weights, float bias, RoleMappedSchema schema, PlattCalibrator calibrator);
    public static IEnumerable`1<KeyValuePair`2<string, float>> GetSortedLinearModelFeatureNamesAndWeights(float bias, VBuffer`1& weights, VBuffer`1& names);
    public static void SaveLinearModelWeightsInKeyValuePairs(VBuffer`1& weights, float bias, RoleMappedSchema schema, List`1<KeyValuePair`2<string, object>> results);
}
public class Microsoft.ML.Trainers.LinearRegressionModelParameters : RegressionModelParameters {
    internal static string LoaderSignature;
    internal static string RegistrationName;
    internal LinearRegressionModelParameters(IHostEnvironment env, VBuffer`1& weights, float bias);
    private LinearRegressionModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    internal static LinearRegressionModelParameters Create(IHostEnvironment env, ModelLoadContext ctx);
    private protected virtual void SaveCore(ModelSaveContext ctx);
    private protected virtual void SaveSummary(TextWriter writer, RoleMappedSchema schema);
    private sealed virtual override IParameterMixer`1<float> Microsoft.ML.Model.IParameterMixer<System.Single>.CombineParameters(IList`1<IParameterMixer`1<float>> models);
    private sealed virtual override IList`1<KeyValuePair`2<string, object>> Microsoft.ML.Model.ICanGetSummaryInKeyValuePairs.GetSummaryInKeyValuePairs(RoleMappedSchema schema);
}
public class Microsoft.ML.Trainers.LinearSvmTrainer : OnlineLinearTrainer`2<BinaryPredictionTransformer`1<LinearBinaryModelParameters>, LinearBinaryModelParameters> {
    internal static string LoadNameValue;
    internal static string ShortName;
    internal static string UserNameValue;
    internal static string Summary;
    internal Options Opts;
    private protected bool NeedCalibration { get; }
    private protected PredictionKind PredictionKind { get; }
    [BestFriendAttribute]
internal LinearSvmTrainer(IHostEnvironment env, string labelColumn, string featureColumn, string exampleWeightColumnName, int numberOfIterations);
    internal LinearSvmTrainer(IHostEnvironment env, Options options);
    private protected virtual bool get_NeedCalibration();
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual void CheckLabels(RoleMappedData data);
    private protected virtual TrainStateBase<BinaryPredictionTransformer`1<LinearBinaryModelParameters>, LinearBinaryModelParameters> MakeState(IChannel ch, int numFeatures, LinearModelParameters predictor);
    [EntryPointAttribute]
internal static BinaryClassificationOutput TrainLinearSvm(IHostEnvironment env, Options input);
    private protected virtual BinaryPredictionTransformer`1<LinearBinaryModelParameters> MakeTransformer(LinearBinaryModelParameters model, DataViewSchema trainSchema);
}
public abstract class Microsoft.ML.Trainers.LinearTrainerBase`2 : TrainerEstimatorBase`2<TTransformer, TModel> {
    private static string RegisterName;
    private static TrainerInfo _info;
    public TrainerInfo Info { get; }
    private protected bool ShuffleData { get; }
    private protected LinearTrainerBase`2(IHostEnvironment env, string featureColumn, Column labelColumn, string weightColumn);
    private static LinearTrainerBase`2();
    public virtual TrainerInfo get_Info();
    private protected abstract virtual bool get_ShuffleData();
    private protected virtual TModel TrainModelCore(TrainContext context);
    private protected abstract virtual TModel TrainCore(IChannel ch, RoleMappedData data, LinearModelParameters predictor, int weightSetCount);
    private protected RoleMappedData PrepareDataFromTrainingExamples(IChannel ch, RoleMappedData examples, Int32& weightSetCount);
    private protected abstract virtual void CheckLabel(RoleMappedData examples, Int32& weightSetCount);
    private protected float WDot(VBuffer`1& features, VBuffer`1& weights, float bias);
    private protected float WScaledDot(VBuffer`1& features, double scaling, VBuffer`1& weights, float bias);
    private protected virtual int ComputeNumThreads(Factory cursorFactory);
}
public class Microsoft.ML.Trainers.LsrDecay : LearningRateScheduler {
    private IReadOnlyList`1<LearningRateSchedulerItem> _lrSchedule;
    public float BaseLearningRate;
    public LsrDecay(float baseLearningRate);
    public LsrDecay(IReadOnlyList`1<LearningRateSchedulerItem> lrschedule, float baseLearningRate);
    private IReadOnlyList`1<LearningRateSchedulerItem> GetDefaultLearningDecayItems();
    private float GetLearningRateScheduleMultiplier(int epoch);
    internal virtual float GetLearningRate(DnnTrainState trainstate);
}
public class Microsoft.ML.Trainers.MaximumEntropyModelParameters : LinearMulticlassModelParametersBase {
    internal static string LoaderSignature;
    internal static string RegistrationName;
    private static VersionInfo VersionInfo { get; }
    internal MaximumEntropyModelParameters(IHostEnvironment env, VBuffer`1& weights, int numClasses, int numFeatures, String[] labelNames, ModelStatisticsBase stats);
    internal MaximumEntropyModelParameters(IHostEnvironment env, VBuffer`1[] weights, Single[] bias, int numClasses, int numFeatures, String[] labelNames, ModelStatisticsBase stats);
    private MaximumEntropyModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo get_VersionInfo();
    private protected virtual VersionInfo GetVersionInfo();
    private protected virtual void Calibrate(Span`1<float> dst);
    private protected virtual void SavePostTransformAsCode(TextWriter writer, string scoresName);
    private protected virtual string GetOnnxPostTransform();
    private protected virtual JToken ApplyPfaPostTransform(JToken input);
    private protected virtual string GetTrainerName();
}
public abstract class Microsoft.ML.Trainers.MetaMulticlassTrainer`2 : object {
    private protected Column LabelColumn;
    private protected OptionsBase<TTransformer, TModel> Args;
    private protected IHost Host;
    private protected ICalibratorTrainer Calibrator;
    private protected ITrainerEstimator`2<ISingleFeaturePredictionTransformer`1<IPredictorProducing`1<float>>, IPredictorProducing`1<float>> Trainer;
    private protected Column[] OutputColumns;
    [CompilerGeneratedAttribute]
private TrainerInfo <Info>k__BackingField;
    private PredictionKind Microsoft.ML.ITrainer.PredictionKind { get; }
    private protected PredictionKind PredictionKind { get; }
    public TrainerInfo Info { get; }
    internal MetaMulticlassTrainer`2(IHostEnvironment env, OptionsBase<TTransformer, TModel> options, string name, string labelColumn, ITrainerEstimator`2<ISingleFeaturePredictionTransformer`1<IPredictorProducing`1<float>>, IPredictorProducing`1<float>> singleEstimator, ICalibratorTrainer calibrator);
    private sealed virtual override PredictionKind Microsoft.ML.ITrainer.get_PredictionKind();
    private protected PredictionKind get_PredictionKind();
    [CompilerGeneratedAttribute]
public sealed virtual TrainerInfo get_Info();
    private ITrainerEstimator`2<ISingleFeaturePredictionTransformer`1<IPredictorProducing`1<float>>, IPredictorProducing`1<float>> CreateTrainer();
    private protected IDataView MapLabelsCore(DataViewType type, InPredicate`1<T> equalsTarget, RoleMappedData data);
    private protected abstract virtual TModel TrainCore(IChannel ch, RoleMappedData data, int count);
    private sealed virtual override IPredictor Microsoft.ML.ITrainer<Microsoft.ML.IPredictor>.Train(TrainContext context);
    public sealed virtual SchemaShape GetOutputSchema(SchemaShape inputSchema);
    private Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private sealed virtual override IPredictor Microsoft.ML.ITrainer.Train(TrainContext context);
    public abstract virtual TTransformer Fit(IDataView input);
}
public class Microsoft.ML.Trainers.ModelStatisticsBase : object {
    private protected IHostEnvironment Env;
    public long TrainingExampleCount;
    public float Deviance;
    public float NullDeviance;
    public int ParametersCount;
    internal static string LoaderSignature;
    internal ModelStatisticsBase(IHostEnvironment env, long trainingExampleCount, int paramCount, float deviance, float nullDeviance);
    internal ModelStatisticsBase(IHostEnvironment env, ModelLoadContext ctx);
    private sealed virtual override void Microsoft.ML.ICanSaveModel.Save(ModelSaveContext ctx);
    private protected virtual void SaveCore(ModelSaveContext ctx);
    internal virtual void SaveText(TextWriter writer, Column featureColumn, int paramCountCap);
    internal virtual void SaveSummaryInKeyValuePairs(Column featureColumn, int paramCountCap, List`1<KeyValuePair`2<string, object>> resultCollection);
    internal virtual Annotations MakeStatisticsMetadata(RoleMappedSchema schema, VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) names);
    private protected virtual VersionInfo GetVersionInfo();
}
public class Microsoft.ML.Trainers.NaiveBayesMulticlassModelParameters : ModelParametersBase`1<VBuffer`1<float>> {
    internal static string LoaderSignature;
    private Int64[] _labelHistogram;
    private Int64[][] _featureHistogram;
    private Double[] _absentFeaturesLogProb;
    private long _totalTrainingCount;
    private int _labelCount;
    private int _featureCount;
    private VectorDataViewType _inputType;
    private VectorDataViewType _outputType;
    private protected PredictionKind PredictionKind { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.InputType { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.OutputType { get; }
    internal NaiveBayesMulticlassModelParameters(IHostEnvironment env, Int64[] labelHistogram, Int64[][] featureHistogram, int featureCount);
    private NaiveBayesMulticlassModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    private protected virtual PredictionKind get_PredictionKind();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_InputType();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_OutputType();
    private sealed virtual override bool Microsoft.ML.Model.OnnxConverter.ICanSaveOnnx.CanSaveOnnx(OnnxContext ctx);
    [ObsoleteAttribute("This API is deprecated, please use GetLabelHistogramLong() which returns _labelHistogram with type IReadOnlyList<long> to avoid overflow errors with large datasets.", "True")]
public IReadOnlyList`1<int> GetLabelHistogram();
    public IReadOnlyList`1<long> GetLabelHistogramLong();
    [ObsoleteAttribute("This API is deprecated, please use GetFeatureHistogramLong() which returns _featureHistogram with type IReadOnlyList<long> to avoid overflow errors with large datasets.", "True")]
public IReadOnlyList`1<IReadOnlyList`1<int>> GetFeatureHistogram();
    public IReadOnlyList`1<IReadOnlyList`1<long>> GetFeatureHistogramLong();
    internal static NaiveBayesMulticlassModelParameters Create(IHostEnvironment env, ModelLoadContext ctx);
    private protected virtual void SaveCore(ModelSaveContext ctx);
    private static Double[] CalculateAbsentFeatureLogProbabilities(Int64[] labelHistogram, Int64[][] featureHistogram, int featureCount);
    private sealed virtual override ValueMapper`2<TIn, TOut> Microsoft.ML.Data.IValueMapper.GetMapper();
    private sealed virtual override bool Microsoft.ML.Model.OnnxConverter.ISingleCanSaveOnnx.SaveAsOnnx(OnnxContext ctx, String[] outputNames, string featureColumn);
    private void LogMul(OnnxContext ctx, string input, string isFeaturePresent, string output);
    private void ComputeLabelProbabilityFromFeature(double labelOccurrenceCount, int labelIndex, int featureIndex, float featureValue, Double& logProb, Double& absentFeatureLogProb);
    private void Map(VBuffer`1& src, VBuffer`1& dst);
}
public class Microsoft.ML.Trainers.NaiveBayesMulticlassTrainer : TrainerEstimatorBase`2<MulticlassPredictionTransformer`1<NaiveBayesMulticlassModelParameters>, NaiveBayesMulticlassModelParameters> {
    internal static string LoadName;
    internal static string UserName;
    internal static string ShortName;
    internal static string Summary;
    private static TrainerInfo _info;
    private protected PredictionKind PredictionKind { get; }
    public TrainerInfo Info { get; }
    internal NaiveBayesMulticlassTrainer(IHostEnvironment env, string labelColumn, string featureColumn);
    internal NaiveBayesMulticlassTrainer(IHostEnvironment env, Options options);
    private static NaiveBayesMulticlassTrainer();
    private protected virtual PredictionKind get_PredictionKind();
    public virtual TrainerInfo get_Info();
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual MulticlassPredictionTransformer`1<NaiveBayesMulticlassModelParameters> MakeTransformer(NaiveBayesMulticlassModelParameters model, DataViewSchema trainSchema);
    private protected virtual NaiveBayesMulticlassModelParameters TrainModelCore(TrainContext context);
    [EntryPointAttribute]
internal static MulticlassClassificationOutput TrainMulticlassNaiveBayesTrainer(IHostEnvironment env, Options input);
}
internal static class Microsoft.ML.Trainers.OneDalLbfgs : object {
    private static string OneDalLibPath;
    public static void LogisticRegressionCompute(Void* featuresPtr, Void* labelsPtr, Void* weightsPtr, bool useSampleWeights, Void* betaPtr, long nRows, int nColumns, int nClasses, float l1Reg, float l2Reg, float accuracyThreshold, int nIterations, int m, int nThreads);
}
public class Microsoft.ML.Trainers.OneVersusAllModelParameters : ModelParametersBase`1<VBuffer`1<float>> {
    internal static string LoaderSignature;
    internal static string RegistrationName;
    private static string SubPredictorFmt;
    private ImplBase _impl;
    [CompilerGeneratedAttribute]
private DataViewType <DistType>k__BackingField;
    internal ImmutableArray`1<object> SubModelParameters { get; }
    private protected PredictionKind PredictionKind { get; }
    private DataViewType DistType { get; }
    private bool Microsoft.ML.Model.Pfa.ICanSavePfa.CanSavePfa { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.InputType { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.OutputType { get; }
    private OneVersusAllModelParameters(IHostEnvironment env, ImplBase impl);
    private OneVersusAllModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    internal ImmutableArray`1<object> get_SubModelParameters();
    private protected virtual PredictionKind get_PredictionKind();
    [CompilerGeneratedAttribute]
private DataViewType get_DistType();
    private sealed virtual override bool Microsoft.ML.Model.Pfa.ICanSavePfa.get_CanSavePfa();
    [BestFriendAttribute]
internal static OneVersusAllModelParameters Create(IHost host, OutputFormula outputFormula, IPredictorProducing`1[] predictors);
    [BestFriendAttribute]
internal static OneVersusAllModelParameters Create(IHost host, bool useProbability, IPredictorProducing`1[] predictors);
    [BestFriendAttribute]
internal static OneVersusAllModelParameters Create(IHost host, IPredictorProducing`1[] predictors);
    internal static OneVersusAllModelParameters Create(IHostEnvironment env, ModelLoadContext ctx);
    private static void LoadPredictors(IHostEnvironment env, TPredictor[] predictors, ModelLoadContext ctx);
    private protected virtual void SaveCore(ModelSaveContext ctx);
    private sealed virtual override JToken Microsoft.ML.Model.Pfa.ISingleCanSavePfa.SaveAsPfa(BoundPfaContext ctx, JToken input);
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_InputType();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_OutputType();
    private sealed virtual override ValueMapper`2<TIn, TOut> Microsoft.ML.Data.IValueMapper.GetMapper();
    private sealed virtual override void Microsoft.ML.Model.ICanSaveInSourceCode.SaveAsCode(TextWriter writer, RoleMappedSchema schema);
    private sealed virtual override void Microsoft.ML.Model.ICanSaveInTextFormat.SaveAsText(TextWriter writer, RoleMappedSchema schema);
    private sealed virtual override bool Microsoft.ML.Model.OnnxConverter.ICanSaveOnnx.CanSaveOnnx(OnnxContext ctx);
    private sealed virtual override bool Microsoft.ML.Model.OnnxConverter.ISingleCanSaveOnnx.SaveAsOnnx(OnnxContext ctx, String[] outputNames, string featureColumn);
}
public class Microsoft.ML.Trainers.OneVersusAllTrainer : MetaMulticlassTrainer`2<MulticlassPredictionTransformer`1<OneVersusAllModelParameters>, OneVersusAllModelParameters> {
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal static string Summary;
    private Options _options;
    internal OneVersusAllTrainer(IHostEnvironment env, Options options);
    internal OneVersusAllTrainer(IHostEnvironment env, ITrainerEstimator`2<ISingleFeaturePredictionTransformer`1<IPredictorProducing`1<float>>, IPredictorProducing`1<float>> binaryEstimator, string labelColumnName, bool imputeMissingLabelsAsNegative, ICalibratorTrainer calibrator, int maximumCalibrationExampleCount, bool useProbabilities);
    private protected virtual OneVersusAllModelParameters TrainCore(IChannel ch, RoleMappedData data, int count);
    private ISingleFeaturePredictionTransformer`1<IPredictorProducing`1<float>> TrainOne(IChannel ch, ITrainerEstimator`2<ISingleFeaturePredictionTransformer`1<IPredictorProducing`1<float>>, IPredictorProducing`1<float>> trainer, RoleMappedData data, int cls);
    private IDataView MapLabels(RoleMappedData data, int cls);
    public virtual MulticlassPredictionTransformer`1<OneVersusAllModelParameters> Fit(IDataView input);
}
public class Microsoft.ML.Trainers.OnlineGradientDescentTrainer : AveragedLinearTrainer`2<RegressionPredictionTransformer`1<LinearRegressionModelParameters>, LinearRegressionModelParameters> {
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal static string Summary;
    internal static string ShortName;
    private protected PredictionKind PredictionKind { get; }
    internal OnlineGradientDescentTrainer(IHostEnvironment env, string labelColumn, string featureColumn, float learningRate, bool decreaseLearningRate, float l2Regularization, int numberOfIterations, IRegressionLoss lossFunction);
    internal OnlineGradientDescentTrainer(IHostEnvironment env, Options options);
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual void CheckLabels(RoleMappedData data);
    private protected virtual TrainStateBase<RegressionPredictionTransformer`1<LinearRegressionModelParameters>, LinearRegressionModelParameters> MakeState(IChannel ch, int numFeatures, LinearModelParameters predictor);
    [EntryPointAttribute]
internal static RegressionOutput TrainRegression(IHostEnvironment env, Options input);
    private protected virtual RegressionPredictionTransformer`1<LinearRegressionModelParameters> MakeTransformer(LinearRegressionModelParameters model, DataViewSchema trainSchema);
}
public abstract class Microsoft.ML.Trainers.OnlineLinearOptions : TrainerInputBaseWithLabel {
    [ArgumentAttribute("0")]
[TGUIAttribute]
[SweepableLongParamAttribute("NumIterations", "1", "100", "10", "-1", "True")]
[RangeAttribute("1", "512", "1", "True")]
public int NumberOfIterations;
    [ArgumentAttribute("0")]
[TGUIAttribute]
internal string InitialWeights;
    [ArgumentAttribute("0")]
[TGUIAttribute]
[SweepableFloatParamAttribute("InitWtsDiameter", "0", "1", "-1", "5", "False")]
[RangeAttribute("0", "1", "0", "False")]
public float InitialWeightsDiameter;
    [ArgumentAttribute("0")]
[SweepableDiscreteParamAttribute("Shuffle", "Mono.Cecil.CustomAttributeArgument[]", "False")]
public bool Shuffle;
}
public abstract class Microsoft.ML.Trainers.OnlineLinearTrainer`2 : TrainerEstimatorBase`2<TTransformer, TModel> {
    private protected OnlineLinearOptions OnlineLinearTrainerOptions;
    private protected string Name;
    private static float _maxWeightScale;
    private static float _minWeightScale;
    private protected static string UserErrorPositive;
    private protected static string UserErrorNonNegative;
    [CompilerGeneratedAttribute]
private TrainerInfo <Info>k__BackingField;
    public TrainerInfo Info { get; }
    private protected bool NeedCalibration { get; }
    private protected OnlineLinearTrainer`2(OnlineLinearOptions options, IHostEnvironment env, string name, Column label);
    [CompilerGeneratedAttribute]
public virtual TrainerInfo get_Info();
    private protected virtual bool get_NeedCalibration();
    private protected sealed virtual TModel TrainModelCore(TrainContext context);
    public TTransformer Fit(IDataView trainData, LinearModelParameters modelParameters);
    private protected abstract virtual void CheckLabels(RoleMappedData data);
    private void TrainCore(IChannel ch, RoleMappedData data, TrainStateBase<TTransformer, TModel> state);
    private protected abstract virtual TrainStateBase<TTransformer, TModel> MakeState(IChannel ch, int numFeatures, LinearModelParameters predictor);
}
public class Microsoft.ML.Trainers.PairwiseCouplingModelParameters : ModelParametersBase`1<VBuffer`1<float>> {
    internal static string LoaderSignature;
    internal static string RegistrationName;
    private static string SubPredictorFmt;
    private static string SubPredictorFmt2;
    private int _numClasses;
    private IDistPredictorProducing`2[] _predictors;
    private IValueMapperDist[] _mappers;
    private VectorDataViewType _inputType;
    private DataViewType _outputType;
    private protected PredictionKind PredictionKind { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.InputType { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.OutputType { get; }
    internal PairwiseCouplingModelParameters(IHostEnvironment env, IDistPredictorProducing`2[][] predictors);
    private PairwiseCouplingModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    private protected virtual PredictionKind get_PredictionKind();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_InputType();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_OutputType();
    private VectorDataViewType InitializeMappers(IValueMapperDist[]& mappers);
    private bool IsValid(IValueMapperDist mapper, VectorDataViewType& inputType);
    internal static PairwiseCouplingModelParameters Create(IHostEnvironment env, ModelLoadContext ctx);
    private protected virtual void SaveCore(ModelSaveContext ctx);
    private void ComputeProbabilities(Double[] buffer, Span`1<float> output);
    private void ReconcilePredictions(Double[] buffer);
    private double Pi(int i, Double[] values);
    private int GetIndex(int i, int j);
    private sealed virtual override ValueMapper`2<TIn, TOut> Microsoft.ML.Data.IValueMapper.GetMapper();
}
public class Microsoft.ML.Trainers.PairwiseCouplingTrainer : MetaMulticlassTrainer`2<MulticlassPredictionTransformer`1<PairwiseCouplingModelParameters>, PairwiseCouplingModelParameters> {
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal static string Summary;
    internal PairwiseCouplingTrainer(IHostEnvironment env, Options options);
    internal PairwiseCouplingTrainer(IHostEnvironment env, ITrainerEstimator`2<ISingleFeaturePredictionTransformer`1<IPredictorProducing`1<float>>, IPredictorProducing`1<float>> binaryEstimator, string labelColumnName, bool imputeMissingLabelsAsNegative, ICalibratorTrainer calibrator, int maximumCalibrationExampleCount);
    private protected virtual PairwiseCouplingModelParameters TrainCore(IChannel ch, RoleMappedData data, int count);
    private ISingleFeaturePredictionTransformer`1<IDistPredictorProducing`2<float, float>> TrainOne(IChannel ch, ITrainerEstimator`2<ISingleFeaturePredictionTransformer`1<IPredictorProducing`1<float>>, IPredictorProducing`1<float>> trainer, RoleMappedData data, int cls1, int cls2);
    private IDataView MapLabels(RoleMappedData data, int cls1, int cls2);
    public virtual MulticlassPredictionTransformer`1<PairwiseCouplingModelParameters> Fit(IDataView input);
}
public class Microsoft.ML.Trainers.PoissonRegressionModelParameters : RegressionModelParameters {
    internal static string LoaderSignature;
    internal static string RegistrationName;
    internal PoissonRegressionModelParameters(IHostEnvironment env, VBuffer`1& weights, float bias);
    private PoissonRegressionModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    internal static PoissonRegressionModelParameters Create(IHostEnvironment env, ModelLoadContext ctx);
    private sealed virtual override bool Microsoft.ML.Model.OnnxConverter.ISingleCanSaveOnnx.SaveAsOnnx(OnnxContext ctx, String[] outputs, string featureColumn);
    private protected virtual void SaveCore(ModelSaveContext ctx);
    private protected virtual float Score(VBuffer`1& modreq(System.Runtime.InteropServices.InAttribute) src);
    private protected virtual void SaveSummary(TextWriter writer, RoleMappedSchema schema);
    private sealed virtual override IParameterMixer`1<float> Microsoft.ML.Model.IParameterMixer<System.Single>.CombineParameters(IList`1<IParameterMixer`1<float>> models);
}
public class Microsoft.ML.Trainers.PolynomialLRDecay : LearningRateScheduler {
    public float LearningRate;
    public float EndLearningRate;
    public float Power;
    public bool Cycle;
    public float NumEpochsPerDecay;
    public PolynomialLRDecay(float learningRate, float numEpochsPerDecay, float endLearningRate, float power, bool cycle);
    internal virtual float GetLearningRate(DnnTrainState trainstate);
}
public class Microsoft.ML.Trainers.PriorModelParameters : ModelParametersBase`1<float> {
    internal static string LoaderSignature;
    private float _prob;
    private float _raw;
    private DataViewType _inputType;
    private protected PredictionKind PredictionKind { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.InputType { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.OutputType { get; }
    private DataViewType Microsoft.ML.Data.IValueMapperDist.DistType { get; }
    internal PriorModelParameters(IHostEnvironment env, float prob);
    private PriorModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    private sealed virtual override bool Microsoft.ML.Model.OnnxConverter.ICanSaveOnnx.CanSaveOnnx(OnnxContext ctx);
    internal static PriorModelParameters Create(IHostEnvironment env, ModelLoadContext ctx);
    private protected virtual void SaveCore(ModelSaveContext ctx);
    private sealed virtual override bool Microsoft.ML.Model.OnnxConverter.ISingleCanSaveOnnx.SaveAsOnnx(OnnxContext ctx, String[] outputs, string labelColumn);
    private protected virtual PredictionKind get_PredictionKind();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_InputType();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_OutputType();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapperDist.get_DistType();
    private sealed virtual override ValueMapper`2<TIn, TOut> Microsoft.ML.Data.IValueMapper.GetMapper();
    private sealed virtual override ValueMapper`3<TIn, TOut, TDist> Microsoft.ML.Data.IValueMapperDist.GetMapper();
    private void Map(VBuffer`1& src, Single& dst);
    private void MapDist(VBuffer`1& src, Single& score, Single& prob);
}
public class Microsoft.ML.Trainers.PriorTrainer : object {
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal static string Summary;
    private string _labelColumnName;
    private string _weightColumnName;
    private IHost _host;
    private static TrainerInfo _info;
    private PredictionKind Microsoft.ML.ITrainer.PredictionKind { get; }
    public TrainerInfo Info { get; }
    internal PriorTrainer(IHostEnvironment env, Options options);
    internal PriorTrainer(IHostEnvironment env, string labelColumn, string weightColunn);
    private static PriorTrainer();
    private sealed virtual override PredictionKind Microsoft.ML.ITrainer.get_PredictionKind();
    public sealed virtual TrainerInfo get_Info();
    public sealed virtual BinaryPredictionTransformer`1<PriorModelParameters> Fit(IDataView input);
    private PriorModelParameters Train(TrainContext context);
    private sealed virtual override IPredictor Microsoft.ML.ITrainer.Train(TrainContext context);
    private sealed virtual override PriorModelParameters Microsoft.ML.ITrainer<Microsoft.ML.Trainers.PriorModelParameters>.Train(TrainContext context);
    private static Column MakeFeatureColumn(string featureColumn);
    private static Column MakeLabelColumn(string labelColumn);
    public sealed virtual SchemaShape GetOutputSchema(SchemaShape inputSchema);
}
[ObsoleteAttribute("This class was fundamentally misdesigned, is incapable of implementing the interfaces it claims to implement, and it should not be used for any purposes beyond backwards compatibility of model loading.")]
internal class Microsoft.ML.Trainers.RandomModelParameters : ModelParametersBase`1<float> {
    internal static string LoaderSignature;
    private int _seed;
    private object _instanceLock;
    private Random _random;
    private DataViewType _inputType;
    private protected PredictionKind PredictionKind { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.InputType { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.OutputType { get; }
    private DataViewType Microsoft.ML.Data.IValueMapperDist.DistType { get; }
    internal RandomModelParameters(IHostEnvironment env, int seed);
    private RandomModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    private protected virtual PredictionKind get_PredictionKind();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_InputType();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_OutputType();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapperDist.get_DistType();
    internal static RandomModelParameters Create(IHostEnvironment env, ModelLoadContext ctx);
    private protected virtual void SaveCore(ModelSaveContext ctx);
    private sealed virtual override ValueMapper`2<TIn, TOut> Microsoft.ML.Data.IValueMapper.GetMapper();
    private sealed virtual override ValueMapper`3<TIn, TOut, TDist> Microsoft.ML.Data.IValueMapperDist.GetMapper();
    private float PredictCore();
    private void Map(VBuffer`1& src, Single& dst);
    private void MapDist(VBuffer`1& src, Single& score, Single& prob);
}
public abstract class Microsoft.ML.Trainers.RegressionModelParameters : LinearModelParameters {
    private protected PredictionKind PredictionKind { get; }
    [BestFriendAttribute]
private protected RegressionModelParameters(IHostEnvironment env, string name, VBuffer`1& weights, float bias);
    [BestFriendAttribute]
private protected RegressionModelParameters(IHostEnvironment env, string name, ModelLoadContext ctx);
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual void SaveAsIni(TextWriter writer, RoleMappedSchema schema, ICalibrator calibrator);
}
internal static class Microsoft.ML.Trainers.Sdca : object {
    [EntryPointAttribute]
internal static BinaryClassificationOutput TrainBinary(IHostEnvironment env, Options input);
    [EntryPointAttribute]
public static MulticlassClassificationOutput TrainMulticlass(IHostEnvironment env, Options input);
    [EntryPointAttribute]
public static RegressionOutput TrainRegression(IHostEnvironment env, Options input);
}
public abstract class Microsoft.ML.Trainers.SdcaBinaryTrainerBase`1 : SdcaTrainerBase`3<BinaryOptionsBase<TModelParameters>, BinaryPredictionTransformer`1<TModelParameters>, TModelParameters> {
    private ISupportSdcaClassificationLoss _loss;
    private float _positiveInstanceWeight;
    private Column[] _outputColumns;
    [CompilerGeneratedAttribute]
private TrainerInfo <Info>k__BackingField;
    private protected bool ShuffleData { get; }
    private protected PredictionKind PredictionKind { get; }
    public TrainerInfo Info { get; }
    private protected SdcaBinaryTrainerBase`1(IHostEnvironment env, string labelColumnName, string featureColumnName, string weightColumnName, ISupportSdcaClassificationLoss loss, Nullable`1<float> l2Const, Nullable`1<float> l1Threshold, Nullable`1<int> maxIterations);
    private protected SdcaBinaryTrainerBase`1(IHostEnvironment env, BinaryOptionsBase<TModelParameters> options, ISupportSdcaClassificationLoss loss, bool doCalibration);
    private protected virtual bool get_ShuffleData();
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual PredictionKind get_PredictionKind();
    [CompilerGeneratedAttribute]
public virtual TrainerInfo get_Info();
    private protected abstract virtual Column[] ComputeSdcaBinaryClassifierSchemaShape();
    private protected LinearBinaryModelParameters CreateLinearBinaryModelParameters(VBuffer`1[] weights, Single[] bias);
    private protected virtual float GetInstanceWeight(FloatLabelCursor cursor);
    private protected virtual void CheckLabel(RoleMappedData examples, Int32& weightSetCount);
    private protected virtual BinaryPredictionTransformer`1<TModelParameters> MakeTransformer(TModelParameters model, DataViewSchema trainSchema);
}
public class Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer : SdcaBinaryTrainerBase`1<CalibratedModelParametersBase`2<LinearBinaryModelParameters, PlattCalibrator>> {
    internal SdcaLogisticRegressionBinaryTrainer(IHostEnvironment env, string labelColumnName, string featureColumnName, string weightColumnName, Nullable`1<float> l2Const, Nullable`1<float> l1Threshold, Nullable`1<int> maxIterations);
    internal SdcaLogisticRegressionBinaryTrainer(IHostEnvironment env, Options options);
    private protected virtual CalibratedModelParametersBase`2<LinearBinaryModelParameters, PlattCalibrator> CreatePredictor(VBuffer`1[] weights, Single[] bias);
    private protected virtual Column[] ComputeSdcaBinaryClassifierSchemaShape();
}
public class Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer : SdcaMulticlassTrainerBase`1<MaximumEntropyModelParameters> {
    internal SdcaMaximumEntropyMulticlassTrainer(IHostEnvironment env, string labelColumn, string featureColumn, string weights, Nullable`1<float> l2Const, Nullable`1<float> l1Threshold, Nullable`1<int> maxIterations);
    internal SdcaMaximumEntropyMulticlassTrainer(IHostEnvironment env, Options options, string featureColumn, string labelColumn, string weightColumn);
    internal SdcaMaximumEntropyMulticlassTrainer(IHostEnvironment env, Options options);
    private protected virtual MaximumEntropyModelParameters CreatePredictor(VBuffer`1[] weights, Single[] bias);
    private protected virtual MulticlassPredictionTransformer`1<MaximumEntropyModelParameters> MakeTransformer(MaximumEntropyModelParameters model, DataViewSchema trainSchema);
}
public abstract class Microsoft.ML.Trainers.SdcaMulticlassTrainerBase`1 : SdcaTrainerBase`3<MulticlassOptions<TModel>, MulticlassPredictionTransformer`1<TModel>, TModel> {
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal static string ShortName;
    internal static string Summary;
    private ISupportSdcaClassificationLoss _loss;
    private protected PredictionKind PredictionKind { get; }
    internal SdcaMulticlassTrainerBase`1(IHostEnvironment env, string labelColumn, string featureColumn, string weights, ISupportSdcaClassificationLoss loss, Nullable`1<float> l2Const, Nullable`1<float> l1Threshold, Nullable`1<int> maxIterations);
    internal SdcaMulticlassTrainerBase`1(IHostEnvironment env, MulticlassOptions<TModel> options, string featureColumn, string labelColumn, string weightColumn);
    internal SdcaMulticlassTrainerBase`1(IHostEnvironment env, MulticlassOptions<TModel> options);
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual void TrainWithoutLock(IProgressChannelProvider progress, Factory cursorFactory, Random rand, IdToIdxLookup<MulticlassOptions<TModel>, MulticlassPredictionTransformer`1<TModel>, TModel> idToIdx, int numThreads, DualsTableBase<MulticlassOptions<TModel>, MulticlassPredictionTransformer`1<TModel>, TModel> duals, Single[] biasReg, Single[] invariants, float lambdaNInv, VBuffer`1[] weights, Single[] biasUnreg, VBuffer`1[] l1IntermediateWeights, Single[] l1IntermediateBias, Single[] featureNormSquared);
    private protected virtual bool CheckConvergence(IProgressChannel pch, int iter, Factory cursorFactory, DualsTableBase<MulticlassOptions<TModel>, MulticlassPredictionTransformer`1<TModel>, TModel> duals, IdToIdxLookup<MulticlassOptions<TModel>, MulticlassPredictionTransformer`1<TModel>, TModel> idToIdx, VBuffer`1[] weights, VBuffer`1[] bestWeights, Single[] biasUnreg, Single[] bestBiasUnreg, Single[] biasReg, Single[] bestBiasReg, long count, Double[] metrics, Double& bestPrimalLoss, Int32& bestIter);
    private protected virtual void CheckLabel(RoleMappedData examples, Int32& weightSetCount);
    private protected virtual Single[] InitializeFeatureNormSquared(int length);
    private protected virtual float GetInstanceWeight(FloatLabelCursor cursor);
}
public class Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer : SdcaBinaryTrainerBase`1<LinearBinaryModelParameters> {
    internal SdcaNonCalibratedBinaryTrainer(IHostEnvironment env, string labelColumnName, string featureColumnName, string weightColumnName, ISupportSdcaClassificationLoss loss, Nullable`1<float> l2Const, Nullable`1<float> l1Threshold, Nullable`1<int> maxIterations);
    internal SdcaNonCalibratedBinaryTrainer(IHostEnvironment env, Options options);
    private protected virtual Column[] ComputeSdcaBinaryClassifierSchemaShape();
    private protected virtual LinearBinaryModelParameters CreatePredictor(VBuffer`1[] weights, Single[] bias);
}
public class Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer : SdcaMulticlassTrainerBase`1<LinearMulticlassModelParameters> {
    internal SdcaNonCalibratedMulticlassTrainer(IHostEnvironment env, string labelColumn, string featureColumn, string weights, ISupportSdcaClassificationLoss loss, Nullable`1<float> l2Const, Nullable`1<float> l1Threshold, Nullable`1<int> maxIterations);
    internal SdcaNonCalibratedMulticlassTrainer(IHostEnvironment env, Options options, string featureColumn, string labelColumn, string weightColumn);
    internal SdcaNonCalibratedMulticlassTrainer(IHostEnvironment env, Options options);
    private protected virtual LinearMulticlassModelParameters CreatePredictor(VBuffer`1[] weights, Single[] bias);
    private protected virtual MulticlassPredictionTransformer`1<LinearMulticlassModelParameters> MakeTransformer(LinearMulticlassModelParameters model, DataViewSchema trainSchema);
}
public class Microsoft.ML.Trainers.SdcaRegressionTrainer : SdcaTrainerBase`3<Options, RegressionPredictionTransformer`1<LinearRegressionModelParameters>, LinearRegressionModelParameters> {
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal static string ShortName;
    internal static string Summary;
    private ISupportSdcaRegressionLoss _loss;
    private protected PredictionKind PredictionKind { get; }
    internal SdcaRegressionTrainer(IHostEnvironment env, string labelColumn, string featureColumn, string weights, ISupportSdcaRegressionLoss loss, Nullable`1<float> l2Const, Nullable`1<float> l1Threshold, Nullable`1<int> maxIterations);
    internal SdcaRegressionTrainer(IHostEnvironment env, Options options, string featureColumn, string labelColumn, string weightColumn);
    internal SdcaRegressionTrainer(IHostEnvironment env, Options options);
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual LinearRegressionModelParameters CreatePredictor(VBuffer`1[] weights, Single[] bias);
    private protected virtual float GetInstanceWeight(FloatLabelCursor cursor);
    private protected virtual void CheckLabel(RoleMappedData examples, Int32& weightSetCount);
    private protected virtual int ComputeNumThreads(Factory cursorFactory);
    private protected virtual float TuneDefaultL2(IChannel ch, int maxIterations, long rowCount, int numThreads);
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual RegressionPredictionTransformer`1<LinearRegressionModelParameters> MakeTransformer(LinearRegressionModelParameters model, DataViewSchema trainSchema);
}
public abstract class Microsoft.ML.Trainers.SdcaTrainerBase`3 : StochasticTrainerBase`2<TTransformer, TModel> {
    private static long MaxDualTableSize;
    private static float L2LowerBound;
    private protected TOptions SdcaTrainerOptions;
    private protected ISupportSdcaLoss Loss;
    private static string RegisterName;
    private protected bool ShuffleData { get; }
    internal SdcaTrainerBase`3(IHostEnvironment env, string featureColumnName, Column labelColumn, Column weight, Nullable`1<float> l2Const, Nullable`1<float> l1Threshold, Nullable`1<int> maxIterations);
    internal SdcaTrainerBase`3(IHostEnvironment env, TOptions options, Column label, Column weight, Nullable`1<float> l2Const, Nullable`1<float> l1Threshold, Nullable`1<int> maxIterations);
    private protected virtual bool get_ShuffleData();
    private static TOptions ArgsInit(string featureColumnName, Column labelColumn);
    private protected float WDot(VBuffer`1& features, VBuffer`1& weights, float bias);
    private protected sealed virtual TModel TrainCore(IChannel ch, RoleMappedData data, LinearModelParameters predictor, int weightSetCount);
    private protected abstract virtual TModel CreatePredictor(VBuffer`1[] weights, Single[] bias);
    private static int TuneDefaultMaxIterations(IChannel ch, long count, int numThreads);
    private protected virtual float TuneDefaultL2(IChannel ch, int maxIterations, long rowCount, int numThreads);
    private static float TuneDefaultL1(IChannel ch, int numFeatures);
    private void InitializeConvergenceMetrics(String[]& names, Double[]& initialValues);
    private protected virtual void TrainWithoutLock(IProgressChannelProvider progress, Factory cursorFactory, Random rand, IdToIdxLookup<TOptions, TTransformer, TModel> idToIdx, int numThreads, DualsTableBase<TOptions, TTransformer, TModel> duals, Single[] biasReg, Single[] invariants, float lambdaNInv, VBuffer`1[] weights, Single[] biasUnreg, VBuffer`1[] l1IntermediateWeights, Single[] l1IntermediateBias, Single[] featureNormSquared);
    private protected virtual bool CheckConvergence(IProgressChannel pch, int iter, Factory cursorFactory, DualsTableBase<TOptions, TTransformer, TModel> duals, IdToIdxLookup<TOptions, TTransformer, TModel> idToIdx, VBuffer`1[] weights, VBuffer`1[] bestWeights, Single[] biasUnreg, Single[] bestBiasUnreg, Single[] biasReg, Single[] bestBiasReg, long count, Double[] metrics, Double& bestPrimalLoss, Int32& bestIter);
    private protected virtual Single[] InitializeFeatureNormSquared(int length);
    private protected abstract virtual float GetInstanceWeight(FloatLabelCursor cursor);
    private protected Func`2<DataViewRowId, long> GetIndexFromIdGetter(IdToIdxLookup<TOptions, TTransformer, TModel> idToIdx, int biasLength);
    private protected Func`3<DataViewRowId, long, long> GetIndexFromIdAndRowGetter(IdToIdxLookup<TOptions, TTransformer, TModel> idToIdx, int biasLength);
}
public abstract class Microsoft.ML.Trainers.SgdBinaryTrainerBase`1 : LinearTrainerBase`2<BinaryPredictionTransformer`1<TModel>, TModel> {
    private OptionsBase<TModel> _options;
    [CompilerGeneratedAttribute]
private IClassificationLoss <Loss>k__BackingField;
    [CompilerGeneratedAttribute]
private TrainerInfo <Info>k__BackingField;
    private protected IClassificationLoss Loss { get; }
    private protected bool ShuffleData { get; }
    private protected PredictionKind PredictionKind { get; }
    public TrainerInfo Info { get; }
    internal SgdBinaryTrainerBase`1(IHostEnvironment env, string labelColumn, string featureColumn, string weightColumn, IClassificationLoss loss, int maxIterations, double initLearningRate, float l2Weight);
    internal SgdBinaryTrainerBase`1(IHostEnvironment env, OptionsBase<TModel> options, IClassificationLoss loss, bool doCalibration);
    [CompilerGeneratedAttribute]
private protected IClassificationLoss get_Loss();
    private protected virtual bool get_ShuffleData();
    private protected virtual PredictionKind get_PredictionKind();
    [CompilerGeneratedAttribute]
public virtual TrainerInfo get_Info();
    private protected virtual BinaryPredictionTransformer`1<TModel> MakeTransformer(TModel model, DataViewSchema trainSchema);
    public BinaryPredictionTransformer`1<TModel> Fit(IDataView trainData, LinearModelParameters modelParameters);
    private protected virtual TModel TrainCore(IChannel ch, RoleMappedData data, LinearModelParameters predictor, int weightSetCount);
    private protected abstract virtual TModel CreateModel(VBuffer`1<float> weights, float bias);
    private protected LinearBinaryModelParameters CreateLinearBinaryModelParameters(VBuffer`1<float> weights, float bias);
    private protected virtual void CheckLabel(RoleMappedData examples, Int32& weightSetCount);
}
public class Microsoft.ML.Trainers.SgdCalibratedTrainer : SgdBinaryTrainerBase`1<CalibratedModelParametersBase`2<LinearBinaryModelParameters, PlattCalibrator>> {
    internal SgdCalibratedTrainer(IHostEnvironment env, string labelColumn, string featureColumn, string weightColumn, int maxIterations, double initLearningRate, float l2Weight);
    internal SgdCalibratedTrainer(IHostEnvironment env, Options options);
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual CalibratedModelParametersBase`2<LinearBinaryModelParameters, PlattCalibrator> CreateModel(VBuffer`1<float> weights, float bias);
}
public class Microsoft.ML.Trainers.SgdNonCalibratedTrainer : SgdBinaryTrainerBase`1<LinearBinaryModelParameters> {
    internal SgdNonCalibratedTrainer(IHostEnvironment env, string labelColumn, string featureColumn, string weightColumn, int maxIterations, double initLearningRate, float l2Weight, IClassificationLoss loss);
    internal SgdNonCalibratedTrainer(IHostEnvironment env, Options options);
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual LinearBinaryModelParameters CreateModel(VBuffer`1<float> weights, float bias);
}
public abstract class Microsoft.ML.Trainers.StochasticTrainerBase`2 : TrainerEstimatorBase`2<TTransformer, TModel> {
    private static TrainerInfo _info;
    private protected bool ShuffleData { get; }
    public TrainerInfo Info { get; }
    public StochasticTrainerBase`2(IHost host, Column feature, Column label, Column weight);
    private static StochasticTrainerBase`2();
    private protected abstract virtual bool get_ShuffleData();
    public virtual TrainerInfo get_Info();
    private protected virtual TModel TrainModelCore(TrainContext context);
    private protected virtual int ComputeNumThreads(Factory cursorFactory);
    private protected RoleMappedData PrepareDataFromTrainingExamples(IChannel ch, RoleMappedData examples, Int32& weightSetCount);
    private protected abstract virtual TModel TrainCore(IChannel ch, RoleMappedData data, LinearModelParameters predictor, int weightSetCount);
    private protected abstract virtual void CheckLabel(RoleMappedData examples, Int32& weightSetCount);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
