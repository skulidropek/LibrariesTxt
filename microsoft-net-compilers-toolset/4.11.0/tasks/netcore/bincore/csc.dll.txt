internal class Microsoft.CodeAnalysis.CommandLine.<BuildProtocol>F8271E8AE89A2C907DE3408139AD3133781C41781E59512107BFAD57B38332113__MismatchedVersionBuildResponse : BuildResponse {
    public ResponseType Type { get; }
    public virtual ResponseType get_Type();
    [NullableContextAttribute("1")]
protected virtual void AddResponseBody(BinaryWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CommandLine.AnalyzerInconsistencyBuildResponse : BuildResponse {
    [CompilerGeneratedAttribute]
private ReadOnlyCollection`1<string> <ErrorMessages>k__BackingField;
    public ResponseType Type { get; }
    public ReadOnlyCollection`1<string> ErrorMessages { get; }
    public AnalyzerInconsistencyBuildResponse(ReadOnlyCollection`1<string> errorMessages);
    public virtual ResponseType get_Type();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<string> get_ErrorMessages();
    protected virtual void AddResponseBody(BinaryWriter writer);
    public static AnalyzerInconsistencyBuildResponse Create(BinaryReader reader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CommandLine.BuildClient : object {
    private ICompilerServerLogger _logger;
    private RequestLanguage _language;
    private CompileFunc _compileFunc;
    private CompileOnServerFunc _compileOnServerFunc;
    internal static bool IsRunningOnWindows { get; }
    internal BuildClient(ICompilerServerLogger logger, RequestLanguage language, CompileFunc compileFunc, CompileOnServerFunc compileOnServerFunc);
    internal static bool get_IsRunningOnWindows();
    public static string GetClientDirectory();
    [NullableContextAttribute("2")]
public static string GetSystemSdkDirectory();
    internal static int Run(IEnumerable`1<string> arguments, RequestLanguage language, CompileFunc compileFunc, CompileOnServerFunc compileOnServerFunc, ICompilerServerLogger logger);
    [NullableContextAttribute("2")]
internal RunCompilationResult RunCompilation(IEnumerable`1<string> originalArguments, BuildPaths buildPaths, TextWriter textWriter, string pipeName);
    public Task`1<RunCompilationResult> RunCompilationAsync(IEnumerable`1<string> originalArguments, BuildPaths buildPaths, TextWriter textWriter);
    private int RunLocalCompilation(String[] arguments, BuildPaths buildPaths, TextWriter textWriter);
    public static CompileOnServerFunc GetCompileOnServerFunc(ICompilerServerLogger logger);
    private Nullable`1<RunCompilationResult> RunServerCompilation(TextWriter textWriter, List`1<string> arguments, BuildPaths buildPaths, string libDirectory, string pipeName, string keepAlive);
    private static IEnumerable`1<string> GetCommandLineArgs(IEnumerable`1<string> args);
    private static bool UseNativeArguments();
    private static bool AreNamedPipesSupported();
    private static IEnumerable`1<string> GetCommandLineWindows(IEnumerable`1<string> args);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.CommandLine.BuildProtocolConstants : object {
    public static string ReadLengthPrefixedString(BinaryReader reader);
    public static void WriteLengthPrefixedString(BinaryWriter writer, string value);
    [NullableContextAttribute("2")]
public static string GetCommitHash();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CommandLine.BuildProtocolConstants/<ReadAllAsync>d__4")]
internal static Task ReadAllAsync(Stream stream, Byte[] buffer, int count, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CommandLine.BuildRequest : object {
    private static int MaximumRequestSize;
    public string RequestId;
    public RequestLanguage Language;
    public ReadOnlyCollection`1<Argument> Arguments;
    public string CompilerHash;
    public BuildRequest(RequestLanguage language, string compilerHash, IEnumerable`1<Argument> arguments, string requestId);
    public static BuildRequest Create(RequestLanguage language, IList`1<string> args, string workingDirectory, string tempDirectory, string compilerHash, string requestId, string keepAlive, string libDirectory);
    public static BuildRequest CreateShutdown();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CommandLine.BuildRequest/<ReadAsync>d__8")]
public static Task`1<BuildRequest> ReadAsync(Stream inStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CommandLine.BuildRequest/<WriteAsync>d__9")]
public Task WriteAsync(Stream outStream, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.CodeAnalysis.CommandLine.BuildResponse : object {
    public ResponseType Type { get; }
    public abstract virtual ResponseType get_Type();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CommandLine.BuildResponse/<WriteAsync>d__3")]
public Task WriteAsync(Stream outStream, CancellationToken cancellationToken);
    protected abstract virtual void AddResponseBody(BinaryWriter writer);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CommandLine.BuildResponse/<ReadAsync>d__5")]
public static Task`1<BuildResponse> ReadAsync(Stream stream, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CommandLine.BuildServerConnection : object {
    internal static int TimeOutMsExistingProcess;
    internal static int TimeOutMsNewProcess;
    private static string GlobalMutexPrefix;
    internal static bool IsCompilerServerSupported { get; }
    internal static bool get_IsCompilerServerSupported();
    internal static BuildRequest CreateBuildRequest(string requestId, RequestLanguage language, List`1<string> arguments, string workingDirectory, string tempDirectory, string keepAlive, string libDirectory);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CommandLine.BuildServerConnection/<RunServerShutdownRequestAsync>d__6")]
internal static Task`1<bool> RunServerShutdownRequestAsync(string pipeName, Nullable`1<int> timeoutOverride, bool waitForProcess, ICompilerServerLogger logger, CancellationToken cancellationToken);
    internal static Task`1<BuildResponse> RunServerBuildRequestAsync(BuildRequest buildRequest, string pipeName, string clientDirectory, ICompilerServerLogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CommandLine.BuildServerConnection/<RunServerBuildRequestAsync>d__8")]
internal static Task`1<BuildResponse> RunServerBuildRequestAsync(BuildRequest buildRequest, string pipeName, Nullable`1<int> timeoutOverride, Func`3<string, ICompilerServerLogger, bool> tryCreateServerFunc, ICompilerServerLogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CommandLine.BuildServerConnection/<MonitorDisconnectAsync>d__9")]
internal static Task MonitorDisconnectAsync(PipeStream pipeStream, string requestId, ICompilerServerLogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CommandLine.BuildServerConnection/<TryConnectToServerAsync>d__10")]
internal static Task`1<NamedPipeClientStream> TryConnectToServerAsync(string pipeName, int timeoutMs, ICompilerServerLogger logger, CancellationToken cancellationToken);
    internal static ValueTuple`3<string, string, string> GetServerProcessInfo(string clientDir, string pipeName);
    internal static bool TryCreateServer(string clientDirectory, string pipeName, ICompilerServerLogger logger, Int32& processId);
    internal static string GetPipeName(string clientDirectory);
    internal static string GetPipeName(string userName, bool isAdmin, string clientDirectory);
    internal static bool WasServerMutexOpen(string mutexName);
    internal static IServerMutex OpenOrCreateMutex(string name, Boolean& createdNew);
    internal static string GetServerMutexName(string pipeName);
    internal static string GetClientMutexName(string pipeName);
    [NullableContextAttribute("2")]
internal static string GetTempPath(string workingDir);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> <RunServerShutdownRequestAsync>g__wasServerRunning|6_0(string pipeName);
    [CompilerGeneratedAttribute]
internal static Task`1<NamedPipeClientStream> <RunServerBuildRequestAsync>g__tryConnectToServerAsync|8_0(string pipeName, Nullable`1<int> timeoutOverride, ICompilerServerLogger logger, Func`3<string, ICompilerServerLogger, bool> tryCreateServerFunc, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CommandLine.BuildServerConnection/<<RunServerBuildRequestAsync>g__tryRunRequestAsync|8_1>d")]
[CompilerGeneratedAttribute]
internal static Task`1<BuildResponse> <RunServerBuildRequestAsync>g__tryRunRequestAsync|8_1(NamedPipeClientStream pipeStream, BuildRequest request, ICompilerServerLogger logger, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static string <GetTempPath>g__getTempPathLinux|19_0();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static string <GetTempPath>g__getTempPathWindows|19_1(string workingDir);
}
internal class Microsoft.CodeAnalysis.CommandLine.CannotConnectResponse : BuildResponse {
    public ResponseType Type { get; }
    public virtual ResponseType get_Type();
    [NullableContextAttribute("1")]
protected virtual void AddResponseBody(BinaryWriter writer);
}
internal class Microsoft.CodeAnalysis.CommandLine.CompileFunc : MulticastDelegate {
    public CompileFunc(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual int Invoke(String[] arguments, BuildPaths buildPaths, TextWriter textWriter, IAnalyzerAssemblyLoader analyzerAssemblyLoader);
    public virtual IAsyncResult BeginInvoke(String[] arguments, BuildPaths buildPaths, TextWriter textWriter, IAnalyzerAssemblyLoader analyzerAssemblyLoader, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class Microsoft.CodeAnalysis.CommandLine.CompileOnServerFunc : MulticastDelegate {
    public CompileOnServerFunc(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual Task`1<BuildResponse> Invoke(BuildRequest buildRequest, string pipeName, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(BuildRequest buildRequest, string pipeName, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual Task`1<BuildResponse> EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CommandLine.CompilerServerLogger : object {
    internal static string EnvironmentVariableName;
    internal static string LoggingPrefix;
    [NullableAttribute("2")]
private Stream _loggingStream;
    private string _identifier;
    public bool IsLogging { get; }
    public CompilerServerLogger(string identifier, string loggingFilePath);
    public sealed virtual bool get_IsLogging();
    public sealed virtual void Dispose();
    public sealed virtual void Log(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.CommandLine.CompilerServerLoggerExtensions : object {
    [ExtensionAttribute]
internal static void Log(ICompilerServerLogger logger, string format, Object[] arguments);
    [ExtensionAttribute]
internal static void LogError(ICompilerServerLogger logger, string message);
    [ExtensionAttribute]
internal static void LogError(ICompilerServerLogger logger, string format, Object[] arguments);
    [ExtensionAttribute]
internal static void LogException(ICompilerServerLogger logger, Exception exception, string reason);
    [CompilerGeneratedAttribute]
internal static void <LogException>g__AppendException|3_0(Exception exception, <>c__DisplayClass3_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CommandLine.CompletedBuildResponse : BuildResponse {
    public int ReturnCode;
    public bool Utf8Output;
    public string Output;
    public ResponseType Type { get; }
    [NullableContextAttribute("2")]
public CompletedBuildResponse(int returnCode, bool utf8output, string output);
    public virtual ResponseType get_Type();
    public static CompletedBuildResponse Create(BinaryReader reader);
    protected virtual void AddResponseBody(BinaryWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.CommandLine.ConsoleUtil : object {
    private static Encoding s_utf8Encoding;
    private static ConsoleUtil();
    internal static T RunWithUtf8Output(Func`2<TextWriter, T> func);
    internal static T RunWithUtf8Output(bool utf8Output, TextWriter textWriter, Func`2<TextWriter, T> func);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CommandLine.EmptyCompilerServerLogger : object {
    [CompilerGeneratedAttribute]
private static EmptyCompilerServerLogger <Instance>k__BackingField;
    public static EmptyCompilerServerLogger Instance { get; }
    public bool IsLogging { get; }
    private static EmptyCompilerServerLogger();
    [CompilerGeneratedAttribute]
public static EmptyCompilerServerLogger get_Instance();
    public sealed virtual bool get_IsLogging();
    public sealed virtual void Log(string message);
}
internal class Microsoft.CodeAnalysis.CommandLine.ExitingTraceListener : TraceListener {
    [CompilerGeneratedAttribute]
private ICompilerServerLogger <Logger>k__BackingField;
    internal ICompilerServerLogger Logger { get; }
    internal ExitingTraceListener(ICompilerServerLogger logger);
    [CompilerGeneratedAttribute]
internal ICompilerServerLogger get_Logger();
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    internal static void Install(ICompilerServerLogger logger);
    private void Exit(string originalMessage);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeAnalysis.CommandLine.ICompilerServerLogger {
    public bool IsLogging { get; }
    public abstract virtual bool get_IsLogging();
    public abstract virtual void Log(string message);
}
internal class Microsoft.CodeAnalysis.CommandLine.IncorrectHashBuildResponse : BuildResponse {
    public ResponseType Type { get; }
    public virtual ResponseType get_Type();
    [NullableContextAttribute("1")]
protected virtual void AddResponseBody(BinaryWriter writer);
}
internal interface Microsoft.CodeAnalysis.CommandLine.IServerMutex {
    public bool IsDisposed { get; }
    public abstract virtual bool TryLock(int timeoutMs);
    public abstract virtual bool get_IsDisposed();
}
internal static class Microsoft.CodeAnalysis.CommandLine.NativeMethods : object {
    internal static IntPtr NullPtr;
    internal static IntPtr InvalidIntPtr;
    internal static UInt32 NORMAL_PRIORITY_CLASS;
    internal static UInt32 CREATE_NO_WINDOW;
    internal static int STARTF_USESTDHANDLES;
    internal static int ERROR_SUCCESS;
    private static NativeMethods();
    internal static bool CloseHandle(IntPtr hObject);
    [NullableContextAttribute("1")]
internal static bool CreateProcess(string lpApplicationName, StringBuilder lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, UInt32 dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation);
    internal static IntPtr GetCommandLine();
}
internal class Microsoft.CodeAnalysis.CommandLine.PROCESS_INFORMATION : ValueType {
    public IntPtr hProcess;
    public IntPtr hThread;
    public int dwProcessId;
    public int dwThreadId;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CommandLine.RejectedBuildResponse : BuildResponse {
    public string Reason;
    public ResponseType Type { get; }
    public RejectedBuildResponse(string reason);
    public virtual ResponseType get_Type();
    protected virtual void AddResponseBody(BinaryWriter writer);
    public static RejectedBuildResponse Create(BinaryReader reader);
}
internal enum Microsoft.CodeAnalysis.CommandLine.RequestLanguage : Enum {
    public int value__;
    public static RequestLanguage CSharpCompile;
    public static RequestLanguage VisualBasicCompile;
}
[IsReadOnlyAttribute]
internal class Microsoft.CodeAnalysis.CommandLine.RunCompilationResult : ValueType {
    internal static RunCompilationResult Succeeded;
    internal static RunCompilationResult Failed;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RanOnServer>k__BackingField;
    internal int ExitCode { get; }
    internal bool RanOnServer { get; }
    internal RunCompilationResult(int exitCode, bool ranOnServer);
    private static RunCompilationResult();
    [CompilerGeneratedAttribute]
internal int get_ExitCode();
    [CompilerGeneratedAttribute]
internal bool get_RanOnServer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CommandLine.ServerFileMutex : object {
    [NullableAttribute("2")]
public FileStream Stream;
    public string FilePath;
    public string GuardPath;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public bool IsDisposed { get; private set; }
    public ServerFileMutex(string name);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    internal static string GetMutexDirectory();
    internal FileStream LockGuard();
    internal bool TryLockFile();
    internal void UnlockFile();
    public sealed virtual bool TryLock(int timeoutMs);
    public bool CouldLock();
    public sealed virtual void Dispose();
}
internal class Microsoft.CodeAnalysis.CommandLine.ServerNamedMutex : object {
    [NullableAttribute("1")]
public Mutex Mutex;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    public bool IsDisposed { get; private set; }
    public bool IsLocked { get; private set; }
    [NullableContextAttribute("1")]
public ServerNamedMutex(string mutexName, Boolean& createdNew);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLocked();
    [CompilerGeneratedAttribute]
private void set_IsLocked(bool value);
    [NullableContextAttribute("1")]
public static bool WasOpen(string mutexName);
    public sealed virtual bool TryLock(int timeoutMs);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CommandLine.ShutdownBuildResponse : BuildResponse {
    public int ServerProcessId;
    public ResponseType Type { get; }
    public ShutdownBuildResponse(int serverProcessId);
    public virtual ResponseType get_Type();
    protected virtual void AddResponseBody(BinaryWriter writer);
    public static ShutdownBuildResponse Create(BinaryReader reader);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CommandLine.STARTUPINFO : ValueType {
    internal int cb;
    internal string lpReserved;
    internal string lpDesktop;
    internal string lpTitle;
    internal int dwX;
    internal int dwY;
    internal int dwXSize;
    internal int dwYSize;
    internal int dwXCountChars;
    internal int dwYCountChars;
    internal int dwFillAttribute;
    internal int dwFlags;
    internal short wShowWindow;
    internal short cbReserved2;
    internal IntPtr lpReserved2;
    internal IntPtr hStdInput;
    internal IntPtr hStdOutput;
    internal IntPtr hStdError;
}
internal class Microsoft.CodeAnalysis.CSharp.CommandLine.Csc : CSharpCompiler {
    internal Csc(string responseFile, BuildPaths buildPaths, String[] args, IAnalyzerAssemblyLoader analyzerLoader);
    internal static int Run(String[] args, BuildPaths buildPaths, TextWriter textWriter, IAnalyzerAssemblyLoader analyzerLoader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeAnalysis.CSharp.CommandLine.Program : object {
    public static int Main(String[] args);
    private static int MainCore(String[] args);
    public static int Run(String[] args, string clientDir, string workingDir, string sdkDir, string tempDir, TextWriter textWriter, IAnalyzerAssemblyLoader analyzerLoader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.NamedPipeUtil : object {
    private static int PipeBufferSize;
    private static PipeOptions CurrentUserOption;
    private static string GetPipeNameOrPath(string pipeName);
    internal static NamedPipeClientStream CreateClient(string serverName, string pipeName, PipeDirection direction, PipeOptions options);
    internal static bool CheckClientElevationMatches(NamedPipeServerStream pipeStream);
    internal static NamedPipeServerStream CreateServer(string pipeName, Nullable`1<PipeDirection> pipeDirection);
    internal static bool CheckPipeConnectionOwnership(NamedPipeClientStream pipeStream);
    [NullableContextAttribute("2")]
internal static PipeSecurity CreatePipeSecurity();
    private static NamedPipeServerStream CreateServer(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<string, bool> <CheckClientElevationMatches>g__getIdentity|3_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.RuntimeHostInfo : object {
    private static string DotNetHostPathEnvironmentName;
    internal static bool IsDesktopRuntime { get; }
    internal static bool IsCoreClrRuntime { get; }
    internal static bool get_IsDesktopRuntime();
    internal static ValueTuple`3<string, string, string> GetProcessInfo(string toolFilePathWithoutExtension, string commandLineArguments);
    internal static bool get_IsCoreClrRuntime();
    internal static string GetDotNetPathOrDefault();
}
