[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class ILLink.CodeFix.BaseAttributeCodeFixProvider : CodeFixProvider {
    private protected LocalizableString CodeFixTitle { get; }
    private protected string FullyQualifiedAttributeName { get; }
    private protected AttributeableParentTargets AttributableParentTargets { get; }
    private protected abstract virtual LocalizableString get_CodeFixTitle();
    private protected abstract virtual string get_FullyQualifiedAttributeName();
    private protected abstract virtual AttributeableParentTargets get_AttributableParentTargets();
    public sealed virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("ILLink.CodeFix.BaseAttributeCodeFixProvider/<BaseRegisterCodeFixesAsync>d__7")]
protected Task BaseRegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("ILLink.CodeFix.BaseAttributeCodeFixProvider/<AddAttributeAsync>d__8")]
private Task`1<Document> AddAttributeAsync(Document document, Diagnostic diagnostic, SyntaxNode targetNode, SyntaxNode attributableNode, CancellationToken cancellationToken);
    private static CSharpSyntaxNode FindAttributableParent(SyntaxNode node, AttributeableParentTargets targets);
    protected abstract virtual SyntaxNode[] GetAttributeArguments(ISymbol attributableSymbol, ISymbol targetSymbol, SyntaxGenerator syntaxGenerator, Diagnostic diagnostic);
    [NullableContextAttribute("2")]
protected static bool HasPublicAccessibility(ISymbol m);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class ILLink.CodeFix.DynamicallyAccessedMembersCodeFixProvider : CodeFixProvider {
    private static String[] AttributeOnReturn;
    private static String[] AttributeOnGeneric;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private static LocalizableResourceString CodeFixTitle { get; }
    private static string FullyQualifiedAttributeName { get; }
    private static DynamicallyAccessedMembersCodeFixProvider();
    private static ImmutableArray`1<DiagnosticDescriptor> GetSupportedDiagnostics();
    public static ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    private static LocalizableResourceString get_CodeFixTitle();
    private static string get_FullyQualifiedAttributeName();
    public sealed virtual FixAllProvider GetFixAllProvider();
    [AsyncStateMachineAttribute("ILLink.CodeFix.DynamicallyAccessedMembersCodeFixProvider/<RegisterCodeFixesAsync>d__12")]
public virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    [AsyncStateMachineAttribute("ILLink.CodeFix.DynamicallyAccessedMembersCodeFixProvider/<AddAttributeAsync>d__13")]
private static Task`1<Document> AddAttributeAsync(Document document, SyntaxNode targetNode, string stringArguments, bool addAsReturnAttribute, bool addGenericParameterAttribute, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class ILLink.CodeFix.RequiresAssemblyFilesCodeFixProvider : BaseAttributeCodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private protected LocalizableString CodeFixTitle { get; }
    private protected string FullyQualifiedAttributeName { get; }
    private protected AttributeableParentTargets AttributableParentTargets { get; }
    public static ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    private protected virtual LocalizableString get_CodeFixTitle();
    private protected virtual string get_FullyQualifiedAttributeName();
    private protected virtual AttributeableParentTargets get_AttributableParentTargets();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    protected virtual SyntaxNode[] GetAttributeArguments(ISymbol attributableSymbol, ISymbol targetSymbol, SyntaxGenerator syntaxGenerator, Diagnostic diagnostic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class ILLink.CodeFix.RequiresDynamicCodeCodeFixProvider : BaseAttributeCodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private protected LocalizableString CodeFixTitle { get; }
    private protected string FullyQualifiedAttributeName { get; }
    private protected AttributeableParentTargets AttributableParentTargets { get; }
    public static ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    private protected virtual LocalizableString get_CodeFixTitle();
    private protected virtual string get_FullyQualifiedAttributeName();
    private protected virtual AttributeableParentTargets get_AttributableParentTargets();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    protected virtual SyntaxNode[] GetAttributeArguments(ISymbol attributableSymbol, ISymbol targetSymbol, SyntaxGenerator syntaxGenerator, Diagnostic diagnostic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class ILLink.CodeFix.RequiresUnreferencedCodeCodeFixProvider : BaseAttributeCodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private protected LocalizableString CodeFixTitle { get; }
    private protected string FullyQualifiedAttributeName { get; }
    private protected AttributeableParentTargets AttributableParentTargets { get; }
    public static ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    private protected virtual LocalizableString get_CodeFixTitle();
    private protected virtual string get_FullyQualifiedAttributeName();
    private protected virtual AttributeableParentTargets get_AttributableParentTargets();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    protected virtual SyntaxNode[] GetAttributeArguments(ISymbol attributableSymbol, ISymbol targetSymbol, SyntaxGenerator syntaxGenerator, Diagnostic diagnostic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class ILLink.CodeFix.UnconditionalSuppressMessageCodeFixProvider : BaseAttributeCodeFixProvider {
    private static string Justification;
    private static string UnconditionalSuppressMessageAttribute;
    public static string FullyQualifiedUnconditionalSuppressMessageAttribute;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    private protected LocalizableString CodeFixTitle { get; }
    private protected string FullyQualifiedAttributeName { get; }
    private protected AttributeableParentTargets AttributableParentTargets { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    private protected virtual LocalizableString get_CodeFixTitle();
    private protected virtual string get_FullyQualifiedAttributeName();
    private protected virtual AttributeableParentTargets get_AttributableParentTargets();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
    protected virtual SyntaxNode[] GetAttributeArguments(ISymbol attributableSymbol, ISymbol targetSymbol, SyntaxGenerator syntaxGenerator, Diagnostic diagnostic);
}
internal class ILLink.CodeFixProvider.RequiresHelpers : object {
    internal static SyntaxNode[] GetAttributeArgumentsForRequires(ISymbol targetSymbol, SyntaxGenerator syntaxGenerator, bool hasPublicAccessibility);
}
internal static class ILLink.CodeFixProvider.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string RequiresAssemblyFilesCodeFixTitle { get; }
    internal static string RequiresUnreferencedCodeCodeFixTitle { get; }
    internal static string RequiresDynamicCodeCodeFixTitle { get; }
    internal static string UconditionalSuppressMessageCodeFixTitle { get; }
    internal static string DynamicallyAccessedMembersCodeFixTitle { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_RequiresAssemblyFilesCodeFixTitle();
    internal static string get_RequiresUnreferencedCodeCodeFixTitle();
    internal static string get_RequiresDynamicCodeCodeFixTitle();
    internal static string get_UconditionalSuppressMessageCodeFixTitle();
    internal static string get_DynamicallyAccessedMembersCodeFixTitle();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
